
F411_AllinOne.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00013860  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000021a4  08013a00  08013a00  00014a00  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08015ba4  08015ba4  000242fc  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08015ba4  08015ba4  00016ba4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08015bac  08015bac  000242fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08015bac  08015bac  00016bac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08015bb0  08015bb0  00016bb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000d2fc  20000000  08015bb4  00017000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00009238  2000d2fc  08022eb0  000242fc  2**2
                  ALLOC
 10 ._user_heap_stack 00001004  20016534  08022eb0  00024534  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000242fc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001e45e  00000000  00000000  0002432c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004ce1  00000000  00000000  0004278a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000018b8  00000000  00000000  00047470  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001307  00000000  00000000  00048d28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001d8f8  00000000  00000000  0004a02f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00024ebe  00000000  00000000  00067927  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a3e60  00000000  00000000  0008c7e5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00130645  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007ab8  00000000  00000000  00130688  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004f  00000000  00000000  00138140  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000d2fc 	.word	0x2000d2fc
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080139e8 	.word	0x080139e8

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000d300 	.word	0x2000d300
 80001dc:	080139e8 	.word	0x080139e8

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <strlen>:
 80002a0:	4603      	mov	r3, r0
 80002a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002a6:	2a00      	cmp	r2, #0
 80002a8:	d1fb      	bne.n	80002a2 <strlen+0x2>
 80002aa:	1a18      	subs	r0, r3, r0
 80002ac:	3801      	subs	r0, #1
 80002ae:	4770      	bx	lr

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	@ 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_d2uiz>:
 8000bd8:	004a      	lsls	r2, r1, #1
 8000bda:	d211      	bcs.n	8000c00 <__aeabi_d2uiz+0x28>
 8000bdc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000be0:	d211      	bcs.n	8000c06 <__aeabi_d2uiz+0x2e>
 8000be2:	d50d      	bpl.n	8000c00 <__aeabi_d2uiz+0x28>
 8000be4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000be8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bec:	d40e      	bmi.n	8000c0c <__aeabi_d2uiz+0x34>
 8000bee:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bf2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bf6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bfa:	fa23 f002 	lsr.w	r0, r3, r2
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c0a:	d102      	bne.n	8000c12 <__aeabi_d2uiz+0x3a>
 8000c0c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c10:	4770      	bx	lr
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	4770      	bx	lr

08000c18 <__aeabi_d2f>:
 8000c18:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c1c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c20:	bf24      	itt	cs
 8000c22:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c26:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c2a:	d90d      	bls.n	8000c48 <__aeabi_d2f+0x30>
 8000c2c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c30:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c34:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c38:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c3c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c40:	bf08      	it	eq
 8000c42:	f020 0001 	biceq.w	r0, r0, #1
 8000c46:	4770      	bx	lr
 8000c48:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c4c:	d121      	bne.n	8000c92 <__aeabi_d2f+0x7a>
 8000c4e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c52:	bfbc      	itt	lt
 8000c54:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c58:	4770      	bxlt	lr
 8000c5a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c5e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c62:	f1c2 0218 	rsb	r2, r2, #24
 8000c66:	f1c2 0c20 	rsb	ip, r2, #32
 8000c6a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c6e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c72:	bf18      	it	ne
 8000c74:	f040 0001 	orrne.w	r0, r0, #1
 8000c78:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c7c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c80:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c84:	ea40 000c 	orr.w	r0, r0, ip
 8000c88:	fa23 f302 	lsr.w	r3, r3, r2
 8000c8c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c90:	e7cc      	b.n	8000c2c <__aeabi_d2f+0x14>
 8000c92:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c96:	d107      	bne.n	8000ca8 <__aeabi_d2f+0x90>
 8000c98:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c9c:	bf1e      	ittt	ne
 8000c9e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000ca2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000ca6:	4770      	bxne	lr
 8000ca8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000cac:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000cb0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_uldivmod>:
 8000cb8:	b953      	cbnz	r3, 8000cd0 <__aeabi_uldivmod+0x18>
 8000cba:	b94a      	cbnz	r2, 8000cd0 <__aeabi_uldivmod+0x18>
 8000cbc:	2900      	cmp	r1, #0
 8000cbe:	bf08      	it	eq
 8000cc0:	2800      	cmpeq	r0, #0
 8000cc2:	bf1c      	itt	ne
 8000cc4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cc8:	f04f 30ff 	movne.w	r0, #4294967295
 8000ccc:	f000 b9be 	b.w	800104c <__aeabi_idiv0>
 8000cd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cd8:	f000 f83c 	bl	8000d54 <__udivmoddi4>
 8000cdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ce0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ce4:	b004      	add	sp, #16
 8000ce6:	4770      	bx	lr

08000ce8 <__aeabi_d2lz>:
 8000ce8:	b538      	push	{r3, r4, r5, lr}
 8000cea:	2200      	movs	r2, #0
 8000cec:	2300      	movs	r3, #0
 8000cee:	4604      	mov	r4, r0
 8000cf0:	460d      	mov	r5, r1
 8000cf2:	f7ff ff0b 	bl	8000b0c <__aeabi_dcmplt>
 8000cf6:	b928      	cbnz	r0, 8000d04 <__aeabi_d2lz+0x1c>
 8000cf8:	4620      	mov	r0, r4
 8000cfa:	4629      	mov	r1, r5
 8000cfc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d00:	f000 b80a 	b.w	8000d18 <__aeabi_d2ulz>
 8000d04:	4620      	mov	r0, r4
 8000d06:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000d0a:	f000 f805 	bl	8000d18 <__aeabi_d2ulz>
 8000d0e:	4240      	negs	r0, r0
 8000d10:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d14:	bd38      	pop	{r3, r4, r5, pc}
 8000d16:	bf00      	nop

08000d18 <__aeabi_d2ulz>:
 8000d18:	b5d0      	push	{r4, r6, r7, lr}
 8000d1a:	4b0c      	ldr	r3, [pc, #48]	@ (8000d4c <__aeabi_d2ulz+0x34>)
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	4606      	mov	r6, r0
 8000d20:	460f      	mov	r7, r1
 8000d22:	f7ff fc81 	bl	8000628 <__aeabi_dmul>
 8000d26:	f7ff ff57 	bl	8000bd8 <__aeabi_d2uiz>
 8000d2a:	4604      	mov	r4, r0
 8000d2c:	f7ff fc02 	bl	8000534 <__aeabi_ui2d>
 8000d30:	4b07      	ldr	r3, [pc, #28]	@ (8000d50 <__aeabi_d2ulz+0x38>)
 8000d32:	2200      	movs	r2, #0
 8000d34:	f7ff fc78 	bl	8000628 <__aeabi_dmul>
 8000d38:	4602      	mov	r2, r0
 8000d3a:	460b      	mov	r3, r1
 8000d3c:	4630      	mov	r0, r6
 8000d3e:	4639      	mov	r1, r7
 8000d40:	f7ff faba 	bl	80002b8 <__aeabi_dsub>
 8000d44:	f7ff ff48 	bl	8000bd8 <__aeabi_d2uiz>
 8000d48:	4621      	mov	r1, r4
 8000d4a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d4c:	3df00000 	.word	0x3df00000
 8000d50:	41f00000 	.word	0x41f00000

08000d54 <__udivmoddi4>:
 8000d54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d58:	9d08      	ldr	r5, [sp, #32]
 8000d5a:	468e      	mov	lr, r1
 8000d5c:	4604      	mov	r4, r0
 8000d5e:	4688      	mov	r8, r1
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	d14a      	bne.n	8000dfa <__udivmoddi4+0xa6>
 8000d64:	428a      	cmp	r2, r1
 8000d66:	4617      	mov	r7, r2
 8000d68:	d962      	bls.n	8000e30 <__udivmoddi4+0xdc>
 8000d6a:	fab2 f682 	clz	r6, r2
 8000d6e:	b14e      	cbz	r6, 8000d84 <__udivmoddi4+0x30>
 8000d70:	f1c6 0320 	rsb	r3, r6, #32
 8000d74:	fa01 f806 	lsl.w	r8, r1, r6
 8000d78:	fa20 f303 	lsr.w	r3, r0, r3
 8000d7c:	40b7      	lsls	r7, r6
 8000d7e:	ea43 0808 	orr.w	r8, r3, r8
 8000d82:	40b4      	lsls	r4, r6
 8000d84:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d88:	fa1f fc87 	uxth.w	ip, r7
 8000d8c:	fbb8 f1fe 	udiv	r1, r8, lr
 8000d90:	0c23      	lsrs	r3, r4, #16
 8000d92:	fb0e 8811 	mls	r8, lr, r1, r8
 8000d96:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d9a:	fb01 f20c 	mul.w	r2, r1, ip
 8000d9e:	429a      	cmp	r2, r3
 8000da0:	d909      	bls.n	8000db6 <__udivmoddi4+0x62>
 8000da2:	18fb      	adds	r3, r7, r3
 8000da4:	f101 30ff 	add.w	r0, r1, #4294967295
 8000da8:	f080 80ea 	bcs.w	8000f80 <__udivmoddi4+0x22c>
 8000dac:	429a      	cmp	r2, r3
 8000dae:	f240 80e7 	bls.w	8000f80 <__udivmoddi4+0x22c>
 8000db2:	3902      	subs	r1, #2
 8000db4:	443b      	add	r3, r7
 8000db6:	1a9a      	subs	r2, r3, r2
 8000db8:	b2a3      	uxth	r3, r4
 8000dba:	fbb2 f0fe 	udiv	r0, r2, lr
 8000dbe:	fb0e 2210 	mls	r2, lr, r0, r2
 8000dc2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000dc6:	fb00 fc0c 	mul.w	ip, r0, ip
 8000dca:	459c      	cmp	ip, r3
 8000dcc:	d909      	bls.n	8000de2 <__udivmoddi4+0x8e>
 8000dce:	18fb      	adds	r3, r7, r3
 8000dd0:	f100 32ff 	add.w	r2, r0, #4294967295
 8000dd4:	f080 80d6 	bcs.w	8000f84 <__udivmoddi4+0x230>
 8000dd8:	459c      	cmp	ip, r3
 8000dda:	f240 80d3 	bls.w	8000f84 <__udivmoddi4+0x230>
 8000dde:	443b      	add	r3, r7
 8000de0:	3802      	subs	r0, #2
 8000de2:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000de6:	eba3 030c 	sub.w	r3, r3, ip
 8000dea:	2100      	movs	r1, #0
 8000dec:	b11d      	cbz	r5, 8000df6 <__udivmoddi4+0xa2>
 8000dee:	40f3      	lsrs	r3, r6
 8000df0:	2200      	movs	r2, #0
 8000df2:	e9c5 3200 	strd	r3, r2, [r5]
 8000df6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dfa:	428b      	cmp	r3, r1
 8000dfc:	d905      	bls.n	8000e0a <__udivmoddi4+0xb6>
 8000dfe:	b10d      	cbz	r5, 8000e04 <__udivmoddi4+0xb0>
 8000e00:	e9c5 0100 	strd	r0, r1, [r5]
 8000e04:	2100      	movs	r1, #0
 8000e06:	4608      	mov	r0, r1
 8000e08:	e7f5      	b.n	8000df6 <__udivmoddi4+0xa2>
 8000e0a:	fab3 f183 	clz	r1, r3
 8000e0e:	2900      	cmp	r1, #0
 8000e10:	d146      	bne.n	8000ea0 <__udivmoddi4+0x14c>
 8000e12:	4573      	cmp	r3, lr
 8000e14:	d302      	bcc.n	8000e1c <__udivmoddi4+0xc8>
 8000e16:	4282      	cmp	r2, r0
 8000e18:	f200 8105 	bhi.w	8001026 <__udivmoddi4+0x2d2>
 8000e1c:	1a84      	subs	r4, r0, r2
 8000e1e:	eb6e 0203 	sbc.w	r2, lr, r3
 8000e22:	2001      	movs	r0, #1
 8000e24:	4690      	mov	r8, r2
 8000e26:	2d00      	cmp	r5, #0
 8000e28:	d0e5      	beq.n	8000df6 <__udivmoddi4+0xa2>
 8000e2a:	e9c5 4800 	strd	r4, r8, [r5]
 8000e2e:	e7e2      	b.n	8000df6 <__udivmoddi4+0xa2>
 8000e30:	2a00      	cmp	r2, #0
 8000e32:	f000 8090 	beq.w	8000f56 <__udivmoddi4+0x202>
 8000e36:	fab2 f682 	clz	r6, r2
 8000e3a:	2e00      	cmp	r6, #0
 8000e3c:	f040 80a4 	bne.w	8000f88 <__udivmoddi4+0x234>
 8000e40:	1a8a      	subs	r2, r1, r2
 8000e42:	0c03      	lsrs	r3, r0, #16
 8000e44:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e48:	b280      	uxth	r0, r0
 8000e4a:	b2bc      	uxth	r4, r7
 8000e4c:	2101      	movs	r1, #1
 8000e4e:	fbb2 fcfe 	udiv	ip, r2, lr
 8000e52:	fb0e 221c 	mls	r2, lr, ip, r2
 8000e56:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000e5a:	fb04 f20c 	mul.w	r2, r4, ip
 8000e5e:	429a      	cmp	r2, r3
 8000e60:	d907      	bls.n	8000e72 <__udivmoddi4+0x11e>
 8000e62:	18fb      	adds	r3, r7, r3
 8000e64:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000e68:	d202      	bcs.n	8000e70 <__udivmoddi4+0x11c>
 8000e6a:	429a      	cmp	r2, r3
 8000e6c:	f200 80e0 	bhi.w	8001030 <__udivmoddi4+0x2dc>
 8000e70:	46c4      	mov	ip, r8
 8000e72:	1a9b      	subs	r3, r3, r2
 8000e74:	fbb3 f2fe 	udiv	r2, r3, lr
 8000e78:	fb0e 3312 	mls	r3, lr, r2, r3
 8000e7c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000e80:	fb02 f404 	mul.w	r4, r2, r4
 8000e84:	429c      	cmp	r4, r3
 8000e86:	d907      	bls.n	8000e98 <__udivmoddi4+0x144>
 8000e88:	18fb      	adds	r3, r7, r3
 8000e8a:	f102 30ff 	add.w	r0, r2, #4294967295
 8000e8e:	d202      	bcs.n	8000e96 <__udivmoddi4+0x142>
 8000e90:	429c      	cmp	r4, r3
 8000e92:	f200 80ca 	bhi.w	800102a <__udivmoddi4+0x2d6>
 8000e96:	4602      	mov	r2, r0
 8000e98:	1b1b      	subs	r3, r3, r4
 8000e9a:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000e9e:	e7a5      	b.n	8000dec <__udivmoddi4+0x98>
 8000ea0:	f1c1 0620 	rsb	r6, r1, #32
 8000ea4:	408b      	lsls	r3, r1
 8000ea6:	fa22 f706 	lsr.w	r7, r2, r6
 8000eaa:	431f      	orrs	r7, r3
 8000eac:	fa0e f401 	lsl.w	r4, lr, r1
 8000eb0:	fa20 f306 	lsr.w	r3, r0, r6
 8000eb4:	fa2e fe06 	lsr.w	lr, lr, r6
 8000eb8:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000ebc:	4323      	orrs	r3, r4
 8000ebe:	fa00 f801 	lsl.w	r8, r0, r1
 8000ec2:	fa1f fc87 	uxth.w	ip, r7
 8000ec6:	fbbe f0f9 	udiv	r0, lr, r9
 8000eca:	0c1c      	lsrs	r4, r3, #16
 8000ecc:	fb09 ee10 	mls	lr, r9, r0, lr
 8000ed0:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000ed4:	fb00 fe0c 	mul.w	lr, r0, ip
 8000ed8:	45a6      	cmp	lr, r4
 8000eda:	fa02 f201 	lsl.w	r2, r2, r1
 8000ede:	d909      	bls.n	8000ef4 <__udivmoddi4+0x1a0>
 8000ee0:	193c      	adds	r4, r7, r4
 8000ee2:	f100 3aff 	add.w	sl, r0, #4294967295
 8000ee6:	f080 809c 	bcs.w	8001022 <__udivmoddi4+0x2ce>
 8000eea:	45a6      	cmp	lr, r4
 8000eec:	f240 8099 	bls.w	8001022 <__udivmoddi4+0x2ce>
 8000ef0:	3802      	subs	r0, #2
 8000ef2:	443c      	add	r4, r7
 8000ef4:	eba4 040e 	sub.w	r4, r4, lr
 8000ef8:	fa1f fe83 	uxth.w	lr, r3
 8000efc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000f00:	fb09 4413 	mls	r4, r9, r3, r4
 8000f04:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000f08:	fb03 fc0c 	mul.w	ip, r3, ip
 8000f0c:	45a4      	cmp	ip, r4
 8000f0e:	d908      	bls.n	8000f22 <__udivmoddi4+0x1ce>
 8000f10:	193c      	adds	r4, r7, r4
 8000f12:	f103 3eff 	add.w	lr, r3, #4294967295
 8000f16:	f080 8082 	bcs.w	800101e <__udivmoddi4+0x2ca>
 8000f1a:	45a4      	cmp	ip, r4
 8000f1c:	d97f      	bls.n	800101e <__udivmoddi4+0x2ca>
 8000f1e:	3b02      	subs	r3, #2
 8000f20:	443c      	add	r4, r7
 8000f22:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000f26:	eba4 040c 	sub.w	r4, r4, ip
 8000f2a:	fba0 ec02 	umull	lr, ip, r0, r2
 8000f2e:	4564      	cmp	r4, ip
 8000f30:	4673      	mov	r3, lr
 8000f32:	46e1      	mov	r9, ip
 8000f34:	d362      	bcc.n	8000ffc <__udivmoddi4+0x2a8>
 8000f36:	d05f      	beq.n	8000ff8 <__udivmoddi4+0x2a4>
 8000f38:	b15d      	cbz	r5, 8000f52 <__udivmoddi4+0x1fe>
 8000f3a:	ebb8 0203 	subs.w	r2, r8, r3
 8000f3e:	eb64 0409 	sbc.w	r4, r4, r9
 8000f42:	fa04 f606 	lsl.w	r6, r4, r6
 8000f46:	fa22 f301 	lsr.w	r3, r2, r1
 8000f4a:	431e      	orrs	r6, r3
 8000f4c:	40cc      	lsrs	r4, r1
 8000f4e:	e9c5 6400 	strd	r6, r4, [r5]
 8000f52:	2100      	movs	r1, #0
 8000f54:	e74f      	b.n	8000df6 <__udivmoddi4+0xa2>
 8000f56:	fbb1 fcf2 	udiv	ip, r1, r2
 8000f5a:	0c01      	lsrs	r1, r0, #16
 8000f5c:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000f60:	b280      	uxth	r0, r0
 8000f62:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000f66:	463b      	mov	r3, r7
 8000f68:	4638      	mov	r0, r7
 8000f6a:	463c      	mov	r4, r7
 8000f6c:	46b8      	mov	r8, r7
 8000f6e:	46be      	mov	lr, r7
 8000f70:	2620      	movs	r6, #32
 8000f72:	fbb1 f1f7 	udiv	r1, r1, r7
 8000f76:	eba2 0208 	sub.w	r2, r2, r8
 8000f7a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000f7e:	e766      	b.n	8000e4e <__udivmoddi4+0xfa>
 8000f80:	4601      	mov	r1, r0
 8000f82:	e718      	b.n	8000db6 <__udivmoddi4+0x62>
 8000f84:	4610      	mov	r0, r2
 8000f86:	e72c      	b.n	8000de2 <__udivmoddi4+0x8e>
 8000f88:	f1c6 0220 	rsb	r2, r6, #32
 8000f8c:	fa2e f302 	lsr.w	r3, lr, r2
 8000f90:	40b7      	lsls	r7, r6
 8000f92:	40b1      	lsls	r1, r6
 8000f94:	fa20 f202 	lsr.w	r2, r0, r2
 8000f98:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000f9c:	430a      	orrs	r2, r1
 8000f9e:	fbb3 f8fe 	udiv	r8, r3, lr
 8000fa2:	b2bc      	uxth	r4, r7
 8000fa4:	fb0e 3318 	mls	r3, lr, r8, r3
 8000fa8:	0c11      	lsrs	r1, r2, #16
 8000faa:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000fae:	fb08 f904 	mul.w	r9, r8, r4
 8000fb2:	40b0      	lsls	r0, r6
 8000fb4:	4589      	cmp	r9, r1
 8000fb6:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000fba:	b280      	uxth	r0, r0
 8000fbc:	d93e      	bls.n	800103c <__udivmoddi4+0x2e8>
 8000fbe:	1879      	adds	r1, r7, r1
 8000fc0:	f108 3cff 	add.w	ip, r8, #4294967295
 8000fc4:	d201      	bcs.n	8000fca <__udivmoddi4+0x276>
 8000fc6:	4589      	cmp	r9, r1
 8000fc8:	d81f      	bhi.n	800100a <__udivmoddi4+0x2b6>
 8000fca:	eba1 0109 	sub.w	r1, r1, r9
 8000fce:	fbb1 f9fe 	udiv	r9, r1, lr
 8000fd2:	fb09 f804 	mul.w	r8, r9, r4
 8000fd6:	fb0e 1119 	mls	r1, lr, r9, r1
 8000fda:	b292      	uxth	r2, r2
 8000fdc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000fe0:	4542      	cmp	r2, r8
 8000fe2:	d229      	bcs.n	8001038 <__udivmoddi4+0x2e4>
 8000fe4:	18ba      	adds	r2, r7, r2
 8000fe6:	f109 31ff 	add.w	r1, r9, #4294967295
 8000fea:	d2c4      	bcs.n	8000f76 <__udivmoddi4+0x222>
 8000fec:	4542      	cmp	r2, r8
 8000fee:	d2c2      	bcs.n	8000f76 <__udivmoddi4+0x222>
 8000ff0:	f1a9 0102 	sub.w	r1, r9, #2
 8000ff4:	443a      	add	r2, r7
 8000ff6:	e7be      	b.n	8000f76 <__udivmoddi4+0x222>
 8000ff8:	45f0      	cmp	r8, lr
 8000ffa:	d29d      	bcs.n	8000f38 <__udivmoddi4+0x1e4>
 8000ffc:	ebbe 0302 	subs.w	r3, lr, r2
 8001000:	eb6c 0c07 	sbc.w	ip, ip, r7
 8001004:	3801      	subs	r0, #1
 8001006:	46e1      	mov	r9, ip
 8001008:	e796      	b.n	8000f38 <__udivmoddi4+0x1e4>
 800100a:	eba7 0909 	sub.w	r9, r7, r9
 800100e:	4449      	add	r1, r9
 8001010:	f1a8 0c02 	sub.w	ip, r8, #2
 8001014:	fbb1 f9fe 	udiv	r9, r1, lr
 8001018:	fb09 f804 	mul.w	r8, r9, r4
 800101c:	e7db      	b.n	8000fd6 <__udivmoddi4+0x282>
 800101e:	4673      	mov	r3, lr
 8001020:	e77f      	b.n	8000f22 <__udivmoddi4+0x1ce>
 8001022:	4650      	mov	r0, sl
 8001024:	e766      	b.n	8000ef4 <__udivmoddi4+0x1a0>
 8001026:	4608      	mov	r0, r1
 8001028:	e6fd      	b.n	8000e26 <__udivmoddi4+0xd2>
 800102a:	443b      	add	r3, r7
 800102c:	3a02      	subs	r2, #2
 800102e:	e733      	b.n	8000e98 <__udivmoddi4+0x144>
 8001030:	f1ac 0c02 	sub.w	ip, ip, #2
 8001034:	443b      	add	r3, r7
 8001036:	e71c      	b.n	8000e72 <__udivmoddi4+0x11e>
 8001038:	4649      	mov	r1, r9
 800103a:	e79c      	b.n	8000f76 <__udivmoddi4+0x222>
 800103c:	eba1 0109 	sub.w	r1, r1, r9
 8001040:	46c4      	mov	ip, r8
 8001042:	fbb1 f9fe 	udiv	r9, r1, lr
 8001046:	fb09 f804 	mul.w	r8, r9, r4
 800104a:	e7c4      	b.n	8000fd6 <__udivmoddi4+0x282>

0800104c <__aeabi_idiv0>:
 800104c:	4770      	bx	lr
 800104e:	bf00      	nop

08001050 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001050:	b480      	push	{r7}
 8001052:	af00      	add	r7, sp, #0
	errno = ENOSYS;
 8001054:	4b04      	ldr	r3, [pc, #16]	@ (8001068 <_getpid+0x18>)
 8001056:	2258      	movs	r2, #88	@ 0x58
 8001058:	601a      	str	r2, [r3, #0]
	return -1;
 800105a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800105e:	4618      	mov	r0, r3
 8001060:	46bd      	mov	sp, r7
 8001062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001066:	4770      	bx	lr
 8001068:	20016524 	.word	0x20016524

0800106c <_kill>:
  errno = ENOSYS;
  return -1;
}

int _kill(int32_t pid, int32_t sig)
{
 800106c:	b480      	push	{r7}
 800106e:	b083      	sub	sp, #12
 8001070:	af00      	add	r7, sp, #0
 8001072:	6078      	str	r0, [r7, #4]
 8001074:	6039      	str	r1, [r7, #0]
	errno = ENOSYS;
 8001076:	4b05      	ldr	r3, [pc, #20]	@ (800108c <_kill+0x20>)
 8001078:	2258      	movs	r2, #88	@ 0x58
 800107a:	601a      	str	r2, [r3, #0]
	return -1;
 800107c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001080:	4618      	mov	r0, r3
 8001082:	370c      	adds	r7, #12
 8001084:	46bd      	mov	sp, r7
 8001086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108a:	4770      	bx	lr
 800108c:	20016524 	.word	0x20016524

08001090 <_exit>:

void _exit(int32_t status)
{
 8001090:	b480      	push	{r7}
 8001092:	b083      	sub	sp, #12
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]
	while (1) {}		/* Make sure we hang here */
 8001098:	bf00      	nop
 800109a:	e7fd      	b.n	8001098 <_exit+0x8>

0800109c <_write>:
}

int _write(int32_t file, uint8_t *ptr, int32_t len)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	b084      	sub	sp, #16
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	60f8      	str	r0, [r7, #12]
 80010a4:	60b9      	str	r1, [r7, #8]
 80010a6:	607a      	str	r2, [r7, #4]
	/* return len; */
#if 0
	for(int i=0 ; i<len ; i++) ITM_SendChar((*ptr++));
	return len;
#else
	    HAL_UART_Transmit(&huart6, (uint8_t*)ptr, len, 100);
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	b29a      	uxth	r2, r3
 80010ac:	2364      	movs	r3, #100	@ 0x64
 80010ae:	68b9      	ldr	r1, [r7, #8]
 80010b0:	4803      	ldr	r0, [pc, #12]	@ (80010c0 <_write+0x24>)
 80010b2:	f009 f8d1 	bl	800a258 <HAL_UART_Transmit>
	    return len;
 80010b6:	687b      	ldr	r3, [r7, #4]
#endif
}
 80010b8:	4618      	mov	r0, r3
 80010ba:	3710      	adds	r7, #16
 80010bc:	46bd      	mov	sp, r7
 80010be:	bd80      	pop	{r7, pc}
 80010c0:	20016158 	.word	0x20016158

080010c4 <_close>:
	return (void *) prev_heap_end;
}
#endif

int _close(int32_t file)
{
 80010c4:	b480      	push	{r7}
 80010c6:	b083      	sub	sp, #12
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	6078      	str	r0, [r7, #4]
	errno = ENOSYS;
 80010cc:	4b05      	ldr	r3, [pc, #20]	@ (80010e4 <_close+0x20>)
 80010ce:	2258      	movs	r2, #88	@ 0x58
 80010d0:	601a      	str	r2, [r3, #0]
	return -1;
 80010d2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80010d6:	4618      	mov	r0, r3
 80010d8:	370c      	adds	r7, #12
 80010da:	46bd      	mov	sp, r7
 80010dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e0:	4770      	bx	lr
 80010e2:	bf00      	nop
 80010e4:	20016524 	.word	0x20016524

080010e8 <_fstat>:


int _fstat(int32_t file, struct stat *st)
{
 80010e8:	b480      	push	{r7}
 80010ea:	b083      	sub	sp, #12
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]
 80010f0:	6039      	str	r1, [r7, #0]
	errno = ENOSYS;
 80010f2:	4b05      	ldr	r3, [pc, #20]	@ (8001108 <_fstat+0x20>)
 80010f4:	2258      	movs	r2, #88	@ 0x58
 80010f6:	601a      	str	r2, [r3, #0]
	return -1;
 80010f8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80010fc:	4618      	mov	r0, r3
 80010fe:	370c      	adds	r7, #12
 8001100:	46bd      	mov	sp, r7
 8001102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001106:	4770      	bx	lr
 8001108:	20016524 	.word	0x20016524

0800110c <_isatty>:

int _isatty(int32_t file)
{
 800110c:	b480      	push	{r7}
 800110e:	b083      	sub	sp, #12
 8001110:	af00      	add	r7, sp, #0
 8001112:	6078      	str	r0, [r7, #4]
	errno = ENOSYS;
 8001114:	4b04      	ldr	r3, [pc, #16]	@ (8001128 <_isatty+0x1c>)
 8001116:	2258      	movs	r2, #88	@ 0x58
 8001118:	601a      	str	r2, [r3, #0]
	return 0;
 800111a:	2300      	movs	r3, #0
}
 800111c:	4618      	mov	r0, r3
 800111e:	370c      	adds	r7, #12
 8001120:	46bd      	mov	sp, r7
 8001122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001126:	4770      	bx	lr
 8001128:	20016524 	.word	0x20016524

0800112c <_lseek>:

int _lseek(int32_t file, int32_t ptr, int32_t dir)
{
 800112c:	b480      	push	{r7}
 800112e:	b085      	sub	sp, #20
 8001130:	af00      	add	r7, sp, #0
 8001132:	60f8      	str	r0, [r7, #12]
 8001134:	60b9      	str	r1, [r7, #8]
 8001136:	607a      	str	r2, [r7, #4]
	errno = ENOSYS;
 8001138:	4b05      	ldr	r3, [pc, #20]	@ (8001150 <_lseek+0x24>)
 800113a:	2258      	movs	r2, #88	@ 0x58
 800113c:	601a      	str	r2, [r3, #0]
	return -1;
 800113e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001142:	4618      	mov	r0, r3
 8001144:	3714      	adds	r7, #20
 8001146:	46bd      	mov	sp, r7
 8001148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114c:	4770      	bx	lr
 800114e:	bf00      	nop
 8001150:	20016524 	.word	0x20016524

08001154 <_read>:

int _read(int32_t file, uint8_t *ptr, int32_t len)
{
 8001154:	b480      	push	{r7}
 8001156:	b085      	sub	sp, #20
 8001158:	af00      	add	r7, sp, #0
 800115a:	60f8      	str	r0, [r7, #12]
 800115c:	60b9      	str	r1, [r7, #8]
 800115e:	607a      	str	r2, [r7, #4]
	errno = ENOSYS;
 8001160:	4b05      	ldr	r3, [pc, #20]	@ (8001178 <_read+0x24>)
 8001162:	2258      	movs	r2, #88	@ 0x58
 8001164:	601a      	str	r2, [r3, #0]
	return -1;
 8001166:	f04f 33ff 	mov.w	r3, #4294967295
}
 800116a:	4618      	mov	r0, r3
 800116c:	3714      	adds	r7, #20
 800116e:	46bd      	mov	sp, r7
 8001170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001174:	4770      	bx	lr
 8001176:	bf00      	nop
 8001178:	20016524 	.word	0x20016524

0800117c <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	b084      	sub	sp, #16
 8001180:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001182:	463b      	mov	r3, r7
 8001184:	2200      	movs	r2, #0
 8001186:	601a      	str	r2, [r3, #0]
 8001188:	605a      	str	r2, [r3, #4]
 800118a:	609a      	str	r2, [r3, #8]
 800118c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800118e:	4b36      	ldr	r3, [pc, #216]	@ (8001268 <MX_ADC1_Init+0xec>)
 8001190:	4a36      	ldr	r2, [pc, #216]	@ (800126c <MX_ADC1_Init+0xf0>)
 8001192:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001194:	4b34      	ldr	r3, [pc, #208]	@ (8001268 <MX_ADC1_Init+0xec>)
 8001196:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800119a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800119c:	4b32      	ldr	r3, [pc, #200]	@ (8001268 <MX_ADC1_Init+0xec>)
 800119e:	2200      	movs	r2, #0
 80011a0:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 80011a2:	4b31      	ldr	r3, [pc, #196]	@ (8001268 <MX_ADC1_Init+0xec>)
 80011a4:	2201      	movs	r2, #1
 80011a6:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80011a8:	4b2f      	ldr	r3, [pc, #188]	@ (8001268 <MX_ADC1_Init+0xec>)
 80011aa:	2200      	movs	r2, #0
 80011ac:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80011ae:	4b2e      	ldr	r3, [pc, #184]	@ (8001268 <MX_ADC1_Init+0xec>)
 80011b0:	2200      	movs	r2, #0
 80011b2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80011b6:	4b2c      	ldr	r3, [pc, #176]	@ (8001268 <MX_ADC1_Init+0xec>)
 80011b8:	2200      	movs	r2, #0
 80011ba:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80011bc:	4b2a      	ldr	r3, [pc, #168]	@ (8001268 <MX_ADC1_Init+0xec>)
 80011be:	4a2c      	ldr	r2, [pc, #176]	@ (8001270 <MX_ADC1_Init+0xf4>)
 80011c0:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80011c2:	4b29      	ldr	r3, [pc, #164]	@ (8001268 <MX_ADC1_Init+0xec>)
 80011c4:	2200      	movs	r2, #0
 80011c6:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 4;
 80011c8:	4b27      	ldr	r3, [pc, #156]	@ (8001268 <MX_ADC1_Init+0xec>)
 80011ca:	2204      	movs	r2, #4
 80011cc:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80011ce:	4b26      	ldr	r3, [pc, #152]	@ (8001268 <MX_ADC1_Init+0xec>)
 80011d0:	2200      	movs	r2, #0
 80011d2:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80011d6:	4b24      	ldr	r3, [pc, #144]	@ (8001268 <MX_ADC1_Init+0xec>)
 80011d8:	2201      	movs	r2, #1
 80011da:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80011dc:	4822      	ldr	r0, [pc, #136]	@ (8001268 <MX_ADC1_Init+0xec>)
 80011de:	f004 fbbb 	bl	8005958 <HAL_ADC_Init>
 80011e2:	4603      	mov	r3, r0
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d001      	beq.n	80011ec <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80011e8:	f001 fd98 	bl	8002d1c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 80011ec:	2306      	movs	r3, #6
 80011ee:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80011f0:	2301      	movs	r3, #1
 80011f2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80011f4:	2300      	movs	r3, #0
 80011f6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80011f8:	463b      	mov	r3, r7
 80011fa:	4619      	mov	r1, r3
 80011fc:	481a      	ldr	r0, [pc, #104]	@ (8001268 <MX_ADC1_Init+0xec>)
 80011fe:	f004 fd51 	bl	8005ca4 <HAL_ADC_ConfigChannel>
 8001202:	4603      	mov	r3, r0
 8001204:	2b00      	cmp	r3, #0
 8001206:	d001      	beq.n	800120c <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001208:	f001 fd88 	bl	8002d1c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 800120c:	2307      	movs	r3, #7
 800120e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8001210:	2302      	movs	r3, #2
 8001212:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001214:	463b      	mov	r3, r7
 8001216:	4619      	mov	r1, r3
 8001218:	4813      	ldr	r0, [pc, #76]	@ (8001268 <MX_ADC1_Init+0xec>)
 800121a:	f004 fd43 	bl	8005ca4 <HAL_ADC_ConfigChannel>
 800121e:	4603      	mov	r3, r0
 8001220:	2b00      	cmp	r3, #0
 8001222:	d001      	beq.n	8001228 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8001224:	f001 fd7a 	bl	8002d1c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8001228:	230e      	movs	r3, #14
 800122a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 800122c:	2303      	movs	r3, #3
 800122e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001230:	463b      	mov	r3, r7
 8001232:	4619      	mov	r1, r3
 8001234:	480c      	ldr	r0, [pc, #48]	@ (8001268 <MX_ADC1_Init+0xec>)
 8001236:	f004 fd35 	bl	8005ca4 <HAL_ADC_ConfigChannel>
 800123a:	4603      	mov	r3, r0
 800123c:	2b00      	cmp	r3, #0
 800123e:	d001      	beq.n	8001244 <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 8001240:	f001 fd6c 	bl	8002d1c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8001244:	230f      	movs	r3, #15
 8001246:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8001248:	2304      	movs	r3, #4
 800124a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800124c:	463b      	mov	r3, r7
 800124e:	4619      	mov	r1, r3
 8001250:	4805      	ldr	r0, [pc, #20]	@ (8001268 <MX_ADC1_Init+0xec>)
 8001252:	f004 fd27 	bl	8005ca4 <HAL_ADC_ConfigChannel>
 8001256:	4603      	mov	r3, r0
 8001258:	2b00      	cmp	r3, #0
 800125a:	d001      	beq.n	8001260 <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 800125c:	f001 fd5e 	bl	8002d1c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001260:	bf00      	nop
 8001262:	3710      	adds	r7, #16
 8001264:	46bd      	mov	sp, r7
 8001266:	bd80      	pop	{r7, pc}
 8001268:	2000d318 	.word	0x2000d318
 800126c:	40012000 	.word	0x40012000
 8001270:	0f000001 	.word	0x0f000001

08001274 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	b08a      	sub	sp, #40	@ 0x28
 8001278:	af00      	add	r7, sp, #0
 800127a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800127c:	f107 0314 	add.w	r3, r7, #20
 8001280:	2200      	movs	r2, #0
 8001282:	601a      	str	r2, [r3, #0]
 8001284:	605a      	str	r2, [r3, #4]
 8001286:	609a      	str	r2, [r3, #8]
 8001288:	60da      	str	r2, [r3, #12]
 800128a:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	4a3b      	ldr	r2, [pc, #236]	@ (8001380 <HAL_ADC_MspInit+0x10c>)
 8001292:	4293      	cmp	r3, r2
 8001294:	d170      	bne.n	8001378 <HAL_ADC_MspInit+0x104>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001296:	2300      	movs	r3, #0
 8001298:	613b      	str	r3, [r7, #16]
 800129a:	4b3a      	ldr	r3, [pc, #232]	@ (8001384 <HAL_ADC_MspInit+0x110>)
 800129c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800129e:	4a39      	ldr	r2, [pc, #228]	@ (8001384 <HAL_ADC_MspInit+0x110>)
 80012a0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80012a4:	6453      	str	r3, [r2, #68]	@ 0x44
 80012a6:	4b37      	ldr	r3, [pc, #220]	@ (8001384 <HAL_ADC_MspInit+0x110>)
 80012a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012aa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80012ae:	613b      	str	r3, [r7, #16]
 80012b0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012b2:	2300      	movs	r3, #0
 80012b4:	60fb      	str	r3, [r7, #12]
 80012b6:	4b33      	ldr	r3, [pc, #204]	@ (8001384 <HAL_ADC_MspInit+0x110>)
 80012b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012ba:	4a32      	ldr	r2, [pc, #200]	@ (8001384 <HAL_ADC_MspInit+0x110>)
 80012bc:	f043 0301 	orr.w	r3, r3, #1
 80012c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80012c2:	4b30      	ldr	r3, [pc, #192]	@ (8001384 <HAL_ADC_MspInit+0x110>)
 80012c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012c6:	f003 0301 	and.w	r3, r3, #1
 80012ca:	60fb      	str	r3, [r7, #12]
 80012cc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80012ce:	2300      	movs	r3, #0
 80012d0:	60bb      	str	r3, [r7, #8]
 80012d2:	4b2c      	ldr	r3, [pc, #176]	@ (8001384 <HAL_ADC_MspInit+0x110>)
 80012d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012d6:	4a2b      	ldr	r2, [pc, #172]	@ (8001384 <HAL_ADC_MspInit+0x110>)
 80012d8:	f043 0304 	orr.w	r3, r3, #4
 80012dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80012de:	4b29      	ldr	r3, [pc, #164]	@ (8001384 <HAL_ADC_MspInit+0x110>)
 80012e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012e2:	f003 0304 	and.w	r3, r3, #4
 80012e6:	60bb      	str	r3, [r7, #8]
 80012e8:	68bb      	ldr	r3, [r7, #8]
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    PC4     ------> ADC1_IN14
    PC5     ------> ADC1_IN15
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80012ea:	23c0      	movs	r3, #192	@ 0xc0
 80012ec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80012ee:	2303      	movs	r3, #3
 80012f0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012f2:	2300      	movs	r3, #0
 80012f4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012f6:	f107 0314 	add.w	r3, r7, #20
 80012fa:	4619      	mov	r1, r3
 80012fc:	4822      	ldr	r0, [pc, #136]	@ (8001388 <HAL_ADC_MspInit+0x114>)
 80012fe:	f005 fcb1 	bl	8006c64 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8001302:	2330      	movs	r3, #48	@ 0x30
 8001304:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001306:	2303      	movs	r3, #3
 8001308:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800130a:	2300      	movs	r3, #0
 800130c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800130e:	f107 0314 	add.w	r3, r7, #20
 8001312:	4619      	mov	r1, r3
 8001314:	481d      	ldr	r0, [pc, #116]	@ (800138c <HAL_ADC_MspInit+0x118>)
 8001316:	f005 fca5 	bl	8006c64 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 800131a:	4b1d      	ldr	r3, [pc, #116]	@ (8001390 <HAL_ADC_MspInit+0x11c>)
 800131c:	4a1d      	ldr	r2, [pc, #116]	@ (8001394 <HAL_ADC_MspInit+0x120>)
 800131e:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001320:	4b1b      	ldr	r3, [pc, #108]	@ (8001390 <HAL_ADC_MspInit+0x11c>)
 8001322:	2200      	movs	r2, #0
 8001324:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001326:	4b1a      	ldr	r3, [pc, #104]	@ (8001390 <HAL_ADC_MspInit+0x11c>)
 8001328:	2200      	movs	r2, #0
 800132a:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800132c:	4b18      	ldr	r3, [pc, #96]	@ (8001390 <HAL_ADC_MspInit+0x11c>)
 800132e:	2200      	movs	r2, #0
 8001330:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001332:	4b17      	ldr	r3, [pc, #92]	@ (8001390 <HAL_ADC_MspInit+0x11c>)
 8001334:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001338:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800133a:	4b15      	ldr	r3, [pc, #84]	@ (8001390 <HAL_ADC_MspInit+0x11c>)
 800133c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001340:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001342:	4b13      	ldr	r3, [pc, #76]	@ (8001390 <HAL_ADC_MspInit+0x11c>)
 8001344:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001348:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 800134a:	4b11      	ldr	r3, [pc, #68]	@ (8001390 <HAL_ADC_MspInit+0x11c>)
 800134c:	2200      	movs	r2, #0
 800134e:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001350:	4b0f      	ldr	r3, [pc, #60]	@ (8001390 <HAL_ADC_MspInit+0x11c>)
 8001352:	2200      	movs	r2, #0
 8001354:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001356:	4b0e      	ldr	r3, [pc, #56]	@ (8001390 <HAL_ADC_MspInit+0x11c>)
 8001358:	2200      	movs	r2, #0
 800135a:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800135c:	480c      	ldr	r0, [pc, #48]	@ (8001390 <HAL_ADC_MspInit+0x11c>)
 800135e:	f005 f87f 	bl	8006460 <HAL_DMA_Init>
 8001362:	4603      	mov	r3, r0
 8001364:	2b00      	cmp	r3, #0
 8001366:	d001      	beq.n	800136c <HAL_ADC_MspInit+0xf8>
    {
      Error_Handler();
 8001368:	f001 fcd8 	bl	8002d1c <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	4a08      	ldr	r2, [pc, #32]	@ (8001390 <HAL_ADC_MspInit+0x11c>)
 8001370:	639a      	str	r2, [r3, #56]	@ 0x38
 8001372:	4a07      	ldr	r2, [pc, #28]	@ (8001390 <HAL_ADC_MspInit+0x11c>)
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8001378:	bf00      	nop
 800137a:	3728      	adds	r7, #40	@ 0x28
 800137c:	46bd      	mov	sp, r7
 800137e:	bd80      	pop	{r7, pc}
 8001380:	40012000 	.word	0x40012000
 8001384:	40023800 	.word	0x40023800
 8001388:	40020000 	.word	0x40020000
 800138c:	40020800 	.word	0x40020800
 8001390:	2000d360 	.word	0x2000d360
 8001394:	40026410 	.word	0x40026410

08001398 <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 800139c:	4b06      	ldr	r3, [pc, #24]	@ (80013b8 <MX_CRC_Init+0x20>)
 800139e:	4a07      	ldr	r2, [pc, #28]	@ (80013bc <MX_CRC_Init+0x24>)
 80013a0:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80013a2:	4805      	ldr	r0, [pc, #20]	@ (80013b8 <MX_CRC_Init+0x20>)
 80013a4:	f005 f83f 	bl	8006426 <HAL_CRC_Init>
 80013a8:	4603      	mov	r3, r0
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d001      	beq.n	80013b2 <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 80013ae:	f001 fcb5 	bl	8002d1c <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 80013b2:	bf00      	nop
 80013b4:	bd80      	pop	{r7, pc}
 80013b6:	bf00      	nop
 80013b8:	2000d3c0 	.word	0x2000d3c0
 80013bc:	40023000 	.word	0x40023000

080013c0 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 80013c0:	b480      	push	{r7}
 80013c2:	b085      	sub	sp, #20
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	4a0b      	ldr	r2, [pc, #44]	@ (80013fc <HAL_CRC_MspInit+0x3c>)
 80013ce:	4293      	cmp	r3, r2
 80013d0:	d10d      	bne.n	80013ee <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80013d2:	2300      	movs	r3, #0
 80013d4:	60fb      	str	r3, [r7, #12]
 80013d6:	4b0a      	ldr	r3, [pc, #40]	@ (8001400 <HAL_CRC_MspInit+0x40>)
 80013d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013da:	4a09      	ldr	r2, [pc, #36]	@ (8001400 <HAL_CRC_MspInit+0x40>)
 80013dc:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80013e0:	6313      	str	r3, [r2, #48]	@ 0x30
 80013e2:	4b07      	ldr	r3, [pc, #28]	@ (8001400 <HAL_CRC_MspInit+0x40>)
 80013e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013e6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80013ea:	60fb      	str	r3, [r7, #12]
 80013ec:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 80013ee:	bf00      	nop
 80013f0:	3714      	adds	r7, #20
 80013f2:	46bd      	mov	sp, r7
 80013f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f8:	4770      	bx	lr
 80013fa:	bf00      	nop
 80013fc:	40023000 	.word	0x40023000
 8001400:	40023800 	.word	0x40023800

08001404 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	b082      	sub	sp, #8
 8001408:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800140a:	2300      	movs	r3, #0
 800140c:	607b      	str	r3, [r7, #4]
 800140e:	4b17      	ldr	r3, [pc, #92]	@ (800146c <MX_DMA_Init+0x68>)
 8001410:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001412:	4a16      	ldr	r2, [pc, #88]	@ (800146c <MX_DMA_Init+0x68>)
 8001414:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001418:	6313      	str	r3, [r2, #48]	@ 0x30
 800141a:	4b14      	ldr	r3, [pc, #80]	@ (800146c <MX_DMA_Init+0x68>)
 800141c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800141e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001422:	607b      	str	r3, [r7, #4]
 8001424:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001426:	2300      	movs	r3, #0
 8001428:	603b      	str	r3, [r7, #0]
 800142a:	4b10      	ldr	r3, [pc, #64]	@ (800146c <MX_DMA_Init+0x68>)
 800142c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800142e:	4a0f      	ldr	r2, [pc, #60]	@ (800146c <MX_DMA_Init+0x68>)
 8001430:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001434:	6313      	str	r3, [r2, #48]	@ 0x30
 8001436:	4b0d      	ldr	r3, [pc, #52]	@ (800146c <MX_DMA_Init+0x68>)
 8001438:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800143a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800143e:	603b      	str	r3, [r7, #0]
 8001440:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 8001442:	2200      	movs	r2, #0
 8001444:	2100      	movs	r1, #0
 8001446:	200e      	movs	r0, #14
 8001448:	f004 ffb7 	bl	80063ba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 800144c:	200e      	movs	r0, #14
 800144e:	f004 ffd0 	bl	80063f2 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8001452:	2200      	movs	r2, #0
 8001454:	2100      	movs	r1, #0
 8001456:	2038      	movs	r0, #56	@ 0x38
 8001458:	f004 ffaf 	bl	80063ba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 800145c:	2038      	movs	r0, #56	@ 0x38
 800145e:	f004 ffc8 	bl	80063f2 <HAL_NVIC_EnableIRQ>

}
 8001462:	bf00      	nop
 8001464:	3708      	adds	r7, #8
 8001466:	46bd      	mov	sp, r7
 8001468:	bd80      	pop	{r7, pc}
 800146a:	bf00      	nop
 800146c:	40023800 	.word	0x40023800

08001470 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	b08a      	sub	sp, #40	@ 0x28
 8001474:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001476:	f107 0314 	add.w	r3, r7, #20
 800147a:	2200      	movs	r2, #0
 800147c:	601a      	str	r2, [r3, #0]
 800147e:	605a      	str	r2, [r3, #4]
 8001480:	609a      	str	r2, [r3, #8]
 8001482:	60da      	str	r2, [r3, #12]
 8001484:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001486:	2300      	movs	r3, #0
 8001488:	613b      	str	r3, [r7, #16]
 800148a:	4b45      	ldr	r3, [pc, #276]	@ (80015a0 <MX_GPIO_Init+0x130>)
 800148c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800148e:	4a44      	ldr	r2, [pc, #272]	@ (80015a0 <MX_GPIO_Init+0x130>)
 8001490:	f043 0304 	orr.w	r3, r3, #4
 8001494:	6313      	str	r3, [r2, #48]	@ 0x30
 8001496:	4b42      	ldr	r3, [pc, #264]	@ (80015a0 <MX_GPIO_Init+0x130>)
 8001498:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800149a:	f003 0304 	and.w	r3, r3, #4
 800149e:	613b      	str	r3, [r7, #16]
 80014a0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80014a2:	2300      	movs	r3, #0
 80014a4:	60fb      	str	r3, [r7, #12]
 80014a6:	4b3e      	ldr	r3, [pc, #248]	@ (80015a0 <MX_GPIO_Init+0x130>)
 80014a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014aa:	4a3d      	ldr	r2, [pc, #244]	@ (80015a0 <MX_GPIO_Init+0x130>)
 80014ac:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80014b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80014b2:	4b3b      	ldr	r3, [pc, #236]	@ (80015a0 <MX_GPIO_Init+0x130>)
 80014b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014b6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80014ba:	60fb      	str	r3, [r7, #12]
 80014bc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80014be:	2300      	movs	r3, #0
 80014c0:	60bb      	str	r3, [r7, #8]
 80014c2:	4b37      	ldr	r3, [pc, #220]	@ (80015a0 <MX_GPIO_Init+0x130>)
 80014c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014c6:	4a36      	ldr	r2, [pc, #216]	@ (80015a0 <MX_GPIO_Init+0x130>)
 80014c8:	f043 0301 	orr.w	r3, r3, #1
 80014cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80014ce:	4b34      	ldr	r3, [pc, #208]	@ (80015a0 <MX_GPIO_Init+0x130>)
 80014d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014d2:	f003 0301 	and.w	r3, r3, #1
 80014d6:	60bb      	str	r3, [r7, #8]
 80014d8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80014da:	2300      	movs	r3, #0
 80014dc:	607b      	str	r3, [r7, #4]
 80014de:	4b30      	ldr	r3, [pc, #192]	@ (80015a0 <MX_GPIO_Init+0x130>)
 80014e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014e2:	4a2f      	ldr	r2, [pc, #188]	@ (80015a0 <MX_GPIO_Init+0x130>)
 80014e4:	f043 0302 	orr.w	r3, r3, #2
 80014e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80014ea:	4b2d      	ldr	r3, [pc, #180]	@ (80015a0 <MX_GPIO_Init+0x130>)
 80014ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014ee:	f003 0302 	and.w	r3, r3, #2
 80014f2:	607b      	str	r3, [r7, #4]
 80014f4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, ILI9341_DC_Pin|ILI9341_RESET_Pin, GPIO_PIN_RESET);
 80014f6:	2200      	movs	r2, #0
 80014f8:	2103      	movs	r1, #3
 80014fa:	482a      	ldr	r0, [pc, #168]	@ (80015a4 <MX_GPIO_Init+0x134>)
 80014fc:	f005 fd4e 	bl	8006f9c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001500:	2200      	movs	r2, #0
 8001502:	2120      	movs	r1, #32
 8001504:	4828      	ldr	r0, [pc, #160]	@ (80015a8 <MX_GPIO_Init+0x138>)
 8001506:	f005 fd49 	bl	8006f9c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ILI9341_CS_Pin|SDCARD_CS_Pin, GPIO_PIN_SET);
 800150a:	2201      	movs	r2, #1
 800150c:	f244 0102 	movw	r1, #16386	@ 0x4002
 8001510:	4826      	ldr	r0, [pc, #152]	@ (80015ac <MX_GPIO_Init+0x13c>)
 8001512:	f005 fd43 	bl	8006f9c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001516:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800151a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800151c:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8001520:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001522:	2300      	movs	r3, #0
 8001524:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001526:	f107 0314 	add.w	r3, r7, #20
 800152a:	4619      	mov	r1, r3
 800152c:	481d      	ldr	r0, [pc, #116]	@ (80015a4 <MX_GPIO_Init+0x134>)
 800152e:	f005 fb99 	bl	8006c64 <HAL_GPIO_Init>

  /*Configure GPIO pins : ILI9341_DC_Pin ILI9341_RESET_Pin */
  GPIO_InitStruct.Pin = ILI9341_DC_Pin|ILI9341_RESET_Pin;
 8001532:	2303      	movs	r3, #3
 8001534:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001536:	2301      	movs	r3, #1
 8001538:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800153a:	2300      	movs	r3, #0
 800153c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800153e:	2300      	movs	r3, #0
 8001540:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001542:	f107 0314 	add.w	r3, r7, #20
 8001546:	4619      	mov	r1, r3
 8001548:	4816      	ldr	r0, [pc, #88]	@ (80015a4 <MX_GPIO_Init+0x134>)
 800154a:	f005 fb8b 	bl	8006c64 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800154e:	2320      	movs	r3, #32
 8001550:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001552:	2301      	movs	r3, #1
 8001554:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001556:	2300      	movs	r3, #0
 8001558:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800155a:	2300      	movs	r3, #0
 800155c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800155e:	f107 0314 	add.w	r3, r7, #20
 8001562:	4619      	mov	r1, r3
 8001564:	4810      	ldr	r0, [pc, #64]	@ (80015a8 <MX_GPIO_Init+0x138>)
 8001566:	f005 fb7d 	bl	8006c64 <HAL_GPIO_Init>

  /*Configure GPIO pins : ILI9341_CS_Pin SDCARD_CS_Pin */
  GPIO_InitStruct.Pin = ILI9341_CS_Pin|SDCARD_CS_Pin;
 800156a:	f244 0302 	movw	r3, #16386	@ 0x4002
 800156e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001570:	2301      	movs	r3, #1
 8001572:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001574:	2300      	movs	r3, #0
 8001576:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001578:	2300      	movs	r3, #0
 800157a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800157c:	f107 0314 	add.w	r3, r7, #20
 8001580:	4619      	mov	r1, r3
 8001582:	480a      	ldr	r0, [pc, #40]	@ (80015ac <MX_GPIO_Init+0x13c>)
 8001584:	f005 fb6e 	bl	8006c64 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001588:	2200      	movs	r2, #0
 800158a:	2100      	movs	r1, #0
 800158c:	2028      	movs	r0, #40	@ 0x28
 800158e:	f004 ff14 	bl	80063ba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001592:	2028      	movs	r0, #40	@ 0x28
 8001594:	f004 ff2d 	bl	80063f2 <HAL_NVIC_EnableIRQ>

}
 8001598:	bf00      	nop
 800159a:	3728      	adds	r7, #40	@ 0x28
 800159c:	46bd      	mov	sp, r7
 800159e:	bd80      	pop	{r7, pc}
 80015a0:	40023800 	.word	0x40023800
 80015a4:	40020800 	.word	0x40020800
 80015a8:	40020000 	.word	0x40020000
 80015ac:	40020400 	.word	0x40020400

080015b0 <MX_I2S2_Init>:
I2S_HandleTypeDef hi2s3;
DMA_HandleTypeDef hdma_spi2_rx;

/* I2S2 init function */
void MX_I2S2_Init(void)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 80015b4:	4b13      	ldr	r3, [pc, #76]	@ (8001604 <MX_I2S2_Init+0x54>)
 80015b6:	4a14      	ldr	r2, [pc, #80]	@ (8001608 <MX_I2S2_Init+0x58>)
 80015b8:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_RX;
 80015ba:	4b12      	ldr	r3, [pc, #72]	@ (8001604 <MX_I2S2_Init+0x54>)
 80015bc:	f44f 7240 	mov.w	r2, #768	@ 0x300
 80015c0:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 80015c2:	4b10      	ldr	r3, [pc, #64]	@ (8001604 <MX_I2S2_Init+0x54>)
 80015c4:	2200      	movs	r2, #0
 80015c6:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_24B;
 80015c8:	4b0e      	ldr	r3, [pc, #56]	@ (8001604 <MX_I2S2_Init+0x54>)
 80015ca:	2203      	movs	r2, #3
 80015cc:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 80015ce:	4b0d      	ldr	r3, [pc, #52]	@ (8001604 <MX_I2S2_Init+0x54>)
 80015d0:	2200      	movs	r2, #0
 80015d2:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_16K;
 80015d4:	4b0b      	ldr	r3, [pc, #44]	@ (8001604 <MX_I2S2_Init+0x54>)
 80015d6:	f44f 527a 	mov.w	r2, #16000	@ 0x3e80
 80015da:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 80015dc:	4b09      	ldr	r3, [pc, #36]	@ (8001604 <MX_I2S2_Init+0x54>)
 80015de:	2200      	movs	r2, #0
 80015e0:	619a      	str	r2, [r3, #24]
  hi2s2.Init.ClockSource = I2S_CLOCK_PLL;
 80015e2:	4b08      	ldr	r3, [pc, #32]	@ (8001604 <MX_I2S2_Init+0x54>)
 80015e4:	2200      	movs	r2, #0
 80015e6:	61da      	str	r2, [r3, #28]
  hi2s2.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 80015e8:	4b06      	ldr	r3, [pc, #24]	@ (8001604 <MX_I2S2_Init+0x54>)
 80015ea:	2200      	movs	r2, #0
 80015ec:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 80015ee:	4805      	ldr	r0, [pc, #20]	@ (8001604 <MX_I2S2_Init+0x54>)
 80015f0:	f005 fd12 	bl	8007018 <HAL_I2S_Init>
 80015f4:	4603      	mov	r3, r0
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d001      	beq.n	80015fe <MX_I2S2_Init+0x4e>
  {
    Error_Handler();
 80015fa:	f001 fb8f 	bl	8002d1c <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 80015fe:	bf00      	nop
 8001600:	bd80      	pop	{r7, pc}
 8001602:	bf00      	nop
 8001604:	2000d3c8 	.word	0x2000d3c8
 8001608:	40003800 	.word	0x40003800

0800160c <MX_I2S3_Init>:
/* I2S3 init function */
void MX_I2S3_Init(void)
{
 800160c:	b580      	push	{r7, lr}
 800160e:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8001610:	4b13      	ldr	r3, [pc, #76]	@ (8001660 <MX_I2S3_Init+0x54>)
 8001612:	4a14      	ldr	r2, [pc, #80]	@ (8001664 <MX_I2S3_Init+0x58>)
 8001614:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8001616:	4b12      	ldr	r3, [pc, #72]	@ (8001660 <MX_I2S3_Init+0x54>)
 8001618:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800161c:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 800161e:	4b10      	ldr	r3, [pc, #64]	@ (8001660 <MX_I2S3_Init+0x54>)
 8001620:	2200      	movs	r2, #0
 8001622:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8001624:	4b0e      	ldr	r3, [pc, #56]	@ (8001660 <MX_I2S3_Init+0x54>)
 8001626:	2200      	movs	r2, #0
 8001628:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 800162a:	4b0d      	ldr	r3, [pc, #52]	@ (8001660 <MX_I2S3_Init+0x54>)
 800162c:	2200      	movs	r2, #0
 800162e:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_16K;
 8001630:	4b0b      	ldr	r3, [pc, #44]	@ (8001660 <MX_I2S3_Init+0x54>)
 8001632:	f44f 527a 	mov.w	r2, #16000	@ 0x3e80
 8001636:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8001638:	4b09      	ldr	r3, [pc, #36]	@ (8001660 <MX_I2S3_Init+0x54>)
 800163a:	2200      	movs	r2, #0
 800163c:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 800163e:	4b08      	ldr	r3, [pc, #32]	@ (8001660 <MX_I2S3_Init+0x54>)
 8001640:	2200      	movs	r2, #0
 8001642:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8001644:	4b06      	ldr	r3, [pc, #24]	@ (8001660 <MX_I2S3_Init+0x54>)
 8001646:	2200      	movs	r2, #0
 8001648:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 800164a:	4805      	ldr	r0, [pc, #20]	@ (8001660 <MX_I2S3_Init+0x54>)
 800164c:	f005 fce4 	bl	8007018 <HAL_I2S_Init>
 8001650:	4603      	mov	r3, r0
 8001652:	2b00      	cmp	r3, #0
 8001654:	d001      	beq.n	800165a <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 8001656:	f001 fb61 	bl	8002d1c <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 800165a:	bf00      	nop
 800165c:	bd80      	pop	{r7, pc}
 800165e:	bf00      	nop
 8001660:	2000d410 	.word	0x2000d410
 8001664:	40003c00 	.word	0x40003c00

08001668 <HAL_I2S_MspInit>:

void HAL_I2S_MspInit(I2S_HandleTypeDef* i2sHandle)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	b08e      	sub	sp, #56	@ 0x38
 800166c:	af00      	add	r7, sp, #0
 800166e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001670:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001674:	2200      	movs	r2, #0
 8001676:	601a      	str	r2, [r3, #0]
 8001678:	605a      	str	r2, [r3, #4]
 800167a:	609a      	str	r2, [r3, #8]
 800167c:	60da      	str	r2, [r3, #12]
 800167e:	611a      	str	r2, [r3, #16]
  if(i2sHandle->Instance==SPI2)
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	4a69      	ldr	r2, [pc, #420]	@ (800182c <HAL_I2S_MspInit+0x1c4>)
 8001686:	4293      	cmp	r3, r2
 8001688:	d17b      	bne.n	8001782 <HAL_I2S_MspInit+0x11a>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* I2S2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800168a:	2300      	movs	r3, #0
 800168c:	623b      	str	r3, [r7, #32]
 800168e:	4b68      	ldr	r3, [pc, #416]	@ (8001830 <HAL_I2S_MspInit+0x1c8>)
 8001690:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001692:	4a67      	ldr	r2, [pc, #412]	@ (8001830 <HAL_I2S_MspInit+0x1c8>)
 8001694:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001698:	6413      	str	r3, [r2, #64]	@ 0x40
 800169a:	4b65      	ldr	r3, [pc, #404]	@ (8001830 <HAL_I2S_MspInit+0x1c8>)
 800169c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800169e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80016a2:	623b      	str	r3, [r7, #32]
 80016a4:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80016a6:	2300      	movs	r3, #0
 80016a8:	61fb      	str	r3, [r7, #28]
 80016aa:	4b61      	ldr	r3, [pc, #388]	@ (8001830 <HAL_I2S_MspInit+0x1c8>)
 80016ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016ae:	4a60      	ldr	r2, [pc, #384]	@ (8001830 <HAL_I2S_MspInit+0x1c8>)
 80016b0:	f043 0304 	orr.w	r3, r3, #4
 80016b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80016b6:	4b5e      	ldr	r3, [pc, #376]	@ (8001830 <HAL_I2S_MspInit+0x1c8>)
 80016b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016ba:	f003 0304 	and.w	r3, r3, #4
 80016be:	61fb      	str	r3, [r7, #28]
 80016c0:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80016c2:	2300      	movs	r3, #0
 80016c4:	61bb      	str	r3, [r7, #24]
 80016c6:	4b5a      	ldr	r3, [pc, #360]	@ (8001830 <HAL_I2S_MspInit+0x1c8>)
 80016c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016ca:	4a59      	ldr	r2, [pc, #356]	@ (8001830 <HAL_I2S_MspInit+0x1c8>)
 80016cc:	f043 0302 	orr.w	r3, r3, #2
 80016d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80016d2:	4b57      	ldr	r3, [pc, #348]	@ (8001830 <HAL_I2S_MspInit+0x1c8>)
 80016d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016d6:	f003 0302 	and.w	r3, r3, #2
 80016da:	61bb      	str	r3, [r7, #24]
 80016dc:	69bb      	ldr	r3, [r7, #24]
    /**I2S2 GPIO Configuration
    PC3     ------> I2S2_SD
    PB10     ------> I2S2_CK
    PB12     ------> I2S2_WS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80016de:	2308      	movs	r3, #8
 80016e0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016e2:	2302      	movs	r3, #2
 80016e4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016e6:	2300      	movs	r3, #0
 80016e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016ea:	2300      	movs	r3, #0
 80016ec:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80016ee:	2305      	movs	r3, #5
 80016f0:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80016f2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80016f6:	4619      	mov	r1, r3
 80016f8:	484e      	ldr	r0, [pc, #312]	@ (8001834 <HAL_I2S_MspInit+0x1cc>)
 80016fa:	f005 fab3 	bl	8006c64 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12;
 80016fe:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001702:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001704:	2302      	movs	r3, #2
 8001706:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001708:	2300      	movs	r3, #0
 800170a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800170c:	2300      	movs	r3, #0
 800170e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001710:	2305      	movs	r3, #5
 8001712:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001714:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001718:	4619      	mov	r1, r3
 800171a:	4847      	ldr	r0, [pc, #284]	@ (8001838 <HAL_I2S_MspInit+0x1d0>)
 800171c:	f005 faa2 	bl	8006c64 <HAL_GPIO_Init>

    /* I2S2 DMA Init */
    /* SPI2_RX Init */
    hdma_spi2_rx.Instance = DMA1_Stream3;
 8001720:	4b46      	ldr	r3, [pc, #280]	@ (800183c <HAL_I2S_MspInit+0x1d4>)
 8001722:	4a47      	ldr	r2, [pc, #284]	@ (8001840 <HAL_I2S_MspInit+0x1d8>)
 8001724:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Channel = DMA_CHANNEL_0;
 8001726:	4b45      	ldr	r3, [pc, #276]	@ (800183c <HAL_I2S_MspInit+0x1d4>)
 8001728:	2200      	movs	r2, #0
 800172a:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800172c:	4b43      	ldr	r3, [pc, #268]	@ (800183c <HAL_I2S_MspInit+0x1d4>)
 800172e:	2200      	movs	r2, #0
 8001730:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001732:	4b42      	ldr	r3, [pc, #264]	@ (800183c <HAL_I2S_MspInit+0x1d4>)
 8001734:	2200      	movs	r2, #0
 8001736:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001738:	4b40      	ldr	r3, [pc, #256]	@ (800183c <HAL_I2S_MspInit+0x1d4>)
 800173a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800173e:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001740:	4b3e      	ldr	r3, [pc, #248]	@ (800183c <HAL_I2S_MspInit+0x1d4>)
 8001742:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001746:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001748:	4b3c      	ldr	r3, [pc, #240]	@ (800183c <HAL_I2S_MspInit+0x1d4>)
 800174a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800174e:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_CIRCULAR;
 8001750:	4b3a      	ldr	r3, [pc, #232]	@ (800183c <HAL_I2S_MspInit+0x1d4>)
 8001752:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001756:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001758:	4b38      	ldr	r3, [pc, #224]	@ (800183c <HAL_I2S_MspInit+0x1d4>)
 800175a:	2200      	movs	r2, #0
 800175c:	621a      	str	r2, [r3, #32]
    hdma_spi2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800175e:	4b37      	ldr	r3, [pc, #220]	@ (800183c <HAL_I2S_MspInit+0x1d4>)
 8001760:	2200      	movs	r2, #0
 8001762:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 8001764:	4835      	ldr	r0, [pc, #212]	@ (800183c <HAL_I2S_MspInit+0x1d4>)
 8001766:	f004 fe7b 	bl	8006460 <HAL_DMA_Init>
 800176a:	4603      	mov	r3, r0
 800176c:	2b00      	cmp	r3, #0
 800176e:	d001      	beq.n	8001774 <HAL_I2S_MspInit+0x10c>
    {
      Error_Handler();
 8001770:	f001 fad4 	bl	8002d1c <Error_Handler>
    }

    __HAL_LINKDMA(i2sHandle,hdmarx,hdma_spi2_rx);
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	4a31      	ldr	r2, [pc, #196]	@ (800183c <HAL_I2S_MspInit+0x1d4>)
 8001778:	63da      	str	r2, [r3, #60]	@ 0x3c
 800177a:	4a30      	ldr	r2, [pc, #192]	@ (800183c <HAL_I2S_MspInit+0x1d4>)
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8001780:	e04f      	b.n	8001822 <HAL_I2S_MspInit+0x1ba>
  else if(i2sHandle->Instance==SPI3)
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	4a2f      	ldr	r2, [pc, #188]	@ (8001844 <HAL_I2S_MspInit+0x1dc>)
 8001788:	4293      	cmp	r3, r2
 800178a:	d14a      	bne.n	8001822 <HAL_I2S_MspInit+0x1ba>
    __HAL_RCC_SPI3_CLK_ENABLE();
 800178c:	2300      	movs	r3, #0
 800178e:	617b      	str	r3, [r7, #20]
 8001790:	4b27      	ldr	r3, [pc, #156]	@ (8001830 <HAL_I2S_MspInit+0x1c8>)
 8001792:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001794:	4a26      	ldr	r2, [pc, #152]	@ (8001830 <HAL_I2S_MspInit+0x1c8>)
 8001796:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800179a:	6413      	str	r3, [r2, #64]	@ 0x40
 800179c:	4b24      	ldr	r3, [pc, #144]	@ (8001830 <HAL_I2S_MspInit+0x1c8>)
 800179e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017a0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80017a4:	617b      	str	r3, [r7, #20]
 80017a6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017a8:	2300      	movs	r3, #0
 80017aa:	613b      	str	r3, [r7, #16]
 80017ac:	4b20      	ldr	r3, [pc, #128]	@ (8001830 <HAL_I2S_MspInit+0x1c8>)
 80017ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017b0:	4a1f      	ldr	r2, [pc, #124]	@ (8001830 <HAL_I2S_MspInit+0x1c8>)
 80017b2:	f043 0301 	orr.w	r3, r3, #1
 80017b6:	6313      	str	r3, [r2, #48]	@ 0x30
 80017b8:	4b1d      	ldr	r3, [pc, #116]	@ (8001830 <HAL_I2S_MspInit+0x1c8>)
 80017ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017bc:	f003 0301 	and.w	r3, r3, #1
 80017c0:	613b      	str	r3, [r7, #16]
 80017c2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80017c4:	2300      	movs	r3, #0
 80017c6:	60fb      	str	r3, [r7, #12]
 80017c8:	4b19      	ldr	r3, [pc, #100]	@ (8001830 <HAL_I2S_MspInit+0x1c8>)
 80017ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017cc:	4a18      	ldr	r2, [pc, #96]	@ (8001830 <HAL_I2S_MspInit+0x1c8>)
 80017ce:	f043 0304 	orr.w	r3, r3, #4
 80017d2:	6313      	str	r3, [r2, #48]	@ 0x30
 80017d4:	4b16      	ldr	r3, [pc, #88]	@ (8001830 <HAL_I2S_MspInit+0x1c8>)
 80017d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017d8:	f003 0304 	and.w	r3, r3, #4
 80017dc:	60fb      	str	r3, [r7, #12]
 80017de:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80017e0:	2310      	movs	r3, #16
 80017e2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017e4:	2302      	movs	r3, #2
 80017e6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017e8:	2300      	movs	r3, #0
 80017ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017ec:	2300      	movs	r3, #0
 80017ee:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80017f0:	2306      	movs	r3, #6
 80017f2:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017f4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80017f8:	4619      	mov	r1, r3
 80017fa:	4813      	ldr	r0, [pc, #76]	@ (8001848 <HAL_I2S_MspInit+0x1e0>)
 80017fc:	f005 fa32 	bl	8006c64 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12;
 8001800:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001804:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001806:	2302      	movs	r3, #2
 8001808:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800180a:	2300      	movs	r3, #0
 800180c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800180e:	2300      	movs	r3, #0
 8001810:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001812:	2306      	movs	r3, #6
 8001814:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001816:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800181a:	4619      	mov	r1, r3
 800181c:	4805      	ldr	r0, [pc, #20]	@ (8001834 <HAL_I2S_MspInit+0x1cc>)
 800181e:	f005 fa21 	bl	8006c64 <HAL_GPIO_Init>
}
 8001822:	bf00      	nop
 8001824:	3738      	adds	r7, #56	@ 0x38
 8001826:	46bd      	mov	sp, r7
 8001828:	bd80      	pop	{r7, pc}
 800182a:	bf00      	nop
 800182c:	40003800 	.word	0x40003800
 8001830:	40023800 	.word	0x40023800
 8001834:	40020800 	.word	0x40020800
 8001838:	40020400 	.word	0x40020400
 800183c:	2000d458 	.word	0x2000d458
 8001840:	40026058 	.word	0x40026058
 8001844:	40003c00 	.word	0x40003c00
 8001848:	40020000 	.word	0x40020000

0800184c <ILI9341_WriteCommand>:
#include "stm32f4xx_hal.h"
#include "ili9341.h"

// Send command to display. Use ILI9341_SELECT() before
static inline void ILI9341_WriteCommand(ILI9341TypeDef *display, uint8_t command)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	b082      	sub	sp, #8
 8001850:	af00      	add	r7, sp, #0
 8001852:	6078      	str	r0, [r7, #4]
 8001854:	460b      	mov	r3, r1
 8001856:	70fb      	strb	r3, [r7, #3]
	ILI9341_COMMAND(display);
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	8a5b      	ldrh	r3, [r3, #18]
 800185c:	461a      	mov	r2, r3
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	689b      	ldr	r3, [r3, #8]
 8001862:	0412      	lsls	r2, r2, #16
 8001864:	619a      	str	r2, [r3, #24]
	HAL_SPI_Transmit(display->spi, &command, 1, 1);
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	6818      	ldr	r0, [r3, #0]
 800186a:	1cf9      	adds	r1, r7, #3
 800186c:	2301      	movs	r3, #1
 800186e:	2201      	movs	r2, #1
 8001870:	f007 f801 	bl	8008876 <HAL_SPI_Transmit>
}
 8001874:	bf00      	nop
 8001876:	3708      	adds	r7, #8
 8001878:	46bd      	mov	sp, r7
 800187a:	bd80      	pop	{r7, pc}

0800187c <ILI9341_WriteByte>:

// Send byte to display. Use ILI9341_SELECT() before
static inline void ILI9341_WriteByte(ILI9341TypeDef *display, uint8_t data)
{
 800187c:	b580      	push	{r7, lr}
 800187e:	b082      	sub	sp, #8
 8001880:	af00      	add	r7, sp, #0
 8001882:	6078      	str	r0, [r7, #4]
 8001884:	460b      	mov	r3, r1
 8001886:	70fb      	strb	r3, [r7, #3]
	ILI9341_DATA(display);
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	8a5a      	ldrh	r2, [r3, #18]
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	689b      	ldr	r3, [r3, #8]
 8001890:	619a      	str	r2, [r3, #24]
	HAL_SPI_Transmit(display->spi, &data, 1, 1);
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	6818      	ldr	r0, [r3, #0]
 8001896:	1cf9      	adds	r1, r7, #3
 8001898:	2301      	movs	r3, #1
 800189a:	2201      	movs	r2, #1
 800189c:	f006 ffeb 	bl	8008876 <HAL_SPI_Transmit>
}
 80018a0:	bf00      	nop
 80018a2:	3708      	adds	r7, #8
 80018a4:	46bd      	mov	sp, r7
 80018a6:	bd80      	pop	{r7, pc}

080018a8 <ILI9341_WriteBuffer>:

// Send buffer to display. Use ILI9341_SELECT() before
static inline void ILI9341_WriteBuffer(ILI9341TypeDef *display, uint8_t* buff, size_t buff_size)
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	b086      	sub	sp, #24
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	60f8      	str	r0, [r7, #12]
 80018b0:	60b9      	str	r1, [r7, #8]
 80018b2:	607a      	str	r2, [r7, #4]
	ILI9341_DATA(display);
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	8a5a      	ldrh	r2, [r3, #18]
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	689b      	ldr	r3, [r3, #8]
 80018bc:	619a      	str	r2, [r3, #24]

    // split data in small chunks because HAL can't send more then 64K at once
    while (buff_size > 0) {
 80018be:	e015      	b.n	80018ec <ILI9341_WriteBuffer+0x44>
        uint16_t chunk_size = buff_size > 32768 ? 32768 : buff_size;
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80018c6:	bf28      	it	cs
 80018c8:	f44f 4300 	movcs.w	r3, #32768	@ 0x8000
 80018cc:	82fb      	strh	r3, [r7, #22]
        HAL_SPI_Transmit(display->spi, buff, chunk_size, 10);
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	6818      	ldr	r0, [r3, #0]
 80018d2:	8afa      	ldrh	r2, [r7, #22]
 80018d4:	230a      	movs	r3, #10
 80018d6:	68b9      	ldr	r1, [r7, #8]
 80018d8:	f006 ffcd 	bl	8008876 <HAL_SPI_Transmit>
        buff += chunk_size;
 80018dc:	8afb      	ldrh	r3, [r7, #22]
 80018de:	68ba      	ldr	r2, [r7, #8]
 80018e0:	4413      	add	r3, r2
 80018e2:	60bb      	str	r3, [r7, #8]
        buff_size -= chunk_size;
 80018e4:	8afb      	ldrh	r3, [r7, #22]
 80018e6:	687a      	ldr	r2, [r7, #4]
 80018e8:	1ad3      	subs	r3, r2, r3
 80018ea:	607b      	str	r3, [r7, #4]
    while (buff_size > 0) {
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d1e6      	bne.n	80018c0 <ILI9341_WriteBuffer+0x18>
    }
}
 80018f2:	bf00      	nop
 80018f4:	bf00      	nop
 80018f6:	3718      	adds	r7, #24
 80018f8:	46bd      	mov	sp, r7
 80018fa:	bd80      	pop	{r7, pc}

080018fc <ILI9341_SetAddressWindow>:

static inline void ILI9341_SetAddressWindow(ILI9341TypeDef *display, uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2)
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	b086      	sub	sp, #24
 8001900:	af00      	add	r7, sp, #0
 8001902:	60f8      	str	r0, [r7, #12]
 8001904:	4608      	mov	r0, r1
 8001906:	4611      	mov	r1, r2
 8001908:	461a      	mov	r2, r3
 800190a:	4603      	mov	r3, r0
 800190c:	817b      	strh	r3, [r7, #10]
 800190e:	460b      	mov	r3, r1
 8001910:	813b      	strh	r3, [r7, #8]
 8001912:	4613      	mov	r3, r2
 8001914:	80fb      	strh	r3, [r7, #6]
    // Column address set
	ILI9341_WriteCommand(display, 0x2A); // CASET
 8001916:	212a      	movs	r1, #42	@ 0x2a
 8001918:	68f8      	ldr	r0, [r7, #12]
 800191a:	f7ff ff97 	bl	800184c <ILI9341_WriteCommand>

	uint8_t data[4];
	data[0] = x1 >> 8;
 800191e:	897b      	ldrh	r3, [r7, #10]
 8001920:	0a1b      	lsrs	r3, r3, #8
 8001922:	b29b      	uxth	r3, r3
 8001924:	b2db      	uxtb	r3, r3
 8001926:	753b      	strb	r3, [r7, #20]
	data[1] = x1;
 8001928:	897b      	ldrh	r3, [r7, #10]
 800192a:	b2db      	uxtb	r3, r3
 800192c:	757b      	strb	r3, [r7, #21]
	data[2] = x2 >> 8;
 800192e:	88fb      	ldrh	r3, [r7, #6]
 8001930:	0a1b      	lsrs	r3, r3, #8
 8001932:	b29b      	uxth	r3, r3
 8001934:	b2db      	uxtb	r3, r3
 8001936:	75bb      	strb	r3, [r7, #22]
	data[3] = x2;
 8001938:	88fb      	ldrh	r3, [r7, #6]
 800193a:	b2db      	uxtb	r3, r3
 800193c:	75fb      	strb	r3, [r7, #23]

	ILI9341_DATA(display);
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	8a5a      	ldrh	r2, [r3, #18]
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	689b      	ldr	r3, [r3, #8]
 8001946:	619a      	str	r2, [r3, #24]
	HAL_SPI_Transmit(display->spi, data, 4, 1);
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	6818      	ldr	r0, [r3, #0]
 800194c:	f107 0114 	add.w	r1, r7, #20
 8001950:	2301      	movs	r3, #1
 8001952:	2204      	movs	r2, #4
 8001954:	f006 ff8f 	bl	8008876 <HAL_SPI_Transmit>

    // Row address set
	ILI9341_WriteCommand(display, 0x2B); // RASET
 8001958:	212b      	movs	r1, #43	@ 0x2b
 800195a:	68f8      	ldr	r0, [r7, #12]
 800195c:	f7ff ff76 	bl	800184c <ILI9341_WriteCommand>

	data[0] = y1 >> 8;
 8001960:	893b      	ldrh	r3, [r7, #8]
 8001962:	0a1b      	lsrs	r3, r3, #8
 8001964:	b29b      	uxth	r3, r3
 8001966:	b2db      	uxtb	r3, r3
 8001968:	753b      	strb	r3, [r7, #20]
	data[1] = y1;
 800196a:	893b      	ldrh	r3, [r7, #8]
 800196c:	b2db      	uxtb	r3, r3
 800196e:	757b      	strb	r3, [r7, #21]
	data[2] = y2 >> 8;
 8001970:	8c3b      	ldrh	r3, [r7, #32]
 8001972:	0a1b      	lsrs	r3, r3, #8
 8001974:	b29b      	uxth	r3, r3
 8001976:	b2db      	uxtb	r3, r3
 8001978:	75bb      	strb	r3, [r7, #22]
	data[3] = y2;
 800197a:	8c3b      	ldrh	r3, [r7, #32]
 800197c:	b2db      	uxtb	r3, r3
 800197e:	75fb      	strb	r3, [r7, #23]

	ILI9341_DATA(display);
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	8a5a      	ldrh	r2, [r3, #18]
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	689b      	ldr	r3, [r3, #8]
 8001988:	619a      	str	r2, [r3, #24]
	HAL_SPI_Transmit(display->spi, data, 4, 1);
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	6818      	ldr	r0, [r3, #0]
 800198e:	f107 0114 	add.w	r1, r7, #20
 8001992:	2301      	movs	r3, #1
 8001994:	2204      	movs	r2, #4
 8001996:	f006 ff6e 	bl	8008876 <HAL_SPI_Transmit>

    // Write to RAM
	ILI9341_WriteCommand(display, 0x2C); // RAMWR
 800199a:	212c      	movs	r1, #44	@ 0x2c
 800199c:	68f8      	ldr	r0, [r7, #12]
 800199e:	f7ff ff55 	bl	800184c <ILI9341_WriteCommand>
}
 80019a2:	bf00      	nop
 80019a4:	3718      	adds	r7, #24
 80019a6:	46bd      	mov	sp, r7
 80019a8:	bd80      	pop	{r7, pc}

080019aa <ILI9341_Reset>:

static inline void ILI9341_Reset(ILI9341TypeDef *display)
{
 80019aa:	b580      	push	{r7, lr}
 80019ac:	b082      	sub	sp, #8
 80019ae:	af00      	add	r7, sp, #0
 80019b0:	6078      	str	r0, [r7, #4]
    display->reset_gpio_port->BSRR = (uint32_t)(display->reset_pin) << 16U;
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	8a9b      	ldrh	r3, [r3, #20]
 80019b6:	461a      	mov	r2, r3
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	68db      	ldr	r3, [r3, #12]
 80019bc:	0412      	lsls	r2, r2, #16
 80019be:	619a      	str	r2, [r3, #24]
    HAL_Delay(5);
 80019c0:	2005      	movs	r0, #5
 80019c2:	f003 ffa5 	bl	8005910 <HAL_Delay>
    display->reset_gpio_port->BSRR = display->reset_pin;
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	8a9a      	ldrh	r2, [r3, #20]
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	68db      	ldr	r3, [r3, #12]
 80019ce:	619a      	str	r2, [r3, #24]
}
 80019d0:	bf00      	nop
 80019d2:	3708      	adds	r7, #8
 80019d4:	46bd      	mov	sp, r7
 80019d6:	bd80      	pop	{r7, pc}

080019d8 <ILI9341_Init>:

void ILI9341_Init(ILI9341TypeDef *display)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	b082      	sub	sp, #8
 80019dc:	af00      	add	r7, sp, #0
 80019de:	6078      	str	r0, [r7, #4]
	ILI9341_SELECT(display);
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	8a1b      	ldrh	r3, [r3, #16]
 80019e4:	461a      	mov	r2, r3
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	685b      	ldr	r3, [r3, #4]
 80019ea:	0412      	lsls	r2, r2, #16
 80019ec:	619a      	str	r2, [r3, #24]
	ILI9341_Reset(display);
 80019ee:	6878      	ldr	r0, [r7, #4]
 80019f0:	f7ff ffdb 	bl	80019aa <ILI9341_Reset>

	// SOFTWARE RESET
	ILI9341_WriteCommand(display, 0x01);
 80019f4:	2101      	movs	r1, #1
 80019f6:	6878      	ldr	r0, [r7, #4]
 80019f8:	f7ff ff28 	bl	800184c <ILI9341_WriteCommand>
	HAL_Delay(1000);
 80019fc:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001a00:	f003 ff86 	bl	8005910 <HAL_Delay>

	// POWER CONTROL A
	ILI9341_WriteCommand(display, 0xCB);
 8001a04:	21cb      	movs	r1, #203	@ 0xcb
 8001a06:	6878      	ldr	r0, [r7, #4]
 8001a08:	f7ff ff20 	bl	800184c <ILI9341_WriteCommand>
	ILI9341_WriteByte(display, 0x39);
 8001a0c:	2139      	movs	r1, #57	@ 0x39
 8001a0e:	6878      	ldr	r0, [r7, #4]
 8001a10:	f7ff ff34 	bl	800187c <ILI9341_WriteByte>
	ILI9341_WriteByte(display, 0x2C);
 8001a14:	212c      	movs	r1, #44	@ 0x2c
 8001a16:	6878      	ldr	r0, [r7, #4]
 8001a18:	f7ff ff30 	bl	800187c <ILI9341_WriteByte>
	ILI9341_WriteByte(display, 0x00);
 8001a1c:	2100      	movs	r1, #0
 8001a1e:	6878      	ldr	r0, [r7, #4]
 8001a20:	f7ff ff2c 	bl	800187c <ILI9341_WriteByte>
	ILI9341_WriteByte(display, 0x34);
 8001a24:	2134      	movs	r1, #52	@ 0x34
 8001a26:	6878      	ldr	r0, [r7, #4]
 8001a28:	f7ff ff28 	bl	800187c <ILI9341_WriteByte>
	ILI9341_WriteByte(display, 0x02);
 8001a2c:	2102      	movs	r1, #2
 8001a2e:	6878      	ldr	r0, [r7, #4]
 8001a30:	f7ff ff24 	bl	800187c <ILI9341_WriteByte>

	// POWER CONTROL B
	ILI9341_WriteCommand(display, 0xCF);
 8001a34:	21cf      	movs	r1, #207	@ 0xcf
 8001a36:	6878      	ldr	r0, [r7, #4]
 8001a38:	f7ff ff08 	bl	800184c <ILI9341_WriteCommand>
	ILI9341_WriteByte(display, 0x00);
 8001a3c:	2100      	movs	r1, #0
 8001a3e:	6878      	ldr	r0, [r7, #4]
 8001a40:	f7ff ff1c 	bl	800187c <ILI9341_WriteByte>
	ILI9341_WriteByte(display, 0xC1);
 8001a44:	21c1      	movs	r1, #193	@ 0xc1
 8001a46:	6878      	ldr	r0, [r7, #4]
 8001a48:	f7ff ff18 	bl	800187c <ILI9341_WriteByte>
	ILI9341_WriteByte(display, 0x30);
 8001a4c:	2130      	movs	r1, #48	@ 0x30
 8001a4e:	6878      	ldr	r0, [r7, #4]
 8001a50:	f7ff ff14 	bl	800187c <ILI9341_WriteByte>

	// DRIVER TIMING CONTROL A
	ILI9341_WriteCommand(display, 0xE8);
 8001a54:	21e8      	movs	r1, #232	@ 0xe8
 8001a56:	6878      	ldr	r0, [r7, #4]
 8001a58:	f7ff fef8 	bl	800184c <ILI9341_WriteCommand>
	ILI9341_WriteByte(display, 0x85);
 8001a5c:	2185      	movs	r1, #133	@ 0x85
 8001a5e:	6878      	ldr	r0, [r7, #4]
 8001a60:	f7ff ff0c 	bl	800187c <ILI9341_WriteByte>
	ILI9341_WriteByte(display, 0x00);
 8001a64:	2100      	movs	r1, #0
 8001a66:	6878      	ldr	r0, [r7, #4]
 8001a68:	f7ff ff08 	bl	800187c <ILI9341_WriteByte>
	ILI9341_WriteByte(display, 0x78);
 8001a6c:	2178      	movs	r1, #120	@ 0x78
 8001a6e:	6878      	ldr	r0, [r7, #4]
 8001a70:	f7ff ff04 	bl	800187c <ILI9341_WriteByte>

	// DRIVER TIMING CONTROL B
	ILI9341_WriteCommand(display, 0xEA);
 8001a74:	21ea      	movs	r1, #234	@ 0xea
 8001a76:	6878      	ldr	r0, [r7, #4]
 8001a78:	f7ff fee8 	bl	800184c <ILI9341_WriteCommand>
	ILI9341_WriteByte(display, 0x00);
 8001a7c:	2100      	movs	r1, #0
 8001a7e:	6878      	ldr	r0, [r7, #4]
 8001a80:	f7ff fefc 	bl	800187c <ILI9341_WriteByte>
	ILI9341_WriteByte(display, 0x00);
 8001a84:	2100      	movs	r1, #0
 8001a86:	6878      	ldr	r0, [r7, #4]
 8001a88:	f7ff fef8 	bl	800187c <ILI9341_WriteByte>

	// POWER ON SEQUENCE CONTROL
	ILI9341_WriteCommand(display, 0xED);
 8001a8c:	21ed      	movs	r1, #237	@ 0xed
 8001a8e:	6878      	ldr	r0, [r7, #4]
 8001a90:	f7ff fedc 	bl	800184c <ILI9341_WriteCommand>
	ILI9341_WriteByte(display, 0x64);
 8001a94:	2164      	movs	r1, #100	@ 0x64
 8001a96:	6878      	ldr	r0, [r7, #4]
 8001a98:	f7ff fef0 	bl	800187c <ILI9341_WriteByte>
	ILI9341_WriteByte(display, 0x03);
 8001a9c:	2103      	movs	r1, #3
 8001a9e:	6878      	ldr	r0, [r7, #4]
 8001aa0:	f7ff feec 	bl	800187c <ILI9341_WriteByte>
	ILI9341_WriteByte(display, 0x12);
 8001aa4:	2112      	movs	r1, #18
 8001aa6:	6878      	ldr	r0, [r7, #4]
 8001aa8:	f7ff fee8 	bl	800187c <ILI9341_WriteByte>
	ILI9341_WriteByte(display, 0x81);
 8001aac:	2181      	movs	r1, #129	@ 0x81
 8001aae:	6878      	ldr	r0, [r7, #4]
 8001ab0:	f7ff fee4 	bl	800187c <ILI9341_WriteByte>

	// PUMP RATIO CONTROL
	ILI9341_WriteCommand(display, 0xF7);
 8001ab4:	21f7      	movs	r1, #247	@ 0xf7
 8001ab6:	6878      	ldr	r0, [r7, #4]
 8001ab8:	f7ff fec8 	bl	800184c <ILI9341_WriteCommand>
	ILI9341_WriteByte(display, 0x20);
 8001abc:	2120      	movs	r1, #32
 8001abe:	6878      	ldr	r0, [r7, #4]
 8001ac0:	f7ff fedc 	bl	800187c <ILI9341_WriteByte>

	// POWER CONTROL,VRH[5:0]
	ILI9341_WriteCommand(display, 0xC0);
 8001ac4:	21c0      	movs	r1, #192	@ 0xc0
 8001ac6:	6878      	ldr	r0, [r7, #4]
 8001ac8:	f7ff fec0 	bl	800184c <ILI9341_WriteCommand>
	ILI9341_WriteByte(display, 0x23);
 8001acc:	2123      	movs	r1, #35	@ 0x23
 8001ace:	6878      	ldr	r0, [r7, #4]
 8001ad0:	f7ff fed4 	bl	800187c <ILI9341_WriteByte>

	// POWER CONTROL,SAP[2:0];BT[3:0]
	ILI9341_WriteCommand(display, 0xC1);
 8001ad4:	21c1      	movs	r1, #193	@ 0xc1
 8001ad6:	6878      	ldr	r0, [r7, #4]
 8001ad8:	f7ff feb8 	bl	800184c <ILI9341_WriteCommand>
	ILI9341_WriteByte(display, 0x10);
 8001adc:	2110      	movs	r1, #16
 8001ade:	6878      	ldr	r0, [r7, #4]
 8001ae0:	f7ff fecc 	bl	800187c <ILI9341_WriteByte>

	// VCM CONTROL
	ILI9341_WriteCommand(display, 0xC5);
 8001ae4:	21c5      	movs	r1, #197	@ 0xc5
 8001ae6:	6878      	ldr	r0, [r7, #4]
 8001ae8:	f7ff feb0 	bl	800184c <ILI9341_WriteCommand>
	ILI9341_WriteByte(display, 0x3E);
 8001aec:	213e      	movs	r1, #62	@ 0x3e
 8001aee:	6878      	ldr	r0, [r7, #4]
 8001af0:	f7ff fec4 	bl	800187c <ILI9341_WriteByte>
	ILI9341_WriteByte(display, 0x28);
 8001af4:	2128      	movs	r1, #40	@ 0x28
 8001af6:	6878      	ldr	r0, [r7, #4]
 8001af8:	f7ff fec0 	bl	800187c <ILI9341_WriteByte>

	// VCM CONTROL 2
	ILI9341_WriteCommand(display, 0xC7);
 8001afc:	21c7      	movs	r1, #199	@ 0xc7
 8001afe:	6878      	ldr	r0, [r7, #4]
 8001b00:	f7ff fea4 	bl	800184c <ILI9341_WriteCommand>
	ILI9341_WriteByte(display, 0x86);
 8001b04:	2186      	movs	r1, #134	@ 0x86
 8001b06:	6878      	ldr	r0, [r7, #4]
 8001b08:	f7ff feb8 	bl	800187c <ILI9341_WriteByte>

	// MEMORY ACCESS CONTROL
	ILI9341_WriteCommand(display, 0x36);
 8001b0c:	2136      	movs	r1, #54	@ 0x36
 8001b0e:	6878      	ldr	r0, [r7, #4]
 8001b10:	f7ff fe9c 	bl	800184c <ILI9341_WriteCommand>
	ILI9341_WriteByte(display, 0x48);
 8001b14:	2148      	movs	r1, #72	@ 0x48
 8001b16:	6878      	ldr	r0, [r7, #4]
 8001b18:	f7ff feb0 	bl	800187c <ILI9341_WriteByte>

	// PIXEL FORMAT
	ILI9341_WriteCommand(display, 0x3A);
 8001b1c:	213a      	movs	r1, #58	@ 0x3a
 8001b1e:	6878      	ldr	r0, [r7, #4]
 8001b20:	f7ff fe94 	bl	800184c <ILI9341_WriteCommand>
	ILI9341_WriteByte(display, 0x55);
 8001b24:	2155      	movs	r1, #85	@ 0x55
 8001b26:	6878      	ldr	r0, [r7, #4]
 8001b28:	f7ff fea8 	bl	800187c <ILI9341_WriteByte>

	// FRAME RATIO CONTROL, STANDARD RGB COLOR
	ILI9341_WriteCommand(display, 0xB1);
 8001b2c:	21b1      	movs	r1, #177	@ 0xb1
 8001b2e:	6878      	ldr	r0, [r7, #4]
 8001b30:	f7ff fe8c 	bl	800184c <ILI9341_WriteCommand>
	ILI9341_WriteByte(display, 0x00);
 8001b34:	2100      	movs	r1, #0
 8001b36:	6878      	ldr	r0, [r7, #4]
 8001b38:	f7ff fea0 	bl	800187c <ILI9341_WriteByte>
	ILI9341_WriteByte(display, 0x18);
 8001b3c:	2118      	movs	r1, #24
 8001b3e:	6878      	ldr	r0, [r7, #4]
 8001b40:	f7ff fe9c 	bl	800187c <ILI9341_WriteByte>

	// DISPLAY FUNCTION CONTROL
	ILI9341_WriteCommand(display, 0xB6);
 8001b44:	21b6      	movs	r1, #182	@ 0xb6
 8001b46:	6878      	ldr	r0, [r7, #4]
 8001b48:	f7ff fe80 	bl	800184c <ILI9341_WriteCommand>
	ILI9341_WriteByte(display, 0x08);
 8001b4c:	2108      	movs	r1, #8
 8001b4e:	6878      	ldr	r0, [r7, #4]
 8001b50:	f7ff fe94 	bl	800187c <ILI9341_WriteByte>
	ILI9341_WriteByte(display, 0x82);
 8001b54:	2182      	movs	r1, #130	@ 0x82
 8001b56:	6878      	ldr	r0, [r7, #4]
 8001b58:	f7ff fe90 	bl	800187c <ILI9341_WriteByte>
	ILI9341_WriteByte(display, 0x27);
 8001b5c:	2127      	movs	r1, #39	@ 0x27
 8001b5e:	6878      	ldr	r0, [r7, #4]
 8001b60:	f7ff fe8c 	bl	800187c <ILI9341_WriteByte>

	// 3GAMMA FUNCTION DISABLE
	ILI9341_WriteCommand(display, 0xF2);
 8001b64:	21f2      	movs	r1, #242	@ 0xf2
 8001b66:	6878      	ldr	r0, [r7, #4]
 8001b68:	f7ff fe70 	bl	800184c <ILI9341_WriteCommand>
	ILI9341_WriteByte(display, 0x00);
 8001b6c:	2100      	movs	r1, #0
 8001b6e:	6878      	ldr	r0, [r7, #4]
 8001b70:	f7ff fe84 	bl	800187c <ILI9341_WriteByte>

	// GAMMA CURVE SELECTED
	ILI9341_WriteCommand(display, 0x26);
 8001b74:	2126      	movs	r1, #38	@ 0x26
 8001b76:	6878      	ldr	r0, [r7, #4]
 8001b78:	f7ff fe68 	bl	800184c <ILI9341_WriteCommand>
	ILI9341_WriteByte(display, 0x01);
 8001b7c:	2101      	movs	r1, #1
 8001b7e:	6878      	ldr	r0, [r7, #4]
 8001b80:	f7ff fe7c 	bl	800187c <ILI9341_WriteByte>

	// POSITIVE GAMMA CORRECTION
	ILI9341_WriteCommand(display, 0xE0);
 8001b84:	21e0      	movs	r1, #224	@ 0xe0
 8001b86:	6878      	ldr	r0, [r7, #4]
 8001b88:	f7ff fe60 	bl	800184c <ILI9341_WriteCommand>
	ILI9341_WriteByte(display, 0x0F);
 8001b8c:	210f      	movs	r1, #15
 8001b8e:	6878      	ldr	r0, [r7, #4]
 8001b90:	f7ff fe74 	bl	800187c <ILI9341_WriteByte>
	ILI9341_WriteByte(display, 0x31);
 8001b94:	2131      	movs	r1, #49	@ 0x31
 8001b96:	6878      	ldr	r0, [r7, #4]
 8001b98:	f7ff fe70 	bl	800187c <ILI9341_WriteByte>
	ILI9341_WriteByte(display, 0x2B);
 8001b9c:	212b      	movs	r1, #43	@ 0x2b
 8001b9e:	6878      	ldr	r0, [r7, #4]
 8001ba0:	f7ff fe6c 	bl	800187c <ILI9341_WriteByte>
	ILI9341_WriteByte(display, 0x0C);
 8001ba4:	210c      	movs	r1, #12
 8001ba6:	6878      	ldr	r0, [r7, #4]
 8001ba8:	f7ff fe68 	bl	800187c <ILI9341_WriteByte>
	ILI9341_WriteByte(display, 0x0E);
 8001bac:	210e      	movs	r1, #14
 8001bae:	6878      	ldr	r0, [r7, #4]
 8001bb0:	f7ff fe64 	bl	800187c <ILI9341_WriteByte>
	ILI9341_WriteByte(display, 0x08);
 8001bb4:	2108      	movs	r1, #8
 8001bb6:	6878      	ldr	r0, [r7, #4]
 8001bb8:	f7ff fe60 	bl	800187c <ILI9341_WriteByte>
	ILI9341_WriteByte(display, 0x4E);
 8001bbc:	214e      	movs	r1, #78	@ 0x4e
 8001bbe:	6878      	ldr	r0, [r7, #4]
 8001bc0:	f7ff fe5c 	bl	800187c <ILI9341_WriteByte>
	ILI9341_WriteByte(display, 0xF1);
 8001bc4:	21f1      	movs	r1, #241	@ 0xf1
 8001bc6:	6878      	ldr	r0, [r7, #4]
 8001bc8:	f7ff fe58 	bl	800187c <ILI9341_WriteByte>
	ILI9341_WriteByte(display, 0x37);
 8001bcc:	2137      	movs	r1, #55	@ 0x37
 8001bce:	6878      	ldr	r0, [r7, #4]
 8001bd0:	f7ff fe54 	bl	800187c <ILI9341_WriteByte>
	ILI9341_WriteByte(display, 0x07);
 8001bd4:	2107      	movs	r1, #7
 8001bd6:	6878      	ldr	r0, [r7, #4]
 8001bd8:	f7ff fe50 	bl	800187c <ILI9341_WriteByte>
	ILI9341_WriteByte(display, 0x10);
 8001bdc:	2110      	movs	r1, #16
 8001bde:	6878      	ldr	r0, [r7, #4]
 8001be0:	f7ff fe4c 	bl	800187c <ILI9341_WriteByte>
	ILI9341_WriteByte(display, 0x03);
 8001be4:	2103      	movs	r1, #3
 8001be6:	6878      	ldr	r0, [r7, #4]
 8001be8:	f7ff fe48 	bl	800187c <ILI9341_WriteByte>
	ILI9341_WriteByte(display, 0x0E);
 8001bec:	210e      	movs	r1, #14
 8001bee:	6878      	ldr	r0, [r7, #4]
 8001bf0:	f7ff fe44 	bl	800187c <ILI9341_WriteByte>
	ILI9341_WriteByte(display, 0x09);
 8001bf4:	2109      	movs	r1, #9
 8001bf6:	6878      	ldr	r0, [r7, #4]
 8001bf8:	f7ff fe40 	bl	800187c <ILI9341_WriteByte>
	ILI9341_WriteByte(display, 0x00);
 8001bfc:	2100      	movs	r1, #0
 8001bfe:	6878      	ldr	r0, [r7, #4]
 8001c00:	f7ff fe3c 	bl	800187c <ILI9341_WriteByte>

	// NEGATIVE GAMMA CORRECTION
	ILI9341_WriteCommand(display, 0xE1);
 8001c04:	21e1      	movs	r1, #225	@ 0xe1
 8001c06:	6878      	ldr	r0, [r7, #4]
 8001c08:	f7ff fe20 	bl	800184c <ILI9341_WriteCommand>
	ILI9341_WriteByte(display, 0x00);
 8001c0c:	2100      	movs	r1, #0
 8001c0e:	6878      	ldr	r0, [r7, #4]
 8001c10:	f7ff fe34 	bl	800187c <ILI9341_WriteByte>
	ILI9341_WriteByte(display, 0x0E);
 8001c14:	210e      	movs	r1, #14
 8001c16:	6878      	ldr	r0, [r7, #4]
 8001c18:	f7ff fe30 	bl	800187c <ILI9341_WriteByte>
	ILI9341_WriteByte(display, 0x14);
 8001c1c:	2114      	movs	r1, #20
 8001c1e:	6878      	ldr	r0, [r7, #4]
 8001c20:	f7ff fe2c 	bl	800187c <ILI9341_WriteByte>
	ILI9341_WriteByte(display, 0x03);
 8001c24:	2103      	movs	r1, #3
 8001c26:	6878      	ldr	r0, [r7, #4]
 8001c28:	f7ff fe28 	bl	800187c <ILI9341_WriteByte>
	ILI9341_WriteByte(display, 0x11);
 8001c2c:	2111      	movs	r1, #17
 8001c2e:	6878      	ldr	r0, [r7, #4]
 8001c30:	f7ff fe24 	bl	800187c <ILI9341_WriteByte>
	ILI9341_WriteByte(display, 0x07);
 8001c34:	2107      	movs	r1, #7
 8001c36:	6878      	ldr	r0, [r7, #4]
 8001c38:	f7ff fe20 	bl	800187c <ILI9341_WriteByte>
	ILI9341_WriteByte(display, 0x31);
 8001c3c:	2131      	movs	r1, #49	@ 0x31
 8001c3e:	6878      	ldr	r0, [r7, #4]
 8001c40:	f7ff fe1c 	bl	800187c <ILI9341_WriteByte>
	ILI9341_WriteByte(display, 0xC1);
 8001c44:	21c1      	movs	r1, #193	@ 0xc1
 8001c46:	6878      	ldr	r0, [r7, #4]
 8001c48:	f7ff fe18 	bl	800187c <ILI9341_WriteByte>
	ILI9341_WriteByte(display, 0x48);
 8001c4c:	2148      	movs	r1, #72	@ 0x48
 8001c4e:	6878      	ldr	r0, [r7, #4]
 8001c50:	f7ff fe14 	bl	800187c <ILI9341_WriteByte>
	ILI9341_WriteByte(display, 0x08);
 8001c54:	2108      	movs	r1, #8
 8001c56:	6878      	ldr	r0, [r7, #4]
 8001c58:	f7ff fe10 	bl	800187c <ILI9341_WriteByte>
	ILI9341_WriteByte(display, 0x0F);
 8001c5c:	210f      	movs	r1, #15
 8001c5e:	6878      	ldr	r0, [r7, #4]
 8001c60:	f7ff fe0c 	bl	800187c <ILI9341_WriteByte>
	ILI9341_WriteByte(display, 0x0C);
 8001c64:	210c      	movs	r1, #12
 8001c66:	6878      	ldr	r0, [r7, #4]
 8001c68:	f7ff fe08 	bl	800187c <ILI9341_WriteByte>
	ILI9341_WriteByte(display, 0x31);
 8001c6c:	2131      	movs	r1, #49	@ 0x31
 8001c6e:	6878      	ldr	r0, [r7, #4]
 8001c70:	f7ff fe04 	bl	800187c <ILI9341_WriteByte>
	ILI9341_WriteByte(display, 0x36);
 8001c74:	2136      	movs	r1, #54	@ 0x36
 8001c76:	6878      	ldr	r0, [r7, #4]
 8001c78:	f7ff fe00 	bl	800187c <ILI9341_WriteByte>
	ILI9341_WriteByte(display, 0x0F);
 8001c7c:	210f      	movs	r1, #15
 8001c7e:	6878      	ldr	r0, [r7, #4]
 8001c80:	f7ff fdfc 	bl	800187c <ILI9341_WriteByte>

	// EXIT SLEEP
	ILI9341_WriteCommand(display, 0x11);
 8001c84:	2111      	movs	r1, #17
 8001c86:	6878      	ldr	r0, [r7, #4]
 8001c88:	f7ff fde0 	bl	800184c <ILI9341_WriteCommand>
	HAL_Delay(120);
 8001c8c:	2078      	movs	r0, #120	@ 0x78
 8001c8e:	f003 fe3f 	bl	8005910 <HAL_Delay>

	// TURN ON DISPLAY
	ILI9341_WriteCommand(display, 0x29);
 8001c92:	2129      	movs	r1, #41	@ 0x29
 8001c94:	6878      	ldr	r0, [r7, #4]
 8001c96:	f7ff fdd9 	bl	800184c <ILI9341_WriteCommand>

	// MADCTL
	ILI9341_WriteCommand(display, 0x36);
 8001c9a:	2136      	movs	r1, #54	@ 0x36
 8001c9c:	6878      	ldr	r0, [r7, #4]
 8001c9e:	f7ff fdd5 	bl	800184c <ILI9341_WriteCommand>
	ILI9341_WriteByte(display, display->orientation);
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	7e9b      	ldrb	r3, [r3, #26]
 8001ca6:	4619      	mov	r1, r3
 8001ca8:	6878      	ldr	r0, [r7, #4]
 8001caa:	f7ff fde7 	bl	800187c <ILI9341_WriteByte>

	ILI9341_UNSELECT(display);
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	8a1a      	ldrh	r2, [r3, #16]
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	685b      	ldr	r3, [r3, #4]
 8001cb6:	619a      	str	r2, [r3, #24]
}
 8001cb8:	bf00      	nop
 8001cba:	3708      	adds	r7, #8
 8001cbc:	46bd      	mov	sp, r7
 8001cbe:	bd80      	pop	{r7, pc}

08001cc0 <ILI9341_DrawPixel>:
    ILI9341_WriteCommand(display, (invert > 0) ? 0x21 /* INVON */ : 0x20 /* INVOFF */);
    ILI9341_UNSELECT(display);
}

void ILI9341_DrawPixel(ILI9341TypeDef *display, uint16_t x, uint16_t y, uint16_t color)
{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	b088      	sub	sp, #32
 8001cc4:	af02      	add	r7, sp, #8
 8001cc6:	60f8      	str	r0, [r7, #12]
 8001cc8:	4608      	mov	r0, r1
 8001cca:	4611      	mov	r1, r2
 8001ccc:	461a      	mov	r2, r3
 8001cce:	4603      	mov	r3, r0
 8001cd0:	817b      	strh	r3, [r7, #10]
 8001cd2:	460b      	mov	r3, r1
 8001cd4:	813b      	strh	r3, [r7, #8]
 8001cd6:	4613      	mov	r3, r2
 8001cd8:	80fb      	strh	r3, [r7, #6]
	// Check out of bounds
	if((x >= display->width) || (y >= display->height))
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	8adb      	ldrh	r3, [r3, #22]
 8001cde:	897a      	ldrh	r2, [r7, #10]
 8001ce0:	429a      	cmp	r2, r3
 8001ce2:	d233      	bcs.n	8001d4c <ILI9341_DrawPixel+0x8c>
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	8b1b      	ldrh	r3, [r3, #24]
 8001ce8:	893a      	ldrh	r2, [r7, #8]
 8001cea:	429a      	cmp	r2, r3
 8001cec:	d22e      	bcs.n	8001d4c <ILI9341_DrawPixel+0x8c>
		return;

	ILI9341_SELECT(display);
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	8a1b      	ldrh	r3, [r3, #16]
 8001cf2:	461a      	mov	r2, r3
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	685b      	ldr	r3, [r3, #4]
 8001cf8:	0412      	lsls	r2, r2, #16
 8001cfa:	619a      	str	r2, [r3, #24]
	ILI9341_SetAddressWindow(display, x, y, x + 1, y + 1);
 8001cfc:	897b      	ldrh	r3, [r7, #10]
 8001cfe:	3301      	adds	r3, #1
 8001d00:	b298      	uxth	r0, r3
 8001d02:	893b      	ldrh	r3, [r7, #8]
 8001d04:	3301      	adds	r3, #1
 8001d06:	b29b      	uxth	r3, r3
 8001d08:	893a      	ldrh	r2, [r7, #8]
 8001d0a:	8979      	ldrh	r1, [r7, #10]
 8001d0c:	9300      	str	r3, [sp, #0]
 8001d0e:	4603      	mov	r3, r0
 8001d10:	68f8      	ldr	r0, [r7, #12]
 8001d12:	f7ff fdf3 	bl	80018fc <ILI9341_SetAddressWindow>

	ILI9341_DATA(display);
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	8a5a      	ldrh	r2, [r3, #18]
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	689b      	ldr	r3, [r3, #8]
 8001d1e:	619a      	str	r2, [r3, #24]
	uint8_t data[2] = { color >> 8, color };
 8001d20:	88fb      	ldrh	r3, [r7, #6]
 8001d22:	0a1b      	lsrs	r3, r3, #8
 8001d24:	b29b      	uxth	r3, r3
 8001d26:	b2db      	uxtb	r3, r3
 8001d28:	753b      	strb	r3, [r7, #20]
 8001d2a:	88fb      	ldrh	r3, [r7, #6]
 8001d2c:	b2db      	uxtb	r3, r3
 8001d2e:	757b      	strb	r3, [r7, #21]
	HAL_SPI_Transmit(display->spi, data, 2, 1);
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	6818      	ldr	r0, [r3, #0]
 8001d34:	f107 0114 	add.w	r1, r7, #20
 8001d38:	2301      	movs	r3, #1
 8001d3a:	2202      	movs	r2, #2
 8001d3c:	f006 fd9b 	bl	8008876 <HAL_SPI_Transmit>

	ILI9341_UNSELECT(display);
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	8a1a      	ldrh	r2, [r3, #16]
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	685b      	ldr	r3, [r3, #4]
 8001d48:	619a      	str	r2, [r3, #24]
 8001d4a:	e000      	b.n	8001d4e <ILI9341_DrawPixel+0x8e>
		return;
 8001d4c:	bf00      	nop
}
 8001d4e:	3718      	adds	r7, #24
 8001d50:	46bd      	mov	sp, r7
 8001d52:	bd80      	pop	{r7, pc}

08001d54 <ILI9341_Fill>:

static void ILI9341_Fill(ILI9341TypeDef *display, uint16_t color, uint32_t size)
{
 8001d54:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001d58:	b08f      	sub	sp, #60	@ 0x3c
 8001d5a:	af00      	add	r7, sp, #0
 8001d5c:	60f8      	str	r0, [r7, #12]
 8001d5e:	460b      	mov	r3, r1
 8001d60:	607a      	str	r2, [r7, #4]
 8001d62:	817b      	strh	r3, [r7, #10]
 8001d64:	466b      	mov	r3, sp
 8001d66:	461e      	mov	r6, r3
	ILI9341_DATA(display);
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	8a5a      	ldrh	r2, [r3, #18]
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	689b      	ldr	r3, [r3, #8]
 8001d70:	619a      	str	r2, [r3, #24]

	uint32_t buffer_size = 0;
 8001d72:	2300      	movs	r3, #0
 8001d74:	637b      	str	r3, [r7, #52]	@ 0x34

	if ((size * 2) < ILI9341_BUFFER_MAX_SIZE)
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	005b      	lsls	r3, r3, #1
 8001d7a:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8001d7e:	d202      	bcs.n	8001d86 <ILI9341_Fill+0x32>
		buffer_size = size;
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	637b      	str	r3, [r7, #52]	@ 0x34
 8001d84:	e002      	b.n	8001d8c <ILI9341_Fill+0x38>
	else
		buffer_size = ILI9341_BUFFER_MAX_SIZE;
 8001d86:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8001d8a:	637b      	str	r3, [r7, #52]	@ 0x34

	uint8_t color_shifted = color >> 8;
 8001d8c:	897b      	ldrh	r3, [r7, #10]
 8001d8e:	0a1b      	lsrs	r3, r3, #8
 8001d90:	b29b      	uxth	r3, r3
 8001d92:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
	uint8_t buffer[buffer_size];
 8001d96:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8001d98:	460b      	mov	r3, r1
 8001d9a:	3b01      	subs	r3, #1
 8001d9c:	627b      	str	r3, [r7, #36]	@ 0x24
 8001d9e:	2300      	movs	r3, #0
 8001da0:	4688      	mov	r8, r1
 8001da2:	4699      	mov	r9, r3
 8001da4:	f04f 0200 	mov.w	r2, #0
 8001da8:	f04f 0300 	mov.w	r3, #0
 8001dac:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001db0:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001db4:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001db8:	2300      	movs	r3, #0
 8001dba:	460c      	mov	r4, r1
 8001dbc:	461d      	mov	r5, r3
 8001dbe:	f04f 0200 	mov.w	r2, #0
 8001dc2:	f04f 0300 	mov.w	r3, #0
 8001dc6:	00eb      	lsls	r3, r5, #3
 8001dc8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001dcc:	00e2      	lsls	r2, r4, #3
 8001dce:	1dcb      	adds	r3, r1, #7
 8001dd0:	08db      	lsrs	r3, r3, #3
 8001dd2:	00db      	lsls	r3, r3, #3
 8001dd4:	ebad 0d03 	sub.w	sp, sp, r3
 8001dd8:	466b      	mov	r3, sp
 8001dda:	3300      	adds	r3, #0
 8001ddc:	623b      	str	r3, [r7, #32]

	for (uint32_t i = 0; i < buffer_size; i += 2) {
 8001dde:	2300      	movs	r3, #0
 8001de0:	633b      	str	r3, [r7, #48]	@ 0x30
 8001de2:	e00e      	b.n	8001e02 <ILI9341_Fill+0xae>
		buffer[i]     = color_shifted;
 8001de4:	6a3a      	ldr	r2, [r7, #32]
 8001de6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001de8:	4413      	add	r3, r2
 8001dea:	f897 202b 	ldrb.w	r2, [r7, #43]	@ 0x2b
 8001dee:	701a      	strb	r2, [r3, #0]
		buffer[i + 1] = color;
 8001df0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001df2:	3301      	adds	r3, #1
 8001df4:	897a      	ldrh	r2, [r7, #10]
 8001df6:	b2d1      	uxtb	r1, r2
 8001df8:	6a3a      	ldr	r2, [r7, #32]
 8001dfa:	54d1      	strb	r1, [r2, r3]
	for (uint32_t i = 0; i < buffer_size; i += 2) {
 8001dfc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001dfe:	3302      	adds	r3, #2
 8001e00:	633b      	str	r3, [r7, #48]	@ 0x30
 8001e02:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001e04:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001e06:	429a      	cmp	r2, r3
 8001e08:	d3ec      	bcc.n	8001de4 <ILI9341_Fill+0x90>
	}

	uint32_t sending_size   = size * 2;
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	005b      	lsls	r3, r3, #1
 8001e0e:	61fb      	str	r3, [r7, #28]
	uint32_t sending_blocks = sending_size / buffer_size;
 8001e10:	69fa      	ldr	r2, [r7, #28]
 8001e12:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001e14:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e18:	61bb      	str	r3, [r7, #24]
	uint32_t sending_remain = sending_size % buffer_size;
 8001e1a:	69fb      	ldr	r3, [r7, #28]
 8001e1c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001e1e:	fbb3 f2f2 	udiv	r2, r3, r2
 8001e22:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8001e24:	fb01 f202 	mul.w	r2, r1, r2
 8001e28:	1a9b      	subs	r3, r3, r2
 8001e2a:	617b      	str	r3, [r7, #20]

	if (sending_blocks != 0) {
 8001e2c:	69bb      	ldr	r3, [r7, #24]
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d011      	beq.n	8001e56 <ILI9341_Fill+0x102>
		for(uint32_t i = 0; i < sending_blocks; i++)
 8001e32:	2300      	movs	r3, #0
 8001e34:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001e36:	e00a      	b.n	8001e4e <ILI9341_Fill+0xfa>
			HAL_SPI_Transmit(display->spi, (uint8_t*)buffer, buffer_size, 10);
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	6818      	ldr	r0, [r3, #0]
 8001e3c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001e3e:	b29a      	uxth	r2, r3
 8001e40:	230a      	movs	r3, #10
 8001e42:	6a39      	ldr	r1, [r7, #32]
 8001e44:	f006 fd17 	bl	8008876 <HAL_SPI_Transmit>
		for(uint32_t i = 0; i < sending_blocks; i++)
 8001e48:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001e4a:	3301      	adds	r3, #1
 8001e4c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001e4e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001e50:	69bb      	ldr	r3, [r7, #24]
 8001e52:	429a      	cmp	r2, r3
 8001e54:	d3f0      	bcc.n	8001e38 <ILI9341_Fill+0xe4>
	}

	HAL_SPI_Transmit(display->spi, (uint8_t*)buffer, sending_remain, 10);
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	6818      	ldr	r0, [r3, #0]
 8001e5a:	697b      	ldr	r3, [r7, #20]
 8001e5c:	b29a      	uxth	r2, r3
 8001e5e:	230a      	movs	r3, #10
 8001e60:	6a39      	ldr	r1, [r7, #32]
 8001e62:	f006 fd08 	bl	8008876 <HAL_SPI_Transmit>
 8001e66:	46b5      	mov	sp, r6
}
 8001e68:	bf00      	nop
 8001e6a:	373c      	adds	r7, #60	@ 0x3c
 8001e6c:	46bd      	mov	sp, r7
 8001e6e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08001e72 <ILI9341_FillScreen>:

void ILI9341_FillScreen(ILI9341TypeDef *display, uint16_t color)
{
 8001e72:	b580      	push	{r7, lr}
 8001e74:	b084      	sub	sp, #16
 8001e76:	af02      	add	r7, sp, #8
 8001e78:	6078      	str	r0, [r7, #4]
 8001e7a:	460b      	mov	r3, r1
 8001e7c:	807b      	strh	r3, [r7, #2]
	ILI9341_SELECT(display);
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	8a1b      	ldrh	r3, [r3, #16]
 8001e82:	461a      	mov	r2, r3
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	685b      	ldr	r3, [r3, #4]
 8001e88:	0412      	lsls	r2, r2, #16
 8001e8a:	619a      	str	r2, [r3, #24]
	ILI9341_SetAddressWindow(display, 0, 0, display->width - 1, display->height - 1);
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	8adb      	ldrh	r3, [r3, #22]
 8001e90:	3b01      	subs	r3, #1
 8001e92:	b29a      	uxth	r2, r3
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	8b1b      	ldrh	r3, [r3, #24]
 8001e98:	3b01      	subs	r3, #1
 8001e9a:	b29b      	uxth	r3, r3
 8001e9c:	9300      	str	r3, [sp, #0]
 8001e9e:	4613      	mov	r3, r2
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	2100      	movs	r1, #0
 8001ea4:	6878      	ldr	r0, [r7, #4]
 8001ea6:	f7ff fd29 	bl	80018fc <ILI9341_SetAddressWindow>
	ILI9341_Fill(display, color, display->width * display->height);
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	8adb      	ldrh	r3, [r3, #22]
 8001eae:	461a      	mov	r2, r3
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	8b1b      	ldrh	r3, [r3, #24]
 8001eb4:	fb02 f303 	mul.w	r3, r2, r3
 8001eb8:	461a      	mov	r2, r3
 8001eba:	887b      	ldrh	r3, [r7, #2]
 8001ebc:	4619      	mov	r1, r3
 8001ebe:	6878      	ldr	r0, [r7, #4]
 8001ec0:	f7ff ff48 	bl	8001d54 <ILI9341_Fill>
	ILI9341_UNSELECT(display);
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	8a1a      	ldrh	r2, [r3, #16]
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	685b      	ldr	r3, [r3, #4]
 8001ecc:	619a      	str	r2, [r3, #24]
}
 8001ece:	bf00      	nop
 8001ed0:	3708      	adds	r7, #8
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	bd80      	pop	{r7, pc}

08001ed6 <ILI9341_FillRectangle>:

void ILI9341_FillRectangle(ILI9341TypeDef *display, uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color)
{
 8001ed6:	b580      	push	{r7, lr}
 8001ed8:	b086      	sub	sp, #24
 8001eda:	af02      	add	r7, sp, #8
 8001edc:	60f8      	str	r0, [r7, #12]
 8001ede:	4608      	mov	r0, r1
 8001ee0:	4611      	mov	r1, r2
 8001ee2:	461a      	mov	r2, r3
 8001ee4:	4603      	mov	r3, r0
 8001ee6:	817b      	strh	r3, [r7, #10]
 8001ee8:	460b      	mov	r3, r1
 8001eea:	813b      	strh	r3, [r7, #8]
 8001eec:	4613      	mov	r3, r2
 8001eee:	80fb      	strh	r3, [r7, #6]
	if ((x >= display->width) || (y >= display->height))
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	8adb      	ldrh	r3, [r3, #22]
 8001ef4:	897a      	ldrh	r2, [r7, #10]
 8001ef6:	429a      	cmp	r2, r3
 8001ef8:	d246      	bcs.n	8001f88 <ILI9341_FillRectangle+0xb2>
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	8b1b      	ldrh	r3, [r3, #24]
 8001efe:	893a      	ldrh	r2, [r7, #8]
 8001f00:	429a      	cmp	r2, r3
 8001f02:	d241      	bcs.n	8001f88 <ILI9341_FillRectangle+0xb2>
		return;

	if ((x + w - 1) >= display->width)
 8001f04:	897a      	ldrh	r2, [r7, #10]
 8001f06:	88fb      	ldrh	r3, [r7, #6]
 8001f08:	4413      	add	r3, r2
 8001f0a:	68fa      	ldr	r2, [r7, #12]
 8001f0c:	8ad2      	ldrh	r2, [r2, #22]
 8001f0e:	4293      	cmp	r3, r2
 8001f10:	dd04      	ble.n	8001f1c <ILI9341_FillRectangle+0x46>
		w = display->width - x;
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	8ada      	ldrh	r2, [r3, #22]
 8001f16:	897b      	ldrh	r3, [r7, #10]
 8001f18:	1ad3      	subs	r3, r2, r3
 8001f1a:	80fb      	strh	r3, [r7, #6]

	if ((y + h - 1) >= display->height)
 8001f1c:	893a      	ldrh	r2, [r7, #8]
 8001f1e:	8b3b      	ldrh	r3, [r7, #24]
 8001f20:	4413      	add	r3, r2
 8001f22:	68fa      	ldr	r2, [r7, #12]
 8001f24:	8b12      	ldrh	r2, [r2, #24]
 8001f26:	4293      	cmp	r3, r2
 8001f28:	dd04      	ble.n	8001f34 <ILI9341_FillRectangle+0x5e>
		h = display->height - y;
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	8b1a      	ldrh	r2, [r3, #24]
 8001f2e:	893b      	ldrh	r3, [r7, #8]
 8001f30:	1ad3      	subs	r3, r2, r3
 8001f32:	833b      	strh	r3, [r7, #24]

	ILI9341_SELECT(display);
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	8a1b      	ldrh	r3, [r3, #16]
 8001f38:	461a      	mov	r2, r3
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	685b      	ldr	r3, [r3, #4]
 8001f3e:	0412      	lsls	r2, r2, #16
 8001f40:	619a      	str	r2, [r3, #24]
	ILI9341_SetAddressWindow(display, x, y, x + w - 1, y + h - 1);
 8001f42:	897a      	ldrh	r2, [r7, #10]
 8001f44:	88fb      	ldrh	r3, [r7, #6]
 8001f46:	4413      	add	r3, r2
 8001f48:	b29b      	uxth	r3, r3
 8001f4a:	3b01      	subs	r3, #1
 8001f4c:	b298      	uxth	r0, r3
 8001f4e:	893a      	ldrh	r2, [r7, #8]
 8001f50:	8b3b      	ldrh	r3, [r7, #24]
 8001f52:	4413      	add	r3, r2
 8001f54:	b29b      	uxth	r3, r3
 8001f56:	3b01      	subs	r3, #1
 8001f58:	b29b      	uxth	r3, r3
 8001f5a:	893a      	ldrh	r2, [r7, #8]
 8001f5c:	8979      	ldrh	r1, [r7, #10]
 8001f5e:	9300      	str	r3, [sp, #0]
 8001f60:	4603      	mov	r3, r0
 8001f62:	68f8      	ldr	r0, [r7, #12]
 8001f64:	f7ff fcca 	bl	80018fc <ILI9341_SetAddressWindow>
	ILI9341_Fill(display, color, w * h);
 8001f68:	88fb      	ldrh	r3, [r7, #6]
 8001f6a:	8b3a      	ldrh	r2, [r7, #24]
 8001f6c:	fb02 f303 	mul.w	r3, r2, r3
 8001f70:	461a      	mov	r2, r3
 8001f72:	8bbb      	ldrh	r3, [r7, #28]
 8001f74:	4619      	mov	r1, r3
 8001f76:	68f8      	ldr	r0, [r7, #12]
 8001f78:	f7ff feec 	bl	8001d54 <ILI9341_Fill>
	ILI9341_UNSELECT(display);
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	8a1a      	ldrh	r2, [r3, #16]
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	685b      	ldr	r3, [r3, #4]
 8001f84:	619a      	str	r2, [r3, #24]
 8001f86:	e000      	b.n	8001f8a <ILI9341_FillRectangle+0xb4>
		return;
 8001f88:	bf00      	nop
}
 8001f8a:	3710      	adds	r7, #16
 8001f8c:	46bd      	mov	sp, r7
 8001f8e:	bd80      	pop	{r7, pc}

08001f90 <ILI9341_Rectangle>:

void ILI9341_Rectangle(ILI9341TypeDef *display, uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color)
{
 8001f90:	b580      	push	{r7, lr}
 8001f92:	b086      	sub	sp, #24
 8001f94:	af02      	add	r7, sp, #8
 8001f96:	60f8      	str	r0, [r7, #12]
 8001f98:	4608      	mov	r0, r1
 8001f9a:	4611      	mov	r1, r2
 8001f9c:	461a      	mov	r2, r3
 8001f9e:	4603      	mov	r3, r0
 8001fa0:	817b      	strh	r3, [r7, #10]
 8001fa2:	460b      	mov	r3, r1
 8001fa4:	813b      	strh	r3, [r7, #8]
 8001fa6:	4613      	mov	r3, r2
 8001fa8:	80fb      	strh	r3, [r7, #6]
	ILI9341_FillRectangle(display, x,     y,     w + 1, 1, color);
 8001faa:	88fb      	ldrh	r3, [r7, #6]
 8001fac:	3301      	adds	r3, #1
 8001fae:	b298      	uxth	r0, r3
 8001fb0:	893a      	ldrh	r2, [r7, #8]
 8001fb2:	8979      	ldrh	r1, [r7, #10]
 8001fb4:	8bbb      	ldrh	r3, [r7, #28]
 8001fb6:	9301      	str	r3, [sp, #4]
 8001fb8:	2301      	movs	r3, #1
 8001fba:	9300      	str	r3, [sp, #0]
 8001fbc:	4603      	mov	r3, r0
 8001fbe:	68f8      	ldr	r0, [r7, #12]
 8001fc0:	f7ff ff89 	bl	8001ed6 <ILI9341_FillRectangle>
	ILI9341_FillRectangle(display, x, y + h,     w + 1, 1, color);
 8001fc4:	893a      	ldrh	r2, [r7, #8]
 8001fc6:	8b3b      	ldrh	r3, [r7, #24]
 8001fc8:	4413      	add	r3, r2
 8001fca:	b29a      	uxth	r2, r3
 8001fcc:	88fb      	ldrh	r3, [r7, #6]
 8001fce:	3301      	adds	r3, #1
 8001fd0:	b298      	uxth	r0, r3
 8001fd2:	8979      	ldrh	r1, [r7, #10]
 8001fd4:	8bbb      	ldrh	r3, [r7, #28]
 8001fd6:	9301      	str	r3, [sp, #4]
 8001fd8:	2301      	movs	r3, #1
 8001fda:	9300      	str	r3, [sp, #0]
 8001fdc:	4603      	mov	r3, r0
 8001fde:	68f8      	ldr	r0, [r7, #12]
 8001fe0:	f7ff ff79 	bl	8001ed6 <ILI9341_FillRectangle>
	ILI9341_FillRectangle(display, x,     y,     1,     h, color);
 8001fe4:	893a      	ldrh	r2, [r7, #8]
 8001fe6:	8979      	ldrh	r1, [r7, #10]
 8001fe8:	8bbb      	ldrh	r3, [r7, #28]
 8001fea:	9301      	str	r3, [sp, #4]
 8001fec:	8b3b      	ldrh	r3, [r7, #24]
 8001fee:	9300      	str	r3, [sp, #0]
 8001ff0:	2301      	movs	r3, #1
 8001ff2:	68f8      	ldr	r0, [r7, #12]
 8001ff4:	f7ff ff6f 	bl	8001ed6 <ILI9341_FillRectangle>
	ILI9341_FillRectangle(display, x + w, y,     1,     h, color);
 8001ff8:	897a      	ldrh	r2, [r7, #10]
 8001ffa:	88fb      	ldrh	r3, [r7, #6]
 8001ffc:	4413      	add	r3, r2
 8001ffe:	b299      	uxth	r1, r3
 8002000:	893a      	ldrh	r2, [r7, #8]
 8002002:	8bbb      	ldrh	r3, [r7, #28]
 8002004:	9301      	str	r3, [sp, #4]
 8002006:	8b3b      	ldrh	r3, [r7, #24]
 8002008:	9300      	str	r3, [sp, #0]
 800200a:	2301      	movs	r3, #1
 800200c:	68f8      	ldr	r0, [r7, #12]
 800200e:	f7ff ff62 	bl	8001ed6 <ILI9341_FillRectangle>
}
 8002012:	bf00      	nop
 8002014:	3710      	adds	r7, #16
 8002016:	46bd      	mov	sp, r7
 8002018:	bd80      	pop	{r7, pc}

0800201a <ILI9341_WriteChar>:

static void ILI9341_WriteChar(ILI9341TypeDef *display, uint16_t x, uint16_t y, char ch, FontDef font, uint16_t color, uint16_t bgcolor)
{
 800201a:	b580      	push	{r7, lr}
 800201c:	b08c      	sub	sp, #48	@ 0x30
 800201e:	af02      	add	r7, sp, #8
 8002020:	60f8      	str	r0, [r7, #12]
 8002022:	4608      	mov	r0, r1
 8002024:	4611      	mov	r1, r2
 8002026:	461a      	mov	r2, r3
 8002028:	4603      	mov	r3, r0
 800202a:	817b      	strh	r3, [r7, #10]
 800202c:	460b      	mov	r3, r1
 800202e:	813b      	strh	r3, [r7, #8]
 8002030:	4613      	mov	r3, r2
 8002032:	71fb      	strb	r3, [r7, #7]
    uint32_t i, b, j;

    ILI9341_SetAddressWindow(display, x, y, x + font.width - 1, y + font.height - 1);
 8002034:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8002038:	461a      	mov	r2, r3
 800203a:	897b      	ldrh	r3, [r7, #10]
 800203c:	4413      	add	r3, r2
 800203e:	b29b      	uxth	r3, r3
 8002040:	3b01      	subs	r3, #1
 8002042:	b298      	uxth	r0, r3
 8002044:	f897 3031 	ldrb.w	r3, [r7, #49]	@ 0x31
 8002048:	461a      	mov	r2, r3
 800204a:	893b      	ldrh	r3, [r7, #8]
 800204c:	4413      	add	r3, r2
 800204e:	b29b      	uxth	r3, r3
 8002050:	3b01      	subs	r3, #1
 8002052:	b29b      	uxth	r3, r3
 8002054:	893a      	ldrh	r2, [r7, #8]
 8002056:	8979      	ldrh	r1, [r7, #10]
 8002058:	9300      	str	r3, [sp, #0]
 800205a:	4603      	mov	r3, r0
 800205c:	68f8      	ldr	r0, [r7, #12]
 800205e:	f7ff fc4d 	bl	80018fc <ILI9341_SetAddressWindow>

    for (i = 0; i < font.height; i++) {
 8002062:	2300      	movs	r3, #0
 8002064:	627b      	str	r3, [r7, #36]	@ 0x24
 8002066:	e043      	b.n	80020f0 <ILI9341_WriteChar+0xd6>
        b = font.data[(ch - 32) * font.height + i];
 8002068:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800206a:	79fb      	ldrb	r3, [r7, #7]
 800206c:	3b20      	subs	r3, #32
 800206e:	f897 1031 	ldrb.w	r1, [r7, #49]	@ 0x31
 8002072:	fb01 f303 	mul.w	r3, r1, r3
 8002076:	4619      	mov	r1, r3
 8002078:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800207a:	440b      	add	r3, r1
 800207c:	005b      	lsls	r3, r3, #1
 800207e:	4413      	add	r3, r2
 8002080:	881b      	ldrh	r3, [r3, #0]
 8002082:	61fb      	str	r3, [r7, #28]
        for (j = 0; j < font.width; j++) {
 8002084:	2300      	movs	r3, #0
 8002086:	623b      	str	r3, [r7, #32]
 8002088:	e029      	b.n	80020de <ILI9341_WriteChar+0xc4>
            if ((b << j) & 0x8000) {
 800208a:	69fa      	ldr	r2, [r7, #28]
 800208c:	6a3b      	ldr	r3, [r7, #32]
 800208e:	fa02 f303 	lsl.w	r3, r2, r3
 8002092:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002096:	2b00      	cmp	r3, #0
 8002098:	d00f      	beq.n	80020ba <ILI9341_WriteChar+0xa0>
                uint8_t data[] = { color >> 8, color & 0xFF };
 800209a:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 800209c:	0a1b      	lsrs	r3, r3, #8
 800209e:	b29b      	uxth	r3, r3
 80020a0:	b2db      	uxtb	r3, r3
 80020a2:	763b      	strb	r3, [r7, #24]
 80020a4:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 80020a6:	b2db      	uxtb	r3, r3
 80020a8:	767b      	strb	r3, [r7, #25]
                ILI9341_WriteBuffer(display, data, sizeof(data));
 80020aa:	f107 0318 	add.w	r3, r7, #24
 80020ae:	2202      	movs	r2, #2
 80020b0:	4619      	mov	r1, r3
 80020b2:	68f8      	ldr	r0, [r7, #12]
 80020b4:	f7ff fbf8 	bl	80018a8 <ILI9341_WriteBuffer>
 80020b8:	e00e      	b.n	80020d8 <ILI9341_WriteChar+0xbe>
            } else {
                uint8_t data[] = { bgcolor >> 8, bgcolor & 0xFF };
 80020ba:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 80020bc:	0a1b      	lsrs	r3, r3, #8
 80020be:	b29b      	uxth	r3, r3
 80020c0:	b2db      	uxtb	r3, r3
 80020c2:	753b      	strb	r3, [r7, #20]
 80020c4:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 80020c6:	b2db      	uxtb	r3, r3
 80020c8:	757b      	strb	r3, [r7, #21]
                ILI9341_WriteBuffer(display, data, sizeof(data));
 80020ca:	f107 0314 	add.w	r3, r7, #20
 80020ce:	2202      	movs	r2, #2
 80020d0:	4619      	mov	r1, r3
 80020d2:	68f8      	ldr	r0, [r7, #12]
 80020d4:	f7ff fbe8 	bl	80018a8 <ILI9341_WriteBuffer>
        for (j = 0; j < font.width; j++) {
 80020d8:	6a3b      	ldr	r3, [r7, #32]
 80020da:	3301      	adds	r3, #1
 80020dc:	623b      	str	r3, [r7, #32]
 80020de:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 80020e2:	461a      	mov	r2, r3
 80020e4:	6a3b      	ldr	r3, [r7, #32]
 80020e6:	4293      	cmp	r3, r2
 80020e8:	d3cf      	bcc.n	800208a <ILI9341_WriteChar+0x70>
    for (i = 0; i < font.height; i++) {
 80020ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020ec:	3301      	adds	r3, #1
 80020ee:	627b      	str	r3, [r7, #36]	@ 0x24
 80020f0:	f897 3031 	ldrb.w	r3, [r7, #49]	@ 0x31
 80020f4:	461a      	mov	r2, r3
 80020f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020f8:	4293      	cmp	r3, r2
 80020fa:	d3b5      	bcc.n	8002068 <ILI9341_WriteChar+0x4e>
            }
        }
    }
}
 80020fc:	bf00      	nop
 80020fe:	bf00      	nop
 8002100:	3728      	adds	r7, #40	@ 0x28
 8002102:	46bd      	mov	sp, r7
 8002104:	bd80      	pop	{r7, pc}

08002106 <ILI9341_WriteString>:

void ILI9341_WriteString(ILI9341TypeDef *display, uint16_t x, uint16_t y, const char* str, FontDef font, uint16_t color, uint16_t bgcolor)
{
 8002106:	b5b0      	push	{r4, r5, r7, lr}
 8002108:	b088      	sub	sp, #32
 800210a:	af04      	add	r7, sp, #16
 800210c:	60f8      	str	r0, [r7, #12]
 800210e:	607b      	str	r3, [r7, #4]
 8002110:	460b      	mov	r3, r1
 8002112:	817b      	strh	r3, [r7, #10]
 8002114:	4613      	mov	r3, r2
 8002116:	813b      	strh	r3, [r7, #8]
	ILI9341_SELECT(display);
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	8a1b      	ldrh	r3, [r3, #16]
 800211c:	461a      	mov	r2, r3
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	685b      	ldr	r3, [r3, #4]
 8002122:	0412      	lsls	r2, r2, #16
 8002124:	619a      	str	r2, [r3, #24]

    while (*str) {
 8002126:	e03b      	b.n	80021a0 <ILI9341_WriteString+0x9a>
        if (x + font.width >= display->width) {
 8002128:	897b      	ldrh	r3, [r7, #10]
 800212a:	f897 2020 	ldrb.w	r2, [r7, #32]
 800212e:	4413      	add	r3, r2
 8002130:	68fa      	ldr	r2, [r7, #12]
 8002132:	8ad2      	ldrh	r2, [r2, #22]
 8002134:	4293      	cmp	r3, r2
 8002136:	db17      	blt.n	8002168 <ILI9341_WriteString+0x62>
            x = 0;
 8002138:	2300      	movs	r3, #0
 800213a:	817b      	strh	r3, [r7, #10]
            y += font.height;
 800213c:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8002140:	461a      	mov	r2, r3
 8002142:	893b      	ldrh	r3, [r7, #8]
 8002144:	4413      	add	r3, r2
 8002146:	813b      	strh	r3, [r7, #8]

            if (y + font.height >= display->height)
 8002148:	893b      	ldrh	r3, [r7, #8]
 800214a:	f897 2021 	ldrb.w	r2, [r7, #33]	@ 0x21
 800214e:	4413      	add	r3, r2
 8002150:	68fa      	ldr	r2, [r7, #12]
 8002152:	8b12      	ldrh	r2, [r2, #24]
 8002154:	4293      	cmp	r3, r2
 8002156:	da28      	bge.n	80021aa <ILI9341_WriteString+0xa4>
                break;

            if (*str == ' ') {
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	781b      	ldrb	r3, [r3, #0]
 800215c:	2b20      	cmp	r3, #32
 800215e:	d103      	bne.n	8002168 <ILI9341_WriteString+0x62>
                // skip spaces in the beginning of the new line
                str++;
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	3301      	adds	r3, #1
 8002164:	607b      	str	r3, [r7, #4]
                continue;
 8002166:	e01b      	b.n	80021a0 <ILI9341_WriteString+0x9a>
            }
        }

        ILI9341_WriteChar(display, x, y, *str, font, color, bgcolor);
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	781d      	ldrb	r5, [r3, #0]
 800216c:	893a      	ldrh	r2, [r7, #8]
 800216e:	897c      	ldrh	r4, [r7, #10]
 8002170:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8002172:	9303      	str	r3, [sp, #12]
 8002174:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8002176:	9302      	str	r3, [sp, #8]
 8002178:	466b      	mov	r3, sp
 800217a:	f107 0120 	add.w	r1, r7, #32
 800217e:	c903      	ldmia	r1, {r0, r1}
 8002180:	e883 0003 	stmia.w	r3, {r0, r1}
 8002184:	462b      	mov	r3, r5
 8002186:	4621      	mov	r1, r4
 8002188:	68f8      	ldr	r0, [r7, #12]
 800218a:	f7ff ff46 	bl	800201a <ILI9341_WriteChar>
        x += font.width;
 800218e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002192:	461a      	mov	r2, r3
 8002194:	897b      	ldrh	r3, [r7, #10]
 8002196:	4413      	add	r3, r2
 8002198:	817b      	strh	r3, [r7, #10]
        str++;
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	3301      	adds	r3, #1
 800219e:	607b      	str	r3, [r7, #4]
    while (*str) {
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	781b      	ldrb	r3, [r3, #0]
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d1bf      	bne.n	8002128 <ILI9341_WriteString+0x22>
 80021a8:	e000      	b.n	80021ac <ILI9341_WriteString+0xa6>
                break;
 80021aa:	bf00      	nop
    }

	ILI9341_UNSELECT(display);
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	8a1a      	ldrh	r2, [r3, #16]
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	685b      	ldr	r3, [r3, #4]
 80021b4:	619a      	str	r2, [r3, #24]
}
 80021b6:	bf00      	nop
 80021b8:	3710      	adds	r7, #16
 80021ba:	46bd      	mov	sp, r7
 80021bc:	bdb0      	pop	{r4, r5, r7, pc}
	...

080021c0 <HAL_I2S_RxCpltCallback>:
  * @brief  I2S 接收全滿回呼函式
  * @param  hi2s: I2S handle
  * @retval None
  */
void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80021c0:	b580      	push	{r7, lr}
 80021c2:	b082      	sub	sp, #8
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	6078      	str	r0, [r7, #4]
  // DMA 已經填充完緩衝區的後半部分
  // 在這裡呼叫語音辨識函式，處理後半段的資料
  // speech_recognition_run(&i2s_rx_buffer[I2S_BUFFER_SIZE / 2], I2S_BUFFER_SIZE / 2);
  buffer_is_ready = 2; // 示意：設定旗標
 80021c8:	4b1f      	ldr	r3, [pc, #124]	@ (8002248 <HAL_I2S_RxCpltCallback+0x88>)
 80021ca:	2202      	movs	r2, #2
 80021cc:	601a      	str	r2, [r3, #0]
	if(hi2s==&hi2s2){
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	4a1e      	ldr	r2, [pc, #120]	@ (800224c <HAL_I2S_RxCpltCallback+0x8c>)
 80021d2:	4293      	cmp	r3, r2
 80021d4:	d133      	bne.n	800223e <HAL_I2S_RxCpltCallback+0x7e>
		cb_cnt++;//回调次数计数
 80021d6:	4b1e      	ldr	r3, [pc, #120]	@ (8002250 <HAL_I2S_RxCpltCallback+0x90>)
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	3301      	adds	r3, #1
 80021dc:	4a1c      	ldr	r2, [pc, #112]	@ (8002250 <HAL_I2S_RxCpltCallback+0x90>)
 80021de:	6013      	str	r3, [r2, #0]
		//将两个32整型合并为一个
		//dat32 example: 0000fffb 00004f00
		//printf("%x\r\n",data_i2s[0]<<8);
		//printf("%x\r\n",data_i2s[1]>>8);

		val24=(i2s_rx_buffer[0]<<8)+(i2s_rx_buffer[1]>>8);
 80021e0:	4b1c      	ldr	r3, [pc, #112]	@ (8002254 <HAL_I2S_RxCpltCallback+0x94>)
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	021a      	lsls	r2, r3, #8
 80021e6:	4b1b      	ldr	r3, [pc, #108]	@ (8002254 <HAL_I2S_RxCpltCallback+0x94>)
 80021e8:	685b      	ldr	r3, [r3, #4]
 80021ea:	0a1b      	lsrs	r3, r3, #8
 80021ec:	4413      	add	r3, r2
 80021ee:	4a1a      	ldr	r2, [pc, #104]	@ (8002258 <HAL_I2S_RxCpltCallback+0x98>)
 80021f0:	6013      	str	r3, [r2, #0]
		//printf("%d\r\n",val24);
      //将24位有符号整型扩展到32位
		if(val24 & 0x800000)
 80021f2:	4b19      	ldr	r3, [pc, #100]	@ (8002258 <HAL_I2S_RxCpltCallback+0x98>)
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d007      	beq.n	800220e <HAL_I2S_RxCpltCallback+0x4e>
		{//negative
			val32=0xff000000 | val24;
 80021fe:	4b16      	ldr	r3, [pc, #88]	@ (8002258 <HAL_I2S_RxCpltCallback+0x98>)
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002206:	461a      	mov	r2, r3
 8002208:	4b14      	ldr	r3, [pc, #80]	@ (800225c <HAL_I2S_RxCpltCallback+0x9c>)
 800220a:	601a      	str	r2, [r3, #0]
 800220c:	e004      	b.n	8002218 <HAL_I2S_RxCpltCallback+0x58>
		}
		else
		{//positive
			val32=val24;
 800220e:	4b12      	ldr	r3, [pc, #72]	@ (8002258 <HAL_I2S_RxCpltCallback+0x98>)
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	461a      	mov	r2, r3
 8002214:	4b11      	ldr	r3, [pc, #68]	@ (800225c <HAL_I2S_RxCpltCallback+0x9c>)
 8002216:	601a      	str	r2, [r3, #0]
		}
		//以采样频率的十分之一，串口发送采样值
		if(cb_cnt%10==0)
 8002218:	4b0d      	ldr	r3, [pc, #52]	@ (8002250 <HAL_I2S_RxCpltCallback+0x90>)
 800221a:	6819      	ldr	r1, [r3, #0]
 800221c:	4b10      	ldr	r3, [pc, #64]	@ (8002260 <HAL_I2S_RxCpltCallback+0xa0>)
 800221e:	fba3 2301 	umull	r2, r3, r3, r1
 8002222:	08da      	lsrs	r2, r3, #3
 8002224:	4613      	mov	r3, r2
 8002226:	009b      	lsls	r3, r3, #2
 8002228:	4413      	add	r3, r2
 800222a:	005b      	lsls	r3, r3, #1
 800222c:	1aca      	subs	r2, r1, r3
 800222e:	2a00      	cmp	r2, #0
 8002230:	d105      	bne.n	800223e <HAL_I2S_RxCpltCallback+0x7e>
			printf("%d\r\n",val32);
 8002232:	4b0a      	ldr	r3, [pc, #40]	@ (800225c <HAL_I2S_RxCpltCallback+0x9c>)
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	4619      	mov	r1, r3
 8002238:	480a      	ldr	r0, [pc, #40]	@ (8002264 <HAL_I2S_RxCpltCallback+0xa4>)
 800223a:	f00d ff9b 	bl	8010174 <iprintf>
	}
}
 800223e:	bf00      	nop
 8002240:	3708      	adds	r7, #8
 8002242:	46bd      	mov	sp, r7
 8002244:	bd80      	pop	{r7, pc}
 8002246:	bf00      	nop
 8002248:	2000f5c4 	.word	0x2000f5c4
 800224c:	2000d3c8 	.word	0x2000d3c8
 8002250:	2000f5c8 	.word	0x2000f5c8
 8002254:	2000f5b4 	.word	0x2000f5b4
 8002258:	2000f5cc 	.word	0x2000f5cc
 800225c:	2000f5d0 	.word	0x2000f5d0
 8002260:	cccccccd 	.word	0xcccccccd
 8002264:	08013a00 	.word	0x08013a00

08002268 <HAL_UART_RxCpltCallback>:
// --- AI 推論相關變數 ---
// 這個變數將連接 main.c 和 app_x-cube-ai.c
int score_from_uart = 0;

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002268:	b580      	push	{r7, lr}
 800226a:	b082      	sub	sp, #8
 800226c:	af00      	add	r7, sp, #0
 800226e:	6078      	str	r0, [r7, #4]
  // 確保是我們想要的 UART (例如 USART2) 觸發的中斷
  if (huart->Instance == USART6)
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	4a1b      	ldr	r2, [pc, #108]	@ (80022e4 <HAL_UART_RxCpltCallback+0x7c>)
 8002276:	4293      	cmp	r3, r2
 8002278:	d130      	bne.n	80022dc <HAL_UART_RxCpltCallback+0x74>
  {
    // 檢查是否是換行符 (Enter 鍵)，或者緩衝區是否已滿
    if (rx_byte == '\r' || rx_byte == '\n' || uart_rx_index >= (UART_RX_BUFFER_SIZE - 1))
 800227a:	4b1b      	ldr	r3, [pc, #108]	@ (80022e8 <HAL_UART_RxCpltCallback+0x80>)
 800227c:	781b      	ldrb	r3, [r3, #0]
 800227e:	2b0d      	cmp	r3, #13
 8002280:	d008      	beq.n	8002294 <HAL_UART_RxCpltCallback+0x2c>
 8002282:	4b19      	ldr	r3, [pc, #100]	@ (80022e8 <HAL_UART_RxCpltCallback+0x80>)
 8002284:	781b      	ldrb	r3, [r3, #0]
 8002286:	2b0a      	cmp	r3, #10
 8002288:	d004      	beq.n	8002294 <HAL_UART_RxCpltCallback+0x2c>
 800228a:	4b18      	ldr	r3, [pc, #96]	@ (80022ec <HAL_UART_RxCpltCallback+0x84>)
 800228c:	781b      	ldrb	r3, [r3, #0]
 800228e:	b2db      	uxtb	r3, r3
 8002290:	2b08      	cmp	r3, #8
 8002292:	d912      	bls.n	80022ba <HAL_UART_RxCpltCallback+0x52>
    {
      // 1. 在字串末尾加上結束符 '\0'
      uart_rx_buffer[uart_rx_index] = '\0';
 8002294:	4b15      	ldr	r3, [pc, #84]	@ (80022ec <HAL_UART_RxCpltCallback+0x84>)
 8002296:	781b      	ldrb	r3, [r3, #0]
 8002298:	b2db      	uxtb	r3, r3
 800229a:	461a      	mov	r2, r3
 800229c:	4b14      	ldr	r3, [pc, #80]	@ (80022f0 <HAL_UART_RxCpltCallback+0x88>)
 800229e:	2100      	movs	r1, #0
 80022a0:	5499      	strb	r1, [r3, r2]

      // 2. 設定新數據旗標，通知主迴圈處理
      if (uart_rx_index > 0) // 確保不是空指令
 80022a2:	4b12      	ldr	r3, [pc, #72]	@ (80022ec <HAL_UART_RxCpltCallback+0x84>)
 80022a4:	781b      	ldrb	r3, [r3, #0]
 80022a6:	b2db      	uxtb	r3, r3
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d002      	beq.n	80022b2 <HAL_UART_RxCpltCallback+0x4a>
      {
        new_data_received = true;
 80022ac:	4b11      	ldr	r3, [pc, #68]	@ (80022f4 <HAL_UART_RxCpltCallback+0x8c>)
 80022ae:	2201      	movs	r2, #1
 80022b0:	701a      	strb	r2, [r3, #0]
      }

      // 3. 重置索引，準備下一次接收
      uart_rx_index = 0;
 80022b2:	4b0e      	ldr	r3, [pc, #56]	@ (80022ec <HAL_UART_RxCpltCallback+0x84>)
 80022b4:	2200      	movs	r2, #0
 80022b6:	701a      	strb	r2, [r3, #0]
 80022b8:	e00b      	b.n	80022d2 <HAL_UART_RxCpltCallback+0x6a>
    }
    else
    {
      // 將收到的位元組存入緩衝區，並移動索引
      uart_rx_buffer[uart_rx_index++] = rx_byte;
 80022ba:	4b0c      	ldr	r3, [pc, #48]	@ (80022ec <HAL_UART_RxCpltCallback+0x84>)
 80022bc:	781b      	ldrb	r3, [r3, #0]
 80022be:	b2db      	uxtb	r3, r3
 80022c0:	1c5a      	adds	r2, r3, #1
 80022c2:	b2d1      	uxtb	r1, r2
 80022c4:	4a09      	ldr	r2, [pc, #36]	@ (80022ec <HAL_UART_RxCpltCallback+0x84>)
 80022c6:	7011      	strb	r1, [r2, #0]
 80022c8:	461a      	mov	r2, r3
 80022ca:	4b07      	ldr	r3, [pc, #28]	@ (80022e8 <HAL_UART_RxCpltCallback+0x80>)
 80022cc:	7819      	ldrb	r1, [r3, #0]
 80022ce:	4b08      	ldr	r3, [pc, #32]	@ (80022f0 <HAL_UART_RxCpltCallback+0x88>)
 80022d0:	5499      	strb	r1, [r3, r2]
    }

    // !!! 非常重要：重新啟動 UART 中斷接收，準備接收下一個位元組 !!!
    HAL_UART_Receive_IT(&huart6, &rx_byte, 1);
 80022d2:	2201      	movs	r2, #1
 80022d4:	4904      	ldr	r1, [pc, #16]	@ (80022e8 <HAL_UART_RxCpltCallback+0x80>)
 80022d6:	4808      	ldr	r0, [pc, #32]	@ (80022f8 <HAL_UART_RxCpltCallback+0x90>)
 80022d8:	f008 f849 	bl	800a36e <HAL_UART_Receive_IT>
  }
}
 80022dc:	bf00      	nop
 80022de:	3708      	adds	r7, #8
 80022e0:	46bd      	mov	sp, r7
 80022e2:	bd80      	pop	{r7, pc}
 80022e4:	40011400 	.word	0x40011400
 80022e8:	2000f5de 	.word	0x2000f5de
 80022ec:	2000f5df 	.word	0x2000f5df
 80022f0:	2000f5d4 	.word	0x2000f5d4
 80022f4:	2000f5e0 	.word	0x2000f5e0
 80022f8:	20016158 	.word	0x20016158

080022fc <HAL_TIM_PeriodElapsedCallback>:

uint16_t txData;
int txIndex;
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80022fc:	b580      	push	{r7, lr}
 80022fe:	b082      	sub	sp, #8
 8002300:	af00      	add	r7, sp, #0
 8002302:	6078      	str	r0, [r7, #4]
  if(htim->Instance == TIM2)
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800230c:	d125      	bne.n	800235a <HAL_TIM_PeriodElapsedCallback+0x5e>
  {
    txData = ((uint16_t)helloworld[txIndex+1] << 8) | helloworld[txIndex];
 800230e:	4b1e      	ldr	r3, [pc, #120]	@ (8002388 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	3301      	adds	r3, #1
 8002314:	4a1d      	ldr	r2, [pc, #116]	@ (800238c <HAL_TIM_PeriodElapsedCallback+0x90>)
 8002316:	5cd3      	ldrb	r3, [r2, r3]
 8002318:	b21b      	sxth	r3, r3
 800231a:	021b      	lsls	r3, r3, #8
 800231c:	b21a      	sxth	r2, r3
 800231e:	4b1a      	ldr	r3, [pc, #104]	@ (8002388 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	491a      	ldr	r1, [pc, #104]	@ (800238c <HAL_TIM_PeriodElapsedCallback+0x90>)
 8002324:	5ccb      	ldrb	r3, [r1, r3]
 8002326:	b21b      	sxth	r3, r3
 8002328:	4313      	orrs	r3, r2
 800232a:	b21b      	sxth	r3, r3
 800232c:	b29a      	uxth	r2, r3
 800232e:	4b18      	ldr	r3, [pc, #96]	@ (8002390 <HAL_TIM_PeriodElapsedCallback+0x94>)
 8002330:	801a      	strh	r2, [r3, #0]
    txIndex = txIndex + 2;
 8002332:	4b15      	ldr	r3, [pc, #84]	@ (8002388 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	3302      	adds	r3, #2
 8002338:	4a13      	ldr	r2, [pc, #76]	@ (8002388 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 800233a:	6013      	str	r3, [r2, #0]
    if(txIndex>53456) txIndex = 0;
 800233c:	4b12      	ldr	r3, [pc, #72]	@ (8002388 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	f24d 02d0 	movw	r2, #53456	@ 0xd0d0
 8002344:	4293      	cmp	r3, r2
 8002346:	dd02      	ble.n	800234e <HAL_TIM_PeriodElapsedCallback+0x52>
 8002348:	4b0f      	ldr	r3, [pc, #60]	@ (8002388 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 800234a:	2200      	movs	r2, #0
 800234c:	601a      	str	r2, [r3, #0]
    HAL_I2S_Transmit(&hi2s3, &txData, 1, 10);
 800234e:	230a      	movs	r3, #10
 8002350:	2201      	movs	r2, #1
 8002352:	490f      	ldr	r1, [pc, #60]	@ (8002390 <HAL_TIM_PeriodElapsedCallback+0x94>)
 8002354:	480f      	ldr	r0, [pc, #60]	@ (8002394 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8002356:	f004 ff9f 	bl	8007298 <HAL_I2S_Transmit>
  }

	if(htim->Instance == TIM10)
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	4a0e      	ldr	r2, [pc, #56]	@ (8002398 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8002360:	4293      	cmp	r3, r2
 8002362:	d10c      	bne.n	800237e <HAL_TIM_PeriodElapsedCallback+0x82>
	{
		if (adc_available) {
 8002364:	4b0d      	ldr	r3, [pc, #52]	@ (800239c <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8002366:	781b      	ldrb	r3, [r3, #0]
 8002368:	b2db      	uxtb	r3, r3
 800236a:	2b00      	cmp	r3, #0
 800236c:	d007      	beq.n	800237e <HAL_TIM_PeriodElapsedCallback+0x82>
			adc_available = 0;
 800236e:	4b0b      	ldr	r3, [pc, #44]	@ (800239c <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8002370:	2200      	movs	r2, #0
 8002372:	701a      	strb	r2, [r3, #0]
			HAL_ADC_Start_DMA(&hadc1, (uint32_t*)&adc_data, 2);
 8002374:	2202      	movs	r2, #2
 8002376:	490a      	ldr	r1, [pc, #40]	@ (80023a0 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 8002378:	480a      	ldr	r0, [pc, #40]	@ (80023a4 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 800237a:	f003 fb31 	bl	80059e0 <HAL_ADC_Start_DMA>
		}
	}
}
 800237e:	bf00      	nop
 8002380:	3708      	adds	r7, #8
 8002382:	46bd      	mov	sp, r7
 8002384:	bd80      	pop	{r7, pc}
 8002386:	bf00      	nop
 8002388:	2000f5e4 	.word	0x2000f5e4
 800238c:	20000010 	.word	0x20000010
 8002390:	2000f5e2 	.word	0x2000f5e2
 8002394:	2000d410 	.word	0x2000d410
 8002398:	40014400 	.word	0x40014400
 800239c:	2000d0e1 	.word	0x2000d0e1
 80023a0:	2000f5f0 	.word	0x2000f5f0
 80023a4:	2000d318 	.word	0x2000d318

080023a8 <HAL_ADC_ConvCpltCallback>:


void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80023a8:	b580      	push	{r7, lr}
 80023aa:	b084      	sub	sp, #16
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	6078      	str	r0, [r7, #4]
    if(hadc->Instance == ADC1)
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	4a91      	ldr	r2, [pc, #580]	@ (80025fc <HAL_ADC_ConvCpltCallback+0x254>)
 80023b6:	4293      	cmp	r3, r2
 80023b8:	f040 81c2 	bne.w	8002740 <HAL_ADC_ConvCpltCallback+0x398>
    {
    	if (adc_reset_cyccnt) {
 80023bc:	4b90      	ldr	r3, [pc, #576]	@ (8002600 <HAL_ADC_ConvCpltCallback+0x258>)
 80023be:	781b      	ldrb	r3, [r3, #0]
 80023c0:	b2db      	uxtb	r3, r3
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d00b      	beq.n	80023de <HAL_ADC_ConvCpltCallback+0x36>
    		DWT->CYCCNT = 0U;
 80023c6:	4b8f      	ldr	r3, [pc, #572]	@ (8002604 <HAL_ADC_ConvCpltCallback+0x25c>)
 80023c8:	2200      	movs	r2, #0
 80023ca:	605a      	str	r2, [r3, #4]
    		adc0_time_delta = 0;
 80023cc:	4b8e      	ldr	r3, [pc, #568]	@ (8002608 <HAL_ADC_ConvCpltCallback+0x260>)
 80023ce:	2200      	movs	r2, #0
 80023d0:	601a      	str	r2, [r3, #0]
    		adc1_time_delta = 0;
 80023d2:	4b8e      	ldr	r3, [pc, #568]	@ (800260c <HAL_ADC_ConvCpltCallback+0x264>)
 80023d4:	2200      	movs	r2, #0
 80023d6:	601a      	str	r2, [r3, #0]
    		adc_reset_cyccnt = 0;
 80023d8:	4b89      	ldr	r3, [pc, #548]	@ (8002600 <HAL_ADC_ConvCpltCallback+0x258>)
 80023da:	2200      	movs	r2, #0
 80023dc:	701a      	strb	r2, [r3, #0]
    	}

    	if (!adc0_filled) {
 80023de:	4b8c      	ldr	r3, [pc, #560]	@ (8002610 <HAL_ADC_ConvCpltCallback+0x268>)
 80023e0:	781b      	ldrb	r3, [r3, #0]
 80023e2:	b2db      	uxtb	r3, r3
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	f040 80a4 	bne.w	8002532 <HAL_ADC_ConvCpltCallback+0x18a>
			adc0_time[adc0_length] = (DWT->CYCCNT - adc0_time_delta) / (SystemCoreClock / 1000000);
 80023ea:	4b86      	ldr	r3, [pc, #536]	@ (8002604 <HAL_ADC_ConvCpltCallback+0x25c>)
 80023ec:	685a      	ldr	r2, [r3, #4]
 80023ee:	4b86      	ldr	r3, [pc, #536]	@ (8002608 <HAL_ADC_ConvCpltCallback+0x260>)
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	1ad1      	subs	r1, r2, r3
 80023f4:	4b87      	ldr	r3, [pc, #540]	@ (8002614 <HAL_ADC_ConvCpltCallback+0x26c>)
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	4a87      	ldr	r2, [pc, #540]	@ (8002618 <HAL_ADC_ConvCpltCallback+0x270>)
 80023fa:	fba2 2303 	umull	r2, r3, r2, r3
 80023fe:	0c9a      	lsrs	r2, r3, #18
 8002400:	4b86      	ldr	r3, [pc, #536]	@ (800261c <HAL_ADC_ConvCpltCallback+0x274>)
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	fbb1 f2f2 	udiv	r2, r1, r2
 8002408:	4985      	ldr	r1, [pc, #532]	@ (8002620 <HAL_ADC_ConvCpltCallback+0x278>)
 800240a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			adc0[adc0_length] = adc_data[0] * ADC_CHANNEL0_SCALE;
 800240e:	4b83      	ldr	r3, [pc, #524]	@ (800261c <HAL_ADC_ConvCpltCallback+0x274>)
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	4a84      	ldr	r2, [pc, #528]	@ (8002624 <HAL_ADC_ConvCpltCallback+0x27c>)
 8002414:	8812      	ldrh	r2, [r2, #0]
 8002416:	b291      	uxth	r1, r2
 8002418:	4a83      	ldr	r2, [pc, #524]	@ (8002628 <HAL_ADC_ConvCpltCallback+0x280>)
 800241a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

			if (adc_max[0] < adc0[adc0_length])
 800241e:	4b83      	ldr	r3, [pc, #524]	@ (800262c <HAL_ADC_ConvCpltCallback+0x284>)
 8002420:	881b      	ldrh	r3, [r3, #0]
 8002422:	b29a      	uxth	r2, r3
 8002424:	4b7d      	ldr	r3, [pc, #500]	@ (800261c <HAL_ADC_ConvCpltCallback+0x274>)
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	497f      	ldr	r1, [pc, #508]	@ (8002628 <HAL_ADC_ConvCpltCallback+0x280>)
 800242a:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800242e:	429a      	cmp	r2, r3
 8002430:	d206      	bcs.n	8002440 <HAL_ADC_ConvCpltCallback+0x98>
				adc_max[0] = adc0[adc0_length];
 8002432:	4b7a      	ldr	r3, [pc, #488]	@ (800261c <HAL_ADC_ConvCpltCallback+0x274>)
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	4a7c      	ldr	r2, [pc, #496]	@ (8002628 <HAL_ADC_ConvCpltCallback+0x280>)
 8002438:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 800243c:	4b7b      	ldr	r3, [pc, #492]	@ (800262c <HAL_ADC_ConvCpltCallback+0x284>)
 800243e:	801a      	strh	r2, [r3, #0]

			if (adc_min[0] > adc0[adc0_length])
 8002440:	4b7b      	ldr	r3, [pc, #492]	@ (8002630 <HAL_ADC_ConvCpltCallback+0x288>)
 8002442:	881b      	ldrh	r3, [r3, #0]
 8002444:	b29a      	uxth	r2, r3
 8002446:	4b75      	ldr	r3, [pc, #468]	@ (800261c <HAL_ADC_ConvCpltCallback+0x274>)
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	4977      	ldr	r1, [pc, #476]	@ (8002628 <HAL_ADC_ConvCpltCallback+0x280>)
 800244c:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8002450:	429a      	cmp	r2, r3
 8002452:	d906      	bls.n	8002462 <HAL_ADC_ConvCpltCallback+0xba>
				adc_min[0] = adc0[adc0_length];
 8002454:	4b71      	ldr	r3, [pc, #452]	@ (800261c <HAL_ADC_ConvCpltCallback+0x274>)
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	4a73      	ldr	r2, [pc, #460]	@ (8002628 <HAL_ADC_ConvCpltCallback+0x280>)
 800245a:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 800245e:	4b74      	ldr	r3, [pc, #464]	@ (8002630 <HAL_ADC_ConvCpltCallback+0x288>)
 8002460:	801a      	strh	r2, [r3, #0]

			if (adc0_length < (ADC_BUFFER_SIZE - 1)) {
 8002462:	4b6e      	ldr	r3, [pc, #440]	@ (800261c <HAL_ADC_ConvCpltCallback+0x274>)
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	f240 72fe 	movw	r2, #2046	@ 0x7fe
 800246a:	4293      	cmp	r3, r2
 800246c:	d85e      	bhi.n	800252c <HAL_ADC_ConvCpltCallback+0x184>

				uint8_t trigger = 0;
 800246e:	2300      	movs	r3, #0
 8002470:	73fb      	strb	r3, [r7, #15]

				if (trigger_mode == 0)
 8002472:	4b70      	ldr	r3, [pc, #448]	@ (8002634 <HAL_ADC_ConvCpltCallback+0x28c>)
 8002474:	781b      	ldrb	r3, [r3, #0]
 8002476:	2b00      	cmp	r3, #0
 8002478:	d114      	bne.n	80024a4 <HAL_ADC_ConvCpltCallback+0xfc>
					trigger = (adc0_prev < trigger0_value && adc0[adc0_length] > trigger0_value);
 800247a:	4b6f      	ldr	r3, [pc, #444]	@ (8002638 <HAL_ADC_ConvCpltCallback+0x290>)
 800247c:	881b      	ldrh	r3, [r3, #0]
 800247e:	b29a      	uxth	r2, r3
 8002480:	4b6e      	ldr	r3, [pc, #440]	@ (800263c <HAL_ADC_ConvCpltCallback+0x294>)
 8002482:	881b      	ldrh	r3, [r3, #0]
 8002484:	429a      	cmp	r2, r3
 8002486:	d20a      	bcs.n	800249e <HAL_ADC_ConvCpltCallback+0xf6>
 8002488:	4b64      	ldr	r3, [pc, #400]	@ (800261c <HAL_ADC_ConvCpltCallback+0x274>)
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	4a66      	ldr	r2, [pc, #408]	@ (8002628 <HAL_ADC_ConvCpltCallback+0x280>)
 800248e:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8002492:	4b6a      	ldr	r3, [pc, #424]	@ (800263c <HAL_ADC_ConvCpltCallback+0x294>)
 8002494:	881b      	ldrh	r3, [r3, #0]
 8002496:	429a      	cmp	r2, r3
 8002498:	d901      	bls.n	800249e <HAL_ADC_ConvCpltCallback+0xf6>
 800249a:	2301      	movs	r3, #1
 800249c:	e000      	b.n	80024a0 <HAL_ADC_ConvCpltCallback+0xf8>
 800249e:	2300      	movs	r3, #0
 80024a0:	73fb      	strb	r3, [r7, #15]
 80024a2:	e013      	b.n	80024cc <HAL_ADC_ConvCpltCallback+0x124>
				else
					trigger = (adc0_prev > trigger0_value && adc0[adc0_length] < trigger0_value);
 80024a4:	4b64      	ldr	r3, [pc, #400]	@ (8002638 <HAL_ADC_ConvCpltCallback+0x290>)
 80024a6:	881b      	ldrh	r3, [r3, #0]
 80024a8:	b29a      	uxth	r2, r3
 80024aa:	4b64      	ldr	r3, [pc, #400]	@ (800263c <HAL_ADC_ConvCpltCallback+0x294>)
 80024ac:	881b      	ldrh	r3, [r3, #0]
 80024ae:	429a      	cmp	r2, r3
 80024b0:	d90a      	bls.n	80024c8 <HAL_ADC_ConvCpltCallback+0x120>
 80024b2:	4b5a      	ldr	r3, [pc, #360]	@ (800261c <HAL_ADC_ConvCpltCallback+0x274>)
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	4a5c      	ldr	r2, [pc, #368]	@ (8002628 <HAL_ADC_ConvCpltCallback+0x280>)
 80024b8:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 80024bc:	4b5f      	ldr	r3, [pc, #380]	@ (800263c <HAL_ADC_ConvCpltCallback+0x294>)
 80024be:	881b      	ldrh	r3, [r3, #0]
 80024c0:	429a      	cmp	r2, r3
 80024c2:	d201      	bcs.n	80024c8 <HAL_ADC_ConvCpltCallback+0x120>
 80024c4:	2301      	movs	r3, #1
 80024c6:	e000      	b.n	80024ca <HAL_ADC_ConvCpltCallback+0x122>
 80024c8:	2300      	movs	r3, #0
 80024ca:	73fb      	strb	r3, [r7, #15]

				if (trigger && adc0_length != 0) {
 80024cc:	7bfb      	ldrb	r3, [r7, #15]
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d021      	beq.n	8002516 <HAL_ADC_ConvCpltCallback+0x16e>
 80024d2:	4b52      	ldr	r3, [pc, #328]	@ (800261c <HAL_ADC_ConvCpltCallback+0x274>)
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d01d      	beq.n	8002516 <HAL_ADC_ConvCpltCallback+0x16e>
					if (!event_trigger0_detected) {
 80024da:	4b59      	ldr	r3, [pc, #356]	@ (8002640 <HAL_ADC_ConvCpltCallback+0x298>)
 80024dc:	781b      	ldrb	r3, [r3, #0]
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d10a      	bne.n	80024f8 <HAL_ADC_ConvCpltCallback+0x150>
						adc0_length = 0;
 80024e2:	4b4e      	ldr	r3, [pc, #312]	@ (800261c <HAL_ADC_ConvCpltCallback+0x274>)
 80024e4:	2200      	movs	r2, #0
 80024e6:	601a      	str	r2, [r3, #0]
						adc0_time_delta = DWT->CYCCNT;
 80024e8:	4b46      	ldr	r3, [pc, #280]	@ (8002604 <HAL_ADC_ConvCpltCallback+0x25c>)
 80024ea:	685b      	ldr	r3, [r3, #4]
 80024ec:	4a46      	ldr	r2, [pc, #280]	@ (8002608 <HAL_ADC_ConvCpltCallback+0x260>)
 80024ee:	6013      	str	r3, [r2, #0]
						event_trigger0_detected = 1;
 80024f0:	4b53      	ldr	r3, [pc, #332]	@ (8002640 <HAL_ADC_ConvCpltCallback+0x298>)
 80024f2:	2201      	movs	r2, #1
 80024f4:	701a      	strb	r2, [r3, #0]
 80024f6:	e00e      	b.n	8002516 <HAL_ADC_ConvCpltCallback+0x16e>
					} else if (!adc_period0_detected) {
 80024f8:	4b52      	ldr	r3, [pc, #328]	@ (8002644 <HAL_ADC_ConvCpltCallback+0x29c>)
 80024fa:	781b      	ldrb	r3, [r3, #0]
 80024fc:	b2db      	uxtb	r3, r3
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d109      	bne.n	8002516 <HAL_ADC_ConvCpltCallback+0x16e>
						adc_period[0] = adc0_time[adc0_length];
 8002502:	4b46      	ldr	r3, [pc, #280]	@ (800261c <HAL_ADC_ConvCpltCallback+0x274>)
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	4a46      	ldr	r2, [pc, #280]	@ (8002620 <HAL_ADC_ConvCpltCallback+0x278>)
 8002508:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800250c:	4a4e      	ldr	r2, [pc, #312]	@ (8002648 <HAL_ADC_ConvCpltCallback+0x2a0>)
 800250e:	6013      	str	r3, [r2, #0]
						adc_period0_detected = 1;
 8002510:	4b4c      	ldr	r3, [pc, #304]	@ (8002644 <HAL_ADC_ConvCpltCallback+0x29c>)
 8002512:	2201      	movs	r2, #1
 8002514:	701a      	strb	r2, [r3, #0]
					}
				}

				adc0_prev = adc_data[0] * ADC_CHANNEL0_SCALE;
 8002516:	4b43      	ldr	r3, [pc, #268]	@ (8002624 <HAL_ADC_ConvCpltCallback+0x27c>)
 8002518:	881b      	ldrh	r3, [r3, #0]
 800251a:	b29a      	uxth	r2, r3
 800251c:	4b46      	ldr	r3, [pc, #280]	@ (8002638 <HAL_ADC_ConvCpltCallback+0x290>)
 800251e:	801a      	strh	r2, [r3, #0]
				adc0_length++;
 8002520:	4b3e      	ldr	r3, [pc, #248]	@ (800261c <HAL_ADC_ConvCpltCallback+0x274>)
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	3301      	adds	r3, #1
 8002526:	4a3d      	ldr	r2, [pc, #244]	@ (800261c <HAL_ADC_ConvCpltCallback+0x274>)
 8002528:	6013      	str	r3, [r2, #0]
 800252a:	e002      	b.n	8002532 <HAL_ADC_ConvCpltCallback+0x18a>

			} else
				adc0_filled = 1;
 800252c:	4b38      	ldr	r3, [pc, #224]	@ (8002610 <HAL_ADC_ConvCpltCallback+0x268>)
 800252e:	2201      	movs	r2, #1
 8002530:	701a      	strb	r2, [r3, #0]
    	}

    	if (!adc1_filled) {
 8002532:	4b46      	ldr	r3, [pc, #280]	@ (800264c <HAL_ADC_ConvCpltCallback+0x2a4>)
 8002534:	781b      	ldrb	r3, [r3, #0]
 8002536:	b2db      	uxtb	r3, r3
 8002538:	2b00      	cmp	r3, #0
 800253a:	f040 80da 	bne.w	80026f2 <HAL_ADC_ConvCpltCallback+0x34a>
			adc1_time[adc1_length] = (DWT->CYCCNT - adc1_time_delta) / (SystemCoreClock / 1000000);
 800253e:	4b31      	ldr	r3, [pc, #196]	@ (8002604 <HAL_ADC_ConvCpltCallback+0x25c>)
 8002540:	685a      	ldr	r2, [r3, #4]
 8002542:	4b32      	ldr	r3, [pc, #200]	@ (800260c <HAL_ADC_ConvCpltCallback+0x264>)
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	1ad1      	subs	r1, r2, r3
 8002548:	4b32      	ldr	r3, [pc, #200]	@ (8002614 <HAL_ADC_ConvCpltCallback+0x26c>)
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	4a32      	ldr	r2, [pc, #200]	@ (8002618 <HAL_ADC_ConvCpltCallback+0x270>)
 800254e:	fba2 2303 	umull	r2, r3, r2, r3
 8002552:	0c9a      	lsrs	r2, r3, #18
 8002554:	4b3e      	ldr	r3, [pc, #248]	@ (8002650 <HAL_ADC_ConvCpltCallback+0x2a8>)
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	fbb1 f2f2 	udiv	r2, r1, r2
 800255c:	493d      	ldr	r1, [pc, #244]	@ (8002654 <HAL_ADC_ConvCpltCallback+0x2ac>)
 800255e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			adc1[adc1_length] = adc_data[1] * ADC_CHANNEL1_SCALE;
 8002562:	4b3b      	ldr	r3, [pc, #236]	@ (8002650 <HAL_ADC_ConvCpltCallback+0x2a8>)
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	4a2f      	ldr	r2, [pc, #188]	@ (8002624 <HAL_ADC_ConvCpltCallback+0x27c>)
 8002568:	8852      	ldrh	r2, [r2, #2]
 800256a:	b291      	uxth	r1, r2
 800256c:	4a3a      	ldr	r2, [pc, #232]	@ (8002658 <HAL_ADC_ConvCpltCallback+0x2b0>)
 800256e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

			if (adc_max[1] < adc1[adc1_length])
 8002572:	4b2e      	ldr	r3, [pc, #184]	@ (800262c <HAL_ADC_ConvCpltCallback+0x284>)
 8002574:	885b      	ldrh	r3, [r3, #2]
 8002576:	b29a      	uxth	r2, r3
 8002578:	4b35      	ldr	r3, [pc, #212]	@ (8002650 <HAL_ADC_ConvCpltCallback+0x2a8>)
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	4936      	ldr	r1, [pc, #216]	@ (8002658 <HAL_ADC_ConvCpltCallback+0x2b0>)
 800257e:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8002582:	429a      	cmp	r2, r3
 8002584:	d206      	bcs.n	8002594 <HAL_ADC_ConvCpltCallback+0x1ec>
				adc_max[1] = adc1[adc1_length];
 8002586:	4b32      	ldr	r3, [pc, #200]	@ (8002650 <HAL_ADC_ConvCpltCallback+0x2a8>)
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	4a33      	ldr	r2, [pc, #204]	@ (8002658 <HAL_ADC_ConvCpltCallback+0x2b0>)
 800258c:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8002590:	4b26      	ldr	r3, [pc, #152]	@ (800262c <HAL_ADC_ConvCpltCallback+0x284>)
 8002592:	805a      	strh	r2, [r3, #2]

			if (adc_min[1] > adc1[adc1_length])
 8002594:	4b26      	ldr	r3, [pc, #152]	@ (8002630 <HAL_ADC_ConvCpltCallback+0x288>)
 8002596:	885b      	ldrh	r3, [r3, #2]
 8002598:	b29a      	uxth	r2, r3
 800259a:	4b2d      	ldr	r3, [pc, #180]	@ (8002650 <HAL_ADC_ConvCpltCallback+0x2a8>)
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	492e      	ldr	r1, [pc, #184]	@ (8002658 <HAL_ADC_ConvCpltCallback+0x2b0>)
 80025a0:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80025a4:	429a      	cmp	r2, r3
 80025a6:	d906      	bls.n	80025b6 <HAL_ADC_ConvCpltCallback+0x20e>
				adc_min[1] = adc1[adc1_length];
 80025a8:	4b29      	ldr	r3, [pc, #164]	@ (8002650 <HAL_ADC_ConvCpltCallback+0x2a8>)
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	4a2a      	ldr	r2, [pc, #168]	@ (8002658 <HAL_ADC_ConvCpltCallback+0x2b0>)
 80025ae:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 80025b2:	4b1f      	ldr	r3, [pc, #124]	@ (8002630 <HAL_ADC_ConvCpltCallback+0x288>)
 80025b4:	805a      	strh	r2, [r3, #2]

			if (adc1_length < (ADC_BUFFER_SIZE - 1)) {
 80025b6:	4b26      	ldr	r3, [pc, #152]	@ (8002650 <HAL_ADC_ConvCpltCallback+0x2a8>)
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	f240 72fe 	movw	r2, #2046	@ 0x7fe
 80025be:	4293      	cmp	r3, r2
 80025c0:	f200 8094 	bhi.w	80026ec <HAL_ADC_ConvCpltCallback+0x344>

				uint8_t trigger = 0;
 80025c4:	2300      	movs	r3, #0
 80025c6:	73bb      	strb	r3, [r7, #14]

				if (trigger_mode == 0)
 80025c8:	4b1a      	ldr	r3, [pc, #104]	@ (8002634 <HAL_ADC_ConvCpltCallback+0x28c>)
 80025ca:	781b      	ldrb	r3, [r3, #0]
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d149      	bne.n	8002664 <HAL_ADC_ConvCpltCallback+0x2bc>
					trigger = (adc1_prev < trigger1_value && adc1[adc1_length] > trigger1_value);
 80025d0:	4b22      	ldr	r3, [pc, #136]	@ (800265c <HAL_ADC_ConvCpltCallback+0x2b4>)
 80025d2:	881b      	ldrh	r3, [r3, #0]
 80025d4:	b29a      	uxth	r2, r3
 80025d6:	4b22      	ldr	r3, [pc, #136]	@ (8002660 <HAL_ADC_ConvCpltCallback+0x2b8>)
 80025d8:	881b      	ldrh	r3, [r3, #0]
 80025da:	429a      	cmp	r2, r3
 80025dc:	d20a      	bcs.n	80025f4 <HAL_ADC_ConvCpltCallback+0x24c>
 80025de:	4b1c      	ldr	r3, [pc, #112]	@ (8002650 <HAL_ADC_ConvCpltCallback+0x2a8>)
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	4a1d      	ldr	r2, [pc, #116]	@ (8002658 <HAL_ADC_ConvCpltCallback+0x2b0>)
 80025e4:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 80025e8:	4b1d      	ldr	r3, [pc, #116]	@ (8002660 <HAL_ADC_ConvCpltCallback+0x2b8>)
 80025ea:	881b      	ldrh	r3, [r3, #0]
 80025ec:	429a      	cmp	r2, r3
 80025ee:	d901      	bls.n	80025f4 <HAL_ADC_ConvCpltCallback+0x24c>
 80025f0:	2301      	movs	r3, #1
 80025f2:	e000      	b.n	80025f6 <HAL_ADC_ConvCpltCallback+0x24e>
 80025f4:	2300      	movs	r3, #0
 80025f6:	73bb      	strb	r3, [r7, #14]
 80025f8:	e048      	b.n	800268c <HAL_ADC_ConvCpltCallback+0x2e4>
 80025fa:	bf00      	nop
 80025fc:	40012000 	.word	0x40012000
 8002600:	2000d0e2 	.word	0x2000d0e2
 8002604:	e0001000 	.word	0xe0001000
 8002608:	20015ee8 	.word	0x20015ee8
 800260c:	20015eec 	.word	0x20015eec
 8002610:	2000f600 	.word	0x2000f600
 8002614:	2000d114 	.word	0x2000d114
 8002618:	431bde83 	.word	0x431bde83
 800261c:	2000f5f8 	.word	0x2000f5f8
 8002620:	2000f614 	.word	0x2000f614
 8002624:	2000f5f0 	.word	0x2000f5f0
 8002628:	20013614 	.word	0x20013614
 800262c:	2000f604 	.word	0x2000f604
 8002630:	2000d0e4 	.word	0x2000d0e4
 8002634:	20015614 	.word	0x20015614
 8002638:	20015ef0 	.word	0x20015ef0
 800263c:	2000d0fc 	.word	0x2000d0fc
 8002640:	2000d109 	.word	0x2000d109
 8002644:	2000f610 	.word	0x2000f610
 8002648:	2000f608 	.word	0x2000f608
 800264c:	2000d0e0 	.word	0x2000d0e0
 8002650:	2000f5fc 	.word	0x2000f5fc
 8002654:	20011614 	.word	0x20011614
 8002658:	20014614 	.word	0x20014614
 800265c:	20015ef2 	.word	0x20015ef2
 8002660:	2000d0fe 	.word	0x2000d0fe
				else
					trigger = (adc1_prev > trigger1_value && adc1[adc1_length] < trigger1_value);
 8002664:	4b38      	ldr	r3, [pc, #224]	@ (8002748 <HAL_ADC_ConvCpltCallback+0x3a0>)
 8002666:	881b      	ldrh	r3, [r3, #0]
 8002668:	b29a      	uxth	r2, r3
 800266a:	4b38      	ldr	r3, [pc, #224]	@ (800274c <HAL_ADC_ConvCpltCallback+0x3a4>)
 800266c:	881b      	ldrh	r3, [r3, #0]
 800266e:	429a      	cmp	r2, r3
 8002670:	d90a      	bls.n	8002688 <HAL_ADC_ConvCpltCallback+0x2e0>
 8002672:	4b37      	ldr	r3, [pc, #220]	@ (8002750 <HAL_ADC_ConvCpltCallback+0x3a8>)
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	4a37      	ldr	r2, [pc, #220]	@ (8002754 <HAL_ADC_ConvCpltCallback+0x3ac>)
 8002678:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 800267c:	4b33      	ldr	r3, [pc, #204]	@ (800274c <HAL_ADC_ConvCpltCallback+0x3a4>)
 800267e:	881b      	ldrh	r3, [r3, #0]
 8002680:	429a      	cmp	r2, r3
 8002682:	d201      	bcs.n	8002688 <HAL_ADC_ConvCpltCallback+0x2e0>
 8002684:	2301      	movs	r3, #1
 8002686:	e000      	b.n	800268a <HAL_ADC_ConvCpltCallback+0x2e2>
 8002688:	2300      	movs	r3, #0
 800268a:	73bb      	strb	r3, [r7, #14]

				if (trigger && adc1_length != 0) {
 800268c:	7bbb      	ldrb	r3, [r7, #14]
 800268e:	2b00      	cmp	r3, #0
 8002690:	d021      	beq.n	80026d6 <HAL_ADC_ConvCpltCallback+0x32e>
 8002692:	4b2f      	ldr	r3, [pc, #188]	@ (8002750 <HAL_ADC_ConvCpltCallback+0x3a8>)
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	2b00      	cmp	r3, #0
 8002698:	d01d      	beq.n	80026d6 <HAL_ADC_ConvCpltCallback+0x32e>
					if (!event_trigger1_detected) {
 800269a:	4b2f      	ldr	r3, [pc, #188]	@ (8002758 <HAL_ADC_ConvCpltCallback+0x3b0>)
 800269c:	781b      	ldrb	r3, [r3, #0]
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d10a      	bne.n	80026b8 <HAL_ADC_ConvCpltCallback+0x310>
						adc1_length = 0;
 80026a2:	4b2b      	ldr	r3, [pc, #172]	@ (8002750 <HAL_ADC_ConvCpltCallback+0x3a8>)
 80026a4:	2200      	movs	r2, #0
 80026a6:	601a      	str	r2, [r3, #0]
						adc1_time_delta = DWT->CYCCNT;
 80026a8:	4b2c      	ldr	r3, [pc, #176]	@ (800275c <HAL_ADC_ConvCpltCallback+0x3b4>)
 80026aa:	685b      	ldr	r3, [r3, #4]
 80026ac:	4a2c      	ldr	r2, [pc, #176]	@ (8002760 <HAL_ADC_ConvCpltCallback+0x3b8>)
 80026ae:	6013      	str	r3, [r2, #0]
						event_trigger1_detected = 1;
 80026b0:	4b29      	ldr	r3, [pc, #164]	@ (8002758 <HAL_ADC_ConvCpltCallback+0x3b0>)
 80026b2:	2201      	movs	r2, #1
 80026b4:	701a      	strb	r2, [r3, #0]
 80026b6:	e00e      	b.n	80026d6 <HAL_ADC_ConvCpltCallback+0x32e>
					} else if (!adc_period1_detected) {
 80026b8:	4b2a      	ldr	r3, [pc, #168]	@ (8002764 <HAL_ADC_ConvCpltCallback+0x3bc>)
 80026ba:	781b      	ldrb	r3, [r3, #0]
 80026bc:	b2db      	uxtb	r3, r3
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d109      	bne.n	80026d6 <HAL_ADC_ConvCpltCallback+0x32e>
						adc_period[1] = adc1_time[adc1_length];
 80026c2:	4b23      	ldr	r3, [pc, #140]	@ (8002750 <HAL_ADC_ConvCpltCallback+0x3a8>)
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	4a28      	ldr	r2, [pc, #160]	@ (8002768 <HAL_ADC_ConvCpltCallback+0x3c0>)
 80026c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80026cc:	4a27      	ldr	r2, [pc, #156]	@ (800276c <HAL_ADC_ConvCpltCallback+0x3c4>)
 80026ce:	6053      	str	r3, [r2, #4]
						adc_period1_detected = 1;
 80026d0:	4b24      	ldr	r3, [pc, #144]	@ (8002764 <HAL_ADC_ConvCpltCallback+0x3bc>)
 80026d2:	2201      	movs	r2, #1
 80026d4:	701a      	strb	r2, [r3, #0]
					}
				}

				adc1_prev = adc_data[1] * ADC_CHANNEL1_SCALE;
 80026d6:	4b26      	ldr	r3, [pc, #152]	@ (8002770 <HAL_ADC_ConvCpltCallback+0x3c8>)
 80026d8:	885b      	ldrh	r3, [r3, #2]
 80026da:	b29a      	uxth	r2, r3
 80026dc:	4b1a      	ldr	r3, [pc, #104]	@ (8002748 <HAL_ADC_ConvCpltCallback+0x3a0>)
 80026de:	801a      	strh	r2, [r3, #0]
				adc1_length++;
 80026e0:	4b1b      	ldr	r3, [pc, #108]	@ (8002750 <HAL_ADC_ConvCpltCallback+0x3a8>)
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	3301      	adds	r3, #1
 80026e6:	4a1a      	ldr	r2, [pc, #104]	@ (8002750 <HAL_ADC_ConvCpltCallback+0x3a8>)
 80026e8:	6013      	str	r3, [r2, #0]
 80026ea:	e002      	b.n	80026f2 <HAL_ADC_ConvCpltCallback+0x34a>

			} else
				adc1_filled = 1;
 80026ec:	4b21      	ldr	r3, [pc, #132]	@ (8002774 <HAL_ADC_ConvCpltCallback+0x3cc>)
 80026ee:	2201      	movs	r2, #1
 80026f0:	701a      	strb	r2, [r3, #0]
    	}

		if (adc0_filled && adc1_filled) {
 80026f2:	4b21      	ldr	r3, [pc, #132]	@ (8002778 <HAL_ADC_ConvCpltCallback+0x3d0>)
 80026f4:	781b      	ldrb	r3, [r3, #0]
 80026f6:	b2db      	uxtb	r3, r3
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d012      	beq.n	8002722 <HAL_ADC_ConvCpltCallback+0x37a>
 80026fc:	4b1d      	ldr	r3, [pc, #116]	@ (8002774 <HAL_ADC_ConvCpltCallback+0x3cc>)
 80026fe:	781b      	ldrb	r3, [r3, #0]
 8002700:	b2db      	uxtb	r3, r3
 8002702:	2b00      	cmp	r3, #0
 8002704:	d00d      	beq.n	8002722 <HAL_ADC_ConvCpltCallback+0x37a>
			event_adc = 1;
 8002706:	4b1d      	ldr	r3, [pc, #116]	@ (800277c <HAL_ADC_ConvCpltCallback+0x3d4>)
 8002708:	2201      	movs	r2, #1
 800270a:	701a      	strb	r2, [r3, #0]

	    	if (!adc_immediate) {
 800270c:	4b1c      	ldr	r3, [pc, #112]	@ (8002780 <HAL_ADC_ConvCpltCallback+0x3d8>)
 800270e:	781b      	ldrb	r3, [r3, #0]
 8002710:	2b00      	cmp	r3, #0
 8002712:	d114      	bne.n	800273e <HAL_ADC_ConvCpltCallback+0x396>
				HAL_TIM_Base_Stop_IT(&htim10);
 8002714:	481b      	ldr	r0, [pc, #108]	@ (8002784 <HAL_ADC_ConvCpltCallback+0x3dc>)
 8002716:	f006 fd29 	bl	800916c <HAL_TIM_Base_Stop_IT>
				adc_available = 1;
 800271a:	4b1b      	ldr	r3, [pc, #108]	@ (8002788 <HAL_ADC_ConvCpltCallback+0x3e0>)
 800271c:	2201      	movs	r2, #1
 800271e:	701a      	strb	r2, [r3, #0]
	    	}

    		return;
 8002720:	e00d      	b.n	800273e <HAL_ADC_ConvCpltCallback+0x396>
		}

		if (adc_immediate)
 8002722:	4b17      	ldr	r3, [pc, #92]	@ (8002780 <HAL_ADC_ConvCpltCallback+0x3d8>)
 8002724:	781b      	ldrb	r3, [r3, #0]
 8002726:	2b00      	cmp	r3, #0
 8002728:	d005      	beq.n	8002736 <HAL_ADC_ConvCpltCallback+0x38e>
			HAL_ADC_Start_DMA(&hadc1, (uint32_t*)&adc_data, 2);
 800272a:	2202      	movs	r2, #2
 800272c:	4910      	ldr	r1, [pc, #64]	@ (8002770 <HAL_ADC_ConvCpltCallback+0x3c8>)
 800272e:	4817      	ldr	r0, [pc, #92]	@ (800278c <HAL_ADC_ConvCpltCallback+0x3e4>)
 8002730:	f003 f956 	bl	80059e0 <HAL_ADC_Start_DMA>
 8002734:	e004      	b.n	8002740 <HAL_ADC_ConvCpltCallback+0x398>
		else
			adc_available = 1;
 8002736:	4b14      	ldr	r3, [pc, #80]	@ (8002788 <HAL_ADC_ConvCpltCallback+0x3e0>)
 8002738:	2201      	movs	r2, #1
 800273a:	701a      	strb	r2, [r3, #0]
 800273c:	e000      	b.n	8002740 <HAL_ADC_ConvCpltCallback+0x398>
    		return;
 800273e:	bf00      	nop
    }
}
 8002740:	3710      	adds	r7, #16
 8002742:	46bd      	mov	sp, r7
 8002744:	bd80      	pop	{r7, pc}
 8002746:	bf00      	nop
 8002748:	20015ef2 	.word	0x20015ef2
 800274c:	2000d0fe 	.word	0x2000d0fe
 8002750:	2000f5fc 	.word	0x2000f5fc
 8002754:	20014614 	.word	0x20014614
 8002758:	2000d10a 	.word	0x2000d10a
 800275c:	e0001000 	.word	0xe0001000
 8002760:	20015eec 	.word	0x20015eec
 8002764:	2000f611 	.word	0x2000f611
 8002768:	20011614 	.word	0x20011614
 800276c:	2000f608 	.word	0x2000f608
 8002770:	2000f5f0 	.word	0x2000f5f0
 8002774:	2000d0e0 	.word	0x2000d0e0
 8002778:	2000f600 	.word	0x2000f600
 800277c:	20015615 	.word	0x20015615
 8002780:	2000d0e8 	.word	0x2000d0e8
 8002784:	200160c8 	.word	0x200160c8
 8002788:	2000d0e1 	.word	0x2000d0e1
 800278c:	2000d318 	.word	0x2000d318

08002790 <SD_Test>:

/* 測試用的簡單字符串 */
char writeText[] = "Hello SD Card!";    // 要寫入的文字
char readText[20];                      // 讀取緩衝區
void SD_Test(void)
{
 8002790:	b5b0      	push	{r4, r5, r7, lr}
 8002792:	b08e      	sub	sp, #56	@ 0x38
 8002794:	af00      	add	r7, sp, #0
    char test_data[] = "SD Card Test Data";
 8002796:	4b54      	ldr	r3, [pc, #336]	@ (80028e8 <SD_Test+0x158>)
 8002798:	f107 0424 	add.w	r4, r7, #36	@ 0x24
 800279c:	461d      	mov	r5, r3
 800279e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80027a0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80027a2:	682b      	ldr	r3, [r5, #0]
 80027a4:	8023      	strh	r3, [r4, #0]
    char read_data[30] = {0};
 80027a6:	1d3b      	adds	r3, r7, #4
 80027a8:	221e      	movs	r2, #30
 80027aa:	2100      	movs	r1, #0
 80027ac:	4618      	mov	r0, r3
 80027ae:	f00d fe81 	bl	80104b4 <memset>

    // 1. 初始化並掛載文件系統
    printf("Initializing SD card...\r\n");
 80027b2:	484e      	ldr	r0, [pc, #312]	@ (80028ec <SD_Test+0x15c>)
 80027b4:	f00d fd46 	bl	8010244 <puts>
    fres = f_mount(&fs, "", 1);
 80027b8:	2201      	movs	r2, #1
 80027ba:	494d      	ldr	r1, [pc, #308]	@ (80028f0 <SD_Test+0x160>)
 80027bc:	484d      	ldr	r0, [pc, #308]	@ (80028f4 <SD_Test+0x164>)
 80027be:	f00b fc99 	bl	800e0f4 <f_mount>
 80027c2:	4603      	mov	r3, r0
 80027c4:	461a      	mov	r2, r3
 80027c6:	4b4c      	ldr	r3, [pc, #304]	@ (80028f8 <SD_Test+0x168>)
 80027c8:	701a      	strb	r2, [r3, #0]
    if(fres != FR_OK)
 80027ca:	4b4b      	ldr	r3, [pc, #300]	@ (80028f8 <SD_Test+0x168>)
 80027cc:	781b      	ldrb	r3, [r3, #0]
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d006      	beq.n	80027e0 <SD_Test+0x50>
    {
        printf("f_mount error (%i)\r\n", fres);
 80027d2:	4b49      	ldr	r3, [pc, #292]	@ (80028f8 <SD_Test+0x168>)
 80027d4:	781b      	ldrb	r3, [r3, #0]
 80027d6:	4619      	mov	r1, r3
 80027d8:	4848      	ldr	r0, [pc, #288]	@ (80028fc <SD_Test+0x16c>)
 80027da:	f00d fccb 	bl	8010174 <iprintf>
        return;
 80027de:	e080      	b.n	80028e2 <SD_Test+0x152>
    }
    printf("SD card mounted successfully!\r\n");
 80027e0:	4847      	ldr	r0, [pc, #284]	@ (8002900 <SD_Test+0x170>)
 80027e2:	f00d fd2f 	bl	8010244 <puts>

    // 2. 寫入測試
    printf("Writing test data...\r\n");
 80027e6:	4847      	ldr	r0, [pc, #284]	@ (8002904 <SD_Test+0x174>)
 80027e8:	f00d fd2c 	bl	8010244 <puts>
    fres = f_open(&fil, "test.txt", FA_WRITE | FA_CREATE_ALWAYS);
 80027ec:	220a      	movs	r2, #10
 80027ee:	4946      	ldr	r1, [pc, #280]	@ (8002908 <SD_Test+0x178>)
 80027f0:	4846      	ldr	r0, [pc, #280]	@ (800290c <SD_Test+0x17c>)
 80027f2:	f00b fcc5 	bl	800e180 <f_open>
 80027f6:	4603      	mov	r3, r0
 80027f8:	461a      	mov	r2, r3
 80027fa:	4b3f      	ldr	r3, [pc, #252]	@ (80028f8 <SD_Test+0x168>)
 80027fc:	701a      	strb	r2, [r3, #0]
    if(fres != FR_OK)
 80027fe:	4b3e      	ldr	r3, [pc, #248]	@ (80028f8 <SD_Test+0x168>)
 8002800:	781b      	ldrb	r3, [r3, #0]
 8002802:	2b00      	cmp	r3, #0
 8002804:	d006      	beq.n	8002814 <SD_Test+0x84>
    {
        printf("f_open error (%i)\r\n", fres);
 8002806:	4b3c      	ldr	r3, [pc, #240]	@ (80028f8 <SD_Test+0x168>)
 8002808:	781b      	ldrb	r3, [r3, #0]
 800280a:	4619      	mov	r1, r3
 800280c:	4840      	ldr	r0, [pc, #256]	@ (8002910 <SD_Test+0x180>)
 800280e:	f00d fcb1 	bl	8010174 <iprintf>
        return;
 8002812:	e066      	b.n	80028e2 <SD_Test+0x152>
    }

    fres = f_write(&fil, test_data, strlen(test_data), &bw);
 8002814:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002818:	4618      	mov	r0, r3
 800281a:	f7fd fd41 	bl	80002a0 <strlen>
 800281e:	4602      	mov	r2, r0
 8002820:	f107 0124 	add.w	r1, r7, #36	@ 0x24
 8002824:	4b3b      	ldr	r3, [pc, #236]	@ (8002914 <SD_Test+0x184>)
 8002826:	4839      	ldr	r0, [pc, #228]	@ (800290c <SD_Test+0x17c>)
 8002828:	f00b ffd1 	bl	800e7ce <f_write>
 800282c:	4603      	mov	r3, r0
 800282e:	461a      	mov	r2, r3
 8002830:	4b31      	ldr	r3, [pc, #196]	@ (80028f8 <SD_Test+0x168>)
 8002832:	701a      	strb	r2, [r3, #0]
    if(fres != FR_OK)
 8002834:	4b30      	ldr	r3, [pc, #192]	@ (80028f8 <SD_Test+0x168>)
 8002836:	781b      	ldrb	r3, [r3, #0]
 8002838:	2b00      	cmp	r3, #0
 800283a:	d009      	beq.n	8002850 <SD_Test+0xc0>
    {
        printf("f_write error (%i)\r\n", fres);
 800283c:	4b2e      	ldr	r3, [pc, #184]	@ (80028f8 <SD_Test+0x168>)
 800283e:	781b      	ldrb	r3, [r3, #0]
 8002840:	4619      	mov	r1, r3
 8002842:	4835      	ldr	r0, [pc, #212]	@ (8002918 <SD_Test+0x188>)
 8002844:	f00d fc96 	bl	8010174 <iprintf>
        f_close(&fil);
 8002848:	4830      	ldr	r0, [pc, #192]	@ (800290c <SD_Test+0x17c>)
 800284a:	f00c f9d2 	bl	800ebf2 <f_close>
        return;
 800284e:	e048      	b.n	80028e2 <SD_Test+0x152>
    }
    f_close(&fil);
 8002850:	482e      	ldr	r0, [pc, #184]	@ (800290c <SD_Test+0x17c>)
 8002852:	f00c f9ce 	bl	800ebf2 <f_close>
    printf("Test data written successfully!\r\n");
 8002856:	4831      	ldr	r0, [pc, #196]	@ (800291c <SD_Test+0x18c>)
 8002858:	f00d fcf4 	bl	8010244 <puts>

    // 3. 讀取測試
    printf("Reading test data...\r\n");
 800285c:	4830      	ldr	r0, [pc, #192]	@ (8002920 <SD_Test+0x190>)
 800285e:	f00d fcf1 	bl	8010244 <puts>
    fres = f_open(&fil, "test.txt", FA_READ);
 8002862:	2201      	movs	r2, #1
 8002864:	4928      	ldr	r1, [pc, #160]	@ (8002908 <SD_Test+0x178>)
 8002866:	4829      	ldr	r0, [pc, #164]	@ (800290c <SD_Test+0x17c>)
 8002868:	f00b fc8a 	bl	800e180 <f_open>
 800286c:	4603      	mov	r3, r0
 800286e:	461a      	mov	r2, r3
 8002870:	4b21      	ldr	r3, [pc, #132]	@ (80028f8 <SD_Test+0x168>)
 8002872:	701a      	strb	r2, [r3, #0]
    if(fres != FR_OK)
 8002874:	4b20      	ldr	r3, [pc, #128]	@ (80028f8 <SD_Test+0x168>)
 8002876:	781b      	ldrb	r3, [r3, #0]
 8002878:	2b00      	cmp	r3, #0
 800287a:	d006      	beq.n	800288a <SD_Test+0xfa>
    {
        printf("f_open error (%i)\r\n", fres);
 800287c:	4b1e      	ldr	r3, [pc, #120]	@ (80028f8 <SD_Test+0x168>)
 800287e:	781b      	ldrb	r3, [r3, #0]
 8002880:	4619      	mov	r1, r3
 8002882:	4823      	ldr	r0, [pc, #140]	@ (8002910 <SD_Test+0x180>)
 8002884:	f00d fc76 	bl	8010174 <iprintf>
        return;
 8002888:	e02b      	b.n	80028e2 <SD_Test+0x152>
    }

    f_read(&fil, read_data, strlen(test_data), &br);
 800288a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800288e:	4618      	mov	r0, r3
 8002890:	f7fd fd06 	bl	80002a0 <strlen>
 8002894:	4602      	mov	r2, r0
 8002896:	1d39      	adds	r1, r7, #4
 8002898:	4b22      	ldr	r3, [pc, #136]	@ (8002924 <SD_Test+0x194>)
 800289a:	481c      	ldr	r0, [pc, #112]	@ (800290c <SD_Test+0x17c>)
 800289c:	f00b fe38 	bl	800e510 <f_read>
    f_close(&fil);
 80028a0:	481a      	ldr	r0, [pc, #104]	@ (800290c <SD_Test+0x17c>)
 80028a2:	f00c f9a6 	bl	800ebf2 <f_close>

    // 4. 驗證數據
    if(strcmp(test_data, read_data) == 0)
 80028a6:	1d3a      	adds	r2, r7, #4
 80028a8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80028ac:	4611      	mov	r1, r2
 80028ae:	4618      	mov	r0, r3
 80028b0:	f7fd fc96 	bl	80001e0 <strcmp>
 80028b4:	4603      	mov	r3, r0
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d105      	bne.n	80028c6 <SD_Test+0x136>
    {
        printf("Test passed! Read data: %s\r\n", read_data);
 80028ba:	1d3b      	adds	r3, r7, #4
 80028bc:	4619      	mov	r1, r3
 80028be:	481a      	ldr	r0, [pc, #104]	@ (8002928 <SD_Test+0x198>)
 80028c0:	f00d fc58 	bl	8010174 <iprintf>
 80028c4:	e00d      	b.n	80028e2 <SD_Test+0x152>
    }
    else
    {
        printf("Test failed!\r\n");
 80028c6:	4819      	ldr	r0, [pc, #100]	@ (800292c <SD_Test+0x19c>)
 80028c8:	f00d fcbc 	bl	8010244 <puts>
        printf("Expected: %s\r\n", test_data);
 80028cc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80028d0:	4619      	mov	r1, r3
 80028d2:	4817      	ldr	r0, [pc, #92]	@ (8002930 <SD_Test+0x1a0>)
 80028d4:	f00d fc4e 	bl	8010174 <iprintf>
        printf("Got: %s\r\n", read_data);
 80028d8:	1d3b      	adds	r3, r7, #4
 80028da:	4619      	mov	r1, r3
 80028dc:	4815      	ldr	r0, [pc, #84]	@ (8002934 <SD_Test+0x1a4>)
 80028de:	f00d fc49 	bl	8010174 <iprintf>
    }
}
 80028e2:	3738      	adds	r7, #56	@ 0x38
 80028e4:	46bd      	mov	sp, r7
 80028e6:	bdb0      	pop	{r4, r5, r7, pc}
 80028e8:	08013b38 	.word	0x08013b38
 80028ec:	08013a08 	.word	0x08013a08
 80028f0:	08013a24 	.word	0x08013a24
 80028f4:	2000d4b8 	.word	0x2000d4b8
 80028f8:	2000f524 	.word	0x2000f524
 80028fc:	08013a28 	.word	0x08013a28
 8002900:	08013a40 	.word	0x08013a40
 8002904:	08013a60 	.word	0x08013a60
 8002908:	08013a78 	.word	0x08013a78
 800290c:	2000e4f4 	.word	0x2000e4f4
 8002910:	08013a84 	.word	0x08013a84
 8002914:	2000f5ec 	.word	0x2000f5ec
 8002918:	08013a98 	.word	0x08013a98
 800291c:	08013ab0 	.word	0x08013ab0
 8002920:	08013ad4 	.word	0x08013ad4
 8002924:	2000f5e8 	.word	0x2000f5e8
 8002928:	08013aec 	.word	0x08013aec
 800292c:	08013b0c 	.word	0x08013b0c
 8002930:	08013b1c 	.word	0x08013b1c
 8002934:	08013b2c 	.word	0x08013b2c

08002938 <_Error_Handler>:

void _Error_Handler(char * file, int line)
{
 8002938:	b480      	push	{r7}
 800293a:	b083      	sub	sp, #12
 800293c:	af00      	add	r7, sp, #0
 800293e:	6078      	str	r0, [r7, #4]
 8002940:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  while(1)
 8002942:	bf00      	nop
 8002944:	e7fd      	b.n	8002942 <_Error_Handler+0xa>
	...

08002948 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002948:	b580      	push	{r7, lr}
 800294a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800294c:	f002 ff6e 	bl	800582c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002950:	f000 f95c 	bl	8002c0c <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8002954:	f000 f9c2 	bl	8002cdc <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002958:	f7fe fd8a 	bl	8001470 <MX_GPIO_Init>
  MX_DMA_Init();
 800295c:	f7fe fd52 	bl	8001404 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8002960:	f002 fe60 	bl	8005624 <MX_USART2_UART_Init>
  MX_I2S2_Init();
 8002964:	f7fe fe24 	bl	80015b0 <MX_I2S2_Init>
  MX_USART6_UART_Init();
 8002968:	f002 fe86 	bl	8005678 <MX_USART6_UART_Init>
  MX_CRC_Init();
 800296c:	f7fe fd14 	bl	8001398 <MX_CRC_Init>
  MX_I2S3_Init();
 8002970:	f7fe fe4c 	bl	800160c <MX_I2S3_Init>
  MX_TIM2_Init();
 8002974:	f002 fc26 	bl	80051c4 <MX_TIM2_Init>
  MX_SPI5_Init();
 8002978:	f002 f98a 	bl	8004c90 <MX_SPI5_Init>
  MX_TIM1_Init();
 800297c:	f002 fb80 	bl	8005080 <MX_TIM1_Init>
  MX_ADC1_Init();
 8002980:	f7fe fbfc 	bl	800117c <MX_ADC1_Init>
  MX_FATFS_Init();
 8002984:	f008 fc84 	bl	800b290 <MX_FATFS_Init>
  MX_SPI4_Init();
 8002988:	f002 f94c 	bl	8004c24 <MX_SPI4_Init>
  MX_TIM10_Init();
 800298c:	f002 fd0e 	bl	80053ac <MX_TIM10_Init>
  MX_TIM3_Init();
 8002990:	f002 fc64 	bl	800525c <MX_TIM3_Init>
  MX_TIM4_Init();
 8002994:	f002 fcb6 	bl	8005304 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  //while(1)
  {
  printf("Starting SD card test...\r\n");
 8002998:	487e      	ldr	r0, [pc, #504]	@ (8002b94 <main+0x24c>)
 800299a:	f00d fc53 	bl	8010244 <puts>
  SD_Test();
 800299e:	f7ff fef7 	bl	8002790 <SD_Test>
  HAL_Delay(1000); // 等待1秒鐘
 80029a2:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80029a6:	f002 ffb3 	bl	8005910 <HAL_Delay>

  }
#if 1
	/* Mount SD Card */
	if(f_mount(&fs, "", 0) != FR_OK)
 80029aa:	2200      	movs	r2, #0
 80029ac:	497a      	ldr	r1, [pc, #488]	@ (8002b98 <main+0x250>)
 80029ae:	487b      	ldr	r0, [pc, #492]	@ (8002b9c <main+0x254>)
 80029b0:	f00b fba0 	bl	800e0f4 <f_mount>
 80029b4:	4603      	mov	r3, r0
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d004      	beq.n	80029c4 <main+0x7c>
		_Error_Handler(__FILE__, __LINE__);
 80029ba:	f240 11f3 	movw	r1, #499	@ 0x1f3
 80029be:	4878      	ldr	r0, [pc, #480]	@ (8002ba0 <main+0x258>)
 80029c0:	f7ff ffba 	bl	8002938 <_Error_Handler>

	/* Open file to write */
	if(f_open(&fil, "first.txt", FA_OPEN_ALWAYS | FA_READ | FA_WRITE) != FR_OK)
 80029c4:	2213      	movs	r2, #19
 80029c6:	4977      	ldr	r1, [pc, #476]	@ (8002ba4 <main+0x25c>)
 80029c8:	4877      	ldr	r0, [pc, #476]	@ (8002ba8 <main+0x260>)
 80029ca:	f00b fbd9 	bl	800e180 <f_open>
 80029ce:	4603      	mov	r3, r0
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d004      	beq.n	80029de <main+0x96>
		_Error_Handler(__FILE__, __LINE__);
 80029d4:	f240 11f7 	movw	r1, #503	@ 0x1f7
 80029d8:	4871      	ldr	r0, [pc, #452]	@ (8002ba0 <main+0x258>)
 80029da:	f7ff ffad 	bl	8002938 <_Error_Handler>

	/* Check freeSpace space */
	if(f_getfree("", &fre_clust, &pfs) != FR_OK)
 80029de:	4a73      	ldr	r2, [pc, #460]	@ (8002bac <main+0x264>)
 80029e0:	4973      	ldr	r1, [pc, #460]	@ (8002bb0 <main+0x268>)
 80029e2:	486d      	ldr	r0, [pc, #436]	@ (8002b98 <main+0x250>)
 80029e4:	f00c f92f 	bl	800ec46 <f_getfree>
 80029e8:	4603      	mov	r3, r0
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d004      	beq.n	80029f8 <main+0xb0>
		_Error_Handler(__FILE__, __LINE__);
 80029ee:	f240 11fb 	movw	r1, #507	@ 0x1fb
 80029f2:	486b      	ldr	r0, [pc, #428]	@ (8002ba0 <main+0x258>)
 80029f4:	f7ff ffa0 	bl	8002938 <_Error_Handler>

	totalSpace = (uint32_t)((pfs->n_fatent - 2) * pfs->csize * 0.5);
 80029f8:	4b6c      	ldr	r3, [pc, #432]	@ (8002bac <main+0x264>)
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	69db      	ldr	r3, [r3, #28]
 80029fe:	3b02      	subs	r3, #2
 8002a00:	4a6a      	ldr	r2, [pc, #424]	@ (8002bac <main+0x264>)
 8002a02:	6812      	ldr	r2, [r2, #0]
 8002a04:	8952      	ldrh	r2, [r2, #10]
 8002a06:	fb02 f303 	mul.w	r3, r2, r3
 8002a0a:	4618      	mov	r0, r3
 8002a0c:	f7fd fd92 	bl	8000534 <__aeabi_ui2d>
 8002a10:	f04f 0200 	mov.w	r2, #0
 8002a14:	4b67      	ldr	r3, [pc, #412]	@ (8002bb4 <main+0x26c>)
 8002a16:	f7fd fe07 	bl	8000628 <__aeabi_dmul>
 8002a1a:	4602      	mov	r2, r0
 8002a1c:	460b      	mov	r3, r1
 8002a1e:	4610      	mov	r0, r2
 8002a20:	4619      	mov	r1, r3
 8002a22:	f7fe f8d9 	bl	8000bd8 <__aeabi_d2uiz>
 8002a26:	4603      	mov	r3, r0
 8002a28:	4a63      	ldr	r2, [pc, #396]	@ (8002bb8 <main+0x270>)
 8002a2a:	6013      	str	r3, [r2, #0]
	freeSpace = (uint32_t)(fre_clust * pfs->csize * 0.5);
 8002a2c:	4b5f      	ldr	r3, [pc, #380]	@ (8002bac <main+0x264>)
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	895b      	ldrh	r3, [r3, #10]
 8002a32:	461a      	mov	r2, r3
 8002a34:	4b5e      	ldr	r3, [pc, #376]	@ (8002bb0 <main+0x268>)
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	fb02 f303 	mul.w	r3, r2, r3
 8002a3c:	4618      	mov	r0, r3
 8002a3e:	f7fd fd79 	bl	8000534 <__aeabi_ui2d>
 8002a42:	f04f 0200 	mov.w	r2, #0
 8002a46:	4b5b      	ldr	r3, [pc, #364]	@ (8002bb4 <main+0x26c>)
 8002a48:	f7fd fdee 	bl	8000628 <__aeabi_dmul>
 8002a4c:	4602      	mov	r2, r0
 8002a4e:	460b      	mov	r3, r1
 8002a50:	4610      	mov	r0, r2
 8002a52:	4619      	mov	r1, r3
 8002a54:	f7fe f8c0 	bl	8000bd8 <__aeabi_d2uiz>
 8002a58:	4603      	mov	r3, r0
 8002a5a:	4a58      	ldr	r2, [pc, #352]	@ (8002bbc <main+0x274>)
 8002a5c:	6013      	str	r3, [r2, #0]

	/* free space is less than 1kb */
	if(freeSpace < 1)
 8002a5e:	4b57      	ldr	r3, [pc, #348]	@ (8002bbc <main+0x274>)
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d104      	bne.n	8002a70 <main+0x128>
		_Error_Handler(__FILE__, __LINE__);
 8002a66:	f240 2102 	movw	r1, #514	@ 0x202
 8002a6a:	484d      	ldr	r0, [pc, #308]	@ (8002ba0 <main+0x258>)
 8002a6c:	f7ff ff64 	bl	8002938 <_Error_Handler>

	/* Writing text */
	f_puts("STM32 SD Card I/O Example via SPI\n", &fil);
 8002a70:	494d      	ldr	r1, [pc, #308]	@ (8002ba8 <main+0x260>)
 8002a72:	4853      	ldr	r0, [pc, #332]	@ (8002bc0 <main+0x278>)
 8002a74:	f00c fa51 	bl	800ef1a <f_puts>
	f_puts("Save the world!!!", &fil);
 8002a78:	494b      	ldr	r1, [pc, #300]	@ (8002ba8 <main+0x260>)
 8002a7a:	4852      	ldr	r0, [pc, #328]	@ (8002bc4 <main+0x27c>)
 8002a7c:	f00c fa4d 	bl	800ef1a <f_puts>

	/* Close file */
	if(f_close(&fil) != FR_OK)
 8002a80:	4849      	ldr	r0, [pc, #292]	@ (8002ba8 <main+0x260>)
 8002a82:	f00c f8b6 	bl	800ebf2 <f_close>
 8002a86:	4603      	mov	r3, r0
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d004      	beq.n	8002a96 <main+0x14e>
		_Error_Handler(__FILE__, __LINE__);
 8002a8c:	f240 210a 	movw	r1, #522	@ 0x20a
 8002a90:	4843      	ldr	r0, [pc, #268]	@ (8002ba0 <main+0x258>)
 8002a92:	f7ff ff51 	bl	8002938 <_Error_Handler>

	/* Open file to read */
	if(f_open(&fil, "first.txt", FA_READ) != FR_OK)
 8002a96:	2201      	movs	r2, #1
 8002a98:	4942      	ldr	r1, [pc, #264]	@ (8002ba4 <main+0x25c>)
 8002a9a:	4843      	ldr	r0, [pc, #268]	@ (8002ba8 <main+0x260>)
 8002a9c:	f00b fb70 	bl	800e180 <f_open>
 8002aa0:	4603      	mov	r3, r0
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d00f      	beq.n	8002ac6 <main+0x17e>
		_Error_Handler(__FILE__, __LINE__);
 8002aa6:	f240 210e 	movw	r1, #526	@ 0x20e
 8002aaa:	483d      	ldr	r0, [pc, #244]	@ (8002ba0 <main+0x258>)
 8002aac:	f7ff ff44 	bl	8002938 <_Error_Handler>

	while(f_gets(buffer, sizeof(buffer), &fil))
 8002ab0:	e009      	b.n	8002ac6 <main+0x17e>
	{
		/* SWV output */
		printf("%s", buffer);
 8002ab2:	4945      	ldr	r1, [pc, #276]	@ (8002bc8 <main+0x280>)
 8002ab4:	4845      	ldr	r0, [pc, #276]	@ (8002bcc <main+0x284>)
 8002ab6:	f00d fb5d 	bl	8010174 <iprintf>
		fflush(stdout);
 8002aba:	4b45      	ldr	r3, [pc, #276]	@ (8002bd0 <main+0x288>)
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	689b      	ldr	r3, [r3, #8]
 8002ac0:	4618      	mov	r0, r3
 8002ac2:	f00d fa81 	bl	800ffc8 <fflush>
	while(f_gets(buffer, sizeof(buffer), &fil))
 8002ac6:	4a38      	ldr	r2, [pc, #224]	@ (8002ba8 <main+0x260>)
 8002ac8:	2164      	movs	r1, #100	@ 0x64
 8002aca:	483f      	ldr	r0, [pc, #252]	@ (8002bc8 <main+0x280>)
 8002acc:	f00c f970 	bl	800edb0 <f_gets>
 8002ad0:	4603      	mov	r3, r0
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d1ed      	bne.n	8002ab2 <main+0x16a>
	}

	/* Close file */
	if(f_close(&fil) != FR_OK)
 8002ad6:	4834      	ldr	r0, [pc, #208]	@ (8002ba8 <main+0x260>)
 8002ad8:	f00c f88b 	bl	800ebf2 <f_close>
 8002adc:	4603      	mov	r3, r0
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d004      	beq.n	8002aec <main+0x1a4>
		_Error_Handler(__FILE__, __LINE__);
 8002ae2:	f240 2119 	movw	r1, #537	@ 0x219
 8002ae6:	482e      	ldr	r0, [pc, #184]	@ (8002ba0 <main+0x258>)
 8002ae8:	f7ff ff26 	bl	8002938 <_Error_Handler>

	/* Unmount SDCARD */
	if(f_mount(NULL, "", 1) != FR_OK)
 8002aec:	2201      	movs	r2, #1
 8002aee:	492a      	ldr	r1, [pc, #168]	@ (8002b98 <main+0x250>)
 8002af0:	2000      	movs	r0, #0
 8002af2:	f00b faff 	bl	800e0f4 <f_mount>
 8002af6:	4603      	mov	r3, r0
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d004      	beq.n	8002b06 <main+0x1be>
		_Error_Handler(__FILE__, __LINE__);
 8002afc:	f240 211d 	movw	r1, #541	@ 0x21d
 8002b00:	4827      	ldr	r0, [pc, #156]	@ (8002ba0 <main+0x258>)
 8002b02:	f7ff ff19 	bl	8002938 <_Error_Handler>
  {
      Error_Handler();
  }
#endif

  if (HAL_UART_Receive_IT(&huart6, &rx_byte, 1) != HAL_OK)
 8002b06:	2201      	movs	r2, #1
 8002b08:	4932      	ldr	r1, [pc, #200]	@ (8002bd4 <main+0x28c>)
 8002b0a:	4833      	ldr	r0, [pc, #204]	@ (8002bd8 <main+0x290>)
 8002b0c:	f007 fc2f 	bl	800a36e <HAL_UART_Receive_IT>
 8002b10:	4603      	mov	r3, r0
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d001      	beq.n	8002b1a <main+0x1d2>
  {
      Error_Handler();
 8002b16:	f000 f901 	bl	8002d1c <Error_Handler>
  }

  printf("AI Model Application Started...\r\n");
 8002b1a:	4830      	ldr	r0, [pc, #192]	@ (8002bdc <main+0x294>)
 8002b1c:	f00d fb92 	bl	8010244 <puts>


  txIndex = 0;
 8002b20:	4b2f      	ldr	r3, [pc, #188]	@ (8002be0 <main+0x298>)
 8002b22:	2200      	movs	r2, #0
 8002b24:	601a      	str	r2, [r3, #0]

  // For DWT->CYCCNT ...
  SCB_DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8002b26:	4b2f      	ldr	r3, [pc, #188]	@ (8002be4 <main+0x29c>)
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	4a2e      	ldr	r2, [pc, #184]	@ (8002be4 <main+0x29c>)
 8002b2c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002b30:	6013      	str	r3, [r2, #0]
  DWT_CONTROL |= DWT_CTRL_CYCCNTENA_Msk;
 8002b32:	4b2d      	ldr	r3, [pc, #180]	@ (8002be8 <main+0x2a0>)
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	4a2c      	ldr	r2, [pc, #176]	@ (8002be8 <main+0x2a0>)
 8002b38:	f043 0301 	orr.w	r3, r3, #1
 8002b3c:	6013      	str	r3, [r2, #0]

  adc_reset_cyccnt = 1;
 8002b3e:	4b2b      	ldr	r3, [pc, #172]	@ (8002bec <main+0x2a4>)
 8002b40:	2201      	movs	r2, #1
 8002b42:	701a      	strb	r2, [r3, #0]
  if (adc_immediate)
 8002b44:	4b2a      	ldr	r3, [pc, #168]	@ (8002bf0 <main+0x2a8>)
 8002b46:	781b      	ldrb	r3, [r3, #0]
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d005      	beq.n	8002b58 <main+0x210>
  {
	  // The ADC starts immediately after the previous measurement is handled
	  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)&adc_data, 2);
 8002b4c:	2202      	movs	r2, #2
 8002b4e:	4929      	ldr	r1, [pc, #164]	@ (8002bf4 <main+0x2ac>)
 8002b50:	4829      	ldr	r0, [pc, #164]	@ (8002bf8 <main+0x2b0>)
 8002b52:	f002 ff45 	bl	80059e0 <HAL_ADC_Start_DMA>
 8002b56:	e002      	b.n	8002b5e <main+0x216>
  }
  else
  {
	  // ADC starts by timer
	  HAL_TIM_Base_Start_IT(&htim10);
 8002b58:	4828      	ldr	r0, [pc, #160]	@ (8002bfc <main+0x2b4>)
 8002b5a:	f006 faa5 	bl	80090a8 <HAL_TIM_Base_Start_IT>
  }

  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8002b5e:	2100      	movs	r1, #0
 8002b60:	4827      	ldr	r0, [pc, #156]	@ (8002c00 <main+0x2b8>)
 8002b62:	f006 fb8b 	bl	800927c <HAL_TIM_PWM_Start>

  InitOscState();
 8002b66:	f000 f8dd 	bl	8002d24 <InitOscState>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
  {
	 if(HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin) == GPIO_PIN_RESET)
 8002b6a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002b6e:	4825      	ldr	r0, [pc, #148]	@ (8002c04 <main+0x2bc>)
 8002b70:	f004 f9fc 	bl	8006f6c <HAL_GPIO_ReadPin>
 8002b74:	4603      	mov	r3, r0
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d103      	bne.n	8002b82 <main+0x23a>
	 {

		  HAL_TIM_Base_Start_IT(&htim2);
 8002b7a:	4823      	ldr	r0, [pc, #140]	@ (8002c08 <main+0x2c0>)
 8002b7c:	f006 fa94 	bl	80090a8 <HAL_TIM_Base_Start_IT>
 8002b80:	e005      	b.n	8002b8e <main+0x246>
	 }
	 else
	 {
		  txIndex = 0;
 8002b82:	4b17      	ldr	r3, [pc, #92]	@ (8002be0 <main+0x298>)
 8002b84:	2200      	movs	r2, #0
 8002b86:	601a      	str	r2, [r3, #0]
		  HAL_TIM_Base_Stop_IT(&htim2);
 8002b88:	481f      	ldr	r0, [pc, #124]	@ (8002c08 <main+0x2c0>)
 8002b8a:	f006 faef 	bl	800916c <HAL_TIM_Base_Stop_IT>
	 }

	 Oscilloscope_Process();
 8002b8e:	f001 f805 	bl	8003b9c <Oscilloscope_Process>
	 if(HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin) == GPIO_PIN_RESET)
 8002b92:	e7ea      	b.n	8002b6a <main+0x222>
 8002b94:	08013b4c 	.word	0x08013b4c
 8002b98:	08013a24 	.word	0x08013a24
 8002b9c:	2000d4b8 	.word	0x2000d4b8
 8002ba0:	08013b68 	.word	0x08013b68
 8002ba4:	08013b7c 	.word	0x08013b7c
 8002ba8:	2000e4f4 	.word	0x2000e4f4
 8002bac:	2000e4f0 	.word	0x2000e4f0
 8002bb0:	2000f528 	.word	0x2000f528
 8002bb4:	3fe00000 	.word	0x3fe00000
 8002bb8:	2000f52c 	.word	0x2000f52c
 8002bbc:	2000f530 	.word	0x2000f530
 8002bc0:	08013b88 	.word	0x08013b88
 8002bc4:	08013bac 	.word	0x08013bac
 8002bc8:	2000f534 	.word	0x2000f534
 8002bcc:	08013bc0 	.word	0x08013bc0
 8002bd0:	2000d140 	.word	0x2000d140
 8002bd4:	2000f5de 	.word	0x2000f5de
 8002bd8:	20016158 	.word	0x20016158
 8002bdc:	08013bc4 	.word	0x08013bc4
 8002be0:	2000f5e4 	.word	0x2000f5e4
 8002be4:	e000edfc 	.word	0xe000edfc
 8002be8:	e0001000 	.word	0xe0001000
 8002bec:	2000d0e2 	.word	0x2000d0e2
 8002bf0:	2000d0e8 	.word	0x2000d0e8
 8002bf4:	2000f5f0 	.word	0x2000f5f0
 8002bf8:	2000d318 	.word	0x2000d318
 8002bfc:	200160c8 	.word	0x200160c8
 8002c00:	20015fa8 	.word	0x20015fa8
 8002c04:	40020800 	.word	0x40020800
 8002c08:	20015ff0 	.word	0x20015ff0

08002c0c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002c0c:	b580      	push	{r7, lr}
 8002c0e:	b094      	sub	sp, #80	@ 0x50
 8002c10:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002c12:	f107 0320 	add.w	r3, r7, #32
 8002c16:	2230      	movs	r2, #48	@ 0x30
 8002c18:	2100      	movs	r1, #0
 8002c1a:	4618      	mov	r0, r3
 8002c1c:	f00d fc4a 	bl	80104b4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002c20:	f107 030c 	add.w	r3, r7, #12
 8002c24:	2200      	movs	r2, #0
 8002c26:	601a      	str	r2, [r3, #0]
 8002c28:	605a      	str	r2, [r3, #4]
 8002c2a:	609a      	str	r2, [r3, #8]
 8002c2c:	60da      	str	r2, [r3, #12]
 8002c2e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002c30:	2300      	movs	r3, #0
 8002c32:	60bb      	str	r3, [r7, #8]
 8002c34:	4b27      	ldr	r3, [pc, #156]	@ (8002cd4 <SystemClock_Config+0xc8>)
 8002c36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c38:	4a26      	ldr	r2, [pc, #152]	@ (8002cd4 <SystemClock_Config+0xc8>)
 8002c3a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002c3e:	6413      	str	r3, [r2, #64]	@ 0x40
 8002c40:	4b24      	ldr	r3, [pc, #144]	@ (8002cd4 <SystemClock_Config+0xc8>)
 8002c42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c44:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002c48:	60bb      	str	r3, [r7, #8]
 8002c4a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002c4c:	2300      	movs	r3, #0
 8002c4e:	607b      	str	r3, [r7, #4]
 8002c50:	4b21      	ldr	r3, [pc, #132]	@ (8002cd8 <SystemClock_Config+0xcc>)
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	4a20      	ldr	r2, [pc, #128]	@ (8002cd8 <SystemClock_Config+0xcc>)
 8002c56:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002c5a:	6013      	str	r3, [r2, #0]
 8002c5c:	4b1e      	ldr	r3, [pc, #120]	@ (8002cd8 <SystemClock_Config+0xcc>)
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8002c64:	607b      	str	r3, [r7, #4]
 8002c66:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002c68:	2302      	movs	r3, #2
 8002c6a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002c6c:	2301      	movs	r3, #1
 8002c6e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002c70:	2310      	movs	r3, #16
 8002c72:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002c74:	2302      	movs	r3, #2
 8002c76:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002c78:	2300      	movs	r3, #0
 8002c7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8002c7c:	2308      	movs	r3, #8
 8002c7e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8002c80:	2364      	movs	r3, #100	@ 0x64
 8002c82:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002c84:	2302      	movs	r3, #2
 8002c86:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8002c88:	2307      	movs	r3, #7
 8002c8a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002c8c:	f107 0320 	add.w	r3, r7, #32
 8002c90:	4618      	mov	r0, r3
 8002c92:	f004 ff7d 	bl	8007b90 <HAL_RCC_OscConfig>
 8002c96:	4603      	mov	r3, r0
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d001      	beq.n	8002ca0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8002c9c:	f000 f83e 	bl	8002d1c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002ca0:	230f      	movs	r3, #15
 8002ca2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002ca4:	2302      	movs	r3, #2
 8002ca6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002ca8:	2300      	movs	r3, #0
 8002caa:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002cac:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002cb0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002cb2:	2300      	movs	r3, #0
 8002cb4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8002cb6:	f107 030c 	add.w	r3, r7, #12
 8002cba:	2103      	movs	r1, #3
 8002cbc:	4618      	mov	r0, r3
 8002cbe:	f005 f9df 	bl	8008080 <HAL_RCC_ClockConfig>
 8002cc2:	4603      	mov	r3, r0
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d001      	beq.n	8002ccc <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8002cc8:	f000 f828 	bl	8002d1c <Error_Handler>
  }
}
 8002ccc:	bf00      	nop
 8002cce:	3750      	adds	r7, #80	@ 0x50
 8002cd0:	46bd      	mov	sp, r7
 8002cd2:	bd80      	pop	{r7, pc}
 8002cd4:	40023800 	.word	0x40023800
 8002cd8:	40007000 	.word	0x40007000

08002cdc <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8002cdc:	b580      	push	{r7, lr}
 8002cde:	b086      	sub	sp, #24
 8002ce0:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002ce2:	463b      	mov	r3, r7
 8002ce4:	2200      	movs	r2, #0
 8002ce6:	601a      	str	r2, [r3, #0]
 8002ce8:	605a      	str	r2, [r3, #4]
 8002cea:	609a      	str	r2, [r3, #8]
 8002cec:	60da      	str	r2, [r3, #12]
 8002cee:	611a      	str	r2, [r3, #16]
 8002cf0:	615a      	str	r2, [r3, #20]

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8002cf2:	2301      	movs	r3, #1
 8002cf4:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8002cf6:	23c0      	movs	r3, #192	@ 0xc0
 8002cf8:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLLI2S.PLLI2SM = 16;
 8002cfa:	2310      	movs	r3, #16
 8002cfc:	607b      	str	r3, [r7, #4]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8002cfe:	2302      	movs	r3, #2
 8002d00:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002d02:	463b      	mov	r3, r7
 8002d04:	4618      	mov	r0, r3
 8002d06:	f005 fbdb 	bl	80084c0 <HAL_RCCEx_PeriphCLKConfig>
 8002d0a:	4603      	mov	r3, r0
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d001      	beq.n	8002d14 <PeriphCommonClock_Config+0x38>
  {
    Error_Handler();
 8002d10:	f000 f804 	bl	8002d1c <Error_Handler>
  }
}
 8002d14:	bf00      	nop
 8002d16:	3718      	adds	r7, #24
 8002d18:	46bd      	mov	sp, r7
 8002d1a:	bd80      	pop	{r7, pc}

08002d1c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002d1c:	b480      	push	{r7}
 8002d1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  while(1)
 8002d20:	bf00      	nop
 8002d22:	e7fd      	b.n	8002d20 <Error_Handler+0x4>

08002d24 <InitOscState>:
extern TIM_HandleTypeDef htim3;
extern TIM_HandleTypeDef htim4;
extern TIM_HandleTypeDef htim10;

void InitOscState(void)
{
 8002d24:	b580      	push	{r7, lr}
 8002d26:	b0c6      	sub	sp, #280	@ 0x118
 8002d28:	af04      	add	r7, sp, #16

	  frames_ticks = HAL_GetTick();
 8002d2a:	f002 fde5 	bl	80058f8 <HAL_GetTick>
 8002d2e:	4603      	mov	r3, r0
 8002d30:	4a73      	ldr	r2, [pc, #460]	@ (8002f00 <InitOscState+0x1dc>)
 8002d32:	6013      	str	r3, [r2, #0]

	  for (uint16_t i = 0; i < 280; i++) {
 8002d34:	2300      	movs	r3, #0
 8002d36:	f8a7 3106 	strh.w	r3, [r7, #262]	@ 0x106
 8002d3a:	e01e      	b.n	8002d7a <InitOscState+0x56>
		  pixel_dirty0[i][0] = 0;
 8002d3c:	f8b7 3106 	ldrh.w	r3, [r7, #262]	@ 0x106
 8002d40:	4a70      	ldr	r2, [pc, #448]	@ (8002f04 <InitOscState+0x1e0>)
 8002d42:	2100      	movs	r1, #0
 8002d44:	f822 1023 	strh.w	r1, [r2, r3, lsl #2]
		  pixel_dirty0[i][1] = 0;
 8002d48:	f8b7 3106 	ldrh.w	r3, [r7, #262]	@ 0x106
 8002d4c:	4a6d      	ldr	r2, [pc, #436]	@ (8002f04 <InitOscState+0x1e0>)
 8002d4e:	009b      	lsls	r3, r3, #2
 8002d50:	4413      	add	r3, r2
 8002d52:	2200      	movs	r2, #0
 8002d54:	805a      	strh	r2, [r3, #2]
		  pixel_dirty1[i][0] = 0;
 8002d56:	f8b7 3106 	ldrh.w	r3, [r7, #262]	@ 0x106
 8002d5a:	4a6b      	ldr	r2, [pc, #428]	@ (8002f08 <InitOscState+0x1e4>)
 8002d5c:	2100      	movs	r1, #0
 8002d5e:	f822 1023 	strh.w	r1, [r2, r3, lsl #2]
		  pixel_dirty1[i][1] = 0;
 8002d62:	f8b7 3106 	ldrh.w	r3, [r7, #262]	@ 0x106
 8002d66:	4a68      	ldr	r2, [pc, #416]	@ (8002f08 <InitOscState+0x1e4>)
 8002d68:	009b      	lsls	r3, r3, #2
 8002d6a:	4413      	add	r3, r2
 8002d6c:	2200      	movs	r2, #0
 8002d6e:	805a      	strh	r2, [r3, #2]
	  for (uint16_t i = 0; i < 280; i++) {
 8002d70:	f8b7 3106 	ldrh.w	r3, [r7, #262]	@ 0x106
 8002d74:	3301      	adds	r3, #1
 8002d76:	f8a7 3106 	strh.w	r3, [r7, #262]	@ 0x106
 8002d7a:	f8b7 3106 	ldrh.w	r3, [r7, #262]	@ 0x106
 8002d7e:	f5b3 7f8c 	cmp.w	r3, #280	@ 0x118
 8002d82:	d3db      	bcc.n	8002d3c <InitOscState+0x18>
	  }

	  // Display init
	   display.spi             = &hspi5;
 8002d84:	4b61      	ldr	r3, [pc, #388]	@ (8002f0c <InitOscState+0x1e8>)
 8002d86:	4a62      	ldr	r2, [pc, #392]	@ (8002f10 <InitOscState+0x1ec>)
 8002d88:	601a      	str	r2, [r3, #0]
	   display.cs_gpio_port    = ILI9341_CS_GPIO_Port;
 8002d8a:	4b60      	ldr	r3, [pc, #384]	@ (8002f0c <InitOscState+0x1e8>)
 8002d8c:	4a61      	ldr	r2, [pc, #388]	@ (8002f14 <InitOscState+0x1f0>)
 8002d8e:	605a      	str	r2, [r3, #4]
	   display.dc_gpio_port    = ILI9341_DC_GPIO_Port;
 8002d90:	4b5e      	ldr	r3, [pc, #376]	@ (8002f0c <InitOscState+0x1e8>)
 8002d92:	4a61      	ldr	r2, [pc, #388]	@ (8002f18 <InitOscState+0x1f4>)
 8002d94:	609a      	str	r2, [r3, #8]
	   display.reset_gpio_port = ILI9341_RESET_GPIO_Port;
 8002d96:	4b5d      	ldr	r3, [pc, #372]	@ (8002f0c <InitOscState+0x1e8>)
 8002d98:	4a5f      	ldr	r2, [pc, #380]	@ (8002f18 <InitOscState+0x1f4>)
 8002d9a:	60da      	str	r2, [r3, #12]
	   display.cs_pin          = ILI9341_CS_Pin;
 8002d9c:	4b5b      	ldr	r3, [pc, #364]	@ (8002f0c <InitOscState+0x1e8>)
 8002d9e:	2202      	movs	r2, #2
 8002da0:	821a      	strh	r2, [r3, #16]
	   display.dc_pin          = ILI9341_DC_Pin;
 8002da2:	4b5a      	ldr	r3, [pc, #360]	@ (8002f0c <InitOscState+0x1e8>)
 8002da4:	2201      	movs	r2, #1
 8002da6:	825a      	strh	r2, [r3, #18]
	   display.reset_pin       = ILI9341_RESET_Pin;
 8002da8:	4b58      	ldr	r3, [pc, #352]	@ (8002f0c <InitOscState+0x1e8>)
 8002daa:	2202      	movs	r2, #2
 8002dac:	829a      	strh	r2, [r3, #20]
	   display.width           = 320;
 8002dae:	4b57      	ldr	r3, [pc, #348]	@ (8002f0c <InitOscState+0x1e8>)
 8002db0:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8002db4:	82da      	strh	r2, [r3, #22]
	   display.height          = 240;
 8002db6:	4b55      	ldr	r3, [pc, #340]	@ (8002f0c <InitOscState+0x1e8>)
 8002db8:	22f0      	movs	r2, #240	@ 0xf0
 8002dba:	831a      	strh	r2, [r3, #24]
	   display.orientation     = ILI9341_ORIENTATION_ROTATE_RIGHT;
 8002dbc:	4b53      	ldr	r3, [pc, #332]	@ (8002f0c <InitOscState+0x1e8>)
 8002dbe:	22e8      	movs	r2, #232	@ 0xe8
 8002dc0:	769a      	strb	r2, [r3, #26]

	   ILI9341_UNSELECT(&display);
 8002dc2:	4b52      	ldr	r3, [pc, #328]	@ (8002f0c <InitOscState+0x1e8>)
 8002dc4:	8a1a      	ldrh	r2, [r3, #16]
 8002dc6:	4b51      	ldr	r3, [pc, #324]	@ (8002f0c <InitOscState+0x1e8>)
 8002dc8:	685b      	ldr	r3, [r3, #4]
 8002dca:	619a      	str	r2, [r3, #24]
	   ILI9341_Init(&display);
 8002dcc:	484f      	ldr	r0, [pc, #316]	@ (8002f0c <InitOscState+0x1e8>)
 8002dce:	f7fe fe03 	bl	80019d8 <ILI9341_Init>

		  // Local vars
		  char string[255];

	  // Dispaly freq. (for debug)
	  ILI9341_FillScreen(&display, ILI9341_BLACK);
 8002dd2:	2100      	movs	r1, #0
 8002dd4:	484d      	ldr	r0, [pc, #308]	@ (8002f0c <InitOscState+0x1e8>)
 8002dd6:	f7ff f84c 	bl	8001e72 <ILI9341_FillScreen>

	  snprintf(string, 255, "Oscilloscope");
 8002dda:	1d3b      	adds	r3, r7, #4
 8002ddc:	4a4f      	ldr	r2, [pc, #316]	@ (8002f1c <InitOscState+0x1f8>)
 8002dde:	21ff      	movs	r1, #255	@ 0xff
 8002de0:	4618      	mov	r0, r3
 8002de2:	f00d fa37 	bl	8010254 <sniprintf>
	  ILI9341_WriteString(&display, 0, 18 * 0, string, Font_11x18, ILI9341_BLACK, ILI9341_WHITE);
 8002de6:	1d3b      	adds	r3, r7, #4
 8002de8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002dec:	9203      	str	r2, [sp, #12]
 8002dee:	2200      	movs	r2, #0
 8002df0:	9202      	str	r2, [sp, #8]
 8002df2:	494b      	ldr	r1, [pc, #300]	@ (8002f20 <InitOscState+0x1fc>)
 8002df4:	466a      	mov	r2, sp
 8002df6:	c903      	ldmia	r1, {r0, r1}
 8002df8:	e882 0003 	stmia.w	r2, {r0, r1}
 8002dfc:	2200      	movs	r2, #0
 8002dfe:	2100      	movs	r1, #0
 8002e00:	4842      	ldr	r0, [pc, #264]	@ (8002f0c <InitOscState+0x1e8>)
 8002e02:	f7ff f980 	bl	8002106 <ILI9341_WriteString>

	  snprintf(string, 255, "SYCLK = %ldMHz", HAL_RCC_GetSysClockFreq()/1000000);
 8002e06:	f005 fa21 	bl	800824c <HAL_RCC_GetSysClockFreq>
 8002e0a:	4603      	mov	r3, r0
 8002e0c:	4a45      	ldr	r2, [pc, #276]	@ (8002f24 <InitOscState+0x200>)
 8002e0e:	fba2 2303 	umull	r2, r3, r2, r3
 8002e12:	0c9b      	lsrs	r3, r3, #18
 8002e14:	1d38      	adds	r0, r7, #4
 8002e16:	4a44      	ldr	r2, [pc, #272]	@ (8002f28 <InitOscState+0x204>)
 8002e18:	21ff      	movs	r1, #255	@ 0xff
 8002e1a:	f00d fa1b 	bl	8010254 <sniprintf>
	  ILI9341_WriteString(&display, 0, 18 * 1, string, Font_11x18, ILI9341_BLACK, ILI9341_WHITE);
 8002e1e:	1d3b      	adds	r3, r7, #4
 8002e20:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002e24:	9203      	str	r2, [sp, #12]
 8002e26:	2200      	movs	r2, #0
 8002e28:	9202      	str	r2, [sp, #8]
 8002e2a:	493d      	ldr	r1, [pc, #244]	@ (8002f20 <InitOscState+0x1fc>)
 8002e2c:	466a      	mov	r2, sp
 8002e2e:	c903      	ldmia	r1, {r0, r1}
 8002e30:	e882 0003 	stmia.w	r2, {r0, r1}
 8002e34:	2212      	movs	r2, #18
 8002e36:	2100      	movs	r1, #0
 8002e38:	4834      	ldr	r0, [pc, #208]	@ (8002f0c <InitOscState+0x1e8>)
 8002e3a:	f7ff f964 	bl	8002106 <ILI9341_WriteString>

	  snprintf(string, 255, "HCLK  = %ldMHz", HAL_RCC_GetHCLKFreq()/1000000);
 8002e3e:	f005 fb0b 	bl	8008458 <HAL_RCC_GetHCLKFreq>
 8002e42:	4603      	mov	r3, r0
 8002e44:	4a37      	ldr	r2, [pc, #220]	@ (8002f24 <InitOscState+0x200>)
 8002e46:	fba2 2303 	umull	r2, r3, r2, r3
 8002e4a:	0c9b      	lsrs	r3, r3, #18
 8002e4c:	1d38      	adds	r0, r7, #4
 8002e4e:	4a37      	ldr	r2, [pc, #220]	@ (8002f2c <InitOscState+0x208>)
 8002e50:	21ff      	movs	r1, #255	@ 0xff
 8002e52:	f00d f9ff 	bl	8010254 <sniprintf>
	  ILI9341_WriteString(&display, 0, 18 * 2, string, Font_11x18, ILI9341_BLACK, ILI9341_WHITE);
 8002e56:	1d3b      	adds	r3, r7, #4
 8002e58:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002e5c:	9203      	str	r2, [sp, #12]
 8002e5e:	2200      	movs	r2, #0
 8002e60:	9202      	str	r2, [sp, #8]
 8002e62:	492f      	ldr	r1, [pc, #188]	@ (8002f20 <InitOscState+0x1fc>)
 8002e64:	466a      	mov	r2, sp
 8002e66:	c903      	ldmia	r1, {r0, r1}
 8002e68:	e882 0003 	stmia.w	r2, {r0, r1}
 8002e6c:	2224      	movs	r2, #36	@ 0x24
 8002e6e:	2100      	movs	r1, #0
 8002e70:	4826      	ldr	r0, [pc, #152]	@ (8002f0c <InitOscState+0x1e8>)
 8002e72:	f7ff f948 	bl	8002106 <ILI9341_WriteString>

	  snprintf(string, 255, "APB1  = %ldMHz", HAL_RCC_GetPCLK1Freq()/1000000);
 8002e76:	f005 fafb 	bl	8008470 <HAL_RCC_GetPCLK1Freq>
 8002e7a:	4603      	mov	r3, r0
 8002e7c:	4a29      	ldr	r2, [pc, #164]	@ (8002f24 <InitOscState+0x200>)
 8002e7e:	fba2 2303 	umull	r2, r3, r2, r3
 8002e82:	0c9b      	lsrs	r3, r3, #18
 8002e84:	1d38      	adds	r0, r7, #4
 8002e86:	4a2a      	ldr	r2, [pc, #168]	@ (8002f30 <InitOscState+0x20c>)
 8002e88:	21ff      	movs	r1, #255	@ 0xff
 8002e8a:	f00d f9e3 	bl	8010254 <sniprintf>
	  ILI9341_WriteString(&display, 0, 18 * 3, string, Font_11x18, ILI9341_BLACK, ILI9341_WHITE);
 8002e8e:	1d3b      	adds	r3, r7, #4
 8002e90:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002e94:	9203      	str	r2, [sp, #12]
 8002e96:	2200      	movs	r2, #0
 8002e98:	9202      	str	r2, [sp, #8]
 8002e9a:	4921      	ldr	r1, [pc, #132]	@ (8002f20 <InitOscState+0x1fc>)
 8002e9c:	466a      	mov	r2, sp
 8002e9e:	c903      	ldmia	r1, {r0, r1}
 8002ea0:	e882 0003 	stmia.w	r2, {r0, r1}
 8002ea4:	2236      	movs	r2, #54	@ 0x36
 8002ea6:	2100      	movs	r1, #0
 8002ea8:	4818      	ldr	r0, [pc, #96]	@ (8002f0c <InitOscState+0x1e8>)
 8002eaa:	f7ff f92c 	bl	8002106 <ILI9341_WriteString>

	  snprintf(string, 255, "APB2  = %ldMHz", HAL_RCC_GetPCLK2Freq()/1000000);
 8002eae:	f005 faf3 	bl	8008498 <HAL_RCC_GetPCLK2Freq>
 8002eb2:	4603      	mov	r3, r0
 8002eb4:	4a1b      	ldr	r2, [pc, #108]	@ (8002f24 <InitOscState+0x200>)
 8002eb6:	fba2 2303 	umull	r2, r3, r2, r3
 8002eba:	0c9b      	lsrs	r3, r3, #18
 8002ebc:	1d38      	adds	r0, r7, #4
 8002ebe:	4a1d      	ldr	r2, [pc, #116]	@ (8002f34 <InitOscState+0x210>)
 8002ec0:	21ff      	movs	r1, #255	@ 0xff
 8002ec2:	f00d f9c7 	bl	8010254 <sniprintf>
	  ILI9341_WriteString(&display, 0, 18 * 4, string, Font_11x18, ILI9341_BLACK, ILI9341_WHITE);
 8002ec6:	1d3b      	adds	r3, r7, #4
 8002ec8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002ecc:	9203      	str	r2, [sp, #12]
 8002ece:	2200      	movs	r2, #0
 8002ed0:	9202      	str	r2, [sp, #8]
 8002ed2:	4913      	ldr	r1, [pc, #76]	@ (8002f20 <InitOscState+0x1fc>)
 8002ed4:	466a      	mov	r2, sp
 8002ed6:	c903      	ldmia	r1, {r0, r1}
 8002ed8:	e882 0003 	stmia.w	r2, {r0, r1}
 8002edc:	2248      	movs	r2, #72	@ 0x48
 8002ede:	2100      	movs	r1, #0
 8002ee0:	480a      	ldr	r0, [pc, #40]	@ (8002f0c <InitOscState+0x1e8>)
 8002ee2:	f7ff f910 	bl	8002106 <ILI9341_WriteString>

	  HAL_Delay(1000);
 8002ee6:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002eea:	f002 fd11 	bl	8005910 <HAL_Delay>
	  ILI9341_FillScreen(&display, ILI9341_BLACK);
 8002eee:	2100      	movs	r1, #0
 8002ef0:	4806      	ldr	r0, [pc, #24]	@ (8002f0c <InitOscState+0x1e8>)
 8002ef2:	f7fe ffbe 	bl	8001e72 <ILI9341_FillScreen>
}
 8002ef6:	bf00      	nop
 8002ef8:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 8002efc:	46bd      	mov	sp, r7
 8002efe:	bd80      	pop	{r7, pc}
 8002f00:	20015624 	.word	0x20015624
 8002f04:	20015628 	.word	0x20015628
 8002f08:	20015a88 	.word	0x20015a88
 8002f0c:	2000f598 	.word	0x2000f598
 8002f10:	20015f4c 	.word	0x20015f4c
 8002f14:	40020400 	.word	0x40020400
 8002f18:	40020800 	.word	0x40020800
 8002f1c:	08013be8 	.word	0x08013be8
 8002f20:	20000008 	.word	0x20000008
 8002f24:	431bde83 	.word	0x431bde83
 8002f28:	08013bf8 	.word	0x08013bf8
 8002f2c:	08013c08 	.word	0x08013c08
 8002f30:	08013c18 	.word	0x08013c18
 8002f34:	08013c28 	.word	0x08013c28

08002f38 <drawAxis>:


static void drawAxis(ILI9341TypeDef *display)
{
 8002f38:	b580      	push	{r7, lr}
 8002f3a:	b088      	sub	sp, #32
 8002f3c:	af02      	add	r7, sp, #8
 8002f3e:	6078      	str	r0, [r7, #4]
	for (uint16_t i = 0; i < 9; i++) {
 8002f40:	2300      	movs	r3, #0
 8002f42:	82fb      	strh	r3, [r7, #22]
 8002f44:	e034      	b.n	8002fb0 <drawAxis+0x78>
		uint16_t y = 20 + 25 * i;
 8002f46:	8afb      	ldrh	r3, [r7, #22]
 8002f48:	461a      	mov	r2, r3
 8002f4a:	0092      	lsls	r2, r2, #2
 8002f4c:	4413      	add	r3, r2
 8002f4e:	461a      	mov	r2, r3
 8002f50:	0091      	lsls	r1, r2, #2
 8002f52:	461a      	mov	r2, r3
 8002f54:	460b      	mov	r3, r1
 8002f56:	4413      	add	r3, r2
 8002f58:	b29b      	uxth	r3, r3
 8002f5a:	3314      	adds	r3, #20
 8002f5c:	81bb      	strh	r3, [r7, #12]

		if (i == 0 || i == 8) {
 8002f5e:	8afb      	ldrh	r3, [r7, #22]
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d002      	beq.n	8002f6a <drawAxis+0x32>
 8002f64:	8afb      	ldrh	r3, [r7, #22]
 8002f66:	2b08      	cmp	r3, #8
 8002f68:	d10c      	bne.n	8002f84 <drawAxis+0x4c>
			ILI9341_FillRectangle(display, 20, y, 276, 1, ILI9341_WHITE);
 8002f6a:	89ba      	ldrh	r2, [r7, #12]
 8002f6c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002f70:	9301      	str	r3, [sp, #4]
 8002f72:	2301      	movs	r3, #1
 8002f74:	9300      	str	r3, [sp, #0]
 8002f76:	f44f 738a 	mov.w	r3, #276	@ 0x114
 8002f7a:	2114      	movs	r1, #20
 8002f7c:	6878      	ldr	r0, [r7, #4]
 8002f7e:	f7fe ffaa 	bl	8001ed6 <ILI9341_FillRectangle>
			continue;
 8002f82:	e012      	b.n	8002faa <drawAxis+0x72>
		}

		for (uint16_t j = 0; j < 276; j += 2)
 8002f84:	2300      	movs	r3, #0
 8002f86:	82bb      	strh	r3, [r7, #20]
 8002f88:	e00b      	b.n	8002fa2 <drawAxis+0x6a>
			ILI9341_DrawPixel(display, 20 + j, y, ILI9341_GRAY);
 8002f8a:	8abb      	ldrh	r3, [r7, #20]
 8002f8c:	3314      	adds	r3, #20
 8002f8e:	b299      	uxth	r1, r3
 8002f90:	89ba      	ldrh	r2, [r7, #12]
 8002f92:	f245 238a 	movw	r3, #21130	@ 0x528a
 8002f96:	6878      	ldr	r0, [r7, #4]
 8002f98:	f7fe fe92 	bl	8001cc0 <ILI9341_DrawPixel>
		for (uint16_t j = 0; j < 276; j += 2)
 8002f9c:	8abb      	ldrh	r3, [r7, #20]
 8002f9e:	3302      	adds	r3, #2
 8002fa0:	82bb      	strh	r3, [r7, #20]
 8002fa2:	8abb      	ldrh	r3, [r7, #20]
 8002fa4:	f5b3 7f8a 	cmp.w	r3, #276	@ 0x114
 8002fa8:	d3ef      	bcc.n	8002f8a <drawAxis+0x52>
	for (uint16_t i = 0; i < 9; i++) {
 8002faa:	8afb      	ldrh	r3, [r7, #22]
 8002fac:	3301      	adds	r3, #1
 8002fae:	82fb      	strh	r3, [r7, #22]
 8002fb0:	8afb      	ldrh	r3, [r7, #22]
 8002fb2:	2b08      	cmp	r3, #8
 8002fb4:	d9c7      	bls.n	8002f46 <drawAxis+0xe>
	}

	for (uint16_t i = 0; i < 12; i++) {
 8002fb6:	2300      	movs	r3, #0
 8002fb8:	827b      	strh	r3, [r7, #18]
 8002fba:	e032      	b.n	8003022 <drawAxis+0xea>
		uint16_t x = 20 + 25 * i;
 8002fbc:	8a7b      	ldrh	r3, [r7, #18]
 8002fbe:	461a      	mov	r2, r3
 8002fc0:	0092      	lsls	r2, r2, #2
 8002fc2:	4413      	add	r3, r2
 8002fc4:	461a      	mov	r2, r3
 8002fc6:	0091      	lsls	r1, r2, #2
 8002fc8:	461a      	mov	r2, r3
 8002fca:	460b      	mov	r3, r1
 8002fcc:	4413      	add	r3, r2
 8002fce:	b29b      	uxth	r3, r3
 8002fd0:	3314      	adds	r3, #20
 8002fd2:	81fb      	strh	r3, [r7, #14]

		if (i == 0 || i == 11) {
 8002fd4:	8a7b      	ldrh	r3, [r7, #18]
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d002      	beq.n	8002fe0 <drawAxis+0xa8>
 8002fda:	8a7b      	ldrh	r3, [r7, #18]
 8002fdc:	2b0b      	cmp	r3, #11
 8002fde:	d10b      	bne.n	8002ff8 <drawAxis+0xc0>
			ILI9341_FillRectangle(display, x, 20, 1, 200, ILI9341_WHITE);
 8002fe0:	89f9      	ldrh	r1, [r7, #14]
 8002fe2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002fe6:	9301      	str	r3, [sp, #4]
 8002fe8:	23c8      	movs	r3, #200	@ 0xc8
 8002fea:	9300      	str	r3, [sp, #0]
 8002fec:	2301      	movs	r3, #1
 8002fee:	2214      	movs	r2, #20
 8002ff0:	6878      	ldr	r0, [r7, #4]
 8002ff2:	f7fe ff70 	bl	8001ed6 <ILI9341_FillRectangle>
			continue;
 8002ff6:	e011      	b.n	800301c <drawAxis+0xe4>
		}

		for (uint16_t j = 0; j < 200; j += 2)
 8002ff8:	2300      	movs	r3, #0
 8002ffa:	823b      	strh	r3, [r7, #16]
 8002ffc:	e00b      	b.n	8003016 <drawAxis+0xde>
			ILI9341_DrawPixel(display, x, 20 + j, ILI9341_GRAY);
 8002ffe:	8a3b      	ldrh	r3, [r7, #16]
 8003000:	3314      	adds	r3, #20
 8003002:	b29a      	uxth	r2, r3
 8003004:	89f9      	ldrh	r1, [r7, #14]
 8003006:	f245 238a 	movw	r3, #21130	@ 0x528a
 800300a:	6878      	ldr	r0, [r7, #4]
 800300c:	f7fe fe58 	bl	8001cc0 <ILI9341_DrawPixel>
		for (uint16_t j = 0; j < 200; j += 2)
 8003010:	8a3b      	ldrh	r3, [r7, #16]
 8003012:	3302      	adds	r3, #2
 8003014:	823b      	strh	r3, [r7, #16]
 8003016:	8a3b      	ldrh	r3, [r7, #16]
 8003018:	2bc7      	cmp	r3, #199	@ 0xc7
 800301a:	d9f0      	bls.n	8002ffe <drawAxis+0xc6>
	for (uint16_t i = 0; i < 12; i++) {
 800301c:	8a7b      	ldrh	r3, [r7, #18]
 800301e:	3301      	adds	r3, #1
 8003020:	827b      	strh	r3, [r7, #18]
 8003022:	8a7b      	ldrh	r3, [r7, #18]
 8003024:	2b0b      	cmp	r3, #11
 8003026:	d9c9      	bls.n	8002fbc <drawAxis+0x84>
	}
}
 8003028:	bf00      	nop
 800302a:	bf00      	nop
 800302c:	3718      	adds	r7, #24
 800302e:	46bd      	mov	sp, r7
 8003030:	bd80      	pop	{r7, pc}

08003032 <clearCursor>:

static void clearCursor(ILI9341TypeDef *display, uint16_t pos)
{
 8003032:	b580      	push	{r7, lr}
 8003034:	b084      	sub	sp, #16
 8003036:	af02      	add	r7, sp, #8
 8003038:	6078      	str	r0, [r7, #4]
 800303a:	460b      	mov	r3, r1
 800303c:	807b      	strh	r3, [r7, #2]
	ILI9341_FillRectangle(display, 0, pos - 6, 20, 11, ILI9341_BLACK);
 800303e:	887b      	ldrh	r3, [r7, #2]
 8003040:	3b06      	subs	r3, #6
 8003042:	b29a      	uxth	r2, r3
 8003044:	2300      	movs	r3, #0
 8003046:	9301      	str	r3, [sp, #4]
 8003048:	230b      	movs	r3, #11
 800304a:	9300      	str	r3, [sp, #0]
 800304c:	2314      	movs	r3, #20
 800304e:	2100      	movs	r1, #0
 8003050:	6878      	ldr	r0, [r7, #4]
 8003052:	f7fe ff40 	bl	8001ed6 <ILI9341_FillRectangle>
}
 8003056:	bf00      	nop
 8003058:	3708      	adds	r7, #8
 800305a:	46bd      	mov	sp, r7
 800305c:	bd80      	pop	{r7, pc}

0800305e <clearTrigger>:

static void clearTrigger(ILI9341TypeDef *display, uint16_t pos)
{
 800305e:	b580      	push	{r7, lr}
 8003060:	b084      	sub	sp, #16
 8003062:	af02      	add	r7, sp, #8
 8003064:	6078      	str	r0, [r7, #4]
 8003066:	460b      	mov	r3, r1
 8003068:	807b      	strh	r3, [r7, #2]
	ILI9341_FillRectangle(display, 296, pos - 6, 20, 11, ILI9341_BLACK);
 800306a:	887b      	ldrh	r3, [r7, #2]
 800306c:	3b06      	subs	r3, #6
 800306e:	b29a      	uxth	r2, r3
 8003070:	2300      	movs	r3, #0
 8003072:	9301      	str	r3, [sp, #4]
 8003074:	230b      	movs	r3, #11
 8003076:	9300      	str	r3, [sp, #0]
 8003078:	2314      	movs	r3, #20
 800307a:	f44f 7194 	mov.w	r1, #296	@ 0x128
 800307e:	6878      	ldr	r0, [r7, #4]
 8003080:	f7fe ff29 	bl	8001ed6 <ILI9341_FillRectangle>
}
 8003084:	bf00      	nop
 8003086:	3708      	adds	r7, #8
 8003088:	46bd      	mov	sp, r7
 800308a:	bd80      	pop	{r7, pc}

0800308c <drawCursor>:

static void drawCursor(ILI9341TypeDef *display, uint16_t pos, char *name, uint16_t color)
{
 800308c:	b580      	push	{r7, lr}
 800308e:	b08a      	sub	sp, #40	@ 0x28
 8003090:	af04      	add	r7, sp, #16
 8003092:	60f8      	str	r0, [r7, #12]
 8003094:	607a      	str	r2, [r7, #4]
 8003096:	461a      	mov	r2, r3
 8003098:	460b      	mov	r3, r1
 800309a:	817b      	strh	r3, [r7, #10]
 800309c:	4613      	mov	r3, r2
 800309e:	813b      	strh	r3, [r7, #8]
	ILI9341_FillRectangle(display, 0, pos - 6, 7 * 2, 1, color);
 80030a0:	897b      	ldrh	r3, [r7, #10]
 80030a2:	3b06      	subs	r3, #6
 80030a4:	b29a      	uxth	r2, r3
 80030a6:	893b      	ldrh	r3, [r7, #8]
 80030a8:	9301      	str	r3, [sp, #4]
 80030aa:	2301      	movs	r3, #1
 80030ac:	9300      	str	r3, [sp, #0]
 80030ae:	230e      	movs	r3, #14
 80030b0:	2100      	movs	r1, #0
 80030b2:	68f8      	ldr	r0, [r7, #12]
 80030b4:	f7fe ff0f 	bl	8001ed6 <ILI9341_FillRectangle>
	ILI9341_WriteString(display, 0, pos - 5, name, Font_7x10, ILI9341_BLACK, color);
 80030b8:	897b      	ldrh	r3, [r7, #10]
 80030ba:	3b05      	subs	r3, #5
 80030bc:	b29a      	uxth	r2, r3
 80030be:	893b      	ldrh	r3, [r7, #8]
 80030c0:	9303      	str	r3, [sp, #12]
 80030c2:	2300      	movs	r3, #0
 80030c4:	9302      	str	r3, [sp, #8]
 80030c6:	4919      	ldr	r1, [pc, #100]	@ (800312c <drawCursor+0xa0>)
 80030c8:	466b      	mov	r3, sp
 80030ca:	c903      	ldmia	r1, {r0, r1}
 80030cc:	e883 0003 	stmia.w	r3, {r0, r1}
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	2100      	movs	r1, #0
 80030d4:	68f8      	ldr	r0, [r7, #12]
 80030d6:	f7ff f816 	bl	8002106 <ILI9341_WriteString>

	for (uint8_t i = 0; i < 6; i++) {
 80030da:	2300      	movs	r3, #0
 80030dc:	75fb      	strb	r3, [r7, #23]
 80030de:	e01d      	b.n	800311c <drawCursor+0x90>
		for (uint8_t j = i; j < 11 - i; j++)
 80030e0:	7dfb      	ldrb	r3, [r7, #23]
 80030e2:	75bb      	strb	r3, [r7, #22]
 80030e4:	e011      	b.n	800310a <drawCursor+0x7e>
			ILI9341_DrawPixel(display, 14 + i, pos - 6 + j, color);
 80030e6:	7dfb      	ldrb	r3, [r7, #23]
 80030e8:	b29b      	uxth	r3, r3
 80030ea:	330e      	adds	r3, #14
 80030ec:	b299      	uxth	r1, r3
 80030ee:	7dbb      	ldrb	r3, [r7, #22]
 80030f0:	b29a      	uxth	r2, r3
 80030f2:	897b      	ldrh	r3, [r7, #10]
 80030f4:	4413      	add	r3, r2
 80030f6:	b29b      	uxth	r3, r3
 80030f8:	3b06      	subs	r3, #6
 80030fa:	b29a      	uxth	r2, r3
 80030fc:	893b      	ldrh	r3, [r7, #8]
 80030fe:	68f8      	ldr	r0, [r7, #12]
 8003100:	f7fe fdde 	bl	8001cc0 <ILI9341_DrawPixel>
		for (uint8_t j = i; j < 11 - i; j++)
 8003104:	7dbb      	ldrb	r3, [r7, #22]
 8003106:	3301      	adds	r3, #1
 8003108:	75bb      	strb	r3, [r7, #22]
 800310a:	7dba      	ldrb	r2, [r7, #22]
 800310c:	7dfb      	ldrb	r3, [r7, #23]
 800310e:	f1c3 030b 	rsb	r3, r3, #11
 8003112:	429a      	cmp	r2, r3
 8003114:	dbe7      	blt.n	80030e6 <drawCursor+0x5a>
	for (uint8_t i = 0; i < 6; i++) {
 8003116:	7dfb      	ldrb	r3, [r7, #23]
 8003118:	3301      	adds	r3, #1
 800311a:	75fb      	strb	r3, [r7, #23]
 800311c:	7dfb      	ldrb	r3, [r7, #23]
 800311e:	2b05      	cmp	r3, #5
 8003120:	d9de      	bls.n	80030e0 <drawCursor+0x54>
	}
}
 8003122:	bf00      	nop
 8003124:	bf00      	nop
 8003126:	3718      	adds	r7, #24
 8003128:	46bd      	mov	sp, r7
 800312a:	bd80      	pop	{r7, pc}
 800312c:	20000000 	.word	0x20000000

08003130 <drawTrigger>:

static void drawTrigger(ILI9341TypeDef *display, uint16_t pos, char *name, uint16_t color)
{
 8003130:	b580      	push	{r7, lr}
 8003132:	b08a      	sub	sp, #40	@ 0x28
 8003134:	af04      	add	r7, sp, #16
 8003136:	60f8      	str	r0, [r7, #12]
 8003138:	607a      	str	r2, [r7, #4]
 800313a:	461a      	mov	r2, r3
 800313c:	460b      	mov	r3, r1
 800313e:	817b      	strh	r3, [r7, #10]
 8003140:	4613      	mov	r3, r2
 8003142:	813b      	strh	r3, [r7, #8]
	ILI9341_FillRectangle(display, 302, pos - 6, 7 * 2, 1, color);
 8003144:	897b      	ldrh	r3, [r7, #10]
 8003146:	3b06      	subs	r3, #6
 8003148:	b29a      	uxth	r2, r3
 800314a:	893b      	ldrh	r3, [r7, #8]
 800314c:	9301      	str	r3, [sp, #4]
 800314e:	2301      	movs	r3, #1
 8003150:	9300      	str	r3, [sp, #0]
 8003152:	230e      	movs	r3, #14
 8003154:	f44f 7197 	mov.w	r1, #302	@ 0x12e
 8003158:	68f8      	ldr	r0, [r7, #12]
 800315a:	f7fe febc 	bl	8001ed6 <ILI9341_FillRectangle>
	ILI9341_WriteString(display, 302, pos - 5, name, Font_7x10, ILI9341_BLACK, color);
 800315e:	897b      	ldrh	r3, [r7, #10]
 8003160:	3b05      	subs	r3, #5
 8003162:	b29a      	uxth	r2, r3
 8003164:	893b      	ldrh	r3, [r7, #8]
 8003166:	9303      	str	r3, [sp, #12]
 8003168:	2300      	movs	r3, #0
 800316a:	9302      	str	r3, [sp, #8]
 800316c:	491a      	ldr	r1, [pc, #104]	@ (80031d8 <drawTrigger+0xa8>)
 800316e:	466b      	mov	r3, sp
 8003170:	c903      	ldmia	r1, {r0, r1}
 8003172:	e883 0003 	stmia.w	r3, {r0, r1}
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	f44f 7197 	mov.w	r1, #302	@ 0x12e
 800317c:	68f8      	ldr	r0, [r7, #12]
 800317e:	f7fe ffc2 	bl	8002106 <ILI9341_WriteString>

	for (uint8_t i = 0; i < 6; i++) {
 8003182:	2300      	movs	r3, #0
 8003184:	75fb      	strb	r3, [r7, #23]
 8003186:	e01f      	b.n	80031c8 <drawTrigger+0x98>
		for (uint8_t j = i; j < 11 - i; j++)
 8003188:	7dfb      	ldrb	r3, [r7, #23]
 800318a:	75bb      	strb	r3, [r7, #22]
 800318c:	e013      	b.n	80031b6 <drawTrigger+0x86>
			ILI9341_DrawPixel(display, 301 - i, pos - 6 + j, color);
 800318e:	7dfb      	ldrb	r3, [r7, #23]
 8003190:	b29b      	uxth	r3, r3
 8003192:	f5c3 7396 	rsb	r3, r3, #300	@ 0x12c
 8003196:	3301      	adds	r3, #1
 8003198:	b299      	uxth	r1, r3
 800319a:	7dbb      	ldrb	r3, [r7, #22]
 800319c:	b29a      	uxth	r2, r3
 800319e:	897b      	ldrh	r3, [r7, #10]
 80031a0:	4413      	add	r3, r2
 80031a2:	b29b      	uxth	r3, r3
 80031a4:	3b06      	subs	r3, #6
 80031a6:	b29a      	uxth	r2, r3
 80031a8:	893b      	ldrh	r3, [r7, #8]
 80031aa:	68f8      	ldr	r0, [r7, #12]
 80031ac:	f7fe fd88 	bl	8001cc0 <ILI9341_DrawPixel>
		for (uint8_t j = i; j < 11 - i; j++)
 80031b0:	7dbb      	ldrb	r3, [r7, #22]
 80031b2:	3301      	adds	r3, #1
 80031b4:	75bb      	strb	r3, [r7, #22]
 80031b6:	7dba      	ldrb	r2, [r7, #22]
 80031b8:	7dfb      	ldrb	r3, [r7, #23]
 80031ba:	f1c3 030b 	rsb	r3, r3, #11
 80031be:	429a      	cmp	r2, r3
 80031c0:	dbe5      	blt.n	800318e <drawTrigger+0x5e>
	for (uint8_t i = 0; i < 6; i++) {
 80031c2:	7dfb      	ldrb	r3, [r7, #23]
 80031c4:	3301      	adds	r3, #1
 80031c6:	75fb      	strb	r3, [r7, #23]
 80031c8:	7dfb      	ldrb	r3, [r7, #23]
 80031ca:	2b05      	cmp	r3, #5
 80031cc:	d9dc      	bls.n	8003188 <drawTrigger+0x58>
	}
}
 80031ce:	bf00      	nop
 80031d0:	bf00      	nop
 80031d2:	3718      	adds	r7, #24
 80031d4:	46bd      	mov	sp, r7
 80031d6:	bd80      	pop	{r7, pc}
 80031d8:	20000000 	.word	0x20000000

080031dc <drawSignal>:

static void drawSignal(ILI9341TypeDef *display, uint32_t *adc_time, uint16_t *adc0, uint32_t adc_length, uint16_t pixel_dirty[280][2], uint16_t cursor, uint16_t color)
{
 80031dc:	b590      	push	{r4, r7, lr}
 80031de:	f2ad 6dd4 	subw	sp, sp, #1748	@ 0x6d4
 80031e2:	af00      	add	r7, sp, #0
 80031e4:	f507 64da 	add.w	r4, r7, #1744	@ 0x6d0
 80031e8:	f2a4 64c4 	subw	r4, r4, #1732	@ 0x6c4
 80031ec:	6020      	str	r0, [r4, #0]
 80031ee:	f507 60da 	add.w	r0, r7, #1744	@ 0x6d0
 80031f2:	f5a0 60d9 	sub.w	r0, r0, #1736	@ 0x6c8
 80031f6:	6001      	str	r1, [r0, #0]
 80031f8:	f507 61da 	add.w	r1, r7, #1744	@ 0x6d0
 80031fc:	f2a1 61cc 	subw	r1, r1, #1740	@ 0x6cc
 8003200:	600a      	str	r2, [r1, #0]
 8003202:	f507 62da 	add.w	r2, r7, #1744	@ 0x6d0
 8003206:	f5a2 62da 	sub.w	r2, r2, #1744	@ 0x6d0
 800320a:	6013      	str	r3, [r2, #0]
	uint16_t point[280];
	for (uint16_t i = 0; i < 280; i++)
 800320c:	2300      	movs	r3, #0
 800320e:	f8a7 36ce 	strh.w	r3, [r7, #1742]	@ 0x6ce
 8003212:	e00d      	b.n	8003230 <drawSignal+0x54>
		point[i] = 0;
 8003214:	f8b7 26ce 	ldrh.w	r2, [r7, #1742]	@ 0x6ce
 8003218:	f507 63da 	add.w	r3, r7, #1744	@ 0x6d0
 800321c:	f5a3 7318 	sub.w	r3, r3, #608	@ 0x260
 8003220:	2100      	movs	r1, #0
 8003222:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	for (uint16_t i = 0; i < 280; i++)
 8003226:	f8b7 36ce 	ldrh.w	r3, [r7, #1742]	@ 0x6ce
 800322a:	3301      	adds	r3, #1
 800322c:	f8a7 36ce 	strh.w	r3, [r7, #1742]	@ 0x6ce
 8003230:	f8b7 36ce 	ldrh.w	r3, [r7, #1742]	@ 0x6ce
 8003234:	f5b3 7f8c 	cmp.w	r3, #280	@ 0x118
 8003238:	d3ec      	bcc.n	8003214 <drawSignal+0x38>

	for (uint16_t i = 0; i < adc_length; i++) {
 800323a:	2300      	movs	r3, #0
 800323c:	f8a7 36cc 	strh.w	r3, [r7, #1740]	@ 0x6cc
 8003240:	e0a5      	b.n	800338e <drawSignal+0x1b2>

		float uV = (float)(adc0[i]) * 3300000.0f / 4096.0f;
 8003242:	f8b7 36cc 	ldrh.w	r3, [r7, #1740]	@ 0x6cc
 8003246:	005b      	lsls	r3, r3, #1
 8003248:	f507 62da 	add.w	r2, r7, #1744	@ 0x6d0
 800324c:	f2a2 62cc 	subw	r2, r2, #1740	@ 0x6cc
 8003250:	6812      	ldr	r2, [r2, #0]
 8003252:	4413      	add	r3, r2
 8003254:	881b      	ldrh	r3, [r3, #0]
 8003256:	ee07 3a90 	vmov	s15, r3
 800325a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800325e:	ed9f 7aa1 	vldr	s14, [pc, #644]	@ 80034e4 <drawSignal+0x308>
 8003262:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003266:	eddf 6aa0 	vldr	s13, [pc, #640]	@ 80034e8 <drawSignal+0x30c>
 800326a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800326e:	f507 63d4 	add.w	r3, r7, #1696	@ 0x6a0
 8003272:	edc3 7a00 	vstr	s15, [r3]
		uint16_t x = (float)(adc_time[i]) * 280.0f / (float)(12.0f * xlim_us);
 8003276:	f8b7 36cc 	ldrh.w	r3, [r7, #1740]	@ 0x6cc
 800327a:	009b      	lsls	r3, r3, #2
 800327c:	f507 62da 	add.w	r2, r7, #1744	@ 0x6d0
 8003280:	f5a2 62d9 	sub.w	r2, r2, #1736	@ 0x6c8
 8003284:	6812      	ldr	r2, [r2, #0]
 8003286:	4413      	add	r3, r2
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	ee07 3a90 	vmov	s15, r3
 800328e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003292:	ed9f 7a96 	vldr	s14, [pc, #600]	@ 80034ec <drawSignal+0x310>
 8003296:	ee67 6a87 	vmul.f32	s13, s15, s14
 800329a:	4b95      	ldr	r3, [pc, #596]	@ (80034f0 <drawSignal+0x314>)
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	ee07 3a90 	vmov	s15, r3
 80032a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80032a6:	eeb2 7a08 	vmov.f32	s14, #40	@ 0x41400000  12.0
 80032aa:	ee27 7a87 	vmul.f32	s14, s15, s14
 80032ae:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80032b2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80032b6:	ee17 3a90 	vmov	r3, s15
 80032ba:	f8a7 36ca 	strh.w	r3, [r7, #1738]	@ 0x6ca
		uint16_t y = cursor - ((uV / (float)(ylim_uV)) * 200.0f / 8.0f);
 80032be:	f8b7 36e4 	ldrh.w	r3, [r7, #1764]	@ 0x6e4
 80032c2:	ee07 3a90 	vmov	s15, r3
 80032c6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80032ca:	4b8a      	ldr	r3, [pc, #552]	@ (80034f4 <drawSignal+0x318>)
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	ee07 3a90 	vmov	s15, r3
 80032d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80032d6:	f507 63d4 	add.w	r3, r7, #1696	@ 0x6a0
 80032da:	ed93 6a00 	vldr	s12, [r3]
 80032de:	eec6 7a26 	vdiv.f32	s15, s12, s13
 80032e2:	eddf 6a85 	vldr	s13, [pc, #532]	@ 80034f8 <drawSignal+0x31c>
 80032e6:	ee67 6aa6 	vmul.f32	s13, s15, s13
 80032ea:	eeb2 6a00 	vmov.f32	s12, #32	@ 0x41000000  8.0
 80032ee:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80032f2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80032f6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80032fa:	ee17 3a90 	vmov	r3, s15
 80032fe:	f8a7 36c8 	strh.w	r3, [r7, #1736]	@ 0x6c8

		if (x < 0)
			x = 0;

		if (x > 274)
 8003302:	f8b7 36ca 	ldrh.w	r3, [r7, #1738]	@ 0x6ca
 8003306:	f5b3 7f89 	cmp.w	r3, #274	@ 0x112
 800330a:	d903      	bls.n	8003314 <drawSignal+0x138>
			x = 274;
 800330c:	f44f 7389 	mov.w	r3, #274	@ 0x112
 8003310:	f8a7 36ca 	strh.w	r3, [r7, #1738]	@ 0x6ca

		if (y < 21)
 8003314:	f8b7 36c8 	ldrh.w	r3, [r7, #1736]	@ 0x6c8
 8003318:	2b14      	cmp	r3, #20
 800331a:	d802      	bhi.n	8003322 <drawSignal+0x146>
			y = 21;
 800331c:	2315      	movs	r3, #21
 800331e:	f8a7 36c8 	strh.w	r3, [r7, #1736]	@ 0x6c8

		if (y > 219)
 8003322:	f8b7 36c8 	ldrh.w	r3, [r7, #1736]	@ 0x6c8
 8003326:	2bdb      	cmp	r3, #219	@ 0xdb
 8003328:	d902      	bls.n	8003330 <drawSignal+0x154>
			y = 219;
 800332a:	23db      	movs	r3, #219	@ 0xdb
 800332c:	f8a7 36c8 	strh.w	r3, [r7, #1736]	@ 0x6c8

		point[x] += (float)(y - point[x]) * 1.0f;
 8003330:	f8b7 26ca 	ldrh.w	r2, [r7, #1738]	@ 0x6ca
 8003334:	f507 63da 	add.w	r3, r7, #1744	@ 0x6d0
 8003338:	f5a3 7318 	sub.w	r3, r3, #608	@ 0x260
 800333c:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8003340:	ee07 3a90 	vmov	s15, r3
 8003344:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003348:	f8b7 36c8 	ldrh.w	r3, [r7, #1736]	@ 0x6c8
 800334c:	f8b7 16ca 	ldrh.w	r1, [r7, #1738]	@ 0x6ca
 8003350:	f507 62da 	add.w	r2, r7, #1744	@ 0x6d0
 8003354:	f5a2 7218 	sub.w	r2, r2, #608	@ 0x260
 8003358:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 800335c:	1a9b      	subs	r3, r3, r2
 800335e:	ee07 3a90 	vmov	s15, r3
 8003362:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003366:	ee77 7a27 	vadd.f32	s15, s14, s15
 800336a:	f8b7 26ca 	ldrh.w	r2, [r7, #1738]	@ 0x6ca
 800336e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003372:	ee17 3a90 	vmov	r3, s15
 8003376:	b299      	uxth	r1, r3
 8003378:	f507 63da 	add.w	r3, r7, #1744	@ 0x6d0
 800337c:	f5a3 7318 	sub.w	r3, r3, #608	@ 0x260
 8003380:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	for (uint16_t i = 0; i < adc_length; i++) {
 8003384:	f8b7 36cc 	ldrh.w	r3, [r7, #1740]	@ 0x6cc
 8003388:	3301      	adds	r3, #1
 800338a:	f8a7 36cc 	strh.w	r3, [r7, #1740]	@ 0x6cc
 800338e:	f8b7 36cc 	ldrh.w	r3, [r7, #1740]	@ 0x6cc
 8003392:	f507 62da 	add.w	r2, r7, #1744	@ 0x6d0
 8003396:	f5a2 62da 	sub.w	r2, r2, #1744	@ 0x6d0
 800339a:	6812      	ldr	r2, [r2, #0]
 800339c:	429a      	cmp	r2, r3
 800339e:	f63f af50 	bhi.w	8003242 <drawSignal+0x66>
	}

	uint16_t pixel[280][2];
	for (uint16_t i = 0; i < 280; i++) {
 80033a2:	2300      	movs	r3, #0
 80033a4:	f8a7 36c6 	strh.w	r3, [r7, #1734]	@ 0x6c6
 80033a8:	e017      	b.n	80033da <drawSignal+0x1fe>
		pixel[i][0] = 220;
 80033aa:	f8b7 26c6 	ldrh.w	r2, [r7, #1734]	@ 0x6c6
 80033ae:	f507 63da 	add.w	r3, r7, #1744	@ 0x6d0
 80033b2:	f5a3 63d8 	sub.w	r3, r3, #1728	@ 0x6c0
 80033b6:	21dc      	movs	r1, #220	@ 0xdc
 80033b8:	f823 1022 	strh.w	r1, [r3, r2, lsl #2]
		pixel[i][1] = 20;
 80033bc:	f8b7 36c6 	ldrh.w	r3, [r7, #1734]	@ 0x6c6
 80033c0:	f507 62da 	add.w	r2, r7, #1744	@ 0x6d0
 80033c4:	f5a2 62d8 	sub.w	r2, r2, #1728	@ 0x6c0
 80033c8:	009b      	lsls	r3, r3, #2
 80033ca:	4413      	add	r3, r2
 80033cc:	2214      	movs	r2, #20
 80033ce:	805a      	strh	r2, [r3, #2]
	for (uint16_t i = 0; i < 280; i++) {
 80033d0:	f8b7 36c6 	ldrh.w	r3, [r7, #1734]	@ 0x6c6
 80033d4:	3301      	adds	r3, #1
 80033d6:	f8a7 36c6 	strh.w	r3, [r7, #1734]	@ 0x6c6
 80033da:	f8b7 36c6 	ldrh.w	r3, [r7, #1734]	@ 0x6c6
 80033de:	f5b3 7f8c 	cmp.w	r3, #280	@ 0x118
 80033e2:	d3e2      	bcc.n	80033aa <drawSignal+0x1ce>
	}

	for (uint16_t i = 1; i <= 279; i++) {
 80033e4:	2301      	movs	r3, #1
 80033e6:	f8a7 36c4 	strh.w	r3, [r7, #1732]	@ 0x6c4
 80033ea:	e11b      	b.n	8003624 <drawSignal+0x448>

		if (point[i] == 0)
 80033ec:	f8b7 26c4 	ldrh.w	r2, [r7, #1732]	@ 0x6c4
 80033f0:	f507 63da 	add.w	r3, r7, #1744	@ 0x6d0
 80033f4:	f5a3 7318 	sub.w	r3, r3, #608	@ 0x260
 80033f8:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	f000 8105 	beq.w	800360c <drawSignal+0x430>
			continue;

		int16_t x1 = i;
 8003402:	f8b7 36c4 	ldrh.w	r3, [r7, #1732]	@ 0x6c4
 8003406:	f8a7 36b2 	strh.w	r3, [r7, #1714]	@ 0x6b2
		int16_t x0 = x1 - 1;
 800340a:	f8b7 36b2 	ldrh.w	r3, [r7, #1714]	@ 0x6b2
 800340e:	3b01      	subs	r3, #1
 8003410:	b29b      	uxth	r3, r3
 8003412:	f8a7 36c2 	strh.w	r3, [r7, #1730]	@ 0x6c2

		for (; x0 >= 0; x0--) {
 8003416:	e010      	b.n	800343a <drawSignal+0x25e>
			if (point[x0] != 0)
 8003418:	f9b7 26c2 	ldrsh.w	r2, [r7, #1730]	@ 0x6c2
 800341c:	f507 63da 	add.w	r3, r7, #1744	@ 0x6d0
 8003420:	f5a3 7318 	sub.w	r3, r3, #608	@ 0x260
 8003424:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8003428:	2b00      	cmp	r3, #0
 800342a:	d10b      	bne.n	8003444 <drawSignal+0x268>
		for (; x0 >= 0; x0--) {
 800342c:	f9b7 36c2 	ldrsh.w	r3, [r7, #1730]	@ 0x6c2
 8003430:	b29b      	uxth	r3, r3
 8003432:	3b01      	subs	r3, #1
 8003434:	b29b      	uxth	r3, r3
 8003436:	f8a7 36c2 	strh.w	r3, [r7, #1730]	@ 0x6c2
 800343a:	f9b7 36c2 	ldrsh.w	r3, [r7, #1730]	@ 0x6c2
 800343e:	2b00      	cmp	r3, #0
 8003440:	daea      	bge.n	8003418 <drawSignal+0x23c>
 8003442:	e000      	b.n	8003446 <drawSignal+0x26a>
				break;
 8003444:	bf00      	nop
		}

		if (x0 == 0 && point[x0] == 0)
 8003446:	f9b7 36c2 	ldrsh.w	r3, [r7, #1730]	@ 0x6c2
 800344a:	2b00      	cmp	r3, #0
 800344c:	d10a      	bne.n	8003464 <drawSignal+0x288>
 800344e:	f9b7 26c2 	ldrsh.w	r2, [r7, #1730]	@ 0x6c2
 8003452:	f507 63da 	add.w	r3, r7, #1744	@ 0x6d0
 8003456:	f5a3 7318 	sub.w	r3, r3, #608	@ 0x260
 800345a:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800345e:	2b00      	cmp	r3, #0
 8003460:	f000 81fa 	beq.w	8003858 <drawSignal+0x67c>
			return;

		int16_t y0 = point[x0];
 8003464:	f9b7 26c2 	ldrsh.w	r2, [r7, #1730]	@ 0x6c2
 8003468:	f507 63da 	add.w	r3, r7, #1744	@ 0x6d0
 800346c:	f5a3 7318 	sub.w	r3, r3, #608	@ 0x260
 8003470:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8003474:	f8a7 36c0 	strh.w	r3, [r7, #1728]	@ 0x6c0
		int16_t y1 = point[x1];
 8003478:	f9b7 26b2 	ldrsh.w	r2, [r7, #1714]	@ 0x6b2
 800347c:	f507 63da 	add.w	r3, r7, #1744	@ 0x6d0
 8003480:	f5a3 7318 	sub.w	r3, r3, #608	@ 0x260
 8003484:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8003488:	f8a7 36b0 	strh.w	r3, [r7, #1712]	@ 0x6b0

		int16_t dx = (x1 - x0) > 0 ? (x1 - x0) : -(x1 - x0);
 800348c:	f9b7 26b2 	ldrsh.w	r2, [r7, #1714]	@ 0x6b2
 8003490:	f9b7 36c2 	ldrsh.w	r3, [r7, #1730]	@ 0x6c2
 8003494:	1ad3      	subs	r3, r2, r3
 8003496:	2b00      	cmp	r3, #0
 8003498:	bfb8      	it	lt
 800349a:	425b      	neglt	r3, r3
 800349c:	f8a7 36ae 	strh.w	r3, [r7, #1710]	@ 0x6ae
		int16_t sx = x0 < x1 ? 1 : -1;
 80034a0:	f9b7 26c2 	ldrsh.w	r2, [r7, #1730]	@ 0x6c2
 80034a4:	f9b7 36b2 	ldrsh.w	r3, [r7, #1714]	@ 0x6b2
 80034a8:	429a      	cmp	r2, r3
 80034aa:	da01      	bge.n	80034b0 <drawSignal+0x2d4>
 80034ac:	2301      	movs	r3, #1
 80034ae:	e001      	b.n	80034b4 <drawSignal+0x2d8>
 80034b0:	f04f 33ff 	mov.w	r3, #4294967295
 80034b4:	f8a7 36ac 	strh.w	r3, [r7, #1708]	@ 0x6ac
		int16_t dy = (y1 - y0) > 0 ? -(y1 - y0) : (y1 - y0);
 80034b8:	f9b7 26b0 	ldrsh.w	r2, [r7, #1712]	@ 0x6b0
 80034bc:	f9b7 36c0 	ldrsh.w	r3, [r7, #1728]	@ 0x6c0
 80034c0:	1ad3      	subs	r3, r2, r3
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	bfb8      	it	lt
 80034c6:	425b      	neglt	r3, r3
 80034c8:	b29b      	uxth	r3, r3
 80034ca:	425b      	negs	r3, r3
 80034cc:	b29b      	uxth	r3, r3
 80034ce:	f8a7 36aa 	strh.w	r3, [r7, #1706]	@ 0x6aa
		int16_t sy = y0 < y1 ? 1 : -1;
 80034d2:	f9b7 26c0 	ldrsh.w	r2, [r7, #1728]	@ 0x6c0
 80034d6:	f9b7 36b0 	ldrsh.w	r3, [r7, #1712]	@ 0x6b0
 80034da:	429a      	cmp	r2, r3
 80034dc:	da0e      	bge.n	80034fc <drawSignal+0x320>
 80034de:	2301      	movs	r3, #1
 80034e0:	e00e      	b.n	8003500 <drawSignal+0x324>
 80034e2:	bf00      	nop
 80034e4:	4a496a80 	.word	0x4a496a80
 80034e8:	45800000 	.word	0x45800000
 80034ec:	438c0000 	.word	0x438c0000
 80034f0:	2000d0ec 	.word	0x2000d0ec
 80034f4:	2000d0f0 	.word	0x2000d0f0
 80034f8:	43480000 	.word	0x43480000
 80034fc:	f04f 33ff 	mov.w	r3, #4294967295
 8003500:	f8a7 36a8 	strh.w	r3, [r7, #1704]	@ 0x6a8
		int16_t error = dx + dy;
 8003504:	f8b7 26ae 	ldrh.w	r2, [r7, #1710]	@ 0x6ae
 8003508:	f8b7 36aa 	ldrh.w	r3, [r7, #1706]	@ 0x6aa
 800350c:	4413      	add	r3, r2
 800350e:	b29b      	uxth	r3, r3
 8003510:	f8a7 36be 	strh.w	r3, [r7, #1726]	@ 0x6be

		while (1) {

			if (pixel[x0][0] > y0)
 8003514:	f9b7 26c2 	ldrsh.w	r2, [r7, #1730]	@ 0x6c2
 8003518:	f507 63da 	add.w	r3, r7, #1744	@ 0x6d0
 800351c:	f5a3 63d8 	sub.w	r3, r3, #1728	@ 0x6c0
 8003520:	f833 3022 	ldrh.w	r3, [r3, r2, lsl #2]
 8003524:	461a      	mov	r2, r3
 8003526:	f9b7 36c0 	ldrsh.w	r3, [r7, #1728]	@ 0x6c0
 800352a:	429a      	cmp	r2, r3
 800352c:	dd09      	ble.n	8003542 <drawSignal+0x366>
				pixel[x0][0] = y0;
 800352e:	f9b7 26c2 	ldrsh.w	r2, [r7, #1730]	@ 0x6c2
 8003532:	f8b7 16c0 	ldrh.w	r1, [r7, #1728]	@ 0x6c0
 8003536:	f507 63da 	add.w	r3, r7, #1744	@ 0x6d0
 800353a:	f5a3 63d8 	sub.w	r3, r3, #1728	@ 0x6c0
 800353e:	f823 1022 	strh.w	r1, [r3, r2, lsl #2]

			if (pixel[x0][1] < y0)
 8003542:	f9b7 36c2 	ldrsh.w	r3, [r7, #1730]	@ 0x6c2
 8003546:	f507 62da 	add.w	r2, r7, #1744	@ 0x6d0
 800354a:	f5a2 62d8 	sub.w	r2, r2, #1728	@ 0x6c0
 800354e:	009b      	lsls	r3, r3, #2
 8003550:	4413      	add	r3, r2
 8003552:	885b      	ldrh	r3, [r3, #2]
 8003554:	461a      	mov	r2, r3
 8003556:	f9b7 36c0 	ldrsh.w	r3, [r7, #1728]	@ 0x6c0
 800355a:	429a      	cmp	r2, r3
 800355c:	da0b      	bge.n	8003576 <drawSignal+0x39a>
				pixel[x0][1] = y0;
 800355e:	f9b7 36c2 	ldrsh.w	r3, [r7, #1730]	@ 0x6c2
 8003562:	f8b7 16c0 	ldrh.w	r1, [r7, #1728]	@ 0x6c0
 8003566:	f507 62da 	add.w	r2, r7, #1744	@ 0x6d0
 800356a:	f5a2 62d8 	sub.w	r2, r2, #1728	@ 0x6c0
 800356e:	009b      	lsls	r3, r3, #2
 8003570:	4413      	add	r3, r2
 8003572:	460a      	mov	r2, r1
 8003574:	805a      	strh	r2, [r3, #2]

			if (x0 == x1 && y0 == y1)
 8003576:	f9b7 26c2 	ldrsh.w	r2, [r7, #1730]	@ 0x6c2
 800357a:	f9b7 36b2 	ldrsh.w	r3, [r7, #1714]	@ 0x6b2
 800357e:	429a      	cmp	r2, r3
 8003580:	d105      	bne.n	800358e <drawSignal+0x3b2>
 8003582:	f9b7 26c0 	ldrsh.w	r2, [r7, #1728]	@ 0x6c0
 8003586:	f9b7 36b0 	ldrsh.w	r3, [r7, #1712]	@ 0x6b0
 800358a:	429a      	cmp	r2, r3
 800358c:	d040      	beq.n	8003610 <drawSignal+0x434>
				break;

			int16_t e2 = 2 * error;
 800358e:	f8b7 36be 	ldrh.w	r3, [r7, #1726]	@ 0x6be
 8003592:	005b      	lsls	r3, r3, #1
 8003594:	b29b      	uxth	r3, r3
 8003596:	f8a7 36a6 	strh.w	r3, [r7, #1702]	@ 0x6a6

			if (e2 >= dy) {
 800359a:	f9b7 26a6 	ldrsh.w	r2, [r7, #1702]	@ 0x6a6
 800359e:	f9b7 36aa 	ldrsh.w	r3, [r7, #1706]	@ 0x6aa
 80035a2:	429a      	cmp	r2, r3
 80035a4:	db15      	blt.n	80035d2 <drawSignal+0x3f6>
				if (x0 == x1)
 80035a6:	f9b7 26c2 	ldrsh.w	r2, [r7, #1730]	@ 0x6c2
 80035aa:	f9b7 36b2 	ldrsh.w	r3, [r7, #1714]	@ 0x6b2
 80035ae:	429a      	cmp	r2, r3
 80035b0:	d030      	beq.n	8003614 <drawSignal+0x438>
					break;

				error = error + dy;
 80035b2:	f8b7 26be 	ldrh.w	r2, [r7, #1726]	@ 0x6be
 80035b6:	f8b7 36aa 	ldrh.w	r3, [r7, #1706]	@ 0x6aa
 80035ba:	4413      	add	r3, r2
 80035bc:	b29b      	uxth	r3, r3
 80035be:	f8a7 36be 	strh.w	r3, [r7, #1726]	@ 0x6be
				x0 = x0 + sx;
 80035c2:	f8b7 26c2 	ldrh.w	r2, [r7, #1730]	@ 0x6c2
 80035c6:	f8b7 36ac 	ldrh.w	r3, [r7, #1708]	@ 0x6ac
 80035ca:	4413      	add	r3, r2
 80035cc:	b29b      	uxth	r3, r3
 80035ce:	f8a7 36c2 	strh.w	r3, [r7, #1730]	@ 0x6c2
			}

			if (e2 <= dx) {
 80035d2:	f9b7 26a6 	ldrsh.w	r2, [r7, #1702]	@ 0x6a6
 80035d6:	f9b7 36ae 	ldrsh.w	r3, [r7, #1710]	@ 0x6ae
 80035da:	429a      	cmp	r2, r3
 80035dc:	dc9a      	bgt.n	8003514 <drawSignal+0x338>
				if (y0 == y1)
 80035de:	f9b7 26c0 	ldrsh.w	r2, [r7, #1728]	@ 0x6c0
 80035e2:	f9b7 36b0 	ldrsh.w	r3, [r7, #1712]	@ 0x6b0
 80035e6:	429a      	cmp	r2, r3
 80035e8:	d016      	beq.n	8003618 <drawSignal+0x43c>
					break;

				error = error + dx;
 80035ea:	f8b7 26be 	ldrh.w	r2, [r7, #1726]	@ 0x6be
 80035ee:	f8b7 36ae 	ldrh.w	r3, [r7, #1710]	@ 0x6ae
 80035f2:	4413      	add	r3, r2
 80035f4:	b29b      	uxth	r3, r3
 80035f6:	f8a7 36be 	strh.w	r3, [r7, #1726]	@ 0x6be
				y0 = y0 + sy;
 80035fa:	f8b7 26c0 	ldrh.w	r2, [r7, #1728]	@ 0x6c0
 80035fe:	f8b7 36a8 	ldrh.w	r3, [r7, #1704]	@ 0x6a8
 8003602:	4413      	add	r3, r2
 8003604:	b29b      	uxth	r3, r3
 8003606:	f8a7 36c0 	strh.w	r3, [r7, #1728]	@ 0x6c0
		while (1) {
 800360a:	e783      	b.n	8003514 <drawSignal+0x338>
			continue;
 800360c:	bf00      	nop
 800360e:	e004      	b.n	800361a <drawSignal+0x43e>
				break;
 8003610:	bf00      	nop
 8003612:	e002      	b.n	800361a <drawSignal+0x43e>
					break;
 8003614:	bf00      	nop
 8003616:	e000      	b.n	800361a <drawSignal+0x43e>
					break;
 8003618:	bf00      	nop
	for (uint16_t i = 1; i <= 279; i++) {
 800361a:	f8b7 36c4 	ldrh.w	r3, [r7, #1732]	@ 0x6c4
 800361e:	3301      	adds	r3, #1
 8003620:	f8a7 36c4 	strh.w	r3, [r7, #1732]	@ 0x6c4
 8003624:	f8b7 36c4 	ldrh.w	r3, [r7, #1732]	@ 0x6c4
 8003628:	f5b3 7f8c 	cmp.w	r3, #280	@ 0x118
 800362c:	f4ff aede 	bcc.w	80033ec <drawSignal+0x210>
			}
		}
	}

	for (uint16_t i = 1; i <= 279; i++) {
 8003630:	2301      	movs	r3, #1
 8003632:	f8a7 36bc 	strh.w	r3, [r7, #1724]	@ 0x6bc
 8003636:	e108      	b.n	800384a <drawSignal+0x66e>
		uint16_t min = pixel[i][0] < pixel_dirty[i][0] ? pixel[i][0] : pixel_dirty[i][0];
 8003638:	f8b7 36bc 	ldrh.w	r3, [r7, #1724]	@ 0x6bc
 800363c:	009b      	lsls	r3, r3, #2
 800363e:	f8d7 26e0 	ldr.w	r2, [r7, #1760]	@ 0x6e0
 8003642:	4413      	add	r3, r2
 8003644:	881a      	ldrh	r2, [r3, #0]
 8003646:	f8b7 16bc 	ldrh.w	r1, [r7, #1724]	@ 0x6bc
 800364a:	f507 63da 	add.w	r3, r7, #1744	@ 0x6d0
 800364e:	f5a3 63d8 	sub.w	r3, r3, #1728	@ 0x6c0
 8003652:	f833 3021 	ldrh.w	r3, [r3, r1, lsl #2]
 8003656:	4293      	cmp	r3, r2
 8003658:	bf28      	it	cs
 800365a:	4613      	movcs	r3, r2
 800365c:	f8a7 36b6 	strh.w	r3, [r7, #1718]	@ 0x6b6
		uint16_t max = pixel[i][1] > pixel_dirty[i][1] ? pixel[i][1] : pixel_dirty[i][1];
 8003660:	f8b7 36bc 	ldrh.w	r3, [r7, #1724]	@ 0x6bc
 8003664:	009b      	lsls	r3, r3, #2
 8003666:	f8d7 26e0 	ldr.w	r2, [r7, #1760]	@ 0x6e0
 800366a:	4413      	add	r3, r2
 800366c:	885a      	ldrh	r2, [r3, #2]
 800366e:	f8b7 36bc 	ldrh.w	r3, [r7, #1724]	@ 0x6bc
 8003672:	f507 61da 	add.w	r1, r7, #1744	@ 0x6d0
 8003676:	f5a1 61d8 	sub.w	r1, r1, #1728	@ 0x6c0
 800367a:	009b      	lsls	r3, r3, #2
 800367c:	440b      	add	r3, r1
 800367e:	885b      	ldrh	r3, [r3, #2]
 8003680:	4293      	cmp	r3, r2
 8003682:	bf38      	it	cc
 8003684:	4613      	movcc	r3, r2
 8003686:	f8a7 36b4 	strh.w	r3, [r7, #1716]	@ 0x6b4

		for (uint16_t j = min; j <= max; j++) {
 800368a:	f8b7 36b6 	ldrh.w	r3, [r7, #1718]	@ 0x6b6
 800368e:	f8a7 36ba 	strh.w	r3, [r7, #1722]	@ 0x6ba
 8003692:	e0af      	b.n	80037f4 <drawSignal+0x618>
			uint8_t draw = 0;
 8003694:	2300      	movs	r3, #0
 8003696:	f887 36b9 	strb.w	r3, [r7, #1721]	@ 0x6b9
			if (j >= pixel[i][0] && j <= pixel[i][1])
 800369a:	f8b7 26bc 	ldrh.w	r2, [r7, #1724]	@ 0x6bc
 800369e:	f507 63da 	add.w	r3, r7, #1744	@ 0x6d0
 80036a2:	f5a3 63d8 	sub.w	r3, r3, #1728	@ 0x6c0
 80036a6:	f833 3022 	ldrh.w	r3, [r3, r2, lsl #2]
 80036aa:	f8b7 26ba 	ldrh.w	r2, [r7, #1722]	@ 0x6ba
 80036ae:	429a      	cmp	r2, r3
 80036b0:	d30f      	bcc.n	80036d2 <drawSignal+0x4f6>
 80036b2:	f8b7 36bc 	ldrh.w	r3, [r7, #1724]	@ 0x6bc
 80036b6:	f507 62da 	add.w	r2, r7, #1744	@ 0x6d0
 80036ba:	f5a2 62d8 	sub.w	r2, r2, #1728	@ 0x6c0
 80036be:	009b      	lsls	r3, r3, #2
 80036c0:	4413      	add	r3, r2
 80036c2:	885b      	ldrh	r3, [r3, #2]
 80036c4:	f8b7 26ba 	ldrh.w	r2, [r7, #1722]	@ 0x6ba
 80036c8:	429a      	cmp	r2, r3
 80036ca:	d802      	bhi.n	80036d2 <drawSignal+0x4f6>
				draw = 1;
 80036cc:	2301      	movs	r3, #1
 80036ce:	f887 36b9 	strb.w	r3, [r7, #1721]	@ 0x6b9

			uint8_t clear = 0;
 80036d2:	2300      	movs	r3, #0
 80036d4:	f887 36b8 	strb.w	r3, [r7, #1720]	@ 0x6b8
			if (j >= pixel_dirty[i][0] && j <= pixel_dirty[i][1])
 80036d8:	f8b7 36bc 	ldrh.w	r3, [r7, #1724]	@ 0x6bc
 80036dc:	009b      	lsls	r3, r3, #2
 80036de:	f8d7 26e0 	ldr.w	r2, [r7, #1760]	@ 0x6e0
 80036e2:	4413      	add	r3, r2
 80036e4:	881b      	ldrh	r3, [r3, #0]
 80036e6:	f8b7 26ba 	ldrh.w	r2, [r7, #1722]	@ 0x6ba
 80036ea:	429a      	cmp	r2, r3
 80036ec:	d30d      	bcc.n	800370a <drawSignal+0x52e>
 80036ee:	f8b7 36bc 	ldrh.w	r3, [r7, #1724]	@ 0x6bc
 80036f2:	009b      	lsls	r3, r3, #2
 80036f4:	f8d7 26e0 	ldr.w	r2, [r7, #1760]	@ 0x6e0
 80036f8:	4413      	add	r3, r2
 80036fa:	885b      	ldrh	r3, [r3, #2]
 80036fc:	f8b7 26ba 	ldrh.w	r2, [r7, #1722]	@ 0x6ba
 8003700:	429a      	cmp	r2, r3
 8003702:	d802      	bhi.n	800370a <drawSignal+0x52e>
				clear = 1;
 8003704:	2301      	movs	r3, #1
 8003706:	f887 36b8 	strb.w	r3, [r7, #1720]	@ 0x6b8

			if (draw && !clear && j > 21)
 800370a:	f897 36b9 	ldrb.w	r3, [r7, #1721]	@ 0x6b9
 800370e:	2b00      	cmp	r3, #0
 8003710:	d016      	beq.n	8003740 <drawSignal+0x564>
 8003712:	f897 36b8 	ldrb.w	r3, [r7, #1720]	@ 0x6b8
 8003716:	2b00      	cmp	r3, #0
 8003718:	d112      	bne.n	8003740 <drawSignal+0x564>
 800371a:	f8b7 36ba 	ldrh.w	r3, [r7, #1722]	@ 0x6ba
 800371e:	2b15      	cmp	r3, #21
 8003720:	d90e      	bls.n	8003740 <drawSignal+0x564>
				ILI9341_DrawPixel(display, i + 20, j, color);
 8003722:	f8b7 36bc 	ldrh.w	r3, [r7, #1724]	@ 0x6bc
 8003726:	3314      	adds	r3, #20
 8003728:	b299      	uxth	r1, r3
 800372a:	f8b7 36e8 	ldrh.w	r3, [r7, #1768]	@ 0x6e8
 800372e:	f8b7 26ba 	ldrh.w	r2, [r7, #1722]	@ 0x6ba
 8003732:	f507 60da 	add.w	r0, r7, #1744	@ 0x6d0
 8003736:	f2a0 60c4 	subw	r0, r0, #1732	@ 0x6c4
 800373a:	6800      	ldr	r0, [r0, #0]
 800373c:	f7fe fac0 	bl	8001cc0 <ILI9341_DrawPixel>

			if (!draw && clear) {
 8003740:	f897 36b9 	ldrb.w	r3, [r7, #1721]	@ 0x6b9
 8003744:	2b00      	cmp	r3, #0
 8003746:	d150      	bne.n	80037ea <drawSignal+0x60e>
 8003748:	f897 36b8 	ldrb.w	r3, [r7, #1720]	@ 0x6b8
 800374c:	2b00      	cmp	r3, #0
 800374e:	d04c      	beq.n	80037ea <drawSignal+0x60e>
				if (((i % 25) == 0 && (j % 2) == 0) || ((i % 2) == 0 && ((j - 20) % 25) == 0))
 8003750:	f8b7 26bc 	ldrh.w	r2, [r7, #1724]	@ 0x6bc
 8003754:	4b43      	ldr	r3, [pc, #268]	@ (8003864 <drawSignal+0x688>)
 8003756:	fba3 1302 	umull	r1, r3, r3, r2
 800375a:	08d9      	lsrs	r1, r3, #3
 800375c:	460b      	mov	r3, r1
 800375e:	009b      	lsls	r3, r3, #2
 8003760:	440b      	add	r3, r1
 8003762:	0099      	lsls	r1, r3, #2
 8003764:	440b      	add	r3, r1
 8003766:	1ad3      	subs	r3, r2, r3
 8003768:	b29b      	uxth	r3, r3
 800376a:	2b00      	cmp	r3, #0
 800376c:	d106      	bne.n	800377c <drawSignal+0x5a0>
 800376e:	f8b7 36ba 	ldrh.w	r3, [r7, #1722]	@ 0x6ba
 8003772:	f003 0301 	and.w	r3, r3, #1
 8003776:	b29b      	uxth	r3, r3
 8003778:	2b00      	cmp	r3, #0
 800377a:	d018      	beq.n	80037ae <drawSignal+0x5d2>
 800377c:	f8b7 36bc 	ldrh.w	r3, [r7, #1724]	@ 0x6bc
 8003780:	f003 0301 	and.w	r3, r3, #1
 8003784:	b29b      	uxth	r3, r3
 8003786:	2b00      	cmp	r3, #0
 8003788:	d121      	bne.n	80037ce <drawSignal+0x5f2>
 800378a:	f8b7 36ba 	ldrh.w	r3, [r7, #1722]	@ 0x6ba
 800378e:	f1a3 0114 	sub.w	r1, r3, #20
 8003792:	4b34      	ldr	r3, [pc, #208]	@ (8003864 <drawSignal+0x688>)
 8003794:	fb83 2301 	smull	r2, r3, r3, r1
 8003798:	10da      	asrs	r2, r3, #3
 800379a:	17cb      	asrs	r3, r1, #31
 800379c:	1ad2      	subs	r2, r2, r3
 800379e:	4613      	mov	r3, r2
 80037a0:	009b      	lsls	r3, r3, #2
 80037a2:	4413      	add	r3, r2
 80037a4:	009a      	lsls	r2, r3, #2
 80037a6:	4413      	add	r3, r2
 80037a8:	1aca      	subs	r2, r1, r3
 80037aa:	2a00      	cmp	r2, #0
 80037ac:	d10f      	bne.n	80037ce <drawSignal+0x5f2>
					ILI9341_DrawPixel(display, i + 20, j,  ILI9341_GRAY);
 80037ae:	f8b7 36bc 	ldrh.w	r3, [r7, #1724]	@ 0x6bc
 80037b2:	3314      	adds	r3, #20
 80037b4:	b299      	uxth	r1, r3
 80037b6:	f8b7 26ba 	ldrh.w	r2, [r7, #1722]	@ 0x6ba
 80037ba:	f507 63da 	add.w	r3, r7, #1744	@ 0x6d0
 80037be:	f2a3 60c4 	subw	r0, r3, #1732	@ 0x6c4
 80037c2:	f245 238a 	movw	r3, #21130	@ 0x528a
 80037c6:	6800      	ldr	r0, [r0, #0]
 80037c8:	f7fe fa7a 	bl	8001cc0 <ILI9341_DrawPixel>
 80037cc:	e00d      	b.n	80037ea <drawSignal+0x60e>
				else
					ILI9341_DrawPixel(display, i + 20, j, ILI9341_BLACK);
 80037ce:	f8b7 36bc 	ldrh.w	r3, [r7, #1724]	@ 0x6bc
 80037d2:	3314      	adds	r3, #20
 80037d4:	b299      	uxth	r1, r3
 80037d6:	f8b7 26ba 	ldrh.w	r2, [r7, #1722]	@ 0x6ba
 80037da:	f507 63da 	add.w	r3, r7, #1744	@ 0x6d0
 80037de:	f2a3 60c4 	subw	r0, r3, #1732	@ 0x6c4
 80037e2:	2300      	movs	r3, #0
 80037e4:	6800      	ldr	r0, [r0, #0]
 80037e6:	f7fe fa6b 	bl	8001cc0 <ILI9341_DrawPixel>
		for (uint16_t j = min; j <= max; j++) {
 80037ea:	f8b7 36ba 	ldrh.w	r3, [r7, #1722]	@ 0x6ba
 80037ee:	3301      	adds	r3, #1
 80037f0:	f8a7 36ba 	strh.w	r3, [r7, #1722]	@ 0x6ba
 80037f4:	f8b7 26ba 	ldrh.w	r2, [r7, #1722]	@ 0x6ba
 80037f8:	f8b7 36b4 	ldrh.w	r3, [r7, #1716]	@ 0x6b4
 80037fc:	429a      	cmp	r2, r3
 80037fe:	f67f af49 	bls.w	8003694 <drawSignal+0x4b8>
			}
		}

		pixel_dirty[i][0] = pixel[i][0];
 8003802:	f8b7 16bc 	ldrh.w	r1, [r7, #1724]	@ 0x6bc
 8003806:	f8b7 36bc 	ldrh.w	r3, [r7, #1724]	@ 0x6bc
 800380a:	009b      	lsls	r3, r3, #2
 800380c:	f8d7 26e0 	ldr.w	r2, [r7, #1760]	@ 0x6e0
 8003810:	4413      	add	r3, r2
 8003812:	f507 62da 	add.w	r2, r7, #1744	@ 0x6d0
 8003816:	f5a2 62d8 	sub.w	r2, r2, #1728	@ 0x6c0
 800381a:	f832 2021 	ldrh.w	r2, [r2, r1, lsl #2]
 800381e:	801a      	strh	r2, [r3, #0]
		pixel_dirty[i][1] = pixel[i][1];
 8003820:	f8b7 36bc 	ldrh.w	r3, [r7, #1724]	@ 0x6bc
 8003824:	f8b7 26bc 	ldrh.w	r2, [r7, #1724]	@ 0x6bc
 8003828:	0092      	lsls	r2, r2, #2
 800382a:	f8d7 16e0 	ldr.w	r1, [r7, #1760]	@ 0x6e0
 800382e:	440a      	add	r2, r1
 8003830:	f507 61da 	add.w	r1, r7, #1744	@ 0x6d0
 8003834:	f5a1 61d8 	sub.w	r1, r1, #1728	@ 0x6c0
 8003838:	009b      	lsls	r3, r3, #2
 800383a:	440b      	add	r3, r1
 800383c:	885b      	ldrh	r3, [r3, #2]
 800383e:	8053      	strh	r3, [r2, #2]
	for (uint16_t i = 1; i <= 279; i++) {
 8003840:	f8b7 36bc 	ldrh.w	r3, [r7, #1724]	@ 0x6bc
 8003844:	3301      	adds	r3, #1
 8003846:	f8a7 36bc 	strh.w	r3, [r7, #1724]	@ 0x6bc
 800384a:	f8b7 36bc 	ldrh.w	r3, [r7, #1724]	@ 0x6bc
 800384e:	f5b3 7f8c 	cmp.w	r3, #280	@ 0x118
 8003852:	f4ff aef1 	bcc.w	8003638 <drawSignal+0x45c>
 8003856:	e000      	b.n	800385a <drawSignal+0x67e>
			return;
 8003858:	bf00      	nop
	}
}
 800385a:	f207 67d4 	addw	r7, r7, #1748	@ 0x6d4
 800385e:	46bd      	mov	sp, r7
 8003860:	bd90      	pop	{r4, r7, pc}
 8003862:	bf00      	nop
 8003864:	51eb851f 	.word	0x51eb851f

08003868 <clearSignal>:

static void clearSignal(ILI9341TypeDef *display, uint16_t pixel_dirty[280][2])
{
 8003868:	b580      	push	{r7, lr}
 800386a:	b084      	sub	sp, #16
 800386c:	af00      	add	r7, sp, #0
 800386e:	6078      	str	r0, [r7, #4]
 8003870:	6039      	str	r1, [r7, #0]
	for (uint16_t i = 1; i <= 279; i++) {
 8003872:	2301      	movs	r3, #1
 8003874:	81fb      	strh	r3, [r7, #14]
 8003876:	e05d      	b.n	8003934 <clearSignal+0xcc>
		for (uint16_t j = pixel_dirty[i][0]; j <= pixel_dirty[i][1]; j++) {
 8003878:	89fb      	ldrh	r3, [r7, #14]
 800387a:	009b      	lsls	r3, r3, #2
 800387c:	683a      	ldr	r2, [r7, #0]
 800387e:	4413      	add	r3, r2
 8003880:	881b      	ldrh	r3, [r3, #0]
 8003882:	81bb      	strh	r3, [r7, #12]
 8003884:	e03f      	b.n	8003906 <clearSignal+0x9e>
			if (((i % 25) == 0 && (j % 2) == 0) || ((i % 2) == 0 && ((j - 20) % 25) == 0))
 8003886:	89fa      	ldrh	r2, [r7, #14]
 8003888:	4b2f      	ldr	r3, [pc, #188]	@ (8003948 <clearSignal+0xe0>)
 800388a:	fba3 1302 	umull	r1, r3, r3, r2
 800388e:	08d9      	lsrs	r1, r3, #3
 8003890:	460b      	mov	r3, r1
 8003892:	009b      	lsls	r3, r3, #2
 8003894:	440b      	add	r3, r1
 8003896:	0099      	lsls	r1, r3, #2
 8003898:	440b      	add	r3, r1
 800389a:	1ad3      	subs	r3, r2, r3
 800389c:	b29b      	uxth	r3, r3
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d105      	bne.n	80038ae <clearSignal+0x46>
 80038a2:	89bb      	ldrh	r3, [r7, #12]
 80038a4:	f003 0301 	and.w	r3, r3, #1
 80038a8:	b29b      	uxth	r3, r3
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d016      	beq.n	80038dc <clearSignal+0x74>
 80038ae:	89fb      	ldrh	r3, [r7, #14]
 80038b0:	f003 0301 	and.w	r3, r3, #1
 80038b4:	b29b      	uxth	r3, r3
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d11a      	bne.n	80038f0 <clearSignal+0x88>
 80038ba:	89bb      	ldrh	r3, [r7, #12]
 80038bc:	f1a3 0114 	sub.w	r1, r3, #20
 80038c0:	4b21      	ldr	r3, [pc, #132]	@ (8003948 <clearSignal+0xe0>)
 80038c2:	fb83 2301 	smull	r2, r3, r3, r1
 80038c6:	10da      	asrs	r2, r3, #3
 80038c8:	17cb      	asrs	r3, r1, #31
 80038ca:	1ad2      	subs	r2, r2, r3
 80038cc:	4613      	mov	r3, r2
 80038ce:	009b      	lsls	r3, r3, #2
 80038d0:	4413      	add	r3, r2
 80038d2:	009a      	lsls	r2, r3, #2
 80038d4:	4413      	add	r3, r2
 80038d6:	1aca      	subs	r2, r1, r3
 80038d8:	2a00      	cmp	r2, #0
 80038da:	d109      	bne.n	80038f0 <clearSignal+0x88>
				ILI9341_DrawPixel(display, i + 20, j,  ILI9341_GRAY);
 80038dc:	89fb      	ldrh	r3, [r7, #14]
 80038de:	3314      	adds	r3, #20
 80038e0:	b299      	uxth	r1, r3
 80038e2:	89ba      	ldrh	r2, [r7, #12]
 80038e4:	f245 238a 	movw	r3, #21130	@ 0x528a
 80038e8:	6878      	ldr	r0, [r7, #4]
 80038ea:	f7fe f9e9 	bl	8001cc0 <ILI9341_DrawPixel>
 80038ee:	e007      	b.n	8003900 <clearSignal+0x98>
			else
				ILI9341_DrawPixel(display, i + 20, j, ILI9341_BLACK);
 80038f0:	89fb      	ldrh	r3, [r7, #14]
 80038f2:	3314      	adds	r3, #20
 80038f4:	b299      	uxth	r1, r3
 80038f6:	89ba      	ldrh	r2, [r7, #12]
 80038f8:	2300      	movs	r3, #0
 80038fa:	6878      	ldr	r0, [r7, #4]
 80038fc:	f7fe f9e0 	bl	8001cc0 <ILI9341_DrawPixel>
		for (uint16_t j = pixel_dirty[i][0]; j <= pixel_dirty[i][1]; j++) {
 8003900:	89bb      	ldrh	r3, [r7, #12]
 8003902:	3301      	adds	r3, #1
 8003904:	81bb      	strh	r3, [r7, #12]
 8003906:	89fb      	ldrh	r3, [r7, #14]
 8003908:	009b      	lsls	r3, r3, #2
 800390a:	683a      	ldr	r2, [r7, #0]
 800390c:	4413      	add	r3, r2
 800390e:	885b      	ldrh	r3, [r3, #2]
 8003910:	89ba      	ldrh	r2, [r7, #12]
 8003912:	429a      	cmp	r2, r3
 8003914:	d9b7      	bls.n	8003886 <clearSignal+0x1e>
		}

		pixel_dirty[i][0] = 0;
 8003916:	89fb      	ldrh	r3, [r7, #14]
 8003918:	009b      	lsls	r3, r3, #2
 800391a:	683a      	ldr	r2, [r7, #0]
 800391c:	4413      	add	r3, r2
 800391e:	2200      	movs	r2, #0
 8003920:	801a      	strh	r2, [r3, #0]
		pixel_dirty[i][1] = 0;
 8003922:	89fb      	ldrh	r3, [r7, #14]
 8003924:	009b      	lsls	r3, r3, #2
 8003926:	683a      	ldr	r2, [r7, #0]
 8003928:	4413      	add	r3, r2
 800392a:	2200      	movs	r2, #0
 800392c:	805a      	strh	r2, [r3, #2]
	for (uint16_t i = 1; i <= 279; i++) {
 800392e:	89fb      	ldrh	r3, [r7, #14]
 8003930:	3301      	adds	r3, #1
 8003932:	81fb      	strh	r3, [r7, #14]
 8003934:	89fb      	ldrh	r3, [r7, #14]
 8003936:	f5b3 7f8c 	cmp.w	r3, #280	@ 0x118
 800393a:	d39d      	bcc.n	8003878 <clearSignal+0x10>
	}
}
 800393c:	bf00      	nop
 800393e:	bf00      	nop
 8003940:	3710      	adds	r7, #16
 8003942:	46bd      	mov	sp, r7
 8003944:	bd80      	pop	{r7, pc}
 8003946:	bf00      	nop
 8003948:	51eb851f 	.word	0x51eb851f

0800394c <drawSignalParam>:

static void drawSignalParam(ILI9341TypeDef *display, char *string, size_t size, uint16_t adc_max, uint16_t adc_min, uint32_t adc_period)
{
 800394c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003950:	b096      	sub	sp, #88	@ 0x58
 8003952:	af0c      	add	r7, sp, #48	@ 0x30
 8003954:	60f8      	str	r0, [r7, #12]
 8003956:	60b9      	str	r1, [r7, #8]
 8003958:	607a      	str	r2, [r7, #4]
 800395a:	807b      	strh	r3, [r7, #2]
	float max  = (float)(adc_max) * 3300000.0f / 4096.0f;
 800395c:	887b      	ldrh	r3, [r7, #2]
 800395e:	ee07 3a90 	vmov	s15, r3
 8003962:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003966:	ed9f 7a7f 	vldr	s14, [pc, #508]	@ 8003b64 <drawSignalParam+0x218>
 800396a:	ee27 7a87 	vmul.f32	s14, s15, s14
 800396e:	eddf 6a7e 	vldr	s13, [pc, #504]	@ 8003b68 <drawSignalParam+0x21c>
 8003972:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003976:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
	float min  = (float)(adc_min) * 3300000.0f / 4096.0f;
 800397a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800397e:	ee07 3a90 	vmov	s15, r3
 8003982:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003986:	ed9f 7a77 	vldr	s14, [pc, #476]	@ 8003b64 <drawSignalParam+0x218>
 800398a:	ee27 7a87 	vmul.f32	s14, s15, s14
 800398e:	eddf 6a76 	vldr	s13, [pc, #472]	@ 8003b68 <drawSignalParam+0x21c>
 8003992:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003996:	edc7 7a08 	vstr	s15, [r7, #32]
	float freq = 1.0f / ((float)(adc_period) / 1000000.0f);
 800399a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800399c:	ee07 3a90 	vmov	s15, r3
 80039a0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80039a4:	eddf 6a71 	vldr	s13, [pc, #452]	@ 8003b6c <drawSignalParam+0x220>
 80039a8:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80039ac:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80039b0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80039b4:	edc7 7a07 	vstr	s15, [r7, #28]
	char *max_postfix  = "";
 80039b8:	4b6d      	ldr	r3, [pc, #436]	@ (8003b70 <drawSignalParam+0x224>)
 80039ba:	61bb      	str	r3, [r7, #24]
	char *min_postfix  = "";
 80039bc:	4b6c      	ldr	r3, [pc, #432]	@ (8003b70 <drawSignalParam+0x224>)
 80039be:	617b      	str	r3, [r7, #20]
	char *freq_postfix = "";
 80039c0:	4b6b      	ldr	r3, [pc, #428]	@ (8003b70 <drawSignalParam+0x224>)
 80039c2:	613b      	str	r3, [r7, #16]

	if (max >= 1000000.0f) {
 80039c4:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 80039c8:	ed9f 7a68 	vldr	s14, [pc, #416]	@ 8003b6c <drawSignalParam+0x220>
 80039cc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80039d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80039d4:	db0a      	blt.n	80039ec <drawSignalParam+0xa0>
		max /= 1000000.0f;
 80039d6:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 80039da:	eddf 6a64 	vldr	s13, [pc, #400]	@ 8003b6c <drawSignalParam+0x220>
 80039de:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80039e2:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
		max_postfix = " V";
 80039e6:	4b63      	ldr	r3, [pc, #396]	@ (8003b74 <drawSignalParam+0x228>)
 80039e8:	61bb      	str	r3, [r7, #24]
 80039ea:	e015      	b.n	8003a18 <drawSignalParam+0xcc>
	} else if (max >= 1000.0f) {
 80039ec:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 80039f0:	ed9f 7a61 	vldr	s14, [pc, #388]	@ 8003b78 <drawSignalParam+0x22c>
 80039f4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80039f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80039fc:	db0a      	blt.n	8003a14 <drawSignalParam+0xc8>
		max /= 1000.0f;
 80039fe:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8003a02:	eddf 6a5d 	vldr	s13, [pc, #372]	@ 8003b78 <drawSignalParam+0x22c>
 8003a06:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003a0a:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
		max_postfix = "mV";
 8003a0e:	4b5b      	ldr	r3, [pc, #364]	@ (8003b7c <drawSignalParam+0x230>)
 8003a10:	61bb      	str	r3, [r7, #24]
 8003a12:	e001      	b.n	8003a18 <drawSignalParam+0xcc>
	} else
		max_postfix = "uV";
 8003a14:	4b5a      	ldr	r3, [pc, #360]	@ (8003b80 <drawSignalParam+0x234>)
 8003a16:	61bb      	str	r3, [r7, #24]

	if (min >= 1000000.0f) {
 8003a18:	edd7 7a08 	vldr	s15, [r7, #32]
 8003a1c:	ed9f 7a53 	vldr	s14, [pc, #332]	@ 8003b6c <drawSignalParam+0x220>
 8003a20:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003a24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a28:	db0a      	blt.n	8003a40 <drawSignalParam+0xf4>
		min /= 1000000.0f;
 8003a2a:	ed97 7a08 	vldr	s14, [r7, #32]
 8003a2e:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8003b6c <drawSignalParam+0x220>
 8003a32:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003a36:	edc7 7a08 	vstr	s15, [r7, #32]
		min_postfix = " V";
 8003a3a:	4b4e      	ldr	r3, [pc, #312]	@ (8003b74 <drawSignalParam+0x228>)
 8003a3c:	617b      	str	r3, [r7, #20]
 8003a3e:	e015      	b.n	8003a6c <drawSignalParam+0x120>
	} else if (min >= 1000.0f) {
 8003a40:	edd7 7a08 	vldr	s15, [r7, #32]
 8003a44:	ed9f 7a4c 	vldr	s14, [pc, #304]	@ 8003b78 <drawSignalParam+0x22c>
 8003a48:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003a4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a50:	db0a      	blt.n	8003a68 <drawSignalParam+0x11c>
		min /= 1000.0f;
 8003a52:	ed97 7a08 	vldr	s14, [r7, #32]
 8003a56:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8003b78 <drawSignalParam+0x22c>
 8003a5a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003a5e:	edc7 7a08 	vstr	s15, [r7, #32]
		min_postfix = "mV";
 8003a62:	4b46      	ldr	r3, [pc, #280]	@ (8003b7c <drawSignalParam+0x230>)
 8003a64:	617b      	str	r3, [r7, #20]
 8003a66:	e001      	b.n	8003a6c <drawSignalParam+0x120>
	} else
		min_postfix = "uV";
 8003a68:	4b45      	ldr	r3, [pc, #276]	@ (8003b80 <drawSignalParam+0x234>)
 8003a6a:	617b      	str	r3, [r7, #20]

	if (freq >= 1000000.0f) {
 8003a6c:	edd7 7a07 	vldr	s15, [r7, #28]
 8003a70:	ed9f 7a3e 	vldr	s14, [pc, #248]	@ 8003b6c <drawSignalParam+0x220>
 8003a74:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003a78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a7c:	db0a      	blt.n	8003a94 <drawSignalParam+0x148>
		freq /= 1000000.0f;
 8003a7e:	ed97 7a07 	vldr	s14, [r7, #28]
 8003a82:	eddf 6a3a 	vldr	s13, [pc, #232]	@ 8003b6c <drawSignalParam+0x220>
 8003a86:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003a8a:	edc7 7a07 	vstr	s15, [r7, #28]
		freq_postfix = "MHz";
 8003a8e:	4b3d      	ldr	r3, [pc, #244]	@ (8003b84 <drawSignalParam+0x238>)
 8003a90:	613b      	str	r3, [r7, #16]
 8003a92:	e015      	b.n	8003ac0 <drawSignalParam+0x174>
	} else if (freq >= 1000.0f) {
 8003a94:	edd7 7a07 	vldr	s15, [r7, #28]
 8003a98:	ed9f 7a37 	vldr	s14, [pc, #220]	@ 8003b78 <drawSignalParam+0x22c>
 8003a9c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003aa0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003aa4:	db0a      	blt.n	8003abc <drawSignalParam+0x170>
		freq /= 1000.0f;
 8003aa6:	ed97 7a07 	vldr	s14, [r7, #28]
 8003aaa:	eddf 6a33 	vldr	s13, [pc, #204]	@ 8003b78 <drawSignalParam+0x22c>
 8003aae:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003ab2:	edc7 7a07 	vstr	s15, [r7, #28]
		freq_postfix = "kHz";
 8003ab6:	4b34      	ldr	r3, [pc, #208]	@ (8003b88 <drawSignalParam+0x23c>)
 8003ab8:	613b      	str	r3, [r7, #16]
 8003aba:	e001      	b.n	8003ac0 <drawSignalParam+0x174>
	} else
		freq_postfix = " Hz";
 8003abc:	4b33      	ldr	r3, [pc, #204]	@ (8003b8c <drawSignalParam+0x240>)
 8003abe:	613b      	str	r3, [r7, #16]

	if (adc_period != 0)
 8003ac0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d020      	beq.n	8003b08 <drawSignalParam+0x1bc>
		snprintf(string, size, "ampl:%3.1f%s~%3.1f%s freq:%3.0f%s  ", min, min_postfix, max, max_postfix, freq, freq_postfix);
 8003ac6:	6a38      	ldr	r0, [r7, #32]
 8003ac8:	f7fc fd56 	bl	8000578 <__aeabi_f2d>
 8003acc:	4604      	mov	r4, r0
 8003ace:	460d      	mov	r5, r1
 8003ad0:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8003ad2:	f7fc fd51 	bl	8000578 <__aeabi_f2d>
 8003ad6:	4680      	mov	r8, r0
 8003ad8:	4689      	mov	r9, r1
 8003ada:	69f8      	ldr	r0, [r7, #28]
 8003adc:	f7fc fd4c 	bl	8000578 <__aeabi_f2d>
 8003ae0:	4602      	mov	r2, r0
 8003ae2:	460b      	mov	r3, r1
 8003ae4:	6939      	ldr	r1, [r7, #16]
 8003ae6:	910a      	str	r1, [sp, #40]	@ 0x28
 8003ae8:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8003aec:	69bb      	ldr	r3, [r7, #24]
 8003aee:	9306      	str	r3, [sp, #24]
 8003af0:	e9cd 8904 	strd	r8, r9, [sp, #16]
 8003af4:	697b      	ldr	r3, [r7, #20]
 8003af6:	9302      	str	r3, [sp, #8]
 8003af8:	e9cd 4500 	strd	r4, r5, [sp]
 8003afc:	4a24      	ldr	r2, [pc, #144]	@ (8003b90 <drawSignalParam+0x244>)
 8003afe:	6879      	ldr	r1, [r7, #4]
 8003b00:	68b8      	ldr	r0, [r7, #8]
 8003b02:	f00c fba7 	bl	8010254 <sniprintf>
 8003b06:	e016      	b.n	8003b36 <drawSignalParam+0x1ea>
	else
		snprintf(string, size, "ampl:%3.1f%s~%3.1f%s freq:??? Hz  ", min, min_postfix, max, max_postfix);
 8003b08:	6a38      	ldr	r0, [r7, #32]
 8003b0a:	f7fc fd35 	bl	8000578 <__aeabi_f2d>
 8003b0e:	4604      	mov	r4, r0
 8003b10:	460d      	mov	r5, r1
 8003b12:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8003b14:	f7fc fd30 	bl	8000578 <__aeabi_f2d>
 8003b18:	4602      	mov	r2, r0
 8003b1a:	460b      	mov	r3, r1
 8003b1c:	69b9      	ldr	r1, [r7, #24]
 8003b1e:	9106      	str	r1, [sp, #24]
 8003b20:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8003b24:	697b      	ldr	r3, [r7, #20]
 8003b26:	9302      	str	r3, [sp, #8]
 8003b28:	e9cd 4500 	strd	r4, r5, [sp]
 8003b2c:	4a19      	ldr	r2, [pc, #100]	@ (8003b94 <drawSignalParam+0x248>)
 8003b2e:	6879      	ldr	r1, [r7, #4]
 8003b30:	68b8      	ldr	r0, [r7, #8]
 8003b32:	f00c fb8f 	bl	8010254 <sniprintf>

	ILI9341_WriteString(display, 98, 225, string, Font_7x10, ILI9341_WHITE, ILI9341_BLACK);
 8003b36:	2300      	movs	r3, #0
 8003b38:	9303      	str	r3, [sp, #12]
 8003b3a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003b3e:	9302      	str	r3, [sp, #8]
 8003b40:	4a15      	ldr	r2, [pc, #84]	@ (8003b98 <drawSignalParam+0x24c>)
 8003b42:	466b      	mov	r3, sp
 8003b44:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003b48:	e883 0003 	stmia.w	r3, {r0, r1}
 8003b4c:	68bb      	ldr	r3, [r7, #8]
 8003b4e:	22e1      	movs	r2, #225	@ 0xe1
 8003b50:	2162      	movs	r1, #98	@ 0x62
 8003b52:	68f8      	ldr	r0, [r7, #12]
 8003b54:	f7fe fad7 	bl	8002106 <ILI9341_WriteString>
}
 8003b58:	bf00      	nop
 8003b5a:	3728      	adds	r7, #40	@ 0x28
 8003b5c:	46bd      	mov	sp, r7
 8003b5e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8003b62:	bf00      	nop
 8003b64:	4a496a80 	.word	0x4a496a80
 8003b68:	45800000 	.word	0x45800000
 8003b6c:	49742400 	.word	0x49742400
 8003b70:	08013c38 	.word	0x08013c38
 8003b74:	08013c3c 	.word	0x08013c3c
 8003b78:	447a0000 	.word	0x447a0000
 8003b7c:	08013c40 	.word	0x08013c40
 8003b80:	08013c44 	.word	0x08013c44
 8003b84:	08013c48 	.word	0x08013c48
 8003b88:	08013c4c 	.word	0x08013c4c
 8003b8c:	08013c50 	.word	0x08013c50
 8003b90:	08013c54 	.word	0x08013c54
 8003b94:	08013c78 	.word	0x08013c78
 8003b98:	20000000 	.word	0x20000000

08003b9c <Oscilloscope_Process>:

void Oscilloscope_Process(void)
{
 8003b9c:	b5b0      	push	{r4, r5, r7, lr}
 8003b9e:	f5ad 7d00 	sub.w	sp, sp, #512	@ 0x200
 8003ba2:	af04      	add	r7, sp, #16
	// Draw axis
	if (event_axis) {
 8003ba4:	4ba2      	ldr	r3, [pc, #648]	@ (8003e30 <Oscilloscope_Process+0x294>)
 8003ba6:	781b      	ldrb	r3, [r3, #0]
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d005      	beq.n	8003bb8 <Oscilloscope_Process+0x1c>
		drawAxis(&display);
 8003bac:	48a1      	ldr	r0, [pc, #644]	@ (8003e34 <Oscilloscope_Process+0x298>)
 8003bae:	f7ff f9c3 	bl	8002f38 <drawAxis>
		event_axis = 0;
 8003bb2:	4b9f      	ldr	r3, [pc, #636]	@ (8003e30 <Oscilloscope_Process+0x294>)
 8003bb4:	2200      	movs	r2, #0
 8003bb6:	701a      	strb	r2, [r3, #0]
	}

	uint8_t local_event_adc = 0;
 8003bb8:	2300      	movs	r3, #0
 8003bba:	f887 31ef 	strb.w	r3, [r7, #495]	@ 0x1ef
	if (event_adc) {
 8003bbe:	4b9e      	ldr	r3, [pc, #632]	@ (8003e38 <Oscilloscope_Process+0x29c>)
 8003bc0:	781b      	ldrb	r3, [r3, #0]
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d005      	beq.n	8003bd2 <Oscilloscope_Process+0x36>
		local_event_adc = 1;
 8003bc6:	2301      	movs	r3, #1
 8003bc8:	f887 31ef 	strb.w	r3, [r7, #495]	@ 0x1ef
		event_adc = 0;
 8003bcc:	4b9a      	ldr	r3, [pc, #616]	@ (8003e38 <Oscilloscope_Process+0x29c>)
 8003bce:	2200      	movs	r2, #0
 8003bd0:	701a      	strb	r2, [r3, #0]
	}

	// Draw signals
	if (local_event_adc) {
 8003bd2:	f897 31ef 	ldrb.w	r3, [r7, #495]	@ 0x1ef
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d027      	beq.n	8003c2a <Oscilloscope_Process+0x8e>

		if (menu_channel0_enabled)
 8003bda:	4b98      	ldr	r3, [pc, #608]	@ (8003e3c <Oscilloscope_Process+0x2a0>)
 8003bdc:	781b      	ldrb	r3, [r3, #0]
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d00f      	beq.n	8003c02 <Oscilloscope_Process+0x66>
			drawSignal(&display, adc0_time, adc0, adc0_length, pixel_dirty0, cursor0, ILI9341_YELLOW);
 8003be2:	4b97      	ldr	r3, [pc, #604]	@ (8003e40 <Oscilloscope_Process+0x2a4>)
 8003be4:	681a      	ldr	r2, [r3, #0]
 8003be6:	4b97      	ldr	r3, [pc, #604]	@ (8003e44 <Oscilloscope_Process+0x2a8>)
 8003be8:	881b      	ldrh	r3, [r3, #0]
 8003bea:	f64f 71e0 	movw	r1, #65504	@ 0xffe0
 8003bee:	9102      	str	r1, [sp, #8]
 8003bf0:	9301      	str	r3, [sp, #4]
 8003bf2:	4b95      	ldr	r3, [pc, #596]	@ (8003e48 <Oscilloscope_Process+0x2ac>)
 8003bf4:	9300      	str	r3, [sp, #0]
 8003bf6:	4613      	mov	r3, r2
 8003bf8:	4a94      	ldr	r2, [pc, #592]	@ (8003e4c <Oscilloscope_Process+0x2b0>)
 8003bfa:	4995      	ldr	r1, [pc, #596]	@ (8003e50 <Oscilloscope_Process+0x2b4>)
 8003bfc:	488d      	ldr	r0, [pc, #564]	@ (8003e34 <Oscilloscope_Process+0x298>)
 8003bfe:	f7ff faed 	bl	80031dc <drawSignal>

		if (menu_channel1_enabled)
 8003c02:	4b94      	ldr	r3, [pc, #592]	@ (8003e54 <Oscilloscope_Process+0x2b8>)
 8003c04:	781b      	ldrb	r3, [r3, #0]
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d00f      	beq.n	8003c2a <Oscilloscope_Process+0x8e>
			drawSignal(&display, adc1_time, adc1, adc1_length, pixel_dirty1, cursor1, ILI9341_CYAN);
 8003c0a:	4b93      	ldr	r3, [pc, #588]	@ (8003e58 <Oscilloscope_Process+0x2bc>)
 8003c0c:	681a      	ldr	r2, [r3, #0]
 8003c0e:	4b93      	ldr	r3, [pc, #588]	@ (8003e5c <Oscilloscope_Process+0x2c0>)
 8003c10:	881b      	ldrh	r3, [r3, #0]
 8003c12:	f240 71ff 	movw	r1, #2047	@ 0x7ff
 8003c16:	9102      	str	r1, [sp, #8]
 8003c18:	9301      	str	r3, [sp, #4]
 8003c1a:	4b91      	ldr	r3, [pc, #580]	@ (8003e60 <Oscilloscope_Process+0x2c4>)
 8003c1c:	9300      	str	r3, [sp, #0]
 8003c1e:	4613      	mov	r3, r2
 8003c20:	4a90      	ldr	r2, [pc, #576]	@ (8003e64 <Oscilloscope_Process+0x2c8>)
 8003c22:	4991      	ldr	r1, [pc, #580]	@ (8003e68 <Oscilloscope_Process+0x2cc>)
 8003c24:	4883      	ldr	r0, [pc, #524]	@ (8003e34 <Oscilloscope_Process+0x298>)
 8003c26:	f7ff fad9 	bl	80031dc <drawSignal>
	}

	  char string[255];

	// Draw FPS
	if (frames > 60) {
 8003c2a:	4b90      	ldr	r3, [pc, #576]	@ (8003e6c <Oscilloscope_Process+0x2d0>)
 8003c2c:	781b      	ldrb	r3, [r3, #0]
 8003c2e:	2b3c      	cmp	r3, #60	@ 0x3c
 8003c30:	d934      	bls.n	8003c9c <Oscilloscope_Process+0x100>
		snprintf(string, 255, "FPS: %5i", (int)(1000.0f / ((float)(HAL_GetTick() - frames_ticks) / 60.0f)));
 8003c32:	f001 fe61 	bl	80058f8 <HAL_GetTick>
 8003c36:	4602      	mov	r2, r0
 8003c38:	4b8d      	ldr	r3, [pc, #564]	@ (8003e70 <Oscilloscope_Process+0x2d4>)
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	1ad3      	subs	r3, r2, r3
 8003c3e:	ee07 3a90 	vmov	s15, r3
 8003c42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003c46:	eddf 6a8b 	vldr	s13, [pc, #556]	@ 8003e74 <Oscilloscope_Process+0x2d8>
 8003c4a:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8003c4e:	eddf 6a8a 	vldr	s13, [pc, #552]	@ 8003e78 <Oscilloscope_Process+0x2dc>
 8003c52:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003c56:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003c5a:	f107 00cc 	add.w	r0, r7, #204	@ 0xcc
 8003c5e:	ee17 3a90 	vmov	r3, s15
 8003c62:	4a86      	ldr	r2, [pc, #536]	@ (8003e7c <Oscilloscope_Process+0x2e0>)
 8003c64:	21ff      	movs	r1, #255	@ 0xff
 8003c66:	f00c faf5 	bl	8010254 <sniprintf>
		ILI9341_WriteString(&display, 225, 5, string, Font_7x10, ILI9341_WHITE, ILI9341_BLACK);
 8003c6a:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8003c6e:	2200      	movs	r2, #0
 8003c70:	9203      	str	r2, [sp, #12]
 8003c72:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003c76:	9202      	str	r2, [sp, #8]
 8003c78:	4981      	ldr	r1, [pc, #516]	@ (8003e80 <Oscilloscope_Process+0x2e4>)
 8003c7a:	466a      	mov	r2, sp
 8003c7c:	c903      	ldmia	r1, {r0, r1}
 8003c7e:	e882 0003 	stmia.w	r2, {r0, r1}
 8003c82:	2205      	movs	r2, #5
 8003c84:	21e1      	movs	r1, #225	@ 0xe1
 8003c86:	486b      	ldr	r0, [pc, #428]	@ (8003e34 <Oscilloscope_Process+0x298>)
 8003c88:	f7fe fa3d 	bl	8002106 <ILI9341_WriteString>

		frames = 0;
 8003c8c:	4b77      	ldr	r3, [pc, #476]	@ (8003e6c <Oscilloscope_Process+0x2d0>)
 8003c8e:	2200      	movs	r2, #0
 8003c90:	701a      	strb	r2, [r3, #0]
		frames_ticks = HAL_GetTick();
 8003c92:	f001 fe31 	bl	80058f8 <HAL_GetTick>
 8003c96:	4603      	mov	r3, r0
 8003c98:	4a75      	ldr	r2, [pc, #468]	@ (8003e70 <Oscilloscope_Process+0x2d4>)
 8003c9a:	6013      	str	r3, [r2, #0]
	}

	// Handle button events
	if (event_button0) {
 8003c9c:	4b79      	ldr	r3, [pc, #484]	@ (8003e84 <Oscilloscope_Process+0x2e8>)
 8003c9e:	781b      	ldrb	r3, [r3, #0]
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d038      	beq.n	8003d16 <Oscilloscope_Process+0x17a>

		if (!menu_extended) {
 8003ca4:	4b78      	ldr	r3, [pc, #480]	@ (8003e88 <Oscilloscope_Process+0x2ec>)
 8003ca6:	781b      	ldrb	r3, [r3, #0]
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d131      	bne.n	8003d10 <Oscilloscope_Process+0x174>
			ILI9341_Rectangle(&display, menu_selector_x, menu_selector_y, 38, 13, ILI9341_BLACK);
 8003cac:	4b77      	ldr	r3, [pc, #476]	@ (8003e8c <Oscilloscope_Process+0x2f0>)
 8003cae:	8819      	ldrh	r1, [r3, #0]
 8003cb0:	4b77      	ldr	r3, [pc, #476]	@ (8003e90 <Oscilloscope_Process+0x2f4>)
 8003cb2:	881a      	ldrh	r2, [r3, #0]
 8003cb4:	2300      	movs	r3, #0
 8003cb6:	9301      	str	r3, [sp, #4]
 8003cb8:	230d      	movs	r3, #13
 8003cba:	9300      	str	r3, [sp, #0]
 8003cbc:	2326      	movs	r3, #38	@ 0x26
 8003cbe:	485d      	ldr	r0, [pc, #372]	@ (8003e34 <Oscilloscope_Process+0x298>)
 8003cc0:	f7fe f966 	bl	8001f90 <ILI9341_Rectangle>

			menu_selected_item++;
 8003cc4:	4b73      	ldr	r3, [pc, #460]	@ (8003e94 <Oscilloscope_Process+0x2f8>)
 8003cc6:	f993 3000 	ldrsb.w	r3, [r3]
 8003cca:	b2db      	uxtb	r3, r3
 8003ccc:	3301      	adds	r3, #1
 8003cce:	b2db      	uxtb	r3, r3
 8003cd0:	b25a      	sxtb	r2, r3
 8003cd2:	4b70      	ldr	r3, [pc, #448]	@ (8003e94 <Oscilloscope_Process+0x2f8>)
 8003cd4:	701a      	strb	r2, [r3, #0]

			if (menu_selected_item > 3)
 8003cd6:	4b6f      	ldr	r3, [pc, #444]	@ (8003e94 <Oscilloscope_Process+0x2f8>)
 8003cd8:	f993 3000 	ldrsb.w	r3, [r3]
 8003cdc:	2b03      	cmp	r3, #3
 8003cde:	dd02      	ble.n	8003ce6 <Oscilloscope_Process+0x14a>
				menu_selected_item = 2;
 8003ce0:	4b6c      	ldr	r3, [pc, #432]	@ (8003e94 <Oscilloscope_Process+0x2f8>)
 8003ce2:	2202      	movs	r2, #2
 8003ce4:	701a      	strb	r2, [r3, #0]

			menu_selector_x = 20 + 38 * menu_selected_item;
 8003ce6:	4b6b      	ldr	r3, [pc, #428]	@ (8003e94 <Oscilloscope_Process+0x2f8>)
 8003ce8:	f993 3000 	ldrsb.w	r3, [r3]
 8003cec:	b29b      	uxth	r3, r3
 8003cee:	461a      	mov	r2, r3
 8003cf0:	00d2      	lsls	r2, r2, #3
 8003cf2:	441a      	add	r2, r3
 8003cf4:	0052      	lsls	r2, r2, #1
 8003cf6:	4413      	add	r3, r2
 8003cf8:	005b      	lsls	r3, r3, #1
 8003cfa:	b29b      	uxth	r3, r3
 8003cfc:	3314      	adds	r3, #20
 8003cfe:	b29a      	uxth	r2, r3
 8003d00:	4b62      	ldr	r3, [pc, #392]	@ (8003e8c <Oscilloscope_Process+0x2f0>)
 8003d02:	801a      	strh	r2, [r3, #0]
			menu_selector_y = 3;
 8003d04:	4b62      	ldr	r3, [pc, #392]	@ (8003e90 <Oscilloscope_Process+0x2f4>)
 8003d06:	2203      	movs	r2, #3
 8003d08:	801a      	strh	r2, [r3, #0]

			event_selector = 1;
 8003d0a:	4b63      	ldr	r3, [pc, #396]	@ (8003e98 <Oscilloscope_Process+0x2fc>)
 8003d0c:	2201      	movs	r2, #1
 8003d0e:	701a      	strb	r2, [r3, #0]
		}

		event_button0 = 0;
 8003d10:	4b5c      	ldr	r3, [pc, #368]	@ (8003e84 <Oscilloscope_Process+0x2e8>)
 8003d12:	2200      	movs	r2, #0
 8003d14:	701a      	strb	r2, [r3, #0]
	}

	if (event_button1) {
 8003d16:	4b61      	ldr	r3, [pc, #388]	@ (8003e9c <Oscilloscope_Process+0x300>)
 8003d18:	781b      	ldrb	r3, [r3, #0]
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d03e      	beq.n	8003d9c <Oscilloscope_Process+0x200>
		menu_extended = !menu_extended;
 8003d1e:	4b5a      	ldr	r3, [pc, #360]	@ (8003e88 <Oscilloscope_Process+0x2ec>)
 8003d20:	781b      	ldrb	r3, [r3, #0]
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	bf0c      	ite	eq
 8003d26:	2301      	moveq	r3, #1
 8003d28:	2300      	movne	r3, #0
 8003d2a:	b2db      	uxtb	r3, r3
 8003d2c:	461a      	mov	r2, r3
 8003d2e:	4b56      	ldr	r3, [pc, #344]	@ (8003e88 <Oscilloscope_Process+0x2ec>)
 8003d30:	701a      	strb	r2, [r3, #0]

		if (!menu_extended) {
 8003d32:	4b55      	ldr	r3, [pc, #340]	@ (8003e88 <Oscilloscope_Process+0x2ec>)
 8003d34:	781b      	ldrb	r3, [r3, #0]
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d127      	bne.n	8003d8a <Oscilloscope_Process+0x1ee>
			ILI9341_Rectangle(&display, menu_selector_x, menu_selector_y, 38, 13, ILI9341_BLACK);
 8003d3a:	4b54      	ldr	r3, [pc, #336]	@ (8003e8c <Oscilloscope_Process+0x2f0>)
 8003d3c:	8819      	ldrh	r1, [r3, #0]
 8003d3e:	4b54      	ldr	r3, [pc, #336]	@ (8003e90 <Oscilloscope_Process+0x2f4>)
 8003d40:	881a      	ldrh	r2, [r3, #0]
 8003d42:	2300      	movs	r3, #0
 8003d44:	9301      	str	r3, [sp, #4]
 8003d46:	230d      	movs	r3, #13
 8003d48:	9300      	str	r3, [sp, #0]
 8003d4a:	2326      	movs	r3, #38	@ 0x26
 8003d4c:	4839      	ldr	r0, [pc, #228]	@ (8003e34 <Oscilloscope_Process+0x298>)
 8003d4e:	f7fe f91f 	bl	8001f90 <ILI9341_Rectangle>

			menu_selected_item = 2;
 8003d52:	4b50      	ldr	r3, [pc, #320]	@ (8003e94 <Oscilloscope_Process+0x2f8>)
 8003d54:	2202      	movs	r2, #2
 8003d56:	701a      	strb	r2, [r3, #0]

			menu_selector_x = 20 + 38 * menu_selected_item;
 8003d58:	4b4e      	ldr	r3, [pc, #312]	@ (8003e94 <Oscilloscope_Process+0x2f8>)
 8003d5a:	f993 3000 	ldrsb.w	r3, [r3]
 8003d5e:	b29b      	uxth	r3, r3
 8003d60:	461a      	mov	r2, r3
 8003d62:	00d2      	lsls	r2, r2, #3
 8003d64:	441a      	add	r2, r3
 8003d66:	0052      	lsls	r2, r2, #1
 8003d68:	4413      	add	r3, r2
 8003d6a:	005b      	lsls	r3, r3, #1
 8003d6c:	b29b      	uxth	r3, r3
 8003d6e:	3314      	adds	r3, #20
 8003d70:	b29a      	uxth	r2, r3
 8003d72:	4b46      	ldr	r3, [pc, #280]	@ (8003e8c <Oscilloscope_Process+0x2f0>)
 8003d74:	801a      	strh	r2, [r3, #0]
			menu_selector_y = 3;
 8003d76:	4b46      	ldr	r3, [pc, #280]	@ (8003e90 <Oscilloscope_Process+0x2f4>)
 8003d78:	2203      	movs	r2, #3
 8003d7a:	801a      	strh	r2, [r3, #0]

			mode = 0;
 8003d7c:	4b48      	ldr	r3, [pc, #288]	@ (8003ea0 <Oscilloscope_Process+0x304>)
 8003d7e:	2200      	movs	r2, #0
 8003d80:	701a      	strb	r2, [r3, #0]
			event_selector = 1;
 8003d82:	4b45      	ldr	r3, [pc, #276]	@ (8003e98 <Oscilloscope_Process+0x2fc>)
 8003d84:	2201      	movs	r2, #1
 8003d86:	701a      	strb	r2, [r3, #0]
 8003d88:	e002      	b.n	8003d90 <Oscilloscope_Process+0x1f4>
		} else
			mode = 1;
 8003d8a:	4b45      	ldr	r3, [pc, #276]	@ (8003ea0 <Oscilloscope_Process+0x304>)
 8003d8c:	2201      	movs	r2, #1
 8003d8e:	701a      	strb	r2, [r3, #0]

		event_mode = 1;
 8003d90:	4b44      	ldr	r3, [pc, #272]	@ (8003ea4 <Oscilloscope_Process+0x308>)
 8003d92:	2201      	movs	r2, #1
 8003d94:	701a      	strb	r2, [r3, #0]
		event_button1 = 0;
 8003d96:	4b41      	ldr	r3, [pc, #260]	@ (8003e9c <Oscilloscope_Process+0x300>)
 8003d98:	2200      	movs	r2, #0
 8003d9a:	701a      	strb	r2, [r3, #0]
	}

	if (event_button2) {
 8003d9c:	4b42      	ldr	r3, [pc, #264]	@ (8003ea8 <Oscilloscope_Process+0x30c>)
 8003d9e:	781b      	ldrb	r3, [r3, #0]
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d039      	beq.n	8003e18 <Oscilloscope_Process+0x27c>
		if (menu_selected_item == 2) {
 8003da4:	4b3b      	ldr	r3, [pc, #236]	@ (8003e94 <Oscilloscope_Process+0x2f8>)
 8003da6:	f993 3000 	ldrsb.w	r3, [r3]
 8003daa:	2b02      	cmp	r3, #2
 8003dac:	d111      	bne.n	8003dd2 <Oscilloscope_Process+0x236>
			menu_channel0_enabled = !menu_channel0_enabled;
 8003dae:	4b23      	ldr	r3, [pc, #140]	@ (8003e3c <Oscilloscope_Process+0x2a0>)
 8003db0:	781b      	ldrb	r3, [r3, #0]
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	bf0c      	ite	eq
 8003db6:	2301      	moveq	r3, #1
 8003db8:	2300      	movne	r3, #0
 8003dba:	b2db      	uxtb	r3, r3
 8003dbc:	461a      	mov	r2, r3
 8003dbe:	4b1f      	ldr	r3, [pc, #124]	@ (8003e3c <Oscilloscope_Process+0x2a0>)
 8003dc0:	701a      	strb	r2, [r3, #0]

			if (!menu_channel0_enabled)
 8003dc2:	4b1e      	ldr	r3, [pc, #120]	@ (8003e3c <Oscilloscope_Process+0x2a0>)
 8003dc4:	781b      	ldrb	r3, [r3, #0]
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d103      	bne.n	8003dd2 <Oscilloscope_Process+0x236>
				clearSignal(&display, pixel_dirty0);
 8003dca:	491f      	ldr	r1, [pc, #124]	@ (8003e48 <Oscilloscope_Process+0x2ac>)
 8003dcc:	4819      	ldr	r0, [pc, #100]	@ (8003e34 <Oscilloscope_Process+0x298>)
 8003dce:	f7ff fd4b 	bl	8003868 <clearSignal>
		}

		if (menu_selected_item == 3) {
 8003dd2:	4b30      	ldr	r3, [pc, #192]	@ (8003e94 <Oscilloscope_Process+0x2f8>)
 8003dd4:	f993 3000 	ldrsb.w	r3, [r3]
 8003dd8:	2b03      	cmp	r3, #3
 8003dda:	d111      	bne.n	8003e00 <Oscilloscope_Process+0x264>
			menu_channel1_enabled = !menu_channel1_enabled;
 8003ddc:	4b1d      	ldr	r3, [pc, #116]	@ (8003e54 <Oscilloscope_Process+0x2b8>)
 8003dde:	781b      	ldrb	r3, [r3, #0]
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	bf0c      	ite	eq
 8003de4:	2301      	moveq	r3, #1
 8003de6:	2300      	movne	r3, #0
 8003de8:	b2db      	uxtb	r3, r3
 8003dea:	461a      	mov	r2, r3
 8003dec:	4b19      	ldr	r3, [pc, #100]	@ (8003e54 <Oscilloscope_Process+0x2b8>)
 8003dee:	701a      	strb	r2, [r3, #0]

			if (!menu_channel1_enabled)
 8003df0:	4b18      	ldr	r3, [pc, #96]	@ (8003e54 <Oscilloscope_Process+0x2b8>)
 8003df2:	781b      	ldrb	r3, [r3, #0]
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d103      	bne.n	8003e00 <Oscilloscope_Process+0x264>
				clearSignal(&display, pixel_dirty1);
 8003df8:	4919      	ldr	r1, [pc, #100]	@ (8003e60 <Oscilloscope_Process+0x2c4>)
 8003dfa:	480e      	ldr	r0, [pc, #56]	@ (8003e34 <Oscilloscope_Process+0x298>)
 8003dfc:	f7ff fd34 	bl	8003868 <clearSignal>
		}

		event_cursor  = 1;
 8003e00:	4b2a      	ldr	r3, [pc, #168]	@ (8003eac <Oscilloscope_Process+0x310>)
 8003e02:	2201      	movs	r2, #1
 8003e04:	701a      	strb	r2, [r3, #0]
		event_trigger = 1;
 8003e06:	4b2a      	ldr	r3, [pc, #168]	@ (8003eb0 <Oscilloscope_Process+0x314>)
 8003e08:	2201      	movs	r2, #1
 8003e0a:	701a      	strb	r2, [r3, #0]
		event_channel = 1;
 8003e0c:	4b29      	ldr	r3, [pc, #164]	@ (8003eb4 <Oscilloscope_Process+0x318>)
 8003e0e:	2201      	movs	r2, #1
 8003e10:	701a      	strb	r2, [r3, #0]
		event_button2 = 0;
 8003e12:	4b25      	ldr	r3, [pc, #148]	@ (8003ea8 <Oscilloscope_Process+0x30c>)
 8003e14:	2200      	movs	r2, #0
 8003e16:	701a      	strb	r2, [r3, #0]
	}

	// Handle UI redraw channel events
	if (event_channel) {
 8003e18:	4b26      	ldr	r3, [pc, #152]	@ (8003eb4 <Oscilloscope_Process+0x318>)
 8003e1a:	781b      	ldrb	r3, [r3, #0]
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d07f      	beq.n	8003f20 <Oscilloscope_Process+0x384>
		uint16_t channel0_color = menu_channel0_enabled ? ILI9341_YELLOW  : ILI9341_COLOR565(60, 60, 0);
 8003e20:	4b06      	ldr	r3, [pc, #24]	@ (8003e3c <Oscilloscope_Process+0x2a0>)
 8003e22:	781b      	ldrb	r3, [r3, #0]
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d047      	beq.n	8003eb8 <Oscilloscope_Process+0x31c>
 8003e28:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8003e2c:	e046      	b.n	8003ebc <Oscilloscope_Process+0x320>
 8003e2e:	bf00      	nop
 8003e30:	2000d100 	.word	0x2000d100
 8003e34:	2000f598 	.word	0x2000f598
 8003e38:	20015615 	.word	0x20015615
 8003e3c:	2000d10b 	.word	0x2000d10b
 8003e40:	2000f5f8 	.word	0x2000f5f8
 8003e44:	2000d0f4 	.word	0x2000d0f4
 8003e48:	20015628 	.word	0x20015628
 8003e4c:	20013614 	.word	0x20013614
 8003e50:	2000f614 	.word	0x2000f614
 8003e54:	2000d10c 	.word	0x2000d10c
 8003e58:	2000f5fc 	.word	0x2000f5fc
 8003e5c:	2000d0f6 	.word	0x2000d0f6
 8003e60:	20015a88 	.word	0x20015a88
 8003e64:	20014614 	.word	0x20014614
 8003e68:	20011614 	.word	0x20011614
 8003e6c:	20015620 	.word	0x20015620
 8003e70:	20015624 	.word	0x20015624
 8003e74:	42700000 	.word	0x42700000
 8003e78:	447a0000 	.word	0x447a0000
 8003e7c:	08013c9c 	.word	0x08013c9c
 8003e80:	20000000 	.word	0x20000000
 8003e84:	20015616 	.word	0x20015616
 8003e88:	20015619 	.word	0x20015619
 8003e8c:	2000d10e 	.word	0x2000d10e
 8003e90:	2000d110 	.word	0x2000d110
 8003e94:	2000d10d 	.word	0x2000d10d
 8003e98:	2000d107 	.word	0x2000d107
 8003e9c:	20015617 	.word	0x20015617
 8003ea0:	2001561a 	.word	0x2001561a
 8003ea4:	2000d101 	.word	0x2000d101
 8003ea8:	20015618 	.word	0x20015618
 8003eac:	2000d102 	.word	0x2000d102
 8003eb0:	2000d103 	.word	0x2000d103
 8003eb4:	2000d104 	.word	0x2000d104
 8003eb8:	f643 13e0 	movw	r3, #14816	@ 0x39e0
 8003ebc:	f8a7 31de 	strh.w	r3, [r7, #478]	@ 0x1de
		uint16_t channel1_color = menu_channel1_enabled ? ILI9341_CYAN    : ILI9341_COLOR565(0, 60, 60);
 8003ec0:	4b5e      	ldr	r3, [pc, #376]	@ (800403c <Oscilloscope_Process+0x4a0>)
 8003ec2:	781b      	ldrb	r3, [r3, #0]
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d002      	beq.n	8003ece <Oscilloscope_Process+0x332>
 8003ec8:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 8003ecc:	e001      	b.n	8003ed2 <Oscilloscope_Process+0x336>
 8003ece:	f240 13e7 	movw	r3, #487	@ 0x1e7
 8003ed2:	f8a7 31dc 	strh.w	r3, [r7, #476]	@ 0x1dc

		ILI9341_WriteString(&display, 110 - 12, 5, " CH1 ", Font_7x10, ILI9341_BLACK, channel0_color);
 8003ed6:	f8b7 31de 	ldrh.w	r3, [r7, #478]	@ 0x1de
 8003eda:	9303      	str	r3, [sp, #12]
 8003edc:	2300      	movs	r3, #0
 8003ede:	9302      	str	r3, [sp, #8]
 8003ee0:	4a57      	ldr	r2, [pc, #348]	@ (8004040 <Oscilloscope_Process+0x4a4>)
 8003ee2:	466b      	mov	r3, sp
 8003ee4:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003ee8:	e883 0003 	stmia.w	r3, {r0, r1}
 8003eec:	4b55      	ldr	r3, [pc, #340]	@ (8004044 <Oscilloscope_Process+0x4a8>)
 8003eee:	2205      	movs	r2, #5
 8003ef0:	2162      	movs	r1, #98	@ 0x62
 8003ef2:	4855      	ldr	r0, [pc, #340]	@ (8004048 <Oscilloscope_Process+0x4ac>)
 8003ef4:	f7fe f907 	bl	8002106 <ILI9341_WriteString>
		ILI9341_WriteString(&display, 148 - 12, 5, " CH2 ", Font_7x10, ILI9341_BLACK, channel1_color);
 8003ef8:	f8b7 31dc 	ldrh.w	r3, [r7, #476]	@ 0x1dc
 8003efc:	9303      	str	r3, [sp, #12]
 8003efe:	2300      	movs	r3, #0
 8003f00:	9302      	str	r3, [sp, #8]
 8003f02:	4a4f      	ldr	r2, [pc, #316]	@ (8004040 <Oscilloscope_Process+0x4a4>)
 8003f04:	466b      	mov	r3, sp
 8003f06:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003f0a:	e883 0003 	stmia.w	r3, {r0, r1}
 8003f0e:	4b4f      	ldr	r3, [pc, #316]	@ (800404c <Oscilloscope_Process+0x4b0>)
 8003f10:	2205      	movs	r2, #5
 8003f12:	2188      	movs	r1, #136	@ 0x88
 8003f14:	484c      	ldr	r0, [pc, #304]	@ (8004048 <Oscilloscope_Process+0x4ac>)
 8003f16:	f7fe f8f6 	bl	8002106 <ILI9341_WriteString>

		event_channel = 0;
 8003f1a:	4b4d      	ldr	r3, [pc, #308]	@ (8004050 <Oscilloscope_Process+0x4b4>)
 8003f1c:	2200      	movs	r2, #0
 8003f1e:	701a      	strb	r2, [r3, #0]
	}

	// Handle encoder0
	int32_t encoder0_curr = __HAL_TIM_GET_COUNTER(&htim3);
 8003f20:	4b4c      	ldr	r3, [pc, #304]	@ (8004054 <Oscilloscope_Process+0x4b8>)
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f26:	f8c7 31d8 	str.w	r3, [r7, #472]	@ 0x1d8
	encoder0_curr = 32767 - ((encoder0_curr - 1) & 0xFFFF) / 2;
 8003f2a:	f8d7 31d8 	ldr.w	r3, [r7, #472]	@ 0x1d8
 8003f2e:	3b01      	subs	r3, #1
 8003f30:	b29b      	uxth	r3, r3
 8003f32:	0fda      	lsrs	r2, r3, #31
 8003f34:	4413      	add	r3, r2
 8003f36:	105b      	asrs	r3, r3, #1
 8003f38:	425b      	negs	r3, r3
 8003f3a:	f503 43ff 	add.w	r3, r3, #32640	@ 0x7f80
 8003f3e:	337f      	adds	r3, #127	@ 0x7f
 8003f40:	f8c7 31d8 	str.w	r3, [r7, #472]	@ 0x1d8

	if(encoder0_curr != encoder0_prev) {
 8003f44:	4b44      	ldr	r3, [pc, #272]	@ (8004058 <Oscilloscope_Process+0x4bc>)
 8003f46:	881b      	ldrh	r3, [r3, #0]
 8003f48:	461a      	mov	r2, r3
 8003f4a:	f8d7 31d8 	ldr.w	r3, [r7, #472]	@ 0x1d8
 8003f4e:	4293      	cmp	r3, r2
 8003f50:	f000 80dd 	beq.w	800410e <Oscilloscope_Process+0x572>
		int32_t delta = encoder0_curr - encoder0_prev;
 8003f54:	4b40      	ldr	r3, [pc, #256]	@ (8004058 <Oscilloscope_Process+0x4bc>)
 8003f56:	881b      	ldrh	r3, [r3, #0]
 8003f58:	461a      	mov	r2, r3
 8003f5a:	f8d7 31d8 	ldr.w	r3, [r7, #472]	@ 0x1d8
 8003f5e:	1a9b      	subs	r3, r3, r2
 8003f60:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8

		if (delta > 10)
 8003f64:	f8d7 31e8 	ldr.w	r3, [r7, #488]	@ 0x1e8
 8003f68:	2b0a      	cmp	r3, #10
 8003f6a:	dd03      	ble.n	8003f74 <Oscilloscope_Process+0x3d8>
			delta = -1;
 8003f6c:	f04f 33ff 	mov.w	r3, #4294967295
 8003f70:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8

		if (delta < -10)
 8003f74:	f8d7 31e8 	ldr.w	r3, [r7, #488]	@ 0x1e8
 8003f78:	f113 0f0a 	cmn.w	r3, #10
 8003f7c:	da02      	bge.n	8003f84 <Oscilloscope_Process+0x3e8>
			delta = 1;
 8003f7e:	2301      	movs	r3, #1
 8003f80:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8

		if (menu_extended) {
 8003f84:	4b35      	ldr	r3, [pc, #212]	@ (800405c <Oscilloscope_Process+0x4c0>)
 8003f86:	781b      	ldrb	r3, [r3, #0]
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d071      	beq.n	8004070 <Oscilloscope_Process+0x4d4>
			ILI9341_Rectangle(&display, menu_selector_x, menu_selector_y, 38, 13, ILI9341_BLACK);
 8003f8c:	4b34      	ldr	r3, [pc, #208]	@ (8004060 <Oscilloscope_Process+0x4c4>)
 8003f8e:	8819      	ldrh	r1, [r3, #0]
 8003f90:	4b34      	ldr	r3, [pc, #208]	@ (8004064 <Oscilloscope_Process+0x4c8>)
 8003f92:	881a      	ldrh	r2, [r3, #0]
 8003f94:	2300      	movs	r3, #0
 8003f96:	9301      	str	r3, [sp, #4]
 8003f98:	230d      	movs	r3, #13
 8003f9a:	9300      	str	r3, [sp, #0]
 8003f9c:	2326      	movs	r3, #38	@ 0x26
 8003f9e:	482a      	ldr	r0, [pc, #168]	@ (8004048 <Oscilloscope_Process+0x4ac>)
 8003fa0:	f7fd fff6 	bl	8001f90 <ILI9341_Rectangle>

			menu_selected_item += delta;
 8003fa4:	f8d7 31e8 	ldr.w	r3, [r7, #488]	@ 0x1e8
 8003fa8:	b2da      	uxtb	r2, r3
 8003faa:	4b2f      	ldr	r3, [pc, #188]	@ (8004068 <Oscilloscope_Process+0x4cc>)
 8003fac:	f993 3000 	ldrsb.w	r3, [r3]
 8003fb0:	b2db      	uxtb	r3, r3
 8003fb2:	4413      	add	r3, r2
 8003fb4:	b2db      	uxtb	r3, r3
 8003fb6:	b25a      	sxtb	r2, r3
 8003fb8:	4b2b      	ldr	r3, [pc, #172]	@ (8004068 <Oscilloscope_Process+0x4cc>)
 8003fba:	701a      	strb	r2, [r3, #0]

			if (menu_selected_item < 0)
 8003fbc:	4b2a      	ldr	r3, [pc, #168]	@ (8004068 <Oscilloscope_Process+0x4cc>)
 8003fbe:	f993 3000 	ldrsb.w	r3, [r3]
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	da02      	bge.n	8003fcc <Oscilloscope_Process+0x430>
				menu_selected_item = 0;
 8003fc6:	4b28      	ldr	r3, [pc, #160]	@ (8004068 <Oscilloscope_Process+0x4cc>)
 8003fc8:	2200      	movs	r2, #0
 8003fca:	701a      	strb	r2, [r3, #0]

			if (menu_selected_item > 5)
 8003fcc:	4b26      	ldr	r3, [pc, #152]	@ (8004068 <Oscilloscope_Process+0x4cc>)
 8003fce:	f993 3000 	ldrsb.w	r3, [r3]
 8003fd2:	2b05      	cmp	r3, #5
 8003fd4:	dd02      	ble.n	8003fdc <Oscilloscope_Process+0x440>
				menu_selected_item = 5;
 8003fd6:	4b24      	ldr	r3, [pc, #144]	@ (8004068 <Oscilloscope_Process+0x4cc>)
 8003fd8:	2205      	movs	r2, #5
 8003fda:	701a      	strb	r2, [r3, #0]

			if (menu_selected_item < 4) {
 8003fdc:	4b22      	ldr	r3, [pc, #136]	@ (8004068 <Oscilloscope_Process+0x4cc>)
 8003fde:	f993 3000 	ldrsb.w	r3, [r3]
 8003fe2:	2b03      	cmp	r3, #3
 8003fe4:	dc12      	bgt.n	800400c <Oscilloscope_Process+0x470>
				menu_selector_x = 20 + 38 * menu_selected_item;
 8003fe6:	4b20      	ldr	r3, [pc, #128]	@ (8004068 <Oscilloscope_Process+0x4cc>)
 8003fe8:	f993 3000 	ldrsb.w	r3, [r3]
 8003fec:	b29b      	uxth	r3, r3
 8003fee:	461a      	mov	r2, r3
 8003ff0:	00d2      	lsls	r2, r2, #3
 8003ff2:	441a      	add	r2, r3
 8003ff4:	0052      	lsls	r2, r2, #1
 8003ff6:	4413      	add	r3, r2
 8003ff8:	005b      	lsls	r3, r3, #1
 8003ffa:	b29b      	uxth	r3, r3
 8003ffc:	3314      	adds	r3, #20
 8003ffe:	b29a      	uxth	r2, r3
 8004000:	4b17      	ldr	r3, [pc, #92]	@ (8004060 <Oscilloscope_Process+0x4c4>)
 8004002:	801a      	strh	r2, [r3, #0]
				menu_selector_y = 3;
 8004004:	4b17      	ldr	r3, [pc, #92]	@ (8004064 <Oscilloscope_Process+0x4c8>)
 8004006:	2203      	movs	r2, #3
 8004008:	801a      	strh	r2, [r3, #0]
 800400a:	e012      	b.n	8004032 <Oscilloscope_Process+0x496>
			} else {
				menu_selector_x = 20 + 38 * (menu_selected_item - 4);
 800400c:	4b16      	ldr	r3, [pc, #88]	@ (8004068 <Oscilloscope_Process+0x4cc>)
 800400e:	f993 3000 	ldrsb.w	r3, [r3]
 8004012:	3b04      	subs	r3, #4
 8004014:	b29b      	uxth	r3, r3
 8004016:	461a      	mov	r2, r3
 8004018:	00d2      	lsls	r2, r2, #3
 800401a:	441a      	add	r2, r3
 800401c:	0052      	lsls	r2, r2, #1
 800401e:	4413      	add	r3, r2
 8004020:	005b      	lsls	r3, r3, #1
 8004022:	b29b      	uxth	r3, r3
 8004024:	3314      	adds	r3, #20
 8004026:	b29a      	uxth	r2, r3
 8004028:	4b0d      	ldr	r3, [pc, #52]	@ (8004060 <Oscilloscope_Process+0x4c4>)
 800402a:	801a      	strh	r2, [r3, #0]
				menu_selector_y = 223;
 800402c:	4b0d      	ldr	r3, [pc, #52]	@ (8004064 <Oscilloscope_Process+0x4c8>)
 800402e:	22df      	movs	r2, #223	@ 0xdf
 8004030:	801a      	strh	r2, [r3, #0]
			}

			event_selector = 1;
 8004032:	4b0e      	ldr	r3, [pc, #56]	@ (800406c <Oscilloscope_Process+0x4d0>)
 8004034:	2201      	movs	r2, #1
 8004036:	701a      	strb	r2, [r3, #0]
 8004038:	e05e      	b.n	80040f8 <Oscilloscope_Process+0x55c>
 800403a:	bf00      	nop
 800403c:	2000d10c 	.word	0x2000d10c
 8004040:	20000000 	.word	0x20000000
 8004044:	08013ca8 	.word	0x08013ca8
 8004048:	2000f598 	.word	0x2000f598
 800404c:	08013cb0 	.word	0x08013cb0
 8004050:	2000d104 	.word	0x2000d104
 8004054:	20016038 	.word	0x20016038
 8004058:	2001561c 	.word	0x2001561c
 800405c:	20015619 	.word	0x20015619
 8004060:	2000d10e 	.word	0x2000d10e
 8004064:	2000d110 	.word	0x2000d110
 8004068:	2000d10d 	.word	0x2000d10d
 800406c:	2000d107 	.word	0x2000d107

		} else {

			if (menu_selected_item == 2) {
 8004070:	4ba0      	ldr	r3, [pc, #640]	@ (80042f4 <Oscilloscope_Process+0x758>)
 8004072:	f993 3000 	ldrsb.w	r3, [r3]
 8004076:	2b02      	cmp	r3, #2
 8004078:	d11c      	bne.n	80040b4 <Oscilloscope_Process+0x518>
				clearCursor(&display, cursor0);
 800407a:	4b9f      	ldr	r3, [pc, #636]	@ (80042f8 <Oscilloscope_Process+0x75c>)
 800407c:	881b      	ldrh	r3, [r3, #0]
 800407e:	4619      	mov	r1, r3
 8004080:	489e      	ldr	r0, [pc, #632]	@ (80042fc <Oscilloscope_Process+0x760>)
 8004082:	f7fe ffd6 	bl	8003032 <clearCursor>
				cursor0 += delta;
 8004086:	f8d7 31e8 	ldr.w	r3, [r7, #488]	@ 0x1e8
 800408a:	b29a      	uxth	r2, r3
 800408c:	4b9a      	ldr	r3, [pc, #616]	@ (80042f8 <Oscilloscope_Process+0x75c>)
 800408e:	881b      	ldrh	r3, [r3, #0]
 8004090:	4413      	add	r3, r2
 8004092:	b29a      	uxth	r2, r3
 8004094:	4b98      	ldr	r3, [pc, #608]	@ (80042f8 <Oscilloscope_Process+0x75c>)
 8004096:	801a      	strh	r2, [r3, #0]

				if (cursor0 < 20)
 8004098:	4b97      	ldr	r3, [pc, #604]	@ (80042f8 <Oscilloscope_Process+0x75c>)
 800409a:	881b      	ldrh	r3, [r3, #0]
 800409c:	2b13      	cmp	r3, #19
 800409e:	d802      	bhi.n	80040a6 <Oscilloscope_Process+0x50a>
					cursor0 = 20;
 80040a0:	4b95      	ldr	r3, [pc, #596]	@ (80042f8 <Oscilloscope_Process+0x75c>)
 80040a2:	2214      	movs	r2, #20
 80040a4:	801a      	strh	r2, [r3, #0]

				if (cursor0 > 220)
 80040a6:	4b94      	ldr	r3, [pc, #592]	@ (80042f8 <Oscilloscope_Process+0x75c>)
 80040a8:	881b      	ldrh	r3, [r3, #0]
 80040aa:	2bdc      	cmp	r3, #220	@ 0xdc
 80040ac:	d902      	bls.n	80040b4 <Oscilloscope_Process+0x518>
					cursor0 = 220;
 80040ae:	4b92      	ldr	r3, [pc, #584]	@ (80042f8 <Oscilloscope_Process+0x75c>)
 80040b0:	22dc      	movs	r2, #220	@ 0xdc
 80040b2:	801a      	strh	r2, [r3, #0]
			}

			if (menu_selected_item == 3) {
 80040b4:	4b8f      	ldr	r3, [pc, #572]	@ (80042f4 <Oscilloscope_Process+0x758>)
 80040b6:	f993 3000 	ldrsb.w	r3, [r3]
 80040ba:	2b03      	cmp	r3, #3
 80040bc:	d11c      	bne.n	80040f8 <Oscilloscope_Process+0x55c>
				clearCursor(&display, cursor1);
 80040be:	4b90      	ldr	r3, [pc, #576]	@ (8004300 <Oscilloscope_Process+0x764>)
 80040c0:	881b      	ldrh	r3, [r3, #0]
 80040c2:	4619      	mov	r1, r3
 80040c4:	488d      	ldr	r0, [pc, #564]	@ (80042fc <Oscilloscope_Process+0x760>)
 80040c6:	f7fe ffb4 	bl	8003032 <clearCursor>
				cursor1 += delta;
 80040ca:	f8d7 31e8 	ldr.w	r3, [r7, #488]	@ 0x1e8
 80040ce:	b29a      	uxth	r2, r3
 80040d0:	4b8b      	ldr	r3, [pc, #556]	@ (8004300 <Oscilloscope_Process+0x764>)
 80040d2:	881b      	ldrh	r3, [r3, #0]
 80040d4:	4413      	add	r3, r2
 80040d6:	b29a      	uxth	r2, r3
 80040d8:	4b89      	ldr	r3, [pc, #548]	@ (8004300 <Oscilloscope_Process+0x764>)
 80040da:	801a      	strh	r2, [r3, #0]

				if (cursor1 < 20)
 80040dc:	4b88      	ldr	r3, [pc, #544]	@ (8004300 <Oscilloscope_Process+0x764>)
 80040de:	881b      	ldrh	r3, [r3, #0]
 80040e0:	2b13      	cmp	r3, #19
 80040e2:	d802      	bhi.n	80040ea <Oscilloscope_Process+0x54e>
					cursor1 = 20;
 80040e4:	4b86      	ldr	r3, [pc, #536]	@ (8004300 <Oscilloscope_Process+0x764>)
 80040e6:	2214      	movs	r2, #20
 80040e8:	801a      	strh	r2, [r3, #0]

				if (cursor1 > 220)
 80040ea:	4b85      	ldr	r3, [pc, #532]	@ (8004300 <Oscilloscope_Process+0x764>)
 80040ec:	881b      	ldrh	r3, [r3, #0]
 80040ee:	2bdc      	cmp	r3, #220	@ 0xdc
 80040f0:	d902      	bls.n	80040f8 <Oscilloscope_Process+0x55c>
					cursor1 = 220;
 80040f2:	4b83      	ldr	r3, [pc, #524]	@ (8004300 <Oscilloscope_Process+0x764>)
 80040f4:	22dc      	movs	r2, #220	@ 0xdc
 80040f6:	801a      	strh	r2, [r3, #0]
			}

		}

		event_cursor = 1;
 80040f8:	4b82      	ldr	r3, [pc, #520]	@ (8004304 <Oscilloscope_Process+0x768>)
 80040fa:	2201      	movs	r2, #1
 80040fc:	701a      	strb	r2, [r3, #0]
		event_trigger = 1;
 80040fe:	4b82      	ldr	r3, [pc, #520]	@ (8004308 <Oscilloscope_Process+0x76c>)
 8004100:	2201      	movs	r2, #1
 8004102:	701a      	strb	r2, [r3, #0]
		encoder0_prev = encoder0_curr;
 8004104:	f8d7 31d8 	ldr.w	r3, [r7, #472]	@ 0x1d8
 8004108:	b29a      	uxth	r2, r3
 800410a:	4b80      	ldr	r3, [pc, #512]	@ (800430c <Oscilloscope_Process+0x770>)
 800410c:	801a      	strh	r2, [r3, #0]
	}

	// Handle UI redraw cursor events
	if (event_cursor) {
 800410e:	4b7d      	ldr	r3, [pc, #500]	@ (8004304 <Oscilloscope_Process+0x768>)
 8004110:	781b      	ldrb	r3, [r3, #0]
 8004112:	2b00      	cmp	r3, #0
 8004114:	d026      	beq.n	8004164 <Oscilloscope_Process+0x5c8>
		clearCursor(&display, cursor0);
 8004116:	4b78      	ldr	r3, [pc, #480]	@ (80042f8 <Oscilloscope_Process+0x75c>)
 8004118:	881b      	ldrh	r3, [r3, #0]
 800411a:	4619      	mov	r1, r3
 800411c:	4877      	ldr	r0, [pc, #476]	@ (80042fc <Oscilloscope_Process+0x760>)
 800411e:	f7fe ff88 	bl	8003032 <clearCursor>
		clearCursor(&display, cursor1);
 8004122:	4b77      	ldr	r3, [pc, #476]	@ (8004300 <Oscilloscope_Process+0x764>)
 8004124:	881b      	ldrh	r3, [r3, #0]
 8004126:	4619      	mov	r1, r3
 8004128:	4874      	ldr	r0, [pc, #464]	@ (80042fc <Oscilloscope_Process+0x760>)
 800412a:	f7fe ff82 	bl	8003032 <clearCursor>

		if (menu_channel0_enabled)
 800412e:	4b78      	ldr	r3, [pc, #480]	@ (8004310 <Oscilloscope_Process+0x774>)
 8004130:	781b      	ldrb	r3, [r3, #0]
 8004132:	2b00      	cmp	r3, #0
 8004134:	d007      	beq.n	8004146 <Oscilloscope_Process+0x5aa>
			drawCursor(&display, cursor0, "C1", ILI9341_YELLOW);
 8004136:	4b70      	ldr	r3, [pc, #448]	@ (80042f8 <Oscilloscope_Process+0x75c>)
 8004138:	8819      	ldrh	r1, [r3, #0]
 800413a:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 800413e:	4a75      	ldr	r2, [pc, #468]	@ (8004314 <Oscilloscope_Process+0x778>)
 8004140:	486e      	ldr	r0, [pc, #440]	@ (80042fc <Oscilloscope_Process+0x760>)
 8004142:	f7fe ffa3 	bl	800308c <drawCursor>

		if (menu_channel1_enabled)
 8004146:	4b74      	ldr	r3, [pc, #464]	@ (8004318 <Oscilloscope_Process+0x77c>)
 8004148:	781b      	ldrb	r3, [r3, #0]
 800414a:	2b00      	cmp	r3, #0
 800414c:	d007      	beq.n	800415e <Oscilloscope_Process+0x5c2>
			drawCursor(&display, cursor1, "C2", ILI9341_CYAN);
 800414e:	4b6c      	ldr	r3, [pc, #432]	@ (8004300 <Oscilloscope_Process+0x764>)
 8004150:	8819      	ldrh	r1, [r3, #0]
 8004152:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 8004156:	4a71      	ldr	r2, [pc, #452]	@ (800431c <Oscilloscope_Process+0x780>)
 8004158:	4868      	ldr	r0, [pc, #416]	@ (80042fc <Oscilloscope_Process+0x760>)
 800415a:	f7fe ff97 	bl	800308c <drawCursor>

		event_cursor = 0;
 800415e:	4b69      	ldr	r3, [pc, #420]	@ (8004304 <Oscilloscope_Process+0x768>)
 8004160:	2200      	movs	r2, #0
 8004162:	701a      	strb	r2, [r3, #0]
	}

	// Handle encoder1
	int32_t encoder1_curr = __HAL_TIM_GET_COUNTER(&htim4);
 8004164:	4b6e      	ldr	r3, [pc, #440]	@ (8004320 <Oscilloscope_Process+0x784>)
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800416a:	f8c7 31d4 	str.w	r3, [r7, #468]	@ 0x1d4
	encoder1_curr = 32767 - ((encoder1_curr - 1) & 0xFFFF) / 2;
 800416e:	f8d7 31d4 	ldr.w	r3, [r7, #468]	@ 0x1d4
 8004172:	3b01      	subs	r3, #1
 8004174:	b29b      	uxth	r3, r3
 8004176:	0fda      	lsrs	r2, r3, #31
 8004178:	4413      	add	r3, r2
 800417a:	105b      	asrs	r3, r3, #1
 800417c:	425b      	negs	r3, r3
 800417e:	f503 43ff 	add.w	r3, r3, #32640	@ 0x7f80
 8004182:	337f      	adds	r3, #127	@ 0x7f
 8004184:	f8c7 31d4 	str.w	r3, [r7, #468]	@ 0x1d4

	if(encoder1_curr != encoder1_prev || event_trigger) {
 8004188:	4b66      	ldr	r3, [pc, #408]	@ (8004324 <Oscilloscope_Process+0x788>)
 800418a:	881b      	ldrh	r3, [r3, #0]
 800418c:	461a      	mov	r2, r3
 800418e:	f8d7 31d4 	ldr.w	r3, [r7, #468]	@ 0x1d4
 8004192:	4293      	cmp	r3, r2
 8004194:	d104      	bne.n	80041a0 <Oscilloscope_Process+0x604>
 8004196:	4b5c      	ldr	r3, [pc, #368]	@ (8004308 <Oscilloscope_Process+0x76c>)
 8004198:	781b      	ldrb	r3, [r3, #0]
 800419a:	2b00      	cmp	r3, #0
 800419c:	f000 824a 	beq.w	8004634 <Oscilloscope_Process+0xa98>
		int32_t delta = encoder1_curr - encoder1_prev;
 80041a0:	4b60      	ldr	r3, [pc, #384]	@ (8004324 <Oscilloscope_Process+0x788>)
 80041a2:	881b      	ldrh	r3, [r3, #0]
 80041a4:	461a      	mov	r2, r3
 80041a6:	f8d7 31d4 	ldr.w	r3, [r7, #468]	@ 0x1d4
 80041aa:	1a9b      	subs	r3, r3, r2
 80041ac:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4

		if (delta > 10)
 80041b0:	f8d7 31e4 	ldr.w	r3, [r7, #484]	@ 0x1e4
 80041b4:	2b0a      	cmp	r3, #10
 80041b6:	dd03      	ble.n	80041c0 <Oscilloscope_Process+0x624>
			delta = -1;
 80041b8:	f04f 33ff 	mov.w	r3, #4294967295
 80041bc:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4

		if (delta < -10)
 80041c0:	f8d7 31e4 	ldr.w	r3, [r7, #484]	@ 0x1e4
 80041c4:	f113 0f0a 	cmn.w	r3, #10
 80041c8:	da02      	bge.n	80041d0 <Oscilloscope_Process+0x634>
			delta = 1;
 80041ca:	2301      	movs	r3, #1
 80041cc:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4

		if (menu_extended) {
 80041d0:	4b55      	ldr	r3, [pc, #340]	@ (8004328 <Oscilloscope_Process+0x78c>)
 80041d2:	781b      	ldrb	r3, [r3, #0]
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	f000 816f 	beq.w	80044b8 <Oscilloscope_Process+0x91c>

			if (menu_selected_item == 1) {
 80041da:	4b46      	ldr	r3, [pc, #280]	@ (80042f4 <Oscilloscope_Process+0x758>)
 80041dc:	f993 3000 	ldrsb.w	r3, [r3]
 80041e0:	2b01      	cmp	r3, #1
 80041e2:	d112      	bne.n	800420a <Oscilloscope_Process+0x66e>
				trigger_mode += delta;
 80041e4:	f8d7 31e4 	ldr.w	r3, [r7, #484]	@ 0x1e4
 80041e8:	b2da      	uxtb	r2, r3
 80041ea:	4b50      	ldr	r3, [pc, #320]	@ (800432c <Oscilloscope_Process+0x790>)
 80041ec:	781b      	ldrb	r3, [r3, #0]
 80041ee:	4413      	add	r3, r2
 80041f0:	b2da      	uxtb	r2, r3
 80041f2:	4b4e      	ldr	r3, [pc, #312]	@ (800432c <Oscilloscope_Process+0x790>)
 80041f4:	701a      	strb	r2, [r3, #0]

				if (trigger_mode < 0)
					trigger_mode = 0;

				if (trigger_mode > 1)
 80041f6:	4b4d      	ldr	r3, [pc, #308]	@ (800432c <Oscilloscope_Process+0x790>)
 80041f8:	781b      	ldrb	r3, [r3, #0]
 80041fa:	2b01      	cmp	r3, #1
 80041fc:	d902      	bls.n	8004204 <Oscilloscope_Process+0x668>
					trigger_mode = 1;
 80041fe:	4b4b      	ldr	r3, [pc, #300]	@ (800432c <Oscilloscope_Process+0x790>)
 8004200:	2201      	movs	r2, #1
 8004202:	701a      	strb	r2, [r3, #0]

				event_trigger_mode = 1;
 8004204:	4b4a      	ldr	r3, [pc, #296]	@ (8004330 <Oscilloscope_Process+0x794>)
 8004206:	2201      	movs	r2, #1
 8004208:	701a      	strb	r2, [r3, #0]
			}

			if (menu_selected_item == 4) {
 800420a:	4b3a      	ldr	r3, [pc, #232]	@ (80042f4 <Oscilloscope_Process+0x758>)
 800420c:	f993 3000 	ldrsb.w	r3, [r3]
 8004210:	2b04      	cmp	r3, #4
 8004212:	f040 8100 	bne.w	8004416 <Oscilloscope_Process+0x87a>
				mode_seconds += delta;
 8004216:	f8d7 31e4 	ldr.w	r3, [r7, #484]	@ 0x1e4
 800421a:	b2da      	uxtb	r2, r3
 800421c:	4b45      	ldr	r3, [pc, #276]	@ (8004334 <Oscilloscope_Process+0x798>)
 800421e:	781b      	ldrb	r3, [r3, #0]
 8004220:	4413      	add	r3, r2
 8004222:	b2da      	uxtb	r2, r3
 8004224:	4b43      	ldr	r3, [pc, #268]	@ (8004334 <Oscilloscope_Process+0x798>)
 8004226:	701a      	strb	r2, [r3, #0]

				if (mode_seconds < 0)
					mode_seconds = 0;

				if (mode_seconds > 16)
 8004228:	4b42      	ldr	r3, [pc, #264]	@ (8004334 <Oscilloscope_Process+0x798>)
 800422a:	781b      	ldrb	r3, [r3, #0]
 800422c:	2b10      	cmp	r3, #16
 800422e:	d902      	bls.n	8004236 <Oscilloscope_Process+0x69a>
					mode_seconds = 16;
 8004230:	4b40      	ldr	r3, [pc, #256]	@ (8004334 <Oscilloscope_Process+0x798>)
 8004232:	2210      	movs	r2, #16
 8004234:	701a      	strb	r2, [r3, #0]

				uint32_t list_seconds[17] = {
 8004236:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 800423a:	f5a3 73f8 	sub.w	r3, r3, #496	@ 0x1f0
 800423e:	4a3e      	ldr	r2, [pc, #248]	@ (8004338 <Oscilloscope_Process+0x79c>)
 8004240:	4618      	mov	r0, r3
 8004242:	4611      	mov	r1, r2
 8004244:	2344      	movs	r3, #68	@ 0x44
 8004246:	461a      	mov	r2, r3
 8004248:	f00c f9b3 	bl	80105b2 <memcpy>
					200000,
					500000,
					1000000
				};

				xlim_us = list_seconds[mode_seconds];
 800424c:	4b39      	ldr	r3, [pc, #228]	@ (8004334 <Oscilloscope_Process+0x798>)
 800424e:	781b      	ldrb	r3, [r3, #0]
 8004250:	461a      	mov	r2, r3
 8004252:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 8004256:	f5a3 73f8 	sub.w	r3, r3, #496	@ 0x1f0
 800425a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800425e:	4a37      	ldr	r2, [pc, #220]	@ (800433c <Oscilloscope_Process+0x7a0>)
 8004260:	6013      	str	r3, [r2, #0]

				if (adc_immediate) {
 8004262:	4b37      	ldr	r3, [pc, #220]	@ (8004340 <Oscilloscope_Process+0x7a4>)
 8004264:	781b      	ldrb	r3, [r3, #0]
 8004266:	2b00      	cmp	r3, #0
 8004268:	d005      	beq.n	8004276 <Oscilloscope_Process+0x6da>
					HAL_TIM_Base_Stop_IT(&htim10);
 800426a:	4836      	ldr	r0, [pc, #216]	@ (8004344 <Oscilloscope_Process+0x7a8>)
 800426c:	f004 ff7e 	bl	800916c <HAL_TIM_Base_Stop_IT>
					adc_available = 1;
 8004270:	4b35      	ldr	r3, [pc, #212]	@ (8004348 <Oscilloscope_Process+0x7ac>)
 8004272:	2201      	movs	r2, #1
 8004274:	701a      	strb	r2, [r3, #0]
				}

				HAL_ADC_Stop_DMA(&hadc1);
 8004276:	4835      	ldr	r0, [pc, #212]	@ (800434c <Oscilloscope_Process+0x7b0>)
 8004278:	f001 fca6 	bl	8005bc8 <HAL_ADC_Stop_DMA>

				adc_reset_cyccnt = 1;
 800427c:	4b34      	ldr	r3, [pc, #208]	@ (8004350 <Oscilloscope_Process+0x7b4>)
 800427e:	2201      	movs	r2, #1
 8004280:	701a      	strb	r2, [r3, #0]
				adc0_length = 0;
 8004282:	4b34      	ldr	r3, [pc, #208]	@ (8004354 <Oscilloscope_Process+0x7b8>)
 8004284:	2200      	movs	r2, #0
 8004286:	601a      	str	r2, [r3, #0]
				adc1_length = 0;
 8004288:	4b33      	ldr	r3, [pc, #204]	@ (8004358 <Oscilloscope_Process+0x7bc>)
 800428a:	2200      	movs	r2, #0
 800428c:	601a      	str	r2, [r3, #0]
				adc_max[0] = 0;
 800428e:	4b33      	ldr	r3, [pc, #204]	@ (800435c <Oscilloscope_Process+0x7c0>)
 8004290:	2200      	movs	r2, #0
 8004292:	801a      	strh	r2, [r3, #0]
				adc_max[1] = 0;
 8004294:	4b31      	ldr	r3, [pc, #196]	@ (800435c <Oscilloscope_Process+0x7c0>)
 8004296:	2200      	movs	r2, #0
 8004298:	805a      	strh	r2, [r3, #2]
				adc_min[0] = -1;
 800429a:	4b31      	ldr	r3, [pc, #196]	@ (8004360 <Oscilloscope_Process+0x7c4>)
 800429c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80042a0:	801a      	strh	r2, [r3, #0]
				adc_min[1] = -1;
 80042a2:	4b2f      	ldr	r3, [pc, #188]	@ (8004360 <Oscilloscope_Process+0x7c4>)
 80042a4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80042a8:	805a      	strh	r2, [r3, #2]
				adc_period[0] = 0;
 80042aa:	4b2e      	ldr	r3, [pc, #184]	@ (8004364 <Oscilloscope_Process+0x7c8>)
 80042ac:	2200      	movs	r2, #0
 80042ae:	601a      	str	r2, [r3, #0]
				adc_period[1] = 0;
 80042b0:	4b2c      	ldr	r3, [pc, #176]	@ (8004364 <Oscilloscope_Process+0x7c8>)
 80042b2:	2200      	movs	r2, #0
 80042b4:	605a      	str	r2, [r3, #4]
				adc_period0_detected = 0;
 80042b6:	4b2c      	ldr	r3, [pc, #176]	@ (8004368 <Oscilloscope_Process+0x7cc>)
 80042b8:	2200      	movs	r2, #0
 80042ba:	701a      	strb	r2, [r3, #0]
				adc_period1_detected = 0;
 80042bc:	4b2b      	ldr	r3, [pc, #172]	@ (800436c <Oscilloscope_Process+0x7d0>)
 80042be:	2200      	movs	r2, #0
 80042c0:	701a      	strb	r2, [r3, #0]
				event_trigger0_detected = 0;
 80042c2:	4b2b      	ldr	r3, [pc, #172]	@ (8004370 <Oscilloscope_Process+0x7d4>)
 80042c4:	2200      	movs	r2, #0
 80042c6:	701a      	strb	r2, [r3, #0]
				event_trigger1_detected = 0;
 80042c8:	4b2a      	ldr	r3, [pc, #168]	@ (8004374 <Oscilloscope_Process+0x7d8>)
 80042ca:	2200      	movs	r2, #0
 80042cc:	701a      	strb	r2, [r3, #0]

				if (menu_channel0_enabled)
 80042ce:	4b10      	ldr	r3, [pc, #64]	@ (8004310 <Oscilloscope_Process+0x774>)
 80042d0:	781b      	ldrb	r3, [r3, #0]
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d003      	beq.n	80042de <Oscilloscope_Process+0x742>
					adc0_filled = 0;
 80042d6:	4b28      	ldr	r3, [pc, #160]	@ (8004378 <Oscilloscope_Process+0x7dc>)
 80042d8:	2200      	movs	r2, #0
 80042da:	701a      	strb	r2, [r3, #0]
 80042dc:	e002      	b.n	80042e4 <Oscilloscope_Process+0x748>
				else
					adc0_filled = 1;
 80042de:	4b26      	ldr	r3, [pc, #152]	@ (8004378 <Oscilloscope_Process+0x7dc>)
 80042e0:	2201      	movs	r2, #1
 80042e2:	701a      	strb	r2, [r3, #0]

				if (menu_channel1_enabled)
 80042e4:	4b0c      	ldr	r3, [pc, #48]	@ (8004318 <Oscilloscope_Process+0x77c>)
 80042e6:	781b      	ldrb	r3, [r3, #0]
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d049      	beq.n	8004380 <Oscilloscope_Process+0x7e4>
					adc1_filled = 0;
 80042ec:	4b23      	ldr	r3, [pc, #140]	@ (800437c <Oscilloscope_Process+0x7e0>)
 80042ee:	2200      	movs	r2, #0
 80042f0:	701a      	strb	r2, [r3, #0]
 80042f2:	e048      	b.n	8004386 <Oscilloscope_Process+0x7ea>
 80042f4:	2000d10d 	.word	0x2000d10d
 80042f8:	2000d0f4 	.word	0x2000d0f4
 80042fc:	2000f598 	.word	0x2000f598
 8004300:	2000d0f6 	.word	0x2000d0f6
 8004304:	2000d102 	.word	0x2000d102
 8004308:	2000d103 	.word	0x2000d103
 800430c:	2001561c 	.word	0x2001561c
 8004310:	2000d10b 	.word	0x2000d10b
 8004314:	08013cb8 	.word	0x08013cb8
 8004318:	2000d10c 	.word	0x2000d10c
 800431c:	08013cbc 	.word	0x08013cbc
 8004320:	20016080 	.word	0x20016080
 8004324:	2001561e 	.word	0x2001561e
 8004328:	20015619 	.word	0x20015619
 800432c:	20015614 	.word	0x20015614
 8004330:	2000d108 	.word	0x2000d108
 8004334:	2000d112 	.word	0x2000d112
 8004338:	08013d18 	.word	0x08013d18
 800433c:	2000d0ec 	.word	0x2000d0ec
 8004340:	2000d0e8 	.word	0x2000d0e8
 8004344:	200160c8 	.word	0x200160c8
 8004348:	2000d0e1 	.word	0x2000d0e1
 800434c:	2000d318 	.word	0x2000d318
 8004350:	2000d0e2 	.word	0x2000d0e2
 8004354:	2000f5f8 	.word	0x2000f5f8
 8004358:	2000f5fc 	.word	0x2000f5fc
 800435c:	2000f604 	.word	0x2000f604
 8004360:	2000d0e4 	.word	0x2000d0e4
 8004364:	2000f608 	.word	0x2000f608
 8004368:	2000f610 	.word	0x2000f610
 800436c:	2000f611 	.word	0x2000f611
 8004370:	2000d109 	.word	0x2000d109
 8004374:	2000d10a 	.word	0x2000d10a
 8004378:	2000f600 	.word	0x2000f600
 800437c:	2000d0e0 	.word	0x2000d0e0
				else
					adc1_filled = 1;
 8004380:	4b3f      	ldr	r3, [pc, #252]	@ (8004480 <Oscilloscope_Process+0x8e4>)
 8004382:	2201      	movs	r2, #1
 8004384:	701a      	strb	r2, [r3, #0]

				adc_immediate = xlim_us <= 500;
 8004386:	4b3f      	ldr	r3, [pc, #252]	@ (8004484 <Oscilloscope_Process+0x8e8>)
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 800438e:	bf94      	ite	ls
 8004390:	2301      	movls	r3, #1
 8004392:	2300      	movhi	r3, #0
 8004394:	b2db      	uxtb	r3, r3
 8004396:	461a      	mov	r2, r3
 8004398:	4b3b      	ldr	r3, [pc, #236]	@ (8004488 <Oscilloscope_Process+0x8ec>)
 800439a:	701a      	strb	r2, [r3, #0]

				if (!adc_immediate) {
 800439c:	4b3a      	ldr	r3, [pc, #232]	@ (8004488 <Oscilloscope_Process+0x8ec>)
 800439e:	781b      	ldrb	r3, [r3, #0]
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d12d      	bne.n	8004400 <Oscilloscope_Process+0x864>
					uint32_t list_timer_settings[17][2] = {
 80043a4:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 80043a8:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 80043ac:	4a37      	ldr	r2, [pc, #220]	@ (800448c <Oscilloscope_Process+0x8f0>)
 80043ae:	4618      	mov	r0, r3
 80043b0:	4611      	mov	r1, r2
 80043b2:	2388      	movs	r3, #136	@ 0x88
 80043b4:	461a      	mov	r2, r3
 80043b6:	f00c f8fc 	bl	80105b2 <memcpy>
						{  8228, 100 },
						{ 20570, 100 },
						{ 41142, 100 }
					};

					htim10.Init.Prescaler = list_timer_settings[mode_seconds][0];
 80043ba:	4b35      	ldr	r3, [pc, #212]	@ (8004490 <Oscilloscope_Process+0x8f4>)
 80043bc:	781b      	ldrb	r3, [r3, #0]
 80043be:	461a      	mov	r2, r3
 80043c0:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 80043c4:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 80043c8:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
 80043cc:	4a31      	ldr	r2, [pc, #196]	@ (8004494 <Oscilloscope_Process+0x8f8>)
 80043ce:	6053      	str	r3, [r2, #4]
					htim10.Init.Period    = list_timer_settings[mode_seconds][1];
 80043d0:	4b2f      	ldr	r3, [pc, #188]	@ (8004490 <Oscilloscope_Process+0x8f4>)
 80043d2:	781b      	ldrb	r3, [r3, #0]
 80043d4:	4619      	mov	r1, r3
 80043d6:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 80043da:	f5a3 72d6 	sub.w	r2, r3, #428	@ 0x1ac
 80043de:	00cb      	lsls	r3, r1, #3
 80043e0:	4413      	add	r3, r2
 80043e2:	685b      	ldr	r3, [r3, #4]
 80043e4:	4a2b      	ldr	r2, [pc, #172]	@ (8004494 <Oscilloscope_Process+0x8f8>)
 80043e6:	60d3      	str	r3, [r2, #12]

					if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 80043e8:	482a      	ldr	r0, [pc, #168]	@ (8004494 <Oscilloscope_Process+0x8f8>)
 80043ea:	f004 fe0d 	bl	8009008 <HAL_TIM_Base_Init>
 80043ee:	4603      	mov	r3, r0
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d001      	beq.n	80043f8 <Oscilloscope_Process+0x85c>
						Error_Handler();
 80043f4:	f7fe fc92 	bl	8002d1c <Error_Handler>

					HAL_TIM_Base_Start_IT(&htim10);
 80043f8:	4826      	ldr	r0, [pc, #152]	@ (8004494 <Oscilloscope_Process+0x8f8>)
 80043fa:	f004 fe55 	bl	80090a8 <HAL_TIM_Base_Start_IT>
 80043fe:	e004      	b.n	800440a <Oscilloscope_Process+0x86e>
				} else
					HAL_ADC_Start_DMA(&hadc1, (uint32_t*)&adc_data, 2);
 8004400:	2202      	movs	r2, #2
 8004402:	4925      	ldr	r1, [pc, #148]	@ (8004498 <Oscilloscope_Process+0x8fc>)
 8004404:	4825      	ldr	r0, [pc, #148]	@ (800449c <Oscilloscope_Process+0x900>)
 8004406:	f001 faeb 	bl	80059e0 <HAL_ADC_Start_DMA>

				local_event_adc = 0;
 800440a:	2300      	movs	r3, #0
 800440c:	f887 31ef 	strb.w	r3, [r7, #495]	@ 0x1ef
				event_seconds = 1;
 8004410:	4b23      	ldr	r3, [pc, #140]	@ (80044a0 <Oscilloscope_Process+0x904>)
 8004412:	2201      	movs	r2, #1
 8004414:	701a      	strb	r2, [r3, #0]
			}

			if (menu_selected_item == 5) {
 8004416:	4b23      	ldr	r3, [pc, #140]	@ (80044a4 <Oscilloscope_Process+0x908>)
 8004418:	f993 3000 	ldrsb.w	r3, [r3]
 800441c:	2b05      	cmp	r3, #5
 800441e:	f040 8101 	bne.w	8004624 <Oscilloscope_Process+0xa88>
				mode_voltage += delta;
 8004422:	f8d7 31e4 	ldr.w	r3, [r7, #484]	@ 0x1e4
 8004426:	b2da      	uxtb	r2, r3
 8004428:	4b1f      	ldr	r3, [pc, #124]	@ (80044a8 <Oscilloscope_Process+0x90c>)
 800442a:	781b      	ldrb	r3, [r3, #0]
 800442c:	4413      	add	r3, r2
 800442e:	b2da      	uxtb	r2, r3
 8004430:	4b1d      	ldr	r3, [pc, #116]	@ (80044a8 <Oscilloscope_Process+0x90c>)
 8004432:	701a      	strb	r2, [r3, #0]

				if (mode_voltage < 0)
					mode_voltage = 0;

				if (mode_voltage > 9)
 8004434:	4b1c      	ldr	r3, [pc, #112]	@ (80044a8 <Oscilloscope_Process+0x90c>)
 8004436:	781b      	ldrb	r3, [r3, #0]
 8004438:	2b09      	cmp	r3, #9
 800443a:	d902      	bls.n	8004442 <Oscilloscope_Process+0x8a6>
					mode_voltage = 9;
 800443c:	4b1a      	ldr	r3, [pc, #104]	@ (80044a8 <Oscilloscope_Process+0x90c>)
 800443e:	2209      	movs	r2, #9
 8004440:	701a      	strb	r2, [r3, #0]

				uint32_t list_voltage[10] = {
 8004442:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 8004446:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 800444a:	4a18      	ldr	r2, [pc, #96]	@ (80044ac <Oscilloscope_Process+0x910>)
 800444c:	461c      	mov	r4, r3
 800444e:	4615      	mov	r5, r2
 8004450:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004452:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004454:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004456:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004458:	e895 0003 	ldmia.w	r5, {r0, r1}
 800445c:	e884 0003 	stmia.w	r4, {r0, r1}
					2000000,
					5000000,
					10000000
				};

				ylim_uV = list_voltage[mode_voltage];
 8004460:	4b11      	ldr	r3, [pc, #68]	@ (80044a8 <Oscilloscope_Process+0x90c>)
 8004462:	781b      	ldrb	r3, [r3, #0]
 8004464:	461a      	mov	r2, r3
 8004466:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 800446a:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 800446e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004472:	4a0f      	ldr	r2, [pc, #60]	@ (80044b0 <Oscilloscope_Process+0x914>)
 8004474:	6013      	str	r3, [r2, #0]

				event_voltage = 1;
 8004476:	4b0f      	ldr	r3, [pc, #60]	@ (80044b4 <Oscilloscope_Process+0x918>)
 8004478:	2201      	movs	r2, #1
 800447a:	701a      	strb	r2, [r3, #0]
 800447c:	e0d2      	b.n	8004624 <Oscilloscope_Process+0xa88>
 800447e:	bf00      	nop
 8004480:	2000d0e0 	.word	0x2000d0e0
 8004484:	2000d0ec 	.word	0x2000d0ec
 8004488:	2000d0e8 	.word	0x2000d0e8
 800448c:	08013d5c 	.word	0x08013d5c
 8004490:	2000d112 	.word	0x2000d112
 8004494:	200160c8 	.word	0x200160c8
 8004498:	2000f5f0 	.word	0x2000f5f0
 800449c:	2000d318 	.word	0x2000d318
 80044a0:	2000d105 	.word	0x2000d105
 80044a4:	2000d10d 	.word	0x2000d10d
 80044a8:	2000d113 	.word	0x2000d113
 80044ac:	08013de4 	.word	0x08013de4
 80044b0:	2000d0f0 	.word	0x2000d0f0
 80044b4:	2000d106 	.word	0x2000d106
			}

		} else {

			if (menu_selected_item == 2) {
 80044b8:	4baa      	ldr	r3, [pc, #680]	@ (8004764 <Oscilloscope_Process+0xbc8>)
 80044ba:	f993 3000 	ldrsb.w	r3, [r3]
 80044be:	2b02      	cmp	r3, #2
 80044c0:	d155      	bne.n	800456e <Oscilloscope_Process+0x9d2>
				clearTrigger(&display, trigger0);
 80044c2:	4ba9      	ldr	r3, [pc, #676]	@ (8004768 <Oscilloscope_Process+0xbcc>)
 80044c4:	881b      	ldrh	r3, [r3, #0]
 80044c6:	4619      	mov	r1, r3
 80044c8:	48a8      	ldr	r0, [pc, #672]	@ (800476c <Oscilloscope_Process+0xbd0>)
 80044ca:	f7fe fdc8 	bl	800305e <clearTrigger>
				trigger0 += delta;
 80044ce:	f8d7 31e4 	ldr.w	r3, [r7, #484]	@ 0x1e4
 80044d2:	b29a      	uxth	r2, r3
 80044d4:	4ba4      	ldr	r3, [pc, #656]	@ (8004768 <Oscilloscope_Process+0xbcc>)
 80044d6:	881b      	ldrh	r3, [r3, #0]
 80044d8:	4413      	add	r3, r2
 80044da:	b29a      	uxth	r2, r3
 80044dc:	4ba2      	ldr	r3, [pc, #648]	@ (8004768 <Oscilloscope_Process+0xbcc>)
 80044de:	801a      	strh	r2, [r3, #0]

				if (trigger0 < 20)
 80044e0:	4ba1      	ldr	r3, [pc, #644]	@ (8004768 <Oscilloscope_Process+0xbcc>)
 80044e2:	881b      	ldrh	r3, [r3, #0]
 80044e4:	2b13      	cmp	r3, #19
 80044e6:	d802      	bhi.n	80044ee <Oscilloscope_Process+0x952>
					trigger0 = 20;
 80044e8:	4b9f      	ldr	r3, [pc, #636]	@ (8004768 <Oscilloscope_Process+0xbcc>)
 80044ea:	2214      	movs	r2, #20
 80044ec:	801a      	strh	r2, [r3, #0]

				if (trigger0 > 220)
 80044ee:	4b9e      	ldr	r3, [pc, #632]	@ (8004768 <Oscilloscope_Process+0xbcc>)
 80044f0:	881b      	ldrh	r3, [r3, #0]
 80044f2:	2bdc      	cmp	r3, #220	@ 0xdc
 80044f4:	d902      	bls.n	80044fc <Oscilloscope_Process+0x960>
					trigger0 = 220;
 80044f6:	4b9c      	ldr	r3, [pc, #624]	@ (8004768 <Oscilloscope_Process+0xbcc>)
 80044f8:	22dc      	movs	r2, #220	@ 0xdc
 80044fa:	801a      	strh	r2, [r3, #0]

				if (trigger0 > cursor0)
 80044fc:	4b9a      	ldr	r3, [pc, #616]	@ (8004768 <Oscilloscope_Process+0xbcc>)
 80044fe:	881a      	ldrh	r2, [r3, #0]
 8004500:	4b9b      	ldr	r3, [pc, #620]	@ (8004770 <Oscilloscope_Process+0xbd4>)
 8004502:	881b      	ldrh	r3, [r3, #0]
 8004504:	429a      	cmp	r2, r3
 8004506:	d903      	bls.n	8004510 <Oscilloscope_Process+0x974>
					trigger0 = cursor0;
 8004508:	4b99      	ldr	r3, [pc, #612]	@ (8004770 <Oscilloscope_Process+0xbd4>)
 800450a:	881a      	ldrh	r2, [r3, #0]
 800450c:	4b96      	ldr	r3, [pc, #600]	@ (8004768 <Oscilloscope_Process+0xbcc>)
 800450e:	801a      	strh	r2, [r3, #0]

				float uV = -((float)(ylim_uV) * ((8.0f * (trigger0 - cursor0)) / 200.0f));
 8004510:	4b98      	ldr	r3, [pc, #608]	@ (8004774 <Oscilloscope_Process+0xbd8>)
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	ee07 3a90 	vmov	s15, r3
 8004518:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800451c:	4b92      	ldr	r3, [pc, #584]	@ (8004768 <Oscilloscope_Process+0xbcc>)
 800451e:	881b      	ldrh	r3, [r3, #0]
 8004520:	461a      	mov	r2, r3
 8004522:	4b93      	ldr	r3, [pc, #588]	@ (8004770 <Oscilloscope_Process+0xbd4>)
 8004524:	881b      	ldrh	r3, [r3, #0]
 8004526:	1ad3      	subs	r3, r2, r3
 8004528:	ee07 3a90 	vmov	s15, r3
 800452c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004530:	eef2 6a00 	vmov.f32	s13, #32	@ 0x41000000  8.0
 8004534:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8004538:	ed9f 6a8f 	vldr	s12, [pc, #572]	@ 8004778 <Oscilloscope_Process+0xbdc>
 800453c:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8004540:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004544:	eef1 7a67 	vneg.f32	s15, s15
 8004548:	edc7 7a74 	vstr	s15, [r7, #464]	@ 0x1d0
				trigger0_value = uV * 4096.0f / 3300000.0f;
 800454c:	edd7 7a74 	vldr	s15, [r7, #464]	@ 0x1d0
 8004550:	ed9f 7a8a 	vldr	s14, [pc, #552]	@ 800477c <Oscilloscope_Process+0xbe0>
 8004554:	ee27 7a87 	vmul.f32	s14, s15, s14
 8004558:	eddf 6a89 	vldr	s13, [pc, #548]	@ 8004780 <Oscilloscope_Process+0xbe4>
 800455c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004560:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004564:	ee17 3a90 	vmov	r3, s15
 8004568:	b29a      	uxth	r2, r3
 800456a:	4b86      	ldr	r3, [pc, #536]	@ (8004784 <Oscilloscope_Process+0xbe8>)
 800456c:	801a      	strh	r2, [r3, #0]
			}

			if (menu_selected_item == 3) {
 800456e:	4b7d      	ldr	r3, [pc, #500]	@ (8004764 <Oscilloscope_Process+0xbc8>)
 8004570:	f993 3000 	ldrsb.w	r3, [r3]
 8004574:	2b03      	cmp	r3, #3
 8004576:	d155      	bne.n	8004624 <Oscilloscope_Process+0xa88>
				clearTrigger(&display, trigger1);
 8004578:	4b83      	ldr	r3, [pc, #524]	@ (8004788 <Oscilloscope_Process+0xbec>)
 800457a:	881b      	ldrh	r3, [r3, #0]
 800457c:	4619      	mov	r1, r3
 800457e:	487b      	ldr	r0, [pc, #492]	@ (800476c <Oscilloscope_Process+0xbd0>)
 8004580:	f7fe fd6d 	bl	800305e <clearTrigger>
				trigger1 += delta;
 8004584:	f8d7 31e4 	ldr.w	r3, [r7, #484]	@ 0x1e4
 8004588:	b29a      	uxth	r2, r3
 800458a:	4b7f      	ldr	r3, [pc, #508]	@ (8004788 <Oscilloscope_Process+0xbec>)
 800458c:	881b      	ldrh	r3, [r3, #0]
 800458e:	4413      	add	r3, r2
 8004590:	b29a      	uxth	r2, r3
 8004592:	4b7d      	ldr	r3, [pc, #500]	@ (8004788 <Oscilloscope_Process+0xbec>)
 8004594:	801a      	strh	r2, [r3, #0]

				if (trigger1 < 20)
 8004596:	4b7c      	ldr	r3, [pc, #496]	@ (8004788 <Oscilloscope_Process+0xbec>)
 8004598:	881b      	ldrh	r3, [r3, #0]
 800459a:	2b13      	cmp	r3, #19
 800459c:	d802      	bhi.n	80045a4 <Oscilloscope_Process+0xa08>
					trigger1 = 20;
 800459e:	4b7a      	ldr	r3, [pc, #488]	@ (8004788 <Oscilloscope_Process+0xbec>)
 80045a0:	2214      	movs	r2, #20
 80045a2:	801a      	strh	r2, [r3, #0]

				if (trigger1 > 220)
 80045a4:	4b78      	ldr	r3, [pc, #480]	@ (8004788 <Oscilloscope_Process+0xbec>)
 80045a6:	881b      	ldrh	r3, [r3, #0]
 80045a8:	2bdc      	cmp	r3, #220	@ 0xdc
 80045aa:	d902      	bls.n	80045b2 <Oscilloscope_Process+0xa16>
					trigger1 = 220;
 80045ac:	4b76      	ldr	r3, [pc, #472]	@ (8004788 <Oscilloscope_Process+0xbec>)
 80045ae:	22dc      	movs	r2, #220	@ 0xdc
 80045b0:	801a      	strh	r2, [r3, #0]

				if (trigger1 > cursor1)
 80045b2:	4b75      	ldr	r3, [pc, #468]	@ (8004788 <Oscilloscope_Process+0xbec>)
 80045b4:	881a      	ldrh	r2, [r3, #0]
 80045b6:	4b75      	ldr	r3, [pc, #468]	@ (800478c <Oscilloscope_Process+0xbf0>)
 80045b8:	881b      	ldrh	r3, [r3, #0]
 80045ba:	429a      	cmp	r2, r3
 80045bc:	d903      	bls.n	80045c6 <Oscilloscope_Process+0xa2a>
					trigger1 = cursor1;
 80045be:	4b73      	ldr	r3, [pc, #460]	@ (800478c <Oscilloscope_Process+0xbf0>)
 80045c0:	881a      	ldrh	r2, [r3, #0]
 80045c2:	4b71      	ldr	r3, [pc, #452]	@ (8004788 <Oscilloscope_Process+0xbec>)
 80045c4:	801a      	strh	r2, [r3, #0]

				float uV = -((float)(ylim_uV) * ((8.0f * (trigger1 - cursor1)) / 200.0f));
 80045c6:	4b6b      	ldr	r3, [pc, #428]	@ (8004774 <Oscilloscope_Process+0xbd8>)
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	ee07 3a90 	vmov	s15, r3
 80045ce:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80045d2:	4b6d      	ldr	r3, [pc, #436]	@ (8004788 <Oscilloscope_Process+0xbec>)
 80045d4:	881b      	ldrh	r3, [r3, #0]
 80045d6:	461a      	mov	r2, r3
 80045d8:	4b6c      	ldr	r3, [pc, #432]	@ (800478c <Oscilloscope_Process+0xbf0>)
 80045da:	881b      	ldrh	r3, [r3, #0]
 80045dc:	1ad3      	subs	r3, r2, r3
 80045de:	ee07 3a90 	vmov	s15, r3
 80045e2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80045e6:	eef2 6a00 	vmov.f32	s13, #32	@ 0x41000000  8.0
 80045ea:	ee67 6aa6 	vmul.f32	s13, s15, s13
 80045ee:	ed9f 6a62 	vldr	s12, [pc, #392]	@ 8004778 <Oscilloscope_Process+0xbdc>
 80045f2:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80045f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80045fa:	eef1 7a67 	vneg.f32	s15, s15
 80045fe:	edc7 7a73 	vstr	s15, [r7, #460]	@ 0x1cc
				trigger1_value = uV * 4096.0f / 3300000.0f;
 8004602:	edd7 7a73 	vldr	s15, [r7, #460]	@ 0x1cc
 8004606:	ed9f 7a5d 	vldr	s14, [pc, #372]	@ 800477c <Oscilloscope_Process+0xbe0>
 800460a:	ee27 7a87 	vmul.f32	s14, s15, s14
 800460e:	eddf 6a5c 	vldr	s13, [pc, #368]	@ 8004780 <Oscilloscope_Process+0xbe4>
 8004612:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004616:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800461a:	ee17 3a90 	vmov	r3, s15
 800461e:	b29a      	uxth	r2, r3
 8004620:	4b5b      	ldr	r3, [pc, #364]	@ (8004790 <Oscilloscope_Process+0xbf4>)
 8004622:	801a      	strh	r2, [r3, #0]
			}

		}

		event_trigger = 1;
 8004624:	4b5b      	ldr	r3, [pc, #364]	@ (8004794 <Oscilloscope_Process+0xbf8>)
 8004626:	2201      	movs	r2, #1
 8004628:	701a      	strb	r2, [r3, #0]
		encoder1_prev = encoder1_curr;
 800462a:	f8d7 31d4 	ldr.w	r3, [r7, #468]	@ 0x1d4
 800462e:	b29a      	uxth	r2, r3
 8004630:	4b59      	ldr	r3, [pc, #356]	@ (8004798 <Oscilloscope_Process+0xbfc>)
 8004632:	801a      	strh	r2, [r3, #0]
	}

	// Handle UI redraw trigger events
	if (event_trigger) {
 8004634:	4b57      	ldr	r3, [pc, #348]	@ (8004794 <Oscilloscope_Process+0xbf8>)
 8004636:	781b      	ldrb	r3, [r3, #0]
 8004638:	2b00      	cmp	r3, #0
 800463a:	d026      	beq.n	800468a <Oscilloscope_Process+0xaee>
		clearTrigger(&display, trigger0);
 800463c:	4b4a      	ldr	r3, [pc, #296]	@ (8004768 <Oscilloscope_Process+0xbcc>)
 800463e:	881b      	ldrh	r3, [r3, #0]
 8004640:	4619      	mov	r1, r3
 8004642:	484a      	ldr	r0, [pc, #296]	@ (800476c <Oscilloscope_Process+0xbd0>)
 8004644:	f7fe fd0b 	bl	800305e <clearTrigger>
		clearTrigger(&display, trigger1);
 8004648:	4b4f      	ldr	r3, [pc, #316]	@ (8004788 <Oscilloscope_Process+0xbec>)
 800464a:	881b      	ldrh	r3, [r3, #0]
 800464c:	4619      	mov	r1, r3
 800464e:	4847      	ldr	r0, [pc, #284]	@ (800476c <Oscilloscope_Process+0xbd0>)
 8004650:	f7fe fd05 	bl	800305e <clearTrigger>

		if (menu_channel0_enabled)
 8004654:	4b51      	ldr	r3, [pc, #324]	@ (800479c <Oscilloscope_Process+0xc00>)
 8004656:	781b      	ldrb	r3, [r3, #0]
 8004658:	2b00      	cmp	r3, #0
 800465a:	d007      	beq.n	800466c <Oscilloscope_Process+0xad0>
			drawTrigger(&display, trigger0, "T1", ILI9341_YELLOW);
 800465c:	4b42      	ldr	r3, [pc, #264]	@ (8004768 <Oscilloscope_Process+0xbcc>)
 800465e:	8819      	ldrh	r1, [r3, #0]
 8004660:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8004664:	4a4e      	ldr	r2, [pc, #312]	@ (80047a0 <Oscilloscope_Process+0xc04>)
 8004666:	4841      	ldr	r0, [pc, #260]	@ (800476c <Oscilloscope_Process+0xbd0>)
 8004668:	f7fe fd62 	bl	8003130 <drawTrigger>

		if (menu_channel1_enabled)
 800466c:	4b4d      	ldr	r3, [pc, #308]	@ (80047a4 <Oscilloscope_Process+0xc08>)
 800466e:	781b      	ldrb	r3, [r3, #0]
 8004670:	2b00      	cmp	r3, #0
 8004672:	d007      	beq.n	8004684 <Oscilloscope_Process+0xae8>
			drawTrigger(&display, trigger1, "T2", ILI9341_CYAN);
 8004674:	4b44      	ldr	r3, [pc, #272]	@ (8004788 <Oscilloscope_Process+0xbec>)
 8004676:	8819      	ldrh	r1, [r3, #0]
 8004678:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 800467c:	4a4a      	ldr	r2, [pc, #296]	@ (80047a8 <Oscilloscope_Process+0xc0c>)
 800467e:	483b      	ldr	r0, [pc, #236]	@ (800476c <Oscilloscope_Process+0xbd0>)
 8004680:	f7fe fd56 	bl	8003130 <drawTrigger>

		event_trigger = 0;
 8004684:	4b43      	ldr	r3, [pc, #268]	@ (8004794 <Oscilloscope_Process+0xbf8>)
 8004686:	2200      	movs	r2, #0
 8004688:	701a      	strb	r2, [r3, #0]
	}

	// Handle UI redraw selector events
	if (event_selector) {
 800468a:	4b48      	ldr	r3, [pc, #288]	@ (80047ac <Oscilloscope_Process+0xc10>)
 800468c:	781b      	ldrb	r3, [r3, #0]
 800468e:	2b00      	cmp	r3, #0
 8004690:	d00f      	beq.n	80046b2 <Oscilloscope_Process+0xb16>
		ILI9341_Rectangle(&display, menu_selector_x, menu_selector_y, 38, 13, ILI9341_WHITE);
 8004692:	4b47      	ldr	r3, [pc, #284]	@ (80047b0 <Oscilloscope_Process+0xc14>)
 8004694:	8819      	ldrh	r1, [r3, #0]
 8004696:	4b47      	ldr	r3, [pc, #284]	@ (80047b4 <Oscilloscope_Process+0xc18>)
 8004698:	881a      	ldrh	r2, [r3, #0]
 800469a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800469e:	9301      	str	r3, [sp, #4]
 80046a0:	230d      	movs	r3, #13
 80046a2:	9300      	str	r3, [sp, #0]
 80046a4:	2326      	movs	r3, #38	@ 0x26
 80046a6:	4831      	ldr	r0, [pc, #196]	@ (800476c <Oscilloscope_Process+0xbd0>)
 80046a8:	f7fd fc72 	bl	8001f90 <ILI9341_Rectangle>
		event_selector = 0;
 80046ac:	4b3f      	ldr	r3, [pc, #252]	@ (80047ac <Oscilloscope_Process+0xc10>)
 80046ae:	2200      	movs	r2, #0
 80046b0:	701a      	strb	r2, [r3, #0]
	}

	// Handle UI redraw mode events
	if (event_mode) {
 80046b2:	4b41      	ldr	r3, [pc, #260]	@ (80047b8 <Oscilloscope_Process+0xc1c>)
 80046b4:	781b      	ldrb	r3, [r3, #0]
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d040      	beq.n	800473c <Oscilloscope_Process+0xba0>
		if (mode == 0)
 80046ba:	4b40      	ldr	r3, [pc, #256]	@ (80047bc <Oscilloscope_Process+0xc20>)
 80046bc:	781b      	ldrb	r3, [r3, #0]
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d110      	bne.n	80046e4 <Oscilloscope_Process+0xb48>
			ILI9341_WriteString(&display, 22, 5, " RUN ", Font_7x10, ILI9341_BLACK, ILI9341_GREEN);
 80046c2:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 80046c6:	9303      	str	r3, [sp, #12]
 80046c8:	2300      	movs	r3, #0
 80046ca:	9302      	str	r3, [sp, #8]
 80046cc:	4a3c      	ldr	r2, [pc, #240]	@ (80047c0 <Oscilloscope_Process+0xc24>)
 80046ce:	466b      	mov	r3, sp
 80046d0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80046d4:	e883 0003 	stmia.w	r3, {r0, r1}
 80046d8:	4b3a      	ldr	r3, [pc, #232]	@ (80047c4 <Oscilloscope_Process+0xc28>)
 80046da:	2205      	movs	r2, #5
 80046dc:	2116      	movs	r1, #22
 80046de:	4823      	ldr	r0, [pc, #140]	@ (800476c <Oscilloscope_Process+0xbd0>)
 80046e0:	f7fd fd11 	bl	8002106 <ILI9341_WriteString>

		if (mode == 1)
 80046e4:	4b35      	ldr	r3, [pc, #212]	@ (80047bc <Oscilloscope_Process+0xc20>)
 80046e6:	781b      	ldrb	r3, [r3, #0]
 80046e8:	2b01      	cmp	r3, #1
 80046ea:	d10f      	bne.n	800470c <Oscilloscope_Process+0xb70>
			ILI9341_WriteString(&display, 22, 5, "MENU:", Font_7x10, ILI9341_BLACK, ILI9341_BLUE);
 80046ec:	231f      	movs	r3, #31
 80046ee:	9303      	str	r3, [sp, #12]
 80046f0:	2300      	movs	r3, #0
 80046f2:	9302      	str	r3, [sp, #8]
 80046f4:	4a32      	ldr	r2, [pc, #200]	@ (80047c0 <Oscilloscope_Process+0xc24>)
 80046f6:	466b      	mov	r3, sp
 80046f8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80046fc:	e883 0003 	stmia.w	r3, {r0, r1}
 8004700:	4b31      	ldr	r3, [pc, #196]	@ (80047c8 <Oscilloscope_Process+0xc2c>)
 8004702:	2205      	movs	r2, #5
 8004704:	2116      	movs	r1, #22
 8004706:	4819      	ldr	r0, [pc, #100]	@ (800476c <Oscilloscope_Process+0xbd0>)
 8004708:	f7fd fcfd 	bl	8002106 <ILI9341_WriteString>

		if (mode == 2)
 800470c:	4b2b      	ldr	r3, [pc, #172]	@ (80047bc <Oscilloscope_Process+0xc20>)
 800470e:	781b      	ldrb	r3, [r3, #0]
 8004710:	2b02      	cmp	r3, #2
 8004712:	d110      	bne.n	8004736 <Oscilloscope_Process+0xb9a>
			ILI9341_WriteString(&display, 22, 5, "HOLD:", Font_7x10, ILI9341_BLACK, ILI9341_YELLOW);
 8004714:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8004718:	9303      	str	r3, [sp, #12]
 800471a:	2300      	movs	r3, #0
 800471c:	9302      	str	r3, [sp, #8]
 800471e:	4a28      	ldr	r2, [pc, #160]	@ (80047c0 <Oscilloscope_Process+0xc24>)
 8004720:	466b      	mov	r3, sp
 8004722:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004726:	e883 0003 	stmia.w	r3, {r0, r1}
 800472a:	4b28      	ldr	r3, [pc, #160]	@ (80047cc <Oscilloscope_Process+0xc30>)
 800472c:	2205      	movs	r2, #5
 800472e:	2116      	movs	r1, #22
 8004730:	480e      	ldr	r0, [pc, #56]	@ (800476c <Oscilloscope_Process+0xbd0>)
 8004732:	f7fd fce8 	bl	8002106 <ILI9341_WriteString>

		event_mode = 0;
 8004736:	4b20      	ldr	r3, [pc, #128]	@ (80047b8 <Oscilloscope_Process+0xc1c>)
 8004738:	2200      	movs	r2, #0
 800473a:	701a      	strb	r2, [r3, #0]
	}

	// Handle UI redraw trigger mode events
	if (event_trigger_mode) {
 800473c:	4b24      	ldr	r3, [pc, #144]	@ (80047d0 <Oscilloscope_Process+0xc34>)
 800473e:	781b      	ldrb	r3, [r3, #0]
 8004740:	2b00      	cmp	r3, #0
 8004742:	f000 80e0 	beq.w	8004906 <Oscilloscope_Process+0xd6a>
		ILI9341_FillRectangle(&display, 61,  5, 33, 10, ILI9341_BLACK);
 8004746:	2300      	movs	r3, #0
 8004748:	9301      	str	r3, [sp, #4]
 800474a:	230a      	movs	r3, #10
 800474c:	9300      	str	r3, [sp, #0]
 800474e:	2321      	movs	r3, #33	@ 0x21
 8004750:	2205      	movs	r2, #5
 8004752:	213d      	movs	r1, #61	@ 0x3d
 8004754:	4805      	ldr	r0, [pc, #20]	@ (800476c <Oscilloscope_Process+0xbd0>)
 8004756:	f7fd fbbe 	bl	8001ed6 <ILI9341_FillRectangle>
		ILI9341_FillRectangle(&display, 61, 14, 11, 1, ILI9341_WHITE);
 800475a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800475e:	9301      	str	r3, [sp, #4]
 8004760:	e038      	b.n	80047d4 <Oscilloscope_Process+0xc38>
 8004762:	bf00      	nop
 8004764:	2000d10d 	.word	0x2000d10d
 8004768:	2000d0f8 	.word	0x2000d0f8
 800476c:	2000f598 	.word	0x2000f598
 8004770:	2000d0f4 	.word	0x2000d0f4
 8004774:	2000d0f0 	.word	0x2000d0f0
 8004778:	43480000 	.word	0x43480000
 800477c:	45800000 	.word	0x45800000
 8004780:	4a496a80 	.word	0x4a496a80
 8004784:	2000d0fc 	.word	0x2000d0fc
 8004788:	2000d0fa 	.word	0x2000d0fa
 800478c:	2000d0f6 	.word	0x2000d0f6
 8004790:	2000d0fe 	.word	0x2000d0fe
 8004794:	2000d103 	.word	0x2000d103
 8004798:	2001561e 	.word	0x2001561e
 800479c:	2000d10b 	.word	0x2000d10b
 80047a0:	08013cc0 	.word	0x08013cc0
 80047a4:	2000d10c 	.word	0x2000d10c
 80047a8:	08013cc4 	.word	0x08013cc4
 80047ac:	2000d107 	.word	0x2000d107
 80047b0:	2000d10e 	.word	0x2000d10e
 80047b4:	2000d110 	.word	0x2000d110
 80047b8:	2000d101 	.word	0x2000d101
 80047bc:	2001561a 	.word	0x2001561a
 80047c0:	20000000 	.word	0x20000000
 80047c4:	08013cc8 	.word	0x08013cc8
 80047c8:	08013cd0 	.word	0x08013cd0
 80047cc:	08013cd8 	.word	0x08013cd8
 80047d0:	2000d108 	.word	0x2000d108
 80047d4:	2301      	movs	r3, #1
 80047d6:	9300      	str	r3, [sp, #0]
 80047d8:	230b      	movs	r3, #11
 80047da:	220e      	movs	r2, #14
 80047dc:	213d      	movs	r1, #61	@ 0x3d
 80047de:	48aa      	ldr	r0, [pc, #680]	@ (8004a88 <Oscilloscope_Process+0xeec>)
 80047e0:	f7fd fb79 	bl	8001ed6 <ILI9341_FillRectangle>
		ILI9341_FillRectangle(&display, 72,  5, 11, 1, ILI9341_WHITE);
 80047e4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80047e8:	9301      	str	r3, [sp, #4]
 80047ea:	2301      	movs	r3, #1
 80047ec:	9300      	str	r3, [sp, #0]
 80047ee:	230b      	movs	r3, #11
 80047f0:	2205      	movs	r2, #5
 80047f2:	2148      	movs	r1, #72	@ 0x48
 80047f4:	48a4      	ldr	r0, [pc, #656]	@ (8004a88 <Oscilloscope_Process+0xeec>)
 80047f6:	f7fd fb6e 	bl	8001ed6 <ILI9341_FillRectangle>
		ILI9341_FillRectangle(&display, 83, 14, 11, 1, ILI9341_WHITE);
 80047fa:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80047fe:	9301      	str	r3, [sp, #4]
 8004800:	2301      	movs	r3, #1
 8004802:	9300      	str	r3, [sp, #0]
 8004804:	230b      	movs	r3, #11
 8004806:	220e      	movs	r2, #14
 8004808:	2153      	movs	r1, #83	@ 0x53
 800480a:	489f      	ldr	r0, [pc, #636]	@ (8004a88 <Oscilloscope_Process+0xeec>)
 800480c:	f7fd fb63 	bl	8001ed6 <ILI9341_FillRectangle>
		ILI9341_FillRectangle(&display, 72,  5, 1, 10, ILI9341_WHITE);
 8004810:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8004814:	9301      	str	r3, [sp, #4]
 8004816:	230a      	movs	r3, #10
 8004818:	9300      	str	r3, [sp, #0]
 800481a:	2301      	movs	r3, #1
 800481c:	2205      	movs	r2, #5
 800481e:	2148      	movs	r1, #72	@ 0x48
 8004820:	4899      	ldr	r0, [pc, #612]	@ (8004a88 <Oscilloscope_Process+0xeec>)
 8004822:	f7fd fb58 	bl	8001ed6 <ILI9341_FillRectangle>
		ILI9341_FillRectangle(&display, 82,  5, 1, 10, ILI9341_WHITE);
 8004826:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800482a:	9301      	str	r3, [sp, #4]
 800482c:	230a      	movs	r3, #10
 800482e:	9300      	str	r3, [sp, #0]
 8004830:	2301      	movs	r3, #1
 8004832:	2205      	movs	r2, #5
 8004834:	2152      	movs	r1, #82	@ 0x52
 8004836:	4894      	ldr	r0, [pc, #592]	@ (8004a88 <Oscilloscope_Process+0xeec>)
 8004838:	f7fd fb4d 	bl	8001ed6 <ILI9341_FillRectangle>

		if (trigger_mode == 0) {
 800483c:	4b93      	ldr	r3, [pc, #588]	@ (8004a8c <Oscilloscope_Process+0xef0>)
 800483e:	781b      	ldrb	r3, [r3, #0]
 8004840:	2b00      	cmp	r3, #0
 8004842:	d12f      	bne.n	80048a4 <Oscilloscope_Process+0xd08>
			for (uint8_t i = 0; i < 4; i++) {
 8004844:	2300      	movs	r3, #0
 8004846:	f887 31e3 	strb.w	r3, [r7, #483]	@ 0x1e3
 800484a:	e026      	b.n	800489a <Oscilloscope_Process+0xcfe>
				for (uint8_t j = i; j < (7 - i); j++)
 800484c:	f897 31e3 	ldrb.w	r3, [r7, #483]	@ 0x1e3
 8004850:	f887 31e2 	strb.w	r3, [r7, #482]	@ 0x1e2
 8004854:	e014      	b.n	8004880 <Oscilloscope_Process+0xce4>
					ILI9341_DrawPixel(&display, 69 + j, 11 - i, ILI9341_GREEN);
 8004856:	f897 31e2 	ldrb.w	r3, [r7, #482]	@ 0x1e2
 800485a:	b29b      	uxth	r3, r3
 800485c:	3345      	adds	r3, #69	@ 0x45
 800485e:	b299      	uxth	r1, r3
 8004860:	f897 31e3 	ldrb.w	r3, [r7, #483]	@ 0x1e3
 8004864:	b29b      	uxth	r3, r3
 8004866:	f1c3 030b 	rsb	r3, r3, #11
 800486a:	b29a      	uxth	r2, r3
 800486c:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8004870:	4885      	ldr	r0, [pc, #532]	@ (8004a88 <Oscilloscope_Process+0xeec>)
 8004872:	f7fd fa25 	bl	8001cc0 <ILI9341_DrawPixel>
				for (uint8_t j = i; j < (7 - i); j++)
 8004876:	f897 31e2 	ldrb.w	r3, [r7, #482]	@ 0x1e2
 800487a:	3301      	adds	r3, #1
 800487c:	f887 31e2 	strb.w	r3, [r7, #482]	@ 0x1e2
 8004880:	f897 21e2 	ldrb.w	r2, [r7, #482]	@ 0x1e2
 8004884:	f897 31e3 	ldrb.w	r3, [r7, #483]	@ 0x1e3
 8004888:	f1c3 0307 	rsb	r3, r3, #7
 800488c:	429a      	cmp	r2, r3
 800488e:	dbe2      	blt.n	8004856 <Oscilloscope_Process+0xcba>
			for (uint8_t i = 0; i < 4; i++) {
 8004890:	f897 31e3 	ldrb.w	r3, [r7, #483]	@ 0x1e3
 8004894:	3301      	adds	r3, #1
 8004896:	f887 31e3 	strb.w	r3, [r7, #483]	@ 0x1e3
 800489a:	f897 31e3 	ldrb.w	r3, [r7, #483]	@ 0x1e3
 800489e:	2b03      	cmp	r3, #3
 80048a0:	d9d4      	bls.n	800484c <Oscilloscope_Process+0xcb0>
 80048a2:	e02d      	b.n	8004900 <Oscilloscope_Process+0xd64>
			}
		} else {
			for (uint8_t i = 0; i < 4; i++) {
 80048a4:	2300      	movs	r3, #0
 80048a6:	f887 31e1 	strb.w	r3, [r7, #481]	@ 0x1e1
 80048aa:	e025      	b.n	80048f8 <Oscilloscope_Process+0xd5c>
			  for (uint8_t j = i; j < (7 - i); j++)
 80048ac:	f897 31e1 	ldrb.w	r3, [r7, #481]	@ 0x1e1
 80048b0:	f887 31e0 	strb.w	r3, [r7, #480]	@ 0x1e0
 80048b4:	e013      	b.n	80048de <Oscilloscope_Process+0xd42>
				  ILI9341_DrawPixel(&display, 79 + j, 8 + i, ILI9341_RED);
 80048b6:	f897 31e0 	ldrb.w	r3, [r7, #480]	@ 0x1e0
 80048ba:	b29b      	uxth	r3, r3
 80048bc:	334f      	adds	r3, #79	@ 0x4f
 80048be:	b299      	uxth	r1, r3
 80048c0:	f897 31e1 	ldrb.w	r3, [r7, #481]	@ 0x1e1
 80048c4:	b29b      	uxth	r3, r3
 80048c6:	3308      	adds	r3, #8
 80048c8:	b29a      	uxth	r2, r3
 80048ca:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 80048ce:	486e      	ldr	r0, [pc, #440]	@ (8004a88 <Oscilloscope_Process+0xeec>)
 80048d0:	f7fd f9f6 	bl	8001cc0 <ILI9341_DrawPixel>
			  for (uint8_t j = i; j < (7 - i); j++)
 80048d4:	f897 31e0 	ldrb.w	r3, [r7, #480]	@ 0x1e0
 80048d8:	3301      	adds	r3, #1
 80048da:	f887 31e0 	strb.w	r3, [r7, #480]	@ 0x1e0
 80048de:	f897 21e0 	ldrb.w	r2, [r7, #480]	@ 0x1e0
 80048e2:	f897 31e1 	ldrb.w	r3, [r7, #481]	@ 0x1e1
 80048e6:	f1c3 0307 	rsb	r3, r3, #7
 80048ea:	429a      	cmp	r2, r3
 80048ec:	dbe3      	blt.n	80048b6 <Oscilloscope_Process+0xd1a>
			for (uint8_t i = 0; i < 4; i++) {
 80048ee:	f897 31e1 	ldrb.w	r3, [r7, #481]	@ 0x1e1
 80048f2:	3301      	adds	r3, #1
 80048f4:	f887 31e1 	strb.w	r3, [r7, #481]	@ 0x1e1
 80048f8:	f897 31e1 	ldrb.w	r3, [r7, #481]	@ 0x1e1
 80048fc:	2b03      	cmp	r3, #3
 80048fe:	d9d5      	bls.n	80048ac <Oscilloscope_Process+0xd10>
			}
		}

		event_trigger_mode = 0;
 8004900:	4b63      	ldr	r3, [pc, #396]	@ (8004a90 <Oscilloscope_Process+0xef4>)
 8004902:	2200      	movs	r2, #0
 8004904:	701a      	strb	r2, [r3, #0]
	}

	// Handle UI redraw seconds events
	if (event_seconds) {
 8004906:	4b63      	ldr	r3, [pc, #396]	@ (8004a94 <Oscilloscope_Process+0xef8>)
 8004908:	781b      	ldrb	r3, [r3, #0]
 800490a:	2b00      	cmp	r3, #0
 800490c:	d03f      	beq.n	800498e <Oscilloscope_Process+0xdf2>
		if (xlim_us >= 1000000)
 800490e:	4b62      	ldr	r3, [pc, #392]	@ (8004a98 <Oscilloscope_Process+0xefc>)
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	4a62      	ldr	r2, [pc, #392]	@ (8004a9c <Oscilloscope_Process+0xf00>)
 8004914:	4293      	cmp	r3, r2
 8004916:	d90c      	bls.n	8004932 <Oscilloscope_Process+0xd96>
			snprintf(string, 255, "%3li s",  xlim_us / 1000000);
 8004918:	4b5f      	ldr	r3, [pc, #380]	@ (8004a98 <Oscilloscope_Process+0xefc>)
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	4a60      	ldr	r2, [pc, #384]	@ (8004aa0 <Oscilloscope_Process+0xf04>)
 800491e:	fba2 2303 	umull	r2, r3, r2, r3
 8004922:	0c9b      	lsrs	r3, r3, #18
 8004924:	f107 00cc 	add.w	r0, r7, #204	@ 0xcc
 8004928:	4a5e      	ldr	r2, [pc, #376]	@ (8004aa4 <Oscilloscope_Process+0xf08>)
 800492a:	21ff      	movs	r1, #255	@ 0xff
 800492c:	f00b fc92 	bl	8010254 <sniprintf>
 8004930:	e019      	b.n	8004966 <Oscilloscope_Process+0xdca>
		else if (xlim_us >= 1000)
 8004932:	4b59      	ldr	r3, [pc, #356]	@ (8004a98 <Oscilloscope_Process+0xefc>)
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800493a:	d30c      	bcc.n	8004956 <Oscilloscope_Process+0xdba>
			snprintf(string, 255, "%3lims", xlim_us / 1000);
 800493c:	4b56      	ldr	r3, [pc, #344]	@ (8004a98 <Oscilloscope_Process+0xefc>)
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	4a59      	ldr	r2, [pc, #356]	@ (8004aa8 <Oscilloscope_Process+0xf0c>)
 8004942:	fba2 2303 	umull	r2, r3, r2, r3
 8004946:	099b      	lsrs	r3, r3, #6
 8004948:	f107 00cc 	add.w	r0, r7, #204	@ 0xcc
 800494c:	4a57      	ldr	r2, [pc, #348]	@ (8004aac <Oscilloscope_Process+0xf10>)
 800494e:	21ff      	movs	r1, #255	@ 0xff
 8004950:	f00b fc80 	bl	8010254 <sniprintf>
 8004954:	e007      	b.n	8004966 <Oscilloscope_Process+0xdca>
		else
			snprintf(string, 255, "%3lius", xlim_us);
 8004956:	4b50      	ldr	r3, [pc, #320]	@ (8004a98 <Oscilloscope_Process+0xefc>)
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	f107 00cc 	add.w	r0, r7, #204	@ 0xcc
 800495e:	4a54      	ldr	r2, [pc, #336]	@ (8004ab0 <Oscilloscope_Process+0xf14>)
 8004960:	21ff      	movs	r1, #255	@ 0xff
 8004962:	f00b fc77 	bl	8010254 <sniprintf>

		ILI9341_WriteString(&display, 22, 225, string, Font_7x10, ILI9341_BLACK, ILI9341_WHITE);
 8004966:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 800496a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800496e:	9203      	str	r2, [sp, #12]
 8004970:	2200      	movs	r2, #0
 8004972:	9202      	str	r2, [sp, #8]
 8004974:	494f      	ldr	r1, [pc, #316]	@ (8004ab4 <Oscilloscope_Process+0xf18>)
 8004976:	466a      	mov	r2, sp
 8004978:	c903      	ldmia	r1, {r0, r1}
 800497a:	e882 0003 	stmia.w	r2, {r0, r1}
 800497e:	22e1      	movs	r2, #225	@ 0xe1
 8004980:	2116      	movs	r1, #22
 8004982:	4841      	ldr	r0, [pc, #260]	@ (8004a88 <Oscilloscope_Process+0xeec>)
 8004984:	f7fd fbbf 	bl	8002106 <ILI9341_WriteString>

		event_seconds = 0;
 8004988:	4b42      	ldr	r3, [pc, #264]	@ (8004a94 <Oscilloscope_Process+0xef8>)
 800498a:	2200      	movs	r2, #0
 800498c:	701a      	strb	r2, [r3, #0]
	}

	// Handle UI redraw voltage events
	if (event_voltage) {
 800498e:	4b4a      	ldr	r3, [pc, #296]	@ (8004ab8 <Oscilloscope_Process+0xf1c>)
 8004990:	781b      	ldrb	r3, [r3, #0]
 8004992:	2b00      	cmp	r3, #0
 8004994:	d03f      	beq.n	8004a16 <Oscilloscope_Process+0xe7a>
		if (ylim_uV >= 1000000)
 8004996:	4b49      	ldr	r3, [pc, #292]	@ (8004abc <Oscilloscope_Process+0xf20>)
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	4a40      	ldr	r2, [pc, #256]	@ (8004a9c <Oscilloscope_Process+0xf00>)
 800499c:	4293      	cmp	r3, r2
 800499e:	d90c      	bls.n	80049ba <Oscilloscope_Process+0xe1e>
			snprintf(string, 255, "%3li V",  ylim_uV / 1000000);
 80049a0:	4b46      	ldr	r3, [pc, #280]	@ (8004abc <Oscilloscope_Process+0xf20>)
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	4a3e      	ldr	r2, [pc, #248]	@ (8004aa0 <Oscilloscope_Process+0xf04>)
 80049a6:	fba2 2303 	umull	r2, r3, r2, r3
 80049aa:	0c9b      	lsrs	r3, r3, #18
 80049ac:	f107 00cc 	add.w	r0, r7, #204	@ 0xcc
 80049b0:	4a43      	ldr	r2, [pc, #268]	@ (8004ac0 <Oscilloscope_Process+0xf24>)
 80049b2:	21ff      	movs	r1, #255	@ 0xff
 80049b4:	f00b fc4e 	bl	8010254 <sniprintf>
 80049b8:	e019      	b.n	80049ee <Oscilloscope_Process+0xe52>
		else if (ylim_uV >= 1000)
 80049ba:	4b40      	ldr	r3, [pc, #256]	@ (8004abc <Oscilloscope_Process+0xf20>)
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80049c2:	d30c      	bcc.n	80049de <Oscilloscope_Process+0xe42>
			snprintf(string, 255, "%3limV", ylim_uV / 1000);
 80049c4:	4b3d      	ldr	r3, [pc, #244]	@ (8004abc <Oscilloscope_Process+0xf20>)
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	4a37      	ldr	r2, [pc, #220]	@ (8004aa8 <Oscilloscope_Process+0xf0c>)
 80049ca:	fba2 2303 	umull	r2, r3, r2, r3
 80049ce:	099b      	lsrs	r3, r3, #6
 80049d0:	f107 00cc 	add.w	r0, r7, #204	@ 0xcc
 80049d4:	4a3b      	ldr	r2, [pc, #236]	@ (8004ac4 <Oscilloscope_Process+0xf28>)
 80049d6:	21ff      	movs	r1, #255	@ 0xff
 80049d8:	f00b fc3c 	bl	8010254 <sniprintf>
 80049dc:	e007      	b.n	80049ee <Oscilloscope_Process+0xe52>
		else
			snprintf(string, 255, "%3liuV", ylim_uV);
 80049de:	4b37      	ldr	r3, [pc, #220]	@ (8004abc <Oscilloscope_Process+0xf20>)
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	f107 00cc 	add.w	r0, r7, #204	@ 0xcc
 80049e6:	4a38      	ldr	r2, [pc, #224]	@ (8004ac8 <Oscilloscope_Process+0xf2c>)
 80049e8:	21ff      	movs	r1, #255	@ 0xff
 80049ea:	f00b fc33 	bl	8010254 <sniprintf>

		ILI9341_WriteString(&display, 60, 225, string, Font_7x10, ILI9341_BLACK, ILI9341_WHITE);
 80049ee:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 80049f2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80049f6:	9203      	str	r2, [sp, #12]
 80049f8:	2200      	movs	r2, #0
 80049fa:	9202      	str	r2, [sp, #8]
 80049fc:	492d      	ldr	r1, [pc, #180]	@ (8004ab4 <Oscilloscope_Process+0xf18>)
 80049fe:	466a      	mov	r2, sp
 8004a00:	c903      	ldmia	r1, {r0, r1}
 8004a02:	e882 0003 	stmia.w	r2, {r0, r1}
 8004a06:	22e1      	movs	r2, #225	@ 0xe1
 8004a08:	213c      	movs	r1, #60	@ 0x3c
 8004a0a:	481f      	ldr	r0, [pc, #124]	@ (8004a88 <Oscilloscope_Process+0xeec>)
 8004a0c:	f7fd fb7b 	bl	8002106 <ILI9341_WriteString>

		event_voltage = 0;
 8004a10:	4b29      	ldr	r3, [pc, #164]	@ (8004ab8 <Oscilloscope_Process+0xf1c>)
 8004a12:	2200      	movs	r2, #0
 8004a14:	701a      	strb	r2, [r3, #0]
	}

	snprintf(string, 255, "T:%i%i", event_trigger0_detected, event_trigger1_detected);
 8004a16:	4b2d      	ldr	r3, [pc, #180]	@ (8004acc <Oscilloscope_Process+0xf30>)
 8004a18:	781b      	ldrb	r3, [r3, #0]
 8004a1a:	461a      	mov	r2, r3
 8004a1c:	4b2c      	ldr	r3, [pc, #176]	@ (8004ad0 <Oscilloscope_Process+0xf34>)
 8004a1e:	781b      	ldrb	r3, [r3, #0]
 8004a20:	f107 00cc 	add.w	r0, r7, #204	@ 0xcc
 8004a24:	9300      	str	r3, [sp, #0]
 8004a26:	4613      	mov	r3, r2
 8004a28:	4a2a      	ldr	r2, [pc, #168]	@ (8004ad4 <Oscilloscope_Process+0xf38>)
 8004a2a:	21ff      	movs	r1, #255	@ 0xff
 8004a2c:	f00b fc12 	bl	8010254 <sniprintf>
	ILI9341_WriteString(&display, 195, 5, string, Font_7x10, ILI9341_WHITE, ILI9341_BLACK);
 8004a30:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8004a34:	2200      	movs	r2, #0
 8004a36:	9203      	str	r2, [sp, #12]
 8004a38:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004a3c:	9202      	str	r2, [sp, #8]
 8004a3e:	491d      	ldr	r1, [pc, #116]	@ (8004ab4 <Oscilloscope_Process+0xf18>)
 8004a40:	466a      	mov	r2, sp
 8004a42:	c903      	ldmia	r1, {r0, r1}
 8004a44:	e882 0003 	stmia.w	r2, {r0, r1}
 8004a48:	2205      	movs	r2, #5
 8004a4a:	21c3      	movs	r1, #195	@ 0xc3
 8004a4c:	480e      	ldr	r0, [pc, #56]	@ (8004a88 <Oscilloscope_Process+0xeec>)
 8004a4e:	f7fd fb5a 	bl	8002106 <ILI9341_WriteString>

	if (menu_channel1_enabled && menu_selected_item == 3) {
 8004a52:	4b21      	ldr	r3, [pc, #132]	@ (8004ad8 <Oscilloscope_Process+0xf3c>)
 8004a54:	781b      	ldrb	r3, [r3, #0]
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d048      	beq.n	8004aec <Oscilloscope_Process+0xf50>
 8004a5a:	4b20      	ldr	r3, [pc, #128]	@ (8004adc <Oscilloscope_Process+0xf40>)
 8004a5c:	f993 3000 	ldrsb.w	r3, [r3]
 8004a60:	2b03      	cmp	r3, #3
 8004a62:	d143      	bne.n	8004aec <Oscilloscope_Process+0xf50>
		//if (adc_period1_detected)
			drawSignalParam(&display, string, 255, adc_max[1], adc_min[1], adc_period[1]);
 8004a64:	4b1e      	ldr	r3, [pc, #120]	@ (8004ae0 <Oscilloscope_Process+0xf44>)
 8004a66:	885b      	ldrh	r3, [r3, #2]
 8004a68:	b298      	uxth	r0, r3
 8004a6a:	4b1e      	ldr	r3, [pc, #120]	@ (8004ae4 <Oscilloscope_Process+0xf48>)
 8004a6c:	885b      	ldrh	r3, [r3, #2]
 8004a6e:	b29b      	uxth	r3, r3
 8004a70:	4a1d      	ldr	r2, [pc, #116]	@ (8004ae8 <Oscilloscope_Process+0xf4c>)
 8004a72:	6852      	ldr	r2, [r2, #4]
 8004a74:	f107 01cc 	add.w	r1, r7, #204	@ 0xcc
 8004a78:	9201      	str	r2, [sp, #4]
 8004a7a:	9300      	str	r3, [sp, #0]
 8004a7c:	4603      	mov	r3, r0
 8004a7e:	22ff      	movs	r2, #255	@ 0xff
 8004a80:	4801      	ldr	r0, [pc, #4]	@ (8004a88 <Oscilloscope_Process+0xeec>)
 8004a82:	f7fe ff63 	bl	800394c <drawSignalParam>
 8004a86:	e046      	b.n	8004b16 <Oscilloscope_Process+0xf7a>
 8004a88:	2000f598 	.word	0x2000f598
 8004a8c:	20015614 	.word	0x20015614
 8004a90:	2000d108 	.word	0x2000d108
 8004a94:	2000d105 	.word	0x2000d105
 8004a98:	2000d0ec 	.word	0x2000d0ec
 8004a9c:	000f423f 	.word	0x000f423f
 8004aa0:	431bde83 	.word	0x431bde83
 8004aa4:	08013ce0 	.word	0x08013ce0
 8004aa8:	10624dd3 	.word	0x10624dd3
 8004aac:	08013ce8 	.word	0x08013ce8
 8004ab0:	08013cf0 	.word	0x08013cf0
 8004ab4:	20000000 	.word	0x20000000
 8004ab8:	2000d106 	.word	0x2000d106
 8004abc:	2000d0f0 	.word	0x2000d0f0
 8004ac0:	08013cf8 	.word	0x08013cf8
 8004ac4:	08013d00 	.word	0x08013d00
 8004ac8:	08013d08 	.word	0x08013d08
 8004acc:	2000d109 	.word	0x2000d109
 8004ad0:	2000d10a 	.word	0x2000d10a
 8004ad4:	08013d10 	.word	0x08013d10
 8004ad8:	2000d10c 	.word	0x2000d10c
 8004adc:	2000d10d 	.word	0x2000d10d
 8004ae0:	2000f604 	.word	0x2000f604
 8004ae4:	2000d0e4 	.word	0x2000d0e4
 8004ae8:	2000f608 	.word	0x2000f608
	} else if (menu_channel0_enabled) {
 8004aec:	4b39      	ldr	r3, [pc, #228]	@ (8004bd4 <Oscilloscope_Process+0x1038>)
 8004aee:	781b      	ldrb	r3, [r3, #0]
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d010      	beq.n	8004b16 <Oscilloscope_Process+0xf7a>
		//if (adc_period0_detected)
			drawSignalParam(&display, string, 255, adc_max[0], adc_min[0], adc_period[0]);
 8004af4:	4b38      	ldr	r3, [pc, #224]	@ (8004bd8 <Oscilloscope_Process+0x103c>)
 8004af6:	881b      	ldrh	r3, [r3, #0]
 8004af8:	b298      	uxth	r0, r3
 8004afa:	4b38      	ldr	r3, [pc, #224]	@ (8004bdc <Oscilloscope_Process+0x1040>)
 8004afc:	881b      	ldrh	r3, [r3, #0]
 8004afe:	b29b      	uxth	r3, r3
 8004b00:	4a37      	ldr	r2, [pc, #220]	@ (8004be0 <Oscilloscope_Process+0x1044>)
 8004b02:	6812      	ldr	r2, [r2, #0]
 8004b04:	f107 01cc 	add.w	r1, r7, #204	@ 0xcc
 8004b08:	9201      	str	r2, [sp, #4]
 8004b0a:	9300      	str	r3, [sp, #0]
 8004b0c:	4603      	mov	r3, r0
 8004b0e:	22ff      	movs	r2, #255	@ 0xff
 8004b10:	4834      	ldr	r0, [pc, #208]	@ (8004be4 <Oscilloscope_Process+0x1048>)
 8004b12:	f7fe ff1b 	bl	800394c <drawSignalParam>
	}

	// Restart ADC ...
	if (local_event_adc) {
 8004b16:	f897 31ef 	ldrb.w	r3, [r7, #495]	@ 0x1ef
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d04e      	beq.n	8004bbc <Oscilloscope_Process+0x1020>
		adc_reset_cyccnt = 1;
 8004b1e:	4b32      	ldr	r3, [pc, #200]	@ (8004be8 <Oscilloscope_Process+0x104c>)
 8004b20:	2201      	movs	r2, #1
 8004b22:	701a      	strb	r2, [r3, #0]
		adc0_length = 0;
 8004b24:	4b31      	ldr	r3, [pc, #196]	@ (8004bec <Oscilloscope_Process+0x1050>)
 8004b26:	2200      	movs	r2, #0
 8004b28:	601a      	str	r2, [r3, #0]
		adc1_length = 0;
 8004b2a:	4b31      	ldr	r3, [pc, #196]	@ (8004bf0 <Oscilloscope_Process+0x1054>)
 8004b2c:	2200      	movs	r2, #0
 8004b2e:	601a      	str	r2, [r3, #0]
		adc_max[0] = 0;
 8004b30:	4b29      	ldr	r3, [pc, #164]	@ (8004bd8 <Oscilloscope_Process+0x103c>)
 8004b32:	2200      	movs	r2, #0
 8004b34:	801a      	strh	r2, [r3, #0]
		adc_max[1] = 0;
 8004b36:	4b28      	ldr	r3, [pc, #160]	@ (8004bd8 <Oscilloscope_Process+0x103c>)
 8004b38:	2200      	movs	r2, #0
 8004b3a:	805a      	strh	r2, [r3, #2]
		adc_min[0] = -1;
 8004b3c:	4b27      	ldr	r3, [pc, #156]	@ (8004bdc <Oscilloscope_Process+0x1040>)
 8004b3e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004b42:	801a      	strh	r2, [r3, #0]
		adc_min[1] = -1;
 8004b44:	4b25      	ldr	r3, [pc, #148]	@ (8004bdc <Oscilloscope_Process+0x1040>)
 8004b46:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004b4a:	805a      	strh	r2, [r3, #2]
		adc_period[0] = 0;
 8004b4c:	4b24      	ldr	r3, [pc, #144]	@ (8004be0 <Oscilloscope_Process+0x1044>)
 8004b4e:	2200      	movs	r2, #0
 8004b50:	601a      	str	r2, [r3, #0]
		adc_period[1] = 0;
 8004b52:	4b23      	ldr	r3, [pc, #140]	@ (8004be0 <Oscilloscope_Process+0x1044>)
 8004b54:	2200      	movs	r2, #0
 8004b56:	605a      	str	r2, [r3, #4]
		adc_period0_detected = 0;
 8004b58:	4b26      	ldr	r3, [pc, #152]	@ (8004bf4 <Oscilloscope_Process+0x1058>)
 8004b5a:	2200      	movs	r2, #0
 8004b5c:	701a      	strb	r2, [r3, #0]
		adc_period1_detected = 0;
 8004b5e:	4b26      	ldr	r3, [pc, #152]	@ (8004bf8 <Oscilloscope_Process+0x105c>)
 8004b60:	2200      	movs	r2, #0
 8004b62:	701a      	strb	r2, [r3, #0]
		event_trigger0_detected = 0;
 8004b64:	4b25      	ldr	r3, [pc, #148]	@ (8004bfc <Oscilloscope_Process+0x1060>)
 8004b66:	2200      	movs	r2, #0
 8004b68:	701a      	strb	r2, [r3, #0]
		event_trigger1_detected = 0;
 8004b6a:	4b25      	ldr	r3, [pc, #148]	@ (8004c00 <Oscilloscope_Process+0x1064>)
 8004b6c:	2200      	movs	r2, #0
 8004b6e:	701a      	strb	r2, [r3, #0]

		if (menu_channel0_enabled)
 8004b70:	4b18      	ldr	r3, [pc, #96]	@ (8004bd4 <Oscilloscope_Process+0x1038>)
 8004b72:	781b      	ldrb	r3, [r3, #0]
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d003      	beq.n	8004b80 <Oscilloscope_Process+0xfe4>
			adc0_filled = 0;
 8004b78:	4b22      	ldr	r3, [pc, #136]	@ (8004c04 <Oscilloscope_Process+0x1068>)
 8004b7a:	2200      	movs	r2, #0
 8004b7c:	701a      	strb	r2, [r3, #0]
 8004b7e:	e002      	b.n	8004b86 <Oscilloscope_Process+0xfea>
		else
			adc0_filled = 1;
 8004b80:	4b20      	ldr	r3, [pc, #128]	@ (8004c04 <Oscilloscope_Process+0x1068>)
 8004b82:	2201      	movs	r2, #1
 8004b84:	701a      	strb	r2, [r3, #0]

		if (menu_channel1_enabled)
 8004b86:	4b20      	ldr	r3, [pc, #128]	@ (8004c08 <Oscilloscope_Process+0x106c>)
 8004b88:	781b      	ldrb	r3, [r3, #0]
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d003      	beq.n	8004b96 <Oscilloscope_Process+0xffa>
			adc1_filled = 0;
 8004b8e:	4b1f      	ldr	r3, [pc, #124]	@ (8004c0c <Oscilloscope_Process+0x1070>)
 8004b90:	2200      	movs	r2, #0
 8004b92:	701a      	strb	r2, [r3, #0]
 8004b94:	e002      	b.n	8004b9c <Oscilloscope_Process+0x1000>
		else
			adc1_filled = 1;
 8004b96:	4b1d      	ldr	r3, [pc, #116]	@ (8004c0c <Oscilloscope_Process+0x1070>)
 8004b98:	2201      	movs	r2, #1
 8004b9a:	701a      	strb	r2, [r3, #0]

		if (adc_immediate) {
 8004b9c:	4b1c      	ldr	r3, [pc, #112]	@ (8004c10 <Oscilloscope_Process+0x1074>)
 8004b9e:	781b      	ldrb	r3, [r3, #0]
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d005      	beq.n	8004bb0 <Oscilloscope_Process+0x1014>
			// The ADC starts immediately after the previous measurement is handled
			HAL_ADC_Start_DMA(&hadc1, (uint32_t*)&adc_data, 2);
 8004ba4:	2202      	movs	r2, #2
 8004ba6:	491b      	ldr	r1, [pc, #108]	@ (8004c14 <Oscilloscope_Process+0x1078>)
 8004ba8:	481b      	ldr	r0, [pc, #108]	@ (8004c18 <Oscilloscope_Process+0x107c>)
 8004baa:	f000 ff19 	bl	80059e0 <HAL_ADC_Start_DMA>
 8004bae:	e002      	b.n	8004bb6 <Oscilloscope_Process+0x101a>
		} else {
			// ADC starts by timer
			HAL_TIM_Base_Start_IT(&htim10);
 8004bb0:	481a      	ldr	r0, [pc, #104]	@ (8004c1c <Oscilloscope_Process+0x1080>)
 8004bb2:	f004 fa79 	bl	80090a8 <HAL_TIM_Base_Start_IT>
		}

		local_event_adc = 0;
 8004bb6:	2300      	movs	r3, #0
 8004bb8:	f887 31ef 	strb.w	r3, [r7, #495]	@ 0x1ef
	}

	frames++;
 8004bbc:	4b18      	ldr	r3, [pc, #96]	@ (8004c20 <Oscilloscope_Process+0x1084>)
 8004bbe:	781b      	ldrb	r3, [r3, #0]
 8004bc0:	3301      	adds	r3, #1
 8004bc2:	b2da      	uxtb	r2, r3
 8004bc4:	4b16      	ldr	r3, [pc, #88]	@ (8004c20 <Oscilloscope_Process+0x1084>)
 8004bc6:	701a      	strb	r2, [r3, #0]

}
 8004bc8:	bf00      	nop
 8004bca:	f507 77f8 	add.w	r7, r7, #496	@ 0x1f0
 8004bce:	46bd      	mov	sp, r7
 8004bd0:	bdb0      	pop	{r4, r5, r7, pc}
 8004bd2:	bf00      	nop
 8004bd4:	2000d10b 	.word	0x2000d10b
 8004bd8:	2000f604 	.word	0x2000f604
 8004bdc:	2000d0e4 	.word	0x2000d0e4
 8004be0:	2000f608 	.word	0x2000f608
 8004be4:	2000f598 	.word	0x2000f598
 8004be8:	2000d0e2 	.word	0x2000d0e2
 8004bec:	2000f5f8 	.word	0x2000f5f8
 8004bf0:	2000f5fc 	.word	0x2000f5fc
 8004bf4:	2000f610 	.word	0x2000f610
 8004bf8:	2000f611 	.word	0x2000f611
 8004bfc:	2000d109 	.word	0x2000d109
 8004c00:	2000d10a 	.word	0x2000d10a
 8004c04:	2000f600 	.word	0x2000f600
 8004c08:	2000d10c 	.word	0x2000d10c
 8004c0c:	2000d0e0 	.word	0x2000d0e0
 8004c10:	2000d0e8 	.word	0x2000d0e8
 8004c14:	2000f5f0 	.word	0x2000f5f0
 8004c18:	2000d318 	.word	0x2000d318
 8004c1c:	200160c8 	.word	0x200160c8
 8004c20:	20015620 	.word	0x20015620

08004c24 <MX_SPI4_Init>:
SPI_HandleTypeDef hspi4;
SPI_HandleTypeDef hspi5;

/* SPI4 init function */
void MX_SPI4_Init(void)
{
 8004c24:	b580      	push	{r7, lr}
 8004c26:	af00      	add	r7, sp, #0
  /* USER CODE END SPI4_Init 0 */

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  hspi4.Instance = SPI4;
 8004c28:	4b17      	ldr	r3, [pc, #92]	@ (8004c88 <MX_SPI4_Init+0x64>)
 8004c2a:	4a18      	ldr	r2, [pc, #96]	@ (8004c8c <MX_SPI4_Init+0x68>)
 8004c2c:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 8004c2e:	4b16      	ldr	r3, [pc, #88]	@ (8004c88 <MX_SPI4_Init+0x64>)
 8004c30:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8004c34:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 8004c36:	4b14      	ldr	r3, [pc, #80]	@ (8004c88 <MX_SPI4_Init+0x64>)
 8004c38:	2200      	movs	r2, #0
 8004c3a:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 8004c3c:	4b12      	ldr	r3, [pc, #72]	@ (8004c88 <MX_SPI4_Init+0x64>)
 8004c3e:	2200      	movs	r2, #0
 8004c40:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 8004c42:	4b11      	ldr	r3, [pc, #68]	@ (8004c88 <MX_SPI4_Init+0x64>)
 8004c44:	2200      	movs	r2, #0
 8004c46:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 8004c48:	4b0f      	ldr	r3, [pc, #60]	@ (8004c88 <MX_SPI4_Init+0x64>)
 8004c4a:	2200      	movs	r2, #0
 8004c4c:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 8004c4e:	4b0e      	ldr	r3, [pc, #56]	@ (8004c88 <MX_SPI4_Init+0x64>)
 8004c50:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004c54:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8004c56:	4b0c      	ldr	r3, [pc, #48]	@ (8004c88 <MX_SPI4_Init+0x64>)
 8004c58:	2218      	movs	r2, #24
 8004c5a:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8004c5c:	4b0a      	ldr	r3, [pc, #40]	@ (8004c88 <MX_SPI4_Init+0x64>)
 8004c5e:	2200      	movs	r2, #0
 8004c60:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 8004c62:	4b09      	ldr	r3, [pc, #36]	@ (8004c88 <MX_SPI4_Init+0x64>)
 8004c64:	2200      	movs	r2, #0
 8004c66:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004c68:	4b07      	ldr	r3, [pc, #28]	@ (8004c88 <MX_SPI4_Init+0x64>)
 8004c6a:	2200      	movs	r2, #0
 8004c6c:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi4.Init.CRCPolynomial = 10;
 8004c6e:	4b06      	ldr	r3, [pc, #24]	@ (8004c88 <MX_SPI4_Init+0x64>)
 8004c70:	220a      	movs	r2, #10
 8004c72:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 8004c74:	4804      	ldr	r0, [pc, #16]	@ (8004c88 <MX_SPI4_Init+0x64>)
 8004c76:	f003 fd75 	bl	8008764 <HAL_SPI_Init>
 8004c7a:	4603      	mov	r3, r0
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d001      	beq.n	8004c84 <MX_SPI4_Init+0x60>
  {
    Error_Handler();
 8004c80:	f7fe f84c 	bl	8002d1c <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 8004c84:	bf00      	nop
 8004c86:	bd80      	pop	{r7, pc}
 8004c88:	20015ef4 	.word	0x20015ef4
 8004c8c:	40013400 	.word	0x40013400

08004c90 <MX_SPI5_Init>:
/* SPI5 init function */
void MX_SPI5_Init(void)
{
 8004c90:	b580      	push	{r7, lr}
 8004c92:	af00      	add	r7, sp, #0
  /* USER CODE END SPI5_Init 0 */

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  hspi5.Instance = SPI5;
 8004c94:	4b17      	ldr	r3, [pc, #92]	@ (8004cf4 <MX_SPI5_Init+0x64>)
 8004c96:	4a18      	ldr	r2, [pc, #96]	@ (8004cf8 <MX_SPI5_Init+0x68>)
 8004c98:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 8004c9a:	4b16      	ldr	r3, [pc, #88]	@ (8004cf4 <MX_SPI5_Init+0x64>)
 8004c9c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8004ca0:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 8004ca2:	4b14      	ldr	r3, [pc, #80]	@ (8004cf4 <MX_SPI5_Init+0x64>)
 8004ca4:	2200      	movs	r2, #0
 8004ca6:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 8004ca8:	4b12      	ldr	r3, [pc, #72]	@ (8004cf4 <MX_SPI5_Init+0x64>)
 8004caa:	2200      	movs	r2, #0
 8004cac:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 8004cae:	4b11      	ldr	r3, [pc, #68]	@ (8004cf4 <MX_SPI5_Init+0x64>)
 8004cb0:	2200      	movs	r2, #0
 8004cb2:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8004cb4:	4b0f      	ldr	r3, [pc, #60]	@ (8004cf4 <MX_SPI5_Init+0x64>)
 8004cb6:	2200      	movs	r2, #0
 8004cb8:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 8004cba:	4b0e      	ldr	r3, [pc, #56]	@ (8004cf4 <MX_SPI5_Init+0x64>)
 8004cbc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004cc0:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8004cc2:	4b0c      	ldr	r3, [pc, #48]	@ (8004cf4 <MX_SPI5_Init+0x64>)
 8004cc4:	2210      	movs	r2, #16
 8004cc6:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8004cc8:	4b0a      	ldr	r3, [pc, #40]	@ (8004cf4 <MX_SPI5_Init+0x64>)
 8004cca:	2200      	movs	r2, #0
 8004ccc:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 8004cce:	4b09      	ldr	r3, [pc, #36]	@ (8004cf4 <MX_SPI5_Init+0x64>)
 8004cd0:	2200      	movs	r2, #0
 8004cd2:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004cd4:	4b07      	ldr	r3, [pc, #28]	@ (8004cf4 <MX_SPI5_Init+0x64>)
 8004cd6:	2200      	movs	r2, #0
 8004cd8:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi5.Init.CRCPolynomial = 10;
 8004cda:	4b06      	ldr	r3, [pc, #24]	@ (8004cf4 <MX_SPI5_Init+0x64>)
 8004cdc:	220a      	movs	r2, #10
 8004cde:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8004ce0:	4804      	ldr	r0, [pc, #16]	@ (8004cf4 <MX_SPI5_Init+0x64>)
 8004ce2:	f003 fd3f 	bl	8008764 <HAL_SPI_Init>
 8004ce6:	4603      	mov	r3, r0
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d001      	beq.n	8004cf0 <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 8004cec:	f7fe f816 	bl	8002d1c <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 8004cf0:	bf00      	nop
 8004cf2:	bd80      	pop	{r7, pc}
 8004cf4:	20015f4c 	.word	0x20015f4c
 8004cf8:	40015000 	.word	0x40015000

08004cfc <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8004cfc:	b580      	push	{r7, lr}
 8004cfe:	b08e      	sub	sp, #56	@ 0x38
 8004d00:	af00      	add	r7, sp, #0
 8004d02:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004d04:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004d08:	2200      	movs	r2, #0
 8004d0a:	601a      	str	r2, [r3, #0]
 8004d0c:	605a      	str	r2, [r3, #4]
 8004d0e:	609a      	str	r2, [r3, #8]
 8004d10:	60da      	str	r2, [r3, #12]
 8004d12:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI4)
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	4a59      	ldr	r2, [pc, #356]	@ (8004e80 <HAL_SPI_MspInit+0x184>)
 8004d1a:	4293      	cmp	r3, r2
 8004d1c:	d15c      	bne.n	8004dd8 <HAL_SPI_MspInit+0xdc>
  {
  /* USER CODE BEGIN SPI4_MspInit 0 */

  /* USER CODE END SPI4_MspInit 0 */
    /* SPI4 clock enable */
    __HAL_RCC_SPI4_CLK_ENABLE();
 8004d1e:	2300      	movs	r3, #0
 8004d20:	623b      	str	r3, [r7, #32]
 8004d22:	4b58      	ldr	r3, [pc, #352]	@ (8004e84 <HAL_SPI_MspInit+0x188>)
 8004d24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004d26:	4a57      	ldr	r2, [pc, #348]	@ (8004e84 <HAL_SPI_MspInit+0x188>)
 8004d28:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8004d2c:	6453      	str	r3, [r2, #68]	@ 0x44
 8004d2e:	4b55      	ldr	r3, [pc, #340]	@ (8004e84 <HAL_SPI_MspInit+0x188>)
 8004d30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004d32:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004d36:	623b      	str	r3, [r7, #32]
 8004d38:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004d3a:	2300      	movs	r3, #0
 8004d3c:	61fb      	str	r3, [r7, #28]
 8004d3e:	4b51      	ldr	r3, [pc, #324]	@ (8004e84 <HAL_SPI_MspInit+0x188>)
 8004d40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d42:	4a50      	ldr	r2, [pc, #320]	@ (8004e84 <HAL_SPI_MspInit+0x188>)
 8004d44:	f043 0301 	orr.w	r3, r3, #1
 8004d48:	6313      	str	r3, [r2, #48]	@ 0x30
 8004d4a:	4b4e      	ldr	r3, [pc, #312]	@ (8004e84 <HAL_SPI_MspInit+0x188>)
 8004d4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d4e:	f003 0301 	and.w	r3, r3, #1
 8004d52:	61fb      	str	r3, [r7, #28]
 8004d54:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004d56:	2300      	movs	r3, #0
 8004d58:	61bb      	str	r3, [r7, #24]
 8004d5a:	4b4a      	ldr	r3, [pc, #296]	@ (8004e84 <HAL_SPI_MspInit+0x188>)
 8004d5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d5e:	4a49      	ldr	r2, [pc, #292]	@ (8004e84 <HAL_SPI_MspInit+0x188>)
 8004d60:	f043 0302 	orr.w	r3, r3, #2
 8004d64:	6313      	str	r3, [r2, #48]	@ 0x30
 8004d66:	4b47      	ldr	r3, [pc, #284]	@ (8004e84 <HAL_SPI_MspInit+0x188>)
 8004d68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d6a:	f003 0302 	and.w	r3, r3, #2
 8004d6e:	61bb      	str	r3, [r7, #24]
 8004d70:	69bb      	ldr	r3, [r7, #24]
    /**SPI4 GPIO Configuration
    PA1     ------> SPI4_MOSI
    PB13     ------> SPI4_SCK
    PA11     ------> SPI4_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8004d72:	2302      	movs	r3, #2
 8004d74:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004d76:	2302      	movs	r3, #2
 8004d78:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d7a:	2300      	movs	r3, #0
 8004d7c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004d7e:	2303      	movs	r3, #3
 8004d80:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8004d82:	2305      	movs	r3, #5
 8004d84:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004d86:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004d8a:	4619      	mov	r1, r3
 8004d8c:	483e      	ldr	r0, [pc, #248]	@ (8004e88 <HAL_SPI_MspInit+0x18c>)
 8004d8e:	f001 ff69 	bl	8006c64 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8004d92:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8004d96:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004d98:	2302      	movs	r3, #2
 8004d9a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d9c:	2300      	movs	r3, #0
 8004d9e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004da0:	2303      	movs	r3, #3
 8004da2:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI4;
 8004da4:	2306      	movs	r3, #6
 8004da6:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004da8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004dac:	4619      	mov	r1, r3
 8004dae:	4837      	ldr	r0, [pc, #220]	@ (8004e8c <HAL_SPI_MspInit+0x190>)
 8004db0:	f001 ff58 	bl	8006c64 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8004db4:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8004db8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004dba:	2302      	movs	r3, #2
 8004dbc:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004dbe:	2300      	movs	r3, #0
 8004dc0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004dc2:	2303      	movs	r3, #3
 8004dc4:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI4;
 8004dc6:	2306      	movs	r3, #6
 8004dc8:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004dca:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004dce:	4619      	mov	r1, r3
 8004dd0:	482d      	ldr	r0, [pc, #180]	@ (8004e88 <HAL_SPI_MspInit+0x18c>)
 8004dd2:	f001 ff47 	bl	8006c64 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }
}
 8004dd6:	e04f      	b.n	8004e78 <HAL_SPI_MspInit+0x17c>
  else if(spiHandle->Instance==SPI5)
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	4a2c      	ldr	r2, [pc, #176]	@ (8004e90 <HAL_SPI_MspInit+0x194>)
 8004dde:	4293      	cmp	r3, r2
 8004de0:	d14a      	bne.n	8004e78 <HAL_SPI_MspInit+0x17c>
    __HAL_RCC_SPI5_CLK_ENABLE();
 8004de2:	2300      	movs	r3, #0
 8004de4:	617b      	str	r3, [r7, #20]
 8004de6:	4b27      	ldr	r3, [pc, #156]	@ (8004e84 <HAL_SPI_MspInit+0x188>)
 8004de8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004dea:	4a26      	ldr	r2, [pc, #152]	@ (8004e84 <HAL_SPI_MspInit+0x188>)
 8004dec:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004df0:	6453      	str	r3, [r2, #68]	@ 0x44
 8004df2:	4b24      	ldr	r3, [pc, #144]	@ (8004e84 <HAL_SPI_MspInit+0x188>)
 8004df4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004df6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004dfa:	617b      	str	r3, [r7, #20]
 8004dfc:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004dfe:	2300      	movs	r3, #0
 8004e00:	613b      	str	r3, [r7, #16]
 8004e02:	4b20      	ldr	r3, [pc, #128]	@ (8004e84 <HAL_SPI_MspInit+0x188>)
 8004e04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e06:	4a1f      	ldr	r2, [pc, #124]	@ (8004e84 <HAL_SPI_MspInit+0x188>)
 8004e08:	f043 0302 	orr.w	r3, r3, #2
 8004e0c:	6313      	str	r3, [r2, #48]	@ 0x30
 8004e0e:	4b1d      	ldr	r3, [pc, #116]	@ (8004e84 <HAL_SPI_MspInit+0x188>)
 8004e10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e12:	f003 0302 	and.w	r3, r3, #2
 8004e16:	613b      	str	r3, [r7, #16]
 8004e18:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004e1a:	2300      	movs	r3, #0
 8004e1c:	60fb      	str	r3, [r7, #12]
 8004e1e:	4b19      	ldr	r3, [pc, #100]	@ (8004e84 <HAL_SPI_MspInit+0x188>)
 8004e20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e22:	4a18      	ldr	r2, [pc, #96]	@ (8004e84 <HAL_SPI_MspInit+0x188>)
 8004e24:	f043 0301 	orr.w	r3, r3, #1
 8004e28:	6313      	str	r3, [r2, #48]	@ 0x30
 8004e2a:	4b16      	ldr	r3, [pc, #88]	@ (8004e84 <HAL_SPI_MspInit+0x188>)
 8004e2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e2e:	f003 0301 	and.w	r3, r3, #1
 8004e32:	60fb      	str	r3, [r7, #12]
 8004e34:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8004e36:	2301      	movs	r3, #1
 8004e38:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004e3a:	2302      	movs	r3, #2
 8004e3c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004e3e:	2300      	movs	r3, #0
 8004e40:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004e42:	2303      	movs	r3, #3
 8004e44:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI5;
 8004e46:	2306      	movs	r3, #6
 8004e48:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004e4a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004e4e:	4619      	mov	r1, r3
 8004e50:	480e      	ldr	r0, [pc, #56]	@ (8004e8c <HAL_SPI_MspInit+0x190>)
 8004e52:	f001 ff07 	bl	8006c64 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12;
 8004e56:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8004e5a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004e5c:	2302      	movs	r3, #2
 8004e5e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004e60:	2300      	movs	r3, #0
 8004e62:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004e64:	2303      	movs	r3, #3
 8004e66:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI5;
 8004e68:	2306      	movs	r3, #6
 8004e6a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004e6c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004e70:	4619      	mov	r1, r3
 8004e72:	4805      	ldr	r0, [pc, #20]	@ (8004e88 <HAL_SPI_MspInit+0x18c>)
 8004e74:	f001 fef6 	bl	8006c64 <HAL_GPIO_Init>
}
 8004e78:	bf00      	nop
 8004e7a:	3738      	adds	r7, #56	@ 0x38
 8004e7c:	46bd      	mov	sp, r7
 8004e7e:	bd80      	pop	{r7, pc}
 8004e80:	40013400 	.word	0x40013400
 8004e84:	40023800 	.word	0x40023800
 8004e88:	40020000 	.word	0x40020000
 8004e8c:	40020400 	.word	0x40020400
 8004e90:	40015000 	.word	0x40015000

08004e94 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004e94:	b580      	push	{r7, lr}
 8004e96:	b082      	sub	sp, #8
 8004e98:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004e9a:	2300      	movs	r3, #0
 8004e9c:	607b      	str	r3, [r7, #4]
 8004e9e:	4b10      	ldr	r3, [pc, #64]	@ (8004ee0 <HAL_MspInit+0x4c>)
 8004ea0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004ea2:	4a0f      	ldr	r2, [pc, #60]	@ (8004ee0 <HAL_MspInit+0x4c>)
 8004ea4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004ea8:	6453      	str	r3, [r2, #68]	@ 0x44
 8004eaa:	4b0d      	ldr	r3, [pc, #52]	@ (8004ee0 <HAL_MspInit+0x4c>)
 8004eac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004eae:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004eb2:	607b      	str	r3, [r7, #4]
 8004eb4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004eb6:	2300      	movs	r3, #0
 8004eb8:	603b      	str	r3, [r7, #0]
 8004eba:	4b09      	ldr	r3, [pc, #36]	@ (8004ee0 <HAL_MspInit+0x4c>)
 8004ebc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ebe:	4a08      	ldr	r2, [pc, #32]	@ (8004ee0 <HAL_MspInit+0x4c>)
 8004ec0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004ec4:	6413      	str	r3, [r2, #64]	@ 0x40
 8004ec6:	4b06      	ldr	r3, [pc, #24]	@ (8004ee0 <HAL_MspInit+0x4c>)
 8004ec8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004eca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004ece:	603b      	str	r3, [r7, #0]
 8004ed0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8004ed2:	2007      	movs	r0, #7
 8004ed4:	f001 fa66 	bl	80063a4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004ed8:	bf00      	nop
 8004eda:	3708      	adds	r7, #8
 8004edc:	46bd      	mov	sp, r7
 8004ede:	bd80      	pop	{r7, pc}
 8004ee0:	40023800 	.word	0x40023800

08004ee4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004ee4:	b480      	push	{r7}
 8004ee6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8004ee8:	bf00      	nop
 8004eea:	e7fd      	b.n	8004ee8 <NMI_Handler+0x4>

08004eec <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004eec:	b480      	push	{r7}
 8004eee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004ef0:	bf00      	nop
 8004ef2:	e7fd      	b.n	8004ef0 <HardFault_Handler+0x4>

08004ef4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004ef4:	b480      	push	{r7}
 8004ef6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004ef8:	bf00      	nop
 8004efa:	e7fd      	b.n	8004ef8 <MemManage_Handler+0x4>

08004efc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004efc:	b480      	push	{r7}
 8004efe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004f00:	bf00      	nop
 8004f02:	e7fd      	b.n	8004f00 <BusFault_Handler+0x4>

08004f04 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004f04:	b480      	push	{r7}
 8004f06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004f08:	bf00      	nop
 8004f0a:	e7fd      	b.n	8004f08 <UsageFault_Handler+0x4>

08004f0c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004f0c:	b480      	push	{r7}
 8004f0e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004f10:	bf00      	nop
 8004f12:	46bd      	mov	sp, r7
 8004f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f18:	4770      	bx	lr

08004f1a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004f1a:	b480      	push	{r7}
 8004f1c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004f1e:	bf00      	nop
 8004f20:	46bd      	mov	sp, r7
 8004f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f26:	4770      	bx	lr

08004f28 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004f28:	b480      	push	{r7}
 8004f2a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004f2c:	bf00      	nop
 8004f2e:	46bd      	mov	sp, r7
 8004f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f34:	4770      	bx	lr
	...

08004f38 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004f38:	b580      	push	{r7, lr}
 8004f3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	if(Timer1 > 0)
 8004f3c:	4b0b      	ldr	r3, [pc, #44]	@ (8004f6c <SysTick_Handler+0x34>)
 8004f3e:	881b      	ldrh	r3, [r3, #0]
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d005      	beq.n	8004f50 <SysTick_Handler+0x18>
		Timer1--;
 8004f44:	4b09      	ldr	r3, [pc, #36]	@ (8004f6c <SysTick_Handler+0x34>)
 8004f46:	881b      	ldrh	r3, [r3, #0]
 8004f48:	3b01      	subs	r3, #1
 8004f4a:	b29a      	uxth	r2, r3
 8004f4c:	4b07      	ldr	r3, [pc, #28]	@ (8004f6c <SysTick_Handler+0x34>)
 8004f4e:	801a      	strh	r2, [r3, #0]

	if(Timer2 > 0)
 8004f50:	4b07      	ldr	r3, [pc, #28]	@ (8004f70 <SysTick_Handler+0x38>)
 8004f52:	881b      	ldrh	r3, [r3, #0]
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d005      	beq.n	8004f64 <SysTick_Handler+0x2c>
		Timer2--;
 8004f58:	4b05      	ldr	r3, [pc, #20]	@ (8004f70 <SysTick_Handler+0x38>)
 8004f5a:	881b      	ldrh	r3, [r3, #0]
 8004f5c:	3b01      	subs	r3, #1
 8004f5e:	b29a      	uxth	r2, r3
 8004f60:	4b03      	ldr	r3, [pc, #12]	@ (8004f70 <SysTick_Handler+0x38>)
 8004f62:	801a      	strh	r2, [r3, #0]
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004f64:	f000 fcb4 	bl	80058d0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004f68:	bf00      	nop
 8004f6a:	bd80      	pop	{r7, pc}
 8004f6c:	200161ac 	.word	0x200161ac
 8004f70:	200161ae 	.word	0x200161ae

08004f74 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8004f74:	b580      	push	{r7, lr}
 8004f76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 8004f78:	4802      	ldr	r0, [pc, #8]	@ (8004f84 <DMA1_Stream3_IRQHandler+0x10>)
 8004f7a:	f001 fc09 	bl	8006790 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8004f7e:	bf00      	nop
 8004f80:	bd80      	pop	{r7, pc}
 8004f82:	bf00      	nop
 8004f84:	2000d458 	.word	0x2000d458

08004f88 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8004f88:	b580      	push	{r7, lr}
 8004f8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8004f8c:	4803      	ldr	r0, [pc, #12]	@ (8004f9c <TIM1_UP_TIM10_IRQHandler+0x14>)
 8004f8e:	f004 facb 	bl	8009528 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim10);
 8004f92:	4803      	ldr	r0, [pc, #12]	@ (8004fa0 <TIM1_UP_TIM10_IRQHandler+0x18>)
 8004f94:	f004 fac8 	bl	8009528 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8004f98:	bf00      	nop
 8004f9a:	bd80      	pop	{r7, pc}
 8004f9c:	20015fa8 	.word	0x20015fa8
 8004fa0:	200160c8 	.word	0x200160c8

08004fa4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8004fa4:	b580      	push	{r7, lr}
 8004fa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8004fa8:	4802      	ldr	r0, [pc, #8]	@ (8004fb4 <TIM2_IRQHandler+0x10>)
 8004faa:	f004 fabd 	bl	8009528 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8004fae:	bf00      	nop
 8004fb0:	bd80      	pop	{r7, pc}
 8004fb2:	bf00      	nop
 8004fb4:	20015ff0 	.word	0x20015ff0

08004fb8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8004fb8:	b580      	push	{r7, lr}
 8004fba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8004fbc:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8004fc0:	f002 f806 	bl	8006fd0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8004fc4:	bf00      	nop
 8004fc6:	bd80      	pop	{r7, pc}

08004fc8 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8004fc8:	b580      	push	{r7, lr}
 8004fca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8004fcc:	4802      	ldr	r0, [pc, #8]	@ (8004fd8 <DMA2_Stream0_IRQHandler+0x10>)
 8004fce:	f001 fbdf 	bl	8006790 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8004fd2:	bf00      	nop
 8004fd4:	bd80      	pop	{r7, pc}
 8004fd6:	bf00      	nop
 8004fd8:	2000d360 	.word	0x2000d360

08004fdc <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8004fdc:	b580      	push	{r7, lr}
 8004fde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8004fe0:	4802      	ldr	r0, [pc, #8]	@ (8004fec <USART6_IRQHandler+0x10>)
 8004fe2:	f005 f9e9 	bl	800a3b8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8004fe6:	bf00      	nop
 8004fe8:	bd80      	pop	{r7, pc}
 8004fea:	bf00      	nop
 8004fec:	20016158 	.word	0x20016158

08004ff0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004ff0:	b580      	push	{r7, lr}
 8004ff2:	b086      	sub	sp, #24
 8004ff4:	af00      	add	r7, sp, #0
 8004ff6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004ff8:	4a14      	ldr	r2, [pc, #80]	@ (800504c <_sbrk+0x5c>)
 8004ffa:	4b15      	ldr	r3, [pc, #84]	@ (8005050 <_sbrk+0x60>)
 8004ffc:	1ad3      	subs	r3, r2, r3
 8004ffe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8005000:	697b      	ldr	r3, [r7, #20]
 8005002:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8005004:	4b13      	ldr	r3, [pc, #76]	@ (8005054 <_sbrk+0x64>)
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	2b00      	cmp	r3, #0
 800500a:	d102      	bne.n	8005012 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800500c:	4b11      	ldr	r3, [pc, #68]	@ (8005054 <_sbrk+0x64>)
 800500e:	4a12      	ldr	r2, [pc, #72]	@ (8005058 <_sbrk+0x68>)
 8005010:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8005012:	4b10      	ldr	r3, [pc, #64]	@ (8005054 <_sbrk+0x64>)
 8005014:	681a      	ldr	r2, [r3, #0]
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	4413      	add	r3, r2
 800501a:	693a      	ldr	r2, [r7, #16]
 800501c:	429a      	cmp	r2, r3
 800501e:	d207      	bcs.n	8005030 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8005020:	f00b fa9a 	bl	8010558 <__errno>
 8005024:	4603      	mov	r3, r0
 8005026:	220c      	movs	r2, #12
 8005028:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800502a:	f04f 33ff 	mov.w	r3, #4294967295
 800502e:	e009      	b.n	8005044 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8005030:	4b08      	ldr	r3, [pc, #32]	@ (8005054 <_sbrk+0x64>)
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8005036:	4b07      	ldr	r3, [pc, #28]	@ (8005054 <_sbrk+0x64>)
 8005038:	681a      	ldr	r2, [r3, #0]
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	4413      	add	r3, r2
 800503e:	4a05      	ldr	r2, [pc, #20]	@ (8005054 <_sbrk+0x64>)
 8005040:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8005042:	68fb      	ldr	r3, [r7, #12]
}
 8005044:	4618      	mov	r0, r3
 8005046:	3718      	adds	r7, #24
 8005048:	46bd      	mov	sp, r7
 800504a:	bd80      	pop	{r7, pc}
 800504c:	20020000 	.word	0x20020000
 8005050:	00000800 	.word	0x00000800
 8005054:	20015fa4 	.word	0x20015fa4
 8005058:	20016538 	.word	0x20016538

0800505c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800505c:	b480      	push	{r7}
 800505e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8005060:	4b06      	ldr	r3, [pc, #24]	@ (800507c <SystemInit+0x20>)
 8005062:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005066:	4a05      	ldr	r2, [pc, #20]	@ (800507c <SystemInit+0x20>)
 8005068:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800506c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8005070:	bf00      	nop
 8005072:	46bd      	mov	sp, r7
 8005074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005078:	4770      	bx	lr
 800507a:	bf00      	nop
 800507c:	e000ed00 	.word	0xe000ed00

08005080 <MX_TIM1_Init>:
TIM_HandleTypeDef htim4;
TIM_HandleTypeDef htim10;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8005080:	b580      	push	{r7, lr}
 8005082:	b096      	sub	sp, #88	@ 0x58
 8005084:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8005086:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800508a:	2200      	movs	r2, #0
 800508c:	601a      	str	r2, [r3, #0]
 800508e:	605a      	str	r2, [r3, #4]
 8005090:	609a      	str	r2, [r3, #8]
 8005092:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005094:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8005098:	2200      	movs	r2, #0
 800509a:	601a      	str	r2, [r3, #0]
 800509c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800509e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80050a2:	2200      	movs	r2, #0
 80050a4:	601a      	str	r2, [r3, #0]
 80050a6:	605a      	str	r2, [r3, #4]
 80050a8:	609a      	str	r2, [r3, #8]
 80050aa:	60da      	str	r2, [r3, #12]
 80050ac:	611a      	str	r2, [r3, #16]
 80050ae:	615a      	str	r2, [r3, #20]
 80050b0:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80050b2:	1d3b      	adds	r3, r7, #4
 80050b4:	2220      	movs	r2, #32
 80050b6:	2100      	movs	r1, #0
 80050b8:	4618      	mov	r0, r3
 80050ba:	f00b f9fb 	bl	80104b4 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80050be:	4b3f      	ldr	r3, [pc, #252]	@ (80051bc <MX_TIM1_Init+0x13c>)
 80050c0:	4a3f      	ldr	r2, [pc, #252]	@ (80051c0 <MX_TIM1_Init+0x140>)
 80050c2:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 100-1;
 80050c4:	4b3d      	ldr	r3, [pc, #244]	@ (80051bc <MX_TIM1_Init+0x13c>)
 80050c6:	2263      	movs	r2, #99	@ 0x63
 80050c8:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80050ca:	4b3c      	ldr	r3, [pc, #240]	@ (80051bc <MX_TIM1_Init+0x13c>)
 80050cc:	2200      	movs	r2, #0
 80050ce:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000-1;
 80050d0:	4b3a      	ldr	r3, [pc, #232]	@ (80051bc <MX_TIM1_Init+0x13c>)
 80050d2:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80050d6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80050d8:	4b38      	ldr	r3, [pc, #224]	@ (80051bc <MX_TIM1_Init+0x13c>)
 80050da:	2200      	movs	r2, #0
 80050dc:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80050de:	4b37      	ldr	r3, [pc, #220]	@ (80051bc <MX_TIM1_Init+0x13c>)
 80050e0:	2200      	movs	r2, #0
 80050e2:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80050e4:	4b35      	ldr	r3, [pc, #212]	@ (80051bc <MX_TIM1_Init+0x13c>)
 80050e6:	2200      	movs	r2, #0
 80050e8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80050ea:	4834      	ldr	r0, [pc, #208]	@ (80051bc <MX_TIM1_Init+0x13c>)
 80050ec:	f003 ff8c 	bl	8009008 <HAL_TIM_Base_Init>
 80050f0:	4603      	mov	r3, r0
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d001      	beq.n	80050fa <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 80050f6:	f7fd fe11 	bl	8002d1c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80050fa:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80050fe:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8005100:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8005104:	4619      	mov	r1, r3
 8005106:	482d      	ldr	r0, [pc, #180]	@ (80051bc <MX_TIM1_Init+0x13c>)
 8005108:	f004 fbc0 	bl	800988c <HAL_TIM_ConfigClockSource>
 800510c:	4603      	mov	r3, r0
 800510e:	2b00      	cmp	r3, #0
 8005110:	d001      	beq.n	8005116 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8005112:	f7fd fe03 	bl	8002d1c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8005116:	4829      	ldr	r0, [pc, #164]	@ (80051bc <MX_TIM1_Init+0x13c>)
 8005118:	f004 f857 	bl	80091ca <HAL_TIM_PWM_Init>
 800511c:	4603      	mov	r3, r0
 800511e:	2b00      	cmp	r3, #0
 8005120:	d001      	beq.n	8005126 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8005122:	f7fd fdfb 	bl	8002d1c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005126:	2300      	movs	r3, #0
 8005128:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800512a:	2300      	movs	r3, #0
 800512c:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800512e:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8005132:	4619      	mov	r1, r3
 8005134:	4821      	ldr	r0, [pc, #132]	@ (80051bc <MX_TIM1_Init+0x13c>)
 8005136:	f004 ff6b 	bl	800a010 <HAL_TIMEx_MasterConfigSynchronization>
 800513a:	4603      	mov	r3, r0
 800513c:	2b00      	cmp	r3, #0
 800513e:	d001      	beq.n	8005144 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8005140:	f7fd fdec 	bl	8002d1c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8005144:	2360      	movs	r3, #96	@ 0x60
 8005146:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 500;
 8005148:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 800514c:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800514e:	2300      	movs	r3, #0
 8005150:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8005152:	2300      	movs	r3, #0
 8005154:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8005156:	2300      	movs	r3, #0
 8005158:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800515a:	2300      	movs	r3, #0
 800515c:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800515e:	2300      	movs	r3, #0
 8005160:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8005162:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005166:	2200      	movs	r2, #0
 8005168:	4619      	mov	r1, r3
 800516a:	4814      	ldr	r0, [pc, #80]	@ (80051bc <MX_TIM1_Init+0x13c>)
 800516c:	f004 facc 	bl	8009708 <HAL_TIM_PWM_ConfigChannel>
 8005170:	4603      	mov	r3, r0
 8005172:	2b00      	cmp	r3, #0
 8005174:	d001      	beq.n	800517a <MX_TIM1_Init+0xfa>
  {
    Error_Handler();
 8005176:	f7fd fdd1 	bl	8002d1c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800517a:	2300      	movs	r3, #0
 800517c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800517e:	2300      	movs	r3, #0
 8005180:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8005182:	2300      	movs	r3, #0
 8005184:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8005186:	2300      	movs	r3, #0
 8005188:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800518a:	2300      	movs	r3, #0
 800518c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800518e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8005192:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8005194:	2300      	movs	r3, #0
 8005196:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8005198:	1d3b      	adds	r3, r7, #4
 800519a:	4619      	mov	r1, r3
 800519c:	4807      	ldr	r0, [pc, #28]	@ (80051bc <MX_TIM1_Init+0x13c>)
 800519e:	f004 ffa5 	bl	800a0ec <HAL_TIMEx_ConfigBreakDeadTime>
 80051a2:	4603      	mov	r3, r0
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d001      	beq.n	80051ac <MX_TIM1_Init+0x12c>
  {
    Error_Handler();
 80051a8:	f7fd fdb8 	bl	8002d1c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80051ac:	4803      	ldr	r0, [pc, #12]	@ (80051bc <MX_TIM1_Init+0x13c>)
 80051ae:	f000 f9ff 	bl	80055b0 <HAL_TIM_MspPostInit>

}
 80051b2:	bf00      	nop
 80051b4:	3758      	adds	r7, #88	@ 0x58
 80051b6:	46bd      	mov	sp, r7
 80051b8:	bd80      	pop	{r7, pc}
 80051ba:	bf00      	nop
 80051bc:	20015fa8 	.word	0x20015fa8
 80051c0:	40010000 	.word	0x40010000

080051c4 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80051c4:	b580      	push	{r7, lr}
 80051c6:	b086      	sub	sp, #24
 80051c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80051ca:	f107 0308 	add.w	r3, r7, #8
 80051ce:	2200      	movs	r2, #0
 80051d0:	601a      	str	r2, [r3, #0]
 80051d2:	605a      	str	r2, [r3, #4]
 80051d4:	609a      	str	r2, [r3, #8]
 80051d6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80051d8:	463b      	mov	r3, r7
 80051da:	2200      	movs	r2, #0
 80051dc:	601a      	str	r2, [r3, #0]
 80051de:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80051e0:	4b1d      	ldr	r3, [pc, #116]	@ (8005258 <MX_TIM2_Init+0x94>)
 80051e2:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80051e6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 100-1;
 80051e8:	4b1b      	ldr	r3, [pc, #108]	@ (8005258 <MX_TIM2_Init+0x94>)
 80051ea:	2263      	movs	r2, #99	@ 0x63
 80051ec:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80051ee:	4b1a      	ldr	r3, [pc, #104]	@ (8005258 <MX_TIM2_Init+0x94>)
 80051f0:	2200      	movs	r2, #0
 80051f2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 32-1;
 80051f4:	4b18      	ldr	r3, [pc, #96]	@ (8005258 <MX_TIM2_Init+0x94>)
 80051f6:	221f      	movs	r2, #31
 80051f8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80051fa:	4b17      	ldr	r3, [pc, #92]	@ (8005258 <MX_TIM2_Init+0x94>)
 80051fc:	2200      	movs	r2, #0
 80051fe:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005200:	4b15      	ldr	r3, [pc, #84]	@ (8005258 <MX_TIM2_Init+0x94>)
 8005202:	2200      	movs	r2, #0
 8005204:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8005206:	4814      	ldr	r0, [pc, #80]	@ (8005258 <MX_TIM2_Init+0x94>)
 8005208:	f003 fefe 	bl	8009008 <HAL_TIM_Base_Init>
 800520c:	4603      	mov	r3, r0
 800520e:	2b00      	cmp	r3, #0
 8005210:	d001      	beq.n	8005216 <MX_TIM2_Init+0x52>
  {
    Error_Handler();
 8005212:	f7fd fd83 	bl	8002d1c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005216:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800521a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800521c:	f107 0308 	add.w	r3, r7, #8
 8005220:	4619      	mov	r1, r3
 8005222:	480d      	ldr	r0, [pc, #52]	@ (8005258 <MX_TIM2_Init+0x94>)
 8005224:	f004 fb32 	bl	800988c <HAL_TIM_ConfigClockSource>
 8005228:	4603      	mov	r3, r0
 800522a:	2b00      	cmp	r3, #0
 800522c:	d001      	beq.n	8005232 <MX_TIM2_Init+0x6e>
  {
    Error_Handler();
 800522e:	f7fd fd75 	bl	8002d1c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005232:	2300      	movs	r3, #0
 8005234:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005236:	2300      	movs	r3, #0
 8005238:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800523a:	463b      	mov	r3, r7
 800523c:	4619      	mov	r1, r3
 800523e:	4806      	ldr	r0, [pc, #24]	@ (8005258 <MX_TIM2_Init+0x94>)
 8005240:	f004 fee6 	bl	800a010 <HAL_TIMEx_MasterConfigSynchronization>
 8005244:	4603      	mov	r3, r0
 8005246:	2b00      	cmp	r3, #0
 8005248:	d001      	beq.n	800524e <MX_TIM2_Init+0x8a>
  {
    Error_Handler();
 800524a:	f7fd fd67 	bl	8002d1c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800524e:	bf00      	nop
 8005250:	3718      	adds	r7, #24
 8005252:	46bd      	mov	sp, r7
 8005254:	bd80      	pop	{r7, pc}
 8005256:	bf00      	nop
 8005258:	20015ff0 	.word	0x20015ff0

0800525c <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 800525c:	b580      	push	{r7, lr}
 800525e:	b08c      	sub	sp, #48	@ 0x30
 8005260:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8005262:	f107 030c 	add.w	r3, r7, #12
 8005266:	2224      	movs	r2, #36	@ 0x24
 8005268:	2100      	movs	r1, #0
 800526a:	4618      	mov	r0, r3
 800526c:	f00b f922 	bl	80104b4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005270:	1d3b      	adds	r3, r7, #4
 8005272:	2200      	movs	r2, #0
 8005274:	601a      	str	r2, [r3, #0]
 8005276:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8005278:	4b20      	ldr	r3, [pc, #128]	@ (80052fc <MX_TIM3_Init+0xa0>)
 800527a:	4a21      	ldr	r2, [pc, #132]	@ (8005300 <MX_TIM3_Init+0xa4>)
 800527c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800527e:	4b1f      	ldr	r3, [pc, #124]	@ (80052fc <MX_TIM3_Init+0xa0>)
 8005280:	2200      	movs	r2, #0
 8005282:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005284:	4b1d      	ldr	r3, [pc, #116]	@ (80052fc <MX_TIM3_Init+0xa0>)
 8005286:	2200      	movs	r2, #0
 8005288:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800528a:	4b1c      	ldr	r3, [pc, #112]	@ (80052fc <MX_TIM3_Init+0xa0>)
 800528c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8005290:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005292:	4b1a      	ldr	r3, [pc, #104]	@ (80052fc <MX_TIM3_Init+0xa0>)
 8005294:	2200      	movs	r2, #0
 8005296:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005298:	4b18      	ldr	r3, [pc, #96]	@ (80052fc <MX_TIM3_Init+0xa0>)
 800529a:	2200      	movs	r2, #0
 800529c:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 800529e:	2301      	movs	r3, #1
 80052a0:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80052a2:	2300      	movs	r3, #0
 80052a4:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80052a6:	2301      	movs	r3, #1
 80052a8:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80052aa:	2300      	movs	r3, #0
 80052ac:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80052ae:	2300      	movs	r3, #0
 80052b0:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80052b2:	2300      	movs	r3, #0
 80052b4:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80052b6:	2301      	movs	r3, #1
 80052b8:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80052ba:	2300      	movs	r3, #0
 80052bc:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 80052be:	2300      	movs	r3, #0
 80052c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 80052c2:	f107 030c 	add.w	r3, r7, #12
 80052c6:	4619      	mov	r1, r3
 80052c8:	480c      	ldr	r0, [pc, #48]	@ (80052fc <MX_TIM3_Init+0xa0>)
 80052ca:	f004 f887 	bl	80093dc <HAL_TIM_Encoder_Init>
 80052ce:	4603      	mov	r3, r0
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d001      	beq.n	80052d8 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 80052d4:	f7fd fd22 	bl	8002d1c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80052d8:	2300      	movs	r3, #0
 80052da:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80052dc:	2300      	movs	r3, #0
 80052de:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80052e0:	1d3b      	adds	r3, r7, #4
 80052e2:	4619      	mov	r1, r3
 80052e4:	4805      	ldr	r0, [pc, #20]	@ (80052fc <MX_TIM3_Init+0xa0>)
 80052e6:	f004 fe93 	bl	800a010 <HAL_TIMEx_MasterConfigSynchronization>
 80052ea:	4603      	mov	r3, r0
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d001      	beq.n	80052f4 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 80052f0:	f7fd fd14 	bl	8002d1c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80052f4:	bf00      	nop
 80052f6:	3730      	adds	r7, #48	@ 0x30
 80052f8:	46bd      	mov	sp, r7
 80052fa:	bd80      	pop	{r7, pc}
 80052fc:	20016038 	.word	0x20016038
 8005300:	40000400 	.word	0x40000400

08005304 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8005304:	b580      	push	{r7, lr}
 8005306:	b08c      	sub	sp, #48	@ 0x30
 8005308:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800530a:	f107 030c 	add.w	r3, r7, #12
 800530e:	2224      	movs	r2, #36	@ 0x24
 8005310:	2100      	movs	r1, #0
 8005312:	4618      	mov	r0, r3
 8005314:	f00b f8ce 	bl	80104b4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005318:	1d3b      	adds	r3, r7, #4
 800531a:	2200      	movs	r2, #0
 800531c:	601a      	str	r2, [r3, #0]
 800531e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8005320:	4b20      	ldr	r3, [pc, #128]	@ (80053a4 <MX_TIM4_Init+0xa0>)
 8005322:	4a21      	ldr	r2, [pc, #132]	@ (80053a8 <MX_TIM4_Init+0xa4>)
 8005324:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8005326:	4b1f      	ldr	r3, [pc, #124]	@ (80053a4 <MX_TIM4_Init+0xa0>)
 8005328:	2200      	movs	r2, #0
 800532a:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800532c:	4b1d      	ldr	r3, [pc, #116]	@ (80053a4 <MX_TIM4_Init+0xa0>)
 800532e:	2200      	movs	r2, #0
 8005330:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8005332:	4b1c      	ldr	r3, [pc, #112]	@ (80053a4 <MX_TIM4_Init+0xa0>)
 8005334:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8005338:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800533a:	4b1a      	ldr	r3, [pc, #104]	@ (80053a4 <MX_TIM4_Init+0xa0>)
 800533c:	2200      	movs	r2, #0
 800533e:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005340:	4b18      	ldr	r3, [pc, #96]	@ (80053a4 <MX_TIM4_Init+0xa0>)
 8005342:	2200      	movs	r2, #0
 8005344:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8005346:	2301      	movs	r3, #1
 8005348:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800534a:	2300      	movs	r3, #0
 800534c:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800534e:	2301      	movs	r3, #1
 8005350:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8005352:	2300      	movs	r3, #0
 8005354:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8005356:	2300      	movs	r3, #0
 8005358:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800535a:	2300      	movs	r3, #0
 800535c:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800535e:	2301      	movs	r3, #1
 8005360:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8005362:	2300      	movs	r3, #0
 8005364:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8005366:	2300      	movs	r3, #0
 8005368:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 800536a:	f107 030c 	add.w	r3, r7, #12
 800536e:	4619      	mov	r1, r3
 8005370:	480c      	ldr	r0, [pc, #48]	@ (80053a4 <MX_TIM4_Init+0xa0>)
 8005372:	f004 f833 	bl	80093dc <HAL_TIM_Encoder_Init>
 8005376:	4603      	mov	r3, r0
 8005378:	2b00      	cmp	r3, #0
 800537a:	d001      	beq.n	8005380 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 800537c:	f7fd fcce 	bl	8002d1c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005380:	2300      	movs	r3, #0
 8005382:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005384:	2300      	movs	r3, #0
 8005386:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8005388:	1d3b      	adds	r3, r7, #4
 800538a:	4619      	mov	r1, r3
 800538c:	4805      	ldr	r0, [pc, #20]	@ (80053a4 <MX_TIM4_Init+0xa0>)
 800538e:	f004 fe3f 	bl	800a010 <HAL_TIMEx_MasterConfigSynchronization>
 8005392:	4603      	mov	r3, r0
 8005394:	2b00      	cmp	r3, #0
 8005396:	d001      	beq.n	800539c <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 8005398:	f7fd fcc0 	bl	8002d1c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800539c:	bf00      	nop
 800539e:	3730      	adds	r7, #48	@ 0x30
 80053a0:	46bd      	mov	sp, r7
 80053a2:	bd80      	pop	{r7, pc}
 80053a4:	20016080 	.word	0x20016080
 80053a8:	40000800 	.word	0x40000800

080053ac <MX_TIM10_Init>:
/* TIM10 init function */
void MX_TIM10_Init(void)
{
 80053ac:	b580      	push	{r7, lr}
 80053ae:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 80053b0:	4b0e      	ldr	r3, [pc, #56]	@ (80053ec <MX_TIM10_Init+0x40>)
 80053b2:	4a0f      	ldr	r2, [pc, #60]	@ (80053f0 <MX_TIM10_Init+0x44>)
 80053b4:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 0;
 80053b6:	4b0d      	ldr	r3, [pc, #52]	@ (80053ec <MX_TIM10_Init+0x40>)
 80053b8:	2200      	movs	r2, #0
 80053ba:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 80053bc:	4b0b      	ldr	r3, [pc, #44]	@ (80053ec <MX_TIM10_Init+0x40>)
 80053be:	2200      	movs	r2, #0
 80053c0:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 288-1;
 80053c2:	4b0a      	ldr	r3, [pc, #40]	@ (80053ec <MX_TIM10_Init+0x40>)
 80053c4:	f240 121f 	movw	r2, #287	@ 0x11f
 80053c8:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80053ca:	4b08      	ldr	r3, [pc, #32]	@ (80053ec <MX_TIM10_Init+0x40>)
 80053cc:	2200      	movs	r2, #0
 80053ce:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80053d0:	4b06      	ldr	r3, [pc, #24]	@ (80053ec <MX_TIM10_Init+0x40>)
 80053d2:	2200      	movs	r2, #0
 80053d4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 80053d6:	4805      	ldr	r0, [pc, #20]	@ (80053ec <MX_TIM10_Init+0x40>)
 80053d8:	f003 fe16 	bl	8009008 <HAL_TIM_Base_Init>
 80053dc:	4603      	mov	r3, r0
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d001      	beq.n	80053e6 <MX_TIM10_Init+0x3a>
  {
    Error_Handler();
 80053e2:	f7fd fc9b 	bl	8002d1c <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 80053e6:	bf00      	nop
 80053e8:	bd80      	pop	{r7, pc}
 80053ea:	bf00      	nop
 80053ec:	200160c8 	.word	0x200160c8
 80053f0:	40014400 	.word	0x40014400

080053f4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80053f4:	b580      	push	{r7, lr}
 80053f6:	b086      	sub	sp, #24
 80053f8:	af00      	add	r7, sp, #0
 80053fa:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	4a2a      	ldr	r2, [pc, #168]	@ (80054ac <HAL_TIM_Base_MspInit+0xb8>)
 8005402:	4293      	cmp	r3, r2
 8005404:	d116      	bne.n	8005434 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8005406:	2300      	movs	r3, #0
 8005408:	617b      	str	r3, [r7, #20]
 800540a:	4b29      	ldr	r3, [pc, #164]	@ (80054b0 <HAL_TIM_Base_MspInit+0xbc>)
 800540c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800540e:	4a28      	ldr	r2, [pc, #160]	@ (80054b0 <HAL_TIM_Base_MspInit+0xbc>)
 8005410:	f043 0301 	orr.w	r3, r3, #1
 8005414:	6453      	str	r3, [r2, #68]	@ 0x44
 8005416:	4b26      	ldr	r3, [pc, #152]	@ (80054b0 <HAL_TIM_Base_MspInit+0xbc>)
 8005418:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800541a:	f003 0301 	and.w	r3, r3, #1
 800541e:	617b      	str	r3, [r7, #20]
 8005420:	697b      	ldr	r3, [r7, #20]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8005422:	2200      	movs	r2, #0
 8005424:	2100      	movs	r1, #0
 8005426:	2019      	movs	r0, #25
 8005428:	f000 ffc7 	bl	80063ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800542c:	2019      	movs	r0, #25
 800542e:	f000 ffe0 	bl	80063f2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }
}
 8005432:	e036      	b.n	80054a2 <HAL_TIM_Base_MspInit+0xae>
  else if(tim_baseHandle->Instance==TIM2)
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800543c:	d116      	bne.n	800546c <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800543e:	2300      	movs	r3, #0
 8005440:	613b      	str	r3, [r7, #16]
 8005442:	4b1b      	ldr	r3, [pc, #108]	@ (80054b0 <HAL_TIM_Base_MspInit+0xbc>)
 8005444:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005446:	4a1a      	ldr	r2, [pc, #104]	@ (80054b0 <HAL_TIM_Base_MspInit+0xbc>)
 8005448:	f043 0301 	orr.w	r3, r3, #1
 800544c:	6413      	str	r3, [r2, #64]	@ 0x40
 800544e:	4b18      	ldr	r3, [pc, #96]	@ (80054b0 <HAL_TIM_Base_MspInit+0xbc>)
 8005450:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005452:	f003 0301 	and.w	r3, r3, #1
 8005456:	613b      	str	r3, [r7, #16]
 8005458:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800545a:	2200      	movs	r2, #0
 800545c:	2100      	movs	r1, #0
 800545e:	201c      	movs	r0, #28
 8005460:	f000 ffab 	bl	80063ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8005464:	201c      	movs	r0, #28
 8005466:	f000 ffc4 	bl	80063f2 <HAL_NVIC_EnableIRQ>
}
 800546a:	e01a      	b.n	80054a2 <HAL_TIM_Base_MspInit+0xae>
  else if(tim_baseHandle->Instance==TIM10)
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	4a10      	ldr	r2, [pc, #64]	@ (80054b4 <HAL_TIM_Base_MspInit+0xc0>)
 8005472:	4293      	cmp	r3, r2
 8005474:	d115      	bne.n	80054a2 <HAL_TIM_Base_MspInit+0xae>
    __HAL_RCC_TIM10_CLK_ENABLE();
 8005476:	2300      	movs	r3, #0
 8005478:	60fb      	str	r3, [r7, #12]
 800547a:	4b0d      	ldr	r3, [pc, #52]	@ (80054b0 <HAL_TIM_Base_MspInit+0xbc>)
 800547c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800547e:	4a0c      	ldr	r2, [pc, #48]	@ (80054b0 <HAL_TIM_Base_MspInit+0xbc>)
 8005480:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005484:	6453      	str	r3, [r2, #68]	@ 0x44
 8005486:	4b0a      	ldr	r3, [pc, #40]	@ (80054b0 <HAL_TIM_Base_MspInit+0xbc>)
 8005488:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800548a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800548e:	60fb      	str	r3, [r7, #12]
 8005490:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8005492:	2200      	movs	r2, #0
 8005494:	2100      	movs	r1, #0
 8005496:	2019      	movs	r0, #25
 8005498:	f000 ff8f 	bl	80063ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800549c:	2019      	movs	r0, #25
 800549e:	f000 ffa8 	bl	80063f2 <HAL_NVIC_EnableIRQ>
}
 80054a2:	bf00      	nop
 80054a4:	3718      	adds	r7, #24
 80054a6:	46bd      	mov	sp, r7
 80054a8:	bd80      	pop	{r7, pc}
 80054aa:	bf00      	nop
 80054ac:	40010000 	.word	0x40010000
 80054b0:	40023800 	.word	0x40023800
 80054b4:	40014400 	.word	0x40014400

080054b8 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 80054b8:	b580      	push	{r7, lr}
 80054ba:	b08c      	sub	sp, #48	@ 0x30
 80054bc:	af00      	add	r7, sp, #0
 80054be:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80054c0:	f107 031c 	add.w	r3, r7, #28
 80054c4:	2200      	movs	r2, #0
 80054c6:	601a      	str	r2, [r3, #0]
 80054c8:	605a      	str	r2, [r3, #4]
 80054ca:	609a      	str	r2, [r3, #8]
 80054cc:	60da      	str	r2, [r3, #12]
 80054ce:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM3)
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	4a32      	ldr	r2, [pc, #200]	@ (80055a0 <HAL_TIM_Encoder_MspInit+0xe8>)
 80054d6:	4293      	cmp	r3, r2
 80054d8:	d12c      	bne.n	8005534 <HAL_TIM_Encoder_MspInit+0x7c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80054da:	2300      	movs	r3, #0
 80054dc:	61bb      	str	r3, [r7, #24]
 80054de:	4b31      	ldr	r3, [pc, #196]	@ (80055a4 <HAL_TIM_Encoder_MspInit+0xec>)
 80054e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80054e2:	4a30      	ldr	r2, [pc, #192]	@ (80055a4 <HAL_TIM_Encoder_MspInit+0xec>)
 80054e4:	f043 0302 	orr.w	r3, r3, #2
 80054e8:	6413      	str	r3, [r2, #64]	@ 0x40
 80054ea:	4b2e      	ldr	r3, [pc, #184]	@ (80055a4 <HAL_TIM_Encoder_MspInit+0xec>)
 80054ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80054ee:	f003 0302 	and.w	r3, r3, #2
 80054f2:	61bb      	str	r3, [r7, #24]
 80054f4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80054f6:	2300      	movs	r3, #0
 80054f8:	617b      	str	r3, [r7, #20]
 80054fa:	4b2a      	ldr	r3, [pc, #168]	@ (80055a4 <HAL_TIM_Encoder_MspInit+0xec>)
 80054fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80054fe:	4a29      	ldr	r2, [pc, #164]	@ (80055a4 <HAL_TIM_Encoder_MspInit+0xec>)
 8005500:	f043 0302 	orr.w	r3, r3, #2
 8005504:	6313      	str	r3, [r2, #48]	@ 0x30
 8005506:	4b27      	ldr	r3, [pc, #156]	@ (80055a4 <HAL_TIM_Encoder_MspInit+0xec>)
 8005508:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800550a:	f003 0302 	and.w	r3, r3, #2
 800550e:	617b      	str	r3, [r7, #20]
 8005510:	697b      	ldr	r3, [r7, #20]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = ENCODER1_INB_Pin|ENCODER1_INA_Pin;
 8005512:	2330      	movs	r3, #48	@ 0x30
 8005514:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005516:	2302      	movs	r3, #2
 8005518:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800551a:	2300      	movs	r3, #0
 800551c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800551e:	2300      	movs	r3, #0
 8005520:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8005522:	2302      	movs	r3, #2
 8005524:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005526:	f107 031c 	add.w	r3, r7, #28
 800552a:	4619      	mov	r1, r3
 800552c:	481e      	ldr	r0, [pc, #120]	@ (80055a8 <HAL_TIM_Encoder_MspInit+0xf0>)
 800552e:	f001 fb99 	bl	8006c64 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8005532:	e030      	b.n	8005596 <HAL_TIM_Encoder_MspInit+0xde>
  else if(tim_encoderHandle->Instance==TIM4)
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	4a1c      	ldr	r2, [pc, #112]	@ (80055ac <HAL_TIM_Encoder_MspInit+0xf4>)
 800553a:	4293      	cmp	r3, r2
 800553c:	d12b      	bne.n	8005596 <HAL_TIM_Encoder_MspInit+0xde>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800553e:	2300      	movs	r3, #0
 8005540:	613b      	str	r3, [r7, #16]
 8005542:	4b18      	ldr	r3, [pc, #96]	@ (80055a4 <HAL_TIM_Encoder_MspInit+0xec>)
 8005544:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005546:	4a17      	ldr	r2, [pc, #92]	@ (80055a4 <HAL_TIM_Encoder_MspInit+0xec>)
 8005548:	f043 0304 	orr.w	r3, r3, #4
 800554c:	6413      	str	r3, [r2, #64]	@ 0x40
 800554e:	4b15      	ldr	r3, [pc, #84]	@ (80055a4 <HAL_TIM_Encoder_MspInit+0xec>)
 8005550:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005552:	f003 0304 	and.w	r3, r3, #4
 8005556:	613b      	str	r3, [r7, #16]
 8005558:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800555a:	2300      	movs	r3, #0
 800555c:	60fb      	str	r3, [r7, #12]
 800555e:	4b11      	ldr	r3, [pc, #68]	@ (80055a4 <HAL_TIM_Encoder_MspInit+0xec>)
 8005560:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005562:	4a10      	ldr	r2, [pc, #64]	@ (80055a4 <HAL_TIM_Encoder_MspInit+0xec>)
 8005564:	f043 0302 	orr.w	r3, r3, #2
 8005568:	6313      	str	r3, [r2, #48]	@ 0x30
 800556a:	4b0e      	ldr	r3, [pc, #56]	@ (80055a4 <HAL_TIM_Encoder_MspInit+0xec>)
 800556c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800556e:	f003 0302 	and.w	r3, r3, #2
 8005572:	60fb      	str	r3, [r7, #12]
 8005574:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ENCODER0_INB_Pin|ENCODER0_INA_Pin;
 8005576:	23c0      	movs	r3, #192	@ 0xc0
 8005578:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800557a:	2302      	movs	r3, #2
 800557c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800557e:	2300      	movs	r3, #0
 8005580:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005582:	2300      	movs	r3, #0
 8005584:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8005586:	2302      	movs	r3, #2
 8005588:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800558a:	f107 031c 	add.w	r3, r7, #28
 800558e:	4619      	mov	r1, r3
 8005590:	4805      	ldr	r0, [pc, #20]	@ (80055a8 <HAL_TIM_Encoder_MspInit+0xf0>)
 8005592:	f001 fb67 	bl	8006c64 <HAL_GPIO_Init>
}
 8005596:	bf00      	nop
 8005598:	3730      	adds	r7, #48	@ 0x30
 800559a:	46bd      	mov	sp, r7
 800559c:	bd80      	pop	{r7, pc}
 800559e:	bf00      	nop
 80055a0:	40000400 	.word	0x40000400
 80055a4:	40023800 	.word	0x40023800
 80055a8:	40020400 	.word	0x40020400
 80055ac:	40000800 	.word	0x40000800

080055b0 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80055b0:	b580      	push	{r7, lr}
 80055b2:	b088      	sub	sp, #32
 80055b4:	af00      	add	r7, sp, #0
 80055b6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80055b8:	f107 030c 	add.w	r3, r7, #12
 80055bc:	2200      	movs	r2, #0
 80055be:	601a      	str	r2, [r3, #0]
 80055c0:	605a      	str	r2, [r3, #4]
 80055c2:	609a      	str	r2, [r3, #8]
 80055c4:	60da      	str	r2, [r3, #12]
 80055c6:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	4a12      	ldr	r2, [pc, #72]	@ (8005618 <HAL_TIM_MspPostInit+0x68>)
 80055ce:	4293      	cmp	r3, r2
 80055d0:	d11e      	bne.n	8005610 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80055d2:	2300      	movs	r3, #0
 80055d4:	60bb      	str	r3, [r7, #8]
 80055d6:	4b11      	ldr	r3, [pc, #68]	@ (800561c <HAL_TIM_MspPostInit+0x6c>)
 80055d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80055da:	4a10      	ldr	r2, [pc, #64]	@ (800561c <HAL_TIM_MspPostInit+0x6c>)
 80055dc:	f043 0301 	orr.w	r3, r3, #1
 80055e0:	6313      	str	r3, [r2, #48]	@ 0x30
 80055e2:	4b0e      	ldr	r3, [pc, #56]	@ (800561c <HAL_TIM_MspPostInit+0x6c>)
 80055e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80055e6:	f003 0301 	and.w	r3, r3, #1
 80055ea:	60bb      	str	r3, [r7, #8]
 80055ec:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80055ee:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80055f2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80055f4:	2302      	movs	r3, #2
 80055f6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80055f8:	2300      	movs	r3, #0
 80055fa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80055fc:	2300      	movs	r3, #0
 80055fe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8005600:	2301      	movs	r3, #1
 8005602:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005604:	f107 030c 	add.w	r3, r7, #12
 8005608:	4619      	mov	r1, r3
 800560a:	4805      	ldr	r0, [pc, #20]	@ (8005620 <HAL_TIM_MspPostInit+0x70>)
 800560c:	f001 fb2a 	bl	8006c64 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8005610:	bf00      	nop
 8005612:	3720      	adds	r7, #32
 8005614:	46bd      	mov	sp, r7
 8005616:	bd80      	pop	{r7, pc}
 8005618:	40010000 	.word	0x40010000
 800561c:	40023800 	.word	0x40023800
 8005620:	40020000 	.word	0x40020000

08005624 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart6;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8005624:	b580      	push	{r7, lr}
 8005626:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8005628:	4b11      	ldr	r3, [pc, #68]	@ (8005670 <MX_USART2_UART_Init+0x4c>)
 800562a:	4a12      	ldr	r2, [pc, #72]	@ (8005674 <MX_USART2_UART_Init+0x50>)
 800562c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800562e:	4b10      	ldr	r3, [pc, #64]	@ (8005670 <MX_USART2_UART_Init+0x4c>)
 8005630:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8005634:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8005636:	4b0e      	ldr	r3, [pc, #56]	@ (8005670 <MX_USART2_UART_Init+0x4c>)
 8005638:	2200      	movs	r2, #0
 800563a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800563c:	4b0c      	ldr	r3, [pc, #48]	@ (8005670 <MX_USART2_UART_Init+0x4c>)
 800563e:	2200      	movs	r2, #0
 8005640:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8005642:	4b0b      	ldr	r3, [pc, #44]	@ (8005670 <MX_USART2_UART_Init+0x4c>)
 8005644:	2200      	movs	r2, #0
 8005646:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8005648:	4b09      	ldr	r3, [pc, #36]	@ (8005670 <MX_USART2_UART_Init+0x4c>)
 800564a:	220c      	movs	r2, #12
 800564c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800564e:	4b08      	ldr	r3, [pc, #32]	@ (8005670 <MX_USART2_UART_Init+0x4c>)
 8005650:	2200      	movs	r2, #0
 8005652:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8005654:	4b06      	ldr	r3, [pc, #24]	@ (8005670 <MX_USART2_UART_Init+0x4c>)
 8005656:	2200      	movs	r2, #0
 8005658:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800565a:	4805      	ldr	r0, [pc, #20]	@ (8005670 <MX_USART2_UART_Init+0x4c>)
 800565c:	f004 fdac 	bl	800a1b8 <HAL_UART_Init>
 8005660:	4603      	mov	r3, r0
 8005662:	2b00      	cmp	r3, #0
 8005664:	d001      	beq.n	800566a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8005666:	f7fd fb59 	bl	8002d1c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800566a:	bf00      	nop
 800566c:	bd80      	pop	{r7, pc}
 800566e:	bf00      	nop
 8005670:	20016110 	.word	0x20016110
 8005674:	40004400 	.word	0x40004400

08005678 <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 8005678:	b580      	push	{r7, lr}
 800567a:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 800567c:	4b11      	ldr	r3, [pc, #68]	@ (80056c4 <MX_USART6_UART_Init+0x4c>)
 800567e:	4a12      	ldr	r2, [pc, #72]	@ (80056c8 <MX_USART6_UART_Init+0x50>)
 8005680:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8005682:	4b10      	ldr	r3, [pc, #64]	@ (80056c4 <MX_USART6_UART_Init+0x4c>)
 8005684:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8005688:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800568a:	4b0e      	ldr	r3, [pc, #56]	@ (80056c4 <MX_USART6_UART_Init+0x4c>)
 800568c:	2200      	movs	r2, #0
 800568e:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8005690:	4b0c      	ldr	r3, [pc, #48]	@ (80056c4 <MX_USART6_UART_Init+0x4c>)
 8005692:	2200      	movs	r2, #0
 8005694:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8005696:	4b0b      	ldr	r3, [pc, #44]	@ (80056c4 <MX_USART6_UART_Init+0x4c>)
 8005698:	2200      	movs	r2, #0
 800569a:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 800569c:	4b09      	ldr	r3, [pc, #36]	@ (80056c4 <MX_USART6_UART_Init+0x4c>)
 800569e:	220c      	movs	r2, #12
 80056a0:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80056a2:	4b08      	ldr	r3, [pc, #32]	@ (80056c4 <MX_USART6_UART_Init+0x4c>)
 80056a4:	2200      	movs	r2, #0
 80056a6:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80056a8:	4b06      	ldr	r3, [pc, #24]	@ (80056c4 <MX_USART6_UART_Init+0x4c>)
 80056aa:	2200      	movs	r2, #0
 80056ac:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80056ae:	4805      	ldr	r0, [pc, #20]	@ (80056c4 <MX_USART6_UART_Init+0x4c>)
 80056b0:	f004 fd82 	bl	800a1b8 <HAL_UART_Init>
 80056b4:	4603      	mov	r3, r0
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d001      	beq.n	80056be <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 80056ba:	f7fd fb2f 	bl	8002d1c <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 80056be:	bf00      	nop
 80056c0:	bd80      	pop	{r7, pc}
 80056c2:	bf00      	nop
 80056c4:	20016158 	.word	0x20016158
 80056c8:	40011400 	.word	0x40011400

080056cc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80056cc:	b580      	push	{r7, lr}
 80056ce:	b08c      	sub	sp, #48	@ 0x30
 80056d0:	af00      	add	r7, sp, #0
 80056d2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80056d4:	f107 031c 	add.w	r3, r7, #28
 80056d8:	2200      	movs	r2, #0
 80056da:	601a      	str	r2, [r3, #0]
 80056dc:	605a      	str	r2, [r3, #4]
 80056de:	609a      	str	r2, [r3, #8]
 80056e0:	60da      	str	r2, [r3, #12]
 80056e2:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	4a36      	ldr	r2, [pc, #216]	@ (80057c4 <HAL_UART_MspInit+0xf8>)
 80056ea:	4293      	cmp	r3, r2
 80056ec:	d12c      	bne.n	8005748 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80056ee:	2300      	movs	r3, #0
 80056f0:	61bb      	str	r3, [r7, #24]
 80056f2:	4b35      	ldr	r3, [pc, #212]	@ (80057c8 <HAL_UART_MspInit+0xfc>)
 80056f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80056f6:	4a34      	ldr	r2, [pc, #208]	@ (80057c8 <HAL_UART_MspInit+0xfc>)
 80056f8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80056fc:	6413      	str	r3, [r2, #64]	@ 0x40
 80056fe:	4b32      	ldr	r3, [pc, #200]	@ (80057c8 <HAL_UART_MspInit+0xfc>)
 8005700:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005702:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005706:	61bb      	str	r3, [r7, #24]
 8005708:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800570a:	2300      	movs	r3, #0
 800570c:	617b      	str	r3, [r7, #20]
 800570e:	4b2e      	ldr	r3, [pc, #184]	@ (80057c8 <HAL_UART_MspInit+0xfc>)
 8005710:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005712:	4a2d      	ldr	r2, [pc, #180]	@ (80057c8 <HAL_UART_MspInit+0xfc>)
 8005714:	f043 0301 	orr.w	r3, r3, #1
 8005718:	6313      	str	r3, [r2, #48]	@ 0x30
 800571a:	4b2b      	ldr	r3, [pc, #172]	@ (80057c8 <HAL_UART_MspInit+0xfc>)
 800571c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800571e:	f003 0301 	and.w	r3, r3, #1
 8005722:	617b      	str	r3, [r7, #20]
 8005724:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8005726:	230c      	movs	r3, #12
 8005728:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800572a:	2302      	movs	r3, #2
 800572c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800572e:	2300      	movs	r3, #0
 8005730:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005732:	2303      	movs	r3, #3
 8005734:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8005736:	2307      	movs	r3, #7
 8005738:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800573a:	f107 031c 	add.w	r3, r7, #28
 800573e:	4619      	mov	r1, r3
 8005740:	4822      	ldr	r0, [pc, #136]	@ (80057cc <HAL_UART_MspInit+0x100>)
 8005742:	f001 fa8f 	bl	8006c64 <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 8005746:	e038      	b.n	80057ba <HAL_UART_MspInit+0xee>
  else if(uartHandle->Instance==USART6)
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	4a20      	ldr	r2, [pc, #128]	@ (80057d0 <HAL_UART_MspInit+0x104>)
 800574e:	4293      	cmp	r3, r2
 8005750:	d133      	bne.n	80057ba <HAL_UART_MspInit+0xee>
    __HAL_RCC_USART6_CLK_ENABLE();
 8005752:	2300      	movs	r3, #0
 8005754:	613b      	str	r3, [r7, #16]
 8005756:	4b1c      	ldr	r3, [pc, #112]	@ (80057c8 <HAL_UART_MspInit+0xfc>)
 8005758:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800575a:	4a1b      	ldr	r2, [pc, #108]	@ (80057c8 <HAL_UART_MspInit+0xfc>)
 800575c:	f043 0320 	orr.w	r3, r3, #32
 8005760:	6453      	str	r3, [r2, #68]	@ 0x44
 8005762:	4b19      	ldr	r3, [pc, #100]	@ (80057c8 <HAL_UART_MspInit+0xfc>)
 8005764:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005766:	f003 0320 	and.w	r3, r3, #32
 800576a:	613b      	str	r3, [r7, #16]
 800576c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800576e:	2300      	movs	r3, #0
 8005770:	60fb      	str	r3, [r7, #12]
 8005772:	4b15      	ldr	r3, [pc, #84]	@ (80057c8 <HAL_UART_MspInit+0xfc>)
 8005774:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005776:	4a14      	ldr	r2, [pc, #80]	@ (80057c8 <HAL_UART_MspInit+0xfc>)
 8005778:	f043 0304 	orr.w	r3, r3, #4
 800577c:	6313      	str	r3, [r2, #48]	@ 0x30
 800577e:	4b12      	ldr	r3, [pc, #72]	@ (80057c8 <HAL_UART_MspInit+0xfc>)
 8005780:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005782:	f003 0304 	and.w	r3, r3, #4
 8005786:	60fb      	str	r3, [r7, #12]
 8005788:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800578a:	23c0      	movs	r3, #192	@ 0xc0
 800578c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800578e:	2302      	movs	r3, #2
 8005790:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005792:	2300      	movs	r3, #0
 8005794:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005796:	2303      	movs	r3, #3
 8005798:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 800579a:	2308      	movs	r3, #8
 800579c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800579e:	f107 031c 	add.w	r3, r7, #28
 80057a2:	4619      	mov	r1, r3
 80057a4:	480b      	ldr	r0, [pc, #44]	@ (80057d4 <HAL_UART_MspInit+0x108>)
 80057a6:	f001 fa5d 	bl	8006c64 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 80057aa:	2200      	movs	r2, #0
 80057ac:	2100      	movs	r1, #0
 80057ae:	2047      	movs	r0, #71	@ 0x47
 80057b0:	f000 fe03 	bl	80063ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 80057b4:	2047      	movs	r0, #71	@ 0x47
 80057b6:	f000 fe1c 	bl	80063f2 <HAL_NVIC_EnableIRQ>
}
 80057ba:	bf00      	nop
 80057bc:	3730      	adds	r7, #48	@ 0x30
 80057be:	46bd      	mov	sp, r7
 80057c0:	bd80      	pop	{r7, pc}
 80057c2:	bf00      	nop
 80057c4:	40004400 	.word	0x40004400
 80057c8:	40023800 	.word	0x40023800
 80057cc:	40020000 	.word	0x40020000
 80057d0:	40011400 	.word	0x40011400
 80057d4:	40020800 	.word	0x40020800

080057d8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80057d8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8005810 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80057dc:	f7ff fc3e 	bl	800505c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80057e0:	480c      	ldr	r0, [pc, #48]	@ (8005814 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80057e2:	490d      	ldr	r1, [pc, #52]	@ (8005818 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80057e4:	4a0d      	ldr	r2, [pc, #52]	@ (800581c <LoopFillZerobss+0x1a>)
  movs r3, #0
 80057e6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80057e8:	e002      	b.n	80057f0 <LoopCopyDataInit>

080057ea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80057ea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80057ec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80057ee:	3304      	adds	r3, #4

080057f0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80057f0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80057f2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80057f4:	d3f9      	bcc.n	80057ea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80057f6:	4a0a      	ldr	r2, [pc, #40]	@ (8005820 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80057f8:	4c0a      	ldr	r4, [pc, #40]	@ (8005824 <LoopFillZerobss+0x22>)
  movs r3, #0
 80057fa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80057fc:	e001      	b.n	8005802 <LoopFillZerobss>

080057fe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80057fe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005800:	3204      	adds	r2, #4

08005802 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8005802:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005804:	d3fb      	bcc.n	80057fe <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8005806:	f00a fead 	bl	8010564 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800580a:	f7fd f89d 	bl	8002948 <main>
  bx  lr    
 800580e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8005810:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8005814:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005818:	2000d2fc 	.word	0x2000d2fc
  ldr r2, =_sidata
 800581c:	08015bb4 	.word	0x08015bb4
  ldr r2, =_sbss
 8005820:	2000d2fc 	.word	0x2000d2fc
  ldr r4, =_ebss
 8005824:	20016534 	.word	0x20016534

08005828 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8005828:	e7fe      	b.n	8005828 <ADC_IRQHandler>
	...

0800582c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800582c:	b580      	push	{r7, lr}
 800582e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8005830:	4b0e      	ldr	r3, [pc, #56]	@ (800586c <HAL_Init+0x40>)
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	4a0d      	ldr	r2, [pc, #52]	@ (800586c <HAL_Init+0x40>)
 8005836:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800583a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800583c:	4b0b      	ldr	r3, [pc, #44]	@ (800586c <HAL_Init+0x40>)
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	4a0a      	ldr	r2, [pc, #40]	@ (800586c <HAL_Init+0x40>)
 8005842:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8005846:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005848:	4b08      	ldr	r3, [pc, #32]	@ (800586c <HAL_Init+0x40>)
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	4a07      	ldr	r2, [pc, #28]	@ (800586c <HAL_Init+0x40>)
 800584e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005852:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005854:	2003      	movs	r0, #3
 8005856:	f000 fda5 	bl	80063a4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800585a:	2000      	movs	r0, #0
 800585c:	f000 f808 	bl	8005870 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8005860:	f7ff fb18 	bl	8004e94 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8005864:	2300      	movs	r3, #0
}
 8005866:	4618      	mov	r0, r3
 8005868:	bd80      	pop	{r7, pc}
 800586a:	bf00      	nop
 800586c:	40023c00 	.word	0x40023c00

08005870 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005870:	b580      	push	{r7, lr}
 8005872:	b082      	sub	sp, #8
 8005874:	af00      	add	r7, sp, #0
 8005876:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8005878:	4b12      	ldr	r3, [pc, #72]	@ (80058c4 <HAL_InitTick+0x54>)
 800587a:	681a      	ldr	r2, [r3, #0]
 800587c:	4b12      	ldr	r3, [pc, #72]	@ (80058c8 <HAL_InitTick+0x58>)
 800587e:	781b      	ldrb	r3, [r3, #0]
 8005880:	4619      	mov	r1, r3
 8005882:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8005886:	fbb3 f3f1 	udiv	r3, r3, r1
 800588a:	fbb2 f3f3 	udiv	r3, r2, r3
 800588e:	4618      	mov	r0, r3
 8005890:	f000 fdbd 	bl	800640e <HAL_SYSTICK_Config>
 8005894:	4603      	mov	r3, r0
 8005896:	2b00      	cmp	r3, #0
 8005898:	d001      	beq.n	800589e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800589a:	2301      	movs	r3, #1
 800589c:	e00e      	b.n	80058bc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	2b0f      	cmp	r3, #15
 80058a2:	d80a      	bhi.n	80058ba <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80058a4:	2200      	movs	r2, #0
 80058a6:	6879      	ldr	r1, [r7, #4]
 80058a8:	f04f 30ff 	mov.w	r0, #4294967295
 80058ac:	f000 fd85 	bl	80063ba <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80058b0:	4a06      	ldr	r2, [pc, #24]	@ (80058cc <HAL_InitTick+0x5c>)
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80058b6:	2300      	movs	r3, #0
 80058b8:	e000      	b.n	80058bc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80058ba:	2301      	movs	r3, #1
}
 80058bc:	4618      	mov	r0, r3
 80058be:	3708      	adds	r7, #8
 80058c0:	46bd      	mov	sp, r7
 80058c2:	bd80      	pop	{r7, pc}
 80058c4:	2000d114 	.word	0x2000d114
 80058c8:	2000d11c 	.word	0x2000d11c
 80058cc:	2000d118 	.word	0x2000d118

080058d0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80058d0:	b480      	push	{r7}
 80058d2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80058d4:	4b06      	ldr	r3, [pc, #24]	@ (80058f0 <HAL_IncTick+0x20>)
 80058d6:	781b      	ldrb	r3, [r3, #0]
 80058d8:	461a      	mov	r2, r3
 80058da:	4b06      	ldr	r3, [pc, #24]	@ (80058f4 <HAL_IncTick+0x24>)
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	4413      	add	r3, r2
 80058e0:	4a04      	ldr	r2, [pc, #16]	@ (80058f4 <HAL_IncTick+0x24>)
 80058e2:	6013      	str	r3, [r2, #0]
}
 80058e4:	bf00      	nop
 80058e6:	46bd      	mov	sp, r7
 80058e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ec:	4770      	bx	lr
 80058ee:	bf00      	nop
 80058f0:	2000d11c 	.word	0x2000d11c
 80058f4:	200161a0 	.word	0x200161a0

080058f8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80058f8:	b480      	push	{r7}
 80058fa:	af00      	add	r7, sp, #0
  return uwTick;
 80058fc:	4b03      	ldr	r3, [pc, #12]	@ (800590c <HAL_GetTick+0x14>)
 80058fe:	681b      	ldr	r3, [r3, #0]
}
 8005900:	4618      	mov	r0, r3
 8005902:	46bd      	mov	sp, r7
 8005904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005908:	4770      	bx	lr
 800590a:	bf00      	nop
 800590c:	200161a0 	.word	0x200161a0

08005910 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005910:	b580      	push	{r7, lr}
 8005912:	b084      	sub	sp, #16
 8005914:	af00      	add	r7, sp, #0
 8005916:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005918:	f7ff ffee 	bl	80058f8 <HAL_GetTick>
 800591c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005928:	d005      	beq.n	8005936 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800592a:	4b0a      	ldr	r3, [pc, #40]	@ (8005954 <HAL_Delay+0x44>)
 800592c:	781b      	ldrb	r3, [r3, #0]
 800592e:	461a      	mov	r2, r3
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	4413      	add	r3, r2
 8005934:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8005936:	bf00      	nop
 8005938:	f7ff ffde 	bl	80058f8 <HAL_GetTick>
 800593c:	4602      	mov	r2, r0
 800593e:	68bb      	ldr	r3, [r7, #8]
 8005940:	1ad3      	subs	r3, r2, r3
 8005942:	68fa      	ldr	r2, [r7, #12]
 8005944:	429a      	cmp	r2, r3
 8005946:	d8f7      	bhi.n	8005938 <HAL_Delay+0x28>
  {
  }
}
 8005948:	bf00      	nop
 800594a:	bf00      	nop
 800594c:	3710      	adds	r7, #16
 800594e:	46bd      	mov	sp, r7
 8005950:	bd80      	pop	{r7, pc}
 8005952:	bf00      	nop
 8005954:	2000d11c 	.word	0x2000d11c

08005958 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8005958:	b580      	push	{r7, lr}
 800595a:	b084      	sub	sp, #16
 800595c:	af00      	add	r7, sp, #0
 800595e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005960:	2300      	movs	r3, #0
 8005962:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	2b00      	cmp	r3, #0
 8005968:	d101      	bne.n	800596e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800596a:	2301      	movs	r3, #1
 800596c:	e033      	b.n	80059d6 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005972:	2b00      	cmp	r3, #0
 8005974:	d109      	bne.n	800598a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8005976:	6878      	ldr	r0, [r7, #4]
 8005978:	f7fb fc7c 	bl	8001274 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	2200      	movs	r2, #0
 8005980:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	2200      	movs	r2, #0
 8005986:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800598e:	f003 0310 	and.w	r3, r3, #16
 8005992:	2b00      	cmp	r3, #0
 8005994:	d118      	bne.n	80059c8 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800599a:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800599e:	f023 0302 	bic.w	r3, r3, #2
 80059a2:	f043 0202 	orr.w	r2, r3, #2
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 80059aa:	6878      	ldr	r0, [r7, #4]
 80059ac:	f000 faac 	bl	8005f08 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	2200      	movs	r2, #0
 80059b4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80059ba:	f023 0303 	bic.w	r3, r3, #3
 80059be:	f043 0201 	orr.w	r2, r3, #1
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	641a      	str	r2, [r3, #64]	@ 0x40
 80059c6:	e001      	b.n	80059cc <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80059c8:	2301      	movs	r3, #1
 80059ca:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	2200      	movs	r2, #0
 80059d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 80059d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80059d6:	4618      	mov	r0, r3
 80059d8:	3710      	adds	r7, #16
 80059da:	46bd      	mov	sp, r7
 80059dc:	bd80      	pop	{r7, pc}
	...

080059e0 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80059e0:	b580      	push	{r7, lr}
 80059e2:	b088      	sub	sp, #32
 80059e4:	af00      	add	r7, sp, #0
 80059e6:	60f8      	str	r0, [r7, #12]
 80059e8:	60b9      	str	r1, [r7, #8]
 80059ea:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 80059ec:	2300      	movs	r3, #0
 80059ee:	617b      	str	r3, [r7, #20]
  ADC_Common_TypeDef *tmpADC_Common;
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80059f0:	2300      	movs	r3, #0
 80059f2:	77fb      	strb	r3, [r7, #31]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80059fa:	2b01      	cmp	r3, #1
 80059fc:	d101      	bne.n	8005a02 <HAL_ADC_Start_DMA+0x22>
 80059fe:	2302      	movs	r3, #2
 8005a00:	e0d0      	b.n	8005ba4 <HAL_ADC_Start_DMA+0x1c4>
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	2201      	movs	r2, #1
 8005a06:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	689b      	ldr	r3, [r3, #8]
 8005a10:	f003 0301 	and.w	r3, r3, #1
 8005a14:	2b01      	cmp	r3, #1
 8005a16:	d018      	beq.n	8005a4a <HAL_ADC_Start_DMA+0x6a>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	689a      	ldr	r2, [r3, #8]
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	f042 0201 	orr.w	r2, r2, #1
 8005a26:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8005a28:	4b60      	ldr	r3, [pc, #384]	@ (8005bac <HAL_ADC_Start_DMA+0x1cc>)
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	4a60      	ldr	r2, [pc, #384]	@ (8005bb0 <HAL_ADC_Start_DMA+0x1d0>)
 8005a2e:	fba2 2303 	umull	r2, r3, r2, r3
 8005a32:	0c9a      	lsrs	r2, r3, #18
 8005a34:	4613      	mov	r3, r2
 8005a36:	005b      	lsls	r3, r3, #1
 8005a38:	4413      	add	r3, r2
 8005a3a:	617b      	str	r3, [r7, #20]
    while (counter != 0U)
 8005a3c:	e002      	b.n	8005a44 <HAL_ADC_Start_DMA+0x64>
    {
      counter--;
 8005a3e:	697b      	ldr	r3, [r7, #20]
 8005a40:	3b01      	subs	r3, #1
 8005a42:	617b      	str	r3, [r7, #20]
    while (counter != 0U)
 8005a44:	697b      	ldr	r3, [r7, #20]
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d1f9      	bne.n	8005a3e <HAL_ADC_Start_DMA+0x5e>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	689b      	ldr	r3, [r3, #8]
 8005a50:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005a54:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005a58:	d107      	bne.n	8005a6a <HAL_ADC_Start_DMA+0x8a>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	689a      	ldr	r2, [r3, #8]
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005a68:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	689b      	ldr	r3, [r3, #8]
 8005a70:	f003 0301 	and.w	r3, r3, #1
 8005a74:	2b01      	cmp	r3, #1
 8005a76:	f040 8088 	bne.w	8005b8a <HAL_ADC_Start_DMA+0x1aa>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a7e:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8005a82:	f023 0301 	bic.w	r3, r3, #1
 8005a86:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	685b      	ldr	r3, [r3, #4]
 8005a94:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d007      	beq.n	8005aac <HAL_ADC_Start_DMA+0xcc>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005aa0:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8005aa4:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ab0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005ab4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005ab8:	d106      	bne.n	8005ac8 <HAL_ADC_Start_DMA+0xe8>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005abe:	f023 0206 	bic.w	r2, r3, #6
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	645a      	str	r2, [r3, #68]	@ 0x44
 8005ac6:	e002      	b.n	8005ace <HAL_ADC_Start_DMA+0xee>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	2200      	movs	r2, #0
 8005acc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	2200      	movs	r2, #0
 8005ad2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005ad6:	4b37      	ldr	r3, [pc, #220]	@ (8005bb4 <HAL_ADC_Start_DMA+0x1d4>)
 8005ad8:	61bb      	str	r3, [r7, #24]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ade:	4a36      	ldr	r2, [pc, #216]	@ (8005bb8 <HAL_ADC_Start_DMA+0x1d8>)
 8005ae0:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ae6:	4a35      	ldr	r2, [pc, #212]	@ (8005bbc <HAL_ADC_Start_DMA+0x1dc>)
 8005ae8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005aee:	4a34      	ldr	r2, [pc, #208]	@ (8005bc0 <HAL_ADC_Start_DMA+0x1e0>)
 8005af0:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8005afa:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	685a      	ldr	r2, [r3, #4]
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 8005b0a:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	689a      	ldr	r2, [r3, #8]
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005b1a:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	334c      	adds	r3, #76	@ 0x4c
 8005b26:	4619      	mov	r1, r3
 8005b28:	68ba      	ldr	r2, [r7, #8]
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	f000 fd46 	bl	80065bc <HAL_DMA_Start_IT>
 8005b30:	4603      	mov	r3, r0
 8005b32:	77fb      	strb	r3, [r7, #31]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8005b34:	69bb      	ldr	r3, [r7, #24]
 8005b36:	685b      	ldr	r3, [r3, #4]
 8005b38:	f003 031f 	and.w	r3, r3, #31
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d10f      	bne.n	8005b60 <HAL_ADC_Start_DMA+0x180>
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	689b      	ldr	r3, [r3, #8]
 8005b46:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d129      	bne.n	8005ba2 <HAL_ADC_Start_DMA+0x1c2>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	689a      	ldr	r2, [r3, #8]
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8005b5c:	609a      	str	r2, [r3, #8]
 8005b5e:	e020      	b.n	8005ba2 <HAL_ADC_Start_DMA+0x1c2>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	4a17      	ldr	r2, [pc, #92]	@ (8005bc4 <HAL_ADC_Start_DMA+0x1e4>)
 8005b66:	4293      	cmp	r3, r2
 8005b68:	d11b      	bne.n	8005ba2 <HAL_ADC_Start_DMA+0x1c2>
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	689b      	ldr	r3, [r3, #8]
 8005b70:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d114      	bne.n	8005ba2 <HAL_ADC_Start_DMA+0x1c2>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	689a      	ldr	r2, [r3, #8]
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8005b86:	609a      	str	r2, [r3, #8]
 8005b88:	e00b      	b.n	8005ba2 <HAL_ADC_Start_DMA+0x1c2>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b8e:	f043 0210 	orr.w	r2, r3, #16
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005b9a:	f043 0201 	orr.w	r2, r3, #1
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return tmp_hal_status;
 8005ba2:	7ffb      	ldrb	r3, [r7, #31]
}
 8005ba4:	4618      	mov	r0, r3
 8005ba6:	3720      	adds	r7, #32
 8005ba8:	46bd      	mov	sp, r7
 8005baa:	bd80      	pop	{r7, pc}
 8005bac:	2000d114 	.word	0x2000d114
 8005bb0:	431bde83 	.word	0x431bde83
 8005bb4:	40012300 	.word	0x40012300
 8005bb8:	08006101 	.word	0x08006101
 8005bbc:	080061bb 	.word	0x080061bb
 8005bc0:	080061d7 	.word	0x080061d7
 8005bc4:	40012000 	.word	0x40012000

08005bc8 <HAL_ADC_Stop_DMA>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef *hadc)
{
 8005bc8:	b580      	push	{r7, lr}
 8005bca:	b084      	sub	sp, #16
 8005bcc:	af00      	add	r7, sp, #0
 8005bce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005bd0:	2300      	movs	r3, #0
 8005bd2:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005bda:	2b01      	cmp	r3, #1
 8005bdc:	d101      	bne.n	8005be2 <HAL_ADC_Stop_DMA+0x1a>
 8005bde:	2302      	movs	r3, #2
 8005be0:	e048      	b.n	8005c74 <HAL_ADC_Stop_DMA+0xac>
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	2201      	movs	r2, #1
 8005be6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	689a      	ldr	r2, [r3, #8]
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	f022 0201 	bic.w	r2, r2, #1
 8005bf8:	609a      	str	r2, [r3, #8]

  /* Check if ADC is effectively disabled */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	689b      	ldr	r3, [r3, #8]
 8005c00:	f003 0301 	and.w	r3, r3, #1
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d130      	bne.n	8005c6a <HAL_ADC_Stop_DMA+0xa2>
  {
    /* Disable the selected ADC DMA mode */
    hadc->Instance->CR2 &= ~ADC_CR2_DMA;
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	689a      	ldr	r2, [r3, #8]
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005c16:	609a      	str	r2, [r3, #8]

    /* Disable the DMA channel (in case of DMA in circular mode or stop while */
    /* DMA transfer is on going)                                              */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c1c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005c20:	b2db      	uxtb	r3, r3
 8005c22:	2b02      	cmp	r3, #2
 8005c24:	d10f      	bne.n	8005c46 <HAL_ADC_Stop_DMA+0x7e>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c2a:	4618      	mov	r0, r3
 8005c2c:	f000 fd1e 	bl	800666c <HAL_DMA_Abort>
 8005c30:	4603      	mov	r3, r0
 8005c32:	73fb      	strb	r3, [r7, #15]

      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 8005c34:	7bfb      	ldrb	r3, [r7, #15]
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d005      	beq.n	8005c46 <HAL_ADC_Stop_DMA+0x7e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c3e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	641a      	str	r2, [r3, #64]	@ 0x40
      }
    }

    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	685a      	ldr	r2, [r3, #4]
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	f022 6280 	bic.w	r2, r2, #67108864	@ 0x4000000
 8005c54:	605a      	str	r2, [r3, #4]

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c5a:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8005c5e:	f023 0301 	bic.w	r3, r3, #1
 8005c62:	f043 0201 	orr.w	r2, r3, #1
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	2200      	movs	r2, #0
 8005c6e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8005c72:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c74:	4618      	mov	r0, r3
 8005c76:	3710      	adds	r7, #16
 8005c78:	46bd      	mov	sp, r7
 8005c7a:	bd80      	pop	{r7, pc}

08005c7c <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8005c7c:	b480      	push	{r7}
 8005c7e:	b083      	sub	sp, #12
 8005c80:	af00      	add	r7, sp, #0
 8005c82:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8005c84:	bf00      	nop
 8005c86:	370c      	adds	r7, #12
 8005c88:	46bd      	mov	sp, r7
 8005c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c8e:	4770      	bx	lr

08005c90 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8005c90:	b480      	push	{r7}
 8005c92:	b083      	sub	sp, #12
 8005c94:	af00      	add	r7, sp, #0
 8005c96:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8005c98:	bf00      	nop
 8005c9a:	370c      	adds	r7, #12
 8005c9c:	46bd      	mov	sp, r7
 8005c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca2:	4770      	bx	lr

08005ca4 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8005ca4:	b480      	push	{r7}
 8005ca6:	b085      	sub	sp, #20
 8005ca8:	af00      	add	r7, sp, #0
 8005caa:	6078      	str	r0, [r7, #4]
 8005cac:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8005cae:	2300      	movs	r3, #0
 8005cb0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005cb8:	2b01      	cmp	r3, #1
 8005cba:	d101      	bne.n	8005cc0 <HAL_ADC_ConfigChannel+0x1c>
 8005cbc:	2302      	movs	r3, #2
 8005cbe:	e113      	b.n	8005ee8 <HAL_ADC_ConfigChannel+0x244>
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	2201      	movs	r2, #1
 8005cc4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8005cc8:	683b      	ldr	r3, [r7, #0]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	2b09      	cmp	r3, #9
 8005cce:	d925      	bls.n	8005d1c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	68d9      	ldr	r1, [r3, #12]
 8005cd6:	683b      	ldr	r3, [r7, #0]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	b29b      	uxth	r3, r3
 8005cdc:	461a      	mov	r2, r3
 8005cde:	4613      	mov	r3, r2
 8005ce0:	005b      	lsls	r3, r3, #1
 8005ce2:	4413      	add	r3, r2
 8005ce4:	3b1e      	subs	r3, #30
 8005ce6:	2207      	movs	r2, #7
 8005ce8:	fa02 f303 	lsl.w	r3, r2, r3
 8005cec:	43da      	mvns	r2, r3
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	400a      	ands	r2, r1
 8005cf4:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	68d9      	ldr	r1, [r3, #12]
 8005cfc:	683b      	ldr	r3, [r7, #0]
 8005cfe:	689a      	ldr	r2, [r3, #8]
 8005d00:	683b      	ldr	r3, [r7, #0]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	b29b      	uxth	r3, r3
 8005d06:	4618      	mov	r0, r3
 8005d08:	4603      	mov	r3, r0
 8005d0a:	005b      	lsls	r3, r3, #1
 8005d0c:	4403      	add	r3, r0
 8005d0e:	3b1e      	subs	r3, #30
 8005d10:	409a      	lsls	r2, r3
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	430a      	orrs	r2, r1
 8005d18:	60da      	str	r2, [r3, #12]
 8005d1a:	e022      	b.n	8005d62 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	6919      	ldr	r1, [r3, #16]
 8005d22:	683b      	ldr	r3, [r7, #0]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	b29b      	uxth	r3, r3
 8005d28:	461a      	mov	r2, r3
 8005d2a:	4613      	mov	r3, r2
 8005d2c:	005b      	lsls	r3, r3, #1
 8005d2e:	4413      	add	r3, r2
 8005d30:	2207      	movs	r2, #7
 8005d32:	fa02 f303 	lsl.w	r3, r2, r3
 8005d36:	43da      	mvns	r2, r3
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	400a      	ands	r2, r1
 8005d3e:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	6919      	ldr	r1, [r3, #16]
 8005d46:	683b      	ldr	r3, [r7, #0]
 8005d48:	689a      	ldr	r2, [r3, #8]
 8005d4a:	683b      	ldr	r3, [r7, #0]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	b29b      	uxth	r3, r3
 8005d50:	4618      	mov	r0, r3
 8005d52:	4603      	mov	r3, r0
 8005d54:	005b      	lsls	r3, r3, #1
 8005d56:	4403      	add	r3, r0
 8005d58:	409a      	lsls	r2, r3
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	430a      	orrs	r2, r1
 8005d60:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8005d62:	683b      	ldr	r3, [r7, #0]
 8005d64:	685b      	ldr	r3, [r3, #4]
 8005d66:	2b06      	cmp	r3, #6
 8005d68:	d824      	bhi.n	8005db4 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8005d70:	683b      	ldr	r3, [r7, #0]
 8005d72:	685a      	ldr	r2, [r3, #4]
 8005d74:	4613      	mov	r3, r2
 8005d76:	009b      	lsls	r3, r3, #2
 8005d78:	4413      	add	r3, r2
 8005d7a:	3b05      	subs	r3, #5
 8005d7c:	221f      	movs	r2, #31
 8005d7e:	fa02 f303 	lsl.w	r3, r2, r3
 8005d82:	43da      	mvns	r2, r3
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	400a      	ands	r2, r1
 8005d8a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8005d92:	683b      	ldr	r3, [r7, #0]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	b29b      	uxth	r3, r3
 8005d98:	4618      	mov	r0, r3
 8005d9a:	683b      	ldr	r3, [r7, #0]
 8005d9c:	685a      	ldr	r2, [r3, #4]
 8005d9e:	4613      	mov	r3, r2
 8005da0:	009b      	lsls	r3, r3, #2
 8005da2:	4413      	add	r3, r2
 8005da4:	3b05      	subs	r3, #5
 8005da6:	fa00 f203 	lsl.w	r2, r0, r3
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	430a      	orrs	r2, r1
 8005db0:	635a      	str	r2, [r3, #52]	@ 0x34
 8005db2:	e04c      	b.n	8005e4e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8005db4:	683b      	ldr	r3, [r7, #0]
 8005db6:	685b      	ldr	r3, [r3, #4]
 8005db8:	2b0c      	cmp	r3, #12
 8005dba:	d824      	bhi.n	8005e06 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8005dc2:	683b      	ldr	r3, [r7, #0]
 8005dc4:	685a      	ldr	r2, [r3, #4]
 8005dc6:	4613      	mov	r3, r2
 8005dc8:	009b      	lsls	r3, r3, #2
 8005dca:	4413      	add	r3, r2
 8005dcc:	3b23      	subs	r3, #35	@ 0x23
 8005dce:	221f      	movs	r2, #31
 8005dd0:	fa02 f303 	lsl.w	r3, r2, r3
 8005dd4:	43da      	mvns	r2, r3
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	400a      	ands	r2, r1
 8005ddc:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8005de4:	683b      	ldr	r3, [r7, #0]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	b29b      	uxth	r3, r3
 8005dea:	4618      	mov	r0, r3
 8005dec:	683b      	ldr	r3, [r7, #0]
 8005dee:	685a      	ldr	r2, [r3, #4]
 8005df0:	4613      	mov	r3, r2
 8005df2:	009b      	lsls	r3, r3, #2
 8005df4:	4413      	add	r3, r2
 8005df6:	3b23      	subs	r3, #35	@ 0x23
 8005df8:	fa00 f203 	lsl.w	r2, r0, r3
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	430a      	orrs	r2, r1
 8005e02:	631a      	str	r2, [r3, #48]	@ 0x30
 8005e04:	e023      	b.n	8005e4e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8005e0c:	683b      	ldr	r3, [r7, #0]
 8005e0e:	685a      	ldr	r2, [r3, #4]
 8005e10:	4613      	mov	r3, r2
 8005e12:	009b      	lsls	r3, r3, #2
 8005e14:	4413      	add	r3, r2
 8005e16:	3b41      	subs	r3, #65	@ 0x41
 8005e18:	221f      	movs	r2, #31
 8005e1a:	fa02 f303 	lsl.w	r3, r2, r3
 8005e1e:	43da      	mvns	r2, r3
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	400a      	ands	r2, r1
 8005e26:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8005e2e:	683b      	ldr	r3, [r7, #0]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	b29b      	uxth	r3, r3
 8005e34:	4618      	mov	r0, r3
 8005e36:	683b      	ldr	r3, [r7, #0]
 8005e38:	685a      	ldr	r2, [r3, #4]
 8005e3a:	4613      	mov	r3, r2
 8005e3c:	009b      	lsls	r3, r3, #2
 8005e3e:	4413      	add	r3, r2
 8005e40:	3b41      	subs	r3, #65	@ 0x41
 8005e42:	fa00 f203 	lsl.w	r2, r0, r3
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	430a      	orrs	r2, r1
 8005e4c:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005e4e:	4b29      	ldr	r3, [pc, #164]	@ (8005ef4 <HAL_ADC_ConfigChannel+0x250>)
 8005e50:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	4a28      	ldr	r2, [pc, #160]	@ (8005ef8 <HAL_ADC_ConfigChannel+0x254>)
 8005e58:	4293      	cmp	r3, r2
 8005e5a:	d10f      	bne.n	8005e7c <HAL_ADC_ConfigChannel+0x1d8>
 8005e5c:	683b      	ldr	r3, [r7, #0]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	2b12      	cmp	r3, #18
 8005e62:	d10b      	bne.n	8005e7c <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	685b      	ldr	r3, [r3, #4]
 8005e68:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	685b      	ldr	r3, [r3, #4]
 8005e74:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	4a1d      	ldr	r2, [pc, #116]	@ (8005ef8 <HAL_ADC_ConfigChannel+0x254>)
 8005e82:	4293      	cmp	r3, r2
 8005e84:	d12b      	bne.n	8005ede <HAL_ADC_ConfigChannel+0x23a>
 8005e86:	683b      	ldr	r3, [r7, #0]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	4a1c      	ldr	r2, [pc, #112]	@ (8005efc <HAL_ADC_ConfigChannel+0x258>)
 8005e8c:	4293      	cmp	r3, r2
 8005e8e:	d003      	beq.n	8005e98 <HAL_ADC_ConfigChannel+0x1f4>
 8005e90:	683b      	ldr	r3, [r7, #0]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	2b11      	cmp	r3, #17
 8005e96:	d122      	bne.n	8005ede <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	685b      	ldr	r3, [r3, #4]
 8005e9c:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	685b      	ldr	r3, [r3, #4]
 8005ea8:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8005eb0:	683b      	ldr	r3, [r7, #0]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	4a11      	ldr	r2, [pc, #68]	@ (8005efc <HAL_ADC_ConfigChannel+0x258>)
 8005eb6:	4293      	cmp	r3, r2
 8005eb8:	d111      	bne.n	8005ede <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8005eba:	4b11      	ldr	r3, [pc, #68]	@ (8005f00 <HAL_ADC_ConfigChannel+0x25c>)
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	4a11      	ldr	r2, [pc, #68]	@ (8005f04 <HAL_ADC_ConfigChannel+0x260>)
 8005ec0:	fba2 2303 	umull	r2, r3, r2, r3
 8005ec4:	0c9a      	lsrs	r2, r3, #18
 8005ec6:	4613      	mov	r3, r2
 8005ec8:	009b      	lsls	r3, r3, #2
 8005eca:	4413      	add	r3, r2
 8005ecc:	005b      	lsls	r3, r3, #1
 8005ece:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8005ed0:	e002      	b.n	8005ed8 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8005ed2:	68bb      	ldr	r3, [r7, #8]
 8005ed4:	3b01      	subs	r3, #1
 8005ed6:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8005ed8:	68bb      	ldr	r3, [r7, #8]
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d1f9      	bne.n	8005ed2 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	2200      	movs	r2, #0
 8005ee2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8005ee6:	2300      	movs	r3, #0
}
 8005ee8:	4618      	mov	r0, r3
 8005eea:	3714      	adds	r7, #20
 8005eec:	46bd      	mov	sp, r7
 8005eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ef2:	4770      	bx	lr
 8005ef4:	40012300 	.word	0x40012300
 8005ef8:	40012000 	.word	0x40012000
 8005efc:	10000012 	.word	0x10000012
 8005f00:	2000d114 	.word	0x2000d114
 8005f04:	431bde83 	.word	0x431bde83

08005f08 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8005f08:	b480      	push	{r7}
 8005f0a:	b085      	sub	sp, #20
 8005f0c:	af00      	add	r7, sp, #0
 8005f0e:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005f10:	4b79      	ldr	r3, [pc, #484]	@ (80060f8 <ADC_Init+0x1f0>)
 8005f12:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	685b      	ldr	r3, [r3, #4]
 8005f18:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	685a      	ldr	r2, [r3, #4]
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	685b      	ldr	r3, [r3, #4]
 8005f28:	431a      	orrs	r2, r3
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	685a      	ldr	r2, [r3, #4]
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005f3c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	6859      	ldr	r1, [r3, #4]
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	691b      	ldr	r3, [r3, #16]
 8005f48:	021a      	lsls	r2, r3, #8
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	430a      	orrs	r2, r1
 8005f50:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	685a      	ldr	r2, [r3, #4]
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8005f60:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	6859      	ldr	r1, [r3, #4]
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	689a      	ldr	r2, [r3, #8]
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	430a      	orrs	r2, r1
 8005f72:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	689a      	ldr	r2, [r3, #8]
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005f82:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	6899      	ldr	r1, [r3, #8]
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	68da      	ldr	r2, [r3, #12]
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	430a      	orrs	r2, r1
 8005f94:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f9a:	4a58      	ldr	r2, [pc, #352]	@ (80060fc <ADC_Init+0x1f4>)
 8005f9c:	4293      	cmp	r3, r2
 8005f9e:	d022      	beq.n	8005fe6 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	689a      	ldr	r2, [r3, #8]
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8005fae:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	6899      	ldr	r1, [r3, #8]
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	430a      	orrs	r2, r1
 8005fc0:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	689a      	ldr	r2, [r3, #8]
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8005fd0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	6899      	ldr	r1, [r3, #8]
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	430a      	orrs	r2, r1
 8005fe2:	609a      	str	r2, [r3, #8]
 8005fe4:	e00f      	b.n	8006006 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	689a      	ldr	r2, [r3, #8]
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8005ff4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	689a      	ldr	r2, [r3, #8]
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8006004:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	689a      	ldr	r2, [r3, #8]
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	f022 0202 	bic.w	r2, r2, #2
 8006014:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	6899      	ldr	r1, [r3, #8]
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	7e1b      	ldrb	r3, [r3, #24]
 8006020:	005a      	lsls	r2, r3, #1
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	430a      	orrs	r2, r1
 8006028:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006030:	2b00      	cmp	r3, #0
 8006032:	d01b      	beq.n	800606c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	685a      	ldr	r2, [r3, #4]
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006042:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	685a      	ldr	r2, [r3, #4]
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8006052:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	6859      	ldr	r1, [r3, #4]
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800605e:	3b01      	subs	r3, #1
 8006060:	035a      	lsls	r2, r3, #13
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	430a      	orrs	r2, r1
 8006068:	605a      	str	r2, [r3, #4]
 800606a:	e007      	b.n	800607c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	685a      	ldr	r2, [r3, #4]
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800607a:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 800608a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	69db      	ldr	r3, [r3, #28]
 8006096:	3b01      	subs	r3, #1
 8006098:	051a      	lsls	r2, r3, #20
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	430a      	orrs	r2, r1
 80060a0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	689a      	ldr	r2, [r3, #8]
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80060b0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	6899      	ldr	r1, [r3, #8]
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80060be:	025a      	lsls	r2, r3, #9
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	430a      	orrs	r2, r1
 80060c6:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	689a      	ldr	r2, [r3, #8]
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80060d6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	6899      	ldr	r1, [r3, #8]
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	695b      	ldr	r3, [r3, #20]
 80060e2:	029a      	lsls	r2, r3, #10
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	430a      	orrs	r2, r1
 80060ea:	609a      	str	r2, [r3, #8]
}
 80060ec:	bf00      	nop
 80060ee:	3714      	adds	r7, #20
 80060f0:	46bd      	mov	sp, r7
 80060f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060f6:	4770      	bx	lr
 80060f8:	40012300 	.word	0x40012300
 80060fc:	0f000001 	.word	0x0f000001

08006100 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8006100:	b580      	push	{r7, lr}
 8006102:	b084      	sub	sp, #16
 8006104:	af00      	add	r7, sp, #0
 8006106:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800610c:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006112:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8006116:	2b00      	cmp	r3, #0
 8006118:	d13c      	bne.n	8006194 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800611e:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	689b      	ldr	r3, [r3, #8]
 800612c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8006130:	2b00      	cmp	r3, #0
 8006132:	d12b      	bne.n	800618c <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8006138:	2b00      	cmp	r3, #0
 800613a:	d127      	bne.n	800618c <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006142:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8006146:	2b00      	cmp	r3, #0
 8006148:	d006      	beq.n	8006158 <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	689b      	ldr	r3, [r3, #8]
 8006150:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8006154:	2b00      	cmp	r3, #0
 8006156:	d119      	bne.n	800618c <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	685a      	ldr	r2, [r3, #4]
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	f022 0220 	bic.w	r2, r2, #32
 8006166:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800616c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006178:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800617c:	2b00      	cmp	r3, #0
 800617e:	d105      	bne.n	800618c <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006184:	f043 0201 	orr.w	r2, r3, #1
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800618c:	68f8      	ldr	r0, [r7, #12]
 800618e:	f7fc f90b 	bl	80023a8 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8006192:	e00e      	b.n	80061b2 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006198:	f003 0310 	and.w	r3, r3, #16
 800619c:	2b00      	cmp	r3, #0
 800619e:	d003      	beq.n	80061a8 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 80061a0:	68f8      	ldr	r0, [r7, #12]
 80061a2:	f7ff fd75 	bl	8005c90 <HAL_ADC_ErrorCallback>
}
 80061a6:	e004      	b.n	80061b2 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80061ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80061ae:	6878      	ldr	r0, [r7, #4]
 80061b0:	4798      	blx	r3
}
 80061b2:	bf00      	nop
 80061b4:	3710      	adds	r7, #16
 80061b6:	46bd      	mov	sp, r7
 80061b8:	bd80      	pop	{r7, pc}

080061ba <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80061ba:	b580      	push	{r7, lr}
 80061bc:	b084      	sub	sp, #16
 80061be:	af00      	add	r7, sp, #0
 80061c0:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80061c6:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80061c8:	68f8      	ldr	r0, [r7, #12]
 80061ca:	f7ff fd57 	bl	8005c7c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80061ce:	bf00      	nop
 80061d0:	3710      	adds	r7, #16
 80061d2:	46bd      	mov	sp, r7
 80061d4:	bd80      	pop	{r7, pc}

080061d6 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80061d6:	b580      	push	{r7, lr}
 80061d8:	b084      	sub	sp, #16
 80061da:	af00      	add	r7, sp, #0
 80061dc:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80061e2:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	2240      	movs	r2, #64	@ 0x40
 80061e8:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80061ee:	f043 0204 	orr.w	r2, r3, #4
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80061f6:	68f8      	ldr	r0, [r7, #12]
 80061f8:	f7ff fd4a 	bl	8005c90 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80061fc:	bf00      	nop
 80061fe:	3710      	adds	r7, #16
 8006200:	46bd      	mov	sp, r7
 8006202:	bd80      	pop	{r7, pc}

08006204 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006204:	b480      	push	{r7}
 8006206:	b085      	sub	sp, #20
 8006208:	af00      	add	r7, sp, #0
 800620a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	f003 0307 	and.w	r3, r3, #7
 8006212:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006214:	4b0c      	ldr	r3, [pc, #48]	@ (8006248 <__NVIC_SetPriorityGrouping+0x44>)
 8006216:	68db      	ldr	r3, [r3, #12]
 8006218:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800621a:	68ba      	ldr	r2, [r7, #8]
 800621c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8006220:	4013      	ands	r3, r2
 8006222:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006228:	68bb      	ldr	r3, [r7, #8]
 800622a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800622c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8006230:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006234:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8006236:	4a04      	ldr	r2, [pc, #16]	@ (8006248 <__NVIC_SetPriorityGrouping+0x44>)
 8006238:	68bb      	ldr	r3, [r7, #8]
 800623a:	60d3      	str	r3, [r2, #12]
}
 800623c:	bf00      	nop
 800623e:	3714      	adds	r7, #20
 8006240:	46bd      	mov	sp, r7
 8006242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006246:	4770      	bx	lr
 8006248:	e000ed00 	.word	0xe000ed00

0800624c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800624c:	b480      	push	{r7}
 800624e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006250:	4b04      	ldr	r3, [pc, #16]	@ (8006264 <__NVIC_GetPriorityGrouping+0x18>)
 8006252:	68db      	ldr	r3, [r3, #12]
 8006254:	0a1b      	lsrs	r3, r3, #8
 8006256:	f003 0307 	and.w	r3, r3, #7
}
 800625a:	4618      	mov	r0, r3
 800625c:	46bd      	mov	sp, r7
 800625e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006262:	4770      	bx	lr
 8006264:	e000ed00 	.word	0xe000ed00

08006268 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006268:	b480      	push	{r7}
 800626a:	b083      	sub	sp, #12
 800626c:	af00      	add	r7, sp, #0
 800626e:	4603      	mov	r3, r0
 8006270:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006272:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006276:	2b00      	cmp	r3, #0
 8006278:	db0b      	blt.n	8006292 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800627a:	79fb      	ldrb	r3, [r7, #7]
 800627c:	f003 021f 	and.w	r2, r3, #31
 8006280:	4907      	ldr	r1, [pc, #28]	@ (80062a0 <__NVIC_EnableIRQ+0x38>)
 8006282:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006286:	095b      	lsrs	r3, r3, #5
 8006288:	2001      	movs	r0, #1
 800628a:	fa00 f202 	lsl.w	r2, r0, r2
 800628e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8006292:	bf00      	nop
 8006294:	370c      	adds	r7, #12
 8006296:	46bd      	mov	sp, r7
 8006298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800629c:	4770      	bx	lr
 800629e:	bf00      	nop
 80062a0:	e000e100 	.word	0xe000e100

080062a4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80062a4:	b480      	push	{r7}
 80062a6:	b083      	sub	sp, #12
 80062a8:	af00      	add	r7, sp, #0
 80062aa:	4603      	mov	r3, r0
 80062ac:	6039      	str	r1, [r7, #0]
 80062ae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80062b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	db0a      	blt.n	80062ce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80062b8:	683b      	ldr	r3, [r7, #0]
 80062ba:	b2da      	uxtb	r2, r3
 80062bc:	490c      	ldr	r1, [pc, #48]	@ (80062f0 <__NVIC_SetPriority+0x4c>)
 80062be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80062c2:	0112      	lsls	r2, r2, #4
 80062c4:	b2d2      	uxtb	r2, r2
 80062c6:	440b      	add	r3, r1
 80062c8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80062cc:	e00a      	b.n	80062e4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80062ce:	683b      	ldr	r3, [r7, #0]
 80062d0:	b2da      	uxtb	r2, r3
 80062d2:	4908      	ldr	r1, [pc, #32]	@ (80062f4 <__NVIC_SetPriority+0x50>)
 80062d4:	79fb      	ldrb	r3, [r7, #7]
 80062d6:	f003 030f 	and.w	r3, r3, #15
 80062da:	3b04      	subs	r3, #4
 80062dc:	0112      	lsls	r2, r2, #4
 80062de:	b2d2      	uxtb	r2, r2
 80062e0:	440b      	add	r3, r1
 80062e2:	761a      	strb	r2, [r3, #24]
}
 80062e4:	bf00      	nop
 80062e6:	370c      	adds	r7, #12
 80062e8:	46bd      	mov	sp, r7
 80062ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ee:	4770      	bx	lr
 80062f0:	e000e100 	.word	0xe000e100
 80062f4:	e000ed00 	.word	0xe000ed00

080062f8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80062f8:	b480      	push	{r7}
 80062fa:	b089      	sub	sp, #36	@ 0x24
 80062fc:	af00      	add	r7, sp, #0
 80062fe:	60f8      	str	r0, [r7, #12]
 8006300:	60b9      	str	r1, [r7, #8]
 8006302:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	f003 0307 	and.w	r3, r3, #7
 800630a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800630c:	69fb      	ldr	r3, [r7, #28]
 800630e:	f1c3 0307 	rsb	r3, r3, #7
 8006312:	2b04      	cmp	r3, #4
 8006314:	bf28      	it	cs
 8006316:	2304      	movcs	r3, #4
 8006318:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800631a:	69fb      	ldr	r3, [r7, #28]
 800631c:	3304      	adds	r3, #4
 800631e:	2b06      	cmp	r3, #6
 8006320:	d902      	bls.n	8006328 <NVIC_EncodePriority+0x30>
 8006322:	69fb      	ldr	r3, [r7, #28]
 8006324:	3b03      	subs	r3, #3
 8006326:	e000      	b.n	800632a <NVIC_EncodePriority+0x32>
 8006328:	2300      	movs	r3, #0
 800632a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800632c:	f04f 32ff 	mov.w	r2, #4294967295
 8006330:	69bb      	ldr	r3, [r7, #24]
 8006332:	fa02 f303 	lsl.w	r3, r2, r3
 8006336:	43da      	mvns	r2, r3
 8006338:	68bb      	ldr	r3, [r7, #8]
 800633a:	401a      	ands	r2, r3
 800633c:	697b      	ldr	r3, [r7, #20]
 800633e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006340:	f04f 31ff 	mov.w	r1, #4294967295
 8006344:	697b      	ldr	r3, [r7, #20]
 8006346:	fa01 f303 	lsl.w	r3, r1, r3
 800634a:	43d9      	mvns	r1, r3
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006350:	4313      	orrs	r3, r2
         );
}
 8006352:	4618      	mov	r0, r3
 8006354:	3724      	adds	r7, #36	@ 0x24
 8006356:	46bd      	mov	sp, r7
 8006358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800635c:	4770      	bx	lr
	...

08006360 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8006360:	b580      	push	{r7, lr}
 8006362:	b082      	sub	sp, #8
 8006364:	af00      	add	r7, sp, #0
 8006366:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	3b01      	subs	r3, #1
 800636c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006370:	d301      	bcc.n	8006376 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8006372:	2301      	movs	r3, #1
 8006374:	e00f      	b.n	8006396 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8006376:	4a0a      	ldr	r2, [pc, #40]	@ (80063a0 <SysTick_Config+0x40>)
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	3b01      	subs	r3, #1
 800637c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800637e:	210f      	movs	r1, #15
 8006380:	f04f 30ff 	mov.w	r0, #4294967295
 8006384:	f7ff ff8e 	bl	80062a4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006388:	4b05      	ldr	r3, [pc, #20]	@ (80063a0 <SysTick_Config+0x40>)
 800638a:	2200      	movs	r2, #0
 800638c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800638e:	4b04      	ldr	r3, [pc, #16]	@ (80063a0 <SysTick_Config+0x40>)
 8006390:	2207      	movs	r2, #7
 8006392:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006394:	2300      	movs	r3, #0
}
 8006396:	4618      	mov	r0, r3
 8006398:	3708      	adds	r7, #8
 800639a:	46bd      	mov	sp, r7
 800639c:	bd80      	pop	{r7, pc}
 800639e:	bf00      	nop
 80063a0:	e000e010 	.word	0xe000e010

080063a4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80063a4:	b580      	push	{r7, lr}
 80063a6:	b082      	sub	sp, #8
 80063a8:	af00      	add	r7, sp, #0
 80063aa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80063ac:	6878      	ldr	r0, [r7, #4]
 80063ae:	f7ff ff29 	bl	8006204 <__NVIC_SetPriorityGrouping>
}
 80063b2:	bf00      	nop
 80063b4:	3708      	adds	r7, #8
 80063b6:	46bd      	mov	sp, r7
 80063b8:	bd80      	pop	{r7, pc}

080063ba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80063ba:	b580      	push	{r7, lr}
 80063bc:	b086      	sub	sp, #24
 80063be:	af00      	add	r7, sp, #0
 80063c0:	4603      	mov	r3, r0
 80063c2:	60b9      	str	r1, [r7, #8]
 80063c4:	607a      	str	r2, [r7, #4]
 80063c6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80063c8:	2300      	movs	r3, #0
 80063ca:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80063cc:	f7ff ff3e 	bl	800624c <__NVIC_GetPriorityGrouping>
 80063d0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80063d2:	687a      	ldr	r2, [r7, #4]
 80063d4:	68b9      	ldr	r1, [r7, #8]
 80063d6:	6978      	ldr	r0, [r7, #20]
 80063d8:	f7ff ff8e 	bl	80062f8 <NVIC_EncodePriority>
 80063dc:	4602      	mov	r2, r0
 80063de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80063e2:	4611      	mov	r1, r2
 80063e4:	4618      	mov	r0, r3
 80063e6:	f7ff ff5d 	bl	80062a4 <__NVIC_SetPriority>
}
 80063ea:	bf00      	nop
 80063ec:	3718      	adds	r7, #24
 80063ee:	46bd      	mov	sp, r7
 80063f0:	bd80      	pop	{r7, pc}

080063f2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80063f2:	b580      	push	{r7, lr}
 80063f4:	b082      	sub	sp, #8
 80063f6:	af00      	add	r7, sp, #0
 80063f8:	4603      	mov	r3, r0
 80063fa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80063fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006400:	4618      	mov	r0, r3
 8006402:	f7ff ff31 	bl	8006268 <__NVIC_EnableIRQ>
}
 8006406:	bf00      	nop
 8006408:	3708      	adds	r7, #8
 800640a:	46bd      	mov	sp, r7
 800640c:	bd80      	pop	{r7, pc}

0800640e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800640e:	b580      	push	{r7, lr}
 8006410:	b082      	sub	sp, #8
 8006412:	af00      	add	r7, sp, #0
 8006414:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8006416:	6878      	ldr	r0, [r7, #4]
 8006418:	f7ff ffa2 	bl	8006360 <SysTick_Config>
 800641c:	4603      	mov	r3, r0
}
 800641e:	4618      	mov	r0, r3
 8006420:	3708      	adds	r7, #8
 8006422:	46bd      	mov	sp, r7
 8006424:	bd80      	pop	{r7, pc}

08006426 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8006426:	b580      	push	{r7, lr}
 8006428:	b082      	sub	sp, #8
 800642a:	af00      	add	r7, sp, #0
 800642c:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	2b00      	cmp	r3, #0
 8006432:	d101      	bne.n	8006438 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8006434:	2301      	movs	r3, #1
 8006436:	e00e      	b.n	8006456 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	795b      	ldrb	r3, [r3, #5]
 800643c:	b2db      	uxtb	r3, r3
 800643e:	2b00      	cmp	r3, #0
 8006440:	d105      	bne.n	800644e <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	2200      	movs	r2, #0
 8006446:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8006448:	6878      	ldr	r0, [r7, #4]
 800644a:	f7fa ffb9 	bl	80013c0 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	2201      	movs	r2, #1
 8006452:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8006454:	2300      	movs	r3, #0
}
 8006456:	4618      	mov	r0, r3
 8006458:	3708      	adds	r7, #8
 800645a:	46bd      	mov	sp, r7
 800645c:	bd80      	pop	{r7, pc}
	...

08006460 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8006460:	b580      	push	{r7, lr}
 8006462:	b086      	sub	sp, #24
 8006464:	af00      	add	r7, sp, #0
 8006466:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8006468:	2300      	movs	r3, #0
 800646a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800646c:	f7ff fa44 	bl	80058f8 <HAL_GetTick>
 8006470:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	2b00      	cmp	r3, #0
 8006476:	d101      	bne.n	800647c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8006478:	2301      	movs	r3, #1
 800647a:	e099      	b.n	80065b0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	2202      	movs	r2, #2
 8006480:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	2200      	movs	r2, #0
 8006488:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	681a      	ldr	r2, [r3, #0]
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	f022 0201 	bic.w	r2, r2, #1
 800649a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800649c:	e00f      	b.n	80064be <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800649e:	f7ff fa2b 	bl	80058f8 <HAL_GetTick>
 80064a2:	4602      	mov	r2, r0
 80064a4:	693b      	ldr	r3, [r7, #16]
 80064a6:	1ad3      	subs	r3, r2, r3
 80064a8:	2b05      	cmp	r3, #5
 80064aa:	d908      	bls.n	80064be <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	2220      	movs	r2, #32
 80064b0:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	2203      	movs	r2, #3
 80064b6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 80064ba:	2303      	movs	r3, #3
 80064bc:	e078      	b.n	80065b0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	f003 0301 	and.w	r3, r3, #1
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d1e8      	bne.n	800649e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80064d4:	697a      	ldr	r2, [r7, #20]
 80064d6:	4b38      	ldr	r3, [pc, #224]	@ (80065b8 <HAL_DMA_Init+0x158>)
 80064d8:	4013      	ands	r3, r2
 80064da:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	685a      	ldr	r2, [r3, #4]
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	689b      	ldr	r3, [r3, #8]
 80064e4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80064ea:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	691b      	ldr	r3, [r3, #16]
 80064f0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80064f6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	699b      	ldr	r3, [r3, #24]
 80064fc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006502:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	6a1b      	ldr	r3, [r3, #32]
 8006508:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800650a:	697a      	ldr	r2, [r7, #20]
 800650c:	4313      	orrs	r3, r2
 800650e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006514:	2b04      	cmp	r3, #4
 8006516:	d107      	bne.n	8006528 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006520:	4313      	orrs	r3, r2
 8006522:	697a      	ldr	r2, [r7, #20]
 8006524:	4313      	orrs	r3, r2
 8006526:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	697a      	ldr	r2, [r7, #20]
 800652e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	695b      	ldr	r3, [r3, #20]
 8006536:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8006538:	697b      	ldr	r3, [r7, #20]
 800653a:	f023 0307 	bic.w	r3, r3, #7
 800653e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006544:	697a      	ldr	r2, [r7, #20]
 8006546:	4313      	orrs	r3, r2
 8006548:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800654e:	2b04      	cmp	r3, #4
 8006550:	d117      	bne.n	8006582 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006556:	697a      	ldr	r2, [r7, #20]
 8006558:	4313      	orrs	r3, r2
 800655a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006560:	2b00      	cmp	r3, #0
 8006562:	d00e      	beq.n	8006582 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8006564:	6878      	ldr	r0, [r7, #4]
 8006566:	f000 fb01 	bl	8006b6c <DMA_CheckFifoParam>
 800656a:	4603      	mov	r3, r0
 800656c:	2b00      	cmp	r3, #0
 800656e:	d008      	beq.n	8006582 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	2240      	movs	r2, #64	@ 0x40
 8006574:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	2201      	movs	r2, #1
 800657a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 800657e:	2301      	movs	r3, #1
 8006580:	e016      	b.n	80065b0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	697a      	ldr	r2, [r7, #20]
 8006588:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800658a:	6878      	ldr	r0, [r7, #4]
 800658c:	f000 fab8 	bl	8006b00 <DMA_CalcBaseAndBitshift>
 8006590:	4603      	mov	r3, r0
 8006592:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006598:	223f      	movs	r2, #63	@ 0x3f
 800659a:	409a      	lsls	r2, r3
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	2200      	movs	r2, #0
 80065a4:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	2201      	movs	r2, #1
 80065aa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80065ae:	2300      	movs	r3, #0
}
 80065b0:	4618      	mov	r0, r3
 80065b2:	3718      	adds	r7, #24
 80065b4:	46bd      	mov	sp, r7
 80065b6:	bd80      	pop	{r7, pc}
 80065b8:	f010803f 	.word	0xf010803f

080065bc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80065bc:	b580      	push	{r7, lr}
 80065be:	b086      	sub	sp, #24
 80065c0:	af00      	add	r7, sp, #0
 80065c2:	60f8      	str	r0, [r7, #12]
 80065c4:	60b9      	str	r1, [r7, #8]
 80065c6:	607a      	str	r2, [r7, #4]
 80065c8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80065ca:	2300      	movs	r3, #0
 80065cc:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80065d2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80065da:	2b01      	cmp	r3, #1
 80065dc:	d101      	bne.n	80065e2 <HAL_DMA_Start_IT+0x26>
 80065de:	2302      	movs	r3, #2
 80065e0:	e040      	b.n	8006664 <HAL_DMA_Start_IT+0xa8>
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	2201      	movs	r2, #1
 80065e6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80065f0:	b2db      	uxtb	r3, r3
 80065f2:	2b01      	cmp	r3, #1
 80065f4:	d12f      	bne.n	8006656 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	2202      	movs	r2, #2
 80065fa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	2200      	movs	r2, #0
 8006602:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8006604:	683b      	ldr	r3, [r7, #0]
 8006606:	687a      	ldr	r2, [r7, #4]
 8006608:	68b9      	ldr	r1, [r7, #8]
 800660a:	68f8      	ldr	r0, [r7, #12]
 800660c:	f000 fa4a 	bl	8006aa4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006614:	223f      	movs	r2, #63	@ 0x3f
 8006616:	409a      	lsls	r2, r3
 8006618:	693b      	ldr	r3, [r7, #16]
 800661a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	681a      	ldr	r2, [r3, #0]
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	f042 0216 	orr.w	r2, r2, #22
 800662a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006630:	2b00      	cmp	r3, #0
 8006632:	d007      	beq.n	8006644 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	681a      	ldr	r2, [r3, #0]
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	f042 0208 	orr.w	r2, r2, #8
 8006642:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	681a      	ldr	r2, [r3, #0]
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	f042 0201 	orr.w	r2, r2, #1
 8006652:	601a      	str	r2, [r3, #0]
 8006654:	e005      	b.n	8006662 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	2200      	movs	r2, #0
 800665a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800665e:	2302      	movs	r3, #2
 8006660:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8006662:	7dfb      	ldrb	r3, [r7, #23]
}
 8006664:	4618      	mov	r0, r3
 8006666:	3718      	adds	r7, #24
 8006668:	46bd      	mov	sp, r7
 800666a:	bd80      	pop	{r7, pc}

0800666c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800666c:	b580      	push	{r7, lr}
 800666e:	b084      	sub	sp, #16
 8006670:	af00      	add	r7, sp, #0
 8006672:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006678:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800667a:	f7ff f93d 	bl	80058f8 <HAL_GetTick>
 800667e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8006686:	b2db      	uxtb	r3, r3
 8006688:	2b02      	cmp	r3, #2
 800668a:	d008      	beq.n	800669e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	2280      	movs	r2, #128	@ 0x80
 8006690:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	2200      	movs	r2, #0
 8006696:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 800669a:	2301      	movs	r3, #1
 800669c:	e052      	b.n	8006744 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	681a      	ldr	r2, [r3, #0]
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	f022 0216 	bic.w	r2, r2, #22
 80066ac:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	695a      	ldr	r2, [r3, #20]
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80066bc:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d103      	bne.n	80066ce <HAL_DMA_Abort+0x62>
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d007      	beq.n	80066de <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	681a      	ldr	r2, [r3, #0]
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	f022 0208 	bic.w	r2, r2, #8
 80066dc:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	681a      	ldr	r2, [r3, #0]
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	f022 0201 	bic.w	r2, r2, #1
 80066ec:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80066ee:	e013      	b.n	8006718 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80066f0:	f7ff f902 	bl	80058f8 <HAL_GetTick>
 80066f4:	4602      	mov	r2, r0
 80066f6:	68bb      	ldr	r3, [r7, #8]
 80066f8:	1ad3      	subs	r3, r2, r3
 80066fa:	2b05      	cmp	r3, #5
 80066fc:	d90c      	bls.n	8006718 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	2220      	movs	r2, #32
 8006702:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	2203      	movs	r2, #3
 8006708:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	2200      	movs	r2, #0
 8006710:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8006714:	2303      	movs	r3, #3
 8006716:	e015      	b.n	8006744 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	f003 0301 	and.w	r3, r3, #1
 8006722:	2b00      	cmp	r3, #0
 8006724:	d1e4      	bne.n	80066f0 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800672a:	223f      	movs	r2, #63	@ 0x3f
 800672c:	409a      	lsls	r2, r3
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	2201      	movs	r2, #1
 8006736:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	2200      	movs	r2, #0
 800673e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8006742:	2300      	movs	r3, #0
}
 8006744:	4618      	mov	r0, r3
 8006746:	3710      	adds	r7, #16
 8006748:	46bd      	mov	sp, r7
 800674a:	bd80      	pop	{r7, pc}

0800674c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800674c:	b480      	push	{r7}
 800674e:	b083      	sub	sp, #12
 8006750:	af00      	add	r7, sp, #0
 8006752:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800675a:	b2db      	uxtb	r3, r3
 800675c:	2b02      	cmp	r3, #2
 800675e:	d004      	beq.n	800676a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	2280      	movs	r2, #128	@ 0x80
 8006764:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8006766:	2301      	movs	r3, #1
 8006768:	e00c      	b.n	8006784 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	2205      	movs	r2, #5
 800676e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	681a      	ldr	r2, [r3, #0]
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	f022 0201 	bic.w	r2, r2, #1
 8006780:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8006782:	2300      	movs	r3, #0
}
 8006784:	4618      	mov	r0, r3
 8006786:	370c      	adds	r7, #12
 8006788:	46bd      	mov	sp, r7
 800678a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800678e:	4770      	bx	lr

08006790 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8006790:	b580      	push	{r7, lr}
 8006792:	b086      	sub	sp, #24
 8006794:	af00      	add	r7, sp, #0
 8006796:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8006798:	2300      	movs	r3, #0
 800679a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800679c:	4b8e      	ldr	r3, [pc, #568]	@ (80069d8 <HAL_DMA_IRQHandler+0x248>)
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	4a8e      	ldr	r2, [pc, #568]	@ (80069dc <HAL_DMA_IRQHandler+0x24c>)
 80067a2:	fba2 2303 	umull	r2, r3, r2, r3
 80067a6:	0a9b      	lsrs	r3, r3, #10
 80067a8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80067ae:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80067b0:	693b      	ldr	r3, [r7, #16]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80067ba:	2208      	movs	r2, #8
 80067bc:	409a      	lsls	r2, r3
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	4013      	ands	r3, r2
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d01a      	beq.n	80067fc <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	f003 0304 	and.w	r3, r3, #4
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	d013      	beq.n	80067fc <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	681a      	ldr	r2, [r3, #0]
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	f022 0204 	bic.w	r2, r2, #4
 80067e2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80067e8:	2208      	movs	r2, #8
 80067ea:	409a      	lsls	r2, r3
 80067ec:	693b      	ldr	r3, [r7, #16]
 80067ee:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80067f4:	f043 0201 	orr.w	r2, r3, #1
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006800:	2201      	movs	r2, #1
 8006802:	409a      	lsls	r2, r3
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	4013      	ands	r3, r2
 8006808:	2b00      	cmp	r3, #0
 800680a:	d012      	beq.n	8006832 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	695b      	ldr	r3, [r3, #20]
 8006812:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006816:	2b00      	cmp	r3, #0
 8006818:	d00b      	beq.n	8006832 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800681e:	2201      	movs	r2, #1
 8006820:	409a      	lsls	r2, r3
 8006822:	693b      	ldr	r3, [r7, #16]
 8006824:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800682a:	f043 0202 	orr.w	r2, r3, #2
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006836:	2204      	movs	r2, #4
 8006838:	409a      	lsls	r2, r3
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	4013      	ands	r3, r2
 800683e:	2b00      	cmp	r3, #0
 8006840:	d012      	beq.n	8006868 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	f003 0302 	and.w	r3, r3, #2
 800684c:	2b00      	cmp	r3, #0
 800684e:	d00b      	beq.n	8006868 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006854:	2204      	movs	r2, #4
 8006856:	409a      	lsls	r2, r3
 8006858:	693b      	ldr	r3, [r7, #16]
 800685a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006860:	f043 0204 	orr.w	r2, r3, #4
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800686c:	2210      	movs	r2, #16
 800686e:	409a      	lsls	r2, r3
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	4013      	ands	r3, r2
 8006874:	2b00      	cmp	r3, #0
 8006876:	d043      	beq.n	8006900 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	f003 0308 	and.w	r3, r3, #8
 8006882:	2b00      	cmp	r3, #0
 8006884:	d03c      	beq.n	8006900 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800688a:	2210      	movs	r2, #16
 800688c:	409a      	lsls	r2, r3
 800688e:	693b      	ldr	r3, [r7, #16]
 8006890:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800689c:	2b00      	cmp	r3, #0
 800689e:	d018      	beq.n	80068d2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d108      	bne.n	80068c0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d024      	beq.n	8006900 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80068ba:	6878      	ldr	r0, [r7, #4]
 80068bc:	4798      	blx	r3
 80068be:	e01f      	b.n	8006900 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	d01b      	beq.n	8006900 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80068cc:	6878      	ldr	r0, [r7, #4]
 80068ce:	4798      	blx	r3
 80068d0:	e016      	b.n	8006900 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d107      	bne.n	80068f0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	681a      	ldr	r2, [r3, #0]
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	f022 0208 	bic.w	r2, r2, #8
 80068ee:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d003      	beq.n	8006900 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80068fc:	6878      	ldr	r0, [r7, #4]
 80068fe:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006904:	2220      	movs	r2, #32
 8006906:	409a      	lsls	r2, r3
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	4013      	ands	r3, r2
 800690c:	2b00      	cmp	r3, #0
 800690e:	f000 808f 	beq.w	8006a30 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	f003 0310 	and.w	r3, r3, #16
 800691c:	2b00      	cmp	r3, #0
 800691e:	f000 8087 	beq.w	8006a30 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006926:	2220      	movs	r2, #32
 8006928:	409a      	lsls	r2, r3
 800692a:	693b      	ldr	r3, [r7, #16]
 800692c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8006934:	b2db      	uxtb	r3, r3
 8006936:	2b05      	cmp	r3, #5
 8006938:	d136      	bne.n	80069a8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	681a      	ldr	r2, [r3, #0]
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	f022 0216 	bic.w	r2, r2, #22
 8006948:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	695a      	ldr	r2, [r3, #20]
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006958:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800695e:	2b00      	cmp	r3, #0
 8006960:	d103      	bne.n	800696a <HAL_DMA_IRQHandler+0x1da>
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006966:	2b00      	cmp	r3, #0
 8006968:	d007      	beq.n	800697a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	681a      	ldr	r2, [r3, #0]
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	f022 0208 	bic.w	r2, r2, #8
 8006978:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800697e:	223f      	movs	r2, #63	@ 0x3f
 8006980:	409a      	lsls	r2, r3
 8006982:	693b      	ldr	r3, [r7, #16]
 8006984:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	2201      	movs	r2, #1
 800698a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	2200      	movs	r2, #0
 8006992:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800699a:	2b00      	cmp	r3, #0
 800699c:	d07e      	beq.n	8006a9c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80069a2:	6878      	ldr	r0, [r7, #4]
 80069a4:	4798      	blx	r3
        }
        return;
 80069a6:	e079      	b.n	8006a9c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d01d      	beq.n	80069f2 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	d10d      	bne.n	80069e0 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	d031      	beq.n	8006a30 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80069d0:	6878      	ldr	r0, [r7, #4]
 80069d2:	4798      	blx	r3
 80069d4:	e02c      	b.n	8006a30 <HAL_DMA_IRQHandler+0x2a0>
 80069d6:	bf00      	nop
 80069d8:	2000d114 	.word	0x2000d114
 80069dc:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	d023      	beq.n	8006a30 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80069ec:	6878      	ldr	r0, [r7, #4]
 80069ee:	4798      	blx	r3
 80069f0:	e01e      	b.n	8006a30 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d10f      	bne.n	8006a20 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	681a      	ldr	r2, [r3, #0]
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	f022 0210 	bic.w	r2, r2, #16
 8006a0e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	2201      	movs	r2, #1
 8006a14:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	2200      	movs	r2, #0
 8006a1c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	d003      	beq.n	8006a30 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006a2c:	6878      	ldr	r0, [r7, #4]
 8006a2e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d032      	beq.n	8006a9e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006a3c:	f003 0301 	and.w	r3, r3, #1
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	d022      	beq.n	8006a8a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	2205      	movs	r2, #5
 8006a48:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	681a      	ldr	r2, [r3, #0]
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	f022 0201 	bic.w	r2, r2, #1
 8006a5a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8006a5c:	68bb      	ldr	r3, [r7, #8]
 8006a5e:	3301      	adds	r3, #1
 8006a60:	60bb      	str	r3, [r7, #8]
 8006a62:	697a      	ldr	r2, [r7, #20]
 8006a64:	429a      	cmp	r2, r3
 8006a66:	d307      	bcc.n	8006a78 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	f003 0301 	and.w	r3, r3, #1
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	d1f2      	bne.n	8006a5c <HAL_DMA_IRQHandler+0x2cc>
 8006a76:	e000      	b.n	8006a7a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8006a78:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	2201      	movs	r2, #1
 8006a7e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	2200      	movs	r2, #0
 8006a86:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	d005      	beq.n	8006a9e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006a96:	6878      	ldr	r0, [r7, #4]
 8006a98:	4798      	blx	r3
 8006a9a:	e000      	b.n	8006a9e <HAL_DMA_IRQHandler+0x30e>
        return;
 8006a9c:	bf00      	nop
    }
  }
}
 8006a9e:	3718      	adds	r7, #24
 8006aa0:	46bd      	mov	sp, r7
 8006aa2:	bd80      	pop	{r7, pc}

08006aa4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006aa4:	b480      	push	{r7}
 8006aa6:	b085      	sub	sp, #20
 8006aa8:	af00      	add	r7, sp, #0
 8006aaa:	60f8      	str	r0, [r7, #12]
 8006aac:	60b9      	str	r1, [r7, #8]
 8006aae:	607a      	str	r2, [r7, #4]
 8006ab0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	681a      	ldr	r2, [r3, #0]
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8006ac0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	683a      	ldr	r2, [r7, #0]
 8006ac8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	689b      	ldr	r3, [r3, #8]
 8006ace:	2b40      	cmp	r3, #64	@ 0x40
 8006ad0:	d108      	bne.n	8006ae4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	687a      	ldr	r2, [r7, #4]
 8006ad8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	68ba      	ldr	r2, [r7, #8]
 8006ae0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8006ae2:	e007      	b.n	8006af4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	68ba      	ldr	r2, [r7, #8]
 8006aea:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	687a      	ldr	r2, [r7, #4]
 8006af2:	60da      	str	r2, [r3, #12]
}
 8006af4:	bf00      	nop
 8006af6:	3714      	adds	r7, #20
 8006af8:	46bd      	mov	sp, r7
 8006afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006afe:	4770      	bx	lr

08006b00 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8006b00:	b480      	push	{r7}
 8006b02:	b085      	sub	sp, #20
 8006b04:	af00      	add	r7, sp, #0
 8006b06:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	b2db      	uxtb	r3, r3
 8006b0e:	3b10      	subs	r3, #16
 8006b10:	4a14      	ldr	r2, [pc, #80]	@ (8006b64 <DMA_CalcBaseAndBitshift+0x64>)
 8006b12:	fba2 2303 	umull	r2, r3, r2, r3
 8006b16:	091b      	lsrs	r3, r3, #4
 8006b18:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8006b1a:	4a13      	ldr	r2, [pc, #76]	@ (8006b68 <DMA_CalcBaseAndBitshift+0x68>)
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	4413      	add	r3, r2
 8006b20:	781b      	ldrb	r3, [r3, #0]
 8006b22:	461a      	mov	r2, r3
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	2b03      	cmp	r3, #3
 8006b2c:	d909      	bls.n	8006b42 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8006b36:	f023 0303 	bic.w	r3, r3, #3
 8006b3a:	1d1a      	adds	r2, r3, #4
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	659a      	str	r2, [r3, #88]	@ 0x58
 8006b40:	e007      	b.n	8006b52 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8006b4a:	f023 0303 	bic.w	r3, r3, #3
 8006b4e:	687a      	ldr	r2, [r7, #4]
 8006b50:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8006b56:	4618      	mov	r0, r3
 8006b58:	3714      	adds	r7, #20
 8006b5a:	46bd      	mov	sp, r7
 8006b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b60:	4770      	bx	lr
 8006b62:	bf00      	nop
 8006b64:	aaaaaaab 	.word	0xaaaaaaab
 8006b68:	08015334 	.word	0x08015334

08006b6c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8006b6c:	b480      	push	{r7}
 8006b6e:	b085      	sub	sp, #20
 8006b70:	af00      	add	r7, sp, #0
 8006b72:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006b74:	2300      	movs	r3, #0
 8006b76:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b7c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	699b      	ldr	r3, [r3, #24]
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d11f      	bne.n	8006bc6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8006b86:	68bb      	ldr	r3, [r7, #8]
 8006b88:	2b03      	cmp	r3, #3
 8006b8a:	d856      	bhi.n	8006c3a <DMA_CheckFifoParam+0xce>
 8006b8c:	a201      	add	r2, pc, #4	@ (adr r2, 8006b94 <DMA_CheckFifoParam+0x28>)
 8006b8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b92:	bf00      	nop
 8006b94:	08006ba5 	.word	0x08006ba5
 8006b98:	08006bb7 	.word	0x08006bb7
 8006b9c:	08006ba5 	.word	0x08006ba5
 8006ba0:	08006c3b 	.word	0x08006c3b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ba8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d046      	beq.n	8006c3e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8006bb0:	2301      	movs	r3, #1
 8006bb2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006bb4:	e043      	b.n	8006c3e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006bba:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8006bbe:	d140      	bne.n	8006c42 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8006bc0:	2301      	movs	r3, #1
 8006bc2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006bc4:	e03d      	b.n	8006c42 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	699b      	ldr	r3, [r3, #24]
 8006bca:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006bce:	d121      	bne.n	8006c14 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8006bd0:	68bb      	ldr	r3, [r7, #8]
 8006bd2:	2b03      	cmp	r3, #3
 8006bd4:	d837      	bhi.n	8006c46 <DMA_CheckFifoParam+0xda>
 8006bd6:	a201      	add	r2, pc, #4	@ (adr r2, 8006bdc <DMA_CheckFifoParam+0x70>)
 8006bd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006bdc:	08006bed 	.word	0x08006bed
 8006be0:	08006bf3 	.word	0x08006bf3
 8006be4:	08006bed 	.word	0x08006bed
 8006be8:	08006c05 	.word	0x08006c05
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8006bec:	2301      	movs	r3, #1
 8006bee:	73fb      	strb	r3, [r7, #15]
      break;
 8006bf0:	e030      	b.n	8006c54 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006bf6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d025      	beq.n	8006c4a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8006bfe:	2301      	movs	r3, #1
 8006c00:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006c02:	e022      	b.n	8006c4a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c08:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8006c0c:	d11f      	bne.n	8006c4e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8006c0e:	2301      	movs	r3, #1
 8006c10:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8006c12:	e01c      	b.n	8006c4e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8006c14:	68bb      	ldr	r3, [r7, #8]
 8006c16:	2b02      	cmp	r3, #2
 8006c18:	d903      	bls.n	8006c22 <DMA_CheckFifoParam+0xb6>
 8006c1a:	68bb      	ldr	r3, [r7, #8]
 8006c1c:	2b03      	cmp	r3, #3
 8006c1e:	d003      	beq.n	8006c28 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8006c20:	e018      	b.n	8006c54 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8006c22:	2301      	movs	r3, #1
 8006c24:	73fb      	strb	r3, [r7, #15]
      break;
 8006c26:	e015      	b.n	8006c54 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c2c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	d00e      	beq.n	8006c52 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8006c34:	2301      	movs	r3, #1
 8006c36:	73fb      	strb	r3, [r7, #15]
      break;
 8006c38:	e00b      	b.n	8006c52 <DMA_CheckFifoParam+0xe6>
      break;
 8006c3a:	bf00      	nop
 8006c3c:	e00a      	b.n	8006c54 <DMA_CheckFifoParam+0xe8>
      break;
 8006c3e:	bf00      	nop
 8006c40:	e008      	b.n	8006c54 <DMA_CheckFifoParam+0xe8>
      break;
 8006c42:	bf00      	nop
 8006c44:	e006      	b.n	8006c54 <DMA_CheckFifoParam+0xe8>
      break;
 8006c46:	bf00      	nop
 8006c48:	e004      	b.n	8006c54 <DMA_CheckFifoParam+0xe8>
      break;
 8006c4a:	bf00      	nop
 8006c4c:	e002      	b.n	8006c54 <DMA_CheckFifoParam+0xe8>
      break;   
 8006c4e:	bf00      	nop
 8006c50:	e000      	b.n	8006c54 <DMA_CheckFifoParam+0xe8>
      break;
 8006c52:	bf00      	nop
    }
  } 
  
  return status; 
 8006c54:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c56:	4618      	mov	r0, r3
 8006c58:	3714      	adds	r7, #20
 8006c5a:	46bd      	mov	sp, r7
 8006c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c60:	4770      	bx	lr
 8006c62:	bf00      	nop

08006c64 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006c64:	b480      	push	{r7}
 8006c66:	b089      	sub	sp, #36	@ 0x24
 8006c68:	af00      	add	r7, sp, #0
 8006c6a:	6078      	str	r0, [r7, #4]
 8006c6c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8006c6e:	2300      	movs	r3, #0
 8006c70:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8006c72:	2300      	movs	r3, #0
 8006c74:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8006c76:	2300      	movs	r3, #0
 8006c78:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006c7a:	2300      	movs	r3, #0
 8006c7c:	61fb      	str	r3, [r7, #28]
 8006c7e:	e159      	b.n	8006f34 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8006c80:	2201      	movs	r2, #1
 8006c82:	69fb      	ldr	r3, [r7, #28]
 8006c84:	fa02 f303 	lsl.w	r3, r2, r3
 8006c88:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8006c8a:	683b      	ldr	r3, [r7, #0]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	697a      	ldr	r2, [r7, #20]
 8006c90:	4013      	ands	r3, r2
 8006c92:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8006c94:	693a      	ldr	r2, [r7, #16]
 8006c96:	697b      	ldr	r3, [r7, #20]
 8006c98:	429a      	cmp	r2, r3
 8006c9a:	f040 8148 	bne.w	8006f2e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8006c9e:	683b      	ldr	r3, [r7, #0]
 8006ca0:	685b      	ldr	r3, [r3, #4]
 8006ca2:	f003 0303 	and.w	r3, r3, #3
 8006ca6:	2b01      	cmp	r3, #1
 8006ca8:	d005      	beq.n	8006cb6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006caa:	683b      	ldr	r3, [r7, #0]
 8006cac:	685b      	ldr	r3, [r3, #4]
 8006cae:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8006cb2:	2b02      	cmp	r3, #2
 8006cb4:	d130      	bne.n	8006d18 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	689b      	ldr	r3, [r3, #8]
 8006cba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8006cbc:	69fb      	ldr	r3, [r7, #28]
 8006cbe:	005b      	lsls	r3, r3, #1
 8006cc0:	2203      	movs	r2, #3
 8006cc2:	fa02 f303 	lsl.w	r3, r2, r3
 8006cc6:	43db      	mvns	r3, r3
 8006cc8:	69ba      	ldr	r2, [r7, #24]
 8006cca:	4013      	ands	r3, r2
 8006ccc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006cce:	683b      	ldr	r3, [r7, #0]
 8006cd0:	68da      	ldr	r2, [r3, #12]
 8006cd2:	69fb      	ldr	r3, [r7, #28]
 8006cd4:	005b      	lsls	r3, r3, #1
 8006cd6:	fa02 f303 	lsl.w	r3, r2, r3
 8006cda:	69ba      	ldr	r2, [r7, #24]
 8006cdc:	4313      	orrs	r3, r2
 8006cde:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	69ba      	ldr	r2, [r7, #24]
 8006ce4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	685b      	ldr	r3, [r3, #4]
 8006cea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8006cec:	2201      	movs	r2, #1
 8006cee:	69fb      	ldr	r3, [r7, #28]
 8006cf0:	fa02 f303 	lsl.w	r3, r2, r3
 8006cf4:	43db      	mvns	r3, r3
 8006cf6:	69ba      	ldr	r2, [r7, #24]
 8006cf8:	4013      	ands	r3, r2
 8006cfa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006cfc:	683b      	ldr	r3, [r7, #0]
 8006cfe:	685b      	ldr	r3, [r3, #4]
 8006d00:	091b      	lsrs	r3, r3, #4
 8006d02:	f003 0201 	and.w	r2, r3, #1
 8006d06:	69fb      	ldr	r3, [r7, #28]
 8006d08:	fa02 f303 	lsl.w	r3, r2, r3
 8006d0c:	69ba      	ldr	r2, [r7, #24]
 8006d0e:	4313      	orrs	r3, r2
 8006d10:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	69ba      	ldr	r2, [r7, #24]
 8006d16:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006d18:	683b      	ldr	r3, [r7, #0]
 8006d1a:	685b      	ldr	r3, [r3, #4]
 8006d1c:	f003 0303 	and.w	r3, r3, #3
 8006d20:	2b03      	cmp	r3, #3
 8006d22:	d017      	beq.n	8006d54 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	68db      	ldr	r3, [r3, #12]
 8006d28:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8006d2a:	69fb      	ldr	r3, [r7, #28]
 8006d2c:	005b      	lsls	r3, r3, #1
 8006d2e:	2203      	movs	r2, #3
 8006d30:	fa02 f303 	lsl.w	r3, r2, r3
 8006d34:	43db      	mvns	r3, r3
 8006d36:	69ba      	ldr	r2, [r7, #24]
 8006d38:	4013      	ands	r3, r2
 8006d3a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006d3c:	683b      	ldr	r3, [r7, #0]
 8006d3e:	689a      	ldr	r2, [r3, #8]
 8006d40:	69fb      	ldr	r3, [r7, #28]
 8006d42:	005b      	lsls	r3, r3, #1
 8006d44:	fa02 f303 	lsl.w	r3, r2, r3
 8006d48:	69ba      	ldr	r2, [r7, #24]
 8006d4a:	4313      	orrs	r3, r2
 8006d4c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	69ba      	ldr	r2, [r7, #24]
 8006d52:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006d54:	683b      	ldr	r3, [r7, #0]
 8006d56:	685b      	ldr	r3, [r3, #4]
 8006d58:	f003 0303 	and.w	r3, r3, #3
 8006d5c:	2b02      	cmp	r3, #2
 8006d5e:	d123      	bne.n	8006da8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006d60:	69fb      	ldr	r3, [r7, #28]
 8006d62:	08da      	lsrs	r2, r3, #3
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	3208      	adds	r2, #8
 8006d68:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d6c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8006d6e:	69fb      	ldr	r3, [r7, #28]
 8006d70:	f003 0307 	and.w	r3, r3, #7
 8006d74:	009b      	lsls	r3, r3, #2
 8006d76:	220f      	movs	r2, #15
 8006d78:	fa02 f303 	lsl.w	r3, r2, r3
 8006d7c:	43db      	mvns	r3, r3
 8006d7e:	69ba      	ldr	r2, [r7, #24]
 8006d80:	4013      	ands	r3, r2
 8006d82:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8006d84:	683b      	ldr	r3, [r7, #0]
 8006d86:	691a      	ldr	r2, [r3, #16]
 8006d88:	69fb      	ldr	r3, [r7, #28]
 8006d8a:	f003 0307 	and.w	r3, r3, #7
 8006d8e:	009b      	lsls	r3, r3, #2
 8006d90:	fa02 f303 	lsl.w	r3, r2, r3
 8006d94:	69ba      	ldr	r2, [r7, #24]
 8006d96:	4313      	orrs	r3, r2
 8006d98:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8006d9a:	69fb      	ldr	r3, [r7, #28]
 8006d9c:	08da      	lsrs	r2, r3, #3
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	3208      	adds	r2, #8
 8006da2:	69b9      	ldr	r1, [r7, #24]
 8006da4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8006dae:	69fb      	ldr	r3, [r7, #28]
 8006db0:	005b      	lsls	r3, r3, #1
 8006db2:	2203      	movs	r2, #3
 8006db4:	fa02 f303 	lsl.w	r3, r2, r3
 8006db8:	43db      	mvns	r3, r3
 8006dba:	69ba      	ldr	r2, [r7, #24]
 8006dbc:	4013      	ands	r3, r2
 8006dbe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006dc0:	683b      	ldr	r3, [r7, #0]
 8006dc2:	685b      	ldr	r3, [r3, #4]
 8006dc4:	f003 0203 	and.w	r2, r3, #3
 8006dc8:	69fb      	ldr	r3, [r7, #28]
 8006dca:	005b      	lsls	r3, r3, #1
 8006dcc:	fa02 f303 	lsl.w	r3, r2, r3
 8006dd0:	69ba      	ldr	r2, [r7, #24]
 8006dd2:	4313      	orrs	r3, r2
 8006dd4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	69ba      	ldr	r2, [r7, #24]
 8006dda:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8006ddc:	683b      	ldr	r3, [r7, #0]
 8006dde:	685b      	ldr	r3, [r3, #4]
 8006de0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	f000 80a2 	beq.w	8006f2e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006dea:	2300      	movs	r3, #0
 8006dec:	60fb      	str	r3, [r7, #12]
 8006dee:	4b57      	ldr	r3, [pc, #348]	@ (8006f4c <HAL_GPIO_Init+0x2e8>)
 8006df0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006df2:	4a56      	ldr	r2, [pc, #344]	@ (8006f4c <HAL_GPIO_Init+0x2e8>)
 8006df4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8006df8:	6453      	str	r3, [r2, #68]	@ 0x44
 8006dfa:	4b54      	ldr	r3, [pc, #336]	@ (8006f4c <HAL_GPIO_Init+0x2e8>)
 8006dfc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006dfe:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006e02:	60fb      	str	r3, [r7, #12]
 8006e04:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8006e06:	4a52      	ldr	r2, [pc, #328]	@ (8006f50 <HAL_GPIO_Init+0x2ec>)
 8006e08:	69fb      	ldr	r3, [r7, #28]
 8006e0a:	089b      	lsrs	r3, r3, #2
 8006e0c:	3302      	adds	r3, #2
 8006e0e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006e12:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8006e14:	69fb      	ldr	r3, [r7, #28]
 8006e16:	f003 0303 	and.w	r3, r3, #3
 8006e1a:	009b      	lsls	r3, r3, #2
 8006e1c:	220f      	movs	r2, #15
 8006e1e:	fa02 f303 	lsl.w	r3, r2, r3
 8006e22:	43db      	mvns	r3, r3
 8006e24:	69ba      	ldr	r2, [r7, #24]
 8006e26:	4013      	ands	r3, r2
 8006e28:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	4a49      	ldr	r2, [pc, #292]	@ (8006f54 <HAL_GPIO_Init+0x2f0>)
 8006e2e:	4293      	cmp	r3, r2
 8006e30:	d019      	beq.n	8006e66 <HAL_GPIO_Init+0x202>
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	4a48      	ldr	r2, [pc, #288]	@ (8006f58 <HAL_GPIO_Init+0x2f4>)
 8006e36:	4293      	cmp	r3, r2
 8006e38:	d013      	beq.n	8006e62 <HAL_GPIO_Init+0x1fe>
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	4a47      	ldr	r2, [pc, #284]	@ (8006f5c <HAL_GPIO_Init+0x2f8>)
 8006e3e:	4293      	cmp	r3, r2
 8006e40:	d00d      	beq.n	8006e5e <HAL_GPIO_Init+0x1fa>
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	4a46      	ldr	r2, [pc, #280]	@ (8006f60 <HAL_GPIO_Init+0x2fc>)
 8006e46:	4293      	cmp	r3, r2
 8006e48:	d007      	beq.n	8006e5a <HAL_GPIO_Init+0x1f6>
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	4a45      	ldr	r2, [pc, #276]	@ (8006f64 <HAL_GPIO_Init+0x300>)
 8006e4e:	4293      	cmp	r3, r2
 8006e50:	d101      	bne.n	8006e56 <HAL_GPIO_Init+0x1f2>
 8006e52:	2304      	movs	r3, #4
 8006e54:	e008      	b.n	8006e68 <HAL_GPIO_Init+0x204>
 8006e56:	2307      	movs	r3, #7
 8006e58:	e006      	b.n	8006e68 <HAL_GPIO_Init+0x204>
 8006e5a:	2303      	movs	r3, #3
 8006e5c:	e004      	b.n	8006e68 <HAL_GPIO_Init+0x204>
 8006e5e:	2302      	movs	r3, #2
 8006e60:	e002      	b.n	8006e68 <HAL_GPIO_Init+0x204>
 8006e62:	2301      	movs	r3, #1
 8006e64:	e000      	b.n	8006e68 <HAL_GPIO_Init+0x204>
 8006e66:	2300      	movs	r3, #0
 8006e68:	69fa      	ldr	r2, [r7, #28]
 8006e6a:	f002 0203 	and.w	r2, r2, #3
 8006e6e:	0092      	lsls	r2, r2, #2
 8006e70:	4093      	lsls	r3, r2
 8006e72:	69ba      	ldr	r2, [r7, #24]
 8006e74:	4313      	orrs	r3, r2
 8006e76:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006e78:	4935      	ldr	r1, [pc, #212]	@ (8006f50 <HAL_GPIO_Init+0x2ec>)
 8006e7a:	69fb      	ldr	r3, [r7, #28]
 8006e7c:	089b      	lsrs	r3, r3, #2
 8006e7e:	3302      	adds	r3, #2
 8006e80:	69ba      	ldr	r2, [r7, #24]
 8006e82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8006e86:	4b38      	ldr	r3, [pc, #224]	@ (8006f68 <HAL_GPIO_Init+0x304>)
 8006e88:	689b      	ldr	r3, [r3, #8]
 8006e8a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006e8c:	693b      	ldr	r3, [r7, #16]
 8006e8e:	43db      	mvns	r3, r3
 8006e90:	69ba      	ldr	r2, [r7, #24]
 8006e92:	4013      	ands	r3, r2
 8006e94:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8006e96:	683b      	ldr	r3, [r7, #0]
 8006e98:	685b      	ldr	r3, [r3, #4]
 8006e9a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	d003      	beq.n	8006eaa <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8006ea2:	69ba      	ldr	r2, [r7, #24]
 8006ea4:	693b      	ldr	r3, [r7, #16]
 8006ea6:	4313      	orrs	r3, r2
 8006ea8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8006eaa:	4a2f      	ldr	r2, [pc, #188]	@ (8006f68 <HAL_GPIO_Init+0x304>)
 8006eac:	69bb      	ldr	r3, [r7, #24]
 8006eae:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8006eb0:	4b2d      	ldr	r3, [pc, #180]	@ (8006f68 <HAL_GPIO_Init+0x304>)
 8006eb2:	68db      	ldr	r3, [r3, #12]
 8006eb4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006eb6:	693b      	ldr	r3, [r7, #16]
 8006eb8:	43db      	mvns	r3, r3
 8006eba:	69ba      	ldr	r2, [r7, #24]
 8006ebc:	4013      	ands	r3, r2
 8006ebe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8006ec0:	683b      	ldr	r3, [r7, #0]
 8006ec2:	685b      	ldr	r3, [r3, #4]
 8006ec4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	d003      	beq.n	8006ed4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8006ecc:	69ba      	ldr	r2, [r7, #24]
 8006ece:	693b      	ldr	r3, [r7, #16]
 8006ed0:	4313      	orrs	r3, r2
 8006ed2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8006ed4:	4a24      	ldr	r2, [pc, #144]	@ (8006f68 <HAL_GPIO_Init+0x304>)
 8006ed6:	69bb      	ldr	r3, [r7, #24]
 8006ed8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8006eda:	4b23      	ldr	r3, [pc, #140]	@ (8006f68 <HAL_GPIO_Init+0x304>)
 8006edc:	685b      	ldr	r3, [r3, #4]
 8006ede:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006ee0:	693b      	ldr	r3, [r7, #16]
 8006ee2:	43db      	mvns	r3, r3
 8006ee4:	69ba      	ldr	r2, [r7, #24]
 8006ee6:	4013      	ands	r3, r2
 8006ee8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8006eea:	683b      	ldr	r3, [r7, #0]
 8006eec:	685b      	ldr	r3, [r3, #4]
 8006eee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	d003      	beq.n	8006efe <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8006ef6:	69ba      	ldr	r2, [r7, #24]
 8006ef8:	693b      	ldr	r3, [r7, #16]
 8006efa:	4313      	orrs	r3, r2
 8006efc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8006efe:	4a1a      	ldr	r2, [pc, #104]	@ (8006f68 <HAL_GPIO_Init+0x304>)
 8006f00:	69bb      	ldr	r3, [r7, #24]
 8006f02:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8006f04:	4b18      	ldr	r3, [pc, #96]	@ (8006f68 <HAL_GPIO_Init+0x304>)
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006f0a:	693b      	ldr	r3, [r7, #16]
 8006f0c:	43db      	mvns	r3, r3
 8006f0e:	69ba      	ldr	r2, [r7, #24]
 8006f10:	4013      	ands	r3, r2
 8006f12:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8006f14:	683b      	ldr	r3, [r7, #0]
 8006f16:	685b      	ldr	r3, [r3, #4]
 8006f18:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	d003      	beq.n	8006f28 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8006f20:	69ba      	ldr	r2, [r7, #24]
 8006f22:	693b      	ldr	r3, [r7, #16]
 8006f24:	4313      	orrs	r3, r2
 8006f26:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8006f28:	4a0f      	ldr	r2, [pc, #60]	@ (8006f68 <HAL_GPIO_Init+0x304>)
 8006f2a:	69bb      	ldr	r3, [r7, #24]
 8006f2c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006f2e:	69fb      	ldr	r3, [r7, #28]
 8006f30:	3301      	adds	r3, #1
 8006f32:	61fb      	str	r3, [r7, #28]
 8006f34:	69fb      	ldr	r3, [r7, #28]
 8006f36:	2b0f      	cmp	r3, #15
 8006f38:	f67f aea2 	bls.w	8006c80 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8006f3c:	bf00      	nop
 8006f3e:	bf00      	nop
 8006f40:	3724      	adds	r7, #36	@ 0x24
 8006f42:	46bd      	mov	sp, r7
 8006f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f48:	4770      	bx	lr
 8006f4a:	bf00      	nop
 8006f4c:	40023800 	.word	0x40023800
 8006f50:	40013800 	.word	0x40013800
 8006f54:	40020000 	.word	0x40020000
 8006f58:	40020400 	.word	0x40020400
 8006f5c:	40020800 	.word	0x40020800
 8006f60:	40020c00 	.word	0x40020c00
 8006f64:	40021000 	.word	0x40021000
 8006f68:	40013c00 	.word	0x40013c00

08006f6c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8006f6c:	b480      	push	{r7}
 8006f6e:	b085      	sub	sp, #20
 8006f70:	af00      	add	r7, sp, #0
 8006f72:	6078      	str	r0, [r7, #4]
 8006f74:	460b      	mov	r3, r1
 8006f76:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	691a      	ldr	r2, [r3, #16]
 8006f7c:	887b      	ldrh	r3, [r7, #2]
 8006f7e:	4013      	ands	r3, r2
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	d002      	beq.n	8006f8a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8006f84:	2301      	movs	r3, #1
 8006f86:	73fb      	strb	r3, [r7, #15]
 8006f88:	e001      	b.n	8006f8e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8006f8a:	2300      	movs	r3, #0
 8006f8c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8006f8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f90:	4618      	mov	r0, r3
 8006f92:	3714      	adds	r7, #20
 8006f94:	46bd      	mov	sp, r7
 8006f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f9a:	4770      	bx	lr

08006f9c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006f9c:	b480      	push	{r7}
 8006f9e:	b083      	sub	sp, #12
 8006fa0:	af00      	add	r7, sp, #0
 8006fa2:	6078      	str	r0, [r7, #4]
 8006fa4:	460b      	mov	r3, r1
 8006fa6:	807b      	strh	r3, [r7, #2]
 8006fa8:	4613      	mov	r3, r2
 8006faa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8006fac:	787b      	ldrb	r3, [r7, #1]
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d003      	beq.n	8006fba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006fb2:	887a      	ldrh	r2, [r7, #2]
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8006fb8:	e003      	b.n	8006fc2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8006fba:	887b      	ldrh	r3, [r7, #2]
 8006fbc:	041a      	lsls	r2, r3, #16
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	619a      	str	r2, [r3, #24]
}
 8006fc2:	bf00      	nop
 8006fc4:	370c      	adds	r7, #12
 8006fc6:	46bd      	mov	sp, r7
 8006fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fcc:	4770      	bx	lr
	...

08006fd0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8006fd0:	b580      	push	{r7, lr}
 8006fd2:	b082      	sub	sp, #8
 8006fd4:	af00      	add	r7, sp, #0
 8006fd6:	4603      	mov	r3, r0
 8006fd8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8006fda:	4b08      	ldr	r3, [pc, #32]	@ (8006ffc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006fdc:	695a      	ldr	r2, [r3, #20]
 8006fde:	88fb      	ldrh	r3, [r7, #6]
 8006fe0:	4013      	ands	r3, r2
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	d006      	beq.n	8006ff4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8006fe6:	4a05      	ldr	r2, [pc, #20]	@ (8006ffc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006fe8:	88fb      	ldrh	r3, [r7, #6]
 8006fea:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8006fec:	88fb      	ldrh	r3, [r7, #6]
 8006fee:	4618      	mov	r0, r3
 8006ff0:	f000 f806 	bl	8007000 <HAL_GPIO_EXTI_Callback>
  }
}
 8006ff4:	bf00      	nop
 8006ff6:	3708      	adds	r7, #8
 8006ff8:	46bd      	mov	sp, r7
 8006ffa:	bd80      	pop	{r7, pc}
 8006ffc:	40013c00 	.word	0x40013c00

08007000 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8007000:	b480      	push	{r7}
 8007002:	b083      	sub	sp, #12
 8007004:	af00      	add	r7, sp, #0
 8007006:	4603      	mov	r3, r0
 8007008:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800700a:	bf00      	nop
 800700c:	370c      	adds	r7, #12
 800700e:	46bd      	mov	sp, r7
 8007010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007014:	4770      	bx	lr
	...

08007018 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8007018:	b580      	push	{r7, lr}
 800701a:	b088      	sub	sp, #32
 800701c:	af00      	add	r7, sp, #0
 800701e:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	2b00      	cmp	r3, #0
 8007024:	d101      	bne.n	800702a <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8007026:	2301      	movs	r3, #1
 8007028:	e128      	b.n	800727c <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007030:	b2db      	uxtb	r3, r3
 8007032:	2b00      	cmp	r3, #0
 8007034:	d109      	bne.n	800704a <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	2200      	movs	r2, #0
 800703a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	4a90      	ldr	r2, [pc, #576]	@ (8007284 <HAL_I2S_Init+0x26c>)
 8007042:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8007044:	6878      	ldr	r0, [r7, #4]
 8007046:	f7fa fb0f 	bl	8001668 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	2202      	movs	r2, #2
 800704e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	69db      	ldr	r3, [r3, #28]
 8007058:	687a      	ldr	r2, [r7, #4]
 800705a:	6812      	ldr	r2, [r2, #0]
 800705c:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8007060:	f023 030f 	bic.w	r3, r3, #15
 8007064:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	2202      	movs	r2, #2
 800706c:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	695b      	ldr	r3, [r3, #20]
 8007072:	2b02      	cmp	r3, #2
 8007074:	d060      	beq.n	8007138 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	68db      	ldr	r3, [r3, #12]
 800707a:	2b00      	cmp	r3, #0
 800707c:	d102      	bne.n	8007084 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 800707e:	2310      	movs	r3, #16
 8007080:	617b      	str	r3, [r7, #20]
 8007082:	e001      	b.n	8007088 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8007084:	2320      	movs	r3, #32
 8007086:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	689b      	ldr	r3, [r3, #8]
 800708c:	2b20      	cmp	r3, #32
 800708e:	d802      	bhi.n	8007096 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8007090:	697b      	ldr	r3, [r7, #20]
 8007092:	005b      	lsls	r3, r3, #1
 8007094:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8007096:	2001      	movs	r0, #1
 8007098:	f001 fb02 	bl	80086a0 <HAL_RCCEx_GetPeriphCLKFreq>
 800709c:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	691b      	ldr	r3, [r3, #16]
 80070a2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80070a6:	d125      	bne.n	80070f4 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	68db      	ldr	r3, [r3, #12]
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	d010      	beq.n	80070d2 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80070b0:	697b      	ldr	r3, [r7, #20]
 80070b2:	009b      	lsls	r3, r3, #2
 80070b4:	68fa      	ldr	r2, [r7, #12]
 80070b6:	fbb2 f2f3 	udiv	r2, r2, r3
 80070ba:	4613      	mov	r3, r2
 80070bc:	009b      	lsls	r3, r3, #2
 80070be:	4413      	add	r3, r2
 80070c0:	005b      	lsls	r3, r3, #1
 80070c2:	461a      	mov	r2, r3
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	695b      	ldr	r3, [r3, #20]
 80070c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80070cc:	3305      	adds	r3, #5
 80070ce:	613b      	str	r3, [r7, #16]
 80070d0:	e01f      	b.n	8007112 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80070d2:	697b      	ldr	r3, [r7, #20]
 80070d4:	00db      	lsls	r3, r3, #3
 80070d6:	68fa      	ldr	r2, [r7, #12]
 80070d8:	fbb2 f2f3 	udiv	r2, r2, r3
 80070dc:	4613      	mov	r3, r2
 80070de:	009b      	lsls	r3, r3, #2
 80070e0:	4413      	add	r3, r2
 80070e2:	005b      	lsls	r3, r3, #1
 80070e4:	461a      	mov	r2, r3
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	695b      	ldr	r3, [r3, #20]
 80070ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80070ee:	3305      	adds	r3, #5
 80070f0:	613b      	str	r3, [r7, #16]
 80070f2:	e00e      	b.n	8007112 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80070f4:	68fa      	ldr	r2, [r7, #12]
 80070f6:	697b      	ldr	r3, [r7, #20]
 80070f8:	fbb2 f2f3 	udiv	r2, r2, r3
 80070fc:	4613      	mov	r3, r2
 80070fe:	009b      	lsls	r3, r3, #2
 8007100:	4413      	add	r3, r2
 8007102:	005b      	lsls	r3, r3, #1
 8007104:	461a      	mov	r2, r3
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	695b      	ldr	r3, [r3, #20]
 800710a:	fbb2 f3f3 	udiv	r3, r2, r3
 800710e:	3305      	adds	r3, #5
 8007110:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8007112:	693b      	ldr	r3, [r7, #16]
 8007114:	4a5c      	ldr	r2, [pc, #368]	@ (8007288 <HAL_I2S_Init+0x270>)
 8007116:	fba2 2303 	umull	r2, r3, r2, r3
 800711a:	08db      	lsrs	r3, r3, #3
 800711c:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 800711e:	693b      	ldr	r3, [r7, #16]
 8007120:	f003 0301 	and.w	r3, r3, #1
 8007124:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8007126:	693a      	ldr	r2, [r7, #16]
 8007128:	69bb      	ldr	r3, [r7, #24]
 800712a:	1ad3      	subs	r3, r2, r3
 800712c:	085b      	lsrs	r3, r3, #1
 800712e:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8007130:	69bb      	ldr	r3, [r7, #24]
 8007132:	021b      	lsls	r3, r3, #8
 8007134:	61bb      	str	r3, [r7, #24]
 8007136:	e003      	b.n	8007140 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8007138:	2302      	movs	r3, #2
 800713a:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 800713c:	2300      	movs	r3, #0
 800713e:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8007140:	69fb      	ldr	r3, [r7, #28]
 8007142:	2b01      	cmp	r3, #1
 8007144:	d902      	bls.n	800714c <HAL_I2S_Init+0x134>
 8007146:	69fb      	ldr	r3, [r7, #28]
 8007148:	2bff      	cmp	r3, #255	@ 0xff
 800714a:	d907      	bls.n	800715c <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007150:	f043 0210 	orr.w	r2, r3, #16
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	645a      	str	r2, [r3, #68]	@ 0x44
    return  HAL_ERROR;
 8007158:	2301      	movs	r3, #1
 800715a:	e08f      	b.n	800727c <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	691a      	ldr	r2, [r3, #16]
 8007160:	69bb      	ldr	r3, [r7, #24]
 8007162:	ea42 0103 	orr.w	r1, r2, r3
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	69fa      	ldr	r2, [r7, #28]
 800716c:	430a      	orrs	r2, r1
 800716e:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	69db      	ldr	r3, [r3, #28]
 8007176:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 800717a:	f023 030f 	bic.w	r3, r3, #15
 800717e:	687a      	ldr	r2, [r7, #4]
 8007180:	6851      	ldr	r1, [r2, #4]
 8007182:	687a      	ldr	r2, [r7, #4]
 8007184:	6892      	ldr	r2, [r2, #8]
 8007186:	4311      	orrs	r1, r2
 8007188:	687a      	ldr	r2, [r7, #4]
 800718a:	68d2      	ldr	r2, [r2, #12]
 800718c:	4311      	orrs	r1, r2
 800718e:	687a      	ldr	r2, [r7, #4]
 8007190:	6992      	ldr	r2, [r2, #24]
 8007192:	430a      	orrs	r2, r1
 8007194:	431a      	orrs	r2, r3
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800719e:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	6a1b      	ldr	r3, [r3, #32]
 80071a4:	2b01      	cmp	r3, #1
 80071a6:	d161      	bne.n	800726c <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	4a38      	ldr	r2, [pc, #224]	@ (800728c <HAL_I2S_Init+0x274>)
 80071ac:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	4a37      	ldr	r2, [pc, #220]	@ (8007290 <HAL_I2S_Init+0x278>)
 80071b4:	4293      	cmp	r3, r2
 80071b6:	d101      	bne.n	80071bc <HAL_I2S_Init+0x1a4>
 80071b8:	4b36      	ldr	r3, [pc, #216]	@ (8007294 <HAL_I2S_Init+0x27c>)
 80071ba:	e001      	b.n	80071c0 <HAL_I2S_Init+0x1a8>
 80071bc:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80071c0:	69db      	ldr	r3, [r3, #28]
 80071c2:	687a      	ldr	r2, [r7, #4]
 80071c4:	6812      	ldr	r2, [r2, #0]
 80071c6:	4932      	ldr	r1, [pc, #200]	@ (8007290 <HAL_I2S_Init+0x278>)
 80071c8:	428a      	cmp	r2, r1
 80071ca:	d101      	bne.n	80071d0 <HAL_I2S_Init+0x1b8>
 80071cc:	4a31      	ldr	r2, [pc, #196]	@ (8007294 <HAL_I2S_Init+0x27c>)
 80071ce:	e001      	b.n	80071d4 <HAL_I2S_Init+0x1bc>
 80071d0:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 80071d4:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 80071d8:	f023 030f 	bic.w	r3, r3, #15
 80071dc:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	4a2b      	ldr	r2, [pc, #172]	@ (8007290 <HAL_I2S_Init+0x278>)
 80071e4:	4293      	cmp	r3, r2
 80071e6:	d101      	bne.n	80071ec <HAL_I2S_Init+0x1d4>
 80071e8:	4b2a      	ldr	r3, [pc, #168]	@ (8007294 <HAL_I2S_Init+0x27c>)
 80071ea:	e001      	b.n	80071f0 <HAL_I2S_Init+0x1d8>
 80071ec:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80071f0:	2202      	movs	r2, #2
 80071f2:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	4a25      	ldr	r2, [pc, #148]	@ (8007290 <HAL_I2S_Init+0x278>)
 80071fa:	4293      	cmp	r3, r2
 80071fc:	d101      	bne.n	8007202 <HAL_I2S_Init+0x1ea>
 80071fe:	4b25      	ldr	r3, [pc, #148]	@ (8007294 <HAL_I2S_Init+0x27c>)
 8007200:	e001      	b.n	8007206 <HAL_I2S_Init+0x1ee>
 8007202:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8007206:	69db      	ldr	r3, [r3, #28]
 8007208:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	685b      	ldr	r3, [r3, #4]
 800720e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007212:	d003      	beq.n	800721c <HAL_I2S_Init+0x204>
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	685b      	ldr	r3, [r3, #4]
 8007218:	2b00      	cmp	r3, #0
 800721a:	d103      	bne.n	8007224 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 800721c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8007220:	613b      	str	r3, [r7, #16]
 8007222:	e001      	b.n	8007228 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8007224:	2300      	movs	r3, #0
 8007226:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8007228:	693b      	ldr	r3, [r7, #16]
 800722a:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	689b      	ldr	r3, [r3, #8]
 8007230:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8007232:	4313      	orrs	r3, r2
 8007234:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	68db      	ldr	r3, [r3, #12]
 800723a:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 800723c:	4313      	orrs	r3, r2
 800723e:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	699b      	ldr	r3, [r3, #24]
 8007244:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8007246:	4313      	orrs	r3, r2
 8007248:	b29a      	uxth	r2, r3
 800724a:	897b      	ldrh	r3, [r7, #10]
 800724c:	4313      	orrs	r3, r2
 800724e:	b29b      	uxth	r3, r3
 8007250:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8007254:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	4a0d      	ldr	r2, [pc, #52]	@ (8007290 <HAL_I2S_Init+0x278>)
 800725c:	4293      	cmp	r3, r2
 800725e:	d101      	bne.n	8007264 <HAL_I2S_Init+0x24c>
 8007260:	4b0c      	ldr	r3, [pc, #48]	@ (8007294 <HAL_I2S_Init+0x27c>)
 8007262:	e001      	b.n	8007268 <HAL_I2S_Init+0x250>
 8007264:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8007268:	897a      	ldrh	r2, [r7, #10]
 800726a:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	2200      	movs	r2, #0
 8007270:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	2201      	movs	r2, #1
 8007276:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  return HAL_OK;
 800727a:	2300      	movs	r3, #0
}
 800727c:	4618      	mov	r0, r3
 800727e:	3720      	adds	r7, #32
 8007280:	46bd      	mov	sp, r7
 8007282:	bd80      	pop	{r7, pc}
 8007284:	08007555 	.word	0x08007555
 8007288:	cccccccd 	.word	0xcccccccd
 800728c:	080076dd 	.word	0x080076dd
 8007290:	40003800 	.word	0x40003800
 8007294:	40003400 	.word	0x40003400

08007298 <HAL_I2S_Transmit>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Transmit(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007298:	b580      	push	{r7, lr}
 800729a:	b086      	sub	sp, #24
 800729c:	af00      	add	r7, sp, #0
 800729e:	60f8      	str	r0, [r7, #12]
 80072a0:	60b9      	str	r1, [r7, #8]
 80072a2:	603b      	str	r3, [r7, #0]
 80072a4:	4613      	mov	r3, r2
 80072a6:	80fb      	strh	r3, [r7, #6]
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 80072a8:	68bb      	ldr	r3, [r7, #8]
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	d002      	beq.n	80072b4 <HAL_I2S_Transmit+0x1c>
 80072ae:	88fb      	ldrh	r3, [r7, #6]
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	d101      	bne.n	80072b8 <HAL_I2S_Transmit+0x20>
  {
    return  HAL_ERROR;
 80072b4:	2301      	movs	r3, #1
 80072b6:	e0d8      	b.n	800746a <HAL_I2S_Transmit+0x1d2>
  }

  if (hi2s->State != HAL_I2S_STATE_READY)
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80072be:	b2db      	uxtb	r3, r3
 80072c0:	2b01      	cmp	r3, #1
 80072c2:	d001      	beq.n	80072c8 <HAL_I2S_Transmit+0x30>
  {
    return HAL_BUSY;
 80072c4:	2302      	movs	r3, #2
 80072c6:	e0d0      	b.n	800746a <HAL_I2S_Transmit+0x1d2>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80072ce:	b2db      	uxtb	r3, r3
 80072d0:	2b01      	cmp	r3, #1
 80072d2:	d101      	bne.n	80072d8 <HAL_I2S_Transmit+0x40>
 80072d4:	2302      	movs	r3, #2
 80072d6:	e0c8      	b.n	800746a <HAL_I2S_Transmit+0x1d2>
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	2201      	movs	r2, #1
 80072dc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_TX;
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	2203      	movs	r2, #3
 80072e4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	2200      	movs	r2, #0
 80072ec:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2s->pTxBuffPtr = pData;
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	68ba      	ldr	r2, [r7, #8]
 80072f2:	625a      	str	r2, [r3, #36]	@ 0x24

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	69db      	ldr	r3, [r3, #28]
 80072fa:	f003 0307 	and.w	r3, r3, #7
 80072fe:	617b      	str	r3, [r7, #20]

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 8007300:	697b      	ldr	r3, [r7, #20]
 8007302:	2b03      	cmp	r3, #3
 8007304:	d002      	beq.n	800730c <HAL_I2S_Transmit+0x74>
 8007306:	697b      	ldr	r3, [r7, #20]
 8007308:	2b05      	cmp	r3, #5
 800730a:	d10a      	bne.n	8007322 <HAL_I2S_Transmit+0x8a>
  {
    hi2s->TxXferSize = (Size << 1U);
 800730c:	88fb      	ldrh	r3, [r7, #6]
 800730e:	005b      	lsls	r3, r3, #1
 8007310:	b29a      	uxth	r2, r3
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2s->TxXferCount = (Size << 1U);
 8007316:	88fb      	ldrh	r3, [r7, #6]
 8007318:	005b      	lsls	r3, r3, #1
 800731a:	b29a      	uxth	r2, r3
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8007320:	e005      	b.n	800732e <HAL_I2S_Transmit+0x96>
  }
  else
  {
    hi2s->TxXferSize = Size;
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	88fa      	ldrh	r2, [r7, #6]
 8007326:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2s->TxXferCount = Size;
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	88fa      	ldrh	r2, [r7, #6]
 800732c:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }

  tmpreg_cfgr = hi2s->Instance->I2SCFGR;
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	69db      	ldr	r3, [r3, #28]
 8007334:	617b      	str	r3, [r7, #20]

  /* Check if the I2S is already enabled */
  if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SE) != SPI_I2SCFGR_I2SE)
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	69db      	ldr	r3, [r3, #28]
 800733c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007340:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007344:	d007      	beq.n	8007356 <HAL_I2S_Transmit+0xbe>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 8007346:	68fb      	ldr	r3, [r7, #12]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	69da      	ldr	r2, [r3, #28]
 800734c:	68fb      	ldr	r3, [r7, #12]
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8007354:	61da      	str	r2, [r3, #28]
  }

  /* Wait until TXE flag is set */
  if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_TXE, SET, Timeout) != HAL_OK)
 8007356:	683b      	ldr	r3, [r7, #0]
 8007358:	2201      	movs	r2, #1
 800735a:	2102      	movs	r1, #2
 800735c:	68f8      	ldr	r0, [r7, #12]
 800735e:	f000 f983 	bl	8007668 <I2S_WaitFlagStateUntilTimeout>
 8007362:	4603      	mov	r3, r0
 8007364:	2b00      	cmp	r3, #0
 8007366:	d04e      	beq.n	8007406 <HAL_I2S_Transmit+0x16e>
  {
    /* Set the error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800736c:	f043 0201 	orr.w	r2, r3, #1
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2s->State = HAL_I2S_STATE_READY;
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	2201      	movs	r2, #1
 8007378:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    __HAL_UNLOCK(hi2s);
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	2200      	movs	r2, #0
 8007380:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    return HAL_ERROR;
 8007384:	2301      	movs	r3, #1
 8007386:	e070      	b.n	800746a <HAL_I2S_Transmit+0x1d2>
  }

  while (hi2s->TxXferCount > 0U)
  {
    hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800738c:	881a      	ldrh	r2, [r3, #0]
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	60da      	str	r2, [r3, #12]
    hi2s->pTxBuffPtr++;
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007398:	1c9a      	adds	r2, r3, #2
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2s->TxXferCount--;
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80073a2:	b29b      	uxth	r3, r3
 80073a4:	3b01      	subs	r3, #1
 80073a6:	b29a      	uxth	r2, r3
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	855a      	strh	r2, [r3, #42]	@ 0x2a

    /* Wait until TXE flag is set */
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_TXE, SET, Timeout) != HAL_OK)
 80073ac:	683b      	ldr	r3, [r7, #0]
 80073ae:	2201      	movs	r2, #1
 80073b0:	2102      	movs	r1, #2
 80073b2:	68f8      	ldr	r0, [r7, #12]
 80073b4:	f000 f958 	bl	8007668 <I2S_WaitFlagStateUntilTimeout>
 80073b8:	4603      	mov	r3, r0
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	d00f      	beq.n	80073de <HAL_I2S_Transmit+0x146>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80073c2:	f043 0201 	orr.w	r2, r3, #1
 80073c6:	68fb      	ldr	r3, [r7, #12]
 80073c8:	645a      	str	r2, [r3, #68]	@ 0x44
      hi2s->State = HAL_I2S_STATE_READY;
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	2201      	movs	r2, #1
 80073ce:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      __HAL_UNLOCK(hi2s);
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	2200      	movs	r2, #0
 80073d6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 80073da:	2301      	movs	r3, #1
 80073dc:	e045      	b.n	800746a <HAL_I2S_Transmit+0x1d2>
    }

    /* Check if an underrun occurs */
    if (__HAL_I2S_GET_FLAG(hi2s, I2S_FLAG_UDR) == SET)
 80073de:	68fb      	ldr	r3, [r7, #12]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	689b      	ldr	r3, [r3, #8]
 80073e4:	f003 0308 	and.w	r3, r3, #8
 80073e8:	2b08      	cmp	r3, #8
 80073ea:	d10c      	bne.n	8007406 <HAL_I2S_Transmit+0x16e>
    {
      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80073ec:	2300      	movs	r3, #0
 80073ee:	613b      	str	r3, [r7, #16]
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	689b      	ldr	r3, [r3, #8]
 80073f6:	613b      	str	r3, [r7, #16]
 80073f8:	693b      	ldr	r3, [r7, #16]

      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80073fe:	f043 0204 	orr.w	r2, r3, #4
 8007402:	68fb      	ldr	r3, [r7, #12]
 8007404:	645a      	str	r2, [r3, #68]	@ 0x44
  while (hi2s->TxXferCount > 0U)
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800740a:	b29b      	uxth	r3, r3
 800740c:	2b00      	cmp	r3, #0
 800740e:	d1bb      	bne.n	8007388 <HAL_I2S_Transmit+0xf0>
    }
  }

  /* Check if Slave mode is selected */
  if (((tmpreg_cfgr & SPI_I2SCFGR_I2SCFG) == I2S_MODE_SLAVE_TX)
 8007410:	697b      	ldr	r3, [r7, #20]
 8007412:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007416:	2b00      	cmp	r3, #0
 8007418:	d005      	beq.n	8007426 <HAL_I2S_Transmit+0x18e>
      || ((tmpreg_cfgr & SPI_I2SCFGR_I2SCFG) == I2S_MODE_SLAVE_RX))
 800741a:	697b      	ldr	r3, [r7, #20]
 800741c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007420:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007424:	d118      	bne.n	8007458 <HAL_I2S_Transmit+0x1c0>
  {
    /* Wait until Busy flag is reset */
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_BSY, RESET, Timeout) != HAL_OK)
 8007426:	683b      	ldr	r3, [r7, #0]
 8007428:	2200      	movs	r2, #0
 800742a:	2180      	movs	r1, #128	@ 0x80
 800742c:	68f8      	ldr	r0, [r7, #12]
 800742e:	f000 f91b 	bl	8007668 <I2S_WaitFlagStateUntilTimeout>
 8007432:	4603      	mov	r3, r0
 8007434:	2b00      	cmp	r3, #0
 8007436:	d00f      	beq.n	8007458 <HAL_I2S_Transmit+0x1c0>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800743c:	f043 0201 	orr.w	r2, r3, #1
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	645a      	str	r2, [r3, #68]	@ 0x44
      hi2s->State = HAL_I2S_STATE_READY;
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	2201      	movs	r2, #1
 8007448:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      __HAL_UNLOCK(hi2s);
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	2200      	movs	r2, #0
 8007450:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8007454:	2301      	movs	r3, #1
 8007456:	e008      	b.n	800746a <HAL_I2S_Transmit+0x1d2>
    }
  }

  hi2s->State = HAL_I2S_STATE_READY;
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	2201      	movs	r2, #1
 800745c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  __HAL_UNLOCK(hi2s);
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	2200      	movs	r2, #0
 8007464:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  return HAL_OK;
 8007468:	2300      	movs	r3, #0
}
 800746a:	4618      	mov	r0, r3
 800746c:	3718      	adds	r7, #24
 800746e:	46bd      	mov	sp, r7
 8007470:	bd80      	pop	{r7, pc}

08007472 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8007472:	b480      	push	{r7}
 8007474:	b083      	sub	sp, #12
 8007476:	af00      	add	r7, sp, #0
 8007478:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 800747a:	bf00      	nop
 800747c:	370c      	adds	r7, #12
 800747e:	46bd      	mov	sp, r7
 8007480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007484:	4770      	bx	lr

08007486 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8007486:	b480      	push	{r7}
 8007488:	b083      	sub	sp, #12
 800748a:	af00      	add	r7, sp, #0
 800748c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 800748e:	bf00      	nop
 8007490:	370c      	adds	r7, #12
 8007492:	46bd      	mov	sp, r7
 8007494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007498:	4770      	bx	lr

0800749a <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 800749a:	b580      	push	{r7, lr}
 800749c:	b082      	sub	sp, #8
 800749e:	af00      	add	r7, sp, #0
 80074a0:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80074a6:	881a      	ldrh	r2, [r3, #0]
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80074b2:	1c9a      	adds	r2, r3, #2
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	625a      	str	r2, [r3, #36]	@ 0x24
  hi2s->TxXferCount--;
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80074bc:	b29b      	uxth	r3, r3
 80074be:	3b01      	subs	r3, #1
 80074c0:	b29a      	uxth	r2, r3
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80074ca:	b29b      	uxth	r3, r3
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	d10e      	bne.n	80074ee <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	685a      	ldr	r2, [r3, #4]
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80074de:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	2201      	movs	r2, #1
 80074e4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 80074e8:	6878      	ldr	r0, [r7, #4]
 80074ea:	f7ff ffc2 	bl	8007472 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80074ee:	bf00      	nop
 80074f0:	3708      	adds	r7, #8
 80074f2:	46bd      	mov	sp, r7
 80074f4:	bd80      	pop	{r7, pc}

080074f6 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 80074f6:	b580      	push	{r7, lr}
 80074f8:	b082      	sub	sp, #8
 80074fa:	af00      	add	r7, sp, #0
 80074fc:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	68da      	ldr	r2, [r3, #12]
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007508:	b292      	uxth	r2, r2
 800750a:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007510:	1c9a      	adds	r2, r3, #2
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2s->RxXferCount--;
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800751a:	b29b      	uxth	r3, r3
 800751c:	3b01      	subs	r3, #1
 800751e:	b29a      	uxth	r2, r3
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8007528:	b29b      	uxth	r3, r3
 800752a:	2b00      	cmp	r3, #0
 800752c:	d10e      	bne.n	800754c <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	685a      	ldr	r2, [r3, #4]
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800753c:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	2201      	movs	r2, #1
 8007542:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8007546:	6878      	ldr	r0, [r7, #4]
 8007548:	f7fa fe3a 	bl	80021c0 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 800754c:	bf00      	nop
 800754e:	3708      	adds	r7, #8
 8007550:	46bd      	mov	sp, r7
 8007552:	bd80      	pop	{r7, pc}

08007554 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8007554:	b580      	push	{r7, lr}
 8007556:	b086      	sub	sp, #24
 8007558:	af00      	add	r7, sp, #0
 800755a:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	689b      	ldr	r3, [r3, #8]
 8007562:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800756a:	b2db      	uxtb	r3, r3
 800756c:	2b04      	cmp	r3, #4
 800756e:	d13a      	bne.n	80075e6 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8007570:	697b      	ldr	r3, [r7, #20]
 8007572:	f003 0301 	and.w	r3, r3, #1
 8007576:	2b01      	cmp	r3, #1
 8007578:	d109      	bne.n	800758e <I2S_IRQHandler+0x3a>
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	685b      	ldr	r3, [r3, #4]
 8007580:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007584:	2b40      	cmp	r3, #64	@ 0x40
 8007586:	d102      	bne.n	800758e <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8007588:	6878      	ldr	r0, [r7, #4]
 800758a:	f7ff ffb4 	bl	80074f6 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 800758e:	697b      	ldr	r3, [r7, #20]
 8007590:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007594:	2b40      	cmp	r3, #64	@ 0x40
 8007596:	d126      	bne.n	80075e6 <I2S_IRQHandler+0x92>
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	685b      	ldr	r3, [r3, #4]
 800759e:	f003 0320 	and.w	r3, r3, #32
 80075a2:	2b20      	cmp	r3, #32
 80075a4:	d11f      	bne.n	80075e6 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	685a      	ldr	r2, [r3, #4]
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80075b4:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80075b6:	2300      	movs	r3, #0
 80075b8:	613b      	str	r3, [r7, #16]
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	68db      	ldr	r3, [r3, #12]
 80075c0:	613b      	str	r3, [r7, #16]
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	689b      	ldr	r3, [r3, #8]
 80075c8:	613b      	str	r3, [r7, #16]
 80075ca:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	2201      	movs	r2, #1
 80075d0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80075d8:	f043 0202 	orr.w	r2, r3, #2
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80075e0:	6878      	ldr	r0, [r7, #4]
 80075e2:	f7ff ff50 	bl	8007486 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80075ec:	b2db      	uxtb	r3, r3
 80075ee:	2b03      	cmp	r3, #3
 80075f0:	d136      	bne.n	8007660 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 80075f2:	697b      	ldr	r3, [r7, #20]
 80075f4:	f003 0302 	and.w	r3, r3, #2
 80075f8:	2b02      	cmp	r3, #2
 80075fa:	d109      	bne.n	8007610 <I2S_IRQHandler+0xbc>
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	685b      	ldr	r3, [r3, #4]
 8007602:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007606:	2b80      	cmp	r3, #128	@ 0x80
 8007608:	d102      	bne.n	8007610 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 800760a:	6878      	ldr	r0, [r7, #4]
 800760c:	f7ff ff45 	bl	800749a <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8007610:	697b      	ldr	r3, [r7, #20]
 8007612:	f003 0308 	and.w	r3, r3, #8
 8007616:	2b08      	cmp	r3, #8
 8007618:	d122      	bne.n	8007660 <I2S_IRQHandler+0x10c>
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	685b      	ldr	r3, [r3, #4]
 8007620:	f003 0320 	and.w	r3, r3, #32
 8007624:	2b20      	cmp	r3, #32
 8007626:	d11b      	bne.n	8007660 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	685a      	ldr	r2, [r3, #4]
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8007636:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8007638:	2300      	movs	r3, #0
 800763a:	60fb      	str	r3, [r7, #12]
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	689b      	ldr	r3, [r3, #8]
 8007642:	60fb      	str	r3, [r7, #12]
 8007644:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	2201      	movs	r2, #1
 800764a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007652:	f043 0204 	orr.w	r2, r3, #4
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800765a:	6878      	ldr	r0, [r7, #4]
 800765c:	f7ff ff13 	bl	8007486 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8007660:	bf00      	nop
 8007662:	3718      	adds	r7, #24
 8007664:	46bd      	mov	sp, r7
 8007666:	bd80      	pop	{r7, pc}

08007668 <I2S_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef I2S_WaitFlagStateUntilTimeout(I2S_HandleTypeDef *hi2s, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout)
{
 8007668:	b580      	push	{r7, lr}
 800766a:	b086      	sub	sp, #24
 800766c:	af00      	add	r7, sp, #0
 800766e:	60f8      	str	r0, [r7, #12]
 8007670:	60b9      	str	r1, [r7, #8]
 8007672:	603b      	str	r3, [r7, #0]
 8007674:	4613      	mov	r3, r2
 8007676:	71fb      	strb	r3, [r7, #7]
  uint32_t tickstart;

  /* Get tick */
  tickstart = HAL_GetTick();
 8007678:	f7fe f93e 	bl	80058f8 <HAL_GetTick>
 800767c:	6178      	str	r0, [r7, #20]

  /* Wait until flag is set to status*/
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 800767e:	e018      	b.n	80076b2 <I2S_WaitFlagStateUntilTimeout+0x4a>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007680:	683b      	ldr	r3, [r7, #0]
 8007682:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007686:	d014      	beq.n	80076b2 <I2S_WaitFlagStateUntilTimeout+0x4a>
    {
      if (((HAL_GetTick() - tickstart) >= Timeout) || (Timeout == 0U))
 8007688:	f7fe f936 	bl	80058f8 <HAL_GetTick>
 800768c:	4602      	mov	r2, r0
 800768e:	697b      	ldr	r3, [r7, #20]
 8007690:	1ad3      	subs	r3, r2, r3
 8007692:	683a      	ldr	r2, [r7, #0]
 8007694:	429a      	cmp	r2, r3
 8007696:	d902      	bls.n	800769e <I2S_WaitFlagStateUntilTimeout+0x36>
 8007698:	683b      	ldr	r3, [r7, #0]
 800769a:	2b00      	cmp	r3, #0
 800769c:	d109      	bne.n	80076b2 <I2S_WaitFlagStateUntilTimeout+0x4a>
      {
        /* Set the I2S State ready */
        hi2s->State = HAL_I2S_STATE_READY;
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	2201      	movs	r2, #1
 80076a2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2s);
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	2200      	movs	r2, #0
 80076aa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_TIMEOUT;
 80076ae:	2303      	movs	r3, #3
 80076b0:	e00f      	b.n	80076d2 <I2S_WaitFlagStateUntilTimeout+0x6a>
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 80076b2:	68fb      	ldr	r3, [r7, #12]
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	689a      	ldr	r2, [r3, #8]
 80076b8:	68bb      	ldr	r3, [r7, #8]
 80076ba:	4013      	ands	r3, r2
 80076bc:	68ba      	ldr	r2, [r7, #8]
 80076be:	429a      	cmp	r2, r3
 80076c0:	bf0c      	ite	eq
 80076c2:	2301      	moveq	r3, #1
 80076c4:	2300      	movne	r3, #0
 80076c6:	b2db      	uxtb	r3, r3
 80076c8:	461a      	mov	r2, r3
 80076ca:	79fb      	ldrb	r3, [r7, #7]
 80076cc:	429a      	cmp	r2, r3
 80076ce:	d1d7      	bne.n	8007680 <I2S_WaitFlagStateUntilTimeout+0x18>
      }
    }
  }
  return HAL_OK;
 80076d0:	2300      	movs	r3, #0
}
 80076d2:	4618      	mov	r0, r3
 80076d4:	3718      	adds	r7, #24
 80076d6:	46bd      	mov	sp, r7
 80076d8:	bd80      	pop	{r7, pc}
	...

080076dc <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80076dc:	b580      	push	{r7, lr}
 80076de:	b088      	sub	sp, #32
 80076e0:	af00      	add	r7, sp, #0
 80076e2:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	689b      	ldr	r3, [r3, #8]
 80076ea:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	4a92      	ldr	r2, [pc, #584]	@ (800793c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80076f2:	4293      	cmp	r3, r2
 80076f4:	d101      	bne.n	80076fa <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 80076f6:	4b92      	ldr	r3, [pc, #584]	@ (8007940 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80076f8:	e001      	b.n	80076fe <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 80076fa:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80076fe:	689b      	ldr	r3, [r3, #8]
 8007700:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	685b      	ldr	r3, [r3, #4]
 8007708:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	4a8b      	ldr	r2, [pc, #556]	@ (800793c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8007710:	4293      	cmp	r3, r2
 8007712:	d101      	bne.n	8007718 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8007714:	4b8a      	ldr	r3, [pc, #552]	@ (8007940 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8007716:	e001      	b.n	800771c <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8007718:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800771c:	685b      	ldr	r3, [r3, #4]
 800771e:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	685b      	ldr	r3, [r3, #4]
 8007724:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007728:	d004      	beq.n	8007734 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	685b      	ldr	r3, [r3, #4]
 800772e:	2b00      	cmp	r3, #0
 8007730:	f040 8099 	bne.w	8007866 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8007734:	69fb      	ldr	r3, [r7, #28]
 8007736:	f003 0302 	and.w	r3, r3, #2
 800773a:	2b02      	cmp	r3, #2
 800773c:	d107      	bne.n	800774e <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 800773e:	697b      	ldr	r3, [r7, #20]
 8007740:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007744:	2b00      	cmp	r3, #0
 8007746:	d002      	beq.n	800774e <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8007748:	6878      	ldr	r0, [r7, #4]
 800774a:	f000 f925 	bl	8007998 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 800774e:	69bb      	ldr	r3, [r7, #24]
 8007750:	f003 0301 	and.w	r3, r3, #1
 8007754:	2b01      	cmp	r3, #1
 8007756:	d107      	bne.n	8007768 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8007758:	693b      	ldr	r3, [r7, #16]
 800775a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800775e:	2b00      	cmp	r3, #0
 8007760:	d002      	beq.n	8007768 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8007762:	6878      	ldr	r0, [r7, #4]
 8007764:	f000 f9c8 	bl	8007af8 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8007768:	69bb      	ldr	r3, [r7, #24]
 800776a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800776e:	2b40      	cmp	r3, #64	@ 0x40
 8007770:	d13a      	bne.n	80077e8 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8007772:	693b      	ldr	r3, [r7, #16]
 8007774:	f003 0320 	and.w	r3, r3, #32
 8007778:	2b00      	cmp	r3, #0
 800777a:	d035      	beq.n	80077e8 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	4a6e      	ldr	r2, [pc, #440]	@ (800793c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8007782:	4293      	cmp	r3, r2
 8007784:	d101      	bne.n	800778a <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8007786:	4b6e      	ldr	r3, [pc, #440]	@ (8007940 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8007788:	e001      	b.n	800778e <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 800778a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800778e:	685a      	ldr	r2, [r3, #4]
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	4969      	ldr	r1, [pc, #420]	@ (800793c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8007796:	428b      	cmp	r3, r1
 8007798:	d101      	bne.n	800779e <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 800779a:	4b69      	ldr	r3, [pc, #420]	@ (8007940 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800779c:	e001      	b.n	80077a2 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 800779e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80077a2:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80077a6:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	685a      	ldr	r2, [r3, #4]
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80077b6:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80077b8:	2300      	movs	r3, #0
 80077ba:	60fb      	str	r3, [r7, #12]
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	68db      	ldr	r3, [r3, #12]
 80077c2:	60fb      	str	r3, [r7, #12]
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	689b      	ldr	r3, [r3, #8]
 80077ca:	60fb      	str	r3, [r7, #12]
 80077cc:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	2201      	movs	r2, #1
 80077d2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80077da:	f043 0202 	orr.w	r2, r3, #2
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80077e2:	6878      	ldr	r0, [r7, #4]
 80077e4:	f7ff fe4f 	bl	8007486 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80077e8:	69fb      	ldr	r3, [r7, #28]
 80077ea:	f003 0308 	and.w	r3, r3, #8
 80077ee:	2b08      	cmp	r3, #8
 80077f0:	f040 80c3 	bne.w	800797a <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 80077f4:	697b      	ldr	r3, [r7, #20]
 80077f6:	f003 0320 	and.w	r3, r3, #32
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	f000 80bd 	beq.w	800797a <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	685a      	ldr	r2, [r3, #4]
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 800780e:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	4a49      	ldr	r2, [pc, #292]	@ (800793c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8007816:	4293      	cmp	r3, r2
 8007818:	d101      	bne.n	800781e <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 800781a:	4b49      	ldr	r3, [pc, #292]	@ (8007940 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800781c:	e001      	b.n	8007822 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 800781e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8007822:	685a      	ldr	r2, [r3, #4]
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	4944      	ldr	r1, [pc, #272]	@ (800793c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800782a:	428b      	cmp	r3, r1
 800782c:	d101      	bne.n	8007832 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 800782e:	4b44      	ldr	r3, [pc, #272]	@ (8007940 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8007830:	e001      	b.n	8007836 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8007832:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8007836:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800783a:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 800783c:	2300      	movs	r3, #0
 800783e:	60bb      	str	r3, [r7, #8]
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	689b      	ldr	r3, [r3, #8]
 8007846:	60bb      	str	r3, [r7, #8]
 8007848:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	2201      	movs	r2, #1
 800784e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007856:	f043 0204 	orr.w	r2, r3, #4
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800785e:	6878      	ldr	r0, [r7, #4]
 8007860:	f7ff fe11 	bl	8007486 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8007864:	e089      	b.n	800797a <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8007866:	69bb      	ldr	r3, [r7, #24]
 8007868:	f003 0302 	and.w	r3, r3, #2
 800786c:	2b02      	cmp	r3, #2
 800786e:	d107      	bne.n	8007880 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8007870:	693b      	ldr	r3, [r7, #16]
 8007872:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007876:	2b00      	cmp	r3, #0
 8007878:	d002      	beq.n	8007880 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 800787a:	6878      	ldr	r0, [r7, #4]
 800787c:	f000 f8be 	bl	80079fc <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8007880:	69fb      	ldr	r3, [r7, #28]
 8007882:	f003 0301 	and.w	r3, r3, #1
 8007886:	2b01      	cmp	r3, #1
 8007888:	d107      	bne.n	800789a <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 800788a:	697b      	ldr	r3, [r7, #20]
 800788c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007890:	2b00      	cmp	r3, #0
 8007892:	d002      	beq.n	800789a <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8007894:	6878      	ldr	r0, [r7, #4]
 8007896:	f000 f8fd 	bl	8007a94 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800789a:	69fb      	ldr	r3, [r7, #28]
 800789c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80078a0:	2b40      	cmp	r3, #64	@ 0x40
 80078a2:	d12f      	bne.n	8007904 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 80078a4:	697b      	ldr	r3, [r7, #20]
 80078a6:	f003 0320 	and.w	r3, r3, #32
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	d02a      	beq.n	8007904 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	685a      	ldr	r2, [r3, #4]
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80078bc:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	4a1e      	ldr	r2, [pc, #120]	@ (800793c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80078c4:	4293      	cmp	r3, r2
 80078c6:	d101      	bne.n	80078cc <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 80078c8:	4b1d      	ldr	r3, [pc, #116]	@ (8007940 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80078ca:	e001      	b.n	80078d0 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 80078cc:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80078d0:	685a      	ldr	r2, [r3, #4]
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	4919      	ldr	r1, [pc, #100]	@ (800793c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80078d8:	428b      	cmp	r3, r1
 80078da:	d101      	bne.n	80078e0 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 80078dc:	4b18      	ldr	r3, [pc, #96]	@ (8007940 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80078de:	e001      	b.n	80078e4 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 80078e0:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80078e4:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80078e8:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	2201      	movs	r2, #1
 80078ee:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80078f6:	f043 0202 	orr.w	r2, r3, #2
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80078fe:	6878      	ldr	r0, [r7, #4]
 8007900:	f7ff fdc1 	bl	8007486 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8007904:	69bb      	ldr	r3, [r7, #24]
 8007906:	f003 0308 	and.w	r3, r3, #8
 800790a:	2b08      	cmp	r3, #8
 800790c:	d136      	bne.n	800797c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 800790e:	693b      	ldr	r3, [r7, #16]
 8007910:	f003 0320 	and.w	r3, r3, #32
 8007914:	2b00      	cmp	r3, #0
 8007916:	d031      	beq.n	800797c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	4a07      	ldr	r2, [pc, #28]	@ (800793c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800791e:	4293      	cmp	r3, r2
 8007920:	d101      	bne.n	8007926 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8007922:	4b07      	ldr	r3, [pc, #28]	@ (8007940 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8007924:	e001      	b.n	800792a <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8007926:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800792a:	685a      	ldr	r2, [r3, #4]
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	4902      	ldr	r1, [pc, #8]	@ (800793c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8007932:	428b      	cmp	r3, r1
 8007934:	d106      	bne.n	8007944 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 8007936:	4b02      	ldr	r3, [pc, #8]	@ (8007940 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8007938:	e006      	b.n	8007948 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 800793a:	bf00      	nop
 800793c:	40003800 	.word	0x40003800
 8007940:	40003400 	.word	0x40003400
 8007944:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8007948:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 800794c:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	685a      	ldr	r2, [r3, #4]
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800795c:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	2201      	movs	r2, #1
 8007962:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800796a:	f043 0204 	orr.w	r2, r3, #4
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8007972:	6878      	ldr	r0, [r7, #4]
 8007974:	f7ff fd87 	bl	8007486 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8007978:	e000      	b.n	800797c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800797a:	bf00      	nop
}
 800797c:	bf00      	nop
 800797e:	3720      	adds	r7, #32
 8007980:	46bd      	mov	sp, r7
 8007982:	bd80      	pop	{r7, pc}

08007984 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8007984:	b480      	push	{r7}
 8007986:	b083      	sub	sp, #12
 8007988:	af00      	add	r7, sp, #0
 800798a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 800798c:	bf00      	nop
 800798e:	370c      	adds	r7, #12
 8007990:	46bd      	mov	sp, r7
 8007992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007996:	4770      	bx	lr

08007998 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8007998:	b580      	push	{r7, lr}
 800799a:	b082      	sub	sp, #8
 800799c:	af00      	add	r7, sp, #0
 800799e:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80079a4:	1c99      	adds	r1, r3, #2
 80079a6:	687a      	ldr	r2, [r7, #4]
 80079a8:	6251      	str	r1, [r2, #36]	@ 0x24
 80079aa:	881a      	ldrh	r2, [r3, #0]
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80079b6:	b29b      	uxth	r3, r3
 80079b8:	3b01      	subs	r3, #1
 80079ba:	b29a      	uxth	r2, r3
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80079c4:	b29b      	uxth	r3, r3
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	d113      	bne.n	80079f2 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	685a      	ldr	r2, [r3, #4]
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80079d8:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80079de:	b29b      	uxth	r3, r3
 80079e0:	2b00      	cmp	r3, #0
 80079e2:	d106      	bne.n	80079f2 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	2201      	movs	r2, #1
 80079e8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80079ec:	6878      	ldr	r0, [r7, #4]
 80079ee:	f7ff ffc9 	bl	8007984 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80079f2:	bf00      	nop
 80079f4:	3708      	adds	r7, #8
 80079f6:	46bd      	mov	sp, r7
 80079f8:	bd80      	pop	{r7, pc}
	...

080079fc <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80079fc:	b580      	push	{r7, lr}
 80079fe:	b082      	sub	sp, #8
 8007a00:	af00      	add	r7, sp, #0
 8007a02:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007a08:	1c99      	adds	r1, r3, #2
 8007a0a:	687a      	ldr	r2, [r7, #4]
 8007a0c:	6251      	str	r1, [r2, #36]	@ 0x24
 8007a0e:	8819      	ldrh	r1, [r3, #0]
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	4a1d      	ldr	r2, [pc, #116]	@ (8007a8c <I2SEx_TxISR_I2SExt+0x90>)
 8007a16:	4293      	cmp	r3, r2
 8007a18:	d101      	bne.n	8007a1e <I2SEx_TxISR_I2SExt+0x22>
 8007a1a:	4b1d      	ldr	r3, [pc, #116]	@ (8007a90 <I2SEx_TxISR_I2SExt+0x94>)
 8007a1c:	e001      	b.n	8007a22 <I2SEx_TxISR_I2SExt+0x26>
 8007a1e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8007a22:	460a      	mov	r2, r1
 8007a24:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007a2a:	b29b      	uxth	r3, r3
 8007a2c:	3b01      	subs	r3, #1
 8007a2e:	b29a      	uxth	r2, r3
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007a38:	b29b      	uxth	r3, r3
 8007a3a:	2b00      	cmp	r3, #0
 8007a3c:	d121      	bne.n	8007a82 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	4a12      	ldr	r2, [pc, #72]	@ (8007a8c <I2SEx_TxISR_I2SExt+0x90>)
 8007a44:	4293      	cmp	r3, r2
 8007a46:	d101      	bne.n	8007a4c <I2SEx_TxISR_I2SExt+0x50>
 8007a48:	4b11      	ldr	r3, [pc, #68]	@ (8007a90 <I2SEx_TxISR_I2SExt+0x94>)
 8007a4a:	e001      	b.n	8007a50 <I2SEx_TxISR_I2SExt+0x54>
 8007a4c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8007a50:	685a      	ldr	r2, [r3, #4]
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	490d      	ldr	r1, [pc, #52]	@ (8007a8c <I2SEx_TxISR_I2SExt+0x90>)
 8007a58:	428b      	cmp	r3, r1
 8007a5a:	d101      	bne.n	8007a60 <I2SEx_TxISR_I2SExt+0x64>
 8007a5c:	4b0c      	ldr	r3, [pc, #48]	@ (8007a90 <I2SEx_TxISR_I2SExt+0x94>)
 8007a5e:	e001      	b.n	8007a64 <I2SEx_TxISR_I2SExt+0x68>
 8007a60:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8007a64:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8007a68:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8007a6e:	b29b      	uxth	r3, r3
 8007a70:	2b00      	cmp	r3, #0
 8007a72:	d106      	bne.n	8007a82 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	2201      	movs	r2, #1
 8007a78:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8007a7c:	6878      	ldr	r0, [r7, #4]
 8007a7e:	f7ff ff81 	bl	8007984 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8007a82:	bf00      	nop
 8007a84:	3708      	adds	r7, #8
 8007a86:	46bd      	mov	sp, r7
 8007a88:	bd80      	pop	{r7, pc}
 8007a8a:	bf00      	nop
 8007a8c:	40003800 	.word	0x40003800
 8007a90:	40003400 	.word	0x40003400

08007a94 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8007a94:	b580      	push	{r7, lr}
 8007a96:	b082      	sub	sp, #8
 8007a98:	af00      	add	r7, sp, #0
 8007a9a:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	68d8      	ldr	r0, [r3, #12]
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007aa6:	1c99      	adds	r1, r3, #2
 8007aa8:	687a      	ldr	r2, [r7, #4]
 8007aaa:	62d1      	str	r1, [r2, #44]	@ 0x2c
 8007aac:	b282      	uxth	r2, r0
 8007aae:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8007ab4:	b29b      	uxth	r3, r3
 8007ab6:	3b01      	subs	r3, #1
 8007ab8:	b29a      	uxth	r2, r3
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8007ac2:	b29b      	uxth	r3, r3
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	d113      	bne.n	8007af0 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	685a      	ldr	r2, [r3, #4]
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8007ad6:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007adc:	b29b      	uxth	r3, r3
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	d106      	bne.n	8007af0 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	2201      	movs	r2, #1
 8007ae6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8007aea:	6878      	ldr	r0, [r7, #4]
 8007aec:	f7ff ff4a 	bl	8007984 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8007af0:	bf00      	nop
 8007af2:	3708      	adds	r7, #8
 8007af4:	46bd      	mov	sp, r7
 8007af6:	bd80      	pop	{r7, pc}

08007af8 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8007af8:	b580      	push	{r7, lr}
 8007afa:	b082      	sub	sp, #8
 8007afc:	af00      	add	r7, sp, #0
 8007afe:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	4a20      	ldr	r2, [pc, #128]	@ (8007b88 <I2SEx_RxISR_I2SExt+0x90>)
 8007b06:	4293      	cmp	r3, r2
 8007b08:	d101      	bne.n	8007b0e <I2SEx_RxISR_I2SExt+0x16>
 8007b0a:	4b20      	ldr	r3, [pc, #128]	@ (8007b8c <I2SEx_RxISR_I2SExt+0x94>)
 8007b0c:	e001      	b.n	8007b12 <I2SEx_RxISR_I2SExt+0x1a>
 8007b0e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8007b12:	68d8      	ldr	r0, [r3, #12]
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007b18:	1c99      	adds	r1, r3, #2
 8007b1a:	687a      	ldr	r2, [r7, #4]
 8007b1c:	62d1      	str	r1, [r2, #44]	@ 0x2c
 8007b1e:	b282      	uxth	r2, r0
 8007b20:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8007b26:	b29b      	uxth	r3, r3
 8007b28:	3b01      	subs	r3, #1
 8007b2a:	b29a      	uxth	r2, r3
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8007b34:	b29b      	uxth	r3, r3
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	d121      	bne.n	8007b7e <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	4a12      	ldr	r2, [pc, #72]	@ (8007b88 <I2SEx_RxISR_I2SExt+0x90>)
 8007b40:	4293      	cmp	r3, r2
 8007b42:	d101      	bne.n	8007b48 <I2SEx_RxISR_I2SExt+0x50>
 8007b44:	4b11      	ldr	r3, [pc, #68]	@ (8007b8c <I2SEx_RxISR_I2SExt+0x94>)
 8007b46:	e001      	b.n	8007b4c <I2SEx_RxISR_I2SExt+0x54>
 8007b48:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8007b4c:	685a      	ldr	r2, [r3, #4]
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	490d      	ldr	r1, [pc, #52]	@ (8007b88 <I2SEx_RxISR_I2SExt+0x90>)
 8007b54:	428b      	cmp	r3, r1
 8007b56:	d101      	bne.n	8007b5c <I2SEx_RxISR_I2SExt+0x64>
 8007b58:	4b0c      	ldr	r3, [pc, #48]	@ (8007b8c <I2SEx_RxISR_I2SExt+0x94>)
 8007b5a:	e001      	b.n	8007b60 <I2SEx_RxISR_I2SExt+0x68>
 8007b5c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8007b60:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8007b64:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007b6a:	b29b      	uxth	r3, r3
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	d106      	bne.n	8007b7e <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	2201      	movs	r2, #1
 8007b74:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8007b78:	6878      	ldr	r0, [r7, #4]
 8007b7a:	f7ff ff03 	bl	8007984 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8007b7e:	bf00      	nop
 8007b80:	3708      	adds	r7, #8
 8007b82:	46bd      	mov	sp, r7
 8007b84:	bd80      	pop	{r7, pc}
 8007b86:	bf00      	nop
 8007b88:	40003800 	.word	0x40003800
 8007b8c:	40003400 	.word	0x40003400

08007b90 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007b90:	b580      	push	{r7, lr}
 8007b92:	b086      	sub	sp, #24
 8007b94:	af00      	add	r7, sp, #0
 8007b96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	d101      	bne.n	8007ba2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007b9e:	2301      	movs	r3, #1
 8007ba0:	e267      	b.n	8008072 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	f003 0301 	and.w	r3, r3, #1
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	d075      	beq.n	8007c9a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8007bae:	4b88      	ldr	r3, [pc, #544]	@ (8007dd0 <HAL_RCC_OscConfig+0x240>)
 8007bb0:	689b      	ldr	r3, [r3, #8]
 8007bb2:	f003 030c 	and.w	r3, r3, #12
 8007bb6:	2b04      	cmp	r3, #4
 8007bb8:	d00c      	beq.n	8007bd4 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007bba:	4b85      	ldr	r3, [pc, #532]	@ (8007dd0 <HAL_RCC_OscConfig+0x240>)
 8007bbc:	689b      	ldr	r3, [r3, #8]
 8007bbe:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8007bc2:	2b08      	cmp	r3, #8
 8007bc4:	d112      	bne.n	8007bec <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007bc6:	4b82      	ldr	r3, [pc, #520]	@ (8007dd0 <HAL_RCC_OscConfig+0x240>)
 8007bc8:	685b      	ldr	r3, [r3, #4]
 8007bca:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007bce:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007bd2:	d10b      	bne.n	8007bec <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007bd4:	4b7e      	ldr	r3, [pc, #504]	@ (8007dd0 <HAL_RCC_OscConfig+0x240>)
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007bdc:	2b00      	cmp	r3, #0
 8007bde:	d05b      	beq.n	8007c98 <HAL_RCC_OscConfig+0x108>
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	685b      	ldr	r3, [r3, #4]
 8007be4:	2b00      	cmp	r3, #0
 8007be6:	d157      	bne.n	8007c98 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8007be8:	2301      	movs	r3, #1
 8007bea:	e242      	b.n	8008072 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	685b      	ldr	r3, [r3, #4]
 8007bf0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007bf4:	d106      	bne.n	8007c04 <HAL_RCC_OscConfig+0x74>
 8007bf6:	4b76      	ldr	r3, [pc, #472]	@ (8007dd0 <HAL_RCC_OscConfig+0x240>)
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	4a75      	ldr	r2, [pc, #468]	@ (8007dd0 <HAL_RCC_OscConfig+0x240>)
 8007bfc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007c00:	6013      	str	r3, [r2, #0]
 8007c02:	e01d      	b.n	8007c40 <HAL_RCC_OscConfig+0xb0>
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	685b      	ldr	r3, [r3, #4]
 8007c08:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007c0c:	d10c      	bne.n	8007c28 <HAL_RCC_OscConfig+0x98>
 8007c0e:	4b70      	ldr	r3, [pc, #448]	@ (8007dd0 <HAL_RCC_OscConfig+0x240>)
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	4a6f      	ldr	r2, [pc, #444]	@ (8007dd0 <HAL_RCC_OscConfig+0x240>)
 8007c14:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8007c18:	6013      	str	r3, [r2, #0]
 8007c1a:	4b6d      	ldr	r3, [pc, #436]	@ (8007dd0 <HAL_RCC_OscConfig+0x240>)
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	4a6c      	ldr	r2, [pc, #432]	@ (8007dd0 <HAL_RCC_OscConfig+0x240>)
 8007c20:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007c24:	6013      	str	r3, [r2, #0]
 8007c26:	e00b      	b.n	8007c40 <HAL_RCC_OscConfig+0xb0>
 8007c28:	4b69      	ldr	r3, [pc, #420]	@ (8007dd0 <HAL_RCC_OscConfig+0x240>)
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	4a68      	ldr	r2, [pc, #416]	@ (8007dd0 <HAL_RCC_OscConfig+0x240>)
 8007c2e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007c32:	6013      	str	r3, [r2, #0]
 8007c34:	4b66      	ldr	r3, [pc, #408]	@ (8007dd0 <HAL_RCC_OscConfig+0x240>)
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	4a65      	ldr	r2, [pc, #404]	@ (8007dd0 <HAL_RCC_OscConfig+0x240>)
 8007c3a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007c3e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	685b      	ldr	r3, [r3, #4]
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	d013      	beq.n	8007c70 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007c48:	f7fd fe56 	bl	80058f8 <HAL_GetTick>
 8007c4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007c4e:	e008      	b.n	8007c62 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007c50:	f7fd fe52 	bl	80058f8 <HAL_GetTick>
 8007c54:	4602      	mov	r2, r0
 8007c56:	693b      	ldr	r3, [r7, #16]
 8007c58:	1ad3      	subs	r3, r2, r3
 8007c5a:	2b64      	cmp	r3, #100	@ 0x64
 8007c5c:	d901      	bls.n	8007c62 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8007c5e:	2303      	movs	r3, #3
 8007c60:	e207      	b.n	8008072 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007c62:	4b5b      	ldr	r3, [pc, #364]	@ (8007dd0 <HAL_RCC_OscConfig+0x240>)
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007c6a:	2b00      	cmp	r3, #0
 8007c6c:	d0f0      	beq.n	8007c50 <HAL_RCC_OscConfig+0xc0>
 8007c6e:	e014      	b.n	8007c9a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007c70:	f7fd fe42 	bl	80058f8 <HAL_GetTick>
 8007c74:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007c76:	e008      	b.n	8007c8a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007c78:	f7fd fe3e 	bl	80058f8 <HAL_GetTick>
 8007c7c:	4602      	mov	r2, r0
 8007c7e:	693b      	ldr	r3, [r7, #16]
 8007c80:	1ad3      	subs	r3, r2, r3
 8007c82:	2b64      	cmp	r3, #100	@ 0x64
 8007c84:	d901      	bls.n	8007c8a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8007c86:	2303      	movs	r3, #3
 8007c88:	e1f3      	b.n	8008072 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007c8a:	4b51      	ldr	r3, [pc, #324]	@ (8007dd0 <HAL_RCC_OscConfig+0x240>)
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007c92:	2b00      	cmp	r3, #0
 8007c94:	d1f0      	bne.n	8007c78 <HAL_RCC_OscConfig+0xe8>
 8007c96:	e000      	b.n	8007c9a <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007c98:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	f003 0302 	and.w	r3, r3, #2
 8007ca2:	2b00      	cmp	r3, #0
 8007ca4:	d063      	beq.n	8007d6e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8007ca6:	4b4a      	ldr	r3, [pc, #296]	@ (8007dd0 <HAL_RCC_OscConfig+0x240>)
 8007ca8:	689b      	ldr	r3, [r3, #8]
 8007caa:	f003 030c 	and.w	r3, r3, #12
 8007cae:	2b00      	cmp	r3, #0
 8007cb0:	d00b      	beq.n	8007cca <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007cb2:	4b47      	ldr	r3, [pc, #284]	@ (8007dd0 <HAL_RCC_OscConfig+0x240>)
 8007cb4:	689b      	ldr	r3, [r3, #8]
 8007cb6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8007cba:	2b08      	cmp	r3, #8
 8007cbc:	d11c      	bne.n	8007cf8 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007cbe:	4b44      	ldr	r3, [pc, #272]	@ (8007dd0 <HAL_RCC_OscConfig+0x240>)
 8007cc0:	685b      	ldr	r3, [r3, #4]
 8007cc2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	d116      	bne.n	8007cf8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007cca:	4b41      	ldr	r3, [pc, #260]	@ (8007dd0 <HAL_RCC_OscConfig+0x240>)
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	f003 0302 	and.w	r3, r3, #2
 8007cd2:	2b00      	cmp	r3, #0
 8007cd4:	d005      	beq.n	8007ce2 <HAL_RCC_OscConfig+0x152>
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	68db      	ldr	r3, [r3, #12]
 8007cda:	2b01      	cmp	r3, #1
 8007cdc:	d001      	beq.n	8007ce2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8007cde:	2301      	movs	r3, #1
 8007ce0:	e1c7      	b.n	8008072 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007ce2:	4b3b      	ldr	r3, [pc, #236]	@ (8007dd0 <HAL_RCC_OscConfig+0x240>)
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	691b      	ldr	r3, [r3, #16]
 8007cee:	00db      	lsls	r3, r3, #3
 8007cf0:	4937      	ldr	r1, [pc, #220]	@ (8007dd0 <HAL_RCC_OscConfig+0x240>)
 8007cf2:	4313      	orrs	r3, r2
 8007cf4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007cf6:	e03a      	b.n	8007d6e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	68db      	ldr	r3, [r3, #12]
 8007cfc:	2b00      	cmp	r3, #0
 8007cfe:	d020      	beq.n	8007d42 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007d00:	4b34      	ldr	r3, [pc, #208]	@ (8007dd4 <HAL_RCC_OscConfig+0x244>)
 8007d02:	2201      	movs	r2, #1
 8007d04:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007d06:	f7fd fdf7 	bl	80058f8 <HAL_GetTick>
 8007d0a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007d0c:	e008      	b.n	8007d20 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007d0e:	f7fd fdf3 	bl	80058f8 <HAL_GetTick>
 8007d12:	4602      	mov	r2, r0
 8007d14:	693b      	ldr	r3, [r7, #16]
 8007d16:	1ad3      	subs	r3, r2, r3
 8007d18:	2b02      	cmp	r3, #2
 8007d1a:	d901      	bls.n	8007d20 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8007d1c:	2303      	movs	r3, #3
 8007d1e:	e1a8      	b.n	8008072 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007d20:	4b2b      	ldr	r3, [pc, #172]	@ (8007dd0 <HAL_RCC_OscConfig+0x240>)
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	f003 0302 	and.w	r3, r3, #2
 8007d28:	2b00      	cmp	r3, #0
 8007d2a:	d0f0      	beq.n	8007d0e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007d2c:	4b28      	ldr	r3, [pc, #160]	@ (8007dd0 <HAL_RCC_OscConfig+0x240>)
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	691b      	ldr	r3, [r3, #16]
 8007d38:	00db      	lsls	r3, r3, #3
 8007d3a:	4925      	ldr	r1, [pc, #148]	@ (8007dd0 <HAL_RCC_OscConfig+0x240>)
 8007d3c:	4313      	orrs	r3, r2
 8007d3e:	600b      	str	r3, [r1, #0]
 8007d40:	e015      	b.n	8007d6e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007d42:	4b24      	ldr	r3, [pc, #144]	@ (8007dd4 <HAL_RCC_OscConfig+0x244>)
 8007d44:	2200      	movs	r2, #0
 8007d46:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007d48:	f7fd fdd6 	bl	80058f8 <HAL_GetTick>
 8007d4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007d4e:	e008      	b.n	8007d62 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007d50:	f7fd fdd2 	bl	80058f8 <HAL_GetTick>
 8007d54:	4602      	mov	r2, r0
 8007d56:	693b      	ldr	r3, [r7, #16]
 8007d58:	1ad3      	subs	r3, r2, r3
 8007d5a:	2b02      	cmp	r3, #2
 8007d5c:	d901      	bls.n	8007d62 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8007d5e:	2303      	movs	r3, #3
 8007d60:	e187      	b.n	8008072 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007d62:	4b1b      	ldr	r3, [pc, #108]	@ (8007dd0 <HAL_RCC_OscConfig+0x240>)
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	f003 0302 	and.w	r3, r3, #2
 8007d6a:	2b00      	cmp	r3, #0
 8007d6c:	d1f0      	bne.n	8007d50 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	f003 0308 	and.w	r3, r3, #8
 8007d76:	2b00      	cmp	r3, #0
 8007d78:	d036      	beq.n	8007de8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	695b      	ldr	r3, [r3, #20]
 8007d7e:	2b00      	cmp	r3, #0
 8007d80:	d016      	beq.n	8007db0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007d82:	4b15      	ldr	r3, [pc, #84]	@ (8007dd8 <HAL_RCC_OscConfig+0x248>)
 8007d84:	2201      	movs	r2, #1
 8007d86:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007d88:	f7fd fdb6 	bl	80058f8 <HAL_GetTick>
 8007d8c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007d8e:	e008      	b.n	8007da2 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007d90:	f7fd fdb2 	bl	80058f8 <HAL_GetTick>
 8007d94:	4602      	mov	r2, r0
 8007d96:	693b      	ldr	r3, [r7, #16]
 8007d98:	1ad3      	subs	r3, r2, r3
 8007d9a:	2b02      	cmp	r3, #2
 8007d9c:	d901      	bls.n	8007da2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8007d9e:	2303      	movs	r3, #3
 8007da0:	e167      	b.n	8008072 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007da2:	4b0b      	ldr	r3, [pc, #44]	@ (8007dd0 <HAL_RCC_OscConfig+0x240>)
 8007da4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007da6:	f003 0302 	and.w	r3, r3, #2
 8007daa:	2b00      	cmp	r3, #0
 8007dac:	d0f0      	beq.n	8007d90 <HAL_RCC_OscConfig+0x200>
 8007dae:	e01b      	b.n	8007de8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007db0:	4b09      	ldr	r3, [pc, #36]	@ (8007dd8 <HAL_RCC_OscConfig+0x248>)
 8007db2:	2200      	movs	r2, #0
 8007db4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007db6:	f7fd fd9f 	bl	80058f8 <HAL_GetTick>
 8007dba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007dbc:	e00e      	b.n	8007ddc <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007dbe:	f7fd fd9b 	bl	80058f8 <HAL_GetTick>
 8007dc2:	4602      	mov	r2, r0
 8007dc4:	693b      	ldr	r3, [r7, #16]
 8007dc6:	1ad3      	subs	r3, r2, r3
 8007dc8:	2b02      	cmp	r3, #2
 8007dca:	d907      	bls.n	8007ddc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8007dcc:	2303      	movs	r3, #3
 8007dce:	e150      	b.n	8008072 <HAL_RCC_OscConfig+0x4e2>
 8007dd0:	40023800 	.word	0x40023800
 8007dd4:	42470000 	.word	0x42470000
 8007dd8:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007ddc:	4b88      	ldr	r3, [pc, #544]	@ (8008000 <HAL_RCC_OscConfig+0x470>)
 8007dde:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007de0:	f003 0302 	and.w	r3, r3, #2
 8007de4:	2b00      	cmp	r3, #0
 8007de6:	d1ea      	bne.n	8007dbe <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	f003 0304 	and.w	r3, r3, #4
 8007df0:	2b00      	cmp	r3, #0
 8007df2:	f000 8097 	beq.w	8007f24 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007df6:	2300      	movs	r3, #0
 8007df8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007dfa:	4b81      	ldr	r3, [pc, #516]	@ (8008000 <HAL_RCC_OscConfig+0x470>)
 8007dfc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007dfe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007e02:	2b00      	cmp	r3, #0
 8007e04:	d10f      	bne.n	8007e26 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007e06:	2300      	movs	r3, #0
 8007e08:	60bb      	str	r3, [r7, #8]
 8007e0a:	4b7d      	ldr	r3, [pc, #500]	@ (8008000 <HAL_RCC_OscConfig+0x470>)
 8007e0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007e0e:	4a7c      	ldr	r2, [pc, #496]	@ (8008000 <HAL_RCC_OscConfig+0x470>)
 8007e10:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007e14:	6413      	str	r3, [r2, #64]	@ 0x40
 8007e16:	4b7a      	ldr	r3, [pc, #488]	@ (8008000 <HAL_RCC_OscConfig+0x470>)
 8007e18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007e1a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007e1e:	60bb      	str	r3, [r7, #8]
 8007e20:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007e22:	2301      	movs	r3, #1
 8007e24:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007e26:	4b77      	ldr	r3, [pc, #476]	@ (8008004 <HAL_RCC_OscConfig+0x474>)
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007e2e:	2b00      	cmp	r3, #0
 8007e30:	d118      	bne.n	8007e64 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007e32:	4b74      	ldr	r3, [pc, #464]	@ (8008004 <HAL_RCC_OscConfig+0x474>)
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	4a73      	ldr	r2, [pc, #460]	@ (8008004 <HAL_RCC_OscConfig+0x474>)
 8007e38:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007e3c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007e3e:	f7fd fd5b 	bl	80058f8 <HAL_GetTick>
 8007e42:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007e44:	e008      	b.n	8007e58 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007e46:	f7fd fd57 	bl	80058f8 <HAL_GetTick>
 8007e4a:	4602      	mov	r2, r0
 8007e4c:	693b      	ldr	r3, [r7, #16]
 8007e4e:	1ad3      	subs	r3, r2, r3
 8007e50:	2b02      	cmp	r3, #2
 8007e52:	d901      	bls.n	8007e58 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8007e54:	2303      	movs	r3, #3
 8007e56:	e10c      	b.n	8008072 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007e58:	4b6a      	ldr	r3, [pc, #424]	@ (8008004 <HAL_RCC_OscConfig+0x474>)
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007e60:	2b00      	cmp	r3, #0
 8007e62:	d0f0      	beq.n	8007e46 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	689b      	ldr	r3, [r3, #8]
 8007e68:	2b01      	cmp	r3, #1
 8007e6a:	d106      	bne.n	8007e7a <HAL_RCC_OscConfig+0x2ea>
 8007e6c:	4b64      	ldr	r3, [pc, #400]	@ (8008000 <HAL_RCC_OscConfig+0x470>)
 8007e6e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007e70:	4a63      	ldr	r2, [pc, #396]	@ (8008000 <HAL_RCC_OscConfig+0x470>)
 8007e72:	f043 0301 	orr.w	r3, r3, #1
 8007e76:	6713      	str	r3, [r2, #112]	@ 0x70
 8007e78:	e01c      	b.n	8007eb4 <HAL_RCC_OscConfig+0x324>
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	689b      	ldr	r3, [r3, #8]
 8007e7e:	2b05      	cmp	r3, #5
 8007e80:	d10c      	bne.n	8007e9c <HAL_RCC_OscConfig+0x30c>
 8007e82:	4b5f      	ldr	r3, [pc, #380]	@ (8008000 <HAL_RCC_OscConfig+0x470>)
 8007e84:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007e86:	4a5e      	ldr	r2, [pc, #376]	@ (8008000 <HAL_RCC_OscConfig+0x470>)
 8007e88:	f043 0304 	orr.w	r3, r3, #4
 8007e8c:	6713      	str	r3, [r2, #112]	@ 0x70
 8007e8e:	4b5c      	ldr	r3, [pc, #368]	@ (8008000 <HAL_RCC_OscConfig+0x470>)
 8007e90:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007e92:	4a5b      	ldr	r2, [pc, #364]	@ (8008000 <HAL_RCC_OscConfig+0x470>)
 8007e94:	f043 0301 	orr.w	r3, r3, #1
 8007e98:	6713      	str	r3, [r2, #112]	@ 0x70
 8007e9a:	e00b      	b.n	8007eb4 <HAL_RCC_OscConfig+0x324>
 8007e9c:	4b58      	ldr	r3, [pc, #352]	@ (8008000 <HAL_RCC_OscConfig+0x470>)
 8007e9e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007ea0:	4a57      	ldr	r2, [pc, #348]	@ (8008000 <HAL_RCC_OscConfig+0x470>)
 8007ea2:	f023 0301 	bic.w	r3, r3, #1
 8007ea6:	6713      	str	r3, [r2, #112]	@ 0x70
 8007ea8:	4b55      	ldr	r3, [pc, #340]	@ (8008000 <HAL_RCC_OscConfig+0x470>)
 8007eaa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007eac:	4a54      	ldr	r2, [pc, #336]	@ (8008000 <HAL_RCC_OscConfig+0x470>)
 8007eae:	f023 0304 	bic.w	r3, r3, #4
 8007eb2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	689b      	ldr	r3, [r3, #8]
 8007eb8:	2b00      	cmp	r3, #0
 8007eba:	d015      	beq.n	8007ee8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007ebc:	f7fd fd1c 	bl	80058f8 <HAL_GetTick>
 8007ec0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007ec2:	e00a      	b.n	8007eda <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007ec4:	f7fd fd18 	bl	80058f8 <HAL_GetTick>
 8007ec8:	4602      	mov	r2, r0
 8007eca:	693b      	ldr	r3, [r7, #16]
 8007ecc:	1ad3      	subs	r3, r2, r3
 8007ece:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007ed2:	4293      	cmp	r3, r2
 8007ed4:	d901      	bls.n	8007eda <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8007ed6:	2303      	movs	r3, #3
 8007ed8:	e0cb      	b.n	8008072 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007eda:	4b49      	ldr	r3, [pc, #292]	@ (8008000 <HAL_RCC_OscConfig+0x470>)
 8007edc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007ede:	f003 0302 	and.w	r3, r3, #2
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	d0ee      	beq.n	8007ec4 <HAL_RCC_OscConfig+0x334>
 8007ee6:	e014      	b.n	8007f12 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007ee8:	f7fd fd06 	bl	80058f8 <HAL_GetTick>
 8007eec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007eee:	e00a      	b.n	8007f06 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007ef0:	f7fd fd02 	bl	80058f8 <HAL_GetTick>
 8007ef4:	4602      	mov	r2, r0
 8007ef6:	693b      	ldr	r3, [r7, #16]
 8007ef8:	1ad3      	subs	r3, r2, r3
 8007efa:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007efe:	4293      	cmp	r3, r2
 8007f00:	d901      	bls.n	8007f06 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8007f02:	2303      	movs	r3, #3
 8007f04:	e0b5      	b.n	8008072 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007f06:	4b3e      	ldr	r3, [pc, #248]	@ (8008000 <HAL_RCC_OscConfig+0x470>)
 8007f08:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007f0a:	f003 0302 	and.w	r3, r3, #2
 8007f0e:	2b00      	cmp	r3, #0
 8007f10:	d1ee      	bne.n	8007ef0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8007f12:	7dfb      	ldrb	r3, [r7, #23]
 8007f14:	2b01      	cmp	r3, #1
 8007f16:	d105      	bne.n	8007f24 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007f18:	4b39      	ldr	r3, [pc, #228]	@ (8008000 <HAL_RCC_OscConfig+0x470>)
 8007f1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007f1c:	4a38      	ldr	r2, [pc, #224]	@ (8008000 <HAL_RCC_OscConfig+0x470>)
 8007f1e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007f22:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	699b      	ldr	r3, [r3, #24]
 8007f28:	2b00      	cmp	r3, #0
 8007f2a:	f000 80a1 	beq.w	8008070 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8007f2e:	4b34      	ldr	r3, [pc, #208]	@ (8008000 <HAL_RCC_OscConfig+0x470>)
 8007f30:	689b      	ldr	r3, [r3, #8]
 8007f32:	f003 030c 	and.w	r3, r3, #12
 8007f36:	2b08      	cmp	r3, #8
 8007f38:	d05c      	beq.n	8007ff4 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	699b      	ldr	r3, [r3, #24]
 8007f3e:	2b02      	cmp	r3, #2
 8007f40:	d141      	bne.n	8007fc6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007f42:	4b31      	ldr	r3, [pc, #196]	@ (8008008 <HAL_RCC_OscConfig+0x478>)
 8007f44:	2200      	movs	r2, #0
 8007f46:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007f48:	f7fd fcd6 	bl	80058f8 <HAL_GetTick>
 8007f4c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007f4e:	e008      	b.n	8007f62 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007f50:	f7fd fcd2 	bl	80058f8 <HAL_GetTick>
 8007f54:	4602      	mov	r2, r0
 8007f56:	693b      	ldr	r3, [r7, #16]
 8007f58:	1ad3      	subs	r3, r2, r3
 8007f5a:	2b02      	cmp	r3, #2
 8007f5c:	d901      	bls.n	8007f62 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8007f5e:	2303      	movs	r3, #3
 8007f60:	e087      	b.n	8008072 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007f62:	4b27      	ldr	r3, [pc, #156]	@ (8008000 <HAL_RCC_OscConfig+0x470>)
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007f6a:	2b00      	cmp	r3, #0
 8007f6c:	d1f0      	bne.n	8007f50 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	69da      	ldr	r2, [r3, #28]
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	6a1b      	ldr	r3, [r3, #32]
 8007f76:	431a      	orrs	r2, r3
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007f7c:	019b      	lsls	r3, r3, #6
 8007f7e:	431a      	orrs	r2, r3
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007f84:	085b      	lsrs	r3, r3, #1
 8007f86:	3b01      	subs	r3, #1
 8007f88:	041b      	lsls	r3, r3, #16
 8007f8a:	431a      	orrs	r2, r3
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007f90:	061b      	lsls	r3, r3, #24
 8007f92:	491b      	ldr	r1, [pc, #108]	@ (8008000 <HAL_RCC_OscConfig+0x470>)
 8007f94:	4313      	orrs	r3, r2
 8007f96:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007f98:	4b1b      	ldr	r3, [pc, #108]	@ (8008008 <HAL_RCC_OscConfig+0x478>)
 8007f9a:	2201      	movs	r2, #1
 8007f9c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007f9e:	f7fd fcab 	bl	80058f8 <HAL_GetTick>
 8007fa2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007fa4:	e008      	b.n	8007fb8 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007fa6:	f7fd fca7 	bl	80058f8 <HAL_GetTick>
 8007faa:	4602      	mov	r2, r0
 8007fac:	693b      	ldr	r3, [r7, #16]
 8007fae:	1ad3      	subs	r3, r2, r3
 8007fb0:	2b02      	cmp	r3, #2
 8007fb2:	d901      	bls.n	8007fb8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8007fb4:	2303      	movs	r3, #3
 8007fb6:	e05c      	b.n	8008072 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007fb8:	4b11      	ldr	r3, [pc, #68]	@ (8008000 <HAL_RCC_OscConfig+0x470>)
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007fc0:	2b00      	cmp	r3, #0
 8007fc2:	d0f0      	beq.n	8007fa6 <HAL_RCC_OscConfig+0x416>
 8007fc4:	e054      	b.n	8008070 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007fc6:	4b10      	ldr	r3, [pc, #64]	@ (8008008 <HAL_RCC_OscConfig+0x478>)
 8007fc8:	2200      	movs	r2, #0
 8007fca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007fcc:	f7fd fc94 	bl	80058f8 <HAL_GetTick>
 8007fd0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007fd2:	e008      	b.n	8007fe6 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007fd4:	f7fd fc90 	bl	80058f8 <HAL_GetTick>
 8007fd8:	4602      	mov	r2, r0
 8007fda:	693b      	ldr	r3, [r7, #16]
 8007fdc:	1ad3      	subs	r3, r2, r3
 8007fde:	2b02      	cmp	r3, #2
 8007fe0:	d901      	bls.n	8007fe6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8007fe2:	2303      	movs	r3, #3
 8007fe4:	e045      	b.n	8008072 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007fe6:	4b06      	ldr	r3, [pc, #24]	@ (8008000 <HAL_RCC_OscConfig+0x470>)
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	d1f0      	bne.n	8007fd4 <HAL_RCC_OscConfig+0x444>
 8007ff2:	e03d      	b.n	8008070 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	699b      	ldr	r3, [r3, #24]
 8007ff8:	2b01      	cmp	r3, #1
 8007ffa:	d107      	bne.n	800800c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8007ffc:	2301      	movs	r3, #1
 8007ffe:	e038      	b.n	8008072 <HAL_RCC_OscConfig+0x4e2>
 8008000:	40023800 	.word	0x40023800
 8008004:	40007000 	.word	0x40007000
 8008008:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800800c:	4b1b      	ldr	r3, [pc, #108]	@ (800807c <HAL_RCC_OscConfig+0x4ec>)
 800800e:	685b      	ldr	r3, [r3, #4]
 8008010:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	699b      	ldr	r3, [r3, #24]
 8008016:	2b01      	cmp	r3, #1
 8008018:	d028      	beq.n	800806c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800801a:	68fb      	ldr	r3, [r7, #12]
 800801c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008024:	429a      	cmp	r2, r3
 8008026:	d121      	bne.n	800806c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8008028:	68fb      	ldr	r3, [r7, #12]
 800802a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008032:	429a      	cmp	r2, r3
 8008034:	d11a      	bne.n	800806c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8008036:	68fa      	ldr	r2, [r7, #12]
 8008038:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800803c:	4013      	ands	r3, r2
 800803e:	687a      	ldr	r2, [r7, #4]
 8008040:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8008042:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8008044:	4293      	cmp	r3, r2
 8008046:	d111      	bne.n	800806c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8008048:	68fb      	ldr	r3, [r7, #12]
 800804a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008052:	085b      	lsrs	r3, r3, #1
 8008054:	3b01      	subs	r3, #1
 8008056:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8008058:	429a      	cmp	r2, r3
 800805a:	d107      	bne.n	800806c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800805c:	68fb      	ldr	r3, [r7, #12]
 800805e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008066:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8008068:	429a      	cmp	r2, r3
 800806a:	d001      	beq.n	8008070 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 800806c:	2301      	movs	r3, #1
 800806e:	e000      	b.n	8008072 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8008070:	2300      	movs	r3, #0
}
 8008072:	4618      	mov	r0, r3
 8008074:	3718      	adds	r7, #24
 8008076:	46bd      	mov	sp, r7
 8008078:	bd80      	pop	{r7, pc}
 800807a:	bf00      	nop
 800807c:	40023800 	.word	0x40023800

08008080 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008080:	b580      	push	{r7, lr}
 8008082:	b084      	sub	sp, #16
 8008084:	af00      	add	r7, sp, #0
 8008086:	6078      	str	r0, [r7, #4]
 8008088:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	2b00      	cmp	r3, #0
 800808e:	d101      	bne.n	8008094 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008090:	2301      	movs	r3, #1
 8008092:	e0cc      	b.n	800822e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8008094:	4b68      	ldr	r3, [pc, #416]	@ (8008238 <HAL_RCC_ClockConfig+0x1b8>)
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	f003 0307 	and.w	r3, r3, #7
 800809c:	683a      	ldr	r2, [r7, #0]
 800809e:	429a      	cmp	r2, r3
 80080a0:	d90c      	bls.n	80080bc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80080a2:	4b65      	ldr	r3, [pc, #404]	@ (8008238 <HAL_RCC_ClockConfig+0x1b8>)
 80080a4:	683a      	ldr	r2, [r7, #0]
 80080a6:	b2d2      	uxtb	r2, r2
 80080a8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80080aa:	4b63      	ldr	r3, [pc, #396]	@ (8008238 <HAL_RCC_ClockConfig+0x1b8>)
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	f003 0307 	and.w	r3, r3, #7
 80080b2:	683a      	ldr	r2, [r7, #0]
 80080b4:	429a      	cmp	r2, r3
 80080b6:	d001      	beq.n	80080bc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80080b8:	2301      	movs	r3, #1
 80080ba:	e0b8      	b.n	800822e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	f003 0302 	and.w	r3, r3, #2
 80080c4:	2b00      	cmp	r3, #0
 80080c6:	d020      	beq.n	800810a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	f003 0304 	and.w	r3, r3, #4
 80080d0:	2b00      	cmp	r3, #0
 80080d2:	d005      	beq.n	80080e0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80080d4:	4b59      	ldr	r3, [pc, #356]	@ (800823c <HAL_RCC_ClockConfig+0x1bc>)
 80080d6:	689b      	ldr	r3, [r3, #8]
 80080d8:	4a58      	ldr	r2, [pc, #352]	@ (800823c <HAL_RCC_ClockConfig+0x1bc>)
 80080da:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80080de:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	f003 0308 	and.w	r3, r3, #8
 80080e8:	2b00      	cmp	r3, #0
 80080ea:	d005      	beq.n	80080f8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80080ec:	4b53      	ldr	r3, [pc, #332]	@ (800823c <HAL_RCC_ClockConfig+0x1bc>)
 80080ee:	689b      	ldr	r3, [r3, #8]
 80080f0:	4a52      	ldr	r2, [pc, #328]	@ (800823c <HAL_RCC_ClockConfig+0x1bc>)
 80080f2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80080f6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80080f8:	4b50      	ldr	r3, [pc, #320]	@ (800823c <HAL_RCC_ClockConfig+0x1bc>)
 80080fa:	689b      	ldr	r3, [r3, #8]
 80080fc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	689b      	ldr	r3, [r3, #8]
 8008104:	494d      	ldr	r1, [pc, #308]	@ (800823c <HAL_RCC_ClockConfig+0x1bc>)
 8008106:	4313      	orrs	r3, r2
 8008108:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	f003 0301 	and.w	r3, r3, #1
 8008112:	2b00      	cmp	r3, #0
 8008114:	d044      	beq.n	80081a0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	685b      	ldr	r3, [r3, #4]
 800811a:	2b01      	cmp	r3, #1
 800811c:	d107      	bne.n	800812e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800811e:	4b47      	ldr	r3, [pc, #284]	@ (800823c <HAL_RCC_ClockConfig+0x1bc>)
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008126:	2b00      	cmp	r3, #0
 8008128:	d119      	bne.n	800815e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800812a:	2301      	movs	r3, #1
 800812c:	e07f      	b.n	800822e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	685b      	ldr	r3, [r3, #4]
 8008132:	2b02      	cmp	r3, #2
 8008134:	d003      	beq.n	800813e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800813a:	2b03      	cmp	r3, #3
 800813c:	d107      	bne.n	800814e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800813e:	4b3f      	ldr	r3, [pc, #252]	@ (800823c <HAL_RCC_ClockConfig+0x1bc>)
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008146:	2b00      	cmp	r3, #0
 8008148:	d109      	bne.n	800815e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800814a:	2301      	movs	r3, #1
 800814c:	e06f      	b.n	800822e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800814e:	4b3b      	ldr	r3, [pc, #236]	@ (800823c <HAL_RCC_ClockConfig+0x1bc>)
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	f003 0302 	and.w	r3, r3, #2
 8008156:	2b00      	cmp	r3, #0
 8008158:	d101      	bne.n	800815e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800815a:	2301      	movs	r3, #1
 800815c:	e067      	b.n	800822e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800815e:	4b37      	ldr	r3, [pc, #220]	@ (800823c <HAL_RCC_ClockConfig+0x1bc>)
 8008160:	689b      	ldr	r3, [r3, #8]
 8008162:	f023 0203 	bic.w	r2, r3, #3
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	685b      	ldr	r3, [r3, #4]
 800816a:	4934      	ldr	r1, [pc, #208]	@ (800823c <HAL_RCC_ClockConfig+0x1bc>)
 800816c:	4313      	orrs	r3, r2
 800816e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8008170:	f7fd fbc2 	bl	80058f8 <HAL_GetTick>
 8008174:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008176:	e00a      	b.n	800818e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008178:	f7fd fbbe 	bl	80058f8 <HAL_GetTick>
 800817c:	4602      	mov	r2, r0
 800817e:	68fb      	ldr	r3, [r7, #12]
 8008180:	1ad3      	subs	r3, r2, r3
 8008182:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008186:	4293      	cmp	r3, r2
 8008188:	d901      	bls.n	800818e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800818a:	2303      	movs	r3, #3
 800818c:	e04f      	b.n	800822e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800818e:	4b2b      	ldr	r3, [pc, #172]	@ (800823c <HAL_RCC_ClockConfig+0x1bc>)
 8008190:	689b      	ldr	r3, [r3, #8]
 8008192:	f003 020c 	and.w	r2, r3, #12
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	685b      	ldr	r3, [r3, #4]
 800819a:	009b      	lsls	r3, r3, #2
 800819c:	429a      	cmp	r2, r3
 800819e:	d1eb      	bne.n	8008178 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80081a0:	4b25      	ldr	r3, [pc, #148]	@ (8008238 <HAL_RCC_ClockConfig+0x1b8>)
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	f003 0307 	and.w	r3, r3, #7
 80081a8:	683a      	ldr	r2, [r7, #0]
 80081aa:	429a      	cmp	r2, r3
 80081ac:	d20c      	bcs.n	80081c8 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80081ae:	4b22      	ldr	r3, [pc, #136]	@ (8008238 <HAL_RCC_ClockConfig+0x1b8>)
 80081b0:	683a      	ldr	r2, [r7, #0]
 80081b2:	b2d2      	uxtb	r2, r2
 80081b4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80081b6:	4b20      	ldr	r3, [pc, #128]	@ (8008238 <HAL_RCC_ClockConfig+0x1b8>)
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	f003 0307 	and.w	r3, r3, #7
 80081be:	683a      	ldr	r2, [r7, #0]
 80081c0:	429a      	cmp	r2, r3
 80081c2:	d001      	beq.n	80081c8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80081c4:	2301      	movs	r3, #1
 80081c6:	e032      	b.n	800822e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	f003 0304 	and.w	r3, r3, #4
 80081d0:	2b00      	cmp	r3, #0
 80081d2:	d008      	beq.n	80081e6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80081d4:	4b19      	ldr	r3, [pc, #100]	@ (800823c <HAL_RCC_ClockConfig+0x1bc>)
 80081d6:	689b      	ldr	r3, [r3, #8]
 80081d8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	68db      	ldr	r3, [r3, #12]
 80081e0:	4916      	ldr	r1, [pc, #88]	@ (800823c <HAL_RCC_ClockConfig+0x1bc>)
 80081e2:	4313      	orrs	r3, r2
 80081e4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	681b      	ldr	r3, [r3, #0]
 80081ea:	f003 0308 	and.w	r3, r3, #8
 80081ee:	2b00      	cmp	r3, #0
 80081f0:	d009      	beq.n	8008206 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80081f2:	4b12      	ldr	r3, [pc, #72]	@ (800823c <HAL_RCC_ClockConfig+0x1bc>)
 80081f4:	689b      	ldr	r3, [r3, #8]
 80081f6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	691b      	ldr	r3, [r3, #16]
 80081fe:	00db      	lsls	r3, r3, #3
 8008200:	490e      	ldr	r1, [pc, #56]	@ (800823c <HAL_RCC_ClockConfig+0x1bc>)
 8008202:	4313      	orrs	r3, r2
 8008204:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8008206:	f000 f821 	bl	800824c <HAL_RCC_GetSysClockFreq>
 800820a:	4602      	mov	r2, r0
 800820c:	4b0b      	ldr	r3, [pc, #44]	@ (800823c <HAL_RCC_ClockConfig+0x1bc>)
 800820e:	689b      	ldr	r3, [r3, #8]
 8008210:	091b      	lsrs	r3, r3, #4
 8008212:	f003 030f 	and.w	r3, r3, #15
 8008216:	490a      	ldr	r1, [pc, #40]	@ (8008240 <HAL_RCC_ClockConfig+0x1c0>)
 8008218:	5ccb      	ldrb	r3, [r1, r3]
 800821a:	fa22 f303 	lsr.w	r3, r2, r3
 800821e:	4a09      	ldr	r2, [pc, #36]	@ (8008244 <HAL_RCC_ClockConfig+0x1c4>)
 8008220:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8008222:	4b09      	ldr	r3, [pc, #36]	@ (8008248 <HAL_RCC_ClockConfig+0x1c8>)
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	4618      	mov	r0, r3
 8008228:	f7fd fb22 	bl	8005870 <HAL_InitTick>

  return HAL_OK;
 800822c:	2300      	movs	r3, #0
}
 800822e:	4618      	mov	r0, r3
 8008230:	3710      	adds	r7, #16
 8008232:	46bd      	mov	sp, r7
 8008234:	bd80      	pop	{r7, pc}
 8008236:	bf00      	nop
 8008238:	40023c00 	.word	0x40023c00
 800823c:	40023800 	.word	0x40023800
 8008240:	0801531c 	.word	0x0801531c
 8008244:	2000d114 	.word	0x2000d114
 8008248:	2000d118 	.word	0x2000d118

0800824c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800824c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008250:	b094      	sub	sp, #80	@ 0x50
 8008252:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8008254:	2300      	movs	r3, #0
 8008256:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8008258:	2300      	movs	r3, #0
 800825a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 800825c:	2300      	movs	r3, #0
 800825e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8008260:	2300      	movs	r3, #0
 8008262:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008264:	4b79      	ldr	r3, [pc, #484]	@ (800844c <HAL_RCC_GetSysClockFreq+0x200>)
 8008266:	689b      	ldr	r3, [r3, #8]
 8008268:	f003 030c 	and.w	r3, r3, #12
 800826c:	2b08      	cmp	r3, #8
 800826e:	d00d      	beq.n	800828c <HAL_RCC_GetSysClockFreq+0x40>
 8008270:	2b08      	cmp	r3, #8
 8008272:	f200 80e1 	bhi.w	8008438 <HAL_RCC_GetSysClockFreq+0x1ec>
 8008276:	2b00      	cmp	r3, #0
 8008278:	d002      	beq.n	8008280 <HAL_RCC_GetSysClockFreq+0x34>
 800827a:	2b04      	cmp	r3, #4
 800827c:	d003      	beq.n	8008286 <HAL_RCC_GetSysClockFreq+0x3a>
 800827e:	e0db      	b.n	8008438 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8008280:	4b73      	ldr	r3, [pc, #460]	@ (8008450 <HAL_RCC_GetSysClockFreq+0x204>)
 8008282:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8008284:	e0db      	b.n	800843e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8008286:	4b73      	ldr	r3, [pc, #460]	@ (8008454 <HAL_RCC_GetSysClockFreq+0x208>)
 8008288:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800828a:	e0d8      	b.n	800843e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800828c:	4b6f      	ldr	r3, [pc, #444]	@ (800844c <HAL_RCC_GetSysClockFreq+0x200>)
 800828e:	685b      	ldr	r3, [r3, #4]
 8008290:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008294:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8008296:	4b6d      	ldr	r3, [pc, #436]	@ (800844c <HAL_RCC_GetSysClockFreq+0x200>)
 8008298:	685b      	ldr	r3, [r3, #4]
 800829a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800829e:	2b00      	cmp	r3, #0
 80082a0:	d063      	beq.n	800836a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80082a2:	4b6a      	ldr	r3, [pc, #424]	@ (800844c <HAL_RCC_GetSysClockFreq+0x200>)
 80082a4:	685b      	ldr	r3, [r3, #4]
 80082a6:	099b      	lsrs	r3, r3, #6
 80082a8:	2200      	movs	r2, #0
 80082aa:	63bb      	str	r3, [r7, #56]	@ 0x38
 80082ac:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80082ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80082b0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80082b4:	633b      	str	r3, [r7, #48]	@ 0x30
 80082b6:	2300      	movs	r3, #0
 80082b8:	637b      	str	r3, [r7, #52]	@ 0x34
 80082ba:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80082be:	4622      	mov	r2, r4
 80082c0:	462b      	mov	r3, r5
 80082c2:	f04f 0000 	mov.w	r0, #0
 80082c6:	f04f 0100 	mov.w	r1, #0
 80082ca:	0159      	lsls	r1, r3, #5
 80082cc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80082d0:	0150      	lsls	r0, r2, #5
 80082d2:	4602      	mov	r2, r0
 80082d4:	460b      	mov	r3, r1
 80082d6:	4621      	mov	r1, r4
 80082d8:	1a51      	subs	r1, r2, r1
 80082da:	6139      	str	r1, [r7, #16]
 80082dc:	4629      	mov	r1, r5
 80082de:	eb63 0301 	sbc.w	r3, r3, r1
 80082e2:	617b      	str	r3, [r7, #20]
 80082e4:	f04f 0200 	mov.w	r2, #0
 80082e8:	f04f 0300 	mov.w	r3, #0
 80082ec:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80082f0:	4659      	mov	r1, fp
 80082f2:	018b      	lsls	r3, r1, #6
 80082f4:	4651      	mov	r1, sl
 80082f6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80082fa:	4651      	mov	r1, sl
 80082fc:	018a      	lsls	r2, r1, #6
 80082fe:	4651      	mov	r1, sl
 8008300:	ebb2 0801 	subs.w	r8, r2, r1
 8008304:	4659      	mov	r1, fp
 8008306:	eb63 0901 	sbc.w	r9, r3, r1
 800830a:	f04f 0200 	mov.w	r2, #0
 800830e:	f04f 0300 	mov.w	r3, #0
 8008312:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8008316:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800831a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800831e:	4690      	mov	r8, r2
 8008320:	4699      	mov	r9, r3
 8008322:	4623      	mov	r3, r4
 8008324:	eb18 0303 	adds.w	r3, r8, r3
 8008328:	60bb      	str	r3, [r7, #8]
 800832a:	462b      	mov	r3, r5
 800832c:	eb49 0303 	adc.w	r3, r9, r3
 8008330:	60fb      	str	r3, [r7, #12]
 8008332:	f04f 0200 	mov.w	r2, #0
 8008336:	f04f 0300 	mov.w	r3, #0
 800833a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800833e:	4629      	mov	r1, r5
 8008340:	024b      	lsls	r3, r1, #9
 8008342:	4621      	mov	r1, r4
 8008344:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8008348:	4621      	mov	r1, r4
 800834a:	024a      	lsls	r2, r1, #9
 800834c:	4610      	mov	r0, r2
 800834e:	4619      	mov	r1, r3
 8008350:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008352:	2200      	movs	r2, #0
 8008354:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008356:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008358:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800835c:	f7f8 fcac 	bl	8000cb8 <__aeabi_uldivmod>
 8008360:	4602      	mov	r2, r0
 8008362:	460b      	mov	r3, r1
 8008364:	4613      	mov	r3, r2
 8008366:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008368:	e058      	b.n	800841c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800836a:	4b38      	ldr	r3, [pc, #224]	@ (800844c <HAL_RCC_GetSysClockFreq+0x200>)
 800836c:	685b      	ldr	r3, [r3, #4]
 800836e:	099b      	lsrs	r3, r3, #6
 8008370:	2200      	movs	r2, #0
 8008372:	4618      	mov	r0, r3
 8008374:	4611      	mov	r1, r2
 8008376:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800837a:	623b      	str	r3, [r7, #32]
 800837c:	2300      	movs	r3, #0
 800837e:	627b      	str	r3, [r7, #36]	@ 0x24
 8008380:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8008384:	4642      	mov	r2, r8
 8008386:	464b      	mov	r3, r9
 8008388:	f04f 0000 	mov.w	r0, #0
 800838c:	f04f 0100 	mov.w	r1, #0
 8008390:	0159      	lsls	r1, r3, #5
 8008392:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8008396:	0150      	lsls	r0, r2, #5
 8008398:	4602      	mov	r2, r0
 800839a:	460b      	mov	r3, r1
 800839c:	4641      	mov	r1, r8
 800839e:	ebb2 0a01 	subs.w	sl, r2, r1
 80083a2:	4649      	mov	r1, r9
 80083a4:	eb63 0b01 	sbc.w	fp, r3, r1
 80083a8:	f04f 0200 	mov.w	r2, #0
 80083ac:	f04f 0300 	mov.w	r3, #0
 80083b0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80083b4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80083b8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80083bc:	ebb2 040a 	subs.w	r4, r2, sl
 80083c0:	eb63 050b 	sbc.w	r5, r3, fp
 80083c4:	f04f 0200 	mov.w	r2, #0
 80083c8:	f04f 0300 	mov.w	r3, #0
 80083cc:	00eb      	lsls	r3, r5, #3
 80083ce:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80083d2:	00e2      	lsls	r2, r4, #3
 80083d4:	4614      	mov	r4, r2
 80083d6:	461d      	mov	r5, r3
 80083d8:	4643      	mov	r3, r8
 80083da:	18e3      	adds	r3, r4, r3
 80083dc:	603b      	str	r3, [r7, #0]
 80083de:	464b      	mov	r3, r9
 80083e0:	eb45 0303 	adc.w	r3, r5, r3
 80083e4:	607b      	str	r3, [r7, #4]
 80083e6:	f04f 0200 	mov.w	r2, #0
 80083ea:	f04f 0300 	mov.w	r3, #0
 80083ee:	e9d7 4500 	ldrd	r4, r5, [r7]
 80083f2:	4629      	mov	r1, r5
 80083f4:	028b      	lsls	r3, r1, #10
 80083f6:	4621      	mov	r1, r4
 80083f8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80083fc:	4621      	mov	r1, r4
 80083fe:	028a      	lsls	r2, r1, #10
 8008400:	4610      	mov	r0, r2
 8008402:	4619      	mov	r1, r3
 8008404:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008406:	2200      	movs	r2, #0
 8008408:	61bb      	str	r3, [r7, #24]
 800840a:	61fa      	str	r2, [r7, #28]
 800840c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008410:	f7f8 fc52 	bl	8000cb8 <__aeabi_uldivmod>
 8008414:	4602      	mov	r2, r0
 8008416:	460b      	mov	r3, r1
 8008418:	4613      	mov	r3, r2
 800841a:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 800841c:	4b0b      	ldr	r3, [pc, #44]	@ (800844c <HAL_RCC_GetSysClockFreq+0x200>)
 800841e:	685b      	ldr	r3, [r3, #4]
 8008420:	0c1b      	lsrs	r3, r3, #16
 8008422:	f003 0303 	and.w	r3, r3, #3
 8008426:	3301      	adds	r3, #1
 8008428:	005b      	lsls	r3, r3, #1
 800842a:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 800842c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800842e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008430:	fbb2 f3f3 	udiv	r3, r2, r3
 8008434:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8008436:	e002      	b.n	800843e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8008438:	4b05      	ldr	r3, [pc, #20]	@ (8008450 <HAL_RCC_GetSysClockFreq+0x204>)
 800843a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800843c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800843e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8008440:	4618      	mov	r0, r3
 8008442:	3750      	adds	r7, #80	@ 0x50
 8008444:	46bd      	mov	sp, r7
 8008446:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800844a:	bf00      	nop
 800844c:	40023800 	.word	0x40023800
 8008450:	00f42400 	.word	0x00f42400
 8008454:	007a1200 	.word	0x007a1200

08008458 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008458:	b480      	push	{r7}
 800845a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800845c:	4b03      	ldr	r3, [pc, #12]	@ (800846c <HAL_RCC_GetHCLKFreq+0x14>)
 800845e:	681b      	ldr	r3, [r3, #0]
}
 8008460:	4618      	mov	r0, r3
 8008462:	46bd      	mov	sp, r7
 8008464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008468:	4770      	bx	lr
 800846a:	bf00      	nop
 800846c:	2000d114 	.word	0x2000d114

08008470 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008470:	b580      	push	{r7, lr}
 8008472:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8008474:	f7ff fff0 	bl	8008458 <HAL_RCC_GetHCLKFreq>
 8008478:	4602      	mov	r2, r0
 800847a:	4b05      	ldr	r3, [pc, #20]	@ (8008490 <HAL_RCC_GetPCLK1Freq+0x20>)
 800847c:	689b      	ldr	r3, [r3, #8]
 800847e:	0a9b      	lsrs	r3, r3, #10
 8008480:	f003 0307 	and.w	r3, r3, #7
 8008484:	4903      	ldr	r1, [pc, #12]	@ (8008494 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008486:	5ccb      	ldrb	r3, [r1, r3]
 8008488:	fa22 f303 	lsr.w	r3, r2, r3
}
 800848c:	4618      	mov	r0, r3
 800848e:	bd80      	pop	{r7, pc}
 8008490:	40023800 	.word	0x40023800
 8008494:	0801532c 	.word	0x0801532c

08008498 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008498:	b580      	push	{r7, lr}
 800849a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800849c:	f7ff ffdc 	bl	8008458 <HAL_RCC_GetHCLKFreq>
 80084a0:	4602      	mov	r2, r0
 80084a2:	4b05      	ldr	r3, [pc, #20]	@ (80084b8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80084a4:	689b      	ldr	r3, [r3, #8]
 80084a6:	0b5b      	lsrs	r3, r3, #13
 80084a8:	f003 0307 	and.w	r3, r3, #7
 80084ac:	4903      	ldr	r1, [pc, #12]	@ (80084bc <HAL_RCC_GetPCLK2Freq+0x24>)
 80084ae:	5ccb      	ldrb	r3, [r1, r3]
 80084b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80084b4:	4618      	mov	r0, r3
 80084b6:	bd80      	pop	{r7, pc}
 80084b8:	40023800 	.word	0x40023800
 80084bc:	0801532c 	.word	0x0801532c

080084c0 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80084c0:	b580      	push	{r7, lr}
 80084c2:	b086      	sub	sp, #24
 80084c4:	af00      	add	r7, sp, #0
 80084c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80084c8:	2300      	movs	r3, #0
 80084ca:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80084cc:	2300      	movs	r3, #0
 80084ce:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	f003 0301 	and.w	r3, r3, #1
 80084d8:	2b00      	cmp	r3, #0
 80084da:	d105      	bne.n	80084e8 <HAL_RCCEx_PeriphCLKConfig+0x28>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	f003 0304 	and.w	r3, r3, #4
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80084e4:	2b00      	cmp	r3, #0
 80084e6:	d038      	beq.n	800855a <HAL_RCCEx_PeriphCLKConfig+0x9a>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80084e8:	4b68      	ldr	r3, [pc, #416]	@ (800868c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80084ea:	2200      	movs	r2, #0
 80084ec:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80084ee:	f7fd fa03 	bl	80058f8 <HAL_GetTick>
 80084f2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80084f4:	e008      	b.n	8008508 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80084f6:	f7fd f9ff 	bl	80058f8 <HAL_GetTick>
 80084fa:	4602      	mov	r2, r0
 80084fc:	697b      	ldr	r3, [r7, #20]
 80084fe:	1ad3      	subs	r3, r2, r3
 8008500:	2b02      	cmp	r3, #2
 8008502:	d901      	bls.n	8008508 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008504:	2303      	movs	r3, #3
 8008506:	e0bd      	b.n	8008684 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8008508:	4b61      	ldr	r3, [pc, #388]	@ (8008690 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008510:	2b00      	cmp	r3, #0
 8008512:	d1f0      	bne.n	80084f6 <HAL_RCCEx_PeriphCLKConfig+0x36>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN,
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	685a      	ldr	r2, [r3, #4]
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	689b      	ldr	r3, [r3, #8]
 800851c:	019b      	lsls	r3, r3, #6
 800851e:	431a      	orrs	r2, r3
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	68db      	ldr	r3, [r3, #12]
 8008524:	071b      	lsls	r3, r3, #28
 8008526:	495a      	ldr	r1, [pc, #360]	@ (8008690 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008528:	4313      	orrs	r3, r2
 800852a:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800852e:	4b57      	ldr	r3, [pc, #348]	@ (800868c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8008530:	2201      	movs	r2, #1
 8008532:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8008534:	f7fd f9e0 	bl	80058f8 <HAL_GetTick>
 8008538:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800853a:	e008      	b.n	800854e <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800853c:	f7fd f9dc 	bl	80058f8 <HAL_GetTick>
 8008540:	4602      	mov	r2, r0
 8008542:	697b      	ldr	r3, [r7, #20]
 8008544:	1ad3      	subs	r3, r2, r3
 8008546:	2b02      	cmp	r3, #2
 8008548:	d901      	bls.n	800854e <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800854a:	2303      	movs	r3, #3
 800854c:	e09a      	b.n	8008684 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800854e:	4b50      	ldr	r3, [pc, #320]	@ (8008690 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008550:	681b      	ldr	r3, [r3, #0]
 8008552:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008556:	2b00      	cmp	r3, #0
 8008558:	d0f0      	beq.n	800853c <HAL_RCCEx_PeriphCLKConfig+0x7c>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	681b      	ldr	r3, [r3, #0]
 800855e:	f003 0302 	and.w	r3, r3, #2
 8008562:	2b00      	cmp	r3, #0
 8008564:	f000 8083 	beq.w	800866e <HAL_RCCEx_PeriphCLKConfig+0x1ae>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8008568:	2300      	movs	r3, #0
 800856a:	60fb      	str	r3, [r7, #12]
 800856c:	4b48      	ldr	r3, [pc, #288]	@ (8008690 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800856e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008570:	4a47      	ldr	r2, [pc, #284]	@ (8008690 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008572:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008576:	6413      	str	r3, [r2, #64]	@ 0x40
 8008578:	4b45      	ldr	r3, [pc, #276]	@ (8008690 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800857a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800857c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008580:	60fb      	str	r3, [r7, #12]
 8008582:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8008584:	4b43      	ldr	r3, [pc, #268]	@ (8008694 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	4a42      	ldr	r2, [pc, #264]	@ (8008694 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800858a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800858e:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8008590:	f7fd f9b2 	bl	80058f8 <HAL_GetTick>
 8008594:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8008596:	e008      	b.n	80085aa <HAL_RCCEx_PeriphCLKConfig+0xea>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008598:	f7fd f9ae 	bl	80058f8 <HAL_GetTick>
 800859c:	4602      	mov	r2, r0
 800859e:	697b      	ldr	r3, [r7, #20]
 80085a0:	1ad3      	subs	r3, r2, r3
 80085a2:	2b02      	cmp	r3, #2
 80085a4:	d901      	bls.n	80085aa <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        return HAL_TIMEOUT;
 80085a6:	2303      	movs	r3, #3
 80085a8:	e06c      	b.n	8008684 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 80085aa:	4b3a      	ldr	r3, [pc, #232]	@ (8008694 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80085b2:	2b00      	cmp	r3, #0
 80085b4:	d0f0      	beq.n	8008598 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80085b6:	4b36      	ldr	r3, [pc, #216]	@ (8008690 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80085b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80085ba:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80085be:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80085c0:	693b      	ldr	r3, [r7, #16]
 80085c2:	2b00      	cmp	r3, #0
 80085c4:	d02f      	beq.n	8008626 <HAL_RCCEx_PeriphCLKConfig+0x166>
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	691b      	ldr	r3, [r3, #16]
 80085ca:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80085ce:	693a      	ldr	r2, [r7, #16]
 80085d0:	429a      	cmp	r2, r3
 80085d2:	d028      	beq.n	8008626 <HAL_RCCEx_PeriphCLKConfig+0x166>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80085d4:	4b2e      	ldr	r3, [pc, #184]	@ (8008690 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80085d6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80085d8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80085dc:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80085de:	4b2e      	ldr	r3, [pc, #184]	@ (8008698 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80085e0:	2201      	movs	r2, #1
 80085e2:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80085e4:	4b2c      	ldr	r3, [pc, #176]	@ (8008698 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80085e6:	2200      	movs	r2, #0
 80085e8:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80085ea:	4a29      	ldr	r2, [pc, #164]	@ (8008690 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80085ec:	693b      	ldr	r3, [r7, #16]
 80085ee:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80085f0:	4b27      	ldr	r3, [pc, #156]	@ (8008690 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80085f2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80085f4:	f003 0301 	and.w	r3, r3, #1
 80085f8:	2b01      	cmp	r3, #1
 80085fa:	d114      	bne.n	8008626 <HAL_RCCEx_PeriphCLKConfig+0x166>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80085fc:	f7fd f97c 	bl	80058f8 <HAL_GetTick>
 8008600:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008602:	e00a      	b.n	800861a <HAL_RCCEx_PeriphCLKConfig+0x15a>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008604:	f7fd f978 	bl	80058f8 <HAL_GetTick>
 8008608:	4602      	mov	r2, r0
 800860a:	697b      	ldr	r3, [r7, #20]
 800860c:	1ad3      	subs	r3, r2, r3
 800860e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008612:	4293      	cmp	r3, r2
 8008614:	d901      	bls.n	800861a <HAL_RCCEx_PeriphCLKConfig+0x15a>
          {
            return HAL_TIMEOUT;
 8008616:	2303      	movs	r3, #3
 8008618:	e034      	b.n	8008684 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800861a:	4b1d      	ldr	r3, [pc, #116]	@ (8008690 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800861c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800861e:	f003 0302 	and.w	r3, r3, #2
 8008622:	2b00      	cmp	r3, #0
 8008624:	d0ee      	beq.n	8008604 <HAL_RCCEx_PeriphCLKConfig+0x144>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	691b      	ldr	r3, [r3, #16]
 800862a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800862e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008632:	d10d      	bne.n	8008650 <HAL_RCCEx_PeriphCLKConfig+0x190>
 8008634:	4b16      	ldr	r3, [pc, #88]	@ (8008690 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008636:	689b      	ldr	r3, [r3, #8]
 8008638:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	691b      	ldr	r3, [r3, #16]
 8008640:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8008644:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008648:	4911      	ldr	r1, [pc, #68]	@ (8008690 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800864a:	4313      	orrs	r3, r2
 800864c:	608b      	str	r3, [r1, #8]
 800864e:	e005      	b.n	800865c <HAL_RCCEx_PeriphCLKConfig+0x19c>
 8008650:	4b0f      	ldr	r3, [pc, #60]	@ (8008690 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008652:	689b      	ldr	r3, [r3, #8]
 8008654:	4a0e      	ldr	r2, [pc, #56]	@ (8008690 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008656:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 800865a:	6093      	str	r3, [r2, #8]
 800865c:	4b0c      	ldr	r3, [pc, #48]	@ (8008690 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800865e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	691b      	ldr	r3, [r3, #16]
 8008664:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008668:	4909      	ldr	r1, [pc, #36]	@ (8008690 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800866a:	4313      	orrs	r3, r2
 800866c:	670b      	str	r3, [r1, #112]	@ 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	f003 0308 	and.w	r3, r3, #8
 8008676:	2b00      	cmp	r3, #0
 8008678:	d003      	beq.n	8008682 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	7d1a      	ldrb	r2, [r3, #20]
 800867e:	4b07      	ldr	r3, [pc, #28]	@ (800869c <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 8008680:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8008682:	2300      	movs	r3, #0
}
 8008684:	4618      	mov	r0, r3
 8008686:	3718      	adds	r7, #24
 8008688:	46bd      	mov	sp, r7
 800868a:	bd80      	pop	{r7, pc}
 800868c:	42470068 	.word	0x42470068
 8008690:	40023800 	.word	0x40023800
 8008694:	40007000 	.word	0x40007000
 8008698:	42470e40 	.word	0x42470e40
 800869c:	424711e0 	.word	0x424711e0

080086a0 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80086a0:	b480      	push	{r7}
 80086a2:	b087      	sub	sp, #28
 80086a4:	af00      	add	r7, sp, #0
 80086a6:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 80086a8:	2300      	movs	r3, #0
 80086aa:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 80086ac:	2300      	movs	r3, #0
 80086ae:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 80086b0:	2300      	movs	r3, #0
 80086b2:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 80086b4:	2300      	movs	r3, #0
 80086b6:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	2b01      	cmp	r3, #1
 80086bc:	d141      	bne.n	8008742 <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
  {
    case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 80086be:	4b25      	ldr	r3, [pc, #148]	@ (8008754 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 80086c0:	689b      	ldr	r3, [r3, #8]
 80086c2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80086c6:	60fb      	str	r3, [r7, #12]
      switch (srcclk)
 80086c8:	68fb      	ldr	r3, [r7, #12]
 80086ca:	2b00      	cmp	r3, #0
 80086cc:	d006      	beq.n	80086dc <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
 80086ce:	68fb      	ldr	r3, [r7, #12]
 80086d0:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80086d4:	d131      	bne.n	800873a <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
      {
        /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
        case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 80086d6:	4b20      	ldr	r3, [pc, #128]	@ (8008758 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 80086d8:	617b      	str	r3, [r7, #20]
          break;
 80086da:	e031      	b.n	8008740 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
        case RCC_I2SCLKSOURCE_PLLI2S:
        {
#if defined(STM32F411xE)
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
          if ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80086dc:	4b1d      	ldr	r3, [pc, #116]	@ (8008754 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 80086de:	685b      	ldr	r3, [r3, #4]
 80086e0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80086e4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80086e8:	d109      	bne.n	80086fe <HAL_RCCEx_GetPeriphCLKFreq+0x5e>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 80086ea:	4b1a      	ldr	r3, [pc, #104]	@ (8008754 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 80086ec:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80086f0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80086f4:	4a19      	ldr	r2, [pc, #100]	@ (800875c <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
 80086f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80086fa:	613b      	str	r3, [r7, #16]
 80086fc:	e008      	b.n	8008710 <HAL_RCCEx_GetPeriphCLKFreq+0x70>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 80086fe:	4b15      	ldr	r3, [pc, #84]	@ (8008754 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8008700:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008704:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008708:	4a15      	ldr	r2, [pc, #84]	@ (8008760 <HAL_RCCEx_GetPeriphCLKFreq+0xc0>)
 800870a:	fbb2 f3f3 	udiv	r3, r2, r3
 800870e:	613b      	str	r3, [r7, #16]
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8008710:	4b10      	ldr	r3, [pc, #64]	@ (8008754 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8008712:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008716:	099b      	lsrs	r3, r3, #6
 8008718:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800871c:	693b      	ldr	r3, [r7, #16]
 800871e:	fb02 f303 	mul.w	r3, r2, r3
 8008722:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput / (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8008724:	4b0b      	ldr	r3, [pc, #44]	@ (8008754 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8008726:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800872a:	0f1b      	lsrs	r3, r3, #28
 800872c:	f003 0307 	and.w	r3, r3, #7
 8008730:	68ba      	ldr	r2, [r7, #8]
 8008732:	fbb2 f3f3 	udiv	r3, r2, r3
 8008736:	617b      	str	r3, [r7, #20]
          break;
 8008738:	e002      	b.n	8008740 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
        }
        /* Clock not enabled for I2S*/
        default:
        {
          frequency = 0U;
 800873a:	2300      	movs	r3, #0
 800873c:	617b      	str	r3, [r7, #20]
          break;
 800873e:	bf00      	nop
        }
      }
      break;
 8008740:	e000      	b.n	8008744 <HAL_RCCEx_GetPeriphCLKFreq+0xa4>
    }
    default:
    {
      break;
 8008742:	bf00      	nop
    }
  }
  return frequency;
 8008744:	697b      	ldr	r3, [r7, #20]
}
 8008746:	4618      	mov	r0, r3
 8008748:	371c      	adds	r7, #28
 800874a:	46bd      	mov	sp, r7
 800874c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008750:	4770      	bx	lr
 8008752:	bf00      	nop
 8008754:	40023800 	.word	0x40023800
 8008758:	00bb8000 	.word	0x00bb8000
 800875c:	007a1200 	.word	0x007a1200
 8008760:	00f42400 	.word	0x00f42400

08008764 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008764:	b580      	push	{r7, lr}
 8008766:	b082      	sub	sp, #8
 8008768:	af00      	add	r7, sp, #0
 800876a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	2b00      	cmp	r3, #0
 8008770:	d101      	bne.n	8008776 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8008772:	2301      	movs	r3, #1
 8008774:	e07b      	b.n	800886e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800877a:	2b00      	cmp	r3, #0
 800877c:	d108      	bne.n	8008790 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	685b      	ldr	r3, [r3, #4]
 8008782:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8008786:	d009      	beq.n	800879c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	2200      	movs	r2, #0
 800878c:	61da      	str	r2, [r3, #28]
 800878e:	e005      	b.n	800879c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	2200      	movs	r2, #0
 8008794:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	2200      	movs	r2, #0
 800879a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	2200      	movs	r2, #0
 80087a0:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80087a8:	b2db      	uxtb	r3, r3
 80087aa:	2b00      	cmp	r3, #0
 80087ac:	d106      	bne.n	80087bc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	2200      	movs	r2, #0
 80087b2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80087b6:	6878      	ldr	r0, [r7, #4]
 80087b8:	f7fc faa0 	bl	8004cfc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	2202      	movs	r2, #2
 80087c0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	681b      	ldr	r3, [r3, #0]
 80087c8:	681a      	ldr	r2, [r3, #0]
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	681b      	ldr	r3, [r3, #0]
 80087ce:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80087d2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	685b      	ldr	r3, [r3, #4]
 80087d8:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	689b      	ldr	r3, [r3, #8]
 80087e0:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80087e4:	431a      	orrs	r2, r3
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	68db      	ldr	r3, [r3, #12]
 80087ea:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80087ee:	431a      	orrs	r2, r3
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	691b      	ldr	r3, [r3, #16]
 80087f4:	f003 0302 	and.w	r3, r3, #2
 80087f8:	431a      	orrs	r2, r3
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	695b      	ldr	r3, [r3, #20]
 80087fe:	f003 0301 	and.w	r3, r3, #1
 8008802:	431a      	orrs	r2, r3
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	699b      	ldr	r3, [r3, #24]
 8008808:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800880c:	431a      	orrs	r2, r3
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	69db      	ldr	r3, [r3, #28]
 8008812:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008816:	431a      	orrs	r2, r3
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	6a1b      	ldr	r3, [r3, #32]
 800881c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008820:	ea42 0103 	orr.w	r1, r2, r3
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008828:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	430a      	orrs	r2, r1
 8008832:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	699b      	ldr	r3, [r3, #24]
 8008838:	0c1b      	lsrs	r3, r3, #16
 800883a:	f003 0104 	and.w	r1, r3, #4
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008842:	f003 0210 	and.w	r2, r3, #16
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	681b      	ldr	r3, [r3, #0]
 800884a:	430a      	orrs	r2, r1
 800884c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	681b      	ldr	r3, [r3, #0]
 8008852:	69da      	ldr	r2, [r3, #28]
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	681b      	ldr	r3, [r3, #0]
 8008858:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800885c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	2200      	movs	r2, #0
 8008862:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	2201      	movs	r2, #1
 8008868:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 800886c:	2300      	movs	r3, #0
}
 800886e:	4618      	mov	r0, r3
 8008870:	3708      	adds	r7, #8
 8008872:	46bd      	mov	sp, r7
 8008874:	bd80      	pop	{r7, pc}

08008876 <HAL_SPI_Transmit>:
  * @param  Size amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008876:	b580      	push	{r7, lr}
 8008878:	b088      	sub	sp, #32
 800887a:	af00      	add	r7, sp, #0
 800887c:	60f8      	str	r0, [r7, #12]
 800887e:	60b9      	str	r1, [r7, #8]
 8008880:	603b      	str	r3, [r7, #0]
 8008882:	4613      	mov	r3, r2
 8008884:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008886:	f7fd f837 	bl	80058f8 <HAL_GetTick>
 800888a:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 800888c:	88fb      	ldrh	r3, [r7, #6]
 800888e:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8008890:	68fb      	ldr	r3, [r7, #12]
 8008892:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8008896:	b2db      	uxtb	r3, r3
 8008898:	2b01      	cmp	r3, #1
 800889a:	d001      	beq.n	80088a0 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 800889c:	2302      	movs	r3, #2
 800889e:	e12a      	b.n	8008af6 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 80088a0:	68bb      	ldr	r3, [r7, #8]
 80088a2:	2b00      	cmp	r3, #0
 80088a4:	d002      	beq.n	80088ac <HAL_SPI_Transmit+0x36>
 80088a6:	88fb      	ldrh	r3, [r7, #6]
 80088a8:	2b00      	cmp	r3, #0
 80088aa:	d101      	bne.n	80088b0 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 80088ac:	2301      	movs	r3, #1
 80088ae:	e122      	b.n	8008af6 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80088b0:	68fb      	ldr	r3, [r7, #12]
 80088b2:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80088b6:	2b01      	cmp	r3, #1
 80088b8:	d101      	bne.n	80088be <HAL_SPI_Transmit+0x48>
 80088ba:	2302      	movs	r3, #2
 80088bc:	e11b      	b.n	8008af6 <HAL_SPI_Transmit+0x280>
 80088be:	68fb      	ldr	r3, [r7, #12]
 80088c0:	2201      	movs	r2, #1
 80088c2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80088c6:	68fb      	ldr	r3, [r7, #12]
 80088c8:	2203      	movs	r2, #3
 80088ca:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80088ce:	68fb      	ldr	r3, [r7, #12]
 80088d0:	2200      	movs	r2, #0
 80088d2:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 80088d4:	68fb      	ldr	r3, [r7, #12]
 80088d6:	68ba      	ldr	r2, [r7, #8]
 80088d8:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 80088da:	68fb      	ldr	r3, [r7, #12]
 80088dc:	88fa      	ldrh	r2, [r7, #6]
 80088de:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 80088e0:	68fb      	ldr	r3, [r7, #12]
 80088e2:	88fa      	ldrh	r2, [r7, #6]
 80088e4:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80088e6:	68fb      	ldr	r3, [r7, #12]
 80088e8:	2200      	movs	r2, #0
 80088ea:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 80088ec:	68fb      	ldr	r3, [r7, #12]
 80088ee:	2200      	movs	r2, #0
 80088f0:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 80088f2:	68fb      	ldr	r3, [r7, #12]
 80088f4:	2200      	movs	r2, #0
 80088f6:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 80088f8:	68fb      	ldr	r3, [r7, #12]
 80088fa:	2200      	movs	r2, #0
 80088fc:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 80088fe:	68fb      	ldr	r3, [r7, #12]
 8008900:	2200      	movs	r2, #0
 8008902:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008904:	68fb      	ldr	r3, [r7, #12]
 8008906:	689b      	ldr	r3, [r3, #8]
 8008908:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800890c:	d10f      	bne.n	800892e <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800890e:	68fb      	ldr	r3, [r7, #12]
 8008910:	681b      	ldr	r3, [r3, #0]
 8008912:	681a      	ldr	r2, [r3, #0]
 8008914:	68fb      	ldr	r3, [r7, #12]
 8008916:	681b      	ldr	r3, [r3, #0]
 8008918:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800891c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800891e:	68fb      	ldr	r3, [r7, #12]
 8008920:	681b      	ldr	r3, [r3, #0]
 8008922:	681a      	ldr	r2, [r3, #0]
 8008924:	68fb      	ldr	r3, [r7, #12]
 8008926:	681b      	ldr	r3, [r3, #0]
 8008928:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800892c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800892e:	68fb      	ldr	r3, [r7, #12]
 8008930:	681b      	ldr	r3, [r3, #0]
 8008932:	681b      	ldr	r3, [r3, #0]
 8008934:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008938:	2b40      	cmp	r3, #64	@ 0x40
 800893a:	d007      	beq.n	800894c <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800893c:	68fb      	ldr	r3, [r7, #12]
 800893e:	681b      	ldr	r3, [r3, #0]
 8008940:	681a      	ldr	r2, [r3, #0]
 8008942:	68fb      	ldr	r3, [r7, #12]
 8008944:	681b      	ldr	r3, [r3, #0]
 8008946:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800894a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800894c:	68fb      	ldr	r3, [r7, #12]
 800894e:	68db      	ldr	r3, [r3, #12]
 8008950:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008954:	d152      	bne.n	80089fc <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008956:	68fb      	ldr	r3, [r7, #12]
 8008958:	685b      	ldr	r3, [r3, #4]
 800895a:	2b00      	cmp	r3, #0
 800895c:	d002      	beq.n	8008964 <HAL_SPI_Transmit+0xee>
 800895e:	8b7b      	ldrh	r3, [r7, #26]
 8008960:	2b01      	cmp	r3, #1
 8008962:	d145      	bne.n	80089f0 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8008964:	68fb      	ldr	r3, [r7, #12]
 8008966:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008968:	881a      	ldrh	r2, [r3, #0]
 800896a:	68fb      	ldr	r3, [r7, #12]
 800896c:	681b      	ldr	r3, [r3, #0]
 800896e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8008970:	68fb      	ldr	r3, [r7, #12]
 8008972:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008974:	1c9a      	adds	r2, r3, #2
 8008976:	68fb      	ldr	r3, [r7, #12]
 8008978:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800897a:	68fb      	ldr	r3, [r7, #12]
 800897c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800897e:	b29b      	uxth	r3, r3
 8008980:	3b01      	subs	r3, #1
 8008982:	b29a      	uxth	r2, r3
 8008984:	68fb      	ldr	r3, [r7, #12]
 8008986:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8008988:	e032      	b.n	80089f0 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800898a:	68fb      	ldr	r3, [r7, #12]
 800898c:	681b      	ldr	r3, [r3, #0]
 800898e:	689b      	ldr	r3, [r3, #8]
 8008990:	f003 0302 	and.w	r3, r3, #2
 8008994:	2b02      	cmp	r3, #2
 8008996:	d112      	bne.n	80089be <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8008998:	68fb      	ldr	r3, [r7, #12]
 800899a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800899c:	881a      	ldrh	r2, [r3, #0]
 800899e:	68fb      	ldr	r3, [r7, #12]
 80089a0:	681b      	ldr	r3, [r3, #0]
 80089a2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80089a4:	68fb      	ldr	r3, [r7, #12]
 80089a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80089a8:	1c9a      	adds	r2, r3, #2
 80089aa:	68fb      	ldr	r3, [r7, #12]
 80089ac:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80089ae:	68fb      	ldr	r3, [r7, #12]
 80089b0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80089b2:	b29b      	uxth	r3, r3
 80089b4:	3b01      	subs	r3, #1
 80089b6:	b29a      	uxth	r2, r3
 80089b8:	68fb      	ldr	r3, [r7, #12]
 80089ba:	86da      	strh	r2, [r3, #54]	@ 0x36
 80089bc:	e018      	b.n	80089f0 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80089be:	f7fc ff9b 	bl	80058f8 <HAL_GetTick>
 80089c2:	4602      	mov	r2, r0
 80089c4:	69fb      	ldr	r3, [r7, #28]
 80089c6:	1ad3      	subs	r3, r2, r3
 80089c8:	683a      	ldr	r2, [r7, #0]
 80089ca:	429a      	cmp	r2, r3
 80089cc:	d803      	bhi.n	80089d6 <HAL_SPI_Transmit+0x160>
 80089ce:	683b      	ldr	r3, [r7, #0]
 80089d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80089d4:	d102      	bne.n	80089dc <HAL_SPI_Transmit+0x166>
 80089d6:	683b      	ldr	r3, [r7, #0]
 80089d8:	2b00      	cmp	r3, #0
 80089da:	d109      	bne.n	80089f0 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80089dc:	68fb      	ldr	r3, [r7, #12]
 80089de:	2201      	movs	r2, #1
 80089e0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80089e4:	68fb      	ldr	r3, [r7, #12]
 80089e6:	2200      	movs	r2, #0
 80089e8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80089ec:	2303      	movs	r3, #3
 80089ee:	e082      	b.n	8008af6 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 80089f0:	68fb      	ldr	r3, [r7, #12]
 80089f2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80089f4:	b29b      	uxth	r3, r3
 80089f6:	2b00      	cmp	r3, #0
 80089f8:	d1c7      	bne.n	800898a <HAL_SPI_Transmit+0x114>
 80089fa:	e053      	b.n	8008aa4 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80089fc:	68fb      	ldr	r3, [r7, #12]
 80089fe:	685b      	ldr	r3, [r3, #4]
 8008a00:	2b00      	cmp	r3, #0
 8008a02:	d002      	beq.n	8008a0a <HAL_SPI_Transmit+0x194>
 8008a04:	8b7b      	ldrh	r3, [r7, #26]
 8008a06:	2b01      	cmp	r3, #1
 8008a08:	d147      	bne.n	8008a9a <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8008a0a:	68fb      	ldr	r3, [r7, #12]
 8008a0c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008a0e:	68fb      	ldr	r3, [r7, #12]
 8008a10:	681b      	ldr	r3, [r3, #0]
 8008a12:	330c      	adds	r3, #12
 8008a14:	7812      	ldrb	r2, [r2, #0]
 8008a16:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8008a18:	68fb      	ldr	r3, [r7, #12]
 8008a1a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008a1c:	1c5a      	adds	r2, r3, #1
 8008a1e:	68fb      	ldr	r3, [r7, #12]
 8008a20:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8008a22:	68fb      	ldr	r3, [r7, #12]
 8008a24:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008a26:	b29b      	uxth	r3, r3
 8008a28:	3b01      	subs	r3, #1
 8008a2a:	b29a      	uxth	r2, r3
 8008a2c:	68fb      	ldr	r3, [r7, #12]
 8008a2e:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8008a30:	e033      	b.n	8008a9a <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8008a32:	68fb      	ldr	r3, [r7, #12]
 8008a34:	681b      	ldr	r3, [r3, #0]
 8008a36:	689b      	ldr	r3, [r3, #8]
 8008a38:	f003 0302 	and.w	r3, r3, #2
 8008a3c:	2b02      	cmp	r3, #2
 8008a3e:	d113      	bne.n	8008a68 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8008a40:	68fb      	ldr	r3, [r7, #12]
 8008a42:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008a44:	68fb      	ldr	r3, [r7, #12]
 8008a46:	681b      	ldr	r3, [r3, #0]
 8008a48:	330c      	adds	r3, #12
 8008a4a:	7812      	ldrb	r2, [r2, #0]
 8008a4c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8008a4e:	68fb      	ldr	r3, [r7, #12]
 8008a50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008a52:	1c5a      	adds	r2, r3, #1
 8008a54:	68fb      	ldr	r3, [r7, #12]
 8008a56:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8008a58:	68fb      	ldr	r3, [r7, #12]
 8008a5a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008a5c:	b29b      	uxth	r3, r3
 8008a5e:	3b01      	subs	r3, #1
 8008a60:	b29a      	uxth	r2, r3
 8008a62:	68fb      	ldr	r3, [r7, #12]
 8008a64:	86da      	strh	r2, [r3, #54]	@ 0x36
 8008a66:	e018      	b.n	8008a9a <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008a68:	f7fc ff46 	bl	80058f8 <HAL_GetTick>
 8008a6c:	4602      	mov	r2, r0
 8008a6e:	69fb      	ldr	r3, [r7, #28]
 8008a70:	1ad3      	subs	r3, r2, r3
 8008a72:	683a      	ldr	r2, [r7, #0]
 8008a74:	429a      	cmp	r2, r3
 8008a76:	d803      	bhi.n	8008a80 <HAL_SPI_Transmit+0x20a>
 8008a78:	683b      	ldr	r3, [r7, #0]
 8008a7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a7e:	d102      	bne.n	8008a86 <HAL_SPI_Transmit+0x210>
 8008a80:	683b      	ldr	r3, [r7, #0]
 8008a82:	2b00      	cmp	r3, #0
 8008a84:	d109      	bne.n	8008a9a <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8008a86:	68fb      	ldr	r3, [r7, #12]
 8008a88:	2201      	movs	r2, #1
 8008a8a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8008a8e:	68fb      	ldr	r3, [r7, #12]
 8008a90:	2200      	movs	r2, #0
 8008a92:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8008a96:	2303      	movs	r3, #3
 8008a98:	e02d      	b.n	8008af6 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8008a9a:	68fb      	ldr	r3, [r7, #12]
 8008a9c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008a9e:	b29b      	uxth	r3, r3
 8008aa0:	2b00      	cmp	r3, #0
 8008aa2:	d1c6      	bne.n	8008a32 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008aa4:	69fa      	ldr	r2, [r7, #28]
 8008aa6:	6839      	ldr	r1, [r7, #0]
 8008aa8:	68f8      	ldr	r0, [r7, #12]
 8008aaa:	f000 fa59 	bl	8008f60 <SPI_EndRxTxTransaction>
 8008aae:	4603      	mov	r3, r0
 8008ab0:	2b00      	cmp	r3, #0
 8008ab2:	d002      	beq.n	8008aba <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008ab4:	68fb      	ldr	r3, [r7, #12]
 8008ab6:	2220      	movs	r2, #32
 8008ab8:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8008aba:	68fb      	ldr	r3, [r7, #12]
 8008abc:	689b      	ldr	r3, [r3, #8]
 8008abe:	2b00      	cmp	r3, #0
 8008ac0:	d10a      	bne.n	8008ad8 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008ac2:	2300      	movs	r3, #0
 8008ac4:	617b      	str	r3, [r7, #20]
 8008ac6:	68fb      	ldr	r3, [r7, #12]
 8008ac8:	681b      	ldr	r3, [r3, #0]
 8008aca:	68db      	ldr	r3, [r3, #12]
 8008acc:	617b      	str	r3, [r7, #20]
 8008ace:	68fb      	ldr	r3, [r7, #12]
 8008ad0:	681b      	ldr	r3, [r3, #0]
 8008ad2:	689b      	ldr	r3, [r3, #8]
 8008ad4:	617b      	str	r3, [r7, #20]
 8008ad6:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8008ad8:	68fb      	ldr	r3, [r7, #12]
 8008ada:	2201      	movs	r2, #1
 8008adc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8008ae0:	68fb      	ldr	r3, [r7, #12]
 8008ae2:	2200      	movs	r2, #0
 8008ae4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008ae8:	68fb      	ldr	r3, [r7, #12]
 8008aea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008aec:	2b00      	cmp	r3, #0
 8008aee:	d001      	beq.n	8008af4 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8008af0:	2301      	movs	r3, #1
 8008af2:	e000      	b.n	8008af6 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8008af4:	2300      	movs	r3, #0
  }
}
 8008af6:	4618      	mov	r0, r3
 8008af8:	3720      	adds	r7, #32
 8008afa:	46bd      	mov	sp, r7
 8008afc:	bd80      	pop	{r7, pc}

08008afe <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8008afe:	b580      	push	{r7, lr}
 8008b00:	b08a      	sub	sp, #40	@ 0x28
 8008b02:	af00      	add	r7, sp, #0
 8008b04:	60f8      	str	r0, [r7, #12]
 8008b06:	60b9      	str	r1, [r7, #8]
 8008b08:	607a      	str	r2, [r7, #4]
 8008b0a:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8008b0c:	2301      	movs	r3, #1
 8008b0e:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008b10:	f7fc fef2 	bl	80058f8 <HAL_GetTick>
 8008b14:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8008b16:	68fb      	ldr	r3, [r7, #12]
 8008b18:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8008b1c:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8008b1e:	68fb      	ldr	r3, [r7, #12]
 8008b20:	685b      	ldr	r3, [r3, #4]
 8008b22:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8008b24:	887b      	ldrh	r3, [r7, #2]
 8008b26:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8008b28:	7ffb      	ldrb	r3, [r7, #31]
 8008b2a:	2b01      	cmp	r3, #1
 8008b2c:	d00c      	beq.n	8008b48 <HAL_SPI_TransmitReceive+0x4a>
 8008b2e:	69bb      	ldr	r3, [r7, #24]
 8008b30:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8008b34:	d106      	bne.n	8008b44 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8008b36:	68fb      	ldr	r3, [r7, #12]
 8008b38:	689b      	ldr	r3, [r3, #8]
 8008b3a:	2b00      	cmp	r3, #0
 8008b3c:	d102      	bne.n	8008b44 <HAL_SPI_TransmitReceive+0x46>
 8008b3e:	7ffb      	ldrb	r3, [r7, #31]
 8008b40:	2b04      	cmp	r3, #4
 8008b42:	d001      	beq.n	8008b48 <HAL_SPI_TransmitReceive+0x4a>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8008b44:	2302      	movs	r3, #2
 8008b46:	e17f      	b.n	8008e48 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8008b48:	68bb      	ldr	r3, [r7, #8]
 8008b4a:	2b00      	cmp	r3, #0
 8008b4c:	d005      	beq.n	8008b5a <HAL_SPI_TransmitReceive+0x5c>
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	2b00      	cmp	r3, #0
 8008b52:	d002      	beq.n	8008b5a <HAL_SPI_TransmitReceive+0x5c>
 8008b54:	887b      	ldrh	r3, [r7, #2]
 8008b56:	2b00      	cmp	r3, #0
 8008b58:	d101      	bne.n	8008b5e <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 8008b5a:	2301      	movs	r3, #1
 8008b5c:	e174      	b.n	8008e48 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008b5e:	68fb      	ldr	r3, [r7, #12]
 8008b60:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8008b64:	2b01      	cmp	r3, #1
 8008b66:	d101      	bne.n	8008b6c <HAL_SPI_TransmitReceive+0x6e>
 8008b68:	2302      	movs	r3, #2
 8008b6a:	e16d      	b.n	8008e48 <HAL_SPI_TransmitReceive+0x34a>
 8008b6c:	68fb      	ldr	r3, [r7, #12]
 8008b6e:	2201      	movs	r2, #1
 8008b70:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8008b74:	68fb      	ldr	r3, [r7, #12]
 8008b76:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8008b7a:	b2db      	uxtb	r3, r3
 8008b7c:	2b04      	cmp	r3, #4
 8008b7e:	d003      	beq.n	8008b88 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8008b80:	68fb      	ldr	r3, [r7, #12]
 8008b82:	2205      	movs	r2, #5
 8008b84:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008b88:	68fb      	ldr	r3, [r7, #12]
 8008b8a:	2200      	movs	r2, #0
 8008b8c:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8008b8e:	68fb      	ldr	r3, [r7, #12]
 8008b90:	687a      	ldr	r2, [r7, #4]
 8008b92:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8008b94:	68fb      	ldr	r3, [r7, #12]
 8008b96:	887a      	ldrh	r2, [r7, #2]
 8008b98:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8008b9a:	68fb      	ldr	r3, [r7, #12]
 8008b9c:	887a      	ldrh	r2, [r7, #2]
 8008b9e:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8008ba0:	68fb      	ldr	r3, [r7, #12]
 8008ba2:	68ba      	ldr	r2, [r7, #8]
 8008ba4:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8008ba6:	68fb      	ldr	r3, [r7, #12]
 8008ba8:	887a      	ldrh	r2, [r7, #2]
 8008baa:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8008bac:	68fb      	ldr	r3, [r7, #12]
 8008bae:	887a      	ldrh	r2, [r7, #2]
 8008bb0:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8008bb2:	68fb      	ldr	r3, [r7, #12]
 8008bb4:	2200      	movs	r2, #0
 8008bb6:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8008bb8:	68fb      	ldr	r3, [r7, #12]
 8008bba:	2200      	movs	r2, #0
 8008bbc:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008bbe:	68fb      	ldr	r3, [r7, #12]
 8008bc0:	681b      	ldr	r3, [r3, #0]
 8008bc2:	681b      	ldr	r3, [r3, #0]
 8008bc4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008bc8:	2b40      	cmp	r3, #64	@ 0x40
 8008bca:	d007      	beq.n	8008bdc <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008bcc:	68fb      	ldr	r3, [r7, #12]
 8008bce:	681b      	ldr	r3, [r3, #0]
 8008bd0:	681a      	ldr	r2, [r3, #0]
 8008bd2:	68fb      	ldr	r3, [r7, #12]
 8008bd4:	681b      	ldr	r3, [r3, #0]
 8008bd6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008bda:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8008bdc:	68fb      	ldr	r3, [r7, #12]
 8008bde:	68db      	ldr	r3, [r3, #12]
 8008be0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008be4:	d17e      	bne.n	8008ce4 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008be6:	68fb      	ldr	r3, [r7, #12]
 8008be8:	685b      	ldr	r3, [r3, #4]
 8008bea:	2b00      	cmp	r3, #0
 8008bec:	d002      	beq.n	8008bf4 <HAL_SPI_TransmitReceive+0xf6>
 8008bee:	8afb      	ldrh	r3, [r7, #22]
 8008bf0:	2b01      	cmp	r3, #1
 8008bf2:	d16c      	bne.n	8008cce <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8008bf4:	68fb      	ldr	r3, [r7, #12]
 8008bf6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008bf8:	881a      	ldrh	r2, [r3, #0]
 8008bfa:	68fb      	ldr	r3, [r7, #12]
 8008bfc:	681b      	ldr	r3, [r3, #0]
 8008bfe:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8008c00:	68fb      	ldr	r3, [r7, #12]
 8008c02:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008c04:	1c9a      	adds	r2, r3, #2
 8008c06:	68fb      	ldr	r3, [r7, #12]
 8008c08:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8008c0a:	68fb      	ldr	r3, [r7, #12]
 8008c0c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008c0e:	b29b      	uxth	r3, r3
 8008c10:	3b01      	subs	r3, #1
 8008c12:	b29a      	uxth	r2, r3
 8008c14:	68fb      	ldr	r3, [r7, #12]
 8008c16:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008c18:	e059      	b.n	8008cce <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8008c1a:	68fb      	ldr	r3, [r7, #12]
 8008c1c:	681b      	ldr	r3, [r3, #0]
 8008c1e:	689b      	ldr	r3, [r3, #8]
 8008c20:	f003 0302 	and.w	r3, r3, #2
 8008c24:	2b02      	cmp	r3, #2
 8008c26:	d11b      	bne.n	8008c60 <HAL_SPI_TransmitReceive+0x162>
 8008c28:	68fb      	ldr	r3, [r7, #12]
 8008c2a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008c2c:	b29b      	uxth	r3, r3
 8008c2e:	2b00      	cmp	r3, #0
 8008c30:	d016      	beq.n	8008c60 <HAL_SPI_TransmitReceive+0x162>
 8008c32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c34:	2b01      	cmp	r3, #1
 8008c36:	d113      	bne.n	8008c60 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8008c38:	68fb      	ldr	r3, [r7, #12]
 8008c3a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008c3c:	881a      	ldrh	r2, [r3, #0]
 8008c3e:	68fb      	ldr	r3, [r7, #12]
 8008c40:	681b      	ldr	r3, [r3, #0]
 8008c42:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008c44:	68fb      	ldr	r3, [r7, #12]
 8008c46:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008c48:	1c9a      	adds	r2, r3, #2
 8008c4a:	68fb      	ldr	r3, [r7, #12]
 8008c4c:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8008c4e:	68fb      	ldr	r3, [r7, #12]
 8008c50:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008c52:	b29b      	uxth	r3, r3
 8008c54:	3b01      	subs	r3, #1
 8008c56:	b29a      	uxth	r2, r3
 8008c58:	68fb      	ldr	r3, [r7, #12]
 8008c5a:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8008c5c:	2300      	movs	r3, #0
 8008c5e:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8008c60:	68fb      	ldr	r3, [r7, #12]
 8008c62:	681b      	ldr	r3, [r3, #0]
 8008c64:	689b      	ldr	r3, [r3, #8]
 8008c66:	f003 0301 	and.w	r3, r3, #1
 8008c6a:	2b01      	cmp	r3, #1
 8008c6c:	d119      	bne.n	8008ca2 <HAL_SPI_TransmitReceive+0x1a4>
 8008c6e:	68fb      	ldr	r3, [r7, #12]
 8008c70:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008c72:	b29b      	uxth	r3, r3
 8008c74:	2b00      	cmp	r3, #0
 8008c76:	d014      	beq.n	8008ca2 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8008c78:	68fb      	ldr	r3, [r7, #12]
 8008c7a:	681b      	ldr	r3, [r3, #0]
 8008c7c:	68da      	ldr	r2, [r3, #12]
 8008c7e:	68fb      	ldr	r3, [r7, #12]
 8008c80:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008c82:	b292      	uxth	r2, r2
 8008c84:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8008c86:	68fb      	ldr	r3, [r7, #12]
 8008c88:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008c8a:	1c9a      	adds	r2, r3, #2
 8008c8c:	68fb      	ldr	r3, [r7, #12]
 8008c8e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8008c90:	68fb      	ldr	r3, [r7, #12]
 8008c92:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008c94:	b29b      	uxth	r3, r3
 8008c96:	3b01      	subs	r3, #1
 8008c98:	b29a      	uxth	r2, r3
 8008c9a:	68fb      	ldr	r3, [r7, #12]
 8008c9c:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8008c9e:	2301      	movs	r3, #1
 8008ca0:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8008ca2:	f7fc fe29 	bl	80058f8 <HAL_GetTick>
 8008ca6:	4602      	mov	r2, r0
 8008ca8:	6a3b      	ldr	r3, [r7, #32]
 8008caa:	1ad3      	subs	r3, r2, r3
 8008cac:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008cae:	429a      	cmp	r2, r3
 8008cb0:	d80d      	bhi.n	8008cce <HAL_SPI_TransmitReceive+0x1d0>
 8008cb2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008cb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008cb8:	d009      	beq.n	8008cce <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8008cba:	68fb      	ldr	r3, [r7, #12]
 8008cbc:	2201      	movs	r2, #1
 8008cbe:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8008cc2:	68fb      	ldr	r3, [r7, #12]
 8008cc4:	2200      	movs	r2, #0
 8008cc6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8008cca:	2303      	movs	r3, #3
 8008ccc:	e0bc      	b.n	8008e48 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008cce:	68fb      	ldr	r3, [r7, #12]
 8008cd0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008cd2:	b29b      	uxth	r3, r3
 8008cd4:	2b00      	cmp	r3, #0
 8008cd6:	d1a0      	bne.n	8008c1a <HAL_SPI_TransmitReceive+0x11c>
 8008cd8:	68fb      	ldr	r3, [r7, #12]
 8008cda:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008cdc:	b29b      	uxth	r3, r3
 8008cde:	2b00      	cmp	r3, #0
 8008ce0:	d19b      	bne.n	8008c1a <HAL_SPI_TransmitReceive+0x11c>
 8008ce2:	e082      	b.n	8008dea <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008ce4:	68fb      	ldr	r3, [r7, #12]
 8008ce6:	685b      	ldr	r3, [r3, #4]
 8008ce8:	2b00      	cmp	r3, #0
 8008cea:	d002      	beq.n	8008cf2 <HAL_SPI_TransmitReceive+0x1f4>
 8008cec:	8afb      	ldrh	r3, [r7, #22]
 8008cee:	2b01      	cmp	r3, #1
 8008cf0:	d171      	bne.n	8008dd6 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8008cf2:	68fb      	ldr	r3, [r7, #12]
 8008cf4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008cf6:	68fb      	ldr	r3, [r7, #12]
 8008cf8:	681b      	ldr	r3, [r3, #0]
 8008cfa:	330c      	adds	r3, #12
 8008cfc:	7812      	ldrb	r2, [r2, #0]
 8008cfe:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8008d00:	68fb      	ldr	r3, [r7, #12]
 8008d02:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008d04:	1c5a      	adds	r2, r3, #1
 8008d06:	68fb      	ldr	r3, [r7, #12]
 8008d08:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8008d0a:	68fb      	ldr	r3, [r7, #12]
 8008d0c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008d0e:	b29b      	uxth	r3, r3
 8008d10:	3b01      	subs	r3, #1
 8008d12:	b29a      	uxth	r2, r3
 8008d14:	68fb      	ldr	r3, [r7, #12]
 8008d16:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008d18:	e05d      	b.n	8008dd6 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8008d1a:	68fb      	ldr	r3, [r7, #12]
 8008d1c:	681b      	ldr	r3, [r3, #0]
 8008d1e:	689b      	ldr	r3, [r3, #8]
 8008d20:	f003 0302 	and.w	r3, r3, #2
 8008d24:	2b02      	cmp	r3, #2
 8008d26:	d11c      	bne.n	8008d62 <HAL_SPI_TransmitReceive+0x264>
 8008d28:	68fb      	ldr	r3, [r7, #12]
 8008d2a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008d2c:	b29b      	uxth	r3, r3
 8008d2e:	2b00      	cmp	r3, #0
 8008d30:	d017      	beq.n	8008d62 <HAL_SPI_TransmitReceive+0x264>
 8008d32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d34:	2b01      	cmp	r3, #1
 8008d36:	d114      	bne.n	8008d62 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8008d38:	68fb      	ldr	r3, [r7, #12]
 8008d3a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008d3c:	68fb      	ldr	r3, [r7, #12]
 8008d3e:	681b      	ldr	r3, [r3, #0]
 8008d40:	330c      	adds	r3, #12
 8008d42:	7812      	ldrb	r2, [r2, #0]
 8008d44:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8008d46:	68fb      	ldr	r3, [r7, #12]
 8008d48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008d4a:	1c5a      	adds	r2, r3, #1
 8008d4c:	68fb      	ldr	r3, [r7, #12]
 8008d4e:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8008d50:	68fb      	ldr	r3, [r7, #12]
 8008d52:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008d54:	b29b      	uxth	r3, r3
 8008d56:	3b01      	subs	r3, #1
 8008d58:	b29a      	uxth	r2, r3
 8008d5a:	68fb      	ldr	r3, [r7, #12]
 8008d5c:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8008d5e:	2300      	movs	r3, #0
 8008d60:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8008d62:	68fb      	ldr	r3, [r7, #12]
 8008d64:	681b      	ldr	r3, [r3, #0]
 8008d66:	689b      	ldr	r3, [r3, #8]
 8008d68:	f003 0301 	and.w	r3, r3, #1
 8008d6c:	2b01      	cmp	r3, #1
 8008d6e:	d119      	bne.n	8008da4 <HAL_SPI_TransmitReceive+0x2a6>
 8008d70:	68fb      	ldr	r3, [r7, #12]
 8008d72:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008d74:	b29b      	uxth	r3, r3
 8008d76:	2b00      	cmp	r3, #0
 8008d78:	d014      	beq.n	8008da4 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8008d7a:	68fb      	ldr	r3, [r7, #12]
 8008d7c:	681b      	ldr	r3, [r3, #0]
 8008d7e:	68da      	ldr	r2, [r3, #12]
 8008d80:	68fb      	ldr	r3, [r7, #12]
 8008d82:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008d84:	b2d2      	uxtb	r2, r2
 8008d86:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8008d88:	68fb      	ldr	r3, [r7, #12]
 8008d8a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008d8c:	1c5a      	adds	r2, r3, #1
 8008d8e:	68fb      	ldr	r3, [r7, #12]
 8008d90:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8008d92:	68fb      	ldr	r3, [r7, #12]
 8008d94:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008d96:	b29b      	uxth	r3, r3
 8008d98:	3b01      	subs	r3, #1
 8008d9a:	b29a      	uxth	r2, r3
 8008d9c:	68fb      	ldr	r3, [r7, #12]
 8008d9e:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8008da0:	2301      	movs	r3, #1
 8008da2:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8008da4:	f7fc fda8 	bl	80058f8 <HAL_GetTick>
 8008da8:	4602      	mov	r2, r0
 8008daa:	6a3b      	ldr	r3, [r7, #32]
 8008dac:	1ad3      	subs	r3, r2, r3
 8008dae:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008db0:	429a      	cmp	r2, r3
 8008db2:	d803      	bhi.n	8008dbc <HAL_SPI_TransmitReceive+0x2be>
 8008db4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008db6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008dba:	d102      	bne.n	8008dc2 <HAL_SPI_TransmitReceive+0x2c4>
 8008dbc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008dbe:	2b00      	cmp	r3, #0
 8008dc0:	d109      	bne.n	8008dd6 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8008dc2:	68fb      	ldr	r3, [r7, #12]
 8008dc4:	2201      	movs	r2, #1
 8008dc6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8008dca:	68fb      	ldr	r3, [r7, #12]
 8008dcc:	2200      	movs	r2, #0
 8008dce:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8008dd2:	2303      	movs	r3, #3
 8008dd4:	e038      	b.n	8008e48 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008dd6:	68fb      	ldr	r3, [r7, #12]
 8008dd8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008dda:	b29b      	uxth	r3, r3
 8008ddc:	2b00      	cmp	r3, #0
 8008dde:	d19c      	bne.n	8008d1a <HAL_SPI_TransmitReceive+0x21c>
 8008de0:	68fb      	ldr	r3, [r7, #12]
 8008de2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008de4:	b29b      	uxth	r3, r3
 8008de6:	2b00      	cmp	r3, #0
 8008de8:	d197      	bne.n	8008d1a <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008dea:	6a3a      	ldr	r2, [r7, #32]
 8008dec:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8008dee:	68f8      	ldr	r0, [r7, #12]
 8008df0:	f000 f8b6 	bl	8008f60 <SPI_EndRxTxTransaction>
 8008df4:	4603      	mov	r3, r0
 8008df6:	2b00      	cmp	r3, #0
 8008df8:	d008      	beq.n	8008e0c <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008dfa:	68fb      	ldr	r3, [r7, #12]
 8008dfc:	2220      	movs	r2, #32
 8008dfe:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8008e00:	68fb      	ldr	r3, [r7, #12]
 8008e02:	2200      	movs	r2, #0
 8008e04:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8008e08:	2301      	movs	r3, #1
 8008e0a:	e01d      	b.n	8008e48 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8008e0c:	68fb      	ldr	r3, [r7, #12]
 8008e0e:	689b      	ldr	r3, [r3, #8]
 8008e10:	2b00      	cmp	r3, #0
 8008e12:	d10a      	bne.n	8008e2a <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008e14:	2300      	movs	r3, #0
 8008e16:	613b      	str	r3, [r7, #16]
 8008e18:	68fb      	ldr	r3, [r7, #12]
 8008e1a:	681b      	ldr	r3, [r3, #0]
 8008e1c:	68db      	ldr	r3, [r3, #12]
 8008e1e:	613b      	str	r3, [r7, #16]
 8008e20:	68fb      	ldr	r3, [r7, #12]
 8008e22:	681b      	ldr	r3, [r3, #0]
 8008e24:	689b      	ldr	r3, [r3, #8]
 8008e26:	613b      	str	r3, [r7, #16]
 8008e28:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 8008e2a:	68fb      	ldr	r3, [r7, #12]
 8008e2c:	2201      	movs	r2, #1
 8008e2e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8008e32:	68fb      	ldr	r3, [r7, #12]
 8008e34:	2200      	movs	r2, #0
 8008e36:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008e3a:	68fb      	ldr	r3, [r7, #12]
 8008e3c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008e3e:	2b00      	cmp	r3, #0
 8008e40:	d001      	beq.n	8008e46 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 8008e42:	2301      	movs	r3, #1
 8008e44:	e000      	b.n	8008e48 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 8008e46:	2300      	movs	r3, #0
  }
}
 8008e48:	4618      	mov	r0, r3
 8008e4a:	3728      	adds	r7, #40	@ 0x28
 8008e4c:	46bd      	mov	sp, r7
 8008e4e:	bd80      	pop	{r7, pc}

08008e50 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8008e50:	b580      	push	{r7, lr}
 8008e52:	b088      	sub	sp, #32
 8008e54:	af00      	add	r7, sp, #0
 8008e56:	60f8      	str	r0, [r7, #12]
 8008e58:	60b9      	str	r1, [r7, #8]
 8008e5a:	603b      	str	r3, [r7, #0]
 8008e5c:	4613      	mov	r3, r2
 8008e5e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8008e60:	f7fc fd4a 	bl	80058f8 <HAL_GetTick>
 8008e64:	4602      	mov	r2, r0
 8008e66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008e68:	1a9b      	subs	r3, r3, r2
 8008e6a:	683a      	ldr	r2, [r7, #0]
 8008e6c:	4413      	add	r3, r2
 8008e6e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8008e70:	f7fc fd42 	bl	80058f8 <HAL_GetTick>
 8008e74:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8008e76:	4b39      	ldr	r3, [pc, #228]	@ (8008f5c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8008e78:	681b      	ldr	r3, [r3, #0]
 8008e7a:	015b      	lsls	r3, r3, #5
 8008e7c:	0d1b      	lsrs	r3, r3, #20
 8008e7e:	69fa      	ldr	r2, [r7, #28]
 8008e80:	fb02 f303 	mul.w	r3, r2, r3
 8008e84:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008e86:	e055      	b.n	8008f34 <SPI_WaitFlagStateUntilTimeout+0xe4>
  {
    if (Timeout != HAL_MAX_DELAY)
 8008e88:	683b      	ldr	r3, [r7, #0]
 8008e8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e8e:	d051      	beq.n	8008f34 <SPI_WaitFlagStateUntilTimeout+0xe4>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8008e90:	f7fc fd32 	bl	80058f8 <HAL_GetTick>
 8008e94:	4602      	mov	r2, r0
 8008e96:	69bb      	ldr	r3, [r7, #24]
 8008e98:	1ad3      	subs	r3, r2, r3
 8008e9a:	69fa      	ldr	r2, [r7, #28]
 8008e9c:	429a      	cmp	r2, r3
 8008e9e:	d902      	bls.n	8008ea6 <SPI_WaitFlagStateUntilTimeout+0x56>
 8008ea0:	69fb      	ldr	r3, [r7, #28]
 8008ea2:	2b00      	cmp	r3, #0
 8008ea4:	d13d      	bne.n	8008f22 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8008ea6:	68fb      	ldr	r3, [r7, #12]
 8008ea8:	681b      	ldr	r3, [r3, #0]
 8008eaa:	685a      	ldr	r2, [r3, #4]
 8008eac:	68fb      	ldr	r3, [r7, #12]
 8008eae:	681b      	ldr	r3, [r3, #0]
 8008eb0:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8008eb4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008eb6:	68fb      	ldr	r3, [r7, #12]
 8008eb8:	685b      	ldr	r3, [r3, #4]
 8008eba:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8008ebe:	d111      	bne.n	8008ee4 <SPI_WaitFlagStateUntilTimeout+0x94>
 8008ec0:	68fb      	ldr	r3, [r7, #12]
 8008ec2:	689b      	ldr	r3, [r3, #8]
 8008ec4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008ec8:	d004      	beq.n	8008ed4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008eca:	68fb      	ldr	r3, [r7, #12]
 8008ecc:	689b      	ldr	r3, [r3, #8]
 8008ece:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008ed2:	d107      	bne.n	8008ee4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8008ed4:	68fb      	ldr	r3, [r7, #12]
 8008ed6:	681b      	ldr	r3, [r3, #0]
 8008ed8:	681a      	ldr	r2, [r3, #0]
 8008eda:	68fb      	ldr	r3, [r7, #12]
 8008edc:	681b      	ldr	r3, [r3, #0]
 8008ede:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008ee2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008ee4:	68fb      	ldr	r3, [r7, #12]
 8008ee6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008ee8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008eec:	d10f      	bne.n	8008f0e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8008eee:	68fb      	ldr	r3, [r7, #12]
 8008ef0:	681b      	ldr	r3, [r3, #0]
 8008ef2:	681a      	ldr	r2, [r3, #0]
 8008ef4:	68fb      	ldr	r3, [r7, #12]
 8008ef6:	681b      	ldr	r3, [r3, #0]
 8008ef8:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8008efc:	601a      	str	r2, [r3, #0]
 8008efe:	68fb      	ldr	r3, [r7, #12]
 8008f00:	681b      	ldr	r3, [r3, #0]
 8008f02:	681a      	ldr	r2, [r3, #0]
 8008f04:	68fb      	ldr	r3, [r7, #12]
 8008f06:	681b      	ldr	r3, [r3, #0]
 8008f08:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8008f0c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8008f0e:	68fb      	ldr	r3, [r7, #12]
 8008f10:	2201      	movs	r2, #1
 8008f12:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8008f16:	68fb      	ldr	r3, [r7, #12]
 8008f18:	2200      	movs	r2, #0
 8008f1a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8008f1e:	2303      	movs	r3, #3
 8008f20:	e018      	b.n	8008f54 <SPI_WaitFlagStateUntilTimeout+0x104>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8008f22:	697b      	ldr	r3, [r7, #20]
 8008f24:	2b00      	cmp	r3, #0
 8008f26:	d102      	bne.n	8008f2e <SPI_WaitFlagStateUntilTimeout+0xde>
      {
        tmp_timeout = 0U;
 8008f28:	2300      	movs	r3, #0
 8008f2a:	61fb      	str	r3, [r7, #28]
 8008f2c:	e002      	b.n	8008f34 <SPI_WaitFlagStateUntilTimeout+0xe4>
      }
      else
      {
        count--;
 8008f2e:	697b      	ldr	r3, [r7, #20]
 8008f30:	3b01      	subs	r3, #1
 8008f32:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008f34:	68fb      	ldr	r3, [r7, #12]
 8008f36:	681b      	ldr	r3, [r3, #0]
 8008f38:	689a      	ldr	r2, [r3, #8]
 8008f3a:	68bb      	ldr	r3, [r7, #8]
 8008f3c:	4013      	ands	r3, r2
 8008f3e:	68ba      	ldr	r2, [r7, #8]
 8008f40:	429a      	cmp	r2, r3
 8008f42:	bf0c      	ite	eq
 8008f44:	2301      	moveq	r3, #1
 8008f46:	2300      	movne	r3, #0
 8008f48:	b2db      	uxtb	r3, r3
 8008f4a:	461a      	mov	r2, r3
 8008f4c:	79fb      	ldrb	r3, [r7, #7]
 8008f4e:	429a      	cmp	r2, r3
 8008f50:	d19a      	bne.n	8008e88 <SPI_WaitFlagStateUntilTimeout+0x38>
      }
    }
  }

  return HAL_OK;
 8008f52:	2300      	movs	r3, #0
}
 8008f54:	4618      	mov	r0, r3
 8008f56:	3720      	adds	r7, #32
 8008f58:	46bd      	mov	sp, r7
 8008f5a:	bd80      	pop	{r7, pc}
 8008f5c:	2000d114 	.word	0x2000d114

08008f60 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8008f60:	b580      	push	{r7, lr}
 8008f62:	b088      	sub	sp, #32
 8008f64:	af02      	add	r7, sp, #8
 8008f66:	60f8      	str	r0, [r7, #12]
 8008f68:	60b9      	str	r1, [r7, #8]
 8008f6a:	607a      	str	r2, [r7, #4]
  __IO uint32_t count;

  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	9300      	str	r3, [sp, #0]
 8008f70:	68bb      	ldr	r3, [r7, #8]
 8008f72:	2201      	movs	r2, #1
 8008f74:	2102      	movs	r1, #2
 8008f76:	68f8      	ldr	r0, [r7, #12]
 8008f78:	f7ff ff6a 	bl	8008e50 <SPI_WaitFlagStateUntilTimeout>
 8008f7c:	4603      	mov	r3, r0
 8008f7e:	2b00      	cmp	r3, #0
 8008f80:	d007      	beq.n	8008f92 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008f82:	68fb      	ldr	r3, [r7, #12]
 8008f84:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008f86:	f043 0220 	orr.w	r2, r3, #32
 8008f8a:	68fb      	ldr	r3, [r7, #12]
 8008f8c:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8008f8e:	2303      	movs	r3, #3
 8008f90:	e032      	b.n	8008ff8 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in us */
  count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8008f92:	4b1b      	ldr	r3, [pc, #108]	@ (8009000 <SPI_EndRxTxTransaction+0xa0>)
 8008f94:	681b      	ldr	r3, [r3, #0]
 8008f96:	4a1b      	ldr	r2, [pc, #108]	@ (8009004 <SPI_EndRxTxTransaction+0xa4>)
 8008f98:	fba2 2303 	umull	r2, r3, r2, r3
 8008f9c:	0d5b      	lsrs	r3, r3, #21
 8008f9e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8008fa2:	fb02 f303 	mul.w	r3, r2, r3
 8008fa6:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008fa8:	68fb      	ldr	r3, [r7, #12]
 8008faa:	685b      	ldr	r3, [r3, #4]
 8008fac:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8008fb0:	d112      	bne.n	8008fd8 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	9300      	str	r3, [sp, #0]
 8008fb6:	68bb      	ldr	r3, [r7, #8]
 8008fb8:	2200      	movs	r2, #0
 8008fba:	2180      	movs	r1, #128	@ 0x80
 8008fbc:	68f8      	ldr	r0, [r7, #12]
 8008fbe:	f7ff ff47 	bl	8008e50 <SPI_WaitFlagStateUntilTimeout>
 8008fc2:	4603      	mov	r3, r0
 8008fc4:	2b00      	cmp	r3, #0
 8008fc6:	d016      	beq.n	8008ff6 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008fc8:	68fb      	ldr	r3, [r7, #12]
 8008fca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008fcc:	f043 0220 	orr.w	r2, r3, #32
 8008fd0:	68fb      	ldr	r3, [r7, #12]
 8008fd2:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8008fd4:	2303      	movs	r3, #3
 8008fd6:	e00f      	b.n	8008ff8 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8008fd8:	697b      	ldr	r3, [r7, #20]
 8008fda:	2b00      	cmp	r3, #0
 8008fdc:	d00a      	beq.n	8008ff4 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8008fde:	697b      	ldr	r3, [r7, #20]
 8008fe0:	3b01      	subs	r3, #1
 8008fe2:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8008fe4:	68fb      	ldr	r3, [r7, #12]
 8008fe6:	681b      	ldr	r3, [r3, #0]
 8008fe8:	689b      	ldr	r3, [r3, #8]
 8008fea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008fee:	2b80      	cmp	r3, #128	@ 0x80
 8008ff0:	d0f2      	beq.n	8008fd8 <SPI_EndRxTxTransaction+0x78>
 8008ff2:	e000      	b.n	8008ff6 <SPI_EndRxTxTransaction+0x96>
        break;
 8008ff4:	bf00      	nop
  }

  return HAL_OK;
 8008ff6:	2300      	movs	r3, #0
}
 8008ff8:	4618      	mov	r0, r3
 8008ffa:	3718      	adds	r7, #24
 8008ffc:	46bd      	mov	sp, r7
 8008ffe:	bd80      	pop	{r7, pc}
 8009000:	2000d114 	.word	0x2000d114
 8009004:	165e9f81 	.word	0x165e9f81

08009008 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009008:	b580      	push	{r7, lr}
 800900a:	b082      	sub	sp, #8
 800900c:	af00      	add	r7, sp, #0
 800900e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	2b00      	cmp	r3, #0
 8009014:	d101      	bne.n	800901a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009016:	2301      	movs	r3, #1
 8009018:	e041      	b.n	800909e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009020:	b2db      	uxtb	r3, r3
 8009022:	2b00      	cmp	r3, #0
 8009024:	d106      	bne.n	8009034 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	2200      	movs	r2, #0
 800902a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800902e:	6878      	ldr	r0, [r7, #4]
 8009030:	f7fc f9e0 	bl	80053f4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	2202      	movs	r2, #2
 8009038:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	681a      	ldr	r2, [r3, #0]
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	3304      	adds	r3, #4
 8009044:	4619      	mov	r1, r3
 8009046:	4610      	mov	r0, r2
 8009048:	f000 fd10 	bl	8009a6c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	2201      	movs	r2, #1
 8009050:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	2201      	movs	r2, #1
 8009058:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	2201      	movs	r2, #1
 8009060:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	2201      	movs	r2, #1
 8009068:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	2201      	movs	r2, #1
 8009070:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	2201      	movs	r2, #1
 8009078:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	2201      	movs	r2, #1
 8009080:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	2201      	movs	r2, #1
 8009088:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	2201      	movs	r2, #1
 8009090:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	2201      	movs	r2, #1
 8009098:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800909c:	2300      	movs	r3, #0
}
 800909e:	4618      	mov	r0, r3
 80090a0:	3708      	adds	r7, #8
 80090a2:	46bd      	mov	sp, r7
 80090a4:	bd80      	pop	{r7, pc}
	...

080090a8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80090a8:	b480      	push	{r7}
 80090aa:	b085      	sub	sp, #20
 80090ac:	af00      	add	r7, sp, #0
 80090ae:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80090b6:	b2db      	uxtb	r3, r3
 80090b8:	2b01      	cmp	r3, #1
 80090ba:	d001      	beq.n	80090c0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80090bc:	2301      	movs	r3, #1
 80090be:	e044      	b.n	800914a <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	2202      	movs	r2, #2
 80090c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	681b      	ldr	r3, [r3, #0]
 80090cc:	68da      	ldr	r2, [r3, #12]
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	681b      	ldr	r3, [r3, #0]
 80090d2:	f042 0201 	orr.w	r2, r2, #1
 80090d6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	681b      	ldr	r3, [r3, #0]
 80090dc:	4a1e      	ldr	r2, [pc, #120]	@ (8009158 <HAL_TIM_Base_Start_IT+0xb0>)
 80090de:	4293      	cmp	r3, r2
 80090e0:	d018      	beq.n	8009114 <HAL_TIM_Base_Start_IT+0x6c>
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	681b      	ldr	r3, [r3, #0]
 80090e6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80090ea:	d013      	beq.n	8009114 <HAL_TIM_Base_Start_IT+0x6c>
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	681b      	ldr	r3, [r3, #0]
 80090f0:	4a1a      	ldr	r2, [pc, #104]	@ (800915c <HAL_TIM_Base_Start_IT+0xb4>)
 80090f2:	4293      	cmp	r3, r2
 80090f4:	d00e      	beq.n	8009114 <HAL_TIM_Base_Start_IT+0x6c>
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	681b      	ldr	r3, [r3, #0]
 80090fa:	4a19      	ldr	r2, [pc, #100]	@ (8009160 <HAL_TIM_Base_Start_IT+0xb8>)
 80090fc:	4293      	cmp	r3, r2
 80090fe:	d009      	beq.n	8009114 <HAL_TIM_Base_Start_IT+0x6c>
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	681b      	ldr	r3, [r3, #0]
 8009104:	4a17      	ldr	r2, [pc, #92]	@ (8009164 <HAL_TIM_Base_Start_IT+0xbc>)
 8009106:	4293      	cmp	r3, r2
 8009108:	d004      	beq.n	8009114 <HAL_TIM_Base_Start_IT+0x6c>
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	681b      	ldr	r3, [r3, #0]
 800910e:	4a16      	ldr	r2, [pc, #88]	@ (8009168 <HAL_TIM_Base_Start_IT+0xc0>)
 8009110:	4293      	cmp	r3, r2
 8009112:	d111      	bne.n	8009138 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	681b      	ldr	r3, [r3, #0]
 8009118:	689b      	ldr	r3, [r3, #8]
 800911a:	f003 0307 	and.w	r3, r3, #7
 800911e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009120:	68fb      	ldr	r3, [r7, #12]
 8009122:	2b06      	cmp	r3, #6
 8009124:	d010      	beq.n	8009148 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	681b      	ldr	r3, [r3, #0]
 800912a:	681a      	ldr	r2, [r3, #0]
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	681b      	ldr	r3, [r3, #0]
 8009130:	f042 0201 	orr.w	r2, r2, #1
 8009134:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009136:	e007      	b.n	8009148 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	681b      	ldr	r3, [r3, #0]
 800913c:	681a      	ldr	r2, [r3, #0]
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	681b      	ldr	r3, [r3, #0]
 8009142:	f042 0201 	orr.w	r2, r2, #1
 8009146:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8009148:	2300      	movs	r3, #0
}
 800914a:	4618      	mov	r0, r3
 800914c:	3714      	adds	r7, #20
 800914e:	46bd      	mov	sp, r7
 8009150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009154:	4770      	bx	lr
 8009156:	bf00      	nop
 8009158:	40010000 	.word	0x40010000
 800915c:	40000400 	.word	0x40000400
 8009160:	40000800 	.word	0x40000800
 8009164:	40000c00 	.word	0x40000c00
 8009168:	40014000 	.word	0x40014000

0800916c <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800916c:	b480      	push	{r7}
 800916e:	b083      	sub	sp, #12
 8009170:	af00      	add	r7, sp, #0
 8009172:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	681b      	ldr	r3, [r3, #0]
 8009178:	68da      	ldr	r2, [r3, #12]
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	681b      	ldr	r3, [r3, #0]
 800917e:	f022 0201 	bic.w	r2, r2, #1
 8009182:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	681b      	ldr	r3, [r3, #0]
 8009188:	6a1a      	ldr	r2, [r3, #32]
 800918a:	f241 1311 	movw	r3, #4369	@ 0x1111
 800918e:	4013      	ands	r3, r2
 8009190:	2b00      	cmp	r3, #0
 8009192:	d10f      	bne.n	80091b4 <HAL_TIM_Base_Stop_IT+0x48>
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	681b      	ldr	r3, [r3, #0]
 8009198:	6a1a      	ldr	r2, [r3, #32]
 800919a:	f240 4344 	movw	r3, #1092	@ 0x444
 800919e:	4013      	ands	r3, r2
 80091a0:	2b00      	cmp	r3, #0
 80091a2:	d107      	bne.n	80091b4 <HAL_TIM_Base_Stop_IT+0x48>
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	681b      	ldr	r3, [r3, #0]
 80091a8:	681a      	ldr	r2, [r3, #0]
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	681b      	ldr	r3, [r3, #0]
 80091ae:	f022 0201 	bic.w	r2, r2, #1
 80091b2:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	2201      	movs	r2, #1
 80091b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 80091bc:	2300      	movs	r3, #0
}
 80091be:	4618      	mov	r0, r3
 80091c0:	370c      	adds	r7, #12
 80091c2:	46bd      	mov	sp, r7
 80091c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091c8:	4770      	bx	lr

080091ca <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80091ca:	b580      	push	{r7, lr}
 80091cc:	b082      	sub	sp, #8
 80091ce:	af00      	add	r7, sp, #0
 80091d0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	2b00      	cmp	r3, #0
 80091d6:	d101      	bne.n	80091dc <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80091d8:	2301      	movs	r3, #1
 80091da:	e041      	b.n	8009260 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80091e2:	b2db      	uxtb	r3, r3
 80091e4:	2b00      	cmp	r3, #0
 80091e6:	d106      	bne.n	80091f6 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	2200      	movs	r2, #0
 80091ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80091f0:	6878      	ldr	r0, [r7, #4]
 80091f2:	f000 f839 	bl	8009268 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	2202      	movs	r2, #2
 80091fa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	681a      	ldr	r2, [r3, #0]
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	3304      	adds	r3, #4
 8009206:	4619      	mov	r1, r3
 8009208:	4610      	mov	r0, r2
 800920a:	f000 fc2f 	bl	8009a6c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	2201      	movs	r2, #1
 8009212:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	2201      	movs	r2, #1
 800921a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	2201      	movs	r2, #1
 8009222:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	2201      	movs	r2, #1
 800922a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	2201      	movs	r2, #1
 8009232:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	2201      	movs	r2, #1
 800923a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	2201      	movs	r2, #1
 8009242:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	2201      	movs	r2, #1
 800924a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	2201      	movs	r2, #1
 8009252:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	2201      	movs	r2, #1
 800925a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800925e:	2300      	movs	r3, #0
}
 8009260:	4618      	mov	r0, r3
 8009262:	3708      	adds	r7, #8
 8009264:	46bd      	mov	sp, r7
 8009266:	bd80      	pop	{r7, pc}

08009268 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8009268:	b480      	push	{r7}
 800926a:	b083      	sub	sp, #12
 800926c:	af00      	add	r7, sp, #0
 800926e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8009270:	bf00      	nop
 8009272:	370c      	adds	r7, #12
 8009274:	46bd      	mov	sp, r7
 8009276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800927a:	4770      	bx	lr

0800927c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800927c:	b580      	push	{r7, lr}
 800927e:	b084      	sub	sp, #16
 8009280:	af00      	add	r7, sp, #0
 8009282:	6078      	str	r0, [r7, #4]
 8009284:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8009286:	683b      	ldr	r3, [r7, #0]
 8009288:	2b00      	cmp	r3, #0
 800928a:	d109      	bne.n	80092a0 <HAL_TIM_PWM_Start+0x24>
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8009292:	b2db      	uxtb	r3, r3
 8009294:	2b01      	cmp	r3, #1
 8009296:	bf14      	ite	ne
 8009298:	2301      	movne	r3, #1
 800929a:	2300      	moveq	r3, #0
 800929c:	b2db      	uxtb	r3, r3
 800929e:	e022      	b.n	80092e6 <HAL_TIM_PWM_Start+0x6a>
 80092a0:	683b      	ldr	r3, [r7, #0]
 80092a2:	2b04      	cmp	r3, #4
 80092a4:	d109      	bne.n	80092ba <HAL_TIM_PWM_Start+0x3e>
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80092ac:	b2db      	uxtb	r3, r3
 80092ae:	2b01      	cmp	r3, #1
 80092b0:	bf14      	ite	ne
 80092b2:	2301      	movne	r3, #1
 80092b4:	2300      	moveq	r3, #0
 80092b6:	b2db      	uxtb	r3, r3
 80092b8:	e015      	b.n	80092e6 <HAL_TIM_PWM_Start+0x6a>
 80092ba:	683b      	ldr	r3, [r7, #0]
 80092bc:	2b08      	cmp	r3, #8
 80092be:	d109      	bne.n	80092d4 <HAL_TIM_PWM_Start+0x58>
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80092c6:	b2db      	uxtb	r3, r3
 80092c8:	2b01      	cmp	r3, #1
 80092ca:	bf14      	ite	ne
 80092cc:	2301      	movne	r3, #1
 80092ce:	2300      	moveq	r3, #0
 80092d0:	b2db      	uxtb	r3, r3
 80092d2:	e008      	b.n	80092e6 <HAL_TIM_PWM_Start+0x6a>
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80092da:	b2db      	uxtb	r3, r3
 80092dc:	2b01      	cmp	r3, #1
 80092de:	bf14      	ite	ne
 80092e0:	2301      	movne	r3, #1
 80092e2:	2300      	moveq	r3, #0
 80092e4:	b2db      	uxtb	r3, r3
 80092e6:	2b00      	cmp	r3, #0
 80092e8:	d001      	beq.n	80092ee <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80092ea:	2301      	movs	r3, #1
 80092ec:	e068      	b.n	80093c0 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80092ee:	683b      	ldr	r3, [r7, #0]
 80092f0:	2b00      	cmp	r3, #0
 80092f2:	d104      	bne.n	80092fe <HAL_TIM_PWM_Start+0x82>
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	2202      	movs	r2, #2
 80092f8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80092fc:	e013      	b.n	8009326 <HAL_TIM_PWM_Start+0xaa>
 80092fe:	683b      	ldr	r3, [r7, #0]
 8009300:	2b04      	cmp	r3, #4
 8009302:	d104      	bne.n	800930e <HAL_TIM_PWM_Start+0x92>
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	2202      	movs	r2, #2
 8009308:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800930c:	e00b      	b.n	8009326 <HAL_TIM_PWM_Start+0xaa>
 800930e:	683b      	ldr	r3, [r7, #0]
 8009310:	2b08      	cmp	r3, #8
 8009312:	d104      	bne.n	800931e <HAL_TIM_PWM_Start+0xa2>
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	2202      	movs	r2, #2
 8009318:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800931c:	e003      	b.n	8009326 <HAL_TIM_PWM_Start+0xaa>
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	2202      	movs	r2, #2
 8009322:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	681b      	ldr	r3, [r3, #0]
 800932a:	2201      	movs	r2, #1
 800932c:	6839      	ldr	r1, [r7, #0]
 800932e:	4618      	mov	r0, r3
 8009330:	f000 fe48 	bl	8009fc4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	681b      	ldr	r3, [r3, #0]
 8009338:	4a23      	ldr	r2, [pc, #140]	@ (80093c8 <HAL_TIM_PWM_Start+0x14c>)
 800933a:	4293      	cmp	r3, r2
 800933c:	d107      	bne.n	800934e <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	681b      	ldr	r3, [r3, #0]
 8009342:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	681b      	ldr	r3, [r3, #0]
 8009348:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800934c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	681b      	ldr	r3, [r3, #0]
 8009352:	4a1d      	ldr	r2, [pc, #116]	@ (80093c8 <HAL_TIM_PWM_Start+0x14c>)
 8009354:	4293      	cmp	r3, r2
 8009356:	d018      	beq.n	800938a <HAL_TIM_PWM_Start+0x10e>
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	681b      	ldr	r3, [r3, #0]
 800935c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009360:	d013      	beq.n	800938a <HAL_TIM_PWM_Start+0x10e>
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	681b      	ldr	r3, [r3, #0]
 8009366:	4a19      	ldr	r2, [pc, #100]	@ (80093cc <HAL_TIM_PWM_Start+0x150>)
 8009368:	4293      	cmp	r3, r2
 800936a:	d00e      	beq.n	800938a <HAL_TIM_PWM_Start+0x10e>
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	681b      	ldr	r3, [r3, #0]
 8009370:	4a17      	ldr	r2, [pc, #92]	@ (80093d0 <HAL_TIM_PWM_Start+0x154>)
 8009372:	4293      	cmp	r3, r2
 8009374:	d009      	beq.n	800938a <HAL_TIM_PWM_Start+0x10e>
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	681b      	ldr	r3, [r3, #0]
 800937a:	4a16      	ldr	r2, [pc, #88]	@ (80093d4 <HAL_TIM_PWM_Start+0x158>)
 800937c:	4293      	cmp	r3, r2
 800937e:	d004      	beq.n	800938a <HAL_TIM_PWM_Start+0x10e>
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	681b      	ldr	r3, [r3, #0]
 8009384:	4a14      	ldr	r2, [pc, #80]	@ (80093d8 <HAL_TIM_PWM_Start+0x15c>)
 8009386:	4293      	cmp	r3, r2
 8009388:	d111      	bne.n	80093ae <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	681b      	ldr	r3, [r3, #0]
 800938e:	689b      	ldr	r3, [r3, #8]
 8009390:	f003 0307 	and.w	r3, r3, #7
 8009394:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009396:	68fb      	ldr	r3, [r7, #12]
 8009398:	2b06      	cmp	r3, #6
 800939a:	d010      	beq.n	80093be <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	681b      	ldr	r3, [r3, #0]
 80093a0:	681a      	ldr	r2, [r3, #0]
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	681b      	ldr	r3, [r3, #0]
 80093a6:	f042 0201 	orr.w	r2, r2, #1
 80093aa:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80093ac:	e007      	b.n	80093be <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	681b      	ldr	r3, [r3, #0]
 80093b2:	681a      	ldr	r2, [r3, #0]
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	681b      	ldr	r3, [r3, #0]
 80093b8:	f042 0201 	orr.w	r2, r2, #1
 80093bc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80093be:	2300      	movs	r3, #0
}
 80093c0:	4618      	mov	r0, r3
 80093c2:	3710      	adds	r7, #16
 80093c4:	46bd      	mov	sp, r7
 80093c6:	bd80      	pop	{r7, pc}
 80093c8:	40010000 	.word	0x40010000
 80093cc:	40000400 	.word	0x40000400
 80093d0:	40000800 	.word	0x40000800
 80093d4:	40000c00 	.word	0x40000c00
 80093d8:	40014000 	.word	0x40014000

080093dc <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 80093dc:	b580      	push	{r7, lr}
 80093de:	b086      	sub	sp, #24
 80093e0:	af00      	add	r7, sp, #0
 80093e2:	6078      	str	r0, [r7, #4]
 80093e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	2b00      	cmp	r3, #0
 80093ea:	d101      	bne.n	80093f0 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80093ec:	2301      	movs	r3, #1
 80093ee:	e097      	b.n	8009520 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80093f6:	b2db      	uxtb	r3, r3
 80093f8:	2b00      	cmp	r3, #0
 80093fa:	d106      	bne.n	800940a <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	2200      	movs	r2, #0
 8009400:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8009404:	6878      	ldr	r0, [r7, #4]
 8009406:	f7fc f857 	bl	80054b8 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	2202      	movs	r2, #2
 800940e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	681b      	ldr	r3, [r3, #0]
 8009416:	689b      	ldr	r3, [r3, #8]
 8009418:	687a      	ldr	r2, [r7, #4]
 800941a:	6812      	ldr	r2, [r2, #0]
 800941c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8009420:	f023 0307 	bic.w	r3, r3, #7
 8009424:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	681a      	ldr	r2, [r3, #0]
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	3304      	adds	r3, #4
 800942e:	4619      	mov	r1, r3
 8009430:	4610      	mov	r0, r2
 8009432:	f000 fb1b 	bl	8009a6c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	681b      	ldr	r3, [r3, #0]
 800943a:	689b      	ldr	r3, [r3, #8]
 800943c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	681b      	ldr	r3, [r3, #0]
 8009442:	699b      	ldr	r3, [r3, #24]
 8009444:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	681b      	ldr	r3, [r3, #0]
 800944a:	6a1b      	ldr	r3, [r3, #32]
 800944c:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800944e:	683b      	ldr	r3, [r7, #0]
 8009450:	681b      	ldr	r3, [r3, #0]
 8009452:	697a      	ldr	r2, [r7, #20]
 8009454:	4313      	orrs	r3, r2
 8009456:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8009458:	693b      	ldr	r3, [r7, #16]
 800945a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800945e:	f023 0303 	bic.w	r3, r3, #3
 8009462:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8009464:	683b      	ldr	r3, [r7, #0]
 8009466:	689a      	ldr	r2, [r3, #8]
 8009468:	683b      	ldr	r3, [r7, #0]
 800946a:	699b      	ldr	r3, [r3, #24]
 800946c:	021b      	lsls	r3, r3, #8
 800946e:	4313      	orrs	r3, r2
 8009470:	693a      	ldr	r2, [r7, #16]
 8009472:	4313      	orrs	r3, r2
 8009474:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8009476:	693b      	ldr	r3, [r7, #16]
 8009478:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 800947c:	f023 030c 	bic.w	r3, r3, #12
 8009480:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8009482:	693b      	ldr	r3, [r7, #16]
 8009484:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8009488:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800948c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800948e:	683b      	ldr	r3, [r7, #0]
 8009490:	68da      	ldr	r2, [r3, #12]
 8009492:	683b      	ldr	r3, [r7, #0]
 8009494:	69db      	ldr	r3, [r3, #28]
 8009496:	021b      	lsls	r3, r3, #8
 8009498:	4313      	orrs	r3, r2
 800949a:	693a      	ldr	r2, [r7, #16]
 800949c:	4313      	orrs	r3, r2
 800949e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80094a0:	683b      	ldr	r3, [r7, #0]
 80094a2:	691b      	ldr	r3, [r3, #16]
 80094a4:	011a      	lsls	r2, r3, #4
 80094a6:	683b      	ldr	r3, [r7, #0]
 80094a8:	6a1b      	ldr	r3, [r3, #32]
 80094aa:	031b      	lsls	r3, r3, #12
 80094ac:	4313      	orrs	r3, r2
 80094ae:	693a      	ldr	r2, [r7, #16]
 80094b0:	4313      	orrs	r3, r2
 80094b2:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80094b4:	68fb      	ldr	r3, [r7, #12]
 80094b6:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 80094ba:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80094bc:	68fb      	ldr	r3, [r7, #12]
 80094be:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 80094c2:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80094c4:	683b      	ldr	r3, [r7, #0]
 80094c6:	685a      	ldr	r2, [r3, #4]
 80094c8:	683b      	ldr	r3, [r7, #0]
 80094ca:	695b      	ldr	r3, [r3, #20]
 80094cc:	011b      	lsls	r3, r3, #4
 80094ce:	4313      	orrs	r3, r2
 80094d0:	68fa      	ldr	r2, [r7, #12]
 80094d2:	4313      	orrs	r3, r2
 80094d4:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	681b      	ldr	r3, [r3, #0]
 80094da:	697a      	ldr	r2, [r7, #20]
 80094dc:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	681b      	ldr	r3, [r3, #0]
 80094e2:	693a      	ldr	r2, [r7, #16]
 80094e4:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	681b      	ldr	r3, [r3, #0]
 80094ea:	68fa      	ldr	r2, [r7, #12]
 80094ec:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	2201      	movs	r2, #1
 80094f2:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	2201      	movs	r2, #1
 80094fa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	2201      	movs	r2, #1
 8009502:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	2201      	movs	r2, #1
 800950a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	2201      	movs	r2, #1
 8009512:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	2201      	movs	r2, #1
 800951a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800951e:	2300      	movs	r3, #0
}
 8009520:	4618      	mov	r0, r3
 8009522:	3718      	adds	r7, #24
 8009524:	46bd      	mov	sp, r7
 8009526:	bd80      	pop	{r7, pc}

08009528 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009528:	b580      	push	{r7, lr}
 800952a:	b084      	sub	sp, #16
 800952c:	af00      	add	r7, sp, #0
 800952e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	681b      	ldr	r3, [r3, #0]
 8009534:	68db      	ldr	r3, [r3, #12]
 8009536:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	681b      	ldr	r3, [r3, #0]
 800953c:	691b      	ldr	r3, [r3, #16]
 800953e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8009540:	68bb      	ldr	r3, [r7, #8]
 8009542:	f003 0302 	and.w	r3, r3, #2
 8009546:	2b00      	cmp	r3, #0
 8009548:	d020      	beq.n	800958c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800954a:	68fb      	ldr	r3, [r7, #12]
 800954c:	f003 0302 	and.w	r3, r3, #2
 8009550:	2b00      	cmp	r3, #0
 8009552:	d01b      	beq.n	800958c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	681b      	ldr	r3, [r3, #0]
 8009558:	f06f 0202 	mvn.w	r2, #2
 800955c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	2201      	movs	r2, #1
 8009562:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	681b      	ldr	r3, [r3, #0]
 8009568:	699b      	ldr	r3, [r3, #24]
 800956a:	f003 0303 	and.w	r3, r3, #3
 800956e:	2b00      	cmp	r3, #0
 8009570:	d003      	beq.n	800957a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8009572:	6878      	ldr	r0, [r7, #4]
 8009574:	f000 fa5b 	bl	8009a2e <HAL_TIM_IC_CaptureCallback>
 8009578:	e005      	b.n	8009586 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800957a:	6878      	ldr	r0, [r7, #4]
 800957c:	f000 fa4d 	bl	8009a1a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009580:	6878      	ldr	r0, [r7, #4]
 8009582:	f000 fa5e 	bl	8009a42 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	2200      	movs	r2, #0
 800958a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800958c:	68bb      	ldr	r3, [r7, #8]
 800958e:	f003 0304 	and.w	r3, r3, #4
 8009592:	2b00      	cmp	r3, #0
 8009594:	d020      	beq.n	80095d8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8009596:	68fb      	ldr	r3, [r7, #12]
 8009598:	f003 0304 	and.w	r3, r3, #4
 800959c:	2b00      	cmp	r3, #0
 800959e:	d01b      	beq.n	80095d8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	681b      	ldr	r3, [r3, #0]
 80095a4:	f06f 0204 	mvn.w	r2, #4
 80095a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	2202      	movs	r2, #2
 80095ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	681b      	ldr	r3, [r3, #0]
 80095b4:	699b      	ldr	r3, [r3, #24]
 80095b6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80095ba:	2b00      	cmp	r3, #0
 80095bc:	d003      	beq.n	80095c6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80095be:	6878      	ldr	r0, [r7, #4]
 80095c0:	f000 fa35 	bl	8009a2e <HAL_TIM_IC_CaptureCallback>
 80095c4:	e005      	b.n	80095d2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80095c6:	6878      	ldr	r0, [r7, #4]
 80095c8:	f000 fa27 	bl	8009a1a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80095cc:	6878      	ldr	r0, [r7, #4]
 80095ce:	f000 fa38 	bl	8009a42 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	2200      	movs	r2, #0
 80095d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80095d8:	68bb      	ldr	r3, [r7, #8]
 80095da:	f003 0308 	and.w	r3, r3, #8
 80095de:	2b00      	cmp	r3, #0
 80095e0:	d020      	beq.n	8009624 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80095e2:	68fb      	ldr	r3, [r7, #12]
 80095e4:	f003 0308 	and.w	r3, r3, #8
 80095e8:	2b00      	cmp	r3, #0
 80095ea:	d01b      	beq.n	8009624 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	681b      	ldr	r3, [r3, #0]
 80095f0:	f06f 0208 	mvn.w	r2, #8
 80095f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	2204      	movs	r2, #4
 80095fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	681b      	ldr	r3, [r3, #0]
 8009600:	69db      	ldr	r3, [r3, #28]
 8009602:	f003 0303 	and.w	r3, r3, #3
 8009606:	2b00      	cmp	r3, #0
 8009608:	d003      	beq.n	8009612 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800960a:	6878      	ldr	r0, [r7, #4]
 800960c:	f000 fa0f 	bl	8009a2e <HAL_TIM_IC_CaptureCallback>
 8009610:	e005      	b.n	800961e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009612:	6878      	ldr	r0, [r7, #4]
 8009614:	f000 fa01 	bl	8009a1a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009618:	6878      	ldr	r0, [r7, #4]
 800961a:	f000 fa12 	bl	8009a42 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	2200      	movs	r2, #0
 8009622:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8009624:	68bb      	ldr	r3, [r7, #8]
 8009626:	f003 0310 	and.w	r3, r3, #16
 800962a:	2b00      	cmp	r3, #0
 800962c:	d020      	beq.n	8009670 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800962e:	68fb      	ldr	r3, [r7, #12]
 8009630:	f003 0310 	and.w	r3, r3, #16
 8009634:	2b00      	cmp	r3, #0
 8009636:	d01b      	beq.n	8009670 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	681b      	ldr	r3, [r3, #0]
 800963c:	f06f 0210 	mvn.w	r2, #16
 8009640:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	2208      	movs	r2, #8
 8009646:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	681b      	ldr	r3, [r3, #0]
 800964c:	69db      	ldr	r3, [r3, #28]
 800964e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009652:	2b00      	cmp	r3, #0
 8009654:	d003      	beq.n	800965e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009656:	6878      	ldr	r0, [r7, #4]
 8009658:	f000 f9e9 	bl	8009a2e <HAL_TIM_IC_CaptureCallback>
 800965c:	e005      	b.n	800966a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800965e:	6878      	ldr	r0, [r7, #4]
 8009660:	f000 f9db 	bl	8009a1a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009664:	6878      	ldr	r0, [r7, #4]
 8009666:	f000 f9ec 	bl	8009a42 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	2200      	movs	r2, #0
 800966e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8009670:	68bb      	ldr	r3, [r7, #8]
 8009672:	f003 0301 	and.w	r3, r3, #1
 8009676:	2b00      	cmp	r3, #0
 8009678:	d00c      	beq.n	8009694 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800967a:	68fb      	ldr	r3, [r7, #12]
 800967c:	f003 0301 	and.w	r3, r3, #1
 8009680:	2b00      	cmp	r3, #0
 8009682:	d007      	beq.n	8009694 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	681b      	ldr	r3, [r3, #0]
 8009688:	f06f 0201 	mvn.w	r2, #1
 800968c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800968e:	6878      	ldr	r0, [r7, #4]
 8009690:	f7f8 fe34 	bl	80022fc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8009694:	68bb      	ldr	r3, [r7, #8]
 8009696:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800969a:	2b00      	cmp	r3, #0
 800969c:	d00c      	beq.n	80096b8 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800969e:	68fb      	ldr	r3, [r7, #12]
 80096a0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80096a4:	2b00      	cmp	r3, #0
 80096a6:	d007      	beq.n	80096b8 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	681b      	ldr	r3, [r3, #0]
 80096ac:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80096b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80096b2:	6878      	ldr	r0, [r7, #4]
 80096b4:	f000 fd76 	bl	800a1a4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80096b8:	68bb      	ldr	r3, [r7, #8]
 80096ba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80096be:	2b00      	cmp	r3, #0
 80096c0:	d00c      	beq.n	80096dc <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80096c2:	68fb      	ldr	r3, [r7, #12]
 80096c4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80096c8:	2b00      	cmp	r3, #0
 80096ca:	d007      	beq.n	80096dc <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	681b      	ldr	r3, [r3, #0]
 80096d0:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80096d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80096d6:	6878      	ldr	r0, [r7, #4]
 80096d8:	f000 f9bd 	bl	8009a56 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80096dc:	68bb      	ldr	r3, [r7, #8]
 80096de:	f003 0320 	and.w	r3, r3, #32
 80096e2:	2b00      	cmp	r3, #0
 80096e4:	d00c      	beq.n	8009700 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80096e6:	68fb      	ldr	r3, [r7, #12]
 80096e8:	f003 0320 	and.w	r3, r3, #32
 80096ec:	2b00      	cmp	r3, #0
 80096ee:	d007      	beq.n	8009700 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	681b      	ldr	r3, [r3, #0]
 80096f4:	f06f 0220 	mvn.w	r2, #32
 80096f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80096fa:	6878      	ldr	r0, [r7, #4]
 80096fc:	f000 fd48 	bl	800a190 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009700:	bf00      	nop
 8009702:	3710      	adds	r7, #16
 8009704:	46bd      	mov	sp, r7
 8009706:	bd80      	pop	{r7, pc}

08009708 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8009708:	b580      	push	{r7, lr}
 800970a:	b086      	sub	sp, #24
 800970c:	af00      	add	r7, sp, #0
 800970e:	60f8      	str	r0, [r7, #12]
 8009710:	60b9      	str	r1, [r7, #8]
 8009712:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009714:	2300      	movs	r3, #0
 8009716:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8009718:	68fb      	ldr	r3, [r7, #12]
 800971a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800971e:	2b01      	cmp	r3, #1
 8009720:	d101      	bne.n	8009726 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8009722:	2302      	movs	r3, #2
 8009724:	e0ae      	b.n	8009884 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8009726:	68fb      	ldr	r3, [r7, #12]
 8009728:	2201      	movs	r2, #1
 800972a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	2b0c      	cmp	r3, #12
 8009732:	f200 809f 	bhi.w	8009874 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8009736:	a201      	add	r2, pc, #4	@ (adr r2, 800973c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8009738:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800973c:	08009771 	.word	0x08009771
 8009740:	08009875 	.word	0x08009875
 8009744:	08009875 	.word	0x08009875
 8009748:	08009875 	.word	0x08009875
 800974c:	080097b1 	.word	0x080097b1
 8009750:	08009875 	.word	0x08009875
 8009754:	08009875 	.word	0x08009875
 8009758:	08009875 	.word	0x08009875
 800975c:	080097f3 	.word	0x080097f3
 8009760:	08009875 	.word	0x08009875
 8009764:	08009875 	.word	0x08009875
 8009768:	08009875 	.word	0x08009875
 800976c:	08009833 	.word	0x08009833
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8009770:	68fb      	ldr	r3, [r7, #12]
 8009772:	681b      	ldr	r3, [r3, #0]
 8009774:	68b9      	ldr	r1, [r7, #8]
 8009776:	4618      	mov	r0, r3
 8009778:	f000 f9fe 	bl	8009b78 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800977c:	68fb      	ldr	r3, [r7, #12]
 800977e:	681b      	ldr	r3, [r3, #0]
 8009780:	699a      	ldr	r2, [r3, #24]
 8009782:	68fb      	ldr	r3, [r7, #12]
 8009784:	681b      	ldr	r3, [r3, #0]
 8009786:	f042 0208 	orr.w	r2, r2, #8
 800978a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800978c:	68fb      	ldr	r3, [r7, #12]
 800978e:	681b      	ldr	r3, [r3, #0]
 8009790:	699a      	ldr	r2, [r3, #24]
 8009792:	68fb      	ldr	r3, [r7, #12]
 8009794:	681b      	ldr	r3, [r3, #0]
 8009796:	f022 0204 	bic.w	r2, r2, #4
 800979a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800979c:	68fb      	ldr	r3, [r7, #12]
 800979e:	681b      	ldr	r3, [r3, #0]
 80097a0:	6999      	ldr	r1, [r3, #24]
 80097a2:	68bb      	ldr	r3, [r7, #8]
 80097a4:	691a      	ldr	r2, [r3, #16]
 80097a6:	68fb      	ldr	r3, [r7, #12]
 80097a8:	681b      	ldr	r3, [r3, #0]
 80097aa:	430a      	orrs	r2, r1
 80097ac:	619a      	str	r2, [r3, #24]
      break;
 80097ae:	e064      	b.n	800987a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80097b0:	68fb      	ldr	r3, [r7, #12]
 80097b2:	681b      	ldr	r3, [r3, #0]
 80097b4:	68b9      	ldr	r1, [r7, #8]
 80097b6:	4618      	mov	r0, r3
 80097b8:	f000 fa44 	bl	8009c44 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80097bc:	68fb      	ldr	r3, [r7, #12]
 80097be:	681b      	ldr	r3, [r3, #0]
 80097c0:	699a      	ldr	r2, [r3, #24]
 80097c2:	68fb      	ldr	r3, [r7, #12]
 80097c4:	681b      	ldr	r3, [r3, #0]
 80097c6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80097ca:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80097cc:	68fb      	ldr	r3, [r7, #12]
 80097ce:	681b      	ldr	r3, [r3, #0]
 80097d0:	699a      	ldr	r2, [r3, #24]
 80097d2:	68fb      	ldr	r3, [r7, #12]
 80097d4:	681b      	ldr	r3, [r3, #0]
 80097d6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80097da:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80097dc:	68fb      	ldr	r3, [r7, #12]
 80097de:	681b      	ldr	r3, [r3, #0]
 80097e0:	6999      	ldr	r1, [r3, #24]
 80097e2:	68bb      	ldr	r3, [r7, #8]
 80097e4:	691b      	ldr	r3, [r3, #16]
 80097e6:	021a      	lsls	r2, r3, #8
 80097e8:	68fb      	ldr	r3, [r7, #12]
 80097ea:	681b      	ldr	r3, [r3, #0]
 80097ec:	430a      	orrs	r2, r1
 80097ee:	619a      	str	r2, [r3, #24]
      break;
 80097f0:	e043      	b.n	800987a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80097f2:	68fb      	ldr	r3, [r7, #12]
 80097f4:	681b      	ldr	r3, [r3, #0]
 80097f6:	68b9      	ldr	r1, [r7, #8]
 80097f8:	4618      	mov	r0, r3
 80097fa:	f000 fa8f 	bl	8009d1c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80097fe:	68fb      	ldr	r3, [r7, #12]
 8009800:	681b      	ldr	r3, [r3, #0]
 8009802:	69da      	ldr	r2, [r3, #28]
 8009804:	68fb      	ldr	r3, [r7, #12]
 8009806:	681b      	ldr	r3, [r3, #0]
 8009808:	f042 0208 	orr.w	r2, r2, #8
 800980c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800980e:	68fb      	ldr	r3, [r7, #12]
 8009810:	681b      	ldr	r3, [r3, #0]
 8009812:	69da      	ldr	r2, [r3, #28]
 8009814:	68fb      	ldr	r3, [r7, #12]
 8009816:	681b      	ldr	r3, [r3, #0]
 8009818:	f022 0204 	bic.w	r2, r2, #4
 800981c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800981e:	68fb      	ldr	r3, [r7, #12]
 8009820:	681b      	ldr	r3, [r3, #0]
 8009822:	69d9      	ldr	r1, [r3, #28]
 8009824:	68bb      	ldr	r3, [r7, #8]
 8009826:	691a      	ldr	r2, [r3, #16]
 8009828:	68fb      	ldr	r3, [r7, #12]
 800982a:	681b      	ldr	r3, [r3, #0]
 800982c:	430a      	orrs	r2, r1
 800982e:	61da      	str	r2, [r3, #28]
      break;
 8009830:	e023      	b.n	800987a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8009832:	68fb      	ldr	r3, [r7, #12]
 8009834:	681b      	ldr	r3, [r3, #0]
 8009836:	68b9      	ldr	r1, [r7, #8]
 8009838:	4618      	mov	r0, r3
 800983a:	f000 fad9 	bl	8009df0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800983e:	68fb      	ldr	r3, [r7, #12]
 8009840:	681b      	ldr	r3, [r3, #0]
 8009842:	69da      	ldr	r2, [r3, #28]
 8009844:	68fb      	ldr	r3, [r7, #12]
 8009846:	681b      	ldr	r3, [r3, #0]
 8009848:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800984c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800984e:	68fb      	ldr	r3, [r7, #12]
 8009850:	681b      	ldr	r3, [r3, #0]
 8009852:	69da      	ldr	r2, [r3, #28]
 8009854:	68fb      	ldr	r3, [r7, #12]
 8009856:	681b      	ldr	r3, [r3, #0]
 8009858:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800985c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800985e:	68fb      	ldr	r3, [r7, #12]
 8009860:	681b      	ldr	r3, [r3, #0]
 8009862:	69d9      	ldr	r1, [r3, #28]
 8009864:	68bb      	ldr	r3, [r7, #8]
 8009866:	691b      	ldr	r3, [r3, #16]
 8009868:	021a      	lsls	r2, r3, #8
 800986a:	68fb      	ldr	r3, [r7, #12]
 800986c:	681b      	ldr	r3, [r3, #0]
 800986e:	430a      	orrs	r2, r1
 8009870:	61da      	str	r2, [r3, #28]
      break;
 8009872:	e002      	b.n	800987a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8009874:	2301      	movs	r3, #1
 8009876:	75fb      	strb	r3, [r7, #23]
      break;
 8009878:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800987a:	68fb      	ldr	r3, [r7, #12]
 800987c:	2200      	movs	r2, #0
 800987e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8009882:	7dfb      	ldrb	r3, [r7, #23]
}
 8009884:	4618      	mov	r0, r3
 8009886:	3718      	adds	r7, #24
 8009888:	46bd      	mov	sp, r7
 800988a:	bd80      	pop	{r7, pc}

0800988c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800988c:	b580      	push	{r7, lr}
 800988e:	b084      	sub	sp, #16
 8009890:	af00      	add	r7, sp, #0
 8009892:	6078      	str	r0, [r7, #4]
 8009894:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009896:	2300      	movs	r3, #0
 8009898:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80098a0:	2b01      	cmp	r3, #1
 80098a2:	d101      	bne.n	80098a8 <HAL_TIM_ConfigClockSource+0x1c>
 80098a4:	2302      	movs	r3, #2
 80098a6:	e0b4      	b.n	8009a12 <HAL_TIM_ConfigClockSource+0x186>
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	2201      	movs	r2, #1
 80098ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	2202      	movs	r2, #2
 80098b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	681b      	ldr	r3, [r3, #0]
 80098bc:	689b      	ldr	r3, [r3, #8]
 80098be:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80098c0:	68bb      	ldr	r3, [r7, #8]
 80098c2:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80098c6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80098c8:	68bb      	ldr	r3, [r7, #8]
 80098ca:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80098ce:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	681b      	ldr	r3, [r3, #0]
 80098d4:	68ba      	ldr	r2, [r7, #8]
 80098d6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80098d8:	683b      	ldr	r3, [r7, #0]
 80098da:	681b      	ldr	r3, [r3, #0]
 80098dc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80098e0:	d03e      	beq.n	8009960 <HAL_TIM_ConfigClockSource+0xd4>
 80098e2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80098e6:	f200 8087 	bhi.w	80099f8 <HAL_TIM_ConfigClockSource+0x16c>
 80098ea:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80098ee:	f000 8086 	beq.w	80099fe <HAL_TIM_ConfigClockSource+0x172>
 80098f2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80098f6:	d87f      	bhi.n	80099f8 <HAL_TIM_ConfigClockSource+0x16c>
 80098f8:	2b70      	cmp	r3, #112	@ 0x70
 80098fa:	d01a      	beq.n	8009932 <HAL_TIM_ConfigClockSource+0xa6>
 80098fc:	2b70      	cmp	r3, #112	@ 0x70
 80098fe:	d87b      	bhi.n	80099f8 <HAL_TIM_ConfigClockSource+0x16c>
 8009900:	2b60      	cmp	r3, #96	@ 0x60
 8009902:	d050      	beq.n	80099a6 <HAL_TIM_ConfigClockSource+0x11a>
 8009904:	2b60      	cmp	r3, #96	@ 0x60
 8009906:	d877      	bhi.n	80099f8 <HAL_TIM_ConfigClockSource+0x16c>
 8009908:	2b50      	cmp	r3, #80	@ 0x50
 800990a:	d03c      	beq.n	8009986 <HAL_TIM_ConfigClockSource+0xfa>
 800990c:	2b50      	cmp	r3, #80	@ 0x50
 800990e:	d873      	bhi.n	80099f8 <HAL_TIM_ConfigClockSource+0x16c>
 8009910:	2b40      	cmp	r3, #64	@ 0x40
 8009912:	d058      	beq.n	80099c6 <HAL_TIM_ConfigClockSource+0x13a>
 8009914:	2b40      	cmp	r3, #64	@ 0x40
 8009916:	d86f      	bhi.n	80099f8 <HAL_TIM_ConfigClockSource+0x16c>
 8009918:	2b30      	cmp	r3, #48	@ 0x30
 800991a:	d064      	beq.n	80099e6 <HAL_TIM_ConfigClockSource+0x15a>
 800991c:	2b30      	cmp	r3, #48	@ 0x30
 800991e:	d86b      	bhi.n	80099f8 <HAL_TIM_ConfigClockSource+0x16c>
 8009920:	2b20      	cmp	r3, #32
 8009922:	d060      	beq.n	80099e6 <HAL_TIM_ConfigClockSource+0x15a>
 8009924:	2b20      	cmp	r3, #32
 8009926:	d867      	bhi.n	80099f8 <HAL_TIM_ConfigClockSource+0x16c>
 8009928:	2b00      	cmp	r3, #0
 800992a:	d05c      	beq.n	80099e6 <HAL_TIM_ConfigClockSource+0x15a>
 800992c:	2b10      	cmp	r3, #16
 800992e:	d05a      	beq.n	80099e6 <HAL_TIM_ConfigClockSource+0x15a>
 8009930:	e062      	b.n	80099f8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8009936:	683b      	ldr	r3, [r7, #0]
 8009938:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800993a:	683b      	ldr	r3, [r7, #0]
 800993c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800993e:	683b      	ldr	r3, [r7, #0]
 8009940:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8009942:	f000 fb1f 	bl	8009f84 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	681b      	ldr	r3, [r3, #0]
 800994a:	689b      	ldr	r3, [r3, #8]
 800994c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800994e:	68bb      	ldr	r3, [r7, #8]
 8009950:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8009954:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	681b      	ldr	r3, [r3, #0]
 800995a:	68ba      	ldr	r2, [r7, #8]
 800995c:	609a      	str	r2, [r3, #8]
      break;
 800995e:	e04f      	b.n	8009a00 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8009964:	683b      	ldr	r3, [r7, #0]
 8009966:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8009968:	683b      	ldr	r3, [r7, #0]
 800996a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800996c:	683b      	ldr	r3, [r7, #0]
 800996e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8009970:	f000 fb08 	bl	8009f84 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	681b      	ldr	r3, [r3, #0]
 8009978:	689a      	ldr	r2, [r3, #8]
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	681b      	ldr	r3, [r3, #0]
 800997e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8009982:	609a      	str	r2, [r3, #8]
      break;
 8009984:	e03c      	b.n	8009a00 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800998a:	683b      	ldr	r3, [r7, #0]
 800998c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800998e:	683b      	ldr	r3, [r7, #0]
 8009990:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009992:	461a      	mov	r2, r3
 8009994:	f000 fa7c 	bl	8009e90 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	681b      	ldr	r3, [r3, #0]
 800999c:	2150      	movs	r1, #80	@ 0x50
 800999e:	4618      	mov	r0, r3
 80099a0:	f000 fad5 	bl	8009f4e <TIM_ITRx_SetConfig>
      break;
 80099a4:	e02c      	b.n	8009a00 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80099aa:	683b      	ldr	r3, [r7, #0]
 80099ac:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80099ae:	683b      	ldr	r3, [r7, #0]
 80099b0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80099b2:	461a      	mov	r2, r3
 80099b4:	f000 fa9b 	bl	8009eee <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	681b      	ldr	r3, [r3, #0]
 80099bc:	2160      	movs	r1, #96	@ 0x60
 80099be:	4618      	mov	r0, r3
 80099c0:	f000 fac5 	bl	8009f4e <TIM_ITRx_SetConfig>
      break;
 80099c4:	e01c      	b.n	8009a00 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80099ca:	683b      	ldr	r3, [r7, #0]
 80099cc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80099ce:	683b      	ldr	r3, [r7, #0]
 80099d0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80099d2:	461a      	mov	r2, r3
 80099d4:	f000 fa5c 	bl	8009e90 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	681b      	ldr	r3, [r3, #0]
 80099dc:	2140      	movs	r1, #64	@ 0x40
 80099de:	4618      	mov	r0, r3
 80099e0:	f000 fab5 	bl	8009f4e <TIM_ITRx_SetConfig>
      break;
 80099e4:	e00c      	b.n	8009a00 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	681a      	ldr	r2, [r3, #0]
 80099ea:	683b      	ldr	r3, [r7, #0]
 80099ec:	681b      	ldr	r3, [r3, #0]
 80099ee:	4619      	mov	r1, r3
 80099f0:	4610      	mov	r0, r2
 80099f2:	f000 faac 	bl	8009f4e <TIM_ITRx_SetConfig>
      break;
 80099f6:	e003      	b.n	8009a00 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80099f8:	2301      	movs	r3, #1
 80099fa:	73fb      	strb	r3, [r7, #15]
      break;
 80099fc:	e000      	b.n	8009a00 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80099fe:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	2201      	movs	r2, #1
 8009a04:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	2200      	movs	r2, #0
 8009a0c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8009a10:	7bfb      	ldrb	r3, [r7, #15]
}
 8009a12:	4618      	mov	r0, r3
 8009a14:	3710      	adds	r7, #16
 8009a16:	46bd      	mov	sp, r7
 8009a18:	bd80      	pop	{r7, pc}

08009a1a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009a1a:	b480      	push	{r7}
 8009a1c:	b083      	sub	sp, #12
 8009a1e:	af00      	add	r7, sp, #0
 8009a20:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009a22:	bf00      	nop
 8009a24:	370c      	adds	r7, #12
 8009a26:	46bd      	mov	sp, r7
 8009a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a2c:	4770      	bx	lr

08009a2e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009a2e:	b480      	push	{r7}
 8009a30:	b083      	sub	sp, #12
 8009a32:	af00      	add	r7, sp, #0
 8009a34:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009a36:	bf00      	nop
 8009a38:	370c      	adds	r7, #12
 8009a3a:	46bd      	mov	sp, r7
 8009a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a40:	4770      	bx	lr

08009a42 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009a42:	b480      	push	{r7}
 8009a44:	b083      	sub	sp, #12
 8009a46:	af00      	add	r7, sp, #0
 8009a48:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009a4a:	bf00      	nop
 8009a4c:	370c      	adds	r7, #12
 8009a4e:	46bd      	mov	sp, r7
 8009a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a54:	4770      	bx	lr

08009a56 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009a56:	b480      	push	{r7}
 8009a58:	b083      	sub	sp, #12
 8009a5a:	af00      	add	r7, sp, #0
 8009a5c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009a5e:	bf00      	nop
 8009a60:	370c      	adds	r7, #12
 8009a62:	46bd      	mov	sp, r7
 8009a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a68:	4770      	bx	lr
	...

08009a6c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8009a6c:	b480      	push	{r7}
 8009a6e:	b085      	sub	sp, #20
 8009a70:	af00      	add	r7, sp, #0
 8009a72:	6078      	str	r0, [r7, #4]
 8009a74:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	681b      	ldr	r3, [r3, #0]
 8009a7a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	4a37      	ldr	r2, [pc, #220]	@ (8009b5c <TIM_Base_SetConfig+0xf0>)
 8009a80:	4293      	cmp	r3, r2
 8009a82:	d00f      	beq.n	8009aa4 <TIM_Base_SetConfig+0x38>
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009a8a:	d00b      	beq.n	8009aa4 <TIM_Base_SetConfig+0x38>
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	4a34      	ldr	r2, [pc, #208]	@ (8009b60 <TIM_Base_SetConfig+0xf4>)
 8009a90:	4293      	cmp	r3, r2
 8009a92:	d007      	beq.n	8009aa4 <TIM_Base_SetConfig+0x38>
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	4a33      	ldr	r2, [pc, #204]	@ (8009b64 <TIM_Base_SetConfig+0xf8>)
 8009a98:	4293      	cmp	r3, r2
 8009a9a:	d003      	beq.n	8009aa4 <TIM_Base_SetConfig+0x38>
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	4a32      	ldr	r2, [pc, #200]	@ (8009b68 <TIM_Base_SetConfig+0xfc>)
 8009aa0:	4293      	cmp	r3, r2
 8009aa2:	d108      	bne.n	8009ab6 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009aa4:	68fb      	ldr	r3, [r7, #12]
 8009aa6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009aaa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009aac:	683b      	ldr	r3, [r7, #0]
 8009aae:	685b      	ldr	r3, [r3, #4]
 8009ab0:	68fa      	ldr	r2, [r7, #12]
 8009ab2:	4313      	orrs	r3, r2
 8009ab4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	4a28      	ldr	r2, [pc, #160]	@ (8009b5c <TIM_Base_SetConfig+0xf0>)
 8009aba:	4293      	cmp	r3, r2
 8009abc:	d01b      	beq.n	8009af6 <TIM_Base_SetConfig+0x8a>
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009ac4:	d017      	beq.n	8009af6 <TIM_Base_SetConfig+0x8a>
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	4a25      	ldr	r2, [pc, #148]	@ (8009b60 <TIM_Base_SetConfig+0xf4>)
 8009aca:	4293      	cmp	r3, r2
 8009acc:	d013      	beq.n	8009af6 <TIM_Base_SetConfig+0x8a>
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	4a24      	ldr	r2, [pc, #144]	@ (8009b64 <TIM_Base_SetConfig+0xf8>)
 8009ad2:	4293      	cmp	r3, r2
 8009ad4:	d00f      	beq.n	8009af6 <TIM_Base_SetConfig+0x8a>
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	4a23      	ldr	r2, [pc, #140]	@ (8009b68 <TIM_Base_SetConfig+0xfc>)
 8009ada:	4293      	cmp	r3, r2
 8009adc:	d00b      	beq.n	8009af6 <TIM_Base_SetConfig+0x8a>
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	4a22      	ldr	r2, [pc, #136]	@ (8009b6c <TIM_Base_SetConfig+0x100>)
 8009ae2:	4293      	cmp	r3, r2
 8009ae4:	d007      	beq.n	8009af6 <TIM_Base_SetConfig+0x8a>
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	4a21      	ldr	r2, [pc, #132]	@ (8009b70 <TIM_Base_SetConfig+0x104>)
 8009aea:	4293      	cmp	r3, r2
 8009aec:	d003      	beq.n	8009af6 <TIM_Base_SetConfig+0x8a>
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	4a20      	ldr	r2, [pc, #128]	@ (8009b74 <TIM_Base_SetConfig+0x108>)
 8009af2:	4293      	cmp	r3, r2
 8009af4:	d108      	bne.n	8009b08 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009af6:	68fb      	ldr	r3, [r7, #12]
 8009af8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009afc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009afe:	683b      	ldr	r3, [r7, #0]
 8009b00:	68db      	ldr	r3, [r3, #12]
 8009b02:	68fa      	ldr	r2, [r7, #12]
 8009b04:	4313      	orrs	r3, r2
 8009b06:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009b08:	68fb      	ldr	r3, [r7, #12]
 8009b0a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8009b0e:	683b      	ldr	r3, [r7, #0]
 8009b10:	695b      	ldr	r3, [r3, #20]
 8009b12:	4313      	orrs	r3, r2
 8009b14:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009b16:	683b      	ldr	r3, [r7, #0]
 8009b18:	689a      	ldr	r2, [r3, #8]
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009b1e:	683b      	ldr	r3, [r7, #0]
 8009b20:	681a      	ldr	r2, [r3, #0]
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	4a0c      	ldr	r2, [pc, #48]	@ (8009b5c <TIM_Base_SetConfig+0xf0>)
 8009b2a:	4293      	cmp	r3, r2
 8009b2c:	d103      	bne.n	8009b36 <TIM_Base_SetConfig+0xca>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009b2e:	683b      	ldr	r3, [r7, #0]
 8009b30:	691a      	ldr	r2, [r3, #16]
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	681b      	ldr	r3, [r3, #0]
 8009b3a:	f043 0204 	orr.w	r2, r3, #4
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	2201      	movs	r2, #1
 8009b46:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	68fa      	ldr	r2, [r7, #12]
 8009b4c:	601a      	str	r2, [r3, #0]
}
 8009b4e:	bf00      	nop
 8009b50:	3714      	adds	r7, #20
 8009b52:	46bd      	mov	sp, r7
 8009b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b58:	4770      	bx	lr
 8009b5a:	bf00      	nop
 8009b5c:	40010000 	.word	0x40010000
 8009b60:	40000400 	.word	0x40000400
 8009b64:	40000800 	.word	0x40000800
 8009b68:	40000c00 	.word	0x40000c00
 8009b6c:	40014000 	.word	0x40014000
 8009b70:	40014400 	.word	0x40014400
 8009b74:	40014800 	.word	0x40014800

08009b78 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009b78:	b480      	push	{r7}
 8009b7a:	b087      	sub	sp, #28
 8009b7c:	af00      	add	r7, sp, #0
 8009b7e:	6078      	str	r0, [r7, #4]
 8009b80:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	6a1b      	ldr	r3, [r3, #32]
 8009b86:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	6a1b      	ldr	r3, [r3, #32]
 8009b8c:	f023 0201 	bic.w	r2, r3, #1
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	685b      	ldr	r3, [r3, #4]
 8009b98:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	699b      	ldr	r3, [r3, #24]
 8009b9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8009ba0:	68fb      	ldr	r3, [r7, #12]
 8009ba2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009ba6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8009ba8:	68fb      	ldr	r3, [r7, #12]
 8009baa:	f023 0303 	bic.w	r3, r3, #3
 8009bae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009bb0:	683b      	ldr	r3, [r7, #0]
 8009bb2:	681b      	ldr	r3, [r3, #0]
 8009bb4:	68fa      	ldr	r2, [r7, #12]
 8009bb6:	4313      	orrs	r3, r2
 8009bb8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8009bba:	697b      	ldr	r3, [r7, #20]
 8009bbc:	f023 0302 	bic.w	r3, r3, #2
 8009bc0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8009bc2:	683b      	ldr	r3, [r7, #0]
 8009bc4:	689b      	ldr	r3, [r3, #8]
 8009bc6:	697a      	ldr	r2, [r7, #20]
 8009bc8:	4313      	orrs	r3, r2
 8009bca:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	4a1c      	ldr	r2, [pc, #112]	@ (8009c40 <TIM_OC1_SetConfig+0xc8>)
 8009bd0:	4293      	cmp	r3, r2
 8009bd2:	d10c      	bne.n	8009bee <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8009bd4:	697b      	ldr	r3, [r7, #20]
 8009bd6:	f023 0308 	bic.w	r3, r3, #8
 8009bda:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8009bdc:	683b      	ldr	r3, [r7, #0]
 8009bde:	68db      	ldr	r3, [r3, #12]
 8009be0:	697a      	ldr	r2, [r7, #20]
 8009be2:	4313      	orrs	r3, r2
 8009be4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8009be6:	697b      	ldr	r3, [r7, #20]
 8009be8:	f023 0304 	bic.w	r3, r3, #4
 8009bec:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	4a13      	ldr	r2, [pc, #76]	@ (8009c40 <TIM_OC1_SetConfig+0xc8>)
 8009bf2:	4293      	cmp	r3, r2
 8009bf4:	d111      	bne.n	8009c1a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8009bf6:	693b      	ldr	r3, [r7, #16]
 8009bf8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009bfc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8009bfe:	693b      	ldr	r3, [r7, #16]
 8009c00:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8009c04:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8009c06:	683b      	ldr	r3, [r7, #0]
 8009c08:	695b      	ldr	r3, [r3, #20]
 8009c0a:	693a      	ldr	r2, [r7, #16]
 8009c0c:	4313      	orrs	r3, r2
 8009c0e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8009c10:	683b      	ldr	r3, [r7, #0]
 8009c12:	699b      	ldr	r3, [r3, #24]
 8009c14:	693a      	ldr	r2, [r7, #16]
 8009c16:	4313      	orrs	r3, r2
 8009c18:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	693a      	ldr	r2, [r7, #16]
 8009c1e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	68fa      	ldr	r2, [r7, #12]
 8009c24:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8009c26:	683b      	ldr	r3, [r7, #0]
 8009c28:	685a      	ldr	r2, [r3, #4]
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	697a      	ldr	r2, [r7, #20]
 8009c32:	621a      	str	r2, [r3, #32]
}
 8009c34:	bf00      	nop
 8009c36:	371c      	adds	r7, #28
 8009c38:	46bd      	mov	sp, r7
 8009c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c3e:	4770      	bx	lr
 8009c40:	40010000 	.word	0x40010000

08009c44 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009c44:	b480      	push	{r7}
 8009c46:	b087      	sub	sp, #28
 8009c48:	af00      	add	r7, sp, #0
 8009c4a:	6078      	str	r0, [r7, #4]
 8009c4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	6a1b      	ldr	r3, [r3, #32]
 8009c52:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	6a1b      	ldr	r3, [r3, #32]
 8009c58:	f023 0210 	bic.w	r2, r3, #16
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	685b      	ldr	r3, [r3, #4]
 8009c64:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	699b      	ldr	r3, [r3, #24]
 8009c6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8009c6c:	68fb      	ldr	r3, [r7, #12]
 8009c6e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009c72:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8009c74:	68fb      	ldr	r3, [r7, #12]
 8009c76:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009c7a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009c7c:	683b      	ldr	r3, [r7, #0]
 8009c7e:	681b      	ldr	r3, [r3, #0]
 8009c80:	021b      	lsls	r3, r3, #8
 8009c82:	68fa      	ldr	r2, [r7, #12]
 8009c84:	4313      	orrs	r3, r2
 8009c86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8009c88:	697b      	ldr	r3, [r7, #20]
 8009c8a:	f023 0320 	bic.w	r3, r3, #32
 8009c8e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8009c90:	683b      	ldr	r3, [r7, #0]
 8009c92:	689b      	ldr	r3, [r3, #8]
 8009c94:	011b      	lsls	r3, r3, #4
 8009c96:	697a      	ldr	r2, [r7, #20]
 8009c98:	4313      	orrs	r3, r2
 8009c9a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	4a1e      	ldr	r2, [pc, #120]	@ (8009d18 <TIM_OC2_SetConfig+0xd4>)
 8009ca0:	4293      	cmp	r3, r2
 8009ca2:	d10d      	bne.n	8009cc0 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8009ca4:	697b      	ldr	r3, [r7, #20]
 8009ca6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009caa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8009cac:	683b      	ldr	r3, [r7, #0]
 8009cae:	68db      	ldr	r3, [r3, #12]
 8009cb0:	011b      	lsls	r3, r3, #4
 8009cb2:	697a      	ldr	r2, [r7, #20]
 8009cb4:	4313      	orrs	r3, r2
 8009cb6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8009cb8:	697b      	ldr	r3, [r7, #20]
 8009cba:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009cbe:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	4a15      	ldr	r2, [pc, #84]	@ (8009d18 <TIM_OC2_SetConfig+0xd4>)
 8009cc4:	4293      	cmp	r3, r2
 8009cc6:	d113      	bne.n	8009cf0 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8009cc8:	693b      	ldr	r3, [r7, #16]
 8009cca:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8009cce:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8009cd0:	693b      	ldr	r3, [r7, #16]
 8009cd2:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8009cd6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8009cd8:	683b      	ldr	r3, [r7, #0]
 8009cda:	695b      	ldr	r3, [r3, #20]
 8009cdc:	009b      	lsls	r3, r3, #2
 8009cde:	693a      	ldr	r2, [r7, #16]
 8009ce0:	4313      	orrs	r3, r2
 8009ce2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8009ce4:	683b      	ldr	r3, [r7, #0]
 8009ce6:	699b      	ldr	r3, [r3, #24]
 8009ce8:	009b      	lsls	r3, r3, #2
 8009cea:	693a      	ldr	r2, [r7, #16]
 8009cec:	4313      	orrs	r3, r2
 8009cee:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	693a      	ldr	r2, [r7, #16]
 8009cf4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	68fa      	ldr	r2, [r7, #12]
 8009cfa:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8009cfc:	683b      	ldr	r3, [r7, #0]
 8009cfe:	685a      	ldr	r2, [r3, #4]
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	697a      	ldr	r2, [r7, #20]
 8009d08:	621a      	str	r2, [r3, #32]
}
 8009d0a:	bf00      	nop
 8009d0c:	371c      	adds	r7, #28
 8009d0e:	46bd      	mov	sp, r7
 8009d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d14:	4770      	bx	lr
 8009d16:	bf00      	nop
 8009d18:	40010000 	.word	0x40010000

08009d1c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009d1c:	b480      	push	{r7}
 8009d1e:	b087      	sub	sp, #28
 8009d20:	af00      	add	r7, sp, #0
 8009d22:	6078      	str	r0, [r7, #4]
 8009d24:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	6a1b      	ldr	r3, [r3, #32]
 8009d2a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	6a1b      	ldr	r3, [r3, #32]
 8009d30:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	685b      	ldr	r3, [r3, #4]
 8009d3c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	69db      	ldr	r3, [r3, #28]
 8009d42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8009d44:	68fb      	ldr	r3, [r7, #12]
 8009d46:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009d4a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8009d4c:	68fb      	ldr	r3, [r7, #12]
 8009d4e:	f023 0303 	bic.w	r3, r3, #3
 8009d52:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009d54:	683b      	ldr	r3, [r7, #0]
 8009d56:	681b      	ldr	r3, [r3, #0]
 8009d58:	68fa      	ldr	r2, [r7, #12]
 8009d5a:	4313      	orrs	r3, r2
 8009d5c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8009d5e:	697b      	ldr	r3, [r7, #20]
 8009d60:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8009d64:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8009d66:	683b      	ldr	r3, [r7, #0]
 8009d68:	689b      	ldr	r3, [r3, #8]
 8009d6a:	021b      	lsls	r3, r3, #8
 8009d6c:	697a      	ldr	r2, [r7, #20]
 8009d6e:	4313      	orrs	r3, r2
 8009d70:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	4a1d      	ldr	r2, [pc, #116]	@ (8009dec <TIM_OC3_SetConfig+0xd0>)
 8009d76:	4293      	cmp	r3, r2
 8009d78:	d10d      	bne.n	8009d96 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8009d7a:	697b      	ldr	r3, [r7, #20]
 8009d7c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8009d80:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8009d82:	683b      	ldr	r3, [r7, #0]
 8009d84:	68db      	ldr	r3, [r3, #12]
 8009d86:	021b      	lsls	r3, r3, #8
 8009d88:	697a      	ldr	r2, [r7, #20]
 8009d8a:	4313      	orrs	r3, r2
 8009d8c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8009d8e:	697b      	ldr	r3, [r7, #20]
 8009d90:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8009d94:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	4a14      	ldr	r2, [pc, #80]	@ (8009dec <TIM_OC3_SetConfig+0xd0>)
 8009d9a:	4293      	cmp	r3, r2
 8009d9c:	d113      	bne.n	8009dc6 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8009d9e:	693b      	ldr	r3, [r7, #16]
 8009da0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8009da4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8009da6:	693b      	ldr	r3, [r7, #16]
 8009da8:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8009dac:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8009dae:	683b      	ldr	r3, [r7, #0]
 8009db0:	695b      	ldr	r3, [r3, #20]
 8009db2:	011b      	lsls	r3, r3, #4
 8009db4:	693a      	ldr	r2, [r7, #16]
 8009db6:	4313      	orrs	r3, r2
 8009db8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8009dba:	683b      	ldr	r3, [r7, #0]
 8009dbc:	699b      	ldr	r3, [r3, #24]
 8009dbe:	011b      	lsls	r3, r3, #4
 8009dc0:	693a      	ldr	r2, [r7, #16]
 8009dc2:	4313      	orrs	r3, r2
 8009dc4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	693a      	ldr	r2, [r7, #16]
 8009dca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	68fa      	ldr	r2, [r7, #12]
 8009dd0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8009dd2:	683b      	ldr	r3, [r7, #0]
 8009dd4:	685a      	ldr	r2, [r3, #4]
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	697a      	ldr	r2, [r7, #20]
 8009dde:	621a      	str	r2, [r3, #32]
}
 8009de0:	bf00      	nop
 8009de2:	371c      	adds	r7, #28
 8009de4:	46bd      	mov	sp, r7
 8009de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dea:	4770      	bx	lr
 8009dec:	40010000 	.word	0x40010000

08009df0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009df0:	b480      	push	{r7}
 8009df2:	b087      	sub	sp, #28
 8009df4:	af00      	add	r7, sp, #0
 8009df6:	6078      	str	r0, [r7, #4]
 8009df8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	6a1b      	ldr	r3, [r3, #32]
 8009dfe:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	6a1b      	ldr	r3, [r3, #32]
 8009e04:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	685b      	ldr	r3, [r3, #4]
 8009e10:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	69db      	ldr	r3, [r3, #28]
 8009e16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8009e18:	68fb      	ldr	r3, [r7, #12]
 8009e1a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009e1e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8009e20:	68fb      	ldr	r3, [r7, #12]
 8009e22:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009e26:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009e28:	683b      	ldr	r3, [r7, #0]
 8009e2a:	681b      	ldr	r3, [r3, #0]
 8009e2c:	021b      	lsls	r3, r3, #8
 8009e2e:	68fa      	ldr	r2, [r7, #12]
 8009e30:	4313      	orrs	r3, r2
 8009e32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8009e34:	693b      	ldr	r3, [r7, #16]
 8009e36:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8009e3a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8009e3c:	683b      	ldr	r3, [r7, #0]
 8009e3e:	689b      	ldr	r3, [r3, #8]
 8009e40:	031b      	lsls	r3, r3, #12
 8009e42:	693a      	ldr	r2, [r7, #16]
 8009e44:	4313      	orrs	r3, r2
 8009e46:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	4a10      	ldr	r2, [pc, #64]	@ (8009e8c <TIM_OC4_SetConfig+0x9c>)
 8009e4c:	4293      	cmp	r3, r2
 8009e4e:	d109      	bne.n	8009e64 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8009e50:	697b      	ldr	r3, [r7, #20]
 8009e52:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8009e56:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8009e58:	683b      	ldr	r3, [r7, #0]
 8009e5a:	695b      	ldr	r3, [r3, #20]
 8009e5c:	019b      	lsls	r3, r3, #6
 8009e5e:	697a      	ldr	r2, [r7, #20]
 8009e60:	4313      	orrs	r3, r2
 8009e62:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	697a      	ldr	r2, [r7, #20]
 8009e68:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	68fa      	ldr	r2, [r7, #12]
 8009e6e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8009e70:	683b      	ldr	r3, [r7, #0]
 8009e72:	685a      	ldr	r2, [r3, #4]
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	693a      	ldr	r2, [r7, #16]
 8009e7c:	621a      	str	r2, [r3, #32]
}
 8009e7e:	bf00      	nop
 8009e80:	371c      	adds	r7, #28
 8009e82:	46bd      	mov	sp, r7
 8009e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e88:	4770      	bx	lr
 8009e8a:	bf00      	nop
 8009e8c:	40010000 	.word	0x40010000

08009e90 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009e90:	b480      	push	{r7}
 8009e92:	b087      	sub	sp, #28
 8009e94:	af00      	add	r7, sp, #0
 8009e96:	60f8      	str	r0, [r7, #12]
 8009e98:	60b9      	str	r1, [r7, #8]
 8009e9a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009e9c:	68fb      	ldr	r3, [r7, #12]
 8009e9e:	6a1b      	ldr	r3, [r3, #32]
 8009ea0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009ea2:	68fb      	ldr	r3, [r7, #12]
 8009ea4:	6a1b      	ldr	r3, [r3, #32]
 8009ea6:	f023 0201 	bic.w	r2, r3, #1
 8009eaa:	68fb      	ldr	r3, [r7, #12]
 8009eac:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009eae:	68fb      	ldr	r3, [r7, #12]
 8009eb0:	699b      	ldr	r3, [r3, #24]
 8009eb2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009eb4:	693b      	ldr	r3, [r7, #16]
 8009eb6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8009eba:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	011b      	lsls	r3, r3, #4
 8009ec0:	693a      	ldr	r2, [r7, #16]
 8009ec2:	4313      	orrs	r3, r2
 8009ec4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009ec6:	697b      	ldr	r3, [r7, #20]
 8009ec8:	f023 030a 	bic.w	r3, r3, #10
 8009ecc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8009ece:	697a      	ldr	r2, [r7, #20]
 8009ed0:	68bb      	ldr	r3, [r7, #8]
 8009ed2:	4313      	orrs	r3, r2
 8009ed4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009ed6:	68fb      	ldr	r3, [r7, #12]
 8009ed8:	693a      	ldr	r2, [r7, #16]
 8009eda:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009edc:	68fb      	ldr	r3, [r7, #12]
 8009ede:	697a      	ldr	r2, [r7, #20]
 8009ee0:	621a      	str	r2, [r3, #32]
}
 8009ee2:	bf00      	nop
 8009ee4:	371c      	adds	r7, #28
 8009ee6:	46bd      	mov	sp, r7
 8009ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eec:	4770      	bx	lr

08009eee <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009eee:	b480      	push	{r7}
 8009ef0:	b087      	sub	sp, #28
 8009ef2:	af00      	add	r7, sp, #0
 8009ef4:	60f8      	str	r0, [r7, #12]
 8009ef6:	60b9      	str	r1, [r7, #8]
 8009ef8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8009efa:	68fb      	ldr	r3, [r7, #12]
 8009efc:	6a1b      	ldr	r3, [r3, #32]
 8009efe:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009f00:	68fb      	ldr	r3, [r7, #12]
 8009f02:	6a1b      	ldr	r3, [r3, #32]
 8009f04:	f023 0210 	bic.w	r2, r3, #16
 8009f08:	68fb      	ldr	r3, [r7, #12]
 8009f0a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009f0c:	68fb      	ldr	r3, [r7, #12]
 8009f0e:	699b      	ldr	r3, [r3, #24]
 8009f10:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009f12:	693b      	ldr	r3, [r7, #16]
 8009f14:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8009f18:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	031b      	lsls	r3, r3, #12
 8009f1e:	693a      	ldr	r2, [r7, #16]
 8009f20:	4313      	orrs	r3, r2
 8009f22:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009f24:	697b      	ldr	r3, [r7, #20]
 8009f26:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8009f2a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009f2c:	68bb      	ldr	r3, [r7, #8]
 8009f2e:	011b      	lsls	r3, r3, #4
 8009f30:	697a      	ldr	r2, [r7, #20]
 8009f32:	4313      	orrs	r3, r2
 8009f34:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009f36:	68fb      	ldr	r3, [r7, #12]
 8009f38:	693a      	ldr	r2, [r7, #16]
 8009f3a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009f3c:	68fb      	ldr	r3, [r7, #12]
 8009f3e:	697a      	ldr	r2, [r7, #20]
 8009f40:	621a      	str	r2, [r3, #32]
}
 8009f42:	bf00      	nop
 8009f44:	371c      	adds	r7, #28
 8009f46:	46bd      	mov	sp, r7
 8009f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f4c:	4770      	bx	lr

08009f4e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8009f4e:	b480      	push	{r7}
 8009f50:	b085      	sub	sp, #20
 8009f52:	af00      	add	r7, sp, #0
 8009f54:	6078      	str	r0, [r7, #4]
 8009f56:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	689b      	ldr	r3, [r3, #8]
 8009f5c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009f5e:	68fb      	ldr	r3, [r7, #12]
 8009f60:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009f64:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009f66:	683a      	ldr	r2, [r7, #0]
 8009f68:	68fb      	ldr	r3, [r7, #12]
 8009f6a:	4313      	orrs	r3, r2
 8009f6c:	f043 0307 	orr.w	r3, r3, #7
 8009f70:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	68fa      	ldr	r2, [r7, #12]
 8009f76:	609a      	str	r2, [r3, #8]
}
 8009f78:	bf00      	nop
 8009f7a:	3714      	adds	r7, #20
 8009f7c:	46bd      	mov	sp, r7
 8009f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f82:	4770      	bx	lr

08009f84 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009f84:	b480      	push	{r7}
 8009f86:	b087      	sub	sp, #28
 8009f88:	af00      	add	r7, sp, #0
 8009f8a:	60f8      	str	r0, [r7, #12]
 8009f8c:	60b9      	str	r1, [r7, #8]
 8009f8e:	607a      	str	r2, [r7, #4]
 8009f90:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8009f92:	68fb      	ldr	r3, [r7, #12]
 8009f94:	689b      	ldr	r3, [r3, #8]
 8009f96:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009f98:	697b      	ldr	r3, [r7, #20]
 8009f9a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8009f9e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009fa0:	683b      	ldr	r3, [r7, #0]
 8009fa2:	021a      	lsls	r2, r3, #8
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	431a      	orrs	r2, r3
 8009fa8:	68bb      	ldr	r3, [r7, #8]
 8009faa:	4313      	orrs	r3, r2
 8009fac:	697a      	ldr	r2, [r7, #20]
 8009fae:	4313      	orrs	r3, r2
 8009fb0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009fb2:	68fb      	ldr	r3, [r7, #12]
 8009fb4:	697a      	ldr	r2, [r7, #20]
 8009fb6:	609a      	str	r2, [r3, #8]
}
 8009fb8:	bf00      	nop
 8009fba:	371c      	adds	r7, #28
 8009fbc:	46bd      	mov	sp, r7
 8009fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fc2:	4770      	bx	lr

08009fc4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8009fc4:	b480      	push	{r7}
 8009fc6:	b087      	sub	sp, #28
 8009fc8:	af00      	add	r7, sp, #0
 8009fca:	60f8      	str	r0, [r7, #12]
 8009fcc:	60b9      	str	r1, [r7, #8]
 8009fce:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8009fd0:	68bb      	ldr	r3, [r7, #8]
 8009fd2:	f003 031f 	and.w	r3, r3, #31
 8009fd6:	2201      	movs	r2, #1
 8009fd8:	fa02 f303 	lsl.w	r3, r2, r3
 8009fdc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8009fde:	68fb      	ldr	r3, [r7, #12]
 8009fe0:	6a1a      	ldr	r2, [r3, #32]
 8009fe2:	697b      	ldr	r3, [r7, #20]
 8009fe4:	43db      	mvns	r3, r3
 8009fe6:	401a      	ands	r2, r3
 8009fe8:	68fb      	ldr	r3, [r7, #12]
 8009fea:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8009fec:	68fb      	ldr	r3, [r7, #12]
 8009fee:	6a1a      	ldr	r2, [r3, #32]
 8009ff0:	68bb      	ldr	r3, [r7, #8]
 8009ff2:	f003 031f 	and.w	r3, r3, #31
 8009ff6:	6879      	ldr	r1, [r7, #4]
 8009ff8:	fa01 f303 	lsl.w	r3, r1, r3
 8009ffc:	431a      	orrs	r2, r3
 8009ffe:	68fb      	ldr	r3, [r7, #12]
 800a000:	621a      	str	r2, [r3, #32]
}
 800a002:	bf00      	nop
 800a004:	371c      	adds	r7, #28
 800a006:	46bd      	mov	sp, r7
 800a008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a00c:	4770      	bx	lr
	...

0800a010 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a010:	b480      	push	{r7}
 800a012:	b085      	sub	sp, #20
 800a014:	af00      	add	r7, sp, #0
 800a016:	6078      	str	r0, [r7, #4]
 800a018:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a020:	2b01      	cmp	r3, #1
 800a022:	d101      	bne.n	800a028 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a024:	2302      	movs	r3, #2
 800a026:	e050      	b.n	800a0ca <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	2201      	movs	r2, #1
 800a02c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	2202      	movs	r2, #2
 800a034:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	681b      	ldr	r3, [r3, #0]
 800a03c:	685b      	ldr	r3, [r3, #4]
 800a03e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	681b      	ldr	r3, [r3, #0]
 800a044:	689b      	ldr	r3, [r3, #8]
 800a046:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a048:	68fb      	ldr	r3, [r7, #12]
 800a04a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a04e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a050:	683b      	ldr	r3, [r7, #0]
 800a052:	681b      	ldr	r3, [r3, #0]
 800a054:	68fa      	ldr	r2, [r7, #12]
 800a056:	4313      	orrs	r3, r2
 800a058:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	681b      	ldr	r3, [r3, #0]
 800a05e:	68fa      	ldr	r2, [r7, #12]
 800a060:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	681b      	ldr	r3, [r3, #0]
 800a066:	4a1c      	ldr	r2, [pc, #112]	@ (800a0d8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800a068:	4293      	cmp	r3, r2
 800a06a:	d018      	beq.n	800a09e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	681b      	ldr	r3, [r3, #0]
 800a070:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a074:	d013      	beq.n	800a09e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	681b      	ldr	r3, [r3, #0]
 800a07a:	4a18      	ldr	r2, [pc, #96]	@ (800a0dc <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800a07c:	4293      	cmp	r3, r2
 800a07e:	d00e      	beq.n	800a09e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	681b      	ldr	r3, [r3, #0]
 800a084:	4a16      	ldr	r2, [pc, #88]	@ (800a0e0 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800a086:	4293      	cmp	r3, r2
 800a088:	d009      	beq.n	800a09e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	681b      	ldr	r3, [r3, #0]
 800a08e:	4a15      	ldr	r2, [pc, #84]	@ (800a0e4 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800a090:	4293      	cmp	r3, r2
 800a092:	d004      	beq.n	800a09e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	681b      	ldr	r3, [r3, #0]
 800a098:	4a13      	ldr	r2, [pc, #76]	@ (800a0e8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800a09a:	4293      	cmp	r3, r2
 800a09c:	d10c      	bne.n	800a0b8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a09e:	68bb      	ldr	r3, [r7, #8]
 800a0a0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a0a4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a0a6:	683b      	ldr	r3, [r7, #0]
 800a0a8:	685b      	ldr	r3, [r3, #4]
 800a0aa:	68ba      	ldr	r2, [r7, #8]
 800a0ac:	4313      	orrs	r3, r2
 800a0ae:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	681b      	ldr	r3, [r3, #0]
 800a0b4:	68ba      	ldr	r2, [r7, #8]
 800a0b6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	2201      	movs	r2, #1
 800a0bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	2200      	movs	r2, #0
 800a0c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800a0c8:	2300      	movs	r3, #0
}
 800a0ca:	4618      	mov	r0, r3
 800a0cc:	3714      	adds	r7, #20
 800a0ce:	46bd      	mov	sp, r7
 800a0d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0d4:	4770      	bx	lr
 800a0d6:	bf00      	nop
 800a0d8:	40010000 	.word	0x40010000
 800a0dc:	40000400 	.word	0x40000400
 800a0e0:	40000800 	.word	0x40000800
 800a0e4:	40000c00 	.word	0x40000c00
 800a0e8:	40014000 	.word	0x40014000

0800a0ec <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800a0ec:	b480      	push	{r7}
 800a0ee:	b085      	sub	sp, #20
 800a0f0:	af00      	add	r7, sp, #0
 800a0f2:	6078      	str	r0, [r7, #4]
 800a0f4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800a0f6:	2300      	movs	r3, #0
 800a0f8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a100:	2b01      	cmp	r3, #1
 800a102:	d101      	bne.n	800a108 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800a104:	2302      	movs	r3, #2
 800a106:	e03d      	b.n	800a184 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	2201      	movs	r2, #1
 800a10c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800a110:	68fb      	ldr	r3, [r7, #12]
 800a112:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800a116:	683b      	ldr	r3, [r7, #0]
 800a118:	68db      	ldr	r3, [r3, #12]
 800a11a:	4313      	orrs	r3, r2
 800a11c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800a11e:	68fb      	ldr	r3, [r7, #12]
 800a120:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800a124:	683b      	ldr	r3, [r7, #0]
 800a126:	689b      	ldr	r3, [r3, #8]
 800a128:	4313      	orrs	r3, r2
 800a12a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800a12c:	68fb      	ldr	r3, [r7, #12]
 800a12e:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800a132:	683b      	ldr	r3, [r7, #0]
 800a134:	685b      	ldr	r3, [r3, #4]
 800a136:	4313      	orrs	r3, r2
 800a138:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800a13a:	68fb      	ldr	r3, [r7, #12]
 800a13c:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800a140:	683b      	ldr	r3, [r7, #0]
 800a142:	681b      	ldr	r3, [r3, #0]
 800a144:	4313      	orrs	r3, r2
 800a146:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800a148:	68fb      	ldr	r3, [r7, #12]
 800a14a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800a14e:	683b      	ldr	r3, [r7, #0]
 800a150:	691b      	ldr	r3, [r3, #16]
 800a152:	4313      	orrs	r3, r2
 800a154:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800a156:	68fb      	ldr	r3, [r7, #12]
 800a158:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800a15c:	683b      	ldr	r3, [r7, #0]
 800a15e:	695b      	ldr	r3, [r3, #20]
 800a160:	4313      	orrs	r3, r2
 800a162:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800a164:	68fb      	ldr	r3, [r7, #12]
 800a166:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800a16a:	683b      	ldr	r3, [r7, #0]
 800a16c:	69db      	ldr	r3, [r3, #28]
 800a16e:	4313      	orrs	r3, r2
 800a170:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	681b      	ldr	r3, [r3, #0]
 800a176:	68fa      	ldr	r2, [r7, #12]
 800a178:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	2200      	movs	r2, #0
 800a17e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800a182:	2300      	movs	r3, #0
}
 800a184:	4618      	mov	r0, r3
 800a186:	3714      	adds	r7, #20
 800a188:	46bd      	mov	sp, r7
 800a18a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a18e:	4770      	bx	lr

0800a190 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a190:	b480      	push	{r7}
 800a192:	b083      	sub	sp, #12
 800a194:	af00      	add	r7, sp, #0
 800a196:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a198:	bf00      	nop
 800a19a:	370c      	adds	r7, #12
 800a19c:	46bd      	mov	sp, r7
 800a19e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1a2:	4770      	bx	lr

0800a1a4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a1a4:	b480      	push	{r7}
 800a1a6:	b083      	sub	sp, #12
 800a1a8:	af00      	add	r7, sp, #0
 800a1aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a1ac:	bf00      	nop
 800a1ae:	370c      	adds	r7, #12
 800a1b0:	46bd      	mov	sp, r7
 800a1b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1b6:	4770      	bx	lr

0800a1b8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a1b8:	b580      	push	{r7, lr}
 800a1ba:	b082      	sub	sp, #8
 800a1bc:	af00      	add	r7, sp, #0
 800a1be:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	2b00      	cmp	r3, #0
 800a1c4:	d101      	bne.n	800a1ca <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a1c6:	2301      	movs	r3, #1
 800a1c8:	e042      	b.n	800a250 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a1d0:	b2db      	uxtb	r3, r3
 800a1d2:	2b00      	cmp	r3, #0
 800a1d4:	d106      	bne.n	800a1e4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	2200      	movs	r2, #0
 800a1da:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a1de:	6878      	ldr	r0, [r7, #4]
 800a1e0:	f7fb fa74 	bl	80056cc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	2224      	movs	r2, #36	@ 0x24
 800a1e8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	681b      	ldr	r3, [r3, #0]
 800a1f0:	68da      	ldr	r2, [r3, #12]
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	681b      	ldr	r3, [r3, #0]
 800a1f6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800a1fa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800a1fc:	6878      	ldr	r0, [r7, #4]
 800a1fe:	f000 fdd3 	bl	800ada8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	681b      	ldr	r3, [r3, #0]
 800a206:	691a      	ldr	r2, [r3, #16]
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	681b      	ldr	r3, [r3, #0]
 800a20c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800a210:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	681b      	ldr	r3, [r3, #0]
 800a216:	695a      	ldr	r2, [r3, #20]
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	681b      	ldr	r3, [r3, #0]
 800a21c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800a220:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	681b      	ldr	r3, [r3, #0]
 800a226:	68da      	ldr	r2, [r3, #12]
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	681b      	ldr	r3, [r3, #0]
 800a22c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800a230:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	2200      	movs	r2, #0
 800a236:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	2220      	movs	r2, #32
 800a23c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800a240:	687b      	ldr	r3, [r7, #4]
 800a242:	2220      	movs	r2, #32
 800a244:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	2200      	movs	r2, #0
 800a24c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800a24e:	2300      	movs	r3, #0
}
 800a250:	4618      	mov	r0, r3
 800a252:	3708      	adds	r7, #8
 800a254:	46bd      	mov	sp, r7
 800a256:	bd80      	pop	{r7, pc}

0800a258 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a258:	b580      	push	{r7, lr}
 800a25a:	b08a      	sub	sp, #40	@ 0x28
 800a25c:	af02      	add	r7, sp, #8
 800a25e:	60f8      	str	r0, [r7, #12]
 800a260:	60b9      	str	r1, [r7, #8]
 800a262:	603b      	str	r3, [r7, #0]
 800a264:	4613      	mov	r3, r2
 800a266:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800a268:	2300      	movs	r3, #0
 800a26a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a26c:	68fb      	ldr	r3, [r7, #12]
 800a26e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a272:	b2db      	uxtb	r3, r3
 800a274:	2b20      	cmp	r3, #32
 800a276:	d175      	bne.n	800a364 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 800a278:	68bb      	ldr	r3, [r7, #8]
 800a27a:	2b00      	cmp	r3, #0
 800a27c:	d002      	beq.n	800a284 <HAL_UART_Transmit+0x2c>
 800a27e:	88fb      	ldrh	r3, [r7, #6]
 800a280:	2b00      	cmp	r3, #0
 800a282:	d101      	bne.n	800a288 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800a284:	2301      	movs	r3, #1
 800a286:	e06e      	b.n	800a366 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a288:	68fb      	ldr	r3, [r7, #12]
 800a28a:	2200      	movs	r2, #0
 800a28c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a28e:	68fb      	ldr	r3, [r7, #12]
 800a290:	2221      	movs	r2, #33	@ 0x21
 800a292:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800a296:	f7fb fb2f 	bl	80058f8 <HAL_GetTick>
 800a29a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800a29c:	68fb      	ldr	r3, [r7, #12]
 800a29e:	88fa      	ldrh	r2, [r7, #6]
 800a2a0:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800a2a2:	68fb      	ldr	r3, [r7, #12]
 800a2a4:	88fa      	ldrh	r2, [r7, #6]
 800a2a6:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a2a8:	68fb      	ldr	r3, [r7, #12]
 800a2aa:	689b      	ldr	r3, [r3, #8]
 800a2ac:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a2b0:	d108      	bne.n	800a2c4 <HAL_UART_Transmit+0x6c>
 800a2b2:	68fb      	ldr	r3, [r7, #12]
 800a2b4:	691b      	ldr	r3, [r3, #16]
 800a2b6:	2b00      	cmp	r3, #0
 800a2b8:	d104      	bne.n	800a2c4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800a2ba:	2300      	movs	r3, #0
 800a2bc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800a2be:	68bb      	ldr	r3, [r7, #8]
 800a2c0:	61bb      	str	r3, [r7, #24]
 800a2c2:	e003      	b.n	800a2cc <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800a2c4:	68bb      	ldr	r3, [r7, #8]
 800a2c6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800a2c8:	2300      	movs	r3, #0
 800a2ca:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800a2cc:	e02e      	b.n	800a32c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800a2ce:	683b      	ldr	r3, [r7, #0]
 800a2d0:	9300      	str	r3, [sp, #0]
 800a2d2:	697b      	ldr	r3, [r7, #20]
 800a2d4:	2200      	movs	r2, #0
 800a2d6:	2180      	movs	r1, #128	@ 0x80
 800a2d8:	68f8      	ldr	r0, [r7, #12]
 800a2da:	f000 fb37 	bl	800a94c <UART_WaitOnFlagUntilTimeout>
 800a2de:	4603      	mov	r3, r0
 800a2e0:	2b00      	cmp	r3, #0
 800a2e2:	d005      	beq.n	800a2f0 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 800a2e4:	68fb      	ldr	r3, [r7, #12]
 800a2e6:	2220      	movs	r2, #32
 800a2e8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 800a2ec:	2303      	movs	r3, #3
 800a2ee:	e03a      	b.n	800a366 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 800a2f0:	69fb      	ldr	r3, [r7, #28]
 800a2f2:	2b00      	cmp	r3, #0
 800a2f4:	d10b      	bne.n	800a30e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800a2f6:	69bb      	ldr	r3, [r7, #24]
 800a2f8:	881b      	ldrh	r3, [r3, #0]
 800a2fa:	461a      	mov	r2, r3
 800a2fc:	68fb      	ldr	r3, [r7, #12]
 800a2fe:	681b      	ldr	r3, [r3, #0]
 800a300:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a304:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800a306:	69bb      	ldr	r3, [r7, #24]
 800a308:	3302      	adds	r3, #2
 800a30a:	61bb      	str	r3, [r7, #24]
 800a30c:	e007      	b.n	800a31e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800a30e:	69fb      	ldr	r3, [r7, #28]
 800a310:	781a      	ldrb	r2, [r3, #0]
 800a312:	68fb      	ldr	r3, [r7, #12]
 800a314:	681b      	ldr	r3, [r3, #0]
 800a316:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800a318:	69fb      	ldr	r3, [r7, #28]
 800a31a:	3301      	adds	r3, #1
 800a31c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800a31e:	68fb      	ldr	r3, [r7, #12]
 800a320:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800a322:	b29b      	uxth	r3, r3
 800a324:	3b01      	subs	r3, #1
 800a326:	b29a      	uxth	r2, r3
 800a328:	68fb      	ldr	r3, [r7, #12]
 800a32a:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 800a32c:	68fb      	ldr	r3, [r7, #12]
 800a32e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800a330:	b29b      	uxth	r3, r3
 800a332:	2b00      	cmp	r3, #0
 800a334:	d1cb      	bne.n	800a2ce <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800a336:	683b      	ldr	r3, [r7, #0]
 800a338:	9300      	str	r3, [sp, #0]
 800a33a:	697b      	ldr	r3, [r7, #20]
 800a33c:	2200      	movs	r2, #0
 800a33e:	2140      	movs	r1, #64	@ 0x40
 800a340:	68f8      	ldr	r0, [r7, #12]
 800a342:	f000 fb03 	bl	800a94c <UART_WaitOnFlagUntilTimeout>
 800a346:	4603      	mov	r3, r0
 800a348:	2b00      	cmp	r3, #0
 800a34a:	d005      	beq.n	800a358 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800a34c:	68fb      	ldr	r3, [r7, #12]
 800a34e:	2220      	movs	r2, #32
 800a350:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 800a354:	2303      	movs	r3, #3
 800a356:	e006      	b.n	800a366 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800a358:	68fb      	ldr	r3, [r7, #12]
 800a35a:	2220      	movs	r2, #32
 800a35c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 800a360:	2300      	movs	r3, #0
 800a362:	e000      	b.n	800a366 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 800a364:	2302      	movs	r3, #2
  }
}
 800a366:	4618      	mov	r0, r3
 800a368:	3720      	adds	r7, #32
 800a36a:	46bd      	mov	sp, r7
 800a36c:	bd80      	pop	{r7, pc}

0800a36e <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a36e:	b580      	push	{r7, lr}
 800a370:	b084      	sub	sp, #16
 800a372:	af00      	add	r7, sp, #0
 800a374:	60f8      	str	r0, [r7, #12]
 800a376:	60b9      	str	r1, [r7, #8]
 800a378:	4613      	mov	r3, r2
 800a37a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800a37c:	68fb      	ldr	r3, [r7, #12]
 800a37e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800a382:	b2db      	uxtb	r3, r3
 800a384:	2b20      	cmp	r3, #32
 800a386:	d112      	bne.n	800a3ae <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 800a388:	68bb      	ldr	r3, [r7, #8]
 800a38a:	2b00      	cmp	r3, #0
 800a38c:	d002      	beq.n	800a394 <HAL_UART_Receive_IT+0x26>
 800a38e:	88fb      	ldrh	r3, [r7, #6]
 800a390:	2b00      	cmp	r3, #0
 800a392:	d101      	bne.n	800a398 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800a394:	2301      	movs	r3, #1
 800a396:	e00b      	b.n	800a3b0 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a398:	68fb      	ldr	r3, [r7, #12]
 800a39a:	2200      	movs	r2, #0
 800a39c:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800a39e:	88fb      	ldrh	r3, [r7, #6]
 800a3a0:	461a      	mov	r2, r3
 800a3a2:	68b9      	ldr	r1, [r7, #8]
 800a3a4:	68f8      	ldr	r0, [r7, #12]
 800a3a6:	f000 fb2a 	bl	800a9fe <UART_Start_Receive_IT>
 800a3aa:	4603      	mov	r3, r0
 800a3ac:	e000      	b.n	800a3b0 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 800a3ae:	2302      	movs	r3, #2
  }
}
 800a3b0:	4618      	mov	r0, r3
 800a3b2:	3710      	adds	r7, #16
 800a3b4:	46bd      	mov	sp, r7
 800a3b6:	bd80      	pop	{r7, pc}

0800a3b8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800a3b8:	b580      	push	{r7, lr}
 800a3ba:	b0ba      	sub	sp, #232	@ 0xe8
 800a3bc:	af00      	add	r7, sp, #0
 800a3be:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	681b      	ldr	r3, [r3, #0]
 800a3c4:	681b      	ldr	r3, [r3, #0]
 800a3c6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800a3ca:	687b      	ldr	r3, [r7, #4]
 800a3cc:	681b      	ldr	r3, [r3, #0]
 800a3ce:	68db      	ldr	r3, [r3, #12]
 800a3d0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	681b      	ldr	r3, [r3, #0]
 800a3d8:	695b      	ldr	r3, [r3, #20]
 800a3da:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800a3de:	2300      	movs	r3, #0
 800a3e0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 800a3e4:	2300      	movs	r3, #0
 800a3e6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800a3ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a3ee:	f003 030f 	and.w	r3, r3, #15
 800a3f2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800a3f6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800a3fa:	2b00      	cmp	r3, #0
 800a3fc:	d10f      	bne.n	800a41e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800a3fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a402:	f003 0320 	and.w	r3, r3, #32
 800a406:	2b00      	cmp	r3, #0
 800a408:	d009      	beq.n	800a41e <HAL_UART_IRQHandler+0x66>
 800a40a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a40e:	f003 0320 	and.w	r3, r3, #32
 800a412:	2b00      	cmp	r3, #0
 800a414:	d003      	beq.n	800a41e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800a416:	6878      	ldr	r0, [r7, #4]
 800a418:	f000 fc07 	bl	800ac2a <UART_Receive_IT>
      return;
 800a41c:	e273      	b.n	800a906 <HAL_UART_IRQHandler+0x54e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800a41e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800a422:	2b00      	cmp	r3, #0
 800a424:	f000 80de 	beq.w	800a5e4 <HAL_UART_IRQHandler+0x22c>
 800a428:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a42c:	f003 0301 	and.w	r3, r3, #1
 800a430:	2b00      	cmp	r3, #0
 800a432:	d106      	bne.n	800a442 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800a434:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a438:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 800a43c:	2b00      	cmp	r3, #0
 800a43e:	f000 80d1 	beq.w	800a5e4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800a442:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a446:	f003 0301 	and.w	r3, r3, #1
 800a44a:	2b00      	cmp	r3, #0
 800a44c:	d00b      	beq.n	800a466 <HAL_UART_IRQHandler+0xae>
 800a44e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a452:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a456:	2b00      	cmp	r3, #0
 800a458:	d005      	beq.n	800a466 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800a45a:	687b      	ldr	r3, [r7, #4]
 800a45c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a45e:	f043 0201 	orr.w	r2, r3, #1
 800a462:	687b      	ldr	r3, [r7, #4]
 800a464:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800a466:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a46a:	f003 0304 	and.w	r3, r3, #4
 800a46e:	2b00      	cmp	r3, #0
 800a470:	d00b      	beq.n	800a48a <HAL_UART_IRQHandler+0xd2>
 800a472:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a476:	f003 0301 	and.w	r3, r3, #1
 800a47a:	2b00      	cmp	r3, #0
 800a47c:	d005      	beq.n	800a48a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800a47e:	687b      	ldr	r3, [r7, #4]
 800a480:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a482:	f043 0202 	orr.w	r2, r3, #2
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800a48a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a48e:	f003 0302 	and.w	r3, r3, #2
 800a492:	2b00      	cmp	r3, #0
 800a494:	d00b      	beq.n	800a4ae <HAL_UART_IRQHandler+0xf6>
 800a496:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a49a:	f003 0301 	and.w	r3, r3, #1
 800a49e:	2b00      	cmp	r3, #0
 800a4a0:	d005      	beq.n	800a4ae <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a4a6:	f043 0204 	orr.w	r2, r3, #4
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800a4ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a4b2:	f003 0308 	and.w	r3, r3, #8
 800a4b6:	2b00      	cmp	r3, #0
 800a4b8:	d011      	beq.n	800a4de <HAL_UART_IRQHandler+0x126>
 800a4ba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a4be:	f003 0320 	and.w	r3, r3, #32
 800a4c2:	2b00      	cmp	r3, #0
 800a4c4:	d105      	bne.n	800a4d2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800a4c6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a4ca:	f003 0301 	and.w	r3, r3, #1
 800a4ce:	2b00      	cmp	r3, #0
 800a4d0:	d005      	beq.n	800a4de <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800a4d2:	687b      	ldr	r3, [r7, #4]
 800a4d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a4d6:	f043 0208 	orr.w	r2, r3, #8
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800a4de:	687b      	ldr	r3, [r7, #4]
 800a4e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a4e2:	2b00      	cmp	r3, #0
 800a4e4:	f000 820a 	beq.w	800a8fc <HAL_UART_IRQHandler+0x544>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800a4e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a4ec:	f003 0320 	and.w	r3, r3, #32
 800a4f0:	2b00      	cmp	r3, #0
 800a4f2:	d008      	beq.n	800a506 <HAL_UART_IRQHandler+0x14e>
 800a4f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a4f8:	f003 0320 	and.w	r3, r3, #32
 800a4fc:	2b00      	cmp	r3, #0
 800a4fe:	d002      	beq.n	800a506 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800a500:	6878      	ldr	r0, [r7, #4]
 800a502:	f000 fb92 	bl	800ac2a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800a506:	687b      	ldr	r3, [r7, #4]
 800a508:	681b      	ldr	r3, [r3, #0]
 800a50a:	695b      	ldr	r3, [r3, #20]
 800a50c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a510:	2b40      	cmp	r3, #64	@ 0x40
 800a512:	bf0c      	ite	eq
 800a514:	2301      	moveq	r3, #1
 800a516:	2300      	movne	r3, #0
 800a518:	b2db      	uxtb	r3, r3
 800a51a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a522:	f003 0308 	and.w	r3, r3, #8
 800a526:	2b00      	cmp	r3, #0
 800a528:	d103      	bne.n	800a532 <HAL_UART_IRQHandler+0x17a>
 800a52a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800a52e:	2b00      	cmp	r3, #0
 800a530:	d04f      	beq.n	800a5d2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800a532:	6878      	ldr	r0, [r7, #4]
 800a534:	f000 fa9d 	bl	800aa72 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	681b      	ldr	r3, [r3, #0]
 800a53c:	695b      	ldr	r3, [r3, #20]
 800a53e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a542:	2b40      	cmp	r3, #64	@ 0x40
 800a544:	d141      	bne.n	800a5ca <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	681b      	ldr	r3, [r3, #0]
 800a54a:	3314      	adds	r3, #20
 800a54c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a550:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800a554:	e853 3f00 	ldrex	r3, [r3]
 800a558:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800a55c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800a560:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a564:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	681b      	ldr	r3, [r3, #0]
 800a56c:	3314      	adds	r3, #20
 800a56e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800a572:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800a576:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a57a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800a57e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800a582:	e841 2300 	strex	r3, r2, [r1]
 800a586:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800a58a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800a58e:	2b00      	cmp	r3, #0
 800a590:	d1d9      	bne.n	800a546 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a596:	2b00      	cmp	r3, #0
 800a598:	d013      	beq.n	800a5c2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800a59a:	687b      	ldr	r3, [r7, #4]
 800a59c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a59e:	4a8a      	ldr	r2, [pc, #552]	@ (800a7c8 <HAL_UART_IRQHandler+0x410>)
 800a5a0:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a5a6:	4618      	mov	r0, r3
 800a5a8:	f7fc f8d0 	bl	800674c <HAL_DMA_Abort_IT>
 800a5ac:	4603      	mov	r3, r0
 800a5ae:	2b00      	cmp	r3, #0
 800a5b0:	d016      	beq.n	800a5e0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800a5b2:	687b      	ldr	r3, [r7, #4]
 800a5b4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a5b6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a5b8:	687a      	ldr	r2, [r7, #4]
 800a5ba:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800a5bc:	4610      	mov	r0, r2
 800a5be:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a5c0:	e00e      	b.n	800a5e0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800a5c2:	6878      	ldr	r0, [r7, #4]
 800a5c4:	f000 f9ac 	bl	800a920 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a5c8:	e00a      	b.n	800a5e0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800a5ca:	6878      	ldr	r0, [r7, #4]
 800a5cc:	f000 f9a8 	bl	800a920 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a5d0:	e006      	b.n	800a5e0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800a5d2:	6878      	ldr	r0, [r7, #4]
 800a5d4:	f000 f9a4 	bl	800a920 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	2200      	movs	r2, #0
 800a5dc:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800a5de:	e18d      	b.n	800a8fc <HAL_UART_IRQHandler+0x544>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a5e0:	bf00      	nop
    return;
 800a5e2:	e18b      	b.n	800a8fc <HAL_UART_IRQHandler+0x544>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a5e8:	2b01      	cmp	r3, #1
 800a5ea:	f040 8167 	bne.w	800a8bc <HAL_UART_IRQHandler+0x504>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800a5ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a5f2:	f003 0310 	and.w	r3, r3, #16
 800a5f6:	2b00      	cmp	r3, #0
 800a5f8:	f000 8160 	beq.w	800a8bc <HAL_UART_IRQHandler+0x504>
      && ((cr1its & USART_CR1_IDLEIE) != 0U))
 800a5fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a600:	f003 0310 	and.w	r3, r3, #16
 800a604:	2b00      	cmp	r3, #0
 800a606:	f000 8159 	beq.w	800a8bc <HAL_UART_IRQHandler+0x504>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800a60a:	2300      	movs	r3, #0
 800a60c:	60bb      	str	r3, [r7, #8]
 800a60e:	687b      	ldr	r3, [r7, #4]
 800a610:	681b      	ldr	r3, [r3, #0]
 800a612:	681b      	ldr	r3, [r3, #0]
 800a614:	60bb      	str	r3, [r7, #8]
 800a616:	687b      	ldr	r3, [r7, #4]
 800a618:	681b      	ldr	r3, [r3, #0]
 800a61a:	685b      	ldr	r3, [r3, #4]
 800a61c:	60bb      	str	r3, [r7, #8]
 800a61e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	681b      	ldr	r3, [r3, #0]
 800a624:	695b      	ldr	r3, [r3, #20]
 800a626:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a62a:	2b40      	cmp	r3, #64	@ 0x40
 800a62c:	f040 80ce 	bne.w	800a7cc <HAL_UART_IRQHandler+0x414>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a634:	681b      	ldr	r3, [r3, #0]
 800a636:	685b      	ldr	r3, [r3, #4]
 800a638:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800a63c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800a640:	2b00      	cmp	r3, #0
 800a642:	f000 80a9 	beq.w	800a798 <HAL_UART_IRQHandler+0x3e0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800a646:	687b      	ldr	r3, [r7, #4]
 800a648:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800a64a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800a64e:	429a      	cmp	r2, r3
 800a650:	f080 80a2 	bcs.w	800a798 <HAL_UART_IRQHandler+0x3e0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800a65a:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a660:	69db      	ldr	r3, [r3, #28]
 800a662:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a666:	f000 8088 	beq.w	800a77a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a66a:	687b      	ldr	r3, [r7, #4]
 800a66c:	681b      	ldr	r3, [r3, #0]
 800a66e:	330c      	adds	r3, #12
 800a670:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a674:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800a678:	e853 3f00 	ldrex	r3, [r3]
 800a67c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800a680:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800a684:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a688:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800a68c:	687b      	ldr	r3, [r7, #4]
 800a68e:	681b      	ldr	r3, [r3, #0]
 800a690:	330c      	adds	r3, #12
 800a692:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800a696:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800a69a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a69e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800a6a2:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800a6a6:	e841 2300 	strex	r3, r2, [r1]
 800a6aa:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800a6ae:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800a6b2:	2b00      	cmp	r3, #0
 800a6b4:	d1d9      	bne.n	800a66a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	681b      	ldr	r3, [r3, #0]
 800a6ba:	3314      	adds	r3, #20
 800a6bc:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a6be:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800a6c0:	e853 3f00 	ldrex	r3, [r3]
 800a6c4:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800a6c6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800a6c8:	f023 0301 	bic.w	r3, r3, #1
 800a6cc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	681b      	ldr	r3, [r3, #0]
 800a6d4:	3314      	adds	r3, #20
 800a6d6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800a6da:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800a6de:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a6e0:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800a6e2:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800a6e6:	e841 2300 	strex	r3, r2, [r1]
 800a6ea:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800a6ec:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800a6ee:	2b00      	cmp	r3, #0
 800a6f0:	d1e1      	bne.n	800a6b6 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a6f2:	687b      	ldr	r3, [r7, #4]
 800a6f4:	681b      	ldr	r3, [r3, #0]
 800a6f6:	3314      	adds	r3, #20
 800a6f8:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a6fa:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800a6fc:	e853 3f00 	ldrex	r3, [r3]
 800a700:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800a702:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a704:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a708:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	681b      	ldr	r3, [r3, #0]
 800a710:	3314      	adds	r3, #20
 800a712:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800a716:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800a718:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a71a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800a71c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800a71e:	e841 2300 	strex	r3, r2, [r1]
 800a722:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800a724:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a726:	2b00      	cmp	r3, #0
 800a728:	d1e3      	bne.n	800a6f2 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	2220      	movs	r2, #32
 800a72e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a732:	687b      	ldr	r3, [r7, #4]
 800a734:	2200      	movs	r2, #0
 800a736:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	681b      	ldr	r3, [r3, #0]
 800a73c:	330c      	adds	r3, #12
 800a73e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a740:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a742:	e853 3f00 	ldrex	r3, [r3]
 800a746:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800a748:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a74a:	f023 0310 	bic.w	r3, r3, #16
 800a74e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	681b      	ldr	r3, [r3, #0]
 800a756:	330c      	adds	r3, #12
 800a758:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800a75c:	65ba      	str	r2, [r7, #88]	@ 0x58
 800a75e:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a760:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800a762:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800a764:	e841 2300 	strex	r3, r2, [r1]
 800a768:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800a76a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a76c:	2b00      	cmp	r3, #0
 800a76e:	d1e3      	bne.n	800a738 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a774:	4618      	mov	r0, r3
 800a776:	f7fb ff79 	bl	800666c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	2202      	movs	r2, #2
 800a77e:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800a780:	687b      	ldr	r3, [r7, #4]
 800a782:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800a784:	687b      	ldr	r3, [r7, #4]
 800a786:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800a788:	b29b      	uxth	r3, r3
 800a78a:	1ad3      	subs	r3, r2, r3
 800a78c:	b29b      	uxth	r3, r3
 800a78e:	4619      	mov	r1, r3
 800a790:	6878      	ldr	r0, [r7, #4]
 800a792:	f000 f8cf 	bl	800a934 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 800a796:	e0b3      	b.n	800a900 <HAL_UART_IRQHandler+0x548>
        if (nb_remaining_rx_data == huart->RxXferSize)
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800a79c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800a7a0:	429a      	cmp	r2, r3
 800a7a2:	f040 80ad 	bne.w	800a900 <HAL_UART_IRQHandler+0x548>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 800a7a6:	687b      	ldr	r3, [r7, #4]
 800a7a8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a7aa:	69db      	ldr	r3, [r3, #28]
 800a7ac:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a7b0:	f040 80a6 	bne.w	800a900 <HAL_UART_IRQHandler+0x548>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	2202      	movs	r2, #2
 800a7b8:	635a      	str	r2, [r3, #52]	@ 0x34
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a7ba:	687b      	ldr	r3, [r7, #4]
 800a7bc:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800a7be:	4619      	mov	r1, r3
 800a7c0:	6878      	ldr	r0, [r7, #4]
 800a7c2:	f000 f8b7 	bl	800a934 <HAL_UARTEx_RxEventCallback>
      return;
 800a7c6:	e09b      	b.n	800a900 <HAL_UART_IRQHandler+0x548>
 800a7c8:	0800ab39 	.word	0x0800ab39
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800a7d4:	b29b      	uxth	r3, r3
 800a7d6:	1ad3      	subs	r3, r2, r3
 800a7d8:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800a7e0:	b29b      	uxth	r3, r3
 800a7e2:	2b00      	cmp	r3, #0
 800a7e4:	f000 808e 	beq.w	800a904 <HAL_UART_IRQHandler+0x54c>
          && (nb_rx_data > 0U))
 800a7e8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800a7ec:	2b00      	cmp	r3, #0
 800a7ee:	f000 8089 	beq.w	800a904 <HAL_UART_IRQHandler+0x54c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	681b      	ldr	r3, [r3, #0]
 800a7f6:	330c      	adds	r3, #12
 800a7f8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a7fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a7fc:	e853 3f00 	ldrex	r3, [r3]
 800a800:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800a802:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a804:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a808:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800a80c:	687b      	ldr	r3, [r7, #4]
 800a80e:	681b      	ldr	r3, [r3, #0]
 800a810:	330c      	adds	r3, #12
 800a812:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800a816:	647a      	str	r2, [r7, #68]	@ 0x44
 800a818:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a81a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800a81c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a81e:	e841 2300 	strex	r3, r2, [r1]
 800a822:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800a824:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a826:	2b00      	cmp	r3, #0
 800a828:	d1e3      	bne.n	800a7f2 <HAL_UART_IRQHandler+0x43a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	681b      	ldr	r3, [r3, #0]
 800a82e:	3314      	adds	r3, #20
 800a830:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a832:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a834:	e853 3f00 	ldrex	r3, [r3]
 800a838:	623b      	str	r3, [r7, #32]
   return(result);
 800a83a:	6a3b      	ldr	r3, [r7, #32]
 800a83c:	f023 0301 	bic.w	r3, r3, #1
 800a840:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	681b      	ldr	r3, [r3, #0]
 800a848:	3314      	adds	r3, #20
 800a84a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800a84e:	633a      	str	r2, [r7, #48]	@ 0x30
 800a850:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a852:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a854:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a856:	e841 2300 	strex	r3, r2, [r1]
 800a85a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a85c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a85e:	2b00      	cmp	r3, #0
 800a860:	d1e3      	bne.n	800a82a <HAL_UART_IRQHandler+0x472>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	2220      	movs	r2, #32
 800a866:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	2200      	movs	r2, #0
 800a86e:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a870:	687b      	ldr	r3, [r7, #4]
 800a872:	681b      	ldr	r3, [r3, #0]
 800a874:	330c      	adds	r3, #12
 800a876:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a878:	693b      	ldr	r3, [r7, #16]
 800a87a:	e853 3f00 	ldrex	r3, [r3]
 800a87e:	60fb      	str	r3, [r7, #12]
   return(result);
 800a880:	68fb      	ldr	r3, [r7, #12]
 800a882:	f023 0310 	bic.w	r3, r3, #16
 800a886:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800a88a:	687b      	ldr	r3, [r7, #4]
 800a88c:	681b      	ldr	r3, [r3, #0]
 800a88e:	330c      	adds	r3, #12
 800a890:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 800a894:	61fa      	str	r2, [r7, #28]
 800a896:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a898:	69b9      	ldr	r1, [r7, #24]
 800a89a:	69fa      	ldr	r2, [r7, #28]
 800a89c:	e841 2300 	strex	r3, r2, [r1]
 800a8a0:	617b      	str	r3, [r7, #20]
   return(result);
 800a8a2:	697b      	ldr	r3, [r7, #20]
 800a8a4:	2b00      	cmp	r3, #0
 800a8a6:	d1e3      	bne.n	800a870 <HAL_UART_IRQHandler+0x4b8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	2202      	movs	r2, #2
 800a8ac:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800a8ae:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800a8b2:	4619      	mov	r1, r3
 800a8b4:	6878      	ldr	r0, [r7, #4]
 800a8b6:	f000 f83d 	bl	800a934 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800a8ba:	e023      	b.n	800a904 <HAL_UART_IRQHandler+0x54c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800a8bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a8c0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a8c4:	2b00      	cmp	r3, #0
 800a8c6:	d009      	beq.n	800a8dc <HAL_UART_IRQHandler+0x524>
 800a8c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a8cc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a8d0:	2b00      	cmp	r3, #0
 800a8d2:	d003      	beq.n	800a8dc <HAL_UART_IRQHandler+0x524>
  {
    UART_Transmit_IT(huart);
 800a8d4:	6878      	ldr	r0, [r7, #4]
 800a8d6:	f000 f940 	bl	800ab5a <UART_Transmit_IT>
    return;
 800a8da:	e014      	b.n	800a906 <HAL_UART_IRQHandler+0x54e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800a8dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a8e0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a8e4:	2b00      	cmp	r3, #0
 800a8e6:	d00e      	beq.n	800a906 <HAL_UART_IRQHandler+0x54e>
 800a8e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a8ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a8f0:	2b00      	cmp	r3, #0
 800a8f2:	d008      	beq.n	800a906 <HAL_UART_IRQHandler+0x54e>
  {
    UART_EndTransmit_IT(huart);
 800a8f4:	6878      	ldr	r0, [r7, #4]
 800a8f6:	f000 f980 	bl	800abfa <UART_EndTransmit_IT>
    return;
 800a8fa:	e004      	b.n	800a906 <HAL_UART_IRQHandler+0x54e>
    return;
 800a8fc:	bf00      	nop
 800a8fe:	e002      	b.n	800a906 <HAL_UART_IRQHandler+0x54e>
      return;
 800a900:	bf00      	nop
 800a902:	e000      	b.n	800a906 <HAL_UART_IRQHandler+0x54e>
      return;
 800a904:	bf00      	nop
  }
}
 800a906:	37e8      	adds	r7, #232	@ 0xe8
 800a908:	46bd      	mov	sp, r7
 800a90a:	bd80      	pop	{r7, pc}

0800a90c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800a90c:	b480      	push	{r7}
 800a90e:	b083      	sub	sp, #12
 800a910:	af00      	add	r7, sp, #0
 800a912:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800a914:	bf00      	nop
 800a916:	370c      	adds	r7, #12
 800a918:	46bd      	mov	sp, r7
 800a91a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a91e:	4770      	bx	lr

0800a920 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800a920:	b480      	push	{r7}
 800a922:	b083      	sub	sp, #12
 800a924:	af00      	add	r7, sp, #0
 800a926:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800a928:	bf00      	nop
 800a92a:	370c      	adds	r7, #12
 800a92c:	46bd      	mov	sp, r7
 800a92e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a932:	4770      	bx	lr

0800a934 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800a934:	b480      	push	{r7}
 800a936:	b083      	sub	sp, #12
 800a938:	af00      	add	r7, sp, #0
 800a93a:	6078      	str	r0, [r7, #4]
 800a93c:	460b      	mov	r3, r1
 800a93e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800a940:	bf00      	nop
 800a942:	370c      	adds	r7, #12
 800a944:	46bd      	mov	sp, r7
 800a946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a94a:	4770      	bx	lr

0800a94c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800a94c:	b580      	push	{r7, lr}
 800a94e:	b086      	sub	sp, #24
 800a950:	af00      	add	r7, sp, #0
 800a952:	60f8      	str	r0, [r7, #12]
 800a954:	60b9      	str	r1, [r7, #8]
 800a956:	603b      	str	r3, [r7, #0]
 800a958:	4613      	mov	r3, r2
 800a95a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a95c:	e03b      	b.n	800a9d6 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a95e:	6a3b      	ldr	r3, [r7, #32]
 800a960:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a964:	d037      	beq.n	800a9d6 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a966:	f7fa ffc7 	bl	80058f8 <HAL_GetTick>
 800a96a:	4602      	mov	r2, r0
 800a96c:	683b      	ldr	r3, [r7, #0]
 800a96e:	1ad3      	subs	r3, r2, r3
 800a970:	6a3a      	ldr	r2, [r7, #32]
 800a972:	429a      	cmp	r2, r3
 800a974:	d302      	bcc.n	800a97c <UART_WaitOnFlagUntilTimeout+0x30>
 800a976:	6a3b      	ldr	r3, [r7, #32]
 800a978:	2b00      	cmp	r3, #0
 800a97a:	d101      	bne.n	800a980 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800a97c:	2303      	movs	r3, #3
 800a97e:	e03a      	b.n	800a9f6 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800a980:	68fb      	ldr	r3, [r7, #12]
 800a982:	681b      	ldr	r3, [r3, #0]
 800a984:	68db      	ldr	r3, [r3, #12]
 800a986:	f003 0304 	and.w	r3, r3, #4
 800a98a:	2b00      	cmp	r3, #0
 800a98c:	d023      	beq.n	800a9d6 <UART_WaitOnFlagUntilTimeout+0x8a>
 800a98e:	68bb      	ldr	r3, [r7, #8]
 800a990:	2b80      	cmp	r3, #128	@ 0x80
 800a992:	d020      	beq.n	800a9d6 <UART_WaitOnFlagUntilTimeout+0x8a>
 800a994:	68bb      	ldr	r3, [r7, #8]
 800a996:	2b40      	cmp	r3, #64	@ 0x40
 800a998:	d01d      	beq.n	800a9d6 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800a99a:	68fb      	ldr	r3, [r7, #12]
 800a99c:	681b      	ldr	r3, [r3, #0]
 800a99e:	681b      	ldr	r3, [r3, #0]
 800a9a0:	f003 0308 	and.w	r3, r3, #8
 800a9a4:	2b08      	cmp	r3, #8
 800a9a6:	d116      	bne.n	800a9d6 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800a9a8:	2300      	movs	r3, #0
 800a9aa:	617b      	str	r3, [r7, #20]
 800a9ac:	68fb      	ldr	r3, [r7, #12]
 800a9ae:	681b      	ldr	r3, [r3, #0]
 800a9b0:	681b      	ldr	r3, [r3, #0]
 800a9b2:	617b      	str	r3, [r7, #20]
 800a9b4:	68fb      	ldr	r3, [r7, #12]
 800a9b6:	681b      	ldr	r3, [r3, #0]
 800a9b8:	685b      	ldr	r3, [r3, #4]
 800a9ba:	617b      	str	r3, [r7, #20]
 800a9bc:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a9be:	68f8      	ldr	r0, [r7, #12]
 800a9c0:	f000 f857 	bl	800aa72 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800a9c4:	68fb      	ldr	r3, [r7, #12]
 800a9c6:	2208      	movs	r2, #8
 800a9c8:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a9ca:	68fb      	ldr	r3, [r7, #12]
 800a9cc:	2200      	movs	r2, #0
 800a9ce:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800a9d2:	2301      	movs	r3, #1
 800a9d4:	e00f      	b.n	800a9f6 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a9d6:	68fb      	ldr	r3, [r7, #12]
 800a9d8:	681b      	ldr	r3, [r3, #0]
 800a9da:	681a      	ldr	r2, [r3, #0]
 800a9dc:	68bb      	ldr	r3, [r7, #8]
 800a9de:	4013      	ands	r3, r2
 800a9e0:	68ba      	ldr	r2, [r7, #8]
 800a9e2:	429a      	cmp	r2, r3
 800a9e4:	bf0c      	ite	eq
 800a9e6:	2301      	moveq	r3, #1
 800a9e8:	2300      	movne	r3, #0
 800a9ea:	b2db      	uxtb	r3, r3
 800a9ec:	461a      	mov	r2, r3
 800a9ee:	79fb      	ldrb	r3, [r7, #7]
 800a9f0:	429a      	cmp	r2, r3
 800a9f2:	d0b4      	beq.n	800a95e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a9f4:	2300      	movs	r3, #0
}
 800a9f6:	4618      	mov	r0, r3
 800a9f8:	3718      	adds	r7, #24
 800a9fa:	46bd      	mov	sp, r7
 800a9fc:	bd80      	pop	{r7, pc}

0800a9fe <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a9fe:	b480      	push	{r7}
 800aa00:	b085      	sub	sp, #20
 800aa02:	af00      	add	r7, sp, #0
 800aa04:	60f8      	str	r0, [r7, #12]
 800aa06:	60b9      	str	r1, [r7, #8]
 800aa08:	4613      	mov	r3, r2
 800aa0a:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800aa0c:	68fb      	ldr	r3, [r7, #12]
 800aa0e:	68ba      	ldr	r2, [r7, #8]
 800aa10:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 800aa12:	68fb      	ldr	r3, [r7, #12]
 800aa14:	88fa      	ldrh	r2, [r7, #6]
 800aa16:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 800aa18:	68fb      	ldr	r3, [r7, #12]
 800aa1a:	88fa      	ldrh	r2, [r7, #6]
 800aa1c:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800aa1e:	68fb      	ldr	r3, [r7, #12]
 800aa20:	2200      	movs	r2, #0
 800aa22:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800aa24:	68fb      	ldr	r3, [r7, #12]
 800aa26:	2222      	movs	r2, #34	@ 0x22
 800aa28:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 800aa2c:	68fb      	ldr	r3, [r7, #12]
 800aa2e:	691b      	ldr	r3, [r3, #16]
 800aa30:	2b00      	cmp	r3, #0
 800aa32:	d007      	beq.n	800aa44 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800aa34:	68fb      	ldr	r3, [r7, #12]
 800aa36:	681b      	ldr	r3, [r3, #0]
 800aa38:	68da      	ldr	r2, [r3, #12]
 800aa3a:	68fb      	ldr	r3, [r7, #12]
 800aa3c:	681b      	ldr	r3, [r3, #0]
 800aa3e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800aa42:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800aa44:	68fb      	ldr	r3, [r7, #12]
 800aa46:	681b      	ldr	r3, [r3, #0]
 800aa48:	695a      	ldr	r2, [r3, #20]
 800aa4a:	68fb      	ldr	r3, [r7, #12]
 800aa4c:	681b      	ldr	r3, [r3, #0]
 800aa4e:	f042 0201 	orr.w	r2, r2, #1
 800aa52:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800aa54:	68fb      	ldr	r3, [r7, #12]
 800aa56:	681b      	ldr	r3, [r3, #0]
 800aa58:	68da      	ldr	r2, [r3, #12]
 800aa5a:	68fb      	ldr	r3, [r7, #12]
 800aa5c:	681b      	ldr	r3, [r3, #0]
 800aa5e:	f042 0220 	orr.w	r2, r2, #32
 800aa62:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800aa64:	2300      	movs	r3, #0
}
 800aa66:	4618      	mov	r0, r3
 800aa68:	3714      	adds	r7, #20
 800aa6a:	46bd      	mov	sp, r7
 800aa6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa70:	4770      	bx	lr

0800aa72 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800aa72:	b480      	push	{r7}
 800aa74:	b095      	sub	sp, #84	@ 0x54
 800aa76:	af00      	add	r7, sp, #0
 800aa78:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800aa7a:	687b      	ldr	r3, [r7, #4]
 800aa7c:	681b      	ldr	r3, [r3, #0]
 800aa7e:	330c      	adds	r3, #12
 800aa80:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa82:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aa84:	e853 3f00 	ldrex	r3, [r3]
 800aa88:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800aa8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aa8c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800aa90:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800aa92:	687b      	ldr	r3, [r7, #4]
 800aa94:	681b      	ldr	r3, [r3, #0]
 800aa96:	330c      	adds	r3, #12
 800aa98:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800aa9a:	643a      	str	r2, [r7, #64]	@ 0x40
 800aa9c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa9e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800aaa0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800aaa2:	e841 2300 	strex	r3, r2, [r1]
 800aaa6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800aaa8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aaaa:	2b00      	cmp	r3, #0
 800aaac:	d1e5      	bne.n	800aa7a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800aaae:	687b      	ldr	r3, [r7, #4]
 800aab0:	681b      	ldr	r3, [r3, #0]
 800aab2:	3314      	adds	r3, #20
 800aab4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aab6:	6a3b      	ldr	r3, [r7, #32]
 800aab8:	e853 3f00 	ldrex	r3, [r3]
 800aabc:	61fb      	str	r3, [r7, #28]
   return(result);
 800aabe:	69fb      	ldr	r3, [r7, #28]
 800aac0:	f023 0301 	bic.w	r3, r3, #1
 800aac4:	64bb      	str	r3, [r7, #72]	@ 0x48
 800aac6:	687b      	ldr	r3, [r7, #4]
 800aac8:	681b      	ldr	r3, [r3, #0]
 800aaca:	3314      	adds	r3, #20
 800aacc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800aace:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800aad0:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aad2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800aad4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800aad6:	e841 2300 	strex	r3, r2, [r1]
 800aada:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800aadc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aade:	2b00      	cmp	r3, #0
 800aae0:	d1e5      	bne.n	800aaae <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800aae2:	687b      	ldr	r3, [r7, #4]
 800aae4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800aae6:	2b01      	cmp	r3, #1
 800aae8:	d119      	bne.n	800ab1e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800aaea:	687b      	ldr	r3, [r7, #4]
 800aaec:	681b      	ldr	r3, [r3, #0]
 800aaee:	330c      	adds	r3, #12
 800aaf0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aaf2:	68fb      	ldr	r3, [r7, #12]
 800aaf4:	e853 3f00 	ldrex	r3, [r3]
 800aaf8:	60bb      	str	r3, [r7, #8]
   return(result);
 800aafa:	68bb      	ldr	r3, [r7, #8]
 800aafc:	f023 0310 	bic.w	r3, r3, #16
 800ab00:	647b      	str	r3, [r7, #68]	@ 0x44
 800ab02:	687b      	ldr	r3, [r7, #4]
 800ab04:	681b      	ldr	r3, [r3, #0]
 800ab06:	330c      	adds	r3, #12
 800ab08:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800ab0a:	61ba      	str	r2, [r7, #24]
 800ab0c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab0e:	6979      	ldr	r1, [r7, #20]
 800ab10:	69ba      	ldr	r2, [r7, #24]
 800ab12:	e841 2300 	strex	r3, r2, [r1]
 800ab16:	613b      	str	r3, [r7, #16]
   return(result);
 800ab18:	693b      	ldr	r3, [r7, #16]
 800ab1a:	2b00      	cmp	r3, #0
 800ab1c:	d1e5      	bne.n	800aaea <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800ab1e:	687b      	ldr	r3, [r7, #4]
 800ab20:	2220      	movs	r2, #32
 800ab22:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ab26:	687b      	ldr	r3, [r7, #4]
 800ab28:	2200      	movs	r2, #0
 800ab2a:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800ab2c:	bf00      	nop
 800ab2e:	3754      	adds	r7, #84	@ 0x54
 800ab30:	46bd      	mov	sp, r7
 800ab32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab36:	4770      	bx	lr

0800ab38 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800ab38:	b580      	push	{r7, lr}
 800ab3a:	b084      	sub	sp, #16
 800ab3c:	af00      	add	r7, sp, #0
 800ab3e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800ab40:	687b      	ldr	r3, [r7, #4]
 800ab42:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ab44:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800ab46:	68fb      	ldr	r3, [r7, #12]
 800ab48:	2200      	movs	r2, #0
 800ab4a:	85da      	strh	r2, [r3, #46]	@ 0x2e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800ab4c:	68f8      	ldr	r0, [r7, #12]
 800ab4e:	f7ff fee7 	bl	800a920 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ab52:	bf00      	nop
 800ab54:	3710      	adds	r7, #16
 800ab56:	46bd      	mov	sp, r7
 800ab58:	bd80      	pop	{r7, pc}

0800ab5a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800ab5a:	b480      	push	{r7}
 800ab5c:	b085      	sub	sp, #20
 800ab5e:	af00      	add	r7, sp, #0
 800ab60:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800ab62:	687b      	ldr	r3, [r7, #4]
 800ab64:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800ab68:	b2db      	uxtb	r3, r3
 800ab6a:	2b21      	cmp	r3, #33	@ 0x21
 800ab6c:	d13e      	bne.n	800abec <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ab6e:	687b      	ldr	r3, [r7, #4]
 800ab70:	689b      	ldr	r3, [r3, #8]
 800ab72:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800ab76:	d114      	bne.n	800aba2 <UART_Transmit_IT+0x48>
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	691b      	ldr	r3, [r3, #16]
 800ab7c:	2b00      	cmp	r3, #0
 800ab7e:	d110      	bne.n	800aba2 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800ab80:	687b      	ldr	r3, [r7, #4]
 800ab82:	6a1b      	ldr	r3, [r3, #32]
 800ab84:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800ab86:	68fb      	ldr	r3, [r7, #12]
 800ab88:	881b      	ldrh	r3, [r3, #0]
 800ab8a:	461a      	mov	r2, r3
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	681b      	ldr	r3, [r3, #0]
 800ab90:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800ab94:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800ab96:	687b      	ldr	r3, [r7, #4]
 800ab98:	6a1b      	ldr	r3, [r3, #32]
 800ab9a:	1c9a      	adds	r2, r3, #2
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	621a      	str	r2, [r3, #32]
 800aba0:	e008      	b.n	800abb4 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800aba2:	687b      	ldr	r3, [r7, #4]
 800aba4:	6a1b      	ldr	r3, [r3, #32]
 800aba6:	1c59      	adds	r1, r3, #1
 800aba8:	687a      	ldr	r2, [r7, #4]
 800abaa:	6211      	str	r1, [r2, #32]
 800abac:	781a      	ldrb	r2, [r3, #0]
 800abae:	687b      	ldr	r3, [r7, #4]
 800abb0:	681b      	ldr	r3, [r3, #0]
 800abb2:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800abb4:	687b      	ldr	r3, [r7, #4]
 800abb6:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800abb8:	b29b      	uxth	r3, r3
 800abba:	3b01      	subs	r3, #1
 800abbc:	b29b      	uxth	r3, r3
 800abbe:	687a      	ldr	r2, [r7, #4]
 800abc0:	4619      	mov	r1, r3
 800abc2:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800abc4:	2b00      	cmp	r3, #0
 800abc6:	d10f      	bne.n	800abe8 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800abc8:	687b      	ldr	r3, [r7, #4]
 800abca:	681b      	ldr	r3, [r3, #0]
 800abcc:	68da      	ldr	r2, [r3, #12]
 800abce:	687b      	ldr	r3, [r7, #4]
 800abd0:	681b      	ldr	r3, [r3, #0]
 800abd2:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800abd6:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800abd8:	687b      	ldr	r3, [r7, #4]
 800abda:	681b      	ldr	r3, [r3, #0]
 800abdc:	68da      	ldr	r2, [r3, #12]
 800abde:	687b      	ldr	r3, [r7, #4]
 800abe0:	681b      	ldr	r3, [r3, #0]
 800abe2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800abe6:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800abe8:	2300      	movs	r3, #0
 800abea:	e000      	b.n	800abee <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800abec:	2302      	movs	r3, #2
  }
}
 800abee:	4618      	mov	r0, r3
 800abf0:	3714      	adds	r7, #20
 800abf2:	46bd      	mov	sp, r7
 800abf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abf8:	4770      	bx	lr

0800abfa <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800abfa:	b580      	push	{r7, lr}
 800abfc:	b082      	sub	sp, #8
 800abfe:	af00      	add	r7, sp, #0
 800ac00:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800ac02:	687b      	ldr	r3, [r7, #4]
 800ac04:	681b      	ldr	r3, [r3, #0]
 800ac06:	68da      	ldr	r2, [r3, #12]
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	681b      	ldr	r3, [r3, #0]
 800ac0c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800ac10:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800ac12:	687b      	ldr	r3, [r7, #4]
 800ac14:	2220      	movs	r2, #32
 800ac16:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800ac1a:	6878      	ldr	r0, [r7, #4]
 800ac1c:	f7ff fe76 	bl	800a90c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800ac20:	2300      	movs	r3, #0
}
 800ac22:	4618      	mov	r0, r3
 800ac24:	3708      	adds	r7, #8
 800ac26:	46bd      	mov	sp, r7
 800ac28:	bd80      	pop	{r7, pc}

0800ac2a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800ac2a:	b580      	push	{r7, lr}
 800ac2c:	b08c      	sub	sp, #48	@ 0x30
 800ac2e:	af00      	add	r7, sp, #0
 800ac30:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits = NULL;
 800ac32:	2300      	movs	r3, #0
 800ac34:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint16_t *pdata16bits = NULL;
 800ac36:	2300      	movs	r3, #0
 800ac38:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800ac3a:	687b      	ldr	r3, [r7, #4]
 800ac3c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800ac40:	b2db      	uxtb	r3, r3
 800ac42:	2b22      	cmp	r3, #34	@ 0x22
 800ac44:	f040 80aa 	bne.w	800ad9c <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ac48:	687b      	ldr	r3, [r7, #4]
 800ac4a:	689b      	ldr	r3, [r3, #8]
 800ac4c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800ac50:	d115      	bne.n	800ac7e <UART_Receive_IT+0x54>
 800ac52:	687b      	ldr	r3, [r7, #4]
 800ac54:	691b      	ldr	r3, [r3, #16]
 800ac56:	2b00      	cmp	r3, #0
 800ac58:	d111      	bne.n	800ac7e <UART_Receive_IT+0x54>
    {
      /* Unused pdata8bits */
      UNUSED(pdata8bits);
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800ac5a:	687b      	ldr	r3, [r7, #4]
 800ac5c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ac5e:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800ac60:	687b      	ldr	r3, [r7, #4]
 800ac62:	681b      	ldr	r3, [r3, #0]
 800ac64:	685b      	ldr	r3, [r3, #4]
 800ac66:	b29b      	uxth	r3, r3
 800ac68:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ac6c:	b29a      	uxth	r2, r3
 800ac6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ac70:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800ac72:	687b      	ldr	r3, [r7, #4]
 800ac74:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ac76:	1c9a      	adds	r2, r3, #2
 800ac78:	687b      	ldr	r3, [r7, #4]
 800ac7a:	629a      	str	r2, [r3, #40]	@ 0x28
 800ac7c:	e024      	b.n	800acc8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800ac7e:	687b      	ldr	r3, [r7, #4]
 800ac80:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ac82:	62fb      	str	r3, [r7, #44]	@ 0x2c
      /* Unused pdata16bits */
      UNUSED(pdata16bits);

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800ac84:	687b      	ldr	r3, [r7, #4]
 800ac86:	689b      	ldr	r3, [r3, #8]
 800ac88:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800ac8c:	d007      	beq.n	800ac9e <UART_Receive_IT+0x74>
 800ac8e:	687b      	ldr	r3, [r7, #4]
 800ac90:	689b      	ldr	r3, [r3, #8]
 800ac92:	2b00      	cmp	r3, #0
 800ac94:	d10a      	bne.n	800acac <UART_Receive_IT+0x82>
 800ac96:	687b      	ldr	r3, [r7, #4]
 800ac98:	691b      	ldr	r3, [r3, #16]
 800ac9a:	2b00      	cmp	r3, #0
 800ac9c:	d106      	bne.n	800acac <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800ac9e:	687b      	ldr	r3, [r7, #4]
 800aca0:	681b      	ldr	r3, [r3, #0]
 800aca2:	685b      	ldr	r3, [r3, #4]
 800aca4:	b2da      	uxtb	r2, r3
 800aca6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aca8:	701a      	strb	r2, [r3, #0]
 800acaa:	e008      	b.n	800acbe <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800acac:	687b      	ldr	r3, [r7, #4]
 800acae:	681b      	ldr	r3, [r3, #0]
 800acb0:	685b      	ldr	r3, [r3, #4]
 800acb2:	b2db      	uxtb	r3, r3
 800acb4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800acb8:	b2da      	uxtb	r2, r3
 800acba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800acbc:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800acbe:	687b      	ldr	r3, [r7, #4]
 800acc0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800acc2:	1c5a      	adds	r2, r3, #1
 800acc4:	687b      	ldr	r3, [r7, #4]
 800acc6:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800acc8:	687b      	ldr	r3, [r7, #4]
 800acca:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800accc:	b29b      	uxth	r3, r3
 800acce:	3b01      	subs	r3, #1
 800acd0:	b29b      	uxth	r3, r3
 800acd2:	687a      	ldr	r2, [r7, #4]
 800acd4:	4619      	mov	r1, r3
 800acd6:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800acd8:	2b00      	cmp	r3, #0
 800acda:	d15d      	bne.n	800ad98 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800acdc:	687b      	ldr	r3, [r7, #4]
 800acde:	681b      	ldr	r3, [r3, #0]
 800ace0:	68da      	ldr	r2, [r3, #12]
 800ace2:	687b      	ldr	r3, [r7, #4]
 800ace4:	681b      	ldr	r3, [r3, #0]
 800ace6:	f022 0220 	bic.w	r2, r2, #32
 800acea:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800acec:	687b      	ldr	r3, [r7, #4]
 800acee:	681b      	ldr	r3, [r3, #0]
 800acf0:	68da      	ldr	r2, [r3, #12]
 800acf2:	687b      	ldr	r3, [r7, #4]
 800acf4:	681b      	ldr	r3, [r3, #0]
 800acf6:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800acfa:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	681b      	ldr	r3, [r3, #0]
 800ad00:	695a      	ldr	r2, [r3, #20]
 800ad02:	687b      	ldr	r3, [r7, #4]
 800ad04:	681b      	ldr	r3, [r3, #0]
 800ad06:	f022 0201 	bic.w	r2, r2, #1
 800ad0a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800ad0c:	687b      	ldr	r3, [r7, #4]
 800ad0e:	2220      	movs	r2, #32
 800ad10:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800ad14:	687b      	ldr	r3, [r7, #4]
 800ad16:	2200      	movs	r2, #0
 800ad18:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ad1a:	687b      	ldr	r3, [r7, #4]
 800ad1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ad1e:	2b01      	cmp	r3, #1
 800ad20:	d135      	bne.n	800ad8e <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ad22:	687b      	ldr	r3, [r7, #4]
 800ad24:	2200      	movs	r2, #0
 800ad26:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ad28:	687b      	ldr	r3, [r7, #4]
 800ad2a:	681b      	ldr	r3, [r3, #0]
 800ad2c:	330c      	adds	r3, #12
 800ad2e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad30:	697b      	ldr	r3, [r7, #20]
 800ad32:	e853 3f00 	ldrex	r3, [r3]
 800ad36:	613b      	str	r3, [r7, #16]
   return(result);
 800ad38:	693b      	ldr	r3, [r7, #16]
 800ad3a:	f023 0310 	bic.w	r3, r3, #16
 800ad3e:	627b      	str	r3, [r7, #36]	@ 0x24
 800ad40:	687b      	ldr	r3, [r7, #4]
 800ad42:	681b      	ldr	r3, [r3, #0]
 800ad44:	330c      	adds	r3, #12
 800ad46:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ad48:	623a      	str	r2, [r7, #32]
 800ad4a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad4c:	69f9      	ldr	r1, [r7, #28]
 800ad4e:	6a3a      	ldr	r2, [r7, #32]
 800ad50:	e841 2300 	strex	r3, r2, [r1]
 800ad54:	61bb      	str	r3, [r7, #24]
   return(result);
 800ad56:	69bb      	ldr	r3, [r7, #24]
 800ad58:	2b00      	cmp	r3, #0
 800ad5a:	d1e5      	bne.n	800ad28 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800ad5c:	687b      	ldr	r3, [r7, #4]
 800ad5e:	681b      	ldr	r3, [r3, #0]
 800ad60:	681b      	ldr	r3, [r3, #0]
 800ad62:	f003 0310 	and.w	r3, r3, #16
 800ad66:	2b10      	cmp	r3, #16
 800ad68:	d10a      	bne.n	800ad80 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800ad6a:	2300      	movs	r3, #0
 800ad6c:	60fb      	str	r3, [r7, #12]
 800ad6e:	687b      	ldr	r3, [r7, #4]
 800ad70:	681b      	ldr	r3, [r3, #0]
 800ad72:	681b      	ldr	r3, [r3, #0]
 800ad74:	60fb      	str	r3, [r7, #12]
 800ad76:	687b      	ldr	r3, [r7, #4]
 800ad78:	681b      	ldr	r3, [r3, #0]
 800ad7a:	685b      	ldr	r3, [r3, #4]
 800ad7c:	60fb      	str	r3, [r7, #12]
 800ad7e:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800ad80:	687b      	ldr	r3, [r7, #4]
 800ad82:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800ad84:	4619      	mov	r1, r3
 800ad86:	6878      	ldr	r0, [r7, #4]
 800ad88:	f7ff fdd4 	bl	800a934 <HAL_UARTEx_RxEventCallback>
 800ad8c:	e002      	b.n	800ad94 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800ad8e:	6878      	ldr	r0, [r7, #4]
 800ad90:	f7f7 fa6a 	bl	8002268 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800ad94:	2300      	movs	r3, #0
 800ad96:	e002      	b.n	800ad9e <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800ad98:	2300      	movs	r3, #0
 800ad9a:	e000      	b.n	800ad9e <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800ad9c:	2302      	movs	r3, #2
  }
}
 800ad9e:	4618      	mov	r0, r3
 800ada0:	3730      	adds	r7, #48	@ 0x30
 800ada2:	46bd      	mov	sp, r7
 800ada4:	bd80      	pop	{r7, pc}
	...

0800ada8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800ada8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800adac:	b0c0      	sub	sp, #256	@ 0x100
 800adae:	af00      	add	r7, sp, #0
 800adb0:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800adb4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800adb8:	681b      	ldr	r3, [r3, #0]
 800adba:	691b      	ldr	r3, [r3, #16]
 800adbc:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800adc0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800adc4:	68d9      	ldr	r1, [r3, #12]
 800adc6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800adca:	681a      	ldr	r2, [r3, #0]
 800adcc:	ea40 0301 	orr.w	r3, r0, r1
 800add0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800add2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800add6:	689a      	ldr	r2, [r3, #8]
 800add8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800addc:	691b      	ldr	r3, [r3, #16]
 800adde:	431a      	orrs	r2, r3
 800ade0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ade4:	695b      	ldr	r3, [r3, #20]
 800ade6:	431a      	orrs	r2, r3
 800ade8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800adec:	69db      	ldr	r3, [r3, #28]
 800adee:	4313      	orrs	r3, r2
 800adf0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800adf4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800adf8:	681b      	ldr	r3, [r3, #0]
 800adfa:	68db      	ldr	r3, [r3, #12]
 800adfc:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800ae00:	f021 010c 	bic.w	r1, r1, #12
 800ae04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ae08:	681a      	ldr	r2, [r3, #0]
 800ae0a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800ae0e:	430b      	orrs	r3, r1
 800ae10:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800ae12:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ae16:	681b      	ldr	r3, [r3, #0]
 800ae18:	695b      	ldr	r3, [r3, #20]
 800ae1a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800ae1e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ae22:	6999      	ldr	r1, [r3, #24]
 800ae24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ae28:	681a      	ldr	r2, [r3, #0]
 800ae2a:	ea40 0301 	orr.w	r3, r0, r1
 800ae2e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800ae30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ae34:	681a      	ldr	r2, [r3, #0]
 800ae36:	4b8f      	ldr	r3, [pc, #572]	@ (800b074 <UART_SetConfig+0x2cc>)
 800ae38:	429a      	cmp	r2, r3
 800ae3a:	d005      	beq.n	800ae48 <UART_SetConfig+0xa0>
 800ae3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ae40:	681a      	ldr	r2, [r3, #0]
 800ae42:	4b8d      	ldr	r3, [pc, #564]	@ (800b078 <UART_SetConfig+0x2d0>)
 800ae44:	429a      	cmp	r2, r3
 800ae46:	d104      	bne.n	800ae52 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800ae48:	f7fd fb26 	bl	8008498 <HAL_RCC_GetPCLK2Freq>
 800ae4c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800ae50:	e003      	b.n	800ae5a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800ae52:	f7fd fb0d 	bl	8008470 <HAL_RCC_GetPCLK1Freq>
 800ae56:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800ae5a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ae5e:	69db      	ldr	r3, [r3, #28]
 800ae60:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800ae64:	f040 810c 	bne.w	800b080 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800ae68:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800ae6c:	2200      	movs	r2, #0
 800ae6e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800ae72:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800ae76:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800ae7a:	4622      	mov	r2, r4
 800ae7c:	462b      	mov	r3, r5
 800ae7e:	1891      	adds	r1, r2, r2
 800ae80:	65b9      	str	r1, [r7, #88]	@ 0x58
 800ae82:	415b      	adcs	r3, r3
 800ae84:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800ae86:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800ae8a:	4621      	mov	r1, r4
 800ae8c:	eb12 0801 	adds.w	r8, r2, r1
 800ae90:	4629      	mov	r1, r5
 800ae92:	eb43 0901 	adc.w	r9, r3, r1
 800ae96:	f04f 0200 	mov.w	r2, #0
 800ae9a:	f04f 0300 	mov.w	r3, #0
 800ae9e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800aea2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800aea6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800aeaa:	4690      	mov	r8, r2
 800aeac:	4699      	mov	r9, r3
 800aeae:	4623      	mov	r3, r4
 800aeb0:	eb18 0303 	adds.w	r3, r8, r3
 800aeb4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800aeb8:	462b      	mov	r3, r5
 800aeba:	eb49 0303 	adc.w	r3, r9, r3
 800aebe:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800aec2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800aec6:	685b      	ldr	r3, [r3, #4]
 800aec8:	2200      	movs	r2, #0
 800aeca:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800aece:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800aed2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800aed6:	460b      	mov	r3, r1
 800aed8:	18db      	adds	r3, r3, r3
 800aeda:	653b      	str	r3, [r7, #80]	@ 0x50
 800aedc:	4613      	mov	r3, r2
 800aede:	eb42 0303 	adc.w	r3, r2, r3
 800aee2:	657b      	str	r3, [r7, #84]	@ 0x54
 800aee4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800aee8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800aeec:	f7f5 fee4 	bl	8000cb8 <__aeabi_uldivmod>
 800aef0:	4602      	mov	r2, r0
 800aef2:	460b      	mov	r3, r1
 800aef4:	4b61      	ldr	r3, [pc, #388]	@ (800b07c <UART_SetConfig+0x2d4>)
 800aef6:	fba3 2302 	umull	r2, r3, r3, r2
 800aefa:	095b      	lsrs	r3, r3, #5
 800aefc:	011c      	lsls	r4, r3, #4
 800aefe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800af02:	2200      	movs	r2, #0
 800af04:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800af08:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800af0c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800af10:	4642      	mov	r2, r8
 800af12:	464b      	mov	r3, r9
 800af14:	1891      	adds	r1, r2, r2
 800af16:	64b9      	str	r1, [r7, #72]	@ 0x48
 800af18:	415b      	adcs	r3, r3
 800af1a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800af1c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800af20:	4641      	mov	r1, r8
 800af22:	eb12 0a01 	adds.w	sl, r2, r1
 800af26:	4649      	mov	r1, r9
 800af28:	eb43 0b01 	adc.w	fp, r3, r1
 800af2c:	f04f 0200 	mov.w	r2, #0
 800af30:	f04f 0300 	mov.w	r3, #0
 800af34:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800af38:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800af3c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800af40:	4692      	mov	sl, r2
 800af42:	469b      	mov	fp, r3
 800af44:	4643      	mov	r3, r8
 800af46:	eb1a 0303 	adds.w	r3, sl, r3
 800af4a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800af4e:	464b      	mov	r3, r9
 800af50:	eb4b 0303 	adc.w	r3, fp, r3
 800af54:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800af58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800af5c:	685b      	ldr	r3, [r3, #4]
 800af5e:	2200      	movs	r2, #0
 800af60:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800af64:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800af68:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800af6c:	460b      	mov	r3, r1
 800af6e:	18db      	adds	r3, r3, r3
 800af70:	643b      	str	r3, [r7, #64]	@ 0x40
 800af72:	4613      	mov	r3, r2
 800af74:	eb42 0303 	adc.w	r3, r2, r3
 800af78:	647b      	str	r3, [r7, #68]	@ 0x44
 800af7a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800af7e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800af82:	f7f5 fe99 	bl	8000cb8 <__aeabi_uldivmod>
 800af86:	4602      	mov	r2, r0
 800af88:	460b      	mov	r3, r1
 800af8a:	4611      	mov	r1, r2
 800af8c:	4b3b      	ldr	r3, [pc, #236]	@ (800b07c <UART_SetConfig+0x2d4>)
 800af8e:	fba3 2301 	umull	r2, r3, r3, r1
 800af92:	095b      	lsrs	r3, r3, #5
 800af94:	2264      	movs	r2, #100	@ 0x64
 800af96:	fb02 f303 	mul.w	r3, r2, r3
 800af9a:	1acb      	subs	r3, r1, r3
 800af9c:	00db      	lsls	r3, r3, #3
 800af9e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800afa2:	4b36      	ldr	r3, [pc, #216]	@ (800b07c <UART_SetConfig+0x2d4>)
 800afa4:	fba3 2302 	umull	r2, r3, r3, r2
 800afa8:	095b      	lsrs	r3, r3, #5
 800afaa:	005b      	lsls	r3, r3, #1
 800afac:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800afb0:	441c      	add	r4, r3
 800afb2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800afb6:	2200      	movs	r2, #0
 800afb8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800afbc:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800afc0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800afc4:	4642      	mov	r2, r8
 800afc6:	464b      	mov	r3, r9
 800afc8:	1891      	adds	r1, r2, r2
 800afca:	63b9      	str	r1, [r7, #56]	@ 0x38
 800afcc:	415b      	adcs	r3, r3
 800afce:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800afd0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800afd4:	4641      	mov	r1, r8
 800afd6:	1851      	adds	r1, r2, r1
 800afd8:	6339      	str	r1, [r7, #48]	@ 0x30
 800afda:	4649      	mov	r1, r9
 800afdc:	414b      	adcs	r3, r1
 800afde:	637b      	str	r3, [r7, #52]	@ 0x34
 800afe0:	f04f 0200 	mov.w	r2, #0
 800afe4:	f04f 0300 	mov.w	r3, #0
 800afe8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800afec:	4659      	mov	r1, fp
 800afee:	00cb      	lsls	r3, r1, #3
 800aff0:	4651      	mov	r1, sl
 800aff2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800aff6:	4651      	mov	r1, sl
 800aff8:	00ca      	lsls	r2, r1, #3
 800affa:	4610      	mov	r0, r2
 800affc:	4619      	mov	r1, r3
 800affe:	4603      	mov	r3, r0
 800b000:	4642      	mov	r2, r8
 800b002:	189b      	adds	r3, r3, r2
 800b004:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800b008:	464b      	mov	r3, r9
 800b00a:	460a      	mov	r2, r1
 800b00c:	eb42 0303 	adc.w	r3, r2, r3
 800b010:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800b014:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b018:	685b      	ldr	r3, [r3, #4]
 800b01a:	2200      	movs	r2, #0
 800b01c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800b020:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800b024:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800b028:	460b      	mov	r3, r1
 800b02a:	18db      	adds	r3, r3, r3
 800b02c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800b02e:	4613      	mov	r3, r2
 800b030:	eb42 0303 	adc.w	r3, r2, r3
 800b034:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800b036:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800b03a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800b03e:	f7f5 fe3b 	bl	8000cb8 <__aeabi_uldivmod>
 800b042:	4602      	mov	r2, r0
 800b044:	460b      	mov	r3, r1
 800b046:	4b0d      	ldr	r3, [pc, #52]	@ (800b07c <UART_SetConfig+0x2d4>)
 800b048:	fba3 1302 	umull	r1, r3, r3, r2
 800b04c:	095b      	lsrs	r3, r3, #5
 800b04e:	2164      	movs	r1, #100	@ 0x64
 800b050:	fb01 f303 	mul.w	r3, r1, r3
 800b054:	1ad3      	subs	r3, r2, r3
 800b056:	00db      	lsls	r3, r3, #3
 800b058:	3332      	adds	r3, #50	@ 0x32
 800b05a:	4a08      	ldr	r2, [pc, #32]	@ (800b07c <UART_SetConfig+0x2d4>)
 800b05c:	fba2 2303 	umull	r2, r3, r2, r3
 800b060:	095b      	lsrs	r3, r3, #5
 800b062:	f003 0207 	and.w	r2, r3, #7
 800b066:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b06a:	681b      	ldr	r3, [r3, #0]
 800b06c:	4422      	add	r2, r4
 800b06e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800b070:	e106      	b.n	800b280 <UART_SetConfig+0x4d8>
 800b072:	bf00      	nop
 800b074:	40011000 	.word	0x40011000
 800b078:	40011400 	.word	0x40011400
 800b07c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800b080:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800b084:	2200      	movs	r2, #0
 800b086:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800b08a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800b08e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800b092:	4642      	mov	r2, r8
 800b094:	464b      	mov	r3, r9
 800b096:	1891      	adds	r1, r2, r2
 800b098:	6239      	str	r1, [r7, #32]
 800b09a:	415b      	adcs	r3, r3
 800b09c:	627b      	str	r3, [r7, #36]	@ 0x24
 800b09e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800b0a2:	4641      	mov	r1, r8
 800b0a4:	1854      	adds	r4, r2, r1
 800b0a6:	4649      	mov	r1, r9
 800b0a8:	eb43 0501 	adc.w	r5, r3, r1
 800b0ac:	f04f 0200 	mov.w	r2, #0
 800b0b0:	f04f 0300 	mov.w	r3, #0
 800b0b4:	00eb      	lsls	r3, r5, #3
 800b0b6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800b0ba:	00e2      	lsls	r2, r4, #3
 800b0bc:	4614      	mov	r4, r2
 800b0be:	461d      	mov	r5, r3
 800b0c0:	4643      	mov	r3, r8
 800b0c2:	18e3      	adds	r3, r4, r3
 800b0c4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800b0c8:	464b      	mov	r3, r9
 800b0ca:	eb45 0303 	adc.w	r3, r5, r3
 800b0ce:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800b0d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b0d6:	685b      	ldr	r3, [r3, #4]
 800b0d8:	2200      	movs	r2, #0
 800b0da:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800b0de:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800b0e2:	f04f 0200 	mov.w	r2, #0
 800b0e6:	f04f 0300 	mov.w	r3, #0
 800b0ea:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800b0ee:	4629      	mov	r1, r5
 800b0f0:	008b      	lsls	r3, r1, #2
 800b0f2:	4621      	mov	r1, r4
 800b0f4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800b0f8:	4621      	mov	r1, r4
 800b0fa:	008a      	lsls	r2, r1, #2
 800b0fc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800b100:	f7f5 fdda 	bl	8000cb8 <__aeabi_uldivmod>
 800b104:	4602      	mov	r2, r0
 800b106:	460b      	mov	r3, r1
 800b108:	4b60      	ldr	r3, [pc, #384]	@ (800b28c <UART_SetConfig+0x4e4>)
 800b10a:	fba3 2302 	umull	r2, r3, r3, r2
 800b10e:	095b      	lsrs	r3, r3, #5
 800b110:	011c      	lsls	r4, r3, #4
 800b112:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800b116:	2200      	movs	r2, #0
 800b118:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800b11c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800b120:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800b124:	4642      	mov	r2, r8
 800b126:	464b      	mov	r3, r9
 800b128:	1891      	adds	r1, r2, r2
 800b12a:	61b9      	str	r1, [r7, #24]
 800b12c:	415b      	adcs	r3, r3
 800b12e:	61fb      	str	r3, [r7, #28]
 800b130:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800b134:	4641      	mov	r1, r8
 800b136:	1851      	adds	r1, r2, r1
 800b138:	6139      	str	r1, [r7, #16]
 800b13a:	4649      	mov	r1, r9
 800b13c:	414b      	adcs	r3, r1
 800b13e:	617b      	str	r3, [r7, #20]
 800b140:	f04f 0200 	mov.w	r2, #0
 800b144:	f04f 0300 	mov.w	r3, #0
 800b148:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800b14c:	4659      	mov	r1, fp
 800b14e:	00cb      	lsls	r3, r1, #3
 800b150:	4651      	mov	r1, sl
 800b152:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800b156:	4651      	mov	r1, sl
 800b158:	00ca      	lsls	r2, r1, #3
 800b15a:	4610      	mov	r0, r2
 800b15c:	4619      	mov	r1, r3
 800b15e:	4603      	mov	r3, r0
 800b160:	4642      	mov	r2, r8
 800b162:	189b      	adds	r3, r3, r2
 800b164:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800b168:	464b      	mov	r3, r9
 800b16a:	460a      	mov	r2, r1
 800b16c:	eb42 0303 	adc.w	r3, r2, r3
 800b170:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800b174:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b178:	685b      	ldr	r3, [r3, #4]
 800b17a:	2200      	movs	r2, #0
 800b17c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800b17e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800b180:	f04f 0200 	mov.w	r2, #0
 800b184:	f04f 0300 	mov.w	r3, #0
 800b188:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800b18c:	4649      	mov	r1, r9
 800b18e:	008b      	lsls	r3, r1, #2
 800b190:	4641      	mov	r1, r8
 800b192:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800b196:	4641      	mov	r1, r8
 800b198:	008a      	lsls	r2, r1, #2
 800b19a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800b19e:	f7f5 fd8b 	bl	8000cb8 <__aeabi_uldivmod>
 800b1a2:	4602      	mov	r2, r0
 800b1a4:	460b      	mov	r3, r1
 800b1a6:	4611      	mov	r1, r2
 800b1a8:	4b38      	ldr	r3, [pc, #224]	@ (800b28c <UART_SetConfig+0x4e4>)
 800b1aa:	fba3 2301 	umull	r2, r3, r3, r1
 800b1ae:	095b      	lsrs	r3, r3, #5
 800b1b0:	2264      	movs	r2, #100	@ 0x64
 800b1b2:	fb02 f303 	mul.w	r3, r2, r3
 800b1b6:	1acb      	subs	r3, r1, r3
 800b1b8:	011b      	lsls	r3, r3, #4
 800b1ba:	3332      	adds	r3, #50	@ 0x32
 800b1bc:	4a33      	ldr	r2, [pc, #204]	@ (800b28c <UART_SetConfig+0x4e4>)
 800b1be:	fba2 2303 	umull	r2, r3, r2, r3
 800b1c2:	095b      	lsrs	r3, r3, #5
 800b1c4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800b1c8:	441c      	add	r4, r3
 800b1ca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800b1ce:	2200      	movs	r2, #0
 800b1d0:	673b      	str	r3, [r7, #112]	@ 0x70
 800b1d2:	677a      	str	r2, [r7, #116]	@ 0x74
 800b1d4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800b1d8:	4642      	mov	r2, r8
 800b1da:	464b      	mov	r3, r9
 800b1dc:	1891      	adds	r1, r2, r2
 800b1de:	60b9      	str	r1, [r7, #8]
 800b1e0:	415b      	adcs	r3, r3
 800b1e2:	60fb      	str	r3, [r7, #12]
 800b1e4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800b1e8:	4641      	mov	r1, r8
 800b1ea:	1851      	adds	r1, r2, r1
 800b1ec:	6039      	str	r1, [r7, #0]
 800b1ee:	4649      	mov	r1, r9
 800b1f0:	414b      	adcs	r3, r1
 800b1f2:	607b      	str	r3, [r7, #4]
 800b1f4:	f04f 0200 	mov.w	r2, #0
 800b1f8:	f04f 0300 	mov.w	r3, #0
 800b1fc:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800b200:	4659      	mov	r1, fp
 800b202:	00cb      	lsls	r3, r1, #3
 800b204:	4651      	mov	r1, sl
 800b206:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800b20a:	4651      	mov	r1, sl
 800b20c:	00ca      	lsls	r2, r1, #3
 800b20e:	4610      	mov	r0, r2
 800b210:	4619      	mov	r1, r3
 800b212:	4603      	mov	r3, r0
 800b214:	4642      	mov	r2, r8
 800b216:	189b      	adds	r3, r3, r2
 800b218:	66bb      	str	r3, [r7, #104]	@ 0x68
 800b21a:	464b      	mov	r3, r9
 800b21c:	460a      	mov	r2, r1
 800b21e:	eb42 0303 	adc.w	r3, r2, r3
 800b222:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800b224:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b228:	685b      	ldr	r3, [r3, #4]
 800b22a:	2200      	movs	r2, #0
 800b22c:	663b      	str	r3, [r7, #96]	@ 0x60
 800b22e:	667a      	str	r2, [r7, #100]	@ 0x64
 800b230:	f04f 0200 	mov.w	r2, #0
 800b234:	f04f 0300 	mov.w	r3, #0
 800b238:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800b23c:	4649      	mov	r1, r9
 800b23e:	008b      	lsls	r3, r1, #2
 800b240:	4641      	mov	r1, r8
 800b242:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800b246:	4641      	mov	r1, r8
 800b248:	008a      	lsls	r2, r1, #2
 800b24a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800b24e:	f7f5 fd33 	bl	8000cb8 <__aeabi_uldivmod>
 800b252:	4602      	mov	r2, r0
 800b254:	460b      	mov	r3, r1
 800b256:	4b0d      	ldr	r3, [pc, #52]	@ (800b28c <UART_SetConfig+0x4e4>)
 800b258:	fba3 1302 	umull	r1, r3, r3, r2
 800b25c:	095b      	lsrs	r3, r3, #5
 800b25e:	2164      	movs	r1, #100	@ 0x64
 800b260:	fb01 f303 	mul.w	r3, r1, r3
 800b264:	1ad3      	subs	r3, r2, r3
 800b266:	011b      	lsls	r3, r3, #4
 800b268:	3332      	adds	r3, #50	@ 0x32
 800b26a:	4a08      	ldr	r2, [pc, #32]	@ (800b28c <UART_SetConfig+0x4e4>)
 800b26c:	fba2 2303 	umull	r2, r3, r2, r3
 800b270:	095b      	lsrs	r3, r3, #5
 800b272:	f003 020f 	and.w	r2, r3, #15
 800b276:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b27a:	681b      	ldr	r3, [r3, #0]
 800b27c:	4422      	add	r2, r4
 800b27e:	609a      	str	r2, [r3, #8]
}
 800b280:	bf00      	nop
 800b282:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800b286:	46bd      	mov	sp, r7
 800b288:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800b28c:	51eb851f 	.word	0x51eb851f

0800b290 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800b290:	b580      	push	{r7, lr}
 800b292:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 800b294:	4904      	ldr	r1, [pc, #16]	@ (800b2a8 <MX_FATFS_Init+0x18>)
 800b296:	4805      	ldr	r0, [pc, #20]	@ (800b2ac <MX_FATFS_Init+0x1c>)
 800b298:	f003 feb0 	bl	800effc <FATFS_LinkDriver>
 800b29c:	4603      	mov	r3, r0
 800b29e:	461a      	mov	r2, r3
 800b2a0:	4b03      	ldr	r3, [pc, #12]	@ (800b2b0 <MX_FATFS_Init+0x20>)
 800b2a2:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800b2a4:	bf00      	nop
 800b2a6:	bd80      	pop	{r7, pc}
 800b2a8:	200161a8 	.word	0x200161a8
 800b2ac:	2000d120 	.word	0x2000d120
 800b2b0:	200161a4 	.word	0x200161a4

0800b2b4 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800b2b4:	b480      	push	{r7}
 800b2b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800b2b8:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800b2ba:	4618      	mov	r0, r3
 800b2bc:	46bd      	mov	sp, r7
 800b2be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2c2:	4770      	bx	lr

0800b2c4 <SELECT>:
 * SPI functions
 **************************************/

/* slave select */
static void SELECT(void)
{
 800b2c4:	b580      	push	{r7, lr}
 800b2c6:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_RESET);
 800b2c8:	2200      	movs	r2, #0
 800b2ca:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800b2ce:	4804      	ldr	r0, [pc, #16]	@ (800b2e0 <SELECT+0x1c>)
 800b2d0:	f7fb fe64 	bl	8006f9c <HAL_GPIO_WritePin>
    HAL_Delay(1);
 800b2d4:	2001      	movs	r0, #1
 800b2d6:	f7fa fb1b 	bl	8005910 <HAL_Delay>
}
 800b2da:	bf00      	nop
 800b2dc:	bd80      	pop	{r7, pc}
 800b2de:	bf00      	nop
 800b2e0:	40020400 	.word	0x40020400

0800b2e4 <DESELECT>:

/* slave deselect */
static void DESELECT(void)
{
 800b2e4:	b580      	push	{r7, lr}
 800b2e6:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_SET);
 800b2e8:	2201      	movs	r2, #1
 800b2ea:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800b2ee:	4804      	ldr	r0, [pc, #16]	@ (800b300 <DESELECT+0x1c>)
 800b2f0:	f7fb fe54 	bl	8006f9c <HAL_GPIO_WritePin>
    HAL_Delay(1);
 800b2f4:	2001      	movs	r0, #1
 800b2f6:	f7fa fb0b 	bl	8005910 <HAL_Delay>
}
 800b2fa:	bf00      	nop
 800b2fc:	bd80      	pop	{r7, pc}
 800b2fe:	bf00      	nop
 800b300:	40020400 	.word	0x40020400

0800b304 <SPI_TxByte>:

/* SPI transmit a byte */
static void SPI_TxByte(uint8_t data)
{
 800b304:	b580      	push	{r7, lr}
 800b306:	b082      	sub	sp, #8
 800b308:	af00      	add	r7, sp, #0
 800b30a:	4603      	mov	r3, r0
 800b30c:	71fb      	strb	r3, [r7, #7]
    while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 800b30e:	bf00      	nop
 800b310:	4b08      	ldr	r3, [pc, #32]	@ (800b334 <SPI_TxByte+0x30>)
 800b312:	681b      	ldr	r3, [r3, #0]
 800b314:	689b      	ldr	r3, [r3, #8]
 800b316:	f003 0302 	and.w	r3, r3, #2
 800b31a:	2b02      	cmp	r3, #2
 800b31c:	d1f8      	bne.n	800b310 <SPI_TxByte+0xc>
    HAL_SPI_Transmit(HSPI_SDCARD, &data, 1, SPI_TIMEOUT);
 800b31e:	1df9      	adds	r1, r7, #7
 800b320:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800b324:	2201      	movs	r2, #1
 800b326:	4803      	ldr	r0, [pc, #12]	@ (800b334 <SPI_TxByte+0x30>)
 800b328:	f7fd faa5 	bl	8008876 <HAL_SPI_Transmit>
}
 800b32c:	bf00      	nop
 800b32e:	3708      	adds	r7, #8
 800b330:	46bd      	mov	sp, r7
 800b332:	bd80      	pop	{r7, pc}
 800b334:	20015f4c 	.word	0x20015f4c

0800b338 <SPI_TxBuffer>:

/* SPI transmit buffer */
static void SPI_TxBuffer(uint8_t *buffer, uint16_t len)
{
 800b338:	b580      	push	{r7, lr}
 800b33a:	b082      	sub	sp, #8
 800b33c:	af00      	add	r7, sp, #0
 800b33e:	6078      	str	r0, [r7, #4]
 800b340:	460b      	mov	r3, r1
 800b342:	807b      	strh	r3, [r7, #2]
    while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 800b344:	bf00      	nop
 800b346:	4b09      	ldr	r3, [pc, #36]	@ (800b36c <SPI_TxBuffer+0x34>)
 800b348:	681b      	ldr	r3, [r3, #0]
 800b34a:	689b      	ldr	r3, [r3, #8]
 800b34c:	f003 0302 	and.w	r3, r3, #2
 800b350:	2b02      	cmp	r3, #2
 800b352:	d1f8      	bne.n	800b346 <SPI_TxBuffer+0xe>
    HAL_SPI_Transmit(HSPI_SDCARD, buffer, len, SPI_TIMEOUT);
 800b354:	887a      	ldrh	r2, [r7, #2]
 800b356:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800b35a:	6879      	ldr	r1, [r7, #4]
 800b35c:	4803      	ldr	r0, [pc, #12]	@ (800b36c <SPI_TxBuffer+0x34>)
 800b35e:	f7fd fa8a 	bl	8008876 <HAL_SPI_Transmit>
}
 800b362:	bf00      	nop
 800b364:	3708      	adds	r7, #8
 800b366:	46bd      	mov	sp, r7
 800b368:	bd80      	pop	{r7, pc}
 800b36a:	bf00      	nop
 800b36c:	20015f4c 	.word	0x20015f4c

0800b370 <SPI_RxByte>:

/* SPI receive a byte */
static uint8_t SPI_RxByte(void)
{
 800b370:	b580      	push	{r7, lr}
 800b372:	b084      	sub	sp, #16
 800b374:	af02      	add	r7, sp, #8
    uint8_t dummy, data;
    dummy = 0xFF;
 800b376:	23ff      	movs	r3, #255	@ 0xff
 800b378:	71fb      	strb	r3, [r7, #7]

    while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 800b37a:	bf00      	nop
 800b37c:	4b0a      	ldr	r3, [pc, #40]	@ (800b3a8 <SPI_RxByte+0x38>)
 800b37e:	681b      	ldr	r3, [r3, #0]
 800b380:	689b      	ldr	r3, [r3, #8]
 800b382:	f003 0302 	and.w	r3, r3, #2
 800b386:	2b02      	cmp	r3, #2
 800b388:	d1f8      	bne.n	800b37c <SPI_RxByte+0xc>
    HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 800b38a:	1dba      	adds	r2, r7, #6
 800b38c:	1df9      	adds	r1, r7, #7
 800b38e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800b392:	9300      	str	r3, [sp, #0]
 800b394:	2301      	movs	r3, #1
 800b396:	4804      	ldr	r0, [pc, #16]	@ (800b3a8 <SPI_RxByte+0x38>)
 800b398:	f7fd fbb1 	bl	8008afe <HAL_SPI_TransmitReceive>

    return data;
 800b39c:	79bb      	ldrb	r3, [r7, #6]
}
 800b39e:	4618      	mov	r0, r3
 800b3a0:	3708      	adds	r7, #8
 800b3a2:	46bd      	mov	sp, r7
 800b3a4:	bd80      	pop	{r7, pc}
 800b3a6:	bf00      	nop
 800b3a8:	20015f4c 	.word	0x20015f4c

0800b3ac <SPI_RxBytePtr>:

/* SPI receive a byte via pointer */
static void SPI_RxBytePtr(uint8_t *buff) 
{
 800b3ac:	b580      	push	{r7, lr}
 800b3ae:	b082      	sub	sp, #8
 800b3b0:	af00      	add	r7, sp, #0
 800b3b2:	6078      	str	r0, [r7, #4]
    *buff = SPI_RxByte();
 800b3b4:	f7ff ffdc 	bl	800b370 <SPI_RxByte>
 800b3b8:	4603      	mov	r3, r0
 800b3ba:	461a      	mov	r2, r3
 800b3bc:	687b      	ldr	r3, [r7, #4]
 800b3be:	701a      	strb	r2, [r3, #0]
}
 800b3c0:	bf00      	nop
 800b3c2:	3708      	adds	r7, #8
 800b3c4:	46bd      	mov	sp, r7
 800b3c6:	bd80      	pop	{r7, pc}

0800b3c8 <SD_ReadyWait>:
 * SD functions
 **************************************/

/* wait SD ready */
static uint8_t SD_ReadyWait(void)
{
 800b3c8:	b580      	push	{r7, lr}
 800b3ca:	b082      	sub	sp, #8
 800b3cc:	af00      	add	r7, sp, #0
    uint8_t res;

    /* timeout 500ms */
    Timer2 = 500;
 800b3ce:	4b0a      	ldr	r3, [pc, #40]	@ (800b3f8 <SD_ReadyWait+0x30>)
 800b3d0:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 800b3d4:	801a      	strh	r2, [r3, #0]

    /* if SD goes ready, receives 0xFF */
    do {
        res = SPI_RxByte();
 800b3d6:	f7ff ffcb 	bl	800b370 <SPI_RxByte>
 800b3da:	4603      	mov	r3, r0
 800b3dc:	71fb      	strb	r3, [r7, #7]
    } while ((res != 0xFF) && Timer2);
 800b3de:	79fb      	ldrb	r3, [r7, #7]
 800b3e0:	2bff      	cmp	r3, #255	@ 0xff
 800b3e2:	d004      	beq.n	800b3ee <SD_ReadyWait+0x26>
 800b3e4:	4b04      	ldr	r3, [pc, #16]	@ (800b3f8 <SD_ReadyWait+0x30>)
 800b3e6:	881b      	ldrh	r3, [r3, #0]
 800b3e8:	b29b      	uxth	r3, r3
 800b3ea:	2b00      	cmp	r3, #0
 800b3ec:	d1f3      	bne.n	800b3d6 <SD_ReadyWait+0xe>

    return res;
 800b3ee:	79fb      	ldrb	r3, [r7, #7]
}
 800b3f0:	4618      	mov	r0, r3
 800b3f2:	3708      	adds	r7, #8
 800b3f4:	46bd      	mov	sp, r7
 800b3f6:	bd80      	pop	{r7, pc}
 800b3f8:	200161ae 	.word	0x200161ae

0800b3fc <SD_PowerOn>:

/* power on */
static void SD_PowerOn(void) 
{
 800b3fc:	b580      	push	{r7, lr}
 800b3fe:	b084      	sub	sp, #16
 800b400:	af00      	add	r7, sp, #0
    uint8_t args[6];
    uint32_t cnt = 0x1FFF;
 800b402:	f641 73ff 	movw	r3, #8191	@ 0x1fff
 800b406:	60fb      	str	r3, [r7, #12]

    /* transmit bytes to wake up */
    DESELECT();
 800b408:	f7ff ff6c 	bl	800b2e4 <DESELECT>
    for(int i = 0; i < 10; i++)
 800b40c:	2300      	movs	r3, #0
 800b40e:	60bb      	str	r3, [r7, #8]
 800b410:	e005      	b.n	800b41e <SD_PowerOn+0x22>
    {
        SPI_TxByte(0xFF);
 800b412:	20ff      	movs	r0, #255	@ 0xff
 800b414:	f7ff ff76 	bl	800b304 <SPI_TxByte>
    for(int i = 0; i < 10; i++)
 800b418:	68bb      	ldr	r3, [r7, #8]
 800b41a:	3301      	adds	r3, #1
 800b41c:	60bb      	str	r3, [r7, #8]
 800b41e:	68bb      	ldr	r3, [r7, #8]
 800b420:	2b09      	cmp	r3, #9
 800b422:	ddf6      	ble.n	800b412 <SD_PowerOn+0x16>
    }

    /* slave select */
    SELECT();
 800b424:	f7ff ff4e 	bl	800b2c4 <SELECT>

    /* make idle state */
    args[0] = CMD0;     /* CMD0:GO_IDLE_STATE */
 800b428:	2340      	movs	r3, #64	@ 0x40
 800b42a:	703b      	strb	r3, [r7, #0]
    args[1] = 0;
 800b42c:	2300      	movs	r3, #0
 800b42e:	707b      	strb	r3, [r7, #1]
    args[2] = 0;
 800b430:	2300      	movs	r3, #0
 800b432:	70bb      	strb	r3, [r7, #2]
    args[3] = 0;
 800b434:	2300      	movs	r3, #0
 800b436:	70fb      	strb	r3, [r7, #3]
    args[4] = 0;
 800b438:	2300      	movs	r3, #0
 800b43a:	713b      	strb	r3, [r7, #4]
    args[5] = 0x95;     /* CRC */
 800b43c:	2395      	movs	r3, #149	@ 0x95
 800b43e:	717b      	strb	r3, [r7, #5]

    SPI_TxBuffer(args, sizeof(args));
 800b440:	463b      	mov	r3, r7
 800b442:	2106      	movs	r1, #6
 800b444:	4618      	mov	r0, r3
 800b446:	f7ff ff77 	bl	800b338 <SPI_TxBuffer>

    /* wait response */
    while ((SPI_RxByte() != 0x01) && cnt)
 800b44a:	e002      	b.n	800b452 <SD_PowerOn+0x56>
    {
        cnt--;
 800b44c:	68fb      	ldr	r3, [r7, #12]
 800b44e:	3b01      	subs	r3, #1
 800b450:	60fb      	str	r3, [r7, #12]
    while ((SPI_RxByte() != 0x01) && cnt)
 800b452:	f7ff ff8d 	bl	800b370 <SPI_RxByte>
 800b456:	4603      	mov	r3, r0
 800b458:	2b01      	cmp	r3, #1
 800b45a:	d002      	beq.n	800b462 <SD_PowerOn+0x66>
 800b45c:	68fb      	ldr	r3, [r7, #12]
 800b45e:	2b00      	cmp	r3, #0
 800b460:	d1f4      	bne.n	800b44c <SD_PowerOn+0x50>
    }

    DESELECT();
 800b462:	f7ff ff3f 	bl	800b2e4 <DESELECT>
    SPI_TxByte(0XFF);
 800b466:	20ff      	movs	r0, #255	@ 0xff
 800b468:	f7ff ff4c 	bl	800b304 <SPI_TxByte>

    PowerFlag = 1;
 800b46c:	4b03      	ldr	r3, [pc, #12]	@ (800b47c <SD_PowerOn+0x80>)
 800b46e:	2201      	movs	r2, #1
 800b470:	701a      	strb	r2, [r3, #0]
}
 800b472:	bf00      	nop
 800b474:	3710      	adds	r7, #16
 800b476:	46bd      	mov	sp, r7
 800b478:	bd80      	pop	{r7, pc}
 800b47a:	bf00      	nop
 800b47c:	200161b1 	.word	0x200161b1

0800b480 <SD_PowerOff>:

/* power off */
static void SD_PowerOff(void) 
{
 800b480:	b480      	push	{r7}
 800b482:	af00      	add	r7, sp, #0
    PowerFlag = 0;
 800b484:	4b03      	ldr	r3, [pc, #12]	@ (800b494 <SD_PowerOff+0x14>)
 800b486:	2200      	movs	r2, #0
 800b488:	701a      	strb	r2, [r3, #0]
}
 800b48a:	bf00      	nop
 800b48c:	46bd      	mov	sp, r7
 800b48e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b492:	4770      	bx	lr
 800b494:	200161b1 	.word	0x200161b1

0800b498 <SD_CheckPower>:

/* check power flag */
static uint8_t SD_CheckPower(void) 
{
 800b498:	b480      	push	{r7}
 800b49a:	af00      	add	r7, sp, #0
    return PowerFlag;
 800b49c:	4b03      	ldr	r3, [pc, #12]	@ (800b4ac <SD_CheckPower+0x14>)
 800b49e:	781b      	ldrb	r3, [r3, #0]
}
 800b4a0:	4618      	mov	r0, r3
 800b4a2:	46bd      	mov	sp, r7
 800b4a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4a8:	4770      	bx	lr
 800b4aa:	bf00      	nop
 800b4ac:	200161b1 	.word	0x200161b1

0800b4b0 <SD_RxDataBlock>:

/* receive data block */
static bool SD_RxDataBlock(BYTE *buff, UINT len)
{
 800b4b0:	b580      	push	{r7, lr}
 800b4b2:	b084      	sub	sp, #16
 800b4b4:	af00      	add	r7, sp, #0
 800b4b6:	6078      	str	r0, [r7, #4]
 800b4b8:	6039      	str	r1, [r7, #0]
    uint8_t token;

    /* timeout 200ms */
    Timer1 = 200;
 800b4ba:	4b14      	ldr	r3, [pc, #80]	@ (800b50c <SD_RxDataBlock+0x5c>)
 800b4bc:	22c8      	movs	r2, #200	@ 0xc8
 800b4be:	801a      	strh	r2, [r3, #0]

    /* loop until receive a response or timeout */
    do {
        token = SPI_RxByte();
 800b4c0:	f7ff ff56 	bl	800b370 <SPI_RxByte>
 800b4c4:	4603      	mov	r3, r0
 800b4c6:	73fb      	strb	r3, [r7, #15]
    } while((token == 0xFF) && Timer1);
 800b4c8:	7bfb      	ldrb	r3, [r7, #15]
 800b4ca:	2bff      	cmp	r3, #255	@ 0xff
 800b4cc:	d104      	bne.n	800b4d8 <SD_RxDataBlock+0x28>
 800b4ce:	4b0f      	ldr	r3, [pc, #60]	@ (800b50c <SD_RxDataBlock+0x5c>)
 800b4d0:	881b      	ldrh	r3, [r3, #0]
 800b4d2:	b29b      	uxth	r3, r3
 800b4d4:	2b00      	cmp	r3, #0
 800b4d6:	d1f3      	bne.n	800b4c0 <SD_RxDataBlock+0x10>

    /* invalid response */
    if(token != 0xFE) return FALSE;
 800b4d8:	7bfb      	ldrb	r3, [r7, #15]
 800b4da:	2bfe      	cmp	r3, #254	@ 0xfe
 800b4dc:	d007      	beq.n	800b4ee <SD_RxDataBlock+0x3e>
 800b4de:	2300      	movs	r3, #0
 800b4e0:	e00f      	b.n	800b502 <SD_RxDataBlock+0x52>
    /* receive data */
    // FIX 2: do-while(len--) 루프 수정
    // 기존 코드는 len+1 만큼 실행되어 버퍼 오버플로우를 유발할 수 있습니다.
    // while(len--) 형태로 변경하여 정확히 len 만큼만 실행되도록 합니다.
    while(len--) {
        SPI_RxBytePtr(buff++);
 800b4e2:	687b      	ldr	r3, [r7, #4]
 800b4e4:	1c5a      	adds	r2, r3, #1
 800b4e6:	607a      	str	r2, [r7, #4]
 800b4e8:	4618      	mov	r0, r3
 800b4ea:	f7ff ff5f 	bl	800b3ac <SPI_RxBytePtr>
    while(len--) {
 800b4ee:	683b      	ldr	r3, [r7, #0]
 800b4f0:	1e5a      	subs	r2, r3, #1
 800b4f2:	603a      	str	r2, [r7, #0]
 800b4f4:	2b00      	cmp	r3, #0
 800b4f6:	d1f4      	bne.n	800b4e2 <SD_RxDataBlock+0x32>
    }

    /* discard CRC */
    SPI_RxByte();
 800b4f8:	f7ff ff3a 	bl	800b370 <SPI_RxByte>
    SPI_RxByte();
 800b4fc:	f7ff ff38 	bl	800b370 <SPI_RxByte>

    return TRUE;
 800b500:	2301      	movs	r3, #1
}
 800b502:	4618      	mov	r0, r3
 800b504:	3710      	adds	r7, #16
 800b506:	46bd      	mov	sp, r7
 800b508:	bd80      	pop	{r7, pc}
 800b50a:	bf00      	nop
 800b50c:	200161ac 	.word	0x200161ac

0800b510 <SD_TxDataBlock>:

/* transmit data block */
#if _USE_WRITE == 1
static bool SD_TxDataBlock(const uint8_t *buff, BYTE token)
{
 800b510:	b580      	push	{r7, lr}
 800b512:	b084      	sub	sp, #16
 800b514:	af00      	add	r7, sp, #0
 800b516:	6078      	str	r0, [r7, #4]
 800b518:	460b      	mov	r3, r1
 800b51a:	70fb      	strb	r3, [r7, #3]
    uint8_t resp = 0xFF; // 초기화
 800b51c:	23ff      	movs	r3, #255	@ 0xff
 800b51e:	73fb      	strb	r3, [r7, #15]
    uint8_t i = 0;
 800b520:	2300      	movs	r3, #0
 800b522:	73bb      	strb	r3, [r7, #14]

    /* wait SD ready */
    if (SD_ReadyWait() != 0xFF) return FALSE;
 800b524:	f7ff ff50 	bl	800b3c8 <SD_ReadyWait>
 800b528:	4603      	mov	r3, r0
 800b52a:	2bff      	cmp	r3, #255	@ 0xff
 800b52c:	d001      	beq.n	800b532 <SD_TxDataBlock+0x22>
 800b52e:	2300      	movs	r3, #0
 800b530:	e037      	b.n	800b5a2 <SD_TxDataBlock+0x92>

    /* transmit token */
    SPI_TxByte(token);
 800b532:	78fb      	ldrb	r3, [r7, #3]
 800b534:	4618      	mov	r0, r3
 800b536:	f7ff fee5 	bl	800b304 <SPI_TxByte>

    /* if it's not STOP token, transmit data */
    if (token != 0xFD)
 800b53a:	78fb      	ldrb	r3, [r7, #3]
 800b53c:	2bfd      	cmp	r3, #253	@ 0xfd
 800b53e:	d028      	beq.n	800b592 <SD_TxDataBlock+0x82>
    {
        SPI_TxBuffer((uint8_t*)buff, 512);
 800b540:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800b544:	6878      	ldr	r0, [r7, #4]
 800b546:	f7ff fef7 	bl	800b338 <SPI_TxBuffer>

        /* discard CRC */
        SPI_RxByte();
 800b54a:	f7ff ff11 	bl	800b370 <SPI_RxByte>
        SPI_RxByte();
 800b54e:	f7ff ff0f 	bl	800b370 <SPI_RxByte>

        /* receive response */
        while (i <= 64)
 800b552:	e00b      	b.n	800b56c <SD_TxDataBlock+0x5c>
        {
            resp = SPI_RxByte();
 800b554:	f7ff ff0c 	bl	800b370 <SPI_RxByte>
 800b558:	4603      	mov	r3, r0
 800b55a:	73fb      	strb	r3, [r7, #15]

            /* transmit 0x05 accepted */
            if ((resp & 0x1F) == 0x05) break;
 800b55c:	7bfb      	ldrb	r3, [r7, #15]
 800b55e:	f003 031f 	and.w	r3, r3, #31
 800b562:	2b05      	cmp	r3, #5
 800b564:	d006      	beq.n	800b574 <SD_TxDataBlock+0x64>
            i++;
 800b566:	7bbb      	ldrb	r3, [r7, #14]
 800b568:	3301      	adds	r3, #1
 800b56a:	73bb      	strb	r3, [r7, #14]
        while (i <= 64)
 800b56c:	7bbb      	ldrb	r3, [r7, #14]
 800b56e:	2b40      	cmp	r3, #64	@ 0x40
 800b570:	d9f0      	bls.n	800b554 <SD_TxDataBlock+0x44>
 800b572:	e000      	b.n	800b576 <SD_TxDataBlock+0x66>
            if ((resp & 0x1F) == 0x05) break;
 800b574:	bf00      	nop
        }

        // FIX 3: 타임아웃 없는 무한 루프 수정
        // 카드가 계속 busy(0x00) 상태일 경우 시스템이 멈추는 것을 방지하기 위해 타임아웃을 추가합니다.
        Timer1 = 200; // 200ms 타임아웃
 800b576:	4b0d      	ldr	r3, [pc, #52]	@ (800b5ac <SD_TxDataBlock+0x9c>)
 800b578:	22c8      	movs	r2, #200	@ 0xc8
 800b57a:	801a      	strh	r2, [r3, #0]
        while ((SPI_RxByte() == 0) && Timer1);
 800b57c:	bf00      	nop
 800b57e:	f7ff fef7 	bl	800b370 <SPI_RxByte>
 800b582:	4603      	mov	r3, r0
 800b584:	2b00      	cmp	r3, #0
 800b586:	d104      	bne.n	800b592 <SD_TxDataBlock+0x82>
 800b588:	4b08      	ldr	r3, [pc, #32]	@ (800b5ac <SD_TxDataBlock+0x9c>)
 800b58a:	881b      	ldrh	r3, [r3, #0]
 800b58c:	b29b      	uxth	r3, r3
 800b58e:	2b00      	cmp	r3, #0
 800b590:	d1f5      	bne.n	800b57e <SD_TxDataBlock+0x6e>
    }
    
    // resp가 초기화되지 않은 상태로 사용될 수 있어 수정
    if ((resp & 0x1F) == 0x05) return TRUE;
 800b592:	7bfb      	ldrb	r3, [r7, #15]
 800b594:	f003 031f 	and.w	r3, r3, #31
 800b598:	2b05      	cmp	r3, #5
 800b59a:	d101      	bne.n	800b5a0 <SD_TxDataBlock+0x90>
 800b59c:	2301      	movs	r3, #1
 800b59e:	e000      	b.n	800b5a2 <SD_TxDataBlock+0x92>

    return FALSE;
 800b5a0:	2300      	movs	r3, #0
}
 800b5a2:	4618      	mov	r0, r3
 800b5a4:	3710      	adds	r7, #16
 800b5a6:	46bd      	mov	sp, r7
 800b5a8:	bd80      	pop	{r7, pc}
 800b5aa:	bf00      	nop
 800b5ac:	200161ac 	.word	0x200161ac

0800b5b0 <SD_SendCmd>:
#endif /* _USE_WRITE */

/* transmit command */
static BYTE SD_SendCmd(BYTE cmd, uint32_t arg)
{
 800b5b0:	b580      	push	{r7, lr}
 800b5b2:	b084      	sub	sp, #16
 800b5b4:	af00      	add	r7, sp, #0
 800b5b6:	4603      	mov	r3, r0
 800b5b8:	6039      	str	r1, [r7, #0]
 800b5ba:	71fb      	strb	r3, [r7, #7]
    uint8_t crc, res;

    /* wait SD ready */
    if (SD_ReadyWait() != 0xFF) return 0xFF;
 800b5bc:	f7ff ff04 	bl	800b3c8 <SD_ReadyWait>
 800b5c0:	4603      	mov	r3, r0
 800b5c2:	2bff      	cmp	r3, #255	@ 0xff
 800b5c4:	d001      	beq.n	800b5ca <SD_SendCmd+0x1a>
 800b5c6:	23ff      	movs	r3, #255	@ 0xff
 800b5c8:	e042      	b.n	800b650 <SD_SendCmd+0xa0>

    /* transmit command */
    SPI_TxByte(cmd);                    /* Command */
 800b5ca:	79fb      	ldrb	r3, [r7, #7]
 800b5cc:	4618      	mov	r0, r3
 800b5ce:	f7ff fe99 	bl	800b304 <SPI_TxByte>
    SPI_TxByte((uint8_t)(arg >> 24));   /* Argument[31..24] */
 800b5d2:	683b      	ldr	r3, [r7, #0]
 800b5d4:	0e1b      	lsrs	r3, r3, #24
 800b5d6:	b2db      	uxtb	r3, r3
 800b5d8:	4618      	mov	r0, r3
 800b5da:	f7ff fe93 	bl	800b304 <SPI_TxByte>
    SPI_TxByte((uint8_t)(arg >> 16));   /* Argument[23..16] */
 800b5de:	683b      	ldr	r3, [r7, #0]
 800b5e0:	0c1b      	lsrs	r3, r3, #16
 800b5e2:	b2db      	uxtb	r3, r3
 800b5e4:	4618      	mov	r0, r3
 800b5e6:	f7ff fe8d 	bl	800b304 <SPI_TxByte>
    SPI_TxByte((uint8_t)(arg >> 8));    /* Argument[15..8] */
 800b5ea:	683b      	ldr	r3, [r7, #0]
 800b5ec:	0a1b      	lsrs	r3, r3, #8
 800b5ee:	b2db      	uxtb	r3, r3
 800b5f0:	4618      	mov	r0, r3
 800b5f2:	f7ff fe87 	bl	800b304 <SPI_TxByte>
    SPI_TxByte((uint8_t)arg);           /* Argument[7..0] */
 800b5f6:	683b      	ldr	r3, [r7, #0]
 800b5f8:	b2db      	uxtb	r3, r3
 800b5fa:	4618      	mov	r0, r3
 800b5fc:	f7ff fe82 	bl	800b304 <SPI_TxByte>

    /* prepare CRC */
    if(cmd == CMD0) crc = 0x95; /* CRC for CMD0(0) */
 800b600:	79fb      	ldrb	r3, [r7, #7]
 800b602:	2b40      	cmp	r3, #64	@ 0x40
 800b604:	d102      	bne.n	800b60c <SD_SendCmd+0x5c>
 800b606:	2395      	movs	r3, #149	@ 0x95
 800b608:	73fb      	strb	r3, [r7, #15]
 800b60a:	e007      	b.n	800b61c <SD_SendCmd+0x6c>
    else if(cmd == CMD8) crc = 0x87;    /* CRC for CMD8(0x1AA) */
 800b60c:	79fb      	ldrb	r3, [r7, #7]
 800b60e:	2b48      	cmp	r3, #72	@ 0x48
 800b610:	d102      	bne.n	800b618 <SD_SendCmd+0x68>
 800b612:	2387      	movs	r3, #135	@ 0x87
 800b614:	73fb      	strb	r3, [r7, #15]
 800b616:	e001      	b.n	800b61c <SD_SendCmd+0x6c>
    else crc = 1;
 800b618:	2301      	movs	r3, #1
 800b61a:	73fb      	strb	r3, [r7, #15]

    /* transmit CRC */
    SPI_TxByte(crc);
 800b61c:	7bfb      	ldrb	r3, [r7, #15]
 800b61e:	4618      	mov	r0, r3
 800b620:	f7ff fe70 	bl	800b304 <SPI_TxByte>

    /* Skip a stuff byte when STOP_TRANSMISSION */
    if (cmd == CMD12) SPI_RxByte();
 800b624:	79fb      	ldrb	r3, [r7, #7]
 800b626:	2b4c      	cmp	r3, #76	@ 0x4c
 800b628:	d101      	bne.n	800b62e <SD_SendCmd+0x7e>
 800b62a:	f7ff fea1 	bl	800b370 <SPI_RxByte>

    /* receive response */
    uint8_t n = 10;
 800b62e:	230a      	movs	r3, #10
 800b630:	73bb      	strb	r3, [r7, #14]
    do {
        res = SPI_RxByte();
 800b632:	f7ff fe9d 	bl	800b370 <SPI_RxByte>
 800b636:	4603      	mov	r3, r0
 800b638:	737b      	strb	r3, [r7, #13]
    } while ((res & 0x80) && --n);
 800b63a:	f997 300d 	ldrsb.w	r3, [r7, #13]
 800b63e:	2b00      	cmp	r3, #0
 800b640:	da05      	bge.n	800b64e <SD_SendCmd+0x9e>
 800b642:	7bbb      	ldrb	r3, [r7, #14]
 800b644:	3b01      	subs	r3, #1
 800b646:	73bb      	strb	r3, [r7, #14]
 800b648:	7bbb      	ldrb	r3, [r7, #14]
 800b64a:	2b00      	cmp	r3, #0
 800b64c:	d1f1      	bne.n	800b632 <SD_SendCmd+0x82>

    return res;
 800b64e:	7b7b      	ldrb	r3, [r7, #13]
}
 800b650:	4618      	mov	r0, r3
 800b652:	3710      	adds	r7, #16
 800b654:	46bd      	mov	sp, r7
 800b656:	bd80      	pop	{r7, pc}

0800b658 <SD_disk_initialize>:
 * user_diskio.c functions
 **************************************/

/* initialize SD */
DSTATUS SD_disk_initialize(BYTE drv) 
{
 800b658:	b590      	push	{r4, r7, lr}
 800b65a:	b085      	sub	sp, #20
 800b65c:	af00      	add	r7, sp, #0
 800b65e:	4603      	mov	r3, r0
 800b660:	71fb      	strb	r3, [r7, #7]
    uint8_t n, type, ocr[4];

    /* single drive, drv should be 0 */
    if(drv) return STA_NOINIT;
 800b662:	79fb      	ldrb	r3, [r7, #7]
 800b664:	2b00      	cmp	r3, #0
 800b666:	d001      	beq.n	800b66c <SD_disk_initialize+0x14>
 800b668:	2301      	movs	r3, #1
 800b66a:	e0d6      	b.n	800b81a <SD_disk_initialize+0x1c2>

    /* no disk */
    if(Stat & STA_NODISK) return Stat;
 800b66c:	4b6d      	ldr	r3, [pc, #436]	@ (800b824 <SD_disk_initialize+0x1cc>)
 800b66e:	781b      	ldrb	r3, [r3, #0]
 800b670:	b2db      	uxtb	r3, r3
 800b672:	f003 0302 	and.w	r3, r3, #2
 800b676:	2b00      	cmp	r3, #0
 800b678:	d003      	beq.n	800b682 <SD_disk_initialize+0x2a>
 800b67a:	4b6a      	ldr	r3, [pc, #424]	@ (800b824 <SD_disk_initialize+0x1cc>)
 800b67c:	781b      	ldrb	r3, [r3, #0]
 800b67e:	b2db      	uxtb	r3, r3
 800b680:	e0cb      	b.n	800b81a <SD_disk_initialize+0x1c2>

    /* power on */
    SD_PowerOn();
 800b682:	f7ff febb 	bl	800b3fc <SD_PowerOn>

    /* slave select */
    SELECT();
 800b686:	f7ff fe1d 	bl	800b2c4 <SELECT>

    /* check disk type */
    type = 0;
 800b68a:	2300      	movs	r3, #0
 800b68c:	73bb      	strb	r3, [r7, #14]

    /* send GO_IDLE_STATE command */
    if (SD_SendCmd(CMD0, 0) == 1)
 800b68e:	2100      	movs	r1, #0
 800b690:	2040      	movs	r0, #64	@ 0x40
 800b692:	f7ff ff8d 	bl	800b5b0 <SD_SendCmd>
 800b696:	4603      	mov	r3, r0
 800b698:	2b01      	cmp	r3, #1
 800b69a:	f040 80a6 	bne.w	800b7ea <SD_disk_initialize+0x192>
    {
        /* timeout 1 sec */
        Timer1 = 1000;
 800b69e:	4b62      	ldr	r3, [pc, #392]	@ (800b828 <SD_disk_initialize+0x1d0>)
 800b6a0:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800b6a4:	801a      	strh	r2, [r3, #0]

        /* SDC V2+ accept CMD8 command, http://elm-chan.org/docs/mmc/mmc_e.html */
        if (SD_SendCmd(CMD8, 0x1AA) == 1)
 800b6a6:	f44f 71d5 	mov.w	r1, #426	@ 0x1aa
 800b6aa:	2048      	movs	r0, #72	@ 0x48
 800b6ac:	f7ff ff80 	bl	800b5b0 <SD_SendCmd>
 800b6b0:	4603      	mov	r3, r0
 800b6b2:	2b01      	cmp	r3, #1
 800b6b4:	d158      	bne.n	800b768 <SD_disk_initialize+0x110>
        {
            /* operation condition register */
            for (n = 0; n < 4; n++)
 800b6b6:	2300      	movs	r3, #0
 800b6b8:	73fb      	strb	r3, [r7, #15]
 800b6ba:	e00c      	b.n	800b6d6 <SD_disk_initialize+0x7e>
            {
                ocr[n] = SPI_RxByte();
 800b6bc:	7bfc      	ldrb	r4, [r7, #15]
 800b6be:	f7ff fe57 	bl	800b370 <SPI_RxByte>
 800b6c2:	4603      	mov	r3, r0
 800b6c4:	461a      	mov	r2, r3
 800b6c6:	f104 0310 	add.w	r3, r4, #16
 800b6ca:	443b      	add	r3, r7
 800b6cc:	f803 2c08 	strb.w	r2, [r3, #-8]
            for (n = 0; n < 4; n++)
 800b6d0:	7bfb      	ldrb	r3, [r7, #15]
 800b6d2:	3301      	adds	r3, #1
 800b6d4:	73fb      	strb	r3, [r7, #15]
 800b6d6:	7bfb      	ldrb	r3, [r7, #15]
 800b6d8:	2b03      	cmp	r3, #3
 800b6da:	d9ef      	bls.n	800b6bc <SD_disk_initialize+0x64>
            }

            /* voltage range 2.7-3.6V */
            if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 800b6dc:	7abb      	ldrb	r3, [r7, #10]
 800b6de:	2b01      	cmp	r3, #1
 800b6e0:	f040 8083 	bne.w	800b7ea <SD_disk_initialize+0x192>
 800b6e4:	7afb      	ldrb	r3, [r7, #11]
 800b6e6:	2baa      	cmp	r3, #170	@ 0xaa
 800b6e8:	d17f      	bne.n	800b7ea <SD_disk_initialize+0x192>
            {
                /* ACMD41 with HCS bit */
                do {
                    if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 800b6ea:	2100      	movs	r1, #0
 800b6ec:	2077      	movs	r0, #119	@ 0x77
 800b6ee:	f7ff ff5f 	bl	800b5b0 <SD_SendCmd>
 800b6f2:	4603      	mov	r3, r0
 800b6f4:	2b01      	cmp	r3, #1
 800b6f6:	d807      	bhi.n	800b708 <SD_disk_initialize+0xb0>
 800b6f8:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 800b6fc:	2069      	movs	r0, #105	@ 0x69
 800b6fe:	f7ff ff57 	bl	800b5b0 <SD_SendCmd>
 800b702:	4603      	mov	r3, r0
 800b704:	2b00      	cmp	r3, #0
 800b706:	d005      	beq.n	800b714 <SD_disk_initialize+0xbc>
                } while (Timer1);
 800b708:	4b47      	ldr	r3, [pc, #284]	@ (800b828 <SD_disk_initialize+0x1d0>)
 800b70a:	881b      	ldrh	r3, [r3, #0]
 800b70c:	b29b      	uxth	r3, r3
 800b70e:	2b00      	cmp	r3, #0
 800b710:	d1eb      	bne.n	800b6ea <SD_disk_initialize+0x92>
 800b712:	e000      	b.n	800b716 <SD_disk_initialize+0xbe>
                    if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 800b714:	bf00      	nop

                /* READ_OCR */
                if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 800b716:	4b44      	ldr	r3, [pc, #272]	@ (800b828 <SD_disk_initialize+0x1d0>)
 800b718:	881b      	ldrh	r3, [r3, #0]
 800b71a:	b29b      	uxth	r3, r3
 800b71c:	2b00      	cmp	r3, #0
 800b71e:	d064      	beq.n	800b7ea <SD_disk_initialize+0x192>
 800b720:	2100      	movs	r1, #0
 800b722:	207a      	movs	r0, #122	@ 0x7a
 800b724:	f7ff ff44 	bl	800b5b0 <SD_SendCmd>
 800b728:	4603      	mov	r3, r0
 800b72a:	2b00      	cmp	r3, #0
 800b72c:	d15d      	bne.n	800b7ea <SD_disk_initialize+0x192>
                {
                    /* Check CCS bit */
                    for (n = 0; n < 4; n++)
 800b72e:	2300      	movs	r3, #0
 800b730:	73fb      	strb	r3, [r7, #15]
 800b732:	e00c      	b.n	800b74e <SD_disk_initialize+0xf6>
                    {
                        ocr[n] = SPI_RxByte();
 800b734:	7bfc      	ldrb	r4, [r7, #15]
 800b736:	f7ff fe1b 	bl	800b370 <SPI_RxByte>
 800b73a:	4603      	mov	r3, r0
 800b73c:	461a      	mov	r2, r3
 800b73e:	f104 0310 	add.w	r3, r4, #16
 800b742:	443b      	add	r3, r7
 800b744:	f803 2c08 	strb.w	r2, [r3, #-8]
                    for (n = 0; n < 4; n++)
 800b748:	7bfb      	ldrb	r3, [r7, #15]
 800b74a:	3301      	adds	r3, #1
 800b74c:	73fb      	strb	r3, [r7, #15]
 800b74e:	7bfb      	ldrb	r3, [r7, #15]
 800b750:	2b03      	cmp	r3, #3
 800b752:	d9ef      	bls.n	800b734 <SD_disk_initialize+0xdc>
                    }

                    /* SDv2 (HC or SC) */
                    type = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;
 800b754:	7a3b      	ldrb	r3, [r7, #8]
 800b756:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b75a:	2b00      	cmp	r3, #0
 800b75c:	d001      	beq.n	800b762 <SD_disk_initialize+0x10a>
 800b75e:	230c      	movs	r3, #12
 800b760:	e000      	b.n	800b764 <SD_disk_initialize+0x10c>
 800b762:	2304      	movs	r3, #4
 800b764:	73bb      	strb	r3, [r7, #14]
 800b766:	e040      	b.n	800b7ea <SD_disk_initialize+0x192>
            }
        }
        else
        {
            /* SDC V1 or MMC */
            type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? CT_SD1 : CT_MMC;
 800b768:	2100      	movs	r1, #0
 800b76a:	2077      	movs	r0, #119	@ 0x77
 800b76c:	f7ff ff20 	bl	800b5b0 <SD_SendCmd>
 800b770:	4603      	mov	r3, r0
 800b772:	2b01      	cmp	r3, #1
 800b774:	d808      	bhi.n	800b788 <SD_disk_initialize+0x130>
 800b776:	2100      	movs	r1, #0
 800b778:	2069      	movs	r0, #105	@ 0x69
 800b77a:	f7ff ff19 	bl	800b5b0 <SD_SendCmd>
 800b77e:	4603      	mov	r3, r0
 800b780:	2b01      	cmp	r3, #1
 800b782:	d801      	bhi.n	800b788 <SD_disk_initialize+0x130>
 800b784:	2302      	movs	r3, #2
 800b786:	e000      	b.n	800b78a <SD_disk_initialize+0x132>
 800b788:	2301      	movs	r3, #1
 800b78a:	73bb      	strb	r3, [r7, #14]

            do
            {
                if (type == CT_SD1)
 800b78c:	7bbb      	ldrb	r3, [r7, #14]
 800b78e:	2b02      	cmp	r3, #2
 800b790:	d10e      	bne.n	800b7b0 <SD_disk_initialize+0x158>
                {
                    if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0) break; /* ACMD41 */
 800b792:	2100      	movs	r1, #0
 800b794:	2077      	movs	r0, #119	@ 0x77
 800b796:	f7ff ff0b 	bl	800b5b0 <SD_SendCmd>
 800b79a:	4603      	mov	r3, r0
 800b79c:	2b01      	cmp	r3, #1
 800b79e:	d80e      	bhi.n	800b7be <SD_disk_initialize+0x166>
 800b7a0:	2100      	movs	r1, #0
 800b7a2:	2069      	movs	r0, #105	@ 0x69
 800b7a4:	f7ff ff04 	bl	800b5b0 <SD_SendCmd>
 800b7a8:	4603      	mov	r3, r0
 800b7aa:	2b00      	cmp	r3, #0
 800b7ac:	d107      	bne.n	800b7be <SD_disk_initialize+0x166>
 800b7ae:	e00d      	b.n	800b7cc <SD_disk_initialize+0x174>
                }
                else
                {
                    if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 800b7b0:	2100      	movs	r1, #0
 800b7b2:	2041      	movs	r0, #65	@ 0x41
 800b7b4:	f7ff fefc 	bl	800b5b0 <SD_SendCmd>
 800b7b8:	4603      	mov	r3, r0
 800b7ba:	2b00      	cmp	r3, #0
 800b7bc:	d005      	beq.n	800b7ca <SD_disk_initialize+0x172>
                }

            } while (Timer1);
 800b7be:	4b1a      	ldr	r3, [pc, #104]	@ (800b828 <SD_disk_initialize+0x1d0>)
 800b7c0:	881b      	ldrh	r3, [r3, #0]
 800b7c2:	b29b      	uxth	r3, r3
 800b7c4:	2b00      	cmp	r3, #0
 800b7c6:	d1e1      	bne.n	800b78c <SD_disk_initialize+0x134>
 800b7c8:	e000      	b.n	800b7cc <SD_disk_initialize+0x174>
                    if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 800b7ca:	bf00      	nop

            /* SET_BLOCKLEN */
            if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) type = 0;
 800b7cc:	4b16      	ldr	r3, [pc, #88]	@ (800b828 <SD_disk_initialize+0x1d0>)
 800b7ce:	881b      	ldrh	r3, [r3, #0]
 800b7d0:	b29b      	uxth	r3, r3
 800b7d2:	2b00      	cmp	r3, #0
 800b7d4:	d007      	beq.n	800b7e6 <SD_disk_initialize+0x18e>
 800b7d6:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800b7da:	2050      	movs	r0, #80	@ 0x50
 800b7dc:	f7ff fee8 	bl	800b5b0 <SD_SendCmd>
 800b7e0:	4603      	mov	r3, r0
 800b7e2:	2b00      	cmp	r3, #0
 800b7e4:	d001      	beq.n	800b7ea <SD_disk_initialize+0x192>
 800b7e6:	2300      	movs	r3, #0
 800b7e8:	73bb      	strb	r3, [r7, #14]
        }
    }

    CardType = type;
 800b7ea:	4a10      	ldr	r2, [pc, #64]	@ (800b82c <SD_disk_initialize+0x1d4>)
 800b7ec:	7bbb      	ldrb	r3, [r7, #14]
 800b7ee:	7013      	strb	r3, [r2, #0]

    /* Idle */
    DESELECT();
 800b7f0:	f7ff fd78 	bl	800b2e4 <DESELECT>
    SPI_RxByte();
 800b7f4:	f7ff fdbc 	bl	800b370 <SPI_RxByte>

    /* Clear STA_NOINIT */
    if (type)
 800b7f8:	7bbb      	ldrb	r3, [r7, #14]
 800b7fa:	2b00      	cmp	r3, #0
 800b7fc:	d008      	beq.n	800b810 <SD_disk_initialize+0x1b8>
    {
        Stat &= ~STA_NOINIT;
 800b7fe:	4b09      	ldr	r3, [pc, #36]	@ (800b824 <SD_disk_initialize+0x1cc>)
 800b800:	781b      	ldrb	r3, [r3, #0]
 800b802:	b2db      	uxtb	r3, r3
 800b804:	f023 0301 	bic.w	r3, r3, #1
 800b808:	b2da      	uxtb	r2, r3
 800b80a:	4b06      	ldr	r3, [pc, #24]	@ (800b824 <SD_disk_initialize+0x1cc>)
 800b80c:	701a      	strb	r2, [r3, #0]
 800b80e:	e001      	b.n	800b814 <SD_disk_initialize+0x1bc>
    }
    else
    {
        /* Initialization failed */
        SD_PowerOff();
 800b810:	f7ff fe36 	bl	800b480 <SD_PowerOff>
    }

    return Stat;
 800b814:	4b03      	ldr	r3, [pc, #12]	@ (800b824 <SD_disk_initialize+0x1cc>)
 800b816:	781b      	ldrb	r3, [r3, #0]
 800b818:	b2db      	uxtb	r3, r3
}
 800b81a:	4618      	mov	r0, r3
 800b81c:	3714      	adds	r7, #20
 800b81e:	46bd      	mov	sp, r7
 800b820:	bd90      	pop	{r4, r7, pc}
 800b822:	bf00      	nop
 800b824:	2000d11d 	.word	0x2000d11d
 800b828:	200161ac 	.word	0x200161ac
 800b82c:	200161b0 	.word	0x200161b0

0800b830 <SD_disk_status>:

/* return disk status */
DSTATUS SD_disk_status(BYTE drv) 
{
 800b830:	b480      	push	{r7}
 800b832:	b083      	sub	sp, #12
 800b834:	af00      	add	r7, sp, #0
 800b836:	4603      	mov	r3, r0
 800b838:	71fb      	strb	r3, [r7, #7]
    if (drv) return STA_NOINIT;
 800b83a:	79fb      	ldrb	r3, [r7, #7]
 800b83c:	2b00      	cmp	r3, #0
 800b83e:	d001      	beq.n	800b844 <SD_disk_status+0x14>
 800b840:	2301      	movs	r3, #1
 800b842:	e002      	b.n	800b84a <SD_disk_status+0x1a>
    return Stat;
 800b844:	4b04      	ldr	r3, [pc, #16]	@ (800b858 <SD_disk_status+0x28>)
 800b846:	781b      	ldrb	r3, [r3, #0]
 800b848:	b2db      	uxtb	r3, r3
}
 800b84a:	4618      	mov	r0, r3
 800b84c:	370c      	adds	r7, #12
 800b84e:	46bd      	mov	sp, r7
 800b850:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b854:	4770      	bx	lr
 800b856:	bf00      	nop
 800b858:	2000d11d 	.word	0x2000d11d

0800b85c <SD_disk_read>:

/* read sector */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count) 
{
 800b85c:	b580      	push	{r7, lr}
 800b85e:	b084      	sub	sp, #16
 800b860:	af00      	add	r7, sp, #0
 800b862:	60b9      	str	r1, [r7, #8]
 800b864:	607a      	str	r2, [r7, #4]
 800b866:	603b      	str	r3, [r7, #0]
 800b868:	4603      	mov	r3, r0
 800b86a:	73fb      	strb	r3, [r7, #15]
    /* pdrv should be 0 */
    if (pdrv || !count) return RES_PARERR;
 800b86c:	7bfb      	ldrb	r3, [r7, #15]
 800b86e:	2b00      	cmp	r3, #0
 800b870:	d102      	bne.n	800b878 <SD_disk_read+0x1c>
 800b872:	683b      	ldr	r3, [r7, #0]
 800b874:	2b00      	cmp	r3, #0
 800b876:	d101      	bne.n	800b87c <SD_disk_read+0x20>
 800b878:	2304      	movs	r3, #4
 800b87a:	e051      	b.n	800b920 <SD_disk_read+0xc4>

    /* no disk */
    if (Stat & STA_NOINIT) return RES_NOTRDY;
 800b87c:	4b2a      	ldr	r3, [pc, #168]	@ (800b928 <SD_disk_read+0xcc>)
 800b87e:	781b      	ldrb	r3, [r3, #0]
 800b880:	b2db      	uxtb	r3, r3
 800b882:	f003 0301 	and.w	r3, r3, #1
 800b886:	2b00      	cmp	r3, #0
 800b888:	d001      	beq.n	800b88e <SD_disk_read+0x32>
 800b88a:	2303      	movs	r3, #3
 800b88c:	e048      	b.n	800b920 <SD_disk_read+0xc4>

    /* convert to byte address */
    if (!(CardType & CT_BLOCK)) sector *= 512;
 800b88e:	4b27      	ldr	r3, [pc, #156]	@ (800b92c <SD_disk_read+0xd0>)
 800b890:	781b      	ldrb	r3, [r3, #0]
 800b892:	f003 0308 	and.w	r3, r3, #8
 800b896:	2b00      	cmp	r3, #0
 800b898:	d102      	bne.n	800b8a0 <SD_disk_read+0x44>
 800b89a:	687b      	ldr	r3, [r7, #4]
 800b89c:	025b      	lsls	r3, r3, #9
 800b89e:	607b      	str	r3, [r7, #4]

    SELECT();
 800b8a0:	f7ff fd10 	bl	800b2c4 <SELECT>

    if (count == 1)
 800b8a4:	683b      	ldr	r3, [r7, #0]
 800b8a6:	2b01      	cmp	r3, #1
 800b8a8:	d111      	bne.n	800b8ce <SD_disk_read+0x72>
    {
        /* READ_SINGLE_BLOCK */
        if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512)) count = 0;
 800b8aa:	6879      	ldr	r1, [r7, #4]
 800b8ac:	2051      	movs	r0, #81	@ 0x51
 800b8ae:	f7ff fe7f 	bl	800b5b0 <SD_SendCmd>
 800b8b2:	4603      	mov	r3, r0
 800b8b4:	2b00      	cmp	r3, #0
 800b8b6:	d129      	bne.n	800b90c <SD_disk_read+0xb0>
 800b8b8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800b8bc:	68b8      	ldr	r0, [r7, #8]
 800b8be:	f7ff fdf7 	bl	800b4b0 <SD_RxDataBlock>
 800b8c2:	4603      	mov	r3, r0
 800b8c4:	2b00      	cmp	r3, #0
 800b8c6:	d021      	beq.n	800b90c <SD_disk_read+0xb0>
 800b8c8:	2300      	movs	r3, #0
 800b8ca:	603b      	str	r3, [r7, #0]
 800b8cc:	e01e      	b.n	800b90c <SD_disk_read+0xb0>
    }
    else
    {
        /* READ_MULTIPLE_BLOCK */
        if (SD_SendCmd(CMD18, sector) == 0)
 800b8ce:	6879      	ldr	r1, [r7, #4]
 800b8d0:	2052      	movs	r0, #82	@ 0x52
 800b8d2:	f7ff fe6d 	bl	800b5b0 <SD_SendCmd>
 800b8d6:	4603      	mov	r3, r0
 800b8d8:	2b00      	cmp	r3, #0
 800b8da:	d117      	bne.n	800b90c <SD_disk_read+0xb0>
        {
            do {
                if (!SD_RxDataBlock(buff, 512)) break;
 800b8dc:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800b8e0:	68b8      	ldr	r0, [r7, #8]
 800b8e2:	f7ff fde5 	bl	800b4b0 <SD_RxDataBlock>
 800b8e6:	4603      	mov	r3, r0
 800b8e8:	2b00      	cmp	r3, #0
 800b8ea:	d00a      	beq.n	800b902 <SD_disk_read+0xa6>
                buff += 512;
 800b8ec:	68bb      	ldr	r3, [r7, #8]
 800b8ee:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 800b8f2:	60bb      	str	r3, [r7, #8]
            } while (--count);
 800b8f4:	683b      	ldr	r3, [r7, #0]
 800b8f6:	3b01      	subs	r3, #1
 800b8f8:	603b      	str	r3, [r7, #0]
 800b8fa:	683b      	ldr	r3, [r7, #0]
 800b8fc:	2b00      	cmp	r3, #0
 800b8fe:	d1ed      	bne.n	800b8dc <SD_disk_read+0x80>
 800b900:	e000      	b.n	800b904 <SD_disk_read+0xa8>
                if (!SD_RxDataBlock(buff, 512)) break;
 800b902:	bf00      	nop

            /* STOP_TRANSMISSION */
            SD_SendCmd(CMD12, 0);
 800b904:	2100      	movs	r1, #0
 800b906:	204c      	movs	r0, #76	@ 0x4c
 800b908:	f7ff fe52 	bl	800b5b0 <SD_SendCmd>
        }
    }

    /* Idle */
    DESELECT();
 800b90c:	f7ff fcea 	bl	800b2e4 <DESELECT>
    SPI_RxByte();
 800b910:	f7ff fd2e 	bl	800b370 <SPI_RxByte>

    return count ? RES_ERROR : RES_OK;
 800b914:	683b      	ldr	r3, [r7, #0]
 800b916:	2b00      	cmp	r3, #0
 800b918:	bf14      	ite	ne
 800b91a:	2301      	movne	r3, #1
 800b91c:	2300      	moveq	r3, #0
 800b91e:	b2db      	uxtb	r3, r3
}
 800b920:	4618      	mov	r0, r3
 800b922:	3710      	adds	r7, #16
 800b924:	46bd      	mov	sp, r7
 800b926:	bd80      	pop	{r7, pc}
 800b928:	2000d11d 	.word	0x2000d11d
 800b92c:	200161b0 	.word	0x200161b0

0800b930 <SD_disk_write>:

/* write sector */
#if _USE_WRITE == 1
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count) 
{
 800b930:	b580      	push	{r7, lr}
 800b932:	b084      	sub	sp, #16
 800b934:	af00      	add	r7, sp, #0
 800b936:	60b9      	str	r1, [r7, #8]
 800b938:	607a      	str	r2, [r7, #4]
 800b93a:	603b      	str	r3, [r7, #0]
 800b93c:	4603      	mov	r3, r0
 800b93e:	73fb      	strb	r3, [r7, #15]
    /* pdrv should be 0 */
    if (pdrv || !count) return RES_PARERR;
 800b940:	7bfb      	ldrb	r3, [r7, #15]
 800b942:	2b00      	cmp	r3, #0
 800b944:	d102      	bne.n	800b94c <SD_disk_write+0x1c>
 800b946:	683b      	ldr	r3, [r7, #0]
 800b948:	2b00      	cmp	r3, #0
 800b94a:	d101      	bne.n	800b950 <SD_disk_write+0x20>
 800b94c:	2304      	movs	r3, #4
 800b94e:	e06b      	b.n	800ba28 <SD_disk_write+0xf8>

    /* no disk */
    if (Stat & STA_NOINIT) return RES_NOTRDY;
 800b950:	4b37      	ldr	r3, [pc, #220]	@ (800ba30 <SD_disk_write+0x100>)
 800b952:	781b      	ldrb	r3, [r3, #0]
 800b954:	b2db      	uxtb	r3, r3
 800b956:	f003 0301 	and.w	r3, r3, #1
 800b95a:	2b00      	cmp	r3, #0
 800b95c:	d001      	beq.n	800b962 <SD_disk_write+0x32>
 800b95e:	2303      	movs	r3, #3
 800b960:	e062      	b.n	800ba28 <SD_disk_write+0xf8>

    /* write protection */
    if (Stat & STA_PROTECT) return RES_WRPRT;
 800b962:	4b33      	ldr	r3, [pc, #204]	@ (800ba30 <SD_disk_write+0x100>)
 800b964:	781b      	ldrb	r3, [r3, #0]
 800b966:	b2db      	uxtb	r3, r3
 800b968:	f003 0304 	and.w	r3, r3, #4
 800b96c:	2b00      	cmp	r3, #0
 800b96e:	d001      	beq.n	800b974 <SD_disk_write+0x44>
 800b970:	2302      	movs	r3, #2
 800b972:	e059      	b.n	800ba28 <SD_disk_write+0xf8>

    /* convert to byte address */
    if (!(CardType & CT_BLOCK)) sector *= 512;
 800b974:	4b2f      	ldr	r3, [pc, #188]	@ (800ba34 <SD_disk_write+0x104>)
 800b976:	781b      	ldrb	r3, [r3, #0]
 800b978:	f003 0308 	and.w	r3, r3, #8
 800b97c:	2b00      	cmp	r3, #0
 800b97e:	d102      	bne.n	800b986 <SD_disk_write+0x56>
 800b980:	687b      	ldr	r3, [r7, #4]
 800b982:	025b      	lsls	r3, r3, #9
 800b984:	607b      	str	r3, [r7, #4]

    SELECT();
 800b986:	f7ff fc9d 	bl	800b2c4 <SELECT>

    if (count == 1)
 800b98a:	683b      	ldr	r3, [r7, #0]
 800b98c:	2b01      	cmp	r3, #1
 800b98e:	d110      	bne.n	800b9b2 <SD_disk_write+0x82>
    {
        /* WRITE_BLOCK */
        if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 800b990:	6879      	ldr	r1, [r7, #4]
 800b992:	2058      	movs	r0, #88	@ 0x58
 800b994:	f7ff fe0c 	bl	800b5b0 <SD_SendCmd>
 800b998:	4603      	mov	r3, r0
 800b99a:	2b00      	cmp	r3, #0
 800b99c:	d13a      	bne.n	800ba14 <SD_disk_write+0xe4>
 800b99e:	21fe      	movs	r1, #254	@ 0xfe
 800b9a0:	68b8      	ldr	r0, [r7, #8]
 800b9a2:	f7ff fdb5 	bl	800b510 <SD_TxDataBlock>
 800b9a6:	4603      	mov	r3, r0
 800b9a8:	2b00      	cmp	r3, #0
 800b9aa:	d033      	beq.n	800ba14 <SD_disk_write+0xe4>
            count = 0;
 800b9ac:	2300      	movs	r3, #0
 800b9ae:	603b      	str	r3, [r7, #0]
 800b9b0:	e030      	b.n	800ba14 <SD_disk_write+0xe4>
    }
    else
    {
        /* WRITE_MULTIPLE_BLOCK */
        if (CardType & CT_SD1)
 800b9b2:	4b20      	ldr	r3, [pc, #128]	@ (800ba34 <SD_disk_write+0x104>)
 800b9b4:	781b      	ldrb	r3, [r3, #0]
 800b9b6:	f003 0302 	and.w	r3, r3, #2
 800b9ba:	2b00      	cmp	r3, #0
 800b9bc:	d007      	beq.n	800b9ce <SD_disk_write+0x9e>
        {
            SD_SendCmd(CMD55, 0);
 800b9be:	2100      	movs	r1, #0
 800b9c0:	2077      	movs	r0, #119	@ 0x77
 800b9c2:	f7ff fdf5 	bl	800b5b0 <SD_SendCmd>
            SD_SendCmd(CMD23, count); /* ACMD23 */
 800b9c6:	6839      	ldr	r1, [r7, #0]
 800b9c8:	2057      	movs	r0, #87	@ 0x57
 800b9ca:	f7ff fdf1 	bl	800b5b0 <SD_SendCmd>
        }

        if (SD_SendCmd(CMD25, sector) == 0)
 800b9ce:	6879      	ldr	r1, [r7, #4]
 800b9d0:	2059      	movs	r0, #89	@ 0x59
 800b9d2:	f7ff fded 	bl	800b5b0 <SD_SendCmd>
 800b9d6:	4603      	mov	r3, r0
 800b9d8:	2b00      	cmp	r3, #0
 800b9da:	d11b      	bne.n	800ba14 <SD_disk_write+0xe4>
        {
            do {
                if(!SD_TxDataBlock(buff, 0xFC)) break;
 800b9dc:	21fc      	movs	r1, #252	@ 0xfc
 800b9de:	68b8      	ldr	r0, [r7, #8]
 800b9e0:	f7ff fd96 	bl	800b510 <SD_TxDataBlock>
 800b9e4:	4603      	mov	r3, r0
 800b9e6:	2b00      	cmp	r3, #0
 800b9e8:	d00a      	beq.n	800ba00 <SD_disk_write+0xd0>
                buff += 512;
 800b9ea:	68bb      	ldr	r3, [r7, #8]
 800b9ec:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 800b9f0:	60bb      	str	r3, [r7, #8]
            } while (--count);
 800b9f2:	683b      	ldr	r3, [r7, #0]
 800b9f4:	3b01      	subs	r3, #1
 800b9f6:	603b      	str	r3, [r7, #0]
 800b9f8:	683b      	ldr	r3, [r7, #0]
 800b9fa:	2b00      	cmp	r3, #0
 800b9fc:	d1ee      	bne.n	800b9dc <SD_disk_write+0xac>
 800b9fe:	e000      	b.n	800ba02 <SD_disk_write+0xd2>
                if(!SD_TxDataBlock(buff, 0xFC)) break;
 800ba00:	bf00      	nop

            /* STOP_TRAN token */
            if(!SD_TxDataBlock(0, 0xFD))
 800ba02:	21fd      	movs	r1, #253	@ 0xfd
 800ba04:	2000      	movs	r0, #0
 800ba06:	f7ff fd83 	bl	800b510 <SD_TxDataBlock>
 800ba0a:	4603      	mov	r3, r0
 800ba0c:	2b00      	cmp	r3, #0
 800ba0e:	d101      	bne.n	800ba14 <SD_disk_write+0xe4>
            {
                count = 1;
 800ba10:	2301      	movs	r3, #1
 800ba12:	603b      	str	r3, [r7, #0]
            }
        }
    }

    /* Idle */
    DESELECT();
 800ba14:	f7ff fc66 	bl	800b2e4 <DESELECT>
    SPI_RxByte();
 800ba18:	f7ff fcaa 	bl	800b370 <SPI_RxByte>

    return count ? RES_ERROR : RES_OK;
 800ba1c:	683b      	ldr	r3, [r7, #0]
 800ba1e:	2b00      	cmp	r3, #0
 800ba20:	bf14      	ite	ne
 800ba22:	2301      	movne	r3, #1
 800ba24:	2300      	moveq	r3, #0
 800ba26:	b2db      	uxtb	r3, r3
}
 800ba28:	4618      	mov	r0, r3
 800ba2a:	3710      	adds	r7, #16
 800ba2c:	46bd      	mov	sp, r7
 800ba2e:	bd80      	pop	{r7, pc}
 800ba30:	2000d11d 	.word	0x2000d11d
 800ba34:	200161b0 	.word	0x200161b0

0800ba38 <SD_disk_ioctl>:
#endif /* _USE_WRITE */

/* ioctl */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff) 
{
 800ba38:	b590      	push	{r4, r7, lr}
 800ba3a:	b08b      	sub	sp, #44	@ 0x2c
 800ba3c:	af00      	add	r7, sp, #0
 800ba3e:	4603      	mov	r3, r0
 800ba40:	603a      	str	r2, [r7, #0]
 800ba42:	71fb      	strb	r3, [r7, #7]
 800ba44:	460b      	mov	r3, r1
 800ba46:	71bb      	strb	r3, [r7, #6]
    DRESULT res;
    uint8_t n, csd[16], *ptr = buff;
 800ba48:	683b      	ldr	r3, [r7, #0]
 800ba4a:	623b      	str	r3, [r7, #32]
    
    /* pdrv should be 0 */
    if (drv) return RES_PARERR;
 800ba4c:	79fb      	ldrb	r3, [r7, #7]
 800ba4e:	2b00      	cmp	r3, #0
 800ba50:	d001      	beq.n	800ba56 <SD_disk_ioctl+0x1e>
 800ba52:	2304      	movs	r3, #4
 800ba54:	e118      	b.n	800bc88 <SD_disk_ioctl+0x250>
    res = RES_ERROR;
 800ba56:	2301      	movs	r3, #1
 800ba58:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    if (ctrl == CTRL_POWER)
 800ba5c:	79bb      	ldrb	r3, [r7, #6]
 800ba5e:	2b05      	cmp	r3, #5
 800ba60:	d124      	bne.n	800baac <SD_disk_ioctl+0x74>
    {
        switch (*ptr)
 800ba62:	6a3b      	ldr	r3, [r7, #32]
 800ba64:	781b      	ldrb	r3, [r3, #0]
 800ba66:	2b02      	cmp	r3, #2
 800ba68:	d012      	beq.n	800ba90 <SD_disk_ioctl+0x58>
 800ba6a:	2b02      	cmp	r3, #2
 800ba6c:	dc1a      	bgt.n	800baa4 <SD_disk_ioctl+0x6c>
 800ba6e:	2b00      	cmp	r3, #0
 800ba70:	d002      	beq.n	800ba78 <SD_disk_ioctl+0x40>
 800ba72:	2b01      	cmp	r3, #1
 800ba74:	d006      	beq.n	800ba84 <SD_disk_ioctl+0x4c>
 800ba76:	e015      	b.n	800baa4 <SD_disk_ioctl+0x6c>
        {
        case 0:
            SD_PowerOff();      /* Power Off */
 800ba78:	f7ff fd02 	bl	800b480 <SD_PowerOff>
            res = RES_OK;
 800ba7c:	2300      	movs	r3, #0
 800ba7e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            break;
 800ba82:	e0ff      	b.n	800bc84 <SD_disk_ioctl+0x24c>
        case 1:
            SD_PowerOn();       /* Power On */
 800ba84:	f7ff fcba 	bl	800b3fc <SD_PowerOn>
            res = RES_OK;
 800ba88:	2300      	movs	r3, #0
 800ba8a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            break;
 800ba8e:	e0f9      	b.n	800bc84 <SD_disk_ioctl+0x24c>
        case 2:
            *(ptr + 1) = SD_CheckPower();
 800ba90:	6a3b      	ldr	r3, [r7, #32]
 800ba92:	1c5c      	adds	r4, r3, #1
 800ba94:	f7ff fd00 	bl	800b498 <SD_CheckPower>
 800ba98:	4603      	mov	r3, r0
 800ba9a:	7023      	strb	r3, [r4, #0]
            res = RES_OK;       /* Power Check */
 800ba9c:	2300      	movs	r3, #0
 800ba9e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            break;
 800baa2:	e0ef      	b.n	800bc84 <SD_disk_ioctl+0x24c>
        default:
            res = RES_PARERR;
 800baa4:	2304      	movs	r3, #4
 800baa6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800baaa:	e0eb      	b.n	800bc84 <SD_disk_ioctl+0x24c>
        }
    }
    else
    {
        /* no disk */
        if (Stat & STA_NOINIT) return RES_NOTRDY;
 800baac:	4b78      	ldr	r3, [pc, #480]	@ (800bc90 <SD_disk_ioctl+0x258>)
 800baae:	781b      	ldrb	r3, [r3, #0]
 800bab0:	b2db      	uxtb	r3, r3
 800bab2:	f003 0301 	and.w	r3, r3, #1
 800bab6:	2b00      	cmp	r3, #0
 800bab8:	d001      	beq.n	800babe <SD_disk_ioctl+0x86>
 800baba:	2303      	movs	r3, #3
 800babc:	e0e4      	b.n	800bc88 <SD_disk_ioctl+0x250>

        SELECT();
 800babe:	f7ff fc01 	bl	800b2c4 <SELECT>

        switch (ctrl)
 800bac2:	79bb      	ldrb	r3, [r7, #6]
 800bac4:	2b0d      	cmp	r3, #13
 800bac6:	f200 80cc 	bhi.w	800bc62 <SD_disk_ioctl+0x22a>
 800baca:	a201      	add	r2, pc, #4	@ (adr r2, 800bad0 <SD_disk_ioctl+0x98>)
 800bacc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bad0:	0800bbcb 	.word	0x0800bbcb
 800bad4:	0800bb09 	.word	0x0800bb09
 800bad8:	0800bbbb 	.word	0x0800bbbb
 800badc:	0800bc63 	.word	0x0800bc63
 800bae0:	0800bc63 	.word	0x0800bc63
 800bae4:	0800bc63 	.word	0x0800bc63
 800bae8:	0800bc63 	.word	0x0800bc63
 800baec:	0800bc63 	.word	0x0800bc63
 800baf0:	0800bc63 	.word	0x0800bc63
 800baf4:	0800bc63 	.word	0x0800bc63
 800baf8:	0800bc63 	.word	0x0800bc63
 800bafc:	0800bbdd 	.word	0x0800bbdd
 800bb00:	0800bc01 	.word	0x0800bc01
 800bb04:	0800bc25 	.word	0x0800bc25
        {
        case GET_SECTOR_COUNT:
            /* SEND_CSD */
            if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 800bb08:	2100      	movs	r1, #0
 800bb0a:	2049      	movs	r0, #73	@ 0x49
 800bb0c:	f7ff fd50 	bl	800b5b0 <SD_SendCmd>
 800bb10:	4603      	mov	r3, r0
 800bb12:	2b00      	cmp	r3, #0
 800bb14:	f040 80a9 	bne.w	800bc6a <SD_disk_ioctl+0x232>
 800bb18:	f107 0308 	add.w	r3, r7, #8
 800bb1c:	2110      	movs	r1, #16
 800bb1e:	4618      	mov	r0, r3
 800bb20:	f7ff fcc6 	bl	800b4b0 <SD_RxDataBlock>
 800bb24:	4603      	mov	r3, r0
 800bb26:	2b00      	cmp	r3, #0
 800bb28:	f000 809f 	beq.w	800bc6a <SD_disk_ioctl+0x232>
            {
                if ((csd[0] >> 6) == 1) /* SDC V2 */
 800bb2c:	7a3b      	ldrb	r3, [r7, #8]
 800bb2e:	099b      	lsrs	r3, r3, #6
 800bb30:	b2db      	uxtb	r3, r3
 800bb32:	2b01      	cmp	r3, #1
 800bb34:	d10f      	bne.n	800bb56 <SD_disk_ioctl+0x11e>
                {
                    // FIX 5: SDv2 CSD 파싱 및 용량 계산 로직 수정
                    // 기존 로직은 C_SIZE 필드를 일부만 사용하여 대용량 카드에서 용량을 잘못 계산합니다.
                    DWORD c_size;
                    c_size = (DWORD)(csd[7] & 0x3F) << 16 | (WORD)csd[8] << 8 | csd[9];
 800bb36:	7bfb      	ldrb	r3, [r7, #15]
 800bb38:	041b      	lsls	r3, r3, #16
 800bb3a:	f403 127c 	and.w	r2, r3, #4128768	@ 0x3f0000
 800bb3e:	7c3b      	ldrb	r3, [r7, #16]
 800bb40:	021b      	lsls	r3, r3, #8
 800bb42:	4313      	orrs	r3, r2
 800bb44:	7c7a      	ldrb	r2, [r7, #17]
 800bb46:	4313      	orrs	r3, r2
 800bb48:	61bb      	str	r3, [r7, #24]
                    *(DWORD*)buff = (c_size + 1) << 10;
 800bb4a:	69bb      	ldr	r3, [r7, #24]
 800bb4c:	3301      	adds	r3, #1
 800bb4e:	029a      	lsls	r2, r3, #10
 800bb50:	683b      	ldr	r3, [r7, #0]
 800bb52:	601a      	str	r2, [r3, #0]
 800bb54:	e02d      	b.n	800bbb2 <SD_disk_ioctl+0x17a>
                }
                else /* MMC or SDC V1 */
                {
                    WORD csize;
                    n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 800bb56:	7b7b      	ldrb	r3, [r7, #13]
 800bb58:	f003 030f 	and.w	r3, r3, #15
 800bb5c:	b2da      	uxtb	r2, r3
 800bb5e:	7cbb      	ldrb	r3, [r7, #18]
 800bb60:	09db      	lsrs	r3, r3, #7
 800bb62:	b2db      	uxtb	r3, r3
 800bb64:	4413      	add	r3, r2
 800bb66:	b2da      	uxtb	r2, r3
 800bb68:	7c7b      	ldrb	r3, [r7, #17]
 800bb6a:	005b      	lsls	r3, r3, #1
 800bb6c:	b2db      	uxtb	r3, r3
 800bb6e:	f003 0306 	and.w	r3, r3, #6
 800bb72:	b2db      	uxtb	r3, r3
 800bb74:	4413      	add	r3, r2
 800bb76:	b2db      	uxtb	r3, r3
 800bb78:	3302      	adds	r3, #2
 800bb7a:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
                    csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 800bb7e:	7c3b      	ldrb	r3, [r7, #16]
 800bb80:	099b      	lsrs	r3, r3, #6
 800bb82:	b2db      	uxtb	r3, r3
 800bb84:	461a      	mov	r2, r3
 800bb86:	7bfb      	ldrb	r3, [r7, #15]
 800bb88:	009b      	lsls	r3, r3, #2
 800bb8a:	b29b      	uxth	r3, r3
 800bb8c:	4413      	add	r3, r2
 800bb8e:	b29a      	uxth	r2, r3
 800bb90:	7bbb      	ldrb	r3, [r7, #14]
 800bb92:	029b      	lsls	r3, r3, #10
 800bb94:	b29b      	uxth	r3, r3
 800bb96:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800bb9a:	b29b      	uxth	r3, r3
 800bb9c:	4413      	add	r3, r2
 800bb9e:	b29b      	uxth	r3, r3
 800bba0:	3301      	adds	r3, #1
 800bba2:	83fb      	strh	r3, [r7, #30]
                    *(DWORD*) buff = (DWORD) csize << (n - 9);
 800bba4:	8bfa      	ldrh	r2, [r7, #30]
 800bba6:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800bbaa:	3b09      	subs	r3, #9
 800bbac:	409a      	lsls	r2, r3
 800bbae:	683b      	ldr	r3, [r7, #0]
 800bbb0:	601a      	str	r2, [r3, #0]
                }
                res = RES_OK;
 800bbb2:	2300      	movs	r3, #0
 800bbb4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            }
            break;
 800bbb8:	e057      	b.n	800bc6a <SD_disk_ioctl+0x232>
        case GET_SECTOR_SIZE:
            *(WORD*) buff = 512;
 800bbba:	683b      	ldr	r3, [r7, #0]
 800bbbc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800bbc0:	801a      	strh	r2, [r3, #0]
            res = RES_OK;
 800bbc2:	2300      	movs	r3, #0
 800bbc4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            break;
 800bbc8:	e058      	b.n	800bc7c <SD_disk_ioctl+0x244>
        case CTRL_SYNC:
            if (SD_ReadyWait() == 0xFF) res = RES_OK;
 800bbca:	f7ff fbfd 	bl	800b3c8 <SD_ReadyWait>
 800bbce:	4603      	mov	r3, r0
 800bbd0:	2bff      	cmp	r3, #255	@ 0xff
 800bbd2:	d14c      	bne.n	800bc6e <SD_disk_ioctl+0x236>
 800bbd4:	2300      	movs	r3, #0
 800bbd6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            break;
 800bbda:	e048      	b.n	800bc6e <SD_disk_ioctl+0x236>
        case MMC_GET_CSD:
            /* SEND_CSD */
            if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 800bbdc:	2100      	movs	r1, #0
 800bbde:	2049      	movs	r0, #73	@ 0x49
 800bbe0:	f7ff fce6 	bl	800b5b0 <SD_SendCmd>
 800bbe4:	4603      	mov	r3, r0
 800bbe6:	2b00      	cmp	r3, #0
 800bbe8:	d143      	bne.n	800bc72 <SD_disk_ioctl+0x23a>
 800bbea:	2110      	movs	r1, #16
 800bbec:	6a38      	ldr	r0, [r7, #32]
 800bbee:	f7ff fc5f 	bl	800b4b0 <SD_RxDataBlock>
 800bbf2:	4603      	mov	r3, r0
 800bbf4:	2b00      	cmp	r3, #0
 800bbf6:	d03c      	beq.n	800bc72 <SD_disk_ioctl+0x23a>
 800bbf8:	2300      	movs	r3, #0
 800bbfa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            break;
 800bbfe:	e038      	b.n	800bc72 <SD_disk_ioctl+0x23a>
        case MMC_GET_CID:
            /* SEND_CID */
            if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 800bc00:	2100      	movs	r1, #0
 800bc02:	204a      	movs	r0, #74	@ 0x4a
 800bc04:	f7ff fcd4 	bl	800b5b0 <SD_SendCmd>
 800bc08:	4603      	mov	r3, r0
 800bc0a:	2b00      	cmp	r3, #0
 800bc0c:	d133      	bne.n	800bc76 <SD_disk_ioctl+0x23e>
 800bc0e:	2110      	movs	r1, #16
 800bc10:	6a38      	ldr	r0, [r7, #32]
 800bc12:	f7ff fc4d 	bl	800b4b0 <SD_RxDataBlock>
 800bc16:	4603      	mov	r3, r0
 800bc18:	2b00      	cmp	r3, #0
 800bc1a:	d02c      	beq.n	800bc76 <SD_disk_ioctl+0x23e>
 800bc1c:	2300      	movs	r3, #0
 800bc1e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            break;
 800bc22:	e028      	b.n	800bc76 <SD_disk_ioctl+0x23e>
        case MMC_GET_OCR:
            /* READ_OCR */
            if (SD_SendCmd(CMD58, 0) == 0)
 800bc24:	2100      	movs	r1, #0
 800bc26:	207a      	movs	r0, #122	@ 0x7a
 800bc28:	f7ff fcc2 	bl	800b5b0 <SD_SendCmd>
 800bc2c:	4603      	mov	r3, r0
 800bc2e:	2b00      	cmp	r3, #0
 800bc30:	d123      	bne.n	800bc7a <SD_disk_ioctl+0x242>
            {
                for (n = 0; n < 4; n++)
 800bc32:	2300      	movs	r3, #0
 800bc34:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800bc38:	e00b      	b.n	800bc52 <SD_disk_ioctl+0x21a>
                {
                    *ptr++ = SPI_RxByte();
 800bc3a:	6a3c      	ldr	r4, [r7, #32]
 800bc3c:	1c63      	adds	r3, r4, #1
 800bc3e:	623b      	str	r3, [r7, #32]
 800bc40:	f7ff fb96 	bl	800b370 <SPI_RxByte>
 800bc44:	4603      	mov	r3, r0
 800bc46:	7023      	strb	r3, [r4, #0]
                for (n = 0; n < 4; n++)
 800bc48:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800bc4c:	3301      	adds	r3, #1
 800bc4e:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800bc52:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800bc56:	2b03      	cmp	r3, #3
 800bc58:	d9ef      	bls.n	800bc3a <SD_disk_ioctl+0x202>
                }
                res = RES_OK;
 800bc5a:	2300      	movs	r3, #0
 800bc5c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            }
            // FIX 4: 누락된 break 추가
            // break가 없어 default case로 넘어가 res값이 RES_PARERR로 덮어쓰이는 문제를 수정합니다.
            break; 
 800bc60:	e00b      	b.n	800bc7a <SD_disk_ioctl+0x242>
        default:
            res = RES_PARERR;
 800bc62:	2304      	movs	r3, #4
 800bc64:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800bc68:	e008      	b.n	800bc7c <SD_disk_ioctl+0x244>
            break;
 800bc6a:	bf00      	nop
 800bc6c:	e006      	b.n	800bc7c <SD_disk_ioctl+0x244>
            break;
 800bc6e:	bf00      	nop
 800bc70:	e004      	b.n	800bc7c <SD_disk_ioctl+0x244>
            break;
 800bc72:	bf00      	nop
 800bc74:	e002      	b.n	800bc7c <SD_disk_ioctl+0x244>
            break;
 800bc76:	bf00      	nop
 800bc78:	e000      	b.n	800bc7c <SD_disk_ioctl+0x244>
            break; 
 800bc7a:	bf00      	nop
        }

        DESELECT();
 800bc7c:	f7ff fb32 	bl	800b2e4 <DESELECT>
        SPI_RxByte();
 800bc80:	f7ff fb76 	bl	800b370 <SPI_RxByte>
    }

    return res;
 800bc84:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800bc88:	4618      	mov	r0, r3
 800bc8a:	372c      	adds	r7, #44	@ 0x2c
 800bc8c:	46bd      	mov	sp, r7
 800bc8e:	bd90      	pop	{r4, r7, pc}
 800bc90:	2000d11d 	.word	0x2000d11d

0800bc94 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 800bc94:	b580      	push	{r7, lr}
 800bc96:	b082      	sub	sp, #8
 800bc98:	af00      	add	r7, sp, #0
 800bc9a:	4603      	mov	r3, r0
 800bc9c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
	return SD_disk_initialize(pdrv);
 800bc9e:	79fb      	ldrb	r3, [r7, #7]
 800bca0:	4618      	mov	r0, r3
 800bca2:	f7ff fcd9 	bl	800b658 <SD_disk_initialize>
 800bca6:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 800bca8:	4618      	mov	r0, r3
 800bcaa:	3708      	adds	r7, #8
 800bcac:	46bd      	mov	sp, r7
 800bcae:	bd80      	pop	{r7, pc}

0800bcb0 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 800bcb0:	b580      	push	{r7, lr}
 800bcb2:	b082      	sub	sp, #8
 800bcb4:	af00      	add	r7, sp, #0
 800bcb6:	4603      	mov	r3, r0
 800bcb8:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
	return SD_disk_status(pdrv);
 800bcba:	79fb      	ldrb	r3, [r7, #7]
 800bcbc:	4618      	mov	r0, r3
 800bcbe:	f7ff fdb7 	bl	800b830 <SD_disk_status>
 800bcc2:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 800bcc4:	4618      	mov	r0, r3
 800bcc6:	3708      	adds	r7, #8
 800bcc8:	46bd      	mov	sp, r7
 800bcca:	bd80      	pop	{r7, pc}

0800bccc <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 800bccc:	b580      	push	{r7, lr}
 800bcce:	b084      	sub	sp, #16
 800bcd0:	af00      	add	r7, sp, #0
 800bcd2:	60b9      	str	r1, [r7, #8]
 800bcd4:	607a      	str	r2, [r7, #4]
 800bcd6:	603b      	str	r3, [r7, #0]
 800bcd8:	4603      	mov	r3, r0
 800bcda:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
	return SD_disk_read(pdrv, buff, sector, count);
 800bcdc:	7bf8      	ldrb	r0, [r7, #15]
 800bcde:	683b      	ldr	r3, [r7, #0]
 800bce0:	687a      	ldr	r2, [r7, #4]
 800bce2:	68b9      	ldr	r1, [r7, #8]
 800bce4:	f7ff fdba 	bl	800b85c <SD_disk_read>
 800bce8:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 800bcea:	4618      	mov	r0, r3
 800bcec:	3710      	adds	r7, #16
 800bcee:	46bd      	mov	sp, r7
 800bcf0:	bd80      	pop	{r7, pc}

0800bcf2 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 800bcf2:	b580      	push	{r7, lr}
 800bcf4:	b084      	sub	sp, #16
 800bcf6:	af00      	add	r7, sp, #0
 800bcf8:	60b9      	str	r1, [r7, #8]
 800bcfa:	607a      	str	r2, [r7, #4]
 800bcfc:	603b      	str	r3, [r7, #0]
 800bcfe:	4603      	mov	r3, r0
 800bd00:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
	return SD_disk_write(pdrv, buff, sector, count);
 800bd02:	7bf8      	ldrb	r0, [r7, #15]
 800bd04:	683b      	ldr	r3, [r7, #0]
 800bd06:	687a      	ldr	r2, [r7, #4]
 800bd08:	68b9      	ldr	r1, [r7, #8]
 800bd0a:	f7ff fe11 	bl	800b930 <SD_disk_write>
 800bd0e:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 800bd10:	4618      	mov	r0, r3
 800bd12:	3710      	adds	r7, #16
 800bd14:	46bd      	mov	sp, r7
 800bd16:	bd80      	pop	{r7, pc}

0800bd18 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 800bd18:	b580      	push	{r7, lr}
 800bd1a:	b082      	sub	sp, #8
 800bd1c:	af00      	add	r7, sp, #0
 800bd1e:	4603      	mov	r3, r0
 800bd20:	603a      	str	r2, [r7, #0]
 800bd22:	71fb      	strb	r3, [r7, #7]
 800bd24:	460b      	mov	r3, r1
 800bd26:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
	return SD_disk_ioctl(pdrv, cmd, buff);
 800bd28:	79b9      	ldrb	r1, [r7, #6]
 800bd2a:	79fb      	ldrb	r3, [r7, #7]
 800bd2c:	683a      	ldr	r2, [r7, #0]
 800bd2e:	4618      	mov	r0, r3
 800bd30:	f7ff fe82 	bl	800ba38 <SD_disk_ioctl>
 800bd34:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 800bd36:	4618      	mov	r0, r3
 800bd38:	3708      	adds	r7, #8
 800bd3a:	46bd      	mov	sp, r7
 800bd3c:	bd80      	pop	{r7, pc}
	...

0800bd40 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800bd40:	b580      	push	{r7, lr}
 800bd42:	b084      	sub	sp, #16
 800bd44:	af00      	add	r7, sp, #0
 800bd46:	4603      	mov	r3, r0
 800bd48:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800bd4a:	79fb      	ldrb	r3, [r7, #7]
 800bd4c:	4a08      	ldr	r2, [pc, #32]	@ (800bd70 <disk_status+0x30>)
 800bd4e:	009b      	lsls	r3, r3, #2
 800bd50:	4413      	add	r3, r2
 800bd52:	685b      	ldr	r3, [r3, #4]
 800bd54:	685b      	ldr	r3, [r3, #4]
 800bd56:	79fa      	ldrb	r2, [r7, #7]
 800bd58:	4905      	ldr	r1, [pc, #20]	@ (800bd70 <disk_status+0x30>)
 800bd5a:	440a      	add	r2, r1
 800bd5c:	7a12      	ldrb	r2, [r2, #8]
 800bd5e:	4610      	mov	r0, r2
 800bd60:	4798      	blx	r3
 800bd62:	4603      	mov	r3, r0
 800bd64:	73fb      	strb	r3, [r7, #15]
  return stat;
 800bd66:	7bfb      	ldrb	r3, [r7, #15]
}
 800bd68:	4618      	mov	r0, r3
 800bd6a:	3710      	adds	r7, #16
 800bd6c:	46bd      	mov	sp, r7
 800bd6e:	bd80      	pop	{r7, pc}
 800bd70:	200163dc 	.word	0x200163dc

0800bd74 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800bd74:	b580      	push	{r7, lr}
 800bd76:	b084      	sub	sp, #16
 800bd78:	af00      	add	r7, sp, #0
 800bd7a:	4603      	mov	r3, r0
 800bd7c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800bd7e:	2300      	movs	r3, #0
 800bd80:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800bd82:	79fb      	ldrb	r3, [r7, #7]
 800bd84:	4a0e      	ldr	r2, [pc, #56]	@ (800bdc0 <disk_initialize+0x4c>)
 800bd86:	5cd3      	ldrb	r3, [r2, r3]
 800bd88:	2b00      	cmp	r3, #0
 800bd8a:	d114      	bne.n	800bdb6 <disk_initialize+0x42>
  {
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800bd8c:	79fb      	ldrb	r3, [r7, #7]
 800bd8e:	4a0c      	ldr	r2, [pc, #48]	@ (800bdc0 <disk_initialize+0x4c>)
 800bd90:	009b      	lsls	r3, r3, #2
 800bd92:	4413      	add	r3, r2
 800bd94:	685b      	ldr	r3, [r3, #4]
 800bd96:	681b      	ldr	r3, [r3, #0]
 800bd98:	79fa      	ldrb	r2, [r7, #7]
 800bd9a:	4909      	ldr	r1, [pc, #36]	@ (800bdc0 <disk_initialize+0x4c>)
 800bd9c:	440a      	add	r2, r1
 800bd9e:	7a12      	ldrb	r2, [r2, #8]
 800bda0:	4610      	mov	r0, r2
 800bda2:	4798      	blx	r3
 800bda4:	4603      	mov	r3, r0
 800bda6:	73fb      	strb	r3, [r7, #15]
    if(stat == RES_OK)
 800bda8:	7bfb      	ldrb	r3, [r7, #15]
 800bdaa:	2b00      	cmp	r3, #0
 800bdac:	d103      	bne.n	800bdb6 <disk_initialize+0x42>
    {
      disk.is_initialized[pdrv] = 1;
 800bdae:	79fb      	ldrb	r3, [r7, #7]
 800bdb0:	4a03      	ldr	r2, [pc, #12]	@ (800bdc0 <disk_initialize+0x4c>)
 800bdb2:	2101      	movs	r1, #1
 800bdb4:	54d1      	strb	r1, [r2, r3]
    }
  }
  return stat;
 800bdb6:	7bfb      	ldrb	r3, [r7, #15]
}
 800bdb8:	4618      	mov	r0, r3
 800bdba:	3710      	adds	r7, #16
 800bdbc:	46bd      	mov	sp, r7
 800bdbe:	bd80      	pop	{r7, pc}
 800bdc0:	200163dc 	.word	0x200163dc

0800bdc4 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800bdc4:	b590      	push	{r4, r7, lr}
 800bdc6:	b087      	sub	sp, #28
 800bdc8:	af00      	add	r7, sp, #0
 800bdca:	60b9      	str	r1, [r7, #8]
 800bdcc:	607a      	str	r2, [r7, #4]
 800bdce:	603b      	str	r3, [r7, #0]
 800bdd0:	4603      	mov	r3, r0
 800bdd2:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800bdd4:	7bfb      	ldrb	r3, [r7, #15]
 800bdd6:	4a0a      	ldr	r2, [pc, #40]	@ (800be00 <disk_read+0x3c>)
 800bdd8:	009b      	lsls	r3, r3, #2
 800bdda:	4413      	add	r3, r2
 800bddc:	685b      	ldr	r3, [r3, #4]
 800bdde:	689c      	ldr	r4, [r3, #8]
 800bde0:	7bfb      	ldrb	r3, [r7, #15]
 800bde2:	4a07      	ldr	r2, [pc, #28]	@ (800be00 <disk_read+0x3c>)
 800bde4:	4413      	add	r3, r2
 800bde6:	7a18      	ldrb	r0, [r3, #8]
 800bde8:	683b      	ldr	r3, [r7, #0]
 800bdea:	687a      	ldr	r2, [r7, #4]
 800bdec:	68b9      	ldr	r1, [r7, #8]
 800bdee:	47a0      	blx	r4
 800bdf0:	4603      	mov	r3, r0
 800bdf2:	75fb      	strb	r3, [r7, #23]
  return res;
 800bdf4:	7dfb      	ldrb	r3, [r7, #23]
}
 800bdf6:	4618      	mov	r0, r3
 800bdf8:	371c      	adds	r7, #28
 800bdfa:	46bd      	mov	sp, r7
 800bdfc:	bd90      	pop	{r4, r7, pc}
 800bdfe:	bf00      	nop
 800be00:	200163dc 	.word	0x200163dc

0800be04 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800be04:	b590      	push	{r4, r7, lr}
 800be06:	b087      	sub	sp, #28
 800be08:	af00      	add	r7, sp, #0
 800be0a:	60b9      	str	r1, [r7, #8]
 800be0c:	607a      	str	r2, [r7, #4]
 800be0e:	603b      	str	r3, [r7, #0]
 800be10:	4603      	mov	r3, r0
 800be12:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800be14:	7bfb      	ldrb	r3, [r7, #15]
 800be16:	4a0a      	ldr	r2, [pc, #40]	@ (800be40 <disk_write+0x3c>)
 800be18:	009b      	lsls	r3, r3, #2
 800be1a:	4413      	add	r3, r2
 800be1c:	685b      	ldr	r3, [r3, #4]
 800be1e:	68dc      	ldr	r4, [r3, #12]
 800be20:	7bfb      	ldrb	r3, [r7, #15]
 800be22:	4a07      	ldr	r2, [pc, #28]	@ (800be40 <disk_write+0x3c>)
 800be24:	4413      	add	r3, r2
 800be26:	7a18      	ldrb	r0, [r3, #8]
 800be28:	683b      	ldr	r3, [r7, #0]
 800be2a:	687a      	ldr	r2, [r7, #4]
 800be2c:	68b9      	ldr	r1, [r7, #8]
 800be2e:	47a0      	blx	r4
 800be30:	4603      	mov	r3, r0
 800be32:	75fb      	strb	r3, [r7, #23]
  return res;
 800be34:	7dfb      	ldrb	r3, [r7, #23]
}
 800be36:	4618      	mov	r0, r3
 800be38:	371c      	adds	r7, #28
 800be3a:	46bd      	mov	sp, r7
 800be3c:	bd90      	pop	{r4, r7, pc}
 800be3e:	bf00      	nop
 800be40:	200163dc 	.word	0x200163dc

0800be44 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800be44:	b580      	push	{r7, lr}
 800be46:	b084      	sub	sp, #16
 800be48:	af00      	add	r7, sp, #0
 800be4a:	4603      	mov	r3, r0
 800be4c:	603a      	str	r2, [r7, #0]
 800be4e:	71fb      	strb	r3, [r7, #7]
 800be50:	460b      	mov	r3, r1
 800be52:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800be54:	79fb      	ldrb	r3, [r7, #7]
 800be56:	4a09      	ldr	r2, [pc, #36]	@ (800be7c <disk_ioctl+0x38>)
 800be58:	009b      	lsls	r3, r3, #2
 800be5a:	4413      	add	r3, r2
 800be5c:	685b      	ldr	r3, [r3, #4]
 800be5e:	691b      	ldr	r3, [r3, #16]
 800be60:	79fa      	ldrb	r2, [r7, #7]
 800be62:	4906      	ldr	r1, [pc, #24]	@ (800be7c <disk_ioctl+0x38>)
 800be64:	440a      	add	r2, r1
 800be66:	7a10      	ldrb	r0, [r2, #8]
 800be68:	79b9      	ldrb	r1, [r7, #6]
 800be6a:	683a      	ldr	r2, [r7, #0]
 800be6c:	4798      	blx	r3
 800be6e:	4603      	mov	r3, r0
 800be70:	73fb      	strb	r3, [r7, #15]
  return res;
 800be72:	7bfb      	ldrb	r3, [r7, #15]
}
 800be74:	4618      	mov	r0, r3
 800be76:	3710      	adds	r7, #16
 800be78:	46bd      	mov	sp, r7
 800be7a:	bd80      	pop	{r7, pc}
 800be7c:	200163dc 	.word	0x200163dc

0800be80 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800be80:	b480      	push	{r7}
 800be82:	b085      	sub	sp, #20
 800be84:	af00      	add	r7, sp, #0
 800be86:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800be88:	687b      	ldr	r3, [r7, #4]
 800be8a:	3301      	adds	r3, #1
 800be8c:	781b      	ldrb	r3, [r3, #0]
 800be8e:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800be90:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800be94:	021b      	lsls	r3, r3, #8
 800be96:	b21a      	sxth	r2, r3
 800be98:	687b      	ldr	r3, [r7, #4]
 800be9a:	781b      	ldrb	r3, [r3, #0]
 800be9c:	b21b      	sxth	r3, r3
 800be9e:	4313      	orrs	r3, r2
 800bea0:	b21b      	sxth	r3, r3
 800bea2:	81fb      	strh	r3, [r7, #14]
	return rv;
 800bea4:	89fb      	ldrh	r3, [r7, #14]
}
 800bea6:	4618      	mov	r0, r3
 800bea8:	3714      	adds	r7, #20
 800beaa:	46bd      	mov	sp, r7
 800beac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800beb0:	4770      	bx	lr

0800beb2 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800beb2:	b480      	push	{r7}
 800beb4:	b085      	sub	sp, #20
 800beb6:	af00      	add	r7, sp, #0
 800beb8:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800beba:	687b      	ldr	r3, [r7, #4]
 800bebc:	3303      	adds	r3, #3
 800bebe:	781b      	ldrb	r3, [r3, #0]
 800bec0:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800bec2:	68fb      	ldr	r3, [r7, #12]
 800bec4:	021b      	lsls	r3, r3, #8
 800bec6:	687a      	ldr	r2, [r7, #4]
 800bec8:	3202      	adds	r2, #2
 800beca:	7812      	ldrb	r2, [r2, #0]
 800becc:	4313      	orrs	r3, r2
 800bece:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800bed0:	68fb      	ldr	r3, [r7, #12]
 800bed2:	021b      	lsls	r3, r3, #8
 800bed4:	687a      	ldr	r2, [r7, #4]
 800bed6:	3201      	adds	r2, #1
 800bed8:	7812      	ldrb	r2, [r2, #0]
 800beda:	4313      	orrs	r3, r2
 800bedc:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800bede:	68fb      	ldr	r3, [r7, #12]
 800bee0:	021b      	lsls	r3, r3, #8
 800bee2:	687a      	ldr	r2, [r7, #4]
 800bee4:	7812      	ldrb	r2, [r2, #0]
 800bee6:	4313      	orrs	r3, r2
 800bee8:	60fb      	str	r3, [r7, #12]
	return rv;
 800beea:	68fb      	ldr	r3, [r7, #12]
}
 800beec:	4618      	mov	r0, r3
 800beee:	3714      	adds	r7, #20
 800bef0:	46bd      	mov	sp, r7
 800bef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bef6:	4770      	bx	lr

0800bef8 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800bef8:	b480      	push	{r7}
 800befa:	b083      	sub	sp, #12
 800befc:	af00      	add	r7, sp, #0
 800befe:	6078      	str	r0, [r7, #4]
 800bf00:	460b      	mov	r3, r1
 800bf02:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800bf04:	687b      	ldr	r3, [r7, #4]
 800bf06:	1c5a      	adds	r2, r3, #1
 800bf08:	607a      	str	r2, [r7, #4]
 800bf0a:	887a      	ldrh	r2, [r7, #2]
 800bf0c:	b2d2      	uxtb	r2, r2
 800bf0e:	701a      	strb	r2, [r3, #0]
 800bf10:	887b      	ldrh	r3, [r7, #2]
 800bf12:	0a1b      	lsrs	r3, r3, #8
 800bf14:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800bf16:	687b      	ldr	r3, [r7, #4]
 800bf18:	1c5a      	adds	r2, r3, #1
 800bf1a:	607a      	str	r2, [r7, #4]
 800bf1c:	887a      	ldrh	r2, [r7, #2]
 800bf1e:	b2d2      	uxtb	r2, r2
 800bf20:	701a      	strb	r2, [r3, #0]
}
 800bf22:	bf00      	nop
 800bf24:	370c      	adds	r7, #12
 800bf26:	46bd      	mov	sp, r7
 800bf28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf2c:	4770      	bx	lr

0800bf2e <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800bf2e:	b480      	push	{r7}
 800bf30:	b083      	sub	sp, #12
 800bf32:	af00      	add	r7, sp, #0
 800bf34:	6078      	str	r0, [r7, #4]
 800bf36:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800bf38:	687b      	ldr	r3, [r7, #4]
 800bf3a:	1c5a      	adds	r2, r3, #1
 800bf3c:	607a      	str	r2, [r7, #4]
 800bf3e:	683a      	ldr	r2, [r7, #0]
 800bf40:	b2d2      	uxtb	r2, r2
 800bf42:	701a      	strb	r2, [r3, #0]
 800bf44:	683b      	ldr	r3, [r7, #0]
 800bf46:	0a1b      	lsrs	r3, r3, #8
 800bf48:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800bf4a:	687b      	ldr	r3, [r7, #4]
 800bf4c:	1c5a      	adds	r2, r3, #1
 800bf4e:	607a      	str	r2, [r7, #4]
 800bf50:	683a      	ldr	r2, [r7, #0]
 800bf52:	b2d2      	uxtb	r2, r2
 800bf54:	701a      	strb	r2, [r3, #0]
 800bf56:	683b      	ldr	r3, [r7, #0]
 800bf58:	0a1b      	lsrs	r3, r3, #8
 800bf5a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800bf5c:	687b      	ldr	r3, [r7, #4]
 800bf5e:	1c5a      	adds	r2, r3, #1
 800bf60:	607a      	str	r2, [r7, #4]
 800bf62:	683a      	ldr	r2, [r7, #0]
 800bf64:	b2d2      	uxtb	r2, r2
 800bf66:	701a      	strb	r2, [r3, #0]
 800bf68:	683b      	ldr	r3, [r7, #0]
 800bf6a:	0a1b      	lsrs	r3, r3, #8
 800bf6c:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800bf6e:	687b      	ldr	r3, [r7, #4]
 800bf70:	1c5a      	adds	r2, r3, #1
 800bf72:	607a      	str	r2, [r7, #4]
 800bf74:	683a      	ldr	r2, [r7, #0]
 800bf76:	b2d2      	uxtb	r2, r2
 800bf78:	701a      	strb	r2, [r3, #0]
}
 800bf7a:	bf00      	nop
 800bf7c:	370c      	adds	r7, #12
 800bf7e:	46bd      	mov	sp, r7
 800bf80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf84:	4770      	bx	lr

0800bf86 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800bf86:	b480      	push	{r7}
 800bf88:	b087      	sub	sp, #28
 800bf8a:	af00      	add	r7, sp, #0
 800bf8c:	60f8      	str	r0, [r7, #12]
 800bf8e:	60b9      	str	r1, [r7, #8]
 800bf90:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800bf92:	68fb      	ldr	r3, [r7, #12]
 800bf94:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800bf96:	68bb      	ldr	r3, [r7, #8]
 800bf98:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800bf9a:	687b      	ldr	r3, [r7, #4]
 800bf9c:	2b00      	cmp	r3, #0
 800bf9e:	d00d      	beq.n	800bfbc <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800bfa0:	693a      	ldr	r2, [r7, #16]
 800bfa2:	1c53      	adds	r3, r2, #1
 800bfa4:	613b      	str	r3, [r7, #16]
 800bfa6:	697b      	ldr	r3, [r7, #20]
 800bfa8:	1c59      	adds	r1, r3, #1
 800bfaa:	6179      	str	r1, [r7, #20]
 800bfac:	7812      	ldrb	r2, [r2, #0]
 800bfae:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800bfb0:	687b      	ldr	r3, [r7, #4]
 800bfb2:	3b01      	subs	r3, #1
 800bfb4:	607b      	str	r3, [r7, #4]
 800bfb6:	687b      	ldr	r3, [r7, #4]
 800bfb8:	2b00      	cmp	r3, #0
 800bfba:	d1f1      	bne.n	800bfa0 <mem_cpy+0x1a>
	}
}
 800bfbc:	bf00      	nop
 800bfbe:	371c      	adds	r7, #28
 800bfc0:	46bd      	mov	sp, r7
 800bfc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfc6:	4770      	bx	lr

0800bfc8 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800bfc8:	b480      	push	{r7}
 800bfca:	b087      	sub	sp, #28
 800bfcc:	af00      	add	r7, sp, #0
 800bfce:	60f8      	str	r0, [r7, #12]
 800bfd0:	60b9      	str	r1, [r7, #8]
 800bfd2:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800bfd4:	68fb      	ldr	r3, [r7, #12]
 800bfd6:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800bfd8:	697b      	ldr	r3, [r7, #20]
 800bfda:	1c5a      	adds	r2, r3, #1
 800bfdc:	617a      	str	r2, [r7, #20]
 800bfde:	68ba      	ldr	r2, [r7, #8]
 800bfe0:	b2d2      	uxtb	r2, r2
 800bfe2:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800bfe4:	687b      	ldr	r3, [r7, #4]
 800bfe6:	3b01      	subs	r3, #1
 800bfe8:	607b      	str	r3, [r7, #4]
 800bfea:	687b      	ldr	r3, [r7, #4]
 800bfec:	2b00      	cmp	r3, #0
 800bfee:	d1f3      	bne.n	800bfd8 <mem_set+0x10>
}
 800bff0:	bf00      	nop
 800bff2:	bf00      	nop
 800bff4:	371c      	adds	r7, #28
 800bff6:	46bd      	mov	sp, r7
 800bff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bffc:	4770      	bx	lr

0800bffe <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800bffe:	b480      	push	{r7}
 800c000:	b089      	sub	sp, #36	@ 0x24
 800c002:	af00      	add	r7, sp, #0
 800c004:	60f8      	str	r0, [r7, #12]
 800c006:	60b9      	str	r1, [r7, #8]
 800c008:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800c00a:	68fb      	ldr	r3, [r7, #12]
 800c00c:	61fb      	str	r3, [r7, #28]
 800c00e:	68bb      	ldr	r3, [r7, #8]
 800c010:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800c012:	2300      	movs	r3, #0
 800c014:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800c016:	69fb      	ldr	r3, [r7, #28]
 800c018:	1c5a      	adds	r2, r3, #1
 800c01a:	61fa      	str	r2, [r7, #28]
 800c01c:	781b      	ldrb	r3, [r3, #0]
 800c01e:	4619      	mov	r1, r3
 800c020:	69bb      	ldr	r3, [r7, #24]
 800c022:	1c5a      	adds	r2, r3, #1
 800c024:	61ba      	str	r2, [r7, #24]
 800c026:	781b      	ldrb	r3, [r3, #0]
 800c028:	1acb      	subs	r3, r1, r3
 800c02a:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800c02c:	687b      	ldr	r3, [r7, #4]
 800c02e:	3b01      	subs	r3, #1
 800c030:	607b      	str	r3, [r7, #4]
 800c032:	687b      	ldr	r3, [r7, #4]
 800c034:	2b00      	cmp	r3, #0
 800c036:	d002      	beq.n	800c03e <mem_cmp+0x40>
 800c038:	697b      	ldr	r3, [r7, #20]
 800c03a:	2b00      	cmp	r3, #0
 800c03c:	d0eb      	beq.n	800c016 <mem_cmp+0x18>

	return r;
 800c03e:	697b      	ldr	r3, [r7, #20]
}
 800c040:	4618      	mov	r0, r3
 800c042:	3724      	adds	r7, #36	@ 0x24
 800c044:	46bd      	mov	sp, r7
 800c046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c04a:	4770      	bx	lr

0800c04c <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800c04c:	b480      	push	{r7}
 800c04e:	b083      	sub	sp, #12
 800c050:	af00      	add	r7, sp, #0
 800c052:	6078      	str	r0, [r7, #4]
 800c054:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800c056:	e002      	b.n	800c05e <chk_chr+0x12>
 800c058:	687b      	ldr	r3, [r7, #4]
 800c05a:	3301      	adds	r3, #1
 800c05c:	607b      	str	r3, [r7, #4]
 800c05e:	687b      	ldr	r3, [r7, #4]
 800c060:	781b      	ldrb	r3, [r3, #0]
 800c062:	2b00      	cmp	r3, #0
 800c064:	d005      	beq.n	800c072 <chk_chr+0x26>
 800c066:	687b      	ldr	r3, [r7, #4]
 800c068:	781b      	ldrb	r3, [r3, #0]
 800c06a:	461a      	mov	r2, r3
 800c06c:	683b      	ldr	r3, [r7, #0]
 800c06e:	4293      	cmp	r3, r2
 800c070:	d1f2      	bne.n	800c058 <chk_chr+0xc>
	return *str;
 800c072:	687b      	ldr	r3, [r7, #4]
 800c074:	781b      	ldrb	r3, [r3, #0]
}
 800c076:	4618      	mov	r0, r3
 800c078:	370c      	adds	r7, #12
 800c07a:	46bd      	mov	sp, r7
 800c07c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c080:	4770      	bx	lr
	...

0800c084 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800c084:	b480      	push	{r7}
 800c086:	b085      	sub	sp, #20
 800c088:	af00      	add	r7, sp, #0
 800c08a:	6078      	str	r0, [r7, #4]
 800c08c:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800c08e:	2300      	movs	r3, #0
 800c090:	60bb      	str	r3, [r7, #8]
 800c092:	68bb      	ldr	r3, [r7, #8]
 800c094:	60fb      	str	r3, [r7, #12]
 800c096:	e029      	b.n	800c0ec <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800c098:	4a27      	ldr	r2, [pc, #156]	@ (800c138 <chk_lock+0xb4>)
 800c09a:	68fb      	ldr	r3, [r7, #12]
 800c09c:	011b      	lsls	r3, r3, #4
 800c09e:	4413      	add	r3, r2
 800c0a0:	681b      	ldr	r3, [r3, #0]
 800c0a2:	2b00      	cmp	r3, #0
 800c0a4:	d01d      	beq.n	800c0e2 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800c0a6:	4a24      	ldr	r2, [pc, #144]	@ (800c138 <chk_lock+0xb4>)
 800c0a8:	68fb      	ldr	r3, [r7, #12]
 800c0aa:	011b      	lsls	r3, r3, #4
 800c0ac:	4413      	add	r3, r2
 800c0ae:	681a      	ldr	r2, [r3, #0]
 800c0b0:	687b      	ldr	r3, [r7, #4]
 800c0b2:	681b      	ldr	r3, [r3, #0]
 800c0b4:	429a      	cmp	r2, r3
 800c0b6:	d116      	bne.n	800c0e6 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800c0b8:	4a1f      	ldr	r2, [pc, #124]	@ (800c138 <chk_lock+0xb4>)
 800c0ba:	68fb      	ldr	r3, [r7, #12]
 800c0bc:	011b      	lsls	r3, r3, #4
 800c0be:	4413      	add	r3, r2
 800c0c0:	3304      	adds	r3, #4
 800c0c2:	681a      	ldr	r2, [r3, #0]
 800c0c4:	687b      	ldr	r3, [r7, #4]
 800c0c6:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800c0c8:	429a      	cmp	r2, r3
 800c0ca:	d10c      	bne.n	800c0e6 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800c0cc:	4a1a      	ldr	r2, [pc, #104]	@ (800c138 <chk_lock+0xb4>)
 800c0ce:	68fb      	ldr	r3, [r7, #12]
 800c0d0:	011b      	lsls	r3, r3, #4
 800c0d2:	4413      	add	r3, r2
 800c0d4:	3308      	adds	r3, #8
 800c0d6:	681a      	ldr	r2, [r3, #0]
 800c0d8:	687b      	ldr	r3, [r7, #4]
 800c0da:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800c0dc:	429a      	cmp	r2, r3
 800c0de:	d102      	bne.n	800c0e6 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800c0e0:	e007      	b.n	800c0f2 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800c0e2:	2301      	movs	r3, #1
 800c0e4:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800c0e6:	68fb      	ldr	r3, [r7, #12]
 800c0e8:	3301      	adds	r3, #1
 800c0ea:	60fb      	str	r3, [r7, #12]
 800c0ec:	68fb      	ldr	r3, [r7, #12]
 800c0ee:	2b01      	cmp	r3, #1
 800c0f0:	d9d2      	bls.n	800c098 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800c0f2:	68fb      	ldr	r3, [r7, #12]
 800c0f4:	2b02      	cmp	r3, #2
 800c0f6:	d109      	bne.n	800c10c <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800c0f8:	68bb      	ldr	r3, [r7, #8]
 800c0fa:	2b00      	cmp	r3, #0
 800c0fc:	d102      	bne.n	800c104 <chk_lock+0x80>
 800c0fe:	683b      	ldr	r3, [r7, #0]
 800c100:	2b02      	cmp	r3, #2
 800c102:	d101      	bne.n	800c108 <chk_lock+0x84>
 800c104:	2300      	movs	r3, #0
 800c106:	e010      	b.n	800c12a <chk_lock+0xa6>
 800c108:	2312      	movs	r3, #18
 800c10a:	e00e      	b.n	800c12a <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800c10c:	683b      	ldr	r3, [r7, #0]
 800c10e:	2b00      	cmp	r3, #0
 800c110:	d108      	bne.n	800c124 <chk_lock+0xa0>
 800c112:	4a09      	ldr	r2, [pc, #36]	@ (800c138 <chk_lock+0xb4>)
 800c114:	68fb      	ldr	r3, [r7, #12]
 800c116:	011b      	lsls	r3, r3, #4
 800c118:	4413      	add	r3, r2
 800c11a:	330c      	adds	r3, #12
 800c11c:	881b      	ldrh	r3, [r3, #0]
 800c11e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800c122:	d101      	bne.n	800c128 <chk_lock+0xa4>
 800c124:	2310      	movs	r3, #16
 800c126:	e000      	b.n	800c12a <chk_lock+0xa6>
 800c128:	2300      	movs	r3, #0
}
 800c12a:	4618      	mov	r0, r3
 800c12c:	3714      	adds	r7, #20
 800c12e:	46bd      	mov	sp, r7
 800c130:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c134:	4770      	bx	lr
 800c136:	bf00      	nop
 800c138:	200161bc 	.word	0x200161bc

0800c13c <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800c13c:	b480      	push	{r7}
 800c13e:	b083      	sub	sp, #12
 800c140:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800c142:	2300      	movs	r3, #0
 800c144:	607b      	str	r3, [r7, #4]
 800c146:	e002      	b.n	800c14e <enq_lock+0x12>
 800c148:	687b      	ldr	r3, [r7, #4]
 800c14a:	3301      	adds	r3, #1
 800c14c:	607b      	str	r3, [r7, #4]
 800c14e:	687b      	ldr	r3, [r7, #4]
 800c150:	2b01      	cmp	r3, #1
 800c152:	d806      	bhi.n	800c162 <enq_lock+0x26>
 800c154:	4a09      	ldr	r2, [pc, #36]	@ (800c17c <enq_lock+0x40>)
 800c156:	687b      	ldr	r3, [r7, #4]
 800c158:	011b      	lsls	r3, r3, #4
 800c15a:	4413      	add	r3, r2
 800c15c:	681b      	ldr	r3, [r3, #0]
 800c15e:	2b00      	cmp	r3, #0
 800c160:	d1f2      	bne.n	800c148 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800c162:	687b      	ldr	r3, [r7, #4]
 800c164:	2b02      	cmp	r3, #2
 800c166:	bf14      	ite	ne
 800c168:	2301      	movne	r3, #1
 800c16a:	2300      	moveq	r3, #0
 800c16c:	b2db      	uxtb	r3, r3
}
 800c16e:	4618      	mov	r0, r3
 800c170:	370c      	adds	r7, #12
 800c172:	46bd      	mov	sp, r7
 800c174:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c178:	4770      	bx	lr
 800c17a:	bf00      	nop
 800c17c:	200161bc 	.word	0x200161bc

0800c180 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800c180:	b480      	push	{r7}
 800c182:	b085      	sub	sp, #20
 800c184:	af00      	add	r7, sp, #0
 800c186:	6078      	str	r0, [r7, #4]
 800c188:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800c18a:	2300      	movs	r3, #0
 800c18c:	60fb      	str	r3, [r7, #12]
 800c18e:	e01f      	b.n	800c1d0 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800c190:	4a41      	ldr	r2, [pc, #260]	@ (800c298 <inc_lock+0x118>)
 800c192:	68fb      	ldr	r3, [r7, #12]
 800c194:	011b      	lsls	r3, r3, #4
 800c196:	4413      	add	r3, r2
 800c198:	681a      	ldr	r2, [r3, #0]
 800c19a:	687b      	ldr	r3, [r7, #4]
 800c19c:	681b      	ldr	r3, [r3, #0]
 800c19e:	429a      	cmp	r2, r3
 800c1a0:	d113      	bne.n	800c1ca <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800c1a2:	4a3d      	ldr	r2, [pc, #244]	@ (800c298 <inc_lock+0x118>)
 800c1a4:	68fb      	ldr	r3, [r7, #12]
 800c1a6:	011b      	lsls	r3, r3, #4
 800c1a8:	4413      	add	r3, r2
 800c1aa:	3304      	adds	r3, #4
 800c1ac:	681a      	ldr	r2, [r3, #0]
 800c1ae:	687b      	ldr	r3, [r7, #4]
 800c1b0:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800c1b2:	429a      	cmp	r2, r3
 800c1b4:	d109      	bne.n	800c1ca <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800c1b6:	4a38      	ldr	r2, [pc, #224]	@ (800c298 <inc_lock+0x118>)
 800c1b8:	68fb      	ldr	r3, [r7, #12]
 800c1ba:	011b      	lsls	r3, r3, #4
 800c1bc:	4413      	add	r3, r2
 800c1be:	3308      	adds	r3, #8
 800c1c0:	681a      	ldr	r2, [r3, #0]
 800c1c2:	687b      	ldr	r3, [r7, #4]
 800c1c4:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800c1c6:	429a      	cmp	r2, r3
 800c1c8:	d006      	beq.n	800c1d8 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800c1ca:	68fb      	ldr	r3, [r7, #12]
 800c1cc:	3301      	adds	r3, #1
 800c1ce:	60fb      	str	r3, [r7, #12]
 800c1d0:	68fb      	ldr	r3, [r7, #12]
 800c1d2:	2b01      	cmp	r3, #1
 800c1d4:	d9dc      	bls.n	800c190 <inc_lock+0x10>
 800c1d6:	e000      	b.n	800c1da <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800c1d8:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800c1da:	68fb      	ldr	r3, [r7, #12]
 800c1dc:	2b02      	cmp	r3, #2
 800c1de:	d132      	bne.n	800c246 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800c1e0:	2300      	movs	r3, #0
 800c1e2:	60fb      	str	r3, [r7, #12]
 800c1e4:	e002      	b.n	800c1ec <inc_lock+0x6c>
 800c1e6:	68fb      	ldr	r3, [r7, #12]
 800c1e8:	3301      	adds	r3, #1
 800c1ea:	60fb      	str	r3, [r7, #12]
 800c1ec:	68fb      	ldr	r3, [r7, #12]
 800c1ee:	2b01      	cmp	r3, #1
 800c1f0:	d806      	bhi.n	800c200 <inc_lock+0x80>
 800c1f2:	4a29      	ldr	r2, [pc, #164]	@ (800c298 <inc_lock+0x118>)
 800c1f4:	68fb      	ldr	r3, [r7, #12]
 800c1f6:	011b      	lsls	r3, r3, #4
 800c1f8:	4413      	add	r3, r2
 800c1fa:	681b      	ldr	r3, [r3, #0]
 800c1fc:	2b00      	cmp	r3, #0
 800c1fe:	d1f2      	bne.n	800c1e6 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800c200:	68fb      	ldr	r3, [r7, #12]
 800c202:	2b02      	cmp	r3, #2
 800c204:	d101      	bne.n	800c20a <inc_lock+0x8a>
 800c206:	2300      	movs	r3, #0
 800c208:	e040      	b.n	800c28c <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800c20a:	687b      	ldr	r3, [r7, #4]
 800c20c:	681a      	ldr	r2, [r3, #0]
 800c20e:	4922      	ldr	r1, [pc, #136]	@ (800c298 <inc_lock+0x118>)
 800c210:	68fb      	ldr	r3, [r7, #12]
 800c212:	011b      	lsls	r3, r3, #4
 800c214:	440b      	add	r3, r1
 800c216:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800c218:	687b      	ldr	r3, [r7, #4]
 800c21a:	689a      	ldr	r2, [r3, #8]
 800c21c:	491e      	ldr	r1, [pc, #120]	@ (800c298 <inc_lock+0x118>)
 800c21e:	68fb      	ldr	r3, [r7, #12]
 800c220:	011b      	lsls	r3, r3, #4
 800c222:	440b      	add	r3, r1
 800c224:	3304      	adds	r3, #4
 800c226:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800c228:	687b      	ldr	r3, [r7, #4]
 800c22a:	695a      	ldr	r2, [r3, #20]
 800c22c:	491a      	ldr	r1, [pc, #104]	@ (800c298 <inc_lock+0x118>)
 800c22e:	68fb      	ldr	r3, [r7, #12]
 800c230:	011b      	lsls	r3, r3, #4
 800c232:	440b      	add	r3, r1
 800c234:	3308      	adds	r3, #8
 800c236:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800c238:	4a17      	ldr	r2, [pc, #92]	@ (800c298 <inc_lock+0x118>)
 800c23a:	68fb      	ldr	r3, [r7, #12]
 800c23c:	011b      	lsls	r3, r3, #4
 800c23e:	4413      	add	r3, r2
 800c240:	330c      	adds	r3, #12
 800c242:	2200      	movs	r2, #0
 800c244:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800c246:	683b      	ldr	r3, [r7, #0]
 800c248:	2b00      	cmp	r3, #0
 800c24a:	d009      	beq.n	800c260 <inc_lock+0xe0>
 800c24c:	4a12      	ldr	r2, [pc, #72]	@ (800c298 <inc_lock+0x118>)
 800c24e:	68fb      	ldr	r3, [r7, #12]
 800c250:	011b      	lsls	r3, r3, #4
 800c252:	4413      	add	r3, r2
 800c254:	330c      	adds	r3, #12
 800c256:	881b      	ldrh	r3, [r3, #0]
 800c258:	2b00      	cmp	r3, #0
 800c25a:	d001      	beq.n	800c260 <inc_lock+0xe0>
 800c25c:	2300      	movs	r3, #0
 800c25e:	e015      	b.n	800c28c <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800c260:	683b      	ldr	r3, [r7, #0]
 800c262:	2b00      	cmp	r3, #0
 800c264:	d108      	bne.n	800c278 <inc_lock+0xf8>
 800c266:	4a0c      	ldr	r2, [pc, #48]	@ (800c298 <inc_lock+0x118>)
 800c268:	68fb      	ldr	r3, [r7, #12]
 800c26a:	011b      	lsls	r3, r3, #4
 800c26c:	4413      	add	r3, r2
 800c26e:	330c      	adds	r3, #12
 800c270:	881b      	ldrh	r3, [r3, #0]
 800c272:	3301      	adds	r3, #1
 800c274:	b29a      	uxth	r2, r3
 800c276:	e001      	b.n	800c27c <inc_lock+0xfc>
 800c278:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800c27c:	4906      	ldr	r1, [pc, #24]	@ (800c298 <inc_lock+0x118>)
 800c27e:	68fb      	ldr	r3, [r7, #12]
 800c280:	011b      	lsls	r3, r3, #4
 800c282:	440b      	add	r3, r1
 800c284:	330c      	adds	r3, #12
 800c286:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800c288:	68fb      	ldr	r3, [r7, #12]
 800c28a:	3301      	adds	r3, #1
}
 800c28c:	4618      	mov	r0, r3
 800c28e:	3714      	adds	r7, #20
 800c290:	46bd      	mov	sp, r7
 800c292:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c296:	4770      	bx	lr
 800c298:	200161bc 	.word	0x200161bc

0800c29c <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800c29c:	b480      	push	{r7}
 800c29e:	b085      	sub	sp, #20
 800c2a0:	af00      	add	r7, sp, #0
 800c2a2:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800c2a4:	687b      	ldr	r3, [r7, #4]
 800c2a6:	3b01      	subs	r3, #1
 800c2a8:	607b      	str	r3, [r7, #4]
 800c2aa:	687b      	ldr	r3, [r7, #4]
 800c2ac:	2b01      	cmp	r3, #1
 800c2ae:	d825      	bhi.n	800c2fc <dec_lock+0x60>
		n = Files[i].ctr;
 800c2b0:	4a17      	ldr	r2, [pc, #92]	@ (800c310 <dec_lock+0x74>)
 800c2b2:	687b      	ldr	r3, [r7, #4]
 800c2b4:	011b      	lsls	r3, r3, #4
 800c2b6:	4413      	add	r3, r2
 800c2b8:	330c      	adds	r3, #12
 800c2ba:	881b      	ldrh	r3, [r3, #0]
 800c2bc:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800c2be:	89fb      	ldrh	r3, [r7, #14]
 800c2c0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800c2c4:	d101      	bne.n	800c2ca <dec_lock+0x2e>
 800c2c6:	2300      	movs	r3, #0
 800c2c8:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800c2ca:	89fb      	ldrh	r3, [r7, #14]
 800c2cc:	2b00      	cmp	r3, #0
 800c2ce:	d002      	beq.n	800c2d6 <dec_lock+0x3a>
 800c2d0:	89fb      	ldrh	r3, [r7, #14]
 800c2d2:	3b01      	subs	r3, #1
 800c2d4:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800c2d6:	4a0e      	ldr	r2, [pc, #56]	@ (800c310 <dec_lock+0x74>)
 800c2d8:	687b      	ldr	r3, [r7, #4]
 800c2da:	011b      	lsls	r3, r3, #4
 800c2dc:	4413      	add	r3, r2
 800c2de:	330c      	adds	r3, #12
 800c2e0:	89fa      	ldrh	r2, [r7, #14]
 800c2e2:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800c2e4:	89fb      	ldrh	r3, [r7, #14]
 800c2e6:	2b00      	cmp	r3, #0
 800c2e8:	d105      	bne.n	800c2f6 <dec_lock+0x5a>
 800c2ea:	4a09      	ldr	r2, [pc, #36]	@ (800c310 <dec_lock+0x74>)
 800c2ec:	687b      	ldr	r3, [r7, #4]
 800c2ee:	011b      	lsls	r3, r3, #4
 800c2f0:	4413      	add	r3, r2
 800c2f2:	2200      	movs	r2, #0
 800c2f4:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800c2f6:	2300      	movs	r3, #0
 800c2f8:	737b      	strb	r3, [r7, #13]
 800c2fa:	e001      	b.n	800c300 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800c2fc:	2302      	movs	r3, #2
 800c2fe:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800c300:	7b7b      	ldrb	r3, [r7, #13]
}
 800c302:	4618      	mov	r0, r3
 800c304:	3714      	adds	r7, #20
 800c306:	46bd      	mov	sp, r7
 800c308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c30c:	4770      	bx	lr
 800c30e:	bf00      	nop
 800c310:	200161bc 	.word	0x200161bc

0800c314 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800c314:	b480      	push	{r7}
 800c316:	b085      	sub	sp, #20
 800c318:	af00      	add	r7, sp, #0
 800c31a:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800c31c:	2300      	movs	r3, #0
 800c31e:	60fb      	str	r3, [r7, #12]
 800c320:	e010      	b.n	800c344 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800c322:	4a0d      	ldr	r2, [pc, #52]	@ (800c358 <clear_lock+0x44>)
 800c324:	68fb      	ldr	r3, [r7, #12]
 800c326:	011b      	lsls	r3, r3, #4
 800c328:	4413      	add	r3, r2
 800c32a:	681b      	ldr	r3, [r3, #0]
 800c32c:	687a      	ldr	r2, [r7, #4]
 800c32e:	429a      	cmp	r2, r3
 800c330:	d105      	bne.n	800c33e <clear_lock+0x2a>
 800c332:	4a09      	ldr	r2, [pc, #36]	@ (800c358 <clear_lock+0x44>)
 800c334:	68fb      	ldr	r3, [r7, #12]
 800c336:	011b      	lsls	r3, r3, #4
 800c338:	4413      	add	r3, r2
 800c33a:	2200      	movs	r2, #0
 800c33c:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800c33e:	68fb      	ldr	r3, [r7, #12]
 800c340:	3301      	adds	r3, #1
 800c342:	60fb      	str	r3, [r7, #12]
 800c344:	68fb      	ldr	r3, [r7, #12]
 800c346:	2b01      	cmp	r3, #1
 800c348:	d9eb      	bls.n	800c322 <clear_lock+0xe>
	}
}
 800c34a:	bf00      	nop
 800c34c:	bf00      	nop
 800c34e:	3714      	adds	r7, #20
 800c350:	46bd      	mov	sp, r7
 800c352:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c356:	4770      	bx	lr
 800c358:	200161bc 	.word	0x200161bc

0800c35c <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800c35c:	b580      	push	{r7, lr}
 800c35e:	b086      	sub	sp, #24
 800c360:	af00      	add	r7, sp, #0
 800c362:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800c364:	2300      	movs	r3, #0
 800c366:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800c368:	687b      	ldr	r3, [r7, #4]
 800c36a:	78db      	ldrb	r3, [r3, #3]
 800c36c:	2b00      	cmp	r3, #0
 800c36e:	d034      	beq.n	800c3da <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800c370:	687b      	ldr	r3, [r7, #4]
 800c372:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c374:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800c376:	687b      	ldr	r3, [r7, #4]
 800c378:	7858      	ldrb	r0, [r3, #1]
 800c37a:	687b      	ldr	r3, [r7, #4]
 800c37c:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800c380:	2301      	movs	r3, #1
 800c382:	697a      	ldr	r2, [r7, #20]
 800c384:	f7ff fd3e 	bl	800be04 <disk_write>
 800c388:	4603      	mov	r3, r0
 800c38a:	2b00      	cmp	r3, #0
 800c38c:	d002      	beq.n	800c394 <sync_window+0x38>
			res = FR_DISK_ERR;
 800c38e:	2301      	movs	r3, #1
 800c390:	73fb      	strb	r3, [r7, #15]
 800c392:	e022      	b.n	800c3da <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800c394:	687b      	ldr	r3, [r7, #4]
 800c396:	2200      	movs	r2, #0
 800c398:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800c39a:	687b      	ldr	r3, [r7, #4]
 800c39c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c39e:	697a      	ldr	r2, [r7, #20]
 800c3a0:	1ad2      	subs	r2, r2, r3
 800c3a2:	687b      	ldr	r3, [r7, #4]
 800c3a4:	6a1b      	ldr	r3, [r3, #32]
 800c3a6:	429a      	cmp	r2, r3
 800c3a8:	d217      	bcs.n	800c3da <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800c3aa:	687b      	ldr	r3, [r7, #4]
 800c3ac:	789b      	ldrb	r3, [r3, #2]
 800c3ae:	613b      	str	r3, [r7, #16]
 800c3b0:	e010      	b.n	800c3d4 <sync_window+0x78>
					wsect += fs->fsize;
 800c3b2:	687b      	ldr	r3, [r7, #4]
 800c3b4:	6a1b      	ldr	r3, [r3, #32]
 800c3b6:	697a      	ldr	r2, [r7, #20]
 800c3b8:	4413      	add	r3, r2
 800c3ba:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800c3bc:	687b      	ldr	r3, [r7, #4]
 800c3be:	7858      	ldrb	r0, [r3, #1]
 800c3c0:	687b      	ldr	r3, [r7, #4]
 800c3c2:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800c3c6:	2301      	movs	r3, #1
 800c3c8:	697a      	ldr	r2, [r7, #20]
 800c3ca:	f7ff fd1b 	bl	800be04 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800c3ce:	693b      	ldr	r3, [r7, #16]
 800c3d0:	3b01      	subs	r3, #1
 800c3d2:	613b      	str	r3, [r7, #16]
 800c3d4:	693b      	ldr	r3, [r7, #16]
 800c3d6:	2b01      	cmp	r3, #1
 800c3d8:	d8eb      	bhi.n	800c3b2 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800c3da:	7bfb      	ldrb	r3, [r7, #15]
}
 800c3dc:	4618      	mov	r0, r3
 800c3de:	3718      	adds	r7, #24
 800c3e0:	46bd      	mov	sp, r7
 800c3e2:	bd80      	pop	{r7, pc}

0800c3e4 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800c3e4:	b580      	push	{r7, lr}
 800c3e6:	b084      	sub	sp, #16
 800c3e8:	af00      	add	r7, sp, #0
 800c3ea:	6078      	str	r0, [r7, #4]
 800c3ec:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800c3ee:	2300      	movs	r3, #0
 800c3f0:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800c3f2:	687b      	ldr	r3, [r7, #4]
 800c3f4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c3f6:	683a      	ldr	r2, [r7, #0]
 800c3f8:	429a      	cmp	r2, r3
 800c3fa:	d01b      	beq.n	800c434 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800c3fc:	6878      	ldr	r0, [r7, #4]
 800c3fe:	f7ff ffad 	bl	800c35c <sync_window>
 800c402:	4603      	mov	r3, r0
 800c404:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800c406:	7bfb      	ldrb	r3, [r7, #15]
 800c408:	2b00      	cmp	r3, #0
 800c40a:	d113      	bne.n	800c434 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800c40c:	687b      	ldr	r3, [r7, #4]
 800c40e:	7858      	ldrb	r0, [r3, #1]
 800c410:	687b      	ldr	r3, [r7, #4]
 800c412:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800c416:	2301      	movs	r3, #1
 800c418:	683a      	ldr	r2, [r7, #0]
 800c41a:	f7ff fcd3 	bl	800bdc4 <disk_read>
 800c41e:	4603      	mov	r3, r0
 800c420:	2b00      	cmp	r3, #0
 800c422:	d004      	beq.n	800c42e <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800c424:	f04f 33ff 	mov.w	r3, #4294967295
 800c428:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800c42a:	2301      	movs	r3, #1
 800c42c:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800c42e:	687b      	ldr	r3, [r7, #4]
 800c430:	683a      	ldr	r2, [r7, #0]
 800c432:	635a      	str	r2, [r3, #52]	@ 0x34
		}
	}
	return res;
 800c434:	7bfb      	ldrb	r3, [r7, #15]
}
 800c436:	4618      	mov	r0, r3
 800c438:	3710      	adds	r7, #16
 800c43a:	46bd      	mov	sp, r7
 800c43c:	bd80      	pop	{r7, pc}
	...

0800c440 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800c440:	b580      	push	{r7, lr}
 800c442:	b084      	sub	sp, #16
 800c444:	af00      	add	r7, sp, #0
 800c446:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800c448:	6878      	ldr	r0, [r7, #4]
 800c44a:	f7ff ff87 	bl	800c35c <sync_window>
 800c44e:	4603      	mov	r3, r0
 800c450:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800c452:	7bfb      	ldrb	r3, [r7, #15]
 800c454:	2b00      	cmp	r3, #0
 800c456:	d159      	bne.n	800c50c <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800c458:	687b      	ldr	r3, [r7, #4]
 800c45a:	781b      	ldrb	r3, [r3, #0]
 800c45c:	2b03      	cmp	r3, #3
 800c45e:	d149      	bne.n	800c4f4 <sync_fs+0xb4>
 800c460:	687b      	ldr	r3, [r7, #4]
 800c462:	791b      	ldrb	r3, [r3, #4]
 800c464:	2b01      	cmp	r3, #1
 800c466:	d145      	bne.n	800c4f4 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800c468:	687b      	ldr	r3, [r7, #4]
 800c46a:	f103 0038 	add.w	r0, r3, #56	@ 0x38
 800c46e:	687b      	ldr	r3, [r7, #4]
 800c470:	899b      	ldrh	r3, [r3, #12]
 800c472:	461a      	mov	r2, r3
 800c474:	2100      	movs	r1, #0
 800c476:	f7ff fda7 	bl	800bfc8 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800c47a:	687b      	ldr	r3, [r7, #4]
 800c47c:	3338      	adds	r3, #56	@ 0x38
 800c47e:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800c482:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 800c486:	4618      	mov	r0, r3
 800c488:	f7ff fd36 	bl	800bef8 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800c48c:	687b      	ldr	r3, [r7, #4]
 800c48e:	3338      	adds	r3, #56	@ 0x38
 800c490:	4921      	ldr	r1, [pc, #132]	@ (800c518 <sync_fs+0xd8>)
 800c492:	4618      	mov	r0, r3
 800c494:	f7ff fd4b 	bl	800bf2e <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800c498:	687b      	ldr	r3, [r7, #4]
 800c49a:	3338      	adds	r3, #56	@ 0x38
 800c49c:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800c4a0:	491e      	ldr	r1, [pc, #120]	@ (800c51c <sync_fs+0xdc>)
 800c4a2:	4618      	mov	r0, r3
 800c4a4:	f7ff fd43 	bl	800bf2e <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800c4a8:	687b      	ldr	r3, [r7, #4]
 800c4aa:	3338      	adds	r3, #56	@ 0x38
 800c4ac:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 800c4b0:	687b      	ldr	r3, [r7, #4]
 800c4b2:	699b      	ldr	r3, [r3, #24]
 800c4b4:	4619      	mov	r1, r3
 800c4b6:	4610      	mov	r0, r2
 800c4b8:	f7ff fd39 	bl	800bf2e <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800c4bc:	687b      	ldr	r3, [r7, #4]
 800c4be:	3338      	adds	r3, #56	@ 0x38
 800c4c0:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 800c4c4:	687b      	ldr	r3, [r7, #4]
 800c4c6:	695b      	ldr	r3, [r3, #20]
 800c4c8:	4619      	mov	r1, r3
 800c4ca:	4610      	mov	r0, r2
 800c4cc:	f7ff fd2f 	bl	800bf2e <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800c4d0:	687b      	ldr	r3, [r7, #4]
 800c4d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c4d4:	1c5a      	adds	r2, r3, #1
 800c4d6:	687b      	ldr	r3, [r7, #4]
 800c4d8:	635a      	str	r2, [r3, #52]	@ 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800c4da:	687b      	ldr	r3, [r7, #4]
 800c4dc:	7858      	ldrb	r0, [r3, #1]
 800c4de:	687b      	ldr	r3, [r7, #4]
 800c4e0:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800c4e4:	687b      	ldr	r3, [r7, #4]
 800c4e6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800c4e8:	2301      	movs	r3, #1
 800c4ea:	f7ff fc8b 	bl	800be04 <disk_write>
			fs->fsi_flag = 0;
 800c4ee:	687b      	ldr	r3, [r7, #4]
 800c4f0:	2200      	movs	r2, #0
 800c4f2:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800c4f4:	687b      	ldr	r3, [r7, #4]
 800c4f6:	785b      	ldrb	r3, [r3, #1]
 800c4f8:	2200      	movs	r2, #0
 800c4fa:	2100      	movs	r1, #0
 800c4fc:	4618      	mov	r0, r3
 800c4fe:	f7ff fca1 	bl	800be44 <disk_ioctl>
 800c502:	4603      	mov	r3, r0
 800c504:	2b00      	cmp	r3, #0
 800c506:	d001      	beq.n	800c50c <sync_fs+0xcc>
 800c508:	2301      	movs	r3, #1
 800c50a:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800c50c:	7bfb      	ldrb	r3, [r7, #15]
}
 800c50e:	4618      	mov	r0, r3
 800c510:	3710      	adds	r7, #16
 800c512:	46bd      	mov	sp, r7
 800c514:	bd80      	pop	{r7, pc}
 800c516:	bf00      	nop
 800c518:	41615252 	.word	0x41615252
 800c51c:	61417272 	.word	0x61417272

0800c520 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800c520:	b480      	push	{r7}
 800c522:	b083      	sub	sp, #12
 800c524:	af00      	add	r7, sp, #0
 800c526:	6078      	str	r0, [r7, #4]
 800c528:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800c52a:	683b      	ldr	r3, [r7, #0]
 800c52c:	3b02      	subs	r3, #2
 800c52e:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800c530:	687b      	ldr	r3, [r7, #4]
 800c532:	69db      	ldr	r3, [r3, #28]
 800c534:	3b02      	subs	r3, #2
 800c536:	683a      	ldr	r2, [r7, #0]
 800c538:	429a      	cmp	r2, r3
 800c53a:	d301      	bcc.n	800c540 <clust2sect+0x20>
 800c53c:	2300      	movs	r3, #0
 800c53e:	e008      	b.n	800c552 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800c540:	687b      	ldr	r3, [r7, #4]
 800c542:	895b      	ldrh	r3, [r3, #10]
 800c544:	461a      	mov	r2, r3
 800c546:	683b      	ldr	r3, [r7, #0]
 800c548:	fb03 f202 	mul.w	r2, r3, r2
 800c54c:	687b      	ldr	r3, [r7, #4]
 800c54e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c550:	4413      	add	r3, r2
}
 800c552:	4618      	mov	r0, r3
 800c554:	370c      	adds	r7, #12
 800c556:	46bd      	mov	sp, r7
 800c558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c55c:	4770      	bx	lr

0800c55e <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800c55e:	b580      	push	{r7, lr}
 800c560:	b086      	sub	sp, #24
 800c562:	af00      	add	r7, sp, #0
 800c564:	6078      	str	r0, [r7, #4]
 800c566:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800c568:	687b      	ldr	r3, [r7, #4]
 800c56a:	681b      	ldr	r3, [r3, #0]
 800c56c:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800c56e:	683b      	ldr	r3, [r7, #0]
 800c570:	2b01      	cmp	r3, #1
 800c572:	d904      	bls.n	800c57e <get_fat+0x20>
 800c574:	693b      	ldr	r3, [r7, #16]
 800c576:	69db      	ldr	r3, [r3, #28]
 800c578:	683a      	ldr	r2, [r7, #0]
 800c57a:	429a      	cmp	r2, r3
 800c57c:	d302      	bcc.n	800c584 <get_fat+0x26>
		val = 1;	/* Internal error */
 800c57e:	2301      	movs	r3, #1
 800c580:	617b      	str	r3, [r7, #20]
 800c582:	e0ba      	b.n	800c6fa <get_fat+0x19c>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800c584:	f04f 33ff 	mov.w	r3, #4294967295
 800c588:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800c58a:	693b      	ldr	r3, [r7, #16]
 800c58c:	781b      	ldrb	r3, [r3, #0]
 800c58e:	2b03      	cmp	r3, #3
 800c590:	f000 8082 	beq.w	800c698 <get_fat+0x13a>
 800c594:	2b03      	cmp	r3, #3
 800c596:	f300 80a6 	bgt.w	800c6e6 <get_fat+0x188>
 800c59a:	2b01      	cmp	r3, #1
 800c59c:	d002      	beq.n	800c5a4 <get_fat+0x46>
 800c59e:	2b02      	cmp	r3, #2
 800c5a0:	d055      	beq.n	800c64e <get_fat+0xf0>
 800c5a2:	e0a0      	b.n	800c6e6 <get_fat+0x188>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800c5a4:	683b      	ldr	r3, [r7, #0]
 800c5a6:	60fb      	str	r3, [r7, #12]
 800c5a8:	68fb      	ldr	r3, [r7, #12]
 800c5aa:	085b      	lsrs	r3, r3, #1
 800c5ac:	68fa      	ldr	r2, [r7, #12]
 800c5ae:	4413      	add	r3, r2
 800c5b0:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800c5b2:	693b      	ldr	r3, [r7, #16]
 800c5b4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800c5b6:	693b      	ldr	r3, [r7, #16]
 800c5b8:	899b      	ldrh	r3, [r3, #12]
 800c5ba:	4619      	mov	r1, r3
 800c5bc:	68fb      	ldr	r3, [r7, #12]
 800c5be:	fbb3 f3f1 	udiv	r3, r3, r1
 800c5c2:	4413      	add	r3, r2
 800c5c4:	4619      	mov	r1, r3
 800c5c6:	6938      	ldr	r0, [r7, #16]
 800c5c8:	f7ff ff0c 	bl	800c3e4 <move_window>
 800c5cc:	4603      	mov	r3, r0
 800c5ce:	2b00      	cmp	r3, #0
 800c5d0:	f040 808c 	bne.w	800c6ec <get_fat+0x18e>
			wc = fs->win[bc++ % SS(fs)];
 800c5d4:	68fb      	ldr	r3, [r7, #12]
 800c5d6:	1c5a      	adds	r2, r3, #1
 800c5d8:	60fa      	str	r2, [r7, #12]
 800c5da:	693a      	ldr	r2, [r7, #16]
 800c5dc:	8992      	ldrh	r2, [r2, #12]
 800c5de:	fbb3 f1f2 	udiv	r1, r3, r2
 800c5e2:	fb01 f202 	mul.w	r2, r1, r2
 800c5e6:	1a9b      	subs	r3, r3, r2
 800c5e8:	693a      	ldr	r2, [r7, #16]
 800c5ea:	4413      	add	r3, r2
 800c5ec:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800c5f0:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800c5f2:	693b      	ldr	r3, [r7, #16]
 800c5f4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800c5f6:	693b      	ldr	r3, [r7, #16]
 800c5f8:	899b      	ldrh	r3, [r3, #12]
 800c5fa:	4619      	mov	r1, r3
 800c5fc:	68fb      	ldr	r3, [r7, #12]
 800c5fe:	fbb3 f3f1 	udiv	r3, r3, r1
 800c602:	4413      	add	r3, r2
 800c604:	4619      	mov	r1, r3
 800c606:	6938      	ldr	r0, [r7, #16]
 800c608:	f7ff feec 	bl	800c3e4 <move_window>
 800c60c:	4603      	mov	r3, r0
 800c60e:	2b00      	cmp	r3, #0
 800c610:	d16e      	bne.n	800c6f0 <get_fat+0x192>
			wc |= fs->win[bc % SS(fs)] << 8;
 800c612:	693b      	ldr	r3, [r7, #16]
 800c614:	899b      	ldrh	r3, [r3, #12]
 800c616:	461a      	mov	r2, r3
 800c618:	68fb      	ldr	r3, [r7, #12]
 800c61a:	fbb3 f1f2 	udiv	r1, r3, r2
 800c61e:	fb01 f202 	mul.w	r2, r1, r2
 800c622:	1a9b      	subs	r3, r3, r2
 800c624:	693a      	ldr	r2, [r7, #16]
 800c626:	4413      	add	r3, r2
 800c628:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800c62c:	021b      	lsls	r3, r3, #8
 800c62e:	68ba      	ldr	r2, [r7, #8]
 800c630:	4313      	orrs	r3, r2
 800c632:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800c634:	683b      	ldr	r3, [r7, #0]
 800c636:	f003 0301 	and.w	r3, r3, #1
 800c63a:	2b00      	cmp	r3, #0
 800c63c:	d002      	beq.n	800c644 <get_fat+0xe6>
 800c63e:	68bb      	ldr	r3, [r7, #8]
 800c640:	091b      	lsrs	r3, r3, #4
 800c642:	e002      	b.n	800c64a <get_fat+0xec>
 800c644:	68bb      	ldr	r3, [r7, #8]
 800c646:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800c64a:	617b      	str	r3, [r7, #20]
			break;
 800c64c:	e055      	b.n	800c6fa <get_fat+0x19c>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800c64e:	693b      	ldr	r3, [r7, #16]
 800c650:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800c652:	693b      	ldr	r3, [r7, #16]
 800c654:	899b      	ldrh	r3, [r3, #12]
 800c656:	085b      	lsrs	r3, r3, #1
 800c658:	b29b      	uxth	r3, r3
 800c65a:	4619      	mov	r1, r3
 800c65c:	683b      	ldr	r3, [r7, #0]
 800c65e:	fbb3 f3f1 	udiv	r3, r3, r1
 800c662:	4413      	add	r3, r2
 800c664:	4619      	mov	r1, r3
 800c666:	6938      	ldr	r0, [r7, #16]
 800c668:	f7ff febc 	bl	800c3e4 <move_window>
 800c66c:	4603      	mov	r3, r0
 800c66e:	2b00      	cmp	r3, #0
 800c670:	d140      	bne.n	800c6f4 <get_fat+0x196>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800c672:	693b      	ldr	r3, [r7, #16]
 800c674:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800c678:	683b      	ldr	r3, [r7, #0]
 800c67a:	005b      	lsls	r3, r3, #1
 800c67c:	693a      	ldr	r2, [r7, #16]
 800c67e:	8992      	ldrh	r2, [r2, #12]
 800c680:	fbb3 f0f2 	udiv	r0, r3, r2
 800c684:	fb00 f202 	mul.w	r2, r0, r2
 800c688:	1a9b      	subs	r3, r3, r2
 800c68a:	440b      	add	r3, r1
 800c68c:	4618      	mov	r0, r3
 800c68e:	f7ff fbf7 	bl	800be80 <ld_word>
 800c692:	4603      	mov	r3, r0
 800c694:	617b      	str	r3, [r7, #20]
			break;
 800c696:	e030      	b.n	800c6fa <get_fat+0x19c>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800c698:	693b      	ldr	r3, [r7, #16]
 800c69a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800c69c:	693b      	ldr	r3, [r7, #16]
 800c69e:	899b      	ldrh	r3, [r3, #12]
 800c6a0:	089b      	lsrs	r3, r3, #2
 800c6a2:	b29b      	uxth	r3, r3
 800c6a4:	4619      	mov	r1, r3
 800c6a6:	683b      	ldr	r3, [r7, #0]
 800c6a8:	fbb3 f3f1 	udiv	r3, r3, r1
 800c6ac:	4413      	add	r3, r2
 800c6ae:	4619      	mov	r1, r3
 800c6b0:	6938      	ldr	r0, [r7, #16]
 800c6b2:	f7ff fe97 	bl	800c3e4 <move_window>
 800c6b6:	4603      	mov	r3, r0
 800c6b8:	2b00      	cmp	r3, #0
 800c6ba:	d11d      	bne.n	800c6f8 <get_fat+0x19a>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800c6bc:	693b      	ldr	r3, [r7, #16]
 800c6be:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800c6c2:	683b      	ldr	r3, [r7, #0]
 800c6c4:	009b      	lsls	r3, r3, #2
 800c6c6:	693a      	ldr	r2, [r7, #16]
 800c6c8:	8992      	ldrh	r2, [r2, #12]
 800c6ca:	fbb3 f0f2 	udiv	r0, r3, r2
 800c6ce:	fb00 f202 	mul.w	r2, r0, r2
 800c6d2:	1a9b      	subs	r3, r3, r2
 800c6d4:	440b      	add	r3, r1
 800c6d6:	4618      	mov	r0, r3
 800c6d8:	f7ff fbeb 	bl	800beb2 <ld_dword>
 800c6dc:	4603      	mov	r3, r0
 800c6de:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800c6e2:	617b      	str	r3, [r7, #20]
			break;
 800c6e4:	e009      	b.n	800c6fa <get_fat+0x19c>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800c6e6:	2301      	movs	r3, #1
 800c6e8:	617b      	str	r3, [r7, #20]
 800c6ea:	e006      	b.n	800c6fa <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800c6ec:	bf00      	nop
 800c6ee:	e004      	b.n	800c6fa <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800c6f0:	bf00      	nop
 800c6f2:	e002      	b.n	800c6fa <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800c6f4:	bf00      	nop
 800c6f6:	e000      	b.n	800c6fa <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800c6f8:	bf00      	nop
		}
	}

	return val;
 800c6fa:	697b      	ldr	r3, [r7, #20]
}
 800c6fc:	4618      	mov	r0, r3
 800c6fe:	3718      	adds	r7, #24
 800c700:	46bd      	mov	sp, r7
 800c702:	bd80      	pop	{r7, pc}

0800c704 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800c704:	b590      	push	{r4, r7, lr}
 800c706:	b089      	sub	sp, #36	@ 0x24
 800c708:	af00      	add	r7, sp, #0
 800c70a:	60f8      	str	r0, [r7, #12]
 800c70c:	60b9      	str	r1, [r7, #8]
 800c70e:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800c710:	2302      	movs	r3, #2
 800c712:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800c714:	68bb      	ldr	r3, [r7, #8]
 800c716:	2b01      	cmp	r3, #1
 800c718:	f240 8109 	bls.w	800c92e <put_fat+0x22a>
 800c71c:	68fb      	ldr	r3, [r7, #12]
 800c71e:	69db      	ldr	r3, [r3, #28]
 800c720:	68ba      	ldr	r2, [r7, #8]
 800c722:	429a      	cmp	r2, r3
 800c724:	f080 8103 	bcs.w	800c92e <put_fat+0x22a>
		switch (fs->fs_type) {
 800c728:	68fb      	ldr	r3, [r7, #12]
 800c72a:	781b      	ldrb	r3, [r3, #0]
 800c72c:	2b03      	cmp	r3, #3
 800c72e:	f000 80b6 	beq.w	800c89e <put_fat+0x19a>
 800c732:	2b03      	cmp	r3, #3
 800c734:	f300 80fb 	bgt.w	800c92e <put_fat+0x22a>
 800c738:	2b01      	cmp	r3, #1
 800c73a:	d003      	beq.n	800c744 <put_fat+0x40>
 800c73c:	2b02      	cmp	r3, #2
 800c73e:	f000 8083 	beq.w	800c848 <put_fat+0x144>
 800c742:	e0f4      	b.n	800c92e <put_fat+0x22a>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800c744:	68bb      	ldr	r3, [r7, #8]
 800c746:	61bb      	str	r3, [r7, #24]
 800c748:	69bb      	ldr	r3, [r7, #24]
 800c74a:	085b      	lsrs	r3, r3, #1
 800c74c:	69ba      	ldr	r2, [r7, #24]
 800c74e:	4413      	add	r3, r2
 800c750:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800c752:	68fb      	ldr	r3, [r7, #12]
 800c754:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800c756:	68fb      	ldr	r3, [r7, #12]
 800c758:	899b      	ldrh	r3, [r3, #12]
 800c75a:	4619      	mov	r1, r3
 800c75c:	69bb      	ldr	r3, [r7, #24]
 800c75e:	fbb3 f3f1 	udiv	r3, r3, r1
 800c762:	4413      	add	r3, r2
 800c764:	4619      	mov	r1, r3
 800c766:	68f8      	ldr	r0, [r7, #12]
 800c768:	f7ff fe3c 	bl	800c3e4 <move_window>
 800c76c:	4603      	mov	r3, r0
 800c76e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800c770:	7ffb      	ldrb	r3, [r7, #31]
 800c772:	2b00      	cmp	r3, #0
 800c774:	f040 80d4 	bne.w	800c920 <put_fat+0x21c>
			p = fs->win + bc++ % SS(fs);
 800c778:	68fb      	ldr	r3, [r7, #12]
 800c77a:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800c77e:	69bb      	ldr	r3, [r7, #24]
 800c780:	1c5a      	adds	r2, r3, #1
 800c782:	61ba      	str	r2, [r7, #24]
 800c784:	68fa      	ldr	r2, [r7, #12]
 800c786:	8992      	ldrh	r2, [r2, #12]
 800c788:	fbb3 f0f2 	udiv	r0, r3, r2
 800c78c:	fb00 f202 	mul.w	r2, r0, r2
 800c790:	1a9b      	subs	r3, r3, r2
 800c792:	440b      	add	r3, r1
 800c794:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800c796:	68bb      	ldr	r3, [r7, #8]
 800c798:	f003 0301 	and.w	r3, r3, #1
 800c79c:	2b00      	cmp	r3, #0
 800c79e:	d00d      	beq.n	800c7bc <put_fat+0xb8>
 800c7a0:	697b      	ldr	r3, [r7, #20]
 800c7a2:	781b      	ldrb	r3, [r3, #0]
 800c7a4:	b25b      	sxtb	r3, r3
 800c7a6:	f003 030f 	and.w	r3, r3, #15
 800c7aa:	b25a      	sxtb	r2, r3
 800c7ac:	687b      	ldr	r3, [r7, #4]
 800c7ae:	b25b      	sxtb	r3, r3
 800c7b0:	011b      	lsls	r3, r3, #4
 800c7b2:	b25b      	sxtb	r3, r3
 800c7b4:	4313      	orrs	r3, r2
 800c7b6:	b25b      	sxtb	r3, r3
 800c7b8:	b2db      	uxtb	r3, r3
 800c7ba:	e001      	b.n	800c7c0 <put_fat+0xbc>
 800c7bc:	687b      	ldr	r3, [r7, #4]
 800c7be:	b2db      	uxtb	r3, r3
 800c7c0:	697a      	ldr	r2, [r7, #20]
 800c7c2:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800c7c4:	68fb      	ldr	r3, [r7, #12]
 800c7c6:	2201      	movs	r2, #1
 800c7c8:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800c7ca:	68fb      	ldr	r3, [r7, #12]
 800c7cc:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800c7ce:	68fb      	ldr	r3, [r7, #12]
 800c7d0:	899b      	ldrh	r3, [r3, #12]
 800c7d2:	4619      	mov	r1, r3
 800c7d4:	69bb      	ldr	r3, [r7, #24]
 800c7d6:	fbb3 f3f1 	udiv	r3, r3, r1
 800c7da:	4413      	add	r3, r2
 800c7dc:	4619      	mov	r1, r3
 800c7de:	68f8      	ldr	r0, [r7, #12]
 800c7e0:	f7ff fe00 	bl	800c3e4 <move_window>
 800c7e4:	4603      	mov	r3, r0
 800c7e6:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800c7e8:	7ffb      	ldrb	r3, [r7, #31]
 800c7ea:	2b00      	cmp	r3, #0
 800c7ec:	f040 809a 	bne.w	800c924 <put_fat+0x220>
			p = fs->win + bc % SS(fs);
 800c7f0:	68fb      	ldr	r3, [r7, #12]
 800c7f2:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800c7f6:	68fb      	ldr	r3, [r7, #12]
 800c7f8:	899b      	ldrh	r3, [r3, #12]
 800c7fa:	461a      	mov	r2, r3
 800c7fc:	69bb      	ldr	r3, [r7, #24]
 800c7fe:	fbb3 f0f2 	udiv	r0, r3, r2
 800c802:	fb00 f202 	mul.w	r2, r0, r2
 800c806:	1a9b      	subs	r3, r3, r2
 800c808:	440b      	add	r3, r1
 800c80a:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800c80c:	68bb      	ldr	r3, [r7, #8]
 800c80e:	f003 0301 	and.w	r3, r3, #1
 800c812:	2b00      	cmp	r3, #0
 800c814:	d003      	beq.n	800c81e <put_fat+0x11a>
 800c816:	687b      	ldr	r3, [r7, #4]
 800c818:	091b      	lsrs	r3, r3, #4
 800c81a:	b2db      	uxtb	r3, r3
 800c81c:	e00e      	b.n	800c83c <put_fat+0x138>
 800c81e:	697b      	ldr	r3, [r7, #20]
 800c820:	781b      	ldrb	r3, [r3, #0]
 800c822:	b25b      	sxtb	r3, r3
 800c824:	f023 030f 	bic.w	r3, r3, #15
 800c828:	b25a      	sxtb	r2, r3
 800c82a:	687b      	ldr	r3, [r7, #4]
 800c82c:	0a1b      	lsrs	r3, r3, #8
 800c82e:	b25b      	sxtb	r3, r3
 800c830:	f003 030f 	and.w	r3, r3, #15
 800c834:	b25b      	sxtb	r3, r3
 800c836:	4313      	orrs	r3, r2
 800c838:	b25b      	sxtb	r3, r3
 800c83a:	b2db      	uxtb	r3, r3
 800c83c:	697a      	ldr	r2, [r7, #20]
 800c83e:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800c840:	68fb      	ldr	r3, [r7, #12]
 800c842:	2201      	movs	r2, #1
 800c844:	70da      	strb	r2, [r3, #3]
			break;
 800c846:	e072      	b.n	800c92e <put_fat+0x22a>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800c848:	68fb      	ldr	r3, [r7, #12]
 800c84a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800c84c:	68fb      	ldr	r3, [r7, #12]
 800c84e:	899b      	ldrh	r3, [r3, #12]
 800c850:	085b      	lsrs	r3, r3, #1
 800c852:	b29b      	uxth	r3, r3
 800c854:	4619      	mov	r1, r3
 800c856:	68bb      	ldr	r3, [r7, #8]
 800c858:	fbb3 f3f1 	udiv	r3, r3, r1
 800c85c:	4413      	add	r3, r2
 800c85e:	4619      	mov	r1, r3
 800c860:	68f8      	ldr	r0, [r7, #12]
 800c862:	f7ff fdbf 	bl	800c3e4 <move_window>
 800c866:	4603      	mov	r3, r0
 800c868:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800c86a:	7ffb      	ldrb	r3, [r7, #31]
 800c86c:	2b00      	cmp	r3, #0
 800c86e:	d15b      	bne.n	800c928 <put_fat+0x224>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800c870:	68fb      	ldr	r3, [r7, #12]
 800c872:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800c876:	68bb      	ldr	r3, [r7, #8]
 800c878:	005b      	lsls	r3, r3, #1
 800c87a:	68fa      	ldr	r2, [r7, #12]
 800c87c:	8992      	ldrh	r2, [r2, #12]
 800c87e:	fbb3 f0f2 	udiv	r0, r3, r2
 800c882:	fb00 f202 	mul.w	r2, r0, r2
 800c886:	1a9b      	subs	r3, r3, r2
 800c888:	440b      	add	r3, r1
 800c88a:	687a      	ldr	r2, [r7, #4]
 800c88c:	b292      	uxth	r2, r2
 800c88e:	4611      	mov	r1, r2
 800c890:	4618      	mov	r0, r3
 800c892:	f7ff fb31 	bl	800bef8 <st_word>
			fs->wflag = 1;
 800c896:	68fb      	ldr	r3, [r7, #12]
 800c898:	2201      	movs	r2, #1
 800c89a:	70da      	strb	r2, [r3, #3]
			break;
 800c89c:	e047      	b.n	800c92e <put_fat+0x22a>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800c89e:	68fb      	ldr	r3, [r7, #12]
 800c8a0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800c8a2:	68fb      	ldr	r3, [r7, #12]
 800c8a4:	899b      	ldrh	r3, [r3, #12]
 800c8a6:	089b      	lsrs	r3, r3, #2
 800c8a8:	b29b      	uxth	r3, r3
 800c8aa:	4619      	mov	r1, r3
 800c8ac:	68bb      	ldr	r3, [r7, #8]
 800c8ae:	fbb3 f3f1 	udiv	r3, r3, r1
 800c8b2:	4413      	add	r3, r2
 800c8b4:	4619      	mov	r1, r3
 800c8b6:	68f8      	ldr	r0, [r7, #12]
 800c8b8:	f7ff fd94 	bl	800c3e4 <move_window>
 800c8bc:	4603      	mov	r3, r0
 800c8be:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800c8c0:	7ffb      	ldrb	r3, [r7, #31]
 800c8c2:	2b00      	cmp	r3, #0
 800c8c4:	d132      	bne.n	800c92c <put_fat+0x228>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800c8c6:	687b      	ldr	r3, [r7, #4]
 800c8c8:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 800c8cc:	68fb      	ldr	r3, [r7, #12]
 800c8ce:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800c8d2:	68bb      	ldr	r3, [r7, #8]
 800c8d4:	009b      	lsls	r3, r3, #2
 800c8d6:	68fa      	ldr	r2, [r7, #12]
 800c8d8:	8992      	ldrh	r2, [r2, #12]
 800c8da:	fbb3 f0f2 	udiv	r0, r3, r2
 800c8de:	fb00 f202 	mul.w	r2, r0, r2
 800c8e2:	1a9b      	subs	r3, r3, r2
 800c8e4:	440b      	add	r3, r1
 800c8e6:	4618      	mov	r0, r3
 800c8e8:	f7ff fae3 	bl	800beb2 <ld_dword>
 800c8ec:	4603      	mov	r3, r0
 800c8ee:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 800c8f2:	4323      	orrs	r3, r4
 800c8f4:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800c8f6:	68fb      	ldr	r3, [r7, #12]
 800c8f8:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800c8fc:	68bb      	ldr	r3, [r7, #8]
 800c8fe:	009b      	lsls	r3, r3, #2
 800c900:	68fa      	ldr	r2, [r7, #12]
 800c902:	8992      	ldrh	r2, [r2, #12]
 800c904:	fbb3 f0f2 	udiv	r0, r3, r2
 800c908:	fb00 f202 	mul.w	r2, r0, r2
 800c90c:	1a9b      	subs	r3, r3, r2
 800c90e:	440b      	add	r3, r1
 800c910:	6879      	ldr	r1, [r7, #4]
 800c912:	4618      	mov	r0, r3
 800c914:	f7ff fb0b 	bl	800bf2e <st_dword>
			fs->wflag = 1;
 800c918:	68fb      	ldr	r3, [r7, #12]
 800c91a:	2201      	movs	r2, #1
 800c91c:	70da      	strb	r2, [r3, #3]
			break;
 800c91e:	e006      	b.n	800c92e <put_fat+0x22a>
			if (res != FR_OK) break;
 800c920:	bf00      	nop
 800c922:	e004      	b.n	800c92e <put_fat+0x22a>
			if (res != FR_OK) break;
 800c924:	bf00      	nop
 800c926:	e002      	b.n	800c92e <put_fat+0x22a>
			if (res != FR_OK) break;
 800c928:	bf00      	nop
 800c92a:	e000      	b.n	800c92e <put_fat+0x22a>
			if (res != FR_OK) break;
 800c92c:	bf00      	nop
		}
	}
	return res;
 800c92e:	7ffb      	ldrb	r3, [r7, #31]
}
 800c930:	4618      	mov	r0, r3
 800c932:	3724      	adds	r7, #36	@ 0x24
 800c934:	46bd      	mov	sp, r7
 800c936:	bd90      	pop	{r4, r7, pc}

0800c938 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800c938:	b580      	push	{r7, lr}
 800c93a:	b088      	sub	sp, #32
 800c93c:	af00      	add	r7, sp, #0
 800c93e:	60f8      	str	r0, [r7, #12]
 800c940:	60b9      	str	r1, [r7, #8]
 800c942:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800c944:	2300      	movs	r3, #0
 800c946:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800c948:	68fb      	ldr	r3, [r7, #12]
 800c94a:	681b      	ldr	r3, [r3, #0]
 800c94c:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800c94e:	68bb      	ldr	r3, [r7, #8]
 800c950:	2b01      	cmp	r3, #1
 800c952:	d904      	bls.n	800c95e <remove_chain+0x26>
 800c954:	69bb      	ldr	r3, [r7, #24]
 800c956:	69db      	ldr	r3, [r3, #28]
 800c958:	68ba      	ldr	r2, [r7, #8]
 800c95a:	429a      	cmp	r2, r3
 800c95c:	d301      	bcc.n	800c962 <remove_chain+0x2a>
 800c95e:	2302      	movs	r3, #2
 800c960:	e04b      	b.n	800c9fa <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800c962:	687b      	ldr	r3, [r7, #4]
 800c964:	2b00      	cmp	r3, #0
 800c966:	d00c      	beq.n	800c982 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800c968:	f04f 32ff 	mov.w	r2, #4294967295
 800c96c:	6879      	ldr	r1, [r7, #4]
 800c96e:	69b8      	ldr	r0, [r7, #24]
 800c970:	f7ff fec8 	bl	800c704 <put_fat>
 800c974:	4603      	mov	r3, r0
 800c976:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800c978:	7ffb      	ldrb	r3, [r7, #31]
 800c97a:	2b00      	cmp	r3, #0
 800c97c:	d001      	beq.n	800c982 <remove_chain+0x4a>
 800c97e:	7ffb      	ldrb	r3, [r7, #31]
 800c980:	e03b      	b.n	800c9fa <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800c982:	68b9      	ldr	r1, [r7, #8]
 800c984:	68f8      	ldr	r0, [r7, #12]
 800c986:	f7ff fdea 	bl	800c55e <get_fat>
 800c98a:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800c98c:	697b      	ldr	r3, [r7, #20]
 800c98e:	2b00      	cmp	r3, #0
 800c990:	d031      	beq.n	800c9f6 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800c992:	697b      	ldr	r3, [r7, #20]
 800c994:	2b01      	cmp	r3, #1
 800c996:	d101      	bne.n	800c99c <remove_chain+0x64>
 800c998:	2302      	movs	r3, #2
 800c99a:	e02e      	b.n	800c9fa <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800c99c:	697b      	ldr	r3, [r7, #20]
 800c99e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c9a2:	d101      	bne.n	800c9a8 <remove_chain+0x70>
 800c9a4:	2301      	movs	r3, #1
 800c9a6:	e028      	b.n	800c9fa <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800c9a8:	2200      	movs	r2, #0
 800c9aa:	68b9      	ldr	r1, [r7, #8]
 800c9ac:	69b8      	ldr	r0, [r7, #24]
 800c9ae:	f7ff fea9 	bl	800c704 <put_fat>
 800c9b2:	4603      	mov	r3, r0
 800c9b4:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800c9b6:	7ffb      	ldrb	r3, [r7, #31]
 800c9b8:	2b00      	cmp	r3, #0
 800c9ba:	d001      	beq.n	800c9c0 <remove_chain+0x88>
 800c9bc:	7ffb      	ldrb	r3, [r7, #31]
 800c9be:	e01c      	b.n	800c9fa <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800c9c0:	69bb      	ldr	r3, [r7, #24]
 800c9c2:	699a      	ldr	r2, [r3, #24]
 800c9c4:	69bb      	ldr	r3, [r7, #24]
 800c9c6:	69db      	ldr	r3, [r3, #28]
 800c9c8:	3b02      	subs	r3, #2
 800c9ca:	429a      	cmp	r2, r3
 800c9cc:	d20b      	bcs.n	800c9e6 <remove_chain+0xae>
			fs->free_clst++;
 800c9ce:	69bb      	ldr	r3, [r7, #24]
 800c9d0:	699b      	ldr	r3, [r3, #24]
 800c9d2:	1c5a      	adds	r2, r3, #1
 800c9d4:	69bb      	ldr	r3, [r7, #24]
 800c9d6:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 800c9d8:	69bb      	ldr	r3, [r7, #24]
 800c9da:	791b      	ldrb	r3, [r3, #4]
 800c9dc:	f043 0301 	orr.w	r3, r3, #1
 800c9e0:	b2da      	uxtb	r2, r3
 800c9e2:	69bb      	ldr	r3, [r7, #24]
 800c9e4:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800c9e6:	697b      	ldr	r3, [r7, #20]
 800c9e8:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800c9ea:	69bb      	ldr	r3, [r7, #24]
 800c9ec:	69db      	ldr	r3, [r3, #28]
 800c9ee:	68ba      	ldr	r2, [r7, #8]
 800c9f0:	429a      	cmp	r2, r3
 800c9f2:	d3c6      	bcc.n	800c982 <remove_chain+0x4a>
 800c9f4:	e000      	b.n	800c9f8 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800c9f6:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800c9f8:	2300      	movs	r3, #0
}
 800c9fa:	4618      	mov	r0, r3
 800c9fc:	3720      	adds	r7, #32
 800c9fe:	46bd      	mov	sp, r7
 800ca00:	bd80      	pop	{r7, pc}

0800ca02 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800ca02:	b580      	push	{r7, lr}
 800ca04:	b088      	sub	sp, #32
 800ca06:	af00      	add	r7, sp, #0
 800ca08:	6078      	str	r0, [r7, #4]
 800ca0a:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800ca0c:	687b      	ldr	r3, [r7, #4]
 800ca0e:	681b      	ldr	r3, [r3, #0]
 800ca10:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800ca12:	683b      	ldr	r3, [r7, #0]
 800ca14:	2b00      	cmp	r3, #0
 800ca16:	d10d      	bne.n	800ca34 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800ca18:	693b      	ldr	r3, [r7, #16]
 800ca1a:	695b      	ldr	r3, [r3, #20]
 800ca1c:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800ca1e:	69bb      	ldr	r3, [r7, #24]
 800ca20:	2b00      	cmp	r3, #0
 800ca22:	d004      	beq.n	800ca2e <create_chain+0x2c>
 800ca24:	693b      	ldr	r3, [r7, #16]
 800ca26:	69db      	ldr	r3, [r3, #28]
 800ca28:	69ba      	ldr	r2, [r7, #24]
 800ca2a:	429a      	cmp	r2, r3
 800ca2c:	d31b      	bcc.n	800ca66 <create_chain+0x64>
 800ca2e:	2301      	movs	r3, #1
 800ca30:	61bb      	str	r3, [r7, #24]
 800ca32:	e018      	b.n	800ca66 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800ca34:	6839      	ldr	r1, [r7, #0]
 800ca36:	6878      	ldr	r0, [r7, #4]
 800ca38:	f7ff fd91 	bl	800c55e <get_fat>
 800ca3c:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800ca3e:	68fb      	ldr	r3, [r7, #12]
 800ca40:	2b01      	cmp	r3, #1
 800ca42:	d801      	bhi.n	800ca48 <create_chain+0x46>
 800ca44:	2301      	movs	r3, #1
 800ca46:	e070      	b.n	800cb2a <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800ca48:	68fb      	ldr	r3, [r7, #12]
 800ca4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ca4e:	d101      	bne.n	800ca54 <create_chain+0x52>
 800ca50:	68fb      	ldr	r3, [r7, #12]
 800ca52:	e06a      	b.n	800cb2a <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800ca54:	693b      	ldr	r3, [r7, #16]
 800ca56:	69db      	ldr	r3, [r3, #28]
 800ca58:	68fa      	ldr	r2, [r7, #12]
 800ca5a:	429a      	cmp	r2, r3
 800ca5c:	d201      	bcs.n	800ca62 <create_chain+0x60>
 800ca5e:	68fb      	ldr	r3, [r7, #12]
 800ca60:	e063      	b.n	800cb2a <create_chain+0x128>
		scl = clst;
 800ca62:	683b      	ldr	r3, [r7, #0]
 800ca64:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800ca66:	69bb      	ldr	r3, [r7, #24]
 800ca68:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800ca6a:	69fb      	ldr	r3, [r7, #28]
 800ca6c:	3301      	adds	r3, #1
 800ca6e:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800ca70:	693b      	ldr	r3, [r7, #16]
 800ca72:	69db      	ldr	r3, [r3, #28]
 800ca74:	69fa      	ldr	r2, [r7, #28]
 800ca76:	429a      	cmp	r2, r3
 800ca78:	d307      	bcc.n	800ca8a <create_chain+0x88>
				ncl = 2;
 800ca7a:	2302      	movs	r3, #2
 800ca7c:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800ca7e:	69fa      	ldr	r2, [r7, #28]
 800ca80:	69bb      	ldr	r3, [r7, #24]
 800ca82:	429a      	cmp	r2, r3
 800ca84:	d901      	bls.n	800ca8a <create_chain+0x88>
 800ca86:	2300      	movs	r3, #0
 800ca88:	e04f      	b.n	800cb2a <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800ca8a:	69f9      	ldr	r1, [r7, #28]
 800ca8c:	6878      	ldr	r0, [r7, #4]
 800ca8e:	f7ff fd66 	bl	800c55e <get_fat>
 800ca92:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800ca94:	68fb      	ldr	r3, [r7, #12]
 800ca96:	2b00      	cmp	r3, #0
 800ca98:	d00e      	beq.n	800cab8 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800ca9a:	68fb      	ldr	r3, [r7, #12]
 800ca9c:	2b01      	cmp	r3, #1
 800ca9e:	d003      	beq.n	800caa8 <create_chain+0xa6>
 800caa0:	68fb      	ldr	r3, [r7, #12]
 800caa2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800caa6:	d101      	bne.n	800caac <create_chain+0xaa>
 800caa8:	68fb      	ldr	r3, [r7, #12]
 800caaa:	e03e      	b.n	800cb2a <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800caac:	69fa      	ldr	r2, [r7, #28]
 800caae:	69bb      	ldr	r3, [r7, #24]
 800cab0:	429a      	cmp	r2, r3
 800cab2:	d1da      	bne.n	800ca6a <create_chain+0x68>
 800cab4:	2300      	movs	r3, #0
 800cab6:	e038      	b.n	800cb2a <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800cab8:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800caba:	f04f 32ff 	mov.w	r2, #4294967295
 800cabe:	69f9      	ldr	r1, [r7, #28]
 800cac0:	6938      	ldr	r0, [r7, #16]
 800cac2:	f7ff fe1f 	bl	800c704 <put_fat>
 800cac6:	4603      	mov	r3, r0
 800cac8:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800caca:	7dfb      	ldrb	r3, [r7, #23]
 800cacc:	2b00      	cmp	r3, #0
 800cace:	d109      	bne.n	800cae4 <create_chain+0xe2>
 800cad0:	683b      	ldr	r3, [r7, #0]
 800cad2:	2b00      	cmp	r3, #0
 800cad4:	d006      	beq.n	800cae4 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800cad6:	69fa      	ldr	r2, [r7, #28]
 800cad8:	6839      	ldr	r1, [r7, #0]
 800cada:	6938      	ldr	r0, [r7, #16]
 800cadc:	f7ff fe12 	bl	800c704 <put_fat>
 800cae0:	4603      	mov	r3, r0
 800cae2:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800cae4:	7dfb      	ldrb	r3, [r7, #23]
 800cae6:	2b00      	cmp	r3, #0
 800cae8:	d116      	bne.n	800cb18 <create_chain+0x116>
		fs->last_clst = ncl;
 800caea:	693b      	ldr	r3, [r7, #16]
 800caec:	69fa      	ldr	r2, [r7, #28]
 800caee:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800caf0:	693b      	ldr	r3, [r7, #16]
 800caf2:	699a      	ldr	r2, [r3, #24]
 800caf4:	693b      	ldr	r3, [r7, #16]
 800caf6:	69db      	ldr	r3, [r3, #28]
 800caf8:	3b02      	subs	r3, #2
 800cafa:	429a      	cmp	r2, r3
 800cafc:	d804      	bhi.n	800cb08 <create_chain+0x106>
 800cafe:	693b      	ldr	r3, [r7, #16]
 800cb00:	699b      	ldr	r3, [r3, #24]
 800cb02:	1e5a      	subs	r2, r3, #1
 800cb04:	693b      	ldr	r3, [r7, #16]
 800cb06:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 800cb08:	693b      	ldr	r3, [r7, #16]
 800cb0a:	791b      	ldrb	r3, [r3, #4]
 800cb0c:	f043 0301 	orr.w	r3, r3, #1
 800cb10:	b2da      	uxtb	r2, r3
 800cb12:	693b      	ldr	r3, [r7, #16]
 800cb14:	711a      	strb	r2, [r3, #4]
 800cb16:	e007      	b.n	800cb28 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800cb18:	7dfb      	ldrb	r3, [r7, #23]
 800cb1a:	2b01      	cmp	r3, #1
 800cb1c:	d102      	bne.n	800cb24 <create_chain+0x122>
 800cb1e:	f04f 33ff 	mov.w	r3, #4294967295
 800cb22:	e000      	b.n	800cb26 <create_chain+0x124>
 800cb24:	2301      	movs	r3, #1
 800cb26:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800cb28:	69fb      	ldr	r3, [r7, #28]
}
 800cb2a:	4618      	mov	r0, r3
 800cb2c:	3720      	adds	r7, #32
 800cb2e:	46bd      	mov	sp, r7
 800cb30:	bd80      	pop	{r7, pc}

0800cb32 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800cb32:	b480      	push	{r7}
 800cb34:	b087      	sub	sp, #28
 800cb36:	af00      	add	r7, sp, #0
 800cb38:	6078      	str	r0, [r7, #4]
 800cb3a:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800cb3c:	687b      	ldr	r3, [r7, #4]
 800cb3e:	681b      	ldr	r3, [r3, #0]
 800cb40:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800cb42:	687b      	ldr	r3, [r7, #4]
 800cb44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cb46:	3304      	adds	r3, #4
 800cb48:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800cb4a:	68fb      	ldr	r3, [r7, #12]
 800cb4c:	899b      	ldrh	r3, [r3, #12]
 800cb4e:	461a      	mov	r2, r3
 800cb50:	683b      	ldr	r3, [r7, #0]
 800cb52:	fbb3 f3f2 	udiv	r3, r3, r2
 800cb56:	68fa      	ldr	r2, [r7, #12]
 800cb58:	8952      	ldrh	r2, [r2, #10]
 800cb5a:	fbb3 f3f2 	udiv	r3, r3, r2
 800cb5e:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800cb60:	693b      	ldr	r3, [r7, #16]
 800cb62:	1d1a      	adds	r2, r3, #4
 800cb64:	613a      	str	r2, [r7, #16]
 800cb66:	681b      	ldr	r3, [r3, #0]
 800cb68:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800cb6a:	68bb      	ldr	r3, [r7, #8]
 800cb6c:	2b00      	cmp	r3, #0
 800cb6e:	d101      	bne.n	800cb74 <clmt_clust+0x42>
 800cb70:	2300      	movs	r3, #0
 800cb72:	e010      	b.n	800cb96 <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 800cb74:	697a      	ldr	r2, [r7, #20]
 800cb76:	68bb      	ldr	r3, [r7, #8]
 800cb78:	429a      	cmp	r2, r3
 800cb7a:	d307      	bcc.n	800cb8c <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 800cb7c:	697a      	ldr	r2, [r7, #20]
 800cb7e:	68bb      	ldr	r3, [r7, #8]
 800cb80:	1ad3      	subs	r3, r2, r3
 800cb82:	617b      	str	r3, [r7, #20]
 800cb84:	693b      	ldr	r3, [r7, #16]
 800cb86:	3304      	adds	r3, #4
 800cb88:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800cb8a:	e7e9      	b.n	800cb60 <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 800cb8c:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800cb8e:	693b      	ldr	r3, [r7, #16]
 800cb90:	681a      	ldr	r2, [r3, #0]
 800cb92:	697b      	ldr	r3, [r7, #20]
 800cb94:	4413      	add	r3, r2
}
 800cb96:	4618      	mov	r0, r3
 800cb98:	371c      	adds	r7, #28
 800cb9a:	46bd      	mov	sp, r7
 800cb9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cba0:	4770      	bx	lr

0800cba2 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800cba2:	b580      	push	{r7, lr}
 800cba4:	b086      	sub	sp, #24
 800cba6:	af00      	add	r7, sp, #0
 800cba8:	6078      	str	r0, [r7, #4]
 800cbaa:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800cbac:	687b      	ldr	r3, [r7, #4]
 800cbae:	681b      	ldr	r3, [r3, #0]
 800cbb0:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800cbb2:	683b      	ldr	r3, [r7, #0]
 800cbb4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800cbb8:	d204      	bcs.n	800cbc4 <dir_sdi+0x22>
 800cbba:	683b      	ldr	r3, [r7, #0]
 800cbbc:	f003 031f 	and.w	r3, r3, #31
 800cbc0:	2b00      	cmp	r3, #0
 800cbc2:	d001      	beq.n	800cbc8 <dir_sdi+0x26>
		return FR_INT_ERR;
 800cbc4:	2302      	movs	r3, #2
 800cbc6:	e071      	b.n	800ccac <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 800cbc8:	687b      	ldr	r3, [r7, #4]
 800cbca:	683a      	ldr	r2, [r7, #0]
 800cbcc:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800cbce:	687b      	ldr	r3, [r7, #4]
 800cbd0:	689b      	ldr	r3, [r3, #8]
 800cbd2:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800cbd4:	697b      	ldr	r3, [r7, #20]
 800cbd6:	2b00      	cmp	r3, #0
 800cbd8:	d106      	bne.n	800cbe8 <dir_sdi+0x46>
 800cbda:	693b      	ldr	r3, [r7, #16]
 800cbdc:	781b      	ldrb	r3, [r3, #0]
 800cbde:	2b02      	cmp	r3, #2
 800cbe0:	d902      	bls.n	800cbe8 <dir_sdi+0x46>
		clst = fs->dirbase;
 800cbe2:	693b      	ldr	r3, [r7, #16]
 800cbe4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cbe6:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800cbe8:	697b      	ldr	r3, [r7, #20]
 800cbea:	2b00      	cmp	r3, #0
 800cbec:	d10c      	bne.n	800cc08 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800cbee:	683b      	ldr	r3, [r7, #0]
 800cbf0:	095b      	lsrs	r3, r3, #5
 800cbf2:	693a      	ldr	r2, [r7, #16]
 800cbf4:	8912      	ldrh	r2, [r2, #8]
 800cbf6:	4293      	cmp	r3, r2
 800cbf8:	d301      	bcc.n	800cbfe <dir_sdi+0x5c>
 800cbfa:	2302      	movs	r3, #2
 800cbfc:	e056      	b.n	800ccac <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 800cbfe:	693b      	ldr	r3, [r7, #16]
 800cc00:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cc02:	687b      	ldr	r3, [r7, #4]
 800cc04:	61da      	str	r2, [r3, #28]
 800cc06:	e02d      	b.n	800cc64 <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800cc08:	693b      	ldr	r3, [r7, #16]
 800cc0a:	895b      	ldrh	r3, [r3, #10]
 800cc0c:	461a      	mov	r2, r3
 800cc0e:	693b      	ldr	r3, [r7, #16]
 800cc10:	899b      	ldrh	r3, [r3, #12]
 800cc12:	fb02 f303 	mul.w	r3, r2, r3
 800cc16:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800cc18:	e019      	b.n	800cc4e <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800cc1a:	687b      	ldr	r3, [r7, #4]
 800cc1c:	6979      	ldr	r1, [r7, #20]
 800cc1e:	4618      	mov	r0, r3
 800cc20:	f7ff fc9d 	bl	800c55e <get_fat>
 800cc24:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800cc26:	697b      	ldr	r3, [r7, #20]
 800cc28:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cc2c:	d101      	bne.n	800cc32 <dir_sdi+0x90>
 800cc2e:	2301      	movs	r3, #1
 800cc30:	e03c      	b.n	800ccac <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800cc32:	697b      	ldr	r3, [r7, #20]
 800cc34:	2b01      	cmp	r3, #1
 800cc36:	d904      	bls.n	800cc42 <dir_sdi+0xa0>
 800cc38:	693b      	ldr	r3, [r7, #16]
 800cc3a:	69db      	ldr	r3, [r3, #28]
 800cc3c:	697a      	ldr	r2, [r7, #20]
 800cc3e:	429a      	cmp	r2, r3
 800cc40:	d301      	bcc.n	800cc46 <dir_sdi+0xa4>
 800cc42:	2302      	movs	r3, #2
 800cc44:	e032      	b.n	800ccac <dir_sdi+0x10a>
			ofs -= csz;
 800cc46:	683a      	ldr	r2, [r7, #0]
 800cc48:	68fb      	ldr	r3, [r7, #12]
 800cc4a:	1ad3      	subs	r3, r2, r3
 800cc4c:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800cc4e:	683a      	ldr	r2, [r7, #0]
 800cc50:	68fb      	ldr	r3, [r7, #12]
 800cc52:	429a      	cmp	r2, r3
 800cc54:	d2e1      	bcs.n	800cc1a <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 800cc56:	6979      	ldr	r1, [r7, #20]
 800cc58:	6938      	ldr	r0, [r7, #16]
 800cc5a:	f7ff fc61 	bl	800c520 <clust2sect>
 800cc5e:	4602      	mov	r2, r0
 800cc60:	687b      	ldr	r3, [r7, #4]
 800cc62:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800cc64:	687b      	ldr	r3, [r7, #4]
 800cc66:	697a      	ldr	r2, [r7, #20]
 800cc68:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800cc6a:	687b      	ldr	r3, [r7, #4]
 800cc6c:	69db      	ldr	r3, [r3, #28]
 800cc6e:	2b00      	cmp	r3, #0
 800cc70:	d101      	bne.n	800cc76 <dir_sdi+0xd4>
 800cc72:	2302      	movs	r3, #2
 800cc74:	e01a      	b.n	800ccac <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800cc76:	687b      	ldr	r3, [r7, #4]
 800cc78:	69da      	ldr	r2, [r3, #28]
 800cc7a:	693b      	ldr	r3, [r7, #16]
 800cc7c:	899b      	ldrh	r3, [r3, #12]
 800cc7e:	4619      	mov	r1, r3
 800cc80:	683b      	ldr	r3, [r7, #0]
 800cc82:	fbb3 f3f1 	udiv	r3, r3, r1
 800cc86:	441a      	add	r2, r3
 800cc88:	687b      	ldr	r3, [r7, #4]
 800cc8a:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800cc8c:	693b      	ldr	r3, [r7, #16]
 800cc8e:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800cc92:	693b      	ldr	r3, [r7, #16]
 800cc94:	899b      	ldrh	r3, [r3, #12]
 800cc96:	461a      	mov	r2, r3
 800cc98:	683b      	ldr	r3, [r7, #0]
 800cc9a:	fbb3 f0f2 	udiv	r0, r3, r2
 800cc9e:	fb00 f202 	mul.w	r2, r0, r2
 800cca2:	1a9b      	subs	r3, r3, r2
 800cca4:	18ca      	adds	r2, r1, r3
 800cca6:	687b      	ldr	r3, [r7, #4]
 800cca8:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800ccaa:	2300      	movs	r3, #0
}
 800ccac:	4618      	mov	r0, r3
 800ccae:	3718      	adds	r7, #24
 800ccb0:	46bd      	mov	sp, r7
 800ccb2:	bd80      	pop	{r7, pc}

0800ccb4 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800ccb4:	b580      	push	{r7, lr}
 800ccb6:	b086      	sub	sp, #24
 800ccb8:	af00      	add	r7, sp, #0
 800ccba:	6078      	str	r0, [r7, #4]
 800ccbc:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800ccbe:	687b      	ldr	r3, [r7, #4]
 800ccc0:	681b      	ldr	r3, [r3, #0]
 800ccc2:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800ccc4:	687b      	ldr	r3, [r7, #4]
 800ccc6:	695b      	ldr	r3, [r3, #20]
 800ccc8:	3320      	adds	r3, #32
 800ccca:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800cccc:	687b      	ldr	r3, [r7, #4]
 800ccce:	69db      	ldr	r3, [r3, #28]
 800ccd0:	2b00      	cmp	r3, #0
 800ccd2:	d003      	beq.n	800ccdc <dir_next+0x28>
 800ccd4:	68bb      	ldr	r3, [r7, #8]
 800ccd6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800ccda:	d301      	bcc.n	800cce0 <dir_next+0x2c>
 800ccdc:	2304      	movs	r3, #4
 800ccde:	e0bb      	b.n	800ce58 <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800cce0:	68fb      	ldr	r3, [r7, #12]
 800cce2:	899b      	ldrh	r3, [r3, #12]
 800cce4:	461a      	mov	r2, r3
 800cce6:	68bb      	ldr	r3, [r7, #8]
 800cce8:	fbb3 f1f2 	udiv	r1, r3, r2
 800ccec:	fb01 f202 	mul.w	r2, r1, r2
 800ccf0:	1a9b      	subs	r3, r3, r2
 800ccf2:	2b00      	cmp	r3, #0
 800ccf4:	f040 809d 	bne.w	800ce32 <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 800ccf8:	687b      	ldr	r3, [r7, #4]
 800ccfa:	69db      	ldr	r3, [r3, #28]
 800ccfc:	1c5a      	adds	r2, r3, #1
 800ccfe:	687b      	ldr	r3, [r7, #4]
 800cd00:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800cd02:	687b      	ldr	r3, [r7, #4]
 800cd04:	699b      	ldr	r3, [r3, #24]
 800cd06:	2b00      	cmp	r3, #0
 800cd08:	d10b      	bne.n	800cd22 <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800cd0a:	68bb      	ldr	r3, [r7, #8]
 800cd0c:	095b      	lsrs	r3, r3, #5
 800cd0e:	68fa      	ldr	r2, [r7, #12]
 800cd10:	8912      	ldrh	r2, [r2, #8]
 800cd12:	4293      	cmp	r3, r2
 800cd14:	f0c0 808d 	bcc.w	800ce32 <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 800cd18:	687b      	ldr	r3, [r7, #4]
 800cd1a:	2200      	movs	r2, #0
 800cd1c:	61da      	str	r2, [r3, #28]
 800cd1e:	2304      	movs	r3, #4
 800cd20:	e09a      	b.n	800ce58 <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800cd22:	68fb      	ldr	r3, [r7, #12]
 800cd24:	899b      	ldrh	r3, [r3, #12]
 800cd26:	461a      	mov	r2, r3
 800cd28:	68bb      	ldr	r3, [r7, #8]
 800cd2a:	fbb3 f3f2 	udiv	r3, r3, r2
 800cd2e:	68fa      	ldr	r2, [r7, #12]
 800cd30:	8952      	ldrh	r2, [r2, #10]
 800cd32:	3a01      	subs	r2, #1
 800cd34:	4013      	ands	r3, r2
 800cd36:	2b00      	cmp	r3, #0
 800cd38:	d17b      	bne.n	800ce32 <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800cd3a:	687a      	ldr	r2, [r7, #4]
 800cd3c:	687b      	ldr	r3, [r7, #4]
 800cd3e:	699b      	ldr	r3, [r3, #24]
 800cd40:	4619      	mov	r1, r3
 800cd42:	4610      	mov	r0, r2
 800cd44:	f7ff fc0b 	bl	800c55e <get_fat>
 800cd48:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800cd4a:	697b      	ldr	r3, [r7, #20]
 800cd4c:	2b01      	cmp	r3, #1
 800cd4e:	d801      	bhi.n	800cd54 <dir_next+0xa0>
 800cd50:	2302      	movs	r3, #2
 800cd52:	e081      	b.n	800ce58 <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800cd54:	697b      	ldr	r3, [r7, #20]
 800cd56:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cd5a:	d101      	bne.n	800cd60 <dir_next+0xac>
 800cd5c:	2301      	movs	r3, #1
 800cd5e:	e07b      	b.n	800ce58 <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800cd60:	68fb      	ldr	r3, [r7, #12]
 800cd62:	69db      	ldr	r3, [r3, #28]
 800cd64:	697a      	ldr	r2, [r7, #20]
 800cd66:	429a      	cmp	r2, r3
 800cd68:	d359      	bcc.n	800ce1e <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800cd6a:	683b      	ldr	r3, [r7, #0]
 800cd6c:	2b00      	cmp	r3, #0
 800cd6e:	d104      	bne.n	800cd7a <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 800cd70:	687b      	ldr	r3, [r7, #4]
 800cd72:	2200      	movs	r2, #0
 800cd74:	61da      	str	r2, [r3, #28]
 800cd76:	2304      	movs	r3, #4
 800cd78:	e06e      	b.n	800ce58 <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800cd7a:	687a      	ldr	r2, [r7, #4]
 800cd7c:	687b      	ldr	r3, [r7, #4]
 800cd7e:	699b      	ldr	r3, [r3, #24]
 800cd80:	4619      	mov	r1, r3
 800cd82:	4610      	mov	r0, r2
 800cd84:	f7ff fe3d 	bl	800ca02 <create_chain>
 800cd88:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800cd8a:	697b      	ldr	r3, [r7, #20]
 800cd8c:	2b00      	cmp	r3, #0
 800cd8e:	d101      	bne.n	800cd94 <dir_next+0xe0>
 800cd90:	2307      	movs	r3, #7
 800cd92:	e061      	b.n	800ce58 <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800cd94:	697b      	ldr	r3, [r7, #20]
 800cd96:	2b01      	cmp	r3, #1
 800cd98:	d101      	bne.n	800cd9e <dir_next+0xea>
 800cd9a:	2302      	movs	r3, #2
 800cd9c:	e05c      	b.n	800ce58 <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800cd9e:	697b      	ldr	r3, [r7, #20]
 800cda0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cda4:	d101      	bne.n	800cdaa <dir_next+0xf6>
 800cda6:	2301      	movs	r3, #1
 800cda8:	e056      	b.n	800ce58 <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800cdaa:	68f8      	ldr	r0, [r7, #12]
 800cdac:	f7ff fad6 	bl	800c35c <sync_window>
 800cdb0:	4603      	mov	r3, r0
 800cdb2:	2b00      	cmp	r3, #0
 800cdb4:	d001      	beq.n	800cdba <dir_next+0x106>
 800cdb6:	2301      	movs	r3, #1
 800cdb8:	e04e      	b.n	800ce58 <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800cdba:	68fb      	ldr	r3, [r7, #12]
 800cdbc:	f103 0038 	add.w	r0, r3, #56	@ 0x38
 800cdc0:	68fb      	ldr	r3, [r7, #12]
 800cdc2:	899b      	ldrh	r3, [r3, #12]
 800cdc4:	461a      	mov	r2, r3
 800cdc6:	2100      	movs	r1, #0
 800cdc8:	f7ff f8fe 	bl	800bfc8 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800cdcc:	2300      	movs	r3, #0
 800cdce:	613b      	str	r3, [r7, #16]
 800cdd0:	6979      	ldr	r1, [r7, #20]
 800cdd2:	68f8      	ldr	r0, [r7, #12]
 800cdd4:	f7ff fba4 	bl	800c520 <clust2sect>
 800cdd8:	4602      	mov	r2, r0
 800cdda:	68fb      	ldr	r3, [r7, #12]
 800cddc:	635a      	str	r2, [r3, #52]	@ 0x34
 800cdde:	e012      	b.n	800ce06 <dir_next+0x152>
						fs->wflag = 1;
 800cde0:	68fb      	ldr	r3, [r7, #12]
 800cde2:	2201      	movs	r2, #1
 800cde4:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800cde6:	68f8      	ldr	r0, [r7, #12]
 800cde8:	f7ff fab8 	bl	800c35c <sync_window>
 800cdec:	4603      	mov	r3, r0
 800cdee:	2b00      	cmp	r3, #0
 800cdf0:	d001      	beq.n	800cdf6 <dir_next+0x142>
 800cdf2:	2301      	movs	r3, #1
 800cdf4:	e030      	b.n	800ce58 <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800cdf6:	693b      	ldr	r3, [r7, #16]
 800cdf8:	3301      	adds	r3, #1
 800cdfa:	613b      	str	r3, [r7, #16]
 800cdfc:	68fb      	ldr	r3, [r7, #12]
 800cdfe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ce00:	1c5a      	adds	r2, r3, #1
 800ce02:	68fb      	ldr	r3, [r7, #12]
 800ce04:	635a      	str	r2, [r3, #52]	@ 0x34
 800ce06:	68fb      	ldr	r3, [r7, #12]
 800ce08:	895b      	ldrh	r3, [r3, #10]
 800ce0a:	461a      	mov	r2, r3
 800ce0c:	693b      	ldr	r3, [r7, #16]
 800ce0e:	4293      	cmp	r3, r2
 800ce10:	d3e6      	bcc.n	800cde0 <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 800ce12:	68fb      	ldr	r3, [r7, #12]
 800ce14:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800ce16:	693b      	ldr	r3, [r7, #16]
 800ce18:	1ad2      	subs	r2, r2, r3
 800ce1a:	68fb      	ldr	r3, [r7, #12]
 800ce1c:	635a      	str	r2, [r3, #52]	@ 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800ce1e:	687b      	ldr	r3, [r7, #4]
 800ce20:	697a      	ldr	r2, [r7, #20]
 800ce22:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800ce24:	6979      	ldr	r1, [r7, #20]
 800ce26:	68f8      	ldr	r0, [r7, #12]
 800ce28:	f7ff fb7a 	bl	800c520 <clust2sect>
 800ce2c:	4602      	mov	r2, r0
 800ce2e:	687b      	ldr	r3, [r7, #4]
 800ce30:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800ce32:	687b      	ldr	r3, [r7, #4]
 800ce34:	68ba      	ldr	r2, [r7, #8]
 800ce36:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800ce38:	68fb      	ldr	r3, [r7, #12]
 800ce3a:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800ce3e:	68fb      	ldr	r3, [r7, #12]
 800ce40:	899b      	ldrh	r3, [r3, #12]
 800ce42:	461a      	mov	r2, r3
 800ce44:	68bb      	ldr	r3, [r7, #8]
 800ce46:	fbb3 f0f2 	udiv	r0, r3, r2
 800ce4a:	fb00 f202 	mul.w	r2, r0, r2
 800ce4e:	1a9b      	subs	r3, r3, r2
 800ce50:	18ca      	adds	r2, r1, r3
 800ce52:	687b      	ldr	r3, [r7, #4]
 800ce54:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800ce56:	2300      	movs	r3, #0
}
 800ce58:	4618      	mov	r0, r3
 800ce5a:	3718      	adds	r7, #24
 800ce5c:	46bd      	mov	sp, r7
 800ce5e:	bd80      	pop	{r7, pc}

0800ce60 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800ce60:	b580      	push	{r7, lr}
 800ce62:	b086      	sub	sp, #24
 800ce64:	af00      	add	r7, sp, #0
 800ce66:	6078      	str	r0, [r7, #4]
 800ce68:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800ce6a:	687b      	ldr	r3, [r7, #4]
 800ce6c:	681b      	ldr	r3, [r3, #0]
 800ce6e:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800ce70:	2100      	movs	r1, #0
 800ce72:	6878      	ldr	r0, [r7, #4]
 800ce74:	f7ff fe95 	bl	800cba2 <dir_sdi>
 800ce78:	4603      	mov	r3, r0
 800ce7a:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800ce7c:	7dfb      	ldrb	r3, [r7, #23]
 800ce7e:	2b00      	cmp	r3, #0
 800ce80:	d12b      	bne.n	800ceda <dir_alloc+0x7a>
		n = 0;
 800ce82:	2300      	movs	r3, #0
 800ce84:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800ce86:	687b      	ldr	r3, [r7, #4]
 800ce88:	69db      	ldr	r3, [r3, #28]
 800ce8a:	4619      	mov	r1, r3
 800ce8c:	68f8      	ldr	r0, [r7, #12]
 800ce8e:	f7ff faa9 	bl	800c3e4 <move_window>
 800ce92:	4603      	mov	r3, r0
 800ce94:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800ce96:	7dfb      	ldrb	r3, [r7, #23]
 800ce98:	2b00      	cmp	r3, #0
 800ce9a:	d11d      	bne.n	800ced8 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800ce9c:	687b      	ldr	r3, [r7, #4]
 800ce9e:	6a1b      	ldr	r3, [r3, #32]
 800cea0:	781b      	ldrb	r3, [r3, #0]
 800cea2:	2be5      	cmp	r3, #229	@ 0xe5
 800cea4:	d004      	beq.n	800ceb0 <dir_alloc+0x50>
 800cea6:	687b      	ldr	r3, [r7, #4]
 800cea8:	6a1b      	ldr	r3, [r3, #32]
 800ceaa:	781b      	ldrb	r3, [r3, #0]
 800ceac:	2b00      	cmp	r3, #0
 800ceae:	d107      	bne.n	800cec0 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800ceb0:	693b      	ldr	r3, [r7, #16]
 800ceb2:	3301      	adds	r3, #1
 800ceb4:	613b      	str	r3, [r7, #16]
 800ceb6:	693a      	ldr	r2, [r7, #16]
 800ceb8:	683b      	ldr	r3, [r7, #0]
 800ceba:	429a      	cmp	r2, r3
 800cebc:	d102      	bne.n	800cec4 <dir_alloc+0x64>
 800cebe:	e00c      	b.n	800ceda <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800cec0:	2300      	movs	r3, #0
 800cec2:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800cec4:	2101      	movs	r1, #1
 800cec6:	6878      	ldr	r0, [r7, #4]
 800cec8:	f7ff fef4 	bl	800ccb4 <dir_next>
 800cecc:	4603      	mov	r3, r0
 800cece:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800ced0:	7dfb      	ldrb	r3, [r7, #23]
 800ced2:	2b00      	cmp	r3, #0
 800ced4:	d0d7      	beq.n	800ce86 <dir_alloc+0x26>
 800ced6:	e000      	b.n	800ceda <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800ced8:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800ceda:	7dfb      	ldrb	r3, [r7, #23]
 800cedc:	2b04      	cmp	r3, #4
 800cede:	d101      	bne.n	800cee4 <dir_alloc+0x84>
 800cee0:	2307      	movs	r3, #7
 800cee2:	75fb      	strb	r3, [r7, #23]
	return res;
 800cee4:	7dfb      	ldrb	r3, [r7, #23]
}
 800cee6:	4618      	mov	r0, r3
 800cee8:	3718      	adds	r7, #24
 800ceea:	46bd      	mov	sp, r7
 800ceec:	bd80      	pop	{r7, pc}

0800ceee <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800ceee:	b580      	push	{r7, lr}
 800cef0:	b084      	sub	sp, #16
 800cef2:	af00      	add	r7, sp, #0
 800cef4:	6078      	str	r0, [r7, #4]
 800cef6:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800cef8:	683b      	ldr	r3, [r7, #0]
 800cefa:	331a      	adds	r3, #26
 800cefc:	4618      	mov	r0, r3
 800cefe:	f7fe ffbf 	bl	800be80 <ld_word>
 800cf02:	4603      	mov	r3, r0
 800cf04:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800cf06:	687b      	ldr	r3, [r7, #4]
 800cf08:	781b      	ldrb	r3, [r3, #0]
 800cf0a:	2b03      	cmp	r3, #3
 800cf0c:	d109      	bne.n	800cf22 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800cf0e:	683b      	ldr	r3, [r7, #0]
 800cf10:	3314      	adds	r3, #20
 800cf12:	4618      	mov	r0, r3
 800cf14:	f7fe ffb4 	bl	800be80 <ld_word>
 800cf18:	4603      	mov	r3, r0
 800cf1a:	041b      	lsls	r3, r3, #16
 800cf1c:	68fa      	ldr	r2, [r7, #12]
 800cf1e:	4313      	orrs	r3, r2
 800cf20:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800cf22:	68fb      	ldr	r3, [r7, #12]
}
 800cf24:	4618      	mov	r0, r3
 800cf26:	3710      	adds	r7, #16
 800cf28:	46bd      	mov	sp, r7
 800cf2a:	bd80      	pop	{r7, pc}

0800cf2c <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800cf2c:	b580      	push	{r7, lr}
 800cf2e:	b084      	sub	sp, #16
 800cf30:	af00      	add	r7, sp, #0
 800cf32:	60f8      	str	r0, [r7, #12]
 800cf34:	60b9      	str	r1, [r7, #8]
 800cf36:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800cf38:	68bb      	ldr	r3, [r7, #8]
 800cf3a:	331a      	adds	r3, #26
 800cf3c:	687a      	ldr	r2, [r7, #4]
 800cf3e:	b292      	uxth	r2, r2
 800cf40:	4611      	mov	r1, r2
 800cf42:	4618      	mov	r0, r3
 800cf44:	f7fe ffd8 	bl	800bef8 <st_word>
	if (fs->fs_type == FS_FAT32) {
 800cf48:	68fb      	ldr	r3, [r7, #12]
 800cf4a:	781b      	ldrb	r3, [r3, #0]
 800cf4c:	2b03      	cmp	r3, #3
 800cf4e:	d109      	bne.n	800cf64 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800cf50:	68bb      	ldr	r3, [r7, #8]
 800cf52:	f103 0214 	add.w	r2, r3, #20
 800cf56:	687b      	ldr	r3, [r7, #4]
 800cf58:	0c1b      	lsrs	r3, r3, #16
 800cf5a:	b29b      	uxth	r3, r3
 800cf5c:	4619      	mov	r1, r3
 800cf5e:	4610      	mov	r0, r2
 800cf60:	f7fe ffca 	bl	800bef8 <st_word>
	}
}
 800cf64:	bf00      	nop
 800cf66:	3710      	adds	r7, #16
 800cf68:	46bd      	mov	sp, r7
 800cf6a:	bd80      	pop	{r7, pc}

0800cf6c <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 800cf6c:	b590      	push	{r4, r7, lr}
 800cf6e:	b087      	sub	sp, #28
 800cf70:	af00      	add	r7, sp, #0
 800cf72:	6078      	str	r0, [r7, #4]
 800cf74:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 800cf76:	683b      	ldr	r3, [r7, #0]
 800cf78:	331a      	adds	r3, #26
 800cf7a:	4618      	mov	r0, r3
 800cf7c:	f7fe ff80 	bl	800be80 <ld_word>
 800cf80:	4603      	mov	r3, r0
 800cf82:	2b00      	cmp	r3, #0
 800cf84:	d001      	beq.n	800cf8a <cmp_lfn+0x1e>
 800cf86:	2300      	movs	r3, #0
 800cf88:	e059      	b.n	800d03e <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 800cf8a:	683b      	ldr	r3, [r7, #0]
 800cf8c:	781b      	ldrb	r3, [r3, #0]
 800cf8e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800cf92:	1e5a      	subs	r2, r3, #1
 800cf94:	4613      	mov	r3, r2
 800cf96:	005b      	lsls	r3, r3, #1
 800cf98:	4413      	add	r3, r2
 800cf9a:	009b      	lsls	r3, r3, #2
 800cf9c:	4413      	add	r3, r2
 800cf9e:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800cfa0:	2301      	movs	r3, #1
 800cfa2:	81fb      	strh	r3, [r7, #14]
 800cfa4:	2300      	movs	r3, #0
 800cfa6:	613b      	str	r3, [r7, #16]
 800cfa8:	e033      	b.n	800d012 <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800cfaa:	4a27      	ldr	r2, [pc, #156]	@ (800d048 <cmp_lfn+0xdc>)
 800cfac:	693b      	ldr	r3, [r7, #16]
 800cfae:	4413      	add	r3, r2
 800cfb0:	781b      	ldrb	r3, [r3, #0]
 800cfb2:	461a      	mov	r2, r3
 800cfb4:	683b      	ldr	r3, [r7, #0]
 800cfb6:	4413      	add	r3, r2
 800cfb8:	4618      	mov	r0, r3
 800cfba:	f7fe ff61 	bl	800be80 <ld_word>
 800cfbe:	4603      	mov	r3, r0
 800cfc0:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800cfc2:	89fb      	ldrh	r3, [r7, #14]
 800cfc4:	2b00      	cmp	r3, #0
 800cfc6:	d01a      	beq.n	800cffe <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 800cfc8:	697b      	ldr	r3, [r7, #20]
 800cfca:	2bfe      	cmp	r3, #254	@ 0xfe
 800cfcc:	d812      	bhi.n	800cff4 <cmp_lfn+0x88>
 800cfce:	89bb      	ldrh	r3, [r7, #12]
 800cfd0:	4618      	mov	r0, r3
 800cfd2:	f002 f85f 	bl	800f094 <ff_wtoupper>
 800cfd6:	4603      	mov	r3, r0
 800cfd8:	461c      	mov	r4, r3
 800cfda:	697b      	ldr	r3, [r7, #20]
 800cfdc:	1c5a      	adds	r2, r3, #1
 800cfde:	617a      	str	r2, [r7, #20]
 800cfe0:	005b      	lsls	r3, r3, #1
 800cfe2:	687a      	ldr	r2, [r7, #4]
 800cfe4:	4413      	add	r3, r2
 800cfe6:	881b      	ldrh	r3, [r3, #0]
 800cfe8:	4618      	mov	r0, r3
 800cfea:	f002 f853 	bl	800f094 <ff_wtoupper>
 800cfee:	4603      	mov	r3, r0
 800cff0:	429c      	cmp	r4, r3
 800cff2:	d001      	beq.n	800cff8 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 800cff4:	2300      	movs	r3, #0
 800cff6:	e022      	b.n	800d03e <cmp_lfn+0xd2>
			}
			wc = uc;
 800cff8:	89bb      	ldrh	r3, [r7, #12]
 800cffa:	81fb      	strh	r3, [r7, #14]
 800cffc:	e006      	b.n	800d00c <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800cffe:	89bb      	ldrh	r3, [r7, #12]
 800d000:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800d004:	4293      	cmp	r3, r2
 800d006:	d001      	beq.n	800d00c <cmp_lfn+0xa0>
 800d008:	2300      	movs	r3, #0
 800d00a:	e018      	b.n	800d03e <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800d00c:	693b      	ldr	r3, [r7, #16]
 800d00e:	3301      	adds	r3, #1
 800d010:	613b      	str	r3, [r7, #16]
 800d012:	693b      	ldr	r3, [r7, #16]
 800d014:	2b0c      	cmp	r3, #12
 800d016:	d9c8      	bls.n	800cfaa <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 800d018:	683b      	ldr	r3, [r7, #0]
 800d01a:	781b      	ldrb	r3, [r3, #0]
 800d01c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d020:	2b00      	cmp	r3, #0
 800d022:	d00b      	beq.n	800d03c <cmp_lfn+0xd0>
 800d024:	89fb      	ldrh	r3, [r7, #14]
 800d026:	2b00      	cmp	r3, #0
 800d028:	d008      	beq.n	800d03c <cmp_lfn+0xd0>
 800d02a:	697b      	ldr	r3, [r7, #20]
 800d02c:	005b      	lsls	r3, r3, #1
 800d02e:	687a      	ldr	r2, [r7, #4]
 800d030:	4413      	add	r3, r2
 800d032:	881b      	ldrh	r3, [r3, #0]
 800d034:	2b00      	cmp	r3, #0
 800d036:	d001      	beq.n	800d03c <cmp_lfn+0xd0>
 800d038:	2300      	movs	r3, #0
 800d03a:	e000      	b.n	800d03e <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 800d03c:	2301      	movs	r3, #1
}
 800d03e:	4618      	mov	r0, r3
 800d040:	371c      	adds	r7, #28
 800d042:	46bd      	mov	sp, r7
 800d044:	bd90      	pop	{r4, r7, pc}
 800d046:	bf00      	nop
 800d048:	080153bc 	.word	0x080153bc

0800d04c <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 800d04c:	b580      	push	{r7, lr}
 800d04e:	b088      	sub	sp, #32
 800d050:	af00      	add	r7, sp, #0
 800d052:	60f8      	str	r0, [r7, #12]
 800d054:	60b9      	str	r1, [r7, #8]
 800d056:	4611      	mov	r1, r2
 800d058:	461a      	mov	r2, r3
 800d05a:	460b      	mov	r3, r1
 800d05c:	71fb      	strb	r3, [r7, #7]
 800d05e:	4613      	mov	r3, r2
 800d060:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 800d062:	68bb      	ldr	r3, [r7, #8]
 800d064:	330d      	adds	r3, #13
 800d066:	79ba      	ldrb	r2, [r7, #6]
 800d068:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 800d06a:	68bb      	ldr	r3, [r7, #8]
 800d06c:	330b      	adds	r3, #11
 800d06e:	220f      	movs	r2, #15
 800d070:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 800d072:	68bb      	ldr	r3, [r7, #8]
 800d074:	330c      	adds	r3, #12
 800d076:	2200      	movs	r2, #0
 800d078:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 800d07a:	68bb      	ldr	r3, [r7, #8]
 800d07c:	331a      	adds	r3, #26
 800d07e:	2100      	movs	r1, #0
 800d080:	4618      	mov	r0, r3
 800d082:	f7fe ff39 	bl	800bef8 <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 800d086:	79fb      	ldrb	r3, [r7, #7]
 800d088:	1e5a      	subs	r2, r3, #1
 800d08a:	4613      	mov	r3, r2
 800d08c:	005b      	lsls	r3, r3, #1
 800d08e:	4413      	add	r3, r2
 800d090:	009b      	lsls	r3, r3, #2
 800d092:	4413      	add	r3, r2
 800d094:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 800d096:	2300      	movs	r3, #0
 800d098:	82fb      	strh	r3, [r7, #22]
 800d09a:	2300      	movs	r3, #0
 800d09c:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800d09e:	8afb      	ldrh	r3, [r7, #22]
 800d0a0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800d0a4:	4293      	cmp	r3, r2
 800d0a6:	d007      	beq.n	800d0b8 <put_lfn+0x6c>
 800d0a8:	69fb      	ldr	r3, [r7, #28]
 800d0aa:	1c5a      	adds	r2, r3, #1
 800d0ac:	61fa      	str	r2, [r7, #28]
 800d0ae:	005b      	lsls	r3, r3, #1
 800d0b0:	68fa      	ldr	r2, [r7, #12]
 800d0b2:	4413      	add	r3, r2
 800d0b4:	881b      	ldrh	r3, [r3, #0]
 800d0b6:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 800d0b8:	4a17      	ldr	r2, [pc, #92]	@ (800d118 <put_lfn+0xcc>)
 800d0ba:	69bb      	ldr	r3, [r7, #24]
 800d0bc:	4413      	add	r3, r2
 800d0be:	781b      	ldrb	r3, [r3, #0]
 800d0c0:	461a      	mov	r2, r3
 800d0c2:	68bb      	ldr	r3, [r7, #8]
 800d0c4:	4413      	add	r3, r2
 800d0c6:	8afa      	ldrh	r2, [r7, #22]
 800d0c8:	4611      	mov	r1, r2
 800d0ca:	4618      	mov	r0, r3
 800d0cc:	f7fe ff14 	bl	800bef8 <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 800d0d0:	8afb      	ldrh	r3, [r7, #22]
 800d0d2:	2b00      	cmp	r3, #0
 800d0d4:	d102      	bne.n	800d0dc <put_lfn+0x90>
 800d0d6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800d0da:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 800d0dc:	69bb      	ldr	r3, [r7, #24]
 800d0de:	3301      	adds	r3, #1
 800d0e0:	61bb      	str	r3, [r7, #24]
 800d0e2:	69bb      	ldr	r3, [r7, #24]
 800d0e4:	2b0c      	cmp	r3, #12
 800d0e6:	d9da      	bls.n	800d09e <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 800d0e8:	8afb      	ldrh	r3, [r7, #22]
 800d0ea:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800d0ee:	4293      	cmp	r3, r2
 800d0f0:	d006      	beq.n	800d100 <put_lfn+0xb4>
 800d0f2:	69fb      	ldr	r3, [r7, #28]
 800d0f4:	005b      	lsls	r3, r3, #1
 800d0f6:	68fa      	ldr	r2, [r7, #12]
 800d0f8:	4413      	add	r3, r2
 800d0fa:	881b      	ldrh	r3, [r3, #0]
 800d0fc:	2b00      	cmp	r3, #0
 800d0fe:	d103      	bne.n	800d108 <put_lfn+0xbc>
 800d100:	79fb      	ldrb	r3, [r7, #7]
 800d102:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d106:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 800d108:	68bb      	ldr	r3, [r7, #8]
 800d10a:	79fa      	ldrb	r2, [r7, #7]
 800d10c:	701a      	strb	r2, [r3, #0]
}
 800d10e:	bf00      	nop
 800d110:	3720      	adds	r7, #32
 800d112:	46bd      	mov	sp, r7
 800d114:	bd80      	pop	{r7, pc}
 800d116:	bf00      	nop
 800d118:	080153bc 	.word	0x080153bc

0800d11c <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 800d11c:	b580      	push	{r7, lr}
 800d11e:	b08c      	sub	sp, #48	@ 0x30
 800d120:	af00      	add	r7, sp, #0
 800d122:	60f8      	str	r0, [r7, #12]
 800d124:	60b9      	str	r1, [r7, #8]
 800d126:	607a      	str	r2, [r7, #4]
 800d128:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 800d12a:	220b      	movs	r2, #11
 800d12c:	68b9      	ldr	r1, [r7, #8]
 800d12e:	68f8      	ldr	r0, [r7, #12]
 800d130:	f7fe ff29 	bl	800bf86 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 800d134:	683b      	ldr	r3, [r7, #0]
 800d136:	2b05      	cmp	r3, #5
 800d138:	d92b      	bls.n	800d192 <gen_numname+0x76>
		sr = seq;
 800d13a:	683b      	ldr	r3, [r7, #0]
 800d13c:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 800d13e:	e022      	b.n	800d186 <gen_numname+0x6a>
			wc = *lfn++;
 800d140:	687b      	ldr	r3, [r7, #4]
 800d142:	1c9a      	adds	r2, r3, #2
 800d144:	607a      	str	r2, [r7, #4]
 800d146:	881b      	ldrh	r3, [r3, #0]
 800d148:	847b      	strh	r3, [r7, #34]	@ 0x22
			for (i = 0; i < 16; i++) {
 800d14a:	2300      	movs	r3, #0
 800d14c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800d14e:	e017      	b.n	800d180 <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 800d150:	69fb      	ldr	r3, [r7, #28]
 800d152:	005a      	lsls	r2, r3, #1
 800d154:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800d156:	f003 0301 	and.w	r3, r3, #1
 800d15a:	4413      	add	r3, r2
 800d15c:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 800d15e:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800d160:	085b      	lsrs	r3, r3, #1
 800d162:	847b      	strh	r3, [r7, #34]	@ 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 800d164:	69fb      	ldr	r3, [r7, #28]
 800d166:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800d16a:	2b00      	cmp	r3, #0
 800d16c:	d005      	beq.n	800d17a <gen_numname+0x5e>
 800d16e:	69fb      	ldr	r3, [r7, #28]
 800d170:	f483 3388 	eor.w	r3, r3, #69632	@ 0x11000
 800d174:	f083 0321 	eor.w	r3, r3, #33	@ 0x21
 800d178:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 800d17a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d17c:	3301      	adds	r3, #1
 800d17e:	62bb      	str	r3, [r7, #40]	@ 0x28
 800d180:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d182:	2b0f      	cmp	r3, #15
 800d184:	d9e4      	bls.n	800d150 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 800d186:	687b      	ldr	r3, [r7, #4]
 800d188:	881b      	ldrh	r3, [r3, #0]
 800d18a:	2b00      	cmp	r3, #0
 800d18c:	d1d8      	bne.n	800d140 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 800d18e:	69fb      	ldr	r3, [r7, #28]
 800d190:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 800d192:	2307      	movs	r3, #7
 800d194:	62bb      	str	r3, [r7, #40]	@ 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 800d196:	683b      	ldr	r3, [r7, #0]
 800d198:	b2db      	uxtb	r3, r3
 800d19a:	f003 030f 	and.w	r3, r3, #15
 800d19e:	b2db      	uxtb	r3, r3
 800d1a0:	3330      	adds	r3, #48	@ 0x30
 800d1a2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (c > '9') c += 7;
 800d1a6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800d1aa:	2b39      	cmp	r3, #57	@ 0x39
 800d1ac:	d904      	bls.n	800d1b8 <gen_numname+0x9c>
 800d1ae:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800d1b2:	3307      	adds	r3, #7
 800d1b4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		ns[i--] = c;
 800d1b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d1ba:	1e5a      	subs	r2, r3, #1
 800d1bc:	62ba      	str	r2, [r7, #40]	@ 0x28
 800d1be:	3330      	adds	r3, #48	@ 0x30
 800d1c0:	443b      	add	r3, r7
 800d1c2:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 800d1c6:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 800d1ca:	683b      	ldr	r3, [r7, #0]
 800d1cc:	091b      	lsrs	r3, r3, #4
 800d1ce:	603b      	str	r3, [r7, #0]
	} while (seq);
 800d1d0:	683b      	ldr	r3, [r7, #0]
 800d1d2:	2b00      	cmp	r3, #0
 800d1d4:	d1df      	bne.n	800d196 <gen_numname+0x7a>
	ns[i] = '~';
 800d1d6:	f107 0214 	add.w	r2, r7, #20
 800d1da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d1dc:	4413      	add	r3, r2
 800d1de:	227e      	movs	r2, #126	@ 0x7e
 800d1e0:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 800d1e2:	2300      	movs	r3, #0
 800d1e4:	627b      	str	r3, [r7, #36]	@ 0x24
 800d1e6:	e002      	b.n	800d1ee <gen_numname+0xd2>
 800d1e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d1ea:	3301      	adds	r3, #1
 800d1ec:	627b      	str	r3, [r7, #36]	@ 0x24
 800d1ee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d1f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d1f2:	429a      	cmp	r2, r3
 800d1f4:	d205      	bcs.n	800d202 <gen_numname+0xe6>
 800d1f6:	68fa      	ldr	r2, [r7, #12]
 800d1f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d1fa:	4413      	add	r3, r2
 800d1fc:	781b      	ldrb	r3, [r3, #0]
 800d1fe:	2b20      	cmp	r3, #32
 800d200:	d1f2      	bne.n	800d1e8 <gen_numname+0xcc>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800d202:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d204:	2b07      	cmp	r3, #7
 800d206:	d807      	bhi.n	800d218 <gen_numname+0xfc>
 800d208:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d20a:	1c5a      	adds	r2, r3, #1
 800d20c:	62ba      	str	r2, [r7, #40]	@ 0x28
 800d20e:	3330      	adds	r3, #48	@ 0x30
 800d210:	443b      	add	r3, r7
 800d212:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 800d216:	e000      	b.n	800d21a <gen_numname+0xfe>
 800d218:	2120      	movs	r1, #32
 800d21a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d21c:	1c5a      	adds	r2, r3, #1
 800d21e:	627a      	str	r2, [r7, #36]	@ 0x24
 800d220:	68fa      	ldr	r2, [r7, #12]
 800d222:	4413      	add	r3, r2
 800d224:	460a      	mov	r2, r1
 800d226:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 800d228:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d22a:	2b07      	cmp	r3, #7
 800d22c:	d9e9      	bls.n	800d202 <gen_numname+0xe6>
}
 800d22e:	bf00      	nop
 800d230:	bf00      	nop
 800d232:	3730      	adds	r7, #48	@ 0x30
 800d234:	46bd      	mov	sp, r7
 800d236:	bd80      	pop	{r7, pc}

0800d238 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 800d238:	b480      	push	{r7}
 800d23a:	b085      	sub	sp, #20
 800d23c:	af00      	add	r7, sp, #0
 800d23e:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 800d240:	2300      	movs	r3, #0
 800d242:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 800d244:	230b      	movs	r3, #11
 800d246:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 800d248:	7bfb      	ldrb	r3, [r7, #15]
 800d24a:	b2da      	uxtb	r2, r3
 800d24c:	0852      	lsrs	r2, r2, #1
 800d24e:	01db      	lsls	r3, r3, #7
 800d250:	4313      	orrs	r3, r2
 800d252:	b2da      	uxtb	r2, r3
 800d254:	687b      	ldr	r3, [r7, #4]
 800d256:	1c59      	adds	r1, r3, #1
 800d258:	6079      	str	r1, [r7, #4]
 800d25a:	781b      	ldrb	r3, [r3, #0]
 800d25c:	4413      	add	r3, r2
 800d25e:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 800d260:	68bb      	ldr	r3, [r7, #8]
 800d262:	3b01      	subs	r3, #1
 800d264:	60bb      	str	r3, [r7, #8]
 800d266:	68bb      	ldr	r3, [r7, #8]
 800d268:	2b00      	cmp	r3, #0
 800d26a:	d1ed      	bne.n	800d248 <sum_sfn+0x10>
	return sum;
 800d26c:	7bfb      	ldrb	r3, [r7, #15]
}
 800d26e:	4618      	mov	r0, r3
 800d270:	3714      	adds	r7, #20
 800d272:	46bd      	mov	sp, r7
 800d274:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d278:	4770      	bx	lr

0800d27a <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800d27a:	b580      	push	{r7, lr}
 800d27c:	b086      	sub	sp, #24
 800d27e:	af00      	add	r7, sp, #0
 800d280:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800d282:	687b      	ldr	r3, [r7, #4]
 800d284:	681b      	ldr	r3, [r3, #0]
 800d286:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800d288:	2100      	movs	r1, #0
 800d28a:	6878      	ldr	r0, [r7, #4]
 800d28c:	f7ff fc89 	bl	800cba2 <dir_sdi>
 800d290:	4603      	mov	r3, r0
 800d292:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800d294:	7dfb      	ldrb	r3, [r7, #23]
 800d296:	2b00      	cmp	r3, #0
 800d298:	d001      	beq.n	800d29e <dir_find+0x24>
 800d29a:	7dfb      	ldrb	r3, [r7, #23]
 800d29c:	e0a9      	b.n	800d3f2 <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800d29e:	23ff      	movs	r3, #255	@ 0xff
 800d2a0:	753b      	strb	r3, [r7, #20]
 800d2a2:	7d3b      	ldrb	r3, [r7, #20]
 800d2a4:	757b      	strb	r3, [r7, #21]
 800d2a6:	687b      	ldr	r3, [r7, #4]
 800d2a8:	f04f 32ff 	mov.w	r2, #4294967295
 800d2ac:	631a      	str	r2, [r3, #48]	@ 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 800d2ae:	687b      	ldr	r3, [r7, #4]
 800d2b0:	69db      	ldr	r3, [r3, #28]
 800d2b2:	4619      	mov	r1, r3
 800d2b4:	6938      	ldr	r0, [r7, #16]
 800d2b6:	f7ff f895 	bl	800c3e4 <move_window>
 800d2ba:	4603      	mov	r3, r0
 800d2bc:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800d2be:	7dfb      	ldrb	r3, [r7, #23]
 800d2c0:	2b00      	cmp	r3, #0
 800d2c2:	f040 8090 	bne.w	800d3e6 <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 800d2c6:	687b      	ldr	r3, [r7, #4]
 800d2c8:	6a1b      	ldr	r3, [r3, #32]
 800d2ca:	781b      	ldrb	r3, [r3, #0]
 800d2cc:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800d2ce:	7dbb      	ldrb	r3, [r7, #22]
 800d2d0:	2b00      	cmp	r3, #0
 800d2d2:	d102      	bne.n	800d2da <dir_find+0x60>
 800d2d4:	2304      	movs	r3, #4
 800d2d6:	75fb      	strb	r3, [r7, #23]
 800d2d8:	e08a      	b.n	800d3f0 <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 800d2da:	687b      	ldr	r3, [r7, #4]
 800d2dc:	6a1b      	ldr	r3, [r3, #32]
 800d2de:	330b      	adds	r3, #11
 800d2e0:	781b      	ldrb	r3, [r3, #0]
 800d2e2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800d2e6:	73fb      	strb	r3, [r7, #15]
 800d2e8:	687b      	ldr	r3, [r7, #4]
 800d2ea:	7bfa      	ldrb	r2, [r7, #15]
 800d2ec:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 800d2ee:	7dbb      	ldrb	r3, [r7, #22]
 800d2f0:	2be5      	cmp	r3, #229	@ 0xe5
 800d2f2:	d007      	beq.n	800d304 <dir_find+0x8a>
 800d2f4:	7bfb      	ldrb	r3, [r7, #15]
 800d2f6:	f003 0308 	and.w	r3, r3, #8
 800d2fa:	2b00      	cmp	r3, #0
 800d2fc:	d009      	beq.n	800d312 <dir_find+0x98>
 800d2fe:	7bfb      	ldrb	r3, [r7, #15]
 800d300:	2b0f      	cmp	r3, #15
 800d302:	d006      	beq.n	800d312 <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800d304:	23ff      	movs	r3, #255	@ 0xff
 800d306:	757b      	strb	r3, [r7, #21]
 800d308:	687b      	ldr	r3, [r7, #4]
 800d30a:	f04f 32ff 	mov.w	r2, #4294967295
 800d30e:	631a      	str	r2, [r3, #48]	@ 0x30
 800d310:	e05e      	b.n	800d3d0 <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 800d312:	7bfb      	ldrb	r3, [r7, #15]
 800d314:	2b0f      	cmp	r3, #15
 800d316:	d136      	bne.n	800d386 <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 800d318:	687b      	ldr	r3, [r7, #4]
 800d31a:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800d31e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d322:	2b00      	cmp	r3, #0
 800d324:	d154      	bne.n	800d3d0 <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 800d326:	7dbb      	ldrb	r3, [r7, #22]
 800d328:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d32c:	2b00      	cmp	r3, #0
 800d32e:	d00d      	beq.n	800d34c <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 800d330:	687b      	ldr	r3, [r7, #4]
 800d332:	6a1b      	ldr	r3, [r3, #32]
 800d334:	7b5b      	ldrb	r3, [r3, #13]
 800d336:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 800d338:	7dbb      	ldrb	r3, [r7, #22]
 800d33a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800d33e:	75bb      	strb	r3, [r7, #22]
 800d340:	7dbb      	ldrb	r3, [r7, #22]
 800d342:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 800d344:	687b      	ldr	r3, [r7, #4]
 800d346:	695a      	ldr	r2, [r3, #20]
 800d348:	687b      	ldr	r3, [r7, #4]
 800d34a:	631a      	str	r2, [r3, #48]	@ 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800d34c:	7dba      	ldrb	r2, [r7, #22]
 800d34e:	7d7b      	ldrb	r3, [r7, #21]
 800d350:	429a      	cmp	r2, r3
 800d352:	d115      	bne.n	800d380 <dir_find+0x106>
 800d354:	687b      	ldr	r3, [r7, #4]
 800d356:	6a1b      	ldr	r3, [r3, #32]
 800d358:	330d      	adds	r3, #13
 800d35a:	781b      	ldrb	r3, [r3, #0]
 800d35c:	7d3a      	ldrb	r2, [r7, #20]
 800d35e:	429a      	cmp	r2, r3
 800d360:	d10e      	bne.n	800d380 <dir_find+0x106>
 800d362:	693b      	ldr	r3, [r7, #16]
 800d364:	691a      	ldr	r2, [r3, #16]
 800d366:	687b      	ldr	r3, [r7, #4]
 800d368:	6a1b      	ldr	r3, [r3, #32]
 800d36a:	4619      	mov	r1, r3
 800d36c:	4610      	mov	r0, r2
 800d36e:	f7ff fdfd 	bl	800cf6c <cmp_lfn>
 800d372:	4603      	mov	r3, r0
 800d374:	2b00      	cmp	r3, #0
 800d376:	d003      	beq.n	800d380 <dir_find+0x106>
 800d378:	7d7b      	ldrb	r3, [r7, #21]
 800d37a:	3b01      	subs	r3, #1
 800d37c:	b2db      	uxtb	r3, r3
 800d37e:	e000      	b.n	800d382 <dir_find+0x108>
 800d380:	23ff      	movs	r3, #255	@ 0xff
 800d382:	757b      	strb	r3, [r7, #21]
 800d384:	e024      	b.n	800d3d0 <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800d386:	7d7b      	ldrb	r3, [r7, #21]
 800d388:	2b00      	cmp	r3, #0
 800d38a:	d109      	bne.n	800d3a0 <dir_find+0x126>
 800d38c:	687b      	ldr	r3, [r7, #4]
 800d38e:	6a1b      	ldr	r3, [r3, #32]
 800d390:	4618      	mov	r0, r3
 800d392:	f7ff ff51 	bl	800d238 <sum_sfn>
 800d396:	4603      	mov	r3, r0
 800d398:	461a      	mov	r2, r3
 800d39a:	7d3b      	ldrb	r3, [r7, #20]
 800d39c:	4293      	cmp	r3, r2
 800d39e:	d024      	beq.n	800d3ea <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800d3a0:	687b      	ldr	r3, [r7, #4]
 800d3a2:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800d3a6:	f003 0301 	and.w	r3, r3, #1
 800d3aa:	2b00      	cmp	r3, #0
 800d3ac:	d10a      	bne.n	800d3c4 <dir_find+0x14a>
 800d3ae:	687b      	ldr	r3, [r7, #4]
 800d3b0:	6a18      	ldr	r0, [r3, #32]
 800d3b2:	687b      	ldr	r3, [r7, #4]
 800d3b4:	3324      	adds	r3, #36	@ 0x24
 800d3b6:	220b      	movs	r2, #11
 800d3b8:	4619      	mov	r1, r3
 800d3ba:	f7fe fe20 	bl	800bffe <mem_cmp>
 800d3be:	4603      	mov	r3, r0
 800d3c0:	2b00      	cmp	r3, #0
 800d3c2:	d014      	beq.n	800d3ee <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800d3c4:	23ff      	movs	r3, #255	@ 0xff
 800d3c6:	757b      	strb	r3, [r7, #21]
 800d3c8:	687b      	ldr	r3, [r7, #4]
 800d3ca:	f04f 32ff 	mov.w	r2, #4294967295
 800d3ce:	631a      	str	r2, [r3, #48]	@ 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800d3d0:	2100      	movs	r1, #0
 800d3d2:	6878      	ldr	r0, [r7, #4]
 800d3d4:	f7ff fc6e 	bl	800ccb4 <dir_next>
 800d3d8:	4603      	mov	r3, r0
 800d3da:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800d3dc:	7dfb      	ldrb	r3, [r7, #23]
 800d3de:	2b00      	cmp	r3, #0
 800d3e0:	f43f af65 	beq.w	800d2ae <dir_find+0x34>
 800d3e4:	e004      	b.n	800d3f0 <dir_find+0x176>
		if (res != FR_OK) break;
 800d3e6:	bf00      	nop
 800d3e8:	e002      	b.n	800d3f0 <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800d3ea:	bf00      	nop
 800d3ec:	e000      	b.n	800d3f0 <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800d3ee:	bf00      	nop

	return res;
 800d3f0:	7dfb      	ldrb	r3, [r7, #23]
}
 800d3f2:	4618      	mov	r0, r3
 800d3f4:	3718      	adds	r7, #24
 800d3f6:	46bd      	mov	sp, r7
 800d3f8:	bd80      	pop	{r7, pc}
	...

0800d3fc <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800d3fc:	b580      	push	{r7, lr}
 800d3fe:	b08c      	sub	sp, #48	@ 0x30
 800d400:	af00      	add	r7, sp, #0
 800d402:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800d404:	687b      	ldr	r3, [r7, #4]
 800d406:	681b      	ldr	r3, [r3, #0]
 800d408:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 800d40a:	687b      	ldr	r3, [r7, #4]
 800d40c:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800d410:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 800d414:	2b00      	cmp	r3, #0
 800d416:	d001      	beq.n	800d41c <dir_register+0x20>
 800d418:	2306      	movs	r3, #6
 800d41a:	e0e0      	b.n	800d5de <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 800d41c:	2300      	movs	r3, #0
 800d41e:	627b      	str	r3, [r7, #36]	@ 0x24
 800d420:	e002      	b.n	800d428 <dir_register+0x2c>
 800d422:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d424:	3301      	adds	r3, #1
 800d426:	627b      	str	r3, [r7, #36]	@ 0x24
 800d428:	69fb      	ldr	r3, [r7, #28]
 800d42a:	691a      	ldr	r2, [r3, #16]
 800d42c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d42e:	005b      	lsls	r3, r3, #1
 800d430:	4413      	add	r3, r2
 800d432:	881b      	ldrh	r3, [r3, #0]
 800d434:	2b00      	cmp	r3, #0
 800d436:	d1f4      	bne.n	800d422 <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 800d438:	687b      	ldr	r3, [r7, #4]
 800d43a:	f103 0124 	add.w	r1, r3, #36	@ 0x24
 800d43e:	f107 030c 	add.w	r3, r7, #12
 800d442:	220c      	movs	r2, #12
 800d444:	4618      	mov	r0, r3
 800d446:	f7fe fd9e 	bl	800bf86 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 800d44a:	7dfb      	ldrb	r3, [r7, #23]
 800d44c:	f003 0301 	and.w	r3, r3, #1
 800d450:	2b00      	cmp	r3, #0
 800d452:	d032      	beq.n	800d4ba <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 800d454:	687b      	ldr	r3, [r7, #4]
 800d456:	2240      	movs	r2, #64	@ 0x40
 800d458:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		for (n = 1; n < 100; n++) {
 800d45c:	2301      	movs	r3, #1
 800d45e:	62bb      	str	r3, [r7, #40]	@ 0x28
 800d460:	e016      	b.n	800d490 <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 800d462:	687b      	ldr	r3, [r7, #4]
 800d464:	f103 0024 	add.w	r0, r3, #36	@ 0x24
 800d468:	69fb      	ldr	r3, [r7, #28]
 800d46a:	691a      	ldr	r2, [r3, #16]
 800d46c:	f107 010c 	add.w	r1, r7, #12
 800d470:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d472:	f7ff fe53 	bl	800d11c <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 800d476:	6878      	ldr	r0, [r7, #4]
 800d478:	f7ff feff 	bl	800d27a <dir_find>
 800d47c:	4603      	mov	r3, r0
 800d47e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			if (res != FR_OK) break;
 800d482:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800d486:	2b00      	cmp	r3, #0
 800d488:	d106      	bne.n	800d498 <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 800d48a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d48c:	3301      	adds	r3, #1
 800d48e:	62bb      	str	r3, [r7, #40]	@ 0x28
 800d490:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d492:	2b63      	cmp	r3, #99	@ 0x63
 800d494:	d9e5      	bls.n	800d462 <dir_register+0x66>
 800d496:	e000      	b.n	800d49a <dir_register+0x9e>
			if (res != FR_OK) break;
 800d498:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 800d49a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d49c:	2b64      	cmp	r3, #100	@ 0x64
 800d49e:	d101      	bne.n	800d4a4 <dir_register+0xa8>
 800d4a0:	2307      	movs	r3, #7
 800d4a2:	e09c      	b.n	800d5de <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 800d4a4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800d4a8:	2b04      	cmp	r3, #4
 800d4aa:	d002      	beq.n	800d4b2 <dir_register+0xb6>
 800d4ac:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800d4b0:	e095      	b.n	800d5de <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 800d4b2:	7dfa      	ldrb	r2, [r7, #23]
 800d4b4:	687b      	ldr	r3, [r7, #4]
 800d4b6:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 800d4ba:	7dfb      	ldrb	r3, [r7, #23]
 800d4bc:	f003 0302 	and.w	r3, r3, #2
 800d4c0:	2b00      	cmp	r3, #0
 800d4c2:	d007      	beq.n	800d4d4 <dir_register+0xd8>
 800d4c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d4c6:	330c      	adds	r3, #12
 800d4c8:	4a47      	ldr	r2, [pc, #284]	@ (800d5e8 <dir_register+0x1ec>)
 800d4ca:	fba2 2303 	umull	r2, r3, r2, r3
 800d4ce:	089b      	lsrs	r3, r3, #2
 800d4d0:	3301      	adds	r3, #1
 800d4d2:	e000      	b.n	800d4d6 <dir_register+0xda>
 800d4d4:	2301      	movs	r3, #1
 800d4d6:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 800d4d8:	6a39      	ldr	r1, [r7, #32]
 800d4da:	6878      	ldr	r0, [r7, #4]
 800d4dc:	f7ff fcc0 	bl	800ce60 <dir_alloc>
 800d4e0:	4603      	mov	r3, r0
 800d4e2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 800d4e6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800d4ea:	2b00      	cmp	r3, #0
 800d4ec:	d148      	bne.n	800d580 <dir_register+0x184>
 800d4ee:	6a3b      	ldr	r3, [r7, #32]
 800d4f0:	3b01      	subs	r3, #1
 800d4f2:	623b      	str	r3, [r7, #32]
 800d4f4:	6a3b      	ldr	r3, [r7, #32]
 800d4f6:	2b00      	cmp	r3, #0
 800d4f8:	d042      	beq.n	800d580 <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 800d4fa:	687b      	ldr	r3, [r7, #4]
 800d4fc:	695a      	ldr	r2, [r3, #20]
 800d4fe:	6a3b      	ldr	r3, [r7, #32]
 800d500:	015b      	lsls	r3, r3, #5
 800d502:	1ad3      	subs	r3, r2, r3
 800d504:	4619      	mov	r1, r3
 800d506:	6878      	ldr	r0, [r7, #4]
 800d508:	f7ff fb4b 	bl	800cba2 <dir_sdi>
 800d50c:	4603      	mov	r3, r0
 800d50e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (res == FR_OK) {
 800d512:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800d516:	2b00      	cmp	r3, #0
 800d518:	d132      	bne.n	800d580 <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 800d51a:	687b      	ldr	r3, [r7, #4]
 800d51c:	3324      	adds	r3, #36	@ 0x24
 800d51e:	4618      	mov	r0, r3
 800d520:	f7ff fe8a 	bl	800d238 <sum_sfn>
 800d524:	4603      	mov	r3, r0
 800d526:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 800d528:	687b      	ldr	r3, [r7, #4]
 800d52a:	69db      	ldr	r3, [r3, #28]
 800d52c:	4619      	mov	r1, r3
 800d52e:	69f8      	ldr	r0, [r7, #28]
 800d530:	f7fe ff58 	bl	800c3e4 <move_window>
 800d534:	4603      	mov	r3, r0
 800d536:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
				if (res != FR_OK) break;
 800d53a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800d53e:	2b00      	cmp	r3, #0
 800d540:	d11d      	bne.n	800d57e <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 800d542:	69fb      	ldr	r3, [r7, #28]
 800d544:	6918      	ldr	r0, [r3, #16]
 800d546:	687b      	ldr	r3, [r7, #4]
 800d548:	6a19      	ldr	r1, [r3, #32]
 800d54a:	6a3b      	ldr	r3, [r7, #32]
 800d54c:	b2da      	uxtb	r2, r3
 800d54e:	7efb      	ldrb	r3, [r7, #27]
 800d550:	f7ff fd7c 	bl	800d04c <put_lfn>
				fs->wflag = 1;
 800d554:	69fb      	ldr	r3, [r7, #28]
 800d556:	2201      	movs	r2, #1
 800d558:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 800d55a:	2100      	movs	r1, #0
 800d55c:	6878      	ldr	r0, [r7, #4]
 800d55e:	f7ff fba9 	bl	800ccb4 <dir_next>
 800d562:	4603      	mov	r3, r0
 800d564:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			} while (res == FR_OK && --nent);
 800d568:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800d56c:	2b00      	cmp	r3, #0
 800d56e:	d107      	bne.n	800d580 <dir_register+0x184>
 800d570:	6a3b      	ldr	r3, [r7, #32]
 800d572:	3b01      	subs	r3, #1
 800d574:	623b      	str	r3, [r7, #32]
 800d576:	6a3b      	ldr	r3, [r7, #32]
 800d578:	2b00      	cmp	r3, #0
 800d57a:	d1d5      	bne.n	800d528 <dir_register+0x12c>
 800d57c:	e000      	b.n	800d580 <dir_register+0x184>
				if (res != FR_OK) break;
 800d57e:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800d580:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800d584:	2b00      	cmp	r3, #0
 800d586:	d128      	bne.n	800d5da <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 800d588:	687b      	ldr	r3, [r7, #4]
 800d58a:	69db      	ldr	r3, [r3, #28]
 800d58c:	4619      	mov	r1, r3
 800d58e:	69f8      	ldr	r0, [r7, #28]
 800d590:	f7fe ff28 	bl	800c3e4 <move_window>
 800d594:	4603      	mov	r3, r0
 800d596:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (res == FR_OK) {
 800d59a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800d59e:	2b00      	cmp	r3, #0
 800d5a0:	d11b      	bne.n	800d5da <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800d5a2:	687b      	ldr	r3, [r7, #4]
 800d5a4:	6a1b      	ldr	r3, [r3, #32]
 800d5a6:	2220      	movs	r2, #32
 800d5a8:	2100      	movs	r1, #0
 800d5aa:	4618      	mov	r0, r3
 800d5ac:	f7fe fd0c 	bl	800bfc8 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800d5b0:	687b      	ldr	r3, [r7, #4]
 800d5b2:	6a18      	ldr	r0, [r3, #32]
 800d5b4:	687b      	ldr	r3, [r7, #4]
 800d5b6:	3324      	adds	r3, #36	@ 0x24
 800d5b8:	220b      	movs	r2, #11
 800d5ba:	4619      	mov	r1, r3
 800d5bc:	f7fe fce3 	bl	800bf86 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 800d5c0:	687b      	ldr	r3, [r7, #4]
 800d5c2:	f893 202f 	ldrb.w	r2, [r3, #47]	@ 0x2f
 800d5c6:	687b      	ldr	r3, [r7, #4]
 800d5c8:	6a1b      	ldr	r3, [r3, #32]
 800d5ca:	330c      	adds	r3, #12
 800d5cc:	f002 0218 	and.w	r2, r2, #24
 800d5d0:	b2d2      	uxtb	r2, r2
 800d5d2:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 800d5d4:	69fb      	ldr	r3, [r7, #28]
 800d5d6:	2201      	movs	r2, #1
 800d5d8:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800d5da:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800d5de:	4618      	mov	r0, r3
 800d5e0:	3730      	adds	r7, #48	@ 0x30
 800d5e2:	46bd      	mov	sp, r7
 800d5e4:	bd80      	pop	{r7, pc}
 800d5e6:	bf00      	nop
 800d5e8:	4ec4ec4f 	.word	0x4ec4ec4f

0800d5ec <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800d5ec:	b580      	push	{r7, lr}
 800d5ee:	b08a      	sub	sp, #40	@ 0x28
 800d5f0:	af00      	add	r7, sp, #0
 800d5f2:	6078      	str	r0, [r7, #4]
 800d5f4:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 800d5f6:	683b      	ldr	r3, [r7, #0]
 800d5f8:	681b      	ldr	r3, [r3, #0]
 800d5fa:	613b      	str	r3, [r7, #16]
 800d5fc:	687b      	ldr	r3, [r7, #4]
 800d5fe:	681b      	ldr	r3, [r3, #0]
 800d600:	691b      	ldr	r3, [r3, #16]
 800d602:	60fb      	str	r3, [r7, #12]
 800d604:	2300      	movs	r3, #0
 800d606:	617b      	str	r3, [r7, #20]
 800d608:	697b      	ldr	r3, [r7, #20]
 800d60a:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 800d60c:	69bb      	ldr	r3, [r7, #24]
 800d60e:	1c5a      	adds	r2, r3, #1
 800d610:	61ba      	str	r2, [r7, #24]
 800d612:	693a      	ldr	r2, [r7, #16]
 800d614:	4413      	add	r3, r2
 800d616:	781b      	ldrb	r3, [r3, #0]
 800d618:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 800d61a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800d61c:	2b1f      	cmp	r3, #31
 800d61e:	d940      	bls.n	800d6a2 <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 800d620:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800d622:	2b2f      	cmp	r3, #47	@ 0x2f
 800d624:	d006      	beq.n	800d634 <create_name+0x48>
 800d626:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800d628:	2b5c      	cmp	r3, #92	@ 0x5c
 800d62a:	d110      	bne.n	800d64e <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800d62c:	e002      	b.n	800d634 <create_name+0x48>
 800d62e:	69bb      	ldr	r3, [r7, #24]
 800d630:	3301      	adds	r3, #1
 800d632:	61bb      	str	r3, [r7, #24]
 800d634:	693a      	ldr	r2, [r7, #16]
 800d636:	69bb      	ldr	r3, [r7, #24]
 800d638:	4413      	add	r3, r2
 800d63a:	781b      	ldrb	r3, [r3, #0]
 800d63c:	2b2f      	cmp	r3, #47	@ 0x2f
 800d63e:	d0f6      	beq.n	800d62e <create_name+0x42>
 800d640:	693a      	ldr	r2, [r7, #16]
 800d642:	69bb      	ldr	r3, [r7, #24]
 800d644:	4413      	add	r3, r2
 800d646:	781b      	ldrb	r3, [r3, #0]
 800d648:	2b5c      	cmp	r3, #92	@ 0x5c
 800d64a:	d0f0      	beq.n	800d62e <create_name+0x42>
			break;
 800d64c:	e02a      	b.n	800d6a4 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 800d64e:	697b      	ldr	r3, [r7, #20]
 800d650:	2bfe      	cmp	r3, #254	@ 0xfe
 800d652:	d901      	bls.n	800d658 <create_name+0x6c>
 800d654:	2306      	movs	r3, #6
 800d656:	e17d      	b.n	800d954 <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 800d658:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800d65a:	b2db      	uxtb	r3, r3
 800d65c:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 800d65e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800d660:	2101      	movs	r1, #1
 800d662:	4618      	mov	r0, r3
 800d664:	f001 fcda 	bl	800f01c <ff_convert>
 800d668:	4603      	mov	r3, r0
 800d66a:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 800d66c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800d66e:	2b00      	cmp	r3, #0
 800d670:	d101      	bne.n	800d676 <create_name+0x8a>
 800d672:	2306      	movs	r3, #6
 800d674:	e16e      	b.n	800d954 <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 800d676:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800d678:	2b7f      	cmp	r3, #127	@ 0x7f
 800d67a:	d809      	bhi.n	800d690 <create_name+0xa4>
 800d67c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800d67e:	4619      	mov	r1, r3
 800d680:	488d      	ldr	r0, [pc, #564]	@ (800d8b8 <create_name+0x2cc>)
 800d682:	f7fe fce3 	bl	800c04c <chk_chr>
 800d686:	4603      	mov	r3, r0
 800d688:	2b00      	cmp	r3, #0
 800d68a:	d001      	beq.n	800d690 <create_name+0xa4>
 800d68c:	2306      	movs	r3, #6
 800d68e:	e161      	b.n	800d954 <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 800d690:	697b      	ldr	r3, [r7, #20]
 800d692:	1c5a      	adds	r2, r3, #1
 800d694:	617a      	str	r2, [r7, #20]
 800d696:	005b      	lsls	r3, r3, #1
 800d698:	68fa      	ldr	r2, [r7, #12]
 800d69a:	4413      	add	r3, r2
 800d69c:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800d69e:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 800d6a0:	e7b4      	b.n	800d60c <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 800d6a2:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 800d6a4:	693a      	ldr	r2, [r7, #16]
 800d6a6:	69bb      	ldr	r3, [r7, #24]
 800d6a8:	441a      	add	r2, r3
 800d6aa:	683b      	ldr	r3, [r7, #0]
 800d6ac:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800d6ae:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800d6b0:	2b1f      	cmp	r3, #31
 800d6b2:	d801      	bhi.n	800d6b8 <create_name+0xcc>
 800d6b4:	2304      	movs	r3, #4
 800d6b6:	e000      	b.n	800d6ba <create_name+0xce>
 800d6b8:	2300      	movs	r3, #0
 800d6ba:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800d6be:	e011      	b.n	800d6e4 <create_name+0xf8>
		w = lfn[di - 1];
 800d6c0:	697b      	ldr	r3, [r7, #20]
 800d6c2:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 800d6c6:	3b01      	subs	r3, #1
 800d6c8:	005b      	lsls	r3, r3, #1
 800d6ca:	68fa      	ldr	r2, [r7, #12]
 800d6cc:	4413      	add	r3, r2
 800d6ce:	881b      	ldrh	r3, [r3, #0]
 800d6d0:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w != ' ' && w != '.') break;
 800d6d2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800d6d4:	2b20      	cmp	r3, #32
 800d6d6:	d002      	beq.n	800d6de <create_name+0xf2>
 800d6d8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800d6da:	2b2e      	cmp	r3, #46	@ 0x2e
 800d6dc:	d106      	bne.n	800d6ec <create_name+0x100>
		di--;
 800d6de:	697b      	ldr	r3, [r7, #20]
 800d6e0:	3b01      	subs	r3, #1
 800d6e2:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800d6e4:	697b      	ldr	r3, [r7, #20]
 800d6e6:	2b00      	cmp	r3, #0
 800d6e8:	d1ea      	bne.n	800d6c0 <create_name+0xd4>
 800d6ea:	e000      	b.n	800d6ee <create_name+0x102>
		if (w != ' ' && w != '.') break;
 800d6ec:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 800d6ee:	697b      	ldr	r3, [r7, #20]
 800d6f0:	005b      	lsls	r3, r3, #1
 800d6f2:	68fa      	ldr	r2, [r7, #12]
 800d6f4:	4413      	add	r3, r2
 800d6f6:	2200      	movs	r2, #0
 800d6f8:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 800d6fa:	697b      	ldr	r3, [r7, #20]
 800d6fc:	2b00      	cmp	r3, #0
 800d6fe:	d101      	bne.n	800d704 <create_name+0x118>
 800d700:	2306      	movs	r3, #6
 800d702:	e127      	b.n	800d954 <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 800d704:	687b      	ldr	r3, [r7, #4]
 800d706:	3324      	adds	r3, #36	@ 0x24
 800d708:	220b      	movs	r2, #11
 800d70a:	2120      	movs	r1, #32
 800d70c:	4618      	mov	r0, r3
 800d70e:	f7fe fc5b 	bl	800bfc8 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 800d712:	2300      	movs	r3, #0
 800d714:	61bb      	str	r3, [r7, #24]
 800d716:	e002      	b.n	800d71e <create_name+0x132>
 800d718:	69bb      	ldr	r3, [r7, #24]
 800d71a:	3301      	adds	r3, #1
 800d71c:	61bb      	str	r3, [r7, #24]
 800d71e:	69bb      	ldr	r3, [r7, #24]
 800d720:	005b      	lsls	r3, r3, #1
 800d722:	68fa      	ldr	r2, [r7, #12]
 800d724:	4413      	add	r3, r2
 800d726:	881b      	ldrh	r3, [r3, #0]
 800d728:	2b20      	cmp	r3, #32
 800d72a:	d0f5      	beq.n	800d718 <create_name+0x12c>
 800d72c:	69bb      	ldr	r3, [r7, #24]
 800d72e:	005b      	lsls	r3, r3, #1
 800d730:	68fa      	ldr	r2, [r7, #12]
 800d732:	4413      	add	r3, r2
 800d734:	881b      	ldrh	r3, [r3, #0]
 800d736:	2b2e      	cmp	r3, #46	@ 0x2e
 800d738:	d0ee      	beq.n	800d718 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 800d73a:	69bb      	ldr	r3, [r7, #24]
 800d73c:	2b00      	cmp	r3, #0
 800d73e:	d009      	beq.n	800d754 <create_name+0x168>
 800d740:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800d744:	f043 0303 	orr.w	r3, r3, #3
 800d748:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 800d74c:	e002      	b.n	800d754 <create_name+0x168>
 800d74e:	697b      	ldr	r3, [r7, #20]
 800d750:	3b01      	subs	r3, #1
 800d752:	617b      	str	r3, [r7, #20]
 800d754:	697b      	ldr	r3, [r7, #20]
 800d756:	2b00      	cmp	r3, #0
 800d758:	d009      	beq.n	800d76e <create_name+0x182>
 800d75a:	697b      	ldr	r3, [r7, #20]
 800d75c:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 800d760:	3b01      	subs	r3, #1
 800d762:	005b      	lsls	r3, r3, #1
 800d764:	68fa      	ldr	r2, [r7, #12]
 800d766:	4413      	add	r3, r2
 800d768:	881b      	ldrh	r3, [r3, #0]
 800d76a:	2b2e      	cmp	r3, #46	@ 0x2e
 800d76c:	d1ef      	bne.n	800d74e <create_name+0x162>

	i = b = 0; ni = 8;
 800d76e:	2300      	movs	r3, #0
 800d770:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800d774:	2300      	movs	r3, #0
 800d776:	623b      	str	r3, [r7, #32]
 800d778:	2308      	movs	r3, #8
 800d77a:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 800d77c:	69bb      	ldr	r3, [r7, #24]
 800d77e:	1c5a      	adds	r2, r3, #1
 800d780:	61ba      	str	r2, [r7, #24]
 800d782:	005b      	lsls	r3, r3, #1
 800d784:	68fa      	ldr	r2, [r7, #12]
 800d786:	4413      	add	r3, r2
 800d788:	881b      	ldrh	r3, [r3, #0]
 800d78a:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) break;					/* Break on end of the LFN */
 800d78c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800d78e:	2b00      	cmp	r3, #0
 800d790:	f000 8090 	beq.w	800d8b4 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 800d794:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800d796:	2b20      	cmp	r3, #32
 800d798:	d006      	beq.n	800d7a8 <create_name+0x1bc>
 800d79a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800d79c:	2b2e      	cmp	r3, #46	@ 0x2e
 800d79e:	d10a      	bne.n	800d7b6 <create_name+0x1ca>
 800d7a0:	69ba      	ldr	r2, [r7, #24]
 800d7a2:	697b      	ldr	r3, [r7, #20]
 800d7a4:	429a      	cmp	r2, r3
 800d7a6:	d006      	beq.n	800d7b6 <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 800d7a8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800d7ac:	f043 0303 	orr.w	r3, r3, #3
 800d7b0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800d7b4:	e07d      	b.n	800d8b2 <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 800d7b6:	6a3a      	ldr	r2, [r7, #32]
 800d7b8:	69fb      	ldr	r3, [r7, #28]
 800d7ba:	429a      	cmp	r2, r3
 800d7bc:	d203      	bcs.n	800d7c6 <create_name+0x1da>
 800d7be:	69ba      	ldr	r2, [r7, #24]
 800d7c0:	697b      	ldr	r3, [r7, #20]
 800d7c2:	429a      	cmp	r2, r3
 800d7c4:	d123      	bne.n	800d80e <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 800d7c6:	69fb      	ldr	r3, [r7, #28]
 800d7c8:	2b0b      	cmp	r3, #11
 800d7ca:	d106      	bne.n	800d7da <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 800d7cc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800d7d0:	f043 0303 	orr.w	r3, r3, #3
 800d7d4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800d7d8:	e075      	b.n	800d8c6 <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 800d7da:	69ba      	ldr	r2, [r7, #24]
 800d7dc:	697b      	ldr	r3, [r7, #20]
 800d7de:	429a      	cmp	r2, r3
 800d7e0:	d005      	beq.n	800d7ee <create_name+0x202>
 800d7e2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800d7e6:	f043 0303 	orr.w	r3, r3, #3
 800d7ea:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (si > di) break;			/* No extension */
 800d7ee:	69ba      	ldr	r2, [r7, #24]
 800d7f0:	697b      	ldr	r3, [r7, #20]
 800d7f2:	429a      	cmp	r2, r3
 800d7f4:	d866      	bhi.n	800d8c4 <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 800d7f6:	697b      	ldr	r3, [r7, #20]
 800d7f8:	61bb      	str	r3, [r7, #24]
 800d7fa:	2308      	movs	r3, #8
 800d7fc:	623b      	str	r3, [r7, #32]
 800d7fe:	230b      	movs	r3, #11
 800d800:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 800d802:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800d806:	009b      	lsls	r3, r3, #2
 800d808:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800d80c:	e051      	b.n	800d8b2 <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 800d80e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800d810:	2b7f      	cmp	r3, #127	@ 0x7f
 800d812:	d914      	bls.n	800d83e <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 800d814:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800d816:	2100      	movs	r1, #0
 800d818:	4618      	mov	r0, r3
 800d81a:	f001 fbff 	bl	800f01c <ff_convert>
 800d81e:	4603      	mov	r3, r0
 800d820:	84bb      	strh	r3, [r7, #36]	@ 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 800d822:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800d824:	2b00      	cmp	r3, #0
 800d826:	d004      	beq.n	800d832 <create_name+0x246>
 800d828:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800d82a:	3b80      	subs	r3, #128	@ 0x80
 800d82c:	4a23      	ldr	r2, [pc, #140]	@ (800d8bc <create_name+0x2d0>)
 800d82e:	5cd3      	ldrb	r3, [r2, r3]
 800d830:	84bb      	strh	r3, [r7, #36]	@ 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 800d832:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800d836:	f043 0302 	orr.w	r3, r3, #2
 800d83a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 800d83e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800d840:	2b00      	cmp	r3, #0
 800d842:	d007      	beq.n	800d854 <create_name+0x268>
 800d844:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800d846:	4619      	mov	r1, r3
 800d848:	481d      	ldr	r0, [pc, #116]	@ (800d8c0 <create_name+0x2d4>)
 800d84a:	f7fe fbff 	bl	800c04c <chk_chr>
 800d84e:	4603      	mov	r3, r0
 800d850:	2b00      	cmp	r3, #0
 800d852:	d008      	beq.n	800d866 <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 800d854:	235f      	movs	r3, #95	@ 0x5f
 800d856:	84bb      	strh	r3, [r7, #36]	@ 0x24
 800d858:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800d85c:	f043 0303 	orr.w	r3, r3, #3
 800d860:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800d864:	e01b      	b.n	800d89e <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 800d866:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800d868:	2b40      	cmp	r3, #64	@ 0x40
 800d86a:	d909      	bls.n	800d880 <create_name+0x294>
 800d86c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800d86e:	2b5a      	cmp	r3, #90	@ 0x5a
 800d870:	d806      	bhi.n	800d880 <create_name+0x294>
					b |= 2;
 800d872:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800d876:	f043 0302 	orr.w	r3, r3, #2
 800d87a:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800d87e:	e00e      	b.n	800d89e <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 800d880:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800d882:	2b60      	cmp	r3, #96	@ 0x60
 800d884:	d90b      	bls.n	800d89e <create_name+0x2b2>
 800d886:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800d888:	2b7a      	cmp	r3, #122	@ 0x7a
 800d88a:	d808      	bhi.n	800d89e <create_name+0x2b2>
						b |= 1; w -= 0x20;
 800d88c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800d890:	f043 0301 	orr.w	r3, r3, #1
 800d894:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800d898:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800d89a:	3b20      	subs	r3, #32
 800d89c:	84bb      	strh	r3, [r7, #36]	@ 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 800d89e:	6a3b      	ldr	r3, [r7, #32]
 800d8a0:	1c5a      	adds	r2, r3, #1
 800d8a2:	623a      	str	r2, [r7, #32]
 800d8a4:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800d8a6:	b2d1      	uxtb	r1, r2
 800d8a8:	687a      	ldr	r2, [r7, #4]
 800d8aa:	4413      	add	r3, r2
 800d8ac:	460a      	mov	r2, r1
 800d8ae:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
		w = lfn[si++];					/* Get an LFN character */
 800d8b2:	e763      	b.n	800d77c <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 800d8b4:	bf00      	nop
 800d8b6:	e006      	b.n	800d8c6 <create_name+0x2da>
 800d8b8:	08013e0c 	.word	0x08013e0c
 800d8bc:	0801533c 	.word	0x0801533c
 800d8c0:	08013e18 	.word	0x08013e18
			if (si > di) break;			/* No extension */
 800d8c4:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800d8c6:	687b      	ldr	r3, [r7, #4]
 800d8c8:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800d8cc:	2be5      	cmp	r3, #229	@ 0xe5
 800d8ce:	d103      	bne.n	800d8d8 <create_name+0x2ec>
 800d8d0:	687b      	ldr	r3, [r7, #4]
 800d8d2:	2205      	movs	r2, #5
 800d8d4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

	if (ni == 8) b <<= 2;
 800d8d8:	69fb      	ldr	r3, [r7, #28]
 800d8da:	2b08      	cmp	r3, #8
 800d8dc:	d104      	bne.n	800d8e8 <create_name+0x2fc>
 800d8de:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800d8e2:	009b      	lsls	r3, r3, #2
 800d8e4:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 800d8e8:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800d8ec:	f003 030c 	and.w	r3, r3, #12
 800d8f0:	2b0c      	cmp	r3, #12
 800d8f2:	d005      	beq.n	800d900 <create_name+0x314>
 800d8f4:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800d8f8:	f003 0303 	and.w	r3, r3, #3
 800d8fc:	2b03      	cmp	r3, #3
 800d8fe:	d105      	bne.n	800d90c <create_name+0x320>
 800d900:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800d904:	f043 0302 	orr.w	r3, r3, #2
 800d908:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 800d90c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800d910:	f003 0302 	and.w	r3, r3, #2
 800d914:	2b00      	cmp	r3, #0
 800d916:	d117      	bne.n	800d948 <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 800d918:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800d91c:	f003 0303 	and.w	r3, r3, #3
 800d920:	2b01      	cmp	r3, #1
 800d922:	d105      	bne.n	800d930 <create_name+0x344>
 800d924:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800d928:	f043 0310 	orr.w	r3, r3, #16
 800d92c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 800d930:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800d934:	f003 030c 	and.w	r3, r3, #12
 800d938:	2b04      	cmp	r3, #4
 800d93a:	d105      	bne.n	800d948 <create_name+0x35c>
 800d93c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800d940:	f043 0308 	orr.w	r3, r3, #8
 800d944:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 800d948:	687b      	ldr	r3, [r7, #4]
 800d94a:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800d94e:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f

	return FR_OK;
 800d952:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 800d954:	4618      	mov	r0, r3
 800d956:	3728      	adds	r7, #40	@ 0x28
 800d958:	46bd      	mov	sp, r7
 800d95a:	bd80      	pop	{r7, pc}

0800d95c <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800d95c:	b580      	push	{r7, lr}
 800d95e:	b086      	sub	sp, #24
 800d960:	af00      	add	r7, sp, #0
 800d962:	6078      	str	r0, [r7, #4]
 800d964:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800d966:	687b      	ldr	r3, [r7, #4]
 800d968:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800d96a:	693b      	ldr	r3, [r7, #16]
 800d96c:	681b      	ldr	r3, [r3, #0]
 800d96e:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800d970:	e002      	b.n	800d978 <follow_path+0x1c>
 800d972:	683b      	ldr	r3, [r7, #0]
 800d974:	3301      	adds	r3, #1
 800d976:	603b      	str	r3, [r7, #0]
 800d978:	683b      	ldr	r3, [r7, #0]
 800d97a:	781b      	ldrb	r3, [r3, #0]
 800d97c:	2b2f      	cmp	r3, #47	@ 0x2f
 800d97e:	d0f8      	beq.n	800d972 <follow_path+0x16>
 800d980:	683b      	ldr	r3, [r7, #0]
 800d982:	781b      	ldrb	r3, [r3, #0]
 800d984:	2b5c      	cmp	r3, #92	@ 0x5c
 800d986:	d0f4      	beq.n	800d972 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800d988:	693b      	ldr	r3, [r7, #16]
 800d98a:	2200      	movs	r2, #0
 800d98c:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800d98e:	683b      	ldr	r3, [r7, #0]
 800d990:	781b      	ldrb	r3, [r3, #0]
 800d992:	2b1f      	cmp	r3, #31
 800d994:	d80a      	bhi.n	800d9ac <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800d996:	687b      	ldr	r3, [r7, #4]
 800d998:	2280      	movs	r2, #128	@ 0x80
 800d99a:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 800d99e:	2100      	movs	r1, #0
 800d9a0:	6878      	ldr	r0, [r7, #4]
 800d9a2:	f7ff f8fe 	bl	800cba2 <dir_sdi>
 800d9a6:	4603      	mov	r3, r0
 800d9a8:	75fb      	strb	r3, [r7, #23]
 800d9aa:	e048      	b.n	800da3e <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800d9ac:	463b      	mov	r3, r7
 800d9ae:	4619      	mov	r1, r3
 800d9b0:	6878      	ldr	r0, [r7, #4]
 800d9b2:	f7ff fe1b 	bl	800d5ec <create_name>
 800d9b6:	4603      	mov	r3, r0
 800d9b8:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800d9ba:	7dfb      	ldrb	r3, [r7, #23]
 800d9bc:	2b00      	cmp	r3, #0
 800d9be:	d139      	bne.n	800da34 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 800d9c0:	6878      	ldr	r0, [r7, #4]
 800d9c2:	f7ff fc5a 	bl	800d27a <dir_find>
 800d9c6:	4603      	mov	r3, r0
 800d9c8:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800d9ca:	687b      	ldr	r3, [r7, #4]
 800d9cc:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800d9d0:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800d9d2:	7dfb      	ldrb	r3, [r7, #23]
 800d9d4:	2b00      	cmp	r3, #0
 800d9d6:	d00a      	beq.n	800d9ee <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800d9d8:	7dfb      	ldrb	r3, [r7, #23]
 800d9da:	2b04      	cmp	r3, #4
 800d9dc:	d12c      	bne.n	800da38 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800d9de:	7afb      	ldrb	r3, [r7, #11]
 800d9e0:	f003 0304 	and.w	r3, r3, #4
 800d9e4:	2b00      	cmp	r3, #0
 800d9e6:	d127      	bne.n	800da38 <follow_path+0xdc>
 800d9e8:	2305      	movs	r3, #5
 800d9ea:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800d9ec:	e024      	b.n	800da38 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800d9ee:	7afb      	ldrb	r3, [r7, #11]
 800d9f0:	f003 0304 	and.w	r3, r3, #4
 800d9f4:	2b00      	cmp	r3, #0
 800d9f6:	d121      	bne.n	800da3c <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800d9f8:	693b      	ldr	r3, [r7, #16]
 800d9fa:	799b      	ldrb	r3, [r3, #6]
 800d9fc:	f003 0310 	and.w	r3, r3, #16
 800da00:	2b00      	cmp	r3, #0
 800da02:	d102      	bne.n	800da0a <follow_path+0xae>
				res = FR_NO_PATH; break;
 800da04:	2305      	movs	r3, #5
 800da06:	75fb      	strb	r3, [r7, #23]
 800da08:	e019      	b.n	800da3e <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800da0a:	68fb      	ldr	r3, [r7, #12]
 800da0c:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800da10:	687b      	ldr	r3, [r7, #4]
 800da12:	695b      	ldr	r3, [r3, #20]
 800da14:	68fa      	ldr	r2, [r7, #12]
 800da16:	8992      	ldrh	r2, [r2, #12]
 800da18:	fbb3 f0f2 	udiv	r0, r3, r2
 800da1c:	fb00 f202 	mul.w	r2, r0, r2
 800da20:	1a9b      	subs	r3, r3, r2
 800da22:	440b      	add	r3, r1
 800da24:	4619      	mov	r1, r3
 800da26:	68f8      	ldr	r0, [r7, #12]
 800da28:	f7ff fa61 	bl	800ceee <ld_clust>
 800da2c:	4602      	mov	r2, r0
 800da2e:	693b      	ldr	r3, [r7, #16]
 800da30:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800da32:	e7bb      	b.n	800d9ac <follow_path+0x50>
			if (res != FR_OK) break;
 800da34:	bf00      	nop
 800da36:	e002      	b.n	800da3e <follow_path+0xe2>
				break;
 800da38:	bf00      	nop
 800da3a:	e000      	b.n	800da3e <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800da3c:	bf00      	nop
			}
		}
	}

	return res;
 800da3e:	7dfb      	ldrb	r3, [r7, #23]
}
 800da40:	4618      	mov	r0, r3
 800da42:	3718      	adds	r7, #24
 800da44:	46bd      	mov	sp, r7
 800da46:	bd80      	pop	{r7, pc}

0800da48 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800da48:	b480      	push	{r7}
 800da4a:	b087      	sub	sp, #28
 800da4c:	af00      	add	r7, sp, #0
 800da4e:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800da50:	f04f 33ff 	mov.w	r3, #4294967295
 800da54:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800da56:	687b      	ldr	r3, [r7, #4]
 800da58:	681b      	ldr	r3, [r3, #0]
 800da5a:	2b00      	cmp	r3, #0
 800da5c:	d031      	beq.n	800dac2 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800da5e:	687b      	ldr	r3, [r7, #4]
 800da60:	681b      	ldr	r3, [r3, #0]
 800da62:	617b      	str	r3, [r7, #20]
 800da64:	e002      	b.n	800da6c <get_ldnumber+0x24>
 800da66:	697b      	ldr	r3, [r7, #20]
 800da68:	3301      	adds	r3, #1
 800da6a:	617b      	str	r3, [r7, #20]
 800da6c:	697b      	ldr	r3, [r7, #20]
 800da6e:	781b      	ldrb	r3, [r3, #0]
 800da70:	2b1f      	cmp	r3, #31
 800da72:	d903      	bls.n	800da7c <get_ldnumber+0x34>
 800da74:	697b      	ldr	r3, [r7, #20]
 800da76:	781b      	ldrb	r3, [r3, #0]
 800da78:	2b3a      	cmp	r3, #58	@ 0x3a
 800da7a:	d1f4      	bne.n	800da66 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800da7c:	697b      	ldr	r3, [r7, #20]
 800da7e:	781b      	ldrb	r3, [r3, #0]
 800da80:	2b3a      	cmp	r3, #58	@ 0x3a
 800da82:	d11c      	bne.n	800dabe <get_ldnumber+0x76>
			tp = *path;
 800da84:	687b      	ldr	r3, [r7, #4]
 800da86:	681b      	ldr	r3, [r3, #0]
 800da88:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800da8a:	68fb      	ldr	r3, [r7, #12]
 800da8c:	1c5a      	adds	r2, r3, #1
 800da8e:	60fa      	str	r2, [r7, #12]
 800da90:	781b      	ldrb	r3, [r3, #0]
 800da92:	3b30      	subs	r3, #48	@ 0x30
 800da94:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800da96:	68bb      	ldr	r3, [r7, #8]
 800da98:	2b09      	cmp	r3, #9
 800da9a:	d80e      	bhi.n	800daba <get_ldnumber+0x72>
 800da9c:	68fa      	ldr	r2, [r7, #12]
 800da9e:	697b      	ldr	r3, [r7, #20]
 800daa0:	429a      	cmp	r2, r3
 800daa2:	d10a      	bne.n	800daba <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800daa4:	68bb      	ldr	r3, [r7, #8]
 800daa6:	2b00      	cmp	r3, #0
 800daa8:	d107      	bne.n	800daba <get_ldnumber+0x72>
					vol = (int)i;
 800daaa:	68bb      	ldr	r3, [r7, #8]
 800daac:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800daae:	697b      	ldr	r3, [r7, #20]
 800dab0:	3301      	adds	r3, #1
 800dab2:	617b      	str	r3, [r7, #20]
 800dab4:	687b      	ldr	r3, [r7, #4]
 800dab6:	697a      	ldr	r2, [r7, #20]
 800dab8:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800daba:	693b      	ldr	r3, [r7, #16]
 800dabc:	e002      	b.n	800dac4 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800dabe:	2300      	movs	r3, #0
 800dac0:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800dac2:	693b      	ldr	r3, [r7, #16]
}
 800dac4:	4618      	mov	r0, r3
 800dac6:	371c      	adds	r7, #28
 800dac8:	46bd      	mov	sp, r7
 800daca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dace:	4770      	bx	lr

0800dad0 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800dad0:	b580      	push	{r7, lr}
 800dad2:	b082      	sub	sp, #8
 800dad4:	af00      	add	r7, sp, #0
 800dad6:	6078      	str	r0, [r7, #4]
 800dad8:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800dada:	687b      	ldr	r3, [r7, #4]
 800dadc:	2200      	movs	r2, #0
 800dade:	70da      	strb	r2, [r3, #3]
 800dae0:	687b      	ldr	r3, [r7, #4]
 800dae2:	f04f 32ff 	mov.w	r2, #4294967295
 800dae6:	635a      	str	r2, [r3, #52]	@ 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800dae8:	6839      	ldr	r1, [r7, #0]
 800daea:	6878      	ldr	r0, [r7, #4]
 800daec:	f7fe fc7a 	bl	800c3e4 <move_window>
 800daf0:	4603      	mov	r3, r0
 800daf2:	2b00      	cmp	r3, #0
 800daf4:	d001      	beq.n	800dafa <check_fs+0x2a>
 800daf6:	2304      	movs	r3, #4
 800daf8:	e038      	b.n	800db6c <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800dafa:	687b      	ldr	r3, [r7, #4]
 800dafc:	3338      	adds	r3, #56	@ 0x38
 800dafe:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800db02:	4618      	mov	r0, r3
 800db04:	f7fe f9bc 	bl	800be80 <ld_word>
 800db08:	4603      	mov	r3, r0
 800db0a:	461a      	mov	r2, r3
 800db0c:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800db10:	429a      	cmp	r2, r3
 800db12:	d001      	beq.n	800db18 <check_fs+0x48>
 800db14:	2303      	movs	r3, #3
 800db16:	e029      	b.n	800db6c <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800db18:	687b      	ldr	r3, [r7, #4]
 800db1a:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800db1e:	2be9      	cmp	r3, #233	@ 0xe9
 800db20:	d009      	beq.n	800db36 <check_fs+0x66>
 800db22:	687b      	ldr	r3, [r7, #4]
 800db24:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800db28:	2beb      	cmp	r3, #235	@ 0xeb
 800db2a:	d11e      	bne.n	800db6a <check_fs+0x9a>
 800db2c:	687b      	ldr	r3, [r7, #4]
 800db2e:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 800db32:	2b90      	cmp	r3, #144	@ 0x90
 800db34:	d119      	bne.n	800db6a <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800db36:	687b      	ldr	r3, [r7, #4]
 800db38:	3338      	adds	r3, #56	@ 0x38
 800db3a:	3336      	adds	r3, #54	@ 0x36
 800db3c:	4618      	mov	r0, r3
 800db3e:	f7fe f9b8 	bl	800beb2 <ld_dword>
 800db42:	4603      	mov	r3, r0
 800db44:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800db48:	4a0a      	ldr	r2, [pc, #40]	@ (800db74 <check_fs+0xa4>)
 800db4a:	4293      	cmp	r3, r2
 800db4c:	d101      	bne.n	800db52 <check_fs+0x82>
 800db4e:	2300      	movs	r3, #0
 800db50:	e00c      	b.n	800db6c <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800db52:	687b      	ldr	r3, [r7, #4]
 800db54:	3338      	adds	r3, #56	@ 0x38
 800db56:	3352      	adds	r3, #82	@ 0x52
 800db58:	4618      	mov	r0, r3
 800db5a:	f7fe f9aa 	bl	800beb2 <ld_dword>
 800db5e:	4603      	mov	r3, r0
 800db60:	4a05      	ldr	r2, [pc, #20]	@ (800db78 <check_fs+0xa8>)
 800db62:	4293      	cmp	r3, r2
 800db64:	d101      	bne.n	800db6a <check_fs+0x9a>
 800db66:	2300      	movs	r3, #0
 800db68:	e000      	b.n	800db6c <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800db6a:	2302      	movs	r3, #2
}
 800db6c:	4618      	mov	r0, r3
 800db6e:	3708      	adds	r7, #8
 800db70:	46bd      	mov	sp, r7
 800db72:	bd80      	pop	{r7, pc}
 800db74:	00544146 	.word	0x00544146
 800db78:	33544146 	.word	0x33544146

0800db7c <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800db7c:	b580      	push	{r7, lr}
 800db7e:	b096      	sub	sp, #88	@ 0x58
 800db80:	af00      	add	r7, sp, #0
 800db82:	60f8      	str	r0, [r7, #12]
 800db84:	60b9      	str	r1, [r7, #8]
 800db86:	4613      	mov	r3, r2
 800db88:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800db8a:	68bb      	ldr	r3, [r7, #8]
 800db8c:	2200      	movs	r2, #0
 800db8e:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800db90:	68f8      	ldr	r0, [r7, #12]
 800db92:	f7ff ff59 	bl	800da48 <get_ldnumber>
 800db96:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800db98:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800db9a:	2b00      	cmp	r3, #0
 800db9c:	da01      	bge.n	800dba2 <find_volume+0x26>
 800db9e:	230b      	movs	r3, #11
 800dba0:	e265      	b.n	800e06e <find_volume+0x4f2>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800dba2:	4a9f      	ldr	r2, [pc, #636]	@ (800de20 <find_volume+0x2a4>)
 800dba4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800dba6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800dbaa:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800dbac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dbae:	2b00      	cmp	r3, #0
 800dbb0:	d101      	bne.n	800dbb6 <find_volume+0x3a>
 800dbb2:	230c      	movs	r3, #12
 800dbb4:	e25b      	b.n	800e06e <find_volume+0x4f2>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800dbb6:	68bb      	ldr	r3, [r7, #8]
 800dbb8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800dbba:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800dbbc:	79fb      	ldrb	r3, [r7, #7]
 800dbbe:	f023 0301 	bic.w	r3, r3, #1
 800dbc2:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800dbc4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dbc6:	781b      	ldrb	r3, [r3, #0]
 800dbc8:	2b00      	cmp	r3, #0
 800dbca:	d01a      	beq.n	800dc02 <find_volume+0x86>
		stat = disk_status(fs->drv);
 800dbcc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dbce:	785b      	ldrb	r3, [r3, #1]
 800dbd0:	4618      	mov	r0, r3
 800dbd2:	f7fe f8b5 	bl	800bd40 <disk_status>
 800dbd6:	4603      	mov	r3, r0
 800dbd8:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800dbdc:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800dbe0:	f003 0301 	and.w	r3, r3, #1
 800dbe4:	2b00      	cmp	r3, #0
 800dbe6:	d10c      	bne.n	800dc02 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800dbe8:	79fb      	ldrb	r3, [r7, #7]
 800dbea:	2b00      	cmp	r3, #0
 800dbec:	d007      	beq.n	800dbfe <find_volume+0x82>
 800dbee:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800dbf2:	f003 0304 	and.w	r3, r3, #4
 800dbf6:	2b00      	cmp	r3, #0
 800dbf8:	d001      	beq.n	800dbfe <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800dbfa:	230a      	movs	r3, #10
 800dbfc:	e237      	b.n	800e06e <find_volume+0x4f2>
			}
			return FR_OK;				/* The file system object is valid */
 800dbfe:	2300      	movs	r3, #0
 800dc00:	e235      	b.n	800e06e <find_volume+0x4f2>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800dc02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dc04:	2200      	movs	r2, #0
 800dc06:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800dc08:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800dc0a:	b2da      	uxtb	r2, r3
 800dc0c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dc0e:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800dc10:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dc12:	785b      	ldrb	r3, [r3, #1]
 800dc14:	4618      	mov	r0, r3
 800dc16:	f7fe f8ad 	bl	800bd74 <disk_initialize>
 800dc1a:	4603      	mov	r3, r0
 800dc1c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800dc20:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800dc24:	f003 0301 	and.w	r3, r3, #1
 800dc28:	2b00      	cmp	r3, #0
 800dc2a:	d001      	beq.n	800dc30 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800dc2c:	2303      	movs	r3, #3
 800dc2e:	e21e      	b.n	800e06e <find_volume+0x4f2>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800dc30:	79fb      	ldrb	r3, [r7, #7]
 800dc32:	2b00      	cmp	r3, #0
 800dc34:	d007      	beq.n	800dc46 <find_volume+0xca>
 800dc36:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800dc3a:	f003 0304 	and.w	r3, r3, #4
 800dc3e:	2b00      	cmp	r3, #0
 800dc40:	d001      	beq.n	800dc46 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800dc42:	230a      	movs	r3, #10
 800dc44:	e213      	b.n	800e06e <find_volume+0x4f2>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 800dc46:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dc48:	7858      	ldrb	r0, [r3, #1]
 800dc4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dc4c:	330c      	adds	r3, #12
 800dc4e:	461a      	mov	r2, r3
 800dc50:	2102      	movs	r1, #2
 800dc52:	f7fe f8f7 	bl	800be44 <disk_ioctl>
 800dc56:	4603      	mov	r3, r0
 800dc58:	2b00      	cmp	r3, #0
 800dc5a:	d001      	beq.n	800dc60 <find_volume+0xe4>
 800dc5c:	2301      	movs	r3, #1
 800dc5e:	e206      	b.n	800e06e <find_volume+0x4f2>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 800dc60:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dc62:	899b      	ldrh	r3, [r3, #12]
 800dc64:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800dc68:	d80d      	bhi.n	800dc86 <find_volume+0x10a>
 800dc6a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dc6c:	899b      	ldrh	r3, [r3, #12]
 800dc6e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800dc72:	d308      	bcc.n	800dc86 <find_volume+0x10a>
 800dc74:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dc76:	899b      	ldrh	r3, [r3, #12]
 800dc78:	461a      	mov	r2, r3
 800dc7a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dc7c:	899b      	ldrh	r3, [r3, #12]
 800dc7e:	3b01      	subs	r3, #1
 800dc80:	4013      	ands	r3, r2
 800dc82:	2b00      	cmp	r3, #0
 800dc84:	d001      	beq.n	800dc8a <find_volume+0x10e>
 800dc86:	2301      	movs	r3, #1
 800dc88:	e1f1      	b.n	800e06e <find_volume+0x4f2>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800dc8a:	2300      	movs	r3, #0
 800dc8c:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800dc8e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800dc90:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800dc92:	f7ff ff1d 	bl	800dad0 <check_fs>
 800dc96:	4603      	mov	r3, r0
 800dc98:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800dc9c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800dca0:	2b02      	cmp	r3, #2
 800dca2:	d149      	bne.n	800dd38 <find_volume+0x1bc>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800dca4:	2300      	movs	r3, #0
 800dca6:	643b      	str	r3, [r7, #64]	@ 0x40
 800dca8:	e01e      	b.n	800dce8 <find_volume+0x16c>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800dcaa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dcac:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 800dcb0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800dcb2:	011b      	lsls	r3, r3, #4
 800dcb4:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 800dcb8:	4413      	add	r3, r2
 800dcba:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800dcbc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dcbe:	3304      	adds	r3, #4
 800dcc0:	781b      	ldrb	r3, [r3, #0]
 800dcc2:	2b00      	cmp	r3, #0
 800dcc4:	d006      	beq.n	800dcd4 <find_volume+0x158>
 800dcc6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dcc8:	3308      	adds	r3, #8
 800dcca:	4618      	mov	r0, r3
 800dccc:	f7fe f8f1 	bl	800beb2 <ld_dword>
 800dcd0:	4602      	mov	r2, r0
 800dcd2:	e000      	b.n	800dcd6 <find_volume+0x15a>
 800dcd4:	2200      	movs	r2, #0
 800dcd6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800dcd8:	009b      	lsls	r3, r3, #2
 800dcda:	3358      	adds	r3, #88	@ 0x58
 800dcdc:	443b      	add	r3, r7
 800dcde:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800dce2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800dce4:	3301      	adds	r3, #1
 800dce6:	643b      	str	r3, [r7, #64]	@ 0x40
 800dce8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800dcea:	2b03      	cmp	r3, #3
 800dcec:	d9dd      	bls.n	800dcaa <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800dcee:	2300      	movs	r3, #0
 800dcf0:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 800dcf2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800dcf4:	2b00      	cmp	r3, #0
 800dcf6:	d002      	beq.n	800dcfe <find_volume+0x182>
 800dcf8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800dcfa:	3b01      	subs	r3, #1
 800dcfc:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800dcfe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800dd00:	009b      	lsls	r3, r3, #2
 800dd02:	3358      	adds	r3, #88	@ 0x58
 800dd04:	443b      	add	r3, r7
 800dd06:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800dd0a:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800dd0c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800dd0e:	2b00      	cmp	r3, #0
 800dd10:	d005      	beq.n	800dd1e <find_volume+0x1a2>
 800dd12:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800dd14:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800dd16:	f7ff fedb 	bl	800dad0 <check_fs>
 800dd1a:	4603      	mov	r3, r0
 800dd1c:	e000      	b.n	800dd20 <find_volume+0x1a4>
 800dd1e:	2303      	movs	r3, #3
 800dd20:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800dd24:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800dd28:	2b01      	cmp	r3, #1
 800dd2a:	d905      	bls.n	800dd38 <find_volume+0x1bc>
 800dd2c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800dd2e:	3301      	adds	r3, #1
 800dd30:	643b      	str	r3, [r7, #64]	@ 0x40
 800dd32:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800dd34:	2b03      	cmp	r3, #3
 800dd36:	d9e2      	bls.n	800dcfe <find_volume+0x182>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800dd38:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800dd3c:	2b04      	cmp	r3, #4
 800dd3e:	d101      	bne.n	800dd44 <find_volume+0x1c8>
 800dd40:	2301      	movs	r3, #1
 800dd42:	e194      	b.n	800e06e <find_volume+0x4f2>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800dd44:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800dd48:	2b01      	cmp	r3, #1
 800dd4a:	d901      	bls.n	800dd50 <find_volume+0x1d4>
 800dd4c:	230d      	movs	r3, #13
 800dd4e:	e18e      	b.n	800e06e <find_volume+0x4f2>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800dd50:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dd52:	3338      	adds	r3, #56	@ 0x38
 800dd54:	330b      	adds	r3, #11
 800dd56:	4618      	mov	r0, r3
 800dd58:	f7fe f892 	bl	800be80 <ld_word>
 800dd5c:	4603      	mov	r3, r0
 800dd5e:	461a      	mov	r2, r3
 800dd60:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dd62:	899b      	ldrh	r3, [r3, #12]
 800dd64:	429a      	cmp	r2, r3
 800dd66:	d001      	beq.n	800dd6c <find_volume+0x1f0>
 800dd68:	230d      	movs	r3, #13
 800dd6a:	e180      	b.n	800e06e <find_volume+0x4f2>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800dd6c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dd6e:	3338      	adds	r3, #56	@ 0x38
 800dd70:	3316      	adds	r3, #22
 800dd72:	4618      	mov	r0, r3
 800dd74:	f7fe f884 	bl	800be80 <ld_word>
 800dd78:	4603      	mov	r3, r0
 800dd7a:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800dd7c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800dd7e:	2b00      	cmp	r3, #0
 800dd80:	d106      	bne.n	800dd90 <find_volume+0x214>
 800dd82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dd84:	3338      	adds	r3, #56	@ 0x38
 800dd86:	3324      	adds	r3, #36	@ 0x24
 800dd88:	4618      	mov	r0, r3
 800dd8a:	f7fe f892 	bl	800beb2 <ld_dword>
 800dd8e:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 800dd90:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dd92:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800dd94:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800dd96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dd98:	f893 2048 	ldrb.w	r2, [r3, #72]	@ 0x48
 800dd9c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dd9e:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800dda0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dda2:	789b      	ldrb	r3, [r3, #2]
 800dda4:	2b01      	cmp	r3, #1
 800dda6:	d005      	beq.n	800ddb4 <find_volume+0x238>
 800dda8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ddaa:	789b      	ldrb	r3, [r3, #2]
 800ddac:	2b02      	cmp	r3, #2
 800ddae:	d001      	beq.n	800ddb4 <find_volume+0x238>
 800ddb0:	230d      	movs	r3, #13
 800ddb2:	e15c      	b.n	800e06e <find_volume+0x4f2>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800ddb4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ddb6:	789b      	ldrb	r3, [r3, #2]
 800ddb8:	461a      	mov	r2, r3
 800ddba:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ddbc:	fb02 f303 	mul.w	r3, r2, r3
 800ddc0:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800ddc2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ddc4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800ddc8:	461a      	mov	r2, r3
 800ddca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ddcc:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800ddce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ddd0:	895b      	ldrh	r3, [r3, #10]
 800ddd2:	2b00      	cmp	r3, #0
 800ddd4:	d008      	beq.n	800dde8 <find_volume+0x26c>
 800ddd6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ddd8:	895b      	ldrh	r3, [r3, #10]
 800ddda:	461a      	mov	r2, r3
 800dddc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ddde:	895b      	ldrh	r3, [r3, #10]
 800dde0:	3b01      	subs	r3, #1
 800dde2:	4013      	ands	r3, r2
 800dde4:	2b00      	cmp	r3, #0
 800dde6:	d001      	beq.n	800ddec <find_volume+0x270>
 800dde8:	230d      	movs	r3, #13
 800ddea:	e140      	b.n	800e06e <find_volume+0x4f2>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800ddec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ddee:	3338      	adds	r3, #56	@ 0x38
 800ddf0:	3311      	adds	r3, #17
 800ddf2:	4618      	mov	r0, r3
 800ddf4:	f7fe f844 	bl	800be80 <ld_word>
 800ddf8:	4603      	mov	r3, r0
 800ddfa:	461a      	mov	r2, r3
 800ddfc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ddfe:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800de00:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800de02:	891b      	ldrh	r3, [r3, #8]
 800de04:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800de06:	8992      	ldrh	r2, [r2, #12]
 800de08:	0952      	lsrs	r2, r2, #5
 800de0a:	b292      	uxth	r2, r2
 800de0c:	fbb3 f1f2 	udiv	r1, r3, r2
 800de10:	fb01 f202 	mul.w	r2, r1, r2
 800de14:	1a9b      	subs	r3, r3, r2
 800de16:	b29b      	uxth	r3, r3
 800de18:	2b00      	cmp	r3, #0
 800de1a:	d003      	beq.n	800de24 <find_volume+0x2a8>
 800de1c:	230d      	movs	r3, #13
 800de1e:	e126      	b.n	800e06e <find_volume+0x4f2>
 800de20:	200161b4 	.word	0x200161b4

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800de24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800de26:	3338      	adds	r3, #56	@ 0x38
 800de28:	3313      	adds	r3, #19
 800de2a:	4618      	mov	r0, r3
 800de2c:	f7fe f828 	bl	800be80 <ld_word>
 800de30:	4603      	mov	r3, r0
 800de32:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800de34:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800de36:	2b00      	cmp	r3, #0
 800de38:	d106      	bne.n	800de48 <find_volume+0x2cc>
 800de3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800de3c:	3338      	adds	r3, #56	@ 0x38
 800de3e:	3320      	adds	r3, #32
 800de40:	4618      	mov	r0, r3
 800de42:	f7fe f836 	bl	800beb2 <ld_dword>
 800de46:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800de48:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800de4a:	3338      	adds	r3, #56	@ 0x38
 800de4c:	330e      	adds	r3, #14
 800de4e:	4618      	mov	r0, r3
 800de50:	f7fe f816 	bl	800be80 <ld_word>
 800de54:	4603      	mov	r3, r0
 800de56:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800de58:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800de5a:	2b00      	cmp	r3, #0
 800de5c:	d101      	bne.n	800de62 <find_volume+0x2e6>
 800de5e:	230d      	movs	r3, #13
 800de60:	e105      	b.n	800e06e <find_volume+0x4f2>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800de62:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800de64:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800de66:	4413      	add	r3, r2
 800de68:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800de6a:	8911      	ldrh	r1, [r2, #8]
 800de6c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800de6e:	8992      	ldrh	r2, [r2, #12]
 800de70:	0952      	lsrs	r2, r2, #5
 800de72:	b292      	uxth	r2, r2
 800de74:	fbb1 f2f2 	udiv	r2, r1, r2
 800de78:	b292      	uxth	r2, r2
 800de7a:	4413      	add	r3, r2
 800de7c:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800de7e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800de80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800de82:	429a      	cmp	r2, r3
 800de84:	d201      	bcs.n	800de8a <find_volume+0x30e>
 800de86:	230d      	movs	r3, #13
 800de88:	e0f1      	b.n	800e06e <find_volume+0x4f2>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800de8a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800de8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800de8e:	1ad3      	subs	r3, r2, r3
 800de90:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800de92:	8952      	ldrh	r2, [r2, #10]
 800de94:	fbb3 f3f2 	udiv	r3, r3, r2
 800de98:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800de9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800de9c:	2b00      	cmp	r3, #0
 800de9e:	d101      	bne.n	800dea4 <find_volume+0x328>
 800dea0:	230d      	movs	r3, #13
 800dea2:	e0e4      	b.n	800e06e <find_volume+0x4f2>
		fmt = FS_FAT32;
 800dea4:	2303      	movs	r3, #3
 800dea6:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800deaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800deac:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 800deb0:	4293      	cmp	r3, r2
 800deb2:	d802      	bhi.n	800deba <find_volume+0x33e>
 800deb4:	2302      	movs	r3, #2
 800deb6:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800deba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800debc:	f640 72f5 	movw	r2, #4085	@ 0xff5
 800dec0:	4293      	cmp	r3, r2
 800dec2:	d802      	bhi.n	800deca <find_volume+0x34e>
 800dec4:	2301      	movs	r3, #1
 800dec6:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800deca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800decc:	1c9a      	adds	r2, r3, #2
 800dece:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ded0:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 800ded2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ded4:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800ded6:	625a      	str	r2, [r3, #36]	@ 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800ded8:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800deda:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800dedc:	441a      	add	r2, r3
 800dede:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dee0:	629a      	str	r2, [r3, #40]	@ 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 800dee2:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800dee4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dee6:	441a      	add	r2, r3
 800dee8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800deea:	631a      	str	r2, [r3, #48]	@ 0x30
		if (fmt == FS_FAT32) {
 800deec:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800def0:	2b03      	cmp	r3, #3
 800def2:	d11e      	bne.n	800df32 <find_volume+0x3b6>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800def4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800def6:	3338      	adds	r3, #56	@ 0x38
 800def8:	332a      	adds	r3, #42	@ 0x2a
 800defa:	4618      	mov	r0, r3
 800defc:	f7fd ffc0 	bl	800be80 <ld_word>
 800df00:	4603      	mov	r3, r0
 800df02:	2b00      	cmp	r3, #0
 800df04:	d001      	beq.n	800df0a <find_volume+0x38e>
 800df06:	230d      	movs	r3, #13
 800df08:	e0b1      	b.n	800e06e <find_volume+0x4f2>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800df0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800df0c:	891b      	ldrh	r3, [r3, #8]
 800df0e:	2b00      	cmp	r3, #0
 800df10:	d001      	beq.n	800df16 <find_volume+0x39a>
 800df12:	230d      	movs	r3, #13
 800df14:	e0ab      	b.n	800e06e <find_volume+0x4f2>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800df16:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800df18:	3338      	adds	r3, #56	@ 0x38
 800df1a:	332c      	adds	r3, #44	@ 0x2c
 800df1c:	4618      	mov	r0, r3
 800df1e:	f7fd ffc8 	bl	800beb2 <ld_dword>
 800df22:	4602      	mov	r2, r0
 800df24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800df26:	62da      	str	r2, [r3, #44]	@ 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800df28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800df2a:	69db      	ldr	r3, [r3, #28]
 800df2c:	009b      	lsls	r3, r3, #2
 800df2e:	647b      	str	r3, [r7, #68]	@ 0x44
 800df30:	e01f      	b.n	800df72 <find_volume+0x3f6>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800df32:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800df34:	891b      	ldrh	r3, [r3, #8]
 800df36:	2b00      	cmp	r3, #0
 800df38:	d101      	bne.n	800df3e <find_volume+0x3c2>
 800df3a:	230d      	movs	r3, #13
 800df3c:	e097      	b.n	800e06e <find_volume+0x4f2>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800df3e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800df40:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800df42:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800df44:	441a      	add	r2, r3
 800df46:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800df48:	62da      	str	r2, [r3, #44]	@ 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800df4a:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800df4e:	2b02      	cmp	r3, #2
 800df50:	d103      	bne.n	800df5a <find_volume+0x3de>
 800df52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800df54:	69db      	ldr	r3, [r3, #28]
 800df56:	005b      	lsls	r3, r3, #1
 800df58:	e00a      	b.n	800df70 <find_volume+0x3f4>
 800df5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800df5c:	69da      	ldr	r2, [r3, #28]
 800df5e:	4613      	mov	r3, r2
 800df60:	005b      	lsls	r3, r3, #1
 800df62:	4413      	add	r3, r2
 800df64:	085a      	lsrs	r2, r3, #1
 800df66:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800df68:	69db      	ldr	r3, [r3, #28]
 800df6a:	f003 0301 	and.w	r3, r3, #1
 800df6e:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800df70:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800df72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800df74:	6a1a      	ldr	r2, [r3, #32]
 800df76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800df78:	899b      	ldrh	r3, [r3, #12]
 800df7a:	4619      	mov	r1, r3
 800df7c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800df7e:	440b      	add	r3, r1
 800df80:	3b01      	subs	r3, #1
 800df82:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800df84:	8989      	ldrh	r1, [r1, #12]
 800df86:	fbb3 f3f1 	udiv	r3, r3, r1
 800df8a:	429a      	cmp	r2, r3
 800df8c:	d201      	bcs.n	800df92 <find_volume+0x416>
 800df8e:	230d      	movs	r3, #13
 800df90:	e06d      	b.n	800e06e <find_volume+0x4f2>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800df92:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800df94:	f04f 32ff 	mov.w	r2, #4294967295
 800df98:	619a      	str	r2, [r3, #24]
 800df9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800df9c:	699a      	ldr	r2, [r3, #24]
 800df9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dfa0:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 800dfa2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dfa4:	2280      	movs	r2, #128	@ 0x80
 800dfa6:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800dfa8:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800dfac:	2b03      	cmp	r3, #3
 800dfae:	d149      	bne.n	800e044 <find_volume+0x4c8>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800dfb0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dfb2:	3338      	adds	r3, #56	@ 0x38
 800dfb4:	3330      	adds	r3, #48	@ 0x30
 800dfb6:	4618      	mov	r0, r3
 800dfb8:	f7fd ff62 	bl	800be80 <ld_word>
 800dfbc:	4603      	mov	r3, r0
 800dfbe:	2b01      	cmp	r3, #1
 800dfc0:	d140      	bne.n	800e044 <find_volume+0x4c8>
			&& move_window(fs, bsect + 1) == FR_OK)
 800dfc2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800dfc4:	3301      	adds	r3, #1
 800dfc6:	4619      	mov	r1, r3
 800dfc8:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800dfca:	f7fe fa0b 	bl	800c3e4 <move_window>
 800dfce:	4603      	mov	r3, r0
 800dfd0:	2b00      	cmp	r3, #0
 800dfd2:	d137      	bne.n	800e044 <find_volume+0x4c8>
		{
			fs->fsi_flag = 0;
 800dfd4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dfd6:	2200      	movs	r2, #0
 800dfd8:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800dfda:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dfdc:	3338      	adds	r3, #56	@ 0x38
 800dfde:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800dfe2:	4618      	mov	r0, r3
 800dfe4:	f7fd ff4c 	bl	800be80 <ld_word>
 800dfe8:	4603      	mov	r3, r0
 800dfea:	461a      	mov	r2, r3
 800dfec:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800dff0:	429a      	cmp	r2, r3
 800dff2:	d127      	bne.n	800e044 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800dff4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dff6:	3338      	adds	r3, #56	@ 0x38
 800dff8:	4618      	mov	r0, r3
 800dffa:	f7fd ff5a 	bl	800beb2 <ld_dword>
 800dffe:	4603      	mov	r3, r0
 800e000:	4a1d      	ldr	r2, [pc, #116]	@ (800e078 <find_volume+0x4fc>)
 800e002:	4293      	cmp	r3, r2
 800e004:	d11e      	bne.n	800e044 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800e006:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e008:	3338      	adds	r3, #56	@ 0x38
 800e00a:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800e00e:	4618      	mov	r0, r3
 800e010:	f7fd ff4f 	bl	800beb2 <ld_dword>
 800e014:	4603      	mov	r3, r0
 800e016:	4a19      	ldr	r2, [pc, #100]	@ (800e07c <find_volume+0x500>)
 800e018:	4293      	cmp	r3, r2
 800e01a:	d113      	bne.n	800e044 <find_volume+0x4c8>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800e01c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e01e:	3338      	adds	r3, #56	@ 0x38
 800e020:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 800e024:	4618      	mov	r0, r3
 800e026:	f7fd ff44 	bl	800beb2 <ld_dword>
 800e02a:	4602      	mov	r2, r0
 800e02c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e02e:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800e030:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e032:	3338      	adds	r3, #56	@ 0x38
 800e034:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 800e038:	4618      	mov	r0, r3
 800e03a:	f7fd ff3a 	bl	800beb2 <ld_dword>
 800e03e:	4602      	mov	r2, r0
 800e040:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e042:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800e044:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e046:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 800e04a:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800e04c:	4b0c      	ldr	r3, [pc, #48]	@ (800e080 <find_volume+0x504>)
 800e04e:	881b      	ldrh	r3, [r3, #0]
 800e050:	3301      	adds	r3, #1
 800e052:	b29a      	uxth	r2, r3
 800e054:	4b0a      	ldr	r3, [pc, #40]	@ (800e080 <find_volume+0x504>)
 800e056:	801a      	strh	r2, [r3, #0]
 800e058:	4b09      	ldr	r3, [pc, #36]	@ (800e080 <find_volume+0x504>)
 800e05a:	881a      	ldrh	r2, [r3, #0]
 800e05c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e05e:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 800e060:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e062:	4a08      	ldr	r2, [pc, #32]	@ (800e084 <find_volume+0x508>)
 800e064:	611a      	str	r2, [r3, #16]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800e066:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800e068:	f7fe f954 	bl	800c314 <clear_lock>
#endif
	return FR_OK;
 800e06c:	2300      	movs	r3, #0
}
 800e06e:	4618      	mov	r0, r3
 800e070:	3758      	adds	r7, #88	@ 0x58
 800e072:	46bd      	mov	sp, r7
 800e074:	bd80      	pop	{r7, pc}
 800e076:	bf00      	nop
 800e078:	41615252 	.word	0x41615252
 800e07c:	61417272 	.word	0x61417272
 800e080:	200161b8 	.word	0x200161b8
 800e084:	200161dc 	.word	0x200161dc

0800e088 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800e088:	b580      	push	{r7, lr}
 800e08a:	b084      	sub	sp, #16
 800e08c:	af00      	add	r7, sp, #0
 800e08e:	6078      	str	r0, [r7, #4]
 800e090:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800e092:	2309      	movs	r3, #9
 800e094:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800e096:	687b      	ldr	r3, [r7, #4]
 800e098:	2b00      	cmp	r3, #0
 800e09a:	d01c      	beq.n	800e0d6 <validate+0x4e>
 800e09c:	687b      	ldr	r3, [r7, #4]
 800e09e:	681b      	ldr	r3, [r3, #0]
 800e0a0:	2b00      	cmp	r3, #0
 800e0a2:	d018      	beq.n	800e0d6 <validate+0x4e>
 800e0a4:	687b      	ldr	r3, [r7, #4]
 800e0a6:	681b      	ldr	r3, [r3, #0]
 800e0a8:	781b      	ldrb	r3, [r3, #0]
 800e0aa:	2b00      	cmp	r3, #0
 800e0ac:	d013      	beq.n	800e0d6 <validate+0x4e>
 800e0ae:	687b      	ldr	r3, [r7, #4]
 800e0b0:	889a      	ldrh	r2, [r3, #4]
 800e0b2:	687b      	ldr	r3, [r7, #4]
 800e0b4:	681b      	ldr	r3, [r3, #0]
 800e0b6:	88db      	ldrh	r3, [r3, #6]
 800e0b8:	429a      	cmp	r2, r3
 800e0ba:	d10c      	bne.n	800e0d6 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800e0bc:	687b      	ldr	r3, [r7, #4]
 800e0be:	681b      	ldr	r3, [r3, #0]
 800e0c0:	785b      	ldrb	r3, [r3, #1]
 800e0c2:	4618      	mov	r0, r3
 800e0c4:	f7fd fe3c 	bl	800bd40 <disk_status>
 800e0c8:	4603      	mov	r3, r0
 800e0ca:	f003 0301 	and.w	r3, r3, #1
 800e0ce:	2b00      	cmp	r3, #0
 800e0d0:	d101      	bne.n	800e0d6 <validate+0x4e>
			res = FR_OK;
 800e0d2:	2300      	movs	r3, #0
 800e0d4:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800e0d6:	7bfb      	ldrb	r3, [r7, #15]
 800e0d8:	2b00      	cmp	r3, #0
 800e0da:	d102      	bne.n	800e0e2 <validate+0x5a>
 800e0dc:	687b      	ldr	r3, [r7, #4]
 800e0de:	681b      	ldr	r3, [r3, #0]
 800e0e0:	e000      	b.n	800e0e4 <validate+0x5c>
 800e0e2:	2300      	movs	r3, #0
 800e0e4:	683a      	ldr	r2, [r7, #0]
 800e0e6:	6013      	str	r3, [r2, #0]
	return res;
 800e0e8:	7bfb      	ldrb	r3, [r7, #15]
}
 800e0ea:	4618      	mov	r0, r3
 800e0ec:	3710      	adds	r7, #16
 800e0ee:	46bd      	mov	sp, r7
 800e0f0:	bd80      	pop	{r7, pc}
	...

0800e0f4 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800e0f4:	b580      	push	{r7, lr}
 800e0f6:	b088      	sub	sp, #32
 800e0f8:	af00      	add	r7, sp, #0
 800e0fa:	60f8      	str	r0, [r7, #12]
 800e0fc:	60b9      	str	r1, [r7, #8]
 800e0fe:	4613      	mov	r3, r2
 800e100:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800e102:	68bb      	ldr	r3, [r7, #8]
 800e104:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800e106:	f107 0310 	add.w	r3, r7, #16
 800e10a:	4618      	mov	r0, r3
 800e10c:	f7ff fc9c 	bl	800da48 <get_ldnumber>
 800e110:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800e112:	69fb      	ldr	r3, [r7, #28]
 800e114:	2b00      	cmp	r3, #0
 800e116:	da01      	bge.n	800e11c <f_mount+0x28>
 800e118:	230b      	movs	r3, #11
 800e11a:	e02b      	b.n	800e174 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800e11c:	4a17      	ldr	r2, [pc, #92]	@ (800e17c <f_mount+0x88>)
 800e11e:	69fb      	ldr	r3, [r7, #28]
 800e120:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e124:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800e126:	69bb      	ldr	r3, [r7, #24]
 800e128:	2b00      	cmp	r3, #0
 800e12a:	d005      	beq.n	800e138 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800e12c:	69b8      	ldr	r0, [r7, #24]
 800e12e:	f7fe f8f1 	bl	800c314 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800e132:	69bb      	ldr	r3, [r7, #24]
 800e134:	2200      	movs	r2, #0
 800e136:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800e138:	68fb      	ldr	r3, [r7, #12]
 800e13a:	2b00      	cmp	r3, #0
 800e13c:	d002      	beq.n	800e144 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800e13e:	68fb      	ldr	r3, [r7, #12]
 800e140:	2200      	movs	r2, #0
 800e142:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800e144:	68fa      	ldr	r2, [r7, #12]
 800e146:	490d      	ldr	r1, [pc, #52]	@ (800e17c <f_mount+0x88>)
 800e148:	69fb      	ldr	r3, [r7, #28]
 800e14a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800e14e:	68fb      	ldr	r3, [r7, #12]
 800e150:	2b00      	cmp	r3, #0
 800e152:	d002      	beq.n	800e15a <f_mount+0x66>
 800e154:	79fb      	ldrb	r3, [r7, #7]
 800e156:	2b01      	cmp	r3, #1
 800e158:	d001      	beq.n	800e15e <f_mount+0x6a>
 800e15a:	2300      	movs	r3, #0
 800e15c:	e00a      	b.n	800e174 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800e15e:	f107 010c 	add.w	r1, r7, #12
 800e162:	f107 0308 	add.w	r3, r7, #8
 800e166:	2200      	movs	r2, #0
 800e168:	4618      	mov	r0, r3
 800e16a:	f7ff fd07 	bl	800db7c <find_volume>
 800e16e:	4603      	mov	r3, r0
 800e170:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800e172:	7dfb      	ldrb	r3, [r7, #23]
}
 800e174:	4618      	mov	r0, r3
 800e176:	3720      	adds	r7, #32
 800e178:	46bd      	mov	sp, r7
 800e17a:	bd80      	pop	{r7, pc}
 800e17c:	200161b4 	.word	0x200161b4

0800e180 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800e180:	b580      	push	{r7, lr}
 800e182:	b09a      	sub	sp, #104	@ 0x68
 800e184:	af00      	add	r7, sp, #0
 800e186:	60f8      	str	r0, [r7, #12]
 800e188:	60b9      	str	r1, [r7, #8]
 800e18a:	4613      	mov	r3, r2
 800e18c:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800e18e:	68fb      	ldr	r3, [r7, #12]
 800e190:	2b00      	cmp	r3, #0
 800e192:	d101      	bne.n	800e198 <f_open+0x18>
 800e194:	2309      	movs	r3, #9
 800e196:	e1b7      	b.n	800e508 <f_open+0x388>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800e198:	79fb      	ldrb	r3, [r7, #7]
 800e19a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800e19e:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800e1a0:	79fa      	ldrb	r2, [r7, #7]
 800e1a2:	f107 0114 	add.w	r1, r7, #20
 800e1a6:	f107 0308 	add.w	r3, r7, #8
 800e1aa:	4618      	mov	r0, r3
 800e1ac:	f7ff fce6 	bl	800db7c <find_volume>
 800e1b0:	4603      	mov	r3, r0
 800e1b2:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
	if (res == FR_OK) {
 800e1b6:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800e1ba:	2b00      	cmp	r3, #0
 800e1bc:	f040 819b 	bne.w	800e4f6 <f_open+0x376>
		dj.obj.fs = fs;
 800e1c0:	697b      	ldr	r3, [r7, #20]
 800e1c2:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800e1c4:	68ba      	ldr	r2, [r7, #8]
 800e1c6:	f107 0318 	add.w	r3, r7, #24
 800e1ca:	4611      	mov	r1, r2
 800e1cc:	4618      	mov	r0, r3
 800e1ce:	f7ff fbc5 	bl	800d95c <follow_path>
 800e1d2:	4603      	mov	r3, r0
 800e1d4:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800e1d8:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800e1dc:	2b00      	cmp	r3, #0
 800e1de:	d118      	bne.n	800e212 <f_open+0x92>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800e1e0:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800e1e4:	b25b      	sxtb	r3, r3
 800e1e6:	2b00      	cmp	r3, #0
 800e1e8:	da03      	bge.n	800e1f2 <f_open+0x72>
				res = FR_INVALID_NAME;
 800e1ea:	2306      	movs	r3, #6
 800e1ec:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 800e1f0:	e00f      	b.n	800e212 <f_open+0x92>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800e1f2:	79fb      	ldrb	r3, [r7, #7]
 800e1f4:	2b01      	cmp	r3, #1
 800e1f6:	bf8c      	ite	hi
 800e1f8:	2301      	movhi	r3, #1
 800e1fa:	2300      	movls	r3, #0
 800e1fc:	b2db      	uxtb	r3, r3
 800e1fe:	461a      	mov	r2, r3
 800e200:	f107 0318 	add.w	r3, r7, #24
 800e204:	4611      	mov	r1, r2
 800e206:	4618      	mov	r0, r3
 800e208:	f7fd ff3c 	bl	800c084 <chk_lock>
 800e20c:	4603      	mov	r3, r0
 800e20e:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800e212:	79fb      	ldrb	r3, [r7, #7]
 800e214:	f003 031c 	and.w	r3, r3, #28
 800e218:	2b00      	cmp	r3, #0
 800e21a:	d07f      	beq.n	800e31c <f_open+0x19c>
			if (res != FR_OK) {					/* No file, create new */
 800e21c:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800e220:	2b00      	cmp	r3, #0
 800e222:	d017      	beq.n	800e254 <f_open+0xd4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800e224:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800e228:	2b04      	cmp	r3, #4
 800e22a:	d10e      	bne.n	800e24a <f_open+0xca>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800e22c:	f7fd ff86 	bl	800c13c <enq_lock>
 800e230:	4603      	mov	r3, r0
 800e232:	2b00      	cmp	r3, #0
 800e234:	d006      	beq.n	800e244 <f_open+0xc4>
 800e236:	f107 0318 	add.w	r3, r7, #24
 800e23a:	4618      	mov	r0, r3
 800e23c:	f7ff f8de 	bl	800d3fc <dir_register>
 800e240:	4603      	mov	r3, r0
 800e242:	e000      	b.n	800e246 <f_open+0xc6>
 800e244:	2312      	movs	r3, #18
 800e246:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800e24a:	79fb      	ldrb	r3, [r7, #7]
 800e24c:	f043 0308 	orr.w	r3, r3, #8
 800e250:	71fb      	strb	r3, [r7, #7]
 800e252:	e010      	b.n	800e276 <f_open+0xf6>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800e254:	7fbb      	ldrb	r3, [r7, #30]
 800e256:	f003 0311 	and.w	r3, r3, #17
 800e25a:	2b00      	cmp	r3, #0
 800e25c:	d003      	beq.n	800e266 <f_open+0xe6>
					res = FR_DENIED;
 800e25e:	2307      	movs	r3, #7
 800e260:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 800e264:	e007      	b.n	800e276 <f_open+0xf6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800e266:	79fb      	ldrb	r3, [r7, #7]
 800e268:	f003 0304 	and.w	r3, r3, #4
 800e26c:	2b00      	cmp	r3, #0
 800e26e:	d002      	beq.n	800e276 <f_open+0xf6>
 800e270:	2308      	movs	r3, #8
 800e272:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800e276:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800e27a:	2b00      	cmp	r3, #0
 800e27c:	d168      	bne.n	800e350 <f_open+0x1d0>
 800e27e:	79fb      	ldrb	r3, [r7, #7]
 800e280:	f003 0308 	and.w	r3, r3, #8
 800e284:	2b00      	cmp	r3, #0
 800e286:	d063      	beq.n	800e350 <f_open+0x1d0>
				dw = GET_FATTIME();
 800e288:	f7fd f814 	bl	800b2b4 <get_fattime>
 800e28c:	65b8      	str	r0, [r7, #88]	@ 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800e28e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e290:	330e      	adds	r3, #14
 800e292:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800e294:	4618      	mov	r0, r3
 800e296:	f7fd fe4a 	bl	800bf2e <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800e29a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e29c:	3316      	adds	r3, #22
 800e29e:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800e2a0:	4618      	mov	r0, r3
 800e2a2:	f7fd fe44 	bl	800bf2e <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800e2a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e2a8:	330b      	adds	r3, #11
 800e2aa:	2220      	movs	r2, #32
 800e2ac:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800e2ae:	697b      	ldr	r3, [r7, #20]
 800e2b0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800e2b2:	4611      	mov	r1, r2
 800e2b4:	4618      	mov	r0, r3
 800e2b6:	f7fe fe1a 	bl	800ceee <ld_clust>
 800e2ba:	6578      	str	r0, [r7, #84]	@ 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800e2bc:	697b      	ldr	r3, [r7, #20]
 800e2be:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800e2c0:	2200      	movs	r2, #0
 800e2c2:	4618      	mov	r0, r3
 800e2c4:	f7fe fe32 	bl	800cf2c <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800e2c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e2ca:	331c      	adds	r3, #28
 800e2cc:	2100      	movs	r1, #0
 800e2ce:	4618      	mov	r0, r3
 800e2d0:	f7fd fe2d 	bl	800bf2e <st_dword>
					fs->wflag = 1;
 800e2d4:	697b      	ldr	r3, [r7, #20]
 800e2d6:	2201      	movs	r2, #1
 800e2d8:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800e2da:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e2dc:	2b00      	cmp	r3, #0
 800e2de:	d037      	beq.n	800e350 <f_open+0x1d0>
						dw = fs->winsect;
 800e2e0:	697b      	ldr	r3, [r7, #20]
 800e2e2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e2e4:	65bb      	str	r3, [r7, #88]	@ 0x58
						res = remove_chain(&dj.obj, cl, 0);
 800e2e6:	f107 0318 	add.w	r3, r7, #24
 800e2ea:	2200      	movs	r2, #0
 800e2ec:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800e2ee:	4618      	mov	r0, r3
 800e2f0:	f7fe fb22 	bl	800c938 <remove_chain>
 800e2f4:	4603      	mov	r3, r0
 800e2f6:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
						if (res == FR_OK) {
 800e2fa:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800e2fe:	2b00      	cmp	r3, #0
 800e300:	d126      	bne.n	800e350 <f_open+0x1d0>
							res = move_window(fs, dw);
 800e302:	697b      	ldr	r3, [r7, #20]
 800e304:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800e306:	4618      	mov	r0, r3
 800e308:	f7fe f86c 	bl	800c3e4 <move_window>
 800e30c:	4603      	mov	r3, r0
 800e30e:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800e312:	697b      	ldr	r3, [r7, #20]
 800e314:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800e316:	3a01      	subs	r2, #1
 800e318:	615a      	str	r2, [r3, #20]
 800e31a:	e019      	b.n	800e350 <f_open+0x1d0>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800e31c:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800e320:	2b00      	cmp	r3, #0
 800e322:	d115      	bne.n	800e350 <f_open+0x1d0>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800e324:	7fbb      	ldrb	r3, [r7, #30]
 800e326:	f003 0310 	and.w	r3, r3, #16
 800e32a:	2b00      	cmp	r3, #0
 800e32c:	d003      	beq.n	800e336 <f_open+0x1b6>
					res = FR_NO_FILE;
 800e32e:	2304      	movs	r3, #4
 800e330:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 800e334:	e00c      	b.n	800e350 <f_open+0x1d0>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800e336:	79fb      	ldrb	r3, [r7, #7]
 800e338:	f003 0302 	and.w	r3, r3, #2
 800e33c:	2b00      	cmp	r3, #0
 800e33e:	d007      	beq.n	800e350 <f_open+0x1d0>
 800e340:	7fbb      	ldrb	r3, [r7, #30]
 800e342:	f003 0301 	and.w	r3, r3, #1
 800e346:	2b00      	cmp	r3, #0
 800e348:	d002      	beq.n	800e350 <f_open+0x1d0>
						res = FR_DENIED;
 800e34a:	2307      	movs	r3, #7
 800e34c:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 800e350:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800e354:	2b00      	cmp	r3, #0
 800e356:	d126      	bne.n	800e3a6 <f_open+0x226>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800e358:	79fb      	ldrb	r3, [r7, #7]
 800e35a:	f003 0308 	and.w	r3, r3, #8
 800e35e:	2b00      	cmp	r3, #0
 800e360:	d003      	beq.n	800e36a <f_open+0x1ea>
				mode |= FA_MODIFIED;
 800e362:	79fb      	ldrb	r3, [r7, #7]
 800e364:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e368:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800e36a:	697b      	ldr	r3, [r7, #20]
 800e36c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800e36e:	68fb      	ldr	r3, [r7, #12]
 800e370:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 800e372:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800e374:	68fb      	ldr	r3, [r7, #12]
 800e376:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800e378:	79fb      	ldrb	r3, [r7, #7]
 800e37a:	2b01      	cmp	r3, #1
 800e37c:	bf8c      	ite	hi
 800e37e:	2301      	movhi	r3, #1
 800e380:	2300      	movls	r3, #0
 800e382:	b2db      	uxtb	r3, r3
 800e384:	461a      	mov	r2, r3
 800e386:	f107 0318 	add.w	r3, r7, #24
 800e38a:	4611      	mov	r1, r2
 800e38c:	4618      	mov	r0, r3
 800e38e:	f7fd fef7 	bl	800c180 <inc_lock>
 800e392:	4602      	mov	r2, r0
 800e394:	68fb      	ldr	r3, [r7, #12]
 800e396:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800e398:	68fb      	ldr	r3, [r7, #12]
 800e39a:	691b      	ldr	r3, [r3, #16]
 800e39c:	2b00      	cmp	r3, #0
 800e39e:	d102      	bne.n	800e3a6 <f_open+0x226>
 800e3a0:	2302      	movs	r3, #2
 800e3a2:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 800e3a6:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800e3aa:	2b00      	cmp	r3, #0
 800e3ac:	f040 80a3 	bne.w	800e4f6 <f_open+0x376>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800e3b0:	697b      	ldr	r3, [r7, #20]
 800e3b2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800e3b4:	4611      	mov	r1, r2
 800e3b6:	4618      	mov	r0, r3
 800e3b8:	f7fe fd99 	bl	800ceee <ld_clust>
 800e3bc:	4602      	mov	r2, r0
 800e3be:	68fb      	ldr	r3, [r7, #12]
 800e3c0:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800e3c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e3c4:	331c      	adds	r3, #28
 800e3c6:	4618      	mov	r0, r3
 800e3c8:	f7fd fd73 	bl	800beb2 <ld_dword>
 800e3cc:	4602      	mov	r2, r0
 800e3ce:	68fb      	ldr	r3, [r7, #12]
 800e3d0:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800e3d2:	68fb      	ldr	r3, [r7, #12]
 800e3d4:	2200      	movs	r2, #0
 800e3d6:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800e3d8:	697a      	ldr	r2, [r7, #20]
 800e3da:	68fb      	ldr	r3, [r7, #12]
 800e3dc:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800e3de:	697b      	ldr	r3, [r7, #20]
 800e3e0:	88da      	ldrh	r2, [r3, #6]
 800e3e2:	68fb      	ldr	r3, [r7, #12]
 800e3e4:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800e3e6:	68fb      	ldr	r3, [r7, #12]
 800e3e8:	79fa      	ldrb	r2, [r7, #7]
 800e3ea:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800e3ec:	68fb      	ldr	r3, [r7, #12]
 800e3ee:	2200      	movs	r2, #0
 800e3f0:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800e3f2:	68fb      	ldr	r3, [r7, #12]
 800e3f4:	2200      	movs	r2, #0
 800e3f6:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800e3f8:	68fb      	ldr	r3, [r7, #12]
 800e3fa:	2200      	movs	r2, #0
 800e3fc:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800e3fe:	68fb      	ldr	r3, [r7, #12]
 800e400:	3330      	adds	r3, #48	@ 0x30
 800e402:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800e406:	2100      	movs	r1, #0
 800e408:	4618      	mov	r0, r3
 800e40a:	f7fd fddd 	bl	800bfc8 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800e40e:	79fb      	ldrb	r3, [r7, #7]
 800e410:	f003 0320 	and.w	r3, r3, #32
 800e414:	2b00      	cmp	r3, #0
 800e416:	d06e      	beq.n	800e4f6 <f_open+0x376>
 800e418:	68fb      	ldr	r3, [r7, #12]
 800e41a:	68db      	ldr	r3, [r3, #12]
 800e41c:	2b00      	cmp	r3, #0
 800e41e:	d06a      	beq.n	800e4f6 <f_open+0x376>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800e420:	68fb      	ldr	r3, [r7, #12]
 800e422:	68da      	ldr	r2, [r3, #12]
 800e424:	68fb      	ldr	r3, [r7, #12]
 800e426:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800e428:	697b      	ldr	r3, [r7, #20]
 800e42a:	895b      	ldrh	r3, [r3, #10]
 800e42c:	461a      	mov	r2, r3
 800e42e:	697b      	ldr	r3, [r7, #20]
 800e430:	899b      	ldrh	r3, [r3, #12]
 800e432:	fb02 f303 	mul.w	r3, r2, r3
 800e436:	653b      	str	r3, [r7, #80]	@ 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800e438:	68fb      	ldr	r3, [r7, #12]
 800e43a:	689b      	ldr	r3, [r3, #8]
 800e43c:	663b      	str	r3, [r7, #96]	@ 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800e43e:	68fb      	ldr	r3, [r7, #12]
 800e440:	68db      	ldr	r3, [r3, #12]
 800e442:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800e444:	e016      	b.n	800e474 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 800e446:	68fb      	ldr	r3, [r7, #12]
 800e448:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 800e44a:	4618      	mov	r0, r3
 800e44c:	f7fe f887 	bl	800c55e <get_fat>
 800e450:	6638      	str	r0, [r7, #96]	@ 0x60
					if (clst <= 1) res = FR_INT_ERR;
 800e452:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800e454:	2b01      	cmp	r3, #1
 800e456:	d802      	bhi.n	800e45e <f_open+0x2de>
 800e458:	2302      	movs	r3, #2
 800e45a:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800e45e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800e460:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e464:	d102      	bne.n	800e46c <f_open+0x2ec>
 800e466:	2301      	movs	r3, #1
 800e468:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800e46c:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800e46e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e470:	1ad3      	subs	r3, r2, r3
 800e472:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800e474:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800e478:	2b00      	cmp	r3, #0
 800e47a:	d103      	bne.n	800e484 <f_open+0x304>
 800e47c:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800e47e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e480:	429a      	cmp	r2, r3
 800e482:	d8e0      	bhi.n	800e446 <f_open+0x2c6>
				}
				fp->clust = clst;
 800e484:	68fb      	ldr	r3, [r7, #12]
 800e486:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800e488:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800e48a:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800e48e:	2b00      	cmp	r3, #0
 800e490:	d131      	bne.n	800e4f6 <f_open+0x376>
 800e492:	697b      	ldr	r3, [r7, #20]
 800e494:	899b      	ldrh	r3, [r3, #12]
 800e496:	461a      	mov	r2, r3
 800e498:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800e49a:	fbb3 f1f2 	udiv	r1, r3, r2
 800e49e:	fb01 f202 	mul.w	r2, r1, r2
 800e4a2:	1a9b      	subs	r3, r3, r2
 800e4a4:	2b00      	cmp	r3, #0
 800e4a6:	d026      	beq.n	800e4f6 <f_open+0x376>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800e4a8:	697b      	ldr	r3, [r7, #20]
 800e4aa:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 800e4ac:	4618      	mov	r0, r3
 800e4ae:	f7fe f837 	bl	800c520 <clust2sect>
 800e4b2:	64f8      	str	r0, [r7, #76]	@ 0x4c
 800e4b4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e4b6:	2b00      	cmp	r3, #0
 800e4b8:	d103      	bne.n	800e4c2 <f_open+0x342>
						res = FR_INT_ERR;
 800e4ba:	2302      	movs	r3, #2
 800e4bc:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 800e4c0:	e019      	b.n	800e4f6 <f_open+0x376>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800e4c2:	697b      	ldr	r3, [r7, #20]
 800e4c4:	899b      	ldrh	r3, [r3, #12]
 800e4c6:	461a      	mov	r2, r3
 800e4c8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800e4ca:	fbb3 f2f2 	udiv	r2, r3, r2
 800e4ce:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e4d0:	441a      	add	r2, r3
 800e4d2:	68fb      	ldr	r3, [r7, #12]
 800e4d4:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800e4d6:	697b      	ldr	r3, [r7, #20]
 800e4d8:	7858      	ldrb	r0, [r3, #1]
 800e4da:	68fb      	ldr	r3, [r7, #12]
 800e4dc:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800e4e0:	68fb      	ldr	r3, [r7, #12]
 800e4e2:	6a1a      	ldr	r2, [r3, #32]
 800e4e4:	2301      	movs	r3, #1
 800e4e6:	f7fd fc6d 	bl	800bdc4 <disk_read>
 800e4ea:	4603      	mov	r3, r0
 800e4ec:	2b00      	cmp	r3, #0
 800e4ee:	d002      	beq.n	800e4f6 <f_open+0x376>
 800e4f0:	2301      	movs	r3, #1
 800e4f2:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800e4f6:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800e4fa:	2b00      	cmp	r3, #0
 800e4fc:	d002      	beq.n	800e504 <f_open+0x384>
 800e4fe:	68fb      	ldr	r3, [r7, #12]
 800e500:	2200      	movs	r2, #0
 800e502:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800e504:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 800e508:	4618      	mov	r0, r3
 800e50a:	3768      	adds	r7, #104	@ 0x68
 800e50c:	46bd      	mov	sp, r7
 800e50e:	bd80      	pop	{r7, pc}

0800e510 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 800e510:	b580      	push	{r7, lr}
 800e512:	b08e      	sub	sp, #56	@ 0x38
 800e514:	af00      	add	r7, sp, #0
 800e516:	60f8      	str	r0, [r7, #12]
 800e518:	60b9      	str	r1, [r7, #8]
 800e51a:	607a      	str	r2, [r7, #4]
 800e51c:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 800e51e:	68bb      	ldr	r3, [r7, #8]
 800e520:	627b      	str	r3, [r7, #36]	@ 0x24


	*br = 0;	/* Clear read byte counter */
 800e522:	683b      	ldr	r3, [r7, #0]
 800e524:	2200      	movs	r2, #0
 800e526:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 800e528:	68fb      	ldr	r3, [r7, #12]
 800e52a:	f107 0214 	add.w	r2, r7, #20
 800e52e:	4611      	mov	r1, r2
 800e530:	4618      	mov	r0, r3
 800e532:	f7ff fda9 	bl	800e088 <validate>
 800e536:	4603      	mov	r3, r0
 800e538:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800e53c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800e540:	2b00      	cmp	r3, #0
 800e542:	d107      	bne.n	800e554 <f_read+0x44>
 800e544:	68fb      	ldr	r3, [r7, #12]
 800e546:	7d5b      	ldrb	r3, [r3, #21]
 800e548:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800e54c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800e550:	2b00      	cmp	r3, #0
 800e552:	d002      	beq.n	800e55a <f_read+0x4a>
 800e554:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800e558:	e135      	b.n	800e7c6 <f_read+0x2b6>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800e55a:	68fb      	ldr	r3, [r7, #12]
 800e55c:	7d1b      	ldrb	r3, [r3, #20]
 800e55e:	f003 0301 	and.w	r3, r3, #1
 800e562:	2b00      	cmp	r3, #0
 800e564:	d101      	bne.n	800e56a <f_read+0x5a>
 800e566:	2307      	movs	r3, #7
 800e568:	e12d      	b.n	800e7c6 <f_read+0x2b6>
	remain = fp->obj.objsize - fp->fptr;
 800e56a:	68fb      	ldr	r3, [r7, #12]
 800e56c:	68da      	ldr	r2, [r3, #12]
 800e56e:	68fb      	ldr	r3, [r7, #12]
 800e570:	699b      	ldr	r3, [r3, #24]
 800e572:	1ad3      	subs	r3, r2, r3
 800e574:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800e576:	687a      	ldr	r2, [r7, #4]
 800e578:	6a3b      	ldr	r3, [r7, #32]
 800e57a:	429a      	cmp	r2, r3
 800e57c:	f240 811e 	bls.w	800e7bc <f_read+0x2ac>
 800e580:	6a3b      	ldr	r3, [r7, #32]
 800e582:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 800e584:	e11a      	b.n	800e7bc <f_read+0x2ac>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 800e586:	68fb      	ldr	r3, [r7, #12]
 800e588:	699b      	ldr	r3, [r3, #24]
 800e58a:	697a      	ldr	r2, [r7, #20]
 800e58c:	8992      	ldrh	r2, [r2, #12]
 800e58e:	fbb3 f1f2 	udiv	r1, r3, r2
 800e592:	fb01 f202 	mul.w	r2, r1, r2
 800e596:	1a9b      	subs	r3, r3, r2
 800e598:	2b00      	cmp	r3, #0
 800e59a:	f040 80d5 	bne.w	800e748 <f_read+0x238>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 800e59e:	68fb      	ldr	r3, [r7, #12]
 800e5a0:	699b      	ldr	r3, [r3, #24]
 800e5a2:	697a      	ldr	r2, [r7, #20]
 800e5a4:	8992      	ldrh	r2, [r2, #12]
 800e5a6:	fbb3 f3f2 	udiv	r3, r3, r2
 800e5aa:	697a      	ldr	r2, [r7, #20]
 800e5ac:	8952      	ldrh	r2, [r2, #10]
 800e5ae:	3a01      	subs	r2, #1
 800e5b0:	4013      	ands	r3, r2
 800e5b2:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 800e5b4:	69fb      	ldr	r3, [r7, #28]
 800e5b6:	2b00      	cmp	r3, #0
 800e5b8:	d12f      	bne.n	800e61a <f_read+0x10a>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800e5ba:	68fb      	ldr	r3, [r7, #12]
 800e5bc:	699b      	ldr	r3, [r3, #24]
 800e5be:	2b00      	cmp	r3, #0
 800e5c0:	d103      	bne.n	800e5ca <f_read+0xba>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 800e5c2:	68fb      	ldr	r3, [r7, #12]
 800e5c4:	689b      	ldr	r3, [r3, #8]
 800e5c6:	633b      	str	r3, [r7, #48]	@ 0x30
 800e5c8:	e013      	b.n	800e5f2 <f_read+0xe2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800e5ca:	68fb      	ldr	r3, [r7, #12]
 800e5cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e5ce:	2b00      	cmp	r3, #0
 800e5d0:	d007      	beq.n	800e5e2 <f_read+0xd2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800e5d2:	68fb      	ldr	r3, [r7, #12]
 800e5d4:	699b      	ldr	r3, [r3, #24]
 800e5d6:	4619      	mov	r1, r3
 800e5d8:	68f8      	ldr	r0, [r7, #12]
 800e5da:	f7fe faaa 	bl	800cb32 <clmt_clust>
 800e5de:	6338      	str	r0, [r7, #48]	@ 0x30
 800e5e0:	e007      	b.n	800e5f2 <f_read+0xe2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 800e5e2:	68fa      	ldr	r2, [r7, #12]
 800e5e4:	68fb      	ldr	r3, [r7, #12]
 800e5e6:	69db      	ldr	r3, [r3, #28]
 800e5e8:	4619      	mov	r1, r3
 800e5ea:	4610      	mov	r0, r2
 800e5ec:	f7fd ffb7 	bl	800c55e <get_fat>
 800e5f0:	6338      	str	r0, [r7, #48]	@ 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800e5f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e5f4:	2b01      	cmp	r3, #1
 800e5f6:	d804      	bhi.n	800e602 <f_read+0xf2>
 800e5f8:	68fb      	ldr	r3, [r7, #12]
 800e5fa:	2202      	movs	r2, #2
 800e5fc:	755a      	strb	r2, [r3, #21]
 800e5fe:	2302      	movs	r3, #2
 800e600:	e0e1      	b.n	800e7c6 <f_read+0x2b6>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800e602:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e604:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e608:	d104      	bne.n	800e614 <f_read+0x104>
 800e60a:	68fb      	ldr	r3, [r7, #12]
 800e60c:	2201      	movs	r2, #1
 800e60e:	755a      	strb	r2, [r3, #21]
 800e610:	2301      	movs	r3, #1
 800e612:	e0d8      	b.n	800e7c6 <f_read+0x2b6>
				fp->clust = clst;				/* Update current cluster */
 800e614:	68fb      	ldr	r3, [r7, #12]
 800e616:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e618:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800e61a:	697a      	ldr	r2, [r7, #20]
 800e61c:	68fb      	ldr	r3, [r7, #12]
 800e61e:	69db      	ldr	r3, [r3, #28]
 800e620:	4619      	mov	r1, r3
 800e622:	4610      	mov	r0, r2
 800e624:	f7fd ff7c 	bl	800c520 <clust2sect>
 800e628:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800e62a:	69bb      	ldr	r3, [r7, #24]
 800e62c:	2b00      	cmp	r3, #0
 800e62e:	d104      	bne.n	800e63a <f_read+0x12a>
 800e630:	68fb      	ldr	r3, [r7, #12]
 800e632:	2202      	movs	r2, #2
 800e634:	755a      	strb	r2, [r3, #21]
 800e636:	2302      	movs	r3, #2
 800e638:	e0c5      	b.n	800e7c6 <f_read+0x2b6>
			sect += csect;
 800e63a:	69ba      	ldr	r2, [r7, #24]
 800e63c:	69fb      	ldr	r3, [r7, #28]
 800e63e:	4413      	add	r3, r2
 800e640:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 800e642:	697b      	ldr	r3, [r7, #20]
 800e644:	899b      	ldrh	r3, [r3, #12]
 800e646:	461a      	mov	r2, r3
 800e648:	687b      	ldr	r3, [r7, #4]
 800e64a:	fbb3 f3f2 	udiv	r3, r3, r2
 800e64e:	62bb      	str	r3, [r7, #40]	@ 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 800e650:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e652:	2b00      	cmp	r3, #0
 800e654:	d041      	beq.n	800e6da <f_read+0x1ca>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800e656:	69fa      	ldr	r2, [r7, #28]
 800e658:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e65a:	4413      	add	r3, r2
 800e65c:	697a      	ldr	r2, [r7, #20]
 800e65e:	8952      	ldrh	r2, [r2, #10]
 800e660:	4293      	cmp	r3, r2
 800e662:	d905      	bls.n	800e670 <f_read+0x160>
					cc = fs->csize - csect;
 800e664:	697b      	ldr	r3, [r7, #20]
 800e666:	895b      	ldrh	r3, [r3, #10]
 800e668:	461a      	mov	r2, r3
 800e66a:	69fb      	ldr	r3, [r7, #28]
 800e66c:	1ad3      	subs	r3, r2, r3
 800e66e:	62bb      	str	r3, [r7, #40]	@ 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800e670:	697b      	ldr	r3, [r7, #20]
 800e672:	7858      	ldrb	r0, [r3, #1]
 800e674:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e676:	69ba      	ldr	r2, [r7, #24]
 800e678:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800e67a:	f7fd fba3 	bl	800bdc4 <disk_read>
 800e67e:	4603      	mov	r3, r0
 800e680:	2b00      	cmp	r3, #0
 800e682:	d004      	beq.n	800e68e <f_read+0x17e>
 800e684:	68fb      	ldr	r3, [r7, #12]
 800e686:	2201      	movs	r2, #1
 800e688:	755a      	strb	r2, [r3, #21]
 800e68a:	2301      	movs	r3, #1
 800e68c:	e09b      	b.n	800e7c6 <f_read+0x2b6>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 800e68e:	68fb      	ldr	r3, [r7, #12]
 800e690:	7d1b      	ldrb	r3, [r3, #20]
 800e692:	b25b      	sxtb	r3, r3
 800e694:	2b00      	cmp	r3, #0
 800e696:	da18      	bge.n	800e6ca <f_read+0x1ba>
 800e698:	68fb      	ldr	r3, [r7, #12]
 800e69a:	6a1a      	ldr	r2, [r3, #32]
 800e69c:	69bb      	ldr	r3, [r7, #24]
 800e69e:	1ad3      	subs	r3, r2, r3
 800e6a0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800e6a2:	429a      	cmp	r2, r3
 800e6a4:	d911      	bls.n	800e6ca <f_read+0x1ba>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 800e6a6:	68fb      	ldr	r3, [r7, #12]
 800e6a8:	6a1a      	ldr	r2, [r3, #32]
 800e6aa:	69bb      	ldr	r3, [r7, #24]
 800e6ac:	1ad3      	subs	r3, r2, r3
 800e6ae:	697a      	ldr	r2, [r7, #20]
 800e6b0:	8992      	ldrh	r2, [r2, #12]
 800e6b2:	fb02 f303 	mul.w	r3, r2, r3
 800e6b6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e6b8:	18d0      	adds	r0, r2, r3
 800e6ba:	68fb      	ldr	r3, [r7, #12]
 800e6bc:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800e6c0:	697b      	ldr	r3, [r7, #20]
 800e6c2:	899b      	ldrh	r3, [r3, #12]
 800e6c4:	461a      	mov	r2, r3
 800e6c6:	f7fd fc5e 	bl	800bf86 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 800e6ca:	697b      	ldr	r3, [r7, #20]
 800e6cc:	899b      	ldrh	r3, [r3, #12]
 800e6ce:	461a      	mov	r2, r3
 800e6d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e6d2:	fb02 f303 	mul.w	r3, r2, r3
 800e6d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
				continue;
 800e6d8:	e05c      	b.n	800e794 <f_read+0x284>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 800e6da:	68fb      	ldr	r3, [r7, #12]
 800e6dc:	6a1b      	ldr	r3, [r3, #32]
 800e6de:	69ba      	ldr	r2, [r7, #24]
 800e6e0:	429a      	cmp	r2, r3
 800e6e2:	d02e      	beq.n	800e742 <f_read+0x232>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800e6e4:	68fb      	ldr	r3, [r7, #12]
 800e6e6:	7d1b      	ldrb	r3, [r3, #20]
 800e6e8:	b25b      	sxtb	r3, r3
 800e6ea:	2b00      	cmp	r3, #0
 800e6ec:	da18      	bge.n	800e720 <f_read+0x210>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800e6ee:	697b      	ldr	r3, [r7, #20]
 800e6f0:	7858      	ldrb	r0, [r3, #1]
 800e6f2:	68fb      	ldr	r3, [r7, #12]
 800e6f4:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800e6f8:	68fb      	ldr	r3, [r7, #12]
 800e6fa:	6a1a      	ldr	r2, [r3, #32]
 800e6fc:	2301      	movs	r3, #1
 800e6fe:	f7fd fb81 	bl	800be04 <disk_write>
 800e702:	4603      	mov	r3, r0
 800e704:	2b00      	cmp	r3, #0
 800e706:	d004      	beq.n	800e712 <f_read+0x202>
 800e708:	68fb      	ldr	r3, [r7, #12]
 800e70a:	2201      	movs	r2, #1
 800e70c:	755a      	strb	r2, [r3, #21]
 800e70e:	2301      	movs	r3, #1
 800e710:	e059      	b.n	800e7c6 <f_read+0x2b6>
					fp->flag &= (BYTE)~FA_DIRTY;
 800e712:	68fb      	ldr	r3, [r7, #12]
 800e714:	7d1b      	ldrb	r3, [r3, #20]
 800e716:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800e71a:	b2da      	uxtb	r2, r3
 800e71c:	68fb      	ldr	r3, [r7, #12]
 800e71e:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800e720:	697b      	ldr	r3, [r7, #20]
 800e722:	7858      	ldrb	r0, [r3, #1]
 800e724:	68fb      	ldr	r3, [r7, #12]
 800e726:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800e72a:	2301      	movs	r3, #1
 800e72c:	69ba      	ldr	r2, [r7, #24]
 800e72e:	f7fd fb49 	bl	800bdc4 <disk_read>
 800e732:	4603      	mov	r3, r0
 800e734:	2b00      	cmp	r3, #0
 800e736:	d004      	beq.n	800e742 <f_read+0x232>
 800e738:	68fb      	ldr	r3, [r7, #12]
 800e73a:	2201      	movs	r2, #1
 800e73c:	755a      	strb	r2, [r3, #21]
 800e73e:	2301      	movs	r3, #1
 800e740:	e041      	b.n	800e7c6 <f_read+0x2b6>
			}
#endif
			fp->sect = sect;
 800e742:	68fb      	ldr	r3, [r7, #12]
 800e744:	69ba      	ldr	r2, [r7, #24]
 800e746:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800e748:	697b      	ldr	r3, [r7, #20]
 800e74a:	899b      	ldrh	r3, [r3, #12]
 800e74c:	4618      	mov	r0, r3
 800e74e:	68fb      	ldr	r3, [r7, #12]
 800e750:	699b      	ldr	r3, [r3, #24]
 800e752:	697a      	ldr	r2, [r7, #20]
 800e754:	8992      	ldrh	r2, [r2, #12]
 800e756:	fbb3 f1f2 	udiv	r1, r3, r2
 800e75a:	fb01 f202 	mul.w	r2, r1, r2
 800e75e:	1a9b      	subs	r3, r3, r2
 800e760:	1ac3      	subs	r3, r0, r3
 800e762:	62fb      	str	r3, [r7, #44]	@ 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 800e764:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800e766:	687b      	ldr	r3, [r7, #4]
 800e768:	429a      	cmp	r2, r3
 800e76a:	d901      	bls.n	800e770 <f_read+0x260>
 800e76c:	687b      	ldr	r3, [r7, #4]
 800e76e:	62fb      	str	r3, [r7, #44]	@ 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 800e770:	68fb      	ldr	r3, [r7, #12]
 800e772:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800e776:	68fb      	ldr	r3, [r7, #12]
 800e778:	699b      	ldr	r3, [r3, #24]
 800e77a:	697a      	ldr	r2, [r7, #20]
 800e77c:	8992      	ldrh	r2, [r2, #12]
 800e77e:	fbb3 f0f2 	udiv	r0, r3, r2
 800e782:	fb00 f202 	mul.w	r2, r0, r2
 800e786:	1a9b      	subs	r3, r3, r2
 800e788:	440b      	add	r3, r1
 800e78a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800e78c:	4619      	mov	r1, r3
 800e78e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800e790:	f7fd fbf9 	bl	800bf86 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 800e794:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e796:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e798:	4413      	add	r3, r2
 800e79a:	627b      	str	r3, [r7, #36]	@ 0x24
 800e79c:	68fb      	ldr	r3, [r7, #12]
 800e79e:	699a      	ldr	r2, [r3, #24]
 800e7a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e7a2:	441a      	add	r2, r3
 800e7a4:	68fb      	ldr	r3, [r7, #12]
 800e7a6:	619a      	str	r2, [r3, #24]
 800e7a8:	683b      	ldr	r3, [r7, #0]
 800e7aa:	681a      	ldr	r2, [r3, #0]
 800e7ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e7ae:	441a      	add	r2, r3
 800e7b0:	683b      	ldr	r3, [r7, #0]
 800e7b2:	601a      	str	r2, [r3, #0]
 800e7b4:	687a      	ldr	r2, [r7, #4]
 800e7b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e7b8:	1ad3      	subs	r3, r2, r3
 800e7ba:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 800e7bc:	687b      	ldr	r3, [r7, #4]
 800e7be:	2b00      	cmp	r3, #0
 800e7c0:	f47f aee1 	bne.w	800e586 <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 800e7c4:	2300      	movs	r3, #0
}
 800e7c6:	4618      	mov	r0, r3
 800e7c8:	3738      	adds	r7, #56	@ 0x38
 800e7ca:	46bd      	mov	sp, r7
 800e7cc:	bd80      	pop	{r7, pc}

0800e7ce <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800e7ce:	b580      	push	{r7, lr}
 800e7d0:	b08c      	sub	sp, #48	@ 0x30
 800e7d2:	af00      	add	r7, sp, #0
 800e7d4:	60f8      	str	r0, [r7, #12]
 800e7d6:	60b9      	str	r1, [r7, #8]
 800e7d8:	607a      	str	r2, [r7, #4]
 800e7da:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800e7dc:	68bb      	ldr	r3, [r7, #8]
 800e7de:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800e7e0:	683b      	ldr	r3, [r7, #0]
 800e7e2:	2200      	movs	r2, #0
 800e7e4:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800e7e6:	68fb      	ldr	r3, [r7, #12]
 800e7e8:	f107 0210 	add.w	r2, r7, #16
 800e7ec:	4611      	mov	r1, r2
 800e7ee:	4618      	mov	r0, r3
 800e7f0:	f7ff fc4a 	bl	800e088 <validate>
 800e7f4:	4603      	mov	r3, r0
 800e7f6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800e7fa:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800e7fe:	2b00      	cmp	r3, #0
 800e800:	d107      	bne.n	800e812 <f_write+0x44>
 800e802:	68fb      	ldr	r3, [r7, #12]
 800e804:	7d5b      	ldrb	r3, [r3, #21]
 800e806:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 800e80a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800e80e:	2b00      	cmp	r3, #0
 800e810:	d002      	beq.n	800e818 <f_write+0x4a>
 800e812:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800e816:	e16a      	b.n	800eaee <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800e818:	68fb      	ldr	r3, [r7, #12]
 800e81a:	7d1b      	ldrb	r3, [r3, #20]
 800e81c:	f003 0302 	and.w	r3, r3, #2
 800e820:	2b00      	cmp	r3, #0
 800e822:	d101      	bne.n	800e828 <f_write+0x5a>
 800e824:	2307      	movs	r3, #7
 800e826:	e162      	b.n	800eaee <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800e828:	68fb      	ldr	r3, [r7, #12]
 800e82a:	699a      	ldr	r2, [r3, #24]
 800e82c:	687b      	ldr	r3, [r7, #4]
 800e82e:	441a      	add	r2, r3
 800e830:	68fb      	ldr	r3, [r7, #12]
 800e832:	699b      	ldr	r3, [r3, #24]
 800e834:	429a      	cmp	r2, r3
 800e836:	f080 814c 	bcs.w	800ead2 <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800e83a:	68fb      	ldr	r3, [r7, #12]
 800e83c:	699b      	ldr	r3, [r3, #24]
 800e83e:	43db      	mvns	r3, r3
 800e840:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800e842:	e146      	b.n	800ead2 <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800e844:	68fb      	ldr	r3, [r7, #12]
 800e846:	699b      	ldr	r3, [r3, #24]
 800e848:	693a      	ldr	r2, [r7, #16]
 800e84a:	8992      	ldrh	r2, [r2, #12]
 800e84c:	fbb3 f1f2 	udiv	r1, r3, r2
 800e850:	fb01 f202 	mul.w	r2, r1, r2
 800e854:	1a9b      	subs	r3, r3, r2
 800e856:	2b00      	cmp	r3, #0
 800e858:	f040 80f1 	bne.w	800ea3e <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800e85c:	68fb      	ldr	r3, [r7, #12]
 800e85e:	699b      	ldr	r3, [r3, #24]
 800e860:	693a      	ldr	r2, [r7, #16]
 800e862:	8992      	ldrh	r2, [r2, #12]
 800e864:	fbb3 f3f2 	udiv	r3, r3, r2
 800e868:	693a      	ldr	r2, [r7, #16]
 800e86a:	8952      	ldrh	r2, [r2, #10]
 800e86c:	3a01      	subs	r2, #1
 800e86e:	4013      	ands	r3, r2
 800e870:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800e872:	69bb      	ldr	r3, [r7, #24]
 800e874:	2b00      	cmp	r3, #0
 800e876:	d143      	bne.n	800e900 <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800e878:	68fb      	ldr	r3, [r7, #12]
 800e87a:	699b      	ldr	r3, [r3, #24]
 800e87c:	2b00      	cmp	r3, #0
 800e87e:	d10c      	bne.n	800e89a <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800e880:	68fb      	ldr	r3, [r7, #12]
 800e882:	689b      	ldr	r3, [r3, #8]
 800e884:	62bb      	str	r3, [r7, #40]	@ 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800e886:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e888:	2b00      	cmp	r3, #0
 800e88a:	d11a      	bne.n	800e8c2 <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800e88c:	68fb      	ldr	r3, [r7, #12]
 800e88e:	2100      	movs	r1, #0
 800e890:	4618      	mov	r0, r3
 800e892:	f7fe f8b6 	bl	800ca02 <create_chain>
 800e896:	62b8      	str	r0, [r7, #40]	@ 0x28
 800e898:	e013      	b.n	800e8c2 <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800e89a:	68fb      	ldr	r3, [r7, #12]
 800e89c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e89e:	2b00      	cmp	r3, #0
 800e8a0:	d007      	beq.n	800e8b2 <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800e8a2:	68fb      	ldr	r3, [r7, #12]
 800e8a4:	699b      	ldr	r3, [r3, #24]
 800e8a6:	4619      	mov	r1, r3
 800e8a8:	68f8      	ldr	r0, [r7, #12]
 800e8aa:	f7fe f942 	bl	800cb32 <clmt_clust>
 800e8ae:	62b8      	str	r0, [r7, #40]	@ 0x28
 800e8b0:	e007      	b.n	800e8c2 <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800e8b2:	68fa      	ldr	r2, [r7, #12]
 800e8b4:	68fb      	ldr	r3, [r7, #12]
 800e8b6:	69db      	ldr	r3, [r3, #28]
 800e8b8:	4619      	mov	r1, r3
 800e8ba:	4610      	mov	r0, r2
 800e8bc:	f7fe f8a1 	bl	800ca02 <create_chain>
 800e8c0:	62b8      	str	r0, [r7, #40]	@ 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800e8c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e8c4:	2b00      	cmp	r3, #0
 800e8c6:	f000 8109 	beq.w	800eadc <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800e8ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e8cc:	2b01      	cmp	r3, #1
 800e8ce:	d104      	bne.n	800e8da <f_write+0x10c>
 800e8d0:	68fb      	ldr	r3, [r7, #12]
 800e8d2:	2202      	movs	r2, #2
 800e8d4:	755a      	strb	r2, [r3, #21]
 800e8d6:	2302      	movs	r3, #2
 800e8d8:	e109      	b.n	800eaee <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800e8da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e8dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e8e0:	d104      	bne.n	800e8ec <f_write+0x11e>
 800e8e2:	68fb      	ldr	r3, [r7, #12]
 800e8e4:	2201      	movs	r2, #1
 800e8e6:	755a      	strb	r2, [r3, #21]
 800e8e8:	2301      	movs	r3, #1
 800e8ea:	e100      	b.n	800eaee <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 800e8ec:	68fb      	ldr	r3, [r7, #12]
 800e8ee:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800e8f0:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800e8f2:	68fb      	ldr	r3, [r7, #12]
 800e8f4:	689b      	ldr	r3, [r3, #8]
 800e8f6:	2b00      	cmp	r3, #0
 800e8f8:	d102      	bne.n	800e900 <f_write+0x132>
 800e8fa:	68fb      	ldr	r3, [r7, #12]
 800e8fc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800e8fe:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800e900:	68fb      	ldr	r3, [r7, #12]
 800e902:	7d1b      	ldrb	r3, [r3, #20]
 800e904:	b25b      	sxtb	r3, r3
 800e906:	2b00      	cmp	r3, #0
 800e908:	da18      	bge.n	800e93c <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800e90a:	693b      	ldr	r3, [r7, #16]
 800e90c:	7858      	ldrb	r0, [r3, #1]
 800e90e:	68fb      	ldr	r3, [r7, #12]
 800e910:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800e914:	68fb      	ldr	r3, [r7, #12]
 800e916:	6a1a      	ldr	r2, [r3, #32]
 800e918:	2301      	movs	r3, #1
 800e91a:	f7fd fa73 	bl	800be04 <disk_write>
 800e91e:	4603      	mov	r3, r0
 800e920:	2b00      	cmp	r3, #0
 800e922:	d004      	beq.n	800e92e <f_write+0x160>
 800e924:	68fb      	ldr	r3, [r7, #12]
 800e926:	2201      	movs	r2, #1
 800e928:	755a      	strb	r2, [r3, #21]
 800e92a:	2301      	movs	r3, #1
 800e92c:	e0df      	b.n	800eaee <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 800e92e:	68fb      	ldr	r3, [r7, #12]
 800e930:	7d1b      	ldrb	r3, [r3, #20]
 800e932:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800e936:	b2da      	uxtb	r2, r3
 800e938:	68fb      	ldr	r3, [r7, #12]
 800e93a:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800e93c:	693a      	ldr	r2, [r7, #16]
 800e93e:	68fb      	ldr	r3, [r7, #12]
 800e940:	69db      	ldr	r3, [r3, #28]
 800e942:	4619      	mov	r1, r3
 800e944:	4610      	mov	r0, r2
 800e946:	f7fd fdeb 	bl	800c520 <clust2sect>
 800e94a:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800e94c:	697b      	ldr	r3, [r7, #20]
 800e94e:	2b00      	cmp	r3, #0
 800e950:	d104      	bne.n	800e95c <f_write+0x18e>
 800e952:	68fb      	ldr	r3, [r7, #12]
 800e954:	2202      	movs	r2, #2
 800e956:	755a      	strb	r2, [r3, #21]
 800e958:	2302      	movs	r3, #2
 800e95a:	e0c8      	b.n	800eaee <f_write+0x320>
			sect += csect;
 800e95c:	697a      	ldr	r2, [r7, #20]
 800e95e:	69bb      	ldr	r3, [r7, #24]
 800e960:	4413      	add	r3, r2
 800e962:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800e964:	693b      	ldr	r3, [r7, #16]
 800e966:	899b      	ldrh	r3, [r3, #12]
 800e968:	461a      	mov	r2, r3
 800e96a:	687b      	ldr	r3, [r7, #4]
 800e96c:	fbb3 f3f2 	udiv	r3, r3, r2
 800e970:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800e972:	6a3b      	ldr	r3, [r7, #32]
 800e974:	2b00      	cmp	r3, #0
 800e976:	d043      	beq.n	800ea00 <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800e978:	69ba      	ldr	r2, [r7, #24]
 800e97a:	6a3b      	ldr	r3, [r7, #32]
 800e97c:	4413      	add	r3, r2
 800e97e:	693a      	ldr	r2, [r7, #16]
 800e980:	8952      	ldrh	r2, [r2, #10]
 800e982:	4293      	cmp	r3, r2
 800e984:	d905      	bls.n	800e992 <f_write+0x1c4>
					cc = fs->csize - csect;
 800e986:	693b      	ldr	r3, [r7, #16]
 800e988:	895b      	ldrh	r3, [r3, #10]
 800e98a:	461a      	mov	r2, r3
 800e98c:	69bb      	ldr	r3, [r7, #24]
 800e98e:	1ad3      	subs	r3, r2, r3
 800e990:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800e992:	693b      	ldr	r3, [r7, #16]
 800e994:	7858      	ldrb	r0, [r3, #1]
 800e996:	6a3b      	ldr	r3, [r7, #32]
 800e998:	697a      	ldr	r2, [r7, #20]
 800e99a:	69f9      	ldr	r1, [r7, #28]
 800e99c:	f7fd fa32 	bl	800be04 <disk_write>
 800e9a0:	4603      	mov	r3, r0
 800e9a2:	2b00      	cmp	r3, #0
 800e9a4:	d004      	beq.n	800e9b0 <f_write+0x1e2>
 800e9a6:	68fb      	ldr	r3, [r7, #12]
 800e9a8:	2201      	movs	r2, #1
 800e9aa:	755a      	strb	r2, [r3, #21]
 800e9ac:	2301      	movs	r3, #1
 800e9ae:	e09e      	b.n	800eaee <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800e9b0:	68fb      	ldr	r3, [r7, #12]
 800e9b2:	6a1a      	ldr	r2, [r3, #32]
 800e9b4:	697b      	ldr	r3, [r7, #20]
 800e9b6:	1ad3      	subs	r3, r2, r3
 800e9b8:	6a3a      	ldr	r2, [r7, #32]
 800e9ba:	429a      	cmp	r2, r3
 800e9bc:	d918      	bls.n	800e9f0 <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800e9be:	68fb      	ldr	r3, [r7, #12]
 800e9c0:	f103 0030 	add.w	r0, r3, #48	@ 0x30
 800e9c4:	68fb      	ldr	r3, [r7, #12]
 800e9c6:	6a1a      	ldr	r2, [r3, #32]
 800e9c8:	697b      	ldr	r3, [r7, #20]
 800e9ca:	1ad3      	subs	r3, r2, r3
 800e9cc:	693a      	ldr	r2, [r7, #16]
 800e9ce:	8992      	ldrh	r2, [r2, #12]
 800e9d0:	fb02 f303 	mul.w	r3, r2, r3
 800e9d4:	69fa      	ldr	r2, [r7, #28]
 800e9d6:	18d1      	adds	r1, r2, r3
 800e9d8:	693b      	ldr	r3, [r7, #16]
 800e9da:	899b      	ldrh	r3, [r3, #12]
 800e9dc:	461a      	mov	r2, r3
 800e9de:	f7fd fad2 	bl	800bf86 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800e9e2:	68fb      	ldr	r3, [r7, #12]
 800e9e4:	7d1b      	ldrb	r3, [r3, #20]
 800e9e6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800e9ea:	b2da      	uxtb	r2, r3
 800e9ec:	68fb      	ldr	r3, [r7, #12]
 800e9ee:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800e9f0:	693b      	ldr	r3, [r7, #16]
 800e9f2:	899b      	ldrh	r3, [r3, #12]
 800e9f4:	461a      	mov	r2, r3
 800e9f6:	6a3b      	ldr	r3, [r7, #32]
 800e9f8:	fb02 f303 	mul.w	r3, r2, r3
 800e9fc:	627b      	str	r3, [r7, #36]	@ 0x24
				continue;
 800e9fe:	e04b      	b.n	800ea98 <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800ea00:	68fb      	ldr	r3, [r7, #12]
 800ea02:	6a1b      	ldr	r3, [r3, #32]
 800ea04:	697a      	ldr	r2, [r7, #20]
 800ea06:	429a      	cmp	r2, r3
 800ea08:	d016      	beq.n	800ea38 <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 800ea0a:	68fb      	ldr	r3, [r7, #12]
 800ea0c:	699a      	ldr	r2, [r3, #24]
 800ea0e:	68fb      	ldr	r3, [r7, #12]
 800ea10:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800ea12:	429a      	cmp	r2, r3
 800ea14:	d210      	bcs.n	800ea38 <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800ea16:	693b      	ldr	r3, [r7, #16]
 800ea18:	7858      	ldrb	r0, [r3, #1]
 800ea1a:	68fb      	ldr	r3, [r7, #12]
 800ea1c:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800ea20:	2301      	movs	r3, #1
 800ea22:	697a      	ldr	r2, [r7, #20]
 800ea24:	f7fd f9ce 	bl	800bdc4 <disk_read>
 800ea28:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800ea2a:	2b00      	cmp	r3, #0
 800ea2c:	d004      	beq.n	800ea38 <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 800ea2e:	68fb      	ldr	r3, [r7, #12]
 800ea30:	2201      	movs	r2, #1
 800ea32:	755a      	strb	r2, [r3, #21]
 800ea34:	2301      	movs	r3, #1
 800ea36:	e05a      	b.n	800eaee <f_write+0x320>
			}
#endif
			fp->sect = sect;
 800ea38:	68fb      	ldr	r3, [r7, #12]
 800ea3a:	697a      	ldr	r2, [r7, #20]
 800ea3c:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800ea3e:	693b      	ldr	r3, [r7, #16]
 800ea40:	899b      	ldrh	r3, [r3, #12]
 800ea42:	4618      	mov	r0, r3
 800ea44:	68fb      	ldr	r3, [r7, #12]
 800ea46:	699b      	ldr	r3, [r3, #24]
 800ea48:	693a      	ldr	r2, [r7, #16]
 800ea4a:	8992      	ldrh	r2, [r2, #12]
 800ea4c:	fbb3 f1f2 	udiv	r1, r3, r2
 800ea50:	fb01 f202 	mul.w	r2, r1, r2
 800ea54:	1a9b      	subs	r3, r3, r2
 800ea56:	1ac3      	subs	r3, r0, r3
 800ea58:	627b      	str	r3, [r7, #36]	@ 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800ea5a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ea5c:	687b      	ldr	r3, [r7, #4]
 800ea5e:	429a      	cmp	r2, r3
 800ea60:	d901      	bls.n	800ea66 <f_write+0x298>
 800ea62:	687b      	ldr	r3, [r7, #4]
 800ea64:	627b      	str	r3, [r7, #36]	@ 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800ea66:	68fb      	ldr	r3, [r7, #12]
 800ea68:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800ea6c:	68fb      	ldr	r3, [r7, #12]
 800ea6e:	699b      	ldr	r3, [r3, #24]
 800ea70:	693a      	ldr	r2, [r7, #16]
 800ea72:	8992      	ldrh	r2, [r2, #12]
 800ea74:	fbb3 f0f2 	udiv	r0, r3, r2
 800ea78:	fb00 f202 	mul.w	r2, r0, r2
 800ea7c:	1a9b      	subs	r3, r3, r2
 800ea7e:	440b      	add	r3, r1
 800ea80:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ea82:	69f9      	ldr	r1, [r7, #28]
 800ea84:	4618      	mov	r0, r3
 800ea86:	f7fd fa7e 	bl	800bf86 <mem_cpy>
		fp->flag |= FA_DIRTY;
 800ea8a:	68fb      	ldr	r3, [r7, #12]
 800ea8c:	7d1b      	ldrb	r3, [r3, #20]
 800ea8e:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800ea92:	b2da      	uxtb	r2, r3
 800ea94:	68fb      	ldr	r3, [r7, #12]
 800ea96:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800ea98:	69fa      	ldr	r2, [r7, #28]
 800ea9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ea9c:	4413      	add	r3, r2
 800ea9e:	61fb      	str	r3, [r7, #28]
 800eaa0:	68fb      	ldr	r3, [r7, #12]
 800eaa2:	699a      	ldr	r2, [r3, #24]
 800eaa4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eaa6:	441a      	add	r2, r3
 800eaa8:	68fb      	ldr	r3, [r7, #12]
 800eaaa:	619a      	str	r2, [r3, #24]
 800eaac:	68fb      	ldr	r3, [r7, #12]
 800eaae:	68da      	ldr	r2, [r3, #12]
 800eab0:	68fb      	ldr	r3, [r7, #12]
 800eab2:	699b      	ldr	r3, [r3, #24]
 800eab4:	429a      	cmp	r2, r3
 800eab6:	bf38      	it	cc
 800eab8:	461a      	movcc	r2, r3
 800eaba:	68fb      	ldr	r3, [r7, #12]
 800eabc:	60da      	str	r2, [r3, #12]
 800eabe:	683b      	ldr	r3, [r7, #0]
 800eac0:	681a      	ldr	r2, [r3, #0]
 800eac2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eac4:	441a      	add	r2, r3
 800eac6:	683b      	ldr	r3, [r7, #0]
 800eac8:	601a      	str	r2, [r3, #0]
 800eaca:	687a      	ldr	r2, [r7, #4]
 800eacc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eace:	1ad3      	subs	r3, r2, r3
 800ead0:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800ead2:	687b      	ldr	r3, [r7, #4]
 800ead4:	2b00      	cmp	r3, #0
 800ead6:	f47f aeb5 	bne.w	800e844 <f_write+0x76>
 800eada:	e000      	b.n	800eade <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800eadc:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800eade:	68fb      	ldr	r3, [r7, #12]
 800eae0:	7d1b      	ldrb	r3, [r3, #20]
 800eae2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800eae6:	b2da      	uxtb	r2, r3
 800eae8:	68fb      	ldr	r3, [r7, #12]
 800eaea:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800eaec:	2300      	movs	r3, #0
}
 800eaee:	4618      	mov	r0, r3
 800eaf0:	3730      	adds	r7, #48	@ 0x30
 800eaf2:	46bd      	mov	sp, r7
 800eaf4:	bd80      	pop	{r7, pc}

0800eaf6 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800eaf6:	b580      	push	{r7, lr}
 800eaf8:	b086      	sub	sp, #24
 800eafa:	af00      	add	r7, sp, #0
 800eafc:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800eafe:	687b      	ldr	r3, [r7, #4]
 800eb00:	f107 0208 	add.w	r2, r7, #8
 800eb04:	4611      	mov	r1, r2
 800eb06:	4618      	mov	r0, r3
 800eb08:	f7ff fabe 	bl	800e088 <validate>
 800eb0c:	4603      	mov	r3, r0
 800eb0e:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800eb10:	7dfb      	ldrb	r3, [r7, #23]
 800eb12:	2b00      	cmp	r3, #0
 800eb14:	d168      	bne.n	800ebe8 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800eb16:	687b      	ldr	r3, [r7, #4]
 800eb18:	7d1b      	ldrb	r3, [r3, #20]
 800eb1a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800eb1e:	2b00      	cmp	r3, #0
 800eb20:	d062      	beq.n	800ebe8 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800eb22:	687b      	ldr	r3, [r7, #4]
 800eb24:	7d1b      	ldrb	r3, [r3, #20]
 800eb26:	b25b      	sxtb	r3, r3
 800eb28:	2b00      	cmp	r3, #0
 800eb2a:	da15      	bge.n	800eb58 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800eb2c:	68bb      	ldr	r3, [r7, #8]
 800eb2e:	7858      	ldrb	r0, [r3, #1]
 800eb30:	687b      	ldr	r3, [r7, #4]
 800eb32:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800eb36:	687b      	ldr	r3, [r7, #4]
 800eb38:	6a1a      	ldr	r2, [r3, #32]
 800eb3a:	2301      	movs	r3, #1
 800eb3c:	f7fd f962 	bl	800be04 <disk_write>
 800eb40:	4603      	mov	r3, r0
 800eb42:	2b00      	cmp	r3, #0
 800eb44:	d001      	beq.n	800eb4a <f_sync+0x54>
 800eb46:	2301      	movs	r3, #1
 800eb48:	e04f      	b.n	800ebea <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800eb4a:	687b      	ldr	r3, [r7, #4]
 800eb4c:	7d1b      	ldrb	r3, [r3, #20]
 800eb4e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800eb52:	b2da      	uxtb	r2, r3
 800eb54:	687b      	ldr	r3, [r7, #4]
 800eb56:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800eb58:	f7fc fbac 	bl	800b2b4 <get_fattime>
 800eb5c:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800eb5e:	68ba      	ldr	r2, [r7, #8]
 800eb60:	687b      	ldr	r3, [r7, #4]
 800eb62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800eb64:	4619      	mov	r1, r3
 800eb66:	4610      	mov	r0, r2
 800eb68:	f7fd fc3c 	bl	800c3e4 <move_window>
 800eb6c:	4603      	mov	r3, r0
 800eb6e:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800eb70:	7dfb      	ldrb	r3, [r7, #23]
 800eb72:	2b00      	cmp	r3, #0
 800eb74:	d138      	bne.n	800ebe8 <f_sync+0xf2>
					dir = fp->dir_ptr;
 800eb76:	687b      	ldr	r3, [r7, #4]
 800eb78:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800eb7a:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800eb7c:	68fb      	ldr	r3, [r7, #12]
 800eb7e:	330b      	adds	r3, #11
 800eb80:	781a      	ldrb	r2, [r3, #0]
 800eb82:	68fb      	ldr	r3, [r7, #12]
 800eb84:	330b      	adds	r3, #11
 800eb86:	f042 0220 	orr.w	r2, r2, #32
 800eb8a:	b2d2      	uxtb	r2, r2
 800eb8c:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800eb8e:	687b      	ldr	r3, [r7, #4]
 800eb90:	6818      	ldr	r0, [r3, #0]
 800eb92:	687b      	ldr	r3, [r7, #4]
 800eb94:	689b      	ldr	r3, [r3, #8]
 800eb96:	461a      	mov	r2, r3
 800eb98:	68f9      	ldr	r1, [r7, #12]
 800eb9a:	f7fe f9c7 	bl	800cf2c <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800eb9e:	68fb      	ldr	r3, [r7, #12]
 800eba0:	f103 021c 	add.w	r2, r3, #28
 800eba4:	687b      	ldr	r3, [r7, #4]
 800eba6:	68db      	ldr	r3, [r3, #12]
 800eba8:	4619      	mov	r1, r3
 800ebaa:	4610      	mov	r0, r2
 800ebac:	f7fd f9bf 	bl	800bf2e <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800ebb0:	68fb      	ldr	r3, [r7, #12]
 800ebb2:	3316      	adds	r3, #22
 800ebb4:	6939      	ldr	r1, [r7, #16]
 800ebb6:	4618      	mov	r0, r3
 800ebb8:	f7fd f9b9 	bl	800bf2e <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800ebbc:	68fb      	ldr	r3, [r7, #12]
 800ebbe:	3312      	adds	r3, #18
 800ebc0:	2100      	movs	r1, #0
 800ebc2:	4618      	mov	r0, r3
 800ebc4:	f7fd f998 	bl	800bef8 <st_word>
					fs->wflag = 1;
 800ebc8:	68bb      	ldr	r3, [r7, #8]
 800ebca:	2201      	movs	r2, #1
 800ebcc:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800ebce:	68bb      	ldr	r3, [r7, #8]
 800ebd0:	4618      	mov	r0, r3
 800ebd2:	f7fd fc35 	bl	800c440 <sync_fs>
 800ebd6:	4603      	mov	r3, r0
 800ebd8:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800ebda:	687b      	ldr	r3, [r7, #4]
 800ebdc:	7d1b      	ldrb	r3, [r3, #20]
 800ebde:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800ebe2:	b2da      	uxtb	r2, r3
 800ebe4:	687b      	ldr	r3, [r7, #4]
 800ebe6:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800ebe8:	7dfb      	ldrb	r3, [r7, #23]
}
 800ebea:	4618      	mov	r0, r3
 800ebec:	3718      	adds	r7, #24
 800ebee:	46bd      	mov	sp, r7
 800ebf0:	bd80      	pop	{r7, pc}

0800ebf2 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800ebf2:	b580      	push	{r7, lr}
 800ebf4:	b084      	sub	sp, #16
 800ebf6:	af00      	add	r7, sp, #0
 800ebf8:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800ebfa:	6878      	ldr	r0, [r7, #4]
 800ebfc:	f7ff ff7b 	bl	800eaf6 <f_sync>
 800ec00:	4603      	mov	r3, r0
 800ec02:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800ec04:	7bfb      	ldrb	r3, [r7, #15]
 800ec06:	2b00      	cmp	r3, #0
 800ec08:	d118      	bne.n	800ec3c <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800ec0a:	687b      	ldr	r3, [r7, #4]
 800ec0c:	f107 0208 	add.w	r2, r7, #8
 800ec10:	4611      	mov	r1, r2
 800ec12:	4618      	mov	r0, r3
 800ec14:	f7ff fa38 	bl	800e088 <validate>
 800ec18:	4603      	mov	r3, r0
 800ec1a:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800ec1c:	7bfb      	ldrb	r3, [r7, #15]
 800ec1e:	2b00      	cmp	r3, #0
 800ec20:	d10c      	bne.n	800ec3c <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800ec22:	687b      	ldr	r3, [r7, #4]
 800ec24:	691b      	ldr	r3, [r3, #16]
 800ec26:	4618      	mov	r0, r3
 800ec28:	f7fd fb38 	bl	800c29c <dec_lock>
 800ec2c:	4603      	mov	r3, r0
 800ec2e:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800ec30:	7bfb      	ldrb	r3, [r7, #15]
 800ec32:	2b00      	cmp	r3, #0
 800ec34:	d102      	bne.n	800ec3c <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800ec36:	687b      	ldr	r3, [r7, #4]
 800ec38:	2200      	movs	r2, #0
 800ec3a:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800ec3c:	7bfb      	ldrb	r3, [r7, #15]
}
 800ec3e:	4618      	mov	r0, r3
 800ec40:	3710      	adds	r7, #16
 800ec42:	46bd      	mov	sp, r7
 800ec44:	bd80      	pop	{r7, pc}

0800ec46 <f_getfree>:
FRESULT f_getfree (
	const TCHAR* path,	/* Path name of the logical drive number */
	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
	FATFS** fatfs		/* Pointer to return pointer to corresponding file system object */
)
{
 800ec46:	b580      	push	{r7, lr}
 800ec48:	b092      	sub	sp, #72	@ 0x48
 800ec4a:	af00      	add	r7, sp, #0
 800ec4c:	60f8      	str	r0, [r7, #12]
 800ec4e:	60b9      	str	r1, [r7, #8]
 800ec50:	607a      	str	r2, [r7, #4]
	BYTE *p;
	_FDID obj;


	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 800ec52:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 800ec56:	f107 030c 	add.w	r3, r7, #12
 800ec5a:	2200      	movs	r2, #0
 800ec5c:	4618      	mov	r0, r3
 800ec5e:	f7fe ff8d 	bl	800db7c <find_volume>
 800ec62:	4603      	mov	r3, r0
 800ec64:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
	if (res == FR_OK) {
 800ec68:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800ec6c:	2b00      	cmp	r3, #0
 800ec6e:	f040 8099 	bne.w	800eda4 <f_getfree+0x15e>
		*fatfs = fs;				/* Return ptr to the fs object */
 800ec72:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800ec74:	687b      	ldr	r3, [r7, #4]
 800ec76:	601a      	str	r2, [r3, #0]
		/* If free_clst is valid, return it without full cluster scan */
		if (fs->free_clst <= fs->n_fatent - 2) {
 800ec78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ec7a:	699a      	ldr	r2, [r3, #24]
 800ec7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ec7e:	69db      	ldr	r3, [r3, #28]
 800ec80:	3b02      	subs	r3, #2
 800ec82:	429a      	cmp	r2, r3
 800ec84:	d804      	bhi.n	800ec90 <f_getfree+0x4a>
			*nclst = fs->free_clst;
 800ec86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ec88:	699a      	ldr	r2, [r3, #24]
 800ec8a:	68bb      	ldr	r3, [r7, #8]
 800ec8c:	601a      	str	r2, [r3, #0]
 800ec8e:	e089      	b.n	800eda4 <f_getfree+0x15e>
		} else {
			/* Get number of free clusters */
			nfree = 0;
 800ec90:	2300      	movs	r3, #0
 800ec92:	643b      	str	r3, [r7, #64]	@ 0x40
			if (fs->fs_type == FS_FAT12) {	/* FAT12: Sector unalighed FAT entries */
 800ec94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ec96:	781b      	ldrb	r3, [r3, #0]
 800ec98:	2b01      	cmp	r3, #1
 800ec9a:	d128      	bne.n	800ecee <f_getfree+0xa8>
				clst = 2; obj.fs = fs;
 800ec9c:	2302      	movs	r3, #2
 800ec9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800eca0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800eca2:	617b      	str	r3, [r7, #20]
				do {
					stat = get_fat(&obj, clst);
 800eca4:	f107 0314 	add.w	r3, r7, #20
 800eca8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800ecaa:	4618      	mov	r0, r3
 800ecac:	f7fd fc57 	bl	800c55e <get_fat>
 800ecb0:	62f8      	str	r0, [r7, #44]	@ 0x2c
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 800ecb2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ecb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ecb8:	d103      	bne.n	800ecc2 <f_getfree+0x7c>
 800ecba:	2301      	movs	r3, #1
 800ecbc:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 800ecc0:	e063      	b.n	800ed8a <f_getfree+0x144>
					if (stat == 1) { res = FR_INT_ERR; break; }
 800ecc2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ecc4:	2b01      	cmp	r3, #1
 800ecc6:	d103      	bne.n	800ecd0 <f_getfree+0x8a>
 800ecc8:	2302      	movs	r3, #2
 800ecca:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 800ecce:	e05c      	b.n	800ed8a <f_getfree+0x144>
					if (stat == 0) nfree++;
 800ecd0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ecd2:	2b00      	cmp	r3, #0
 800ecd4:	d102      	bne.n	800ecdc <f_getfree+0x96>
 800ecd6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ecd8:	3301      	adds	r3, #1
 800ecda:	643b      	str	r3, [r7, #64]	@ 0x40
				} while (++clst < fs->n_fatent);
 800ecdc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ecde:	3301      	adds	r3, #1
 800ece0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ece2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ece4:	69db      	ldr	r3, [r3, #28]
 800ece6:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800ece8:	429a      	cmp	r2, r3
 800ecea:	d3db      	bcc.n	800eca4 <f_getfree+0x5e>
 800ecec:	e04d      	b.n	800ed8a <f_getfree+0x144>
						i = (i + 1) % SS(fs);
					} while (clst);
				} else
#endif
				{	/* FAT16/32: Sector alighed FAT entries */
					clst = fs->n_fatent; sect = fs->fatbase;
 800ecee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ecf0:	69db      	ldr	r3, [r3, #28]
 800ecf2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ecf4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ecf6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ecf8:	63bb      	str	r3, [r7, #56]	@ 0x38
					i = 0; p = 0;
 800ecfa:	2300      	movs	r3, #0
 800ecfc:	637b      	str	r3, [r7, #52]	@ 0x34
 800ecfe:	2300      	movs	r3, #0
 800ed00:	633b      	str	r3, [r7, #48]	@ 0x30
					do {
						if (i == 0) {
 800ed02:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ed04:	2b00      	cmp	r3, #0
 800ed06:	d113      	bne.n	800ed30 <f_getfree+0xea>
							res = move_window(fs, sect++);
 800ed08:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ed0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ed0c:	1c5a      	adds	r2, r3, #1
 800ed0e:	63ba      	str	r2, [r7, #56]	@ 0x38
 800ed10:	4619      	mov	r1, r3
 800ed12:	f7fd fb67 	bl	800c3e4 <move_window>
 800ed16:	4603      	mov	r3, r0
 800ed18:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
							if (res != FR_OK) break;
 800ed1c:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800ed20:	2b00      	cmp	r3, #0
 800ed22:	d131      	bne.n	800ed88 <f_getfree+0x142>
							p = fs->win;
 800ed24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ed26:	3338      	adds	r3, #56	@ 0x38
 800ed28:	633b      	str	r3, [r7, #48]	@ 0x30
							i = SS(fs);
 800ed2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ed2c:	899b      	ldrh	r3, [r3, #12]
 800ed2e:	637b      	str	r3, [r7, #52]	@ 0x34
						}
						if (fs->fs_type == FS_FAT16) {
 800ed30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ed32:	781b      	ldrb	r3, [r3, #0]
 800ed34:	2b02      	cmp	r3, #2
 800ed36:	d10f      	bne.n	800ed58 <f_getfree+0x112>
							if (ld_word(p) == 0) nfree++;
 800ed38:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800ed3a:	f7fd f8a1 	bl	800be80 <ld_word>
 800ed3e:	4603      	mov	r3, r0
 800ed40:	2b00      	cmp	r3, #0
 800ed42:	d102      	bne.n	800ed4a <f_getfree+0x104>
 800ed44:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ed46:	3301      	adds	r3, #1
 800ed48:	643b      	str	r3, [r7, #64]	@ 0x40
							p += 2; i -= 2;
 800ed4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ed4c:	3302      	adds	r3, #2
 800ed4e:	633b      	str	r3, [r7, #48]	@ 0x30
 800ed50:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ed52:	3b02      	subs	r3, #2
 800ed54:	637b      	str	r3, [r7, #52]	@ 0x34
 800ed56:	e010      	b.n	800ed7a <f_getfree+0x134>
						} else {
							if ((ld_dword(p) & 0x0FFFFFFF) == 0) nfree++;
 800ed58:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800ed5a:	f7fd f8aa 	bl	800beb2 <ld_dword>
 800ed5e:	4603      	mov	r3, r0
 800ed60:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800ed64:	2b00      	cmp	r3, #0
 800ed66:	d102      	bne.n	800ed6e <f_getfree+0x128>
 800ed68:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ed6a:	3301      	adds	r3, #1
 800ed6c:	643b      	str	r3, [r7, #64]	@ 0x40
							p += 4; i -= 4;
 800ed6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ed70:	3304      	adds	r3, #4
 800ed72:	633b      	str	r3, [r7, #48]	@ 0x30
 800ed74:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ed76:	3b04      	subs	r3, #4
 800ed78:	637b      	str	r3, [r7, #52]	@ 0x34
						}
					} while (--clst);
 800ed7a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ed7c:	3b01      	subs	r3, #1
 800ed7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ed80:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ed82:	2b00      	cmp	r3, #0
 800ed84:	d1bd      	bne.n	800ed02 <f_getfree+0xbc>
 800ed86:	e000      	b.n	800ed8a <f_getfree+0x144>
							if (res != FR_OK) break;
 800ed88:	bf00      	nop
				}
			}
			*nclst = nfree;			/* Return the free clusters */
 800ed8a:	68bb      	ldr	r3, [r7, #8]
 800ed8c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800ed8e:	601a      	str	r2, [r3, #0]
			fs->free_clst = nfree;	/* Now free_clst is valid */
 800ed90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ed92:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800ed94:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;		/* FSInfo is to be updated */
 800ed96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ed98:	791a      	ldrb	r2, [r3, #4]
 800ed9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ed9c:	f042 0201 	orr.w	r2, r2, #1
 800eda0:	b2d2      	uxtb	r2, r2
 800eda2:	711a      	strb	r2, [r3, #4]
		}
	}

	LEAVE_FF(fs, res);
 800eda4:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 800eda8:	4618      	mov	r0, r3
 800edaa:	3748      	adds	r7, #72	@ 0x48
 800edac:	46bd      	mov	sp, r7
 800edae:	bd80      	pop	{r7, pc}

0800edb0 <f_gets>:
TCHAR* f_gets (
	TCHAR* buff,	/* Pointer to the string buffer to read */
	int len,		/* Size of string buffer (characters) */
	FIL* fp			/* Pointer to the file object */
)
{
 800edb0:	b580      	push	{r7, lr}
 800edb2:	b088      	sub	sp, #32
 800edb4:	af00      	add	r7, sp, #0
 800edb6:	60f8      	str	r0, [r7, #12]
 800edb8:	60b9      	str	r1, [r7, #8]
 800edba:	607a      	str	r2, [r7, #4]
	int n = 0;
 800edbc:	2300      	movs	r3, #0
 800edbe:	61fb      	str	r3, [r7, #28]
	TCHAR c, *p = buff;
 800edc0:	68fb      	ldr	r3, [r7, #12]
 800edc2:	61bb      	str	r3, [r7, #24]
	BYTE s[2];
	UINT rc;


	while (n < len - 1) {	/* Read characters until buffer gets filled */
 800edc4:	e01c      	b.n	800ee00 <f_gets+0x50>
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
#else						/* Read a character without conversion */
		f_read(fp, s, 1, &rc);
 800edc6:	f107 0310 	add.w	r3, r7, #16
 800edca:	f107 0114 	add.w	r1, r7, #20
 800edce:	2201      	movs	r2, #1
 800edd0:	6878      	ldr	r0, [r7, #4]
 800edd2:	f7ff fb9d 	bl	800e510 <f_read>
		if (rc != 1) break;
 800edd6:	693b      	ldr	r3, [r7, #16]
 800edd8:	2b01      	cmp	r3, #1
 800edda:	d117      	bne.n	800ee0c <f_gets+0x5c>
		c = s[0];
 800eddc:	7d3b      	ldrb	r3, [r7, #20]
 800edde:	75fb      	strb	r3, [r7, #23]
#endif
		if (_USE_STRFUNC == 2 && c == '\r') continue;	/* Strip '\r' */
 800ede0:	7dfb      	ldrb	r3, [r7, #23]
 800ede2:	2b0d      	cmp	r3, #13
 800ede4:	d00b      	beq.n	800edfe <f_gets+0x4e>
		*p++ = c;
 800ede6:	69bb      	ldr	r3, [r7, #24]
 800ede8:	1c5a      	adds	r2, r3, #1
 800edea:	61ba      	str	r2, [r7, #24]
 800edec:	7dfa      	ldrb	r2, [r7, #23]
 800edee:	701a      	strb	r2, [r3, #0]
		n++;
 800edf0:	69fb      	ldr	r3, [r7, #28]
 800edf2:	3301      	adds	r3, #1
 800edf4:	61fb      	str	r3, [r7, #28]
		if (c == '\n') break;		/* Break on EOL */
 800edf6:	7dfb      	ldrb	r3, [r7, #23]
 800edf8:	2b0a      	cmp	r3, #10
 800edfa:	d009      	beq.n	800ee10 <f_gets+0x60>
 800edfc:	e000      	b.n	800ee00 <f_gets+0x50>
		if (_USE_STRFUNC == 2 && c == '\r') continue;	/* Strip '\r' */
 800edfe:	bf00      	nop
	while (n < len - 1) {	/* Read characters until buffer gets filled */
 800ee00:	68bb      	ldr	r3, [r7, #8]
 800ee02:	3b01      	subs	r3, #1
 800ee04:	69fa      	ldr	r2, [r7, #28]
 800ee06:	429a      	cmp	r2, r3
 800ee08:	dbdd      	blt.n	800edc6 <f_gets+0x16>
 800ee0a:	e002      	b.n	800ee12 <f_gets+0x62>
		if (rc != 1) break;
 800ee0c:	bf00      	nop
 800ee0e:	e000      	b.n	800ee12 <f_gets+0x62>
		if (c == '\n') break;		/* Break on EOL */
 800ee10:	bf00      	nop
	}
	*p = 0;
 800ee12:	69bb      	ldr	r3, [r7, #24]
 800ee14:	2200      	movs	r2, #0
 800ee16:	701a      	strb	r2, [r3, #0]
	return n ? buff : 0;			/* When no data read (eof or error), return with error. */
 800ee18:	69fb      	ldr	r3, [r7, #28]
 800ee1a:	2b00      	cmp	r3, #0
 800ee1c:	d001      	beq.n	800ee22 <f_gets+0x72>
 800ee1e:	68fb      	ldr	r3, [r7, #12]
 800ee20:	e000      	b.n	800ee24 <f_gets+0x74>
 800ee22:	2300      	movs	r3, #0
}
 800ee24:	4618      	mov	r0, r3
 800ee26:	3720      	adds	r7, #32
 800ee28:	46bd      	mov	sp, r7
 800ee2a:	bd80      	pop	{r7, pc}

0800ee2c <putc_bfd>:
static
void putc_bfd (		/* Buffered write with code conversion */
	putbuff* pb,
	TCHAR c
)
{
 800ee2c:	b580      	push	{r7, lr}
 800ee2e:	b084      	sub	sp, #16
 800ee30:	af00      	add	r7, sp, #0
 800ee32:	6078      	str	r0, [r7, #4]
 800ee34:	460b      	mov	r3, r1
 800ee36:	70fb      	strb	r3, [r7, #3]
	UINT bw;
	int i;


	if (_USE_STRFUNC == 2 && c == '\n') {	 /* LF -> CRLF conversion */
 800ee38:	78fb      	ldrb	r3, [r7, #3]
 800ee3a:	2b0a      	cmp	r3, #10
 800ee3c:	d103      	bne.n	800ee46 <putc_bfd+0x1a>
		putc_bfd(pb, '\r');
 800ee3e:	210d      	movs	r1, #13
 800ee40:	6878      	ldr	r0, [r7, #4]
 800ee42:	f7ff fff3 	bl	800ee2c <putc_bfd>
	}

	i = pb->idx;		/* Write index of pb->buf[] */
 800ee46:	687b      	ldr	r3, [r7, #4]
 800ee48:	685b      	ldr	r3, [r3, #4]
 800ee4a:	60fb      	str	r3, [r7, #12]
	if (i < 0) return;
 800ee4c:	68fb      	ldr	r3, [r7, #12]
 800ee4e:	2b00      	cmp	r3, #0
 800ee50:	db25      	blt.n	800ee9e <putc_bfd+0x72>
	if (c >= 0x100)
		pb->buf[i++] = (BYTE)(c >> 8);
	pb->buf[i++] = (BYTE)c;
#endif
#else							/* Write a character without conversion */
	pb->buf[i++] = (BYTE)c;
 800ee52:	68fb      	ldr	r3, [r7, #12]
 800ee54:	1c5a      	adds	r2, r3, #1
 800ee56:	60fa      	str	r2, [r7, #12]
 800ee58:	687a      	ldr	r2, [r7, #4]
 800ee5a:	4413      	add	r3, r2
 800ee5c:	78fa      	ldrb	r2, [r7, #3]
 800ee5e:	731a      	strb	r2, [r3, #12]
#endif

	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 800ee60:	68fb      	ldr	r3, [r7, #12]
 800ee62:	2b3c      	cmp	r3, #60	@ 0x3c
 800ee64:	dd12      	ble.n	800ee8c <putc_bfd+0x60>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 800ee66:	687b      	ldr	r3, [r7, #4]
 800ee68:	6818      	ldr	r0, [r3, #0]
 800ee6a:	687b      	ldr	r3, [r7, #4]
 800ee6c:	f103 010c 	add.w	r1, r3, #12
 800ee70:	68fa      	ldr	r2, [r7, #12]
 800ee72:	f107 0308 	add.w	r3, r7, #8
 800ee76:	f7ff fcaa 	bl	800e7ce <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 800ee7a:	68ba      	ldr	r2, [r7, #8]
 800ee7c:	68fb      	ldr	r3, [r7, #12]
 800ee7e:	429a      	cmp	r2, r3
 800ee80:	d101      	bne.n	800ee86 <putc_bfd+0x5a>
 800ee82:	2300      	movs	r3, #0
 800ee84:	e001      	b.n	800ee8a <putc_bfd+0x5e>
 800ee86:	f04f 33ff 	mov.w	r3, #4294967295
 800ee8a:	60fb      	str	r3, [r7, #12]
	}
	pb->idx = i;
 800ee8c:	687b      	ldr	r3, [r7, #4]
 800ee8e:	68fa      	ldr	r2, [r7, #12]
 800ee90:	605a      	str	r2, [r3, #4]
	pb->nchr++;
 800ee92:	687b      	ldr	r3, [r7, #4]
 800ee94:	689b      	ldr	r3, [r3, #8]
 800ee96:	1c5a      	adds	r2, r3, #1
 800ee98:	687b      	ldr	r3, [r7, #4]
 800ee9a:	609a      	str	r2, [r3, #8]
 800ee9c:	e000      	b.n	800eea0 <putc_bfd+0x74>
	if (i < 0) return;
 800ee9e:	bf00      	nop
}
 800eea0:	3710      	adds	r7, #16
 800eea2:	46bd      	mov	sp, r7
 800eea4:	bd80      	pop	{r7, pc}

0800eea6 <putc_flush>:

static
int putc_flush (		/* Flush left characters in the buffer */
	putbuff* pb
)
{
 800eea6:	b580      	push	{r7, lr}
 800eea8:	b084      	sub	sp, #16
 800eeaa:	af00      	add	r7, sp, #0
 800eeac:	6078      	str	r0, [r7, #4]
	UINT nw;

	if (   pb->idx >= 0	/* Flush buffered characters to the file */
 800eeae:	687b      	ldr	r3, [r7, #4]
 800eeb0:	685b      	ldr	r3, [r3, #4]
 800eeb2:	2b00      	cmp	r3, #0
 800eeb4:	db16      	blt.n	800eee4 <putc_flush+0x3e>
		&& f_write(pb->fp, pb->buf, (UINT)pb->idx, &nw) == FR_OK
 800eeb6:	687b      	ldr	r3, [r7, #4]
 800eeb8:	6818      	ldr	r0, [r3, #0]
 800eeba:	687b      	ldr	r3, [r7, #4]
 800eebc:	f103 010c 	add.w	r1, r3, #12
 800eec0:	687b      	ldr	r3, [r7, #4]
 800eec2:	685b      	ldr	r3, [r3, #4]
 800eec4:	461a      	mov	r2, r3
 800eec6:	f107 030c 	add.w	r3, r7, #12
 800eeca:	f7ff fc80 	bl	800e7ce <f_write>
 800eece:	4603      	mov	r3, r0
 800eed0:	2b00      	cmp	r3, #0
 800eed2:	d107      	bne.n	800eee4 <putc_flush+0x3e>
		&& (UINT)pb->idx == nw) return pb->nchr;
 800eed4:	687b      	ldr	r3, [r7, #4]
 800eed6:	685b      	ldr	r3, [r3, #4]
 800eed8:	68fa      	ldr	r2, [r7, #12]
 800eeda:	4293      	cmp	r3, r2
 800eedc:	d102      	bne.n	800eee4 <putc_flush+0x3e>
 800eede:	687b      	ldr	r3, [r7, #4]
 800eee0:	689b      	ldr	r3, [r3, #8]
 800eee2:	e001      	b.n	800eee8 <putc_flush+0x42>
	return EOF;
 800eee4:	f04f 33ff 	mov.w	r3, #4294967295
}
 800eee8:	4618      	mov	r0, r3
 800eeea:	3710      	adds	r7, #16
 800eeec:	46bd      	mov	sp, r7
 800eeee:	bd80      	pop	{r7, pc}

0800eef0 <putc_init>:
static
void putc_init (		/* Initialize write buffer */
	putbuff* pb,
	FIL* fp
)
{
 800eef0:	b480      	push	{r7}
 800eef2:	b083      	sub	sp, #12
 800eef4:	af00      	add	r7, sp, #0
 800eef6:	6078      	str	r0, [r7, #4]
 800eef8:	6039      	str	r1, [r7, #0]
	pb->fp = fp;
 800eefa:	687b      	ldr	r3, [r7, #4]
 800eefc:	683a      	ldr	r2, [r7, #0]
 800eefe:	601a      	str	r2, [r3, #0]
	pb->nchr = pb->idx = 0;
 800ef00:	687b      	ldr	r3, [r7, #4]
 800ef02:	2200      	movs	r2, #0
 800ef04:	605a      	str	r2, [r3, #4]
 800ef06:	687b      	ldr	r3, [r7, #4]
 800ef08:	685a      	ldr	r2, [r3, #4]
 800ef0a:	687b      	ldr	r3, [r7, #4]
 800ef0c:	609a      	str	r2, [r3, #8]
}
 800ef0e:	bf00      	nop
 800ef10:	370c      	adds	r7, #12
 800ef12:	46bd      	mov	sp, r7
 800ef14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef18:	4770      	bx	lr

0800ef1a <f_puts>:

int f_puts (
	const TCHAR* str,	/* Pointer to the string to be output */
	FIL* fp				/* Pointer to the file object */
)
{
 800ef1a:	b580      	push	{r7, lr}
 800ef1c:	b096      	sub	sp, #88	@ 0x58
 800ef1e:	af00      	add	r7, sp, #0
 800ef20:	6078      	str	r0, [r7, #4]
 800ef22:	6039      	str	r1, [r7, #0]
	putbuff pb;


	putc_init(&pb, fp);
 800ef24:	f107 030c 	add.w	r3, r7, #12
 800ef28:	6839      	ldr	r1, [r7, #0]
 800ef2a:	4618      	mov	r0, r3
 800ef2c:	f7ff ffe0 	bl	800eef0 <putc_init>
	while (*str) putc_bfd(&pb, *str++);		/* Put the string */
 800ef30:	e009      	b.n	800ef46 <f_puts+0x2c>
 800ef32:	687b      	ldr	r3, [r7, #4]
 800ef34:	1c5a      	adds	r2, r3, #1
 800ef36:	607a      	str	r2, [r7, #4]
 800ef38:	781a      	ldrb	r2, [r3, #0]
 800ef3a:	f107 030c 	add.w	r3, r7, #12
 800ef3e:	4611      	mov	r1, r2
 800ef40:	4618      	mov	r0, r3
 800ef42:	f7ff ff73 	bl	800ee2c <putc_bfd>
 800ef46:	687b      	ldr	r3, [r7, #4]
 800ef48:	781b      	ldrb	r3, [r3, #0]
 800ef4a:	2b00      	cmp	r3, #0
 800ef4c:	d1f1      	bne.n	800ef32 <f_puts+0x18>
	return putc_flush(&pb);
 800ef4e:	f107 030c 	add.w	r3, r7, #12
 800ef52:	4618      	mov	r0, r3
 800ef54:	f7ff ffa7 	bl	800eea6 <putc_flush>
 800ef58:	4603      	mov	r3, r0
}
 800ef5a:	4618      	mov	r0, r3
 800ef5c:	3758      	adds	r7, #88	@ 0x58
 800ef5e:	46bd      	mov	sp, r7
 800ef60:	bd80      	pop	{r7, pc}
	...

0800ef64 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800ef64:	b480      	push	{r7}
 800ef66:	b087      	sub	sp, #28
 800ef68:	af00      	add	r7, sp, #0
 800ef6a:	60f8      	str	r0, [r7, #12]
 800ef6c:	60b9      	str	r1, [r7, #8]
 800ef6e:	4613      	mov	r3, r2
 800ef70:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800ef72:	2301      	movs	r3, #1
 800ef74:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800ef76:	2300      	movs	r3, #0
 800ef78:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800ef7a:	4b1f      	ldr	r3, [pc, #124]	@ (800eff8 <FATFS_LinkDriverEx+0x94>)
 800ef7c:	7a5b      	ldrb	r3, [r3, #9]
 800ef7e:	b2db      	uxtb	r3, r3
 800ef80:	2b00      	cmp	r3, #0
 800ef82:	d131      	bne.n	800efe8 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800ef84:	4b1c      	ldr	r3, [pc, #112]	@ (800eff8 <FATFS_LinkDriverEx+0x94>)
 800ef86:	7a5b      	ldrb	r3, [r3, #9]
 800ef88:	b2db      	uxtb	r3, r3
 800ef8a:	461a      	mov	r2, r3
 800ef8c:	4b1a      	ldr	r3, [pc, #104]	@ (800eff8 <FATFS_LinkDriverEx+0x94>)
 800ef8e:	2100      	movs	r1, #0
 800ef90:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800ef92:	4b19      	ldr	r3, [pc, #100]	@ (800eff8 <FATFS_LinkDriverEx+0x94>)
 800ef94:	7a5b      	ldrb	r3, [r3, #9]
 800ef96:	b2db      	uxtb	r3, r3
 800ef98:	4a17      	ldr	r2, [pc, #92]	@ (800eff8 <FATFS_LinkDriverEx+0x94>)
 800ef9a:	009b      	lsls	r3, r3, #2
 800ef9c:	4413      	add	r3, r2
 800ef9e:	68fa      	ldr	r2, [r7, #12]
 800efa0:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800efa2:	4b15      	ldr	r3, [pc, #84]	@ (800eff8 <FATFS_LinkDriverEx+0x94>)
 800efa4:	7a5b      	ldrb	r3, [r3, #9]
 800efa6:	b2db      	uxtb	r3, r3
 800efa8:	461a      	mov	r2, r3
 800efaa:	4b13      	ldr	r3, [pc, #76]	@ (800eff8 <FATFS_LinkDriverEx+0x94>)
 800efac:	4413      	add	r3, r2
 800efae:	79fa      	ldrb	r2, [r7, #7]
 800efb0:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800efb2:	4b11      	ldr	r3, [pc, #68]	@ (800eff8 <FATFS_LinkDriverEx+0x94>)
 800efb4:	7a5b      	ldrb	r3, [r3, #9]
 800efb6:	b2db      	uxtb	r3, r3
 800efb8:	1c5a      	adds	r2, r3, #1
 800efba:	b2d1      	uxtb	r1, r2
 800efbc:	4a0e      	ldr	r2, [pc, #56]	@ (800eff8 <FATFS_LinkDriverEx+0x94>)
 800efbe:	7251      	strb	r1, [r2, #9]
 800efc0:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800efc2:	7dbb      	ldrb	r3, [r7, #22]
 800efc4:	3330      	adds	r3, #48	@ 0x30
 800efc6:	b2da      	uxtb	r2, r3
 800efc8:	68bb      	ldr	r3, [r7, #8]
 800efca:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800efcc:	68bb      	ldr	r3, [r7, #8]
 800efce:	3301      	adds	r3, #1
 800efd0:	223a      	movs	r2, #58	@ 0x3a
 800efd2:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800efd4:	68bb      	ldr	r3, [r7, #8]
 800efd6:	3302      	adds	r3, #2
 800efd8:	222f      	movs	r2, #47	@ 0x2f
 800efda:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800efdc:	68bb      	ldr	r3, [r7, #8]
 800efde:	3303      	adds	r3, #3
 800efe0:	2200      	movs	r2, #0
 800efe2:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800efe4:	2300      	movs	r3, #0
 800efe6:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800efe8:	7dfb      	ldrb	r3, [r7, #23]
}
 800efea:	4618      	mov	r0, r3
 800efec:	371c      	adds	r7, #28
 800efee:	46bd      	mov	sp, r7
 800eff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eff4:	4770      	bx	lr
 800eff6:	bf00      	nop
 800eff8:	200163dc 	.word	0x200163dc

0800effc <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800effc:	b580      	push	{r7, lr}
 800effe:	b082      	sub	sp, #8
 800f000:	af00      	add	r7, sp, #0
 800f002:	6078      	str	r0, [r7, #4]
 800f004:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800f006:	2200      	movs	r2, #0
 800f008:	6839      	ldr	r1, [r7, #0]
 800f00a:	6878      	ldr	r0, [r7, #4]
 800f00c:	f7ff ffaa 	bl	800ef64 <FATFS_LinkDriverEx>
 800f010:	4603      	mov	r3, r0
}
 800f012:	4618      	mov	r0, r3
 800f014:	3708      	adds	r7, #8
 800f016:	46bd      	mov	sp, r7
 800f018:	bd80      	pop	{r7, pc}
	...

0800f01c <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 800f01c:	b480      	push	{r7}
 800f01e:	b085      	sub	sp, #20
 800f020:	af00      	add	r7, sp, #0
 800f022:	4603      	mov	r3, r0
 800f024:	6039      	str	r1, [r7, #0]
 800f026:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 800f028:	88fb      	ldrh	r3, [r7, #6]
 800f02a:	2b7f      	cmp	r3, #127	@ 0x7f
 800f02c:	d802      	bhi.n	800f034 <ff_convert+0x18>
		c = chr;
 800f02e:	88fb      	ldrh	r3, [r7, #6]
 800f030:	81fb      	strh	r3, [r7, #14]
 800f032:	e025      	b.n	800f080 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 800f034:	683b      	ldr	r3, [r7, #0]
 800f036:	2b00      	cmp	r3, #0
 800f038:	d00b      	beq.n	800f052 <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 800f03a:	88fb      	ldrh	r3, [r7, #6]
 800f03c:	2bff      	cmp	r3, #255	@ 0xff
 800f03e:	d805      	bhi.n	800f04c <ff_convert+0x30>
 800f040:	88fb      	ldrh	r3, [r7, #6]
 800f042:	3b80      	subs	r3, #128	@ 0x80
 800f044:	4a12      	ldr	r2, [pc, #72]	@ (800f090 <ff_convert+0x74>)
 800f046:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f04a:	e000      	b.n	800f04e <ff_convert+0x32>
 800f04c:	2300      	movs	r3, #0
 800f04e:	81fb      	strh	r3, [r7, #14]
 800f050:	e016      	b.n	800f080 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 800f052:	2300      	movs	r3, #0
 800f054:	81fb      	strh	r3, [r7, #14]
 800f056:	e009      	b.n	800f06c <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 800f058:	89fb      	ldrh	r3, [r7, #14]
 800f05a:	4a0d      	ldr	r2, [pc, #52]	@ (800f090 <ff_convert+0x74>)
 800f05c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f060:	88fa      	ldrh	r2, [r7, #6]
 800f062:	429a      	cmp	r2, r3
 800f064:	d006      	beq.n	800f074 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 800f066:	89fb      	ldrh	r3, [r7, #14]
 800f068:	3301      	adds	r3, #1
 800f06a:	81fb      	strh	r3, [r7, #14]
 800f06c:	89fb      	ldrh	r3, [r7, #14]
 800f06e:	2b7f      	cmp	r3, #127	@ 0x7f
 800f070:	d9f2      	bls.n	800f058 <ff_convert+0x3c>
 800f072:	e000      	b.n	800f076 <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 800f074:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 800f076:	89fb      	ldrh	r3, [r7, #14]
 800f078:	3380      	adds	r3, #128	@ 0x80
 800f07a:	b29b      	uxth	r3, r3
 800f07c:	b2db      	uxtb	r3, r3
 800f07e:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 800f080:	89fb      	ldrh	r3, [r7, #14]
}
 800f082:	4618      	mov	r0, r3
 800f084:	3714      	adds	r7, #20
 800f086:	46bd      	mov	sp, r7
 800f088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f08c:	4770      	bx	lr
 800f08e:	bf00      	nop
 800f090:	080153cc 	.word	0x080153cc

0800f094 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 800f094:	b480      	push	{r7}
 800f096:	b087      	sub	sp, #28
 800f098:	af00      	add	r7, sp, #0
 800f09a:	4603      	mov	r3, r0
 800f09c:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 800f09e:	88fb      	ldrh	r3, [r7, #6]
 800f0a0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800f0a4:	d201      	bcs.n	800f0aa <ff_wtoupper+0x16>
 800f0a6:	4b3e      	ldr	r3, [pc, #248]	@ (800f1a0 <ff_wtoupper+0x10c>)
 800f0a8:	e000      	b.n	800f0ac <ff_wtoupper+0x18>
 800f0aa:	4b3e      	ldr	r3, [pc, #248]	@ (800f1a4 <ff_wtoupper+0x110>)
 800f0ac:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 800f0ae:	697b      	ldr	r3, [r7, #20]
 800f0b0:	1c9a      	adds	r2, r3, #2
 800f0b2:	617a      	str	r2, [r7, #20]
 800f0b4:	881b      	ldrh	r3, [r3, #0]
 800f0b6:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 800f0b8:	8a7b      	ldrh	r3, [r7, #18]
 800f0ba:	2b00      	cmp	r3, #0
 800f0bc:	d068      	beq.n	800f190 <ff_wtoupper+0xfc>
 800f0be:	88fa      	ldrh	r2, [r7, #6]
 800f0c0:	8a7b      	ldrh	r3, [r7, #18]
 800f0c2:	429a      	cmp	r2, r3
 800f0c4:	d364      	bcc.n	800f190 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 800f0c6:	697b      	ldr	r3, [r7, #20]
 800f0c8:	1c9a      	adds	r2, r3, #2
 800f0ca:	617a      	str	r2, [r7, #20]
 800f0cc:	881b      	ldrh	r3, [r3, #0]
 800f0ce:	823b      	strh	r3, [r7, #16]
 800f0d0:	8a3b      	ldrh	r3, [r7, #16]
 800f0d2:	0a1b      	lsrs	r3, r3, #8
 800f0d4:	81fb      	strh	r3, [r7, #14]
 800f0d6:	8a3b      	ldrh	r3, [r7, #16]
 800f0d8:	b2db      	uxtb	r3, r3
 800f0da:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 800f0dc:	88fa      	ldrh	r2, [r7, #6]
 800f0de:	8a79      	ldrh	r1, [r7, #18]
 800f0e0:	8a3b      	ldrh	r3, [r7, #16]
 800f0e2:	440b      	add	r3, r1
 800f0e4:	429a      	cmp	r2, r3
 800f0e6:	da49      	bge.n	800f17c <ff_wtoupper+0xe8>
			switch (cmd) {
 800f0e8:	89fb      	ldrh	r3, [r7, #14]
 800f0ea:	2b08      	cmp	r3, #8
 800f0ec:	d84f      	bhi.n	800f18e <ff_wtoupper+0xfa>
 800f0ee:	a201      	add	r2, pc, #4	@ (adr r2, 800f0f4 <ff_wtoupper+0x60>)
 800f0f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f0f4:	0800f119 	.word	0x0800f119
 800f0f8:	0800f12b 	.word	0x0800f12b
 800f0fc:	0800f141 	.word	0x0800f141
 800f100:	0800f149 	.word	0x0800f149
 800f104:	0800f151 	.word	0x0800f151
 800f108:	0800f159 	.word	0x0800f159
 800f10c:	0800f161 	.word	0x0800f161
 800f110:	0800f169 	.word	0x0800f169
 800f114:	0800f171 	.word	0x0800f171
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 800f118:	88fa      	ldrh	r2, [r7, #6]
 800f11a:	8a7b      	ldrh	r3, [r7, #18]
 800f11c:	1ad3      	subs	r3, r2, r3
 800f11e:	005b      	lsls	r3, r3, #1
 800f120:	697a      	ldr	r2, [r7, #20]
 800f122:	4413      	add	r3, r2
 800f124:	881b      	ldrh	r3, [r3, #0]
 800f126:	80fb      	strh	r3, [r7, #6]
 800f128:	e027      	b.n	800f17a <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 800f12a:	88fa      	ldrh	r2, [r7, #6]
 800f12c:	8a7b      	ldrh	r3, [r7, #18]
 800f12e:	1ad3      	subs	r3, r2, r3
 800f130:	b29b      	uxth	r3, r3
 800f132:	f003 0301 	and.w	r3, r3, #1
 800f136:	b29b      	uxth	r3, r3
 800f138:	88fa      	ldrh	r2, [r7, #6]
 800f13a:	1ad3      	subs	r3, r2, r3
 800f13c:	80fb      	strh	r3, [r7, #6]
 800f13e:	e01c      	b.n	800f17a <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 800f140:	88fb      	ldrh	r3, [r7, #6]
 800f142:	3b10      	subs	r3, #16
 800f144:	80fb      	strh	r3, [r7, #6]
 800f146:	e018      	b.n	800f17a <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 800f148:	88fb      	ldrh	r3, [r7, #6]
 800f14a:	3b20      	subs	r3, #32
 800f14c:	80fb      	strh	r3, [r7, #6]
 800f14e:	e014      	b.n	800f17a <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 800f150:	88fb      	ldrh	r3, [r7, #6]
 800f152:	3b30      	subs	r3, #48	@ 0x30
 800f154:	80fb      	strh	r3, [r7, #6]
 800f156:	e010      	b.n	800f17a <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 800f158:	88fb      	ldrh	r3, [r7, #6]
 800f15a:	3b1a      	subs	r3, #26
 800f15c:	80fb      	strh	r3, [r7, #6]
 800f15e:	e00c      	b.n	800f17a <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 800f160:	88fb      	ldrh	r3, [r7, #6]
 800f162:	3308      	adds	r3, #8
 800f164:	80fb      	strh	r3, [r7, #6]
 800f166:	e008      	b.n	800f17a <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 800f168:	88fb      	ldrh	r3, [r7, #6]
 800f16a:	3b50      	subs	r3, #80	@ 0x50
 800f16c:	80fb      	strh	r3, [r7, #6]
 800f16e:	e004      	b.n	800f17a <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 800f170:	88fb      	ldrh	r3, [r7, #6]
 800f172:	f5a3 53e3 	sub.w	r3, r3, #7264	@ 0x1c60
 800f176:	80fb      	strh	r3, [r7, #6]
 800f178:	bf00      	nop
			}
			break;
 800f17a:	e008      	b.n	800f18e <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 800f17c:	89fb      	ldrh	r3, [r7, #14]
 800f17e:	2b00      	cmp	r3, #0
 800f180:	d195      	bne.n	800f0ae <ff_wtoupper+0x1a>
 800f182:	8a3b      	ldrh	r3, [r7, #16]
 800f184:	005b      	lsls	r3, r3, #1
 800f186:	697a      	ldr	r2, [r7, #20]
 800f188:	4413      	add	r3, r2
 800f18a:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 800f18c:	e78f      	b.n	800f0ae <ff_wtoupper+0x1a>
			break;
 800f18e:	bf00      	nop
	}

	return chr;
 800f190:	88fb      	ldrh	r3, [r7, #6]
}
 800f192:	4618      	mov	r0, r3
 800f194:	371c      	adds	r7, #28
 800f196:	46bd      	mov	sp, r7
 800f198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f19c:	4770      	bx	lr
 800f19e:	bf00      	nop
 800f1a0:	080154cc 	.word	0x080154cc
 800f1a4:	080156c0 	.word	0x080156c0

0800f1a8 <__cvt>:
 800f1a8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800f1ac:	ec57 6b10 	vmov	r6, r7, d0
 800f1b0:	2f00      	cmp	r7, #0
 800f1b2:	460c      	mov	r4, r1
 800f1b4:	4619      	mov	r1, r3
 800f1b6:	463b      	mov	r3, r7
 800f1b8:	bfbb      	ittet	lt
 800f1ba:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800f1be:	461f      	movlt	r7, r3
 800f1c0:	2300      	movge	r3, #0
 800f1c2:	232d      	movlt	r3, #45	@ 0x2d
 800f1c4:	700b      	strb	r3, [r1, #0]
 800f1c6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800f1c8:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800f1cc:	4691      	mov	r9, r2
 800f1ce:	f023 0820 	bic.w	r8, r3, #32
 800f1d2:	bfbc      	itt	lt
 800f1d4:	4632      	movlt	r2, r6
 800f1d6:	4616      	movlt	r6, r2
 800f1d8:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800f1dc:	d005      	beq.n	800f1ea <__cvt+0x42>
 800f1de:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800f1e2:	d100      	bne.n	800f1e6 <__cvt+0x3e>
 800f1e4:	3401      	adds	r4, #1
 800f1e6:	2102      	movs	r1, #2
 800f1e8:	e000      	b.n	800f1ec <__cvt+0x44>
 800f1ea:	2103      	movs	r1, #3
 800f1ec:	ab03      	add	r3, sp, #12
 800f1ee:	9301      	str	r3, [sp, #4]
 800f1f0:	ab02      	add	r3, sp, #8
 800f1f2:	9300      	str	r3, [sp, #0]
 800f1f4:	ec47 6b10 	vmov	d0, r6, r7
 800f1f8:	4653      	mov	r3, sl
 800f1fa:	4622      	mov	r2, r4
 800f1fc:	f001 fa94 	bl	8010728 <_dtoa_r>
 800f200:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800f204:	4605      	mov	r5, r0
 800f206:	d119      	bne.n	800f23c <__cvt+0x94>
 800f208:	f019 0f01 	tst.w	r9, #1
 800f20c:	d00e      	beq.n	800f22c <__cvt+0x84>
 800f20e:	eb00 0904 	add.w	r9, r0, r4
 800f212:	2200      	movs	r2, #0
 800f214:	2300      	movs	r3, #0
 800f216:	4630      	mov	r0, r6
 800f218:	4639      	mov	r1, r7
 800f21a:	f7f1 fc6d 	bl	8000af8 <__aeabi_dcmpeq>
 800f21e:	b108      	cbz	r0, 800f224 <__cvt+0x7c>
 800f220:	f8cd 900c 	str.w	r9, [sp, #12]
 800f224:	2230      	movs	r2, #48	@ 0x30
 800f226:	9b03      	ldr	r3, [sp, #12]
 800f228:	454b      	cmp	r3, r9
 800f22a:	d31e      	bcc.n	800f26a <__cvt+0xc2>
 800f22c:	9b03      	ldr	r3, [sp, #12]
 800f22e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800f230:	1b5b      	subs	r3, r3, r5
 800f232:	4628      	mov	r0, r5
 800f234:	6013      	str	r3, [r2, #0]
 800f236:	b004      	add	sp, #16
 800f238:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f23c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800f240:	eb00 0904 	add.w	r9, r0, r4
 800f244:	d1e5      	bne.n	800f212 <__cvt+0x6a>
 800f246:	7803      	ldrb	r3, [r0, #0]
 800f248:	2b30      	cmp	r3, #48	@ 0x30
 800f24a:	d10a      	bne.n	800f262 <__cvt+0xba>
 800f24c:	2200      	movs	r2, #0
 800f24e:	2300      	movs	r3, #0
 800f250:	4630      	mov	r0, r6
 800f252:	4639      	mov	r1, r7
 800f254:	f7f1 fc50 	bl	8000af8 <__aeabi_dcmpeq>
 800f258:	b918      	cbnz	r0, 800f262 <__cvt+0xba>
 800f25a:	f1c4 0401 	rsb	r4, r4, #1
 800f25e:	f8ca 4000 	str.w	r4, [sl]
 800f262:	f8da 3000 	ldr.w	r3, [sl]
 800f266:	4499      	add	r9, r3
 800f268:	e7d3      	b.n	800f212 <__cvt+0x6a>
 800f26a:	1c59      	adds	r1, r3, #1
 800f26c:	9103      	str	r1, [sp, #12]
 800f26e:	701a      	strb	r2, [r3, #0]
 800f270:	e7d9      	b.n	800f226 <__cvt+0x7e>

0800f272 <__exponent>:
 800f272:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f274:	2900      	cmp	r1, #0
 800f276:	bfba      	itte	lt
 800f278:	4249      	neglt	r1, r1
 800f27a:	232d      	movlt	r3, #45	@ 0x2d
 800f27c:	232b      	movge	r3, #43	@ 0x2b
 800f27e:	2909      	cmp	r1, #9
 800f280:	7002      	strb	r2, [r0, #0]
 800f282:	7043      	strb	r3, [r0, #1]
 800f284:	dd29      	ble.n	800f2da <__exponent+0x68>
 800f286:	f10d 0307 	add.w	r3, sp, #7
 800f28a:	461d      	mov	r5, r3
 800f28c:	270a      	movs	r7, #10
 800f28e:	461a      	mov	r2, r3
 800f290:	fbb1 f6f7 	udiv	r6, r1, r7
 800f294:	fb07 1416 	mls	r4, r7, r6, r1
 800f298:	3430      	adds	r4, #48	@ 0x30
 800f29a:	f802 4c01 	strb.w	r4, [r2, #-1]
 800f29e:	460c      	mov	r4, r1
 800f2a0:	2c63      	cmp	r4, #99	@ 0x63
 800f2a2:	f103 33ff 	add.w	r3, r3, #4294967295
 800f2a6:	4631      	mov	r1, r6
 800f2a8:	dcf1      	bgt.n	800f28e <__exponent+0x1c>
 800f2aa:	3130      	adds	r1, #48	@ 0x30
 800f2ac:	1e94      	subs	r4, r2, #2
 800f2ae:	f803 1c01 	strb.w	r1, [r3, #-1]
 800f2b2:	1c41      	adds	r1, r0, #1
 800f2b4:	4623      	mov	r3, r4
 800f2b6:	42ab      	cmp	r3, r5
 800f2b8:	d30a      	bcc.n	800f2d0 <__exponent+0x5e>
 800f2ba:	f10d 0309 	add.w	r3, sp, #9
 800f2be:	1a9b      	subs	r3, r3, r2
 800f2c0:	42ac      	cmp	r4, r5
 800f2c2:	bf88      	it	hi
 800f2c4:	2300      	movhi	r3, #0
 800f2c6:	3302      	adds	r3, #2
 800f2c8:	4403      	add	r3, r0
 800f2ca:	1a18      	subs	r0, r3, r0
 800f2cc:	b003      	add	sp, #12
 800f2ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f2d0:	f813 6b01 	ldrb.w	r6, [r3], #1
 800f2d4:	f801 6f01 	strb.w	r6, [r1, #1]!
 800f2d8:	e7ed      	b.n	800f2b6 <__exponent+0x44>
 800f2da:	2330      	movs	r3, #48	@ 0x30
 800f2dc:	3130      	adds	r1, #48	@ 0x30
 800f2de:	7083      	strb	r3, [r0, #2]
 800f2e0:	70c1      	strb	r1, [r0, #3]
 800f2e2:	1d03      	adds	r3, r0, #4
 800f2e4:	e7f1      	b.n	800f2ca <__exponent+0x58>
	...

0800f2e8 <_printf_float>:
 800f2e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f2ec:	b08d      	sub	sp, #52	@ 0x34
 800f2ee:	460c      	mov	r4, r1
 800f2f0:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800f2f4:	4616      	mov	r6, r2
 800f2f6:	461f      	mov	r7, r3
 800f2f8:	4605      	mov	r5, r0
 800f2fa:	f001 f8e3 	bl	80104c4 <_localeconv_r>
 800f2fe:	6803      	ldr	r3, [r0, #0]
 800f300:	9304      	str	r3, [sp, #16]
 800f302:	4618      	mov	r0, r3
 800f304:	f7f0 ffcc 	bl	80002a0 <strlen>
 800f308:	2300      	movs	r3, #0
 800f30a:	930a      	str	r3, [sp, #40]	@ 0x28
 800f30c:	f8d8 3000 	ldr.w	r3, [r8]
 800f310:	9005      	str	r0, [sp, #20]
 800f312:	3307      	adds	r3, #7
 800f314:	f023 0307 	bic.w	r3, r3, #7
 800f318:	f103 0208 	add.w	r2, r3, #8
 800f31c:	f894 a018 	ldrb.w	sl, [r4, #24]
 800f320:	f8d4 b000 	ldr.w	fp, [r4]
 800f324:	f8c8 2000 	str.w	r2, [r8]
 800f328:	e9d3 8900 	ldrd	r8, r9, [r3]
 800f32c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800f330:	9307      	str	r3, [sp, #28]
 800f332:	f8cd 8018 	str.w	r8, [sp, #24]
 800f336:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800f33a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800f33e:	4b9c      	ldr	r3, [pc, #624]	@ (800f5b0 <_printf_float+0x2c8>)
 800f340:	f04f 32ff 	mov.w	r2, #4294967295
 800f344:	f7f1 fc0a 	bl	8000b5c <__aeabi_dcmpun>
 800f348:	bb70      	cbnz	r0, 800f3a8 <_printf_float+0xc0>
 800f34a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800f34e:	4b98      	ldr	r3, [pc, #608]	@ (800f5b0 <_printf_float+0x2c8>)
 800f350:	f04f 32ff 	mov.w	r2, #4294967295
 800f354:	f7f1 fbe4 	bl	8000b20 <__aeabi_dcmple>
 800f358:	bb30      	cbnz	r0, 800f3a8 <_printf_float+0xc0>
 800f35a:	2200      	movs	r2, #0
 800f35c:	2300      	movs	r3, #0
 800f35e:	4640      	mov	r0, r8
 800f360:	4649      	mov	r1, r9
 800f362:	f7f1 fbd3 	bl	8000b0c <__aeabi_dcmplt>
 800f366:	b110      	cbz	r0, 800f36e <_printf_float+0x86>
 800f368:	232d      	movs	r3, #45	@ 0x2d
 800f36a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800f36e:	4a91      	ldr	r2, [pc, #580]	@ (800f5b4 <_printf_float+0x2cc>)
 800f370:	4b91      	ldr	r3, [pc, #580]	@ (800f5b8 <_printf_float+0x2d0>)
 800f372:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800f376:	bf8c      	ite	hi
 800f378:	4690      	movhi	r8, r2
 800f37a:	4698      	movls	r8, r3
 800f37c:	2303      	movs	r3, #3
 800f37e:	6123      	str	r3, [r4, #16]
 800f380:	f02b 0304 	bic.w	r3, fp, #4
 800f384:	6023      	str	r3, [r4, #0]
 800f386:	f04f 0900 	mov.w	r9, #0
 800f38a:	9700      	str	r7, [sp, #0]
 800f38c:	4633      	mov	r3, r6
 800f38e:	aa0b      	add	r2, sp, #44	@ 0x2c
 800f390:	4621      	mov	r1, r4
 800f392:	4628      	mov	r0, r5
 800f394:	f000 f9d2 	bl	800f73c <_printf_common>
 800f398:	3001      	adds	r0, #1
 800f39a:	f040 808d 	bne.w	800f4b8 <_printf_float+0x1d0>
 800f39e:	f04f 30ff 	mov.w	r0, #4294967295
 800f3a2:	b00d      	add	sp, #52	@ 0x34
 800f3a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f3a8:	4642      	mov	r2, r8
 800f3aa:	464b      	mov	r3, r9
 800f3ac:	4640      	mov	r0, r8
 800f3ae:	4649      	mov	r1, r9
 800f3b0:	f7f1 fbd4 	bl	8000b5c <__aeabi_dcmpun>
 800f3b4:	b140      	cbz	r0, 800f3c8 <_printf_float+0xe0>
 800f3b6:	464b      	mov	r3, r9
 800f3b8:	2b00      	cmp	r3, #0
 800f3ba:	bfbc      	itt	lt
 800f3bc:	232d      	movlt	r3, #45	@ 0x2d
 800f3be:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800f3c2:	4a7e      	ldr	r2, [pc, #504]	@ (800f5bc <_printf_float+0x2d4>)
 800f3c4:	4b7e      	ldr	r3, [pc, #504]	@ (800f5c0 <_printf_float+0x2d8>)
 800f3c6:	e7d4      	b.n	800f372 <_printf_float+0x8a>
 800f3c8:	6863      	ldr	r3, [r4, #4]
 800f3ca:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800f3ce:	9206      	str	r2, [sp, #24]
 800f3d0:	1c5a      	adds	r2, r3, #1
 800f3d2:	d13b      	bne.n	800f44c <_printf_float+0x164>
 800f3d4:	2306      	movs	r3, #6
 800f3d6:	6063      	str	r3, [r4, #4]
 800f3d8:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800f3dc:	2300      	movs	r3, #0
 800f3de:	6022      	str	r2, [r4, #0]
 800f3e0:	9303      	str	r3, [sp, #12]
 800f3e2:	ab0a      	add	r3, sp, #40	@ 0x28
 800f3e4:	e9cd a301 	strd	sl, r3, [sp, #4]
 800f3e8:	ab09      	add	r3, sp, #36	@ 0x24
 800f3ea:	9300      	str	r3, [sp, #0]
 800f3ec:	6861      	ldr	r1, [r4, #4]
 800f3ee:	ec49 8b10 	vmov	d0, r8, r9
 800f3f2:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800f3f6:	4628      	mov	r0, r5
 800f3f8:	f7ff fed6 	bl	800f1a8 <__cvt>
 800f3fc:	9b06      	ldr	r3, [sp, #24]
 800f3fe:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800f400:	2b47      	cmp	r3, #71	@ 0x47
 800f402:	4680      	mov	r8, r0
 800f404:	d129      	bne.n	800f45a <_printf_float+0x172>
 800f406:	1cc8      	adds	r0, r1, #3
 800f408:	db02      	blt.n	800f410 <_printf_float+0x128>
 800f40a:	6863      	ldr	r3, [r4, #4]
 800f40c:	4299      	cmp	r1, r3
 800f40e:	dd41      	ble.n	800f494 <_printf_float+0x1ac>
 800f410:	f1aa 0a02 	sub.w	sl, sl, #2
 800f414:	fa5f fa8a 	uxtb.w	sl, sl
 800f418:	3901      	subs	r1, #1
 800f41a:	4652      	mov	r2, sl
 800f41c:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800f420:	9109      	str	r1, [sp, #36]	@ 0x24
 800f422:	f7ff ff26 	bl	800f272 <__exponent>
 800f426:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800f428:	1813      	adds	r3, r2, r0
 800f42a:	2a01      	cmp	r2, #1
 800f42c:	4681      	mov	r9, r0
 800f42e:	6123      	str	r3, [r4, #16]
 800f430:	dc02      	bgt.n	800f438 <_printf_float+0x150>
 800f432:	6822      	ldr	r2, [r4, #0]
 800f434:	07d2      	lsls	r2, r2, #31
 800f436:	d501      	bpl.n	800f43c <_printf_float+0x154>
 800f438:	3301      	adds	r3, #1
 800f43a:	6123      	str	r3, [r4, #16]
 800f43c:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800f440:	2b00      	cmp	r3, #0
 800f442:	d0a2      	beq.n	800f38a <_printf_float+0xa2>
 800f444:	232d      	movs	r3, #45	@ 0x2d
 800f446:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800f44a:	e79e      	b.n	800f38a <_printf_float+0xa2>
 800f44c:	9a06      	ldr	r2, [sp, #24]
 800f44e:	2a47      	cmp	r2, #71	@ 0x47
 800f450:	d1c2      	bne.n	800f3d8 <_printf_float+0xf0>
 800f452:	2b00      	cmp	r3, #0
 800f454:	d1c0      	bne.n	800f3d8 <_printf_float+0xf0>
 800f456:	2301      	movs	r3, #1
 800f458:	e7bd      	b.n	800f3d6 <_printf_float+0xee>
 800f45a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800f45e:	d9db      	bls.n	800f418 <_printf_float+0x130>
 800f460:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800f464:	d118      	bne.n	800f498 <_printf_float+0x1b0>
 800f466:	2900      	cmp	r1, #0
 800f468:	6863      	ldr	r3, [r4, #4]
 800f46a:	dd0b      	ble.n	800f484 <_printf_float+0x19c>
 800f46c:	6121      	str	r1, [r4, #16]
 800f46e:	b913      	cbnz	r3, 800f476 <_printf_float+0x18e>
 800f470:	6822      	ldr	r2, [r4, #0]
 800f472:	07d0      	lsls	r0, r2, #31
 800f474:	d502      	bpl.n	800f47c <_printf_float+0x194>
 800f476:	3301      	adds	r3, #1
 800f478:	440b      	add	r3, r1
 800f47a:	6123      	str	r3, [r4, #16]
 800f47c:	65a1      	str	r1, [r4, #88]	@ 0x58
 800f47e:	f04f 0900 	mov.w	r9, #0
 800f482:	e7db      	b.n	800f43c <_printf_float+0x154>
 800f484:	b913      	cbnz	r3, 800f48c <_printf_float+0x1a4>
 800f486:	6822      	ldr	r2, [r4, #0]
 800f488:	07d2      	lsls	r2, r2, #31
 800f48a:	d501      	bpl.n	800f490 <_printf_float+0x1a8>
 800f48c:	3302      	adds	r3, #2
 800f48e:	e7f4      	b.n	800f47a <_printf_float+0x192>
 800f490:	2301      	movs	r3, #1
 800f492:	e7f2      	b.n	800f47a <_printf_float+0x192>
 800f494:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800f498:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f49a:	4299      	cmp	r1, r3
 800f49c:	db05      	blt.n	800f4aa <_printf_float+0x1c2>
 800f49e:	6823      	ldr	r3, [r4, #0]
 800f4a0:	6121      	str	r1, [r4, #16]
 800f4a2:	07d8      	lsls	r0, r3, #31
 800f4a4:	d5ea      	bpl.n	800f47c <_printf_float+0x194>
 800f4a6:	1c4b      	adds	r3, r1, #1
 800f4a8:	e7e7      	b.n	800f47a <_printf_float+0x192>
 800f4aa:	2900      	cmp	r1, #0
 800f4ac:	bfd4      	ite	le
 800f4ae:	f1c1 0202 	rsble	r2, r1, #2
 800f4b2:	2201      	movgt	r2, #1
 800f4b4:	4413      	add	r3, r2
 800f4b6:	e7e0      	b.n	800f47a <_printf_float+0x192>
 800f4b8:	6823      	ldr	r3, [r4, #0]
 800f4ba:	055a      	lsls	r2, r3, #21
 800f4bc:	d407      	bmi.n	800f4ce <_printf_float+0x1e6>
 800f4be:	6923      	ldr	r3, [r4, #16]
 800f4c0:	4642      	mov	r2, r8
 800f4c2:	4631      	mov	r1, r6
 800f4c4:	4628      	mov	r0, r5
 800f4c6:	47b8      	blx	r7
 800f4c8:	3001      	adds	r0, #1
 800f4ca:	d12b      	bne.n	800f524 <_printf_float+0x23c>
 800f4cc:	e767      	b.n	800f39e <_printf_float+0xb6>
 800f4ce:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800f4d2:	f240 80dd 	bls.w	800f690 <_printf_float+0x3a8>
 800f4d6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800f4da:	2200      	movs	r2, #0
 800f4dc:	2300      	movs	r3, #0
 800f4de:	f7f1 fb0b 	bl	8000af8 <__aeabi_dcmpeq>
 800f4e2:	2800      	cmp	r0, #0
 800f4e4:	d033      	beq.n	800f54e <_printf_float+0x266>
 800f4e6:	4a37      	ldr	r2, [pc, #220]	@ (800f5c4 <_printf_float+0x2dc>)
 800f4e8:	2301      	movs	r3, #1
 800f4ea:	4631      	mov	r1, r6
 800f4ec:	4628      	mov	r0, r5
 800f4ee:	47b8      	blx	r7
 800f4f0:	3001      	adds	r0, #1
 800f4f2:	f43f af54 	beq.w	800f39e <_printf_float+0xb6>
 800f4f6:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800f4fa:	4543      	cmp	r3, r8
 800f4fc:	db02      	blt.n	800f504 <_printf_float+0x21c>
 800f4fe:	6823      	ldr	r3, [r4, #0]
 800f500:	07d8      	lsls	r0, r3, #31
 800f502:	d50f      	bpl.n	800f524 <_printf_float+0x23c>
 800f504:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800f508:	4631      	mov	r1, r6
 800f50a:	4628      	mov	r0, r5
 800f50c:	47b8      	blx	r7
 800f50e:	3001      	adds	r0, #1
 800f510:	f43f af45 	beq.w	800f39e <_printf_float+0xb6>
 800f514:	f04f 0900 	mov.w	r9, #0
 800f518:	f108 38ff 	add.w	r8, r8, #4294967295
 800f51c:	f104 0a1a 	add.w	sl, r4, #26
 800f520:	45c8      	cmp	r8, r9
 800f522:	dc09      	bgt.n	800f538 <_printf_float+0x250>
 800f524:	6823      	ldr	r3, [r4, #0]
 800f526:	079b      	lsls	r3, r3, #30
 800f528:	f100 8103 	bmi.w	800f732 <_printf_float+0x44a>
 800f52c:	68e0      	ldr	r0, [r4, #12]
 800f52e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800f530:	4298      	cmp	r0, r3
 800f532:	bfb8      	it	lt
 800f534:	4618      	movlt	r0, r3
 800f536:	e734      	b.n	800f3a2 <_printf_float+0xba>
 800f538:	2301      	movs	r3, #1
 800f53a:	4652      	mov	r2, sl
 800f53c:	4631      	mov	r1, r6
 800f53e:	4628      	mov	r0, r5
 800f540:	47b8      	blx	r7
 800f542:	3001      	adds	r0, #1
 800f544:	f43f af2b 	beq.w	800f39e <_printf_float+0xb6>
 800f548:	f109 0901 	add.w	r9, r9, #1
 800f54c:	e7e8      	b.n	800f520 <_printf_float+0x238>
 800f54e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f550:	2b00      	cmp	r3, #0
 800f552:	dc39      	bgt.n	800f5c8 <_printf_float+0x2e0>
 800f554:	4a1b      	ldr	r2, [pc, #108]	@ (800f5c4 <_printf_float+0x2dc>)
 800f556:	2301      	movs	r3, #1
 800f558:	4631      	mov	r1, r6
 800f55a:	4628      	mov	r0, r5
 800f55c:	47b8      	blx	r7
 800f55e:	3001      	adds	r0, #1
 800f560:	f43f af1d 	beq.w	800f39e <_printf_float+0xb6>
 800f564:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800f568:	ea59 0303 	orrs.w	r3, r9, r3
 800f56c:	d102      	bne.n	800f574 <_printf_float+0x28c>
 800f56e:	6823      	ldr	r3, [r4, #0]
 800f570:	07d9      	lsls	r1, r3, #31
 800f572:	d5d7      	bpl.n	800f524 <_printf_float+0x23c>
 800f574:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800f578:	4631      	mov	r1, r6
 800f57a:	4628      	mov	r0, r5
 800f57c:	47b8      	blx	r7
 800f57e:	3001      	adds	r0, #1
 800f580:	f43f af0d 	beq.w	800f39e <_printf_float+0xb6>
 800f584:	f04f 0a00 	mov.w	sl, #0
 800f588:	f104 0b1a 	add.w	fp, r4, #26
 800f58c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f58e:	425b      	negs	r3, r3
 800f590:	4553      	cmp	r3, sl
 800f592:	dc01      	bgt.n	800f598 <_printf_float+0x2b0>
 800f594:	464b      	mov	r3, r9
 800f596:	e793      	b.n	800f4c0 <_printf_float+0x1d8>
 800f598:	2301      	movs	r3, #1
 800f59a:	465a      	mov	r2, fp
 800f59c:	4631      	mov	r1, r6
 800f59e:	4628      	mov	r0, r5
 800f5a0:	47b8      	blx	r7
 800f5a2:	3001      	adds	r0, #1
 800f5a4:	f43f aefb 	beq.w	800f39e <_printf_float+0xb6>
 800f5a8:	f10a 0a01 	add.w	sl, sl, #1
 800f5ac:	e7ee      	b.n	800f58c <_printf_float+0x2a4>
 800f5ae:	bf00      	nop
 800f5b0:	7fefffff 	.word	0x7fefffff
 800f5b4:	08015780 	.word	0x08015780
 800f5b8:	0801577c 	.word	0x0801577c
 800f5bc:	08015788 	.word	0x08015788
 800f5c0:	08015784 	.word	0x08015784
 800f5c4:	0801578c 	.word	0x0801578c
 800f5c8:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800f5ca:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800f5ce:	4553      	cmp	r3, sl
 800f5d0:	bfa8      	it	ge
 800f5d2:	4653      	movge	r3, sl
 800f5d4:	2b00      	cmp	r3, #0
 800f5d6:	4699      	mov	r9, r3
 800f5d8:	dc36      	bgt.n	800f648 <_printf_float+0x360>
 800f5da:	f04f 0b00 	mov.w	fp, #0
 800f5de:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800f5e2:	f104 021a 	add.w	r2, r4, #26
 800f5e6:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800f5e8:	9306      	str	r3, [sp, #24]
 800f5ea:	eba3 0309 	sub.w	r3, r3, r9
 800f5ee:	455b      	cmp	r3, fp
 800f5f0:	dc31      	bgt.n	800f656 <_printf_float+0x36e>
 800f5f2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f5f4:	459a      	cmp	sl, r3
 800f5f6:	dc3a      	bgt.n	800f66e <_printf_float+0x386>
 800f5f8:	6823      	ldr	r3, [r4, #0]
 800f5fa:	07da      	lsls	r2, r3, #31
 800f5fc:	d437      	bmi.n	800f66e <_printf_float+0x386>
 800f5fe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f600:	ebaa 0903 	sub.w	r9, sl, r3
 800f604:	9b06      	ldr	r3, [sp, #24]
 800f606:	ebaa 0303 	sub.w	r3, sl, r3
 800f60a:	4599      	cmp	r9, r3
 800f60c:	bfa8      	it	ge
 800f60e:	4699      	movge	r9, r3
 800f610:	f1b9 0f00 	cmp.w	r9, #0
 800f614:	dc33      	bgt.n	800f67e <_printf_float+0x396>
 800f616:	f04f 0800 	mov.w	r8, #0
 800f61a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800f61e:	f104 0b1a 	add.w	fp, r4, #26
 800f622:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f624:	ebaa 0303 	sub.w	r3, sl, r3
 800f628:	eba3 0309 	sub.w	r3, r3, r9
 800f62c:	4543      	cmp	r3, r8
 800f62e:	f77f af79 	ble.w	800f524 <_printf_float+0x23c>
 800f632:	2301      	movs	r3, #1
 800f634:	465a      	mov	r2, fp
 800f636:	4631      	mov	r1, r6
 800f638:	4628      	mov	r0, r5
 800f63a:	47b8      	blx	r7
 800f63c:	3001      	adds	r0, #1
 800f63e:	f43f aeae 	beq.w	800f39e <_printf_float+0xb6>
 800f642:	f108 0801 	add.w	r8, r8, #1
 800f646:	e7ec      	b.n	800f622 <_printf_float+0x33a>
 800f648:	4642      	mov	r2, r8
 800f64a:	4631      	mov	r1, r6
 800f64c:	4628      	mov	r0, r5
 800f64e:	47b8      	blx	r7
 800f650:	3001      	adds	r0, #1
 800f652:	d1c2      	bne.n	800f5da <_printf_float+0x2f2>
 800f654:	e6a3      	b.n	800f39e <_printf_float+0xb6>
 800f656:	2301      	movs	r3, #1
 800f658:	4631      	mov	r1, r6
 800f65a:	4628      	mov	r0, r5
 800f65c:	9206      	str	r2, [sp, #24]
 800f65e:	47b8      	blx	r7
 800f660:	3001      	adds	r0, #1
 800f662:	f43f ae9c 	beq.w	800f39e <_printf_float+0xb6>
 800f666:	9a06      	ldr	r2, [sp, #24]
 800f668:	f10b 0b01 	add.w	fp, fp, #1
 800f66c:	e7bb      	b.n	800f5e6 <_printf_float+0x2fe>
 800f66e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800f672:	4631      	mov	r1, r6
 800f674:	4628      	mov	r0, r5
 800f676:	47b8      	blx	r7
 800f678:	3001      	adds	r0, #1
 800f67a:	d1c0      	bne.n	800f5fe <_printf_float+0x316>
 800f67c:	e68f      	b.n	800f39e <_printf_float+0xb6>
 800f67e:	9a06      	ldr	r2, [sp, #24]
 800f680:	464b      	mov	r3, r9
 800f682:	4442      	add	r2, r8
 800f684:	4631      	mov	r1, r6
 800f686:	4628      	mov	r0, r5
 800f688:	47b8      	blx	r7
 800f68a:	3001      	adds	r0, #1
 800f68c:	d1c3      	bne.n	800f616 <_printf_float+0x32e>
 800f68e:	e686      	b.n	800f39e <_printf_float+0xb6>
 800f690:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800f694:	f1ba 0f01 	cmp.w	sl, #1
 800f698:	dc01      	bgt.n	800f69e <_printf_float+0x3b6>
 800f69a:	07db      	lsls	r3, r3, #31
 800f69c:	d536      	bpl.n	800f70c <_printf_float+0x424>
 800f69e:	2301      	movs	r3, #1
 800f6a0:	4642      	mov	r2, r8
 800f6a2:	4631      	mov	r1, r6
 800f6a4:	4628      	mov	r0, r5
 800f6a6:	47b8      	blx	r7
 800f6a8:	3001      	adds	r0, #1
 800f6aa:	f43f ae78 	beq.w	800f39e <_printf_float+0xb6>
 800f6ae:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800f6b2:	4631      	mov	r1, r6
 800f6b4:	4628      	mov	r0, r5
 800f6b6:	47b8      	blx	r7
 800f6b8:	3001      	adds	r0, #1
 800f6ba:	f43f ae70 	beq.w	800f39e <_printf_float+0xb6>
 800f6be:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800f6c2:	2200      	movs	r2, #0
 800f6c4:	2300      	movs	r3, #0
 800f6c6:	f10a 3aff 	add.w	sl, sl, #4294967295
 800f6ca:	f7f1 fa15 	bl	8000af8 <__aeabi_dcmpeq>
 800f6ce:	b9c0      	cbnz	r0, 800f702 <_printf_float+0x41a>
 800f6d0:	4653      	mov	r3, sl
 800f6d2:	f108 0201 	add.w	r2, r8, #1
 800f6d6:	4631      	mov	r1, r6
 800f6d8:	4628      	mov	r0, r5
 800f6da:	47b8      	blx	r7
 800f6dc:	3001      	adds	r0, #1
 800f6de:	d10c      	bne.n	800f6fa <_printf_float+0x412>
 800f6e0:	e65d      	b.n	800f39e <_printf_float+0xb6>
 800f6e2:	2301      	movs	r3, #1
 800f6e4:	465a      	mov	r2, fp
 800f6e6:	4631      	mov	r1, r6
 800f6e8:	4628      	mov	r0, r5
 800f6ea:	47b8      	blx	r7
 800f6ec:	3001      	adds	r0, #1
 800f6ee:	f43f ae56 	beq.w	800f39e <_printf_float+0xb6>
 800f6f2:	f108 0801 	add.w	r8, r8, #1
 800f6f6:	45d0      	cmp	r8, sl
 800f6f8:	dbf3      	blt.n	800f6e2 <_printf_float+0x3fa>
 800f6fa:	464b      	mov	r3, r9
 800f6fc:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800f700:	e6df      	b.n	800f4c2 <_printf_float+0x1da>
 800f702:	f04f 0800 	mov.w	r8, #0
 800f706:	f104 0b1a 	add.w	fp, r4, #26
 800f70a:	e7f4      	b.n	800f6f6 <_printf_float+0x40e>
 800f70c:	2301      	movs	r3, #1
 800f70e:	4642      	mov	r2, r8
 800f710:	e7e1      	b.n	800f6d6 <_printf_float+0x3ee>
 800f712:	2301      	movs	r3, #1
 800f714:	464a      	mov	r2, r9
 800f716:	4631      	mov	r1, r6
 800f718:	4628      	mov	r0, r5
 800f71a:	47b8      	blx	r7
 800f71c:	3001      	adds	r0, #1
 800f71e:	f43f ae3e 	beq.w	800f39e <_printf_float+0xb6>
 800f722:	f108 0801 	add.w	r8, r8, #1
 800f726:	68e3      	ldr	r3, [r4, #12]
 800f728:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800f72a:	1a5b      	subs	r3, r3, r1
 800f72c:	4543      	cmp	r3, r8
 800f72e:	dcf0      	bgt.n	800f712 <_printf_float+0x42a>
 800f730:	e6fc      	b.n	800f52c <_printf_float+0x244>
 800f732:	f04f 0800 	mov.w	r8, #0
 800f736:	f104 0919 	add.w	r9, r4, #25
 800f73a:	e7f4      	b.n	800f726 <_printf_float+0x43e>

0800f73c <_printf_common>:
 800f73c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f740:	4616      	mov	r6, r2
 800f742:	4698      	mov	r8, r3
 800f744:	688a      	ldr	r2, [r1, #8]
 800f746:	690b      	ldr	r3, [r1, #16]
 800f748:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800f74c:	4293      	cmp	r3, r2
 800f74e:	bfb8      	it	lt
 800f750:	4613      	movlt	r3, r2
 800f752:	6033      	str	r3, [r6, #0]
 800f754:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800f758:	4607      	mov	r7, r0
 800f75a:	460c      	mov	r4, r1
 800f75c:	b10a      	cbz	r2, 800f762 <_printf_common+0x26>
 800f75e:	3301      	adds	r3, #1
 800f760:	6033      	str	r3, [r6, #0]
 800f762:	6823      	ldr	r3, [r4, #0]
 800f764:	0699      	lsls	r1, r3, #26
 800f766:	bf42      	ittt	mi
 800f768:	6833      	ldrmi	r3, [r6, #0]
 800f76a:	3302      	addmi	r3, #2
 800f76c:	6033      	strmi	r3, [r6, #0]
 800f76e:	6825      	ldr	r5, [r4, #0]
 800f770:	f015 0506 	ands.w	r5, r5, #6
 800f774:	d106      	bne.n	800f784 <_printf_common+0x48>
 800f776:	f104 0a19 	add.w	sl, r4, #25
 800f77a:	68e3      	ldr	r3, [r4, #12]
 800f77c:	6832      	ldr	r2, [r6, #0]
 800f77e:	1a9b      	subs	r3, r3, r2
 800f780:	42ab      	cmp	r3, r5
 800f782:	dc26      	bgt.n	800f7d2 <_printf_common+0x96>
 800f784:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800f788:	6822      	ldr	r2, [r4, #0]
 800f78a:	3b00      	subs	r3, #0
 800f78c:	bf18      	it	ne
 800f78e:	2301      	movne	r3, #1
 800f790:	0692      	lsls	r2, r2, #26
 800f792:	d42b      	bmi.n	800f7ec <_printf_common+0xb0>
 800f794:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800f798:	4641      	mov	r1, r8
 800f79a:	4638      	mov	r0, r7
 800f79c:	47c8      	blx	r9
 800f79e:	3001      	adds	r0, #1
 800f7a0:	d01e      	beq.n	800f7e0 <_printf_common+0xa4>
 800f7a2:	6823      	ldr	r3, [r4, #0]
 800f7a4:	6922      	ldr	r2, [r4, #16]
 800f7a6:	f003 0306 	and.w	r3, r3, #6
 800f7aa:	2b04      	cmp	r3, #4
 800f7ac:	bf02      	ittt	eq
 800f7ae:	68e5      	ldreq	r5, [r4, #12]
 800f7b0:	6833      	ldreq	r3, [r6, #0]
 800f7b2:	1aed      	subeq	r5, r5, r3
 800f7b4:	68a3      	ldr	r3, [r4, #8]
 800f7b6:	bf0c      	ite	eq
 800f7b8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800f7bc:	2500      	movne	r5, #0
 800f7be:	4293      	cmp	r3, r2
 800f7c0:	bfc4      	itt	gt
 800f7c2:	1a9b      	subgt	r3, r3, r2
 800f7c4:	18ed      	addgt	r5, r5, r3
 800f7c6:	2600      	movs	r6, #0
 800f7c8:	341a      	adds	r4, #26
 800f7ca:	42b5      	cmp	r5, r6
 800f7cc:	d11a      	bne.n	800f804 <_printf_common+0xc8>
 800f7ce:	2000      	movs	r0, #0
 800f7d0:	e008      	b.n	800f7e4 <_printf_common+0xa8>
 800f7d2:	2301      	movs	r3, #1
 800f7d4:	4652      	mov	r2, sl
 800f7d6:	4641      	mov	r1, r8
 800f7d8:	4638      	mov	r0, r7
 800f7da:	47c8      	blx	r9
 800f7dc:	3001      	adds	r0, #1
 800f7de:	d103      	bne.n	800f7e8 <_printf_common+0xac>
 800f7e0:	f04f 30ff 	mov.w	r0, #4294967295
 800f7e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f7e8:	3501      	adds	r5, #1
 800f7ea:	e7c6      	b.n	800f77a <_printf_common+0x3e>
 800f7ec:	18e1      	adds	r1, r4, r3
 800f7ee:	1c5a      	adds	r2, r3, #1
 800f7f0:	2030      	movs	r0, #48	@ 0x30
 800f7f2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800f7f6:	4422      	add	r2, r4
 800f7f8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800f7fc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800f800:	3302      	adds	r3, #2
 800f802:	e7c7      	b.n	800f794 <_printf_common+0x58>
 800f804:	2301      	movs	r3, #1
 800f806:	4622      	mov	r2, r4
 800f808:	4641      	mov	r1, r8
 800f80a:	4638      	mov	r0, r7
 800f80c:	47c8      	blx	r9
 800f80e:	3001      	adds	r0, #1
 800f810:	d0e6      	beq.n	800f7e0 <_printf_common+0xa4>
 800f812:	3601      	adds	r6, #1
 800f814:	e7d9      	b.n	800f7ca <_printf_common+0x8e>
	...

0800f818 <_printf_i>:
 800f818:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800f81c:	7e0f      	ldrb	r7, [r1, #24]
 800f81e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800f820:	2f78      	cmp	r7, #120	@ 0x78
 800f822:	4691      	mov	r9, r2
 800f824:	4680      	mov	r8, r0
 800f826:	460c      	mov	r4, r1
 800f828:	469a      	mov	sl, r3
 800f82a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800f82e:	d807      	bhi.n	800f840 <_printf_i+0x28>
 800f830:	2f62      	cmp	r7, #98	@ 0x62
 800f832:	d80a      	bhi.n	800f84a <_printf_i+0x32>
 800f834:	2f00      	cmp	r7, #0
 800f836:	f000 80d1 	beq.w	800f9dc <_printf_i+0x1c4>
 800f83a:	2f58      	cmp	r7, #88	@ 0x58
 800f83c:	f000 80b8 	beq.w	800f9b0 <_printf_i+0x198>
 800f840:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800f844:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800f848:	e03a      	b.n	800f8c0 <_printf_i+0xa8>
 800f84a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800f84e:	2b15      	cmp	r3, #21
 800f850:	d8f6      	bhi.n	800f840 <_printf_i+0x28>
 800f852:	a101      	add	r1, pc, #4	@ (adr r1, 800f858 <_printf_i+0x40>)
 800f854:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800f858:	0800f8b1 	.word	0x0800f8b1
 800f85c:	0800f8c5 	.word	0x0800f8c5
 800f860:	0800f841 	.word	0x0800f841
 800f864:	0800f841 	.word	0x0800f841
 800f868:	0800f841 	.word	0x0800f841
 800f86c:	0800f841 	.word	0x0800f841
 800f870:	0800f8c5 	.word	0x0800f8c5
 800f874:	0800f841 	.word	0x0800f841
 800f878:	0800f841 	.word	0x0800f841
 800f87c:	0800f841 	.word	0x0800f841
 800f880:	0800f841 	.word	0x0800f841
 800f884:	0800f9c3 	.word	0x0800f9c3
 800f888:	0800f8ef 	.word	0x0800f8ef
 800f88c:	0800f97d 	.word	0x0800f97d
 800f890:	0800f841 	.word	0x0800f841
 800f894:	0800f841 	.word	0x0800f841
 800f898:	0800f9e5 	.word	0x0800f9e5
 800f89c:	0800f841 	.word	0x0800f841
 800f8a0:	0800f8ef 	.word	0x0800f8ef
 800f8a4:	0800f841 	.word	0x0800f841
 800f8a8:	0800f841 	.word	0x0800f841
 800f8ac:	0800f985 	.word	0x0800f985
 800f8b0:	6833      	ldr	r3, [r6, #0]
 800f8b2:	1d1a      	adds	r2, r3, #4
 800f8b4:	681b      	ldr	r3, [r3, #0]
 800f8b6:	6032      	str	r2, [r6, #0]
 800f8b8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800f8bc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800f8c0:	2301      	movs	r3, #1
 800f8c2:	e09c      	b.n	800f9fe <_printf_i+0x1e6>
 800f8c4:	6833      	ldr	r3, [r6, #0]
 800f8c6:	6820      	ldr	r0, [r4, #0]
 800f8c8:	1d19      	adds	r1, r3, #4
 800f8ca:	6031      	str	r1, [r6, #0]
 800f8cc:	0606      	lsls	r6, r0, #24
 800f8ce:	d501      	bpl.n	800f8d4 <_printf_i+0xbc>
 800f8d0:	681d      	ldr	r5, [r3, #0]
 800f8d2:	e003      	b.n	800f8dc <_printf_i+0xc4>
 800f8d4:	0645      	lsls	r5, r0, #25
 800f8d6:	d5fb      	bpl.n	800f8d0 <_printf_i+0xb8>
 800f8d8:	f9b3 5000 	ldrsh.w	r5, [r3]
 800f8dc:	2d00      	cmp	r5, #0
 800f8de:	da03      	bge.n	800f8e8 <_printf_i+0xd0>
 800f8e0:	232d      	movs	r3, #45	@ 0x2d
 800f8e2:	426d      	negs	r5, r5
 800f8e4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800f8e8:	4858      	ldr	r0, [pc, #352]	@ (800fa4c <_printf_i+0x234>)
 800f8ea:	230a      	movs	r3, #10
 800f8ec:	e011      	b.n	800f912 <_printf_i+0xfa>
 800f8ee:	6821      	ldr	r1, [r4, #0]
 800f8f0:	6833      	ldr	r3, [r6, #0]
 800f8f2:	0608      	lsls	r0, r1, #24
 800f8f4:	f853 5b04 	ldr.w	r5, [r3], #4
 800f8f8:	d402      	bmi.n	800f900 <_printf_i+0xe8>
 800f8fa:	0649      	lsls	r1, r1, #25
 800f8fc:	bf48      	it	mi
 800f8fe:	b2ad      	uxthmi	r5, r5
 800f900:	2f6f      	cmp	r7, #111	@ 0x6f
 800f902:	4852      	ldr	r0, [pc, #328]	@ (800fa4c <_printf_i+0x234>)
 800f904:	6033      	str	r3, [r6, #0]
 800f906:	bf14      	ite	ne
 800f908:	230a      	movne	r3, #10
 800f90a:	2308      	moveq	r3, #8
 800f90c:	2100      	movs	r1, #0
 800f90e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800f912:	6866      	ldr	r6, [r4, #4]
 800f914:	60a6      	str	r6, [r4, #8]
 800f916:	2e00      	cmp	r6, #0
 800f918:	db05      	blt.n	800f926 <_printf_i+0x10e>
 800f91a:	6821      	ldr	r1, [r4, #0]
 800f91c:	432e      	orrs	r6, r5
 800f91e:	f021 0104 	bic.w	r1, r1, #4
 800f922:	6021      	str	r1, [r4, #0]
 800f924:	d04b      	beq.n	800f9be <_printf_i+0x1a6>
 800f926:	4616      	mov	r6, r2
 800f928:	fbb5 f1f3 	udiv	r1, r5, r3
 800f92c:	fb03 5711 	mls	r7, r3, r1, r5
 800f930:	5dc7      	ldrb	r7, [r0, r7]
 800f932:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800f936:	462f      	mov	r7, r5
 800f938:	42bb      	cmp	r3, r7
 800f93a:	460d      	mov	r5, r1
 800f93c:	d9f4      	bls.n	800f928 <_printf_i+0x110>
 800f93e:	2b08      	cmp	r3, #8
 800f940:	d10b      	bne.n	800f95a <_printf_i+0x142>
 800f942:	6823      	ldr	r3, [r4, #0]
 800f944:	07df      	lsls	r7, r3, #31
 800f946:	d508      	bpl.n	800f95a <_printf_i+0x142>
 800f948:	6923      	ldr	r3, [r4, #16]
 800f94a:	6861      	ldr	r1, [r4, #4]
 800f94c:	4299      	cmp	r1, r3
 800f94e:	bfde      	ittt	le
 800f950:	2330      	movle	r3, #48	@ 0x30
 800f952:	f806 3c01 	strble.w	r3, [r6, #-1]
 800f956:	f106 36ff 	addle.w	r6, r6, #4294967295
 800f95a:	1b92      	subs	r2, r2, r6
 800f95c:	6122      	str	r2, [r4, #16]
 800f95e:	f8cd a000 	str.w	sl, [sp]
 800f962:	464b      	mov	r3, r9
 800f964:	aa03      	add	r2, sp, #12
 800f966:	4621      	mov	r1, r4
 800f968:	4640      	mov	r0, r8
 800f96a:	f7ff fee7 	bl	800f73c <_printf_common>
 800f96e:	3001      	adds	r0, #1
 800f970:	d14a      	bne.n	800fa08 <_printf_i+0x1f0>
 800f972:	f04f 30ff 	mov.w	r0, #4294967295
 800f976:	b004      	add	sp, #16
 800f978:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f97c:	6823      	ldr	r3, [r4, #0]
 800f97e:	f043 0320 	orr.w	r3, r3, #32
 800f982:	6023      	str	r3, [r4, #0]
 800f984:	4832      	ldr	r0, [pc, #200]	@ (800fa50 <_printf_i+0x238>)
 800f986:	2778      	movs	r7, #120	@ 0x78
 800f988:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800f98c:	6823      	ldr	r3, [r4, #0]
 800f98e:	6831      	ldr	r1, [r6, #0]
 800f990:	061f      	lsls	r7, r3, #24
 800f992:	f851 5b04 	ldr.w	r5, [r1], #4
 800f996:	d402      	bmi.n	800f99e <_printf_i+0x186>
 800f998:	065f      	lsls	r7, r3, #25
 800f99a:	bf48      	it	mi
 800f99c:	b2ad      	uxthmi	r5, r5
 800f99e:	6031      	str	r1, [r6, #0]
 800f9a0:	07d9      	lsls	r1, r3, #31
 800f9a2:	bf44      	itt	mi
 800f9a4:	f043 0320 	orrmi.w	r3, r3, #32
 800f9a8:	6023      	strmi	r3, [r4, #0]
 800f9aa:	b11d      	cbz	r5, 800f9b4 <_printf_i+0x19c>
 800f9ac:	2310      	movs	r3, #16
 800f9ae:	e7ad      	b.n	800f90c <_printf_i+0xf4>
 800f9b0:	4826      	ldr	r0, [pc, #152]	@ (800fa4c <_printf_i+0x234>)
 800f9b2:	e7e9      	b.n	800f988 <_printf_i+0x170>
 800f9b4:	6823      	ldr	r3, [r4, #0]
 800f9b6:	f023 0320 	bic.w	r3, r3, #32
 800f9ba:	6023      	str	r3, [r4, #0]
 800f9bc:	e7f6      	b.n	800f9ac <_printf_i+0x194>
 800f9be:	4616      	mov	r6, r2
 800f9c0:	e7bd      	b.n	800f93e <_printf_i+0x126>
 800f9c2:	6833      	ldr	r3, [r6, #0]
 800f9c4:	6825      	ldr	r5, [r4, #0]
 800f9c6:	6961      	ldr	r1, [r4, #20]
 800f9c8:	1d18      	adds	r0, r3, #4
 800f9ca:	6030      	str	r0, [r6, #0]
 800f9cc:	062e      	lsls	r6, r5, #24
 800f9ce:	681b      	ldr	r3, [r3, #0]
 800f9d0:	d501      	bpl.n	800f9d6 <_printf_i+0x1be>
 800f9d2:	6019      	str	r1, [r3, #0]
 800f9d4:	e002      	b.n	800f9dc <_printf_i+0x1c4>
 800f9d6:	0668      	lsls	r0, r5, #25
 800f9d8:	d5fb      	bpl.n	800f9d2 <_printf_i+0x1ba>
 800f9da:	8019      	strh	r1, [r3, #0]
 800f9dc:	2300      	movs	r3, #0
 800f9de:	6123      	str	r3, [r4, #16]
 800f9e0:	4616      	mov	r6, r2
 800f9e2:	e7bc      	b.n	800f95e <_printf_i+0x146>
 800f9e4:	6833      	ldr	r3, [r6, #0]
 800f9e6:	1d1a      	adds	r2, r3, #4
 800f9e8:	6032      	str	r2, [r6, #0]
 800f9ea:	681e      	ldr	r6, [r3, #0]
 800f9ec:	6862      	ldr	r2, [r4, #4]
 800f9ee:	2100      	movs	r1, #0
 800f9f0:	4630      	mov	r0, r6
 800f9f2:	f7f0 fc05 	bl	8000200 <memchr>
 800f9f6:	b108      	cbz	r0, 800f9fc <_printf_i+0x1e4>
 800f9f8:	1b80      	subs	r0, r0, r6
 800f9fa:	6060      	str	r0, [r4, #4]
 800f9fc:	6863      	ldr	r3, [r4, #4]
 800f9fe:	6123      	str	r3, [r4, #16]
 800fa00:	2300      	movs	r3, #0
 800fa02:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800fa06:	e7aa      	b.n	800f95e <_printf_i+0x146>
 800fa08:	6923      	ldr	r3, [r4, #16]
 800fa0a:	4632      	mov	r2, r6
 800fa0c:	4649      	mov	r1, r9
 800fa0e:	4640      	mov	r0, r8
 800fa10:	47d0      	blx	sl
 800fa12:	3001      	adds	r0, #1
 800fa14:	d0ad      	beq.n	800f972 <_printf_i+0x15a>
 800fa16:	6823      	ldr	r3, [r4, #0]
 800fa18:	079b      	lsls	r3, r3, #30
 800fa1a:	d413      	bmi.n	800fa44 <_printf_i+0x22c>
 800fa1c:	68e0      	ldr	r0, [r4, #12]
 800fa1e:	9b03      	ldr	r3, [sp, #12]
 800fa20:	4298      	cmp	r0, r3
 800fa22:	bfb8      	it	lt
 800fa24:	4618      	movlt	r0, r3
 800fa26:	e7a6      	b.n	800f976 <_printf_i+0x15e>
 800fa28:	2301      	movs	r3, #1
 800fa2a:	4632      	mov	r2, r6
 800fa2c:	4649      	mov	r1, r9
 800fa2e:	4640      	mov	r0, r8
 800fa30:	47d0      	blx	sl
 800fa32:	3001      	adds	r0, #1
 800fa34:	d09d      	beq.n	800f972 <_printf_i+0x15a>
 800fa36:	3501      	adds	r5, #1
 800fa38:	68e3      	ldr	r3, [r4, #12]
 800fa3a:	9903      	ldr	r1, [sp, #12]
 800fa3c:	1a5b      	subs	r3, r3, r1
 800fa3e:	42ab      	cmp	r3, r5
 800fa40:	dcf2      	bgt.n	800fa28 <_printf_i+0x210>
 800fa42:	e7eb      	b.n	800fa1c <_printf_i+0x204>
 800fa44:	2500      	movs	r5, #0
 800fa46:	f104 0619 	add.w	r6, r4, #25
 800fa4a:	e7f5      	b.n	800fa38 <_printf_i+0x220>
 800fa4c:	0801578e 	.word	0x0801578e
 800fa50:	0801579f 	.word	0x0801579f

0800fa54 <_scanf_float>:
 800fa54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fa58:	b087      	sub	sp, #28
 800fa5a:	4691      	mov	r9, r2
 800fa5c:	9303      	str	r3, [sp, #12]
 800fa5e:	688b      	ldr	r3, [r1, #8]
 800fa60:	1e5a      	subs	r2, r3, #1
 800fa62:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800fa66:	bf81      	itttt	hi
 800fa68:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800fa6c:	eb03 0b05 	addhi.w	fp, r3, r5
 800fa70:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800fa74:	608b      	strhi	r3, [r1, #8]
 800fa76:	680b      	ldr	r3, [r1, #0]
 800fa78:	460a      	mov	r2, r1
 800fa7a:	f04f 0500 	mov.w	r5, #0
 800fa7e:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800fa82:	f842 3b1c 	str.w	r3, [r2], #28
 800fa86:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800fa8a:	4680      	mov	r8, r0
 800fa8c:	460c      	mov	r4, r1
 800fa8e:	bf98      	it	ls
 800fa90:	f04f 0b00 	movls.w	fp, #0
 800fa94:	9201      	str	r2, [sp, #4]
 800fa96:	4616      	mov	r6, r2
 800fa98:	46aa      	mov	sl, r5
 800fa9a:	462f      	mov	r7, r5
 800fa9c:	9502      	str	r5, [sp, #8]
 800fa9e:	68a2      	ldr	r2, [r4, #8]
 800faa0:	b15a      	cbz	r2, 800faba <_scanf_float+0x66>
 800faa2:	f8d9 3000 	ldr.w	r3, [r9]
 800faa6:	781b      	ldrb	r3, [r3, #0]
 800faa8:	2b4e      	cmp	r3, #78	@ 0x4e
 800faaa:	d863      	bhi.n	800fb74 <_scanf_float+0x120>
 800faac:	2b40      	cmp	r3, #64	@ 0x40
 800faae:	d83b      	bhi.n	800fb28 <_scanf_float+0xd4>
 800fab0:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 800fab4:	b2c8      	uxtb	r0, r1
 800fab6:	280e      	cmp	r0, #14
 800fab8:	d939      	bls.n	800fb2e <_scanf_float+0xda>
 800faba:	b11f      	cbz	r7, 800fac4 <_scanf_float+0x70>
 800fabc:	6823      	ldr	r3, [r4, #0]
 800fabe:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800fac2:	6023      	str	r3, [r4, #0]
 800fac4:	f10a 3aff 	add.w	sl, sl, #4294967295
 800fac8:	f1ba 0f01 	cmp.w	sl, #1
 800facc:	f200 8114 	bhi.w	800fcf8 <_scanf_float+0x2a4>
 800fad0:	9b01      	ldr	r3, [sp, #4]
 800fad2:	429e      	cmp	r6, r3
 800fad4:	f200 8105 	bhi.w	800fce2 <_scanf_float+0x28e>
 800fad8:	2001      	movs	r0, #1
 800fada:	b007      	add	sp, #28
 800fadc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fae0:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800fae4:	2a0d      	cmp	r2, #13
 800fae6:	d8e8      	bhi.n	800faba <_scanf_float+0x66>
 800fae8:	a101      	add	r1, pc, #4	@ (adr r1, 800faf0 <_scanf_float+0x9c>)
 800faea:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800faee:	bf00      	nop
 800faf0:	0800fc39 	.word	0x0800fc39
 800faf4:	0800fabb 	.word	0x0800fabb
 800faf8:	0800fabb 	.word	0x0800fabb
 800fafc:	0800fabb 	.word	0x0800fabb
 800fb00:	0800fc95 	.word	0x0800fc95
 800fb04:	0800fc6f 	.word	0x0800fc6f
 800fb08:	0800fabb 	.word	0x0800fabb
 800fb0c:	0800fabb 	.word	0x0800fabb
 800fb10:	0800fc47 	.word	0x0800fc47
 800fb14:	0800fabb 	.word	0x0800fabb
 800fb18:	0800fabb 	.word	0x0800fabb
 800fb1c:	0800fabb 	.word	0x0800fabb
 800fb20:	0800fabb 	.word	0x0800fabb
 800fb24:	0800fc03 	.word	0x0800fc03
 800fb28:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 800fb2c:	e7da      	b.n	800fae4 <_scanf_float+0x90>
 800fb2e:	290e      	cmp	r1, #14
 800fb30:	d8c3      	bhi.n	800faba <_scanf_float+0x66>
 800fb32:	a001      	add	r0, pc, #4	@ (adr r0, 800fb38 <_scanf_float+0xe4>)
 800fb34:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800fb38:	0800fbf3 	.word	0x0800fbf3
 800fb3c:	0800fabb 	.word	0x0800fabb
 800fb40:	0800fbf3 	.word	0x0800fbf3
 800fb44:	0800fc83 	.word	0x0800fc83
 800fb48:	0800fabb 	.word	0x0800fabb
 800fb4c:	0800fb95 	.word	0x0800fb95
 800fb50:	0800fbd9 	.word	0x0800fbd9
 800fb54:	0800fbd9 	.word	0x0800fbd9
 800fb58:	0800fbd9 	.word	0x0800fbd9
 800fb5c:	0800fbd9 	.word	0x0800fbd9
 800fb60:	0800fbd9 	.word	0x0800fbd9
 800fb64:	0800fbd9 	.word	0x0800fbd9
 800fb68:	0800fbd9 	.word	0x0800fbd9
 800fb6c:	0800fbd9 	.word	0x0800fbd9
 800fb70:	0800fbd9 	.word	0x0800fbd9
 800fb74:	2b6e      	cmp	r3, #110	@ 0x6e
 800fb76:	d809      	bhi.n	800fb8c <_scanf_float+0x138>
 800fb78:	2b60      	cmp	r3, #96	@ 0x60
 800fb7a:	d8b1      	bhi.n	800fae0 <_scanf_float+0x8c>
 800fb7c:	2b54      	cmp	r3, #84	@ 0x54
 800fb7e:	d07b      	beq.n	800fc78 <_scanf_float+0x224>
 800fb80:	2b59      	cmp	r3, #89	@ 0x59
 800fb82:	d19a      	bne.n	800faba <_scanf_float+0x66>
 800fb84:	2d07      	cmp	r5, #7
 800fb86:	d198      	bne.n	800faba <_scanf_float+0x66>
 800fb88:	2508      	movs	r5, #8
 800fb8a:	e02f      	b.n	800fbec <_scanf_float+0x198>
 800fb8c:	2b74      	cmp	r3, #116	@ 0x74
 800fb8e:	d073      	beq.n	800fc78 <_scanf_float+0x224>
 800fb90:	2b79      	cmp	r3, #121	@ 0x79
 800fb92:	e7f6      	b.n	800fb82 <_scanf_float+0x12e>
 800fb94:	6821      	ldr	r1, [r4, #0]
 800fb96:	05c8      	lsls	r0, r1, #23
 800fb98:	d51e      	bpl.n	800fbd8 <_scanf_float+0x184>
 800fb9a:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800fb9e:	6021      	str	r1, [r4, #0]
 800fba0:	3701      	adds	r7, #1
 800fba2:	f1bb 0f00 	cmp.w	fp, #0
 800fba6:	d003      	beq.n	800fbb0 <_scanf_float+0x15c>
 800fba8:	3201      	adds	r2, #1
 800fbaa:	f10b 3bff 	add.w	fp, fp, #4294967295
 800fbae:	60a2      	str	r2, [r4, #8]
 800fbb0:	68a3      	ldr	r3, [r4, #8]
 800fbb2:	3b01      	subs	r3, #1
 800fbb4:	60a3      	str	r3, [r4, #8]
 800fbb6:	6923      	ldr	r3, [r4, #16]
 800fbb8:	3301      	adds	r3, #1
 800fbba:	6123      	str	r3, [r4, #16]
 800fbbc:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800fbc0:	3b01      	subs	r3, #1
 800fbc2:	2b00      	cmp	r3, #0
 800fbc4:	f8c9 3004 	str.w	r3, [r9, #4]
 800fbc8:	f340 8082 	ble.w	800fcd0 <_scanf_float+0x27c>
 800fbcc:	f8d9 3000 	ldr.w	r3, [r9]
 800fbd0:	3301      	adds	r3, #1
 800fbd2:	f8c9 3000 	str.w	r3, [r9]
 800fbd6:	e762      	b.n	800fa9e <_scanf_float+0x4a>
 800fbd8:	eb1a 0105 	adds.w	r1, sl, r5
 800fbdc:	f47f af6d 	bne.w	800faba <_scanf_float+0x66>
 800fbe0:	6822      	ldr	r2, [r4, #0]
 800fbe2:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 800fbe6:	6022      	str	r2, [r4, #0]
 800fbe8:	460d      	mov	r5, r1
 800fbea:	468a      	mov	sl, r1
 800fbec:	f806 3b01 	strb.w	r3, [r6], #1
 800fbf0:	e7de      	b.n	800fbb0 <_scanf_float+0x15c>
 800fbf2:	6822      	ldr	r2, [r4, #0]
 800fbf4:	0610      	lsls	r0, r2, #24
 800fbf6:	f57f af60 	bpl.w	800faba <_scanf_float+0x66>
 800fbfa:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800fbfe:	6022      	str	r2, [r4, #0]
 800fc00:	e7f4      	b.n	800fbec <_scanf_float+0x198>
 800fc02:	f1ba 0f00 	cmp.w	sl, #0
 800fc06:	d10c      	bne.n	800fc22 <_scanf_float+0x1ce>
 800fc08:	b977      	cbnz	r7, 800fc28 <_scanf_float+0x1d4>
 800fc0a:	6822      	ldr	r2, [r4, #0]
 800fc0c:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800fc10:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800fc14:	d108      	bne.n	800fc28 <_scanf_float+0x1d4>
 800fc16:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800fc1a:	6022      	str	r2, [r4, #0]
 800fc1c:	f04f 0a01 	mov.w	sl, #1
 800fc20:	e7e4      	b.n	800fbec <_scanf_float+0x198>
 800fc22:	f1ba 0f02 	cmp.w	sl, #2
 800fc26:	d050      	beq.n	800fcca <_scanf_float+0x276>
 800fc28:	2d01      	cmp	r5, #1
 800fc2a:	d002      	beq.n	800fc32 <_scanf_float+0x1de>
 800fc2c:	2d04      	cmp	r5, #4
 800fc2e:	f47f af44 	bne.w	800faba <_scanf_float+0x66>
 800fc32:	3501      	adds	r5, #1
 800fc34:	b2ed      	uxtb	r5, r5
 800fc36:	e7d9      	b.n	800fbec <_scanf_float+0x198>
 800fc38:	f1ba 0f01 	cmp.w	sl, #1
 800fc3c:	f47f af3d 	bne.w	800faba <_scanf_float+0x66>
 800fc40:	f04f 0a02 	mov.w	sl, #2
 800fc44:	e7d2      	b.n	800fbec <_scanf_float+0x198>
 800fc46:	b975      	cbnz	r5, 800fc66 <_scanf_float+0x212>
 800fc48:	2f00      	cmp	r7, #0
 800fc4a:	f47f af37 	bne.w	800fabc <_scanf_float+0x68>
 800fc4e:	6822      	ldr	r2, [r4, #0]
 800fc50:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800fc54:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800fc58:	f040 8103 	bne.w	800fe62 <_scanf_float+0x40e>
 800fc5c:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800fc60:	6022      	str	r2, [r4, #0]
 800fc62:	2501      	movs	r5, #1
 800fc64:	e7c2      	b.n	800fbec <_scanf_float+0x198>
 800fc66:	2d03      	cmp	r5, #3
 800fc68:	d0e3      	beq.n	800fc32 <_scanf_float+0x1de>
 800fc6a:	2d05      	cmp	r5, #5
 800fc6c:	e7df      	b.n	800fc2e <_scanf_float+0x1da>
 800fc6e:	2d02      	cmp	r5, #2
 800fc70:	f47f af23 	bne.w	800faba <_scanf_float+0x66>
 800fc74:	2503      	movs	r5, #3
 800fc76:	e7b9      	b.n	800fbec <_scanf_float+0x198>
 800fc78:	2d06      	cmp	r5, #6
 800fc7a:	f47f af1e 	bne.w	800faba <_scanf_float+0x66>
 800fc7e:	2507      	movs	r5, #7
 800fc80:	e7b4      	b.n	800fbec <_scanf_float+0x198>
 800fc82:	6822      	ldr	r2, [r4, #0]
 800fc84:	0591      	lsls	r1, r2, #22
 800fc86:	f57f af18 	bpl.w	800faba <_scanf_float+0x66>
 800fc8a:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800fc8e:	6022      	str	r2, [r4, #0]
 800fc90:	9702      	str	r7, [sp, #8]
 800fc92:	e7ab      	b.n	800fbec <_scanf_float+0x198>
 800fc94:	6822      	ldr	r2, [r4, #0]
 800fc96:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 800fc9a:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800fc9e:	d005      	beq.n	800fcac <_scanf_float+0x258>
 800fca0:	0550      	lsls	r0, r2, #21
 800fca2:	f57f af0a 	bpl.w	800faba <_scanf_float+0x66>
 800fca6:	2f00      	cmp	r7, #0
 800fca8:	f000 80db 	beq.w	800fe62 <_scanf_float+0x40e>
 800fcac:	0591      	lsls	r1, r2, #22
 800fcae:	bf58      	it	pl
 800fcb0:	9902      	ldrpl	r1, [sp, #8]
 800fcb2:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800fcb6:	bf58      	it	pl
 800fcb8:	1a79      	subpl	r1, r7, r1
 800fcba:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800fcbe:	bf58      	it	pl
 800fcc0:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800fcc4:	6022      	str	r2, [r4, #0]
 800fcc6:	2700      	movs	r7, #0
 800fcc8:	e790      	b.n	800fbec <_scanf_float+0x198>
 800fcca:	f04f 0a03 	mov.w	sl, #3
 800fcce:	e78d      	b.n	800fbec <_scanf_float+0x198>
 800fcd0:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800fcd4:	4649      	mov	r1, r9
 800fcd6:	4640      	mov	r0, r8
 800fcd8:	4798      	blx	r3
 800fcda:	2800      	cmp	r0, #0
 800fcdc:	f43f aedf 	beq.w	800fa9e <_scanf_float+0x4a>
 800fce0:	e6eb      	b.n	800faba <_scanf_float+0x66>
 800fce2:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800fce6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800fcea:	464a      	mov	r2, r9
 800fcec:	4640      	mov	r0, r8
 800fcee:	4798      	blx	r3
 800fcf0:	6923      	ldr	r3, [r4, #16]
 800fcf2:	3b01      	subs	r3, #1
 800fcf4:	6123      	str	r3, [r4, #16]
 800fcf6:	e6eb      	b.n	800fad0 <_scanf_float+0x7c>
 800fcf8:	1e6b      	subs	r3, r5, #1
 800fcfa:	2b06      	cmp	r3, #6
 800fcfc:	d824      	bhi.n	800fd48 <_scanf_float+0x2f4>
 800fcfe:	2d02      	cmp	r5, #2
 800fd00:	d836      	bhi.n	800fd70 <_scanf_float+0x31c>
 800fd02:	9b01      	ldr	r3, [sp, #4]
 800fd04:	429e      	cmp	r6, r3
 800fd06:	f67f aee7 	bls.w	800fad8 <_scanf_float+0x84>
 800fd0a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800fd0e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800fd12:	464a      	mov	r2, r9
 800fd14:	4640      	mov	r0, r8
 800fd16:	4798      	blx	r3
 800fd18:	6923      	ldr	r3, [r4, #16]
 800fd1a:	3b01      	subs	r3, #1
 800fd1c:	6123      	str	r3, [r4, #16]
 800fd1e:	e7f0      	b.n	800fd02 <_scanf_float+0x2ae>
 800fd20:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800fd24:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 800fd28:	464a      	mov	r2, r9
 800fd2a:	4640      	mov	r0, r8
 800fd2c:	4798      	blx	r3
 800fd2e:	6923      	ldr	r3, [r4, #16]
 800fd30:	3b01      	subs	r3, #1
 800fd32:	6123      	str	r3, [r4, #16]
 800fd34:	f10a 3aff 	add.w	sl, sl, #4294967295
 800fd38:	fa5f fa8a 	uxtb.w	sl, sl
 800fd3c:	f1ba 0f02 	cmp.w	sl, #2
 800fd40:	d1ee      	bne.n	800fd20 <_scanf_float+0x2cc>
 800fd42:	3d03      	subs	r5, #3
 800fd44:	b2ed      	uxtb	r5, r5
 800fd46:	1b76      	subs	r6, r6, r5
 800fd48:	6823      	ldr	r3, [r4, #0]
 800fd4a:	05da      	lsls	r2, r3, #23
 800fd4c:	d530      	bpl.n	800fdb0 <_scanf_float+0x35c>
 800fd4e:	055b      	lsls	r3, r3, #21
 800fd50:	d511      	bpl.n	800fd76 <_scanf_float+0x322>
 800fd52:	9b01      	ldr	r3, [sp, #4]
 800fd54:	429e      	cmp	r6, r3
 800fd56:	f67f aebf 	bls.w	800fad8 <_scanf_float+0x84>
 800fd5a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800fd5e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800fd62:	464a      	mov	r2, r9
 800fd64:	4640      	mov	r0, r8
 800fd66:	4798      	blx	r3
 800fd68:	6923      	ldr	r3, [r4, #16]
 800fd6a:	3b01      	subs	r3, #1
 800fd6c:	6123      	str	r3, [r4, #16]
 800fd6e:	e7f0      	b.n	800fd52 <_scanf_float+0x2fe>
 800fd70:	46aa      	mov	sl, r5
 800fd72:	46b3      	mov	fp, r6
 800fd74:	e7de      	b.n	800fd34 <_scanf_float+0x2e0>
 800fd76:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800fd7a:	6923      	ldr	r3, [r4, #16]
 800fd7c:	2965      	cmp	r1, #101	@ 0x65
 800fd7e:	f103 33ff 	add.w	r3, r3, #4294967295
 800fd82:	f106 35ff 	add.w	r5, r6, #4294967295
 800fd86:	6123      	str	r3, [r4, #16]
 800fd88:	d00c      	beq.n	800fda4 <_scanf_float+0x350>
 800fd8a:	2945      	cmp	r1, #69	@ 0x45
 800fd8c:	d00a      	beq.n	800fda4 <_scanf_float+0x350>
 800fd8e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800fd92:	464a      	mov	r2, r9
 800fd94:	4640      	mov	r0, r8
 800fd96:	4798      	blx	r3
 800fd98:	6923      	ldr	r3, [r4, #16]
 800fd9a:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800fd9e:	3b01      	subs	r3, #1
 800fda0:	1eb5      	subs	r5, r6, #2
 800fda2:	6123      	str	r3, [r4, #16]
 800fda4:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800fda8:	464a      	mov	r2, r9
 800fdaa:	4640      	mov	r0, r8
 800fdac:	4798      	blx	r3
 800fdae:	462e      	mov	r6, r5
 800fdb0:	6822      	ldr	r2, [r4, #0]
 800fdb2:	f012 0210 	ands.w	r2, r2, #16
 800fdb6:	d001      	beq.n	800fdbc <_scanf_float+0x368>
 800fdb8:	2000      	movs	r0, #0
 800fdba:	e68e      	b.n	800fada <_scanf_float+0x86>
 800fdbc:	7032      	strb	r2, [r6, #0]
 800fdbe:	6823      	ldr	r3, [r4, #0]
 800fdc0:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800fdc4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800fdc8:	d125      	bne.n	800fe16 <_scanf_float+0x3c2>
 800fdca:	9b02      	ldr	r3, [sp, #8]
 800fdcc:	429f      	cmp	r7, r3
 800fdce:	d00a      	beq.n	800fde6 <_scanf_float+0x392>
 800fdd0:	1bda      	subs	r2, r3, r7
 800fdd2:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 800fdd6:	429e      	cmp	r6, r3
 800fdd8:	bf28      	it	cs
 800fdda:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 800fdde:	4922      	ldr	r1, [pc, #136]	@ (800fe68 <_scanf_float+0x414>)
 800fde0:	4630      	mov	r0, r6
 800fde2:	f000 fa6d 	bl	80102c0 <siprintf>
 800fde6:	9901      	ldr	r1, [sp, #4]
 800fde8:	2200      	movs	r2, #0
 800fdea:	4640      	mov	r0, r8
 800fdec:	f002 fe18 	bl	8012a20 <_strtod_r>
 800fdf0:	9b03      	ldr	r3, [sp, #12]
 800fdf2:	6821      	ldr	r1, [r4, #0]
 800fdf4:	681b      	ldr	r3, [r3, #0]
 800fdf6:	f011 0f02 	tst.w	r1, #2
 800fdfa:	ec57 6b10 	vmov	r6, r7, d0
 800fdfe:	f103 0204 	add.w	r2, r3, #4
 800fe02:	d015      	beq.n	800fe30 <_scanf_float+0x3dc>
 800fe04:	9903      	ldr	r1, [sp, #12]
 800fe06:	600a      	str	r2, [r1, #0]
 800fe08:	681b      	ldr	r3, [r3, #0]
 800fe0a:	e9c3 6700 	strd	r6, r7, [r3]
 800fe0e:	68e3      	ldr	r3, [r4, #12]
 800fe10:	3301      	adds	r3, #1
 800fe12:	60e3      	str	r3, [r4, #12]
 800fe14:	e7d0      	b.n	800fdb8 <_scanf_float+0x364>
 800fe16:	9b04      	ldr	r3, [sp, #16]
 800fe18:	2b00      	cmp	r3, #0
 800fe1a:	d0e4      	beq.n	800fde6 <_scanf_float+0x392>
 800fe1c:	9905      	ldr	r1, [sp, #20]
 800fe1e:	230a      	movs	r3, #10
 800fe20:	3101      	adds	r1, #1
 800fe22:	4640      	mov	r0, r8
 800fe24:	f002 fe7c 	bl	8012b20 <_strtol_r>
 800fe28:	9b04      	ldr	r3, [sp, #16]
 800fe2a:	9e05      	ldr	r6, [sp, #20]
 800fe2c:	1ac2      	subs	r2, r0, r3
 800fe2e:	e7d0      	b.n	800fdd2 <_scanf_float+0x37e>
 800fe30:	f011 0f04 	tst.w	r1, #4
 800fe34:	9903      	ldr	r1, [sp, #12]
 800fe36:	600a      	str	r2, [r1, #0]
 800fe38:	d1e6      	bne.n	800fe08 <_scanf_float+0x3b4>
 800fe3a:	681d      	ldr	r5, [r3, #0]
 800fe3c:	4632      	mov	r2, r6
 800fe3e:	463b      	mov	r3, r7
 800fe40:	4630      	mov	r0, r6
 800fe42:	4639      	mov	r1, r7
 800fe44:	f7f0 fe8a 	bl	8000b5c <__aeabi_dcmpun>
 800fe48:	b128      	cbz	r0, 800fe56 <_scanf_float+0x402>
 800fe4a:	4808      	ldr	r0, [pc, #32]	@ (800fe6c <_scanf_float+0x418>)
 800fe4c:	f000 fbc0 	bl	80105d0 <nanf>
 800fe50:	ed85 0a00 	vstr	s0, [r5]
 800fe54:	e7db      	b.n	800fe0e <_scanf_float+0x3ba>
 800fe56:	4630      	mov	r0, r6
 800fe58:	4639      	mov	r1, r7
 800fe5a:	f7f0 fedd 	bl	8000c18 <__aeabi_d2f>
 800fe5e:	6028      	str	r0, [r5, #0]
 800fe60:	e7d5      	b.n	800fe0e <_scanf_float+0x3ba>
 800fe62:	2700      	movs	r7, #0
 800fe64:	e62e      	b.n	800fac4 <_scanf_float+0x70>
 800fe66:	bf00      	nop
 800fe68:	080157b0 	.word	0x080157b0
 800fe6c:	080157f0 	.word	0x080157f0

0800fe70 <__sflush_r>:
 800fe70:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800fe74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fe78:	0716      	lsls	r6, r2, #28
 800fe7a:	4605      	mov	r5, r0
 800fe7c:	460c      	mov	r4, r1
 800fe7e:	d454      	bmi.n	800ff2a <__sflush_r+0xba>
 800fe80:	684b      	ldr	r3, [r1, #4]
 800fe82:	2b00      	cmp	r3, #0
 800fe84:	dc02      	bgt.n	800fe8c <__sflush_r+0x1c>
 800fe86:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800fe88:	2b00      	cmp	r3, #0
 800fe8a:	dd48      	ble.n	800ff1e <__sflush_r+0xae>
 800fe8c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800fe8e:	2e00      	cmp	r6, #0
 800fe90:	d045      	beq.n	800ff1e <__sflush_r+0xae>
 800fe92:	2300      	movs	r3, #0
 800fe94:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800fe98:	682f      	ldr	r7, [r5, #0]
 800fe9a:	6a21      	ldr	r1, [r4, #32]
 800fe9c:	602b      	str	r3, [r5, #0]
 800fe9e:	d030      	beq.n	800ff02 <__sflush_r+0x92>
 800fea0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800fea2:	89a3      	ldrh	r3, [r4, #12]
 800fea4:	0759      	lsls	r1, r3, #29
 800fea6:	d505      	bpl.n	800feb4 <__sflush_r+0x44>
 800fea8:	6863      	ldr	r3, [r4, #4]
 800feaa:	1ad2      	subs	r2, r2, r3
 800feac:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800feae:	b10b      	cbz	r3, 800feb4 <__sflush_r+0x44>
 800feb0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800feb2:	1ad2      	subs	r2, r2, r3
 800feb4:	2300      	movs	r3, #0
 800feb6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800feb8:	6a21      	ldr	r1, [r4, #32]
 800feba:	4628      	mov	r0, r5
 800febc:	47b0      	blx	r6
 800febe:	1c43      	adds	r3, r0, #1
 800fec0:	89a3      	ldrh	r3, [r4, #12]
 800fec2:	d106      	bne.n	800fed2 <__sflush_r+0x62>
 800fec4:	6829      	ldr	r1, [r5, #0]
 800fec6:	291d      	cmp	r1, #29
 800fec8:	d82b      	bhi.n	800ff22 <__sflush_r+0xb2>
 800feca:	4a2a      	ldr	r2, [pc, #168]	@ (800ff74 <__sflush_r+0x104>)
 800fecc:	40ca      	lsrs	r2, r1
 800fece:	07d6      	lsls	r6, r2, #31
 800fed0:	d527      	bpl.n	800ff22 <__sflush_r+0xb2>
 800fed2:	2200      	movs	r2, #0
 800fed4:	6062      	str	r2, [r4, #4]
 800fed6:	04d9      	lsls	r1, r3, #19
 800fed8:	6922      	ldr	r2, [r4, #16]
 800feda:	6022      	str	r2, [r4, #0]
 800fedc:	d504      	bpl.n	800fee8 <__sflush_r+0x78>
 800fede:	1c42      	adds	r2, r0, #1
 800fee0:	d101      	bne.n	800fee6 <__sflush_r+0x76>
 800fee2:	682b      	ldr	r3, [r5, #0]
 800fee4:	b903      	cbnz	r3, 800fee8 <__sflush_r+0x78>
 800fee6:	6560      	str	r0, [r4, #84]	@ 0x54
 800fee8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800feea:	602f      	str	r7, [r5, #0]
 800feec:	b1b9      	cbz	r1, 800ff1e <__sflush_r+0xae>
 800feee:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800fef2:	4299      	cmp	r1, r3
 800fef4:	d002      	beq.n	800fefc <__sflush_r+0x8c>
 800fef6:	4628      	mov	r0, r5
 800fef8:	f001 f9e6 	bl	80112c8 <_free_r>
 800fefc:	2300      	movs	r3, #0
 800fefe:	6363      	str	r3, [r4, #52]	@ 0x34
 800ff00:	e00d      	b.n	800ff1e <__sflush_r+0xae>
 800ff02:	2301      	movs	r3, #1
 800ff04:	4628      	mov	r0, r5
 800ff06:	47b0      	blx	r6
 800ff08:	4602      	mov	r2, r0
 800ff0a:	1c50      	adds	r0, r2, #1
 800ff0c:	d1c9      	bne.n	800fea2 <__sflush_r+0x32>
 800ff0e:	682b      	ldr	r3, [r5, #0]
 800ff10:	2b00      	cmp	r3, #0
 800ff12:	d0c6      	beq.n	800fea2 <__sflush_r+0x32>
 800ff14:	2b1d      	cmp	r3, #29
 800ff16:	d001      	beq.n	800ff1c <__sflush_r+0xac>
 800ff18:	2b16      	cmp	r3, #22
 800ff1a:	d11e      	bne.n	800ff5a <__sflush_r+0xea>
 800ff1c:	602f      	str	r7, [r5, #0]
 800ff1e:	2000      	movs	r0, #0
 800ff20:	e022      	b.n	800ff68 <__sflush_r+0xf8>
 800ff22:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ff26:	b21b      	sxth	r3, r3
 800ff28:	e01b      	b.n	800ff62 <__sflush_r+0xf2>
 800ff2a:	690f      	ldr	r7, [r1, #16]
 800ff2c:	2f00      	cmp	r7, #0
 800ff2e:	d0f6      	beq.n	800ff1e <__sflush_r+0xae>
 800ff30:	0793      	lsls	r3, r2, #30
 800ff32:	680e      	ldr	r6, [r1, #0]
 800ff34:	bf08      	it	eq
 800ff36:	694b      	ldreq	r3, [r1, #20]
 800ff38:	600f      	str	r7, [r1, #0]
 800ff3a:	bf18      	it	ne
 800ff3c:	2300      	movne	r3, #0
 800ff3e:	eba6 0807 	sub.w	r8, r6, r7
 800ff42:	608b      	str	r3, [r1, #8]
 800ff44:	f1b8 0f00 	cmp.w	r8, #0
 800ff48:	dde9      	ble.n	800ff1e <__sflush_r+0xae>
 800ff4a:	6a21      	ldr	r1, [r4, #32]
 800ff4c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800ff4e:	4643      	mov	r3, r8
 800ff50:	463a      	mov	r2, r7
 800ff52:	4628      	mov	r0, r5
 800ff54:	47b0      	blx	r6
 800ff56:	2800      	cmp	r0, #0
 800ff58:	dc08      	bgt.n	800ff6c <__sflush_r+0xfc>
 800ff5a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ff5e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ff62:	81a3      	strh	r3, [r4, #12]
 800ff64:	f04f 30ff 	mov.w	r0, #4294967295
 800ff68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ff6c:	4407      	add	r7, r0
 800ff6e:	eba8 0800 	sub.w	r8, r8, r0
 800ff72:	e7e7      	b.n	800ff44 <__sflush_r+0xd4>
 800ff74:	20400001 	.word	0x20400001

0800ff78 <_fflush_r>:
 800ff78:	b538      	push	{r3, r4, r5, lr}
 800ff7a:	690b      	ldr	r3, [r1, #16]
 800ff7c:	4605      	mov	r5, r0
 800ff7e:	460c      	mov	r4, r1
 800ff80:	b913      	cbnz	r3, 800ff88 <_fflush_r+0x10>
 800ff82:	2500      	movs	r5, #0
 800ff84:	4628      	mov	r0, r5
 800ff86:	bd38      	pop	{r3, r4, r5, pc}
 800ff88:	b118      	cbz	r0, 800ff92 <_fflush_r+0x1a>
 800ff8a:	6a03      	ldr	r3, [r0, #32]
 800ff8c:	b90b      	cbnz	r3, 800ff92 <_fflush_r+0x1a>
 800ff8e:	f000 f8bb 	bl	8010108 <__sinit>
 800ff92:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ff96:	2b00      	cmp	r3, #0
 800ff98:	d0f3      	beq.n	800ff82 <_fflush_r+0xa>
 800ff9a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800ff9c:	07d0      	lsls	r0, r2, #31
 800ff9e:	d404      	bmi.n	800ffaa <_fflush_r+0x32>
 800ffa0:	0599      	lsls	r1, r3, #22
 800ffa2:	d402      	bmi.n	800ffaa <_fflush_r+0x32>
 800ffa4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ffa6:	f000 fb02 	bl	80105ae <__retarget_lock_acquire_recursive>
 800ffaa:	4628      	mov	r0, r5
 800ffac:	4621      	mov	r1, r4
 800ffae:	f7ff ff5f 	bl	800fe70 <__sflush_r>
 800ffb2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800ffb4:	07da      	lsls	r2, r3, #31
 800ffb6:	4605      	mov	r5, r0
 800ffb8:	d4e4      	bmi.n	800ff84 <_fflush_r+0xc>
 800ffba:	89a3      	ldrh	r3, [r4, #12]
 800ffbc:	059b      	lsls	r3, r3, #22
 800ffbe:	d4e1      	bmi.n	800ff84 <_fflush_r+0xc>
 800ffc0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ffc2:	f000 faf5 	bl	80105b0 <__retarget_lock_release_recursive>
 800ffc6:	e7dd      	b.n	800ff84 <_fflush_r+0xc>

0800ffc8 <fflush>:
 800ffc8:	4601      	mov	r1, r0
 800ffca:	b920      	cbnz	r0, 800ffd6 <fflush+0xe>
 800ffcc:	4a04      	ldr	r2, [pc, #16]	@ (800ffe0 <fflush+0x18>)
 800ffce:	4905      	ldr	r1, [pc, #20]	@ (800ffe4 <fflush+0x1c>)
 800ffd0:	4805      	ldr	r0, [pc, #20]	@ (800ffe8 <fflush+0x20>)
 800ffd2:	f000 b8b1 	b.w	8010138 <_fwalk_sglue>
 800ffd6:	4b05      	ldr	r3, [pc, #20]	@ (800ffec <fflush+0x24>)
 800ffd8:	6818      	ldr	r0, [r3, #0]
 800ffda:	f7ff bfcd 	b.w	800ff78 <_fflush_r>
 800ffde:	bf00      	nop
 800ffe0:	2000d134 	.word	0x2000d134
 800ffe4:	0800ff79 	.word	0x0800ff79
 800ffe8:	2000d144 	.word	0x2000d144
 800ffec:	2000d140 	.word	0x2000d140

0800fff0 <std>:
 800fff0:	2300      	movs	r3, #0
 800fff2:	b510      	push	{r4, lr}
 800fff4:	4604      	mov	r4, r0
 800fff6:	e9c0 3300 	strd	r3, r3, [r0]
 800fffa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800fffe:	6083      	str	r3, [r0, #8]
 8010000:	8181      	strh	r1, [r0, #12]
 8010002:	6643      	str	r3, [r0, #100]	@ 0x64
 8010004:	81c2      	strh	r2, [r0, #14]
 8010006:	6183      	str	r3, [r0, #24]
 8010008:	4619      	mov	r1, r3
 801000a:	2208      	movs	r2, #8
 801000c:	305c      	adds	r0, #92	@ 0x5c
 801000e:	f000 fa51 	bl	80104b4 <memset>
 8010012:	4b0d      	ldr	r3, [pc, #52]	@ (8010048 <std+0x58>)
 8010014:	6263      	str	r3, [r4, #36]	@ 0x24
 8010016:	4b0d      	ldr	r3, [pc, #52]	@ (801004c <std+0x5c>)
 8010018:	62a3      	str	r3, [r4, #40]	@ 0x28
 801001a:	4b0d      	ldr	r3, [pc, #52]	@ (8010050 <std+0x60>)
 801001c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 801001e:	4b0d      	ldr	r3, [pc, #52]	@ (8010054 <std+0x64>)
 8010020:	6323      	str	r3, [r4, #48]	@ 0x30
 8010022:	4b0d      	ldr	r3, [pc, #52]	@ (8010058 <std+0x68>)
 8010024:	6224      	str	r4, [r4, #32]
 8010026:	429c      	cmp	r4, r3
 8010028:	d006      	beq.n	8010038 <std+0x48>
 801002a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 801002e:	4294      	cmp	r4, r2
 8010030:	d002      	beq.n	8010038 <std+0x48>
 8010032:	33d0      	adds	r3, #208	@ 0xd0
 8010034:	429c      	cmp	r4, r3
 8010036:	d105      	bne.n	8010044 <std+0x54>
 8010038:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 801003c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010040:	f000 bab4 	b.w	80105ac <__retarget_lock_init_recursive>
 8010044:	bd10      	pop	{r4, pc}
 8010046:	bf00      	nop
 8010048:	08010305 	.word	0x08010305
 801004c:	08010327 	.word	0x08010327
 8010050:	0801035f 	.word	0x0801035f
 8010054:	08010383 	.word	0x08010383
 8010058:	200163e8 	.word	0x200163e8

0801005c <stdio_exit_handler>:
 801005c:	4a02      	ldr	r2, [pc, #8]	@ (8010068 <stdio_exit_handler+0xc>)
 801005e:	4903      	ldr	r1, [pc, #12]	@ (801006c <stdio_exit_handler+0x10>)
 8010060:	4803      	ldr	r0, [pc, #12]	@ (8010070 <stdio_exit_handler+0x14>)
 8010062:	f000 b869 	b.w	8010138 <_fwalk_sglue>
 8010066:	bf00      	nop
 8010068:	2000d134 	.word	0x2000d134
 801006c:	0800ff79 	.word	0x0800ff79
 8010070:	2000d144 	.word	0x2000d144

08010074 <cleanup_stdio>:
 8010074:	6841      	ldr	r1, [r0, #4]
 8010076:	4b0c      	ldr	r3, [pc, #48]	@ (80100a8 <cleanup_stdio+0x34>)
 8010078:	4299      	cmp	r1, r3
 801007a:	b510      	push	{r4, lr}
 801007c:	4604      	mov	r4, r0
 801007e:	d001      	beq.n	8010084 <cleanup_stdio+0x10>
 8010080:	f7ff ff7a 	bl	800ff78 <_fflush_r>
 8010084:	68a1      	ldr	r1, [r4, #8]
 8010086:	4b09      	ldr	r3, [pc, #36]	@ (80100ac <cleanup_stdio+0x38>)
 8010088:	4299      	cmp	r1, r3
 801008a:	d002      	beq.n	8010092 <cleanup_stdio+0x1e>
 801008c:	4620      	mov	r0, r4
 801008e:	f7ff ff73 	bl	800ff78 <_fflush_r>
 8010092:	68e1      	ldr	r1, [r4, #12]
 8010094:	4b06      	ldr	r3, [pc, #24]	@ (80100b0 <cleanup_stdio+0x3c>)
 8010096:	4299      	cmp	r1, r3
 8010098:	d004      	beq.n	80100a4 <cleanup_stdio+0x30>
 801009a:	4620      	mov	r0, r4
 801009c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80100a0:	f7ff bf6a 	b.w	800ff78 <_fflush_r>
 80100a4:	bd10      	pop	{r4, pc}
 80100a6:	bf00      	nop
 80100a8:	200163e8 	.word	0x200163e8
 80100ac:	20016450 	.word	0x20016450
 80100b0:	200164b8 	.word	0x200164b8

080100b4 <global_stdio_init.part.0>:
 80100b4:	b510      	push	{r4, lr}
 80100b6:	4b0b      	ldr	r3, [pc, #44]	@ (80100e4 <global_stdio_init.part.0+0x30>)
 80100b8:	4c0b      	ldr	r4, [pc, #44]	@ (80100e8 <global_stdio_init.part.0+0x34>)
 80100ba:	4a0c      	ldr	r2, [pc, #48]	@ (80100ec <global_stdio_init.part.0+0x38>)
 80100bc:	601a      	str	r2, [r3, #0]
 80100be:	4620      	mov	r0, r4
 80100c0:	2200      	movs	r2, #0
 80100c2:	2104      	movs	r1, #4
 80100c4:	f7ff ff94 	bl	800fff0 <std>
 80100c8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80100cc:	2201      	movs	r2, #1
 80100ce:	2109      	movs	r1, #9
 80100d0:	f7ff ff8e 	bl	800fff0 <std>
 80100d4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80100d8:	2202      	movs	r2, #2
 80100da:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80100de:	2112      	movs	r1, #18
 80100e0:	f7ff bf86 	b.w	800fff0 <std>
 80100e4:	20016520 	.word	0x20016520
 80100e8:	200163e8 	.word	0x200163e8
 80100ec:	0801005d 	.word	0x0801005d

080100f0 <__sfp_lock_acquire>:
 80100f0:	4801      	ldr	r0, [pc, #4]	@ (80100f8 <__sfp_lock_acquire+0x8>)
 80100f2:	f000 ba5c 	b.w	80105ae <__retarget_lock_acquire_recursive>
 80100f6:	bf00      	nop
 80100f8:	20016529 	.word	0x20016529

080100fc <__sfp_lock_release>:
 80100fc:	4801      	ldr	r0, [pc, #4]	@ (8010104 <__sfp_lock_release+0x8>)
 80100fe:	f000 ba57 	b.w	80105b0 <__retarget_lock_release_recursive>
 8010102:	bf00      	nop
 8010104:	20016529 	.word	0x20016529

08010108 <__sinit>:
 8010108:	b510      	push	{r4, lr}
 801010a:	4604      	mov	r4, r0
 801010c:	f7ff fff0 	bl	80100f0 <__sfp_lock_acquire>
 8010110:	6a23      	ldr	r3, [r4, #32]
 8010112:	b11b      	cbz	r3, 801011c <__sinit+0x14>
 8010114:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010118:	f7ff bff0 	b.w	80100fc <__sfp_lock_release>
 801011c:	4b04      	ldr	r3, [pc, #16]	@ (8010130 <__sinit+0x28>)
 801011e:	6223      	str	r3, [r4, #32]
 8010120:	4b04      	ldr	r3, [pc, #16]	@ (8010134 <__sinit+0x2c>)
 8010122:	681b      	ldr	r3, [r3, #0]
 8010124:	2b00      	cmp	r3, #0
 8010126:	d1f5      	bne.n	8010114 <__sinit+0xc>
 8010128:	f7ff ffc4 	bl	80100b4 <global_stdio_init.part.0>
 801012c:	e7f2      	b.n	8010114 <__sinit+0xc>
 801012e:	bf00      	nop
 8010130:	08010075 	.word	0x08010075
 8010134:	20016520 	.word	0x20016520

08010138 <_fwalk_sglue>:
 8010138:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801013c:	4607      	mov	r7, r0
 801013e:	4688      	mov	r8, r1
 8010140:	4614      	mov	r4, r2
 8010142:	2600      	movs	r6, #0
 8010144:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8010148:	f1b9 0901 	subs.w	r9, r9, #1
 801014c:	d505      	bpl.n	801015a <_fwalk_sglue+0x22>
 801014e:	6824      	ldr	r4, [r4, #0]
 8010150:	2c00      	cmp	r4, #0
 8010152:	d1f7      	bne.n	8010144 <_fwalk_sglue+0xc>
 8010154:	4630      	mov	r0, r6
 8010156:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801015a:	89ab      	ldrh	r3, [r5, #12]
 801015c:	2b01      	cmp	r3, #1
 801015e:	d907      	bls.n	8010170 <_fwalk_sglue+0x38>
 8010160:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8010164:	3301      	adds	r3, #1
 8010166:	d003      	beq.n	8010170 <_fwalk_sglue+0x38>
 8010168:	4629      	mov	r1, r5
 801016a:	4638      	mov	r0, r7
 801016c:	47c0      	blx	r8
 801016e:	4306      	orrs	r6, r0
 8010170:	3568      	adds	r5, #104	@ 0x68
 8010172:	e7e9      	b.n	8010148 <_fwalk_sglue+0x10>

08010174 <iprintf>:
 8010174:	b40f      	push	{r0, r1, r2, r3}
 8010176:	b507      	push	{r0, r1, r2, lr}
 8010178:	4906      	ldr	r1, [pc, #24]	@ (8010194 <iprintf+0x20>)
 801017a:	ab04      	add	r3, sp, #16
 801017c:	6808      	ldr	r0, [r1, #0]
 801017e:	f853 2b04 	ldr.w	r2, [r3], #4
 8010182:	6881      	ldr	r1, [r0, #8]
 8010184:	9301      	str	r3, [sp, #4]
 8010186:	f002 fe4f 	bl	8012e28 <_vfiprintf_r>
 801018a:	b003      	add	sp, #12
 801018c:	f85d eb04 	ldr.w	lr, [sp], #4
 8010190:	b004      	add	sp, #16
 8010192:	4770      	bx	lr
 8010194:	2000d140 	.word	0x2000d140

08010198 <_puts_r>:
 8010198:	6a03      	ldr	r3, [r0, #32]
 801019a:	b570      	push	{r4, r5, r6, lr}
 801019c:	6884      	ldr	r4, [r0, #8]
 801019e:	4605      	mov	r5, r0
 80101a0:	460e      	mov	r6, r1
 80101a2:	b90b      	cbnz	r3, 80101a8 <_puts_r+0x10>
 80101a4:	f7ff ffb0 	bl	8010108 <__sinit>
 80101a8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80101aa:	07db      	lsls	r3, r3, #31
 80101ac:	d405      	bmi.n	80101ba <_puts_r+0x22>
 80101ae:	89a3      	ldrh	r3, [r4, #12]
 80101b0:	0598      	lsls	r0, r3, #22
 80101b2:	d402      	bmi.n	80101ba <_puts_r+0x22>
 80101b4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80101b6:	f000 f9fa 	bl	80105ae <__retarget_lock_acquire_recursive>
 80101ba:	89a3      	ldrh	r3, [r4, #12]
 80101bc:	0719      	lsls	r1, r3, #28
 80101be:	d502      	bpl.n	80101c6 <_puts_r+0x2e>
 80101c0:	6923      	ldr	r3, [r4, #16]
 80101c2:	2b00      	cmp	r3, #0
 80101c4:	d135      	bne.n	8010232 <_puts_r+0x9a>
 80101c6:	4621      	mov	r1, r4
 80101c8:	4628      	mov	r0, r5
 80101ca:	f000 f91d 	bl	8010408 <__swsetup_r>
 80101ce:	b380      	cbz	r0, 8010232 <_puts_r+0x9a>
 80101d0:	f04f 35ff 	mov.w	r5, #4294967295
 80101d4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80101d6:	07da      	lsls	r2, r3, #31
 80101d8:	d405      	bmi.n	80101e6 <_puts_r+0x4e>
 80101da:	89a3      	ldrh	r3, [r4, #12]
 80101dc:	059b      	lsls	r3, r3, #22
 80101de:	d402      	bmi.n	80101e6 <_puts_r+0x4e>
 80101e0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80101e2:	f000 f9e5 	bl	80105b0 <__retarget_lock_release_recursive>
 80101e6:	4628      	mov	r0, r5
 80101e8:	bd70      	pop	{r4, r5, r6, pc}
 80101ea:	2b00      	cmp	r3, #0
 80101ec:	da04      	bge.n	80101f8 <_puts_r+0x60>
 80101ee:	69a2      	ldr	r2, [r4, #24]
 80101f0:	429a      	cmp	r2, r3
 80101f2:	dc17      	bgt.n	8010224 <_puts_r+0x8c>
 80101f4:	290a      	cmp	r1, #10
 80101f6:	d015      	beq.n	8010224 <_puts_r+0x8c>
 80101f8:	6823      	ldr	r3, [r4, #0]
 80101fa:	1c5a      	adds	r2, r3, #1
 80101fc:	6022      	str	r2, [r4, #0]
 80101fe:	7019      	strb	r1, [r3, #0]
 8010200:	68a3      	ldr	r3, [r4, #8]
 8010202:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8010206:	3b01      	subs	r3, #1
 8010208:	60a3      	str	r3, [r4, #8]
 801020a:	2900      	cmp	r1, #0
 801020c:	d1ed      	bne.n	80101ea <_puts_r+0x52>
 801020e:	2b00      	cmp	r3, #0
 8010210:	da11      	bge.n	8010236 <_puts_r+0x9e>
 8010212:	4622      	mov	r2, r4
 8010214:	210a      	movs	r1, #10
 8010216:	4628      	mov	r0, r5
 8010218:	f000 f8b7 	bl	801038a <__swbuf_r>
 801021c:	3001      	adds	r0, #1
 801021e:	d0d7      	beq.n	80101d0 <_puts_r+0x38>
 8010220:	250a      	movs	r5, #10
 8010222:	e7d7      	b.n	80101d4 <_puts_r+0x3c>
 8010224:	4622      	mov	r2, r4
 8010226:	4628      	mov	r0, r5
 8010228:	f000 f8af 	bl	801038a <__swbuf_r>
 801022c:	3001      	adds	r0, #1
 801022e:	d1e7      	bne.n	8010200 <_puts_r+0x68>
 8010230:	e7ce      	b.n	80101d0 <_puts_r+0x38>
 8010232:	3e01      	subs	r6, #1
 8010234:	e7e4      	b.n	8010200 <_puts_r+0x68>
 8010236:	6823      	ldr	r3, [r4, #0]
 8010238:	1c5a      	adds	r2, r3, #1
 801023a:	6022      	str	r2, [r4, #0]
 801023c:	220a      	movs	r2, #10
 801023e:	701a      	strb	r2, [r3, #0]
 8010240:	e7ee      	b.n	8010220 <_puts_r+0x88>
	...

08010244 <puts>:
 8010244:	4b02      	ldr	r3, [pc, #8]	@ (8010250 <puts+0xc>)
 8010246:	4601      	mov	r1, r0
 8010248:	6818      	ldr	r0, [r3, #0]
 801024a:	f7ff bfa5 	b.w	8010198 <_puts_r>
 801024e:	bf00      	nop
 8010250:	2000d140 	.word	0x2000d140

08010254 <sniprintf>:
 8010254:	b40c      	push	{r2, r3}
 8010256:	b530      	push	{r4, r5, lr}
 8010258:	4b18      	ldr	r3, [pc, #96]	@ (80102bc <sniprintf+0x68>)
 801025a:	1e0c      	subs	r4, r1, #0
 801025c:	681d      	ldr	r5, [r3, #0]
 801025e:	b09d      	sub	sp, #116	@ 0x74
 8010260:	da08      	bge.n	8010274 <sniprintf+0x20>
 8010262:	238b      	movs	r3, #139	@ 0x8b
 8010264:	602b      	str	r3, [r5, #0]
 8010266:	f04f 30ff 	mov.w	r0, #4294967295
 801026a:	b01d      	add	sp, #116	@ 0x74
 801026c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8010270:	b002      	add	sp, #8
 8010272:	4770      	bx	lr
 8010274:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8010278:	f8ad 3014 	strh.w	r3, [sp, #20]
 801027c:	f04f 0300 	mov.w	r3, #0
 8010280:	931b      	str	r3, [sp, #108]	@ 0x6c
 8010282:	bf14      	ite	ne
 8010284:	f104 33ff 	addne.w	r3, r4, #4294967295
 8010288:	4623      	moveq	r3, r4
 801028a:	9304      	str	r3, [sp, #16]
 801028c:	9307      	str	r3, [sp, #28]
 801028e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8010292:	9002      	str	r0, [sp, #8]
 8010294:	9006      	str	r0, [sp, #24]
 8010296:	f8ad 3016 	strh.w	r3, [sp, #22]
 801029a:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 801029c:	ab21      	add	r3, sp, #132	@ 0x84
 801029e:	a902      	add	r1, sp, #8
 80102a0:	4628      	mov	r0, r5
 80102a2:	9301      	str	r3, [sp, #4]
 80102a4:	f002 fc9a 	bl	8012bdc <_svfiprintf_r>
 80102a8:	1c43      	adds	r3, r0, #1
 80102aa:	bfbc      	itt	lt
 80102ac:	238b      	movlt	r3, #139	@ 0x8b
 80102ae:	602b      	strlt	r3, [r5, #0]
 80102b0:	2c00      	cmp	r4, #0
 80102b2:	d0da      	beq.n	801026a <sniprintf+0x16>
 80102b4:	9b02      	ldr	r3, [sp, #8]
 80102b6:	2200      	movs	r2, #0
 80102b8:	701a      	strb	r2, [r3, #0]
 80102ba:	e7d6      	b.n	801026a <sniprintf+0x16>
 80102bc:	2000d140 	.word	0x2000d140

080102c0 <siprintf>:
 80102c0:	b40e      	push	{r1, r2, r3}
 80102c2:	b510      	push	{r4, lr}
 80102c4:	b09d      	sub	sp, #116	@ 0x74
 80102c6:	ab1f      	add	r3, sp, #124	@ 0x7c
 80102c8:	9002      	str	r0, [sp, #8]
 80102ca:	9006      	str	r0, [sp, #24]
 80102cc:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80102d0:	480a      	ldr	r0, [pc, #40]	@ (80102fc <siprintf+0x3c>)
 80102d2:	9107      	str	r1, [sp, #28]
 80102d4:	9104      	str	r1, [sp, #16]
 80102d6:	490a      	ldr	r1, [pc, #40]	@ (8010300 <siprintf+0x40>)
 80102d8:	f853 2b04 	ldr.w	r2, [r3], #4
 80102dc:	9105      	str	r1, [sp, #20]
 80102de:	2400      	movs	r4, #0
 80102e0:	a902      	add	r1, sp, #8
 80102e2:	6800      	ldr	r0, [r0, #0]
 80102e4:	9301      	str	r3, [sp, #4]
 80102e6:	941b      	str	r4, [sp, #108]	@ 0x6c
 80102e8:	f002 fc78 	bl	8012bdc <_svfiprintf_r>
 80102ec:	9b02      	ldr	r3, [sp, #8]
 80102ee:	701c      	strb	r4, [r3, #0]
 80102f0:	b01d      	add	sp, #116	@ 0x74
 80102f2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80102f6:	b003      	add	sp, #12
 80102f8:	4770      	bx	lr
 80102fa:	bf00      	nop
 80102fc:	2000d140 	.word	0x2000d140
 8010300:	ffff0208 	.word	0xffff0208

08010304 <__sread>:
 8010304:	b510      	push	{r4, lr}
 8010306:	460c      	mov	r4, r1
 8010308:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801030c:	f000 f900 	bl	8010510 <_read_r>
 8010310:	2800      	cmp	r0, #0
 8010312:	bfab      	itete	ge
 8010314:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8010316:	89a3      	ldrhlt	r3, [r4, #12]
 8010318:	181b      	addge	r3, r3, r0
 801031a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 801031e:	bfac      	ite	ge
 8010320:	6563      	strge	r3, [r4, #84]	@ 0x54
 8010322:	81a3      	strhlt	r3, [r4, #12]
 8010324:	bd10      	pop	{r4, pc}

08010326 <__swrite>:
 8010326:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801032a:	461f      	mov	r7, r3
 801032c:	898b      	ldrh	r3, [r1, #12]
 801032e:	05db      	lsls	r3, r3, #23
 8010330:	4605      	mov	r5, r0
 8010332:	460c      	mov	r4, r1
 8010334:	4616      	mov	r6, r2
 8010336:	d505      	bpl.n	8010344 <__swrite+0x1e>
 8010338:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801033c:	2302      	movs	r3, #2
 801033e:	2200      	movs	r2, #0
 8010340:	f000 f8d4 	bl	80104ec <_lseek_r>
 8010344:	89a3      	ldrh	r3, [r4, #12]
 8010346:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801034a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 801034e:	81a3      	strh	r3, [r4, #12]
 8010350:	4632      	mov	r2, r6
 8010352:	463b      	mov	r3, r7
 8010354:	4628      	mov	r0, r5
 8010356:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801035a:	f000 b8eb 	b.w	8010534 <_write_r>

0801035e <__sseek>:
 801035e:	b510      	push	{r4, lr}
 8010360:	460c      	mov	r4, r1
 8010362:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010366:	f000 f8c1 	bl	80104ec <_lseek_r>
 801036a:	1c43      	adds	r3, r0, #1
 801036c:	89a3      	ldrh	r3, [r4, #12]
 801036e:	bf15      	itete	ne
 8010370:	6560      	strne	r0, [r4, #84]	@ 0x54
 8010372:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8010376:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 801037a:	81a3      	strheq	r3, [r4, #12]
 801037c:	bf18      	it	ne
 801037e:	81a3      	strhne	r3, [r4, #12]
 8010380:	bd10      	pop	{r4, pc}

08010382 <__sclose>:
 8010382:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010386:	f000 b8a1 	b.w	80104cc <_close_r>

0801038a <__swbuf_r>:
 801038a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801038c:	460e      	mov	r6, r1
 801038e:	4614      	mov	r4, r2
 8010390:	4605      	mov	r5, r0
 8010392:	b118      	cbz	r0, 801039c <__swbuf_r+0x12>
 8010394:	6a03      	ldr	r3, [r0, #32]
 8010396:	b90b      	cbnz	r3, 801039c <__swbuf_r+0x12>
 8010398:	f7ff feb6 	bl	8010108 <__sinit>
 801039c:	69a3      	ldr	r3, [r4, #24]
 801039e:	60a3      	str	r3, [r4, #8]
 80103a0:	89a3      	ldrh	r3, [r4, #12]
 80103a2:	071a      	lsls	r2, r3, #28
 80103a4:	d501      	bpl.n	80103aa <__swbuf_r+0x20>
 80103a6:	6923      	ldr	r3, [r4, #16]
 80103a8:	b943      	cbnz	r3, 80103bc <__swbuf_r+0x32>
 80103aa:	4621      	mov	r1, r4
 80103ac:	4628      	mov	r0, r5
 80103ae:	f000 f82b 	bl	8010408 <__swsetup_r>
 80103b2:	b118      	cbz	r0, 80103bc <__swbuf_r+0x32>
 80103b4:	f04f 37ff 	mov.w	r7, #4294967295
 80103b8:	4638      	mov	r0, r7
 80103ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80103bc:	6823      	ldr	r3, [r4, #0]
 80103be:	6922      	ldr	r2, [r4, #16]
 80103c0:	1a98      	subs	r0, r3, r2
 80103c2:	6963      	ldr	r3, [r4, #20]
 80103c4:	b2f6      	uxtb	r6, r6
 80103c6:	4283      	cmp	r3, r0
 80103c8:	4637      	mov	r7, r6
 80103ca:	dc05      	bgt.n	80103d8 <__swbuf_r+0x4e>
 80103cc:	4621      	mov	r1, r4
 80103ce:	4628      	mov	r0, r5
 80103d0:	f7ff fdd2 	bl	800ff78 <_fflush_r>
 80103d4:	2800      	cmp	r0, #0
 80103d6:	d1ed      	bne.n	80103b4 <__swbuf_r+0x2a>
 80103d8:	68a3      	ldr	r3, [r4, #8]
 80103da:	3b01      	subs	r3, #1
 80103dc:	60a3      	str	r3, [r4, #8]
 80103de:	6823      	ldr	r3, [r4, #0]
 80103e0:	1c5a      	adds	r2, r3, #1
 80103e2:	6022      	str	r2, [r4, #0]
 80103e4:	701e      	strb	r6, [r3, #0]
 80103e6:	6962      	ldr	r2, [r4, #20]
 80103e8:	1c43      	adds	r3, r0, #1
 80103ea:	429a      	cmp	r2, r3
 80103ec:	d004      	beq.n	80103f8 <__swbuf_r+0x6e>
 80103ee:	89a3      	ldrh	r3, [r4, #12]
 80103f0:	07db      	lsls	r3, r3, #31
 80103f2:	d5e1      	bpl.n	80103b8 <__swbuf_r+0x2e>
 80103f4:	2e0a      	cmp	r6, #10
 80103f6:	d1df      	bne.n	80103b8 <__swbuf_r+0x2e>
 80103f8:	4621      	mov	r1, r4
 80103fa:	4628      	mov	r0, r5
 80103fc:	f7ff fdbc 	bl	800ff78 <_fflush_r>
 8010400:	2800      	cmp	r0, #0
 8010402:	d0d9      	beq.n	80103b8 <__swbuf_r+0x2e>
 8010404:	e7d6      	b.n	80103b4 <__swbuf_r+0x2a>
	...

08010408 <__swsetup_r>:
 8010408:	b538      	push	{r3, r4, r5, lr}
 801040a:	4b29      	ldr	r3, [pc, #164]	@ (80104b0 <__swsetup_r+0xa8>)
 801040c:	4605      	mov	r5, r0
 801040e:	6818      	ldr	r0, [r3, #0]
 8010410:	460c      	mov	r4, r1
 8010412:	b118      	cbz	r0, 801041c <__swsetup_r+0x14>
 8010414:	6a03      	ldr	r3, [r0, #32]
 8010416:	b90b      	cbnz	r3, 801041c <__swsetup_r+0x14>
 8010418:	f7ff fe76 	bl	8010108 <__sinit>
 801041c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010420:	0719      	lsls	r1, r3, #28
 8010422:	d422      	bmi.n	801046a <__swsetup_r+0x62>
 8010424:	06da      	lsls	r2, r3, #27
 8010426:	d407      	bmi.n	8010438 <__swsetup_r+0x30>
 8010428:	2209      	movs	r2, #9
 801042a:	602a      	str	r2, [r5, #0]
 801042c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010430:	81a3      	strh	r3, [r4, #12]
 8010432:	f04f 30ff 	mov.w	r0, #4294967295
 8010436:	e033      	b.n	80104a0 <__swsetup_r+0x98>
 8010438:	0758      	lsls	r0, r3, #29
 801043a:	d512      	bpl.n	8010462 <__swsetup_r+0x5a>
 801043c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801043e:	b141      	cbz	r1, 8010452 <__swsetup_r+0x4a>
 8010440:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8010444:	4299      	cmp	r1, r3
 8010446:	d002      	beq.n	801044e <__swsetup_r+0x46>
 8010448:	4628      	mov	r0, r5
 801044a:	f000 ff3d 	bl	80112c8 <_free_r>
 801044e:	2300      	movs	r3, #0
 8010450:	6363      	str	r3, [r4, #52]	@ 0x34
 8010452:	89a3      	ldrh	r3, [r4, #12]
 8010454:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8010458:	81a3      	strh	r3, [r4, #12]
 801045a:	2300      	movs	r3, #0
 801045c:	6063      	str	r3, [r4, #4]
 801045e:	6923      	ldr	r3, [r4, #16]
 8010460:	6023      	str	r3, [r4, #0]
 8010462:	89a3      	ldrh	r3, [r4, #12]
 8010464:	f043 0308 	orr.w	r3, r3, #8
 8010468:	81a3      	strh	r3, [r4, #12]
 801046a:	6923      	ldr	r3, [r4, #16]
 801046c:	b94b      	cbnz	r3, 8010482 <__swsetup_r+0x7a>
 801046e:	89a3      	ldrh	r3, [r4, #12]
 8010470:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8010474:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8010478:	d003      	beq.n	8010482 <__swsetup_r+0x7a>
 801047a:	4621      	mov	r1, r4
 801047c:	4628      	mov	r0, r5
 801047e:	f002 fe23 	bl	80130c8 <__smakebuf_r>
 8010482:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010486:	f013 0201 	ands.w	r2, r3, #1
 801048a:	d00a      	beq.n	80104a2 <__swsetup_r+0x9a>
 801048c:	2200      	movs	r2, #0
 801048e:	60a2      	str	r2, [r4, #8]
 8010490:	6962      	ldr	r2, [r4, #20]
 8010492:	4252      	negs	r2, r2
 8010494:	61a2      	str	r2, [r4, #24]
 8010496:	6922      	ldr	r2, [r4, #16]
 8010498:	b942      	cbnz	r2, 80104ac <__swsetup_r+0xa4>
 801049a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 801049e:	d1c5      	bne.n	801042c <__swsetup_r+0x24>
 80104a0:	bd38      	pop	{r3, r4, r5, pc}
 80104a2:	0799      	lsls	r1, r3, #30
 80104a4:	bf58      	it	pl
 80104a6:	6962      	ldrpl	r2, [r4, #20]
 80104a8:	60a2      	str	r2, [r4, #8]
 80104aa:	e7f4      	b.n	8010496 <__swsetup_r+0x8e>
 80104ac:	2000      	movs	r0, #0
 80104ae:	e7f7      	b.n	80104a0 <__swsetup_r+0x98>
 80104b0:	2000d140 	.word	0x2000d140

080104b4 <memset>:
 80104b4:	4402      	add	r2, r0
 80104b6:	4603      	mov	r3, r0
 80104b8:	4293      	cmp	r3, r2
 80104ba:	d100      	bne.n	80104be <memset+0xa>
 80104bc:	4770      	bx	lr
 80104be:	f803 1b01 	strb.w	r1, [r3], #1
 80104c2:	e7f9      	b.n	80104b8 <memset+0x4>

080104c4 <_localeconv_r>:
 80104c4:	4800      	ldr	r0, [pc, #0]	@ (80104c8 <_localeconv_r+0x4>)
 80104c6:	4770      	bx	lr
 80104c8:	2000d280 	.word	0x2000d280

080104cc <_close_r>:
 80104cc:	b538      	push	{r3, r4, r5, lr}
 80104ce:	4d06      	ldr	r5, [pc, #24]	@ (80104e8 <_close_r+0x1c>)
 80104d0:	2300      	movs	r3, #0
 80104d2:	4604      	mov	r4, r0
 80104d4:	4608      	mov	r0, r1
 80104d6:	602b      	str	r3, [r5, #0]
 80104d8:	f7f0 fdf4 	bl	80010c4 <_close>
 80104dc:	1c43      	adds	r3, r0, #1
 80104de:	d102      	bne.n	80104e6 <_close_r+0x1a>
 80104e0:	682b      	ldr	r3, [r5, #0]
 80104e2:	b103      	cbz	r3, 80104e6 <_close_r+0x1a>
 80104e4:	6023      	str	r3, [r4, #0]
 80104e6:	bd38      	pop	{r3, r4, r5, pc}
 80104e8:	20016524 	.word	0x20016524

080104ec <_lseek_r>:
 80104ec:	b538      	push	{r3, r4, r5, lr}
 80104ee:	4d07      	ldr	r5, [pc, #28]	@ (801050c <_lseek_r+0x20>)
 80104f0:	4604      	mov	r4, r0
 80104f2:	4608      	mov	r0, r1
 80104f4:	4611      	mov	r1, r2
 80104f6:	2200      	movs	r2, #0
 80104f8:	602a      	str	r2, [r5, #0]
 80104fa:	461a      	mov	r2, r3
 80104fc:	f7f0 fe16 	bl	800112c <_lseek>
 8010500:	1c43      	adds	r3, r0, #1
 8010502:	d102      	bne.n	801050a <_lseek_r+0x1e>
 8010504:	682b      	ldr	r3, [r5, #0]
 8010506:	b103      	cbz	r3, 801050a <_lseek_r+0x1e>
 8010508:	6023      	str	r3, [r4, #0]
 801050a:	bd38      	pop	{r3, r4, r5, pc}
 801050c:	20016524 	.word	0x20016524

08010510 <_read_r>:
 8010510:	b538      	push	{r3, r4, r5, lr}
 8010512:	4d07      	ldr	r5, [pc, #28]	@ (8010530 <_read_r+0x20>)
 8010514:	4604      	mov	r4, r0
 8010516:	4608      	mov	r0, r1
 8010518:	4611      	mov	r1, r2
 801051a:	2200      	movs	r2, #0
 801051c:	602a      	str	r2, [r5, #0]
 801051e:	461a      	mov	r2, r3
 8010520:	f7f0 fe18 	bl	8001154 <_read>
 8010524:	1c43      	adds	r3, r0, #1
 8010526:	d102      	bne.n	801052e <_read_r+0x1e>
 8010528:	682b      	ldr	r3, [r5, #0]
 801052a:	b103      	cbz	r3, 801052e <_read_r+0x1e>
 801052c:	6023      	str	r3, [r4, #0]
 801052e:	bd38      	pop	{r3, r4, r5, pc}
 8010530:	20016524 	.word	0x20016524

08010534 <_write_r>:
 8010534:	b538      	push	{r3, r4, r5, lr}
 8010536:	4d07      	ldr	r5, [pc, #28]	@ (8010554 <_write_r+0x20>)
 8010538:	4604      	mov	r4, r0
 801053a:	4608      	mov	r0, r1
 801053c:	4611      	mov	r1, r2
 801053e:	2200      	movs	r2, #0
 8010540:	602a      	str	r2, [r5, #0]
 8010542:	461a      	mov	r2, r3
 8010544:	f7f0 fdaa 	bl	800109c <_write>
 8010548:	1c43      	adds	r3, r0, #1
 801054a:	d102      	bne.n	8010552 <_write_r+0x1e>
 801054c:	682b      	ldr	r3, [r5, #0]
 801054e:	b103      	cbz	r3, 8010552 <_write_r+0x1e>
 8010550:	6023      	str	r3, [r4, #0]
 8010552:	bd38      	pop	{r3, r4, r5, pc}
 8010554:	20016524 	.word	0x20016524

08010558 <__errno>:
 8010558:	4b01      	ldr	r3, [pc, #4]	@ (8010560 <__errno+0x8>)
 801055a:	6818      	ldr	r0, [r3, #0]
 801055c:	4770      	bx	lr
 801055e:	bf00      	nop
 8010560:	2000d140 	.word	0x2000d140

08010564 <__libc_init_array>:
 8010564:	b570      	push	{r4, r5, r6, lr}
 8010566:	4d0d      	ldr	r5, [pc, #52]	@ (801059c <__libc_init_array+0x38>)
 8010568:	4c0d      	ldr	r4, [pc, #52]	@ (80105a0 <__libc_init_array+0x3c>)
 801056a:	1b64      	subs	r4, r4, r5
 801056c:	10a4      	asrs	r4, r4, #2
 801056e:	2600      	movs	r6, #0
 8010570:	42a6      	cmp	r6, r4
 8010572:	d109      	bne.n	8010588 <__libc_init_array+0x24>
 8010574:	4d0b      	ldr	r5, [pc, #44]	@ (80105a4 <__libc_init_array+0x40>)
 8010576:	4c0c      	ldr	r4, [pc, #48]	@ (80105a8 <__libc_init_array+0x44>)
 8010578:	f003 fa36 	bl	80139e8 <_init>
 801057c:	1b64      	subs	r4, r4, r5
 801057e:	10a4      	asrs	r4, r4, #2
 8010580:	2600      	movs	r6, #0
 8010582:	42a6      	cmp	r6, r4
 8010584:	d105      	bne.n	8010592 <__libc_init_array+0x2e>
 8010586:	bd70      	pop	{r4, r5, r6, pc}
 8010588:	f855 3b04 	ldr.w	r3, [r5], #4
 801058c:	4798      	blx	r3
 801058e:	3601      	adds	r6, #1
 8010590:	e7ee      	b.n	8010570 <__libc_init_array+0xc>
 8010592:	f855 3b04 	ldr.w	r3, [r5], #4
 8010596:	4798      	blx	r3
 8010598:	3601      	adds	r6, #1
 801059a:	e7f2      	b.n	8010582 <__libc_init_array+0x1e>
 801059c:	08015bac 	.word	0x08015bac
 80105a0:	08015bac 	.word	0x08015bac
 80105a4:	08015bac 	.word	0x08015bac
 80105a8:	08015bb0 	.word	0x08015bb0

080105ac <__retarget_lock_init_recursive>:
 80105ac:	4770      	bx	lr

080105ae <__retarget_lock_acquire_recursive>:
 80105ae:	4770      	bx	lr

080105b0 <__retarget_lock_release_recursive>:
 80105b0:	4770      	bx	lr

080105b2 <memcpy>:
 80105b2:	440a      	add	r2, r1
 80105b4:	4291      	cmp	r1, r2
 80105b6:	f100 33ff 	add.w	r3, r0, #4294967295
 80105ba:	d100      	bne.n	80105be <memcpy+0xc>
 80105bc:	4770      	bx	lr
 80105be:	b510      	push	{r4, lr}
 80105c0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80105c4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80105c8:	4291      	cmp	r1, r2
 80105ca:	d1f9      	bne.n	80105c0 <memcpy+0xe>
 80105cc:	bd10      	pop	{r4, pc}
	...

080105d0 <nanf>:
 80105d0:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 80105d8 <nanf+0x8>
 80105d4:	4770      	bx	lr
 80105d6:	bf00      	nop
 80105d8:	7fc00000 	.word	0x7fc00000

080105dc <__assert_func>:
 80105dc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80105de:	4614      	mov	r4, r2
 80105e0:	461a      	mov	r2, r3
 80105e2:	4b09      	ldr	r3, [pc, #36]	@ (8010608 <__assert_func+0x2c>)
 80105e4:	681b      	ldr	r3, [r3, #0]
 80105e6:	4605      	mov	r5, r0
 80105e8:	68d8      	ldr	r0, [r3, #12]
 80105ea:	b14c      	cbz	r4, 8010600 <__assert_func+0x24>
 80105ec:	4b07      	ldr	r3, [pc, #28]	@ (801060c <__assert_func+0x30>)
 80105ee:	9100      	str	r1, [sp, #0]
 80105f0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80105f4:	4906      	ldr	r1, [pc, #24]	@ (8010610 <__assert_func+0x34>)
 80105f6:	462b      	mov	r3, r5
 80105f8:	f002 fd2e 	bl	8013058 <fiprintf>
 80105fc:	f002 fe08 	bl	8013210 <abort>
 8010600:	4b04      	ldr	r3, [pc, #16]	@ (8010614 <__assert_func+0x38>)
 8010602:	461c      	mov	r4, r3
 8010604:	e7f3      	b.n	80105ee <__assert_func+0x12>
 8010606:	bf00      	nop
 8010608:	2000d140 	.word	0x2000d140
 801060c:	080157b5 	.word	0x080157b5
 8010610:	080157c2 	.word	0x080157c2
 8010614:	080157f0 	.word	0x080157f0

08010618 <quorem>:
 8010618:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801061c:	6903      	ldr	r3, [r0, #16]
 801061e:	690c      	ldr	r4, [r1, #16]
 8010620:	42a3      	cmp	r3, r4
 8010622:	4607      	mov	r7, r0
 8010624:	db7e      	blt.n	8010724 <quorem+0x10c>
 8010626:	3c01      	subs	r4, #1
 8010628:	f101 0814 	add.w	r8, r1, #20
 801062c:	00a3      	lsls	r3, r4, #2
 801062e:	f100 0514 	add.w	r5, r0, #20
 8010632:	9300      	str	r3, [sp, #0]
 8010634:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8010638:	9301      	str	r3, [sp, #4]
 801063a:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 801063e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8010642:	3301      	adds	r3, #1
 8010644:	429a      	cmp	r2, r3
 8010646:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 801064a:	fbb2 f6f3 	udiv	r6, r2, r3
 801064e:	d32e      	bcc.n	80106ae <quorem+0x96>
 8010650:	f04f 0a00 	mov.w	sl, #0
 8010654:	46c4      	mov	ip, r8
 8010656:	46ae      	mov	lr, r5
 8010658:	46d3      	mov	fp, sl
 801065a:	f85c 3b04 	ldr.w	r3, [ip], #4
 801065e:	b298      	uxth	r0, r3
 8010660:	fb06 a000 	mla	r0, r6, r0, sl
 8010664:	0c02      	lsrs	r2, r0, #16
 8010666:	0c1b      	lsrs	r3, r3, #16
 8010668:	fb06 2303 	mla	r3, r6, r3, r2
 801066c:	f8de 2000 	ldr.w	r2, [lr]
 8010670:	b280      	uxth	r0, r0
 8010672:	b292      	uxth	r2, r2
 8010674:	1a12      	subs	r2, r2, r0
 8010676:	445a      	add	r2, fp
 8010678:	f8de 0000 	ldr.w	r0, [lr]
 801067c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8010680:	b29b      	uxth	r3, r3
 8010682:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8010686:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 801068a:	b292      	uxth	r2, r2
 801068c:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8010690:	45e1      	cmp	r9, ip
 8010692:	f84e 2b04 	str.w	r2, [lr], #4
 8010696:	ea4f 4b23 	mov.w	fp, r3, asr #16
 801069a:	d2de      	bcs.n	801065a <quorem+0x42>
 801069c:	9b00      	ldr	r3, [sp, #0]
 801069e:	58eb      	ldr	r3, [r5, r3]
 80106a0:	b92b      	cbnz	r3, 80106ae <quorem+0x96>
 80106a2:	9b01      	ldr	r3, [sp, #4]
 80106a4:	3b04      	subs	r3, #4
 80106a6:	429d      	cmp	r5, r3
 80106a8:	461a      	mov	r2, r3
 80106aa:	d32f      	bcc.n	801070c <quorem+0xf4>
 80106ac:	613c      	str	r4, [r7, #16]
 80106ae:	4638      	mov	r0, r7
 80106b0:	f001 f9c6 	bl	8011a40 <__mcmp>
 80106b4:	2800      	cmp	r0, #0
 80106b6:	db25      	blt.n	8010704 <quorem+0xec>
 80106b8:	4629      	mov	r1, r5
 80106ba:	2000      	movs	r0, #0
 80106bc:	f858 2b04 	ldr.w	r2, [r8], #4
 80106c0:	f8d1 c000 	ldr.w	ip, [r1]
 80106c4:	fa1f fe82 	uxth.w	lr, r2
 80106c8:	fa1f f38c 	uxth.w	r3, ip
 80106cc:	eba3 030e 	sub.w	r3, r3, lr
 80106d0:	4403      	add	r3, r0
 80106d2:	0c12      	lsrs	r2, r2, #16
 80106d4:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80106d8:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80106dc:	b29b      	uxth	r3, r3
 80106de:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80106e2:	45c1      	cmp	r9, r8
 80106e4:	f841 3b04 	str.w	r3, [r1], #4
 80106e8:	ea4f 4022 	mov.w	r0, r2, asr #16
 80106ec:	d2e6      	bcs.n	80106bc <quorem+0xa4>
 80106ee:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80106f2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80106f6:	b922      	cbnz	r2, 8010702 <quorem+0xea>
 80106f8:	3b04      	subs	r3, #4
 80106fa:	429d      	cmp	r5, r3
 80106fc:	461a      	mov	r2, r3
 80106fe:	d30b      	bcc.n	8010718 <quorem+0x100>
 8010700:	613c      	str	r4, [r7, #16]
 8010702:	3601      	adds	r6, #1
 8010704:	4630      	mov	r0, r6
 8010706:	b003      	add	sp, #12
 8010708:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801070c:	6812      	ldr	r2, [r2, #0]
 801070e:	3b04      	subs	r3, #4
 8010710:	2a00      	cmp	r2, #0
 8010712:	d1cb      	bne.n	80106ac <quorem+0x94>
 8010714:	3c01      	subs	r4, #1
 8010716:	e7c6      	b.n	80106a6 <quorem+0x8e>
 8010718:	6812      	ldr	r2, [r2, #0]
 801071a:	3b04      	subs	r3, #4
 801071c:	2a00      	cmp	r2, #0
 801071e:	d1ef      	bne.n	8010700 <quorem+0xe8>
 8010720:	3c01      	subs	r4, #1
 8010722:	e7ea      	b.n	80106fa <quorem+0xe2>
 8010724:	2000      	movs	r0, #0
 8010726:	e7ee      	b.n	8010706 <quorem+0xee>

08010728 <_dtoa_r>:
 8010728:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801072c:	69c7      	ldr	r7, [r0, #28]
 801072e:	b097      	sub	sp, #92	@ 0x5c
 8010730:	ed8d 0b04 	vstr	d0, [sp, #16]
 8010734:	ec55 4b10 	vmov	r4, r5, d0
 8010738:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 801073a:	9107      	str	r1, [sp, #28]
 801073c:	4681      	mov	r9, r0
 801073e:	920c      	str	r2, [sp, #48]	@ 0x30
 8010740:	9311      	str	r3, [sp, #68]	@ 0x44
 8010742:	b97f      	cbnz	r7, 8010764 <_dtoa_r+0x3c>
 8010744:	2010      	movs	r0, #16
 8010746:	f000 fe09 	bl	801135c <malloc>
 801074a:	4602      	mov	r2, r0
 801074c:	f8c9 001c 	str.w	r0, [r9, #28]
 8010750:	b920      	cbnz	r0, 801075c <_dtoa_r+0x34>
 8010752:	4ba9      	ldr	r3, [pc, #676]	@ (80109f8 <_dtoa_r+0x2d0>)
 8010754:	21ef      	movs	r1, #239	@ 0xef
 8010756:	48a9      	ldr	r0, [pc, #676]	@ (80109fc <_dtoa_r+0x2d4>)
 8010758:	f7ff ff40 	bl	80105dc <__assert_func>
 801075c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8010760:	6007      	str	r7, [r0, #0]
 8010762:	60c7      	str	r7, [r0, #12]
 8010764:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8010768:	6819      	ldr	r1, [r3, #0]
 801076a:	b159      	cbz	r1, 8010784 <_dtoa_r+0x5c>
 801076c:	685a      	ldr	r2, [r3, #4]
 801076e:	604a      	str	r2, [r1, #4]
 8010770:	2301      	movs	r3, #1
 8010772:	4093      	lsls	r3, r2
 8010774:	608b      	str	r3, [r1, #8]
 8010776:	4648      	mov	r0, r9
 8010778:	f000 fee6 	bl	8011548 <_Bfree>
 801077c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8010780:	2200      	movs	r2, #0
 8010782:	601a      	str	r2, [r3, #0]
 8010784:	1e2b      	subs	r3, r5, #0
 8010786:	bfb9      	ittee	lt
 8010788:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 801078c:	9305      	strlt	r3, [sp, #20]
 801078e:	2300      	movge	r3, #0
 8010790:	6033      	strge	r3, [r6, #0]
 8010792:	9f05      	ldr	r7, [sp, #20]
 8010794:	4b9a      	ldr	r3, [pc, #616]	@ (8010a00 <_dtoa_r+0x2d8>)
 8010796:	bfbc      	itt	lt
 8010798:	2201      	movlt	r2, #1
 801079a:	6032      	strlt	r2, [r6, #0]
 801079c:	43bb      	bics	r3, r7
 801079e:	d112      	bne.n	80107c6 <_dtoa_r+0x9e>
 80107a0:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80107a2:	f242 730f 	movw	r3, #9999	@ 0x270f
 80107a6:	6013      	str	r3, [r2, #0]
 80107a8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80107ac:	4323      	orrs	r3, r4
 80107ae:	f000 855a 	beq.w	8011266 <_dtoa_r+0xb3e>
 80107b2:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80107b4:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 8010a14 <_dtoa_r+0x2ec>
 80107b8:	2b00      	cmp	r3, #0
 80107ba:	f000 855c 	beq.w	8011276 <_dtoa_r+0xb4e>
 80107be:	f10a 0303 	add.w	r3, sl, #3
 80107c2:	f000 bd56 	b.w	8011272 <_dtoa_r+0xb4a>
 80107c6:	ed9d 7b04 	vldr	d7, [sp, #16]
 80107ca:	2200      	movs	r2, #0
 80107cc:	ec51 0b17 	vmov	r0, r1, d7
 80107d0:	2300      	movs	r3, #0
 80107d2:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 80107d6:	f7f0 f98f 	bl	8000af8 <__aeabi_dcmpeq>
 80107da:	4680      	mov	r8, r0
 80107dc:	b158      	cbz	r0, 80107f6 <_dtoa_r+0xce>
 80107de:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80107e0:	2301      	movs	r3, #1
 80107e2:	6013      	str	r3, [r2, #0]
 80107e4:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80107e6:	b113      	cbz	r3, 80107ee <_dtoa_r+0xc6>
 80107e8:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 80107ea:	4b86      	ldr	r3, [pc, #536]	@ (8010a04 <_dtoa_r+0x2dc>)
 80107ec:	6013      	str	r3, [r2, #0]
 80107ee:	f8df a228 	ldr.w	sl, [pc, #552]	@ 8010a18 <_dtoa_r+0x2f0>
 80107f2:	f000 bd40 	b.w	8011276 <_dtoa_r+0xb4e>
 80107f6:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 80107fa:	aa14      	add	r2, sp, #80	@ 0x50
 80107fc:	a915      	add	r1, sp, #84	@ 0x54
 80107fe:	4648      	mov	r0, r9
 8010800:	f001 fa3e 	bl	8011c80 <__d2b>
 8010804:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8010808:	9002      	str	r0, [sp, #8]
 801080a:	2e00      	cmp	r6, #0
 801080c:	d078      	beq.n	8010900 <_dtoa_r+0x1d8>
 801080e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8010810:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 8010814:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8010818:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 801081c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8010820:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8010824:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8010828:	4619      	mov	r1, r3
 801082a:	2200      	movs	r2, #0
 801082c:	4b76      	ldr	r3, [pc, #472]	@ (8010a08 <_dtoa_r+0x2e0>)
 801082e:	f7ef fd43 	bl	80002b8 <__aeabi_dsub>
 8010832:	a36b      	add	r3, pc, #428	@ (adr r3, 80109e0 <_dtoa_r+0x2b8>)
 8010834:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010838:	f7ef fef6 	bl	8000628 <__aeabi_dmul>
 801083c:	a36a      	add	r3, pc, #424	@ (adr r3, 80109e8 <_dtoa_r+0x2c0>)
 801083e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010842:	f7ef fd3b 	bl	80002bc <__adddf3>
 8010846:	4604      	mov	r4, r0
 8010848:	4630      	mov	r0, r6
 801084a:	460d      	mov	r5, r1
 801084c:	f7ef fe82 	bl	8000554 <__aeabi_i2d>
 8010850:	a367      	add	r3, pc, #412	@ (adr r3, 80109f0 <_dtoa_r+0x2c8>)
 8010852:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010856:	f7ef fee7 	bl	8000628 <__aeabi_dmul>
 801085a:	4602      	mov	r2, r0
 801085c:	460b      	mov	r3, r1
 801085e:	4620      	mov	r0, r4
 8010860:	4629      	mov	r1, r5
 8010862:	f7ef fd2b 	bl	80002bc <__adddf3>
 8010866:	4604      	mov	r4, r0
 8010868:	460d      	mov	r5, r1
 801086a:	f7f0 f98d 	bl	8000b88 <__aeabi_d2iz>
 801086e:	2200      	movs	r2, #0
 8010870:	4607      	mov	r7, r0
 8010872:	2300      	movs	r3, #0
 8010874:	4620      	mov	r0, r4
 8010876:	4629      	mov	r1, r5
 8010878:	f7f0 f948 	bl	8000b0c <__aeabi_dcmplt>
 801087c:	b140      	cbz	r0, 8010890 <_dtoa_r+0x168>
 801087e:	4638      	mov	r0, r7
 8010880:	f7ef fe68 	bl	8000554 <__aeabi_i2d>
 8010884:	4622      	mov	r2, r4
 8010886:	462b      	mov	r3, r5
 8010888:	f7f0 f936 	bl	8000af8 <__aeabi_dcmpeq>
 801088c:	b900      	cbnz	r0, 8010890 <_dtoa_r+0x168>
 801088e:	3f01      	subs	r7, #1
 8010890:	2f16      	cmp	r7, #22
 8010892:	d852      	bhi.n	801093a <_dtoa_r+0x212>
 8010894:	4b5d      	ldr	r3, [pc, #372]	@ (8010a0c <_dtoa_r+0x2e4>)
 8010896:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 801089a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801089e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80108a2:	f7f0 f933 	bl	8000b0c <__aeabi_dcmplt>
 80108a6:	2800      	cmp	r0, #0
 80108a8:	d049      	beq.n	801093e <_dtoa_r+0x216>
 80108aa:	3f01      	subs	r7, #1
 80108ac:	2300      	movs	r3, #0
 80108ae:	9310      	str	r3, [sp, #64]	@ 0x40
 80108b0:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80108b2:	1b9b      	subs	r3, r3, r6
 80108b4:	1e5a      	subs	r2, r3, #1
 80108b6:	bf45      	ittet	mi
 80108b8:	f1c3 0301 	rsbmi	r3, r3, #1
 80108bc:	9300      	strmi	r3, [sp, #0]
 80108be:	2300      	movpl	r3, #0
 80108c0:	2300      	movmi	r3, #0
 80108c2:	9206      	str	r2, [sp, #24]
 80108c4:	bf54      	ite	pl
 80108c6:	9300      	strpl	r3, [sp, #0]
 80108c8:	9306      	strmi	r3, [sp, #24]
 80108ca:	2f00      	cmp	r7, #0
 80108cc:	db39      	blt.n	8010942 <_dtoa_r+0x21a>
 80108ce:	9b06      	ldr	r3, [sp, #24]
 80108d0:	970d      	str	r7, [sp, #52]	@ 0x34
 80108d2:	443b      	add	r3, r7
 80108d4:	9306      	str	r3, [sp, #24]
 80108d6:	2300      	movs	r3, #0
 80108d8:	9308      	str	r3, [sp, #32]
 80108da:	9b07      	ldr	r3, [sp, #28]
 80108dc:	2b09      	cmp	r3, #9
 80108de:	d863      	bhi.n	80109a8 <_dtoa_r+0x280>
 80108e0:	2b05      	cmp	r3, #5
 80108e2:	bfc4      	itt	gt
 80108e4:	3b04      	subgt	r3, #4
 80108e6:	9307      	strgt	r3, [sp, #28]
 80108e8:	9b07      	ldr	r3, [sp, #28]
 80108ea:	f1a3 0302 	sub.w	r3, r3, #2
 80108ee:	bfcc      	ite	gt
 80108f0:	2400      	movgt	r4, #0
 80108f2:	2401      	movle	r4, #1
 80108f4:	2b03      	cmp	r3, #3
 80108f6:	d863      	bhi.n	80109c0 <_dtoa_r+0x298>
 80108f8:	e8df f003 	tbb	[pc, r3]
 80108fc:	2b375452 	.word	0x2b375452
 8010900:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8010904:	441e      	add	r6, r3
 8010906:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 801090a:	2b20      	cmp	r3, #32
 801090c:	bfc1      	itttt	gt
 801090e:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8010912:	409f      	lslgt	r7, r3
 8010914:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8010918:	fa24 f303 	lsrgt.w	r3, r4, r3
 801091c:	bfd6      	itet	le
 801091e:	f1c3 0320 	rsble	r3, r3, #32
 8010922:	ea47 0003 	orrgt.w	r0, r7, r3
 8010926:	fa04 f003 	lslle.w	r0, r4, r3
 801092a:	f7ef fe03 	bl	8000534 <__aeabi_ui2d>
 801092e:	2201      	movs	r2, #1
 8010930:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8010934:	3e01      	subs	r6, #1
 8010936:	9212      	str	r2, [sp, #72]	@ 0x48
 8010938:	e776      	b.n	8010828 <_dtoa_r+0x100>
 801093a:	2301      	movs	r3, #1
 801093c:	e7b7      	b.n	80108ae <_dtoa_r+0x186>
 801093e:	9010      	str	r0, [sp, #64]	@ 0x40
 8010940:	e7b6      	b.n	80108b0 <_dtoa_r+0x188>
 8010942:	9b00      	ldr	r3, [sp, #0]
 8010944:	1bdb      	subs	r3, r3, r7
 8010946:	9300      	str	r3, [sp, #0]
 8010948:	427b      	negs	r3, r7
 801094a:	9308      	str	r3, [sp, #32]
 801094c:	2300      	movs	r3, #0
 801094e:	930d      	str	r3, [sp, #52]	@ 0x34
 8010950:	e7c3      	b.n	80108da <_dtoa_r+0x1b2>
 8010952:	2301      	movs	r3, #1
 8010954:	9309      	str	r3, [sp, #36]	@ 0x24
 8010956:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8010958:	eb07 0b03 	add.w	fp, r7, r3
 801095c:	f10b 0301 	add.w	r3, fp, #1
 8010960:	2b01      	cmp	r3, #1
 8010962:	9303      	str	r3, [sp, #12]
 8010964:	bfb8      	it	lt
 8010966:	2301      	movlt	r3, #1
 8010968:	e006      	b.n	8010978 <_dtoa_r+0x250>
 801096a:	2301      	movs	r3, #1
 801096c:	9309      	str	r3, [sp, #36]	@ 0x24
 801096e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8010970:	2b00      	cmp	r3, #0
 8010972:	dd28      	ble.n	80109c6 <_dtoa_r+0x29e>
 8010974:	469b      	mov	fp, r3
 8010976:	9303      	str	r3, [sp, #12]
 8010978:	f8d9 001c 	ldr.w	r0, [r9, #28]
 801097c:	2100      	movs	r1, #0
 801097e:	2204      	movs	r2, #4
 8010980:	f102 0514 	add.w	r5, r2, #20
 8010984:	429d      	cmp	r5, r3
 8010986:	d926      	bls.n	80109d6 <_dtoa_r+0x2ae>
 8010988:	6041      	str	r1, [r0, #4]
 801098a:	4648      	mov	r0, r9
 801098c:	f000 fd9c 	bl	80114c8 <_Balloc>
 8010990:	4682      	mov	sl, r0
 8010992:	2800      	cmp	r0, #0
 8010994:	d142      	bne.n	8010a1c <_dtoa_r+0x2f4>
 8010996:	4b1e      	ldr	r3, [pc, #120]	@ (8010a10 <_dtoa_r+0x2e8>)
 8010998:	4602      	mov	r2, r0
 801099a:	f240 11af 	movw	r1, #431	@ 0x1af
 801099e:	e6da      	b.n	8010756 <_dtoa_r+0x2e>
 80109a0:	2300      	movs	r3, #0
 80109a2:	e7e3      	b.n	801096c <_dtoa_r+0x244>
 80109a4:	2300      	movs	r3, #0
 80109a6:	e7d5      	b.n	8010954 <_dtoa_r+0x22c>
 80109a8:	2401      	movs	r4, #1
 80109aa:	2300      	movs	r3, #0
 80109ac:	9307      	str	r3, [sp, #28]
 80109ae:	9409      	str	r4, [sp, #36]	@ 0x24
 80109b0:	f04f 3bff 	mov.w	fp, #4294967295
 80109b4:	2200      	movs	r2, #0
 80109b6:	f8cd b00c 	str.w	fp, [sp, #12]
 80109ba:	2312      	movs	r3, #18
 80109bc:	920c      	str	r2, [sp, #48]	@ 0x30
 80109be:	e7db      	b.n	8010978 <_dtoa_r+0x250>
 80109c0:	2301      	movs	r3, #1
 80109c2:	9309      	str	r3, [sp, #36]	@ 0x24
 80109c4:	e7f4      	b.n	80109b0 <_dtoa_r+0x288>
 80109c6:	f04f 0b01 	mov.w	fp, #1
 80109ca:	f8cd b00c 	str.w	fp, [sp, #12]
 80109ce:	465b      	mov	r3, fp
 80109d0:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 80109d4:	e7d0      	b.n	8010978 <_dtoa_r+0x250>
 80109d6:	3101      	adds	r1, #1
 80109d8:	0052      	lsls	r2, r2, #1
 80109da:	e7d1      	b.n	8010980 <_dtoa_r+0x258>
 80109dc:	f3af 8000 	nop.w
 80109e0:	636f4361 	.word	0x636f4361
 80109e4:	3fd287a7 	.word	0x3fd287a7
 80109e8:	8b60c8b3 	.word	0x8b60c8b3
 80109ec:	3fc68a28 	.word	0x3fc68a28
 80109f0:	509f79fb 	.word	0x509f79fb
 80109f4:	3fd34413 	.word	0x3fd34413
 80109f8:	080157fe 	.word	0x080157fe
 80109fc:	08015815 	.word	0x08015815
 8010a00:	7ff00000 	.word	0x7ff00000
 8010a04:	0801578d 	.word	0x0801578d
 8010a08:	3ff80000 	.word	0x3ff80000
 8010a0c:	08015988 	.word	0x08015988
 8010a10:	0801586d 	.word	0x0801586d
 8010a14:	080157fa 	.word	0x080157fa
 8010a18:	0801578c 	.word	0x0801578c
 8010a1c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8010a20:	6018      	str	r0, [r3, #0]
 8010a22:	9b03      	ldr	r3, [sp, #12]
 8010a24:	2b0e      	cmp	r3, #14
 8010a26:	f200 80a1 	bhi.w	8010b6c <_dtoa_r+0x444>
 8010a2a:	2c00      	cmp	r4, #0
 8010a2c:	f000 809e 	beq.w	8010b6c <_dtoa_r+0x444>
 8010a30:	2f00      	cmp	r7, #0
 8010a32:	dd33      	ble.n	8010a9c <_dtoa_r+0x374>
 8010a34:	4b9c      	ldr	r3, [pc, #624]	@ (8010ca8 <_dtoa_r+0x580>)
 8010a36:	f007 020f 	and.w	r2, r7, #15
 8010a3a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8010a3e:	ed93 7b00 	vldr	d7, [r3]
 8010a42:	05f8      	lsls	r0, r7, #23
 8010a44:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 8010a48:	ea4f 1427 	mov.w	r4, r7, asr #4
 8010a4c:	d516      	bpl.n	8010a7c <_dtoa_r+0x354>
 8010a4e:	4b97      	ldr	r3, [pc, #604]	@ (8010cac <_dtoa_r+0x584>)
 8010a50:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8010a54:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8010a58:	f7ef ff10 	bl	800087c <__aeabi_ddiv>
 8010a5c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8010a60:	f004 040f 	and.w	r4, r4, #15
 8010a64:	2603      	movs	r6, #3
 8010a66:	4d91      	ldr	r5, [pc, #580]	@ (8010cac <_dtoa_r+0x584>)
 8010a68:	b954      	cbnz	r4, 8010a80 <_dtoa_r+0x358>
 8010a6a:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8010a6e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8010a72:	f7ef ff03 	bl	800087c <__aeabi_ddiv>
 8010a76:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8010a7a:	e028      	b.n	8010ace <_dtoa_r+0x3a6>
 8010a7c:	2602      	movs	r6, #2
 8010a7e:	e7f2      	b.n	8010a66 <_dtoa_r+0x33e>
 8010a80:	07e1      	lsls	r1, r4, #31
 8010a82:	d508      	bpl.n	8010a96 <_dtoa_r+0x36e>
 8010a84:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8010a88:	e9d5 2300 	ldrd	r2, r3, [r5]
 8010a8c:	f7ef fdcc 	bl	8000628 <__aeabi_dmul>
 8010a90:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8010a94:	3601      	adds	r6, #1
 8010a96:	1064      	asrs	r4, r4, #1
 8010a98:	3508      	adds	r5, #8
 8010a9a:	e7e5      	b.n	8010a68 <_dtoa_r+0x340>
 8010a9c:	f000 80af 	beq.w	8010bfe <_dtoa_r+0x4d6>
 8010aa0:	427c      	negs	r4, r7
 8010aa2:	4b81      	ldr	r3, [pc, #516]	@ (8010ca8 <_dtoa_r+0x580>)
 8010aa4:	4d81      	ldr	r5, [pc, #516]	@ (8010cac <_dtoa_r+0x584>)
 8010aa6:	f004 020f 	and.w	r2, r4, #15
 8010aaa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8010aae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010ab2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8010ab6:	f7ef fdb7 	bl	8000628 <__aeabi_dmul>
 8010aba:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8010abe:	1124      	asrs	r4, r4, #4
 8010ac0:	2300      	movs	r3, #0
 8010ac2:	2602      	movs	r6, #2
 8010ac4:	2c00      	cmp	r4, #0
 8010ac6:	f040 808f 	bne.w	8010be8 <_dtoa_r+0x4c0>
 8010aca:	2b00      	cmp	r3, #0
 8010acc:	d1d3      	bne.n	8010a76 <_dtoa_r+0x34e>
 8010ace:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8010ad0:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8010ad4:	2b00      	cmp	r3, #0
 8010ad6:	f000 8094 	beq.w	8010c02 <_dtoa_r+0x4da>
 8010ada:	4b75      	ldr	r3, [pc, #468]	@ (8010cb0 <_dtoa_r+0x588>)
 8010adc:	2200      	movs	r2, #0
 8010ade:	4620      	mov	r0, r4
 8010ae0:	4629      	mov	r1, r5
 8010ae2:	f7f0 f813 	bl	8000b0c <__aeabi_dcmplt>
 8010ae6:	2800      	cmp	r0, #0
 8010ae8:	f000 808b 	beq.w	8010c02 <_dtoa_r+0x4da>
 8010aec:	9b03      	ldr	r3, [sp, #12]
 8010aee:	2b00      	cmp	r3, #0
 8010af0:	f000 8087 	beq.w	8010c02 <_dtoa_r+0x4da>
 8010af4:	f1bb 0f00 	cmp.w	fp, #0
 8010af8:	dd34      	ble.n	8010b64 <_dtoa_r+0x43c>
 8010afa:	4620      	mov	r0, r4
 8010afc:	4b6d      	ldr	r3, [pc, #436]	@ (8010cb4 <_dtoa_r+0x58c>)
 8010afe:	2200      	movs	r2, #0
 8010b00:	4629      	mov	r1, r5
 8010b02:	f7ef fd91 	bl	8000628 <__aeabi_dmul>
 8010b06:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8010b0a:	f107 38ff 	add.w	r8, r7, #4294967295
 8010b0e:	3601      	adds	r6, #1
 8010b10:	465c      	mov	r4, fp
 8010b12:	4630      	mov	r0, r6
 8010b14:	f7ef fd1e 	bl	8000554 <__aeabi_i2d>
 8010b18:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8010b1c:	f7ef fd84 	bl	8000628 <__aeabi_dmul>
 8010b20:	4b65      	ldr	r3, [pc, #404]	@ (8010cb8 <_dtoa_r+0x590>)
 8010b22:	2200      	movs	r2, #0
 8010b24:	f7ef fbca 	bl	80002bc <__adddf3>
 8010b28:	4605      	mov	r5, r0
 8010b2a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8010b2e:	2c00      	cmp	r4, #0
 8010b30:	d16a      	bne.n	8010c08 <_dtoa_r+0x4e0>
 8010b32:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8010b36:	4b61      	ldr	r3, [pc, #388]	@ (8010cbc <_dtoa_r+0x594>)
 8010b38:	2200      	movs	r2, #0
 8010b3a:	f7ef fbbd 	bl	80002b8 <__aeabi_dsub>
 8010b3e:	4602      	mov	r2, r0
 8010b40:	460b      	mov	r3, r1
 8010b42:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8010b46:	462a      	mov	r2, r5
 8010b48:	4633      	mov	r3, r6
 8010b4a:	f7ef fffd 	bl	8000b48 <__aeabi_dcmpgt>
 8010b4e:	2800      	cmp	r0, #0
 8010b50:	f040 8298 	bne.w	8011084 <_dtoa_r+0x95c>
 8010b54:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8010b58:	462a      	mov	r2, r5
 8010b5a:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8010b5e:	f7ef ffd5 	bl	8000b0c <__aeabi_dcmplt>
 8010b62:	bb38      	cbnz	r0, 8010bb4 <_dtoa_r+0x48c>
 8010b64:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 8010b68:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8010b6c:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8010b6e:	2b00      	cmp	r3, #0
 8010b70:	f2c0 8157 	blt.w	8010e22 <_dtoa_r+0x6fa>
 8010b74:	2f0e      	cmp	r7, #14
 8010b76:	f300 8154 	bgt.w	8010e22 <_dtoa_r+0x6fa>
 8010b7a:	4b4b      	ldr	r3, [pc, #300]	@ (8010ca8 <_dtoa_r+0x580>)
 8010b7c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8010b80:	ed93 7b00 	vldr	d7, [r3]
 8010b84:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8010b86:	2b00      	cmp	r3, #0
 8010b88:	ed8d 7b00 	vstr	d7, [sp]
 8010b8c:	f280 80e5 	bge.w	8010d5a <_dtoa_r+0x632>
 8010b90:	9b03      	ldr	r3, [sp, #12]
 8010b92:	2b00      	cmp	r3, #0
 8010b94:	f300 80e1 	bgt.w	8010d5a <_dtoa_r+0x632>
 8010b98:	d10c      	bne.n	8010bb4 <_dtoa_r+0x48c>
 8010b9a:	4b48      	ldr	r3, [pc, #288]	@ (8010cbc <_dtoa_r+0x594>)
 8010b9c:	2200      	movs	r2, #0
 8010b9e:	ec51 0b17 	vmov	r0, r1, d7
 8010ba2:	f7ef fd41 	bl	8000628 <__aeabi_dmul>
 8010ba6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8010baa:	f7ef ffc3 	bl	8000b34 <__aeabi_dcmpge>
 8010bae:	2800      	cmp	r0, #0
 8010bb0:	f000 8266 	beq.w	8011080 <_dtoa_r+0x958>
 8010bb4:	2400      	movs	r4, #0
 8010bb6:	4625      	mov	r5, r4
 8010bb8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8010bba:	4656      	mov	r6, sl
 8010bbc:	ea6f 0803 	mvn.w	r8, r3
 8010bc0:	2700      	movs	r7, #0
 8010bc2:	4621      	mov	r1, r4
 8010bc4:	4648      	mov	r0, r9
 8010bc6:	f000 fcbf 	bl	8011548 <_Bfree>
 8010bca:	2d00      	cmp	r5, #0
 8010bcc:	f000 80bd 	beq.w	8010d4a <_dtoa_r+0x622>
 8010bd0:	b12f      	cbz	r7, 8010bde <_dtoa_r+0x4b6>
 8010bd2:	42af      	cmp	r7, r5
 8010bd4:	d003      	beq.n	8010bde <_dtoa_r+0x4b6>
 8010bd6:	4639      	mov	r1, r7
 8010bd8:	4648      	mov	r0, r9
 8010bda:	f000 fcb5 	bl	8011548 <_Bfree>
 8010bde:	4629      	mov	r1, r5
 8010be0:	4648      	mov	r0, r9
 8010be2:	f000 fcb1 	bl	8011548 <_Bfree>
 8010be6:	e0b0      	b.n	8010d4a <_dtoa_r+0x622>
 8010be8:	07e2      	lsls	r2, r4, #31
 8010bea:	d505      	bpl.n	8010bf8 <_dtoa_r+0x4d0>
 8010bec:	e9d5 2300 	ldrd	r2, r3, [r5]
 8010bf0:	f7ef fd1a 	bl	8000628 <__aeabi_dmul>
 8010bf4:	3601      	adds	r6, #1
 8010bf6:	2301      	movs	r3, #1
 8010bf8:	1064      	asrs	r4, r4, #1
 8010bfa:	3508      	adds	r5, #8
 8010bfc:	e762      	b.n	8010ac4 <_dtoa_r+0x39c>
 8010bfe:	2602      	movs	r6, #2
 8010c00:	e765      	b.n	8010ace <_dtoa_r+0x3a6>
 8010c02:	9c03      	ldr	r4, [sp, #12]
 8010c04:	46b8      	mov	r8, r7
 8010c06:	e784      	b.n	8010b12 <_dtoa_r+0x3ea>
 8010c08:	4b27      	ldr	r3, [pc, #156]	@ (8010ca8 <_dtoa_r+0x580>)
 8010c0a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8010c0c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8010c10:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8010c14:	4454      	add	r4, sl
 8010c16:	2900      	cmp	r1, #0
 8010c18:	d054      	beq.n	8010cc4 <_dtoa_r+0x59c>
 8010c1a:	4929      	ldr	r1, [pc, #164]	@ (8010cc0 <_dtoa_r+0x598>)
 8010c1c:	2000      	movs	r0, #0
 8010c1e:	f7ef fe2d 	bl	800087c <__aeabi_ddiv>
 8010c22:	4633      	mov	r3, r6
 8010c24:	462a      	mov	r2, r5
 8010c26:	f7ef fb47 	bl	80002b8 <__aeabi_dsub>
 8010c2a:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8010c2e:	4656      	mov	r6, sl
 8010c30:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8010c34:	f7ef ffa8 	bl	8000b88 <__aeabi_d2iz>
 8010c38:	4605      	mov	r5, r0
 8010c3a:	f7ef fc8b 	bl	8000554 <__aeabi_i2d>
 8010c3e:	4602      	mov	r2, r0
 8010c40:	460b      	mov	r3, r1
 8010c42:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8010c46:	f7ef fb37 	bl	80002b8 <__aeabi_dsub>
 8010c4a:	3530      	adds	r5, #48	@ 0x30
 8010c4c:	4602      	mov	r2, r0
 8010c4e:	460b      	mov	r3, r1
 8010c50:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8010c54:	f806 5b01 	strb.w	r5, [r6], #1
 8010c58:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8010c5c:	f7ef ff56 	bl	8000b0c <__aeabi_dcmplt>
 8010c60:	2800      	cmp	r0, #0
 8010c62:	d172      	bne.n	8010d4a <_dtoa_r+0x622>
 8010c64:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8010c68:	4911      	ldr	r1, [pc, #68]	@ (8010cb0 <_dtoa_r+0x588>)
 8010c6a:	2000      	movs	r0, #0
 8010c6c:	f7ef fb24 	bl	80002b8 <__aeabi_dsub>
 8010c70:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8010c74:	f7ef ff4a 	bl	8000b0c <__aeabi_dcmplt>
 8010c78:	2800      	cmp	r0, #0
 8010c7a:	f040 80b4 	bne.w	8010de6 <_dtoa_r+0x6be>
 8010c7e:	42a6      	cmp	r6, r4
 8010c80:	f43f af70 	beq.w	8010b64 <_dtoa_r+0x43c>
 8010c84:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8010c88:	4b0a      	ldr	r3, [pc, #40]	@ (8010cb4 <_dtoa_r+0x58c>)
 8010c8a:	2200      	movs	r2, #0
 8010c8c:	f7ef fccc 	bl	8000628 <__aeabi_dmul>
 8010c90:	4b08      	ldr	r3, [pc, #32]	@ (8010cb4 <_dtoa_r+0x58c>)
 8010c92:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8010c96:	2200      	movs	r2, #0
 8010c98:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8010c9c:	f7ef fcc4 	bl	8000628 <__aeabi_dmul>
 8010ca0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8010ca4:	e7c4      	b.n	8010c30 <_dtoa_r+0x508>
 8010ca6:	bf00      	nop
 8010ca8:	08015988 	.word	0x08015988
 8010cac:	08015960 	.word	0x08015960
 8010cb0:	3ff00000 	.word	0x3ff00000
 8010cb4:	40240000 	.word	0x40240000
 8010cb8:	401c0000 	.word	0x401c0000
 8010cbc:	40140000 	.word	0x40140000
 8010cc0:	3fe00000 	.word	0x3fe00000
 8010cc4:	4631      	mov	r1, r6
 8010cc6:	4628      	mov	r0, r5
 8010cc8:	f7ef fcae 	bl	8000628 <__aeabi_dmul>
 8010ccc:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8010cd0:	9413      	str	r4, [sp, #76]	@ 0x4c
 8010cd2:	4656      	mov	r6, sl
 8010cd4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8010cd8:	f7ef ff56 	bl	8000b88 <__aeabi_d2iz>
 8010cdc:	4605      	mov	r5, r0
 8010cde:	f7ef fc39 	bl	8000554 <__aeabi_i2d>
 8010ce2:	4602      	mov	r2, r0
 8010ce4:	460b      	mov	r3, r1
 8010ce6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8010cea:	f7ef fae5 	bl	80002b8 <__aeabi_dsub>
 8010cee:	3530      	adds	r5, #48	@ 0x30
 8010cf0:	f806 5b01 	strb.w	r5, [r6], #1
 8010cf4:	4602      	mov	r2, r0
 8010cf6:	460b      	mov	r3, r1
 8010cf8:	42a6      	cmp	r6, r4
 8010cfa:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8010cfe:	f04f 0200 	mov.w	r2, #0
 8010d02:	d124      	bne.n	8010d4e <_dtoa_r+0x626>
 8010d04:	4baf      	ldr	r3, [pc, #700]	@ (8010fc4 <_dtoa_r+0x89c>)
 8010d06:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8010d0a:	f7ef fad7 	bl	80002bc <__adddf3>
 8010d0e:	4602      	mov	r2, r0
 8010d10:	460b      	mov	r3, r1
 8010d12:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8010d16:	f7ef ff17 	bl	8000b48 <__aeabi_dcmpgt>
 8010d1a:	2800      	cmp	r0, #0
 8010d1c:	d163      	bne.n	8010de6 <_dtoa_r+0x6be>
 8010d1e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8010d22:	49a8      	ldr	r1, [pc, #672]	@ (8010fc4 <_dtoa_r+0x89c>)
 8010d24:	2000      	movs	r0, #0
 8010d26:	f7ef fac7 	bl	80002b8 <__aeabi_dsub>
 8010d2a:	4602      	mov	r2, r0
 8010d2c:	460b      	mov	r3, r1
 8010d2e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8010d32:	f7ef feeb 	bl	8000b0c <__aeabi_dcmplt>
 8010d36:	2800      	cmp	r0, #0
 8010d38:	f43f af14 	beq.w	8010b64 <_dtoa_r+0x43c>
 8010d3c:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8010d3e:	1e73      	subs	r3, r6, #1
 8010d40:	9313      	str	r3, [sp, #76]	@ 0x4c
 8010d42:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8010d46:	2b30      	cmp	r3, #48	@ 0x30
 8010d48:	d0f8      	beq.n	8010d3c <_dtoa_r+0x614>
 8010d4a:	4647      	mov	r7, r8
 8010d4c:	e03b      	b.n	8010dc6 <_dtoa_r+0x69e>
 8010d4e:	4b9e      	ldr	r3, [pc, #632]	@ (8010fc8 <_dtoa_r+0x8a0>)
 8010d50:	f7ef fc6a 	bl	8000628 <__aeabi_dmul>
 8010d54:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8010d58:	e7bc      	b.n	8010cd4 <_dtoa_r+0x5ac>
 8010d5a:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8010d5e:	4656      	mov	r6, sl
 8010d60:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010d64:	4620      	mov	r0, r4
 8010d66:	4629      	mov	r1, r5
 8010d68:	f7ef fd88 	bl	800087c <__aeabi_ddiv>
 8010d6c:	f7ef ff0c 	bl	8000b88 <__aeabi_d2iz>
 8010d70:	4680      	mov	r8, r0
 8010d72:	f7ef fbef 	bl	8000554 <__aeabi_i2d>
 8010d76:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010d7a:	f7ef fc55 	bl	8000628 <__aeabi_dmul>
 8010d7e:	4602      	mov	r2, r0
 8010d80:	460b      	mov	r3, r1
 8010d82:	4620      	mov	r0, r4
 8010d84:	4629      	mov	r1, r5
 8010d86:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8010d8a:	f7ef fa95 	bl	80002b8 <__aeabi_dsub>
 8010d8e:	f806 4b01 	strb.w	r4, [r6], #1
 8010d92:	9d03      	ldr	r5, [sp, #12]
 8010d94:	eba6 040a 	sub.w	r4, r6, sl
 8010d98:	42a5      	cmp	r5, r4
 8010d9a:	4602      	mov	r2, r0
 8010d9c:	460b      	mov	r3, r1
 8010d9e:	d133      	bne.n	8010e08 <_dtoa_r+0x6e0>
 8010da0:	f7ef fa8c 	bl	80002bc <__adddf3>
 8010da4:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010da8:	4604      	mov	r4, r0
 8010daa:	460d      	mov	r5, r1
 8010dac:	f7ef fecc 	bl	8000b48 <__aeabi_dcmpgt>
 8010db0:	b9c0      	cbnz	r0, 8010de4 <_dtoa_r+0x6bc>
 8010db2:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010db6:	4620      	mov	r0, r4
 8010db8:	4629      	mov	r1, r5
 8010dba:	f7ef fe9d 	bl	8000af8 <__aeabi_dcmpeq>
 8010dbe:	b110      	cbz	r0, 8010dc6 <_dtoa_r+0x69e>
 8010dc0:	f018 0f01 	tst.w	r8, #1
 8010dc4:	d10e      	bne.n	8010de4 <_dtoa_r+0x6bc>
 8010dc6:	9902      	ldr	r1, [sp, #8]
 8010dc8:	4648      	mov	r0, r9
 8010dca:	f000 fbbd 	bl	8011548 <_Bfree>
 8010dce:	2300      	movs	r3, #0
 8010dd0:	7033      	strb	r3, [r6, #0]
 8010dd2:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8010dd4:	3701      	adds	r7, #1
 8010dd6:	601f      	str	r7, [r3, #0]
 8010dd8:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8010dda:	2b00      	cmp	r3, #0
 8010ddc:	f000 824b 	beq.w	8011276 <_dtoa_r+0xb4e>
 8010de0:	601e      	str	r6, [r3, #0]
 8010de2:	e248      	b.n	8011276 <_dtoa_r+0xb4e>
 8010de4:	46b8      	mov	r8, r7
 8010de6:	4633      	mov	r3, r6
 8010de8:	461e      	mov	r6, r3
 8010dea:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8010dee:	2a39      	cmp	r2, #57	@ 0x39
 8010df0:	d106      	bne.n	8010e00 <_dtoa_r+0x6d8>
 8010df2:	459a      	cmp	sl, r3
 8010df4:	d1f8      	bne.n	8010de8 <_dtoa_r+0x6c0>
 8010df6:	2230      	movs	r2, #48	@ 0x30
 8010df8:	f108 0801 	add.w	r8, r8, #1
 8010dfc:	f88a 2000 	strb.w	r2, [sl]
 8010e00:	781a      	ldrb	r2, [r3, #0]
 8010e02:	3201      	adds	r2, #1
 8010e04:	701a      	strb	r2, [r3, #0]
 8010e06:	e7a0      	b.n	8010d4a <_dtoa_r+0x622>
 8010e08:	4b6f      	ldr	r3, [pc, #444]	@ (8010fc8 <_dtoa_r+0x8a0>)
 8010e0a:	2200      	movs	r2, #0
 8010e0c:	f7ef fc0c 	bl	8000628 <__aeabi_dmul>
 8010e10:	2200      	movs	r2, #0
 8010e12:	2300      	movs	r3, #0
 8010e14:	4604      	mov	r4, r0
 8010e16:	460d      	mov	r5, r1
 8010e18:	f7ef fe6e 	bl	8000af8 <__aeabi_dcmpeq>
 8010e1c:	2800      	cmp	r0, #0
 8010e1e:	d09f      	beq.n	8010d60 <_dtoa_r+0x638>
 8010e20:	e7d1      	b.n	8010dc6 <_dtoa_r+0x69e>
 8010e22:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8010e24:	2a00      	cmp	r2, #0
 8010e26:	f000 80ea 	beq.w	8010ffe <_dtoa_r+0x8d6>
 8010e2a:	9a07      	ldr	r2, [sp, #28]
 8010e2c:	2a01      	cmp	r2, #1
 8010e2e:	f300 80cd 	bgt.w	8010fcc <_dtoa_r+0x8a4>
 8010e32:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8010e34:	2a00      	cmp	r2, #0
 8010e36:	f000 80c1 	beq.w	8010fbc <_dtoa_r+0x894>
 8010e3a:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8010e3e:	9c08      	ldr	r4, [sp, #32]
 8010e40:	9e00      	ldr	r6, [sp, #0]
 8010e42:	9a00      	ldr	r2, [sp, #0]
 8010e44:	441a      	add	r2, r3
 8010e46:	9200      	str	r2, [sp, #0]
 8010e48:	9a06      	ldr	r2, [sp, #24]
 8010e4a:	2101      	movs	r1, #1
 8010e4c:	441a      	add	r2, r3
 8010e4e:	4648      	mov	r0, r9
 8010e50:	9206      	str	r2, [sp, #24]
 8010e52:	f000 fc77 	bl	8011744 <__i2b>
 8010e56:	4605      	mov	r5, r0
 8010e58:	b166      	cbz	r6, 8010e74 <_dtoa_r+0x74c>
 8010e5a:	9b06      	ldr	r3, [sp, #24]
 8010e5c:	2b00      	cmp	r3, #0
 8010e5e:	dd09      	ble.n	8010e74 <_dtoa_r+0x74c>
 8010e60:	42b3      	cmp	r3, r6
 8010e62:	9a00      	ldr	r2, [sp, #0]
 8010e64:	bfa8      	it	ge
 8010e66:	4633      	movge	r3, r6
 8010e68:	1ad2      	subs	r2, r2, r3
 8010e6a:	9200      	str	r2, [sp, #0]
 8010e6c:	9a06      	ldr	r2, [sp, #24]
 8010e6e:	1af6      	subs	r6, r6, r3
 8010e70:	1ad3      	subs	r3, r2, r3
 8010e72:	9306      	str	r3, [sp, #24]
 8010e74:	9b08      	ldr	r3, [sp, #32]
 8010e76:	b30b      	cbz	r3, 8010ebc <_dtoa_r+0x794>
 8010e78:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010e7a:	2b00      	cmp	r3, #0
 8010e7c:	f000 80c6 	beq.w	801100c <_dtoa_r+0x8e4>
 8010e80:	2c00      	cmp	r4, #0
 8010e82:	f000 80c0 	beq.w	8011006 <_dtoa_r+0x8de>
 8010e86:	4629      	mov	r1, r5
 8010e88:	4622      	mov	r2, r4
 8010e8a:	4648      	mov	r0, r9
 8010e8c:	f000 fd12 	bl	80118b4 <__pow5mult>
 8010e90:	9a02      	ldr	r2, [sp, #8]
 8010e92:	4601      	mov	r1, r0
 8010e94:	4605      	mov	r5, r0
 8010e96:	4648      	mov	r0, r9
 8010e98:	f000 fc6a 	bl	8011770 <__multiply>
 8010e9c:	9902      	ldr	r1, [sp, #8]
 8010e9e:	4680      	mov	r8, r0
 8010ea0:	4648      	mov	r0, r9
 8010ea2:	f000 fb51 	bl	8011548 <_Bfree>
 8010ea6:	9b08      	ldr	r3, [sp, #32]
 8010ea8:	1b1b      	subs	r3, r3, r4
 8010eaa:	9308      	str	r3, [sp, #32]
 8010eac:	f000 80b1 	beq.w	8011012 <_dtoa_r+0x8ea>
 8010eb0:	9a08      	ldr	r2, [sp, #32]
 8010eb2:	4641      	mov	r1, r8
 8010eb4:	4648      	mov	r0, r9
 8010eb6:	f000 fcfd 	bl	80118b4 <__pow5mult>
 8010eba:	9002      	str	r0, [sp, #8]
 8010ebc:	2101      	movs	r1, #1
 8010ebe:	4648      	mov	r0, r9
 8010ec0:	f000 fc40 	bl	8011744 <__i2b>
 8010ec4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8010ec6:	4604      	mov	r4, r0
 8010ec8:	2b00      	cmp	r3, #0
 8010eca:	f000 81d8 	beq.w	801127e <_dtoa_r+0xb56>
 8010ece:	461a      	mov	r2, r3
 8010ed0:	4601      	mov	r1, r0
 8010ed2:	4648      	mov	r0, r9
 8010ed4:	f000 fcee 	bl	80118b4 <__pow5mult>
 8010ed8:	9b07      	ldr	r3, [sp, #28]
 8010eda:	2b01      	cmp	r3, #1
 8010edc:	4604      	mov	r4, r0
 8010ede:	f300 809f 	bgt.w	8011020 <_dtoa_r+0x8f8>
 8010ee2:	9b04      	ldr	r3, [sp, #16]
 8010ee4:	2b00      	cmp	r3, #0
 8010ee6:	f040 8097 	bne.w	8011018 <_dtoa_r+0x8f0>
 8010eea:	9b05      	ldr	r3, [sp, #20]
 8010eec:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8010ef0:	2b00      	cmp	r3, #0
 8010ef2:	f040 8093 	bne.w	801101c <_dtoa_r+0x8f4>
 8010ef6:	9b05      	ldr	r3, [sp, #20]
 8010ef8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8010efc:	0d1b      	lsrs	r3, r3, #20
 8010efe:	051b      	lsls	r3, r3, #20
 8010f00:	b133      	cbz	r3, 8010f10 <_dtoa_r+0x7e8>
 8010f02:	9b00      	ldr	r3, [sp, #0]
 8010f04:	3301      	adds	r3, #1
 8010f06:	9300      	str	r3, [sp, #0]
 8010f08:	9b06      	ldr	r3, [sp, #24]
 8010f0a:	3301      	adds	r3, #1
 8010f0c:	9306      	str	r3, [sp, #24]
 8010f0e:	2301      	movs	r3, #1
 8010f10:	9308      	str	r3, [sp, #32]
 8010f12:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8010f14:	2b00      	cmp	r3, #0
 8010f16:	f000 81b8 	beq.w	801128a <_dtoa_r+0xb62>
 8010f1a:	6923      	ldr	r3, [r4, #16]
 8010f1c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8010f20:	6918      	ldr	r0, [r3, #16]
 8010f22:	f000 fbc3 	bl	80116ac <__hi0bits>
 8010f26:	f1c0 0020 	rsb	r0, r0, #32
 8010f2a:	9b06      	ldr	r3, [sp, #24]
 8010f2c:	4418      	add	r0, r3
 8010f2e:	f010 001f 	ands.w	r0, r0, #31
 8010f32:	f000 8082 	beq.w	801103a <_dtoa_r+0x912>
 8010f36:	f1c0 0320 	rsb	r3, r0, #32
 8010f3a:	2b04      	cmp	r3, #4
 8010f3c:	dd73      	ble.n	8011026 <_dtoa_r+0x8fe>
 8010f3e:	9b00      	ldr	r3, [sp, #0]
 8010f40:	f1c0 001c 	rsb	r0, r0, #28
 8010f44:	4403      	add	r3, r0
 8010f46:	9300      	str	r3, [sp, #0]
 8010f48:	9b06      	ldr	r3, [sp, #24]
 8010f4a:	4403      	add	r3, r0
 8010f4c:	4406      	add	r6, r0
 8010f4e:	9306      	str	r3, [sp, #24]
 8010f50:	9b00      	ldr	r3, [sp, #0]
 8010f52:	2b00      	cmp	r3, #0
 8010f54:	dd05      	ble.n	8010f62 <_dtoa_r+0x83a>
 8010f56:	9902      	ldr	r1, [sp, #8]
 8010f58:	461a      	mov	r2, r3
 8010f5a:	4648      	mov	r0, r9
 8010f5c:	f000 fd04 	bl	8011968 <__lshift>
 8010f60:	9002      	str	r0, [sp, #8]
 8010f62:	9b06      	ldr	r3, [sp, #24]
 8010f64:	2b00      	cmp	r3, #0
 8010f66:	dd05      	ble.n	8010f74 <_dtoa_r+0x84c>
 8010f68:	4621      	mov	r1, r4
 8010f6a:	461a      	mov	r2, r3
 8010f6c:	4648      	mov	r0, r9
 8010f6e:	f000 fcfb 	bl	8011968 <__lshift>
 8010f72:	4604      	mov	r4, r0
 8010f74:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8010f76:	2b00      	cmp	r3, #0
 8010f78:	d061      	beq.n	801103e <_dtoa_r+0x916>
 8010f7a:	9802      	ldr	r0, [sp, #8]
 8010f7c:	4621      	mov	r1, r4
 8010f7e:	f000 fd5f 	bl	8011a40 <__mcmp>
 8010f82:	2800      	cmp	r0, #0
 8010f84:	da5b      	bge.n	801103e <_dtoa_r+0x916>
 8010f86:	2300      	movs	r3, #0
 8010f88:	9902      	ldr	r1, [sp, #8]
 8010f8a:	220a      	movs	r2, #10
 8010f8c:	4648      	mov	r0, r9
 8010f8e:	f000 fafd 	bl	801158c <__multadd>
 8010f92:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010f94:	9002      	str	r0, [sp, #8]
 8010f96:	f107 38ff 	add.w	r8, r7, #4294967295
 8010f9a:	2b00      	cmp	r3, #0
 8010f9c:	f000 8177 	beq.w	801128e <_dtoa_r+0xb66>
 8010fa0:	4629      	mov	r1, r5
 8010fa2:	2300      	movs	r3, #0
 8010fa4:	220a      	movs	r2, #10
 8010fa6:	4648      	mov	r0, r9
 8010fa8:	f000 faf0 	bl	801158c <__multadd>
 8010fac:	f1bb 0f00 	cmp.w	fp, #0
 8010fb0:	4605      	mov	r5, r0
 8010fb2:	dc6f      	bgt.n	8011094 <_dtoa_r+0x96c>
 8010fb4:	9b07      	ldr	r3, [sp, #28]
 8010fb6:	2b02      	cmp	r3, #2
 8010fb8:	dc49      	bgt.n	801104e <_dtoa_r+0x926>
 8010fba:	e06b      	b.n	8011094 <_dtoa_r+0x96c>
 8010fbc:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8010fbe:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8010fc2:	e73c      	b.n	8010e3e <_dtoa_r+0x716>
 8010fc4:	3fe00000 	.word	0x3fe00000
 8010fc8:	40240000 	.word	0x40240000
 8010fcc:	9b03      	ldr	r3, [sp, #12]
 8010fce:	1e5c      	subs	r4, r3, #1
 8010fd0:	9b08      	ldr	r3, [sp, #32]
 8010fd2:	42a3      	cmp	r3, r4
 8010fd4:	db09      	blt.n	8010fea <_dtoa_r+0x8c2>
 8010fd6:	1b1c      	subs	r4, r3, r4
 8010fd8:	9b03      	ldr	r3, [sp, #12]
 8010fda:	2b00      	cmp	r3, #0
 8010fdc:	f6bf af30 	bge.w	8010e40 <_dtoa_r+0x718>
 8010fe0:	9b00      	ldr	r3, [sp, #0]
 8010fe2:	9a03      	ldr	r2, [sp, #12]
 8010fe4:	1a9e      	subs	r6, r3, r2
 8010fe6:	2300      	movs	r3, #0
 8010fe8:	e72b      	b.n	8010e42 <_dtoa_r+0x71a>
 8010fea:	9b08      	ldr	r3, [sp, #32]
 8010fec:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8010fee:	9408      	str	r4, [sp, #32]
 8010ff0:	1ae3      	subs	r3, r4, r3
 8010ff2:	441a      	add	r2, r3
 8010ff4:	9e00      	ldr	r6, [sp, #0]
 8010ff6:	9b03      	ldr	r3, [sp, #12]
 8010ff8:	920d      	str	r2, [sp, #52]	@ 0x34
 8010ffa:	2400      	movs	r4, #0
 8010ffc:	e721      	b.n	8010e42 <_dtoa_r+0x71a>
 8010ffe:	9c08      	ldr	r4, [sp, #32]
 8011000:	9e00      	ldr	r6, [sp, #0]
 8011002:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8011004:	e728      	b.n	8010e58 <_dtoa_r+0x730>
 8011006:	f8dd 8008 	ldr.w	r8, [sp, #8]
 801100a:	e751      	b.n	8010eb0 <_dtoa_r+0x788>
 801100c:	9a08      	ldr	r2, [sp, #32]
 801100e:	9902      	ldr	r1, [sp, #8]
 8011010:	e750      	b.n	8010eb4 <_dtoa_r+0x78c>
 8011012:	f8cd 8008 	str.w	r8, [sp, #8]
 8011016:	e751      	b.n	8010ebc <_dtoa_r+0x794>
 8011018:	2300      	movs	r3, #0
 801101a:	e779      	b.n	8010f10 <_dtoa_r+0x7e8>
 801101c:	9b04      	ldr	r3, [sp, #16]
 801101e:	e777      	b.n	8010f10 <_dtoa_r+0x7e8>
 8011020:	2300      	movs	r3, #0
 8011022:	9308      	str	r3, [sp, #32]
 8011024:	e779      	b.n	8010f1a <_dtoa_r+0x7f2>
 8011026:	d093      	beq.n	8010f50 <_dtoa_r+0x828>
 8011028:	9a00      	ldr	r2, [sp, #0]
 801102a:	331c      	adds	r3, #28
 801102c:	441a      	add	r2, r3
 801102e:	9200      	str	r2, [sp, #0]
 8011030:	9a06      	ldr	r2, [sp, #24]
 8011032:	441a      	add	r2, r3
 8011034:	441e      	add	r6, r3
 8011036:	9206      	str	r2, [sp, #24]
 8011038:	e78a      	b.n	8010f50 <_dtoa_r+0x828>
 801103a:	4603      	mov	r3, r0
 801103c:	e7f4      	b.n	8011028 <_dtoa_r+0x900>
 801103e:	9b03      	ldr	r3, [sp, #12]
 8011040:	2b00      	cmp	r3, #0
 8011042:	46b8      	mov	r8, r7
 8011044:	dc20      	bgt.n	8011088 <_dtoa_r+0x960>
 8011046:	469b      	mov	fp, r3
 8011048:	9b07      	ldr	r3, [sp, #28]
 801104a:	2b02      	cmp	r3, #2
 801104c:	dd1e      	ble.n	801108c <_dtoa_r+0x964>
 801104e:	f1bb 0f00 	cmp.w	fp, #0
 8011052:	f47f adb1 	bne.w	8010bb8 <_dtoa_r+0x490>
 8011056:	4621      	mov	r1, r4
 8011058:	465b      	mov	r3, fp
 801105a:	2205      	movs	r2, #5
 801105c:	4648      	mov	r0, r9
 801105e:	f000 fa95 	bl	801158c <__multadd>
 8011062:	4601      	mov	r1, r0
 8011064:	4604      	mov	r4, r0
 8011066:	9802      	ldr	r0, [sp, #8]
 8011068:	f000 fcea 	bl	8011a40 <__mcmp>
 801106c:	2800      	cmp	r0, #0
 801106e:	f77f ada3 	ble.w	8010bb8 <_dtoa_r+0x490>
 8011072:	4656      	mov	r6, sl
 8011074:	2331      	movs	r3, #49	@ 0x31
 8011076:	f806 3b01 	strb.w	r3, [r6], #1
 801107a:	f108 0801 	add.w	r8, r8, #1
 801107e:	e59f      	b.n	8010bc0 <_dtoa_r+0x498>
 8011080:	9c03      	ldr	r4, [sp, #12]
 8011082:	46b8      	mov	r8, r7
 8011084:	4625      	mov	r5, r4
 8011086:	e7f4      	b.n	8011072 <_dtoa_r+0x94a>
 8011088:	f8dd b00c 	ldr.w	fp, [sp, #12]
 801108c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801108e:	2b00      	cmp	r3, #0
 8011090:	f000 8101 	beq.w	8011296 <_dtoa_r+0xb6e>
 8011094:	2e00      	cmp	r6, #0
 8011096:	dd05      	ble.n	80110a4 <_dtoa_r+0x97c>
 8011098:	4629      	mov	r1, r5
 801109a:	4632      	mov	r2, r6
 801109c:	4648      	mov	r0, r9
 801109e:	f000 fc63 	bl	8011968 <__lshift>
 80110a2:	4605      	mov	r5, r0
 80110a4:	9b08      	ldr	r3, [sp, #32]
 80110a6:	2b00      	cmp	r3, #0
 80110a8:	d05c      	beq.n	8011164 <_dtoa_r+0xa3c>
 80110aa:	6869      	ldr	r1, [r5, #4]
 80110ac:	4648      	mov	r0, r9
 80110ae:	f000 fa0b 	bl	80114c8 <_Balloc>
 80110b2:	4606      	mov	r6, r0
 80110b4:	b928      	cbnz	r0, 80110c2 <_dtoa_r+0x99a>
 80110b6:	4b82      	ldr	r3, [pc, #520]	@ (80112c0 <_dtoa_r+0xb98>)
 80110b8:	4602      	mov	r2, r0
 80110ba:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80110be:	f7ff bb4a 	b.w	8010756 <_dtoa_r+0x2e>
 80110c2:	692a      	ldr	r2, [r5, #16]
 80110c4:	3202      	adds	r2, #2
 80110c6:	0092      	lsls	r2, r2, #2
 80110c8:	f105 010c 	add.w	r1, r5, #12
 80110cc:	300c      	adds	r0, #12
 80110ce:	f7ff fa70 	bl	80105b2 <memcpy>
 80110d2:	2201      	movs	r2, #1
 80110d4:	4631      	mov	r1, r6
 80110d6:	4648      	mov	r0, r9
 80110d8:	f000 fc46 	bl	8011968 <__lshift>
 80110dc:	f10a 0301 	add.w	r3, sl, #1
 80110e0:	9300      	str	r3, [sp, #0]
 80110e2:	eb0a 030b 	add.w	r3, sl, fp
 80110e6:	9308      	str	r3, [sp, #32]
 80110e8:	9b04      	ldr	r3, [sp, #16]
 80110ea:	f003 0301 	and.w	r3, r3, #1
 80110ee:	462f      	mov	r7, r5
 80110f0:	9306      	str	r3, [sp, #24]
 80110f2:	4605      	mov	r5, r0
 80110f4:	9b00      	ldr	r3, [sp, #0]
 80110f6:	9802      	ldr	r0, [sp, #8]
 80110f8:	4621      	mov	r1, r4
 80110fa:	f103 3bff 	add.w	fp, r3, #4294967295
 80110fe:	f7ff fa8b 	bl	8010618 <quorem>
 8011102:	4603      	mov	r3, r0
 8011104:	3330      	adds	r3, #48	@ 0x30
 8011106:	9003      	str	r0, [sp, #12]
 8011108:	4639      	mov	r1, r7
 801110a:	9802      	ldr	r0, [sp, #8]
 801110c:	9309      	str	r3, [sp, #36]	@ 0x24
 801110e:	f000 fc97 	bl	8011a40 <__mcmp>
 8011112:	462a      	mov	r2, r5
 8011114:	9004      	str	r0, [sp, #16]
 8011116:	4621      	mov	r1, r4
 8011118:	4648      	mov	r0, r9
 801111a:	f000 fcad 	bl	8011a78 <__mdiff>
 801111e:	68c2      	ldr	r2, [r0, #12]
 8011120:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011122:	4606      	mov	r6, r0
 8011124:	bb02      	cbnz	r2, 8011168 <_dtoa_r+0xa40>
 8011126:	4601      	mov	r1, r0
 8011128:	9802      	ldr	r0, [sp, #8]
 801112a:	f000 fc89 	bl	8011a40 <__mcmp>
 801112e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011130:	4602      	mov	r2, r0
 8011132:	4631      	mov	r1, r6
 8011134:	4648      	mov	r0, r9
 8011136:	920c      	str	r2, [sp, #48]	@ 0x30
 8011138:	9309      	str	r3, [sp, #36]	@ 0x24
 801113a:	f000 fa05 	bl	8011548 <_Bfree>
 801113e:	9b07      	ldr	r3, [sp, #28]
 8011140:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8011142:	9e00      	ldr	r6, [sp, #0]
 8011144:	ea42 0103 	orr.w	r1, r2, r3
 8011148:	9b06      	ldr	r3, [sp, #24]
 801114a:	4319      	orrs	r1, r3
 801114c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801114e:	d10d      	bne.n	801116c <_dtoa_r+0xa44>
 8011150:	2b39      	cmp	r3, #57	@ 0x39
 8011152:	d027      	beq.n	80111a4 <_dtoa_r+0xa7c>
 8011154:	9a04      	ldr	r2, [sp, #16]
 8011156:	2a00      	cmp	r2, #0
 8011158:	dd01      	ble.n	801115e <_dtoa_r+0xa36>
 801115a:	9b03      	ldr	r3, [sp, #12]
 801115c:	3331      	adds	r3, #49	@ 0x31
 801115e:	f88b 3000 	strb.w	r3, [fp]
 8011162:	e52e      	b.n	8010bc2 <_dtoa_r+0x49a>
 8011164:	4628      	mov	r0, r5
 8011166:	e7b9      	b.n	80110dc <_dtoa_r+0x9b4>
 8011168:	2201      	movs	r2, #1
 801116a:	e7e2      	b.n	8011132 <_dtoa_r+0xa0a>
 801116c:	9904      	ldr	r1, [sp, #16]
 801116e:	2900      	cmp	r1, #0
 8011170:	db04      	blt.n	801117c <_dtoa_r+0xa54>
 8011172:	9807      	ldr	r0, [sp, #28]
 8011174:	4301      	orrs	r1, r0
 8011176:	9806      	ldr	r0, [sp, #24]
 8011178:	4301      	orrs	r1, r0
 801117a:	d120      	bne.n	80111be <_dtoa_r+0xa96>
 801117c:	2a00      	cmp	r2, #0
 801117e:	ddee      	ble.n	801115e <_dtoa_r+0xa36>
 8011180:	9902      	ldr	r1, [sp, #8]
 8011182:	9300      	str	r3, [sp, #0]
 8011184:	2201      	movs	r2, #1
 8011186:	4648      	mov	r0, r9
 8011188:	f000 fbee 	bl	8011968 <__lshift>
 801118c:	4621      	mov	r1, r4
 801118e:	9002      	str	r0, [sp, #8]
 8011190:	f000 fc56 	bl	8011a40 <__mcmp>
 8011194:	2800      	cmp	r0, #0
 8011196:	9b00      	ldr	r3, [sp, #0]
 8011198:	dc02      	bgt.n	80111a0 <_dtoa_r+0xa78>
 801119a:	d1e0      	bne.n	801115e <_dtoa_r+0xa36>
 801119c:	07da      	lsls	r2, r3, #31
 801119e:	d5de      	bpl.n	801115e <_dtoa_r+0xa36>
 80111a0:	2b39      	cmp	r3, #57	@ 0x39
 80111a2:	d1da      	bne.n	801115a <_dtoa_r+0xa32>
 80111a4:	2339      	movs	r3, #57	@ 0x39
 80111a6:	f88b 3000 	strb.w	r3, [fp]
 80111aa:	4633      	mov	r3, r6
 80111ac:	461e      	mov	r6, r3
 80111ae:	3b01      	subs	r3, #1
 80111b0:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80111b4:	2a39      	cmp	r2, #57	@ 0x39
 80111b6:	d04e      	beq.n	8011256 <_dtoa_r+0xb2e>
 80111b8:	3201      	adds	r2, #1
 80111ba:	701a      	strb	r2, [r3, #0]
 80111bc:	e501      	b.n	8010bc2 <_dtoa_r+0x49a>
 80111be:	2a00      	cmp	r2, #0
 80111c0:	dd03      	ble.n	80111ca <_dtoa_r+0xaa2>
 80111c2:	2b39      	cmp	r3, #57	@ 0x39
 80111c4:	d0ee      	beq.n	80111a4 <_dtoa_r+0xa7c>
 80111c6:	3301      	adds	r3, #1
 80111c8:	e7c9      	b.n	801115e <_dtoa_r+0xa36>
 80111ca:	9a00      	ldr	r2, [sp, #0]
 80111cc:	9908      	ldr	r1, [sp, #32]
 80111ce:	f802 3c01 	strb.w	r3, [r2, #-1]
 80111d2:	428a      	cmp	r2, r1
 80111d4:	d028      	beq.n	8011228 <_dtoa_r+0xb00>
 80111d6:	9902      	ldr	r1, [sp, #8]
 80111d8:	2300      	movs	r3, #0
 80111da:	220a      	movs	r2, #10
 80111dc:	4648      	mov	r0, r9
 80111de:	f000 f9d5 	bl	801158c <__multadd>
 80111e2:	42af      	cmp	r7, r5
 80111e4:	9002      	str	r0, [sp, #8]
 80111e6:	f04f 0300 	mov.w	r3, #0
 80111ea:	f04f 020a 	mov.w	r2, #10
 80111ee:	4639      	mov	r1, r7
 80111f0:	4648      	mov	r0, r9
 80111f2:	d107      	bne.n	8011204 <_dtoa_r+0xadc>
 80111f4:	f000 f9ca 	bl	801158c <__multadd>
 80111f8:	4607      	mov	r7, r0
 80111fa:	4605      	mov	r5, r0
 80111fc:	9b00      	ldr	r3, [sp, #0]
 80111fe:	3301      	adds	r3, #1
 8011200:	9300      	str	r3, [sp, #0]
 8011202:	e777      	b.n	80110f4 <_dtoa_r+0x9cc>
 8011204:	f000 f9c2 	bl	801158c <__multadd>
 8011208:	4629      	mov	r1, r5
 801120a:	4607      	mov	r7, r0
 801120c:	2300      	movs	r3, #0
 801120e:	220a      	movs	r2, #10
 8011210:	4648      	mov	r0, r9
 8011212:	f000 f9bb 	bl	801158c <__multadd>
 8011216:	4605      	mov	r5, r0
 8011218:	e7f0      	b.n	80111fc <_dtoa_r+0xad4>
 801121a:	f1bb 0f00 	cmp.w	fp, #0
 801121e:	bfcc      	ite	gt
 8011220:	465e      	movgt	r6, fp
 8011222:	2601      	movle	r6, #1
 8011224:	4456      	add	r6, sl
 8011226:	2700      	movs	r7, #0
 8011228:	9902      	ldr	r1, [sp, #8]
 801122a:	9300      	str	r3, [sp, #0]
 801122c:	2201      	movs	r2, #1
 801122e:	4648      	mov	r0, r9
 8011230:	f000 fb9a 	bl	8011968 <__lshift>
 8011234:	4621      	mov	r1, r4
 8011236:	9002      	str	r0, [sp, #8]
 8011238:	f000 fc02 	bl	8011a40 <__mcmp>
 801123c:	2800      	cmp	r0, #0
 801123e:	dcb4      	bgt.n	80111aa <_dtoa_r+0xa82>
 8011240:	d102      	bne.n	8011248 <_dtoa_r+0xb20>
 8011242:	9b00      	ldr	r3, [sp, #0]
 8011244:	07db      	lsls	r3, r3, #31
 8011246:	d4b0      	bmi.n	80111aa <_dtoa_r+0xa82>
 8011248:	4633      	mov	r3, r6
 801124a:	461e      	mov	r6, r3
 801124c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8011250:	2a30      	cmp	r2, #48	@ 0x30
 8011252:	d0fa      	beq.n	801124a <_dtoa_r+0xb22>
 8011254:	e4b5      	b.n	8010bc2 <_dtoa_r+0x49a>
 8011256:	459a      	cmp	sl, r3
 8011258:	d1a8      	bne.n	80111ac <_dtoa_r+0xa84>
 801125a:	2331      	movs	r3, #49	@ 0x31
 801125c:	f108 0801 	add.w	r8, r8, #1
 8011260:	f88a 3000 	strb.w	r3, [sl]
 8011264:	e4ad      	b.n	8010bc2 <_dtoa_r+0x49a>
 8011266:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8011268:	f8df a058 	ldr.w	sl, [pc, #88]	@ 80112c4 <_dtoa_r+0xb9c>
 801126c:	b11b      	cbz	r3, 8011276 <_dtoa_r+0xb4e>
 801126e:	f10a 0308 	add.w	r3, sl, #8
 8011272:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8011274:	6013      	str	r3, [r2, #0]
 8011276:	4650      	mov	r0, sl
 8011278:	b017      	add	sp, #92	@ 0x5c
 801127a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801127e:	9b07      	ldr	r3, [sp, #28]
 8011280:	2b01      	cmp	r3, #1
 8011282:	f77f ae2e 	ble.w	8010ee2 <_dtoa_r+0x7ba>
 8011286:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8011288:	9308      	str	r3, [sp, #32]
 801128a:	2001      	movs	r0, #1
 801128c:	e64d      	b.n	8010f2a <_dtoa_r+0x802>
 801128e:	f1bb 0f00 	cmp.w	fp, #0
 8011292:	f77f aed9 	ble.w	8011048 <_dtoa_r+0x920>
 8011296:	4656      	mov	r6, sl
 8011298:	9802      	ldr	r0, [sp, #8]
 801129a:	4621      	mov	r1, r4
 801129c:	f7ff f9bc 	bl	8010618 <quorem>
 80112a0:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 80112a4:	f806 3b01 	strb.w	r3, [r6], #1
 80112a8:	eba6 020a 	sub.w	r2, r6, sl
 80112ac:	4593      	cmp	fp, r2
 80112ae:	ddb4      	ble.n	801121a <_dtoa_r+0xaf2>
 80112b0:	9902      	ldr	r1, [sp, #8]
 80112b2:	2300      	movs	r3, #0
 80112b4:	220a      	movs	r2, #10
 80112b6:	4648      	mov	r0, r9
 80112b8:	f000 f968 	bl	801158c <__multadd>
 80112bc:	9002      	str	r0, [sp, #8]
 80112be:	e7eb      	b.n	8011298 <_dtoa_r+0xb70>
 80112c0:	0801586d 	.word	0x0801586d
 80112c4:	080157f1 	.word	0x080157f1

080112c8 <_free_r>:
 80112c8:	b538      	push	{r3, r4, r5, lr}
 80112ca:	4605      	mov	r5, r0
 80112cc:	2900      	cmp	r1, #0
 80112ce:	d041      	beq.n	8011354 <_free_r+0x8c>
 80112d0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80112d4:	1f0c      	subs	r4, r1, #4
 80112d6:	2b00      	cmp	r3, #0
 80112d8:	bfb8      	it	lt
 80112da:	18e4      	addlt	r4, r4, r3
 80112dc:	f000 f8e8 	bl	80114b0 <__malloc_lock>
 80112e0:	4a1d      	ldr	r2, [pc, #116]	@ (8011358 <_free_r+0x90>)
 80112e2:	6813      	ldr	r3, [r2, #0]
 80112e4:	b933      	cbnz	r3, 80112f4 <_free_r+0x2c>
 80112e6:	6063      	str	r3, [r4, #4]
 80112e8:	6014      	str	r4, [r2, #0]
 80112ea:	4628      	mov	r0, r5
 80112ec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80112f0:	f000 b8e4 	b.w	80114bc <__malloc_unlock>
 80112f4:	42a3      	cmp	r3, r4
 80112f6:	d908      	bls.n	801130a <_free_r+0x42>
 80112f8:	6820      	ldr	r0, [r4, #0]
 80112fa:	1821      	adds	r1, r4, r0
 80112fc:	428b      	cmp	r3, r1
 80112fe:	bf01      	itttt	eq
 8011300:	6819      	ldreq	r1, [r3, #0]
 8011302:	685b      	ldreq	r3, [r3, #4]
 8011304:	1809      	addeq	r1, r1, r0
 8011306:	6021      	streq	r1, [r4, #0]
 8011308:	e7ed      	b.n	80112e6 <_free_r+0x1e>
 801130a:	461a      	mov	r2, r3
 801130c:	685b      	ldr	r3, [r3, #4]
 801130e:	b10b      	cbz	r3, 8011314 <_free_r+0x4c>
 8011310:	42a3      	cmp	r3, r4
 8011312:	d9fa      	bls.n	801130a <_free_r+0x42>
 8011314:	6811      	ldr	r1, [r2, #0]
 8011316:	1850      	adds	r0, r2, r1
 8011318:	42a0      	cmp	r0, r4
 801131a:	d10b      	bne.n	8011334 <_free_r+0x6c>
 801131c:	6820      	ldr	r0, [r4, #0]
 801131e:	4401      	add	r1, r0
 8011320:	1850      	adds	r0, r2, r1
 8011322:	4283      	cmp	r3, r0
 8011324:	6011      	str	r1, [r2, #0]
 8011326:	d1e0      	bne.n	80112ea <_free_r+0x22>
 8011328:	6818      	ldr	r0, [r3, #0]
 801132a:	685b      	ldr	r3, [r3, #4]
 801132c:	6053      	str	r3, [r2, #4]
 801132e:	4408      	add	r0, r1
 8011330:	6010      	str	r0, [r2, #0]
 8011332:	e7da      	b.n	80112ea <_free_r+0x22>
 8011334:	d902      	bls.n	801133c <_free_r+0x74>
 8011336:	230c      	movs	r3, #12
 8011338:	602b      	str	r3, [r5, #0]
 801133a:	e7d6      	b.n	80112ea <_free_r+0x22>
 801133c:	6820      	ldr	r0, [r4, #0]
 801133e:	1821      	adds	r1, r4, r0
 8011340:	428b      	cmp	r3, r1
 8011342:	bf04      	itt	eq
 8011344:	6819      	ldreq	r1, [r3, #0]
 8011346:	685b      	ldreq	r3, [r3, #4]
 8011348:	6063      	str	r3, [r4, #4]
 801134a:	bf04      	itt	eq
 801134c:	1809      	addeq	r1, r1, r0
 801134e:	6021      	streq	r1, [r4, #0]
 8011350:	6054      	str	r4, [r2, #4]
 8011352:	e7ca      	b.n	80112ea <_free_r+0x22>
 8011354:	bd38      	pop	{r3, r4, r5, pc}
 8011356:	bf00      	nop
 8011358:	20016530 	.word	0x20016530

0801135c <malloc>:
 801135c:	4b02      	ldr	r3, [pc, #8]	@ (8011368 <malloc+0xc>)
 801135e:	4601      	mov	r1, r0
 8011360:	6818      	ldr	r0, [r3, #0]
 8011362:	f000 b825 	b.w	80113b0 <_malloc_r>
 8011366:	bf00      	nop
 8011368:	2000d140 	.word	0x2000d140

0801136c <sbrk_aligned>:
 801136c:	b570      	push	{r4, r5, r6, lr}
 801136e:	4e0f      	ldr	r6, [pc, #60]	@ (80113ac <sbrk_aligned+0x40>)
 8011370:	460c      	mov	r4, r1
 8011372:	6831      	ldr	r1, [r6, #0]
 8011374:	4605      	mov	r5, r0
 8011376:	b911      	cbnz	r1, 801137e <sbrk_aligned+0x12>
 8011378:	f001 ff30 	bl	80131dc <_sbrk_r>
 801137c:	6030      	str	r0, [r6, #0]
 801137e:	4621      	mov	r1, r4
 8011380:	4628      	mov	r0, r5
 8011382:	f001 ff2b 	bl	80131dc <_sbrk_r>
 8011386:	1c43      	adds	r3, r0, #1
 8011388:	d103      	bne.n	8011392 <sbrk_aligned+0x26>
 801138a:	f04f 34ff 	mov.w	r4, #4294967295
 801138e:	4620      	mov	r0, r4
 8011390:	bd70      	pop	{r4, r5, r6, pc}
 8011392:	1cc4      	adds	r4, r0, #3
 8011394:	f024 0403 	bic.w	r4, r4, #3
 8011398:	42a0      	cmp	r0, r4
 801139a:	d0f8      	beq.n	801138e <sbrk_aligned+0x22>
 801139c:	1a21      	subs	r1, r4, r0
 801139e:	4628      	mov	r0, r5
 80113a0:	f001 ff1c 	bl	80131dc <_sbrk_r>
 80113a4:	3001      	adds	r0, #1
 80113a6:	d1f2      	bne.n	801138e <sbrk_aligned+0x22>
 80113a8:	e7ef      	b.n	801138a <sbrk_aligned+0x1e>
 80113aa:	bf00      	nop
 80113ac:	2001652c 	.word	0x2001652c

080113b0 <_malloc_r>:
 80113b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80113b4:	1ccd      	adds	r5, r1, #3
 80113b6:	f025 0503 	bic.w	r5, r5, #3
 80113ba:	3508      	adds	r5, #8
 80113bc:	2d0c      	cmp	r5, #12
 80113be:	bf38      	it	cc
 80113c0:	250c      	movcc	r5, #12
 80113c2:	2d00      	cmp	r5, #0
 80113c4:	4606      	mov	r6, r0
 80113c6:	db01      	blt.n	80113cc <_malloc_r+0x1c>
 80113c8:	42a9      	cmp	r1, r5
 80113ca:	d904      	bls.n	80113d6 <_malloc_r+0x26>
 80113cc:	230c      	movs	r3, #12
 80113ce:	6033      	str	r3, [r6, #0]
 80113d0:	2000      	movs	r0, #0
 80113d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80113d6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80114ac <_malloc_r+0xfc>
 80113da:	f000 f869 	bl	80114b0 <__malloc_lock>
 80113de:	f8d8 3000 	ldr.w	r3, [r8]
 80113e2:	461c      	mov	r4, r3
 80113e4:	bb44      	cbnz	r4, 8011438 <_malloc_r+0x88>
 80113e6:	4629      	mov	r1, r5
 80113e8:	4630      	mov	r0, r6
 80113ea:	f7ff ffbf 	bl	801136c <sbrk_aligned>
 80113ee:	1c43      	adds	r3, r0, #1
 80113f0:	4604      	mov	r4, r0
 80113f2:	d158      	bne.n	80114a6 <_malloc_r+0xf6>
 80113f4:	f8d8 4000 	ldr.w	r4, [r8]
 80113f8:	4627      	mov	r7, r4
 80113fa:	2f00      	cmp	r7, #0
 80113fc:	d143      	bne.n	8011486 <_malloc_r+0xd6>
 80113fe:	2c00      	cmp	r4, #0
 8011400:	d04b      	beq.n	801149a <_malloc_r+0xea>
 8011402:	6823      	ldr	r3, [r4, #0]
 8011404:	4639      	mov	r1, r7
 8011406:	4630      	mov	r0, r6
 8011408:	eb04 0903 	add.w	r9, r4, r3
 801140c:	f001 fee6 	bl	80131dc <_sbrk_r>
 8011410:	4581      	cmp	r9, r0
 8011412:	d142      	bne.n	801149a <_malloc_r+0xea>
 8011414:	6821      	ldr	r1, [r4, #0]
 8011416:	1a6d      	subs	r5, r5, r1
 8011418:	4629      	mov	r1, r5
 801141a:	4630      	mov	r0, r6
 801141c:	f7ff ffa6 	bl	801136c <sbrk_aligned>
 8011420:	3001      	adds	r0, #1
 8011422:	d03a      	beq.n	801149a <_malloc_r+0xea>
 8011424:	6823      	ldr	r3, [r4, #0]
 8011426:	442b      	add	r3, r5
 8011428:	6023      	str	r3, [r4, #0]
 801142a:	f8d8 3000 	ldr.w	r3, [r8]
 801142e:	685a      	ldr	r2, [r3, #4]
 8011430:	bb62      	cbnz	r2, 801148c <_malloc_r+0xdc>
 8011432:	f8c8 7000 	str.w	r7, [r8]
 8011436:	e00f      	b.n	8011458 <_malloc_r+0xa8>
 8011438:	6822      	ldr	r2, [r4, #0]
 801143a:	1b52      	subs	r2, r2, r5
 801143c:	d420      	bmi.n	8011480 <_malloc_r+0xd0>
 801143e:	2a0b      	cmp	r2, #11
 8011440:	d917      	bls.n	8011472 <_malloc_r+0xc2>
 8011442:	1961      	adds	r1, r4, r5
 8011444:	42a3      	cmp	r3, r4
 8011446:	6025      	str	r5, [r4, #0]
 8011448:	bf18      	it	ne
 801144a:	6059      	strne	r1, [r3, #4]
 801144c:	6863      	ldr	r3, [r4, #4]
 801144e:	bf08      	it	eq
 8011450:	f8c8 1000 	streq.w	r1, [r8]
 8011454:	5162      	str	r2, [r4, r5]
 8011456:	604b      	str	r3, [r1, #4]
 8011458:	4630      	mov	r0, r6
 801145a:	f000 f82f 	bl	80114bc <__malloc_unlock>
 801145e:	f104 000b 	add.w	r0, r4, #11
 8011462:	1d23      	adds	r3, r4, #4
 8011464:	f020 0007 	bic.w	r0, r0, #7
 8011468:	1ac2      	subs	r2, r0, r3
 801146a:	bf1c      	itt	ne
 801146c:	1a1b      	subne	r3, r3, r0
 801146e:	50a3      	strne	r3, [r4, r2]
 8011470:	e7af      	b.n	80113d2 <_malloc_r+0x22>
 8011472:	6862      	ldr	r2, [r4, #4]
 8011474:	42a3      	cmp	r3, r4
 8011476:	bf0c      	ite	eq
 8011478:	f8c8 2000 	streq.w	r2, [r8]
 801147c:	605a      	strne	r2, [r3, #4]
 801147e:	e7eb      	b.n	8011458 <_malloc_r+0xa8>
 8011480:	4623      	mov	r3, r4
 8011482:	6864      	ldr	r4, [r4, #4]
 8011484:	e7ae      	b.n	80113e4 <_malloc_r+0x34>
 8011486:	463c      	mov	r4, r7
 8011488:	687f      	ldr	r7, [r7, #4]
 801148a:	e7b6      	b.n	80113fa <_malloc_r+0x4a>
 801148c:	461a      	mov	r2, r3
 801148e:	685b      	ldr	r3, [r3, #4]
 8011490:	42a3      	cmp	r3, r4
 8011492:	d1fb      	bne.n	801148c <_malloc_r+0xdc>
 8011494:	2300      	movs	r3, #0
 8011496:	6053      	str	r3, [r2, #4]
 8011498:	e7de      	b.n	8011458 <_malloc_r+0xa8>
 801149a:	230c      	movs	r3, #12
 801149c:	6033      	str	r3, [r6, #0]
 801149e:	4630      	mov	r0, r6
 80114a0:	f000 f80c 	bl	80114bc <__malloc_unlock>
 80114a4:	e794      	b.n	80113d0 <_malloc_r+0x20>
 80114a6:	6005      	str	r5, [r0, #0]
 80114a8:	e7d6      	b.n	8011458 <_malloc_r+0xa8>
 80114aa:	bf00      	nop
 80114ac:	20016530 	.word	0x20016530

080114b0 <__malloc_lock>:
 80114b0:	4801      	ldr	r0, [pc, #4]	@ (80114b8 <__malloc_lock+0x8>)
 80114b2:	f7ff b87c 	b.w	80105ae <__retarget_lock_acquire_recursive>
 80114b6:	bf00      	nop
 80114b8:	20016528 	.word	0x20016528

080114bc <__malloc_unlock>:
 80114bc:	4801      	ldr	r0, [pc, #4]	@ (80114c4 <__malloc_unlock+0x8>)
 80114be:	f7ff b877 	b.w	80105b0 <__retarget_lock_release_recursive>
 80114c2:	bf00      	nop
 80114c4:	20016528 	.word	0x20016528

080114c8 <_Balloc>:
 80114c8:	b570      	push	{r4, r5, r6, lr}
 80114ca:	69c6      	ldr	r6, [r0, #28]
 80114cc:	4604      	mov	r4, r0
 80114ce:	460d      	mov	r5, r1
 80114d0:	b976      	cbnz	r6, 80114f0 <_Balloc+0x28>
 80114d2:	2010      	movs	r0, #16
 80114d4:	f7ff ff42 	bl	801135c <malloc>
 80114d8:	4602      	mov	r2, r0
 80114da:	61e0      	str	r0, [r4, #28]
 80114dc:	b920      	cbnz	r0, 80114e8 <_Balloc+0x20>
 80114de:	4b18      	ldr	r3, [pc, #96]	@ (8011540 <_Balloc+0x78>)
 80114e0:	4818      	ldr	r0, [pc, #96]	@ (8011544 <_Balloc+0x7c>)
 80114e2:	216b      	movs	r1, #107	@ 0x6b
 80114e4:	f7ff f87a 	bl	80105dc <__assert_func>
 80114e8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80114ec:	6006      	str	r6, [r0, #0]
 80114ee:	60c6      	str	r6, [r0, #12]
 80114f0:	69e6      	ldr	r6, [r4, #28]
 80114f2:	68f3      	ldr	r3, [r6, #12]
 80114f4:	b183      	cbz	r3, 8011518 <_Balloc+0x50>
 80114f6:	69e3      	ldr	r3, [r4, #28]
 80114f8:	68db      	ldr	r3, [r3, #12]
 80114fa:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80114fe:	b9b8      	cbnz	r0, 8011530 <_Balloc+0x68>
 8011500:	2101      	movs	r1, #1
 8011502:	fa01 f605 	lsl.w	r6, r1, r5
 8011506:	1d72      	adds	r2, r6, #5
 8011508:	0092      	lsls	r2, r2, #2
 801150a:	4620      	mov	r0, r4
 801150c:	f001 fe87 	bl	801321e <_calloc_r>
 8011510:	b160      	cbz	r0, 801152c <_Balloc+0x64>
 8011512:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8011516:	e00e      	b.n	8011536 <_Balloc+0x6e>
 8011518:	2221      	movs	r2, #33	@ 0x21
 801151a:	2104      	movs	r1, #4
 801151c:	4620      	mov	r0, r4
 801151e:	f001 fe7e 	bl	801321e <_calloc_r>
 8011522:	69e3      	ldr	r3, [r4, #28]
 8011524:	60f0      	str	r0, [r6, #12]
 8011526:	68db      	ldr	r3, [r3, #12]
 8011528:	2b00      	cmp	r3, #0
 801152a:	d1e4      	bne.n	80114f6 <_Balloc+0x2e>
 801152c:	2000      	movs	r0, #0
 801152e:	bd70      	pop	{r4, r5, r6, pc}
 8011530:	6802      	ldr	r2, [r0, #0]
 8011532:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8011536:	2300      	movs	r3, #0
 8011538:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801153c:	e7f7      	b.n	801152e <_Balloc+0x66>
 801153e:	bf00      	nop
 8011540:	080157fe 	.word	0x080157fe
 8011544:	0801587e 	.word	0x0801587e

08011548 <_Bfree>:
 8011548:	b570      	push	{r4, r5, r6, lr}
 801154a:	69c6      	ldr	r6, [r0, #28]
 801154c:	4605      	mov	r5, r0
 801154e:	460c      	mov	r4, r1
 8011550:	b976      	cbnz	r6, 8011570 <_Bfree+0x28>
 8011552:	2010      	movs	r0, #16
 8011554:	f7ff ff02 	bl	801135c <malloc>
 8011558:	4602      	mov	r2, r0
 801155a:	61e8      	str	r0, [r5, #28]
 801155c:	b920      	cbnz	r0, 8011568 <_Bfree+0x20>
 801155e:	4b09      	ldr	r3, [pc, #36]	@ (8011584 <_Bfree+0x3c>)
 8011560:	4809      	ldr	r0, [pc, #36]	@ (8011588 <_Bfree+0x40>)
 8011562:	218f      	movs	r1, #143	@ 0x8f
 8011564:	f7ff f83a 	bl	80105dc <__assert_func>
 8011568:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801156c:	6006      	str	r6, [r0, #0]
 801156e:	60c6      	str	r6, [r0, #12]
 8011570:	b13c      	cbz	r4, 8011582 <_Bfree+0x3a>
 8011572:	69eb      	ldr	r3, [r5, #28]
 8011574:	6862      	ldr	r2, [r4, #4]
 8011576:	68db      	ldr	r3, [r3, #12]
 8011578:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801157c:	6021      	str	r1, [r4, #0]
 801157e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8011582:	bd70      	pop	{r4, r5, r6, pc}
 8011584:	080157fe 	.word	0x080157fe
 8011588:	0801587e 	.word	0x0801587e

0801158c <__multadd>:
 801158c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011590:	690d      	ldr	r5, [r1, #16]
 8011592:	4607      	mov	r7, r0
 8011594:	460c      	mov	r4, r1
 8011596:	461e      	mov	r6, r3
 8011598:	f101 0c14 	add.w	ip, r1, #20
 801159c:	2000      	movs	r0, #0
 801159e:	f8dc 3000 	ldr.w	r3, [ip]
 80115a2:	b299      	uxth	r1, r3
 80115a4:	fb02 6101 	mla	r1, r2, r1, r6
 80115a8:	0c1e      	lsrs	r6, r3, #16
 80115aa:	0c0b      	lsrs	r3, r1, #16
 80115ac:	fb02 3306 	mla	r3, r2, r6, r3
 80115b0:	b289      	uxth	r1, r1
 80115b2:	3001      	adds	r0, #1
 80115b4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80115b8:	4285      	cmp	r5, r0
 80115ba:	f84c 1b04 	str.w	r1, [ip], #4
 80115be:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80115c2:	dcec      	bgt.n	801159e <__multadd+0x12>
 80115c4:	b30e      	cbz	r6, 801160a <__multadd+0x7e>
 80115c6:	68a3      	ldr	r3, [r4, #8]
 80115c8:	42ab      	cmp	r3, r5
 80115ca:	dc19      	bgt.n	8011600 <__multadd+0x74>
 80115cc:	6861      	ldr	r1, [r4, #4]
 80115ce:	4638      	mov	r0, r7
 80115d0:	3101      	adds	r1, #1
 80115d2:	f7ff ff79 	bl	80114c8 <_Balloc>
 80115d6:	4680      	mov	r8, r0
 80115d8:	b928      	cbnz	r0, 80115e6 <__multadd+0x5a>
 80115da:	4602      	mov	r2, r0
 80115dc:	4b0c      	ldr	r3, [pc, #48]	@ (8011610 <__multadd+0x84>)
 80115de:	480d      	ldr	r0, [pc, #52]	@ (8011614 <__multadd+0x88>)
 80115e0:	21ba      	movs	r1, #186	@ 0xba
 80115e2:	f7fe fffb 	bl	80105dc <__assert_func>
 80115e6:	6922      	ldr	r2, [r4, #16]
 80115e8:	3202      	adds	r2, #2
 80115ea:	f104 010c 	add.w	r1, r4, #12
 80115ee:	0092      	lsls	r2, r2, #2
 80115f0:	300c      	adds	r0, #12
 80115f2:	f7fe ffde 	bl	80105b2 <memcpy>
 80115f6:	4621      	mov	r1, r4
 80115f8:	4638      	mov	r0, r7
 80115fa:	f7ff ffa5 	bl	8011548 <_Bfree>
 80115fe:	4644      	mov	r4, r8
 8011600:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8011604:	3501      	adds	r5, #1
 8011606:	615e      	str	r6, [r3, #20]
 8011608:	6125      	str	r5, [r4, #16]
 801160a:	4620      	mov	r0, r4
 801160c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011610:	0801586d 	.word	0x0801586d
 8011614:	0801587e 	.word	0x0801587e

08011618 <__s2b>:
 8011618:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801161c:	460c      	mov	r4, r1
 801161e:	4615      	mov	r5, r2
 8011620:	461f      	mov	r7, r3
 8011622:	2209      	movs	r2, #9
 8011624:	3308      	adds	r3, #8
 8011626:	4606      	mov	r6, r0
 8011628:	fb93 f3f2 	sdiv	r3, r3, r2
 801162c:	2100      	movs	r1, #0
 801162e:	2201      	movs	r2, #1
 8011630:	429a      	cmp	r2, r3
 8011632:	db09      	blt.n	8011648 <__s2b+0x30>
 8011634:	4630      	mov	r0, r6
 8011636:	f7ff ff47 	bl	80114c8 <_Balloc>
 801163a:	b940      	cbnz	r0, 801164e <__s2b+0x36>
 801163c:	4602      	mov	r2, r0
 801163e:	4b19      	ldr	r3, [pc, #100]	@ (80116a4 <__s2b+0x8c>)
 8011640:	4819      	ldr	r0, [pc, #100]	@ (80116a8 <__s2b+0x90>)
 8011642:	21d3      	movs	r1, #211	@ 0xd3
 8011644:	f7fe ffca 	bl	80105dc <__assert_func>
 8011648:	0052      	lsls	r2, r2, #1
 801164a:	3101      	adds	r1, #1
 801164c:	e7f0      	b.n	8011630 <__s2b+0x18>
 801164e:	9b08      	ldr	r3, [sp, #32]
 8011650:	6143      	str	r3, [r0, #20]
 8011652:	2d09      	cmp	r5, #9
 8011654:	f04f 0301 	mov.w	r3, #1
 8011658:	6103      	str	r3, [r0, #16]
 801165a:	dd16      	ble.n	801168a <__s2b+0x72>
 801165c:	f104 0909 	add.w	r9, r4, #9
 8011660:	46c8      	mov	r8, r9
 8011662:	442c      	add	r4, r5
 8011664:	f818 3b01 	ldrb.w	r3, [r8], #1
 8011668:	4601      	mov	r1, r0
 801166a:	3b30      	subs	r3, #48	@ 0x30
 801166c:	220a      	movs	r2, #10
 801166e:	4630      	mov	r0, r6
 8011670:	f7ff ff8c 	bl	801158c <__multadd>
 8011674:	45a0      	cmp	r8, r4
 8011676:	d1f5      	bne.n	8011664 <__s2b+0x4c>
 8011678:	f1a5 0408 	sub.w	r4, r5, #8
 801167c:	444c      	add	r4, r9
 801167e:	1b2d      	subs	r5, r5, r4
 8011680:	1963      	adds	r3, r4, r5
 8011682:	42bb      	cmp	r3, r7
 8011684:	db04      	blt.n	8011690 <__s2b+0x78>
 8011686:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801168a:	340a      	adds	r4, #10
 801168c:	2509      	movs	r5, #9
 801168e:	e7f6      	b.n	801167e <__s2b+0x66>
 8011690:	f814 3b01 	ldrb.w	r3, [r4], #1
 8011694:	4601      	mov	r1, r0
 8011696:	3b30      	subs	r3, #48	@ 0x30
 8011698:	220a      	movs	r2, #10
 801169a:	4630      	mov	r0, r6
 801169c:	f7ff ff76 	bl	801158c <__multadd>
 80116a0:	e7ee      	b.n	8011680 <__s2b+0x68>
 80116a2:	bf00      	nop
 80116a4:	0801586d 	.word	0x0801586d
 80116a8:	0801587e 	.word	0x0801587e

080116ac <__hi0bits>:
 80116ac:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80116b0:	4603      	mov	r3, r0
 80116b2:	bf36      	itet	cc
 80116b4:	0403      	lslcc	r3, r0, #16
 80116b6:	2000      	movcs	r0, #0
 80116b8:	2010      	movcc	r0, #16
 80116ba:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80116be:	bf3c      	itt	cc
 80116c0:	021b      	lslcc	r3, r3, #8
 80116c2:	3008      	addcc	r0, #8
 80116c4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80116c8:	bf3c      	itt	cc
 80116ca:	011b      	lslcc	r3, r3, #4
 80116cc:	3004      	addcc	r0, #4
 80116ce:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80116d2:	bf3c      	itt	cc
 80116d4:	009b      	lslcc	r3, r3, #2
 80116d6:	3002      	addcc	r0, #2
 80116d8:	2b00      	cmp	r3, #0
 80116da:	db05      	blt.n	80116e8 <__hi0bits+0x3c>
 80116dc:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 80116e0:	f100 0001 	add.w	r0, r0, #1
 80116e4:	bf08      	it	eq
 80116e6:	2020      	moveq	r0, #32
 80116e8:	4770      	bx	lr

080116ea <__lo0bits>:
 80116ea:	6803      	ldr	r3, [r0, #0]
 80116ec:	4602      	mov	r2, r0
 80116ee:	f013 0007 	ands.w	r0, r3, #7
 80116f2:	d00b      	beq.n	801170c <__lo0bits+0x22>
 80116f4:	07d9      	lsls	r1, r3, #31
 80116f6:	d421      	bmi.n	801173c <__lo0bits+0x52>
 80116f8:	0798      	lsls	r0, r3, #30
 80116fa:	bf49      	itett	mi
 80116fc:	085b      	lsrmi	r3, r3, #1
 80116fe:	089b      	lsrpl	r3, r3, #2
 8011700:	2001      	movmi	r0, #1
 8011702:	6013      	strmi	r3, [r2, #0]
 8011704:	bf5c      	itt	pl
 8011706:	6013      	strpl	r3, [r2, #0]
 8011708:	2002      	movpl	r0, #2
 801170a:	4770      	bx	lr
 801170c:	b299      	uxth	r1, r3
 801170e:	b909      	cbnz	r1, 8011714 <__lo0bits+0x2a>
 8011710:	0c1b      	lsrs	r3, r3, #16
 8011712:	2010      	movs	r0, #16
 8011714:	b2d9      	uxtb	r1, r3
 8011716:	b909      	cbnz	r1, 801171c <__lo0bits+0x32>
 8011718:	3008      	adds	r0, #8
 801171a:	0a1b      	lsrs	r3, r3, #8
 801171c:	0719      	lsls	r1, r3, #28
 801171e:	bf04      	itt	eq
 8011720:	091b      	lsreq	r3, r3, #4
 8011722:	3004      	addeq	r0, #4
 8011724:	0799      	lsls	r1, r3, #30
 8011726:	bf04      	itt	eq
 8011728:	089b      	lsreq	r3, r3, #2
 801172a:	3002      	addeq	r0, #2
 801172c:	07d9      	lsls	r1, r3, #31
 801172e:	d403      	bmi.n	8011738 <__lo0bits+0x4e>
 8011730:	085b      	lsrs	r3, r3, #1
 8011732:	f100 0001 	add.w	r0, r0, #1
 8011736:	d003      	beq.n	8011740 <__lo0bits+0x56>
 8011738:	6013      	str	r3, [r2, #0]
 801173a:	4770      	bx	lr
 801173c:	2000      	movs	r0, #0
 801173e:	4770      	bx	lr
 8011740:	2020      	movs	r0, #32
 8011742:	4770      	bx	lr

08011744 <__i2b>:
 8011744:	b510      	push	{r4, lr}
 8011746:	460c      	mov	r4, r1
 8011748:	2101      	movs	r1, #1
 801174a:	f7ff febd 	bl	80114c8 <_Balloc>
 801174e:	4602      	mov	r2, r0
 8011750:	b928      	cbnz	r0, 801175e <__i2b+0x1a>
 8011752:	4b05      	ldr	r3, [pc, #20]	@ (8011768 <__i2b+0x24>)
 8011754:	4805      	ldr	r0, [pc, #20]	@ (801176c <__i2b+0x28>)
 8011756:	f240 1145 	movw	r1, #325	@ 0x145
 801175a:	f7fe ff3f 	bl	80105dc <__assert_func>
 801175e:	2301      	movs	r3, #1
 8011760:	6144      	str	r4, [r0, #20]
 8011762:	6103      	str	r3, [r0, #16]
 8011764:	bd10      	pop	{r4, pc}
 8011766:	bf00      	nop
 8011768:	0801586d 	.word	0x0801586d
 801176c:	0801587e 	.word	0x0801587e

08011770 <__multiply>:
 8011770:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011774:	4617      	mov	r7, r2
 8011776:	690a      	ldr	r2, [r1, #16]
 8011778:	693b      	ldr	r3, [r7, #16]
 801177a:	429a      	cmp	r2, r3
 801177c:	bfa8      	it	ge
 801177e:	463b      	movge	r3, r7
 8011780:	4689      	mov	r9, r1
 8011782:	bfa4      	itt	ge
 8011784:	460f      	movge	r7, r1
 8011786:	4699      	movge	r9, r3
 8011788:	693d      	ldr	r5, [r7, #16]
 801178a:	f8d9 a010 	ldr.w	sl, [r9, #16]
 801178e:	68bb      	ldr	r3, [r7, #8]
 8011790:	6879      	ldr	r1, [r7, #4]
 8011792:	eb05 060a 	add.w	r6, r5, sl
 8011796:	42b3      	cmp	r3, r6
 8011798:	b085      	sub	sp, #20
 801179a:	bfb8      	it	lt
 801179c:	3101      	addlt	r1, #1
 801179e:	f7ff fe93 	bl	80114c8 <_Balloc>
 80117a2:	b930      	cbnz	r0, 80117b2 <__multiply+0x42>
 80117a4:	4602      	mov	r2, r0
 80117a6:	4b41      	ldr	r3, [pc, #260]	@ (80118ac <__multiply+0x13c>)
 80117a8:	4841      	ldr	r0, [pc, #260]	@ (80118b0 <__multiply+0x140>)
 80117aa:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 80117ae:	f7fe ff15 	bl	80105dc <__assert_func>
 80117b2:	f100 0414 	add.w	r4, r0, #20
 80117b6:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 80117ba:	4623      	mov	r3, r4
 80117bc:	2200      	movs	r2, #0
 80117be:	4573      	cmp	r3, lr
 80117c0:	d320      	bcc.n	8011804 <__multiply+0x94>
 80117c2:	f107 0814 	add.w	r8, r7, #20
 80117c6:	f109 0114 	add.w	r1, r9, #20
 80117ca:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 80117ce:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 80117d2:	9302      	str	r3, [sp, #8]
 80117d4:	1beb      	subs	r3, r5, r7
 80117d6:	3b15      	subs	r3, #21
 80117d8:	f023 0303 	bic.w	r3, r3, #3
 80117dc:	3304      	adds	r3, #4
 80117de:	3715      	adds	r7, #21
 80117e0:	42bd      	cmp	r5, r7
 80117e2:	bf38      	it	cc
 80117e4:	2304      	movcc	r3, #4
 80117e6:	9301      	str	r3, [sp, #4]
 80117e8:	9b02      	ldr	r3, [sp, #8]
 80117ea:	9103      	str	r1, [sp, #12]
 80117ec:	428b      	cmp	r3, r1
 80117ee:	d80c      	bhi.n	801180a <__multiply+0x9a>
 80117f0:	2e00      	cmp	r6, #0
 80117f2:	dd03      	ble.n	80117fc <__multiply+0x8c>
 80117f4:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 80117f8:	2b00      	cmp	r3, #0
 80117fa:	d055      	beq.n	80118a8 <__multiply+0x138>
 80117fc:	6106      	str	r6, [r0, #16]
 80117fe:	b005      	add	sp, #20
 8011800:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011804:	f843 2b04 	str.w	r2, [r3], #4
 8011808:	e7d9      	b.n	80117be <__multiply+0x4e>
 801180a:	f8b1 a000 	ldrh.w	sl, [r1]
 801180e:	f1ba 0f00 	cmp.w	sl, #0
 8011812:	d01f      	beq.n	8011854 <__multiply+0xe4>
 8011814:	46c4      	mov	ip, r8
 8011816:	46a1      	mov	r9, r4
 8011818:	2700      	movs	r7, #0
 801181a:	f85c 2b04 	ldr.w	r2, [ip], #4
 801181e:	f8d9 3000 	ldr.w	r3, [r9]
 8011822:	fa1f fb82 	uxth.w	fp, r2
 8011826:	b29b      	uxth	r3, r3
 8011828:	fb0a 330b 	mla	r3, sl, fp, r3
 801182c:	443b      	add	r3, r7
 801182e:	f8d9 7000 	ldr.w	r7, [r9]
 8011832:	0c12      	lsrs	r2, r2, #16
 8011834:	0c3f      	lsrs	r7, r7, #16
 8011836:	fb0a 7202 	mla	r2, sl, r2, r7
 801183a:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 801183e:	b29b      	uxth	r3, r3
 8011840:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8011844:	4565      	cmp	r5, ip
 8011846:	f849 3b04 	str.w	r3, [r9], #4
 801184a:	ea4f 4712 	mov.w	r7, r2, lsr #16
 801184e:	d8e4      	bhi.n	801181a <__multiply+0xaa>
 8011850:	9b01      	ldr	r3, [sp, #4]
 8011852:	50e7      	str	r7, [r4, r3]
 8011854:	9b03      	ldr	r3, [sp, #12]
 8011856:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 801185a:	3104      	adds	r1, #4
 801185c:	f1b9 0f00 	cmp.w	r9, #0
 8011860:	d020      	beq.n	80118a4 <__multiply+0x134>
 8011862:	6823      	ldr	r3, [r4, #0]
 8011864:	4647      	mov	r7, r8
 8011866:	46a4      	mov	ip, r4
 8011868:	f04f 0a00 	mov.w	sl, #0
 801186c:	f8b7 b000 	ldrh.w	fp, [r7]
 8011870:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 8011874:	fb09 220b 	mla	r2, r9, fp, r2
 8011878:	4452      	add	r2, sl
 801187a:	b29b      	uxth	r3, r3
 801187c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8011880:	f84c 3b04 	str.w	r3, [ip], #4
 8011884:	f857 3b04 	ldr.w	r3, [r7], #4
 8011888:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801188c:	f8bc 3000 	ldrh.w	r3, [ip]
 8011890:	fb09 330a 	mla	r3, r9, sl, r3
 8011894:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8011898:	42bd      	cmp	r5, r7
 801189a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801189e:	d8e5      	bhi.n	801186c <__multiply+0xfc>
 80118a0:	9a01      	ldr	r2, [sp, #4]
 80118a2:	50a3      	str	r3, [r4, r2]
 80118a4:	3404      	adds	r4, #4
 80118a6:	e79f      	b.n	80117e8 <__multiply+0x78>
 80118a8:	3e01      	subs	r6, #1
 80118aa:	e7a1      	b.n	80117f0 <__multiply+0x80>
 80118ac:	0801586d 	.word	0x0801586d
 80118b0:	0801587e 	.word	0x0801587e

080118b4 <__pow5mult>:
 80118b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80118b8:	4615      	mov	r5, r2
 80118ba:	f012 0203 	ands.w	r2, r2, #3
 80118be:	4607      	mov	r7, r0
 80118c0:	460e      	mov	r6, r1
 80118c2:	d007      	beq.n	80118d4 <__pow5mult+0x20>
 80118c4:	4c25      	ldr	r4, [pc, #148]	@ (801195c <__pow5mult+0xa8>)
 80118c6:	3a01      	subs	r2, #1
 80118c8:	2300      	movs	r3, #0
 80118ca:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80118ce:	f7ff fe5d 	bl	801158c <__multadd>
 80118d2:	4606      	mov	r6, r0
 80118d4:	10ad      	asrs	r5, r5, #2
 80118d6:	d03d      	beq.n	8011954 <__pow5mult+0xa0>
 80118d8:	69fc      	ldr	r4, [r7, #28]
 80118da:	b97c      	cbnz	r4, 80118fc <__pow5mult+0x48>
 80118dc:	2010      	movs	r0, #16
 80118de:	f7ff fd3d 	bl	801135c <malloc>
 80118e2:	4602      	mov	r2, r0
 80118e4:	61f8      	str	r0, [r7, #28]
 80118e6:	b928      	cbnz	r0, 80118f4 <__pow5mult+0x40>
 80118e8:	4b1d      	ldr	r3, [pc, #116]	@ (8011960 <__pow5mult+0xac>)
 80118ea:	481e      	ldr	r0, [pc, #120]	@ (8011964 <__pow5mult+0xb0>)
 80118ec:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80118f0:	f7fe fe74 	bl	80105dc <__assert_func>
 80118f4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80118f8:	6004      	str	r4, [r0, #0]
 80118fa:	60c4      	str	r4, [r0, #12]
 80118fc:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8011900:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8011904:	b94c      	cbnz	r4, 801191a <__pow5mult+0x66>
 8011906:	f240 2171 	movw	r1, #625	@ 0x271
 801190a:	4638      	mov	r0, r7
 801190c:	f7ff ff1a 	bl	8011744 <__i2b>
 8011910:	2300      	movs	r3, #0
 8011912:	f8c8 0008 	str.w	r0, [r8, #8]
 8011916:	4604      	mov	r4, r0
 8011918:	6003      	str	r3, [r0, #0]
 801191a:	f04f 0900 	mov.w	r9, #0
 801191e:	07eb      	lsls	r3, r5, #31
 8011920:	d50a      	bpl.n	8011938 <__pow5mult+0x84>
 8011922:	4631      	mov	r1, r6
 8011924:	4622      	mov	r2, r4
 8011926:	4638      	mov	r0, r7
 8011928:	f7ff ff22 	bl	8011770 <__multiply>
 801192c:	4631      	mov	r1, r6
 801192e:	4680      	mov	r8, r0
 8011930:	4638      	mov	r0, r7
 8011932:	f7ff fe09 	bl	8011548 <_Bfree>
 8011936:	4646      	mov	r6, r8
 8011938:	106d      	asrs	r5, r5, #1
 801193a:	d00b      	beq.n	8011954 <__pow5mult+0xa0>
 801193c:	6820      	ldr	r0, [r4, #0]
 801193e:	b938      	cbnz	r0, 8011950 <__pow5mult+0x9c>
 8011940:	4622      	mov	r2, r4
 8011942:	4621      	mov	r1, r4
 8011944:	4638      	mov	r0, r7
 8011946:	f7ff ff13 	bl	8011770 <__multiply>
 801194a:	6020      	str	r0, [r4, #0]
 801194c:	f8c0 9000 	str.w	r9, [r0]
 8011950:	4604      	mov	r4, r0
 8011952:	e7e4      	b.n	801191e <__pow5mult+0x6a>
 8011954:	4630      	mov	r0, r6
 8011956:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801195a:	bf00      	nop
 801195c:	08015954 	.word	0x08015954
 8011960:	080157fe 	.word	0x080157fe
 8011964:	0801587e 	.word	0x0801587e

08011968 <__lshift>:
 8011968:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801196c:	460c      	mov	r4, r1
 801196e:	6849      	ldr	r1, [r1, #4]
 8011970:	6923      	ldr	r3, [r4, #16]
 8011972:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8011976:	68a3      	ldr	r3, [r4, #8]
 8011978:	4607      	mov	r7, r0
 801197a:	4691      	mov	r9, r2
 801197c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8011980:	f108 0601 	add.w	r6, r8, #1
 8011984:	42b3      	cmp	r3, r6
 8011986:	db0b      	blt.n	80119a0 <__lshift+0x38>
 8011988:	4638      	mov	r0, r7
 801198a:	f7ff fd9d 	bl	80114c8 <_Balloc>
 801198e:	4605      	mov	r5, r0
 8011990:	b948      	cbnz	r0, 80119a6 <__lshift+0x3e>
 8011992:	4602      	mov	r2, r0
 8011994:	4b28      	ldr	r3, [pc, #160]	@ (8011a38 <__lshift+0xd0>)
 8011996:	4829      	ldr	r0, [pc, #164]	@ (8011a3c <__lshift+0xd4>)
 8011998:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 801199c:	f7fe fe1e 	bl	80105dc <__assert_func>
 80119a0:	3101      	adds	r1, #1
 80119a2:	005b      	lsls	r3, r3, #1
 80119a4:	e7ee      	b.n	8011984 <__lshift+0x1c>
 80119a6:	2300      	movs	r3, #0
 80119a8:	f100 0114 	add.w	r1, r0, #20
 80119ac:	f100 0210 	add.w	r2, r0, #16
 80119b0:	4618      	mov	r0, r3
 80119b2:	4553      	cmp	r3, sl
 80119b4:	db33      	blt.n	8011a1e <__lshift+0xb6>
 80119b6:	6920      	ldr	r0, [r4, #16]
 80119b8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80119bc:	f104 0314 	add.w	r3, r4, #20
 80119c0:	f019 091f 	ands.w	r9, r9, #31
 80119c4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80119c8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80119cc:	d02b      	beq.n	8011a26 <__lshift+0xbe>
 80119ce:	f1c9 0e20 	rsb	lr, r9, #32
 80119d2:	468a      	mov	sl, r1
 80119d4:	2200      	movs	r2, #0
 80119d6:	6818      	ldr	r0, [r3, #0]
 80119d8:	fa00 f009 	lsl.w	r0, r0, r9
 80119dc:	4310      	orrs	r0, r2
 80119de:	f84a 0b04 	str.w	r0, [sl], #4
 80119e2:	f853 2b04 	ldr.w	r2, [r3], #4
 80119e6:	459c      	cmp	ip, r3
 80119e8:	fa22 f20e 	lsr.w	r2, r2, lr
 80119ec:	d8f3      	bhi.n	80119d6 <__lshift+0x6e>
 80119ee:	ebac 0304 	sub.w	r3, ip, r4
 80119f2:	3b15      	subs	r3, #21
 80119f4:	f023 0303 	bic.w	r3, r3, #3
 80119f8:	3304      	adds	r3, #4
 80119fa:	f104 0015 	add.w	r0, r4, #21
 80119fe:	4560      	cmp	r0, ip
 8011a00:	bf88      	it	hi
 8011a02:	2304      	movhi	r3, #4
 8011a04:	50ca      	str	r2, [r1, r3]
 8011a06:	b10a      	cbz	r2, 8011a0c <__lshift+0xa4>
 8011a08:	f108 0602 	add.w	r6, r8, #2
 8011a0c:	3e01      	subs	r6, #1
 8011a0e:	4638      	mov	r0, r7
 8011a10:	612e      	str	r6, [r5, #16]
 8011a12:	4621      	mov	r1, r4
 8011a14:	f7ff fd98 	bl	8011548 <_Bfree>
 8011a18:	4628      	mov	r0, r5
 8011a1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011a1e:	f842 0f04 	str.w	r0, [r2, #4]!
 8011a22:	3301      	adds	r3, #1
 8011a24:	e7c5      	b.n	80119b2 <__lshift+0x4a>
 8011a26:	3904      	subs	r1, #4
 8011a28:	f853 2b04 	ldr.w	r2, [r3], #4
 8011a2c:	f841 2f04 	str.w	r2, [r1, #4]!
 8011a30:	459c      	cmp	ip, r3
 8011a32:	d8f9      	bhi.n	8011a28 <__lshift+0xc0>
 8011a34:	e7ea      	b.n	8011a0c <__lshift+0xa4>
 8011a36:	bf00      	nop
 8011a38:	0801586d 	.word	0x0801586d
 8011a3c:	0801587e 	.word	0x0801587e

08011a40 <__mcmp>:
 8011a40:	690a      	ldr	r2, [r1, #16]
 8011a42:	4603      	mov	r3, r0
 8011a44:	6900      	ldr	r0, [r0, #16]
 8011a46:	1a80      	subs	r0, r0, r2
 8011a48:	b530      	push	{r4, r5, lr}
 8011a4a:	d10e      	bne.n	8011a6a <__mcmp+0x2a>
 8011a4c:	3314      	adds	r3, #20
 8011a4e:	3114      	adds	r1, #20
 8011a50:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8011a54:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8011a58:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8011a5c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8011a60:	4295      	cmp	r5, r2
 8011a62:	d003      	beq.n	8011a6c <__mcmp+0x2c>
 8011a64:	d205      	bcs.n	8011a72 <__mcmp+0x32>
 8011a66:	f04f 30ff 	mov.w	r0, #4294967295
 8011a6a:	bd30      	pop	{r4, r5, pc}
 8011a6c:	42a3      	cmp	r3, r4
 8011a6e:	d3f3      	bcc.n	8011a58 <__mcmp+0x18>
 8011a70:	e7fb      	b.n	8011a6a <__mcmp+0x2a>
 8011a72:	2001      	movs	r0, #1
 8011a74:	e7f9      	b.n	8011a6a <__mcmp+0x2a>
	...

08011a78 <__mdiff>:
 8011a78:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011a7c:	4689      	mov	r9, r1
 8011a7e:	4606      	mov	r6, r0
 8011a80:	4611      	mov	r1, r2
 8011a82:	4648      	mov	r0, r9
 8011a84:	4614      	mov	r4, r2
 8011a86:	f7ff ffdb 	bl	8011a40 <__mcmp>
 8011a8a:	1e05      	subs	r5, r0, #0
 8011a8c:	d112      	bne.n	8011ab4 <__mdiff+0x3c>
 8011a8e:	4629      	mov	r1, r5
 8011a90:	4630      	mov	r0, r6
 8011a92:	f7ff fd19 	bl	80114c8 <_Balloc>
 8011a96:	4602      	mov	r2, r0
 8011a98:	b928      	cbnz	r0, 8011aa6 <__mdiff+0x2e>
 8011a9a:	4b3f      	ldr	r3, [pc, #252]	@ (8011b98 <__mdiff+0x120>)
 8011a9c:	f240 2137 	movw	r1, #567	@ 0x237
 8011aa0:	483e      	ldr	r0, [pc, #248]	@ (8011b9c <__mdiff+0x124>)
 8011aa2:	f7fe fd9b 	bl	80105dc <__assert_func>
 8011aa6:	2301      	movs	r3, #1
 8011aa8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8011aac:	4610      	mov	r0, r2
 8011aae:	b003      	add	sp, #12
 8011ab0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011ab4:	bfbc      	itt	lt
 8011ab6:	464b      	movlt	r3, r9
 8011ab8:	46a1      	movlt	r9, r4
 8011aba:	4630      	mov	r0, r6
 8011abc:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8011ac0:	bfba      	itte	lt
 8011ac2:	461c      	movlt	r4, r3
 8011ac4:	2501      	movlt	r5, #1
 8011ac6:	2500      	movge	r5, #0
 8011ac8:	f7ff fcfe 	bl	80114c8 <_Balloc>
 8011acc:	4602      	mov	r2, r0
 8011ace:	b918      	cbnz	r0, 8011ad8 <__mdiff+0x60>
 8011ad0:	4b31      	ldr	r3, [pc, #196]	@ (8011b98 <__mdiff+0x120>)
 8011ad2:	f240 2145 	movw	r1, #581	@ 0x245
 8011ad6:	e7e3      	b.n	8011aa0 <__mdiff+0x28>
 8011ad8:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8011adc:	6926      	ldr	r6, [r4, #16]
 8011ade:	60c5      	str	r5, [r0, #12]
 8011ae0:	f109 0310 	add.w	r3, r9, #16
 8011ae4:	f109 0514 	add.w	r5, r9, #20
 8011ae8:	f104 0e14 	add.w	lr, r4, #20
 8011aec:	f100 0b14 	add.w	fp, r0, #20
 8011af0:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8011af4:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8011af8:	9301      	str	r3, [sp, #4]
 8011afa:	46d9      	mov	r9, fp
 8011afc:	f04f 0c00 	mov.w	ip, #0
 8011b00:	9b01      	ldr	r3, [sp, #4]
 8011b02:	f85e 0b04 	ldr.w	r0, [lr], #4
 8011b06:	f853 af04 	ldr.w	sl, [r3, #4]!
 8011b0a:	9301      	str	r3, [sp, #4]
 8011b0c:	fa1f f38a 	uxth.w	r3, sl
 8011b10:	4619      	mov	r1, r3
 8011b12:	b283      	uxth	r3, r0
 8011b14:	1acb      	subs	r3, r1, r3
 8011b16:	0c00      	lsrs	r0, r0, #16
 8011b18:	4463      	add	r3, ip
 8011b1a:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8011b1e:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8011b22:	b29b      	uxth	r3, r3
 8011b24:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8011b28:	4576      	cmp	r6, lr
 8011b2a:	f849 3b04 	str.w	r3, [r9], #4
 8011b2e:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8011b32:	d8e5      	bhi.n	8011b00 <__mdiff+0x88>
 8011b34:	1b33      	subs	r3, r6, r4
 8011b36:	3b15      	subs	r3, #21
 8011b38:	f023 0303 	bic.w	r3, r3, #3
 8011b3c:	3415      	adds	r4, #21
 8011b3e:	3304      	adds	r3, #4
 8011b40:	42a6      	cmp	r6, r4
 8011b42:	bf38      	it	cc
 8011b44:	2304      	movcc	r3, #4
 8011b46:	441d      	add	r5, r3
 8011b48:	445b      	add	r3, fp
 8011b4a:	461e      	mov	r6, r3
 8011b4c:	462c      	mov	r4, r5
 8011b4e:	4544      	cmp	r4, r8
 8011b50:	d30e      	bcc.n	8011b70 <__mdiff+0xf8>
 8011b52:	f108 0103 	add.w	r1, r8, #3
 8011b56:	1b49      	subs	r1, r1, r5
 8011b58:	f021 0103 	bic.w	r1, r1, #3
 8011b5c:	3d03      	subs	r5, #3
 8011b5e:	45a8      	cmp	r8, r5
 8011b60:	bf38      	it	cc
 8011b62:	2100      	movcc	r1, #0
 8011b64:	440b      	add	r3, r1
 8011b66:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8011b6a:	b191      	cbz	r1, 8011b92 <__mdiff+0x11a>
 8011b6c:	6117      	str	r7, [r2, #16]
 8011b6e:	e79d      	b.n	8011aac <__mdiff+0x34>
 8011b70:	f854 1b04 	ldr.w	r1, [r4], #4
 8011b74:	46e6      	mov	lr, ip
 8011b76:	0c08      	lsrs	r0, r1, #16
 8011b78:	fa1c fc81 	uxtah	ip, ip, r1
 8011b7c:	4471      	add	r1, lr
 8011b7e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8011b82:	b289      	uxth	r1, r1
 8011b84:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8011b88:	f846 1b04 	str.w	r1, [r6], #4
 8011b8c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8011b90:	e7dd      	b.n	8011b4e <__mdiff+0xd6>
 8011b92:	3f01      	subs	r7, #1
 8011b94:	e7e7      	b.n	8011b66 <__mdiff+0xee>
 8011b96:	bf00      	nop
 8011b98:	0801586d 	.word	0x0801586d
 8011b9c:	0801587e 	.word	0x0801587e

08011ba0 <__ulp>:
 8011ba0:	b082      	sub	sp, #8
 8011ba2:	ed8d 0b00 	vstr	d0, [sp]
 8011ba6:	9a01      	ldr	r2, [sp, #4]
 8011ba8:	4b0f      	ldr	r3, [pc, #60]	@ (8011be8 <__ulp+0x48>)
 8011baa:	4013      	ands	r3, r2
 8011bac:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8011bb0:	2b00      	cmp	r3, #0
 8011bb2:	dc08      	bgt.n	8011bc6 <__ulp+0x26>
 8011bb4:	425b      	negs	r3, r3
 8011bb6:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8011bba:	ea4f 5223 	mov.w	r2, r3, asr #20
 8011bbe:	da04      	bge.n	8011bca <__ulp+0x2a>
 8011bc0:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8011bc4:	4113      	asrs	r3, r2
 8011bc6:	2200      	movs	r2, #0
 8011bc8:	e008      	b.n	8011bdc <__ulp+0x3c>
 8011bca:	f1a2 0314 	sub.w	r3, r2, #20
 8011bce:	2b1e      	cmp	r3, #30
 8011bd0:	bfda      	itte	le
 8011bd2:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 8011bd6:	40da      	lsrle	r2, r3
 8011bd8:	2201      	movgt	r2, #1
 8011bda:	2300      	movs	r3, #0
 8011bdc:	4619      	mov	r1, r3
 8011bde:	4610      	mov	r0, r2
 8011be0:	ec41 0b10 	vmov	d0, r0, r1
 8011be4:	b002      	add	sp, #8
 8011be6:	4770      	bx	lr
 8011be8:	7ff00000 	.word	0x7ff00000

08011bec <__b2d>:
 8011bec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011bf0:	6906      	ldr	r6, [r0, #16]
 8011bf2:	f100 0814 	add.w	r8, r0, #20
 8011bf6:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8011bfa:	1f37      	subs	r7, r6, #4
 8011bfc:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8011c00:	4610      	mov	r0, r2
 8011c02:	f7ff fd53 	bl	80116ac <__hi0bits>
 8011c06:	f1c0 0320 	rsb	r3, r0, #32
 8011c0a:	280a      	cmp	r0, #10
 8011c0c:	600b      	str	r3, [r1, #0]
 8011c0e:	491b      	ldr	r1, [pc, #108]	@ (8011c7c <__b2d+0x90>)
 8011c10:	dc15      	bgt.n	8011c3e <__b2d+0x52>
 8011c12:	f1c0 0c0b 	rsb	ip, r0, #11
 8011c16:	fa22 f30c 	lsr.w	r3, r2, ip
 8011c1a:	45b8      	cmp	r8, r7
 8011c1c:	ea43 0501 	orr.w	r5, r3, r1
 8011c20:	bf34      	ite	cc
 8011c22:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8011c26:	2300      	movcs	r3, #0
 8011c28:	3015      	adds	r0, #21
 8011c2a:	fa02 f000 	lsl.w	r0, r2, r0
 8011c2e:	fa23 f30c 	lsr.w	r3, r3, ip
 8011c32:	4303      	orrs	r3, r0
 8011c34:	461c      	mov	r4, r3
 8011c36:	ec45 4b10 	vmov	d0, r4, r5
 8011c3a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011c3e:	45b8      	cmp	r8, r7
 8011c40:	bf3a      	itte	cc
 8011c42:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8011c46:	f1a6 0708 	subcc.w	r7, r6, #8
 8011c4a:	2300      	movcs	r3, #0
 8011c4c:	380b      	subs	r0, #11
 8011c4e:	d012      	beq.n	8011c76 <__b2d+0x8a>
 8011c50:	f1c0 0120 	rsb	r1, r0, #32
 8011c54:	fa23 f401 	lsr.w	r4, r3, r1
 8011c58:	4082      	lsls	r2, r0
 8011c5a:	4322      	orrs	r2, r4
 8011c5c:	4547      	cmp	r7, r8
 8011c5e:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 8011c62:	bf8c      	ite	hi
 8011c64:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8011c68:	2200      	movls	r2, #0
 8011c6a:	4083      	lsls	r3, r0
 8011c6c:	40ca      	lsrs	r2, r1
 8011c6e:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8011c72:	4313      	orrs	r3, r2
 8011c74:	e7de      	b.n	8011c34 <__b2d+0x48>
 8011c76:	ea42 0501 	orr.w	r5, r2, r1
 8011c7a:	e7db      	b.n	8011c34 <__b2d+0x48>
 8011c7c:	3ff00000 	.word	0x3ff00000

08011c80 <__d2b>:
 8011c80:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8011c84:	460f      	mov	r7, r1
 8011c86:	2101      	movs	r1, #1
 8011c88:	ec59 8b10 	vmov	r8, r9, d0
 8011c8c:	4616      	mov	r6, r2
 8011c8e:	f7ff fc1b 	bl	80114c8 <_Balloc>
 8011c92:	4604      	mov	r4, r0
 8011c94:	b930      	cbnz	r0, 8011ca4 <__d2b+0x24>
 8011c96:	4602      	mov	r2, r0
 8011c98:	4b23      	ldr	r3, [pc, #140]	@ (8011d28 <__d2b+0xa8>)
 8011c9a:	4824      	ldr	r0, [pc, #144]	@ (8011d2c <__d2b+0xac>)
 8011c9c:	f240 310f 	movw	r1, #783	@ 0x30f
 8011ca0:	f7fe fc9c 	bl	80105dc <__assert_func>
 8011ca4:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8011ca8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8011cac:	b10d      	cbz	r5, 8011cb2 <__d2b+0x32>
 8011cae:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8011cb2:	9301      	str	r3, [sp, #4]
 8011cb4:	f1b8 0300 	subs.w	r3, r8, #0
 8011cb8:	d023      	beq.n	8011d02 <__d2b+0x82>
 8011cba:	4668      	mov	r0, sp
 8011cbc:	9300      	str	r3, [sp, #0]
 8011cbe:	f7ff fd14 	bl	80116ea <__lo0bits>
 8011cc2:	e9dd 1200 	ldrd	r1, r2, [sp]
 8011cc6:	b1d0      	cbz	r0, 8011cfe <__d2b+0x7e>
 8011cc8:	f1c0 0320 	rsb	r3, r0, #32
 8011ccc:	fa02 f303 	lsl.w	r3, r2, r3
 8011cd0:	430b      	orrs	r3, r1
 8011cd2:	40c2      	lsrs	r2, r0
 8011cd4:	6163      	str	r3, [r4, #20]
 8011cd6:	9201      	str	r2, [sp, #4]
 8011cd8:	9b01      	ldr	r3, [sp, #4]
 8011cda:	61a3      	str	r3, [r4, #24]
 8011cdc:	2b00      	cmp	r3, #0
 8011cde:	bf0c      	ite	eq
 8011ce0:	2201      	moveq	r2, #1
 8011ce2:	2202      	movne	r2, #2
 8011ce4:	6122      	str	r2, [r4, #16]
 8011ce6:	b1a5      	cbz	r5, 8011d12 <__d2b+0x92>
 8011ce8:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8011cec:	4405      	add	r5, r0
 8011cee:	603d      	str	r5, [r7, #0]
 8011cf0:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8011cf4:	6030      	str	r0, [r6, #0]
 8011cf6:	4620      	mov	r0, r4
 8011cf8:	b003      	add	sp, #12
 8011cfa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011cfe:	6161      	str	r1, [r4, #20]
 8011d00:	e7ea      	b.n	8011cd8 <__d2b+0x58>
 8011d02:	a801      	add	r0, sp, #4
 8011d04:	f7ff fcf1 	bl	80116ea <__lo0bits>
 8011d08:	9b01      	ldr	r3, [sp, #4]
 8011d0a:	6163      	str	r3, [r4, #20]
 8011d0c:	3020      	adds	r0, #32
 8011d0e:	2201      	movs	r2, #1
 8011d10:	e7e8      	b.n	8011ce4 <__d2b+0x64>
 8011d12:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8011d16:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8011d1a:	6038      	str	r0, [r7, #0]
 8011d1c:	6918      	ldr	r0, [r3, #16]
 8011d1e:	f7ff fcc5 	bl	80116ac <__hi0bits>
 8011d22:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8011d26:	e7e5      	b.n	8011cf4 <__d2b+0x74>
 8011d28:	0801586d 	.word	0x0801586d
 8011d2c:	0801587e 	.word	0x0801587e

08011d30 <__ratio>:
 8011d30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011d34:	b085      	sub	sp, #20
 8011d36:	e9cd 1000 	strd	r1, r0, [sp]
 8011d3a:	a902      	add	r1, sp, #8
 8011d3c:	f7ff ff56 	bl	8011bec <__b2d>
 8011d40:	9800      	ldr	r0, [sp, #0]
 8011d42:	a903      	add	r1, sp, #12
 8011d44:	ec55 4b10 	vmov	r4, r5, d0
 8011d48:	f7ff ff50 	bl	8011bec <__b2d>
 8011d4c:	9b01      	ldr	r3, [sp, #4]
 8011d4e:	6919      	ldr	r1, [r3, #16]
 8011d50:	9b00      	ldr	r3, [sp, #0]
 8011d52:	691b      	ldr	r3, [r3, #16]
 8011d54:	1ac9      	subs	r1, r1, r3
 8011d56:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8011d5a:	1a9b      	subs	r3, r3, r2
 8011d5c:	ec5b ab10 	vmov	sl, fp, d0
 8011d60:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8011d64:	2b00      	cmp	r3, #0
 8011d66:	bfce      	itee	gt
 8011d68:	462a      	movgt	r2, r5
 8011d6a:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8011d6e:	465a      	movle	r2, fp
 8011d70:	462f      	mov	r7, r5
 8011d72:	46d9      	mov	r9, fp
 8011d74:	bfcc      	ite	gt
 8011d76:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8011d7a:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 8011d7e:	464b      	mov	r3, r9
 8011d80:	4652      	mov	r2, sl
 8011d82:	4620      	mov	r0, r4
 8011d84:	4639      	mov	r1, r7
 8011d86:	f7ee fd79 	bl	800087c <__aeabi_ddiv>
 8011d8a:	ec41 0b10 	vmov	d0, r0, r1
 8011d8e:	b005      	add	sp, #20
 8011d90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08011d94 <__copybits>:
 8011d94:	3901      	subs	r1, #1
 8011d96:	b570      	push	{r4, r5, r6, lr}
 8011d98:	1149      	asrs	r1, r1, #5
 8011d9a:	6914      	ldr	r4, [r2, #16]
 8011d9c:	3101      	adds	r1, #1
 8011d9e:	f102 0314 	add.w	r3, r2, #20
 8011da2:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8011da6:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8011daa:	1f05      	subs	r5, r0, #4
 8011dac:	42a3      	cmp	r3, r4
 8011dae:	d30c      	bcc.n	8011dca <__copybits+0x36>
 8011db0:	1aa3      	subs	r3, r4, r2
 8011db2:	3b11      	subs	r3, #17
 8011db4:	f023 0303 	bic.w	r3, r3, #3
 8011db8:	3211      	adds	r2, #17
 8011dba:	42a2      	cmp	r2, r4
 8011dbc:	bf88      	it	hi
 8011dbe:	2300      	movhi	r3, #0
 8011dc0:	4418      	add	r0, r3
 8011dc2:	2300      	movs	r3, #0
 8011dc4:	4288      	cmp	r0, r1
 8011dc6:	d305      	bcc.n	8011dd4 <__copybits+0x40>
 8011dc8:	bd70      	pop	{r4, r5, r6, pc}
 8011dca:	f853 6b04 	ldr.w	r6, [r3], #4
 8011dce:	f845 6f04 	str.w	r6, [r5, #4]!
 8011dd2:	e7eb      	b.n	8011dac <__copybits+0x18>
 8011dd4:	f840 3b04 	str.w	r3, [r0], #4
 8011dd8:	e7f4      	b.n	8011dc4 <__copybits+0x30>

08011dda <__any_on>:
 8011dda:	f100 0214 	add.w	r2, r0, #20
 8011dde:	6900      	ldr	r0, [r0, #16]
 8011de0:	114b      	asrs	r3, r1, #5
 8011de2:	4298      	cmp	r0, r3
 8011de4:	b510      	push	{r4, lr}
 8011de6:	db11      	blt.n	8011e0c <__any_on+0x32>
 8011de8:	dd0a      	ble.n	8011e00 <__any_on+0x26>
 8011dea:	f011 011f 	ands.w	r1, r1, #31
 8011dee:	d007      	beq.n	8011e00 <__any_on+0x26>
 8011df0:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8011df4:	fa24 f001 	lsr.w	r0, r4, r1
 8011df8:	fa00 f101 	lsl.w	r1, r0, r1
 8011dfc:	428c      	cmp	r4, r1
 8011dfe:	d10b      	bne.n	8011e18 <__any_on+0x3e>
 8011e00:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8011e04:	4293      	cmp	r3, r2
 8011e06:	d803      	bhi.n	8011e10 <__any_on+0x36>
 8011e08:	2000      	movs	r0, #0
 8011e0a:	bd10      	pop	{r4, pc}
 8011e0c:	4603      	mov	r3, r0
 8011e0e:	e7f7      	b.n	8011e00 <__any_on+0x26>
 8011e10:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8011e14:	2900      	cmp	r1, #0
 8011e16:	d0f5      	beq.n	8011e04 <__any_on+0x2a>
 8011e18:	2001      	movs	r0, #1
 8011e1a:	e7f6      	b.n	8011e0a <__any_on+0x30>

08011e1c <sulp>:
 8011e1c:	b570      	push	{r4, r5, r6, lr}
 8011e1e:	4604      	mov	r4, r0
 8011e20:	460d      	mov	r5, r1
 8011e22:	ec45 4b10 	vmov	d0, r4, r5
 8011e26:	4616      	mov	r6, r2
 8011e28:	f7ff feba 	bl	8011ba0 <__ulp>
 8011e2c:	ec51 0b10 	vmov	r0, r1, d0
 8011e30:	b17e      	cbz	r6, 8011e52 <sulp+0x36>
 8011e32:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8011e36:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8011e3a:	2b00      	cmp	r3, #0
 8011e3c:	dd09      	ble.n	8011e52 <sulp+0x36>
 8011e3e:	051b      	lsls	r3, r3, #20
 8011e40:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8011e44:	2400      	movs	r4, #0
 8011e46:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 8011e4a:	4622      	mov	r2, r4
 8011e4c:	462b      	mov	r3, r5
 8011e4e:	f7ee fbeb 	bl	8000628 <__aeabi_dmul>
 8011e52:	ec41 0b10 	vmov	d0, r0, r1
 8011e56:	bd70      	pop	{r4, r5, r6, pc}

08011e58 <_strtod_l>:
 8011e58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011e5c:	b09f      	sub	sp, #124	@ 0x7c
 8011e5e:	460c      	mov	r4, r1
 8011e60:	9217      	str	r2, [sp, #92]	@ 0x5c
 8011e62:	2200      	movs	r2, #0
 8011e64:	921a      	str	r2, [sp, #104]	@ 0x68
 8011e66:	9005      	str	r0, [sp, #20]
 8011e68:	f04f 0a00 	mov.w	sl, #0
 8011e6c:	f04f 0b00 	mov.w	fp, #0
 8011e70:	460a      	mov	r2, r1
 8011e72:	9219      	str	r2, [sp, #100]	@ 0x64
 8011e74:	7811      	ldrb	r1, [r2, #0]
 8011e76:	292b      	cmp	r1, #43	@ 0x2b
 8011e78:	d04a      	beq.n	8011f10 <_strtod_l+0xb8>
 8011e7a:	d838      	bhi.n	8011eee <_strtod_l+0x96>
 8011e7c:	290d      	cmp	r1, #13
 8011e7e:	d832      	bhi.n	8011ee6 <_strtod_l+0x8e>
 8011e80:	2908      	cmp	r1, #8
 8011e82:	d832      	bhi.n	8011eea <_strtod_l+0x92>
 8011e84:	2900      	cmp	r1, #0
 8011e86:	d03b      	beq.n	8011f00 <_strtod_l+0xa8>
 8011e88:	2200      	movs	r2, #0
 8011e8a:	920e      	str	r2, [sp, #56]	@ 0x38
 8011e8c:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8011e8e:	782a      	ldrb	r2, [r5, #0]
 8011e90:	2a30      	cmp	r2, #48	@ 0x30
 8011e92:	f040 80b2 	bne.w	8011ffa <_strtod_l+0x1a2>
 8011e96:	786a      	ldrb	r2, [r5, #1]
 8011e98:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8011e9c:	2a58      	cmp	r2, #88	@ 0x58
 8011e9e:	d16e      	bne.n	8011f7e <_strtod_l+0x126>
 8011ea0:	9302      	str	r3, [sp, #8]
 8011ea2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8011ea4:	9301      	str	r3, [sp, #4]
 8011ea6:	ab1a      	add	r3, sp, #104	@ 0x68
 8011ea8:	9300      	str	r3, [sp, #0]
 8011eaa:	4a8f      	ldr	r2, [pc, #572]	@ (80120e8 <_strtod_l+0x290>)
 8011eac:	9805      	ldr	r0, [sp, #20]
 8011eae:	ab1b      	add	r3, sp, #108	@ 0x6c
 8011eb0:	a919      	add	r1, sp, #100	@ 0x64
 8011eb2:	f001 fa2f 	bl	8013314 <__gethex>
 8011eb6:	f010 060f 	ands.w	r6, r0, #15
 8011eba:	4604      	mov	r4, r0
 8011ebc:	d005      	beq.n	8011eca <_strtod_l+0x72>
 8011ebe:	2e06      	cmp	r6, #6
 8011ec0:	d128      	bne.n	8011f14 <_strtod_l+0xbc>
 8011ec2:	3501      	adds	r5, #1
 8011ec4:	2300      	movs	r3, #0
 8011ec6:	9519      	str	r5, [sp, #100]	@ 0x64
 8011ec8:	930e      	str	r3, [sp, #56]	@ 0x38
 8011eca:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8011ecc:	2b00      	cmp	r3, #0
 8011ece:	f040 858e 	bne.w	80129ee <_strtod_l+0xb96>
 8011ed2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8011ed4:	b1cb      	cbz	r3, 8011f0a <_strtod_l+0xb2>
 8011ed6:	4652      	mov	r2, sl
 8011ed8:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 8011edc:	ec43 2b10 	vmov	d0, r2, r3
 8011ee0:	b01f      	add	sp, #124	@ 0x7c
 8011ee2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011ee6:	2920      	cmp	r1, #32
 8011ee8:	d1ce      	bne.n	8011e88 <_strtod_l+0x30>
 8011eea:	3201      	adds	r2, #1
 8011eec:	e7c1      	b.n	8011e72 <_strtod_l+0x1a>
 8011eee:	292d      	cmp	r1, #45	@ 0x2d
 8011ef0:	d1ca      	bne.n	8011e88 <_strtod_l+0x30>
 8011ef2:	2101      	movs	r1, #1
 8011ef4:	910e      	str	r1, [sp, #56]	@ 0x38
 8011ef6:	1c51      	adds	r1, r2, #1
 8011ef8:	9119      	str	r1, [sp, #100]	@ 0x64
 8011efa:	7852      	ldrb	r2, [r2, #1]
 8011efc:	2a00      	cmp	r2, #0
 8011efe:	d1c5      	bne.n	8011e8c <_strtod_l+0x34>
 8011f00:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8011f02:	9419      	str	r4, [sp, #100]	@ 0x64
 8011f04:	2b00      	cmp	r3, #0
 8011f06:	f040 8570 	bne.w	80129ea <_strtod_l+0xb92>
 8011f0a:	4652      	mov	r2, sl
 8011f0c:	465b      	mov	r3, fp
 8011f0e:	e7e5      	b.n	8011edc <_strtod_l+0x84>
 8011f10:	2100      	movs	r1, #0
 8011f12:	e7ef      	b.n	8011ef4 <_strtod_l+0x9c>
 8011f14:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8011f16:	b13a      	cbz	r2, 8011f28 <_strtod_l+0xd0>
 8011f18:	2135      	movs	r1, #53	@ 0x35
 8011f1a:	a81c      	add	r0, sp, #112	@ 0x70
 8011f1c:	f7ff ff3a 	bl	8011d94 <__copybits>
 8011f20:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8011f22:	9805      	ldr	r0, [sp, #20]
 8011f24:	f7ff fb10 	bl	8011548 <_Bfree>
 8011f28:	3e01      	subs	r6, #1
 8011f2a:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8011f2c:	2e04      	cmp	r6, #4
 8011f2e:	d806      	bhi.n	8011f3e <_strtod_l+0xe6>
 8011f30:	e8df f006 	tbb	[pc, r6]
 8011f34:	201d0314 	.word	0x201d0314
 8011f38:	14          	.byte	0x14
 8011f39:	00          	.byte	0x00
 8011f3a:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 8011f3e:	05e1      	lsls	r1, r4, #23
 8011f40:	bf48      	it	mi
 8011f42:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8011f46:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8011f4a:	0d1b      	lsrs	r3, r3, #20
 8011f4c:	051b      	lsls	r3, r3, #20
 8011f4e:	2b00      	cmp	r3, #0
 8011f50:	d1bb      	bne.n	8011eca <_strtod_l+0x72>
 8011f52:	f7fe fb01 	bl	8010558 <__errno>
 8011f56:	2322      	movs	r3, #34	@ 0x22
 8011f58:	6003      	str	r3, [r0, #0]
 8011f5a:	e7b6      	b.n	8011eca <_strtod_l+0x72>
 8011f5c:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8011f60:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8011f64:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8011f68:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8011f6c:	e7e7      	b.n	8011f3e <_strtod_l+0xe6>
 8011f6e:	f8df b180 	ldr.w	fp, [pc, #384]	@ 80120f0 <_strtod_l+0x298>
 8011f72:	e7e4      	b.n	8011f3e <_strtod_l+0xe6>
 8011f74:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8011f78:	f04f 3aff 	mov.w	sl, #4294967295
 8011f7c:	e7df      	b.n	8011f3e <_strtod_l+0xe6>
 8011f7e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8011f80:	1c5a      	adds	r2, r3, #1
 8011f82:	9219      	str	r2, [sp, #100]	@ 0x64
 8011f84:	785b      	ldrb	r3, [r3, #1]
 8011f86:	2b30      	cmp	r3, #48	@ 0x30
 8011f88:	d0f9      	beq.n	8011f7e <_strtod_l+0x126>
 8011f8a:	2b00      	cmp	r3, #0
 8011f8c:	d09d      	beq.n	8011eca <_strtod_l+0x72>
 8011f8e:	2301      	movs	r3, #1
 8011f90:	2700      	movs	r7, #0
 8011f92:	9308      	str	r3, [sp, #32]
 8011f94:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8011f96:	930c      	str	r3, [sp, #48]	@ 0x30
 8011f98:	970b      	str	r7, [sp, #44]	@ 0x2c
 8011f9a:	46b9      	mov	r9, r7
 8011f9c:	220a      	movs	r2, #10
 8011f9e:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8011fa0:	7805      	ldrb	r5, [r0, #0]
 8011fa2:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8011fa6:	b2d9      	uxtb	r1, r3
 8011fa8:	2909      	cmp	r1, #9
 8011faa:	d928      	bls.n	8011ffe <_strtod_l+0x1a6>
 8011fac:	494f      	ldr	r1, [pc, #316]	@ (80120ec <_strtod_l+0x294>)
 8011fae:	2201      	movs	r2, #1
 8011fb0:	f001 f8e0 	bl	8013174 <strncmp>
 8011fb4:	2800      	cmp	r0, #0
 8011fb6:	d032      	beq.n	801201e <_strtod_l+0x1c6>
 8011fb8:	2000      	movs	r0, #0
 8011fba:	462a      	mov	r2, r5
 8011fbc:	900a      	str	r0, [sp, #40]	@ 0x28
 8011fbe:	464d      	mov	r5, r9
 8011fc0:	4603      	mov	r3, r0
 8011fc2:	2a65      	cmp	r2, #101	@ 0x65
 8011fc4:	d001      	beq.n	8011fca <_strtod_l+0x172>
 8011fc6:	2a45      	cmp	r2, #69	@ 0x45
 8011fc8:	d114      	bne.n	8011ff4 <_strtod_l+0x19c>
 8011fca:	b91d      	cbnz	r5, 8011fd4 <_strtod_l+0x17c>
 8011fcc:	9a08      	ldr	r2, [sp, #32]
 8011fce:	4302      	orrs	r2, r0
 8011fd0:	d096      	beq.n	8011f00 <_strtod_l+0xa8>
 8011fd2:	2500      	movs	r5, #0
 8011fd4:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8011fd6:	1c62      	adds	r2, r4, #1
 8011fd8:	9219      	str	r2, [sp, #100]	@ 0x64
 8011fda:	7862      	ldrb	r2, [r4, #1]
 8011fdc:	2a2b      	cmp	r2, #43	@ 0x2b
 8011fde:	d07a      	beq.n	80120d6 <_strtod_l+0x27e>
 8011fe0:	2a2d      	cmp	r2, #45	@ 0x2d
 8011fe2:	d07e      	beq.n	80120e2 <_strtod_l+0x28a>
 8011fe4:	f04f 0c00 	mov.w	ip, #0
 8011fe8:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8011fec:	2909      	cmp	r1, #9
 8011fee:	f240 8085 	bls.w	80120fc <_strtod_l+0x2a4>
 8011ff2:	9419      	str	r4, [sp, #100]	@ 0x64
 8011ff4:	f04f 0800 	mov.w	r8, #0
 8011ff8:	e0a5      	b.n	8012146 <_strtod_l+0x2ee>
 8011ffa:	2300      	movs	r3, #0
 8011ffc:	e7c8      	b.n	8011f90 <_strtod_l+0x138>
 8011ffe:	f1b9 0f08 	cmp.w	r9, #8
 8012002:	bfd8      	it	le
 8012004:	990b      	ldrle	r1, [sp, #44]	@ 0x2c
 8012006:	f100 0001 	add.w	r0, r0, #1
 801200a:	bfda      	itte	le
 801200c:	fb02 3301 	mlale	r3, r2, r1, r3
 8012010:	930b      	strle	r3, [sp, #44]	@ 0x2c
 8012012:	fb02 3707 	mlagt	r7, r2, r7, r3
 8012016:	f109 0901 	add.w	r9, r9, #1
 801201a:	9019      	str	r0, [sp, #100]	@ 0x64
 801201c:	e7bf      	b.n	8011f9e <_strtod_l+0x146>
 801201e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8012020:	1c5a      	adds	r2, r3, #1
 8012022:	9219      	str	r2, [sp, #100]	@ 0x64
 8012024:	785a      	ldrb	r2, [r3, #1]
 8012026:	f1b9 0f00 	cmp.w	r9, #0
 801202a:	d03b      	beq.n	80120a4 <_strtod_l+0x24c>
 801202c:	900a      	str	r0, [sp, #40]	@ 0x28
 801202e:	464d      	mov	r5, r9
 8012030:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8012034:	2b09      	cmp	r3, #9
 8012036:	d912      	bls.n	801205e <_strtod_l+0x206>
 8012038:	2301      	movs	r3, #1
 801203a:	e7c2      	b.n	8011fc2 <_strtod_l+0x16a>
 801203c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801203e:	1c5a      	adds	r2, r3, #1
 8012040:	9219      	str	r2, [sp, #100]	@ 0x64
 8012042:	785a      	ldrb	r2, [r3, #1]
 8012044:	3001      	adds	r0, #1
 8012046:	2a30      	cmp	r2, #48	@ 0x30
 8012048:	d0f8      	beq.n	801203c <_strtod_l+0x1e4>
 801204a:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 801204e:	2b08      	cmp	r3, #8
 8012050:	f200 84d2 	bhi.w	80129f8 <_strtod_l+0xba0>
 8012054:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8012056:	900a      	str	r0, [sp, #40]	@ 0x28
 8012058:	2000      	movs	r0, #0
 801205a:	930c      	str	r3, [sp, #48]	@ 0x30
 801205c:	4605      	mov	r5, r0
 801205e:	3a30      	subs	r2, #48	@ 0x30
 8012060:	f100 0301 	add.w	r3, r0, #1
 8012064:	d018      	beq.n	8012098 <_strtod_l+0x240>
 8012066:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8012068:	4419      	add	r1, r3
 801206a:	910a      	str	r1, [sp, #40]	@ 0x28
 801206c:	462e      	mov	r6, r5
 801206e:	f04f 0e0a 	mov.w	lr, #10
 8012072:	1c71      	adds	r1, r6, #1
 8012074:	eba1 0c05 	sub.w	ip, r1, r5
 8012078:	4563      	cmp	r3, ip
 801207a:	dc15      	bgt.n	80120a8 <_strtod_l+0x250>
 801207c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 8012080:	182b      	adds	r3, r5, r0
 8012082:	2b08      	cmp	r3, #8
 8012084:	f105 0501 	add.w	r5, r5, #1
 8012088:	4405      	add	r5, r0
 801208a:	dc1a      	bgt.n	80120c2 <_strtod_l+0x26a>
 801208c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801208e:	230a      	movs	r3, #10
 8012090:	fb03 2301 	mla	r3, r3, r1, r2
 8012094:	930b      	str	r3, [sp, #44]	@ 0x2c
 8012096:	2300      	movs	r3, #0
 8012098:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 801209a:	1c51      	adds	r1, r2, #1
 801209c:	9119      	str	r1, [sp, #100]	@ 0x64
 801209e:	7852      	ldrb	r2, [r2, #1]
 80120a0:	4618      	mov	r0, r3
 80120a2:	e7c5      	b.n	8012030 <_strtod_l+0x1d8>
 80120a4:	4648      	mov	r0, r9
 80120a6:	e7ce      	b.n	8012046 <_strtod_l+0x1ee>
 80120a8:	2e08      	cmp	r6, #8
 80120aa:	dc05      	bgt.n	80120b8 <_strtod_l+0x260>
 80120ac:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 80120ae:	fb0e f606 	mul.w	r6, lr, r6
 80120b2:	960b      	str	r6, [sp, #44]	@ 0x2c
 80120b4:	460e      	mov	r6, r1
 80120b6:	e7dc      	b.n	8012072 <_strtod_l+0x21a>
 80120b8:	2910      	cmp	r1, #16
 80120ba:	bfd8      	it	le
 80120bc:	fb0e f707 	mulle.w	r7, lr, r7
 80120c0:	e7f8      	b.n	80120b4 <_strtod_l+0x25c>
 80120c2:	2b0f      	cmp	r3, #15
 80120c4:	bfdc      	itt	le
 80120c6:	230a      	movle	r3, #10
 80120c8:	fb03 2707 	mlale	r7, r3, r7, r2
 80120cc:	e7e3      	b.n	8012096 <_strtod_l+0x23e>
 80120ce:	2300      	movs	r3, #0
 80120d0:	930a      	str	r3, [sp, #40]	@ 0x28
 80120d2:	2301      	movs	r3, #1
 80120d4:	e77a      	b.n	8011fcc <_strtod_l+0x174>
 80120d6:	f04f 0c00 	mov.w	ip, #0
 80120da:	1ca2      	adds	r2, r4, #2
 80120dc:	9219      	str	r2, [sp, #100]	@ 0x64
 80120de:	78a2      	ldrb	r2, [r4, #2]
 80120e0:	e782      	b.n	8011fe8 <_strtod_l+0x190>
 80120e2:	f04f 0c01 	mov.w	ip, #1
 80120e6:	e7f8      	b.n	80120da <_strtod_l+0x282>
 80120e8:	08015a64 	.word	0x08015a64
 80120ec:	080158d7 	.word	0x080158d7
 80120f0:	7ff00000 	.word	0x7ff00000
 80120f4:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80120f6:	1c51      	adds	r1, r2, #1
 80120f8:	9119      	str	r1, [sp, #100]	@ 0x64
 80120fa:	7852      	ldrb	r2, [r2, #1]
 80120fc:	2a30      	cmp	r2, #48	@ 0x30
 80120fe:	d0f9      	beq.n	80120f4 <_strtod_l+0x29c>
 8012100:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8012104:	2908      	cmp	r1, #8
 8012106:	f63f af75 	bhi.w	8011ff4 <_strtod_l+0x19c>
 801210a:	3a30      	subs	r2, #48	@ 0x30
 801210c:	9209      	str	r2, [sp, #36]	@ 0x24
 801210e:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8012110:	920f      	str	r2, [sp, #60]	@ 0x3c
 8012112:	f04f 080a 	mov.w	r8, #10
 8012116:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8012118:	1c56      	adds	r6, r2, #1
 801211a:	9619      	str	r6, [sp, #100]	@ 0x64
 801211c:	7852      	ldrb	r2, [r2, #1]
 801211e:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8012122:	f1be 0f09 	cmp.w	lr, #9
 8012126:	d939      	bls.n	801219c <_strtod_l+0x344>
 8012128:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 801212a:	1a76      	subs	r6, r6, r1
 801212c:	2e08      	cmp	r6, #8
 801212e:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 8012132:	dc03      	bgt.n	801213c <_strtod_l+0x2e4>
 8012134:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8012136:	4588      	cmp	r8, r1
 8012138:	bfa8      	it	ge
 801213a:	4688      	movge	r8, r1
 801213c:	f1bc 0f00 	cmp.w	ip, #0
 8012140:	d001      	beq.n	8012146 <_strtod_l+0x2ee>
 8012142:	f1c8 0800 	rsb	r8, r8, #0
 8012146:	2d00      	cmp	r5, #0
 8012148:	d14e      	bne.n	80121e8 <_strtod_l+0x390>
 801214a:	9908      	ldr	r1, [sp, #32]
 801214c:	4308      	orrs	r0, r1
 801214e:	f47f aebc 	bne.w	8011eca <_strtod_l+0x72>
 8012152:	2b00      	cmp	r3, #0
 8012154:	f47f aed4 	bne.w	8011f00 <_strtod_l+0xa8>
 8012158:	2a69      	cmp	r2, #105	@ 0x69
 801215a:	d028      	beq.n	80121ae <_strtod_l+0x356>
 801215c:	dc25      	bgt.n	80121aa <_strtod_l+0x352>
 801215e:	2a49      	cmp	r2, #73	@ 0x49
 8012160:	d025      	beq.n	80121ae <_strtod_l+0x356>
 8012162:	2a4e      	cmp	r2, #78	@ 0x4e
 8012164:	f47f aecc 	bne.w	8011f00 <_strtod_l+0xa8>
 8012168:	499a      	ldr	r1, [pc, #616]	@ (80123d4 <_strtod_l+0x57c>)
 801216a:	a819      	add	r0, sp, #100	@ 0x64
 801216c:	f001 faf4 	bl	8013758 <__match>
 8012170:	2800      	cmp	r0, #0
 8012172:	f43f aec5 	beq.w	8011f00 <_strtod_l+0xa8>
 8012176:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8012178:	781b      	ldrb	r3, [r3, #0]
 801217a:	2b28      	cmp	r3, #40	@ 0x28
 801217c:	d12e      	bne.n	80121dc <_strtod_l+0x384>
 801217e:	4996      	ldr	r1, [pc, #600]	@ (80123d8 <_strtod_l+0x580>)
 8012180:	aa1c      	add	r2, sp, #112	@ 0x70
 8012182:	a819      	add	r0, sp, #100	@ 0x64
 8012184:	f001 fafc 	bl	8013780 <__hexnan>
 8012188:	2805      	cmp	r0, #5
 801218a:	d127      	bne.n	80121dc <_strtod_l+0x384>
 801218c:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801218e:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 8012192:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8012196:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 801219a:	e696      	b.n	8011eca <_strtod_l+0x72>
 801219c:	9909      	ldr	r1, [sp, #36]	@ 0x24
 801219e:	fb08 2101 	mla	r1, r8, r1, r2
 80121a2:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 80121a6:	9209      	str	r2, [sp, #36]	@ 0x24
 80121a8:	e7b5      	b.n	8012116 <_strtod_l+0x2be>
 80121aa:	2a6e      	cmp	r2, #110	@ 0x6e
 80121ac:	e7da      	b.n	8012164 <_strtod_l+0x30c>
 80121ae:	498b      	ldr	r1, [pc, #556]	@ (80123dc <_strtod_l+0x584>)
 80121b0:	a819      	add	r0, sp, #100	@ 0x64
 80121b2:	f001 fad1 	bl	8013758 <__match>
 80121b6:	2800      	cmp	r0, #0
 80121b8:	f43f aea2 	beq.w	8011f00 <_strtod_l+0xa8>
 80121bc:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80121be:	4988      	ldr	r1, [pc, #544]	@ (80123e0 <_strtod_l+0x588>)
 80121c0:	3b01      	subs	r3, #1
 80121c2:	a819      	add	r0, sp, #100	@ 0x64
 80121c4:	9319      	str	r3, [sp, #100]	@ 0x64
 80121c6:	f001 fac7 	bl	8013758 <__match>
 80121ca:	b910      	cbnz	r0, 80121d2 <_strtod_l+0x37a>
 80121cc:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80121ce:	3301      	adds	r3, #1
 80121d0:	9319      	str	r3, [sp, #100]	@ 0x64
 80121d2:	f8df b21c 	ldr.w	fp, [pc, #540]	@ 80123f0 <_strtod_l+0x598>
 80121d6:	f04f 0a00 	mov.w	sl, #0
 80121da:	e676      	b.n	8011eca <_strtod_l+0x72>
 80121dc:	4881      	ldr	r0, [pc, #516]	@ (80123e4 <_strtod_l+0x58c>)
 80121de:	f001 f80f 	bl	8013200 <nan>
 80121e2:	ec5b ab10 	vmov	sl, fp, d0
 80121e6:	e670      	b.n	8011eca <_strtod_l+0x72>
 80121e8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80121ea:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 80121ec:	eba8 0303 	sub.w	r3, r8, r3
 80121f0:	f1b9 0f00 	cmp.w	r9, #0
 80121f4:	bf08      	it	eq
 80121f6:	46a9      	moveq	r9, r5
 80121f8:	2d10      	cmp	r5, #16
 80121fa:	9309      	str	r3, [sp, #36]	@ 0x24
 80121fc:	462c      	mov	r4, r5
 80121fe:	bfa8      	it	ge
 8012200:	2410      	movge	r4, #16
 8012202:	f7ee f997 	bl	8000534 <__aeabi_ui2d>
 8012206:	2d09      	cmp	r5, #9
 8012208:	4682      	mov	sl, r0
 801220a:	468b      	mov	fp, r1
 801220c:	dc13      	bgt.n	8012236 <_strtod_l+0x3de>
 801220e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012210:	2b00      	cmp	r3, #0
 8012212:	f43f ae5a 	beq.w	8011eca <_strtod_l+0x72>
 8012216:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012218:	dd78      	ble.n	801230c <_strtod_l+0x4b4>
 801221a:	2b16      	cmp	r3, #22
 801221c:	dc5f      	bgt.n	80122de <_strtod_l+0x486>
 801221e:	4972      	ldr	r1, [pc, #456]	@ (80123e8 <_strtod_l+0x590>)
 8012220:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8012224:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012228:	4652      	mov	r2, sl
 801222a:	465b      	mov	r3, fp
 801222c:	f7ee f9fc 	bl	8000628 <__aeabi_dmul>
 8012230:	4682      	mov	sl, r0
 8012232:	468b      	mov	fp, r1
 8012234:	e649      	b.n	8011eca <_strtod_l+0x72>
 8012236:	4b6c      	ldr	r3, [pc, #432]	@ (80123e8 <_strtod_l+0x590>)
 8012238:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801223c:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8012240:	f7ee f9f2 	bl	8000628 <__aeabi_dmul>
 8012244:	4682      	mov	sl, r0
 8012246:	4638      	mov	r0, r7
 8012248:	468b      	mov	fp, r1
 801224a:	f7ee f973 	bl	8000534 <__aeabi_ui2d>
 801224e:	4602      	mov	r2, r0
 8012250:	460b      	mov	r3, r1
 8012252:	4650      	mov	r0, sl
 8012254:	4659      	mov	r1, fp
 8012256:	f7ee f831 	bl	80002bc <__adddf3>
 801225a:	2d0f      	cmp	r5, #15
 801225c:	4682      	mov	sl, r0
 801225e:	468b      	mov	fp, r1
 8012260:	ddd5      	ble.n	801220e <_strtod_l+0x3b6>
 8012262:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012264:	1b2c      	subs	r4, r5, r4
 8012266:	441c      	add	r4, r3
 8012268:	2c00      	cmp	r4, #0
 801226a:	f340 8093 	ble.w	8012394 <_strtod_l+0x53c>
 801226e:	f014 030f 	ands.w	r3, r4, #15
 8012272:	d00a      	beq.n	801228a <_strtod_l+0x432>
 8012274:	495c      	ldr	r1, [pc, #368]	@ (80123e8 <_strtod_l+0x590>)
 8012276:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 801227a:	4652      	mov	r2, sl
 801227c:	465b      	mov	r3, fp
 801227e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012282:	f7ee f9d1 	bl	8000628 <__aeabi_dmul>
 8012286:	4682      	mov	sl, r0
 8012288:	468b      	mov	fp, r1
 801228a:	f034 040f 	bics.w	r4, r4, #15
 801228e:	d073      	beq.n	8012378 <_strtod_l+0x520>
 8012290:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 8012294:	dd49      	ble.n	801232a <_strtod_l+0x4d2>
 8012296:	2400      	movs	r4, #0
 8012298:	46a0      	mov	r8, r4
 801229a:	940b      	str	r4, [sp, #44]	@ 0x2c
 801229c:	46a1      	mov	r9, r4
 801229e:	9a05      	ldr	r2, [sp, #20]
 80122a0:	f8df b14c 	ldr.w	fp, [pc, #332]	@ 80123f0 <_strtod_l+0x598>
 80122a4:	2322      	movs	r3, #34	@ 0x22
 80122a6:	6013      	str	r3, [r2, #0]
 80122a8:	f04f 0a00 	mov.w	sl, #0
 80122ac:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80122ae:	2b00      	cmp	r3, #0
 80122b0:	f43f ae0b 	beq.w	8011eca <_strtod_l+0x72>
 80122b4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80122b6:	9805      	ldr	r0, [sp, #20]
 80122b8:	f7ff f946 	bl	8011548 <_Bfree>
 80122bc:	9805      	ldr	r0, [sp, #20]
 80122be:	4649      	mov	r1, r9
 80122c0:	f7ff f942 	bl	8011548 <_Bfree>
 80122c4:	9805      	ldr	r0, [sp, #20]
 80122c6:	4641      	mov	r1, r8
 80122c8:	f7ff f93e 	bl	8011548 <_Bfree>
 80122cc:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80122ce:	9805      	ldr	r0, [sp, #20]
 80122d0:	f7ff f93a 	bl	8011548 <_Bfree>
 80122d4:	9805      	ldr	r0, [sp, #20]
 80122d6:	4621      	mov	r1, r4
 80122d8:	f7ff f936 	bl	8011548 <_Bfree>
 80122dc:	e5f5      	b.n	8011eca <_strtod_l+0x72>
 80122de:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80122e0:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 80122e4:	4293      	cmp	r3, r2
 80122e6:	dbbc      	blt.n	8012262 <_strtod_l+0x40a>
 80122e8:	4c3f      	ldr	r4, [pc, #252]	@ (80123e8 <_strtod_l+0x590>)
 80122ea:	f1c5 050f 	rsb	r5, r5, #15
 80122ee:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 80122f2:	4652      	mov	r2, sl
 80122f4:	465b      	mov	r3, fp
 80122f6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80122fa:	f7ee f995 	bl	8000628 <__aeabi_dmul>
 80122fe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012300:	1b5d      	subs	r5, r3, r5
 8012302:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8012306:	e9d4 2300 	ldrd	r2, r3, [r4]
 801230a:	e78f      	b.n	801222c <_strtod_l+0x3d4>
 801230c:	3316      	adds	r3, #22
 801230e:	dba8      	blt.n	8012262 <_strtod_l+0x40a>
 8012310:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8012312:	eba3 0808 	sub.w	r8, r3, r8
 8012316:	4b34      	ldr	r3, [pc, #208]	@ (80123e8 <_strtod_l+0x590>)
 8012318:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 801231c:	e9d8 2300 	ldrd	r2, r3, [r8]
 8012320:	4650      	mov	r0, sl
 8012322:	4659      	mov	r1, fp
 8012324:	f7ee faaa 	bl	800087c <__aeabi_ddiv>
 8012328:	e782      	b.n	8012230 <_strtod_l+0x3d8>
 801232a:	2300      	movs	r3, #0
 801232c:	4f2f      	ldr	r7, [pc, #188]	@ (80123ec <_strtod_l+0x594>)
 801232e:	1124      	asrs	r4, r4, #4
 8012330:	4650      	mov	r0, sl
 8012332:	4659      	mov	r1, fp
 8012334:	461e      	mov	r6, r3
 8012336:	2c01      	cmp	r4, #1
 8012338:	dc21      	bgt.n	801237e <_strtod_l+0x526>
 801233a:	b10b      	cbz	r3, 8012340 <_strtod_l+0x4e8>
 801233c:	4682      	mov	sl, r0
 801233e:	468b      	mov	fp, r1
 8012340:	492a      	ldr	r1, [pc, #168]	@ (80123ec <_strtod_l+0x594>)
 8012342:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8012346:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 801234a:	4652      	mov	r2, sl
 801234c:	465b      	mov	r3, fp
 801234e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012352:	f7ee f969 	bl	8000628 <__aeabi_dmul>
 8012356:	4b26      	ldr	r3, [pc, #152]	@ (80123f0 <_strtod_l+0x598>)
 8012358:	460a      	mov	r2, r1
 801235a:	400b      	ands	r3, r1
 801235c:	4925      	ldr	r1, [pc, #148]	@ (80123f4 <_strtod_l+0x59c>)
 801235e:	428b      	cmp	r3, r1
 8012360:	4682      	mov	sl, r0
 8012362:	d898      	bhi.n	8012296 <_strtod_l+0x43e>
 8012364:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8012368:	428b      	cmp	r3, r1
 801236a:	bf86      	itte	hi
 801236c:	f8df b088 	ldrhi.w	fp, [pc, #136]	@ 80123f8 <_strtod_l+0x5a0>
 8012370:	f04f 3aff 	movhi.w	sl, #4294967295
 8012374:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8012378:	2300      	movs	r3, #0
 801237a:	9308      	str	r3, [sp, #32]
 801237c:	e076      	b.n	801246c <_strtod_l+0x614>
 801237e:	07e2      	lsls	r2, r4, #31
 8012380:	d504      	bpl.n	801238c <_strtod_l+0x534>
 8012382:	e9d7 2300 	ldrd	r2, r3, [r7]
 8012386:	f7ee f94f 	bl	8000628 <__aeabi_dmul>
 801238a:	2301      	movs	r3, #1
 801238c:	3601      	adds	r6, #1
 801238e:	1064      	asrs	r4, r4, #1
 8012390:	3708      	adds	r7, #8
 8012392:	e7d0      	b.n	8012336 <_strtod_l+0x4de>
 8012394:	d0f0      	beq.n	8012378 <_strtod_l+0x520>
 8012396:	4264      	negs	r4, r4
 8012398:	f014 020f 	ands.w	r2, r4, #15
 801239c:	d00a      	beq.n	80123b4 <_strtod_l+0x55c>
 801239e:	4b12      	ldr	r3, [pc, #72]	@ (80123e8 <_strtod_l+0x590>)
 80123a0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80123a4:	4650      	mov	r0, sl
 80123a6:	4659      	mov	r1, fp
 80123a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80123ac:	f7ee fa66 	bl	800087c <__aeabi_ddiv>
 80123b0:	4682      	mov	sl, r0
 80123b2:	468b      	mov	fp, r1
 80123b4:	1124      	asrs	r4, r4, #4
 80123b6:	d0df      	beq.n	8012378 <_strtod_l+0x520>
 80123b8:	2c1f      	cmp	r4, #31
 80123ba:	dd1f      	ble.n	80123fc <_strtod_l+0x5a4>
 80123bc:	2400      	movs	r4, #0
 80123be:	46a0      	mov	r8, r4
 80123c0:	940b      	str	r4, [sp, #44]	@ 0x2c
 80123c2:	46a1      	mov	r9, r4
 80123c4:	9a05      	ldr	r2, [sp, #20]
 80123c6:	2322      	movs	r3, #34	@ 0x22
 80123c8:	f04f 0a00 	mov.w	sl, #0
 80123cc:	f04f 0b00 	mov.w	fp, #0
 80123d0:	6013      	str	r3, [r2, #0]
 80123d2:	e76b      	b.n	80122ac <_strtod_l+0x454>
 80123d4:	08015789 	.word	0x08015789
 80123d8:	08015a50 	.word	0x08015a50
 80123dc:	08015781 	.word	0x08015781
 80123e0:	080157f4 	.word	0x080157f4
 80123e4:	080157f0 	.word	0x080157f0
 80123e8:	08015988 	.word	0x08015988
 80123ec:	08015960 	.word	0x08015960
 80123f0:	7ff00000 	.word	0x7ff00000
 80123f4:	7ca00000 	.word	0x7ca00000
 80123f8:	7fefffff 	.word	0x7fefffff
 80123fc:	f014 0310 	ands.w	r3, r4, #16
 8012400:	bf18      	it	ne
 8012402:	236a      	movne	r3, #106	@ 0x6a
 8012404:	4ea9      	ldr	r6, [pc, #676]	@ (80126ac <_strtod_l+0x854>)
 8012406:	9308      	str	r3, [sp, #32]
 8012408:	4650      	mov	r0, sl
 801240a:	4659      	mov	r1, fp
 801240c:	2300      	movs	r3, #0
 801240e:	07e7      	lsls	r7, r4, #31
 8012410:	d504      	bpl.n	801241c <_strtod_l+0x5c4>
 8012412:	e9d6 2300 	ldrd	r2, r3, [r6]
 8012416:	f7ee f907 	bl	8000628 <__aeabi_dmul>
 801241a:	2301      	movs	r3, #1
 801241c:	1064      	asrs	r4, r4, #1
 801241e:	f106 0608 	add.w	r6, r6, #8
 8012422:	d1f4      	bne.n	801240e <_strtod_l+0x5b6>
 8012424:	b10b      	cbz	r3, 801242a <_strtod_l+0x5d2>
 8012426:	4682      	mov	sl, r0
 8012428:	468b      	mov	fp, r1
 801242a:	9b08      	ldr	r3, [sp, #32]
 801242c:	b1b3      	cbz	r3, 801245c <_strtod_l+0x604>
 801242e:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8012432:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 8012436:	2b00      	cmp	r3, #0
 8012438:	4659      	mov	r1, fp
 801243a:	dd0f      	ble.n	801245c <_strtod_l+0x604>
 801243c:	2b1f      	cmp	r3, #31
 801243e:	dd56      	ble.n	80124ee <_strtod_l+0x696>
 8012440:	2b34      	cmp	r3, #52	@ 0x34
 8012442:	bfde      	ittt	le
 8012444:	f04f 33ff 	movle.w	r3, #4294967295
 8012448:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 801244c:	4093      	lslle	r3, r2
 801244e:	f04f 0a00 	mov.w	sl, #0
 8012452:	bfcc      	ite	gt
 8012454:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8012458:	ea03 0b01 	andle.w	fp, r3, r1
 801245c:	2200      	movs	r2, #0
 801245e:	2300      	movs	r3, #0
 8012460:	4650      	mov	r0, sl
 8012462:	4659      	mov	r1, fp
 8012464:	f7ee fb48 	bl	8000af8 <__aeabi_dcmpeq>
 8012468:	2800      	cmp	r0, #0
 801246a:	d1a7      	bne.n	80123bc <_strtod_l+0x564>
 801246c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801246e:	9300      	str	r3, [sp, #0]
 8012470:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8012472:	9805      	ldr	r0, [sp, #20]
 8012474:	462b      	mov	r3, r5
 8012476:	464a      	mov	r2, r9
 8012478:	f7ff f8ce 	bl	8011618 <__s2b>
 801247c:	900b      	str	r0, [sp, #44]	@ 0x2c
 801247e:	2800      	cmp	r0, #0
 8012480:	f43f af09 	beq.w	8012296 <_strtod_l+0x43e>
 8012484:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8012486:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8012488:	2a00      	cmp	r2, #0
 801248a:	eba3 0308 	sub.w	r3, r3, r8
 801248e:	bfa8      	it	ge
 8012490:	2300      	movge	r3, #0
 8012492:	9312      	str	r3, [sp, #72]	@ 0x48
 8012494:	2400      	movs	r4, #0
 8012496:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 801249a:	9316      	str	r3, [sp, #88]	@ 0x58
 801249c:	46a0      	mov	r8, r4
 801249e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80124a0:	9805      	ldr	r0, [sp, #20]
 80124a2:	6859      	ldr	r1, [r3, #4]
 80124a4:	f7ff f810 	bl	80114c8 <_Balloc>
 80124a8:	4681      	mov	r9, r0
 80124aa:	2800      	cmp	r0, #0
 80124ac:	f43f aef7 	beq.w	801229e <_strtod_l+0x446>
 80124b0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80124b2:	691a      	ldr	r2, [r3, #16]
 80124b4:	3202      	adds	r2, #2
 80124b6:	f103 010c 	add.w	r1, r3, #12
 80124ba:	0092      	lsls	r2, r2, #2
 80124bc:	300c      	adds	r0, #12
 80124be:	f7fe f878 	bl	80105b2 <memcpy>
 80124c2:	ec4b ab10 	vmov	d0, sl, fp
 80124c6:	9805      	ldr	r0, [sp, #20]
 80124c8:	aa1c      	add	r2, sp, #112	@ 0x70
 80124ca:	a91b      	add	r1, sp, #108	@ 0x6c
 80124cc:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 80124d0:	f7ff fbd6 	bl	8011c80 <__d2b>
 80124d4:	901a      	str	r0, [sp, #104]	@ 0x68
 80124d6:	2800      	cmp	r0, #0
 80124d8:	f43f aee1 	beq.w	801229e <_strtod_l+0x446>
 80124dc:	9805      	ldr	r0, [sp, #20]
 80124de:	2101      	movs	r1, #1
 80124e0:	f7ff f930 	bl	8011744 <__i2b>
 80124e4:	4680      	mov	r8, r0
 80124e6:	b948      	cbnz	r0, 80124fc <_strtod_l+0x6a4>
 80124e8:	f04f 0800 	mov.w	r8, #0
 80124ec:	e6d7      	b.n	801229e <_strtod_l+0x446>
 80124ee:	f04f 32ff 	mov.w	r2, #4294967295
 80124f2:	fa02 f303 	lsl.w	r3, r2, r3
 80124f6:	ea03 0a0a 	and.w	sl, r3, sl
 80124fa:	e7af      	b.n	801245c <_strtod_l+0x604>
 80124fc:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 80124fe:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8012500:	2d00      	cmp	r5, #0
 8012502:	bfab      	itete	ge
 8012504:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 8012506:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 8012508:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 801250a:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 801250c:	bfac      	ite	ge
 801250e:	18ef      	addge	r7, r5, r3
 8012510:	1b5e      	sublt	r6, r3, r5
 8012512:	9b08      	ldr	r3, [sp, #32]
 8012514:	1aed      	subs	r5, r5, r3
 8012516:	4415      	add	r5, r2
 8012518:	4b65      	ldr	r3, [pc, #404]	@ (80126b0 <_strtod_l+0x858>)
 801251a:	3d01      	subs	r5, #1
 801251c:	429d      	cmp	r5, r3
 801251e:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8012522:	da50      	bge.n	80125c6 <_strtod_l+0x76e>
 8012524:	1b5b      	subs	r3, r3, r5
 8012526:	2b1f      	cmp	r3, #31
 8012528:	eba2 0203 	sub.w	r2, r2, r3
 801252c:	f04f 0101 	mov.w	r1, #1
 8012530:	dc3d      	bgt.n	80125ae <_strtod_l+0x756>
 8012532:	fa01 f303 	lsl.w	r3, r1, r3
 8012536:	9313      	str	r3, [sp, #76]	@ 0x4c
 8012538:	2300      	movs	r3, #0
 801253a:	9310      	str	r3, [sp, #64]	@ 0x40
 801253c:	18bd      	adds	r5, r7, r2
 801253e:	9b08      	ldr	r3, [sp, #32]
 8012540:	42af      	cmp	r7, r5
 8012542:	4416      	add	r6, r2
 8012544:	441e      	add	r6, r3
 8012546:	463b      	mov	r3, r7
 8012548:	bfa8      	it	ge
 801254a:	462b      	movge	r3, r5
 801254c:	42b3      	cmp	r3, r6
 801254e:	bfa8      	it	ge
 8012550:	4633      	movge	r3, r6
 8012552:	2b00      	cmp	r3, #0
 8012554:	bfc2      	ittt	gt
 8012556:	1aed      	subgt	r5, r5, r3
 8012558:	1af6      	subgt	r6, r6, r3
 801255a:	1aff      	subgt	r7, r7, r3
 801255c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 801255e:	2b00      	cmp	r3, #0
 8012560:	dd16      	ble.n	8012590 <_strtod_l+0x738>
 8012562:	4641      	mov	r1, r8
 8012564:	9805      	ldr	r0, [sp, #20]
 8012566:	461a      	mov	r2, r3
 8012568:	f7ff f9a4 	bl	80118b4 <__pow5mult>
 801256c:	4680      	mov	r8, r0
 801256e:	2800      	cmp	r0, #0
 8012570:	d0ba      	beq.n	80124e8 <_strtod_l+0x690>
 8012572:	4601      	mov	r1, r0
 8012574:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8012576:	9805      	ldr	r0, [sp, #20]
 8012578:	f7ff f8fa 	bl	8011770 <__multiply>
 801257c:	900a      	str	r0, [sp, #40]	@ 0x28
 801257e:	2800      	cmp	r0, #0
 8012580:	f43f ae8d 	beq.w	801229e <_strtod_l+0x446>
 8012584:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8012586:	9805      	ldr	r0, [sp, #20]
 8012588:	f7fe ffde 	bl	8011548 <_Bfree>
 801258c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801258e:	931a      	str	r3, [sp, #104]	@ 0x68
 8012590:	2d00      	cmp	r5, #0
 8012592:	dc1d      	bgt.n	80125d0 <_strtod_l+0x778>
 8012594:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012596:	2b00      	cmp	r3, #0
 8012598:	dd23      	ble.n	80125e2 <_strtod_l+0x78a>
 801259a:	4649      	mov	r1, r9
 801259c:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 801259e:	9805      	ldr	r0, [sp, #20]
 80125a0:	f7ff f988 	bl	80118b4 <__pow5mult>
 80125a4:	4681      	mov	r9, r0
 80125a6:	b9e0      	cbnz	r0, 80125e2 <_strtod_l+0x78a>
 80125a8:	f04f 0900 	mov.w	r9, #0
 80125ac:	e677      	b.n	801229e <_strtod_l+0x446>
 80125ae:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 80125b2:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 80125b6:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 80125ba:	35e2      	adds	r5, #226	@ 0xe2
 80125bc:	fa01 f305 	lsl.w	r3, r1, r5
 80125c0:	9310      	str	r3, [sp, #64]	@ 0x40
 80125c2:	9113      	str	r1, [sp, #76]	@ 0x4c
 80125c4:	e7ba      	b.n	801253c <_strtod_l+0x6e4>
 80125c6:	2300      	movs	r3, #0
 80125c8:	9310      	str	r3, [sp, #64]	@ 0x40
 80125ca:	2301      	movs	r3, #1
 80125cc:	9313      	str	r3, [sp, #76]	@ 0x4c
 80125ce:	e7b5      	b.n	801253c <_strtod_l+0x6e4>
 80125d0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80125d2:	9805      	ldr	r0, [sp, #20]
 80125d4:	462a      	mov	r2, r5
 80125d6:	f7ff f9c7 	bl	8011968 <__lshift>
 80125da:	901a      	str	r0, [sp, #104]	@ 0x68
 80125dc:	2800      	cmp	r0, #0
 80125de:	d1d9      	bne.n	8012594 <_strtod_l+0x73c>
 80125e0:	e65d      	b.n	801229e <_strtod_l+0x446>
 80125e2:	2e00      	cmp	r6, #0
 80125e4:	dd07      	ble.n	80125f6 <_strtod_l+0x79e>
 80125e6:	4649      	mov	r1, r9
 80125e8:	9805      	ldr	r0, [sp, #20]
 80125ea:	4632      	mov	r2, r6
 80125ec:	f7ff f9bc 	bl	8011968 <__lshift>
 80125f0:	4681      	mov	r9, r0
 80125f2:	2800      	cmp	r0, #0
 80125f4:	d0d8      	beq.n	80125a8 <_strtod_l+0x750>
 80125f6:	2f00      	cmp	r7, #0
 80125f8:	dd08      	ble.n	801260c <_strtod_l+0x7b4>
 80125fa:	4641      	mov	r1, r8
 80125fc:	9805      	ldr	r0, [sp, #20]
 80125fe:	463a      	mov	r2, r7
 8012600:	f7ff f9b2 	bl	8011968 <__lshift>
 8012604:	4680      	mov	r8, r0
 8012606:	2800      	cmp	r0, #0
 8012608:	f43f ae49 	beq.w	801229e <_strtod_l+0x446>
 801260c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 801260e:	9805      	ldr	r0, [sp, #20]
 8012610:	464a      	mov	r2, r9
 8012612:	f7ff fa31 	bl	8011a78 <__mdiff>
 8012616:	4604      	mov	r4, r0
 8012618:	2800      	cmp	r0, #0
 801261a:	f43f ae40 	beq.w	801229e <_strtod_l+0x446>
 801261e:	68c3      	ldr	r3, [r0, #12]
 8012620:	930f      	str	r3, [sp, #60]	@ 0x3c
 8012622:	2300      	movs	r3, #0
 8012624:	60c3      	str	r3, [r0, #12]
 8012626:	4641      	mov	r1, r8
 8012628:	f7ff fa0a 	bl	8011a40 <__mcmp>
 801262c:	2800      	cmp	r0, #0
 801262e:	da45      	bge.n	80126bc <_strtod_l+0x864>
 8012630:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8012632:	ea53 030a 	orrs.w	r3, r3, sl
 8012636:	d16b      	bne.n	8012710 <_strtod_l+0x8b8>
 8012638:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801263c:	2b00      	cmp	r3, #0
 801263e:	d167      	bne.n	8012710 <_strtod_l+0x8b8>
 8012640:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8012644:	0d1b      	lsrs	r3, r3, #20
 8012646:	051b      	lsls	r3, r3, #20
 8012648:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 801264c:	d960      	bls.n	8012710 <_strtod_l+0x8b8>
 801264e:	6963      	ldr	r3, [r4, #20]
 8012650:	b913      	cbnz	r3, 8012658 <_strtod_l+0x800>
 8012652:	6923      	ldr	r3, [r4, #16]
 8012654:	2b01      	cmp	r3, #1
 8012656:	dd5b      	ble.n	8012710 <_strtod_l+0x8b8>
 8012658:	4621      	mov	r1, r4
 801265a:	2201      	movs	r2, #1
 801265c:	9805      	ldr	r0, [sp, #20]
 801265e:	f7ff f983 	bl	8011968 <__lshift>
 8012662:	4641      	mov	r1, r8
 8012664:	4604      	mov	r4, r0
 8012666:	f7ff f9eb 	bl	8011a40 <__mcmp>
 801266a:	2800      	cmp	r0, #0
 801266c:	dd50      	ble.n	8012710 <_strtod_l+0x8b8>
 801266e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8012672:	9a08      	ldr	r2, [sp, #32]
 8012674:	0d1b      	lsrs	r3, r3, #20
 8012676:	051b      	lsls	r3, r3, #20
 8012678:	2a00      	cmp	r2, #0
 801267a:	d06a      	beq.n	8012752 <_strtod_l+0x8fa>
 801267c:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8012680:	d867      	bhi.n	8012752 <_strtod_l+0x8fa>
 8012682:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8012686:	f67f ae9d 	bls.w	80123c4 <_strtod_l+0x56c>
 801268a:	4b0a      	ldr	r3, [pc, #40]	@ (80126b4 <_strtod_l+0x85c>)
 801268c:	4650      	mov	r0, sl
 801268e:	4659      	mov	r1, fp
 8012690:	2200      	movs	r2, #0
 8012692:	f7ed ffc9 	bl	8000628 <__aeabi_dmul>
 8012696:	4b08      	ldr	r3, [pc, #32]	@ (80126b8 <_strtod_l+0x860>)
 8012698:	400b      	ands	r3, r1
 801269a:	4682      	mov	sl, r0
 801269c:	468b      	mov	fp, r1
 801269e:	2b00      	cmp	r3, #0
 80126a0:	f47f ae08 	bne.w	80122b4 <_strtod_l+0x45c>
 80126a4:	9a05      	ldr	r2, [sp, #20]
 80126a6:	2322      	movs	r3, #34	@ 0x22
 80126a8:	6013      	str	r3, [r2, #0]
 80126aa:	e603      	b.n	80122b4 <_strtod_l+0x45c>
 80126ac:	08015a78 	.word	0x08015a78
 80126b0:	fffffc02 	.word	0xfffffc02
 80126b4:	39500000 	.word	0x39500000
 80126b8:	7ff00000 	.word	0x7ff00000
 80126bc:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 80126c0:	d165      	bne.n	801278e <_strtod_l+0x936>
 80126c2:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80126c4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80126c8:	b35a      	cbz	r2, 8012722 <_strtod_l+0x8ca>
 80126ca:	4a9f      	ldr	r2, [pc, #636]	@ (8012948 <_strtod_l+0xaf0>)
 80126cc:	4293      	cmp	r3, r2
 80126ce:	d12b      	bne.n	8012728 <_strtod_l+0x8d0>
 80126d0:	9b08      	ldr	r3, [sp, #32]
 80126d2:	4651      	mov	r1, sl
 80126d4:	b303      	cbz	r3, 8012718 <_strtod_l+0x8c0>
 80126d6:	4b9d      	ldr	r3, [pc, #628]	@ (801294c <_strtod_l+0xaf4>)
 80126d8:	465a      	mov	r2, fp
 80126da:	4013      	ands	r3, r2
 80126dc:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 80126e0:	f04f 32ff 	mov.w	r2, #4294967295
 80126e4:	d81b      	bhi.n	801271e <_strtod_l+0x8c6>
 80126e6:	0d1b      	lsrs	r3, r3, #20
 80126e8:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 80126ec:	fa02 f303 	lsl.w	r3, r2, r3
 80126f0:	4299      	cmp	r1, r3
 80126f2:	d119      	bne.n	8012728 <_strtod_l+0x8d0>
 80126f4:	4b96      	ldr	r3, [pc, #600]	@ (8012950 <_strtod_l+0xaf8>)
 80126f6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80126f8:	429a      	cmp	r2, r3
 80126fa:	d102      	bne.n	8012702 <_strtod_l+0x8aa>
 80126fc:	3101      	adds	r1, #1
 80126fe:	f43f adce 	beq.w	801229e <_strtod_l+0x446>
 8012702:	4b92      	ldr	r3, [pc, #584]	@ (801294c <_strtod_l+0xaf4>)
 8012704:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8012706:	401a      	ands	r2, r3
 8012708:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 801270c:	f04f 0a00 	mov.w	sl, #0
 8012710:	9b08      	ldr	r3, [sp, #32]
 8012712:	2b00      	cmp	r3, #0
 8012714:	d1b9      	bne.n	801268a <_strtod_l+0x832>
 8012716:	e5cd      	b.n	80122b4 <_strtod_l+0x45c>
 8012718:	f04f 33ff 	mov.w	r3, #4294967295
 801271c:	e7e8      	b.n	80126f0 <_strtod_l+0x898>
 801271e:	4613      	mov	r3, r2
 8012720:	e7e6      	b.n	80126f0 <_strtod_l+0x898>
 8012722:	ea53 030a 	orrs.w	r3, r3, sl
 8012726:	d0a2      	beq.n	801266e <_strtod_l+0x816>
 8012728:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801272a:	b1db      	cbz	r3, 8012764 <_strtod_l+0x90c>
 801272c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801272e:	4213      	tst	r3, r2
 8012730:	d0ee      	beq.n	8012710 <_strtod_l+0x8b8>
 8012732:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8012734:	9a08      	ldr	r2, [sp, #32]
 8012736:	4650      	mov	r0, sl
 8012738:	4659      	mov	r1, fp
 801273a:	b1bb      	cbz	r3, 801276c <_strtod_l+0x914>
 801273c:	f7ff fb6e 	bl	8011e1c <sulp>
 8012740:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8012744:	ec53 2b10 	vmov	r2, r3, d0
 8012748:	f7ed fdb8 	bl	80002bc <__adddf3>
 801274c:	4682      	mov	sl, r0
 801274e:	468b      	mov	fp, r1
 8012750:	e7de      	b.n	8012710 <_strtod_l+0x8b8>
 8012752:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8012756:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 801275a:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 801275e:	f04f 3aff 	mov.w	sl, #4294967295
 8012762:	e7d5      	b.n	8012710 <_strtod_l+0x8b8>
 8012764:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8012766:	ea13 0f0a 	tst.w	r3, sl
 801276a:	e7e1      	b.n	8012730 <_strtod_l+0x8d8>
 801276c:	f7ff fb56 	bl	8011e1c <sulp>
 8012770:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8012774:	ec53 2b10 	vmov	r2, r3, d0
 8012778:	f7ed fd9e 	bl	80002b8 <__aeabi_dsub>
 801277c:	2200      	movs	r2, #0
 801277e:	2300      	movs	r3, #0
 8012780:	4682      	mov	sl, r0
 8012782:	468b      	mov	fp, r1
 8012784:	f7ee f9b8 	bl	8000af8 <__aeabi_dcmpeq>
 8012788:	2800      	cmp	r0, #0
 801278a:	d0c1      	beq.n	8012710 <_strtod_l+0x8b8>
 801278c:	e61a      	b.n	80123c4 <_strtod_l+0x56c>
 801278e:	4641      	mov	r1, r8
 8012790:	4620      	mov	r0, r4
 8012792:	f7ff facd 	bl	8011d30 <__ratio>
 8012796:	ec57 6b10 	vmov	r6, r7, d0
 801279a:	2200      	movs	r2, #0
 801279c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80127a0:	4630      	mov	r0, r6
 80127a2:	4639      	mov	r1, r7
 80127a4:	f7ee f9bc 	bl	8000b20 <__aeabi_dcmple>
 80127a8:	2800      	cmp	r0, #0
 80127aa:	d06f      	beq.n	801288c <_strtod_l+0xa34>
 80127ac:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80127ae:	2b00      	cmp	r3, #0
 80127b0:	d17a      	bne.n	80128a8 <_strtod_l+0xa50>
 80127b2:	f1ba 0f00 	cmp.w	sl, #0
 80127b6:	d158      	bne.n	801286a <_strtod_l+0xa12>
 80127b8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80127ba:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80127be:	2b00      	cmp	r3, #0
 80127c0:	d15a      	bne.n	8012878 <_strtod_l+0xa20>
 80127c2:	4b64      	ldr	r3, [pc, #400]	@ (8012954 <_strtod_l+0xafc>)
 80127c4:	2200      	movs	r2, #0
 80127c6:	4630      	mov	r0, r6
 80127c8:	4639      	mov	r1, r7
 80127ca:	f7ee f99f 	bl	8000b0c <__aeabi_dcmplt>
 80127ce:	2800      	cmp	r0, #0
 80127d0:	d159      	bne.n	8012886 <_strtod_l+0xa2e>
 80127d2:	4630      	mov	r0, r6
 80127d4:	4639      	mov	r1, r7
 80127d6:	4b60      	ldr	r3, [pc, #384]	@ (8012958 <_strtod_l+0xb00>)
 80127d8:	2200      	movs	r2, #0
 80127da:	f7ed ff25 	bl	8000628 <__aeabi_dmul>
 80127de:	4606      	mov	r6, r0
 80127e0:	460f      	mov	r7, r1
 80127e2:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 80127e6:	9606      	str	r6, [sp, #24]
 80127e8:	9307      	str	r3, [sp, #28]
 80127ea:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80127ee:	4d57      	ldr	r5, [pc, #348]	@ (801294c <_strtod_l+0xaf4>)
 80127f0:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 80127f4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80127f6:	401d      	ands	r5, r3
 80127f8:	4b58      	ldr	r3, [pc, #352]	@ (801295c <_strtod_l+0xb04>)
 80127fa:	429d      	cmp	r5, r3
 80127fc:	f040 80b2 	bne.w	8012964 <_strtod_l+0xb0c>
 8012800:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8012802:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 8012806:	ec4b ab10 	vmov	d0, sl, fp
 801280a:	f7ff f9c9 	bl	8011ba0 <__ulp>
 801280e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8012812:	ec51 0b10 	vmov	r0, r1, d0
 8012816:	f7ed ff07 	bl	8000628 <__aeabi_dmul>
 801281a:	4652      	mov	r2, sl
 801281c:	465b      	mov	r3, fp
 801281e:	f7ed fd4d 	bl	80002bc <__adddf3>
 8012822:	460b      	mov	r3, r1
 8012824:	4949      	ldr	r1, [pc, #292]	@ (801294c <_strtod_l+0xaf4>)
 8012826:	4a4e      	ldr	r2, [pc, #312]	@ (8012960 <_strtod_l+0xb08>)
 8012828:	4019      	ands	r1, r3
 801282a:	4291      	cmp	r1, r2
 801282c:	4682      	mov	sl, r0
 801282e:	d942      	bls.n	80128b6 <_strtod_l+0xa5e>
 8012830:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8012832:	4b47      	ldr	r3, [pc, #284]	@ (8012950 <_strtod_l+0xaf8>)
 8012834:	429a      	cmp	r2, r3
 8012836:	d103      	bne.n	8012840 <_strtod_l+0x9e8>
 8012838:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801283a:	3301      	adds	r3, #1
 801283c:	f43f ad2f 	beq.w	801229e <_strtod_l+0x446>
 8012840:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 8012950 <_strtod_l+0xaf8>
 8012844:	f04f 3aff 	mov.w	sl, #4294967295
 8012848:	991a      	ldr	r1, [sp, #104]	@ 0x68
 801284a:	9805      	ldr	r0, [sp, #20]
 801284c:	f7fe fe7c 	bl	8011548 <_Bfree>
 8012850:	9805      	ldr	r0, [sp, #20]
 8012852:	4649      	mov	r1, r9
 8012854:	f7fe fe78 	bl	8011548 <_Bfree>
 8012858:	9805      	ldr	r0, [sp, #20]
 801285a:	4641      	mov	r1, r8
 801285c:	f7fe fe74 	bl	8011548 <_Bfree>
 8012860:	9805      	ldr	r0, [sp, #20]
 8012862:	4621      	mov	r1, r4
 8012864:	f7fe fe70 	bl	8011548 <_Bfree>
 8012868:	e619      	b.n	801249e <_strtod_l+0x646>
 801286a:	f1ba 0f01 	cmp.w	sl, #1
 801286e:	d103      	bne.n	8012878 <_strtod_l+0xa20>
 8012870:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8012872:	2b00      	cmp	r3, #0
 8012874:	f43f ada6 	beq.w	80123c4 <_strtod_l+0x56c>
 8012878:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 8012928 <_strtod_l+0xad0>
 801287c:	4f35      	ldr	r7, [pc, #212]	@ (8012954 <_strtod_l+0xafc>)
 801287e:	ed8d 7b06 	vstr	d7, [sp, #24]
 8012882:	2600      	movs	r6, #0
 8012884:	e7b1      	b.n	80127ea <_strtod_l+0x992>
 8012886:	4f34      	ldr	r7, [pc, #208]	@ (8012958 <_strtod_l+0xb00>)
 8012888:	2600      	movs	r6, #0
 801288a:	e7aa      	b.n	80127e2 <_strtod_l+0x98a>
 801288c:	4b32      	ldr	r3, [pc, #200]	@ (8012958 <_strtod_l+0xb00>)
 801288e:	4630      	mov	r0, r6
 8012890:	4639      	mov	r1, r7
 8012892:	2200      	movs	r2, #0
 8012894:	f7ed fec8 	bl	8000628 <__aeabi_dmul>
 8012898:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801289a:	4606      	mov	r6, r0
 801289c:	460f      	mov	r7, r1
 801289e:	2b00      	cmp	r3, #0
 80128a0:	d09f      	beq.n	80127e2 <_strtod_l+0x98a>
 80128a2:	e9cd 6706 	strd	r6, r7, [sp, #24]
 80128a6:	e7a0      	b.n	80127ea <_strtod_l+0x992>
 80128a8:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8012930 <_strtod_l+0xad8>
 80128ac:	ed8d 7b06 	vstr	d7, [sp, #24]
 80128b0:	ec57 6b17 	vmov	r6, r7, d7
 80128b4:	e799      	b.n	80127ea <_strtod_l+0x992>
 80128b6:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 80128ba:	9b08      	ldr	r3, [sp, #32]
 80128bc:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 80128c0:	2b00      	cmp	r3, #0
 80128c2:	d1c1      	bne.n	8012848 <_strtod_l+0x9f0>
 80128c4:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80128c8:	0d1b      	lsrs	r3, r3, #20
 80128ca:	051b      	lsls	r3, r3, #20
 80128cc:	429d      	cmp	r5, r3
 80128ce:	d1bb      	bne.n	8012848 <_strtod_l+0x9f0>
 80128d0:	4630      	mov	r0, r6
 80128d2:	4639      	mov	r1, r7
 80128d4:	f7ee fa08 	bl	8000ce8 <__aeabi_d2lz>
 80128d8:	f7ed fe78 	bl	80005cc <__aeabi_l2d>
 80128dc:	4602      	mov	r2, r0
 80128de:	460b      	mov	r3, r1
 80128e0:	4630      	mov	r0, r6
 80128e2:	4639      	mov	r1, r7
 80128e4:	f7ed fce8 	bl	80002b8 <__aeabi_dsub>
 80128e8:	460b      	mov	r3, r1
 80128ea:	4602      	mov	r2, r0
 80128ec:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 80128f0:	f3cb 0613 	ubfx	r6, fp, #0, #20
 80128f4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80128f6:	ea46 060a 	orr.w	r6, r6, sl
 80128fa:	431e      	orrs	r6, r3
 80128fc:	d06f      	beq.n	80129de <_strtod_l+0xb86>
 80128fe:	a30e      	add	r3, pc, #56	@ (adr r3, 8012938 <_strtod_l+0xae0>)
 8012900:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012904:	f7ee f902 	bl	8000b0c <__aeabi_dcmplt>
 8012908:	2800      	cmp	r0, #0
 801290a:	f47f acd3 	bne.w	80122b4 <_strtod_l+0x45c>
 801290e:	a30c      	add	r3, pc, #48	@ (adr r3, 8012940 <_strtod_l+0xae8>)
 8012910:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012914:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8012918:	f7ee f916 	bl	8000b48 <__aeabi_dcmpgt>
 801291c:	2800      	cmp	r0, #0
 801291e:	d093      	beq.n	8012848 <_strtod_l+0x9f0>
 8012920:	e4c8      	b.n	80122b4 <_strtod_l+0x45c>
 8012922:	bf00      	nop
 8012924:	f3af 8000 	nop.w
 8012928:	00000000 	.word	0x00000000
 801292c:	bff00000 	.word	0xbff00000
 8012930:	00000000 	.word	0x00000000
 8012934:	3ff00000 	.word	0x3ff00000
 8012938:	94a03595 	.word	0x94a03595
 801293c:	3fdfffff 	.word	0x3fdfffff
 8012940:	35afe535 	.word	0x35afe535
 8012944:	3fe00000 	.word	0x3fe00000
 8012948:	000fffff 	.word	0x000fffff
 801294c:	7ff00000 	.word	0x7ff00000
 8012950:	7fefffff 	.word	0x7fefffff
 8012954:	3ff00000 	.word	0x3ff00000
 8012958:	3fe00000 	.word	0x3fe00000
 801295c:	7fe00000 	.word	0x7fe00000
 8012960:	7c9fffff 	.word	0x7c9fffff
 8012964:	9b08      	ldr	r3, [sp, #32]
 8012966:	b323      	cbz	r3, 80129b2 <_strtod_l+0xb5a>
 8012968:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 801296c:	d821      	bhi.n	80129b2 <_strtod_l+0xb5a>
 801296e:	a328      	add	r3, pc, #160	@ (adr r3, 8012a10 <_strtod_l+0xbb8>)
 8012970:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012974:	4630      	mov	r0, r6
 8012976:	4639      	mov	r1, r7
 8012978:	f7ee f8d2 	bl	8000b20 <__aeabi_dcmple>
 801297c:	b1a0      	cbz	r0, 80129a8 <_strtod_l+0xb50>
 801297e:	4639      	mov	r1, r7
 8012980:	4630      	mov	r0, r6
 8012982:	f7ee f929 	bl	8000bd8 <__aeabi_d2uiz>
 8012986:	2801      	cmp	r0, #1
 8012988:	bf38      	it	cc
 801298a:	2001      	movcc	r0, #1
 801298c:	f7ed fdd2 	bl	8000534 <__aeabi_ui2d>
 8012990:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8012992:	4606      	mov	r6, r0
 8012994:	460f      	mov	r7, r1
 8012996:	b9fb      	cbnz	r3, 80129d8 <_strtod_l+0xb80>
 8012998:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 801299c:	9014      	str	r0, [sp, #80]	@ 0x50
 801299e:	9315      	str	r3, [sp, #84]	@ 0x54
 80129a0:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 80129a4:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 80129a8:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80129aa:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 80129ae:	1b5b      	subs	r3, r3, r5
 80129b0:	9311      	str	r3, [sp, #68]	@ 0x44
 80129b2:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 80129b6:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 80129ba:	f7ff f8f1 	bl	8011ba0 <__ulp>
 80129be:	4650      	mov	r0, sl
 80129c0:	ec53 2b10 	vmov	r2, r3, d0
 80129c4:	4659      	mov	r1, fp
 80129c6:	f7ed fe2f 	bl	8000628 <__aeabi_dmul>
 80129ca:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 80129ce:	f7ed fc75 	bl	80002bc <__adddf3>
 80129d2:	4682      	mov	sl, r0
 80129d4:	468b      	mov	fp, r1
 80129d6:	e770      	b.n	80128ba <_strtod_l+0xa62>
 80129d8:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 80129dc:	e7e0      	b.n	80129a0 <_strtod_l+0xb48>
 80129de:	a30e      	add	r3, pc, #56	@ (adr r3, 8012a18 <_strtod_l+0xbc0>)
 80129e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80129e4:	f7ee f892 	bl	8000b0c <__aeabi_dcmplt>
 80129e8:	e798      	b.n	801291c <_strtod_l+0xac4>
 80129ea:	2300      	movs	r3, #0
 80129ec:	930e      	str	r3, [sp, #56]	@ 0x38
 80129ee:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 80129f0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80129f2:	6013      	str	r3, [r2, #0]
 80129f4:	f7ff ba6d 	b.w	8011ed2 <_strtod_l+0x7a>
 80129f8:	2a65      	cmp	r2, #101	@ 0x65
 80129fa:	f43f ab68 	beq.w	80120ce <_strtod_l+0x276>
 80129fe:	2a45      	cmp	r2, #69	@ 0x45
 8012a00:	f43f ab65 	beq.w	80120ce <_strtod_l+0x276>
 8012a04:	2301      	movs	r3, #1
 8012a06:	f7ff bba0 	b.w	801214a <_strtod_l+0x2f2>
 8012a0a:	bf00      	nop
 8012a0c:	f3af 8000 	nop.w
 8012a10:	ffc00000 	.word	0xffc00000
 8012a14:	41dfffff 	.word	0x41dfffff
 8012a18:	94a03595 	.word	0x94a03595
 8012a1c:	3fcfffff 	.word	0x3fcfffff

08012a20 <_strtod_r>:
 8012a20:	4b01      	ldr	r3, [pc, #4]	@ (8012a28 <_strtod_r+0x8>)
 8012a22:	f7ff ba19 	b.w	8011e58 <_strtod_l>
 8012a26:	bf00      	nop
 8012a28:	2000d190 	.word	0x2000d190

08012a2c <_strtol_l.isra.0>:
 8012a2c:	2b24      	cmp	r3, #36	@ 0x24
 8012a2e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012a32:	4686      	mov	lr, r0
 8012a34:	4690      	mov	r8, r2
 8012a36:	d801      	bhi.n	8012a3c <_strtol_l.isra.0+0x10>
 8012a38:	2b01      	cmp	r3, #1
 8012a3a:	d106      	bne.n	8012a4a <_strtol_l.isra.0+0x1e>
 8012a3c:	f7fd fd8c 	bl	8010558 <__errno>
 8012a40:	2316      	movs	r3, #22
 8012a42:	6003      	str	r3, [r0, #0]
 8012a44:	2000      	movs	r0, #0
 8012a46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012a4a:	4834      	ldr	r0, [pc, #208]	@ (8012b1c <_strtol_l.isra.0+0xf0>)
 8012a4c:	460d      	mov	r5, r1
 8012a4e:	462a      	mov	r2, r5
 8012a50:	f815 4b01 	ldrb.w	r4, [r5], #1
 8012a54:	5d06      	ldrb	r6, [r0, r4]
 8012a56:	f016 0608 	ands.w	r6, r6, #8
 8012a5a:	d1f8      	bne.n	8012a4e <_strtol_l.isra.0+0x22>
 8012a5c:	2c2d      	cmp	r4, #45	@ 0x2d
 8012a5e:	d110      	bne.n	8012a82 <_strtol_l.isra.0+0x56>
 8012a60:	782c      	ldrb	r4, [r5, #0]
 8012a62:	2601      	movs	r6, #1
 8012a64:	1c95      	adds	r5, r2, #2
 8012a66:	f033 0210 	bics.w	r2, r3, #16
 8012a6a:	d115      	bne.n	8012a98 <_strtol_l.isra.0+0x6c>
 8012a6c:	2c30      	cmp	r4, #48	@ 0x30
 8012a6e:	d10d      	bne.n	8012a8c <_strtol_l.isra.0+0x60>
 8012a70:	782a      	ldrb	r2, [r5, #0]
 8012a72:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8012a76:	2a58      	cmp	r2, #88	@ 0x58
 8012a78:	d108      	bne.n	8012a8c <_strtol_l.isra.0+0x60>
 8012a7a:	786c      	ldrb	r4, [r5, #1]
 8012a7c:	3502      	adds	r5, #2
 8012a7e:	2310      	movs	r3, #16
 8012a80:	e00a      	b.n	8012a98 <_strtol_l.isra.0+0x6c>
 8012a82:	2c2b      	cmp	r4, #43	@ 0x2b
 8012a84:	bf04      	itt	eq
 8012a86:	782c      	ldrbeq	r4, [r5, #0]
 8012a88:	1c95      	addeq	r5, r2, #2
 8012a8a:	e7ec      	b.n	8012a66 <_strtol_l.isra.0+0x3a>
 8012a8c:	2b00      	cmp	r3, #0
 8012a8e:	d1f6      	bne.n	8012a7e <_strtol_l.isra.0+0x52>
 8012a90:	2c30      	cmp	r4, #48	@ 0x30
 8012a92:	bf14      	ite	ne
 8012a94:	230a      	movne	r3, #10
 8012a96:	2308      	moveq	r3, #8
 8012a98:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8012a9c:	f10c 3cff 	add.w	ip, ip, #4294967295
 8012aa0:	2200      	movs	r2, #0
 8012aa2:	fbbc f9f3 	udiv	r9, ip, r3
 8012aa6:	4610      	mov	r0, r2
 8012aa8:	fb03 ca19 	mls	sl, r3, r9, ip
 8012aac:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8012ab0:	2f09      	cmp	r7, #9
 8012ab2:	d80f      	bhi.n	8012ad4 <_strtol_l.isra.0+0xa8>
 8012ab4:	463c      	mov	r4, r7
 8012ab6:	42a3      	cmp	r3, r4
 8012ab8:	dd1b      	ble.n	8012af2 <_strtol_l.isra.0+0xc6>
 8012aba:	1c57      	adds	r7, r2, #1
 8012abc:	d007      	beq.n	8012ace <_strtol_l.isra.0+0xa2>
 8012abe:	4581      	cmp	r9, r0
 8012ac0:	d314      	bcc.n	8012aec <_strtol_l.isra.0+0xc0>
 8012ac2:	d101      	bne.n	8012ac8 <_strtol_l.isra.0+0x9c>
 8012ac4:	45a2      	cmp	sl, r4
 8012ac6:	db11      	blt.n	8012aec <_strtol_l.isra.0+0xc0>
 8012ac8:	fb00 4003 	mla	r0, r0, r3, r4
 8012acc:	2201      	movs	r2, #1
 8012ace:	f815 4b01 	ldrb.w	r4, [r5], #1
 8012ad2:	e7eb      	b.n	8012aac <_strtol_l.isra.0+0x80>
 8012ad4:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8012ad8:	2f19      	cmp	r7, #25
 8012ada:	d801      	bhi.n	8012ae0 <_strtol_l.isra.0+0xb4>
 8012adc:	3c37      	subs	r4, #55	@ 0x37
 8012ade:	e7ea      	b.n	8012ab6 <_strtol_l.isra.0+0x8a>
 8012ae0:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8012ae4:	2f19      	cmp	r7, #25
 8012ae6:	d804      	bhi.n	8012af2 <_strtol_l.isra.0+0xc6>
 8012ae8:	3c57      	subs	r4, #87	@ 0x57
 8012aea:	e7e4      	b.n	8012ab6 <_strtol_l.isra.0+0x8a>
 8012aec:	f04f 32ff 	mov.w	r2, #4294967295
 8012af0:	e7ed      	b.n	8012ace <_strtol_l.isra.0+0xa2>
 8012af2:	1c53      	adds	r3, r2, #1
 8012af4:	d108      	bne.n	8012b08 <_strtol_l.isra.0+0xdc>
 8012af6:	2322      	movs	r3, #34	@ 0x22
 8012af8:	f8ce 3000 	str.w	r3, [lr]
 8012afc:	4660      	mov	r0, ip
 8012afe:	f1b8 0f00 	cmp.w	r8, #0
 8012b02:	d0a0      	beq.n	8012a46 <_strtol_l.isra.0+0x1a>
 8012b04:	1e69      	subs	r1, r5, #1
 8012b06:	e006      	b.n	8012b16 <_strtol_l.isra.0+0xea>
 8012b08:	b106      	cbz	r6, 8012b0c <_strtol_l.isra.0+0xe0>
 8012b0a:	4240      	negs	r0, r0
 8012b0c:	f1b8 0f00 	cmp.w	r8, #0
 8012b10:	d099      	beq.n	8012a46 <_strtol_l.isra.0+0x1a>
 8012b12:	2a00      	cmp	r2, #0
 8012b14:	d1f6      	bne.n	8012b04 <_strtol_l.isra.0+0xd8>
 8012b16:	f8c8 1000 	str.w	r1, [r8]
 8012b1a:	e794      	b.n	8012a46 <_strtol_l.isra.0+0x1a>
 8012b1c:	08015aa1 	.word	0x08015aa1

08012b20 <_strtol_r>:
 8012b20:	f7ff bf84 	b.w	8012a2c <_strtol_l.isra.0>

08012b24 <__ssputs_r>:
 8012b24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012b28:	688e      	ldr	r6, [r1, #8]
 8012b2a:	461f      	mov	r7, r3
 8012b2c:	42be      	cmp	r6, r7
 8012b2e:	680b      	ldr	r3, [r1, #0]
 8012b30:	4682      	mov	sl, r0
 8012b32:	460c      	mov	r4, r1
 8012b34:	4690      	mov	r8, r2
 8012b36:	d82d      	bhi.n	8012b94 <__ssputs_r+0x70>
 8012b38:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8012b3c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8012b40:	d026      	beq.n	8012b90 <__ssputs_r+0x6c>
 8012b42:	6965      	ldr	r5, [r4, #20]
 8012b44:	6909      	ldr	r1, [r1, #16]
 8012b46:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8012b4a:	eba3 0901 	sub.w	r9, r3, r1
 8012b4e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8012b52:	1c7b      	adds	r3, r7, #1
 8012b54:	444b      	add	r3, r9
 8012b56:	106d      	asrs	r5, r5, #1
 8012b58:	429d      	cmp	r5, r3
 8012b5a:	bf38      	it	cc
 8012b5c:	461d      	movcc	r5, r3
 8012b5e:	0553      	lsls	r3, r2, #21
 8012b60:	d527      	bpl.n	8012bb2 <__ssputs_r+0x8e>
 8012b62:	4629      	mov	r1, r5
 8012b64:	f7fe fc24 	bl	80113b0 <_malloc_r>
 8012b68:	4606      	mov	r6, r0
 8012b6a:	b360      	cbz	r0, 8012bc6 <__ssputs_r+0xa2>
 8012b6c:	6921      	ldr	r1, [r4, #16]
 8012b6e:	464a      	mov	r2, r9
 8012b70:	f7fd fd1f 	bl	80105b2 <memcpy>
 8012b74:	89a3      	ldrh	r3, [r4, #12]
 8012b76:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8012b7a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8012b7e:	81a3      	strh	r3, [r4, #12]
 8012b80:	6126      	str	r6, [r4, #16]
 8012b82:	6165      	str	r5, [r4, #20]
 8012b84:	444e      	add	r6, r9
 8012b86:	eba5 0509 	sub.w	r5, r5, r9
 8012b8a:	6026      	str	r6, [r4, #0]
 8012b8c:	60a5      	str	r5, [r4, #8]
 8012b8e:	463e      	mov	r6, r7
 8012b90:	42be      	cmp	r6, r7
 8012b92:	d900      	bls.n	8012b96 <__ssputs_r+0x72>
 8012b94:	463e      	mov	r6, r7
 8012b96:	6820      	ldr	r0, [r4, #0]
 8012b98:	4632      	mov	r2, r6
 8012b9a:	4641      	mov	r1, r8
 8012b9c:	f000 fad0 	bl	8013140 <memmove>
 8012ba0:	68a3      	ldr	r3, [r4, #8]
 8012ba2:	1b9b      	subs	r3, r3, r6
 8012ba4:	60a3      	str	r3, [r4, #8]
 8012ba6:	6823      	ldr	r3, [r4, #0]
 8012ba8:	4433      	add	r3, r6
 8012baa:	6023      	str	r3, [r4, #0]
 8012bac:	2000      	movs	r0, #0
 8012bae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012bb2:	462a      	mov	r2, r5
 8012bb4:	f000 fe91 	bl	80138da <_realloc_r>
 8012bb8:	4606      	mov	r6, r0
 8012bba:	2800      	cmp	r0, #0
 8012bbc:	d1e0      	bne.n	8012b80 <__ssputs_r+0x5c>
 8012bbe:	6921      	ldr	r1, [r4, #16]
 8012bc0:	4650      	mov	r0, sl
 8012bc2:	f7fe fb81 	bl	80112c8 <_free_r>
 8012bc6:	230c      	movs	r3, #12
 8012bc8:	f8ca 3000 	str.w	r3, [sl]
 8012bcc:	89a3      	ldrh	r3, [r4, #12]
 8012bce:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8012bd2:	81a3      	strh	r3, [r4, #12]
 8012bd4:	f04f 30ff 	mov.w	r0, #4294967295
 8012bd8:	e7e9      	b.n	8012bae <__ssputs_r+0x8a>
	...

08012bdc <_svfiprintf_r>:
 8012bdc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012be0:	4698      	mov	r8, r3
 8012be2:	898b      	ldrh	r3, [r1, #12]
 8012be4:	061b      	lsls	r3, r3, #24
 8012be6:	b09d      	sub	sp, #116	@ 0x74
 8012be8:	4607      	mov	r7, r0
 8012bea:	460d      	mov	r5, r1
 8012bec:	4614      	mov	r4, r2
 8012bee:	d510      	bpl.n	8012c12 <_svfiprintf_r+0x36>
 8012bf0:	690b      	ldr	r3, [r1, #16]
 8012bf2:	b973      	cbnz	r3, 8012c12 <_svfiprintf_r+0x36>
 8012bf4:	2140      	movs	r1, #64	@ 0x40
 8012bf6:	f7fe fbdb 	bl	80113b0 <_malloc_r>
 8012bfa:	6028      	str	r0, [r5, #0]
 8012bfc:	6128      	str	r0, [r5, #16]
 8012bfe:	b930      	cbnz	r0, 8012c0e <_svfiprintf_r+0x32>
 8012c00:	230c      	movs	r3, #12
 8012c02:	603b      	str	r3, [r7, #0]
 8012c04:	f04f 30ff 	mov.w	r0, #4294967295
 8012c08:	b01d      	add	sp, #116	@ 0x74
 8012c0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012c0e:	2340      	movs	r3, #64	@ 0x40
 8012c10:	616b      	str	r3, [r5, #20]
 8012c12:	2300      	movs	r3, #0
 8012c14:	9309      	str	r3, [sp, #36]	@ 0x24
 8012c16:	2320      	movs	r3, #32
 8012c18:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8012c1c:	f8cd 800c 	str.w	r8, [sp, #12]
 8012c20:	2330      	movs	r3, #48	@ 0x30
 8012c22:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8012dc0 <_svfiprintf_r+0x1e4>
 8012c26:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8012c2a:	f04f 0901 	mov.w	r9, #1
 8012c2e:	4623      	mov	r3, r4
 8012c30:	469a      	mov	sl, r3
 8012c32:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012c36:	b10a      	cbz	r2, 8012c3c <_svfiprintf_r+0x60>
 8012c38:	2a25      	cmp	r2, #37	@ 0x25
 8012c3a:	d1f9      	bne.n	8012c30 <_svfiprintf_r+0x54>
 8012c3c:	ebba 0b04 	subs.w	fp, sl, r4
 8012c40:	d00b      	beq.n	8012c5a <_svfiprintf_r+0x7e>
 8012c42:	465b      	mov	r3, fp
 8012c44:	4622      	mov	r2, r4
 8012c46:	4629      	mov	r1, r5
 8012c48:	4638      	mov	r0, r7
 8012c4a:	f7ff ff6b 	bl	8012b24 <__ssputs_r>
 8012c4e:	3001      	adds	r0, #1
 8012c50:	f000 80a7 	beq.w	8012da2 <_svfiprintf_r+0x1c6>
 8012c54:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8012c56:	445a      	add	r2, fp
 8012c58:	9209      	str	r2, [sp, #36]	@ 0x24
 8012c5a:	f89a 3000 	ldrb.w	r3, [sl]
 8012c5e:	2b00      	cmp	r3, #0
 8012c60:	f000 809f 	beq.w	8012da2 <_svfiprintf_r+0x1c6>
 8012c64:	2300      	movs	r3, #0
 8012c66:	f04f 32ff 	mov.w	r2, #4294967295
 8012c6a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8012c6e:	f10a 0a01 	add.w	sl, sl, #1
 8012c72:	9304      	str	r3, [sp, #16]
 8012c74:	9307      	str	r3, [sp, #28]
 8012c76:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8012c7a:	931a      	str	r3, [sp, #104]	@ 0x68
 8012c7c:	4654      	mov	r4, sl
 8012c7e:	2205      	movs	r2, #5
 8012c80:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012c84:	484e      	ldr	r0, [pc, #312]	@ (8012dc0 <_svfiprintf_r+0x1e4>)
 8012c86:	f7ed fabb 	bl	8000200 <memchr>
 8012c8a:	9a04      	ldr	r2, [sp, #16]
 8012c8c:	b9d8      	cbnz	r0, 8012cc6 <_svfiprintf_r+0xea>
 8012c8e:	06d0      	lsls	r0, r2, #27
 8012c90:	bf44      	itt	mi
 8012c92:	2320      	movmi	r3, #32
 8012c94:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8012c98:	0711      	lsls	r1, r2, #28
 8012c9a:	bf44      	itt	mi
 8012c9c:	232b      	movmi	r3, #43	@ 0x2b
 8012c9e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8012ca2:	f89a 3000 	ldrb.w	r3, [sl]
 8012ca6:	2b2a      	cmp	r3, #42	@ 0x2a
 8012ca8:	d015      	beq.n	8012cd6 <_svfiprintf_r+0xfa>
 8012caa:	9a07      	ldr	r2, [sp, #28]
 8012cac:	4654      	mov	r4, sl
 8012cae:	2000      	movs	r0, #0
 8012cb0:	f04f 0c0a 	mov.w	ip, #10
 8012cb4:	4621      	mov	r1, r4
 8012cb6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8012cba:	3b30      	subs	r3, #48	@ 0x30
 8012cbc:	2b09      	cmp	r3, #9
 8012cbe:	d94b      	bls.n	8012d58 <_svfiprintf_r+0x17c>
 8012cc0:	b1b0      	cbz	r0, 8012cf0 <_svfiprintf_r+0x114>
 8012cc2:	9207      	str	r2, [sp, #28]
 8012cc4:	e014      	b.n	8012cf0 <_svfiprintf_r+0x114>
 8012cc6:	eba0 0308 	sub.w	r3, r0, r8
 8012cca:	fa09 f303 	lsl.w	r3, r9, r3
 8012cce:	4313      	orrs	r3, r2
 8012cd0:	9304      	str	r3, [sp, #16]
 8012cd2:	46a2      	mov	sl, r4
 8012cd4:	e7d2      	b.n	8012c7c <_svfiprintf_r+0xa0>
 8012cd6:	9b03      	ldr	r3, [sp, #12]
 8012cd8:	1d19      	adds	r1, r3, #4
 8012cda:	681b      	ldr	r3, [r3, #0]
 8012cdc:	9103      	str	r1, [sp, #12]
 8012cde:	2b00      	cmp	r3, #0
 8012ce0:	bfbb      	ittet	lt
 8012ce2:	425b      	neglt	r3, r3
 8012ce4:	f042 0202 	orrlt.w	r2, r2, #2
 8012ce8:	9307      	strge	r3, [sp, #28]
 8012cea:	9307      	strlt	r3, [sp, #28]
 8012cec:	bfb8      	it	lt
 8012cee:	9204      	strlt	r2, [sp, #16]
 8012cf0:	7823      	ldrb	r3, [r4, #0]
 8012cf2:	2b2e      	cmp	r3, #46	@ 0x2e
 8012cf4:	d10a      	bne.n	8012d0c <_svfiprintf_r+0x130>
 8012cf6:	7863      	ldrb	r3, [r4, #1]
 8012cf8:	2b2a      	cmp	r3, #42	@ 0x2a
 8012cfa:	d132      	bne.n	8012d62 <_svfiprintf_r+0x186>
 8012cfc:	9b03      	ldr	r3, [sp, #12]
 8012cfe:	1d1a      	adds	r2, r3, #4
 8012d00:	681b      	ldr	r3, [r3, #0]
 8012d02:	9203      	str	r2, [sp, #12]
 8012d04:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8012d08:	3402      	adds	r4, #2
 8012d0a:	9305      	str	r3, [sp, #20]
 8012d0c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8012dd0 <_svfiprintf_r+0x1f4>
 8012d10:	7821      	ldrb	r1, [r4, #0]
 8012d12:	2203      	movs	r2, #3
 8012d14:	4650      	mov	r0, sl
 8012d16:	f7ed fa73 	bl	8000200 <memchr>
 8012d1a:	b138      	cbz	r0, 8012d2c <_svfiprintf_r+0x150>
 8012d1c:	9b04      	ldr	r3, [sp, #16]
 8012d1e:	eba0 000a 	sub.w	r0, r0, sl
 8012d22:	2240      	movs	r2, #64	@ 0x40
 8012d24:	4082      	lsls	r2, r0
 8012d26:	4313      	orrs	r3, r2
 8012d28:	3401      	adds	r4, #1
 8012d2a:	9304      	str	r3, [sp, #16]
 8012d2c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012d30:	4824      	ldr	r0, [pc, #144]	@ (8012dc4 <_svfiprintf_r+0x1e8>)
 8012d32:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8012d36:	2206      	movs	r2, #6
 8012d38:	f7ed fa62 	bl	8000200 <memchr>
 8012d3c:	2800      	cmp	r0, #0
 8012d3e:	d036      	beq.n	8012dae <_svfiprintf_r+0x1d2>
 8012d40:	4b21      	ldr	r3, [pc, #132]	@ (8012dc8 <_svfiprintf_r+0x1ec>)
 8012d42:	bb1b      	cbnz	r3, 8012d8c <_svfiprintf_r+0x1b0>
 8012d44:	9b03      	ldr	r3, [sp, #12]
 8012d46:	3307      	adds	r3, #7
 8012d48:	f023 0307 	bic.w	r3, r3, #7
 8012d4c:	3308      	adds	r3, #8
 8012d4e:	9303      	str	r3, [sp, #12]
 8012d50:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012d52:	4433      	add	r3, r6
 8012d54:	9309      	str	r3, [sp, #36]	@ 0x24
 8012d56:	e76a      	b.n	8012c2e <_svfiprintf_r+0x52>
 8012d58:	fb0c 3202 	mla	r2, ip, r2, r3
 8012d5c:	460c      	mov	r4, r1
 8012d5e:	2001      	movs	r0, #1
 8012d60:	e7a8      	b.n	8012cb4 <_svfiprintf_r+0xd8>
 8012d62:	2300      	movs	r3, #0
 8012d64:	3401      	adds	r4, #1
 8012d66:	9305      	str	r3, [sp, #20]
 8012d68:	4619      	mov	r1, r3
 8012d6a:	f04f 0c0a 	mov.w	ip, #10
 8012d6e:	4620      	mov	r0, r4
 8012d70:	f810 2b01 	ldrb.w	r2, [r0], #1
 8012d74:	3a30      	subs	r2, #48	@ 0x30
 8012d76:	2a09      	cmp	r2, #9
 8012d78:	d903      	bls.n	8012d82 <_svfiprintf_r+0x1a6>
 8012d7a:	2b00      	cmp	r3, #0
 8012d7c:	d0c6      	beq.n	8012d0c <_svfiprintf_r+0x130>
 8012d7e:	9105      	str	r1, [sp, #20]
 8012d80:	e7c4      	b.n	8012d0c <_svfiprintf_r+0x130>
 8012d82:	fb0c 2101 	mla	r1, ip, r1, r2
 8012d86:	4604      	mov	r4, r0
 8012d88:	2301      	movs	r3, #1
 8012d8a:	e7f0      	b.n	8012d6e <_svfiprintf_r+0x192>
 8012d8c:	ab03      	add	r3, sp, #12
 8012d8e:	9300      	str	r3, [sp, #0]
 8012d90:	462a      	mov	r2, r5
 8012d92:	4b0e      	ldr	r3, [pc, #56]	@ (8012dcc <_svfiprintf_r+0x1f0>)
 8012d94:	a904      	add	r1, sp, #16
 8012d96:	4638      	mov	r0, r7
 8012d98:	f7fc faa6 	bl	800f2e8 <_printf_float>
 8012d9c:	1c42      	adds	r2, r0, #1
 8012d9e:	4606      	mov	r6, r0
 8012da0:	d1d6      	bne.n	8012d50 <_svfiprintf_r+0x174>
 8012da2:	89ab      	ldrh	r3, [r5, #12]
 8012da4:	065b      	lsls	r3, r3, #25
 8012da6:	f53f af2d 	bmi.w	8012c04 <_svfiprintf_r+0x28>
 8012daa:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8012dac:	e72c      	b.n	8012c08 <_svfiprintf_r+0x2c>
 8012dae:	ab03      	add	r3, sp, #12
 8012db0:	9300      	str	r3, [sp, #0]
 8012db2:	462a      	mov	r2, r5
 8012db4:	4b05      	ldr	r3, [pc, #20]	@ (8012dcc <_svfiprintf_r+0x1f0>)
 8012db6:	a904      	add	r1, sp, #16
 8012db8:	4638      	mov	r0, r7
 8012dba:	f7fc fd2d 	bl	800f818 <_printf_i>
 8012dbe:	e7ed      	b.n	8012d9c <_svfiprintf_r+0x1c0>
 8012dc0:	080158d9 	.word	0x080158d9
 8012dc4:	080158e3 	.word	0x080158e3
 8012dc8:	0800f2e9 	.word	0x0800f2e9
 8012dcc:	08012b25 	.word	0x08012b25
 8012dd0:	080158df 	.word	0x080158df

08012dd4 <__sfputc_r>:
 8012dd4:	6893      	ldr	r3, [r2, #8]
 8012dd6:	3b01      	subs	r3, #1
 8012dd8:	2b00      	cmp	r3, #0
 8012dda:	b410      	push	{r4}
 8012ddc:	6093      	str	r3, [r2, #8]
 8012dde:	da08      	bge.n	8012df2 <__sfputc_r+0x1e>
 8012de0:	6994      	ldr	r4, [r2, #24]
 8012de2:	42a3      	cmp	r3, r4
 8012de4:	db01      	blt.n	8012dea <__sfputc_r+0x16>
 8012de6:	290a      	cmp	r1, #10
 8012de8:	d103      	bne.n	8012df2 <__sfputc_r+0x1e>
 8012dea:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012dee:	f7fd bacc 	b.w	801038a <__swbuf_r>
 8012df2:	6813      	ldr	r3, [r2, #0]
 8012df4:	1c58      	adds	r0, r3, #1
 8012df6:	6010      	str	r0, [r2, #0]
 8012df8:	7019      	strb	r1, [r3, #0]
 8012dfa:	4608      	mov	r0, r1
 8012dfc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012e00:	4770      	bx	lr

08012e02 <__sfputs_r>:
 8012e02:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012e04:	4606      	mov	r6, r0
 8012e06:	460f      	mov	r7, r1
 8012e08:	4614      	mov	r4, r2
 8012e0a:	18d5      	adds	r5, r2, r3
 8012e0c:	42ac      	cmp	r4, r5
 8012e0e:	d101      	bne.n	8012e14 <__sfputs_r+0x12>
 8012e10:	2000      	movs	r0, #0
 8012e12:	e007      	b.n	8012e24 <__sfputs_r+0x22>
 8012e14:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012e18:	463a      	mov	r2, r7
 8012e1a:	4630      	mov	r0, r6
 8012e1c:	f7ff ffda 	bl	8012dd4 <__sfputc_r>
 8012e20:	1c43      	adds	r3, r0, #1
 8012e22:	d1f3      	bne.n	8012e0c <__sfputs_r+0xa>
 8012e24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08012e28 <_vfiprintf_r>:
 8012e28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012e2c:	460d      	mov	r5, r1
 8012e2e:	b09d      	sub	sp, #116	@ 0x74
 8012e30:	4614      	mov	r4, r2
 8012e32:	4698      	mov	r8, r3
 8012e34:	4606      	mov	r6, r0
 8012e36:	b118      	cbz	r0, 8012e40 <_vfiprintf_r+0x18>
 8012e38:	6a03      	ldr	r3, [r0, #32]
 8012e3a:	b90b      	cbnz	r3, 8012e40 <_vfiprintf_r+0x18>
 8012e3c:	f7fd f964 	bl	8010108 <__sinit>
 8012e40:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8012e42:	07d9      	lsls	r1, r3, #31
 8012e44:	d405      	bmi.n	8012e52 <_vfiprintf_r+0x2a>
 8012e46:	89ab      	ldrh	r3, [r5, #12]
 8012e48:	059a      	lsls	r2, r3, #22
 8012e4a:	d402      	bmi.n	8012e52 <_vfiprintf_r+0x2a>
 8012e4c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8012e4e:	f7fd fbae 	bl	80105ae <__retarget_lock_acquire_recursive>
 8012e52:	89ab      	ldrh	r3, [r5, #12]
 8012e54:	071b      	lsls	r3, r3, #28
 8012e56:	d501      	bpl.n	8012e5c <_vfiprintf_r+0x34>
 8012e58:	692b      	ldr	r3, [r5, #16]
 8012e5a:	b99b      	cbnz	r3, 8012e84 <_vfiprintf_r+0x5c>
 8012e5c:	4629      	mov	r1, r5
 8012e5e:	4630      	mov	r0, r6
 8012e60:	f7fd fad2 	bl	8010408 <__swsetup_r>
 8012e64:	b170      	cbz	r0, 8012e84 <_vfiprintf_r+0x5c>
 8012e66:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8012e68:	07dc      	lsls	r4, r3, #31
 8012e6a:	d504      	bpl.n	8012e76 <_vfiprintf_r+0x4e>
 8012e6c:	f04f 30ff 	mov.w	r0, #4294967295
 8012e70:	b01d      	add	sp, #116	@ 0x74
 8012e72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012e76:	89ab      	ldrh	r3, [r5, #12]
 8012e78:	0598      	lsls	r0, r3, #22
 8012e7a:	d4f7      	bmi.n	8012e6c <_vfiprintf_r+0x44>
 8012e7c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8012e7e:	f7fd fb97 	bl	80105b0 <__retarget_lock_release_recursive>
 8012e82:	e7f3      	b.n	8012e6c <_vfiprintf_r+0x44>
 8012e84:	2300      	movs	r3, #0
 8012e86:	9309      	str	r3, [sp, #36]	@ 0x24
 8012e88:	2320      	movs	r3, #32
 8012e8a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8012e8e:	f8cd 800c 	str.w	r8, [sp, #12]
 8012e92:	2330      	movs	r3, #48	@ 0x30
 8012e94:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8013044 <_vfiprintf_r+0x21c>
 8012e98:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8012e9c:	f04f 0901 	mov.w	r9, #1
 8012ea0:	4623      	mov	r3, r4
 8012ea2:	469a      	mov	sl, r3
 8012ea4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012ea8:	b10a      	cbz	r2, 8012eae <_vfiprintf_r+0x86>
 8012eaa:	2a25      	cmp	r2, #37	@ 0x25
 8012eac:	d1f9      	bne.n	8012ea2 <_vfiprintf_r+0x7a>
 8012eae:	ebba 0b04 	subs.w	fp, sl, r4
 8012eb2:	d00b      	beq.n	8012ecc <_vfiprintf_r+0xa4>
 8012eb4:	465b      	mov	r3, fp
 8012eb6:	4622      	mov	r2, r4
 8012eb8:	4629      	mov	r1, r5
 8012eba:	4630      	mov	r0, r6
 8012ebc:	f7ff ffa1 	bl	8012e02 <__sfputs_r>
 8012ec0:	3001      	adds	r0, #1
 8012ec2:	f000 80a7 	beq.w	8013014 <_vfiprintf_r+0x1ec>
 8012ec6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8012ec8:	445a      	add	r2, fp
 8012eca:	9209      	str	r2, [sp, #36]	@ 0x24
 8012ecc:	f89a 3000 	ldrb.w	r3, [sl]
 8012ed0:	2b00      	cmp	r3, #0
 8012ed2:	f000 809f 	beq.w	8013014 <_vfiprintf_r+0x1ec>
 8012ed6:	2300      	movs	r3, #0
 8012ed8:	f04f 32ff 	mov.w	r2, #4294967295
 8012edc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8012ee0:	f10a 0a01 	add.w	sl, sl, #1
 8012ee4:	9304      	str	r3, [sp, #16]
 8012ee6:	9307      	str	r3, [sp, #28]
 8012ee8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8012eec:	931a      	str	r3, [sp, #104]	@ 0x68
 8012eee:	4654      	mov	r4, sl
 8012ef0:	2205      	movs	r2, #5
 8012ef2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012ef6:	4853      	ldr	r0, [pc, #332]	@ (8013044 <_vfiprintf_r+0x21c>)
 8012ef8:	f7ed f982 	bl	8000200 <memchr>
 8012efc:	9a04      	ldr	r2, [sp, #16]
 8012efe:	b9d8      	cbnz	r0, 8012f38 <_vfiprintf_r+0x110>
 8012f00:	06d1      	lsls	r1, r2, #27
 8012f02:	bf44      	itt	mi
 8012f04:	2320      	movmi	r3, #32
 8012f06:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8012f0a:	0713      	lsls	r3, r2, #28
 8012f0c:	bf44      	itt	mi
 8012f0e:	232b      	movmi	r3, #43	@ 0x2b
 8012f10:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8012f14:	f89a 3000 	ldrb.w	r3, [sl]
 8012f18:	2b2a      	cmp	r3, #42	@ 0x2a
 8012f1a:	d015      	beq.n	8012f48 <_vfiprintf_r+0x120>
 8012f1c:	9a07      	ldr	r2, [sp, #28]
 8012f1e:	4654      	mov	r4, sl
 8012f20:	2000      	movs	r0, #0
 8012f22:	f04f 0c0a 	mov.w	ip, #10
 8012f26:	4621      	mov	r1, r4
 8012f28:	f811 3b01 	ldrb.w	r3, [r1], #1
 8012f2c:	3b30      	subs	r3, #48	@ 0x30
 8012f2e:	2b09      	cmp	r3, #9
 8012f30:	d94b      	bls.n	8012fca <_vfiprintf_r+0x1a2>
 8012f32:	b1b0      	cbz	r0, 8012f62 <_vfiprintf_r+0x13a>
 8012f34:	9207      	str	r2, [sp, #28]
 8012f36:	e014      	b.n	8012f62 <_vfiprintf_r+0x13a>
 8012f38:	eba0 0308 	sub.w	r3, r0, r8
 8012f3c:	fa09 f303 	lsl.w	r3, r9, r3
 8012f40:	4313      	orrs	r3, r2
 8012f42:	9304      	str	r3, [sp, #16]
 8012f44:	46a2      	mov	sl, r4
 8012f46:	e7d2      	b.n	8012eee <_vfiprintf_r+0xc6>
 8012f48:	9b03      	ldr	r3, [sp, #12]
 8012f4a:	1d19      	adds	r1, r3, #4
 8012f4c:	681b      	ldr	r3, [r3, #0]
 8012f4e:	9103      	str	r1, [sp, #12]
 8012f50:	2b00      	cmp	r3, #0
 8012f52:	bfbb      	ittet	lt
 8012f54:	425b      	neglt	r3, r3
 8012f56:	f042 0202 	orrlt.w	r2, r2, #2
 8012f5a:	9307      	strge	r3, [sp, #28]
 8012f5c:	9307      	strlt	r3, [sp, #28]
 8012f5e:	bfb8      	it	lt
 8012f60:	9204      	strlt	r2, [sp, #16]
 8012f62:	7823      	ldrb	r3, [r4, #0]
 8012f64:	2b2e      	cmp	r3, #46	@ 0x2e
 8012f66:	d10a      	bne.n	8012f7e <_vfiprintf_r+0x156>
 8012f68:	7863      	ldrb	r3, [r4, #1]
 8012f6a:	2b2a      	cmp	r3, #42	@ 0x2a
 8012f6c:	d132      	bne.n	8012fd4 <_vfiprintf_r+0x1ac>
 8012f6e:	9b03      	ldr	r3, [sp, #12]
 8012f70:	1d1a      	adds	r2, r3, #4
 8012f72:	681b      	ldr	r3, [r3, #0]
 8012f74:	9203      	str	r2, [sp, #12]
 8012f76:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8012f7a:	3402      	adds	r4, #2
 8012f7c:	9305      	str	r3, [sp, #20]
 8012f7e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8013054 <_vfiprintf_r+0x22c>
 8012f82:	7821      	ldrb	r1, [r4, #0]
 8012f84:	2203      	movs	r2, #3
 8012f86:	4650      	mov	r0, sl
 8012f88:	f7ed f93a 	bl	8000200 <memchr>
 8012f8c:	b138      	cbz	r0, 8012f9e <_vfiprintf_r+0x176>
 8012f8e:	9b04      	ldr	r3, [sp, #16]
 8012f90:	eba0 000a 	sub.w	r0, r0, sl
 8012f94:	2240      	movs	r2, #64	@ 0x40
 8012f96:	4082      	lsls	r2, r0
 8012f98:	4313      	orrs	r3, r2
 8012f9a:	3401      	adds	r4, #1
 8012f9c:	9304      	str	r3, [sp, #16]
 8012f9e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012fa2:	4829      	ldr	r0, [pc, #164]	@ (8013048 <_vfiprintf_r+0x220>)
 8012fa4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8012fa8:	2206      	movs	r2, #6
 8012faa:	f7ed f929 	bl	8000200 <memchr>
 8012fae:	2800      	cmp	r0, #0
 8012fb0:	d03f      	beq.n	8013032 <_vfiprintf_r+0x20a>
 8012fb2:	4b26      	ldr	r3, [pc, #152]	@ (801304c <_vfiprintf_r+0x224>)
 8012fb4:	bb1b      	cbnz	r3, 8012ffe <_vfiprintf_r+0x1d6>
 8012fb6:	9b03      	ldr	r3, [sp, #12]
 8012fb8:	3307      	adds	r3, #7
 8012fba:	f023 0307 	bic.w	r3, r3, #7
 8012fbe:	3308      	adds	r3, #8
 8012fc0:	9303      	str	r3, [sp, #12]
 8012fc2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012fc4:	443b      	add	r3, r7
 8012fc6:	9309      	str	r3, [sp, #36]	@ 0x24
 8012fc8:	e76a      	b.n	8012ea0 <_vfiprintf_r+0x78>
 8012fca:	fb0c 3202 	mla	r2, ip, r2, r3
 8012fce:	460c      	mov	r4, r1
 8012fd0:	2001      	movs	r0, #1
 8012fd2:	e7a8      	b.n	8012f26 <_vfiprintf_r+0xfe>
 8012fd4:	2300      	movs	r3, #0
 8012fd6:	3401      	adds	r4, #1
 8012fd8:	9305      	str	r3, [sp, #20]
 8012fda:	4619      	mov	r1, r3
 8012fdc:	f04f 0c0a 	mov.w	ip, #10
 8012fe0:	4620      	mov	r0, r4
 8012fe2:	f810 2b01 	ldrb.w	r2, [r0], #1
 8012fe6:	3a30      	subs	r2, #48	@ 0x30
 8012fe8:	2a09      	cmp	r2, #9
 8012fea:	d903      	bls.n	8012ff4 <_vfiprintf_r+0x1cc>
 8012fec:	2b00      	cmp	r3, #0
 8012fee:	d0c6      	beq.n	8012f7e <_vfiprintf_r+0x156>
 8012ff0:	9105      	str	r1, [sp, #20]
 8012ff2:	e7c4      	b.n	8012f7e <_vfiprintf_r+0x156>
 8012ff4:	fb0c 2101 	mla	r1, ip, r1, r2
 8012ff8:	4604      	mov	r4, r0
 8012ffa:	2301      	movs	r3, #1
 8012ffc:	e7f0      	b.n	8012fe0 <_vfiprintf_r+0x1b8>
 8012ffe:	ab03      	add	r3, sp, #12
 8013000:	9300      	str	r3, [sp, #0]
 8013002:	462a      	mov	r2, r5
 8013004:	4b12      	ldr	r3, [pc, #72]	@ (8013050 <_vfiprintf_r+0x228>)
 8013006:	a904      	add	r1, sp, #16
 8013008:	4630      	mov	r0, r6
 801300a:	f7fc f96d 	bl	800f2e8 <_printf_float>
 801300e:	4607      	mov	r7, r0
 8013010:	1c78      	adds	r0, r7, #1
 8013012:	d1d6      	bne.n	8012fc2 <_vfiprintf_r+0x19a>
 8013014:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8013016:	07d9      	lsls	r1, r3, #31
 8013018:	d405      	bmi.n	8013026 <_vfiprintf_r+0x1fe>
 801301a:	89ab      	ldrh	r3, [r5, #12]
 801301c:	059a      	lsls	r2, r3, #22
 801301e:	d402      	bmi.n	8013026 <_vfiprintf_r+0x1fe>
 8013020:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8013022:	f7fd fac5 	bl	80105b0 <__retarget_lock_release_recursive>
 8013026:	89ab      	ldrh	r3, [r5, #12]
 8013028:	065b      	lsls	r3, r3, #25
 801302a:	f53f af1f 	bmi.w	8012e6c <_vfiprintf_r+0x44>
 801302e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8013030:	e71e      	b.n	8012e70 <_vfiprintf_r+0x48>
 8013032:	ab03      	add	r3, sp, #12
 8013034:	9300      	str	r3, [sp, #0]
 8013036:	462a      	mov	r2, r5
 8013038:	4b05      	ldr	r3, [pc, #20]	@ (8013050 <_vfiprintf_r+0x228>)
 801303a:	a904      	add	r1, sp, #16
 801303c:	4630      	mov	r0, r6
 801303e:	f7fc fbeb 	bl	800f818 <_printf_i>
 8013042:	e7e4      	b.n	801300e <_vfiprintf_r+0x1e6>
 8013044:	080158d9 	.word	0x080158d9
 8013048:	080158e3 	.word	0x080158e3
 801304c:	0800f2e9 	.word	0x0800f2e9
 8013050:	08012e03 	.word	0x08012e03
 8013054:	080158df 	.word	0x080158df

08013058 <fiprintf>:
 8013058:	b40e      	push	{r1, r2, r3}
 801305a:	b503      	push	{r0, r1, lr}
 801305c:	4601      	mov	r1, r0
 801305e:	ab03      	add	r3, sp, #12
 8013060:	4805      	ldr	r0, [pc, #20]	@ (8013078 <fiprintf+0x20>)
 8013062:	f853 2b04 	ldr.w	r2, [r3], #4
 8013066:	6800      	ldr	r0, [r0, #0]
 8013068:	9301      	str	r3, [sp, #4]
 801306a:	f7ff fedd 	bl	8012e28 <_vfiprintf_r>
 801306e:	b002      	add	sp, #8
 8013070:	f85d eb04 	ldr.w	lr, [sp], #4
 8013074:	b003      	add	sp, #12
 8013076:	4770      	bx	lr
 8013078:	2000d140 	.word	0x2000d140

0801307c <__swhatbuf_r>:
 801307c:	b570      	push	{r4, r5, r6, lr}
 801307e:	460c      	mov	r4, r1
 8013080:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013084:	2900      	cmp	r1, #0
 8013086:	b096      	sub	sp, #88	@ 0x58
 8013088:	4615      	mov	r5, r2
 801308a:	461e      	mov	r6, r3
 801308c:	da0d      	bge.n	80130aa <__swhatbuf_r+0x2e>
 801308e:	89a3      	ldrh	r3, [r4, #12]
 8013090:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8013094:	f04f 0100 	mov.w	r1, #0
 8013098:	bf14      	ite	ne
 801309a:	2340      	movne	r3, #64	@ 0x40
 801309c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80130a0:	2000      	movs	r0, #0
 80130a2:	6031      	str	r1, [r6, #0]
 80130a4:	602b      	str	r3, [r5, #0]
 80130a6:	b016      	add	sp, #88	@ 0x58
 80130a8:	bd70      	pop	{r4, r5, r6, pc}
 80130aa:	466a      	mov	r2, sp
 80130ac:	f000 f874 	bl	8013198 <_fstat_r>
 80130b0:	2800      	cmp	r0, #0
 80130b2:	dbec      	blt.n	801308e <__swhatbuf_r+0x12>
 80130b4:	9901      	ldr	r1, [sp, #4]
 80130b6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80130ba:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80130be:	4259      	negs	r1, r3
 80130c0:	4159      	adcs	r1, r3
 80130c2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80130c6:	e7eb      	b.n	80130a0 <__swhatbuf_r+0x24>

080130c8 <__smakebuf_r>:
 80130c8:	898b      	ldrh	r3, [r1, #12]
 80130ca:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80130cc:	079d      	lsls	r5, r3, #30
 80130ce:	4606      	mov	r6, r0
 80130d0:	460c      	mov	r4, r1
 80130d2:	d507      	bpl.n	80130e4 <__smakebuf_r+0x1c>
 80130d4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80130d8:	6023      	str	r3, [r4, #0]
 80130da:	6123      	str	r3, [r4, #16]
 80130dc:	2301      	movs	r3, #1
 80130de:	6163      	str	r3, [r4, #20]
 80130e0:	b003      	add	sp, #12
 80130e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80130e4:	ab01      	add	r3, sp, #4
 80130e6:	466a      	mov	r2, sp
 80130e8:	f7ff ffc8 	bl	801307c <__swhatbuf_r>
 80130ec:	9f00      	ldr	r7, [sp, #0]
 80130ee:	4605      	mov	r5, r0
 80130f0:	4639      	mov	r1, r7
 80130f2:	4630      	mov	r0, r6
 80130f4:	f7fe f95c 	bl	80113b0 <_malloc_r>
 80130f8:	b948      	cbnz	r0, 801310e <__smakebuf_r+0x46>
 80130fa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80130fe:	059a      	lsls	r2, r3, #22
 8013100:	d4ee      	bmi.n	80130e0 <__smakebuf_r+0x18>
 8013102:	f023 0303 	bic.w	r3, r3, #3
 8013106:	f043 0302 	orr.w	r3, r3, #2
 801310a:	81a3      	strh	r3, [r4, #12]
 801310c:	e7e2      	b.n	80130d4 <__smakebuf_r+0xc>
 801310e:	89a3      	ldrh	r3, [r4, #12]
 8013110:	6020      	str	r0, [r4, #0]
 8013112:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8013116:	81a3      	strh	r3, [r4, #12]
 8013118:	9b01      	ldr	r3, [sp, #4]
 801311a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 801311e:	b15b      	cbz	r3, 8013138 <__smakebuf_r+0x70>
 8013120:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8013124:	4630      	mov	r0, r6
 8013126:	f000 f849 	bl	80131bc <_isatty_r>
 801312a:	b128      	cbz	r0, 8013138 <__smakebuf_r+0x70>
 801312c:	89a3      	ldrh	r3, [r4, #12]
 801312e:	f023 0303 	bic.w	r3, r3, #3
 8013132:	f043 0301 	orr.w	r3, r3, #1
 8013136:	81a3      	strh	r3, [r4, #12]
 8013138:	89a3      	ldrh	r3, [r4, #12]
 801313a:	431d      	orrs	r5, r3
 801313c:	81a5      	strh	r5, [r4, #12]
 801313e:	e7cf      	b.n	80130e0 <__smakebuf_r+0x18>

08013140 <memmove>:
 8013140:	4288      	cmp	r0, r1
 8013142:	b510      	push	{r4, lr}
 8013144:	eb01 0402 	add.w	r4, r1, r2
 8013148:	d902      	bls.n	8013150 <memmove+0x10>
 801314a:	4284      	cmp	r4, r0
 801314c:	4623      	mov	r3, r4
 801314e:	d807      	bhi.n	8013160 <memmove+0x20>
 8013150:	1e43      	subs	r3, r0, #1
 8013152:	42a1      	cmp	r1, r4
 8013154:	d008      	beq.n	8013168 <memmove+0x28>
 8013156:	f811 2b01 	ldrb.w	r2, [r1], #1
 801315a:	f803 2f01 	strb.w	r2, [r3, #1]!
 801315e:	e7f8      	b.n	8013152 <memmove+0x12>
 8013160:	4402      	add	r2, r0
 8013162:	4601      	mov	r1, r0
 8013164:	428a      	cmp	r2, r1
 8013166:	d100      	bne.n	801316a <memmove+0x2a>
 8013168:	bd10      	pop	{r4, pc}
 801316a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801316e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8013172:	e7f7      	b.n	8013164 <memmove+0x24>

08013174 <strncmp>:
 8013174:	b510      	push	{r4, lr}
 8013176:	b16a      	cbz	r2, 8013194 <strncmp+0x20>
 8013178:	3901      	subs	r1, #1
 801317a:	1884      	adds	r4, r0, r2
 801317c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8013180:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8013184:	429a      	cmp	r2, r3
 8013186:	d103      	bne.n	8013190 <strncmp+0x1c>
 8013188:	42a0      	cmp	r0, r4
 801318a:	d001      	beq.n	8013190 <strncmp+0x1c>
 801318c:	2a00      	cmp	r2, #0
 801318e:	d1f5      	bne.n	801317c <strncmp+0x8>
 8013190:	1ad0      	subs	r0, r2, r3
 8013192:	bd10      	pop	{r4, pc}
 8013194:	4610      	mov	r0, r2
 8013196:	e7fc      	b.n	8013192 <strncmp+0x1e>

08013198 <_fstat_r>:
 8013198:	b538      	push	{r3, r4, r5, lr}
 801319a:	4d07      	ldr	r5, [pc, #28]	@ (80131b8 <_fstat_r+0x20>)
 801319c:	2300      	movs	r3, #0
 801319e:	4604      	mov	r4, r0
 80131a0:	4608      	mov	r0, r1
 80131a2:	4611      	mov	r1, r2
 80131a4:	602b      	str	r3, [r5, #0]
 80131a6:	f7ed ff9f 	bl	80010e8 <_fstat>
 80131aa:	1c43      	adds	r3, r0, #1
 80131ac:	d102      	bne.n	80131b4 <_fstat_r+0x1c>
 80131ae:	682b      	ldr	r3, [r5, #0]
 80131b0:	b103      	cbz	r3, 80131b4 <_fstat_r+0x1c>
 80131b2:	6023      	str	r3, [r4, #0]
 80131b4:	bd38      	pop	{r3, r4, r5, pc}
 80131b6:	bf00      	nop
 80131b8:	20016524 	.word	0x20016524

080131bc <_isatty_r>:
 80131bc:	b538      	push	{r3, r4, r5, lr}
 80131be:	4d06      	ldr	r5, [pc, #24]	@ (80131d8 <_isatty_r+0x1c>)
 80131c0:	2300      	movs	r3, #0
 80131c2:	4604      	mov	r4, r0
 80131c4:	4608      	mov	r0, r1
 80131c6:	602b      	str	r3, [r5, #0]
 80131c8:	f7ed ffa0 	bl	800110c <_isatty>
 80131cc:	1c43      	adds	r3, r0, #1
 80131ce:	d102      	bne.n	80131d6 <_isatty_r+0x1a>
 80131d0:	682b      	ldr	r3, [r5, #0]
 80131d2:	b103      	cbz	r3, 80131d6 <_isatty_r+0x1a>
 80131d4:	6023      	str	r3, [r4, #0]
 80131d6:	bd38      	pop	{r3, r4, r5, pc}
 80131d8:	20016524 	.word	0x20016524

080131dc <_sbrk_r>:
 80131dc:	b538      	push	{r3, r4, r5, lr}
 80131de:	4d06      	ldr	r5, [pc, #24]	@ (80131f8 <_sbrk_r+0x1c>)
 80131e0:	2300      	movs	r3, #0
 80131e2:	4604      	mov	r4, r0
 80131e4:	4608      	mov	r0, r1
 80131e6:	602b      	str	r3, [r5, #0]
 80131e8:	f7f1 ff02 	bl	8004ff0 <_sbrk>
 80131ec:	1c43      	adds	r3, r0, #1
 80131ee:	d102      	bne.n	80131f6 <_sbrk_r+0x1a>
 80131f0:	682b      	ldr	r3, [r5, #0]
 80131f2:	b103      	cbz	r3, 80131f6 <_sbrk_r+0x1a>
 80131f4:	6023      	str	r3, [r4, #0]
 80131f6:	bd38      	pop	{r3, r4, r5, pc}
 80131f8:	20016524 	.word	0x20016524
 80131fc:	00000000 	.word	0x00000000

08013200 <nan>:
 8013200:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8013208 <nan+0x8>
 8013204:	4770      	bx	lr
 8013206:	bf00      	nop
 8013208:	00000000 	.word	0x00000000
 801320c:	7ff80000 	.word	0x7ff80000

08013210 <abort>:
 8013210:	b508      	push	{r3, lr}
 8013212:	2006      	movs	r0, #6
 8013214:	f000 fbc4 	bl	80139a0 <raise>
 8013218:	2001      	movs	r0, #1
 801321a:	f7ed ff39 	bl	8001090 <_exit>

0801321e <_calloc_r>:
 801321e:	b570      	push	{r4, r5, r6, lr}
 8013220:	fba1 5402 	umull	r5, r4, r1, r2
 8013224:	b934      	cbnz	r4, 8013234 <_calloc_r+0x16>
 8013226:	4629      	mov	r1, r5
 8013228:	f7fe f8c2 	bl	80113b0 <_malloc_r>
 801322c:	4606      	mov	r6, r0
 801322e:	b928      	cbnz	r0, 801323c <_calloc_r+0x1e>
 8013230:	4630      	mov	r0, r6
 8013232:	bd70      	pop	{r4, r5, r6, pc}
 8013234:	220c      	movs	r2, #12
 8013236:	6002      	str	r2, [r0, #0]
 8013238:	2600      	movs	r6, #0
 801323a:	e7f9      	b.n	8013230 <_calloc_r+0x12>
 801323c:	462a      	mov	r2, r5
 801323e:	4621      	mov	r1, r4
 8013240:	f7fd f938 	bl	80104b4 <memset>
 8013244:	e7f4      	b.n	8013230 <_calloc_r+0x12>

08013246 <rshift>:
 8013246:	6903      	ldr	r3, [r0, #16]
 8013248:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 801324c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8013250:	ea4f 1261 	mov.w	r2, r1, asr #5
 8013254:	f100 0414 	add.w	r4, r0, #20
 8013258:	dd45      	ble.n	80132e6 <rshift+0xa0>
 801325a:	f011 011f 	ands.w	r1, r1, #31
 801325e:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8013262:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8013266:	d10c      	bne.n	8013282 <rshift+0x3c>
 8013268:	f100 0710 	add.w	r7, r0, #16
 801326c:	4629      	mov	r1, r5
 801326e:	42b1      	cmp	r1, r6
 8013270:	d334      	bcc.n	80132dc <rshift+0x96>
 8013272:	1a9b      	subs	r3, r3, r2
 8013274:	009b      	lsls	r3, r3, #2
 8013276:	1eea      	subs	r2, r5, #3
 8013278:	4296      	cmp	r6, r2
 801327a:	bf38      	it	cc
 801327c:	2300      	movcc	r3, #0
 801327e:	4423      	add	r3, r4
 8013280:	e015      	b.n	80132ae <rshift+0x68>
 8013282:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8013286:	f1c1 0820 	rsb	r8, r1, #32
 801328a:	40cf      	lsrs	r7, r1
 801328c:	f105 0e04 	add.w	lr, r5, #4
 8013290:	46a1      	mov	r9, r4
 8013292:	4576      	cmp	r6, lr
 8013294:	46f4      	mov	ip, lr
 8013296:	d815      	bhi.n	80132c4 <rshift+0x7e>
 8013298:	1a9a      	subs	r2, r3, r2
 801329a:	0092      	lsls	r2, r2, #2
 801329c:	3a04      	subs	r2, #4
 801329e:	3501      	adds	r5, #1
 80132a0:	42ae      	cmp	r6, r5
 80132a2:	bf38      	it	cc
 80132a4:	2200      	movcc	r2, #0
 80132a6:	18a3      	adds	r3, r4, r2
 80132a8:	50a7      	str	r7, [r4, r2]
 80132aa:	b107      	cbz	r7, 80132ae <rshift+0x68>
 80132ac:	3304      	adds	r3, #4
 80132ae:	1b1a      	subs	r2, r3, r4
 80132b0:	42a3      	cmp	r3, r4
 80132b2:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80132b6:	bf08      	it	eq
 80132b8:	2300      	moveq	r3, #0
 80132ba:	6102      	str	r2, [r0, #16]
 80132bc:	bf08      	it	eq
 80132be:	6143      	streq	r3, [r0, #20]
 80132c0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80132c4:	f8dc c000 	ldr.w	ip, [ip]
 80132c8:	fa0c fc08 	lsl.w	ip, ip, r8
 80132cc:	ea4c 0707 	orr.w	r7, ip, r7
 80132d0:	f849 7b04 	str.w	r7, [r9], #4
 80132d4:	f85e 7b04 	ldr.w	r7, [lr], #4
 80132d8:	40cf      	lsrs	r7, r1
 80132da:	e7da      	b.n	8013292 <rshift+0x4c>
 80132dc:	f851 cb04 	ldr.w	ip, [r1], #4
 80132e0:	f847 cf04 	str.w	ip, [r7, #4]!
 80132e4:	e7c3      	b.n	801326e <rshift+0x28>
 80132e6:	4623      	mov	r3, r4
 80132e8:	e7e1      	b.n	80132ae <rshift+0x68>

080132ea <__hexdig_fun>:
 80132ea:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 80132ee:	2b09      	cmp	r3, #9
 80132f0:	d802      	bhi.n	80132f8 <__hexdig_fun+0xe>
 80132f2:	3820      	subs	r0, #32
 80132f4:	b2c0      	uxtb	r0, r0
 80132f6:	4770      	bx	lr
 80132f8:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 80132fc:	2b05      	cmp	r3, #5
 80132fe:	d801      	bhi.n	8013304 <__hexdig_fun+0x1a>
 8013300:	3847      	subs	r0, #71	@ 0x47
 8013302:	e7f7      	b.n	80132f4 <__hexdig_fun+0xa>
 8013304:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8013308:	2b05      	cmp	r3, #5
 801330a:	d801      	bhi.n	8013310 <__hexdig_fun+0x26>
 801330c:	3827      	subs	r0, #39	@ 0x27
 801330e:	e7f1      	b.n	80132f4 <__hexdig_fun+0xa>
 8013310:	2000      	movs	r0, #0
 8013312:	4770      	bx	lr

08013314 <__gethex>:
 8013314:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013318:	b085      	sub	sp, #20
 801331a:	468a      	mov	sl, r1
 801331c:	9302      	str	r3, [sp, #8]
 801331e:	680b      	ldr	r3, [r1, #0]
 8013320:	9001      	str	r0, [sp, #4]
 8013322:	4690      	mov	r8, r2
 8013324:	1c9c      	adds	r4, r3, #2
 8013326:	46a1      	mov	r9, r4
 8013328:	f814 0b01 	ldrb.w	r0, [r4], #1
 801332c:	2830      	cmp	r0, #48	@ 0x30
 801332e:	d0fa      	beq.n	8013326 <__gethex+0x12>
 8013330:	eba9 0303 	sub.w	r3, r9, r3
 8013334:	f1a3 0b02 	sub.w	fp, r3, #2
 8013338:	f7ff ffd7 	bl	80132ea <__hexdig_fun>
 801333c:	4605      	mov	r5, r0
 801333e:	2800      	cmp	r0, #0
 8013340:	d168      	bne.n	8013414 <__gethex+0x100>
 8013342:	49a0      	ldr	r1, [pc, #640]	@ (80135c4 <__gethex+0x2b0>)
 8013344:	2201      	movs	r2, #1
 8013346:	4648      	mov	r0, r9
 8013348:	f7ff ff14 	bl	8013174 <strncmp>
 801334c:	4607      	mov	r7, r0
 801334e:	2800      	cmp	r0, #0
 8013350:	d167      	bne.n	8013422 <__gethex+0x10e>
 8013352:	f899 0001 	ldrb.w	r0, [r9, #1]
 8013356:	4626      	mov	r6, r4
 8013358:	f7ff ffc7 	bl	80132ea <__hexdig_fun>
 801335c:	2800      	cmp	r0, #0
 801335e:	d062      	beq.n	8013426 <__gethex+0x112>
 8013360:	4623      	mov	r3, r4
 8013362:	7818      	ldrb	r0, [r3, #0]
 8013364:	2830      	cmp	r0, #48	@ 0x30
 8013366:	4699      	mov	r9, r3
 8013368:	f103 0301 	add.w	r3, r3, #1
 801336c:	d0f9      	beq.n	8013362 <__gethex+0x4e>
 801336e:	f7ff ffbc 	bl	80132ea <__hexdig_fun>
 8013372:	fab0 f580 	clz	r5, r0
 8013376:	096d      	lsrs	r5, r5, #5
 8013378:	f04f 0b01 	mov.w	fp, #1
 801337c:	464a      	mov	r2, r9
 801337e:	4616      	mov	r6, r2
 8013380:	3201      	adds	r2, #1
 8013382:	7830      	ldrb	r0, [r6, #0]
 8013384:	f7ff ffb1 	bl	80132ea <__hexdig_fun>
 8013388:	2800      	cmp	r0, #0
 801338a:	d1f8      	bne.n	801337e <__gethex+0x6a>
 801338c:	498d      	ldr	r1, [pc, #564]	@ (80135c4 <__gethex+0x2b0>)
 801338e:	2201      	movs	r2, #1
 8013390:	4630      	mov	r0, r6
 8013392:	f7ff feef 	bl	8013174 <strncmp>
 8013396:	2800      	cmp	r0, #0
 8013398:	d13f      	bne.n	801341a <__gethex+0x106>
 801339a:	b944      	cbnz	r4, 80133ae <__gethex+0x9a>
 801339c:	1c74      	adds	r4, r6, #1
 801339e:	4622      	mov	r2, r4
 80133a0:	4616      	mov	r6, r2
 80133a2:	3201      	adds	r2, #1
 80133a4:	7830      	ldrb	r0, [r6, #0]
 80133a6:	f7ff ffa0 	bl	80132ea <__hexdig_fun>
 80133aa:	2800      	cmp	r0, #0
 80133ac:	d1f8      	bne.n	80133a0 <__gethex+0x8c>
 80133ae:	1ba4      	subs	r4, r4, r6
 80133b0:	00a7      	lsls	r7, r4, #2
 80133b2:	7833      	ldrb	r3, [r6, #0]
 80133b4:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 80133b8:	2b50      	cmp	r3, #80	@ 0x50
 80133ba:	d13e      	bne.n	801343a <__gethex+0x126>
 80133bc:	7873      	ldrb	r3, [r6, #1]
 80133be:	2b2b      	cmp	r3, #43	@ 0x2b
 80133c0:	d033      	beq.n	801342a <__gethex+0x116>
 80133c2:	2b2d      	cmp	r3, #45	@ 0x2d
 80133c4:	d034      	beq.n	8013430 <__gethex+0x11c>
 80133c6:	1c71      	adds	r1, r6, #1
 80133c8:	2400      	movs	r4, #0
 80133ca:	7808      	ldrb	r0, [r1, #0]
 80133cc:	f7ff ff8d 	bl	80132ea <__hexdig_fun>
 80133d0:	1e43      	subs	r3, r0, #1
 80133d2:	b2db      	uxtb	r3, r3
 80133d4:	2b18      	cmp	r3, #24
 80133d6:	d830      	bhi.n	801343a <__gethex+0x126>
 80133d8:	f1a0 0210 	sub.w	r2, r0, #16
 80133dc:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80133e0:	f7ff ff83 	bl	80132ea <__hexdig_fun>
 80133e4:	f100 3cff 	add.w	ip, r0, #4294967295
 80133e8:	fa5f fc8c 	uxtb.w	ip, ip
 80133ec:	f1bc 0f18 	cmp.w	ip, #24
 80133f0:	f04f 030a 	mov.w	r3, #10
 80133f4:	d91e      	bls.n	8013434 <__gethex+0x120>
 80133f6:	b104      	cbz	r4, 80133fa <__gethex+0xe6>
 80133f8:	4252      	negs	r2, r2
 80133fa:	4417      	add	r7, r2
 80133fc:	f8ca 1000 	str.w	r1, [sl]
 8013400:	b1ed      	cbz	r5, 801343e <__gethex+0x12a>
 8013402:	f1bb 0f00 	cmp.w	fp, #0
 8013406:	bf0c      	ite	eq
 8013408:	2506      	moveq	r5, #6
 801340a:	2500      	movne	r5, #0
 801340c:	4628      	mov	r0, r5
 801340e:	b005      	add	sp, #20
 8013410:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013414:	2500      	movs	r5, #0
 8013416:	462c      	mov	r4, r5
 8013418:	e7b0      	b.n	801337c <__gethex+0x68>
 801341a:	2c00      	cmp	r4, #0
 801341c:	d1c7      	bne.n	80133ae <__gethex+0x9a>
 801341e:	4627      	mov	r7, r4
 8013420:	e7c7      	b.n	80133b2 <__gethex+0x9e>
 8013422:	464e      	mov	r6, r9
 8013424:	462f      	mov	r7, r5
 8013426:	2501      	movs	r5, #1
 8013428:	e7c3      	b.n	80133b2 <__gethex+0x9e>
 801342a:	2400      	movs	r4, #0
 801342c:	1cb1      	adds	r1, r6, #2
 801342e:	e7cc      	b.n	80133ca <__gethex+0xb6>
 8013430:	2401      	movs	r4, #1
 8013432:	e7fb      	b.n	801342c <__gethex+0x118>
 8013434:	fb03 0002 	mla	r0, r3, r2, r0
 8013438:	e7ce      	b.n	80133d8 <__gethex+0xc4>
 801343a:	4631      	mov	r1, r6
 801343c:	e7de      	b.n	80133fc <__gethex+0xe8>
 801343e:	eba6 0309 	sub.w	r3, r6, r9
 8013442:	3b01      	subs	r3, #1
 8013444:	4629      	mov	r1, r5
 8013446:	2b07      	cmp	r3, #7
 8013448:	dc0a      	bgt.n	8013460 <__gethex+0x14c>
 801344a:	9801      	ldr	r0, [sp, #4]
 801344c:	f7fe f83c 	bl	80114c8 <_Balloc>
 8013450:	4604      	mov	r4, r0
 8013452:	b940      	cbnz	r0, 8013466 <__gethex+0x152>
 8013454:	4b5c      	ldr	r3, [pc, #368]	@ (80135c8 <__gethex+0x2b4>)
 8013456:	4602      	mov	r2, r0
 8013458:	21e4      	movs	r1, #228	@ 0xe4
 801345a:	485c      	ldr	r0, [pc, #368]	@ (80135cc <__gethex+0x2b8>)
 801345c:	f7fd f8be 	bl	80105dc <__assert_func>
 8013460:	3101      	adds	r1, #1
 8013462:	105b      	asrs	r3, r3, #1
 8013464:	e7ef      	b.n	8013446 <__gethex+0x132>
 8013466:	f100 0a14 	add.w	sl, r0, #20
 801346a:	2300      	movs	r3, #0
 801346c:	4655      	mov	r5, sl
 801346e:	469b      	mov	fp, r3
 8013470:	45b1      	cmp	r9, r6
 8013472:	d337      	bcc.n	80134e4 <__gethex+0x1d0>
 8013474:	f845 bb04 	str.w	fp, [r5], #4
 8013478:	eba5 050a 	sub.w	r5, r5, sl
 801347c:	10ad      	asrs	r5, r5, #2
 801347e:	6125      	str	r5, [r4, #16]
 8013480:	4658      	mov	r0, fp
 8013482:	f7fe f913 	bl	80116ac <__hi0bits>
 8013486:	016d      	lsls	r5, r5, #5
 8013488:	f8d8 6000 	ldr.w	r6, [r8]
 801348c:	1a2d      	subs	r5, r5, r0
 801348e:	42b5      	cmp	r5, r6
 8013490:	dd54      	ble.n	801353c <__gethex+0x228>
 8013492:	1bad      	subs	r5, r5, r6
 8013494:	4629      	mov	r1, r5
 8013496:	4620      	mov	r0, r4
 8013498:	f7fe fc9f 	bl	8011dda <__any_on>
 801349c:	4681      	mov	r9, r0
 801349e:	b178      	cbz	r0, 80134c0 <__gethex+0x1ac>
 80134a0:	1e6b      	subs	r3, r5, #1
 80134a2:	1159      	asrs	r1, r3, #5
 80134a4:	f003 021f 	and.w	r2, r3, #31
 80134a8:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 80134ac:	f04f 0901 	mov.w	r9, #1
 80134b0:	fa09 f202 	lsl.w	r2, r9, r2
 80134b4:	420a      	tst	r2, r1
 80134b6:	d003      	beq.n	80134c0 <__gethex+0x1ac>
 80134b8:	454b      	cmp	r3, r9
 80134ba:	dc36      	bgt.n	801352a <__gethex+0x216>
 80134bc:	f04f 0902 	mov.w	r9, #2
 80134c0:	4629      	mov	r1, r5
 80134c2:	4620      	mov	r0, r4
 80134c4:	f7ff febf 	bl	8013246 <rshift>
 80134c8:	442f      	add	r7, r5
 80134ca:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80134ce:	42bb      	cmp	r3, r7
 80134d0:	da42      	bge.n	8013558 <__gethex+0x244>
 80134d2:	9801      	ldr	r0, [sp, #4]
 80134d4:	4621      	mov	r1, r4
 80134d6:	f7fe f837 	bl	8011548 <_Bfree>
 80134da:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80134dc:	2300      	movs	r3, #0
 80134de:	6013      	str	r3, [r2, #0]
 80134e0:	25a3      	movs	r5, #163	@ 0xa3
 80134e2:	e793      	b.n	801340c <__gethex+0xf8>
 80134e4:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 80134e8:	2a2e      	cmp	r2, #46	@ 0x2e
 80134ea:	d012      	beq.n	8013512 <__gethex+0x1fe>
 80134ec:	2b20      	cmp	r3, #32
 80134ee:	d104      	bne.n	80134fa <__gethex+0x1e6>
 80134f0:	f845 bb04 	str.w	fp, [r5], #4
 80134f4:	f04f 0b00 	mov.w	fp, #0
 80134f8:	465b      	mov	r3, fp
 80134fa:	7830      	ldrb	r0, [r6, #0]
 80134fc:	9303      	str	r3, [sp, #12]
 80134fe:	f7ff fef4 	bl	80132ea <__hexdig_fun>
 8013502:	9b03      	ldr	r3, [sp, #12]
 8013504:	f000 000f 	and.w	r0, r0, #15
 8013508:	4098      	lsls	r0, r3
 801350a:	ea4b 0b00 	orr.w	fp, fp, r0
 801350e:	3304      	adds	r3, #4
 8013510:	e7ae      	b.n	8013470 <__gethex+0x15c>
 8013512:	45b1      	cmp	r9, r6
 8013514:	d8ea      	bhi.n	80134ec <__gethex+0x1d8>
 8013516:	492b      	ldr	r1, [pc, #172]	@ (80135c4 <__gethex+0x2b0>)
 8013518:	9303      	str	r3, [sp, #12]
 801351a:	2201      	movs	r2, #1
 801351c:	4630      	mov	r0, r6
 801351e:	f7ff fe29 	bl	8013174 <strncmp>
 8013522:	9b03      	ldr	r3, [sp, #12]
 8013524:	2800      	cmp	r0, #0
 8013526:	d1e1      	bne.n	80134ec <__gethex+0x1d8>
 8013528:	e7a2      	b.n	8013470 <__gethex+0x15c>
 801352a:	1ea9      	subs	r1, r5, #2
 801352c:	4620      	mov	r0, r4
 801352e:	f7fe fc54 	bl	8011dda <__any_on>
 8013532:	2800      	cmp	r0, #0
 8013534:	d0c2      	beq.n	80134bc <__gethex+0x1a8>
 8013536:	f04f 0903 	mov.w	r9, #3
 801353a:	e7c1      	b.n	80134c0 <__gethex+0x1ac>
 801353c:	da09      	bge.n	8013552 <__gethex+0x23e>
 801353e:	1b75      	subs	r5, r6, r5
 8013540:	4621      	mov	r1, r4
 8013542:	9801      	ldr	r0, [sp, #4]
 8013544:	462a      	mov	r2, r5
 8013546:	f7fe fa0f 	bl	8011968 <__lshift>
 801354a:	1b7f      	subs	r7, r7, r5
 801354c:	4604      	mov	r4, r0
 801354e:	f100 0a14 	add.w	sl, r0, #20
 8013552:	f04f 0900 	mov.w	r9, #0
 8013556:	e7b8      	b.n	80134ca <__gethex+0x1b6>
 8013558:	f8d8 5004 	ldr.w	r5, [r8, #4]
 801355c:	42bd      	cmp	r5, r7
 801355e:	dd6f      	ble.n	8013640 <__gethex+0x32c>
 8013560:	1bed      	subs	r5, r5, r7
 8013562:	42ae      	cmp	r6, r5
 8013564:	dc34      	bgt.n	80135d0 <__gethex+0x2bc>
 8013566:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801356a:	2b02      	cmp	r3, #2
 801356c:	d022      	beq.n	80135b4 <__gethex+0x2a0>
 801356e:	2b03      	cmp	r3, #3
 8013570:	d024      	beq.n	80135bc <__gethex+0x2a8>
 8013572:	2b01      	cmp	r3, #1
 8013574:	d115      	bne.n	80135a2 <__gethex+0x28e>
 8013576:	42ae      	cmp	r6, r5
 8013578:	d113      	bne.n	80135a2 <__gethex+0x28e>
 801357a:	2e01      	cmp	r6, #1
 801357c:	d10b      	bne.n	8013596 <__gethex+0x282>
 801357e:	9a02      	ldr	r2, [sp, #8]
 8013580:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8013584:	6013      	str	r3, [r2, #0]
 8013586:	2301      	movs	r3, #1
 8013588:	6123      	str	r3, [r4, #16]
 801358a:	f8ca 3000 	str.w	r3, [sl]
 801358e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8013590:	2562      	movs	r5, #98	@ 0x62
 8013592:	601c      	str	r4, [r3, #0]
 8013594:	e73a      	b.n	801340c <__gethex+0xf8>
 8013596:	1e71      	subs	r1, r6, #1
 8013598:	4620      	mov	r0, r4
 801359a:	f7fe fc1e 	bl	8011dda <__any_on>
 801359e:	2800      	cmp	r0, #0
 80135a0:	d1ed      	bne.n	801357e <__gethex+0x26a>
 80135a2:	9801      	ldr	r0, [sp, #4]
 80135a4:	4621      	mov	r1, r4
 80135a6:	f7fd ffcf 	bl	8011548 <_Bfree>
 80135aa:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80135ac:	2300      	movs	r3, #0
 80135ae:	6013      	str	r3, [r2, #0]
 80135b0:	2550      	movs	r5, #80	@ 0x50
 80135b2:	e72b      	b.n	801340c <__gethex+0xf8>
 80135b4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80135b6:	2b00      	cmp	r3, #0
 80135b8:	d1f3      	bne.n	80135a2 <__gethex+0x28e>
 80135ba:	e7e0      	b.n	801357e <__gethex+0x26a>
 80135bc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80135be:	2b00      	cmp	r3, #0
 80135c0:	d1dd      	bne.n	801357e <__gethex+0x26a>
 80135c2:	e7ee      	b.n	80135a2 <__gethex+0x28e>
 80135c4:	080158d7 	.word	0x080158d7
 80135c8:	0801586d 	.word	0x0801586d
 80135cc:	080158f2 	.word	0x080158f2
 80135d0:	1e6f      	subs	r7, r5, #1
 80135d2:	f1b9 0f00 	cmp.w	r9, #0
 80135d6:	d130      	bne.n	801363a <__gethex+0x326>
 80135d8:	b127      	cbz	r7, 80135e4 <__gethex+0x2d0>
 80135da:	4639      	mov	r1, r7
 80135dc:	4620      	mov	r0, r4
 80135de:	f7fe fbfc 	bl	8011dda <__any_on>
 80135e2:	4681      	mov	r9, r0
 80135e4:	117a      	asrs	r2, r7, #5
 80135e6:	2301      	movs	r3, #1
 80135e8:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 80135ec:	f007 071f 	and.w	r7, r7, #31
 80135f0:	40bb      	lsls	r3, r7
 80135f2:	4213      	tst	r3, r2
 80135f4:	4629      	mov	r1, r5
 80135f6:	4620      	mov	r0, r4
 80135f8:	bf18      	it	ne
 80135fa:	f049 0902 	orrne.w	r9, r9, #2
 80135fe:	f7ff fe22 	bl	8013246 <rshift>
 8013602:	f8d8 7004 	ldr.w	r7, [r8, #4]
 8013606:	1b76      	subs	r6, r6, r5
 8013608:	2502      	movs	r5, #2
 801360a:	f1b9 0f00 	cmp.w	r9, #0
 801360e:	d047      	beq.n	80136a0 <__gethex+0x38c>
 8013610:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8013614:	2b02      	cmp	r3, #2
 8013616:	d015      	beq.n	8013644 <__gethex+0x330>
 8013618:	2b03      	cmp	r3, #3
 801361a:	d017      	beq.n	801364c <__gethex+0x338>
 801361c:	2b01      	cmp	r3, #1
 801361e:	d109      	bne.n	8013634 <__gethex+0x320>
 8013620:	f019 0f02 	tst.w	r9, #2
 8013624:	d006      	beq.n	8013634 <__gethex+0x320>
 8013626:	f8da 3000 	ldr.w	r3, [sl]
 801362a:	ea49 0903 	orr.w	r9, r9, r3
 801362e:	f019 0f01 	tst.w	r9, #1
 8013632:	d10e      	bne.n	8013652 <__gethex+0x33e>
 8013634:	f045 0510 	orr.w	r5, r5, #16
 8013638:	e032      	b.n	80136a0 <__gethex+0x38c>
 801363a:	f04f 0901 	mov.w	r9, #1
 801363e:	e7d1      	b.n	80135e4 <__gethex+0x2d0>
 8013640:	2501      	movs	r5, #1
 8013642:	e7e2      	b.n	801360a <__gethex+0x2f6>
 8013644:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8013646:	f1c3 0301 	rsb	r3, r3, #1
 801364a:	930f      	str	r3, [sp, #60]	@ 0x3c
 801364c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801364e:	2b00      	cmp	r3, #0
 8013650:	d0f0      	beq.n	8013634 <__gethex+0x320>
 8013652:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8013656:	f104 0314 	add.w	r3, r4, #20
 801365a:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 801365e:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8013662:	f04f 0c00 	mov.w	ip, #0
 8013666:	4618      	mov	r0, r3
 8013668:	f853 2b04 	ldr.w	r2, [r3], #4
 801366c:	f1b2 3fff 	cmp.w	r2, #4294967295
 8013670:	d01b      	beq.n	80136aa <__gethex+0x396>
 8013672:	3201      	adds	r2, #1
 8013674:	6002      	str	r2, [r0, #0]
 8013676:	2d02      	cmp	r5, #2
 8013678:	f104 0314 	add.w	r3, r4, #20
 801367c:	d13c      	bne.n	80136f8 <__gethex+0x3e4>
 801367e:	f8d8 2000 	ldr.w	r2, [r8]
 8013682:	3a01      	subs	r2, #1
 8013684:	42b2      	cmp	r2, r6
 8013686:	d109      	bne.n	801369c <__gethex+0x388>
 8013688:	1171      	asrs	r1, r6, #5
 801368a:	2201      	movs	r2, #1
 801368c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8013690:	f006 061f 	and.w	r6, r6, #31
 8013694:	fa02 f606 	lsl.w	r6, r2, r6
 8013698:	421e      	tst	r6, r3
 801369a:	d13a      	bne.n	8013712 <__gethex+0x3fe>
 801369c:	f045 0520 	orr.w	r5, r5, #32
 80136a0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80136a2:	601c      	str	r4, [r3, #0]
 80136a4:	9b02      	ldr	r3, [sp, #8]
 80136a6:	601f      	str	r7, [r3, #0]
 80136a8:	e6b0      	b.n	801340c <__gethex+0xf8>
 80136aa:	4299      	cmp	r1, r3
 80136ac:	f843 cc04 	str.w	ip, [r3, #-4]
 80136b0:	d8d9      	bhi.n	8013666 <__gethex+0x352>
 80136b2:	68a3      	ldr	r3, [r4, #8]
 80136b4:	459b      	cmp	fp, r3
 80136b6:	db17      	blt.n	80136e8 <__gethex+0x3d4>
 80136b8:	6861      	ldr	r1, [r4, #4]
 80136ba:	9801      	ldr	r0, [sp, #4]
 80136bc:	3101      	adds	r1, #1
 80136be:	f7fd ff03 	bl	80114c8 <_Balloc>
 80136c2:	4681      	mov	r9, r0
 80136c4:	b918      	cbnz	r0, 80136ce <__gethex+0x3ba>
 80136c6:	4b1a      	ldr	r3, [pc, #104]	@ (8013730 <__gethex+0x41c>)
 80136c8:	4602      	mov	r2, r0
 80136ca:	2184      	movs	r1, #132	@ 0x84
 80136cc:	e6c5      	b.n	801345a <__gethex+0x146>
 80136ce:	6922      	ldr	r2, [r4, #16]
 80136d0:	3202      	adds	r2, #2
 80136d2:	f104 010c 	add.w	r1, r4, #12
 80136d6:	0092      	lsls	r2, r2, #2
 80136d8:	300c      	adds	r0, #12
 80136da:	f7fc ff6a 	bl	80105b2 <memcpy>
 80136de:	4621      	mov	r1, r4
 80136e0:	9801      	ldr	r0, [sp, #4]
 80136e2:	f7fd ff31 	bl	8011548 <_Bfree>
 80136e6:	464c      	mov	r4, r9
 80136e8:	6923      	ldr	r3, [r4, #16]
 80136ea:	1c5a      	adds	r2, r3, #1
 80136ec:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80136f0:	6122      	str	r2, [r4, #16]
 80136f2:	2201      	movs	r2, #1
 80136f4:	615a      	str	r2, [r3, #20]
 80136f6:	e7be      	b.n	8013676 <__gethex+0x362>
 80136f8:	6922      	ldr	r2, [r4, #16]
 80136fa:	455a      	cmp	r2, fp
 80136fc:	dd0b      	ble.n	8013716 <__gethex+0x402>
 80136fe:	2101      	movs	r1, #1
 8013700:	4620      	mov	r0, r4
 8013702:	f7ff fda0 	bl	8013246 <rshift>
 8013706:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801370a:	3701      	adds	r7, #1
 801370c:	42bb      	cmp	r3, r7
 801370e:	f6ff aee0 	blt.w	80134d2 <__gethex+0x1be>
 8013712:	2501      	movs	r5, #1
 8013714:	e7c2      	b.n	801369c <__gethex+0x388>
 8013716:	f016 061f 	ands.w	r6, r6, #31
 801371a:	d0fa      	beq.n	8013712 <__gethex+0x3fe>
 801371c:	4453      	add	r3, sl
 801371e:	f1c6 0620 	rsb	r6, r6, #32
 8013722:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8013726:	f7fd ffc1 	bl	80116ac <__hi0bits>
 801372a:	42b0      	cmp	r0, r6
 801372c:	dbe7      	blt.n	80136fe <__gethex+0x3ea>
 801372e:	e7f0      	b.n	8013712 <__gethex+0x3fe>
 8013730:	0801586d 	.word	0x0801586d

08013734 <L_shift>:
 8013734:	f1c2 0208 	rsb	r2, r2, #8
 8013738:	0092      	lsls	r2, r2, #2
 801373a:	b570      	push	{r4, r5, r6, lr}
 801373c:	f1c2 0620 	rsb	r6, r2, #32
 8013740:	6843      	ldr	r3, [r0, #4]
 8013742:	6804      	ldr	r4, [r0, #0]
 8013744:	fa03 f506 	lsl.w	r5, r3, r6
 8013748:	432c      	orrs	r4, r5
 801374a:	40d3      	lsrs	r3, r2
 801374c:	6004      	str	r4, [r0, #0]
 801374e:	f840 3f04 	str.w	r3, [r0, #4]!
 8013752:	4288      	cmp	r0, r1
 8013754:	d3f4      	bcc.n	8013740 <L_shift+0xc>
 8013756:	bd70      	pop	{r4, r5, r6, pc}

08013758 <__match>:
 8013758:	b530      	push	{r4, r5, lr}
 801375a:	6803      	ldr	r3, [r0, #0]
 801375c:	3301      	adds	r3, #1
 801375e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8013762:	b914      	cbnz	r4, 801376a <__match+0x12>
 8013764:	6003      	str	r3, [r0, #0]
 8013766:	2001      	movs	r0, #1
 8013768:	bd30      	pop	{r4, r5, pc}
 801376a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801376e:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 8013772:	2d19      	cmp	r5, #25
 8013774:	bf98      	it	ls
 8013776:	3220      	addls	r2, #32
 8013778:	42a2      	cmp	r2, r4
 801377a:	d0f0      	beq.n	801375e <__match+0x6>
 801377c:	2000      	movs	r0, #0
 801377e:	e7f3      	b.n	8013768 <__match+0x10>

08013780 <__hexnan>:
 8013780:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013784:	680b      	ldr	r3, [r1, #0]
 8013786:	6801      	ldr	r1, [r0, #0]
 8013788:	115e      	asrs	r6, r3, #5
 801378a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 801378e:	f013 031f 	ands.w	r3, r3, #31
 8013792:	b087      	sub	sp, #28
 8013794:	bf18      	it	ne
 8013796:	3604      	addne	r6, #4
 8013798:	2500      	movs	r5, #0
 801379a:	1f37      	subs	r7, r6, #4
 801379c:	4682      	mov	sl, r0
 801379e:	4690      	mov	r8, r2
 80137a0:	9301      	str	r3, [sp, #4]
 80137a2:	f846 5c04 	str.w	r5, [r6, #-4]
 80137a6:	46b9      	mov	r9, r7
 80137a8:	463c      	mov	r4, r7
 80137aa:	9502      	str	r5, [sp, #8]
 80137ac:	46ab      	mov	fp, r5
 80137ae:	784a      	ldrb	r2, [r1, #1]
 80137b0:	1c4b      	adds	r3, r1, #1
 80137b2:	9303      	str	r3, [sp, #12]
 80137b4:	b342      	cbz	r2, 8013808 <__hexnan+0x88>
 80137b6:	4610      	mov	r0, r2
 80137b8:	9105      	str	r1, [sp, #20]
 80137ba:	9204      	str	r2, [sp, #16]
 80137bc:	f7ff fd95 	bl	80132ea <__hexdig_fun>
 80137c0:	2800      	cmp	r0, #0
 80137c2:	d151      	bne.n	8013868 <__hexnan+0xe8>
 80137c4:	9a04      	ldr	r2, [sp, #16]
 80137c6:	9905      	ldr	r1, [sp, #20]
 80137c8:	2a20      	cmp	r2, #32
 80137ca:	d818      	bhi.n	80137fe <__hexnan+0x7e>
 80137cc:	9b02      	ldr	r3, [sp, #8]
 80137ce:	459b      	cmp	fp, r3
 80137d0:	dd13      	ble.n	80137fa <__hexnan+0x7a>
 80137d2:	454c      	cmp	r4, r9
 80137d4:	d206      	bcs.n	80137e4 <__hexnan+0x64>
 80137d6:	2d07      	cmp	r5, #7
 80137d8:	dc04      	bgt.n	80137e4 <__hexnan+0x64>
 80137da:	462a      	mov	r2, r5
 80137dc:	4649      	mov	r1, r9
 80137de:	4620      	mov	r0, r4
 80137e0:	f7ff ffa8 	bl	8013734 <L_shift>
 80137e4:	4544      	cmp	r4, r8
 80137e6:	d952      	bls.n	801388e <__hexnan+0x10e>
 80137e8:	2300      	movs	r3, #0
 80137ea:	f1a4 0904 	sub.w	r9, r4, #4
 80137ee:	f844 3c04 	str.w	r3, [r4, #-4]
 80137f2:	f8cd b008 	str.w	fp, [sp, #8]
 80137f6:	464c      	mov	r4, r9
 80137f8:	461d      	mov	r5, r3
 80137fa:	9903      	ldr	r1, [sp, #12]
 80137fc:	e7d7      	b.n	80137ae <__hexnan+0x2e>
 80137fe:	2a29      	cmp	r2, #41	@ 0x29
 8013800:	d157      	bne.n	80138b2 <__hexnan+0x132>
 8013802:	3102      	adds	r1, #2
 8013804:	f8ca 1000 	str.w	r1, [sl]
 8013808:	f1bb 0f00 	cmp.w	fp, #0
 801380c:	d051      	beq.n	80138b2 <__hexnan+0x132>
 801380e:	454c      	cmp	r4, r9
 8013810:	d206      	bcs.n	8013820 <__hexnan+0xa0>
 8013812:	2d07      	cmp	r5, #7
 8013814:	dc04      	bgt.n	8013820 <__hexnan+0xa0>
 8013816:	462a      	mov	r2, r5
 8013818:	4649      	mov	r1, r9
 801381a:	4620      	mov	r0, r4
 801381c:	f7ff ff8a 	bl	8013734 <L_shift>
 8013820:	4544      	cmp	r4, r8
 8013822:	d936      	bls.n	8013892 <__hexnan+0x112>
 8013824:	f1a8 0204 	sub.w	r2, r8, #4
 8013828:	4623      	mov	r3, r4
 801382a:	f853 1b04 	ldr.w	r1, [r3], #4
 801382e:	f842 1f04 	str.w	r1, [r2, #4]!
 8013832:	429f      	cmp	r7, r3
 8013834:	d2f9      	bcs.n	801382a <__hexnan+0xaa>
 8013836:	1b3b      	subs	r3, r7, r4
 8013838:	f023 0303 	bic.w	r3, r3, #3
 801383c:	3304      	adds	r3, #4
 801383e:	3401      	adds	r4, #1
 8013840:	3e03      	subs	r6, #3
 8013842:	42b4      	cmp	r4, r6
 8013844:	bf88      	it	hi
 8013846:	2304      	movhi	r3, #4
 8013848:	4443      	add	r3, r8
 801384a:	2200      	movs	r2, #0
 801384c:	f843 2b04 	str.w	r2, [r3], #4
 8013850:	429f      	cmp	r7, r3
 8013852:	d2fb      	bcs.n	801384c <__hexnan+0xcc>
 8013854:	683b      	ldr	r3, [r7, #0]
 8013856:	b91b      	cbnz	r3, 8013860 <__hexnan+0xe0>
 8013858:	4547      	cmp	r7, r8
 801385a:	d128      	bne.n	80138ae <__hexnan+0x12e>
 801385c:	2301      	movs	r3, #1
 801385e:	603b      	str	r3, [r7, #0]
 8013860:	2005      	movs	r0, #5
 8013862:	b007      	add	sp, #28
 8013864:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013868:	3501      	adds	r5, #1
 801386a:	2d08      	cmp	r5, #8
 801386c:	f10b 0b01 	add.w	fp, fp, #1
 8013870:	dd06      	ble.n	8013880 <__hexnan+0x100>
 8013872:	4544      	cmp	r4, r8
 8013874:	d9c1      	bls.n	80137fa <__hexnan+0x7a>
 8013876:	2300      	movs	r3, #0
 8013878:	f844 3c04 	str.w	r3, [r4, #-4]
 801387c:	2501      	movs	r5, #1
 801387e:	3c04      	subs	r4, #4
 8013880:	6822      	ldr	r2, [r4, #0]
 8013882:	f000 000f 	and.w	r0, r0, #15
 8013886:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 801388a:	6020      	str	r0, [r4, #0]
 801388c:	e7b5      	b.n	80137fa <__hexnan+0x7a>
 801388e:	2508      	movs	r5, #8
 8013890:	e7b3      	b.n	80137fa <__hexnan+0x7a>
 8013892:	9b01      	ldr	r3, [sp, #4]
 8013894:	2b00      	cmp	r3, #0
 8013896:	d0dd      	beq.n	8013854 <__hexnan+0xd4>
 8013898:	f1c3 0320 	rsb	r3, r3, #32
 801389c:	f04f 32ff 	mov.w	r2, #4294967295
 80138a0:	40da      	lsrs	r2, r3
 80138a2:	f856 3c04 	ldr.w	r3, [r6, #-4]
 80138a6:	4013      	ands	r3, r2
 80138a8:	f846 3c04 	str.w	r3, [r6, #-4]
 80138ac:	e7d2      	b.n	8013854 <__hexnan+0xd4>
 80138ae:	3f04      	subs	r7, #4
 80138b0:	e7d0      	b.n	8013854 <__hexnan+0xd4>
 80138b2:	2004      	movs	r0, #4
 80138b4:	e7d5      	b.n	8013862 <__hexnan+0xe2>

080138b6 <__ascii_mbtowc>:
 80138b6:	b082      	sub	sp, #8
 80138b8:	b901      	cbnz	r1, 80138bc <__ascii_mbtowc+0x6>
 80138ba:	a901      	add	r1, sp, #4
 80138bc:	b142      	cbz	r2, 80138d0 <__ascii_mbtowc+0x1a>
 80138be:	b14b      	cbz	r3, 80138d4 <__ascii_mbtowc+0x1e>
 80138c0:	7813      	ldrb	r3, [r2, #0]
 80138c2:	600b      	str	r3, [r1, #0]
 80138c4:	7812      	ldrb	r2, [r2, #0]
 80138c6:	1e10      	subs	r0, r2, #0
 80138c8:	bf18      	it	ne
 80138ca:	2001      	movne	r0, #1
 80138cc:	b002      	add	sp, #8
 80138ce:	4770      	bx	lr
 80138d0:	4610      	mov	r0, r2
 80138d2:	e7fb      	b.n	80138cc <__ascii_mbtowc+0x16>
 80138d4:	f06f 0001 	mvn.w	r0, #1
 80138d8:	e7f8      	b.n	80138cc <__ascii_mbtowc+0x16>

080138da <_realloc_r>:
 80138da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80138de:	4607      	mov	r7, r0
 80138e0:	4614      	mov	r4, r2
 80138e2:	460d      	mov	r5, r1
 80138e4:	b921      	cbnz	r1, 80138f0 <_realloc_r+0x16>
 80138e6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80138ea:	4611      	mov	r1, r2
 80138ec:	f7fd bd60 	b.w	80113b0 <_malloc_r>
 80138f0:	b92a      	cbnz	r2, 80138fe <_realloc_r+0x24>
 80138f2:	f7fd fce9 	bl	80112c8 <_free_r>
 80138f6:	4625      	mov	r5, r4
 80138f8:	4628      	mov	r0, r5
 80138fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80138fe:	f000 f86b 	bl	80139d8 <_malloc_usable_size_r>
 8013902:	4284      	cmp	r4, r0
 8013904:	4606      	mov	r6, r0
 8013906:	d802      	bhi.n	801390e <_realloc_r+0x34>
 8013908:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 801390c:	d8f4      	bhi.n	80138f8 <_realloc_r+0x1e>
 801390e:	4621      	mov	r1, r4
 8013910:	4638      	mov	r0, r7
 8013912:	f7fd fd4d 	bl	80113b0 <_malloc_r>
 8013916:	4680      	mov	r8, r0
 8013918:	b908      	cbnz	r0, 801391e <_realloc_r+0x44>
 801391a:	4645      	mov	r5, r8
 801391c:	e7ec      	b.n	80138f8 <_realloc_r+0x1e>
 801391e:	42b4      	cmp	r4, r6
 8013920:	4622      	mov	r2, r4
 8013922:	4629      	mov	r1, r5
 8013924:	bf28      	it	cs
 8013926:	4632      	movcs	r2, r6
 8013928:	f7fc fe43 	bl	80105b2 <memcpy>
 801392c:	4629      	mov	r1, r5
 801392e:	4638      	mov	r0, r7
 8013930:	f7fd fcca 	bl	80112c8 <_free_r>
 8013934:	e7f1      	b.n	801391a <_realloc_r+0x40>

08013936 <__ascii_wctomb>:
 8013936:	4603      	mov	r3, r0
 8013938:	4608      	mov	r0, r1
 801393a:	b141      	cbz	r1, 801394e <__ascii_wctomb+0x18>
 801393c:	2aff      	cmp	r2, #255	@ 0xff
 801393e:	d904      	bls.n	801394a <__ascii_wctomb+0x14>
 8013940:	228a      	movs	r2, #138	@ 0x8a
 8013942:	601a      	str	r2, [r3, #0]
 8013944:	f04f 30ff 	mov.w	r0, #4294967295
 8013948:	4770      	bx	lr
 801394a:	700a      	strb	r2, [r1, #0]
 801394c:	2001      	movs	r0, #1
 801394e:	4770      	bx	lr

08013950 <_raise_r>:
 8013950:	291f      	cmp	r1, #31
 8013952:	b538      	push	{r3, r4, r5, lr}
 8013954:	4605      	mov	r5, r0
 8013956:	460c      	mov	r4, r1
 8013958:	d904      	bls.n	8013964 <_raise_r+0x14>
 801395a:	2316      	movs	r3, #22
 801395c:	6003      	str	r3, [r0, #0]
 801395e:	f04f 30ff 	mov.w	r0, #4294967295
 8013962:	bd38      	pop	{r3, r4, r5, pc}
 8013964:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8013966:	b112      	cbz	r2, 801396e <_raise_r+0x1e>
 8013968:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801396c:	b94b      	cbnz	r3, 8013982 <_raise_r+0x32>
 801396e:	4628      	mov	r0, r5
 8013970:	f000 f830 	bl	80139d4 <_getpid_r>
 8013974:	4622      	mov	r2, r4
 8013976:	4601      	mov	r1, r0
 8013978:	4628      	mov	r0, r5
 801397a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801397e:	f000 b817 	b.w	80139b0 <_kill_r>
 8013982:	2b01      	cmp	r3, #1
 8013984:	d00a      	beq.n	801399c <_raise_r+0x4c>
 8013986:	1c59      	adds	r1, r3, #1
 8013988:	d103      	bne.n	8013992 <_raise_r+0x42>
 801398a:	2316      	movs	r3, #22
 801398c:	6003      	str	r3, [r0, #0]
 801398e:	2001      	movs	r0, #1
 8013990:	e7e7      	b.n	8013962 <_raise_r+0x12>
 8013992:	2100      	movs	r1, #0
 8013994:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8013998:	4620      	mov	r0, r4
 801399a:	4798      	blx	r3
 801399c:	2000      	movs	r0, #0
 801399e:	e7e0      	b.n	8013962 <_raise_r+0x12>

080139a0 <raise>:
 80139a0:	4b02      	ldr	r3, [pc, #8]	@ (80139ac <raise+0xc>)
 80139a2:	4601      	mov	r1, r0
 80139a4:	6818      	ldr	r0, [r3, #0]
 80139a6:	f7ff bfd3 	b.w	8013950 <_raise_r>
 80139aa:	bf00      	nop
 80139ac:	2000d140 	.word	0x2000d140

080139b0 <_kill_r>:
 80139b0:	b538      	push	{r3, r4, r5, lr}
 80139b2:	4d07      	ldr	r5, [pc, #28]	@ (80139d0 <_kill_r+0x20>)
 80139b4:	2300      	movs	r3, #0
 80139b6:	4604      	mov	r4, r0
 80139b8:	4608      	mov	r0, r1
 80139ba:	4611      	mov	r1, r2
 80139bc:	602b      	str	r3, [r5, #0]
 80139be:	f7ed fb55 	bl	800106c <_kill>
 80139c2:	1c43      	adds	r3, r0, #1
 80139c4:	d102      	bne.n	80139cc <_kill_r+0x1c>
 80139c6:	682b      	ldr	r3, [r5, #0]
 80139c8:	b103      	cbz	r3, 80139cc <_kill_r+0x1c>
 80139ca:	6023      	str	r3, [r4, #0]
 80139cc:	bd38      	pop	{r3, r4, r5, pc}
 80139ce:	bf00      	nop
 80139d0:	20016524 	.word	0x20016524

080139d4 <_getpid_r>:
 80139d4:	f7ed bb3c 	b.w	8001050 <_getpid>

080139d8 <_malloc_usable_size_r>:
 80139d8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80139dc:	1f18      	subs	r0, r3, #4
 80139de:	2b00      	cmp	r3, #0
 80139e0:	bfbc      	itt	lt
 80139e2:	580b      	ldrlt	r3, [r1, r0]
 80139e4:	18c0      	addlt	r0, r0, r3
 80139e6:	4770      	bx	lr

080139e8 <_init>:
 80139e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80139ea:	bf00      	nop
 80139ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80139ee:	bc08      	pop	{r3}
 80139f0:	469e      	mov	lr, r3
 80139f2:	4770      	bx	lr

080139f4 <_fini>:
 80139f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80139f6:	bf00      	nop
 80139f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80139fa:	bc08      	pop	{r3}
 80139fc:	469e      	mov	lr, r3
 80139fe:	4770      	bx	lr
