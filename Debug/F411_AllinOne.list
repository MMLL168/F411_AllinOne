
F411_AllinOne.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00013968  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000021a4  08013b08  08013b08  00014b08  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08015cac  08015cac  000242fc  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08015cac  08015cac  00016cac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08015cb4  08015cb4  000242fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08015cb4  08015cb4  00016cb4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08015cb8  08015cb8  00016cb8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000d2fc  20000000  08015cbc  00017000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00009238  2000d2fc  08022fb8  000242fc  2**2
                  ALLOC
 10 ._user_heap_stack 00001004  20016534  08022fb8  00024534  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000242fc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001e4ef  00000000  00000000  0002432c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004ce1  00000000  00000000  0004281b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000018b8  00000000  00000000  00047500  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001307  00000000  00000000  00048db8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001d8f8  00000000  00000000  0004a0bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00024edd  00000000  00000000  000679b7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a3e60  00000000  00000000  0008c894  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001306f4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007ab8  00000000  00000000  00130738  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004f  00000000  00000000  001381f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000d2fc 	.word	0x2000d2fc
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08013af0 	.word	0x08013af0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000d300 	.word	0x2000d300
 80001dc:	08013af0 	.word	0x08013af0

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <strlen>:
 80002a0:	4603      	mov	r3, r0
 80002a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002a6:	2a00      	cmp	r2, #0
 80002a8:	d1fb      	bne.n	80002a2 <strlen+0x2>
 80002aa:	1a18      	subs	r0, r3, r0
 80002ac:	3801      	subs	r0, #1
 80002ae:	4770      	bx	lr

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	@ 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_d2uiz>:
 8000bd8:	004a      	lsls	r2, r1, #1
 8000bda:	d211      	bcs.n	8000c00 <__aeabi_d2uiz+0x28>
 8000bdc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000be0:	d211      	bcs.n	8000c06 <__aeabi_d2uiz+0x2e>
 8000be2:	d50d      	bpl.n	8000c00 <__aeabi_d2uiz+0x28>
 8000be4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000be8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bec:	d40e      	bmi.n	8000c0c <__aeabi_d2uiz+0x34>
 8000bee:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bf2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bf6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bfa:	fa23 f002 	lsr.w	r0, r3, r2
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c0a:	d102      	bne.n	8000c12 <__aeabi_d2uiz+0x3a>
 8000c0c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c10:	4770      	bx	lr
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	4770      	bx	lr

08000c18 <__aeabi_d2f>:
 8000c18:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c1c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c20:	bf24      	itt	cs
 8000c22:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c26:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c2a:	d90d      	bls.n	8000c48 <__aeabi_d2f+0x30>
 8000c2c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c30:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c34:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c38:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c3c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c40:	bf08      	it	eq
 8000c42:	f020 0001 	biceq.w	r0, r0, #1
 8000c46:	4770      	bx	lr
 8000c48:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c4c:	d121      	bne.n	8000c92 <__aeabi_d2f+0x7a>
 8000c4e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c52:	bfbc      	itt	lt
 8000c54:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c58:	4770      	bxlt	lr
 8000c5a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c5e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c62:	f1c2 0218 	rsb	r2, r2, #24
 8000c66:	f1c2 0c20 	rsb	ip, r2, #32
 8000c6a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c6e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c72:	bf18      	it	ne
 8000c74:	f040 0001 	orrne.w	r0, r0, #1
 8000c78:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c7c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c80:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c84:	ea40 000c 	orr.w	r0, r0, ip
 8000c88:	fa23 f302 	lsr.w	r3, r3, r2
 8000c8c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c90:	e7cc      	b.n	8000c2c <__aeabi_d2f+0x14>
 8000c92:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c96:	d107      	bne.n	8000ca8 <__aeabi_d2f+0x90>
 8000c98:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c9c:	bf1e      	ittt	ne
 8000c9e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000ca2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000ca6:	4770      	bxne	lr
 8000ca8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000cac:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000cb0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_uldivmod>:
 8000cb8:	b953      	cbnz	r3, 8000cd0 <__aeabi_uldivmod+0x18>
 8000cba:	b94a      	cbnz	r2, 8000cd0 <__aeabi_uldivmod+0x18>
 8000cbc:	2900      	cmp	r1, #0
 8000cbe:	bf08      	it	eq
 8000cc0:	2800      	cmpeq	r0, #0
 8000cc2:	bf1c      	itt	ne
 8000cc4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cc8:	f04f 30ff 	movne.w	r0, #4294967295
 8000ccc:	f000 b9be 	b.w	800104c <__aeabi_idiv0>
 8000cd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cd8:	f000 f83c 	bl	8000d54 <__udivmoddi4>
 8000cdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ce0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ce4:	b004      	add	sp, #16
 8000ce6:	4770      	bx	lr

08000ce8 <__aeabi_d2lz>:
 8000ce8:	b538      	push	{r3, r4, r5, lr}
 8000cea:	2200      	movs	r2, #0
 8000cec:	2300      	movs	r3, #0
 8000cee:	4604      	mov	r4, r0
 8000cf0:	460d      	mov	r5, r1
 8000cf2:	f7ff ff0b 	bl	8000b0c <__aeabi_dcmplt>
 8000cf6:	b928      	cbnz	r0, 8000d04 <__aeabi_d2lz+0x1c>
 8000cf8:	4620      	mov	r0, r4
 8000cfa:	4629      	mov	r1, r5
 8000cfc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d00:	f000 b80a 	b.w	8000d18 <__aeabi_d2ulz>
 8000d04:	4620      	mov	r0, r4
 8000d06:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000d0a:	f000 f805 	bl	8000d18 <__aeabi_d2ulz>
 8000d0e:	4240      	negs	r0, r0
 8000d10:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d14:	bd38      	pop	{r3, r4, r5, pc}
 8000d16:	bf00      	nop

08000d18 <__aeabi_d2ulz>:
 8000d18:	b5d0      	push	{r4, r6, r7, lr}
 8000d1a:	4b0c      	ldr	r3, [pc, #48]	@ (8000d4c <__aeabi_d2ulz+0x34>)
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	4606      	mov	r6, r0
 8000d20:	460f      	mov	r7, r1
 8000d22:	f7ff fc81 	bl	8000628 <__aeabi_dmul>
 8000d26:	f7ff ff57 	bl	8000bd8 <__aeabi_d2uiz>
 8000d2a:	4604      	mov	r4, r0
 8000d2c:	f7ff fc02 	bl	8000534 <__aeabi_ui2d>
 8000d30:	4b07      	ldr	r3, [pc, #28]	@ (8000d50 <__aeabi_d2ulz+0x38>)
 8000d32:	2200      	movs	r2, #0
 8000d34:	f7ff fc78 	bl	8000628 <__aeabi_dmul>
 8000d38:	4602      	mov	r2, r0
 8000d3a:	460b      	mov	r3, r1
 8000d3c:	4630      	mov	r0, r6
 8000d3e:	4639      	mov	r1, r7
 8000d40:	f7ff faba 	bl	80002b8 <__aeabi_dsub>
 8000d44:	f7ff ff48 	bl	8000bd8 <__aeabi_d2uiz>
 8000d48:	4621      	mov	r1, r4
 8000d4a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d4c:	3df00000 	.word	0x3df00000
 8000d50:	41f00000 	.word	0x41f00000

08000d54 <__udivmoddi4>:
 8000d54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d58:	9d08      	ldr	r5, [sp, #32]
 8000d5a:	468e      	mov	lr, r1
 8000d5c:	4604      	mov	r4, r0
 8000d5e:	4688      	mov	r8, r1
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	d14a      	bne.n	8000dfa <__udivmoddi4+0xa6>
 8000d64:	428a      	cmp	r2, r1
 8000d66:	4617      	mov	r7, r2
 8000d68:	d962      	bls.n	8000e30 <__udivmoddi4+0xdc>
 8000d6a:	fab2 f682 	clz	r6, r2
 8000d6e:	b14e      	cbz	r6, 8000d84 <__udivmoddi4+0x30>
 8000d70:	f1c6 0320 	rsb	r3, r6, #32
 8000d74:	fa01 f806 	lsl.w	r8, r1, r6
 8000d78:	fa20 f303 	lsr.w	r3, r0, r3
 8000d7c:	40b7      	lsls	r7, r6
 8000d7e:	ea43 0808 	orr.w	r8, r3, r8
 8000d82:	40b4      	lsls	r4, r6
 8000d84:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d88:	fa1f fc87 	uxth.w	ip, r7
 8000d8c:	fbb8 f1fe 	udiv	r1, r8, lr
 8000d90:	0c23      	lsrs	r3, r4, #16
 8000d92:	fb0e 8811 	mls	r8, lr, r1, r8
 8000d96:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d9a:	fb01 f20c 	mul.w	r2, r1, ip
 8000d9e:	429a      	cmp	r2, r3
 8000da0:	d909      	bls.n	8000db6 <__udivmoddi4+0x62>
 8000da2:	18fb      	adds	r3, r7, r3
 8000da4:	f101 30ff 	add.w	r0, r1, #4294967295
 8000da8:	f080 80ea 	bcs.w	8000f80 <__udivmoddi4+0x22c>
 8000dac:	429a      	cmp	r2, r3
 8000dae:	f240 80e7 	bls.w	8000f80 <__udivmoddi4+0x22c>
 8000db2:	3902      	subs	r1, #2
 8000db4:	443b      	add	r3, r7
 8000db6:	1a9a      	subs	r2, r3, r2
 8000db8:	b2a3      	uxth	r3, r4
 8000dba:	fbb2 f0fe 	udiv	r0, r2, lr
 8000dbe:	fb0e 2210 	mls	r2, lr, r0, r2
 8000dc2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000dc6:	fb00 fc0c 	mul.w	ip, r0, ip
 8000dca:	459c      	cmp	ip, r3
 8000dcc:	d909      	bls.n	8000de2 <__udivmoddi4+0x8e>
 8000dce:	18fb      	adds	r3, r7, r3
 8000dd0:	f100 32ff 	add.w	r2, r0, #4294967295
 8000dd4:	f080 80d6 	bcs.w	8000f84 <__udivmoddi4+0x230>
 8000dd8:	459c      	cmp	ip, r3
 8000dda:	f240 80d3 	bls.w	8000f84 <__udivmoddi4+0x230>
 8000dde:	443b      	add	r3, r7
 8000de0:	3802      	subs	r0, #2
 8000de2:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000de6:	eba3 030c 	sub.w	r3, r3, ip
 8000dea:	2100      	movs	r1, #0
 8000dec:	b11d      	cbz	r5, 8000df6 <__udivmoddi4+0xa2>
 8000dee:	40f3      	lsrs	r3, r6
 8000df0:	2200      	movs	r2, #0
 8000df2:	e9c5 3200 	strd	r3, r2, [r5]
 8000df6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dfa:	428b      	cmp	r3, r1
 8000dfc:	d905      	bls.n	8000e0a <__udivmoddi4+0xb6>
 8000dfe:	b10d      	cbz	r5, 8000e04 <__udivmoddi4+0xb0>
 8000e00:	e9c5 0100 	strd	r0, r1, [r5]
 8000e04:	2100      	movs	r1, #0
 8000e06:	4608      	mov	r0, r1
 8000e08:	e7f5      	b.n	8000df6 <__udivmoddi4+0xa2>
 8000e0a:	fab3 f183 	clz	r1, r3
 8000e0e:	2900      	cmp	r1, #0
 8000e10:	d146      	bne.n	8000ea0 <__udivmoddi4+0x14c>
 8000e12:	4573      	cmp	r3, lr
 8000e14:	d302      	bcc.n	8000e1c <__udivmoddi4+0xc8>
 8000e16:	4282      	cmp	r2, r0
 8000e18:	f200 8105 	bhi.w	8001026 <__udivmoddi4+0x2d2>
 8000e1c:	1a84      	subs	r4, r0, r2
 8000e1e:	eb6e 0203 	sbc.w	r2, lr, r3
 8000e22:	2001      	movs	r0, #1
 8000e24:	4690      	mov	r8, r2
 8000e26:	2d00      	cmp	r5, #0
 8000e28:	d0e5      	beq.n	8000df6 <__udivmoddi4+0xa2>
 8000e2a:	e9c5 4800 	strd	r4, r8, [r5]
 8000e2e:	e7e2      	b.n	8000df6 <__udivmoddi4+0xa2>
 8000e30:	2a00      	cmp	r2, #0
 8000e32:	f000 8090 	beq.w	8000f56 <__udivmoddi4+0x202>
 8000e36:	fab2 f682 	clz	r6, r2
 8000e3a:	2e00      	cmp	r6, #0
 8000e3c:	f040 80a4 	bne.w	8000f88 <__udivmoddi4+0x234>
 8000e40:	1a8a      	subs	r2, r1, r2
 8000e42:	0c03      	lsrs	r3, r0, #16
 8000e44:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e48:	b280      	uxth	r0, r0
 8000e4a:	b2bc      	uxth	r4, r7
 8000e4c:	2101      	movs	r1, #1
 8000e4e:	fbb2 fcfe 	udiv	ip, r2, lr
 8000e52:	fb0e 221c 	mls	r2, lr, ip, r2
 8000e56:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000e5a:	fb04 f20c 	mul.w	r2, r4, ip
 8000e5e:	429a      	cmp	r2, r3
 8000e60:	d907      	bls.n	8000e72 <__udivmoddi4+0x11e>
 8000e62:	18fb      	adds	r3, r7, r3
 8000e64:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000e68:	d202      	bcs.n	8000e70 <__udivmoddi4+0x11c>
 8000e6a:	429a      	cmp	r2, r3
 8000e6c:	f200 80e0 	bhi.w	8001030 <__udivmoddi4+0x2dc>
 8000e70:	46c4      	mov	ip, r8
 8000e72:	1a9b      	subs	r3, r3, r2
 8000e74:	fbb3 f2fe 	udiv	r2, r3, lr
 8000e78:	fb0e 3312 	mls	r3, lr, r2, r3
 8000e7c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000e80:	fb02 f404 	mul.w	r4, r2, r4
 8000e84:	429c      	cmp	r4, r3
 8000e86:	d907      	bls.n	8000e98 <__udivmoddi4+0x144>
 8000e88:	18fb      	adds	r3, r7, r3
 8000e8a:	f102 30ff 	add.w	r0, r2, #4294967295
 8000e8e:	d202      	bcs.n	8000e96 <__udivmoddi4+0x142>
 8000e90:	429c      	cmp	r4, r3
 8000e92:	f200 80ca 	bhi.w	800102a <__udivmoddi4+0x2d6>
 8000e96:	4602      	mov	r2, r0
 8000e98:	1b1b      	subs	r3, r3, r4
 8000e9a:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000e9e:	e7a5      	b.n	8000dec <__udivmoddi4+0x98>
 8000ea0:	f1c1 0620 	rsb	r6, r1, #32
 8000ea4:	408b      	lsls	r3, r1
 8000ea6:	fa22 f706 	lsr.w	r7, r2, r6
 8000eaa:	431f      	orrs	r7, r3
 8000eac:	fa0e f401 	lsl.w	r4, lr, r1
 8000eb0:	fa20 f306 	lsr.w	r3, r0, r6
 8000eb4:	fa2e fe06 	lsr.w	lr, lr, r6
 8000eb8:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000ebc:	4323      	orrs	r3, r4
 8000ebe:	fa00 f801 	lsl.w	r8, r0, r1
 8000ec2:	fa1f fc87 	uxth.w	ip, r7
 8000ec6:	fbbe f0f9 	udiv	r0, lr, r9
 8000eca:	0c1c      	lsrs	r4, r3, #16
 8000ecc:	fb09 ee10 	mls	lr, r9, r0, lr
 8000ed0:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000ed4:	fb00 fe0c 	mul.w	lr, r0, ip
 8000ed8:	45a6      	cmp	lr, r4
 8000eda:	fa02 f201 	lsl.w	r2, r2, r1
 8000ede:	d909      	bls.n	8000ef4 <__udivmoddi4+0x1a0>
 8000ee0:	193c      	adds	r4, r7, r4
 8000ee2:	f100 3aff 	add.w	sl, r0, #4294967295
 8000ee6:	f080 809c 	bcs.w	8001022 <__udivmoddi4+0x2ce>
 8000eea:	45a6      	cmp	lr, r4
 8000eec:	f240 8099 	bls.w	8001022 <__udivmoddi4+0x2ce>
 8000ef0:	3802      	subs	r0, #2
 8000ef2:	443c      	add	r4, r7
 8000ef4:	eba4 040e 	sub.w	r4, r4, lr
 8000ef8:	fa1f fe83 	uxth.w	lr, r3
 8000efc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000f00:	fb09 4413 	mls	r4, r9, r3, r4
 8000f04:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000f08:	fb03 fc0c 	mul.w	ip, r3, ip
 8000f0c:	45a4      	cmp	ip, r4
 8000f0e:	d908      	bls.n	8000f22 <__udivmoddi4+0x1ce>
 8000f10:	193c      	adds	r4, r7, r4
 8000f12:	f103 3eff 	add.w	lr, r3, #4294967295
 8000f16:	f080 8082 	bcs.w	800101e <__udivmoddi4+0x2ca>
 8000f1a:	45a4      	cmp	ip, r4
 8000f1c:	d97f      	bls.n	800101e <__udivmoddi4+0x2ca>
 8000f1e:	3b02      	subs	r3, #2
 8000f20:	443c      	add	r4, r7
 8000f22:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000f26:	eba4 040c 	sub.w	r4, r4, ip
 8000f2a:	fba0 ec02 	umull	lr, ip, r0, r2
 8000f2e:	4564      	cmp	r4, ip
 8000f30:	4673      	mov	r3, lr
 8000f32:	46e1      	mov	r9, ip
 8000f34:	d362      	bcc.n	8000ffc <__udivmoddi4+0x2a8>
 8000f36:	d05f      	beq.n	8000ff8 <__udivmoddi4+0x2a4>
 8000f38:	b15d      	cbz	r5, 8000f52 <__udivmoddi4+0x1fe>
 8000f3a:	ebb8 0203 	subs.w	r2, r8, r3
 8000f3e:	eb64 0409 	sbc.w	r4, r4, r9
 8000f42:	fa04 f606 	lsl.w	r6, r4, r6
 8000f46:	fa22 f301 	lsr.w	r3, r2, r1
 8000f4a:	431e      	orrs	r6, r3
 8000f4c:	40cc      	lsrs	r4, r1
 8000f4e:	e9c5 6400 	strd	r6, r4, [r5]
 8000f52:	2100      	movs	r1, #0
 8000f54:	e74f      	b.n	8000df6 <__udivmoddi4+0xa2>
 8000f56:	fbb1 fcf2 	udiv	ip, r1, r2
 8000f5a:	0c01      	lsrs	r1, r0, #16
 8000f5c:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000f60:	b280      	uxth	r0, r0
 8000f62:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000f66:	463b      	mov	r3, r7
 8000f68:	4638      	mov	r0, r7
 8000f6a:	463c      	mov	r4, r7
 8000f6c:	46b8      	mov	r8, r7
 8000f6e:	46be      	mov	lr, r7
 8000f70:	2620      	movs	r6, #32
 8000f72:	fbb1 f1f7 	udiv	r1, r1, r7
 8000f76:	eba2 0208 	sub.w	r2, r2, r8
 8000f7a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000f7e:	e766      	b.n	8000e4e <__udivmoddi4+0xfa>
 8000f80:	4601      	mov	r1, r0
 8000f82:	e718      	b.n	8000db6 <__udivmoddi4+0x62>
 8000f84:	4610      	mov	r0, r2
 8000f86:	e72c      	b.n	8000de2 <__udivmoddi4+0x8e>
 8000f88:	f1c6 0220 	rsb	r2, r6, #32
 8000f8c:	fa2e f302 	lsr.w	r3, lr, r2
 8000f90:	40b7      	lsls	r7, r6
 8000f92:	40b1      	lsls	r1, r6
 8000f94:	fa20 f202 	lsr.w	r2, r0, r2
 8000f98:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000f9c:	430a      	orrs	r2, r1
 8000f9e:	fbb3 f8fe 	udiv	r8, r3, lr
 8000fa2:	b2bc      	uxth	r4, r7
 8000fa4:	fb0e 3318 	mls	r3, lr, r8, r3
 8000fa8:	0c11      	lsrs	r1, r2, #16
 8000faa:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000fae:	fb08 f904 	mul.w	r9, r8, r4
 8000fb2:	40b0      	lsls	r0, r6
 8000fb4:	4589      	cmp	r9, r1
 8000fb6:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000fba:	b280      	uxth	r0, r0
 8000fbc:	d93e      	bls.n	800103c <__udivmoddi4+0x2e8>
 8000fbe:	1879      	adds	r1, r7, r1
 8000fc0:	f108 3cff 	add.w	ip, r8, #4294967295
 8000fc4:	d201      	bcs.n	8000fca <__udivmoddi4+0x276>
 8000fc6:	4589      	cmp	r9, r1
 8000fc8:	d81f      	bhi.n	800100a <__udivmoddi4+0x2b6>
 8000fca:	eba1 0109 	sub.w	r1, r1, r9
 8000fce:	fbb1 f9fe 	udiv	r9, r1, lr
 8000fd2:	fb09 f804 	mul.w	r8, r9, r4
 8000fd6:	fb0e 1119 	mls	r1, lr, r9, r1
 8000fda:	b292      	uxth	r2, r2
 8000fdc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000fe0:	4542      	cmp	r2, r8
 8000fe2:	d229      	bcs.n	8001038 <__udivmoddi4+0x2e4>
 8000fe4:	18ba      	adds	r2, r7, r2
 8000fe6:	f109 31ff 	add.w	r1, r9, #4294967295
 8000fea:	d2c4      	bcs.n	8000f76 <__udivmoddi4+0x222>
 8000fec:	4542      	cmp	r2, r8
 8000fee:	d2c2      	bcs.n	8000f76 <__udivmoddi4+0x222>
 8000ff0:	f1a9 0102 	sub.w	r1, r9, #2
 8000ff4:	443a      	add	r2, r7
 8000ff6:	e7be      	b.n	8000f76 <__udivmoddi4+0x222>
 8000ff8:	45f0      	cmp	r8, lr
 8000ffa:	d29d      	bcs.n	8000f38 <__udivmoddi4+0x1e4>
 8000ffc:	ebbe 0302 	subs.w	r3, lr, r2
 8001000:	eb6c 0c07 	sbc.w	ip, ip, r7
 8001004:	3801      	subs	r0, #1
 8001006:	46e1      	mov	r9, ip
 8001008:	e796      	b.n	8000f38 <__udivmoddi4+0x1e4>
 800100a:	eba7 0909 	sub.w	r9, r7, r9
 800100e:	4449      	add	r1, r9
 8001010:	f1a8 0c02 	sub.w	ip, r8, #2
 8001014:	fbb1 f9fe 	udiv	r9, r1, lr
 8001018:	fb09 f804 	mul.w	r8, r9, r4
 800101c:	e7db      	b.n	8000fd6 <__udivmoddi4+0x282>
 800101e:	4673      	mov	r3, lr
 8001020:	e77f      	b.n	8000f22 <__udivmoddi4+0x1ce>
 8001022:	4650      	mov	r0, sl
 8001024:	e766      	b.n	8000ef4 <__udivmoddi4+0x1a0>
 8001026:	4608      	mov	r0, r1
 8001028:	e6fd      	b.n	8000e26 <__udivmoddi4+0xd2>
 800102a:	443b      	add	r3, r7
 800102c:	3a02      	subs	r2, #2
 800102e:	e733      	b.n	8000e98 <__udivmoddi4+0x144>
 8001030:	f1ac 0c02 	sub.w	ip, ip, #2
 8001034:	443b      	add	r3, r7
 8001036:	e71c      	b.n	8000e72 <__udivmoddi4+0x11e>
 8001038:	4649      	mov	r1, r9
 800103a:	e79c      	b.n	8000f76 <__udivmoddi4+0x222>
 800103c:	eba1 0109 	sub.w	r1, r1, r9
 8001040:	46c4      	mov	ip, r8
 8001042:	fbb1 f9fe 	udiv	r9, r1, lr
 8001046:	fb09 f804 	mul.w	r8, r9, r4
 800104a:	e7c4      	b.n	8000fd6 <__udivmoddi4+0x282>

0800104c <__aeabi_idiv0>:
 800104c:	4770      	bx	lr
 800104e:	bf00      	nop

08001050 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001050:	b480      	push	{r7}
 8001052:	af00      	add	r7, sp, #0
	errno = ENOSYS;
 8001054:	4b04      	ldr	r3, [pc, #16]	@ (8001068 <_getpid+0x18>)
 8001056:	2258      	movs	r2, #88	@ 0x58
 8001058:	601a      	str	r2, [r3, #0]
	return -1;
 800105a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800105e:	4618      	mov	r0, r3
 8001060:	46bd      	mov	sp, r7
 8001062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001066:	4770      	bx	lr
 8001068:	20016524 	.word	0x20016524

0800106c <_kill>:
  errno = ENOSYS;
  return -1;
}

int _kill(int32_t pid, int32_t sig)
{
 800106c:	b480      	push	{r7}
 800106e:	b083      	sub	sp, #12
 8001070:	af00      	add	r7, sp, #0
 8001072:	6078      	str	r0, [r7, #4]
 8001074:	6039      	str	r1, [r7, #0]
	errno = ENOSYS;
 8001076:	4b05      	ldr	r3, [pc, #20]	@ (800108c <_kill+0x20>)
 8001078:	2258      	movs	r2, #88	@ 0x58
 800107a:	601a      	str	r2, [r3, #0]
	return -1;
 800107c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001080:	4618      	mov	r0, r3
 8001082:	370c      	adds	r7, #12
 8001084:	46bd      	mov	sp, r7
 8001086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108a:	4770      	bx	lr
 800108c:	20016524 	.word	0x20016524

08001090 <_exit>:

void _exit(int32_t status)
{
 8001090:	b480      	push	{r7}
 8001092:	b083      	sub	sp, #12
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]
	while (1) {}		/* Make sure we hang here */
 8001098:	bf00      	nop
 800109a:	e7fd      	b.n	8001098 <_exit+0x8>

0800109c <_write>:
}

int _write(int32_t file, uint8_t *ptr, int32_t len)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	b084      	sub	sp, #16
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	60f8      	str	r0, [r7, #12]
 80010a4:	60b9      	str	r1, [r7, #8]
 80010a6:	607a      	str	r2, [r7, #4]
	/* return len; */
#if 0
	for(int i=0 ; i<len ; i++) ITM_SendChar((*ptr++));
	return len;
#else
	    HAL_UART_Transmit(&huart6, (uint8_t*)ptr, len, 100);
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	b29a      	uxth	r2, r3
 80010ac:	2364      	movs	r3, #100	@ 0x64
 80010ae:	68b9      	ldr	r1, [r7, #8]
 80010b0:	4803      	ldr	r0, [pc, #12]	@ (80010c0 <_write+0x24>)
 80010b2:	f009 f953 	bl	800a35c <HAL_UART_Transmit>
	    return len;
 80010b6:	687b      	ldr	r3, [r7, #4]
#endif
}
 80010b8:	4618      	mov	r0, r3
 80010ba:	3710      	adds	r7, #16
 80010bc:	46bd      	mov	sp, r7
 80010be:	bd80      	pop	{r7, pc}
 80010c0:	20016158 	.word	0x20016158

080010c4 <_close>:
	return (void *) prev_heap_end;
}
#endif

int _close(int32_t file)
{
 80010c4:	b480      	push	{r7}
 80010c6:	b083      	sub	sp, #12
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	6078      	str	r0, [r7, #4]
	errno = ENOSYS;
 80010cc:	4b05      	ldr	r3, [pc, #20]	@ (80010e4 <_close+0x20>)
 80010ce:	2258      	movs	r2, #88	@ 0x58
 80010d0:	601a      	str	r2, [r3, #0]
	return -1;
 80010d2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80010d6:	4618      	mov	r0, r3
 80010d8:	370c      	adds	r7, #12
 80010da:	46bd      	mov	sp, r7
 80010dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e0:	4770      	bx	lr
 80010e2:	bf00      	nop
 80010e4:	20016524 	.word	0x20016524

080010e8 <_fstat>:


int _fstat(int32_t file, struct stat *st)
{
 80010e8:	b480      	push	{r7}
 80010ea:	b083      	sub	sp, #12
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]
 80010f0:	6039      	str	r1, [r7, #0]
	errno = ENOSYS;
 80010f2:	4b05      	ldr	r3, [pc, #20]	@ (8001108 <_fstat+0x20>)
 80010f4:	2258      	movs	r2, #88	@ 0x58
 80010f6:	601a      	str	r2, [r3, #0]
	return -1;
 80010f8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80010fc:	4618      	mov	r0, r3
 80010fe:	370c      	adds	r7, #12
 8001100:	46bd      	mov	sp, r7
 8001102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001106:	4770      	bx	lr
 8001108:	20016524 	.word	0x20016524

0800110c <_isatty>:

int _isatty(int32_t file)
{
 800110c:	b480      	push	{r7}
 800110e:	b083      	sub	sp, #12
 8001110:	af00      	add	r7, sp, #0
 8001112:	6078      	str	r0, [r7, #4]
	errno = ENOSYS;
 8001114:	4b04      	ldr	r3, [pc, #16]	@ (8001128 <_isatty+0x1c>)
 8001116:	2258      	movs	r2, #88	@ 0x58
 8001118:	601a      	str	r2, [r3, #0]
	return 0;
 800111a:	2300      	movs	r3, #0
}
 800111c:	4618      	mov	r0, r3
 800111e:	370c      	adds	r7, #12
 8001120:	46bd      	mov	sp, r7
 8001122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001126:	4770      	bx	lr
 8001128:	20016524 	.word	0x20016524

0800112c <_lseek>:

int _lseek(int32_t file, int32_t ptr, int32_t dir)
{
 800112c:	b480      	push	{r7}
 800112e:	b085      	sub	sp, #20
 8001130:	af00      	add	r7, sp, #0
 8001132:	60f8      	str	r0, [r7, #12]
 8001134:	60b9      	str	r1, [r7, #8]
 8001136:	607a      	str	r2, [r7, #4]
	errno = ENOSYS;
 8001138:	4b05      	ldr	r3, [pc, #20]	@ (8001150 <_lseek+0x24>)
 800113a:	2258      	movs	r2, #88	@ 0x58
 800113c:	601a      	str	r2, [r3, #0]
	return -1;
 800113e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001142:	4618      	mov	r0, r3
 8001144:	3714      	adds	r7, #20
 8001146:	46bd      	mov	sp, r7
 8001148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114c:	4770      	bx	lr
 800114e:	bf00      	nop
 8001150:	20016524 	.word	0x20016524

08001154 <_read>:

int _read(int32_t file, uint8_t *ptr, int32_t len)
{
 8001154:	b480      	push	{r7}
 8001156:	b085      	sub	sp, #20
 8001158:	af00      	add	r7, sp, #0
 800115a:	60f8      	str	r0, [r7, #12]
 800115c:	60b9      	str	r1, [r7, #8]
 800115e:	607a      	str	r2, [r7, #4]
	errno = ENOSYS;
 8001160:	4b05      	ldr	r3, [pc, #20]	@ (8001178 <_read+0x24>)
 8001162:	2258      	movs	r2, #88	@ 0x58
 8001164:	601a      	str	r2, [r3, #0]
	return -1;
 8001166:	f04f 33ff 	mov.w	r3, #4294967295
}
 800116a:	4618      	mov	r0, r3
 800116c:	3714      	adds	r7, #20
 800116e:	46bd      	mov	sp, r7
 8001170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001174:	4770      	bx	lr
 8001176:	bf00      	nop
 8001178:	20016524 	.word	0x20016524

0800117c <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	b08a      	sub	sp, #40	@ 0x28
 8001180:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_AnalogWDGConfTypeDef AnalogWDGConfig = {0};
 8001182:	f107 0310 	add.w	r3, r7, #16
 8001186:	2200      	movs	r2, #0
 8001188:	601a      	str	r2, [r3, #0]
 800118a:	605a      	str	r2, [r3, #4]
 800118c:	609a      	str	r2, [r3, #8]
 800118e:	60da      	str	r2, [r3, #12]
 8001190:	611a      	str	r2, [r3, #16]
 8001192:	615a      	str	r2, [r3, #20]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001194:	463b      	mov	r3, r7
 8001196:	2200      	movs	r2, #0
 8001198:	601a      	str	r2, [r3, #0]
 800119a:	605a      	str	r2, [r3, #4]
 800119c:	609a      	str	r2, [r3, #8]
 800119e:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80011a0:	4b41      	ldr	r3, [pc, #260]	@ (80012a8 <MX_ADC1_Init+0x12c>)
 80011a2:	4a42      	ldr	r2, [pc, #264]	@ (80012ac <MX_ADC1_Init+0x130>)
 80011a4:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80011a6:	4b40      	ldr	r3, [pc, #256]	@ (80012a8 <MX_ADC1_Init+0x12c>)
 80011a8:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80011ac:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80011ae:	4b3e      	ldr	r3, [pc, #248]	@ (80012a8 <MX_ADC1_Init+0x12c>)
 80011b0:	2200      	movs	r2, #0
 80011b2:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 80011b4:	4b3c      	ldr	r3, [pc, #240]	@ (80012a8 <MX_ADC1_Init+0x12c>)
 80011b6:	2201      	movs	r2, #1
 80011b8:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80011ba:	4b3b      	ldr	r3, [pc, #236]	@ (80012a8 <MX_ADC1_Init+0x12c>)
 80011bc:	2200      	movs	r2, #0
 80011be:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80011c0:	4b39      	ldr	r3, [pc, #228]	@ (80012a8 <MX_ADC1_Init+0x12c>)
 80011c2:	2200      	movs	r2, #0
 80011c4:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80011c8:	4b37      	ldr	r3, [pc, #220]	@ (80012a8 <MX_ADC1_Init+0x12c>)
 80011ca:	2200      	movs	r2, #0
 80011cc:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80011ce:	4b36      	ldr	r3, [pc, #216]	@ (80012a8 <MX_ADC1_Init+0x12c>)
 80011d0:	4a37      	ldr	r2, [pc, #220]	@ (80012b0 <MX_ADC1_Init+0x134>)
 80011d2:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80011d4:	4b34      	ldr	r3, [pc, #208]	@ (80012a8 <MX_ADC1_Init+0x12c>)
 80011d6:	2200      	movs	r2, #0
 80011d8:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 4;
 80011da:	4b33      	ldr	r3, [pc, #204]	@ (80012a8 <MX_ADC1_Init+0x12c>)
 80011dc:	2204      	movs	r2, #4
 80011de:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80011e0:	4b31      	ldr	r3, [pc, #196]	@ (80012a8 <MX_ADC1_Init+0x12c>)
 80011e2:	2200      	movs	r2, #0
 80011e4:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80011e8:	4b2f      	ldr	r3, [pc, #188]	@ (80012a8 <MX_ADC1_Init+0x12c>)
 80011ea:	2201      	movs	r2, #1
 80011ec:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80011ee:	482e      	ldr	r0, [pc, #184]	@ (80012a8 <MX_ADC1_Init+0x12c>)
 80011f0:	f004 fbd4 	bl	800599c <HAL_ADC_Init>
 80011f4:	4603      	mov	r3, r0
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d001      	beq.n	80011fe <MX_ADC1_Init+0x82>
  {
    Error_Handler();
 80011fa:	f001 fdb1 	bl	8002d60 <Error_Handler>
  }

  /** Configure the analog watchdog
  */
  AnalogWDGConfig.WatchdogMode = ADC_ANALOGWATCHDOG_SINGLE_REG;
 80011fe:	4b2d      	ldr	r3, [pc, #180]	@ (80012b4 <MX_ADC1_Init+0x138>)
 8001200:	613b      	str	r3, [r7, #16]
  AnalogWDGConfig.HighThreshold = 0;
 8001202:	2300      	movs	r3, #0
 8001204:	617b      	str	r3, [r7, #20]
  AnalogWDGConfig.LowThreshold = 0;
 8001206:	2300      	movs	r3, #0
 8001208:	61bb      	str	r3, [r7, #24]
  AnalogWDGConfig.Channel = ADC_CHANNEL_6;
 800120a:	2306      	movs	r3, #6
 800120c:	61fb      	str	r3, [r7, #28]
  AnalogWDGConfig.ITMode = DISABLE;
 800120e:	2300      	movs	r3, #0
 8001210:	f887 3020 	strb.w	r3, [r7, #32]
  if (HAL_ADC_AnalogWDGConfig(&hadc1, &AnalogWDGConfig) != HAL_OK)
 8001214:	f107 0310 	add.w	r3, r7, #16
 8001218:	4619      	mov	r1, r3
 800121a:	4823      	ldr	r0, [pc, #140]	@ (80012a8 <MX_ADC1_Init+0x12c>)
 800121c:	f004 fe96 	bl	8005f4c <HAL_ADC_AnalogWDGConfig>
 8001220:	4603      	mov	r3, r0
 8001222:	2b00      	cmp	r3, #0
 8001224:	d001      	beq.n	800122a <MX_ADC1_Init+0xae>
  {
    Error_Handler();
 8001226:	f001 fd9b 	bl	8002d60 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 800122a:	2306      	movs	r3, #6
 800122c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800122e:	2301      	movs	r3, #1
 8001230:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001232:	2300      	movs	r3, #0
 8001234:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001236:	463b      	mov	r3, r7
 8001238:	4619      	mov	r1, r3
 800123a:	481b      	ldr	r0, [pc, #108]	@ (80012a8 <MX_ADC1_Init+0x12c>)
 800123c:	f004 fd54 	bl	8005ce8 <HAL_ADC_ConfigChannel>
 8001240:	4603      	mov	r3, r0
 8001242:	2b00      	cmp	r3, #0
 8001244:	d001      	beq.n	800124a <MX_ADC1_Init+0xce>
  {
    Error_Handler();
 8001246:	f001 fd8b 	bl	8002d60 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 800124a:	2307      	movs	r3, #7
 800124c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 800124e:	2302      	movs	r3, #2
 8001250:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001252:	463b      	mov	r3, r7
 8001254:	4619      	mov	r1, r3
 8001256:	4814      	ldr	r0, [pc, #80]	@ (80012a8 <MX_ADC1_Init+0x12c>)
 8001258:	f004 fd46 	bl	8005ce8 <HAL_ADC_ConfigChannel>
 800125c:	4603      	mov	r3, r0
 800125e:	2b00      	cmp	r3, #0
 8001260:	d001      	beq.n	8001266 <MX_ADC1_Init+0xea>
  {
    Error_Handler();
 8001262:	f001 fd7d 	bl	8002d60 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8001266:	230e      	movs	r3, #14
 8001268:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 800126a:	2303      	movs	r3, #3
 800126c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800126e:	463b      	mov	r3, r7
 8001270:	4619      	mov	r1, r3
 8001272:	480d      	ldr	r0, [pc, #52]	@ (80012a8 <MX_ADC1_Init+0x12c>)
 8001274:	f004 fd38 	bl	8005ce8 <HAL_ADC_ConfigChannel>
 8001278:	4603      	mov	r3, r0
 800127a:	2b00      	cmp	r3, #0
 800127c:	d001      	beq.n	8001282 <MX_ADC1_Init+0x106>
  {
    Error_Handler();
 800127e:	f001 fd6f 	bl	8002d60 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8001282:	230f      	movs	r3, #15
 8001284:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8001286:	2304      	movs	r3, #4
 8001288:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800128a:	463b      	mov	r3, r7
 800128c:	4619      	mov	r1, r3
 800128e:	4806      	ldr	r0, [pc, #24]	@ (80012a8 <MX_ADC1_Init+0x12c>)
 8001290:	f004 fd2a 	bl	8005ce8 <HAL_ADC_ConfigChannel>
 8001294:	4603      	mov	r3, r0
 8001296:	2b00      	cmp	r3, #0
 8001298:	d001      	beq.n	800129e <MX_ADC1_Init+0x122>
  {
    Error_Handler();
 800129a:	f001 fd61 	bl	8002d60 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800129e:	bf00      	nop
 80012a0:	3728      	adds	r7, #40	@ 0x28
 80012a2:	46bd      	mov	sp, r7
 80012a4:	bd80      	pop	{r7, pc}
 80012a6:	bf00      	nop
 80012a8:	2000d318 	.word	0x2000d318
 80012ac:	40012000 	.word	0x40012000
 80012b0:	0f000001 	.word	0x0f000001
 80012b4:	00800200 	.word	0x00800200

080012b8 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b08a      	sub	sp, #40	@ 0x28
 80012bc:	af00      	add	r7, sp, #0
 80012be:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012c0:	f107 0314 	add.w	r3, r7, #20
 80012c4:	2200      	movs	r2, #0
 80012c6:	601a      	str	r2, [r3, #0]
 80012c8:	605a      	str	r2, [r3, #4]
 80012ca:	609a      	str	r2, [r3, #8]
 80012cc:	60da      	str	r2, [r3, #12]
 80012ce:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	4a3b      	ldr	r2, [pc, #236]	@ (80013c4 <HAL_ADC_MspInit+0x10c>)
 80012d6:	4293      	cmp	r3, r2
 80012d8:	d170      	bne.n	80013bc <HAL_ADC_MspInit+0x104>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80012da:	2300      	movs	r3, #0
 80012dc:	613b      	str	r3, [r7, #16]
 80012de:	4b3a      	ldr	r3, [pc, #232]	@ (80013c8 <HAL_ADC_MspInit+0x110>)
 80012e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012e2:	4a39      	ldr	r2, [pc, #228]	@ (80013c8 <HAL_ADC_MspInit+0x110>)
 80012e4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80012e8:	6453      	str	r3, [r2, #68]	@ 0x44
 80012ea:	4b37      	ldr	r3, [pc, #220]	@ (80013c8 <HAL_ADC_MspInit+0x110>)
 80012ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012ee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80012f2:	613b      	str	r3, [r7, #16]
 80012f4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012f6:	2300      	movs	r3, #0
 80012f8:	60fb      	str	r3, [r7, #12]
 80012fa:	4b33      	ldr	r3, [pc, #204]	@ (80013c8 <HAL_ADC_MspInit+0x110>)
 80012fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012fe:	4a32      	ldr	r2, [pc, #200]	@ (80013c8 <HAL_ADC_MspInit+0x110>)
 8001300:	f043 0301 	orr.w	r3, r3, #1
 8001304:	6313      	str	r3, [r2, #48]	@ 0x30
 8001306:	4b30      	ldr	r3, [pc, #192]	@ (80013c8 <HAL_ADC_MspInit+0x110>)
 8001308:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800130a:	f003 0301 	and.w	r3, r3, #1
 800130e:	60fb      	str	r3, [r7, #12]
 8001310:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001312:	2300      	movs	r3, #0
 8001314:	60bb      	str	r3, [r7, #8]
 8001316:	4b2c      	ldr	r3, [pc, #176]	@ (80013c8 <HAL_ADC_MspInit+0x110>)
 8001318:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800131a:	4a2b      	ldr	r2, [pc, #172]	@ (80013c8 <HAL_ADC_MspInit+0x110>)
 800131c:	f043 0304 	orr.w	r3, r3, #4
 8001320:	6313      	str	r3, [r2, #48]	@ 0x30
 8001322:	4b29      	ldr	r3, [pc, #164]	@ (80013c8 <HAL_ADC_MspInit+0x110>)
 8001324:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001326:	f003 0304 	and.w	r3, r3, #4
 800132a:	60bb      	str	r3, [r7, #8]
 800132c:	68bb      	ldr	r3, [r7, #8]
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    PC4     ------> ADC1_IN14
    PC5     ------> ADC1_IN15
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800132e:	23c0      	movs	r3, #192	@ 0xc0
 8001330:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001332:	2303      	movs	r3, #3
 8001334:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001336:	2300      	movs	r3, #0
 8001338:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800133a:	f107 0314 	add.w	r3, r7, #20
 800133e:	4619      	mov	r1, r3
 8001340:	4822      	ldr	r0, [pc, #136]	@ (80013cc <HAL_ADC_MspInit+0x114>)
 8001342:	f005 fd11 	bl	8006d68 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8001346:	2330      	movs	r3, #48	@ 0x30
 8001348:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800134a:	2303      	movs	r3, #3
 800134c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800134e:	2300      	movs	r3, #0
 8001350:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001352:	f107 0314 	add.w	r3, r7, #20
 8001356:	4619      	mov	r1, r3
 8001358:	481d      	ldr	r0, [pc, #116]	@ (80013d0 <HAL_ADC_MspInit+0x118>)
 800135a:	f005 fd05 	bl	8006d68 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 800135e:	4b1d      	ldr	r3, [pc, #116]	@ (80013d4 <HAL_ADC_MspInit+0x11c>)
 8001360:	4a1d      	ldr	r2, [pc, #116]	@ (80013d8 <HAL_ADC_MspInit+0x120>)
 8001362:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001364:	4b1b      	ldr	r3, [pc, #108]	@ (80013d4 <HAL_ADC_MspInit+0x11c>)
 8001366:	2200      	movs	r2, #0
 8001368:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800136a:	4b1a      	ldr	r3, [pc, #104]	@ (80013d4 <HAL_ADC_MspInit+0x11c>)
 800136c:	2200      	movs	r2, #0
 800136e:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001370:	4b18      	ldr	r3, [pc, #96]	@ (80013d4 <HAL_ADC_MspInit+0x11c>)
 8001372:	2200      	movs	r2, #0
 8001374:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001376:	4b17      	ldr	r3, [pc, #92]	@ (80013d4 <HAL_ADC_MspInit+0x11c>)
 8001378:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800137c:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800137e:	4b15      	ldr	r3, [pc, #84]	@ (80013d4 <HAL_ADC_MspInit+0x11c>)
 8001380:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001384:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001386:	4b13      	ldr	r3, [pc, #76]	@ (80013d4 <HAL_ADC_MspInit+0x11c>)
 8001388:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800138c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 800138e:	4b11      	ldr	r3, [pc, #68]	@ (80013d4 <HAL_ADC_MspInit+0x11c>)
 8001390:	2200      	movs	r2, #0
 8001392:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001394:	4b0f      	ldr	r3, [pc, #60]	@ (80013d4 <HAL_ADC_MspInit+0x11c>)
 8001396:	2200      	movs	r2, #0
 8001398:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800139a:	4b0e      	ldr	r3, [pc, #56]	@ (80013d4 <HAL_ADC_MspInit+0x11c>)
 800139c:	2200      	movs	r2, #0
 800139e:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80013a0:	480c      	ldr	r0, [pc, #48]	@ (80013d4 <HAL_ADC_MspInit+0x11c>)
 80013a2:	f005 f8df 	bl	8006564 <HAL_DMA_Init>
 80013a6:	4603      	mov	r3, r0
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d001      	beq.n	80013b0 <HAL_ADC_MspInit+0xf8>
    {
      Error_Handler();
 80013ac:	f001 fcd8 	bl	8002d60 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	4a08      	ldr	r2, [pc, #32]	@ (80013d4 <HAL_ADC_MspInit+0x11c>)
 80013b4:	639a      	str	r2, [r3, #56]	@ 0x38
 80013b6:	4a07      	ldr	r2, [pc, #28]	@ (80013d4 <HAL_ADC_MspInit+0x11c>)
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80013bc:	bf00      	nop
 80013be:	3728      	adds	r7, #40	@ 0x28
 80013c0:	46bd      	mov	sp, r7
 80013c2:	bd80      	pop	{r7, pc}
 80013c4:	40012000 	.word	0x40012000
 80013c8:	40023800 	.word	0x40023800
 80013cc:	40020000 	.word	0x40020000
 80013d0:	40020800 	.word	0x40020800
 80013d4:	2000d360 	.word	0x2000d360
 80013d8:	40026410 	.word	0x40026410

080013dc <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 80013e0:	4b06      	ldr	r3, [pc, #24]	@ (80013fc <MX_CRC_Init+0x20>)
 80013e2:	4a07      	ldr	r2, [pc, #28]	@ (8001400 <MX_CRC_Init+0x24>)
 80013e4:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80013e6:	4805      	ldr	r0, [pc, #20]	@ (80013fc <MX_CRC_Init+0x20>)
 80013e8:	f005 f89f 	bl	800652a <HAL_CRC_Init>
 80013ec:	4603      	mov	r3, r0
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d001      	beq.n	80013f6 <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 80013f2:	f001 fcb5 	bl	8002d60 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 80013f6:	bf00      	nop
 80013f8:	bd80      	pop	{r7, pc}
 80013fa:	bf00      	nop
 80013fc:	2000d3c0 	.word	0x2000d3c0
 8001400:	40023000 	.word	0x40023000

08001404 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 8001404:	b480      	push	{r7}
 8001406:	b085      	sub	sp, #20
 8001408:	af00      	add	r7, sp, #0
 800140a:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	4a0b      	ldr	r2, [pc, #44]	@ (8001440 <HAL_CRC_MspInit+0x3c>)
 8001412:	4293      	cmp	r3, r2
 8001414:	d10d      	bne.n	8001432 <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8001416:	2300      	movs	r3, #0
 8001418:	60fb      	str	r3, [r7, #12]
 800141a:	4b0a      	ldr	r3, [pc, #40]	@ (8001444 <HAL_CRC_MspInit+0x40>)
 800141c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800141e:	4a09      	ldr	r2, [pc, #36]	@ (8001444 <HAL_CRC_MspInit+0x40>)
 8001420:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001424:	6313      	str	r3, [r2, #48]	@ 0x30
 8001426:	4b07      	ldr	r3, [pc, #28]	@ (8001444 <HAL_CRC_MspInit+0x40>)
 8001428:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800142a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800142e:	60fb      	str	r3, [r7, #12]
 8001430:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 8001432:	bf00      	nop
 8001434:	3714      	adds	r7, #20
 8001436:	46bd      	mov	sp, r7
 8001438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143c:	4770      	bx	lr
 800143e:	bf00      	nop
 8001440:	40023000 	.word	0x40023000
 8001444:	40023800 	.word	0x40023800

08001448 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	b082      	sub	sp, #8
 800144c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800144e:	2300      	movs	r3, #0
 8001450:	607b      	str	r3, [r7, #4]
 8001452:	4b17      	ldr	r3, [pc, #92]	@ (80014b0 <MX_DMA_Init+0x68>)
 8001454:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001456:	4a16      	ldr	r2, [pc, #88]	@ (80014b0 <MX_DMA_Init+0x68>)
 8001458:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800145c:	6313      	str	r3, [r2, #48]	@ 0x30
 800145e:	4b14      	ldr	r3, [pc, #80]	@ (80014b0 <MX_DMA_Init+0x68>)
 8001460:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001462:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001466:	607b      	str	r3, [r7, #4]
 8001468:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 800146a:	2300      	movs	r3, #0
 800146c:	603b      	str	r3, [r7, #0]
 800146e:	4b10      	ldr	r3, [pc, #64]	@ (80014b0 <MX_DMA_Init+0x68>)
 8001470:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001472:	4a0f      	ldr	r2, [pc, #60]	@ (80014b0 <MX_DMA_Init+0x68>)
 8001474:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001478:	6313      	str	r3, [r2, #48]	@ 0x30
 800147a:	4b0d      	ldr	r3, [pc, #52]	@ (80014b0 <MX_DMA_Init+0x68>)
 800147c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800147e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001482:	603b      	str	r3, [r7, #0]
 8001484:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 8001486:	2200      	movs	r2, #0
 8001488:	2100      	movs	r1, #0
 800148a:	200e      	movs	r0, #14
 800148c:	f005 f817 	bl	80064be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8001490:	200e      	movs	r0, #14
 8001492:	f005 f830 	bl	80064f6 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8001496:	2200      	movs	r2, #0
 8001498:	2100      	movs	r1, #0
 800149a:	2038      	movs	r0, #56	@ 0x38
 800149c:	f005 f80f 	bl	80064be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80014a0:	2038      	movs	r0, #56	@ 0x38
 80014a2:	f005 f828 	bl	80064f6 <HAL_NVIC_EnableIRQ>

}
 80014a6:	bf00      	nop
 80014a8:	3708      	adds	r7, #8
 80014aa:	46bd      	mov	sp, r7
 80014ac:	bd80      	pop	{r7, pc}
 80014ae:	bf00      	nop
 80014b0:	40023800 	.word	0x40023800

080014b4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b08a      	sub	sp, #40	@ 0x28
 80014b8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014ba:	f107 0314 	add.w	r3, r7, #20
 80014be:	2200      	movs	r2, #0
 80014c0:	601a      	str	r2, [r3, #0]
 80014c2:	605a      	str	r2, [r3, #4]
 80014c4:	609a      	str	r2, [r3, #8]
 80014c6:	60da      	str	r2, [r3, #12]
 80014c8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80014ca:	2300      	movs	r3, #0
 80014cc:	613b      	str	r3, [r7, #16]
 80014ce:	4b45      	ldr	r3, [pc, #276]	@ (80015e4 <MX_GPIO_Init+0x130>)
 80014d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014d2:	4a44      	ldr	r2, [pc, #272]	@ (80015e4 <MX_GPIO_Init+0x130>)
 80014d4:	f043 0304 	orr.w	r3, r3, #4
 80014d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80014da:	4b42      	ldr	r3, [pc, #264]	@ (80015e4 <MX_GPIO_Init+0x130>)
 80014dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014de:	f003 0304 	and.w	r3, r3, #4
 80014e2:	613b      	str	r3, [r7, #16]
 80014e4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80014e6:	2300      	movs	r3, #0
 80014e8:	60fb      	str	r3, [r7, #12]
 80014ea:	4b3e      	ldr	r3, [pc, #248]	@ (80015e4 <MX_GPIO_Init+0x130>)
 80014ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014ee:	4a3d      	ldr	r2, [pc, #244]	@ (80015e4 <MX_GPIO_Init+0x130>)
 80014f0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80014f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80014f6:	4b3b      	ldr	r3, [pc, #236]	@ (80015e4 <MX_GPIO_Init+0x130>)
 80014f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014fa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80014fe:	60fb      	str	r3, [r7, #12]
 8001500:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001502:	2300      	movs	r3, #0
 8001504:	60bb      	str	r3, [r7, #8]
 8001506:	4b37      	ldr	r3, [pc, #220]	@ (80015e4 <MX_GPIO_Init+0x130>)
 8001508:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800150a:	4a36      	ldr	r2, [pc, #216]	@ (80015e4 <MX_GPIO_Init+0x130>)
 800150c:	f043 0301 	orr.w	r3, r3, #1
 8001510:	6313      	str	r3, [r2, #48]	@ 0x30
 8001512:	4b34      	ldr	r3, [pc, #208]	@ (80015e4 <MX_GPIO_Init+0x130>)
 8001514:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001516:	f003 0301 	and.w	r3, r3, #1
 800151a:	60bb      	str	r3, [r7, #8]
 800151c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800151e:	2300      	movs	r3, #0
 8001520:	607b      	str	r3, [r7, #4]
 8001522:	4b30      	ldr	r3, [pc, #192]	@ (80015e4 <MX_GPIO_Init+0x130>)
 8001524:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001526:	4a2f      	ldr	r2, [pc, #188]	@ (80015e4 <MX_GPIO_Init+0x130>)
 8001528:	f043 0302 	orr.w	r3, r3, #2
 800152c:	6313      	str	r3, [r2, #48]	@ 0x30
 800152e:	4b2d      	ldr	r3, [pc, #180]	@ (80015e4 <MX_GPIO_Init+0x130>)
 8001530:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001532:	f003 0302 	and.w	r3, r3, #2
 8001536:	607b      	str	r3, [r7, #4]
 8001538:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, ILI9341_DC_Pin|ILI9341_RESET_Pin, GPIO_PIN_RESET);
 800153a:	2200      	movs	r2, #0
 800153c:	2103      	movs	r1, #3
 800153e:	482a      	ldr	r0, [pc, #168]	@ (80015e8 <MX_GPIO_Init+0x134>)
 8001540:	f005 fdae 	bl	80070a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001544:	2200      	movs	r2, #0
 8001546:	2120      	movs	r1, #32
 8001548:	4828      	ldr	r0, [pc, #160]	@ (80015ec <MX_GPIO_Init+0x138>)
 800154a:	f005 fda9 	bl	80070a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ILI9341_CS_Pin|SDCARD_CS_Pin, GPIO_PIN_SET);
 800154e:	2201      	movs	r2, #1
 8001550:	f244 0102 	movw	r1, #16386	@ 0x4002
 8001554:	4826      	ldr	r0, [pc, #152]	@ (80015f0 <MX_GPIO_Init+0x13c>)
 8001556:	f005 fda3 	bl	80070a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800155a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800155e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001560:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8001564:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001566:	2300      	movs	r3, #0
 8001568:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800156a:	f107 0314 	add.w	r3, r7, #20
 800156e:	4619      	mov	r1, r3
 8001570:	481d      	ldr	r0, [pc, #116]	@ (80015e8 <MX_GPIO_Init+0x134>)
 8001572:	f005 fbf9 	bl	8006d68 <HAL_GPIO_Init>

  /*Configure GPIO pins : ILI9341_DC_Pin ILI9341_RESET_Pin */
  GPIO_InitStruct.Pin = ILI9341_DC_Pin|ILI9341_RESET_Pin;
 8001576:	2303      	movs	r3, #3
 8001578:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800157a:	2301      	movs	r3, #1
 800157c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800157e:	2300      	movs	r3, #0
 8001580:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001582:	2300      	movs	r3, #0
 8001584:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001586:	f107 0314 	add.w	r3, r7, #20
 800158a:	4619      	mov	r1, r3
 800158c:	4816      	ldr	r0, [pc, #88]	@ (80015e8 <MX_GPIO_Init+0x134>)
 800158e:	f005 fbeb 	bl	8006d68 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001592:	2320      	movs	r3, #32
 8001594:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001596:	2301      	movs	r3, #1
 8001598:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800159a:	2300      	movs	r3, #0
 800159c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800159e:	2300      	movs	r3, #0
 80015a0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80015a2:	f107 0314 	add.w	r3, r7, #20
 80015a6:	4619      	mov	r1, r3
 80015a8:	4810      	ldr	r0, [pc, #64]	@ (80015ec <MX_GPIO_Init+0x138>)
 80015aa:	f005 fbdd 	bl	8006d68 <HAL_GPIO_Init>

  /*Configure GPIO pins : ILI9341_CS_Pin SDCARD_CS_Pin */
  GPIO_InitStruct.Pin = ILI9341_CS_Pin|SDCARD_CS_Pin;
 80015ae:	f244 0302 	movw	r3, #16386	@ 0x4002
 80015b2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015b4:	2301      	movs	r3, #1
 80015b6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015b8:	2300      	movs	r3, #0
 80015ba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015bc:	2300      	movs	r3, #0
 80015be:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015c0:	f107 0314 	add.w	r3, r7, #20
 80015c4:	4619      	mov	r1, r3
 80015c6:	480a      	ldr	r0, [pc, #40]	@ (80015f0 <MX_GPIO_Init+0x13c>)
 80015c8:	f005 fbce 	bl	8006d68 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80015cc:	2200      	movs	r2, #0
 80015ce:	2100      	movs	r1, #0
 80015d0:	2028      	movs	r0, #40	@ 0x28
 80015d2:	f004 ff74 	bl	80064be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80015d6:	2028      	movs	r0, #40	@ 0x28
 80015d8:	f004 ff8d 	bl	80064f6 <HAL_NVIC_EnableIRQ>

}
 80015dc:	bf00      	nop
 80015de:	3728      	adds	r7, #40	@ 0x28
 80015e0:	46bd      	mov	sp, r7
 80015e2:	bd80      	pop	{r7, pc}
 80015e4:	40023800 	.word	0x40023800
 80015e8:	40020800 	.word	0x40020800
 80015ec:	40020000 	.word	0x40020000
 80015f0:	40020400 	.word	0x40020400

080015f4 <MX_I2S2_Init>:
I2S_HandleTypeDef hi2s3;
DMA_HandleTypeDef hdma_spi2_rx;

/* I2S2 init function */
void MX_I2S2_Init(void)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 80015f8:	4b13      	ldr	r3, [pc, #76]	@ (8001648 <MX_I2S2_Init+0x54>)
 80015fa:	4a14      	ldr	r2, [pc, #80]	@ (800164c <MX_I2S2_Init+0x58>)
 80015fc:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_RX;
 80015fe:	4b12      	ldr	r3, [pc, #72]	@ (8001648 <MX_I2S2_Init+0x54>)
 8001600:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8001604:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 8001606:	4b10      	ldr	r3, [pc, #64]	@ (8001648 <MX_I2S2_Init+0x54>)
 8001608:	2200      	movs	r2, #0
 800160a:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_24B;
 800160c:	4b0e      	ldr	r3, [pc, #56]	@ (8001648 <MX_I2S2_Init+0x54>)
 800160e:	2203      	movs	r2, #3
 8001610:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 8001612:	4b0d      	ldr	r3, [pc, #52]	@ (8001648 <MX_I2S2_Init+0x54>)
 8001614:	2200      	movs	r2, #0
 8001616:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_16K;
 8001618:	4b0b      	ldr	r3, [pc, #44]	@ (8001648 <MX_I2S2_Init+0x54>)
 800161a:	f44f 527a 	mov.w	r2, #16000	@ 0x3e80
 800161e:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 8001620:	4b09      	ldr	r3, [pc, #36]	@ (8001648 <MX_I2S2_Init+0x54>)
 8001622:	2200      	movs	r2, #0
 8001624:	619a      	str	r2, [r3, #24]
  hi2s2.Init.ClockSource = I2S_CLOCK_PLL;
 8001626:	4b08      	ldr	r3, [pc, #32]	@ (8001648 <MX_I2S2_Init+0x54>)
 8001628:	2200      	movs	r2, #0
 800162a:	61da      	str	r2, [r3, #28]
  hi2s2.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 800162c:	4b06      	ldr	r3, [pc, #24]	@ (8001648 <MX_I2S2_Init+0x54>)
 800162e:	2200      	movs	r2, #0
 8001630:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 8001632:	4805      	ldr	r0, [pc, #20]	@ (8001648 <MX_I2S2_Init+0x54>)
 8001634:	f005 fd72 	bl	800711c <HAL_I2S_Init>
 8001638:	4603      	mov	r3, r0
 800163a:	2b00      	cmp	r3, #0
 800163c:	d001      	beq.n	8001642 <MX_I2S2_Init+0x4e>
  {
    Error_Handler();
 800163e:	f001 fb8f 	bl	8002d60 <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 8001642:	bf00      	nop
 8001644:	bd80      	pop	{r7, pc}
 8001646:	bf00      	nop
 8001648:	2000d3c8 	.word	0x2000d3c8
 800164c:	40003800 	.word	0x40003800

08001650 <MX_I2S3_Init>:
/* I2S3 init function */
void MX_I2S3_Init(void)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8001654:	4b13      	ldr	r3, [pc, #76]	@ (80016a4 <MX_I2S3_Init+0x54>)
 8001656:	4a14      	ldr	r2, [pc, #80]	@ (80016a8 <MX_I2S3_Init+0x58>)
 8001658:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 800165a:	4b12      	ldr	r3, [pc, #72]	@ (80016a4 <MX_I2S3_Init+0x54>)
 800165c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001660:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8001662:	4b10      	ldr	r3, [pc, #64]	@ (80016a4 <MX_I2S3_Init+0x54>)
 8001664:	2200      	movs	r2, #0
 8001666:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8001668:	4b0e      	ldr	r3, [pc, #56]	@ (80016a4 <MX_I2S3_Init+0x54>)
 800166a:	2200      	movs	r2, #0
 800166c:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 800166e:	4b0d      	ldr	r3, [pc, #52]	@ (80016a4 <MX_I2S3_Init+0x54>)
 8001670:	2200      	movs	r2, #0
 8001672:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_16K;
 8001674:	4b0b      	ldr	r3, [pc, #44]	@ (80016a4 <MX_I2S3_Init+0x54>)
 8001676:	f44f 527a 	mov.w	r2, #16000	@ 0x3e80
 800167a:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 800167c:	4b09      	ldr	r3, [pc, #36]	@ (80016a4 <MX_I2S3_Init+0x54>)
 800167e:	2200      	movs	r2, #0
 8001680:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8001682:	4b08      	ldr	r3, [pc, #32]	@ (80016a4 <MX_I2S3_Init+0x54>)
 8001684:	2200      	movs	r2, #0
 8001686:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8001688:	4b06      	ldr	r3, [pc, #24]	@ (80016a4 <MX_I2S3_Init+0x54>)
 800168a:	2200      	movs	r2, #0
 800168c:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 800168e:	4805      	ldr	r0, [pc, #20]	@ (80016a4 <MX_I2S3_Init+0x54>)
 8001690:	f005 fd44 	bl	800711c <HAL_I2S_Init>
 8001694:	4603      	mov	r3, r0
 8001696:	2b00      	cmp	r3, #0
 8001698:	d001      	beq.n	800169e <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 800169a:	f001 fb61 	bl	8002d60 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 800169e:	bf00      	nop
 80016a0:	bd80      	pop	{r7, pc}
 80016a2:	bf00      	nop
 80016a4:	2000d410 	.word	0x2000d410
 80016a8:	40003c00 	.word	0x40003c00

080016ac <HAL_I2S_MspInit>:

void HAL_I2S_MspInit(I2S_HandleTypeDef* i2sHandle)
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	b08e      	sub	sp, #56	@ 0x38
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016b4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80016b8:	2200      	movs	r2, #0
 80016ba:	601a      	str	r2, [r3, #0]
 80016bc:	605a      	str	r2, [r3, #4]
 80016be:	609a      	str	r2, [r3, #8]
 80016c0:	60da      	str	r2, [r3, #12]
 80016c2:	611a      	str	r2, [r3, #16]
  if(i2sHandle->Instance==SPI2)
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	4a69      	ldr	r2, [pc, #420]	@ (8001870 <HAL_I2S_MspInit+0x1c4>)
 80016ca:	4293      	cmp	r3, r2
 80016cc:	d17b      	bne.n	80017c6 <HAL_I2S_MspInit+0x11a>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* I2S2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80016ce:	2300      	movs	r3, #0
 80016d0:	623b      	str	r3, [r7, #32]
 80016d2:	4b68      	ldr	r3, [pc, #416]	@ (8001874 <HAL_I2S_MspInit+0x1c8>)
 80016d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016d6:	4a67      	ldr	r2, [pc, #412]	@ (8001874 <HAL_I2S_MspInit+0x1c8>)
 80016d8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80016dc:	6413      	str	r3, [r2, #64]	@ 0x40
 80016de:	4b65      	ldr	r3, [pc, #404]	@ (8001874 <HAL_I2S_MspInit+0x1c8>)
 80016e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016e2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80016e6:	623b      	str	r3, [r7, #32]
 80016e8:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80016ea:	2300      	movs	r3, #0
 80016ec:	61fb      	str	r3, [r7, #28]
 80016ee:	4b61      	ldr	r3, [pc, #388]	@ (8001874 <HAL_I2S_MspInit+0x1c8>)
 80016f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016f2:	4a60      	ldr	r2, [pc, #384]	@ (8001874 <HAL_I2S_MspInit+0x1c8>)
 80016f4:	f043 0304 	orr.w	r3, r3, #4
 80016f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80016fa:	4b5e      	ldr	r3, [pc, #376]	@ (8001874 <HAL_I2S_MspInit+0x1c8>)
 80016fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016fe:	f003 0304 	and.w	r3, r3, #4
 8001702:	61fb      	str	r3, [r7, #28]
 8001704:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001706:	2300      	movs	r3, #0
 8001708:	61bb      	str	r3, [r7, #24]
 800170a:	4b5a      	ldr	r3, [pc, #360]	@ (8001874 <HAL_I2S_MspInit+0x1c8>)
 800170c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800170e:	4a59      	ldr	r2, [pc, #356]	@ (8001874 <HAL_I2S_MspInit+0x1c8>)
 8001710:	f043 0302 	orr.w	r3, r3, #2
 8001714:	6313      	str	r3, [r2, #48]	@ 0x30
 8001716:	4b57      	ldr	r3, [pc, #348]	@ (8001874 <HAL_I2S_MspInit+0x1c8>)
 8001718:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800171a:	f003 0302 	and.w	r3, r3, #2
 800171e:	61bb      	str	r3, [r7, #24]
 8001720:	69bb      	ldr	r3, [r7, #24]
    /**I2S2 GPIO Configuration
    PC3     ------> I2S2_SD
    PB10     ------> I2S2_CK
    PB12     ------> I2S2_WS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001722:	2308      	movs	r3, #8
 8001724:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001726:	2302      	movs	r3, #2
 8001728:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800172a:	2300      	movs	r3, #0
 800172c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800172e:	2300      	movs	r3, #0
 8001730:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001732:	2305      	movs	r3, #5
 8001734:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001736:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800173a:	4619      	mov	r1, r3
 800173c:	484e      	ldr	r0, [pc, #312]	@ (8001878 <HAL_I2S_MspInit+0x1cc>)
 800173e:	f005 fb13 	bl	8006d68 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12;
 8001742:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001746:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001748:	2302      	movs	r3, #2
 800174a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800174c:	2300      	movs	r3, #0
 800174e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001750:	2300      	movs	r3, #0
 8001752:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001754:	2305      	movs	r3, #5
 8001756:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001758:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800175c:	4619      	mov	r1, r3
 800175e:	4847      	ldr	r0, [pc, #284]	@ (800187c <HAL_I2S_MspInit+0x1d0>)
 8001760:	f005 fb02 	bl	8006d68 <HAL_GPIO_Init>

    /* I2S2 DMA Init */
    /* SPI2_RX Init */
    hdma_spi2_rx.Instance = DMA1_Stream3;
 8001764:	4b46      	ldr	r3, [pc, #280]	@ (8001880 <HAL_I2S_MspInit+0x1d4>)
 8001766:	4a47      	ldr	r2, [pc, #284]	@ (8001884 <HAL_I2S_MspInit+0x1d8>)
 8001768:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Channel = DMA_CHANNEL_0;
 800176a:	4b45      	ldr	r3, [pc, #276]	@ (8001880 <HAL_I2S_MspInit+0x1d4>)
 800176c:	2200      	movs	r2, #0
 800176e:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001770:	4b43      	ldr	r3, [pc, #268]	@ (8001880 <HAL_I2S_MspInit+0x1d4>)
 8001772:	2200      	movs	r2, #0
 8001774:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001776:	4b42      	ldr	r3, [pc, #264]	@ (8001880 <HAL_I2S_MspInit+0x1d4>)
 8001778:	2200      	movs	r2, #0
 800177a:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800177c:	4b40      	ldr	r3, [pc, #256]	@ (8001880 <HAL_I2S_MspInit+0x1d4>)
 800177e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001782:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001784:	4b3e      	ldr	r3, [pc, #248]	@ (8001880 <HAL_I2S_MspInit+0x1d4>)
 8001786:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800178a:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800178c:	4b3c      	ldr	r3, [pc, #240]	@ (8001880 <HAL_I2S_MspInit+0x1d4>)
 800178e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001792:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_CIRCULAR;
 8001794:	4b3a      	ldr	r3, [pc, #232]	@ (8001880 <HAL_I2S_MspInit+0x1d4>)
 8001796:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800179a:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_LOW;
 800179c:	4b38      	ldr	r3, [pc, #224]	@ (8001880 <HAL_I2S_MspInit+0x1d4>)
 800179e:	2200      	movs	r2, #0
 80017a0:	621a      	str	r2, [r3, #32]
    hdma_spi2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80017a2:	4b37      	ldr	r3, [pc, #220]	@ (8001880 <HAL_I2S_MspInit+0x1d4>)
 80017a4:	2200      	movs	r2, #0
 80017a6:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 80017a8:	4835      	ldr	r0, [pc, #212]	@ (8001880 <HAL_I2S_MspInit+0x1d4>)
 80017aa:	f004 fedb 	bl	8006564 <HAL_DMA_Init>
 80017ae:	4603      	mov	r3, r0
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d001      	beq.n	80017b8 <HAL_I2S_MspInit+0x10c>
    {
      Error_Handler();
 80017b4:	f001 fad4 	bl	8002d60 <Error_Handler>
    }

    __HAL_LINKDMA(i2sHandle,hdmarx,hdma_spi2_rx);
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	4a31      	ldr	r2, [pc, #196]	@ (8001880 <HAL_I2S_MspInit+0x1d4>)
 80017bc:	63da      	str	r2, [r3, #60]	@ 0x3c
 80017be:	4a30      	ldr	r2, [pc, #192]	@ (8001880 <HAL_I2S_MspInit+0x1d4>)
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 80017c4:	e04f      	b.n	8001866 <HAL_I2S_MspInit+0x1ba>
  else if(i2sHandle->Instance==SPI3)
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	4a2f      	ldr	r2, [pc, #188]	@ (8001888 <HAL_I2S_MspInit+0x1dc>)
 80017cc:	4293      	cmp	r3, r2
 80017ce:	d14a      	bne.n	8001866 <HAL_I2S_MspInit+0x1ba>
    __HAL_RCC_SPI3_CLK_ENABLE();
 80017d0:	2300      	movs	r3, #0
 80017d2:	617b      	str	r3, [r7, #20]
 80017d4:	4b27      	ldr	r3, [pc, #156]	@ (8001874 <HAL_I2S_MspInit+0x1c8>)
 80017d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017d8:	4a26      	ldr	r2, [pc, #152]	@ (8001874 <HAL_I2S_MspInit+0x1c8>)
 80017da:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80017de:	6413      	str	r3, [r2, #64]	@ 0x40
 80017e0:	4b24      	ldr	r3, [pc, #144]	@ (8001874 <HAL_I2S_MspInit+0x1c8>)
 80017e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017e4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80017e8:	617b      	str	r3, [r7, #20]
 80017ea:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017ec:	2300      	movs	r3, #0
 80017ee:	613b      	str	r3, [r7, #16]
 80017f0:	4b20      	ldr	r3, [pc, #128]	@ (8001874 <HAL_I2S_MspInit+0x1c8>)
 80017f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017f4:	4a1f      	ldr	r2, [pc, #124]	@ (8001874 <HAL_I2S_MspInit+0x1c8>)
 80017f6:	f043 0301 	orr.w	r3, r3, #1
 80017fa:	6313      	str	r3, [r2, #48]	@ 0x30
 80017fc:	4b1d      	ldr	r3, [pc, #116]	@ (8001874 <HAL_I2S_MspInit+0x1c8>)
 80017fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001800:	f003 0301 	and.w	r3, r3, #1
 8001804:	613b      	str	r3, [r7, #16]
 8001806:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001808:	2300      	movs	r3, #0
 800180a:	60fb      	str	r3, [r7, #12]
 800180c:	4b19      	ldr	r3, [pc, #100]	@ (8001874 <HAL_I2S_MspInit+0x1c8>)
 800180e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001810:	4a18      	ldr	r2, [pc, #96]	@ (8001874 <HAL_I2S_MspInit+0x1c8>)
 8001812:	f043 0304 	orr.w	r3, r3, #4
 8001816:	6313      	str	r3, [r2, #48]	@ 0x30
 8001818:	4b16      	ldr	r3, [pc, #88]	@ (8001874 <HAL_I2S_MspInit+0x1c8>)
 800181a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800181c:	f003 0304 	and.w	r3, r3, #4
 8001820:	60fb      	str	r3, [r7, #12]
 8001822:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001824:	2310      	movs	r3, #16
 8001826:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001828:	2302      	movs	r3, #2
 800182a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800182c:	2300      	movs	r3, #0
 800182e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001830:	2300      	movs	r3, #0
 8001832:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001834:	2306      	movs	r3, #6
 8001836:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001838:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800183c:	4619      	mov	r1, r3
 800183e:	4813      	ldr	r0, [pc, #76]	@ (800188c <HAL_I2S_MspInit+0x1e0>)
 8001840:	f005 fa92 	bl	8006d68 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12;
 8001844:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001848:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800184a:	2302      	movs	r3, #2
 800184c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800184e:	2300      	movs	r3, #0
 8001850:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001852:	2300      	movs	r3, #0
 8001854:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001856:	2306      	movs	r3, #6
 8001858:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800185a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800185e:	4619      	mov	r1, r3
 8001860:	4805      	ldr	r0, [pc, #20]	@ (8001878 <HAL_I2S_MspInit+0x1cc>)
 8001862:	f005 fa81 	bl	8006d68 <HAL_GPIO_Init>
}
 8001866:	bf00      	nop
 8001868:	3738      	adds	r7, #56	@ 0x38
 800186a:	46bd      	mov	sp, r7
 800186c:	bd80      	pop	{r7, pc}
 800186e:	bf00      	nop
 8001870:	40003800 	.word	0x40003800
 8001874:	40023800 	.word	0x40023800
 8001878:	40020800 	.word	0x40020800
 800187c:	40020400 	.word	0x40020400
 8001880:	2000d458 	.word	0x2000d458
 8001884:	40026058 	.word	0x40026058
 8001888:	40003c00 	.word	0x40003c00
 800188c:	40020000 	.word	0x40020000

08001890 <ILI9341_WriteCommand>:
#include "stm32f4xx_hal.h"
#include "ili9341.h"

// Send command to display. Use ILI9341_SELECT() before
static inline void ILI9341_WriteCommand(ILI9341TypeDef *display, uint8_t command)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	b082      	sub	sp, #8
 8001894:	af00      	add	r7, sp, #0
 8001896:	6078      	str	r0, [r7, #4]
 8001898:	460b      	mov	r3, r1
 800189a:	70fb      	strb	r3, [r7, #3]
	ILI9341_COMMAND(display);
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	8a5b      	ldrh	r3, [r3, #18]
 80018a0:	461a      	mov	r2, r3
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	689b      	ldr	r3, [r3, #8]
 80018a6:	0412      	lsls	r2, r2, #16
 80018a8:	619a      	str	r2, [r3, #24]
	HAL_SPI_Transmit(display->spi, &command, 1, 1);
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	6818      	ldr	r0, [r3, #0]
 80018ae:	1cf9      	adds	r1, r7, #3
 80018b0:	2301      	movs	r3, #1
 80018b2:	2201      	movs	r2, #1
 80018b4:	f007 f861 	bl	800897a <HAL_SPI_Transmit>
}
 80018b8:	bf00      	nop
 80018ba:	3708      	adds	r7, #8
 80018bc:	46bd      	mov	sp, r7
 80018be:	bd80      	pop	{r7, pc}

080018c0 <ILI9341_WriteByte>:

// Send byte to display. Use ILI9341_SELECT() before
static inline void ILI9341_WriteByte(ILI9341TypeDef *display, uint8_t data)
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	b082      	sub	sp, #8
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	6078      	str	r0, [r7, #4]
 80018c8:	460b      	mov	r3, r1
 80018ca:	70fb      	strb	r3, [r7, #3]
	ILI9341_DATA(display);
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	8a5a      	ldrh	r2, [r3, #18]
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	689b      	ldr	r3, [r3, #8]
 80018d4:	619a      	str	r2, [r3, #24]
	HAL_SPI_Transmit(display->spi, &data, 1, 1);
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	6818      	ldr	r0, [r3, #0]
 80018da:	1cf9      	adds	r1, r7, #3
 80018dc:	2301      	movs	r3, #1
 80018de:	2201      	movs	r2, #1
 80018e0:	f007 f84b 	bl	800897a <HAL_SPI_Transmit>
}
 80018e4:	bf00      	nop
 80018e6:	3708      	adds	r7, #8
 80018e8:	46bd      	mov	sp, r7
 80018ea:	bd80      	pop	{r7, pc}

080018ec <ILI9341_WriteBuffer>:

// Send buffer to display. Use ILI9341_SELECT() before
static inline void ILI9341_WriteBuffer(ILI9341TypeDef *display, uint8_t* buff, size_t buff_size)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	b086      	sub	sp, #24
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	60f8      	str	r0, [r7, #12]
 80018f4:	60b9      	str	r1, [r7, #8]
 80018f6:	607a      	str	r2, [r7, #4]
	ILI9341_DATA(display);
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	8a5a      	ldrh	r2, [r3, #18]
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	689b      	ldr	r3, [r3, #8]
 8001900:	619a      	str	r2, [r3, #24]

    // split data in small chunks because HAL can't send more then 64K at once
    while (buff_size > 0) {
 8001902:	e015      	b.n	8001930 <ILI9341_WriteBuffer+0x44>
        uint16_t chunk_size = buff_size > 32768 ? 32768 : buff_size;
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800190a:	bf28      	it	cs
 800190c:	f44f 4300 	movcs.w	r3, #32768	@ 0x8000
 8001910:	82fb      	strh	r3, [r7, #22]
        HAL_SPI_Transmit(display->spi, buff, chunk_size, 10);
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	6818      	ldr	r0, [r3, #0]
 8001916:	8afa      	ldrh	r2, [r7, #22]
 8001918:	230a      	movs	r3, #10
 800191a:	68b9      	ldr	r1, [r7, #8]
 800191c:	f007 f82d 	bl	800897a <HAL_SPI_Transmit>
        buff += chunk_size;
 8001920:	8afb      	ldrh	r3, [r7, #22]
 8001922:	68ba      	ldr	r2, [r7, #8]
 8001924:	4413      	add	r3, r2
 8001926:	60bb      	str	r3, [r7, #8]
        buff_size -= chunk_size;
 8001928:	8afb      	ldrh	r3, [r7, #22]
 800192a:	687a      	ldr	r2, [r7, #4]
 800192c:	1ad3      	subs	r3, r2, r3
 800192e:	607b      	str	r3, [r7, #4]
    while (buff_size > 0) {
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	2b00      	cmp	r3, #0
 8001934:	d1e6      	bne.n	8001904 <ILI9341_WriteBuffer+0x18>
    }
}
 8001936:	bf00      	nop
 8001938:	bf00      	nop
 800193a:	3718      	adds	r7, #24
 800193c:	46bd      	mov	sp, r7
 800193e:	bd80      	pop	{r7, pc}

08001940 <ILI9341_SetAddressWindow>:

static inline void ILI9341_SetAddressWindow(ILI9341TypeDef *display, uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2)
{
 8001940:	b580      	push	{r7, lr}
 8001942:	b086      	sub	sp, #24
 8001944:	af00      	add	r7, sp, #0
 8001946:	60f8      	str	r0, [r7, #12]
 8001948:	4608      	mov	r0, r1
 800194a:	4611      	mov	r1, r2
 800194c:	461a      	mov	r2, r3
 800194e:	4603      	mov	r3, r0
 8001950:	817b      	strh	r3, [r7, #10]
 8001952:	460b      	mov	r3, r1
 8001954:	813b      	strh	r3, [r7, #8]
 8001956:	4613      	mov	r3, r2
 8001958:	80fb      	strh	r3, [r7, #6]
    // Column address set
	ILI9341_WriteCommand(display, 0x2A); // CASET
 800195a:	212a      	movs	r1, #42	@ 0x2a
 800195c:	68f8      	ldr	r0, [r7, #12]
 800195e:	f7ff ff97 	bl	8001890 <ILI9341_WriteCommand>

	uint8_t data[4];
	data[0] = x1 >> 8;
 8001962:	897b      	ldrh	r3, [r7, #10]
 8001964:	0a1b      	lsrs	r3, r3, #8
 8001966:	b29b      	uxth	r3, r3
 8001968:	b2db      	uxtb	r3, r3
 800196a:	753b      	strb	r3, [r7, #20]
	data[1] = x1;
 800196c:	897b      	ldrh	r3, [r7, #10]
 800196e:	b2db      	uxtb	r3, r3
 8001970:	757b      	strb	r3, [r7, #21]
	data[2] = x2 >> 8;
 8001972:	88fb      	ldrh	r3, [r7, #6]
 8001974:	0a1b      	lsrs	r3, r3, #8
 8001976:	b29b      	uxth	r3, r3
 8001978:	b2db      	uxtb	r3, r3
 800197a:	75bb      	strb	r3, [r7, #22]
	data[3] = x2;
 800197c:	88fb      	ldrh	r3, [r7, #6]
 800197e:	b2db      	uxtb	r3, r3
 8001980:	75fb      	strb	r3, [r7, #23]

	ILI9341_DATA(display);
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	8a5a      	ldrh	r2, [r3, #18]
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	689b      	ldr	r3, [r3, #8]
 800198a:	619a      	str	r2, [r3, #24]
	HAL_SPI_Transmit(display->spi, data, 4, 1);
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	6818      	ldr	r0, [r3, #0]
 8001990:	f107 0114 	add.w	r1, r7, #20
 8001994:	2301      	movs	r3, #1
 8001996:	2204      	movs	r2, #4
 8001998:	f006 ffef 	bl	800897a <HAL_SPI_Transmit>

    // Row address set
	ILI9341_WriteCommand(display, 0x2B); // RASET
 800199c:	212b      	movs	r1, #43	@ 0x2b
 800199e:	68f8      	ldr	r0, [r7, #12]
 80019a0:	f7ff ff76 	bl	8001890 <ILI9341_WriteCommand>

	data[0] = y1 >> 8;
 80019a4:	893b      	ldrh	r3, [r7, #8]
 80019a6:	0a1b      	lsrs	r3, r3, #8
 80019a8:	b29b      	uxth	r3, r3
 80019aa:	b2db      	uxtb	r3, r3
 80019ac:	753b      	strb	r3, [r7, #20]
	data[1] = y1;
 80019ae:	893b      	ldrh	r3, [r7, #8]
 80019b0:	b2db      	uxtb	r3, r3
 80019b2:	757b      	strb	r3, [r7, #21]
	data[2] = y2 >> 8;
 80019b4:	8c3b      	ldrh	r3, [r7, #32]
 80019b6:	0a1b      	lsrs	r3, r3, #8
 80019b8:	b29b      	uxth	r3, r3
 80019ba:	b2db      	uxtb	r3, r3
 80019bc:	75bb      	strb	r3, [r7, #22]
	data[3] = y2;
 80019be:	8c3b      	ldrh	r3, [r7, #32]
 80019c0:	b2db      	uxtb	r3, r3
 80019c2:	75fb      	strb	r3, [r7, #23]

	ILI9341_DATA(display);
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	8a5a      	ldrh	r2, [r3, #18]
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	689b      	ldr	r3, [r3, #8]
 80019cc:	619a      	str	r2, [r3, #24]
	HAL_SPI_Transmit(display->spi, data, 4, 1);
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	6818      	ldr	r0, [r3, #0]
 80019d2:	f107 0114 	add.w	r1, r7, #20
 80019d6:	2301      	movs	r3, #1
 80019d8:	2204      	movs	r2, #4
 80019da:	f006 ffce 	bl	800897a <HAL_SPI_Transmit>

    // Write to RAM
	ILI9341_WriteCommand(display, 0x2C); // RAMWR
 80019de:	212c      	movs	r1, #44	@ 0x2c
 80019e0:	68f8      	ldr	r0, [r7, #12]
 80019e2:	f7ff ff55 	bl	8001890 <ILI9341_WriteCommand>
}
 80019e6:	bf00      	nop
 80019e8:	3718      	adds	r7, #24
 80019ea:	46bd      	mov	sp, r7
 80019ec:	bd80      	pop	{r7, pc}

080019ee <ILI9341_Reset>:

static inline void ILI9341_Reset(ILI9341TypeDef *display)
{
 80019ee:	b580      	push	{r7, lr}
 80019f0:	b082      	sub	sp, #8
 80019f2:	af00      	add	r7, sp, #0
 80019f4:	6078      	str	r0, [r7, #4]
    display->reset_gpio_port->BSRR = (uint32_t)(display->reset_pin) << 16U;
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	8a9b      	ldrh	r3, [r3, #20]
 80019fa:	461a      	mov	r2, r3
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	68db      	ldr	r3, [r3, #12]
 8001a00:	0412      	lsls	r2, r2, #16
 8001a02:	619a      	str	r2, [r3, #24]
    HAL_Delay(5);
 8001a04:	2005      	movs	r0, #5
 8001a06:	f003 ffa5 	bl	8005954 <HAL_Delay>
    display->reset_gpio_port->BSRR = display->reset_pin;
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	8a9a      	ldrh	r2, [r3, #20]
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	68db      	ldr	r3, [r3, #12]
 8001a12:	619a      	str	r2, [r3, #24]
}
 8001a14:	bf00      	nop
 8001a16:	3708      	adds	r7, #8
 8001a18:	46bd      	mov	sp, r7
 8001a1a:	bd80      	pop	{r7, pc}

08001a1c <ILI9341_Init>:

void ILI9341_Init(ILI9341TypeDef *display)
{
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	b082      	sub	sp, #8
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	6078      	str	r0, [r7, #4]
	ILI9341_SELECT(display);
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	8a1b      	ldrh	r3, [r3, #16]
 8001a28:	461a      	mov	r2, r3
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	685b      	ldr	r3, [r3, #4]
 8001a2e:	0412      	lsls	r2, r2, #16
 8001a30:	619a      	str	r2, [r3, #24]
	ILI9341_Reset(display);
 8001a32:	6878      	ldr	r0, [r7, #4]
 8001a34:	f7ff ffdb 	bl	80019ee <ILI9341_Reset>

	// SOFTWARE RESET
	ILI9341_WriteCommand(display, 0x01);
 8001a38:	2101      	movs	r1, #1
 8001a3a:	6878      	ldr	r0, [r7, #4]
 8001a3c:	f7ff ff28 	bl	8001890 <ILI9341_WriteCommand>
	HAL_Delay(1000);
 8001a40:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001a44:	f003 ff86 	bl	8005954 <HAL_Delay>

	// POWER CONTROL A
	ILI9341_WriteCommand(display, 0xCB);
 8001a48:	21cb      	movs	r1, #203	@ 0xcb
 8001a4a:	6878      	ldr	r0, [r7, #4]
 8001a4c:	f7ff ff20 	bl	8001890 <ILI9341_WriteCommand>
	ILI9341_WriteByte(display, 0x39);
 8001a50:	2139      	movs	r1, #57	@ 0x39
 8001a52:	6878      	ldr	r0, [r7, #4]
 8001a54:	f7ff ff34 	bl	80018c0 <ILI9341_WriteByte>
	ILI9341_WriteByte(display, 0x2C);
 8001a58:	212c      	movs	r1, #44	@ 0x2c
 8001a5a:	6878      	ldr	r0, [r7, #4]
 8001a5c:	f7ff ff30 	bl	80018c0 <ILI9341_WriteByte>
	ILI9341_WriteByte(display, 0x00);
 8001a60:	2100      	movs	r1, #0
 8001a62:	6878      	ldr	r0, [r7, #4]
 8001a64:	f7ff ff2c 	bl	80018c0 <ILI9341_WriteByte>
	ILI9341_WriteByte(display, 0x34);
 8001a68:	2134      	movs	r1, #52	@ 0x34
 8001a6a:	6878      	ldr	r0, [r7, #4]
 8001a6c:	f7ff ff28 	bl	80018c0 <ILI9341_WriteByte>
	ILI9341_WriteByte(display, 0x02);
 8001a70:	2102      	movs	r1, #2
 8001a72:	6878      	ldr	r0, [r7, #4]
 8001a74:	f7ff ff24 	bl	80018c0 <ILI9341_WriteByte>

	// POWER CONTROL B
	ILI9341_WriteCommand(display, 0xCF);
 8001a78:	21cf      	movs	r1, #207	@ 0xcf
 8001a7a:	6878      	ldr	r0, [r7, #4]
 8001a7c:	f7ff ff08 	bl	8001890 <ILI9341_WriteCommand>
	ILI9341_WriteByte(display, 0x00);
 8001a80:	2100      	movs	r1, #0
 8001a82:	6878      	ldr	r0, [r7, #4]
 8001a84:	f7ff ff1c 	bl	80018c0 <ILI9341_WriteByte>
	ILI9341_WriteByte(display, 0xC1);
 8001a88:	21c1      	movs	r1, #193	@ 0xc1
 8001a8a:	6878      	ldr	r0, [r7, #4]
 8001a8c:	f7ff ff18 	bl	80018c0 <ILI9341_WriteByte>
	ILI9341_WriteByte(display, 0x30);
 8001a90:	2130      	movs	r1, #48	@ 0x30
 8001a92:	6878      	ldr	r0, [r7, #4]
 8001a94:	f7ff ff14 	bl	80018c0 <ILI9341_WriteByte>

	// DRIVER TIMING CONTROL A
	ILI9341_WriteCommand(display, 0xE8);
 8001a98:	21e8      	movs	r1, #232	@ 0xe8
 8001a9a:	6878      	ldr	r0, [r7, #4]
 8001a9c:	f7ff fef8 	bl	8001890 <ILI9341_WriteCommand>
	ILI9341_WriteByte(display, 0x85);
 8001aa0:	2185      	movs	r1, #133	@ 0x85
 8001aa2:	6878      	ldr	r0, [r7, #4]
 8001aa4:	f7ff ff0c 	bl	80018c0 <ILI9341_WriteByte>
	ILI9341_WriteByte(display, 0x00);
 8001aa8:	2100      	movs	r1, #0
 8001aaa:	6878      	ldr	r0, [r7, #4]
 8001aac:	f7ff ff08 	bl	80018c0 <ILI9341_WriteByte>
	ILI9341_WriteByte(display, 0x78);
 8001ab0:	2178      	movs	r1, #120	@ 0x78
 8001ab2:	6878      	ldr	r0, [r7, #4]
 8001ab4:	f7ff ff04 	bl	80018c0 <ILI9341_WriteByte>

	// DRIVER TIMING CONTROL B
	ILI9341_WriteCommand(display, 0xEA);
 8001ab8:	21ea      	movs	r1, #234	@ 0xea
 8001aba:	6878      	ldr	r0, [r7, #4]
 8001abc:	f7ff fee8 	bl	8001890 <ILI9341_WriteCommand>
	ILI9341_WriteByte(display, 0x00);
 8001ac0:	2100      	movs	r1, #0
 8001ac2:	6878      	ldr	r0, [r7, #4]
 8001ac4:	f7ff fefc 	bl	80018c0 <ILI9341_WriteByte>
	ILI9341_WriteByte(display, 0x00);
 8001ac8:	2100      	movs	r1, #0
 8001aca:	6878      	ldr	r0, [r7, #4]
 8001acc:	f7ff fef8 	bl	80018c0 <ILI9341_WriteByte>

	// POWER ON SEQUENCE CONTROL
	ILI9341_WriteCommand(display, 0xED);
 8001ad0:	21ed      	movs	r1, #237	@ 0xed
 8001ad2:	6878      	ldr	r0, [r7, #4]
 8001ad4:	f7ff fedc 	bl	8001890 <ILI9341_WriteCommand>
	ILI9341_WriteByte(display, 0x64);
 8001ad8:	2164      	movs	r1, #100	@ 0x64
 8001ada:	6878      	ldr	r0, [r7, #4]
 8001adc:	f7ff fef0 	bl	80018c0 <ILI9341_WriteByte>
	ILI9341_WriteByte(display, 0x03);
 8001ae0:	2103      	movs	r1, #3
 8001ae2:	6878      	ldr	r0, [r7, #4]
 8001ae4:	f7ff feec 	bl	80018c0 <ILI9341_WriteByte>
	ILI9341_WriteByte(display, 0x12);
 8001ae8:	2112      	movs	r1, #18
 8001aea:	6878      	ldr	r0, [r7, #4]
 8001aec:	f7ff fee8 	bl	80018c0 <ILI9341_WriteByte>
	ILI9341_WriteByte(display, 0x81);
 8001af0:	2181      	movs	r1, #129	@ 0x81
 8001af2:	6878      	ldr	r0, [r7, #4]
 8001af4:	f7ff fee4 	bl	80018c0 <ILI9341_WriteByte>

	// PUMP RATIO CONTROL
	ILI9341_WriteCommand(display, 0xF7);
 8001af8:	21f7      	movs	r1, #247	@ 0xf7
 8001afa:	6878      	ldr	r0, [r7, #4]
 8001afc:	f7ff fec8 	bl	8001890 <ILI9341_WriteCommand>
	ILI9341_WriteByte(display, 0x20);
 8001b00:	2120      	movs	r1, #32
 8001b02:	6878      	ldr	r0, [r7, #4]
 8001b04:	f7ff fedc 	bl	80018c0 <ILI9341_WriteByte>

	// POWER CONTROL,VRH[5:0]
	ILI9341_WriteCommand(display, 0xC0);
 8001b08:	21c0      	movs	r1, #192	@ 0xc0
 8001b0a:	6878      	ldr	r0, [r7, #4]
 8001b0c:	f7ff fec0 	bl	8001890 <ILI9341_WriteCommand>
	ILI9341_WriteByte(display, 0x23);
 8001b10:	2123      	movs	r1, #35	@ 0x23
 8001b12:	6878      	ldr	r0, [r7, #4]
 8001b14:	f7ff fed4 	bl	80018c0 <ILI9341_WriteByte>

	// POWER CONTROL,SAP[2:0];BT[3:0]
	ILI9341_WriteCommand(display, 0xC1);
 8001b18:	21c1      	movs	r1, #193	@ 0xc1
 8001b1a:	6878      	ldr	r0, [r7, #4]
 8001b1c:	f7ff feb8 	bl	8001890 <ILI9341_WriteCommand>
	ILI9341_WriteByte(display, 0x10);
 8001b20:	2110      	movs	r1, #16
 8001b22:	6878      	ldr	r0, [r7, #4]
 8001b24:	f7ff fecc 	bl	80018c0 <ILI9341_WriteByte>

	// VCM CONTROL
	ILI9341_WriteCommand(display, 0xC5);
 8001b28:	21c5      	movs	r1, #197	@ 0xc5
 8001b2a:	6878      	ldr	r0, [r7, #4]
 8001b2c:	f7ff feb0 	bl	8001890 <ILI9341_WriteCommand>
	ILI9341_WriteByte(display, 0x3E);
 8001b30:	213e      	movs	r1, #62	@ 0x3e
 8001b32:	6878      	ldr	r0, [r7, #4]
 8001b34:	f7ff fec4 	bl	80018c0 <ILI9341_WriteByte>
	ILI9341_WriteByte(display, 0x28);
 8001b38:	2128      	movs	r1, #40	@ 0x28
 8001b3a:	6878      	ldr	r0, [r7, #4]
 8001b3c:	f7ff fec0 	bl	80018c0 <ILI9341_WriteByte>

	// VCM CONTROL 2
	ILI9341_WriteCommand(display, 0xC7);
 8001b40:	21c7      	movs	r1, #199	@ 0xc7
 8001b42:	6878      	ldr	r0, [r7, #4]
 8001b44:	f7ff fea4 	bl	8001890 <ILI9341_WriteCommand>
	ILI9341_WriteByte(display, 0x86);
 8001b48:	2186      	movs	r1, #134	@ 0x86
 8001b4a:	6878      	ldr	r0, [r7, #4]
 8001b4c:	f7ff feb8 	bl	80018c0 <ILI9341_WriteByte>

	// MEMORY ACCESS CONTROL
	ILI9341_WriteCommand(display, 0x36);
 8001b50:	2136      	movs	r1, #54	@ 0x36
 8001b52:	6878      	ldr	r0, [r7, #4]
 8001b54:	f7ff fe9c 	bl	8001890 <ILI9341_WriteCommand>
	ILI9341_WriteByte(display, 0x48);
 8001b58:	2148      	movs	r1, #72	@ 0x48
 8001b5a:	6878      	ldr	r0, [r7, #4]
 8001b5c:	f7ff feb0 	bl	80018c0 <ILI9341_WriteByte>

	// PIXEL FORMAT
	ILI9341_WriteCommand(display, 0x3A);
 8001b60:	213a      	movs	r1, #58	@ 0x3a
 8001b62:	6878      	ldr	r0, [r7, #4]
 8001b64:	f7ff fe94 	bl	8001890 <ILI9341_WriteCommand>
	ILI9341_WriteByte(display, 0x55);
 8001b68:	2155      	movs	r1, #85	@ 0x55
 8001b6a:	6878      	ldr	r0, [r7, #4]
 8001b6c:	f7ff fea8 	bl	80018c0 <ILI9341_WriteByte>

	// FRAME RATIO CONTROL, STANDARD RGB COLOR
	ILI9341_WriteCommand(display, 0xB1);
 8001b70:	21b1      	movs	r1, #177	@ 0xb1
 8001b72:	6878      	ldr	r0, [r7, #4]
 8001b74:	f7ff fe8c 	bl	8001890 <ILI9341_WriteCommand>
	ILI9341_WriteByte(display, 0x00);
 8001b78:	2100      	movs	r1, #0
 8001b7a:	6878      	ldr	r0, [r7, #4]
 8001b7c:	f7ff fea0 	bl	80018c0 <ILI9341_WriteByte>
	ILI9341_WriteByte(display, 0x18);
 8001b80:	2118      	movs	r1, #24
 8001b82:	6878      	ldr	r0, [r7, #4]
 8001b84:	f7ff fe9c 	bl	80018c0 <ILI9341_WriteByte>

	// DISPLAY FUNCTION CONTROL
	ILI9341_WriteCommand(display, 0xB6);
 8001b88:	21b6      	movs	r1, #182	@ 0xb6
 8001b8a:	6878      	ldr	r0, [r7, #4]
 8001b8c:	f7ff fe80 	bl	8001890 <ILI9341_WriteCommand>
	ILI9341_WriteByte(display, 0x08);
 8001b90:	2108      	movs	r1, #8
 8001b92:	6878      	ldr	r0, [r7, #4]
 8001b94:	f7ff fe94 	bl	80018c0 <ILI9341_WriteByte>
	ILI9341_WriteByte(display, 0x82);
 8001b98:	2182      	movs	r1, #130	@ 0x82
 8001b9a:	6878      	ldr	r0, [r7, #4]
 8001b9c:	f7ff fe90 	bl	80018c0 <ILI9341_WriteByte>
	ILI9341_WriteByte(display, 0x27);
 8001ba0:	2127      	movs	r1, #39	@ 0x27
 8001ba2:	6878      	ldr	r0, [r7, #4]
 8001ba4:	f7ff fe8c 	bl	80018c0 <ILI9341_WriteByte>

	// 3GAMMA FUNCTION DISABLE
	ILI9341_WriteCommand(display, 0xF2);
 8001ba8:	21f2      	movs	r1, #242	@ 0xf2
 8001baa:	6878      	ldr	r0, [r7, #4]
 8001bac:	f7ff fe70 	bl	8001890 <ILI9341_WriteCommand>
	ILI9341_WriteByte(display, 0x00);
 8001bb0:	2100      	movs	r1, #0
 8001bb2:	6878      	ldr	r0, [r7, #4]
 8001bb4:	f7ff fe84 	bl	80018c0 <ILI9341_WriteByte>

	// GAMMA CURVE SELECTED
	ILI9341_WriteCommand(display, 0x26);
 8001bb8:	2126      	movs	r1, #38	@ 0x26
 8001bba:	6878      	ldr	r0, [r7, #4]
 8001bbc:	f7ff fe68 	bl	8001890 <ILI9341_WriteCommand>
	ILI9341_WriteByte(display, 0x01);
 8001bc0:	2101      	movs	r1, #1
 8001bc2:	6878      	ldr	r0, [r7, #4]
 8001bc4:	f7ff fe7c 	bl	80018c0 <ILI9341_WriteByte>

	// POSITIVE GAMMA CORRECTION
	ILI9341_WriteCommand(display, 0xE0);
 8001bc8:	21e0      	movs	r1, #224	@ 0xe0
 8001bca:	6878      	ldr	r0, [r7, #4]
 8001bcc:	f7ff fe60 	bl	8001890 <ILI9341_WriteCommand>
	ILI9341_WriteByte(display, 0x0F);
 8001bd0:	210f      	movs	r1, #15
 8001bd2:	6878      	ldr	r0, [r7, #4]
 8001bd4:	f7ff fe74 	bl	80018c0 <ILI9341_WriteByte>
	ILI9341_WriteByte(display, 0x31);
 8001bd8:	2131      	movs	r1, #49	@ 0x31
 8001bda:	6878      	ldr	r0, [r7, #4]
 8001bdc:	f7ff fe70 	bl	80018c0 <ILI9341_WriteByte>
	ILI9341_WriteByte(display, 0x2B);
 8001be0:	212b      	movs	r1, #43	@ 0x2b
 8001be2:	6878      	ldr	r0, [r7, #4]
 8001be4:	f7ff fe6c 	bl	80018c0 <ILI9341_WriteByte>
	ILI9341_WriteByte(display, 0x0C);
 8001be8:	210c      	movs	r1, #12
 8001bea:	6878      	ldr	r0, [r7, #4]
 8001bec:	f7ff fe68 	bl	80018c0 <ILI9341_WriteByte>
	ILI9341_WriteByte(display, 0x0E);
 8001bf0:	210e      	movs	r1, #14
 8001bf2:	6878      	ldr	r0, [r7, #4]
 8001bf4:	f7ff fe64 	bl	80018c0 <ILI9341_WriteByte>
	ILI9341_WriteByte(display, 0x08);
 8001bf8:	2108      	movs	r1, #8
 8001bfa:	6878      	ldr	r0, [r7, #4]
 8001bfc:	f7ff fe60 	bl	80018c0 <ILI9341_WriteByte>
	ILI9341_WriteByte(display, 0x4E);
 8001c00:	214e      	movs	r1, #78	@ 0x4e
 8001c02:	6878      	ldr	r0, [r7, #4]
 8001c04:	f7ff fe5c 	bl	80018c0 <ILI9341_WriteByte>
	ILI9341_WriteByte(display, 0xF1);
 8001c08:	21f1      	movs	r1, #241	@ 0xf1
 8001c0a:	6878      	ldr	r0, [r7, #4]
 8001c0c:	f7ff fe58 	bl	80018c0 <ILI9341_WriteByte>
	ILI9341_WriteByte(display, 0x37);
 8001c10:	2137      	movs	r1, #55	@ 0x37
 8001c12:	6878      	ldr	r0, [r7, #4]
 8001c14:	f7ff fe54 	bl	80018c0 <ILI9341_WriteByte>
	ILI9341_WriteByte(display, 0x07);
 8001c18:	2107      	movs	r1, #7
 8001c1a:	6878      	ldr	r0, [r7, #4]
 8001c1c:	f7ff fe50 	bl	80018c0 <ILI9341_WriteByte>
	ILI9341_WriteByte(display, 0x10);
 8001c20:	2110      	movs	r1, #16
 8001c22:	6878      	ldr	r0, [r7, #4]
 8001c24:	f7ff fe4c 	bl	80018c0 <ILI9341_WriteByte>
	ILI9341_WriteByte(display, 0x03);
 8001c28:	2103      	movs	r1, #3
 8001c2a:	6878      	ldr	r0, [r7, #4]
 8001c2c:	f7ff fe48 	bl	80018c0 <ILI9341_WriteByte>
	ILI9341_WriteByte(display, 0x0E);
 8001c30:	210e      	movs	r1, #14
 8001c32:	6878      	ldr	r0, [r7, #4]
 8001c34:	f7ff fe44 	bl	80018c0 <ILI9341_WriteByte>
	ILI9341_WriteByte(display, 0x09);
 8001c38:	2109      	movs	r1, #9
 8001c3a:	6878      	ldr	r0, [r7, #4]
 8001c3c:	f7ff fe40 	bl	80018c0 <ILI9341_WriteByte>
	ILI9341_WriteByte(display, 0x00);
 8001c40:	2100      	movs	r1, #0
 8001c42:	6878      	ldr	r0, [r7, #4]
 8001c44:	f7ff fe3c 	bl	80018c0 <ILI9341_WriteByte>

	// NEGATIVE GAMMA CORRECTION
	ILI9341_WriteCommand(display, 0xE1);
 8001c48:	21e1      	movs	r1, #225	@ 0xe1
 8001c4a:	6878      	ldr	r0, [r7, #4]
 8001c4c:	f7ff fe20 	bl	8001890 <ILI9341_WriteCommand>
	ILI9341_WriteByte(display, 0x00);
 8001c50:	2100      	movs	r1, #0
 8001c52:	6878      	ldr	r0, [r7, #4]
 8001c54:	f7ff fe34 	bl	80018c0 <ILI9341_WriteByte>
	ILI9341_WriteByte(display, 0x0E);
 8001c58:	210e      	movs	r1, #14
 8001c5a:	6878      	ldr	r0, [r7, #4]
 8001c5c:	f7ff fe30 	bl	80018c0 <ILI9341_WriteByte>
	ILI9341_WriteByte(display, 0x14);
 8001c60:	2114      	movs	r1, #20
 8001c62:	6878      	ldr	r0, [r7, #4]
 8001c64:	f7ff fe2c 	bl	80018c0 <ILI9341_WriteByte>
	ILI9341_WriteByte(display, 0x03);
 8001c68:	2103      	movs	r1, #3
 8001c6a:	6878      	ldr	r0, [r7, #4]
 8001c6c:	f7ff fe28 	bl	80018c0 <ILI9341_WriteByte>
	ILI9341_WriteByte(display, 0x11);
 8001c70:	2111      	movs	r1, #17
 8001c72:	6878      	ldr	r0, [r7, #4]
 8001c74:	f7ff fe24 	bl	80018c0 <ILI9341_WriteByte>
	ILI9341_WriteByte(display, 0x07);
 8001c78:	2107      	movs	r1, #7
 8001c7a:	6878      	ldr	r0, [r7, #4]
 8001c7c:	f7ff fe20 	bl	80018c0 <ILI9341_WriteByte>
	ILI9341_WriteByte(display, 0x31);
 8001c80:	2131      	movs	r1, #49	@ 0x31
 8001c82:	6878      	ldr	r0, [r7, #4]
 8001c84:	f7ff fe1c 	bl	80018c0 <ILI9341_WriteByte>
	ILI9341_WriteByte(display, 0xC1);
 8001c88:	21c1      	movs	r1, #193	@ 0xc1
 8001c8a:	6878      	ldr	r0, [r7, #4]
 8001c8c:	f7ff fe18 	bl	80018c0 <ILI9341_WriteByte>
	ILI9341_WriteByte(display, 0x48);
 8001c90:	2148      	movs	r1, #72	@ 0x48
 8001c92:	6878      	ldr	r0, [r7, #4]
 8001c94:	f7ff fe14 	bl	80018c0 <ILI9341_WriteByte>
	ILI9341_WriteByte(display, 0x08);
 8001c98:	2108      	movs	r1, #8
 8001c9a:	6878      	ldr	r0, [r7, #4]
 8001c9c:	f7ff fe10 	bl	80018c0 <ILI9341_WriteByte>
	ILI9341_WriteByte(display, 0x0F);
 8001ca0:	210f      	movs	r1, #15
 8001ca2:	6878      	ldr	r0, [r7, #4]
 8001ca4:	f7ff fe0c 	bl	80018c0 <ILI9341_WriteByte>
	ILI9341_WriteByte(display, 0x0C);
 8001ca8:	210c      	movs	r1, #12
 8001caa:	6878      	ldr	r0, [r7, #4]
 8001cac:	f7ff fe08 	bl	80018c0 <ILI9341_WriteByte>
	ILI9341_WriteByte(display, 0x31);
 8001cb0:	2131      	movs	r1, #49	@ 0x31
 8001cb2:	6878      	ldr	r0, [r7, #4]
 8001cb4:	f7ff fe04 	bl	80018c0 <ILI9341_WriteByte>
	ILI9341_WriteByte(display, 0x36);
 8001cb8:	2136      	movs	r1, #54	@ 0x36
 8001cba:	6878      	ldr	r0, [r7, #4]
 8001cbc:	f7ff fe00 	bl	80018c0 <ILI9341_WriteByte>
	ILI9341_WriteByte(display, 0x0F);
 8001cc0:	210f      	movs	r1, #15
 8001cc2:	6878      	ldr	r0, [r7, #4]
 8001cc4:	f7ff fdfc 	bl	80018c0 <ILI9341_WriteByte>

	// EXIT SLEEP
	ILI9341_WriteCommand(display, 0x11);
 8001cc8:	2111      	movs	r1, #17
 8001cca:	6878      	ldr	r0, [r7, #4]
 8001ccc:	f7ff fde0 	bl	8001890 <ILI9341_WriteCommand>
	HAL_Delay(120);
 8001cd0:	2078      	movs	r0, #120	@ 0x78
 8001cd2:	f003 fe3f 	bl	8005954 <HAL_Delay>

	// TURN ON DISPLAY
	ILI9341_WriteCommand(display, 0x29);
 8001cd6:	2129      	movs	r1, #41	@ 0x29
 8001cd8:	6878      	ldr	r0, [r7, #4]
 8001cda:	f7ff fdd9 	bl	8001890 <ILI9341_WriteCommand>

	// MADCTL
	ILI9341_WriteCommand(display, 0x36);
 8001cde:	2136      	movs	r1, #54	@ 0x36
 8001ce0:	6878      	ldr	r0, [r7, #4]
 8001ce2:	f7ff fdd5 	bl	8001890 <ILI9341_WriteCommand>
	ILI9341_WriteByte(display, display->orientation);
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	7e9b      	ldrb	r3, [r3, #26]
 8001cea:	4619      	mov	r1, r3
 8001cec:	6878      	ldr	r0, [r7, #4]
 8001cee:	f7ff fde7 	bl	80018c0 <ILI9341_WriteByte>

	ILI9341_UNSELECT(display);
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	8a1a      	ldrh	r2, [r3, #16]
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	685b      	ldr	r3, [r3, #4]
 8001cfa:	619a      	str	r2, [r3, #24]
}
 8001cfc:	bf00      	nop
 8001cfe:	3708      	adds	r7, #8
 8001d00:	46bd      	mov	sp, r7
 8001d02:	bd80      	pop	{r7, pc}

08001d04 <ILI9341_DrawPixel>:
    ILI9341_WriteCommand(display, (invert > 0) ? 0x21 /* INVON */ : 0x20 /* INVOFF */);
    ILI9341_UNSELECT(display);
}

void ILI9341_DrawPixel(ILI9341TypeDef *display, uint16_t x, uint16_t y, uint16_t color)
{
 8001d04:	b580      	push	{r7, lr}
 8001d06:	b088      	sub	sp, #32
 8001d08:	af02      	add	r7, sp, #8
 8001d0a:	60f8      	str	r0, [r7, #12]
 8001d0c:	4608      	mov	r0, r1
 8001d0e:	4611      	mov	r1, r2
 8001d10:	461a      	mov	r2, r3
 8001d12:	4603      	mov	r3, r0
 8001d14:	817b      	strh	r3, [r7, #10]
 8001d16:	460b      	mov	r3, r1
 8001d18:	813b      	strh	r3, [r7, #8]
 8001d1a:	4613      	mov	r3, r2
 8001d1c:	80fb      	strh	r3, [r7, #6]
	// Check out of bounds
	if((x >= display->width) || (y >= display->height))
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	8adb      	ldrh	r3, [r3, #22]
 8001d22:	897a      	ldrh	r2, [r7, #10]
 8001d24:	429a      	cmp	r2, r3
 8001d26:	d233      	bcs.n	8001d90 <ILI9341_DrawPixel+0x8c>
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	8b1b      	ldrh	r3, [r3, #24]
 8001d2c:	893a      	ldrh	r2, [r7, #8]
 8001d2e:	429a      	cmp	r2, r3
 8001d30:	d22e      	bcs.n	8001d90 <ILI9341_DrawPixel+0x8c>
		return;

	ILI9341_SELECT(display);
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	8a1b      	ldrh	r3, [r3, #16]
 8001d36:	461a      	mov	r2, r3
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	685b      	ldr	r3, [r3, #4]
 8001d3c:	0412      	lsls	r2, r2, #16
 8001d3e:	619a      	str	r2, [r3, #24]
	ILI9341_SetAddressWindow(display, x, y, x + 1, y + 1);
 8001d40:	897b      	ldrh	r3, [r7, #10]
 8001d42:	3301      	adds	r3, #1
 8001d44:	b298      	uxth	r0, r3
 8001d46:	893b      	ldrh	r3, [r7, #8]
 8001d48:	3301      	adds	r3, #1
 8001d4a:	b29b      	uxth	r3, r3
 8001d4c:	893a      	ldrh	r2, [r7, #8]
 8001d4e:	8979      	ldrh	r1, [r7, #10]
 8001d50:	9300      	str	r3, [sp, #0]
 8001d52:	4603      	mov	r3, r0
 8001d54:	68f8      	ldr	r0, [r7, #12]
 8001d56:	f7ff fdf3 	bl	8001940 <ILI9341_SetAddressWindow>

	ILI9341_DATA(display);
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	8a5a      	ldrh	r2, [r3, #18]
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	689b      	ldr	r3, [r3, #8]
 8001d62:	619a      	str	r2, [r3, #24]
	uint8_t data[2] = { color >> 8, color };
 8001d64:	88fb      	ldrh	r3, [r7, #6]
 8001d66:	0a1b      	lsrs	r3, r3, #8
 8001d68:	b29b      	uxth	r3, r3
 8001d6a:	b2db      	uxtb	r3, r3
 8001d6c:	753b      	strb	r3, [r7, #20]
 8001d6e:	88fb      	ldrh	r3, [r7, #6]
 8001d70:	b2db      	uxtb	r3, r3
 8001d72:	757b      	strb	r3, [r7, #21]
	HAL_SPI_Transmit(display->spi, data, 2, 1);
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	6818      	ldr	r0, [r3, #0]
 8001d78:	f107 0114 	add.w	r1, r7, #20
 8001d7c:	2301      	movs	r3, #1
 8001d7e:	2202      	movs	r2, #2
 8001d80:	f006 fdfb 	bl	800897a <HAL_SPI_Transmit>

	ILI9341_UNSELECT(display);
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	8a1a      	ldrh	r2, [r3, #16]
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	685b      	ldr	r3, [r3, #4]
 8001d8c:	619a      	str	r2, [r3, #24]
 8001d8e:	e000      	b.n	8001d92 <ILI9341_DrawPixel+0x8e>
		return;
 8001d90:	bf00      	nop
}
 8001d92:	3718      	adds	r7, #24
 8001d94:	46bd      	mov	sp, r7
 8001d96:	bd80      	pop	{r7, pc}

08001d98 <ILI9341_Fill>:

static void ILI9341_Fill(ILI9341TypeDef *display, uint16_t color, uint32_t size)
{
 8001d98:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001d9c:	b08f      	sub	sp, #60	@ 0x3c
 8001d9e:	af00      	add	r7, sp, #0
 8001da0:	60f8      	str	r0, [r7, #12]
 8001da2:	460b      	mov	r3, r1
 8001da4:	607a      	str	r2, [r7, #4]
 8001da6:	817b      	strh	r3, [r7, #10]
 8001da8:	466b      	mov	r3, sp
 8001daa:	461e      	mov	r6, r3
	ILI9341_DATA(display);
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	8a5a      	ldrh	r2, [r3, #18]
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	689b      	ldr	r3, [r3, #8]
 8001db4:	619a      	str	r2, [r3, #24]

	uint32_t buffer_size = 0;
 8001db6:	2300      	movs	r3, #0
 8001db8:	637b      	str	r3, [r7, #52]	@ 0x34

	if ((size * 2) < ILI9341_BUFFER_MAX_SIZE)
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	005b      	lsls	r3, r3, #1
 8001dbe:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8001dc2:	d202      	bcs.n	8001dca <ILI9341_Fill+0x32>
		buffer_size = size;
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	637b      	str	r3, [r7, #52]	@ 0x34
 8001dc8:	e002      	b.n	8001dd0 <ILI9341_Fill+0x38>
	else
		buffer_size = ILI9341_BUFFER_MAX_SIZE;
 8001dca:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8001dce:	637b      	str	r3, [r7, #52]	@ 0x34

	uint8_t color_shifted = color >> 8;
 8001dd0:	897b      	ldrh	r3, [r7, #10]
 8001dd2:	0a1b      	lsrs	r3, r3, #8
 8001dd4:	b29b      	uxth	r3, r3
 8001dd6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
	uint8_t buffer[buffer_size];
 8001dda:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8001ddc:	460b      	mov	r3, r1
 8001dde:	3b01      	subs	r3, #1
 8001de0:	627b      	str	r3, [r7, #36]	@ 0x24
 8001de2:	2300      	movs	r3, #0
 8001de4:	4688      	mov	r8, r1
 8001de6:	4699      	mov	r9, r3
 8001de8:	f04f 0200 	mov.w	r2, #0
 8001dec:	f04f 0300 	mov.w	r3, #0
 8001df0:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001df4:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001df8:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001dfc:	2300      	movs	r3, #0
 8001dfe:	460c      	mov	r4, r1
 8001e00:	461d      	mov	r5, r3
 8001e02:	f04f 0200 	mov.w	r2, #0
 8001e06:	f04f 0300 	mov.w	r3, #0
 8001e0a:	00eb      	lsls	r3, r5, #3
 8001e0c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001e10:	00e2      	lsls	r2, r4, #3
 8001e12:	1dcb      	adds	r3, r1, #7
 8001e14:	08db      	lsrs	r3, r3, #3
 8001e16:	00db      	lsls	r3, r3, #3
 8001e18:	ebad 0d03 	sub.w	sp, sp, r3
 8001e1c:	466b      	mov	r3, sp
 8001e1e:	3300      	adds	r3, #0
 8001e20:	623b      	str	r3, [r7, #32]

	for (uint32_t i = 0; i < buffer_size; i += 2) {
 8001e22:	2300      	movs	r3, #0
 8001e24:	633b      	str	r3, [r7, #48]	@ 0x30
 8001e26:	e00e      	b.n	8001e46 <ILI9341_Fill+0xae>
		buffer[i]     = color_shifted;
 8001e28:	6a3a      	ldr	r2, [r7, #32]
 8001e2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001e2c:	4413      	add	r3, r2
 8001e2e:	f897 202b 	ldrb.w	r2, [r7, #43]	@ 0x2b
 8001e32:	701a      	strb	r2, [r3, #0]
		buffer[i + 1] = color;
 8001e34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001e36:	3301      	adds	r3, #1
 8001e38:	897a      	ldrh	r2, [r7, #10]
 8001e3a:	b2d1      	uxtb	r1, r2
 8001e3c:	6a3a      	ldr	r2, [r7, #32]
 8001e3e:	54d1      	strb	r1, [r2, r3]
	for (uint32_t i = 0; i < buffer_size; i += 2) {
 8001e40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001e42:	3302      	adds	r3, #2
 8001e44:	633b      	str	r3, [r7, #48]	@ 0x30
 8001e46:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001e48:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001e4a:	429a      	cmp	r2, r3
 8001e4c:	d3ec      	bcc.n	8001e28 <ILI9341_Fill+0x90>
	}

	uint32_t sending_size   = size * 2;
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	005b      	lsls	r3, r3, #1
 8001e52:	61fb      	str	r3, [r7, #28]
	uint32_t sending_blocks = sending_size / buffer_size;
 8001e54:	69fa      	ldr	r2, [r7, #28]
 8001e56:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001e58:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e5c:	61bb      	str	r3, [r7, #24]
	uint32_t sending_remain = sending_size % buffer_size;
 8001e5e:	69fb      	ldr	r3, [r7, #28]
 8001e60:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001e62:	fbb3 f2f2 	udiv	r2, r3, r2
 8001e66:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8001e68:	fb01 f202 	mul.w	r2, r1, r2
 8001e6c:	1a9b      	subs	r3, r3, r2
 8001e6e:	617b      	str	r3, [r7, #20]

	if (sending_blocks != 0) {
 8001e70:	69bb      	ldr	r3, [r7, #24]
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d011      	beq.n	8001e9a <ILI9341_Fill+0x102>
		for(uint32_t i = 0; i < sending_blocks; i++)
 8001e76:	2300      	movs	r3, #0
 8001e78:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001e7a:	e00a      	b.n	8001e92 <ILI9341_Fill+0xfa>
			HAL_SPI_Transmit(display->spi, (uint8_t*)buffer, buffer_size, 10);
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	6818      	ldr	r0, [r3, #0]
 8001e80:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001e82:	b29a      	uxth	r2, r3
 8001e84:	230a      	movs	r3, #10
 8001e86:	6a39      	ldr	r1, [r7, #32]
 8001e88:	f006 fd77 	bl	800897a <HAL_SPI_Transmit>
		for(uint32_t i = 0; i < sending_blocks; i++)
 8001e8c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001e8e:	3301      	adds	r3, #1
 8001e90:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001e92:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001e94:	69bb      	ldr	r3, [r7, #24]
 8001e96:	429a      	cmp	r2, r3
 8001e98:	d3f0      	bcc.n	8001e7c <ILI9341_Fill+0xe4>
	}

	HAL_SPI_Transmit(display->spi, (uint8_t*)buffer, sending_remain, 10);
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	6818      	ldr	r0, [r3, #0]
 8001e9e:	697b      	ldr	r3, [r7, #20]
 8001ea0:	b29a      	uxth	r2, r3
 8001ea2:	230a      	movs	r3, #10
 8001ea4:	6a39      	ldr	r1, [r7, #32]
 8001ea6:	f006 fd68 	bl	800897a <HAL_SPI_Transmit>
 8001eaa:	46b5      	mov	sp, r6
}
 8001eac:	bf00      	nop
 8001eae:	373c      	adds	r7, #60	@ 0x3c
 8001eb0:	46bd      	mov	sp, r7
 8001eb2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08001eb6 <ILI9341_FillScreen>:

void ILI9341_FillScreen(ILI9341TypeDef *display, uint16_t color)
{
 8001eb6:	b580      	push	{r7, lr}
 8001eb8:	b084      	sub	sp, #16
 8001eba:	af02      	add	r7, sp, #8
 8001ebc:	6078      	str	r0, [r7, #4]
 8001ebe:	460b      	mov	r3, r1
 8001ec0:	807b      	strh	r3, [r7, #2]
	ILI9341_SELECT(display);
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	8a1b      	ldrh	r3, [r3, #16]
 8001ec6:	461a      	mov	r2, r3
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	685b      	ldr	r3, [r3, #4]
 8001ecc:	0412      	lsls	r2, r2, #16
 8001ece:	619a      	str	r2, [r3, #24]
	ILI9341_SetAddressWindow(display, 0, 0, display->width - 1, display->height - 1);
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	8adb      	ldrh	r3, [r3, #22]
 8001ed4:	3b01      	subs	r3, #1
 8001ed6:	b29a      	uxth	r2, r3
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	8b1b      	ldrh	r3, [r3, #24]
 8001edc:	3b01      	subs	r3, #1
 8001ede:	b29b      	uxth	r3, r3
 8001ee0:	9300      	str	r3, [sp, #0]
 8001ee2:	4613      	mov	r3, r2
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	2100      	movs	r1, #0
 8001ee8:	6878      	ldr	r0, [r7, #4]
 8001eea:	f7ff fd29 	bl	8001940 <ILI9341_SetAddressWindow>
	ILI9341_Fill(display, color, display->width * display->height);
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	8adb      	ldrh	r3, [r3, #22]
 8001ef2:	461a      	mov	r2, r3
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	8b1b      	ldrh	r3, [r3, #24]
 8001ef8:	fb02 f303 	mul.w	r3, r2, r3
 8001efc:	461a      	mov	r2, r3
 8001efe:	887b      	ldrh	r3, [r7, #2]
 8001f00:	4619      	mov	r1, r3
 8001f02:	6878      	ldr	r0, [r7, #4]
 8001f04:	f7ff ff48 	bl	8001d98 <ILI9341_Fill>
	ILI9341_UNSELECT(display);
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	8a1a      	ldrh	r2, [r3, #16]
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	685b      	ldr	r3, [r3, #4]
 8001f10:	619a      	str	r2, [r3, #24]
}
 8001f12:	bf00      	nop
 8001f14:	3708      	adds	r7, #8
 8001f16:	46bd      	mov	sp, r7
 8001f18:	bd80      	pop	{r7, pc}

08001f1a <ILI9341_FillRectangle>:

void ILI9341_FillRectangle(ILI9341TypeDef *display, uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color)
{
 8001f1a:	b580      	push	{r7, lr}
 8001f1c:	b086      	sub	sp, #24
 8001f1e:	af02      	add	r7, sp, #8
 8001f20:	60f8      	str	r0, [r7, #12]
 8001f22:	4608      	mov	r0, r1
 8001f24:	4611      	mov	r1, r2
 8001f26:	461a      	mov	r2, r3
 8001f28:	4603      	mov	r3, r0
 8001f2a:	817b      	strh	r3, [r7, #10]
 8001f2c:	460b      	mov	r3, r1
 8001f2e:	813b      	strh	r3, [r7, #8]
 8001f30:	4613      	mov	r3, r2
 8001f32:	80fb      	strh	r3, [r7, #6]
	if ((x >= display->width) || (y >= display->height))
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	8adb      	ldrh	r3, [r3, #22]
 8001f38:	897a      	ldrh	r2, [r7, #10]
 8001f3a:	429a      	cmp	r2, r3
 8001f3c:	d246      	bcs.n	8001fcc <ILI9341_FillRectangle+0xb2>
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	8b1b      	ldrh	r3, [r3, #24]
 8001f42:	893a      	ldrh	r2, [r7, #8]
 8001f44:	429a      	cmp	r2, r3
 8001f46:	d241      	bcs.n	8001fcc <ILI9341_FillRectangle+0xb2>
		return;

	if ((x + w - 1) >= display->width)
 8001f48:	897a      	ldrh	r2, [r7, #10]
 8001f4a:	88fb      	ldrh	r3, [r7, #6]
 8001f4c:	4413      	add	r3, r2
 8001f4e:	68fa      	ldr	r2, [r7, #12]
 8001f50:	8ad2      	ldrh	r2, [r2, #22]
 8001f52:	4293      	cmp	r3, r2
 8001f54:	dd04      	ble.n	8001f60 <ILI9341_FillRectangle+0x46>
		w = display->width - x;
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	8ada      	ldrh	r2, [r3, #22]
 8001f5a:	897b      	ldrh	r3, [r7, #10]
 8001f5c:	1ad3      	subs	r3, r2, r3
 8001f5e:	80fb      	strh	r3, [r7, #6]

	if ((y + h - 1) >= display->height)
 8001f60:	893a      	ldrh	r2, [r7, #8]
 8001f62:	8b3b      	ldrh	r3, [r7, #24]
 8001f64:	4413      	add	r3, r2
 8001f66:	68fa      	ldr	r2, [r7, #12]
 8001f68:	8b12      	ldrh	r2, [r2, #24]
 8001f6a:	4293      	cmp	r3, r2
 8001f6c:	dd04      	ble.n	8001f78 <ILI9341_FillRectangle+0x5e>
		h = display->height - y;
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	8b1a      	ldrh	r2, [r3, #24]
 8001f72:	893b      	ldrh	r3, [r7, #8]
 8001f74:	1ad3      	subs	r3, r2, r3
 8001f76:	833b      	strh	r3, [r7, #24]

	ILI9341_SELECT(display);
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	8a1b      	ldrh	r3, [r3, #16]
 8001f7c:	461a      	mov	r2, r3
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	685b      	ldr	r3, [r3, #4]
 8001f82:	0412      	lsls	r2, r2, #16
 8001f84:	619a      	str	r2, [r3, #24]
	ILI9341_SetAddressWindow(display, x, y, x + w - 1, y + h - 1);
 8001f86:	897a      	ldrh	r2, [r7, #10]
 8001f88:	88fb      	ldrh	r3, [r7, #6]
 8001f8a:	4413      	add	r3, r2
 8001f8c:	b29b      	uxth	r3, r3
 8001f8e:	3b01      	subs	r3, #1
 8001f90:	b298      	uxth	r0, r3
 8001f92:	893a      	ldrh	r2, [r7, #8]
 8001f94:	8b3b      	ldrh	r3, [r7, #24]
 8001f96:	4413      	add	r3, r2
 8001f98:	b29b      	uxth	r3, r3
 8001f9a:	3b01      	subs	r3, #1
 8001f9c:	b29b      	uxth	r3, r3
 8001f9e:	893a      	ldrh	r2, [r7, #8]
 8001fa0:	8979      	ldrh	r1, [r7, #10]
 8001fa2:	9300      	str	r3, [sp, #0]
 8001fa4:	4603      	mov	r3, r0
 8001fa6:	68f8      	ldr	r0, [r7, #12]
 8001fa8:	f7ff fcca 	bl	8001940 <ILI9341_SetAddressWindow>
	ILI9341_Fill(display, color, w * h);
 8001fac:	88fb      	ldrh	r3, [r7, #6]
 8001fae:	8b3a      	ldrh	r2, [r7, #24]
 8001fb0:	fb02 f303 	mul.w	r3, r2, r3
 8001fb4:	461a      	mov	r2, r3
 8001fb6:	8bbb      	ldrh	r3, [r7, #28]
 8001fb8:	4619      	mov	r1, r3
 8001fba:	68f8      	ldr	r0, [r7, #12]
 8001fbc:	f7ff feec 	bl	8001d98 <ILI9341_Fill>
	ILI9341_UNSELECT(display);
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	8a1a      	ldrh	r2, [r3, #16]
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	685b      	ldr	r3, [r3, #4]
 8001fc8:	619a      	str	r2, [r3, #24]
 8001fca:	e000      	b.n	8001fce <ILI9341_FillRectangle+0xb4>
		return;
 8001fcc:	bf00      	nop
}
 8001fce:	3710      	adds	r7, #16
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	bd80      	pop	{r7, pc}

08001fd4 <ILI9341_Rectangle>:

void ILI9341_Rectangle(ILI9341TypeDef *display, uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color)
{
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	b086      	sub	sp, #24
 8001fd8:	af02      	add	r7, sp, #8
 8001fda:	60f8      	str	r0, [r7, #12]
 8001fdc:	4608      	mov	r0, r1
 8001fde:	4611      	mov	r1, r2
 8001fe0:	461a      	mov	r2, r3
 8001fe2:	4603      	mov	r3, r0
 8001fe4:	817b      	strh	r3, [r7, #10]
 8001fe6:	460b      	mov	r3, r1
 8001fe8:	813b      	strh	r3, [r7, #8]
 8001fea:	4613      	mov	r3, r2
 8001fec:	80fb      	strh	r3, [r7, #6]
	ILI9341_FillRectangle(display, x,     y,     w + 1, 1, color);
 8001fee:	88fb      	ldrh	r3, [r7, #6]
 8001ff0:	3301      	adds	r3, #1
 8001ff2:	b298      	uxth	r0, r3
 8001ff4:	893a      	ldrh	r2, [r7, #8]
 8001ff6:	8979      	ldrh	r1, [r7, #10]
 8001ff8:	8bbb      	ldrh	r3, [r7, #28]
 8001ffa:	9301      	str	r3, [sp, #4]
 8001ffc:	2301      	movs	r3, #1
 8001ffe:	9300      	str	r3, [sp, #0]
 8002000:	4603      	mov	r3, r0
 8002002:	68f8      	ldr	r0, [r7, #12]
 8002004:	f7ff ff89 	bl	8001f1a <ILI9341_FillRectangle>
	ILI9341_FillRectangle(display, x, y + h,     w + 1, 1, color);
 8002008:	893a      	ldrh	r2, [r7, #8]
 800200a:	8b3b      	ldrh	r3, [r7, #24]
 800200c:	4413      	add	r3, r2
 800200e:	b29a      	uxth	r2, r3
 8002010:	88fb      	ldrh	r3, [r7, #6]
 8002012:	3301      	adds	r3, #1
 8002014:	b298      	uxth	r0, r3
 8002016:	8979      	ldrh	r1, [r7, #10]
 8002018:	8bbb      	ldrh	r3, [r7, #28]
 800201a:	9301      	str	r3, [sp, #4]
 800201c:	2301      	movs	r3, #1
 800201e:	9300      	str	r3, [sp, #0]
 8002020:	4603      	mov	r3, r0
 8002022:	68f8      	ldr	r0, [r7, #12]
 8002024:	f7ff ff79 	bl	8001f1a <ILI9341_FillRectangle>
	ILI9341_FillRectangle(display, x,     y,     1,     h, color);
 8002028:	893a      	ldrh	r2, [r7, #8]
 800202a:	8979      	ldrh	r1, [r7, #10]
 800202c:	8bbb      	ldrh	r3, [r7, #28]
 800202e:	9301      	str	r3, [sp, #4]
 8002030:	8b3b      	ldrh	r3, [r7, #24]
 8002032:	9300      	str	r3, [sp, #0]
 8002034:	2301      	movs	r3, #1
 8002036:	68f8      	ldr	r0, [r7, #12]
 8002038:	f7ff ff6f 	bl	8001f1a <ILI9341_FillRectangle>
	ILI9341_FillRectangle(display, x + w, y,     1,     h, color);
 800203c:	897a      	ldrh	r2, [r7, #10]
 800203e:	88fb      	ldrh	r3, [r7, #6]
 8002040:	4413      	add	r3, r2
 8002042:	b299      	uxth	r1, r3
 8002044:	893a      	ldrh	r2, [r7, #8]
 8002046:	8bbb      	ldrh	r3, [r7, #28]
 8002048:	9301      	str	r3, [sp, #4]
 800204a:	8b3b      	ldrh	r3, [r7, #24]
 800204c:	9300      	str	r3, [sp, #0]
 800204e:	2301      	movs	r3, #1
 8002050:	68f8      	ldr	r0, [r7, #12]
 8002052:	f7ff ff62 	bl	8001f1a <ILI9341_FillRectangle>
}
 8002056:	bf00      	nop
 8002058:	3710      	adds	r7, #16
 800205a:	46bd      	mov	sp, r7
 800205c:	bd80      	pop	{r7, pc}

0800205e <ILI9341_WriteChar>:

static void ILI9341_WriteChar(ILI9341TypeDef *display, uint16_t x, uint16_t y, char ch, FontDef font, uint16_t color, uint16_t bgcolor)
{
 800205e:	b580      	push	{r7, lr}
 8002060:	b08c      	sub	sp, #48	@ 0x30
 8002062:	af02      	add	r7, sp, #8
 8002064:	60f8      	str	r0, [r7, #12]
 8002066:	4608      	mov	r0, r1
 8002068:	4611      	mov	r1, r2
 800206a:	461a      	mov	r2, r3
 800206c:	4603      	mov	r3, r0
 800206e:	817b      	strh	r3, [r7, #10]
 8002070:	460b      	mov	r3, r1
 8002072:	813b      	strh	r3, [r7, #8]
 8002074:	4613      	mov	r3, r2
 8002076:	71fb      	strb	r3, [r7, #7]
    uint32_t i, b, j;

    ILI9341_SetAddressWindow(display, x, y, x + font.width - 1, y + font.height - 1);
 8002078:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 800207c:	461a      	mov	r2, r3
 800207e:	897b      	ldrh	r3, [r7, #10]
 8002080:	4413      	add	r3, r2
 8002082:	b29b      	uxth	r3, r3
 8002084:	3b01      	subs	r3, #1
 8002086:	b298      	uxth	r0, r3
 8002088:	f897 3031 	ldrb.w	r3, [r7, #49]	@ 0x31
 800208c:	461a      	mov	r2, r3
 800208e:	893b      	ldrh	r3, [r7, #8]
 8002090:	4413      	add	r3, r2
 8002092:	b29b      	uxth	r3, r3
 8002094:	3b01      	subs	r3, #1
 8002096:	b29b      	uxth	r3, r3
 8002098:	893a      	ldrh	r2, [r7, #8]
 800209a:	8979      	ldrh	r1, [r7, #10]
 800209c:	9300      	str	r3, [sp, #0]
 800209e:	4603      	mov	r3, r0
 80020a0:	68f8      	ldr	r0, [r7, #12]
 80020a2:	f7ff fc4d 	bl	8001940 <ILI9341_SetAddressWindow>

    for (i = 0; i < font.height; i++) {
 80020a6:	2300      	movs	r3, #0
 80020a8:	627b      	str	r3, [r7, #36]	@ 0x24
 80020aa:	e043      	b.n	8002134 <ILI9341_WriteChar+0xd6>
        b = font.data[(ch - 32) * font.height + i];
 80020ac:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80020ae:	79fb      	ldrb	r3, [r7, #7]
 80020b0:	3b20      	subs	r3, #32
 80020b2:	f897 1031 	ldrb.w	r1, [r7, #49]	@ 0x31
 80020b6:	fb01 f303 	mul.w	r3, r1, r3
 80020ba:	4619      	mov	r1, r3
 80020bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020be:	440b      	add	r3, r1
 80020c0:	005b      	lsls	r3, r3, #1
 80020c2:	4413      	add	r3, r2
 80020c4:	881b      	ldrh	r3, [r3, #0]
 80020c6:	61fb      	str	r3, [r7, #28]
        for (j = 0; j < font.width; j++) {
 80020c8:	2300      	movs	r3, #0
 80020ca:	623b      	str	r3, [r7, #32]
 80020cc:	e029      	b.n	8002122 <ILI9341_WriteChar+0xc4>
            if ((b << j) & 0x8000) {
 80020ce:	69fa      	ldr	r2, [r7, #28]
 80020d0:	6a3b      	ldr	r3, [r7, #32]
 80020d2:	fa02 f303 	lsl.w	r3, r2, r3
 80020d6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d00f      	beq.n	80020fe <ILI9341_WriteChar+0xa0>
                uint8_t data[] = { color >> 8, color & 0xFF };
 80020de:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 80020e0:	0a1b      	lsrs	r3, r3, #8
 80020e2:	b29b      	uxth	r3, r3
 80020e4:	b2db      	uxtb	r3, r3
 80020e6:	763b      	strb	r3, [r7, #24]
 80020e8:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 80020ea:	b2db      	uxtb	r3, r3
 80020ec:	767b      	strb	r3, [r7, #25]
                ILI9341_WriteBuffer(display, data, sizeof(data));
 80020ee:	f107 0318 	add.w	r3, r7, #24
 80020f2:	2202      	movs	r2, #2
 80020f4:	4619      	mov	r1, r3
 80020f6:	68f8      	ldr	r0, [r7, #12]
 80020f8:	f7ff fbf8 	bl	80018ec <ILI9341_WriteBuffer>
 80020fc:	e00e      	b.n	800211c <ILI9341_WriteChar+0xbe>
            } else {
                uint8_t data[] = { bgcolor >> 8, bgcolor & 0xFF };
 80020fe:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8002100:	0a1b      	lsrs	r3, r3, #8
 8002102:	b29b      	uxth	r3, r3
 8002104:	b2db      	uxtb	r3, r3
 8002106:	753b      	strb	r3, [r7, #20]
 8002108:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800210a:	b2db      	uxtb	r3, r3
 800210c:	757b      	strb	r3, [r7, #21]
                ILI9341_WriteBuffer(display, data, sizeof(data));
 800210e:	f107 0314 	add.w	r3, r7, #20
 8002112:	2202      	movs	r2, #2
 8002114:	4619      	mov	r1, r3
 8002116:	68f8      	ldr	r0, [r7, #12]
 8002118:	f7ff fbe8 	bl	80018ec <ILI9341_WriteBuffer>
        for (j = 0; j < font.width; j++) {
 800211c:	6a3b      	ldr	r3, [r7, #32]
 800211e:	3301      	adds	r3, #1
 8002120:	623b      	str	r3, [r7, #32]
 8002122:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8002126:	461a      	mov	r2, r3
 8002128:	6a3b      	ldr	r3, [r7, #32]
 800212a:	4293      	cmp	r3, r2
 800212c:	d3cf      	bcc.n	80020ce <ILI9341_WriteChar+0x70>
    for (i = 0; i < font.height; i++) {
 800212e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002130:	3301      	adds	r3, #1
 8002132:	627b      	str	r3, [r7, #36]	@ 0x24
 8002134:	f897 3031 	ldrb.w	r3, [r7, #49]	@ 0x31
 8002138:	461a      	mov	r2, r3
 800213a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800213c:	4293      	cmp	r3, r2
 800213e:	d3b5      	bcc.n	80020ac <ILI9341_WriteChar+0x4e>
            }
        }
    }
}
 8002140:	bf00      	nop
 8002142:	bf00      	nop
 8002144:	3728      	adds	r7, #40	@ 0x28
 8002146:	46bd      	mov	sp, r7
 8002148:	bd80      	pop	{r7, pc}

0800214a <ILI9341_WriteString>:

void ILI9341_WriteString(ILI9341TypeDef *display, uint16_t x, uint16_t y, const char* str, FontDef font, uint16_t color, uint16_t bgcolor)
{
 800214a:	b5b0      	push	{r4, r5, r7, lr}
 800214c:	b088      	sub	sp, #32
 800214e:	af04      	add	r7, sp, #16
 8002150:	60f8      	str	r0, [r7, #12]
 8002152:	607b      	str	r3, [r7, #4]
 8002154:	460b      	mov	r3, r1
 8002156:	817b      	strh	r3, [r7, #10]
 8002158:	4613      	mov	r3, r2
 800215a:	813b      	strh	r3, [r7, #8]
	ILI9341_SELECT(display);
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	8a1b      	ldrh	r3, [r3, #16]
 8002160:	461a      	mov	r2, r3
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	685b      	ldr	r3, [r3, #4]
 8002166:	0412      	lsls	r2, r2, #16
 8002168:	619a      	str	r2, [r3, #24]

    while (*str) {
 800216a:	e03b      	b.n	80021e4 <ILI9341_WriteString+0x9a>
        if (x + font.width >= display->width) {
 800216c:	897b      	ldrh	r3, [r7, #10]
 800216e:	f897 2020 	ldrb.w	r2, [r7, #32]
 8002172:	4413      	add	r3, r2
 8002174:	68fa      	ldr	r2, [r7, #12]
 8002176:	8ad2      	ldrh	r2, [r2, #22]
 8002178:	4293      	cmp	r3, r2
 800217a:	db17      	blt.n	80021ac <ILI9341_WriteString+0x62>
            x = 0;
 800217c:	2300      	movs	r3, #0
 800217e:	817b      	strh	r3, [r7, #10]
            y += font.height;
 8002180:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8002184:	461a      	mov	r2, r3
 8002186:	893b      	ldrh	r3, [r7, #8]
 8002188:	4413      	add	r3, r2
 800218a:	813b      	strh	r3, [r7, #8]

            if (y + font.height >= display->height)
 800218c:	893b      	ldrh	r3, [r7, #8]
 800218e:	f897 2021 	ldrb.w	r2, [r7, #33]	@ 0x21
 8002192:	4413      	add	r3, r2
 8002194:	68fa      	ldr	r2, [r7, #12]
 8002196:	8b12      	ldrh	r2, [r2, #24]
 8002198:	4293      	cmp	r3, r2
 800219a:	da28      	bge.n	80021ee <ILI9341_WriteString+0xa4>
                break;

            if (*str == ' ') {
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	781b      	ldrb	r3, [r3, #0]
 80021a0:	2b20      	cmp	r3, #32
 80021a2:	d103      	bne.n	80021ac <ILI9341_WriteString+0x62>
                // skip spaces in the beginning of the new line
                str++;
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	3301      	adds	r3, #1
 80021a8:	607b      	str	r3, [r7, #4]
                continue;
 80021aa:	e01b      	b.n	80021e4 <ILI9341_WriteString+0x9a>
            }
        }

        ILI9341_WriteChar(display, x, y, *str, font, color, bgcolor);
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	781d      	ldrb	r5, [r3, #0]
 80021b0:	893a      	ldrh	r2, [r7, #8]
 80021b2:	897c      	ldrh	r4, [r7, #10]
 80021b4:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 80021b6:	9303      	str	r3, [sp, #12]
 80021b8:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80021ba:	9302      	str	r3, [sp, #8]
 80021bc:	466b      	mov	r3, sp
 80021be:	f107 0120 	add.w	r1, r7, #32
 80021c2:	c903      	ldmia	r1, {r0, r1}
 80021c4:	e883 0003 	stmia.w	r3, {r0, r1}
 80021c8:	462b      	mov	r3, r5
 80021ca:	4621      	mov	r1, r4
 80021cc:	68f8      	ldr	r0, [r7, #12]
 80021ce:	f7ff ff46 	bl	800205e <ILI9341_WriteChar>
        x += font.width;
 80021d2:	f897 3020 	ldrb.w	r3, [r7, #32]
 80021d6:	461a      	mov	r2, r3
 80021d8:	897b      	ldrh	r3, [r7, #10]
 80021da:	4413      	add	r3, r2
 80021dc:	817b      	strh	r3, [r7, #10]
        str++;
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	3301      	adds	r3, #1
 80021e2:	607b      	str	r3, [r7, #4]
    while (*str) {
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	781b      	ldrb	r3, [r3, #0]
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d1bf      	bne.n	800216c <ILI9341_WriteString+0x22>
 80021ec:	e000      	b.n	80021f0 <ILI9341_WriteString+0xa6>
                break;
 80021ee:	bf00      	nop
    }

	ILI9341_UNSELECT(display);
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	8a1a      	ldrh	r2, [r3, #16]
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	685b      	ldr	r3, [r3, #4]
 80021f8:	619a      	str	r2, [r3, #24]
}
 80021fa:	bf00      	nop
 80021fc:	3710      	adds	r7, #16
 80021fe:	46bd      	mov	sp, r7
 8002200:	bdb0      	pop	{r4, r5, r7, pc}
	...

08002204 <HAL_I2S_RxCpltCallback>:
  * @brief  I2S 接收全滿回呼函式
  * @param  hi2s: I2S handle
  * @retval None
  */
void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8002204:	b580      	push	{r7, lr}
 8002206:	b082      	sub	sp, #8
 8002208:	af00      	add	r7, sp, #0
 800220a:	6078      	str	r0, [r7, #4]
  // DMA 已經填充完緩衝區的後半部分
  // 在這裡呼叫語音辨識函式，處理後半段的資料
  // speech_recognition_run(&i2s_rx_buffer[I2S_BUFFER_SIZE / 2], I2S_BUFFER_SIZE / 2);
  buffer_is_ready = 2; // 示意：設定旗標
 800220c:	4b1f      	ldr	r3, [pc, #124]	@ (800228c <HAL_I2S_RxCpltCallback+0x88>)
 800220e:	2202      	movs	r2, #2
 8002210:	601a      	str	r2, [r3, #0]
	if(hi2s==&hi2s2){
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	4a1e      	ldr	r2, [pc, #120]	@ (8002290 <HAL_I2S_RxCpltCallback+0x8c>)
 8002216:	4293      	cmp	r3, r2
 8002218:	d133      	bne.n	8002282 <HAL_I2S_RxCpltCallback+0x7e>
		cb_cnt++;//回调次数计数
 800221a:	4b1e      	ldr	r3, [pc, #120]	@ (8002294 <HAL_I2S_RxCpltCallback+0x90>)
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	3301      	adds	r3, #1
 8002220:	4a1c      	ldr	r2, [pc, #112]	@ (8002294 <HAL_I2S_RxCpltCallback+0x90>)
 8002222:	6013      	str	r3, [r2, #0]
		//将两个32整型合并为一个
		//dat32 example: 0000fffb 00004f00
		//printf("%x\r\n",data_i2s[0]<<8);
		//printf("%x\r\n",data_i2s[1]>>8);

		val24=(i2s_rx_buffer[0]<<8)+(i2s_rx_buffer[1]>>8);
 8002224:	4b1c      	ldr	r3, [pc, #112]	@ (8002298 <HAL_I2S_RxCpltCallback+0x94>)
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	021a      	lsls	r2, r3, #8
 800222a:	4b1b      	ldr	r3, [pc, #108]	@ (8002298 <HAL_I2S_RxCpltCallback+0x94>)
 800222c:	685b      	ldr	r3, [r3, #4]
 800222e:	0a1b      	lsrs	r3, r3, #8
 8002230:	4413      	add	r3, r2
 8002232:	4a1a      	ldr	r2, [pc, #104]	@ (800229c <HAL_I2S_RxCpltCallback+0x98>)
 8002234:	6013      	str	r3, [r2, #0]
		//printf("%d\r\n",val24);
      //将24位有符号整型扩展到32位
		if(val24 & 0x800000)
 8002236:	4b19      	ldr	r3, [pc, #100]	@ (800229c <HAL_I2S_RxCpltCallback+0x98>)
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800223e:	2b00      	cmp	r3, #0
 8002240:	d007      	beq.n	8002252 <HAL_I2S_RxCpltCallback+0x4e>
		{//negative
			val32=0xff000000 | val24;
 8002242:	4b16      	ldr	r3, [pc, #88]	@ (800229c <HAL_I2S_RxCpltCallback+0x98>)
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800224a:	461a      	mov	r2, r3
 800224c:	4b14      	ldr	r3, [pc, #80]	@ (80022a0 <HAL_I2S_RxCpltCallback+0x9c>)
 800224e:	601a      	str	r2, [r3, #0]
 8002250:	e004      	b.n	800225c <HAL_I2S_RxCpltCallback+0x58>
		}
		else
		{//positive
			val32=val24;
 8002252:	4b12      	ldr	r3, [pc, #72]	@ (800229c <HAL_I2S_RxCpltCallback+0x98>)
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	461a      	mov	r2, r3
 8002258:	4b11      	ldr	r3, [pc, #68]	@ (80022a0 <HAL_I2S_RxCpltCallback+0x9c>)
 800225a:	601a      	str	r2, [r3, #0]
		}
		//以采样频率的十分之一，串口发送采样值
		if(cb_cnt%10==0)
 800225c:	4b0d      	ldr	r3, [pc, #52]	@ (8002294 <HAL_I2S_RxCpltCallback+0x90>)
 800225e:	6819      	ldr	r1, [r3, #0]
 8002260:	4b10      	ldr	r3, [pc, #64]	@ (80022a4 <HAL_I2S_RxCpltCallback+0xa0>)
 8002262:	fba3 2301 	umull	r2, r3, r3, r1
 8002266:	08da      	lsrs	r2, r3, #3
 8002268:	4613      	mov	r3, r2
 800226a:	009b      	lsls	r3, r3, #2
 800226c:	4413      	add	r3, r2
 800226e:	005b      	lsls	r3, r3, #1
 8002270:	1aca      	subs	r2, r1, r3
 8002272:	2a00      	cmp	r2, #0
 8002274:	d105      	bne.n	8002282 <HAL_I2S_RxCpltCallback+0x7e>
			printf("%d\r\n",val32);
 8002276:	4b0a      	ldr	r3, [pc, #40]	@ (80022a0 <HAL_I2S_RxCpltCallback+0x9c>)
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	4619      	mov	r1, r3
 800227c:	480a      	ldr	r0, [pc, #40]	@ (80022a8 <HAL_I2S_RxCpltCallback+0xa4>)
 800227e:	f00d fffb 	bl	8010278 <iprintf>
	}
}
 8002282:	bf00      	nop
 8002284:	3708      	adds	r7, #8
 8002286:	46bd      	mov	sp, r7
 8002288:	bd80      	pop	{r7, pc}
 800228a:	bf00      	nop
 800228c:	2000f5c4 	.word	0x2000f5c4
 8002290:	2000d3c8 	.word	0x2000d3c8
 8002294:	2000f5c8 	.word	0x2000f5c8
 8002298:	2000f5b4 	.word	0x2000f5b4
 800229c:	2000f5cc 	.word	0x2000f5cc
 80022a0:	2000f5d0 	.word	0x2000f5d0
 80022a4:	cccccccd 	.word	0xcccccccd
 80022a8:	08013b08 	.word	0x08013b08

080022ac <HAL_UART_RxCpltCallback>:
// --- AI 推論相關變數 ---
// 這個變數將連接 main.c 和 app_x-cube-ai.c
int score_from_uart = 0;

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80022ac:	b580      	push	{r7, lr}
 80022ae:	b082      	sub	sp, #8
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	6078      	str	r0, [r7, #4]
  // 確保是我們想要的 UART (例如 USART2) 觸發的中斷
  if (huart->Instance == USART6)
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	4a1b      	ldr	r2, [pc, #108]	@ (8002328 <HAL_UART_RxCpltCallback+0x7c>)
 80022ba:	4293      	cmp	r3, r2
 80022bc:	d130      	bne.n	8002320 <HAL_UART_RxCpltCallback+0x74>
  {
    // 檢查是否是換行符 (Enter 鍵)，或者緩衝區是否已滿
    if (rx_byte == '\r' || rx_byte == '\n' || uart_rx_index >= (UART_RX_BUFFER_SIZE - 1))
 80022be:	4b1b      	ldr	r3, [pc, #108]	@ (800232c <HAL_UART_RxCpltCallback+0x80>)
 80022c0:	781b      	ldrb	r3, [r3, #0]
 80022c2:	2b0d      	cmp	r3, #13
 80022c4:	d008      	beq.n	80022d8 <HAL_UART_RxCpltCallback+0x2c>
 80022c6:	4b19      	ldr	r3, [pc, #100]	@ (800232c <HAL_UART_RxCpltCallback+0x80>)
 80022c8:	781b      	ldrb	r3, [r3, #0]
 80022ca:	2b0a      	cmp	r3, #10
 80022cc:	d004      	beq.n	80022d8 <HAL_UART_RxCpltCallback+0x2c>
 80022ce:	4b18      	ldr	r3, [pc, #96]	@ (8002330 <HAL_UART_RxCpltCallback+0x84>)
 80022d0:	781b      	ldrb	r3, [r3, #0]
 80022d2:	b2db      	uxtb	r3, r3
 80022d4:	2b08      	cmp	r3, #8
 80022d6:	d912      	bls.n	80022fe <HAL_UART_RxCpltCallback+0x52>
    {
      // 1. 在字串末尾加上結束符 '\0'
      uart_rx_buffer[uart_rx_index] = '\0';
 80022d8:	4b15      	ldr	r3, [pc, #84]	@ (8002330 <HAL_UART_RxCpltCallback+0x84>)
 80022da:	781b      	ldrb	r3, [r3, #0]
 80022dc:	b2db      	uxtb	r3, r3
 80022de:	461a      	mov	r2, r3
 80022e0:	4b14      	ldr	r3, [pc, #80]	@ (8002334 <HAL_UART_RxCpltCallback+0x88>)
 80022e2:	2100      	movs	r1, #0
 80022e4:	5499      	strb	r1, [r3, r2]

      // 2. 設定新數據旗標，通知主迴圈處理
      if (uart_rx_index > 0) // 確保不是空指令
 80022e6:	4b12      	ldr	r3, [pc, #72]	@ (8002330 <HAL_UART_RxCpltCallback+0x84>)
 80022e8:	781b      	ldrb	r3, [r3, #0]
 80022ea:	b2db      	uxtb	r3, r3
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d002      	beq.n	80022f6 <HAL_UART_RxCpltCallback+0x4a>
      {
        new_data_received = true;
 80022f0:	4b11      	ldr	r3, [pc, #68]	@ (8002338 <HAL_UART_RxCpltCallback+0x8c>)
 80022f2:	2201      	movs	r2, #1
 80022f4:	701a      	strb	r2, [r3, #0]
      }

      // 3. 重置索引，準備下一次接收
      uart_rx_index = 0;
 80022f6:	4b0e      	ldr	r3, [pc, #56]	@ (8002330 <HAL_UART_RxCpltCallback+0x84>)
 80022f8:	2200      	movs	r2, #0
 80022fa:	701a      	strb	r2, [r3, #0]
 80022fc:	e00b      	b.n	8002316 <HAL_UART_RxCpltCallback+0x6a>
    }
    else
    {
      // 將收到的位元組存入緩衝區，並移動索引
      uart_rx_buffer[uart_rx_index++] = rx_byte;
 80022fe:	4b0c      	ldr	r3, [pc, #48]	@ (8002330 <HAL_UART_RxCpltCallback+0x84>)
 8002300:	781b      	ldrb	r3, [r3, #0]
 8002302:	b2db      	uxtb	r3, r3
 8002304:	1c5a      	adds	r2, r3, #1
 8002306:	b2d1      	uxtb	r1, r2
 8002308:	4a09      	ldr	r2, [pc, #36]	@ (8002330 <HAL_UART_RxCpltCallback+0x84>)
 800230a:	7011      	strb	r1, [r2, #0]
 800230c:	461a      	mov	r2, r3
 800230e:	4b07      	ldr	r3, [pc, #28]	@ (800232c <HAL_UART_RxCpltCallback+0x80>)
 8002310:	7819      	ldrb	r1, [r3, #0]
 8002312:	4b08      	ldr	r3, [pc, #32]	@ (8002334 <HAL_UART_RxCpltCallback+0x88>)
 8002314:	5499      	strb	r1, [r3, r2]
    }

    // !!! 非常重要：重新啟動 UART 中斷接收，準備接收下一個位元組 !!!
    HAL_UART_Receive_IT(&huart6, &rx_byte, 1);
 8002316:	2201      	movs	r2, #1
 8002318:	4904      	ldr	r1, [pc, #16]	@ (800232c <HAL_UART_RxCpltCallback+0x80>)
 800231a:	4808      	ldr	r0, [pc, #32]	@ (800233c <HAL_UART_RxCpltCallback+0x90>)
 800231c:	f008 f8a9 	bl	800a472 <HAL_UART_Receive_IT>
  }
}
 8002320:	bf00      	nop
 8002322:	3708      	adds	r7, #8
 8002324:	46bd      	mov	sp, r7
 8002326:	bd80      	pop	{r7, pc}
 8002328:	40011400 	.word	0x40011400
 800232c:	2000f5de 	.word	0x2000f5de
 8002330:	2000f5df 	.word	0x2000f5df
 8002334:	2000f5d4 	.word	0x2000f5d4
 8002338:	2000f5e0 	.word	0x2000f5e0
 800233c:	20016158 	.word	0x20016158

08002340 <HAL_TIM_PeriodElapsedCallback>:

uint16_t txData;
int txIndex;
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002340:	b580      	push	{r7, lr}
 8002342:	b082      	sub	sp, #8
 8002344:	af00      	add	r7, sp, #0
 8002346:	6078      	str	r0, [r7, #4]
  if(htim->Instance == TIM2)
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002350:	d125      	bne.n	800239e <HAL_TIM_PeriodElapsedCallback+0x5e>
  {
    txData = ((uint16_t)helloworld[txIndex+1] << 8) | helloworld[txIndex];
 8002352:	4b1e      	ldr	r3, [pc, #120]	@ (80023cc <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	3301      	adds	r3, #1
 8002358:	4a1d      	ldr	r2, [pc, #116]	@ (80023d0 <HAL_TIM_PeriodElapsedCallback+0x90>)
 800235a:	5cd3      	ldrb	r3, [r2, r3]
 800235c:	b21b      	sxth	r3, r3
 800235e:	021b      	lsls	r3, r3, #8
 8002360:	b21a      	sxth	r2, r3
 8002362:	4b1a      	ldr	r3, [pc, #104]	@ (80023cc <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	491a      	ldr	r1, [pc, #104]	@ (80023d0 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8002368:	5ccb      	ldrb	r3, [r1, r3]
 800236a:	b21b      	sxth	r3, r3
 800236c:	4313      	orrs	r3, r2
 800236e:	b21b      	sxth	r3, r3
 8002370:	b29a      	uxth	r2, r3
 8002372:	4b18      	ldr	r3, [pc, #96]	@ (80023d4 <HAL_TIM_PeriodElapsedCallback+0x94>)
 8002374:	801a      	strh	r2, [r3, #0]
    txIndex = txIndex + 2;
 8002376:	4b15      	ldr	r3, [pc, #84]	@ (80023cc <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	3302      	adds	r3, #2
 800237c:	4a13      	ldr	r2, [pc, #76]	@ (80023cc <HAL_TIM_PeriodElapsedCallback+0x8c>)
 800237e:	6013      	str	r3, [r2, #0]
    if(txIndex>53456) txIndex = 0;
 8002380:	4b12      	ldr	r3, [pc, #72]	@ (80023cc <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	f24d 02d0 	movw	r2, #53456	@ 0xd0d0
 8002388:	4293      	cmp	r3, r2
 800238a:	dd02      	ble.n	8002392 <HAL_TIM_PeriodElapsedCallback+0x52>
 800238c:	4b0f      	ldr	r3, [pc, #60]	@ (80023cc <HAL_TIM_PeriodElapsedCallback+0x8c>)
 800238e:	2200      	movs	r2, #0
 8002390:	601a      	str	r2, [r3, #0]
    HAL_I2S_Transmit(&hi2s3, &txData, 1, 10);
 8002392:	230a      	movs	r3, #10
 8002394:	2201      	movs	r2, #1
 8002396:	490f      	ldr	r1, [pc, #60]	@ (80023d4 <HAL_TIM_PeriodElapsedCallback+0x94>)
 8002398:	480f      	ldr	r0, [pc, #60]	@ (80023d8 <HAL_TIM_PeriodElapsedCallback+0x98>)
 800239a:	f004 ffff 	bl	800739c <HAL_I2S_Transmit>
  }

	if(htim->Instance == TIM10)
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	4a0e      	ldr	r2, [pc, #56]	@ (80023dc <HAL_TIM_PeriodElapsedCallback+0x9c>)
 80023a4:	4293      	cmp	r3, r2
 80023a6:	d10c      	bne.n	80023c2 <HAL_TIM_PeriodElapsedCallback+0x82>
	{
		if (adc_available) {
 80023a8:	4b0d      	ldr	r3, [pc, #52]	@ (80023e0 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 80023aa:	781b      	ldrb	r3, [r3, #0]
 80023ac:	b2db      	uxtb	r3, r3
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d007      	beq.n	80023c2 <HAL_TIM_PeriodElapsedCallback+0x82>
			adc_available = 0;
 80023b2:	4b0b      	ldr	r3, [pc, #44]	@ (80023e0 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 80023b4:	2200      	movs	r2, #0
 80023b6:	701a      	strb	r2, [r3, #0]
			HAL_ADC_Start_DMA(&hadc1, (uint32_t*)&adc_data, 2);
 80023b8:	2202      	movs	r2, #2
 80023ba:	490a      	ldr	r1, [pc, #40]	@ (80023e4 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 80023bc:	480a      	ldr	r0, [pc, #40]	@ (80023e8 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 80023be:	f003 fb31 	bl	8005a24 <HAL_ADC_Start_DMA>
		}
	}
}
 80023c2:	bf00      	nop
 80023c4:	3708      	adds	r7, #8
 80023c6:	46bd      	mov	sp, r7
 80023c8:	bd80      	pop	{r7, pc}
 80023ca:	bf00      	nop
 80023cc:	2000f5e4 	.word	0x2000f5e4
 80023d0:	20000010 	.word	0x20000010
 80023d4:	2000f5e2 	.word	0x2000f5e2
 80023d8:	2000d410 	.word	0x2000d410
 80023dc:	40014400 	.word	0x40014400
 80023e0:	2000d0e1 	.word	0x2000d0e1
 80023e4:	2000f5f0 	.word	0x2000f5f0
 80023e8:	2000d318 	.word	0x2000d318

080023ec <HAL_ADC_ConvCpltCallback>:


void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80023ec:	b580      	push	{r7, lr}
 80023ee:	b084      	sub	sp, #16
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	6078      	str	r0, [r7, #4]
    if(hadc->Instance == ADC1)
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	4a91      	ldr	r2, [pc, #580]	@ (8002640 <HAL_ADC_ConvCpltCallback+0x254>)
 80023fa:	4293      	cmp	r3, r2
 80023fc:	f040 81c2 	bne.w	8002784 <HAL_ADC_ConvCpltCallback+0x398>
    {
    	if (adc_reset_cyccnt) {
 8002400:	4b90      	ldr	r3, [pc, #576]	@ (8002644 <HAL_ADC_ConvCpltCallback+0x258>)
 8002402:	781b      	ldrb	r3, [r3, #0]
 8002404:	b2db      	uxtb	r3, r3
 8002406:	2b00      	cmp	r3, #0
 8002408:	d00b      	beq.n	8002422 <HAL_ADC_ConvCpltCallback+0x36>
    		DWT->CYCCNT = 0U;
 800240a:	4b8f      	ldr	r3, [pc, #572]	@ (8002648 <HAL_ADC_ConvCpltCallback+0x25c>)
 800240c:	2200      	movs	r2, #0
 800240e:	605a      	str	r2, [r3, #4]
    		adc0_time_delta = 0;
 8002410:	4b8e      	ldr	r3, [pc, #568]	@ (800264c <HAL_ADC_ConvCpltCallback+0x260>)
 8002412:	2200      	movs	r2, #0
 8002414:	601a      	str	r2, [r3, #0]
    		adc1_time_delta = 0;
 8002416:	4b8e      	ldr	r3, [pc, #568]	@ (8002650 <HAL_ADC_ConvCpltCallback+0x264>)
 8002418:	2200      	movs	r2, #0
 800241a:	601a      	str	r2, [r3, #0]
    		adc_reset_cyccnt = 0;
 800241c:	4b89      	ldr	r3, [pc, #548]	@ (8002644 <HAL_ADC_ConvCpltCallback+0x258>)
 800241e:	2200      	movs	r2, #0
 8002420:	701a      	strb	r2, [r3, #0]
    	}

    	if (!adc0_filled) {
 8002422:	4b8c      	ldr	r3, [pc, #560]	@ (8002654 <HAL_ADC_ConvCpltCallback+0x268>)
 8002424:	781b      	ldrb	r3, [r3, #0]
 8002426:	b2db      	uxtb	r3, r3
 8002428:	2b00      	cmp	r3, #0
 800242a:	f040 80a4 	bne.w	8002576 <HAL_ADC_ConvCpltCallback+0x18a>
			adc0_time[adc0_length] = (DWT->CYCCNT - adc0_time_delta) / (SystemCoreClock / 1000000);
 800242e:	4b86      	ldr	r3, [pc, #536]	@ (8002648 <HAL_ADC_ConvCpltCallback+0x25c>)
 8002430:	685a      	ldr	r2, [r3, #4]
 8002432:	4b86      	ldr	r3, [pc, #536]	@ (800264c <HAL_ADC_ConvCpltCallback+0x260>)
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	1ad1      	subs	r1, r2, r3
 8002438:	4b87      	ldr	r3, [pc, #540]	@ (8002658 <HAL_ADC_ConvCpltCallback+0x26c>)
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	4a87      	ldr	r2, [pc, #540]	@ (800265c <HAL_ADC_ConvCpltCallback+0x270>)
 800243e:	fba2 2303 	umull	r2, r3, r2, r3
 8002442:	0c9a      	lsrs	r2, r3, #18
 8002444:	4b86      	ldr	r3, [pc, #536]	@ (8002660 <HAL_ADC_ConvCpltCallback+0x274>)
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	fbb1 f2f2 	udiv	r2, r1, r2
 800244c:	4985      	ldr	r1, [pc, #532]	@ (8002664 <HAL_ADC_ConvCpltCallback+0x278>)
 800244e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			adc0[adc0_length] = adc_data[0] * ADC_CHANNEL0_SCALE;
 8002452:	4b83      	ldr	r3, [pc, #524]	@ (8002660 <HAL_ADC_ConvCpltCallback+0x274>)
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	4a84      	ldr	r2, [pc, #528]	@ (8002668 <HAL_ADC_ConvCpltCallback+0x27c>)
 8002458:	8812      	ldrh	r2, [r2, #0]
 800245a:	b291      	uxth	r1, r2
 800245c:	4a83      	ldr	r2, [pc, #524]	@ (800266c <HAL_ADC_ConvCpltCallback+0x280>)
 800245e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

			if (adc_max[0] < adc0[adc0_length])
 8002462:	4b83      	ldr	r3, [pc, #524]	@ (8002670 <HAL_ADC_ConvCpltCallback+0x284>)
 8002464:	881b      	ldrh	r3, [r3, #0]
 8002466:	b29a      	uxth	r2, r3
 8002468:	4b7d      	ldr	r3, [pc, #500]	@ (8002660 <HAL_ADC_ConvCpltCallback+0x274>)
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	497f      	ldr	r1, [pc, #508]	@ (800266c <HAL_ADC_ConvCpltCallback+0x280>)
 800246e:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8002472:	429a      	cmp	r2, r3
 8002474:	d206      	bcs.n	8002484 <HAL_ADC_ConvCpltCallback+0x98>
				adc_max[0] = adc0[adc0_length];
 8002476:	4b7a      	ldr	r3, [pc, #488]	@ (8002660 <HAL_ADC_ConvCpltCallback+0x274>)
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	4a7c      	ldr	r2, [pc, #496]	@ (800266c <HAL_ADC_ConvCpltCallback+0x280>)
 800247c:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8002480:	4b7b      	ldr	r3, [pc, #492]	@ (8002670 <HAL_ADC_ConvCpltCallback+0x284>)
 8002482:	801a      	strh	r2, [r3, #0]

			if (adc_min[0] > adc0[adc0_length])
 8002484:	4b7b      	ldr	r3, [pc, #492]	@ (8002674 <HAL_ADC_ConvCpltCallback+0x288>)
 8002486:	881b      	ldrh	r3, [r3, #0]
 8002488:	b29a      	uxth	r2, r3
 800248a:	4b75      	ldr	r3, [pc, #468]	@ (8002660 <HAL_ADC_ConvCpltCallback+0x274>)
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	4977      	ldr	r1, [pc, #476]	@ (800266c <HAL_ADC_ConvCpltCallback+0x280>)
 8002490:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8002494:	429a      	cmp	r2, r3
 8002496:	d906      	bls.n	80024a6 <HAL_ADC_ConvCpltCallback+0xba>
				adc_min[0] = adc0[adc0_length];
 8002498:	4b71      	ldr	r3, [pc, #452]	@ (8002660 <HAL_ADC_ConvCpltCallback+0x274>)
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	4a73      	ldr	r2, [pc, #460]	@ (800266c <HAL_ADC_ConvCpltCallback+0x280>)
 800249e:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 80024a2:	4b74      	ldr	r3, [pc, #464]	@ (8002674 <HAL_ADC_ConvCpltCallback+0x288>)
 80024a4:	801a      	strh	r2, [r3, #0]

			if (adc0_length < (ADC_BUFFER_SIZE - 1)) {
 80024a6:	4b6e      	ldr	r3, [pc, #440]	@ (8002660 <HAL_ADC_ConvCpltCallback+0x274>)
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	f240 72fe 	movw	r2, #2046	@ 0x7fe
 80024ae:	4293      	cmp	r3, r2
 80024b0:	d85e      	bhi.n	8002570 <HAL_ADC_ConvCpltCallback+0x184>

				uint8_t trigger = 0;
 80024b2:	2300      	movs	r3, #0
 80024b4:	73fb      	strb	r3, [r7, #15]

				if (trigger_mode == 0)
 80024b6:	4b70      	ldr	r3, [pc, #448]	@ (8002678 <HAL_ADC_ConvCpltCallback+0x28c>)
 80024b8:	781b      	ldrb	r3, [r3, #0]
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d114      	bne.n	80024e8 <HAL_ADC_ConvCpltCallback+0xfc>
					trigger = (adc0_prev < trigger0_value && adc0[adc0_length] > trigger0_value);
 80024be:	4b6f      	ldr	r3, [pc, #444]	@ (800267c <HAL_ADC_ConvCpltCallback+0x290>)
 80024c0:	881b      	ldrh	r3, [r3, #0]
 80024c2:	b29a      	uxth	r2, r3
 80024c4:	4b6e      	ldr	r3, [pc, #440]	@ (8002680 <HAL_ADC_ConvCpltCallback+0x294>)
 80024c6:	881b      	ldrh	r3, [r3, #0]
 80024c8:	429a      	cmp	r2, r3
 80024ca:	d20a      	bcs.n	80024e2 <HAL_ADC_ConvCpltCallback+0xf6>
 80024cc:	4b64      	ldr	r3, [pc, #400]	@ (8002660 <HAL_ADC_ConvCpltCallback+0x274>)
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	4a66      	ldr	r2, [pc, #408]	@ (800266c <HAL_ADC_ConvCpltCallback+0x280>)
 80024d2:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 80024d6:	4b6a      	ldr	r3, [pc, #424]	@ (8002680 <HAL_ADC_ConvCpltCallback+0x294>)
 80024d8:	881b      	ldrh	r3, [r3, #0]
 80024da:	429a      	cmp	r2, r3
 80024dc:	d901      	bls.n	80024e2 <HAL_ADC_ConvCpltCallback+0xf6>
 80024de:	2301      	movs	r3, #1
 80024e0:	e000      	b.n	80024e4 <HAL_ADC_ConvCpltCallback+0xf8>
 80024e2:	2300      	movs	r3, #0
 80024e4:	73fb      	strb	r3, [r7, #15]
 80024e6:	e013      	b.n	8002510 <HAL_ADC_ConvCpltCallback+0x124>
				else
					trigger = (adc0_prev > trigger0_value && adc0[adc0_length] < trigger0_value);
 80024e8:	4b64      	ldr	r3, [pc, #400]	@ (800267c <HAL_ADC_ConvCpltCallback+0x290>)
 80024ea:	881b      	ldrh	r3, [r3, #0]
 80024ec:	b29a      	uxth	r2, r3
 80024ee:	4b64      	ldr	r3, [pc, #400]	@ (8002680 <HAL_ADC_ConvCpltCallback+0x294>)
 80024f0:	881b      	ldrh	r3, [r3, #0]
 80024f2:	429a      	cmp	r2, r3
 80024f4:	d90a      	bls.n	800250c <HAL_ADC_ConvCpltCallback+0x120>
 80024f6:	4b5a      	ldr	r3, [pc, #360]	@ (8002660 <HAL_ADC_ConvCpltCallback+0x274>)
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	4a5c      	ldr	r2, [pc, #368]	@ (800266c <HAL_ADC_ConvCpltCallback+0x280>)
 80024fc:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8002500:	4b5f      	ldr	r3, [pc, #380]	@ (8002680 <HAL_ADC_ConvCpltCallback+0x294>)
 8002502:	881b      	ldrh	r3, [r3, #0]
 8002504:	429a      	cmp	r2, r3
 8002506:	d201      	bcs.n	800250c <HAL_ADC_ConvCpltCallback+0x120>
 8002508:	2301      	movs	r3, #1
 800250a:	e000      	b.n	800250e <HAL_ADC_ConvCpltCallback+0x122>
 800250c:	2300      	movs	r3, #0
 800250e:	73fb      	strb	r3, [r7, #15]

				if (trigger && adc0_length != 0) {
 8002510:	7bfb      	ldrb	r3, [r7, #15]
 8002512:	2b00      	cmp	r3, #0
 8002514:	d021      	beq.n	800255a <HAL_ADC_ConvCpltCallback+0x16e>
 8002516:	4b52      	ldr	r3, [pc, #328]	@ (8002660 <HAL_ADC_ConvCpltCallback+0x274>)
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	2b00      	cmp	r3, #0
 800251c:	d01d      	beq.n	800255a <HAL_ADC_ConvCpltCallback+0x16e>
					if (!event_trigger0_detected) {
 800251e:	4b59      	ldr	r3, [pc, #356]	@ (8002684 <HAL_ADC_ConvCpltCallback+0x298>)
 8002520:	781b      	ldrb	r3, [r3, #0]
 8002522:	2b00      	cmp	r3, #0
 8002524:	d10a      	bne.n	800253c <HAL_ADC_ConvCpltCallback+0x150>
						adc0_length = 0;
 8002526:	4b4e      	ldr	r3, [pc, #312]	@ (8002660 <HAL_ADC_ConvCpltCallback+0x274>)
 8002528:	2200      	movs	r2, #0
 800252a:	601a      	str	r2, [r3, #0]
						adc0_time_delta = DWT->CYCCNT;
 800252c:	4b46      	ldr	r3, [pc, #280]	@ (8002648 <HAL_ADC_ConvCpltCallback+0x25c>)
 800252e:	685b      	ldr	r3, [r3, #4]
 8002530:	4a46      	ldr	r2, [pc, #280]	@ (800264c <HAL_ADC_ConvCpltCallback+0x260>)
 8002532:	6013      	str	r3, [r2, #0]
						event_trigger0_detected = 1;
 8002534:	4b53      	ldr	r3, [pc, #332]	@ (8002684 <HAL_ADC_ConvCpltCallback+0x298>)
 8002536:	2201      	movs	r2, #1
 8002538:	701a      	strb	r2, [r3, #0]
 800253a:	e00e      	b.n	800255a <HAL_ADC_ConvCpltCallback+0x16e>
					} else if (!adc_period0_detected) {
 800253c:	4b52      	ldr	r3, [pc, #328]	@ (8002688 <HAL_ADC_ConvCpltCallback+0x29c>)
 800253e:	781b      	ldrb	r3, [r3, #0]
 8002540:	b2db      	uxtb	r3, r3
 8002542:	2b00      	cmp	r3, #0
 8002544:	d109      	bne.n	800255a <HAL_ADC_ConvCpltCallback+0x16e>
						adc_period[0] = adc0_time[adc0_length];
 8002546:	4b46      	ldr	r3, [pc, #280]	@ (8002660 <HAL_ADC_ConvCpltCallback+0x274>)
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	4a46      	ldr	r2, [pc, #280]	@ (8002664 <HAL_ADC_ConvCpltCallback+0x278>)
 800254c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002550:	4a4e      	ldr	r2, [pc, #312]	@ (800268c <HAL_ADC_ConvCpltCallback+0x2a0>)
 8002552:	6013      	str	r3, [r2, #0]
						adc_period0_detected = 1;
 8002554:	4b4c      	ldr	r3, [pc, #304]	@ (8002688 <HAL_ADC_ConvCpltCallback+0x29c>)
 8002556:	2201      	movs	r2, #1
 8002558:	701a      	strb	r2, [r3, #0]
					}
				}

				adc0_prev = adc_data[0] * ADC_CHANNEL0_SCALE;
 800255a:	4b43      	ldr	r3, [pc, #268]	@ (8002668 <HAL_ADC_ConvCpltCallback+0x27c>)
 800255c:	881b      	ldrh	r3, [r3, #0]
 800255e:	b29a      	uxth	r2, r3
 8002560:	4b46      	ldr	r3, [pc, #280]	@ (800267c <HAL_ADC_ConvCpltCallback+0x290>)
 8002562:	801a      	strh	r2, [r3, #0]
				adc0_length++;
 8002564:	4b3e      	ldr	r3, [pc, #248]	@ (8002660 <HAL_ADC_ConvCpltCallback+0x274>)
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	3301      	adds	r3, #1
 800256a:	4a3d      	ldr	r2, [pc, #244]	@ (8002660 <HAL_ADC_ConvCpltCallback+0x274>)
 800256c:	6013      	str	r3, [r2, #0]
 800256e:	e002      	b.n	8002576 <HAL_ADC_ConvCpltCallback+0x18a>

			} else
				adc0_filled = 1;
 8002570:	4b38      	ldr	r3, [pc, #224]	@ (8002654 <HAL_ADC_ConvCpltCallback+0x268>)
 8002572:	2201      	movs	r2, #1
 8002574:	701a      	strb	r2, [r3, #0]
    	}

    	if (!adc1_filled) {
 8002576:	4b46      	ldr	r3, [pc, #280]	@ (8002690 <HAL_ADC_ConvCpltCallback+0x2a4>)
 8002578:	781b      	ldrb	r3, [r3, #0]
 800257a:	b2db      	uxtb	r3, r3
 800257c:	2b00      	cmp	r3, #0
 800257e:	f040 80da 	bne.w	8002736 <HAL_ADC_ConvCpltCallback+0x34a>
			adc1_time[adc1_length] = (DWT->CYCCNT - adc1_time_delta) / (SystemCoreClock / 1000000);
 8002582:	4b31      	ldr	r3, [pc, #196]	@ (8002648 <HAL_ADC_ConvCpltCallback+0x25c>)
 8002584:	685a      	ldr	r2, [r3, #4]
 8002586:	4b32      	ldr	r3, [pc, #200]	@ (8002650 <HAL_ADC_ConvCpltCallback+0x264>)
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	1ad1      	subs	r1, r2, r3
 800258c:	4b32      	ldr	r3, [pc, #200]	@ (8002658 <HAL_ADC_ConvCpltCallback+0x26c>)
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	4a32      	ldr	r2, [pc, #200]	@ (800265c <HAL_ADC_ConvCpltCallback+0x270>)
 8002592:	fba2 2303 	umull	r2, r3, r2, r3
 8002596:	0c9a      	lsrs	r2, r3, #18
 8002598:	4b3e      	ldr	r3, [pc, #248]	@ (8002694 <HAL_ADC_ConvCpltCallback+0x2a8>)
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	fbb1 f2f2 	udiv	r2, r1, r2
 80025a0:	493d      	ldr	r1, [pc, #244]	@ (8002698 <HAL_ADC_ConvCpltCallback+0x2ac>)
 80025a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			adc1[adc1_length] = adc_data[1] * ADC_CHANNEL1_SCALE;
 80025a6:	4b3b      	ldr	r3, [pc, #236]	@ (8002694 <HAL_ADC_ConvCpltCallback+0x2a8>)
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	4a2f      	ldr	r2, [pc, #188]	@ (8002668 <HAL_ADC_ConvCpltCallback+0x27c>)
 80025ac:	8852      	ldrh	r2, [r2, #2]
 80025ae:	b291      	uxth	r1, r2
 80025b0:	4a3a      	ldr	r2, [pc, #232]	@ (800269c <HAL_ADC_ConvCpltCallback+0x2b0>)
 80025b2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

			if (adc_max[1] < adc1[adc1_length])
 80025b6:	4b2e      	ldr	r3, [pc, #184]	@ (8002670 <HAL_ADC_ConvCpltCallback+0x284>)
 80025b8:	885b      	ldrh	r3, [r3, #2]
 80025ba:	b29a      	uxth	r2, r3
 80025bc:	4b35      	ldr	r3, [pc, #212]	@ (8002694 <HAL_ADC_ConvCpltCallback+0x2a8>)
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	4936      	ldr	r1, [pc, #216]	@ (800269c <HAL_ADC_ConvCpltCallback+0x2b0>)
 80025c2:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80025c6:	429a      	cmp	r2, r3
 80025c8:	d206      	bcs.n	80025d8 <HAL_ADC_ConvCpltCallback+0x1ec>
				adc_max[1] = adc1[adc1_length];
 80025ca:	4b32      	ldr	r3, [pc, #200]	@ (8002694 <HAL_ADC_ConvCpltCallback+0x2a8>)
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	4a33      	ldr	r2, [pc, #204]	@ (800269c <HAL_ADC_ConvCpltCallback+0x2b0>)
 80025d0:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 80025d4:	4b26      	ldr	r3, [pc, #152]	@ (8002670 <HAL_ADC_ConvCpltCallback+0x284>)
 80025d6:	805a      	strh	r2, [r3, #2]

			if (adc_min[1] > adc1[adc1_length])
 80025d8:	4b26      	ldr	r3, [pc, #152]	@ (8002674 <HAL_ADC_ConvCpltCallback+0x288>)
 80025da:	885b      	ldrh	r3, [r3, #2]
 80025dc:	b29a      	uxth	r2, r3
 80025de:	4b2d      	ldr	r3, [pc, #180]	@ (8002694 <HAL_ADC_ConvCpltCallback+0x2a8>)
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	492e      	ldr	r1, [pc, #184]	@ (800269c <HAL_ADC_ConvCpltCallback+0x2b0>)
 80025e4:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80025e8:	429a      	cmp	r2, r3
 80025ea:	d906      	bls.n	80025fa <HAL_ADC_ConvCpltCallback+0x20e>
				adc_min[1] = adc1[adc1_length];
 80025ec:	4b29      	ldr	r3, [pc, #164]	@ (8002694 <HAL_ADC_ConvCpltCallback+0x2a8>)
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	4a2a      	ldr	r2, [pc, #168]	@ (800269c <HAL_ADC_ConvCpltCallback+0x2b0>)
 80025f2:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 80025f6:	4b1f      	ldr	r3, [pc, #124]	@ (8002674 <HAL_ADC_ConvCpltCallback+0x288>)
 80025f8:	805a      	strh	r2, [r3, #2]

			if (adc1_length < (ADC_BUFFER_SIZE - 1)) {
 80025fa:	4b26      	ldr	r3, [pc, #152]	@ (8002694 <HAL_ADC_ConvCpltCallback+0x2a8>)
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	f240 72fe 	movw	r2, #2046	@ 0x7fe
 8002602:	4293      	cmp	r3, r2
 8002604:	f200 8094 	bhi.w	8002730 <HAL_ADC_ConvCpltCallback+0x344>

				uint8_t trigger = 0;
 8002608:	2300      	movs	r3, #0
 800260a:	73bb      	strb	r3, [r7, #14]

				if (trigger_mode == 0)
 800260c:	4b1a      	ldr	r3, [pc, #104]	@ (8002678 <HAL_ADC_ConvCpltCallback+0x28c>)
 800260e:	781b      	ldrb	r3, [r3, #0]
 8002610:	2b00      	cmp	r3, #0
 8002612:	d149      	bne.n	80026a8 <HAL_ADC_ConvCpltCallback+0x2bc>
					trigger = (adc1_prev < trigger1_value && adc1[adc1_length] > trigger1_value);
 8002614:	4b22      	ldr	r3, [pc, #136]	@ (80026a0 <HAL_ADC_ConvCpltCallback+0x2b4>)
 8002616:	881b      	ldrh	r3, [r3, #0]
 8002618:	b29a      	uxth	r2, r3
 800261a:	4b22      	ldr	r3, [pc, #136]	@ (80026a4 <HAL_ADC_ConvCpltCallback+0x2b8>)
 800261c:	881b      	ldrh	r3, [r3, #0]
 800261e:	429a      	cmp	r2, r3
 8002620:	d20a      	bcs.n	8002638 <HAL_ADC_ConvCpltCallback+0x24c>
 8002622:	4b1c      	ldr	r3, [pc, #112]	@ (8002694 <HAL_ADC_ConvCpltCallback+0x2a8>)
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	4a1d      	ldr	r2, [pc, #116]	@ (800269c <HAL_ADC_ConvCpltCallback+0x2b0>)
 8002628:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 800262c:	4b1d      	ldr	r3, [pc, #116]	@ (80026a4 <HAL_ADC_ConvCpltCallback+0x2b8>)
 800262e:	881b      	ldrh	r3, [r3, #0]
 8002630:	429a      	cmp	r2, r3
 8002632:	d901      	bls.n	8002638 <HAL_ADC_ConvCpltCallback+0x24c>
 8002634:	2301      	movs	r3, #1
 8002636:	e000      	b.n	800263a <HAL_ADC_ConvCpltCallback+0x24e>
 8002638:	2300      	movs	r3, #0
 800263a:	73bb      	strb	r3, [r7, #14]
 800263c:	e048      	b.n	80026d0 <HAL_ADC_ConvCpltCallback+0x2e4>
 800263e:	bf00      	nop
 8002640:	40012000 	.word	0x40012000
 8002644:	2000d0e2 	.word	0x2000d0e2
 8002648:	e0001000 	.word	0xe0001000
 800264c:	20015ee8 	.word	0x20015ee8
 8002650:	20015eec 	.word	0x20015eec
 8002654:	2000f600 	.word	0x2000f600
 8002658:	2000d114 	.word	0x2000d114
 800265c:	431bde83 	.word	0x431bde83
 8002660:	2000f5f8 	.word	0x2000f5f8
 8002664:	2000f614 	.word	0x2000f614
 8002668:	2000f5f0 	.word	0x2000f5f0
 800266c:	20013614 	.word	0x20013614
 8002670:	2000f604 	.word	0x2000f604
 8002674:	2000d0e4 	.word	0x2000d0e4
 8002678:	20015614 	.word	0x20015614
 800267c:	20015ef0 	.word	0x20015ef0
 8002680:	2000d0fc 	.word	0x2000d0fc
 8002684:	2000d109 	.word	0x2000d109
 8002688:	2000f610 	.word	0x2000f610
 800268c:	2000f608 	.word	0x2000f608
 8002690:	2000d0e0 	.word	0x2000d0e0
 8002694:	2000f5fc 	.word	0x2000f5fc
 8002698:	20011614 	.word	0x20011614
 800269c:	20014614 	.word	0x20014614
 80026a0:	20015ef2 	.word	0x20015ef2
 80026a4:	2000d0fe 	.word	0x2000d0fe
				else
					trigger = (adc1_prev > trigger1_value && adc1[adc1_length] < trigger1_value);
 80026a8:	4b38      	ldr	r3, [pc, #224]	@ (800278c <HAL_ADC_ConvCpltCallback+0x3a0>)
 80026aa:	881b      	ldrh	r3, [r3, #0]
 80026ac:	b29a      	uxth	r2, r3
 80026ae:	4b38      	ldr	r3, [pc, #224]	@ (8002790 <HAL_ADC_ConvCpltCallback+0x3a4>)
 80026b0:	881b      	ldrh	r3, [r3, #0]
 80026b2:	429a      	cmp	r2, r3
 80026b4:	d90a      	bls.n	80026cc <HAL_ADC_ConvCpltCallback+0x2e0>
 80026b6:	4b37      	ldr	r3, [pc, #220]	@ (8002794 <HAL_ADC_ConvCpltCallback+0x3a8>)
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	4a37      	ldr	r2, [pc, #220]	@ (8002798 <HAL_ADC_ConvCpltCallback+0x3ac>)
 80026bc:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 80026c0:	4b33      	ldr	r3, [pc, #204]	@ (8002790 <HAL_ADC_ConvCpltCallback+0x3a4>)
 80026c2:	881b      	ldrh	r3, [r3, #0]
 80026c4:	429a      	cmp	r2, r3
 80026c6:	d201      	bcs.n	80026cc <HAL_ADC_ConvCpltCallback+0x2e0>
 80026c8:	2301      	movs	r3, #1
 80026ca:	e000      	b.n	80026ce <HAL_ADC_ConvCpltCallback+0x2e2>
 80026cc:	2300      	movs	r3, #0
 80026ce:	73bb      	strb	r3, [r7, #14]

				if (trigger && adc1_length != 0) {
 80026d0:	7bbb      	ldrb	r3, [r7, #14]
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d021      	beq.n	800271a <HAL_ADC_ConvCpltCallback+0x32e>
 80026d6:	4b2f      	ldr	r3, [pc, #188]	@ (8002794 <HAL_ADC_ConvCpltCallback+0x3a8>)
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d01d      	beq.n	800271a <HAL_ADC_ConvCpltCallback+0x32e>
					if (!event_trigger1_detected) {
 80026de:	4b2f      	ldr	r3, [pc, #188]	@ (800279c <HAL_ADC_ConvCpltCallback+0x3b0>)
 80026e0:	781b      	ldrb	r3, [r3, #0]
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d10a      	bne.n	80026fc <HAL_ADC_ConvCpltCallback+0x310>
						adc1_length = 0;
 80026e6:	4b2b      	ldr	r3, [pc, #172]	@ (8002794 <HAL_ADC_ConvCpltCallback+0x3a8>)
 80026e8:	2200      	movs	r2, #0
 80026ea:	601a      	str	r2, [r3, #0]
						adc1_time_delta = DWT->CYCCNT;
 80026ec:	4b2c      	ldr	r3, [pc, #176]	@ (80027a0 <HAL_ADC_ConvCpltCallback+0x3b4>)
 80026ee:	685b      	ldr	r3, [r3, #4]
 80026f0:	4a2c      	ldr	r2, [pc, #176]	@ (80027a4 <HAL_ADC_ConvCpltCallback+0x3b8>)
 80026f2:	6013      	str	r3, [r2, #0]
						event_trigger1_detected = 1;
 80026f4:	4b29      	ldr	r3, [pc, #164]	@ (800279c <HAL_ADC_ConvCpltCallback+0x3b0>)
 80026f6:	2201      	movs	r2, #1
 80026f8:	701a      	strb	r2, [r3, #0]
 80026fa:	e00e      	b.n	800271a <HAL_ADC_ConvCpltCallback+0x32e>
					} else if (!adc_period1_detected) {
 80026fc:	4b2a      	ldr	r3, [pc, #168]	@ (80027a8 <HAL_ADC_ConvCpltCallback+0x3bc>)
 80026fe:	781b      	ldrb	r3, [r3, #0]
 8002700:	b2db      	uxtb	r3, r3
 8002702:	2b00      	cmp	r3, #0
 8002704:	d109      	bne.n	800271a <HAL_ADC_ConvCpltCallback+0x32e>
						adc_period[1] = adc1_time[adc1_length];
 8002706:	4b23      	ldr	r3, [pc, #140]	@ (8002794 <HAL_ADC_ConvCpltCallback+0x3a8>)
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	4a28      	ldr	r2, [pc, #160]	@ (80027ac <HAL_ADC_ConvCpltCallback+0x3c0>)
 800270c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002710:	4a27      	ldr	r2, [pc, #156]	@ (80027b0 <HAL_ADC_ConvCpltCallback+0x3c4>)
 8002712:	6053      	str	r3, [r2, #4]
						adc_period1_detected = 1;
 8002714:	4b24      	ldr	r3, [pc, #144]	@ (80027a8 <HAL_ADC_ConvCpltCallback+0x3bc>)
 8002716:	2201      	movs	r2, #1
 8002718:	701a      	strb	r2, [r3, #0]
					}
				}

				adc1_prev = adc_data[1] * ADC_CHANNEL1_SCALE;
 800271a:	4b26      	ldr	r3, [pc, #152]	@ (80027b4 <HAL_ADC_ConvCpltCallback+0x3c8>)
 800271c:	885b      	ldrh	r3, [r3, #2]
 800271e:	b29a      	uxth	r2, r3
 8002720:	4b1a      	ldr	r3, [pc, #104]	@ (800278c <HAL_ADC_ConvCpltCallback+0x3a0>)
 8002722:	801a      	strh	r2, [r3, #0]
				adc1_length++;
 8002724:	4b1b      	ldr	r3, [pc, #108]	@ (8002794 <HAL_ADC_ConvCpltCallback+0x3a8>)
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	3301      	adds	r3, #1
 800272a:	4a1a      	ldr	r2, [pc, #104]	@ (8002794 <HAL_ADC_ConvCpltCallback+0x3a8>)
 800272c:	6013      	str	r3, [r2, #0]
 800272e:	e002      	b.n	8002736 <HAL_ADC_ConvCpltCallback+0x34a>

			} else
				adc1_filled = 1;
 8002730:	4b21      	ldr	r3, [pc, #132]	@ (80027b8 <HAL_ADC_ConvCpltCallback+0x3cc>)
 8002732:	2201      	movs	r2, #1
 8002734:	701a      	strb	r2, [r3, #0]
    	}

		if (adc0_filled && adc1_filled) {
 8002736:	4b21      	ldr	r3, [pc, #132]	@ (80027bc <HAL_ADC_ConvCpltCallback+0x3d0>)
 8002738:	781b      	ldrb	r3, [r3, #0]
 800273a:	b2db      	uxtb	r3, r3
 800273c:	2b00      	cmp	r3, #0
 800273e:	d012      	beq.n	8002766 <HAL_ADC_ConvCpltCallback+0x37a>
 8002740:	4b1d      	ldr	r3, [pc, #116]	@ (80027b8 <HAL_ADC_ConvCpltCallback+0x3cc>)
 8002742:	781b      	ldrb	r3, [r3, #0]
 8002744:	b2db      	uxtb	r3, r3
 8002746:	2b00      	cmp	r3, #0
 8002748:	d00d      	beq.n	8002766 <HAL_ADC_ConvCpltCallback+0x37a>
			event_adc = 1;
 800274a:	4b1d      	ldr	r3, [pc, #116]	@ (80027c0 <HAL_ADC_ConvCpltCallback+0x3d4>)
 800274c:	2201      	movs	r2, #1
 800274e:	701a      	strb	r2, [r3, #0]

	    	if (!adc_immediate) {
 8002750:	4b1c      	ldr	r3, [pc, #112]	@ (80027c4 <HAL_ADC_ConvCpltCallback+0x3d8>)
 8002752:	781b      	ldrb	r3, [r3, #0]
 8002754:	2b00      	cmp	r3, #0
 8002756:	d114      	bne.n	8002782 <HAL_ADC_ConvCpltCallback+0x396>
				HAL_TIM_Base_Stop_IT(&htim10);
 8002758:	481b      	ldr	r0, [pc, #108]	@ (80027c8 <HAL_ADC_ConvCpltCallback+0x3dc>)
 800275a:	f006 fd89 	bl	8009270 <HAL_TIM_Base_Stop_IT>
				adc_available = 1;
 800275e:	4b1b      	ldr	r3, [pc, #108]	@ (80027cc <HAL_ADC_ConvCpltCallback+0x3e0>)
 8002760:	2201      	movs	r2, #1
 8002762:	701a      	strb	r2, [r3, #0]
	    	}

    		return;
 8002764:	e00d      	b.n	8002782 <HAL_ADC_ConvCpltCallback+0x396>
		}

		if (adc_immediate)
 8002766:	4b17      	ldr	r3, [pc, #92]	@ (80027c4 <HAL_ADC_ConvCpltCallback+0x3d8>)
 8002768:	781b      	ldrb	r3, [r3, #0]
 800276a:	2b00      	cmp	r3, #0
 800276c:	d005      	beq.n	800277a <HAL_ADC_ConvCpltCallback+0x38e>
			HAL_ADC_Start_DMA(&hadc1, (uint32_t*)&adc_data, 2);
 800276e:	2202      	movs	r2, #2
 8002770:	4910      	ldr	r1, [pc, #64]	@ (80027b4 <HAL_ADC_ConvCpltCallback+0x3c8>)
 8002772:	4817      	ldr	r0, [pc, #92]	@ (80027d0 <HAL_ADC_ConvCpltCallback+0x3e4>)
 8002774:	f003 f956 	bl	8005a24 <HAL_ADC_Start_DMA>
 8002778:	e004      	b.n	8002784 <HAL_ADC_ConvCpltCallback+0x398>
		else
			adc_available = 1;
 800277a:	4b14      	ldr	r3, [pc, #80]	@ (80027cc <HAL_ADC_ConvCpltCallback+0x3e0>)
 800277c:	2201      	movs	r2, #1
 800277e:	701a      	strb	r2, [r3, #0]
 8002780:	e000      	b.n	8002784 <HAL_ADC_ConvCpltCallback+0x398>
    		return;
 8002782:	bf00      	nop
    }
}
 8002784:	3710      	adds	r7, #16
 8002786:	46bd      	mov	sp, r7
 8002788:	bd80      	pop	{r7, pc}
 800278a:	bf00      	nop
 800278c:	20015ef2 	.word	0x20015ef2
 8002790:	2000d0fe 	.word	0x2000d0fe
 8002794:	2000f5fc 	.word	0x2000f5fc
 8002798:	20014614 	.word	0x20014614
 800279c:	2000d10a 	.word	0x2000d10a
 80027a0:	e0001000 	.word	0xe0001000
 80027a4:	20015eec 	.word	0x20015eec
 80027a8:	2000f611 	.word	0x2000f611
 80027ac:	20011614 	.word	0x20011614
 80027b0:	2000f608 	.word	0x2000f608
 80027b4:	2000f5f0 	.word	0x2000f5f0
 80027b8:	2000d0e0 	.word	0x2000d0e0
 80027bc:	2000f600 	.word	0x2000f600
 80027c0:	20015615 	.word	0x20015615
 80027c4:	2000d0e8 	.word	0x2000d0e8
 80027c8:	200160c8 	.word	0x200160c8
 80027cc:	2000d0e1 	.word	0x2000d0e1
 80027d0:	2000d318 	.word	0x2000d318

080027d4 <SD_Test>:

/* 測試用的簡單字符串 */
char writeText[] = "Hello SD Card!";    // 要寫入的文字
char readText[20];                      // 讀取緩衝區
void SD_Test(void)
{
 80027d4:	b5b0      	push	{r4, r5, r7, lr}
 80027d6:	b08e      	sub	sp, #56	@ 0x38
 80027d8:	af00      	add	r7, sp, #0
    char test_data[] = "SD Card Test Data";
 80027da:	4b54      	ldr	r3, [pc, #336]	@ (800292c <SD_Test+0x158>)
 80027dc:	f107 0424 	add.w	r4, r7, #36	@ 0x24
 80027e0:	461d      	mov	r5, r3
 80027e2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80027e4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80027e6:	682b      	ldr	r3, [r5, #0]
 80027e8:	8023      	strh	r3, [r4, #0]
    char read_data[30] = {0};
 80027ea:	1d3b      	adds	r3, r7, #4
 80027ec:	221e      	movs	r2, #30
 80027ee:	2100      	movs	r1, #0
 80027f0:	4618      	mov	r0, r3
 80027f2:	f00d fee1 	bl	80105b8 <memset>

    // 1. 初始化並掛載文件系統
    printf("Initializing SD card...\r\n");
 80027f6:	484e      	ldr	r0, [pc, #312]	@ (8002930 <SD_Test+0x15c>)
 80027f8:	f00d fda6 	bl	8010348 <puts>
    fres = f_mount(&fs, "", 1);
 80027fc:	2201      	movs	r2, #1
 80027fe:	494d      	ldr	r1, [pc, #308]	@ (8002934 <SD_Test+0x160>)
 8002800:	484d      	ldr	r0, [pc, #308]	@ (8002938 <SD_Test+0x164>)
 8002802:	f00b fcf9 	bl	800e1f8 <f_mount>
 8002806:	4603      	mov	r3, r0
 8002808:	461a      	mov	r2, r3
 800280a:	4b4c      	ldr	r3, [pc, #304]	@ (800293c <SD_Test+0x168>)
 800280c:	701a      	strb	r2, [r3, #0]
    if(fres != FR_OK)
 800280e:	4b4b      	ldr	r3, [pc, #300]	@ (800293c <SD_Test+0x168>)
 8002810:	781b      	ldrb	r3, [r3, #0]
 8002812:	2b00      	cmp	r3, #0
 8002814:	d006      	beq.n	8002824 <SD_Test+0x50>
    {
        printf("f_mount error (%i)\r\n", fres);
 8002816:	4b49      	ldr	r3, [pc, #292]	@ (800293c <SD_Test+0x168>)
 8002818:	781b      	ldrb	r3, [r3, #0]
 800281a:	4619      	mov	r1, r3
 800281c:	4848      	ldr	r0, [pc, #288]	@ (8002940 <SD_Test+0x16c>)
 800281e:	f00d fd2b 	bl	8010278 <iprintf>
        return;
 8002822:	e080      	b.n	8002926 <SD_Test+0x152>
    }
    printf("SD card mounted successfully!\r\n");
 8002824:	4847      	ldr	r0, [pc, #284]	@ (8002944 <SD_Test+0x170>)
 8002826:	f00d fd8f 	bl	8010348 <puts>

    // 2. 寫入測試
    printf("Writing test data...\r\n");
 800282a:	4847      	ldr	r0, [pc, #284]	@ (8002948 <SD_Test+0x174>)
 800282c:	f00d fd8c 	bl	8010348 <puts>
    fres = f_open(&fil, "test.txt", FA_WRITE | FA_CREATE_ALWAYS);
 8002830:	220a      	movs	r2, #10
 8002832:	4946      	ldr	r1, [pc, #280]	@ (800294c <SD_Test+0x178>)
 8002834:	4846      	ldr	r0, [pc, #280]	@ (8002950 <SD_Test+0x17c>)
 8002836:	f00b fd25 	bl	800e284 <f_open>
 800283a:	4603      	mov	r3, r0
 800283c:	461a      	mov	r2, r3
 800283e:	4b3f      	ldr	r3, [pc, #252]	@ (800293c <SD_Test+0x168>)
 8002840:	701a      	strb	r2, [r3, #0]
    if(fres != FR_OK)
 8002842:	4b3e      	ldr	r3, [pc, #248]	@ (800293c <SD_Test+0x168>)
 8002844:	781b      	ldrb	r3, [r3, #0]
 8002846:	2b00      	cmp	r3, #0
 8002848:	d006      	beq.n	8002858 <SD_Test+0x84>
    {
        printf("f_open error (%i)\r\n", fres);
 800284a:	4b3c      	ldr	r3, [pc, #240]	@ (800293c <SD_Test+0x168>)
 800284c:	781b      	ldrb	r3, [r3, #0]
 800284e:	4619      	mov	r1, r3
 8002850:	4840      	ldr	r0, [pc, #256]	@ (8002954 <SD_Test+0x180>)
 8002852:	f00d fd11 	bl	8010278 <iprintf>
        return;
 8002856:	e066      	b.n	8002926 <SD_Test+0x152>
    }

    fres = f_write(&fil, test_data, strlen(test_data), &bw);
 8002858:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800285c:	4618      	mov	r0, r3
 800285e:	f7fd fd1f 	bl	80002a0 <strlen>
 8002862:	4602      	mov	r2, r0
 8002864:	f107 0124 	add.w	r1, r7, #36	@ 0x24
 8002868:	4b3b      	ldr	r3, [pc, #236]	@ (8002958 <SD_Test+0x184>)
 800286a:	4839      	ldr	r0, [pc, #228]	@ (8002950 <SD_Test+0x17c>)
 800286c:	f00c f831 	bl	800e8d2 <f_write>
 8002870:	4603      	mov	r3, r0
 8002872:	461a      	mov	r2, r3
 8002874:	4b31      	ldr	r3, [pc, #196]	@ (800293c <SD_Test+0x168>)
 8002876:	701a      	strb	r2, [r3, #0]
    if(fres != FR_OK)
 8002878:	4b30      	ldr	r3, [pc, #192]	@ (800293c <SD_Test+0x168>)
 800287a:	781b      	ldrb	r3, [r3, #0]
 800287c:	2b00      	cmp	r3, #0
 800287e:	d009      	beq.n	8002894 <SD_Test+0xc0>
    {
        printf("f_write error (%i)\r\n", fres);
 8002880:	4b2e      	ldr	r3, [pc, #184]	@ (800293c <SD_Test+0x168>)
 8002882:	781b      	ldrb	r3, [r3, #0]
 8002884:	4619      	mov	r1, r3
 8002886:	4835      	ldr	r0, [pc, #212]	@ (800295c <SD_Test+0x188>)
 8002888:	f00d fcf6 	bl	8010278 <iprintf>
        f_close(&fil);
 800288c:	4830      	ldr	r0, [pc, #192]	@ (8002950 <SD_Test+0x17c>)
 800288e:	f00c fa32 	bl	800ecf6 <f_close>
        return;
 8002892:	e048      	b.n	8002926 <SD_Test+0x152>
    }
    f_close(&fil);
 8002894:	482e      	ldr	r0, [pc, #184]	@ (8002950 <SD_Test+0x17c>)
 8002896:	f00c fa2e 	bl	800ecf6 <f_close>
    printf("Test data written successfully!\r\n");
 800289a:	4831      	ldr	r0, [pc, #196]	@ (8002960 <SD_Test+0x18c>)
 800289c:	f00d fd54 	bl	8010348 <puts>

    // 3. 讀取測試
    printf("Reading test data...\r\n");
 80028a0:	4830      	ldr	r0, [pc, #192]	@ (8002964 <SD_Test+0x190>)
 80028a2:	f00d fd51 	bl	8010348 <puts>
    fres = f_open(&fil, "test.txt", FA_READ);
 80028a6:	2201      	movs	r2, #1
 80028a8:	4928      	ldr	r1, [pc, #160]	@ (800294c <SD_Test+0x178>)
 80028aa:	4829      	ldr	r0, [pc, #164]	@ (8002950 <SD_Test+0x17c>)
 80028ac:	f00b fcea 	bl	800e284 <f_open>
 80028b0:	4603      	mov	r3, r0
 80028b2:	461a      	mov	r2, r3
 80028b4:	4b21      	ldr	r3, [pc, #132]	@ (800293c <SD_Test+0x168>)
 80028b6:	701a      	strb	r2, [r3, #0]
    if(fres != FR_OK)
 80028b8:	4b20      	ldr	r3, [pc, #128]	@ (800293c <SD_Test+0x168>)
 80028ba:	781b      	ldrb	r3, [r3, #0]
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d006      	beq.n	80028ce <SD_Test+0xfa>
    {
        printf("f_open error (%i)\r\n", fres);
 80028c0:	4b1e      	ldr	r3, [pc, #120]	@ (800293c <SD_Test+0x168>)
 80028c2:	781b      	ldrb	r3, [r3, #0]
 80028c4:	4619      	mov	r1, r3
 80028c6:	4823      	ldr	r0, [pc, #140]	@ (8002954 <SD_Test+0x180>)
 80028c8:	f00d fcd6 	bl	8010278 <iprintf>
        return;
 80028cc:	e02b      	b.n	8002926 <SD_Test+0x152>
    }

    f_read(&fil, read_data, strlen(test_data), &br);
 80028ce:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80028d2:	4618      	mov	r0, r3
 80028d4:	f7fd fce4 	bl	80002a0 <strlen>
 80028d8:	4602      	mov	r2, r0
 80028da:	1d39      	adds	r1, r7, #4
 80028dc:	4b22      	ldr	r3, [pc, #136]	@ (8002968 <SD_Test+0x194>)
 80028de:	481c      	ldr	r0, [pc, #112]	@ (8002950 <SD_Test+0x17c>)
 80028e0:	f00b fe98 	bl	800e614 <f_read>
    f_close(&fil);
 80028e4:	481a      	ldr	r0, [pc, #104]	@ (8002950 <SD_Test+0x17c>)
 80028e6:	f00c fa06 	bl	800ecf6 <f_close>

    // 4. 驗證數據
    if(strcmp(test_data, read_data) == 0)
 80028ea:	1d3a      	adds	r2, r7, #4
 80028ec:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80028f0:	4611      	mov	r1, r2
 80028f2:	4618      	mov	r0, r3
 80028f4:	f7fd fc74 	bl	80001e0 <strcmp>
 80028f8:	4603      	mov	r3, r0
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d105      	bne.n	800290a <SD_Test+0x136>
    {
        printf("Test passed! Read data: %s\r\n", read_data);
 80028fe:	1d3b      	adds	r3, r7, #4
 8002900:	4619      	mov	r1, r3
 8002902:	481a      	ldr	r0, [pc, #104]	@ (800296c <SD_Test+0x198>)
 8002904:	f00d fcb8 	bl	8010278 <iprintf>
 8002908:	e00d      	b.n	8002926 <SD_Test+0x152>
    }
    else
    {
        printf("Test failed!\r\n");
 800290a:	4819      	ldr	r0, [pc, #100]	@ (8002970 <SD_Test+0x19c>)
 800290c:	f00d fd1c 	bl	8010348 <puts>
        printf("Expected: %s\r\n", test_data);
 8002910:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002914:	4619      	mov	r1, r3
 8002916:	4817      	ldr	r0, [pc, #92]	@ (8002974 <SD_Test+0x1a0>)
 8002918:	f00d fcae 	bl	8010278 <iprintf>
        printf("Got: %s\r\n", read_data);
 800291c:	1d3b      	adds	r3, r7, #4
 800291e:	4619      	mov	r1, r3
 8002920:	4815      	ldr	r0, [pc, #84]	@ (8002978 <SD_Test+0x1a4>)
 8002922:	f00d fca9 	bl	8010278 <iprintf>
    }
}
 8002926:	3738      	adds	r7, #56	@ 0x38
 8002928:	46bd      	mov	sp, r7
 800292a:	bdb0      	pop	{r4, r5, r7, pc}
 800292c:	08013c40 	.word	0x08013c40
 8002930:	08013b10 	.word	0x08013b10
 8002934:	08013b2c 	.word	0x08013b2c
 8002938:	2000d4b8 	.word	0x2000d4b8
 800293c:	2000f524 	.word	0x2000f524
 8002940:	08013b30 	.word	0x08013b30
 8002944:	08013b48 	.word	0x08013b48
 8002948:	08013b68 	.word	0x08013b68
 800294c:	08013b80 	.word	0x08013b80
 8002950:	2000e4f4 	.word	0x2000e4f4
 8002954:	08013b8c 	.word	0x08013b8c
 8002958:	2000f5ec 	.word	0x2000f5ec
 800295c:	08013ba0 	.word	0x08013ba0
 8002960:	08013bb8 	.word	0x08013bb8
 8002964:	08013bdc 	.word	0x08013bdc
 8002968:	2000f5e8 	.word	0x2000f5e8
 800296c:	08013bf4 	.word	0x08013bf4
 8002970:	08013c14 	.word	0x08013c14
 8002974:	08013c24 	.word	0x08013c24
 8002978:	08013c34 	.word	0x08013c34

0800297c <_Error_Handler>:

void _Error_Handler(char * file, int line)
{
 800297c:	b480      	push	{r7}
 800297e:	b083      	sub	sp, #12
 8002980:	af00      	add	r7, sp, #0
 8002982:	6078      	str	r0, [r7, #4]
 8002984:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  while(1)
 8002986:	bf00      	nop
 8002988:	e7fd      	b.n	8002986 <_Error_Handler+0xa>
	...

0800298c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800298c:	b580      	push	{r7, lr}
 800298e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002990:	f002 ff6e 	bl	8005870 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002994:	f000 f95c 	bl	8002c50 <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8002998:	f000 f9c2 	bl	8002d20 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800299c:	f7fe fd8a 	bl	80014b4 <MX_GPIO_Init>
  MX_DMA_Init();
 80029a0:	f7fe fd52 	bl	8001448 <MX_DMA_Init>
  MX_USART2_UART_Init();
 80029a4:	f002 fe60 	bl	8005668 <MX_USART2_UART_Init>
  MX_I2S2_Init();
 80029a8:	f7fe fe24 	bl	80015f4 <MX_I2S2_Init>
  MX_USART6_UART_Init();
 80029ac:	f002 fe86 	bl	80056bc <MX_USART6_UART_Init>
  MX_CRC_Init();
 80029b0:	f7fe fd14 	bl	80013dc <MX_CRC_Init>
  MX_I2S3_Init();
 80029b4:	f7fe fe4c 	bl	8001650 <MX_I2S3_Init>
  MX_TIM2_Init();
 80029b8:	f002 fc26 	bl	8005208 <MX_TIM2_Init>
  MX_SPI5_Init();
 80029bc:	f002 f98a 	bl	8004cd4 <MX_SPI5_Init>
  MX_TIM1_Init();
 80029c0:	f002 fb80 	bl	80050c4 <MX_TIM1_Init>
  MX_ADC1_Init();
 80029c4:	f7fe fbda 	bl	800117c <MX_ADC1_Init>
  MX_FATFS_Init();
 80029c8:	f008 fce4 	bl	800b394 <MX_FATFS_Init>
  MX_SPI4_Init();
 80029cc:	f002 f94c 	bl	8004c68 <MX_SPI4_Init>
  MX_TIM10_Init();
 80029d0:	f002 fd0e 	bl	80053f0 <MX_TIM10_Init>
  MX_TIM3_Init();
 80029d4:	f002 fc64 	bl	80052a0 <MX_TIM3_Init>
  MX_TIM4_Init();
 80029d8:	f002 fcb6 	bl	8005348 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  //while(1)
  {
  printf("Starting SD card test...\r\n");
 80029dc:	487e      	ldr	r0, [pc, #504]	@ (8002bd8 <main+0x24c>)
 80029de:	f00d fcb3 	bl	8010348 <puts>
  SD_Test();
 80029e2:	f7ff fef7 	bl	80027d4 <SD_Test>
  HAL_Delay(1000); // 等待1秒鐘
 80029e6:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80029ea:	f002 ffb3 	bl	8005954 <HAL_Delay>

  }
#if 1
	/* Mount SD Card */
	if(f_mount(&fs, "", 0) != FR_OK)
 80029ee:	2200      	movs	r2, #0
 80029f0:	497a      	ldr	r1, [pc, #488]	@ (8002bdc <main+0x250>)
 80029f2:	487b      	ldr	r0, [pc, #492]	@ (8002be0 <main+0x254>)
 80029f4:	f00b fc00 	bl	800e1f8 <f_mount>
 80029f8:	4603      	mov	r3, r0
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d004      	beq.n	8002a08 <main+0x7c>
		_Error_Handler(__FILE__, __LINE__);
 80029fe:	f240 11f3 	movw	r1, #499	@ 0x1f3
 8002a02:	4878      	ldr	r0, [pc, #480]	@ (8002be4 <main+0x258>)
 8002a04:	f7ff ffba 	bl	800297c <_Error_Handler>

	/* Open file to write */
	if(f_open(&fil, "first.txt", FA_OPEN_ALWAYS | FA_READ | FA_WRITE) != FR_OK)
 8002a08:	2213      	movs	r2, #19
 8002a0a:	4977      	ldr	r1, [pc, #476]	@ (8002be8 <main+0x25c>)
 8002a0c:	4877      	ldr	r0, [pc, #476]	@ (8002bec <main+0x260>)
 8002a0e:	f00b fc39 	bl	800e284 <f_open>
 8002a12:	4603      	mov	r3, r0
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d004      	beq.n	8002a22 <main+0x96>
		_Error_Handler(__FILE__, __LINE__);
 8002a18:	f240 11f7 	movw	r1, #503	@ 0x1f7
 8002a1c:	4871      	ldr	r0, [pc, #452]	@ (8002be4 <main+0x258>)
 8002a1e:	f7ff ffad 	bl	800297c <_Error_Handler>

	/* Check freeSpace space */
	if(f_getfree("", &fre_clust, &pfs) != FR_OK)
 8002a22:	4a73      	ldr	r2, [pc, #460]	@ (8002bf0 <main+0x264>)
 8002a24:	4973      	ldr	r1, [pc, #460]	@ (8002bf4 <main+0x268>)
 8002a26:	486d      	ldr	r0, [pc, #436]	@ (8002bdc <main+0x250>)
 8002a28:	f00c f98f 	bl	800ed4a <f_getfree>
 8002a2c:	4603      	mov	r3, r0
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d004      	beq.n	8002a3c <main+0xb0>
		_Error_Handler(__FILE__, __LINE__);
 8002a32:	f240 11fb 	movw	r1, #507	@ 0x1fb
 8002a36:	486b      	ldr	r0, [pc, #428]	@ (8002be4 <main+0x258>)
 8002a38:	f7ff ffa0 	bl	800297c <_Error_Handler>

	totalSpace = (uint32_t)((pfs->n_fatent - 2) * pfs->csize * 0.5);
 8002a3c:	4b6c      	ldr	r3, [pc, #432]	@ (8002bf0 <main+0x264>)
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	69db      	ldr	r3, [r3, #28]
 8002a42:	3b02      	subs	r3, #2
 8002a44:	4a6a      	ldr	r2, [pc, #424]	@ (8002bf0 <main+0x264>)
 8002a46:	6812      	ldr	r2, [r2, #0]
 8002a48:	8952      	ldrh	r2, [r2, #10]
 8002a4a:	fb02 f303 	mul.w	r3, r2, r3
 8002a4e:	4618      	mov	r0, r3
 8002a50:	f7fd fd70 	bl	8000534 <__aeabi_ui2d>
 8002a54:	f04f 0200 	mov.w	r2, #0
 8002a58:	4b67      	ldr	r3, [pc, #412]	@ (8002bf8 <main+0x26c>)
 8002a5a:	f7fd fde5 	bl	8000628 <__aeabi_dmul>
 8002a5e:	4602      	mov	r2, r0
 8002a60:	460b      	mov	r3, r1
 8002a62:	4610      	mov	r0, r2
 8002a64:	4619      	mov	r1, r3
 8002a66:	f7fe f8b7 	bl	8000bd8 <__aeabi_d2uiz>
 8002a6a:	4603      	mov	r3, r0
 8002a6c:	4a63      	ldr	r2, [pc, #396]	@ (8002bfc <main+0x270>)
 8002a6e:	6013      	str	r3, [r2, #0]
	freeSpace = (uint32_t)(fre_clust * pfs->csize * 0.5);
 8002a70:	4b5f      	ldr	r3, [pc, #380]	@ (8002bf0 <main+0x264>)
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	895b      	ldrh	r3, [r3, #10]
 8002a76:	461a      	mov	r2, r3
 8002a78:	4b5e      	ldr	r3, [pc, #376]	@ (8002bf4 <main+0x268>)
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	fb02 f303 	mul.w	r3, r2, r3
 8002a80:	4618      	mov	r0, r3
 8002a82:	f7fd fd57 	bl	8000534 <__aeabi_ui2d>
 8002a86:	f04f 0200 	mov.w	r2, #0
 8002a8a:	4b5b      	ldr	r3, [pc, #364]	@ (8002bf8 <main+0x26c>)
 8002a8c:	f7fd fdcc 	bl	8000628 <__aeabi_dmul>
 8002a90:	4602      	mov	r2, r0
 8002a92:	460b      	mov	r3, r1
 8002a94:	4610      	mov	r0, r2
 8002a96:	4619      	mov	r1, r3
 8002a98:	f7fe f89e 	bl	8000bd8 <__aeabi_d2uiz>
 8002a9c:	4603      	mov	r3, r0
 8002a9e:	4a58      	ldr	r2, [pc, #352]	@ (8002c00 <main+0x274>)
 8002aa0:	6013      	str	r3, [r2, #0]

	/* free space is less than 1kb */
	if(freeSpace < 1)
 8002aa2:	4b57      	ldr	r3, [pc, #348]	@ (8002c00 <main+0x274>)
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d104      	bne.n	8002ab4 <main+0x128>
		_Error_Handler(__FILE__, __LINE__);
 8002aaa:	f240 2102 	movw	r1, #514	@ 0x202
 8002aae:	484d      	ldr	r0, [pc, #308]	@ (8002be4 <main+0x258>)
 8002ab0:	f7ff ff64 	bl	800297c <_Error_Handler>

	/* Writing text */
	f_puts("STM32 SD Card I/O Example via SPI\n", &fil);
 8002ab4:	494d      	ldr	r1, [pc, #308]	@ (8002bec <main+0x260>)
 8002ab6:	4853      	ldr	r0, [pc, #332]	@ (8002c04 <main+0x278>)
 8002ab8:	f00c fab1 	bl	800f01e <f_puts>
	f_puts("Save the world!!!", &fil);
 8002abc:	494b      	ldr	r1, [pc, #300]	@ (8002bec <main+0x260>)
 8002abe:	4852      	ldr	r0, [pc, #328]	@ (8002c08 <main+0x27c>)
 8002ac0:	f00c faad 	bl	800f01e <f_puts>

	/* Close file */
	if(f_close(&fil) != FR_OK)
 8002ac4:	4849      	ldr	r0, [pc, #292]	@ (8002bec <main+0x260>)
 8002ac6:	f00c f916 	bl	800ecf6 <f_close>
 8002aca:	4603      	mov	r3, r0
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d004      	beq.n	8002ada <main+0x14e>
		_Error_Handler(__FILE__, __LINE__);
 8002ad0:	f240 210a 	movw	r1, #522	@ 0x20a
 8002ad4:	4843      	ldr	r0, [pc, #268]	@ (8002be4 <main+0x258>)
 8002ad6:	f7ff ff51 	bl	800297c <_Error_Handler>

	/* Open file to read */
	if(f_open(&fil, "first.txt", FA_READ) != FR_OK)
 8002ada:	2201      	movs	r2, #1
 8002adc:	4942      	ldr	r1, [pc, #264]	@ (8002be8 <main+0x25c>)
 8002ade:	4843      	ldr	r0, [pc, #268]	@ (8002bec <main+0x260>)
 8002ae0:	f00b fbd0 	bl	800e284 <f_open>
 8002ae4:	4603      	mov	r3, r0
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d00f      	beq.n	8002b0a <main+0x17e>
		_Error_Handler(__FILE__, __LINE__);
 8002aea:	f240 210e 	movw	r1, #526	@ 0x20e
 8002aee:	483d      	ldr	r0, [pc, #244]	@ (8002be4 <main+0x258>)
 8002af0:	f7ff ff44 	bl	800297c <_Error_Handler>

	while(f_gets(buffer, sizeof(buffer), &fil))
 8002af4:	e009      	b.n	8002b0a <main+0x17e>
	{
		/* SWV output */
		printf("%s", buffer);
 8002af6:	4945      	ldr	r1, [pc, #276]	@ (8002c0c <main+0x280>)
 8002af8:	4845      	ldr	r0, [pc, #276]	@ (8002c10 <main+0x284>)
 8002afa:	f00d fbbd 	bl	8010278 <iprintf>
		fflush(stdout);
 8002afe:	4b45      	ldr	r3, [pc, #276]	@ (8002c14 <main+0x288>)
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	689b      	ldr	r3, [r3, #8]
 8002b04:	4618      	mov	r0, r3
 8002b06:	f00d fae1 	bl	80100cc <fflush>
	while(f_gets(buffer, sizeof(buffer), &fil))
 8002b0a:	4a38      	ldr	r2, [pc, #224]	@ (8002bec <main+0x260>)
 8002b0c:	2164      	movs	r1, #100	@ 0x64
 8002b0e:	483f      	ldr	r0, [pc, #252]	@ (8002c0c <main+0x280>)
 8002b10:	f00c f9d0 	bl	800eeb4 <f_gets>
 8002b14:	4603      	mov	r3, r0
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d1ed      	bne.n	8002af6 <main+0x16a>
	}

	/* Close file */
	if(f_close(&fil) != FR_OK)
 8002b1a:	4834      	ldr	r0, [pc, #208]	@ (8002bec <main+0x260>)
 8002b1c:	f00c f8eb 	bl	800ecf6 <f_close>
 8002b20:	4603      	mov	r3, r0
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d004      	beq.n	8002b30 <main+0x1a4>
		_Error_Handler(__FILE__, __LINE__);
 8002b26:	f240 2119 	movw	r1, #537	@ 0x219
 8002b2a:	482e      	ldr	r0, [pc, #184]	@ (8002be4 <main+0x258>)
 8002b2c:	f7ff ff26 	bl	800297c <_Error_Handler>

	/* Unmount SDCARD */
	if(f_mount(NULL, "", 1) != FR_OK)
 8002b30:	2201      	movs	r2, #1
 8002b32:	492a      	ldr	r1, [pc, #168]	@ (8002bdc <main+0x250>)
 8002b34:	2000      	movs	r0, #0
 8002b36:	f00b fb5f 	bl	800e1f8 <f_mount>
 8002b3a:	4603      	mov	r3, r0
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d004      	beq.n	8002b4a <main+0x1be>
		_Error_Handler(__FILE__, __LINE__);
 8002b40:	f240 211d 	movw	r1, #541	@ 0x21d
 8002b44:	4827      	ldr	r0, [pc, #156]	@ (8002be4 <main+0x258>)
 8002b46:	f7ff ff19 	bl	800297c <_Error_Handler>
  {
      Error_Handler();
  }
#endif

  if (HAL_UART_Receive_IT(&huart6, &rx_byte, 1) != HAL_OK)
 8002b4a:	2201      	movs	r2, #1
 8002b4c:	4932      	ldr	r1, [pc, #200]	@ (8002c18 <main+0x28c>)
 8002b4e:	4833      	ldr	r0, [pc, #204]	@ (8002c1c <main+0x290>)
 8002b50:	f007 fc8f 	bl	800a472 <HAL_UART_Receive_IT>
 8002b54:	4603      	mov	r3, r0
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d001      	beq.n	8002b5e <main+0x1d2>
  {
      Error_Handler();
 8002b5a:	f000 f901 	bl	8002d60 <Error_Handler>
  }

  printf("AI Model Application Started...\r\n");
 8002b5e:	4830      	ldr	r0, [pc, #192]	@ (8002c20 <main+0x294>)
 8002b60:	f00d fbf2 	bl	8010348 <puts>


  txIndex = 0;
 8002b64:	4b2f      	ldr	r3, [pc, #188]	@ (8002c24 <main+0x298>)
 8002b66:	2200      	movs	r2, #0
 8002b68:	601a      	str	r2, [r3, #0]

  // For DWT->CYCCNT ...
  SCB_DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8002b6a:	4b2f      	ldr	r3, [pc, #188]	@ (8002c28 <main+0x29c>)
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	4a2e      	ldr	r2, [pc, #184]	@ (8002c28 <main+0x29c>)
 8002b70:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002b74:	6013      	str	r3, [r2, #0]
  DWT_CONTROL |= DWT_CTRL_CYCCNTENA_Msk;
 8002b76:	4b2d      	ldr	r3, [pc, #180]	@ (8002c2c <main+0x2a0>)
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	4a2c      	ldr	r2, [pc, #176]	@ (8002c2c <main+0x2a0>)
 8002b7c:	f043 0301 	orr.w	r3, r3, #1
 8002b80:	6013      	str	r3, [r2, #0]

  adc_reset_cyccnt = 1;
 8002b82:	4b2b      	ldr	r3, [pc, #172]	@ (8002c30 <main+0x2a4>)
 8002b84:	2201      	movs	r2, #1
 8002b86:	701a      	strb	r2, [r3, #0]
  if (adc_immediate)
 8002b88:	4b2a      	ldr	r3, [pc, #168]	@ (8002c34 <main+0x2a8>)
 8002b8a:	781b      	ldrb	r3, [r3, #0]
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d005      	beq.n	8002b9c <main+0x210>
  {
	  // The ADC starts immediately after the previous measurement is handled
	  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)&adc_data, 2);
 8002b90:	2202      	movs	r2, #2
 8002b92:	4929      	ldr	r1, [pc, #164]	@ (8002c38 <main+0x2ac>)
 8002b94:	4829      	ldr	r0, [pc, #164]	@ (8002c3c <main+0x2b0>)
 8002b96:	f002 ff45 	bl	8005a24 <HAL_ADC_Start_DMA>
 8002b9a:	e002      	b.n	8002ba2 <main+0x216>
  }
  else
  {
	  // ADC starts by timer
	  HAL_TIM_Base_Start_IT(&htim10);
 8002b9c:	4828      	ldr	r0, [pc, #160]	@ (8002c40 <main+0x2b4>)
 8002b9e:	f006 fb05 	bl	80091ac <HAL_TIM_Base_Start_IT>
  }

  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8002ba2:	2100      	movs	r1, #0
 8002ba4:	4827      	ldr	r0, [pc, #156]	@ (8002c44 <main+0x2b8>)
 8002ba6:	f006 fbeb 	bl	8009380 <HAL_TIM_PWM_Start>

  InitOscState();
 8002baa:	f000 f8dd 	bl	8002d68 <InitOscState>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
  {
	 if(HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin) == GPIO_PIN_RESET)
 8002bae:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002bb2:	4825      	ldr	r0, [pc, #148]	@ (8002c48 <main+0x2bc>)
 8002bb4:	f004 fa5c 	bl	8007070 <HAL_GPIO_ReadPin>
 8002bb8:	4603      	mov	r3, r0
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d103      	bne.n	8002bc6 <main+0x23a>
	 {

		  HAL_TIM_Base_Start_IT(&htim2);
 8002bbe:	4823      	ldr	r0, [pc, #140]	@ (8002c4c <main+0x2c0>)
 8002bc0:	f006 faf4 	bl	80091ac <HAL_TIM_Base_Start_IT>
 8002bc4:	e005      	b.n	8002bd2 <main+0x246>
	 }
	 else
	 {
		  txIndex = 0;
 8002bc6:	4b17      	ldr	r3, [pc, #92]	@ (8002c24 <main+0x298>)
 8002bc8:	2200      	movs	r2, #0
 8002bca:	601a      	str	r2, [r3, #0]
		  HAL_TIM_Base_Stop_IT(&htim2);
 8002bcc:	481f      	ldr	r0, [pc, #124]	@ (8002c4c <main+0x2c0>)
 8002bce:	f006 fb4f 	bl	8009270 <HAL_TIM_Base_Stop_IT>
	 }

	 Oscilloscope_Process();
 8002bd2:	f001 f805 	bl	8003be0 <Oscilloscope_Process>
	 if(HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin) == GPIO_PIN_RESET)
 8002bd6:	e7ea      	b.n	8002bae <main+0x222>
 8002bd8:	08013c54 	.word	0x08013c54
 8002bdc:	08013b2c 	.word	0x08013b2c
 8002be0:	2000d4b8 	.word	0x2000d4b8
 8002be4:	08013c70 	.word	0x08013c70
 8002be8:	08013c84 	.word	0x08013c84
 8002bec:	2000e4f4 	.word	0x2000e4f4
 8002bf0:	2000e4f0 	.word	0x2000e4f0
 8002bf4:	2000f528 	.word	0x2000f528
 8002bf8:	3fe00000 	.word	0x3fe00000
 8002bfc:	2000f52c 	.word	0x2000f52c
 8002c00:	2000f530 	.word	0x2000f530
 8002c04:	08013c90 	.word	0x08013c90
 8002c08:	08013cb4 	.word	0x08013cb4
 8002c0c:	2000f534 	.word	0x2000f534
 8002c10:	08013cc8 	.word	0x08013cc8
 8002c14:	2000d140 	.word	0x2000d140
 8002c18:	2000f5de 	.word	0x2000f5de
 8002c1c:	20016158 	.word	0x20016158
 8002c20:	08013ccc 	.word	0x08013ccc
 8002c24:	2000f5e4 	.word	0x2000f5e4
 8002c28:	e000edfc 	.word	0xe000edfc
 8002c2c:	e0001000 	.word	0xe0001000
 8002c30:	2000d0e2 	.word	0x2000d0e2
 8002c34:	2000d0e8 	.word	0x2000d0e8
 8002c38:	2000f5f0 	.word	0x2000f5f0
 8002c3c:	2000d318 	.word	0x2000d318
 8002c40:	200160c8 	.word	0x200160c8
 8002c44:	20015fa8 	.word	0x20015fa8
 8002c48:	40020800 	.word	0x40020800
 8002c4c:	20015ff0 	.word	0x20015ff0

08002c50 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002c50:	b580      	push	{r7, lr}
 8002c52:	b094      	sub	sp, #80	@ 0x50
 8002c54:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002c56:	f107 0320 	add.w	r3, r7, #32
 8002c5a:	2230      	movs	r2, #48	@ 0x30
 8002c5c:	2100      	movs	r1, #0
 8002c5e:	4618      	mov	r0, r3
 8002c60:	f00d fcaa 	bl	80105b8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002c64:	f107 030c 	add.w	r3, r7, #12
 8002c68:	2200      	movs	r2, #0
 8002c6a:	601a      	str	r2, [r3, #0]
 8002c6c:	605a      	str	r2, [r3, #4]
 8002c6e:	609a      	str	r2, [r3, #8]
 8002c70:	60da      	str	r2, [r3, #12]
 8002c72:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002c74:	2300      	movs	r3, #0
 8002c76:	60bb      	str	r3, [r7, #8]
 8002c78:	4b27      	ldr	r3, [pc, #156]	@ (8002d18 <SystemClock_Config+0xc8>)
 8002c7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c7c:	4a26      	ldr	r2, [pc, #152]	@ (8002d18 <SystemClock_Config+0xc8>)
 8002c7e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002c82:	6413      	str	r3, [r2, #64]	@ 0x40
 8002c84:	4b24      	ldr	r3, [pc, #144]	@ (8002d18 <SystemClock_Config+0xc8>)
 8002c86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c88:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002c8c:	60bb      	str	r3, [r7, #8]
 8002c8e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002c90:	2300      	movs	r3, #0
 8002c92:	607b      	str	r3, [r7, #4]
 8002c94:	4b21      	ldr	r3, [pc, #132]	@ (8002d1c <SystemClock_Config+0xcc>)
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	4a20      	ldr	r2, [pc, #128]	@ (8002d1c <SystemClock_Config+0xcc>)
 8002c9a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002c9e:	6013      	str	r3, [r2, #0]
 8002ca0:	4b1e      	ldr	r3, [pc, #120]	@ (8002d1c <SystemClock_Config+0xcc>)
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8002ca8:	607b      	str	r3, [r7, #4]
 8002caa:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002cac:	2302      	movs	r3, #2
 8002cae:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002cb0:	2301      	movs	r3, #1
 8002cb2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002cb4:	2310      	movs	r3, #16
 8002cb6:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002cb8:	2302      	movs	r3, #2
 8002cba:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002cbc:	2300      	movs	r3, #0
 8002cbe:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8002cc0:	2308      	movs	r3, #8
 8002cc2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8002cc4:	2364      	movs	r3, #100	@ 0x64
 8002cc6:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002cc8:	2302      	movs	r3, #2
 8002cca:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8002ccc:	2307      	movs	r3, #7
 8002cce:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002cd0:	f107 0320 	add.w	r3, r7, #32
 8002cd4:	4618      	mov	r0, r3
 8002cd6:	f004 ffdd 	bl	8007c94 <HAL_RCC_OscConfig>
 8002cda:	4603      	mov	r3, r0
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d001      	beq.n	8002ce4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8002ce0:	f000 f83e 	bl	8002d60 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002ce4:	230f      	movs	r3, #15
 8002ce6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002ce8:	2302      	movs	r3, #2
 8002cea:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002cec:	2300      	movs	r3, #0
 8002cee:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002cf0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002cf4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002cf6:	2300      	movs	r3, #0
 8002cf8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8002cfa:	f107 030c 	add.w	r3, r7, #12
 8002cfe:	2103      	movs	r1, #3
 8002d00:	4618      	mov	r0, r3
 8002d02:	f005 fa3f 	bl	8008184 <HAL_RCC_ClockConfig>
 8002d06:	4603      	mov	r3, r0
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d001      	beq.n	8002d10 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8002d0c:	f000 f828 	bl	8002d60 <Error_Handler>
  }
}
 8002d10:	bf00      	nop
 8002d12:	3750      	adds	r7, #80	@ 0x50
 8002d14:	46bd      	mov	sp, r7
 8002d16:	bd80      	pop	{r7, pc}
 8002d18:	40023800 	.word	0x40023800
 8002d1c:	40007000 	.word	0x40007000

08002d20 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8002d20:	b580      	push	{r7, lr}
 8002d22:	b086      	sub	sp, #24
 8002d24:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002d26:	463b      	mov	r3, r7
 8002d28:	2200      	movs	r2, #0
 8002d2a:	601a      	str	r2, [r3, #0]
 8002d2c:	605a      	str	r2, [r3, #4]
 8002d2e:	609a      	str	r2, [r3, #8]
 8002d30:	60da      	str	r2, [r3, #12]
 8002d32:	611a      	str	r2, [r3, #16]
 8002d34:	615a      	str	r2, [r3, #20]

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8002d36:	2301      	movs	r3, #1
 8002d38:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8002d3a:	23c0      	movs	r3, #192	@ 0xc0
 8002d3c:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLLI2S.PLLI2SM = 16;
 8002d3e:	2310      	movs	r3, #16
 8002d40:	607b      	str	r3, [r7, #4]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8002d42:	2302      	movs	r3, #2
 8002d44:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002d46:	463b      	mov	r3, r7
 8002d48:	4618      	mov	r0, r3
 8002d4a:	f005 fc3b 	bl	80085c4 <HAL_RCCEx_PeriphCLKConfig>
 8002d4e:	4603      	mov	r3, r0
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d001      	beq.n	8002d58 <PeriphCommonClock_Config+0x38>
  {
    Error_Handler();
 8002d54:	f000 f804 	bl	8002d60 <Error_Handler>
  }
}
 8002d58:	bf00      	nop
 8002d5a:	3718      	adds	r7, #24
 8002d5c:	46bd      	mov	sp, r7
 8002d5e:	bd80      	pop	{r7, pc}

08002d60 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002d60:	b480      	push	{r7}
 8002d62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  while(1)
 8002d64:	bf00      	nop
 8002d66:	e7fd      	b.n	8002d64 <Error_Handler+0x4>

08002d68 <InitOscState>:
extern TIM_HandleTypeDef htim3;
extern TIM_HandleTypeDef htim4;
extern TIM_HandleTypeDef htim10;

void InitOscState(void)
{
 8002d68:	b580      	push	{r7, lr}
 8002d6a:	b0c6      	sub	sp, #280	@ 0x118
 8002d6c:	af04      	add	r7, sp, #16

	  frames_ticks = HAL_GetTick();
 8002d6e:	f002 fde5 	bl	800593c <HAL_GetTick>
 8002d72:	4603      	mov	r3, r0
 8002d74:	4a73      	ldr	r2, [pc, #460]	@ (8002f44 <InitOscState+0x1dc>)
 8002d76:	6013      	str	r3, [r2, #0]

	  for (uint16_t i = 0; i < 280; i++) {
 8002d78:	2300      	movs	r3, #0
 8002d7a:	f8a7 3106 	strh.w	r3, [r7, #262]	@ 0x106
 8002d7e:	e01e      	b.n	8002dbe <InitOscState+0x56>
		  pixel_dirty0[i][0] = 0;
 8002d80:	f8b7 3106 	ldrh.w	r3, [r7, #262]	@ 0x106
 8002d84:	4a70      	ldr	r2, [pc, #448]	@ (8002f48 <InitOscState+0x1e0>)
 8002d86:	2100      	movs	r1, #0
 8002d88:	f822 1023 	strh.w	r1, [r2, r3, lsl #2]
		  pixel_dirty0[i][1] = 0;
 8002d8c:	f8b7 3106 	ldrh.w	r3, [r7, #262]	@ 0x106
 8002d90:	4a6d      	ldr	r2, [pc, #436]	@ (8002f48 <InitOscState+0x1e0>)
 8002d92:	009b      	lsls	r3, r3, #2
 8002d94:	4413      	add	r3, r2
 8002d96:	2200      	movs	r2, #0
 8002d98:	805a      	strh	r2, [r3, #2]
		  pixel_dirty1[i][0] = 0;
 8002d9a:	f8b7 3106 	ldrh.w	r3, [r7, #262]	@ 0x106
 8002d9e:	4a6b      	ldr	r2, [pc, #428]	@ (8002f4c <InitOscState+0x1e4>)
 8002da0:	2100      	movs	r1, #0
 8002da2:	f822 1023 	strh.w	r1, [r2, r3, lsl #2]
		  pixel_dirty1[i][1] = 0;
 8002da6:	f8b7 3106 	ldrh.w	r3, [r7, #262]	@ 0x106
 8002daa:	4a68      	ldr	r2, [pc, #416]	@ (8002f4c <InitOscState+0x1e4>)
 8002dac:	009b      	lsls	r3, r3, #2
 8002dae:	4413      	add	r3, r2
 8002db0:	2200      	movs	r2, #0
 8002db2:	805a      	strh	r2, [r3, #2]
	  for (uint16_t i = 0; i < 280; i++) {
 8002db4:	f8b7 3106 	ldrh.w	r3, [r7, #262]	@ 0x106
 8002db8:	3301      	adds	r3, #1
 8002dba:	f8a7 3106 	strh.w	r3, [r7, #262]	@ 0x106
 8002dbe:	f8b7 3106 	ldrh.w	r3, [r7, #262]	@ 0x106
 8002dc2:	f5b3 7f8c 	cmp.w	r3, #280	@ 0x118
 8002dc6:	d3db      	bcc.n	8002d80 <InitOscState+0x18>
	  }

	  // Display init
	   display.spi             = &hspi5;
 8002dc8:	4b61      	ldr	r3, [pc, #388]	@ (8002f50 <InitOscState+0x1e8>)
 8002dca:	4a62      	ldr	r2, [pc, #392]	@ (8002f54 <InitOscState+0x1ec>)
 8002dcc:	601a      	str	r2, [r3, #0]
	   display.cs_gpio_port    = ILI9341_CS_GPIO_Port;
 8002dce:	4b60      	ldr	r3, [pc, #384]	@ (8002f50 <InitOscState+0x1e8>)
 8002dd0:	4a61      	ldr	r2, [pc, #388]	@ (8002f58 <InitOscState+0x1f0>)
 8002dd2:	605a      	str	r2, [r3, #4]
	   display.dc_gpio_port    = ILI9341_DC_GPIO_Port;
 8002dd4:	4b5e      	ldr	r3, [pc, #376]	@ (8002f50 <InitOscState+0x1e8>)
 8002dd6:	4a61      	ldr	r2, [pc, #388]	@ (8002f5c <InitOscState+0x1f4>)
 8002dd8:	609a      	str	r2, [r3, #8]
	   display.reset_gpio_port = ILI9341_RESET_GPIO_Port;
 8002dda:	4b5d      	ldr	r3, [pc, #372]	@ (8002f50 <InitOscState+0x1e8>)
 8002ddc:	4a5f      	ldr	r2, [pc, #380]	@ (8002f5c <InitOscState+0x1f4>)
 8002dde:	60da      	str	r2, [r3, #12]
	   display.cs_pin          = ILI9341_CS_Pin;
 8002de0:	4b5b      	ldr	r3, [pc, #364]	@ (8002f50 <InitOscState+0x1e8>)
 8002de2:	2202      	movs	r2, #2
 8002de4:	821a      	strh	r2, [r3, #16]
	   display.dc_pin          = ILI9341_DC_Pin;
 8002de6:	4b5a      	ldr	r3, [pc, #360]	@ (8002f50 <InitOscState+0x1e8>)
 8002de8:	2201      	movs	r2, #1
 8002dea:	825a      	strh	r2, [r3, #18]
	   display.reset_pin       = ILI9341_RESET_Pin;
 8002dec:	4b58      	ldr	r3, [pc, #352]	@ (8002f50 <InitOscState+0x1e8>)
 8002dee:	2202      	movs	r2, #2
 8002df0:	829a      	strh	r2, [r3, #20]
	   display.width           = 320;
 8002df2:	4b57      	ldr	r3, [pc, #348]	@ (8002f50 <InitOscState+0x1e8>)
 8002df4:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8002df8:	82da      	strh	r2, [r3, #22]
	   display.height          = 240;
 8002dfa:	4b55      	ldr	r3, [pc, #340]	@ (8002f50 <InitOscState+0x1e8>)
 8002dfc:	22f0      	movs	r2, #240	@ 0xf0
 8002dfe:	831a      	strh	r2, [r3, #24]
	   display.orientation     = ILI9341_ORIENTATION_ROTATE_RIGHT;
 8002e00:	4b53      	ldr	r3, [pc, #332]	@ (8002f50 <InitOscState+0x1e8>)
 8002e02:	22e8      	movs	r2, #232	@ 0xe8
 8002e04:	769a      	strb	r2, [r3, #26]

	   ILI9341_UNSELECT(&display);
 8002e06:	4b52      	ldr	r3, [pc, #328]	@ (8002f50 <InitOscState+0x1e8>)
 8002e08:	8a1a      	ldrh	r2, [r3, #16]
 8002e0a:	4b51      	ldr	r3, [pc, #324]	@ (8002f50 <InitOscState+0x1e8>)
 8002e0c:	685b      	ldr	r3, [r3, #4]
 8002e0e:	619a      	str	r2, [r3, #24]
	   ILI9341_Init(&display);
 8002e10:	484f      	ldr	r0, [pc, #316]	@ (8002f50 <InitOscState+0x1e8>)
 8002e12:	f7fe fe03 	bl	8001a1c <ILI9341_Init>

		  // Local vars
		  char string[255];

	  // Dispaly freq. (for debug)
	  ILI9341_FillScreen(&display, ILI9341_BLACK);
 8002e16:	2100      	movs	r1, #0
 8002e18:	484d      	ldr	r0, [pc, #308]	@ (8002f50 <InitOscState+0x1e8>)
 8002e1a:	f7ff f84c 	bl	8001eb6 <ILI9341_FillScreen>

	  snprintf(string, 255, "Oscilloscope");
 8002e1e:	1d3b      	adds	r3, r7, #4
 8002e20:	4a4f      	ldr	r2, [pc, #316]	@ (8002f60 <InitOscState+0x1f8>)
 8002e22:	21ff      	movs	r1, #255	@ 0xff
 8002e24:	4618      	mov	r0, r3
 8002e26:	f00d fa97 	bl	8010358 <sniprintf>
	  ILI9341_WriteString(&display, 0, 18 * 0, string, Font_11x18, ILI9341_BLACK, ILI9341_WHITE);
 8002e2a:	1d3b      	adds	r3, r7, #4
 8002e2c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002e30:	9203      	str	r2, [sp, #12]
 8002e32:	2200      	movs	r2, #0
 8002e34:	9202      	str	r2, [sp, #8]
 8002e36:	494b      	ldr	r1, [pc, #300]	@ (8002f64 <InitOscState+0x1fc>)
 8002e38:	466a      	mov	r2, sp
 8002e3a:	c903      	ldmia	r1, {r0, r1}
 8002e3c:	e882 0003 	stmia.w	r2, {r0, r1}
 8002e40:	2200      	movs	r2, #0
 8002e42:	2100      	movs	r1, #0
 8002e44:	4842      	ldr	r0, [pc, #264]	@ (8002f50 <InitOscState+0x1e8>)
 8002e46:	f7ff f980 	bl	800214a <ILI9341_WriteString>

	  snprintf(string, 255, "SYCLK = %ldMHz", HAL_RCC_GetSysClockFreq()/1000000);
 8002e4a:	f005 fa81 	bl	8008350 <HAL_RCC_GetSysClockFreq>
 8002e4e:	4603      	mov	r3, r0
 8002e50:	4a45      	ldr	r2, [pc, #276]	@ (8002f68 <InitOscState+0x200>)
 8002e52:	fba2 2303 	umull	r2, r3, r2, r3
 8002e56:	0c9b      	lsrs	r3, r3, #18
 8002e58:	1d38      	adds	r0, r7, #4
 8002e5a:	4a44      	ldr	r2, [pc, #272]	@ (8002f6c <InitOscState+0x204>)
 8002e5c:	21ff      	movs	r1, #255	@ 0xff
 8002e5e:	f00d fa7b 	bl	8010358 <sniprintf>
	  ILI9341_WriteString(&display, 0, 18 * 1, string, Font_11x18, ILI9341_BLACK, ILI9341_WHITE);
 8002e62:	1d3b      	adds	r3, r7, #4
 8002e64:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002e68:	9203      	str	r2, [sp, #12]
 8002e6a:	2200      	movs	r2, #0
 8002e6c:	9202      	str	r2, [sp, #8]
 8002e6e:	493d      	ldr	r1, [pc, #244]	@ (8002f64 <InitOscState+0x1fc>)
 8002e70:	466a      	mov	r2, sp
 8002e72:	c903      	ldmia	r1, {r0, r1}
 8002e74:	e882 0003 	stmia.w	r2, {r0, r1}
 8002e78:	2212      	movs	r2, #18
 8002e7a:	2100      	movs	r1, #0
 8002e7c:	4834      	ldr	r0, [pc, #208]	@ (8002f50 <InitOscState+0x1e8>)
 8002e7e:	f7ff f964 	bl	800214a <ILI9341_WriteString>

	  snprintf(string, 255, "HCLK  = %ldMHz", HAL_RCC_GetHCLKFreq()/1000000);
 8002e82:	f005 fb6b 	bl	800855c <HAL_RCC_GetHCLKFreq>
 8002e86:	4603      	mov	r3, r0
 8002e88:	4a37      	ldr	r2, [pc, #220]	@ (8002f68 <InitOscState+0x200>)
 8002e8a:	fba2 2303 	umull	r2, r3, r2, r3
 8002e8e:	0c9b      	lsrs	r3, r3, #18
 8002e90:	1d38      	adds	r0, r7, #4
 8002e92:	4a37      	ldr	r2, [pc, #220]	@ (8002f70 <InitOscState+0x208>)
 8002e94:	21ff      	movs	r1, #255	@ 0xff
 8002e96:	f00d fa5f 	bl	8010358 <sniprintf>
	  ILI9341_WriteString(&display, 0, 18 * 2, string, Font_11x18, ILI9341_BLACK, ILI9341_WHITE);
 8002e9a:	1d3b      	adds	r3, r7, #4
 8002e9c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002ea0:	9203      	str	r2, [sp, #12]
 8002ea2:	2200      	movs	r2, #0
 8002ea4:	9202      	str	r2, [sp, #8]
 8002ea6:	492f      	ldr	r1, [pc, #188]	@ (8002f64 <InitOscState+0x1fc>)
 8002ea8:	466a      	mov	r2, sp
 8002eaa:	c903      	ldmia	r1, {r0, r1}
 8002eac:	e882 0003 	stmia.w	r2, {r0, r1}
 8002eb0:	2224      	movs	r2, #36	@ 0x24
 8002eb2:	2100      	movs	r1, #0
 8002eb4:	4826      	ldr	r0, [pc, #152]	@ (8002f50 <InitOscState+0x1e8>)
 8002eb6:	f7ff f948 	bl	800214a <ILI9341_WriteString>

	  snprintf(string, 255, "APB1  = %ldMHz", HAL_RCC_GetPCLK1Freq()/1000000);
 8002eba:	f005 fb5b 	bl	8008574 <HAL_RCC_GetPCLK1Freq>
 8002ebe:	4603      	mov	r3, r0
 8002ec0:	4a29      	ldr	r2, [pc, #164]	@ (8002f68 <InitOscState+0x200>)
 8002ec2:	fba2 2303 	umull	r2, r3, r2, r3
 8002ec6:	0c9b      	lsrs	r3, r3, #18
 8002ec8:	1d38      	adds	r0, r7, #4
 8002eca:	4a2a      	ldr	r2, [pc, #168]	@ (8002f74 <InitOscState+0x20c>)
 8002ecc:	21ff      	movs	r1, #255	@ 0xff
 8002ece:	f00d fa43 	bl	8010358 <sniprintf>
	  ILI9341_WriteString(&display, 0, 18 * 3, string, Font_11x18, ILI9341_BLACK, ILI9341_WHITE);
 8002ed2:	1d3b      	adds	r3, r7, #4
 8002ed4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002ed8:	9203      	str	r2, [sp, #12]
 8002eda:	2200      	movs	r2, #0
 8002edc:	9202      	str	r2, [sp, #8]
 8002ede:	4921      	ldr	r1, [pc, #132]	@ (8002f64 <InitOscState+0x1fc>)
 8002ee0:	466a      	mov	r2, sp
 8002ee2:	c903      	ldmia	r1, {r0, r1}
 8002ee4:	e882 0003 	stmia.w	r2, {r0, r1}
 8002ee8:	2236      	movs	r2, #54	@ 0x36
 8002eea:	2100      	movs	r1, #0
 8002eec:	4818      	ldr	r0, [pc, #96]	@ (8002f50 <InitOscState+0x1e8>)
 8002eee:	f7ff f92c 	bl	800214a <ILI9341_WriteString>

	  snprintf(string, 255, "APB2  = %ldMHz", HAL_RCC_GetPCLK2Freq()/1000000);
 8002ef2:	f005 fb53 	bl	800859c <HAL_RCC_GetPCLK2Freq>
 8002ef6:	4603      	mov	r3, r0
 8002ef8:	4a1b      	ldr	r2, [pc, #108]	@ (8002f68 <InitOscState+0x200>)
 8002efa:	fba2 2303 	umull	r2, r3, r2, r3
 8002efe:	0c9b      	lsrs	r3, r3, #18
 8002f00:	1d38      	adds	r0, r7, #4
 8002f02:	4a1d      	ldr	r2, [pc, #116]	@ (8002f78 <InitOscState+0x210>)
 8002f04:	21ff      	movs	r1, #255	@ 0xff
 8002f06:	f00d fa27 	bl	8010358 <sniprintf>
	  ILI9341_WriteString(&display, 0, 18 * 4, string, Font_11x18, ILI9341_BLACK, ILI9341_WHITE);
 8002f0a:	1d3b      	adds	r3, r7, #4
 8002f0c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002f10:	9203      	str	r2, [sp, #12]
 8002f12:	2200      	movs	r2, #0
 8002f14:	9202      	str	r2, [sp, #8]
 8002f16:	4913      	ldr	r1, [pc, #76]	@ (8002f64 <InitOscState+0x1fc>)
 8002f18:	466a      	mov	r2, sp
 8002f1a:	c903      	ldmia	r1, {r0, r1}
 8002f1c:	e882 0003 	stmia.w	r2, {r0, r1}
 8002f20:	2248      	movs	r2, #72	@ 0x48
 8002f22:	2100      	movs	r1, #0
 8002f24:	480a      	ldr	r0, [pc, #40]	@ (8002f50 <InitOscState+0x1e8>)
 8002f26:	f7ff f910 	bl	800214a <ILI9341_WriteString>

	  HAL_Delay(1000);
 8002f2a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002f2e:	f002 fd11 	bl	8005954 <HAL_Delay>
	  ILI9341_FillScreen(&display, ILI9341_BLACK);
 8002f32:	2100      	movs	r1, #0
 8002f34:	4806      	ldr	r0, [pc, #24]	@ (8002f50 <InitOscState+0x1e8>)
 8002f36:	f7fe ffbe 	bl	8001eb6 <ILI9341_FillScreen>
}
 8002f3a:	bf00      	nop
 8002f3c:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 8002f40:	46bd      	mov	sp, r7
 8002f42:	bd80      	pop	{r7, pc}
 8002f44:	20015624 	.word	0x20015624
 8002f48:	20015628 	.word	0x20015628
 8002f4c:	20015a88 	.word	0x20015a88
 8002f50:	2000f598 	.word	0x2000f598
 8002f54:	20015f4c 	.word	0x20015f4c
 8002f58:	40020400 	.word	0x40020400
 8002f5c:	40020800 	.word	0x40020800
 8002f60:	08013cf0 	.word	0x08013cf0
 8002f64:	20000008 	.word	0x20000008
 8002f68:	431bde83 	.word	0x431bde83
 8002f6c:	08013d00 	.word	0x08013d00
 8002f70:	08013d10 	.word	0x08013d10
 8002f74:	08013d20 	.word	0x08013d20
 8002f78:	08013d30 	.word	0x08013d30

08002f7c <drawAxis>:


static void drawAxis(ILI9341TypeDef *display)
{
 8002f7c:	b580      	push	{r7, lr}
 8002f7e:	b088      	sub	sp, #32
 8002f80:	af02      	add	r7, sp, #8
 8002f82:	6078      	str	r0, [r7, #4]
	for (uint16_t i = 0; i < 9; i++) {
 8002f84:	2300      	movs	r3, #0
 8002f86:	82fb      	strh	r3, [r7, #22]
 8002f88:	e034      	b.n	8002ff4 <drawAxis+0x78>
		uint16_t y = 20 + 25 * i;
 8002f8a:	8afb      	ldrh	r3, [r7, #22]
 8002f8c:	461a      	mov	r2, r3
 8002f8e:	0092      	lsls	r2, r2, #2
 8002f90:	4413      	add	r3, r2
 8002f92:	461a      	mov	r2, r3
 8002f94:	0091      	lsls	r1, r2, #2
 8002f96:	461a      	mov	r2, r3
 8002f98:	460b      	mov	r3, r1
 8002f9a:	4413      	add	r3, r2
 8002f9c:	b29b      	uxth	r3, r3
 8002f9e:	3314      	adds	r3, #20
 8002fa0:	81bb      	strh	r3, [r7, #12]

		if (i == 0 || i == 8) {
 8002fa2:	8afb      	ldrh	r3, [r7, #22]
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d002      	beq.n	8002fae <drawAxis+0x32>
 8002fa8:	8afb      	ldrh	r3, [r7, #22]
 8002faa:	2b08      	cmp	r3, #8
 8002fac:	d10c      	bne.n	8002fc8 <drawAxis+0x4c>
			ILI9341_FillRectangle(display, 20, y, 276, 1, ILI9341_WHITE);
 8002fae:	89ba      	ldrh	r2, [r7, #12]
 8002fb0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002fb4:	9301      	str	r3, [sp, #4]
 8002fb6:	2301      	movs	r3, #1
 8002fb8:	9300      	str	r3, [sp, #0]
 8002fba:	f44f 738a 	mov.w	r3, #276	@ 0x114
 8002fbe:	2114      	movs	r1, #20
 8002fc0:	6878      	ldr	r0, [r7, #4]
 8002fc2:	f7fe ffaa 	bl	8001f1a <ILI9341_FillRectangle>
			continue;
 8002fc6:	e012      	b.n	8002fee <drawAxis+0x72>
		}

		for (uint16_t j = 0; j < 276; j += 2)
 8002fc8:	2300      	movs	r3, #0
 8002fca:	82bb      	strh	r3, [r7, #20]
 8002fcc:	e00b      	b.n	8002fe6 <drawAxis+0x6a>
			ILI9341_DrawPixel(display, 20 + j, y, ILI9341_GRAY);
 8002fce:	8abb      	ldrh	r3, [r7, #20]
 8002fd0:	3314      	adds	r3, #20
 8002fd2:	b299      	uxth	r1, r3
 8002fd4:	89ba      	ldrh	r2, [r7, #12]
 8002fd6:	f245 238a 	movw	r3, #21130	@ 0x528a
 8002fda:	6878      	ldr	r0, [r7, #4]
 8002fdc:	f7fe fe92 	bl	8001d04 <ILI9341_DrawPixel>
		for (uint16_t j = 0; j < 276; j += 2)
 8002fe0:	8abb      	ldrh	r3, [r7, #20]
 8002fe2:	3302      	adds	r3, #2
 8002fe4:	82bb      	strh	r3, [r7, #20]
 8002fe6:	8abb      	ldrh	r3, [r7, #20]
 8002fe8:	f5b3 7f8a 	cmp.w	r3, #276	@ 0x114
 8002fec:	d3ef      	bcc.n	8002fce <drawAxis+0x52>
	for (uint16_t i = 0; i < 9; i++) {
 8002fee:	8afb      	ldrh	r3, [r7, #22]
 8002ff0:	3301      	adds	r3, #1
 8002ff2:	82fb      	strh	r3, [r7, #22]
 8002ff4:	8afb      	ldrh	r3, [r7, #22]
 8002ff6:	2b08      	cmp	r3, #8
 8002ff8:	d9c7      	bls.n	8002f8a <drawAxis+0xe>
	}

	for (uint16_t i = 0; i < 12; i++) {
 8002ffa:	2300      	movs	r3, #0
 8002ffc:	827b      	strh	r3, [r7, #18]
 8002ffe:	e032      	b.n	8003066 <drawAxis+0xea>
		uint16_t x = 20 + 25 * i;
 8003000:	8a7b      	ldrh	r3, [r7, #18]
 8003002:	461a      	mov	r2, r3
 8003004:	0092      	lsls	r2, r2, #2
 8003006:	4413      	add	r3, r2
 8003008:	461a      	mov	r2, r3
 800300a:	0091      	lsls	r1, r2, #2
 800300c:	461a      	mov	r2, r3
 800300e:	460b      	mov	r3, r1
 8003010:	4413      	add	r3, r2
 8003012:	b29b      	uxth	r3, r3
 8003014:	3314      	adds	r3, #20
 8003016:	81fb      	strh	r3, [r7, #14]

		if (i == 0 || i == 11) {
 8003018:	8a7b      	ldrh	r3, [r7, #18]
 800301a:	2b00      	cmp	r3, #0
 800301c:	d002      	beq.n	8003024 <drawAxis+0xa8>
 800301e:	8a7b      	ldrh	r3, [r7, #18]
 8003020:	2b0b      	cmp	r3, #11
 8003022:	d10b      	bne.n	800303c <drawAxis+0xc0>
			ILI9341_FillRectangle(display, x, 20, 1, 200, ILI9341_WHITE);
 8003024:	89f9      	ldrh	r1, [r7, #14]
 8003026:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800302a:	9301      	str	r3, [sp, #4]
 800302c:	23c8      	movs	r3, #200	@ 0xc8
 800302e:	9300      	str	r3, [sp, #0]
 8003030:	2301      	movs	r3, #1
 8003032:	2214      	movs	r2, #20
 8003034:	6878      	ldr	r0, [r7, #4]
 8003036:	f7fe ff70 	bl	8001f1a <ILI9341_FillRectangle>
			continue;
 800303a:	e011      	b.n	8003060 <drawAxis+0xe4>
		}

		for (uint16_t j = 0; j < 200; j += 2)
 800303c:	2300      	movs	r3, #0
 800303e:	823b      	strh	r3, [r7, #16]
 8003040:	e00b      	b.n	800305a <drawAxis+0xde>
			ILI9341_DrawPixel(display, x, 20 + j, ILI9341_GRAY);
 8003042:	8a3b      	ldrh	r3, [r7, #16]
 8003044:	3314      	adds	r3, #20
 8003046:	b29a      	uxth	r2, r3
 8003048:	89f9      	ldrh	r1, [r7, #14]
 800304a:	f245 238a 	movw	r3, #21130	@ 0x528a
 800304e:	6878      	ldr	r0, [r7, #4]
 8003050:	f7fe fe58 	bl	8001d04 <ILI9341_DrawPixel>
		for (uint16_t j = 0; j < 200; j += 2)
 8003054:	8a3b      	ldrh	r3, [r7, #16]
 8003056:	3302      	adds	r3, #2
 8003058:	823b      	strh	r3, [r7, #16]
 800305a:	8a3b      	ldrh	r3, [r7, #16]
 800305c:	2bc7      	cmp	r3, #199	@ 0xc7
 800305e:	d9f0      	bls.n	8003042 <drawAxis+0xc6>
	for (uint16_t i = 0; i < 12; i++) {
 8003060:	8a7b      	ldrh	r3, [r7, #18]
 8003062:	3301      	adds	r3, #1
 8003064:	827b      	strh	r3, [r7, #18]
 8003066:	8a7b      	ldrh	r3, [r7, #18]
 8003068:	2b0b      	cmp	r3, #11
 800306a:	d9c9      	bls.n	8003000 <drawAxis+0x84>
	}
}
 800306c:	bf00      	nop
 800306e:	bf00      	nop
 8003070:	3718      	adds	r7, #24
 8003072:	46bd      	mov	sp, r7
 8003074:	bd80      	pop	{r7, pc}

08003076 <clearCursor>:

static void clearCursor(ILI9341TypeDef *display, uint16_t pos)
{
 8003076:	b580      	push	{r7, lr}
 8003078:	b084      	sub	sp, #16
 800307a:	af02      	add	r7, sp, #8
 800307c:	6078      	str	r0, [r7, #4]
 800307e:	460b      	mov	r3, r1
 8003080:	807b      	strh	r3, [r7, #2]
	ILI9341_FillRectangle(display, 0, pos - 6, 20, 11, ILI9341_BLACK);
 8003082:	887b      	ldrh	r3, [r7, #2]
 8003084:	3b06      	subs	r3, #6
 8003086:	b29a      	uxth	r2, r3
 8003088:	2300      	movs	r3, #0
 800308a:	9301      	str	r3, [sp, #4]
 800308c:	230b      	movs	r3, #11
 800308e:	9300      	str	r3, [sp, #0]
 8003090:	2314      	movs	r3, #20
 8003092:	2100      	movs	r1, #0
 8003094:	6878      	ldr	r0, [r7, #4]
 8003096:	f7fe ff40 	bl	8001f1a <ILI9341_FillRectangle>
}
 800309a:	bf00      	nop
 800309c:	3708      	adds	r7, #8
 800309e:	46bd      	mov	sp, r7
 80030a0:	bd80      	pop	{r7, pc}

080030a2 <clearTrigger>:

static void clearTrigger(ILI9341TypeDef *display, uint16_t pos)
{
 80030a2:	b580      	push	{r7, lr}
 80030a4:	b084      	sub	sp, #16
 80030a6:	af02      	add	r7, sp, #8
 80030a8:	6078      	str	r0, [r7, #4]
 80030aa:	460b      	mov	r3, r1
 80030ac:	807b      	strh	r3, [r7, #2]
	ILI9341_FillRectangle(display, 296, pos - 6, 20, 11, ILI9341_BLACK);
 80030ae:	887b      	ldrh	r3, [r7, #2]
 80030b0:	3b06      	subs	r3, #6
 80030b2:	b29a      	uxth	r2, r3
 80030b4:	2300      	movs	r3, #0
 80030b6:	9301      	str	r3, [sp, #4]
 80030b8:	230b      	movs	r3, #11
 80030ba:	9300      	str	r3, [sp, #0]
 80030bc:	2314      	movs	r3, #20
 80030be:	f44f 7194 	mov.w	r1, #296	@ 0x128
 80030c2:	6878      	ldr	r0, [r7, #4]
 80030c4:	f7fe ff29 	bl	8001f1a <ILI9341_FillRectangle>
}
 80030c8:	bf00      	nop
 80030ca:	3708      	adds	r7, #8
 80030cc:	46bd      	mov	sp, r7
 80030ce:	bd80      	pop	{r7, pc}

080030d0 <drawCursor>:

static void drawCursor(ILI9341TypeDef *display, uint16_t pos, char *name, uint16_t color)
{
 80030d0:	b580      	push	{r7, lr}
 80030d2:	b08a      	sub	sp, #40	@ 0x28
 80030d4:	af04      	add	r7, sp, #16
 80030d6:	60f8      	str	r0, [r7, #12]
 80030d8:	607a      	str	r2, [r7, #4]
 80030da:	461a      	mov	r2, r3
 80030dc:	460b      	mov	r3, r1
 80030de:	817b      	strh	r3, [r7, #10]
 80030e0:	4613      	mov	r3, r2
 80030e2:	813b      	strh	r3, [r7, #8]
	ILI9341_FillRectangle(display, 0, pos - 6, 7 * 2, 1, color);
 80030e4:	897b      	ldrh	r3, [r7, #10]
 80030e6:	3b06      	subs	r3, #6
 80030e8:	b29a      	uxth	r2, r3
 80030ea:	893b      	ldrh	r3, [r7, #8]
 80030ec:	9301      	str	r3, [sp, #4]
 80030ee:	2301      	movs	r3, #1
 80030f0:	9300      	str	r3, [sp, #0]
 80030f2:	230e      	movs	r3, #14
 80030f4:	2100      	movs	r1, #0
 80030f6:	68f8      	ldr	r0, [r7, #12]
 80030f8:	f7fe ff0f 	bl	8001f1a <ILI9341_FillRectangle>
	ILI9341_WriteString(display, 0, pos - 5, name, Font_7x10, ILI9341_BLACK, color);
 80030fc:	897b      	ldrh	r3, [r7, #10]
 80030fe:	3b05      	subs	r3, #5
 8003100:	b29a      	uxth	r2, r3
 8003102:	893b      	ldrh	r3, [r7, #8]
 8003104:	9303      	str	r3, [sp, #12]
 8003106:	2300      	movs	r3, #0
 8003108:	9302      	str	r3, [sp, #8]
 800310a:	4919      	ldr	r1, [pc, #100]	@ (8003170 <drawCursor+0xa0>)
 800310c:	466b      	mov	r3, sp
 800310e:	c903      	ldmia	r1, {r0, r1}
 8003110:	e883 0003 	stmia.w	r3, {r0, r1}
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	2100      	movs	r1, #0
 8003118:	68f8      	ldr	r0, [r7, #12]
 800311a:	f7ff f816 	bl	800214a <ILI9341_WriteString>

	for (uint8_t i = 0; i < 6; i++) {
 800311e:	2300      	movs	r3, #0
 8003120:	75fb      	strb	r3, [r7, #23]
 8003122:	e01d      	b.n	8003160 <drawCursor+0x90>
		for (uint8_t j = i; j < 11 - i; j++)
 8003124:	7dfb      	ldrb	r3, [r7, #23]
 8003126:	75bb      	strb	r3, [r7, #22]
 8003128:	e011      	b.n	800314e <drawCursor+0x7e>
			ILI9341_DrawPixel(display, 14 + i, pos - 6 + j, color);
 800312a:	7dfb      	ldrb	r3, [r7, #23]
 800312c:	b29b      	uxth	r3, r3
 800312e:	330e      	adds	r3, #14
 8003130:	b299      	uxth	r1, r3
 8003132:	7dbb      	ldrb	r3, [r7, #22]
 8003134:	b29a      	uxth	r2, r3
 8003136:	897b      	ldrh	r3, [r7, #10]
 8003138:	4413      	add	r3, r2
 800313a:	b29b      	uxth	r3, r3
 800313c:	3b06      	subs	r3, #6
 800313e:	b29a      	uxth	r2, r3
 8003140:	893b      	ldrh	r3, [r7, #8]
 8003142:	68f8      	ldr	r0, [r7, #12]
 8003144:	f7fe fdde 	bl	8001d04 <ILI9341_DrawPixel>
		for (uint8_t j = i; j < 11 - i; j++)
 8003148:	7dbb      	ldrb	r3, [r7, #22]
 800314a:	3301      	adds	r3, #1
 800314c:	75bb      	strb	r3, [r7, #22]
 800314e:	7dba      	ldrb	r2, [r7, #22]
 8003150:	7dfb      	ldrb	r3, [r7, #23]
 8003152:	f1c3 030b 	rsb	r3, r3, #11
 8003156:	429a      	cmp	r2, r3
 8003158:	dbe7      	blt.n	800312a <drawCursor+0x5a>
	for (uint8_t i = 0; i < 6; i++) {
 800315a:	7dfb      	ldrb	r3, [r7, #23]
 800315c:	3301      	adds	r3, #1
 800315e:	75fb      	strb	r3, [r7, #23]
 8003160:	7dfb      	ldrb	r3, [r7, #23]
 8003162:	2b05      	cmp	r3, #5
 8003164:	d9de      	bls.n	8003124 <drawCursor+0x54>
	}
}
 8003166:	bf00      	nop
 8003168:	bf00      	nop
 800316a:	3718      	adds	r7, #24
 800316c:	46bd      	mov	sp, r7
 800316e:	bd80      	pop	{r7, pc}
 8003170:	20000000 	.word	0x20000000

08003174 <drawTrigger>:

static void drawTrigger(ILI9341TypeDef *display, uint16_t pos, char *name, uint16_t color)
{
 8003174:	b580      	push	{r7, lr}
 8003176:	b08a      	sub	sp, #40	@ 0x28
 8003178:	af04      	add	r7, sp, #16
 800317a:	60f8      	str	r0, [r7, #12]
 800317c:	607a      	str	r2, [r7, #4]
 800317e:	461a      	mov	r2, r3
 8003180:	460b      	mov	r3, r1
 8003182:	817b      	strh	r3, [r7, #10]
 8003184:	4613      	mov	r3, r2
 8003186:	813b      	strh	r3, [r7, #8]
	ILI9341_FillRectangle(display, 302, pos - 6, 7 * 2, 1, color);
 8003188:	897b      	ldrh	r3, [r7, #10]
 800318a:	3b06      	subs	r3, #6
 800318c:	b29a      	uxth	r2, r3
 800318e:	893b      	ldrh	r3, [r7, #8]
 8003190:	9301      	str	r3, [sp, #4]
 8003192:	2301      	movs	r3, #1
 8003194:	9300      	str	r3, [sp, #0]
 8003196:	230e      	movs	r3, #14
 8003198:	f44f 7197 	mov.w	r1, #302	@ 0x12e
 800319c:	68f8      	ldr	r0, [r7, #12]
 800319e:	f7fe febc 	bl	8001f1a <ILI9341_FillRectangle>
	ILI9341_WriteString(display, 302, pos - 5, name, Font_7x10, ILI9341_BLACK, color);
 80031a2:	897b      	ldrh	r3, [r7, #10]
 80031a4:	3b05      	subs	r3, #5
 80031a6:	b29a      	uxth	r2, r3
 80031a8:	893b      	ldrh	r3, [r7, #8]
 80031aa:	9303      	str	r3, [sp, #12]
 80031ac:	2300      	movs	r3, #0
 80031ae:	9302      	str	r3, [sp, #8]
 80031b0:	491a      	ldr	r1, [pc, #104]	@ (800321c <drawTrigger+0xa8>)
 80031b2:	466b      	mov	r3, sp
 80031b4:	c903      	ldmia	r1, {r0, r1}
 80031b6:	e883 0003 	stmia.w	r3, {r0, r1}
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	f44f 7197 	mov.w	r1, #302	@ 0x12e
 80031c0:	68f8      	ldr	r0, [r7, #12]
 80031c2:	f7fe ffc2 	bl	800214a <ILI9341_WriteString>

	for (uint8_t i = 0; i < 6; i++) {
 80031c6:	2300      	movs	r3, #0
 80031c8:	75fb      	strb	r3, [r7, #23]
 80031ca:	e01f      	b.n	800320c <drawTrigger+0x98>
		for (uint8_t j = i; j < 11 - i; j++)
 80031cc:	7dfb      	ldrb	r3, [r7, #23]
 80031ce:	75bb      	strb	r3, [r7, #22]
 80031d0:	e013      	b.n	80031fa <drawTrigger+0x86>
			ILI9341_DrawPixel(display, 301 - i, pos - 6 + j, color);
 80031d2:	7dfb      	ldrb	r3, [r7, #23]
 80031d4:	b29b      	uxth	r3, r3
 80031d6:	f5c3 7396 	rsb	r3, r3, #300	@ 0x12c
 80031da:	3301      	adds	r3, #1
 80031dc:	b299      	uxth	r1, r3
 80031de:	7dbb      	ldrb	r3, [r7, #22]
 80031e0:	b29a      	uxth	r2, r3
 80031e2:	897b      	ldrh	r3, [r7, #10]
 80031e4:	4413      	add	r3, r2
 80031e6:	b29b      	uxth	r3, r3
 80031e8:	3b06      	subs	r3, #6
 80031ea:	b29a      	uxth	r2, r3
 80031ec:	893b      	ldrh	r3, [r7, #8]
 80031ee:	68f8      	ldr	r0, [r7, #12]
 80031f0:	f7fe fd88 	bl	8001d04 <ILI9341_DrawPixel>
		for (uint8_t j = i; j < 11 - i; j++)
 80031f4:	7dbb      	ldrb	r3, [r7, #22]
 80031f6:	3301      	adds	r3, #1
 80031f8:	75bb      	strb	r3, [r7, #22]
 80031fa:	7dba      	ldrb	r2, [r7, #22]
 80031fc:	7dfb      	ldrb	r3, [r7, #23]
 80031fe:	f1c3 030b 	rsb	r3, r3, #11
 8003202:	429a      	cmp	r2, r3
 8003204:	dbe5      	blt.n	80031d2 <drawTrigger+0x5e>
	for (uint8_t i = 0; i < 6; i++) {
 8003206:	7dfb      	ldrb	r3, [r7, #23]
 8003208:	3301      	adds	r3, #1
 800320a:	75fb      	strb	r3, [r7, #23]
 800320c:	7dfb      	ldrb	r3, [r7, #23]
 800320e:	2b05      	cmp	r3, #5
 8003210:	d9dc      	bls.n	80031cc <drawTrigger+0x58>
	}
}
 8003212:	bf00      	nop
 8003214:	bf00      	nop
 8003216:	3718      	adds	r7, #24
 8003218:	46bd      	mov	sp, r7
 800321a:	bd80      	pop	{r7, pc}
 800321c:	20000000 	.word	0x20000000

08003220 <drawSignal>:

static void drawSignal(ILI9341TypeDef *display, uint32_t *adc_time, uint16_t *adc0, uint32_t adc_length, uint16_t pixel_dirty[280][2], uint16_t cursor, uint16_t color)
{
 8003220:	b590      	push	{r4, r7, lr}
 8003222:	f2ad 6dd4 	subw	sp, sp, #1748	@ 0x6d4
 8003226:	af00      	add	r7, sp, #0
 8003228:	f507 64da 	add.w	r4, r7, #1744	@ 0x6d0
 800322c:	f2a4 64c4 	subw	r4, r4, #1732	@ 0x6c4
 8003230:	6020      	str	r0, [r4, #0]
 8003232:	f507 60da 	add.w	r0, r7, #1744	@ 0x6d0
 8003236:	f5a0 60d9 	sub.w	r0, r0, #1736	@ 0x6c8
 800323a:	6001      	str	r1, [r0, #0]
 800323c:	f507 61da 	add.w	r1, r7, #1744	@ 0x6d0
 8003240:	f2a1 61cc 	subw	r1, r1, #1740	@ 0x6cc
 8003244:	600a      	str	r2, [r1, #0]
 8003246:	f507 62da 	add.w	r2, r7, #1744	@ 0x6d0
 800324a:	f5a2 62da 	sub.w	r2, r2, #1744	@ 0x6d0
 800324e:	6013      	str	r3, [r2, #0]
	uint16_t point[280];
	for (uint16_t i = 0; i < 280; i++)
 8003250:	2300      	movs	r3, #0
 8003252:	f8a7 36ce 	strh.w	r3, [r7, #1742]	@ 0x6ce
 8003256:	e00d      	b.n	8003274 <drawSignal+0x54>
		point[i] = 0;
 8003258:	f8b7 26ce 	ldrh.w	r2, [r7, #1742]	@ 0x6ce
 800325c:	f507 63da 	add.w	r3, r7, #1744	@ 0x6d0
 8003260:	f5a3 7318 	sub.w	r3, r3, #608	@ 0x260
 8003264:	2100      	movs	r1, #0
 8003266:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	for (uint16_t i = 0; i < 280; i++)
 800326a:	f8b7 36ce 	ldrh.w	r3, [r7, #1742]	@ 0x6ce
 800326e:	3301      	adds	r3, #1
 8003270:	f8a7 36ce 	strh.w	r3, [r7, #1742]	@ 0x6ce
 8003274:	f8b7 36ce 	ldrh.w	r3, [r7, #1742]	@ 0x6ce
 8003278:	f5b3 7f8c 	cmp.w	r3, #280	@ 0x118
 800327c:	d3ec      	bcc.n	8003258 <drawSignal+0x38>

	for (uint16_t i = 0; i < adc_length; i++) {
 800327e:	2300      	movs	r3, #0
 8003280:	f8a7 36cc 	strh.w	r3, [r7, #1740]	@ 0x6cc
 8003284:	e0a5      	b.n	80033d2 <drawSignal+0x1b2>

		float uV = (float)(adc0[i]) * 3300000.0f / 4096.0f;
 8003286:	f8b7 36cc 	ldrh.w	r3, [r7, #1740]	@ 0x6cc
 800328a:	005b      	lsls	r3, r3, #1
 800328c:	f507 62da 	add.w	r2, r7, #1744	@ 0x6d0
 8003290:	f2a2 62cc 	subw	r2, r2, #1740	@ 0x6cc
 8003294:	6812      	ldr	r2, [r2, #0]
 8003296:	4413      	add	r3, r2
 8003298:	881b      	ldrh	r3, [r3, #0]
 800329a:	ee07 3a90 	vmov	s15, r3
 800329e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80032a2:	ed9f 7aa1 	vldr	s14, [pc, #644]	@ 8003528 <drawSignal+0x308>
 80032a6:	ee27 7a87 	vmul.f32	s14, s15, s14
 80032aa:	eddf 6aa0 	vldr	s13, [pc, #640]	@ 800352c <drawSignal+0x30c>
 80032ae:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80032b2:	f507 63d4 	add.w	r3, r7, #1696	@ 0x6a0
 80032b6:	edc3 7a00 	vstr	s15, [r3]
		uint16_t x = (float)(adc_time[i]) * 280.0f / (float)(12.0f * xlim_us);
 80032ba:	f8b7 36cc 	ldrh.w	r3, [r7, #1740]	@ 0x6cc
 80032be:	009b      	lsls	r3, r3, #2
 80032c0:	f507 62da 	add.w	r2, r7, #1744	@ 0x6d0
 80032c4:	f5a2 62d9 	sub.w	r2, r2, #1736	@ 0x6c8
 80032c8:	6812      	ldr	r2, [r2, #0]
 80032ca:	4413      	add	r3, r2
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	ee07 3a90 	vmov	s15, r3
 80032d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80032d6:	ed9f 7a96 	vldr	s14, [pc, #600]	@ 8003530 <drawSignal+0x310>
 80032da:	ee67 6a87 	vmul.f32	s13, s15, s14
 80032de:	4b95      	ldr	r3, [pc, #596]	@ (8003534 <drawSignal+0x314>)
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	ee07 3a90 	vmov	s15, r3
 80032e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80032ea:	eeb2 7a08 	vmov.f32	s14, #40	@ 0x41400000  12.0
 80032ee:	ee27 7a87 	vmul.f32	s14, s15, s14
 80032f2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80032f6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80032fa:	ee17 3a90 	vmov	r3, s15
 80032fe:	f8a7 36ca 	strh.w	r3, [r7, #1738]	@ 0x6ca
		uint16_t y = cursor - ((uV / (float)(ylim_uV)) * 200.0f / 8.0f);
 8003302:	f8b7 36e4 	ldrh.w	r3, [r7, #1764]	@ 0x6e4
 8003306:	ee07 3a90 	vmov	s15, r3
 800330a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800330e:	4b8a      	ldr	r3, [pc, #552]	@ (8003538 <drawSignal+0x318>)
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	ee07 3a90 	vmov	s15, r3
 8003316:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800331a:	f507 63d4 	add.w	r3, r7, #1696	@ 0x6a0
 800331e:	ed93 6a00 	vldr	s12, [r3]
 8003322:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8003326:	eddf 6a85 	vldr	s13, [pc, #532]	@ 800353c <drawSignal+0x31c>
 800332a:	ee67 6aa6 	vmul.f32	s13, s15, s13
 800332e:	eeb2 6a00 	vmov.f32	s12, #32	@ 0x41000000  8.0
 8003332:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8003336:	ee77 7a67 	vsub.f32	s15, s14, s15
 800333a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800333e:	ee17 3a90 	vmov	r3, s15
 8003342:	f8a7 36c8 	strh.w	r3, [r7, #1736]	@ 0x6c8

		if (x < 0)
			x = 0;

		if (x > 274)
 8003346:	f8b7 36ca 	ldrh.w	r3, [r7, #1738]	@ 0x6ca
 800334a:	f5b3 7f89 	cmp.w	r3, #274	@ 0x112
 800334e:	d903      	bls.n	8003358 <drawSignal+0x138>
			x = 274;
 8003350:	f44f 7389 	mov.w	r3, #274	@ 0x112
 8003354:	f8a7 36ca 	strh.w	r3, [r7, #1738]	@ 0x6ca

		if (y < 21)
 8003358:	f8b7 36c8 	ldrh.w	r3, [r7, #1736]	@ 0x6c8
 800335c:	2b14      	cmp	r3, #20
 800335e:	d802      	bhi.n	8003366 <drawSignal+0x146>
			y = 21;
 8003360:	2315      	movs	r3, #21
 8003362:	f8a7 36c8 	strh.w	r3, [r7, #1736]	@ 0x6c8

		if (y > 219)
 8003366:	f8b7 36c8 	ldrh.w	r3, [r7, #1736]	@ 0x6c8
 800336a:	2bdb      	cmp	r3, #219	@ 0xdb
 800336c:	d902      	bls.n	8003374 <drawSignal+0x154>
			y = 219;
 800336e:	23db      	movs	r3, #219	@ 0xdb
 8003370:	f8a7 36c8 	strh.w	r3, [r7, #1736]	@ 0x6c8

		point[x] += (float)(y - point[x]) * 1.0f;
 8003374:	f8b7 26ca 	ldrh.w	r2, [r7, #1738]	@ 0x6ca
 8003378:	f507 63da 	add.w	r3, r7, #1744	@ 0x6d0
 800337c:	f5a3 7318 	sub.w	r3, r3, #608	@ 0x260
 8003380:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8003384:	ee07 3a90 	vmov	s15, r3
 8003388:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800338c:	f8b7 36c8 	ldrh.w	r3, [r7, #1736]	@ 0x6c8
 8003390:	f8b7 16ca 	ldrh.w	r1, [r7, #1738]	@ 0x6ca
 8003394:	f507 62da 	add.w	r2, r7, #1744	@ 0x6d0
 8003398:	f5a2 7218 	sub.w	r2, r2, #608	@ 0x260
 800339c:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 80033a0:	1a9b      	subs	r3, r3, r2
 80033a2:	ee07 3a90 	vmov	s15, r3
 80033a6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80033aa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80033ae:	f8b7 26ca 	ldrh.w	r2, [r7, #1738]	@ 0x6ca
 80033b2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80033b6:	ee17 3a90 	vmov	r3, s15
 80033ba:	b299      	uxth	r1, r3
 80033bc:	f507 63da 	add.w	r3, r7, #1744	@ 0x6d0
 80033c0:	f5a3 7318 	sub.w	r3, r3, #608	@ 0x260
 80033c4:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	for (uint16_t i = 0; i < adc_length; i++) {
 80033c8:	f8b7 36cc 	ldrh.w	r3, [r7, #1740]	@ 0x6cc
 80033cc:	3301      	adds	r3, #1
 80033ce:	f8a7 36cc 	strh.w	r3, [r7, #1740]	@ 0x6cc
 80033d2:	f8b7 36cc 	ldrh.w	r3, [r7, #1740]	@ 0x6cc
 80033d6:	f507 62da 	add.w	r2, r7, #1744	@ 0x6d0
 80033da:	f5a2 62da 	sub.w	r2, r2, #1744	@ 0x6d0
 80033de:	6812      	ldr	r2, [r2, #0]
 80033e0:	429a      	cmp	r2, r3
 80033e2:	f63f af50 	bhi.w	8003286 <drawSignal+0x66>
	}

	uint16_t pixel[280][2];
	for (uint16_t i = 0; i < 280; i++) {
 80033e6:	2300      	movs	r3, #0
 80033e8:	f8a7 36c6 	strh.w	r3, [r7, #1734]	@ 0x6c6
 80033ec:	e017      	b.n	800341e <drawSignal+0x1fe>
		pixel[i][0] = 220;
 80033ee:	f8b7 26c6 	ldrh.w	r2, [r7, #1734]	@ 0x6c6
 80033f2:	f507 63da 	add.w	r3, r7, #1744	@ 0x6d0
 80033f6:	f5a3 63d8 	sub.w	r3, r3, #1728	@ 0x6c0
 80033fa:	21dc      	movs	r1, #220	@ 0xdc
 80033fc:	f823 1022 	strh.w	r1, [r3, r2, lsl #2]
		pixel[i][1] = 20;
 8003400:	f8b7 36c6 	ldrh.w	r3, [r7, #1734]	@ 0x6c6
 8003404:	f507 62da 	add.w	r2, r7, #1744	@ 0x6d0
 8003408:	f5a2 62d8 	sub.w	r2, r2, #1728	@ 0x6c0
 800340c:	009b      	lsls	r3, r3, #2
 800340e:	4413      	add	r3, r2
 8003410:	2214      	movs	r2, #20
 8003412:	805a      	strh	r2, [r3, #2]
	for (uint16_t i = 0; i < 280; i++) {
 8003414:	f8b7 36c6 	ldrh.w	r3, [r7, #1734]	@ 0x6c6
 8003418:	3301      	adds	r3, #1
 800341a:	f8a7 36c6 	strh.w	r3, [r7, #1734]	@ 0x6c6
 800341e:	f8b7 36c6 	ldrh.w	r3, [r7, #1734]	@ 0x6c6
 8003422:	f5b3 7f8c 	cmp.w	r3, #280	@ 0x118
 8003426:	d3e2      	bcc.n	80033ee <drawSignal+0x1ce>
	}

	for (uint16_t i = 1; i <= 279; i++) {
 8003428:	2301      	movs	r3, #1
 800342a:	f8a7 36c4 	strh.w	r3, [r7, #1732]	@ 0x6c4
 800342e:	e11b      	b.n	8003668 <drawSignal+0x448>

		if (point[i] == 0)
 8003430:	f8b7 26c4 	ldrh.w	r2, [r7, #1732]	@ 0x6c4
 8003434:	f507 63da 	add.w	r3, r7, #1744	@ 0x6d0
 8003438:	f5a3 7318 	sub.w	r3, r3, #608	@ 0x260
 800343c:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8003440:	2b00      	cmp	r3, #0
 8003442:	f000 8105 	beq.w	8003650 <drawSignal+0x430>
			continue;

		int16_t x1 = i;
 8003446:	f8b7 36c4 	ldrh.w	r3, [r7, #1732]	@ 0x6c4
 800344a:	f8a7 36b2 	strh.w	r3, [r7, #1714]	@ 0x6b2
		int16_t x0 = x1 - 1;
 800344e:	f8b7 36b2 	ldrh.w	r3, [r7, #1714]	@ 0x6b2
 8003452:	3b01      	subs	r3, #1
 8003454:	b29b      	uxth	r3, r3
 8003456:	f8a7 36c2 	strh.w	r3, [r7, #1730]	@ 0x6c2

		for (; x0 >= 0; x0--) {
 800345a:	e010      	b.n	800347e <drawSignal+0x25e>
			if (point[x0] != 0)
 800345c:	f9b7 26c2 	ldrsh.w	r2, [r7, #1730]	@ 0x6c2
 8003460:	f507 63da 	add.w	r3, r7, #1744	@ 0x6d0
 8003464:	f5a3 7318 	sub.w	r3, r3, #608	@ 0x260
 8003468:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800346c:	2b00      	cmp	r3, #0
 800346e:	d10b      	bne.n	8003488 <drawSignal+0x268>
		for (; x0 >= 0; x0--) {
 8003470:	f9b7 36c2 	ldrsh.w	r3, [r7, #1730]	@ 0x6c2
 8003474:	b29b      	uxth	r3, r3
 8003476:	3b01      	subs	r3, #1
 8003478:	b29b      	uxth	r3, r3
 800347a:	f8a7 36c2 	strh.w	r3, [r7, #1730]	@ 0x6c2
 800347e:	f9b7 36c2 	ldrsh.w	r3, [r7, #1730]	@ 0x6c2
 8003482:	2b00      	cmp	r3, #0
 8003484:	daea      	bge.n	800345c <drawSignal+0x23c>
 8003486:	e000      	b.n	800348a <drawSignal+0x26a>
				break;
 8003488:	bf00      	nop
		}

		if (x0 == 0 && point[x0] == 0)
 800348a:	f9b7 36c2 	ldrsh.w	r3, [r7, #1730]	@ 0x6c2
 800348e:	2b00      	cmp	r3, #0
 8003490:	d10a      	bne.n	80034a8 <drawSignal+0x288>
 8003492:	f9b7 26c2 	ldrsh.w	r2, [r7, #1730]	@ 0x6c2
 8003496:	f507 63da 	add.w	r3, r7, #1744	@ 0x6d0
 800349a:	f5a3 7318 	sub.w	r3, r3, #608	@ 0x260
 800349e:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	f000 81fa 	beq.w	800389c <drawSignal+0x67c>
			return;

		int16_t y0 = point[x0];
 80034a8:	f9b7 26c2 	ldrsh.w	r2, [r7, #1730]	@ 0x6c2
 80034ac:	f507 63da 	add.w	r3, r7, #1744	@ 0x6d0
 80034b0:	f5a3 7318 	sub.w	r3, r3, #608	@ 0x260
 80034b4:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80034b8:	f8a7 36c0 	strh.w	r3, [r7, #1728]	@ 0x6c0
		int16_t y1 = point[x1];
 80034bc:	f9b7 26b2 	ldrsh.w	r2, [r7, #1714]	@ 0x6b2
 80034c0:	f507 63da 	add.w	r3, r7, #1744	@ 0x6d0
 80034c4:	f5a3 7318 	sub.w	r3, r3, #608	@ 0x260
 80034c8:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80034cc:	f8a7 36b0 	strh.w	r3, [r7, #1712]	@ 0x6b0

		int16_t dx = (x1 - x0) > 0 ? (x1 - x0) : -(x1 - x0);
 80034d0:	f9b7 26b2 	ldrsh.w	r2, [r7, #1714]	@ 0x6b2
 80034d4:	f9b7 36c2 	ldrsh.w	r3, [r7, #1730]	@ 0x6c2
 80034d8:	1ad3      	subs	r3, r2, r3
 80034da:	2b00      	cmp	r3, #0
 80034dc:	bfb8      	it	lt
 80034de:	425b      	neglt	r3, r3
 80034e0:	f8a7 36ae 	strh.w	r3, [r7, #1710]	@ 0x6ae
		int16_t sx = x0 < x1 ? 1 : -1;
 80034e4:	f9b7 26c2 	ldrsh.w	r2, [r7, #1730]	@ 0x6c2
 80034e8:	f9b7 36b2 	ldrsh.w	r3, [r7, #1714]	@ 0x6b2
 80034ec:	429a      	cmp	r2, r3
 80034ee:	da01      	bge.n	80034f4 <drawSignal+0x2d4>
 80034f0:	2301      	movs	r3, #1
 80034f2:	e001      	b.n	80034f8 <drawSignal+0x2d8>
 80034f4:	f04f 33ff 	mov.w	r3, #4294967295
 80034f8:	f8a7 36ac 	strh.w	r3, [r7, #1708]	@ 0x6ac
		int16_t dy = (y1 - y0) > 0 ? -(y1 - y0) : (y1 - y0);
 80034fc:	f9b7 26b0 	ldrsh.w	r2, [r7, #1712]	@ 0x6b0
 8003500:	f9b7 36c0 	ldrsh.w	r3, [r7, #1728]	@ 0x6c0
 8003504:	1ad3      	subs	r3, r2, r3
 8003506:	2b00      	cmp	r3, #0
 8003508:	bfb8      	it	lt
 800350a:	425b      	neglt	r3, r3
 800350c:	b29b      	uxth	r3, r3
 800350e:	425b      	negs	r3, r3
 8003510:	b29b      	uxth	r3, r3
 8003512:	f8a7 36aa 	strh.w	r3, [r7, #1706]	@ 0x6aa
		int16_t sy = y0 < y1 ? 1 : -1;
 8003516:	f9b7 26c0 	ldrsh.w	r2, [r7, #1728]	@ 0x6c0
 800351a:	f9b7 36b0 	ldrsh.w	r3, [r7, #1712]	@ 0x6b0
 800351e:	429a      	cmp	r2, r3
 8003520:	da0e      	bge.n	8003540 <drawSignal+0x320>
 8003522:	2301      	movs	r3, #1
 8003524:	e00e      	b.n	8003544 <drawSignal+0x324>
 8003526:	bf00      	nop
 8003528:	4a496a80 	.word	0x4a496a80
 800352c:	45800000 	.word	0x45800000
 8003530:	438c0000 	.word	0x438c0000
 8003534:	2000d0ec 	.word	0x2000d0ec
 8003538:	2000d0f0 	.word	0x2000d0f0
 800353c:	43480000 	.word	0x43480000
 8003540:	f04f 33ff 	mov.w	r3, #4294967295
 8003544:	f8a7 36a8 	strh.w	r3, [r7, #1704]	@ 0x6a8
		int16_t error = dx + dy;
 8003548:	f8b7 26ae 	ldrh.w	r2, [r7, #1710]	@ 0x6ae
 800354c:	f8b7 36aa 	ldrh.w	r3, [r7, #1706]	@ 0x6aa
 8003550:	4413      	add	r3, r2
 8003552:	b29b      	uxth	r3, r3
 8003554:	f8a7 36be 	strh.w	r3, [r7, #1726]	@ 0x6be

		while (1) {

			if (pixel[x0][0] > y0)
 8003558:	f9b7 26c2 	ldrsh.w	r2, [r7, #1730]	@ 0x6c2
 800355c:	f507 63da 	add.w	r3, r7, #1744	@ 0x6d0
 8003560:	f5a3 63d8 	sub.w	r3, r3, #1728	@ 0x6c0
 8003564:	f833 3022 	ldrh.w	r3, [r3, r2, lsl #2]
 8003568:	461a      	mov	r2, r3
 800356a:	f9b7 36c0 	ldrsh.w	r3, [r7, #1728]	@ 0x6c0
 800356e:	429a      	cmp	r2, r3
 8003570:	dd09      	ble.n	8003586 <drawSignal+0x366>
				pixel[x0][0] = y0;
 8003572:	f9b7 26c2 	ldrsh.w	r2, [r7, #1730]	@ 0x6c2
 8003576:	f8b7 16c0 	ldrh.w	r1, [r7, #1728]	@ 0x6c0
 800357a:	f507 63da 	add.w	r3, r7, #1744	@ 0x6d0
 800357e:	f5a3 63d8 	sub.w	r3, r3, #1728	@ 0x6c0
 8003582:	f823 1022 	strh.w	r1, [r3, r2, lsl #2]

			if (pixel[x0][1] < y0)
 8003586:	f9b7 36c2 	ldrsh.w	r3, [r7, #1730]	@ 0x6c2
 800358a:	f507 62da 	add.w	r2, r7, #1744	@ 0x6d0
 800358e:	f5a2 62d8 	sub.w	r2, r2, #1728	@ 0x6c0
 8003592:	009b      	lsls	r3, r3, #2
 8003594:	4413      	add	r3, r2
 8003596:	885b      	ldrh	r3, [r3, #2]
 8003598:	461a      	mov	r2, r3
 800359a:	f9b7 36c0 	ldrsh.w	r3, [r7, #1728]	@ 0x6c0
 800359e:	429a      	cmp	r2, r3
 80035a0:	da0b      	bge.n	80035ba <drawSignal+0x39a>
				pixel[x0][1] = y0;
 80035a2:	f9b7 36c2 	ldrsh.w	r3, [r7, #1730]	@ 0x6c2
 80035a6:	f8b7 16c0 	ldrh.w	r1, [r7, #1728]	@ 0x6c0
 80035aa:	f507 62da 	add.w	r2, r7, #1744	@ 0x6d0
 80035ae:	f5a2 62d8 	sub.w	r2, r2, #1728	@ 0x6c0
 80035b2:	009b      	lsls	r3, r3, #2
 80035b4:	4413      	add	r3, r2
 80035b6:	460a      	mov	r2, r1
 80035b8:	805a      	strh	r2, [r3, #2]

			if (x0 == x1 && y0 == y1)
 80035ba:	f9b7 26c2 	ldrsh.w	r2, [r7, #1730]	@ 0x6c2
 80035be:	f9b7 36b2 	ldrsh.w	r3, [r7, #1714]	@ 0x6b2
 80035c2:	429a      	cmp	r2, r3
 80035c4:	d105      	bne.n	80035d2 <drawSignal+0x3b2>
 80035c6:	f9b7 26c0 	ldrsh.w	r2, [r7, #1728]	@ 0x6c0
 80035ca:	f9b7 36b0 	ldrsh.w	r3, [r7, #1712]	@ 0x6b0
 80035ce:	429a      	cmp	r2, r3
 80035d0:	d040      	beq.n	8003654 <drawSignal+0x434>
				break;

			int16_t e2 = 2 * error;
 80035d2:	f8b7 36be 	ldrh.w	r3, [r7, #1726]	@ 0x6be
 80035d6:	005b      	lsls	r3, r3, #1
 80035d8:	b29b      	uxth	r3, r3
 80035da:	f8a7 36a6 	strh.w	r3, [r7, #1702]	@ 0x6a6

			if (e2 >= dy) {
 80035de:	f9b7 26a6 	ldrsh.w	r2, [r7, #1702]	@ 0x6a6
 80035e2:	f9b7 36aa 	ldrsh.w	r3, [r7, #1706]	@ 0x6aa
 80035e6:	429a      	cmp	r2, r3
 80035e8:	db15      	blt.n	8003616 <drawSignal+0x3f6>
				if (x0 == x1)
 80035ea:	f9b7 26c2 	ldrsh.w	r2, [r7, #1730]	@ 0x6c2
 80035ee:	f9b7 36b2 	ldrsh.w	r3, [r7, #1714]	@ 0x6b2
 80035f2:	429a      	cmp	r2, r3
 80035f4:	d030      	beq.n	8003658 <drawSignal+0x438>
					break;

				error = error + dy;
 80035f6:	f8b7 26be 	ldrh.w	r2, [r7, #1726]	@ 0x6be
 80035fa:	f8b7 36aa 	ldrh.w	r3, [r7, #1706]	@ 0x6aa
 80035fe:	4413      	add	r3, r2
 8003600:	b29b      	uxth	r3, r3
 8003602:	f8a7 36be 	strh.w	r3, [r7, #1726]	@ 0x6be
				x0 = x0 + sx;
 8003606:	f8b7 26c2 	ldrh.w	r2, [r7, #1730]	@ 0x6c2
 800360a:	f8b7 36ac 	ldrh.w	r3, [r7, #1708]	@ 0x6ac
 800360e:	4413      	add	r3, r2
 8003610:	b29b      	uxth	r3, r3
 8003612:	f8a7 36c2 	strh.w	r3, [r7, #1730]	@ 0x6c2
			}

			if (e2 <= dx) {
 8003616:	f9b7 26a6 	ldrsh.w	r2, [r7, #1702]	@ 0x6a6
 800361a:	f9b7 36ae 	ldrsh.w	r3, [r7, #1710]	@ 0x6ae
 800361e:	429a      	cmp	r2, r3
 8003620:	dc9a      	bgt.n	8003558 <drawSignal+0x338>
				if (y0 == y1)
 8003622:	f9b7 26c0 	ldrsh.w	r2, [r7, #1728]	@ 0x6c0
 8003626:	f9b7 36b0 	ldrsh.w	r3, [r7, #1712]	@ 0x6b0
 800362a:	429a      	cmp	r2, r3
 800362c:	d016      	beq.n	800365c <drawSignal+0x43c>
					break;

				error = error + dx;
 800362e:	f8b7 26be 	ldrh.w	r2, [r7, #1726]	@ 0x6be
 8003632:	f8b7 36ae 	ldrh.w	r3, [r7, #1710]	@ 0x6ae
 8003636:	4413      	add	r3, r2
 8003638:	b29b      	uxth	r3, r3
 800363a:	f8a7 36be 	strh.w	r3, [r7, #1726]	@ 0x6be
				y0 = y0 + sy;
 800363e:	f8b7 26c0 	ldrh.w	r2, [r7, #1728]	@ 0x6c0
 8003642:	f8b7 36a8 	ldrh.w	r3, [r7, #1704]	@ 0x6a8
 8003646:	4413      	add	r3, r2
 8003648:	b29b      	uxth	r3, r3
 800364a:	f8a7 36c0 	strh.w	r3, [r7, #1728]	@ 0x6c0
		while (1) {
 800364e:	e783      	b.n	8003558 <drawSignal+0x338>
			continue;
 8003650:	bf00      	nop
 8003652:	e004      	b.n	800365e <drawSignal+0x43e>
				break;
 8003654:	bf00      	nop
 8003656:	e002      	b.n	800365e <drawSignal+0x43e>
					break;
 8003658:	bf00      	nop
 800365a:	e000      	b.n	800365e <drawSignal+0x43e>
					break;
 800365c:	bf00      	nop
	for (uint16_t i = 1; i <= 279; i++) {
 800365e:	f8b7 36c4 	ldrh.w	r3, [r7, #1732]	@ 0x6c4
 8003662:	3301      	adds	r3, #1
 8003664:	f8a7 36c4 	strh.w	r3, [r7, #1732]	@ 0x6c4
 8003668:	f8b7 36c4 	ldrh.w	r3, [r7, #1732]	@ 0x6c4
 800366c:	f5b3 7f8c 	cmp.w	r3, #280	@ 0x118
 8003670:	f4ff aede 	bcc.w	8003430 <drawSignal+0x210>
			}
		}
	}

	for (uint16_t i = 1; i <= 279; i++) {
 8003674:	2301      	movs	r3, #1
 8003676:	f8a7 36bc 	strh.w	r3, [r7, #1724]	@ 0x6bc
 800367a:	e108      	b.n	800388e <drawSignal+0x66e>
		uint16_t min = pixel[i][0] < pixel_dirty[i][0] ? pixel[i][0] : pixel_dirty[i][0];
 800367c:	f8b7 36bc 	ldrh.w	r3, [r7, #1724]	@ 0x6bc
 8003680:	009b      	lsls	r3, r3, #2
 8003682:	f8d7 26e0 	ldr.w	r2, [r7, #1760]	@ 0x6e0
 8003686:	4413      	add	r3, r2
 8003688:	881a      	ldrh	r2, [r3, #0]
 800368a:	f8b7 16bc 	ldrh.w	r1, [r7, #1724]	@ 0x6bc
 800368e:	f507 63da 	add.w	r3, r7, #1744	@ 0x6d0
 8003692:	f5a3 63d8 	sub.w	r3, r3, #1728	@ 0x6c0
 8003696:	f833 3021 	ldrh.w	r3, [r3, r1, lsl #2]
 800369a:	4293      	cmp	r3, r2
 800369c:	bf28      	it	cs
 800369e:	4613      	movcs	r3, r2
 80036a0:	f8a7 36b6 	strh.w	r3, [r7, #1718]	@ 0x6b6
		uint16_t max = pixel[i][1] > pixel_dirty[i][1] ? pixel[i][1] : pixel_dirty[i][1];
 80036a4:	f8b7 36bc 	ldrh.w	r3, [r7, #1724]	@ 0x6bc
 80036a8:	009b      	lsls	r3, r3, #2
 80036aa:	f8d7 26e0 	ldr.w	r2, [r7, #1760]	@ 0x6e0
 80036ae:	4413      	add	r3, r2
 80036b0:	885a      	ldrh	r2, [r3, #2]
 80036b2:	f8b7 36bc 	ldrh.w	r3, [r7, #1724]	@ 0x6bc
 80036b6:	f507 61da 	add.w	r1, r7, #1744	@ 0x6d0
 80036ba:	f5a1 61d8 	sub.w	r1, r1, #1728	@ 0x6c0
 80036be:	009b      	lsls	r3, r3, #2
 80036c0:	440b      	add	r3, r1
 80036c2:	885b      	ldrh	r3, [r3, #2]
 80036c4:	4293      	cmp	r3, r2
 80036c6:	bf38      	it	cc
 80036c8:	4613      	movcc	r3, r2
 80036ca:	f8a7 36b4 	strh.w	r3, [r7, #1716]	@ 0x6b4

		for (uint16_t j = min; j <= max; j++) {
 80036ce:	f8b7 36b6 	ldrh.w	r3, [r7, #1718]	@ 0x6b6
 80036d2:	f8a7 36ba 	strh.w	r3, [r7, #1722]	@ 0x6ba
 80036d6:	e0af      	b.n	8003838 <drawSignal+0x618>
			uint8_t draw = 0;
 80036d8:	2300      	movs	r3, #0
 80036da:	f887 36b9 	strb.w	r3, [r7, #1721]	@ 0x6b9
			if (j >= pixel[i][0] && j <= pixel[i][1])
 80036de:	f8b7 26bc 	ldrh.w	r2, [r7, #1724]	@ 0x6bc
 80036e2:	f507 63da 	add.w	r3, r7, #1744	@ 0x6d0
 80036e6:	f5a3 63d8 	sub.w	r3, r3, #1728	@ 0x6c0
 80036ea:	f833 3022 	ldrh.w	r3, [r3, r2, lsl #2]
 80036ee:	f8b7 26ba 	ldrh.w	r2, [r7, #1722]	@ 0x6ba
 80036f2:	429a      	cmp	r2, r3
 80036f4:	d30f      	bcc.n	8003716 <drawSignal+0x4f6>
 80036f6:	f8b7 36bc 	ldrh.w	r3, [r7, #1724]	@ 0x6bc
 80036fa:	f507 62da 	add.w	r2, r7, #1744	@ 0x6d0
 80036fe:	f5a2 62d8 	sub.w	r2, r2, #1728	@ 0x6c0
 8003702:	009b      	lsls	r3, r3, #2
 8003704:	4413      	add	r3, r2
 8003706:	885b      	ldrh	r3, [r3, #2]
 8003708:	f8b7 26ba 	ldrh.w	r2, [r7, #1722]	@ 0x6ba
 800370c:	429a      	cmp	r2, r3
 800370e:	d802      	bhi.n	8003716 <drawSignal+0x4f6>
				draw = 1;
 8003710:	2301      	movs	r3, #1
 8003712:	f887 36b9 	strb.w	r3, [r7, #1721]	@ 0x6b9

			uint8_t clear = 0;
 8003716:	2300      	movs	r3, #0
 8003718:	f887 36b8 	strb.w	r3, [r7, #1720]	@ 0x6b8
			if (j >= pixel_dirty[i][0] && j <= pixel_dirty[i][1])
 800371c:	f8b7 36bc 	ldrh.w	r3, [r7, #1724]	@ 0x6bc
 8003720:	009b      	lsls	r3, r3, #2
 8003722:	f8d7 26e0 	ldr.w	r2, [r7, #1760]	@ 0x6e0
 8003726:	4413      	add	r3, r2
 8003728:	881b      	ldrh	r3, [r3, #0]
 800372a:	f8b7 26ba 	ldrh.w	r2, [r7, #1722]	@ 0x6ba
 800372e:	429a      	cmp	r2, r3
 8003730:	d30d      	bcc.n	800374e <drawSignal+0x52e>
 8003732:	f8b7 36bc 	ldrh.w	r3, [r7, #1724]	@ 0x6bc
 8003736:	009b      	lsls	r3, r3, #2
 8003738:	f8d7 26e0 	ldr.w	r2, [r7, #1760]	@ 0x6e0
 800373c:	4413      	add	r3, r2
 800373e:	885b      	ldrh	r3, [r3, #2]
 8003740:	f8b7 26ba 	ldrh.w	r2, [r7, #1722]	@ 0x6ba
 8003744:	429a      	cmp	r2, r3
 8003746:	d802      	bhi.n	800374e <drawSignal+0x52e>
				clear = 1;
 8003748:	2301      	movs	r3, #1
 800374a:	f887 36b8 	strb.w	r3, [r7, #1720]	@ 0x6b8

			if (draw && !clear && j > 21)
 800374e:	f897 36b9 	ldrb.w	r3, [r7, #1721]	@ 0x6b9
 8003752:	2b00      	cmp	r3, #0
 8003754:	d016      	beq.n	8003784 <drawSignal+0x564>
 8003756:	f897 36b8 	ldrb.w	r3, [r7, #1720]	@ 0x6b8
 800375a:	2b00      	cmp	r3, #0
 800375c:	d112      	bne.n	8003784 <drawSignal+0x564>
 800375e:	f8b7 36ba 	ldrh.w	r3, [r7, #1722]	@ 0x6ba
 8003762:	2b15      	cmp	r3, #21
 8003764:	d90e      	bls.n	8003784 <drawSignal+0x564>
				ILI9341_DrawPixel(display, i + 20, j, color);
 8003766:	f8b7 36bc 	ldrh.w	r3, [r7, #1724]	@ 0x6bc
 800376a:	3314      	adds	r3, #20
 800376c:	b299      	uxth	r1, r3
 800376e:	f8b7 36e8 	ldrh.w	r3, [r7, #1768]	@ 0x6e8
 8003772:	f8b7 26ba 	ldrh.w	r2, [r7, #1722]	@ 0x6ba
 8003776:	f507 60da 	add.w	r0, r7, #1744	@ 0x6d0
 800377a:	f2a0 60c4 	subw	r0, r0, #1732	@ 0x6c4
 800377e:	6800      	ldr	r0, [r0, #0]
 8003780:	f7fe fac0 	bl	8001d04 <ILI9341_DrawPixel>

			if (!draw && clear) {
 8003784:	f897 36b9 	ldrb.w	r3, [r7, #1721]	@ 0x6b9
 8003788:	2b00      	cmp	r3, #0
 800378a:	d150      	bne.n	800382e <drawSignal+0x60e>
 800378c:	f897 36b8 	ldrb.w	r3, [r7, #1720]	@ 0x6b8
 8003790:	2b00      	cmp	r3, #0
 8003792:	d04c      	beq.n	800382e <drawSignal+0x60e>
				if (((i % 25) == 0 && (j % 2) == 0) || ((i % 2) == 0 && ((j - 20) % 25) == 0))
 8003794:	f8b7 26bc 	ldrh.w	r2, [r7, #1724]	@ 0x6bc
 8003798:	4b43      	ldr	r3, [pc, #268]	@ (80038a8 <drawSignal+0x688>)
 800379a:	fba3 1302 	umull	r1, r3, r3, r2
 800379e:	08d9      	lsrs	r1, r3, #3
 80037a0:	460b      	mov	r3, r1
 80037a2:	009b      	lsls	r3, r3, #2
 80037a4:	440b      	add	r3, r1
 80037a6:	0099      	lsls	r1, r3, #2
 80037a8:	440b      	add	r3, r1
 80037aa:	1ad3      	subs	r3, r2, r3
 80037ac:	b29b      	uxth	r3, r3
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d106      	bne.n	80037c0 <drawSignal+0x5a0>
 80037b2:	f8b7 36ba 	ldrh.w	r3, [r7, #1722]	@ 0x6ba
 80037b6:	f003 0301 	and.w	r3, r3, #1
 80037ba:	b29b      	uxth	r3, r3
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d018      	beq.n	80037f2 <drawSignal+0x5d2>
 80037c0:	f8b7 36bc 	ldrh.w	r3, [r7, #1724]	@ 0x6bc
 80037c4:	f003 0301 	and.w	r3, r3, #1
 80037c8:	b29b      	uxth	r3, r3
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d121      	bne.n	8003812 <drawSignal+0x5f2>
 80037ce:	f8b7 36ba 	ldrh.w	r3, [r7, #1722]	@ 0x6ba
 80037d2:	f1a3 0114 	sub.w	r1, r3, #20
 80037d6:	4b34      	ldr	r3, [pc, #208]	@ (80038a8 <drawSignal+0x688>)
 80037d8:	fb83 2301 	smull	r2, r3, r3, r1
 80037dc:	10da      	asrs	r2, r3, #3
 80037de:	17cb      	asrs	r3, r1, #31
 80037e0:	1ad2      	subs	r2, r2, r3
 80037e2:	4613      	mov	r3, r2
 80037e4:	009b      	lsls	r3, r3, #2
 80037e6:	4413      	add	r3, r2
 80037e8:	009a      	lsls	r2, r3, #2
 80037ea:	4413      	add	r3, r2
 80037ec:	1aca      	subs	r2, r1, r3
 80037ee:	2a00      	cmp	r2, #0
 80037f0:	d10f      	bne.n	8003812 <drawSignal+0x5f2>
					ILI9341_DrawPixel(display, i + 20, j,  ILI9341_GRAY);
 80037f2:	f8b7 36bc 	ldrh.w	r3, [r7, #1724]	@ 0x6bc
 80037f6:	3314      	adds	r3, #20
 80037f8:	b299      	uxth	r1, r3
 80037fa:	f8b7 26ba 	ldrh.w	r2, [r7, #1722]	@ 0x6ba
 80037fe:	f507 63da 	add.w	r3, r7, #1744	@ 0x6d0
 8003802:	f2a3 60c4 	subw	r0, r3, #1732	@ 0x6c4
 8003806:	f245 238a 	movw	r3, #21130	@ 0x528a
 800380a:	6800      	ldr	r0, [r0, #0]
 800380c:	f7fe fa7a 	bl	8001d04 <ILI9341_DrawPixel>
 8003810:	e00d      	b.n	800382e <drawSignal+0x60e>
				else
					ILI9341_DrawPixel(display, i + 20, j, ILI9341_BLACK);
 8003812:	f8b7 36bc 	ldrh.w	r3, [r7, #1724]	@ 0x6bc
 8003816:	3314      	adds	r3, #20
 8003818:	b299      	uxth	r1, r3
 800381a:	f8b7 26ba 	ldrh.w	r2, [r7, #1722]	@ 0x6ba
 800381e:	f507 63da 	add.w	r3, r7, #1744	@ 0x6d0
 8003822:	f2a3 60c4 	subw	r0, r3, #1732	@ 0x6c4
 8003826:	2300      	movs	r3, #0
 8003828:	6800      	ldr	r0, [r0, #0]
 800382a:	f7fe fa6b 	bl	8001d04 <ILI9341_DrawPixel>
		for (uint16_t j = min; j <= max; j++) {
 800382e:	f8b7 36ba 	ldrh.w	r3, [r7, #1722]	@ 0x6ba
 8003832:	3301      	adds	r3, #1
 8003834:	f8a7 36ba 	strh.w	r3, [r7, #1722]	@ 0x6ba
 8003838:	f8b7 26ba 	ldrh.w	r2, [r7, #1722]	@ 0x6ba
 800383c:	f8b7 36b4 	ldrh.w	r3, [r7, #1716]	@ 0x6b4
 8003840:	429a      	cmp	r2, r3
 8003842:	f67f af49 	bls.w	80036d8 <drawSignal+0x4b8>
			}
		}

		pixel_dirty[i][0] = pixel[i][0];
 8003846:	f8b7 16bc 	ldrh.w	r1, [r7, #1724]	@ 0x6bc
 800384a:	f8b7 36bc 	ldrh.w	r3, [r7, #1724]	@ 0x6bc
 800384e:	009b      	lsls	r3, r3, #2
 8003850:	f8d7 26e0 	ldr.w	r2, [r7, #1760]	@ 0x6e0
 8003854:	4413      	add	r3, r2
 8003856:	f507 62da 	add.w	r2, r7, #1744	@ 0x6d0
 800385a:	f5a2 62d8 	sub.w	r2, r2, #1728	@ 0x6c0
 800385e:	f832 2021 	ldrh.w	r2, [r2, r1, lsl #2]
 8003862:	801a      	strh	r2, [r3, #0]
		pixel_dirty[i][1] = pixel[i][1];
 8003864:	f8b7 36bc 	ldrh.w	r3, [r7, #1724]	@ 0x6bc
 8003868:	f8b7 26bc 	ldrh.w	r2, [r7, #1724]	@ 0x6bc
 800386c:	0092      	lsls	r2, r2, #2
 800386e:	f8d7 16e0 	ldr.w	r1, [r7, #1760]	@ 0x6e0
 8003872:	440a      	add	r2, r1
 8003874:	f507 61da 	add.w	r1, r7, #1744	@ 0x6d0
 8003878:	f5a1 61d8 	sub.w	r1, r1, #1728	@ 0x6c0
 800387c:	009b      	lsls	r3, r3, #2
 800387e:	440b      	add	r3, r1
 8003880:	885b      	ldrh	r3, [r3, #2]
 8003882:	8053      	strh	r3, [r2, #2]
	for (uint16_t i = 1; i <= 279; i++) {
 8003884:	f8b7 36bc 	ldrh.w	r3, [r7, #1724]	@ 0x6bc
 8003888:	3301      	adds	r3, #1
 800388a:	f8a7 36bc 	strh.w	r3, [r7, #1724]	@ 0x6bc
 800388e:	f8b7 36bc 	ldrh.w	r3, [r7, #1724]	@ 0x6bc
 8003892:	f5b3 7f8c 	cmp.w	r3, #280	@ 0x118
 8003896:	f4ff aef1 	bcc.w	800367c <drawSignal+0x45c>
 800389a:	e000      	b.n	800389e <drawSignal+0x67e>
			return;
 800389c:	bf00      	nop
	}
}
 800389e:	f207 67d4 	addw	r7, r7, #1748	@ 0x6d4
 80038a2:	46bd      	mov	sp, r7
 80038a4:	bd90      	pop	{r4, r7, pc}
 80038a6:	bf00      	nop
 80038a8:	51eb851f 	.word	0x51eb851f

080038ac <clearSignal>:

static void clearSignal(ILI9341TypeDef *display, uint16_t pixel_dirty[280][2])
{
 80038ac:	b580      	push	{r7, lr}
 80038ae:	b084      	sub	sp, #16
 80038b0:	af00      	add	r7, sp, #0
 80038b2:	6078      	str	r0, [r7, #4]
 80038b4:	6039      	str	r1, [r7, #0]
	for (uint16_t i = 1; i <= 279; i++) {
 80038b6:	2301      	movs	r3, #1
 80038b8:	81fb      	strh	r3, [r7, #14]
 80038ba:	e05d      	b.n	8003978 <clearSignal+0xcc>
		for (uint16_t j = pixel_dirty[i][0]; j <= pixel_dirty[i][1]; j++) {
 80038bc:	89fb      	ldrh	r3, [r7, #14]
 80038be:	009b      	lsls	r3, r3, #2
 80038c0:	683a      	ldr	r2, [r7, #0]
 80038c2:	4413      	add	r3, r2
 80038c4:	881b      	ldrh	r3, [r3, #0]
 80038c6:	81bb      	strh	r3, [r7, #12]
 80038c8:	e03f      	b.n	800394a <clearSignal+0x9e>
			if (((i % 25) == 0 && (j % 2) == 0) || ((i % 2) == 0 && ((j - 20) % 25) == 0))
 80038ca:	89fa      	ldrh	r2, [r7, #14]
 80038cc:	4b2f      	ldr	r3, [pc, #188]	@ (800398c <clearSignal+0xe0>)
 80038ce:	fba3 1302 	umull	r1, r3, r3, r2
 80038d2:	08d9      	lsrs	r1, r3, #3
 80038d4:	460b      	mov	r3, r1
 80038d6:	009b      	lsls	r3, r3, #2
 80038d8:	440b      	add	r3, r1
 80038da:	0099      	lsls	r1, r3, #2
 80038dc:	440b      	add	r3, r1
 80038de:	1ad3      	subs	r3, r2, r3
 80038e0:	b29b      	uxth	r3, r3
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d105      	bne.n	80038f2 <clearSignal+0x46>
 80038e6:	89bb      	ldrh	r3, [r7, #12]
 80038e8:	f003 0301 	and.w	r3, r3, #1
 80038ec:	b29b      	uxth	r3, r3
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d016      	beq.n	8003920 <clearSignal+0x74>
 80038f2:	89fb      	ldrh	r3, [r7, #14]
 80038f4:	f003 0301 	and.w	r3, r3, #1
 80038f8:	b29b      	uxth	r3, r3
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d11a      	bne.n	8003934 <clearSignal+0x88>
 80038fe:	89bb      	ldrh	r3, [r7, #12]
 8003900:	f1a3 0114 	sub.w	r1, r3, #20
 8003904:	4b21      	ldr	r3, [pc, #132]	@ (800398c <clearSignal+0xe0>)
 8003906:	fb83 2301 	smull	r2, r3, r3, r1
 800390a:	10da      	asrs	r2, r3, #3
 800390c:	17cb      	asrs	r3, r1, #31
 800390e:	1ad2      	subs	r2, r2, r3
 8003910:	4613      	mov	r3, r2
 8003912:	009b      	lsls	r3, r3, #2
 8003914:	4413      	add	r3, r2
 8003916:	009a      	lsls	r2, r3, #2
 8003918:	4413      	add	r3, r2
 800391a:	1aca      	subs	r2, r1, r3
 800391c:	2a00      	cmp	r2, #0
 800391e:	d109      	bne.n	8003934 <clearSignal+0x88>
				ILI9341_DrawPixel(display, i + 20, j,  ILI9341_GRAY);
 8003920:	89fb      	ldrh	r3, [r7, #14]
 8003922:	3314      	adds	r3, #20
 8003924:	b299      	uxth	r1, r3
 8003926:	89ba      	ldrh	r2, [r7, #12]
 8003928:	f245 238a 	movw	r3, #21130	@ 0x528a
 800392c:	6878      	ldr	r0, [r7, #4]
 800392e:	f7fe f9e9 	bl	8001d04 <ILI9341_DrawPixel>
 8003932:	e007      	b.n	8003944 <clearSignal+0x98>
			else
				ILI9341_DrawPixel(display, i + 20, j, ILI9341_BLACK);
 8003934:	89fb      	ldrh	r3, [r7, #14]
 8003936:	3314      	adds	r3, #20
 8003938:	b299      	uxth	r1, r3
 800393a:	89ba      	ldrh	r2, [r7, #12]
 800393c:	2300      	movs	r3, #0
 800393e:	6878      	ldr	r0, [r7, #4]
 8003940:	f7fe f9e0 	bl	8001d04 <ILI9341_DrawPixel>
		for (uint16_t j = pixel_dirty[i][0]; j <= pixel_dirty[i][1]; j++) {
 8003944:	89bb      	ldrh	r3, [r7, #12]
 8003946:	3301      	adds	r3, #1
 8003948:	81bb      	strh	r3, [r7, #12]
 800394a:	89fb      	ldrh	r3, [r7, #14]
 800394c:	009b      	lsls	r3, r3, #2
 800394e:	683a      	ldr	r2, [r7, #0]
 8003950:	4413      	add	r3, r2
 8003952:	885b      	ldrh	r3, [r3, #2]
 8003954:	89ba      	ldrh	r2, [r7, #12]
 8003956:	429a      	cmp	r2, r3
 8003958:	d9b7      	bls.n	80038ca <clearSignal+0x1e>
		}

		pixel_dirty[i][0] = 0;
 800395a:	89fb      	ldrh	r3, [r7, #14]
 800395c:	009b      	lsls	r3, r3, #2
 800395e:	683a      	ldr	r2, [r7, #0]
 8003960:	4413      	add	r3, r2
 8003962:	2200      	movs	r2, #0
 8003964:	801a      	strh	r2, [r3, #0]
		pixel_dirty[i][1] = 0;
 8003966:	89fb      	ldrh	r3, [r7, #14]
 8003968:	009b      	lsls	r3, r3, #2
 800396a:	683a      	ldr	r2, [r7, #0]
 800396c:	4413      	add	r3, r2
 800396e:	2200      	movs	r2, #0
 8003970:	805a      	strh	r2, [r3, #2]
	for (uint16_t i = 1; i <= 279; i++) {
 8003972:	89fb      	ldrh	r3, [r7, #14]
 8003974:	3301      	adds	r3, #1
 8003976:	81fb      	strh	r3, [r7, #14]
 8003978:	89fb      	ldrh	r3, [r7, #14]
 800397a:	f5b3 7f8c 	cmp.w	r3, #280	@ 0x118
 800397e:	d39d      	bcc.n	80038bc <clearSignal+0x10>
	}
}
 8003980:	bf00      	nop
 8003982:	bf00      	nop
 8003984:	3710      	adds	r7, #16
 8003986:	46bd      	mov	sp, r7
 8003988:	bd80      	pop	{r7, pc}
 800398a:	bf00      	nop
 800398c:	51eb851f 	.word	0x51eb851f

08003990 <drawSignalParam>:

static void drawSignalParam(ILI9341TypeDef *display, char *string, size_t size, uint16_t adc_max, uint16_t adc_min, uint32_t adc_period)
{
 8003990:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003994:	b096      	sub	sp, #88	@ 0x58
 8003996:	af0c      	add	r7, sp, #48	@ 0x30
 8003998:	60f8      	str	r0, [r7, #12]
 800399a:	60b9      	str	r1, [r7, #8]
 800399c:	607a      	str	r2, [r7, #4]
 800399e:	807b      	strh	r3, [r7, #2]
	float max  = (float)(adc_max) * 3300000.0f / 4096.0f;
 80039a0:	887b      	ldrh	r3, [r7, #2]
 80039a2:	ee07 3a90 	vmov	s15, r3
 80039a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80039aa:	ed9f 7a7f 	vldr	s14, [pc, #508]	@ 8003ba8 <drawSignalParam+0x218>
 80039ae:	ee27 7a87 	vmul.f32	s14, s15, s14
 80039b2:	eddf 6a7e 	vldr	s13, [pc, #504]	@ 8003bac <drawSignalParam+0x21c>
 80039b6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80039ba:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
	float min  = (float)(adc_min) * 3300000.0f / 4096.0f;
 80039be:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80039c2:	ee07 3a90 	vmov	s15, r3
 80039c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80039ca:	ed9f 7a77 	vldr	s14, [pc, #476]	@ 8003ba8 <drawSignalParam+0x218>
 80039ce:	ee27 7a87 	vmul.f32	s14, s15, s14
 80039d2:	eddf 6a76 	vldr	s13, [pc, #472]	@ 8003bac <drawSignalParam+0x21c>
 80039d6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80039da:	edc7 7a08 	vstr	s15, [r7, #32]
	float freq = 1.0f / ((float)(adc_period) / 1000000.0f);
 80039de:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80039e0:	ee07 3a90 	vmov	s15, r3
 80039e4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80039e8:	eddf 6a71 	vldr	s13, [pc, #452]	@ 8003bb0 <drawSignalParam+0x220>
 80039ec:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80039f0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80039f4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80039f8:	edc7 7a07 	vstr	s15, [r7, #28]
	char *max_postfix  = "";
 80039fc:	4b6d      	ldr	r3, [pc, #436]	@ (8003bb4 <drawSignalParam+0x224>)
 80039fe:	61bb      	str	r3, [r7, #24]
	char *min_postfix  = "";
 8003a00:	4b6c      	ldr	r3, [pc, #432]	@ (8003bb4 <drawSignalParam+0x224>)
 8003a02:	617b      	str	r3, [r7, #20]
	char *freq_postfix = "";
 8003a04:	4b6b      	ldr	r3, [pc, #428]	@ (8003bb4 <drawSignalParam+0x224>)
 8003a06:	613b      	str	r3, [r7, #16]

	if (max >= 1000000.0f) {
 8003a08:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8003a0c:	ed9f 7a68 	vldr	s14, [pc, #416]	@ 8003bb0 <drawSignalParam+0x220>
 8003a10:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003a14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a18:	db0a      	blt.n	8003a30 <drawSignalParam+0xa0>
		max /= 1000000.0f;
 8003a1a:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8003a1e:	eddf 6a64 	vldr	s13, [pc, #400]	@ 8003bb0 <drawSignalParam+0x220>
 8003a22:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003a26:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
		max_postfix = " V";
 8003a2a:	4b63      	ldr	r3, [pc, #396]	@ (8003bb8 <drawSignalParam+0x228>)
 8003a2c:	61bb      	str	r3, [r7, #24]
 8003a2e:	e015      	b.n	8003a5c <drawSignalParam+0xcc>
	} else if (max >= 1000.0f) {
 8003a30:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8003a34:	ed9f 7a61 	vldr	s14, [pc, #388]	@ 8003bbc <drawSignalParam+0x22c>
 8003a38:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003a3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a40:	db0a      	blt.n	8003a58 <drawSignalParam+0xc8>
		max /= 1000.0f;
 8003a42:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8003a46:	eddf 6a5d 	vldr	s13, [pc, #372]	@ 8003bbc <drawSignalParam+0x22c>
 8003a4a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003a4e:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
		max_postfix = "mV";
 8003a52:	4b5b      	ldr	r3, [pc, #364]	@ (8003bc0 <drawSignalParam+0x230>)
 8003a54:	61bb      	str	r3, [r7, #24]
 8003a56:	e001      	b.n	8003a5c <drawSignalParam+0xcc>
	} else
		max_postfix = "uV";
 8003a58:	4b5a      	ldr	r3, [pc, #360]	@ (8003bc4 <drawSignalParam+0x234>)
 8003a5a:	61bb      	str	r3, [r7, #24]

	if (min >= 1000000.0f) {
 8003a5c:	edd7 7a08 	vldr	s15, [r7, #32]
 8003a60:	ed9f 7a53 	vldr	s14, [pc, #332]	@ 8003bb0 <drawSignalParam+0x220>
 8003a64:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003a68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a6c:	db0a      	blt.n	8003a84 <drawSignalParam+0xf4>
		min /= 1000000.0f;
 8003a6e:	ed97 7a08 	vldr	s14, [r7, #32]
 8003a72:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8003bb0 <drawSignalParam+0x220>
 8003a76:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003a7a:	edc7 7a08 	vstr	s15, [r7, #32]
		min_postfix = " V";
 8003a7e:	4b4e      	ldr	r3, [pc, #312]	@ (8003bb8 <drawSignalParam+0x228>)
 8003a80:	617b      	str	r3, [r7, #20]
 8003a82:	e015      	b.n	8003ab0 <drawSignalParam+0x120>
	} else if (min >= 1000.0f) {
 8003a84:	edd7 7a08 	vldr	s15, [r7, #32]
 8003a88:	ed9f 7a4c 	vldr	s14, [pc, #304]	@ 8003bbc <drawSignalParam+0x22c>
 8003a8c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003a90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a94:	db0a      	blt.n	8003aac <drawSignalParam+0x11c>
		min /= 1000.0f;
 8003a96:	ed97 7a08 	vldr	s14, [r7, #32]
 8003a9a:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8003bbc <drawSignalParam+0x22c>
 8003a9e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003aa2:	edc7 7a08 	vstr	s15, [r7, #32]
		min_postfix = "mV";
 8003aa6:	4b46      	ldr	r3, [pc, #280]	@ (8003bc0 <drawSignalParam+0x230>)
 8003aa8:	617b      	str	r3, [r7, #20]
 8003aaa:	e001      	b.n	8003ab0 <drawSignalParam+0x120>
	} else
		min_postfix = "uV";
 8003aac:	4b45      	ldr	r3, [pc, #276]	@ (8003bc4 <drawSignalParam+0x234>)
 8003aae:	617b      	str	r3, [r7, #20]

	if (freq >= 1000000.0f) {
 8003ab0:	edd7 7a07 	vldr	s15, [r7, #28]
 8003ab4:	ed9f 7a3e 	vldr	s14, [pc, #248]	@ 8003bb0 <drawSignalParam+0x220>
 8003ab8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003abc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003ac0:	db0a      	blt.n	8003ad8 <drawSignalParam+0x148>
		freq /= 1000000.0f;
 8003ac2:	ed97 7a07 	vldr	s14, [r7, #28]
 8003ac6:	eddf 6a3a 	vldr	s13, [pc, #232]	@ 8003bb0 <drawSignalParam+0x220>
 8003aca:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003ace:	edc7 7a07 	vstr	s15, [r7, #28]
		freq_postfix = "MHz";
 8003ad2:	4b3d      	ldr	r3, [pc, #244]	@ (8003bc8 <drawSignalParam+0x238>)
 8003ad4:	613b      	str	r3, [r7, #16]
 8003ad6:	e015      	b.n	8003b04 <drawSignalParam+0x174>
	} else if (freq >= 1000.0f) {
 8003ad8:	edd7 7a07 	vldr	s15, [r7, #28]
 8003adc:	ed9f 7a37 	vldr	s14, [pc, #220]	@ 8003bbc <drawSignalParam+0x22c>
 8003ae0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003ae4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003ae8:	db0a      	blt.n	8003b00 <drawSignalParam+0x170>
		freq /= 1000.0f;
 8003aea:	ed97 7a07 	vldr	s14, [r7, #28]
 8003aee:	eddf 6a33 	vldr	s13, [pc, #204]	@ 8003bbc <drawSignalParam+0x22c>
 8003af2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003af6:	edc7 7a07 	vstr	s15, [r7, #28]
		freq_postfix = "kHz";
 8003afa:	4b34      	ldr	r3, [pc, #208]	@ (8003bcc <drawSignalParam+0x23c>)
 8003afc:	613b      	str	r3, [r7, #16]
 8003afe:	e001      	b.n	8003b04 <drawSignalParam+0x174>
	} else
		freq_postfix = " Hz";
 8003b00:	4b33      	ldr	r3, [pc, #204]	@ (8003bd0 <drawSignalParam+0x240>)
 8003b02:	613b      	str	r3, [r7, #16]

	if (adc_period != 0)
 8003b04:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d020      	beq.n	8003b4c <drawSignalParam+0x1bc>
		snprintf(string, size, "ampl:%3.1f%s~%3.1f%s freq:%3.0f%s  ", min, min_postfix, max, max_postfix, freq, freq_postfix);
 8003b0a:	6a38      	ldr	r0, [r7, #32]
 8003b0c:	f7fc fd34 	bl	8000578 <__aeabi_f2d>
 8003b10:	4604      	mov	r4, r0
 8003b12:	460d      	mov	r5, r1
 8003b14:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8003b16:	f7fc fd2f 	bl	8000578 <__aeabi_f2d>
 8003b1a:	4680      	mov	r8, r0
 8003b1c:	4689      	mov	r9, r1
 8003b1e:	69f8      	ldr	r0, [r7, #28]
 8003b20:	f7fc fd2a 	bl	8000578 <__aeabi_f2d>
 8003b24:	4602      	mov	r2, r0
 8003b26:	460b      	mov	r3, r1
 8003b28:	6939      	ldr	r1, [r7, #16]
 8003b2a:	910a      	str	r1, [sp, #40]	@ 0x28
 8003b2c:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8003b30:	69bb      	ldr	r3, [r7, #24]
 8003b32:	9306      	str	r3, [sp, #24]
 8003b34:	e9cd 8904 	strd	r8, r9, [sp, #16]
 8003b38:	697b      	ldr	r3, [r7, #20]
 8003b3a:	9302      	str	r3, [sp, #8]
 8003b3c:	e9cd 4500 	strd	r4, r5, [sp]
 8003b40:	4a24      	ldr	r2, [pc, #144]	@ (8003bd4 <drawSignalParam+0x244>)
 8003b42:	6879      	ldr	r1, [r7, #4]
 8003b44:	68b8      	ldr	r0, [r7, #8]
 8003b46:	f00c fc07 	bl	8010358 <sniprintf>
 8003b4a:	e016      	b.n	8003b7a <drawSignalParam+0x1ea>
	else
		snprintf(string, size, "ampl:%3.1f%s~%3.1f%s freq:??? Hz  ", min, min_postfix, max, max_postfix);
 8003b4c:	6a38      	ldr	r0, [r7, #32]
 8003b4e:	f7fc fd13 	bl	8000578 <__aeabi_f2d>
 8003b52:	4604      	mov	r4, r0
 8003b54:	460d      	mov	r5, r1
 8003b56:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8003b58:	f7fc fd0e 	bl	8000578 <__aeabi_f2d>
 8003b5c:	4602      	mov	r2, r0
 8003b5e:	460b      	mov	r3, r1
 8003b60:	69b9      	ldr	r1, [r7, #24]
 8003b62:	9106      	str	r1, [sp, #24]
 8003b64:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8003b68:	697b      	ldr	r3, [r7, #20]
 8003b6a:	9302      	str	r3, [sp, #8]
 8003b6c:	e9cd 4500 	strd	r4, r5, [sp]
 8003b70:	4a19      	ldr	r2, [pc, #100]	@ (8003bd8 <drawSignalParam+0x248>)
 8003b72:	6879      	ldr	r1, [r7, #4]
 8003b74:	68b8      	ldr	r0, [r7, #8]
 8003b76:	f00c fbef 	bl	8010358 <sniprintf>

	ILI9341_WriteString(display, 98, 225, string, Font_7x10, ILI9341_WHITE, ILI9341_BLACK);
 8003b7a:	2300      	movs	r3, #0
 8003b7c:	9303      	str	r3, [sp, #12]
 8003b7e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003b82:	9302      	str	r3, [sp, #8]
 8003b84:	4a15      	ldr	r2, [pc, #84]	@ (8003bdc <drawSignalParam+0x24c>)
 8003b86:	466b      	mov	r3, sp
 8003b88:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003b8c:	e883 0003 	stmia.w	r3, {r0, r1}
 8003b90:	68bb      	ldr	r3, [r7, #8]
 8003b92:	22e1      	movs	r2, #225	@ 0xe1
 8003b94:	2162      	movs	r1, #98	@ 0x62
 8003b96:	68f8      	ldr	r0, [r7, #12]
 8003b98:	f7fe fad7 	bl	800214a <ILI9341_WriteString>
}
 8003b9c:	bf00      	nop
 8003b9e:	3728      	adds	r7, #40	@ 0x28
 8003ba0:	46bd      	mov	sp, r7
 8003ba2:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8003ba6:	bf00      	nop
 8003ba8:	4a496a80 	.word	0x4a496a80
 8003bac:	45800000 	.word	0x45800000
 8003bb0:	49742400 	.word	0x49742400
 8003bb4:	08013d40 	.word	0x08013d40
 8003bb8:	08013d44 	.word	0x08013d44
 8003bbc:	447a0000 	.word	0x447a0000
 8003bc0:	08013d48 	.word	0x08013d48
 8003bc4:	08013d4c 	.word	0x08013d4c
 8003bc8:	08013d50 	.word	0x08013d50
 8003bcc:	08013d54 	.word	0x08013d54
 8003bd0:	08013d58 	.word	0x08013d58
 8003bd4:	08013d5c 	.word	0x08013d5c
 8003bd8:	08013d80 	.word	0x08013d80
 8003bdc:	20000000 	.word	0x20000000

08003be0 <Oscilloscope_Process>:

void Oscilloscope_Process(void)
{
 8003be0:	b5b0      	push	{r4, r5, r7, lr}
 8003be2:	f5ad 7d00 	sub.w	sp, sp, #512	@ 0x200
 8003be6:	af04      	add	r7, sp, #16
	// Draw axis
	if (event_axis) {
 8003be8:	4ba2      	ldr	r3, [pc, #648]	@ (8003e74 <Oscilloscope_Process+0x294>)
 8003bea:	781b      	ldrb	r3, [r3, #0]
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d005      	beq.n	8003bfc <Oscilloscope_Process+0x1c>
		drawAxis(&display);
 8003bf0:	48a1      	ldr	r0, [pc, #644]	@ (8003e78 <Oscilloscope_Process+0x298>)
 8003bf2:	f7ff f9c3 	bl	8002f7c <drawAxis>
		event_axis = 0;
 8003bf6:	4b9f      	ldr	r3, [pc, #636]	@ (8003e74 <Oscilloscope_Process+0x294>)
 8003bf8:	2200      	movs	r2, #0
 8003bfa:	701a      	strb	r2, [r3, #0]
	}

	uint8_t local_event_adc = 0;
 8003bfc:	2300      	movs	r3, #0
 8003bfe:	f887 31ef 	strb.w	r3, [r7, #495]	@ 0x1ef
	if (event_adc) {
 8003c02:	4b9e      	ldr	r3, [pc, #632]	@ (8003e7c <Oscilloscope_Process+0x29c>)
 8003c04:	781b      	ldrb	r3, [r3, #0]
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d005      	beq.n	8003c16 <Oscilloscope_Process+0x36>
		local_event_adc = 1;
 8003c0a:	2301      	movs	r3, #1
 8003c0c:	f887 31ef 	strb.w	r3, [r7, #495]	@ 0x1ef
		event_adc = 0;
 8003c10:	4b9a      	ldr	r3, [pc, #616]	@ (8003e7c <Oscilloscope_Process+0x29c>)
 8003c12:	2200      	movs	r2, #0
 8003c14:	701a      	strb	r2, [r3, #0]
	}

	// Draw signals
	if (local_event_adc) {
 8003c16:	f897 31ef 	ldrb.w	r3, [r7, #495]	@ 0x1ef
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d027      	beq.n	8003c6e <Oscilloscope_Process+0x8e>

		if (menu_channel0_enabled)
 8003c1e:	4b98      	ldr	r3, [pc, #608]	@ (8003e80 <Oscilloscope_Process+0x2a0>)
 8003c20:	781b      	ldrb	r3, [r3, #0]
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d00f      	beq.n	8003c46 <Oscilloscope_Process+0x66>
			drawSignal(&display, adc0_time, adc0, adc0_length, pixel_dirty0, cursor0, ILI9341_YELLOW);
 8003c26:	4b97      	ldr	r3, [pc, #604]	@ (8003e84 <Oscilloscope_Process+0x2a4>)
 8003c28:	681a      	ldr	r2, [r3, #0]
 8003c2a:	4b97      	ldr	r3, [pc, #604]	@ (8003e88 <Oscilloscope_Process+0x2a8>)
 8003c2c:	881b      	ldrh	r3, [r3, #0]
 8003c2e:	f64f 71e0 	movw	r1, #65504	@ 0xffe0
 8003c32:	9102      	str	r1, [sp, #8]
 8003c34:	9301      	str	r3, [sp, #4]
 8003c36:	4b95      	ldr	r3, [pc, #596]	@ (8003e8c <Oscilloscope_Process+0x2ac>)
 8003c38:	9300      	str	r3, [sp, #0]
 8003c3a:	4613      	mov	r3, r2
 8003c3c:	4a94      	ldr	r2, [pc, #592]	@ (8003e90 <Oscilloscope_Process+0x2b0>)
 8003c3e:	4995      	ldr	r1, [pc, #596]	@ (8003e94 <Oscilloscope_Process+0x2b4>)
 8003c40:	488d      	ldr	r0, [pc, #564]	@ (8003e78 <Oscilloscope_Process+0x298>)
 8003c42:	f7ff faed 	bl	8003220 <drawSignal>

		if (menu_channel1_enabled)
 8003c46:	4b94      	ldr	r3, [pc, #592]	@ (8003e98 <Oscilloscope_Process+0x2b8>)
 8003c48:	781b      	ldrb	r3, [r3, #0]
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d00f      	beq.n	8003c6e <Oscilloscope_Process+0x8e>
			drawSignal(&display, adc1_time, adc1, adc1_length, pixel_dirty1, cursor1, ILI9341_CYAN);
 8003c4e:	4b93      	ldr	r3, [pc, #588]	@ (8003e9c <Oscilloscope_Process+0x2bc>)
 8003c50:	681a      	ldr	r2, [r3, #0]
 8003c52:	4b93      	ldr	r3, [pc, #588]	@ (8003ea0 <Oscilloscope_Process+0x2c0>)
 8003c54:	881b      	ldrh	r3, [r3, #0]
 8003c56:	f240 71ff 	movw	r1, #2047	@ 0x7ff
 8003c5a:	9102      	str	r1, [sp, #8]
 8003c5c:	9301      	str	r3, [sp, #4]
 8003c5e:	4b91      	ldr	r3, [pc, #580]	@ (8003ea4 <Oscilloscope_Process+0x2c4>)
 8003c60:	9300      	str	r3, [sp, #0]
 8003c62:	4613      	mov	r3, r2
 8003c64:	4a90      	ldr	r2, [pc, #576]	@ (8003ea8 <Oscilloscope_Process+0x2c8>)
 8003c66:	4991      	ldr	r1, [pc, #580]	@ (8003eac <Oscilloscope_Process+0x2cc>)
 8003c68:	4883      	ldr	r0, [pc, #524]	@ (8003e78 <Oscilloscope_Process+0x298>)
 8003c6a:	f7ff fad9 	bl	8003220 <drawSignal>
	}

	  char string[255];

	// Draw FPS
	if (frames > 60) {
 8003c6e:	4b90      	ldr	r3, [pc, #576]	@ (8003eb0 <Oscilloscope_Process+0x2d0>)
 8003c70:	781b      	ldrb	r3, [r3, #0]
 8003c72:	2b3c      	cmp	r3, #60	@ 0x3c
 8003c74:	d934      	bls.n	8003ce0 <Oscilloscope_Process+0x100>
		snprintf(string, 255, "FPS: %5i", (int)(1000.0f / ((float)(HAL_GetTick() - frames_ticks) / 60.0f)));
 8003c76:	f001 fe61 	bl	800593c <HAL_GetTick>
 8003c7a:	4602      	mov	r2, r0
 8003c7c:	4b8d      	ldr	r3, [pc, #564]	@ (8003eb4 <Oscilloscope_Process+0x2d4>)
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	1ad3      	subs	r3, r2, r3
 8003c82:	ee07 3a90 	vmov	s15, r3
 8003c86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003c8a:	eddf 6a8b 	vldr	s13, [pc, #556]	@ 8003eb8 <Oscilloscope_Process+0x2d8>
 8003c8e:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8003c92:	eddf 6a8a 	vldr	s13, [pc, #552]	@ 8003ebc <Oscilloscope_Process+0x2dc>
 8003c96:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003c9a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003c9e:	f107 00cc 	add.w	r0, r7, #204	@ 0xcc
 8003ca2:	ee17 3a90 	vmov	r3, s15
 8003ca6:	4a86      	ldr	r2, [pc, #536]	@ (8003ec0 <Oscilloscope_Process+0x2e0>)
 8003ca8:	21ff      	movs	r1, #255	@ 0xff
 8003caa:	f00c fb55 	bl	8010358 <sniprintf>
		ILI9341_WriteString(&display, 225, 5, string, Font_7x10, ILI9341_WHITE, ILI9341_BLACK);
 8003cae:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8003cb2:	2200      	movs	r2, #0
 8003cb4:	9203      	str	r2, [sp, #12]
 8003cb6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003cba:	9202      	str	r2, [sp, #8]
 8003cbc:	4981      	ldr	r1, [pc, #516]	@ (8003ec4 <Oscilloscope_Process+0x2e4>)
 8003cbe:	466a      	mov	r2, sp
 8003cc0:	c903      	ldmia	r1, {r0, r1}
 8003cc2:	e882 0003 	stmia.w	r2, {r0, r1}
 8003cc6:	2205      	movs	r2, #5
 8003cc8:	21e1      	movs	r1, #225	@ 0xe1
 8003cca:	486b      	ldr	r0, [pc, #428]	@ (8003e78 <Oscilloscope_Process+0x298>)
 8003ccc:	f7fe fa3d 	bl	800214a <ILI9341_WriteString>

		frames = 0;
 8003cd0:	4b77      	ldr	r3, [pc, #476]	@ (8003eb0 <Oscilloscope_Process+0x2d0>)
 8003cd2:	2200      	movs	r2, #0
 8003cd4:	701a      	strb	r2, [r3, #0]
		frames_ticks = HAL_GetTick();
 8003cd6:	f001 fe31 	bl	800593c <HAL_GetTick>
 8003cda:	4603      	mov	r3, r0
 8003cdc:	4a75      	ldr	r2, [pc, #468]	@ (8003eb4 <Oscilloscope_Process+0x2d4>)
 8003cde:	6013      	str	r3, [r2, #0]
	}

	// Handle button events
	if (event_button0) {
 8003ce0:	4b79      	ldr	r3, [pc, #484]	@ (8003ec8 <Oscilloscope_Process+0x2e8>)
 8003ce2:	781b      	ldrb	r3, [r3, #0]
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d038      	beq.n	8003d5a <Oscilloscope_Process+0x17a>

		if (!menu_extended) {
 8003ce8:	4b78      	ldr	r3, [pc, #480]	@ (8003ecc <Oscilloscope_Process+0x2ec>)
 8003cea:	781b      	ldrb	r3, [r3, #0]
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d131      	bne.n	8003d54 <Oscilloscope_Process+0x174>
			ILI9341_Rectangle(&display, menu_selector_x, menu_selector_y, 38, 13, ILI9341_BLACK);
 8003cf0:	4b77      	ldr	r3, [pc, #476]	@ (8003ed0 <Oscilloscope_Process+0x2f0>)
 8003cf2:	8819      	ldrh	r1, [r3, #0]
 8003cf4:	4b77      	ldr	r3, [pc, #476]	@ (8003ed4 <Oscilloscope_Process+0x2f4>)
 8003cf6:	881a      	ldrh	r2, [r3, #0]
 8003cf8:	2300      	movs	r3, #0
 8003cfa:	9301      	str	r3, [sp, #4]
 8003cfc:	230d      	movs	r3, #13
 8003cfe:	9300      	str	r3, [sp, #0]
 8003d00:	2326      	movs	r3, #38	@ 0x26
 8003d02:	485d      	ldr	r0, [pc, #372]	@ (8003e78 <Oscilloscope_Process+0x298>)
 8003d04:	f7fe f966 	bl	8001fd4 <ILI9341_Rectangle>

			menu_selected_item++;
 8003d08:	4b73      	ldr	r3, [pc, #460]	@ (8003ed8 <Oscilloscope_Process+0x2f8>)
 8003d0a:	f993 3000 	ldrsb.w	r3, [r3]
 8003d0e:	b2db      	uxtb	r3, r3
 8003d10:	3301      	adds	r3, #1
 8003d12:	b2db      	uxtb	r3, r3
 8003d14:	b25a      	sxtb	r2, r3
 8003d16:	4b70      	ldr	r3, [pc, #448]	@ (8003ed8 <Oscilloscope_Process+0x2f8>)
 8003d18:	701a      	strb	r2, [r3, #0]

			if (menu_selected_item > 3)
 8003d1a:	4b6f      	ldr	r3, [pc, #444]	@ (8003ed8 <Oscilloscope_Process+0x2f8>)
 8003d1c:	f993 3000 	ldrsb.w	r3, [r3]
 8003d20:	2b03      	cmp	r3, #3
 8003d22:	dd02      	ble.n	8003d2a <Oscilloscope_Process+0x14a>
				menu_selected_item = 2;
 8003d24:	4b6c      	ldr	r3, [pc, #432]	@ (8003ed8 <Oscilloscope_Process+0x2f8>)
 8003d26:	2202      	movs	r2, #2
 8003d28:	701a      	strb	r2, [r3, #0]

			menu_selector_x = 20 + 38 * menu_selected_item;
 8003d2a:	4b6b      	ldr	r3, [pc, #428]	@ (8003ed8 <Oscilloscope_Process+0x2f8>)
 8003d2c:	f993 3000 	ldrsb.w	r3, [r3]
 8003d30:	b29b      	uxth	r3, r3
 8003d32:	461a      	mov	r2, r3
 8003d34:	00d2      	lsls	r2, r2, #3
 8003d36:	441a      	add	r2, r3
 8003d38:	0052      	lsls	r2, r2, #1
 8003d3a:	4413      	add	r3, r2
 8003d3c:	005b      	lsls	r3, r3, #1
 8003d3e:	b29b      	uxth	r3, r3
 8003d40:	3314      	adds	r3, #20
 8003d42:	b29a      	uxth	r2, r3
 8003d44:	4b62      	ldr	r3, [pc, #392]	@ (8003ed0 <Oscilloscope_Process+0x2f0>)
 8003d46:	801a      	strh	r2, [r3, #0]
			menu_selector_y = 3;
 8003d48:	4b62      	ldr	r3, [pc, #392]	@ (8003ed4 <Oscilloscope_Process+0x2f4>)
 8003d4a:	2203      	movs	r2, #3
 8003d4c:	801a      	strh	r2, [r3, #0]

			event_selector = 1;
 8003d4e:	4b63      	ldr	r3, [pc, #396]	@ (8003edc <Oscilloscope_Process+0x2fc>)
 8003d50:	2201      	movs	r2, #1
 8003d52:	701a      	strb	r2, [r3, #0]
		}

		event_button0 = 0;
 8003d54:	4b5c      	ldr	r3, [pc, #368]	@ (8003ec8 <Oscilloscope_Process+0x2e8>)
 8003d56:	2200      	movs	r2, #0
 8003d58:	701a      	strb	r2, [r3, #0]
	}

	if (event_button1) {
 8003d5a:	4b61      	ldr	r3, [pc, #388]	@ (8003ee0 <Oscilloscope_Process+0x300>)
 8003d5c:	781b      	ldrb	r3, [r3, #0]
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d03e      	beq.n	8003de0 <Oscilloscope_Process+0x200>
		menu_extended = !menu_extended;
 8003d62:	4b5a      	ldr	r3, [pc, #360]	@ (8003ecc <Oscilloscope_Process+0x2ec>)
 8003d64:	781b      	ldrb	r3, [r3, #0]
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	bf0c      	ite	eq
 8003d6a:	2301      	moveq	r3, #1
 8003d6c:	2300      	movne	r3, #0
 8003d6e:	b2db      	uxtb	r3, r3
 8003d70:	461a      	mov	r2, r3
 8003d72:	4b56      	ldr	r3, [pc, #344]	@ (8003ecc <Oscilloscope_Process+0x2ec>)
 8003d74:	701a      	strb	r2, [r3, #0]

		if (!menu_extended) {
 8003d76:	4b55      	ldr	r3, [pc, #340]	@ (8003ecc <Oscilloscope_Process+0x2ec>)
 8003d78:	781b      	ldrb	r3, [r3, #0]
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d127      	bne.n	8003dce <Oscilloscope_Process+0x1ee>
			ILI9341_Rectangle(&display, menu_selector_x, menu_selector_y, 38, 13, ILI9341_BLACK);
 8003d7e:	4b54      	ldr	r3, [pc, #336]	@ (8003ed0 <Oscilloscope_Process+0x2f0>)
 8003d80:	8819      	ldrh	r1, [r3, #0]
 8003d82:	4b54      	ldr	r3, [pc, #336]	@ (8003ed4 <Oscilloscope_Process+0x2f4>)
 8003d84:	881a      	ldrh	r2, [r3, #0]
 8003d86:	2300      	movs	r3, #0
 8003d88:	9301      	str	r3, [sp, #4]
 8003d8a:	230d      	movs	r3, #13
 8003d8c:	9300      	str	r3, [sp, #0]
 8003d8e:	2326      	movs	r3, #38	@ 0x26
 8003d90:	4839      	ldr	r0, [pc, #228]	@ (8003e78 <Oscilloscope_Process+0x298>)
 8003d92:	f7fe f91f 	bl	8001fd4 <ILI9341_Rectangle>

			menu_selected_item = 2;
 8003d96:	4b50      	ldr	r3, [pc, #320]	@ (8003ed8 <Oscilloscope_Process+0x2f8>)
 8003d98:	2202      	movs	r2, #2
 8003d9a:	701a      	strb	r2, [r3, #0]

			menu_selector_x = 20 + 38 * menu_selected_item;
 8003d9c:	4b4e      	ldr	r3, [pc, #312]	@ (8003ed8 <Oscilloscope_Process+0x2f8>)
 8003d9e:	f993 3000 	ldrsb.w	r3, [r3]
 8003da2:	b29b      	uxth	r3, r3
 8003da4:	461a      	mov	r2, r3
 8003da6:	00d2      	lsls	r2, r2, #3
 8003da8:	441a      	add	r2, r3
 8003daa:	0052      	lsls	r2, r2, #1
 8003dac:	4413      	add	r3, r2
 8003dae:	005b      	lsls	r3, r3, #1
 8003db0:	b29b      	uxth	r3, r3
 8003db2:	3314      	adds	r3, #20
 8003db4:	b29a      	uxth	r2, r3
 8003db6:	4b46      	ldr	r3, [pc, #280]	@ (8003ed0 <Oscilloscope_Process+0x2f0>)
 8003db8:	801a      	strh	r2, [r3, #0]
			menu_selector_y = 3;
 8003dba:	4b46      	ldr	r3, [pc, #280]	@ (8003ed4 <Oscilloscope_Process+0x2f4>)
 8003dbc:	2203      	movs	r2, #3
 8003dbe:	801a      	strh	r2, [r3, #0]

			mode = 0;
 8003dc0:	4b48      	ldr	r3, [pc, #288]	@ (8003ee4 <Oscilloscope_Process+0x304>)
 8003dc2:	2200      	movs	r2, #0
 8003dc4:	701a      	strb	r2, [r3, #0]
			event_selector = 1;
 8003dc6:	4b45      	ldr	r3, [pc, #276]	@ (8003edc <Oscilloscope_Process+0x2fc>)
 8003dc8:	2201      	movs	r2, #1
 8003dca:	701a      	strb	r2, [r3, #0]
 8003dcc:	e002      	b.n	8003dd4 <Oscilloscope_Process+0x1f4>
		} else
			mode = 1;
 8003dce:	4b45      	ldr	r3, [pc, #276]	@ (8003ee4 <Oscilloscope_Process+0x304>)
 8003dd0:	2201      	movs	r2, #1
 8003dd2:	701a      	strb	r2, [r3, #0]

		event_mode = 1;
 8003dd4:	4b44      	ldr	r3, [pc, #272]	@ (8003ee8 <Oscilloscope_Process+0x308>)
 8003dd6:	2201      	movs	r2, #1
 8003dd8:	701a      	strb	r2, [r3, #0]
		event_button1 = 0;
 8003dda:	4b41      	ldr	r3, [pc, #260]	@ (8003ee0 <Oscilloscope_Process+0x300>)
 8003ddc:	2200      	movs	r2, #0
 8003dde:	701a      	strb	r2, [r3, #0]
	}

	if (event_button2) {
 8003de0:	4b42      	ldr	r3, [pc, #264]	@ (8003eec <Oscilloscope_Process+0x30c>)
 8003de2:	781b      	ldrb	r3, [r3, #0]
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d039      	beq.n	8003e5c <Oscilloscope_Process+0x27c>
		if (menu_selected_item == 2) {
 8003de8:	4b3b      	ldr	r3, [pc, #236]	@ (8003ed8 <Oscilloscope_Process+0x2f8>)
 8003dea:	f993 3000 	ldrsb.w	r3, [r3]
 8003dee:	2b02      	cmp	r3, #2
 8003df0:	d111      	bne.n	8003e16 <Oscilloscope_Process+0x236>
			menu_channel0_enabled = !menu_channel0_enabled;
 8003df2:	4b23      	ldr	r3, [pc, #140]	@ (8003e80 <Oscilloscope_Process+0x2a0>)
 8003df4:	781b      	ldrb	r3, [r3, #0]
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	bf0c      	ite	eq
 8003dfa:	2301      	moveq	r3, #1
 8003dfc:	2300      	movne	r3, #0
 8003dfe:	b2db      	uxtb	r3, r3
 8003e00:	461a      	mov	r2, r3
 8003e02:	4b1f      	ldr	r3, [pc, #124]	@ (8003e80 <Oscilloscope_Process+0x2a0>)
 8003e04:	701a      	strb	r2, [r3, #0]

			if (!menu_channel0_enabled)
 8003e06:	4b1e      	ldr	r3, [pc, #120]	@ (8003e80 <Oscilloscope_Process+0x2a0>)
 8003e08:	781b      	ldrb	r3, [r3, #0]
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d103      	bne.n	8003e16 <Oscilloscope_Process+0x236>
				clearSignal(&display, pixel_dirty0);
 8003e0e:	491f      	ldr	r1, [pc, #124]	@ (8003e8c <Oscilloscope_Process+0x2ac>)
 8003e10:	4819      	ldr	r0, [pc, #100]	@ (8003e78 <Oscilloscope_Process+0x298>)
 8003e12:	f7ff fd4b 	bl	80038ac <clearSignal>
		}

		if (menu_selected_item == 3) {
 8003e16:	4b30      	ldr	r3, [pc, #192]	@ (8003ed8 <Oscilloscope_Process+0x2f8>)
 8003e18:	f993 3000 	ldrsb.w	r3, [r3]
 8003e1c:	2b03      	cmp	r3, #3
 8003e1e:	d111      	bne.n	8003e44 <Oscilloscope_Process+0x264>
			menu_channel1_enabled = !menu_channel1_enabled;
 8003e20:	4b1d      	ldr	r3, [pc, #116]	@ (8003e98 <Oscilloscope_Process+0x2b8>)
 8003e22:	781b      	ldrb	r3, [r3, #0]
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	bf0c      	ite	eq
 8003e28:	2301      	moveq	r3, #1
 8003e2a:	2300      	movne	r3, #0
 8003e2c:	b2db      	uxtb	r3, r3
 8003e2e:	461a      	mov	r2, r3
 8003e30:	4b19      	ldr	r3, [pc, #100]	@ (8003e98 <Oscilloscope_Process+0x2b8>)
 8003e32:	701a      	strb	r2, [r3, #0]

			if (!menu_channel1_enabled)
 8003e34:	4b18      	ldr	r3, [pc, #96]	@ (8003e98 <Oscilloscope_Process+0x2b8>)
 8003e36:	781b      	ldrb	r3, [r3, #0]
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d103      	bne.n	8003e44 <Oscilloscope_Process+0x264>
				clearSignal(&display, pixel_dirty1);
 8003e3c:	4919      	ldr	r1, [pc, #100]	@ (8003ea4 <Oscilloscope_Process+0x2c4>)
 8003e3e:	480e      	ldr	r0, [pc, #56]	@ (8003e78 <Oscilloscope_Process+0x298>)
 8003e40:	f7ff fd34 	bl	80038ac <clearSignal>
		}

		event_cursor  = 1;
 8003e44:	4b2a      	ldr	r3, [pc, #168]	@ (8003ef0 <Oscilloscope_Process+0x310>)
 8003e46:	2201      	movs	r2, #1
 8003e48:	701a      	strb	r2, [r3, #0]
		event_trigger = 1;
 8003e4a:	4b2a      	ldr	r3, [pc, #168]	@ (8003ef4 <Oscilloscope_Process+0x314>)
 8003e4c:	2201      	movs	r2, #1
 8003e4e:	701a      	strb	r2, [r3, #0]
		event_channel = 1;
 8003e50:	4b29      	ldr	r3, [pc, #164]	@ (8003ef8 <Oscilloscope_Process+0x318>)
 8003e52:	2201      	movs	r2, #1
 8003e54:	701a      	strb	r2, [r3, #0]
		event_button2 = 0;
 8003e56:	4b25      	ldr	r3, [pc, #148]	@ (8003eec <Oscilloscope_Process+0x30c>)
 8003e58:	2200      	movs	r2, #0
 8003e5a:	701a      	strb	r2, [r3, #0]
	}

	// Handle UI redraw channel events
	if (event_channel) {
 8003e5c:	4b26      	ldr	r3, [pc, #152]	@ (8003ef8 <Oscilloscope_Process+0x318>)
 8003e5e:	781b      	ldrb	r3, [r3, #0]
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d07f      	beq.n	8003f64 <Oscilloscope_Process+0x384>
		uint16_t channel0_color = menu_channel0_enabled ? ILI9341_YELLOW  : ILI9341_COLOR565(60, 60, 0);
 8003e64:	4b06      	ldr	r3, [pc, #24]	@ (8003e80 <Oscilloscope_Process+0x2a0>)
 8003e66:	781b      	ldrb	r3, [r3, #0]
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d047      	beq.n	8003efc <Oscilloscope_Process+0x31c>
 8003e6c:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8003e70:	e046      	b.n	8003f00 <Oscilloscope_Process+0x320>
 8003e72:	bf00      	nop
 8003e74:	2000d100 	.word	0x2000d100
 8003e78:	2000f598 	.word	0x2000f598
 8003e7c:	20015615 	.word	0x20015615
 8003e80:	2000d10b 	.word	0x2000d10b
 8003e84:	2000f5f8 	.word	0x2000f5f8
 8003e88:	2000d0f4 	.word	0x2000d0f4
 8003e8c:	20015628 	.word	0x20015628
 8003e90:	20013614 	.word	0x20013614
 8003e94:	2000f614 	.word	0x2000f614
 8003e98:	2000d10c 	.word	0x2000d10c
 8003e9c:	2000f5fc 	.word	0x2000f5fc
 8003ea0:	2000d0f6 	.word	0x2000d0f6
 8003ea4:	20015a88 	.word	0x20015a88
 8003ea8:	20014614 	.word	0x20014614
 8003eac:	20011614 	.word	0x20011614
 8003eb0:	20015620 	.word	0x20015620
 8003eb4:	20015624 	.word	0x20015624
 8003eb8:	42700000 	.word	0x42700000
 8003ebc:	447a0000 	.word	0x447a0000
 8003ec0:	08013da4 	.word	0x08013da4
 8003ec4:	20000000 	.word	0x20000000
 8003ec8:	20015616 	.word	0x20015616
 8003ecc:	20015619 	.word	0x20015619
 8003ed0:	2000d10e 	.word	0x2000d10e
 8003ed4:	2000d110 	.word	0x2000d110
 8003ed8:	2000d10d 	.word	0x2000d10d
 8003edc:	2000d107 	.word	0x2000d107
 8003ee0:	20015617 	.word	0x20015617
 8003ee4:	2001561a 	.word	0x2001561a
 8003ee8:	2000d101 	.word	0x2000d101
 8003eec:	20015618 	.word	0x20015618
 8003ef0:	2000d102 	.word	0x2000d102
 8003ef4:	2000d103 	.word	0x2000d103
 8003ef8:	2000d104 	.word	0x2000d104
 8003efc:	f643 13e0 	movw	r3, #14816	@ 0x39e0
 8003f00:	f8a7 31de 	strh.w	r3, [r7, #478]	@ 0x1de
		uint16_t channel1_color = menu_channel1_enabled ? ILI9341_CYAN    : ILI9341_COLOR565(0, 60, 60);
 8003f04:	4b5e      	ldr	r3, [pc, #376]	@ (8004080 <Oscilloscope_Process+0x4a0>)
 8003f06:	781b      	ldrb	r3, [r3, #0]
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d002      	beq.n	8003f12 <Oscilloscope_Process+0x332>
 8003f0c:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 8003f10:	e001      	b.n	8003f16 <Oscilloscope_Process+0x336>
 8003f12:	f240 13e7 	movw	r3, #487	@ 0x1e7
 8003f16:	f8a7 31dc 	strh.w	r3, [r7, #476]	@ 0x1dc

		ILI9341_WriteString(&display, 110 - 12, 5, " CH1 ", Font_7x10, ILI9341_BLACK, channel0_color);
 8003f1a:	f8b7 31de 	ldrh.w	r3, [r7, #478]	@ 0x1de
 8003f1e:	9303      	str	r3, [sp, #12]
 8003f20:	2300      	movs	r3, #0
 8003f22:	9302      	str	r3, [sp, #8]
 8003f24:	4a57      	ldr	r2, [pc, #348]	@ (8004084 <Oscilloscope_Process+0x4a4>)
 8003f26:	466b      	mov	r3, sp
 8003f28:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003f2c:	e883 0003 	stmia.w	r3, {r0, r1}
 8003f30:	4b55      	ldr	r3, [pc, #340]	@ (8004088 <Oscilloscope_Process+0x4a8>)
 8003f32:	2205      	movs	r2, #5
 8003f34:	2162      	movs	r1, #98	@ 0x62
 8003f36:	4855      	ldr	r0, [pc, #340]	@ (800408c <Oscilloscope_Process+0x4ac>)
 8003f38:	f7fe f907 	bl	800214a <ILI9341_WriteString>
		ILI9341_WriteString(&display, 148 - 12, 5, " CH2 ", Font_7x10, ILI9341_BLACK, channel1_color);
 8003f3c:	f8b7 31dc 	ldrh.w	r3, [r7, #476]	@ 0x1dc
 8003f40:	9303      	str	r3, [sp, #12]
 8003f42:	2300      	movs	r3, #0
 8003f44:	9302      	str	r3, [sp, #8]
 8003f46:	4a4f      	ldr	r2, [pc, #316]	@ (8004084 <Oscilloscope_Process+0x4a4>)
 8003f48:	466b      	mov	r3, sp
 8003f4a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003f4e:	e883 0003 	stmia.w	r3, {r0, r1}
 8003f52:	4b4f      	ldr	r3, [pc, #316]	@ (8004090 <Oscilloscope_Process+0x4b0>)
 8003f54:	2205      	movs	r2, #5
 8003f56:	2188      	movs	r1, #136	@ 0x88
 8003f58:	484c      	ldr	r0, [pc, #304]	@ (800408c <Oscilloscope_Process+0x4ac>)
 8003f5a:	f7fe f8f6 	bl	800214a <ILI9341_WriteString>

		event_channel = 0;
 8003f5e:	4b4d      	ldr	r3, [pc, #308]	@ (8004094 <Oscilloscope_Process+0x4b4>)
 8003f60:	2200      	movs	r2, #0
 8003f62:	701a      	strb	r2, [r3, #0]
	}

	// Handle encoder0
	int32_t encoder0_curr = __HAL_TIM_GET_COUNTER(&htim3);
 8003f64:	4b4c      	ldr	r3, [pc, #304]	@ (8004098 <Oscilloscope_Process+0x4b8>)
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f6a:	f8c7 31d8 	str.w	r3, [r7, #472]	@ 0x1d8
	encoder0_curr = 32767 - ((encoder0_curr - 1) & 0xFFFF) / 2;
 8003f6e:	f8d7 31d8 	ldr.w	r3, [r7, #472]	@ 0x1d8
 8003f72:	3b01      	subs	r3, #1
 8003f74:	b29b      	uxth	r3, r3
 8003f76:	0fda      	lsrs	r2, r3, #31
 8003f78:	4413      	add	r3, r2
 8003f7a:	105b      	asrs	r3, r3, #1
 8003f7c:	425b      	negs	r3, r3
 8003f7e:	f503 43ff 	add.w	r3, r3, #32640	@ 0x7f80
 8003f82:	337f      	adds	r3, #127	@ 0x7f
 8003f84:	f8c7 31d8 	str.w	r3, [r7, #472]	@ 0x1d8

	if(encoder0_curr != encoder0_prev) {
 8003f88:	4b44      	ldr	r3, [pc, #272]	@ (800409c <Oscilloscope_Process+0x4bc>)
 8003f8a:	881b      	ldrh	r3, [r3, #0]
 8003f8c:	461a      	mov	r2, r3
 8003f8e:	f8d7 31d8 	ldr.w	r3, [r7, #472]	@ 0x1d8
 8003f92:	4293      	cmp	r3, r2
 8003f94:	f000 80dd 	beq.w	8004152 <Oscilloscope_Process+0x572>
		int32_t delta = encoder0_curr - encoder0_prev;
 8003f98:	4b40      	ldr	r3, [pc, #256]	@ (800409c <Oscilloscope_Process+0x4bc>)
 8003f9a:	881b      	ldrh	r3, [r3, #0]
 8003f9c:	461a      	mov	r2, r3
 8003f9e:	f8d7 31d8 	ldr.w	r3, [r7, #472]	@ 0x1d8
 8003fa2:	1a9b      	subs	r3, r3, r2
 8003fa4:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8

		if (delta > 10)
 8003fa8:	f8d7 31e8 	ldr.w	r3, [r7, #488]	@ 0x1e8
 8003fac:	2b0a      	cmp	r3, #10
 8003fae:	dd03      	ble.n	8003fb8 <Oscilloscope_Process+0x3d8>
			delta = -1;
 8003fb0:	f04f 33ff 	mov.w	r3, #4294967295
 8003fb4:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8

		if (delta < -10)
 8003fb8:	f8d7 31e8 	ldr.w	r3, [r7, #488]	@ 0x1e8
 8003fbc:	f113 0f0a 	cmn.w	r3, #10
 8003fc0:	da02      	bge.n	8003fc8 <Oscilloscope_Process+0x3e8>
			delta = 1;
 8003fc2:	2301      	movs	r3, #1
 8003fc4:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8

		if (menu_extended) {
 8003fc8:	4b35      	ldr	r3, [pc, #212]	@ (80040a0 <Oscilloscope_Process+0x4c0>)
 8003fca:	781b      	ldrb	r3, [r3, #0]
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d071      	beq.n	80040b4 <Oscilloscope_Process+0x4d4>
			ILI9341_Rectangle(&display, menu_selector_x, menu_selector_y, 38, 13, ILI9341_BLACK);
 8003fd0:	4b34      	ldr	r3, [pc, #208]	@ (80040a4 <Oscilloscope_Process+0x4c4>)
 8003fd2:	8819      	ldrh	r1, [r3, #0]
 8003fd4:	4b34      	ldr	r3, [pc, #208]	@ (80040a8 <Oscilloscope_Process+0x4c8>)
 8003fd6:	881a      	ldrh	r2, [r3, #0]
 8003fd8:	2300      	movs	r3, #0
 8003fda:	9301      	str	r3, [sp, #4]
 8003fdc:	230d      	movs	r3, #13
 8003fde:	9300      	str	r3, [sp, #0]
 8003fe0:	2326      	movs	r3, #38	@ 0x26
 8003fe2:	482a      	ldr	r0, [pc, #168]	@ (800408c <Oscilloscope_Process+0x4ac>)
 8003fe4:	f7fd fff6 	bl	8001fd4 <ILI9341_Rectangle>

			menu_selected_item += delta;
 8003fe8:	f8d7 31e8 	ldr.w	r3, [r7, #488]	@ 0x1e8
 8003fec:	b2da      	uxtb	r2, r3
 8003fee:	4b2f      	ldr	r3, [pc, #188]	@ (80040ac <Oscilloscope_Process+0x4cc>)
 8003ff0:	f993 3000 	ldrsb.w	r3, [r3]
 8003ff4:	b2db      	uxtb	r3, r3
 8003ff6:	4413      	add	r3, r2
 8003ff8:	b2db      	uxtb	r3, r3
 8003ffa:	b25a      	sxtb	r2, r3
 8003ffc:	4b2b      	ldr	r3, [pc, #172]	@ (80040ac <Oscilloscope_Process+0x4cc>)
 8003ffe:	701a      	strb	r2, [r3, #0]

			if (menu_selected_item < 0)
 8004000:	4b2a      	ldr	r3, [pc, #168]	@ (80040ac <Oscilloscope_Process+0x4cc>)
 8004002:	f993 3000 	ldrsb.w	r3, [r3]
 8004006:	2b00      	cmp	r3, #0
 8004008:	da02      	bge.n	8004010 <Oscilloscope_Process+0x430>
				menu_selected_item = 0;
 800400a:	4b28      	ldr	r3, [pc, #160]	@ (80040ac <Oscilloscope_Process+0x4cc>)
 800400c:	2200      	movs	r2, #0
 800400e:	701a      	strb	r2, [r3, #0]

			if (menu_selected_item > 5)
 8004010:	4b26      	ldr	r3, [pc, #152]	@ (80040ac <Oscilloscope_Process+0x4cc>)
 8004012:	f993 3000 	ldrsb.w	r3, [r3]
 8004016:	2b05      	cmp	r3, #5
 8004018:	dd02      	ble.n	8004020 <Oscilloscope_Process+0x440>
				menu_selected_item = 5;
 800401a:	4b24      	ldr	r3, [pc, #144]	@ (80040ac <Oscilloscope_Process+0x4cc>)
 800401c:	2205      	movs	r2, #5
 800401e:	701a      	strb	r2, [r3, #0]

			if (menu_selected_item < 4) {
 8004020:	4b22      	ldr	r3, [pc, #136]	@ (80040ac <Oscilloscope_Process+0x4cc>)
 8004022:	f993 3000 	ldrsb.w	r3, [r3]
 8004026:	2b03      	cmp	r3, #3
 8004028:	dc12      	bgt.n	8004050 <Oscilloscope_Process+0x470>
				menu_selector_x = 20 + 38 * menu_selected_item;
 800402a:	4b20      	ldr	r3, [pc, #128]	@ (80040ac <Oscilloscope_Process+0x4cc>)
 800402c:	f993 3000 	ldrsb.w	r3, [r3]
 8004030:	b29b      	uxth	r3, r3
 8004032:	461a      	mov	r2, r3
 8004034:	00d2      	lsls	r2, r2, #3
 8004036:	441a      	add	r2, r3
 8004038:	0052      	lsls	r2, r2, #1
 800403a:	4413      	add	r3, r2
 800403c:	005b      	lsls	r3, r3, #1
 800403e:	b29b      	uxth	r3, r3
 8004040:	3314      	adds	r3, #20
 8004042:	b29a      	uxth	r2, r3
 8004044:	4b17      	ldr	r3, [pc, #92]	@ (80040a4 <Oscilloscope_Process+0x4c4>)
 8004046:	801a      	strh	r2, [r3, #0]
				menu_selector_y = 3;
 8004048:	4b17      	ldr	r3, [pc, #92]	@ (80040a8 <Oscilloscope_Process+0x4c8>)
 800404a:	2203      	movs	r2, #3
 800404c:	801a      	strh	r2, [r3, #0]
 800404e:	e012      	b.n	8004076 <Oscilloscope_Process+0x496>
			} else {
				menu_selector_x = 20 + 38 * (menu_selected_item - 4);
 8004050:	4b16      	ldr	r3, [pc, #88]	@ (80040ac <Oscilloscope_Process+0x4cc>)
 8004052:	f993 3000 	ldrsb.w	r3, [r3]
 8004056:	3b04      	subs	r3, #4
 8004058:	b29b      	uxth	r3, r3
 800405a:	461a      	mov	r2, r3
 800405c:	00d2      	lsls	r2, r2, #3
 800405e:	441a      	add	r2, r3
 8004060:	0052      	lsls	r2, r2, #1
 8004062:	4413      	add	r3, r2
 8004064:	005b      	lsls	r3, r3, #1
 8004066:	b29b      	uxth	r3, r3
 8004068:	3314      	adds	r3, #20
 800406a:	b29a      	uxth	r2, r3
 800406c:	4b0d      	ldr	r3, [pc, #52]	@ (80040a4 <Oscilloscope_Process+0x4c4>)
 800406e:	801a      	strh	r2, [r3, #0]
				menu_selector_y = 223;
 8004070:	4b0d      	ldr	r3, [pc, #52]	@ (80040a8 <Oscilloscope_Process+0x4c8>)
 8004072:	22df      	movs	r2, #223	@ 0xdf
 8004074:	801a      	strh	r2, [r3, #0]
			}

			event_selector = 1;
 8004076:	4b0e      	ldr	r3, [pc, #56]	@ (80040b0 <Oscilloscope_Process+0x4d0>)
 8004078:	2201      	movs	r2, #1
 800407a:	701a      	strb	r2, [r3, #0]
 800407c:	e05e      	b.n	800413c <Oscilloscope_Process+0x55c>
 800407e:	bf00      	nop
 8004080:	2000d10c 	.word	0x2000d10c
 8004084:	20000000 	.word	0x20000000
 8004088:	08013db0 	.word	0x08013db0
 800408c:	2000f598 	.word	0x2000f598
 8004090:	08013db8 	.word	0x08013db8
 8004094:	2000d104 	.word	0x2000d104
 8004098:	20016038 	.word	0x20016038
 800409c:	2001561c 	.word	0x2001561c
 80040a0:	20015619 	.word	0x20015619
 80040a4:	2000d10e 	.word	0x2000d10e
 80040a8:	2000d110 	.word	0x2000d110
 80040ac:	2000d10d 	.word	0x2000d10d
 80040b0:	2000d107 	.word	0x2000d107

		} else {

			if (menu_selected_item == 2) {
 80040b4:	4ba0      	ldr	r3, [pc, #640]	@ (8004338 <Oscilloscope_Process+0x758>)
 80040b6:	f993 3000 	ldrsb.w	r3, [r3]
 80040ba:	2b02      	cmp	r3, #2
 80040bc:	d11c      	bne.n	80040f8 <Oscilloscope_Process+0x518>
				clearCursor(&display, cursor0);
 80040be:	4b9f      	ldr	r3, [pc, #636]	@ (800433c <Oscilloscope_Process+0x75c>)
 80040c0:	881b      	ldrh	r3, [r3, #0]
 80040c2:	4619      	mov	r1, r3
 80040c4:	489e      	ldr	r0, [pc, #632]	@ (8004340 <Oscilloscope_Process+0x760>)
 80040c6:	f7fe ffd6 	bl	8003076 <clearCursor>
				cursor0 += delta;
 80040ca:	f8d7 31e8 	ldr.w	r3, [r7, #488]	@ 0x1e8
 80040ce:	b29a      	uxth	r2, r3
 80040d0:	4b9a      	ldr	r3, [pc, #616]	@ (800433c <Oscilloscope_Process+0x75c>)
 80040d2:	881b      	ldrh	r3, [r3, #0]
 80040d4:	4413      	add	r3, r2
 80040d6:	b29a      	uxth	r2, r3
 80040d8:	4b98      	ldr	r3, [pc, #608]	@ (800433c <Oscilloscope_Process+0x75c>)
 80040da:	801a      	strh	r2, [r3, #0]

				if (cursor0 < 20)
 80040dc:	4b97      	ldr	r3, [pc, #604]	@ (800433c <Oscilloscope_Process+0x75c>)
 80040de:	881b      	ldrh	r3, [r3, #0]
 80040e0:	2b13      	cmp	r3, #19
 80040e2:	d802      	bhi.n	80040ea <Oscilloscope_Process+0x50a>
					cursor0 = 20;
 80040e4:	4b95      	ldr	r3, [pc, #596]	@ (800433c <Oscilloscope_Process+0x75c>)
 80040e6:	2214      	movs	r2, #20
 80040e8:	801a      	strh	r2, [r3, #0]

				if (cursor0 > 220)
 80040ea:	4b94      	ldr	r3, [pc, #592]	@ (800433c <Oscilloscope_Process+0x75c>)
 80040ec:	881b      	ldrh	r3, [r3, #0]
 80040ee:	2bdc      	cmp	r3, #220	@ 0xdc
 80040f0:	d902      	bls.n	80040f8 <Oscilloscope_Process+0x518>
					cursor0 = 220;
 80040f2:	4b92      	ldr	r3, [pc, #584]	@ (800433c <Oscilloscope_Process+0x75c>)
 80040f4:	22dc      	movs	r2, #220	@ 0xdc
 80040f6:	801a      	strh	r2, [r3, #0]
			}

			if (menu_selected_item == 3) {
 80040f8:	4b8f      	ldr	r3, [pc, #572]	@ (8004338 <Oscilloscope_Process+0x758>)
 80040fa:	f993 3000 	ldrsb.w	r3, [r3]
 80040fe:	2b03      	cmp	r3, #3
 8004100:	d11c      	bne.n	800413c <Oscilloscope_Process+0x55c>
				clearCursor(&display, cursor1);
 8004102:	4b90      	ldr	r3, [pc, #576]	@ (8004344 <Oscilloscope_Process+0x764>)
 8004104:	881b      	ldrh	r3, [r3, #0]
 8004106:	4619      	mov	r1, r3
 8004108:	488d      	ldr	r0, [pc, #564]	@ (8004340 <Oscilloscope_Process+0x760>)
 800410a:	f7fe ffb4 	bl	8003076 <clearCursor>
				cursor1 += delta;
 800410e:	f8d7 31e8 	ldr.w	r3, [r7, #488]	@ 0x1e8
 8004112:	b29a      	uxth	r2, r3
 8004114:	4b8b      	ldr	r3, [pc, #556]	@ (8004344 <Oscilloscope_Process+0x764>)
 8004116:	881b      	ldrh	r3, [r3, #0]
 8004118:	4413      	add	r3, r2
 800411a:	b29a      	uxth	r2, r3
 800411c:	4b89      	ldr	r3, [pc, #548]	@ (8004344 <Oscilloscope_Process+0x764>)
 800411e:	801a      	strh	r2, [r3, #0]

				if (cursor1 < 20)
 8004120:	4b88      	ldr	r3, [pc, #544]	@ (8004344 <Oscilloscope_Process+0x764>)
 8004122:	881b      	ldrh	r3, [r3, #0]
 8004124:	2b13      	cmp	r3, #19
 8004126:	d802      	bhi.n	800412e <Oscilloscope_Process+0x54e>
					cursor1 = 20;
 8004128:	4b86      	ldr	r3, [pc, #536]	@ (8004344 <Oscilloscope_Process+0x764>)
 800412a:	2214      	movs	r2, #20
 800412c:	801a      	strh	r2, [r3, #0]

				if (cursor1 > 220)
 800412e:	4b85      	ldr	r3, [pc, #532]	@ (8004344 <Oscilloscope_Process+0x764>)
 8004130:	881b      	ldrh	r3, [r3, #0]
 8004132:	2bdc      	cmp	r3, #220	@ 0xdc
 8004134:	d902      	bls.n	800413c <Oscilloscope_Process+0x55c>
					cursor1 = 220;
 8004136:	4b83      	ldr	r3, [pc, #524]	@ (8004344 <Oscilloscope_Process+0x764>)
 8004138:	22dc      	movs	r2, #220	@ 0xdc
 800413a:	801a      	strh	r2, [r3, #0]
			}

		}

		event_cursor = 1;
 800413c:	4b82      	ldr	r3, [pc, #520]	@ (8004348 <Oscilloscope_Process+0x768>)
 800413e:	2201      	movs	r2, #1
 8004140:	701a      	strb	r2, [r3, #0]
		event_trigger = 1;
 8004142:	4b82      	ldr	r3, [pc, #520]	@ (800434c <Oscilloscope_Process+0x76c>)
 8004144:	2201      	movs	r2, #1
 8004146:	701a      	strb	r2, [r3, #0]
		encoder0_prev = encoder0_curr;
 8004148:	f8d7 31d8 	ldr.w	r3, [r7, #472]	@ 0x1d8
 800414c:	b29a      	uxth	r2, r3
 800414e:	4b80      	ldr	r3, [pc, #512]	@ (8004350 <Oscilloscope_Process+0x770>)
 8004150:	801a      	strh	r2, [r3, #0]
	}

	// Handle UI redraw cursor events
	if (event_cursor) {
 8004152:	4b7d      	ldr	r3, [pc, #500]	@ (8004348 <Oscilloscope_Process+0x768>)
 8004154:	781b      	ldrb	r3, [r3, #0]
 8004156:	2b00      	cmp	r3, #0
 8004158:	d026      	beq.n	80041a8 <Oscilloscope_Process+0x5c8>
		clearCursor(&display, cursor0);
 800415a:	4b78      	ldr	r3, [pc, #480]	@ (800433c <Oscilloscope_Process+0x75c>)
 800415c:	881b      	ldrh	r3, [r3, #0]
 800415e:	4619      	mov	r1, r3
 8004160:	4877      	ldr	r0, [pc, #476]	@ (8004340 <Oscilloscope_Process+0x760>)
 8004162:	f7fe ff88 	bl	8003076 <clearCursor>
		clearCursor(&display, cursor1);
 8004166:	4b77      	ldr	r3, [pc, #476]	@ (8004344 <Oscilloscope_Process+0x764>)
 8004168:	881b      	ldrh	r3, [r3, #0]
 800416a:	4619      	mov	r1, r3
 800416c:	4874      	ldr	r0, [pc, #464]	@ (8004340 <Oscilloscope_Process+0x760>)
 800416e:	f7fe ff82 	bl	8003076 <clearCursor>

		if (menu_channel0_enabled)
 8004172:	4b78      	ldr	r3, [pc, #480]	@ (8004354 <Oscilloscope_Process+0x774>)
 8004174:	781b      	ldrb	r3, [r3, #0]
 8004176:	2b00      	cmp	r3, #0
 8004178:	d007      	beq.n	800418a <Oscilloscope_Process+0x5aa>
			drawCursor(&display, cursor0, "C1", ILI9341_YELLOW);
 800417a:	4b70      	ldr	r3, [pc, #448]	@ (800433c <Oscilloscope_Process+0x75c>)
 800417c:	8819      	ldrh	r1, [r3, #0]
 800417e:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8004182:	4a75      	ldr	r2, [pc, #468]	@ (8004358 <Oscilloscope_Process+0x778>)
 8004184:	486e      	ldr	r0, [pc, #440]	@ (8004340 <Oscilloscope_Process+0x760>)
 8004186:	f7fe ffa3 	bl	80030d0 <drawCursor>

		if (menu_channel1_enabled)
 800418a:	4b74      	ldr	r3, [pc, #464]	@ (800435c <Oscilloscope_Process+0x77c>)
 800418c:	781b      	ldrb	r3, [r3, #0]
 800418e:	2b00      	cmp	r3, #0
 8004190:	d007      	beq.n	80041a2 <Oscilloscope_Process+0x5c2>
			drawCursor(&display, cursor1, "C2", ILI9341_CYAN);
 8004192:	4b6c      	ldr	r3, [pc, #432]	@ (8004344 <Oscilloscope_Process+0x764>)
 8004194:	8819      	ldrh	r1, [r3, #0]
 8004196:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 800419a:	4a71      	ldr	r2, [pc, #452]	@ (8004360 <Oscilloscope_Process+0x780>)
 800419c:	4868      	ldr	r0, [pc, #416]	@ (8004340 <Oscilloscope_Process+0x760>)
 800419e:	f7fe ff97 	bl	80030d0 <drawCursor>

		event_cursor = 0;
 80041a2:	4b69      	ldr	r3, [pc, #420]	@ (8004348 <Oscilloscope_Process+0x768>)
 80041a4:	2200      	movs	r2, #0
 80041a6:	701a      	strb	r2, [r3, #0]
	}

	// Handle encoder1
	int32_t encoder1_curr = __HAL_TIM_GET_COUNTER(&htim4);
 80041a8:	4b6e      	ldr	r3, [pc, #440]	@ (8004364 <Oscilloscope_Process+0x784>)
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041ae:	f8c7 31d4 	str.w	r3, [r7, #468]	@ 0x1d4
	encoder1_curr = 32767 - ((encoder1_curr - 1) & 0xFFFF) / 2;
 80041b2:	f8d7 31d4 	ldr.w	r3, [r7, #468]	@ 0x1d4
 80041b6:	3b01      	subs	r3, #1
 80041b8:	b29b      	uxth	r3, r3
 80041ba:	0fda      	lsrs	r2, r3, #31
 80041bc:	4413      	add	r3, r2
 80041be:	105b      	asrs	r3, r3, #1
 80041c0:	425b      	negs	r3, r3
 80041c2:	f503 43ff 	add.w	r3, r3, #32640	@ 0x7f80
 80041c6:	337f      	adds	r3, #127	@ 0x7f
 80041c8:	f8c7 31d4 	str.w	r3, [r7, #468]	@ 0x1d4

	if(encoder1_curr != encoder1_prev || event_trigger) {
 80041cc:	4b66      	ldr	r3, [pc, #408]	@ (8004368 <Oscilloscope_Process+0x788>)
 80041ce:	881b      	ldrh	r3, [r3, #0]
 80041d0:	461a      	mov	r2, r3
 80041d2:	f8d7 31d4 	ldr.w	r3, [r7, #468]	@ 0x1d4
 80041d6:	4293      	cmp	r3, r2
 80041d8:	d104      	bne.n	80041e4 <Oscilloscope_Process+0x604>
 80041da:	4b5c      	ldr	r3, [pc, #368]	@ (800434c <Oscilloscope_Process+0x76c>)
 80041dc:	781b      	ldrb	r3, [r3, #0]
 80041de:	2b00      	cmp	r3, #0
 80041e0:	f000 824a 	beq.w	8004678 <Oscilloscope_Process+0xa98>
		int32_t delta = encoder1_curr - encoder1_prev;
 80041e4:	4b60      	ldr	r3, [pc, #384]	@ (8004368 <Oscilloscope_Process+0x788>)
 80041e6:	881b      	ldrh	r3, [r3, #0]
 80041e8:	461a      	mov	r2, r3
 80041ea:	f8d7 31d4 	ldr.w	r3, [r7, #468]	@ 0x1d4
 80041ee:	1a9b      	subs	r3, r3, r2
 80041f0:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4

		if (delta > 10)
 80041f4:	f8d7 31e4 	ldr.w	r3, [r7, #484]	@ 0x1e4
 80041f8:	2b0a      	cmp	r3, #10
 80041fa:	dd03      	ble.n	8004204 <Oscilloscope_Process+0x624>
			delta = -1;
 80041fc:	f04f 33ff 	mov.w	r3, #4294967295
 8004200:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4

		if (delta < -10)
 8004204:	f8d7 31e4 	ldr.w	r3, [r7, #484]	@ 0x1e4
 8004208:	f113 0f0a 	cmn.w	r3, #10
 800420c:	da02      	bge.n	8004214 <Oscilloscope_Process+0x634>
			delta = 1;
 800420e:	2301      	movs	r3, #1
 8004210:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4

		if (menu_extended) {
 8004214:	4b55      	ldr	r3, [pc, #340]	@ (800436c <Oscilloscope_Process+0x78c>)
 8004216:	781b      	ldrb	r3, [r3, #0]
 8004218:	2b00      	cmp	r3, #0
 800421a:	f000 816f 	beq.w	80044fc <Oscilloscope_Process+0x91c>

			if (menu_selected_item == 1) {
 800421e:	4b46      	ldr	r3, [pc, #280]	@ (8004338 <Oscilloscope_Process+0x758>)
 8004220:	f993 3000 	ldrsb.w	r3, [r3]
 8004224:	2b01      	cmp	r3, #1
 8004226:	d112      	bne.n	800424e <Oscilloscope_Process+0x66e>
				trigger_mode += delta;
 8004228:	f8d7 31e4 	ldr.w	r3, [r7, #484]	@ 0x1e4
 800422c:	b2da      	uxtb	r2, r3
 800422e:	4b50      	ldr	r3, [pc, #320]	@ (8004370 <Oscilloscope_Process+0x790>)
 8004230:	781b      	ldrb	r3, [r3, #0]
 8004232:	4413      	add	r3, r2
 8004234:	b2da      	uxtb	r2, r3
 8004236:	4b4e      	ldr	r3, [pc, #312]	@ (8004370 <Oscilloscope_Process+0x790>)
 8004238:	701a      	strb	r2, [r3, #0]

				if (trigger_mode < 0)
					trigger_mode = 0;

				if (trigger_mode > 1)
 800423a:	4b4d      	ldr	r3, [pc, #308]	@ (8004370 <Oscilloscope_Process+0x790>)
 800423c:	781b      	ldrb	r3, [r3, #0]
 800423e:	2b01      	cmp	r3, #1
 8004240:	d902      	bls.n	8004248 <Oscilloscope_Process+0x668>
					trigger_mode = 1;
 8004242:	4b4b      	ldr	r3, [pc, #300]	@ (8004370 <Oscilloscope_Process+0x790>)
 8004244:	2201      	movs	r2, #1
 8004246:	701a      	strb	r2, [r3, #0]

				event_trigger_mode = 1;
 8004248:	4b4a      	ldr	r3, [pc, #296]	@ (8004374 <Oscilloscope_Process+0x794>)
 800424a:	2201      	movs	r2, #1
 800424c:	701a      	strb	r2, [r3, #0]
			}

			if (menu_selected_item == 4) {
 800424e:	4b3a      	ldr	r3, [pc, #232]	@ (8004338 <Oscilloscope_Process+0x758>)
 8004250:	f993 3000 	ldrsb.w	r3, [r3]
 8004254:	2b04      	cmp	r3, #4
 8004256:	f040 8100 	bne.w	800445a <Oscilloscope_Process+0x87a>
				mode_seconds += delta;
 800425a:	f8d7 31e4 	ldr.w	r3, [r7, #484]	@ 0x1e4
 800425e:	b2da      	uxtb	r2, r3
 8004260:	4b45      	ldr	r3, [pc, #276]	@ (8004378 <Oscilloscope_Process+0x798>)
 8004262:	781b      	ldrb	r3, [r3, #0]
 8004264:	4413      	add	r3, r2
 8004266:	b2da      	uxtb	r2, r3
 8004268:	4b43      	ldr	r3, [pc, #268]	@ (8004378 <Oscilloscope_Process+0x798>)
 800426a:	701a      	strb	r2, [r3, #0]

				if (mode_seconds < 0)
					mode_seconds = 0;

				if (mode_seconds > 16)
 800426c:	4b42      	ldr	r3, [pc, #264]	@ (8004378 <Oscilloscope_Process+0x798>)
 800426e:	781b      	ldrb	r3, [r3, #0]
 8004270:	2b10      	cmp	r3, #16
 8004272:	d902      	bls.n	800427a <Oscilloscope_Process+0x69a>
					mode_seconds = 16;
 8004274:	4b40      	ldr	r3, [pc, #256]	@ (8004378 <Oscilloscope_Process+0x798>)
 8004276:	2210      	movs	r2, #16
 8004278:	701a      	strb	r2, [r3, #0]

				uint32_t list_seconds[17] = {
 800427a:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 800427e:	f5a3 73f8 	sub.w	r3, r3, #496	@ 0x1f0
 8004282:	4a3e      	ldr	r2, [pc, #248]	@ (800437c <Oscilloscope_Process+0x79c>)
 8004284:	4618      	mov	r0, r3
 8004286:	4611      	mov	r1, r2
 8004288:	2344      	movs	r3, #68	@ 0x44
 800428a:	461a      	mov	r2, r3
 800428c:	f00c fa13 	bl	80106b6 <memcpy>
					200000,
					500000,
					1000000
				};

				xlim_us = list_seconds[mode_seconds];
 8004290:	4b39      	ldr	r3, [pc, #228]	@ (8004378 <Oscilloscope_Process+0x798>)
 8004292:	781b      	ldrb	r3, [r3, #0]
 8004294:	461a      	mov	r2, r3
 8004296:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 800429a:	f5a3 73f8 	sub.w	r3, r3, #496	@ 0x1f0
 800429e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80042a2:	4a37      	ldr	r2, [pc, #220]	@ (8004380 <Oscilloscope_Process+0x7a0>)
 80042a4:	6013      	str	r3, [r2, #0]

				if (adc_immediate) {
 80042a6:	4b37      	ldr	r3, [pc, #220]	@ (8004384 <Oscilloscope_Process+0x7a4>)
 80042a8:	781b      	ldrb	r3, [r3, #0]
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d005      	beq.n	80042ba <Oscilloscope_Process+0x6da>
					HAL_TIM_Base_Stop_IT(&htim10);
 80042ae:	4836      	ldr	r0, [pc, #216]	@ (8004388 <Oscilloscope_Process+0x7a8>)
 80042b0:	f004 ffde 	bl	8009270 <HAL_TIM_Base_Stop_IT>
					adc_available = 1;
 80042b4:	4b35      	ldr	r3, [pc, #212]	@ (800438c <Oscilloscope_Process+0x7ac>)
 80042b6:	2201      	movs	r2, #1
 80042b8:	701a      	strb	r2, [r3, #0]
				}

				HAL_ADC_Stop_DMA(&hadc1);
 80042ba:	4835      	ldr	r0, [pc, #212]	@ (8004390 <Oscilloscope_Process+0x7b0>)
 80042bc:	f001 fca6 	bl	8005c0c <HAL_ADC_Stop_DMA>

				adc_reset_cyccnt = 1;
 80042c0:	4b34      	ldr	r3, [pc, #208]	@ (8004394 <Oscilloscope_Process+0x7b4>)
 80042c2:	2201      	movs	r2, #1
 80042c4:	701a      	strb	r2, [r3, #0]
				adc0_length = 0;
 80042c6:	4b34      	ldr	r3, [pc, #208]	@ (8004398 <Oscilloscope_Process+0x7b8>)
 80042c8:	2200      	movs	r2, #0
 80042ca:	601a      	str	r2, [r3, #0]
				adc1_length = 0;
 80042cc:	4b33      	ldr	r3, [pc, #204]	@ (800439c <Oscilloscope_Process+0x7bc>)
 80042ce:	2200      	movs	r2, #0
 80042d0:	601a      	str	r2, [r3, #0]
				adc_max[0] = 0;
 80042d2:	4b33      	ldr	r3, [pc, #204]	@ (80043a0 <Oscilloscope_Process+0x7c0>)
 80042d4:	2200      	movs	r2, #0
 80042d6:	801a      	strh	r2, [r3, #0]
				adc_max[1] = 0;
 80042d8:	4b31      	ldr	r3, [pc, #196]	@ (80043a0 <Oscilloscope_Process+0x7c0>)
 80042da:	2200      	movs	r2, #0
 80042dc:	805a      	strh	r2, [r3, #2]
				adc_min[0] = -1;
 80042de:	4b31      	ldr	r3, [pc, #196]	@ (80043a4 <Oscilloscope_Process+0x7c4>)
 80042e0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80042e4:	801a      	strh	r2, [r3, #0]
				adc_min[1] = -1;
 80042e6:	4b2f      	ldr	r3, [pc, #188]	@ (80043a4 <Oscilloscope_Process+0x7c4>)
 80042e8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80042ec:	805a      	strh	r2, [r3, #2]
				adc_period[0] = 0;
 80042ee:	4b2e      	ldr	r3, [pc, #184]	@ (80043a8 <Oscilloscope_Process+0x7c8>)
 80042f0:	2200      	movs	r2, #0
 80042f2:	601a      	str	r2, [r3, #0]
				adc_period[1] = 0;
 80042f4:	4b2c      	ldr	r3, [pc, #176]	@ (80043a8 <Oscilloscope_Process+0x7c8>)
 80042f6:	2200      	movs	r2, #0
 80042f8:	605a      	str	r2, [r3, #4]
				adc_period0_detected = 0;
 80042fa:	4b2c      	ldr	r3, [pc, #176]	@ (80043ac <Oscilloscope_Process+0x7cc>)
 80042fc:	2200      	movs	r2, #0
 80042fe:	701a      	strb	r2, [r3, #0]
				adc_period1_detected = 0;
 8004300:	4b2b      	ldr	r3, [pc, #172]	@ (80043b0 <Oscilloscope_Process+0x7d0>)
 8004302:	2200      	movs	r2, #0
 8004304:	701a      	strb	r2, [r3, #0]
				event_trigger0_detected = 0;
 8004306:	4b2b      	ldr	r3, [pc, #172]	@ (80043b4 <Oscilloscope_Process+0x7d4>)
 8004308:	2200      	movs	r2, #0
 800430a:	701a      	strb	r2, [r3, #0]
				event_trigger1_detected = 0;
 800430c:	4b2a      	ldr	r3, [pc, #168]	@ (80043b8 <Oscilloscope_Process+0x7d8>)
 800430e:	2200      	movs	r2, #0
 8004310:	701a      	strb	r2, [r3, #0]

				if (menu_channel0_enabled)
 8004312:	4b10      	ldr	r3, [pc, #64]	@ (8004354 <Oscilloscope_Process+0x774>)
 8004314:	781b      	ldrb	r3, [r3, #0]
 8004316:	2b00      	cmp	r3, #0
 8004318:	d003      	beq.n	8004322 <Oscilloscope_Process+0x742>
					adc0_filled = 0;
 800431a:	4b28      	ldr	r3, [pc, #160]	@ (80043bc <Oscilloscope_Process+0x7dc>)
 800431c:	2200      	movs	r2, #0
 800431e:	701a      	strb	r2, [r3, #0]
 8004320:	e002      	b.n	8004328 <Oscilloscope_Process+0x748>
				else
					adc0_filled = 1;
 8004322:	4b26      	ldr	r3, [pc, #152]	@ (80043bc <Oscilloscope_Process+0x7dc>)
 8004324:	2201      	movs	r2, #1
 8004326:	701a      	strb	r2, [r3, #0]

				if (menu_channel1_enabled)
 8004328:	4b0c      	ldr	r3, [pc, #48]	@ (800435c <Oscilloscope_Process+0x77c>)
 800432a:	781b      	ldrb	r3, [r3, #0]
 800432c:	2b00      	cmp	r3, #0
 800432e:	d049      	beq.n	80043c4 <Oscilloscope_Process+0x7e4>
					adc1_filled = 0;
 8004330:	4b23      	ldr	r3, [pc, #140]	@ (80043c0 <Oscilloscope_Process+0x7e0>)
 8004332:	2200      	movs	r2, #0
 8004334:	701a      	strb	r2, [r3, #0]
 8004336:	e048      	b.n	80043ca <Oscilloscope_Process+0x7ea>
 8004338:	2000d10d 	.word	0x2000d10d
 800433c:	2000d0f4 	.word	0x2000d0f4
 8004340:	2000f598 	.word	0x2000f598
 8004344:	2000d0f6 	.word	0x2000d0f6
 8004348:	2000d102 	.word	0x2000d102
 800434c:	2000d103 	.word	0x2000d103
 8004350:	2001561c 	.word	0x2001561c
 8004354:	2000d10b 	.word	0x2000d10b
 8004358:	08013dc0 	.word	0x08013dc0
 800435c:	2000d10c 	.word	0x2000d10c
 8004360:	08013dc4 	.word	0x08013dc4
 8004364:	20016080 	.word	0x20016080
 8004368:	2001561e 	.word	0x2001561e
 800436c:	20015619 	.word	0x20015619
 8004370:	20015614 	.word	0x20015614
 8004374:	2000d108 	.word	0x2000d108
 8004378:	2000d112 	.word	0x2000d112
 800437c:	08013e20 	.word	0x08013e20
 8004380:	2000d0ec 	.word	0x2000d0ec
 8004384:	2000d0e8 	.word	0x2000d0e8
 8004388:	200160c8 	.word	0x200160c8
 800438c:	2000d0e1 	.word	0x2000d0e1
 8004390:	2000d318 	.word	0x2000d318
 8004394:	2000d0e2 	.word	0x2000d0e2
 8004398:	2000f5f8 	.word	0x2000f5f8
 800439c:	2000f5fc 	.word	0x2000f5fc
 80043a0:	2000f604 	.word	0x2000f604
 80043a4:	2000d0e4 	.word	0x2000d0e4
 80043a8:	2000f608 	.word	0x2000f608
 80043ac:	2000f610 	.word	0x2000f610
 80043b0:	2000f611 	.word	0x2000f611
 80043b4:	2000d109 	.word	0x2000d109
 80043b8:	2000d10a 	.word	0x2000d10a
 80043bc:	2000f600 	.word	0x2000f600
 80043c0:	2000d0e0 	.word	0x2000d0e0
				else
					adc1_filled = 1;
 80043c4:	4b3f      	ldr	r3, [pc, #252]	@ (80044c4 <Oscilloscope_Process+0x8e4>)
 80043c6:	2201      	movs	r2, #1
 80043c8:	701a      	strb	r2, [r3, #0]

				adc_immediate = xlim_us <= 500;
 80043ca:	4b3f      	ldr	r3, [pc, #252]	@ (80044c8 <Oscilloscope_Process+0x8e8>)
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80043d2:	bf94      	ite	ls
 80043d4:	2301      	movls	r3, #1
 80043d6:	2300      	movhi	r3, #0
 80043d8:	b2db      	uxtb	r3, r3
 80043da:	461a      	mov	r2, r3
 80043dc:	4b3b      	ldr	r3, [pc, #236]	@ (80044cc <Oscilloscope_Process+0x8ec>)
 80043de:	701a      	strb	r2, [r3, #0]

				if (!adc_immediate) {
 80043e0:	4b3a      	ldr	r3, [pc, #232]	@ (80044cc <Oscilloscope_Process+0x8ec>)
 80043e2:	781b      	ldrb	r3, [r3, #0]
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d12d      	bne.n	8004444 <Oscilloscope_Process+0x864>
					uint32_t list_timer_settings[17][2] = {
 80043e8:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 80043ec:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 80043f0:	4a37      	ldr	r2, [pc, #220]	@ (80044d0 <Oscilloscope_Process+0x8f0>)
 80043f2:	4618      	mov	r0, r3
 80043f4:	4611      	mov	r1, r2
 80043f6:	2388      	movs	r3, #136	@ 0x88
 80043f8:	461a      	mov	r2, r3
 80043fa:	f00c f95c 	bl	80106b6 <memcpy>
						{  8228, 100 },
						{ 20570, 100 },
						{ 41142, 100 }
					};

					htim10.Init.Prescaler = list_timer_settings[mode_seconds][0];
 80043fe:	4b35      	ldr	r3, [pc, #212]	@ (80044d4 <Oscilloscope_Process+0x8f4>)
 8004400:	781b      	ldrb	r3, [r3, #0]
 8004402:	461a      	mov	r2, r3
 8004404:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 8004408:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 800440c:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
 8004410:	4a31      	ldr	r2, [pc, #196]	@ (80044d8 <Oscilloscope_Process+0x8f8>)
 8004412:	6053      	str	r3, [r2, #4]
					htim10.Init.Period    = list_timer_settings[mode_seconds][1];
 8004414:	4b2f      	ldr	r3, [pc, #188]	@ (80044d4 <Oscilloscope_Process+0x8f4>)
 8004416:	781b      	ldrb	r3, [r3, #0]
 8004418:	4619      	mov	r1, r3
 800441a:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 800441e:	f5a3 72d6 	sub.w	r2, r3, #428	@ 0x1ac
 8004422:	00cb      	lsls	r3, r1, #3
 8004424:	4413      	add	r3, r2
 8004426:	685b      	ldr	r3, [r3, #4]
 8004428:	4a2b      	ldr	r2, [pc, #172]	@ (80044d8 <Oscilloscope_Process+0x8f8>)
 800442a:	60d3      	str	r3, [r2, #12]

					if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 800442c:	482a      	ldr	r0, [pc, #168]	@ (80044d8 <Oscilloscope_Process+0x8f8>)
 800442e:	f004 fe6d 	bl	800910c <HAL_TIM_Base_Init>
 8004432:	4603      	mov	r3, r0
 8004434:	2b00      	cmp	r3, #0
 8004436:	d001      	beq.n	800443c <Oscilloscope_Process+0x85c>
						Error_Handler();
 8004438:	f7fe fc92 	bl	8002d60 <Error_Handler>

					HAL_TIM_Base_Start_IT(&htim10);
 800443c:	4826      	ldr	r0, [pc, #152]	@ (80044d8 <Oscilloscope_Process+0x8f8>)
 800443e:	f004 feb5 	bl	80091ac <HAL_TIM_Base_Start_IT>
 8004442:	e004      	b.n	800444e <Oscilloscope_Process+0x86e>
				} else
					HAL_ADC_Start_DMA(&hadc1, (uint32_t*)&adc_data, 2);
 8004444:	2202      	movs	r2, #2
 8004446:	4925      	ldr	r1, [pc, #148]	@ (80044dc <Oscilloscope_Process+0x8fc>)
 8004448:	4825      	ldr	r0, [pc, #148]	@ (80044e0 <Oscilloscope_Process+0x900>)
 800444a:	f001 faeb 	bl	8005a24 <HAL_ADC_Start_DMA>

				local_event_adc = 0;
 800444e:	2300      	movs	r3, #0
 8004450:	f887 31ef 	strb.w	r3, [r7, #495]	@ 0x1ef
				event_seconds = 1;
 8004454:	4b23      	ldr	r3, [pc, #140]	@ (80044e4 <Oscilloscope_Process+0x904>)
 8004456:	2201      	movs	r2, #1
 8004458:	701a      	strb	r2, [r3, #0]
			}

			if (menu_selected_item == 5) {
 800445a:	4b23      	ldr	r3, [pc, #140]	@ (80044e8 <Oscilloscope_Process+0x908>)
 800445c:	f993 3000 	ldrsb.w	r3, [r3]
 8004460:	2b05      	cmp	r3, #5
 8004462:	f040 8101 	bne.w	8004668 <Oscilloscope_Process+0xa88>
				mode_voltage += delta;
 8004466:	f8d7 31e4 	ldr.w	r3, [r7, #484]	@ 0x1e4
 800446a:	b2da      	uxtb	r2, r3
 800446c:	4b1f      	ldr	r3, [pc, #124]	@ (80044ec <Oscilloscope_Process+0x90c>)
 800446e:	781b      	ldrb	r3, [r3, #0]
 8004470:	4413      	add	r3, r2
 8004472:	b2da      	uxtb	r2, r3
 8004474:	4b1d      	ldr	r3, [pc, #116]	@ (80044ec <Oscilloscope_Process+0x90c>)
 8004476:	701a      	strb	r2, [r3, #0]

				if (mode_voltage < 0)
					mode_voltage = 0;

				if (mode_voltage > 9)
 8004478:	4b1c      	ldr	r3, [pc, #112]	@ (80044ec <Oscilloscope_Process+0x90c>)
 800447a:	781b      	ldrb	r3, [r3, #0]
 800447c:	2b09      	cmp	r3, #9
 800447e:	d902      	bls.n	8004486 <Oscilloscope_Process+0x8a6>
					mode_voltage = 9;
 8004480:	4b1a      	ldr	r3, [pc, #104]	@ (80044ec <Oscilloscope_Process+0x90c>)
 8004482:	2209      	movs	r2, #9
 8004484:	701a      	strb	r2, [r3, #0]

				uint32_t list_voltage[10] = {
 8004486:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 800448a:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 800448e:	4a18      	ldr	r2, [pc, #96]	@ (80044f0 <Oscilloscope_Process+0x910>)
 8004490:	461c      	mov	r4, r3
 8004492:	4615      	mov	r5, r2
 8004494:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004496:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004498:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800449a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800449c:	e895 0003 	ldmia.w	r5, {r0, r1}
 80044a0:	e884 0003 	stmia.w	r4, {r0, r1}
					2000000,
					5000000,
					10000000
				};

				ylim_uV = list_voltage[mode_voltage];
 80044a4:	4b11      	ldr	r3, [pc, #68]	@ (80044ec <Oscilloscope_Process+0x90c>)
 80044a6:	781b      	ldrb	r3, [r3, #0]
 80044a8:	461a      	mov	r2, r3
 80044aa:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 80044ae:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 80044b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80044b6:	4a0f      	ldr	r2, [pc, #60]	@ (80044f4 <Oscilloscope_Process+0x914>)
 80044b8:	6013      	str	r3, [r2, #0]

				event_voltage = 1;
 80044ba:	4b0f      	ldr	r3, [pc, #60]	@ (80044f8 <Oscilloscope_Process+0x918>)
 80044bc:	2201      	movs	r2, #1
 80044be:	701a      	strb	r2, [r3, #0]
 80044c0:	e0d2      	b.n	8004668 <Oscilloscope_Process+0xa88>
 80044c2:	bf00      	nop
 80044c4:	2000d0e0 	.word	0x2000d0e0
 80044c8:	2000d0ec 	.word	0x2000d0ec
 80044cc:	2000d0e8 	.word	0x2000d0e8
 80044d0:	08013e64 	.word	0x08013e64
 80044d4:	2000d112 	.word	0x2000d112
 80044d8:	200160c8 	.word	0x200160c8
 80044dc:	2000f5f0 	.word	0x2000f5f0
 80044e0:	2000d318 	.word	0x2000d318
 80044e4:	2000d105 	.word	0x2000d105
 80044e8:	2000d10d 	.word	0x2000d10d
 80044ec:	2000d113 	.word	0x2000d113
 80044f0:	08013eec 	.word	0x08013eec
 80044f4:	2000d0f0 	.word	0x2000d0f0
 80044f8:	2000d106 	.word	0x2000d106
			}

		} else {

			if (menu_selected_item == 2) {
 80044fc:	4baa      	ldr	r3, [pc, #680]	@ (80047a8 <Oscilloscope_Process+0xbc8>)
 80044fe:	f993 3000 	ldrsb.w	r3, [r3]
 8004502:	2b02      	cmp	r3, #2
 8004504:	d155      	bne.n	80045b2 <Oscilloscope_Process+0x9d2>
				clearTrigger(&display, trigger0);
 8004506:	4ba9      	ldr	r3, [pc, #676]	@ (80047ac <Oscilloscope_Process+0xbcc>)
 8004508:	881b      	ldrh	r3, [r3, #0]
 800450a:	4619      	mov	r1, r3
 800450c:	48a8      	ldr	r0, [pc, #672]	@ (80047b0 <Oscilloscope_Process+0xbd0>)
 800450e:	f7fe fdc8 	bl	80030a2 <clearTrigger>
				trigger0 += delta;
 8004512:	f8d7 31e4 	ldr.w	r3, [r7, #484]	@ 0x1e4
 8004516:	b29a      	uxth	r2, r3
 8004518:	4ba4      	ldr	r3, [pc, #656]	@ (80047ac <Oscilloscope_Process+0xbcc>)
 800451a:	881b      	ldrh	r3, [r3, #0]
 800451c:	4413      	add	r3, r2
 800451e:	b29a      	uxth	r2, r3
 8004520:	4ba2      	ldr	r3, [pc, #648]	@ (80047ac <Oscilloscope_Process+0xbcc>)
 8004522:	801a      	strh	r2, [r3, #0]

				if (trigger0 < 20)
 8004524:	4ba1      	ldr	r3, [pc, #644]	@ (80047ac <Oscilloscope_Process+0xbcc>)
 8004526:	881b      	ldrh	r3, [r3, #0]
 8004528:	2b13      	cmp	r3, #19
 800452a:	d802      	bhi.n	8004532 <Oscilloscope_Process+0x952>
					trigger0 = 20;
 800452c:	4b9f      	ldr	r3, [pc, #636]	@ (80047ac <Oscilloscope_Process+0xbcc>)
 800452e:	2214      	movs	r2, #20
 8004530:	801a      	strh	r2, [r3, #0]

				if (trigger0 > 220)
 8004532:	4b9e      	ldr	r3, [pc, #632]	@ (80047ac <Oscilloscope_Process+0xbcc>)
 8004534:	881b      	ldrh	r3, [r3, #0]
 8004536:	2bdc      	cmp	r3, #220	@ 0xdc
 8004538:	d902      	bls.n	8004540 <Oscilloscope_Process+0x960>
					trigger0 = 220;
 800453a:	4b9c      	ldr	r3, [pc, #624]	@ (80047ac <Oscilloscope_Process+0xbcc>)
 800453c:	22dc      	movs	r2, #220	@ 0xdc
 800453e:	801a      	strh	r2, [r3, #0]

				if (trigger0 > cursor0)
 8004540:	4b9a      	ldr	r3, [pc, #616]	@ (80047ac <Oscilloscope_Process+0xbcc>)
 8004542:	881a      	ldrh	r2, [r3, #0]
 8004544:	4b9b      	ldr	r3, [pc, #620]	@ (80047b4 <Oscilloscope_Process+0xbd4>)
 8004546:	881b      	ldrh	r3, [r3, #0]
 8004548:	429a      	cmp	r2, r3
 800454a:	d903      	bls.n	8004554 <Oscilloscope_Process+0x974>
					trigger0 = cursor0;
 800454c:	4b99      	ldr	r3, [pc, #612]	@ (80047b4 <Oscilloscope_Process+0xbd4>)
 800454e:	881a      	ldrh	r2, [r3, #0]
 8004550:	4b96      	ldr	r3, [pc, #600]	@ (80047ac <Oscilloscope_Process+0xbcc>)
 8004552:	801a      	strh	r2, [r3, #0]

				float uV = -((float)(ylim_uV) * ((8.0f * (trigger0 - cursor0)) / 200.0f));
 8004554:	4b98      	ldr	r3, [pc, #608]	@ (80047b8 <Oscilloscope_Process+0xbd8>)
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	ee07 3a90 	vmov	s15, r3
 800455c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004560:	4b92      	ldr	r3, [pc, #584]	@ (80047ac <Oscilloscope_Process+0xbcc>)
 8004562:	881b      	ldrh	r3, [r3, #0]
 8004564:	461a      	mov	r2, r3
 8004566:	4b93      	ldr	r3, [pc, #588]	@ (80047b4 <Oscilloscope_Process+0xbd4>)
 8004568:	881b      	ldrh	r3, [r3, #0]
 800456a:	1ad3      	subs	r3, r2, r3
 800456c:	ee07 3a90 	vmov	s15, r3
 8004570:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004574:	eef2 6a00 	vmov.f32	s13, #32	@ 0x41000000  8.0
 8004578:	ee67 6aa6 	vmul.f32	s13, s15, s13
 800457c:	ed9f 6a8f 	vldr	s12, [pc, #572]	@ 80047bc <Oscilloscope_Process+0xbdc>
 8004580:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8004584:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004588:	eef1 7a67 	vneg.f32	s15, s15
 800458c:	edc7 7a74 	vstr	s15, [r7, #464]	@ 0x1d0
				trigger0_value = uV * 4096.0f / 3300000.0f;
 8004590:	edd7 7a74 	vldr	s15, [r7, #464]	@ 0x1d0
 8004594:	ed9f 7a8a 	vldr	s14, [pc, #552]	@ 80047c0 <Oscilloscope_Process+0xbe0>
 8004598:	ee27 7a87 	vmul.f32	s14, s15, s14
 800459c:	eddf 6a89 	vldr	s13, [pc, #548]	@ 80047c4 <Oscilloscope_Process+0xbe4>
 80045a0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80045a4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80045a8:	ee17 3a90 	vmov	r3, s15
 80045ac:	b29a      	uxth	r2, r3
 80045ae:	4b86      	ldr	r3, [pc, #536]	@ (80047c8 <Oscilloscope_Process+0xbe8>)
 80045b0:	801a      	strh	r2, [r3, #0]
			}

			if (menu_selected_item == 3) {
 80045b2:	4b7d      	ldr	r3, [pc, #500]	@ (80047a8 <Oscilloscope_Process+0xbc8>)
 80045b4:	f993 3000 	ldrsb.w	r3, [r3]
 80045b8:	2b03      	cmp	r3, #3
 80045ba:	d155      	bne.n	8004668 <Oscilloscope_Process+0xa88>
				clearTrigger(&display, trigger1);
 80045bc:	4b83      	ldr	r3, [pc, #524]	@ (80047cc <Oscilloscope_Process+0xbec>)
 80045be:	881b      	ldrh	r3, [r3, #0]
 80045c0:	4619      	mov	r1, r3
 80045c2:	487b      	ldr	r0, [pc, #492]	@ (80047b0 <Oscilloscope_Process+0xbd0>)
 80045c4:	f7fe fd6d 	bl	80030a2 <clearTrigger>
				trigger1 += delta;
 80045c8:	f8d7 31e4 	ldr.w	r3, [r7, #484]	@ 0x1e4
 80045cc:	b29a      	uxth	r2, r3
 80045ce:	4b7f      	ldr	r3, [pc, #508]	@ (80047cc <Oscilloscope_Process+0xbec>)
 80045d0:	881b      	ldrh	r3, [r3, #0]
 80045d2:	4413      	add	r3, r2
 80045d4:	b29a      	uxth	r2, r3
 80045d6:	4b7d      	ldr	r3, [pc, #500]	@ (80047cc <Oscilloscope_Process+0xbec>)
 80045d8:	801a      	strh	r2, [r3, #0]

				if (trigger1 < 20)
 80045da:	4b7c      	ldr	r3, [pc, #496]	@ (80047cc <Oscilloscope_Process+0xbec>)
 80045dc:	881b      	ldrh	r3, [r3, #0]
 80045de:	2b13      	cmp	r3, #19
 80045e0:	d802      	bhi.n	80045e8 <Oscilloscope_Process+0xa08>
					trigger1 = 20;
 80045e2:	4b7a      	ldr	r3, [pc, #488]	@ (80047cc <Oscilloscope_Process+0xbec>)
 80045e4:	2214      	movs	r2, #20
 80045e6:	801a      	strh	r2, [r3, #0]

				if (trigger1 > 220)
 80045e8:	4b78      	ldr	r3, [pc, #480]	@ (80047cc <Oscilloscope_Process+0xbec>)
 80045ea:	881b      	ldrh	r3, [r3, #0]
 80045ec:	2bdc      	cmp	r3, #220	@ 0xdc
 80045ee:	d902      	bls.n	80045f6 <Oscilloscope_Process+0xa16>
					trigger1 = 220;
 80045f0:	4b76      	ldr	r3, [pc, #472]	@ (80047cc <Oscilloscope_Process+0xbec>)
 80045f2:	22dc      	movs	r2, #220	@ 0xdc
 80045f4:	801a      	strh	r2, [r3, #0]

				if (trigger1 > cursor1)
 80045f6:	4b75      	ldr	r3, [pc, #468]	@ (80047cc <Oscilloscope_Process+0xbec>)
 80045f8:	881a      	ldrh	r2, [r3, #0]
 80045fa:	4b75      	ldr	r3, [pc, #468]	@ (80047d0 <Oscilloscope_Process+0xbf0>)
 80045fc:	881b      	ldrh	r3, [r3, #0]
 80045fe:	429a      	cmp	r2, r3
 8004600:	d903      	bls.n	800460a <Oscilloscope_Process+0xa2a>
					trigger1 = cursor1;
 8004602:	4b73      	ldr	r3, [pc, #460]	@ (80047d0 <Oscilloscope_Process+0xbf0>)
 8004604:	881a      	ldrh	r2, [r3, #0]
 8004606:	4b71      	ldr	r3, [pc, #452]	@ (80047cc <Oscilloscope_Process+0xbec>)
 8004608:	801a      	strh	r2, [r3, #0]

				float uV = -((float)(ylim_uV) * ((8.0f * (trigger1 - cursor1)) / 200.0f));
 800460a:	4b6b      	ldr	r3, [pc, #428]	@ (80047b8 <Oscilloscope_Process+0xbd8>)
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	ee07 3a90 	vmov	s15, r3
 8004612:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004616:	4b6d      	ldr	r3, [pc, #436]	@ (80047cc <Oscilloscope_Process+0xbec>)
 8004618:	881b      	ldrh	r3, [r3, #0]
 800461a:	461a      	mov	r2, r3
 800461c:	4b6c      	ldr	r3, [pc, #432]	@ (80047d0 <Oscilloscope_Process+0xbf0>)
 800461e:	881b      	ldrh	r3, [r3, #0]
 8004620:	1ad3      	subs	r3, r2, r3
 8004622:	ee07 3a90 	vmov	s15, r3
 8004626:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800462a:	eef2 6a00 	vmov.f32	s13, #32	@ 0x41000000  8.0
 800462e:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8004632:	ed9f 6a62 	vldr	s12, [pc, #392]	@ 80047bc <Oscilloscope_Process+0xbdc>
 8004636:	eec6 7a86 	vdiv.f32	s15, s13, s12
 800463a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800463e:	eef1 7a67 	vneg.f32	s15, s15
 8004642:	edc7 7a73 	vstr	s15, [r7, #460]	@ 0x1cc
				trigger1_value = uV * 4096.0f / 3300000.0f;
 8004646:	edd7 7a73 	vldr	s15, [r7, #460]	@ 0x1cc
 800464a:	ed9f 7a5d 	vldr	s14, [pc, #372]	@ 80047c0 <Oscilloscope_Process+0xbe0>
 800464e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8004652:	eddf 6a5c 	vldr	s13, [pc, #368]	@ 80047c4 <Oscilloscope_Process+0xbe4>
 8004656:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800465a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800465e:	ee17 3a90 	vmov	r3, s15
 8004662:	b29a      	uxth	r2, r3
 8004664:	4b5b      	ldr	r3, [pc, #364]	@ (80047d4 <Oscilloscope_Process+0xbf4>)
 8004666:	801a      	strh	r2, [r3, #0]
			}

		}

		event_trigger = 1;
 8004668:	4b5b      	ldr	r3, [pc, #364]	@ (80047d8 <Oscilloscope_Process+0xbf8>)
 800466a:	2201      	movs	r2, #1
 800466c:	701a      	strb	r2, [r3, #0]
		encoder1_prev = encoder1_curr;
 800466e:	f8d7 31d4 	ldr.w	r3, [r7, #468]	@ 0x1d4
 8004672:	b29a      	uxth	r2, r3
 8004674:	4b59      	ldr	r3, [pc, #356]	@ (80047dc <Oscilloscope_Process+0xbfc>)
 8004676:	801a      	strh	r2, [r3, #0]
	}

	// Handle UI redraw trigger events
	if (event_trigger) {
 8004678:	4b57      	ldr	r3, [pc, #348]	@ (80047d8 <Oscilloscope_Process+0xbf8>)
 800467a:	781b      	ldrb	r3, [r3, #0]
 800467c:	2b00      	cmp	r3, #0
 800467e:	d026      	beq.n	80046ce <Oscilloscope_Process+0xaee>
		clearTrigger(&display, trigger0);
 8004680:	4b4a      	ldr	r3, [pc, #296]	@ (80047ac <Oscilloscope_Process+0xbcc>)
 8004682:	881b      	ldrh	r3, [r3, #0]
 8004684:	4619      	mov	r1, r3
 8004686:	484a      	ldr	r0, [pc, #296]	@ (80047b0 <Oscilloscope_Process+0xbd0>)
 8004688:	f7fe fd0b 	bl	80030a2 <clearTrigger>
		clearTrigger(&display, trigger1);
 800468c:	4b4f      	ldr	r3, [pc, #316]	@ (80047cc <Oscilloscope_Process+0xbec>)
 800468e:	881b      	ldrh	r3, [r3, #0]
 8004690:	4619      	mov	r1, r3
 8004692:	4847      	ldr	r0, [pc, #284]	@ (80047b0 <Oscilloscope_Process+0xbd0>)
 8004694:	f7fe fd05 	bl	80030a2 <clearTrigger>

		if (menu_channel0_enabled)
 8004698:	4b51      	ldr	r3, [pc, #324]	@ (80047e0 <Oscilloscope_Process+0xc00>)
 800469a:	781b      	ldrb	r3, [r3, #0]
 800469c:	2b00      	cmp	r3, #0
 800469e:	d007      	beq.n	80046b0 <Oscilloscope_Process+0xad0>
			drawTrigger(&display, trigger0, "T1", ILI9341_YELLOW);
 80046a0:	4b42      	ldr	r3, [pc, #264]	@ (80047ac <Oscilloscope_Process+0xbcc>)
 80046a2:	8819      	ldrh	r1, [r3, #0]
 80046a4:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 80046a8:	4a4e      	ldr	r2, [pc, #312]	@ (80047e4 <Oscilloscope_Process+0xc04>)
 80046aa:	4841      	ldr	r0, [pc, #260]	@ (80047b0 <Oscilloscope_Process+0xbd0>)
 80046ac:	f7fe fd62 	bl	8003174 <drawTrigger>

		if (menu_channel1_enabled)
 80046b0:	4b4d      	ldr	r3, [pc, #308]	@ (80047e8 <Oscilloscope_Process+0xc08>)
 80046b2:	781b      	ldrb	r3, [r3, #0]
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d007      	beq.n	80046c8 <Oscilloscope_Process+0xae8>
			drawTrigger(&display, trigger1, "T2", ILI9341_CYAN);
 80046b8:	4b44      	ldr	r3, [pc, #272]	@ (80047cc <Oscilloscope_Process+0xbec>)
 80046ba:	8819      	ldrh	r1, [r3, #0]
 80046bc:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 80046c0:	4a4a      	ldr	r2, [pc, #296]	@ (80047ec <Oscilloscope_Process+0xc0c>)
 80046c2:	483b      	ldr	r0, [pc, #236]	@ (80047b0 <Oscilloscope_Process+0xbd0>)
 80046c4:	f7fe fd56 	bl	8003174 <drawTrigger>

		event_trigger = 0;
 80046c8:	4b43      	ldr	r3, [pc, #268]	@ (80047d8 <Oscilloscope_Process+0xbf8>)
 80046ca:	2200      	movs	r2, #0
 80046cc:	701a      	strb	r2, [r3, #0]
	}

	// Handle UI redraw selector events
	if (event_selector) {
 80046ce:	4b48      	ldr	r3, [pc, #288]	@ (80047f0 <Oscilloscope_Process+0xc10>)
 80046d0:	781b      	ldrb	r3, [r3, #0]
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d00f      	beq.n	80046f6 <Oscilloscope_Process+0xb16>
		ILI9341_Rectangle(&display, menu_selector_x, menu_selector_y, 38, 13, ILI9341_WHITE);
 80046d6:	4b47      	ldr	r3, [pc, #284]	@ (80047f4 <Oscilloscope_Process+0xc14>)
 80046d8:	8819      	ldrh	r1, [r3, #0]
 80046da:	4b47      	ldr	r3, [pc, #284]	@ (80047f8 <Oscilloscope_Process+0xc18>)
 80046dc:	881a      	ldrh	r2, [r3, #0]
 80046de:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80046e2:	9301      	str	r3, [sp, #4]
 80046e4:	230d      	movs	r3, #13
 80046e6:	9300      	str	r3, [sp, #0]
 80046e8:	2326      	movs	r3, #38	@ 0x26
 80046ea:	4831      	ldr	r0, [pc, #196]	@ (80047b0 <Oscilloscope_Process+0xbd0>)
 80046ec:	f7fd fc72 	bl	8001fd4 <ILI9341_Rectangle>
		event_selector = 0;
 80046f0:	4b3f      	ldr	r3, [pc, #252]	@ (80047f0 <Oscilloscope_Process+0xc10>)
 80046f2:	2200      	movs	r2, #0
 80046f4:	701a      	strb	r2, [r3, #0]
	}

	// Handle UI redraw mode events
	if (event_mode) {
 80046f6:	4b41      	ldr	r3, [pc, #260]	@ (80047fc <Oscilloscope_Process+0xc1c>)
 80046f8:	781b      	ldrb	r3, [r3, #0]
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d040      	beq.n	8004780 <Oscilloscope_Process+0xba0>
		if (mode == 0)
 80046fe:	4b40      	ldr	r3, [pc, #256]	@ (8004800 <Oscilloscope_Process+0xc20>)
 8004700:	781b      	ldrb	r3, [r3, #0]
 8004702:	2b00      	cmp	r3, #0
 8004704:	d110      	bne.n	8004728 <Oscilloscope_Process+0xb48>
			ILI9341_WriteString(&display, 22, 5, " RUN ", Font_7x10, ILI9341_BLACK, ILI9341_GREEN);
 8004706:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 800470a:	9303      	str	r3, [sp, #12]
 800470c:	2300      	movs	r3, #0
 800470e:	9302      	str	r3, [sp, #8]
 8004710:	4a3c      	ldr	r2, [pc, #240]	@ (8004804 <Oscilloscope_Process+0xc24>)
 8004712:	466b      	mov	r3, sp
 8004714:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004718:	e883 0003 	stmia.w	r3, {r0, r1}
 800471c:	4b3a      	ldr	r3, [pc, #232]	@ (8004808 <Oscilloscope_Process+0xc28>)
 800471e:	2205      	movs	r2, #5
 8004720:	2116      	movs	r1, #22
 8004722:	4823      	ldr	r0, [pc, #140]	@ (80047b0 <Oscilloscope_Process+0xbd0>)
 8004724:	f7fd fd11 	bl	800214a <ILI9341_WriteString>

		if (mode == 1)
 8004728:	4b35      	ldr	r3, [pc, #212]	@ (8004800 <Oscilloscope_Process+0xc20>)
 800472a:	781b      	ldrb	r3, [r3, #0]
 800472c:	2b01      	cmp	r3, #1
 800472e:	d10f      	bne.n	8004750 <Oscilloscope_Process+0xb70>
			ILI9341_WriteString(&display, 22, 5, "MENU:", Font_7x10, ILI9341_BLACK, ILI9341_BLUE);
 8004730:	231f      	movs	r3, #31
 8004732:	9303      	str	r3, [sp, #12]
 8004734:	2300      	movs	r3, #0
 8004736:	9302      	str	r3, [sp, #8]
 8004738:	4a32      	ldr	r2, [pc, #200]	@ (8004804 <Oscilloscope_Process+0xc24>)
 800473a:	466b      	mov	r3, sp
 800473c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004740:	e883 0003 	stmia.w	r3, {r0, r1}
 8004744:	4b31      	ldr	r3, [pc, #196]	@ (800480c <Oscilloscope_Process+0xc2c>)
 8004746:	2205      	movs	r2, #5
 8004748:	2116      	movs	r1, #22
 800474a:	4819      	ldr	r0, [pc, #100]	@ (80047b0 <Oscilloscope_Process+0xbd0>)
 800474c:	f7fd fcfd 	bl	800214a <ILI9341_WriteString>

		if (mode == 2)
 8004750:	4b2b      	ldr	r3, [pc, #172]	@ (8004800 <Oscilloscope_Process+0xc20>)
 8004752:	781b      	ldrb	r3, [r3, #0]
 8004754:	2b02      	cmp	r3, #2
 8004756:	d110      	bne.n	800477a <Oscilloscope_Process+0xb9a>
			ILI9341_WriteString(&display, 22, 5, "HOLD:", Font_7x10, ILI9341_BLACK, ILI9341_YELLOW);
 8004758:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 800475c:	9303      	str	r3, [sp, #12]
 800475e:	2300      	movs	r3, #0
 8004760:	9302      	str	r3, [sp, #8]
 8004762:	4a28      	ldr	r2, [pc, #160]	@ (8004804 <Oscilloscope_Process+0xc24>)
 8004764:	466b      	mov	r3, sp
 8004766:	e892 0003 	ldmia.w	r2, {r0, r1}
 800476a:	e883 0003 	stmia.w	r3, {r0, r1}
 800476e:	4b28      	ldr	r3, [pc, #160]	@ (8004810 <Oscilloscope_Process+0xc30>)
 8004770:	2205      	movs	r2, #5
 8004772:	2116      	movs	r1, #22
 8004774:	480e      	ldr	r0, [pc, #56]	@ (80047b0 <Oscilloscope_Process+0xbd0>)
 8004776:	f7fd fce8 	bl	800214a <ILI9341_WriteString>

		event_mode = 0;
 800477a:	4b20      	ldr	r3, [pc, #128]	@ (80047fc <Oscilloscope_Process+0xc1c>)
 800477c:	2200      	movs	r2, #0
 800477e:	701a      	strb	r2, [r3, #0]
	}

	// Handle UI redraw trigger mode events
	if (event_trigger_mode) {
 8004780:	4b24      	ldr	r3, [pc, #144]	@ (8004814 <Oscilloscope_Process+0xc34>)
 8004782:	781b      	ldrb	r3, [r3, #0]
 8004784:	2b00      	cmp	r3, #0
 8004786:	f000 80e0 	beq.w	800494a <Oscilloscope_Process+0xd6a>
		ILI9341_FillRectangle(&display, 61,  5, 33, 10, ILI9341_BLACK);
 800478a:	2300      	movs	r3, #0
 800478c:	9301      	str	r3, [sp, #4]
 800478e:	230a      	movs	r3, #10
 8004790:	9300      	str	r3, [sp, #0]
 8004792:	2321      	movs	r3, #33	@ 0x21
 8004794:	2205      	movs	r2, #5
 8004796:	213d      	movs	r1, #61	@ 0x3d
 8004798:	4805      	ldr	r0, [pc, #20]	@ (80047b0 <Oscilloscope_Process+0xbd0>)
 800479a:	f7fd fbbe 	bl	8001f1a <ILI9341_FillRectangle>
		ILI9341_FillRectangle(&display, 61, 14, 11, 1, ILI9341_WHITE);
 800479e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80047a2:	9301      	str	r3, [sp, #4]
 80047a4:	e038      	b.n	8004818 <Oscilloscope_Process+0xc38>
 80047a6:	bf00      	nop
 80047a8:	2000d10d 	.word	0x2000d10d
 80047ac:	2000d0f8 	.word	0x2000d0f8
 80047b0:	2000f598 	.word	0x2000f598
 80047b4:	2000d0f4 	.word	0x2000d0f4
 80047b8:	2000d0f0 	.word	0x2000d0f0
 80047bc:	43480000 	.word	0x43480000
 80047c0:	45800000 	.word	0x45800000
 80047c4:	4a496a80 	.word	0x4a496a80
 80047c8:	2000d0fc 	.word	0x2000d0fc
 80047cc:	2000d0fa 	.word	0x2000d0fa
 80047d0:	2000d0f6 	.word	0x2000d0f6
 80047d4:	2000d0fe 	.word	0x2000d0fe
 80047d8:	2000d103 	.word	0x2000d103
 80047dc:	2001561e 	.word	0x2001561e
 80047e0:	2000d10b 	.word	0x2000d10b
 80047e4:	08013dc8 	.word	0x08013dc8
 80047e8:	2000d10c 	.word	0x2000d10c
 80047ec:	08013dcc 	.word	0x08013dcc
 80047f0:	2000d107 	.word	0x2000d107
 80047f4:	2000d10e 	.word	0x2000d10e
 80047f8:	2000d110 	.word	0x2000d110
 80047fc:	2000d101 	.word	0x2000d101
 8004800:	2001561a 	.word	0x2001561a
 8004804:	20000000 	.word	0x20000000
 8004808:	08013dd0 	.word	0x08013dd0
 800480c:	08013dd8 	.word	0x08013dd8
 8004810:	08013de0 	.word	0x08013de0
 8004814:	2000d108 	.word	0x2000d108
 8004818:	2301      	movs	r3, #1
 800481a:	9300      	str	r3, [sp, #0]
 800481c:	230b      	movs	r3, #11
 800481e:	220e      	movs	r2, #14
 8004820:	213d      	movs	r1, #61	@ 0x3d
 8004822:	48aa      	ldr	r0, [pc, #680]	@ (8004acc <Oscilloscope_Process+0xeec>)
 8004824:	f7fd fb79 	bl	8001f1a <ILI9341_FillRectangle>
		ILI9341_FillRectangle(&display, 72,  5, 11, 1, ILI9341_WHITE);
 8004828:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800482c:	9301      	str	r3, [sp, #4]
 800482e:	2301      	movs	r3, #1
 8004830:	9300      	str	r3, [sp, #0]
 8004832:	230b      	movs	r3, #11
 8004834:	2205      	movs	r2, #5
 8004836:	2148      	movs	r1, #72	@ 0x48
 8004838:	48a4      	ldr	r0, [pc, #656]	@ (8004acc <Oscilloscope_Process+0xeec>)
 800483a:	f7fd fb6e 	bl	8001f1a <ILI9341_FillRectangle>
		ILI9341_FillRectangle(&display, 83, 14, 11, 1, ILI9341_WHITE);
 800483e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8004842:	9301      	str	r3, [sp, #4]
 8004844:	2301      	movs	r3, #1
 8004846:	9300      	str	r3, [sp, #0]
 8004848:	230b      	movs	r3, #11
 800484a:	220e      	movs	r2, #14
 800484c:	2153      	movs	r1, #83	@ 0x53
 800484e:	489f      	ldr	r0, [pc, #636]	@ (8004acc <Oscilloscope_Process+0xeec>)
 8004850:	f7fd fb63 	bl	8001f1a <ILI9341_FillRectangle>
		ILI9341_FillRectangle(&display, 72,  5, 1, 10, ILI9341_WHITE);
 8004854:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8004858:	9301      	str	r3, [sp, #4]
 800485a:	230a      	movs	r3, #10
 800485c:	9300      	str	r3, [sp, #0]
 800485e:	2301      	movs	r3, #1
 8004860:	2205      	movs	r2, #5
 8004862:	2148      	movs	r1, #72	@ 0x48
 8004864:	4899      	ldr	r0, [pc, #612]	@ (8004acc <Oscilloscope_Process+0xeec>)
 8004866:	f7fd fb58 	bl	8001f1a <ILI9341_FillRectangle>
		ILI9341_FillRectangle(&display, 82,  5, 1, 10, ILI9341_WHITE);
 800486a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800486e:	9301      	str	r3, [sp, #4]
 8004870:	230a      	movs	r3, #10
 8004872:	9300      	str	r3, [sp, #0]
 8004874:	2301      	movs	r3, #1
 8004876:	2205      	movs	r2, #5
 8004878:	2152      	movs	r1, #82	@ 0x52
 800487a:	4894      	ldr	r0, [pc, #592]	@ (8004acc <Oscilloscope_Process+0xeec>)
 800487c:	f7fd fb4d 	bl	8001f1a <ILI9341_FillRectangle>

		if (trigger_mode == 0) {
 8004880:	4b93      	ldr	r3, [pc, #588]	@ (8004ad0 <Oscilloscope_Process+0xef0>)
 8004882:	781b      	ldrb	r3, [r3, #0]
 8004884:	2b00      	cmp	r3, #0
 8004886:	d12f      	bne.n	80048e8 <Oscilloscope_Process+0xd08>
			for (uint8_t i = 0; i < 4; i++) {
 8004888:	2300      	movs	r3, #0
 800488a:	f887 31e3 	strb.w	r3, [r7, #483]	@ 0x1e3
 800488e:	e026      	b.n	80048de <Oscilloscope_Process+0xcfe>
				for (uint8_t j = i; j < (7 - i); j++)
 8004890:	f897 31e3 	ldrb.w	r3, [r7, #483]	@ 0x1e3
 8004894:	f887 31e2 	strb.w	r3, [r7, #482]	@ 0x1e2
 8004898:	e014      	b.n	80048c4 <Oscilloscope_Process+0xce4>
					ILI9341_DrawPixel(&display, 69 + j, 11 - i, ILI9341_GREEN);
 800489a:	f897 31e2 	ldrb.w	r3, [r7, #482]	@ 0x1e2
 800489e:	b29b      	uxth	r3, r3
 80048a0:	3345      	adds	r3, #69	@ 0x45
 80048a2:	b299      	uxth	r1, r3
 80048a4:	f897 31e3 	ldrb.w	r3, [r7, #483]	@ 0x1e3
 80048a8:	b29b      	uxth	r3, r3
 80048aa:	f1c3 030b 	rsb	r3, r3, #11
 80048ae:	b29a      	uxth	r2, r3
 80048b0:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 80048b4:	4885      	ldr	r0, [pc, #532]	@ (8004acc <Oscilloscope_Process+0xeec>)
 80048b6:	f7fd fa25 	bl	8001d04 <ILI9341_DrawPixel>
				for (uint8_t j = i; j < (7 - i); j++)
 80048ba:	f897 31e2 	ldrb.w	r3, [r7, #482]	@ 0x1e2
 80048be:	3301      	adds	r3, #1
 80048c0:	f887 31e2 	strb.w	r3, [r7, #482]	@ 0x1e2
 80048c4:	f897 21e2 	ldrb.w	r2, [r7, #482]	@ 0x1e2
 80048c8:	f897 31e3 	ldrb.w	r3, [r7, #483]	@ 0x1e3
 80048cc:	f1c3 0307 	rsb	r3, r3, #7
 80048d0:	429a      	cmp	r2, r3
 80048d2:	dbe2      	blt.n	800489a <Oscilloscope_Process+0xcba>
			for (uint8_t i = 0; i < 4; i++) {
 80048d4:	f897 31e3 	ldrb.w	r3, [r7, #483]	@ 0x1e3
 80048d8:	3301      	adds	r3, #1
 80048da:	f887 31e3 	strb.w	r3, [r7, #483]	@ 0x1e3
 80048de:	f897 31e3 	ldrb.w	r3, [r7, #483]	@ 0x1e3
 80048e2:	2b03      	cmp	r3, #3
 80048e4:	d9d4      	bls.n	8004890 <Oscilloscope_Process+0xcb0>
 80048e6:	e02d      	b.n	8004944 <Oscilloscope_Process+0xd64>
			}
		} else {
			for (uint8_t i = 0; i < 4; i++) {
 80048e8:	2300      	movs	r3, #0
 80048ea:	f887 31e1 	strb.w	r3, [r7, #481]	@ 0x1e1
 80048ee:	e025      	b.n	800493c <Oscilloscope_Process+0xd5c>
			  for (uint8_t j = i; j < (7 - i); j++)
 80048f0:	f897 31e1 	ldrb.w	r3, [r7, #481]	@ 0x1e1
 80048f4:	f887 31e0 	strb.w	r3, [r7, #480]	@ 0x1e0
 80048f8:	e013      	b.n	8004922 <Oscilloscope_Process+0xd42>
				  ILI9341_DrawPixel(&display, 79 + j, 8 + i, ILI9341_RED);
 80048fa:	f897 31e0 	ldrb.w	r3, [r7, #480]	@ 0x1e0
 80048fe:	b29b      	uxth	r3, r3
 8004900:	334f      	adds	r3, #79	@ 0x4f
 8004902:	b299      	uxth	r1, r3
 8004904:	f897 31e1 	ldrb.w	r3, [r7, #481]	@ 0x1e1
 8004908:	b29b      	uxth	r3, r3
 800490a:	3308      	adds	r3, #8
 800490c:	b29a      	uxth	r2, r3
 800490e:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8004912:	486e      	ldr	r0, [pc, #440]	@ (8004acc <Oscilloscope_Process+0xeec>)
 8004914:	f7fd f9f6 	bl	8001d04 <ILI9341_DrawPixel>
			  for (uint8_t j = i; j < (7 - i); j++)
 8004918:	f897 31e0 	ldrb.w	r3, [r7, #480]	@ 0x1e0
 800491c:	3301      	adds	r3, #1
 800491e:	f887 31e0 	strb.w	r3, [r7, #480]	@ 0x1e0
 8004922:	f897 21e0 	ldrb.w	r2, [r7, #480]	@ 0x1e0
 8004926:	f897 31e1 	ldrb.w	r3, [r7, #481]	@ 0x1e1
 800492a:	f1c3 0307 	rsb	r3, r3, #7
 800492e:	429a      	cmp	r2, r3
 8004930:	dbe3      	blt.n	80048fa <Oscilloscope_Process+0xd1a>
			for (uint8_t i = 0; i < 4; i++) {
 8004932:	f897 31e1 	ldrb.w	r3, [r7, #481]	@ 0x1e1
 8004936:	3301      	adds	r3, #1
 8004938:	f887 31e1 	strb.w	r3, [r7, #481]	@ 0x1e1
 800493c:	f897 31e1 	ldrb.w	r3, [r7, #481]	@ 0x1e1
 8004940:	2b03      	cmp	r3, #3
 8004942:	d9d5      	bls.n	80048f0 <Oscilloscope_Process+0xd10>
			}
		}

		event_trigger_mode = 0;
 8004944:	4b63      	ldr	r3, [pc, #396]	@ (8004ad4 <Oscilloscope_Process+0xef4>)
 8004946:	2200      	movs	r2, #0
 8004948:	701a      	strb	r2, [r3, #0]
	}

	// Handle UI redraw seconds events
	if (event_seconds) {
 800494a:	4b63      	ldr	r3, [pc, #396]	@ (8004ad8 <Oscilloscope_Process+0xef8>)
 800494c:	781b      	ldrb	r3, [r3, #0]
 800494e:	2b00      	cmp	r3, #0
 8004950:	d03f      	beq.n	80049d2 <Oscilloscope_Process+0xdf2>
		if (xlim_us >= 1000000)
 8004952:	4b62      	ldr	r3, [pc, #392]	@ (8004adc <Oscilloscope_Process+0xefc>)
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	4a62      	ldr	r2, [pc, #392]	@ (8004ae0 <Oscilloscope_Process+0xf00>)
 8004958:	4293      	cmp	r3, r2
 800495a:	d90c      	bls.n	8004976 <Oscilloscope_Process+0xd96>
			snprintf(string, 255, "%3li s",  xlim_us / 1000000);
 800495c:	4b5f      	ldr	r3, [pc, #380]	@ (8004adc <Oscilloscope_Process+0xefc>)
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	4a60      	ldr	r2, [pc, #384]	@ (8004ae4 <Oscilloscope_Process+0xf04>)
 8004962:	fba2 2303 	umull	r2, r3, r2, r3
 8004966:	0c9b      	lsrs	r3, r3, #18
 8004968:	f107 00cc 	add.w	r0, r7, #204	@ 0xcc
 800496c:	4a5e      	ldr	r2, [pc, #376]	@ (8004ae8 <Oscilloscope_Process+0xf08>)
 800496e:	21ff      	movs	r1, #255	@ 0xff
 8004970:	f00b fcf2 	bl	8010358 <sniprintf>
 8004974:	e019      	b.n	80049aa <Oscilloscope_Process+0xdca>
		else if (xlim_us >= 1000)
 8004976:	4b59      	ldr	r3, [pc, #356]	@ (8004adc <Oscilloscope_Process+0xefc>)
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800497e:	d30c      	bcc.n	800499a <Oscilloscope_Process+0xdba>
			snprintf(string, 255, "%3lims", xlim_us / 1000);
 8004980:	4b56      	ldr	r3, [pc, #344]	@ (8004adc <Oscilloscope_Process+0xefc>)
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	4a59      	ldr	r2, [pc, #356]	@ (8004aec <Oscilloscope_Process+0xf0c>)
 8004986:	fba2 2303 	umull	r2, r3, r2, r3
 800498a:	099b      	lsrs	r3, r3, #6
 800498c:	f107 00cc 	add.w	r0, r7, #204	@ 0xcc
 8004990:	4a57      	ldr	r2, [pc, #348]	@ (8004af0 <Oscilloscope_Process+0xf10>)
 8004992:	21ff      	movs	r1, #255	@ 0xff
 8004994:	f00b fce0 	bl	8010358 <sniprintf>
 8004998:	e007      	b.n	80049aa <Oscilloscope_Process+0xdca>
		else
			snprintf(string, 255, "%3lius", xlim_us);
 800499a:	4b50      	ldr	r3, [pc, #320]	@ (8004adc <Oscilloscope_Process+0xefc>)
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	f107 00cc 	add.w	r0, r7, #204	@ 0xcc
 80049a2:	4a54      	ldr	r2, [pc, #336]	@ (8004af4 <Oscilloscope_Process+0xf14>)
 80049a4:	21ff      	movs	r1, #255	@ 0xff
 80049a6:	f00b fcd7 	bl	8010358 <sniprintf>

		ILI9341_WriteString(&display, 22, 225, string, Font_7x10, ILI9341_BLACK, ILI9341_WHITE);
 80049aa:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 80049ae:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80049b2:	9203      	str	r2, [sp, #12]
 80049b4:	2200      	movs	r2, #0
 80049b6:	9202      	str	r2, [sp, #8]
 80049b8:	494f      	ldr	r1, [pc, #316]	@ (8004af8 <Oscilloscope_Process+0xf18>)
 80049ba:	466a      	mov	r2, sp
 80049bc:	c903      	ldmia	r1, {r0, r1}
 80049be:	e882 0003 	stmia.w	r2, {r0, r1}
 80049c2:	22e1      	movs	r2, #225	@ 0xe1
 80049c4:	2116      	movs	r1, #22
 80049c6:	4841      	ldr	r0, [pc, #260]	@ (8004acc <Oscilloscope_Process+0xeec>)
 80049c8:	f7fd fbbf 	bl	800214a <ILI9341_WriteString>

		event_seconds = 0;
 80049cc:	4b42      	ldr	r3, [pc, #264]	@ (8004ad8 <Oscilloscope_Process+0xef8>)
 80049ce:	2200      	movs	r2, #0
 80049d0:	701a      	strb	r2, [r3, #0]
	}

	// Handle UI redraw voltage events
	if (event_voltage) {
 80049d2:	4b4a      	ldr	r3, [pc, #296]	@ (8004afc <Oscilloscope_Process+0xf1c>)
 80049d4:	781b      	ldrb	r3, [r3, #0]
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d03f      	beq.n	8004a5a <Oscilloscope_Process+0xe7a>
		if (ylim_uV >= 1000000)
 80049da:	4b49      	ldr	r3, [pc, #292]	@ (8004b00 <Oscilloscope_Process+0xf20>)
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	4a40      	ldr	r2, [pc, #256]	@ (8004ae0 <Oscilloscope_Process+0xf00>)
 80049e0:	4293      	cmp	r3, r2
 80049e2:	d90c      	bls.n	80049fe <Oscilloscope_Process+0xe1e>
			snprintf(string, 255, "%3li V",  ylim_uV / 1000000);
 80049e4:	4b46      	ldr	r3, [pc, #280]	@ (8004b00 <Oscilloscope_Process+0xf20>)
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	4a3e      	ldr	r2, [pc, #248]	@ (8004ae4 <Oscilloscope_Process+0xf04>)
 80049ea:	fba2 2303 	umull	r2, r3, r2, r3
 80049ee:	0c9b      	lsrs	r3, r3, #18
 80049f0:	f107 00cc 	add.w	r0, r7, #204	@ 0xcc
 80049f4:	4a43      	ldr	r2, [pc, #268]	@ (8004b04 <Oscilloscope_Process+0xf24>)
 80049f6:	21ff      	movs	r1, #255	@ 0xff
 80049f8:	f00b fcae 	bl	8010358 <sniprintf>
 80049fc:	e019      	b.n	8004a32 <Oscilloscope_Process+0xe52>
		else if (ylim_uV >= 1000)
 80049fe:	4b40      	ldr	r3, [pc, #256]	@ (8004b00 <Oscilloscope_Process+0xf20>)
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004a06:	d30c      	bcc.n	8004a22 <Oscilloscope_Process+0xe42>
			snprintf(string, 255, "%3limV", ylim_uV / 1000);
 8004a08:	4b3d      	ldr	r3, [pc, #244]	@ (8004b00 <Oscilloscope_Process+0xf20>)
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	4a37      	ldr	r2, [pc, #220]	@ (8004aec <Oscilloscope_Process+0xf0c>)
 8004a0e:	fba2 2303 	umull	r2, r3, r2, r3
 8004a12:	099b      	lsrs	r3, r3, #6
 8004a14:	f107 00cc 	add.w	r0, r7, #204	@ 0xcc
 8004a18:	4a3b      	ldr	r2, [pc, #236]	@ (8004b08 <Oscilloscope_Process+0xf28>)
 8004a1a:	21ff      	movs	r1, #255	@ 0xff
 8004a1c:	f00b fc9c 	bl	8010358 <sniprintf>
 8004a20:	e007      	b.n	8004a32 <Oscilloscope_Process+0xe52>
		else
			snprintf(string, 255, "%3liuV", ylim_uV);
 8004a22:	4b37      	ldr	r3, [pc, #220]	@ (8004b00 <Oscilloscope_Process+0xf20>)
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	f107 00cc 	add.w	r0, r7, #204	@ 0xcc
 8004a2a:	4a38      	ldr	r2, [pc, #224]	@ (8004b0c <Oscilloscope_Process+0xf2c>)
 8004a2c:	21ff      	movs	r1, #255	@ 0xff
 8004a2e:	f00b fc93 	bl	8010358 <sniprintf>

		ILI9341_WriteString(&display, 60, 225, string, Font_7x10, ILI9341_BLACK, ILI9341_WHITE);
 8004a32:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8004a36:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004a3a:	9203      	str	r2, [sp, #12]
 8004a3c:	2200      	movs	r2, #0
 8004a3e:	9202      	str	r2, [sp, #8]
 8004a40:	492d      	ldr	r1, [pc, #180]	@ (8004af8 <Oscilloscope_Process+0xf18>)
 8004a42:	466a      	mov	r2, sp
 8004a44:	c903      	ldmia	r1, {r0, r1}
 8004a46:	e882 0003 	stmia.w	r2, {r0, r1}
 8004a4a:	22e1      	movs	r2, #225	@ 0xe1
 8004a4c:	213c      	movs	r1, #60	@ 0x3c
 8004a4e:	481f      	ldr	r0, [pc, #124]	@ (8004acc <Oscilloscope_Process+0xeec>)
 8004a50:	f7fd fb7b 	bl	800214a <ILI9341_WriteString>

		event_voltage = 0;
 8004a54:	4b29      	ldr	r3, [pc, #164]	@ (8004afc <Oscilloscope_Process+0xf1c>)
 8004a56:	2200      	movs	r2, #0
 8004a58:	701a      	strb	r2, [r3, #0]
	}

	snprintf(string, 255, "T:%i%i", event_trigger0_detected, event_trigger1_detected);
 8004a5a:	4b2d      	ldr	r3, [pc, #180]	@ (8004b10 <Oscilloscope_Process+0xf30>)
 8004a5c:	781b      	ldrb	r3, [r3, #0]
 8004a5e:	461a      	mov	r2, r3
 8004a60:	4b2c      	ldr	r3, [pc, #176]	@ (8004b14 <Oscilloscope_Process+0xf34>)
 8004a62:	781b      	ldrb	r3, [r3, #0]
 8004a64:	f107 00cc 	add.w	r0, r7, #204	@ 0xcc
 8004a68:	9300      	str	r3, [sp, #0]
 8004a6a:	4613      	mov	r3, r2
 8004a6c:	4a2a      	ldr	r2, [pc, #168]	@ (8004b18 <Oscilloscope_Process+0xf38>)
 8004a6e:	21ff      	movs	r1, #255	@ 0xff
 8004a70:	f00b fc72 	bl	8010358 <sniprintf>
	ILI9341_WriteString(&display, 195, 5, string, Font_7x10, ILI9341_WHITE, ILI9341_BLACK);
 8004a74:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8004a78:	2200      	movs	r2, #0
 8004a7a:	9203      	str	r2, [sp, #12]
 8004a7c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004a80:	9202      	str	r2, [sp, #8]
 8004a82:	491d      	ldr	r1, [pc, #116]	@ (8004af8 <Oscilloscope_Process+0xf18>)
 8004a84:	466a      	mov	r2, sp
 8004a86:	c903      	ldmia	r1, {r0, r1}
 8004a88:	e882 0003 	stmia.w	r2, {r0, r1}
 8004a8c:	2205      	movs	r2, #5
 8004a8e:	21c3      	movs	r1, #195	@ 0xc3
 8004a90:	480e      	ldr	r0, [pc, #56]	@ (8004acc <Oscilloscope_Process+0xeec>)
 8004a92:	f7fd fb5a 	bl	800214a <ILI9341_WriteString>

	if (menu_channel1_enabled && menu_selected_item == 3) {
 8004a96:	4b21      	ldr	r3, [pc, #132]	@ (8004b1c <Oscilloscope_Process+0xf3c>)
 8004a98:	781b      	ldrb	r3, [r3, #0]
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d048      	beq.n	8004b30 <Oscilloscope_Process+0xf50>
 8004a9e:	4b20      	ldr	r3, [pc, #128]	@ (8004b20 <Oscilloscope_Process+0xf40>)
 8004aa0:	f993 3000 	ldrsb.w	r3, [r3]
 8004aa4:	2b03      	cmp	r3, #3
 8004aa6:	d143      	bne.n	8004b30 <Oscilloscope_Process+0xf50>
		//if (adc_period1_detected)
			drawSignalParam(&display, string, 255, adc_max[1], adc_min[1], adc_period[1]);
 8004aa8:	4b1e      	ldr	r3, [pc, #120]	@ (8004b24 <Oscilloscope_Process+0xf44>)
 8004aaa:	885b      	ldrh	r3, [r3, #2]
 8004aac:	b298      	uxth	r0, r3
 8004aae:	4b1e      	ldr	r3, [pc, #120]	@ (8004b28 <Oscilloscope_Process+0xf48>)
 8004ab0:	885b      	ldrh	r3, [r3, #2]
 8004ab2:	b29b      	uxth	r3, r3
 8004ab4:	4a1d      	ldr	r2, [pc, #116]	@ (8004b2c <Oscilloscope_Process+0xf4c>)
 8004ab6:	6852      	ldr	r2, [r2, #4]
 8004ab8:	f107 01cc 	add.w	r1, r7, #204	@ 0xcc
 8004abc:	9201      	str	r2, [sp, #4]
 8004abe:	9300      	str	r3, [sp, #0]
 8004ac0:	4603      	mov	r3, r0
 8004ac2:	22ff      	movs	r2, #255	@ 0xff
 8004ac4:	4801      	ldr	r0, [pc, #4]	@ (8004acc <Oscilloscope_Process+0xeec>)
 8004ac6:	f7fe ff63 	bl	8003990 <drawSignalParam>
 8004aca:	e046      	b.n	8004b5a <Oscilloscope_Process+0xf7a>
 8004acc:	2000f598 	.word	0x2000f598
 8004ad0:	20015614 	.word	0x20015614
 8004ad4:	2000d108 	.word	0x2000d108
 8004ad8:	2000d105 	.word	0x2000d105
 8004adc:	2000d0ec 	.word	0x2000d0ec
 8004ae0:	000f423f 	.word	0x000f423f
 8004ae4:	431bde83 	.word	0x431bde83
 8004ae8:	08013de8 	.word	0x08013de8
 8004aec:	10624dd3 	.word	0x10624dd3
 8004af0:	08013df0 	.word	0x08013df0
 8004af4:	08013df8 	.word	0x08013df8
 8004af8:	20000000 	.word	0x20000000
 8004afc:	2000d106 	.word	0x2000d106
 8004b00:	2000d0f0 	.word	0x2000d0f0
 8004b04:	08013e00 	.word	0x08013e00
 8004b08:	08013e08 	.word	0x08013e08
 8004b0c:	08013e10 	.word	0x08013e10
 8004b10:	2000d109 	.word	0x2000d109
 8004b14:	2000d10a 	.word	0x2000d10a
 8004b18:	08013e18 	.word	0x08013e18
 8004b1c:	2000d10c 	.word	0x2000d10c
 8004b20:	2000d10d 	.word	0x2000d10d
 8004b24:	2000f604 	.word	0x2000f604
 8004b28:	2000d0e4 	.word	0x2000d0e4
 8004b2c:	2000f608 	.word	0x2000f608
	} else if (menu_channel0_enabled) {
 8004b30:	4b39      	ldr	r3, [pc, #228]	@ (8004c18 <Oscilloscope_Process+0x1038>)
 8004b32:	781b      	ldrb	r3, [r3, #0]
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d010      	beq.n	8004b5a <Oscilloscope_Process+0xf7a>
		//if (adc_period0_detected)
			drawSignalParam(&display, string, 255, adc_max[0], adc_min[0], adc_period[0]);
 8004b38:	4b38      	ldr	r3, [pc, #224]	@ (8004c1c <Oscilloscope_Process+0x103c>)
 8004b3a:	881b      	ldrh	r3, [r3, #0]
 8004b3c:	b298      	uxth	r0, r3
 8004b3e:	4b38      	ldr	r3, [pc, #224]	@ (8004c20 <Oscilloscope_Process+0x1040>)
 8004b40:	881b      	ldrh	r3, [r3, #0]
 8004b42:	b29b      	uxth	r3, r3
 8004b44:	4a37      	ldr	r2, [pc, #220]	@ (8004c24 <Oscilloscope_Process+0x1044>)
 8004b46:	6812      	ldr	r2, [r2, #0]
 8004b48:	f107 01cc 	add.w	r1, r7, #204	@ 0xcc
 8004b4c:	9201      	str	r2, [sp, #4]
 8004b4e:	9300      	str	r3, [sp, #0]
 8004b50:	4603      	mov	r3, r0
 8004b52:	22ff      	movs	r2, #255	@ 0xff
 8004b54:	4834      	ldr	r0, [pc, #208]	@ (8004c28 <Oscilloscope_Process+0x1048>)
 8004b56:	f7fe ff1b 	bl	8003990 <drawSignalParam>
	}

	// Restart ADC ...
	if (local_event_adc) {
 8004b5a:	f897 31ef 	ldrb.w	r3, [r7, #495]	@ 0x1ef
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d04e      	beq.n	8004c00 <Oscilloscope_Process+0x1020>
		adc_reset_cyccnt = 1;
 8004b62:	4b32      	ldr	r3, [pc, #200]	@ (8004c2c <Oscilloscope_Process+0x104c>)
 8004b64:	2201      	movs	r2, #1
 8004b66:	701a      	strb	r2, [r3, #0]
		adc0_length = 0;
 8004b68:	4b31      	ldr	r3, [pc, #196]	@ (8004c30 <Oscilloscope_Process+0x1050>)
 8004b6a:	2200      	movs	r2, #0
 8004b6c:	601a      	str	r2, [r3, #0]
		adc1_length = 0;
 8004b6e:	4b31      	ldr	r3, [pc, #196]	@ (8004c34 <Oscilloscope_Process+0x1054>)
 8004b70:	2200      	movs	r2, #0
 8004b72:	601a      	str	r2, [r3, #0]
		adc_max[0] = 0;
 8004b74:	4b29      	ldr	r3, [pc, #164]	@ (8004c1c <Oscilloscope_Process+0x103c>)
 8004b76:	2200      	movs	r2, #0
 8004b78:	801a      	strh	r2, [r3, #0]
		adc_max[1] = 0;
 8004b7a:	4b28      	ldr	r3, [pc, #160]	@ (8004c1c <Oscilloscope_Process+0x103c>)
 8004b7c:	2200      	movs	r2, #0
 8004b7e:	805a      	strh	r2, [r3, #2]
		adc_min[0] = -1;
 8004b80:	4b27      	ldr	r3, [pc, #156]	@ (8004c20 <Oscilloscope_Process+0x1040>)
 8004b82:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004b86:	801a      	strh	r2, [r3, #0]
		adc_min[1] = -1;
 8004b88:	4b25      	ldr	r3, [pc, #148]	@ (8004c20 <Oscilloscope_Process+0x1040>)
 8004b8a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004b8e:	805a      	strh	r2, [r3, #2]
		adc_period[0] = 0;
 8004b90:	4b24      	ldr	r3, [pc, #144]	@ (8004c24 <Oscilloscope_Process+0x1044>)
 8004b92:	2200      	movs	r2, #0
 8004b94:	601a      	str	r2, [r3, #0]
		adc_period[1] = 0;
 8004b96:	4b23      	ldr	r3, [pc, #140]	@ (8004c24 <Oscilloscope_Process+0x1044>)
 8004b98:	2200      	movs	r2, #0
 8004b9a:	605a      	str	r2, [r3, #4]
		adc_period0_detected = 0;
 8004b9c:	4b26      	ldr	r3, [pc, #152]	@ (8004c38 <Oscilloscope_Process+0x1058>)
 8004b9e:	2200      	movs	r2, #0
 8004ba0:	701a      	strb	r2, [r3, #0]
		adc_period1_detected = 0;
 8004ba2:	4b26      	ldr	r3, [pc, #152]	@ (8004c3c <Oscilloscope_Process+0x105c>)
 8004ba4:	2200      	movs	r2, #0
 8004ba6:	701a      	strb	r2, [r3, #0]
		event_trigger0_detected = 0;
 8004ba8:	4b25      	ldr	r3, [pc, #148]	@ (8004c40 <Oscilloscope_Process+0x1060>)
 8004baa:	2200      	movs	r2, #0
 8004bac:	701a      	strb	r2, [r3, #0]
		event_trigger1_detected = 0;
 8004bae:	4b25      	ldr	r3, [pc, #148]	@ (8004c44 <Oscilloscope_Process+0x1064>)
 8004bb0:	2200      	movs	r2, #0
 8004bb2:	701a      	strb	r2, [r3, #0]

		if (menu_channel0_enabled)
 8004bb4:	4b18      	ldr	r3, [pc, #96]	@ (8004c18 <Oscilloscope_Process+0x1038>)
 8004bb6:	781b      	ldrb	r3, [r3, #0]
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d003      	beq.n	8004bc4 <Oscilloscope_Process+0xfe4>
			adc0_filled = 0;
 8004bbc:	4b22      	ldr	r3, [pc, #136]	@ (8004c48 <Oscilloscope_Process+0x1068>)
 8004bbe:	2200      	movs	r2, #0
 8004bc0:	701a      	strb	r2, [r3, #0]
 8004bc2:	e002      	b.n	8004bca <Oscilloscope_Process+0xfea>
		else
			adc0_filled = 1;
 8004bc4:	4b20      	ldr	r3, [pc, #128]	@ (8004c48 <Oscilloscope_Process+0x1068>)
 8004bc6:	2201      	movs	r2, #1
 8004bc8:	701a      	strb	r2, [r3, #0]

		if (menu_channel1_enabled)
 8004bca:	4b20      	ldr	r3, [pc, #128]	@ (8004c4c <Oscilloscope_Process+0x106c>)
 8004bcc:	781b      	ldrb	r3, [r3, #0]
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d003      	beq.n	8004bda <Oscilloscope_Process+0xffa>
			adc1_filled = 0;
 8004bd2:	4b1f      	ldr	r3, [pc, #124]	@ (8004c50 <Oscilloscope_Process+0x1070>)
 8004bd4:	2200      	movs	r2, #0
 8004bd6:	701a      	strb	r2, [r3, #0]
 8004bd8:	e002      	b.n	8004be0 <Oscilloscope_Process+0x1000>
		else
			adc1_filled = 1;
 8004bda:	4b1d      	ldr	r3, [pc, #116]	@ (8004c50 <Oscilloscope_Process+0x1070>)
 8004bdc:	2201      	movs	r2, #1
 8004bde:	701a      	strb	r2, [r3, #0]

		if (adc_immediate) {
 8004be0:	4b1c      	ldr	r3, [pc, #112]	@ (8004c54 <Oscilloscope_Process+0x1074>)
 8004be2:	781b      	ldrb	r3, [r3, #0]
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d005      	beq.n	8004bf4 <Oscilloscope_Process+0x1014>
			// The ADC starts immediately after the previous measurement is handled
			HAL_ADC_Start_DMA(&hadc1, (uint32_t*)&adc_data, 2);
 8004be8:	2202      	movs	r2, #2
 8004bea:	491b      	ldr	r1, [pc, #108]	@ (8004c58 <Oscilloscope_Process+0x1078>)
 8004bec:	481b      	ldr	r0, [pc, #108]	@ (8004c5c <Oscilloscope_Process+0x107c>)
 8004bee:	f000 ff19 	bl	8005a24 <HAL_ADC_Start_DMA>
 8004bf2:	e002      	b.n	8004bfa <Oscilloscope_Process+0x101a>
		} else {
			// ADC starts by timer
			HAL_TIM_Base_Start_IT(&htim10);
 8004bf4:	481a      	ldr	r0, [pc, #104]	@ (8004c60 <Oscilloscope_Process+0x1080>)
 8004bf6:	f004 fad9 	bl	80091ac <HAL_TIM_Base_Start_IT>
		}

		local_event_adc = 0;
 8004bfa:	2300      	movs	r3, #0
 8004bfc:	f887 31ef 	strb.w	r3, [r7, #495]	@ 0x1ef
	}

	frames++;
 8004c00:	4b18      	ldr	r3, [pc, #96]	@ (8004c64 <Oscilloscope_Process+0x1084>)
 8004c02:	781b      	ldrb	r3, [r3, #0]
 8004c04:	3301      	adds	r3, #1
 8004c06:	b2da      	uxtb	r2, r3
 8004c08:	4b16      	ldr	r3, [pc, #88]	@ (8004c64 <Oscilloscope_Process+0x1084>)
 8004c0a:	701a      	strb	r2, [r3, #0]

}
 8004c0c:	bf00      	nop
 8004c0e:	f507 77f8 	add.w	r7, r7, #496	@ 0x1f0
 8004c12:	46bd      	mov	sp, r7
 8004c14:	bdb0      	pop	{r4, r5, r7, pc}
 8004c16:	bf00      	nop
 8004c18:	2000d10b 	.word	0x2000d10b
 8004c1c:	2000f604 	.word	0x2000f604
 8004c20:	2000d0e4 	.word	0x2000d0e4
 8004c24:	2000f608 	.word	0x2000f608
 8004c28:	2000f598 	.word	0x2000f598
 8004c2c:	2000d0e2 	.word	0x2000d0e2
 8004c30:	2000f5f8 	.word	0x2000f5f8
 8004c34:	2000f5fc 	.word	0x2000f5fc
 8004c38:	2000f610 	.word	0x2000f610
 8004c3c:	2000f611 	.word	0x2000f611
 8004c40:	2000d109 	.word	0x2000d109
 8004c44:	2000d10a 	.word	0x2000d10a
 8004c48:	2000f600 	.word	0x2000f600
 8004c4c:	2000d10c 	.word	0x2000d10c
 8004c50:	2000d0e0 	.word	0x2000d0e0
 8004c54:	2000d0e8 	.word	0x2000d0e8
 8004c58:	2000f5f0 	.word	0x2000f5f0
 8004c5c:	2000d318 	.word	0x2000d318
 8004c60:	200160c8 	.word	0x200160c8
 8004c64:	20015620 	.word	0x20015620

08004c68 <MX_SPI4_Init>:
SPI_HandleTypeDef hspi4;
SPI_HandleTypeDef hspi5;

/* SPI4 init function */
void MX_SPI4_Init(void)
{
 8004c68:	b580      	push	{r7, lr}
 8004c6a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI4_Init 0 */

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  hspi4.Instance = SPI4;
 8004c6c:	4b17      	ldr	r3, [pc, #92]	@ (8004ccc <MX_SPI4_Init+0x64>)
 8004c6e:	4a18      	ldr	r2, [pc, #96]	@ (8004cd0 <MX_SPI4_Init+0x68>)
 8004c70:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 8004c72:	4b16      	ldr	r3, [pc, #88]	@ (8004ccc <MX_SPI4_Init+0x64>)
 8004c74:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8004c78:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 8004c7a:	4b14      	ldr	r3, [pc, #80]	@ (8004ccc <MX_SPI4_Init+0x64>)
 8004c7c:	2200      	movs	r2, #0
 8004c7e:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 8004c80:	4b12      	ldr	r3, [pc, #72]	@ (8004ccc <MX_SPI4_Init+0x64>)
 8004c82:	2200      	movs	r2, #0
 8004c84:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 8004c86:	4b11      	ldr	r3, [pc, #68]	@ (8004ccc <MX_SPI4_Init+0x64>)
 8004c88:	2200      	movs	r2, #0
 8004c8a:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 8004c8c:	4b0f      	ldr	r3, [pc, #60]	@ (8004ccc <MX_SPI4_Init+0x64>)
 8004c8e:	2200      	movs	r2, #0
 8004c90:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 8004c92:	4b0e      	ldr	r3, [pc, #56]	@ (8004ccc <MX_SPI4_Init+0x64>)
 8004c94:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004c98:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8004c9a:	4b0c      	ldr	r3, [pc, #48]	@ (8004ccc <MX_SPI4_Init+0x64>)
 8004c9c:	2218      	movs	r2, #24
 8004c9e:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8004ca0:	4b0a      	ldr	r3, [pc, #40]	@ (8004ccc <MX_SPI4_Init+0x64>)
 8004ca2:	2200      	movs	r2, #0
 8004ca4:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 8004ca6:	4b09      	ldr	r3, [pc, #36]	@ (8004ccc <MX_SPI4_Init+0x64>)
 8004ca8:	2200      	movs	r2, #0
 8004caa:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004cac:	4b07      	ldr	r3, [pc, #28]	@ (8004ccc <MX_SPI4_Init+0x64>)
 8004cae:	2200      	movs	r2, #0
 8004cb0:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi4.Init.CRCPolynomial = 10;
 8004cb2:	4b06      	ldr	r3, [pc, #24]	@ (8004ccc <MX_SPI4_Init+0x64>)
 8004cb4:	220a      	movs	r2, #10
 8004cb6:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 8004cb8:	4804      	ldr	r0, [pc, #16]	@ (8004ccc <MX_SPI4_Init+0x64>)
 8004cba:	f003 fdd5 	bl	8008868 <HAL_SPI_Init>
 8004cbe:	4603      	mov	r3, r0
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d001      	beq.n	8004cc8 <MX_SPI4_Init+0x60>
  {
    Error_Handler();
 8004cc4:	f7fe f84c 	bl	8002d60 <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 8004cc8:	bf00      	nop
 8004cca:	bd80      	pop	{r7, pc}
 8004ccc:	20015ef4 	.word	0x20015ef4
 8004cd0:	40013400 	.word	0x40013400

08004cd4 <MX_SPI5_Init>:
/* SPI5 init function */
void MX_SPI5_Init(void)
{
 8004cd4:	b580      	push	{r7, lr}
 8004cd6:	af00      	add	r7, sp, #0
  /* USER CODE END SPI5_Init 0 */

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  hspi5.Instance = SPI5;
 8004cd8:	4b17      	ldr	r3, [pc, #92]	@ (8004d38 <MX_SPI5_Init+0x64>)
 8004cda:	4a18      	ldr	r2, [pc, #96]	@ (8004d3c <MX_SPI5_Init+0x68>)
 8004cdc:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 8004cde:	4b16      	ldr	r3, [pc, #88]	@ (8004d38 <MX_SPI5_Init+0x64>)
 8004ce0:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8004ce4:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 8004ce6:	4b14      	ldr	r3, [pc, #80]	@ (8004d38 <MX_SPI5_Init+0x64>)
 8004ce8:	2200      	movs	r2, #0
 8004cea:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 8004cec:	4b12      	ldr	r3, [pc, #72]	@ (8004d38 <MX_SPI5_Init+0x64>)
 8004cee:	2200      	movs	r2, #0
 8004cf0:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 8004cf2:	4b11      	ldr	r3, [pc, #68]	@ (8004d38 <MX_SPI5_Init+0x64>)
 8004cf4:	2200      	movs	r2, #0
 8004cf6:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8004cf8:	4b0f      	ldr	r3, [pc, #60]	@ (8004d38 <MX_SPI5_Init+0x64>)
 8004cfa:	2200      	movs	r2, #0
 8004cfc:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 8004cfe:	4b0e      	ldr	r3, [pc, #56]	@ (8004d38 <MX_SPI5_Init+0x64>)
 8004d00:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004d04:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8004d06:	4b0c      	ldr	r3, [pc, #48]	@ (8004d38 <MX_SPI5_Init+0x64>)
 8004d08:	2210      	movs	r2, #16
 8004d0a:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8004d0c:	4b0a      	ldr	r3, [pc, #40]	@ (8004d38 <MX_SPI5_Init+0x64>)
 8004d0e:	2200      	movs	r2, #0
 8004d10:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 8004d12:	4b09      	ldr	r3, [pc, #36]	@ (8004d38 <MX_SPI5_Init+0x64>)
 8004d14:	2200      	movs	r2, #0
 8004d16:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004d18:	4b07      	ldr	r3, [pc, #28]	@ (8004d38 <MX_SPI5_Init+0x64>)
 8004d1a:	2200      	movs	r2, #0
 8004d1c:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi5.Init.CRCPolynomial = 10;
 8004d1e:	4b06      	ldr	r3, [pc, #24]	@ (8004d38 <MX_SPI5_Init+0x64>)
 8004d20:	220a      	movs	r2, #10
 8004d22:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8004d24:	4804      	ldr	r0, [pc, #16]	@ (8004d38 <MX_SPI5_Init+0x64>)
 8004d26:	f003 fd9f 	bl	8008868 <HAL_SPI_Init>
 8004d2a:	4603      	mov	r3, r0
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d001      	beq.n	8004d34 <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 8004d30:	f7fe f816 	bl	8002d60 <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 8004d34:	bf00      	nop
 8004d36:	bd80      	pop	{r7, pc}
 8004d38:	20015f4c 	.word	0x20015f4c
 8004d3c:	40015000 	.word	0x40015000

08004d40 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8004d40:	b580      	push	{r7, lr}
 8004d42:	b08e      	sub	sp, #56	@ 0x38
 8004d44:	af00      	add	r7, sp, #0
 8004d46:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004d48:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004d4c:	2200      	movs	r2, #0
 8004d4e:	601a      	str	r2, [r3, #0]
 8004d50:	605a      	str	r2, [r3, #4]
 8004d52:	609a      	str	r2, [r3, #8]
 8004d54:	60da      	str	r2, [r3, #12]
 8004d56:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI4)
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	4a59      	ldr	r2, [pc, #356]	@ (8004ec4 <HAL_SPI_MspInit+0x184>)
 8004d5e:	4293      	cmp	r3, r2
 8004d60:	d15c      	bne.n	8004e1c <HAL_SPI_MspInit+0xdc>
  {
  /* USER CODE BEGIN SPI4_MspInit 0 */

  /* USER CODE END SPI4_MspInit 0 */
    /* SPI4 clock enable */
    __HAL_RCC_SPI4_CLK_ENABLE();
 8004d62:	2300      	movs	r3, #0
 8004d64:	623b      	str	r3, [r7, #32]
 8004d66:	4b58      	ldr	r3, [pc, #352]	@ (8004ec8 <HAL_SPI_MspInit+0x188>)
 8004d68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004d6a:	4a57      	ldr	r2, [pc, #348]	@ (8004ec8 <HAL_SPI_MspInit+0x188>)
 8004d6c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8004d70:	6453      	str	r3, [r2, #68]	@ 0x44
 8004d72:	4b55      	ldr	r3, [pc, #340]	@ (8004ec8 <HAL_SPI_MspInit+0x188>)
 8004d74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004d76:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004d7a:	623b      	str	r3, [r7, #32]
 8004d7c:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004d7e:	2300      	movs	r3, #0
 8004d80:	61fb      	str	r3, [r7, #28]
 8004d82:	4b51      	ldr	r3, [pc, #324]	@ (8004ec8 <HAL_SPI_MspInit+0x188>)
 8004d84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d86:	4a50      	ldr	r2, [pc, #320]	@ (8004ec8 <HAL_SPI_MspInit+0x188>)
 8004d88:	f043 0301 	orr.w	r3, r3, #1
 8004d8c:	6313      	str	r3, [r2, #48]	@ 0x30
 8004d8e:	4b4e      	ldr	r3, [pc, #312]	@ (8004ec8 <HAL_SPI_MspInit+0x188>)
 8004d90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d92:	f003 0301 	and.w	r3, r3, #1
 8004d96:	61fb      	str	r3, [r7, #28]
 8004d98:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004d9a:	2300      	movs	r3, #0
 8004d9c:	61bb      	str	r3, [r7, #24]
 8004d9e:	4b4a      	ldr	r3, [pc, #296]	@ (8004ec8 <HAL_SPI_MspInit+0x188>)
 8004da0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004da2:	4a49      	ldr	r2, [pc, #292]	@ (8004ec8 <HAL_SPI_MspInit+0x188>)
 8004da4:	f043 0302 	orr.w	r3, r3, #2
 8004da8:	6313      	str	r3, [r2, #48]	@ 0x30
 8004daa:	4b47      	ldr	r3, [pc, #284]	@ (8004ec8 <HAL_SPI_MspInit+0x188>)
 8004dac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004dae:	f003 0302 	and.w	r3, r3, #2
 8004db2:	61bb      	str	r3, [r7, #24]
 8004db4:	69bb      	ldr	r3, [r7, #24]
    /**SPI4 GPIO Configuration
    PA1     ------> SPI4_MOSI
    PB13     ------> SPI4_SCK
    PA11     ------> SPI4_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8004db6:	2302      	movs	r3, #2
 8004db8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004dba:	2302      	movs	r3, #2
 8004dbc:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004dbe:	2300      	movs	r3, #0
 8004dc0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004dc2:	2303      	movs	r3, #3
 8004dc4:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8004dc6:	2305      	movs	r3, #5
 8004dc8:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004dca:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004dce:	4619      	mov	r1, r3
 8004dd0:	483e      	ldr	r0, [pc, #248]	@ (8004ecc <HAL_SPI_MspInit+0x18c>)
 8004dd2:	f001 ffc9 	bl	8006d68 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8004dd6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8004dda:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004ddc:	2302      	movs	r3, #2
 8004dde:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004de0:	2300      	movs	r3, #0
 8004de2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004de4:	2303      	movs	r3, #3
 8004de6:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI4;
 8004de8:	2306      	movs	r3, #6
 8004dea:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004dec:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004df0:	4619      	mov	r1, r3
 8004df2:	4837      	ldr	r0, [pc, #220]	@ (8004ed0 <HAL_SPI_MspInit+0x190>)
 8004df4:	f001 ffb8 	bl	8006d68 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8004df8:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8004dfc:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004dfe:	2302      	movs	r3, #2
 8004e00:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004e02:	2300      	movs	r3, #0
 8004e04:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004e06:	2303      	movs	r3, #3
 8004e08:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI4;
 8004e0a:	2306      	movs	r3, #6
 8004e0c:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004e0e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004e12:	4619      	mov	r1, r3
 8004e14:	482d      	ldr	r0, [pc, #180]	@ (8004ecc <HAL_SPI_MspInit+0x18c>)
 8004e16:	f001 ffa7 	bl	8006d68 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }
}
 8004e1a:	e04f      	b.n	8004ebc <HAL_SPI_MspInit+0x17c>
  else if(spiHandle->Instance==SPI5)
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	4a2c      	ldr	r2, [pc, #176]	@ (8004ed4 <HAL_SPI_MspInit+0x194>)
 8004e22:	4293      	cmp	r3, r2
 8004e24:	d14a      	bne.n	8004ebc <HAL_SPI_MspInit+0x17c>
    __HAL_RCC_SPI5_CLK_ENABLE();
 8004e26:	2300      	movs	r3, #0
 8004e28:	617b      	str	r3, [r7, #20]
 8004e2a:	4b27      	ldr	r3, [pc, #156]	@ (8004ec8 <HAL_SPI_MspInit+0x188>)
 8004e2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004e2e:	4a26      	ldr	r2, [pc, #152]	@ (8004ec8 <HAL_SPI_MspInit+0x188>)
 8004e30:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004e34:	6453      	str	r3, [r2, #68]	@ 0x44
 8004e36:	4b24      	ldr	r3, [pc, #144]	@ (8004ec8 <HAL_SPI_MspInit+0x188>)
 8004e38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004e3a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004e3e:	617b      	str	r3, [r7, #20]
 8004e40:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004e42:	2300      	movs	r3, #0
 8004e44:	613b      	str	r3, [r7, #16]
 8004e46:	4b20      	ldr	r3, [pc, #128]	@ (8004ec8 <HAL_SPI_MspInit+0x188>)
 8004e48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e4a:	4a1f      	ldr	r2, [pc, #124]	@ (8004ec8 <HAL_SPI_MspInit+0x188>)
 8004e4c:	f043 0302 	orr.w	r3, r3, #2
 8004e50:	6313      	str	r3, [r2, #48]	@ 0x30
 8004e52:	4b1d      	ldr	r3, [pc, #116]	@ (8004ec8 <HAL_SPI_MspInit+0x188>)
 8004e54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e56:	f003 0302 	and.w	r3, r3, #2
 8004e5a:	613b      	str	r3, [r7, #16]
 8004e5c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004e5e:	2300      	movs	r3, #0
 8004e60:	60fb      	str	r3, [r7, #12]
 8004e62:	4b19      	ldr	r3, [pc, #100]	@ (8004ec8 <HAL_SPI_MspInit+0x188>)
 8004e64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e66:	4a18      	ldr	r2, [pc, #96]	@ (8004ec8 <HAL_SPI_MspInit+0x188>)
 8004e68:	f043 0301 	orr.w	r3, r3, #1
 8004e6c:	6313      	str	r3, [r2, #48]	@ 0x30
 8004e6e:	4b16      	ldr	r3, [pc, #88]	@ (8004ec8 <HAL_SPI_MspInit+0x188>)
 8004e70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e72:	f003 0301 	and.w	r3, r3, #1
 8004e76:	60fb      	str	r3, [r7, #12]
 8004e78:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8004e7a:	2301      	movs	r3, #1
 8004e7c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004e7e:	2302      	movs	r3, #2
 8004e80:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004e82:	2300      	movs	r3, #0
 8004e84:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004e86:	2303      	movs	r3, #3
 8004e88:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI5;
 8004e8a:	2306      	movs	r3, #6
 8004e8c:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004e8e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004e92:	4619      	mov	r1, r3
 8004e94:	480e      	ldr	r0, [pc, #56]	@ (8004ed0 <HAL_SPI_MspInit+0x190>)
 8004e96:	f001 ff67 	bl	8006d68 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12;
 8004e9a:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8004e9e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004ea0:	2302      	movs	r3, #2
 8004ea2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ea4:	2300      	movs	r3, #0
 8004ea6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004ea8:	2303      	movs	r3, #3
 8004eaa:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI5;
 8004eac:	2306      	movs	r3, #6
 8004eae:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004eb0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004eb4:	4619      	mov	r1, r3
 8004eb6:	4805      	ldr	r0, [pc, #20]	@ (8004ecc <HAL_SPI_MspInit+0x18c>)
 8004eb8:	f001 ff56 	bl	8006d68 <HAL_GPIO_Init>
}
 8004ebc:	bf00      	nop
 8004ebe:	3738      	adds	r7, #56	@ 0x38
 8004ec0:	46bd      	mov	sp, r7
 8004ec2:	bd80      	pop	{r7, pc}
 8004ec4:	40013400 	.word	0x40013400
 8004ec8:	40023800 	.word	0x40023800
 8004ecc:	40020000 	.word	0x40020000
 8004ed0:	40020400 	.word	0x40020400
 8004ed4:	40015000 	.word	0x40015000

08004ed8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004ed8:	b580      	push	{r7, lr}
 8004eda:	b082      	sub	sp, #8
 8004edc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004ede:	2300      	movs	r3, #0
 8004ee0:	607b      	str	r3, [r7, #4]
 8004ee2:	4b10      	ldr	r3, [pc, #64]	@ (8004f24 <HAL_MspInit+0x4c>)
 8004ee4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004ee6:	4a0f      	ldr	r2, [pc, #60]	@ (8004f24 <HAL_MspInit+0x4c>)
 8004ee8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004eec:	6453      	str	r3, [r2, #68]	@ 0x44
 8004eee:	4b0d      	ldr	r3, [pc, #52]	@ (8004f24 <HAL_MspInit+0x4c>)
 8004ef0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004ef2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004ef6:	607b      	str	r3, [r7, #4]
 8004ef8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004efa:	2300      	movs	r3, #0
 8004efc:	603b      	str	r3, [r7, #0]
 8004efe:	4b09      	ldr	r3, [pc, #36]	@ (8004f24 <HAL_MspInit+0x4c>)
 8004f00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f02:	4a08      	ldr	r2, [pc, #32]	@ (8004f24 <HAL_MspInit+0x4c>)
 8004f04:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004f08:	6413      	str	r3, [r2, #64]	@ 0x40
 8004f0a:	4b06      	ldr	r3, [pc, #24]	@ (8004f24 <HAL_MspInit+0x4c>)
 8004f0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f0e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004f12:	603b      	str	r3, [r7, #0]
 8004f14:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8004f16:	2007      	movs	r0, #7
 8004f18:	f001 fac6 	bl	80064a8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004f1c:	bf00      	nop
 8004f1e:	3708      	adds	r7, #8
 8004f20:	46bd      	mov	sp, r7
 8004f22:	bd80      	pop	{r7, pc}
 8004f24:	40023800 	.word	0x40023800

08004f28 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004f28:	b480      	push	{r7}
 8004f2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8004f2c:	bf00      	nop
 8004f2e:	e7fd      	b.n	8004f2c <NMI_Handler+0x4>

08004f30 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004f30:	b480      	push	{r7}
 8004f32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004f34:	bf00      	nop
 8004f36:	e7fd      	b.n	8004f34 <HardFault_Handler+0x4>

08004f38 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004f38:	b480      	push	{r7}
 8004f3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004f3c:	bf00      	nop
 8004f3e:	e7fd      	b.n	8004f3c <MemManage_Handler+0x4>

08004f40 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004f40:	b480      	push	{r7}
 8004f42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004f44:	bf00      	nop
 8004f46:	e7fd      	b.n	8004f44 <BusFault_Handler+0x4>

08004f48 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004f48:	b480      	push	{r7}
 8004f4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004f4c:	bf00      	nop
 8004f4e:	e7fd      	b.n	8004f4c <UsageFault_Handler+0x4>

08004f50 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004f50:	b480      	push	{r7}
 8004f52:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004f54:	bf00      	nop
 8004f56:	46bd      	mov	sp, r7
 8004f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f5c:	4770      	bx	lr

08004f5e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004f5e:	b480      	push	{r7}
 8004f60:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004f62:	bf00      	nop
 8004f64:	46bd      	mov	sp, r7
 8004f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f6a:	4770      	bx	lr

08004f6c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004f6c:	b480      	push	{r7}
 8004f6e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004f70:	bf00      	nop
 8004f72:	46bd      	mov	sp, r7
 8004f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f78:	4770      	bx	lr
	...

08004f7c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004f7c:	b580      	push	{r7, lr}
 8004f7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	if(Timer1 > 0)
 8004f80:	4b0b      	ldr	r3, [pc, #44]	@ (8004fb0 <SysTick_Handler+0x34>)
 8004f82:	881b      	ldrh	r3, [r3, #0]
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d005      	beq.n	8004f94 <SysTick_Handler+0x18>
		Timer1--;
 8004f88:	4b09      	ldr	r3, [pc, #36]	@ (8004fb0 <SysTick_Handler+0x34>)
 8004f8a:	881b      	ldrh	r3, [r3, #0]
 8004f8c:	3b01      	subs	r3, #1
 8004f8e:	b29a      	uxth	r2, r3
 8004f90:	4b07      	ldr	r3, [pc, #28]	@ (8004fb0 <SysTick_Handler+0x34>)
 8004f92:	801a      	strh	r2, [r3, #0]

	if(Timer2 > 0)
 8004f94:	4b07      	ldr	r3, [pc, #28]	@ (8004fb4 <SysTick_Handler+0x38>)
 8004f96:	881b      	ldrh	r3, [r3, #0]
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d005      	beq.n	8004fa8 <SysTick_Handler+0x2c>
		Timer2--;
 8004f9c:	4b05      	ldr	r3, [pc, #20]	@ (8004fb4 <SysTick_Handler+0x38>)
 8004f9e:	881b      	ldrh	r3, [r3, #0]
 8004fa0:	3b01      	subs	r3, #1
 8004fa2:	b29a      	uxth	r2, r3
 8004fa4:	4b03      	ldr	r3, [pc, #12]	@ (8004fb4 <SysTick_Handler+0x38>)
 8004fa6:	801a      	strh	r2, [r3, #0]
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004fa8:	f000 fcb4 	bl	8005914 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004fac:	bf00      	nop
 8004fae:	bd80      	pop	{r7, pc}
 8004fb0:	200161ac 	.word	0x200161ac
 8004fb4:	200161ae 	.word	0x200161ae

08004fb8 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8004fb8:	b580      	push	{r7, lr}
 8004fba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 8004fbc:	4802      	ldr	r0, [pc, #8]	@ (8004fc8 <DMA1_Stream3_IRQHandler+0x10>)
 8004fbe:	f001 fc69 	bl	8006894 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8004fc2:	bf00      	nop
 8004fc4:	bd80      	pop	{r7, pc}
 8004fc6:	bf00      	nop
 8004fc8:	2000d458 	.word	0x2000d458

08004fcc <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8004fcc:	b580      	push	{r7, lr}
 8004fce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8004fd0:	4803      	ldr	r0, [pc, #12]	@ (8004fe0 <TIM1_UP_TIM10_IRQHandler+0x14>)
 8004fd2:	f004 fb2b 	bl	800962c <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim10);
 8004fd6:	4803      	ldr	r0, [pc, #12]	@ (8004fe4 <TIM1_UP_TIM10_IRQHandler+0x18>)
 8004fd8:	f004 fb28 	bl	800962c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8004fdc:	bf00      	nop
 8004fde:	bd80      	pop	{r7, pc}
 8004fe0:	20015fa8 	.word	0x20015fa8
 8004fe4:	200160c8 	.word	0x200160c8

08004fe8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8004fe8:	b580      	push	{r7, lr}
 8004fea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8004fec:	4802      	ldr	r0, [pc, #8]	@ (8004ff8 <TIM2_IRQHandler+0x10>)
 8004fee:	f004 fb1d 	bl	800962c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8004ff2:	bf00      	nop
 8004ff4:	bd80      	pop	{r7, pc}
 8004ff6:	bf00      	nop
 8004ff8:	20015ff0 	.word	0x20015ff0

08004ffc <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8004ffc:	b580      	push	{r7, lr}
 8004ffe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8005000:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8005004:	f002 f866 	bl	80070d4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8005008:	bf00      	nop
 800500a:	bd80      	pop	{r7, pc}

0800500c <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 800500c:	b580      	push	{r7, lr}
 800500e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8005010:	4802      	ldr	r0, [pc, #8]	@ (800501c <DMA2_Stream0_IRQHandler+0x10>)
 8005012:	f001 fc3f 	bl	8006894 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8005016:	bf00      	nop
 8005018:	bd80      	pop	{r7, pc}
 800501a:	bf00      	nop
 800501c:	2000d360 	.word	0x2000d360

08005020 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8005020:	b580      	push	{r7, lr}
 8005022:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8005024:	4802      	ldr	r0, [pc, #8]	@ (8005030 <USART6_IRQHandler+0x10>)
 8005026:	f005 fa49 	bl	800a4bc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 800502a:	bf00      	nop
 800502c:	bd80      	pop	{r7, pc}
 800502e:	bf00      	nop
 8005030:	20016158 	.word	0x20016158

08005034 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8005034:	b580      	push	{r7, lr}
 8005036:	b086      	sub	sp, #24
 8005038:	af00      	add	r7, sp, #0
 800503a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800503c:	4a14      	ldr	r2, [pc, #80]	@ (8005090 <_sbrk+0x5c>)
 800503e:	4b15      	ldr	r3, [pc, #84]	@ (8005094 <_sbrk+0x60>)
 8005040:	1ad3      	subs	r3, r2, r3
 8005042:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8005044:	697b      	ldr	r3, [r7, #20]
 8005046:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8005048:	4b13      	ldr	r3, [pc, #76]	@ (8005098 <_sbrk+0x64>)
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	2b00      	cmp	r3, #0
 800504e:	d102      	bne.n	8005056 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8005050:	4b11      	ldr	r3, [pc, #68]	@ (8005098 <_sbrk+0x64>)
 8005052:	4a12      	ldr	r2, [pc, #72]	@ (800509c <_sbrk+0x68>)
 8005054:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8005056:	4b10      	ldr	r3, [pc, #64]	@ (8005098 <_sbrk+0x64>)
 8005058:	681a      	ldr	r2, [r3, #0]
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	4413      	add	r3, r2
 800505e:	693a      	ldr	r2, [r7, #16]
 8005060:	429a      	cmp	r2, r3
 8005062:	d207      	bcs.n	8005074 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8005064:	f00b fafa 	bl	801065c <__errno>
 8005068:	4603      	mov	r3, r0
 800506a:	220c      	movs	r2, #12
 800506c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800506e:	f04f 33ff 	mov.w	r3, #4294967295
 8005072:	e009      	b.n	8005088 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8005074:	4b08      	ldr	r3, [pc, #32]	@ (8005098 <_sbrk+0x64>)
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800507a:	4b07      	ldr	r3, [pc, #28]	@ (8005098 <_sbrk+0x64>)
 800507c:	681a      	ldr	r2, [r3, #0]
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	4413      	add	r3, r2
 8005082:	4a05      	ldr	r2, [pc, #20]	@ (8005098 <_sbrk+0x64>)
 8005084:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8005086:	68fb      	ldr	r3, [r7, #12]
}
 8005088:	4618      	mov	r0, r3
 800508a:	3718      	adds	r7, #24
 800508c:	46bd      	mov	sp, r7
 800508e:	bd80      	pop	{r7, pc}
 8005090:	20020000 	.word	0x20020000
 8005094:	00000800 	.word	0x00000800
 8005098:	20015fa4 	.word	0x20015fa4
 800509c:	20016538 	.word	0x20016538

080050a0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80050a0:	b480      	push	{r7}
 80050a2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80050a4:	4b06      	ldr	r3, [pc, #24]	@ (80050c0 <SystemInit+0x20>)
 80050a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80050aa:	4a05      	ldr	r2, [pc, #20]	@ (80050c0 <SystemInit+0x20>)
 80050ac:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80050b0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80050b4:	bf00      	nop
 80050b6:	46bd      	mov	sp, r7
 80050b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050bc:	4770      	bx	lr
 80050be:	bf00      	nop
 80050c0:	e000ed00 	.word	0xe000ed00

080050c4 <MX_TIM1_Init>:
TIM_HandleTypeDef htim4;
TIM_HandleTypeDef htim10;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80050c4:	b580      	push	{r7, lr}
 80050c6:	b096      	sub	sp, #88	@ 0x58
 80050c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80050ca:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80050ce:	2200      	movs	r2, #0
 80050d0:	601a      	str	r2, [r3, #0]
 80050d2:	605a      	str	r2, [r3, #4]
 80050d4:	609a      	str	r2, [r3, #8]
 80050d6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80050d8:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80050dc:	2200      	movs	r2, #0
 80050de:	601a      	str	r2, [r3, #0]
 80050e0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80050e2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80050e6:	2200      	movs	r2, #0
 80050e8:	601a      	str	r2, [r3, #0]
 80050ea:	605a      	str	r2, [r3, #4]
 80050ec:	609a      	str	r2, [r3, #8]
 80050ee:	60da      	str	r2, [r3, #12]
 80050f0:	611a      	str	r2, [r3, #16]
 80050f2:	615a      	str	r2, [r3, #20]
 80050f4:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80050f6:	1d3b      	adds	r3, r7, #4
 80050f8:	2220      	movs	r2, #32
 80050fa:	2100      	movs	r1, #0
 80050fc:	4618      	mov	r0, r3
 80050fe:	f00b fa5b 	bl	80105b8 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8005102:	4b3f      	ldr	r3, [pc, #252]	@ (8005200 <MX_TIM1_Init+0x13c>)
 8005104:	4a3f      	ldr	r2, [pc, #252]	@ (8005204 <MX_TIM1_Init+0x140>)
 8005106:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 100-1;
 8005108:	4b3d      	ldr	r3, [pc, #244]	@ (8005200 <MX_TIM1_Init+0x13c>)
 800510a:	2263      	movs	r2, #99	@ 0x63
 800510c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800510e:	4b3c      	ldr	r3, [pc, #240]	@ (8005200 <MX_TIM1_Init+0x13c>)
 8005110:	2200      	movs	r2, #0
 8005112:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000-1;
 8005114:	4b3a      	ldr	r3, [pc, #232]	@ (8005200 <MX_TIM1_Init+0x13c>)
 8005116:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800511a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800511c:	4b38      	ldr	r3, [pc, #224]	@ (8005200 <MX_TIM1_Init+0x13c>)
 800511e:	2200      	movs	r2, #0
 8005120:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8005122:	4b37      	ldr	r3, [pc, #220]	@ (8005200 <MX_TIM1_Init+0x13c>)
 8005124:	2200      	movs	r2, #0
 8005126:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005128:	4b35      	ldr	r3, [pc, #212]	@ (8005200 <MX_TIM1_Init+0x13c>)
 800512a:	2200      	movs	r2, #0
 800512c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800512e:	4834      	ldr	r0, [pc, #208]	@ (8005200 <MX_TIM1_Init+0x13c>)
 8005130:	f003 ffec 	bl	800910c <HAL_TIM_Base_Init>
 8005134:	4603      	mov	r3, r0
 8005136:	2b00      	cmp	r3, #0
 8005138:	d001      	beq.n	800513e <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 800513a:	f7fd fe11 	bl	8002d60 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800513e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8005142:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8005144:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8005148:	4619      	mov	r1, r3
 800514a:	482d      	ldr	r0, [pc, #180]	@ (8005200 <MX_TIM1_Init+0x13c>)
 800514c:	f004 fc20 	bl	8009990 <HAL_TIM_ConfigClockSource>
 8005150:	4603      	mov	r3, r0
 8005152:	2b00      	cmp	r3, #0
 8005154:	d001      	beq.n	800515a <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8005156:	f7fd fe03 	bl	8002d60 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800515a:	4829      	ldr	r0, [pc, #164]	@ (8005200 <MX_TIM1_Init+0x13c>)
 800515c:	f004 f8b7 	bl	80092ce <HAL_TIM_PWM_Init>
 8005160:	4603      	mov	r3, r0
 8005162:	2b00      	cmp	r3, #0
 8005164:	d001      	beq.n	800516a <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8005166:	f7fd fdfb 	bl	8002d60 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800516a:	2300      	movs	r3, #0
 800516c:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800516e:	2300      	movs	r3, #0
 8005170:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8005172:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8005176:	4619      	mov	r1, r3
 8005178:	4821      	ldr	r0, [pc, #132]	@ (8005200 <MX_TIM1_Init+0x13c>)
 800517a:	f004 ffcb 	bl	800a114 <HAL_TIMEx_MasterConfigSynchronization>
 800517e:	4603      	mov	r3, r0
 8005180:	2b00      	cmp	r3, #0
 8005182:	d001      	beq.n	8005188 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8005184:	f7fd fdec 	bl	8002d60 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8005188:	2360      	movs	r3, #96	@ 0x60
 800518a:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 500;
 800518c:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8005190:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8005192:	2300      	movs	r3, #0
 8005194:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8005196:	2300      	movs	r3, #0
 8005198:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800519a:	2300      	movs	r3, #0
 800519c:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800519e:	2300      	movs	r3, #0
 80051a0:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80051a2:	2300      	movs	r3, #0
 80051a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80051a6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80051aa:	2200      	movs	r2, #0
 80051ac:	4619      	mov	r1, r3
 80051ae:	4814      	ldr	r0, [pc, #80]	@ (8005200 <MX_TIM1_Init+0x13c>)
 80051b0:	f004 fb2c 	bl	800980c <HAL_TIM_PWM_ConfigChannel>
 80051b4:	4603      	mov	r3, r0
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d001      	beq.n	80051be <MX_TIM1_Init+0xfa>
  {
    Error_Handler();
 80051ba:	f7fd fdd1 	bl	8002d60 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80051be:	2300      	movs	r3, #0
 80051c0:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80051c2:	2300      	movs	r3, #0
 80051c4:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80051c6:	2300      	movs	r3, #0
 80051c8:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80051ca:	2300      	movs	r3, #0
 80051cc:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80051ce:	2300      	movs	r3, #0
 80051d0:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80051d2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80051d6:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80051d8:	2300      	movs	r3, #0
 80051da:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80051dc:	1d3b      	adds	r3, r7, #4
 80051de:	4619      	mov	r1, r3
 80051e0:	4807      	ldr	r0, [pc, #28]	@ (8005200 <MX_TIM1_Init+0x13c>)
 80051e2:	f005 f805 	bl	800a1f0 <HAL_TIMEx_ConfigBreakDeadTime>
 80051e6:	4603      	mov	r3, r0
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d001      	beq.n	80051f0 <MX_TIM1_Init+0x12c>
  {
    Error_Handler();
 80051ec:	f7fd fdb8 	bl	8002d60 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80051f0:	4803      	ldr	r0, [pc, #12]	@ (8005200 <MX_TIM1_Init+0x13c>)
 80051f2:	f000 f9ff 	bl	80055f4 <HAL_TIM_MspPostInit>

}
 80051f6:	bf00      	nop
 80051f8:	3758      	adds	r7, #88	@ 0x58
 80051fa:	46bd      	mov	sp, r7
 80051fc:	bd80      	pop	{r7, pc}
 80051fe:	bf00      	nop
 8005200:	20015fa8 	.word	0x20015fa8
 8005204:	40010000 	.word	0x40010000

08005208 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8005208:	b580      	push	{r7, lr}
 800520a:	b086      	sub	sp, #24
 800520c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800520e:	f107 0308 	add.w	r3, r7, #8
 8005212:	2200      	movs	r2, #0
 8005214:	601a      	str	r2, [r3, #0]
 8005216:	605a      	str	r2, [r3, #4]
 8005218:	609a      	str	r2, [r3, #8]
 800521a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800521c:	463b      	mov	r3, r7
 800521e:	2200      	movs	r2, #0
 8005220:	601a      	str	r2, [r3, #0]
 8005222:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8005224:	4b1d      	ldr	r3, [pc, #116]	@ (800529c <MX_TIM2_Init+0x94>)
 8005226:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800522a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 100-1;
 800522c:	4b1b      	ldr	r3, [pc, #108]	@ (800529c <MX_TIM2_Init+0x94>)
 800522e:	2263      	movs	r2, #99	@ 0x63
 8005230:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005232:	4b1a      	ldr	r3, [pc, #104]	@ (800529c <MX_TIM2_Init+0x94>)
 8005234:	2200      	movs	r2, #0
 8005236:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 32-1;
 8005238:	4b18      	ldr	r3, [pc, #96]	@ (800529c <MX_TIM2_Init+0x94>)
 800523a:	221f      	movs	r2, #31
 800523c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800523e:	4b17      	ldr	r3, [pc, #92]	@ (800529c <MX_TIM2_Init+0x94>)
 8005240:	2200      	movs	r2, #0
 8005242:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005244:	4b15      	ldr	r3, [pc, #84]	@ (800529c <MX_TIM2_Init+0x94>)
 8005246:	2200      	movs	r2, #0
 8005248:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800524a:	4814      	ldr	r0, [pc, #80]	@ (800529c <MX_TIM2_Init+0x94>)
 800524c:	f003 ff5e 	bl	800910c <HAL_TIM_Base_Init>
 8005250:	4603      	mov	r3, r0
 8005252:	2b00      	cmp	r3, #0
 8005254:	d001      	beq.n	800525a <MX_TIM2_Init+0x52>
  {
    Error_Handler();
 8005256:	f7fd fd83 	bl	8002d60 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800525a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800525e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8005260:	f107 0308 	add.w	r3, r7, #8
 8005264:	4619      	mov	r1, r3
 8005266:	480d      	ldr	r0, [pc, #52]	@ (800529c <MX_TIM2_Init+0x94>)
 8005268:	f004 fb92 	bl	8009990 <HAL_TIM_ConfigClockSource>
 800526c:	4603      	mov	r3, r0
 800526e:	2b00      	cmp	r3, #0
 8005270:	d001      	beq.n	8005276 <MX_TIM2_Init+0x6e>
  {
    Error_Handler();
 8005272:	f7fd fd75 	bl	8002d60 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005276:	2300      	movs	r3, #0
 8005278:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800527a:	2300      	movs	r3, #0
 800527c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800527e:	463b      	mov	r3, r7
 8005280:	4619      	mov	r1, r3
 8005282:	4806      	ldr	r0, [pc, #24]	@ (800529c <MX_TIM2_Init+0x94>)
 8005284:	f004 ff46 	bl	800a114 <HAL_TIMEx_MasterConfigSynchronization>
 8005288:	4603      	mov	r3, r0
 800528a:	2b00      	cmp	r3, #0
 800528c:	d001      	beq.n	8005292 <MX_TIM2_Init+0x8a>
  {
    Error_Handler();
 800528e:	f7fd fd67 	bl	8002d60 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8005292:	bf00      	nop
 8005294:	3718      	adds	r7, #24
 8005296:	46bd      	mov	sp, r7
 8005298:	bd80      	pop	{r7, pc}
 800529a:	bf00      	nop
 800529c:	20015ff0 	.word	0x20015ff0

080052a0 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80052a0:	b580      	push	{r7, lr}
 80052a2:	b08c      	sub	sp, #48	@ 0x30
 80052a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80052a6:	f107 030c 	add.w	r3, r7, #12
 80052aa:	2224      	movs	r2, #36	@ 0x24
 80052ac:	2100      	movs	r1, #0
 80052ae:	4618      	mov	r0, r3
 80052b0:	f00b f982 	bl	80105b8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80052b4:	1d3b      	adds	r3, r7, #4
 80052b6:	2200      	movs	r2, #0
 80052b8:	601a      	str	r2, [r3, #0]
 80052ba:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80052bc:	4b20      	ldr	r3, [pc, #128]	@ (8005340 <MX_TIM3_Init+0xa0>)
 80052be:	4a21      	ldr	r2, [pc, #132]	@ (8005344 <MX_TIM3_Init+0xa4>)
 80052c0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80052c2:	4b1f      	ldr	r3, [pc, #124]	@ (8005340 <MX_TIM3_Init+0xa0>)
 80052c4:	2200      	movs	r2, #0
 80052c6:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80052c8:	4b1d      	ldr	r3, [pc, #116]	@ (8005340 <MX_TIM3_Init+0xa0>)
 80052ca:	2200      	movs	r2, #0
 80052cc:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80052ce:	4b1c      	ldr	r3, [pc, #112]	@ (8005340 <MX_TIM3_Init+0xa0>)
 80052d0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80052d4:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80052d6:	4b1a      	ldr	r3, [pc, #104]	@ (8005340 <MX_TIM3_Init+0xa0>)
 80052d8:	2200      	movs	r2, #0
 80052da:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80052dc:	4b18      	ldr	r3, [pc, #96]	@ (8005340 <MX_TIM3_Init+0xa0>)
 80052de:	2200      	movs	r2, #0
 80052e0:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80052e2:	2301      	movs	r3, #1
 80052e4:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80052e6:	2300      	movs	r3, #0
 80052e8:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80052ea:	2301      	movs	r3, #1
 80052ec:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80052ee:	2300      	movs	r3, #0
 80052f0:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80052f2:	2300      	movs	r3, #0
 80052f4:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80052f6:	2300      	movs	r3, #0
 80052f8:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80052fa:	2301      	movs	r3, #1
 80052fc:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80052fe:	2300      	movs	r3, #0
 8005300:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8005302:	2300      	movs	r3, #0
 8005304:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8005306:	f107 030c 	add.w	r3, r7, #12
 800530a:	4619      	mov	r1, r3
 800530c:	480c      	ldr	r0, [pc, #48]	@ (8005340 <MX_TIM3_Init+0xa0>)
 800530e:	f004 f8e7 	bl	80094e0 <HAL_TIM_Encoder_Init>
 8005312:	4603      	mov	r3, r0
 8005314:	2b00      	cmp	r3, #0
 8005316:	d001      	beq.n	800531c <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8005318:	f7fd fd22 	bl	8002d60 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800531c:	2300      	movs	r3, #0
 800531e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005320:	2300      	movs	r3, #0
 8005322:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8005324:	1d3b      	adds	r3, r7, #4
 8005326:	4619      	mov	r1, r3
 8005328:	4805      	ldr	r0, [pc, #20]	@ (8005340 <MX_TIM3_Init+0xa0>)
 800532a:	f004 fef3 	bl	800a114 <HAL_TIMEx_MasterConfigSynchronization>
 800532e:	4603      	mov	r3, r0
 8005330:	2b00      	cmp	r3, #0
 8005332:	d001      	beq.n	8005338 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8005334:	f7fd fd14 	bl	8002d60 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8005338:	bf00      	nop
 800533a:	3730      	adds	r7, #48	@ 0x30
 800533c:	46bd      	mov	sp, r7
 800533e:	bd80      	pop	{r7, pc}
 8005340:	20016038 	.word	0x20016038
 8005344:	40000400 	.word	0x40000400

08005348 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8005348:	b580      	push	{r7, lr}
 800534a:	b08c      	sub	sp, #48	@ 0x30
 800534c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800534e:	f107 030c 	add.w	r3, r7, #12
 8005352:	2224      	movs	r2, #36	@ 0x24
 8005354:	2100      	movs	r1, #0
 8005356:	4618      	mov	r0, r3
 8005358:	f00b f92e 	bl	80105b8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800535c:	1d3b      	adds	r3, r7, #4
 800535e:	2200      	movs	r2, #0
 8005360:	601a      	str	r2, [r3, #0]
 8005362:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8005364:	4b20      	ldr	r3, [pc, #128]	@ (80053e8 <MX_TIM4_Init+0xa0>)
 8005366:	4a21      	ldr	r2, [pc, #132]	@ (80053ec <MX_TIM4_Init+0xa4>)
 8005368:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 800536a:	4b1f      	ldr	r3, [pc, #124]	@ (80053e8 <MX_TIM4_Init+0xa0>)
 800536c:	2200      	movs	r2, #0
 800536e:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005370:	4b1d      	ldr	r3, [pc, #116]	@ (80053e8 <MX_TIM4_Init+0xa0>)
 8005372:	2200      	movs	r2, #0
 8005374:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8005376:	4b1c      	ldr	r3, [pc, #112]	@ (80053e8 <MX_TIM4_Init+0xa0>)
 8005378:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800537c:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800537e:	4b1a      	ldr	r3, [pc, #104]	@ (80053e8 <MX_TIM4_Init+0xa0>)
 8005380:	2200      	movs	r2, #0
 8005382:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005384:	4b18      	ldr	r3, [pc, #96]	@ (80053e8 <MX_TIM4_Init+0xa0>)
 8005386:	2200      	movs	r2, #0
 8005388:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 800538a:	2301      	movs	r3, #1
 800538c:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800538e:	2300      	movs	r3, #0
 8005390:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8005392:	2301      	movs	r3, #1
 8005394:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8005396:	2300      	movs	r3, #0
 8005398:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800539a:	2300      	movs	r3, #0
 800539c:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800539e:	2300      	movs	r3, #0
 80053a0:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80053a2:	2301      	movs	r3, #1
 80053a4:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80053a6:	2300      	movs	r3, #0
 80053a8:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 80053aa:	2300      	movs	r3, #0
 80053ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 80053ae:	f107 030c 	add.w	r3, r7, #12
 80053b2:	4619      	mov	r1, r3
 80053b4:	480c      	ldr	r0, [pc, #48]	@ (80053e8 <MX_TIM4_Init+0xa0>)
 80053b6:	f004 f893 	bl	80094e0 <HAL_TIM_Encoder_Init>
 80053ba:	4603      	mov	r3, r0
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d001      	beq.n	80053c4 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 80053c0:	f7fd fcce 	bl	8002d60 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80053c4:	2300      	movs	r3, #0
 80053c6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80053c8:	2300      	movs	r3, #0
 80053ca:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80053cc:	1d3b      	adds	r3, r7, #4
 80053ce:	4619      	mov	r1, r3
 80053d0:	4805      	ldr	r0, [pc, #20]	@ (80053e8 <MX_TIM4_Init+0xa0>)
 80053d2:	f004 fe9f 	bl	800a114 <HAL_TIMEx_MasterConfigSynchronization>
 80053d6:	4603      	mov	r3, r0
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d001      	beq.n	80053e0 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 80053dc:	f7fd fcc0 	bl	8002d60 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80053e0:	bf00      	nop
 80053e2:	3730      	adds	r7, #48	@ 0x30
 80053e4:	46bd      	mov	sp, r7
 80053e6:	bd80      	pop	{r7, pc}
 80053e8:	20016080 	.word	0x20016080
 80053ec:	40000800 	.word	0x40000800

080053f0 <MX_TIM10_Init>:
/* TIM10 init function */
void MX_TIM10_Init(void)
{
 80053f0:	b580      	push	{r7, lr}
 80053f2:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 80053f4:	4b0e      	ldr	r3, [pc, #56]	@ (8005430 <MX_TIM10_Init+0x40>)
 80053f6:	4a0f      	ldr	r2, [pc, #60]	@ (8005434 <MX_TIM10_Init+0x44>)
 80053f8:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 0;
 80053fa:	4b0d      	ldr	r3, [pc, #52]	@ (8005430 <MX_TIM10_Init+0x40>)
 80053fc:	2200      	movs	r2, #0
 80053fe:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005400:	4b0b      	ldr	r3, [pc, #44]	@ (8005430 <MX_TIM10_Init+0x40>)
 8005402:	2200      	movs	r2, #0
 8005404:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 288-1;
 8005406:	4b0a      	ldr	r3, [pc, #40]	@ (8005430 <MX_TIM10_Init+0x40>)
 8005408:	f240 121f 	movw	r2, #287	@ 0x11f
 800540c:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800540e:	4b08      	ldr	r3, [pc, #32]	@ (8005430 <MX_TIM10_Init+0x40>)
 8005410:	2200      	movs	r2, #0
 8005412:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005414:	4b06      	ldr	r3, [pc, #24]	@ (8005430 <MX_TIM10_Init+0x40>)
 8005416:	2200      	movs	r2, #0
 8005418:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 800541a:	4805      	ldr	r0, [pc, #20]	@ (8005430 <MX_TIM10_Init+0x40>)
 800541c:	f003 fe76 	bl	800910c <HAL_TIM_Base_Init>
 8005420:	4603      	mov	r3, r0
 8005422:	2b00      	cmp	r3, #0
 8005424:	d001      	beq.n	800542a <MX_TIM10_Init+0x3a>
  {
    Error_Handler();
 8005426:	f7fd fc9b 	bl	8002d60 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 800542a:	bf00      	nop
 800542c:	bd80      	pop	{r7, pc}
 800542e:	bf00      	nop
 8005430:	200160c8 	.word	0x200160c8
 8005434:	40014400 	.word	0x40014400

08005438 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8005438:	b580      	push	{r7, lr}
 800543a:	b086      	sub	sp, #24
 800543c:	af00      	add	r7, sp, #0
 800543e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	4a2a      	ldr	r2, [pc, #168]	@ (80054f0 <HAL_TIM_Base_MspInit+0xb8>)
 8005446:	4293      	cmp	r3, r2
 8005448:	d116      	bne.n	8005478 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800544a:	2300      	movs	r3, #0
 800544c:	617b      	str	r3, [r7, #20]
 800544e:	4b29      	ldr	r3, [pc, #164]	@ (80054f4 <HAL_TIM_Base_MspInit+0xbc>)
 8005450:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005452:	4a28      	ldr	r2, [pc, #160]	@ (80054f4 <HAL_TIM_Base_MspInit+0xbc>)
 8005454:	f043 0301 	orr.w	r3, r3, #1
 8005458:	6453      	str	r3, [r2, #68]	@ 0x44
 800545a:	4b26      	ldr	r3, [pc, #152]	@ (80054f4 <HAL_TIM_Base_MspInit+0xbc>)
 800545c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800545e:	f003 0301 	and.w	r3, r3, #1
 8005462:	617b      	str	r3, [r7, #20]
 8005464:	697b      	ldr	r3, [r7, #20]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8005466:	2200      	movs	r2, #0
 8005468:	2100      	movs	r1, #0
 800546a:	2019      	movs	r0, #25
 800546c:	f001 f827 	bl	80064be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8005470:	2019      	movs	r0, #25
 8005472:	f001 f840 	bl	80064f6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }
}
 8005476:	e036      	b.n	80054e6 <HAL_TIM_Base_MspInit+0xae>
  else if(tim_baseHandle->Instance==TIM2)
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005480:	d116      	bne.n	80054b0 <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8005482:	2300      	movs	r3, #0
 8005484:	613b      	str	r3, [r7, #16]
 8005486:	4b1b      	ldr	r3, [pc, #108]	@ (80054f4 <HAL_TIM_Base_MspInit+0xbc>)
 8005488:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800548a:	4a1a      	ldr	r2, [pc, #104]	@ (80054f4 <HAL_TIM_Base_MspInit+0xbc>)
 800548c:	f043 0301 	orr.w	r3, r3, #1
 8005490:	6413      	str	r3, [r2, #64]	@ 0x40
 8005492:	4b18      	ldr	r3, [pc, #96]	@ (80054f4 <HAL_TIM_Base_MspInit+0xbc>)
 8005494:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005496:	f003 0301 	and.w	r3, r3, #1
 800549a:	613b      	str	r3, [r7, #16]
 800549c:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800549e:	2200      	movs	r2, #0
 80054a0:	2100      	movs	r1, #0
 80054a2:	201c      	movs	r0, #28
 80054a4:	f001 f80b 	bl	80064be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80054a8:	201c      	movs	r0, #28
 80054aa:	f001 f824 	bl	80064f6 <HAL_NVIC_EnableIRQ>
}
 80054ae:	e01a      	b.n	80054e6 <HAL_TIM_Base_MspInit+0xae>
  else if(tim_baseHandle->Instance==TIM10)
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	4a10      	ldr	r2, [pc, #64]	@ (80054f8 <HAL_TIM_Base_MspInit+0xc0>)
 80054b6:	4293      	cmp	r3, r2
 80054b8:	d115      	bne.n	80054e6 <HAL_TIM_Base_MspInit+0xae>
    __HAL_RCC_TIM10_CLK_ENABLE();
 80054ba:	2300      	movs	r3, #0
 80054bc:	60fb      	str	r3, [r7, #12]
 80054be:	4b0d      	ldr	r3, [pc, #52]	@ (80054f4 <HAL_TIM_Base_MspInit+0xbc>)
 80054c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80054c2:	4a0c      	ldr	r2, [pc, #48]	@ (80054f4 <HAL_TIM_Base_MspInit+0xbc>)
 80054c4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80054c8:	6453      	str	r3, [r2, #68]	@ 0x44
 80054ca:	4b0a      	ldr	r3, [pc, #40]	@ (80054f4 <HAL_TIM_Base_MspInit+0xbc>)
 80054cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80054ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80054d2:	60fb      	str	r3, [r7, #12]
 80054d4:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 80054d6:	2200      	movs	r2, #0
 80054d8:	2100      	movs	r1, #0
 80054da:	2019      	movs	r0, #25
 80054dc:	f000 ffef 	bl	80064be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80054e0:	2019      	movs	r0, #25
 80054e2:	f001 f808 	bl	80064f6 <HAL_NVIC_EnableIRQ>
}
 80054e6:	bf00      	nop
 80054e8:	3718      	adds	r7, #24
 80054ea:	46bd      	mov	sp, r7
 80054ec:	bd80      	pop	{r7, pc}
 80054ee:	bf00      	nop
 80054f0:	40010000 	.word	0x40010000
 80054f4:	40023800 	.word	0x40023800
 80054f8:	40014400 	.word	0x40014400

080054fc <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 80054fc:	b580      	push	{r7, lr}
 80054fe:	b08c      	sub	sp, #48	@ 0x30
 8005500:	af00      	add	r7, sp, #0
 8005502:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005504:	f107 031c 	add.w	r3, r7, #28
 8005508:	2200      	movs	r2, #0
 800550a:	601a      	str	r2, [r3, #0]
 800550c:	605a      	str	r2, [r3, #4]
 800550e:	609a      	str	r2, [r3, #8]
 8005510:	60da      	str	r2, [r3, #12]
 8005512:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM3)
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	4a32      	ldr	r2, [pc, #200]	@ (80055e4 <HAL_TIM_Encoder_MspInit+0xe8>)
 800551a:	4293      	cmp	r3, r2
 800551c:	d12c      	bne.n	8005578 <HAL_TIM_Encoder_MspInit+0x7c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800551e:	2300      	movs	r3, #0
 8005520:	61bb      	str	r3, [r7, #24]
 8005522:	4b31      	ldr	r3, [pc, #196]	@ (80055e8 <HAL_TIM_Encoder_MspInit+0xec>)
 8005524:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005526:	4a30      	ldr	r2, [pc, #192]	@ (80055e8 <HAL_TIM_Encoder_MspInit+0xec>)
 8005528:	f043 0302 	orr.w	r3, r3, #2
 800552c:	6413      	str	r3, [r2, #64]	@ 0x40
 800552e:	4b2e      	ldr	r3, [pc, #184]	@ (80055e8 <HAL_TIM_Encoder_MspInit+0xec>)
 8005530:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005532:	f003 0302 	and.w	r3, r3, #2
 8005536:	61bb      	str	r3, [r7, #24]
 8005538:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800553a:	2300      	movs	r3, #0
 800553c:	617b      	str	r3, [r7, #20]
 800553e:	4b2a      	ldr	r3, [pc, #168]	@ (80055e8 <HAL_TIM_Encoder_MspInit+0xec>)
 8005540:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005542:	4a29      	ldr	r2, [pc, #164]	@ (80055e8 <HAL_TIM_Encoder_MspInit+0xec>)
 8005544:	f043 0302 	orr.w	r3, r3, #2
 8005548:	6313      	str	r3, [r2, #48]	@ 0x30
 800554a:	4b27      	ldr	r3, [pc, #156]	@ (80055e8 <HAL_TIM_Encoder_MspInit+0xec>)
 800554c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800554e:	f003 0302 	and.w	r3, r3, #2
 8005552:	617b      	str	r3, [r7, #20]
 8005554:	697b      	ldr	r3, [r7, #20]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = ENCODER1_INB_Pin|ENCODER1_INA_Pin;
 8005556:	2330      	movs	r3, #48	@ 0x30
 8005558:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800555a:	2302      	movs	r3, #2
 800555c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800555e:	2300      	movs	r3, #0
 8005560:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005562:	2300      	movs	r3, #0
 8005564:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8005566:	2302      	movs	r3, #2
 8005568:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800556a:	f107 031c 	add.w	r3, r7, #28
 800556e:	4619      	mov	r1, r3
 8005570:	481e      	ldr	r0, [pc, #120]	@ (80055ec <HAL_TIM_Encoder_MspInit+0xf0>)
 8005572:	f001 fbf9 	bl	8006d68 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8005576:	e030      	b.n	80055da <HAL_TIM_Encoder_MspInit+0xde>
  else if(tim_encoderHandle->Instance==TIM4)
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	4a1c      	ldr	r2, [pc, #112]	@ (80055f0 <HAL_TIM_Encoder_MspInit+0xf4>)
 800557e:	4293      	cmp	r3, r2
 8005580:	d12b      	bne.n	80055da <HAL_TIM_Encoder_MspInit+0xde>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8005582:	2300      	movs	r3, #0
 8005584:	613b      	str	r3, [r7, #16]
 8005586:	4b18      	ldr	r3, [pc, #96]	@ (80055e8 <HAL_TIM_Encoder_MspInit+0xec>)
 8005588:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800558a:	4a17      	ldr	r2, [pc, #92]	@ (80055e8 <HAL_TIM_Encoder_MspInit+0xec>)
 800558c:	f043 0304 	orr.w	r3, r3, #4
 8005590:	6413      	str	r3, [r2, #64]	@ 0x40
 8005592:	4b15      	ldr	r3, [pc, #84]	@ (80055e8 <HAL_TIM_Encoder_MspInit+0xec>)
 8005594:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005596:	f003 0304 	and.w	r3, r3, #4
 800559a:	613b      	str	r3, [r7, #16]
 800559c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800559e:	2300      	movs	r3, #0
 80055a0:	60fb      	str	r3, [r7, #12]
 80055a2:	4b11      	ldr	r3, [pc, #68]	@ (80055e8 <HAL_TIM_Encoder_MspInit+0xec>)
 80055a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80055a6:	4a10      	ldr	r2, [pc, #64]	@ (80055e8 <HAL_TIM_Encoder_MspInit+0xec>)
 80055a8:	f043 0302 	orr.w	r3, r3, #2
 80055ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80055ae:	4b0e      	ldr	r3, [pc, #56]	@ (80055e8 <HAL_TIM_Encoder_MspInit+0xec>)
 80055b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80055b2:	f003 0302 	and.w	r3, r3, #2
 80055b6:	60fb      	str	r3, [r7, #12]
 80055b8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ENCODER0_INB_Pin|ENCODER0_INA_Pin;
 80055ba:	23c0      	movs	r3, #192	@ 0xc0
 80055bc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80055be:	2302      	movs	r3, #2
 80055c0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80055c2:	2300      	movs	r3, #0
 80055c4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80055c6:	2300      	movs	r3, #0
 80055c8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80055ca:	2302      	movs	r3, #2
 80055cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80055ce:	f107 031c 	add.w	r3, r7, #28
 80055d2:	4619      	mov	r1, r3
 80055d4:	4805      	ldr	r0, [pc, #20]	@ (80055ec <HAL_TIM_Encoder_MspInit+0xf0>)
 80055d6:	f001 fbc7 	bl	8006d68 <HAL_GPIO_Init>
}
 80055da:	bf00      	nop
 80055dc:	3730      	adds	r7, #48	@ 0x30
 80055de:	46bd      	mov	sp, r7
 80055e0:	bd80      	pop	{r7, pc}
 80055e2:	bf00      	nop
 80055e4:	40000400 	.word	0x40000400
 80055e8:	40023800 	.word	0x40023800
 80055ec:	40020400 	.word	0x40020400
 80055f0:	40000800 	.word	0x40000800

080055f4 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80055f4:	b580      	push	{r7, lr}
 80055f6:	b088      	sub	sp, #32
 80055f8:	af00      	add	r7, sp, #0
 80055fa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80055fc:	f107 030c 	add.w	r3, r7, #12
 8005600:	2200      	movs	r2, #0
 8005602:	601a      	str	r2, [r3, #0]
 8005604:	605a      	str	r2, [r3, #4]
 8005606:	609a      	str	r2, [r3, #8]
 8005608:	60da      	str	r2, [r3, #12]
 800560a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	4a12      	ldr	r2, [pc, #72]	@ (800565c <HAL_TIM_MspPostInit+0x68>)
 8005612:	4293      	cmp	r3, r2
 8005614:	d11e      	bne.n	8005654 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005616:	2300      	movs	r3, #0
 8005618:	60bb      	str	r3, [r7, #8]
 800561a:	4b11      	ldr	r3, [pc, #68]	@ (8005660 <HAL_TIM_MspPostInit+0x6c>)
 800561c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800561e:	4a10      	ldr	r2, [pc, #64]	@ (8005660 <HAL_TIM_MspPostInit+0x6c>)
 8005620:	f043 0301 	orr.w	r3, r3, #1
 8005624:	6313      	str	r3, [r2, #48]	@ 0x30
 8005626:	4b0e      	ldr	r3, [pc, #56]	@ (8005660 <HAL_TIM_MspPostInit+0x6c>)
 8005628:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800562a:	f003 0301 	and.w	r3, r3, #1
 800562e:	60bb      	str	r3, [r7, #8]
 8005630:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8005632:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8005636:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005638:	2302      	movs	r3, #2
 800563a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800563c:	2300      	movs	r3, #0
 800563e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005640:	2300      	movs	r3, #0
 8005642:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8005644:	2301      	movs	r3, #1
 8005646:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005648:	f107 030c 	add.w	r3, r7, #12
 800564c:	4619      	mov	r1, r3
 800564e:	4805      	ldr	r0, [pc, #20]	@ (8005664 <HAL_TIM_MspPostInit+0x70>)
 8005650:	f001 fb8a 	bl	8006d68 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8005654:	bf00      	nop
 8005656:	3720      	adds	r7, #32
 8005658:	46bd      	mov	sp, r7
 800565a:	bd80      	pop	{r7, pc}
 800565c:	40010000 	.word	0x40010000
 8005660:	40023800 	.word	0x40023800
 8005664:	40020000 	.word	0x40020000

08005668 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart6;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8005668:	b580      	push	{r7, lr}
 800566a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800566c:	4b11      	ldr	r3, [pc, #68]	@ (80056b4 <MX_USART2_UART_Init+0x4c>)
 800566e:	4a12      	ldr	r2, [pc, #72]	@ (80056b8 <MX_USART2_UART_Init+0x50>)
 8005670:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8005672:	4b10      	ldr	r3, [pc, #64]	@ (80056b4 <MX_USART2_UART_Init+0x4c>)
 8005674:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8005678:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800567a:	4b0e      	ldr	r3, [pc, #56]	@ (80056b4 <MX_USART2_UART_Init+0x4c>)
 800567c:	2200      	movs	r2, #0
 800567e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8005680:	4b0c      	ldr	r3, [pc, #48]	@ (80056b4 <MX_USART2_UART_Init+0x4c>)
 8005682:	2200      	movs	r2, #0
 8005684:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8005686:	4b0b      	ldr	r3, [pc, #44]	@ (80056b4 <MX_USART2_UART_Init+0x4c>)
 8005688:	2200      	movs	r2, #0
 800568a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800568c:	4b09      	ldr	r3, [pc, #36]	@ (80056b4 <MX_USART2_UART_Init+0x4c>)
 800568e:	220c      	movs	r2, #12
 8005690:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005692:	4b08      	ldr	r3, [pc, #32]	@ (80056b4 <MX_USART2_UART_Init+0x4c>)
 8005694:	2200      	movs	r2, #0
 8005696:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8005698:	4b06      	ldr	r3, [pc, #24]	@ (80056b4 <MX_USART2_UART_Init+0x4c>)
 800569a:	2200      	movs	r2, #0
 800569c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800569e:	4805      	ldr	r0, [pc, #20]	@ (80056b4 <MX_USART2_UART_Init+0x4c>)
 80056a0:	f004 fe0c 	bl	800a2bc <HAL_UART_Init>
 80056a4:	4603      	mov	r3, r0
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d001      	beq.n	80056ae <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80056aa:	f7fd fb59 	bl	8002d60 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80056ae:	bf00      	nop
 80056b0:	bd80      	pop	{r7, pc}
 80056b2:	bf00      	nop
 80056b4:	20016110 	.word	0x20016110
 80056b8:	40004400 	.word	0x40004400

080056bc <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 80056bc:	b580      	push	{r7, lr}
 80056be:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 80056c0:	4b11      	ldr	r3, [pc, #68]	@ (8005708 <MX_USART6_UART_Init+0x4c>)
 80056c2:	4a12      	ldr	r2, [pc, #72]	@ (800570c <MX_USART6_UART_Init+0x50>)
 80056c4:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 80056c6:	4b10      	ldr	r3, [pc, #64]	@ (8005708 <MX_USART6_UART_Init+0x4c>)
 80056c8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80056cc:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80056ce:	4b0e      	ldr	r3, [pc, #56]	@ (8005708 <MX_USART6_UART_Init+0x4c>)
 80056d0:	2200      	movs	r2, #0
 80056d2:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 80056d4:	4b0c      	ldr	r3, [pc, #48]	@ (8005708 <MX_USART6_UART_Init+0x4c>)
 80056d6:	2200      	movs	r2, #0
 80056d8:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 80056da:	4b0b      	ldr	r3, [pc, #44]	@ (8005708 <MX_USART6_UART_Init+0x4c>)
 80056dc:	2200      	movs	r2, #0
 80056de:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 80056e0:	4b09      	ldr	r3, [pc, #36]	@ (8005708 <MX_USART6_UART_Init+0x4c>)
 80056e2:	220c      	movs	r2, #12
 80056e4:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80056e6:	4b08      	ldr	r3, [pc, #32]	@ (8005708 <MX_USART6_UART_Init+0x4c>)
 80056e8:	2200      	movs	r2, #0
 80056ea:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80056ec:	4b06      	ldr	r3, [pc, #24]	@ (8005708 <MX_USART6_UART_Init+0x4c>)
 80056ee:	2200      	movs	r2, #0
 80056f0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80056f2:	4805      	ldr	r0, [pc, #20]	@ (8005708 <MX_USART6_UART_Init+0x4c>)
 80056f4:	f004 fde2 	bl	800a2bc <HAL_UART_Init>
 80056f8:	4603      	mov	r3, r0
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d001      	beq.n	8005702 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 80056fe:	f7fd fb2f 	bl	8002d60 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8005702:	bf00      	nop
 8005704:	bd80      	pop	{r7, pc}
 8005706:	bf00      	nop
 8005708:	20016158 	.word	0x20016158
 800570c:	40011400 	.word	0x40011400

08005710 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8005710:	b580      	push	{r7, lr}
 8005712:	b08c      	sub	sp, #48	@ 0x30
 8005714:	af00      	add	r7, sp, #0
 8005716:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005718:	f107 031c 	add.w	r3, r7, #28
 800571c:	2200      	movs	r2, #0
 800571e:	601a      	str	r2, [r3, #0]
 8005720:	605a      	str	r2, [r3, #4]
 8005722:	609a      	str	r2, [r3, #8]
 8005724:	60da      	str	r2, [r3, #12]
 8005726:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	4a36      	ldr	r2, [pc, #216]	@ (8005808 <HAL_UART_MspInit+0xf8>)
 800572e:	4293      	cmp	r3, r2
 8005730:	d12c      	bne.n	800578c <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8005732:	2300      	movs	r3, #0
 8005734:	61bb      	str	r3, [r7, #24]
 8005736:	4b35      	ldr	r3, [pc, #212]	@ (800580c <HAL_UART_MspInit+0xfc>)
 8005738:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800573a:	4a34      	ldr	r2, [pc, #208]	@ (800580c <HAL_UART_MspInit+0xfc>)
 800573c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005740:	6413      	str	r3, [r2, #64]	@ 0x40
 8005742:	4b32      	ldr	r3, [pc, #200]	@ (800580c <HAL_UART_MspInit+0xfc>)
 8005744:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005746:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800574a:	61bb      	str	r3, [r7, #24]
 800574c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800574e:	2300      	movs	r3, #0
 8005750:	617b      	str	r3, [r7, #20]
 8005752:	4b2e      	ldr	r3, [pc, #184]	@ (800580c <HAL_UART_MspInit+0xfc>)
 8005754:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005756:	4a2d      	ldr	r2, [pc, #180]	@ (800580c <HAL_UART_MspInit+0xfc>)
 8005758:	f043 0301 	orr.w	r3, r3, #1
 800575c:	6313      	str	r3, [r2, #48]	@ 0x30
 800575e:	4b2b      	ldr	r3, [pc, #172]	@ (800580c <HAL_UART_MspInit+0xfc>)
 8005760:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005762:	f003 0301 	and.w	r3, r3, #1
 8005766:	617b      	str	r3, [r7, #20]
 8005768:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800576a:	230c      	movs	r3, #12
 800576c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800576e:	2302      	movs	r3, #2
 8005770:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005772:	2300      	movs	r3, #0
 8005774:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005776:	2303      	movs	r3, #3
 8005778:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800577a:	2307      	movs	r3, #7
 800577c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800577e:	f107 031c 	add.w	r3, r7, #28
 8005782:	4619      	mov	r1, r3
 8005784:	4822      	ldr	r0, [pc, #136]	@ (8005810 <HAL_UART_MspInit+0x100>)
 8005786:	f001 faef 	bl	8006d68 <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 800578a:	e038      	b.n	80057fe <HAL_UART_MspInit+0xee>
  else if(uartHandle->Instance==USART6)
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	4a20      	ldr	r2, [pc, #128]	@ (8005814 <HAL_UART_MspInit+0x104>)
 8005792:	4293      	cmp	r3, r2
 8005794:	d133      	bne.n	80057fe <HAL_UART_MspInit+0xee>
    __HAL_RCC_USART6_CLK_ENABLE();
 8005796:	2300      	movs	r3, #0
 8005798:	613b      	str	r3, [r7, #16]
 800579a:	4b1c      	ldr	r3, [pc, #112]	@ (800580c <HAL_UART_MspInit+0xfc>)
 800579c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800579e:	4a1b      	ldr	r2, [pc, #108]	@ (800580c <HAL_UART_MspInit+0xfc>)
 80057a0:	f043 0320 	orr.w	r3, r3, #32
 80057a4:	6453      	str	r3, [r2, #68]	@ 0x44
 80057a6:	4b19      	ldr	r3, [pc, #100]	@ (800580c <HAL_UART_MspInit+0xfc>)
 80057a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80057aa:	f003 0320 	and.w	r3, r3, #32
 80057ae:	613b      	str	r3, [r7, #16]
 80057b0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80057b2:	2300      	movs	r3, #0
 80057b4:	60fb      	str	r3, [r7, #12]
 80057b6:	4b15      	ldr	r3, [pc, #84]	@ (800580c <HAL_UART_MspInit+0xfc>)
 80057b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80057ba:	4a14      	ldr	r2, [pc, #80]	@ (800580c <HAL_UART_MspInit+0xfc>)
 80057bc:	f043 0304 	orr.w	r3, r3, #4
 80057c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80057c2:	4b12      	ldr	r3, [pc, #72]	@ (800580c <HAL_UART_MspInit+0xfc>)
 80057c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80057c6:	f003 0304 	and.w	r3, r3, #4
 80057ca:	60fb      	str	r3, [r7, #12]
 80057cc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80057ce:	23c0      	movs	r3, #192	@ 0xc0
 80057d0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80057d2:	2302      	movs	r3, #2
 80057d4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80057d6:	2300      	movs	r3, #0
 80057d8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80057da:	2303      	movs	r3, #3
 80057dc:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80057de:	2308      	movs	r3, #8
 80057e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80057e2:	f107 031c 	add.w	r3, r7, #28
 80057e6:	4619      	mov	r1, r3
 80057e8:	480b      	ldr	r0, [pc, #44]	@ (8005818 <HAL_UART_MspInit+0x108>)
 80057ea:	f001 fabd 	bl	8006d68 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 80057ee:	2200      	movs	r2, #0
 80057f0:	2100      	movs	r1, #0
 80057f2:	2047      	movs	r0, #71	@ 0x47
 80057f4:	f000 fe63 	bl	80064be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 80057f8:	2047      	movs	r0, #71	@ 0x47
 80057fa:	f000 fe7c 	bl	80064f6 <HAL_NVIC_EnableIRQ>
}
 80057fe:	bf00      	nop
 8005800:	3730      	adds	r7, #48	@ 0x30
 8005802:	46bd      	mov	sp, r7
 8005804:	bd80      	pop	{r7, pc}
 8005806:	bf00      	nop
 8005808:	40004400 	.word	0x40004400
 800580c:	40023800 	.word	0x40023800
 8005810:	40020000 	.word	0x40020000
 8005814:	40011400 	.word	0x40011400
 8005818:	40020800 	.word	0x40020800

0800581c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800581c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8005854 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8005820:	f7ff fc3e 	bl	80050a0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8005824:	480c      	ldr	r0, [pc, #48]	@ (8005858 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8005826:	490d      	ldr	r1, [pc, #52]	@ (800585c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8005828:	4a0d      	ldr	r2, [pc, #52]	@ (8005860 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800582a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800582c:	e002      	b.n	8005834 <LoopCopyDataInit>

0800582e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800582e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005830:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005832:	3304      	adds	r3, #4

08005834 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005834:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005836:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005838:	d3f9      	bcc.n	800582e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800583a:	4a0a      	ldr	r2, [pc, #40]	@ (8005864 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800583c:	4c0a      	ldr	r4, [pc, #40]	@ (8005868 <LoopFillZerobss+0x22>)
  movs r3, #0
 800583e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005840:	e001      	b.n	8005846 <LoopFillZerobss>

08005842 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8005842:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005844:	3204      	adds	r2, #4

08005846 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8005846:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005848:	d3fb      	bcc.n	8005842 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800584a:	f00a ff0d 	bl	8010668 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800584e:	f7fd f89d 	bl	800298c <main>
  bx  lr    
 8005852:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8005854:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8005858:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800585c:	2000d2fc 	.word	0x2000d2fc
  ldr r2, =_sidata
 8005860:	08015cbc 	.word	0x08015cbc
  ldr r2, =_sbss
 8005864:	2000d2fc 	.word	0x2000d2fc
  ldr r4, =_ebss
 8005868:	20016534 	.word	0x20016534

0800586c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800586c:	e7fe      	b.n	800586c <ADC_IRQHandler>
	...

08005870 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005870:	b580      	push	{r7, lr}
 8005872:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8005874:	4b0e      	ldr	r3, [pc, #56]	@ (80058b0 <HAL_Init+0x40>)
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	4a0d      	ldr	r2, [pc, #52]	@ (80058b0 <HAL_Init+0x40>)
 800587a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800587e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8005880:	4b0b      	ldr	r3, [pc, #44]	@ (80058b0 <HAL_Init+0x40>)
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	4a0a      	ldr	r2, [pc, #40]	@ (80058b0 <HAL_Init+0x40>)
 8005886:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800588a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800588c:	4b08      	ldr	r3, [pc, #32]	@ (80058b0 <HAL_Init+0x40>)
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	4a07      	ldr	r2, [pc, #28]	@ (80058b0 <HAL_Init+0x40>)
 8005892:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005896:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005898:	2003      	movs	r0, #3
 800589a:	f000 fe05 	bl	80064a8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800589e:	2000      	movs	r0, #0
 80058a0:	f000 f808 	bl	80058b4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80058a4:	f7ff fb18 	bl	8004ed8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80058a8:	2300      	movs	r3, #0
}
 80058aa:	4618      	mov	r0, r3
 80058ac:	bd80      	pop	{r7, pc}
 80058ae:	bf00      	nop
 80058b0:	40023c00 	.word	0x40023c00

080058b4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80058b4:	b580      	push	{r7, lr}
 80058b6:	b082      	sub	sp, #8
 80058b8:	af00      	add	r7, sp, #0
 80058ba:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80058bc:	4b12      	ldr	r3, [pc, #72]	@ (8005908 <HAL_InitTick+0x54>)
 80058be:	681a      	ldr	r2, [r3, #0]
 80058c0:	4b12      	ldr	r3, [pc, #72]	@ (800590c <HAL_InitTick+0x58>)
 80058c2:	781b      	ldrb	r3, [r3, #0]
 80058c4:	4619      	mov	r1, r3
 80058c6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80058ca:	fbb3 f3f1 	udiv	r3, r3, r1
 80058ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80058d2:	4618      	mov	r0, r3
 80058d4:	f000 fe1d 	bl	8006512 <HAL_SYSTICK_Config>
 80058d8:	4603      	mov	r3, r0
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d001      	beq.n	80058e2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80058de:	2301      	movs	r3, #1
 80058e0:	e00e      	b.n	8005900 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	2b0f      	cmp	r3, #15
 80058e6:	d80a      	bhi.n	80058fe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80058e8:	2200      	movs	r2, #0
 80058ea:	6879      	ldr	r1, [r7, #4]
 80058ec:	f04f 30ff 	mov.w	r0, #4294967295
 80058f0:	f000 fde5 	bl	80064be <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80058f4:	4a06      	ldr	r2, [pc, #24]	@ (8005910 <HAL_InitTick+0x5c>)
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80058fa:	2300      	movs	r3, #0
 80058fc:	e000      	b.n	8005900 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80058fe:	2301      	movs	r3, #1
}
 8005900:	4618      	mov	r0, r3
 8005902:	3708      	adds	r7, #8
 8005904:	46bd      	mov	sp, r7
 8005906:	bd80      	pop	{r7, pc}
 8005908:	2000d114 	.word	0x2000d114
 800590c:	2000d11c 	.word	0x2000d11c
 8005910:	2000d118 	.word	0x2000d118

08005914 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005914:	b480      	push	{r7}
 8005916:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005918:	4b06      	ldr	r3, [pc, #24]	@ (8005934 <HAL_IncTick+0x20>)
 800591a:	781b      	ldrb	r3, [r3, #0]
 800591c:	461a      	mov	r2, r3
 800591e:	4b06      	ldr	r3, [pc, #24]	@ (8005938 <HAL_IncTick+0x24>)
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	4413      	add	r3, r2
 8005924:	4a04      	ldr	r2, [pc, #16]	@ (8005938 <HAL_IncTick+0x24>)
 8005926:	6013      	str	r3, [r2, #0]
}
 8005928:	bf00      	nop
 800592a:	46bd      	mov	sp, r7
 800592c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005930:	4770      	bx	lr
 8005932:	bf00      	nop
 8005934:	2000d11c 	.word	0x2000d11c
 8005938:	200161a0 	.word	0x200161a0

0800593c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800593c:	b480      	push	{r7}
 800593e:	af00      	add	r7, sp, #0
  return uwTick;
 8005940:	4b03      	ldr	r3, [pc, #12]	@ (8005950 <HAL_GetTick+0x14>)
 8005942:	681b      	ldr	r3, [r3, #0]
}
 8005944:	4618      	mov	r0, r3
 8005946:	46bd      	mov	sp, r7
 8005948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800594c:	4770      	bx	lr
 800594e:	bf00      	nop
 8005950:	200161a0 	.word	0x200161a0

08005954 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005954:	b580      	push	{r7, lr}
 8005956:	b084      	sub	sp, #16
 8005958:	af00      	add	r7, sp, #0
 800595a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800595c:	f7ff ffee 	bl	800593c <HAL_GetTick>
 8005960:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	f1b3 3fff 	cmp.w	r3, #4294967295
 800596c:	d005      	beq.n	800597a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800596e:	4b0a      	ldr	r3, [pc, #40]	@ (8005998 <HAL_Delay+0x44>)
 8005970:	781b      	ldrb	r3, [r3, #0]
 8005972:	461a      	mov	r2, r3
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	4413      	add	r3, r2
 8005978:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800597a:	bf00      	nop
 800597c:	f7ff ffde 	bl	800593c <HAL_GetTick>
 8005980:	4602      	mov	r2, r0
 8005982:	68bb      	ldr	r3, [r7, #8]
 8005984:	1ad3      	subs	r3, r2, r3
 8005986:	68fa      	ldr	r2, [r7, #12]
 8005988:	429a      	cmp	r2, r3
 800598a:	d8f7      	bhi.n	800597c <HAL_Delay+0x28>
  {
  }
}
 800598c:	bf00      	nop
 800598e:	bf00      	nop
 8005990:	3710      	adds	r7, #16
 8005992:	46bd      	mov	sp, r7
 8005994:	bd80      	pop	{r7, pc}
 8005996:	bf00      	nop
 8005998:	2000d11c 	.word	0x2000d11c

0800599c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800599c:	b580      	push	{r7, lr}
 800599e:	b084      	sub	sp, #16
 80059a0:	af00      	add	r7, sp, #0
 80059a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80059a4:	2300      	movs	r3, #0
 80059a6:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d101      	bne.n	80059b2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80059ae:	2301      	movs	r3, #1
 80059b0:	e033      	b.n	8005a1a <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d109      	bne.n	80059ce <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80059ba:	6878      	ldr	r0, [r7, #4]
 80059bc:	f7fb fc7c 	bl	80012b8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	2200      	movs	r2, #0
 80059c4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	2200      	movs	r2, #0
 80059ca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80059d2:	f003 0310 	and.w	r3, r3, #16
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d118      	bne.n	8005a0c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80059de:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80059e2:	f023 0302 	bic.w	r3, r3, #2
 80059e6:	f043 0202 	orr.w	r2, r3, #2
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 80059ee:	6878      	ldr	r0, [r7, #4]
 80059f0:	f000 fb0c 	bl	800600c <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	2200      	movs	r2, #0
 80059f8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80059fe:	f023 0303 	bic.w	r3, r3, #3
 8005a02:	f043 0201 	orr.w	r2, r3, #1
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	641a      	str	r2, [r3, #64]	@ 0x40
 8005a0a:	e001      	b.n	8005a10 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8005a0c:	2301      	movs	r3, #1
 8005a0e:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	2200      	movs	r2, #0
 8005a14:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8005a18:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a1a:	4618      	mov	r0, r3
 8005a1c:	3710      	adds	r7, #16
 8005a1e:	46bd      	mov	sp, r7
 8005a20:	bd80      	pop	{r7, pc}
	...

08005a24 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8005a24:	b580      	push	{r7, lr}
 8005a26:	b088      	sub	sp, #32
 8005a28:	af00      	add	r7, sp, #0
 8005a2a:	60f8      	str	r0, [r7, #12]
 8005a2c:	60b9      	str	r1, [r7, #8]
 8005a2e:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8005a30:	2300      	movs	r3, #0
 8005a32:	617b      	str	r3, [r7, #20]
  ADC_Common_TypeDef *tmpADC_Common;
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005a34:	2300      	movs	r3, #0
 8005a36:	77fb      	strb	r3, [r7, #31]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005a3e:	2b01      	cmp	r3, #1
 8005a40:	d101      	bne.n	8005a46 <HAL_ADC_Start_DMA+0x22>
 8005a42:	2302      	movs	r3, #2
 8005a44:	e0d0      	b.n	8005be8 <HAL_ADC_Start_DMA+0x1c4>
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	2201      	movs	r2, #1
 8005a4a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	689b      	ldr	r3, [r3, #8]
 8005a54:	f003 0301 	and.w	r3, r3, #1
 8005a58:	2b01      	cmp	r3, #1
 8005a5a:	d018      	beq.n	8005a8e <HAL_ADC_Start_DMA+0x6a>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	689a      	ldr	r2, [r3, #8]
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	f042 0201 	orr.w	r2, r2, #1
 8005a6a:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8005a6c:	4b60      	ldr	r3, [pc, #384]	@ (8005bf0 <HAL_ADC_Start_DMA+0x1cc>)
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	4a60      	ldr	r2, [pc, #384]	@ (8005bf4 <HAL_ADC_Start_DMA+0x1d0>)
 8005a72:	fba2 2303 	umull	r2, r3, r2, r3
 8005a76:	0c9a      	lsrs	r2, r3, #18
 8005a78:	4613      	mov	r3, r2
 8005a7a:	005b      	lsls	r3, r3, #1
 8005a7c:	4413      	add	r3, r2
 8005a7e:	617b      	str	r3, [r7, #20]
    while (counter != 0U)
 8005a80:	e002      	b.n	8005a88 <HAL_ADC_Start_DMA+0x64>
    {
      counter--;
 8005a82:	697b      	ldr	r3, [r7, #20]
 8005a84:	3b01      	subs	r3, #1
 8005a86:	617b      	str	r3, [r7, #20]
    while (counter != 0U)
 8005a88:	697b      	ldr	r3, [r7, #20]
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d1f9      	bne.n	8005a82 <HAL_ADC_Start_DMA+0x5e>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	689b      	ldr	r3, [r3, #8]
 8005a94:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005a98:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005a9c:	d107      	bne.n	8005aae <HAL_ADC_Start_DMA+0x8a>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	689a      	ldr	r2, [r3, #8]
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005aac:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	689b      	ldr	r3, [r3, #8]
 8005ab4:	f003 0301 	and.w	r3, r3, #1
 8005ab8:	2b01      	cmp	r3, #1
 8005aba:	f040 8088 	bne.w	8005bce <HAL_ADC_Start_DMA+0x1aa>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ac2:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8005ac6:	f023 0301 	bic.w	r3, r3, #1
 8005aca:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	685b      	ldr	r3, [r3, #4]
 8005ad8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d007      	beq.n	8005af0 <HAL_ADC_Start_DMA+0xcc>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ae4:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8005ae8:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005af4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005af8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005afc:	d106      	bne.n	8005b0c <HAL_ADC_Start_DMA+0xe8>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005b02:	f023 0206 	bic.w	r2, r3, #6
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	645a      	str	r2, [r3, #68]	@ 0x44
 8005b0a:	e002      	b.n	8005b12 <HAL_ADC_Start_DMA+0xee>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	2200      	movs	r2, #0
 8005b10:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	2200      	movs	r2, #0
 8005b16:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005b1a:	4b37      	ldr	r3, [pc, #220]	@ (8005bf8 <HAL_ADC_Start_DMA+0x1d4>)
 8005b1c:	61bb      	str	r3, [r7, #24]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b22:	4a36      	ldr	r2, [pc, #216]	@ (8005bfc <HAL_ADC_Start_DMA+0x1d8>)
 8005b24:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b2a:	4a35      	ldr	r2, [pc, #212]	@ (8005c00 <HAL_ADC_Start_DMA+0x1dc>)
 8005b2c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b32:	4a34      	ldr	r2, [pc, #208]	@ (8005c04 <HAL_ADC_Start_DMA+0x1e0>)
 8005b34:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8005b3e:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	685a      	ldr	r2, [r3, #4]
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 8005b4e:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	689a      	ldr	r2, [r3, #8]
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005b5e:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	334c      	adds	r3, #76	@ 0x4c
 8005b6a:	4619      	mov	r1, r3
 8005b6c:	68ba      	ldr	r2, [r7, #8]
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	f000 fda6 	bl	80066c0 <HAL_DMA_Start_IT>
 8005b74:	4603      	mov	r3, r0
 8005b76:	77fb      	strb	r3, [r7, #31]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8005b78:	69bb      	ldr	r3, [r7, #24]
 8005b7a:	685b      	ldr	r3, [r3, #4]
 8005b7c:	f003 031f 	and.w	r3, r3, #31
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d10f      	bne.n	8005ba4 <HAL_ADC_Start_DMA+0x180>
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	689b      	ldr	r3, [r3, #8]
 8005b8a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d129      	bne.n	8005be6 <HAL_ADC_Start_DMA+0x1c2>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	689a      	ldr	r2, [r3, #8]
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8005ba0:	609a      	str	r2, [r3, #8]
 8005ba2:	e020      	b.n	8005be6 <HAL_ADC_Start_DMA+0x1c2>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	4a17      	ldr	r2, [pc, #92]	@ (8005c08 <HAL_ADC_Start_DMA+0x1e4>)
 8005baa:	4293      	cmp	r3, r2
 8005bac:	d11b      	bne.n	8005be6 <HAL_ADC_Start_DMA+0x1c2>
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	689b      	ldr	r3, [r3, #8]
 8005bb4:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d114      	bne.n	8005be6 <HAL_ADC_Start_DMA+0x1c2>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	689a      	ldr	r2, [r3, #8]
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8005bca:	609a      	str	r2, [r3, #8]
 8005bcc:	e00b      	b.n	8005be6 <HAL_ADC_Start_DMA+0x1c2>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005bd2:	f043 0210 	orr.w	r2, r3, #16
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005bde:	f043 0201 	orr.w	r2, r3, #1
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return tmp_hal_status;
 8005be6:	7ffb      	ldrb	r3, [r7, #31]
}
 8005be8:	4618      	mov	r0, r3
 8005bea:	3720      	adds	r7, #32
 8005bec:	46bd      	mov	sp, r7
 8005bee:	bd80      	pop	{r7, pc}
 8005bf0:	2000d114 	.word	0x2000d114
 8005bf4:	431bde83 	.word	0x431bde83
 8005bf8:	40012300 	.word	0x40012300
 8005bfc:	08006205 	.word	0x08006205
 8005c00:	080062bf 	.word	0x080062bf
 8005c04:	080062db 	.word	0x080062db
 8005c08:	40012000 	.word	0x40012000

08005c0c <HAL_ADC_Stop_DMA>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef *hadc)
{
 8005c0c:	b580      	push	{r7, lr}
 8005c0e:	b084      	sub	sp, #16
 8005c10:	af00      	add	r7, sp, #0
 8005c12:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005c14:	2300      	movs	r3, #0
 8005c16:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005c1e:	2b01      	cmp	r3, #1
 8005c20:	d101      	bne.n	8005c26 <HAL_ADC_Stop_DMA+0x1a>
 8005c22:	2302      	movs	r3, #2
 8005c24:	e048      	b.n	8005cb8 <HAL_ADC_Stop_DMA+0xac>
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	2201      	movs	r2, #1
 8005c2a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	689a      	ldr	r2, [r3, #8]
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	f022 0201 	bic.w	r2, r2, #1
 8005c3c:	609a      	str	r2, [r3, #8]

  /* Check if ADC is effectively disabled */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	689b      	ldr	r3, [r3, #8]
 8005c44:	f003 0301 	and.w	r3, r3, #1
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d130      	bne.n	8005cae <HAL_ADC_Stop_DMA+0xa2>
  {
    /* Disable the selected ADC DMA mode */
    hadc->Instance->CR2 &= ~ADC_CR2_DMA;
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	689a      	ldr	r2, [r3, #8]
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005c5a:	609a      	str	r2, [r3, #8]

    /* Disable the DMA channel (in case of DMA in circular mode or stop while */
    /* DMA transfer is on going)                                              */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c60:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005c64:	b2db      	uxtb	r3, r3
 8005c66:	2b02      	cmp	r3, #2
 8005c68:	d10f      	bne.n	8005c8a <HAL_ADC_Stop_DMA+0x7e>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c6e:	4618      	mov	r0, r3
 8005c70:	f000 fd7e 	bl	8006770 <HAL_DMA_Abort>
 8005c74:	4603      	mov	r3, r0
 8005c76:	73fb      	strb	r3, [r7, #15]

      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 8005c78:	7bfb      	ldrb	r3, [r7, #15]
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d005      	beq.n	8005c8a <HAL_ADC_Stop_DMA+0x7e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c82:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	641a      	str	r2, [r3, #64]	@ 0x40
      }
    }

    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	685a      	ldr	r2, [r3, #4]
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	f022 6280 	bic.w	r2, r2, #67108864	@ 0x4000000
 8005c98:	605a      	str	r2, [r3, #4]

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c9e:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8005ca2:	f023 0301 	bic.w	r3, r3, #1
 8005ca6:	f043 0201 	orr.w	r2, r3, #1
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	2200      	movs	r2, #0
 8005cb2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8005cb6:	7bfb      	ldrb	r3, [r7, #15]
}
 8005cb8:	4618      	mov	r0, r3
 8005cba:	3710      	adds	r7, #16
 8005cbc:	46bd      	mov	sp, r7
 8005cbe:	bd80      	pop	{r7, pc}

08005cc0 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8005cc0:	b480      	push	{r7}
 8005cc2:	b083      	sub	sp, #12
 8005cc4:	af00      	add	r7, sp, #0
 8005cc6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8005cc8:	bf00      	nop
 8005cca:	370c      	adds	r7, #12
 8005ccc:	46bd      	mov	sp, r7
 8005cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd2:	4770      	bx	lr

08005cd4 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8005cd4:	b480      	push	{r7}
 8005cd6:	b083      	sub	sp, #12
 8005cd8:	af00      	add	r7, sp, #0
 8005cda:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8005cdc:	bf00      	nop
 8005cde:	370c      	adds	r7, #12
 8005ce0:	46bd      	mov	sp, r7
 8005ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ce6:	4770      	bx	lr

08005ce8 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8005ce8:	b480      	push	{r7}
 8005cea:	b085      	sub	sp, #20
 8005cec:	af00      	add	r7, sp, #0
 8005cee:	6078      	str	r0, [r7, #4]
 8005cf0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8005cf2:	2300      	movs	r3, #0
 8005cf4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005cfc:	2b01      	cmp	r3, #1
 8005cfe:	d101      	bne.n	8005d04 <HAL_ADC_ConfigChannel+0x1c>
 8005d00:	2302      	movs	r3, #2
 8005d02:	e113      	b.n	8005f2c <HAL_ADC_ConfigChannel+0x244>
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	2201      	movs	r2, #1
 8005d08:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8005d0c:	683b      	ldr	r3, [r7, #0]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	2b09      	cmp	r3, #9
 8005d12:	d925      	bls.n	8005d60 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	68d9      	ldr	r1, [r3, #12]
 8005d1a:	683b      	ldr	r3, [r7, #0]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	b29b      	uxth	r3, r3
 8005d20:	461a      	mov	r2, r3
 8005d22:	4613      	mov	r3, r2
 8005d24:	005b      	lsls	r3, r3, #1
 8005d26:	4413      	add	r3, r2
 8005d28:	3b1e      	subs	r3, #30
 8005d2a:	2207      	movs	r2, #7
 8005d2c:	fa02 f303 	lsl.w	r3, r2, r3
 8005d30:	43da      	mvns	r2, r3
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	400a      	ands	r2, r1
 8005d38:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	68d9      	ldr	r1, [r3, #12]
 8005d40:	683b      	ldr	r3, [r7, #0]
 8005d42:	689a      	ldr	r2, [r3, #8]
 8005d44:	683b      	ldr	r3, [r7, #0]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	b29b      	uxth	r3, r3
 8005d4a:	4618      	mov	r0, r3
 8005d4c:	4603      	mov	r3, r0
 8005d4e:	005b      	lsls	r3, r3, #1
 8005d50:	4403      	add	r3, r0
 8005d52:	3b1e      	subs	r3, #30
 8005d54:	409a      	lsls	r2, r3
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	430a      	orrs	r2, r1
 8005d5c:	60da      	str	r2, [r3, #12]
 8005d5e:	e022      	b.n	8005da6 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	6919      	ldr	r1, [r3, #16]
 8005d66:	683b      	ldr	r3, [r7, #0]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	b29b      	uxth	r3, r3
 8005d6c:	461a      	mov	r2, r3
 8005d6e:	4613      	mov	r3, r2
 8005d70:	005b      	lsls	r3, r3, #1
 8005d72:	4413      	add	r3, r2
 8005d74:	2207      	movs	r2, #7
 8005d76:	fa02 f303 	lsl.w	r3, r2, r3
 8005d7a:	43da      	mvns	r2, r3
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	400a      	ands	r2, r1
 8005d82:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	6919      	ldr	r1, [r3, #16]
 8005d8a:	683b      	ldr	r3, [r7, #0]
 8005d8c:	689a      	ldr	r2, [r3, #8]
 8005d8e:	683b      	ldr	r3, [r7, #0]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	b29b      	uxth	r3, r3
 8005d94:	4618      	mov	r0, r3
 8005d96:	4603      	mov	r3, r0
 8005d98:	005b      	lsls	r3, r3, #1
 8005d9a:	4403      	add	r3, r0
 8005d9c:	409a      	lsls	r2, r3
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	430a      	orrs	r2, r1
 8005da4:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8005da6:	683b      	ldr	r3, [r7, #0]
 8005da8:	685b      	ldr	r3, [r3, #4]
 8005daa:	2b06      	cmp	r3, #6
 8005dac:	d824      	bhi.n	8005df8 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8005db4:	683b      	ldr	r3, [r7, #0]
 8005db6:	685a      	ldr	r2, [r3, #4]
 8005db8:	4613      	mov	r3, r2
 8005dba:	009b      	lsls	r3, r3, #2
 8005dbc:	4413      	add	r3, r2
 8005dbe:	3b05      	subs	r3, #5
 8005dc0:	221f      	movs	r2, #31
 8005dc2:	fa02 f303 	lsl.w	r3, r2, r3
 8005dc6:	43da      	mvns	r2, r3
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	400a      	ands	r2, r1
 8005dce:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8005dd6:	683b      	ldr	r3, [r7, #0]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	b29b      	uxth	r3, r3
 8005ddc:	4618      	mov	r0, r3
 8005dde:	683b      	ldr	r3, [r7, #0]
 8005de0:	685a      	ldr	r2, [r3, #4]
 8005de2:	4613      	mov	r3, r2
 8005de4:	009b      	lsls	r3, r3, #2
 8005de6:	4413      	add	r3, r2
 8005de8:	3b05      	subs	r3, #5
 8005dea:	fa00 f203 	lsl.w	r2, r0, r3
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	430a      	orrs	r2, r1
 8005df4:	635a      	str	r2, [r3, #52]	@ 0x34
 8005df6:	e04c      	b.n	8005e92 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8005df8:	683b      	ldr	r3, [r7, #0]
 8005dfa:	685b      	ldr	r3, [r3, #4]
 8005dfc:	2b0c      	cmp	r3, #12
 8005dfe:	d824      	bhi.n	8005e4a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8005e06:	683b      	ldr	r3, [r7, #0]
 8005e08:	685a      	ldr	r2, [r3, #4]
 8005e0a:	4613      	mov	r3, r2
 8005e0c:	009b      	lsls	r3, r3, #2
 8005e0e:	4413      	add	r3, r2
 8005e10:	3b23      	subs	r3, #35	@ 0x23
 8005e12:	221f      	movs	r2, #31
 8005e14:	fa02 f303 	lsl.w	r3, r2, r3
 8005e18:	43da      	mvns	r2, r3
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	400a      	ands	r2, r1
 8005e20:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8005e28:	683b      	ldr	r3, [r7, #0]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	b29b      	uxth	r3, r3
 8005e2e:	4618      	mov	r0, r3
 8005e30:	683b      	ldr	r3, [r7, #0]
 8005e32:	685a      	ldr	r2, [r3, #4]
 8005e34:	4613      	mov	r3, r2
 8005e36:	009b      	lsls	r3, r3, #2
 8005e38:	4413      	add	r3, r2
 8005e3a:	3b23      	subs	r3, #35	@ 0x23
 8005e3c:	fa00 f203 	lsl.w	r2, r0, r3
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	430a      	orrs	r2, r1
 8005e46:	631a      	str	r2, [r3, #48]	@ 0x30
 8005e48:	e023      	b.n	8005e92 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8005e50:	683b      	ldr	r3, [r7, #0]
 8005e52:	685a      	ldr	r2, [r3, #4]
 8005e54:	4613      	mov	r3, r2
 8005e56:	009b      	lsls	r3, r3, #2
 8005e58:	4413      	add	r3, r2
 8005e5a:	3b41      	subs	r3, #65	@ 0x41
 8005e5c:	221f      	movs	r2, #31
 8005e5e:	fa02 f303 	lsl.w	r3, r2, r3
 8005e62:	43da      	mvns	r2, r3
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	400a      	ands	r2, r1
 8005e6a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8005e72:	683b      	ldr	r3, [r7, #0]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	b29b      	uxth	r3, r3
 8005e78:	4618      	mov	r0, r3
 8005e7a:	683b      	ldr	r3, [r7, #0]
 8005e7c:	685a      	ldr	r2, [r3, #4]
 8005e7e:	4613      	mov	r3, r2
 8005e80:	009b      	lsls	r3, r3, #2
 8005e82:	4413      	add	r3, r2
 8005e84:	3b41      	subs	r3, #65	@ 0x41
 8005e86:	fa00 f203 	lsl.w	r2, r0, r3
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	430a      	orrs	r2, r1
 8005e90:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005e92:	4b29      	ldr	r3, [pc, #164]	@ (8005f38 <HAL_ADC_ConfigChannel+0x250>)
 8005e94:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	4a28      	ldr	r2, [pc, #160]	@ (8005f3c <HAL_ADC_ConfigChannel+0x254>)
 8005e9c:	4293      	cmp	r3, r2
 8005e9e:	d10f      	bne.n	8005ec0 <HAL_ADC_ConfigChannel+0x1d8>
 8005ea0:	683b      	ldr	r3, [r7, #0]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	2b12      	cmp	r3, #18
 8005ea6:	d10b      	bne.n	8005ec0 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	685b      	ldr	r3, [r3, #4]
 8005eac:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	685b      	ldr	r3, [r3, #4]
 8005eb8:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	4a1d      	ldr	r2, [pc, #116]	@ (8005f3c <HAL_ADC_ConfigChannel+0x254>)
 8005ec6:	4293      	cmp	r3, r2
 8005ec8:	d12b      	bne.n	8005f22 <HAL_ADC_ConfigChannel+0x23a>
 8005eca:	683b      	ldr	r3, [r7, #0]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	4a1c      	ldr	r2, [pc, #112]	@ (8005f40 <HAL_ADC_ConfigChannel+0x258>)
 8005ed0:	4293      	cmp	r3, r2
 8005ed2:	d003      	beq.n	8005edc <HAL_ADC_ConfigChannel+0x1f4>
 8005ed4:	683b      	ldr	r3, [r7, #0]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	2b11      	cmp	r3, #17
 8005eda:	d122      	bne.n	8005f22 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	685b      	ldr	r3, [r3, #4]
 8005ee0:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	685b      	ldr	r3, [r3, #4]
 8005eec:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8005ef4:	683b      	ldr	r3, [r7, #0]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	4a11      	ldr	r2, [pc, #68]	@ (8005f40 <HAL_ADC_ConfigChannel+0x258>)
 8005efa:	4293      	cmp	r3, r2
 8005efc:	d111      	bne.n	8005f22 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8005efe:	4b11      	ldr	r3, [pc, #68]	@ (8005f44 <HAL_ADC_ConfigChannel+0x25c>)
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	4a11      	ldr	r2, [pc, #68]	@ (8005f48 <HAL_ADC_ConfigChannel+0x260>)
 8005f04:	fba2 2303 	umull	r2, r3, r2, r3
 8005f08:	0c9a      	lsrs	r2, r3, #18
 8005f0a:	4613      	mov	r3, r2
 8005f0c:	009b      	lsls	r3, r3, #2
 8005f0e:	4413      	add	r3, r2
 8005f10:	005b      	lsls	r3, r3, #1
 8005f12:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8005f14:	e002      	b.n	8005f1c <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8005f16:	68bb      	ldr	r3, [r7, #8]
 8005f18:	3b01      	subs	r3, #1
 8005f1a:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8005f1c:	68bb      	ldr	r3, [r7, #8]
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d1f9      	bne.n	8005f16 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	2200      	movs	r2, #0
 8005f26:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8005f2a:	2300      	movs	r3, #0
}
 8005f2c:	4618      	mov	r0, r3
 8005f2e:	3714      	adds	r7, #20
 8005f30:	46bd      	mov	sp, r7
 8005f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f36:	4770      	bx	lr
 8005f38:	40012300 	.word	0x40012300
 8005f3c:	40012000 	.word	0x40012000
 8005f40:	10000012 	.word	0x10000012
 8005f44:	2000d114 	.word	0x2000d114
 8005f48:	431bde83 	.word	0x431bde83

08005f4c <HAL_ADC_AnalogWDGConfig>:
  * @param  AnalogWDGConfig  pointer to an ADC_AnalogWDGConfTypeDef structure
  *         that contains the configuration information of ADC analog watchdog.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_AnalogWDGConfig(ADC_HandleTypeDef *hadc, ADC_AnalogWDGConfTypeDef *AnalogWDGConfig)
{
 8005f4c:	b480      	push	{r7}
 8005f4e:	b083      	sub	sp, #12
 8005f50:	af00      	add	r7, sp, #0
 8005f52:	6078      	str	r0, [r7, #4]
 8005f54:	6039      	str	r1, [r7, #0]
  assert_param(IS_ADC_RANGE(tmp, AnalogWDGConfig->HighThreshold));
  assert_param(IS_ADC_RANGE(tmp, AnalogWDGConfig->LowThreshold));
#endif /* USE_FULL_ASSERT  */

  /* Process locked */
  __HAL_LOCK(hadc);
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005f5c:	2b01      	cmp	r3, #1
 8005f5e:	d101      	bne.n	8005f64 <HAL_ADC_AnalogWDGConfig+0x18>
 8005f60:	2302      	movs	r3, #2
 8005f62:	e04d      	b.n	8006000 <HAL_ADC_AnalogWDGConfig+0xb4>
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	2201      	movs	r2, #1
 8005f68:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (AnalogWDGConfig->ITMode == ENABLE)
 8005f6c:	683b      	ldr	r3, [r7, #0]
 8005f6e:	7c1b      	ldrb	r3, [r3, #16]
 8005f70:	2b01      	cmp	r3, #1
 8005f72:	d108      	bne.n	8005f86 <HAL_ADC_AnalogWDGConfig+0x3a>
  {
    /* Enable the ADC Analog watchdog interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_AWD);
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	685a      	ldr	r2, [r3, #4]
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005f82:	605a      	str	r2, [r3, #4]
 8005f84:	e007      	b.n	8005f96 <HAL_ADC_AnalogWDGConfig+0x4a>
  }
  else
  {
    /* Disable the ADC Analog watchdog interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_AWD);
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	685a      	ldr	r2, [r3, #4]
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005f94:	605a      	str	r2, [r3, #4]
  }

  /* Clear AWDEN, JAWDEN and AWDSGL bits */
  hadc->Instance->CR1 &=  ~(ADC_CR1_AWDSGL | ADC_CR1_JAWDEN | ADC_CR1_AWDEN);
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	685b      	ldr	r3, [r3, #4]
 8005f9c:	687a      	ldr	r2, [r7, #4]
 8005f9e:	6812      	ldr	r2, [r2, #0]
 8005fa0:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8005fa4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005fa8:	6053      	str	r3, [r2, #4]

  /* Set the analog watchdog enable mode */
  hadc->Instance->CR1 |= AnalogWDGConfig->WatchdogMode;
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	6859      	ldr	r1, [r3, #4]
 8005fb0:	683b      	ldr	r3, [r7, #0]
 8005fb2:	681a      	ldr	r2, [r3, #0]
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	430a      	orrs	r2, r1
 8005fba:	605a      	str	r2, [r3, #4]

  /* Set the high threshold */
  hadc->Instance->HTR = AnalogWDGConfig->HighThreshold;
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	683a      	ldr	r2, [r7, #0]
 8005fc2:	6852      	ldr	r2, [r2, #4]
 8005fc4:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set the low threshold */
  hadc->Instance->LTR = AnalogWDGConfig->LowThreshold;
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	683a      	ldr	r2, [r7, #0]
 8005fcc:	6892      	ldr	r2, [r2, #8]
 8005fce:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Clear the Analog watchdog channel select bits */
  hadc->Instance->CR1 &= ~ADC_CR1_AWDCH;
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	685a      	ldr	r2, [r3, #4]
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	f022 021f 	bic.w	r2, r2, #31
 8005fde:	605a      	str	r2, [r3, #4]

  /* Set the Analog watchdog channel */
  hadc->Instance->CR1 |= (uint32_t)((uint16_t)(AnalogWDGConfig->Channel));
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	685a      	ldr	r2, [r3, #4]
 8005fe6:	683b      	ldr	r3, [r7, #0]
 8005fe8:	68db      	ldr	r3, [r3, #12]
 8005fea:	b29b      	uxth	r3, r3
 8005fec:	4619      	mov	r1, r3
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	430a      	orrs	r2, r1
 8005ff4:	605a      	str	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	2200      	movs	r2, #0
 8005ffa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8005ffe:	2300      	movs	r3, #0
}
 8006000:	4618      	mov	r0, r3
 8006002:	370c      	adds	r7, #12
 8006004:	46bd      	mov	sp, r7
 8006006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800600a:	4770      	bx	lr

0800600c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 800600c:	b480      	push	{r7}
 800600e:	b085      	sub	sp, #20
 8006010:	af00      	add	r7, sp, #0
 8006012:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8006014:	4b79      	ldr	r3, [pc, #484]	@ (80061fc <ADC_Init+0x1f0>)
 8006016:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	685b      	ldr	r3, [r3, #4]
 800601c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	685a      	ldr	r2, [r3, #4]
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	685b      	ldr	r3, [r3, #4]
 800602c:	431a      	orrs	r2, r3
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	685a      	ldr	r2, [r3, #4]
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006040:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	6859      	ldr	r1, [r3, #4]
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	691b      	ldr	r3, [r3, #16]
 800604c:	021a      	lsls	r2, r3, #8
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	430a      	orrs	r2, r1
 8006054:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	685a      	ldr	r2, [r3, #4]
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8006064:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	6859      	ldr	r1, [r3, #4]
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	689a      	ldr	r2, [r3, #8]
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	430a      	orrs	r2, r1
 8006076:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	689a      	ldr	r2, [r3, #8]
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006086:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	6899      	ldr	r1, [r3, #8]
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	68da      	ldr	r2, [r3, #12]
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	430a      	orrs	r2, r1
 8006098:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800609e:	4a58      	ldr	r2, [pc, #352]	@ (8006200 <ADC_Init+0x1f4>)
 80060a0:	4293      	cmp	r3, r2
 80060a2:	d022      	beq.n	80060ea <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	689a      	ldr	r2, [r3, #8]
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80060b2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	6899      	ldr	r1, [r3, #8]
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	430a      	orrs	r2, r1
 80060c4:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	689a      	ldr	r2, [r3, #8]
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80060d4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	6899      	ldr	r1, [r3, #8]
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	430a      	orrs	r2, r1
 80060e6:	609a      	str	r2, [r3, #8]
 80060e8:	e00f      	b.n	800610a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	689a      	ldr	r2, [r3, #8]
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80060f8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	689a      	ldr	r2, [r3, #8]
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8006108:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	689a      	ldr	r2, [r3, #8]
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	f022 0202 	bic.w	r2, r2, #2
 8006118:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	6899      	ldr	r1, [r3, #8]
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	7e1b      	ldrb	r3, [r3, #24]
 8006124:	005a      	lsls	r2, r3, #1
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	430a      	orrs	r2, r1
 800612c:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006134:	2b00      	cmp	r3, #0
 8006136:	d01b      	beq.n	8006170 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	685a      	ldr	r2, [r3, #4]
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006146:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	685a      	ldr	r2, [r3, #4]
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8006156:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	6859      	ldr	r1, [r3, #4]
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006162:	3b01      	subs	r3, #1
 8006164:	035a      	lsls	r2, r3, #13
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	430a      	orrs	r2, r1
 800616c:	605a      	str	r2, [r3, #4]
 800616e:	e007      	b.n	8006180 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	685a      	ldr	r2, [r3, #4]
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800617e:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 800618e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	69db      	ldr	r3, [r3, #28]
 800619a:	3b01      	subs	r3, #1
 800619c:	051a      	lsls	r2, r3, #20
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	430a      	orrs	r2, r1
 80061a4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	689a      	ldr	r2, [r3, #8]
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80061b4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	6899      	ldr	r1, [r3, #8]
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80061c2:	025a      	lsls	r2, r3, #9
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	430a      	orrs	r2, r1
 80061ca:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	689a      	ldr	r2, [r3, #8]
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80061da:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	6899      	ldr	r1, [r3, #8]
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	695b      	ldr	r3, [r3, #20]
 80061e6:	029a      	lsls	r2, r3, #10
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	430a      	orrs	r2, r1
 80061ee:	609a      	str	r2, [r3, #8]
}
 80061f0:	bf00      	nop
 80061f2:	3714      	adds	r7, #20
 80061f4:	46bd      	mov	sp, r7
 80061f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061fa:	4770      	bx	lr
 80061fc:	40012300 	.word	0x40012300
 8006200:	0f000001 	.word	0x0f000001

08006204 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8006204:	b580      	push	{r7, lr}
 8006206:	b084      	sub	sp, #16
 8006208:	af00      	add	r7, sp, #0
 800620a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006210:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006216:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800621a:	2b00      	cmp	r3, #0
 800621c:	d13c      	bne.n	8006298 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006222:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	689b      	ldr	r3, [r3, #8]
 8006230:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8006234:	2b00      	cmp	r3, #0
 8006236:	d12b      	bne.n	8006290 <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800623c:	2b00      	cmp	r3, #0
 800623e:	d127      	bne.n	8006290 <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006246:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800624a:	2b00      	cmp	r3, #0
 800624c:	d006      	beq.n	800625c <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	689b      	ldr	r3, [r3, #8]
 8006254:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8006258:	2b00      	cmp	r3, #0
 800625a:	d119      	bne.n	8006290 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	685a      	ldr	r2, [r3, #4]
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	f022 0220 	bic.w	r2, r2, #32
 800626a:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006270:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800627c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006280:	2b00      	cmp	r3, #0
 8006282:	d105      	bne.n	8006290 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006288:	f043 0201 	orr.w	r2, r3, #1
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8006290:	68f8      	ldr	r0, [r7, #12]
 8006292:	f7fc f8ab 	bl	80023ec <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8006296:	e00e      	b.n	80062b6 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800629c:	f003 0310 	and.w	r3, r3, #16
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d003      	beq.n	80062ac <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 80062a4:	68f8      	ldr	r0, [r7, #12]
 80062a6:	f7ff fd15 	bl	8005cd4 <HAL_ADC_ErrorCallback>
}
 80062aa:	e004      	b.n	80062b6 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80062b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80062b2:	6878      	ldr	r0, [r7, #4]
 80062b4:	4798      	blx	r3
}
 80062b6:	bf00      	nop
 80062b8:	3710      	adds	r7, #16
 80062ba:	46bd      	mov	sp, r7
 80062bc:	bd80      	pop	{r7, pc}

080062be <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80062be:	b580      	push	{r7, lr}
 80062c0:	b084      	sub	sp, #16
 80062c2:	af00      	add	r7, sp, #0
 80062c4:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80062ca:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80062cc:	68f8      	ldr	r0, [r7, #12]
 80062ce:	f7ff fcf7 	bl	8005cc0 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80062d2:	bf00      	nop
 80062d4:	3710      	adds	r7, #16
 80062d6:	46bd      	mov	sp, r7
 80062d8:	bd80      	pop	{r7, pc}

080062da <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80062da:	b580      	push	{r7, lr}
 80062dc:	b084      	sub	sp, #16
 80062de:	af00      	add	r7, sp, #0
 80062e0:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80062e6:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	2240      	movs	r2, #64	@ 0x40
 80062ec:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80062f2:	f043 0204 	orr.w	r2, r3, #4
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80062fa:	68f8      	ldr	r0, [r7, #12]
 80062fc:	f7ff fcea 	bl	8005cd4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8006300:	bf00      	nop
 8006302:	3710      	adds	r7, #16
 8006304:	46bd      	mov	sp, r7
 8006306:	bd80      	pop	{r7, pc}

08006308 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006308:	b480      	push	{r7}
 800630a:	b085      	sub	sp, #20
 800630c:	af00      	add	r7, sp, #0
 800630e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	f003 0307 	and.w	r3, r3, #7
 8006316:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006318:	4b0c      	ldr	r3, [pc, #48]	@ (800634c <__NVIC_SetPriorityGrouping+0x44>)
 800631a:	68db      	ldr	r3, [r3, #12]
 800631c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800631e:	68ba      	ldr	r2, [r7, #8]
 8006320:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8006324:	4013      	ands	r3, r2
 8006326:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800632c:	68bb      	ldr	r3, [r7, #8]
 800632e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8006330:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8006334:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006338:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800633a:	4a04      	ldr	r2, [pc, #16]	@ (800634c <__NVIC_SetPriorityGrouping+0x44>)
 800633c:	68bb      	ldr	r3, [r7, #8]
 800633e:	60d3      	str	r3, [r2, #12]
}
 8006340:	bf00      	nop
 8006342:	3714      	adds	r7, #20
 8006344:	46bd      	mov	sp, r7
 8006346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800634a:	4770      	bx	lr
 800634c:	e000ed00 	.word	0xe000ed00

08006350 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8006350:	b480      	push	{r7}
 8006352:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006354:	4b04      	ldr	r3, [pc, #16]	@ (8006368 <__NVIC_GetPriorityGrouping+0x18>)
 8006356:	68db      	ldr	r3, [r3, #12]
 8006358:	0a1b      	lsrs	r3, r3, #8
 800635a:	f003 0307 	and.w	r3, r3, #7
}
 800635e:	4618      	mov	r0, r3
 8006360:	46bd      	mov	sp, r7
 8006362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006366:	4770      	bx	lr
 8006368:	e000ed00 	.word	0xe000ed00

0800636c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800636c:	b480      	push	{r7}
 800636e:	b083      	sub	sp, #12
 8006370:	af00      	add	r7, sp, #0
 8006372:	4603      	mov	r3, r0
 8006374:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006376:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800637a:	2b00      	cmp	r3, #0
 800637c:	db0b      	blt.n	8006396 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800637e:	79fb      	ldrb	r3, [r7, #7]
 8006380:	f003 021f 	and.w	r2, r3, #31
 8006384:	4907      	ldr	r1, [pc, #28]	@ (80063a4 <__NVIC_EnableIRQ+0x38>)
 8006386:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800638a:	095b      	lsrs	r3, r3, #5
 800638c:	2001      	movs	r0, #1
 800638e:	fa00 f202 	lsl.w	r2, r0, r2
 8006392:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8006396:	bf00      	nop
 8006398:	370c      	adds	r7, #12
 800639a:	46bd      	mov	sp, r7
 800639c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063a0:	4770      	bx	lr
 80063a2:	bf00      	nop
 80063a4:	e000e100 	.word	0xe000e100

080063a8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80063a8:	b480      	push	{r7}
 80063aa:	b083      	sub	sp, #12
 80063ac:	af00      	add	r7, sp, #0
 80063ae:	4603      	mov	r3, r0
 80063b0:	6039      	str	r1, [r7, #0]
 80063b2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80063b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	db0a      	blt.n	80063d2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80063bc:	683b      	ldr	r3, [r7, #0]
 80063be:	b2da      	uxtb	r2, r3
 80063c0:	490c      	ldr	r1, [pc, #48]	@ (80063f4 <__NVIC_SetPriority+0x4c>)
 80063c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80063c6:	0112      	lsls	r2, r2, #4
 80063c8:	b2d2      	uxtb	r2, r2
 80063ca:	440b      	add	r3, r1
 80063cc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80063d0:	e00a      	b.n	80063e8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80063d2:	683b      	ldr	r3, [r7, #0]
 80063d4:	b2da      	uxtb	r2, r3
 80063d6:	4908      	ldr	r1, [pc, #32]	@ (80063f8 <__NVIC_SetPriority+0x50>)
 80063d8:	79fb      	ldrb	r3, [r7, #7]
 80063da:	f003 030f 	and.w	r3, r3, #15
 80063de:	3b04      	subs	r3, #4
 80063e0:	0112      	lsls	r2, r2, #4
 80063e2:	b2d2      	uxtb	r2, r2
 80063e4:	440b      	add	r3, r1
 80063e6:	761a      	strb	r2, [r3, #24]
}
 80063e8:	bf00      	nop
 80063ea:	370c      	adds	r7, #12
 80063ec:	46bd      	mov	sp, r7
 80063ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063f2:	4770      	bx	lr
 80063f4:	e000e100 	.word	0xe000e100
 80063f8:	e000ed00 	.word	0xe000ed00

080063fc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80063fc:	b480      	push	{r7}
 80063fe:	b089      	sub	sp, #36	@ 0x24
 8006400:	af00      	add	r7, sp, #0
 8006402:	60f8      	str	r0, [r7, #12]
 8006404:	60b9      	str	r1, [r7, #8]
 8006406:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	f003 0307 	and.w	r3, r3, #7
 800640e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006410:	69fb      	ldr	r3, [r7, #28]
 8006412:	f1c3 0307 	rsb	r3, r3, #7
 8006416:	2b04      	cmp	r3, #4
 8006418:	bf28      	it	cs
 800641a:	2304      	movcs	r3, #4
 800641c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800641e:	69fb      	ldr	r3, [r7, #28]
 8006420:	3304      	adds	r3, #4
 8006422:	2b06      	cmp	r3, #6
 8006424:	d902      	bls.n	800642c <NVIC_EncodePriority+0x30>
 8006426:	69fb      	ldr	r3, [r7, #28]
 8006428:	3b03      	subs	r3, #3
 800642a:	e000      	b.n	800642e <NVIC_EncodePriority+0x32>
 800642c:	2300      	movs	r3, #0
 800642e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006430:	f04f 32ff 	mov.w	r2, #4294967295
 8006434:	69bb      	ldr	r3, [r7, #24]
 8006436:	fa02 f303 	lsl.w	r3, r2, r3
 800643a:	43da      	mvns	r2, r3
 800643c:	68bb      	ldr	r3, [r7, #8]
 800643e:	401a      	ands	r2, r3
 8006440:	697b      	ldr	r3, [r7, #20]
 8006442:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006444:	f04f 31ff 	mov.w	r1, #4294967295
 8006448:	697b      	ldr	r3, [r7, #20]
 800644a:	fa01 f303 	lsl.w	r3, r1, r3
 800644e:	43d9      	mvns	r1, r3
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006454:	4313      	orrs	r3, r2
         );
}
 8006456:	4618      	mov	r0, r3
 8006458:	3724      	adds	r7, #36	@ 0x24
 800645a:	46bd      	mov	sp, r7
 800645c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006460:	4770      	bx	lr
	...

08006464 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8006464:	b580      	push	{r7, lr}
 8006466:	b082      	sub	sp, #8
 8006468:	af00      	add	r7, sp, #0
 800646a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	3b01      	subs	r3, #1
 8006470:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006474:	d301      	bcc.n	800647a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8006476:	2301      	movs	r3, #1
 8006478:	e00f      	b.n	800649a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800647a:	4a0a      	ldr	r2, [pc, #40]	@ (80064a4 <SysTick_Config+0x40>)
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	3b01      	subs	r3, #1
 8006480:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8006482:	210f      	movs	r1, #15
 8006484:	f04f 30ff 	mov.w	r0, #4294967295
 8006488:	f7ff ff8e 	bl	80063a8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800648c:	4b05      	ldr	r3, [pc, #20]	@ (80064a4 <SysTick_Config+0x40>)
 800648e:	2200      	movs	r2, #0
 8006490:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006492:	4b04      	ldr	r3, [pc, #16]	@ (80064a4 <SysTick_Config+0x40>)
 8006494:	2207      	movs	r2, #7
 8006496:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006498:	2300      	movs	r3, #0
}
 800649a:	4618      	mov	r0, r3
 800649c:	3708      	adds	r7, #8
 800649e:	46bd      	mov	sp, r7
 80064a0:	bd80      	pop	{r7, pc}
 80064a2:	bf00      	nop
 80064a4:	e000e010 	.word	0xe000e010

080064a8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80064a8:	b580      	push	{r7, lr}
 80064aa:	b082      	sub	sp, #8
 80064ac:	af00      	add	r7, sp, #0
 80064ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80064b0:	6878      	ldr	r0, [r7, #4]
 80064b2:	f7ff ff29 	bl	8006308 <__NVIC_SetPriorityGrouping>
}
 80064b6:	bf00      	nop
 80064b8:	3708      	adds	r7, #8
 80064ba:	46bd      	mov	sp, r7
 80064bc:	bd80      	pop	{r7, pc}

080064be <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80064be:	b580      	push	{r7, lr}
 80064c0:	b086      	sub	sp, #24
 80064c2:	af00      	add	r7, sp, #0
 80064c4:	4603      	mov	r3, r0
 80064c6:	60b9      	str	r1, [r7, #8]
 80064c8:	607a      	str	r2, [r7, #4]
 80064ca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80064cc:	2300      	movs	r3, #0
 80064ce:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80064d0:	f7ff ff3e 	bl	8006350 <__NVIC_GetPriorityGrouping>
 80064d4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80064d6:	687a      	ldr	r2, [r7, #4]
 80064d8:	68b9      	ldr	r1, [r7, #8]
 80064da:	6978      	ldr	r0, [r7, #20]
 80064dc:	f7ff ff8e 	bl	80063fc <NVIC_EncodePriority>
 80064e0:	4602      	mov	r2, r0
 80064e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80064e6:	4611      	mov	r1, r2
 80064e8:	4618      	mov	r0, r3
 80064ea:	f7ff ff5d 	bl	80063a8 <__NVIC_SetPriority>
}
 80064ee:	bf00      	nop
 80064f0:	3718      	adds	r7, #24
 80064f2:	46bd      	mov	sp, r7
 80064f4:	bd80      	pop	{r7, pc}

080064f6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80064f6:	b580      	push	{r7, lr}
 80064f8:	b082      	sub	sp, #8
 80064fa:	af00      	add	r7, sp, #0
 80064fc:	4603      	mov	r3, r0
 80064fe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006500:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006504:	4618      	mov	r0, r3
 8006506:	f7ff ff31 	bl	800636c <__NVIC_EnableIRQ>
}
 800650a:	bf00      	nop
 800650c:	3708      	adds	r7, #8
 800650e:	46bd      	mov	sp, r7
 8006510:	bd80      	pop	{r7, pc}

08006512 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8006512:	b580      	push	{r7, lr}
 8006514:	b082      	sub	sp, #8
 8006516:	af00      	add	r7, sp, #0
 8006518:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800651a:	6878      	ldr	r0, [r7, #4]
 800651c:	f7ff ffa2 	bl	8006464 <SysTick_Config>
 8006520:	4603      	mov	r3, r0
}
 8006522:	4618      	mov	r0, r3
 8006524:	3708      	adds	r7, #8
 8006526:	46bd      	mov	sp, r7
 8006528:	bd80      	pop	{r7, pc}

0800652a <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 800652a:	b580      	push	{r7, lr}
 800652c:	b082      	sub	sp, #8
 800652e:	af00      	add	r7, sp, #0
 8006530:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	2b00      	cmp	r3, #0
 8006536:	d101      	bne.n	800653c <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8006538:	2301      	movs	r3, #1
 800653a:	e00e      	b.n	800655a <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	795b      	ldrb	r3, [r3, #5]
 8006540:	b2db      	uxtb	r3, r3
 8006542:	2b00      	cmp	r3, #0
 8006544:	d105      	bne.n	8006552 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	2200      	movs	r2, #0
 800654a:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 800654c:	6878      	ldr	r0, [r7, #4]
 800654e:	f7fa ff59 	bl	8001404 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	2201      	movs	r2, #1
 8006556:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8006558:	2300      	movs	r3, #0
}
 800655a:	4618      	mov	r0, r3
 800655c:	3708      	adds	r7, #8
 800655e:	46bd      	mov	sp, r7
 8006560:	bd80      	pop	{r7, pc}
	...

08006564 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8006564:	b580      	push	{r7, lr}
 8006566:	b086      	sub	sp, #24
 8006568:	af00      	add	r7, sp, #0
 800656a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800656c:	2300      	movs	r3, #0
 800656e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8006570:	f7ff f9e4 	bl	800593c <HAL_GetTick>
 8006574:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	2b00      	cmp	r3, #0
 800657a:	d101      	bne.n	8006580 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800657c:	2301      	movs	r3, #1
 800657e:	e099      	b.n	80066b4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	2202      	movs	r2, #2
 8006584:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	2200      	movs	r2, #0
 800658c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	681a      	ldr	r2, [r3, #0]
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	f022 0201 	bic.w	r2, r2, #1
 800659e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80065a0:	e00f      	b.n	80065c2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80065a2:	f7ff f9cb 	bl	800593c <HAL_GetTick>
 80065a6:	4602      	mov	r2, r0
 80065a8:	693b      	ldr	r3, [r7, #16]
 80065aa:	1ad3      	subs	r3, r2, r3
 80065ac:	2b05      	cmp	r3, #5
 80065ae:	d908      	bls.n	80065c2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	2220      	movs	r2, #32
 80065b4:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	2203      	movs	r2, #3
 80065ba:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 80065be:	2303      	movs	r3, #3
 80065c0:	e078      	b.n	80066b4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	f003 0301 	and.w	r3, r3, #1
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d1e8      	bne.n	80065a2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80065d8:	697a      	ldr	r2, [r7, #20]
 80065da:	4b38      	ldr	r3, [pc, #224]	@ (80066bc <HAL_DMA_Init+0x158>)
 80065dc:	4013      	ands	r3, r2
 80065de:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	685a      	ldr	r2, [r3, #4]
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	689b      	ldr	r3, [r3, #8]
 80065e8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80065ee:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	691b      	ldr	r3, [r3, #16]
 80065f4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80065fa:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	699b      	ldr	r3, [r3, #24]
 8006600:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006606:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	6a1b      	ldr	r3, [r3, #32]
 800660c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800660e:	697a      	ldr	r2, [r7, #20]
 8006610:	4313      	orrs	r3, r2
 8006612:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006618:	2b04      	cmp	r3, #4
 800661a:	d107      	bne.n	800662c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006624:	4313      	orrs	r3, r2
 8006626:	697a      	ldr	r2, [r7, #20]
 8006628:	4313      	orrs	r3, r2
 800662a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	697a      	ldr	r2, [r7, #20]
 8006632:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	695b      	ldr	r3, [r3, #20]
 800663a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800663c:	697b      	ldr	r3, [r7, #20]
 800663e:	f023 0307 	bic.w	r3, r3, #7
 8006642:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006648:	697a      	ldr	r2, [r7, #20]
 800664a:	4313      	orrs	r3, r2
 800664c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006652:	2b04      	cmp	r3, #4
 8006654:	d117      	bne.n	8006686 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800665a:	697a      	ldr	r2, [r7, #20]
 800665c:	4313      	orrs	r3, r2
 800665e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006664:	2b00      	cmp	r3, #0
 8006666:	d00e      	beq.n	8006686 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8006668:	6878      	ldr	r0, [r7, #4]
 800666a:	f000 fb01 	bl	8006c70 <DMA_CheckFifoParam>
 800666e:	4603      	mov	r3, r0
 8006670:	2b00      	cmp	r3, #0
 8006672:	d008      	beq.n	8006686 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	2240      	movs	r2, #64	@ 0x40
 8006678:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	2201      	movs	r2, #1
 800667e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8006682:	2301      	movs	r3, #1
 8006684:	e016      	b.n	80066b4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	697a      	ldr	r2, [r7, #20]
 800668c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800668e:	6878      	ldr	r0, [r7, #4]
 8006690:	f000 fab8 	bl	8006c04 <DMA_CalcBaseAndBitshift>
 8006694:	4603      	mov	r3, r0
 8006696:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800669c:	223f      	movs	r2, #63	@ 0x3f
 800669e:	409a      	lsls	r2, r3
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	2200      	movs	r2, #0
 80066a8:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	2201      	movs	r2, #1
 80066ae:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80066b2:	2300      	movs	r3, #0
}
 80066b4:	4618      	mov	r0, r3
 80066b6:	3718      	adds	r7, #24
 80066b8:	46bd      	mov	sp, r7
 80066ba:	bd80      	pop	{r7, pc}
 80066bc:	f010803f 	.word	0xf010803f

080066c0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80066c0:	b580      	push	{r7, lr}
 80066c2:	b086      	sub	sp, #24
 80066c4:	af00      	add	r7, sp, #0
 80066c6:	60f8      	str	r0, [r7, #12]
 80066c8:	60b9      	str	r1, [r7, #8]
 80066ca:	607a      	str	r2, [r7, #4]
 80066cc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80066ce:	2300      	movs	r3, #0
 80066d0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80066d6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80066de:	2b01      	cmp	r3, #1
 80066e0:	d101      	bne.n	80066e6 <HAL_DMA_Start_IT+0x26>
 80066e2:	2302      	movs	r3, #2
 80066e4:	e040      	b.n	8006768 <HAL_DMA_Start_IT+0xa8>
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	2201      	movs	r2, #1
 80066ea:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80066f4:	b2db      	uxtb	r3, r3
 80066f6:	2b01      	cmp	r3, #1
 80066f8:	d12f      	bne.n	800675a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	2202      	movs	r2, #2
 80066fe:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	2200      	movs	r2, #0
 8006706:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8006708:	683b      	ldr	r3, [r7, #0]
 800670a:	687a      	ldr	r2, [r7, #4]
 800670c:	68b9      	ldr	r1, [r7, #8]
 800670e:	68f8      	ldr	r0, [r7, #12]
 8006710:	f000 fa4a 	bl	8006ba8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006718:	223f      	movs	r2, #63	@ 0x3f
 800671a:	409a      	lsls	r2, r3
 800671c:	693b      	ldr	r3, [r7, #16]
 800671e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	681a      	ldr	r2, [r3, #0]
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	f042 0216 	orr.w	r2, r2, #22
 800672e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006734:	2b00      	cmp	r3, #0
 8006736:	d007      	beq.n	8006748 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	681a      	ldr	r2, [r3, #0]
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	f042 0208 	orr.w	r2, r2, #8
 8006746:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	681a      	ldr	r2, [r3, #0]
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	f042 0201 	orr.w	r2, r2, #1
 8006756:	601a      	str	r2, [r3, #0]
 8006758:	e005      	b.n	8006766 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	2200      	movs	r2, #0
 800675e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8006762:	2302      	movs	r3, #2
 8006764:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8006766:	7dfb      	ldrb	r3, [r7, #23]
}
 8006768:	4618      	mov	r0, r3
 800676a:	3718      	adds	r7, #24
 800676c:	46bd      	mov	sp, r7
 800676e:	bd80      	pop	{r7, pc}

08006770 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8006770:	b580      	push	{r7, lr}
 8006772:	b084      	sub	sp, #16
 8006774:	af00      	add	r7, sp, #0
 8006776:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800677c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800677e:	f7ff f8dd 	bl	800593c <HAL_GetTick>
 8006782:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800678a:	b2db      	uxtb	r3, r3
 800678c:	2b02      	cmp	r3, #2
 800678e:	d008      	beq.n	80067a2 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	2280      	movs	r2, #128	@ 0x80
 8006794:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	2200      	movs	r2, #0
 800679a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 800679e:	2301      	movs	r3, #1
 80067a0:	e052      	b.n	8006848 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	681a      	ldr	r2, [r3, #0]
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	f022 0216 	bic.w	r2, r2, #22
 80067b0:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	695a      	ldr	r2, [r3, #20]
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80067c0:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d103      	bne.n	80067d2 <HAL_DMA_Abort+0x62>
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d007      	beq.n	80067e2 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	681a      	ldr	r2, [r3, #0]
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	f022 0208 	bic.w	r2, r2, #8
 80067e0:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	681a      	ldr	r2, [r3, #0]
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	f022 0201 	bic.w	r2, r2, #1
 80067f0:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80067f2:	e013      	b.n	800681c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80067f4:	f7ff f8a2 	bl	800593c <HAL_GetTick>
 80067f8:	4602      	mov	r2, r0
 80067fa:	68bb      	ldr	r3, [r7, #8]
 80067fc:	1ad3      	subs	r3, r2, r3
 80067fe:	2b05      	cmp	r3, #5
 8006800:	d90c      	bls.n	800681c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	2220      	movs	r2, #32
 8006806:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	2203      	movs	r2, #3
 800680c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	2200      	movs	r2, #0
 8006814:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8006818:	2303      	movs	r3, #3
 800681a:	e015      	b.n	8006848 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	f003 0301 	and.w	r3, r3, #1
 8006826:	2b00      	cmp	r3, #0
 8006828:	d1e4      	bne.n	80067f4 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800682e:	223f      	movs	r2, #63	@ 0x3f
 8006830:	409a      	lsls	r2, r3
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	2201      	movs	r2, #1
 800683a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	2200      	movs	r2, #0
 8006842:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8006846:	2300      	movs	r3, #0
}
 8006848:	4618      	mov	r0, r3
 800684a:	3710      	adds	r7, #16
 800684c:	46bd      	mov	sp, r7
 800684e:	bd80      	pop	{r7, pc}

08006850 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8006850:	b480      	push	{r7}
 8006852:	b083      	sub	sp, #12
 8006854:	af00      	add	r7, sp, #0
 8006856:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800685e:	b2db      	uxtb	r3, r3
 8006860:	2b02      	cmp	r3, #2
 8006862:	d004      	beq.n	800686e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	2280      	movs	r2, #128	@ 0x80
 8006868:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 800686a:	2301      	movs	r3, #1
 800686c:	e00c      	b.n	8006888 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	2205      	movs	r2, #5
 8006872:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	681a      	ldr	r2, [r3, #0]
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	f022 0201 	bic.w	r2, r2, #1
 8006884:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8006886:	2300      	movs	r3, #0
}
 8006888:	4618      	mov	r0, r3
 800688a:	370c      	adds	r7, #12
 800688c:	46bd      	mov	sp, r7
 800688e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006892:	4770      	bx	lr

08006894 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8006894:	b580      	push	{r7, lr}
 8006896:	b086      	sub	sp, #24
 8006898:	af00      	add	r7, sp, #0
 800689a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800689c:	2300      	movs	r3, #0
 800689e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80068a0:	4b8e      	ldr	r3, [pc, #568]	@ (8006adc <HAL_DMA_IRQHandler+0x248>)
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	4a8e      	ldr	r2, [pc, #568]	@ (8006ae0 <HAL_DMA_IRQHandler+0x24c>)
 80068a6:	fba2 2303 	umull	r2, r3, r2, r3
 80068aa:	0a9b      	lsrs	r3, r3, #10
 80068ac:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80068b2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80068b4:	693b      	ldr	r3, [r7, #16]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80068be:	2208      	movs	r2, #8
 80068c0:	409a      	lsls	r2, r3
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	4013      	ands	r3, r2
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d01a      	beq.n	8006900 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	f003 0304 	and.w	r3, r3, #4
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	d013      	beq.n	8006900 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	681a      	ldr	r2, [r3, #0]
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	f022 0204 	bic.w	r2, r2, #4
 80068e6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80068ec:	2208      	movs	r2, #8
 80068ee:	409a      	lsls	r2, r3
 80068f0:	693b      	ldr	r3, [r7, #16]
 80068f2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80068f8:	f043 0201 	orr.w	r2, r3, #1
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006904:	2201      	movs	r2, #1
 8006906:	409a      	lsls	r2, r3
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	4013      	ands	r3, r2
 800690c:	2b00      	cmp	r3, #0
 800690e:	d012      	beq.n	8006936 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	695b      	ldr	r3, [r3, #20]
 8006916:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800691a:	2b00      	cmp	r3, #0
 800691c:	d00b      	beq.n	8006936 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006922:	2201      	movs	r2, #1
 8006924:	409a      	lsls	r2, r3
 8006926:	693b      	ldr	r3, [r7, #16]
 8006928:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800692e:	f043 0202 	orr.w	r2, r3, #2
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800693a:	2204      	movs	r2, #4
 800693c:	409a      	lsls	r2, r3
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	4013      	ands	r3, r2
 8006942:	2b00      	cmp	r3, #0
 8006944:	d012      	beq.n	800696c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	f003 0302 	and.w	r3, r3, #2
 8006950:	2b00      	cmp	r3, #0
 8006952:	d00b      	beq.n	800696c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006958:	2204      	movs	r2, #4
 800695a:	409a      	lsls	r2, r3
 800695c:	693b      	ldr	r3, [r7, #16]
 800695e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006964:	f043 0204 	orr.w	r2, r3, #4
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006970:	2210      	movs	r2, #16
 8006972:	409a      	lsls	r2, r3
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	4013      	ands	r3, r2
 8006978:	2b00      	cmp	r3, #0
 800697a:	d043      	beq.n	8006a04 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	f003 0308 	and.w	r3, r3, #8
 8006986:	2b00      	cmp	r3, #0
 8006988:	d03c      	beq.n	8006a04 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800698e:	2210      	movs	r2, #16
 8006990:	409a      	lsls	r2, r3
 8006992:	693b      	ldr	r3, [r7, #16]
 8006994:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	d018      	beq.n	80069d6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d108      	bne.n	80069c4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d024      	beq.n	8006a04 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80069be:	6878      	ldr	r0, [r7, #4]
 80069c0:	4798      	blx	r3
 80069c2:	e01f      	b.n	8006a04 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	d01b      	beq.n	8006a04 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80069d0:	6878      	ldr	r0, [r7, #4]
 80069d2:	4798      	blx	r3
 80069d4:	e016      	b.n	8006a04 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d107      	bne.n	80069f4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	681a      	ldr	r2, [r3, #0]
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	f022 0208 	bic.w	r2, r2, #8
 80069f2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d003      	beq.n	8006a04 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a00:	6878      	ldr	r0, [r7, #4]
 8006a02:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006a08:	2220      	movs	r2, #32
 8006a0a:	409a      	lsls	r2, r3
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	4013      	ands	r3, r2
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	f000 808f 	beq.w	8006b34 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	f003 0310 	and.w	r3, r3, #16
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	f000 8087 	beq.w	8006b34 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006a2a:	2220      	movs	r2, #32
 8006a2c:	409a      	lsls	r2, r3
 8006a2e:	693b      	ldr	r3, [r7, #16]
 8006a30:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8006a38:	b2db      	uxtb	r3, r3
 8006a3a:	2b05      	cmp	r3, #5
 8006a3c:	d136      	bne.n	8006aac <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	681a      	ldr	r2, [r3, #0]
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	f022 0216 	bic.w	r2, r2, #22
 8006a4c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	695a      	ldr	r2, [r3, #20]
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006a5c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d103      	bne.n	8006a6e <HAL_DMA_IRQHandler+0x1da>
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d007      	beq.n	8006a7e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	681a      	ldr	r2, [r3, #0]
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	f022 0208 	bic.w	r2, r2, #8
 8006a7c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006a82:	223f      	movs	r2, #63	@ 0x3f
 8006a84:	409a      	lsls	r2, r3
 8006a86:	693b      	ldr	r3, [r7, #16]
 8006a88:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	2201      	movs	r2, #1
 8006a8e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	2200      	movs	r2, #0
 8006a96:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d07e      	beq.n	8006ba0 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006aa6:	6878      	ldr	r0, [r7, #4]
 8006aa8:	4798      	blx	r3
        }
        return;
 8006aaa:	e079      	b.n	8006ba0 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d01d      	beq.n	8006af6 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d10d      	bne.n	8006ae4 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	d031      	beq.n	8006b34 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006ad4:	6878      	ldr	r0, [r7, #4]
 8006ad6:	4798      	blx	r3
 8006ad8:	e02c      	b.n	8006b34 <HAL_DMA_IRQHandler+0x2a0>
 8006ada:	bf00      	nop
 8006adc:	2000d114 	.word	0x2000d114
 8006ae0:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	d023      	beq.n	8006b34 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006af0:	6878      	ldr	r0, [r7, #4]
 8006af2:	4798      	blx	r3
 8006af4:	e01e      	b.n	8006b34 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	d10f      	bne.n	8006b24 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	681a      	ldr	r2, [r3, #0]
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	f022 0210 	bic.w	r2, r2, #16
 8006b12:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	2201      	movs	r2, #1
 8006b18:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	2200      	movs	r2, #0
 8006b20:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d003      	beq.n	8006b34 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006b30:	6878      	ldr	r0, [r7, #4]
 8006b32:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d032      	beq.n	8006ba2 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006b40:	f003 0301 	and.w	r3, r3, #1
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d022      	beq.n	8006b8e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	2205      	movs	r2, #5
 8006b4c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	681a      	ldr	r2, [r3, #0]
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	f022 0201 	bic.w	r2, r2, #1
 8006b5e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8006b60:	68bb      	ldr	r3, [r7, #8]
 8006b62:	3301      	adds	r3, #1
 8006b64:	60bb      	str	r3, [r7, #8]
 8006b66:	697a      	ldr	r2, [r7, #20]
 8006b68:	429a      	cmp	r2, r3
 8006b6a:	d307      	bcc.n	8006b7c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	f003 0301 	and.w	r3, r3, #1
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d1f2      	bne.n	8006b60 <HAL_DMA_IRQHandler+0x2cc>
 8006b7a:	e000      	b.n	8006b7e <HAL_DMA_IRQHandler+0x2ea>
          break;
 8006b7c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	2201      	movs	r2, #1
 8006b82:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	2200      	movs	r2, #0
 8006b8a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d005      	beq.n	8006ba2 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006b9a:	6878      	ldr	r0, [r7, #4]
 8006b9c:	4798      	blx	r3
 8006b9e:	e000      	b.n	8006ba2 <HAL_DMA_IRQHandler+0x30e>
        return;
 8006ba0:	bf00      	nop
    }
  }
}
 8006ba2:	3718      	adds	r7, #24
 8006ba4:	46bd      	mov	sp, r7
 8006ba6:	bd80      	pop	{r7, pc}

08006ba8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006ba8:	b480      	push	{r7}
 8006baa:	b085      	sub	sp, #20
 8006bac:	af00      	add	r7, sp, #0
 8006bae:	60f8      	str	r0, [r7, #12]
 8006bb0:	60b9      	str	r1, [r7, #8]
 8006bb2:	607a      	str	r2, [r7, #4]
 8006bb4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	681a      	ldr	r2, [r3, #0]
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8006bc4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	683a      	ldr	r2, [r7, #0]
 8006bcc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	689b      	ldr	r3, [r3, #8]
 8006bd2:	2b40      	cmp	r3, #64	@ 0x40
 8006bd4:	d108      	bne.n	8006be8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	687a      	ldr	r2, [r7, #4]
 8006bdc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	68ba      	ldr	r2, [r7, #8]
 8006be4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8006be6:	e007      	b.n	8006bf8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	68ba      	ldr	r2, [r7, #8]
 8006bee:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	687a      	ldr	r2, [r7, #4]
 8006bf6:	60da      	str	r2, [r3, #12]
}
 8006bf8:	bf00      	nop
 8006bfa:	3714      	adds	r7, #20
 8006bfc:	46bd      	mov	sp, r7
 8006bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c02:	4770      	bx	lr

08006c04 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8006c04:	b480      	push	{r7}
 8006c06:	b085      	sub	sp, #20
 8006c08:	af00      	add	r7, sp, #0
 8006c0a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	b2db      	uxtb	r3, r3
 8006c12:	3b10      	subs	r3, #16
 8006c14:	4a14      	ldr	r2, [pc, #80]	@ (8006c68 <DMA_CalcBaseAndBitshift+0x64>)
 8006c16:	fba2 2303 	umull	r2, r3, r2, r3
 8006c1a:	091b      	lsrs	r3, r3, #4
 8006c1c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8006c1e:	4a13      	ldr	r2, [pc, #76]	@ (8006c6c <DMA_CalcBaseAndBitshift+0x68>)
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	4413      	add	r3, r2
 8006c24:	781b      	ldrb	r3, [r3, #0]
 8006c26:	461a      	mov	r2, r3
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	2b03      	cmp	r3, #3
 8006c30:	d909      	bls.n	8006c46 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8006c3a:	f023 0303 	bic.w	r3, r3, #3
 8006c3e:	1d1a      	adds	r2, r3, #4
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	659a      	str	r2, [r3, #88]	@ 0x58
 8006c44:	e007      	b.n	8006c56 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8006c4e:	f023 0303 	bic.w	r3, r3, #3
 8006c52:	687a      	ldr	r2, [r7, #4]
 8006c54:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8006c5a:	4618      	mov	r0, r3
 8006c5c:	3714      	adds	r7, #20
 8006c5e:	46bd      	mov	sp, r7
 8006c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c64:	4770      	bx	lr
 8006c66:	bf00      	nop
 8006c68:	aaaaaaab 	.word	0xaaaaaaab
 8006c6c:	0801543c 	.word	0x0801543c

08006c70 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8006c70:	b480      	push	{r7}
 8006c72:	b085      	sub	sp, #20
 8006c74:	af00      	add	r7, sp, #0
 8006c76:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006c78:	2300      	movs	r3, #0
 8006c7a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c80:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	699b      	ldr	r3, [r3, #24]
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d11f      	bne.n	8006cca <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8006c8a:	68bb      	ldr	r3, [r7, #8]
 8006c8c:	2b03      	cmp	r3, #3
 8006c8e:	d856      	bhi.n	8006d3e <DMA_CheckFifoParam+0xce>
 8006c90:	a201      	add	r2, pc, #4	@ (adr r2, 8006c98 <DMA_CheckFifoParam+0x28>)
 8006c92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c96:	bf00      	nop
 8006c98:	08006ca9 	.word	0x08006ca9
 8006c9c:	08006cbb 	.word	0x08006cbb
 8006ca0:	08006ca9 	.word	0x08006ca9
 8006ca4:	08006d3f 	.word	0x08006d3f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006cac:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	d046      	beq.n	8006d42 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8006cb4:	2301      	movs	r3, #1
 8006cb6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006cb8:	e043      	b.n	8006d42 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006cbe:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8006cc2:	d140      	bne.n	8006d46 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8006cc4:	2301      	movs	r3, #1
 8006cc6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006cc8:	e03d      	b.n	8006d46 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	699b      	ldr	r3, [r3, #24]
 8006cce:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006cd2:	d121      	bne.n	8006d18 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8006cd4:	68bb      	ldr	r3, [r7, #8]
 8006cd6:	2b03      	cmp	r3, #3
 8006cd8:	d837      	bhi.n	8006d4a <DMA_CheckFifoParam+0xda>
 8006cda:	a201      	add	r2, pc, #4	@ (adr r2, 8006ce0 <DMA_CheckFifoParam+0x70>)
 8006cdc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ce0:	08006cf1 	.word	0x08006cf1
 8006ce4:	08006cf7 	.word	0x08006cf7
 8006ce8:	08006cf1 	.word	0x08006cf1
 8006cec:	08006d09 	.word	0x08006d09
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8006cf0:	2301      	movs	r3, #1
 8006cf2:	73fb      	strb	r3, [r7, #15]
      break;
 8006cf4:	e030      	b.n	8006d58 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006cfa:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	d025      	beq.n	8006d4e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8006d02:	2301      	movs	r3, #1
 8006d04:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006d06:	e022      	b.n	8006d4e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d0c:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8006d10:	d11f      	bne.n	8006d52 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8006d12:	2301      	movs	r3, #1
 8006d14:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8006d16:	e01c      	b.n	8006d52 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8006d18:	68bb      	ldr	r3, [r7, #8]
 8006d1a:	2b02      	cmp	r3, #2
 8006d1c:	d903      	bls.n	8006d26 <DMA_CheckFifoParam+0xb6>
 8006d1e:	68bb      	ldr	r3, [r7, #8]
 8006d20:	2b03      	cmp	r3, #3
 8006d22:	d003      	beq.n	8006d2c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8006d24:	e018      	b.n	8006d58 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8006d26:	2301      	movs	r3, #1
 8006d28:	73fb      	strb	r3, [r7, #15]
      break;
 8006d2a:	e015      	b.n	8006d58 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d30:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	d00e      	beq.n	8006d56 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8006d38:	2301      	movs	r3, #1
 8006d3a:	73fb      	strb	r3, [r7, #15]
      break;
 8006d3c:	e00b      	b.n	8006d56 <DMA_CheckFifoParam+0xe6>
      break;
 8006d3e:	bf00      	nop
 8006d40:	e00a      	b.n	8006d58 <DMA_CheckFifoParam+0xe8>
      break;
 8006d42:	bf00      	nop
 8006d44:	e008      	b.n	8006d58 <DMA_CheckFifoParam+0xe8>
      break;
 8006d46:	bf00      	nop
 8006d48:	e006      	b.n	8006d58 <DMA_CheckFifoParam+0xe8>
      break;
 8006d4a:	bf00      	nop
 8006d4c:	e004      	b.n	8006d58 <DMA_CheckFifoParam+0xe8>
      break;
 8006d4e:	bf00      	nop
 8006d50:	e002      	b.n	8006d58 <DMA_CheckFifoParam+0xe8>
      break;   
 8006d52:	bf00      	nop
 8006d54:	e000      	b.n	8006d58 <DMA_CheckFifoParam+0xe8>
      break;
 8006d56:	bf00      	nop
    }
  } 
  
  return status; 
 8006d58:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d5a:	4618      	mov	r0, r3
 8006d5c:	3714      	adds	r7, #20
 8006d5e:	46bd      	mov	sp, r7
 8006d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d64:	4770      	bx	lr
 8006d66:	bf00      	nop

08006d68 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006d68:	b480      	push	{r7}
 8006d6a:	b089      	sub	sp, #36	@ 0x24
 8006d6c:	af00      	add	r7, sp, #0
 8006d6e:	6078      	str	r0, [r7, #4]
 8006d70:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8006d72:	2300      	movs	r3, #0
 8006d74:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8006d76:	2300      	movs	r3, #0
 8006d78:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8006d7a:	2300      	movs	r3, #0
 8006d7c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006d7e:	2300      	movs	r3, #0
 8006d80:	61fb      	str	r3, [r7, #28]
 8006d82:	e159      	b.n	8007038 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8006d84:	2201      	movs	r2, #1
 8006d86:	69fb      	ldr	r3, [r7, #28]
 8006d88:	fa02 f303 	lsl.w	r3, r2, r3
 8006d8c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8006d8e:	683b      	ldr	r3, [r7, #0]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	697a      	ldr	r2, [r7, #20]
 8006d94:	4013      	ands	r3, r2
 8006d96:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8006d98:	693a      	ldr	r2, [r7, #16]
 8006d9a:	697b      	ldr	r3, [r7, #20]
 8006d9c:	429a      	cmp	r2, r3
 8006d9e:	f040 8148 	bne.w	8007032 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8006da2:	683b      	ldr	r3, [r7, #0]
 8006da4:	685b      	ldr	r3, [r3, #4]
 8006da6:	f003 0303 	and.w	r3, r3, #3
 8006daa:	2b01      	cmp	r3, #1
 8006dac:	d005      	beq.n	8006dba <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006dae:	683b      	ldr	r3, [r7, #0]
 8006db0:	685b      	ldr	r3, [r3, #4]
 8006db2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8006db6:	2b02      	cmp	r3, #2
 8006db8:	d130      	bne.n	8006e1c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	689b      	ldr	r3, [r3, #8]
 8006dbe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8006dc0:	69fb      	ldr	r3, [r7, #28]
 8006dc2:	005b      	lsls	r3, r3, #1
 8006dc4:	2203      	movs	r2, #3
 8006dc6:	fa02 f303 	lsl.w	r3, r2, r3
 8006dca:	43db      	mvns	r3, r3
 8006dcc:	69ba      	ldr	r2, [r7, #24]
 8006dce:	4013      	ands	r3, r2
 8006dd0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006dd2:	683b      	ldr	r3, [r7, #0]
 8006dd4:	68da      	ldr	r2, [r3, #12]
 8006dd6:	69fb      	ldr	r3, [r7, #28]
 8006dd8:	005b      	lsls	r3, r3, #1
 8006dda:	fa02 f303 	lsl.w	r3, r2, r3
 8006dde:	69ba      	ldr	r2, [r7, #24]
 8006de0:	4313      	orrs	r3, r2
 8006de2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	69ba      	ldr	r2, [r7, #24]
 8006de8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	685b      	ldr	r3, [r3, #4]
 8006dee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8006df0:	2201      	movs	r2, #1
 8006df2:	69fb      	ldr	r3, [r7, #28]
 8006df4:	fa02 f303 	lsl.w	r3, r2, r3
 8006df8:	43db      	mvns	r3, r3
 8006dfa:	69ba      	ldr	r2, [r7, #24]
 8006dfc:	4013      	ands	r3, r2
 8006dfe:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006e00:	683b      	ldr	r3, [r7, #0]
 8006e02:	685b      	ldr	r3, [r3, #4]
 8006e04:	091b      	lsrs	r3, r3, #4
 8006e06:	f003 0201 	and.w	r2, r3, #1
 8006e0a:	69fb      	ldr	r3, [r7, #28]
 8006e0c:	fa02 f303 	lsl.w	r3, r2, r3
 8006e10:	69ba      	ldr	r2, [r7, #24]
 8006e12:	4313      	orrs	r3, r2
 8006e14:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	69ba      	ldr	r2, [r7, #24]
 8006e1a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006e1c:	683b      	ldr	r3, [r7, #0]
 8006e1e:	685b      	ldr	r3, [r3, #4]
 8006e20:	f003 0303 	and.w	r3, r3, #3
 8006e24:	2b03      	cmp	r3, #3
 8006e26:	d017      	beq.n	8006e58 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	68db      	ldr	r3, [r3, #12]
 8006e2c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8006e2e:	69fb      	ldr	r3, [r7, #28]
 8006e30:	005b      	lsls	r3, r3, #1
 8006e32:	2203      	movs	r2, #3
 8006e34:	fa02 f303 	lsl.w	r3, r2, r3
 8006e38:	43db      	mvns	r3, r3
 8006e3a:	69ba      	ldr	r2, [r7, #24]
 8006e3c:	4013      	ands	r3, r2
 8006e3e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006e40:	683b      	ldr	r3, [r7, #0]
 8006e42:	689a      	ldr	r2, [r3, #8]
 8006e44:	69fb      	ldr	r3, [r7, #28]
 8006e46:	005b      	lsls	r3, r3, #1
 8006e48:	fa02 f303 	lsl.w	r3, r2, r3
 8006e4c:	69ba      	ldr	r2, [r7, #24]
 8006e4e:	4313      	orrs	r3, r2
 8006e50:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	69ba      	ldr	r2, [r7, #24]
 8006e56:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006e58:	683b      	ldr	r3, [r7, #0]
 8006e5a:	685b      	ldr	r3, [r3, #4]
 8006e5c:	f003 0303 	and.w	r3, r3, #3
 8006e60:	2b02      	cmp	r3, #2
 8006e62:	d123      	bne.n	8006eac <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006e64:	69fb      	ldr	r3, [r7, #28]
 8006e66:	08da      	lsrs	r2, r3, #3
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	3208      	adds	r2, #8
 8006e6c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e70:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8006e72:	69fb      	ldr	r3, [r7, #28]
 8006e74:	f003 0307 	and.w	r3, r3, #7
 8006e78:	009b      	lsls	r3, r3, #2
 8006e7a:	220f      	movs	r2, #15
 8006e7c:	fa02 f303 	lsl.w	r3, r2, r3
 8006e80:	43db      	mvns	r3, r3
 8006e82:	69ba      	ldr	r2, [r7, #24]
 8006e84:	4013      	ands	r3, r2
 8006e86:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8006e88:	683b      	ldr	r3, [r7, #0]
 8006e8a:	691a      	ldr	r2, [r3, #16]
 8006e8c:	69fb      	ldr	r3, [r7, #28]
 8006e8e:	f003 0307 	and.w	r3, r3, #7
 8006e92:	009b      	lsls	r3, r3, #2
 8006e94:	fa02 f303 	lsl.w	r3, r2, r3
 8006e98:	69ba      	ldr	r2, [r7, #24]
 8006e9a:	4313      	orrs	r3, r2
 8006e9c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8006e9e:	69fb      	ldr	r3, [r7, #28]
 8006ea0:	08da      	lsrs	r2, r3, #3
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	3208      	adds	r2, #8
 8006ea6:	69b9      	ldr	r1, [r7, #24]
 8006ea8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8006eb2:	69fb      	ldr	r3, [r7, #28]
 8006eb4:	005b      	lsls	r3, r3, #1
 8006eb6:	2203      	movs	r2, #3
 8006eb8:	fa02 f303 	lsl.w	r3, r2, r3
 8006ebc:	43db      	mvns	r3, r3
 8006ebe:	69ba      	ldr	r2, [r7, #24]
 8006ec0:	4013      	ands	r3, r2
 8006ec2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006ec4:	683b      	ldr	r3, [r7, #0]
 8006ec6:	685b      	ldr	r3, [r3, #4]
 8006ec8:	f003 0203 	and.w	r2, r3, #3
 8006ecc:	69fb      	ldr	r3, [r7, #28]
 8006ece:	005b      	lsls	r3, r3, #1
 8006ed0:	fa02 f303 	lsl.w	r3, r2, r3
 8006ed4:	69ba      	ldr	r2, [r7, #24]
 8006ed6:	4313      	orrs	r3, r2
 8006ed8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	69ba      	ldr	r2, [r7, #24]
 8006ede:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8006ee0:	683b      	ldr	r3, [r7, #0]
 8006ee2:	685b      	ldr	r3, [r3, #4]
 8006ee4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	f000 80a2 	beq.w	8007032 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006eee:	2300      	movs	r3, #0
 8006ef0:	60fb      	str	r3, [r7, #12]
 8006ef2:	4b57      	ldr	r3, [pc, #348]	@ (8007050 <HAL_GPIO_Init+0x2e8>)
 8006ef4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006ef6:	4a56      	ldr	r2, [pc, #344]	@ (8007050 <HAL_GPIO_Init+0x2e8>)
 8006ef8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8006efc:	6453      	str	r3, [r2, #68]	@ 0x44
 8006efe:	4b54      	ldr	r3, [pc, #336]	@ (8007050 <HAL_GPIO_Init+0x2e8>)
 8006f00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006f02:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006f06:	60fb      	str	r3, [r7, #12]
 8006f08:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8006f0a:	4a52      	ldr	r2, [pc, #328]	@ (8007054 <HAL_GPIO_Init+0x2ec>)
 8006f0c:	69fb      	ldr	r3, [r7, #28]
 8006f0e:	089b      	lsrs	r3, r3, #2
 8006f10:	3302      	adds	r3, #2
 8006f12:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006f16:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8006f18:	69fb      	ldr	r3, [r7, #28]
 8006f1a:	f003 0303 	and.w	r3, r3, #3
 8006f1e:	009b      	lsls	r3, r3, #2
 8006f20:	220f      	movs	r2, #15
 8006f22:	fa02 f303 	lsl.w	r3, r2, r3
 8006f26:	43db      	mvns	r3, r3
 8006f28:	69ba      	ldr	r2, [r7, #24]
 8006f2a:	4013      	ands	r3, r2
 8006f2c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	4a49      	ldr	r2, [pc, #292]	@ (8007058 <HAL_GPIO_Init+0x2f0>)
 8006f32:	4293      	cmp	r3, r2
 8006f34:	d019      	beq.n	8006f6a <HAL_GPIO_Init+0x202>
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	4a48      	ldr	r2, [pc, #288]	@ (800705c <HAL_GPIO_Init+0x2f4>)
 8006f3a:	4293      	cmp	r3, r2
 8006f3c:	d013      	beq.n	8006f66 <HAL_GPIO_Init+0x1fe>
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	4a47      	ldr	r2, [pc, #284]	@ (8007060 <HAL_GPIO_Init+0x2f8>)
 8006f42:	4293      	cmp	r3, r2
 8006f44:	d00d      	beq.n	8006f62 <HAL_GPIO_Init+0x1fa>
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	4a46      	ldr	r2, [pc, #280]	@ (8007064 <HAL_GPIO_Init+0x2fc>)
 8006f4a:	4293      	cmp	r3, r2
 8006f4c:	d007      	beq.n	8006f5e <HAL_GPIO_Init+0x1f6>
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	4a45      	ldr	r2, [pc, #276]	@ (8007068 <HAL_GPIO_Init+0x300>)
 8006f52:	4293      	cmp	r3, r2
 8006f54:	d101      	bne.n	8006f5a <HAL_GPIO_Init+0x1f2>
 8006f56:	2304      	movs	r3, #4
 8006f58:	e008      	b.n	8006f6c <HAL_GPIO_Init+0x204>
 8006f5a:	2307      	movs	r3, #7
 8006f5c:	e006      	b.n	8006f6c <HAL_GPIO_Init+0x204>
 8006f5e:	2303      	movs	r3, #3
 8006f60:	e004      	b.n	8006f6c <HAL_GPIO_Init+0x204>
 8006f62:	2302      	movs	r3, #2
 8006f64:	e002      	b.n	8006f6c <HAL_GPIO_Init+0x204>
 8006f66:	2301      	movs	r3, #1
 8006f68:	e000      	b.n	8006f6c <HAL_GPIO_Init+0x204>
 8006f6a:	2300      	movs	r3, #0
 8006f6c:	69fa      	ldr	r2, [r7, #28]
 8006f6e:	f002 0203 	and.w	r2, r2, #3
 8006f72:	0092      	lsls	r2, r2, #2
 8006f74:	4093      	lsls	r3, r2
 8006f76:	69ba      	ldr	r2, [r7, #24]
 8006f78:	4313      	orrs	r3, r2
 8006f7a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006f7c:	4935      	ldr	r1, [pc, #212]	@ (8007054 <HAL_GPIO_Init+0x2ec>)
 8006f7e:	69fb      	ldr	r3, [r7, #28]
 8006f80:	089b      	lsrs	r3, r3, #2
 8006f82:	3302      	adds	r3, #2
 8006f84:	69ba      	ldr	r2, [r7, #24]
 8006f86:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8006f8a:	4b38      	ldr	r3, [pc, #224]	@ (800706c <HAL_GPIO_Init+0x304>)
 8006f8c:	689b      	ldr	r3, [r3, #8]
 8006f8e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006f90:	693b      	ldr	r3, [r7, #16]
 8006f92:	43db      	mvns	r3, r3
 8006f94:	69ba      	ldr	r2, [r7, #24]
 8006f96:	4013      	ands	r3, r2
 8006f98:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8006f9a:	683b      	ldr	r3, [r7, #0]
 8006f9c:	685b      	ldr	r3, [r3, #4]
 8006f9e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	d003      	beq.n	8006fae <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8006fa6:	69ba      	ldr	r2, [r7, #24]
 8006fa8:	693b      	ldr	r3, [r7, #16]
 8006faa:	4313      	orrs	r3, r2
 8006fac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8006fae:	4a2f      	ldr	r2, [pc, #188]	@ (800706c <HAL_GPIO_Init+0x304>)
 8006fb0:	69bb      	ldr	r3, [r7, #24]
 8006fb2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8006fb4:	4b2d      	ldr	r3, [pc, #180]	@ (800706c <HAL_GPIO_Init+0x304>)
 8006fb6:	68db      	ldr	r3, [r3, #12]
 8006fb8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006fba:	693b      	ldr	r3, [r7, #16]
 8006fbc:	43db      	mvns	r3, r3
 8006fbe:	69ba      	ldr	r2, [r7, #24]
 8006fc0:	4013      	ands	r3, r2
 8006fc2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8006fc4:	683b      	ldr	r3, [r7, #0]
 8006fc6:	685b      	ldr	r3, [r3, #4]
 8006fc8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006fcc:	2b00      	cmp	r3, #0
 8006fce:	d003      	beq.n	8006fd8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8006fd0:	69ba      	ldr	r2, [r7, #24]
 8006fd2:	693b      	ldr	r3, [r7, #16]
 8006fd4:	4313      	orrs	r3, r2
 8006fd6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8006fd8:	4a24      	ldr	r2, [pc, #144]	@ (800706c <HAL_GPIO_Init+0x304>)
 8006fda:	69bb      	ldr	r3, [r7, #24]
 8006fdc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8006fde:	4b23      	ldr	r3, [pc, #140]	@ (800706c <HAL_GPIO_Init+0x304>)
 8006fe0:	685b      	ldr	r3, [r3, #4]
 8006fe2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006fe4:	693b      	ldr	r3, [r7, #16]
 8006fe6:	43db      	mvns	r3, r3
 8006fe8:	69ba      	ldr	r2, [r7, #24]
 8006fea:	4013      	ands	r3, r2
 8006fec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8006fee:	683b      	ldr	r3, [r7, #0]
 8006ff0:	685b      	ldr	r3, [r3, #4]
 8006ff2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	d003      	beq.n	8007002 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8006ffa:	69ba      	ldr	r2, [r7, #24]
 8006ffc:	693b      	ldr	r3, [r7, #16]
 8006ffe:	4313      	orrs	r3, r2
 8007000:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8007002:	4a1a      	ldr	r2, [pc, #104]	@ (800706c <HAL_GPIO_Init+0x304>)
 8007004:	69bb      	ldr	r3, [r7, #24]
 8007006:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8007008:	4b18      	ldr	r3, [pc, #96]	@ (800706c <HAL_GPIO_Init+0x304>)
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800700e:	693b      	ldr	r3, [r7, #16]
 8007010:	43db      	mvns	r3, r3
 8007012:	69ba      	ldr	r2, [r7, #24]
 8007014:	4013      	ands	r3, r2
 8007016:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8007018:	683b      	ldr	r3, [r7, #0]
 800701a:	685b      	ldr	r3, [r3, #4]
 800701c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007020:	2b00      	cmp	r3, #0
 8007022:	d003      	beq.n	800702c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8007024:	69ba      	ldr	r2, [r7, #24]
 8007026:	693b      	ldr	r3, [r7, #16]
 8007028:	4313      	orrs	r3, r2
 800702a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800702c:	4a0f      	ldr	r2, [pc, #60]	@ (800706c <HAL_GPIO_Init+0x304>)
 800702e:	69bb      	ldr	r3, [r7, #24]
 8007030:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8007032:	69fb      	ldr	r3, [r7, #28]
 8007034:	3301      	adds	r3, #1
 8007036:	61fb      	str	r3, [r7, #28]
 8007038:	69fb      	ldr	r3, [r7, #28]
 800703a:	2b0f      	cmp	r3, #15
 800703c:	f67f aea2 	bls.w	8006d84 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8007040:	bf00      	nop
 8007042:	bf00      	nop
 8007044:	3724      	adds	r7, #36	@ 0x24
 8007046:	46bd      	mov	sp, r7
 8007048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800704c:	4770      	bx	lr
 800704e:	bf00      	nop
 8007050:	40023800 	.word	0x40023800
 8007054:	40013800 	.word	0x40013800
 8007058:	40020000 	.word	0x40020000
 800705c:	40020400 	.word	0x40020400
 8007060:	40020800 	.word	0x40020800
 8007064:	40020c00 	.word	0x40020c00
 8007068:	40021000 	.word	0x40021000
 800706c:	40013c00 	.word	0x40013c00

08007070 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8007070:	b480      	push	{r7}
 8007072:	b085      	sub	sp, #20
 8007074:	af00      	add	r7, sp, #0
 8007076:	6078      	str	r0, [r7, #4]
 8007078:	460b      	mov	r3, r1
 800707a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	691a      	ldr	r2, [r3, #16]
 8007080:	887b      	ldrh	r3, [r7, #2]
 8007082:	4013      	ands	r3, r2
 8007084:	2b00      	cmp	r3, #0
 8007086:	d002      	beq.n	800708e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8007088:	2301      	movs	r3, #1
 800708a:	73fb      	strb	r3, [r7, #15]
 800708c:	e001      	b.n	8007092 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800708e:	2300      	movs	r3, #0
 8007090:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8007092:	7bfb      	ldrb	r3, [r7, #15]
}
 8007094:	4618      	mov	r0, r3
 8007096:	3714      	adds	r7, #20
 8007098:	46bd      	mov	sp, r7
 800709a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800709e:	4770      	bx	lr

080070a0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80070a0:	b480      	push	{r7}
 80070a2:	b083      	sub	sp, #12
 80070a4:	af00      	add	r7, sp, #0
 80070a6:	6078      	str	r0, [r7, #4]
 80070a8:	460b      	mov	r3, r1
 80070aa:	807b      	strh	r3, [r7, #2]
 80070ac:	4613      	mov	r3, r2
 80070ae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80070b0:	787b      	ldrb	r3, [r7, #1]
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	d003      	beq.n	80070be <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80070b6:	887a      	ldrh	r2, [r7, #2]
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80070bc:	e003      	b.n	80070c6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80070be:	887b      	ldrh	r3, [r7, #2]
 80070c0:	041a      	lsls	r2, r3, #16
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	619a      	str	r2, [r3, #24]
}
 80070c6:	bf00      	nop
 80070c8:	370c      	adds	r7, #12
 80070ca:	46bd      	mov	sp, r7
 80070cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070d0:	4770      	bx	lr
	...

080070d4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80070d4:	b580      	push	{r7, lr}
 80070d6:	b082      	sub	sp, #8
 80070d8:	af00      	add	r7, sp, #0
 80070da:	4603      	mov	r3, r0
 80070dc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80070de:	4b08      	ldr	r3, [pc, #32]	@ (8007100 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80070e0:	695a      	ldr	r2, [r3, #20]
 80070e2:	88fb      	ldrh	r3, [r7, #6]
 80070e4:	4013      	ands	r3, r2
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	d006      	beq.n	80070f8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80070ea:	4a05      	ldr	r2, [pc, #20]	@ (8007100 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80070ec:	88fb      	ldrh	r3, [r7, #6]
 80070ee:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80070f0:	88fb      	ldrh	r3, [r7, #6]
 80070f2:	4618      	mov	r0, r3
 80070f4:	f000 f806 	bl	8007104 <HAL_GPIO_EXTI_Callback>
  }
}
 80070f8:	bf00      	nop
 80070fa:	3708      	adds	r7, #8
 80070fc:	46bd      	mov	sp, r7
 80070fe:	bd80      	pop	{r7, pc}
 8007100:	40013c00 	.word	0x40013c00

08007104 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8007104:	b480      	push	{r7}
 8007106:	b083      	sub	sp, #12
 8007108:	af00      	add	r7, sp, #0
 800710a:	4603      	mov	r3, r0
 800710c:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800710e:	bf00      	nop
 8007110:	370c      	adds	r7, #12
 8007112:	46bd      	mov	sp, r7
 8007114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007118:	4770      	bx	lr
	...

0800711c <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 800711c:	b580      	push	{r7, lr}
 800711e:	b088      	sub	sp, #32
 8007120:	af00      	add	r7, sp, #0
 8007122:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	2b00      	cmp	r3, #0
 8007128:	d101      	bne.n	800712e <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 800712a:	2301      	movs	r3, #1
 800712c:	e128      	b.n	8007380 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007134:	b2db      	uxtb	r3, r3
 8007136:	2b00      	cmp	r3, #0
 8007138:	d109      	bne.n	800714e <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	2200      	movs	r2, #0
 800713e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	4a90      	ldr	r2, [pc, #576]	@ (8007388 <HAL_I2S_Init+0x26c>)
 8007146:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8007148:	6878      	ldr	r0, [r7, #4]
 800714a:	f7fa faaf 	bl	80016ac <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	2202      	movs	r2, #2
 8007152:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	69db      	ldr	r3, [r3, #28]
 800715c:	687a      	ldr	r2, [r7, #4]
 800715e:	6812      	ldr	r2, [r2, #0]
 8007160:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8007164:	f023 030f 	bic.w	r3, r3, #15
 8007168:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	2202      	movs	r2, #2
 8007170:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	695b      	ldr	r3, [r3, #20]
 8007176:	2b02      	cmp	r3, #2
 8007178:	d060      	beq.n	800723c <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	68db      	ldr	r3, [r3, #12]
 800717e:	2b00      	cmp	r3, #0
 8007180:	d102      	bne.n	8007188 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8007182:	2310      	movs	r3, #16
 8007184:	617b      	str	r3, [r7, #20]
 8007186:	e001      	b.n	800718c <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8007188:	2320      	movs	r3, #32
 800718a:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	689b      	ldr	r3, [r3, #8]
 8007190:	2b20      	cmp	r3, #32
 8007192:	d802      	bhi.n	800719a <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8007194:	697b      	ldr	r3, [r7, #20]
 8007196:	005b      	lsls	r3, r3, #1
 8007198:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 800719a:	2001      	movs	r0, #1
 800719c:	f001 fb02 	bl	80087a4 <HAL_RCCEx_GetPeriphCLKFreq>
 80071a0:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	691b      	ldr	r3, [r3, #16]
 80071a6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80071aa:	d125      	bne.n	80071f8 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	68db      	ldr	r3, [r3, #12]
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	d010      	beq.n	80071d6 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80071b4:	697b      	ldr	r3, [r7, #20]
 80071b6:	009b      	lsls	r3, r3, #2
 80071b8:	68fa      	ldr	r2, [r7, #12]
 80071ba:	fbb2 f2f3 	udiv	r2, r2, r3
 80071be:	4613      	mov	r3, r2
 80071c0:	009b      	lsls	r3, r3, #2
 80071c2:	4413      	add	r3, r2
 80071c4:	005b      	lsls	r3, r3, #1
 80071c6:	461a      	mov	r2, r3
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	695b      	ldr	r3, [r3, #20]
 80071cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80071d0:	3305      	adds	r3, #5
 80071d2:	613b      	str	r3, [r7, #16]
 80071d4:	e01f      	b.n	8007216 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80071d6:	697b      	ldr	r3, [r7, #20]
 80071d8:	00db      	lsls	r3, r3, #3
 80071da:	68fa      	ldr	r2, [r7, #12]
 80071dc:	fbb2 f2f3 	udiv	r2, r2, r3
 80071e0:	4613      	mov	r3, r2
 80071e2:	009b      	lsls	r3, r3, #2
 80071e4:	4413      	add	r3, r2
 80071e6:	005b      	lsls	r3, r3, #1
 80071e8:	461a      	mov	r2, r3
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	695b      	ldr	r3, [r3, #20]
 80071ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80071f2:	3305      	adds	r3, #5
 80071f4:	613b      	str	r3, [r7, #16]
 80071f6:	e00e      	b.n	8007216 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80071f8:	68fa      	ldr	r2, [r7, #12]
 80071fa:	697b      	ldr	r3, [r7, #20]
 80071fc:	fbb2 f2f3 	udiv	r2, r2, r3
 8007200:	4613      	mov	r3, r2
 8007202:	009b      	lsls	r3, r3, #2
 8007204:	4413      	add	r3, r2
 8007206:	005b      	lsls	r3, r3, #1
 8007208:	461a      	mov	r2, r3
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	695b      	ldr	r3, [r3, #20]
 800720e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007212:	3305      	adds	r3, #5
 8007214:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8007216:	693b      	ldr	r3, [r7, #16]
 8007218:	4a5c      	ldr	r2, [pc, #368]	@ (800738c <HAL_I2S_Init+0x270>)
 800721a:	fba2 2303 	umull	r2, r3, r2, r3
 800721e:	08db      	lsrs	r3, r3, #3
 8007220:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8007222:	693b      	ldr	r3, [r7, #16]
 8007224:	f003 0301 	and.w	r3, r3, #1
 8007228:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 800722a:	693a      	ldr	r2, [r7, #16]
 800722c:	69bb      	ldr	r3, [r7, #24]
 800722e:	1ad3      	subs	r3, r2, r3
 8007230:	085b      	lsrs	r3, r3, #1
 8007232:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8007234:	69bb      	ldr	r3, [r7, #24]
 8007236:	021b      	lsls	r3, r3, #8
 8007238:	61bb      	str	r3, [r7, #24]
 800723a:	e003      	b.n	8007244 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 800723c:	2302      	movs	r3, #2
 800723e:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8007240:	2300      	movs	r3, #0
 8007242:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8007244:	69fb      	ldr	r3, [r7, #28]
 8007246:	2b01      	cmp	r3, #1
 8007248:	d902      	bls.n	8007250 <HAL_I2S_Init+0x134>
 800724a:	69fb      	ldr	r3, [r7, #28]
 800724c:	2bff      	cmp	r3, #255	@ 0xff
 800724e:	d907      	bls.n	8007260 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007254:	f043 0210 	orr.w	r2, r3, #16
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	645a      	str	r2, [r3, #68]	@ 0x44
    return  HAL_ERROR;
 800725c:	2301      	movs	r3, #1
 800725e:	e08f      	b.n	8007380 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	691a      	ldr	r2, [r3, #16]
 8007264:	69bb      	ldr	r3, [r7, #24]
 8007266:	ea42 0103 	orr.w	r1, r2, r3
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	69fa      	ldr	r2, [r7, #28]
 8007270:	430a      	orrs	r2, r1
 8007272:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	69db      	ldr	r3, [r3, #28]
 800727a:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 800727e:	f023 030f 	bic.w	r3, r3, #15
 8007282:	687a      	ldr	r2, [r7, #4]
 8007284:	6851      	ldr	r1, [r2, #4]
 8007286:	687a      	ldr	r2, [r7, #4]
 8007288:	6892      	ldr	r2, [r2, #8]
 800728a:	4311      	orrs	r1, r2
 800728c:	687a      	ldr	r2, [r7, #4]
 800728e:	68d2      	ldr	r2, [r2, #12]
 8007290:	4311      	orrs	r1, r2
 8007292:	687a      	ldr	r2, [r7, #4]
 8007294:	6992      	ldr	r2, [r2, #24]
 8007296:	430a      	orrs	r2, r1
 8007298:	431a      	orrs	r2, r3
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80072a2:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	6a1b      	ldr	r3, [r3, #32]
 80072a8:	2b01      	cmp	r3, #1
 80072aa:	d161      	bne.n	8007370 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	4a38      	ldr	r2, [pc, #224]	@ (8007390 <HAL_I2S_Init+0x274>)
 80072b0:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	4a37      	ldr	r2, [pc, #220]	@ (8007394 <HAL_I2S_Init+0x278>)
 80072b8:	4293      	cmp	r3, r2
 80072ba:	d101      	bne.n	80072c0 <HAL_I2S_Init+0x1a4>
 80072bc:	4b36      	ldr	r3, [pc, #216]	@ (8007398 <HAL_I2S_Init+0x27c>)
 80072be:	e001      	b.n	80072c4 <HAL_I2S_Init+0x1a8>
 80072c0:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80072c4:	69db      	ldr	r3, [r3, #28]
 80072c6:	687a      	ldr	r2, [r7, #4]
 80072c8:	6812      	ldr	r2, [r2, #0]
 80072ca:	4932      	ldr	r1, [pc, #200]	@ (8007394 <HAL_I2S_Init+0x278>)
 80072cc:	428a      	cmp	r2, r1
 80072ce:	d101      	bne.n	80072d4 <HAL_I2S_Init+0x1b8>
 80072d0:	4a31      	ldr	r2, [pc, #196]	@ (8007398 <HAL_I2S_Init+0x27c>)
 80072d2:	e001      	b.n	80072d8 <HAL_I2S_Init+0x1bc>
 80072d4:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 80072d8:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 80072dc:	f023 030f 	bic.w	r3, r3, #15
 80072e0:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	4a2b      	ldr	r2, [pc, #172]	@ (8007394 <HAL_I2S_Init+0x278>)
 80072e8:	4293      	cmp	r3, r2
 80072ea:	d101      	bne.n	80072f0 <HAL_I2S_Init+0x1d4>
 80072ec:	4b2a      	ldr	r3, [pc, #168]	@ (8007398 <HAL_I2S_Init+0x27c>)
 80072ee:	e001      	b.n	80072f4 <HAL_I2S_Init+0x1d8>
 80072f0:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80072f4:	2202      	movs	r2, #2
 80072f6:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	4a25      	ldr	r2, [pc, #148]	@ (8007394 <HAL_I2S_Init+0x278>)
 80072fe:	4293      	cmp	r3, r2
 8007300:	d101      	bne.n	8007306 <HAL_I2S_Init+0x1ea>
 8007302:	4b25      	ldr	r3, [pc, #148]	@ (8007398 <HAL_I2S_Init+0x27c>)
 8007304:	e001      	b.n	800730a <HAL_I2S_Init+0x1ee>
 8007306:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800730a:	69db      	ldr	r3, [r3, #28]
 800730c:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	685b      	ldr	r3, [r3, #4]
 8007312:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007316:	d003      	beq.n	8007320 <HAL_I2S_Init+0x204>
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	685b      	ldr	r3, [r3, #4]
 800731c:	2b00      	cmp	r3, #0
 800731e:	d103      	bne.n	8007328 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8007320:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8007324:	613b      	str	r3, [r7, #16]
 8007326:	e001      	b.n	800732c <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8007328:	2300      	movs	r3, #0
 800732a:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 800732c:	693b      	ldr	r3, [r7, #16]
 800732e:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	689b      	ldr	r3, [r3, #8]
 8007334:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8007336:	4313      	orrs	r3, r2
 8007338:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	68db      	ldr	r3, [r3, #12]
 800733e:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8007340:	4313      	orrs	r3, r2
 8007342:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	699b      	ldr	r3, [r3, #24]
 8007348:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 800734a:	4313      	orrs	r3, r2
 800734c:	b29a      	uxth	r2, r3
 800734e:	897b      	ldrh	r3, [r7, #10]
 8007350:	4313      	orrs	r3, r2
 8007352:	b29b      	uxth	r3, r3
 8007354:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8007358:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	4a0d      	ldr	r2, [pc, #52]	@ (8007394 <HAL_I2S_Init+0x278>)
 8007360:	4293      	cmp	r3, r2
 8007362:	d101      	bne.n	8007368 <HAL_I2S_Init+0x24c>
 8007364:	4b0c      	ldr	r3, [pc, #48]	@ (8007398 <HAL_I2S_Init+0x27c>)
 8007366:	e001      	b.n	800736c <HAL_I2S_Init+0x250>
 8007368:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800736c:	897a      	ldrh	r2, [r7, #10]
 800736e:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	2200      	movs	r2, #0
 8007374:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	2201      	movs	r2, #1
 800737a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  return HAL_OK;
 800737e:	2300      	movs	r3, #0
}
 8007380:	4618      	mov	r0, r3
 8007382:	3720      	adds	r7, #32
 8007384:	46bd      	mov	sp, r7
 8007386:	bd80      	pop	{r7, pc}
 8007388:	08007659 	.word	0x08007659
 800738c:	cccccccd 	.word	0xcccccccd
 8007390:	080077e1 	.word	0x080077e1
 8007394:	40003800 	.word	0x40003800
 8007398:	40003400 	.word	0x40003400

0800739c <HAL_I2S_Transmit>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Transmit(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size, uint32_t Timeout)
{
 800739c:	b580      	push	{r7, lr}
 800739e:	b086      	sub	sp, #24
 80073a0:	af00      	add	r7, sp, #0
 80073a2:	60f8      	str	r0, [r7, #12]
 80073a4:	60b9      	str	r1, [r7, #8]
 80073a6:	603b      	str	r3, [r7, #0]
 80073a8:	4613      	mov	r3, r2
 80073aa:	80fb      	strh	r3, [r7, #6]
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 80073ac:	68bb      	ldr	r3, [r7, #8]
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	d002      	beq.n	80073b8 <HAL_I2S_Transmit+0x1c>
 80073b2:	88fb      	ldrh	r3, [r7, #6]
 80073b4:	2b00      	cmp	r3, #0
 80073b6:	d101      	bne.n	80073bc <HAL_I2S_Transmit+0x20>
  {
    return  HAL_ERROR;
 80073b8:	2301      	movs	r3, #1
 80073ba:	e0d8      	b.n	800756e <HAL_I2S_Transmit+0x1d2>
  }

  if (hi2s->State != HAL_I2S_STATE_READY)
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80073c2:	b2db      	uxtb	r3, r3
 80073c4:	2b01      	cmp	r3, #1
 80073c6:	d001      	beq.n	80073cc <HAL_I2S_Transmit+0x30>
  {
    return HAL_BUSY;
 80073c8:	2302      	movs	r3, #2
 80073ca:	e0d0      	b.n	800756e <HAL_I2S_Transmit+0x1d2>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80073d2:	b2db      	uxtb	r3, r3
 80073d4:	2b01      	cmp	r3, #1
 80073d6:	d101      	bne.n	80073dc <HAL_I2S_Transmit+0x40>
 80073d8:	2302      	movs	r3, #2
 80073da:	e0c8      	b.n	800756e <HAL_I2S_Transmit+0x1d2>
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	2201      	movs	r2, #1
 80073e0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_TX;
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	2203      	movs	r2, #3
 80073e8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	2200      	movs	r2, #0
 80073f0:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2s->pTxBuffPtr = pData;
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	68ba      	ldr	r2, [r7, #8]
 80073f6:	625a      	str	r2, [r3, #36]	@ 0x24

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	69db      	ldr	r3, [r3, #28]
 80073fe:	f003 0307 	and.w	r3, r3, #7
 8007402:	617b      	str	r3, [r7, #20]

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 8007404:	697b      	ldr	r3, [r7, #20]
 8007406:	2b03      	cmp	r3, #3
 8007408:	d002      	beq.n	8007410 <HAL_I2S_Transmit+0x74>
 800740a:	697b      	ldr	r3, [r7, #20]
 800740c:	2b05      	cmp	r3, #5
 800740e:	d10a      	bne.n	8007426 <HAL_I2S_Transmit+0x8a>
  {
    hi2s->TxXferSize = (Size << 1U);
 8007410:	88fb      	ldrh	r3, [r7, #6]
 8007412:	005b      	lsls	r3, r3, #1
 8007414:	b29a      	uxth	r2, r3
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2s->TxXferCount = (Size << 1U);
 800741a:	88fb      	ldrh	r3, [r7, #6]
 800741c:	005b      	lsls	r3, r3, #1
 800741e:	b29a      	uxth	r2, r3
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8007424:	e005      	b.n	8007432 <HAL_I2S_Transmit+0x96>
  }
  else
  {
    hi2s->TxXferSize = Size;
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	88fa      	ldrh	r2, [r7, #6]
 800742a:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2s->TxXferCount = Size;
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	88fa      	ldrh	r2, [r7, #6]
 8007430:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }

  tmpreg_cfgr = hi2s->Instance->I2SCFGR;
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	69db      	ldr	r3, [r3, #28]
 8007438:	617b      	str	r3, [r7, #20]

  /* Check if the I2S is already enabled */
  if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SE) != SPI_I2SCFGR_I2SE)
 800743a:	68fb      	ldr	r3, [r7, #12]
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	69db      	ldr	r3, [r3, #28]
 8007440:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007444:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007448:	d007      	beq.n	800745a <HAL_I2S_Transmit+0xbe>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	69da      	ldr	r2, [r3, #28]
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8007458:	61da      	str	r2, [r3, #28]
  }

  /* Wait until TXE flag is set */
  if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_TXE, SET, Timeout) != HAL_OK)
 800745a:	683b      	ldr	r3, [r7, #0]
 800745c:	2201      	movs	r2, #1
 800745e:	2102      	movs	r1, #2
 8007460:	68f8      	ldr	r0, [r7, #12]
 8007462:	f000 f983 	bl	800776c <I2S_WaitFlagStateUntilTimeout>
 8007466:	4603      	mov	r3, r0
 8007468:	2b00      	cmp	r3, #0
 800746a:	d04e      	beq.n	800750a <HAL_I2S_Transmit+0x16e>
  {
    /* Set the error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007470:	f043 0201 	orr.w	r2, r3, #1
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2s->State = HAL_I2S_STATE_READY;
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	2201      	movs	r2, #1
 800747c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    __HAL_UNLOCK(hi2s);
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	2200      	movs	r2, #0
 8007484:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    return HAL_ERROR;
 8007488:	2301      	movs	r3, #1
 800748a:	e070      	b.n	800756e <HAL_I2S_Transmit+0x1d2>
  }

  while (hi2s->TxXferCount > 0U)
  {
    hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007490:	881a      	ldrh	r2, [r3, #0]
 8007492:	68fb      	ldr	r3, [r7, #12]
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	60da      	str	r2, [r3, #12]
    hi2s->pTxBuffPtr++;
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800749c:	1c9a      	adds	r2, r3, #2
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2s->TxXferCount--;
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80074a6:	b29b      	uxth	r3, r3
 80074a8:	3b01      	subs	r3, #1
 80074aa:	b29a      	uxth	r2, r3
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	855a      	strh	r2, [r3, #42]	@ 0x2a

    /* Wait until TXE flag is set */
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_TXE, SET, Timeout) != HAL_OK)
 80074b0:	683b      	ldr	r3, [r7, #0]
 80074b2:	2201      	movs	r2, #1
 80074b4:	2102      	movs	r1, #2
 80074b6:	68f8      	ldr	r0, [r7, #12]
 80074b8:	f000 f958 	bl	800776c <I2S_WaitFlagStateUntilTimeout>
 80074bc:	4603      	mov	r3, r0
 80074be:	2b00      	cmp	r3, #0
 80074c0:	d00f      	beq.n	80074e2 <HAL_I2S_Transmit+0x146>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80074c6:	f043 0201 	orr.w	r2, r3, #1
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	645a      	str	r2, [r3, #68]	@ 0x44
      hi2s->State = HAL_I2S_STATE_READY;
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	2201      	movs	r2, #1
 80074d2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      __HAL_UNLOCK(hi2s);
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	2200      	movs	r2, #0
 80074da:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 80074de:	2301      	movs	r3, #1
 80074e0:	e045      	b.n	800756e <HAL_I2S_Transmit+0x1d2>
    }

    /* Check if an underrun occurs */
    if (__HAL_I2S_GET_FLAG(hi2s, I2S_FLAG_UDR) == SET)
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	689b      	ldr	r3, [r3, #8]
 80074e8:	f003 0308 	and.w	r3, r3, #8
 80074ec:	2b08      	cmp	r3, #8
 80074ee:	d10c      	bne.n	800750a <HAL_I2S_Transmit+0x16e>
    {
      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80074f0:	2300      	movs	r3, #0
 80074f2:	613b      	str	r3, [r7, #16]
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	689b      	ldr	r3, [r3, #8]
 80074fa:	613b      	str	r3, [r7, #16]
 80074fc:	693b      	ldr	r3, [r7, #16]

      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007502:	f043 0204 	orr.w	r2, r3, #4
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	645a      	str	r2, [r3, #68]	@ 0x44
  while (hi2s->TxXferCount > 0U)
 800750a:	68fb      	ldr	r3, [r7, #12]
 800750c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800750e:	b29b      	uxth	r3, r3
 8007510:	2b00      	cmp	r3, #0
 8007512:	d1bb      	bne.n	800748c <HAL_I2S_Transmit+0xf0>
    }
  }

  /* Check if Slave mode is selected */
  if (((tmpreg_cfgr & SPI_I2SCFGR_I2SCFG) == I2S_MODE_SLAVE_TX)
 8007514:	697b      	ldr	r3, [r7, #20]
 8007516:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800751a:	2b00      	cmp	r3, #0
 800751c:	d005      	beq.n	800752a <HAL_I2S_Transmit+0x18e>
      || ((tmpreg_cfgr & SPI_I2SCFGR_I2SCFG) == I2S_MODE_SLAVE_RX))
 800751e:	697b      	ldr	r3, [r7, #20]
 8007520:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007524:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007528:	d118      	bne.n	800755c <HAL_I2S_Transmit+0x1c0>
  {
    /* Wait until Busy flag is reset */
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_BSY, RESET, Timeout) != HAL_OK)
 800752a:	683b      	ldr	r3, [r7, #0]
 800752c:	2200      	movs	r2, #0
 800752e:	2180      	movs	r1, #128	@ 0x80
 8007530:	68f8      	ldr	r0, [r7, #12]
 8007532:	f000 f91b 	bl	800776c <I2S_WaitFlagStateUntilTimeout>
 8007536:	4603      	mov	r3, r0
 8007538:	2b00      	cmp	r3, #0
 800753a:	d00f      	beq.n	800755c <HAL_I2S_Transmit+0x1c0>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007540:	f043 0201 	orr.w	r2, r3, #1
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	645a      	str	r2, [r3, #68]	@ 0x44
      hi2s->State = HAL_I2S_STATE_READY;
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	2201      	movs	r2, #1
 800754c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      __HAL_UNLOCK(hi2s);
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	2200      	movs	r2, #0
 8007554:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8007558:	2301      	movs	r3, #1
 800755a:	e008      	b.n	800756e <HAL_I2S_Transmit+0x1d2>
    }
  }

  hi2s->State = HAL_I2S_STATE_READY;
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	2201      	movs	r2, #1
 8007560:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  __HAL_UNLOCK(hi2s);
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	2200      	movs	r2, #0
 8007568:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  return HAL_OK;
 800756c:	2300      	movs	r3, #0
}
 800756e:	4618      	mov	r0, r3
 8007570:	3718      	adds	r7, #24
 8007572:	46bd      	mov	sp, r7
 8007574:	bd80      	pop	{r7, pc}

08007576 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8007576:	b480      	push	{r7}
 8007578:	b083      	sub	sp, #12
 800757a:	af00      	add	r7, sp, #0
 800757c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 800757e:	bf00      	nop
 8007580:	370c      	adds	r7, #12
 8007582:	46bd      	mov	sp, r7
 8007584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007588:	4770      	bx	lr

0800758a <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 800758a:	b480      	push	{r7}
 800758c:	b083      	sub	sp, #12
 800758e:	af00      	add	r7, sp, #0
 8007590:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8007592:	bf00      	nop
 8007594:	370c      	adds	r7, #12
 8007596:	46bd      	mov	sp, r7
 8007598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800759c:	4770      	bx	lr

0800759e <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 800759e:	b580      	push	{r7, lr}
 80075a0:	b082      	sub	sp, #8
 80075a2:	af00      	add	r7, sp, #0
 80075a4:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80075aa:	881a      	ldrh	r2, [r3, #0]
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80075b6:	1c9a      	adds	r2, r3, #2
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	625a      	str	r2, [r3, #36]	@ 0x24
  hi2s->TxXferCount--;
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80075c0:	b29b      	uxth	r3, r3
 80075c2:	3b01      	subs	r3, #1
 80075c4:	b29a      	uxth	r2, r3
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80075ce:	b29b      	uxth	r3, r3
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	d10e      	bne.n	80075f2 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	685a      	ldr	r2, [r3, #4]
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80075e2:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	2201      	movs	r2, #1
 80075e8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 80075ec:	6878      	ldr	r0, [r7, #4]
 80075ee:	f7ff ffc2 	bl	8007576 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80075f2:	bf00      	nop
 80075f4:	3708      	adds	r7, #8
 80075f6:	46bd      	mov	sp, r7
 80075f8:	bd80      	pop	{r7, pc}

080075fa <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 80075fa:	b580      	push	{r7, lr}
 80075fc:	b082      	sub	sp, #8
 80075fe:	af00      	add	r7, sp, #0
 8007600:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	68da      	ldr	r2, [r3, #12]
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800760c:	b292      	uxth	r2, r2
 800760e:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007614:	1c9a      	adds	r2, r3, #2
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2s->RxXferCount--;
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800761e:	b29b      	uxth	r3, r3
 8007620:	3b01      	subs	r3, #1
 8007622:	b29a      	uxth	r2, r3
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800762c:	b29b      	uxth	r3, r3
 800762e:	2b00      	cmp	r3, #0
 8007630:	d10e      	bne.n	8007650 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	685a      	ldr	r2, [r3, #4]
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8007640:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	2201      	movs	r2, #1
 8007646:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 800764a:	6878      	ldr	r0, [r7, #4]
 800764c:	f7fa fdda 	bl	8002204 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8007650:	bf00      	nop
 8007652:	3708      	adds	r7, #8
 8007654:	46bd      	mov	sp, r7
 8007656:	bd80      	pop	{r7, pc}

08007658 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8007658:	b580      	push	{r7, lr}
 800765a:	b086      	sub	sp, #24
 800765c:	af00      	add	r7, sp, #0
 800765e:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	689b      	ldr	r3, [r3, #8]
 8007666:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800766e:	b2db      	uxtb	r3, r3
 8007670:	2b04      	cmp	r3, #4
 8007672:	d13a      	bne.n	80076ea <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8007674:	697b      	ldr	r3, [r7, #20]
 8007676:	f003 0301 	and.w	r3, r3, #1
 800767a:	2b01      	cmp	r3, #1
 800767c:	d109      	bne.n	8007692 <I2S_IRQHandler+0x3a>
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	685b      	ldr	r3, [r3, #4]
 8007684:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007688:	2b40      	cmp	r3, #64	@ 0x40
 800768a:	d102      	bne.n	8007692 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 800768c:	6878      	ldr	r0, [r7, #4]
 800768e:	f7ff ffb4 	bl	80075fa <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8007692:	697b      	ldr	r3, [r7, #20]
 8007694:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007698:	2b40      	cmp	r3, #64	@ 0x40
 800769a:	d126      	bne.n	80076ea <I2S_IRQHandler+0x92>
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	685b      	ldr	r3, [r3, #4]
 80076a2:	f003 0320 	and.w	r3, r3, #32
 80076a6:	2b20      	cmp	r3, #32
 80076a8:	d11f      	bne.n	80076ea <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	685a      	ldr	r2, [r3, #4]
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80076b8:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80076ba:	2300      	movs	r3, #0
 80076bc:	613b      	str	r3, [r7, #16]
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	68db      	ldr	r3, [r3, #12]
 80076c4:	613b      	str	r3, [r7, #16]
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	689b      	ldr	r3, [r3, #8]
 80076cc:	613b      	str	r3, [r7, #16]
 80076ce:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	2201      	movs	r2, #1
 80076d4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80076dc:	f043 0202 	orr.w	r2, r3, #2
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80076e4:	6878      	ldr	r0, [r7, #4]
 80076e6:	f7ff ff50 	bl	800758a <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80076f0:	b2db      	uxtb	r3, r3
 80076f2:	2b03      	cmp	r3, #3
 80076f4:	d136      	bne.n	8007764 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 80076f6:	697b      	ldr	r3, [r7, #20]
 80076f8:	f003 0302 	and.w	r3, r3, #2
 80076fc:	2b02      	cmp	r3, #2
 80076fe:	d109      	bne.n	8007714 <I2S_IRQHandler+0xbc>
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	685b      	ldr	r3, [r3, #4]
 8007706:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800770a:	2b80      	cmp	r3, #128	@ 0x80
 800770c:	d102      	bne.n	8007714 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 800770e:	6878      	ldr	r0, [r7, #4]
 8007710:	f7ff ff45 	bl	800759e <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8007714:	697b      	ldr	r3, [r7, #20]
 8007716:	f003 0308 	and.w	r3, r3, #8
 800771a:	2b08      	cmp	r3, #8
 800771c:	d122      	bne.n	8007764 <I2S_IRQHandler+0x10c>
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	685b      	ldr	r3, [r3, #4]
 8007724:	f003 0320 	and.w	r3, r3, #32
 8007728:	2b20      	cmp	r3, #32
 800772a:	d11b      	bne.n	8007764 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	685a      	ldr	r2, [r3, #4]
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 800773a:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 800773c:	2300      	movs	r3, #0
 800773e:	60fb      	str	r3, [r7, #12]
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	689b      	ldr	r3, [r3, #8]
 8007746:	60fb      	str	r3, [r7, #12]
 8007748:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	2201      	movs	r2, #1
 800774e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007756:	f043 0204 	orr.w	r2, r3, #4
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800775e:	6878      	ldr	r0, [r7, #4]
 8007760:	f7ff ff13 	bl	800758a <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8007764:	bf00      	nop
 8007766:	3718      	adds	r7, #24
 8007768:	46bd      	mov	sp, r7
 800776a:	bd80      	pop	{r7, pc}

0800776c <I2S_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef I2S_WaitFlagStateUntilTimeout(I2S_HandleTypeDef *hi2s, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout)
{
 800776c:	b580      	push	{r7, lr}
 800776e:	b086      	sub	sp, #24
 8007770:	af00      	add	r7, sp, #0
 8007772:	60f8      	str	r0, [r7, #12]
 8007774:	60b9      	str	r1, [r7, #8]
 8007776:	603b      	str	r3, [r7, #0]
 8007778:	4613      	mov	r3, r2
 800777a:	71fb      	strb	r3, [r7, #7]
  uint32_t tickstart;

  /* Get tick */
  tickstart = HAL_GetTick();
 800777c:	f7fe f8de 	bl	800593c <HAL_GetTick>
 8007780:	6178      	str	r0, [r7, #20]

  /* Wait until flag is set to status*/
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 8007782:	e018      	b.n	80077b6 <I2S_WaitFlagStateUntilTimeout+0x4a>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007784:	683b      	ldr	r3, [r7, #0]
 8007786:	f1b3 3fff 	cmp.w	r3, #4294967295
 800778a:	d014      	beq.n	80077b6 <I2S_WaitFlagStateUntilTimeout+0x4a>
    {
      if (((HAL_GetTick() - tickstart) >= Timeout) || (Timeout == 0U))
 800778c:	f7fe f8d6 	bl	800593c <HAL_GetTick>
 8007790:	4602      	mov	r2, r0
 8007792:	697b      	ldr	r3, [r7, #20]
 8007794:	1ad3      	subs	r3, r2, r3
 8007796:	683a      	ldr	r2, [r7, #0]
 8007798:	429a      	cmp	r2, r3
 800779a:	d902      	bls.n	80077a2 <I2S_WaitFlagStateUntilTimeout+0x36>
 800779c:	683b      	ldr	r3, [r7, #0]
 800779e:	2b00      	cmp	r3, #0
 80077a0:	d109      	bne.n	80077b6 <I2S_WaitFlagStateUntilTimeout+0x4a>
      {
        /* Set the I2S State ready */
        hi2s->State = HAL_I2S_STATE_READY;
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	2201      	movs	r2, #1
 80077a6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2s);
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	2200      	movs	r2, #0
 80077ae:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_TIMEOUT;
 80077b2:	2303      	movs	r3, #3
 80077b4:	e00f      	b.n	80077d6 <I2S_WaitFlagStateUntilTimeout+0x6a>
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 80077b6:	68fb      	ldr	r3, [r7, #12]
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	689a      	ldr	r2, [r3, #8]
 80077bc:	68bb      	ldr	r3, [r7, #8]
 80077be:	4013      	ands	r3, r2
 80077c0:	68ba      	ldr	r2, [r7, #8]
 80077c2:	429a      	cmp	r2, r3
 80077c4:	bf0c      	ite	eq
 80077c6:	2301      	moveq	r3, #1
 80077c8:	2300      	movne	r3, #0
 80077ca:	b2db      	uxtb	r3, r3
 80077cc:	461a      	mov	r2, r3
 80077ce:	79fb      	ldrb	r3, [r7, #7]
 80077d0:	429a      	cmp	r2, r3
 80077d2:	d1d7      	bne.n	8007784 <I2S_WaitFlagStateUntilTimeout+0x18>
      }
    }
  }
  return HAL_OK;
 80077d4:	2300      	movs	r3, #0
}
 80077d6:	4618      	mov	r0, r3
 80077d8:	3718      	adds	r7, #24
 80077da:	46bd      	mov	sp, r7
 80077dc:	bd80      	pop	{r7, pc}
	...

080077e0 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80077e0:	b580      	push	{r7, lr}
 80077e2:	b088      	sub	sp, #32
 80077e4:	af00      	add	r7, sp, #0
 80077e6:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	689b      	ldr	r3, [r3, #8]
 80077ee:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	4a92      	ldr	r2, [pc, #584]	@ (8007a40 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80077f6:	4293      	cmp	r3, r2
 80077f8:	d101      	bne.n	80077fe <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 80077fa:	4b92      	ldr	r3, [pc, #584]	@ (8007a44 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80077fc:	e001      	b.n	8007802 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 80077fe:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8007802:	689b      	ldr	r3, [r3, #8]
 8007804:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	685b      	ldr	r3, [r3, #4]
 800780c:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	4a8b      	ldr	r2, [pc, #556]	@ (8007a40 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8007814:	4293      	cmp	r3, r2
 8007816:	d101      	bne.n	800781c <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8007818:	4b8a      	ldr	r3, [pc, #552]	@ (8007a44 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800781a:	e001      	b.n	8007820 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 800781c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8007820:	685b      	ldr	r3, [r3, #4]
 8007822:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	685b      	ldr	r3, [r3, #4]
 8007828:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800782c:	d004      	beq.n	8007838 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	685b      	ldr	r3, [r3, #4]
 8007832:	2b00      	cmp	r3, #0
 8007834:	f040 8099 	bne.w	800796a <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8007838:	69fb      	ldr	r3, [r7, #28]
 800783a:	f003 0302 	and.w	r3, r3, #2
 800783e:	2b02      	cmp	r3, #2
 8007840:	d107      	bne.n	8007852 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8007842:	697b      	ldr	r3, [r7, #20]
 8007844:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007848:	2b00      	cmp	r3, #0
 800784a:	d002      	beq.n	8007852 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 800784c:	6878      	ldr	r0, [r7, #4]
 800784e:	f000 f925 	bl	8007a9c <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8007852:	69bb      	ldr	r3, [r7, #24]
 8007854:	f003 0301 	and.w	r3, r3, #1
 8007858:	2b01      	cmp	r3, #1
 800785a:	d107      	bne.n	800786c <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 800785c:	693b      	ldr	r3, [r7, #16]
 800785e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007862:	2b00      	cmp	r3, #0
 8007864:	d002      	beq.n	800786c <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8007866:	6878      	ldr	r0, [r7, #4]
 8007868:	f000 f9c8 	bl	8007bfc <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 800786c:	69bb      	ldr	r3, [r7, #24]
 800786e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007872:	2b40      	cmp	r3, #64	@ 0x40
 8007874:	d13a      	bne.n	80078ec <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8007876:	693b      	ldr	r3, [r7, #16]
 8007878:	f003 0320 	and.w	r3, r3, #32
 800787c:	2b00      	cmp	r3, #0
 800787e:	d035      	beq.n	80078ec <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	4a6e      	ldr	r2, [pc, #440]	@ (8007a40 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8007886:	4293      	cmp	r3, r2
 8007888:	d101      	bne.n	800788e <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 800788a:	4b6e      	ldr	r3, [pc, #440]	@ (8007a44 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800788c:	e001      	b.n	8007892 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 800788e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8007892:	685a      	ldr	r2, [r3, #4]
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	4969      	ldr	r1, [pc, #420]	@ (8007a40 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800789a:	428b      	cmp	r3, r1
 800789c:	d101      	bne.n	80078a2 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 800789e:	4b69      	ldr	r3, [pc, #420]	@ (8007a44 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80078a0:	e001      	b.n	80078a6 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 80078a2:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80078a6:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80078aa:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	685a      	ldr	r2, [r3, #4]
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80078ba:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80078bc:	2300      	movs	r3, #0
 80078be:	60fb      	str	r3, [r7, #12]
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	68db      	ldr	r3, [r3, #12]
 80078c6:	60fb      	str	r3, [r7, #12]
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	689b      	ldr	r3, [r3, #8]
 80078ce:	60fb      	str	r3, [r7, #12]
 80078d0:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	2201      	movs	r2, #1
 80078d6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80078de:	f043 0202 	orr.w	r2, r3, #2
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80078e6:	6878      	ldr	r0, [r7, #4]
 80078e8:	f7ff fe4f 	bl	800758a <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80078ec:	69fb      	ldr	r3, [r7, #28]
 80078ee:	f003 0308 	and.w	r3, r3, #8
 80078f2:	2b08      	cmp	r3, #8
 80078f4:	f040 80c3 	bne.w	8007a7e <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 80078f8:	697b      	ldr	r3, [r7, #20]
 80078fa:	f003 0320 	and.w	r3, r3, #32
 80078fe:	2b00      	cmp	r3, #0
 8007900:	f000 80bd 	beq.w	8007a7e <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	685a      	ldr	r2, [r3, #4]
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8007912:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	4a49      	ldr	r2, [pc, #292]	@ (8007a40 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800791a:	4293      	cmp	r3, r2
 800791c:	d101      	bne.n	8007922 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 800791e:	4b49      	ldr	r3, [pc, #292]	@ (8007a44 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8007920:	e001      	b.n	8007926 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8007922:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8007926:	685a      	ldr	r2, [r3, #4]
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	4944      	ldr	r1, [pc, #272]	@ (8007a40 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800792e:	428b      	cmp	r3, r1
 8007930:	d101      	bne.n	8007936 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8007932:	4b44      	ldr	r3, [pc, #272]	@ (8007a44 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8007934:	e001      	b.n	800793a <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8007936:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800793a:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800793e:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8007940:	2300      	movs	r3, #0
 8007942:	60bb      	str	r3, [r7, #8]
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	689b      	ldr	r3, [r3, #8]
 800794a:	60bb      	str	r3, [r7, #8]
 800794c:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	2201      	movs	r2, #1
 8007952:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800795a:	f043 0204 	orr.w	r2, r3, #4
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8007962:	6878      	ldr	r0, [r7, #4]
 8007964:	f7ff fe11 	bl	800758a <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8007968:	e089      	b.n	8007a7e <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 800796a:	69bb      	ldr	r3, [r7, #24]
 800796c:	f003 0302 	and.w	r3, r3, #2
 8007970:	2b02      	cmp	r3, #2
 8007972:	d107      	bne.n	8007984 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8007974:	693b      	ldr	r3, [r7, #16]
 8007976:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800797a:	2b00      	cmp	r3, #0
 800797c:	d002      	beq.n	8007984 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 800797e:	6878      	ldr	r0, [r7, #4]
 8007980:	f000 f8be 	bl	8007b00 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8007984:	69fb      	ldr	r3, [r7, #28]
 8007986:	f003 0301 	and.w	r3, r3, #1
 800798a:	2b01      	cmp	r3, #1
 800798c:	d107      	bne.n	800799e <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 800798e:	697b      	ldr	r3, [r7, #20]
 8007990:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007994:	2b00      	cmp	r3, #0
 8007996:	d002      	beq.n	800799e <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8007998:	6878      	ldr	r0, [r7, #4]
 800799a:	f000 f8fd 	bl	8007b98 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800799e:	69fb      	ldr	r3, [r7, #28]
 80079a0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80079a4:	2b40      	cmp	r3, #64	@ 0x40
 80079a6:	d12f      	bne.n	8007a08 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 80079a8:	697b      	ldr	r3, [r7, #20]
 80079aa:	f003 0320 	and.w	r3, r3, #32
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	d02a      	beq.n	8007a08 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	685a      	ldr	r2, [r3, #4]
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80079c0:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	4a1e      	ldr	r2, [pc, #120]	@ (8007a40 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80079c8:	4293      	cmp	r3, r2
 80079ca:	d101      	bne.n	80079d0 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 80079cc:	4b1d      	ldr	r3, [pc, #116]	@ (8007a44 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80079ce:	e001      	b.n	80079d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 80079d0:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80079d4:	685a      	ldr	r2, [r3, #4]
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	4919      	ldr	r1, [pc, #100]	@ (8007a40 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80079dc:	428b      	cmp	r3, r1
 80079de:	d101      	bne.n	80079e4 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 80079e0:	4b18      	ldr	r3, [pc, #96]	@ (8007a44 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80079e2:	e001      	b.n	80079e8 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 80079e4:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80079e8:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80079ec:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	2201      	movs	r2, #1
 80079f2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80079fa:	f043 0202 	orr.w	r2, r3, #2
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8007a02:	6878      	ldr	r0, [r7, #4]
 8007a04:	f7ff fdc1 	bl	800758a <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8007a08:	69bb      	ldr	r3, [r7, #24]
 8007a0a:	f003 0308 	and.w	r3, r3, #8
 8007a0e:	2b08      	cmp	r3, #8
 8007a10:	d136      	bne.n	8007a80 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 8007a12:	693b      	ldr	r3, [r7, #16]
 8007a14:	f003 0320 	and.w	r3, r3, #32
 8007a18:	2b00      	cmp	r3, #0
 8007a1a:	d031      	beq.n	8007a80 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	4a07      	ldr	r2, [pc, #28]	@ (8007a40 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8007a22:	4293      	cmp	r3, r2
 8007a24:	d101      	bne.n	8007a2a <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8007a26:	4b07      	ldr	r3, [pc, #28]	@ (8007a44 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8007a28:	e001      	b.n	8007a2e <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8007a2a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8007a2e:	685a      	ldr	r2, [r3, #4]
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	4902      	ldr	r1, [pc, #8]	@ (8007a40 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8007a36:	428b      	cmp	r3, r1
 8007a38:	d106      	bne.n	8007a48 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 8007a3a:	4b02      	ldr	r3, [pc, #8]	@ (8007a44 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8007a3c:	e006      	b.n	8007a4c <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 8007a3e:	bf00      	nop
 8007a40:	40003800 	.word	0x40003800
 8007a44:	40003400 	.word	0x40003400
 8007a48:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8007a4c:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8007a50:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	685a      	ldr	r2, [r3, #4]
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8007a60:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	2201      	movs	r2, #1
 8007a66:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007a6e:	f043 0204 	orr.w	r2, r3, #4
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8007a76:	6878      	ldr	r0, [r7, #4]
 8007a78:	f7ff fd87 	bl	800758a <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8007a7c:	e000      	b.n	8007a80 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8007a7e:	bf00      	nop
}
 8007a80:	bf00      	nop
 8007a82:	3720      	adds	r7, #32
 8007a84:	46bd      	mov	sp, r7
 8007a86:	bd80      	pop	{r7, pc}

08007a88 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8007a88:	b480      	push	{r7}
 8007a8a:	b083      	sub	sp, #12
 8007a8c:	af00      	add	r7, sp, #0
 8007a8e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8007a90:	bf00      	nop
 8007a92:	370c      	adds	r7, #12
 8007a94:	46bd      	mov	sp, r7
 8007a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a9a:	4770      	bx	lr

08007a9c <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8007a9c:	b580      	push	{r7, lr}
 8007a9e:	b082      	sub	sp, #8
 8007aa0:	af00      	add	r7, sp, #0
 8007aa2:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007aa8:	1c99      	adds	r1, r3, #2
 8007aaa:	687a      	ldr	r2, [r7, #4]
 8007aac:	6251      	str	r1, [r2, #36]	@ 0x24
 8007aae:	881a      	ldrh	r2, [r3, #0]
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007aba:	b29b      	uxth	r3, r3
 8007abc:	3b01      	subs	r3, #1
 8007abe:	b29a      	uxth	r2, r3
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007ac8:	b29b      	uxth	r3, r3
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	d113      	bne.n	8007af6 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	685a      	ldr	r2, [r3, #4]
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8007adc:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8007ae2:	b29b      	uxth	r3, r3
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	d106      	bne.n	8007af6 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	2201      	movs	r2, #1
 8007aec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8007af0:	6878      	ldr	r0, [r7, #4]
 8007af2:	f7ff ffc9 	bl	8007a88 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8007af6:	bf00      	nop
 8007af8:	3708      	adds	r7, #8
 8007afa:	46bd      	mov	sp, r7
 8007afc:	bd80      	pop	{r7, pc}
	...

08007b00 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8007b00:	b580      	push	{r7, lr}
 8007b02:	b082      	sub	sp, #8
 8007b04:	af00      	add	r7, sp, #0
 8007b06:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007b0c:	1c99      	adds	r1, r3, #2
 8007b0e:	687a      	ldr	r2, [r7, #4]
 8007b10:	6251      	str	r1, [r2, #36]	@ 0x24
 8007b12:	8819      	ldrh	r1, [r3, #0]
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	4a1d      	ldr	r2, [pc, #116]	@ (8007b90 <I2SEx_TxISR_I2SExt+0x90>)
 8007b1a:	4293      	cmp	r3, r2
 8007b1c:	d101      	bne.n	8007b22 <I2SEx_TxISR_I2SExt+0x22>
 8007b1e:	4b1d      	ldr	r3, [pc, #116]	@ (8007b94 <I2SEx_TxISR_I2SExt+0x94>)
 8007b20:	e001      	b.n	8007b26 <I2SEx_TxISR_I2SExt+0x26>
 8007b22:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8007b26:	460a      	mov	r2, r1
 8007b28:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007b2e:	b29b      	uxth	r3, r3
 8007b30:	3b01      	subs	r3, #1
 8007b32:	b29a      	uxth	r2, r3
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007b3c:	b29b      	uxth	r3, r3
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	d121      	bne.n	8007b86 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	4a12      	ldr	r2, [pc, #72]	@ (8007b90 <I2SEx_TxISR_I2SExt+0x90>)
 8007b48:	4293      	cmp	r3, r2
 8007b4a:	d101      	bne.n	8007b50 <I2SEx_TxISR_I2SExt+0x50>
 8007b4c:	4b11      	ldr	r3, [pc, #68]	@ (8007b94 <I2SEx_TxISR_I2SExt+0x94>)
 8007b4e:	e001      	b.n	8007b54 <I2SEx_TxISR_I2SExt+0x54>
 8007b50:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8007b54:	685a      	ldr	r2, [r3, #4]
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	490d      	ldr	r1, [pc, #52]	@ (8007b90 <I2SEx_TxISR_I2SExt+0x90>)
 8007b5c:	428b      	cmp	r3, r1
 8007b5e:	d101      	bne.n	8007b64 <I2SEx_TxISR_I2SExt+0x64>
 8007b60:	4b0c      	ldr	r3, [pc, #48]	@ (8007b94 <I2SEx_TxISR_I2SExt+0x94>)
 8007b62:	e001      	b.n	8007b68 <I2SEx_TxISR_I2SExt+0x68>
 8007b64:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8007b68:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8007b6c:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8007b72:	b29b      	uxth	r3, r3
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	d106      	bne.n	8007b86 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	2201      	movs	r2, #1
 8007b7c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8007b80:	6878      	ldr	r0, [r7, #4]
 8007b82:	f7ff ff81 	bl	8007a88 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8007b86:	bf00      	nop
 8007b88:	3708      	adds	r7, #8
 8007b8a:	46bd      	mov	sp, r7
 8007b8c:	bd80      	pop	{r7, pc}
 8007b8e:	bf00      	nop
 8007b90:	40003800 	.word	0x40003800
 8007b94:	40003400 	.word	0x40003400

08007b98 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8007b98:	b580      	push	{r7, lr}
 8007b9a:	b082      	sub	sp, #8
 8007b9c:	af00      	add	r7, sp, #0
 8007b9e:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	68d8      	ldr	r0, [r3, #12]
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007baa:	1c99      	adds	r1, r3, #2
 8007bac:	687a      	ldr	r2, [r7, #4]
 8007bae:	62d1      	str	r1, [r2, #44]	@ 0x2c
 8007bb0:	b282      	uxth	r2, r0
 8007bb2:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8007bb8:	b29b      	uxth	r3, r3
 8007bba:	3b01      	subs	r3, #1
 8007bbc:	b29a      	uxth	r2, r3
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8007bc6:	b29b      	uxth	r3, r3
 8007bc8:	2b00      	cmp	r3, #0
 8007bca:	d113      	bne.n	8007bf4 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	685a      	ldr	r2, [r3, #4]
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8007bda:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007be0:	b29b      	uxth	r3, r3
 8007be2:	2b00      	cmp	r3, #0
 8007be4:	d106      	bne.n	8007bf4 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	2201      	movs	r2, #1
 8007bea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8007bee:	6878      	ldr	r0, [r7, #4]
 8007bf0:	f7ff ff4a 	bl	8007a88 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8007bf4:	bf00      	nop
 8007bf6:	3708      	adds	r7, #8
 8007bf8:	46bd      	mov	sp, r7
 8007bfa:	bd80      	pop	{r7, pc}

08007bfc <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8007bfc:	b580      	push	{r7, lr}
 8007bfe:	b082      	sub	sp, #8
 8007c00:	af00      	add	r7, sp, #0
 8007c02:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	4a20      	ldr	r2, [pc, #128]	@ (8007c8c <I2SEx_RxISR_I2SExt+0x90>)
 8007c0a:	4293      	cmp	r3, r2
 8007c0c:	d101      	bne.n	8007c12 <I2SEx_RxISR_I2SExt+0x16>
 8007c0e:	4b20      	ldr	r3, [pc, #128]	@ (8007c90 <I2SEx_RxISR_I2SExt+0x94>)
 8007c10:	e001      	b.n	8007c16 <I2SEx_RxISR_I2SExt+0x1a>
 8007c12:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8007c16:	68d8      	ldr	r0, [r3, #12]
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c1c:	1c99      	adds	r1, r3, #2
 8007c1e:	687a      	ldr	r2, [r7, #4]
 8007c20:	62d1      	str	r1, [r2, #44]	@ 0x2c
 8007c22:	b282      	uxth	r2, r0
 8007c24:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8007c2a:	b29b      	uxth	r3, r3
 8007c2c:	3b01      	subs	r3, #1
 8007c2e:	b29a      	uxth	r2, r3
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8007c38:	b29b      	uxth	r3, r3
 8007c3a:	2b00      	cmp	r3, #0
 8007c3c:	d121      	bne.n	8007c82 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	4a12      	ldr	r2, [pc, #72]	@ (8007c8c <I2SEx_RxISR_I2SExt+0x90>)
 8007c44:	4293      	cmp	r3, r2
 8007c46:	d101      	bne.n	8007c4c <I2SEx_RxISR_I2SExt+0x50>
 8007c48:	4b11      	ldr	r3, [pc, #68]	@ (8007c90 <I2SEx_RxISR_I2SExt+0x94>)
 8007c4a:	e001      	b.n	8007c50 <I2SEx_RxISR_I2SExt+0x54>
 8007c4c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8007c50:	685a      	ldr	r2, [r3, #4]
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	490d      	ldr	r1, [pc, #52]	@ (8007c8c <I2SEx_RxISR_I2SExt+0x90>)
 8007c58:	428b      	cmp	r3, r1
 8007c5a:	d101      	bne.n	8007c60 <I2SEx_RxISR_I2SExt+0x64>
 8007c5c:	4b0c      	ldr	r3, [pc, #48]	@ (8007c90 <I2SEx_RxISR_I2SExt+0x94>)
 8007c5e:	e001      	b.n	8007c64 <I2SEx_RxISR_I2SExt+0x68>
 8007c60:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8007c64:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8007c68:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007c6e:	b29b      	uxth	r3, r3
 8007c70:	2b00      	cmp	r3, #0
 8007c72:	d106      	bne.n	8007c82 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	2201      	movs	r2, #1
 8007c78:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8007c7c:	6878      	ldr	r0, [r7, #4]
 8007c7e:	f7ff ff03 	bl	8007a88 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8007c82:	bf00      	nop
 8007c84:	3708      	adds	r7, #8
 8007c86:	46bd      	mov	sp, r7
 8007c88:	bd80      	pop	{r7, pc}
 8007c8a:	bf00      	nop
 8007c8c:	40003800 	.word	0x40003800
 8007c90:	40003400 	.word	0x40003400

08007c94 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007c94:	b580      	push	{r7, lr}
 8007c96:	b086      	sub	sp, #24
 8007c98:	af00      	add	r7, sp, #0
 8007c9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	2b00      	cmp	r3, #0
 8007ca0:	d101      	bne.n	8007ca6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007ca2:	2301      	movs	r3, #1
 8007ca4:	e267      	b.n	8008176 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	f003 0301 	and.w	r3, r3, #1
 8007cae:	2b00      	cmp	r3, #0
 8007cb0:	d075      	beq.n	8007d9e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8007cb2:	4b88      	ldr	r3, [pc, #544]	@ (8007ed4 <HAL_RCC_OscConfig+0x240>)
 8007cb4:	689b      	ldr	r3, [r3, #8]
 8007cb6:	f003 030c 	and.w	r3, r3, #12
 8007cba:	2b04      	cmp	r3, #4
 8007cbc:	d00c      	beq.n	8007cd8 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007cbe:	4b85      	ldr	r3, [pc, #532]	@ (8007ed4 <HAL_RCC_OscConfig+0x240>)
 8007cc0:	689b      	ldr	r3, [r3, #8]
 8007cc2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8007cc6:	2b08      	cmp	r3, #8
 8007cc8:	d112      	bne.n	8007cf0 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007cca:	4b82      	ldr	r3, [pc, #520]	@ (8007ed4 <HAL_RCC_OscConfig+0x240>)
 8007ccc:	685b      	ldr	r3, [r3, #4]
 8007cce:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007cd2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007cd6:	d10b      	bne.n	8007cf0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007cd8:	4b7e      	ldr	r3, [pc, #504]	@ (8007ed4 <HAL_RCC_OscConfig+0x240>)
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007ce0:	2b00      	cmp	r3, #0
 8007ce2:	d05b      	beq.n	8007d9c <HAL_RCC_OscConfig+0x108>
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	685b      	ldr	r3, [r3, #4]
 8007ce8:	2b00      	cmp	r3, #0
 8007cea:	d157      	bne.n	8007d9c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8007cec:	2301      	movs	r3, #1
 8007cee:	e242      	b.n	8008176 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	685b      	ldr	r3, [r3, #4]
 8007cf4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007cf8:	d106      	bne.n	8007d08 <HAL_RCC_OscConfig+0x74>
 8007cfa:	4b76      	ldr	r3, [pc, #472]	@ (8007ed4 <HAL_RCC_OscConfig+0x240>)
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	4a75      	ldr	r2, [pc, #468]	@ (8007ed4 <HAL_RCC_OscConfig+0x240>)
 8007d00:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007d04:	6013      	str	r3, [r2, #0]
 8007d06:	e01d      	b.n	8007d44 <HAL_RCC_OscConfig+0xb0>
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	685b      	ldr	r3, [r3, #4]
 8007d0c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007d10:	d10c      	bne.n	8007d2c <HAL_RCC_OscConfig+0x98>
 8007d12:	4b70      	ldr	r3, [pc, #448]	@ (8007ed4 <HAL_RCC_OscConfig+0x240>)
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	4a6f      	ldr	r2, [pc, #444]	@ (8007ed4 <HAL_RCC_OscConfig+0x240>)
 8007d18:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8007d1c:	6013      	str	r3, [r2, #0]
 8007d1e:	4b6d      	ldr	r3, [pc, #436]	@ (8007ed4 <HAL_RCC_OscConfig+0x240>)
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	4a6c      	ldr	r2, [pc, #432]	@ (8007ed4 <HAL_RCC_OscConfig+0x240>)
 8007d24:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007d28:	6013      	str	r3, [r2, #0]
 8007d2a:	e00b      	b.n	8007d44 <HAL_RCC_OscConfig+0xb0>
 8007d2c:	4b69      	ldr	r3, [pc, #420]	@ (8007ed4 <HAL_RCC_OscConfig+0x240>)
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	4a68      	ldr	r2, [pc, #416]	@ (8007ed4 <HAL_RCC_OscConfig+0x240>)
 8007d32:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007d36:	6013      	str	r3, [r2, #0]
 8007d38:	4b66      	ldr	r3, [pc, #408]	@ (8007ed4 <HAL_RCC_OscConfig+0x240>)
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	4a65      	ldr	r2, [pc, #404]	@ (8007ed4 <HAL_RCC_OscConfig+0x240>)
 8007d3e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007d42:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	685b      	ldr	r3, [r3, #4]
 8007d48:	2b00      	cmp	r3, #0
 8007d4a:	d013      	beq.n	8007d74 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007d4c:	f7fd fdf6 	bl	800593c <HAL_GetTick>
 8007d50:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007d52:	e008      	b.n	8007d66 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007d54:	f7fd fdf2 	bl	800593c <HAL_GetTick>
 8007d58:	4602      	mov	r2, r0
 8007d5a:	693b      	ldr	r3, [r7, #16]
 8007d5c:	1ad3      	subs	r3, r2, r3
 8007d5e:	2b64      	cmp	r3, #100	@ 0x64
 8007d60:	d901      	bls.n	8007d66 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8007d62:	2303      	movs	r3, #3
 8007d64:	e207      	b.n	8008176 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007d66:	4b5b      	ldr	r3, [pc, #364]	@ (8007ed4 <HAL_RCC_OscConfig+0x240>)
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007d6e:	2b00      	cmp	r3, #0
 8007d70:	d0f0      	beq.n	8007d54 <HAL_RCC_OscConfig+0xc0>
 8007d72:	e014      	b.n	8007d9e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007d74:	f7fd fde2 	bl	800593c <HAL_GetTick>
 8007d78:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007d7a:	e008      	b.n	8007d8e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007d7c:	f7fd fdde 	bl	800593c <HAL_GetTick>
 8007d80:	4602      	mov	r2, r0
 8007d82:	693b      	ldr	r3, [r7, #16]
 8007d84:	1ad3      	subs	r3, r2, r3
 8007d86:	2b64      	cmp	r3, #100	@ 0x64
 8007d88:	d901      	bls.n	8007d8e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8007d8a:	2303      	movs	r3, #3
 8007d8c:	e1f3      	b.n	8008176 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007d8e:	4b51      	ldr	r3, [pc, #324]	@ (8007ed4 <HAL_RCC_OscConfig+0x240>)
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007d96:	2b00      	cmp	r3, #0
 8007d98:	d1f0      	bne.n	8007d7c <HAL_RCC_OscConfig+0xe8>
 8007d9a:	e000      	b.n	8007d9e <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007d9c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	f003 0302 	and.w	r3, r3, #2
 8007da6:	2b00      	cmp	r3, #0
 8007da8:	d063      	beq.n	8007e72 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8007daa:	4b4a      	ldr	r3, [pc, #296]	@ (8007ed4 <HAL_RCC_OscConfig+0x240>)
 8007dac:	689b      	ldr	r3, [r3, #8]
 8007dae:	f003 030c 	and.w	r3, r3, #12
 8007db2:	2b00      	cmp	r3, #0
 8007db4:	d00b      	beq.n	8007dce <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007db6:	4b47      	ldr	r3, [pc, #284]	@ (8007ed4 <HAL_RCC_OscConfig+0x240>)
 8007db8:	689b      	ldr	r3, [r3, #8]
 8007dba:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8007dbe:	2b08      	cmp	r3, #8
 8007dc0:	d11c      	bne.n	8007dfc <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007dc2:	4b44      	ldr	r3, [pc, #272]	@ (8007ed4 <HAL_RCC_OscConfig+0x240>)
 8007dc4:	685b      	ldr	r3, [r3, #4]
 8007dc6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007dca:	2b00      	cmp	r3, #0
 8007dcc:	d116      	bne.n	8007dfc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007dce:	4b41      	ldr	r3, [pc, #260]	@ (8007ed4 <HAL_RCC_OscConfig+0x240>)
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	f003 0302 	and.w	r3, r3, #2
 8007dd6:	2b00      	cmp	r3, #0
 8007dd8:	d005      	beq.n	8007de6 <HAL_RCC_OscConfig+0x152>
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	68db      	ldr	r3, [r3, #12]
 8007dde:	2b01      	cmp	r3, #1
 8007de0:	d001      	beq.n	8007de6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8007de2:	2301      	movs	r3, #1
 8007de4:	e1c7      	b.n	8008176 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007de6:	4b3b      	ldr	r3, [pc, #236]	@ (8007ed4 <HAL_RCC_OscConfig+0x240>)
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	691b      	ldr	r3, [r3, #16]
 8007df2:	00db      	lsls	r3, r3, #3
 8007df4:	4937      	ldr	r1, [pc, #220]	@ (8007ed4 <HAL_RCC_OscConfig+0x240>)
 8007df6:	4313      	orrs	r3, r2
 8007df8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007dfa:	e03a      	b.n	8007e72 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	68db      	ldr	r3, [r3, #12]
 8007e00:	2b00      	cmp	r3, #0
 8007e02:	d020      	beq.n	8007e46 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007e04:	4b34      	ldr	r3, [pc, #208]	@ (8007ed8 <HAL_RCC_OscConfig+0x244>)
 8007e06:	2201      	movs	r2, #1
 8007e08:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007e0a:	f7fd fd97 	bl	800593c <HAL_GetTick>
 8007e0e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007e10:	e008      	b.n	8007e24 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007e12:	f7fd fd93 	bl	800593c <HAL_GetTick>
 8007e16:	4602      	mov	r2, r0
 8007e18:	693b      	ldr	r3, [r7, #16]
 8007e1a:	1ad3      	subs	r3, r2, r3
 8007e1c:	2b02      	cmp	r3, #2
 8007e1e:	d901      	bls.n	8007e24 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8007e20:	2303      	movs	r3, #3
 8007e22:	e1a8      	b.n	8008176 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007e24:	4b2b      	ldr	r3, [pc, #172]	@ (8007ed4 <HAL_RCC_OscConfig+0x240>)
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	f003 0302 	and.w	r3, r3, #2
 8007e2c:	2b00      	cmp	r3, #0
 8007e2e:	d0f0      	beq.n	8007e12 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007e30:	4b28      	ldr	r3, [pc, #160]	@ (8007ed4 <HAL_RCC_OscConfig+0x240>)
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	691b      	ldr	r3, [r3, #16]
 8007e3c:	00db      	lsls	r3, r3, #3
 8007e3e:	4925      	ldr	r1, [pc, #148]	@ (8007ed4 <HAL_RCC_OscConfig+0x240>)
 8007e40:	4313      	orrs	r3, r2
 8007e42:	600b      	str	r3, [r1, #0]
 8007e44:	e015      	b.n	8007e72 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007e46:	4b24      	ldr	r3, [pc, #144]	@ (8007ed8 <HAL_RCC_OscConfig+0x244>)
 8007e48:	2200      	movs	r2, #0
 8007e4a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007e4c:	f7fd fd76 	bl	800593c <HAL_GetTick>
 8007e50:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007e52:	e008      	b.n	8007e66 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007e54:	f7fd fd72 	bl	800593c <HAL_GetTick>
 8007e58:	4602      	mov	r2, r0
 8007e5a:	693b      	ldr	r3, [r7, #16]
 8007e5c:	1ad3      	subs	r3, r2, r3
 8007e5e:	2b02      	cmp	r3, #2
 8007e60:	d901      	bls.n	8007e66 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8007e62:	2303      	movs	r3, #3
 8007e64:	e187      	b.n	8008176 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007e66:	4b1b      	ldr	r3, [pc, #108]	@ (8007ed4 <HAL_RCC_OscConfig+0x240>)
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	f003 0302 	and.w	r3, r3, #2
 8007e6e:	2b00      	cmp	r3, #0
 8007e70:	d1f0      	bne.n	8007e54 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	f003 0308 	and.w	r3, r3, #8
 8007e7a:	2b00      	cmp	r3, #0
 8007e7c:	d036      	beq.n	8007eec <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	695b      	ldr	r3, [r3, #20]
 8007e82:	2b00      	cmp	r3, #0
 8007e84:	d016      	beq.n	8007eb4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007e86:	4b15      	ldr	r3, [pc, #84]	@ (8007edc <HAL_RCC_OscConfig+0x248>)
 8007e88:	2201      	movs	r2, #1
 8007e8a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007e8c:	f7fd fd56 	bl	800593c <HAL_GetTick>
 8007e90:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007e92:	e008      	b.n	8007ea6 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007e94:	f7fd fd52 	bl	800593c <HAL_GetTick>
 8007e98:	4602      	mov	r2, r0
 8007e9a:	693b      	ldr	r3, [r7, #16]
 8007e9c:	1ad3      	subs	r3, r2, r3
 8007e9e:	2b02      	cmp	r3, #2
 8007ea0:	d901      	bls.n	8007ea6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8007ea2:	2303      	movs	r3, #3
 8007ea4:	e167      	b.n	8008176 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007ea6:	4b0b      	ldr	r3, [pc, #44]	@ (8007ed4 <HAL_RCC_OscConfig+0x240>)
 8007ea8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007eaa:	f003 0302 	and.w	r3, r3, #2
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	d0f0      	beq.n	8007e94 <HAL_RCC_OscConfig+0x200>
 8007eb2:	e01b      	b.n	8007eec <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007eb4:	4b09      	ldr	r3, [pc, #36]	@ (8007edc <HAL_RCC_OscConfig+0x248>)
 8007eb6:	2200      	movs	r2, #0
 8007eb8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007eba:	f7fd fd3f 	bl	800593c <HAL_GetTick>
 8007ebe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007ec0:	e00e      	b.n	8007ee0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007ec2:	f7fd fd3b 	bl	800593c <HAL_GetTick>
 8007ec6:	4602      	mov	r2, r0
 8007ec8:	693b      	ldr	r3, [r7, #16]
 8007eca:	1ad3      	subs	r3, r2, r3
 8007ecc:	2b02      	cmp	r3, #2
 8007ece:	d907      	bls.n	8007ee0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8007ed0:	2303      	movs	r3, #3
 8007ed2:	e150      	b.n	8008176 <HAL_RCC_OscConfig+0x4e2>
 8007ed4:	40023800 	.word	0x40023800
 8007ed8:	42470000 	.word	0x42470000
 8007edc:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007ee0:	4b88      	ldr	r3, [pc, #544]	@ (8008104 <HAL_RCC_OscConfig+0x470>)
 8007ee2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007ee4:	f003 0302 	and.w	r3, r3, #2
 8007ee8:	2b00      	cmp	r3, #0
 8007eea:	d1ea      	bne.n	8007ec2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	f003 0304 	and.w	r3, r3, #4
 8007ef4:	2b00      	cmp	r3, #0
 8007ef6:	f000 8097 	beq.w	8008028 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007efa:	2300      	movs	r3, #0
 8007efc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007efe:	4b81      	ldr	r3, [pc, #516]	@ (8008104 <HAL_RCC_OscConfig+0x470>)
 8007f00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007f02:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007f06:	2b00      	cmp	r3, #0
 8007f08:	d10f      	bne.n	8007f2a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007f0a:	2300      	movs	r3, #0
 8007f0c:	60bb      	str	r3, [r7, #8]
 8007f0e:	4b7d      	ldr	r3, [pc, #500]	@ (8008104 <HAL_RCC_OscConfig+0x470>)
 8007f10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007f12:	4a7c      	ldr	r2, [pc, #496]	@ (8008104 <HAL_RCC_OscConfig+0x470>)
 8007f14:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007f18:	6413      	str	r3, [r2, #64]	@ 0x40
 8007f1a:	4b7a      	ldr	r3, [pc, #488]	@ (8008104 <HAL_RCC_OscConfig+0x470>)
 8007f1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007f1e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007f22:	60bb      	str	r3, [r7, #8]
 8007f24:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007f26:	2301      	movs	r3, #1
 8007f28:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007f2a:	4b77      	ldr	r3, [pc, #476]	@ (8008108 <HAL_RCC_OscConfig+0x474>)
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007f32:	2b00      	cmp	r3, #0
 8007f34:	d118      	bne.n	8007f68 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007f36:	4b74      	ldr	r3, [pc, #464]	@ (8008108 <HAL_RCC_OscConfig+0x474>)
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	4a73      	ldr	r2, [pc, #460]	@ (8008108 <HAL_RCC_OscConfig+0x474>)
 8007f3c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007f40:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007f42:	f7fd fcfb 	bl	800593c <HAL_GetTick>
 8007f46:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007f48:	e008      	b.n	8007f5c <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007f4a:	f7fd fcf7 	bl	800593c <HAL_GetTick>
 8007f4e:	4602      	mov	r2, r0
 8007f50:	693b      	ldr	r3, [r7, #16]
 8007f52:	1ad3      	subs	r3, r2, r3
 8007f54:	2b02      	cmp	r3, #2
 8007f56:	d901      	bls.n	8007f5c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8007f58:	2303      	movs	r3, #3
 8007f5a:	e10c      	b.n	8008176 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007f5c:	4b6a      	ldr	r3, [pc, #424]	@ (8008108 <HAL_RCC_OscConfig+0x474>)
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007f64:	2b00      	cmp	r3, #0
 8007f66:	d0f0      	beq.n	8007f4a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	689b      	ldr	r3, [r3, #8]
 8007f6c:	2b01      	cmp	r3, #1
 8007f6e:	d106      	bne.n	8007f7e <HAL_RCC_OscConfig+0x2ea>
 8007f70:	4b64      	ldr	r3, [pc, #400]	@ (8008104 <HAL_RCC_OscConfig+0x470>)
 8007f72:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007f74:	4a63      	ldr	r2, [pc, #396]	@ (8008104 <HAL_RCC_OscConfig+0x470>)
 8007f76:	f043 0301 	orr.w	r3, r3, #1
 8007f7a:	6713      	str	r3, [r2, #112]	@ 0x70
 8007f7c:	e01c      	b.n	8007fb8 <HAL_RCC_OscConfig+0x324>
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	689b      	ldr	r3, [r3, #8]
 8007f82:	2b05      	cmp	r3, #5
 8007f84:	d10c      	bne.n	8007fa0 <HAL_RCC_OscConfig+0x30c>
 8007f86:	4b5f      	ldr	r3, [pc, #380]	@ (8008104 <HAL_RCC_OscConfig+0x470>)
 8007f88:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007f8a:	4a5e      	ldr	r2, [pc, #376]	@ (8008104 <HAL_RCC_OscConfig+0x470>)
 8007f8c:	f043 0304 	orr.w	r3, r3, #4
 8007f90:	6713      	str	r3, [r2, #112]	@ 0x70
 8007f92:	4b5c      	ldr	r3, [pc, #368]	@ (8008104 <HAL_RCC_OscConfig+0x470>)
 8007f94:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007f96:	4a5b      	ldr	r2, [pc, #364]	@ (8008104 <HAL_RCC_OscConfig+0x470>)
 8007f98:	f043 0301 	orr.w	r3, r3, #1
 8007f9c:	6713      	str	r3, [r2, #112]	@ 0x70
 8007f9e:	e00b      	b.n	8007fb8 <HAL_RCC_OscConfig+0x324>
 8007fa0:	4b58      	ldr	r3, [pc, #352]	@ (8008104 <HAL_RCC_OscConfig+0x470>)
 8007fa2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007fa4:	4a57      	ldr	r2, [pc, #348]	@ (8008104 <HAL_RCC_OscConfig+0x470>)
 8007fa6:	f023 0301 	bic.w	r3, r3, #1
 8007faa:	6713      	str	r3, [r2, #112]	@ 0x70
 8007fac:	4b55      	ldr	r3, [pc, #340]	@ (8008104 <HAL_RCC_OscConfig+0x470>)
 8007fae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007fb0:	4a54      	ldr	r2, [pc, #336]	@ (8008104 <HAL_RCC_OscConfig+0x470>)
 8007fb2:	f023 0304 	bic.w	r3, r3, #4
 8007fb6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	689b      	ldr	r3, [r3, #8]
 8007fbc:	2b00      	cmp	r3, #0
 8007fbe:	d015      	beq.n	8007fec <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007fc0:	f7fd fcbc 	bl	800593c <HAL_GetTick>
 8007fc4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007fc6:	e00a      	b.n	8007fde <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007fc8:	f7fd fcb8 	bl	800593c <HAL_GetTick>
 8007fcc:	4602      	mov	r2, r0
 8007fce:	693b      	ldr	r3, [r7, #16]
 8007fd0:	1ad3      	subs	r3, r2, r3
 8007fd2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007fd6:	4293      	cmp	r3, r2
 8007fd8:	d901      	bls.n	8007fde <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8007fda:	2303      	movs	r3, #3
 8007fdc:	e0cb      	b.n	8008176 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007fde:	4b49      	ldr	r3, [pc, #292]	@ (8008104 <HAL_RCC_OscConfig+0x470>)
 8007fe0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007fe2:	f003 0302 	and.w	r3, r3, #2
 8007fe6:	2b00      	cmp	r3, #0
 8007fe8:	d0ee      	beq.n	8007fc8 <HAL_RCC_OscConfig+0x334>
 8007fea:	e014      	b.n	8008016 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007fec:	f7fd fca6 	bl	800593c <HAL_GetTick>
 8007ff0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007ff2:	e00a      	b.n	800800a <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007ff4:	f7fd fca2 	bl	800593c <HAL_GetTick>
 8007ff8:	4602      	mov	r2, r0
 8007ffa:	693b      	ldr	r3, [r7, #16]
 8007ffc:	1ad3      	subs	r3, r2, r3
 8007ffe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008002:	4293      	cmp	r3, r2
 8008004:	d901      	bls.n	800800a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8008006:	2303      	movs	r3, #3
 8008008:	e0b5      	b.n	8008176 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800800a:	4b3e      	ldr	r3, [pc, #248]	@ (8008104 <HAL_RCC_OscConfig+0x470>)
 800800c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800800e:	f003 0302 	and.w	r3, r3, #2
 8008012:	2b00      	cmp	r3, #0
 8008014:	d1ee      	bne.n	8007ff4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8008016:	7dfb      	ldrb	r3, [r7, #23]
 8008018:	2b01      	cmp	r3, #1
 800801a:	d105      	bne.n	8008028 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800801c:	4b39      	ldr	r3, [pc, #228]	@ (8008104 <HAL_RCC_OscConfig+0x470>)
 800801e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008020:	4a38      	ldr	r2, [pc, #224]	@ (8008104 <HAL_RCC_OscConfig+0x470>)
 8008022:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008026:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	699b      	ldr	r3, [r3, #24]
 800802c:	2b00      	cmp	r3, #0
 800802e:	f000 80a1 	beq.w	8008174 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8008032:	4b34      	ldr	r3, [pc, #208]	@ (8008104 <HAL_RCC_OscConfig+0x470>)
 8008034:	689b      	ldr	r3, [r3, #8]
 8008036:	f003 030c 	and.w	r3, r3, #12
 800803a:	2b08      	cmp	r3, #8
 800803c:	d05c      	beq.n	80080f8 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	699b      	ldr	r3, [r3, #24]
 8008042:	2b02      	cmp	r3, #2
 8008044:	d141      	bne.n	80080ca <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008046:	4b31      	ldr	r3, [pc, #196]	@ (800810c <HAL_RCC_OscConfig+0x478>)
 8008048:	2200      	movs	r2, #0
 800804a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800804c:	f7fd fc76 	bl	800593c <HAL_GetTick>
 8008050:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008052:	e008      	b.n	8008066 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008054:	f7fd fc72 	bl	800593c <HAL_GetTick>
 8008058:	4602      	mov	r2, r0
 800805a:	693b      	ldr	r3, [r7, #16]
 800805c:	1ad3      	subs	r3, r2, r3
 800805e:	2b02      	cmp	r3, #2
 8008060:	d901      	bls.n	8008066 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8008062:	2303      	movs	r3, #3
 8008064:	e087      	b.n	8008176 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008066:	4b27      	ldr	r3, [pc, #156]	@ (8008104 <HAL_RCC_OscConfig+0x470>)
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800806e:	2b00      	cmp	r3, #0
 8008070:	d1f0      	bne.n	8008054 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	69da      	ldr	r2, [r3, #28]
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	6a1b      	ldr	r3, [r3, #32]
 800807a:	431a      	orrs	r2, r3
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008080:	019b      	lsls	r3, r3, #6
 8008082:	431a      	orrs	r2, r3
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008088:	085b      	lsrs	r3, r3, #1
 800808a:	3b01      	subs	r3, #1
 800808c:	041b      	lsls	r3, r3, #16
 800808e:	431a      	orrs	r2, r3
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008094:	061b      	lsls	r3, r3, #24
 8008096:	491b      	ldr	r1, [pc, #108]	@ (8008104 <HAL_RCC_OscConfig+0x470>)
 8008098:	4313      	orrs	r3, r2
 800809a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800809c:	4b1b      	ldr	r3, [pc, #108]	@ (800810c <HAL_RCC_OscConfig+0x478>)
 800809e:	2201      	movs	r2, #1
 80080a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80080a2:	f7fd fc4b 	bl	800593c <HAL_GetTick>
 80080a6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80080a8:	e008      	b.n	80080bc <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80080aa:	f7fd fc47 	bl	800593c <HAL_GetTick>
 80080ae:	4602      	mov	r2, r0
 80080b0:	693b      	ldr	r3, [r7, #16]
 80080b2:	1ad3      	subs	r3, r2, r3
 80080b4:	2b02      	cmp	r3, #2
 80080b6:	d901      	bls.n	80080bc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80080b8:	2303      	movs	r3, #3
 80080ba:	e05c      	b.n	8008176 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80080bc:	4b11      	ldr	r3, [pc, #68]	@ (8008104 <HAL_RCC_OscConfig+0x470>)
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80080c4:	2b00      	cmp	r3, #0
 80080c6:	d0f0      	beq.n	80080aa <HAL_RCC_OscConfig+0x416>
 80080c8:	e054      	b.n	8008174 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80080ca:	4b10      	ldr	r3, [pc, #64]	@ (800810c <HAL_RCC_OscConfig+0x478>)
 80080cc:	2200      	movs	r2, #0
 80080ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80080d0:	f7fd fc34 	bl	800593c <HAL_GetTick>
 80080d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80080d6:	e008      	b.n	80080ea <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80080d8:	f7fd fc30 	bl	800593c <HAL_GetTick>
 80080dc:	4602      	mov	r2, r0
 80080de:	693b      	ldr	r3, [r7, #16]
 80080e0:	1ad3      	subs	r3, r2, r3
 80080e2:	2b02      	cmp	r3, #2
 80080e4:	d901      	bls.n	80080ea <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80080e6:	2303      	movs	r3, #3
 80080e8:	e045      	b.n	8008176 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80080ea:	4b06      	ldr	r3, [pc, #24]	@ (8008104 <HAL_RCC_OscConfig+0x470>)
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80080f2:	2b00      	cmp	r3, #0
 80080f4:	d1f0      	bne.n	80080d8 <HAL_RCC_OscConfig+0x444>
 80080f6:	e03d      	b.n	8008174 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	699b      	ldr	r3, [r3, #24]
 80080fc:	2b01      	cmp	r3, #1
 80080fe:	d107      	bne.n	8008110 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8008100:	2301      	movs	r3, #1
 8008102:	e038      	b.n	8008176 <HAL_RCC_OscConfig+0x4e2>
 8008104:	40023800 	.word	0x40023800
 8008108:	40007000 	.word	0x40007000
 800810c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8008110:	4b1b      	ldr	r3, [pc, #108]	@ (8008180 <HAL_RCC_OscConfig+0x4ec>)
 8008112:	685b      	ldr	r3, [r3, #4]
 8008114:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	699b      	ldr	r3, [r3, #24]
 800811a:	2b01      	cmp	r3, #1
 800811c:	d028      	beq.n	8008170 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800811e:	68fb      	ldr	r3, [r7, #12]
 8008120:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008128:	429a      	cmp	r2, r3
 800812a:	d121      	bne.n	8008170 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800812c:	68fb      	ldr	r3, [r7, #12]
 800812e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008136:	429a      	cmp	r2, r3
 8008138:	d11a      	bne.n	8008170 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800813a:	68fa      	ldr	r2, [r7, #12]
 800813c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8008140:	4013      	ands	r3, r2
 8008142:	687a      	ldr	r2, [r7, #4]
 8008144:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8008146:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8008148:	4293      	cmp	r3, r2
 800814a:	d111      	bne.n	8008170 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800814c:	68fb      	ldr	r3, [r7, #12]
 800814e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008156:	085b      	lsrs	r3, r3, #1
 8008158:	3b01      	subs	r3, #1
 800815a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800815c:	429a      	cmp	r2, r3
 800815e:	d107      	bne.n	8008170 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8008160:	68fb      	ldr	r3, [r7, #12]
 8008162:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800816a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800816c:	429a      	cmp	r2, r3
 800816e:	d001      	beq.n	8008174 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8008170:	2301      	movs	r3, #1
 8008172:	e000      	b.n	8008176 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8008174:	2300      	movs	r3, #0
}
 8008176:	4618      	mov	r0, r3
 8008178:	3718      	adds	r7, #24
 800817a:	46bd      	mov	sp, r7
 800817c:	bd80      	pop	{r7, pc}
 800817e:	bf00      	nop
 8008180:	40023800 	.word	0x40023800

08008184 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008184:	b580      	push	{r7, lr}
 8008186:	b084      	sub	sp, #16
 8008188:	af00      	add	r7, sp, #0
 800818a:	6078      	str	r0, [r7, #4]
 800818c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	2b00      	cmp	r3, #0
 8008192:	d101      	bne.n	8008198 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008194:	2301      	movs	r3, #1
 8008196:	e0cc      	b.n	8008332 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8008198:	4b68      	ldr	r3, [pc, #416]	@ (800833c <HAL_RCC_ClockConfig+0x1b8>)
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	f003 0307 	and.w	r3, r3, #7
 80081a0:	683a      	ldr	r2, [r7, #0]
 80081a2:	429a      	cmp	r2, r3
 80081a4:	d90c      	bls.n	80081c0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80081a6:	4b65      	ldr	r3, [pc, #404]	@ (800833c <HAL_RCC_ClockConfig+0x1b8>)
 80081a8:	683a      	ldr	r2, [r7, #0]
 80081aa:	b2d2      	uxtb	r2, r2
 80081ac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80081ae:	4b63      	ldr	r3, [pc, #396]	@ (800833c <HAL_RCC_ClockConfig+0x1b8>)
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	f003 0307 	and.w	r3, r3, #7
 80081b6:	683a      	ldr	r2, [r7, #0]
 80081b8:	429a      	cmp	r2, r3
 80081ba:	d001      	beq.n	80081c0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80081bc:	2301      	movs	r3, #1
 80081be:	e0b8      	b.n	8008332 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	f003 0302 	and.w	r3, r3, #2
 80081c8:	2b00      	cmp	r3, #0
 80081ca:	d020      	beq.n	800820e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	f003 0304 	and.w	r3, r3, #4
 80081d4:	2b00      	cmp	r3, #0
 80081d6:	d005      	beq.n	80081e4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80081d8:	4b59      	ldr	r3, [pc, #356]	@ (8008340 <HAL_RCC_ClockConfig+0x1bc>)
 80081da:	689b      	ldr	r3, [r3, #8]
 80081dc:	4a58      	ldr	r2, [pc, #352]	@ (8008340 <HAL_RCC_ClockConfig+0x1bc>)
 80081de:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80081e2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	f003 0308 	and.w	r3, r3, #8
 80081ec:	2b00      	cmp	r3, #0
 80081ee:	d005      	beq.n	80081fc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80081f0:	4b53      	ldr	r3, [pc, #332]	@ (8008340 <HAL_RCC_ClockConfig+0x1bc>)
 80081f2:	689b      	ldr	r3, [r3, #8]
 80081f4:	4a52      	ldr	r2, [pc, #328]	@ (8008340 <HAL_RCC_ClockConfig+0x1bc>)
 80081f6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80081fa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80081fc:	4b50      	ldr	r3, [pc, #320]	@ (8008340 <HAL_RCC_ClockConfig+0x1bc>)
 80081fe:	689b      	ldr	r3, [r3, #8]
 8008200:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	689b      	ldr	r3, [r3, #8]
 8008208:	494d      	ldr	r1, [pc, #308]	@ (8008340 <HAL_RCC_ClockConfig+0x1bc>)
 800820a:	4313      	orrs	r3, r2
 800820c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	681b      	ldr	r3, [r3, #0]
 8008212:	f003 0301 	and.w	r3, r3, #1
 8008216:	2b00      	cmp	r3, #0
 8008218:	d044      	beq.n	80082a4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	685b      	ldr	r3, [r3, #4]
 800821e:	2b01      	cmp	r3, #1
 8008220:	d107      	bne.n	8008232 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008222:	4b47      	ldr	r3, [pc, #284]	@ (8008340 <HAL_RCC_ClockConfig+0x1bc>)
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800822a:	2b00      	cmp	r3, #0
 800822c:	d119      	bne.n	8008262 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800822e:	2301      	movs	r3, #1
 8008230:	e07f      	b.n	8008332 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	685b      	ldr	r3, [r3, #4]
 8008236:	2b02      	cmp	r3, #2
 8008238:	d003      	beq.n	8008242 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800823e:	2b03      	cmp	r3, #3
 8008240:	d107      	bne.n	8008252 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008242:	4b3f      	ldr	r3, [pc, #252]	@ (8008340 <HAL_RCC_ClockConfig+0x1bc>)
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800824a:	2b00      	cmp	r3, #0
 800824c:	d109      	bne.n	8008262 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800824e:	2301      	movs	r3, #1
 8008250:	e06f      	b.n	8008332 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008252:	4b3b      	ldr	r3, [pc, #236]	@ (8008340 <HAL_RCC_ClockConfig+0x1bc>)
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	f003 0302 	and.w	r3, r3, #2
 800825a:	2b00      	cmp	r3, #0
 800825c:	d101      	bne.n	8008262 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800825e:	2301      	movs	r3, #1
 8008260:	e067      	b.n	8008332 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8008262:	4b37      	ldr	r3, [pc, #220]	@ (8008340 <HAL_RCC_ClockConfig+0x1bc>)
 8008264:	689b      	ldr	r3, [r3, #8]
 8008266:	f023 0203 	bic.w	r2, r3, #3
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	685b      	ldr	r3, [r3, #4]
 800826e:	4934      	ldr	r1, [pc, #208]	@ (8008340 <HAL_RCC_ClockConfig+0x1bc>)
 8008270:	4313      	orrs	r3, r2
 8008272:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8008274:	f7fd fb62 	bl	800593c <HAL_GetTick>
 8008278:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800827a:	e00a      	b.n	8008292 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800827c:	f7fd fb5e 	bl	800593c <HAL_GetTick>
 8008280:	4602      	mov	r2, r0
 8008282:	68fb      	ldr	r3, [r7, #12]
 8008284:	1ad3      	subs	r3, r2, r3
 8008286:	f241 3288 	movw	r2, #5000	@ 0x1388
 800828a:	4293      	cmp	r3, r2
 800828c:	d901      	bls.n	8008292 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800828e:	2303      	movs	r3, #3
 8008290:	e04f      	b.n	8008332 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008292:	4b2b      	ldr	r3, [pc, #172]	@ (8008340 <HAL_RCC_ClockConfig+0x1bc>)
 8008294:	689b      	ldr	r3, [r3, #8]
 8008296:	f003 020c 	and.w	r2, r3, #12
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	685b      	ldr	r3, [r3, #4]
 800829e:	009b      	lsls	r3, r3, #2
 80082a0:	429a      	cmp	r2, r3
 80082a2:	d1eb      	bne.n	800827c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80082a4:	4b25      	ldr	r3, [pc, #148]	@ (800833c <HAL_RCC_ClockConfig+0x1b8>)
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	f003 0307 	and.w	r3, r3, #7
 80082ac:	683a      	ldr	r2, [r7, #0]
 80082ae:	429a      	cmp	r2, r3
 80082b0:	d20c      	bcs.n	80082cc <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80082b2:	4b22      	ldr	r3, [pc, #136]	@ (800833c <HAL_RCC_ClockConfig+0x1b8>)
 80082b4:	683a      	ldr	r2, [r7, #0]
 80082b6:	b2d2      	uxtb	r2, r2
 80082b8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80082ba:	4b20      	ldr	r3, [pc, #128]	@ (800833c <HAL_RCC_ClockConfig+0x1b8>)
 80082bc:	681b      	ldr	r3, [r3, #0]
 80082be:	f003 0307 	and.w	r3, r3, #7
 80082c2:	683a      	ldr	r2, [r7, #0]
 80082c4:	429a      	cmp	r2, r3
 80082c6:	d001      	beq.n	80082cc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80082c8:	2301      	movs	r3, #1
 80082ca:	e032      	b.n	8008332 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	f003 0304 	and.w	r3, r3, #4
 80082d4:	2b00      	cmp	r3, #0
 80082d6:	d008      	beq.n	80082ea <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80082d8:	4b19      	ldr	r3, [pc, #100]	@ (8008340 <HAL_RCC_ClockConfig+0x1bc>)
 80082da:	689b      	ldr	r3, [r3, #8]
 80082dc:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	68db      	ldr	r3, [r3, #12]
 80082e4:	4916      	ldr	r1, [pc, #88]	@ (8008340 <HAL_RCC_ClockConfig+0x1bc>)
 80082e6:	4313      	orrs	r3, r2
 80082e8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	681b      	ldr	r3, [r3, #0]
 80082ee:	f003 0308 	and.w	r3, r3, #8
 80082f2:	2b00      	cmp	r3, #0
 80082f4:	d009      	beq.n	800830a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80082f6:	4b12      	ldr	r3, [pc, #72]	@ (8008340 <HAL_RCC_ClockConfig+0x1bc>)
 80082f8:	689b      	ldr	r3, [r3, #8]
 80082fa:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	691b      	ldr	r3, [r3, #16]
 8008302:	00db      	lsls	r3, r3, #3
 8008304:	490e      	ldr	r1, [pc, #56]	@ (8008340 <HAL_RCC_ClockConfig+0x1bc>)
 8008306:	4313      	orrs	r3, r2
 8008308:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800830a:	f000 f821 	bl	8008350 <HAL_RCC_GetSysClockFreq>
 800830e:	4602      	mov	r2, r0
 8008310:	4b0b      	ldr	r3, [pc, #44]	@ (8008340 <HAL_RCC_ClockConfig+0x1bc>)
 8008312:	689b      	ldr	r3, [r3, #8]
 8008314:	091b      	lsrs	r3, r3, #4
 8008316:	f003 030f 	and.w	r3, r3, #15
 800831a:	490a      	ldr	r1, [pc, #40]	@ (8008344 <HAL_RCC_ClockConfig+0x1c0>)
 800831c:	5ccb      	ldrb	r3, [r1, r3]
 800831e:	fa22 f303 	lsr.w	r3, r2, r3
 8008322:	4a09      	ldr	r2, [pc, #36]	@ (8008348 <HAL_RCC_ClockConfig+0x1c4>)
 8008324:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8008326:	4b09      	ldr	r3, [pc, #36]	@ (800834c <HAL_RCC_ClockConfig+0x1c8>)
 8008328:	681b      	ldr	r3, [r3, #0]
 800832a:	4618      	mov	r0, r3
 800832c:	f7fd fac2 	bl	80058b4 <HAL_InitTick>

  return HAL_OK;
 8008330:	2300      	movs	r3, #0
}
 8008332:	4618      	mov	r0, r3
 8008334:	3710      	adds	r7, #16
 8008336:	46bd      	mov	sp, r7
 8008338:	bd80      	pop	{r7, pc}
 800833a:	bf00      	nop
 800833c:	40023c00 	.word	0x40023c00
 8008340:	40023800 	.word	0x40023800
 8008344:	08015424 	.word	0x08015424
 8008348:	2000d114 	.word	0x2000d114
 800834c:	2000d118 	.word	0x2000d118

08008350 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008350:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008354:	b094      	sub	sp, #80	@ 0x50
 8008356:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8008358:	2300      	movs	r3, #0
 800835a:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 800835c:	2300      	movs	r3, #0
 800835e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8008360:	2300      	movs	r3, #0
 8008362:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8008364:	2300      	movs	r3, #0
 8008366:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008368:	4b79      	ldr	r3, [pc, #484]	@ (8008550 <HAL_RCC_GetSysClockFreq+0x200>)
 800836a:	689b      	ldr	r3, [r3, #8]
 800836c:	f003 030c 	and.w	r3, r3, #12
 8008370:	2b08      	cmp	r3, #8
 8008372:	d00d      	beq.n	8008390 <HAL_RCC_GetSysClockFreq+0x40>
 8008374:	2b08      	cmp	r3, #8
 8008376:	f200 80e1 	bhi.w	800853c <HAL_RCC_GetSysClockFreq+0x1ec>
 800837a:	2b00      	cmp	r3, #0
 800837c:	d002      	beq.n	8008384 <HAL_RCC_GetSysClockFreq+0x34>
 800837e:	2b04      	cmp	r3, #4
 8008380:	d003      	beq.n	800838a <HAL_RCC_GetSysClockFreq+0x3a>
 8008382:	e0db      	b.n	800853c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8008384:	4b73      	ldr	r3, [pc, #460]	@ (8008554 <HAL_RCC_GetSysClockFreq+0x204>)
 8008386:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8008388:	e0db      	b.n	8008542 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800838a:	4b73      	ldr	r3, [pc, #460]	@ (8008558 <HAL_RCC_GetSysClockFreq+0x208>)
 800838c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800838e:	e0d8      	b.n	8008542 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8008390:	4b6f      	ldr	r3, [pc, #444]	@ (8008550 <HAL_RCC_GetSysClockFreq+0x200>)
 8008392:	685b      	ldr	r3, [r3, #4]
 8008394:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008398:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800839a:	4b6d      	ldr	r3, [pc, #436]	@ (8008550 <HAL_RCC_GetSysClockFreq+0x200>)
 800839c:	685b      	ldr	r3, [r3, #4]
 800839e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80083a2:	2b00      	cmp	r3, #0
 80083a4:	d063      	beq.n	800846e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80083a6:	4b6a      	ldr	r3, [pc, #424]	@ (8008550 <HAL_RCC_GetSysClockFreq+0x200>)
 80083a8:	685b      	ldr	r3, [r3, #4]
 80083aa:	099b      	lsrs	r3, r3, #6
 80083ac:	2200      	movs	r2, #0
 80083ae:	63bb      	str	r3, [r7, #56]	@ 0x38
 80083b0:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80083b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80083b4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80083b8:	633b      	str	r3, [r7, #48]	@ 0x30
 80083ba:	2300      	movs	r3, #0
 80083bc:	637b      	str	r3, [r7, #52]	@ 0x34
 80083be:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80083c2:	4622      	mov	r2, r4
 80083c4:	462b      	mov	r3, r5
 80083c6:	f04f 0000 	mov.w	r0, #0
 80083ca:	f04f 0100 	mov.w	r1, #0
 80083ce:	0159      	lsls	r1, r3, #5
 80083d0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80083d4:	0150      	lsls	r0, r2, #5
 80083d6:	4602      	mov	r2, r0
 80083d8:	460b      	mov	r3, r1
 80083da:	4621      	mov	r1, r4
 80083dc:	1a51      	subs	r1, r2, r1
 80083de:	6139      	str	r1, [r7, #16]
 80083e0:	4629      	mov	r1, r5
 80083e2:	eb63 0301 	sbc.w	r3, r3, r1
 80083e6:	617b      	str	r3, [r7, #20]
 80083e8:	f04f 0200 	mov.w	r2, #0
 80083ec:	f04f 0300 	mov.w	r3, #0
 80083f0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80083f4:	4659      	mov	r1, fp
 80083f6:	018b      	lsls	r3, r1, #6
 80083f8:	4651      	mov	r1, sl
 80083fa:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80083fe:	4651      	mov	r1, sl
 8008400:	018a      	lsls	r2, r1, #6
 8008402:	4651      	mov	r1, sl
 8008404:	ebb2 0801 	subs.w	r8, r2, r1
 8008408:	4659      	mov	r1, fp
 800840a:	eb63 0901 	sbc.w	r9, r3, r1
 800840e:	f04f 0200 	mov.w	r2, #0
 8008412:	f04f 0300 	mov.w	r3, #0
 8008416:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800841a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800841e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8008422:	4690      	mov	r8, r2
 8008424:	4699      	mov	r9, r3
 8008426:	4623      	mov	r3, r4
 8008428:	eb18 0303 	adds.w	r3, r8, r3
 800842c:	60bb      	str	r3, [r7, #8]
 800842e:	462b      	mov	r3, r5
 8008430:	eb49 0303 	adc.w	r3, r9, r3
 8008434:	60fb      	str	r3, [r7, #12]
 8008436:	f04f 0200 	mov.w	r2, #0
 800843a:	f04f 0300 	mov.w	r3, #0
 800843e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8008442:	4629      	mov	r1, r5
 8008444:	024b      	lsls	r3, r1, #9
 8008446:	4621      	mov	r1, r4
 8008448:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800844c:	4621      	mov	r1, r4
 800844e:	024a      	lsls	r2, r1, #9
 8008450:	4610      	mov	r0, r2
 8008452:	4619      	mov	r1, r3
 8008454:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008456:	2200      	movs	r2, #0
 8008458:	62bb      	str	r3, [r7, #40]	@ 0x28
 800845a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800845c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8008460:	f7f8 fc2a 	bl	8000cb8 <__aeabi_uldivmod>
 8008464:	4602      	mov	r2, r0
 8008466:	460b      	mov	r3, r1
 8008468:	4613      	mov	r3, r2
 800846a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800846c:	e058      	b.n	8008520 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800846e:	4b38      	ldr	r3, [pc, #224]	@ (8008550 <HAL_RCC_GetSysClockFreq+0x200>)
 8008470:	685b      	ldr	r3, [r3, #4]
 8008472:	099b      	lsrs	r3, r3, #6
 8008474:	2200      	movs	r2, #0
 8008476:	4618      	mov	r0, r3
 8008478:	4611      	mov	r1, r2
 800847a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800847e:	623b      	str	r3, [r7, #32]
 8008480:	2300      	movs	r3, #0
 8008482:	627b      	str	r3, [r7, #36]	@ 0x24
 8008484:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8008488:	4642      	mov	r2, r8
 800848a:	464b      	mov	r3, r9
 800848c:	f04f 0000 	mov.w	r0, #0
 8008490:	f04f 0100 	mov.w	r1, #0
 8008494:	0159      	lsls	r1, r3, #5
 8008496:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800849a:	0150      	lsls	r0, r2, #5
 800849c:	4602      	mov	r2, r0
 800849e:	460b      	mov	r3, r1
 80084a0:	4641      	mov	r1, r8
 80084a2:	ebb2 0a01 	subs.w	sl, r2, r1
 80084a6:	4649      	mov	r1, r9
 80084a8:	eb63 0b01 	sbc.w	fp, r3, r1
 80084ac:	f04f 0200 	mov.w	r2, #0
 80084b0:	f04f 0300 	mov.w	r3, #0
 80084b4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80084b8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80084bc:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80084c0:	ebb2 040a 	subs.w	r4, r2, sl
 80084c4:	eb63 050b 	sbc.w	r5, r3, fp
 80084c8:	f04f 0200 	mov.w	r2, #0
 80084cc:	f04f 0300 	mov.w	r3, #0
 80084d0:	00eb      	lsls	r3, r5, #3
 80084d2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80084d6:	00e2      	lsls	r2, r4, #3
 80084d8:	4614      	mov	r4, r2
 80084da:	461d      	mov	r5, r3
 80084dc:	4643      	mov	r3, r8
 80084de:	18e3      	adds	r3, r4, r3
 80084e0:	603b      	str	r3, [r7, #0]
 80084e2:	464b      	mov	r3, r9
 80084e4:	eb45 0303 	adc.w	r3, r5, r3
 80084e8:	607b      	str	r3, [r7, #4]
 80084ea:	f04f 0200 	mov.w	r2, #0
 80084ee:	f04f 0300 	mov.w	r3, #0
 80084f2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80084f6:	4629      	mov	r1, r5
 80084f8:	028b      	lsls	r3, r1, #10
 80084fa:	4621      	mov	r1, r4
 80084fc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8008500:	4621      	mov	r1, r4
 8008502:	028a      	lsls	r2, r1, #10
 8008504:	4610      	mov	r0, r2
 8008506:	4619      	mov	r1, r3
 8008508:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800850a:	2200      	movs	r2, #0
 800850c:	61bb      	str	r3, [r7, #24]
 800850e:	61fa      	str	r2, [r7, #28]
 8008510:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008514:	f7f8 fbd0 	bl	8000cb8 <__aeabi_uldivmod>
 8008518:	4602      	mov	r2, r0
 800851a:	460b      	mov	r3, r1
 800851c:	4613      	mov	r3, r2
 800851e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8008520:	4b0b      	ldr	r3, [pc, #44]	@ (8008550 <HAL_RCC_GetSysClockFreq+0x200>)
 8008522:	685b      	ldr	r3, [r3, #4]
 8008524:	0c1b      	lsrs	r3, r3, #16
 8008526:	f003 0303 	and.w	r3, r3, #3
 800852a:	3301      	adds	r3, #1
 800852c:	005b      	lsls	r3, r3, #1
 800852e:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8008530:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8008532:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008534:	fbb2 f3f3 	udiv	r3, r2, r3
 8008538:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800853a:	e002      	b.n	8008542 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800853c:	4b05      	ldr	r3, [pc, #20]	@ (8008554 <HAL_RCC_GetSysClockFreq+0x204>)
 800853e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8008540:	bf00      	nop
    }
  }
  return sysclockfreq;
 8008542:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8008544:	4618      	mov	r0, r3
 8008546:	3750      	adds	r7, #80	@ 0x50
 8008548:	46bd      	mov	sp, r7
 800854a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800854e:	bf00      	nop
 8008550:	40023800 	.word	0x40023800
 8008554:	00f42400 	.word	0x00f42400
 8008558:	007a1200 	.word	0x007a1200

0800855c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800855c:	b480      	push	{r7}
 800855e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008560:	4b03      	ldr	r3, [pc, #12]	@ (8008570 <HAL_RCC_GetHCLKFreq+0x14>)
 8008562:	681b      	ldr	r3, [r3, #0]
}
 8008564:	4618      	mov	r0, r3
 8008566:	46bd      	mov	sp, r7
 8008568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800856c:	4770      	bx	lr
 800856e:	bf00      	nop
 8008570:	2000d114 	.word	0x2000d114

08008574 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008574:	b580      	push	{r7, lr}
 8008576:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8008578:	f7ff fff0 	bl	800855c <HAL_RCC_GetHCLKFreq>
 800857c:	4602      	mov	r2, r0
 800857e:	4b05      	ldr	r3, [pc, #20]	@ (8008594 <HAL_RCC_GetPCLK1Freq+0x20>)
 8008580:	689b      	ldr	r3, [r3, #8]
 8008582:	0a9b      	lsrs	r3, r3, #10
 8008584:	f003 0307 	and.w	r3, r3, #7
 8008588:	4903      	ldr	r1, [pc, #12]	@ (8008598 <HAL_RCC_GetPCLK1Freq+0x24>)
 800858a:	5ccb      	ldrb	r3, [r1, r3]
 800858c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008590:	4618      	mov	r0, r3
 8008592:	bd80      	pop	{r7, pc}
 8008594:	40023800 	.word	0x40023800
 8008598:	08015434 	.word	0x08015434

0800859c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800859c:	b580      	push	{r7, lr}
 800859e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80085a0:	f7ff ffdc 	bl	800855c <HAL_RCC_GetHCLKFreq>
 80085a4:	4602      	mov	r2, r0
 80085a6:	4b05      	ldr	r3, [pc, #20]	@ (80085bc <HAL_RCC_GetPCLK2Freq+0x20>)
 80085a8:	689b      	ldr	r3, [r3, #8]
 80085aa:	0b5b      	lsrs	r3, r3, #13
 80085ac:	f003 0307 	and.w	r3, r3, #7
 80085b0:	4903      	ldr	r1, [pc, #12]	@ (80085c0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80085b2:	5ccb      	ldrb	r3, [r1, r3]
 80085b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80085b8:	4618      	mov	r0, r3
 80085ba:	bd80      	pop	{r7, pc}
 80085bc:	40023800 	.word	0x40023800
 80085c0:	08015434 	.word	0x08015434

080085c4 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80085c4:	b580      	push	{r7, lr}
 80085c6:	b086      	sub	sp, #24
 80085c8:	af00      	add	r7, sp, #0
 80085ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80085cc:	2300      	movs	r3, #0
 80085ce:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80085d0:	2300      	movs	r3, #0
 80085d2:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	681b      	ldr	r3, [r3, #0]
 80085d8:	f003 0301 	and.w	r3, r3, #1
 80085dc:	2b00      	cmp	r3, #0
 80085de:	d105      	bne.n	80085ec <HAL_RCCEx_PeriphCLKConfig+0x28>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	f003 0304 	and.w	r3, r3, #4
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80085e8:	2b00      	cmp	r3, #0
 80085ea:	d038      	beq.n	800865e <HAL_RCCEx_PeriphCLKConfig+0x9a>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80085ec:	4b68      	ldr	r3, [pc, #416]	@ (8008790 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80085ee:	2200      	movs	r2, #0
 80085f0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80085f2:	f7fd f9a3 	bl	800593c <HAL_GetTick>
 80085f6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80085f8:	e008      	b.n	800860c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80085fa:	f7fd f99f 	bl	800593c <HAL_GetTick>
 80085fe:	4602      	mov	r2, r0
 8008600:	697b      	ldr	r3, [r7, #20]
 8008602:	1ad3      	subs	r3, r2, r3
 8008604:	2b02      	cmp	r3, #2
 8008606:	d901      	bls.n	800860c <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008608:	2303      	movs	r3, #3
 800860a:	e0bd      	b.n	8008788 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800860c:	4b61      	ldr	r3, [pc, #388]	@ (8008794 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800860e:	681b      	ldr	r3, [r3, #0]
 8008610:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008614:	2b00      	cmp	r3, #0
 8008616:	d1f0      	bne.n	80085fa <HAL_RCCEx_PeriphCLKConfig+0x36>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN,
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	685a      	ldr	r2, [r3, #4]
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	689b      	ldr	r3, [r3, #8]
 8008620:	019b      	lsls	r3, r3, #6
 8008622:	431a      	orrs	r2, r3
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	68db      	ldr	r3, [r3, #12]
 8008628:	071b      	lsls	r3, r3, #28
 800862a:	495a      	ldr	r1, [pc, #360]	@ (8008794 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800862c:	4313      	orrs	r3, r2
 800862e:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8008632:	4b57      	ldr	r3, [pc, #348]	@ (8008790 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8008634:	2201      	movs	r2, #1
 8008636:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8008638:	f7fd f980 	bl	800593c <HAL_GetTick>
 800863c:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800863e:	e008      	b.n	8008652 <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8008640:	f7fd f97c 	bl	800593c <HAL_GetTick>
 8008644:	4602      	mov	r2, r0
 8008646:	697b      	ldr	r3, [r7, #20]
 8008648:	1ad3      	subs	r3, r2, r3
 800864a:	2b02      	cmp	r3, #2
 800864c:	d901      	bls.n	8008652 <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800864e:	2303      	movs	r3, #3
 8008650:	e09a      	b.n	8008788 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8008652:	4b50      	ldr	r3, [pc, #320]	@ (8008794 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008654:	681b      	ldr	r3, [r3, #0]
 8008656:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800865a:	2b00      	cmp	r3, #0
 800865c:	d0f0      	beq.n	8008640 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	681b      	ldr	r3, [r3, #0]
 8008662:	f003 0302 	and.w	r3, r3, #2
 8008666:	2b00      	cmp	r3, #0
 8008668:	f000 8083 	beq.w	8008772 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800866c:	2300      	movs	r3, #0
 800866e:	60fb      	str	r3, [r7, #12]
 8008670:	4b48      	ldr	r3, [pc, #288]	@ (8008794 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008672:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008674:	4a47      	ldr	r2, [pc, #284]	@ (8008794 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008676:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800867a:	6413      	str	r3, [r2, #64]	@ 0x40
 800867c:	4b45      	ldr	r3, [pc, #276]	@ (8008794 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800867e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008680:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008684:	60fb      	str	r3, [r7, #12]
 8008686:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8008688:	4b43      	ldr	r3, [pc, #268]	@ (8008798 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	4a42      	ldr	r2, [pc, #264]	@ (8008798 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800868e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008692:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8008694:	f7fd f952 	bl	800593c <HAL_GetTick>
 8008698:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 800869a:	e008      	b.n	80086ae <HAL_RCCEx_PeriphCLKConfig+0xea>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800869c:	f7fd f94e 	bl	800593c <HAL_GetTick>
 80086a0:	4602      	mov	r2, r0
 80086a2:	697b      	ldr	r3, [r7, #20]
 80086a4:	1ad3      	subs	r3, r2, r3
 80086a6:	2b02      	cmp	r3, #2
 80086a8:	d901      	bls.n	80086ae <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        return HAL_TIMEOUT;
 80086aa:	2303      	movs	r3, #3
 80086ac:	e06c      	b.n	8008788 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 80086ae:	4b3a      	ldr	r3, [pc, #232]	@ (8008798 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80086b0:	681b      	ldr	r3, [r3, #0]
 80086b2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80086b6:	2b00      	cmp	r3, #0
 80086b8:	d0f0      	beq.n	800869c <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80086ba:	4b36      	ldr	r3, [pc, #216]	@ (8008794 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80086bc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80086be:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80086c2:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80086c4:	693b      	ldr	r3, [r7, #16]
 80086c6:	2b00      	cmp	r3, #0
 80086c8:	d02f      	beq.n	800872a <HAL_RCCEx_PeriphCLKConfig+0x166>
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	691b      	ldr	r3, [r3, #16]
 80086ce:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80086d2:	693a      	ldr	r2, [r7, #16]
 80086d4:	429a      	cmp	r2, r3
 80086d6:	d028      	beq.n	800872a <HAL_RCCEx_PeriphCLKConfig+0x166>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80086d8:	4b2e      	ldr	r3, [pc, #184]	@ (8008794 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80086da:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80086dc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80086e0:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80086e2:	4b2e      	ldr	r3, [pc, #184]	@ (800879c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80086e4:	2201      	movs	r2, #1
 80086e6:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80086e8:	4b2c      	ldr	r3, [pc, #176]	@ (800879c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80086ea:	2200      	movs	r2, #0
 80086ec:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80086ee:	4a29      	ldr	r2, [pc, #164]	@ (8008794 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80086f0:	693b      	ldr	r3, [r7, #16]
 80086f2:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80086f4:	4b27      	ldr	r3, [pc, #156]	@ (8008794 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80086f6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80086f8:	f003 0301 	and.w	r3, r3, #1
 80086fc:	2b01      	cmp	r3, #1
 80086fe:	d114      	bne.n	800872a <HAL_RCCEx_PeriphCLKConfig+0x166>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8008700:	f7fd f91c 	bl	800593c <HAL_GetTick>
 8008704:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008706:	e00a      	b.n	800871e <HAL_RCCEx_PeriphCLKConfig+0x15a>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008708:	f7fd f918 	bl	800593c <HAL_GetTick>
 800870c:	4602      	mov	r2, r0
 800870e:	697b      	ldr	r3, [r7, #20]
 8008710:	1ad3      	subs	r3, r2, r3
 8008712:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008716:	4293      	cmp	r3, r2
 8008718:	d901      	bls.n	800871e <HAL_RCCEx_PeriphCLKConfig+0x15a>
          {
            return HAL_TIMEOUT;
 800871a:	2303      	movs	r3, #3
 800871c:	e034      	b.n	8008788 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800871e:	4b1d      	ldr	r3, [pc, #116]	@ (8008794 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008720:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008722:	f003 0302 	and.w	r3, r3, #2
 8008726:	2b00      	cmp	r3, #0
 8008728:	d0ee      	beq.n	8008708 <HAL_RCCEx_PeriphCLKConfig+0x144>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	691b      	ldr	r3, [r3, #16]
 800872e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008732:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008736:	d10d      	bne.n	8008754 <HAL_RCCEx_PeriphCLKConfig+0x190>
 8008738:	4b16      	ldr	r3, [pc, #88]	@ (8008794 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800873a:	689b      	ldr	r3, [r3, #8]
 800873c:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	691b      	ldr	r3, [r3, #16]
 8008744:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8008748:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800874c:	4911      	ldr	r1, [pc, #68]	@ (8008794 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800874e:	4313      	orrs	r3, r2
 8008750:	608b      	str	r3, [r1, #8]
 8008752:	e005      	b.n	8008760 <HAL_RCCEx_PeriphCLKConfig+0x19c>
 8008754:	4b0f      	ldr	r3, [pc, #60]	@ (8008794 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008756:	689b      	ldr	r3, [r3, #8]
 8008758:	4a0e      	ldr	r2, [pc, #56]	@ (8008794 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800875a:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 800875e:	6093      	str	r3, [r2, #8]
 8008760:	4b0c      	ldr	r3, [pc, #48]	@ (8008794 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008762:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	691b      	ldr	r3, [r3, #16]
 8008768:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800876c:	4909      	ldr	r1, [pc, #36]	@ (8008794 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800876e:	4313      	orrs	r3, r2
 8008770:	670b      	str	r3, [r1, #112]	@ 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	f003 0308 	and.w	r3, r3, #8
 800877a:	2b00      	cmp	r3, #0
 800877c:	d003      	beq.n	8008786 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	7d1a      	ldrb	r2, [r3, #20]
 8008782:	4b07      	ldr	r3, [pc, #28]	@ (80087a0 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 8008784:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8008786:	2300      	movs	r3, #0
}
 8008788:	4618      	mov	r0, r3
 800878a:	3718      	adds	r7, #24
 800878c:	46bd      	mov	sp, r7
 800878e:	bd80      	pop	{r7, pc}
 8008790:	42470068 	.word	0x42470068
 8008794:	40023800 	.word	0x40023800
 8008798:	40007000 	.word	0x40007000
 800879c:	42470e40 	.word	0x42470e40
 80087a0:	424711e0 	.word	0x424711e0

080087a4 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80087a4:	b480      	push	{r7}
 80087a6:	b087      	sub	sp, #28
 80087a8:	af00      	add	r7, sp, #0
 80087aa:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 80087ac:	2300      	movs	r3, #0
 80087ae:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 80087b0:	2300      	movs	r3, #0
 80087b2:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 80087b4:	2300      	movs	r3, #0
 80087b6:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 80087b8:	2300      	movs	r3, #0
 80087ba:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	2b01      	cmp	r3, #1
 80087c0:	d141      	bne.n	8008846 <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
  {
    case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 80087c2:	4b25      	ldr	r3, [pc, #148]	@ (8008858 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 80087c4:	689b      	ldr	r3, [r3, #8]
 80087c6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80087ca:	60fb      	str	r3, [r7, #12]
      switch (srcclk)
 80087cc:	68fb      	ldr	r3, [r7, #12]
 80087ce:	2b00      	cmp	r3, #0
 80087d0:	d006      	beq.n	80087e0 <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
 80087d2:	68fb      	ldr	r3, [r7, #12]
 80087d4:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80087d8:	d131      	bne.n	800883e <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
      {
        /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
        case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 80087da:	4b20      	ldr	r3, [pc, #128]	@ (800885c <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 80087dc:	617b      	str	r3, [r7, #20]
          break;
 80087de:	e031      	b.n	8008844 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
        case RCC_I2SCLKSOURCE_PLLI2S:
        {
#if defined(STM32F411xE)
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
          if ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80087e0:	4b1d      	ldr	r3, [pc, #116]	@ (8008858 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 80087e2:	685b      	ldr	r3, [r3, #4]
 80087e4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80087e8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80087ec:	d109      	bne.n	8008802 <HAL_RCCEx_GetPeriphCLKFreq+0x5e>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 80087ee:	4b1a      	ldr	r3, [pc, #104]	@ (8008858 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 80087f0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80087f4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80087f8:	4a19      	ldr	r2, [pc, #100]	@ (8008860 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
 80087fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80087fe:	613b      	str	r3, [r7, #16]
 8008800:	e008      	b.n	8008814 <HAL_RCCEx_GetPeriphCLKFreq+0x70>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8008802:	4b15      	ldr	r3, [pc, #84]	@ (8008858 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8008804:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008808:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800880c:	4a15      	ldr	r2, [pc, #84]	@ (8008864 <HAL_RCCEx_GetPeriphCLKFreq+0xc0>)
 800880e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008812:	613b      	str	r3, [r7, #16]
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8008814:	4b10      	ldr	r3, [pc, #64]	@ (8008858 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8008816:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800881a:	099b      	lsrs	r3, r3, #6
 800881c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008820:	693b      	ldr	r3, [r7, #16]
 8008822:	fb02 f303 	mul.w	r3, r2, r3
 8008826:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput / (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8008828:	4b0b      	ldr	r3, [pc, #44]	@ (8008858 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 800882a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800882e:	0f1b      	lsrs	r3, r3, #28
 8008830:	f003 0307 	and.w	r3, r3, #7
 8008834:	68ba      	ldr	r2, [r7, #8]
 8008836:	fbb2 f3f3 	udiv	r3, r2, r3
 800883a:	617b      	str	r3, [r7, #20]
          break;
 800883c:	e002      	b.n	8008844 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
        }
        /* Clock not enabled for I2S*/
        default:
        {
          frequency = 0U;
 800883e:	2300      	movs	r3, #0
 8008840:	617b      	str	r3, [r7, #20]
          break;
 8008842:	bf00      	nop
        }
      }
      break;
 8008844:	e000      	b.n	8008848 <HAL_RCCEx_GetPeriphCLKFreq+0xa4>
    }
    default:
    {
      break;
 8008846:	bf00      	nop
    }
  }
  return frequency;
 8008848:	697b      	ldr	r3, [r7, #20]
}
 800884a:	4618      	mov	r0, r3
 800884c:	371c      	adds	r7, #28
 800884e:	46bd      	mov	sp, r7
 8008850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008854:	4770      	bx	lr
 8008856:	bf00      	nop
 8008858:	40023800 	.word	0x40023800
 800885c:	00bb8000 	.word	0x00bb8000
 8008860:	007a1200 	.word	0x007a1200
 8008864:	00f42400 	.word	0x00f42400

08008868 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008868:	b580      	push	{r7, lr}
 800886a:	b082      	sub	sp, #8
 800886c:	af00      	add	r7, sp, #0
 800886e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	2b00      	cmp	r3, #0
 8008874:	d101      	bne.n	800887a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8008876:	2301      	movs	r3, #1
 8008878:	e07b      	b.n	8008972 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800887e:	2b00      	cmp	r3, #0
 8008880:	d108      	bne.n	8008894 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	685b      	ldr	r3, [r3, #4]
 8008886:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800888a:	d009      	beq.n	80088a0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	2200      	movs	r2, #0
 8008890:	61da      	str	r2, [r3, #28]
 8008892:	e005      	b.n	80088a0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	2200      	movs	r2, #0
 8008898:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	2200      	movs	r2, #0
 800889e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	2200      	movs	r2, #0
 80088a4:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80088ac:	b2db      	uxtb	r3, r3
 80088ae:	2b00      	cmp	r3, #0
 80088b0:	d106      	bne.n	80088c0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	2200      	movs	r2, #0
 80088b6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80088ba:	6878      	ldr	r0, [r7, #4]
 80088bc:	f7fc fa40 	bl	8004d40 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	2202      	movs	r2, #2
 80088c4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	681b      	ldr	r3, [r3, #0]
 80088cc:	681a      	ldr	r2, [r3, #0]
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	681b      	ldr	r3, [r3, #0]
 80088d2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80088d6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	685b      	ldr	r3, [r3, #4]
 80088dc:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	689b      	ldr	r3, [r3, #8]
 80088e4:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80088e8:	431a      	orrs	r2, r3
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	68db      	ldr	r3, [r3, #12]
 80088ee:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80088f2:	431a      	orrs	r2, r3
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	691b      	ldr	r3, [r3, #16]
 80088f8:	f003 0302 	and.w	r3, r3, #2
 80088fc:	431a      	orrs	r2, r3
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	695b      	ldr	r3, [r3, #20]
 8008902:	f003 0301 	and.w	r3, r3, #1
 8008906:	431a      	orrs	r2, r3
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	699b      	ldr	r3, [r3, #24]
 800890c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008910:	431a      	orrs	r2, r3
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	69db      	ldr	r3, [r3, #28]
 8008916:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800891a:	431a      	orrs	r2, r3
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	6a1b      	ldr	r3, [r3, #32]
 8008920:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008924:	ea42 0103 	orr.w	r1, r2, r3
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800892c:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	681b      	ldr	r3, [r3, #0]
 8008934:	430a      	orrs	r2, r1
 8008936:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	699b      	ldr	r3, [r3, #24]
 800893c:	0c1b      	lsrs	r3, r3, #16
 800893e:	f003 0104 	and.w	r1, r3, #4
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008946:	f003 0210 	and.w	r2, r3, #16
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	681b      	ldr	r3, [r3, #0]
 800894e:	430a      	orrs	r2, r1
 8008950:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	681b      	ldr	r3, [r3, #0]
 8008956:	69da      	ldr	r2, [r3, #28]
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	681b      	ldr	r3, [r3, #0]
 800895c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8008960:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	2200      	movs	r2, #0
 8008966:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	2201      	movs	r2, #1
 800896c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8008970:	2300      	movs	r3, #0
}
 8008972:	4618      	mov	r0, r3
 8008974:	3708      	adds	r7, #8
 8008976:	46bd      	mov	sp, r7
 8008978:	bd80      	pop	{r7, pc}

0800897a <HAL_SPI_Transmit>:
  * @param  Size amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800897a:	b580      	push	{r7, lr}
 800897c:	b088      	sub	sp, #32
 800897e:	af00      	add	r7, sp, #0
 8008980:	60f8      	str	r0, [r7, #12]
 8008982:	60b9      	str	r1, [r7, #8]
 8008984:	603b      	str	r3, [r7, #0]
 8008986:	4613      	mov	r3, r2
 8008988:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800898a:	f7fc ffd7 	bl	800593c <HAL_GetTick>
 800898e:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8008990:	88fb      	ldrh	r3, [r7, #6]
 8008992:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8008994:	68fb      	ldr	r3, [r7, #12]
 8008996:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800899a:	b2db      	uxtb	r3, r3
 800899c:	2b01      	cmp	r3, #1
 800899e:	d001      	beq.n	80089a4 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 80089a0:	2302      	movs	r3, #2
 80089a2:	e12a      	b.n	8008bfa <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 80089a4:	68bb      	ldr	r3, [r7, #8]
 80089a6:	2b00      	cmp	r3, #0
 80089a8:	d002      	beq.n	80089b0 <HAL_SPI_Transmit+0x36>
 80089aa:	88fb      	ldrh	r3, [r7, #6]
 80089ac:	2b00      	cmp	r3, #0
 80089ae:	d101      	bne.n	80089b4 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 80089b0:	2301      	movs	r3, #1
 80089b2:	e122      	b.n	8008bfa <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80089b4:	68fb      	ldr	r3, [r7, #12]
 80089b6:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80089ba:	2b01      	cmp	r3, #1
 80089bc:	d101      	bne.n	80089c2 <HAL_SPI_Transmit+0x48>
 80089be:	2302      	movs	r3, #2
 80089c0:	e11b      	b.n	8008bfa <HAL_SPI_Transmit+0x280>
 80089c2:	68fb      	ldr	r3, [r7, #12]
 80089c4:	2201      	movs	r2, #1
 80089c6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80089ca:	68fb      	ldr	r3, [r7, #12]
 80089cc:	2203      	movs	r2, #3
 80089ce:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80089d2:	68fb      	ldr	r3, [r7, #12]
 80089d4:	2200      	movs	r2, #0
 80089d6:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 80089d8:	68fb      	ldr	r3, [r7, #12]
 80089da:	68ba      	ldr	r2, [r7, #8]
 80089dc:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 80089de:	68fb      	ldr	r3, [r7, #12]
 80089e0:	88fa      	ldrh	r2, [r7, #6]
 80089e2:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 80089e4:	68fb      	ldr	r3, [r7, #12]
 80089e6:	88fa      	ldrh	r2, [r7, #6]
 80089e8:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80089ea:	68fb      	ldr	r3, [r7, #12]
 80089ec:	2200      	movs	r2, #0
 80089ee:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 80089f0:	68fb      	ldr	r3, [r7, #12]
 80089f2:	2200      	movs	r2, #0
 80089f4:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 80089f6:	68fb      	ldr	r3, [r7, #12]
 80089f8:	2200      	movs	r2, #0
 80089fa:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 80089fc:	68fb      	ldr	r3, [r7, #12]
 80089fe:	2200      	movs	r2, #0
 8008a00:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8008a02:	68fb      	ldr	r3, [r7, #12]
 8008a04:	2200      	movs	r2, #0
 8008a06:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008a08:	68fb      	ldr	r3, [r7, #12]
 8008a0a:	689b      	ldr	r3, [r3, #8]
 8008a0c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008a10:	d10f      	bne.n	8008a32 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8008a12:	68fb      	ldr	r3, [r7, #12]
 8008a14:	681b      	ldr	r3, [r3, #0]
 8008a16:	681a      	ldr	r2, [r3, #0]
 8008a18:	68fb      	ldr	r3, [r7, #12]
 8008a1a:	681b      	ldr	r3, [r3, #0]
 8008a1c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008a20:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8008a22:	68fb      	ldr	r3, [r7, #12]
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	681a      	ldr	r2, [r3, #0]
 8008a28:	68fb      	ldr	r3, [r7, #12]
 8008a2a:	681b      	ldr	r3, [r3, #0]
 8008a2c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8008a30:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008a32:	68fb      	ldr	r3, [r7, #12]
 8008a34:	681b      	ldr	r3, [r3, #0]
 8008a36:	681b      	ldr	r3, [r3, #0]
 8008a38:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008a3c:	2b40      	cmp	r3, #64	@ 0x40
 8008a3e:	d007      	beq.n	8008a50 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008a40:	68fb      	ldr	r3, [r7, #12]
 8008a42:	681b      	ldr	r3, [r3, #0]
 8008a44:	681a      	ldr	r2, [r3, #0]
 8008a46:	68fb      	ldr	r3, [r7, #12]
 8008a48:	681b      	ldr	r3, [r3, #0]
 8008a4a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008a4e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8008a50:	68fb      	ldr	r3, [r7, #12]
 8008a52:	68db      	ldr	r3, [r3, #12]
 8008a54:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008a58:	d152      	bne.n	8008b00 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008a5a:	68fb      	ldr	r3, [r7, #12]
 8008a5c:	685b      	ldr	r3, [r3, #4]
 8008a5e:	2b00      	cmp	r3, #0
 8008a60:	d002      	beq.n	8008a68 <HAL_SPI_Transmit+0xee>
 8008a62:	8b7b      	ldrh	r3, [r7, #26]
 8008a64:	2b01      	cmp	r3, #1
 8008a66:	d145      	bne.n	8008af4 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8008a68:	68fb      	ldr	r3, [r7, #12]
 8008a6a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008a6c:	881a      	ldrh	r2, [r3, #0]
 8008a6e:	68fb      	ldr	r3, [r7, #12]
 8008a70:	681b      	ldr	r3, [r3, #0]
 8008a72:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8008a74:	68fb      	ldr	r3, [r7, #12]
 8008a76:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008a78:	1c9a      	adds	r2, r3, #2
 8008a7a:	68fb      	ldr	r3, [r7, #12]
 8008a7c:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8008a7e:	68fb      	ldr	r3, [r7, #12]
 8008a80:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008a82:	b29b      	uxth	r3, r3
 8008a84:	3b01      	subs	r3, #1
 8008a86:	b29a      	uxth	r2, r3
 8008a88:	68fb      	ldr	r3, [r7, #12]
 8008a8a:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8008a8c:	e032      	b.n	8008af4 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8008a8e:	68fb      	ldr	r3, [r7, #12]
 8008a90:	681b      	ldr	r3, [r3, #0]
 8008a92:	689b      	ldr	r3, [r3, #8]
 8008a94:	f003 0302 	and.w	r3, r3, #2
 8008a98:	2b02      	cmp	r3, #2
 8008a9a:	d112      	bne.n	8008ac2 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8008a9c:	68fb      	ldr	r3, [r7, #12]
 8008a9e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008aa0:	881a      	ldrh	r2, [r3, #0]
 8008aa2:	68fb      	ldr	r3, [r7, #12]
 8008aa4:	681b      	ldr	r3, [r3, #0]
 8008aa6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008aa8:	68fb      	ldr	r3, [r7, #12]
 8008aaa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008aac:	1c9a      	adds	r2, r3, #2
 8008aae:	68fb      	ldr	r3, [r7, #12]
 8008ab0:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8008ab2:	68fb      	ldr	r3, [r7, #12]
 8008ab4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008ab6:	b29b      	uxth	r3, r3
 8008ab8:	3b01      	subs	r3, #1
 8008aba:	b29a      	uxth	r2, r3
 8008abc:	68fb      	ldr	r3, [r7, #12]
 8008abe:	86da      	strh	r2, [r3, #54]	@ 0x36
 8008ac0:	e018      	b.n	8008af4 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008ac2:	f7fc ff3b 	bl	800593c <HAL_GetTick>
 8008ac6:	4602      	mov	r2, r0
 8008ac8:	69fb      	ldr	r3, [r7, #28]
 8008aca:	1ad3      	subs	r3, r2, r3
 8008acc:	683a      	ldr	r2, [r7, #0]
 8008ace:	429a      	cmp	r2, r3
 8008ad0:	d803      	bhi.n	8008ada <HAL_SPI_Transmit+0x160>
 8008ad2:	683b      	ldr	r3, [r7, #0]
 8008ad4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008ad8:	d102      	bne.n	8008ae0 <HAL_SPI_Transmit+0x166>
 8008ada:	683b      	ldr	r3, [r7, #0]
 8008adc:	2b00      	cmp	r3, #0
 8008ade:	d109      	bne.n	8008af4 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8008ae0:	68fb      	ldr	r3, [r7, #12]
 8008ae2:	2201      	movs	r2, #1
 8008ae4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8008ae8:	68fb      	ldr	r3, [r7, #12]
 8008aea:	2200      	movs	r2, #0
 8008aec:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8008af0:	2303      	movs	r3, #3
 8008af2:	e082      	b.n	8008bfa <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8008af4:	68fb      	ldr	r3, [r7, #12]
 8008af6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008af8:	b29b      	uxth	r3, r3
 8008afa:	2b00      	cmp	r3, #0
 8008afc:	d1c7      	bne.n	8008a8e <HAL_SPI_Transmit+0x114>
 8008afe:	e053      	b.n	8008ba8 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008b00:	68fb      	ldr	r3, [r7, #12]
 8008b02:	685b      	ldr	r3, [r3, #4]
 8008b04:	2b00      	cmp	r3, #0
 8008b06:	d002      	beq.n	8008b0e <HAL_SPI_Transmit+0x194>
 8008b08:	8b7b      	ldrh	r3, [r7, #26]
 8008b0a:	2b01      	cmp	r3, #1
 8008b0c:	d147      	bne.n	8008b9e <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8008b0e:	68fb      	ldr	r3, [r7, #12]
 8008b10:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008b12:	68fb      	ldr	r3, [r7, #12]
 8008b14:	681b      	ldr	r3, [r3, #0]
 8008b16:	330c      	adds	r3, #12
 8008b18:	7812      	ldrb	r2, [r2, #0]
 8008b1a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8008b1c:	68fb      	ldr	r3, [r7, #12]
 8008b1e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008b20:	1c5a      	adds	r2, r3, #1
 8008b22:	68fb      	ldr	r3, [r7, #12]
 8008b24:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8008b26:	68fb      	ldr	r3, [r7, #12]
 8008b28:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008b2a:	b29b      	uxth	r3, r3
 8008b2c:	3b01      	subs	r3, #1
 8008b2e:	b29a      	uxth	r2, r3
 8008b30:	68fb      	ldr	r3, [r7, #12]
 8008b32:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8008b34:	e033      	b.n	8008b9e <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8008b36:	68fb      	ldr	r3, [r7, #12]
 8008b38:	681b      	ldr	r3, [r3, #0]
 8008b3a:	689b      	ldr	r3, [r3, #8]
 8008b3c:	f003 0302 	and.w	r3, r3, #2
 8008b40:	2b02      	cmp	r3, #2
 8008b42:	d113      	bne.n	8008b6c <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8008b44:	68fb      	ldr	r3, [r7, #12]
 8008b46:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008b48:	68fb      	ldr	r3, [r7, #12]
 8008b4a:	681b      	ldr	r3, [r3, #0]
 8008b4c:	330c      	adds	r3, #12
 8008b4e:	7812      	ldrb	r2, [r2, #0]
 8008b50:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8008b52:	68fb      	ldr	r3, [r7, #12]
 8008b54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008b56:	1c5a      	adds	r2, r3, #1
 8008b58:	68fb      	ldr	r3, [r7, #12]
 8008b5a:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8008b5c:	68fb      	ldr	r3, [r7, #12]
 8008b5e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008b60:	b29b      	uxth	r3, r3
 8008b62:	3b01      	subs	r3, #1
 8008b64:	b29a      	uxth	r2, r3
 8008b66:	68fb      	ldr	r3, [r7, #12]
 8008b68:	86da      	strh	r2, [r3, #54]	@ 0x36
 8008b6a:	e018      	b.n	8008b9e <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008b6c:	f7fc fee6 	bl	800593c <HAL_GetTick>
 8008b70:	4602      	mov	r2, r0
 8008b72:	69fb      	ldr	r3, [r7, #28]
 8008b74:	1ad3      	subs	r3, r2, r3
 8008b76:	683a      	ldr	r2, [r7, #0]
 8008b78:	429a      	cmp	r2, r3
 8008b7a:	d803      	bhi.n	8008b84 <HAL_SPI_Transmit+0x20a>
 8008b7c:	683b      	ldr	r3, [r7, #0]
 8008b7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b82:	d102      	bne.n	8008b8a <HAL_SPI_Transmit+0x210>
 8008b84:	683b      	ldr	r3, [r7, #0]
 8008b86:	2b00      	cmp	r3, #0
 8008b88:	d109      	bne.n	8008b9e <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8008b8a:	68fb      	ldr	r3, [r7, #12]
 8008b8c:	2201      	movs	r2, #1
 8008b8e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8008b92:	68fb      	ldr	r3, [r7, #12]
 8008b94:	2200      	movs	r2, #0
 8008b96:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8008b9a:	2303      	movs	r3, #3
 8008b9c:	e02d      	b.n	8008bfa <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8008b9e:	68fb      	ldr	r3, [r7, #12]
 8008ba0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008ba2:	b29b      	uxth	r3, r3
 8008ba4:	2b00      	cmp	r3, #0
 8008ba6:	d1c6      	bne.n	8008b36 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008ba8:	69fa      	ldr	r2, [r7, #28]
 8008baa:	6839      	ldr	r1, [r7, #0]
 8008bac:	68f8      	ldr	r0, [r7, #12]
 8008bae:	f000 fa59 	bl	8009064 <SPI_EndRxTxTransaction>
 8008bb2:	4603      	mov	r3, r0
 8008bb4:	2b00      	cmp	r3, #0
 8008bb6:	d002      	beq.n	8008bbe <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008bb8:	68fb      	ldr	r3, [r7, #12]
 8008bba:	2220      	movs	r2, #32
 8008bbc:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8008bbe:	68fb      	ldr	r3, [r7, #12]
 8008bc0:	689b      	ldr	r3, [r3, #8]
 8008bc2:	2b00      	cmp	r3, #0
 8008bc4:	d10a      	bne.n	8008bdc <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008bc6:	2300      	movs	r3, #0
 8008bc8:	617b      	str	r3, [r7, #20]
 8008bca:	68fb      	ldr	r3, [r7, #12]
 8008bcc:	681b      	ldr	r3, [r3, #0]
 8008bce:	68db      	ldr	r3, [r3, #12]
 8008bd0:	617b      	str	r3, [r7, #20]
 8008bd2:	68fb      	ldr	r3, [r7, #12]
 8008bd4:	681b      	ldr	r3, [r3, #0]
 8008bd6:	689b      	ldr	r3, [r3, #8]
 8008bd8:	617b      	str	r3, [r7, #20]
 8008bda:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8008bdc:	68fb      	ldr	r3, [r7, #12]
 8008bde:	2201      	movs	r2, #1
 8008be0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8008be4:	68fb      	ldr	r3, [r7, #12]
 8008be6:	2200      	movs	r2, #0
 8008be8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008bec:	68fb      	ldr	r3, [r7, #12]
 8008bee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008bf0:	2b00      	cmp	r3, #0
 8008bf2:	d001      	beq.n	8008bf8 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8008bf4:	2301      	movs	r3, #1
 8008bf6:	e000      	b.n	8008bfa <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8008bf8:	2300      	movs	r3, #0
  }
}
 8008bfa:	4618      	mov	r0, r3
 8008bfc:	3720      	adds	r7, #32
 8008bfe:	46bd      	mov	sp, r7
 8008c00:	bd80      	pop	{r7, pc}

08008c02 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8008c02:	b580      	push	{r7, lr}
 8008c04:	b08a      	sub	sp, #40	@ 0x28
 8008c06:	af00      	add	r7, sp, #0
 8008c08:	60f8      	str	r0, [r7, #12]
 8008c0a:	60b9      	str	r1, [r7, #8]
 8008c0c:	607a      	str	r2, [r7, #4]
 8008c0e:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8008c10:	2301      	movs	r3, #1
 8008c12:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008c14:	f7fc fe92 	bl	800593c <HAL_GetTick>
 8008c18:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8008c1a:	68fb      	ldr	r3, [r7, #12]
 8008c1c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8008c20:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8008c22:	68fb      	ldr	r3, [r7, #12]
 8008c24:	685b      	ldr	r3, [r3, #4]
 8008c26:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8008c28:	887b      	ldrh	r3, [r7, #2]
 8008c2a:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8008c2c:	7ffb      	ldrb	r3, [r7, #31]
 8008c2e:	2b01      	cmp	r3, #1
 8008c30:	d00c      	beq.n	8008c4c <HAL_SPI_TransmitReceive+0x4a>
 8008c32:	69bb      	ldr	r3, [r7, #24]
 8008c34:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8008c38:	d106      	bne.n	8008c48 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8008c3a:	68fb      	ldr	r3, [r7, #12]
 8008c3c:	689b      	ldr	r3, [r3, #8]
 8008c3e:	2b00      	cmp	r3, #0
 8008c40:	d102      	bne.n	8008c48 <HAL_SPI_TransmitReceive+0x46>
 8008c42:	7ffb      	ldrb	r3, [r7, #31]
 8008c44:	2b04      	cmp	r3, #4
 8008c46:	d001      	beq.n	8008c4c <HAL_SPI_TransmitReceive+0x4a>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8008c48:	2302      	movs	r3, #2
 8008c4a:	e17f      	b.n	8008f4c <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8008c4c:	68bb      	ldr	r3, [r7, #8]
 8008c4e:	2b00      	cmp	r3, #0
 8008c50:	d005      	beq.n	8008c5e <HAL_SPI_TransmitReceive+0x5c>
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	2b00      	cmp	r3, #0
 8008c56:	d002      	beq.n	8008c5e <HAL_SPI_TransmitReceive+0x5c>
 8008c58:	887b      	ldrh	r3, [r7, #2]
 8008c5a:	2b00      	cmp	r3, #0
 8008c5c:	d101      	bne.n	8008c62 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 8008c5e:	2301      	movs	r3, #1
 8008c60:	e174      	b.n	8008f4c <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008c62:	68fb      	ldr	r3, [r7, #12]
 8008c64:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8008c68:	2b01      	cmp	r3, #1
 8008c6a:	d101      	bne.n	8008c70 <HAL_SPI_TransmitReceive+0x6e>
 8008c6c:	2302      	movs	r3, #2
 8008c6e:	e16d      	b.n	8008f4c <HAL_SPI_TransmitReceive+0x34a>
 8008c70:	68fb      	ldr	r3, [r7, #12]
 8008c72:	2201      	movs	r2, #1
 8008c74:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8008c78:	68fb      	ldr	r3, [r7, #12]
 8008c7a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8008c7e:	b2db      	uxtb	r3, r3
 8008c80:	2b04      	cmp	r3, #4
 8008c82:	d003      	beq.n	8008c8c <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8008c84:	68fb      	ldr	r3, [r7, #12]
 8008c86:	2205      	movs	r2, #5
 8008c88:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008c8c:	68fb      	ldr	r3, [r7, #12]
 8008c8e:	2200      	movs	r2, #0
 8008c90:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8008c92:	68fb      	ldr	r3, [r7, #12]
 8008c94:	687a      	ldr	r2, [r7, #4]
 8008c96:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8008c98:	68fb      	ldr	r3, [r7, #12]
 8008c9a:	887a      	ldrh	r2, [r7, #2]
 8008c9c:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8008c9e:	68fb      	ldr	r3, [r7, #12]
 8008ca0:	887a      	ldrh	r2, [r7, #2]
 8008ca2:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8008ca4:	68fb      	ldr	r3, [r7, #12]
 8008ca6:	68ba      	ldr	r2, [r7, #8]
 8008ca8:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8008caa:	68fb      	ldr	r3, [r7, #12]
 8008cac:	887a      	ldrh	r2, [r7, #2]
 8008cae:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8008cb0:	68fb      	ldr	r3, [r7, #12]
 8008cb2:	887a      	ldrh	r2, [r7, #2]
 8008cb4:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8008cb6:	68fb      	ldr	r3, [r7, #12]
 8008cb8:	2200      	movs	r2, #0
 8008cba:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8008cbc:	68fb      	ldr	r3, [r7, #12]
 8008cbe:	2200      	movs	r2, #0
 8008cc0:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008cc2:	68fb      	ldr	r3, [r7, #12]
 8008cc4:	681b      	ldr	r3, [r3, #0]
 8008cc6:	681b      	ldr	r3, [r3, #0]
 8008cc8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008ccc:	2b40      	cmp	r3, #64	@ 0x40
 8008cce:	d007      	beq.n	8008ce0 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008cd0:	68fb      	ldr	r3, [r7, #12]
 8008cd2:	681b      	ldr	r3, [r3, #0]
 8008cd4:	681a      	ldr	r2, [r3, #0]
 8008cd6:	68fb      	ldr	r3, [r7, #12]
 8008cd8:	681b      	ldr	r3, [r3, #0]
 8008cda:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008cde:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8008ce0:	68fb      	ldr	r3, [r7, #12]
 8008ce2:	68db      	ldr	r3, [r3, #12]
 8008ce4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008ce8:	d17e      	bne.n	8008de8 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008cea:	68fb      	ldr	r3, [r7, #12]
 8008cec:	685b      	ldr	r3, [r3, #4]
 8008cee:	2b00      	cmp	r3, #0
 8008cf0:	d002      	beq.n	8008cf8 <HAL_SPI_TransmitReceive+0xf6>
 8008cf2:	8afb      	ldrh	r3, [r7, #22]
 8008cf4:	2b01      	cmp	r3, #1
 8008cf6:	d16c      	bne.n	8008dd2 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8008cf8:	68fb      	ldr	r3, [r7, #12]
 8008cfa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008cfc:	881a      	ldrh	r2, [r3, #0]
 8008cfe:	68fb      	ldr	r3, [r7, #12]
 8008d00:	681b      	ldr	r3, [r3, #0]
 8008d02:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8008d04:	68fb      	ldr	r3, [r7, #12]
 8008d06:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008d08:	1c9a      	adds	r2, r3, #2
 8008d0a:	68fb      	ldr	r3, [r7, #12]
 8008d0c:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8008d0e:	68fb      	ldr	r3, [r7, #12]
 8008d10:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008d12:	b29b      	uxth	r3, r3
 8008d14:	3b01      	subs	r3, #1
 8008d16:	b29a      	uxth	r2, r3
 8008d18:	68fb      	ldr	r3, [r7, #12]
 8008d1a:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008d1c:	e059      	b.n	8008dd2 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8008d1e:	68fb      	ldr	r3, [r7, #12]
 8008d20:	681b      	ldr	r3, [r3, #0]
 8008d22:	689b      	ldr	r3, [r3, #8]
 8008d24:	f003 0302 	and.w	r3, r3, #2
 8008d28:	2b02      	cmp	r3, #2
 8008d2a:	d11b      	bne.n	8008d64 <HAL_SPI_TransmitReceive+0x162>
 8008d2c:	68fb      	ldr	r3, [r7, #12]
 8008d2e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008d30:	b29b      	uxth	r3, r3
 8008d32:	2b00      	cmp	r3, #0
 8008d34:	d016      	beq.n	8008d64 <HAL_SPI_TransmitReceive+0x162>
 8008d36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d38:	2b01      	cmp	r3, #1
 8008d3a:	d113      	bne.n	8008d64 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8008d3c:	68fb      	ldr	r3, [r7, #12]
 8008d3e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008d40:	881a      	ldrh	r2, [r3, #0]
 8008d42:	68fb      	ldr	r3, [r7, #12]
 8008d44:	681b      	ldr	r3, [r3, #0]
 8008d46:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008d48:	68fb      	ldr	r3, [r7, #12]
 8008d4a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008d4c:	1c9a      	adds	r2, r3, #2
 8008d4e:	68fb      	ldr	r3, [r7, #12]
 8008d50:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8008d52:	68fb      	ldr	r3, [r7, #12]
 8008d54:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008d56:	b29b      	uxth	r3, r3
 8008d58:	3b01      	subs	r3, #1
 8008d5a:	b29a      	uxth	r2, r3
 8008d5c:	68fb      	ldr	r3, [r7, #12]
 8008d5e:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8008d60:	2300      	movs	r3, #0
 8008d62:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8008d64:	68fb      	ldr	r3, [r7, #12]
 8008d66:	681b      	ldr	r3, [r3, #0]
 8008d68:	689b      	ldr	r3, [r3, #8]
 8008d6a:	f003 0301 	and.w	r3, r3, #1
 8008d6e:	2b01      	cmp	r3, #1
 8008d70:	d119      	bne.n	8008da6 <HAL_SPI_TransmitReceive+0x1a4>
 8008d72:	68fb      	ldr	r3, [r7, #12]
 8008d74:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008d76:	b29b      	uxth	r3, r3
 8008d78:	2b00      	cmp	r3, #0
 8008d7a:	d014      	beq.n	8008da6 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8008d7c:	68fb      	ldr	r3, [r7, #12]
 8008d7e:	681b      	ldr	r3, [r3, #0]
 8008d80:	68da      	ldr	r2, [r3, #12]
 8008d82:	68fb      	ldr	r3, [r7, #12]
 8008d84:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008d86:	b292      	uxth	r2, r2
 8008d88:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8008d8a:	68fb      	ldr	r3, [r7, #12]
 8008d8c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008d8e:	1c9a      	adds	r2, r3, #2
 8008d90:	68fb      	ldr	r3, [r7, #12]
 8008d92:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8008d94:	68fb      	ldr	r3, [r7, #12]
 8008d96:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008d98:	b29b      	uxth	r3, r3
 8008d9a:	3b01      	subs	r3, #1
 8008d9c:	b29a      	uxth	r2, r3
 8008d9e:	68fb      	ldr	r3, [r7, #12]
 8008da0:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8008da2:	2301      	movs	r3, #1
 8008da4:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8008da6:	f7fc fdc9 	bl	800593c <HAL_GetTick>
 8008daa:	4602      	mov	r2, r0
 8008dac:	6a3b      	ldr	r3, [r7, #32]
 8008dae:	1ad3      	subs	r3, r2, r3
 8008db0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008db2:	429a      	cmp	r2, r3
 8008db4:	d80d      	bhi.n	8008dd2 <HAL_SPI_TransmitReceive+0x1d0>
 8008db6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008db8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008dbc:	d009      	beq.n	8008dd2 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8008dbe:	68fb      	ldr	r3, [r7, #12]
 8008dc0:	2201      	movs	r2, #1
 8008dc2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8008dc6:	68fb      	ldr	r3, [r7, #12]
 8008dc8:	2200      	movs	r2, #0
 8008dca:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8008dce:	2303      	movs	r3, #3
 8008dd0:	e0bc      	b.n	8008f4c <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008dd2:	68fb      	ldr	r3, [r7, #12]
 8008dd4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008dd6:	b29b      	uxth	r3, r3
 8008dd8:	2b00      	cmp	r3, #0
 8008dda:	d1a0      	bne.n	8008d1e <HAL_SPI_TransmitReceive+0x11c>
 8008ddc:	68fb      	ldr	r3, [r7, #12]
 8008dde:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008de0:	b29b      	uxth	r3, r3
 8008de2:	2b00      	cmp	r3, #0
 8008de4:	d19b      	bne.n	8008d1e <HAL_SPI_TransmitReceive+0x11c>
 8008de6:	e082      	b.n	8008eee <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008de8:	68fb      	ldr	r3, [r7, #12]
 8008dea:	685b      	ldr	r3, [r3, #4]
 8008dec:	2b00      	cmp	r3, #0
 8008dee:	d002      	beq.n	8008df6 <HAL_SPI_TransmitReceive+0x1f4>
 8008df0:	8afb      	ldrh	r3, [r7, #22]
 8008df2:	2b01      	cmp	r3, #1
 8008df4:	d171      	bne.n	8008eda <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8008df6:	68fb      	ldr	r3, [r7, #12]
 8008df8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008dfa:	68fb      	ldr	r3, [r7, #12]
 8008dfc:	681b      	ldr	r3, [r3, #0]
 8008dfe:	330c      	adds	r3, #12
 8008e00:	7812      	ldrb	r2, [r2, #0]
 8008e02:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8008e04:	68fb      	ldr	r3, [r7, #12]
 8008e06:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008e08:	1c5a      	adds	r2, r3, #1
 8008e0a:	68fb      	ldr	r3, [r7, #12]
 8008e0c:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8008e0e:	68fb      	ldr	r3, [r7, #12]
 8008e10:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008e12:	b29b      	uxth	r3, r3
 8008e14:	3b01      	subs	r3, #1
 8008e16:	b29a      	uxth	r2, r3
 8008e18:	68fb      	ldr	r3, [r7, #12]
 8008e1a:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008e1c:	e05d      	b.n	8008eda <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8008e1e:	68fb      	ldr	r3, [r7, #12]
 8008e20:	681b      	ldr	r3, [r3, #0]
 8008e22:	689b      	ldr	r3, [r3, #8]
 8008e24:	f003 0302 	and.w	r3, r3, #2
 8008e28:	2b02      	cmp	r3, #2
 8008e2a:	d11c      	bne.n	8008e66 <HAL_SPI_TransmitReceive+0x264>
 8008e2c:	68fb      	ldr	r3, [r7, #12]
 8008e2e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008e30:	b29b      	uxth	r3, r3
 8008e32:	2b00      	cmp	r3, #0
 8008e34:	d017      	beq.n	8008e66 <HAL_SPI_TransmitReceive+0x264>
 8008e36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e38:	2b01      	cmp	r3, #1
 8008e3a:	d114      	bne.n	8008e66 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8008e3c:	68fb      	ldr	r3, [r7, #12]
 8008e3e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008e40:	68fb      	ldr	r3, [r7, #12]
 8008e42:	681b      	ldr	r3, [r3, #0]
 8008e44:	330c      	adds	r3, #12
 8008e46:	7812      	ldrb	r2, [r2, #0]
 8008e48:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8008e4a:	68fb      	ldr	r3, [r7, #12]
 8008e4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008e4e:	1c5a      	adds	r2, r3, #1
 8008e50:	68fb      	ldr	r3, [r7, #12]
 8008e52:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8008e54:	68fb      	ldr	r3, [r7, #12]
 8008e56:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008e58:	b29b      	uxth	r3, r3
 8008e5a:	3b01      	subs	r3, #1
 8008e5c:	b29a      	uxth	r2, r3
 8008e5e:	68fb      	ldr	r3, [r7, #12]
 8008e60:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8008e62:	2300      	movs	r3, #0
 8008e64:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8008e66:	68fb      	ldr	r3, [r7, #12]
 8008e68:	681b      	ldr	r3, [r3, #0]
 8008e6a:	689b      	ldr	r3, [r3, #8]
 8008e6c:	f003 0301 	and.w	r3, r3, #1
 8008e70:	2b01      	cmp	r3, #1
 8008e72:	d119      	bne.n	8008ea8 <HAL_SPI_TransmitReceive+0x2a6>
 8008e74:	68fb      	ldr	r3, [r7, #12]
 8008e76:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008e78:	b29b      	uxth	r3, r3
 8008e7a:	2b00      	cmp	r3, #0
 8008e7c:	d014      	beq.n	8008ea8 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8008e7e:	68fb      	ldr	r3, [r7, #12]
 8008e80:	681b      	ldr	r3, [r3, #0]
 8008e82:	68da      	ldr	r2, [r3, #12]
 8008e84:	68fb      	ldr	r3, [r7, #12]
 8008e86:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008e88:	b2d2      	uxtb	r2, r2
 8008e8a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8008e8c:	68fb      	ldr	r3, [r7, #12]
 8008e8e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008e90:	1c5a      	adds	r2, r3, #1
 8008e92:	68fb      	ldr	r3, [r7, #12]
 8008e94:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8008e96:	68fb      	ldr	r3, [r7, #12]
 8008e98:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008e9a:	b29b      	uxth	r3, r3
 8008e9c:	3b01      	subs	r3, #1
 8008e9e:	b29a      	uxth	r2, r3
 8008ea0:	68fb      	ldr	r3, [r7, #12]
 8008ea2:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8008ea4:	2301      	movs	r3, #1
 8008ea6:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8008ea8:	f7fc fd48 	bl	800593c <HAL_GetTick>
 8008eac:	4602      	mov	r2, r0
 8008eae:	6a3b      	ldr	r3, [r7, #32]
 8008eb0:	1ad3      	subs	r3, r2, r3
 8008eb2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008eb4:	429a      	cmp	r2, r3
 8008eb6:	d803      	bhi.n	8008ec0 <HAL_SPI_TransmitReceive+0x2be>
 8008eb8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008eba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008ebe:	d102      	bne.n	8008ec6 <HAL_SPI_TransmitReceive+0x2c4>
 8008ec0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ec2:	2b00      	cmp	r3, #0
 8008ec4:	d109      	bne.n	8008eda <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8008ec6:	68fb      	ldr	r3, [r7, #12]
 8008ec8:	2201      	movs	r2, #1
 8008eca:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8008ece:	68fb      	ldr	r3, [r7, #12]
 8008ed0:	2200      	movs	r2, #0
 8008ed2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8008ed6:	2303      	movs	r3, #3
 8008ed8:	e038      	b.n	8008f4c <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008eda:	68fb      	ldr	r3, [r7, #12]
 8008edc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008ede:	b29b      	uxth	r3, r3
 8008ee0:	2b00      	cmp	r3, #0
 8008ee2:	d19c      	bne.n	8008e1e <HAL_SPI_TransmitReceive+0x21c>
 8008ee4:	68fb      	ldr	r3, [r7, #12]
 8008ee6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008ee8:	b29b      	uxth	r3, r3
 8008eea:	2b00      	cmp	r3, #0
 8008eec:	d197      	bne.n	8008e1e <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008eee:	6a3a      	ldr	r2, [r7, #32]
 8008ef0:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8008ef2:	68f8      	ldr	r0, [r7, #12]
 8008ef4:	f000 f8b6 	bl	8009064 <SPI_EndRxTxTransaction>
 8008ef8:	4603      	mov	r3, r0
 8008efa:	2b00      	cmp	r3, #0
 8008efc:	d008      	beq.n	8008f10 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008efe:	68fb      	ldr	r3, [r7, #12]
 8008f00:	2220      	movs	r2, #32
 8008f02:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8008f04:	68fb      	ldr	r3, [r7, #12]
 8008f06:	2200      	movs	r2, #0
 8008f08:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8008f0c:	2301      	movs	r3, #1
 8008f0e:	e01d      	b.n	8008f4c <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8008f10:	68fb      	ldr	r3, [r7, #12]
 8008f12:	689b      	ldr	r3, [r3, #8]
 8008f14:	2b00      	cmp	r3, #0
 8008f16:	d10a      	bne.n	8008f2e <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008f18:	2300      	movs	r3, #0
 8008f1a:	613b      	str	r3, [r7, #16]
 8008f1c:	68fb      	ldr	r3, [r7, #12]
 8008f1e:	681b      	ldr	r3, [r3, #0]
 8008f20:	68db      	ldr	r3, [r3, #12]
 8008f22:	613b      	str	r3, [r7, #16]
 8008f24:	68fb      	ldr	r3, [r7, #12]
 8008f26:	681b      	ldr	r3, [r3, #0]
 8008f28:	689b      	ldr	r3, [r3, #8]
 8008f2a:	613b      	str	r3, [r7, #16]
 8008f2c:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 8008f2e:	68fb      	ldr	r3, [r7, #12]
 8008f30:	2201      	movs	r2, #1
 8008f32:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8008f36:	68fb      	ldr	r3, [r7, #12]
 8008f38:	2200      	movs	r2, #0
 8008f3a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008f3e:	68fb      	ldr	r3, [r7, #12]
 8008f40:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008f42:	2b00      	cmp	r3, #0
 8008f44:	d001      	beq.n	8008f4a <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 8008f46:	2301      	movs	r3, #1
 8008f48:	e000      	b.n	8008f4c <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 8008f4a:	2300      	movs	r3, #0
  }
}
 8008f4c:	4618      	mov	r0, r3
 8008f4e:	3728      	adds	r7, #40	@ 0x28
 8008f50:	46bd      	mov	sp, r7
 8008f52:	bd80      	pop	{r7, pc}

08008f54 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8008f54:	b580      	push	{r7, lr}
 8008f56:	b088      	sub	sp, #32
 8008f58:	af00      	add	r7, sp, #0
 8008f5a:	60f8      	str	r0, [r7, #12]
 8008f5c:	60b9      	str	r1, [r7, #8]
 8008f5e:	603b      	str	r3, [r7, #0]
 8008f60:	4613      	mov	r3, r2
 8008f62:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8008f64:	f7fc fcea 	bl	800593c <HAL_GetTick>
 8008f68:	4602      	mov	r2, r0
 8008f6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008f6c:	1a9b      	subs	r3, r3, r2
 8008f6e:	683a      	ldr	r2, [r7, #0]
 8008f70:	4413      	add	r3, r2
 8008f72:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8008f74:	f7fc fce2 	bl	800593c <HAL_GetTick>
 8008f78:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8008f7a:	4b39      	ldr	r3, [pc, #228]	@ (8009060 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8008f7c:	681b      	ldr	r3, [r3, #0]
 8008f7e:	015b      	lsls	r3, r3, #5
 8008f80:	0d1b      	lsrs	r3, r3, #20
 8008f82:	69fa      	ldr	r2, [r7, #28]
 8008f84:	fb02 f303 	mul.w	r3, r2, r3
 8008f88:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008f8a:	e055      	b.n	8009038 <SPI_WaitFlagStateUntilTimeout+0xe4>
  {
    if (Timeout != HAL_MAX_DELAY)
 8008f8c:	683b      	ldr	r3, [r7, #0]
 8008f8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008f92:	d051      	beq.n	8009038 <SPI_WaitFlagStateUntilTimeout+0xe4>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8008f94:	f7fc fcd2 	bl	800593c <HAL_GetTick>
 8008f98:	4602      	mov	r2, r0
 8008f9a:	69bb      	ldr	r3, [r7, #24]
 8008f9c:	1ad3      	subs	r3, r2, r3
 8008f9e:	69fa      	ldr	r2, [r7, #28]
 8008fa0:	429a      	cmp	r2, r3
 8008fa2:	d902      	bls.n	8008faa <SPI_WaitFlagStateUntilTimeout+0x56>
 8008fa4:	69fb      	ldr	r3, [r7, #28]
 8008fa6:	2b00      	cmp	r3, #0
 8008fa8:	d13d      	bne.n	8009026 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8008faa:	68fb      	ldr	r3, [r7, #12]
 8008fac:	681b      	ldr	r3, [r3, #0]
 8008fae:	685a      	ldr	r2, [r3, #4]
 8008fb0:	68fb      	ldr	r3, [r7, #12]
 8008fb2:	681b      	ldr	r3, [r3, #0]
 8008fb4:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8008fb8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008fba:	68fb      	ldr	r3, [r7, #12]
 8008fbc:	685b      	ldr	r3, [r3, #4]
 8008fbe:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8008fc2:	d111      	bne.n	8008fe8 <SPI_WaitFlagStateUntilTimeout+0x94>
 8008fc4:	68fb      	ldr	r3, [r7, #12]
 8008fc6:	689b      	ldr	r3, [r3, #8]
 8008fc8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008fcc:	d004      	beq.n	8008fd8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008fce:	68fb      	ldr	r3, [r7, #12]
 8008fd0:	689b      	ldr	r3, [r3, #8]
 8008fd2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008fd6:	d107      	bne.n	8008fe8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8008fd8:	68fb      	ldr	r3, [r7, #12]
 8008fda:	681b      	ldr	r3, [r3, #0]
 8008fdc:	681a      	ldr	r2, [r3, #0]
 8008fde:	68fb      	ldr	r3, [r7, #12]
 8008fe0:	681b      	ldr	r3, [r3, #0]
 8008fe2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008fe6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008fe8:	68fb      	ldr	r3, [r7, #12]
 8008fea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008fec:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008ff0:	d10f      	bne.n	8009012 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8008ff2:	68fb      	ldr	r3, [r7, #12]
 8008ff4:	681b      	ldr	r3, [r3, #0]
 8008ff6:	681a      	ldr	r2, [r3, #0]
 8008ff8:	68fb      	ldr	r3, [r7, #12]
 8008ffa:	681b      	ldr	r3, [r3, #0]
 8008ffc:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8009000:	601a      	str	r2, [r3, #0]
 8009002:	68fb      	ldr	r3, [r7, #12]
 8009004:	681b      	ldr	r3, [r3, #0]
 8009006:	681a      	ldr	r2, [r3, #0]
 8009008:	68fb      	ldr	r3, [r7, #12]
 800900a:	681b      	ldr	r3, [r3, #0]
 800900c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8009010:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8009012:	68fb      	ldr	r3, [r7, #12]
 8009014:	2201      	movs	r2, #1
 8009016:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800901a:	68fb      	ldr	r3, [r7, #12]
 800901c:	2200      	movs	r2, #0
 800901e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8009022:	2303      	movs	r3, #3
 8009024:	e018      	b.n	8009058 <SPI_WaitFlagStateUntilTimeout+0x104>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8009026:	697b      	ldr	r3, [r7, #20]
 8009028:	2b00      	cmp	r3, #0
 800902a:	d102      	bne.n	8009032 <SPI_WaitFlagStateUntilTimeout+0xde>
      {
        tmp_timeout = 0U;
 800902c:	2300      	movs	r3, #0
 800902e:	61fb      	str	r3, [r7, #28]
 8009030:	e002      	b.n	8009038 <SPI_WaitFlagStateUntilTimeout+0xe4>
      }
      else
      {
        count--;
 8009032:	697b      	ldr	r3, [r7, #20]
 8009034:	3b01      	subs	r3, #1
 8009036:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8009038:	68fb      	ldr	r3, [r7, #12]
 800903a:	681b      	ldr	r3, [r3, #0]
 800903c:	689a      	ldr	r2, [r3, #8]
 800903e:	68bb      	ldr	r3, [r7, #8]
 8009040:	4013      	ands	r3, r2
 8009042:	68ba      	ldr	r2, [r7, #8]
 8009044:	429a      	cmp	r2, r3
 8009046:	bf0c      	ite	eq
 8009048:	2301      	moveq	r3, #1
 800904a:	2300      	movne	r3, #0
 800904c:	b2db      	uxtb	r3, r3
 800904e:	461a      	mov	r2, r3
 8009050:	79fb      	ldrb	r3, [r7, #7]
 8009052:	429a      	cmp	r2, r3
 8009054:	d19a      	bne.n	8008f8c <SPI_WaitFlagStateUntilTimeout+0x38>
      }
    }
  }

  return HAL_OK;
 8009056:	2300      	movs	r3, #0
}
 8009058:	4618      	mov	r0, r3
 800905a:	3720      	adds	r7, #32
 800905c:	46bd      	mov	sp, r7
 800905e:	bd80      	pop	{r7, pc}
 8009060:	2000d114 	.word	0x2000d114

08009064 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8009064:	b580      	push	{r7, lr}
 8009066:	b088      	sub	sp, #32
 8009068:	af02      	add	r7, sp, #8
 800906a:	60f8      	str	r0, [r7, #12]
 800906c:	60b9      	str	r1, [r7, #8]
 800906e:	607a      	str	r2, [r7, #4]
  __IO uint32_t count;

  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	9300      	str	r3, [sp, #0]
 8009074:	68bb      	ldr	r3, [r7, #8]
 8009076:	2201      	movs	r2, #1
 8009078:	2102      	movs	r1, #2
 800907a:	68f8      	ldr	r0, [r7, #12]
 800907c:	f7ff ff6a 	bl	8008f54 <SPI_WaitFlagStateUntilTimeout>
 8009080:	4603      	mov	r3, r0
 8009082:	2b00      	cmp	r3, #0
 8009084:	d007      	beq.n	8009096 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009086:	68fb      	ldr	r3, [r7, #12]
 8009088:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800908a:	f043 0220 	orr.w	r2, r3, #32
 800908e:	68fb      	ldr	r3, [r7, #12]
 8009090:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8009092:	2303      	movs	r3, #3
 8009094:	e032      	b.n	80090fc <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in us */
  count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8009096:	4b1b      	ldr	r3, [pc, #108]	@ (8009104 <SPI_EndRxTxTransaction+0xa0>)
 8009098:	681b      	ldr	r3, [r3, #0]
 800909a:	4a1b      	ldr	r2, [pc, #108]	@ (8009108 <SPI_EndRxTxTransaction+0xa4>)
 800909c:	fba2 2303 	umull	r2, r3, r2, r3
 80090a0:	0d5b      	lsrs	r3, r3, #21
 80090a2:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80090a6:	fb02 f303 	mul.w	r3, r2, r3
 80090aa:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80090ac:	68fb      	ldr	r3, [r7, #12]
 80090ae:	685b      	ldr	r3, [r3, #4]
 80090b0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80090b4:	d112      	bne.n	80090dc <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	9300      	str	r3, [sp, #0]
 80090ba:	68bb      	ldr	r3, [r7, #8]
 80090bc:	2200      	movs	r2, #0
 80090be:	2180      	movs	r1, #128	@ 0x80
 80090c0:	68f8      	ldr	r0, [r7, #12]
 80090c2:	f7ff ff47 	bl	8008f54 <SPI_WaitFlagStateUntilTimeout>
 80090c6:	4603      	mov	r3, r0
 80090c8:	2b00      	cmp	r3, #0
 80090ca:	d016      	beq.n	80090fa <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80090cc:	68fb      	ldr	r3, [r7, #12]
 80090ce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80090d0:	f043 0220 	orr.w	r2, r3, #32
 80090d4:	68fb      	ldr	r3, [r7, #12]
 80090d6:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 80090d8:	2303      	movs	r3, #3
 80090da:	e00f      	b.n	80090fc <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80090dc:	697b      	ldr	r3, [r7, #20]
 80090de:	2b00      	cmp	r3, #0
 80090e0:	d00a      	beq.n	80090f8 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 80090e2:	697b      	ldr	r3, [r7, #20]
 80090e4:	3b01      	subs	r3, #1
 80090e6:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80090e8:	68fb      	ldr	r3, [r7, #12]
 80090ea:	681b      	ldr	r3, [r3, #0]
 80090ec:	689b      	ldr	r3, [r3, #8]
 80090ee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80090f2:	2b80      	cmp	r3, #128	@ 0x80
 80090f4:	d0f2      	beq.n	80090dc <SPI_EndRxTxTransaction+0x78>
 80090f6:	e000      	b.n	80090fa <SPI_EndRxTxTransaction+0x96>
        break;
 80090f8:	bf00      	nop
  }

  return HAL_OK;
 80090fa:	2300      	movs	r3, #0
}
 80090fc:	4618      	mov	r0, r3
 80090fe:	3718      	adds	r7, #24
 8009100:	46bd      	mov	sp, r7
 8009102:	bd80      	pop	{r7, pc}
 8009104:	2000d114 	.word	0x2000d114
 8009108:	165e9f81 	.word	0x165e9f81

0800910c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800910c:	b580      	push	{r7, lr}
 800910e:	b082      	sub	sp, #8
 8009110:	af00      	add	r7, sp, #0
 8009112:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	2b00      	cmp	r3, #0
 8009118:	d101      	bne.n	800911e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800911a:	2301      	movs	r3, #1
 800911c:	e041      	b.n	80091a2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009124:	b2db      	uxtb	r3, r3
 8009126:	2b00      	cmp	r3, #0
 8009128:	d106      	bne.n	8009138 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	2200      	movs	r2, #0
 800912e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009132:	6878      	ldr	r0, [r7, #4]
 8009134:	f7fc f980 	bl	8005438 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	2202      	movs	r2, #2
 800913c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	681a      	ldr	r2, [r3, #0]
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	3304      	adds	r3, #4
 8009148:	4619      	mov	r1, r3
 800914a:	4610      	mov	r0, r2
 800914c:	f000 fd10 	bl	8009b70 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	2201      	movs	r2, #1
 8009154:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	2201      	movs	r2, #1
 800915c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	2201      	movs	r2, #1
 8009164:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	2201      	movs	r2, #1
 800916c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	2201      	movs	r2, #1
 8009174:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	2201      	movs	r2, #1
 800917c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	2201      	movs	r2, #1
 8009184:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	2201      	movs	r2, #1
 800918c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	2201      	movs	r2, #1
 8009194:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	2201      	movs	r2, #1
 800919c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80091a0:	2300      	movs	r3, #0
}
 80091a2:	4618      	mov	r0, r3
 80091a4:	3708      	adds	r7, #8
 80091a6:	46bd      	mov	sp, r7
 80091a8:	bd80      	pop	{r7, pc}
	...

080091ac <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80091ac:	b480      	push	{r7}
 80091ae:	b085      	sub	sp, #20
 80091b0:	af00      	add	r7, sp, #0
 80091b2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80091ba:	b2db      	uxtb	r3, r3
 80091bc:	2b01      	cmp	r3, #1
 80091be:	d001      	beq.n	80091c4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80091c0:	2301      	movs	r3, #1
 80091c2:	e044      	b.n	800924e <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	2202      	movs	r2, #2
 80091c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	681b      	ldr	r3, [r3, #0]
 80091d0:	68da      	ldr	r2, [r3, #12]
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	681b      	ldr	r3, [r3, #0]
 80091d6:	f042 0201 	orr.w	r2, r2, #1
 80091da:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	681b      	ldr	r3, [r3, #0]
 80091e0:	4a1e      	ldr	r2, [pc, #120]	@ (800925c <HAL_TIM_Base_Start_IT+0xb0>)
 80091e2:	4293      	cmp	r3, r2
 80091e4:	d018      	beq.n	8009218 <HAL_TIM_Base_Start_IT+0x6c>
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	681b      	ldr	r3, [r3, #0]
 80091ea:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80091ee:	d013      	beq.n	8009218 <HAL_TIM_Base_Start_IT+0x6c>
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	681b      	ldr	r3, [r3, #0]
 80091f4:	4a1a      	ldr	r2, [pc, #104]	@ (8009260 <HAL_TIM_Base_Start_IT+0xb4>)
 80091f6:	4293      	cmp	r3, r2
 80091f8:	d00e      	beq.n	8009218 <HAL_TIM_Base_Start_IT+0x6c>
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	681b      	ldr	r3, [r3, #0]
 80091fe:	4a19      	ldr	r2, [pc, #100]	@ (8009264 <HAL_TIM_Base_Start_IT+0xb8>)
 8009200:	4293      	cmp	r3, r2
 8009202:	d009      	beq.n	8009218 <HAL_TIM_Base_Start_IT+0x6c>
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	681b      	ldr	r3, [r3, #0]
 8009208:	4a17      	ldr	r2, [pc, #92]	@ (8009268 <HAL_TIM_Base_Start_IT+0xbc>)
 800920a:	4293      	cmp	r3, r2
 800920c:	d004      	beq.n	8009218 <HAL_TIM_Base_Start_IT+0x6c>
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	681b      	ldr	r3, [r3, #0]
 8009212:	4a16      	ldr	r2, [pc, #88]	@ (800926c <HAL_TIM_Base_Start_IT+0xc0>)
 8009214:	4293      	cmp	r3, r2
 8009216:	d111      	bne.n	800923c <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	681b      	ldr	r3, [r3, #0]
 800921c:	689b      	ldr	r3, [r3, #8]
 800921e:	f003 0307 	and.w	r3, r3, #7
 8009222:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009224:	68fb      	ldr	r3, [r7, #12]
 8009226:	2b06      	cmp	r3, #6
 8009228:	d010      	beq.n	800924c <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	681b      	ldr	r3, [r3, #0]
 800922e:	681a      	ldr	r2, [r3, #0]
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	681b      	ldr	r3, [r3, #0]
 8009234:	f042 0201 	orr.w	r2, r2, #1
 8009238:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800923a:	e007      	b.n	800924c <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	681b      	ldr	r3, [r3, #0]
 8009240:	681a      	ldr	r2, [r3, #0]
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	681b      	ldr	r3, [r3, #0]
 8009246:	f042 0201 	orr.w	r2, r2, #1
 800924a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800924c:	2300      	movs	r3, #0
}
 800924e:	4618      	mov	r0, r3
 8009250:	3714      	adds	r7, #20
 8009252:	46bd      	mov	sp, r7
 8009254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009258:	4770      	bx	lr
 800925a:	bf00      	nop
 800925c:	40010000 	.word	0x40010000
 8009260:	40000400 	.word	0x40000400
 8009264:	40000800 	.word	0x40000800
 8009268:	40000c00 	.word	0x40000c00
 800926c:	40014000 	.word	0x40014000

08009270 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8009270:	b480      	push	{r7}
 8009272:	b083      	sub	sp, #12
 8009274:	af00      	add	r7, sp, #0
 8009276:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	681b      	ldr	r3, [r3, #0]
 800927c:	68da      	ldr	r2, [r3, #12]
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	681b      	ldr	r3, [r3, #0]
 8009282:	f022 0201 	bic.w	r2, r2, #1
 8009286:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	681b      	ldr	r3, [r3, #0]
 800928c:	6a1a      	ldr	r2, [r3, #32]
 800928e:	f241 1311 	movw	r3, #4369	@ 0x1111
 8009292:	4013      	ands	r3, r2
 8009294:	2b00      	cmp	r3, #0
 8009296:	d10f      	bne.n	80092b8 <HAL_TIM_Base_Stop_IT+0x48>
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	681b      	ldr	r3, [r3, #0]
 800929c:	6a1a      	ldr	r2, [r3, #32]
 800929e:	f240 4344 	movw	r3, #1092	@ 0x444
 80092a2:	4013      	ands	r3, r2
 80092a4:	2b00      	cmp	r3, #0
 80092a6:	d107      	bne.n	80092b8 <HAL_TIM_Base_Stop_IT+0x48>
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	681b      	ldr	r3, [r3, #0]
 80092ac:	681a      	ldr	r2, [r3, #0]
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	681b      	ldr	r3, [r3, #0]
 80092b2:	f022 0201 	bic.w	r2, r2, #1
 80092b6:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	2201      	movs	r2, #1
 80092bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 80092c0:	2300      	movs	r3, #0
}
 80092c2:	4618      	mov	r0, r3
 80092c4:	370c      	adds	r7, #12
 80092c6:	46bd      	mov	sp, r7
 80092c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092cc:	4770      	bx	lr

080092ce <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80092ce:	b580      	push	{r7, lr}
 80092d0:	b082      	sub	sp, #8
 80092d2:	af00      	add	r7, sp, #0
 80092d4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	2b00      	cmp	r3, #0
 80092da:	d101      	bne.n	80092e0 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80092dc:	2301      	movs	r3, #1
 80092de:	e041      	b.n	8009364 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80092e6:	b2db      	uxtb	r3, r3
 80092e8:	2b00      	cmp	r3, #0
 80092ea:	d106      	bne.n	80092fa <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	2200      	movs	r2, #0
 80092f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80092f4:	6878      	ldr	r0, [r7, #4]
 80092f6:	f000 f839 	bl	800936c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	2202      	movs	r2, #2
 80092fe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	681a      	ldr	r2, [r3, #0]
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	3304      	adds	r3, #4
 800930a:	4619      	mov	r1, r3
 800930c:	4610      	mov	r0, r2
 800930e:	f000 fc2f 	bl	8009b70 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	2201      	movs	r2, #1
 8009316:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	2201      	movs	r2, #1
 800931e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	2201      	movs	r2, #1
 8009326:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	2201      	movs	r2, #1
 800932e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	2201      	movs	r2, #1
 8009336:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	2201      	movs	r2, #1
 800933e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	2201      	movs	r2, #1
 8009346:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	2201      	movs	r2, #1
 800934e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	2201      	movs	r2, #1
 8009356:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	2201      	movs	r2, #1
 800935e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8009362:	2300      	movs	r3, #0
}
 8009364:	4618      	mov	r0, r3
 8009366:	3708      	adds	r7, #8
 8009368:	46bd      	mov	sp, r7
 800936a:	bd80      	pop	{r7, pc}

0800936c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800936c:	b480      	push	{r7}
 800936e:	b083      	sub	sp, #12
 8009370:	af00      	add	r7, sp, #0
 8009372:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8009374:	bf00      	nop
 8009376:	370c      	adds	r7, #12
 8009378:	46bd      	mov	sp, r7
 800937a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800937e:	4770      	bx	lr

08009380 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009380:	b580      	push	{r7, lr}
 8009382:	b084      	sub	sp, #16
 8009384:	af00      	add	r7, sp, #0
 8009386:	6078      	str	r0, [r7, #4]
 8009388:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800938a:	683b      	ldr	r3, [r7, #0]
 800938c:	2b00      	cmp	r3, #0
 800938e:	d109      	bne.n	80093a4 <HAL_TIM_PWM_Start+0x24>
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8009396:	b2db      	uxtb	r3, r3
 8009398:	2b01      	cmp	r3, #1
 800939a:	bf14      	ite	ne
 800939c:	2301      	movne	r3, #1
 800939e:	2300      	moveq	r3, #0
 80093a0:	b2db      	uxtb	r3, r3
 80093a2:	e022      	b.n	80093ea <HAL_TIM_PWM_Start+0x6a>
 80093a4:	683b      	ldr	r3, [r7, #0]
 80093a6:	2b04      	cmp	r3, #4
 80093a8:	d109      	bne.n	80093be <HAL_TIM_PWM_Start+0x3e>
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80093b0:	b2db      	uxtb	r3, r3
 80093b2:	2b01      	cmp	r3, #1
 80093b4:	bf14      	ite	ne
 80093b6:	2301      	movne	r3, #1
 80093b8:	2300      	moveq	r3, #0
 80093ba:	b2db      	uxtb	r3, r3
 80093bc:	e015      	b.n	80093ea <HAL_TIM_PWM_Start+0x6a>
 80093be:	683b      	ldr	r3, [r7, #0]
 80093c0:	2b08      	cmp	r3, #8
 80093c2:	d109      	bne.n	80093d8 <HAL_TIM_PWM_Start+0x58>
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80093ca:	b2db      	uxtb	r3, r3
 80093cc:	2b01      	cmp	r3, #1
 80093ce:	bf14      	ite	ne
 80093d0:	2301      	movne	r3, #1
 80093d2:	2300      	moveq	r3, #0
 80093d4:	b2db      	uxtb	r3, r3
 80093d6:	e008      	b.n	80093ea <HAL_TIM_PWM_Start+0x6a>
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80093de:	b2db      	uxtb	r3, r3
 80093e0:	2b01      	cmp	r3, #1
 80093e2:	bf14      	ite	ne
 80093e4:	2301      	movne	r3, #1
 80093e6:	2300      	moveq	r3, #0
 80093e8:	b2db      	uxtb	r3, r3
 80093ea:	2b00      	cmp	r3, #0
 80093ec:	d001      	beq.n	80093f2 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80093ee:	2301      	movs	r3, #1
 80093f0:	e068      	b.n	80094c4 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80093f2:	683b      	ldr	r3, [r7, #0]
 80093f4:	2b00      	cmp	r3, #0
 80093f6:	d104      	bne.n	8009402 <HAL_TIM_PWM_Start+0x82>
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	2202      	movs	r2, #2
 80093fc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8009400:	e013      	b.n	800942a <HAL_TIM_PWM_Start+0xaa>
 8009402:	683b      	ldr	r3, [r7, #0]
 8009404:	2b04      	cmp	r3, #4
 8009406:	d104      	bne.n	8009412 <HAL_TIM_PWM_Start+0x92>
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	2202      	movs	r2, #2
 800940c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8009410:	e00b      	b.n	800942a <HAL_TIM_PWM_Start+0xaa>
 8009412:	683b      	ldr	r3, [r7, #0]
 8009414:	2b08      	cmp	r3, #8
 8009416:	d104      	bne.n	8009422 <HAL_TIM_PWM_Start+0xa2>
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	2202      	movs	r2, #2
 800941c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8009420:	e003      	b.n	800942a <HAL_TIM_PWM_Start+0xaa>
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	2202      	movs	r2, #2
 8009426:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	681b      	ldr	r3, [r3, #0]
 800942e:	2201      	movs	r2, #1
 8009430:	6839      	ldr	r1, [r7, #0]
 8009432:	4618      	mov	r0, r3
 8009434:	f000 fe48 	bl	800a0c8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	681b      	ldr	r3, [r3, #0]
 800943c:	4a23      	ldr	r2, [pc, #140]	@ (80094cc <HAL_TIM_PWM_Start+0x14c>)
 800943e:	4293      	cmp	r3, r2
 8009440:	d107      	bne.n	8009452 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	681b      	ldr	r3, [r3, #0]
 8009446:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	681b      	ldr	r3, [r3, #0]
 800944c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8009450:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	681b      	ldr	r3, [r3, #0]
 8009456:	4a1d      	ldr	r2, [pc, #116]	@ (80094cc <HAL_TIM_PWM_Start+0x14c>)
 8009458:	4293      	cmp	r3, r2
 800945a:	d018      	beq.n	800948e <HAL_TIM_PWM_Start+0x10e>
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	681b      	ldr	r3, [r3, #0]
 8009460:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009464:	d013      	beq.n	800948e <HAL_TIM_PWM_Start+0x10e>
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	681b      	ldr	r3, [r3, #0]
 800946a:	4a19      	ldr	r2, [pc, #100]	@ (80094d0 <HAL_TIM_PWM_Start+0x150>)
 800946c:	4293      	cmp	r3, r2
 800946e:	d00e      	beq.n	800948e <HAL_TIM_PWM_Start+0x10e>
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	681b      	ldr	r3, [r3, #0]
 8009474:	4a17      	ldr	r2, [pc, #92]	@ (80094d4 <HAL_TIM_PWM_Start+0x154>)
 8009476:	4293      	cmp	r3, r2
 8009478:	d009      	beq.n	800948e <HAL_TIM_PWM_Start+0x10e>
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	681b      	ldr	r3, [r3, #0]
 800947e:	4a16      	ldr	r2, [pc, #88]	@ (80094d8 <HAL_TIM_PWM_Start+0x158>)
 8009480:	4293      	cmp	r3, r2
 8009482:	d004      	beq.n	800948e <HAL_TIM_PWM_Start+0x10e>
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	681b      	ldr	r3, [r3, #0]
 8009488:	4a14      	ldr	r2, [pc, #80]	@ (80094dc <HAL_TIM_PWM_Start+0x15c>)
 800948a:	4293      	cmp	r3, r2
 800948c:	d111      	bne.n	80094b2 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	681b      	ldr	r3, [r3, #0]
 8009492:	689b      	ldr	r3, [r3, #8]
 8009494:	f003 0307 	and.w	r3, r3, #7
 8009498:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800949a:	68fb      	ldr	r3, [r7, #12]
 800949c:	2b06      	cmp	r3, #6
 800949e:	d010      	beq.n	80094c2 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	681b      	ldr	r3, [r3, #0]
 80094a4:	681a      	ldr	r2, [r3, #0]
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	681b      	ldr	r3, [r3, #0]
 80094aa:	f042 0201 	orr.w	r2, r2, #1
 80094ae:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80094b0:	e007      	b.n	80094c2 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	681b      	ldr	r3, [r3, #0]
 80094b6:	681a      	ldr	r2, [r3, #0]
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	681b      	ldr	r3, [r3, #0]
 80094bc:	f042 0201 	orr.w	r2, r2, #1
 80094c0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80094c2:	2300      	movs	r3, #0
}
 80094c4:	4618      	mov	r0, r3
 80094c6:	3710      	adds	r7, #16
 80094c8:	46bd      	mov	sp, r7
 80094ca:	bd80      	pop	{r7, pc}
 80094cc:	40010000 	.word	0x40010000
 80094d0:	40000400 	.word	0x40000400
 80094d4:	40000800 	.word	0x40000800
 80094d8:	40000c00 	.word	0x40000c00
 80094dc:	40014000 	.word	0x40014000

080094e0 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 80094e0:	b580      	push	{r7, lr}
 80094e2:	b086      	sub	sp, #24
 80094e4:	af00      	add	r7, sp, #0
 80094e6:	6078      	str	r0, [r7, #4]
 80094e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	2b00      	cmp	r3, #0
 80094ee:	d101      	bne.n	80094f4 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80094f0:	2301      	movs	r3, #1
 80094f2:	e097      	b.n	8009624 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80094fa:	b2db      	uxtb	r3, r3
 80094fc:	2b00      	cmp	r3, #0
 80094fe:	d106      	bne.n	800950e <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	2200      	movs	r2, #0
 8009504:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8009508:	6878      	ldr	r0, [r7, #4]
 800950a:	f7fb fff7 	bl	80054fc <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	2202      	movs	r2, #2
 8009512:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	681b      	ldr	r3, [r3, #0]
 800951a:	689b      	ldr	r3, [r3, #8]
 800951c:	687a      	ldr	r2, [r7, #4]
 800951e:	6812      	ldr	r2, [r2, #0]
 8009520:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8009524:	f023 0307 	bic.w	r3, r3, #7
 8009528:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	681a      	ldr	r2, [r3, #0]
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	3304      	adds	r3, #4
 8009532:	4619      	mov	r1, r3
 8009534:	4610      	mov	r0, r2
 8009536:	f000 fb1b 	bl	8009b70 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	681b      	ldr	r3, [r3, #0]
 800953e:	689b      	ldr	r3, [r3, #8]
 8009540:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	681b      	ldr	r3, [r3, #0]
 8009546:	699b      	ldr	r3, [r3, #24]
 8009548:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	681b      	ldr	r3, [r3, #0]
 800954e:	6a1b      	ldr	r3, [r3, #32]
 8009550:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8009552:	683b      	ldr	r3, [r7, #0]
 8009554:	681b      	ldr	r3, [r3, #0]
 8009556:	697a      	ldr	r2, [r7, #20]
 8009558:	4313      	orrs	r3, r2
 800955a:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800955c:	693b      	ldr	r3, [r7, #16]
 800955e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009562:	f023 0303 	bic.w	r3, r3, #3
 8009566:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8009568:	683b      	ldr	r3, [r7, #0]
 800956a:	689a      	ldr	r2, [r3, #8]
 800956c:	683b      	ldr	r3, [r7, #0]
 800956e:	699b      	ldr	r3, [r3, #24]
 8009570:	021b      	lsls	r3, r3, #8
 8009572:	4313      	orrs	r3, r2
 8009574:	693a      	ldr	r2, [r7, #16]
 8009576:	4313      	orrs	r3, r2
 8009578:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800957a:	693b      	ldr	r3, [r7, #16]
 800957c:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8009580:	f023 030c 	bic.w	r3, r3, #12
 8009584:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8009586:	693b      	ldr	r3, [r7, #16]
 8009588:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800958c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8009590:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8009592:	683b      	ldr	r3, [r7, #0]
 8009594:	68da      	ldr	r2, [r3, #12]
 8009596:	683b      	ldr	r3, [r7, #0]
 8009598:	69db      	ldr	r3, [r3, #28]
 800959a:	021b      	lsls	r3, r3, #8
 800959c:	4313      	orrs	r3, r2
 800959e:	693a      	ldr	r2, [r7, #16]
 80095a0:	4313      	orrs	r3, r2
 80095a2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80095a4:	683b      	ldr	r3, [r7, #0]
 80095a6:	691b      	ldr	r3, [r3, #16]
 80095a8:	011a      	lsls	r2, r3, #4
 80095aa:	683b      	ldr	r3, [r7, #0]
 80095ac:	6a1b      	ldr	r3, [r3, #32]
 80095ae:	031b      	lsls	r3, r3, #12
 80095b0:	4313      	orrs	r3, r2
 80095b2:	693a      	ldr	r2, [r7, #16]
 80095b4:	4313      	orrs	r3, r2
 80095b6:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80095b8:	68fb      	ldr	r3, [r7, #12]
 80095ba:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 80095be:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80095c0:	68fb      	ldr	r3, [r7, #12]
 80095c2:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 80095c6:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80095c8:	683b      	ldr	r3, [r7, #0]
 80095ca:	685a      	ldr	r2, [r3, #4]
 80095cc:	683b      	ldr	r3, [r7, #0]
 80095ce:	695b      	ldr	r3, [r3, #20]
 80095d0:	011b      	lsls	r3, r3, #4
 80095d2:	4313      	orrs	r3, r2
 80095d4:	68fa      	ldr	r2, [r7, #12]
 80095d6:	4313      	orrs	r3, r2
 80095d8:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	681b      	ldr	r3, [r3, #0]
 80095de:	697a      	ldr	r2, [r7, #20]
 80095e0:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	681b      	ldr	r3, [r3, #0]
 80095e6:	693a      	ldr	r2, [r7, #16]
 80095e8:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	681b      	ldr	r3, [r3, #0]
 80095ee:	68fa      	ldr	r2, [r7, #12]
 80095f0:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	2201      	movs	r2, #1
 80095f6:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	2201      	movs	r2, #1
 80095fe:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	2201      	movs	r2, #1
 8009606:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	2201      	movs	r2, #1
 800960e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	2201      	movs	r2, #1
 8009616:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	2201      	movs	r2, #1
 800961e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8009622:	2300      	movs	r3, #0
}
 8009624:	4618      	mov	r0, r3
 8009626:	3718      	adds	r7, #24
 8009628:	46bd      	mov	sp, r7
 800962a:	bd80      	pop	{r7, pc}

0800962c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800962c:	b580      	push	{r7, lr}
 800962e:	b084      	sub	sp, #16
 8009630:	af00      	add	r7, sp, #0
 8009632:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	681b      	ldr	r3, [r3, #0]
 8009638:	68db      	ldr	r3, [r3, #12]
 800963a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	681b      	ldr	r3, [r3, #0]
 8009640:	691b      	ldr	r3, [r3, #16]
 8009642:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8009644:	68bb      	ldr	r3, [r7, #8]
 8009646:	f003 0302 	and.w	r3, r3, #2
 800964a:	2b00      	cmp	r3, #0
 800964c:	d020      	beq.n	8009690 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800964e:	68fb      	ldr	r3, [r7, #12]
 8009650:	f003 0302 	and.w	r3, r3, #2
 8009654:	2b00      	cmp	r3, #0
 8009656:	d01b      	beq.n	8009690 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	681b      	ldr	r3, [r3, #0]
 800965c:	f06f 0202 	mvn.w	r2, #2
 8009660:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	2201      	movs	r2, #1
 8009666:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	681b      	ldr	r3, [r3, #0]
 800966c:	699b      	ldr	r3, [r3, #24]
 800966e:	f003 0303 	and.w	r3, r3, #3
 8009672:	2b00      	cmp	r3, #0
 8009674:	d003      	beq.n	800967e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8009676:	6878      	ldr	r0, [r7, #4]
 8009678:	f000 fa5b 	bl	8009b32 <HAL_TIM_IC_CaptureCallback>
 800967c:	e005      	b.n	800968a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800967e:	6878      	ldr	r0, [r7, #4]
 8009680:	f000 fa4d 	bl	8009b1e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009684:	6878      	ldr	r0, [r7, #4]
 8009686:	f000 fa5e 	bl	8009b46 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	2200      	movs	r2, #0
 800968e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8009690:	68bb      	ldr	r3, [r7, #8]
 8009692:	f003 0304 	and.w	r3, r3, #4
 8009696:	2b00      	cmp	r3, #0
 8009698:	d020      	beq.n	80096dc <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800969a:	68fb      	ldr	r3, [r7, #12]
 800969c:	f003 0304 	and.w	r3, r3, #4
 80096a0:	2b00      	cmp	r3, #0
 80096a2:	d01b      	beq.n	80096dc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	681b      	ldr	r3, [r3, #0]
 80096a8:	f06f 0204 	mvn.w	r2, #4
 80096ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	2202      	movs	r2, #2
 80096b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	681b      	ldr	r3, [r3, #0]
 80096b8:	699b      	ldr	r3, [r3, #24]
 80096ba:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80096be:	2b00      	cmp	r3, #0
 80096c0:	d003      	beq.n	80096ca <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80096c2:	6878      	ldr	r0, [r7, #4]
 80096c4:	f000 fa35 	bl	8009b32 <HAL_TIM_IC_CaptureCallback>
 80096c8:	e005      	b.n	80096d6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80096ca:	6878      	ldr	r0, [r7, #4]
 80096cc:	f000 fa27 	bl	8009b1e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80096d0:	6878      	ldr	r0, [r7, #4]
 80096d2:	f000 fa38 	bl	8009b46 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	2200      	movs	r2, #0
 80096da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80096dc:	68bb      	ldr	r3, [r7, #8]
 80096de:	f003 0308 	and.w	r3, r3, #8
 80096e2:	2b00      	cmp	r3, #0
 80096e4:	d020      	beq.n	8009728 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80096e6:	68fb      	ldr	r3, [r7, #12]
 80096e8:	f003 0308 	and.w	r3, r3, #8
 80096ec:	2b00      	cmp	r3, #0
 80096ee:	d01b      	beq.n	8009728 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	681b      	ldr	r3, [r3, #0]
 80096f4:	f06f 0208 	mvn.w	r2, #8
 80096f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	2204      	movs	r2, #4
 80096fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	681b      	ldr	r3, [r3, #0]
 8009704:	69db      	ldr	r3, [r3, #28]
 8009706:	f003 0303 	and.w	r3, r3, #3
 800970a:	2b00      	cmp	r3, #0
 800970c:	d003      	beq.n	8009716 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800970e:	6878      	ldr	r0, [r7, #4]
 8009710:	f000 fa0f 	bl	8009b32 <HAL_TIM_IC_CaptureCallback>
 8009714:	e005      	b.n	8009722 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009716:	6878      	ldr	r0, [r7, #4]
 8009718:	f000 fa01 	bl	8009b1e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800971c:	6878      	ldr	r0, [r7, #4]
 800971e:	f000 fa12 	bl	8009b46 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	2200      	movs	r2, #0
 8009726:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8009728:	68bb      	ldr	r3, [r7, #8]
 800972a:	f003 0310 	and.w	r3, r3, #16
 800972e:	2b00      	cmp	r3, #0
 8009730:	d020      	beq.n	8009774 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8009732:	68fb      	ldr	r3, [r7, #12]
 8009734:	f003 0310 	and.w	r3, r3, #16
 8009738:	2b00      	cmp	r3, #0
 800973a:	d01b      	beq.n	8009774 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	681b      	ldr	r3, [r3, #0]
 8009740:	f06f 0210 	mvn.w	r2, #16
 8009744:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	2208      	movs	r2, #8
 800974a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	681b      	ldr	r3, [r3, #0]
 8009750:	69db      	ldr	r3, [r3, #28]
 8009752:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009756:	2b00      	cmp	r3, #0
 8009758:	d003      	beq.n	8009762 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800975a:	6878      	ldr	r0, [r7, #4]
 800975c:	f000 f9e9 	bl	8009b32 <HAL_TIM_IC_CaptureCallback>
 8009760:	e005      	b.n	800976e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009762:	6878      	ldr	r0, [r7, #4]
 8009764:	f000 f9db 	bl	8009b1e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009768:	6878      	ldr	r0, [r7, #4]
 800976a:	f000 f9ec 	bl	8009b46 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	2200      	movs	r2, #0
 8009772:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8009774:	68bb      	ldr	r3, [r7, #8]
 8009776:	f003 0301 	and.w	r3, r3, #1
 800977a:	2b00      	cmp	r3, #0
 800977c:	d00c      	beq.n	8009798 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800977e:	68fb      	ldr	r3, [r7, #12]
 8009780:	f003 0301 	and.w	r3, r3, #1
 8009784:	2b00      	cmp	r3, #0
 8009786:	d007      	beq.n	8009798 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	681b      	ldr	r3, [r3, #0]
 800978c:	f06f 0201 	mvn.w	r2, #1
 8009790:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009792:	6878      	ldr	r0, [r7, #4]
 8009794:	f7f8 fdd4 	bl	8002340 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8009798:	68bb      	ldr	r3, [r7, #8]
 800979a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800979e:	2b00      	cmp	r3, #0
 80097a0:	d00c      	beq.n	80097bc <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80097a2:	68fb      	ldr	r3, [r7, #12]
 80097a4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80097a8:	2b00      	cmp	r3, #0
 80097aa:	d007      	beq.n	80097bc <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	681b      	ldr	r3, [r3, #0]
 80097b0:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80097b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80097b6:	6878      	ldr	r0, [r7, #4]
 80097b8:	f000 fd76 	bl	800a2a8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80097bc:	68bb      	ldr	r3, [r7, #8]
 80097be:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80097c2:	2b00      	cmp	r3, #0
 80097c4:	d00c      	beq.n	80097e0 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80097c6:	68fb      	ldr	r3, [r7, #12]
 80097c8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80097cc:	2b00      	cmp	r3, #0
 80097ce:	d007      	beq.n	80097e0 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	681b      	ldr	r3, [r3, #0]
 80097d4:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80097d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80097da:	6878      	ldr	r0, [r7, #4]
 80097dc:	f000 f9bd 	bl	8009b5a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80097e0:	68bb      	ldr	r3, [r7, #8]
 80097e2:	f003 0320 	and.w	r3, r3, #32
 80097e6:	2b00      	cmp	r3, #0
 80097e8:	d00c      	beq.n	8009804 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80097ea:	68fb      	ldr	r3, [r7, #12]
 80097ec:	f003 0320 	and.w	r3, r3, #32
 80097f0:	2b00      	cmp	r3, #0
 80097f2:	d007      	beq.n	8009804 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	681b      	ldr	r3, [r3, #0]
 80097f8:	f06f 0220 	mvn.w	r2, #32
 80097fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80097fe:	6878      	ldr	r0, [r7, #4]
 8009800:	f000 fd48 	bl	800a294 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009804:	bf00      	nop
 8009806:	3710      	adds	r7, #16
 8009808:	46bd      	mov	sp, r7
 800980a:	bd80      	pop	{r7, pc}

0800980c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800980c:	b580      	push	{r7, lr}
 800980e:	b086      	sub	sp, #24
 8009810:	af00      	add	r7, sp, #0
 8009812:	60f8      	str	r0, [r7, #12]
 8009814:	60b9      	str	r1, [r7, #8]
 8009816:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009818:	2300      	movs	r3, #0
 800981a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800981c:	68fb      	ldr	r3, [r7, #12]
 800981e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009822:	2b01      	cmp	r3, #1
 8009824:	d101      	bne.n	800982a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8009826:	2302      	movs	r3, #2
 8009828:	e0ae      	b.n	8009988 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800982a:	68fb      	ldr	r3, [r7, #12]
 800982c:	2201      	movs	r2, #1
 800982e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	2b0c      	cmp	r3, #12
 8009836:	f200 809f 	bhi.w	8009978 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800983a:	a201      	add	r2, pc, #4	@ (adr r2, 8009840 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800983c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009840:	08009875 	.word	0x08009875
 8009844:	08009979 	.word	0x08009979
 8009848:	08009979 	.word	0x08009979
 800984c:	08009979 	.word	0x08009979
 8009850:	080098b5 	.word	0x080098b5
 8009854:	08009979 	.word	0x08009979
 8009858:	08009979 	.word	0x08009979
 800985c:	08009979 	.word	0x08009979
 8009860:	080098f7 	.word	0x080098f7
 8009864:	08009979 	.word	0x08009979
 8009868:	08009979 	.word	0x08009979
 800986c:	08009979 	.word	0x08009979
 8009870:	08009937 	.word	0x08009937
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8009874:	68fb      	ldr	r3, [r7, #12]
 8009876:	681b      	ldr	r3, [r3, #0]
 8009878:	68b9      	ldr	r1, [r7, #8]
 800987a:	4618      	mov	r0, r3
 800987c:	f000 f9fe 	bl	8009c7c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8009880:	68fb      	ldr	r3, [r7, #12]
 8009882:	681b      	ldr	r3, [r3, #0]
 8009884:	699a      	ldr	r2, [r3, #24]
 8009886:	68fb      	ldr	r3, [r7, #12]
 8009888:	681b      	ldr	r3, [r3, #0]
 800988a:	f042 0208 	orr.w	r2, r2, #8
 800988e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8009890:	68fb      	ldr	r3, [r7, #12]
 8009892:	681b      	ldr	r3, [r3, #0]
 8009894:	699a      	ldr	r2, [r3, #24]
 8009896:	68fb      	ldr	r3, [r7, #12]
 8009898:	681b      	ldr	r3, [r3, #0]
 800989a:	f022 0204 	bic.w	r2, r2, #4
 800989e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80098a0:	68fb      	ldr	r3, [r7, #12]
 80098a2:	681b      	ldr	r3, [r3, #0]
 80098a4:	6999      	ldr	r1, [r3, #24]
 80098a6:	68bb      	ldr	r3, [r7, #8]
 80098a8:	691a      	ldr	r2, [r3, #16]
 80098aa:	68fb      	ldr	r3, [r7, #12]
 80098ac:	681b      	ldr	r3, [r3, #0]
 80098ae:	430a      	orrs	r2, r1
 80098b0:	619a      	str	r2, [r3, #24]
      break;
 80098b2:	e064      	b.n	800997e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80098b4:	68fb      	ldr	r3, [r7, #12]
 80098b6:	681b      	ldr	r3, [r3, #0]
 80098b8:	68b9      	ldr	r1, [r7, #8]
 80098ba:	4618      	mov	r0, r3
 80098bc:	f000 fa44 	bl	8009d48 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80098c0:	68fb      	ldr	r3, [r7, #12]
 80098c2:	681b      	ldr	r3, [r3, #0]
 80098c4:	699a      	ldr	r2, [r3, #24]
 80098c6:	68fb      	ldr	r3, [r7, #12]
 80098c8:	681b      	ldr	r3, [r3, #0]
 80098ca:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80098ce:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80098d0:	68fb      	ldr	r3, [r7, #12]
 80098d2:	681b      	ldr	r3, [r3, #0]
 80098d4:	699a      	ldr	r2, [r3, #24]
 80098d6:	68fb      	ldr	r3, [r7, #12]
 80098d8:	681b      	ldr	r3, [r3, #0]
 80098da:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80098de:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80098e0:	68fb      	ldr	r3, [r7, #12]
 80098e2:	681b      	ldr	r3, [r3, #0]
 80098e4:	6999      	ldr	r1, [r3, #24]
 80098e6:	68bb      	ldr	r3, [r7, #8]
 80098e8:	691b      	ldr	r3, [r3, #16]
 80098ea:	021a      	lsls	r2, r3, #8
 80098ec:	68fb      	ldr	r3, [r7, #12]
 80098ee:	681b      	ldr	r3, [r3, #0]
 80098f0:	430a      	orrs	r2, r1
 80098f2:	619a      	str	r2, [r3, #24]
      break;
 80098f4:	e043      	b.n	800997e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80098f6:	68fb      	ldr	r3, [r7, #12]
 80098f8:	681b      	ldr	r3, [r3, #0]
 80098fa:	68b9      	ldr	r1, [r7, #8]
 80098fc:	4618      	mov	r0, r3
 80098fe:	f000 fa8f 	bl	8009e20 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8009902:	68fb      	ldr	r3, [r7, #12]
 8009904:	681b      	ldr	r3, [r3, #0]
 8009906:	69da      	ldr	r2, [r3, #28]
 8009908:	68fb      	ldr	r3, [r7, #12]
 800990a:	681b      	ldr	r3, [r3, #0]
 800990c:	f042 0208 	orr.w	r2, r2, #8
 8009910:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8009912:	68fb      	ldr	r3, [r7, #12]
 8009914:	681b      	ldr	r3, [r3, #0]
 8009916:	69da      	ldr	r2, [r3, #28]
 8009918:	68fb      	ldr	r3, [r7, #12]
 800991a:	681b      	ldr	r3, [r3, #0]
 800991c:	f022 0204 	bic.w	r2, r2, #4
 8009920:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8009922:	68fb      	ldr	r3, [r7, #12]
 8009924:	681b      	ldr	r3, [r3, #0]
 8009926:	69d9      	ldr	r1, [r3, #28]
 8009928:	68bb      	ldr	r3, [r7, #8]
 800992a:	691a      	ldr	r2, [r3, #16]
 800992c:	68fb      	ldr	r3, [r7, #12]
 800992e:	681b      	ldr	r3, [r3, #0]
 8009930:	430a      	orrs	r2, r1
 8009932:	61da      	str	r2, [r3, #28]
      break;
 8009934:	e023      	b.n	800997e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8009936:	68fb      	ldr	r3, [r7, #12]
 8009938:	681b      	ldr	r3, [r3, #0]
 800993a:	68b9      	ldr	r1, [r7, #8]
 800993c:	4618      	mov	r0, r3
 800993e:	f000 fad9 	bl	8009ef4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8009942:	68fb      	ldr	r3, [r7, #12]
 8009944:	681b      	ldr	r3, [r3, #0]
 8009946:	69da      	ldr	r2, [r3, #28]
 8009948:	68fb      	ldr	r3, [r7, #12]
 800994a:	681b      	ldr	r3, [r3, #0]
 800994c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8009950:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8009952:	68fb      	ldr	r3, [r7, #12]
 8009954:	681b      	ldr	r3, [r3, #0]
 8009956:	69da      	ldr	r2, [r3, #28]
 8009958:	68fb      	ldr	r3, [r7, #12]
 800995a:	681b      	ldr	r3, [r3, #0]
 800995c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8009960:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8009962:	68fb      	ldr	r3, [r7, #12]
 8009964:	681b      	ldr	r3, [r3, #0]
 8009966:	69d9      	ldr	r1, [r3, #28]
 8009968:	68bb      	ldr	r3, [r7, #8]
 800996a:	691b      	ldr	r3, [r3, #16]
 800996c:	021a      	lsls	r2, r3, #8
 800996e:	68fb      	ldr	r3, [r7, #12]
 8009970:	681b      	ldr	r3, [r3, #0]
 8009972:	430a      	orrs	r2, r1
 8009974:	61da      	str	r2, [r3, #28]
      break;
 8009976:	e002      	b.n	800997e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8009978:	2301      	movs	r3, #1
 800997a:	75fb      	strb	r3, [r7, #23]
      break;
 800997c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800997e:	68fb      	ldr	r3, [r7, #12]
 8009980:	2200      	movs	r2, #0
 8009982:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8009986:	7dfb      	ldrb	r3, [r7, #23]
}
 8009988:	4618      	mov	r0, r3
 800998a:	3718      	adds	r7, #24
 800998c:	46bd      	mov	sp, r7
 800998e:	bd80      	pop	{r7, pc}

08009990 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8009990:	b580      	push	{r7, lr}
 8009992:	b084      	sub	sp, #16
 8009994:	af00      	add	r7, sp, #0
 8009996:	6078      	str	r0, [r7, #4]
 8009998:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800999a:	2300      	movs	r3, #0
 800999c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80099a4:	2b01      	cmp	r3, #1
 80099a6:	d101      	bne.n	80099ac <HAL_TIM_ConfigClockSource+0x1c>
 80099a8:	2302      	movs	r3, #2
 80099aa:	e0b4      	b.n	8009b16 <HAL_TIM_ConfigClockSource+0x186>
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	2201      	movs	r2, #1
 80099b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	2202      	movs	r2, #2
 80099b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	681b      	ldr	r3, [r3, #0]
 80099c0:	689b      	ldr	r3, [r3, #8]
 80099c2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80099c4:	68bb      	ldr	r3, [r7, #8]
 80099c6:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80099ca:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80099cc:	68bb      	ldr	r3, [r7, #8]
 80099ce:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80099d2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	681b      	ldr	r3, [r3, #0]
 80099d8:	68ba      	ldr	r2, [r7, #8]
 80099da:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80099dc:	683b      	ldr	r3, [r7, #0]
 80099de:	681b      	ldr	r3, [r3, #0]
 80099e0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80099e4:	d03e      	beq.n	8009a64 <HAL_TIM_ConfigClockSource+0xd4>
 80099e6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80099ea:	f200 8087 	bhi.w	8009afc <HAL_TIM_ConfigClockSource+0x16c>
 80099ee:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80099f2:	f000 8086 	beq.w	8009b02 <HAL_TIM_ConfigClockSource+0x172>
 80099f6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80099fa:	d87f      	bhi.n	8009afc <HAL_TIM_ConfigClockSource+0x16c>
 80099fc:	2b70      	cmp	r3, #112	@ 0x70
 80099fe:	d01a      	beq.n	8009a36 <HAL_TIM_ConfigClockSource+0xa6>
 8009a00:	2b70      	cmp	r3, #112	@ 0x70
 8009a02:	d87b      	bhi.n	8009afc <HAL_TIM_ConfigClockSource+0x16c>
 8009a04:	2b60      	cmp	r3, #96	@ 0x60
 8009a06:	d050      	beq.n	8009aaa <HAL_TIM_ConfigClockSource+0x11a>
 8009a08:	2b60      	cmp	r3, #96	@ 0x60
 8009a0a:	d877      	bhi.n	8009afc <HAL_TIM_ConfigClockSource+0x16c>
 8009a0c:	2b50      	cmp	r3, #80	@ 0x50
 8009a0e:	d03c      	beq.n	8009a8a <HAL_TIM_ConfigClockSource+0xfa>
 8009a10:	2b50      	cmp	r3, #80	@ 0x50
 8009a12:	d873      	bhi.n	8009afc <HAL_TIM_ConfigClockSource+0x16c>
 8009a14:	2b40      	cmp	r3, #64	@ 0x40
 8009a16:	d058      	beq.n	8009aca <HAL_TIM_ConfigClockSource+0x13a>
 8009a18:	2b40      	cmp	r3, #64	@ 0x40
 8009a1a:	d86f      	bhi.n	8009afc <HAL_TIM_ConfigClockSource+0x16c>
 8009a1c:	2b30      	cmp	r3, #48	@ 0x30
 8009a1e:	d064      	beq.n	8009aea <HAL_TIM_ConfigClockSource+0x15a>
 8009a20:	2b30      	cmp	r3, #48	@ 0x30
 8009a22:	d86b      	bhi.n	8009afc <HAL_TIM_ConfigClockSource+0x16c>
 8009a24:	2b20      	cmp	r3, #32
 8009a26:	d060      	beq.n	8009aea <HAL_TIM_ConfigClockSource+0x15a>
 8009a28:	2b20      	cmp	r3, #32
 8009a2a:	d867      	bhi.n	8009afc <HAL_TIM_ConfigClockSource+0x16c>
 8009a2c:	2b00      	cmp	r3, #0
 8009a2e:	d05c      	beq.n	8009aea <HAL_TIM_ConfigClockSource+0x15a>
 8009a30:	2b10      	cmp	r3, #16
 8009a32:	d05a      	beq.n	8009aea <HAL_TIM_ConfigClockSource+0x15a>
 8009a34:	e062      	b.n	8009afc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8009a3a:	683b      	ldr	r3, [r7, #0]
 8009a3c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8009a3e:	683b      	ldr	r3, [r7, #0]
 8009a40:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8009a42:	683b      	ldr	r3, [r7, #0]
 8009a44:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8009a46:	f000 fb1f 	bl	800a088 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	681b      	ldr	r3, [r3, #0]
 8009a4e:	689b      	ldr	r3, [r3, #8]
 8009a50:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8009a52:	68bb      	ldr	r3, [r7, #8]
 8009a54:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8009a58:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	681b      	ldr	r3, [r3, #0]
 8009a5e:	68ba      	ldr	r2, [r7, #8]
 8009a60:	609a      	str	r2, [r3, #8]
      break;
 8009a62:	e04f      	b.n	8009b04 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8009a68:	683b      	ldr	r3, [r7, #0]
 8009a6a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8009a6c:	683b      	ldr	r3, [r7, #0]
 8009a6e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8009a70:	683b      	ldr	r3, [r7, #0]
 8009a72:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8009a74:	f000 fb08 	bl	800a088 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	681b      	ldr	r3, [r3, #0]
 8009a7c:	689a      	ldr	r2, [r3, #8]
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	681b      	ldr	r3, [r3, #0]
 8009a82:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8009a86:	609a      	str	r2, [r3, #8]
      break;
 8009a88:	e03c      	b.n	8009b04 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009a8e:	683b      	ldr	r3, [r7, #0]
 8009a90:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009a92:	683b      	ldr	r3, [r7, #0]
 8009a94:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009a96:	461a      	mov	r2, r3
 8009a98:	f000 fa7c 	bl	8009f94 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	681b      	ldr	r3, [r3, #0]
 8009aa0:	2150      	movs	r1, #80	@ 0x50
 8009aa2:	4618      	mov	r0, r3
 8009aa4:	f000 fad5 	bl	800a052 <TIM_ITRx_SetConfig>
      break;
 8009aa8:	e02c      	b.n	8009b04 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009aae:	683b      	ldr	r3, [r7, #0]
 8009ab0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009ab2:	683b      	ldr	r3, [r7, #0]
 8009ab4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8009ab6:	461a      	mov	r2, r3
 8009ab8:	f000 fa9b 	bl	8009ff2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	681b      	ldr	r3, [r3, #0]
 8009ac0:	2160      	movs	r1, #96	@ 0x60
 8009ac2:	4618      	mov	r0, r3
 8009ac4:	f000 fac5 	bl	800a052 <TIM_ITRx_SetConfig>
      break;
 8009ac8:	e01c      	b.n	8009b04 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009ace:	683b      	ldr	r3, [r7, #0]
 8009ad0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009ad2:	683b      	ldr	r3, [r7, #0]
 8009ad4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009ad6:	461a      	mov	r2, r3
 8009ad8:	f000 fa5c 	bl	8009f94 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	681b      	ldr	r3, [r3, #0]
 8009ae0:	2140      	movs	r1, #64	@ 0x40
 8009ae2:	4618      	mov	r0, r3
 8009ae4:	f000 fab5 	bl	800a052 <TIM_ITRx_SetConfig>
      break;
 8009ae8:	e00c      	b.n	8009b04 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	681a      	ldr	r2, [r3, #0]
 8009aee:	683b      	ldr	r3, [r7, #0]
 8009af0:	681b      	ldr	r3, [r3, #0]
 8009af2:	4619      	mov	r1, r3
 8009af4:	4610      	mov	r0, r2
 8009af6:	f000 faac 	bl	800a052 <TIM_ITRx_SetConfig>
      break;
 8009afa:	e003      	b.n	8009b04 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8009afc:	2301      	movs	r3, #1
 8009afe:	73fb      	strb	r3, [r7, #15]
      break;
 8009b00:	e000      	b.n	8009b04 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8009b02:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	2201      	movs	r2, #1
 8009b08:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	2200      	movs	r2, #0
 8009b10:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8009b14:	7bfb      	ldrb	r3, [r7, #15]
}
 8009b16:	4618      	mov	r0, r3
 8009b18:	3710      	adds	r7, #16
 8009b1a:	46bd      	mov	sp, r7
 8009b1c:	bd80      	pop	{r7, pc}

08009b1e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009b1e:	b480      	push	{r7}
 8009b20:	b083      	sub	sp, #12
 8009b22:	af00      	add	r7, sp, #0
 8009b24:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009b26:	bf00      	nop
 8009b28:	370c      	adds	r7, #12
 8009b2a:	46bd      	mov	sp, r7
 8009b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b30:	4770      	bx	lr

08009b32 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009b32:	b480      	push	{r7}
 8009b34:	b083      	sub	sp, #12
 8009b36:	af00      	add	r7, sp, #0
 8009b38:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009b3a:	bf00      	nop
 8009b3c:	370c      	adds	r7, #12
 8009b3e:	46bd      	mov	sp, r7
 8009b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b44:	4770      	bx	lr

08009b46 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009b46:	b480      	push	{r7}
 8009b48:	b083      	sub	sp, #12
 8009b4a:	af00      	add	r7, sp, #0
 8009b4c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009b4e:	bf00      	nop
 8009b50:	370c      	adds	r7, #12
 8009b52:	46bd      	mov	sp, r7
 8009b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b58:	4770      	bx	lr

08009b5a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009b5a:	b480      	push	{r7}
 8009b5c:	b083      	sub	sp, #12
 8009b5e:	af00      	add	r7, sp, #0
 8009b60:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009b62:	bf00      	nop
 8009b64:	370c      	adds	r7, #12
 8009b66:	46bd      	mov	sp, r7
 8009b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b6c:	4770      	bx	lr
	...

08009b70 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8009b70:	b480      	push	{r7}
 8009b72:	b085      	sub	sp, #20
 8009b74:	af00      	add	r7, sp, #0
 8009b76:	6078      	str	r0, [r7, #4]
 8009b78:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	681b      	ldr	r3, [r3, #0]
 8009b7e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	4a37      	ldr	r2, [pc, #220]	@ (8009c60 <TIM_Base_SetConfig+0xf0>)
 8009b84:	4293      	cmp	r3, r2
 8009b86:	d00f      	beq.n	8009ba8 <TIM_Base_SetConfig+0x38>
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009b8e:	d00b      	beq.n	8009ba8 <TIM_Base_SetConfig+0x38>
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	4a34      	ldr	r2, [pc, #208]	@ (8009c64 <TIM_Base_SetConfig+0xf4>)
 8009b94:	4293      	cmp	r3, r2
 8009b96:	d007      	beq.n	8009ba8 <TIM_Base_SetConfig+0x38>
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	4a33      	ldr	r2, [pc, #204]	@ (8009c68 <TIM_Base_SetConfig+0xf8>)
 8009b9c:	4293      	cmp	r3, r2
 8009b9e:	d003      	beq.n	8009ba8 <TIM_Base_SetConfig+0x38>
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	4a32      	ldr	r2, [pc, #200]	@ (8009c6c <TIM_Base_SetConfig+0xfc>)
 8009ba4:	4293      	cmp	r3, r2
 8009ba6:	d108      	bne.n	8009bba <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009ba8:	68fb      	ldr	r3, [r7, #12]
 8009baa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009bae:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009bb0:	683b      	ldr	r3, [r7, #0]
 8009bb2:	685b      	ldr	r3, [r3, #4]
 8009bb4:	68fa      	ldr	r2, [r7, #12]
 8009bb6:	4313      	orrs	r3, r2
 8009bb8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	4a28      	ldr	r2, [pc, #160]	@ (8009c60 <TIM_Base_SetConfig+0xf0>)
 8009bbe:	4293      	cmp	r3, r2
 8009bc0:	d01b      	beq.n	8009bfa <TIM_Base_SetConfig+0x8a>
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009bc8:	d017      	beq.n	8009bfa <TIM_Base_SetConfig+0x8a>
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	4a25      	ldr	r2, [pc, #148]	@ (8009c64 <TIM_Base_SetConfig+0xf4>)
 8009bce:	4293      	cmp	r3, r2
 8009bd0:	d013      	beq.n	8009bfa <TIM_Base_SetConfig+0x8a>
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	4a24      	ldr	r2, [pc, #144]	@ (8009c68 <TIM_Base_SetConfig+0xf8>)
 8009bd6:	4293      	cmp	r3, r2
 8009bd8:	d00f      	beq.n	8009bfa <TIM_Base_SetConfig+0x8a>
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	4a23      	ldr	r2, [pc, #140]	@ (8009c6c <TIM_Base_SetConfig+0xfc>)
 8009bde:	4293      	cmp	r3, r2
 8009be0:	d00b      	beq.n	8009bfa <TIM_Base_SetConfig+0x8a>
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	4a22      	ldr	r2, [pc, #136]	@ (8009c70 <TIM_Base_SetConfig+0x100>)
 8009be6:	4293      	cmp	r3, r2
 8009be8:	d007      	beq.n	8009bfa <TIM_Base_SetConfig+0x8a>
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	4a21      	ldr	r2, [pc, #132]	@ (8009c74 <TIM_Base_SetConfig+0x104>)
 8009bee:	4293      	cmp	r3, r2
 8009bf0:	d003      	beq.n	8009bfa <TIM_Base_SetConfig+0x8a>
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	4a20      	ldr	r2, [pc, #128]	@ (8009c78 <TIM_Base_SetConfig+0x108>)
 8009bf6:	4293      	cmp	r3, r2
 8009bf8:	d108      	bne.n	8009c0c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009bfa:	68fb      	ldr	r3, [r7, #12]
 8009bfc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009c00:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009c02:	683b      	ldr	r3, [r7, #0]
 8009c04:	68db      	ldr	r3, [r3, #12]
 8009c06:	68fa      	ldr	r2, [r7, #12]
 8009c08:	4313      	orrs	r3, r2
 8009c0a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009c0c:	68fb      	ldr	r3, [r7, #12]
 8009c0e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8009c12:	683b      	ldr	r3, [r7, #0]
 8009c14:	695b      	ldr	r3, [r3, #20]
 8009c16:	4313      	orrs	r3, r2
 8009c18:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009c1a:	683b      	ldr	r3, [r7, #0]
 8009c1c:	689a      	ldr	r2, [r3, #8]
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009c22:	683b      	ldr	r3, [r7, #0]
 8009c24:	681a      	ldr	r2, [r3, #0]
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	4a0c      	ldr	r2, [pc, #48]	@ (8009c60 <TIM_Base_SetConfig+0xf0>)
 8009c2e:	4293      	cmp	r3, r2
 8009c30:	d103      	bne.n	8009c3a <TIM_Base_SetConfig+0xca>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009c32:	683b      	ldr	r3, [r7, #0]
 8009c34:	691a      	ldr	r2, [r3, #16]
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	681b      	ldr	r3, [r3, #0]
 8009c3e:	f043 0204 	orr.w	r2, r3, #4
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	2201      	movs	r2, #1
 8009c4a:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	68fa      	ldr	r2, [r7, #12]
 8009c50:	601a      	str	r2, [r3, #0]
}
 8009c52:	bf00      	nop
 8009c54:	3714      	adds	r7, #20
 8009c56:	46bd      	mov	sp, r7
 8009c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c5c:	4770      	bx	lr
 8009c5e:	bf00      	nop
 8009c60:	40010000 	.word	0x40010000
 8009c64:	40000400 	.word	0x40000400
 8009c68:	40000800 	.word	0x40000800
 8009c6c:	40000c00 	.word	0x40000c00
 8009c70:	40014000 	.word	0x40014000
 8009c74:	40014400 	.word	0x40014400
 8009c78:	40014800 	.word	0x40014800

08009c7c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009c7c:	b480      	push	{r7}
 8009c7e:	b087      	sub	sp, #28
 8009c80:	af00      	add	r7, sp, #0
 8009c82:	6078      	str	r0, [r7, #4]
 8009c84:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	6a1b      	ldr	r3, [r3, #32]
 8009c8a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	6a1b      	ldr	r3, [r3, #32]
 8009c90:	f023 0201 	bic.w	r2, r3, #1
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	685b      	ldr	r3, [r3, #4]
 8009c9c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	699b      	ldr	r3, [r3, #24]
 8009ca2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8009ca4:	68fb      	ldr	r3, [r7, #12]
 8009ca6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009caa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8009cac:	68fb      	ldr	r3, [r7, #12]
 8009cae:	f023 0303 	bic.w	r3, r3, #3
 8009cb2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009cb4:	683b      	ldr	r3, [r7, #0]
 8009cb6:	681b      	ldr	r3, [r3, #0]
 8009cb8:	68fa      	ldr	r2, [r7, #12]
 8009cba:	4313      	orrs	r3, r2
 8009cbc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8009cbe:	697b      	ldr	r3, [r7, #20]
 8009cc0:	f023 0302 	bic.w	r3, r3, #2
 8009cc4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8009cc6:	683b      	ldr	r3, [r7, #0]
 8009cc8:	689b      	ldr	r3, [r3, #8]
 8009cca:	697a      	ldr	r2, [r7, #20]
 8009ccc:	4313      	orrs	r3, r2
 8009cce:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	4a1c      	ldr	r2, [pc, #112]	@ (8009d44 <TIM_OC1_SetConfig+0xc8>)
 8009cd4:	4293      	cmp	r3, r2
 8009cd6:	d10c      	bne.n	8009cf2 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8009cd8:	697b      	ldr	r3, [r7, #20]
 8009cda:	f023 0308 	bic.w	r3, r3, #8
 8009cde:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8009ce0:	683b      	ldr	r3, [r7, #0]
 8009ce2:	68db      	ldr	r3, [r3, #12]
 8009ce4:	697a      	ldr	r2, [r7, #20]
 8009ce6:	4313      	orrs	r3, r2
 8009ce8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8009cea:	697b      	ldr	r3, [r7, #20]
 8009cec:	f023 0304 	bic.w	r3, r3, #4
 8009cf0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	4a13      	ldr	r2, [pc, #76]	@ (8009d44 <TIM_OC1_SetConfig+0xc8>)
 8009cf6:	4293      	cmp	r3, r2
 8009cf8:	d111      	bne.n	8009d1e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8009cfa:	693b      	ldr	r3, [r7, #16]
 8009cfc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009d00:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8009d02:	693b      	ldr	r3, [r7, #16]
 8009d04:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8009d08:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8009d0a:	683b      	ldr	r3, [r7, #0]
 8009d0c:	695b      	ldr	r3, [r3, #20]
 8009d0e:	693a      	ldr	r2, [r7, #16]
 8009d10:	4313      	orrs	r3, r2
 8009d12:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8009d14:	683b      	ldr	r3, [r7, #0]
 8009d16:	699b      	ldr	r3, [r3, #24]
 8009d18:	693a      	ldr	r2, [r7, #16]
 8009d1a:	4313      	orrs	r3, r2
 8009d1c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	693a      	ldr	r2, [r7, #16]
 8009d22:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	68fa      	ldr	r2, [r7, #12]
 8009d28:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8009d2a:	683b      	ldr	r3, [r7, #0]
 8009d2c:	685a      	ldr	r2, [r3, #4]
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	697a      	ldr	r2, [r7, #20]
 8009d36:	621a      	str	r2, [r3, #32]
}
 8009d38:	bf00      	nop
 8009d3a:	371c      	adds	r7, #28
 8009d3c:	46bd      	mov	sp, r7
 8009d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d42:	4770      	bx	lr
 8009d44:	40010000 	.word	0x40010000

08009d48 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009d48:	b480      	push	{r7}
 8009d4a:	b087      	sub	sp, #28
 8009d4c:	af00      	add	r7, sp, #0
 8009d4e:	6078      	str	r0, [r7, #4]
 8009d50:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	6a1b      	ldr	r3, [r3, #32]
 8009d56:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	6a1b      	ldr	r3, [r3, #32]
 8009d5c:	f023 0210 	bic.w	r2, r3, #16
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	685b      	ldr	r3, [r3, #4]
 8009d68:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	699b      	ldr	r3, [r3, #24]
 8009d6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8009d70:	68fb      	ldr	r3, [r7, #12]
 8009d72:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009d76:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8009d78:	68fb      	ldr	r3, [r7, #12]
 8009d7a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009d7e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009d80:	683b      	ldr	r3, [r7, #0]
 8009d82:	681b      	ldr	r3, [r3, #0]
 8009d84:	021b      	lsls	r3, r3, #8
 8009d86:	68fa      	ldr	r2, [r7, #12]
 8009d88:	4313      	orrs	r3, r2
 8009d8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8009d8c:	697b      	ldr	r3, [r7, #20]
 8009d8e:	f023 0320 	bic.w	r3, r3, #32
 8009d92:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8009d94:	683b      	ldr	r3, [r7, #0]
 8009d96:	689b      	ldr	r3, [r3, #8]
 8009d98:	011b      	lsls	r3, r3, #4
 8009d9a:	697a      	ldr	r2, [r7, #20]
 8009d9c:	4313      	orrs	r3, r2
 8009d9e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	4a1e      	ldr	r2, [pc, #120]	@ (8009e1c <TIM_OC2_SetConfig+0xd4>)
 8009da4:	4293      	cmp	r3, r2
 8009da6:	d10d      	bne.n	8009dc4 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8009da8:	697b      	ldr	r3, [r7, #20]
 8009daa:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009dae:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8009db0:	683b      	ldr	r3, [r7, #0]
 8009db2:	68db      	ldr	r3, [r3, #12]
 8009db4:	011b      	lsls	r3, r3, #4
 8009db6:	697a      	ldr	r2, [r7, #20]
 8009db8:	4313      	orrs	r3, r2
 8009dba:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8009dbc:	697b      	ldr	r3, [r7, #20]
 8009dbe:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009dc2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	4a15      	ldr	r2, [pc, #84]	@ (8009e1c <TIM_OC2_SetConfig+0xd4>)
 8009dc8:	4293      	cmp	r3, r2
 8009dca:	d113      	bne.n	8009df4 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8009dcc:	693b      	ldr	r3, [r7, #16]
 8009dce:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8009dd2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8009dd4:	693b      	ldr	r3, [r7, #16]
 8009dd6:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8009dda:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8009ddc:	683b      	ldr	r3, [r7, #0]
 8009dde:	695b      	ldr	r3, [r3, #20]
 8009de0:	009b      	lsls	r3, r3, #2
 8009de2:	693a      	ldr	r2, [r7, #16]
 8009de4:	4313      	orrs	r3, r2
 8009de6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8009de8:	683b      	ldr	r3, [r7, #0]
 8009dea:	699b      	ldr	r3, [r3, #24]
 8009dec:	009b      	lsls	r3, r3, #2
 8009dee:	693a      	ldr	r2, [r7, #16]
 8009df0:	4313      	orrs	r3, r2
 8009df2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	693a      	ldr	r2, [r7, #16]
 8009df8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	68fa      	ldr	r2, [r7, #12]
 8009dfe:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8009e00:	683b      	ldr	r3, [r7, #0]
 8009e02:	685a      	ldr	r2, [r3, #4]
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	697a      	ldr	r2, [r7, #20]
 8009e0c:	621a      	str	r2, [r3, #32]
}
 8009e0e:	bf00      	nop
 8009e10:	371c      	adds	r7, #28
 8009e12:	46bd      	mov	sp, r7
 8009e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e18:	4770      	bx	lr
 8009e1a:	bf00      	nop
 8009e1c:	40010000 	.word	0x40010000

08009e20 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009e20:	b480      	push	{r7}
 8009e22:	b087      	sub	sp, #28
 8009e24:	af00      	add	r7, sp, #0
 8009e26:	6078      	str	r0, [r7, #4]
 8009e28:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	6a1b      	ldr	r3, [r3, #32]
 8009e2e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	6a1b      	ldr	r3, [r3, #32]
 8009e34:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	685b      	ldr	r3, [r3, #4]
 8009e40:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	69db      	ldr	r3, [r3, #28]
 8009e46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8009e48:	68fb      	ldr	r3, [r7, #12]
 8009e4a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009e4e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8009e50:	68fb      	ldr	r3, [r7, #12]
 8009e52:	f023 0303 	bic.w	r3, r3, #3
 8009e56:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009e58:	683b      	ldr	r3, [r7, #0]
 8009e5a:	681b      	ldr	r3, [r3, #0]
 8009e5c:	68fa      	ldr	r2, [r7, #12]
 8009e5e:	4313      	orrs	r3, r2
 8009e60:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8009e62:	697b      	ldr	r3, [r7, #20]
 8009e64:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8009e68:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8009e6a:	683b      	ldr	r3, [r7, #0]
 8009e6c:	689b      	ldr	r3, [r3, #8]
 8009e6e:	021b      	lsls	r3, r3, #8
 8009e70:	697a      	ldr	r2, [r7, #20]
 8009e72:	4313      	orrs	r3, r2
 8009e74:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	4a1d      	ldr	r2, [pc, #116]	@ (8009ef0 <TIM_OC3_SetConfig+0xd0>)
 8009e7a:	4293      	cmp	r3, r2
 8009e7c:	d10d      	bne.n	8009e9a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8009e7e:	697b      	ldr	r3, [r7, #20]
 8009e80:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8009e84:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8009e86:	683b      	ldr	r3, [r7, #0]
 8009e88:	68db      	ldr	r3, [r3, #12]
 8009e8a:	021b      	lsls	r3, r3, #8
 8009e8c:	697a      	ldr	r2, [r7, #20]
 8009e8e:	4313      	orrs	r3, r2
 8009e90:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8009e92:	697b      	ldr	r3, [r7, #20]
 8009e94:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8009e98:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	4a14      	ldr	r2, [pc, #80]	@ (8009ef0 <TIM_OC3_SetConfig+0xd0>)
 8009e9e:	4293      	cmp	r3, r2
 8009ea0:	d113      	bne.n	8009eca <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8009ea2:	693b      	ldr	r3, [r7, #16]
 8009ea4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8009ea8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8009eaa:	693b      	ldr	r3, [r7, #16]
 8009eac:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8009eb0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8009eb2:	683b      	ldr	r3, [r7, #0]
 8009eb4:	695b      	ldr	r3, [r3, #20]
 8009eb6:	011b      	lsls	r3, r3, #4
 8009eb8:	693a      	ldr	r2, [r7, #16]
 8009eba:	4313      	orrs	r3, r2
 8009ebc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8009ebe:	683b      	ldr	r3, [r7, #0]
 8009ec0:	699b      	ldr	r3, [r3, #24]
 8009ec2:	011b      	lsls	r3, r3, #4
 8009ec4:	693a      	ldr	r2, [r7, #16]
 8009ec6:	4313      	orrs	r3, r2
 8009ec8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	693a      	ldr	r2, [r7, #16]
 8009ece:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	68fa      	ldr	r2, [r7, #12]
 8009ed4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8009ed6:	683b      	ldr	r3, [r7, #0]
 8009ed8:	685a      	ldr	r2, [r3, #4]
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	697a      	ldr	r2, [r7, #20]
 8009ee2:	621a      	str	r2, [r3, #32]
}
 8009ee4:	bf00      	nop
 8009ee6:	371c      	adds	r7, #28
 8009ee8:	46bd      	mov	sp, r7
 8009eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eee:	4770      	bx	lr
 8009ef0:	40010000 	.word	0x40010000

08009ef4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009ef4:	b480      	push	{r7}
 8009ef6:	b087      	sub	sp, #28
 8009ef8:	af00      	add	r7, sp, #0
 8009efa:	6078      	str	r0, [r7, #4]
 8009efc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	6a1b      	ldr	r3, [r3, #32]
 8009f02:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	6a1b      	ldr	r3, [r3, #32]
 8009f08:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	685b      	ldr	r3, [r3, #4]
 8009f14:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	69db      	ldr	r3, [r3, #28]
 8009f1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8009f1c:	68fb      	ldr	r3, [r7, #12]
 8009f1e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009f22:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8009f24:	68fb      	ldr	r3, [r7, #12]
 8009f26:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009f2a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009f2c:	683b      	ldr	r3, [r7, #0]
 8009f2e:	681b      	ldr	r3, [r3, #0]
 8009f30:	021b      	lsls	r3, r3, #8
 8009f32:	68fa      	ldr	r2, [r7, #12]
 8009f34:	4313      	orrs	r3, r2
 8009f36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8009f38:	693b      	ldr	r3, [r7, #16]
 8009f3a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8009f3e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8009f40:	683b      	ldr	r3, [r7, #0]
 8009f42:	689b      	ldr	r3, [r3, #8]
 8009f44:	031b      	lsls	r3, r3, #12
 8009f46:	693a      	ldr	r2, [r7, #16]
 8009f48:	4313      	orrs	r3, r2
 8009f4a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	4a10      	ldr	r2, [pc, #64]	@ (8009f90 <TIM_OC4_SetConfig+0x9c>)
 8009f50:	4293      	cmp	r3, r2
 8009f52:	d109      	bne.n	8009f68 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8009f54:	697b      	ldr	r3, [r7, #20]
 8009f56:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8009f5a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8009f5c:	683b      	ldr	r3, [r7, #0]
 8009f5e:	695b      	ldr	r3, [r3, #20]
 8009f60:	019b      	lsls	r3, r3, #6
 8009f62:	697a      	ldr	r2, [r7, #20]
 8009f64:	4313      	orrs	r3, r2
 8009f66:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	697a      	ldr	r2, [r7, #20]
 8009f6c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	68fa      	ldr	r2, [r7, #12]
 8009f72:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8009f74:	683b      	ldr	r3, [r7, #0]
 8009f76:	685a      	ldr	r2, [r3, #4]
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	693a      	ldr	r2, [r7, #16]
 8009f80:	621a      	str	r2, [r3, #32]
}
 8009f82:	bf00      	nop
 8009f84:	371c      	adds	r7, #28
 8009f86:	46bd      	mov	sp, r7
 8009f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f8c:	4770      	bx	lr
 8009f8e:	bf00      	nop
 8009f90:	40010000 	.word	0x40010000

08009f94 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009f94:	b480      	push	{r7}
 8009f96:	b087      	sub	sp, #28
 8009f98:	af00      	add	r7, sp, #0
 8009f9a:	60f8      	str	r0, [r7, #12]
 8009f9c:	60b9      	str	r1, [r7, #8]
 8009f9e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009fa0:	68fb      	ldr	r3, [r7, #12]
 8009fa2:	6a1b      	ldr	r3, [r3, #32]
 8009fa4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009fa6:	68fb      	ldr	r3, [r7, #12]
 8009fa8:	6a1b      	ldr	r3, [r3, #32]
 8009faa:	f023 0201 	bic.w	r2, r3, #1
 8009fae:	68fb      	ldr	r3, [r7, #12]
 8009fb0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009fb2:	68fb      	ldr	r3, [r7, #12]
 8009fb4:	699b      	ldr	r3, [r3, #24]
 8009fb6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009fb8:	693b      	ldr	r3, [r7, #16]
 8009fba:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8009fbe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	011b      	lsls	r3, r3, #4
 8009fc4:	693a      	ldr	r2, [r7, #16]
 8009fc6:	4313      	orrs	r3, r2
 8009fc8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009fca:	697b      	ldr	r3, [r7, #20]
 8009fcc:	f023 030a 	bic.w	r3, r3, #10
 8009fd0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8009fd2:	697a      	ldr	r2, [r7, #20]
 8009fd4:	68bb      	ldr	r3, [r7, #8]
 8009fd6:	4313      	orrs	r3, r2
 8009fd8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009fda:	68fb      	ldr	r3, [r7, #12]
 8009fdc:	693a      	ldr	r2, [r7, #16]
 8009fde:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009fe0:	68fb      	ldr	r3, [r7, #12]
 8009fe2:	697a      	ldr	r2, [r7, #20]
 8009fe4:	621a      	str	r2, [r3, #32]
}
 8009fe6:	bf00      	nop
 8009fe8:	371c      	adds	r7, #28
 8009fea:	46bd      	mov	sp, r7
 8009fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ff0:	4770      	bx	lr

08009ff2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009ff2:	b480      	push	{r7}
 8009ff4:	b087      	sub	sp, #28
 8009ff6:	af00      	add	r7, sp, #0
 8009ff8:	60f8      	str	r0, [r7, #12]
 8009ffa:	60b9      	str	r1, [r7, #8]
 8009ffc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8009ffe:	68fb      	ldr	r3, [r7, #12]
 800a000:	6a1b      	ldr	r3, [r3, #32]
 800a002:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a004:	68fb      	ldr	r3, [r7, #12]
 800a006:	6a1b      	ldr	r3, [r3, #32]
 800a008:	f023 0210 	bic.w	r2, r3, #16
 800a00c:	68fb      	ldr	r3, [r7, #12]
 800a00e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a010:	68fb      	ldr	r3, [r7, #12]
 800a012:	699b      	ldr	r3, [r3, #24]
 800a014:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a016:	693b      	ldr	r3, [r7, #16]
 800a018:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800a01c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	031b      	lsls	r3, r3, #12
 800a022:	693a      	ldr	r2, [r7, #16]
 800a024:	4313      	orrs	r3, r2
 800a026:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a028:	697b      	ldr	r3, [r7, #20]
 800a02a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800a02e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800a030:	68bb      	ldr	r3, [r7, #8]
 800a032:	011b      	lsls	r3, r3, #4
 800a034:	697a      	ldr	r2, [r7, #20]
 800a036:	4313      	orrs	r3, r2
 800a038:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a03a:	68fb      	ldr	r3, [r7, #12]
 800a03c:	693a      	ldr	r2, [r7, #16]
 800a03e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a040:	68fb      	ldr	r3, [r7, #12]
 800a042:	697a      	ldr	r2, [r7, #20]
 800a044:	621a      	str	r2, [r3, #32]
}
 800a046:	bf00      	nop
 800a048:	371c      	adds	r7, #28
 800a04a:	46bd      	mov	sp, r7
 800a04c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a050:	4770      	bx	lr

0800a052 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800a052:	b480      	push	{r7}
 800a054:	b085      	sub	sp, #20
 800a056:	af00      	add	r7, sp, #0
 800a058:	6078      	str	r0, [r7, #4]
 800a05a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	689b      	ldr	r3, [r3, #8]
 800a060:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800a062:	68fb      	ldr	r3, [r7, #12]
 800a064:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a068:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800a06a:	683a      	ldr	r2, [r7, #0]
 800a06c:	68fb      	ldr	r3, [r7, #12]
 800a06e:	4313      	orrs	r3, r2
 800a070:	f043 0307 	orr.w	r3, r3, #7
 800a074:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	68fa      	ldr	r2, [r7, #12]
 800a07a:	609a      	str	r2, [r3, #8]
}
 800a07c:	bf00      	nop
 800a07e:	3714      	adds	r7, #20
 800a080:	46bd      	mov	sp, r7
 800a082:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a086:	4770      	bx	lr

0800a088 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800a088:	b480      	push	{r7}
 800a08a:	b087      	sub	sp, #28
 800a08c:	af00      	add	r7, sp, #0
 800a08e:	60f8      	str	r0, [r7, #12]
 800a090:	60b9      	str	r1, [r7, #8]
 800a092:	607a      	str	r2, [r7, #4]
 800a094:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800a096:	68fb      	ldr	r3, [r7, #12]
 800a098:	689b      	ldr	r3, [r3, #8]
 800a09a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a09c:	697b      	ldr	r3, [r7, #20]
 800a09e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800a0a2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800a0a4:	683b      	ldr	r3, [r7, #0]
 800a0a6:	021a      	lsls	r2, r3, #8
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	431a      	orrs	r2, r3
 800a0ac:	68bb      	ldr	r3, [r7, #8]
 800a0ae:	4313      	orrs	r3, r2
 800a0b0:	697a      	ldr	r2, [r7, #20]
 800a0b2:	4313      	orrs	r3, r2
 800a0b4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a0b6:	68fb      	ldr	r3, [r7, #12]
 800a0b8:	697a      	ldr	r2, [r7, #20]
 800a0ba:	609a      	str	r2, [r3, #8]
}
 800a0bc:	bf00      	nop
 800a0be:	371c      	adds	r7, #28
 800a0c0:	46bd      	mov	sp, r7
 800a0c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0c6:	4770      	bx	lr

0800a0c8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800a0c8:	b480      	push	{r7}
 800a0ca:	b087      	sub	sp, #28
 800a0cc:	af00      	add	r7, sp, #0
 800a0ce:	60f8      	str	r0, [r7, #12]
 800a0d0:	60b9      	str	r1, [r7, #8]
 800a0d2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800a0d4:	68bb      	ldr	r3, [r7, #8]
 800a0d6:	f003 031f 	and.w	r3, r3, #31
 800a0da:	2201      	movs	r2, #1
 800a0dc:	fa02 f303 	lsl.w	r3, r2, r3
 800a0e0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800a0e2:	68fb      	ldr	r3, [r7, #12]
 800a0e4:	6a1a      	ldr	r2, [r3, #32]
 800a0e6:	697b      	ldr	r3, [r7, #20]
 800a0e8:	43db      	mvns	r3, r3
 800a0ea:	401a      	ands	r2, r3
 800a0ec:	68fb      	ldr	r3, [r7, #12]
 800a0ee:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800a0f0:	68fb      	ldr	r3, [r7, #12]
 800a0f2:	6a1a      	ldr	r2, [r3, #32]
 800a0f4:	68bb      	ldr	r3, [r7, #8]
 800a0f6:	f003 031f 	and.w	r3, r3, #31
 800a0fa:	6879      	ldr	r1, [r7, #4]
 800a0fc:	fa01 f303 	lsl.w	r3, r1, r3
 800a100:	431a      	orrs	r2, r3
 800a102:	68fb      	ldr	r3, [r7, #12]
 800a104:	621a      	str	r2, [r3, #32]
}
 800a106:	bf00      	nop
 800a108:	371c      	adds	r7, #28
 800a10a:	46bd      	mov	sp, r7
 800a10c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a110:	4770      	bx	lr
	...

0800a114 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a114:	b480      	push	{r7}
 800a116:	b085      	sub	sp, #20
 800a118:	af00      	add	r7, sp, #0
 800a11a:	6078      	str	r0, [r7, #4]
 800a11c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a124:	2b01      	cmp	r3, #1
 800a126:	d101      	bne.n	800a12c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a128:	2302      	movs	r3, #2
 800a12a:	e050      	b.n	800a1ce <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	2201      	movs	r2, #1
 800a130:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	2202      	movs	r2, #2
 800a138:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	681b      	ldr	r3, [r3, #0]
 800a140:	685b      	ldr	r3, [r3, #4]
 800a142:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	681b      	ldr	r3, [r3, #0]
 800a148:	689b      	ldr	r3, [r3, #8]
 800a14a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a14c:	68fb      	ldr	r3, [r7, #12]
 800a14e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a152:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a154:	683b      	ldr	r3, [r7, #0]
 800a156:	681b      	ldr	r3, [r3, #0]
 800a158:	68fa      	ldr	r2, [r7, #12]
 800a15a:	4313      	orrs	r3, r2
 800a15c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	681b      	ldr	r3, [r3, #0]
 800a162:	68fa      	ldr	r2, [r7, #12]
 800a164:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a166:	687b      	ldr	r3, [r7, #4]
 800a168:	681b      	ldr	r3, [r3, #0]
 800a16a:	4a1c      	ldr	r2, [pc, #112]	@ (800a1dc <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800a16c:	4293      	cmp	r3, r2
 800a16e:	d018      	beq.n	800a1a2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800a170:	687b      	ldr	r3, [r7, #4]
 800a172:	681b      	ldr	r3, [r3, #0]
 800a174:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a178:	d013      	beq.n	800a1a2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	681b      	ldr	r3, [r3, #0]
 800a17e:	4a18      	ldr	r2, [pc, #96]	@ (800a1e0 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800a180:	4293      	cmp	r3, r2
 800a182:	d00e      	beq.n	800a1a2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	681b      	ldr	r3, [r3, #0]
 800a188:	4a16      	ldr	r2, [pc, #88]	@ (800a1e4 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800a18a:	4293      	cmp	r3, r2
 800a18c:	d009      	beq.n	800a1a2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	681b      	ldr	r3, [r3, #0]
 800a192:	4a15      	ldr	r2, [pc, #84]	@ (800a1e8 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800a194:	4293      	cmp	r3, r2
 800a196:	d004      	beq.n	800a1a2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	681b      	ldr	r3, [r3, #0]
 800a19c:	4a13      	ldr	r2, [pc, #76]	@ (800a1ec <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800a19e:	4293      	cmp	r3, r2
 800a1a0:	d10c      	bne.n	800a1bc <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a1a2:	68bb      	ldr	r3, [r7, #8]
 800a1a4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a1a8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a1aa:	683b      	ldr	r3, [r7, #0]
 800a1ac:	685b      	ldr	r3, [r3, #4]
 800a1ae:	68ba      	ldr	r2, [r7, #8]
 800a1b0:	4313      	orrs	r3, r2
 800a1b2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	681b      	ldr	r3, [r3, #0]
 800a1b8:	68ba      	ldr	r2, [r7, #8]
 800a1ba:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	2201      	movs	r2, #1
 800a1c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	2200      	movs	r2, #0
 800a1c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800a1cc:	2300      	movs	r3, #0
}
 800a1ce:	4618      	mov	r0, r3
 800a1d0:	3714      	adds	r7, #20
 800a1d2:	46bd      	mov	sp, r7
 800a1d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1d8:	4770      	bx	lr
 800a1da:	bf00      	nop
 800a1dc:	40010000 	.word	0x40010000
 800a1e0:	40000400 	.word	0x40000400
 800a1e4:	40000800 	.word	0x40000800
 800a1e8:	40000c00 	.word	0x40000c00
 800a1ec:	40014000 	.word	0x40014000

0800a1f0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800a1f0:	b480      	push	{r7}
 800a1f2:	b085      	sub	sp, #20
 800a1f4:	af00      	add	r7, sp, #0
 800a1f6:	6078      	str	r0, [r7, #4]
 800a1f8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800a1fa:	2300      	movs	r3, #0
 800a1fc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800a1fe:	687b      	ldr	r3, [r7, #4]
 800a200:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a204:	2b01      	cmp	r3, #1
 800a206:	d101      	bne.n	800a20c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800a208:	2302      	movs	r3, #2
 800a20a:	e03d      	b.n	800a288 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	2201      	movs	r2, #1
 800a210:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800a214:	68fb      	ldr	r3, [r7, #12]
 800a216:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800a21a:	683b      	ldr	r3, [r7, #0]
 800a21c:	68db      	ldr	r3, [r3, #12]
 800a21e:	4313      	orrs	r3, r2
 800a220:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800a222:	68fb      	ldr	r3, [r7, #12]
 800a224:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800a228:	683b      	ldr	r3, [r7, #0]
 800a22a:	689b      	ldr	r3, [r3, #8]
 800a22c:	4313      	orrs	r3, r2
 800a22e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800a230:	68fb      	ldr	r3, [r7, #12]
 800a232:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800a236:	683b      	ldr	r3, [r7, #0]
 800a238:	685b      	ldr	r3, [r3, #4]
 800a23a:	4313      	orrs	r3, r2
 800a23c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800a23e:	68fb      	ldr	r3, [r7, #12]
 800a240:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800a244:	683b      	ldr	r3, [r7, #0]
 800a246:	681b      	ldr	r3, [r3, #0]
 800a248:	4313      	orrs	r3, r2
 800a24a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800a24c:	68fb      	ldr	r3, [r7, #12]
 800a24e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800a252:	683b      	ldr	r3, [r7, #0]
 800a254:	691b      	ldr	r3, [r3, #16]
 800a256:	4313      	orrs	r3, r2
 800a258:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800a25a:	68fb      	ldr	r3, [r7, #12]
 800a25c:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800a260:	683b      	ldr	r3, [r7, #0]
 800a262:	695b      	ldr	r3, [r3, #20]
 800a264:	4313      	orrs	r3, r2
 800a266:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800a268:	68fb      	ldr	r3, [r7, #12]
 800a26a:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800a26e:	683b      	ldr	r3, [r7, #0]
 800a270:	69db      	ldr	r3, [r3, #28]
 800a272:	4313      	orrs	r3, r2
 800a274:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	681b      	ldr	r3, [r3, #0]
 800a27a:	68fa      	ldr	r2, [r7, #12]
 800a27c:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	2200      	movs	r2, #0
 800a282:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800a286:	2300      	movs	r3, #0
}
 800a288:	4618      	mov	r0, r3
 800a28a:	3714      	adds	r7, #20
 800a28c:	46bd      	mov	sp, r7
 800a28e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a292:	4770      	bx	lr

0800a294 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a294:	b480      	push	{r7}
 800a296:	b083      	sub	sp, #12
 800a298:	af00      	add	r7, sp, #0
 800a29a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a29c:	bf00      	nop
 800a29e:	370c      	adds	r7, #12
 800a2a0:	46bd      	mov	sp, r7
 800a2a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2a6:	4770      	bx	lr

0800a2a8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a2a8:	b480      	push	{r7}
 800a2aa:	b083      	sub	sp, #12
 800a2ac:	af00      	add	r7, sp, #0
 800a2ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a2b0:	bf00      	nop
 800a2b2:	370c      	adds	r7, #12
 800a2b4:	46bd      	mov	sp, r7
 800a2b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2ba:	4770      	bx	lr

0800a2bc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a2bc:	b580      	push	{r7, lr}
 800a2be:	b082      	sub	sp, #8
 800a2c0:	af00      	add	r7, sp, #0
 800a2c2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	2b00      	cmp	r3, #0
 800a2c8:	d101      	bne.n	800a2ce <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a2ca:	2301      	movs	r3, #1
 800a2cc:	e042      	b.n	800a354 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a2d4:	b2db      	uxtb	r3, r3
 800a2d6:	2b00      	cmp	r3, #0
 800a2d8:	d106      	bne.n	800a2e8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	2200      	movs	r2, #0
 800a2de:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a2e2:	6878      	ldr	r0, [r7, #4]
 800a2e4:	f7fb fa14 	bl	8005710 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	2224      	movs	r2, #36	@ 0x24
 800a2ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	681b      	ldr	r3, [r3, #0]
 800a2f4:	68da      	ldr	r2, [r3, #12]
 800a2f6:	687b      	ldr	r3, [r7, #4]
 800a2f8:	681b      	ldr	r3, [r3, #0]
 800a2fa:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800a2fe:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800a300:	6878      	ldr	r0, [r7, #4]
 800a302:	f000 fdd3 	bl	800aeac <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a306:	687b      	ldr	r3, [r7, #4]
 800a308:	681b      	ldr	r3, [r3, #0]
 800a30a:	691a      	ldr	r2, [r3, #16]
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	681b      	ldr	r3, [r3, #0]
 800a310:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800a314:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	681b      	ldr	r3, [r3, #0]
 800a31a:	695a      	ldr	r2, [r3, #20]
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	681b      	ldr	r3, [r3, #0]
 800a320:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800a324:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800a326:	687b      	ldr	r3, [r7, #4]
 800a328:	681b      	ldr	r3, [r3, #0]
 800a32a:	68da      	ldr	r2, [r3, #12]
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	681b      	ldr	r3, [r3, #0]
 800a330:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800a334:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	2200      	movs	r2, #0
 800a33a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	2220      	movs	r2, #32
 800a340:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	2220      	movs	r2, #32
 800a348:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	2200      	movs	r2, #0
 800a350:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800a352:	2300      	movs	r3, #0
}
 800a354:	4618      	mov	r0, r3
 800a356:	3708      	adds	r7, #8
 800a358:	46bd      	mov	sp, r7
 800a35a:	bd80      	pop	{r7, pc}

0800a35c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a35c:	b580      	push	{r7, lr}
 800a35e:	b08a      	sub	sp, #40	@ 0x28
 800a360:	af02      	add	r7, sp, #8
 800a362:	60f8      	str	r0, [r7, #12]
 800a364:	60b9      	str	r1, [r7, #8]
 800a366:	603b      	str	r3, [r7, #0]
 800a368:	4613      	mov	r3, r2
 800a36a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800a36c:	2300      	movs	r3, #0
 800a36e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a370:	68fb      	ldr	r3, [r7, #12]
 800a372:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a376:	b2db      	uxtb	r3, r3
 800a378:	2b20      	cmp	r3, #32
 800a37a:	d175      	bne.n	800a468 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 800a37c:	68bb      	ldr	r3, [r7, #8]
 800a37e:	2b00      	cmp	r3, #0
 800a380:	d002      	beq.n	800a388 <HAL_UART_Transmit+0x2c>
 800a382:	88fb      	ldrh	r3, [r7, #6]
 800a384:	2b00      	cmp	r3, #0
 800a386:	d101      	bne.n	800a38c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800a388:	2301      	movs	r3, #1
 800a38a:	e06e      	b.n	800a46a <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a38c:	68fb      	ldr	r3, [r7, #12]
 800a38e:	2200      	movs	r2, #0
 800a390:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a392:	68fb      	ldr	r3, [r7, #12]
 800a394:	2221      	movs	r2, #33	@ 0x21
 800a396:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800a39a:	f7fb facf 	bl	800593c <HAL_GetTick>
 800a39e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800a3a0:	68fb      	ldr	r3, [r7, #12]
 800a3a2:	88fa      	ldrh	r2, [r7, #6]
 800a3a4:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800a3a6:	68fb      	ldr	r3, [r7, #12]
 800a3a8:	88fa      	ldrh	r2, [r7, #6]
 800a3aa:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a3ac:	68fb      	ldr	r3, [r7, #12]
 800a3ae:	689b      	ldr	r3, [r3, #8]
 800a3b0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a3b4:	d108      	bne.n	800a3c8 <HAL_UART_Transmit+0x6c>
 800a3b6:	68fb      	ldr	r3, [r7, #12]
 800a3b8:	691b      	ldr	r3, [r3, #16]
 800a3ba:	2b00      	cmp	r3, #0
 800a3bc:	d104      	bne.n	800a3c8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800a3be:	2300      	movs	r3, #0
 800a3c0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800a3c2:	68bb      	ldr	r3, [r7, #8]
 800a3c4:	61bb      	str	r3, [r7, #24]
 800a3c6:	e003      	b.n	800a3d0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800a3c8:	68bb      	ldr	r3, [r7, #8]
 800a3ca:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800a3cc:	2300      	movs	r3, #0
 800a3ce:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800a3d0:	e02e      	b.n	800a430 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800a3d2:	683b      	ldr	r3, [r7, #0]
 800a3d4:	9300      	str	r3, [sp, #0]
 800a3d6:	697b      	ldr	r3, [r7, #20]
 800a3d8:	2200      	movs	r2, #0
 800a3da:	2180      	movs	r1, #128	@ 0x80
 800a3dc:	68f8      	ldr	r0, [r7, #12]
 800a3de:	f000 fb37 	bl	800aa50 <UART_WaitOnFlagUntilTimeout>
 800a3e2:	4603      	mov	r3, r0
 800a3e4:	2b00      	cmp	r3, #0
 800a3e6:	d005      	beq.n	800a3f4 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 800a3e8:	68fb      	ldr	r3, [r7, #12]
 800a3ea:	2220      	movs	r2, #32
 800a3ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 800a3f0:	2303      	movs	r3, #3
 800a3f2:	e03a      	b.n	800a46a <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 800a3f4:	69fb      	ldr	r3, [r7, #28]
 800a3f6:	2b00      	cmp	r3, #0
 800a3f8:	d10b      	bne.n	800a412 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800a3fa:	69bb      	ldr	r3, [r7, #24]
 800a3fc:	881b      	ldrh	r3, [r3, #0]
 800a3fe:	461a      	mov	r2, r3
 800a400:	68fb      	ldr	r3, [r7, #12]
 800a402:	681b      	ldr	r3, [r3, #0]
 800a404:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a408:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800a40a:	69bb      	ldr	r3, [r7, #24]
 800a40c:	3302      	adds	r3, #2
 800a40e:	61bb      	str	r3, [r7, #24]
 800a410:	e007      	b.n	800a422 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800a412:	69fb      	ldr	r3, [r7, #28]
 800a414:	781a      	ldrb	r2, [r3, #0]
 800a416:	68fb      	ldr	r3, [r7, #12]
 800a418:	681b      	ldr	r3, [r3, #0]
 800a41a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800a41c:	69fb      	ldr	r3, [r7, #28]
 800a41e:	3301      	adds	r3, #1
 800a420:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800a422:	68fb      	ldr	r3, [r7, #12]
 800a424:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800a426:	b29b      	uxth	r3, r3
 800a428:	3b01      	subs	r3, #1
 800a42a:	b29a      	uxth	r2, r3
 800a42c:	68fb      	ldr	r3, [r7, #12]
 800a42e:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 800a430:	68fb      	ldr	r3, [r7, #12]
 800a432:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800a434:	b29b      	uxth	r3, r3
 800a436:	2b00      	cmp	r3, #0
 800a438:	d1cb      	bne.n	800a3d2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800a43a:	683b      	ldr	r3, [r7, #0]
 800a43c:	9300      	str	r3, [sp, #0]
 800a43e:	697b      	ldr	r3, [r7, #20]
 800a440:	2200      	movs	r2, #0
 800a442:	2140      	movs	r1, #64	@ 0x40
 800a444:	68f8      	ldr	r0, [r7, #12]
 800a446:	f000 fb03 	bl	800aa50 <UART_WaitOnFlagUntilTimeout>
 800a44a:	4603      	mov	r3, r0
 800a44c:	2b00      	cmp	r3, #0
 800a44e:	d005      	beq.n	800a45c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800a450:	68fb      	ldr	r3, [r7, #12]
 800a452:	2220      	movs	r2, #32
 800a454:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 800a458:	2303      	movs	r3, #3
 800a45a:	e006      	b.n	800a46a <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800a45c:	68fb      	ldr	r3, [r7, #12]
 800a45e:	2220      	movs	r2, #32
 800a460:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 800a464:	2300      	movs	r3, #0
 800a466:	e000      	b.n	800a46a <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 800a468:	2302      	movs	r3, #2
  }
}
 800a46a:	4618      	mov	r0, r3
 800a46c:	3720      	adds	r7, #32
 800a46e:	46bd      	mov	sp, r7
 800a470:	bd80      	pop	{r7, pc}

0800a472 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a472:	b580      	push	{r7, lr}
 800a474:	b084      	sub	sp, #16
 800a476:	af00      	add	r7, sp, #0
 800a478:	60f8      	str	r0, [r7, #12]
 800a47a:	60b9      	str	r1, [r7, #8]
 800a47c:	4613      	mov	r3, r2
 800a47e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800a480:	68fb      	ldr	r3, [r7, #12]
 800a482:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800a486:	b2db      	uxtb	r3, r3
 800a488:	2b20      	cmp	r3, #32
 800a48a:	d112      	bne.n	800a4b2 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 800a48c:	68bb      	ldr	r3, [r7, #8]
 800a48e:	2b00      	cmp	r3, #0
 800a490:	d002      	beq.n	800a498 <HAL_UART_Receive_IT+0x26>
 800a492:	88fb      	ldrh	r3, [r7, #6]
 800a494:	2b00      	cmp	r3, #0
 800a496:	d101      	bne.n	800a49c <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800a498:	2301      	movs	r3, #1
 800a49a:	e00b      	b.n	800a4b4 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a49c:	68fb      	ldr	r3, [r7, #12]
 800a49e:	2200      	movs	r2, #0
 800a4a0:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800a4a2:	88fb      	ldrh	r3, [r7, #6]
 800a4a4:	461a      	mov	r2, r3
 800a4a6:	68b9      	ldr	r1, [r7, #8]
 800a4a8:	68f8      	ldr	r0, [r7, #12]
 800a4aa:	f000 fb2a 	bl	800ab02 <UART_Start_Receive_IT>
 800a4ae:	4603      	mov	r3, r0
 800a4b0:	e000      	b.n	800a4b4 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 800a4b2:	2302      	movs	r3, #2
  }
}
 800a4b4:	4618      	mov	r0, r3
 800a4b6:	3710      	adds	r7, #16
 800a4b8:	46bd      	mov	sp, r7
 800a4ba:	bd80      	pop	{r7, pc}

0800a4bc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800a4bc:	b580      	push	{r7, lr}
 800a4be:	b0ba      	sub	sp, #232	@ 0xe8
 800a4c0:	af00      	add	r7, sp, #0
 800a4c2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	681b      	ldr	r3, [r3, #0]
 800a4c8:	681b      	ldr	r3, [r3, #0]
 800a4ca:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	681b      	ldr	r3, [r3, #0]
 800a4d2:	68db      	ldr	r3, [r3, #12]
 800a4d4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	681b      	ldr	r3, [r3, #0]
 800a4dc:	695b      	ldr	r3, [r3, #20]
 800a4de:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800a4e2:	2300      	movs	r3, #0
 800a4e4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 800a4e8:	2300      	movs	r3, #0
 800a4ea:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800a4ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a4f2:	f003 030f 	and.w	r3, r3, #15
 800a4f6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800a4fa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800a4fe:	2b00      	cmp	r3, #0
 800a500:	d10f      	bne.n	800a522 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800a502:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a506:	f003 0320 	and.w	r3, r3, #32
 800a50a:	2b00      	cmp	r3, #0
 800a50c:	d009      	beq.n	800a522 <HAL_UART_IRQHandler+0x66>
 800a50e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a512:	f003 0320 	and.w	r3, r3, #32
 800a516:	2b00      	cmp	r3, #0
 800a518:	d003      	beq.n	800a522 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800a51a:	6878      	ldr	r0, [r7, #4]
 800a51c:	f000 fc07 	bl	800ad2e <UART_Receive_IT>
      return;
 800a520:	e273      	b.n	800aa0a <HAL_UART_IRQHandler+0x54e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800a522:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800a526:	2b00      	cmp	r3, #0
 800a528:	f000 80de 	beq.w	800a6e8 <HAL_UART_IRQHandler+0x22c>
 800a52c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a530:	f003 0301 	and.w	r3, r3, #1
 800a534:	2b00      	cmp	r3, #0
 800a536:	d106      	bne.n	800a546 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800a538:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a53c:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 800a540:	2b00      	cmp	r3, #0
 800a542:	f000 80d1 	beq.w	800a6e8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800a546:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a54a:	f003 0301 	and.w	r3, r3, #1
 800a54e:	2b00      	cmp	r3, #0
 800a550:	d00b      	beq.n	800a56a <HAL_UART_IRQHandler+0xae>
 800a552:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a556:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a55a:	2b00      	cmp	r3, #0
 800a55c:	d005      	beq.n	800a56a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a562:	f043 0201 	orr.w	r2, r3, #1
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800a56a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a56e:	f003 0304 	and.w	r3, r3, #4
 800a572:	2b00      	cmp	r3, #0
 800a574:	d00b      	beq.n	800a58e <HAL_UART_IRQHandler+0xd2>
 800a576:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a57a:	f003 0301 	and.w	r3, r3, #1
 800a57e:	2b00      	cmp	r3, #0
 800a580:	d005      	beq.n	800a58e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800a582:	687b      	ldr	r3, [r7, #4]
 800a584:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a586:	f043 0202 	orr.w	r2, r3, #2
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800a58e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a592:	f003 0302 	and.w	r3, r3, #2
 800a596:	2b00      	cmp	r3, #0
 800a598:	d00b      	beq.n	800a5b2 <HAL_UART_IRQHandler+0xf6>
 800a59a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a59e:	f003 0301 	and.w	r3, r3, #1
 800a5a2:	2b00      	cmp	r3, #0
 800a5a4:	d005      	beq.n	800a5b2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a5aa:	f043 0204 	orr.w	r2, r3, #4
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800a5b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a5b6:	f003 0308 	and.w	r3, r3, #8
 800a5ba:	2b00      	cmp	r3, #0
 800a5bc:	d011      	beq.n	800a5e2 <HAL_UART_IRQHandler+0x126>
 800a5be:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a5c2:	f003 0320 	and.w	r3, r3, #32
 800a5c6:	2b00      	cmp	r3, #0
 800a5c8:	d105      	bne.n	800a5d6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800a5ca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a5ce:	f003 0301 	and.w	r3, r3, #1
 800a5d2:	2b00      	cmp	r3, #0
 800a5d4:	d005      	beq.n	800a5e2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a5da:	f043 0208 	orr.w	r2, r3, #8
 800a5de:	687b      	ldr	r3, [r7, #4]
 800a5e0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800a5e2:	687b      	ldr	r3, [r7, #4]
 800a5e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a5e6:	2b00      	cmp	r3, #0
 800a5e8:	f000 820a 	beq.w	800aa00 <HAL_UART_IRQHandler+0x544>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800a5ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a5f0:	f003 0320 	and.w	r3, r3, #32
 800a5f4:	2b00      	cmp	r3, #0
 800a5f6:	d008      	beq.n	800a60a <HAL_UART_IRQHandler+0x14e>
 800a5f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a5fc:	f003 0320 	and.w	r3, r3, #32
 800a600:	2b00      	cmp	r3, #0
 800a602:	d002      	beq.n	800a60a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800a604:	6878      	ldr	r0, [r7, #4]
 800a606:	f000 fb92 	bl	800ad2e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	681b      	ldr	r3, [r3, #0]
 800a60e:	695b      	ldr	r3, [r3, #20]
 800a610:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a614:	2b40      	cmp	r3, #64	@ 0x40
 800a616:	bf0c      	ite	eq
 800a618:	2301      	moveq	r3, #1
 800a61a:	2300      	movne	r3, #0
 800a61c:	b2db      	uxtb	r3, r3
 800a61e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800a622:	687b      	ldr	r3, [r7, #4]
 800a624:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a626:	f003 0308 	and.w	r3, r3, #8
 800a62a:	2b00      	cmp	r3, #0
 800a62c:	d103      	bne.n	800a636 <HAL_UART_IRQHandler+0x17a>
 800a62e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800a632:	2b00      	cmp	r3, #0
 800a634:	d04f      	beq.n	800a6d6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800a636:	6878      	ldr	r0, [r7, #4]
 800a638:	f000 fa9d 	bl	800ab76 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	681b      	ldr	r3, [r3, #0]
 800a640:	695b      	ldr	r3, [r3, #20]
 800a642:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a646:	2b40      	cmp	r3, #64	@ 0x40
 800a648:	d141      	bne.n	800a6ce <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	681b      	ldr	r3, [r3, #0]
 800a64e:	3314      	adds	r3, #20
 800a650:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a654:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800a658:	e853 3f00 	ldrex	r3, [r3]
 800a65c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800a660:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800a664:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a668:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	681b      	ldr	r3, [r3, #0]
 800a670:	3314      	adds	r3, #20
 800a672:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800a676:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800a67a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a67e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800a682:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800a686:	e841 2300 	strex	r3, r2, [r1]
 800a68a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800a68e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800a692:	2b00      	cmp	r3, #0
 800a694:	d1d9      	bne.n	800a64a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800a696:	687b      	ldr	r3, [r7, #4]
 800a698:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a69a:	2b00      	cmp	r3, #0
 800a69c:	d013      	beq.n	800a6c6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800a69e:	687b      	ldr	r3, [r7, #4]
 800a6a0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a6a2:	4a8a      	ldr	r2, [pc, #552]	@ (800a8cc <HAL_UART_IRQHandler+0x410>)
 800a6a4:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800a6a6:	687b      	ldr	r3, [r7, #4]
 800a6a8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a6aa:	4618      	mov	r0, r3
 800a6ac:	f7fc f8d0 	bl	8006850 <HAL_DMA_Abort_IT>
 800a6b0:	4603      	mov	r3, r0
 800a6b2:	2b00      	cmp	r3, #0
 800a6b4:	d016      	beq.n	800a6e4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a6ba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a6bc:	687a      	ldr	r2, [r7, #4]
 800a6be:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800a6c0:	4610      	mov	r0, r2
 800a6c2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a6c4:	e00e      	b.n	800a6e4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800a6c6:	6878      	ldr	r0, [r7, #4]
 800a6c8:	f000 f9ac 	bl	800aa24 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a6cc:	e00a      	b.n	800a6e4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800a6ce:	6878      	ldr	r0, [r7, #4]
 800a6d0:	f000 f9a8 	bl	800aa24 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a6d4:	e006      	b.n	800a6e4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800a6d6:	6878      	ldr	r0, [r7, #4]
 800a6d8:	f000 f9a4 	bl	800aa24 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a6dc:	687b      	ldr	r3, [r7, #4]
 800a6de:	2200      	movs	r2, #0
 800a6e0:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800a6e2:	e18d      	b.n	800aa00 <HAL_UART_IRQHandler+0x544>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a6e4:	bf00      	nop
    return;
 800a6e6:	e18b      	b.n	800aa00 <HAL_UART_IRQHandler+0x544>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a6ec:	2b01      	cmp	r3, #1
 800a6ee:	f040 8167 	bne.w	800a9c0 <HAL_UART_IRQHandler+0x504>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800a6f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a6f6:	f003 0310 	and.w	r3, r3, #16
 800a6fa:	2b00      	cmp	r3, #0
 800a6fc:	f000 8160 	beq.w	800a9c0 <HAL_UART_IRQHandler+0x504>
      && ((cr1its & USART_CR1_IDLEIE) != 0U))
 800a700:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a704:	f003 0310 	and.w	r3, r3, #16
 800a708:	2b00      	cmp	r3, #0
 800a70a:	f000 8159 	beq.w	800a9c0 <HAL_UART_IRQHandler+0x504>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800a70e:	2300      	movs	r3, #0
 800a710:	60bb      	str	r3, [r7, #8]
 800a712:	687b      	ldr	r3, [r7, #4]
 800a714:	681b      	ldr	r3, [r3, #0]
 800a716:	681b      	ldr	r3, [r3, #0]
 800a718:	60bb      	str	r3, [r7, #8]
 800a71a:	687b      	ldr	r3, [r7, #4]
 800a71c:	681b      	ldr	r3, [r3, #0]
 800a71e:	685b      	ldr	r3, [r3, #4]
 800a720:	60bb      	str	r3, [r7, #8]
 800a722:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a724:	687b      	ldr	r3, [r7, #4]
 800a726:	681b      	ldr	r3, [r3, #0]
 800a728:	695b      	ldr	r3, [r3, #20]
 800a72a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a72e:	2b40      	cmp	r3, #64	@ 0x40
 800a730:	f040 80ce 	bne.w	800a8d0 <HAL_UART_IRQHandler+0x414>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800a734:	687b      	ldr	r3, [r7, #4]
 800a736:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a738:	681b      	ldr	r3, [r3, #0]
 800a73a:	685b      	ldr	r3, [r3, #4]
 800a73c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800a740:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800a744:	2b00      	cmp	r3, #0
 800a746:	f000 80a9 	beq.w	800a89c <HAL_UART_IRQHandler+0x3e0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800a74a:	687b      	ldr	r3, [r7, #4]
 800a74c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800a74e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800a752:	429a      	cmp	r2, r3
 800a754:	f080 80a2 	bcs.w	800a89c <HAL_UART_IRQHandler+0x3e0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800a75e:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a764:	69db      	ldr	r3, [r3, #28]
 800a766:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a76a:	f000 8088 	beq.w	800a87e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a76e:	687b      	ldr	r3, [r7, #4]
 800a770:	681b      	ldr	r3, [r3, #0]
 800a772:	330c      	adds	r3, #12
 800a774:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a778:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800a77c:	e853 3f00 	ldrex	r3, [r3]
 800a780:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800a784:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800a788:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a78c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	681b      	ldr	r3, [r3, #0]
 800a794:	330c      	adds	r3, #12
 800a796:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800a79a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800a79e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a7a2:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800a7a6:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800a7aa:	e841 2300 	strex	r3, r2, [r1]
 800a7ae:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800a7b2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800a7b6:	2b00      	cmp	r3, #0
 800a7b8:	d1d9      	bne.n	800a76e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a7ba:	687b      	ldr	r3, [r7, #4]
 800a7bc:	681b      	ldr	r3, [r3, #0]
 800a7be:	3314      	adds	r3, #20
 800a7c0:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a7c2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800a7c4:	e853 3f00 	ldrex	r3, [r3]
 800a7c8:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800a7ca:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800a7cc:	f023 0301 	bic.w	r3, r3, #1
 800a7d0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	681b      	ldr	r3, [r3, #0]
 800a7d8:	3314      	adds	r3, #20
 800a7da:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800a7de:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800a7e2:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a7e4:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800a7e6:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800a7ea:	e841 2300 	strex	r3, r2, [r1]
 800a7ee:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800a7f0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800a7f2:	2b00      	cmp	r3, #0
 800a7f4:	d1e1      	bne.n	800a7ba <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a7f6:	687b      	ldr	r3, [r7, #4]
 800a7f8:	681b      	ldr	r3, [r3, #0]
 800a7fa:	3314      	adds	r3, #20
 800a7fc:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a7fe:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800a800:	e853 3f00 	ldrex	r3, [r3]
 800a804:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800a806:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a808:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a80c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	681b      	ldr	r3, [r3, #0]
 800a814:	3314      	adds	r3, #20
 800a816:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800a81a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800a81c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a81e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800a820:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800a822:	e841 2300 	strex	r3, r2, [r1]
 800a826:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800a828:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a82a:	2b00      	cmp	r3, #0
 800a82c:	d1e3      	bne.n	800a7f6 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800a82e:	687b      	ldr	r3, [r7, #4]
 800a830:	2220      	movs	r2, #32
 800a832:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a836:	687b      	ldr	r3, [r7, #4]
 800a838:	2200      	movs	r2, #0
 800a83a:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	681b      	ldr	r3, [r3, #0]
 800a840:	330c      	adds	r3, #12
 800a842:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a844:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a846:	e853 3f00 	ldrex	r3, [r3]
 800a84a:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800a84c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a84e:	f023 0310 	bic.w	r3, r3, #16
 800a852:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800a856:	687b      	ldr	r3, [r7, #4]
 800a858:	681b      	ldr	r3, [r3, #0]
 800a85a:	330c      	adds	r3, #12
 800a85c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800a860:	65ba      	str	r2, [r7, #88]	@ 0x58
 800a862:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a864:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800a866:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800a868:	e841 2300 	strex	r3, r2, [r1]
 800a86c:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800a86e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a870:	2b00      	cmp	r3, #0
 800a872:	d1e3      	bne.n	800a83c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a878:	4618      	mov	r0, r3
 800a87a:	f7fb ff79 	bl	8006770 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800a87e:	687b      	ldr	r3, [r7, #4]
 800a880:	2202      	movs	r2, #2
 800a882:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800a888:	687b      	ldr	r3, [r7, #4]
 800a88a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800a88c:	b29b      	uxth	r3, r3
 800a88e:	1ad3      	subs	r3, r2, r3
 800a890:	b29b      	uxth	r3, r3
 800a892:	4619      	mov	r1, r3
 800a894:	6878      	ldr	r0, [r7, #4]
 800a896:	f000 f8cf 	bl	800aa38 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 800a89a:	e0b3      	b.n	800aa04 <HAL_UART_IRQHandler+0x548>
        if (nb_remaining_rx_data == huart->RxXferSize)
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800a8a0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800a8a4:	429a      	cmp	r2, r3
 800a8a6:	f040 80ad 	bne.w	800aa04 <HAL_UART_IRQHandler+0x548>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 800a8aa:	687b      	ldr	r3, [r7, #4]
 800a8ac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a8ae:	69db      	ldr	r3, [r3, #28]
 800a8b0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a8b4:	f040 80a6 	bne.w	800aa04 <HAL_UART_IRQHandler+0x548>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	2202      	movs	r2, #2
 800a8bc:	635a      	str	r2, [r3, #52]	@ 0x34
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a8be:	687b      	ldr	r3, [r7, #4]
 800a8c0:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800a8c2:	4619      	mov	r1, r3
 800a8c4:	6878      	ldr	r0, [r7, #4]
 800a8c6:	f000 f8b7 	bl	800aa38 <HAL_UARTEx_RxEventCallback>
      return;
 800a8ca:	e09b      	b.n	800aa04 <HAL_UART_IRQHandler+0x548>
 800a8cc:	0800ac3d 	.word	0x0800ac3d
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800a8d8:	b29b      	uxth	r3, r3
 800a8da:	1ad3      	subs	r3, r2, r3
 800a8dc:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800a8e0:	687b      	ldr	r3, [r7, #4]
 800a8e2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800a8e4:	b29b      	uxth	r3, r3
 800a8e6:	2b00      	cmp	r3, #0
 800a8e8:	f000 808e 	beq.w	800aa08 <HAL_UART_IRQHandler+0x54c>
          && (nb_rx_data > 0U))
 800a8ec:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800a8f0:	2b00      	cmp	r3, #0
 800a8f2:	f000 8089 	beq.w	800aa08 <HAL_UART_IRQHandler+0x54c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a8f6:	687b      	ldr	r3, [r7, #4]
 800a8f8:	681b      	ldr	r3, [r3, #0]
 800a8fa:	330c      	adds	r3, #12
 800a8fc:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a8fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a900:	e853 3f00 	ldrex	r3, [r3]
 800a904:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800a906:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a908:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a90c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	681b      	ldr	r3, [r3, #0]
 800a914:	330c      	adds	r3, #12
 800a916:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800a91a:	647a      	str	r2, [r7, #68]	@ 0x44
 800a91c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a91e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800a920:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a922:	e841 2300 	strex	r3, r2, [r1]
 800a926:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800a928:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a92a:	2b00      	cmp	r3, #0
 800a92c:	d1e3      	bne.n	800a8f6 <HAL_UART_IRQHandler+0x43a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	681b      	ldr	r3, [r3, #0]
 800a932:	3314      	adds	r3, #20
 800a934:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a936:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a938:	e853 3f00 	ldrex	r3, [r3]
 800a93c:	623b      	str	r3, [r7, #32]
   return(result);
 800a93e:	6a3b      	ldr	r3, [r7, #32]
 800a940:	f023 0301 	bic.w	r3, r3, #1
 800a944:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800a948:	687b      	ldr	r3, [r7, #4]
 800a94a:	681b      	ldr	r3, [r3, #0]
 800a94c:	3314      	adds	r3, #20
 800a94e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800a952:	633a      	str	r2, [r7, #48]	@ 0x30
 800a954:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a956:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a958:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a95a:	e841 2300 	strex	r3, r2, [r1]
 800a95e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a960:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a962:	2b00      	cmp	r3, #0
 800a964:	d1e3      	bne.n	800a92e <HAL_UART_IRQHandler+0x472>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800a966:	687b      	ldr	r3, [r7, #4]
 800a968:	2220      	movs	r2, #32
 800a96a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a96e:	687b      	ldr	r3, [r7, #4]
 800a970:	2200      	movs	r2, #0
 800a972:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a974:	687b      	ldr	r3, [r7, #4]
 800a976:	681b      	ldr	r3, [r3, #0]
 800a978:	330c      	adds	r3, #12
 800a97a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a97c:	693b      	ldr	r3, [r7, #16]
 800a97e:	e853 3f00 	ldrex	r3, [r3]
 800a982:	60fb      	str	r3, [r7, #12]
   return(result);
 800a984:	68fb      	ldr	r3, [r7, #12]
 800a986:	f023 0310 	bic.w	r3, r3, #16
 800a98a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800a98e:	687b      	ldr	r3, [r7, #4]
 800a990:	681b      	ldr	r3, [r3, #0]
 800a992:	330c      	adds	r3, #12
 800a994:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 800a998:	61fa      	str	r2, [r7, #28]
 800a99a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a99c:	69b9      	ldr	r1, [r7, #24]
 800a99e:	69fa      	ldr	r2, [r7, #28]
 800a9a0:	e841 2300 	strex	r3, r2, [r1]
 800a9a4:	617b      	str	r3, [r7, #20]
   return(result);
 800a9a6:	697b      	ldr	r3, [r7, #20]
 800a9a8:	2b00      	cmp	r3, #0
 800a9aa:	d1e3      	bne.n	800a974 <HAL_UART_IRQHandler+0x4b8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	2202      	movs	r2, #2
 800a9b0:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800a9b2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800a9b6:	4619      	mov	r1, r3
 800a9b8:	6878      	ldr	r0, [r7, #4]
 800a9ba:	f000 f83d 	bl	800aa38 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800a9be:	e023      	b.n	800aa08 <HAL_UART_IRQHandler+0x54c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800a9c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a9c4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a9c8:	2b00      	cmp	r3, #0
 800a9ca:	d009      	beq.n	800a9e0 <HAL_UART_IRQHandler+0x524>
 800a9cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a9d0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a9d4:	2b00      	cmp	r3, #0
 800a9d6:	d003      	beq.n	800a9e0 <HAL_UART_IRQHandler+0x524>
  {
    UART_Transmit_IT(huart);
 800a9d8:	6878      	ldr	r0, [r7, #4]
 800a9da:	f000 f940 	bl	800ac5e <UART_Transmit_IT>
    return;
 800a9de:	e014      	b.n	800aa0a <HAL_UART_IRQHandler+0x54e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800a9e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a9e4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a9e8:	2b00      	cmp	r3, #0
 800a9ea:	d00e      	beq.n	800aa0a <HAL_UART_IRQHandler+0x54e>
 800a9ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a9f0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a9f4:	2b00      	cmp	r3, #0
 800a9f6:	d008      	beq.n	800aa0a <HAL_UART_IRQHandler+0x54e>
  {
    UART_EndTransmit_IT(huart);
 800a9f8:	6878      	ldr	r0, [r7, #4]
 800a9fa:	f000 f980 	bl	800acfe <UART_EndTransmit_IT>
    return;
 800a9fe:	e004      	b.n	800aa0a <HAL_UART_IRQHandler+0x54e>
    return;
 800aa00:	bf00      	nop
 800aa02:	e002      	b.n	800aa0a <HAL_UART_IRQHandler+0x54e>
      return;
 800aa04:	bf00      	nop
 800aa06:	e000      	b.n	800aa0a <HAL_UART_IRQHandler+0x54e>
      return;
 800aa08:	bf00      	nop
  }
}
 800aa0a:	37e8      	adds	r7, #232	@ 0xe8
 800aa0c:	46bd      	mov	sp, r7
 800aa0e:	bd80      	pop	{r7, pc}

0800aa10 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800aa10:	b480      	push	{r7}
 800aa12:	b083      	sub	sp, #12
 800aa14:	af00      	add	r7, sp, #0
 800aa16:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800aa18:	bf00      	nop
 800aa1a:	370c      	adds	r7, #12
 800aa1c:	46bd      	mov	sp, r7
 800aa1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa22:	4770      	bx	lr

0800aa24 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800aa24:	b480      	push	{r7}
 800aa26:	b083      	sub	sp, #12
 800aa28:	af00      	add	r7, sp, #0
 800aa2a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800aa2c:	bf00      	nop
 800aa2e:	370c      	adds	r7, #12
 800aa30:	46bd      	mov	sp, r7
 800aa32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa36:	4770      	bx	lr

0800aa38 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800aa38:	b480      	push	{r7}
 800aa3a:	b083      	sub	sp, #12
 800aa3c:	af00      	add	r7, sp, #0
 800aa3e:	6078      	str	r0, [r7, #4]
 800aa40:	460b      	mov	r3, r1
 800aa42:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800aa44:	bf00      	nop
 800aa46:	370c      	adds	r7, #12
 800aa48:	46bd      	mov	sp, r7
 800aa4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa4e:	4770      	bx	lr

0800aa50 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800aa50:	b580      	push	{r7, lr}
 800aa52:	b086      	sub	sp, #24
 800aa54:	af00      	add	r7, sp, #0
 800aa56:	60f8      	str	r0, [r7, #12]
 800aa58:	60b9      	str	r1, [r7, #8]
 800aa5a:	603b      	str	r3, [r7, #0]
 800aa5c:	4613      	mov	r3, r2
 800aa5e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800aa60:	e03b      	b.n	800aada <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800aa62:	6a3b      	ldr	r3, [r7, #32]
 800aa64:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aa68:	d037      	beq.n	800aada <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800aa6a:	f7fa ff67 	bl	800593c <HAL_GetTick>
 800aa6e:	4602      	mov	r2, r0
 800aa70:	683b      	ldr	r3, [r7, #0]
 800aa72:	1ad3      	subs	r3, r2, r3
 800aa74:	6a3a      	ldr	r2, [r7, #32]
 800aa76:	429a      	cmp	r2, r3
 800aa78:	d302      	bcc.n	800aa80 <UART_WaitOnFlagUntilTimeout+0x30>
 800aa7a:	6a3b      	ldr	r3, [r7, #32]
 800aa7c:	2b00      	cmp	r3, #0
 800aa7e:	d101      	bne.n	800aa84 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800aa80:	2303      	movs	r3, #3
 800aa82:	e03a      	b.n	800aafa <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800aa84:	68fb      	ldr	r3, [r7, #12]
 800aa86:	681b      	ldr	r3, [r3, #0]
 800aa88:	68db      	ldr	r3, [r3, #12]
 800aa8a:	f003 0304 	and.w	r3, r3, #4
 800aa8e:	2b00      	cmp	r3, #0
 800aa90:	d023      	beq.n	800aada <UART_WaitOnFlagUntilTimeout+0x8a>
 800aa92:	68bb      	ldr	r3, [r7, #8]
 800aa94:	2b80      	cmp	r3, #128	@ 0x80
 800aa96:	d020      	beq.n	800aada <UART_WaitOnFlagUntilTimeout+0x8a>
 800aa98:	68bb      	ldr	r3, [r7, #8]
 800aa9a:	2b40      	cmp	r3, #64	@ 0x40
 800aa9c:	d01d      	beq.n	800aada <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800aa9e:	68fb      	ldr	r3, [r7, #12]
 800aaa0:	681b      	ldr	r3, [r3, #0]
 800aaa2:	681b      	ldr	r3, [r3, #0]
 800aaa4:	f003 0308 	and.w	r3, r3, #8
 800aaa8:	2b08      	cmp	r3, #8
 800aaaa:	d116      	bne.n	800aada <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800aaac:	2300      	movs	r3, #0
 800aaae:	617b      	str	r3, [r7, #20]
 800aab0:	68fb      	ldr	r3, [r7, #12]
 800aab2:	681b      	ldr	r3, [r3, #0]
 800aab4:	681b      	ldr	r3, [r3, #0]
 800aab6:	617b      	str	r3, [r7, #20]
 800aab8:	68fb      	ldr	r3, [r7, #12]
 800aaba:	681b      	ldr	r3, [r3, #0]
 800aabc:	685b      	ldr	r3, [r3, #4]
 800aabe:	617b      	str	r3, [r7, #20]
 800aac0:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800aac2:	68f8      	ldr	r0, [r7, #12]
 800aac4:	f000 f857 	bl	800ab76 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800aac8:	68fb      	ldr	r3, [r7, #12]
 800aaca:	2208      	movs	r2, #8
 800aacc:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800aace:	68fb      	ldr	r3, [r7, #12]
 800aad0:	2200      	movs	r2, #0
 800aad2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800aad6:	2301      	movs	r3, #1
 800aad8:	e00f      	b.n	800aafa <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800aada:	68fb      	ldr	r3, [r7, #12]
 800aadc:	681b      	ldr	r3, [r3, #0]
 800aade:	681a      	ldr	r2, [r3, #0]
 800aae0:	68bb      	ldr	r3, [r7, #8]
 800aae2:	4013      	ands	r3, r2
 800aae4:	68ba      	ldr	r2, [r7, #8]
 800aae6:	429a      	cmp	r2, r3
 800aae8:	bf0c      	ite	eq
 800aaea:	2301      	moveq	r3, #1
 800aaec:	2300      	movne	r3, #0
 800aaee:	b2db      	uxtb	r3, r3
 800aaf0:	461a      	mov	r2, r3
 800aaf2:	79fb      	ldrb	r3, [r7, #7]
 800aaf4:	429a      	cmp	r2, r3
 800aaf6:	d0b4      	beq.n	800aa62 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800aaf8:	2300      	movs	r3, #0
}
 800aafa:	4618      	mov	r0, r3
 800aafc:	3718      	adds	r7, #24
 800aafe:	46bd      	mov	sp, r7
 800ab00:	bd80      	pop	{r7, pc}

0800ab02 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800ab02:	b480      	push	{r7}
 800ab04:	b085      	sub	sp, #20
 800ab06:	af00      	add	r7, sp, #0
 800ab08:	60f8      	str	r0, [r7, #12]
 800ab0a:	60b9      	str	r1, [r7, #8]
 800ab0c:	4613      	mov	r3, r2
 800ab0e:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800ab10:	68fb      	ldr	r3, [r7, #12]
 800ab12:	68ba      	ldr	r2, [r7, #8]
 800ab14:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 800ab16:	68fb      	ldr	r3, [r7, #12]
 800ab18:	88fa      	ldrh	r2, [r7, #6]
 800ab1a:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 800ab1c:	68fb      	ldr	r3, [r7, #12]
 800ab1e:	88fa      	ldrh	r2, [r7, #6]
 800ab20:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ab22:	68fb      	ldr	r3, [r7, #12]
 800ab24:	2200      	movs	r2, #0
 800ab26:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800ab28:	68fb      	ldr	r3, [r7, #12]
 800ab2a:	2222      	movs	r2, #34	@ 0x22
 800ab2c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 800ab30:	68fb      	ldr	r3, [r7, #12]
 800ab32:	691b      	ldr	r3, [r3, #16]
 800ab34:	2b00      	cmp	r3, #0
 800ab36:	d007      	beq.n	800ab48 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800ab38:	68fb      	ldr	r3, [r7, #12]
 800ab3a:	681b      	ldr	r3, [r3, #0]
 800ab3c:	68da      	ldr	r2, [r3, #12]
 800ab3e:	68fb      	ldr	r3, [r7, #12]
 800ab40:	681b      	ldr	r3, [r3, #0]
 800ab42:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800ab46:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800ab48:	68fb      	ldr	r3, [r7, #12]
 800ab4a:	681b      	ldr	r3, [r3, #0]
 800ab4c:	695a      	ldr	r2, [r3, #20]
 800ab4e:	68fb      	ldr	r3, [r7, #12]
 800ab50:	681b      	ldr	r3, [r3, #0]
 800ab52:	f042 0201 	orr.w	r2, r2, #1
 800ab56:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800ab58:	68fb      	ldr	r3, [r7, #12]
 800ab5a:	681b      	ldr	r3, [r3, #0]
 800ab5c:	68da      	ldr	r2, [r3, #12]
 800ab5e:	68fb      	ldr	r3, [r7, #12]
 800ab60:	681b      	ldr	r3, [r3, #0]
 800ab62:	f042 0220 	orr.w	r2, r2, #32
 800ab66:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800ab68:	2300      	movs	r3, #0
}
 800ab6a:	4618      	mov	r0, r3
 800ab6c:	3714      	adds	r7, #20
 800ab6e:	46bd      	mov	sp, r7
 800ab70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab74:	4770      	bx	lr

0800ab76 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800ab76:	b480      	push	{r7}
 800ab78:	b095      	sub	sp, #84	@ 0x54
 800ab7a:	af00      	add	r7, sp, #0
 800ab7c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800ab7e:	687b      	ldr	r3, [r7, #4]
 800ab80:	681b      	ldr	r3, [r3, #0]
 800ab82:	330c      	adds	r3, #12
 800ab84:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab86:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ab88:	e853 3f00 	ldrex	r3, [r3]
 800ab8c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800ab8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ab90:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800ab94:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800ab96:	687b      	ldr	r3, [r7, #4]
 800ab98:	681b      	ldr	r3, [r3, #0]
 800ab9a:	330c      	adds	r3, #12
 800ab9c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800ab9e:	643a      	str	r2, [r7, #64]	@ 0x40
 800aba0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aba2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800aba4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800aba6:	e841 2300 	strex	r3, r2, [r1]
 800abaa:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800abac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800abae:	2b00      	cmp	r3, #0
 800abb0:	d1e5      	bne.n	800ab7e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800abb2:	687b      	ldr	r3, [r7, #4]
 800abb4:	681b      	ldr	r3, [r3, #0]
 800abb6:	3314      	adds	r3, #20
 800abb8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800abba:	6a3b      	ldr	r3, [r7, #32]
 800abbc:	e853 3f00 	ldrex	r3, [r3]
 800abc0:	61fb      	str	r3, [r7, #28]
   return(result);
 800abc2:	69fb      	ldr	r3, [r7, #28]
 800abc4:	f023 0301 	bic.w	r3, r3, #1
 800abc8:	64bb      	str	r3, [r7, #72]	@ 0x48
 800abca:	687b      	ldr	r3, [r7, #4]
 800abcc:	681b      	ldr	r3, [r3, #0]
 800abce:	3314      	adds	r3, #20
 800abd0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800abd2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800abd4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800abd6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800abd8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800abda:	e841 2300 	strex	r3, r2, [r1]
 800abde:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800abe0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800abe2:	2b00      	cmp	r3, #0
 800abe4:	d1e5      	bne.n	800abb2 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800abe6:	687b      	ldr	r3, [r7, #4]
 800abe8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800abea:	2b01      	cmp	r3, #1
 800abec:	d119      	bne.n	800ac22 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800abee:	687b      	ldr	r3, [r7, #4]
 800abf0:	681b      	ldr	r3, [r3, #0]
 800abf2:	330c      	adds	r3, #12
 800abf4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800abf6:	68fb      	ldr	r3, [r7, #12]
 800abf8:	e853 3f00 	ldrex	r3, [r3]
 800abfc:	60bb      	str	r3, [r7, #8]
   return(result);
 800abfe:	68bb      	ldr	r3, [r7, #8]
 800ac00:	f023 0310 	bic.w	r3, r3, #16
 800ac04:	647b      	str	r3, [r7, #68]	@ 0x44
 800ac06:	687b      	ldr	r3, [r7, #4]
 800ac08:	681b      	ldr	r3, [r3, #0]
 800ac0a:	330c      	adds	r3, #12
 800ac0c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800ac0e:	61ba      	str	r2, [r7, #24]
 800ac10:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac12:	6979      	ldr	r1, [r7, #20]
 800ac14:	69ba      	ldr	r2, [r7, #24]
 800ac16:	e841 2300 	strex	r3, r2, [r1]
 800ac1a:	613b      	str	r3, [r7, #16]
   return(result);
 800ac1c:	693b      	ldr	r3, [r7, #16]
 800ac1e:	2b00      	cmp	r3, #0
 800ac20:	d1e5      	bne.n	800abee <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800ac22:	687b      	ldr	r3, [r7, #4]
 800ac24:	2220      	movs	r2, #32
 800ac26:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ac2a:	687b      	ldr	r3, [r7, #4]
 800ac2c:	2200      	movs	r2, #0
 800ac2e:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800ac30:	bf00      	nop
 800ac32:	3754      	adds	r7, #84	@ 0x54
 800ac34:	46bd      	mov	sp, r7
 800ac36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac3a:	4770      	bx	lr

0800ac3c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800ac3c:	b580      	push	{r7, lr}
 800ac3e:	b084      	sub	sp, #16
 800ac40:	af00      	add	r7, sp, #0
 800ac42:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800ac44:	687b      	ldr	r3, [r7, #4]
 800ac46:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ac48:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800ac4a:	68fb      	ldr	r3, [r7, #12]
 800ac4c:	2200      	movs	r2, #0
 800ac4e:	85da      	strh	r2, [r3, #46]	@ 0x2e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800ac50:	68f8      	ldr	r0, [r7, #12]
 800ac52:	f7ff fee7 	bl	800aa24 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ac56:	bf00      	nop
 800ac58:	3710      	adds	r7, #16
 800ac5a:	46bd      	mov	sp, r7
 800ac5c:	bd80      	pop	{r7, pc}

0800ac5e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800ac5e:	b480      	push	{r7}
 800ac60:	b085      	sub	sp, #20
 800ac62:	af00      	add	r7, sp, #0
 800ac64:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800ac66:	687b      	ldr	r3, [r7, #4]
 800ac68:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800ac6c:	b2db      	uxtb	r3, r3
 800ac6e:	2b21      	cmp	r3, #33	@ 0x21
 800ac70:	d13e      	bne.n	800acf0 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ac72:	687b      	ldr	r3, [r7, #4]
 800ac74:	689b      	ldr	r3, [r3, #8]
 800ac76:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800ac7a:	d114      	bne.n	800aca6 <UART_Transmit_IT+0x48>
 800ac7c:	687b      	ldr	r3, [r7, #4]
 800ac7e:	691b      	ldr	r3, [r3, #16]
 800ac80:	2b00      	cmp	r3, #0
 800ac82:	d110      	bne.n	800aca6 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800ac84:	687b      	ldr	r3, [r7, #4]
 800ac86:	6a1b      	ldr	r3, [r3, #32]
 800ac88:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800ac8a:	68fb      	ldr	r3, [r7, #12]
 800ac8c:	881b      	ldrh	r3, [r3, #0]
 800ac8e:	461a      	mov	r2, r3
 800ac90:	687b      	ldr	r3, [r7, #4]
 800ac92:	681b      	ldr	r3, [r3, #0]
 800ac94:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800ac98:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800ac9a:	687b      	ldr	r3, [r7, #4]
 800ac9c:	6a1b      	ldr	r3, [r3, #32]
 800ac9e:	1c9a      	adds	r2, r3, #2
 800aca0:	687b      	ldr	r3, [r7, #4]
 800aca2:	621a      	str	r2, [r3, #32]
 800aca4:	e008      	b.n	800acb8 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800aca6:	687b      	ldr	r3, [r7, #4]
 800aca8:	6a1b      	ldr	r3, [r3, #32]
 800acaa:	1c59      	adds	r1, r3, #1
 800acac:	687a      	ldr	r2, [r7, #4]
 800acae:	6211      	str	r1, [r2, #32]
 800acb0:	781a      	ldrb	r2, [r3, #0]
 800acb2:	687b      	ldr	r3, [r7, #4]
 800acb4:	681b      	ldr	r3, [r3, #0]
 800acb6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800acb8:	687b      	ldr	r3, [r7, #4]
 800acba:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800acbc:	b29b      	uxth	r3, r3
 800acbe:	3b01      	subs	r3, #1
 800acc0:	b29b      	uxth	r3, r3
 800acc2:	687a      	ldr	r2, [r7, #4]
 800acc4:	4619      	mov	r1, r3
 800acc6:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800acc8:	2b00      	cmp	r3, #0
 800acca:	d10f      	bne.n	800acec <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800accc:	687b      	ldr	r3, [r7, #4]
 800acce:	681b      	ldr	r3, [r3, #0]
 800acd0:	68da      	ldr	r2, [r3, #12]
 800acd2:	687b      	ldr	r3, [r7, #4]
 800acd4:	681b      	ldr	r3, [r3, #0]
 800acd6:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800acda:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800acdc:	687b      	ldr	r3, [r7, #4]
 800acde:	681b      	ldr	r3, [r3, #0]
 800ace0:	68da      	ldr	r2, [r3, #12]
 800ace2:	687b      	ldr	r3, [r7, #4]
 800ace4:	681b      	ldr	r3, [r3, #0]
 800ace6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800acea:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800acec:	2300      	movs	r3, #0
 800acee:	e000      	b.n	800acf2 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800acf0:	2302      	movs	r3, #2
  }
}
 800acf2:	4618      	mov	r0, r3
 800acf4:	3714      	adds	r7, #20
 800acf6:	46bd      	mov	sp, r7
 800acf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acfc:	4770      	bx	lr

0800acfe <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800acfe:	b580      	push	{r7, lr}
 800ad00:	b082      	sub	sp, #8
 800ad02:	af00      	add	r7, sp, #0
 800ad04:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800ad06:	687b      	ldr	r3, [r7, #4]
 800ad08:	681b      	ldr	r3, [r3, #0]
 800ad0a:	68da      	ldr	r2, [r3, #12]
 800ad0c:	687b      	ldr	r3, [r7, #4]
 800ad0e:	681b      	ldr	r3, [r3, #0]
 800ad10:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800ad14:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800ad16:	687b      	ldr	r3, [r7, #4]
 800ad18:	2220      	movs	r2, #32
 800ad1a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800ad1e:	6878      	ldr	r0, [r7, #4]
 800ad20:	f7ff fe76 	bl	800aa10 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800ad24:	2300      	movs	r3, #0
}
 800ad26:	4618      	mov	r0, r3
 800ad28:	3708      	adds	r7, #8
 800ad2a:	46bd      	mov	sp, r7
 800ad2c:	bd80      	pop	{r7, pc}

0800ad2e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800ad2e:	b580      	push	{r7, lr}
 800ad30:	b08c      	sub	sp, #48	@ 0x30
 800ad32:	af00      	add	r7, sp, #0
 800ad34:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits = NULL;
 800ad36:	2300      	movs	r3, #0
 800ad38:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint16_t *pdata16bits = NULL;
 800ad3a:	2300      	movs	r3, #0
 800ad3c:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800ad3e:	687b      	ldr	r3, [r7, #4]
 800ad40:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800ad44:	b2db      	uxtb	r3, r3
 800ad46:	2b22      	cmp	r3, #34	@ 0x22
 800ad48:	f040 80aa 	bne.w	800aea0 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ad4c:	687b      	ldr	r3, [r7, #4]
 800ad4e:	689b      	ldr	r3, [r3, #8]
 800ad50:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800ad54:	d115      	bne.n	800ad82 <UART_Receive_IT+0x54>
 800ad56:	687b      	ldr	r3, [r7, #4]
 800ad58:	691b      	ldr	r3, [r3, #16]
 800ad5a:	2b00      	cmp	r3, #0
 800ad5c:	d111      	bne.n	800ad82 <UART_Receive_IT+0x54>
    {
      /* Unused pdata8bits */
      UNUSED(pdata8bits);
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800ad5e:	687b      	ldr	r3, [r7, #4]
 800ad60:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ad62:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800ad64:	687b      	ldr	r3, [r7, #4]
 800ad66:	681b      	ldr	r3, [r3, #0]
 800ad68:	685b      	ldr	r3, [r3, #4]
 800ad6a:	b29b      	uxth	r3, r3
 800ad6c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ad70:	b29a      	uxth	r2, r3
 800ad72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ad74:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800ad76:	687b      	ldr	r3, [r7, #4]
 800ad78:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ad7a:	1c9a      	adds	r2, r3, #2
 800ad7c:	687b      	ldr	r3, [r7, #4]
 800ad7e:	629a      	str	r2, [r3, #40]	@ 0x28
 800ad80:	e024      	b.n	800adcc <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800ad82:	687b      	ldr	r3, [r7, #4]
 800ad84:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ad86:	62fb      	str	r3, [r7, #44]	@ 0x2c
      /* Unused pdata16bits */
      UNUSED(pdata16bits);

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800ad88:	687b      	ldr	r3, [r7, #4]
 800ad8a:	689b      	ldr	r3, [r3, #8]
 800ad8c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800ad90:	d007      	beq.n	800ada2 <UART_Receive_IT+0x74>
 800ad92:	687b      	ldr	r3, [r7, #4]
 800ad94:	689b      	ldr	r3, [r3, #8]
 800ad96:	2b00      	cmp	r3, #0
 800ad98:	d10a      	bne.n	800adb0 <UART_Receive_IT+0x82>
 800ad9a:	687b      	ldr	r3, [r7, #4]
 800ad9c:	691b      	ldr	r3, [r3, #16]
 800ad9e:	2b00      	cmp	r3, #0
 800ada0:	d106      	bne.n	800adb0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800ada2:	687b      	ldr	r3, [r7, #4]
 800ada4:	681b      	ldr	r3, [r3, #0]
 800ada6:	685b      	ldr	r3, [r3, #4]
 800ada8:	b2da      	uxtb	r2, r3
 800adaa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800adac:	701a      	strb	r2, [r3, #0]
 800adae:	e008      	b.n	800adc2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800adb0:	687b      	ldr	r3, [r7, #4]
 800adb2:	681b      	ldr	r3, [r3, #0]
 800adb4:	685b      	ldr	r3, [r3, #4]
 800adb6:	b2db      	uxtb	r3, r3
 800adb8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800adbc:	b2da      	uxtb	r2, r3
 800adbe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800adc0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800adc2:	687b      	ldr	r3, [r7, #4]
 800adc4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800adc6:	1c5a      	adds	r2, r3, #1
 800adc8:	687b      	ldr	r3, [r7, #4]
 800adca:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800adcc:	687b      	ldr	r3, [r7, #4]
 800adce:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800add0:	b29b      	uxth	r3, r3
 800add2:	3b01      	subs	r3, #1
 800add4:	b29b      	uxth	r3, r3
 800add6:	687a      	ldr	r2, [r7, #4]
 800add8:	4619      	mov	r1, r3
 800adda:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800addc:	2b00      	cmp	r3, #0
 800adde:	d15d      	bne.n	800ae9c <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800ade0:	687b      	ldr	r3, [r7, #4]
 800ade2:	681b      	ldr	r3, [r3, #0]
 800ade4:	68da      	ldr	r2, [r3, #12]
 800ade6:	687b      	ldr	r3, [r7, #4]
 800ade8:	681b      	ldr	r3, [r3, #0]
 800adea:	f022 0220 	bic.w	r2, r2, #32
 800adee:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800adf0:	687b      	ldr	r3, [r7, #4]
 800adf2:	681b      	ldr	r3, [r3, #0]
 800adf4:	68da      	ldr	r2, [r3, #12]
 800adf6:	687b      	ldr	r3, [r7, #4]
 800adf8:	681b      	ldr	r3, [r3, #0]
 800adfa:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800adfe:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800ae00:	687b      	ldr	r3, [r7, #4]
 800ae02:	681b      	ldr	r3, [r3, #0]
 800ae04:	695a      	ldr	r2, [r3, #20]
 800ae06:	687b      	ldr	r3, [r7, #4]
 800ae08:	681b      	ldr	r3, [r3, #0]
 800ae0a:	f022 0201 	bic.w	r2, r2, #1
 800ae0e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800ae10:	687b      	ldr	r3, [r7, #4]
 800ae12:	2220      	movs	r2, #32
 800ae14:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800ae18:	687b      	ldr	r3, [r7, #4]
 800ae1a:	2200      	movs	r2, #0
 800ae1c:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ae1e:	687b      	ldr	r3, [r7, #4]
 800ae20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ae22:	2b01      	cmp	r3, #1
 800ae24:	d135      	bne.n	800ae92 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ae26:	687b      	ldr	r3, [r7, #4]
 800ae28:	2200      	movs	r2, #0
 800ae2a:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ae2c:	687b      	ldr	r3, [r7, #4]
 800ae2e:	681b      	ldr	r3, [r3, #0]
 800ae30:	330c      	adds	r3, #12
 800ae32:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae34:	697b      	ldr	r3, [r7, #20]
 800ae36:	e853 3f00 	ldrex	r3, [r3]
 800ae3a:	613b      	str	r3, [r7, #16]
   return(result);
 800ae3c:	693b      	ldr	r3, [r7, #16]
 800ae3e:	f023 0310 	bic.w	r3, r3, #16
 800ae42:	627b      	str	r3, [r7, #36]	@ 0x24
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	681b      	ldr	r3, [r3, #0]
 800ae48:	330c      	adds	r3, #12
 800ae4a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ae4c:	623a      	str	r2, [r7, #32]
 800ae4e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae50:	69f9      	ldr	r1, [r7, #28]
 800ae52:	6a3a      	ldr	r2, [r7, #32]
 800ae54:	e841 2300 	strex	r3, r2, [r1]
 800ae58:	61bb      	str	r3, [r7, #24]
   return(result);
 800ae5a:	69bb      	ldr	r3, [r7, #24]
 800ae5c:	2b00      	cmp	r3, #0
 800ae5e:	d1e5      	bne.n	800ae2c <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800ae60:	687b      	ldr	r3, [r7, #4]
 800ae62:	681b      	ldr	r3, [r3, #0]
 800ae64:	681b      	ldr	r3, [r3, #0]
 800ae66:	f003 0310 	and.w	r3, r3, #16
 800ae6a:	2b10      	cmp	r3, #16
 800ae6c:	d10a      	bne.n	800ae84 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800ae6e:	2300      	movs	r3, #0
 800ae70:	60fb      	str	r3, [r7, #12]
 800ae72:	687b      	ldr	r3, [r7, #4]
 800ae74:	681b      	ldr	r3, [r3, #0]
 800ae76:	681b      	ldr	r3, [r3, #0]
 800ae78:	60fb      	str	r3, [r7, #12]
 800ae7a:	687b      	ldr	r3, [r7, #4]
 800ae7c:	681b      	ldr	r3, [r3, #0]
 800ae7e:	685b      	ldr	r3, [r3, #4]
 800ae80:	60fb      	str	r3, [r7, #12]
 800ae82:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800ae84:	687b      	ldr	r3, [r7, #4]
 800ae86:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800ae88:	4619      	mov	r1, r3
 800ae8a:	6878      	ldr	r0, [r7, #4]
 800ae8c:	f7ff fdd4 	bl	800aa38 <HAL_UARTEx_RxEventCallback>
 800ae90:	e002      	b.n	800ae98 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800ae92:	6878      	ldr	r0, [r7, #4]
 800ae94:	f7f7 fa0a 	bl	80022ac <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800ae98:	2300      	movs	r3, #0
 800ae9a:	e002      	b.n	800aea2 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800ae9c:	2300      	movs	r3, #0
 800ae9e:	e000      	b.n	800aea2 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800aea0:	2302      	movs	r3, #2
  }
}
 800aea2:	4618      	mov	r0, r3
 800aea4:	3730      	adds	r7, #48	@ 0x30
 800aea6:	46bd      	mov	sp, r7
 800aea8:	bd80      	pop	{r7, pc}
	...

0800aeac <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800aeac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800aeb0:	b0c0      	sub	sp, #256	@ 0x100
 800aeb2:	af00      	add	r7, sp, #0
 800aeb4:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800aeb8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800aebc:	681b      	ldr	r3, [r3, #0]
 800aebe:	691b      	ldr	r3, [r3, #16]
 800aec0:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800aec4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800aec8:	68d9      	ldr	r1, [r3, #12]
 800aeca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800aece:	681a      	ldr	r2, [r3, #0]
 800aed0:	ea40 0301 	orr.w	r3, r0, r1
 800aed4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800aed6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800aeda:	689a      	ldr	r2, [r3, #8]
 800aedc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800aee0:	691b      	ldr	r3, [r3, #16]
 800aee2:	431a      	orrs	r2, r3
 800aee4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800aee8:	695b      	ldr	r3, [r3, #20]
 800aeea:	431a      	orrs	r2, r3
 800aeec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800aef0:	69db      	ldr	r3, [r3, #28]
 800aef2:	4313      	orrs	r3, r2
 800aef4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800aef8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800aefc:	681b      	ldr	r3, [r3, #0]
 800aefe:	68db      	ldr	r3, [r3, #12]
 800af00:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800af04:	f021 010c 	bic.w	r1, r1, #12
 800af08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800af0c:	681a      	ldr	r2, [r3, #0]
 800af0e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800af12:	430b      	orrs	r3, r1
 800af14:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800af16:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800af1a:	681b      	ldr	r3, [r3, #0]
 800af1c:	695b      	ldr	r3, [r3, #20]
 800af1e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800af22:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800af26:	6999      	ldr	r1, [r3, #24]
 800af28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800af2c:	681a      	ldr	r2, [r3, #0]
 800af2e:	ea40 0301 	orr.w	r3, r0, r1
 800af32:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800af34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800af38:	681a      	ldr	r2, [r3, #0]
 800af3a:	4b8f      	ldr	r3, [pc, #572]	@ (800b178 <UART_SetConfig+0x2cc>)
 800af3c:	429a      	cmp	r2, r3
 800af3e:	d005      	beq.n	800af4c <UART_SetConfig+0xa0>
 800af40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800af44:	681a      	ldr	r2, [r3, #0]
 800af46:	4b8d      	ldr	r3, [pc, #564]	@ (800b17c <UART_SetConfig+0x2d0>)
 800af48:	429a      	cmp	r2, r3
 800af4a:	d104      	bne.n	800af56 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800af4c:	f7fd fb26 	bl	800859c <HAL_RCC_GetPCLK2Freq>
 800af50:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800af54:	e003      	b.n	800af5e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800af56:	f7fd fb0d 	bl	8008574 <HAL_RCC_GetPCLK1Freq>
 800af5a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800af5e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800af62:	69db      	ldr	r3, [r3, #28]
 800af64:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800af68:	f040 810c 	bne.w	800b184 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800af6c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800af70:	2200      	movs	r2, #0
 800af72:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800af76:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800af7a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800af7e:	4622      	mov	r2, r4
 800af80:	462b      	mov	r3, r5
 800af82:	1891      	adds	r1, r2, r2
 800af84:	65b9      	str	r1, [r7, #88]	@ 0x58
 800af86:	415b      	adcs	r3, r3
 800af88:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800af8a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800af8e:	4621      	mov	r1, r4
 800af90:	eb12 0801 	adds.w	r8, r2, r1
 800af94:	4629      	mov	r1, r5
 800af96:	eb43 0901 	adc.w	r9, r3, r1
 800af9a:	f04f 0200 	mov.w	r2, #0
 800af9e:	f04f 0300 	mov.w	r3, #0
 800afa2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800afa6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800afaa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800afae:	4690      	mov	r8, r2
 800afb0:	4699      	mov	r9, r3
 800afb2:	4623      	mov	r3, r4
 800afb4:	eb18 0303 	adds.w	r3, r8, r3
 800afb8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800afbc:	462b      	mov	r3, r5
 800afbe:	eb49 0303 	adc.w	r3, r9, r3
 800afc2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800afc6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800afca:	685b      	ldr	r3, [r3, #4]
 800afcc:	2200      	movs	r2, #0
 800afce:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800afd2:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800afd6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800afda:	460b      	mov	r3, r1
 800afdc:	18db      	adds	r3, r3, r3
 800afde:	653b      	str	r3, [r7, #80]	@ 0x50
 800afe0:	4613      	mov	r3, r2
 800afe2:	eb42 0303 	adc.w	r3, r2, r3
 800afe6:	657b      	str	r3, [r7, #84]	@ 0x54
 800afe8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800afec:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800aff0:	f7f5 fe62 	bl	8000cb8 <__aeabi_uldivmod>
 800aff4:	4602      	mov	r2, r0
 800aff6:	460b      	mov	r3, r1
 800aff8:	4b61      	ldr	r3, [pc, #388]	@ (800b180 <UART_SetConfig+0x2d4>)
 800affa:	fba3 2302 	umull	r2, r3, r3, r2
 800affe:	095b      	lsrs	r3, r3, #5
 800b000:	011c      	lsls	r4, r3, #4
 800b002:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800b006:	2200      	movs	r2, #0
 800b008:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800b00c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800b010:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800b014:	4642      	mov	r2, r8
 800b016:	464b      	mov	r3, r9
 800b018:	1891      	adds	r1, r2, r2
 800b01a:	64b9      	str	r1, [r7, #72]	@ 0x48
 800b01c:	415b      	adcs	r3, r3
 800b01e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b020:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800b024:	4641      	mov	r1, r8
 800b026:	eb12 0a01 	adds.w	sl, r2, r1
 800b02a:	4649      	mov	r1, r9
 800b02c:	eb43 0b01 	adc.w	fp, r3, r1
 800b030:	f04f 0200 	mov.w	r2, #0
 800b034:	f04f 0300 	mov.w	r3, #0
 800b038:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800b03c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800b040:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800b044:	4692      	mov	sl, r2
 800b046:	469b      	mov	fp, r3
 800b048:	4643      	mov	r3, r8
 800b04a:	eb1a 0303 	adds.w	r3, sl, r3
 800b04e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800b052:	464b      	mov	r3, r9
 800b054:	eb4b 0303 	adc.w	r3, fp, r3
 800b058:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800b05c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b060:	685b      	ldr	r3, [r3, #4]
 800b062:	2200      	movs	r2, #0
 800b064:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800b068:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800b06c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800b070:	460b      	mov	r3, r1
 800b072:	18db      	adds	r3, r3, r3
 800b074:	643b      	str	r3, [r7, #64]	@ 0x40
 800b076:	4613      	mov	r3, r2
 800b078:	eb42 0303 	adc.w	r3, r2, r3
 800b07c:	647b      	str	r3, [r7, #68]	@ 0x44
 800b07e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800b082:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800b086:	f7f5 fe17 	bl	8000cb8 <__aeabi_uldivmod>
 800b08a:	4602      	mov	r2, r0
 800b08c:	460b      	mov	r3, r1
 800b08e:	4611      	mov	r1, r2
 800b090:	4b3b      	ldr	r3, [pc, #236]	@ (800b180 <UART_SetConfig+0x2d4>)
 800b092:	fba3 2301 	umull	r2, r3, r3, r1
 800b096:	095b      	lsrs	r3, r3, #5
 800b098:	2264      	movs	r2, #100	@ 0x64
 800b09a:	fb02 f303 	mul.w	r3, r2, r3
 800b09e:	1acb      	subs	r3, r1, r3
 800b0a0:	00db      	lsls	r3, r3, #3
 800b0a2:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800b0a6:	4b36      	ldr	r3, [pc, #216]	@ (800b180 <UART_SetConfig+0x2d4>)
 800b0a8:	fba3 2302 	umull	r2, r3, r3, r2
 800b0ac:	095b      	lsrs	r3, r3, #5
 800b0ae:	005b      	lsls	r3, r3, #1
 800b0b0:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800b0b4:	441c      	add	r4, r3
 800b0b6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800b0ba:	2200      	movs	r2, #0
 800b0bc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800b0c0:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800b0c4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800b0c8:	4642      	mov	r2, r8
 800b0ca:	464b      	mov	r3, r9
 800b0cc:	1891      	adds	r1, r2, r2
 800b0ce:	63b9      	str	r1, [r7, #56]	@ 0x38
 800b0d0:	415b      	adcs	r3, r3
 800b0d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b0d4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800b0d8:	4641      	mov	r1, r8
 800b0da:	1851      	adds	r1, r2, r1
 800b0dc:	6339      	str	r1, [r7, #48]	@ 0x30
 800b0de:	4649      	mov	r1, r9
 800b0e0:	414b      	adcs	r3, r1
 800b0e2:	637b      	str	r3, [r7, #52]	@ 0x34
 800b0e4:	f04f 0200 	mov.w	r2, #0
 800b0e8:	f04f 0300 	mov.w	r3, #0
 800b0ec:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800b0f0:	4659      	mov	r1, fp
 800b0f2:	00cb      	lsls	r3, r1, #3
 800b0f4:	4651      	mov	r1, sl
 800b0f6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800b0fa:	4651      	mov	r1, sl
 800b0fc:	00ca      	lsls	r2, r1, #3
 800b0fe:	4610      	mov	r0, r2
 800b100:	4619      	mov	r1, r3
 800b102:	4603      	mov	r3, r0
 800b104:	4642      	mov	r2, r8
 800b106:	189b      	adds	r3, r3, r2
 800b108:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800b10c:	464b      	mov	r3, r9
 800b10e:	460a      	mov	r2, r1
 800b110:	eb42 0303 	adc.w	r3, r2, r3
 800b114:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800b118:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b11c:	685b      	ldr	r3, [r3, #4]
 800b11e:	2200      	movs	r2, #0
 800b120:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800b124:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800b128:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800b12c:	460b      	mov	r3, r1
 800b12e:	18db      	adds	r3, r3, r3
 800b130:	62bb      	str	r3, [r7, #40]	@ 0x28
 800b132:	4613      	mov	r3, r2
 800b134:	eb42 0303 	adc.w	r3, r2, r3
 800b138:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800b13a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800b13e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800b142:	f7f5 fdb9 	bl	8000cb8 <__aeabi_uldivmod>
 800b146:	4602      	mov	r2, r0
 800b148:	460b      	mov	r3, r1
 800b14a:	4b0d      	ldr	r3, [pc, #52]	@ (800b180 <UART_SetConfig+0x2d4>)
 800b14c:	fba3 1302 	umull	r1, r3, r3, r2
 800b150:	095b      	lsrs	r3, r3, #5
 800b152:	2164      	movs	r1, #100	@ 0x64
 800b154:	fb01 f303 	mul.w	r3, r1, r3
 800b158:	1ad3      	subs	r3, r2, r3
 800b15a:	00db      	lsls	r3, r3, #3
 800b15c:	3332      	adds	r3, #50	@ 0x32
 800b15e:	4a08      	ldr	r2, [pc, #32]	@ (800b180 <UART_SetConfig+0x2d4>)
 800b160:	fba2 2303 	umull	r2, r3, r2, r3
 800b164:	095b      	lsrs	r3, r3, #5
 800b166:	f003 0207 	and.w	r2, r3, #7
 800b16a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b16e:	681b      	ldr	r3, [r3, #0]
 800b170:	4422      	add	r2, r4
 800b172:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800b174:	e106      	b.n	800b384 <UART_SetConfig+0x4d8>
 800b176:	bf00      	nop
 800b178:	40011000 	.word	0x40011000
 800b17c:	40011400 	.word	0x40011400
 800b180:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800b184:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800b188:	2200      	movs	r2, #0
 800b18a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800b18e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800b192:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800b196:	4642      	mov	r2, r8
 800b198:	464b      	mov	r3, r9
 800b19a:	1891      	adds	r1, r2, r2
 800b19c:	6239      	str	r1, [r7, #32]
 800b19e:	415b      	adcs	r3, r3
 800b1a0:	627b      	str	r3, [r7, #36]	@ 0x24
 800b1a2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800b1a6:	4641      	mov	r1, r8
 800b1a8:	1854      	adds	r4, r2, r1
 800b1aa:	4649      	mov	r1, r9
 800b1ac:	eb43 0501 	adc.w	r5, r3, r1
 800b1b0:	f04f 0200 	mov.w	r2, #0
 800b1b4:	f04f 0300 	mov.w	r3, #0
 800b1b8:	00eb      	lsls	r3, r5, #3
 800b1ba:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800b1be:	00e2      	lsls	r2, r4, #3
 800b1c0:	4614      	mov	r4, r2
 800b1c2:	461d      	mov	r5, r3
 800b1c4:	4643      	mov	r3, r8
 800b1c6:	18e3      	adds	r3, r4, r3
 800b1c8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800b1cc:	464b      	mov	r3, r9
 800b1ce:	eb45 0303 	adc.w	r3, r5, r3
 800b1d2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800b1d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b1da:	685b      	ldr	r3, [r3, #4]
 800b1dc:	2200      	movs	r2, #0
 800b1de:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800b1e2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800b1e6:	f04f 0200 	mov.w	r2, #0
 800b1ea:	f04f 0300 	mov.w	r3, #0
 800b1ee:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800b1f2:	4629      	mov	r1, r5
 800b1f4:	008b      	lsls	r3, r1, #2
 800b1f6:	4621      	mov	r1, r4
 800b1f8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800b1fc:	4621      	mov	r1, r4
 800b1fe:	008a      	lsls	r2, r1, #2
 800b200:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800b204:	f7f5 fd58 	bl	8000cb8 <__aeabi_uldivmod>
 800b208:	4602      	mov	r2, r0
 800b20a:	460b      	mov	r3, r1
 800b20c:	4b60      	ldr	r3, [pc, #384]	@ (800b390 <UART_SetConfig+0x4e4>)
 800b20e:	fba3 2302 	umull	r2, r3, r3, r2
 800b212:	095b      	lsrs	r3, r3, #5
 800b214:	011c      	lsls	r4, r3, #4
 800b216:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800b21a:	2200      	movs	r2, #0
 800b21c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800b220:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800b224:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800b228:	4642      	mov	r2, r8
 800b22a:	464b      	mov	r3, r9
 800b22c:	1891      	adds	r1, r2, r2
 800b22e:	61b9      	str	r1, [r7, #24]
 800b230:	415b      	adcs	r3, r3
 800b232:	61fb      	str	r3, [r7, #28]
 800b234:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800b238:	4641      	mov	r1, r8
 800b23a:	1851      	adds	r1, r2, r1
 800b23c:	6139      	str	r1, [r7, #16]
 800b23e:	4649      	mov	r1, r9
 800b240:	414b      	adcs	r3, r1
 800b242:	617b      	str	r3, [r7, #20]
 800b244:	f04f 0200 	mov.w	r2, #0
 800b248:	f04f 0300 	mov.w	r3, #0
 800b24c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800b250:	4659      	mov	r1, fp
 800b252:	00cb      	lsls	r3, r1, #3
 800b254:	4651      	mov	r1, sl
 800b256:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800b25a:	4651      	mov	r1, sl
 800b25c:	00ca      	lsls	r2, r1, #3
 800b25e:	4610      	mov	r0, r2
 800b260:	4619      	mov	r1, r3
 800b262:	4603      	mov	r3, r0
 800b264:	4642      	mov	r2, r8
 800b266:	189b      	adds	r3, r3, r2
 800b268:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800b26c:	464b      	mov	r3, r9
 800b26e:	460a      	mov	r2, r1
 800b270:	eb42 0303 	adc.w	r3, r2, r3
 800b274:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800b278:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b27c:	685b      	ldr	r3, [r3, #4]
 800b27e:	2200      	movs	r2, #0
 800b280:	67bb      	str	r3, [r7, #120]	@ 0x78
 800b282:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800b284:	f04f 0200 	mov.w	r2, #0
 800b288:	f04f 0300 	mov.w	r3, #0
 800b28c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800b290:	4649      	mov	r1, r9
 800b292:	008b      	lsls	r3, r1, #2
 800b294:	4641      	mov	r1, r8
 800b296:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800b29a:	4641      	mov	r1, r8
 800b29c:	008a      	lsls	r2, r1, #2
 800b29e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800b2a2:	f7f5 fd09 	bl	8000cb8 <__aeabi_uldivmod>
 800b2a6:	4602      	mov	r2, r0
 800b2a8:	460b      	mov	r3, r1
 800b2aa:	4611      	mov	r1, r2
 800b2ac:	4b38      	ldr	r3, [pc, #224]	@ (800b390 <UART_SetConfig+0x4e4>)
 800b2ae:	fba3 2301 	umull	r2, r3, r3, r1
 800b2b2:	095b      	lsrs	r3, r3, #5
 800b2b4:	2264      	movs	r2, #100	@ 0x64
 800b2b6:	fb02 f303 	mul.w	r3, r2, r3
 800b2ba:	1acb      	subs	r3, r1, r3
 800b2bc:	011b      	lsls	r3, r3, #4
 800b2be:	3332      	adds	r3, #50	@ 0x32
 800b2c0:	4a33      	ldr	r2, [pc, #204]	@ (800b390 <UART_SetConfig+0x4e4>)
 800b2c2:	fba2 2303 	umull	r2, r3, r2, r3
 800b2c6:	095b      	lsrs	r3, r3, #5
 800b2c8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800b2cc:	441c      	add	r4, r3
 800b2ce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800b2d2:	2200      	movs	r2, #0
 800b2d4:	673b      	str	r3, [r7, #112]	@ 0x70
 800b2d6:	677a      	str	r2, [r7, #116]	@ 0x74
 800b2d8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800b2dc:	4642      	mov	r2, r8
 800b2de:	464b      	mov	r3, r9
 800b2e0:	1891      	adds	r1, r2, r2
 800b2e2:	60b9      	str	r1, [r7, #8]
 800b2e4:	415b      	adcs	r3, r3
 800b2e6:	60fb      	str	r3, [r7, #12]
 800b2e8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800b2ec:	4641      	mov	r1, r8
 800b2ee:	1851      	adds	r1, r2, r1
 800b2f0:	6039      	str	r1, [r7, #0]
 800b2f2:	4649      	mov	r1, r9
 800b2f4:	414b      	adcs	r3, r1
 800b2f6:	607b      	str	r3, [r7, #4]
 800b2f8:	f04f 0200 	mov.w	r2, #0
 800b2fc:	f04f 0300 	mov.w	r3, #0
 800b300:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800b304:	4659      	mov	r1, fp
 800b306:	00cb      	lsls	r3, r1, #3
 800b308:	4651      	mov	r1, sl
 800b30a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800b30e:	4651      	mov	r1, sl
 800b310:	00ca      	lsls	r2, r1, #3
 800b312:	4610      	mov	r0, r2
 800b314:	4619      	mov	r1, r3
 800b316:	4603      	mov	r3, r0
 800b318:	4642      	mov	r2, r8
 800b31a:	189b      	adds	r3, r3, r2
 800b31c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800b31e:	464b      	mov	r3, r9
 800b320:	460a      	mov	r2, r1
 800b322:	eb42 0303 	adc.w	r3, r2, r3
 800b326:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800b328:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b32c:	685b      	ldr	r3, [r3, #4]
 800b32e:	2200      	movs	r2, #0
 800b330:	663b      	str	r3, [r7, #96]	@ 0x60
 800b332:	667a      	str	r2, [r7, #100]	@ 0x64
 800b334:	f04f 0200 	mov.w	r2, #0
 800b338:	f04f 0300 	mov.w	r3, #0
 800b33c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800b340:	4649      	mov	r1, r9
 800b342:	008b      	lsls	r3, r1, #2
 800b344:	4641      	mov	r1, r8
 800b346:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800b34a:	4641      	mov	r1, r8
 800b34c:	008a      	lsls	r2, r1, #2
 800b34e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800b352:	f7f5 fcb1 	bl	8000cb8 <__aeabi_uldivmod>
 800b356:	4602      	mov	r2, r0
 800b358:	460b      	mov	r3, r1
 800b35a:	4b0d      	ldr	r3, [pc, #52]	@ (800b390 <UART_SetConfig+0x4e4>)
 800b35c:	fba3 1302 	umull	r1, r3, r3, r2
 800b360:	095b      	lsrs	r3, r3, #5
 800b362:	2164      	movs	r1, #100	@ 0x64
 800b364:	fb01 f303 	mul.w	r3, r1, r3
 800b368:	1ad3      	subs	r3, r2, r3
 800b36a:	011b      	lsls	r3, r3, #4
 800b36c:	3332      	adds	r3, #50	@ 0x32
 800b36e:	4a08      	ldr	r2, [pc, #32]	@ (800b390 <UART_SetConfig+0x4e4>)
 800b370:	fba2 2303 	umull	r2, r3, r2, r3
 800b374:	095b      	lsrs	r3, r3, #5
 800b376:	f003 020f 	and.w	r2, r3, #15
 800b37a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b37e:	681b      	ldr	r3, [r3, #0]
 800b380:	4422      	add	r2, r4
 800b382:	609a      	str	r2, [r3, #8]
}
 800b384:	bf00      	nop
 800b386:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800b38a:	46bd      	mov	sp, r7
 800b38c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800b390:	51eb851f 	.word	0x51eb851f

0800b394 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800b394:	b580      	push	{r7, lr}
 800b396:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 800b398:	4904      	ldr	r1, [pc, #16]	@ (800b3ac <MX_FATFS_Init+0x18>)
 800b39a:	4805      	ldr	r0, [pc, #20]	@ (800b3b0 <MX_FATFS_Init+0x1c>)
 800b39c:	f003 feb0 	bl	800f100 <FATFS_LinkDriver>
 800b3a0:	4603      	mov	r3, r0
 800b3a2:	461a      	mov	r2, r3
 800b3a4:	4b03      	ldr	r3, [pc, #12]	@ (800b3b4 <MX_FATFS_Init+0x20>)
 800b3a6:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800b3a8:	bf00      	nop
 800b3aa:	bd80      	pop	{r7, pc}
 800b3ac:	200161a8 	.word	0x200161a8
 800b3b0:	2000d120 	.word	0x2000d120
 800b3b4:	200161a4 	.word	0x200161a4

0800b3b8 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800b3b8:	b480      	push	{r7}
 800b3ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800b3bc:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800b3be:	4618      	mov	r0, r3
 800b3c0:	46bd      	mov	sp, r7
 800b3c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3c6:	4770      	bx	lr

0800b3c8 <SELECT>:
 * SPI functions
 **************************************/

/* slave select */
static void SELECT(void)
{
 800b3c8:	b580      	push	{r7, lr}
 800b3ca:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_RESET);
 800b3cc:	2200      	movs	r2, #0
 800b3ce:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800b3d2:	4804      	ldr	r0, [pc, #16]	@ (800b3e4 <SELECT+0x1c>)
 800b3d4:	f7fb fe64 	bl	80070a0 <HAL_GPIO_WritePin>
    HAL_Delay(1);
 800b3d8:	2001      	movs	r0, #1
 800b3da:	f7fa fabb 	bl	8005954 <HAL_Delay>
}
 800b3de:	bf00      	nop
 800b3e0:	bd80      	pop	{r7, pc}
 800b3e2:	bf00      	nop
 800b3e4:	40020400 	.word	0x40020400

0800b3e8 <DESELECT>:

/* slave deselect */
static void DESELECT(void)
{
 800b3e8:	b580      	push	{r7, lr}
 800b3ea:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_SET);
 800b3ec:	2201      	movs	r2, #1
 800b3ee:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800b3f2:	4804      	ldr	r0, [pc, #16]	@ (800b404 <DESELECT+0x1c>)
 800b3f4:	f7fb fe54 	bl	80070a0 <HAL_GPIO_WritePin>
    HAL_Delay(1);
 800b3f8:	2001      	movs	r0, #1
 800b3fa:	f7fa faab 	bl	8005954 <HAL_Delay>
}
 800b3fe:	bf00      	nop
 800b400:	bd80      	pop	{r7, pc}
 800b402:	bf00      	nop
 800b404:	40020400 	.word	0x40020400

0800b408 <SPI_TxByte>:

/* SPI transmit a byte */
static void SPI_TxByte(uint8_t data)
{
 800b408:	b580      	push	{r7, lr}
 800b40a:	b082      	sub	sp, #8
 800b40c:	af00      	add	r7, sp, #0
 800b40e:	4603      	mov	r3, r0
 800b410:	71fb      	strb	r3, [r7, #7]
    while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 800b412:	bf00      	nop
 800b414:	4b08      	ldr	r3, [pc, #32]	@ (800b438 <SPI_TxByte+0x30>)
 800b416:	681b      	ldr	r3, [r3, #0]
 800b418:	689b      	ldr	r3, [r3, #8]
 800b41a:	f003 0302 	and.w	r3, r3, #2
 800b41e:	2b02      	cmp	r3, #2
 800b420:	d1f8      	bne.n	800b414 <SPI_TxByte+0xc>
    HAL_SPI_Transmit(HSPI_SDCARD, &data, 1, SPI_TIMEOUT);
 800b422:	1df9      	adds	r1, r7, #7
 800b424:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800b428:	2201      	movs	r2, #1
 800b42a:	4803      	ldr	r0, [pc, #12]	@ (800b438 <SPI_TxByte+0x30>)
 800b42c:	f7fd faa5 	bl	800897a <HAL_SPI_Transmit>
}
 800b430:	bf00      	nop
 800b432:	3708      	adds	r7, #8
 800b434:	46bd      	mov	sp, r7
 800b436:	bd80      	pop	{r7, pc}
 800b438:	20015f4c 	.word	0x20015f4c

0800b43c <SPI_TxBuffer>:

/* SPI transmit buffer */
static void SPI_TxBuffer(uint8_t *buffer, uint16_t len)
{
 800b43c:	b580      	push	{r7, lr}
 800b43e:	b082      	sub	sp, #8
 800b440:	af00      	add	r7, sp, #0
 800b442:	6078      	str	r0, [r7, #4]
 800b444:	460b      	mov	r3, r1
 800b446:	807b      	strh	r3, [r7, #2]
    while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 800b448:	bf00      	nop
 800b44a:	4b09      	ldr	r3, [pc, #36]	@ (800b470 <SPI_TxBuffer+0x34>)
 800b44c:	681b      	ldr	r3, [r3, #0]
 800b44e:	689b      	ldr	r3, [r3, #8]
 800b450:	f003 0302 	and.w	r3, r3, #2
 800b454:	2b02      	cmp	r3, #2
 800b456:	d1f8      	bne.n	800b44a <SPI_TxBuffer+0xe>
    HAL_SPI_Transmit(HSPI_SDCARD, buffer, len, SPI_TIMEOUT);
 800b458:	887a      	ldrh	r2, [r7, #2]
 800b45a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800b45e:	6879      	ldr	r1, [r7, #4]
 800b460:	4803      	ldr	r0, [pc, #12]	@ (800b470 <SPI_TxBuffer+0x34>)
 800b462:	f7fd fa8a 	bl	800897a <HAL_SPI_Transmit>
}
 800b466:	bf00      	nop
 800b468:	3708      	adds	r7, #8
 800b46a:	46bd      	mov	sp, r7
 800b46c:	bd80      	pop	{r7, pc}
 800b46e:	bf00      	nop
 800b470:	20015f4c 	.word	0x20015f4c

0800b474 <SPI_RxByte>:

/* SPI receive a byte */
static uint8_t SPI_RxByte(void)
{
 800b474:	b580      	push	{r7, lr}
 800b476:	b084      	sub	sp, #16
 800b478:	af02      	add	r7, sp, #8
    uint8_t dummy, data;
    dummy = 0xFF;
 800b47a:	23ff      	movs	r3, #255	@ 0xff
 800b47c:	71fb      	strb	r3, [r7, #7]

    while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 800b47e:	bf00      	nop
 800b480:	4b0a      	ldr	r3, [pc, #40]	@ (800b4ac <SPI_RxByte+0x38>)
 800b482:	681b      	ldr	r3, [r3, #0]
 800b484:	689b      	ldr	r3, [r3, #8]
 800b486:	f003 0302 	and.w	r3, r3, #2
 800b48a:	2b02      	cmp	r3, #2
 800b48c:	d1f8      	bne.n	800b480 <SPI_RxByte+0xc>
    HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 800b48e:	1dba      	adds	r2, r7, #6
 800b490:	1df9      	adds	r1, r7, #7
 800b492:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800b496:	9300      	str	r3, [sp, #0]
 800b498:	2301      	movs	r3, #1
 800b49a:	4804      	ldr	r0, [pc, #16]	@ (800b4ac <SPI_RxByte+0x38>)
 800b49c:	f7fd fbb1 	bl	8008c02 <HAL_SPI_TransmitReceive>

    return data;
 800b4a0:	79bb      	ldrb	r3, [r7, #6]
}
 800b4a2:	4618      	mov	r0, r3
 800b4a4:	3708      	adds	r7, #8
 800b4a6:	46bd      	mov	sp, r7
 800b4a8:	bd80      	pop	{r7, pc}
 800b4aa:	bf00      	nop
 800b4ac:	20015f4c 	.word	0x20015f4c

0800b4b0 <SPI_RxBytePtr>:

/* SPI receive a byte via pointer */
static void SPI_RxBytePtr(uint8_t *buff) 
{
 800b4b0:	b580      	push	{r7, lr}
 800b4b2:	b082      	sub	sp, #8
 800b4b4:	af00      	add	r7, sp, #0
 800b4b6:	6078      	str	r0, [r7, #4]
    *buff = SPI_RxByte();
 800b4b8:	f7ff ffdc 	bl	800b474 <SPI_RxByte>
 800b4bc:	4603      	mov	r3, r0
 800b4be:	461a      	mov	r2, r3
 800b4c0:	687b      	ldr	r3, [r7, #4]
 800b4c2:	701a      	strb	r2, [r3, #0]
}
 800b4c4:	bf00      	nop
 800b4c6:	3708      	adds	r7, #8
 800b4c8:	46bd      	mov	sp, r7
 800b4ca:	bd80      	pop	{r7, pc}

0800b4cc <SD_ReadyWait>:
 * SD functions
 **************************************/

/* wait SD ready */
static uint8_t SD_ReadyWait(void)
{
 800b4cc:	b580      	push	{r7, lr}
 800b4ce:	b082      	sub	sp, #8
 800b4d0:	af00      	add	r7, sp, #0
    uint8_t res;

    /* timeout 500ms */
    Timer2 = 500;
 800b4d2:	4b0a      	ldr	r3, [pc, #40]	@ (800b4fc <SD_ReadyWait+0x30>)
 800b4d4:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 800b4d8:	801a      	strh	r2, [r3, #0]

    /* if SD goes ready, receives 0xFF */
    do {
        res = SPI_RxByte();
 800b4da:	f7ff ffcb 	bl	800b474 <SPI_RxByte>
 800b4de:	4603      	mov	r3, r0
 800b4e0:	71fb      	strb	r3, [r7, #7]
    } while ((res != 0xFF) && Timer2);
 800b4e2:	79fb      	ldrb	r3, [r7, #7]
 800b4e4:	2bff      	cmp	r3, #255	@ 0xff
 800b4e6:	d004      	beq.n	800b4f2 <SD_ReadyWait+0x26>
 800b4e8:	4b04      	ldr	r3, [pc, #16]	@ (800b4fc <SD_ReadyWait+0x30>)
 800b4ea:	881b      	ldrh	r3, [r3, #0]
 800b4ec:	b29b      	uxth	r3, r3
 800b4ee:	2b00      	cmp	r3, #0
 800b4f0:	d1f3      	bne.n	800b4da <SD_ReadyWait+0xe>

    return res;
 800b4f2:	79fb      	ldrb	r3, [r7, #7]
}
 800b4f4:	4618      	mov	r0, r3
 800b4f6:	3708      	adds	r7, #8
 800b4f8:	46bd      	mov	sp, r7
 800b4fa:	bd80      	pop	{r7, pc}
 800b4fc:	200161ae 	.word	0x200161ae

0800b500 <SD_PowerOn>:

/* power on */
static void SD_PowerOn(void) 
{
 800b500:	b580      	push	{r7, lr}
 800b502:	b084      	sub	sp, #16
 800b504:	af00      	add	r7, sp, #0
    uint8_t args[6];
    uint32_t cnt = 0x1FFF;
 800b506:	f641 73ff 	movw	r3, #8191	@ 0x1fff
 800b50a:	60fb      	str	r3, [r7, #12]

    /* transmit bytes to wake up */
    DESELECT();
 800b50c:	f7ff ff6c 	bl	800b3e8 <DESELECT>
    for(int i = 0; i < 10; i++)
 800b510:	2300      	movs	r3, #0
 800b512:	60bb      	str	r3, [r7, #8]
 800b514:	e005      	b.n	800b522 <SD_PowerOn+0x22>
    {
        SPI_TxByte(0xFF);
 800b516:	20ff      	movs	r0, #255	@ 0xff
 800b518:	f7ff ff76 	bl	800b408 <SPI_TxByte>
    for(int i = 0; i < 10; i++)
 800b51c:	68bb      	ldr	r3, [r7, #8]
 800b51e:	3301      	adds	r3, #1
 800b520:	60bb      	str	r3, [r7, #8]
 800b522:	68bb      	ldr	r3, [r7, #8]
 800b524:	2b09      	cmp	r3, #9
 800b526:	ddf6      	ble.n	800b516 <SD_PowerOn+0x16>
    }

    /* slave select */
    SELECT();
 800b528:	f7ff ff4e 	bl	800b3c8 <SELECT>

    /* make idle state */
    args[0] = CMD0;     /* CMD0:GO_IDLE_STATE */
 800b52c:	2340      	movs	r3, #64	@ 0x40
 800b52e:	703b      	strb	r3, [r7, #0]
    args[1] = 0;
 800b530:	2300      	movs	r3, #0
 800b532:	707b      	strb	r3, [r7, #1]
    args[2] = 0;
 800b534:	2300      	movs	r3, #0
 800b536:	70bb      	strb	r3, [r7, #2]
    args[3] = 0;
 800b538:	2300      	movs	r3, #0
 800b53a:	70fb      	strb	r3, [r7, #3]
    args[4] = 0;
 800b53c:	2300      	movs	r3, #0
 800b53e:	713b      	strb	r3, [r7, #4]
    args[5] = 0x95;     /* CRC */
 800b540:	2395      	movs	r3, #149	@ 0x95
 800b542:	717b      	strb	r3, [r7, #5]

    SPI_TxBuffer(args, sizeof(args));
 800b544:	463b      	mov	r3, r7
 800b546:	2106      	movs	r1, #6
 800b548:	4618      	mov	r0, r3
 800b54a:	f7ff ff77 	bl	800b43c <SPI_TxBuffer>

    /* wait response */
    while ((SPI_RxByte() != 0x01) && cnt)
 800b54e:	e002      	b.n	800b556 <SD_PowerOn+0x56>
    {
        cnt--;
 800b550:	68fb      	ldr	r3, [r7, #12]
 800b552:	3b01      	subs	r3, #1
 800b554:	60fb      	str	r3, [r7, #12]
    while ((SPI_RxByte() != 0x01) && cnt)
 800b556:	f7ff ff8d 	bl	800b474 <SPI_RxByte>
 800b55a:	4603      	mov	r3, r0
 800b55c:	2b01      	cmp	r3, #1
 800b55e:	d002      	beq.n	800b566 <SD_PowerOn+0x66>
 800b560:	68fb      	ldr	r3, [r7, #12]
 800b562:	2b00      	cmp	r3, #0
 800b564:	d1f4      	bne.n	800b550 <SD_PowerOn+0x50>
    }

    DESELECT();
 800b566:	f7ff ff3f 	bl	800b3e8 <DESELECT>
    SPI_TxByte(0XFF);
 800b56a:	20ff      	movs	r0, #255	@ 0xff
 800b56c:	f7ff ff4c 	bl	800b408 <SPI_TxByte>

    PowerFlag = 1;
 800b570:	4b03      	ldr	r3, [pc, #12]	@ (800b580 <SD_PowerOn+0x80>)
 800b572:	2201      	movs	r2, #1
 800b574:	701a      	strb	r2, [r3, #0]
}
 800b576:	bf00      	nop
 800b578:	3710      	adds	r7, #16
 800b57a:	46bd      	mov	sp, r7
 800b57c:	bd80      	pop	{r7, pc}
 800b57e:	bf00      	nop
 800b580:	200161b1 	.word	0x200161b1

0800b584 <SD_PowerOff>:

/* power off */
static void SD_PowerOff(void) 
{
 800b584:	b480      	push	{r7}
 800b586:	af00      	add	r7, sp, #0
    PowerFlag = 0;
 800b588:	4b03      	ldr	r3, [pc, #12]	@ (800b598 <SD_PowerOff+0x14>)
 800b58a:	2200      	movs	r2, #0
 800b58c:	701a      	strb	r2, [r3, #0]
}
 800b58e:	bf00      	nop
 800b590:	46bd      	mov	sp, r7
 800b592:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b596:	4770      	bx	lr
 800b598:	200161b1 	.word	0x200161b1

0800b59c <SD_CheckPower>:

/* check power flag */
static uint8_t SD_CheckPower(void) 
{
 800b59c:	b480      	push	{r7}
 800b59e:	af00      	add	r7, sp, #0
    return PowerFlag;
 800b5a0:	4b03      	ldr	r3, [pc, #12]	@ (800b5b0 <SD_CheckPower+0x14>)
 800b5a2:	781b      	ldrb	r3, [r3, #0]
}
 800b5a4:	4618      	mov	r0, r3
 800b5a6:	46bd      	mov	sp, r7
 800b5a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5ac:	4770      	bx	lr
 800b5ae:	bf00      	nop
 800b5b0:	200161b1 	.word	0x200161b1

0800b5b4 <SD_RxDataBlock>:

/* receive data block */
static bool SD_RxDataBlock(BYTE *buff, UINT len)
{
 800b5b4:	b580      	push	{r7, lr}
 800b5b6:	b084      	sub	sp, #16
 800b5b8:	af00      	add	r7, sp, #0
 800b5ba:	6078      	str	r0, [r7, #4]
 800b5bc:	6039      	str	r1, [r7, #0]
    uint8_t token;

    /* timeout 200ms */
    Timer1 = 200;
 800b5be:	4b14      	ldr	r3, [pc, #80]	@ (800b610 <SD_RxDataBlock+0x5c>)
 800b5c0:	22c8      	movs	r2, #200	@ 0xc8
 800b5c2:	801a      	strh	r2, [r3, #0]

    /* loop until receive a response or timeout */
    do {
        token = SPI_RxByte();
 800b5c4:	f7ff ff56 	bl	800b474 <SPI_RxByte>
 800b5c8:	4603      	mov	r3, r0
 800b5ca:	73fb      	strb	r3, [r7, #15]
    } while((token == 0xFF) && Timer1);
 800b5cc:	7bfb      	ldrb	r3, [r7, #15]
 800b5ce:	2bff      	cmp	r3, #255	@ 0xff
 800b5d0:	d104      	bne.n	800b5dc <SD_RxDataBlock+0x28>
 800b5d2:	4b0f      	ldr	r3, [pc, #60]	@ (800b610 <SD_RxDataBlock+0x5c>)
 800b5d4:	881b      	ldrh	r3, [r3, #0]
 800b5d6:	b29b      	uxth	r3, r3
 800b5d8:	2b00      	cmp	r3, #0
 800b5da:	d1f3      	bne.n	800b5c4 <SD_RxDataBlock+0x10>

    /* invalid response */
    if(token != 0xFE) return FALSE;
 800b5dc:	7bfb      	ldrb	r3, [r7, #15]
 800b5de:	2bfe      	cmp	r3, #254	@ 0xfe
 800b5e0:	d007      	beq.n	800b5f2 <SD_RxDataBlock+0x3e>
 800b5e2:	2300      	movs	r3, #0
 800b5e4:	e00f      	b.n	800b606 <SD_RxDataBlock+0x52>
    /* receive data */
    // FIX 2: do-while(len--) 루프 수정
    // 기존 코드는 len+1 만큼 실행되어 버퍼 오버플로우를 유발할 수 있습니다.
    // while(len--) 형태로 변경하여 정확히 len 만큼만 실행되도록 합니다.
    while(len--) {
        SPI_RxBytePtr(buff++);
 800b5e6:	687b      	ldr	r3, [r7, #4]
 800b5e8:	1c5a      	adds	r2, r3, #1
 800b5ea:	607a      	str	r2, [r7, #4]
 800b5ec:	4618      	mov	r0, r3
 800b5ee:	f7ff ff5f 	bl	800b4b0 <SPI_RxBytePtr>
    while(len--) {
 800b5f2:	683b      	ldr	r3, [r7, #0]
 800b5f4:	1e5a      	subs	r2, r3, #1
 800b5f6:	603a      	str	r2, [r7, #0]
 800b5f8:	2b00      	cmp	r3, #0
 800b5fa:	d1f4      	bne.n	800b5e6 <SD_RxDataBlock+0x32>
    }

    /* discard CRC */
    SPI_RxByte();
 800b5fc:	f7ff ff3a 	bl	800b474 <SPI_RxByte>
    SPI_RxByte();
 800b600:	f7ff ff38 	bl	800b474 <SPI_RxByte>

    return TRUE;
 800b604:	2301      	movs	r3, #1
}
 800b606:	4618      	mov	r0, r3
 800b608:	3710      	adds	r7, #16
 800b60a:	46bd      	mov	sp, r7
 800b60c:	bd80      	pop	{r7, pc}
 800b60e:	bf00      	nop
 800b610:	200161ac 	.word	0x200161ac

0800b614 <SD_TxDataBlock>:

/* transmit data block */
#if _USE_WRITE == 1
static bool SD_TxDataBlock(const uint8_t *buff, BYTE token)
{
 800b614:	b580      	push	{r7, lr}
 800b616:	b084      	sub	sp, #16
 800b618:	af00      	add	r7, sp, #0
 800b61a:	6078      	str	r0, [r7, #4]
 800b61c:	460b      	mov	r3, r1
 800b61e:	70fb      	strb	r3, [r7, #3]
    uint8_t resp = 0xFF; // 초기화
 800b620:	23ff      	movs	r3, #255	@ 0xff
 800b622:	73fb      	strb	r3, [r7, #15]
    uint8_t i = 0;
 800b624:	2300      	movs	r3, #0
 800b626:	73bb      	strb	r3, [r7, #14]

    /* wait SD ready */
    if (SD_ReadyWait() != 0xFF) return FALSE;
 800b628:	f7ff ff50 	bl	800b4cc <SD_ReadyWait>
 800b62c:	4603      	mov	r3, r0
 800b62e:	2bff      	cmp	r3, #255	@ 0xff
 800b630:	d001      	beq.n	800b636 <SD_TxDataBlock+0x22>
 800b632:	2300      	movs	r3, #0
 800b634:	e037      	b.n	800b6a6 <SD_TxDataBlock+0x92>

    /* transmit token */
    SPI_TxByte(token);
 800b636:	78fb      	ldrb	r3, [r7, #3]
 800b638:	4618      	mov	r0, r3
 800b63a:	f7ff fee5 	bl	800b408 <SPI_TxByte>

    /* if it's not STOP token, transmit data */
    if (token != 0xFD)
 800b63e:	78fb      	ldrb	r3, [r7, #3]
 800b640:	2bfd      	cmp	r3, #253	@ 0xfd
 800b642:	d028      	beq.n	800b696 <SD_TxDataBlock+0x82>
    {
        SPI_TxBuffer((uint8_t*)buff, 512);
 800b644:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800b648:	6878      	ldr	r0, [r7, #4]
 800b64a:	f7ff fef7 	bl	800b43c <SPI_TxBuffer>

        /* discard CRC */
        SPI_RxByte();
 800b64e:	f7ff ff11 	bl	800b474 <SPI_RxByte>
        SPI_RxByte();
 800b652:	f7ff ff0f 	bl	800b474 <SPI_RxByte>

        /* receive response */
        while (i <= 64)
 800b656:	e00b      	b.n	800b670 <SD_TxDataBlock+0x5c>
        {
            resp = SPI_RxByte();
 800b658:	f7ff ff0c 	bl	800b474 <SPI_RxByte>
 800b65c:	4603      	mov	r3, r0
 800b65e:	73fb      	strb	r3, [r7, #15]

            /* transmit 0x05 accepted */
            if ((resp & 0x1F) == 0x05) break;
 800b660:	7bfb      	ldrb	r3, [r7, #15]
 800b662:	f003 031f 	and.w	r3, r3, #31
 800b666:	2b05      	cmp	r3, #5
 800b668:	d006      	beq.n	800b678 <SD_TxDataBlock+0x64>
            i++;
 800b66a:	7bbb      	ldrb	r3, [r7, #14]
 800b66c:	3301      	adds	r3, #1
 800b66e:	73bb      	strb	r3, [r7, #14]
        while (i <= 64)
 800b670:	7bbb      	ldrb	r3, [r7, #14]
 800b672:	2b40      	cmp	r3, #64	@ 0x40
 800b674:	d9f0      	bls.n	800b658 <SD_TxDataBlock+0x44>
 800b676:	e000      	b.n	800b67a <SD_TxDataBlock+0x66>
            if ((resp & 0x1F) == 0x05) break;
 800b678:	bf00      	nop
        }

        // FIX 3: 타임아웃 없는 무한 루프 수정
        // 카드가 계속 busy(0x00) 상태일 경우 시스템이 멈추는 것을 방지하기 위해 타임아웃을 추가합니다.
        Timer1 = 200; // 200ms 타임아웃
 800b67a:	4b0d      	ldr	r3, [pc, #52]	@ (800b6b0 <SD_TxDataBlock+0x9c>)
 800b67c:	22c8      	movs	r2, #200	@ 0xc8
 800b67e:	801a      	strh	r2, [r3, #0]
        while ((SPI_RxByte() == 0) && Timer1);
 800b680:	bf00      	nop
 800b682:	f7ff fef7 	bl	800b474 <SPI_RxByte>
 800b686:	4603      	mov	r3, r0
 800b688:	2b00      	cmp	r3, #0
 800b68a:	d104      	bne.n	800b696 <SD_TxDataBlock+0x82>
 800b68c:	4b08      	ldr	r3, [pc, #32]	@ (800b6b0 <SD_TxDataBlock+0x9c>)
 800b68e:	881b      	ldrh	r3, [r3, #0]
 800b690:	b29b      	uxth	r3, r3
 800b692:	2b00      	cmp	r3, #0
 800b694:	d1f5      	bne.n	800b682 <SD_TxDataBlock+0x6e>
    }
    
    // resp가 초기화되지 않은 상태로 사용될 수 있어 수정
    if ((resp & 0x1F) == 0x05) return TRUE;
 800b696:	7bfb      	ldrb	r3, [r7, #15]
 800b698:	f003 031f 	and.w	r3, r3, #31
 800b69c:	2b05      	cmp	r3, #5
 800b69e:	d101      	bne.n	800b6a4 <SD_TxDataBlock+0x90>
 800b6a0:	2301      	movs	r3, #1
 800b6a2:	e000      	b.n	800b6a6 <SD_TxDataBlock+0x92>

    return FALSE;
 800b6a4:	2300      	movs	r3, #0
}
 800b6a6:	4618      	mov	r0, r3
 800b6a8:	3710      	adds	r7, #16
 800b6aa:	46bd      	mov	sp, r7
 800b6ac:	bd80      	pop	{r7, pc}
 800b6ae:	bf00      	nop
 800b6b0:	200161ac 	.word	0x200161ac

0800b6b4 <SD_SendCmd>:
#endif /* _USE_WRITE */

/* transmit command */
static BYTE SD_SendCmd(BYTE cmd, uint32_t arg)
{
 800b6b4:	b580      	push	{r7, lr}
 800b6b6:	b084      	sub	sp, #16
 800b6b8:	af00      	add	r7, sp, #0
 800b6ba:	4603      	mov	r3, r0
 800b6bc:	6039      	str	r1, [r7, #0]
 800b6be:	71fb      	strb	r3, [r7, #7]
    uint8_t crc, res;

    /* wait SD ready */
    if (SD_ReadyWait() != 0xFF) return 0xFF;
 800b6c0:	f7ff ff04 	bl	800b4cc <SD_ReadyWait>
 800b6c4:	4603      	mov	r3, r0
 800b6c6:	2bff      	cmp	r3, #255	@ 0xff
 800b6c8:	d001      	beq.n	800b6ce <SD_SendCmd+0x1a>
 800b6ca:	23ff      	movs	r3, #255	@ 0xff
 800b6cc:	e042      	b.n	800b754 <SD_SendCmd+0xa0>

    /* transmit command */
    SPI_TxByte(cmd);                    /* Command */
 800b6ce:	79fb      	ldrb	r3, [r7, #7]
 800b6d0:	4618      	mov	r0, r3
 800b6d2:	f7ff fe99 	bl	800b408 <SPI_TxByte>
    SPI_TxByte((uint8_t)(arg >> 24));   /* Argument[31..24] */
 800b6d6:	683b      	ldr	r3, [r7, #0]
 800b6d8:	0e1b      	lsrs	r3, r3, #24
 800b6da:	b2db      	uxtb	r3, r3
 800b6dc:	4618      	mov	r0, r3
 800b6de:	f7ff fe93 	bl	800b408 <SPI_TxByte>
    SPI_TxByte((uint8_t)(arg >> 16));   /* Argument[23..16] */
 800b6e2:	683b      	ldr	r3, [r7, #0]
 800b6e4:	0c1b      	lsrs	r3, r3, #16
 800b6e6:	b2db      	uxtb	r3, r3
 800b6e8:	4618      	mov	r0, r3
 800b6ea:	f7ff fe8d 	bl	800b408 <SPI_TxByte>
    SPI_TxByte((uint8_t)(arg >> 8));    /* Argument[15..8] */
 800b6ee:	683b      	ldr	r3, [r7, #0]
 800b6f0:	0a1b      	lsrs	r3, r3, #8
 800b6f2:	b2db      	uxtb	r3, r3
 800b6f4:	4618      	mov	r0, r3
 800b6f6:	f7ff fe87 	bl	800b408 <SPI_TxByte>
    SPI_TxByte((uint8_t)arg);           /* Argument[7..0] */
 800b6fa:	683b      	ldr	r3, [r7, #0]
 800b6fc:	b2db      	uxtb	r3, r3
 800b6fe:	4618      	mov	r0, r3
 800b700:	f7ff fe82 	bl	800b408 <SPI_TxByte>

    /* prepare CRC */
    if(cmd == CMD0) crc = 0x95; /* CRC for CMD0(0) */
 800b704:	79fb      	ldrb	r3, [r7, #7]
 800b706:	2b40      	cmp	r3, #64	@ 0x40
 800b708:	d102      	bne.n	800b710 <SD_SendCmd+0x5c>
 800b70a:	2395      	movs	r3, #149	@ 0x95
 800b70c:	73fb      	strb	r3, [r7, #15]
 800b70e:	e007      	b.n	800b720 <SD_SendCmd+0x6c>
    else if(cmd == CMD8) crc = 0x87;    /* CRC for CMD8(0x1AA) */
 800b710:	79fb      	ldrb	r3, [r7, #7]
 800b712:	2b48      	cmp	r3, #72	@ 0x48
 800b714:	d102      	bne.n	800b71c <SD_SendCmd+0x68>
 800b716:	2387      	movs	r3, #135	@ 0x87
 800b718:	73fb      	strb	r3, [r7, #15]
 800b71a:	e001      	b.n	800b720 <SD_SendCmd+0x6c>
    else crc = 1;
 800b71c:	2301      	movs	r3, #1
 800b71e:	73fb      	strb	r3, [r7, #15]

    /* transmit CRC */
    SPI_TxByte(crc);
 800b720:	7bfb      	ldrb	r3, [r7, #15]
 800b722:	4618      	mov	r0, r3
 800b724:	f7ff fe70 	bl	800b408 <SPI_TxByte>

    /* Skip a stuff byte when STOP_TRANSMISSION */
    if (cmd == CMD12) SPI_RxByte();
 800b728:	79fb      	ldrb	r3, [r7, #7]
 800b72a:	2b4c      	cmp	r3, #76	@ 0x4c
 800b72c:	d101      	bne.n	800b732 <SD_SendCmd+0x7e>
 800b72e:	f7ff fea1 	bl	800b474 <SPI_RxByte>

    /* receive response */
    uint8_t n = 10;
 800b732:	230a      	movs	r3, #10
 800b734:	73bb      	strb	r3, [r7, #14]
    do {
        res = SPI_RxByte();
 800b736:	f7ff fe9d 	bl	800b474 <SPI_RxByte>
 800b73a:	4603      	mov	r3, r0
 800b73c:	737b      	strb	r3, [r7, #13]
    } while ((res & 0x80) && --n);
 800b73e:	f997 300d 	ldrsb.w	r3, [r7, #13]
 800b742:	2b00      	cmp	r3, #0
 800b744:	da05      	bge.n	800b752 <SD_SendCmd+0x9e>
 800b746:	7bbb      	ldrb	r3, [r7, #14]
 800b748:	3b01      	subs	r3, #1
 800b74a:	73bb      	strb	r3, [r7, #14]
 800b74c:	7bbb      	ldrb	r3, [r7, #14]
 800b74e:	2b00      	cmp	r3, #0
 800b750:	d1f1      	bne.n	800b736 <SD_SendCmd+0x82>

    return res;
 800b752:	7b7b      	ldrb	r3, [r7, #13]
}
 800b754:	4618      	mov	r0, r3
 800b756:	3710      	adds	r7, #16
 800b758:	46bd      	mov	sp, r7
 800b75a:	bd80      	pop	{r7, pc}

0800b75c <SD_disk_initialize>:
 * user_diskio.c functions
 **************************************/

/* initialize SD */
DSTATUS SD_disk_initialize(BYTE drv) 
{
 800b75c:	b590      	push	{r4, r7, lr}
 800b75e:	b085      	sub	sp, #20
 800b760:	af00      	add	r7, sp, #0
 800b762:	4603      	mov	r3, r0
 800b764:	71fb      	strb	r3, [r7, #7]
    uint8_t n, type, ocr[4];

    /* single drive, drv should be 0 */
    if(drv) return STA_NOINIT;
 800b766:	79fb      	ldrb	r3, [r7, #7]
 800b768:	2b00      	cmp	r3, #0
 800b76a:	d001      	beq.n	800b770 <SD_disk_initialize+0x14>
 800b76c:	2301      	movs	r3, #1
 800b76e:	e0d6      	b.n	800b91e <SD_disk_initialize+0x1c2>

    /* no disk */
    if(Stat & STA_NODISK) return Stat;
 800b770:	4b6d      	ldr	r3, [pc, #436]	@ (800b928 <SD_disk_initialize+0x1cc>)
 800b772:	781b      	ldrb	r3, [r3, #0]
 800b774:	b2db      	uxtb	r3, r3
 800b776:	f003 0302 	and.w	r3, r3, #2
 800b77a:	2b00      	cmp	r3, #0
 800b77c:	d003      	beq.n	800b786 <SD_disk_initialize+0x2a>
 800b77e:	4b6a      	ldr	r3, [pc, #424]	@ (800b928 <SD_disk_initialize+0x1cc>)
 800b780:	781b      	ldrb	r3, [r3, #0]
 800b782:	b2db      	uxtb	r3, r3
 800b784:	e0cb      	b.n	800b91e <SD_disk_initialize+0x1c2>

    /* power on */
    SD_PowerOn();
 800b786:	f7ff febb 	bl	800b500 <SD_PowerOn>

    /* slave select */
    SELECT();
 800b78a:	f7ff fe1d 	bl	800b3c8 <SELECT>

    /* check disk type */
    type = 0;
 800b78e:	2300      	movs	r3, #0
 800b790:	73bb      	strb	r3, [r7, #14]

    /* send GO_IDLE_STATE command */
    if (SD_SendCmd(CMD0, 0) == 1)
 800b792:	2100      	movs	r1, #0
 800b794:	2040      	movs	r0, #64	@ 0x40
 800b796:	f7ff ff8d 	bl	800b6b4 <SD_SendCmd>
 800b79a:	4603      	mov	r3, r0
 800b79c:	2b01      	cmp	r3, #1
 800b79e:	f040 80a6 	bne.w	800b8ee <SD_disk_initialize+0x192>
    {
        /* timeout 1 sec */
        Timer1 = 1000;
 800b7a2:	4b62      	ldr	r3, [pc, #392]	@ (800b92c <SD_disk_initialize+0x1d0>)
 800b7a4:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800b7a8:	801a      	strh	r2, [r3, #0]

        /* SDC V2+ accept CMD8 command, http://elm-chan.org/docs/mmc/mmc_e.html */
        if (SD_SendCmd(CMD8, 0x1AA) == 1)
 800b7aa:	f44f 71d5 	mov.w	r1, #426	@ 0x1aa
 800b7ae:	2048      	movs	r0, #72	@ 0x48
 800b7b0:	f7ff ff80 	bl	800b6b4 <SD_SendCmd>
 800b7b4:	4603      	mov	r3, r0
 800b7b6:	2b01      	cmp	r3, #1
 800b7b8:	d158      	bne.n	800b86c <SD_disk_initialize+0x110>
        {
            /* operation condition register */
            for (n = 0; n < 4; n++)
 800b7ba:	2300      	movs	r3, #0
 800b7bc:	73fb      	strb	r3, [r7, #15]
 800b7be:	e00c      	b.n	800b7da <SD_disk_initialize+0x7e>
            {
                ocr[n] = SPI_RxByte();
 800b7c0:	7bfc      	ldrb	r4, [r7, #15]
 800b7c2:	f7ff fe57 	bl	800b474 <SPI_RxByte>
 800b7c6:	4603      	mov	r3, r0
 800b7c8:	461a      	mov	r2, r3
 800b7ca:	f104 0310 	add.w	r3, r4, #16
 800b7ce:	443b      	add	r3, r7
 800b7d0:	f803 2c08 	strb.w	r2, [r3, #-8]
            for (n = 0; n < 4; n++)
 800b7d4:	7bfb      	ldrb	r3, [r7, #15]
 800b7d6:	3301      	adds	r3, #1
 800b7d8:	73fb      	strb	r3, [r7, #15]
 800b7da:	7bfb      	ldrb	r3, [r7, #15]
 800b7dc:	2b03      	cmp	r3, #3
 800b7de:	d9ef      	bls.n	800b7c0 <SD_disk_initialize+0x64>
            }

            /* voltage range 2.7-3.6V */
            if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 800b7e0:	7abb      	ldrb	r3, [r7, #10]
 800b7e2:	2b01      	cmp	r3, #1
 800b7e4:	f040 8083 	bne.w	800b8ee <SD_disk_initialize+0x192>
 800b7e8:	7afb      	ldrb	r3, [r7, #11]
 800b7ea:	2baa      	cmp	r3, #170	@ 0xaa
 800b7ec:	d17f      	bne.n	800b8ee <SD_disk_initialize+0x192>
            {
                /* ACMD41 with HCS bit */
                do {
                    if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 800b7ee:	2100      	movs	r1, #0
 800b7f0:	2077      	movs	r0, #119	@ 0x77
 800b7f2:	f7ff ff5f 	bl	800b6b4 <SD_SendCmd>
 800b7f6:	4603      	mov	r3, r0
 800b7f8:	2b01      	cmp	r3, #1
 800b7fa:	d807      	bhi.n	800b80c <SD_disk_initialize+0xb0>
 800b7fc:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 800b800:	2069      	movs	r0, #105	@ 0x69
 800b802:	f7ff ff57 	bl	800b6b4 <SD_SendCmd>
 800b806:	4603      	mov	r3, r0
 800b808:	2b00      	cmp	r3, #0
 800b80a:	d005      	beq.n	800b818 <SD_disk_initialize+0xbc>
                } while (Timer1);
 800b80c:	4b47      	ldr	r3, [pc, #284]	@ (800b92c <SD_disk_initialize+0x1d0>)
 800b80e:	881b      	ldrh	r3, [r3, #0]
 800b810:	b29b      	uxth	r3, r3
 800b812:	2b00      	cmp	r3, #0
 800b814:	d1eb      	bne.n	800b7ee <SD_disk_initialize+0x92>
 800b816:	e000      	b.n	800b81a <SD_disk_initialize+0xbe>
                    if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 800b818:	bf00      	nop

                /* READ_OCR */
                if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 800b81a:	4b44      	ldr	r3, [pc, #272]	@ (800b92c <SD_disk_initialize+0x1d0>)
 800b81c:	881b      	ldrh	r3, [r3, #0]
 800b81e:	b29b      	uxth	r3, r3
 800b820:	2b00      	cmp	r3, #0
 800b822:	d064      	beq.n	800b8ee <SD_disk_initialize+0x192>
 800b824:	2100      	movs	r1, #0
 800b826:	207a      	movs	r0, #122	@ 0x7a
 800b828:	f7ff ff44 	bl	800b6b4 <SD_SendCmd>
 800b82c:	4603      	mov	r3, r0
 800b82e:	2b00      	cmp	r3, #0
 800b830:	d15d      	bne.n	800b8ee <SD_disk_initialize+0x192>
                {
                    /* Check CCS bit */
                    for (n = 0; n < 4; n++)
 800b832:	2300      	movs	r3, #0
 800b834:	73fb      	strb	r3, [r7, #15]
 800b836:	e00c      	b.n	800b852 <SD_disk_initialize+0xf6>
                    {
                        ocr[n] = SPI_RxByte();
 800b838:	7bfc      	ldrb	r4, [r7, #15]
 800b83a:	f7ff fe1b 	bl	800b474 <SPI_RxByte>
 800b83e:	4603      	mov	r3, r0
 800b840:	461a      	mov	r2, r3
 800b842:	f104 0310 	add.w	r3, r4, #16
 800b846:	443b      	add	r3, r7
 800b848:	f803 2c08 	strb.w	r2, [r3, #-8]
                    for (n = 0; n < 4; n++)
 800b84c:	7bfb      	ldrb	r3, [r7, #15]
 800b84e:	3301      	adds	r3, #1
 800b850:	73fb      	strb	r3, [r7, #15]
 800b852:	7bfb      	ldrb	r3, [r7, #15]
 800b854:	2b03      	cmp	r3, #3
 800b856:	d9ef      	bls.n	800b838 <SD_disk_initialize+0xdc>
                    }

                    /* SDv2 (HC or SC) */
                    type = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;
 800b858:	7a3b      	ldrb	r3, [r7, #8]
 800b85a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b85e:	2b00      	cmp	r3, #0
 800b860:	d001      	beq.n	800b866 <SD_disk_initialize+0x10a>
 800b862:	230c      	movs	r3, #12
 800b864:	e000      	b.n	800b868 <SD_disk_initialize+0x10c>
 800b866:	2304      	movs	r3, #4
 800b868:	73bb      	strb	r3, [r7, #14]
 800b86a:	e040      	b.n	800b8ee <SD_disk_initialize+0x192>
            }
        }
        else
        {
            /* SDC V1 or MMC */
            type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? CT_SD1 : CT_MMC;
 800b86c:	2100      	movs	r1, #0
 800b86e:	2077      	movs	r0, #119	@ 0x77
 800b870:	f7ff ff20 	bl	800b6b4 <SD_SendCmd>
 800b874:	4603      	mov	r3, r0
 800b876:	2b01      	cmp	r3, #1
 800b878:	d808      	bhi.n	800b88c <SD_disk_initialize+0x130>
 800b87a:	2100      	movs	r1, #0
 800b87c:	2069      	movs	r0, #105	@ 0x69
 800b87e:	f7ff ff19 	bl	800b6b4 <SD_SendCmd>
 800b882:	4603      	mov	r3, r0
 800b884:	2b01      	cmp	r3, #1
 800b886:	d801      	bhi.n	800b88c <SD_disk_initialize+0x130>
 800b888:	2302      	movs	r3, #2
 800b88a:	e000      	b.n	800b88e <SD_disk_initialize+0x132>
 800b88c:	2301      	movs	r3, #1
 800b88e:	73bb      	strb	r3, [r7, #14]

            do
            {
                if (type == CT_SD1)
 800b890:	7bbb      	ldrb	r3, [r7, #14]
 800b892:	2b02      	cmp	r3, #2
 800b894:	d10e      	bne.n	800b8b4 <SD_disk_initialize+0x158>
                {
                    if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0) break; /* ACMD41 */
 800b896:	2100      	movs	r1, #0
 800b898:	2077      	movs	r0, #119	@ 0x77
 800b89a:	f7ff ff0b 	bl	800b6b4 <SD_SendCmd>
 800b89e:	4603      	mov	r3, r0
 800b8a0:	2b01      	cmp	r3, #1
 800b8a2:	d80e      	bhi.n	800b8c2 <SD_disk_initialize+0x166>
 800b8a4:	2100      	movs	r1, #0
 800b8a6:	2069      	movs	r0, #105	@ 0x69
 800b8a8:	f7ff ff04 	bl	800b6b4 <SD_SendCmd>
 800b8ac:	4603      	mov	r3, r0
 800b8ae:	2b00      	cmp	r3, #0
 800b8b0:	d107      	bne.n	800b8c2 <SD_disk_initialize+0x166>
 800b8b2:	e00d      	b.n	800b8d0 <SD_disk_initialize+0x174>
                }
                else
                {
                    if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 800b8b4:	2100      	movs	r1, #0
 800b8b6:	2041      	movs	r0, #65	@ 0x41
 800b8b8:	f7ff fefc 	bl	800b6b4 <SD_SendCmd>
 800b8bc:	4603      	mov	r3, r0
 800b8be:	2b00      	cmp	r3, #0
 800b8c0:	d005      	beq.n	800b8ce <SD_disk_initialize+0x172>
                }

            } while (Timer1);
 800b8c2:	4b1a      	ldr	r3, [pc, #104]	@ (800b92c <SD_disk_initialize+0x1d0>)
 800b8c4:	881b      	ldrh	r3, [r3, #0]
 800b8c6:	b29b      	uxth	r3, r3
 800b8c8:	2b00      	cmp	r3, #0
 800b8ca:	d1e1      	bne.n	800b890 <SD_disk_initialize+0x134>
 800b8cc:	e000      	b.n	800b8d0 <SD_disk_initialize+0x174>
                    if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 800b8ce:	bf00      	nop

            /* SET_BLOCKLEN */
            if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) type = 0;
 800b8d0:	4b16      	ldr	r3, [pc, #88]	@ (800b92c <SD_disk_initialize+0x1d0>)
 800b8d2:	881b      	ldrh	r3, [r3, #0]
 800b8d4:	b29b      	uxth	r3, r3
 800b8d6:	2b00      	cmp	r3, #0
 800b8d8:	d007      	beq.n	800b8ea <SD_disk_initialize+0x18e>
 800b8da:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800b8de:	2050      	movs	r0, #80	@ 0x50
 800b8e0:	f7ff fee8 	bl	800b6b4 <SD_SendCmd>
 800b8e4:	4603      	mov	r3, r0
 800b8e6:	2b00      	cmp	r3, #0
 800b8e8:	d001      	beq.n	800b8ee <SD_disk_initialize+0x192>
 800b8ea:	2300      	movs	r3, #0
 800b8ec:	73bb      	strb	r3, [r7, #14]
        }
    }

    CardType = type;
 800b8ee:	4a10      	ldr	r2, [pc, #64]	@ (800b930 <SD_disk_initialize+0x1d4>)
 800b8f0:	7bbb      	ldrb	r3, [r7, #14]
 800b8f2:	7013      	strb	r3, [r2, #0]

    /* Idle */
    DESELECT();
 800b8f4:	f7ff fd78 	bl	800b3e8 <DESELECT>
    SPI_RxByte();
 800b8f8:	f7ff fdbc 	bl	800b474 <SPI_RxByte>

    /* Clear STA_NOINIT */
    if (type)
 800b8fc:	7bbb      	ldrb	r3, [r7, #14]
 800b8fe:	2b00      	cmp	r3, #0
 800b900:	d008      	beq.n	800b914 <SD_disk_initialize+0x1b8>
    {
        Stat &= ~STA_NOINIT;
 800b902:	4b09      	ldr	r3, [pc, #36]	@ (800b928 <SD_disk_initialize+0x1cc>)
 800b904:	781b      	ldrb	r3, [r3, #0]
 800b906:	b2db      	uxtb	r3, r3
 800b908:	f023 0301 	bic.w	r3, r3, #1
 800b90c:	b2da      	uxtb	r2, r3
 800b90e:	4b06      	ldr	r3, [pc, #24]	@ (800b928 <SD_disk_initialize+0x1cc>)
 800b910:	701a      	strb	r2, [r3, #0]
 800b912:	e001      	b.n	800b918 <SD_disk_initialize+0x1bc>
    }
    else
    {
        /* Initialization failed */
        SD_PowerOff();
 800b914:	f7ff fe36 	bl	800b584 <SD_PowerOff>
    }

    return Stat;
 800b918:	4b03      	ldr	r3, [pc, #12]	@ (800b928 <SD_disk_initialize+0x1cc>)
 800b91a:	781b      	ldrb	r3, [r3, #0]
 800b91c:	b2db      	uxtb	r3, r3
}
 800b91e:	4618      	mov	r0, r3
 800b920:	3714      	adds	r7, #20
 800b922:	46bd      	mov	sp, r7
 800b924:	bd90      	pop	{r4, r7, pc}
 800b926:	bf00      	nop
 800b928:	2000d11d 	.word	0x2000d11d
 800b92c:	200161ac 	.word	0x200161ac
 800b930:	200161b0 	.word	0x200161b0

0800b934 <SD_disk_status>:

/* return disk status */
DSTATUS SD_disk_status(BYTE drv) 
{
 800b934:	b480      	push	{r7}
 800b936:	b083      	sub	sp, #12
 800b938:	af00      	add	r7, sp, #0
 800b93a:	4603      	mov	r3, r0
 800b93c:	71fb      	strb	r3, [r7, #7]
    if (drv) return STA_NOINIT;
 800b93e:	79fb      	ldrb	r3, [r7, #7]
 800b940:	2b00      	cmp	r3, #0
 800b942:	d001      	beq.n	800b948 <SD_disk_status+0x14>
 800b944:	2301      	movs	r3, #1
 800b946:	e002      	b.n	800b94e <SD_disk_status+0x1a>
    return Stat;
 800b948:	4b04      	ldr	r3, [pc, #16]	@ (800b95c <SD_disk_status+0x28>)
 800b94a:	781b      	ldrb	r3, [r3, #0]
 800b94c:	b2db      	uxtb	r3, r3
}
 800b94e:	4618      	mov	r0, r3
 800b950:	370c      	adds	r7, #12
 800b952:	46bd      	mov	sp, r7
 800b954:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b958:	4770      	bx	lr
 800b95a:	bf00      	nop
 800b95c:	2000d11d 	.word	0x2000d11d

0800b960 <SD_disk_read>:

/* read sector */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count) 
{
 800b960:	b580      	push	{r7, lr}
 800b962:	b084      	sub	sp, #16
 800b964:	af00      	add	r7, sp, #0
 800b966:	60b9      	str	r1, [r7, #8]
 800b968:	607a      	str	r2, [r7, #4]
 800b96a:	603b      	str	r3, [r7, #0]
 800b96c:	4603      	mov	r3, r0
 800b96e:	73fb      	strb	r3, [r7, #15]
    /* pdrv should be 0 */
    if (pdrv || !count) return RES_PARERR;
 800b970:	7bfb      	ldrb	r3, [r7, #15]
 800b972:	2b00      	cmp	r3, #0
 800b974:	d102      	bne.n	800b97c <SD_disk_read+0x1c>
 800b976:	683b      	ldr	r3, [r7, #0]
 800b978:	2b00      	cmp	r3, #0
 800b97a:	d101      	bne.n	800b980 <SD_disk_read+0x20>
 800b97c:	2304      	movs	r3, #4
 800b97e:	e051      	b.n	800ba24 <SD_disk_read+0xc4>

    /* no disk */
    if (Stat & STA_NOINIT) return RES_NOTRDY;
 800b980:	4b2a      	ldr	r3, [pc, #168]	@ (800ba2c <SD_disk_read+0xcc>)
 800b982:	781b      	ldrb	r3, [r3, #0]
 800b984:	b2db      	uxtb	r3, r3
 800b986:	f003 0301 	and.w	r3, r3, #1
 800b98a:	2b00      	cmp	r3, #0
 800b98c:	d001      	beq.n	800b992 <SD_disk_read+0x32>
 800b98e:	2303      	movs	r3, #3
 800b990:	e048      	b.n	800ba24 <SD_disk_read+0xc4>

    /* convert to byte address */
    if (!(CardType & CT_BLOCK)) sector *= 512;
 800b992:	4b27      	ldr	r3, [pc, #156]	@ (800ba30 <SD_disk_read+0xd0>)
 800b994:	781b      	ldrb	r3, [r3, #0]
 800b996:	f003 0308 	and.w	r3, r3, #8
 800b99a:	2b00      	cmp	r3, #0
 800b99c:	d102      	bne.n	800b9a4 <SD_disk_read+0x44>
 800b99e:	687b      	ldr	r3, [r7, #4]
 800b9a0:	025b      	lsls	r3, r3, #9
 800b9a2:	607b      	str	r3, [r7, #4]

    SELECT();
 800b9a4:	f7ff fd10 	bl	800b3c8 <SELECT>

    if (count == 1)
 800b9a8:	683b      	ldr	r3, [r7, #0]
 800b9aa:	2b01      	cmp	r3, #1
 800b9ac:	d111      	bne.n	800b9d2 <SD_disk_read+0x72>
    {
        /* READ_SINGLE_BLOCK */
        if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512)) count = 0;
 800b9ae:	6879      	ldr	r1, [r7, #4]
 800b9b0:	2051      	movs	r0, #81	@ 0x51
 800b9b2:	f7ff fe7f 	bl	800b6b4 <SD_SendCmd>
 800b9b6:	4603      	mov	r3, r0
 800b9b8:	2b00      	cmp	r3, #0
 800b9ba:	d129      	bne.n	800ba10 <SD_disk_read+0xb0>
 800b9bc:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800b9c0:	68b8      	ldr	r0, [r7, #8]
 800b9c2:	f7ff fdf7 	bl	800b5b4 <SD_RxDataBlock>
 800b9c6:	4603      	mov	r3, r0
 800b9c8:	2b00      	cmp	r3, #0
 800b9ca:	d021      	beq.n	800ba10 <SD_disk_read+0xb0>
 800b9cc:	2300      	movs	r3, #0
 800b9ce:	603b      	str	r3, [r7, #0]
 800b9d0:	e01e      	b.n	800ba10 <SD_disk_read+0xb0>
    }
    else
    {
        /* READ_MULTIPLE_BLOCK */
        if (SD_SendCmd(CMD18, sector) == 0)
 800b9d2:	6879      	ldr	r1, [r7, #4]
 800b9d4:	2052      	movs	r0, #82	@ 0x52
 800b9d6:	f7ff fe6d 	bl	800b6b4 <SD_SendCmd>
 800b9da:	4603      	mov	r3, r0
 800b9dc:	2b00      	cmp	r3, #0
 800b9de:	d117      	bne.n	800ba10 <SD_disk_read+0xb0>
        {
            do {
                if (!SD_RxDataBlock(buff, 512)) break;
 800b9e0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800b9e4:	68b8      	ldr	r0, [r7, #8]
 800b9e6:	f7ff fde5 	bl	800b5b4 <SD_RxDataBlock>
 800b9ea:	4603      	mov	r3, r0
 800b9ec:	2b00      	cmp	r3, #0
 800b9ee:	d00a      	beq.n	800ba06 <SD_disk_read+0xa6>
                buff += 512;
 800b9f0:	68bb      	ldr	r3, [r7, #8]
 800b9f2:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 800b9f6:	60bb      	str	r3, [r7, #8]
            } while (--count);
 800b9f8:	683b      	ldr	r3, [r7, #0]
 800b9fa:	3b01      	subs	r3, #1
 800b9fc:	603b      	str	r3, [r7, #0]
 800b9fe:	683b      	ldr	r3, [r7, #0]
 800ba00:	2b00      	cmp	r3, #0
 800ba02:	d1ed      	bne.n	800b9e0 <SD_disk_read+0x80>
 800ba04:	e000      	b.n	800ba08 <SD_disk_read+0xa8>
                if (!SD_RxDataBlock(buff, 512)) break;
 800ba06:	bf00      	nop

            /* STOP_TRANSMISSION */
            SD_SendCmd(CMD12, 0);
 800ba08:	2100      	movs	r1, #0
 800ba0a:	204c      	movs	r0, #76	@ 0x4c
 800ba0c:	f7ff fe52 	bl	800b6b4 <SD_SendCmd>
        }
    }

    /* Idle */
    DESELECT();
 800ba10:	f7ff fcea 	bl	800b3e8 <DESELECT>
    SPI_RxByte();
 800ba14:	f7ff fd2e 	bl	800b474 <SPI_RxByte>

    return count ? RES_ERROR : RES_OK;
 800ba18:	683b      	ldr	r3, [r7, #0]
 800ba1a:	2b00      	cmp	r3, #0
 800ba1c:	bf14      	ite	ne
 800ba1e:	2301      	movne	r3, #1
 800ba20:	2300      	moveq	r3, #0
 800ba22:	b2db      	uxtb	r3, r3
}
 800ba24:	4618      	mov	r0, r3
 800ba26:	3710      	adds	r7, #16
 800ba28:	46bd      	mov	sp, r7
 800ba2a:	bd80      	pop	{r7, pc}
 800ba2c:	2000d11d 	.word	0x2000d11d
 800ba30:	200161b0 	.word	0x200161b0

0800ba34 <SD_disk_write>:

/* write sector */
#if _USE_WRITE == 1
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count) 
{
 800ba34:	b580      	push	{r7, lr}
 800ba36:	b084      	sub	sp, #16
 800ba38:	af00      	add	r7, sp, #0
 800ba3a:	60b9      	str	r1, [r7, #8]
 800ba3c:	607a      	str	r2, [r7, #4]
 800ba3e:	603b      	str	r3, [r7, #0]
 800ba40:	4603      	mov	r3, r0
 800ba42:	73fb      	strb	r3, [r7, #15]
    /* pdrv should be 0 */
    if (pdrv || !count) return RES_PARERR;
 800ba44:	7bfb      	ldrb	r3, [r7, #15]
 800ba46:	2b00      	cmp	r3, #0
 800ba48:	d102      	bne.n	800ba50 <SD_disk_write+0x1c>
 800ba4a:	683b      	ldr	r3, [r7, #0]
 800ba4c:	2b00      	cmp	r3, #0
 800ba4e:	d101      	bne.n	800ba54 <SD_disk_write+0x20>
 800ba50:	2304      	movs	r3, #4
 800ba52:	e06b      	b.n	800bb2c <SD_disk_write+0xf8>

    /* no disk */
    if (Stat & STA_NOINIT) return RES_NOTRDY;
 800ba54:	4b37      	ldr	r3, [pc, #220]	@ (800bb34 <SD_disk_write+0x100>)
 800ba56:	781b      	ldrb	r3, [r3, #0]
 800ba58:	b2db      	uxtb	r3, r3
 800ba5a:	f003 0301 	and.w	r3, r3, #1
 800ba5e:	2b00      	cmp	r3, #0
 800ba60:	d001      	beq.n	800ba66 <SD_disk_write+0x32>
 800ba62:	2303      	movs	r3, #3
 800ba64:	e062      	b.n	800bb2c <SD_disk_write+0xf8>

    /* write protection */
    if (Stat & STA_PROTECT) return RES_WRPRT;
 800ba66:	4b33      	ldr	r3, [pc, #204]	@ (800bb34 <SD_disk_write+0x100>)
 800ba68:	781b      	ldrb	r3, [r3, #0]
 800ba6a:	b2db      	uxtb	r3, r3
 800ba6c:	f003 0304 	and.w	r3, r3, #4
 800ba70:	2b00      	cmp	r3, #0
 800ba72:	d001      	beq.n	800ba78 <SD_disk_write+0x44>
 800ba74:	2302      	movs	r3, #2
 800ba76:	e059      	b.n	800bb2c <SD_disk_write+0xf8>

    /* convert to byte address */
    if (!(CardType & CT_BLOCK)) sector *= 512;
 800ba78:	4b2f      	ldr	r3, [pc, #188]	@ (800bb38 <SD_disk_write+0x104>)
 800ba7a:	781b      	ldrb	r3, [r3, #0]
 800ba7c:	f003 0308 	and.w	r3, r3, #8
 800ba80:	2b00      	cmp	r3, #0
 800ba82:	d102      	bne.n	800ba8a <SD_disk_write+0x56>
 800ba84:	687b      	ldr	r3, [r7, #4]
 800ba86:	025b      	lsls	r3, r3, #9
 800ba88:	607b      	str	r3, [r7, #4]

    SELECT();
 800ba8a:	f7ff fc9d 	bl	800b3c8 <SELECT>

    if (count == 1)
 800ba8e:	683b      	ldr	r3, [r7, #0]
 800ba90:	2b01      	cmp	r3, #1
 800ba92:	d110      	bne.n	800bab6 <SD_disk_write+0x82>
    {
        /* WRITE_BLOCK */
        if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 800ba94:	6879      	ldr	r1, [r7, #4]
 800ba96:	2058      	movs	r0, #88	@ 0x58
 800ba98:	f7ff fe0c 	bl	800b6b4 <SD_SendCmd>
 800ba9c:	4603      	mov	r3, r0
 800ba9e:	2b00      	cmp	r3, #0
 800baa0:	d13a      	bne.n	800bb18 <SD_disk_write+0xe4>
 800baa2:	21fe      	movs	r1, #254	@ 0xfe
 800baa4:	68b8      	ldr	r0, [r7, #8]
 800baa6:	f7ff fdb5 	bl	800b614 <SD_TxDataBlock>
 800baaa:	4603      	mov	r3, r0
 800baac:	2b00      	cmp	r3, #0
 800baae:	d033      	beq.n	800bb18 <SD_disk_write+0xe4>
            count = 0;
 800bab0:	2300      	movs	r3, #0
 800bab2:	603b      	str	r3, [r7, #0]
 800bab4:	e030      	b.n	800bb18 <SD_disk_write+0xe4>
    }
    else
    {
        /* WRITE_MULTIPLE_BLOCK */
        if (CardType & CT_SD1)
 800bab6:	4b20      	ldr	r3, [pc, #128]	@ (800bb38 <SD_disk_write+0x104>)
 800bab8:	781b      	ldrb	r3, [r3, #0]
 800baba:	f003 0302 	and.w	r3, r3, #2
 800babe:	2b00      	cmp	r3, #0
 800bac0:	d007      	beq.n	800bad2 <SD_disk_write+0x9e>
        {
            SD_SendCmd(CMD55, 0);
 800bac2:	2100      	movs	r1, #0
 800bac4:	2077      	movs	r0, #119	@ 0x77
 800bac6:	f7ff fdf5 	bl	800b6b4 <SD_SendCmd>
            SD_SendCmd(CMD23, count); /* ACMD23 */
 800baca:	6839      	ldr	r1, [r7, #0]
 800bacc:	2057      	movs	r0, #87	@ 0x57
 800bace:	f7ff fdf1 	bl	800b6b4 <SD_SendCmd>
        }

        if (SD_SendCmd(CMD25, sector) == 0)
 800bad2:	6879      	ldr	r1, [r7, #4]
 800bad4:	2059      	movs	r0, #89	@ 0x59
 800bad6:	f7ff fded 	bl	800b6b4 <SD_SendCmd>
 800bada:	4603      	mov	r3, r0
 800badc:	2b00      	cmp	r3, #0
 800bade:	d11b      	bne.n	800bb18 <SD_disk_write+0xe4>
        {
            do {
                if(!SD_TxDataBlock(buff, 0xFC)) break;
 800bae0:	21fc      	movs	r1, #252	@ 0xfc
 800bae2:	68b8      	ldr	r0, [r7, #8]
 800bae4:	f7ff fd96 	bl	800b614 <SD_TxDataBlock>
 800bae8:	4603      	mov	r3, r0
 800baea:	2b00      	cmp	r3, #0
 800baec:	d00a      	beq.n	800bb04 <SD_disk_write+0xd0>
                buff += 512;
 800baee:	68bb      	ldr	r3, [r7, #8]
 800baf0:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 800baf4:	60bb      	str	r3, [r7, #8]
            } while (--count);
 800baf6:	683b      	ldr	r3, [r7, #0]
 800baf8:	3b01      	subs	r3, #1
 800bafa:	603b      	str	r3, [r7, #0]
 800bafc:	683b      	ldr	r3, [r7, #0]
 800bafe:	2b00      	cmp	r3, #0
 800bb00:	d1ee      	bne.n	800bae0 <SD_disk_write+0xac>
 800bb02:	e000      	b.n	800bb06 <SD_disk_write+0xd2>
                if(!SD_TxDataBlock(buff, 0xFC)) break;
 800bb04:	bf00      	nop

            /* STOP_TRAN token */
            if(!SD_TxDataBlock(0, 0xFD))
 800bb06:	21fd      	movs	r1, #253	@ 0xfd
 800bb08:	2000      	movs	r0, #0
 800bb0a:	f7ff fd83 	bl	800b614 <SD_TxDataBlock>
 800bb0e:	4603      	mov	r3, r0
 800bb10:	2b00      	cmp	r3, #0
 800bb12:	d101      	bne.n	800bb18 <SD_disk_write+0xe4>
            {
                count = 1;
 800bb14:	2301      	movs	r3, #1
 800bb16:	603b      	str	r3, [r7, #0]
            }
        }
    }

    /* Idle */
    DESELECT();
 800bb18:	f7ff fc66 	bl	800b3e8 <DESELECT>
    SPI_RxByte();
 800bb1c:	f7ff fcaa 	bl	800b474 <SPI_RxByte>

    return count ? RES_ERROR : RES_OK;
 800bb20:	683b      	ldr	r3, [r7, #0]
 800bb22:	2b00      	cmp	r3, #0
 800bb24:	bf14      	ite	ne
 800bb26:	2301      	movne	r3, #1
 800bb28:	2300      	moveq	r3, #0
 800bb2a:	b2db      	uxtb	r3, r3
}
 800bb2c:	4618      	mov	r0, r3
 800bb2e:	3710      	adds	r7, #16
 800bb30:	46bd      	mov	sp, r7
 800bb32:	bd80      	pop	{r7, pc}
 800bb34:	2000d11d 	.word	0x2000d11d
 800bb38:	200161b0 	.word	0x200161b0

0800bb3c <SD_disk_ioctl>:
#endif /* _USE_WRITE */

/* ioctl */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff) 
{
 800bb3c:	b590      	push	{r4, r7, lr}
 800bb3e:	b08b      	sub	sp, #44	@ 0x2c
 800bb40:	af00      	add	r7, sp, #0
 800bb42:	4603      	mov	r3, r0
 800bb44:	603a      	str	r2, [r7, #0]
 800bb46:	71fb      	strb	r3, [r7, #7]
 800bb48:	460b      	mov	r3, r1
 800bb4a:	71bb      	strb	r3, [r7, #6]
    DRESULT res;
    uint8_t n, csd[16], *ptr = buff;
 800bb4c:	683b      	ldr	r3, [r7, #0]
 800bb4e:	623b      	str	r3, [r7, #32]
    
    /* pdrv should be 0 */
    if (drv) return RES_PARERR;
 800bb50:	79fb      	ldrb	r3, [r7, #7]
 800bb52:	2b00      	cmp	r3, #0
 800bb54:	d001      	beq.n	800bb5a <SD_disk_ioctl+0x1e>
 800bb56:	2304      	movs	r3, #4
 800bb58:	e118      	b.n	800bd8c <SD_disk_ioctl+0x250>
    res = RES_ERROR;
 800bb5a:	2301      	movs	r3, #1
 800bb5c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    if (ctrl == CTRL_POWER)
 800bb60:	79bb      	ldrb	r3, [r7, #6]
 800bb62:	2b05      	cmp	r3, #5
 800bb64:	d124      	bne.n	800bbb0 <SD_disk_ioctl+0x74>
    {
        switch (*ptr)
 800bb66:	6a3b      	ldr	r3, [r7, #32]
 800bb68:	781b      	ldrb	r3, [r3, #0]
 800bb6a:	2b02      	cmp	r3, #2
 800bb6c:	d012      	beq.n	800bb94 <SD_disk_ioctl+0x58>
 800bb6e:	2b02      	cmp	r3, #2
 800bb70:	dc1a      	bgt.n	800bba8 <SD_disk_ioctl+0x6c>
 800bb72:	2b00      	cmp	r3, #0
 800bb74:	d002      	beq.n	800bb7c <SD_disk_ioctl+0x40>
 800bb76:	2b01      	cmp	r3, #1
 800bb78:	d006      	beq.n	800bb88 <SD_disk_ioctl+0x4c>
 800bb7a:	e015      	b.n	800bba8 <SD_disk_ioctl+0x6c>
        {
        case 0:
            SD_PowerOff();      /* Power Off */
 800bb7c:	f7ff fd02 	bl	800b584 <SD_PowerOff>
            res = RES_OK;
 800bb80:	2300      	movs	r3, #0
 800bb82:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            break;
 800bb86:	e0ff      	b.n	800bd88 <SD_disk_ioctl+0x24c>
        case 1:
            SD_PowerOn();       /* Power On */
 800bb88:	f7ff fcba 	bl	800b500 <SD_PowerOn>
            res = RES_OK;
 800bb8c:	2300      	movs	r3, #0
 800bb8e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            break;
 800bb92:	e0f9      	b.n	800bd88 <SD_disk_ioctl+0x24c>
        case 2:
            *(ptr + 1) = SD_CheckPower();
 800bb94:	6a3b      	ldr	r3, [r7, #32]
 800bb96:	1c5c      	adds	r4, r3, #1
 800bb98:	f7ff fd00 	bl	800b59c <SD_CheckPower>
 800bb9c:	4603      	mov	r3, r0
 800bb9e:	7023      	strb	r3, [r4, #0]
            res = RES_OK;       /* Power Check */
 800bba0:	2300      	movs	r3, #0
 800bba2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            break;
 800bba6:	e0ef      	b.n	800bd88 <SD_disk_ioctl+0x24c>
        default:
            res = RES_PARERR;
 800bba8:	2304      	movs	r3, #4
 800bbaa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800bbae:	e0eb      	b.n	800bd88 <SD_disk_ioctl+0x24c>
        }
    }
    else
    {
        /* no disk */
        if (Stat & STA_NOINIT) return RES_NOTRDY;
 800bbb0:	4b78      	ldr	r3, [pc, #480]	@ (800bd94 <SD_disk_ioctl+0x258>)
 800bbb2:	781b      	ldrb	r3, [r3, #0]
 800bbb4:	b2db      	uxtb	r3, r3
 800bbb6:	f003 0301 	and.w	r3, r3, #1
 800bbba:	2b00      	cmp	r3, #0
 800bbbc:	d001      	beq.n	800bbc2 <SD_disk_ioctl+0x86>
 800bbbe:	2303      	movs	r3, #3
 800bbc0:	e0e4      	b.n	800bd8c <SD_disk_ioctl+0x250>

        SELECT();
 800bbc2:	f7ff fc01 	bl	800b3c8 <SELECT>

        switch (ctrl)
 800bbc6:	79bb      	ldrb	r3, [r7, #6]
 800bbc8:	2b0d      	cmp	r3, #13
 800bbca:	f200 80cc 	bhi.w	800bd66 <SD_disk_ioctl+0x22a>
 800bbce:	a201      	add	r2, pc, #4	@ (adr r2, 800bbd4 <SD_disk_ioctl+0x98>)
 800bbd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bbd4:	0800bccf 	.word	0x0800bccf
 800bbd8:	0800bc0d 	.word	0x0800bc0d
 800bbdc:	0800bcbf 	.word	0x0800bcbf
 800bbe0:	0800bd67 	.word	0x0800bd67
 800bbe4:	0800bd67 	.word	0x0800bd67
 800bbe8:	0800bd67 	.word	0x0800bd67
 800bbec:	0800bd67 	.word	0x0800bd67
 800bbf0:	0800bd67 	.word	0x0800bd67
 800bbf4:	0800bd67 	.word	0x0800bd67
 800bbf8:	0800bd67 	.word	0x0800bd67
 800bbfc:	0800bd67 	.word	0x0800bd67
 800bc00:	0800bce1 	.word	0x0800bce1
 800bc04:	0800bd05 	.word	0x0800bd05
 800bc08:	0800bd29 	.word	0x0800bd29
        {
        case GET_SECTOR_COUNT:
            /* SEND_CSD */
            if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 800bc0c:	2100      	movs	r1, #0
 800bc0e:	2049      	movs	r0, #73	@ 0x49
 800bc10:	f7ff fd50 	bl	800b6b4 <SD_SendCmd>
 800bc14:	4603      	mov	r3, r0
 800bc16:	2b00      	cmp	r3, #0
 800bc18:	f040 80a9 	bne.w	800bd6e <SD_disk_ioctl+0x232>
 800bc1c:	f107 0308 	add.w	r3, r7, #8
 800bc20:	2110      	movs	r1, #16
 800bc22:	4618      	mov	r0, r3
 800bc24:	f7ff fcc6 	bl	800b5b4 <SD_RxDataBlock>
 800bc28:	4603      	mov	r3, r0
 800bc2a:	2b00      	cmp	r3, #0
 800bc2c:	f000 809f 	beq.w	800bd6e <SD_disk_ioctl+0x232>
            {
                if ((csd[0] >> 6) == 1) /* SDC V2 */
 800bc30:	7a3b      	ldrb	r3, [r7, #8]
 800bc32:	099b      	lsrs	r3, r3, #6
 800bc34:	b2db      	uxtb	r3, r3
 800bc36:	2b01      	cmp	r3, #1
 800bc38:	d10f      	bne.n	800bc5a <SD_disk_ioctl+0x11e>
                {
                    // FIX 5: SDv2 CSD 파싱 및 용량 계산 로직 수정
                    // 기존 로직은 C_SIZE 필드를 일부만 사용하여 대용량 카드에서 용량을 잘못 계산합니다.
                    DWORD c_size;
                    c_size = (DWORD)(csd[7] & 0x3F) << 16 | (WORD)csd[8] << 8 | csd[9];
 800bc3a:	7bfb      	ldrb	r3, [r7, #15]
 800bc3c:	041b      	lsls	r3, r3, #16
 800bc3e:	f403 127c 	and.w	r2, r3, #4128768	@ 0x3f0000
 800bc42:	7c3b      	ldrb	r3, [r7, #16]
 800bc44:	021b      	lsls	r3, r3, #8
 800bc46:	4313      	orrs	r3, r2
 800bc48:	7c7a      	ldrb	r2, [r7, #17]
 800bc4a:	4313      	orrs	r3, r2
 800bc4c:	61bb      	str	r3, [r7, #24]
                    *(DWORD*)buff = (c_size + 1) << 10;
 800bc4e:	69bb      	ldr	r3, [r7, #24]
 800bc50:	3301      	adds	r3, #1
 800bc52:	029a      	lsls	r2, r3, #10
 800bc54:	683b      	ldr	r3, [r7, #0]
 800bc56:	601a      	str	r2, [r3, #0]
 800bc58:	e02d      	b.n	800bcb6 <SD_disk_ioctl+0x17a>
                }
                else /* MMC or SDC V1 */
                {
                    WORD csize;
                    n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 800bc5a:	7b7b      	ldrb	r3, [r7, #13]
 800bc5c:	f003 030f 	and.w	r3, r3, #15
 800bc60:	b2da      	uxtb	r2, r3
 800bc62:	7cbb      	ldrb	r3, [r7, #18]
 800bc64:	09db      	lsrs	r3, r3, #7
 800bc66:	b2db      	uxtb	r3, r3
 800bc68:	4413      	add	r3, r2
 800bc6a:	b2da      	uxtb	r2, r3
 800bc6c:	7c7b      	ldrb	r3, [r7, #17]
 800bc6e:	005b      	lsls	r3, r3, #1
 800bc70:	b2db      	uxtb	r3, r3
 800bc72:	f003 0306 	and.w	r3, r3, #6
 800bc76:	b2db      	uxtb	r3, r3
 800bc78:	4413      	add	r3, r2
 800bc7a:	b2db      	uxtb	r3, r3
 800bc7c:	3302      	adds	r3, #2
 800bc7e:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
                    csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 800bc82:	7c3b      	ldrb	r3, [r7, #16]
 800bc84:	099b      	lsrs	r3, r3, #6
 800bc86:	b2db      	uxtb	r3, r3
 800bc88:	461a      	mov	r2, r3
 800bc8a:	7bfb      	ldrb	r3, [r7, #15]
 800bc8c:	009b      	lsls	r3, r3, #2
 800bc8e:	b29b      	uxth	r3, r3
 800bc90:	4413      	add	r3, r2
 800bc92:	b29a      	uxth	r2, r3
 800bc94:	7bbb      	ldrb	r3, [r7, #14]
 800bc96:	029b      	lsls	r3, r3, #10
 800bc98:	b29b      	uxth	r3, r3
 800bc9a:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800bc9e:	b29b      	uxth	r3, r3
 800bca0:	4413      	add	r3, r2
 800bca2:	b29b      	uxth	r3, r3
 800bca4:	3301      	adds	r3, #1
 800bca6:	83fb      	strh	r3, [r7, #30]
                    *(DWORD*) buff = (DWORD) csize << (n - 9);
 800bca8:	8bfa      	ldrh	r2, [r7, #30]
 800bcaa:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800bcae:	3b09      	subs	r3, #9
 800bcb0:	409a      	lsls	r2, r3
 800bcb2:	683b      	ldr	r3, [r7, #0]
 800bcb4:	601a      	str	r2, [r3, #0]
                }
                res = RES_OK;
 800bcb6:	2300      	movs	r3, #0
 800bcb8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            }
            break;
 800bcbc:	e057      	b.n	800bd6e <SD_disk_ioctl+0x232>
        case GET_SECTOR_SIZE:
            *(WORD*) buff = 512;
 800bcbe:	683b      	ldr	r3, [r7, #0]
 800bcc0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800bcc4:	801a      	strh	r2, [r3, #0]
            res = RES_OK;
 800bcc6:	2300      	movs	r3, #0
 800bcc8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            break;
 800bccc:	e058      	b.n	800bd80 <SD_disk_ioctl+0x244>
        case CTRL_SYNC:
            if (SD_ReadyWait() == 0xFF) res = RES_OK;
 800bcce:	f7ff fbfd 	bl	800b4cc <SD_ReadyWait>
 800bcd2:	4603      	mov	r3, r0
 800bcd4:	2bff      	cmp	r3, #255	@ 0xff
 800bcd6:	d14c      	bne.n	800bd72 <SD_disk_ioctl+0x236>
 800bcd8:	2300      	movs	r3, #0
 800bcda:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            break;
 800bcde:	e048      	b.n	800bd72 <SD_disk_ioctl+0x236>
        case MMC_GET_CSD:
            /* SEND_CSD */
            if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 800bce0:	2100      	movs	r1, #0
 800bce2:	2049      	movs	r0, #73	@ 0x49
 800bce4:	f7ff fce6 	bl	800b6b4 <SD_SendCmd>
 800bce8:	4603      	mov	r3, r0
 800bcea:	2b00      	cmp	r3, #0
 800bcec:	d143      	bne.n	800bd76 <SD_disk_ioctl+0x23a>
 800bcee:	2110      	movs	r1, #16
 800bcf0:	6a38      	ldr	r0, [r7, #32]
 800bcf2:	f7ff fc5f 	bl	800b5b4 <SD_RxDataBlock>
 800bcf6:	4603      	mov	r3, r0
 800bcf8:	2b00      	cmp	r3, #0
 800bcfa:	d03c      	beq.n	800bd76 <SD_disk_ioctl+0x23a>
 800bcfc:	2300      	movs	r3, #0
 800bcfe:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            break;
 800bd02:	e038      	b.n	800bd76 <SD_disk_ioctl+0x23a>
        case MMC_GET_CID:
            /* SEND_CID */
            if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 800bd04:	2100      	movs	r1, #0
 800bd06:	204a      	movs	r0, #74	@ 0x4a
 800bd08:	f7ff fcd4 	bl	800b6b4 <SD_SendCmd>
 800bd0c:	4603      	mov	r3, r0
 800bd0e:	2b00      	cmp	r3, #0
 800bd10:	d133      	bne.n	800bd7a <SD_disk_ioctl+0x23e>
 800bd12:	2110      	movs	r1, #16
 800bd14:	6a38      	ldr	r0, [r7, #32]
 800bd16:	f7ff fc4d 	bl	800b5b4 <SD_RxDataBlock>
 800bd1a:	4603      	mov	r3, r0
 800bd1c:	2b00      	cmp	r3, #0
 800bd1e:	d02c      	beq.n	800bd7a <SD_disk_ioctl+0x23e>
 800bd20:	2300      	movs	r3, #0
 800bd22:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            break;
 800bd26:	e028      	b.n	800bd7a <SD_disk_ioctl+0x23e>
        case MMC_GET_OCR:
            /* READ_OCR */
            if (SD_SendCmd(CMD58, 0) == 0)
 800bd28:	2100      	movs	r1, #0
 800bd2a:	207a      	movs	r0, #122	@ 0x7a
 800bd2c:	f7ff fcc2 	bl	800b6b4 <SD_SendCmd>
 800bd30:	4603      	mov	r3, r0
 800bd32:	2b00      	cmp	r3, #0
 800bd34:	d123      	bne.n	800bd7e <SD_disk_ioctl+0x242>
            {
                for (n = 0; n < 4; n++)
 800bd36:	2300      	movs	r3, #0
 800bd38:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800bd3c:	e00b      	b.n	800bd56 <SD_disk_ioctl+0x21a>
                {
                    *ptr++ = SPI_RxByte();
 800bd3e:	6a3c      	ldr	r4, [r7, #32]
 800bd40:	1c63      	adds	r3, r4, #1
 800bd42:	623b      	str	r3, [r7, #32]
 800bd44:	f7ff fb96 	bl	800b474 <SPI_RxByte>
 800bd48:	4603      	mov	r3, r0
 800bd4a:	7023      	strb	r3, [r4, #0]
                for (n = 0; n < 4; n++)
 800bd4c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800bd50:	3301      	adds	r3, #1
 800bd52:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800bd56:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800bd5a:	2b03      	cmp	r3, #3
 800bd5c:	d9ef      	bls.n	800bd3e <SD_disk_ioctl+0x202>
                }
                res = RES_OK;
 800bd5e:	2300      	movs	r3, #0
 800bd60:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            }
            // FIX 4: 누락된 break 추가
            // break가 없어 default case로 넘어가 res값이 RES_PARERR로 덮어쓰이는 문제를 수정합니다.
            break; 
 800bd64:	e00b      	b.n	800bd7e <SD_disk_ioctl+0x242>
        default:
            res = RES_PARERR;
 800bd66:	2304      	movs	r3, #4
 800bd68:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800bd6c:	e008      	b.n	800bd80 <SD_disk_ioctl+0x244>
            break;
 800bd6e:	bf00      	nop
 800bd70:	e006      	b.n	800bd80 <SD_disk_ioctl+0x244>
            break;
 800bd72:	bf00      	nop
 800bd74:	e004      	b.n	800bd80 <SD_disk_ioctl+0x244>
            break;
 800bd76:	bf00      	nop
 800bd78:	e002      	b.n	800bd80 <SD_disk_ioctl+0x244>
            break;
 800bd7a:	bf00      	nop
 800bd7c:	e000      	b.n	800bd80 <SD_disk_ioctl+0x244>
            break; 
 800bd7e:	bf00      	nop
        }

        DESELECT();
 800bd80:	f7ff fb32 	bl	800b3e8 <DESELECT>
        SPI_RxByte();
 800bd84:	f7ff fb76 	bl	800b474 <SPI_RxByte>
    }

    return res;
 800bd88:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800bd8c:	4618      	mov	r0, r3
 800bd8e:	372c      	adds	r7, #44	@ 0x2c
 800bd90:	46bd      	mov	sp, r7
 800bd92:	bd90      	pop	{r4, r7, pc}
 800bd94:	2000d11d 	.word	0x2000d11d

0800bd98 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 800bd98:	b580      	push	{r7, lr}
 800bd9a:	b082      	sub	sp, #8
 800bd9c:	af00      	add	r7, sp, #0
 800bd9e:	4603      	mov	r3, r0
 800bda0:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
	return SD_disk_initialize(pdrv);
 800bda2:	79fb      	ldrb	r3, [r7, #7]
 800bda4:	4618      	mov	r0, r3
 800bda6:	f7ff fcd9 	bl	800b75c <SD_disk_initialize>
 800bdaa:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 800bdac:	4618      	mov	r0, r3
 800bdae:	3708      	adds	r7, #8
 800bdb0:	46bd      	mov	sp, r7
 800bdb2:	bd80      	pop	{r7, pc}

0800bdb4 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 800bdb4:	b580      	push	{r7, lr}
 800bdb6:	b082      	sub	sp, #8
 800bdb8:	af00      	add	r7, sp, #0
 800bdba:	4603      	mov	r3, r0
 800bdbc:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
	return SD_disk_status(pdrv);
 800bdbe:	79fb      	ldrb	r3, [r7, #7]
 800bdc0:	4618      	mov	r0, r3
 800bdc2:	f7ff fdb7 	bl	800b934 <SD_disk_status>
 800bdc6:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 800bdc8:	4618      	mov	r0, r3
 800bdca:	3708      	adds	r7, #8
 800bdcc:	46bd      	mov	sp, r7
 800bdce:	bd80      	pop	{r7, pc}

0800bdd0 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 800bdd0:	b580      	push	{r7, lr}
 800bdd2:	b084      	sub	sp, #16
 800bdd4:	af00      	add	r7, sp, #0
 800bdd6:	60b9      	str	r1, [r7, #8]
 800bdd8:	607a      	str	r2, [r7, #4]
 800bdda:	603b      	str	r3, [r7, #0]
 800bddc:	4603      	mov	r3, r0
 800bdde:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
	return SD_disk_read(pdrv, buff, sector, count);
 800bde0:	7bf8      	ldrb	r0, [r7, #15]
 800bde2:	683b      	ldr	r3, [r7, #0]
 800bde4:	687a      	ldr	r2, [r7, #4]
 800bde6:	68b9      	ldr	r1, [r7, #8]
 800bde8:	f7ff fdba 	bl	800b960 <SD_disk_read>
 800bdec:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 800bdee:	4618      	mov	r0, r3
 800bdf0:	3710      	adds	r7, #16
 800bdf2:	46bd      	mov	sp, r7
 800bdf4:	bd80      	pop	{r7, pc}

0800bdf6 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 800bdf6:	b580      	push	{r7, lr}
 800bdf8:	b084      	sub	sp, #16
 800bdfa:	af00      	add	r7, sp, #0
 800bdfc:	60b9      	str	r1, [r7, #8]
 800bdfe:	607a      	str	r2, [r7, #4]
 800be00:	603b      	str	r3, [r7, #0]
 800be02:	4603      	mov	r3, r0
 800be04:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
	return SD_disk_write(pdrv, buff, sector, count);
 800be06:	7bf8      	ldrb	r0, [r7, #15]
 800be08:	683b      	ldr	r3, [r7, #0]
 800be0a:	687a      	ldr	r2, [r7, #4]
 800be0c:	68b9      	ldr	r1, [r7, #8]
 800be0e:	f7ff fe11 	bl	800ba34 <SD_disk_write>
 800be12:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 800be14:	4618      	mov	r0, r3
 800be16:	3710      	adds	r7, #16
 800be18:	46bd      	mov	sp, r7
 800be1a:	bd80      	pop	{r7, pc}

0800be1c <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 800be1c:	b580      	push	{r7, lr}
 800be1e:	b082      	sub	sp, #8
 800be20:	af00      	add	r7, sp, #0
 800be22:	4603      	mov	r3, r0
 800be24:	603a      	str	r2, [r7, #0]
 800be26:	71fb      	strb	r3, [r7, #7]
 800be28:	460b      	mov	r3, r1
 800be2a:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
	return SD_disk_ioctl(pdrv, cmd, buff);
 800be2c:	79b9      	ldrb	r1, [r7, #6]
 800be2e:	79fb      	ldrb	r3, [r7, #7]
 800be30:	683a      	ldr	r2, [r7, #0]
 800be32:	4618      	mov	r0, r3
 800be34:	f7ff fe82 	bl	800bb3c <SD_disk_ioctl>
 800be38:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 800be3a:	4618      	mov	r0, r3
 800be3c:	3708      	adds	r7, #8
 800be3e:	46bd      	mov	sp, r7
 800be40:	bd80      	pop	{r7, pc}
	...

0800be44 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800be44:	b580      	push	{r7, lr}
 800be46:	b084      	sub	sp, #16
 800be48:	af00      	add	r7, sp, #0
 800be4a:	4603      	mov	r3, r0
 800be4c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800be4e:	79fb      	ldrb	r3, [r7, #7]
 800be50:	4a08      	ldr	r2, [pc, #32]	@ (800be74 <disk_status+0x30>)
 800be52:	009b      	lsls	r3, r3, #2
 800be54:	4413      	add	r3, r2
 800be56:	685b      	ldr	r3, [r3, #4]
 800be58:	685b      	ldr	r3, [r3, #4]
 800be5a:	79fa      	ldrb	r2, [r7, #7]
 800be5c:	4905      	ldr	r1, [pc, #20]	@ (800be74 <disk_status+0x30>)
 800be5e:	440a      	add	r2, r1
 800be60:	7a12      	ldrb	r2, [r2, #8]
 800be62:	4610      	mov	r0, r2
 800be64:	4798      	blx	r3
 800be66:	4603      	mov	r3, r0
 800be68:	73fb      	strb	r3, [r7, #15]
  return stat;
 800be6a:	7bfb      	ldrb	r3, [r7, #15]
}
 800be6c:	4618      	mov	r0, r3
 800be6e:	3710      	adds	r7, #16
 800be70:	46bd      	mov	sp, r7
 800be72:	bd80      	pop	{r7, pc}
 800be74:	200163dc 	.word	0x200163dc

0800be78 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800be78:	b580      	push	{r7, lr}
 800be7a:	b084      	sub	sp, #16
 800be7c:	af00      	add	r7, sp, #0
 800be7e:	4603      	mov	r3, r0
 800be80:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800be82:	2300      	movs	r3, #0
 800be84:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800be86:	79fb      	ldrb	r3, [r7, #7]
 800be88:	4a0e      	ldr	r2, [pc, #56]	@ (800bec4 <disk_initialize+0x4c>)
 800be8a:	5cd3      	ldrb	r3, [r2, r3]
 800be8c:	2b00      	cmp	r3, #0
 800be8e:	d114      	bne.n	800beba <disk_initialize+0x42>
  {
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800be90:	79fb      	ldrb	r3, [r7, #7]
 800be92:	4a0c      	ldr	r2, [pc, #48]	@ (800bec4 <disk_initialize+0x4c>)
 800be94:	009b      	lsls	r3, r3, #2
 800be96:	4413      	add	r3, r2
 800be98:	685b      	ldr	r3, [r3, #4]
 800be9a:	681b      	ldr	r3, [r3, #0]
 800be9c:	79fa      	ldrb	r2, [r7, #7]
 800be9e:	4909      	ldr	r1, [pc, #36]	@ (800bec4 <disk_initialize+0x4c>)
 800bea0:	440a      	add	r2, r1
 800bea2:	7a12      	ldrb	r2, [r2, #8]
 800bea4:	4610      	mov	r0, r2
 800bea6:	4798      	blx	r3
 800bea8:	4603      	mov	r3, r0
 800beaa:	73fb      	strb	r3, [r7, #15]
    if(stat == RES_OK)
 800beac:	7bfb      	ldrb	r3, [r7, #15]
 800beae:	2b00      	cmp	r3, #0
 800beb0:	d103      	bne.n	800beba <disk_initialize+0x42>
    {
      disk.is_initialized[pdrv] = 1;
 800beb2:	79fb      	ldrb	r3, [r7, #7]
 800beb4:	4a03      	ldr	r2, [pc, #12]	@ (800bec4 <disk_initialize+0x4c>)
 800beb6:	2101      	movs	r1, #1
 800beb8:	54d1      	strb	r1, [r2, r3]
    }
  }
  return stat;
 800beba:	7bfb      	ldrb	r3, [r7, #15]
}
 800bebc:	4618      	mov	r0, r3
 800bebe:	3710      	adds	r7, #16
 800bec0:	46bd      	mov	sp, r7
 800bec2:	bd80      	pop	{r7, pc}
 800bec4:	200163dc 	.word	0x200163dc

0800bec8 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800bec8:	b590      	push	{r4, r7, lr}
 800beca:	b087      	sub	sp, #28
 800becc:	af00      	add	r7, sp, #0
 800bece:	60b9      	str	r1, [r7, #8]
 800bed0:	607a      	str	r2, [r7, #4]
 800bed2:	603b      	str	r3, [r7, #0]
 800bed4:	4603      	mov	r3, r0
 800bed6:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800bed8:	7bfb      	ldrb	r3, [r7, #15]
 800beda:	4a0a      	ldr	r2, [pc, #40]	@ (800bf04 <disk_read+0x3c>)
 800bedc:	009b      	lsls	r3, r3, #2
 800bede:	4413      	add	r3, r2
 800bee0:	685b      	ldr	r3, [r3, #4]
 800bee2:	689c      	ldr	r4, [r3, #8]
 800bee4:	7bfb      	ldrb	r3, [r7, #15]
 800bee6:	4a07      	ldr	r2, [pc, #28]	@ (800bf04 <disk_read+0x3c>)
 800bee8:	4413      	add	r3, r2
 800beea:	7a18      	ldrb	r0, [r3, #8]
 800beec:	683b      	ldr	r3, [r7, #0]
 800beee:	687a      	ldr	r2, [r7, #4]
 800bef0:	68b9      	ldr	r1, [r7, #8]
 800bef2:	47a0      	blx	r4
 800bef4:	4603      	mov	r3, r0
 800bef6:	75fb      	strb	r3, [r7, #23]
  return res;
 800bef8:	7dfb      	ldrb	r3, [r7, #23]
}
 800befa:	4618      	mov	r0, r3
 800befc:	371c      	adds	r7, #28
 800befe:	46bd      	mov	sp, r7
 800bf00:	bd90      	pop	{r4, r7, pc}
 800bf02:	bf00      	nop
 800bf04:	200163dc 	.word	0x200163dc

0800bf08 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800bf08:	b590      	push	{r4, r7, lr}
 800bf0a:	b087      	sub	sp, #28
 800bf0c:	af00      	add	r7, sp, #0
 800bf0e:	60b9      	str	r1, [r7, #8]
 800bf10:	607a      	str	r2, [r7, #4]
 800bf12:	603b      	str	r3, [r7, #0]
 800bf14:	4603      	mov	r3, r0
 800bf16:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800bf18:	7bfb      	ldrb	r3, [r7, #15]
 800bf1a:	4a0a      	ldr	r2, [pc, #40]	@ (800bf44 <disk_write+0x3c>)
 800bf1c:	009b      	lsls	r3, r3, #2
 800bf1e:	4413      	add	r3, r2
 800bf20:	685b      	ldr	r3, [r3, #4]
 800bf22:	68dc      	ldr	r4, [r3, #12]
 800bf24:	7bfb      	ldrb	r3, [r7, #15]
 800bf26:	4a07      	ldr	r2, [pc, #28]	@ (800bf44 <disk_write+0x3c>)
 800bf28:	4413      	add	r3, r2
 800bf2a:	7a18      	ldrb	r0, [r3, #8]
 800bf2c:	683b      	ldr	r3, [r7, #0]
 800bf2e:	687a      	ldr	r2, [r7, #4]
 800bf30:	68b9      	ldr	r1, [r7, #8]
 800bf32:	47a0      	blx	r4
 800bf34:	4603      	mov	r3, r0
 800bf36:	75fb      	strb	r3, [r7, #23]
  return res;
 800bf38:	7dfb      	ldrb	r3, [r7, #23]
}
 800bf3a:	4618      	mov	r0, r3
 800bf3c:	371c      	adds	r7, #28
 800bf3e:	46bd      	mov	sp, r7
 800bf40:	bd90      	pop	{r4, r7, pc}
 800bf42:	bf00      	nop
 800bf44:	200163dc 	.word	0x200163dc

0800bf48 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800bf48:	b580      	push	{r7, lr}
 800bf4a:	b084      	sub	sp, #16
 800bf4c:	af00      	add	r7, sp, #0
 800bf4e:	4603      	mov	r3, r0
 800bf50:	603a      	str	r2, [r7, #0]
 800bf52:	71fb      	strb	r3, [r7, #7]
 800bf54:	460b      	mov	r3, r1
 800bf56:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800bf58:	79fb      	ldrb	r3, [r7, #7]
 800bf5a:	4a09      	ldr	r2, [pc, #36]	@ (800bf80 <disk_ioctl+0x38>)
 800bf5c:	009b      	lsls	r3, r3, #2
 800bf5e:	4413      	add	r3, r2
 800bf60:	685b      	ldr	r3, [r3, #4]
 800bf62:	691b      	ldr	r3, [r3, #16]
 800bf64:	79fa      	ldrb	r2, [r7, #7]
 800bf66:	4906      	ldr	r1, [pc, #24]	@ (800bf80 <disk_ioctl+0x38>)
 800bf68:	440a      	add	r2, r1
 800bf6a:	7a10      	ldrb	r0, [r2, #8]
 800bf6c:	79b9      	ldrb	r1, [r7, #6]
 800bf6e:	683a      	ldr	r2, [r7, #0]
 800bf70:	4798      	blx	r3
 800bf72:	4603      	mov	r3, r0
 800bf74:	73fb      	strb	r3, [r7, #15]
  return res;
 800bf76:	7bfb      	ldrb	r3, [r7, #15]
}
 800bf78:	4618      	mov	r0, r3
 800bf7a:	3710      	adds	r7, #16
 800bf7c:	46bd      	mov	sp, r7
 800bf7e:	bd80      	pop	{r7, pc}
 800bf80:	200163dc 	.word	0x200163dc

0800bf84 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800bf84:	b480      	push	{r7}
 800bf86:	b085      	sub	sp, #20
 800bf88:	af00      	add	r7, sp, #0
 800bf8a:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800bf8c:	687b      	ldr	r3, [r7, #4]
 800bf8e:	3301      	adds	r3, #1
 800bf90:	781b      	ldrb	r3, [r3, #0]
 800bf92:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800bf94:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800bf98:	021b      	lsls	r3, r3, #8
 800bf9a:	b21a      	sxth	r2, r3
 800bf9c:	687b      	ldr	r3, [r7, #4]
 800bf9e:	781b      	ldrb	r3, [r3, #0]
 800bfa0:	b21b      	sxth	r3, r3
 800bfa2:	4313      	orrs	r3, r2
 800bfa4:	b21b      	sxth	r3, r3
 800bfa6:	81fb      	strh	r3, [r7, #14]
	return rv;
 800bfa8:	89fb      	ldrh	r3, [r7, #14]
}
 800bfaa:	4618      	mov	r0, r3
 800bfac:	3714      	adds	r7, #20
 800bfae:	46bd      	mov	sp, r7
 800bfb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfb4:	4770      	bx	lr

0800bfb6 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800bfb6:	b480      	push	{r7}
 800bfb8:	b085      	sub	sp, #20
 800bfba:	af00      	add	r7, sp, #0
 800bfbc:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800bfbe:	687b      	ldr	r3, [r7, #4]
 800bfc0:	3303      	adds	r3, #3
 800bfc2:	781b      	ldrb	r3, [r3, #0]
 800bfc4:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800bfc6:	68fb      	ldr	r3, [r7, #12]
 800bfc8:	021b      	lsls	r3, r3, #8
 800bfca:	687a      	ldr	r2, [r7, #4]
 800bfcc:	3202      	adds	r2, #2
 800bfce:	7812      	ldrb	r2, [r2, #0]
 800bfd0:	4313      	orrs	r3, r2
 800bfd2:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800bfd4:	68fb      	ldr	r3, [r7, #12]
 800bfd6:	021b      	lsls	r3, r3, #8
 800bfd8:	687a      	ldr	r2, [r7, #4]
 800bfda:	3201      	adds	r2, #1
 800bfdc:	7812      	ldrb	r2, [r2, #0]
 800bfde:	4313      	orrs	r3, r2
 800bfe0:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800bfe2:	68fb      	ldr	r3, [r7, #12]
 800bfe4:	021b      	lsls	r3, r3, #8
 800bfe6:	687a      	ldr	r2, [r7, #4]
 800bfe8:	7812      	ldrb	r2, [r2, #0]
 800bfea:	4313      	orrs	r3, r2
 800bfec:	60fb      	str	r3, [r7, #12]
	return rv;
 800bfee:	68fb      	ldr	r3, [r7, #12]
}
 800bff0:	4618      	mov	r0, r3
 800bff2:	3714      	adds	r7, #20
 800bff4:	46bd      	mov	sp, r7
 800bff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bffa:	4770      	bx	lr

0800bffc <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800bffc:	b480      	push	{r7}
 800bffe:	b083      	sub	sp, #12
 800c000:	af00      	add	r7, sp, #0
 800c002:	6078      	str	r0, [r7, #4]
 800c004:	460b      	mov	r3, r1
 800c006:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800c008:	687b      	ldr	r3, [r7, #4]
 800c00a:	1c5a      	adds	r2, r3, #1
 800c00c:	607a      	str	r2, [r7, #4]
 800c00e:	887a      	ldrh	r2, [r7, #2]
 800c010:	b2d2      	uxtb	r2, r2
 800c012:	701a      	strb	r2, [r3, #0]
 800c014:	887b      	ldrh	r3, [r7, #2]
 800c016:	0a1b      	lsrs	r3, r3, #8
 800c018:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800c01a:	687b      	ldr	r3, [r7, #4]
 800c01c:	1c5a      	adds	r2, r3, #1
 800c01e:	607a      	str	r2, [r7, #4]
 800c020:	887a      	ldrh	r2, [r7, #2]
 800c022:	b2d2      	uxtb	r2, r2
 800c024:	701a      	strb	r2, [r3, #0]
}
 800c026:	bf00      	nop
 800c028:	370c      	adds	r7, #12
 800c02a:	46bd      	mov	sp, r7
 800c02c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c030:	4770      	bx	lr

0800c032 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800c032:	b480      	push	{r7}
 800c034:	b083      	sub	sp, #12
 800c036:	af00      	add	r7, sp, #0
 800c038:	6078      	str	r0, [r7, #4]
 800c03a:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800c03c:	687b      	ldr	r3, [r7, #4]
 800c03e:	1c5a      	adds	r2, r3, #1
 800c040:	607a      	str	r2, [r7, #4]
 800c042:	683a      	ldr	r2, [r7, #0]
 800c044:	b2d2      	uxtb	r2, r2
 800c046:	701a      	strb	r2, [r3, #0]
 800c048:	683b      	ldr	r3, [r7, #0]
 800c04a:	0a1b      	lsrs	r3, r3, #8
 800c04c:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800c04e:	687b      	ldr	r3, [r7, #4]
 800c050:	1c5a      	adds	r2, r3, #1
 800c052:	607a      	str	r2, [r7, #4]
 800c054:	683a      	ldr	r2, [r7, #0]
 800c056:	b2d2      	uxtb	r2, r2
 800c058:	701a      	strb	r2, [r3, #0]
 800c05a:	683b      	ldr	r3, [r7, #0]
 800c05c:	0a1b      	lsrs	r3, r3, #8
 800c05e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800c060:	687b      	ldr	r3, [r7, #4]
 800c062:	1c5a      	adds	r2, r3, #1
 800c064:	607a      	str	r2, [r7, #4]
 800c066:	683a      	ldr	r2, [r7, #0]
 800c068:	b2d2      	uxtb	r2, r2
 800c06a:	701a      	strb	r2, [r3, #0]
 800c06c:	683b      	ldr	r3, [r7, #0]
 800c06e:	0a1b      	lsrs	r3, r3, #8
 800c070:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800c072:	687b      	ldr	r3, [r7, #4]
 800c074:	1c5a      	adds	r2, r3, #1
 800c076:	607a      	str	r2, [r7, #4]
 800c078:	683a      	ldr	r2, [r7, #0]
 800c07a:	b2d2      	uxtb	r2, r2
 800c07c:	701a      	strb	r2, [r3, #0]
}
 800c07e:	bf00      	nop
 800c080:	370c      	adds	r7, #12
 800c082:	46bd      	mov	sp, r7
 800c084:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c088:	4770      	bx	lr

0800c08a <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800c08a:	b480      	push	{r7}
 800c08c:	b087      	sub	sp, #28
 800c08e:	af00      	add	r7, sp, #0
 800c090:	60f8      	str	r0, [r7, #12]
 800c092:	60b9      	str	r1, [r7, #8]
 800c094:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800c096:	68fb      	ldr	r3, [r7, #12]
 800c098:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800c09a:	68bb      	ldr	r3, [r7, #8]
 800c09c:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800c09e:	687b      	ldr	r3, [r7, #4]
 800c0a0:	2b00      	cmp	r3, #0
 800c0a2:	d00d      	beq.n	800c0c0 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800c0a4:	693a      	ldr	r2, [r7, #16]
 800c0a6:	1c53      	adds	r3, r2, #1
 800c0a8:	613b      	str	r3, [r7, #16]
 800c0aa:	697b      	ldr	r3, [r7, #20]
 800c0ac:	1c59      	adds	r1, r3, #1
 800c0ae:	6179      	str	r1, [r7, #20]
 800c0b0:	7812      	ldrb	r2, [r2, #0]
 800c0b2:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800c0b4:	687b      	ldr	r3, [r7, #4]
 800c0b6:	3b01      	subs	r3, #1
 800c0b8:	607b      	str	r3, [r7, #4]
 800c0ba:	687b      	ldr	r3, [r7, #4]
 800c0bc:	2b00      	cmp	r3, #0
 800c0be:	d1f1      	bne.n	800c0a4 <mem_cpy+0x1a>
	}
}
 800c0c0:	bf00      	nop
 800c0c2:	371c      	adds	r7, #28
 800c0c4:	46bd      	mov	sp, r7
 800c0c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0ca:	4770      	bx	lr

0800c0cc <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800c0cc:	b480      	push	{r7}
 800c0ce:	b087      	sub	sp, #28
 800c0d0:	af00      	add	r7, sp, #0
 800c0d2:	60f8      	str	r0, [r7, #12]
 800c0d4:	60b9      	str	r1, [r7, #8]
 800c0d6:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800c0d8:	68fb      	ldr	r3, [r7, #12]
 800c0da:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800c0dc:	697b      	ldr	r3, [r7, #20]
 800c0de:	1c5a      	adds	r2, r3, #1
 800c0e0:	617a      	str	r2, [r7, #20]
 800c0e2:	68ba      	ldr	r2, [r7, #8]
 800c0e4:	b2d2      	uxtb	r2, r2
 800c0e6:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800c0e8:	687b      	ldr	r3, [r7, #4]
 800c0ea:	3b01      	subs	r3, #1
 800c0ec:	607b      	str	r3, [r7, #4]
 800c0ee:	687b      	ldr	r3, [r7, #4]
 800c0f0:	2b00      	cmp	r3, #0
 800c0f2:	d1f3      	bne.n	800c0dc <mem_set+0x10>
}
 800c0f4:	bf00      	nop
 800c0f6:	bf00      	nop
 800c0f8:	371c      	adds	r7, #28
 800c0fa:	46bd      	mov	sp, r7
 800c0fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c100:	4770      	bx	lr

0800c102 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800c102:	b480      	push	{r7}
 800c104:	b089      	sub	sp, #36	@ 0x24
 800c106:	af00      	add	r7, sp, #0
 800c108:	60f8      	str	r0, [r7, #12]
 800c10a:	60b9      	str	r1, [r7, #8]
 800c10c:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800c10e:	68fb      	ldr	r3, [r7, #12]
 800c110:	61fb      	str	r3, [r7, #28]
 800c112:	68bb      	ldr	r3, [r7, #8]
 800c114:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800c116:	2300      	movs	r3, #0
 800c118:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800c11a:	69fb      	ldr	r3, [r7, #28]
 800c11c:	1c5a      	adds	r2, r3, #1
 800c11e:	61fa      	str	r2, [r7, #28]
 800c120:	781b      	ldrb	r3, [r3, #0]
 800c122:	4619      	mov	r1, r3
 800c124:	69bb      	ldr	r3, [r7, #24]
 800c126:	1c5a      	adds	r2, r3, #1
 800c128:	61ba      	str	r2, [r7, #24]
 800c12a:	781b      	ldrb	r3, [r3, #0]
 800c12c:	1acb      	subs	r3, r1, r3
 800c12e:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800c130:	687b      	ldr	r3, [r7, #4]
 800c132:	3b01      	subs	r3, #1
 800c134:	607b      	str	r3, [r7, #4]
 800c136:	687b      	ldr	r3, [r7, #4]
 800c138:	2b00      	cmp	r3, #0
 800c13a:	d002      	beq.n	800c142 <mem_cmp+0x40>
 800c13c:	697b      	ldr	r3, [r7, #20]
 800c13e:	2b00      	cmp	r3, #0
 800c140:	d0eb      	beq.n	800c11a <mem_cmp+0x18>

	return r;
 800c142:	697b      	ldr	r3, [r7, #20]
}
 800c144:	4618      	mov	r0, r3
 800c146:	3724      	adds	r7, #36	@ 0x24
 800c148:	46bd      	mov	sp, r7
 800c14a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c14e:	4770      	bx	lr

0800c150 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800c150:	b480      	push	{r7}
 800c152:	b083      	sub	sp, #12
 800c154:	af00      	add	r7, sp, #0
 800c156:	6078      	str	r0, [r7, #4]
 800c158:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800c15a:	e002      	b.n	800c162 <chk_chr+0x12>
 800c15c:	687b      	ldr	r3, [r7, #4]
 800c15e:	3301      	adds	r3, #1
 800c160:	607b      	str	r3, [r7, #4]
 800c162:	687b      	ldr	r3, [r7, #4]
 800c164:	781b      	ldrb	r3, [r3, #0]
 800c166:	2b00      	cmp	r3, #0
 800c168:	d005      	beq.n	800c176 <chk_chr+0x26>
 800c16a:	687b      	ldr	r3, [r7, #4]
 800c16c:	781b      	ldrb	r3, [r3, #0]
 800c16e:	461a      	mov	r2, r3
 800c170:	683b      	ldr	r3, [r7, #0]
 800c172:	4293      	cmp	r3, r2
 800c174:	d1f2      	bne.n	800c15c <chk_chr+0xc>
	return *str;
 800c176:	687b      	ldr	r3, [r7, #4]
 800c178:	781b      	ldrb	r3, [r3, #0]
}
 800c17a:	4618      	mov	r0, r3
 800c17c:	370c      	adds	r7, #12
 800c17e:	46bd      	mov	sp, r7
 800c180:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c184:	4770      	bx	lr
	...

0800c188 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800c188:	b480      	push	{r7}
 800c18a:	b085      	sub	sp, #20
 800c18c:	af00      	add	r7, sp, #0
 800c18e:	6078      	str	r0, [r7, #4]
 800c190:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800c192:	2300      	movs	r3, #0
 800c194:	60bb      	str	r3, [r7, #8]
 800c196:	68bb      	ldr	r3, [r7, #8]
 800c198:	60fb      	str	r3, [r7, #12]
 800c19a:	e029      	b.n	800c1f0 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800c19c:	4a27      	ldr	r2, [pc, #156]	@ (800c23c <chk_lock+0xb4>)
 800c19e:	68fb      	ldr	r3, [r7, #12]
 800c1a0:	011b      	lsls	r3, r3, #4
 800c1a2:	4413      	add	r3, r2
 800c1a4:	681b      	ldr	r3, [r3, #0]
 800c1a6:	2b00      	cmp	r3, #0
 800c1a8:	d01d      	beq.n	800c1e6 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800c1aa:	4a24      	ldr	r2, [pc, #144]	@ (800c23c <chk_lock+0xb4>)
 800c1ac:	68fb      	ldr	r3, [r7, #12]
 800c1ae:	011b      	lsls	r3, r3, #4
 800c1b0:	4413      	add	r3, r2
 800c1b2:	681a      	ldr	r2, [r3, #0]
 800c1b4:	687b      	ldr	r3, [r7, #4]
 800c1b6:	681b      	ldr	r3, [r3, #0]
 800c1b8:	429a      	cmp	r2, r3
 800c1ba:	d116      	bne.n	800c1ea <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800c1bc:	4a1f      	ldr	r2, [pc, #124]	@ (800c23c <chk_lock+0xb4>)
 800c1be:	68fb      	ldr	r3, [r7, #12]
 800c1c0:	011b      	lsls	r3, r3, #4
 800c1c2:	4413      	add	r3, r2
 800c1c4:	3304      	adds	r3, #4
 800c1c6:	681a      	ldr	r2, [r3, #0]
 800c1c8:	687b      	ldr	r3, [r7, #4]
 800c1ca:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800c1cc:	429a      	cmp	r2, r3
 800c1ce:	d10c      	bne.n	800c1ea <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800c1d0:	4a1a      	ldr	r2, [pc, #104]	@ (800c23c <chk_lock+0xb4>)
 800c1d2:	68fb      	ldr	r3, [r7, #12]
 800c1d4:	011b      	lsls	r3, r3, #4
 800c1d6:	4413      	add	r3, r2
 800c1d8:	3308      	adds	r3, #8
 800c1da:	681a      	ldr	r2, [r3, #0]
 800c1dc:	687b      	ldr	r3, [r7, #4]
 800c1de:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800c1e0:	429a      	cmp	r2, r3
 800c1e2:	d102      	bne.n	800c1ea <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800c1e4:	e007      	b.n	800c1f6 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800c1e6:	2301      	movs	r3, #1
 800c1e8:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800c1ea:	68fb      	ldr	r3, [r7, #12]
 800c1ec:	3301      	adds	r3, #1
 800c1ee:	60fb      	str	r3, [r7, #12]
 800c1f0:	68fb      	ldr	r3, [r7, #12]
 800c1f2:	2b01      	cmp	r3, #1
 800c1f4:	d9d2      	bls.n	800c19c <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800c1f6:	68fb      	ldr	r3, [r7, #12]
 800c1f8:	2b02      	cmp	r3, #2
 800c1fa:	d109      	bne.n	800c210 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800c1fc:	68bb      	ldr	r3, [r7, #8]
 800c1fe:	2b00      	cmp	r3, #0
 800c200:	d102      	bne.n	800c208 <chk_lock+0x80>
 800c202:	683b      	ldr	r3, [r7, #0]
 800c204:	2b02      	cmp	r3, #2
 800c206:	d101      	bne.n	800c20c <chk_lock+0x84>
 800c208:	2300      	movs	r3, #0
 800c20a:	e010      	b.n	800c22e <chk_lock+0xa6>
 800c20c:	2312      	movs	r3, #18
 800c20e:	e00e      	b.n	800c22e <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800c210:	683b      	ldr	r3, [r7, #0]
 800c212:	2b00      	cmp	r3, #0
 800c214:	d108      	bne.n	800c228 <chk_lock+0xa0>
 800c216:	4a09      	ldr	r2, [pc, #36]	@ (800c23c <chk_lock+0xb4>)
 800c218:	68fb      	ldr	r3, [r7, #12]
 800c21a:	011b      	lsls	r3, r3, #4
 800c21c:	4413      	add	r3, r2
 800c21e:	330c      	adds	r3, #12
 800c220:	881b      	ldrh	r3, [r3, #0]
 800c222:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800c226:	d101      	bne.n	800c22c <chk_lock+0xa4>
 800c228:	2310      	movs	r3, #16
 800c22a:	e000      	b.n	800c22e <chk_lock+0xa6>
 800c22c:	2300      	movs	r3, #0
}
 800c22e:	4618      	mov	r0, r3
 800c230:	3714      	adds	r7, #20
 800c232:	46bd      	mov	sp, r7
 800c234:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c238:	4770      	bx	lr
 800c23a:	bf00      	nop
 800c23c:	200161bc 	.word	0x200161bc

0800c240 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800c240:	b480      	push	{r7}
 800c242:	b083      	sub	sp, #12
 800c244:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800c246:	2300      	movs	r3, #0
 800c248:	607b      	str	r3, [r7, #4]
 800c24a:	e002      	b.n	800c252 <enq_lock+0x12>
 800c24c:	687b      	ldr	r3, [r7, #4]
 800c24e:	3301      	adds	r3, #1
 800c250:	607b      	str	r3, [r7, #4]
 800c252:	687b      	ldr	r3, [r7, #4]
 800c254:	2b01      	cmp	r3, #1
 800c256:	d806      	bhi.n	800c266 <enq_lock+0x26>
 800c258:	4a09      	ldr	r2, [pc, #36]	@ (800c280 <enq_lock+0x40>)
 800c25a:	687b      	ldr	r3, [r7, #4]
 800c25c:	011b      	lsls	r3, r3, #4
 800c25e:	4413      	add	r3, r2
 800c260:	681b      	ldr	r3, [r3, #0]
 800c262:	2b00      	cmp	r3, #0
 800c264:	d1f2      	bne.n	800c24c <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800c266:	687b      	ldr	r3, [r7, #4]
 800c268:	2b02      	cmp	r3, #2
 800c26a:	bf14      	ite	ne
 800c26c:	2301      	movne	r3, #1
 800c26e:	2300      	moveq	r3, #0
 800c270:	b2db      	uxtb	r3, r3
}
 800c272:	4618      	mov	r0, r3
 800c274:	370c      	adds	r7, #12
 800c276:	46bd      	mov	sp, r7
 800c278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c27c:	4770      	bx	lr
 800c27e:	bf00      	nop
 800c280:	200161bc 	.word	0x200161bc

0800c284 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800c284:	b480      	push	{r7}
 800c286:	b085      	sub	sp, #20
 800c288:	af00      	add	r7, sp, #0
 800c28a:	6078      	str	r0, [r7, #4]
 800c28c:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800c28e:	2300      	movs	r3, #0
 800c290:	60fb      	str	r3, [r7, #12]
 800c292:	e01f      	b.n	800c2d4 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800c294:	4a41      	ldr	r2, [pc, #260]	@ (800c39c <inc_lock+0x118>)
 800c296:	68fb      	ldr	r3, [r7, #12]
 800c298:	011b      	lsls	r3, r3, #4
 800c29a:	4413      	add	r3, r2
 800c29c:	681a      	ldr	r2, [r3, #0]
 800c29e:	687b      	ldr	r3, [r7, #4]
 800c2a0:	681b      	ldr	r3, [r3, #0]
 800c2a2:	429a      	cmp	r2, r3
 800c2a4:	d113      	bne.n	800c2ce <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800c2a6:	4a3d      	ldr	r2, [pc, #244]	@ (800c39c <inc_lock+0x118>)
 800c2a8:	68fb      	ldr	r3, [r7, #12]
 800c2aa:	011b      	lsls	r3, r3, #4
 800c2ac:	4413      	add	r3, r2
 800c2ae:	3304      	adds	r3, #4
 800c2b0:	681a      	ldr	r2, [r3, #0]
 800c2b2:	687b      	ldr	r3, [r7, #4]
 800c2b4:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800c2b6:	429a      	cmp	r2, r3
 800c2b8:	d109      	bne.n	800c2ce <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800c2ba:	4a38      	ldr	r2, [pc, #224]	@ (800c39c <inc_lock+0x118>)
 800c2bc:	68fb      	ldr	r3, [r7, #12]
 800c2be:	011b      	lsls	r3, r3, #4
 800c2c0:	4413      	add	r3, r2
 800c2c2:	3308      	adds	r3, #8
 800c2c4:	681a      	ldr	r2, [r3, #0]
 800c2c6:	687b      	ldr	r3, [r7, #4]
 800c2c8:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800c2ca:	429a      	cmp	r2, r3
 800c2cc:	d006      	beq.n	800c2dc <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800c2ce:	68fb      	ldr	r3, [r7, #12]
 800c2d0:	3301      	adds	r3, #1
 800c2d2:	60fb      	str	r3, [r7, #12]
 800c2d4:	68fb      	ldr	r3, [r7, #12]
 800c2d6:	2b01      	cmp	r3, #1
 800c2d8:	d9dc      	bls.n	800c294 <inc_lock+0x10>
 800c2da:	e000      	b.n	800c2de <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800c2dc:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800c2de:	68fb      	ldr	r3, [r7, #12]
 800c2e0:	2b02      	cmp	r3, #2
 800c2e2:	d132      	bne.n	800c34a <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800c2e4:	2300      	movs	r3, #0
 800c2e6:	60fb      	str	r3, [r7, #12]
 800c2e8:	e002      	b.n	800c2f0 <inc_lock+0x6c>
 800c2ea:	68fb      	ldr	r3, [r7, #12]
 800c2ec:	3301      	adds	r3, #1
 800c2ee:	60fb      	str	r3, [r7, #12]
 800c2f0:	68fb      	ldr	r3, [r7, #12]
 800c2f2:	2b01      	cmp	r3, #1
 800c2f4:	d806      	bhi.n	800c304 <inc_lock+0x80>
 800c2f6:	4a29      	ldr	r2, [pc, #164]	@ (800c39c <inc_lock+0x118>)
 800c2f8:	68fb      	ldr	r3, [r7, #12]
 800c2fa:	011b      	lsls	r3, r3, #4
 800c2fc:	4413      	add	r3, r2
 800c2fe:	681b      	ldr	r3, [r3, #0]
 800c300:	2b00      	cmp	r3, #0
 800c302:	d1f2      	bne.n	800c2ea <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800c304:	68fb      	ldr	r3, [r7, #12]
 800c306:	2b02      	cmp	r3, #2
 800c308:	d101      	bne.n	800c30e <inc_lock+0x8a>
 800c30a:	2300      	movs	r3, #0
 800c30c:	e040      	b.n	800c390 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800c30e:	687b      	ldr	r3, [r7, #4]
 800c310:	681a      	ldr	r2, [r3, #0]
 800c312:	4922      	ldr	r1, [pc, #136]	@ (800c39c <inc_lock+0x118>)
 800c314:	68fb      	ldr	r3, [r7, #12]
 800c316:	011b      	lsls	r3, r3, #4
 800c318:	440b      	add	r3, r1
 800c31a:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800c31c:	687b      	ldr	r3, [r7, #4]
 800c31e:	689a      	ldr	r2, [r3, #8]
 800c320:	491e      	ldr	r1, [pc, #120]	@ (800c39c <inc_lock+0x118>)
 800c322:	68fb      	ldr	r3, [r7, #12]
 800c324:	011b      	lsls	r3, r3, #4
 800c326:	440b      	add	r3, r1
 800c328:	3304      	adds	r3, #4
 800c32a:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800c32c:	687b      	ldr	r3, [r7, #4]
 800c32e:	695a      	ldr	r2, [r3, #20]
 800c330:	491a      	ldr	r1, [pc, #104]	@ (800c39c <inc_lock+0x118>)
 800c332:	68fb      	ldr	r3, [r7, #12]
 800c334:	011b      	lsls	r3, r3, #4
 800c336:	440b      	add	r3, r1
 800c338:	3308      	adds	r3, #8
 800c33a:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800c33c:	4a17      	ldr	r2, [pc, #92]	@ (800c39c <inc_lock+0x118>)
 800c33e:	68fb      	ldr	r3, [r7, #12]
 800c340:	011b      	lsls	r3, r3, #4
 800c342:	4413      	add	r3, r2
 800c344:	330c      	adds	r3, #12
 800c346:	2200      	movs	r2, #0
 800c348:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800c34a:	683b      	ldr	r3, [r7, #0]
 800c34c:	2b00      	cmp	r3, #0
 800c34e:	d009      	beq.n	800c364 <inc_lock+0xe0>
 800c350:	4a12      	ldr	r2, [pc, #72]	@ (800c39c <inc_lock+0x118>)
 800c352:	68fb      	ldr	r3, [r7, #12]
 800c354:	011b      	lsls	r3, r3, #4
 800c356:	4413      	add	r3, r2
 800c358:	330c      	adds	r3, #12
 800c35a:	881b      	ldrh	r3, [r3, #0]
 800c35c:	2b00      	cmp	r3, #0
 800c35e:	d001      	beq.n	800c364 <inc_lock+0xe0>
 800c360:	2300      	movs	r3, #0
 800c362:	e015      	b.n	800c390 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800c364:	683b      	ldr	r3, [r7, #0]
 800c366:	2b00      	cmp	r3, #0
 800c368:	d108      	bne.n	800c37c <inc_lock+0xf8>
 800c36a:	4a0c      	ldr	r2, [pc, #48]	@ (800c39c <inc_lock+0x118>)
 800c36c:	68fb      	ldr	r3, [r7, #12]
 800c36e:	011b      	lsls	r3, r3, #4
 800c370:	4413      	add	r3, r2
 800c372:	330c      	adds	r3, #12
 800c374:	881b      	ldrh	r3, [r3, #0]
 800c376:	3301      	adds	r3, #1
 800c378:	b29a      	uxth	r2, r3
 800c37a:	e001      	b.n	800c380 <inc_lock+0xfc>
 800c37c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800c380:	4906      	ldr	r1, [pc, #24]	@ (800c39c <inc_lock+0x118>)
 800c382:	68fb      	ldr	r3, [r7, #12]
 800c384:	011b      	lsls	r3, r3, #4
 800c386:	440b      	add	r3, r1
 800c388:	330c      	adds	r3, #12
 800c38a:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800c38c:	68fb      	ldr	r3, [r7, #12]
 800c38e:	3301      	adds	r3, #1
}
 800c390:	4618      	mov	r0, r3
 800c392:	3714      	adds	r7, #20
 800c394:	46bd      	mov	sp, r7
 800c396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c39a:	4770      	bx	lr
 800c39c:	200161bc 	.word	0x200161bc

0800c3a0 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800c3a0:	b480      	push	{r7}
 800c3a2:	b085      	sub	sp, #20
 800c3a4:	af00      	add	r7, sp, #0
 800c3a6:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800c3a8:	687b      	ldr	r3, [r7, #4]
 800c3aa:	3b01      	subs	r3, #1
 800c3ac:	607b      	str	r3, [r7, #4]
 800c3ae:	687b      	ldr	r3, [r7, #4]
 800c3b0:	2b01      	cmp	r3, #1
 800c3b2:	d825      	bhi.n	800c400 <dec_lock+0x60>
		n = Files[i].ctr;
 800c3b4:	4a17      	ldr	r2, [pc, #92]	@ (800c414 <dec_lock+0x74>)
 800c3b6:	687b      	ldr	r3, [r7, #4]
 800c3b8:	011b      	lsls	r3, r3, #4
 800c3ba:	4413      	add	r3, r2
 800c3bc:	330c      	adds	r3, #12
 800c3be:	881b      	ldrh	r3, [r3, #0]
 800c3c0:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800c3c2:	89fb      	ldrh	r3, [r7, #14]
 800c3c4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800c3c8:	d101      	bne.n	800c3ce <dec_lock+0x2e>
 800c3ca:	2300      	movs	r3, #0
 800c3cc:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800c3ce:	89fb      	ldrh	r3, [r7, #14]
 800c3d0:	2b00      	cmp	r3, #0
 800c3d2:	d002      	beq.n	800c3da <dec_lock+0x3a>
 800c3d4:	89fb      	ldrh	r3, [r7, #14]
 800c3d6:	3b01      	subs	r3, #1
 800c3d8:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800c3da:	4a0e      	ldr	r2, [pc, #56]	@ (800c414 <dec_lock+0x74>)
 800c3dc:	687b      	ldr	r3, [r7, #4]
 800c3de:	011b      	lsls	r3, r3, #4
 800c3e0:	4413      	add	r3, r2
 800c3e2:	330c      	adds	r3, #12
 800c3e4:	89fa      	ldrh	r2, [r7, #14]
 800c3e6:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800c3e8:	89fb      	ldrh	r3, [r7, #14]
 800c3ea:	2b00      	cmp	r3, #0
 800c3ec:	d105      	bne.n	800c3fa <dec_lock+0x5a>
 800c3ee:	4a09      	ldr	r2, [pc, #36]	@ (800c414 <dec_lock+0x74>)
 800c3f0:	687b      	ldr	r3, [r7, #4]
 800c3f2:	011b      	lsls	r3, r3, #4
 800c3f4:	4413      	add	r3, r2
 800c3f6:	2200      	movs	r2, #0
 800c3f8:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800c3fa:	2300      	movs	r3, #0
 800c3fc:	737b      	strb	r3, [r7, #13]
 800c3fe:	e001      	b.n	800c404 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800c400:	2302      	movs	r3, #2
 800c402:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800c404:	7b7b      	ldrb	r3, [r7, #13]
}
 800c406:	4618      	mov	r0, r3
 800c408:	3714      	adds	r7, #20
 800c40a:	46bd      	mov	sp, r7
 800c40c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c410:	4770      	bx	lr
 800c412:	bf00      	nop
 800c414:	200161bc 	.word	0x200161bc

0800c418 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800c418:	b480      	push	{r7}
 800c41a:	b085      	sub	sp, #20
 800c41c:	af00      	add	r7, sp, #0
 800c41e:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800c420:	2300      	movs	r3, #0
 800c422:	60fb      	str	r3, [r7, #12]
 800c424:	e010      	b.n	800c448 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800c426:	4a0d      	ldr	r2, [pc, #52]	@ (800c45c <clear_lock+0x44>)
 800c428:	68fb      	ldr	r3, [r7, #12]
 800c42a:	011b      	lsls	r3, r3, #4
 800c42c:	4413      	add	r3, r2
 800c42e:	681b      	ldr	r3, [r3, #0]
 800c430:	687a      	ldr	r2, [r7, #4]
 800c432:	429a      	cmp	r2, r3
 800c434:	d105      	bne.n	800c442 <clear_lock+0x2a>
 800c436:	4a09      	ldr	r2, [pc, #36]	@ (800c45c <clear_lock+0x44>)
 800c438:	68fb      	ldr	r3, [r7, #12]
 800c43a:	011b      	lsls	r3, r3, #4
 800c43c:	4413      	add	r3, r2
 800c43e:	2200      	movs	r2, #0
 800c440:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800c442:	68fb      	ldr	r3, [r7, #12]
 800c444:	3301      	adds	r3, #1
 800c446:	60fb      	str	r3, [r7, #12]
 800c448:	68fb      	ldr	r3, [r7, #12]
 800c44a:	2b01      	cmp	r3, #1
 800c44c:	d9eb      	bls.n	800c426 <clear_lock+0xe>
	}
}
 800c44e:	bf00      	nop
 800c450:	bf00      	nop
 800c452:	3714      	adds	r7, #20
 800c454:	46bd      	mov	sp, r7
 800c456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c45a:	4770      	bx	lr
 800c45c:	200161bc 	.word	0x200161bc

0800c460 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800c460:	b580      	push	{r7, lr}
 800c462:	b086      	sub	sp, #24
 800c464:	af00      	add	r7, sp, #0
 800c466:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800c468:	2300      	movs	r3, #0
 800c46a:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800c46c:	687b      	ldr	r3, [r7, #4]
 800c46e:	78db      	ldrb	r3, [r3, #3]
 800c470:	2b00      	cmp	r3, #0
 800c472:	d034      	beq.n	800c4de <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800c474:	687b      	ldr	r3, [r7, #4]
 800c476:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c478:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800c47a:	687b      	ldr	r3, [r7, #4]
 800c47c:	7858      	ldrb	r0, [r3, #1]
 800c47e:	687b      	ldr	r3, [r7, #4]
 800c480:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800c484:	2301      	movs	r3, #1
 800c486:	697a      	ldr	r2, [r7, #20]
 800c488:	f7ff fd3e 	bl	800bf08 <disk_write>
 800c48c:	4603      	mov	r3, r0
 800c48e:	2b00      	cmp	r3, #0
 800c490:	d002      	beq.n	800c498 <sync_window+0x38>
			res = FR_DISK_ERR;
 800c492:	2301      	movs	r3, #1
 800c494:	73fb      	strb	r3, [r7, #15]
 800c496:	e022      	b.n	800c4de <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800c498:	687b      	ldr	r3, [r7, #4]
 800c49a:	2200      	movs	r2, #0
 800c49c:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800c49e:	687b      	ldr	r3, [r7, #4]
 800c4a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c4a2:	697a      	ldr	r2, [r7, #20]
 800c4a4:	1ad2      	subs	r2, r2, r3
 800c4a6:	687b      	ldr	r3, [r7, #4]
 800c4a8:	6a1b      	ldr	r3, [r3, #32]
 800c4aa:	429a      	cmp	r2, r3
 800c4ac:	d217      	bcs.n	800c4de <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800c4ae:	687b      	ldr	r3, [r7, #4]
 800c4b0:	789b      	ldrb	r3, [r3, #2]
 800c4b2:	613b      	str	r3, [r7, #16]
 800c4b4:	e010      	b.n	800c4d8 <sync_window+0x78>
					wsect += fs->fsize;
 800c4b6:	687b      	ldr	r3, [r7, #4]
 800c4b8:	6a1b      	ldr	r3, [r3, #32]
 800c4ba:	697a      	ldr	r2, [r7, #20]
 800c4bc:	4413      	add	r3, r2
 800c4be:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800c4c0:	687b      	ldr	r3, [r7, #4]
 800c4c2:	7858      	ldrb	r0, [r3, #1]
 800c4c4:	687b      	ldr	r3, [r7, #4]
 800c4c6:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800c4ca:	2301      	movs	r3, #1
 800c4cc:	697a      	ldr	r2, [r7, #20]
 800c4ce:	f7ff fd1b 	bl	800bf08 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800c4d2:	693b      	ldr	r3, [r7, #16]
 800c4d4:	3b01      	subs	r3, #1
 800c4d6:	613b      	str	r3, [r7, #16]
 800c4d8:	693b      	ldr	r3, [r7, #16]
 800c4da:	2b01      	cmp	r3, #1
 800c4dc:	d8eb      	bhi.n	800c4b6 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800c4de:	7bfb      	ldrb	r3, [r7, #15]
}
 800c4e0:	4618      	mov	r0, r3
 800c4e2:	3718      	adds	r7, #24
 800c4e4:	46bd      	mov	sp, r7
 800c4e6:	bd80      	pop	{r7, pc}

0800c4e8 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800c4e8:	b580      	push	{r7, lr}
 800c4ea:	b084      	sub	sp, #16
 800c4ec:	af00      	add	r7, sp, #0
 800c4ee:	6078      	str	r0, [r7, #4]
 800c4f0:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800c4f2:	2300      	movs	r3, #0
 800c4f4:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800c4f6:	687b      	ldr	r3, [r7, #4]
 800c4f8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c4fa:	683a      	ldr	r2, [r7, #0]
 800c4fc:	429a      	cmp	r2, r3
 800c4fe:	d01b      	beq.n	800c538 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800c500:	6878      	ldr	r0, [r7, #4]
 800c502:	f7ff ffad 	bl	800c460 <sync_window>
 800c506:	4603      	mov	r3, r0
 800c508:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800c50a:	7bfb      	ldrb	r3, [r7, #15]
 800c50c:	2b00      	cmp	r3, #0
 800c50e:	d113      	bne.n	800c538 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800c510:	687b      	ldr	r3, [r7, #4]
 800c512:	7858      	ldrb	r0, [r3, #1]
 800c514:	687b      	ldr	r3, [r7, #4]
 800c516:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800c51a:	2301      	movs	r3, #1
 800c51c:	683a      	ldr	r2, [r7, #0]
 800c51e:	f7ff fcd3 	bl	800bec8 <disk_read>
 800c522:	4603      	mov	r3, r0
 800c524:	2b00      	cmp	r3, #0
 800c526:	d004      	beq.n	800c532 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800c528:	f04f 33ff 	mov.w	r3, #4294967295
 800c52c:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800c52e:	2301      	movs	r3, #1
 800c530:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800c532:	687b      	ldr	r3, [r7, #4]
 800c534:	683a      	ldr	r2, [r7, #0]
 800c536:	635a      	str	r2, [r3, #52]	@ 0x34
		}
	}
	return res;
 800c538:	7bfb      	ldrb	r3, [r7, #15]
}
 800c53a:	4618      	mov	r0, r3
 800c53c:	3710      	adds	r7, #16
 800c53e:	46bd      	mov	sp, r7
 800c540:	bd80      	pop	{r7, pc}
	...

0800c544 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800c544:	b580      	push	{r7, lr}
 800c546:	b084      	sub	sp, #16
 800c548:	af00      	add	r7, sp, #0
 800c54a:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800c54c:	6878      	ldr	r0, [r7, #4]
 800c54e:	f7ff ff87 	bl	800c460 <sync_window>
 800c552:	4603      	mov	r3, r0
 800c554:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800c556:	7bfb      	ldrb	r3, [r7, #15]
 800c558:	2b00      	cmp	r3, #0
 800c55a:	d159      	bne.n	800c610 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800c55c:	687b      	ldr	r3, [r7, #4]
 800c55e:	781b      	ldrb	r3, [r3, #0]
 800c560:	2b03      	cmp	r3, #3
 800c562:	d149      	bne.n	800c5f8 <sync_fs+0xb4>
 800c564:	687b      	ldr	r3, [r7, #4]
 800c566:	791b      	ldrb	r3, [r3, #4]
 800c568:	2b01      	cmp	r3, #1
 800c56a:	d145      	bne.n	800c5f8 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800c56c:	687b      	ldr	r3, [r7, #4]
 800c56e:	f103 0038 	add.w	r0, r3, #56	@ 0x38
 800c572:	687b      	ldr	r3, [r7, #4]
 800c574:	899b      	ldrh	r3, [r3, #12]
 800c576:	461a      	mov	r2, r3
 800c578:	2100      	movs	r1, #0
 800c57a:	f7ff fda7 	bl	800c0cc <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800c57e:	687b      	ldr	r3, [r7, #4]
 800c580:	3338      	adds	r3, #56	@ 0x38
 800c582:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800c586:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 800c58a:	4618      	mov	r0, r3
 800c58c:	f7ff fd36 	bl	800bffc <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800c590:	687b      	ldr	r3, [r7, #4]
 800c592:	3338      	adds	r3, #56	@ 0x38
 800c594:	4921      	ldr	r1, [pc, #132]	@ (800c61c <sync_fs+0xd8>)
 800c596:	4618      	mov	r0, r3
 800c598:	f7ff fd4b 	bl	800c032 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800c59c:	687b      	ldr	r3, [r7, #4]
 800c59e:	3338      	adds	r3, #56	@ 0x38
 800c5a0:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800c5a4:	491e      	ldr	r1, [pc, #120]	@ (800c620 <sync_fs+0xdc>)
 800c5a6:	4618      	mov	r0, r3
 800c5a8:	f7ff fd43 	bl	800c032 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800c5ac:	687b      	ldr	r3, [r7, #4]
 800c5ae:	3338      	adds	r3, #56	@ 0x38
 800c5b0:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 800c5b4:	687b      	ldr	r3, [r7, #4]
 800c5b6:	699b      	ldr	r3, [r3, #24]
 800c5b8:	4619      	mov	r1, r3
 800c5ba:	4610      	mov	r0, r2
 800c5bc:	f7ff fd39 	bl	800c032 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800c5c0:	687b      	ldr	r3, [r7, #4]
 800c5c2:	3338      	adds	r3, #56	@ 0x38
 800c5c4:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 800c5c8:	687b      	ldr	r3, [r7, #4]
 800c5ca:	695b      	ldr	r3, [r3, #20]
 800c5cc:	4619      	mov	r1, r3
 800c5ce:	4610      	mov	r0, r2
 800c5d0:	f7ff fd2f 	bl	800c032 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800c5d4:	687b      	ldr	r3, [r7, #4]
 800c5d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c5d8:	1c5a      	adds	r2, r3, #1
 800c5da:	687b      	ldr	r3, [r7, #4]
 800c5dc:	635a      	str	r2, [r3, #52]	@ 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800c5de:	687b      	ldr	r3, [r7, #4]
 800c5e0:	7858      	ldrb	r0, [r3, #1]
 800c5e2:	687b      	ldr	r3, [r7, #4]
 800c5e4:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800c5e8:	687b      	ldr	r3, [r7, #4]
 800c5ea:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800c5ec:	2301      	movs	r3, #1
 800c5ee:	f7ff fc8b 	bl	800bf08 <disk_write>
			fs->fsi_flag = 0;
 800c5f2:	687b      	ldr	r3, [r7, #4]
 800c5f4:	2200      	movs	r2, #0
 800c5f6:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800c5f8:	687b      	ldr	r3, [r7, #4]
 800c5fa:	785b      	ldrb	r3, [r3, #1]
 800c5fc:	2200      	movs	r2, #0
 800c5fe:	2100      	movs	r1, #0
 800c600:	4618      	mov	r0, r3
 800c602:	f7ff fca1 	bl	800bf48 <disk_ioctl>
 800c606:	4603      	mov	r3, r0
 800c608:	2b00      	cmp	r3, #0
 800c60a:	d001      	beq.n	800c610 <sync_fs+0xcc>
 800c60c:	2301      	movs	r3, #1
 800c60e:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800c610:	7bfb      	ldrb	r3, [r7, #15]
}
 800c612:	4618      	mov	r0, r3
 800c614:	3710      	adds	r7, #16
 800c616:	46bd      	mov	sp, r7
 800c618:	bd80      	pop	{r7, pc}
 800c61a:	bf00      	nop
 800c61c:	41615252 	.word	0x41615252
 800c620:	61417272 	.word	0x61417272

0800c624 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800c624:	b480      	push	{r7}
 800c626:	b083      	sub	sp, #12
 800c628:	af00      	add	r7, sp, #0
 800c62a:	6078      	str	r0, [r7, #4]
 800c62c:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800c62e:	683b      	ldr	r3, [r7, #0]
 800c630:	3b02      	subs	r3, #2
 800c632:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800c634:	687b      	ldr	r3, [r7, #4]
 800c636:	69db      	ldr	r3, [r3, #28]
 800c638:	3b02      	subs	r3, #2
 800c63a:	683a      	ldr	r2, [r7, #0]
 800c63c:	429a      	cmp	r2, r3
 800c63e:	d301      	bcc.n	800c644 <clust2sect+0x20>
 800c640:	2300      	movs	r3, #0
 800c642:	e008      	b.n	800c656 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800c644:	687b      	ldr	r3, [r7, #4]
 800c646:	895b      	ldrh	r3, [r3, #10]
 800c648:	461a      	mov	r2, r3
 800c64a:	683b      	ldr	r3, [r7, #0]
 800c64c:	fb03 f202 	mul.w	r2, r3, r2
 800c650:	687b      	ldr	r3, [r7, #4]
 800c652:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c654:	4413      	add	r3, r2
}
 800c656:	4618      	mov	r0, r3
 800c658:	370c      	adds	r7, #12
 800c65a:	46bd      	mov	sp, r7
 800c65c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c660:	4770      	bx	lr

0800c662 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800c662:	b580      	push	{r7, lr}
 800c664:	b086      	sub	sp, #24
 800c666:	af00      	add	r7, sp, #0
 800c668:	6078      	str	r0, [r7, #4]
 800c66a:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800c66c:	687b      	ldr	r3, [r7, #4]
 800c66e:	681b      	ldr	r3, [r3, #0]
 800c670:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800c672:	683b      	ldr	r3, [r7, #0]
 800c674:	2b01      	cmp	r3, #1
 800c676:	d904      	bls.n	800c682 <get_fat+0x20>
 800c678:	693b      	ldr	r3, [r7, #16]
 800c67a:	69db      	ldr	r3, [r3, #28]
 800c67c:	683a      	ldr	r2, [r7, #0]
 800c67e:	429a      	cmp	r2, r3
 800c680:	d302      	bcc.n	800c688 <get_fat+0x26>
		val = 1;	/* Internal error */
 800c682:	2301      	movs	r3, #1
 800c684:	617b      	str	r3, [r7, #20]
 800c686:	e0ba      	b.n	800c7fe <get_fat+0x19c>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800c688:	f04f 33ff 	mov.w	r3, #4294967295
 800c68c:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800c68e:	693b      	ldr	r3, [r7, #16]
 800c690:	781b      	ldrb	r3, [r3, #0]
 800c692:	2b03      	cmp	r3, #3
 800c694:	f000 8082 	beq.w	800c79c <get_fat+0x13a>
 800c698:	2b03      	cmp	r3, #3
 800c69a:	f300 80a6 	bgt.w	800c7ea <get_fat+0x188>
 800c69e:	2b01      	cmp	r3, #1
 800c6a0:	d002      	beq.n	800c6a8 <get_fat+0x46>
 800c6a2:	2b02      	cmp	r3, #2
 800c6a4:	d055      	beq.n	800c752 <get_fat+0xf0>
 800c6a6:	e0a0      	b.n	800c7ea <get_fat+0x188>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800c6a8:	683b      	ldr	r3, [r7, #0]
 800c6aa:	60fb      	str	r3, [r7, #12]
 800c6ac:	68fb      	ldr	r3, [r7, #12]
 800c6ae:	085b      	lsrs	r3, r3, #1
 800c6b0:	68fa      	ldr	r2, [r7, #12]
 800c6b2:	4413      	add	r3, r2
 800c6b4:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800c6b6:	693b      	ldr	r3, [r7, #16]
 800c6b8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800c6ba:	693b      	ldr	r3, [r7, #16]
 800c6bc:	899b      	ldrh	r3, [r3, #12]
 800c6be:	4619      	mov	r1, r3
 800c6c0:	68fb      	ldr	r3, [r7, #12]
 800c6c2:	fbb3 f3f1 	udiv	r3, r3, r1
 800c6c6:	4413      	add	r3, r2
 800c6c8:	4619      	mov	r1, r3
 800c6ca:	6938      	ldr	r0, [r7, #16]
 800c6cc:	f7ff ff0c 	bl	800c4e8 <move_window>
 800c6d0:	4603      	mov	r3, r0
 800c6d2:	2b00      	cmp	r3, #0
 800c6d4:	f040 808c 	bne.w	800c7f0 <get_fat+0x18e>
			wc = fs->win[bc++ % SS(fs)];
 800c6d8:	68fb      	ldr	r3, [r7, #12]
 800c6da:	1c5a      	adds	r2, r3, #1
 800c6dc:	60fa      	str	r2, [r7, #12]
 800c6de:	693a      	ldr	r2, [r7, #16]
 800c6e0:	8992      	ldrh	r2, [r2, #12]
 800c6e2:	fbb3 f1f2 	udiv	r1, r3, r2
 800c6e6:	fb01 f202 	mul.w	r2, r1, r2
 800c6ea:	1a9b      	subs	r3, r3, r2
 800c6ec:	693a      	ldr	r2, [r7, #16]
 800c6ee:	4413      	add	r3, r2
 800c6f0:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800c6f4:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800c6f6:	693b      	ldr	r3, [r7, #16]
 800c6f8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800c6fa:	693b      	ldr	r3, [r7, #16]
 800c6fc:	899b      	ldrh	r3, [r3, #12]
 800c6fe:	4619      	mov	r1, r3
 800c700:	68fb      	ldr	r3, [r7, #12]
 800c702:	fbb3 f3f1 	udiv	r3, r3, r1
 800c706:	4413      	add	r3, r2
 800c708:	4619      	mov	r1, r3
 800c70a:	6938      	ldr	r0, [r7, #16]
 800c70c:	f7ff feec 	bl	800c4e8 <move_window>
 800c710:	4603      	mov	r3, r0
 800c712:	2b00      	cmp	r3, #0
 800c714:	d16e      	bne.n	800c7f4 <get_fat+0x192>
			wc |= fs->win[bc % SS(fs)] << 8;
 800c716:	693b      	ldr	r3, [r7, #16]
 800c718:	899b      	ldrh	r3, [r3, #12]
 800c71a:	461a      	mov	r2, r3
 800c71c:	68fb      	ldr	r3, [r7, #12]
 800c71e:	fbb3 f1f2 	udiv	r1, r3, r2
 800c722:	fb01 f202 	mul.w	r2, r1, r2
 800c726:	1a9b      	subs	r3, r3, r2
 800c728:	693a      	ldr	r2, [r7, #16]
 800c72a:	4413      	add	r3, r2
 800c72c:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800c730:	021b      	lsls	r3, r3, #8
 800c732:	68ba      	ldr	r2, [r7, #8]
 800c734:	4313      	orrs	r3, r2
 800c736:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800c738:	683b      	ldr	r3, [r7, #0]
 800c73a:	f003 0301 	and.w	r3, r3, #1
 800c73e:	2b00      	cmp	r3, #0
 800c740:	d002      	beq.n	800c748 <get_fat+0xe6>
 800c742:	68bb      	ldr	r3, [r7, #8]
 800c744:	091b      	lsrs	r3, r3, #4
 800c746:	e002      	b.n	800c74e <get_fat+0xec>
 800c748:	68bb      	ldr	r3, [r7, #8]
 800c74a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800c74e:	617b      	str	r3, [r7, #20]
			break;
 800c750:	e055      	b.n	800c7fe <get_fat+0x19c>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800c752:	693b      	ldr	r3, [r7, #16]
 800c754:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800c756:	693b      	ldr	r3, [r7, #16]
 800c758:	899b      	ldrh	r3, [r3, #12]
 800c75a:	085b      	lsrs	r3, r3, #1
 800c75c:	b29b      	uxth	r3, r3
 800c75e:	4619      	mov	r1, r3
 800c760:	683b      	ldr	r3, [r7, #0]
 800c762:	fbb3 f3f1 	udiv	r3, r3, r1
 800c766:	4413      	add	r3, r2
 800c768:	4619      	mov	r1, r3
 800c76a:	6938      	ldr	r0, [r7, #16]
 800c76c:	f7ff febc 	bl	800c4e8 <move_window>
 800c770:	4603      	mov	r3, r0
 800c772:	2b00      	cmp	r3, #0
 800c774:	d140      	bne.n	800c7f8 <get_fat+0x196>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800c776:	693b      	ldr	r3, [r7, #16]
 800c778:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800c77c:	683b      	ldr	r3, [r7, #0]
 800c77e:	005b      	lsls	r3, r3, #1
 800c780:	693a      	ldr	r2, [r7, #16]
 800c782:	8992      	ldrh	r2, [r2, #12]
 800c784:	fbb3 f0f2 	udiv	r0, r3, r2
 800c788:	fb00 f202 	mul.w	r2, r0, r2
 800c78c:	1a9b      	subs	r3, r3, r2
 800c78e:	440b      	add	r3, r1
 800c790:	4618      	mov	r0, r3
 800c792:	f7ff fbf7 	bl	800bf84 <ld_word>
 800c796:	4603      	mov	r3, r0
 800c798:	617b      	str	r3, [r7, #20]
			break;
 800c79a:	e030      	b.n	800c7fe <get_fat+0x19c>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800c79c:	693b      	ldr	r3, [r7, #16]
 800c79e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800c7a0:	693b      	ldr	r3, [r7, #16]
 800c7a2:	899b      	ldrh	r3, [r3, #12]
 800c7a4:	089b      	lsrs	r3, r3, #2
 800c7a6:	b29b      	uxth	r3, r3
 800c7a8:	4619      	mov	r1, r3
 800c7aa:	683b      	ldr	r3, [r7, #0]
 800c7ac:	fbb3 f3f1 	udiv	r3, r3, r1
 800c7b0:	4413      	add	r3, r2
 800c7b2:	4619      	mov	r1, r3
 800c7b4:	6938      	ldr	r0, [r7, #16]
 800c7b6:	f7ff fe97 	bl	800c4e8 <move_window>
 800c7ba:	4603      	mov	r3, r0
 800c7bc:	2b00      	cmp	r3, #0
 800c7be:	d11d      	bne.n	800c7fc <get_fat+0x19a>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800c7c0:	693b      	ldr	r3, [r7, #16]
 800c7c2:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800c7c6:	683b      	ldr	r3, [r7, #0]
 800c7c8:	009b      	lsls	r3, r3, #2
 800c7ca:	693a      	ldr	r2, [r7, #16]
 800c7cc:	8992      	ldrh	r2, [r2, #12]
 800c7ce:	fbb3 f0f2 	udiv	r0, r3, r2
 800c7d2:	fb00 f202 	mul.w	r2, r0, r2
 800c7d6:	1a9b      	subs	r3, r3, r2
 800c7d8:	440b      	add	r3, r1
 800c7da:	4618      	mov	r0, r3
 800c7dc:	f7ff fbeb 	bl	800bfb6 <ld_dword>
 800c7e0:	4603      	mov	r3, r0
 800c7e2:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800c7e6:	617b      	str	r3, [r7, #20]
			break;
 800c7e8:	e009      	b.n	800c7fe <get_fat+0x19c>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800c7ea:	2301      	movs	r3, #1
 800c7ec:	617b      	str	r3, [r7, #20]
 800c7ee:	e006      	b.n	800c7fe <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800c7f0:	bf00      	nop
 800c7f2:	e004      	b.n	800c7fe <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800c7f4:	bf00      	nop
 800c7f6:	e002      	b.n	800c7fe <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800c7f8:	bf00      	nop
 800c7fa:	e000      	b.n	800c7fe <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800c7fc:	bf00      	nop
		}
	}

	return val;
 800c7fe:	697b      	ldr	r3, [r7, #20]
}
 800c800:	4618      	mov	r0, r3
 800c802:	3718      	adds	r7, #24
 800c804:	46bd      	mov	sp, r7
 800c806:	bd80      	pop	{r7, pc}

0800c808 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800c808:	b590      	push	{r4, r7, lr}
 800c80a:	b089      	sub	sp, #36	@ 0x24
 800c80c:	af00      	add	r7, sp, #0
 800c80e:	60f8      	str	r0, [r7, #12]
 800c810:	60b9      	str	r1, [r7, #8]
 800c812:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800c814:	2302      	movs	r3, #2
 800c816:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800c818:	68bb      	ldr	r3, [r7, #8]
 800c81a:	2b01      	cmp	r3, #1
 800c81c:	f240 8109 	bls.w	800ca32 <put_fat+0x22a>
 800c820:	68fb      	ldr	r3, [r7, #12]
 800c822:	69db      	ldr	r3, [r3, #28]
 800c824:	68ba      	ldr	r2, [r7, #8]
 800c826:	429a      	cmp	r2, r3
 800c828:	f080 8103 	bcs.w	800ca32 <put_fat+0x22a>
		switch (fs->fs_type) {
 800c82c:	68fb      	ldr	r3, [r7, #12]
 800c82e:	781b      	ldrb	r3, [r3, #0]
 800c830:	2b03      	cmp	r3, #3
 800c832:	f000 80b6 	beq.w	800c9a2 <put_fat+0x19a>
 800c836:	2b03      	cmp	r3, #3
 800c838:	f300 80fb 	bgt.w	800ca32 <put_fat+0x22a>
 800c83c:	2b01      	cmp	r3, #1
 800c83e:	d003      	beq.n	800c848 <put_fat+0x40>
 800c840:	2b02      	cmp	r3, #2
 800c842:	f000 8083 	beq.w	800c94c <put_fat+0x144>
 800c846:	e0f4      	b.n	800ca32 <put_fat+0x22a>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800c848:	68bb      	ldr	r3, [r7, #8]
 800c84a:	61bb      	str	r3, [r7, #24]
 800c84c:	69bb      	ldr	r3, [r7, #24]
 800c84e:	085b      	lsrs	r3, r3, #1
 800c850:	69ba      	ldr	r2, [r7, #24]
 800c852:	4413      	add	r3, r2
 800c854:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800c856:	68fb      	ldr	r3, [r7, #12]
 800c858:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800c85a:	68fb      	ldr	r3, [r7, #12]
 800c85c:	899b      	ldrh	r3, [r3, #12]
 800c85e:	4619      	mov	r1, r3
 800c860:	69bb      	ldr	r3, [r7, #24]
 800c862:	fbb3 f3f1 	udiv	r3, r3, r1
 800c866:	4413      	add	r3, r2
 800c868:	4619      	mov	r1, r3
 800c86a:	68f8      	ldr	r0, [r7, #12]
 800c86c:	f7ff fe3c 	bl	800c4e8 <move_window>
 800c870:	4603      	mov	r3, r0
 800c872:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800c874:	7ffb      	ldrb	r3, [r7, #31]
 800c876:	2b00      	cmp	r3, #0
 800c878:	f040 80d4 	bne.w	800ca24 <put_fat+0x21c>
			p = fs->win + bc++ % SS(fs);
 800c87c:	68fb      	ldr	r3, [r7, #12]
 800c87e:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800c882:	69bb      	ldr	r3, [r7, #24]
 800c884:	1c5a      	adds	r2, r3, #1
 800c886:	61ba      	str	r2, [r7, #24]
 800c888:	68fa      	ldr	r2, [r7, #12]
 800c88a:	8992      	ldrh	r2, [r2, #12]
 800c88c:	fbb3 f0f2 	udiv	r0, r3, r2
 800c890:	fb00 f202 	mul.w	r2, r0, r2
 800c894:	1a9b      	subs	r3, r3, r2
 800c896:	440b      	add	r3, r1
 800c898:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800c89a:	68bb      	ldr	r3, [r7, #8]
 800c89c:	f003 0301 	and.w	r3, r3, #1
 800c8a0:	2b00      	cmp	r3, #0
 800c8a2:	d00d      	beq.n	800c8c0 <put_fat+0xb8>
 800c8a4:	697b      	ldr	r3, [r7, #20]
 800c8a6:	781b      	ldrb	r3, [r3, #0]
 800c8a8:	b25b      	sxtb	r3, r3
 800c8aa:	f003 030f 	and.w	r3, r3, #15
 800c8ae:	b25a      	sxtb	r2, r3
 800c8b0:	687b      	ldr	r3, [r7, #4]
 800c8b2:	b25b      	sxtb	r3, r3
 800c8b4:	011b      	lsls	r3, r3, #4
 800c8b6:	b25b      	sxtb	r3, r3
 800c8b8:	4313      	orrs	r3, r2
 800c8ba:	b25b      	sxtb	r3, r3
 800c8bc:	b2db      	uxtb	r3, r3
 800c8be:	e001      	b.n	800c8c4 <put_fat+0xbc>
 800c8c0:	687b      	ldr	r3, [r7, #4]
 800c8c2:	b2db      	uxtb	r3, r3
 800c8c4:	697a      	ldr	r2, [r7, #20]
 800c8c6:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800c8c8:	68fb      	ldr	r3, [r7, #12]
 800c8ca:	2201      	movs	r2, #1
 800c8cc:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800c8ce:	68fb      	ldr	r3, [r7, #12]
 800c8d0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800c8d2:	68fb      	ldr	r3, [r7, #12]
 800c8d4:	899b      	ldrh	r3, [r3, #12]
 800c8d6:	4619      	mov	r1, r3
 800c8d8:	69bb      	ldr	r3, [r7, #24]
 800c8da:	fbb3 f3f1 	udiv	r3, r3, r1
 800c8de:	4413      	add	r3, r2
 800c8e0:	4619      	mov	r1, r3
 800c8e2:	68f8      	ldr	r0, [r7, #12]
 800c8e4:	f7ff fe00 	bl	800c4e8 <move_window>
 800c8e8:	4603      	mov	r3, r0
 800c8ea:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800c8ec:	7ffb      	ldrb	r3, [r7, #31]
 800c8ee:	2b00      	cmp	r3, #0
 800c8f0:	f040 809a 	bne.w	800ca28 <put_fat+0x220>
			p = fs->win + bc % SS(fs);
 800c8f4:	68fb      	ldr	r3, [r7, #12]
 800c8f6:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800c8fa:	68fb      	ldr	r3, [r7, #12]
 800c8fc:	899b      	ldrh	r3, [r3, #12]
 800c8fe:	461a      	mov	r2, r3
 800c900:	69bb      	ldr	r3, [r7, #24]
 800c902:	fbb3 f0f2 	udiv	r0, r3, r2
 800c906:	fb00 f202 	mul.w	r2, r0, r2
 800c90a:	1a9b      	subs	r3, r3, r2
 800c90c:	440b      	add	r3, r1
 800c90e:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800c910:	68bb      	ldr	r3, [r7, #8]
 800c912:	f003 0301 	and.w	r3, r3, #1
 800c916:	2b00      	cmp	r3, #0
 800c918:	d003      	beq.n	800c922 <put_fat+0x11a>
 800c91a:	687b      	ldr	r3, [r7, #4]
 800c91c:	091b      	lsrs	r3, r3, #4
 800c91e:	b2db      	uxtb	r3, r3
 800c920:	e00e      	b.n	800c940 <put_fat+0x138>
 800c922:	697b      	ldr	r3, [r7, #20]
 800c924:	781b      	ldrb	r3, [r3, #0]
 800c926:	b25b      	sxtb	r3, r3
 800c928:	f023 030f 	bic.w	r3, r3, #15
 800c92c:	b25a      	sxtb	r2, r3
 800c92e:	687b      	ldr	r3, [r7, #4]
 800c930:	0a1b      	lsrs	r3, r3, #8
 800c932:	b25b      	sxtb	r3, r3
 800c934:	f003 030f 	and.w	r3, r3, #15
 800c938:	b25b      	sxtb	r3, r3
 800c93a:	4313      	orrs	r3, r2
 800c93c:	b25b      	sxtb	r3, r3
 800c93e:	b2db      	uxtb	r3, r3
 800c940:	697a      	ldr	r2, [r7, #20]
 800c942:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800c944:	68fb      	ldr	r3, [r7, #12]
 800c946:	2201      	movs	r2, #1
 800c948:	70da      	strb	r2, [r3, #3]
			break;
 800c94a:	e072      	b.n	800ca32 <put_fat+0x22a>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800c94c:	68fb      	ldr	r3, [r7, #12]
 800c94e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800c950:	68fb      	ldr	r3, [r7, #12]
 800c952:	899b      	ldrh	r3, [r3, #12]
 800c954:	085b      	lsrs	r3, r3, #1
 800c956:	b29b      	uxth	r3, r3
 800c958:	4619      	mov	r1, r3
 800c95a:	68bb      	ldr	r3, [r7, #8]
 800c95c:	fbb3 f3f1 	udiv	r3, r3, r1
 800c960:	4413      	add	r3, r2
 800c962:	4619      	mov	r1, r3
 800c964:	68f8      	ldr	r0, [r7, #12]
 800c966:	f7ff fdbf 	bl	800c4e8 <move_window>
 800c96a:	4603      	mov	r3, r0
 800c96c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800c96e:	7ffb      	ldrb	r3, [r7, #31]
 800c970:	2b00      	cmp	r3, #0
 800c972:	d15b      	bne.n	800ca2c <put_fat+0x224>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800c974:	68fb      	ldr	r3, [r7, #12]
 800c976:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800c97a:	68bb      	ldr	r3, [r7, #8]
 800c97c:	005b      	lsls	r3, r3, #1
 800c97e:	68fa      	ldr	r2, [r7, #12]
 800c980:	8992      	ldrh	r2, [r2, #12]
 800c982:	fbb3 f0f2 	udiv	r0, r3, r2
 800c986:	fb00 f202 	mul.w	r2, r0, r2
 800c98a:	1a9b      	subs	r3, r3, r2
 800c98c:	440b      	add	r3, r1
 800c98e:	687a      	ldr	r2, [r7, #4]
 800c990:	b292      	uxth	r2, r2
 800c992:	4611      	mov	r1, r2
 800c994:	4618      	mov	r0, r3
 800c996:	f7ff fb31 	bl	800bffc <st_word>
			fs->wflag = 1;
 800c99a:	68fb      	ldr	r3, [r7, #12]
 800c99c:	2201      	movs	r2, #1
 800c99e:	70da      	strb	r2, [r3, #3]
			break;
 800c9a0:	e047      	b.n	800ca32 <put_fat+0x22a>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800c9a2:	68fb      	ldr	r3, [r7, #12]
 800c9a4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800c9a6:	68fb      	ldr	r3, [r7, #12]
 800c9a8:	899b      	ldrh	r3, [r3, #12]
 800c9aa:	089b      	lsrs	r3, r3, #2
 800c9ac:	b29b      	uxth	r3, r3
 800c9ae:	4619      	mov	r1, r3
 800c9b0:	68bb      	ldr	r3, [r7, #8]
 800c9b2:	fbb3 f3f1 	udiv	r3, r3, r1
 800c9b6:	4413      	add	r3, r2
 800c9b8:	4619      	mov	r1, r3
 800c9ba:	68f8      	ldr	r0, [r7, #12]
 800c9bc:	f7ff fd94 	bl	800c4e8 <move_window>
 800c9c0:	4603      	mov	r3, r0
 800c9c2:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800c9c4:	7ffb      	ldrb	r3, [r7, #31]
 800c9c6:	2b00      	cmp	r3, #0
 800c9c8:	d132      	bne.n	800ca30 <put_fat+0x228>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800c9ca:	687b      	ldr	r3, [r7, #4]
 800c9cc:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 800c9d0:	68fb      	ldr	r3, [r7, #12]
 800c9d2:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800c9d6:	68bb      	ldr	r3, [r7, #8]
 800c9d8:	009b      	lsls	r3, r3, #2
 800c9da:	68fa      	ldr	r2, [r7, #12]
 800c9dc:	8992      	ldrh	r2, [r2, #12]
 800c9de:	fbb3 f0f2 	udiv	r0, r3, r2
 800c9e2:	fb00 f202 	mul.w	r2, r0, r2
 800c9e6:	1a9b      	subs	r3, r3, r2
 800c9e8:	440b      	add	r3, r1
 800c9ea:	4618      	mov	r0, r3
 800c9ec:	f7ff fae3 	bl	800bfb6 <ld_dword>
 800c9f0:	4603      	mov	r3, r0
 800c9f2:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 800c9f6:	4323      	orrs	r3, r4
 800c9f8:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800c9fa:	68fb      	ldr	r3, [r7, #12]
 800c9fc:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800ca00:	68bb      	ldr	r3, [r7, #8]
 800ca02:	009b      	lsls	r3, r3, #2
 800ca04:	68fa      	ldr	r2, [r7, #12]
 800ca06:	8992      	ldrh	r2, [r2, #12]
 800ca08:	fbb3 f0f2 	udiv	r0, r3, r2
 800ca0c:	fb00 f202 	mul.w	r2, r0, r2
 800ca10:	1a9b      	subs	r3, r3, r2
 800ca12:	440b      	add	r3, r1
 800ca14:	6879      	ldr	r1, [r7, #4]
 800ca16:	4618      	mov	r0, r3
 800ca18:	f7ff fb0b 	bl	800c032 <st_dword>
			fs->wflag = 1;
 800ca1c:	68fb      	ldr	r3, [r7, #12]
 800ca1e:	2201      	movs	r2, #1
 800ca20:	70da      	strb	r2, [r3, #3]
			break;
 800ca22:	e006      	b.n	800ca32 <put_fat+0x22a>
			if (res != FR_OK) break;
 800ca24:	bf00      	nop
 800ca26:	e004      	b.n	800ca32 <put_fat+0x22a>
			if (res != FR_OK) break;
 800ca28:	bf00      	nop
 800ca2a:	e002      	b.n	800ca32 <put_fat+0x22a>
			if (res != FR_OK) break;
 800ca2c:	bf00      	nop
 800ca2e:	e000      	b.n	800ca32 <put_fat+0x22a>
			if (res != FR_OK) break;
 800ca30:	bf00      	nop
		}
	}
	return res;
 800ca32:	7ffb      	ldrb	r3, [r7, #31]
}
 800ca34:	4618      	mov	r0, r3
 800ca36:	3724      	adds	r7, #36	@ 0x24
 800ca38:	46bd      	mov	sp, r7
 800ca3a:	bd90      	pop	{r4, r7, pc}

0800ca3c <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800ca3c:	b580      	push	{r7, lr}
 800ca3e:	b088      	sub	sp, #32
 800ca40:	af00      	add	r7, sp, #0
 800ca42:	60f8      	str	r0, [r7, #12]
 800ca44:	60b9      	str	r1, [r7, #8]
 800ca46:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800ca48:	2300      	movs	r3, #0
 800ca4a:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800ca4c:	68fb      	ldr	r3, [r7, #12]
 800ca4e:	681b      	ldr	r3, [r3, #0]
 800ca50:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800ca52:	68bb      	ldr	r3, [r7, #8]
 800ca54:	2b01      	cmp	r3, #1
 800ca56:	d904      	bls.n	800ca62 <remove_chain+0x26>
 800ca58:	69bb      	ldr	r3, [r7, #24]
 800ca5a:	69db      	ldr	r3, [r3, #28]
 800ca5c:	68ba      	ldr	r2, [r7, #8]
 800ca5e:	429a      	cmp	r2, r3
 800ca60:	d301      	bcc.n	800ca66 <remove_chain+0x2a>
 800ca62:	2302      	movs	r3, #2
 800ca64:	e04b      	b.n	800cafe <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800ca66:	687b      	ldr	r3, [r7, #4]
 800ca68:	2b00      	cmp	r3, #0
 800ca6a:	d00c      	beq.n	800ca86 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800ca6c:	f04f 32ff 	mov.w	r2, #4294967295
 800ca70:	6879      	ldr	r1, [r7, #4]
 800ca72:	69b8      	ldr	r0, [r7, #24]
 800ca74:	f7ff fec8 	bl	800c808 <put_fat>
 800ca78:	4603      	mov	r3, r0
 800ca7a:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800ca7c:	7ffb      	ldrb	r3, [r7, #31]
 800ca7e:	2b00      	cmp	r3, #0
 800ca80:	d001      	beq.n	800ca86 <remove_chain+0x4a>
 800ca82:	7ffb      	ldrb	r3, [r7, #31]
 800ca84:	e03b      	b.n	800cafe <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800ca86:	68b9      	ldr	r1, [r7, #8]
 800ca88:	68f8      	ldr	r0, [r7, #12]
 800ca8a:	f7ff fdea 	bl	800c662 <get_fat>
 800ca8e:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800ca90:	697b      	ldr	r3, [r7, #20]
 800ca92:	2b00      	cmp	r3, #0
 800ca94:	d031      	beq.n	800cafa <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800ca96:	697b      	ldr	r3, [r7, #20]
 800ca98:	2b01      	cmp	r3, #1
 800ca9a:	d101      	bne.n	800caa0 <remove_chain+0x64>
 800ca9c:	2302      	movs	r3, #2
 800ca9e:	e02e      	b.n	800cafe <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800caa0:	697b      	ldr	r3, [r7, #20]
 800caa2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800caa6:	d101      	bne.n	800caac <remove_chain+0x70>
 800caa8:	2301      	movs	r3, #1
 800caaa:	e028      	b.n	800cafe <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800caac:	2200      	movs	r2, #0
 800caae:	68b9      	ldr	r1, [r7, #8]
 800cab0:	69b8      	ldr	r0, [r7, #24]
 800cab2:	f7ff fea9 	bl	800c808 <put_fat>
 800cab6:	4603      	mov	r3, r0
 800cab8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800caba:	7ffb      	ldrb	r3, [r7, #31]
 800cabc:	2b00      	cmp	r3, #0
 800cabe:	d001      	beq.n	800cac4 <remove_chain+0x88>
 800cac0:	7ffb      	ldrb	r3, [r7, #31]
 800cac2:	e01c      	b.n	800cafe <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800cac4:	69bb      	ldr	r3, [r7, #24]
 800cac6:	699a      	ldr	r2, [r3, #24]
 800cac8:	69bb      	ldr	r3, [r7, #24]
 800caca:	69db      	ldr	r3, [r3, #28]
 800cacc:	3b02      	subs	r3, #2
 800cace:	429a      	cmp	r2, r3
 800cad0:	d20b      	bcs.n	800caea <remove_chain+0xae>
			fs->free_clst++;
 800cad2:	69bb      	ldr	r3, [r7, #24]
 800cad4:	699b      	ldr	r3, [r3, #24]
 800cad6:	1c5a      	adds	r2, r3, #1
 800cad8:	69bb      	ldr	r3, [r7, #24]
 800cada:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 800cadc:	69bb      	ldr	r3, [r7, #24]
 800cade:	791b      	ldrb	r3, [r3, #4]
 800cae0:	f043 0301 	orr.w	r3, r3, #1
 800cae4:	b2da      	uxtb	r2, r3
 800cae6:	69bb      	ldr	r3, [r7, #24]
 800cae8:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800caea:	697b      	ldr	r3, [r7, #20]
 800caec:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800caee:	69bb      	ldr	r3, [r7, #24]
 800caf0:	69db      	ldr	r3, [r3, #28]
 800caf2:	68ba      	ldr	r2, [r7, #8]
 800caf4:	429a      	cmp	r2, r3
 800caf6:	d3c6      	bcc.n	800ca86 <remove_chain+0x4a>
 800caf8:	e000      	b.n	800cafc <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800cafa:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800cafc:	2300      	movs	r3, #0
}
 800cafe:	4618      	mov	r0, r3
 800cb00:	3720      	adds	r7, #32
 800cb02:	46bd      	mov	sp, r7
 800cb04:	bd80      	pop	{r7, pc}

0800cb06 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800cb06:	b580      	push	{r7, lr}
 800cb08:	b088      	sub	sp, #32
 800cb0a:	af00      	add	r7, sp, #0
 800cb0c:	6078      	str	r0, [r7, #4]
 800cb0e:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800cb10:	687b      	ldr	r3, [r7, #4]
 800cb12:	681b      	ldr	r3, [r3, #0]
 800cb14:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800cb16:	683b      	ldr	r3, [r7, #0]
 800cb18:	2b00      	cmp	r3, #0
 800cb1a:	d10d      	bne.n	800cb38 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800cb1c:	693b      	ldr	r3, [r7, #16]
 800cb1e:	695b      	ldr	r3, [r3, #20]
 800cb20:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800cb22:	69bb      	ldr	r3, [r7, #24]
 800cb24:	2b00      	cmp	r3, #0
 800cb26:	d004      	beq.n	800cb32 <create_chain+0x2c>
 800cb28:	693b      	ldr	r3, [r7, #16]
 800cb2a:	69db      	ldr	r3, [r3, #28]
 800cb2c:	69ba      	ldr	r2, [r7, #24]
 800cb2e:	429a      	cmp	r2, r3
 800cb30:	d31b      	bcc.n	800cb6a <create_chain+0x64>
 800cb32:	2301      	movs	r3, #1
 800cb34:	61bb      	str	r3, [r7, #24]
 800cb36:	e018      	b.n	800cb6a <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800cb38:	6839      	ldr	r1, [r7, #0]
 800cb3a:	6878      	ldr	r0, [r7, #4]
 800cb3c:	f7ff fd91 	bl	800c662 <get_fat>
 800cb40:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800cb42:	68fb      	ldr	r3, [r7, #12]
 800cb44:	2b01      	cmp	r3, #1
 800cb46:	d801      	bhi.n	800cb4c <create_chain+0x46>
 800cb48:	2301      	movs	r3, #1
 800cb4a:	e070      	b.n	800cc2e <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800cb4c:	68fb      	ldr	r3, [r7, #12]
 800cb4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cb52:	d101      	bne.n	800cb58 <create_chain+0x52>
 800cb54:	68fb      	ldr	r3, [r7, #12]
 800cb56:	e06a      	b.n	800cc2e <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800cb58:	693b      	ldr	r3, [r7, #16]
 800cb5a:	69db      	ldr	r3, [r3, #28]
 800cb5c:	68fa      	ldr	r2, [r7, #12]
 800cb5e:	429a      	cmp	r2, r3
 800cb60:	d201      	bcs.n	800cb66 <create_chain+0x60>
 800cb62:	68fb      	ldr	r3, [r7, #12]
 800cb64:	e063      	b.n	800cc2e <create_chain+0x128>
		scl = clst;
 800cb66:	683b      	ldr	r3, [r7, #0]
 800cb68:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800cb6a:	69bb      	ldr	r3, [r7, #24]
 800cb6c:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800cb6e:	69fb      	ldr	r3, [r7, #28]
 800cb70:	3301      	adds	r3, #1
 800cb72:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800cb74:	693b      	ldr	r3, [r7, #16]
 800cb76:	69db      	ldr	r3, [r3, #28]
 800cb78:	69fa      	ldr	r2, [r7, #28]
 800cb7a:	429a      	cmp	r2, r3
 800cb7c:	d307      	bcc.n	800cb8e <create_chain+0x88>
				ncl = 2;
 800cb7e:	2302      	movs	r3, #2
 800cb80:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800cb82:	69fa      	ldr	r2, [r7, #28]
 800cb84:	69bb      	ldr	r3, [r7, #24]
 800cb86:	429a      	cmp	r2, r3
 800cb88:	d901      	bls.n	800cb8e <create_chain+0x88>
 800cb8a:	2300      	movs	r3, #0
 800cb8c:	e04f      	b.n	800cc2e <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800cb8e:	69f9      	ldr	r1, [r7, #28]
 800cb90:	6878      	ldr	r0, [r7, #4]
 800cb92:	f7ff fd66 	bl	800c662 <get_fat>
 800cb96:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800cb98:	68fb      	ldr	r3, [r7, #12]
 800cb9a:	2b00      	cmp	r3, #0
 800cb9c:	d00e      	beq.n	800cbbc <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800cb9e:	68fb      	ldr	r3, [r7, #12]
 800cba0:	2b01      	cmp	r3, #1
 800cba2:	d003      	beq.n	800cbac <create_chain+0xa6>
 800cba4:	68fb      	ldr	r3, [r7, #12]
 800cba6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cbaa:	d101      	bne.n	800cbb0 <create_chain+0xaa>
 800cbac:	68fb      	ldr	r3, [r7, #12]
 800cbae:	e03e      	b.n	800cc2e <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800cbb0:	69fa      	ldr	r2, [r7, #28]
 800cbb2:	69bb      	ldr	r3, [r7, #24]
 800cbb4:	429a      	cmp	r2, r3
 800cbb6:	d1da      	bne.n	800cb6e <create_chain+0x68>
 800cbb8:	2300      	movs	r3, #0
 800cbba:	e038      	b.n	800cc2e <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800cbbc:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800cbbe:	f04f 32ff 	mov.w	r2, #4294967295
 800cbc2:	69f9      	ldr	r1, [r7, #28]
 800cbc4:	6938      	ldr	r0, [r7, #16]
 800cbc6:	f7ff fe1f 	bl	800c808 <put_fat>
 800cbca:	4603      	mov	r3, r0
 800cbcc:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800cbce:	7dfb      	ldrb	r3, [r7, #23]
 800cbd0:	2b00      	cmp	r3, #0
 800cbd2:	d109      	bne.n	800cbe8 <create_chain+0xe2>
 800cbd4:	683b      	ldr	r3, [r7, #0]
 800cbd6:	2b00      	cmp	r3, #0
 800cbd8:	d006      	beq.n	800cbe8 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800cbda:	69fa      	ldr	r2, [r7, #28]
 800cbdc:	6839      	ldr	r1, [r7, #0]
 800cbde:	6938      	ldr	r0, [r7, #16]
 800cbe0:	f7ff fe12 	bl	800c808 <put_fat>
 800cbe4:	4603      	mov	r3, r0
 800cbe6:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800cbe8:	7dfb      	ldrb	r3, [r7, #23]
 800cbea:	2b00      	cmp	r3, #0
 800cbec:	d116      	bne.n	800cc1c <create_chain+0x116>
		fs->last_clst = ncl;
 800cbee:	693b      	ldr	r3, [r7, #16]
 800cbf0:	69fa      	ldr	r2, [r7, #28]
 800cbf2:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800cbf4:	693b      	ldr	r3, [r7, #16]
 800cbf6:	699a      	ldr	r2, [r3, #24]
 800cbf8:	693b      	ldr	r3, [r7, #16]
 800cbfa:	69db      	ldr	r3, [r3, #28]
 800cbfc:	3b02      	subs	r3, #2
 800cbfe:	429a      	cmp	r2, r3
 800cc00:	d804      	bhi.n	800cc0c <create_chain+0x106>
 800cc02:	693b      	ldr	r3, [r7, #16]
 800cc04:	699b      	ldr	r3, [r3, #24]
 800cc06:	1e5a      	subs	r2, r3, #1
 800cc08:	693b      	ldr	r3, [r7, #16]
 800cc0a:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 800cc0c:	693b      	ldr	r3, [r7, #16]
 800cc0e:	791b      	ldrb	r3, [r3, #4]
 800cc10:	f043 0301 	orr.w	r3, r3, #1
 800cc14:	b2da      	uxtb	r2, r3
 800cc16:	693b      	ldr	r3, [r7, #16]
 800cc18:	711a      	strb	r2, [r3, #4]
 800cc1a:	e007      	b.n	800cc2c <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800cc1c:	7dfb      	ldrb	r3, [r7, #23]
 800cc1e:	2b01      	cmp	r3, #1
 800cc20:	d102      	bne.n	800cc28 <create_chain+0x122>
 800cc22:	f04f 33ff 	mov.w	r3, #4294967295
 800cc26:	e000      	b.n	800cc2a <create_chain+0x124>
 800cc28:	2301      	movs	r3, #1
 800cc2a:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800cc2c:	69fb      	ldr	r3, [r7, #28]
}
 800cc2e:	4618      	mov	r0, r3
 800cc30:	3720      	adds	r7, #32
 800cc32:	46bd      	mov	sp, r7
 800cc34:	bd80      	pop	{r7, pc}

0800cc36 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800cc36:	b480      	push	{r7}
 800cc38:	b087      	sub	sp, #28
 800cc3a:	af00      	add	r7, sp, #0
 800cc3c:	6078      	str	r0, [r7, #4]
 800cc3e:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800cc40:	687b      	ldr	r3, [r7, #4]
 800cc42:	681b      	ldr	r3, [r3, #0]
 800cc44:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800cc46:	687b      	ldr	r3, [r7, #4]
 800cc48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cc4a:	3304      	adds	r3, #4
 800cc4c:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800cc4e:	68fb      	ldr	r3, [r7, #12]
 800cc50:	899b      	ldrh	r3, [r3, #12]
 800cc52:	461a      	mov	r2, r3
 800cc54:	683b      	ldr	r3, [r7, #0]
 800cc56:	fbb3 f3f2 	udiv	r3, r3, r2
 800cc5a:	68fa      	ldr	r2, [r7, #12]
 800cc5c:	8952      	ldrh	r2, [r2, #10]
 800cc5e:	fbb3 f3f2 	udiv	r3, r3, r2
 800cc62:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800cc64:	693b      	ldr	r3, [r7, #16]
 800cc66:	1d1a      	adds	r2, r3, #4
 800cc68:	613a      	str	r2, [r7, #16]
 800cc6a:	681b      	ldr	r3, [r3, #0]
 800cc6c:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800cc6e:	68bb      	ldr	r3, [r7, #8]
 800cc70:	2b00      	cmp	r3, #0
 800cc72:	d101      	bne.n	800cc78 <clmt_clust+0x42>
 800cc74:	2300      	movs	r3, #0
 800cc76:	e010      	b.n	800cc9a <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 800cc78:	697a      	ldr	r2, [r7, #20]
 800cc7a:	68bb      	ldr	r3, [r7, #8]
 800cc7c:	429a      	cmp	r2, r3
 800cc7e:	d307      	bcc.n	800cc90 <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 800cc80:	697a      	ldr	r2, [r7, #20]
 800cc82:	68bb      	ldr	r3, [r7, #8]
 800cc84:	1ad3      	subs	r3, r2, r3
 800cc86:	617b      	str	r3, [r7, #20]
 800cc88:	693b      	ldr	r3, [r7, #16]
 800cc8a:	3304      	adds	r3, #4
 800cc8c:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800cc8e:	e7e9      	b.n	800cc64 <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 800cc90:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800cc92:	693b      	ldr	r3, [r7, #16]
 800cc94:	681a      	ldr	r2, [r3, #0]
 800cc96:	697b      	ldr	r3, [r7, #20]
 800cc98:	4413      	add	r3, r2
}
 800cc9a:	4618      	mov	r0, r3
 800cc9c:	371c      	adds	r7, #28
 800cc9e:	46bd      	mov	sp, r7
 800cca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cca4:	4770      	bx	lr

0800cca6 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800cca6:	b580      	push	{r7, lr}
 800cca8:	b086      	sub	sp, #24
 800ccaa:	af00      	add	r7, sp, #0
 800ccac:	6078      	str	r0, [r7, #4]
 800ccae:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800ccb0:	687b      	ldr	r3, [r7, #4]
 800ccb2:	681b      	ldr	r3, [r3, #0]
 800ccb4:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800ccb6:	683b      	ldr	r3, [r7, #0]
 800ccb8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800ccbc:	d204      	bcs.n	800ccc8 <dir_sdi+0x22>
 800ccbe:	683b      	ldr	r3, [r7, #0]
 800ccc0:	f003 031f 	and.w	r3, r3, #31
 800ccc4:	2b00      	cmp	r3, #0
 800ccc6:	d001      	beq.n	800cccc <dir_sdi+0x26>
		return FR_INT_ERR;
 800ccc8:	2302      	movs	r3, #2
 800ccca:	e071      	b.n	800cdb0 <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 800cccc:	687b      	ldr	r3, [r7, #4]
 800ccce:	683a      	ldr	r2, [r7, #0]
 800ccd0:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800ccd2:	687b      	ldr	r3, [r7, #4]
 800ccd4:	689b      	ldr	r3, [r3, #8]
 800ccd6:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800ccd8:	697b      	ldr	r3, [r7, #20]
 800ccda:	2b00      	cmp	r3, #0
 800ccdc:	d106      	bne.n	800ccec <dir_sdi+0x46>
 800ccde:	693b      	ldr	r3, [r7, #16]
 800cce0:	781b      	ldrb	r3, [r3, #0]
 800cce2:	2b02      	cmp	r3, #2
 800cce4:	d902      	bls.n	800ccec <dir_sdi+0x46>
		clst = fs->dirbase;
 800cce6:	693b      	ldr	r3, [r7, #16]
 800cce8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ccea:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800ccec:	697b      	ldr	r3, [r7, #20]
 800ccee:	2b00      	cmp	r3, #0
 800ccf0:	d10c      	bne.n	800cd0c <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800ccf2:	683b      	ldr	r3, [r7, #0]
 800ccf4:	095b      	lsrs	r3, r3, #5
 800ccf6:	693a      	ldr	r2, [r7, #16]
 800ccf8:	8912      	ldrh	r2, [r2, #8]
 800ccfa:	4293      	cmp	r3, r2
 800ccfc:	d301      	bcc.n	800cd02 <dir_sdi+0x5c>
 800ccfe:	2302      	movs	r3, #2
 800cd00:	e056      	b.n	800cdb0 <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 800cd02:	693b      	ldr	r3, [r7, #16]
 800cd04:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cd06:	687b      	ldr	r3, [r7, #4]
 800cd08:	61da      	str	r2, [r3, #28]
 800cd0a:	e02d      	b.n	800cd68 <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800cd0c:	693b      	ldr	r3, [r7, #16]
 800cd0e:	895b      	ldrh	r3, [r3, #10]
 800cd10:	461a      	mov	r2, r3
 800cd12:	693b      	ldr	r3, [r7, #16]
 800cd14:	899b      	ldrh	r3, [r3, #12]
 800cd16:	fb02 f303 	mul.w	r3, r2, r3
 800cd1a:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800cd1c:	e019      	b.n	800cd52 <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800cd1e:	687b      	ldr	r3, [r7, #4]
 800cd20:	6979      	ldr	r1, [r7, #20]
 800cd22:	4618      	mov	r0, r3
 800cd24:	f7ff fc9d 	bl	800c662 <get_fat>
 800cd28:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800cd2a:	697b      	ldr	r3, [r7, #20]
 800cd2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cd30:	d101      	bne.n	800cd36 <dir_sdi+0x90>
 800cd32:	2301      	movs	r3, #1
 800cd34:	e03c      	b.n	800cdb0 <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800cd36:	697b      	ldr	r3, [r7, #20]
 800cd38:	2b01      	cmp	r3, #1
 800cd3a:	d904      	bls.n	800cd46 <dir_sdi+0xa0>
 800cd3c:	693b      	ldr	r3, [r7, #16]
 800cd3e:	69db      	ldr	r3, [r3, #28]
 800cd40:	697a      	ldr	r2, [r7, #20]
 800cd42:	429a      	cmp	r2, r3
 800cd44:	d301      	bcc.n	800cd4a <dir_sdi+0xa4>
 800cd46:	2302      	movs	r3, #2
 800cd48:	e032      	b.n	800cdb0 <dir_sdi+0x10a>
			ofs -= csz;
 800cd4a:	683a      	ldr	r2, [r7, #0]
 800cd4c:	68fb      	ldr	r3, [r7, #12]
 800cd4e:	1ad3      	subs	r3, r2, r3
 800cd50:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800cd52:	683a      	ldr	r2, [r7, #0]
 800cd54:	68fb      	ldr	r3, [r7, #12]
 800cd56:	429a      	cmp	r2, r3
 800cd58:	d2e1      	bcs.n	800cd1e <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 800cd5a:	6979      	ldr	r1, [r7, #20]
 800cd5c:	6938      	ldr	r0, [r7, #16]
 800cd5e:	f7ff fc61 	bl	800c624 <clust2sect>
 800cd62:	4602      	mov	r2, r0
 800cd64:	687b      	ldr	r3, [r7, #4]
 800cd66:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800cd68:	687b      	ldr	r3, [r7, #4]
 800cd6a:	697a      	ldr	r2, [r7, #20]
 800cd6c:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800cd6e:	687b      	ldr	r3, [r7, #4]
 800cd70:	69db      	ldr	r3, [r3, #28]
 800cd72:	2b00      	cmp	r3, #0
 800cd74:	d101      	bne.n	800cd7a <dir_sdi+0xd4>
 800cd76:	2302      	movs	r3, #2
 800cd78:	e01a      	b.n	800cdb0 <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800cd7a:	687b      	ldr	r3, [r7, #4]
 800cd7c:	69da      	ldr	r2, [r3, #28]
 800cd7e:	693b      	ldr	r3, [r7, #16]
 800cd80:	899b      	ldrh	r3, [r3, #12]
 800cd82:	4619      	mov	r1, r3
 800cd84:	683b      	ldr	r3, [r7, #0]
 800cd86:	fbb3 f3f1 	udiv	r3, r3, r1
 800cd8a:	441a      	add	r2, r3
 800cd8c:	687b      	ldr	r3, [r7, #4]
 800cd8e:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800cd90:	693b      	ldr	r3, [r7, #16]
 800cd92:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800cd96:	693b      	ldr	r3, [r7, #16]
 800cd98:	899b      	ldrh	r3, [r3, #12]
 800cd9a:	461a      	mov	r2, r3
 800cd9c:	683b      	ldr	r3, [r7, #0]
 800cd9e:	fbb3 f0f2 	udiv	r0, r3, r2
 800cda2:	fb00 f202 	mul.w	r2, r0, r2
 800cda6:	1a9b      	subs	r3, r3, r2
 800cda8:	18ca      	adds	r2, r1, r3
 800cdaa:	687b      	ldr	r3, [r7, #4]
 800cdac:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800cdae:	2300      	movs	r3, #0
}
 800cdb0:	4618      	mov	r0, r3
 800cdb2:	3718      	adds	r7, #24
 800cdb4:	46bd      	mov	sp, r7
 800cdb6:	bd80      	pop	{r7, pc}

0800cdb8 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800cdb8:	b580      	push	{r7, lr}
 800cdba:	b086      	sub	sp, #24
 800cdbc:	af00      	add	r7, sp, #0
 800cdbe:	6078      	str	r0, [r7, #4]
 800cdc0:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800cdc2:	687b      	ldr	r3, [r7, #4]
 800cdc4:	681b      	ldr	r3, [r3, #0]
 800cdc6:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800cdc8:	687b      	ldr	r3, [r7, #4]
 800cdca:	695b      	ldr	r3, [r3, #20]
 800cdcc:	3320      	adds	r3, #32
 800cdce:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800cdd0:	687b      	ldr	r3, [r7, #4]
 800cdd2:	69db      	ldr	r3, [r3, #28]
 800cdd4:	2b00      	cmp	r3, #0
 800cdd6:	d003      	beq.n	800cde0 <dir_next+0x28>
 800cdd8:	68bb      	ldr	r3, [r7, #8]
 800cdda:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800cdde:	d301      	bcc.n	800cde4 <dir_next+0x2c>
 800cde0:	2304      	movs	r3, #4
 800cde2:	e0bb      	b.n	800cf5c <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800cde4:	68fb      	ldr	r3, [r7, #12]
 800cde6:	899b      	ldrh	r3, [r3, #12]
 800cde8:	461a      	mov	r2, r3
 800cdea:	68bb      	ldr	r3, [r7, #8]
 800cdec:	fbb3 f1f2 	udiv	r1, r3, r2
 800cdf0:	fb01 f202 	mul.w	r2, r1, r2
 800cdf4:	1a9b      	subs	r3, r3, r2
 800cdf6:	2b00      	cmp	r3, #0
 800cdf8:	f040 809d 	bne.w	800cf36 <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 800cdfc:	687b      	ldr	r3, [r7, #4]
 800cdfe:	69db      	ldr	r3, [r3, #28]
 800ce00:	1c5a      	adds	r2, r3, #1
 800ce02:	687b      	ldr	r3, [r7, #4]
 800ce04:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800ce06:	687b      	ldr	r3, [r7, #4]
 800ce08:	699b      	ldr	r3, [r3, #24]
 800ce0a:	2b00      	cmp	r3, #0
 800ce0c:	d10b      	bne.n	800ce26 <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800ce0e:	68bb      	ldr	r3, [r7, #8]
 800ce10:	095b      	lsrs	r3, r3, #5
 800ce12:	68fa      	ldr	r2, [r7, #12]
 800ce14:	8912      	ldrh	r2, [r2, #8]
 800ce16:	4293      	cmp	r3, r2
 800ce18:	f0c0 808d 	bcc.w	800cf36 <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 800ce1c:	687b      	ldr	r3, [r7, #4]
 800ce1e:	2200      	movs	r2, #0
 800ce20:	61da      	str	r2, [r3, #28]
 800ce22:	2304      	movs	r3, #4
 800ce24:	e09a      	b.n	800cf5c <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800ce26:	68fb      	ldr	r3, [r7, #12]
 800ce28:	899b      	ldrh	r3, [r3, #12]
 800ce2a:	461a      	mov	r2, r3
 800ce2c:	68bb      	ldr	r3, [r7, #8]
 800ce2e:	fbb3 f3f2 	udiv	r3, r3, r2
 800ce32:	68fa      	ldr	r2, [r7, #12]
 800ce34:	8952      	ldrh	r2, [r2, #10]
 800ce36:	3a01      	subs	r2, #1
 800ce38:	4013      	ands	r3, r2
 800ce3a:	2b00      	cmp	r3, #0
 800ce3c:	d17b      	bne.n	800cf36 <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800ce3e:	687a      	ldr	r2, [r7, #4]
 800ce40:	687b      	ldr	r3, [r7, #4]
 800ce42:	699b      	ldr	r3, [r3, #24]
 800ce44:	4619      	mov	r1, r3
 800ce46:	4610      	mov	r0, r2
 800ce48:	f7ff fc0b 	bl	800c662 <get_fat>
 800ce4c:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800ce4e:	697b      	ldr	r3, [r7, #20]
 800ce50:	2b01      	cmp	r3, #1
 800ce52:	d801      	bhi.n	800ce58 <dir_next+0xa0>
 800ce54:	2302      	movs	r3, #2
 800ce56:	e081      	b.n	800cf5c <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800ce58:	697b      	ldr	r3, [r7, #20]
 800ce5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ce5e:	d101      	bne.n	800ce64 <dir_next+0xac>
 800ce60:	2301      	movs	r3, #1
 800ce62:	e07b      	b.n	800cf5c <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800ce64:	68fb      	ldr	r3, [r7, #12]
 800ce66:	69db      	ldr	r3, [r3, #28]
 800ce68:	697a      	ldr	r2, [r7, #20]
 800ce6a:	429a      	cmp	r2, r3
 800ce6c:	d359      	bcc.n	800cf22 <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800ce6e:	683b      	ldr	r3, [r7, #0]
 800ce70:	2b00      	cmp	r3, #0
 800ce72:	d104      	bne.n	800ce7e <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 800ce74:	687b      	ldr	r3, [r7, #4]
 800ce76:	2200      	movs	r2, #0
 800ce78:	61da      	str	r2, [r3, #28]
 800ce7a:	2304      	movs	r3, #4
 800ce7c:	e06e      	b.n	800cf5c <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800ce7e:	687a      	ldr	r2, [r7, #4]
 800ce80:	687b      	ldr	r3, [r7, #4]
 800ce82:	699b      	ldr	r3, [r3, #24]
 800ce84:	4619      	mov	r1, r3
 800ce86:	4610      	mov	r0, r2
 800ce88:	f7ff fe3d 	bl	800cb06 <create_chain>
 800ce8c:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800ce8e:	697b      	ldr	r3, [r7, #20]
 800ce90:	2b00      	cmp	r3, #0
 800ce92:	d101      	bne.n	800ce98 <dir_next+0xe0>
 800ce94:	2307      	movs	r3, #7
 800ce96:	e061      	b.n	800cf5c <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800ce98:	697b      	ldr	r3, [r7, #20]
 800ce9a:	2b01      	cmp	r3, #1
 800ce9c:	d101      	bne.n	800cea2 <dir_next+0xea>
 800ce9e:	2302      	movs	r3, #2
 800cea0:	e05c      	b.n	800cf5c <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800cea2:	697b      	ldr	r3, [r7, #20]
 800cea4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cea8:	d101      	bne.n	800ceae <dir_next+0xf6>
 800ceaa:	2301      	movs	r3, #1
 800ceac:	e056      	b.n	800cf5c <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800ceae:	68f8      	ldr	r0, [r7, #12]
 800ceb0:	f7ff fad6 	bl	800c460 <sync_window>
 800ceb4:	4603      	mov	r3, r0
 800ceb6:	2b00      	cmp	r3, #0
 800ceb8:	d001      	beq.n	800cebe <dir_next+0x106>
 800ceba:	2301      	movs	r3, #1
 800cebc:	e04e      	b.n	800cf5c <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800cebe:	68fb      	ldr	r3, [r7, #12]
 800cec0:	f103 0038 	add.w	r0, r3, #56	@ 0x38
 800cec4:	68fb      	ldr	r3, [r7, #12]
 800cec6:	899b      	ldrh	r3, [r3, #12]
 800cec8:	461a      	mov	r2, r3
 800ceca:	2100      	movs	r1, #0
 800cecc:	f7ff f8fe 	bl	800c0cc <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800ced0:	2300      	movs	r3, #0
 800ced2:	613b      	str	r3, [r7, #16]
 800ced4:	6979      	ldr	r1, [r7, #20]
 800ced6:	68f8      	ldr	r0, [r7, #12]
 800ced8:	f7ff fba4 	bl	800c624 <clust2sect>
 800cedc:	4602      	mov	r2, r0
 800cede:	68fb      	ldr	r3, [r7, #12]
 800cee0:	635a      	str	r2, [r3, #52]	@ 0x34
 800cee2:	e012      	b.n	800cf0a <dir_next+0x152>
						fs->wflag = 1;
 800cee4:	68fb      	ldr	r3, [r7, #12]
 800cee6:	2201      	movs	r2, #1
 800cee8:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800ceea:	68f8      	ldr	r0, [r7, #12]
 800ceec:	f7ff fab8 	bl	800c460 <sync_window>
 800cef0:	4603      	mov	r3, r0
 800cef2:	2b00      	cmp	r3, #0
 800cef4:	d001      	beq.n	800cefa <dir_next+0x142>
 800cef6:	2301      	movs	r3, #1
 800cef8:	e030      	b.n	800cf5c <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800cefa:	693b      	ldr	r3, [r7, #16]
 800cefc:	3301      	adds	r3, #1
 800cefe:	613b      	str	r3, [r7, #16]
 800cf00:	68fb      	ldr	r3, [r7, #12]
 800cf02:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cf04:	1c5a      	adds	r2, r3, #1
 800cf06:	68fb      	ldr	r3, [r7, #12]
 800cf08:	635a      	str	r2, [r3, #52]	@ 0x34
 800cf0a:	68fb      	ldr	r3, [r7, #12]
 800cf0c:	895b      	ldrh	r3, [r3, #10]
 800cf0e:	461a      	mov	r2, r3
 800cf10:	693b      	ldr	r3, [r7, #16]
 800cf12:	4293      	cmp	r3, r2
 800cf14:	d3e6      	bcc.n	800cee4 <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 800cf16:	68fb      	ldr	r3, [r7, #12]
 800cf18:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800cf1a:	693b      	ldr	r3, [r7, #16]
 800cf1c:	1ad2      	subs	r2, r2, r3
 800cf1e:	68fb      	ldr	r3, [r7, #12]
 800cf20:	635a      	str	r2, [r3, #52]	@ 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800cf22:	687b      	ldr	r3, [r7, #4]
 800cf24:	697a      	ldr	r2, [r7, #20]
 800cf26:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800cf28:	6979      	ldr	r1, [r7, #20]
 800cf2a:	68f8      	ldr	r0, [r7, #12]
 800cf2c:	f7ff fb7a 	bl	800c624 <clust2sect>
 800cf30:	4602      	mov	r2, r0
 800cf32:	687b      	ldr	r3, [r7, #4]
 800cf34:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800cf36:	687b      	ldr	r3, [r7, #4]
 800cf38:	68ba      	ldr	r2, [r7, #8]
 800cf3a:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800cf3c:	68fb      	ldr	r3, [r7, #12]
 800cf3e:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800cf42:	68fb      	ldr	r3, [r7, #12]
 800cf44:	899b      	ldrh	r3, [r3, #12]
 800cf46:	461a      	mov	r2, r3
 800cf48:	68bb      	ldr	r3, [r7, #8]
 800cf4a:	fbb3 f0f2 	udiv	r0, r3, r2
 800cf4e:	fb00 f202 	mul.w	r2, r0, r2
 800cf52:	1a9b      	subs	r3, r3, r2
 800cf54:	18ca      	adds	r2, r1, r3
 800cf56:	687b      	ldr	r3, [r7, #4]
 800cf58:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800cf5a:	2300      	movs	r3, #0
}
 800cf5c:	4618      	mov	r0, r3
 800cf5e:	3718      	adds	r7, #24
 800cf60:	46bd      	mov	sp, r7
 800cf62:	bd80      	pop	{r7, pc}

0800cf64 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800cf64:	b580      	push	{r7, lr}
 800cf66:	b086      	sub	sp, #24
 800cf68:	af00      	add	r7, sp, #0
 800cf6a:	6078      	str	r0, [r7, #4]
 800cf6c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800cf6e:	687b      	ldr	r3, [r7, #4]
 800cf70:	681b      	ldr	r3, [r3, #0]
 800cf72:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800cf74:	2100      	movs	r1, #0
 800cf76:	6878      	ldr	r0, [r7, #4]
 800cf78:	f7ff fe95 	bl	800cca6 <dir_sdi>
 800cf7c:	4603      	mov	r3, r0
 800cf7e:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800cf80:	7dfb      	ldrb	r3, [r7, #23]
 800cf82:	2b00      	cmp	r3, #0
 800cf84:	d12b      	bne.n	800cfde <dir_alloc+0x7a>
		n = 0;
 800cf86:	2300      	movs	r3, #0
 800cf88:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800cf8a:	687b      	ldr	r3, [r7, #4]
 800cf8c:	69db      	ldr	r3, [r3, #28]
 800cf8e:	4619      	mov	r1, r3
 800cf90:	68f8      	ldr	r0, [r7, #12]
 800cf92:	f7ff faa9 	bl	800c4e8 <move_window>
 800cf96:	4603      	mov	r3, r0
 800cf98:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800cf9a:	7dfb      	ldrb	r3, [r7, #23]
 800cf9c:	2b00      	cmp	r3, #0
 800cf9e:	d11d      	bne.n	800cfdc <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800cfa0:	687b      	ldr	r3, [r7, #4]
 800cfa2:	6a1b      	ldr	r3, [r3, #32]
 800cfa4:	781b      	ldrb	r3, [r3, #0]
 800cfa6:	2be5      	cmp	r3, #229	@ 0xe5
 800cfa8:	d004      	beq.n	800cfb4 <dir_alloc+0x50>
 800cfaa:	687b      	ldr	r3, [r7, #4]
 800cfac:	6a1b      	ldr	r3, [r3, #32]
 800cfae:	781b      	ldrb	r3, [r3, #0]
 800cfb0:	2b00      	cmp	r3, #0
 800cfb2:	d107      	bne.n	800cfc4 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800cfb4:	693b      	ldr	r3, [r7, #16]
 800cfb6:	3301      	adds	r3, #1
 800cfb8:	613b      	str	r3, [r7, #16]
 800cfba:	693a      	ldr	r2, [r7, #16]
 800cfbc:	683b      	ldr	r3, [r7, #0]
 800cfbe:	429a      	cmp	r2, r3
 800cfc0:	d102      	bne.n	800cfc8 <dir_alloc+0x64>
 800cfc2:	e00c      	b.n	800cfde <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800cfc4:	2300      	movs	r3, #0
 800cfc6:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800cfc8:	2101      	movs	r1, #1
 800cfca:	6878      	ldr	r0, [r7, #4]
 800cfcc:	f7ff fef4 	bl	800cdb8 <dir_next>
 800cfd0:	4603      	mov	r3, r0
 800cfd2:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800cfd4:	7dfb      	ldrb	r3, [r7, #23]
 800cfd6:	2b00      	cmp	r3, #0
 800cfd8:	d0d7      	beq.n	800cf8a <dir_alloc+0x26>
 800cfda:	e000      	b.n	800cfde <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800cfdc:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800cfde:	7dfb      	ldrb	r3, [r7, #23]
 800cfe0:	2b04      	cmp	r3, #4
 800cfe2:	d101      	bne.n	800cfe8 <dir_alloc+0x84>
 800cfe4:	2307      	movs	r3, #7
 800cfe6:	75fb      	strb	r3, [r7, #23]
	return res;
 800cfe8:	7dfb      	ldrb	r3, [r7, #23]
}
 800cfea:	4618      	mov	r0, r3
 800cfec:	3718      	adds	r7, #24
 800cfee:	46bd      	mov	sp, r7
 800cff0:	bd80      	pop	{r7, pc}

0800cff2 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800cff2:	b580      	push	{r7, lr}
 800cff4:	b084      	sub	sp, #16
 800cff6:	af00      	add	r7, sp, #0
 800cff8:	6078      	str	r0, [r7, #4]
 800cffa:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800cffc:	683b      	ldr	r3, [r7, #0]
 800cffe:	331a      	adds	r3, #26
 800d000:	4618      	mov	r0, r3
 800d002:	f7fe ffbf 	bl	800bf84 <ld_word>
 800d006:	4603      	mov	r3, r0
 800d008:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800d00a:	687b      	ldr	r3, [r7, #4]
 800d00c:	781b      	ldrb	r3, [r3, #0]
 800d00e:	2b03      	cmp	r3, #3
 800d010:	d109      	bne.n	800d026 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800d012:	683b      	ldr	r3, [r7, #0]
 800d014:	3314      	adds	r3, #20
 800d016:	4618      	mov	r0, r3
 800d018:	f7fe ffb4 	bl	800bf84 <ld_word>
 800d01c:	4603      	mov	r3, r0
 800d01e:	041b      	lsls	r3, r3, #16
 800d020:	68fa      	ldr	r2, [r7, #12]
 800d022:	4313      	orrs	r3, r2
 800d024:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800d026:	68fb      	ldr	r3, [r7, #12]
}
 800d028:	4618      	mov	r0, r3
 800d02a:	3710      	adds	r7, #16
 800d02c:	46bd      	mov	sp, r7
 800d02e:	bd80      	pop	{r7, pc}

0800d030 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800d030:	b580      	push	{r7, lr}
 800d032:	b084      	sub	sp, #16
 800d034:	af00      	add	r7, sp, #0
 800d036:	60f8      	str	r0, [r7, #12]
 800d038:	60b9      	str	r1, [r7, #8]
 800d03a:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800d03c:	68bb      	ldr	r3, [r7, #8]
 800d03e:	331a      	adds	r3, #26
 800d040:	687a      	ldr	r2, [r7, #4]
 800d042:	b292      	uxth	r2, r2
 800d044:	4611      	mov	r1, r2
 800d046:	4618      	mov	r0, r3
 800d048:	f7fe ffd8 	bl	800bffc <st_word>
	if (fs->fs_type == FS_FAT32) {
 800d04c:	68fb      	ldr	r3, [r7, #12]
 800d04e:	781b      	ldrb	r3, [r3, #0]
 800d050:	2b03      	cmp	r3, #3
 800d052:	d109      	bne.n	800d068 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800d054:	68bb      	ldr	r3, [r7, #8]
 800d056:	f103 0214 	add.w	r2, r3, #20
 800d05a:	687b      	ldr	r3, [r7, #4]
 800d05c:	0c1b      	lsrs	r3, r3, #16
 800d05e:	b29b      	uxth	r3, r3
 800d060:	4619      	mov	r1, r3
 800d062:	4610      	mov	r0, r2
 800d064:	f7fe ffca 	bl	800bffc <st_word>
	}
}
 800d068:	bf00      	nop
 800d06a:	3710      	adds	r7, #16
 800d06c:	46bd      	mov	sp, r7
 800d06e:	bd80      	pop	{r7, pc}

0800d070 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 800d070:	b590      	push	{r4, r7, lr}
 800d072:	b087      	sub	sp, #28
 800d074:	af00      	add	r7, sp, #0
 800d076:	6078      	str	r0, [r7, #4]
 800d078:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 800d07a:	683b      	ldr	r3, [r7, #0]
 800d07c:	331a      	adds	r3, #26
 800d07e:	4618      	mov	r0, r3
 800d080:	f7fe ff80 	bl	800bf84 <ld_word>
 800d084:	4603      	mov	r3, r0
 800d086:	2b00      	cmp	r3, #0
 800d088:	d001      	beq.n	800d08e <cmp_lfn+0x1e>
 800d08a:	2300      	movs	r3, #0
 800d08c:	e059      	b.n	800d142 <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 800d08e:	683b      	ldr	r3, [r7, #0]
 800d090:	781b      	ldrb	r3, [r3, #0]
 800d092:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800d096:	1e5a      	subs	r2, r3, #1
 800d098:	4613      	mov	r3, r2
 800d09a:	005b      	lsls	r3, r3, #1
 800d09c:	4413      	add	r3, r2
 800d09e:	009b      	lsls	r3, r3, #2
 800d0a0:	4413      	add	r3, r2
 800d0a2:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800d0a4:	2301      	movs	r3, #1
 800d0a6:	81fb      	strh	r3, [r7, #14]
 800d0a8:	2300      	movs	r3, #0
 800d0aa:	613b      	str	r3, [r7, #16]
 800d0ac:	e033      	b.n	800d116 <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800d0ae:	4a27      	ldr	r2, [pc, #156]	@ (800d14c <cmp_lfn+0xdc>)
 800d0b0:	693b      	ldr	r3, [r7, #16]
 800d0b2:	4413      	add	r3, r2
 800d0b4:	781b      	ldrb	r3, [r3, #0]
 800d0b6:	461a      	mov	r2, r3
 800d0b8:	683b      	ldr	r3, [r7, #0]
 800d0ba:	4413      	add	r3, r2
 800d0bc:	4618      	mov	r0, r3
 800d0be:	f7fe ff61 	bl	800bf84 <ld_word>
 800d0c2:	4603      	mov	r3, r0
 800d0c4:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800d0c6:	89fb      	ldrh	r3, [r7, #14]
 800d0c8:	2b00      	cmp	r3, #0
 800d0ca:	d01a      	beq.n	800d102 <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 800d0cc:	697b      	ldr	r3, [r7, #20]
 800d0ce:	2bfe      	cmp	r3, #254	@ 0xfe
 800d0d0:	d812      	bhi.n	800d0f8 <cmp_lfn+0x88>
 800d0d2:	89bb      	ldrh	r3, [r7, #12]
 800d0d4:	4618      	mov	r0, r3
 800d0d6:	f002 f85f 	bl	800f198 <ff_wtoupper>
 800d0da:	4603      	mov	r3, r0
 800d0dc:	461c      	mov	r4, r3
 800d0de:	697b      	ldr	r3, [r7, #20]
 800d0e0:	1c5a      	adds	r2, r3, #1
 800d0e2:	617a      	str	r2, [r7, #20]
 800d0e4:	005b      	lsls	r3, r3, #1
 800d0e6:	687a      	ldr	r2, [r7, #4]
 800d0e8:	4413      	add	r3, r2
 800d0ea:	881b      	ldrh	r3, [r3, #0]
 800d0ec:	4618      	mov	r0, r3
 800d0ee:	f002 f853 	bl	800f198 <ff_wtoupper>
 800d0f2:	4603      	mov	r3, r0
 800d0f4:	429c      	cmp	r4, r3
 800d0f6:	d001      	beq.n	800d0fc <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 800d0f8:	2300      	movs	r3, #0
 800d0fa:	e022      	b.n	800d142 <cmp_lfn+0xd2>
			}
			wc = uc;
 800d0fc:	89bb      	ldrh	r3, [r7, #12]
 800d0fe:	81fb      	strh	r3, [r7, #14]
 800d100:	e006      	b.n	800d110 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800d102:	89bb      	ldrh	r3, [r7, #12]
 800d104:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800d108:	4293      	cmp	r3, r2
 800d10a:	d001      	beq.n	800d110 <cmp_lfn+0xa0>
 800d10c:	2300      	movs	r3, #0
 800d10e:	e018      	b.n	800d142 <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800d110:	693b      	ldr	r3, [r7, #16]
 800d112:	3301      	adds	r3, #1
 800d114:	613b      	str	r3, [r7, #16]
 800d116:	693b      	ldr	r3, [r7, #16]
 800d118:	2b0c      	cmp	r3, #12
 800d11a:	d9c8      	bls.n	800d0ae <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 800d11c:	683b      	ldr	r3, [r7, #0]
 800d11e:	781b      	ldrb	r3, [r3, #0]
 800d120:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d124:	2b00      	cmp	r3, #0
 800d126:	d00b      	beq.n	800d140 <cmp_lfn+0xd0>
 800d128:	89fb      	ldrh	r3, [r7, #14]
 800d12a:	2b00      	cmp	r3, #0
 800d12c:	d008      	beq.n	800d140 <cmp_lfn+0xd0>
 800d12e:	697b      	ldr	r3, [r7, #20]
 800d130:	005b      	lsls	r3, r3, #1
 800d132:	687a      	ldr	r2, [r7, #4]
 800d134:	4413      	add	r3, r2
 800d136:	881b      	ldrh	r3, [r3, #0]
 800d138:	2b00      	cmp	r3, #0
 800d13a:	d001      	beq.n	800d140 <cmp_lfn+0xd0>
 800d13c:	2300      	movs	r3, #0
 800d13e:	e000      	b.n	800d142 <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 800d140:	2301      	movs	r3, #1
}
 800d142:	4618      	mov	r0, r3
 800d144:	371c      	adds	r7, #28
 800d146:	46bd      	mov	sp, r7
 800d148:	bd90      	pop	{r4, r7, pc}
 800d14a:	bf00      	nop
 800d14c:	080154c4 	.word	0x080154c4

0800d150 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 800d150:	b580      	push	{r7, lr}
 800d152:	b088      	sub	sp, #32
 800d154:	af00      	add	r7, sp, #0
 800d156:	60f8      	str	r0, [r7, #12]
 800d158:	60b9      	str	r1, [r7, #8]
 800d15a:	4611      	mov	r1, r2
 800d15c:	461a      	mov	r2, r3
 800d15e:	460b      	mov	r3, r1
 800d160:	71fb      	strb	r3, [r7, #7]
 800d162:	4613      	mov	r3, r2
 800d164:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 800d166:	68bb      	ldr	r3, [r7, #8]
 800d168:	330d      	adds	r3, #13
 800d16a:	79ba      	ldrb	r2, [r7, #6]
 800d16c:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 800d16e:	68bb      	ldr	r3, [r7, #8]
 800d170:	330b      	adds	r3, #11
 800d172:	220f      	movs	r2, #15
 800d174:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 800d176:	68bb      	ldr	r3, [r7, #8]
 800d178:	330c      	adds	r3, #12
 800d17a:	2200      	movs	r2, #0
 800d17c:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 800d17e:	68bb      	ldr	r3, [r7, #8]
 800d180:	331a      	adds	r3, #26
 800d182:	2100      	movs	r1, #0
 800d184:	4618      	mov	r0, r3
 800d186:	f7fe ff39 	bl	800bffc <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 800d18a:	79fb      	ldrb	r3, [r7, #7]
 800d18c:	1e5a      	subs	r2, r3, #1
 800d18e:	4613      	mov	r3, r2
 800d190:	005b      	lsls	r3, r3, #1
 800d192:	4413      	add	r3, r2
 800d194:	009b      	lsls	r3, r3, #2
 800d196:	4413      	add	r3, r2
 800d198:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 800d19a:	2300      	movs	r3, #0
 800d19c:	82fb      	strh	r3, [r7, #22]
 800d19e:	2300      	movs	r3, #0
 800d1a0:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800d1a2:	8afb      	ldrh	r3, [r7, #22]
 800d1a4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800d1a8:	4293      	cmp	r3, r2
 800d1aa:	d007      	beq.n	800d1bc <put_lfn+0x6c>
 800d1ac:	69fb      	ldr	r3, [r7, #28]
 800d1ae:	1c5a      	adds	r2, r3, #1
 800d1b0:	61fa      	str	r2, [r7, #28]
 800d1b2:	005b      	lsls	r3, r3, #1
 800d1b4:	68fa      	ldr	r2, [r7, #12]
 800d1b6:	4413      	add	r3, r2
 800d1b8:	881b      	ldrh	r3, [r3, #0]
 800d1ba:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 800d1bc:	4a17      	ldr	r2, [pc, #92]	@ (800d21c <put_lfn+0xcc>)
 800d1be:	69bb      	ldr	r3, [r7, #24]
 800d1c0:	4413      	add	r3, r2
 800d1c2:	781b      	ldrb	r3, [r3, #0]
 800d1c4:	461a      	mov	r2, r3
 800d1c6:	68bb      	ldr	r3, [r7, #8]
 800d1c8:	4413      	add	r3, r2
 800d1ca:	8afa      	ldrh	r2, [r7, #22]
 800d1cc:	4611      	mov	r1, r2
 800d1ce:	4618      	mov	r0, r3
 800d1d0:	f7fe ff14 	bl	800bffc <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 800d1d4:	8afb      	ldrh	r3, [r7, #22]
 800d1d6:	2b00      	cmp	r3, #0
 800d1d8:	d102      	bne.n	800d1e0 <put_lfn+0x90>
 800d1da:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800d1de:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 800d1e0:	69bb      	ldr	r3, [r7, #24]
 800d1e2:	3301      	adds	r3, #1
 800d1e4:	61bb      	str	r3, [r7, #24]
 800d1e6:	69bb      	ldr	r3, [r7, #24]
 800d1e8:	2b0c      	cmp	r3, #12
 800d1ea:	d9da      	bls.n	800d1a2 <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 800d1ec:	8afb      	ldrh	r3, [r7, #22]
 800d1ee:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800d1f2:	4293      	cmp	r3, r2
 800d1f4:	d006      	beq.n	800d204 <put_lfn+0xb4>
 800d1f6:	69fb      	ldr	r3, [r7, #28]
 800d1f8:	005b      	lsls	r3, r3, #1
 800d1fa:	68fa      	ldr	r2, [r7, #12]
 800d1fc:	4413      	add	r3, r2
 800d1fe:	881b      	ldrh	r3, [r3, #0]
 800d200:	2b00      	cmp	r3, #0
 800d202:	d103      	bne.n	800d20c <put_lfn+0xbc>
 800d204:	79fb      	ldrb	r3, [r7, #7]
 800d206:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d20a:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 800d20c:	68bb      	ldr	r3, [r7, #8]
 800d20e:	79fa      	ldrb	r2, [r7, #7]
 800d210:	701a      	strb	r2, [r3, #0]
}
 800d212:	bf00      	nop
 800d214:	3720      	adds	r7, #32
 800d216:	46bd      	mov	sp, r7
 800d218:	bd80      	pop	{r7, pc}
 800d21a:	bf00      	nop
 800d21c:	080154c4 	.word	0x080154c4

0800d220 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 800d220:	b580      	push	{r7, lr}
 800d222:	b08c      	sub	sp, #48	@ 0x30
 800d224:	af00      	add	r7, sp, #0
 800d226:	60f8      	str	r0, [r7, #12]
 800d228:	60b9      	str	r1, [r7, #8]
 800d22a:	607a      	str	r2, [r7, #4]
 800d22c:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 800d22e:	220b      	movs	r2, #11
 800d230:	68b9      	ldr	r1, [r7, #8]
 800d232:	68f8      	ldr	r0, [r7, #12]
 800d234:	f7fe ff29 	bl	800c08a <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 800d238:	683b      	ldr	r3, [r7, #0]
 800d23a:	2b05      	cmp	r3, #5
 800d23c:	d92b      	bls.n	800d296 <gen_numname+0x76>
		sr = seq;
 800d23e:	683b      	ldr	r3, [r7, #0]
 800d240:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 800d242:	e022      	b.n	800d28a <gen_numname+0x6a>
			wc = *lfn++;
 800d244:	687b      	ldr	r3, [r7, #4]
 800d246:	1c9a      	adds	r2, r3, #2
 800d248:	607a      	str	r2, [r7, #4]
 800d24a:	881b      	ldrh	r3, [r3, #0]
 800d24c:	847b      	strh	r3, [r7, #34]	@ 0x22
			for (i = 0; i < 16; i++) {
 800d24e:	2300      	movs	r3, #0
 800d250:	62bb      	str	r3, [r7, #40]	@ 0x28
 800d252:	e017      	b.n	800d284 <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 800d254:	69fb      	ldr	r3, [r7, #28]
 800d256:	005a      	lsls	r2, r3, #1
 800d258:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800d25a:	f003 0301 	and.w	r3, r3, #1
 800d25e:	4413      	add	r3, r2
 800d260:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 800d262:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800d264:	085b      	lsrs	r3, r3, #1
 800d266:	847b      	strh	r3, [r7, #34]	@ 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 800d268:	69fb      	ldr	r3, [r7, #28]
 800d26a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800d26e:	2b00      	cmp	r3, #0
 800d270:	d005      	beq.n	800d27e <gen_numname+0x5e>
 800d272:	69fb      	ldr	r3, [r7, #28]
 800d274:	f483 3388 	eor.w	r3, r3, #69632	@ 0x11000
 800d278:	f083 0321 	eor.w	r3, r3, #33	@ 0x21
 800d27c:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 800d27e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d280:	3301      	adds	r3, #1
 800d282:	62bb      	str	r3, [r7, #40]	@ 0x28
 800d284:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d286:	2b0f      	cmp	r3, #15
 800d288:	d9e4      	bls.n	800d254 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 800d28a:	687b      	ldr	r3, [r7, #4]
 800d28c:	881b      	ldrh	r3, [r3, #0]
 800d28e:	2b00      	cmp	r3, #0
 800d290:	d1d8      	bne.n	800d244 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 800d292:	69fb      	ldr	r3, [r7, #28]
 800d294:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 800d296:	2307      	movs	r3, #7
 800d298:	62bb      	str	r3, [r7, #40]	@ 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 800d29a:	683b      	ldr	r3, [r7, #0]
 800d29c:	b2db      	uxtb	r3, r3
 800d29e:	f003 030f 	and.w	r3, r3, #15
 800d2a2:	b2db      	uxtb	r3, r3
 800d2a4:	3330      	adds	r3, #48	@ 0x30
 800d2a6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (c > '9') c += 7;
 800d2aa:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800d2ae:	2b39      	cmp	r3, #57	@ 0x39
 800d2b0:	d904      	bls.n	800d2bc <gen_numname+0x9c>
 800d2b2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800d2b6:	3307      	adds	r3, #7
 800d2b8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		ns[i--] = c;
 800d2bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d2be:	1e5a      	subs	r2, r3, #1
 800d2c0:	62ba      	str	r2, [r7, #40]	@ 0x28
 800d2c2:	3330      	adds	r3, #48	@ 0x30
 800d2c4:	443b      	add	r3, r7
 800d2c6:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 800d2ca:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 800d2ce:	683b      	ldr	r3, [r7, #0]
 800d2d0:	091b      	lsrs	r3, r3, #4
 800d2d2:	603b      	str	r3, [r7, #0]
	} while (seq);
 800d2d4:	683b      	ldr	r3, [r7, #0]
 800d2d6:	2b00      	cmp	r3, #0
 800d2d8:	d1df      	bne.n	800d29a <gen_numname+0x7a>
	ns[i] = '~';
 800d2da:	f107 0214 	add.w	r2, r7, #20
 800d2de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d2e0:	4413      	add	r3, r2
 800d2e2:	227e      	movs	r2, #126	@ 0x7e
 800d2e4:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 800d2e6:	2300      	movs	r3, #0
 800d2e8:	627b      	str	r3, [r7, #36]	@ 0x24
 800d2ea:	e002      	b.n	800d2f2 <gen_numname+0xd2>
 800d2ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d2ee:	3301      	adds	r3, #1
 800d2f0:	627b      	str	r3, [r7, #36]	@ 0x24
 800d2f2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d2f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d2f6:	429a      	cmp	r2, r3
 800d2f8:	d205      	bcs.n	800d306 <gen_numname+0xe6>
 800d2fa:	68fa      	ldr	r2, [r7, #12]
 800d2fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d2fe:	4413      	add	r3, r2
 800d300:	781b      	ldrb	r3, [r3, #0]
 800d302:	2b20      	cmp	r3, #32
 800d304:	d1f2      	bne.n	800d2ec <gen_numname+0xcc>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800d306:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d308:	2b07      	cmp	r3, #7
 800d30a:	d807      	bhi.n	800d31c <gen_numname+0xfc>
 800d30c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d30e:	1c5a      	adds	r2, r3, #1
 800d310:	62ba      	str	r2, [r7, #40]	@ 0x28
 800d312:	3330      	adds	r3, #48	@ 0x30
 800d314:	443b      	add	r3, r7
 800d316:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 800d31a:	e000      	b.n	800d31e <gen_numname+0xfe>
 800d31c:	2120      	movs	r1, #32
 800d31e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d320:	1c5a      	adds	r2, r3, #1
 800d322:	627a      	str	r2, [r7, #36]	@ 0x24
 800d324:	68fa      	ldr	r2, [r7, #12]
 800d326:	4413      	add	r3, r2
 800d328:	460a      	mov	r2, r1
 800d32a:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 800d32c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d32e:	2b07      	cmp	r3, #7
 800d330:	d9e9      	bls.n	800d306 <gen_numname+0xe6>
}
 800d332:	bf00      	nop
 800d334:	bf00      	nop
 800d336:	3730      	adds	r7, #48	@ 0x30
 800d338:	46bd      	mov	sp, r7
 800d33a:	bd80      	pop	{r7, pc}

0800d33c <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 800d33c:	b480      	push	{r7}
 800d33e:	b085      	sub	sp, #20
 800d340:	af00      	add	r7, sp, #0
 800d342:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 800d344:	2300      	movs	r3, #0
 800d346:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 800d348:	230b      	movs	r3, #11
 800d34a:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 800d34c:	7bfb      	ldrb	r3, [r7, #15]
 800d34e:	b2da      	uxtb	r2, r3
 800d350:	0852      	lsrs	r2, r2, #1
 800d352:	01db      	lsls	r3, r3, #7
 800d354:	4313      	orrs	r3, r2
 800d356:	b2da      	uxtb	r2, r3
 800d358:	687b      	ldr	r3, [r7, #4]
 800d35a:	1c59      	adds	r1, r3, #1
 800d35c:	6079      	str	r1, [r7, #4]
 800d35e:	781b      	ldrb	r3, [r3, #0]
 800d360:	4413      	add	r3, r2
 800d362:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 800d364:	68bb      	ldr	r3, [r7, #8]
 800d366:	3b01      	subs	r3, #1
 800d368:	60bb      	str	r3, [r7, #8]
 800d36a:	68bb      	ldr	r3, [r7, #8]
 800d36c:	2b00      	cmp	r3, #0
 800d36e:	d1ed      	bne.n	800d34c <sum_sfn+0x10>
	return sum;
 800d370:	7bfb      	ldrb	r3, [r7, #15]
}
 800d372:	4618      	mov	r0, r3
 800d374:	3714      	adds	r7, #20
 800d376:	46bd      	mov	sp, r7
 800d378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d37c:	4770      	bx	lr

0800d37e <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800d37e:	b580      	push	{r7, lr}
 800d380:	b086      	sub	sp, #24
 800d382:	af00      	add	r7, sp, #0
 800d384:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800d386:	687b      	ldr	r3, [r7, #4]
 800d388:	681b      	ldr	r3, [r3, #0]
 800d38a:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800d38c:	2100      	movs	r1, #0
 800d38e:	6878      	ldr	r0, [r7, #4]
 800d390:	f7ff fc89 	bl	800cca6 <dir_sdi>
 800d394:	4603      	mov	r3, r0
 800d396:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800d398:	7dfb      	ldrb	r3, [r7, #23]
 800d39a:	2b00      	cmp	r3, #0
 800d39c:	d001      	beq.n	800d3a2 <dir_find+0x24>
 800d39e:	7dfb      	ldrb	r3, [r7, #23]
 800d3a0:	e0a9      	b.n	800d4f6 <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800d3a2:	23ff      	movs	r3, #255	@ 0xff
 800d3a4:	753b      	strb	r3, [r7, #20]
 800d3a6:	7d3b      	ldrb	r3, [r7, #20]
 800d3a8:	757b      	strb	r3, [r7, #21]
 800d3aa:	687b      	ldr	r3, [r7, #4]
 800d3ac:	f04f 32ff 	mov.w	r2, #4294967295
 800d3b0:	631a      	str	r2, [r3, #48]	@ 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 800d3b2:	687b      	ldr	r3, [r7, #4]
 800d3b4:	69db      	ldr	r3, [r3, #28]
 800d3b6:	4619      	mov	r1, r3
 800d3b8:	6938      	ldr	r0, [r7, #16]
 800d3ba:	f7ff f895 	bl	800c4e8 <move_window>
 800d3be:	4603      	mov	r3, r0
 800d3c0:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800d3c2:	7dfb      	ldrb	r3, [r7, #23]
 800d3c4:	2b00      	cmp	r3, #0
 800d3c6:	f040 8090 	bne.w	800d4ea <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 800d3ca:	687b      	ldr	r3, [r7, #4]
 800d3cc:	6a1b      	ldr	r3, [r3, #32]
 800d3ce:	781b      	ldrb	r3, [r3, #0]
 800d3d0:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800d3d2:	7dbb      	ldrb	r3, [r7, #22]
 800d3d4:	2b00      	cmp	r3, #0
 800d3d6:	d102      	bne.n	800d3de <dir_find+0x60>
 800d3d8:	2304      	movs	r3, #4
 800d3da:	75fb      	strb	r3, [r7, #23]
 800d3dc:	e08a      	b.n	800d4f4 <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 800d3de:	687b      	ldr	r3, [r7, #4]
 800d3e0:	6a1b      	ldr	r3, [r3, #32]
 800d3e2:	330b      	adds	r3, #11
 800d3e4:	781b      	ldrb	r3, [r3, #0]
 800d3e6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800d3ea:	73fb      	strb	r3, [r7, #15]
 800d3ec:	687b      	ldr	r3, [r7, #4]
 800d3ee:	7bfa      	ldrb	r2, [r7, #15]
 800d3f0:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 800d3f2:	7dbb      	ldrb	r3, [r7, #22]
 800d3f4:	2be5      	cmp	r3, #229	@ 0xe5
 800d3f6:	d007      	beq.n	800d408 <dir_find+0x8a>
 800d3f8:	7bfb      	ldrb	r3, [r7, #15]
 800d3fa:	f003 0308 	and.w	r3, r3, #8
 800d3fe:	2b00      	cmp	r3, #0
 800d400:	d009      	beq.n	800d416 <dir_find+0x98>
 800d402:	7bfb      	ldrb	r3, [r7, #15]
 800d404:	2b0f      	cmp	r3, #15
 800d406:	d006      	beq.n	800d416 <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800d408:	23ff      	movs	r3, #255	@ 0xff
 800d40a:	757b      	strb	r3, [r7, #21]
 800d40c:	687b      	ldr	r3, [r7, #4]
 800d40e:	f04f 32ff 	mov.w	r2, #4294967295
 800d412:	631a      	str	r2, [r3, #48]	@ 0x30
 800d414:	e05e      	b.n	800d4d4 <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 800d416:	7bfb      	ldrb	r3, [r7, #15]
 800d418:	2b0f      	cmp	r3, #15
 800d41a:	d136      	bne.n	800d48a <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 800d41c:	687b      	ldr	r3, [r7, #4]
 800d41e:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800d422:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d426:	2b00      	cmp	r3, #0
 800d428:	d154      	bne.n	800d4d4 <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 800d42a:	7dbb      	ldrb	r3, [r7, #22]
 800d42c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d430:	2b00      	cmp	r3, #0
 800d432:	d00d      	beq.n	800d450 <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 800d434:	687b      	ldr	r3, [r7, #4]
 800d436:	6a1b      	ldr	r3, [r3, #32]
 800d438:	7b5b      	ldrb	r3, [r3, #13]
 800d43a:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 800d43c:	7dbb      	ldrb	r3, [r7, #22]
 800d43e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800d442:	75bb      	strb	r3, [r7, #22]
 800d444:	7dbb      	ldrb	r3, [r7, #22]
 800d446:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 800d448:	687b      	ldr	r3, [r7, #4]
 800d44a:	695a      	ldr	r2, [r3, #20]
 800d44c:	687b      	ldr	r3, [r7, #4]
 800d44e:	631a      	str	r2, [r3, #48]	@ 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800d450:	7dba      	ldrb	r2, [r7, #22]
 800d452:	7d7b      	ldrb	r3, [r7, #21]
 800d454:	429a      	cmp	r2, r3
 800d456:	d115      	bne.n	800d484 <dir_find+0x106>
 800d458:	687b      	ldr	r3, [r7, #4]
 800d45a:	6a1b      	ldr	r3, [r3, #32]
 800d45c:	330d      	adds	r3, #13
 800d45e:	781b      	ldrb	r3, [r3, #0]
 800d460:	7d3a      	ldrb	r2, [r7, #20]
 800d462:	429a      	cmp	r2, r3
 800d464:	d10e      	bne.n	800d484 <dir_find+0x106>
 800d466:	693b      	ldr	r3, [r7, #16]
 800d468:	691a      	ldr	r2, [r3, #16]
 800d46a:	687b      	ldr	r3, [r7, #4]
 800d46c:	6a1b      	ldr	r3, [r3, #32]
 800d46e:	4619      	mov	r1, r3
 800d470:	4610      	mov	r0, r2
 800d472:	f7ff fdfd 	bl	800d070 <cmp_lfn>
 800d476:	4603      	mov	r3, r0
 800d478:	2b00      	cmp	r3, #0
 800d47a:	d003      	beq.n	800d484 <dir_find+0x106>
 800d47c:	7d7b      	ldrb	r3, [r7, #21]
 800d47e:	3b01      	subs	r3, #1
 800d480:	b2db      	uxtb	r3, r3
 800d482:	e000      	b.n	800d486 <dir_find+0x108>
 800d484:	23ff      	movs	r3, #255	@ 0xff
 800d486:	757b      	strb	r3, [r7, #21]
 800d488:	e024      	b.n	800d4d4 <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800d48a:	7d7b      	ldrb	r3, [r7, #21]
 800d48c:	2b00      	cmp	r3, #0
 800d48e:	d109      	bne.n	800d4a4 <dir_find+0x126>
 800d490:	687b      	ldr	r3, [r7, #4]
 800d492:	6a1b      	ldr	r3, [r3, #32]
 800d494:	4618      	mov	r0, r3
 800d496:	f7ff ff51 	bl	800d33c <sum_sfn>
 800d49a:	4603      	mov	r3, r0
 800d49c:	461a      	mov	r2, r3
 800d49e:	7d3b      	ldrb	r3, [r7, #20]
 800d4a0:	4293      	cmp	r3, r2
 800d4a2:	d024      	beq.n	800d4ee <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800d4a4:	687b      	ldr	r3, [r7, #4]
 800d4a6:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800d4aa:	f003 0301 	and.w	r3, r3, #1
 800d4ae:	2b00      	cmp	r3, #0
 800d4b0:	d10a      	bne.n	800d4c8 <dir_find+0x14a>
 800d4b2:	687b      	ldr	r3, [r7, #4]
 800d4b4:	6a18      	ldr	r0, [r3, #32]
 800d4b6:	687b      	ldr	r3, [r7, #4]
 800d4b8:	3324      	adds	r3, #36	@ 0x24
 800d4ba:	220b      	movs	r2, #11
 800d4bc:	4619      	mov	r1, r3
 800d4be:	f7fe fe20 	bl	800c102 <mem_cmp>
 800d4c2:	4603      	mov	r3, r0
 800d4c4:	2b00      	cmp	r3, #0
 800d4c6:	d014      	beq.n	800d4f2 <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800d4c8:	23ff      	movs	r3, #255	@ 0xff
 800d4ca:	757b      	strb	r3, [r7, #21]
 800d4cc:	687b      	ldr	r3, [r7, #4]
 800d4ce:	f04f 32ff 	mov.w	r2, #4294967295
 800d4d2:	631a      	str	r2, [r3, #48]	@ 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800d4d4:	2100      	movs	r1, #0
 800d4d6:	6878      	ldr	r0, [r7, #4]
 800d4d8:	f7ff fc6e 	bl	800cdb8 <dir_next>
 800d4dc:	4603      	mov	r3, r0
 800d4de:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800d4e0:	7dfb      	ldrb	r3, [r7, #23]
 800d4e2:	2b00      	cmp	r3, #0
 800d4e4:	f43f af65 	beq.w	800d3b2 <dir_find+0x34>
 800d4e8:	e004      	b.n	800d4f4 <dir_find+0x176>
		if (res != FR_OK) break;
 800d4ea:	bf00      	nop
 800d4ec:	e002      	b.n	800d4f4 <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800d4ee:	bf00      	nop
 800d4f0:	e000      	b.n	800d4f4 <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800d4f2:	bf00      	nop

	return res;
 800d4f4:	7dfb      	ldrb	r3, [r7, #23]
}
 800d4f6:	4618      	mov	r0, r3
 800d4f8:	3718      	adds	r7, #24
 800d4fa:	46bd      	mov	sp, r7
 800d4fc:	bd80      	pop	{r7, pc}
	...

0800d500 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800d500:	b580      	push	{r7, lr}
 800d502:	b08c      	sub	sp, #48	@ 0x30
 800d504:	af00      	add	r7, sp, #0
 800d506:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800d508:	687b      	ldr	r3, [r7, #4]
 800d50a:	681b      	ldr	r3, [r3, #0]
 800d50c:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 800d50e:	687b      	ldr	r3, [r7, #4]
 800d510:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800d514:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 800d518:	2b00      	cmp	r3, #0
 800d51a:	d001      	beq.n	800d520 <dir_register+0x20>
 800d51c:	2306      	movs	r3, #6
 800d51e:	e0e0      	b.n	800d6e2 <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 800d520:	2300      	movs	r3, #0
 800d522:	627b      	str	r3, [r7, #36]	@ 0x24
 800d524:	e002      	b.n	800d52c <dir_register+0x2c>
 800d526:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d528:	3301      	adds	r3, #1
 800d52a:	627b      	str	r3, [r7, #36]	@ 0x24
 800d52c:	69fb      	ldr	r3, [r7, #28]
 800d52e:	691a      	ldr	r2, [r3, #16]
 800d530:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d532:	005b      	lsls	r3, r3, #1
 800d534:	4413      	add	r3, r2
 800d536:	881b      	ldrh	r3, [r3, #0]
 800d538:	2b00      	cmp	r3, #0
 800d53a:	d1f4      	bne.n	800d526 <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 800d53c:	687b      	ldr	r3, [r7, #4]
 800d53e:	f103 0124 	add.w	r1, r3, #36	@ 0x24
 800d542:	f107 030c 	add.w	r3, r7, #12
 800d546:	220c      	movs	r2, #12
 800d548:	4618      	mov	r0, r3
 800d54a:	f7fe fd9e 	bl	800c08a <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 800d54e:	7dfb      	ldrb	r3, [r7, #23]
 800d550:	f003 0301 	and.w	r3, r3, #1
 800d554:	2b00      	cmp	r3, #0
 800d556:	d032      	beq.n	800d5be <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 800d558:	687b      	ldr	r3, [r7, #4]
 800d55a:	2240      	movs	r2, #64	@ 0x40
 800d55c:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		for (n = 1; n < 100; n++) {
 800d560:	2301      	movs	r3, #1
 800d562:	62bb      	str	r3, [r7, #40]	@ 0x28
 800d564:	e016      	b.n	800d594 <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 800d566:	687b      	ldr	r3, [r7, #4]
 800d568:	f103 0024 	add.w	r0, r3, #36	@ 0x24
 800d56c:	69fb      	ldr	r3, [r7, #28]
 800d56e:	691a      	ldr	r2, [r3, #16]
 800d570:	f107 010c 	add.w	r1, r7, #12
 800d574:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d576:	f7ff fe53 	bl	800d220 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 800d57a:	6878      	ldr	r0, [r7, #4]
 800d57c:	f7ff feff 	bl	800d37e <dir_find>
 800d580:	4603      	mov	r3, r0
 800d582:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			if (res != FR_OK) break;
 800d586:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800d58a:	2b00      	cmp	r3, #0
 800d58c:	d106      	bne.n	800d59c <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 800d58e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d590:	3301      	adds	r3, #1
 800d592:	62bb      	str	r3, [r7, #40]	@ 0x28
 800d594:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d596:	2b63      	cmp	r3, #99	@ 0x63
 800d598:	d9e5      	bls.n	800d566 <dir_register+0x66>
 800d59a:	e000      	b.n	800d59e <dir_register+0x9e>
			if (res != FR_OK) break;
 800d59c:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 800d59e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d5a0:	2b64      	cmp	r3, #100	@ 0x64
 800d5a2:	d101      	bne.n	800d5a8 <dir_register+0xa8>
 800d5a4:	2307      	movs	r3, #7
 800d5a6:	e09c      	b.n	800d6e2 <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 800d5a8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800d5ac:	2b04      	cmp	r3, #4
 800d5ae:	d002      	beq.n	800d5b6 <dir_register+0xb6>
 800d5b0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800d5b4:	e095      	b.n	800d6e2 <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 800d5b6:	7dfa      	ldrb	r2, [r7, #23]
 800d5b8:	687b      	ldr	r3, [r7, #4]
 800d5ba:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 800d5be:	7dfb      	ldrb	r3, [r7, #23]
 800d5c0:	f003 0302 	and.w	r3, r3, #2
 800d5c4:	2b00      	cmp	r3, #0
 800d5c6:	d007      	beq.n	800d5d8 <dir_register+0xd8>
 800d5c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d5ca:	330c      	adds	r3, #12
 800d5cc:	4a47      	ldr	r2, [pc, #284]	@ (800d6ec <dir_register+0x1ec>)
 800d5ce:	fba2 2303 	umull	r2, r3, r2, r3
 800d5d2:	089b      	lsrs	r3, r3, #2
 800d5d4:	3301      	adds	r3, #1
 800d5d6:	e000      	b.n	800d5da <dir_register+0xda>
 800d5d8:	2301      	movs	r3, #1
 800d5da:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 800d5dc:	6a39      	ldr	r1, [r7, #32]
 800d5de:	6878      	ldr	r0, [r7, #4]
 800d5e0:	f7ff fcc0 	bl	800cf64 <dir_alloc>
 800d5e4:	4603      	mov	r3, r0
 800d5e6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 800d5ea:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800d5ee:	2b00      	cmp	r3, #0
 800d5f0:	d148      	bne.n	800d684 <dir_register+0x184>
 800d5f2:	6a3b      	ldr	r3, [r7, #32]
 800d5f4:	3b01      	subs	r3, #1
 800d5f6:	623b      	str	r3, [r7, #32]
 800d5f8:	6a3b      	ldr	r3, [r7, #32]
 800d5fa:	2b00      	cmp	r3, #0
 800d5fc:	d042      	beq.n	800d684 <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 800d5fe:	687b      	ldr	r3, [r7, #4]
 800d600:	695a      	ldr	r2, [r3, #20]
 800d602:	6a3b      	ldr	r3, [r7, #32]
 800d604:	015b      	lsls	r3, r3, #5
 800d606:	1ad3      	subs	r3, r2, r3
 800d608:	4619      	mov	r1, r3
 800d60a:	6878      	ldr	r0, [r7, #4]
 800d60c:	f7ff fb4b 	bl	800cca6 <dir_sdi>
 800d610:	4603      	mov	r3, r0
 800d612:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (res == FR_OK) {
 800d616:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800d61a:	2b00      	cmp	r3, #0
 800d61c:	d132      	bne.n	800d684 <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 800d61e:	687b      	ldr	r3, [r7, #4]
 800d620:	3324      	adds	r3, #36	@ 0x24
 800d622:	4618      	mov	r0, r3
 800d624:	f7ff fe8a 	bl	800d33c <sum_sfn>
 800d628:	4603      	mov	r3, r0
 800d62a:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 800d62c:	687b      	ldr	r3, [r7, #4]
 800d62e:	69db      	ldr	r3, [r3, #28]
 800d630:	4619      	mov	r1, r3
 800d632:	69f8      	ldr	r0, [r7, #28]
 800d634:	f7fe ff58 	bl	800c4e8 <move_window>
 800d638:	4603      	mov	r3, r0
 800d63a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
				if (res != FR_OK) break;
 800d63e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800d642:	2b00      	cmp	r3, #0
 800d644:	d11d      	bne.n	800d682 <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 800d646:	69fb      	ldr	r3, [r7, #28]
 800d648:	6918      	ldr	r0, [r3, #16]
 800d64a:	687b      	ldr	r3, [r7, #4]
 800d64c:	6a19      	ldr	r1, [r3, #32]
 800d64e:	6a3b      	ldr	r3, [r7, #32]
 800d650:	b2da      	uxtb	r2, r3
 800d652:	7efb      	ldrb	r3, [r7, #27]
 800d654:	f7ff fd7c 	bl	800d150 <put_lfn>
				fs->wflag = 1;
 800d658:	69fb      	ldr	r3, [r7, #28]
 800d65a:	2201      	movs	r2, #1
 800d65c:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 800d65e:	2100      	movs	r1, #0
 800d660:	6878      	ldr	r0, [r7, #4]
 800d662:	f7ff fba9 	bl	800cdb8 <dir_next>
 800d666:	4603      	mov	r3, r0
 800d668:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			} while (res == FR_OK && --nent);
 800d66c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800d670:	2b00      	cmp	r3, #0
 800d672:	d107      	bne.n	800d684 <dir_register+0x184>
 800d674:	6a3b      	ldr	r3, [r7, #32]
 800d676:	3b01      	subs	r3, #1
 800d678:	623b      	str	r3, [r7, #32]
 800d67a:	6a3b      	ldr	r3, [r7, #32]
 800d67c:	2b00      	cmp	r3, #0
 800d67e:	d1d5      	bne.n	800d62c <dir_register+0x12c>
 800d680:	e000      	b.n	800d684 <dir_register+0x184>
				if (res != FR_OK) break;
 800d682:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800d684:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800d688:	2b00      	cmp	r3, #0
 800d68a:	d128      	bne.n	800d6de <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 800d68c:	687b      	ldr	r3, [r7, #4]
 800d68e:	69db      	ldr	r3, [r3, #28]
 800d690:	4619      	mov	r1, r3
 800d692:	69f8      	ldr	r0, [r7, #28]
 800d694:	f7fe ff28 	bl	800c4e8 <move_window>
 800d698:	4603      	mov	r3, r0
 800d69a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (res == FR_OK) {
 800d69e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800d6a2:	2b00      	cmp	r3, #0
 800d6a4:	d11b      	bne.n	800d6de <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800d6a6:	687b      	ldr	r3, [r7, #4]
 800d6a8:	6a1b      	ldr	r3, [r3, #32]
 800d6aa:	2220      	movs	r2, #32
 800d6ac:	2100      	movs	r1, #0
 800d6ae:	4618      	mov	r0, r3
 800d6b0:	f7fe fd0c 	bl	800c0cc <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800d6b4:	687b      	ldr	r3, [r7, #4]
 800d6b6:	6a18      	ldr	r0, [r3, #32]
 800d6b8:	687b      	ldr	r3, [r7, #4]
 800d6ba:	3324      	adds	r3, #36	@ 0x24
 800d6bc:	220b      	movs	r2, #11
 800d6be:	4619      	mov	r1, r3
 800d6c0:	f7fe fce3 	bl	800c08a <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 800d6c4:	687b      	ldr	r3, [r7, #4]
 800d6c6:	f893 202f 	ldrb.w	r2, [r3, #47]	@ 0x2f
 800d6ca:	687b      	ldr	r3, [r7, #4]
 800d6cc:	6a1b      	ldr	r3, [r3, #32]
 800d6ce:	330c      	adds	r3, #12
 800d6d0:	f002 0218 	and.w	r2, r2, #24
 800d6d4:	b2d2      	uxtb	r2, r2
 800d6d6:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 800d6d8:	69fb      	ldr	r3, [r7, #28]
 800d6da:	2201      	movs	r2, #1
 800d6dc:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800d6de:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800d6e2:	4618      	mov	r0, r3
 800d6e4:	3730      	adds	r7, #48	@ 0x30
 800d6e6:	46bd      	mov	sp, r7
 800d6e8:	bd80      	pop	{r7, pc}
 800d6ea:	bf00      	nop
 800d6ec:	4ec4ec4f 	.word	0x4ec4ec4f

0800d6f0 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800d6f0:	b580      	push	{r7, lr}
 800d6f2:	b08a      	sub	sp, #40	@ 0x28
 800d6f4:	af00      	add	r7, sp, #0
 800d6f6:	6078      	str	r0, [r7, #4]
 800d6f8:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 800d6fa:	683b      	ldr	r3, [r7, #0]
 800d6fc:	681b      	ldr	r3, [r3, #0]
 800d6fe:	613b      	str	r3, [r7, #16]
 800d700:	687b      	ldr	r3, [r7, #4]
 800d702:	681b      	ldr	r3, [r3, #0]
 800d704:	691b      	ldr	r3, [r3, #16]
 800d706:	60fb      	str	r3, [r7, #12]
 800d708:	2300      	movs	r3, #0
 800d70a:	617b      	str	r3, [r7, #20]
 800d70c:	697b      	ldr	r3, [r7, #20]
 800d70e:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 800d710:	69bb      	ldr	r3, [r7, #24]
 800d712:	1c5a      	adds	r2, r3, #1
 800d714:	61ba      	str	r2, [r7, #24]
 800d716:	693a      	ldr	r2, [r7, #16]
 800d718:	4413      	add	r3, r2
 800d71a:	781b      	ldrb	r3, [r3, #0]
 800d71c:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 800d71e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800d720:	2b1f      	cmp	r3, #31
 800d722:	d940      	bls.n	800d7a6 <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 800d724:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800d726:	2b2f      	cmp	r3, #47	@ 0x2f
 800d728:	d006      	beq.n	800d738 <create_name+0x48>
 800d72a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800d72c:	2b5c      	cmp	r3, #92	@ 0x5c
 800d72e:	d110      	bne.n	800d752 <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800d730:	e002      	b.n	800d738 <create_name+0x48>
 800d732:	69bb      	ldr	r3, [r7, #24]
 800d734:	3301      	adds	r3, #1
 800d736:	61bb      	str	r3, [r7, #24]
 800d738:	693a      	ldr	r2, [r7, #16]
 800d73a:	69bb      	ldr	r3, [r7, #24]
 800d73c:	4413      	add	r3, r2
 800d73e:	781b      	ldrb	r3, [r3, #0]
 800d740:	2b2f      	cmp	r3, #47	@ 0x2f
 800d742:	d0f6      	beq.n	800d732 <create_name+0x42>
 800d744:	693a      	ldr	r2, [r7, #16]
 800d746:	69bb      	ldr	r3, [r7, #24]
 800d748:	4413      	add	r3, r2
 800d74a:	781b      	ldrb	r3, [r3, #0]
 800d74c:	2b5c      	cmp	r3, #92	@ 0x5c
 800d74e:	d0f0      	beq.n	800d732 <create_name+0x42>
			break;
 800d750:	e02a      	b.n	800d7a8 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 800d752:	697b      	ldr	r3, [r7, #20]
 800d754:	2bfe      	cmp	r3, #254	@ 0xfe
 800d756:	d901      	bls.n	800d75c <create_name+0x6c>
 800d758:	2306      	movs	r3, #6
 800d75a:	e17d      	b.n	800da58 <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 800d75c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800d75e:	b2db      	uxtb	r3, r3
 800d760:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 800d762:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800d764:	2101      	movs	r1, #1
 800d766:	4618      	mov	r0, r3
 800d768:	f001 fcda 	bl	800f120 <ff_convert>
 800d76c:	4603      	mov	r3, r0
 800d76e:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 800d770:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800d772:	2b00      	cmp	r3, #0
 800d774:	d101      	bne.n	800d77a <create_name+0x8a>
 800d776:	2306      	movs	r3, #6
 800d778:	e16e      	b.n	800da58 <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 800d77a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800d77c:	2b7f      	cmp	r3, #127	@ 0x7f
 800d77e:	d809      	bhi.n	800d794 <create_name+0xa4>
 800d780:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800d782:	4619      	mov	r1, r3
 800d784:	488d      	ldr	r0, [pc, #564]	@ (800d9bc <create_name+0x2cc>)
 800d786:	f7fe fce3 	bl	800c150 <chk_chr>
 800d78a:	4603      	mov	r3, r0
 800d78c:	2b00      	cmp	r3, #0
 800d78e:	d001      	beq.n	800d794 <create_name+0xa4>
 800d790:	2306      	movs	r3, #6
 800d792:	e161      	b.n	800da58 <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 800d794:	697b      	ldr	r3, [r7, #20]
 800d796:	1c5a      	adds	r2, r3, #1
 800d798:	617a      	str	r2, [r7, #20]
 800d79a:	005b      	lsls	r3, r3, #1
 800d79c:	68fa      	ldr	r2, [r7, #12]
 800d79e:	4413      	add	r3, r2
 800d7a0:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800d7a2:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 800d7a4:	e7b4      	b.n	800d710 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 800d7a6:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 800d7a8:	693a      	ldr	r2, [r7, #16]
 800d7aa:	69bb      	ldr	r3, [r7, #24]
 800d7ac:	441a      	add	r2, r3
 800d7ae:	683b      	ldr	r3, [r7, #0]
 800d7b0:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800d7b2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800d7b4:	2b1f      	cmp	r3, #31
 800d7b6:	d801      	bhi.n	800d7bc <create_name+0xcc>
 800d7b8:	2304      	movs	r3, #4
 800d7ba:	e000      	b.n	800d7be <create_name+0xce>
 800d7bc:	2300      	movs	r3, #0
 800d7be:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800d7c2:	e011      	b.n	800d7e8 <create_name+0xf8>
		w = lfn[di - 1];
 800d7c4:	697b      	ldr	r3, [r7, #20]
 800d7c6:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 800d7ca:	3b01      	subs	r3, #1
 800d7cc:	005b      	lsls	r3, r3, #1
 800d7ce:	68fa      	ldr	r2, [r7, #12]
 800d7d0:	4413      	add	r3, r2
 800d7d2:	881b      	ldrh	r3, [r3, #0]
 800d7d4:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w != ' ' && w != '.') break;
 800d7d6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800d7d8:	2b20      	cmp	r3, #32
 800d7da:	d002      	beq.n	800d7e2 <create_name+0xf2>
 800d7dc:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800d7de:	2b2e      	cmp	r3, #46	@ 0x2e
 800d7e0:	d106      	bne.n	800d7f0 <create_name+0x100>
		di--;
 800d7e2:	697b      	ldr	r3, [r7, #20]
 800d7e4:	3b01      	subs	r3, #1
 800d7e6:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800d7e8:	697b      	ldr	r3, [r7, #20]
 800d7ea:	2b00      	cmp	r3, #0
 800d7ec:	d1ea      	bne.n	800d7c4 <create_name+0xd4>
 800d7ee:	e000      	b.n	800d7f2 <create_name+0x102>
		if (w != ' ' && w != '.') break;
 800d7f0:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 800d7f2:	697b      	ldr	r3, [r7, #20]
 800d7f4:	005b      	lsls	r3, r3, #1
 800d7f6:	68fa      	ldr	r2, [r7, #12]
 800d7f8:	4413      	add	r3, r2
 800d7fa:	2200      	movs	r2, #0
 800d7fc:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 800d7fe:	697b      	ldr	r3, [r7, #20]
 800d800:	2b00      	cmp	r3, #0
 800d802:	d101      	bne.n	800d808 <create_name+0x118>
 800d804:	2306      	movs	r3, #6
 800d806:	e127      	b.n	800da58 <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 800d808:	687b      	ldr	r3, [r7, #4]
 800d80a:	3324      	adds	r3, #36	@ 0x24
 800d80c:	220b      	movs	r2, #11
 800d80e:	2120      	movs	r1, #32
 800d810:	4618      	mov	r0, r3
 800d812:	f7fe fc5b 	bl	800c0cc <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 800d816:	2300      	movs	r3, #0
 800d818:	61bb      	str	r3, [r7, #24]
 800d81a:	e002      	b.n	800d822 <create_name+0x132>
 800d81c:	69bb      	ldr	r3, [r7, #24]
 800d81e:	3301      	adds	r3, #1
 800d820:	61bb      	str	r3, [r7, #24]
 800d822:	69bb      	ldr	r3, [r7, #24]
 800d824:	005b      	lsls	r3, r3, #1
 800d826:	68fa      	ldr	r2, [r7, #12]
 800d828:	4413      	add	r3, r2
 800d82a:	881b      	ldrh	r3, [r3, #0]
 800d82c:	2b20      	cmp	r3, #32
 800d82e:	d0f5      	beq.n	800d81c <create_name+0x12c>
 800d830:	69bb      	ldr	r3, [r7, #24]
 800d832:	005b      	lsls	r3, r3, #1
 800d834:	68fa      	ldr	r2, [r7, #12]
 800d836:	4413      	add	r3, r2
 800d838:	881b      	ldrh	r3, [r3, #0]
 800d83a:	2b2e      	cmp	r3, #46	@ 0x2e
 800d83c:	d0ee      	beq.n	800d81c <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 800d83e:	69bb      	ldr	r3, [r7, #24]
 800d840:	2b00      	cmp	r3, #0
 800d842:	d009      	beq.n	800d858 <create_name+0x168>
 800d844:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800d848:	f043 0303 	orr.w	r3, r3, #3
 800d84c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 800d850:	e002      	b.n	800d858 <create_name+0x168>
 800d852:	697b      	ldr	r3, [r7, #20]
 800d854:	3b01      	subs	r3, #1
 800d856:	617b      	str	r3, [r7, #20]
 800d858:	697b      	ldr	r3, [r7, #20]
 800d85a:	2b00      	cmp	r3, #0
 800d85c:	d009      	beq.n	800d872 <create_name+0x182>
 800d85e:	697b      	ldr	r3, [r7, #20]
 800d860:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 800d864:	3b01      	subs	r3, #1
 800d866:	005b      	lsls	r3, r3, #1
 800d868:	68fa      	ldr	r2, [r7, #12]
 800d86a:	4413      	add	r3, r2
 800d86c:	881b      	ldrh	r3, [r3, #0]
 800d86e:	2b2e      	cmp	r3, #46	@ 0x2e
 800d870:	d1ef      	bne.n	800d852 <create_name+0x162>

	i = b = 0; ni = 8;
 800d872:	2300      	movs	r3, #0
 800d874:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800d878:	2300      	movs	r3, #0
 800d87a:	623b      	str	r3, [r7, #32]
 800d87c:	2308      	movs	r3, #8
 800d87e:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 800d880:	69bb      	ldr	r3, [r7, #24]
 800d882:	1c5a      	adds	r2, r3, #1
 800d884:	61ba      	str	r2, [r7, #24]
 800d886:	005b      	lsls	r3, r3, #1
 800d888:	68fa      	ldr	r2, [r7, #12]
 800d88a:	4413      	add	r3, r2
 800d88c:	881b      	ldrh	r3, [r3, #0]
 800d88e:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) break;					/* Break on end of the LFN */
 800d890:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800d892:	2b00      	cmp	r3, #0
 800d894:	f000 8090 	beq.w	800d9b8 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 800d898:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800d89a:	2b20      	cmp	r3, #32
 800d89c:	d006      	beq.n	800d8ac <create_name+0x1bc>
 800d89e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800d8a0:	2b2e      	cmp	r3, #46	@ 0x2e
 800d8a2:	d10a      	bne.n	800d8ba <create_name+0x1ca>
 800d8a4:	69ba      	ldr	r2, [r7, #24]
 800d8a6:	697b      	ldr	r3, [r7, #20]
 800d8a8:	429a      	cmp	r2, r3
 800d8aa:	d006      	beq.n	800d8ba <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 800d8ac:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800d8b0:	f043 0303 	orr.w	r3, r3, #3
 800d8b4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800d8b8:	e07d      	b.n	800d9b6 <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 800d8ba:	6a3a      	ldr	r2, [r7, #32]
 800d8bc:	69fb      	ldr	r3, [r7, #28]
 800d8be:	429a      	cmp	r2, r3
 800d8c0:	d203      	bcs.n	800d8ca <create_name+0x1da>
 800d8c2:	69ba      	ldr	r2, [r7, #24]
 800d8c4:	697b      	ldr	r3, [r7, #20]
 800d8c6:	429a      	cmp	r2, r3
 800d8c8:	d123      	bne.n	800d912 <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 800d8ca:	69fb      	ldr	r3, [r7, #28]
 800d8cc:	2b0b      	cmp	r3, #11
 800d8ce:	d106      	bne.n	800d8de <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 800d8d0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800d8d4:	f043 0303 	orr.w	r3, r3, #3
 800d8d8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800d8dc:	e075      	b.n	800d9ca <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 800d8de:	69ba      	ldr	r2, [r7, #24]
 800d8e0:	697b      	ldr	r3, [r7, #20]
 800d8e2:	429a      	cmp	r2, r3
 800d8e4:	d005      	beq.n	800d8f2 <create_name+0x202>
 800d8e6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800d8ea:	f043 0303 	orr.w	r3, r3, #3
 800d8ee:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (si > di) break;			/* No extension */
 800d8f2:	69ba      	ldr	r2, [r7, #24]
 800d8f4:	697b      	ldr	r3, [r7, #20]
 800d8f6:	429a      	cmp	r2, r3
 800d8f8:	d866      	bhi.n	800d9c8 <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 800d8fa:	697b      	ldr	r3, [r7, #20]
 800d8fc:	61bb      	str	r3, [r7, #24]
 800d8fe:	2308      	movs	r3, #8
 800d900:	623b      	str	r3, [r7, #32]
 800d902:	230b      	movs	r3, #11
 800d904:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 800d906:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800d90a:	009b      	lsls	r3, r3, #2
 800d90c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800d910:	e051      	b.n	800d9b6 <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 800d912:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800d914:	2b7f      	cmp	r3, #127	@ 0x7f
 800d916:	d914      	bls.n	800d942 <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 800d918:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800d91a:	2100      	movs	r1, #0
 800d91c:	4618      	mov	r0, r3
 800d91e:	f001 fbff 	bl	800f120 <ff_convert>
 800d922:	4603      	mov	r3, r0
 800d924:	84bb      	strh	r3, [r7, #36]	@ 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 800d926:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800d928:	2b00      	cmp	r3, #0
 800d92a:	d004      	beq.n	800d936 <create_name+0x246>
 800d92c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800d92e:	3b80      	subs	r3, #128	@ 0x80
 800d930:	4a23      	ldr	r2, [pc, #140]	@ (800d9c0 <create_name+0x2d0>)
 800d932:	5cd3      	ldrb	r3, [r2, r3]
 800d934:	84bb      	strh	r3, [r7, #36]	@ 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 800d936:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800d93a:	f043 0302 	orr.w	r3, r3, #2
 800d93e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 800d942:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800d944:	2b00      	cmp	r3, #0
 800d946:	d007      	beq.n	800d958 <create_name+0x268>
 800d948:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800d94a:	4619      	mov	r1, r3
 800d94c:	481d      	ldr	r0, [pc, #116]	@ (800d9c4 <create_name+0x2d4>)
 800d94e:	f7fe fbff 	bl	800c150 <chk_chr>
 800d952:	4603      	mov	r3, r0
 800d954:	2b00      	cmp	r3, #0
 800d956:	d008      	beq.n	800d96a <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 800d958:	235f      	movs	r3, #95	@ 0x5f
 800d95a:	84bb      	strh	r3, [r7, #36]	@ 0x24
 800d95c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800d960:	f043 0303 	orr.w	r3, r3, #3
 800d964:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800d968:	e01b      	b.n	800d9a2 <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 800d96a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800d96c:	2b40      	cmp	r3, #64	@ 0x40
 800d96e:	d909      	bls.n	800d984 <create_name+0x294>
 800d970:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800d972:	2b5a      	cmp	r3, #90	@ 0x5a
 800d974:	d806      	bhi.n	800d984 <create_name+0x294>
					b |= 2;
 800d976:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800d97a:	f043 0302 	orr.w	r3, r3, #2
 800d97e:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800d982:	e00e      	b.n	800d9a2 <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 800d984:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800d986:	2b60      	cmp	r3, #96	@ 0x60
 800d988:	d90b      	bls.n	800d9a2 <create_name+0x2b2>
 800d98a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800d98c:	2b7a      	cmp	r3, #122	@ 0x7a
 800d98e:	d808      	bhi.n	800d9a2 <create_name+0x2b2>
						b |= 1; w -= 0x20;
 800d990:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800d994:	f043 0301 	orr.w	r3, r3, #1
 800d998:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800d99c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800d99e:	3b20      	subs	r3, #32
 800d9a0:	84bb      	strh	r3, [r7, #36]	@ 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 800d9a2:	6a3b      	ldr	r3, [r7, #32]
 800d9a4:	1c5a      	adds	r2, r3, #1
 800d9a6:	623a      	str	r2, [r7, #32]
 800d9a8:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800d9aa:	b2d1      	uxtb	r1, r2
 800d9ac:	687a      	ldr	r2, [r7, #4]
 800d9ae:	4413      	add	r3, r2
 800d9b0:	460a      	mov	r2, r1
 800d9b2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
		w = lfn[si++];					/* Get an LFN character */
 800d9b6:	e763      	b.n	800d880 <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 800d9b8:	bf00      	nop
 800d9ba:	e006      	b.n	800d9ca <create_name+0x2da>
 800d9bc:	08013f14 	.word	0x08013f14
 800d9c0:	08015444 	.word	0x08015444
 800d9c4:	08013f20 	.word	0x08013f20
			if (si > di) break;			/* No extension */
 800d9c8:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800d9ca:	687b      	ldr	r3, [r7, #4]
 800d9cc:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800d9d0:	2be5      	cmp	r3, #229	@ 0xe5
 800d9d2:	d103      	bne.n	800d9dc <create_name+0x2ec>
 800d9d4:	687b      	ldr	r3, [r7, #4]
 800d9d6:	2205      	movs	r2, #5
 800d9d8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

	if (ni == 8) b <<= 2;
 800d9dc:	69fb      	ldr	r3, [r7, #28]
 800d9de:	2b08      	cmp	r3, #8
 800d9e0:	d104      	bne.n	800d9ec <create_name+0x2fc>
 800d9e2:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800d9e6:	009b      	lsls	r3, r3, #2
 800d9e8:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 800d9ec:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800d9f0:	f003 030c 	and.w	r3, r3, #12
 800d9f4:	2b0c      	cmp	r3, #12
 800d9f6:	d005      	beq.n	800da04 <create_name+0x314>
 800d9f8:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800d9fc:	f003 0303 	and.w	r3, r3, #3
 800da00:	2b03      	cmp	r3, #3
 800da02:	d105      	bne.n	800da10 <create_name+0x320>
 800da04:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800da08:	f043 0302 	orr.w	r3, r3, #2
 800da0c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 800da10:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800da14:	f003 0302 	and.w	r3, r3, #2
 800da18:	2b00      	cmp	r3, #0
 800da1a:	d117      	bne.n	800da4c <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 800da1c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800da20:	f003 0303 	and.w	r3, r3, #3
 800da24:	2b01      	cmp	r3, #1
 800da26:	d105      	bne.n	800da34 <create_name+0x344>
 800da28:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800da2c:	f043 0310 	orr.w	r3, r3, #16
 800da30:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 800da34:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800da38:	f003 030c 	and.w	r3, r3, #12
 800da3c:	2b04      	cmp	r3, #4
 800da3e:	d105      	bne.n	800da4c <create_name+0x35c>
 800da40:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800da44:	f043 0308 	orr.w	r3, r3, #8
 800da48:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 800da4c:	687b      	ldr	r3, [r7, #4]
 800da4e:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800da52:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f

	return FR_OK;
 800da56:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 800da58:	4618      	mov	r0, r3
 800da5a:	3728      	adds	r7, #40	@ 0x28
 800da5c:	46bd      	mov	sp, r7
 800da5e:	bd80      	pop	{r7, pc}

0800da60 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800da60:	b580      	push	{r7, lr}
 800da62:	b086      	sub	sp, #24
 800da64:	af00      	add	r7, sp, #0
 800da66:	6078      	str	r0, [r7, #4]
 800da68:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800da6a:	687b      	ldr	r3, [r7, #4]
 800da6c:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800da6e:	693b      	ldr	r3, [r7, #16]
 800da70:	681b      	ldr	r3, [r3, #0]
 800da72:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800da74:	e002      	b.n	800da7c <follow_path+0x1c>
 800da76:	683b      	ldr	r3, [r7, #0]
 800da78:	3301      	adds	r3, #1
 800da7a:	603b      	str	r3, [r7, #0]
 800da7c:	683b      	ldr	r3, [r7, #0]
 800da7e:	781b      	ldrb	r3, [r3, #0]
 800da80:	2b2f      	cmp	r3, #47	@ 0x2f
 800da82:	d0f8      	beq.n	800da76 <follow_path+0x16>
 800da84:	683b      	ldr	r3, [r7, #0]
 800da86:	781b      	ldrb	r3, [r3, #0]
 800da88:	2b5c      	cmp	r3, #92	@ 0x5c
 800da8a:	d0f4      	beq.n	800da76 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800da8c:	693b      	ldr	r3, [r7, #16]
 800da8e:	2200      	movs	r2, #0
 800da90:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800da92:	683b      	ldr	r3, [r7, #0]
 800da94:	781b      	ldrb	r3, [r3, #0]
 800da96:	2b1f      	cmp	r3, #31
 800da98:	d80a      	bhi.n	800dab0 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800da9a:	687b      	ldr	r3, [r7, #4]
 800da9c:	2280      	movs	r2, #128	@ 0x80
 800da9e:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 800daa2:	2100      	movs	r1, #0
 800daa4:	6878      	ldr	r0, [r7, #4]
 800daa6:	f7ff f8fe 	bl	800cca6 <dir_sdi>
 800daaa:	4603      	mov	r3, r0
 800daac:	75fb      	strb	r3, [r7, #23]
 800daae:	e048      	b.n	800db42 <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800dab0:	463b      	mov	r3, r7
 800dab2:	4619      	mov	r1, r3
 800dab4:	6878      	ldr	r0, [r7, #4]
 800dab6:	f7ff fe1b 	bl	800d6f0 <create_name>
 800daba:	4603      	mov	r3, r0
 800dabc:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800dabe:	7dfb      	ldrb	r3, [r7, #23]
 800dac0:	2b00      	cmp	r3, #0
 800dac2:	d139      	bne.n	800db38 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 800dac4:	6878      	ldr	r0, [r7, #4]
 800dac6:	f7ff fc5a 	bl	800d37e <dir_find>
 800daca:	4603      	mov	r3, r0
 800dacc:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800dace:	687b      	ldr	r3, [r7, #4]
 800dad0:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800dad4:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800dad6:	7dfb      	ldrb	r3, [r7, #23]
 800dad8:	2b00      	cmp	r3, #0
 800dada:	d00a      	beq.n	800daf2 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800dadc:	7dfb      	ldrb	r3, [r7, #23]
 800dade:	2b04      	cmp	r3, #4
 800dae0:	d12c      	bne.n	800db3c <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800dae2:	7afb      	ldrb	r3, [r7, #11]
 800dae4:	f003 0304 	and.w	r3, r3, #4
 800dae8:	2b00      	cmp	r3, #0
 800daea:	d127      	bne.n	800db3c <follow_path+0xdc>
 800daec:	2305      	movs	r3, #5
 800daee:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800daf0:	e024      	b.n	800db3c <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800daf2:	7afb      	ldrb	r3, [r7, #11]
 800daf4:	f003 0304 	and.w	r3, r3, #4
 800daf8:	2b00      	cmp	r3, #0
 800dafa:	d121      	bne.n	800db40 <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800dafc:	693b      	ldr	r3, [r7, #16]
 800dafe:	799b      	ldrb	r3, [r3, #6]
 800db00:	f003 0310 	and.w	r3, r3, #16
 800db04:	2b00      	cmp	r3, #0
 800db06:	d102      	bne.n	800db0e <follow_path+0xae>
				res = FR_NO_PATH; break;
 800db08:	2305      	movs	r3, #5
 800db0a:	75fb      	strb	r3, [r7, #23]
 800db0c:	e019      	b.n	800db42 <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800db0e:	68fb      	ldr	r3, [r7, #12]
 800db10:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800db14:	687b      	ldr	r3, [r7, #4]
 800db16:	695b      	ldr	r3, [r3, #20]
 800db18:	68fa      	ldr	r2, [r7, #12]
 800db1a:	8992      	ldrh	r2, [r2, #12]
 800db1c:	fbb3 f0f2 	udiv	r0, r3, r2
 800db20:	fb00 f202 	mul.w	r2, r0, r2
 800db24:	1a9b      	subs	r3, r3, r2
 800db26:	440b      	add	r3, r1
 800db28:	4619      	mov	r1, r3
 800db2a:	68f8      	ldr	r0, [r7, #12]
 800db2c:	f7ff fa61 	bl	800cff2 <ld_clust>
 800db30:	4602      	mov	r2, r0
 800db32:	693b      	ldr	r3, [r7, #16]
 800db34:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800db36:	e7bb      	b.n	800dab0 <follow_path+0x50>
			if (res != FR_OK) break;
 800db38:	bf00      	nop
 800db3a:	e002      	b.n	800db42 <follow_path+0xe2>
				break;
 800db3c:	bf00      	nop
 800db3e:	e000      	b.n	800db42 <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800db40:	bf00      	nop
			}
		}
	}

	return res;
 800db42:	7dfb      	ldrb	r3, [r7, #23]
}
 800db44:	4618      	mov	r0, r3
 800db46:	3718      	adds	r7, #24
 800db48:	46bd      	mov	sp, r7
 800db4a:	bd80      	pop	{r7, pc}

0800db4c <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800db4c:	b480      	push	{r7}
 800db4e:	b087      	sub	sp, #28
 800db50:	af00      	add	r7, sp, #0
 800db52:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800db54:	f04f 33ff 	mov.w	r3, #4294967295
 800db58:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800db5a:	687b      	ldr	r3, [r7, #4]
 800db5c:	681b      	ldr	r3, [r3, #0]
 800db5e:	2b00      	cmp	r3, #0
 800db60:	d031      	beq.n	800dbc6 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800db62:	687b      	ldr	r3, [r7, #4]
 800db64:	681b      	ldr	r3, [r3, #0]
 800db66:	617b      	str	r3, [r7, #20]
 800db68:	e002      	b.n	800db70 <get_ldnumber+0x24>
 800db6a:	697b      	ldr	r3, [r7, #20]
 800db6c:	3301      	adds	r3, #1
 800db6e:	617b      	str	r3, [r7, #20]
 800db70:	697b      	ldr	r3, [r7, #20]
 800db72:	781b      	ldrb	r3, [r3, #0]
 800db74:	2b1f      	cmp	r3, #31
 800db76:	d903      	bls.n	800db80 <get_ldnumber+0x34>
 800db78:	697b      	ldr	r3, [r7, #20]
 800db7a:	781b      	ldrb	r3, [r3, #0]
 800db7c:	2b3a      	cmp	r3, #58	@ 0x3a
 800db7e:	d1f4      	bne.n	800db6a <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800db80:	697b      	ldr	r3, [r7, #20]
 800db82:	781b      	ldrb	r3, [r3, #0]
 800db84:	2b3a      	cmp	r3, #58	@ 0x3a
 800db86:	d11c      	bne.n	800dbc2 <get_ldnumber+0x76>
			tp = *path;
 800db88:	687b      	ldr	r3, [r7, #4]
 800db8a:	681b      	ldr	r3, [r3, #0]
 800db8c:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800db8e:	68fb      	ldr	r3, [r7, #12]
 800db90:	1c5a      	adds	r2, r3, #1
 800db92:	60fa      	str	r2, [r7, #12]
 800db94:	781b      	ldrb	r3, [r3, #0]
 800db96:	3b30      	subs	r3, #48	@ 0x30
 800db98:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800db9a:	68bb      	ldr	r3, [r7, #8]
 800db9c:	2b09      	cmp	r3, #9
 800db9e:	d80e      	bhi.n	800dbbe <get_ldnumber+0x72>
 800dba0:	68fa      	ldr	r2, [r7, #12]
 800dba2:	697b      	ldr	r3, [r7, #20]
 800dba4:	429a      	cmp	r2, r3
 800dba6:	d10a      	bne.n	800dbbe <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800dba8:	68bb      	ldr	r3, [r7, #8]
 800dbaa:	2b00      	cmp	r3, #0
 800dbac:	d107      	bne.n	800dbbe <get_ldnumber+0x72>
					vol = (int)i;
 800dbae:	68bb      	ldr	r3, [r7, #8]
 800dbb0:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800dbb2:	697b      	ldr	r3, [r7, #20]
 800dbb4:	3301      	adds	r3, #1
 800dbb6:	617b      	str	r3, [r7, #20]
 800dbb8:	687b      	ldr	r3, [r7, #4]
 800dbba:	697a      	ldr	r2, [r7, #20]
 800dbbc:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800dbbe:	693b      	ldr	r3, [r7, #16]
 800dbc0:	e002      	b.n	800dbc8 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800dbc2:	2300      	movs	r3, #0
 800dbc4:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800dbc6:	693b      	ldr	r3, [r7, #16]
}
 800dbc8:	4618      	mov	r0, r3
 800dbca:	371c      	adds	r7, #28
 800dbcc:	46bd      	mov	sp, r7
 800dbce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbd2:	4770      	bx	lr

0800dbd4 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800dbd4:	b580      	push	{r7, lr}
 800dbd6:	b082      	sub	sp, #8
 800dbd8:	af00      	add	r7, sp, #0
 800dbda:	6078      	str	r0, [r7, #4]
 800dbdc:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800dbde:	687b      	ldr	r3, [r7, #4]
 800dbe0:	2200      	movs	r2, #0
 800dbe2:	70da      	strb	r2, [r3, #3]
 800dbe4:	687b      	ldr	r3, [r7, #4]
 800dbe6:	f04f 32ff 	mov.w	r2, #4294967295
 800dbea:	635a      	str	r2, [r3, #52]	@ 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800dbec:	6839      	ldr	r1, [r7, #0]
 800dbee:	6878      	ldr	r0, [r7, #4]
 800dbf0:	f7fe fc7a 	bl	800c4e8 <move_window>
 800dbf4:	4603      	mov	r3, r0
 800dbf6:	2b00      	cmp	r3, #0
 800dbf8:	d001      	beq.n	800dbfe <check_fs+0x2a>
 800dbfa:	2304      	movs	r3, #4
 800dbfc:	e038      	b.n	800dc70 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800dbfe:	687b      	ldr	r3, [r7, #4]
 800dc00:	3338      	adds	r3, #56	@ 0x38
 800dc02:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800dc06:	4618      	mov	r0, r3
 800dc08:	f7fe f9bc 	bl	800bf84 <ld_word>
 800dc0c:	4603      	mov	r3, r0
 800dc0e:	461a      	mov	r2, r3
 800dc10:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800dc14:	429a      	cmp	r2, r3
 800dc16:	d001      	beq.n	800dc1c <check_fs+0x48>
 800dc18:	2303      	movs	r3, #3
 800dc1a:	e029      	b.n	800dc70 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800dc1c:	687b      	ldr	r3, [r7, #4]
 800dc1e:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800dc22:	2be9      	cmp	r3, #233	@ 0xe9
 800dc24:	d009      	beq.n	800dc3a <check_fs+0x66>
 800dc26:	687b      	ldr	r3, [r7, #4]
 800dc28:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800dc2c:	2beb      	cmp	r3, #235	@ 0xeb
 800dc2e:	d11e      	bne.n	800dc6e <check_fs+0x9a>
 800dc30:	687b      	ldr	r3, [r7, #4]
 800dc32:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 800dc36:	2b90      	cmp	r3, #144	@ 0x90
 800dc38:	d119      	bne.n	800dc6e <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800dc3a:	687b      	ldr	r3, [r7, #4]
 800dc3c:	3338      	adds	r3, #56	@ 0x38
 800dc3e:	3336      	adds	r3, #54	@ 0x36
 800dc40:	4618      	mov	r0, r3
 800dc42:	f7fe f9b8 	bl	800bfb6 <ld_dword>
 800dc46:	4603      	mov	r3, r0
 800dc48:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800dc4c:	4a0a      	ldr	r2, [pc, #40]	@ (800dc78 <check_fs+0xa4>)
 800dc4e:	4293      	cmp	r3, r2
 800dc50:	d101      	bne.n	800dc56 <check_fs+0x82>
 800dc52:	2300      	movs	r3, #0
 800dc54:	e00c      	b.n	800dc70 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800dc56:	687b      	ldr	r3, [r7, #4]
 800dc58:	3338      	adds	r3, #56	@ 0x38
 800dc5a:	3352      	adds	r3, #82	@ 0x52
 800dc5c:	4618      	mov	r0, r3
 800dc5e:	f7fe f9aa 	bl	800bfb6 <ld_dword>
 800dc62:	4603      	mov	r3, r0
 800dc64:	4a05      	ldr	r2, [pc, #20]	@ (800dc7c <check_fs+0xa8>)
 800dc66:	4293      	cmp	r3, r2
 800dc68:	d101      	bne.n	800dc6e <check_fs+0x9a>
 800dc6a:	2300      	movs	r3, #0
 800dc6c:	e000      	b.n	800dc70 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800dc6e:	2302      	movs	r3, #2
}
 800dc70:	4618      	mov	r0, r3
 800dc72:	3708      	adds	r7, #8
 800dc74:	46bd      	mov	sp, r7
 800dc76:	bd80      	pop	{r7, pc}
 800dc78:	00544146 	.word	0x00544146
 800dc7c:	33544146 	.word	0x33544146

0800dc80 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800dc80:	b580      	push	{r7, lr}
 800dc82:	b096      	sub	sp, #88	@ 0x58
 800dc84:	af00      	add	r7, sp, #0
 800dc86:	60f8      	str	r0, [r7, #12]
 800dc88:	60b9      	str	r1, [r7, #8]
 800dc8a:	4613      	mov	r3, r2
 800dc8c:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800dc8e:	68bb      	ldr	r3, [r7, #8]
 800dc90:	2200      	movs	r2, #0
 800dc92:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800dc94:	68f8      	ldr	r0, [r7, #12]
 800dc96:	f7ff ff59 	bl	800db4c <get_ldnumber>
 800dc9a:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800dc9c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800dc9e:	2b00      	cmp	r3, #0
 800dca0:	da01      	bge.n	800dca6 <find_volume+0x26>
 800dca2:	230b      	movs	r3, #11
 800dca4:	e265      	b.n	800e172 <find_volume+0x4f2>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800dca6:	4a9f      	ldr	r2, [pc, #636]	@ (800df24 <find_volume+0x2a4>)
 800dca8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800dcaa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800dcae:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800dcb0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dcb2:	2b00      	cmp	r3, #0
 800dcb4:	d101      	bne.n	800dcba <find_volume+0x3a>
 800dcb6:	230c      	movs	r3, #12
 800dcb8:	e25b      	b.n	800e172 <find_volume+0x4f2>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800dcba:	68bb      	ldr	r3, [r7, #8]
 800dcbc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800dcbe:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800dcc0:	79fb      	ldrb	r3, [r7, #7]
 800dcc2:	f023 0301 	bic.w	r3, r3, #1
 800dcc6:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800dcc8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dcca:	781b      	ldrb	r3, [r3, #0]
 800dccc:	2b00      	cmp	r3, #0
 800dcce:	d01a      	beq.n	800dd06 <find_volume+0x86>
		stat = disk_status(fs->drv);
 800dcd0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dcd2:	785b      	ldrb	r3, [r3, #1]
 800dcd4:	4618      	mov	r0, r3
 800dcd6:	f7fe f8b5 	bl	800be44 <disk_status>
 800dcda:	4603      	mov	r3, r0
 800dcdc:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800dce0:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800dce4:	f003 0301 	and.w	r3, r3, #1
 800dce8:	2b00      	cmp	r3, #0
 800dcea:	d10c      	bne.n	800dd06 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800dcec:	79fb      	ldrb	r3, [r7, #7]
 800dcee:	2b00      	cmp	r3, #0
 800dcf0:	d007      	beq.n	800dd02 <find_volume+0x82>
 800dcf2:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800dcf6:	f003 0304 	and.w	r3, r3, #4
 800dcfa:	2b00      	cmp	r3, #0
 800dcfc:	d001      	beq.n	800dd02 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800dcfe:	230a      	movs	r3, #10
 800dd00:	e237      	b.n	800e172 <find_volume+0x4f2>
			}
			return FR_OK;				/* The file system object is valid */
 800dd02:	2300      	movs	r3, #0
 800dd04:	e235      	b.n	800e172 <find_volume+0x4f2>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800dd06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dd08:	2200      	movs	r2, #0
 800dd0a:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800dd0c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800dd0e:	b2da      	uxtb	r2, r3
 800dd10:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dd12:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800dd14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dd16:	785b      	ldrb	r3, [r3, #1]
 800dd18:	4618      	mov	r0, r3
 800dd1a:	f7fe f8ad 	bl	800be78 <disk_initialize>
 800dd1e:	4603      	mov	r3, r0
 800dd20:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800dd24:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800dd28:	f003 0301 	and.w	r3, r3, #1
 800dd2c:	2b00      	cmp	r3, #0
 800dd2e:	d001      	beq.n	800dd34 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800dd30:	2303      	movs	r3, #3
 800dd32:	e21e      	b.n	800e172 <find_volume+0x4f2>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800dd34:	79fb      	ldrb	r3, [r7, #7]
 800dd36:	2b00      	cmp	r3, #0
 800dd38:	d007      	beq.n	800dd4a <find_volume+0xca>
 800dd3a:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800dd3e:	f003 0304 	and.w	r3, r3, #4
 800dd42:	2b00      	cmp	r3, #0
 800dd44:	d001      	beq.n	800dd4a <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800dd46:	230a      	movs	r3, #10
 800dd48:	e213      	b.n	800e172 <find_volume+0x4f2>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 800dd4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dd4c:	7858      	ldrb	r0, [r3, #1]
 800dd4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dd50:	330c      	adds	r3, #12
 800dd52:	461a      	mov	r2, r3
 800dd54:	2102      	movs	r1, #2
 800dd56:	f7fe f8f7 	bl	800bf48 <disk_ioctl>
 800dd5a:	4603      	mov	r3, r0
 800dd5c:	2b00      	cmp	r3, #0
 800dd5e:	d001      	beq.n	800dd64 <find_volume+0xe4>
 800dd60:	2301      	movs	r3, #1
 800dd62:	e206      	b.n	800e172 <find_volume+0x4f2>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 800dd64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dd66:	899b      	ldrh	r3, [r3, #12]
 800dd68:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800dd6c:	d80d      	bhi.n	800dd8a <find_volume+0x10a>
 800dd6e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dd70:	899b      	ldrh	r3, [r3, #12]
 800dd72:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800dd76:	d308      	bcc.n	800dd8a <find_volume+0x10a>
 800dd78:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dd7a:	899b      	ldrh	r3, [r3, #12]
 800dd7c:	461a      	mov	r2, r3
 800dd7e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dd80:	899b      	ldrh	r3, [r3, #12]
 800dd82:	3b01      	subs	r3, #1
 800dd84:	4013      	ands	r3, r2
 800dd86:	2b00      	cmp	r3, #0
 800dd88:	d001      	beq.n	800dd8e <find_volume+0x10e>
 800dd8a:	2301      	movs	r3, #1
 800dd8c:	e1f1      	b.n	800e172 <find_volume+0x4f2>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800dd8e:	2300      	movs	r3, #0
 800dd90:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800dd92:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800dd94:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800dd96:	f7ff ff1d 	bl	800dbd4 <check_fs>
 800dd9a:	4603      	mov	r3, r0
 800dd9c:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800dda0:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800dda4:	2b02      	cmp	r3, #2
 800dda6:	d149      	bne.n	800de3c <find_volume+0x1bc>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800dda8:	2300      	movs	r3, #0
 800ddaa:	643b      	str	r3, [r7, #64]	@ 0x40
 800ddac:	e01e      	b.n	800ddec <find_volume+0x16c>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800ddae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ddb0:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 800ddb4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ddb6:	011b      	lsls	r3, r3, #4
 800ddb8:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 800ddbc:	4413      	add	r3, r2
 800ddbe:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800ddc0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ddc2:	3304      	adds	r3, #4
 800ddc4:	781b      	ldrb	r3, [r3, #0]
 800ddc6:	2b00      	cmp	r3, #0
 800ddc8:	d006      	beq.n	800ddd8 <find_volume+0x158>
 800ddca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ddcc:	3308      	adds	r3, #8
 800ddce:	4618      	mov	r0, r3
 800ddd0:	f7fe f8f1 	bl	800bfb6 <ld_dword>
 800ddd4:	4602      	mov	r2, r0
 800ddd6:	e000      	b.n	800ddda <find_volume+0x15a>
 800ddd8:	2200      	movs	r2, #0
 800ddda:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800dddc:	009b      	lsls	r3, r3, #2
 800ddde:	3358      	adds	r3, #88	@ 0x58
 800dde0:	443b      	add	r3, r7
 800dde2:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800dde6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800dde8:	3301      	adds	r3, #1
 800ddea:	643b      	str	r3, [r7, #64]	@ 0x40
 800ddec:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ddee:	2b03      	cmp	r3, #3
 800ddf0:	d9dd      	bls.n	800ddae <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800ddf2:	2300      	movs	r3, #0
 800ddf4:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 800ddf6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ddf8:	2b00      	cmp	r3, #0
 800ddfa:	d002      	beq.n	800de02 <find_volume+0x182>
 800ddfc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ddfe:	3b01      	subs	r3, #1
 800de00:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800de02:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800de04:	009b      	lsls	r3, r3, #2
 800de06:	3358      	adds	r3, #88	@ 0x58
 800de08:	443b      	add	r3, r7
 800de0a:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800de0e:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800de10:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800de12:	2b00      	cmp	r3, #0
 800de14:	d005      	beq.n	800de22 <find_volume+0x1a2>
 800de16:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800de18:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800de1a:	f7ff fedb 	bl	800dbd4 <check_fs>
 800de1e:	4603      	mov	r3, r0
 800de20:	e000      	b.n	800de24 <find_volume+0x1a4>
 800de22:	2303      	movs	r3, #3
 800de24:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800de28:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800de2c:	2b01      	cmp	r3, #1
 800de2e:	d905      	bls.n	800de3c <find_volume+0x1bc>
 800de30:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800de32:	3301      	adds	r3, #1
 800de34:	643b      	str	r3, [r7, #64]	@ 0x40
 800de36:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800de38:	2b03      	cmp	r3, #3
 800de3a:	d9e2      	bls.n	800de02 <find_volume+0x182>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800de3c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800de40:	2b04      	cmp	r3, #4
 800de42:	d101      	bne.n	800de48 <find_volume+0x1c8>
 800de44:	2301      	movs	r3, #1
 800de46:	e194      	b.n	800e172 <find_volume+0x4f2>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800de48:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800de4c:	2b01      	cmp	r3, #1
 800de4e:	d901      	bls.n	800de54 <find_volume+0x1d4>
 800de50:	230d      	movs	r3, #13
 800de52:	e18e      	b.n	800e172 <find_volume+0x4f2>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800de54:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800de56:	3338      	adds	r3, #56	@ 0x38
 800de58:	330b      	adds	r3, #11
 800de5a:	4618      	mov	r0, r3
 800de5c:	f7fe f892 	bl	800bf84 <ld_word>
 800de60:	4603      	mov	r3, r0
 800de62:	461a      	mov	r2, r3
 800de64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800de66:	899b      	ldrh	r3, [r3, #12]
 800de68:	429a      	cmp	r2, r3
 800de6a:	d001      	beq.n	800de70 <find_volume+0x1f0>
 800de6c:	230d      	movs	r3, #13
 800de6e:	e180      	b.n	800e172 <find_volume+0x4f2>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800de70:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800de72:	3338      	adds	r3, #56	@ 0x38
 800de74:	3316      	adds	r3, #22
 800de76:	4618      	mov	r0, r3
 800de78:	f7fe f884 	bl	800bf84 <ld_word>
 800de7c:	4603      	mov	r3, r0
 800de7e:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800de80:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800de82:	2b00      	cmp	r3, #0
 800de84:	d106      	bne.n	800de94 <find_volume+0x214>
 800de86:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800de88:	3338      	adds	r3, #56	@ 0x38
 800de8a:	3324      	adds	r3, #36	@ 0x24
 800de8c:	4618      	mov	r0, r3
 800de8e:	f7fe f892 	bl	800bfb6 <ld_dword>
 800de92:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 800de94:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800de96:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800de98:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800de9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800de9c:	f893 2048 	ldrb.w	r2, [r3, #72]	@ 0x48
 800dea0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dea2:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800dea4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dea6:	789b      	ldrb	r3, [r3, #2]
 800dea8:	2b01      	cmp	r3, #1
 800deaa:	d005      	beq.n	800deb8 <find_volume+0x238>
 800deac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800deae:	789b      	ldrb	r3, [r3, #2]
 800deb0:	2b02      	cmp	r3, #2
 800deb2:	d001      	beq.n	800deb8 <find_volume+0x238>
 800deb4:	230d      	movs	r3, #13
 800deb6:	e15c      	b.n	800e172 <find_volume+0x4f2>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800deb8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800deba:	789b      	ldrb	r3, [r3, #2]
 800debc:	461a      	mov	r2, r3
 800debe:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800dec0:	fb02 f303 	mul.w	r3, r2, r3
 800dec4:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800dec6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dec8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800decc:	461a      	mov	r2, r3
 800dece:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ded0:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800ded2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ded4:	895b      	ldrh	r3, [r3, #10]
 800ded6:	2b00      	cmp	r3, #0
 800ded8:	d008      	beq.n	800deec <find_volume+0x26c>
 800deda:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dedc:	895b      	ldrh	r3, [r3, #10]
 800dede:	461a      	mov	r2, r3
 800dee0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dee2:	895b      	ldrh	r3, [r3, #10]
 800dee4:	3b01      	subs	r3, #1
 800dee6:	4013      	ands	r3, r2
 800dee8:	2b00      	cmp	r3, #0
 800deea:	d001      	beq.n	800def0 <find_volume+0x270>
 800deec:	230d      	movs	r3, #13
 800deee:	e140      	b.n	800e172 <find_volume+0x4f2>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800def0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800def2:	3338      	adds	r3, #56	@ 0x38
 800def4:	3311      	adds	r3, #17
 800def6:	4618      	mov	r0, r3
 800def8:	f7fe f844 	bl	800bf84 <ld_word>
 800defc:	4603      	mov	r3, r0
 800defe:	461a      	mov	r2, r3
 800df00:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800df02:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800df04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800df06:	891b      	ldrh	r3, [r3, #8]
 800df08:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800df0a:	8992      	ldrh	r2, [r2, #12]
 800df0c:	0952      	lsrs	r2, r2, #5
 800df0e:	b292      	uxth	r2, r2
 800df10:	fbb3 f1f2 	udiv	r1, r3, r2
 800df14:	fb01 f202 	mul.w	r2, r1, r2
 800df18:	1a9b      	subs	r3, r3, r2
 800df1a:	b29b      	uxth	r3, r3
 800df1c:	2b00      	cmp	r3, #0
 800df1e:	d003      	beq.n	800df28 <find_volume+0x2a8>
 800df20:	230d      	movs	r3, #13
 800df22:	e126      	b.n	800e172 <find_volume+0x4f2>
 800df24:	200161b4 	.word	0x200161b4

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800df28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800df2a:	3338      	adds	r3, #56	@ 0x38
 800df2c:	3313      	adds	r3, #19
 800df2e:	4618      	mov	r0, r3
 800df30:	f7fe f828 	bl	800bf84 <ld_word>
 800df34:	4603      	mov	r3, r0
 800df36:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800df38:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800df3a:	2b00      	cmp	r3, #0
 800df3c:	d106      	bne.n	800df4c <find_volume+0x2cc>
 800df3e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800df40:	3338      	adds	r3, #56	@ 0x38
 800df42:	3320      	adds	r3, #32
 800df44:	4618      	mov	r0, r3
 800df46:	f7fe f836 	bl	800bfb6 <ld_dword>
 800df4a:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800df4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800df4e:	3338      	adds	r3, #56	@ 0x38
 800df50:	330e      	adds	r3, #14
 800df52:	4618      	mov	r0, r3
 800df54:	f7fe f816 	bl	800bf84 <ld_word>
 800df58:	4603      	mov	r3, r0
 800df5a:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800df5c:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800df5e:	2b00      	cmp	r3, #0
 800df60:	d101      	bne.n	800df66 <find_volume+0x2e6>
 800df62:	230d      	movs	r3, #13
 800df64:	e105      	b.n	800e172 <find_volume+0x4f2>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800df66:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800df68:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800df6a:	4413      	add	r3, r2
 800df6c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800df6e:	8911      	ldrh	r1, [r2, #8]
 800df70:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800df72:	8992      	ldrh	r2, [r2, #12]
 800df74:	0952      	lsrs	r2, r2, #5
 800df76:	b292      	uxth	r2, r2
 800df78:	fbb1 f2f2 	udiv	r2, r1, r2
 800df7c:	b292      	uxth	r2, r2
 800df7e:	4413      	add	r3, r2
 800df80:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800df82:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800df84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800df86:	429a      	cmp	r2, r3
 800df88:	d201      	bcs.n	800df8e <find_volume+0x30e>
 800df8a:	230d      	movs	r3, #13
 800df8c:	e0f1      	b.n	800e172 <find_volume+0x4f2>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800df8e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800df90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800df92:	1ad3      	subs	r3, r2, r3
 800df94:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800df96:	8952      	ldrh	r2, [r2, #10]
 800df98:	fbb3 f3f2 	udiv	r3, r3, r2
 800df9c:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800df9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dfa0:	2b00      	cmp	r3, #0
 800dfa2:	d101      	bne.n	800dfa8 <find_volume+0x328>
 800dfa4:	230d      	movs	r3, #13
 800dfa6:	e0e4      	b.n	800e172 <find_volume+0x4f2>
		fmt = FS_FAT32;
 800dfa8:	2303      	movs	r3, #3
 800dfaa:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800dfae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dfb0:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 800dfb4:	4293      	cmp	r3, r2
 800dfb6:	d802      	bhi.n	800dfbe <find_volume+0x33e>
 800dfb8:	2302      	movs	r3, #2
 800dfba:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800dfbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dfc0:	f640 72f5 	movw	r2, #4085	@ 0xff5
 800dfc4:	4293      	cmp	r3, r2
 800dfc6:	d802      	bhi.n	800dfce <find_volume+0x34e>
 800dfc8:	2301      	movs	r3, #1
 800dfca:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800dfce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dfd0:	1c9a      	adds	r2, r3, #2
 800dfd2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dfd4:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 800dfd6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dfd8:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800dfda:	625a      	str	r2, [r3, #36]	@ 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800dfdc:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800dfde:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800dfe0:	441a      	add	r2, r3
 800dfe2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dfe4:	629a      	str	r2, [r3, #40]	@ 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 800dfe6:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800dfe8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dfea:	441a      	add	r2, r3
 800dfec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dfee:	631a      	str	r2, [r3, #48]	@ 0x30
		if (fmt == FS_FAT32) {
 800dff0:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800dff4:	2b03      	cmp	r3, #3
 800dff6:	d11e      	bne.n	800e036 <find_volume+0x3b6>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800dff8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dffa:	3338      	adds	r3, #56	@ 0x38
 800dffc:	332a      	adds	r3, #42	@ 0x2a
 800dffe:	4618      	mov	r0, r3
 800e000:	f7fd ffc0 	bl	800bf84 <ld_word>
 800e004:	4603      	mov	r3, r0
 800e006:	2b00      	cmp	r3, #0
 800e008:	d001      	beq.n	800e00e <find_volume+0x38e>
 800e00a:	230d      	movs	r3, #13
 800e00c:	e0b1      	b.n	800e172 <find_volume+0x4f2>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800e00e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e010:	891b      	ldrh	r3, [r3, #8]
 800e012:	2b00      	cmp	r3, #0
 800e014:	d001      	beq.n	800e01a <find_volume+0x39a>
 800e016:	230d      	movs	r3, #13
 800e018:	e0ab      	b.n	800e172 <find_volume+0x4f2>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800e01a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e01c:	3338      	adds	r3, #56	@ 0x38
 800e01e:	332c      	adds	r3, #44	@ 0x2c
 800e020:	4618      	mov	r0, r3
 800e022:	f7fd ffc8 	bl	800bfb6 <ld_dword>
 800e026:	4602      	mov	r2, r0
 800e028:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e02a:	62da      	str	r2, [r3, #44]	@ 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800e02c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e02e:	69db      	ldr	r3, [r3, #28]
 800e030:	009b      	lsls	r3, r3, #2
 800e032:	647b      	str	r3, [r7, #68]	@ 0x44
 800e034:	e01f      	b.n	800e076 <find_volume+0x3f6>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800e036:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e038:	891b      	ldrh	r3, [r3, #8]
 800e03a:	2b00      	cmp	r3, #0
 800e03c:	d101      	bne.n	800e042 <find_volume+0x3c2>
 800e03e:	230d      	movs	r3, #13
 800e040:	e097      	b.n	800e172 <find_volume+0x4f2>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800e042:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e044:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800e046:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e048:	441a      	add	r2, r3
 800e04a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e04c:	62da      	str	r2, [r3, #44]	@ 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800e04e:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800e052:	2b02      	cmp	r3, #2
 800e054:	d103      	bne.n	800e05e <find_volume+0x3de>
 800e056:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e058:	69db      	ldr	r3, [r3, #28]
 800e05a:	005b      	lsls	r3, r3, #1
 800e05c:	e00a      	b.n	800e074 <find_volume+0x3f4>
 800e05e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e060:	69da      	ldr	r2, [r3, #28]
 800e062:	4613      	mov	r3, r2
 800e064:	005b      	lsls	r3, r3, #1
 800e066:	4413      	add	r3, r2
 800e068:	085a      	lsrs	r2, r3, #1
 800e06a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e06c:	69db      	ldr	r3, [r3, #28]
 800e06e:	f003 0301 	and.w	r3, r3, #1
 800e072:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800e074:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800e076:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e078:	6a1a      	ldr	r2, [r3, #32]
 800e07a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e07c:	899b      	ldrh	r3, [r3, #12]
 800e07e:	4619      	mov	r1, r3
 800e080:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e082:	440b      	add	r3, r1
 800e084:	3b01      	subs	r3, #1
 800e086:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800e088:	8989      	ldrh	r1, [r1, #12]
 800e08a:	fbb3 f3f1 	udiv	r3, r3, r1
 800e08e:	429a      	cmp	r2, r3
 800e090:	d201      	bcs.n	800e096 <find_volume+0x416>
 800e092:	230d      	movs	r3, #13
 800e094:	e06d      	b.n	800e172 <find_volume+0x4f2>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800e096:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e098:	f04f 32ff 	mov.w	r2, #4294967295
 800e09c:	619a      	str	r2, [r3, #24]
 800e09e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e0a0:	699a      	ldr	r2, [r3, #24]
 800e0a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e0a4:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 800e0a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e0a8:	2280      	movs	r2, #128	@ 0x80
 800e0aa:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800e0ac:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800e0b0:	2b03      	cmp	r3, #3
 800e0b2:	d149      	bne.n	800e148 <find_volume+0x4c8>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800e0b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e0b6:	3338      	adds	r3, #56	@ 0x38
 800e0b8:	3330      	adds	r3, #48	@ 0x30
 800e0ba:	4618      	mov	r0, r3
 800e0bc:	f7fd ff62 	bl	800bf84 <ld_word>
 800e0c0:	4603      	mov	r3, r0
 800e0c2:	2b01      	cmp	r3, #1
 800e0c4:	d140      	bne.n	800e148 <find_volume+0x4c8>
			&& move_window(fs, bsect + 1) == FR_OK)
 800e0c6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e0c8:	3301      	adds	r3, #1
 800e0ca:	4619      	mov	r1, r3
 800e0cc:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800e0ce:	f7fe fa0b 	bl	800c4e8 <move_window>
 800e0d2:	4603      	mov	r3, r0
 800e0d4:	2b00      	cmp	r3, #0
 800e0d6:	d137      	bne.n	800e148 <find_volume+0x4c8>
		{
			fs->fsi_flag = 0;
 800e0d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e0da:	2200      	movs	r2, #0
 800e0dc:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800e0de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e0e0:	3338      	adds	r3, #56	@ 0x38
 800e0e2:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800e0e6:	4618      	mov	r0, r3
 800e0e8:	f7fd ff4c 	bl	800bf84 <ld_word>
 800e0ec:	4603      	mov	r3, r0
 800e0ee:	461a      	mov	r2, r3
 800e0f0:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800e0f4:	429a      	cmp	r2, r3
 800e0f6:	d127      	bne.n	800e148 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800e0f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e0fa:	3338      	adds	r3, #56	@ 0x38
 800e0fc:	4618      	mov	r0, r3
 800e0fe:	f7fd ff5a 	bl	800bfb6 <ld_dword>
 800e102:	4603      	mov	r3, r0
 800e104:	4a1d      	ldr	r2, [pc, #116]	@ (800e17c <find_volume+0x4fc>)
 800e106:	4293      	cmp	r3, r2
 800e108:	d11e      	bne.n	800e148 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800e10a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e10c:	3338      	adds	r3, #56	@ 0x38
 800e10e:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800e112:	4618      	mov	r0, r3
 800e114:	f7fd ff4f 	bl	800bfb6 <ld_dword>
 800e118:	4603      	mov	r3, r0
 800e11a:	4a19      	ldr	r2, [pc, #100]	@ (800e180 <find_volume+0x500>)
 800e11c:	4293      	cmp	r3, r2
 800e11e:	d113      	bne.n	800e148 <find_volume+0x4c8>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800e120:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e122:	3338      	adds	r3, #56	@ 0x38
 800e124:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 800e128:	4618      	mov	r0, r3
 800e12a:	f7fd ff44 	bl	800bfb6 <ld_dword>
 800e12e:	4602      	mov	r2, r0
 800e130:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e132:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800e134:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e136:	3338      	adds	r3, #56	@ 0x38
 800e138:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 800e13c:	4618      	mov	r0, r3
 800e13e:	f7fd ff3a 	bl	800bfb6 <ld_dword>
 800e142:	4602      	mov	r2, r0
 800e144:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e146:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800e148:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e14a:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 800e14e:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800e150:	4b0c      	ldr	r3, [pc, #48]	@ (800e184 <find_volume+0x504>)
 800e152:	881b      	ldrh	r3, [r3, #0]
 800e154:	3301      	adds	r3, #1
 800e156:	b29a      	uxth	r2, r3
 800e158:	4b0a      	ldr	r3, [pc, #40]	@ (800e184 <find_volume+0x504>)
 800e15a:	801a      	strh	r2, [r3, #0]
 800e15c:	4b09      	ldr	r3, [pc, #36]	@ (800e184 <find_volume+0x504>)
 800e15e:	881a      	ldrh	r2, [r3, #0]
 800e160:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e162:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 800e164:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e166:	4a08      	ldr	r2, [pc, #32]	@ (800e188 <find_volume+0x508>)
 800e168:	611a      	str	r2, [r3, #16]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800e16a:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800e16c:	f7fe f954 	bl	800c418 <clear_lock>
#endif
	return FR_OK;
 800e170:	2300      	movs	r3, #0
}
 800e172:	4618      	mov	r0, r3
 800e174:	3758      	adds	r7, #88	@ 0x58
 800e176:	46bd      	mov	sp, r7
 800e178:	bd80      	pop	{r7, pc}
 800e17a:	bf00      	nop
 800e17c:	41615252 	.word	0x41615252
 800e180:	61417272 	.word	0x61417272
 800e184:	200161b8 	.word	0x200161b8
 800e188:	200161dc 	.word	0x200161dc

0800e18c <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800e18c:	b580      	push	{r7, lr}
 800e18e:	b084      	sub	sp, #16
 800e190:	af00      	add	r7, sp, #0
 800e192:	6078      	str	r0, [r7, #4]
 800e194:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800e196:	2309      	movs	r3, #9
 800e198:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800e19a:	687b      	ldr	r3, [r7, #4]
 800e19c:	2b00      	cmp	r3, #0
 800e19e:	d01c      	beq.n	800e1da <validate+0x4e>
 800e1a0:	687b      	ldr	r3, [r7, #4]
 800e1a2:	681b      	ldr	r3, [r3, #0]
 800e1a4:	2b00      	cmp	r3, #0
 800e1a6:	d018      	beq.n	800e1da <validate+0x4e>
 800e1a8:	687b      	ldr	r3, [r7, #4]
 800e1aa:	681b      	ldr	r3, [r3, #0]
 800e1ac:	781b      	ldrb	r3, [r3, #0]
 800e1ae:	2b00      	cmp	r3, #0
 800e1b0:	d013      	beq.n	800e1da <validate+0x4e>
 800e1b2:	687b      	ldr	r3, [r7, #4]
 800e1b4:	889a      	ldrh	r2, [r3, #4]
 800e1b6:	687b      	ldr	r3, [r7, #4]
 800e1b8:	681b      	ldr	r3, [r3, #0]
 800e1ba:	88db      	ldrh	r3, [r3, #6]
 800e1bc:	429a      	cmp	r2, r3
 800e1be:	d10c      	bne.n	800e1da <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800e1c0:	687b      	ldr	r3, [r7, #4]
 800e1c2:	681b      	ldr	r3, [r3, #0]
 800e1c4:	785b      	ldrb	r3, [r3, #1]
 800e1c6:	4618      	mov	r0, r3
 800e1c8:	f7fd fe3c 	bl	800be44 <disk_status>
 800e1cc:	4603      	mov	r3, r0
 800e1ce:	f003 0301 	and.w	r3, r3, #1
 800e1d2:	2b00      	cmp	r3, #0
 800e1d4:	d101      	bne.n	800e1da <validate+0x4e>
			res = FR_OK;
 800e1d6:	2300      	movs	r3, #0
 800e1d8:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800e1da:	7bfb      	ldrb	r3, [r7, #15]
 800e1dc:	2b00      	cmp	r3, #0
 800e1de:	d102      	bne.n	800e1e6 <validate+0x5a>
 800e1e0:	687b      	ldr	r3, [r7, #4]
 800e1e2:	681b      	ldr	r3, [r3, #0]
 800e1e4:	e000      	b.n	800e1e8 <validate+0x5c>
 800e1e6:	2300      	movs	r3, #0
 800e1e8:	683a      	ldr	r2, [r7, #0]
 800e1ea:	6013      	str	r3, [r2, #0]
	return res;
 800e1ec:	7bfb      	ldrb	r3, [r7, #15]
}
 800e1ee:	4618      	mov	r0, r3
 800e1f0:	3710      	adds	r7, #16
 800e1f2:	46bd      	mov	sp, r7
 800e1f4:	bd80      	pop	{r7, pc}
	...

0800e1f8 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800e1f8:	b580      	push	{r7, lr}
 800e1fa:	b088      	sub	sp, #32
 800e1fc:	af00      	add	r7, sp, #0
 800e1fe:	60f8      	str	r0, [r7, #12]
 800e200:	60b9      	str	r1, [r7, #8]
 800e202:	4613      	mov	r3, r2
 800e204:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800e206:	68bb      	ldr	r3, [r7, #8]
 800e208:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800e20a:	f107 0310 	add.w	r3, r7, #16
 800e20e:	4618      	mov	r0, r3
 800e210:	f7ff fc9c 	bl	800db4c <get_ldnumber>
 800e214:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800e216:	69fb      	ldr	r3, [r7, #28]
 800e218:	2b00      	cmp	r3, #0
 800e21a:	da01      	bge.n	800e220 <f_mount+0x28>
 800e21c:	230b      	movs	r3, #11
 800e21e:	e02b      	b.n	800e278 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800e220:	4a17      	ldr	r2, [pc, #92]	@ (800e280 <f_mount+0x88>)
 800e222:	69fb      	ldr	r3, [r7, #28]
 800e224:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e228:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800e22a:	69bb      	ldr	r3, [r7, #24]
 800e22c:	2b00      	cmp	r3, #0
 800e22e:	d005      	beq.n	800e23c <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800e230:	69b8      	ldr	r0, [r7, #24]
 800e232:	f7fe f8f1 	bl	800c418 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800e236:	69bb      	ldr	r3, [r7, #24]
 800e238:	2200      	movs	r2, #0
 800e23a:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800e23c:	68fb      	ldr	r3, [r7, #12]
 800e23e:	2b00      	cmp	r3, #0
 800e240:	d002      	beq.n	800e248 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800e242:	68fb      	ldr	r3, [r7, #12]
 800e244:	2200      	movs	r2, #0
 800e246:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800e248:	68fa      	ldr	r2, [r7, #12]
 800e24a:	490d      	ldr	r1, [pc, #52]	@ (800e280 <f_mount+0x88>)
 800e24c:	69fb      	ldr	r3, [r7, #28]
 800e24e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800e252:	68fb      	ldr	r3, [r7, #12]
 800e254:	2b00      	cmp	r3, #0
 800e256:	d002      	beq.n	800e25e <f_mount+0x66>
 800e258:	79fb      	ldrb	r3, [r7, #7]
 800e25a:	2b01      	cmp	r3, #1
 800e25c:	d001      	beq.n	800e262 <f_mount+0x6a>
 800e25e:	2300      	movs	r3, #0
 800e260:	e00a      	b.n	800e278 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800e262:	f107 010c 	add.w	r1, r7, #12
 800e266:	f107 0308 	add.w	r3, r7, #8
 800e26a:	2200      	movs	r2, #0
 800e26c:	4618      	mov	r0, r3
 800e26e:	f7ff fd07 	bl	800dc80 <find_volume>
 800e272:	4603      	mov	r3, r0
 800e274:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800e276:	7dfb      	ldrb	r3, [r7, #23]
}
 800e278:	4618      	mov	r0, r3
 800e27a:	3720      	adds	r7, #32
 800e27c:	46bd      	mov	sp, r7
 800e27e:	bd80      	pop	{r7, pc}
 800e280:	200161b4 	.word	0x200161b4

0800e284 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800e284:	b580      	push	{r7, lr}
 800e286:	b09a      	sub	sp, #104	@ 0x68
 800e288:	af00      	add	r7, sp, #0
 800e28a:	60f8      	str	r0, [r7, #12]
 800e28c:	60b9      	str	r1, [r7, #8]
 800e28e:	4613      	mov	r3, r2
 800e290:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800e292:	68fb      	ldr	r3, [r7, #12]
 800e294:	2b00      	cmp	r3, #0
 800e296:	d101      	bne.n	800e29c <f_open+0x18>
 800e298:	2309      	movs	r3, #9
 800e29a:	e1b7      	b.n	800e60c <f_open+0x388>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800e29c:	79fb      	ldrb	r3, [r7, #7]
 800e29e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800e2a2:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800e2a4:	79fa      	ldrb	r2, [r7, #7]
 800e2a6:	f107 0114 	add.w	r1, r7, #20
 800e2aa:	f107 0308 	add.w	r3, r7, #8
 800e2ae:	4618      	mov	r0, r3
 800e2b0:	f7ff fce6 	bl	800dc80 <find_volume>
 800e2b4:	4603      	mov	r3, r0
 800e2b6:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
	if (res == FR_OK) {
 800e2ba:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800e2be:	2b00      	cmp	r3, #0
 800e2c0:	f040 819b 	bne.w	800e5fa <f_open+0x376>
		dj.obj.fs = fs;
 800e2c4:	697b      	ldr	r3, [r7, #20]
 800e2c6:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800e2c8:	68ba      	ldr	r2, [r7, #8]
 800e2ca:	f107 0318 	add.w	r3, r7, #24
 800e2ce:	4611      	mov	r1, r2
 800e2d0:	4618      	mov	r0, r3
 800e2d2:	f7ff fbc5 	bl	800da60 <follow_path>
 800e2d6:	4603      	mov	r3, r0
 800e2d8:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800e2dc:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800e2e0:	2b00      	cmp	r3, #0
 800e2e2:	d118      	bne.n	800e316 <f_open+0x92>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800e2e4:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800e2e8:	b25b      	sxtb	r3, r3
 800e2ea:	2b00      	cmp	r3, #0
 800e2ec:	da03      	bge.n	800e2f6 <f_open+0x72>
				res = FR_INVALID_NAME;
 800e2ee:	2306      	movs	r3, #6
 800e2f0:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 800e2f4:	e00f      	b.n	800e316 <f_open+0x92>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800e2f6:	79fb      	ldrb	r3, [r7, #7]
 800e2f8:	2b01      	cmp	r3, #1
 800e2fa:	bf8c      	ite	hi
 800e2fc:	2301      	movhi	r3, #1
 800e2fe:	2300      	movls	r3, #0
 800e300:	b2db      	uxtb	r3, r3
 800e302:	461a      	mov	r2, r3
 800e304:	f107 0318 	add.w	r3, r7, #24
 800e308:	4611      	mov	r1, r2
 800e30a:	4618      	mov	r0, r3
 800e30c:	f7fd ff3c 	bl	800c188 <chk_lock>
 800e310:	4603      	mov	r3, r0
 800e312:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800e316:	79fb      	ldrb	r3, [r7, #7]
 800e318:	f003 031c 	and.w	r3, r3, #28
 800e31c:	2b00      	cmp	r3, #0
 800e31e:	d07f      	beq.n	800e420 <f_open+0x19c>
			if (res != FR_OK) {					/* No file, create new */
 800e320:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800e324:	2b00      	cmp	r3, #0
 800e326:	d017      	beq.n	800e358 <f_open+0xd4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800e328:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800e32c:	2b04      	cmp	r3, #4
 800e32e:	d10e      	bne.n	800e34e <f_open+0xca>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800e330:	f7fd ff86 	bl	800c240 <enq_lock>
 800e334:	4603      	mov	r3, r0
 800e336:	2b00      	cmp	r3, #0
 800e338:	d006      	beq.n	800e348 <f_open+0xc4>
 800e33a:	f107 0318 	add.w	r3, r7, #24
 800e33e:	4618      	mov	r0, r3
 800e340:	f7ff f8de 	bl	800d500 <dir_register>
 800e344:	4603      	mov	r3, r0
 800e346:	e000      	b.n	800e34a <f_open+0xc6>
 800e348:	2312      	movs	r3, #18
 800e34a:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800e34e:	79fb      	ldrb	r3, [r7, #7]
 800e350:	f043 0308 	orr.w	r3, r3, #8
 800e354:	71fb      	strb	r3, [r7, #7]
 800e356:	e010      	b.n	800e37a <f_open+0xf6>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800e358:	7fbb      	ldrb	r3, [r7, #30]
 800e35a:	f003 0311 	and.w	r3, r3, #17
 800e35e:	2b00      	cmp	r3, #0
 800e360:	d003      	beq.n	800e36a <f_open+0xe6>
					res = FR_DENIED;
 800e362:	2307      	movs	r3, #7
 800e364:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 800e368:	e007      	b.n	800e37a <f_open+0xf6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800e36a:	79fb      	ldrb	r3, [r7, #7]
 800e36c:	f003 0304 	and.w	r3, r3, #4
 800e370:	2b00      	cmp	r3, #0
 800e372:	d002      	beq.n	800e37a <f_open+0xf6>
 800e374:	2308      	movs	r3, #8
 800e376:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800e37a:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800e37e:	2b00      	cmp	r3, #0
 800e380:	d168      	bne.n	800e454 <f_open+0x1d0>
 800e382:	79fb      	ldrb	r3, [r7, #7]
 800e384:	f003 0308 	and.w	r3, r3, #8
 800e388:	2b00      	cmp	r3, #0
 800e38a:	d063      	beq.n	800e454 <f_open+0x1d0>
				dw = GET_FATTIME();
 800e38c:	f7fd f814 	bl	800b3b8 <get_fattime>
 800e390:	65b8      	str	r0, [r7, #88]	@ 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800e392:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e394:	330e      	adds	r3, #14
 800e396:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800e398:	4618      	mov	r0, r3
 800e39a:	f7fd fe4a 	bl	800c032 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800e39e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e3a0:	3316      	adds	r3, #22
 800e3a2:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800e3a4:	4618      	mov	r0, r3
 800e3a6:	f7fd fe44 	bl	800c032 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800e3aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e3ac:	330b      	adds	r3, #11
 800e3ae:	2220      	movs	r2, #32
 800e3b0:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800e3b2:	697b      	ldr	r3, [r7, #20]
 800e3b4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800e3b6:	4611      	mov	r1, r2
 800e3b8:	4618      	mov	r0, r3
 800e3ba:	f7fe fe1a 	bl	800cff2 <ld_clust>
 800e3be:	6578      	str	r0, [r7, #84]	@ 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800e3c0:	697b      	ldr	r3, [r7, #20]
 800e3c2:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800e3c4:	2200      	movs	r2, #0
 800e3c6:	4618      	mov	r0, r3
 800e3c8:	f7fe fe32 	bl	800d030 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800e3cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e3ce:	331c      	adds	r3, #28
 800e3d0:	2100      	movs	r1, #0
 800e3d2:	4618      	mov	r0, r3
 800e3d4:	f7fd fe2d 	bl	800c032 <st_dword>
					fs->wflag = 1;
 800e3d8:	697b      	ldr	r3, [r7, #20]
 800e3da:	2201      	movs	r2, #1
 800e3dc:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800e3de:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e3e0:	2b00      	cmp	r3, #0
 800e3e2:	d037      	beq.n	800e454 <f_open+0x1d0>
						dw = fs->winsect;
 800e3e4:	697b      	ldr	r3, [r7, #20]
 800e3e6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e3e8:	65bb      	str	r3, [r7, #88]	@ 0x58
						res = remove_chain(&dj.obj, cl, 0);
 800e3ea:	f107 0318 	add.w	r3, r7, #24
 800e3ee:	2200      	movs	r2, #0
 800e3f0:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800e3f2:	4618      	mov	r0, r3
 800e3f4:	f7fe fb22 	bl	800ca3c <remove_chain>
 800e3f8:	4603      	mov	r3, r0
 800e3fa:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
						if (res == FR_OK) {
 800e3fe:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800e402:	2b00      	cmp	r3, #0
 800e404:	d126      	bne.n	800e454 <f_open+0x1d0>
							res = move_window(fs, dw);
 800e406:	697b      	ldr	r3, [r7, #20]
 800e408:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800e40a:	4618      	mov	r0, r3
 800e40c:	f7fe f86c 	bl	800c4e8 <move_window>
 800e410:	4603      	mov	r3, r0
 800e412:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800e416:	697b      	ldr	r3, [r7, #20]
 800e418:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800e41a:	3a01      	subs	r2, #1
 800e41c:	615a      	str	r2, [r3, #20]
 800e41e:	e019      	b.n	800e454 <f_open+0x1d0>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800e420:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800e424:	2b00      	cmp	r3, #0
 800e426:	d115      	bne.n	800e454 <f_open+0x1d0>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800e428:	7fbb      	ldrb	r3, [r7, #30]
 800e42a:	f003 0310 	and.w	r3, r3, #16
 800e42e:	2b00      	cmp	r3, #0
 800e430:	d003      	beq.n	800e43a <f_open+0x1b6>
					res = FR_NO_FILE;
 800e432:	2304      	movs	r3, #4
 800e434:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 800e438:	e00c      	b.n	800e454 <f_open+0x1d0>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800e43a:	79fb      	ldrb	r3, [r7, #7]
 800e43c:	f003 0302 	and.w	r3, r3, #2
 800e440:	2b00      	cmp	r3, #0
 800e442:	d007      	beq.n	800e454 <f_open+0x1d0>
 800e444:	7fbb      	ldrb	r3, [r7, #30]
 800e446:	f003 0301 	and.w	r3, r3, #1
 800e44a:	2b00      	cmp	r3, #0
 800e44c:	d002      	beq.n	800e454 <f_open+0x1d0>
						res = FR_DENIED;
 800e44e:	2307      	movs	r3, #7
 800e450:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 800e454:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800e458:	2b00      	cmp	r3, #0
 800e45a:	d126      	bne.n	800e4aa <f_open+0x226>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800e45c:	79fb      	ldrb	r3, [r7, #7]
 800e45e:	f003 0308 	and.w	r3, r3, #8
 800e462:	2b00      	cmp	r3, #0
 800e464:	d003      	beq.n	800e46e <f_open+0x1ea>
				mode |= FA_MODIFIED;
 800e466:	79fb      	ldrb	r3, [r7, #7]
 800e468:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e46c:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800e46e:	697b      	ldr	r3, [r7, #20]
 800e470:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800e472:	68fb      	ldr	r3, [r7, #12]
 800e474:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 800e476:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800e478:	68fb      	ldr	r3, [r7, #12]
 800e47a:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800e47c:	79fb      	ldrb	r3, [r7, #7]
 800e47e:	2b01      	cmp	r3, #1
 800e480:	bf8c      	ite	hi
 800e482:	2301      	movhi	r3, #1
 800e484:	2300      	movls	r3, #0
 800e486:	b2db      	uxtb	r3, r3
 800e488:	461a      	mov	r2, r3
 800e48a:	f107 0318 	add.w	r3, r7, #24
 800e48e:	4611      	mov	r1, r2
 800e490:	4618      	mov	r0, r3
 800e492:	f7fd fef7 	bl	800c284 <inc_lock>
 800e496:	4602      	mov	r2, r0
 800e498:	68fb      	ldr	r3, [r7, #12]
 800e49a:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800e49c:	68fb      	ldr	r3, [r7, #12]
 800e49e:	691b      	ldr	r3, [r3, #16]
 800e4a0:	2b00      	cmp	r3, #0
 800e4a2:	d102      	bne.n	800e4aa <f_open+0x226>
 800e4a4:	2302      	movs	r3, #2
 800e4a6:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 800e4aa:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800e4ae:	2b00      	cmp	r3, #0
 800e4b0:	f040 80a3 	bne.w	800e5fa <f_open+0x376>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800e4b4:	697b      	ldr	r3, [r7, #20]
 800e4b6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800e4b8:	4611      	mov	r1, r2
 800e4ba:	4618      	mov	r0, r3
 800e4bc:	f7fe fd99 	bl	800cff2 <ld_clust>
 800e4c0:	4602      	mov	r2, r0
 800e4c2:	68fb      	ldr	r3, [r7, #12]
 800e4c4:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800e4c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e4c8:	331c      	adds	r3, #28
 800e4ca:	4618      	mov	r0, r3
 800e4cc:	f7fd fd73 	bl	800bfb6 <ld_dword>
 800e4d0:	4602      	mov	r2, r0
 800e4d2:	68fb      	ldr	r3, [r7, #12]
 800e4d4:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800e4d6:	68fb      	ldr	r3, [r7, #12]
 800e4d8:	2200      	movs	r2, #0
 800e4da:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800e4dc:	697a      	ldr	r2, [r7, #20]
 800e4de:	68fb      	ldr	r3, [r7, #12]
 800e4e0:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800e4e2:	697b      	ldr	r3, [r7, #20]
 800e4e4:	88da      	ldrh	r2, [r3, #6]
 800e4e6:	68fb      	ldr	r3, [r7, #12]
 800e4e8:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800e4ea:	68fb      	ldr	r3, [r7, #12]
 800e4ec:	79fa      	ldrb	r2, [r7, #7]
 800e4ee:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800e4f0:	68fb      	ldr	r3, [r7, #12]
 800e4f2:	2200      	movs	r2, #0
 800e4f4:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800e4f6:	68fb      	ldr	r3, [r7, #12]
 800e4f8:	2200      	movs	r2, #0
 800e4fa:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800e4fc:	68fb      	ldr	r3, [r7, #12]
 800e4fe:	2200      	movs	r2, #0
 800e500:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800e502:	68fb      	ldr	r3, [r7, #12]
 800e504:	3330      	adds	r3, #48	@ 0x30
 800e506:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800e50a:	2100      	movs	r1, #0
 800e50c:	4618      	mov	r0, r3
 800e50e:	f7fd fddd 	bl	800c0cc <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800e512:	79fb      	ldrb	r3, [r7, #7]
 800e514:	f003 0320 	and.w	r3, r3, #32
 800e518:	2b00      	cmp	r3, #0
 800e51a:	d06e      	beq.n	800e5fa <f_open+0x376>
 800e51c:	68fb      	ldr	r3, [r7, #12]
 800e51e:	68db      	ldr	r3, [r3, #12]
 800e520:	2b00      	cmp	r3, #0
 800e522:	d06a      	beq.n	800e5fa <f_open+0x376>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800e524:	68fb      	ldr	r3, [r7, #12]
 800e526:	68da      	ldr	r2, [r3, #12]
 800e528:	68fb      	ldr	r3, [r7, #12]
 800e52a:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800e52c:	697b      	ldr	r3, [r7, #20]
 800e52e:	895b      	ldrh	r3, [r3, #10]
 800e530:	461a      	mov	r2, r3
 800e532:	697b      	ldr	r3, [r7, #20]
 800e534:	899b      	ldrh	r3, [r3, #12]
 800e536:	fb02 f303 	mul.w	r3, r2, r3
 800e53a:	653b      	str	r3, [r7, #80]	@ 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800e53c:	68fb      	ldr	r3, [r7, #12]
 800e53e:	689b      	ldr	r3, [r3, #8]
 800e540:	663b      	str	r3, [r7, #96]	@ 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800e542:	68fb      	ldr	r3, [r7, #12]
 800e544:	68db      	ldr	r3, [r3, #12]
 800e546:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800e548:	e016      	b.n	800e578 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 800e54a:	68fb      	ldr	r3, [r7, #12]
 800e54c:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 800e54e:	4618      	mov	r0, r3
 800e550:	f7fe f887 	bl	800c662 <get_fat>
 800e554:	6638      	str	r0, [r7, #96]	@ 0x60
					if (clst <= 1) res = FR_INT_ERR;
 800e556:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800e558:	2b01      	cmp	r3, #1
 800e55a:	d802      	bhi.n	800e562 <f_open+0x2de>
 800e55c:	2302      	movs	r3, #2
 800e55e:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800e562:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800e564:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e568:	d102      	bne.n	800e570 <f_open+0x2ec>
 800e56a:	2301      	movs	r3, #1
 800e56c:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800e570:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800e572:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e574:	1ad3      	subs	r3, r2, r3
 800e576:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800e578:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800e57c:	2b00      	cmp	r3, #0
 800e57e:	d103      	bne.n	800e588 <f_open+0x304>
 800e580:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800e582:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e584:	429a      	cmp	r2, r3
 800e586:	d8e0      	bhi.n	800e54a <f_open+0x2c6>
				}
				fp->clust = clst;
 800e588:	68fb      	ldr	r3, [r7, #12]
 800e58a:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800e58c:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800e58e:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800e592:	2b00      	cmp	r3, #0
 800e594:	d131      	bne.n	800e5fa <f_open+0x376>
 800e596:	697b      	ldr	r3, [r7, #20]
 800e598:	899b      	ldrh	r3, [r3, #12]
 800e59a:	461a      	mov	r2, r3
 800e59c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800e59e:	fbb3 f1f2 	udiv	r1, r3, r2
 800e5a2:	fb01 f202 	mul.w	r2, r1, r2
 800e5a6:	1a9b      	subs	r3, r3, r2
 800e5a8:	2b00      	cmp	r3, #0
 800e5aa:	d026      	beq.n	800e5fa <f_open+0x376>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800e5ac:	697b      	ldr	r3, [r7, #20]
 800e5ae:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 800e5b0:	4618      	mov	r0, r3
 800e5b2:	f7fe f837 	bl	800c624 <clust2sect>
 800e5b6:	64f8      	str	r0, [r7, #76]	@ 0x4c
 800e5b8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e5ba:	2b00      	cmp	r3, #0
 800e5bc:	d103      	bne.n	800e5c6 <f_open+0x342>
						res = FR_INT_ERR;
 800e5be:	2302      	movs	r3, #2
 800e5c0:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 800e5c4:	e019      	b.n	800e5fa <f_open+0x376>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800e5c6:	697b      	ldr	r3, [r7, #20]
 800e5c8:	899b      	ldrh	r3, [r3, #12]
 800e5ca:	461a      	mov	r2, r3
 800e5cc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800e5ce:	fbb3 f2f2 	udiv	r2, r3, r2
 800e5d2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e5d4:	441a      	add	r2, r3
 800e5d6:	68fb      	ldr	r3, [r7, #12]
 800e5d8:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800e5da:	697b      	ldr	r3, [r7, #20]
 800e5dc:	7858      	ldrb	r0, [r3, #1]
 800e5de:	68fb      	ldr	r3, [r7, #12]
 800e5e0:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800e5e4:	68fb      	ldr	r3, [r7, #12]
 800e5e6:	6a1a      	ldr	r2, [r3, #32]
 800e5e8:	2301      	movs	r3, #1
 800e5ea:	f7fd fc6d 	bl	800bec8 <disk_read>
 800e5ee:	4603      	mov	r3, r0
 800e5f0:	2b00      	cmp	r3, #0
 800e5f2:	d002      	beq.n	800e5fa <f_open+0x376>
 800e5f4:	2301      	movs	r3, #1
 800e5f6:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800e5fa:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800e5fe:	2b00      	cmp	r3, #0
 800e600:	d002      	beq.n	800e608 <f_open+0x384>
 800e602:	68fb      	ldr	r3, [r7, #12]
 800e604:	2200      	movs	r2, #0
 800e606:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800e608:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 800e60c:	4618      	mov	r0, r3
 800e60e:	3768      	adds	r7, #104	@ 0x68
 800e610:	46bd      	mov	sp, r7
 800e612:	bd80      	pop	{r7, pc}

0800e614 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 800e614:	b580      	push	{r7, lr}
 800e616:	b08e      	sub	sp, #56	@ 0x38
 800e618:	af00      	add	r7, sp, #0
 800e61a:	60f8      	str	r0, [r7, #12]
 800e61c:	60b9      	str	r1, [r7, #8]
 800e61e:	607a      	str	r2, [r7, #4]
 800e620:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 800e622:	68bb      	ldr	r3, [r7, #8]
 800e624:	627b      	str	r3, [r7, #36]	@ 0x24


	*br = 0;	/* Clear read byte counter */
 800e626:	683b      	ldr	r3, [r7, #0]
 800e628:	2200      	movs	r2, #0
 800e62a:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 800e62c:	68fb      	ldr	r3, [r7, #12]
 800e62e:	f107 0214 	add.w	r2, r7, #20
 800e632:	4611      	mov	r1, r2
 800e634:	4618      	mov	r0, r3
 800e636:	f7ff fda9 	bl	800e18c <validate>
 800e63a:	4603      	mov	r3, r0
 800e63c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800e640:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800e644:	2b00      	cmp	r3, #0
 800e646:	d107      	bne.n	800e658 <f_read+0x44>
 800e648:	68fb      	ldr	r3, [r7, #12]
 800e64a:	7d5b      	ldrb	r3, [r3, #21]
 800e64c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800e650:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800e654:	2b00      	cmp	r3, #0
 800e656:	d002      	beq.n	800e65e <f_read+0x4a>
 800e658:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800e65c:	e135      	b.n	800e8ca <f_read+0x2b6>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800e65e:	68fb      	ldr	r3, [r7, #12]
 800e660:	7d1b      	ldrb	r3, [r3, #20]
 800e662:	f003 0301 	and.w	r3, r3, #1
 800e666:	2b00      	cmp	r3, #0
 800e668:	d101      	bne.n	800e66e <f_read+0x5a>
 800e66a:	2307      	movs	r3, #7
 800e66c:	e12d      	b.n	800e8ca <f_read+0x2b6>
	remain = fp->obj.objsize - fp->fptr;
 800e66e:	68fb      	ldr	r3, [r7, #12]
 800e670:	68da      	ldr	r2, [r3, #12]
 800e672:	68fb      	ldr	r3, [r7, #12]
 800e674:	699b      	ldr	r3, [r3, #24]
 800e676:	1ad3      	subs	r3, r2, r3
 800e678:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800e67a:	687a      	ldr	r2, [r7, #4]
 800e67c:	6a3b      	ldr	r3, [r7, #32]
 800e67e:	429a      	cmp	r2, r3
 800e680:	f240 811e 	bls.w	800e8c0 <f_read+0x2ac>
 800e684:	6a3b      	ldr	r3, [r7, #32]
 800e686:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 800e688:	e11a      	b.n	800e8c0 <f_read+0x2ac>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 800e68a:	68fb      	ldr	r3, [r7, #12]
 800e68c:	699b      	ldr	r3, [r3, #24]
 800e68e:	697a      	ldr	r2, [r7, #20]
 800e690:	8992      	ldrh	r2, [r2, #12]
 800e692:	fbb3 f1f2 	udiv	r1, r3, r2
 800e696:	fb01 f202 	mul.w	r2, r1, r2
 800e69a:	1a9b      	subs	r3, r3, r2
 800e69c:	2b00      	cmp	r3, #0
 800e69e:	f040 80d5 	bne.w	800e84c <f_read+0x238>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 800e6a2:	68fb      	ldr	r3, [r7, #12]
 800e6a4:	699b      	ldr	r3, [r3, #24]
 800e6a6:	697a      	ldr	r2, [r7, #20]
 800e6a8:	8992      	ldrh	r2, [r2, #12]
 800e6aa:	fbb3 f3f2 	udiv	r3, r3, r2
 800e6ae:	697a      	ldr	r2, [r7, #20]
 800e6b0:	8952      	ldrh	r2, [r2, #10]
 800e6b2:	3a01      	subs	r2, #1
 800e6b4:	4013      	ands	r3, r2
 800e6b6:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 800e6b8:	69fb      	ldr	r3, [r7, #28]
 800e6ba:	2b00      	cmp	r3, #0
 800e6bc:	d12f      	bne.n	800e71e <f_read+0x10a>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800e6be:	68fb      	ldr	r3, [r7, #12]
 800e6c0:	699b      	ldr	r3, [r3, #24]
 800e6c2:	2b00      	cmp	r3, #0
 800e6c4:	d103      	bne.n	800e6ce <f_read+0xba>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 800e6c6:	68fb      	ldr	r3, [r7, #12]
 800e6c8:	689b      	ldr	r3, [r3, #8]
 800e6ca:	633b      	str	r3, [r7, #48]	@ 0x30
 800e6cc:	e013      	b.n	800e6f6 <f_read+0xe2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800e6ce:	68fb      	ldr	r3, [r7, #12]
 800e6d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e6d2:	2b00      	cmp	r3, #0
 800e6d4:	d007      	beq.n	800e6e6 <f_read+0xd2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800e6d6:	68fb      	ldr	r3, [r7, #12]
 800e6d8:	699b      	ldr	r3, [r3, #24]
 800e6da:	4619      	mov	r1, r3
 800e6dc:	68f8      	ldr	r0, [r7, #12]
 800e6de:	f7fe faaa 	bl	800cc36 <clmt_clust>
 800e6e2:	6338      	str	r0, [r7, #48]	@ 0x30
 800e6e4:	e007      	b.n	800e6f6 <f_read+0xe2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 800e6e6:	68fa      	ldr	r2, [r7, #12]
 800e6e8:	68fb      	ldr	r3, [r7, #12]
 800e6ea:	69db      	ldr	r3, [r3, #28]
 800e6ec:	4619      	mov	r1, r3
 800e6ee:	4610      	mov	r0, r2
 800e6f0:	f7fd ffb7 	bl	800c662 <get_fat>
 800e6f4:	6338      	str	r0, [r7, #48]	@ 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800e6f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e6f8:	2b01      	cmp	r3, #1
 800e6fa:	d804      	bhi.n	800e706 <f_read+0xf2>
 800e6fc:	68fb      	ldr	r3, [r7, #12]
 800e6fe:	2202      	movs	r2, #2
 800e700:	755a      	strb	r2, [r3, #21]
 800e702:	2302      	movs	r3, #2
 800e704:	e0e1      	b.n	800e8ca <f_read+0x2b6>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800e706:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e708:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e70c:	d104      	bne.n	800e718 <f_read+0x104>
 800e70e:	68fb      	ldr	r3, [r7, #12]
 800e710:	2201      	movs	r2, #1
 800e712:	755a      	strb	r2, [r3, #21]
 800e714:	2301      	movs	r3, #1
 800e716:	e0d8      	b.n	800e8ca <f_read+0x2b6>
				fp->clust = clst;				/* Update current cluster */
 800e718:	68fb      	ldr	r3, [r7, #12]
 800e71a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e71c:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800e71e:	697a      	ldr	r2, [r7, #20]
 800e720:	68fb      	ldr	r3, [r7, #12]
 800e722:	69db      	ldr	r3, [r3, #28]
 800e724:	4619      	mov	r1, r3
 800e726:	4610      	mov	r0, r2
 800e728:	f7fd ff7c 	bl	800c624 <clust2sect>
 800e72c:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800e72e:	69bb      	ldr	r3, [r7, #24]
 800e730:	2b00      	cmp	r3, #0
 800e732:	d104      	bne.n	800e73e <f_read+0x12a>
 800e734:	68fb      	ldr	r3, [r7, #12]
 800e736:	2202      	movs	r2, #2
 800e738:	755a      	strb	r2, [r3, #21]
 800e73a:	2302      	movs	r3, #2
 800e73c:	e0c5      	b.n	800e8ca <f_read+0x2b6>
			sect += csect;
 800e73e:	69ba      	ldr	r2, [r7, #24]
 800e740:	69fb      	ldr	r3, [r7, #28]
 800e742:	4413      	add	r3, r2
 800e744:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 800e746:	697b      	ldr	r3, [r7, #20]
 800e748:	899b      	ldrh	r3, [r3, #12]
 800e74a:	461a      	mov	r2, r3
 800e74c:	687b      	ldr	r3, [r7, #4]
 800e74e:	fbb3 f3f2 	udiv	r3, r3, r2
 800e752:	62bb      	str	r3, [r7, #40]	@ 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 800e754:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e756:	2b00      	cmp	r3, #0
 800e758:	d041      	beq.n	800e7de <f_read+0x1ca>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800e75a:	69fa      	ldr	r2, [r7, #28]
 800e75c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e75e:	4413      	add	r3, r2
 800e760:	697a      	ldr	r2, [r7, #20]
 800e762:	8952      	ldrh	r2, [r2, #10]
 800e764:	4293      	cmp	r3, r2
 800e766:	d905      	bls.n	800e774 <f_read+0x160>
					cc = fs->csize - csect;
 800e768:	697b      	ldr	r3, [r7, #20]
 800e76a:	895b      	ldrh	r3, [r3, #10]
 800e76c:	461a      	mov	r2, r3
 800e76e:	69fb      	ldr	r3, [r7, #28]
 800e770:	1ad3      	subs	r3, r2, r3
 800e772:	62bb      	str	r3, [r7, #40]	@ 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800e774:	697b      	ldr	r3, [r7, #20]
 800e776:	7858      	ldrb	r0, [r3, #1]
 800e778:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e77a:	69ba      	ldr	r2, [r7, #24]
 800e77c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800e77e:	f7fd fba3 	bl	800bec8 <disk_read>
 800e782:	4603      	mov	r3, r0
 800e784:	2b00      	cmp	r3, #0
 800e786:	d004      	beq.n	800e792 <f_read+0x17e>
 800e788:	68fb      	ldr	r3, [r7, #12]
 800e78a:	2201      	movs	r2, #1
 800e78c:	755a      	strb	r2, [r3, #21]
 800e78e:	2301      	movs	r3, #1
 800e790:	e09b      	b.n	800e8ca <f_read+0x2b6>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 800e792:	68fb      	ldr	r3, [r7, #12]
 800e794:	7d1b      	ldrb	r3, [r3, #20]
 800e796:	b25b      	sxtb	r3, r3
 800e798:	2b00      	cmp	r3, #0
 800e79a:	da18      	bge.n	800e7ce <f_read+0x1ba>
 800e79c:	68fb      	ldr	r3, [r7, #12]
 800e79e:	6a1a      	ldr	r2, [r3, #32]
 800e7a0:	69bb      	ldr	r3, [r7, #24]
 800e7a2:	1ad3      	subs	r3, r2, r3
 800e7a4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800e7a6:	429a      	cmp	r2, r3
 800e7a8:	d911      	bls.n	800e7ce <f_read+0x1ba>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 800e7aa:	68fb      	ldr	r3, [r7, #12]
 800e7ac:	6a1a      	ldr	r2, [r3, #32]
 800e7ae:	69bb      	ldr	r3, [r7, #24]
 800e7b0:	1ad3      	subs	r3, r2, r3
 800e7b2:	697a      	ldr	r2, [r7, #20]
 800e7b4:	8992      	ldrh	r2, [r2, #12]
 800e7b6:	fb02 f303 	mul.w	r3, r2, r3
 800e7ba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e7bc:	18d0      	adds	r0, r2, r3
 800e7be:	68fb      	ldr	r3, [r7, #12]
 800e7c0:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800e7c4:	697b      	ldr	r3, [r7, #20]
 800e7c6:	899b      	ldrh	r3, [r3, #12]
 800e7c8:	461a      	mov	r2, r3
 800e7ca:	f7fd fc5e 	bl	800c08a <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 800e7ce:	697b      	ldr	r3, [r7, #20]
 800e7d0:	899b      	ldrh	r3, [r3, #12]
 800e7d2:	461a      	mov	r2, r3
 800e7d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e7d6:	fb02 f303 	mul.w	r3, r2, r3
 800e7da:	62fb      	str	r3, [r7, #44]	@ 0x2c
				continue;
 800e7dc:	e05c      	b.n	800e898 <f_read+0x284>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 800e7de:	68fb      	ldr	r3, [r7, #12]
 800e7e0:	6a1b      	ldr	r3, [r3, #32]
 800e7e2:	69ba      	ldr	r2, [r7, #24]
 800e7e4:	429a      	cmp	r2, r3
 800e7e6:	d02e      	beq.n	800e846 <f_read+0x232>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800e7e8:	68fb      	ldr	r3, [r7, #12]
 800e7ea:	7d1b      	ldrb	r3, [r3, #20]
 800e7ec:	b25b      	sxtb	r3, r3
 800e7ee:	2b00      	cmp	r3, #0
 800e7f0:	da18      	bge.n	800e824 <f_read+0x210>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800e7f2:	697b      	ldr	r3, [r7, #20]
 800e7f4:	7858      	ldrb	r0, [r3, #1]
 800e7f6:	68fb      	ldr	r3, [r7, #12]
 800e7f8:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800e7fc:	68fb      	ldr	r3, [r7, #12]
 800e7fe:	6a1a      	ldr	r2, [r3, #32]
 800e800:	2301      	movs	r3, #1
 800e802:	f7fd fb81 	bl	800bf08 <disk_write>
 800e806:	4603      	mov	r3, r0
 800e808:	2b00      	cmp	r3, #0
 800e80a:	d004      	beq.n	800e816 <f_read+0x202>
 800e80c:	68fb      	ldr	r3, [r7, #12]
 800e80e:	2201      	movs	r2, #1
 800e810:	755a      	strb	r2, [r3, #21]
 800e812:	2301      	movs	r3, #1
 800e814:	e059      	b.n	800e8ca <f_read+0x2b6>
					fp->flag &= (BYTE)~FA_DIRTY;
 800e816:	68fb      	ldr	r3, [r7, #12]
 800e818:	7d1b      	ldrb	r3, [r3, #20]
 800e81a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800e81e:	b2da      	uxtb	r2, r3
 800e820:	68fb      	ldr	r3, [r7, #12]
 800e822:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800e824:	697b      	ldr	r3, [r7, #20]
 800e826:	7858      	ldrb	r0, [r3, #1]
 800e828:	68fb      	ldr	r3, [r7, #12]
 800e82a:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800e82e:	2301      	movs	r3, #1
 800e830:	69ba      	ldr	r2, [r7, #24]
 800e832:	f7fd fb49 	bl	800bec8 <disk_read>
 800e836:	4603      	mov	r3, r0
 800e838:	2b00      	cmp	r3, #0
 800e83a:	d004      	beq.n	800e846 <f_read+0x232>
 800e83c:	68fb      	ldr	r3, [r7, #12]
 800e83e:	2201      	movs	r2, #1
 800e840:	755a      	strb	r2, [r3, #21]
 800e842:	2301      	movs	r3, #1
 800e844:	e041      	b.n	800e8ca <f_read+0x2b6>
			}
#endif
			fp->sect = sect;
 800e846:	68fb      	ldr	r3, [r7, #12]
 800e848:	69ba      	ldr	r2, [r7, #24]
 800e84a:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800e84c:	697b      	ldr	r3, [r7, #20]
 800e84e:	899b      	ldrh	r3, [r3, #12]
 800e850:	4618      	mov	r0, r3
 800e852:	68fb      	ldr	r3, [r7, #12]
 800e854:	699b      	ldr	r3, [r3, #24]
 800e856:	697a      	ldr	r2, [r7, #20]
 800e858:	8992      	ldrh	r2, [r2, #12]
 800e85a:	fbb3 f1f2 	udiv	r1, r3, r2
 800e85e:	fb01 f202 	mul.w	r2, r1, r2
 800e862:	1a9b      	subs	r3, r3, r2
 800e864:	1ac3      	subs	r3, r0, r3
 800e866:	62fb      	str	r3, [r7, #44]	@ 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 800e868:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800e86a:	687b      	ldr	r3, [r7, #4]
 800e86c:	429a      	cmp	r2, r3
 800e86e:	d901      	bls.n	800e874 <f_read+0x260>
 800e870:	687b      	ldr	r3, [r7, #4]
 800e872:	62fb      	str	r3, [r7, #44]	@ 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 800e874:	68fb      	ldr	r3, [r7, #12]
 800e876:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800e87a:	68fb      	ldr	r3, [r7, #12]
 800e87c:	699b      	ldr	r3, [r3, #24]
 800e87e:	697a      	ldr	r2, [r7, #20]
 800e880:	8992      	ldrh	r2, [r2, #12]
 800e882:	fbb3 f0f2 	udiv	r0, r3, r2
 800e886:	fb00 f202 	mul.w	r2, r0, r2
 800e88a:	1a9b      	subs	r3, r3, r2
 800e88c:	440b      	add	r3, r1
 800e88e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800e890:	4619      	mov	r1, r3
 800e892:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800e894:	f7fd fbf9 	bl	800c08a <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 800e898:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e89a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e89c:	4413      	add	r3, r2
 800e89e:	627b      	str	r3, [r7, #36]	@ 0x24
 800e8a0:	68fb      	ldr	r3, [r7, #12]
 800e8a2:	699a      	ldr	r2, [r3, #24]
 800e8a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e8a6:	441a      	add	r2, r3
 800e8a8:	68fb      	ldr	r3, [r7, #12]
 800e8aa:	619a      	str	r2, [r3, #24]
 800e8ac:	683b      	ldr	r3, [r7, #0]
 800e8ae:	681a      	ldr	r2, [r3, #0]
 800e8b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e8b2:	441a      	add	r2, r3
 800e8b4:	683b      	ldr	r3, [r7, #0]
 800e8b6:	601a      	str	r2, [r3, #0]
 800e8b8:	687a      	ldr	r2, [r7, #4]
 800e8ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e8bc:	1ad3      	subs	r3, r2, r3
 800e8be:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 800e8c0:	687b      	ldr	r3, [r7, #4]
 800e8c2:	2b00      	cmp	r3, #0
 800e8c4:	f47f aee1 	bne.w	800e68a <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 800e8c8:	2300      	movs	r3, #0
}
 800e8ca:	4618      	mov	r0, r3
 800e8cc:	3738      	adds	r7, #56	@ 0x38
 800e8ce:	46bd      	mov	sp, r7
 800e8d0:	bd80      	pop	{r7, pc}

0800e8d2 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800e8d2:	b580      	push	{r7, lr}
 800e8d4:	b08c      	sub	sp, #48	@ 0x30
 800e8d6:	af00      	add	r7, sp, #0
 800e8d8:	60f8      	str	r0, [r7, #12]
 800e8da:	60b9      	str	r1, [r7, #8]
 800e8dc:	607a      	str	r2, [r7, #4]
 800e8de:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800e8e0:	68bb      	ldr	r3, [r7, #8]
 800e8e2:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800e8e4:	683b      	ldr	r3, [r7, #0]
 800e8e6:	2200      	movs	r2, #0
 800e8e8:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800e8ea:	68fb      	ldr	r3, [r7, #12]
 800e8ec:	f107 0210 	add.w	r2, r7, #16
 800e8f0:	4611      	mov	r1, r2
 800e8f2:	4618      	mov	r0, r3
 800e8f4:	f7ff fc4a 	bl	800e18c <validate>
 800e8f8:	4603      	mov	r3, r0
 800e8fa:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800e8fe:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800e902:	2b00      	cmp	r3, #0
 800e904:	d107      	bne.n	800e916 <f_write+0x44>
 800e906:	68fb      	ldr	r3, [r7, #12]
 800e908:	7d5b      	ldrb	r3, [r3, #21]
 800e90a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 800e90e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800e912:	2b00      	cmp	r3, #0
 800e914:	d002      	beq.n	800e91c <f_write+0x4a>
 800e916:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800e91a:	e16a      	b.n	800ebf2 <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800e91c:	68fb      	ldr	r3, [r7, #12]
 800e91e:	7d1b      	ldrb	r3, [r3, #20]
 800e920:	f003 0302 	and.w	r3, r3, #2
 800e924:	2b00      	cmp	r3, #0
 800e926:	d101      	bne.n	800e92c <f_write+0x5a>
 800e928:	2307      	movs	r3, #7
 800e92a:	e162      	b.n	800ebf2 <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800e92c:	68fb      	ldr	r3, [r7, #12]
 800e92e:	699a      	ldr	r2, [r3, #24]
 800e930:	687b      	ldr	r3, [r7, #4]
 800e932:	441a      	add	r2, r3
 800e934:	68fb      	ldr	r3, [r7, #12]
 800e936:	699b      	ldr	r3, [r3, #24]
 800e938:	429a      	cmp	r2, r3
 800e93a:	f080 814c 	bcs.w	800ebd6 <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800e93e:	68fb      	ldr	r3, [r7, #12]
 800e940:	699b      	ldr	r3, [r3, #24]
 800e942:	43db      	mvns	r3, r3
 800e944:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800e946:	e146      	b.n	800ebd6 <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800e948:	68fb      	ldr	r3, [r7, #12]
 800e94a:	699b      	ldr	r3, [r3, #24]
 800e94c:	693a      	ldr	r2, [r7, #16]
 800e94e:	8992      	ldrh	r2, [r2, #12]
 800e950:	fbb3 f1f2 	udiv	r1, r3, r2
 800e954:	fb01 f202 	mul.w	r2, r1, r2
 800e958:	1a9b      	subs	r3, r3, r2
 800e95a:	2b00      	cmp	r3, #0
 800e95c:	f040 80f1 	bne.w	800eb42 <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800e960:	68fb      	ldr	r3, [r7, #12]
 800e962:	699b      	ldr	r3, [r3, #24]
 800e964:	693a      	ldr	r2, [r7, #16]
 800e966:	8992      	ldrh	r2, [r2, #12]
 800e968:	fbb3 f3f2 	udiv	r3, r3, r2
 800e96c:	693a      	ldr	r2, [r7, #16]
 800e96e:	8952      	ldrh	r2, [r2, #10]
 800e970:	3a01      	subs	r2, #1
 800e972:	4013      	ands	r3, r2
 800e974:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800e976:	69bb      	ldr	r3, [r7, #24]
 800e978:	2b00      	cmp	r3, #0
 800e97a:	d143      	bne.n	800ea04 <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800e97c:	68fb      	ldr	r3, [r7, #12]
 800e97e:	699b      	ldr	r3, [r3, #24]
 800e980:	2b00      	cmp	r3, #0
 800e982:	d10c      	bne.n	800e99e <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800e984:	68fb      	ldr	r3, [r7, #12]
 800e986:	689b      	ldr	r3, [r3, #8]
 800e988:	62bb      	str	r3, [r7, #40]	@ 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800e98a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e98c:	2b00      	cmp	r3, #0
 800e98e:	d11a      	bne.n	800e9c6 <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800e990:	68fb      	ldr	r3, [r7, #12]
 800e992:	2100      	movs	r1, #0
 800e994:	4618      	mov	r0, r3
 800e996:	f7fe f8b6 	bl	800cb06 <create_chain>
 800e99a:	62b8      	str	r0, [r7, #40]	@ 0x28
 800e99c:	e013      	b.n	800e9c6 <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800e99e:	68fb      	ldr	r3, [r7, #12]
 800e9a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e9a2:	2b00      	cmp	r3, #0
 800e9a4:	d007      	beq.n	800e9b6 <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800e9a6:	68fb      	ldr	r3, [r7, #12]
 800e9a8:	699b      	ldr	r3, [r3, #24]
 800e9aa:	4619      	mov	r1, r3
 800e9ac:	68f8      	ldr	r0, [r7, #12]
 800e9ae:	f7fe f942 	bl	800cc36 <clmt_clust>
 800e9b2:	62b8      	str	r0, [r7, #40]	@ 0x28
 800e9b4:	e007      	b.n	800e9c6 <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800e9b6:	68fa      	ldr	r2, [r7, #12]
 800e9b8:	68fb      	ldr	r3, [r7, #12]
 800e9ba:	69db      	ldr	r3, [r3, #28]
 800e9bc:	4619      	mov	r1, r3
 800e9be:	4610      	mov	r0, r2
 800e9c0:	f7fe f8a1 	bl	800cb06 <create_chain>
 800e9c4:	62b8      	str	r0, [r7, #40]	@ 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800e9c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e9c8:	2b00      	cmp	r3, #0
 800e9ca:	f000 8109 	beq.w	800ebe0 <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800e9ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e9d0:	2b01      	cmp	r3, #1
 800e9d2:	d104      	bne.n	800e9de <f_write+0x10c>
 800e9d4:	68fb      	ldr	r3, [r7, #12]
 800e9d6:	2202      	movs	r2, #2
 800e9d8:	755a      	strb	r2, [r3, #21]
 800e9da:	2302      	movs	r3, #2
 800e9dc:	e109      	b.n	800ebf2 <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800e9de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e9e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e9e4:	d104      	bne.n	800e9f0 <f_write+0x11e>
 800e9e6:	68fb      	ldr	r3, [r7, #12]
 800e9e8:	2201      	movs	r2, #1
 800e9ea:	755a      	strb	r2, [r3, #21]
 800e9ec:	2301      	movs	r3, #1
 800e9ee:	e100      	b.n	800ebf2 <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 800e9f0:	68fb      	ldr	r3, [r7, #12]
 800e9f2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800e9f4:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800e9f6:	68fb      	ldr	r3, [r7, #12]
 800e9f8:	689b      	ldr	r3, [r3, #8]
 800e9fa:	2b00      	cmp	r3, #0
 800e9fc:	d102      	bne.n	800ea04 <f_write+0x132>
 800e9fe:	68fb      	ldr	r3, [r7, #12]
 800ea00:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800ea02:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800ea04:	68fb      	ldr	r3, [r7, #12]
 800ea06:	7d1b      	ldrb	r3, [r3, #20]
 800ea08:	b25b      	sxtb	r3, r3
 800ea0a:	2b00      	cmp	r3, #0
 800ea0c:	da18      	bge.n	800ea40 <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800ea0e:	693b      	ldr	r3, [r7, #16]
 800ea10:	7858      	ldrb	r0, [r3, #1]
 800ea12:	68fb      	ldr	r3, [r7, #12]
 800ea14:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800ea18:	68fb      	ldr	r3, [r7, #12]
 800ea1a:	6a1a      	ldr	r2, [r3, #32]
 800ea1c:	2301      	movs	r3, #1
 800ea1e:	f7fd fa73 	bl	800bf08 <disk_write>
 800ea22:	4603      	mov	r3, r0
 800ea24:	2b00      	cmp	r3, #0
 800ea26:	d004      	beq.n	800ea32 <f_write+0x160>
 800ea28:	68fb      	ldr	r3, [r7, #12]
 800ea2a:	2201      	movs	r2, #1
 800ea2c:	755a      	strb	r2, [r3, #21]
 800ea2e:	2301      	movs	r3, #1
 800ea30:	e0df      	b.n	800ebf2 <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 800ea32:	68fb      	ldr	r3, [r7, #12]
 800ea34:	7d1b      	ldrb	r3, [r3, #20]
 800ea36:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ea3a:	b2da      	uxtb	r2, r3
 800ea3c:	68fb      	ldr	r3, [r7, #12]
 800ea3e:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800ea40:	693a      	ldr	r2, [r7, #16]
 800ea42:	68fb      	ldr	r3, [r7, #12]
 800ea44:	69db      	ldr	r3, [r3, #28]
 800ea46:	4619      	mov	r1, r3
 800ea48:	4610      	mov	r0, r2
 800ea4a:	f7fd fdeb 	bl	800c624 <clust2sect>
 800ea4e:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800ea50:	697b      	ldr	r3, [r7, #20]
 800ea52:	2b00      	cmp	r3, #0
 800ea54:	d104      	bne.n	800ea60 <f_write+0x18e>
 800ea56:	68fb      	ldr	r3, [r7, #12]
 800ea58:	2202      	movs	r2, #2
 800ea5a:	755a      	strb	r2, [r3, #21]
 800ea5c:	2302      	movs	r3, #2
 800ea5e:	e0c8      	b.n	800ebf2 <f_write+0x320>
			sect += csect;
 800ea60:	697a      	ldr	r2, [r7, #20]
 800ea62:	69bb      	ldr	r3, [r7, #24]
 800ea64:	4413      	add	r3, r2
 800ea66:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800ea68:	693b      	ldr	r3, [r7, #16]
 800ea6a:	899b      	ldrh	r3, [r3, #12]
 800ea6c:	461a      	mov	r2, r3
 800ea6e:	687b      	ldr	r3, [r7, #4]
 800ea70:	fbb3 f3f2 	udiv	r3, r3, r2
 800ea74:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800ea76:	6a3b      	ldr	r3, [r7, #32]
 800ea78:	2b00      	cmp	r3, #0
 800ea7a:	d043      	beq.n	800eb04 <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800ea7c:	69ba      	ldr	r2, [r7, #24]
 800ea7e:	6a3b      	ldr	r3, [r7, #32]
 800ea80:	4413      	add	r3, r2
 800ea82:	693a      	ldr	r2, [r7, #16]
 800ea84:	8952      	ldrh	r2, [r2, #10]
 800ea86:	4293      	cmp	r3, r2
 800ea88:	d905      	bls.n	800ea96 <f_write+0x1c4>
					cc = fs->csize - csect;
 800ea8a:	693b      	ldr	r3, [r7, #16]
 800ea8c:	895b      	ldrh	r3, [r3, #10]
 800ea8e:	461a      	mov	r2, r3
 800ea90:	69bb      	ldr	r3, [r7, #24]
 800ea92:	1ad3      	subs	r3, r2, r3
 800ea94:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800ea96:	693b      	ldr	r3, [r7, #16]
 800ea98:	7858      	ldrb	r0, [r3, #1]
 800ea9a:	6a3b      	ldr	r3, [r7, #32]
 800ea9c:	697a      	ldr	r2, [r7, #20]
 800ea9e:	69f9      	ldr	r1, [r7, #28]
 800eaa0:	f7fd fa32 	bl	800bf08 <disk_write>
 800eaa4:	4603      	mov	r3, r0
 800eaa6:	2b00      	cmp	r3, #0
 800eaa8:	d004      	beq.n	800eab4 <f_write+0x1e2>
 800eaaa:	68fb      	ldr	r3, [r7, #12]
 800eaac:	2201      	movs	r2, #1
 800eaae:	755a      	strb	r2, [r3, #21]
 800eab0:	2301      	movs	r3, #1
 800eab2:	e09e      	b.n	800ebf2 <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800eab4:	68fb      	ldr	r3, [r7, #12]
 800eab6:	6a1a      	ldr	r2, [r3, #32]
 800eab8:	697b      	ldr	r3, [r7, #20]
 800eaba:	1ad3      	subs	r3, r2, r3
 800eabc:	6a3a      	ldr	r2, [r7, #32]
 800eabe:	429a      	cmp	r2, r3
 800eac0:	d918      	bls.n	800eaf4 <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800eac2:	68fb      	ldr	r3, [r7, #12]
 800eac4:	f103 0030 	add.w	r0, r3, #48	@ 0x30
 800eac8:	68fb      	ldr	r3, [r7, #12]
 800eaca:	6a1a      	ldr	r2, [r3, #32]
 800eacc:	697b      	ldr	r3, [r7, #20]
 800eace:	1ad3      	subs	r3, r2, r3
 800ead0:	693a      	ldr	r2, [r7, #16]
 800ead2:	8992      	ldrh	r2, [r2, #12]
 800ead4:	fb02 f303 	mul.w	r3, r2, r3
 800ead8:	69fa      	ldr	r2, [r7, #28]
 800eada:	18d1      	adds	r1, r2, r3
 800eadc:	693b      	ldr	r3, [r7, #16]
 800eade:	899b      	ldrh	r3, [r3, #12]
 800eae0:	461a      	mov	r2, r3
 800eae2:	f7fd fad2 	bl	800c08a <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800eae6:	68fb      	ldr	r3, [r7, #12]
 800eae8:	7d1b      	ldrb	r3, [r3, #20]
 800eaea:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800eaee:	b2da      	uxtb	r2, r3
 800eaf0:	68fb      	ldr	r3, [r7, #12]
 800eaf2:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800eaf4:	693b      	ldr	r3, [r7, #16]
 800eaf6:	899b      	ldrh	r3, [r3, #12]
 800eaf8:	461a      	mov	r2, r3
 800eafa:	6a3b      	ldr	r3, [r7, #32]
 800eafc:	fb02 f303 	mul.w	r3, r2, r3
 800eb00:	627b      	str	r3, [r7, #36]	@ 0x24
				continue;
 800eb02:	e04b      	b.n	800eb9c <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800eb04:	68fb      	ldr	r3, [r7, #12]
 800eb06:	6a1b      	ldr	r3, [r3, #32]
 800eb08:	697a      	ldr	r2, [r7, #20]
 800eb0a:	429a      	cmp	r2, r3
 800eb0c:	d016      	beq.n	800eb3c <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 800eb0e:	68fb      	ldr	r3, [r7, #12]
 800eb10:	699a      	ldr	r2, [r3, #24]
 800eb12:	68fb      	ldr	r3, [r7, #12]
 800eb14:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800eb16:	429a      	cmp	r2, r3
 800eb18:	d210      	bcs.n	800eb3c <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800eb1a:	693b      	ldr	r3, [r7, #16]
 800eb1c:	7858      	ldrb	r0, [r3, #1]
 800eb1e:	68fb      	ldr	r3, [r7, #12]
 800eb20:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800eb24:	2301      	movs	r3, #1
 800eb26:	697a      	ldr	r2, [r7, #20]
 800eb28:	f7fd f9ce 	bl	800bec8 <disk_read>
 800eb2c:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800eb2e:	2b00      	cmp	r3, #0
 800eb30:	d004      	beq.n	800eb3c <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 800eb32:	68fb      	ldr	r3, [r7, #12]
 800eb34:	2201      	movs	r2, #1
 800eb36:	755a      	strb	r2, [r3, #21]
 800eb38:	2301      	movs	r3, #1
 800eb3a:	e05a      	b.n	800ebf2 <f_write+0x320>
			}
#endif
			fp->sect = sect;
 800eb3c:	68fb      	ldr	r3, [r7, #12]
 800eb3e:	697a      	ldr	r2, [r7, #20]
 800eb40:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800eb42:	693b      	ldr	r3, [r7, #16]
 800eb44:	899b      	ldrh	r3, [r3, #12]
 800eb46:	4618      	mov	r0, r3
 800eb48:	68fb      	ldr	r3, [r7, #12]
 800eb4a:	699b      	ldr	r3, [r3, #24]
 800eb4c:	693a      	ldr	r2, [r7, #16]
 800eb4e:	8992      	ldrh	r2, [r2, #12]
 800eb50:	fbb3 f1f2 	udiv	r1, r3, r2
 800eb54:	fb01 f202 	mul.w	r2, r1, r2
 800eb58:	1a9b      	subs	r3, r3, r2
 800eb5a:	1ac3      	subs	r3, r0, r3
 800eb5c:	627b      	str	r3, [r7, #36]	@ 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800eb5e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800eb60:	687b      	ldr	r3, [r7, #4]
 800eb62:	429a      	cmp	r2, r3
 800eb64:	d901      	bls.n	800eb6a <f_write+0x298>
 800eb66:	687b      	ldr	r3, [r7, #4]
 800eb68:	627b      	str	r3, [r7, #36]	@ 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800eb6a:	68fb      	ldr	r3, [r7, #12]
 800eb6c:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800eb70:	68fb      	ldr	r3, [r7, #12]
 800eb72:	699b      	ldr	r3, [r3, #24]
 800eb74:	693a      	ldr	r2, [r7, #16]
 800eb76:	8992      	ldrh	r2, [r2, #12]
 800eb78:	fbb3 f0f2 	udiv	r0, r3, r2
 800eb7c:	fb00 f202 	mul.w	r2, r0, r2
 800eb80:	1a9b      	subs	r3, r3, r2
 800eb82:	440b      	add	r3, r1
 800eb84:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800eb86:	69f9      	ldr	r1, [r7, #28]
 800eb88:	4618      	mov	r0, r3
 800eb8a:	f7fd fa7e 	bl	800c08a <mem_cpy>
		fp->flag |= FA_DIRTY;
 800eb8e:	68fb      	ldr	r3, [r7, #12]
 800eb90:	7d1b      	ldrb	r3, [r3, #20]
 800eb92:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800eb96:	b2da      	uxtb	r2, r3
 800eb98:	68fb      	ldr	r3, [r7, #12]
 800eb9a:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800eb9c:	69fa      	ldr	r2, [r7, #28]
 800eb9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eba0:	4413      	add	r3, r2
 800eba2:	61fb      	str	r3, [r7, #28]
 800eba4:	68fb      	ldr	r3, [r7, #12]
 800eba6:	699a      	ldr	r2, [r3, #24]
 800eba8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ebaa:	441a      	add	r2, r3
 800ebac:	68fb      	ldr	r3, [r7, #12]
 800ebae:	619a      	str	r2, [r3, #24]
 800ebb0:	68fb      	ldr	r3, [r7, #12]
 800ebb2:	68da      	ldr	r2, [r3, #12]
 800ebb4:	68fb      	ldr	r3, [r7, #12]
 800ebb6:	699b      	ldr	r3, [r3, #24]
 800ebb8:	429a      	cmp	r2, r3
 800ebba:	bf38      	it	cc
 800ebbc:	461a      	movcc	r2, r3
 800ebbe:	68fb      	ldr	r3, [r7, #12]
 800ebc0:	60da      	str	r2, [r3, #12]
 800ebc2:	683b      	ldr	r3, [r7, #0]
 800ebc4:	681a      	ldr	r2, [r3, #0]
 800ebc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ebc8:	441a      	add	r2, r3
 800ebca:	683b      	ldr	r3, [r7, #0]
 800ebcc:	601a      	str	r2, [r3, #0]
 800ebce:	687a      	ldr	r2, [r7, #4]
 800ebd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ebd2:	1ad3      	subs	r3, r2, r3
 800ebd4:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800ebd6:	687b      	ldr	r3, [r7, #4]
 800ebd8:	2b00      	cmp	r3, #0
 800ebda:	f47f aeb5 	bne.w	800e948 <f_write+0x76>
 800ebde:	e000      	b.n	800ebe2 <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800ebe0:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800ebe2:	68fb      	ldr	r3, [r7, #12]
 800ebe4:	7d1b      	ldrb	r3, [r3, #20]
 800ebe6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ebea:	b2da      	uxtb	r2, r3
 800ebec:	68fb      	ldr	r3, [r7, #12]
 800ebee:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800ebf0:	2300      	movs	r3, #0
}
 800ebf2:	4618      	mov	r0, r3
 800ebf4:	3730      	adds	r7, #48	@ 0x30
 800ebf6:	46bd      	mov	sp, r7
 800ebf8:	bd80      	pop	{r7, pc}

0800ebfa <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800ebfa:	b580      	push	{r7, lr}
 800ebfc:	b086      	sub	sp, #24
 800ebfe:	af00      	add	r7, sp, #0
 800ec00:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800ec02:	687b      	ldr	r3, [r7, #4]
 800ec04:	f107 0208 	add.w	r2, r7, #8
 800ec08:	4611      	mov	r1, r2
 800ec0a:	4618      	mov	r0, r3
 800ec0c:	f7ff fabe 	bl	800e18c <validate>
 800ec10:	4603      	mov	r3, r0
 800ec12:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800ec14:	7dfb      	ldrb	r3, [r7, #23]
 800ec16:	2b00      	cmp	r3, #0
 800ec18:	d168      	bne.n	800ecec <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800ec1a:	687b      	ldr	r3, [r7, #4]
 800ec1c:	7d1b      	ldrb	r3, [r3, #20]
 800ec1e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ec22:	2b00      	cmp	r3, #0
 800ec24:	d062      	beq.n	800ecec <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800ec26:	687b      	ldr	r3, [r7, #4]
 800ec28:	7d1b      	ldrb	r3, [r3, #20]
 800ec2a:	b25b      	sxtb	r3, r3
 800ec2c:	2b00      	cmp	r3, #0
 800ec2e:	da15      	bge.n	800ec5c <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800ec30:	68bb      	ldr	r3, [r7, #8]
 800ec32:	7858      	ldrb	r0, [r3, #1]
 800ec34:	687b      	ldr	r3, [r7, #4]
 800ec36:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800ec3a:	687b      	ldr	r3, [r7, #4]
 800ec3c:	6a1a      	ldr	r2, [r3, #32]
 800ec3e:	2301      	movs	r3, #1
 800ec40:	f7fd f962 	bl	800bf08 <disk_write>
 800ec44:	4603      	mov	r3, r0
 800ec46:	2b00      	cmp	r3, #0
 800ec48:	d001      	beq.n	800ec4e <f_sync+0x54>
 800ec4a:	2301      	movs	r3, #1
 800ec4c:	e04f      	b.n	800ecee <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800ec4e:	687b      	ldr	r3, [r7, #4]
 800ec50:	7d1b      	ldrb	r3, [r3, #20]
 800ec52:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ec56:	b2da      	uxtb	r2, r3
 800ec58:	687b      	ldr	r3, [r7, #4]
 800ec5a:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800ec5c:	f7fc fbac 	bl	800b3b8 <get_fattime>
 800ec60:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800ec62:	68ba      	ldr	r2, [r7, #8]
 800ec64:	687b      	ldr	r3, [r7, #4]
 800ec66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ec68:	4619      	mov	r1, r3
 800ec6a:	4610      	mov	r0, r2
 800ec6c:	f7fd fc3c 	bl	800c4e8 <move_window>
 800ec70:	4603      	mov	r3, r0
 800ec72:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800ec74:	7dfb      	ldrb	r3, [r7, #23]
 800ec76:	2b00      	cmp	r3, #0
 800ec78:	d138      	bne.n	800ecec <f_sync+0xf2>
					dir = fp->dir_ptr;
 800ec7a:	687b      	ldr	r3, [r7, #4]
 800ec7c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ec7e:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800ec80:	68fb      	ldr	r3, [r7, #12]
 800ec82:	330b      	adds	r3, #11
 800ec84:	781a      	ldrb	r2, [r3, #0]
 800ec86:	68fb      	ldr	r3, [r7, #12]
 800ec88:	330b      	adds	r3, #11
 800ec8a:	f042 0220 	orr.w	r2, r2, #32
 800ec8e:	b2d2      	uxtb	r2, r2
 800ec90:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800ec92:	687b      	ldr	r3, [r7, #4]
 800ec94:	6818      	ldr	r0, [r3, #0]
 800ec96:	687b      	ldr	r3, [r7, #4]
 800ec98:	689b      	ldr	r3, [r3, #8]
 800ec9a:	461a      	mov	r2, r3
 800ec9c:	68f9      	ldr	r1, [r7, #12]
 800ec9e:	f7fe f9c7 	bl	800d030 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800eca2:	68fb      	ldr	r3, [r7, #12]
 800eca4:	f103 021c 	add.w	r2, r3, #28
 800eca8:	687b      	ldr	r3, [r7, #4]
 800ecaa:	68db      	ldr	r3, [r3, #12]
 800ecac:	4619      	mov	r1, r3
 800ecae:	4610      	mov	r0, r2
 800ecb0:	f7fd f9bf 	bl	800c032 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800ecb4:	68fb      	ldr	r3, [r7, #12]
 800ecb6:	3316      	adds	r3, #22
 800ecb8:	6939      	ldr	r1, [r7, #16]
 800ecba:	4618      	mov	r0, r3
 800ecbc:	f7fd f9b9 	bl	800c032 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800ecc0:	68fb      	ldr	r3, [r7, #12]
 800ecc2:	3312      	adds	r3, #18
 800ecc4:	2100      	movs	r1, #0
 800ecc6:	4618      	mov	r0, r3
 800ecc8:	f7fd f998 	bl	800bffc <st_word>
					fs->wflag = 1;
 800eccc:	68bb      	ldr	r3, [r7, #8]
 800ecce:	2201      	movs	r2, #1
 800ecd0:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800ecd2:	68bb      	ldr	r3, [r7, #8]
 800ecd4:	4618      	mov	r0, r3
 800ecd6:	f7fd fc35 	bl	800c544 <sync_fs>
 800ecda:	4603      	mov	r3, r0
 800ecdc:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800ecde:	687b      	ldr	r3, [r7, #4]
 800ece0:	7d1b      	ldrb	r3, [r3, #20]
 800ece2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800ece6:	b2da      	uxtb	r2, r3
 800ece8:	687b      	ldr	r3, [r7, #4]
 800ecea:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800ecec:	7dfb      	ldrb	r3, [r7, #23]
}
 800ecee:	4618      	mov	r0, r3
 800ecf0:	3718      	adds	r7, #24
 800ecf2:	46bd      	mov	sp, r7
 800ecf4:	bd80      	pop	{r7, pc}

0800ecf6 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800ecf6:	b580      	push	{r7, lr}
 800ecf8:	b084      	sub	sp, #16
 800ecfa:	af00      	add	r7, sp, #0
 800ecfc:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800ecfe:	6878      	ldr	r0, [r7, #4]
 800ed00:	f7ff ff7b 	bl	800ebfa <f_sync>
 800ed04:	4603      	mov	r3, r0
 800ed06:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800ed08:	7bfb      	ldrb	r3, [r7, #15]
 800ed0a:	2b00      	cmp	r3, #0
 800ed0c:	d118      	bne.n	800ed40 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800ed0e:	687b      	ldr	r3, [r7, #4]
 800ed10:	f107 0208 	add.w	r2, r7, #8
 800ed14:	4611      	mov	r1, r2
 800ed16:	4618      	mov	r0, r3
 800ed18:	f7ff fa38 	bl	800e18c <validate>
 800ed1c:	4603      	mov	r3, r0
 800ed1e:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800ed20:	7bfb      	ldrb	r3, [r7, #15]
 800ed22:	2b00      	cmp	r3, #0
 800ed24:	d10c      	bne.n	800ed40 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800ed26:	687b      	ldr	r3, [r7, #4]
 800ed28:	691b      	ldr	r3, [r3, #16]
 800ed2a:	4618      	mov	r0, r3
 800ed2c:	f7fd fb38 	bl	800c3a0 <dec_lock>
 800ed30:	4603      	mov	r3, r0
 800ed32:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800ed34:	7bfb      	ldrb	r3, [r7, #15]
 800ed36:	2b00      	cmp	r3, #0
 800ed38:	d102      	bne.n	800ed40 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800ed3a:	687b      	ldr	r3, [r7, #4]
 800ed3c:	2200      	movs	r2, #0
 800ed3e:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800ed40:	7bfb      	ldrb	r3, [r7, #15]
}
 800ed42:	4618      	mov	r0, r3
 800ed44:	3710      	adds	r7, #16
 800ed46:	46bd      	mov	sp, r7
 800ed48:	bd80      	pop	{r7, pc}

0800ed4a <f_getfree>:
FRESULT f_getfree (
	const TCHAR* path,	/* Path name of the logical drive number */
	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
	FATFS** fatfs		/* Pointer to return pointer to corresponding file system object */
)
{
 800ed4a:	b580      	push	{r7, lr}
 800ed4c:	b092      	sub	sp, #72	@ 0x48
 800ed4e:	af00      	add	r7, sp, #0
 800ed50:	60f8      	str	r0, [r7, #12]
 800ed52:	60b9      	str	r1, [r7, #8]
 800ed54:	607a      	str	r2, [r7, #4]
	BYTE *p;
	_FDID obj;


	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 800ed56:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 800ed5a:	f107 030c 	add.w	r3, r7, #12
 800ed5e:	2200      	movs	r2, #0
 800ed60:	4618      	mov	r0, r3
 800ed62:	f7fe ff8d 	bl	800dc80 <find_volume>
 800ed66:	4603      	mov	r3, r0
 800ed68:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
	if (res == FR_OK) {
 800ed6c:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800ed70:	2b00      	cmp	r3, #0
 800ed72:	f040 8099 	bne.w	800eea8 <f_getfree+0x15e>
		*fatfs = fs;				/* Return ptr to the fs object */
 800ed76:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800ed78:	687b      	ldr	r3, [r7, #4]
 800ed7a:	601a      	str	r2, [r3, #0]
		/* If free_clst is valid, return it without full cluster scan */
		if (fs->free_clst <= fs->n_fatent - 2) {
 800ed7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ed7e:	699a      	ldr	r2, [r3, #24]
 800ed80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ed82:	69db      	ldr	r3, [r3, #28]
 800ed84:	3b02      	subs	r3, #2
 800ed86:	429a      	cmp	r2, r3
 800ed88:	d804      	bhi.n	800ed94 <f_getfree+0x4a>
			*nclst = fs->free_clst;
 800ed8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ed8c:	699a      	ldr	r2, [r3, #24]
 800ed8e:	68bb      	ldr	r3, [r7, #8]
 800ed90:	601a      	str	r2, [r3, #0]
 800ed92:	e089      	b.n	800eea8 <f_getfree+0x15e>
		} else {
			/* Get number of free clusters */
			nfree = 0;
 800ed94:	2300      	movs	r3, #0
 800ed96:	643b      	str	r3, [r7, #64]	@ 0x40
			if (fs->fs_type == FS_FAT12) {	/* FAT12: Sector unalighed FAT entries */
 800ed98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ed9a:	781b      	ldrb	r3, [r3, #0]
 800ed9c:	2b01      	cmp	r3, #1
 800ed9e:	d128      	bne.n	800edf2 <f_getfree+0xa8>
				clst = 2; obj.fs = fs;
 800eda0:	2302      	movs	r3, #2
 800eda2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800eda4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800eda6:	617b      	str	r3, [r7, #20]
				do {
					stat = get_fat(&obj, clst);
 800eda8:	f107 0314 	add.w	r3, r7, #20
 800edac:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800edae:	4618      	mov	r0, r3
 800edb0:	f7fd fc57 	bl	800c662 <get_fat>
 800edb4:	62f8      	str	r0, [r7, #44]	@ 0x2c
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 800edb6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800edb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800edbc:	d103      	bne.n	800edc6 <f_getfree+0x7c>
 800edbe:	2301      	movs	r3, #1
 800edc0:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 800edc4:	e063      	b.n	800ee8e <f_getfree+0x144>
					if (stat == 1) { res = FR_INT_ERR; break; }
 800edc6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800edc8:	2b01      	cmp	r3, #1
 800edca:	d103      	bne.n	800edd4 <f_getfree+0x8a>
 800edcc:	2302      	movs	r3, #2
 800edce:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 800edd2:	e05c      	b.n	800ee8e <f_getfree+0x144>
					if (stat == 0) nfree++;
 800edd4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800edd6:	2b00      	cmp	r3, #0
 800edd8:	d102      	bne.n	800ede0 <f_getfree+0x96>
 800edda:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800eddc:	3301      	adds	r3, #1
 800edde:	643b      	str	r3, [r7, #64]	@ 0x40
				} while (++clst < fs->n_fatent);
 800ede0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ede2:	3301      	adds	r3, #1
 800ede4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ede6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ede8:	69db      	ldr	r3, [r3, #28]
 800edea:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800edec:	429a      	cmp	r2, r3
 800edee:	d3db      	bcc.n	800eda8 <f_getfree+0x5e>
 800edf0:	e04d      	b.n	800ee8e <f_getfree+0x144>
						i = (i + 1) % SS(fs);
					} while (clst);
				} else
#endif
				{	/* FAT16/32: Sector alighed FAT entries */
					clst = fs->n_fatent; sect = fs->fatbase;
 800edf2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800edf4:	69db      	ldr	r3, [r3, #28]
 800edf6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800edf8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800edfa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800edfc:	63bb      	str	r3, [r7, #56]	@ 0x38
					i = 0; p = 0;
 800edfe:	2300      	movs	r3, #0
 800ee00:	637b      	str	r3, [r7, #52]	@ 0x34
 800ee02:	2300      	movs	r3, #0
 800ee04:	633b      	str	r3, [r7, #48]	@ 0x30
					do {
						if (i == 0) {
 800ee06:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ee08:	2b00      	cmp	r3, #0
 800ee0a:	d113      	bne.n	800ee34 <f_getfree+0xea>
							res = move_window(fs, sect++);
 800ee0c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ee0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ee10:	1c5a      	adds	r2, r3, #1
 800ee12:	63ba      	str	r2, [r7, #56]	@ 0x38
 800ee14:	4619      	mov	r1, r3
 800ee16:	f7fd fb67 	bl	800c4e8 <move_window>
 800ee1a:	4603      	mov	r3, r0
 800ee1c:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
							if (res != FR_OK) break;
 800ee20:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800ee24:	2b00      	cmp	r3, #0
 800ee26:	d131      	bne.n	800ee8c <f_getfree+0x142>
							p = fs->win;
 800ee28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ee2a:	3338      	adds	r3, #56	@ 0x38
 800ee2c:	633b      	str	r3, [r7, #48]	@ 0x30
							i = SS(fs);
 800ee2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ee30:	899b      	ldrh	r3, [r3, #12]
 800ee32:	637b      	str	r3, [r7, #52]	@ 0x34
						}
						if (fs->fs_type == FS_FAT16) {
 800ee34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ee36:	781b      	ldrb	r3, [r3, #0]
 800ee38:	2b02      	cmp	r3, #2
 800ee3a:	d10f      	bne.n	800ee5c <f_getfree+0x112>
							if (ld_word(p) == 0) nfree++;
 800ee3c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800ee3e:	f7fd f8a1 	bl	800bf84 <ld_word>
 800ee42:	4603      	mov	r3, r0
 800ee44:	2b00      	cmp	r3, #0
 800ee46:	d102      	bne.n	800ee4e <f_getfree+0x104>
 800ee48:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ee4a:	3301      	adds	r3, #1
 800ee4c:	643b      	str	r3, [r7, #64]	@ 0x40
							p += 2; i -= 2;
 800ee4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ee50:	3302      	adds	r3, #2
 800ee52:	633b      	str	r3, [r7, #48]	@ 0x30
 800ee54:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ee56:	3b02      	subs	r3, #2
 800ee58:	637b      	str	r3, [r7, #52]	@ 0x34
 800ee5a:	e010      	b.n	800ee7e <f_getfree+0x134>
						} else {
							if ((ld_dword(p) & 0x0FFFFFFF) == 0) nfree++;
 800ee5c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800ee5e:	f7fd f8aa 	bl	800bfb6 <ld_dword>
 800ee62:	4603      	mov	r3, r0
 800ee64:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800ee68:	2b00      	cmp	r3, #0
 800ee6a:	d102      	bne.n	800ee72 <f_getfree+0x128>
 800ee6c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ee6e:	3301      	adds	r3, #1
 800ee70:	643b      	str	r3, [r7, #64]	@ 0x40
							p += 4; i -= 4;
 800ee72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ee74:	3304      	adds	r3, #4
 800ee76:	633b      	str	r3, [r7, #48]	@ 0x30
 800ee78:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ee7a:	3b04      	subs	r3, #4
 800ee7c:	637b      	str	r3, [r7, #52]	@ 0x34
						}
					} while (--clst);
 800ee7e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ee80:	3b01      	subs	r3, #1
 800ee82:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ee84:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ee86:	2b00      	cmp	r3, #0
 800ee88:	d1bd      	bne.n	800ee06 <f_getfree+0xbc>
 800ee8a:	e000      	b.n	800ee8e <f_getfree+0x144>
							if (res != FR_OK) break;
 800ee8c:	bf00      	nop
				}
			}
			*nclst = nfree;			/* Return the free clusters */
 800ee8e:	68bb      	ldr	r3, [r7, #8]
 800ee90:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800ee92:	601a      	str	r2, [r3, #0]
			fs->free_clst = nfree;	/* Now free_clst is valid */
 800ee94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ee96:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800ee98:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;		/* FSInfo is to be updated */
 800ee9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ee9c:	791a      	ldrb	r2, [r3, #4]
 800ee9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800eea0:	f042 0201 	orr.w	r2, r2, #1
 800eea4:	b2d2      	uxtb	r2, r2
 800eea6:	711a      	strb	r2, [r3, #4]
		}
	}

	LEAVE_FF(fs, res);
 800eea8:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 800eeac:	4618      	mov	r0, r3
 800eeae:	3748      	adds	r7, #72	@ 0x48
 800eeb0:	46bd      	mov	sp, r7
 800eeb2:	bd80      	pop	{r7, pc}

0800eeb4 <f_gets>:
TCHAR* f_gets (
	TCHAR* buff,	/* Pointer to the string buffer to read */
	int len,		/* Size of string buffer (characters) */
	FIL* fp			/* Pointer to the file object */
)
{
 800eeb4:	b580      	push	{r7, lr}
 800eeb6:	b088      	sub	sp, #32
 800eeb8:	af00      	add	r7, sp, #0
 800eeba:	60f8      	str	r0, [r7, #12]
 800eebc:	60b9      	str	r1, [r7, #8]
 800eebe:	607a      	str	r2, [r7, #4]
	int n = 0;
 800eec0:	2300      	movs	r3, #0
 800eec2:	61fb      	str	r3, [r7, #28]
	TCHAR c, *p = buff;
 800eec4:	68fb      	ldr	r3, [r7, #12]
 800eec6:	61bb      	str	r3, [r7, #24]
	BYTE s[2];
	UINT rc;


	while (n < len - 1) {	/* Read characters until buffer gets filled */
 800eec8:	e01c      	b.n	800ef04 <f_gets+0x50>
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
#else						/* Read a character without conversion */
		f_read(fp, s, 1, &rc);
 800eeca:	f107 0310 	add.w	r3, r7, #16
 800eece:	f107 0114 	add.w	r1, r7, #20
 800eed2:	2201      	movs	r2, #1
 800eed4:	6878      	ldr	r0, [r7, #4]
 800eed6:	f7ff fb9d 	bl	800e614 <f_read>
		if (rc != 1) break;
 800eeda:	693b      	ldr	r3, [r7, #16]
 800eedc:	2b01      	cmp	r3, #1
 800eede:	d117      	bne.n	800ef10 <f_gets+0x5c>
		c = s[0];
 800eee0:	7d3b      	ldrb	r3, [r7, #20]
 800eee2:	75fb      	strb	r3, [r7, #23]
#endif
		if (_USE_STRFUNC == 2 && c == '\r') continue;	/* Strip '\r' */
 800eee4:	7dfb      	ldrb	r3, [r7, #23]
 800eee6:	2b0d      	cmp	r3, #13
 800eee8:	d00b      	beq.n	800ef02 <f_gets+0x4e>
		*p++ = c;
 800eeea:	69bb      	ldr	r3, [r7, #24]
 800eeec:	1c5a      	adds	r2, r3, #1
 800eeee:	61ba      	str	r2, [r7, #24]
 800eef0:	7dfa      	ldrb	r2, [r7, #23]
 800eef2:	701a      	strb	r2, [r3, #0]
		n++;
 800eef4:	69fb      	ldr	r3, [r7, #28]
 800eef6:	3301      	adds	r3, #1
 800eef8:	61fb      	str	r3, [r7, #28]
		if (c == '\n') break;		/* Break on EOL */
 800eefa:	7dfb      	ldrb	r3, [r7, #23]
 800eefc:	2b0a      	cmp	r3, #10
 800eefe:	d009      	beq.n	800ef14 <f_gets+0x60>
 800ef00:	e000      	b.n	800ef04 <f_gets+0x50>
		if (_USE_STRFUNC == 2 && c == '\r') continue;	/* Strip '\r' */
 800ef02:	bf00      	nop
	while (n < len - 1) {	/* Read characters until buffer gets filled */
 800ef04:	68bb      	ldr	r3, [r7, #8]
 800ef06:	3b01      	subs	r3, #1
 800ef08:	69fa      	ldr	r2, [r7, #28]
 800ef0a:	429a      	cmp	r2, r3
 800ef0c:	dbdd      	blt.n	800eeca <f_gets+0x16>
 800ef0e:	e002      	b.n	800ef16 <f_gets+0x62>
		if (rc != 1) break;
 800ef10:	bf00      	nop
 800ef12:	e000      	b.n	800ef16 <f_gets+0x62>
		if (c == '\n') break;		/* Break on EOL */
 800ef14:	bf00      	nop
	}
	*p = 0;
 800ef16:	69bb      	ldr	r3, [r7, #24]
 800ef18:	2200      	movs	r2, #0
 800ef1a:	701a      	strb	r2, [r3, #0]
	return n ? buff : 0;			/* When no data read (eof or error), return with error. */
 800ef1c:	69fb      	ldr	r3, [r7, #28]
 800ef1e:	2b00      	cmp	r3, #0
 800ef20:	d001      	beq.n	800ef26 <f_gets+0x72>
 800ef22:	68fb      	ldr	r3, [r7, #12]
 800ef24:	e000      	b.n	800ef28 <f_gets+0x74>
 800ef26:	2300      	movs	r3, #0
}
 800ef28:	4618      	mov	r0, r3
 800ef2a:	3720      	adds	r7, #32
 800ef2c:	46bd      	mov	sp, r7
 800ef2e:	bd80      	pop	{r7, pc}

0800ef30 <putc_bfd>:
static
void putc_bfd (		/* Buffered write with code conversion */
	putbuff* pb,
	TCHAR c
)
{
 800ef30:	b580      	push	{r7, lr}
 800ef32:	b084      	sub	sp, #16
 800ef34:	af00      	add	r7, sp, #0
 800ef36:	6078      	str	r0, [r7, #4]
 800ef38:	460b      	mov	r3, r1
 800ef3a:	70fb      	strb	r3, [r7, #3]
	UINT bw;
	int i;


	if (_USE_STRFUNC == 2 && c == '\n') {	 /* LF -> CRLF conversion */
 800ef3c:	78fb      	ldrb	r3, [r7, #3]
 800ef3e:	2b0a      	cmp	r3, #10
 800ef40:	d103      	bne.n	800ef4a <putc_bfd+0x1a>
		putc_bfd(pb, '\r');
 800ef42:	210d      	movs	r1, #13
 800ef44:	6878      	ldr	r0, [r7, #4]
 800ef46:	f7ff fff3 	bl	800ef30 <putc_bfd>
	}

	i = pb->idx;		/* Write index of pb->buf[] */
 800ef4a:	687b      	ldr	r3, [r7, #4]
 800ef4c:	685b      	ldr	r3, [r3, #4]
 800ef4e:	60fb      	str	r3, [r7, #12]
	if (i < 0) return;
 800ef50:	68fb      	ldr	r3, [r7, #12]
 800ef52:	2b00      	cmp	r3, #0
 800ef54:	db25      	blt.n	800efa2 <putc_bfd+0x72>
	if (c >= 0x100)
		pb->buf[i++] = (BYTE)(c >> 8);
	pb->buf[i++] = (BYTE)c;
#endif
#else							/* Write a character without conversion */
	pb->buf[i++] = (BYTE)c;
 800ef56:	68fb      	ldr	r3, [r7, #12]
 800ef58:	1c5a      	adds	r2, r3, #1
 800ef5a:	60fa      	str	r2, [r7, #12]
 800ef5c:	687a      	ldr	r2, [r7, #4]
 800ef5e:	4413      	add	r3, r2
 800ef60:	78fa      	ldrb	r2, [r7, #3]
 800ef62:	731a      	strb	r2, [r3, #12]
#endif

	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 800ef64:	68fb      	ldr	r3, [r7, #12]
 800ef66:	2b3c      	cmp	r3, #60	@ 0x3c
 800ef68:	dd12      	ble.n	800ef90 <putc_bfd+0x60>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 800ef6a:	687b      	ldr	r3, [r7, #4]
 800ef6c:	6818      	ldr	r0, [r3, #0]
 800ef6e:	687b      	ldr	r3, [r7, #4]
 800ef70:	f103 010c 	add.w	r1, r3, #12
 800ef74:	68fa      	ldr	r2, [r7, #12]
 800ef76:	f107 0308 	add.w	r3, r7, #8
 800ef7a:	f7ff fcaa 	bl	800e8d2 <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 800ef7e:	68ba      	ldr	r2, [r7, #8]
 800ef80:	68fb      	ldr	r3, [r7, #12]
 800ef82:	429a      	cmp	r2, r3
 800ef84:	d101      	bne.n	800ef8a <putc_bfd+0x5a>
 800ef86:	2300      	movs	r3, #0
 800ef88:	e001      	b.n	800ef8e <putc_bfd+0x5e>
 800ef8a:	f04f 33ff 	mov.w	r3, #4294967295
 800ef8e:	60fb      	str	r3, [r7, #12]
	}
	pb->idx = i;
 800ef90:	687b      	ldr	r3, [r7, #4]
 800ef92:	68fa      	ldr	r2, [r7, #12]
 800ef94:	605a      	str	r2, [r3, #4]
	pb->nchr++;
 800ef96:	687b      	ldr	r3, [r7, #4]
 800ef98:	689b      	ldr	r3, [r3, #8]
 800ef9a:	1c5a      	adds	r2, r3, #1
 800ef9c:	687b      	ldr	r3, [r7, #4]
 800ef9e:	609a      	str	r2, [r3, #8]
 800efa0:	e000      	b.n	800efa4 <putc_bfd+0x74>
	if (i < 0) return;
 800efa2:	bf00      	nop
}
 800efa4:	3710      	adds	r7, #16
 800efa6:	46bd      	mov	sp, r7
 800efa8:	bd80      	pop	{r7, pc}

0800efaa <putc_flush>:

static
int putc_flush (		/* Flush left characters in the buffer */
	putbuff* pb
)
{
 800efaa:	b580      	push	{r7, lr}
 800efac:	b084      	sub	sp, #16
 800efae:	af00      	add	r7, sp, #0
 800efb0:	6078      	str	r0, [r7, #4]
	UINT nw;

	if (   pb->idx >= 0	/* Flush buffered characters to the file */
 800efb2:	687b      	ldr	r3, [r7, #4]
 800efb4:	685b      	ldr	r3, [r3, #4]
 800efb6:	2b00      	cmp	r3, #0
 800efb8:	db16      	blt.n	800efe8 <putc_flush+0x3e>
		&& f_write(pb->fp, pb->buf, (UINT)pb->idx, &nw) == FR_OK
 800efba:	687b      	ldr	r3, [r7, #4]
 800efbc:	6818      	ldr	r0, [r3, #0]
 800efbe:	687b      	ldr	r3, [r7, #4]
 800efc0:	f103 010c 	add.w	r1, r3, #12
 800efc4:	687b      	ldr	r3, [r7, #4]
 800efc6:	685b      	ldr	r3, [r3, #4]
 800efc8:	461a      	mov	r2, r3
 800efca:	f107 030c 	add.w	r3, r7, #12
 800efce:	f7ff fc80 	bl	800e8d2 <f_write>
 800efd2:	4603      	mov	r3, r0
 800efd4:	2b00      	cmp	r3, #0
 800efd6:	d107      	bne.n	800efe8 <putc_flush+0x3e>
		&& (UINT)pb->idx == nw) return pb->nchr;
 800efd8:	687b      	ldr	r3, [r7, #4]
 800efda:	685b      	ldr	r3, [r3, #4]
 800efdc:	68fa      	ldr	r2, [r7, #12]
 800efde:	4293      	cmp	r3, r2
 800efe0:	d102      	bne.n	800efe8 <putc_flush+0x3e>
 800efe2:	687b      	ldr	r3, [r7, #4]
 800efe4:	689b      	ldr	r3, [r3, #8]
 800efe6:	e001      	b.n	800efec <putc_flush+0x42>
	return EOF;
 800efe8:	f04f 33ff 	mov.w	r3, #4294967295
}
 800efec:	4618      	mov	r0, r3
 800efee:	3710      	adds	r7, #16
 800eff0:	46bd      	mov	sp, r7
 800eff2:	bd80      	pop	{r7, pc}

0800eff4 <putc_init>:
static
void putc_init (		/* Initialize write buffer */
	putbuff* pb,
	FIL* fp
)
{
 800eff4:	b480      	push	{r7}
 800eff6:	b083      	sub	sp, #12
 800eff8:	af00      	add	r7, sp, #0
 800effa:	6078      	str	r0, [r7, #4]
 800effc:	6039      	str	r1, [r7, #0]
	pb->fp = fp;
 800effe:	687b      	ldr	r3, [r7, #4]
 800f000:	683a      	ldr	r2, [r7, #0]
 800f002:	601a      	str	r2, [r3, #0]
	pb->nchr = pb->idx = 0;
 800f004:	687b      	ldr	r3, [r7, #4]
 800f006:	2200      	movs	r2, #0
 800f008:	605a      	str	r2, [r3, #4]
 800f00a:	687b      	ldr	r3, [r7, #4]
 800f00c:	685a      	ldr	r2, [r3, #4]
 800f00e:	687b      	ldr	r3, [r7, #4]
 800f010:	609a      	str	r2, [r3, #8]
}
 800f012:	bf00      	nop
 800f014:	370c      	adds	r7, #12
 800f016:	46bd      	mov	sp, r7
 800f018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f01c:	4770      	bx	lr

0800f01e <f_puts>:

int f_puts (
	const TCHAR* str,	/* Pointer to the string to be output */
	FIL* fp				/* Pointer to the file object */
)
{
 800f01e:	b580      	push	{r7, lr}
 800f020:	b096      	sub	sp, #88	@ 0x58
 800f022:	af00      	add	r7, sp, #0
 800f024:	6078      	str	r0, [r7, #4]
 800f026:	6039      	str	r1, [r7, #0]
	putbuff pb;


	putc_init(&pb, fp);
 800f028:	f107 030c 	add.w	r3, r7, #12
 800f02c:	6839      	ldr	r1, [r7, #0]
 800f02e:	4618      	mov	r0, r3
 800f030:	f7ff ffe0 	bl	800eff4 <putc_init>
	while (*str) putc_bfd(&pb, *str++);		/* Put the string */
 800f034:	e009      	b.n	800f04a <f_puts+0x2c>
 800f036:	687b      	ldr	r3, [r7, #4]
 800f038:	1c5a      	adds	r2, r3, #1
 800f03a:	607a      	str	r2, [r7, #4]
 800f03c:	781a      	ldrb	r2, [r3, #0]
 800f03e:	f107 030c 	add.w	r3, r7, #12
 800f042:	4611      	mov	r1, r2
 800f044:	4618      	mov	r0, r3
 800f046:	f7ff ff73 	bl	800ef30 <putc_bfd>
 800f04a:	687b      	ldr	r3, [r7, #4]
 800f04c:	781b      	ldrb	r3, [r3, #0]
 800f04e:	2b00      	cmp	r3, #0
 800f050:	d1f1      	bne.n	800f036 <f_puts+0x18>
	return putc_flush(&pb);
 800f052:	f107 030c 	add.w	r3, r7, #12
 800f056:	4618      	mov	r0, r3
 800f058:	f7ff ffa7 	bl	800efaa <putc_flush>
 800f05c:	4603      	mov	r3, r0
}
 800f05e:	4618      	mov	r0, r3
 800f060:	3758      	adds	r7, #88	@ 0x58
 800f062:	46bd      	mov	sp, r7
 800f064:	bd80      	pop	{r7, pc}
	...

0800f068 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800f068:	b480      	push	{r7}
 800f06a:	b087      	sub	sp, #28
 800f06c:	af00      	add	r7, sp, #0
 800f06e:	60f8      	str	r0, [r7, #12]
 800f070:	60b9      	str	r1, [r7, #8]
 800f072:	4613      	mov	r3, r2
 800f074:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800f076:	2301      	movs	r3, #1
 800f078:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800f07a:	2300      	movs	r3, #0
 800f07c:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800f07e:	4b1f      	ldr	r3, [pc, #124]	@ (800f0fc <FATFS_LinkDriverEx+0x94>)
 800f080:	7a5b      	ldrb	r3, [r3, #9]
 800f082:	b2db      	uxtb	r3, r3
 800f084:	2b00      	cmp	r3, #0
 800f086:	d131      	bne.n	800f0ec <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800f088:	4b1c      	ldr	r3, [pc, #112]	@ (800f0fc <FATFS_LinkDriverEx+0x94>)
 800f08a:	7a5b      	ldrb	r3, [r3, #9]
 800f08c:	b2db      	uxtb	r3, r3
 800f08e:	461a      	mov	r2, r3
 800f090:	4b1a      	ldr	r3, [pc, #104]	@ (800f0fc <FATFS_LinkDriverEx+0x94>)
 800f092:	2100      	movs	r1, #0
 800f094:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800f096:	4b19      	ldr	r3, [pc, #100]	@ (800f0fc <FATFS_LinkDriverEx+0x94>)
 800f098:	7a5b      	ldrb	r3, [r3, #9]
 800f09a:	b2db      	uxtb	r3, r3
 800f09c:	4a17      	ldr	r2, [pc, #92]	@ (800f0fc <FATFS_LinkDriverEx+0x94>)
 800f09e:	009b      	lsls	r3, r3, #2
 800f0a0:	4413      	add	r3, r2
 800f0a2:	68fa      	ldr	r2, [r7, #12]
 800f0a4:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800f0a6:	4b15      	ldr	r3, [pc, #84]	@ (800f0fc <FATFS_LinkDriverEx+0x94>)
 800f0a8:	7a5b      	ldrb	r3, [r3, #9]
 800f0aa:	b2db      	uxtb	r3, r3
 800f0ac:	461a      	mov	r2, r3
 800f0ae:	4b13      	ldr	r3, [pc, #76]	@ (800f0fc <FATFS_LinkDriverEx+0x94>)
 800f0b0:	4413      	add	r3, r2
 800f0b2:	79fa      	ldrb	r2, [r7, #7]
 800f0b4:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800f0b6:	4b11      	ldr	r3, [pc, #68]	@ (800f0fc <FATFS_LinkDriverEx+0x94>)
 800f0b8:	7a5b      	ldrb	r3, [r3, #9]
 800f0ba:	b2db      	uxtb	r3, r3
 800f0bc:	1c5a      	adds	r2, r3, #1
 800f0be:	b2d1      	uxtb	r1, r2
 800f0c0:	4a0e      	ldr	r2, [pc, #56]	@ (800f0fc <FATFS_LinkDriverEx+0x94>)
 800f0c2:	7251      	strb	r1, [r2, #9]
 800f0c4:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800f0c6:	7dbb      	ldrb	r3, [r7, #22]
 800f0c8:	3330      	adds	r3, #48	@ 0x30
 800f0ca:	b2da      	uxtb	r2, r3
 800f0cc:	68bb      	ldr	r3, [r7, #8]
 800f0ce:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800f0d0:	68bb      	ldr	r3, [r7, #8]
 800f0d2:	3301      	adds	r3, #1
 800f0d4:	223a      	movs	r2, #58	@ 0x3a
 800f0d6:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800f0d8:	68bb      	ldr	r3, [r7, #8]
 800f0da:	3302      	adds	r3, #2
 800f0dc:	222f      	movs	r2, #47	@ 0x2f
 800f0de:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800f0e0:	68bb      	ldr	r3, [r7, #8]
 800f0e2:	3303      	adds	r3, #3
 800f0e4:	2200      	movs	r2, #0
 800f0e6:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800f0e8:	2300      	movs	r3, #0
 800f0ea:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800f0ec:	7dfb      	ldrb	r3, [r7, #23]
}
 800f0ee:	4618      	mov	r0, r3
 800f0f0:	371c      	adds	r7, #28
 800f0f2:	46bd      	mov	sp, r7
 800f0f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0f8:	4770      	bx	lr
 800f0fa:	bf00      	nop
 800f0fc:	200163dc 	.word	0x200163dc

0800f100 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800f100:	b580      	push	{r7, lr}
 800f102:	b082      	sub	sp, #8
 800f104:	af00      	add	r7, sp, #0
 800f106:	6078      	str	r0, [r7, #4]
 800f108:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800f10a:	2200      	movs	r2, #0
 800f10c:	6839      	ldr	r1, [r7, #0]
 800f10e:	6878      	ldr	r0, [r7, #4]
 800f110:	f7ff ffaa 	bl	800f068 <FATFS_LinkDriverEx>
 800f114:	4603      	mov	r3, r0
}
 800f116:	4618      	mov	r0, r3
 800f118:	3708      	adds	r7, #8
 800f11a:	46bd      	mov	sp, r7
 800f11c:	bd80      	pop	{r7, pc}
	...

0800f120 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 800f120:	b480      	push	{r7}
 800f122:	b085      	sub	sp, #20
 800f124:	af00      	add	r7, sp, #0
 800f126:	4603      	mov	r3, r0
 800f128:	6039      	str	r1, [r7, #0]
 800f12a:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 800f12c:	88fb      	ldrh	r3, [r7, #6]
 800f12e:	2b7f      	cmp	r3, #127	@ 0x7f
 800f130:	d802      	bhi.n	800f138 <ff_convert+0x18>
		c = chr;
 800f132:	88fb      	ldrh	r3, [r7, #6]
 800f134:	81fb      	strh	r3, [r7, #14]
 800f136:	e025      	b.n	800f184 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 800f138:	683b      	ldr	r3, [r7, #0]
 800f13a:	2b00      	cmp	r3, #0
 800f13c:	d00b      	beq.n	800f156 <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 800f13e:	88fb      	ldrh	r3, [r7, #6]
 800f140:	2bff      	cmp	r3, #255	@ 0xff
 800f142:	d805      	bhi.n	800f150 <ff_convert+0x30>
 800f144:	88fb      	ldrh	r3, [r7, #6]
 800f146:	3b80      	subs	r3, #128	@ 0x80
 800f148:	4a12      	ldr	r2, [pc, #72]	@ (800f194 <ff_convert+0x74>)
 800f14a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f14e:	e000      	b.n	800f152 <ff_convert+0x32>
 800f150:	2300      	movs	r3, #0
 800f152:	81fb      	strh	r3, [r7, #14]
 800f154:	e016      	b.n	800f184 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 800f156:	2300      	movs	r3, #0
 800f158:	81fb      	strh	r3, [r7, #14]
 800f15a:	e009      	b.n	800f170 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 800f15c:	89fb      	ldrh	r3, [r7, #14]
 800f15e:	4a0d      	ldr	r2, [pc, #52]	@ (800f194 <ff_convert+0x74>)
 800f160:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f164:	88fa      	ldrh	r2, [r7, #6]
 800f166:	429a      	cmp	r2, r3
 800f168:	d006      	beq.n	800f178 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 800f16a:	89fb      	ldrh	r3, [r7, #14]
 800f16c:	3301      	adds	r3, #1
 800f16e:	81fb      	strh	r3, [r7, #14]
 800f170:	89fb      	ldrh	r3, [r7, #14]
 800f172:	2b7f      	cmp	r3, #127	@ 0x7f
 800f174:	d9f2      	bls.n	800f15c <ff_convert+0x3c>
 800f176:	e000      	b.n	800f17a <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 800f178:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 800f17a:	89fb      	ldrh	r3, [r7, #14]
 800f17c:	3380      	adds	r3, #128	@ 0x80
 800f17e:	b29b      	uxth	r3, r3
 800f180:	b2db      	uxtb	r3, r3
 800f182:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 800f184:	89fb      	ldrh	r3, [r7, #14]
}
 800f186:	4618      	mov	r0, r3
 800f188:	3714      	adds	r7, #20
 800f18a:	46bd      	mov	sp, r7
 800f18c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f190:	4770      	bx	lr
 800f192:	bf00      	nop
 800f194:	080154d4 	.word	0x080154d4

0800f198 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 800f198:	b480      	push	{r7}
 800f19a:	b087      	sub	sp, #28
 800f19c:	af00      	add	r7, sp, #0
 800f19e:	4603      	mov	r3, r0
 800f1a0:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 800f1a2:	88fb      	ldrh	r3, [r7, #6]
 800f1a4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800f1a8:	d201      	bcs.n	800f1ae <ff_wtoupper+0x16>
 800f1aa:	4b3e      	ldr	r3, [pc, #248]	@ (800f2a4 <ff_wtoupper+0x10c>)
 800f1ac:	e000      	b.n	800f1b0 <ff_wtoupper+0x18>
 800f1ae:	4b3e      	ldr	r3, [pc, #248]	@ (800f2a8 <ff_wtoupper+0x110>)
 800f1b0:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 800f1b2:	697b      	ldr	r3, [r7, #20]
 800f1b4:	1c9a      	adds	r2, r3, #2
 800f1b6:	617a      	str	r2, [r7, #20]
 800f1b8:	881b      	ldrh	r3, [r3, #0]
 800f1ba:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 800f1bc:	8a7b      	ldrh	r3, [r7, #18]
 800f1be:	2b00      	cmp	r3, #0
 800f1c0:	d068      	beq.n	800f294 <ff_wtoupper+0xfc>
 800f1c2:	88fa      	ldrh	r2, [r7, #6]
 800f1c4:	8a7b      	ldrh	r3, [r7, #18]
 800f1c6:	429a      	cmp	r2, r3
 800f1c8:	d364      	bcc.n	800f294 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 800f1ca:	697b      	ldr	r3, [r7, #20]
 800f1cc:	1c9a      	adds	r2, r3, #2
 800f1ce:	617a      	str	r2, [r7, #20]
 800f1d0:	881b      	ldrh	r3, [r3, #0]
 800f1d2:	823b      	strh	r3, [r7, #16]
 800f1d4:	8a3b      	ldrh	r3, [r7, #16]
 800f1d6:	0a1b      	lsrs	r3, r3, #8
 800f1d8:	81fb      	strh	r3, [r7, #14]
 800f1da:	8a3b      	ldrh	r3, [r7, #16]
 800f1dc:	b2db      	uxtb	r3, r3
 800f1de:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 800f1e0:	88fa      	ldrh	r2, [r7, #6]
 800f1e2:	8a79      	ldrh	r1, [r7, #18]
 800f1e4:	8a3b      	ldrh	r3, [r7, #16]
 800f1e6:	440b      	add	r3, r1
 800f1e8:	429a      	cmp	r2, r3
 800f1ea:	da49      	bge.n	800f280 <ff_wtoupper+0xe8>
			switch (cmd) {
 800f1ec:	89fb      	ldrh	r3, [r7, #14]
 800f1ee:	2b08      	cmp	r3, #8
 800f1f0:	d84f      	bhi.n	800f292 <ff_wtoupper+0xfa>
 800f1f2:	a201      	add	r2, pc, #4	@ (adr r2, 800f1f8 <ff_wtoupper+0x60>)
 800f1f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f1f8:	0800f21d 	.word	0x0800f21d
 800f1fc:	0800f22f 	.word	0x0800f22f
 800f200:	0800f245 	.word	0x0800f245
 800f204:	0800f24d 	.word	0x0800f24d
 800f208:	0800f255 	.word	0x0800f255
 800f20c:	0800f25d 	.word	0x0800f25d
 800f210:	0800f265 	.word	0x0800f265
 800f214:	0800f26d 	.word	0x0800f26d
 800f218:	0800f275 	.word	0x0800f275
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 800f21c:	88fa      	ldrh	r2, [r7, #6]
 800f21e:	8a7b      	ldrh	r3, [r7, #18]
 800f220:	1ad3      	subs	r3, r2, r3
 800f222:	005b      	lsls	r3, r3, #1
 800f224:	697a      	ldr	r2, [r7, #20]
 800f226:	4413      	add	r3, r2
 800f228:	881b      	ldrh	r3, [r3, #0]
 800f22a:	80fb      	strh	r3, [r7, #6]
 800f22c:	e027      	b.n	800f27e <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 800f22e:	88fa      	ldrh	r2, [r7, #6]
 800f230:	8a7b      	ldrh	r3, [r7, #18]
 800f232:	1ad3      	subs	r3, r2, r3
 800f234:	b29b      	uxth	r3, r3
 800f236:	f003 0301 	and.w	r3, r3, #1
 800f23a:	b29b      	uxth	r3, r3
 800f23c:	88fa      	ldrh	r2, [r7, #6]
 800f23e:	1ad3      	subs	r3, r2, r3
 800f240:	80fb      	strh	r3, [r7, #6]
 800f242:	e01c      	b.n	800f27e <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 800f244:	88fb      	ldrh	r3, [r7, #6]
 800f246:	3b10      	subs	r3, #16
 800f248:	80fb      	strh	r3, [r7, #6]
 800f24a:	e018      	b.n	800f27e <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 800f24c:	88fb      	ldrh	r3, [r7, #6]
 800f24e:	3b20      	subs	r3, #32
 800f250:	80fb      	strh	r3, [r7, #6]
 800f252:	e014      	b.n	800f27e <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 800f254:	88fb      	ldrh	r3, [r7, #6]
 800f256:	3b30      	subs	r3, #48	@ 0x30
 800f258:	80fb      	strh	r3, [r7, #6]
 800f25a:	e010      	b.n	800f27e <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 800f25c:	88fb      	ldrh	r3, [r7, #6]
 800f25e:	3b1a      	subs	r3, #26
 800f260:	80fb      	strh	r3, [r7, #6]
 800f262:	e00c      	b.n	800f27e <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 800f264:	88fb      	ldrh	r3, [r7, #6]
 800f266:	3308      	adds	r3, #8
 800f268:	80fb      	strh	r3, [r7, #6]
 800f26a:	e008      	b.n	800f27e <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 800f26c:	88fb      	ldrh	r3, [r7, #6]
 800f26e:	3b50      	subs	r3, #80	@ 0x50
 800f270:	80fb      	strh	r3, [r7, #6]
 800f272:	e004      	b.n	800f27e <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 800f274:	88fb      	ldrh	r3, [r7, #6]
 800f276:	f5a3 53e3 	sub.w	r3, r3, #7264	@ 0x1c60
 800f27a:	80fb      	strh	r3, [r7, #6]
 800f27c:	bf00      	nop
			}
			break;
 800f27e:	e008      	b.n	800f292 <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 800f280:	89fb      	ldrh	r3, [r7, #14]
 800f282:	2b00      	cmp	r3, #0
 800f284:	d195      	bne.n	800f1b2 <ff_wtoupper+0x1a>
 800f286:	8a3b      	ldrh	r3, [r7, #16]
 800f288:	005b      	lsls	r3, r3, #1
 800f28a:	697a      	ldr	r2, [r7, #20]
 800f28c:	4413      	add	r3, r2
 800f28e:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 800f290:	e78f      	b.n	800f1b2 <ff_wtoupper+0x1a>
			break;
 800f292:	bf00      	nop
	}

	return chr;
 800f294:	88fb      	ldrh	r3, [r7, #6]
}
 800f296:	4618      	mov	r0, r3
 800f298:	371c      	adds	r7, #28
 800f29a:	46bd      	mov	sp, r7
 800f29c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2a0:	4770      	bx	lr
 800f2a2:	bf00      	nop
 800f2a4:	080155d4 	.word	0x080155d4
 800f2a8:	080157c8 	.word	0x080157c8

0800f2ac <__cvt>:
 800f2ac:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800f2b0:	ec57 6b10 	vmov	r6, r7, d0
 800f2b4:	2f00      	cmp	r7, #0
 800f2b6:	460c      	mov	r4, r1
 800f2b8:	4619      	mov	r1, r3
 800f2ba:	463b      	mov	r3, r7
 800f2bc:	bfbb      	ittet	lt
 800f2be:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800f2c2:	461f      	movlt	r7, r3
 800f2c4:	2300      	movge	r3, #0
 800f2c6:	232d      	movlt	r3, #45	@ 0x2d
 800f2c8:	700b      	strb	r3, [r1, #0]
 800f2ca:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800f2cc:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800f2d0:	4691      	mov	r9, r2
 800f2d2:	f023 0820 	bic.w	r8, r3, #32
 800f2d6:	bfbc      	itt	lt
 800f2d8:	4632      	movlt	r2, r6
 800f2da:	4616      	movlt	r6, r2
 800f2dc:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800f2e0:	d005      	beq.n	800f2ee <__cvt+0x42>
 800f2e2:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800f2e6:	d100      	bne.n	800f2ea <__cvt+0x3e>
 800f2e8:	3401      	adds	r4, #1
 800f2ea:	2102      	movs	r1, #2
 800f2ec:	e000      	b.n	800f2f0 <__cvt+0x44>
 800f2ee:	2103      	movs	r1, #3
 800f2f0:	ab03      	add	r3, sp, #12
 800f2f2:	9301      	str	r3, [sp, #4]
 800f2f4:	ab02      	add	r3, sp, #8
 800f2f6:	9300      	str	r3, [sp, #0]
 800f2f8:	ec47 6b10 	vmov	d0, r6, r7
 800f2fc:	4653      	mov	r3, sl
 800f2fe:	4622      	mov	r2, r4
 800f300:	f001 fa96 	bl	8010830 <_dtoa_r>
 800f304:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800f308:	4605      	mov	r5, r0
 800f30a:	d119      	bne.n	800f340 <__cvt+0x94>
 800f30c:	f019 0f01 	tst.w	r9, #1
 800f310:	d00e      	beq.n	800f330 <__cvt+0x84>
 800f312:	eb00 0904 	add.w	r9, r0, r4
 800f316:	2200      	movs	r2, #0
 800f318:	2300      	movs	r3, #0
 800f31a:	4630      	mov	r0, r6
 800f31c:	4639      	mov	r1, r7
 800f31e:	f7f1 fbeb 	bl	8000af8 <__aeabi_dcmpeq>
 800f322:	b108      	cbz	r0, 800f328 <__cvt+0x7c>
 800f324:	f8cd 900c 	str.w	r9, [sp, #12]
 800f328:	2230      	movs	r2, #48	@ 0x30
 800f32a:	9b03      	ldr	r3, [sp, #12]
 800f32c:	454b      	cmp	r3, r9
 800f32e:	d31e      	bcc.n	800f36e <__cvt+0xc2>
 800f330:	9b03      	ldr	r3, [sp, #12]
 800f332:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800f334:	1b5b      	subs	r3, r3, r5
 800f336:	4628      	mov	r0, r5
 800f338:	6013      	str	r3, [r2, #0]
 800f33a:	b004      	add	sp, #16
 800f33c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f340:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800f344:	eb00 0904 	add.w	r9, r0, r4
 800f348:	d1e5      	bne.n	800f316 <__cvt+0x6a>
 800f34a:	7803      	ldrb	r3, [r0, #0]
 800f34c:	2b30      	cmp	r3, #48	@ 0x30
 800f34e:	d10a      	bne.n	800f366 <__cvt+0xba>
 800f350:	2200      	movs	r2, #0
 800f352:	2300      	movs	r3, #0
 800f354:	4630      	mov	r0, r6
 800f356:	4639      	mov	r1, r7
 800f358:	f7f1 fbce 	bl	8000af8 <__aeabi_dcmpeq>
 800f35c:	b918      	cbnz	r0, 800f366 <__cvt+0xba>
 800f35e:	f1c4 0401 	rsb	r4, r4, #1
 800f362:	f8ca 4000 	str.w	r4, [sl]
 800f366:	f8da 3000 	ldr.w	r3, [sl]
 800f36a:	4499      	add	r9, r3
 800f36c:	e7d3      	b.n	800f316 <__cvt+0x6a>
 800f36e:	1c59      	adds	r1, r3, #1
 800f370:	9103      	str	r1, [sp, #12]
 800f372:	701a      	strb	r2, [r3, #0]
 800f374:	e7d9      	b.n	800f32a <__cvt+0x7e>

0800f376 <__exponent>:
 800f376:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f378:	2900      	cmp	r1, #0
 800f37a:	bfba      	itte	lt
 800f37c:	4249      	neglt	r1, r1
 800f37e:	232d      	movlt	r3, #45	@ 0x2d
 800f380:	232b      	movge	r3, #43	@ 0x2b
 800f382:	2909      	cmp	r1, #9
 800f384:	7002      	strb	r2, [r0, #0]
 800f386:	7043      	strb	r3, [r0, #1]
 800f388:	dd29      	ble.n	800f3de <__exponent+0x68>
 800f38a:	f10d 0307 	add.w	r3, sp, #7
 800f38e:	461d      	mov	r5, r3
 800f390:	270a      	movs	r7, #10
 800f392:	461a      	mov	r2, r3
 800f394:	fbb1 f6f7 	udiv	r6, r1, r7
 800f398:	fb07 1416 	mls	r4, r7, r6, r1
 800f39c:	3430      	adds	r4, #48	@ 0x30
 800f39e:	f802 4c01 	strb.w	r4, [r2, #-1]
 800f3a2:	460c      	mov	r4, r1
 800f3a4:	2c63      	cmp	r4, #99	@ 0x63
 800f3a6:	f103 33ff 	add.w	r3, r3, #4294967295
 800f3aa:	4631      	mov	r1, r6
 800f3ac:	dcf1      	bgt.n	800f392 <__exponent+0x1c>
 800f3ae:	3130      	adds	r1, #48	@ 0x30
 800f3b0:	1e94      	subs	r4, r2, #2
 800f3b2:	f803 1c01 	strb.w	r1, [r3, #-1]
 800f3b6:	1c41      	adds	r1, r0, #1
 800f3b8:	4623      	mov	r3, r4
 800f3ba:	42ab      	cmp	r3, r5
 800f3bc:	d30a      	bcc.n	800f3d4 <__exponent+0x5e>
 800f3be:	f10d 0309 	add.w	r3, sp, #9
 800f3c2:	1a9b      	subs	r3, r3, r2
 800f3c4:	42ac      	cmp	r4, r5
 800f3c6:	bf88      	it	hi
 800f3c8:	2300      	movhi	r3, #0
 800f3ca:	3302      	adds	r3, #2
 800f3cc:	4403      	add	r3, r0
 800f3ce:	1a18      	subs	r0, r3, r0
 800f3d0:	b003      	add	sp, #12
 800f3d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f3d4:	f813 6b01 	ldrb.w	r6, [r3], #1
 800f3d8:	f801 6f01 	strb.w	r6, [r1, #1]!
 800f3dc:	e7ed      	b.n	800f3ba <__exponent+0x44>
 800f3de:	2330      	movs	r3, #48	@ 0x30
 800f3e0:	3130      	adds	r1, #48	@ 0x30
 800f3e2:	7083      	strb	r3, [r0, #2]
 800f3e4:	70c1      	strb	r1, [r0, #3]
 800f3e6:	1d03      	adds	r3, r0, #4
 800f3e8:	e7f1      	b.n	800f3ce <__exponent+0x58>
	...

0800f3ec <_printf_float>:
 800f3ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f3f0:	b08d      	sub	sp, #52	@ 0x34
 800f3f2:	460c      	mov	r4, r1
 800f3f4:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800f3f8:	4616      	mov	r6, r2
 800f3fa:	461f      	mov	r7, r3
 800f3fc:	4605      	mov	r5, r0
 800f3fe:	f001 f8e3 	bl	80105c8 <_localeconv_r>
 800f402:	6803      	ldr	r3, [r0, #0]
 800f404:	9304      	str	r3, [sp, #16]
 800f406:	4618      	mov	r0, r3
 800f408:	f7f0 ff4a 	bl	80002a0 <strlen>
 800f40c:	2300      	movs	r3, #0
 800f40e:	930a      	str	r3, [sp, #40]	@ 0x28
 800f410:	f8d8 3000 	ldr.w	r3, [r8]
 800f414:	9005      	str	r0, [sp, #20]
 800f416:	3307      	adds	r3, #7
 800f418:	f023 0307 	bic.w	r3, r3, #7
 800f41c:	f103 0208 	add.w	r2, r3, #8
 800f420:	f894 a018 	ldrb.w	sl, [r4, #24]
 800f424:	f8d4 b000 	ldr.w	fp, [r4]
 800f428:	f8c8 2000 	str.w	r2, [r8]
 800f42c:	e9d3 8900 	ldrd	r8, r9, [r3]
 800f430:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800f434:	9307      	str	r3, [sp, #28]
 800f436:	f8cd 8018 	str.w	r8, [sp, #24]
 800f43a:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800f43e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800f442:	4b9c      	ldr	r3, [pc, #624]	@ (800f6b4 <_printf_float+0x2c8>)
 800f444:	f04f 32ff 	mov.w	r2, #4294967295
 800f448:	f7f1 fb88 	bl	8000b5c <__aeabi_dcmpun>
 800f44c:	bb70      	cbnz	r0, 800f4ac <_printf_float+0xc0>
 800f44e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800f452:	4b98      	ldr	r3, [pc, #608]	@ (800f6b4 <_printf_float+0x2c8>)
 800f454:	f04f 32ff 	mov.w	r2, #4294967295
 800f458:	f7f1 fb62 	bl	8000b20 <__aeabi_dcmple>
 800f45c:	bb30      	cbnz	r0, 800f4ac <_printf_float+0xc0>
 800f45e:	2200      	movs	r2, #0
 800f460:	2300      	movs	r3, #0
 800f462:	4640      	mov	r0, r8
 800f464:	4649      	mov	r1, r9
 800f466:	f7f1 fb51 	bl	8000b0c <__aeabi_dcmplt>
 800f46a:	b110      	cbz	r0, 800f472 <_printf_float+0x86>
 800f46c:	232d      	movs	r3, #45	@ 0x2d
 800f46e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800f472:	4a91      	ldr	r2, [pc, #580]	@ (800f6b8 <_printf_float+0x2cc>)
 800f474:	4b91      	ldr	r3, [pc, #580]	@ (800f6bc <_printf_float+0x2d0>)
 800f476:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800f47a:	bf8c      	ite	hi
 800f47c:	4690      	movhi	r8, r2
 800f47e:	4698      	movls	r8, r3
 800f480:	2303      	movs	r3, #3
 800f482:	6123      	str	r3, [r4, #16]
 800f484:	f02b 0304 	bic.w	r3, fp, #4
 800f488:	6023      	str	r3, [r4, #0]
 800f48a:	f04f 0900 	mov.w	r9, #0
 800f48e:	9700      	str	r7, [sp, #0]
 800f490:	4633      	mov	r3, r6
 800f492:	aa0b      	add	r2, sp, #44	@ 0x2c
 800f494:	4621      	mov	r1, r4
 800f496:	4628      	mov	r0, r5
 800f498:	f000 f9d2 	bl	800f840 <_printf_common>
 800f49c:	3001      	adds	r0, #1
 800f49e:	f040 808d 	bne.w	800f5bc <_printf_float+0x1d0>
 800f4a2:	f04f 30ff 	mov.w	r0, #4294967295
 800f4a6:	b00d      	add	sp, #52	@ 0x34
 800f4a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f4ac:	4642      	mov	r2, r8
 800f4ae:	464b      	mov	r3, r9
 800f4b0:	4640      	mov	r0, r8
 800f4b2:	4649      	mov	r1, r9
 800f4b4:	f7f1 fb52 	bl	8000b5c <__aeabi_dcmpun>
 800f4b8:	b140      	cbz	r0, 800f4cc <_printf_float+0xe0>
 800f4ba:	464b      	mov	r3, r9
 800f4bc:	2b00      	cmp	r3, #0
 800f4be:	bfbc      	itt	lt
 800f4c0:	232d      	movlt	r3, #45	@ 0x2d
 800f4c2:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800f4c6:	4a7e      	ldr	r2, [pc, #504]	@ (800f6c0 <_printf_float+0x2d4>)
 800f4c8:	4b7e      	ldr	r3, [pc, #504]	@ (800f6c4 <_printf_float+0x2d8>)
 800f4ca:	e7d4      	b.n	800f476 <_printf_float+0x8a>
 800f4cc:	6863      	ldr	r3, [r4, #4]
 800f4ce:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800f4d2:	9206      	str	r2, [sp, #24]
 800f4d4:	1c5a      	adds	r2, r3, #1
 800f4d6:	d13b      	bne.n	800f550 <_printf_float+0x164>
 800f4d8:	2306      	movs	r3, #6
 800f4da:	6063      	str	r3, [r4, #4]
 800f4dc:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800f4e0:	2300      	movs	r3, #0
 800f4e2:	6022      	str	r2, [r4, #0]
 800f4e4:	9303      	str	r3, [sp, #12]
 800f4e6:	ab0a      	add	r3, sp, #40	@ 0x28
 800f4e8:	e9cd a301 	strd	sl, r3, [sp, #4]
 800f4ec:	ab09      	add	r3, sp, #36	@ 0x24
 800f4ee:	9300      	str	r3, [sp, #0]
 800f4f0:	6861      	ldr	r1, [r4, #4]
 800f4f2:	ec49 8b10 	vmov	d0, r8, r9
 800f4f6:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800f4fa:	4628      	mov	r0, r5
 800f4fc:	f7ff fed6 	bl	800f2ac <__cvt>
 800f500:	9b06      	ldr	r3, [sp, #24]
 800f502:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800f504:	2b47      	cmp	r3, #71	@ 0x47
 800f506:	4680      	mov	r8, r0
 800f508:	d129      	bne.n	800f55e <_printf_float+0x172>
 800f50a:	1cc8      	adds	r0, r1, #3
 800f50c:	db02      	blt.n	800f514 <_printf_float+0x128>
 800f50e:	6863      	ldr	r3, [r4, #4]
 800f510:	4299      	cmp	r1, r3
 800f512:	dd41      	ble.n	800f598 <_printf_float+0x1ac>
 800f514:	f1aa 0a02 	sub.w	sl, sl, #2
 800f518:	fa5f fa8a 	uxtb.w	sl, sl
 800f51c:	3901      	subs	r1, #1
 800f51e:	4652      	mov	r2, sl
 800f520:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800f524:	9109      	str	r1, [sp, #36]	@ 0x24
 800f526:	f7ff ff26 	bl	800f376 <__exponent>
 800f52a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800f52c:	1813      	adds	r3, r2, r0
 800f52e:	2a01      	cmp	r2, #1
 800f530:	4681      	mov	r9, r0
 800f532:	6123      	str	r3, [r4, #16]
 800f534:	dc02      	bgt.n	800f53c <_printf_float+0x150>
 800f536:	6822      	ldr	r2, [r4, #0]
 800f538:	07d2      	lsls	r2, r2, #31
 800f53a:	d501      	bpl.n	800f540 <_printf_float+0x154>
 800f53c:	3301      	adds	r3, #1
 800f53e:	6123      	str	r3, [r4, #16]
 800f540:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800f544:	2b00      	cmp	r3, #0
 800f546:	d0a2      	beq.n	800f48e <_printf_float+0xa2>
 800f548:	232d      	movs	r3, #45	@ 0x2d
 800f54a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800f54e:	e79e      	b.n	800f48e <_printf_float+0xa2>
 800f550:	9a06      	ldr	r2, [sp, #24]
 800f552:	2a47      	cmp	r2, #71	@ 0x47
 800f554:	d1c2      	bne.n	800f4dc <_printf_float+0xf0>
 800f556:	2b00      	cmp	r3, #0
 800f558:	d1c0      	bne.n	800f4dc <_printf_float+0xf0>
 800f55a:	2301      	movs	r3, #1
 800f55c:	e7bd      	b.n	800f4da <_printf_float+0xee>
 800f55e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800f562:	d9db      	bls.n	800f51c <_printf_float+0x130>
 800f564:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800f568:	d118      	bne.n	800f59c <_printf_float+0x1b0>
 800f56a:	2900      	cmp	r1, #0
 800f56c:	6863      	ldr	r3, [r4, #4]
 800f56e:	dd0b      	ble.n	800f588 <_printf_float+0x19c>
 800f570:	6121      	str	r1, [r4, #16]
 800f572:	b913      	cbnz	r3, 800f57a <_printf_float+0x18e>
 800f574:	6822      	ldr	r2, [r4, #0]
 800f576:	07d0      	lsls	r0, r2, #31
 800f578:	d502      	bpl.n	800f580 <_printf_float+0x194>
 800f57a:	3301      	adds	r3, #1
 800f57c:	440b      	add	r3, r1
 800f57e:	6123      	str	r3, [r4, #16]
 800f580:	65a1      	str	r1, [r4, #88]	@ 0x58
 800f582:	f04f 0900 	mov.w	r9, #0
 800f586:	e7db      	b.n	800f540 <_printf_float+0x154>
 800f588:	b913      	cbnz	r3, 800f590 <_printf_float+0x1a4>
 800f58a:	6822      	ldr	r2, [r4, #0]
 800f58c:	07d2      	lsls	r2, r2, #31
 800f58e:	d501      	bpl.n	800f594 <_printf_float+0x1a8>
 800f590:	3302      	adds	r3, #2
 800f592:	e7f4      	b.n	800f57e <_printf_float+0x192>
 800f594:	2301      	movs	r3, #1
 800f596:	e7f2      	b.n	800f57e <_printf_float+0x192>
 800f598:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800f59c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f59e:	4299      	cmp	r1, r3
 800f5a0:	db05      	blt.n	800f5ae <_printf_float+0x1c2>
 800f5a2:	6823      	ldr	r3, [r4, #0]
 800f5a4:	6121      	str	r1, [r4, #16]
 800f5a6:	07d8      	lsls	r0, r3, #31
 800f5a8:	d5ea      	bpl.n	800f580 <_printf_float+0x194>
 800f5aa:	1c4b      	adds	r3, r1, #1
 800f5ac:	e7e7      	b.n	800f57e <_printf_float+0x192>
 800f5ae:	2900      	cmp	r1, #0
 800f5b0:	bfd4      	ite	le
 800f5b2:	f1c1 0202 	rsble	r2, r1, #2
 800f5b6:	2201      	movgt	r2, #1
 800f5b8:	4413      	add	r3, r2
 800f5ba:	e7e0      	b.n	800f57e <_printf_float+0x192>
 800f5bc:	6823      	ldr	r3, [r4, #0]
 800f5be:	055a      	lsls	r2, r3, #21
 800f5c0:	d407      	bmi.n	800f5d2 <_printf_float+0x1e6>
 800f5c2:	6923      	ldr	r3, [r4, #16]
 800f5c4:	4642      	mov	r2, r8
 800f5c6:	4631      	mov	r1, r6
 800f5c8:	4628      	mov	r0, r5
 800f5ca:	47b8      	blx	r7
 800f5cc:	3001      	adds	r0, #1
 800f5ce:	d12b      	bne.n	800f628 <_printf_float+0x23c>
 800f5d0:	e767      	b.n	800f4a2 <_printf_float+0xb6>
 800f5d2:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800f5d6:	f240 80dd 	bls.w	800f794 <_printf_float+0x3a8>
 800f5da:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800f5de:	2200      	movs	r2, #0
 800f5e0:	2300      	movs	r3, #0
 800f5e2:	f7f1 fa89 	bl	8000af8 <__aeabi_dcmpeq>
 800f5e6:	2800      	cmp	r0, #0
 800f5e8:	d033      	beq.n	800f652 <_printf_float+0x266>
 800f5ea:	4a37      	ldr	r2, [pc, #220]	@ (800f6c8 <_printf_float+0x2dc>)
 800f5ec:	2301      	movs	r3, #1
 800f5ee:	4631      	mov	r1, r6
 800f5f0:	4628      	mov	r0, r5
 800f5f2:	47b8      	blx	r7
 800f5f4:	3001      	adds	r0, #1
 800f5f6:	f43f af54 	beq.w	800f4a2 <_printf_float+0xb6>
 800f5fa:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800f5fe:	4543      	cmp	r3, r8
 800f600:	db02      	blt.n	800f608 <_printf_float+0x21c>
 800f602:	6823      	ldr	r3, [r4, #0]
 800f604:	07d8      	lsls	r0, r3, #31
 800f606:	d50f      	bpl.n	800f628 <_printf_float+0x23c>
 800f608:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800f60c:	4631      	mov	r1, r6
 800f60e:	4628      	mov	r0, r5
 800f610:	47b8      	blx	r7
 800f612:	3001      	adds	r0, #1
 800f614:	f43f af45 	beq.w	800f4a2 <_printf_float+0xb6>
 800f618:	f04f 0900 	mov.w	r9, #0
 800f61c:	f108 38ff 	add.w	r8, r8, #4294967295
 800f620:	f104 0a1a 	add.w	sl, r4, #26
 800f624:	45c8      	cmp	r8, r9
 800f626:	dc09      	bgt.n	800f63c <_printf_float+0x250>
 800f628:	6823      	ldr	r3, [r4, #0]
 800f62a:	079b      	lsls	r3, r3, #30
 800f62c:	f100 8103 	bmi.w	800f836 <_printf_float+0x44a>
 800f630:	68e0      	ldr	r0, [r4, #12]
 800f632:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800f634:	4298      	cmp	r0, r3
 800f636:	bfb8      	it	lt
 800f638:	4618      	movlt	r0, r3
 800f63a:	e734      	b.n	800f4a6 <_printf_float+0xba>
 800f63c:	2301      	movs	r3, #1
 800f63e:	4652      	mov	r2, sl
 800f640:	4631      	mov	r1, r6
 800f642:	4628      	mov	r0, r5
 800f644:	47b8      	blx	r7
 800f646:	3001      	adds	r0, #1
 800f648:	f43f af2b 	beq.w	800f4a2 <_printf_float+0xb6>
 800f64c:	f109 0901 	add.w	r9, r9, #1
 800f650:	e7e8      	b.n	800f624 <_printf_float+0x238>
 800f652:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f654:	2b00      	cmp	r3, #0
 800f656:	dc39      	bgt.n	800f6cc <_printf_float+0x2e0>
 800f658:	4a1b      	ldr	r2, [pc, #108]	@ (800f6c8 <_printf_float+0x2dc>)
 800f65a:	2301      	movs	r3, #1
 800f65c:	4631      	mov	r1, r6
 800f65e:	4628      	mov	r0, r5
 800f660:	47b8      	blx	r7
 800f662:	3001      	adds	r0, #1
 800f664:	f43f af1d 	beq.w	800f4a2 <_printf_float+0xb6>
 800f668:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800f66c:	ea59 0303 	orrs.w	r3, r9, r3
 800f670:	d102      	bne.n	800f678 <_printf_float+0x28c>
 800f672:	6823      	ldr	r3, [r4, #0]
 800f674:	07d9      	lsls	r1, r3, #31
 800f676:	d5d7      	bpl.n	800f628 <_printf_float+0x23c>
 800f678:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800f67c:	4631      	mov	r1, r6
 800f67e:	4628      	mov	r0, r5
 800f680:	47b8      	blx	r7
 800f682:	3001      	adds	r0, #1
 800f684:	f43f af0d 	beq.w	800f4a2 <_printf_float+0xb6>
 800f688:	f04f 0a00 	mov.w	sl, #0
 800f68c:	f104 0b1a 	add.w	fp, r4, #26
 800f690:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f692:	425b      	negs	r3, r3
 800f694:	4553      	cmp	r3, sl
 800f696:	dc01      	bgt.n	800f69c <_printf_float+0x2b0>
 800f698:	464b      	mov	r3, r9
 800f69a:	e793      	b.n	800f5c4 <_printf_float+0x1d8>
 800f69c:	2301      	movs	r3, #1
 800f69e:	465a      	mov	r2, fp
 800f6a0:	4631      	mov	r1, r6
 800f6a2:	4628      	mov	r0, r5
 800f6a4:	47b8      	blx	r7
 800f6a6:	3001      	adds	r0, #1
 800f6a8:	f43f aefb 	beq.w	800f4a2 <_printf_float+0xb6>
 800f6ac:	f10a 0a01 	add.w	sl, sl, #1
 800f6b0:	e7ee      	b.n	800f690 <_printf_float+0x2a4>
 800f6b2:	bf00      	nop
 800f6b4:	7fefffff 	.word	0x7fefffff
 800f6b8:	08015888 	.word	0x08015888
 800f6bc:	08015884 	.word	0x08015884
 800f6c0:	08015890 	.word	0x08015890
 800f6c4:	0801588c 	.word	0x0801588c
 800f6c8:	08015894 	.word	0x08015894
 800f6cc:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800f6ce:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800f6d2:	4553      	cmp	r3, sl
 800f6d4:	bfa8      	it	ge
 800f6d6:	4653      	movge	r3, sl
 800f6d8:	2b00      	cmp	r3, #0
 800f6da:	4699      	mov	r9, r3
 800f6dc:	dc36      	bgt.n	800f74c <_printf_float+0x360>
 800f6de:	f04f 0b00 	mov.w	fp, #0
 800f6e2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800f6e6:	f104 021a 	add.w	r2, r4, #26
 800f6ea:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800f6ec:	9306      	str	r3, [sp, #24]
 800f6ee:	eba3 0309 	sub.w	r3, r3, r9
 800f6f2:	455b      	cmp	r3, fp
 800f6f4:	dc31      	bgt.n	800f75a <_printf_float+0x36e>
 800f6f6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f6f8:	459a      	cmp	sl, r3
 800f6fa:	dc3a      	bgt.n	800f772 <_printf_float+0x386>
 800f6fc:	6823      	ldr	r3, [r4, #0]
 800f6fe:	07da      	lsls	r2, r3, #31
 800f700:	d437      	bmi.n	800f772 <_printf_float+0x386>
 800f702:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f704:	ebaa 0903 	sub.w	r9, sl, r3
 800f708:	9b06      	ldr	r3, [sp, #24]
 800f70a:	ebaa 0303 	sub.w	r3, sl, r3
 800f70e:	4599      	cmp	r9, r3
 800f710:	bfa8      	it	ge
 800f712:	4699      	movge	r9, r3
 800f714:	f1b9 0f00 	cmp.w	r9, #0
 800f718:	dc33      	bgt.n	800f782 <_printf_float+0x396>
 800f71a:	f04f 0800 	mov.w	r8, #0
 800f71e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800f722:	f104 0b1a 	add.w	fp, r4, #26
 800f726:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f728:	ebaa 0303 	sub.w	r3, sl, r3
 800f72c:	eba3 0309 	sub.w	r3, r3, r9
 800f730:	4543      	cmp	r3, r8
 800f732:	f77f af79 	ble.w	800f628 <_printf_float+0x23c>
 800f736:	2301      	movs	r3, #1
 800f738:	465a      	mov	r2, fp
 800f73a:	4631      	mov	r1, r6
 800f73c:	4628      	mov	r0, r5
 800f73e:	47b8      	blx	r7
 800f740:	3001      	adds	r0, #1
 800f742:	f43f aeae 	beq.w	800f4a2 <_printf_float+0xb6>
 800f746:	f108 0801 	add.w	r8, r8, #1
 800f74a:	e7ec      	b.n	800f726 <_printf_float+0x33a>
 800f74c:	4642      	mov	r2, r8
 800f74e:	4631      	mov	r1, r6
 800f750:	4628      	mov	r0, r5
 800f752:	47b8      	blx	r7
 800f754:	3001      	adds	r0, #1
 800f756:	d1c2      	bne.n	800f6de <_printf_float+0x2f2>
 800f758:	e6a3      	b.n	800f4a2 <_printf_float+0xb6>
 800f75a:	2301      	movs	r3, #1
 800f75c:	4631      	mov	r1, r6
 800f75e:	4628      	mov	r0, r5
 800f760:	9206      	str	r2, [sp, #24]
 800f762:	47b8      	blx	r7
 800f764:	3001      	adds	r0, #1
 800f766:	f43f ae9c 	beq.w	800f4a2 <_printf_float+0xb6>
 800f76a:	9a06      	ldr	r2, [sp, #24]
 800f76c:	f10b 0b01 	add.w	fp, fp, #1
 800f770:	e7bb      	b.n	800f6ea <_printf_float+0x2fe>
 800f772:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800f776:	4631      	mov	r1, r6
 800f778:	4628      	mov	r0, r5
 800f77a:	47b8      	blx	r7
 800f77c:	3001      	adds	r0, #1
 800f77e:	d1c0      	bne.n	800f702 <_printf_float+0x316>
 800f780:	e68f      	b.n	800f4a2 <_printf_float+0xb6>
 800f782:	9a06      	ldr	r2, [sp, #24]
 800f784:	464b      	mov	r3, r9
 800f786:	4442      	add	r2, r8
 800f788:	4631      	mov	r1, r6
 800f78a:	4628      	mov	r0, r5
 800f78c:	47b8      	blx	r7
 800f78e:	3001      	adds	r0, #1
 800f790:	d1c3      	bne.n	800f71a <_printf_float+0x32e>
 800f792:	e686      	b.n	800f4a2 <_printf_float+0xb6>
 800f794:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800f798:	f1ba 0f01 	cmp.w	sl, #1
 800f79c:	dc01      	bgt.n	800f7a2 <_printf_float+0x3b6>
 800f79e:	07db      	lsls	r3, r3, #31
 800f7a0:	d536      	bpl.n	800f810 <_printf_float+0x424>
 800f7a2:	2301      	movs	r3, #1
 800f7a4:	4642      	mov	r2, r8
 800f7a6:	4631      	mov	r1, r6
 800f7a8:	4628      	mov	r0, r5
 800f7aa:	47b8      	blx	r7
 800f7ac:	3001      	adds	r0, #1
 800f7ae:	f43f ae78 	beq.w	800f4a2 <_printf_float+0xb6>
 800f7b2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800f7b6:	4631      	mov	r1, r6
 800f7b8:	4628      	mov	r0, r5
 800f7ba:	47b8      	blx	r7
 800f7bc:	3001      	adds	r0, #1
 800f7be:	f43f ae70 	beq.w	800f4a2 <_printf_float+0xb6>
 800f7c2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800f7c6:	2200      	movs	r2, #0
 800f7c8:	2300      	movs	r3, #0
 800f7ca:	f10a 3aff 	add.w	sl, sl, #4294967295
 800f7ce:	f7f1 f993 	bl	8000af8 <__aeabi_dcmpeq>
 800f7d2:	b9c0      	cbnz	r0, 800f806 <_printf_float+0x41a>
 800f7d4:	4653      	mov	r3, sl
 800f7d6:	f108 0201 	add.w	r2, r8, #1
 800f7da:	4631      	mov	r1, r6
 800f7dc:	4628      	mov	r0, r5
 800f7de:	47b8      	blx	r7
 800f7e0:	3001      	adds	r0, #1
 800f7e2:	d10c      	bne.n	800f7fe <_printf_float+0x412>
 800f7e4:	e65d      	b.n	800f4a2 <_printf_float+0xb6>
 800f7e6:	2301      	movs	r3, #1
 800f7e8:	465a      	mov	r2, fp
 800f7ea:	4631      	mov	r1, r6
 800f7ec:	4628      	mov	r0, r5
 800f7ee:	47b8      	blx	r7
 800f7f0:	3001      	adds	r0, #1
 800f7f2:	f43f ae56 	beq.w	800f4a2 <_printf_float+0xb6>
 800f7f6:	f108 0801 	add.w	r8, r8, #1
 800f7fa:	45d0      	cmp	r8, sl
 800f7fc:	dbf3      	blt.n	800f7e6 <_printf_float+0x3fa>
 800f7fe:	464b      	mov	r3, r9
 800f800:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800f804:	e6df      	b.n	800f5c6 <_printf_float+0x1da>
 800f806:	f04f 0800 	mov.w	r8, #0
 800f80a:	f104 0b1a 	add.w	fp, r4, #26
 800f80e:	e7f4      	b.n	800f7fa <_printf_float+0x40e>
 800f810:	2301      	movs	r3, #1
 800f812:	4642      	mov	r2, r8
 800f814:	e7e1      	b.n	800f7da <_printf_float+0x3ee>
 800f816:	2301      	movs	r3, #1
 800f818:	464a      	mov	r2, r9
 800f81a:	4631      	mov	r1, r6
 800f81c:	4628      	mov	r0, r5
 800f81e:	47b8      	blx	r7
 800f820:	3001      	adds	r0, #1
 800f822:	f43f ae3e 	beq.w	800f4a2 <_printf_float+0xb6>
 800f826:	f108 0801 	add.w	r8, r8, #1
 800f82a:	68e3      	ldr	r3, [r4, #12]
 800f82c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800f82e:	1a5b      	subs	r3, r3, r1
 800f830:	4543      	cmp	r3, r8
 800f832:	dcf0      	bgt.n	800f816 <_printf_float+0x42a>
 800f834:	e6fc      	b.n	800f630 <_printf_float+0x244>
 800f836:	f04f 0800 	mov.w	r8, #0
 800f83a:	f104 0919 	add.w	r9, r4, #25
 800f83e:	e7f4      	b.n	800f82a <_printf_float+0x43e>

0800f840 <_printf_common>:
 800f840:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f844:	4616      	mov	r6, r2
 800f846:	4698      	mov	r8, r3
 800f848:	688a      	ldr	r2, [r1, #8]
 800f84a:	690b      	ldr	r3, [r1, #16]
 800f84c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800f850:	4293      	cmp	r3, r2
 800f852:	bfb8      	it	lt
 800f854:	4613      	movlt	r3, r2
 800f856:	6033      	str	r3, [r6, #0]
 800f858:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800f85c:	4607      	mov	r7, r0
 800f85e:	460c      	mov	r4, r1
 800f860:	b10a      	cbz	r2, 800f866 <_printf_common+0x26>
 800f862:	3301      	adds	r3, #1
 800f864:	6033      	str	r3, [r6, #0]
 800f866:	6823      	ldr	r3, [r4, #0]
 800f868:	0699      	lsls	r1, r3, #26
 800f86a:	bf42      	ittt	mi
 800f86c:	6833      	ldrmi	r3, [r6, #0]
 800f86e:	3302      	addmi	r3, #2
 800f870:	6033      	strmi	r3, [r6, #0]
 800f872:	6825      	ldr	r5, [r4, #0]
 800f874:	f015 0506 	ands.w	r5, r5, #6
 800f878:	d106      	bne.n	800f888 <_printf_common+0x48>
 800f87a:	f104 0a19 	add.w	sl, r4, #25
 800f87e:	68e3      	ldr	r3, [r4, #12]
 800f880:	6832      	ldr	r2, [r6, #0]
 800f882:	1a9b      	subs	r3, r3, r2
 800f884:	42ab      	cmp	r3, r5
 800f886:	dc26      	bgt.n	800f8d6 <_printf_common+0x96>
 800f888:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800f88c:	6822      	ldr	r2, [r4, #0]
 800f88e:	3b00      	subs	r3, #0
 800f890:	bf18      	it	ne
 800f892:	2301      	movne	r3, #1
 800f894:	0692      	lsls	r2, r2, #26
 800f896:	d42b      	bmi.n	800f8f0 <_printf_common+0xb0>
 800f898:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800f89c:	4641      	mov	r1, r8
 800f89e:	4638      	mov	r0, r7
 800f8a0:	47c8      	blx	r9
 800f8a2:	3001      	adds	r0, #1
 800f8a4:	d01e      	beq.n	800f8e4 <_printf_common+0xa4>
 800f8a6:	6823      	ldr	r3, [r4, #0]
 800f8a8:	6922      	ldr	r2, [r4, #16]
 800f8aa:	f003 0306 	and.w	r3, r3, #6
 800f8ae:	2b04      	cmp	r3, #4
 800f8b0:	bf02      	ittt	eq
 800f8b2:	68e5      	ldreq	r5, [r4, #12]
 800f8b4:	6833      	ldreq	r3, [r6, #0]
 800f8b6:	1aed      	subeq	r5, r5, r3
 800f8b8:	68a3      	ldr	r3, [r4, #8]
 800f8ba:	bf0c      	ite	eq
 800f8bc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800f8c0:	2500      	movne	r5, #0
 800f8c2:	4293      	cmp	r3, r2
 800f8c4:	bfc4      	itt	gt
 800f8c6:	1a9b      	subgt	r3, r3, r2
 800f8c8:	18ed      	addgt	r5, r5, r3
 800f8ca:	2600      	movs	r6, #0
 800f8cc:	341a      	adds	r4, #26
 800f8ce:	42b5      	cmp	r5, r6
 800f8d0:	d11a      	bne.n	800f908 <_printf_common+0xc8>
 800f8d2:	2000      	movs	r0, #0
 800f8d4:	e008      	b.n	800f8e8 <_printf_common+0xa8>
 800f8d6:	2301      	movs	r3, #1
 800f8d8:	4652      	mov	r2, sl
 800f8da:	4641      	mov	r1, r8
 800f8dc:	4638      	mov	r0, r7
 800f8de:	47c8      	blx	r9
 800f8e0:	3001      	adds	r0, #1
 800f8e2:	d103      	bne.n	800f8ec <_printf_common+0xac>
 800f8e4:	f04f 30ff 	mov.w	r0, #4294967295
 800f8e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f8ec:	3501      	adds	r5, #1
 800f8ee:	e7c6      	b.n	800f87e <_printf_common+0x3e>
 800f8f0:	18e1      	adds	r1, r4, r3
 800f8f2:	1c5a      	adds	r2, r3, #1
 800f8f4:	2030      	movs	r0, #48	@ 0x30
 800f8f6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800f8fa:	4422      	add	r2, r4
 800f8fc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800f900:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800f904:	3302      	adds	r3, #2
 800f906:	e7c7      	b.n	800f898 <_printf_common+0x58>
 800f908:	2301      	movs	r3, #1
 800f90a:	4622      	mov	r2, r4
 800f90c:	4641      	mov	r1, r8
 800f90e:	4638      	mov	r0, r7
 800f910:	47c8      	blx	r9
 800f912:	3001      	adds	r0, #1
 800f914:	d0e6      	beq.n	800f8e4 <_printf_common+0xa4>
 800f916:	3601      	adds	r6, #1
 800f918:	e7d9      	b.n	800f8ce <_printf_common+0x8e>
	...

0800f91c <_printf_i>:
 800f91c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800f920:	7e0f      	ldrb	r7, [r1, #24]
 800f922:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800f924:	2f78      	cmp	r7, #120	@ 0x78
 800f926:	4691      	mov	r9, r2
 800f928:	4680      	mov	r8, r0
 800f92a:	460c      	mov	r4, r1
 800f92c:	469a      	mov	sl, r3
 800f92e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800f932:	d807      	bhi.n	800f944 <_printf_i+0x28>
 800f934:	2f62      	cmp	r7, #98	@ 0x62
 800f936:	d80a      	bhi.n	800f94e <_printf_i+0x32>
 800f938:	2f00      	cmp	r7, #0
 800f93a:	f000 80d1 	beq.w	800fae0 <_printf_i+0x1c4>
 800f93e:	2f58      	cmp	r7, #88	@ 0x58
 800f940:	f000 80b8 	beq.w	800fab4 <_printf_i+0x198>
 800f944:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800f948:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800f94c:	e03a      	b.n	800f9c4 <_printf_i+0xa8>
 800f94e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800f952:	2b15      	cmp	r3, #21
 800f954:	d8f6      	bhi.n	800f944 <_printf_i+0x28>
 800f956:	a101      	add	r1, pc, #4	@ (adr r1, 800f95c <_printf_i+0x40>)
 800f958:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800f95c:	0800f9b5 	.word	0x0800f9b5
 800f960:	0800f9c9 	.word	0x0800f9c9
 800f964:	0800f945 	.word	0x0800f945
 800f968:	0800f945 	.word	0x0800f945
 800f96c:	0800f945 	.word	0x0800f945
 800f970:	0800f945 	.word	0x0800f945
 800f974:	0800f9c9 	.word	0x0800f9c9
 800f978:	0800f945 	.word	0x0800f945
 800f97c:	0800f945 	.word	0x0800f945
 800f980:	0800f945 	.word	0x0800f945
 800f984:	0800f945 	.word	0x0800f945
 800f988:	0800fac7 	.word	0x0800fac7
 800f98c:	0800f9f3 	.word	0x0800f9f3
 800f990:	0800fa81 	.word	0x0800fa81
 800f994:	0800f945 	.word	0x0800f945
 800f998:	0800f945 	.word	0x0800f945
 800f99c:	0800fae9 	.word	0x0800fae9
 800f9a0:	0800f945 	.word	0x0800f945
 800f9a4:	0800f9f3 	.word	0x0800f9f3
 800f9a8:	0800f945 	.word	0x0800f945
 800f9ac:	0800f945 	.word	0x0800f945
 800f9b0:	0800fa89 	.word	0x0800fa89
 800f9b4:	6833      	ldr	r3, [r6, #0]
 800f9b6:	1d1a      	adds	r2, r3, #4
 800f9b8:	681b      	ldr	r3, [r3, #0]
 800f9ba:	6032      	str	r2, [r6, #0]
 800f9bc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800f9c0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800f9c4:	2301      	movs	r3, #1
 800f9c6:	e09c      	b.n	800fb02 <_printf_i+0x1e6>
 800f9c8:	6833      	ldr	r3, [r6, #0]
 800f9ca:	6820      	ldr	r0, [r4, #0]
 800f9cc:	1d19      	adds	r1, r3, #4
 800f9ce:	6031      	str	r1, [r6, #0]
 800f9d0:	0606      	lsls	r6, r0, #24
 800f9d2:	d501      	bpl.n	800f9d8 <_printf_i+0xbc>
 800f9d4:	681d      	ldr	r5, [r3, #0]
 800f9d6:	e003      	b.n	800f9e0 <_printf_i+0xc4>
 800f9d8:	0645      	lsls	r5, r0, #25
 800f9da:	d5fb      	bpl.n	800f9d4 <_printf_i+0xb8>
 800f9dc:	f9b3 5000 	ldrsh.w	r5, [r3]
 800f9e0:	2d00      	cmp	r5, #0
 800f9e2:	da03      	bge.n	800f9ec <_printf_i+0xd0>
 800f9e4:	232d      	movs	r3, #45	@ 0x2d
 800f9e6:	426d      	negs	r5, r5
 800f9e8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800f9ec:	4858      	ldr	r0, [pc, #352]	@ (800fb50 <_printf_i+0x234>)
 800f9ee:	230a      	movs	r3, #10
 800f9f0:	e011      	b.n	800fa16 <_printf_i+0xfa>
 800f9f2:	6821      	ldr	r1, [r4, #0]
 800f9f4:	6833      	ldr	r3, [r6, #0]
 800f9f6:	0608      	lsls	r0, r1, #24
 800f9f8:	f853 5b04 	ldr.w	r5, [r3], #4
 800f9fc:	d402      	bmi.n	800fa04 <_printf_i+0xe8>
 800f9fe:	0649      	lsls	r1, r1, #25
 800fa00:	bf48      	it	mi
 800fa02:	b2ad      	uxthmi	r5, r5
 800fa04:	2f6f      	cmp	r7, #111	@ 0x6f
 800fa06:	4852      	ldr	r0, [pc, #328]	@ (800fb50 <_printf_i+0x234>)
 800fa08:	6033      	str	r3, [r6, #0]
 800fa0a:	bf14      	ite	ne
 800fa0c:	230a      	movne	r3, #10
 800fa0e:	2308      	moveq	r3, #8
 800fa10:	2100      	movs	r1, #0
 800fa12:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800fa16:	6866      	ldr	r6, [r4, #4]
 800fa18:	60a6      	str	r6, [r4, #8]
 800fa1a:	2e00      	cmp	r6, #0
 800fa1c:	db05      	blt.n	800fa2a <_printf_i+0x10e>
 800fa1e:	6821      	ldr	r1, [r4, #0]
 800fa20:	432e      	orrs	r6, r5
 800fa22:	f021 0104 	bic.w	r1, r1, #4
 800fa26:	6021      	str	r1, [r4, #0]
 800fa28:	d04b      	beq.n	800fac2 <_printf_i+0x1a6>
 800fa2a:	4616      	mov	r6, r2
 800fa2c:	fbb5 f1f3 	udiv	r1, r5, r3
 800fa30:	fb03 5711 	mls	r7, r3, r1, r5
 800fa34:	5dc7      	ldrb	r7, [r0, r7]
 800fa36:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800fa3a:	462f      	mov	r7, r5
 800fa3c:	42bb      	cmp	r3, r7
 800fa3e:	460d      	mov	r5, r1
 800fa40:	d9f4      	bls.n	800fa2c <_printf_i+0x110>
 800fa42:	2b08      	cmp	r3, #8
 800fa44:	d10b      	bne.n	800fa5e <_printf_i+0x142>
 800fa46:	6823      	ldr	r3, [r4, #0]
 800fa48:	07df      	lsls	r7, r3, #31
 800fa4a:	d508      	bpl.n	800fa5e <_printf_i+0x142>
 800fa4c:	6923      	ldr	r3, [r4, #16]
 800fa4e:	6861      	ldr	r1, [r4, #4]
 800fa50:	4299      	cmp	r1, r3
 800fa52:	bfde      	ittt	le
 800fa54:	2330      	movle	r3, #48	@ 0x30
 800fa56:	f806 3c01 	strble.w	r3, [r6, #-1]
 800fa5a:	f106 36ff 	addle.w	r6, r6, #4294967295
 800fa5e:	1b92      	subs	r2, r2, r6
 800fa60:	6122      	str	r2, [r4, #16]
 800fa62:	f8cd a000 	str.w	sl, [sp]
 800fa66:	464b      	mov	r3, r9
 800fa68:	aa03      	add	r2, sp, #12
 800fa6a:	4621      	mov	r1, r4
 800fa6c:	4640      	mov	r0, r8
 800fa6e:	f7ff fee7 	bl	800f840 <_printf_common>
 800fa72:	3001      	adds	r0, #1
 800fa74:	d14a      	bne.n	800fb0c <_printf_i+0x1f0>
 800fa76:	f04f 30ff 	mov.w	r0, #4294967295
 800fa7a:	b004      	add	sp, #16
 800fa7c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fa80:	6823      	ldr	r3, [r4, #0]
 800fa82:	f043 0320 	orr.w	r3, r3, #32
 800fa86:	6023      	str	r3, [r4, #0]
 800fa88:	4832      	ldr	r0, [pc, #200]	@ (800fb54 <_printf_i+0x238>)
 800fa8a:	2778      	movs	r7, #120	@ 0x78
 800fa8c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800fa90:	6823      	ldr	r3, [r4, #0]
 800fa92:	6831      	ldr	r1, [r6, #0]
 800fa94:	061f      	lsls	r7, r3, #24
 800fa96:	f851 5b04 	ldr.w	r5, [r1], #4
 800fa9a:	d402      	bmi.n	800faa2 <_printf_i+0x186>
 800fa9c:	065f      	lsls	r7, r3, #25
 800fa9e:	bf48      	it	mi
 800faa0:	b2ad      	uxthmi	r5, r5
 800faa2:	6031      	str	r1, [r6, #0]
 800faa4:	07d9      	lsls	r1, r3, #31
 800faa6:	bf44      	itt	mi
 800faa8:	f043 0320 	orrmi.w	r3, r3, #32
 800faac:	6023      	strmi	r3, [r4, #0]
 800faae:	b11d      	cbz	r5, 800fab8 <_printf_i+0x19c>
 800fab0:	2310      	movs	r3, #16
 800fab2:	e7ad      	b.n	800fa10 <_printf_i+0xf4>
 800fab4:	4826      	ldr	r0, [pc, #152]	@ (800fb50 <_printf_i+0x234>)
 800fab6:	e7e9      	b.n	800fa8c <_printf_i+0x170>
 800fab8:	6823      	ldr	r3, [r4, #0]
 800faba:	f023 0320 	bic.w	r3, r3, #32
 800fabe:	6023      	str	r3, [r4, #0]
 800fac0:	e7f6      	b.n	800fab0 <_printf_i+0x194>
 800fac2:	4616      	mov	r6, r2
 800fac4:	e7bd      	b.n	800fa42 <_printf_i+0x126>
 800fac6:	6833      	ldr	r3, [r6, #0]
 800fac8:	6825      	ldr	r5, [r4, #0]
 800faca:	6961      	ldr	r1, [r4, #20]
 800facc:	1d18      	adds	r0, r3, #4
 800face:	6030      	str	r0, [r6, #0]
 800fad0:	062e      	lsls	r6, r5, #24
 800fad2:	681b      	ldr	r3, [r3, #0]
 800fad4:	d501      	bpl.n	800fada <_printf_i+0x1be>
 800fad6:	6019      	str	r1, [r3, #0]
 800fad8:	e002      	b.n	800fae0 <_printf_i+0x1c4>
 800fada:	0668      	lsls	r0, r5, #25
 800fadc:	d5fb      	bpl.n	800fad6 <_printf_i+0x1ba>
 800fade:	8019      	strh	r1, [r3, #0]
 800fae0:	2300      	movs	r3, #0
 800fae2:	6123      	str	r3, [r4, #16]
 800fae4:	4616      	mov	r6, r2
 800fae6:	e7bc      	b.n	800fa62 <_printf_i+0x146>
 800fae8:	6833      	ldr	r3, [r6, #0]
 800faea:	1d1a      	adds	r2, r3, #4
 800faec:	6032      	str	r2, [r6, #0]
 800faee:	681e      	ldr	r6, [r3, #0]
 800faf0:	6862      	ldr	r2, [r4, #4]
 800faf2:	2100      	movs	r1, #0
 800faf4:	4630      	mov	r0, r6
 800faf6:	f7f0 fb83 	bl	8000200 <memchr>
 800fafa:	b108      	cbz	r0, 800fb00 <_printf_i+0x1e4>
 800fafc:	1b80      	subs	r0, r0, r6
 800fafe:	6060      	str	r0, [r4, #4]
 800fb00:	6863      	ldr	r3, [r4, #4]
 800fb02:	6123      	str	r3, [r4, #16]
 800fb04:	2300      	movs	r3, #0
 800fb06:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800fb0a:	e7aa      	b.n	800fa62 <_printf_i+0x146>
 800fb0c:	6923      	ldr	r3, [r4, #16]
 800fb0e:	4632      	mov	r2, r6
 800fb10:	4649      	mov	r1, r9
 800fb12:	4640      	mov	r0, r8
 800fb14:	47d0      	blx	sl
 800fb16:	3001      	adds	r0, #1
 800fb18:	d0ad      	beq.n	800fa76 <_printf_i+0x15a>
 800fb1a:	6823      	ldr	r3, [r4, #0]
 800fb1c:	079b      	lsls	r3, r3, #30
 800fb1e:	d413      	bmi.n	800fb48 <_printf_i+0x22c>
 800fb20:	68e0      	ldr	r0, [r4, #12]
 800fb22:	9b03      	ldr	r3, [sp, #12]
 800fb24:	4298      	cmp	r0, r3
 800fb26:	bfb8      	it	lt
 800fb28:	4618      	movlt	r0, r3
 800fb2a:	e7a6      	b.n	800fa7a <_printf_i+0x15e>
 800fb2c:	2301      	movs	r3, #1
 800fb2e:	4632      	mov	r2, r6
 800fb30:	4649      	mov	r1, r9
 800fb32:	4640      	mov	r0, r8
 800fb34:	47d0      	blx	sl
 800fb36:	3001      	adds	r0, #1
 800fb38:	d09d      	beq.n	800fa76 <_printf_i+0x15a>
 800fb3a:	3501      	adds	r5, #1
 800fb3c:	68e3      	ldr	r3, [r4, #12]
 800fb3e:	9903      	ldr	r1, [sp, #12]
 800fb40:	1a5b      	subs	r3, r3, r1
 800fb42:	42ab      	cmp	r3, r5
 800fb44:	dcf2      	bgt.n	800fb2c <_printf_i+0x210>
 800fb46:	e7eb      	b.n	800fb20 <_printf_i+0x204>
 800fb48:	2500      	movs	r5, #0
 800fb4a:	f104 0619 	add.w	r6, r4, #25
 800fb4e:	e7f5      	b.n	800fb3c <_printf_i+0x220>
 800fb50:	08015896 	.word	0x08015896
 800fb54:	080158a7 	.word	0x080158a7

0800fb58 <_scanf_float>:
 800fb58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fb5c:	b087      	sub	sp, #28
 800fb5e:	4691      	mov	r9, r2
 800fb60:	9303      	str	r3, [sp, #12]
 800fb62:	688b      	ldr	r3, [r1, #8]
 800fb64:	1e5a      	subs	r2, r3, #1
 800fb66:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800fb6a:	bf81      	itttt	hi
 800fb6c:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800fb70:	eb03 0b05 	addhi.w	fp, r3, r5
 800fb74:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800fb78:	608b      	strhi	r3, [r1, #8]
 800fb7a:	680b      	ldr	r3, [r1, #0]
 800fb7c:	460a      	mov	r2, r1
 800fb7e:	f04f 0500 	mov.w	r5, #0
 800fb82:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800fb86:	f842 3b1c 	str.w	r3, [r2], #28
 800fb8a:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800fb8e:	4680      	mov	r8, r0
 800fb90:	460c      	mov	r4, r1
 800fb92:	bf98      	it	ls
 800fb94:	f04f 0b00 	movls.w	fp, #0
 800fb98:	9201      	str	r2, [sp, #4]
 800fb9a:	4616      	mov	r6, r2
 800fb9c:	46aa      	mov	sl, r5
 800fb9e:	462f      	mov	r7, r5
 800fba0:	9502      	str	r5, [sp, #8]
 800fba2:	68a2      	ldr	r2, [r4, #8]
 800fba4:	b15a      	cbz	r2, 800fbbe <_scanf_float+0x66>
 800fba6:	f8d9 3000 	ldr.w	r3, [r9]
 800fbaa:	781b      	ldrb	r3, [r3, #0]
 800fbac:	2b4e      	cmp	r3, #78	@ 0x4e
 800fbae:	d863      	bhi.n	800fc78 <_scanf_float+0x120>
 800fbb0:	2b40      	cmp	r3, #64	@ 0x40
 800fbb2:	d83b      	bhi.n	800fc2c <_scanf_float+0xd4>
 800fbb4:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 800fbb8:	b2c8      	uxtb	r0, r1
 800fbba:	280e      	cmp	r0, #14
 800fbbc:	d939      	bls.n	800fc32 <_scanf_float+0xda>
 800fbbe:	b11f      	cbz	r7, 800fbc8 <_scanf_float+0x70>
 800fbc0:	6823      	ldr	r3, [r4, #0]
 800fbc2:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800fbc6:	6023      	str	r3, [r4, #0]
 800fbc8:	f10a 3aff 	add.w	sl, sl, #4294967295
 800fbcc:	f1ba 0f01 	cmp.w	sl, #1
 800fbd0:	f200 8114 	bhi.w	800fdfc <_scanf_float+0x2a4>
 800fbd4:	9b01      	ldr	r3, [sp, #4]
 800fbd6:	429e      	cmp	r6, r3
 800fbd8:	f200 8105 	bhi.w	800fde6 <_scanf_float+0x28e>
 800fbdc:	2001      	movs	r0, #1
 800fbde:	b007      	add	sp, #28
 800fbe0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fbe4:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800fbe8:	2a0d      	cmp	r2, #13
 800fbea:	d8e8      	bhi.n	800fbbe <_scanf_float+0x66>
 800fbec:	a101      	add	r1, pc, #4	@ (adr r1, 800fbf4 <_scanf_float+0x9c>)
 800fbee:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800fbf2:	bf00      	nop
 800fbf4:	0800fd3d 	.word	0x0800fd3d
 800fbf8:	0800fbbf 	.word	0x0800fbbf
 800fbfc:	0800fbbf 	.word	0x0800fbbf
 800fc00:	0800fbbf 	.word	0x0800fbbf
 800fc04:	0800fd99 	.word	0x0800fd99
 800fc08:	0800fd73 	.word	0x0800fd73
 800fc0c:	0800fbbf 	.word	0x0800fbbf
 800fc10:	0800fbbf 	.word	0x0800fbbf
 800fc14:	0800fd4b 	.word	0x0800fd4b
 800fc18:	0800fbbf 	.word	0x0800fbbf
 800fc1c:	0800fbbf 	.word	0x0800fbbf
 800fc20:	0800fbbf 	.word	0x0800fbbf
 800fc24:	0800fbbf 	.word	0x0800fbbf
 800fc28:	0800fd07 	.word	0x0800fd07
 800fc2c:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 800fc30:	e7da      	b.n	800fbe8 <_scanf_float+0x90>
 800fc32:	290e      	cmp	r1, #14
 800fc34:	d8c3      	bhi.n	800fbbe <_scanf_float+0x66>
 800fc36:	a001      	add	r0, pc, #4	@ (adr r0, 800fc3c <_scanf_float+0xe4>)
 800fc38:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800fc3c:	0800fcf7 	.word	0x0800fcf7
 800fc40:	0800fbbf 	.word	0x0800fbbf
 800fc44:	0800fcf7 	.word	0x0800fcf7
 800fc48:	0800fd87 	.word	0x0800fd87
 800fc4c:	0800fbbf 	.word	0x0800fbbf
 800fc50:	0800fc99 	.word	0x0800fc99
 800fc54:	0800fcdd 	.word	0x0800fcdd
 800fc58:	0800fcdd 	.word	0x0800fcdd
 800fc5c:	0800fcdd 	.word	0x0800fcdd
 800fc60:	0800fcdd 	.word	0x0800fcdd
 800fc64:	0800fcdd 	.word	0x0800fcdd
 800fc68:	0800fcdd 	.word	0x0800fcdd
 800fc6c:	0800fcdd 	.word	0x0800fcdd
 800fc70:	0800fcdd 	.word	0x0800fcdd
 800fc74:	0800fcdd 	.word	0x0800fcdd
 800fc78:	2b6e      	cmp	r3, #110	@ 0x6e
 800fc7a:	d809      	bhi.n	800fc90 <_scanf_float+0x138>
 800fc7c:	2b60      	cmp	r3, #96	@ 0x60
 800fc7e:	d8b1      	bhi.n	800fbe4 <_scanf_float+0x8c>
 800fc80:	2b54      	cmp	r3, #84	@ 0x54
 800fc82:	d07b      	beq.n	800fd7c <_scanf_float+0x224>
 800fc84:	2b59      	cmp	r3, #89	@ 0x59
 800fc86:	d19a      	bne.n	800fbbe <_scanf_float+0x66>
 800fc88:	2d07      	cmp	r5, #7
 800fc8a:	d198      	bne.n	800fbbe <_scanf_float+0x66>
 800fc8c:	2508      	movs	r5, #8
 800fc8e:	e02f      	b.n	800fcf0 <_scanf_float+0x198>
 800fc90:	2b74      	cmp	r3, #116	@ 0x74
 800fc92:	d073      	beq.n	800fd7c <_scanf_float+0x224>
 800fc94:	2b79      	cmp	r3, #121	@ 0x79
 800fc96:	e7f6      	b.n	800fc86 <_scanf_float+0x12e>
 800fc98:	6821      	ldr	r1, [r4, #0]
 800fc9a:	05c8      	lsls	r0, r1, #23
 800fc9c:	d51e      	bpl.n	800fcdc <_scanf_float+0x184>
 800fc9e:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800fca2:	6021      	str	r1, [r4, #0]
 800fca4:	3701      	adds	r7, #1
 800fca6:	f1bb 0f00 	cmp.w	fp, #0
 800fcaa:	d003      	beq.n	800fcb4 <_scanf_float+0x15c>
 800fcac:	3201      	adds	r2, #1
 800fcae:	f10b 3bff 	add.w	fp, fp, #4294967295
 800fcb2:	60a2      	str	r2, [r4, #8]
 800fcb4:	68a3      	ldr	r3, [r4, #8]
 800fcb6:	3b01      	subs	r3, #1
 800fcb8:	60a3      	str	r3, [r4, #8]
 800fcba:	6923      	ldr	r3, [r4, #16]
 800fcbc:	3301      	adds	r3, #1
 800fcbe:	6123      	str	r3, [r4, #16]
 800fcc0:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800fcc4:	3b01      	subs	r3, #1
 800fcc6:	2b00      	cmp	r3, #0
 800fcc8:	f8c9 3004 	str.w	r3, [r9, #4]
 800fccc:	f340 8082 	ble.w	800fdd4 <_scanf_float+0x27c>
 800fcd0:	f8d9 3000 	ldr.w	r3, [r9]
 800fcd4:	3301      	adds	r3, #1
 800fcd6:	f8c9 3000 	str.w	r3, [r9]
 800fcda:	e762      	b.n	800fba2 <_scanf_float+0x4a>
 800fcdc:	eb1a 0105 	adds.w	r1, sl, r5
 800fce0:	f47f af6d 	bne.w	800fbbe <_scanf_float+0x66>
 800fce4:	6822      	ldr	r2, [r4, #0]
 800fce6:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 800fcea:	6022      	str	r2, [r4, #0]
 800fcec:	460d      	mov	r5, r1
 800fcee:	468a      	mov	sl, r1
 800fcf0:	f806 3b01 	strb.w	r3, [r6], #1
 800fcf4:	e7de      	b.n	800fcb4 <_scanf_float+0x15c>
 800fcf6:	6822      	ldr	r2, [r4, #0]
 800fcf8:	0610      	lsls	r0, r2, #24
 800fcfa:	f57f af60 	bpl.w	800fbbe <_scanf_float+0x66>
 800fcfe:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800fd02:	6022      	str	r2, [r4, #0]
 800fd04:	e7f4      	b.n	800fcf0 <_scanf_float+0x198>
 800fd06:	f1ba 0f00 	cmp.w	sl, #0
 800fd0a:	d10c      	bne.n	800fd26 <_scanf_float+0x1ce>
 800fd0c:	b977      	cbnz	r7, 800fd2c <_scanf_float+0x1d4>
 800fd0e:	6822      	ldr	r2, [r4, #0]
 800fd10:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800fd14:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800fd18:	d108      	bne.n	800fd2c <_scanf_float+0x1d4>
 800fd1a:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800fd1e:	6022      	str	r2, [r4, #0]
 800fd20:	f04f 0a01 	mov.w	sl, #1
 800fd24:	e7e4      	b.n	800fcf0 <_scanf_float+0x198>
 800fd26:	f1ba 0f02 	cmp.w	sl, #2
 800fd2a:	d050      	beq.n	800fdce <_scanf_float+0x276>
 800fd2c:	2d01      	cmp	r5, #1
 800fd2e:	d002      	beq.n	800fd36 <_scanf_float+0x1de>
 800fd30:	2d04      	cmp	r5, #4
 800fd32:	f47f af44 	bne.w	800fbbe <_scanf_float+0x66>
 800fd36:	3501      	adds	r5, #1
 800fd38:	b2ed      	uxtb	r5, r5
 800fd3a:	e7d9      	b.n	800fcf0 <_scanf_float+0x198>
 800fd3c:	f1ba 0f01 	cmp.w	sl, #1
 800fd40:	f47f af3d 	bne.w	800fbbe <_scanf_float+0x66>
 800fd44:	f04f 0a02 	mov.w	sl, #2
 800fd48:	e7d2      	b.n	800fcf0 <_scanf_float+0x198>
 800fd4a:	b975      	cbnz	r5, 800fd6a <_scanf_float+0x212>
 800fd4c:	2f00      	cmp	r7, #0
 800fd4e:	f47f af37 	bne.w	800fbc0 <_scanf_float+0x68>
 800fd52:	6822      	ldr	r2, [r4, #0]
 800fd54:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800fd58:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800fd5c:	f040 8103 	bne.w	800ff66 <_scanf_float+0x40e>
 800fd60:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800fd64:	6022      	str	r2, [r4, #0]
 800fd66:	2501      	movs	r5, #1
 800fd68:	e7c2      	b.n	800fcf0 <_scanf_float+0x198>
 800fd6a:	2d03      	cmp	r5, #3
 800fd6c:	d0e3      	beq.n	800fd36 <_scanf_float+0x1de>
 800fd6e:	2d05      	cmp	r5, #5
 800fd70:	e7df      	b.n	800fd32 <_scanf_float+0x1da>
 800fd72:	2d02      	cmp	r5, #2
 800fd74:	f47f af23 	bne.w	800fbbe <_scanf_float+0x66>
 800fd78:	2503      	movs	r5, #3
 800fd7a:	e7b9      	b.n	800fcf0 <_scanf_float+0x198>
 800fd7c:	2d06      	cmp	r5, #6
 800fd7e:	f47f af1e 	bne.w	800fbbe <_scanf_float+0x66>
 800fd82:	2507      	movs	r5, #7
 800fd84:	e7b4      	b.n	800fcf0 <_scanf_float+0x198>
 800fd86:	6822      	ldr	r2, [r4, #0]
 800fd88:	0591      	lsls	r1, r2, #22
 800fd8a:	f57f af18 	bpl.w	800fbbe <_scanf_float+0x66>
 800fd8e:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800fd92:	6022      	str	r2, [r4, #0]
 800fd94:	9702      	str	r7, [sp, #8]
 800fd96:	e7ab      	b.n	800fcf0 <_scanf_float+0x198>
 800fd98:	6822      	ldr	r2, [r4, #0]
 800fd9a:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 800fd9e:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800fda2:	d005      	beq.n	800fdb0 <_scanf_float+0x258>
 800fda4:	0550      	lsls	r0, r2, #21
 800fda6:	f57f af0a 	bpl.w	800fbbe <_scanf_float+0x66>
 800fdaa:	2f00      	cmp	r7, #0
 800fdac:	f000 80db 	beq.w	800ff66 <_scanf_float+0x40e>
 800fdb0:	0591      	lsls	r1, r2, #22
 800fdb2:	bf58      	it	pl
 800fdb4:	9902      	ldrpl	r1, [sp, #8]
 800fdb6:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800fdba:	bf58      	it	pl
 800fdbc:	1a79      	subpl	r1, r7, r1
 800fdbe:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800fdc2:	bf58      	it	pl
 800fdc4:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800fdc8:	6022      	str	r2, [r4, #0]
 800fdca:	2700      	movs	r7, #0
 800fdcc:	e790      	b.n	800fcf0 <_scanf_float+0x198>
 800fdce:	f04f 0a03 	mov.w	sl, #3
 800fdd2:	e78d      	b.n	800fcf0 <_scanf_float+0x198>
 800fdd4:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800fdd8:	4649      	mov	r1, r9
 800fdda:	4640      	mov	r0, r8
 800fddc:	4798      	blx	r3
 800fdde:	2800      	cmp	r0, #0
 800fde0:	f43f aedf 	beq.w	800fba2 <_scanf_float+0x4a>
 800fde4:	e6eb      	b.n	800fbbe <_scanf_float+0x66>
 800fde6:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800fdea:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800fdee:	464a      	mov	r2, r9
 800fdf0:	4640      	mov	r0, r8
 800fdf2:	4798      	blx	r3
 800fdf4:	6923      	ldr	r3, [r4, #16]
 800fdf6:	3b01      	subs	r3, #1
 800fdf8:	6123      	str	r3, [r4, #16]
 800fdfa:	e6eb      	b.n	800fbd4 <_scanf_float+0x7c>
 800fdfc:	1e6b      	subs	r3, r5, #1
 800fdfe:	2b06      	cmp	r3, #6
 800fe00:	d824      	bhi.n	800fe4c <_scanf_float+0x2f4>
 800fe02:	2d02      	cmp	r5, #2
 800fe04:	d836      	bhi.n	800fe74 <_scanf_float+0x31c>
 800fe06:	9b01      	ldr	r3, [sp, #4]
 800fe08:	429e      	cmp	r6, r3
 800fe0a:	f67f aee7 	bls.w	800fbdc <_scanf_float+0x84>
 800fe0e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800fe12:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800fe16:	464a      	mov	r2, r9
 800fe18:	4640      	mov	r0, r8
 800fe1a:	4798      	blx	r3
 800fe1c:	6923      	ldr	r3, [r4, #16]
 800fe1e:	3b01      	subs	r3, #1
 800fe20:	6123      	str	r3, [r4, #16]
 800fe22:	e7f0      	b.n	800fe06 <_scanf_float+0x2ae>
 800fe24:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800fe28:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 800fe2c:	464a      	mov	r2, r9
 800fe2e:	4640      	mov	r0, r8
 800fe30:	4798      	blx	r3
 800fe32:	6923      	ldr	r3, [r4, #16]
 800fe34:	3b01      	subs	r3, #1
 800fe36:	6123      	str	r3, [r4, #16]
 800fe38:	f10a 3aff 	add.w	sl, sl, #4294967295
 800fe3c:	fa5f fa8a 	uxtb.w	sl, sl
 800fe40:	f1ba 0f02 	cmp.w	sl, #2
 800fe44:	d1ee      	bne.n	800fe24 <_scanf_float+0x2cc>
 800fe46:	3d03      	subs	r5, #3
 800fe48:	b2ed      	uxtb	r5, r5
 800fe4a:	1b76      	subs	r6, r6, r5
 800fe4c:	6823      	ldr	r3, [r4, #0]
 800fe4e:	05da      	lsls	r2, r3, #23
 800fe50:	d530      	bpl.n	800feb4 <_scanf_float+0x35c>
 800fe52:	055b      	lsls	r3, r3, #21
 800fe54:	d511      	bpl.n	800fe7a <_scanf_float+0x322>
 800fe56:	9b01      	ldr	r3, [sp, #4]
 800fe58:	429e      	cmp	r6, r3
 800fe5a:	f67f aebf 	bls.w	800fbdc <_scanf_float+0x84>
 800fe5e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800fe62:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800fe66:	464a      	mov	r2, r9
 800fe68:	4640      	mov	r0, r8
 800fe6a:	4798      	blx	r3
 800fe6c:	6923      	ldr	r3, [r4, #16]
 800fe6e:	3b01      	subs	r3, #1
 800fe70:	6123      	str	r3, [r4, #16]
 800fe72:	e7f0      	b.n	800fe56 <_scanf_float+0x2fe>
 800fe74:	46aa      	mov	sl, r5
 800fe76:	46b3      	mov	fp, r6
 800fe78:	e7de      	b.n	800fe38 <_scanf_float+0x2e0>
 800fe7a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800fe7e:	6923      	ldr	r3, [r4, #16]
 800fe80:	2965      	cmp	r1, #101	@ 0x65
 800fe82:	f103 33ff 	add.w	r3, r3, #4294967295
 800fe86:	f106 35ff 	add.w	r5, r6, #4294967295
 800fe8a:	6123      	str	r3, [r4, #16]
 800fe8c:	d00c      	beq.n	800fea8 <_scanf_float+0x350>
 800fe8e:	2945      	cmp	r1, #69	@ 0x45
 800fe90:	d00a      	beq.n	800fea8 <_scanf_float+0x350>
 800fe92:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800fe96:	464a      	mov	r2, r9
 800fe98:	4640      	mov	r0, r8
 800fe9a:	4798      	blx	r3
 800fe9c:	6923      	ldr	r3, [r4, #16]
 800fe9e:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800fea2:	3b01      	subs	r3, #1
 800fea4:	1eb5      	subs	r5, r6, #2
 800fea6:	6123      	str	r3, [r4, #16]
 800fea8:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800feac:	464a      	mov	r2, r9
 800feae:	4640      	mov	r0, r8
 800feb0:	4798      	blx	r3
 800feb2:	462e      	mov	r6, r5
 800feb4:	6822      	ldr	r2, [r4, #0]
 800feb6:	f012 0210 	ands.w	r2, r2, #16
 800feba:	d001      	beq.n	800fec0 <_scanf_float+0x368>
 800febc:	2000      	movs	r0, #0
 800febe:	e68e      	b.n	800fbde <_scanf_float+0x86>
 800fec0:	7032      	strb	r2, [r6, #0]
 800fec2:	6823      	ldr	r3, [r4, #0]
 800fec4:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800fec8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800fecc:	d125      	bne.n	800ff1a <_scanf_float+0x3c2>
 800fece:	9b02      	ldr	r3, [sp, #8]
 800fed0:	429f      	cmp	r7, r3
 800fed2:	d00a      	beq.n	800feea <_scanf_float+0x392>
 800fed4:	1bda      	subs	r2, r3, r7
 800fed6:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 800feda:	429e      	cmp	r6, r3
 800fedc:	bf28      	it	cs
 800fede:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 800fee2:	4922      	ldr	r1, [pc, #136]	@ (800ff6c <_scanf_float+0x414>)
 800fee4:	4630      	mov	r0, r6
 800fee6:	f000 fa6d 	bl	80103c4 <siprintf>
 800feea:	9901      	ldr	r1, [sp, #4]
 800feec:	2200      	movs	r2, #0
 800feee:	4640      	mov	r0, r8
 800fef0:	f002 fe1a 	bl	8012b28 <_strtod_r>
 800fef4:	9b03      	ldr	r3, [sp, #12]
 800fef6:	6821      	ldr	r1, [r4, #0]
 800fef8:	681b      	ldr	r3, [r3, #0]
 800fefa:	f011 0f02 	tst.w	r1, #2
 800fefe:	ec57 6b10 	vmov	r6, r7, d0
 800ff02:	f103 0204 	add.w	r2, r3, #4
 800ff06:	d015      	beq.n	800ff34 <_scanf_float+0x3dc>
 800ff08:	9903      	ldr	r1, [sp, #12]
 800ff0a:	600a      	str	r2, [r1, #0]
 800ff0c:	681b      	ldr	r3, [r3, #0]
 800ff0e:	e9c3 6700 	strd	r6, r7, [r3]
 800ff12:	68e3      	ldr	r3, [r4, #12]
 800ff14:	3301      	adds	r3, #1
 800ff16:	60e3      	str	r3, [r4, #12]
 800ff18:	e7d0      	b.n	800febc <_scanf_float+0x364>
 800ff1a:	9b04      	ldr	r3, [sp, #16]
 800ff1c:	2b00      	cmp	r3, #0
 800ff1e:	d0e4      	beq.n	800feea <_scanf_float+0x392>
 800ff20:	9905      	ldr	r1, [sp, #20]
 800ff22:	230a      	movs	r3, #10
 800ff24:	3101      	adds	r1, #1
 800ff26:	4640      	mov	r0, r8
 800ff28:	f002 fe7e 	bl	8012c28 <_strtol_r>
 800ff2c:	9b04      	ldr	r3, [sp, #16]
 800ff2e:	9e05      	ldr	r6, [sp, #20]
 800ff30:	1ac2      	subs	r2, r0, r3
 800ff32:	e7d0      	b.n	800fed6 <_scanf_float+0x37e>
 800ff34:	f011 0f04 	tst.w	r1, #4
 800ff38:	9903      	ldr	r1, [sp, #12]
 800ff3a:	600a      	str	r2, [r1, #0]
 800ff3c:	d1e6      	bne.n	800ff0c <_scanf_float+0x3b4>
 800ff3e:	681d      	ldr	r5, [r3, #0]
 800ff40:	4632      	mov	r2, r6
 800ff42:	463b      	mov	r3, r7
 800ff44:	4630      	mov	r0, r6
 800ff46:	4639      	mov	r1, r7
 800ff48:	f7f0 fe08 	bl	8000b5c <__aeabi_dcmpun>
 800ff4c:	b128      	cbz	r0, 800ff5a <_scanf_float+0x402>
 800ff4e:	4808      	ldr	r0, [pc, #32]	@ (800ff70 <_scanf_float+0x418>)
 800ff50:	f000 fbc0 	bl	80106d4 <nanf>
 800ff54:	ed85 0a00 	vstr	s0, [r5]
 800ff58:	e7db      	b.n	800ff12 <_scanf_float+0x3ba>
 800ff5a:	4630      	mov	r0, r6
 800ff5c:	4639      	mov	r1, r7
 800ff5e:	f7f0 fe5b 	bl	8000c18 <__aeabi_d2f>
 800ff62:	6028      	str	r0, [r5, #0]
 800ff64:	e7d5      	b.n	800ff12 <_scanf_float+0x3ba>
 800ff66:	2700      	movs	r7, #0
 800ff68:	e62e      	b.n	800fbc8 <_scanf_float+0x70>
 800ff6a:	bf00      	nop
 800ff6c:	080158b8 	.word	0x080158b8
 800ff70:	080158f8 	.word	0x080158f8

0800ff74 <__sflush_r>:
 800ff74:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800ff78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ff7c:	0716      	lsls	r6, r2, #28
 800ff7e:	4605      	mov	r5, r0
 800ff80:	460c      	mov	r4, r1
 800ff82:	d454      	bmi.n	801002e <__sflush_r+0xba>
 800ff84:	684b      	ldr	r3, [r1, #4]
 800ff86:	2b00      	cmp	r3, #0
 800ff88:	dc02      	bgt.n	800ff90 <__sflush_r+0x1c>
 800ff8a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800ff8c:	2b00      	cmp	r3, #0
 800ff8e:	dd48      	ble.n	8010022 <__sflush_r+0xae>
 800ff90:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800ff92:	2e00      	cmp	r6, #0
 800ff94:	d045      	beq.n	8010022 <__sflush_r+0xae>
 800ff96:	2300      	movs	r3, #0
 800ff98:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800ff9c:	682f      	ldr	r7, [r5, #0]
 800ff9e:	6a21      	ldr	r1, [r4, #32]
 800ffa0:	602b      	str	r3, [r5, #0]
 800ffa2:	d030      	beq.n	8010006 <__sflush_r+0x92>
 800ffa4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800ffa6:	89a3      	ldrh	r3, [r4, #12]
 800ffa8:	0759      	lsls	r1, r3, #29
 800ffaa:	d505      	bpl.n	800ffb8 <__sflush_r+0x44>
 800ffac:	6863      	ldr	r3, [r4, #4]
 800ffae:	1ad2      	subs	r2, r2, r3
 800ffb0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800ffb2:	b10b      	cbz	r3, 800ffb8 <__sflush_r+0x44>
 800ffb4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800ffb6:	1ad2      	subs	r2, r2, r3
 800ffb8:	2300      	movs	r3, #0
 800ffba:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800ffbc:	6a21      	ldr	r1, [r4, #32]
 800ffbe:	4628      	mov	r0, r5
 800ffc0:	47b0      	blx	r6
 800ffc2:	1c43      	adds	r3, r0, #1
 800ffc4:	89a3      	ldrh	r3, [r4, #12]
 800ffc6:	d106      	bne.n	800ffd6 <__sflush_r+0x62>
 800ffc8:	6829      	ldr	r1, [r5, #0]
 800ffca:	291d      	cmp	r1, #29
 800ffcc:	d82b      	bhi.n	8010026 <__sflush_r+0xb2>
 800ffce:	4a2a      	ldr	r2, [pc, #168]	@ (8010078 <__sflush_r+0x104>)
 800ffd0:	40ca      	lsrs	r2, r1
 800ffd2:	07d6      	lsls	r6, r2, #31
 800ffd4:	d527      	bpl.n	8010026 <__sflush_r+0xb2>
 800ffd6:	2200      	movs	r2, #0
 800ffd8:	6062      	str	r2, [r4, #4]
 800ffda:	04d9      	lsls	r1, r3, #19
 800ffdc:	6922      	ldr	r2, [r4, #16]
 800ffde:	6022      	str	r2, [r4, #0]
 800ffe0:	d504      	bpl.n	800ffec <__sflush_r+0x78>
 800ffe2:	1c42      	adds	r2, r0, #1
 800ffe4:	d101      	bne.n	800ffea <__sflush_r+0x76>
 800ffe6:	682b      	ldr	r3, [r5, #0]
 800ffe8:	b903      	cbnz	r3, 800ffec <__sflush_r+0x78>
 800ffea:	6560      	str	r0, [r4, #84]	@ 0x54
 800ffec:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800ffee:	602f      	str	r7, [r5, #0]
 800fff0:	b1b9      	cbz	r1, 8010022 <__sflush_r+0xae>
 800fff2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800fff6:	4299      	cmp	r1, r3
 800fff8:	d002      	beq.n	8010000 <__sflush_r+0x8c>
 800fffa:	4628      	mov	r0, r5
 800fffc:	f001 f9e8 	bl	80113d0 <_free_r>
 8010000:	2300      	movs	r3, #0
 8010002:	6363      	str	r3, [r4, #52]	@ 0x34
 8010004:	e00d      	b.n	8010022 <__sflush_r+0xae>
 8010006:	2301      	movs	r3, #1
 8010008:	4628      	mov	r0, r5
 801000a:	47b0      	blx	r6
 801000c:	4602      	mov	r2, r0
 801000e:	1c50      	adds	r0, r2, #1
 8010010:	d1c9      	bne.n	800ffa6 <__sflush_r+0x32>
 8010012:	682b      	ldr	r3, [r5, #0]
 8010014:	2b00      	cmp	r3, #0
 8010016:	d0c6      	beq.n	800ffa6 <__sflush_r+0x32>
 8010018:	2b1d      	cmp	r3, #29
 801001a:	d001      	beq.n	8010020 <__sflush_r+0xac>
 801001c:	2b16      	cmp	r3, #22
 801001e:	d11e      	bne.n	801005e <__sflush_r+0xea>
 8010020:	602f      	str	r7, [r5, #0]
 8010022:	2000      	movs	r0, #0
 8010024:	e022      	b.n	801006c <__sflush_r+0xf8>
 8010026:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801002a:	b21b      	sxth	r3, r3
 801002c:	e01b      	b.n	8010066 <__sflush_r+0xf2>
 801002e:	690f      	ldr	r7, [r1, #16]
 8010030:	2f00      	cmp	r7, #0
 8010032:	d0f6      	beq.n	8010022 <__sflush_r+0xae>
 8010034:	0793      	lsls	r3, r2, #30
 8010036:	680e      	ldr	r6, [r1, #0]
 8010038:	bf08      	it	eq
 801003a:	694b      	ldreq	r3, [r1, #20]
 801003c:	600f      	str	r7, [r1, #0]
 801003e:	bf18      	it	ne
 8010040:	2300      	movne	r3, #0
 8010042:	eba6 0807 	sub.w	r8, r6, r7
 8010046:	608b      	str	r3, [r1, #8]
 8010048:	f1b8 0f00 	cmp.w	r8, #0
 801004c:	dde9      	ble.n	8010022 <__sflush_r+0xae>
 801004e:	6a21      	ldr	r1, [r4, #32]
 8010050:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8010052:	4643      	mov	r3, r8
 8010054:	463a      	mov	r2, r7
 8010056:	4628      	mov	r0, r5
 8010058:	47b0      	blx	r6
 801005a:	2800      	cmp	r0, #0
 801005c:	dc08      	bgt.n	8010070 <__sflush_r+0xfc>
 801005e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010062:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010066:	81a3      	strh	r3, [r4, #12]
 8010068:	f04f 30ff 	mov.w	r0, #4294967295
 801006c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010070:	4407      	add	r7, r0
 8010072:	eba8 0800 	sub.w	r8, r8, r0
 8010076:	e7e7      	b.n	8010048 <__sflush_r+0xd4>
 8010078:	20400001 	.word	0x20400001

0801007c <_fflush_r>:
 801007c:	b538      	push	{r3, r4, r5, lr}
 801007e:	690b      	ldr	r3, [r1, #16]
 8010080:	4605      	mov	r5, r0
 8010082:	460c      	mov	r4, r1
 8010084:	b913      	cbnz	r3, 801008c <_fflush_r+0x10>
 8010086:	2500      	movs	r5, #0
 8010088:	4628      	mov	r0, r5
 801008a:	bd38      	pop	{r3, r4, r5, pc}
 801008c:	b118      	cbz	r0, 8010096 <_fflush_r+0x1a>
 801008e:	6a03      	ldr	r3, [r0, #32]
 8010090:	b90b      	cbnz	r3, 8010096 <_fflush_r+0x1a>
 8010092:	f000 f8bb 	bl	801020c <__sinit>
 8010096:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801009a:	2b00      	cmp	r3, #0
 801009c:	d0f3      	beq.n	8010086 <_fflush_r+0xa>
 801009e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80100a0:	07d0      	lsls	r0, r2, #31
 80100a2:	d404      	bmi.n	80100ae <_fflush_r+0x32>
 80100a4:	0599      	lsls	r1, r3, #22
 80100a6:	d402      	bmi.n	80100ae <_fflush_r+0x32>
 80100a8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80100aa:	f000 fb02 	bl	80106b2 <__retarget_lock_acquire_recursive>
 80100ae:	4628      	mov	r0, r5
 80100b0:	4621      	mov	r1, r4
 80100b2:	f7ff ff5f 	bl	800ff74 <__sflush_r>
 80100b6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80100b8:	07da      	lsls	r2, r3, #31
 80100ba:	4605      	mov	r5, r0
 80100bc:	d4e4      	bmi.n	8010088 <_fflush_r+0xc>
 80100be:	89a3      	ldrh	r3, [r4, #12]
 80100c0:	059b      	lsls	r3, r3, #22
 80100c2:	d4e1      	bmi.n	8010088 <_fflush_r+0xc>
 80100c4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80100c6:	f000 faf5 	bl	80106b4 <__retarget_lock_release_recursive>
 80100ca:	e7dd      	b.n	8010088 <_fflush_r+0xc>

080100cc <fflush>:
 80100cc:	4601      	mov	r1, r0
 80100ce:	b920      	cbnz	r0, 80100da <fflush+0xe>
 80100d0:	4a04      	ldr	r2, [pc, #16]	@ (80100e4 <fflush+0x18>)
 80100d2:	4905      	ldr	r1, [pc, #20]	@ (80100e8 <fflush+0x1c>)
 80100d4:	4805      	ldr	r0, [pc, #20]	@ (80100ec <fflush+0x20>)
 80100d6:	f000 b8b1 	b.w	801023c <_fwalk_sglue>
 80100da:	4b05      	ldr	r3, [pc, #20]	@ (80100f0 <fflush+0x24>)
 80100dc:	6818      	ldr	r0, [r3, #0]
 80100de:	f7ff bfcd 	b.w	801007c <_fflush_r>
 80100e2:	bf00      	nop
 80100e4:	2000d134 	.word	0x2000d134
 80100e8:	0801007d 	.word	0x0801007d
 80100ec:	2000d144 	.word	0x2000d144
 80100f0:	2000d140 	.word	0x2000d140

080100f4 <std>:
 80100f4:	2300      	movs	r3, #0
 80100f6:	b510      	push	{r4, lr}
 80100f8:	4604      	mov	r4, r0
 80100fa:	e9c0 3300 	strd	r3, r3, [r0]
 80100fe:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8010102:	6083      	str	r3, [r0, #8]
 8010104:	8181      	strh	r1, [r0, #12]
 8010106:	6643      	str	r3, [r0, #100]	@ 0x64
 8010108:	81c2      	strh	r2, [r0, #14]
 801010a:	6183      	str	r3, [r0, #24]
 801010c:	4619      	mov	r1, r3
 801010e:	2208      	movs	r2, #8
 8010110:	305c      	adds	r0, #92	@ 0x5c
 8010112:	f000 fa51 	bl	80105b8 <memset>
 8010116:	4b0d      	ldr	r3, [pc, #52]	@ (801014c <std+0x58>)
 8010118:	6263      	str	r3, [r4, #36]	@ 0x24
 801011a:	4b0d      	ldr	r3, [pc, #52]	@ (8010150 <std+0x5c>)
 801011c:	62a3      	str	r3, [r4, #40]	@ 0x28
 801011e:	4b0d      	ldr	r3, [pc, #52]	@ (8010154 <std+0x60>)
 8010120:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8010122:	4b0d      	ldr	r3, [pc, #52]	@ (8010158 <std+0x64>)
 8010124:	6323      	str	r3, [r4, #48]	@ 0x30
 8010126:	4b0d      	ldr	r3, [pc, #52]	@ (801015c <std+0x68>)
 8010128:	6224      	str	r4, [r4, #32]
 801012a:	429c      	cmp	r4, r3
 801012c:	d006      	beq.n	801013c <std+0x48>
 801012e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8010132:	4294      	cmp	r4, r2
 8010134:	d002      	beq.n	801013c <std+0x48>
 8010136:	33d0      	adds	r3, #208	@ 0xd0
 8010138:	429c      	cmp	r4, r3
 801013a:	d105      	bne.n	8010148 <std+0x54>
 801013c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8010140:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010144:	f000 bab4 	b.w	80106b0 <__retarget_lock_init_recursive>
 8010148:	bd10      	pop	{r4, pc}
 801014a:	bf00      	nop
 801014c:	08010409 	.word	0x08010409
 8010150:	0801042b 	.word	0x0801042b
 8010154:	08010463 	.word	0x08010463
 8010158:	08010487 	.word	0x08010487
 801015c:	200163e8 	.word	0x200163e8

08010160 <stdio_exit_handler>:
 8010160:	4a02      	ldr	r2, [pc, #8]	@ (801016c <stdio_exit_handler+0xc>)
 8010162:	4903      	ldr	r1, [pc, #12]	@ (8010170 <stdio_exit_handler+0x10>)
 8010164:	4803      	ldr	r0, [pc, #12]	@ (8010174 <stdio_exit_handler+0x14>)
 8010166:	f000 b869 	b.w	801023c <_fwalk_sglue>
 801016a:	bf00      	nop
 801016c:	2000d134 	.word	0x2000d134
 8010170:	0801007d 	.word	0x0801007d
 8010174:	2000d144 	.word	0x2000d144

08010178 <cleanup_stdio>:
 8010178:	6841      	ldr	r1, [r0, #4]
 801017a:	4b0c      	ldr	r3, [pc, #48]	@ (80101ac <cleanup_stdio+0x34>)
 801017c:	4299      	cmp	r1, r3
 801017e:	b510      	push	{r4, lr}
 8010180:	4604      	mov	r4, r0
 8010182:	d001      	beq.n	8010188 <cleanup_stdio+0x10>
 8010184:	f7ff ff7a 	bl	801007c <_fflush_r>
 8010188:	68a1      	ldr	r1, [r4, #8]
 801018a:	4b09      	ldr	r3, [pc, #36]	@ (80101b0 <cleanup_stdio+0x38>)
 801018c:	4299      	cmp	r1, r3
 801018e:	d002      	beq.n	8010196 <cleanup_stdio+0x1e>
 8010190:	4620      	mov	r0, r4
 8010192:	f7ff ff73 	bl	801007c <_fflush_r>
 8010196:	68e1      	ldr	r1, [r4, #12]
 8010198:	4b06      	ldr	r3, [pc, #24]	@ (80101b4 <cleanup_stdio+0x3c>)
 801019a:	4299      	cmp	r1, r3
 801019c:	d004      	beq.n	80101a8 <cleanup_stdio+0x30>
 801019e:	4620      	mov	r0, r4
 80101a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80101a4:	f7ff bf6a 	b.w	801007c <_fflush_r>
 80101a8:	bd10      	pop	{r4, pc}
 80101aa:	bf00      	nop
 80101ac:	200163e8 	.word	0x200163e8
 80101b0:	20016450 	.word	0x20016450
 80101b4:	200164b8 	.word	0x200164b8

080101b8 <global_stdio_init.part.0>:
 80101b8:	b510      	push	{r4, lr}
 80101ba:	4b0b      	ldr	r3, [pc, #44]	@ (80101e8 <global_stdio_init.part.0+0x30>)
 80101bc:	4c0b      	ldr	r4, [pc, #44]	@ (80101ec <global_stdio_init.part.0+0x34>)
 80101be:	4a0c      	ldr	r2, [pc, #48]	@ (80101f0 <global_stdio_init.part.0+0x38>)
 80101c0:	601a      	str	r2, [r3, #0]
 80101c2:	4620      	mov	r0, r4
 80101c4:	2200      	movs	r2, #0
 80101c6:	2104      	movs	r1, #4
 80101c8:	f7ff ff94 	bl	80100f4 <std>
 80101cc:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80101d0:	2201      	movs	r2, #1
 80101d2:	2109      	movs	r1, #9
 80101d4:	f7ff ff8e 	bl	80100f4 <std>
 80101d8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80101dc:	2202      	movs	r2, #2
 80101de:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80101e2:	2112      	movs	r1, #18
 80101e4:	f7ff bf86 	b.w	80100f4 <std>
 80101e8:	20016520 	.word	0x20016520
 80101ec:	200163e8 	.word	0x200163e8
 80101f0:	08010161 	.word	0x08010161

080101f4 <__sfp_lock_acquire>:
 80101f4:	4801      	ldr	r0, [pc, #4]	@ (80101fc <__sfp_lock_acquire+0x8>)
 80101f6:	f000 ba5c 	b.w	80106b2 <__retarget_lock_acquire_recursive>
 80101fa:	bf00      	nop
 80101fc:	20016529 	.word	0x20016529

08010200 <__sfp_lock_release>:
 8010200:	4801      	ldr	r0, [pc, #4]	@ (8010208 <__sfp_lock_release+0x8>)
 8010202:	f000 ba57 	b.w	80106b4 <__retarget_lock_release_recursive>
 8010206:	bf00      	nop
 8010208:	20016529 	.word	0x20016529

0801020c <__sinit>:
 801020c:	b510      	push	{r4, lr}
 801020e:	4604      	mov	r4, r0
 8010210:	f7ff fff0 	bl	80101f4 <__sfp_lock_acquire>
 8010214:	6a23      	ldr	r3, [r4, #32]
 8010216:	b11b      	cbz	r3, 8010220 <__sinit+0x14>
 8010218:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801021c:	f7ff bff0 	b.w	8010200 <__sfp_lock_release>
 8010220:	4b04      	ldr	r3, [pc, #16]	@ (8010234 <__sinit+0x28>)
 8010222:	6223      	str	r3, [r4, #32]
 8010224:	4b04      	ldr	r3, [pc, #16]	@ (8010238 <__sinit+0x2c>)
 8010226:	681b      	ldr	r3, [r3, #0]
 8010228:	2b00      	cmp	r3, #0
 801022a:	d1f5      	bne.n	8010218 <__sinit+0xc>
 801022c:	f7ff ffc4 	bl	80101b8 <global_stdio_init.part.0>
 8010230:	e7f2      	b.n	8010218 <__sinit+0xc>
 8010232:	bf00      	nop
 8010234:	08010179 	.word	0x08010179
 8010238:	20016520 	.word	0x20016520

0801023c <_fwalk_sglue>:
 801023c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010240:	4607      	mov	r7, r0
 8010242:	4688      	mov	r8, r1
 8010244:	4614      	mov	r4, r2
 8010246:	2600      	movs	r6, #0
 8010248:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801024c:	f1b9 0901 	subs.w	r9, r9, #1
 8010250:	d505      	bpl.n	801025e <_fwalk_sglue+0x22>
 8010252:	6824      	ldr	r4, [r4, #0]
 8010254:	2c00      	cmp	r4, #0
 8010256:	d1f7      	bne.n	8010248 <_fwalk_sglue+0xc>
 8010258:	4630      	mov	r0, r6
 801025a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801025e:	89ab      	ldrh	r3, [r5, #12]
 8010260:	2b01      	cmp	r3, #1
 8010262:	d907      	bls.n	8010274 <_fwalk_sglue+0x38>
 8010264:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8010268:	3301      	adds	r3, #1
 801026a:	d003      	beq.n	8010274 <_fwalk_sglue+0x38>
 801026c:	4629      	mov	r1, r5
 801026e:	4638      	mov	r0, r7
 8010270:	47c0      	blx	r8
 8010272:	4306      	orrs	r6, r0
 8010274:	3568      	adds	r5, #104	@ 0x68
 8010276:	e7e9      	b.n	801024c <_fwalk_sglue+0x10>

08010278 <iprintf>:
 8010278:	b40f      	push	{r0, r1, r2, r3}
 801027a:	b507      	push	{r0, r1, r2, lr}
 801027c:	4906      	ldr	r1, [pc, #24]	@ (8010298 <iprintf+0x20>)
 801027e:	ab04      	add	r3, sp, #16
 8010280:	6808      	ldr	r0, [r1, #0]
 8010282:	f853 2b04 	ldr.w	r2, [r3], #4
 8010286:	6881      	ldr	r1, [r0, #8]
 8010288:	9301      	str	r3, [sp, #4]
 801028a:	f002 fe51 	bl	8012f30 <_vfiprintf_r>
 801028e:	b003      	add	sp, #12
 8010290:	f85d eb04 	ldr.w	lr, [sp], #4
 8010294:	b004      	add	sp, #16
 8010296:	4770      	bx	lr
 8010298:	2000d140 	.word	0x2000d140

0801029c <_puts_r>:
 801029c:	6a03      	ldr	r3, [r0, #32]
 801029e:	b570      	push	{r4, r5, r6, lr}
 80102a0:	6884      	ldr	r4, [r0, #8]
 80102a2:	4605      	mov	r5, r0
 80102a4:	460e      	mov	r6, r1
 80102a6:	b90b      	cbnz	r3, 80102ac <_puts_r+0x10>
 80102a8:	f7ff ffb0 	bl	801020c <__sinit>
 80102ac:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80102ae:	07db      	lsls	r3, r3, #31
 80102b0:	d405      	bmi.n	80102be <_puts_r+0x22>
 80102b2:	89a3      	ldrh	r3, [r4, #12]
 80102b4:	0598      	lsls	r0, r3, #22
 80102b6:	d402      	bmi.n	80102be <_puts_r+0x22>
 80102b8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80102ba:	f000 f9fa 	bl	80106b2 <__retarget_lock_acquire_recursive>
 80102be:	89a3      	ldrh	r3, [r4, #12]
 80102c0:	0719      	lsls	r1, r3, #28
 80102c2:	d502      	bpl.n	80102ca <_puts_r+0x2e>
 80102c4:	6923      	ldr	r3, [r4, #16]
 80102c6:	2b00      	cmp	r3, #0
 80102c8:	d135      	bne.n	8010336 <_puts_r+0x9a>
 80102ca:	4621      	mov	r1, r4
 80102cc:	4628      	mov	r0, r5
 80102ce:	f000 f91d 	bl	801050c <__swsetup_r>
 80102d2:	b380      	cbz	r0, 8010336 <_puts_r+0x9a>
 80102d4:	f04f 35ff 	mov.w	r5, #4294967295
 80102d8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80102da:	07da      	lsls	r2, r3, #31
 80102dc:	d405      	bmi.n	80102ea <_puts_r+0x4e>
 80102de:	89a3      	ldrh	r3, [r4, #12]
 80102e0:	059b      	lsls	r3, r3, #22
 80102e2:	d402      	bmi.n	80102ea <_puts_r+0x4e>
 80102e4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80102e6:	f000 f9e5 	bl	80106b4 <__retarget_lock_release_recursive>
 80102ea:	4628      	mov	r0, r5
 80102ec:	bd70      	pop	{r4, r5, r6, pc}
 80102ee:	2b00      	cmp	r3, #0
 80102f0:	da04      	bge.n	80102fc <_puts_r+0x60>
 80102f2:	69a2      	ldr	r2, [r4, #24]
 80102f4:	429a      	cmp	r2, r3
 80102f6:	dc17      	bgt.n	8010328 <_puts_r+0x8c>
 80102f8:	290a      	cmp	r1, #10
 80102fa:	d015      	beq.n	8010328 <_puts_r+0x8c>
 80102fc:	6823      	ldr	r3, [r4, #0]
 80102fe:	1c5a      	adds	r2, r3, #1
 8010300:	6022      	str	r2, [r4, #0]
 8010302:	7019      	strb	r1, [r3, #0]
 8010304:	68a3      	ldr	r3, [r4, #8]
 8010306:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 801030a:	3b01      	subs	r3, #1
 801030c:	60a3      	str	r3, [r4, #8]
 801030e:	2900      	cmp	r1, #0
 8010310:	d1ed      	bne.n	80102ee <_puts_r+0x52>
 8010312:	2b00      	cmp	r3, #0
 8010314:	da11      	bge.n	801033a <_puts_r+0x9e>
 8010316:	4622      	mov	r2, r4
 8010318:	210a      	movs	r1, #10
 801031a:	4628      	mov	r0, r5
 801031c:	f000 f8b7 	bl	801048e <__swbuf_r>
 8010320:	3001      	adds	r0, #1
 8010322:	d0d7      	beq.n	80102d4 <_puts_r+0x38>
 8010324:	250a      	movs	r5, #10
 8010326:	e7d7      	b.n	80102d8 <_puts_r+0x3c>
 8010328:	4622      	mov	r2, r4
 801032a:	4628      	mov	r0, r5
 801032c:	f000 f8af 	bl	801048e <__swbuf_r>
 8010330:	3001      	adds	r0, #1
 8010332:	d1e7      	bne.n	8010304 <_puts_r+0x68>
 8010334:	e7ce      	b.n	80102d4 <_puts_r+0x38>
 8010336:	3e01      	subs	r6, #1
 8010338:	e7e4      	b.n	8010304 <_puts_r+0x68>
 801033a:	6823      	ldr	r3, [r4, #0]
 801033c:	1c5a      	adds	r2, r3, #1
 801033e:	6022      	str	r2, [r4, #0]
 8010340:	220a      	movs	r2, #10
 8010342:	701a      	strb	r2, [r3, #0]
 8010344:	e7ee      	b.n	8010324 <_puts_r+0x88>
	...

08010348 <puts>:
 8010348:	4b02      	ldr	r3, [pc, #8]	@ (8010354 <puts+0xc>)
 801034a:	4601      	mov	r1, r0
 801034c:	6818      	ldr	r0, [r3, #0]
 801034e:	f7ff bfa5 	b.w	801029c <_puts_r>
 8010352:	bf00      	nop
 8010354:	2000d140 	.word	0x2000d140

08010358 <sniprintf>:
 8010358:	b40c      	push	{r2, r3}
 801035a:	b530      	push	{r4, r5, lr}
 801035c:	4b18      	ldr	r3, [pc, #96]	@ (80103c0 <sniprintf+0x68>)
 801035e:	1e0c      	subs	r4, r1, #0
 8010360:	681d      	ldr	r5, [r3, #0]
 8010362:	b09d      	sub	sp, #116	@ 0x74
 8010364:	da08      	bge.n	8010378 <sniprintf+0x20>
 8010366:	238b      	movs	r3, #139	@ 0x8b
 8010368:	602b      	str	r3, [r5, #0]
 801036a:	f04f 30ff 	mov.w	r0, #4294967295
 801036e:	b01d      	add	sp, #116	@ 0x74
 8010370:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8010374:	b002      	add	sp, #8
 8010376:	4770      	bx	lr
 8010378:	f44f 7302 	mov.w	r3, #520	@ 0x208
 801037c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8010380:	f04f 0300 	mov.w	r3, #0
 8010384:	931b      	str	r3, [sp, #108]	@ 0x6c
 8010386:	bf14      	ite	ne
 8010388:	f104 33ff 	addne.w	r3, r4, #4294967295
 801038c:	4623      	moveq	r3, r4
 801038e:	9304      	str	r3, [sp, #16]
 8010390:	9307      	str	r3, [sp, #28]
 8010392:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8010396:	9002      	str	r0, [sp, #8]
 8010398:	9006      	str	r0, [sp, #24]
 801039a:	f8ad 3016 	strh.w	r3, [sp, #22]
 801039e:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80103a0:	ab21      	add	r3, sp, #132	@ 0x84
 80103a2:	a902      	add	r1, sp, #8
 80103a4:	4628      	mov	r0, r5
 80103a6:	9301      	str	r3, [sp, #4]
 80103a8:	f002 fc9c 	bl	8012ce4 <_svfiprintf_r>
 80103ac:	1c43      	adds	r3, r0, #1
 80103ae:	bfbc      	itt	lt
 80103b0:	238b      	movlt	r3, #139	@ 0x8b
 80103b2:	602b      	strlt	r3, [r5, #0]
 80103b4:	2c00      	cmp	r4, #0
 80103b6:	d0da      	beq.n	801036e <sniprintf+0x16>
 80103b8:	9b02      	ldr	r3, [sp, #8]
 80103ba:	2200      	movs	r2, #0
 80103bc:	701a      	strb	r2, [r3, #0]
 80103be:	e7d6      	b.n	801036e <sniprintf+0x16>
 80103c0:	2000d140 	.word	0x2000d140

080103c4 <siprintf>:
 80103c4:	b40e      	push	{r1, r2, r3}
 80103c6:	b510      	push	{r4, lr}
 80103c8:	b09d      	sub	sp, #116	@ 0x74
 80103ca:	ab1f      	add	r3, sp, #124	@ 0x7c
 80103cc:	9002      	str	r0, [sp, #8]
 80103ce:	9006      	str	r0, [sp, #24]
 80103d0:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80103d4:	480a      	ldr	r0, [pc, #40]	@ (8010400 <siprintf+0x3c>)
 80103d6:	9107      	str	r1, [sp, #28]
 80103d8:	9104      	str	r1, [sp, #16]
 80103da:	490a      	ldr	r1, [pc, #40]	@ (8010404 <siprintf+0x40>)
 80103dc:	f853 2b04 	ldr.w	r2, [r3], #4
 80103e0:	9105      	str	r1, [sp, #20]
 80103e2:	2400      	movs	r4, #0
 80103e4:	a902      	add	r1, sp, #8
 80103e6:	6800      	ldr	r0, [r0, #0]
 80103e8:	9301      	str	r3, [sp, #4]
 80103ea:	941b      	str	r4, [sp, #108]	@ 0x6c
 80103ec:	f002 fc7a 	bl	8012ce4 <_svfiprintf_r>
 80103f0:	9b02      	ldr	r3, [sp, #8]
 80103f2:	701c      	strb	r4, [r3, #0]
 80103f4:	b01d      	add	sp, #116	@ 0x74
 80103f6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80103fa:	b003      	add	sp, #12
 80103fc:	4770      	bx	lr
 80103fe:	bf00      	nop
 8010400:	2000d140 	.word	0x2000d140
 8010404:	ffff0208 	.word	0xffff0208

08010408 <__sread>:
 8010408:	b510      	push	{r4, lr}
 801040a:	460c      	mov	r4, r1
 801040c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010410:	f000 f900 	bl	8010614 <_read_r>
 8010414:	2800      	cmp	r0, #0
 8010416:	bfab      	itete	ge
 8010418:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 801041a:	89a3      	ldrhlt	r3, [r4, #12]
 801041c:	181b      	addge	r3, r3, r0
 801041e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8010422:	bfac      	ite	ge
 8010424:	6563      	strge	r3, [r4, #84]	@ 0x54
 8010426:	81a3      	strhlt	r3, [r4, #12]
 8010428:	bd10      	pop	{r4, pc}

0801042a <__swrite>:
 801042a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801042e:	461f      	mov	r7, r3
 8010430:	898b      	ldrh	r3, [r1, #12]
 8010432:	05db      	lsls	r3, r3, #23
 8010434:	4605      	mov	r5, r0
 8010436:	460c      	mov	r4, r1
 8010438:	4616      	mov	r6, r2
 801043a:	d505      	bpl.n	8010448 <__swrite+0x1e>
 801043c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010440:	2302      	movs	r3, #2
 8010442:	2200      	movs	r2, #0
 8010444:	f000 f8d4 	bl	80105f0 <_lseek_r>
 8010448:	89a3      	ldrh	r3, [r4, #12]
 801044a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801044e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8010452:	81a3      	strh	r3, [r4, #12]
 8010454:	4632      	mov	r2, r6
 8010456:	463b      	mov	r3, r7
 8010458:	4628      	mov	r0, r5
 801045a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801045e:	f000 b8eb 	b.w	8010638 <_write_r>

08010462 <__sseek>:
 8010462:	b510      	push	{r4, lr}
 8010464:	460c      	mov	r4, r1
 8010466:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801046a:	f000 f8c1 	bl	80105f0 <_lseek_r>
 801046e:	1c43      	adds	r3, r0, #1
 8010470:	89a3      	ldrh	r3, [r4, #12]
 8010472:	bf15      	itete	ne
 8010474:	6560      	strne	r0, [r4, #84]	@ 0x54
 8010476:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 801047a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 801047e:	81a3      	strheq	r3, [r4, #12]
 8010480:	bf18      	it	ne
 8010482:	81a3      	strhne	r3, [r4, #12]
 8010484:	bd10      	pop	{r4, pc}

08010486 <__sclose>:
 8010486:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801048a:	f000 b8a1 	b.w	80105d0 <_close_r>

0801048e <__swbuf_r>:
 801048e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010490:	460e      	mov	r6, r1
 8010492:	4614      	mov	r4, r2
 8010494:	4605      	mov	r5, r0
 8010496:	b118      	cbz	r0, 80104a0 <__swbuf_r+0x12>
 8010498:	6a03      	ldr	r3, [r0, #32]
 801049a:	b90b      	cbnz	r3, 80104a0 <__swbuf_r+0x12>
 801049c:	f7ff feb6 	bl	801020c <__sinit>
 80104a0:	69a3      	ldr	r3, [r4, #24]
 80104a2:	60a3      	str	r3, [r4, #8]
 80104a4:	89a3      	ldrh	r3, [r4, #12]
 80104a6:	071a      	lsls	r2, r3, #28
 80104a8:	d501      	bpl.n	80104ae <__swbuf_r+0x20>
 80104aa:	6923      	ldr	r3, [r4, #16]
 80104ac:	b943      	cbnz	r3, 80104c0 <__swbuf_r+0x32>
 80104ae:	4621      	mov	r1, r4
 80104b0:	4628      	mov	r0, r5
 80104b2:	f000 f82b 	bl	801050c <__swsetup_r>
 80104b6:	b118      	cbz	r0, 80104c0 <__swbuf_r+0x32>
 80104b8:	f04f 37ff 	mov.w	r7, #4294967295
 80104bc:	4638      	mov	r0, r7
 80104be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80104c0:	6823      	ldr	r3, [r4, #0]
 80104c2:	6922      	ldr	r2, [r4, #16]
 80104c4:	1a98      	subs	r0, r3, r2
 80104c6:	6963      	ldr	r3, [r4, #20]
 80104c8:	b2f6      	uxtb	r6, r6
 80104ca:	4283      	cmp	r3, r0
 80104cc:	4637      	mov	r7, r6
 80104ce:	dc05      	bgt.n	80104dc <__swbuf_r+0x4e>
 80104d0:	4621      	mov	r1, r4
 80104d2:	4628      	mov	r0, r5
 80104d4:	f7ff fdd2 	bl	801007c <_fflush_r>
 80104d8:	2800      	cmp	r0, #0
 80104da:	d1ed      	bne.n	80104b8 <__swbuf_r+0x2a>
 80104dc:	68a3      	ldr	r3, [r4, #8]
 80104de:	3b01      	subs	r3, #1
 80104e0:	60a3      	str	r3, [r4, #8]
 80104e2:	6823      	ldr	r3, [r4, #0]
 80104e4:	1c5a      	adds	r2, r3, #1
 80104e6:	6022      	str	r2, [r4, #0]
 80104e8:	701e      	strb	r6, [r3, #0]
 80104ea:	6962      	ldr	r2, [r4, #20]
 80104ec:	1c43      	adds	r3, r0, #1
 80104ee:	429a      	cmp	r2, r3
 80104f0:	d004      	beq.n	80104fc <__swbuf_r+0x6e>
 80104f2:	89a3      	ldrh	r3, [r4, #12]
 80104f4:	07db      	lsls	r3, r3, #31
 80104f6:	d5e1      	bpl.n	80104bc <__swbuf_r+0x2e>
 80104f8:	2e0a      	cmp	r6, #10
 80104fa:	d1df      	bne.n	80104bc <__swbuf_r+0x2e>
 80104fc:	4621      	mov	r1, r4
 80104fe:	4628      	mov	r0, r5
 8010500:	f7ff fdbc 	bl	801007c <_fflush_r>
 8010504:	2800      	cmp	r0, #0
 8010506:	d0d9      	beq.n	80104bc <__swbuf_r+0x2e>
 8010508:	e7d6      	b.n	80104b8 <__swbuf_r+0x2a>
	...

0801050c <__swsetup_r>:
 801050c:	b538      	push	{r3, r4, r5, lr}
 801050e:	4b29      	ldr	r3, [pc, #164]	@ (80105b4 <__swsetup_r+0xa8>)
 8010510:	4605      	mov	r5, r0
 8010512:	6818      	ldr	r0, [r3, #0]
 8010514:	460c      	mov	r4, r1
 8010516:	b118      	cbz	r0, 8010520 <__swsetup_r+0x14>
 8010518:	6a03      	ldr	r3, [r0, #32]
 801051a:	b90b      	cbnz	r3, 8010520 <__swsetup_r+0x14>
 801051c:	f7ff fe76 	bl	801020c <__sinit>
 8010520:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010524:	0719      	lsls	r1, r3, #28
 8010526:	d422      	bmi.n	801056e <__swsetup_r+0x62>
 8010528:	06da      	lsls	r2, r3, #27
 801052a:	d407      	bmi.n	801053c <__swsetup_r+0x30>
 801052c:	2209      	movs	r2, #9
 801052e:	602a      	str	r2, [r5, #0]
 8010530:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010534:	81a3      	strh	r3, [r4, #12]
 8010536:	f04f 30ff 	mov.w	r0, #4294967295
 801053a:	e033      	b.n	80105a4 <__swsetup_r+0x98>
 801053c:	0758      	lsls	r0, r3, #29
 801053e:	d512      	bpl.n	8010566 <__swsetup_r+0x5a>
 8010540:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8010542:	b141      	cbz	r1, 8010556 <__swsetup_r+0x4a>
 8010544:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8010548:	4299      	cmp	r1, r3
 801054a:	d002      	beq.n	8010552 <__swsetup_r+0x46>
 801054c:	4628      	mov	r0, r5
 801054e:	f000 ff3f 	bl	80113d0 <_free_r>
 8010552:	2300      	movs	r3, #0
 8010554:	6363      	str	r3, [r4, #52]	@ 0x34
 8010556:	89a3      	ldrh	r3, [r4, #12]
 8010558:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 801055c:	81a3      	strh	r3, [r4, #12]
 801055e:	2300      	movs	r3, #0
 8010560:	6063      	str	r3, [r4, #4]
 8010562:	6923      	ldr	r3, [r4, #16]
 8010564:	6023      	str	r3, [r4, #0]
 8010566:	89a3      	ldrh	r3, [r4, #12]
 8010568:	f043 0308 	orr.w	r3, r3, #8
 801056c:	81a3      	strh	r3, [r4, #12]
 801056e:	6923      	ldr	r3, [r4, #16]
 8010570:	b94b      	cbnz	r3, 8010586 <__swsetup_r+0x7a>
 8010572:	89a3      	ldrh	r3, [r4, #12]
 8010574:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8010578:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801057c:	d003      	beq.n	8010586 <__swsetup_r+0x7a>
 801057e:	4621      	mov	r1, r4
 8010580:	4628      	mov	r0, r5
 8010582:	f002 fe25 	bl	80131d0 <__smakebuf_r>
 8010586:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801058a:	f013 0201 	ands.w	r2, r3, #1
 801058e:	d00a      	beq.n	80105a6 <__swsetup_r+0x9a>
 8010590:	2200      	movs	r2, #0
 8010592:	60a2      	str	r2, [r4, #8]
 8010594:	6962      	ldr	r2, [r4, #20]
 8010596:	4252      	negs	r2, r2
 8010598:	61a2      	str	r2, [r4, #24]
 801059a:	6922      	ldr	r2, [r4, #16]
 801059c:	b942      	cbnz	r2, 80105b0 <__swsetup_r+0xa4>
 801059e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80105a2:	d1c5      	bne.n	8010530 <__swsetup_r+0x24>
 80105a4:	bd38      	pop	{r3, r4, r5, pc}
 80105a6:	0799      	lsls	r1, r3, #30
 80105a8:	bf58      	it	pl
 80105aa:	6962      	ldrpl	r2, [r4, #20]
 80105ac:	60a2      	str	r2, [r4, #8]
 80105ae:	e7f4      	b.n	801059a <__swsetup_r+0x8e>
 80105b0:	2000      	movs	r0, #0
 80105b2:	e7f7      	b.n	80105a4 <__swsetup_r+0x98>
 80105b4:	2000d140 	.word	0x2000d140

080105b8 <memset>:
 80105b8:	4402      	add	r2, r0
 80105ba:	4603      	mov	r3, r0
 80105bc:	4293      	cmp	r3, r2
 80105be:	d100      	bne.n	80105c2 <memset+0xa>
 80105c0:	4770      	bx	lr
 80105c2:	f803 1b01 	strb.w	r1, [r3], #1
 80105c6:	e7f9      	b.n	80105bc <memset+0x4>

080105c8 <_localeconv_r>:
 80105c8:	4800      	ldr	r0, [pc, #0]	@ (80105cc <_localeconv_r+0x4>)
 80105ca:	4770      	bx	lr
 80105cc:	2000d280 	.word	0x2000d280

080105d0 <_close_r>:
 80105d0:	b538      	push	{r3, r4, r5, lr}
 80105d2:	4d06      	ldr	r5, [pc, #24]	@ (80105ec <_close_r+0x1c>)
 80105d4:	2300      	movs	r3, #0
 80105d6:	4604      	mov	r4, r0
 80105d8:	4608      	mov	r0, r1
 80105da:	602b      	str	r3, [r5, #0]
 80105dc:	f7f0 fd72 	bl	80010c4 <_close>
 80105e0:	1c43      	adds	r3, r0, #1
 80105e2:	d102      	bne.n	80105ea <_close_r+0x1a>
 80105e4:	682b      	ldr	r3, [r5, #0]
 80105e6:	b103      	cbz	r3, 80105ea <_close_r+0x1a>
 80105e8:	6023      	str	r3, [r4, #0]
 80105ea:	bd38      	pop	{r3, r4, r5, pc}
 80105ec:	20016524 	.word	0x20016524

080105f0 <_lseek_r>:
 80105f0:	b538      	push	{r3, r4, r5, lr}
 80105f2:	4d07      	ldr	r5, [pc, #28]	@ (8010610 <_lseek_r+0x20>)
 80105f4:	4604      	mov	r4, r0
 80105f6:	4608      	mov	r0, r1
 80105f8:	4611      	mov	r1, r2
 80105fa:	2200      	movs	r2, #0
 80105fc:	602a      	str	r2, [r5, #0]
 80105fe:	461a      	mov	r2, r3
 8010600:	f7f0 fd94 	bl	800112c <_lseek>
 8010604:	1c43      	adds	r3, r0, #1
 8010606:	d102      	bne.n	801060e <_lseek_r+0x1e>
 8010608:	682b      	ldr	r3, [r5, #0]
 801060a:	b103      	cbz	r3, 801060e <_lseek_r+0x1e>
 801060c:	6023      	str	r3, [r4, #0]
 801060e:	bd38      	pop	{r3, r4, r5, pc}
 8010610:	20016524 	.word	0x20016524

08010614 <_read_r>:
 8010614:	b538      	push	{r3, r4, r5, lr}
 8010616:	4d07      	ldr	r5, [pc, #28]	@ (8010634 <_read_r+0x20>)
 8010618:	4604      	mov	r4, r0
 801061a:	4608      	mov	r0, r1
 801061c:	4611      	mov	r1, r2
 801061e:	2200      	movs	r2, #0
 8010620:	602a      	str	r2, [r5, #0]
 8010622:	461a      	mov	r2, r3
 8010624:	f7f0 fd96 	bl	8001154 <_read>
 8010628:	1c43      	adds	r3, r0, #1
 801062a:	d102      	bne.n	8010632 <_read_r+0x1e>
 801062c:	682b      	ldr	r3, [r5, #0]
 801062e:	b103      	cbz	r3, 8010632 <_read_r+0x1e>
 8010630:	6023      	str	r3, [r4, #0]
 8010632:	bd38      	pop	{r3, r4, r5, pc}
 8010634:	20016524 	.word	0x20016524

08010638 <_write_r>:
 8010638:	b538      	push	{r3, r4, r5, lr}
 801063a:	4d07      	ldr	r5, [pc, #28]	@ (8010658 <_write_r+0x20>)
 801063c:	4604      	mov	r4, r0
 801063e:	4608      	mov	r0, r1
 8010640:	4611      	mov	r1, r2
 8010642:	2200      	movs	r2, #0
 8010644:	602a      	str	r2, [r5, #0]
 8010646:	461a      	mov	r2, r3
 8010648:	f7f0 fd28 	bl	800109c <_write>
 801064c:	1c43      	adds	r3, r0, #1
 801064e:	d102      	bne.n	8010656 <_write_r+0x1e>
 8010650:	682b      	ldr	r3, [r5, #0]
 8010652:	b103      	cbz	r3, 8010656 <_write_r+0x1e>
 8010654:	6023      	str	r3, [r4, #0]
 8010656:	bd38      	pop	{r3, r4, r5, pc}
 8010658:	20016524 	.word	0x20016524

0801065c <__errno>:
 801065c:	4b01      	ldr	r3, [pc, #4]	@ (8010664 <__errno+0x8>)
 801065e:	6818      	ldr	r0, [r3, #0]
 8010660:	4770      	bx	lr
 8010662:	bf00      	nop
 8010664:	2000d140 	.word	0x2000d140

08010668 <__libc_init_array>:
 8010668:	b570      	push	{r4, r5, r6, lr}
 801066a:	4d0d      	ldr	r5, [pc, #52]	@ (80106a0 <__libc_init_array+0x38>)
 801066c:	4c0d      	ldr	r4, [pc, #52]	@ (80106a4 <__libc_init_array+0x3c>)
 801066e:	1b64      	subs	r4, r4, r5
 8010670:	10a4      	asrs	r4, r4, #2
 8010672:	2600      	movs	r6, #0
 8010674:	42a6      	cmp	r6, r4
 8010676:	d109      	bne.n	801068c <__libc_init_array+0x24>
 8010678:	4d0b      	ldr	r5, [pc, #44]	@ (80106a8 <__libc_init_array+0x40>)
 801067a:	4c0c      	ldr	r4, [pc, #48]	@ (80106ac <__libc_init_array+0x44>)
 801067c:	f003 fa38 	bl	8013af0 <_init>
 8010680:	1b64      	subs	r4, r4, r5
 8010682:	10a4      	asrs	r4, r4, #2
 8010684:	2600      	movs	r6, #0
 8010686:	42a6      	cmp	r6, r4
 8010688:	d105      	bne.n	8010696 <__libc_init_array+0x2e>
 801068a:	bd70      	pop	{r4, r5, r6, pc}
 801068c:	f855 3b04 	ldr.w	r3, [r5], #4
 8010690:	4798      	blx	r3
 8010692:	3601      	adds	r6, #1
 8010694:	e7ee      	b.n	8010674 <__libc_init_array+0xc>
 8010696:	f855 3b04 	ldr.w	r3, [r5], #4
 801069a:	4798      	blx	r3
 801069c:	3601      	adds	r6, #1
 801069e:	e7f2      	b.n	8010686 <__libc_init_array+0x1e>
 80106a0:	08015cb4 	.word	0x08015cb4
 80106a4:	08015cb4 	.word	0x08015cb4
 80106a8:	08015cb4 	.word	0x08015cb4
 80106ac:	08015cb8 	.word	0x08015cb8

080106b0 <__retarget_lock_init_recursive>:
 80106b0:	4770      	bx	lr

080106b2 <__retarget_lock_acquire_recursive>:
 80106b2:	4770      	bx	lr

080106b4 <__retarget_lock_release_recursive>:
 80106b4:	4770      	bx	lr

080106b6 <memcpy>:
 80106b6:	440a      	add	r2, r1
 80106b8:	4291      	cmp	r1, r2
 80106ba:	f100 33ff 	add.w	r3, r0, #4294967295
 80106be:	d100      	bne.n	80106c2 <memcpy+0xc>
 80106c0:	4770      	bx	lr
 80106c2:	b510      	push	{r4, lr}
 80106c4:	f811 4b01 	ldrb.w	r4, [r1], #1
 80106c8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80106cc:	4291      	cmp	r1, r2
 80106ce:	d1f9      	bne.n	80106c4 <memcpy+0xe>
 80106d0:	bd10      	pop	{r4, pc}
	...

080106d4 <nanf>:
 80106d4:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 80106dc <nanf+0x8>
 80106d8:	4770      	bx	lr
 80106da:	bf00      	nop
 80106dc:	7fc00000 	.word	0x7fc00000

080106e0 <__assert_func>:
 80106e0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80106e2:	4614      	mov	r4, r2
 80106e4:	461a      	mov	r2, r3
 80106e6:	4b09      	ldr	r3, [pc, #36]	@ (801070c <__assert_func+0x2c>)
 80106e8:	681b      	ldr	r3, [r3, #0]
 80106ea:	4605      	mov	r5, r0
 80106ec:	68d8      	ldr	r0, [r3, #12]
 80106ee:	b14c      	cbz	r4, 8010704 <__assert_func+0x24>
 80106f0:	4b07      	ldr	r3, [pc, #28]	@ (8010710 <__assert_func+0x30>)
 80106f2:	9100      	str	r1, [sp, #0]
 80106f4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80106f8:	4906      	ldr	r1, [pc, #24]	@ (8010714 <__assert_func+0x34>)
 80106fa:	462b      	mov	r3, r5
 80106fc:	f002 fd30 	bl	8013160 <fiprintf>
 8010700:	f002 fe0a 	bl	8013318 <abort>
 8010704:	4b04      	ldr	r3, [pc, #16]	@ (8010718 <__assert_func+0x38>)
 8010706:	461c      	mov	r4, r3
 8010708:	e7f3      	b.n	80106f2 <__assert_func+0x12>
 801070a:	bf00      	nop
 801070c:	2000d140 	.word	0x2000d140
 8010710:	080158bd 	.word	0x080158bd
 8010714:	080158ca 	.word	0x080158ca
 8010718:	080158f8 	.word	0x080158f8

0801071c <quorem>:
 801071c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010720:	6903      	ldr	r3, [r0, #16]
 8010722:	690c      	ldr	r4, [r1, #16]
 8010724:	42a3      	cmp	r3, r4
 8010726:	4607      	mov	r7, r0
 8010728:	db7e      	blt.n	8010828 <quorem+0x10c>
 801072a:	3c01      	subs	r4, #1
 801072c:	f101 0814 	add.w	r8, r1, #20
 8010730:	00a3      	lsls	r3, r4, #2
 8010732:	f100 0514 	add.w	r5, r0, #20
 8010736:	9300      	str	r3, [sp, #0]
 8010738:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801073c:	9301      	str	r3, [sp, #4]
 801073e:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8010742:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8010746:	3301      	adds	r3, #1
 8010748:	429a      	cmp	r2, r3
 801074a:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 801074e:	fbb2 f6f3 	udiv	r6, r2, r3
 8010752:	d32e      	bcc.n	80107b2 <quorem+0x96>
 8010754:	f04f 0a00 	mov.w	sl, #0
 8010758:	46c4      	mov	ip, r8
 801075a:	46ae      	mov	lr, r5
 801075c:	46d3      	mov	fp, sl
 801075e:	f85c 3b04 	ldr.w	r3, [ip], #4
 8010762:	b298      	uxth	r0, r3
 8010764:	fb06 a000 	mla	r0, r6, r0, sl
 8010768:	0c02      	lsrs	r2, r0, #16
 801076a:	0c1b      	lsrs	r3, r3, #16
 801076c:	fb06 2303 	mla	r3, r6, r3, r2
 8010770:	f8de 2000 	ldr.w	r2, [lr]
 8010774:	b280      	uxth	r0, r0
 8010776:	b292      	uxth	r2, r2
 8010778:	1a12      	subs	r2, r2, r0
 801077a:	445a      	add	r2, fp
 801077c:	f8de 0000 	ldr.w	r0, [lr]
 8010780:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8010784:	b29b      	uxth	r3, r3
 8010786:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 801078a:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 801078e:	b292      	uxth	r2, r2
 8010790:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8010794:	45e1      	cmp	r9, ip
 8010796:	f84e 2b04 	str.w	r2, [lr], #4
 801079a:	ea4f 4b23 	mov.w	fp, r3, asr #16
 801079e:	d2de      	bcs.n	801075e <quorem+0x42>
 80107a0:	9b00      	ldr	r3, [sp, #0]
 80107a2:	58eb      	ldr	r3, [r5, r3]
 80107a4:	b92b      	cbnz	r3, 80107b2 <quorem+0x96>
 80107a6:	9b01      	ldr	r3, [sp, #4]
 80107a8:	3b04      	subs	r3, #4
 80107aa:	429d      	cmp	r5, r3
 80107ac:	461a      	mov	r2, r3
 80107ae:	d32f      	bcc.n	8010810 <quorem+0xf4>
 80107b0:	613c      	str	r4, [r7, #16]
 80107b2:	4638      	mov	r0, r7
 80107b4:	f001 f9c8 	bl	8011b48 <__mcmp>
 80107b8:	2800      	cmp	r0, #0
 80107ba:	db25      	blt.n	8010808 <quorem+0xec>
 80107bc:	4629      	mov	r1, r5
 80107be:	2000      	movs	r0, #0
 80107c0:	f858 2b04 	ldr.w	r2, [r8], #4
 80107c4:	f8d1 c000 	ldr.w	ip, [r1]
 80107c8:	fa1f fe82 	uxth.w	lr, r2
 80107cc:	fa1f f38c 	uxth.w	r3, ip
 80107d0:	eba3 030e 	sub.w	r3, r3, lr
 80107d4:	4403      	add	r3, r0
 80107d6:	0c12      	lsrs	r2, r2, #16
 80107d8:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80107dc:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80107e0:	b29b      	uxth	r3, r3
 80107e2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80107e6:	45c1      	cmp	r9, r8
 80107e8:	f841 3b04 	str.w	r3, [r1], #4
 80107ec:	ea4f 4022 	mov.w	r0, r2, asr #16
 80107f0:	d2e6      	bcs.n	80107c0 <quorem+0xa4>
 80107f2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80107f6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80107fa:	b922      	cbnz	r2, 8010806 <quorem+0xea>
 80107fc:	3b04      	subs	r3, #4
 80107fe:	429d      	cmp	r5, r3
 8010800:	461a      	mov	r2, r3
 8010802:	d30b      	bcc.n	801081c <quorem+0x100>
 8010804:	613c      	str	r4, [r7, #16]
 8010806:	3601      	adds	r6, #1
 8010808:	4630      	mov	r0, r6
 801080a:	b003      	add	sp, #12
 801080c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010810:	6812      	ldr	r2, [r2, #0]
 8010812:	3b04      	subs	r3, #4
 8010814:	2a00      	cmp	r2, #0
 8010816:	d1cb      	bne.n	80107b0 <quorem+0x94>
 8010818:	3c01      	subs	r4, #1
 801081a:	e7c6      	b.n	80107aa <quorem+0x8e>
 801081c:	6812      	ldr	r2, [r2, #0]
 801081e:	3b04      	subs	r3, #4
 8010820:	2a00      	cmp	r2, #0
 8010822:	d1ef      	bne.n	8010804 <quorem+0xe8>
 8010824:	3c01      	subs	r4, #1
 8010826:	e7ea      	b.n	80107fe <quorem+0xe2>
 8010828:	2000      	movs	r0, #0
 801082a:	e7ee      	b.n	801080a <quorem+0xee>
 801082c:	0000      	movs	r0, r0
	...

08010830 <_dtoa_r>:
 8010830:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010834:	69c7      	ldr	r7, [r0, #28]
 8010836:	b097      	sub	sp, #92	@ 0x5c
 8010838:	ed8d 0b04 	vstr	d0, [sp, #16]
 801083c:	ec55 4b10 	vmov	r4, r5, d0
 8010840:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 8010842:	9107      	str	r1, [sp, #28]
 8010844:	4681      	mov	r9, r0
 8010846:	920c      	str	r2, [sp, #48]	@ 0x30
 8010848:	9311      	str	r3, [sp, #68]	@ 0x44
 801084a:	b97f      	cbnz	r7, 801086c <_dtoa_r+0x3c>
 801084c:	2010      	movs	r0, #16
 801084e:	f000 fe09 	bl	8011464 <malloc>
 8010852:	4602      	mov	r2, r0
 8010854:	f8c9 001c 	str.w	r0, [r9, #28]
 8010858:	b920      	cbnz	r0, 8010864 <_dtoa_r+0x34>
 801085a:	4ba9      	ldr	r3, [pc, #676]	@ (8010b00 <_dtoa_r+0x2d0>)
 801085c:	21ef      	movs	r1, #239	@ 0xef
 801085e:	48a9      	ldr	r0, [pc, #676]	@ (8010b04 <_dtoa_r+0x2d4>)
 8010860:	f7ff ff3e 	bl	80106e0 <__assert_func>
 8010864:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8010868:	6007      	str	r7, [r0, #0]
 801086a:	60c7      	str	r7, [r0, #12]
 801086c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8010870:	6819      	ldr	r1, [r3, #0]
 8010872:	b159      	cbz	r1, 801088c <_dtoa_r+0x5c>
 8010874:	685a      	ldr	r2, [r3, #4]
 8010876:	604a      	str	r2, [r1, #4]
 8010878:	2301      	movs	r3, #1
 801087a:	4093      	lsls	r3, r2
 801087c:	608b      	str	r3, [r1, #8]
 801087e:	4648      	mov	r0, r9
 8010880:	f000 fee6 	bl	8011650 <_Bfree>
 8010884:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8010888:	2200      	movs	r2, #0
 801088a:	601a      	str	r2, [r3, #0]
 801088c:	1e2b      	subs	r3, r5, #0
 801088e:	bfb9      	ittee	lt
 8010890:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8010894:	9305      	strlt	r3, [sp, #20]
 8010896:	2300      	movge	r3, #0
 8010898:	6033      	strge	r3, [r6, #0]
 801089a:	9f05      	ldr	r7, [sp, #20]
 801089c:	4b9a      	ldr	r3, [pc, #616]	@ (8010b08 <_dtoa_r+0x2d8>)
 801089e:	bfbc      	itt	lt
 80108a0:	2201      	movlt	r2, #1
 80108a2:	6032      	strlt	r2, [r6, #0]
 80108a4:	43bb      	bics	r3, r7
 80108a6:	d112      	bne.n	80108ce <_dtoa_r+0x9e>
 80108a8:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80108aa:	f242 730f 	movw	r3, #9999	@ 0x270f
 80108ae:	6013      	str	r3, [r2, #0]
 80108b0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80108b4:	4323      	orrs	r3, r4
 80108b6:	f000 855a 	beq.w	801136e <_dtoa_r+0xb3e>
 80108ba:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80108bc:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 8010b1c <_dtoa_r+0x2ec>
 80108c0:	2b00      	cmp	r3, #0
 80108c2:	f000 855c 	beq.w	801137e <_dtoa_r+0xb4e>
 80108c6:	f10a 0303 	add.w	r3, sl, #3
 80108ca:	f000 bd56 	b.w	801137a <_dtoa_r+0xb4a>
 80108ce:	ed9d 7b04 	vldr	d7, [sp, #16]
 80108d2:	2200      	movs	r2, #0
 80108d4:	ec51 0b17 	vmov	r0, r1, d7
 80108d8:	2300      	movs	r3, #0
 80108da:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 80108de:	f7f0 f90b 	bl	8000af8 <__aeabi_dcmpeq>
 80108e2:	4680      	mov	r8, r0
 80108e4:	b158      	cbz	r0, 80108fe <_dtoa_r+0xce>
 80108e6:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80108e8:	2301      	movs	r3, #1
 80108ea:	6013      	str	r3, [r2, #0]
 80108ec:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80108ee:	b113      	cbz	r3, 80108f6 <_dtoa_r+0xc6>
 80108f0:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 80108f2:	4b86      	ldr	r3, [pc, #536]	@ (8010b0c <_dtoa_r+0x2dc>)
 80108f4:	6013      	str	r3, [r2, #0]
 80108f6:	f8df a228 	ldr.w	sl, [pc, #552]	@ 8010b20 <_dtoa_r+0x2f0>
 80108fa:	f000 bd40 	b.w	801137e <_dtoa_r+0xb4e>
 80108fe:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 8010902:	aa14      	add	r2, sp, #80	@ 0x50
 8010904:	a915      	add	r1, sp, #84	@ 0x54
 8010906:	4648      	mov	r0, r9
 8010908:	f001 fa3e 	bl	8011d88 <__d2b>
 801090c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8010910:	9002      	str	r0, [sp, #8]
 8010912:	2e00      	cmp	r6, #0
 8010914:	d078      	beq.n	8010a08 <_dtoa_r+0x1d8>
 8010916:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8010918:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 801091c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8010920:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8010924:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8010928:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 801092c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8010930:	4619      	mov	r1, r3
 8010932:	2200      	movs	r2, #0
 8010934:	4b76      	ldr	r3, [pc, #472]	@ (8010b10 <_dtoa_r+0x2e0>)
 8010936:	f7ef fcbf 	bl	80002b8 <__aeabi_dsub>
 801093a:	a36b      	add	r3, pc, #428	@ (adr r3, 8010ae8 <_dtoa_r+0x2b8>)
 801093c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010940:	f7ef fe72 	bl	8000628 <__aeabi_dmul>
 8010944:	a36a      	add	r3, pc, #424	@ (adr r3, 8010af0 <_dtoa_r+0x2c0>)
 8010946:	e9d3 2300 	ldrd	r2, r3, [r3]
 801094a:	f7ef fcb7 	bl	80002bc <__adddf3>
 801094e:	4604      	mov	r4, r0
 8010950:	4630      	mov	r0, r6
 8010952:	460d      	mov	r5, r1
 8010954:	f7ef fdfe 	bl	8000554 <__aeabi_i2d>
 8010958:	a367      	add	r3, pc, #412	@ (adr r3, 8010af8 <_dtoa_r+0x2c8>)
 801095a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801095e:	f7ef fe63 	bl	8000628 <__aeabi_dmul>
 8010962:	4602      	mov	r2, r0
 8010964:	460b      	mov	r3, r1
 8010966:	4620      	mov	r0, r4
 8010968:	4629      	mov	r1, r5
 801096a:	f7ef fca7 	bl	80002bc <__adddf3>
 801096e:	4604      	mov	r4, r0
 8010970:	460d      	mov	r5, r1
 8010972:	f7f0 f909 	bl	8000b88 <__aeabi_d2iz>
 8010976:	2200      	movs	r2, #0
 8010978:	4607      	mov	r7, r0
 801097a:	2300      	movs	r3, #0
 801097c:	4620      	mov	r0, r4
 801097e:	4629      	mov	r1, r5
 8010980:	f7f0 f8c4 	bl	8000b0c <__aeabi_dcmplt>
 8010984:	b140      	cbz	r0, 8010998 <_dtoa_r+0x168>
 8010986:	4638      	mov	r0, r7
 8010988:	f7ef fde4 	bl	8000554 <__aeabi_i2d>
 801098c:	4622      	mov	r2, r4
 801098e:	462b      	mov	r3, r5
 8010990:	f7f0 f8b2 	bl	8000af8 <__aeabi_dcmpeq>
 8010994:	b900      	cbnz	r0, 8010998 <_dtoa_r+0x168>
 8010996:	3f01      	subs	r7, #1
 8010998:	2f16      	cmp	r7, #22
 801099a:	d852      	bhi.n	8010a42 <_dtoa_r+0x212>
 801099c:	4b5d      	ldr	r3, [pc, #372]	@ (8010b14 <_dtoa_r+0x2e4>)
 801099e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80109a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80109a6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80109aa:	f7f0 f8af 	bl	8000b0c <__aeabi_dcmplt>
 80109ae:	2800      	cmp	r0, #0
 80109b0:	d049      	beq.n	8010a46 <_dtoa_r+0x216>
 80109b2:	3f01      	subs	r7, #1
 80109b4:	2300      	movs	r3, #0
 80109b6:	9310      	str	r3, [sp, #64]	@ 0x40
 80109b8:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80109ba:	1b9b      	subs	r3, r3, r6
 80109bc:	1e5a      	subs	r2, r3, #1
 80109be:	bf45      	ittet	mi
 80109c0:	f1c3 0301 	rsbmi	r3, r3, #1
 80109c4:	9300      	strmi	r3, [sp, #0]
 80109c6:	2300      	movpl	r3, #0
 80109c8:	2300      	movmi	r3, #0
 80109ca:	9206      	str	r2, [sp, #24]
 80109cc:	bf54      	ite	pl
 80109ce:	9300      	strpl	r3, [sp, #0]
 80109d0:	9306      	strmi	r3, [sp, #24]
 80109d2:	2f00      	cmp	r7, #0
 80109d4:	db39      	blt.n	8010a4a <_dtoa_r+0x21a>
 80109d6:	9b06      	ldr	r3, [sp, #24]
 80109d8:	970d      	str	r7, [sp, #52]	@ 0x34
 80109da:	443b      	add	r3, r7
 80109dc:	9306      	str	r3, [sp, #24]
 80109de:	2300      	movs	r3, #0
 80109e0:	9308      	str	r3, [sp, #32]
 80109e2:	9b07      	ldr	r3, [sp, #28]
 80109e4:	2b09      	cmp	r3, #9
 80109e6:	d863      	bhi.n	8010ab0 <_dtoa_r+0x280>
 80109e8:	2b05      	cmp	r3, #5
 80109ea:	bfc4      	itt	gt
 80109ec:	3b04      	subgt	r3, #4
 80109ee:	9307      	strgt	r3, [sp, #28]
 80109f0:	9b07      	ldr	r3, [sp, #28]
 80109f2:	f1a3 0302 	sub.w	r3, r3, #2
 80109f6:	bfcc      	ite	gt
 80109f8:	2400      	movgt	r4, #0
 80109fa:	2401      	movle	r4, #1
 80109fc:	2b03      	cmp	r3, #3
 80109fe:	d863      	bhi.n	8010ac8 <_dtoa_r+0x298>
 8010a00:	e8df f003 	tbb	[pc, r3]
 8010a04:	2b375452 	.word	0x2b375452
 8010a08:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8010a0c:	441e      	add	r6, r3
 8010a0e:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8010a12:	2b20      	cmp	r3, #32
 8010a14:	bfc1      	itttt	gt
 8010a16:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8010a1a:	409f      	lslgt	r7, r3
 8010a1c:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8010a20:	fa24 f303 	lsrgt.w	r3, r4, r3
 8010a24:	bfd6      	itet	le
 8010a26:	f1c3 0320 	rsble	r3, r3, #32
 8010a2a:	ea47 0003 	orrgt.w	r0, r7, r3
 8010a2e:	fa04 f003 	lslle.w	r0, r4, r3
 8010a32:	f7ef fd7f 	bl	8000534 <__aeabi_ui2d>
 8010a36:	2201      	movs	r2, #1
 8010a38:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8010a3c:	3e01      	subs	r6, #1
 8010a3e:	9212      	str	r2, [sp, #72]	@ 0x48
 8010a40:	e776      	b.n	8010930 <_dtoa_r+0x100>
 8010a42:	2301      	movs	r3, #1
 8010a44:	e7b7      	b.n	80109b6 <_dtoa_r+0x186>
 8010a46:	9010      	str	r0, [sp, #64]	@ 0x40
 8010a48:	e7b6      	b.n	80109b8 <_dtoa_r+0x188>
 8010a4a:	9b00      	ldr	r3, [sp, #0]
 8010a4c:	1bdb      	subs	r3, r3, r7
 8010a4e:	9300      	str	r3, [sp, #0]
 8010a50:	427b      	negs	r3, r7
 8010a52:	9308      	str	r3, [sp, #32]
 8010a54:	2300      	movs	r3, #0
 8010a56:	930d      	str	r3, [sp, #52]	@ 0x34
 8010a58:	e7c3      	b.n	80109e2 <_dtoa_r+0x1b2>
 8010a5a:	2301      	movs	r3, #1
 8010a5c:	9309      	str	r3, [sp, #36]	@ 0x24
 8010a5e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8010a60:	eb07 0b03 	add.w	fp, r7, r3
 8010a64:	f10b 0301 	add.w	r3, fp, #1
 8010a68:	2b01      	cmp	r3, #1
 8010a6a:	9303      	str	r3, [sp, #12]
 8010a6c:	bfb8      	it	lt
 8010a6e:	2301      	movlt	r3, #1
 8010a70:	e006      	b.n	8010a80 <_dtoa_r+0x250>
 8010a72:	2301      	movs	r3, #1
 8010a74:	9309      	str	r3, [sp, #36]	@ 0x24
 8010a76:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8010a78:	2b00      	cmp	r3, #0
 8010a7a:	dd28      	ble.n	8010ace <_dtoa_r+0x29e>
 8010a7c:	469b      	mov	fp, r3
 8010a7e:	9303      	str	r3, [sp, #12]
 8010a80:	f8d9 001c 	ldr.w	r0, [r9, #28]
 8010a84:	2100      	movs	r1, #0
 8010a86:	2204      	movs	r2, #4
 8010a88:	f102 0514 	add.w	r5, r2, #20
 8010a8c:	429d      	cmp	r5, r3
 8010a8e:	d926      	bls.n	8010ade <_dtoa_r+0x2ae>
 8010a90:	6041      	str	r1, [r0, #4]
 8010a92:	4648      	mov	r0, r9
 8010a94:	f000 fd9c 	bl	80115d0 <_Balloc>
 8010a98:	4682      	mov	sl, r0
 8010a9a:	2800      	cmp	r0, #0
 8010a9c:	d142      	bne.n	8010b24 <_dtoa_r+0x2f4>
 8010a9e:	4b1e      	ldr	r3, [pc, #120]	@ (8010b18 <_dtoa_r+0x2e8>)
 8010aa0:	4602      	mov	r2, r0
 8010aa2:	f240 11af 	movw	r1, #431	@ 0x1af
 8010aa6:	e6da      	b.n	801085e <_dtoa_r+0x2e>
 8010aa8:	2300      	movs	r3, #0
 8010aaa:	e7e3      	b.n	8010a74 <_dtoa_r+0x244>
 8010aac:	2300      	movs	r3, #0
 8010aae:	e7d5      	b.n	8010a5c <_dtoa_r+0x22c>
 8010ab0:	2401      	movs	r4, #1
 8010ab2:	2300      	movs	r3, #0
 8010ab4:	9307      	str	r3, [sp, #28]
 8010ab6:	9409      	str	r4, [sp, #36]	@ 0x24
 8010ab8:	f04f 3bff 	mov.w	fp, #4294967295
 8010abc:	2200      	movs	r2, #0
 8010abe:	f8cd b00c 	str.w	fp, [sp, #12]
 8010ac2:	2312      	movs	r3, #18
 8010ac4:	920c      	str	r2, [sp, #48]	@ 0x30
 8010ac6:	e7db      	b.n	8010a80 <_dtoa_r+0x250>
 8010ac8:	2301      	movs	r3, #1
 8010aca:	9309      	str	r3, [sp, #36]	@ 0x24
 8010acc:	e7f4      	b.n	8010ab8 <_dtoa_r+0x288>
 8010ace:	f04f 0b01 	mov.w	fp, #1
 8010ad2:	f8cd b00c 	str.w	fp, [sp, #12]
 8010ad6:	465b      	mov	r3, fp
 8010ad8:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 8010adc:	e7d0      	b.n	8010a80 <_dtoa_r+0x250>
 8010ade:	3101      	adds	r1, #1
 8010ae0:	0052      	lsls	r2, r2, #1
 8010ae2:	e7d1      	b.n	8010a88 <_dtoa_r+0x258>
 8010ae4:	f3af 8000 	nop.w
 8010ae8:	636f4361 	.word	0x636f4361
 8010aec:	3fd287a7 	.word	0x3fd287a7
 8010af0:	8b60c8b3 	.word	0x8b60c8b3
 8010af4:	3fc68a28 	.word	0x3fc68a28
 8010af8:	509f79fb 	.word	0x509f79fb
 8010afc:	3fd34413 	.word	0x3fd34413
 8010b00:	08015906 	.word	0x08015906
 8010b04:	0801591d 	.word	0x0801591d
 8010b08:	7ff00000 	.word	0x7ff00000
 8010b0c:	08015895 	.word	0x08015895
 8010b10:	3ff80000 	.word	0x3ff80000
 8010b14:	08015a90 	.word	0x08015a90
 8010b18:	08015975 	.word	0x08015975
 8010b1c:	08015902 	.word	0x08015902
 8010b20:	08015894 	.word	0x08015894
 8010b24:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8010b28:	6018      	str	r0, [r3, #0]
 8010b2a:	9b03      	ldr	r3, [sp, #12]
 8010b2c:	2b0e      	cmp	r3, #14
 8010b2e:	f200 80a1 	bhi.w	8010c74 <_dtoa_r+0x444>
 8010b32:	2c00      	cmp	r4, #0
 8010b34:	f000 809e 	beq.w	8010c74 <_dtoa_r+0x444>
 8010b38:	2f00      	cmp	r7, #0
 8010b3a:	dd33      	ble.n	8010ba4 <_dtoa_r+0x374>
 8010b3c:	4b9c      	ldr	r3, [pc, #624]	@ (8010db0 <_dtoa_r+0x580>)
 8010b3e:	f007 020f 	and.w	r2, r7, #15
 8010b42:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8010b46:	ed93 7b00 	vldr	d7, [r3]
 8010b4a:	05f8      	lsls	r0, r7, #23
 8010b4c:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 8010b50:	ea4f 1427 	mov.w	r4, r7, asr #4
 8010b54:	d516      	bpl.n	8010b84 <_dtoa_r+0x354>
 8010b56:	4b97      	ldr	r3, [pc, #604]	@ (8010db4 <_dtoa_r+0x584>)
 8010b58:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8010b5c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8010b60:	f7ef fe8c 	bl	800087c <__aeabi_ddiv>
 8010b64:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8010b68:	f004 040f 	and.w	r4, r4, #15
 8010b6c:	2603      	movs	r6, #3
 8010b6e:	4d91      	ldr	r5, [pc, #580]	@ (8010db4 <_dtoa_r+0x584>)
 8010b70:	b954      	cbnz	r4, 8010b88 <_dtoa_r+0x358>
 8010b72:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8010b76:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8010b7a:	f7ef fe7f 	bl	800087c <__aeabi_ddiv>
 8010b7e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8010b82:	e028      	b.n	8010bd6 <_dtoa_r+0x3a6>
 8010b84:	2602      	movs	r6, #2
 8010b86:	e7f2      	b.n	8010b6e <_dtoa_r+0x33e>
 8010b88:	07e1      	lsls	r1, r4, #31
 8010b8a:	d508      	bpl.n	8010b9e <_dtoa_r+0x36e>
 8010b8c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8010b90:	e9d5 2300 	ldrd	r2, r3, [r5]
 8010b94:	f7ef fd48 	bl	8000628 <__aeabi_dmul>
 8010b98:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8010b9c:	3601      	adds	r6, #1
 8010b9e:	1064      	asrs	r4, r4, #1
 8010ba0:	3508      	adds	r5, #8
 8010ba2:	e7e5      	b.n	8010b70 <_dtoa_r+0x340>
 8010ba4:	f000 80af 	beq.w	8010d06 <_dtoa_r+0x4d6>
 8010ba8:	427c      	negs	r4, r7
 8010baa:	4b81      	ldr	r3, [pc, #516]	@ (8010db0 <_dtoa_r+0x580>)
 8010bac:	4d81      	ldr	r5, [pc, #516]	@ (8010db4 <_dtoa_r+0x584>)
 8010bae:	f004 020f 	and.w	r2, r4, #15
 8010bb2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8010bb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010bba:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8010bbe:	f7ef fd33 	bl	8000628 <__aeabi_dmul>
 8010bc2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8010bc6:	1124      	asrs	r4, r4, #4
 8010bc8:	2300      	movs	r3, #0
 8010bca:	2602      	movs	r6, #2
 8010bcc:	2c00      	cmp	r4, #0
 8010bce:	f040 808f 	bne.w	8010cf0 <_dtoa_r+0x4c0>
 8010bd2:	2b00      	cmp	r3, #0
 8010bd4:	d1d3      	bne.n	8010b7e <_dtoa_r+0x34e>
 8010bd6:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8010bd8:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8010bdc:	2b00      	cmp	r3, #0
 8010bde:	f000 8094 	beq.w	8010d0a <_dtoa_r+0x4da>
 8010be2:	4b75      	ldr	r3, [pc, #468]	@ (8010db8 <_dtoa_r+0x588>)
 8010be4:	2200      	movs	r2, #0
 8010be6:	4620      	mov	r0, r4
 8010be8:	4629      	mov	r1, r5
 8010bea:	f7ef ff8f 	bl	8000b0c <__aeabi_dcmplt>
 8010bee:	2800      	cmp	r0, #0
 8010bf0:	f000 808b 	beq.w	8010d0a <_dtoa_r+0x4da>
 8010bf4:	9b03      	ldr	r3, [sp, #12]
 8010bf6:	2b00      	cmp	r3, #0
 8010bf8:	f000 8087 	beq.w	8010d0a <_dtoa_r+0x4da>
 8010bfc:	f1bb 0f00 	cmp.w	fp, #0
 8010c00:	dd34      	ble.n	8010c6c <_dtoa_r+0x43c>
 8010c02:	4620      	mov	r0, r4
 8010c04:	4b6d      	ldr	r3, [pc, #436]	@ (8010dbc <_dtoa_r+0x58c>)
 8010c06:	2200      	movs	r2, #0
 8010c08:	4629      	mov	r1, r5
 8010c0a:	f7ef fd0d 	bl	8000628 <__aeabi_dmul>
 8010c0e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8010c12:	f107 38ff 	add.w	r8, r7, #4294967295
 8010c16:	3601      	adds	r6, #1
 8010c18:	465c      	mov	r4, fp
 8010c1a:	4630      	mov	r0, r6
 8010c1c:	f7ef fc9a 	bl	8000554 <__aeabi_i2d>
 8010c20:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8010c24:	f7ef fd00 	bl	8000628 <__aeabi_dmul>
 8010c28:	4b65      	ldr	r3, [pc, #404]	@ (8010dc0 <_dtoa_r+0x590>)
 8010c2a:	2200      	movs	r2, #0
 8010c2c:	f7ef fb46 	bl	80002bc <__adddf3>
 8010c30:	4605      	mov	r5, r0
 8010c32:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8010c36:	2c00      	cmp	r4, #0
 8010c38:	d16a      	bne.n	8010d10 <_dtoa_r+0x4e0>
 8010c3a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8010c3e:	4b61      	ldr	r3, [pc, #388]	@ (8010dc4 <_dtoa_r+0x594>)
 8010c40:	2200      	movs	r2, #0
 8010c42:	f7ef fb39 	bl	80002b8 <__aeabi_dsub>
 8010c46:	4602      	mov	r2, r0
 8010c48:	460b      	mov	r3, r1
 8010c4a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8010c4e:	462a      	mov	r2, r5
 8010c50:	4633      	mov	r3, r6
 8010c52:	f7ef ff79 	bl	8000b48 <__aeabi_dcmpgt>
 8010c56:	2800      	cmp	r0, #0
 8010c58:	f040 8298 	bne.w	801118c <_dtoa_r+0x95c>
 8010c5c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8010c60:	462a      	mov	r2, r5
 8010c62:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8010c66:	f7ef ff51 	bl	8000b0c <__aeabi_dcmplt>
 8010c6a:	bb38      	cbnz	r0, 8010cbc <_dtoa_r+0x48c>
 8010c6c:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 8010c70:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8010c74:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8010c76:	2b00      	cmp	r3, #0
 8010c78:	f2c0 8157 	blt.w	8010f2a <_dtoa_r+0x6fa>
 8010c7c:	2f0e      	cmp	r7, #14
 8010c7e:	f300 8154 	bgt.w	8010f2a <_dtoa_r+0x6fa>
 8010c82:	4b4b      	ldr	r3, [pc, #300]	@ (8010db0 <_dtoa_r+0x580>)
 8010c84:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8010c88:	ed93 7b00 	vldr	d7, [r3]
 8010c8c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8010c8e:	2b00      	cmp	r3, #0
 8010c90:	ed8d 7b00 	vstr	d7, [sp]
 8010c94:	f280 80e5 	bge.w	8010e62 <_dtoa_r+0x632>
 8010c98:	9b03      	ldr	r3, [sp, #12]
 8010c9a:	2b00      	cmp	r3, #0
 8010c9c:	f300 80e1 	bgt.w	8010e62 <_dtoa_r+0x632>
 8010ca0:	d10c      	bne.n	8010cbc <_dtoa_r+0x48c>
 8010ca2:	4b48      	ldr	r3, [pc, #288]	@ (8010dc4 <_dtoa_r+0x594>)
 8010ca4:	2200      	movs	r2, #0
 8010ca6:	ec51 0b17 	vmov	r0, r1, d7
 8010caa:	f7ef fcbd 	bl	8000628 <__aeabi_dmul>
 8010cae:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8010cb2:	f7ef ff3f 	bl	8000b34 <__aeabi_dcmpge>
 8010cb6:	2800      	cmp	r0, #0
 8010cb8:	f000 8266 	beq.w	8011188 <_dtoa_r+0x958>
 8010cbc:	2400      	movs	r4, #0
 8010cbe:	4625      	mov	r5, r4
 8010cc0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8010cc2:	4656      	mov	r6, sl
 8010cc4:	ea6f 0803 	mvn.w	r8, r3
 8010cc8:	2700      	movs	r7, #0
 8010cca:	4621      	mov	r1, r4
 8010ccc:	4648      	mov	r0, r9
 8010cce:	f000 fcbf 	bl	8011650 <_Bfree>
 8010cd2:	2d00      	cmp	r5, #0
 8010cd4:	f000 80bd 	beq.w	8010e52 <_dtoa_r+0x622>
 8010cd8:	b12f      	cbz	r7, 8010ce6 <_dtoa_r+0x4b6>
 8010cda:	42af      	cmp	r7, r5
 8010cdc:	d003      	beq.n	8010ce6 <_dtoa_r+0x4b6>
 8010cde:	4639      	mov	r1, r7
 8010ce0:	4648      	mov	r0, r9
 8010ce2:	f000 fcb5 	bl	8011650 <_Bfree>
 8010ce6:	4629      	mov	r1, r5
 8010ce8:	4648      	mov	r0, r9
 8010cea:	f000 fcb1 	bl	8011650 <_Bfree>
 8010cee:	e0b0      	b.n	8010e52 <_dtoa_r+0x622>
 8010cf0:	07e2      	lsls	r2, r4, #31
 8010cf2:	d505      	bpl.n	8010d00 <_dtoa_r+0x4d0>
 8010cf4:	e9d5 2300 	ldrd	r2, r3, [r5]
 8010cf8:	f7ef fc96 	bl	8000628 <__aeabi_dmul>
 8010cfc:	3601      	adds	r6, #1
 8010cfe:	2301      	movs	r3, #1
 8010d00:	1064      	asrs	r4, r4, #1
 8010d02:	3508      	adds	r5, #8
 8010d04:	e762      	b.n	8010bcc <_dtoa_r+0x39c>
 8010d06:	2602      	movs	r6, #2
 8010d08:	e765      	b.n	8010bd6 <_dtoa_r+0x3a6>
 8010d0a:	9c03      	ldr	r4, [sp, #12]
 8010d0c:	46b8      	mov	r8, r7
 8010d0e:	e784      	b.n	8010c1a <_dtoa_r+0x3ea>
 8010d10:	4b27      	ldr	r3, [pc, #156]	@ (8010db0 <_dtoa_r+0x580>)
 8010d12:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8010d14:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8010d18:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8010d1c:	4454      	add	r4, sl
 8010d1e:	2900      	cmp	r1, #0
 8010d20:	d054      	beq.n	8010dcc <_dtoa_r+0x59c>
 8010d22:	4929      	ldr	r1, [pc, #164]	@ (8010dc8 <_dtoa_r+0x598>)
 8010d24:	2000      	movs	r0, #0
 8010d26:	f7ef fda9 	bl	800087c <__aeabi_ddiv>
 8010d2a:	4633      	mov	r3, r6
 8010d2c:	462a      	mov	r2, r5
 8010d2e:	f7ef fac3 	bl	80002b8 <__aeabi_dsub>
 8010d32:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8010d36:	4656      	mov	r6, sl
 8010d38:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8010d3c:	f7ef ff24 	bl	8000b88 <__aeabi_d2iz>
 8010d40:	4605      	mov	r5, r0
 8010d42:	f7ef fc07 	bl	8000554 <__aeabi_i2d>
 8010d46:	4602      	mov	r2, r0
 8010d48:	460b      	mov	r3, r1
 8010d4a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8010d4e:	f7ef fab3 	bl	80002b8 <__aeabi_dsub>
 8010d52:	3530      	adds	r5, #48	@ 0x30
 8010d54:	4602      	mov	r2, r0
 8010d56:	460b      	mov	r3, r1
 8010d58:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8010d5c:	f806 5b01 	strb.w	r5, [r6], #1
 8010d60:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8010d64:	f7ef fed2 	bl	8000b0c <__aeabi_dcmplt>
 8010d68:	2800      	cmp	r0, #0
 8010d6a:	d172      	bne.n	8010e52 <_dtoa_r+0x622>
 8010d6c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8010d70:	4911      	ldr	r1, [pc, #68]	@ (8010db8 <_dtoa_r+0x588>)
 8010d72:	2000      	movs	r0, #0
 8010d74:	f7ef faa0 	bl	80002b8 <__aeabi_dsub>
 8010d78:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8010d7c:	f7ef fec6 	bl	8000b0c <__aeabi_dcmplt>
 8010d80:	2800      	cmp	r0, #0
 8010d82:	f040 80b4 	bne.w	8010eee <_dtoa_r+0x6be>
 8010d86:	42a6      	cmp	r6, r4
 8010d88:	f43f af70 	beq.w	8010c6c <_dtoa_r+0x43c>
 8010d8c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8010d90:	4b0a      	ldr	r3, [pc, #40]	@ (8010dbc <_dtoa_r+0x58c>)
 8010d92:	2200      	movs	r2, #0
 8010d94:	f7ef fc48 	bl	8000628 <__aeabi_dmul>
 8010d98:	4b08      	ldr	r3, [pc, #32]	@ (8010dbc <_dtoa_r+0x58c>)
 8010d9a:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8010d9e:	2200      	movs	r2, #0
 8010da0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8010da4:	f7ef fc40 	bl	8000628 <__aeabi_dmul>
 8010da8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8010dac:	e7c4      	b.n	8010d38 <_dtoa_r+0x508>
 8010dae:	bf00      	nop
 8010db0:	08015a90 	.word	0x08015a90
 8010db4:	08015a68 	.word	0x08015a68
 8010db8:	3ff00000 	.word	0x3ff00000
 8010dbc:	40240000 	.word	0x40240000
 8010dc0:	401c0000 	.word	0x401c0000
 8010dc4:	40140000 	.word	0x40140000
 8010dc8:	3fe00000 	.word	0x3fe00000
 8010dcc:	4631      	mov	r1, r6
 8010dce:	4628      	mov	r0, r5
 8010dd0:	f7ef fc2a 	bl	8000628 <__aeabi_dmul>
 8010dd4:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8010dd8:	9413      	str	r4, [sp, #76]	@ 0x4c
 8010dda:	4656      	mov	r6, sl
 8010ddc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8010de0:	f7ef fed2 	bl	8000b88 <__aeabi_d2iz>
 8010de4:	4605      	mov	r5, r0
 8010de6:	f7ef fbb5 	bl	8000554 <__aeabi_i2d>
 8010dea:	4602      	mov	r2, r0
 8010dec:	460b      	mov	r3, r1
 8010dee:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8010df2:	f7ef fa61 	bl	80002b8 <__aeabi_dsub>
 8010df6:	3530      	adds	r5, #48	@ 0x30
 8010df8:	f806 5b01 	strb.w	r5, [r6], #1
 8010dfc:	4602      	mov	r2, r0
 8010dfe:	460b      	mov	r3, r1
 8010e00:	42a6      	cmp	r6, r4
 8010e02:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8010e06:	f04f 0200 	mov.w	r2, #0
 8010e0a:	d124      	bne.n	8010e56 <_dtoa_r+0x626>
 8010e0c:	4baf      	ldr	r3, [pc, #700]	@ (80110cc <_dtoa_r+0x89c>)
 8010e0e:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8010e12:	f7ef fa53 	bl	80002bc <__adddf3>
 8010e16:	4602      	mov	r2, r0
 8010e18:	460b      	mov	r3, r1
 8010e1a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8010e1e:	f7ef fe93 	bl	8000b48 <__aeabi_dcmpgt>
 8010e22:	2800      	cmp	r0, #0
 8010e24:	d163      	bne.n	8010eee <_dtoa_r+0x6be>
 8010e26:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8010e2a:	49a8      	ldr	r1, [pc, #672]	@ (80110cc <_dtoa_r+0x89c>)
 8010e2c:	2000      	movs	r0, #0
 8010e2e:	f7ef fa43 	bl	80002b8 <__aeabi_dsub>
 8010e32:	4602      	mov	r2, r0
 8010e34:	460b      	mov	r3, r1
 8010e36:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8010e3a:	f7ef fe67 	bl	8000b0c <__aeabi_dcmplt>
 8010e3e:	2800      	cmp	r0, #0
 8010e40:	f43f af14 	beq.w	8010c6c <_dtoa_r+0x43c>
 8010e44:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8010e46:	1e73      	subs	r3, r6, #1
 8010e48:	9313      	str	r3, [sp, #76]	@ 0x4c
 8010e4a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8010e4e:	2b30      	cmp	r3, #48	@ 0x30
 8010e50:	d0f8      	beq.n	8010e44 <_dtoa_r+0x614>
 8010e52:	4647      	mov	r7, r8
 8010e54:	e03b      	b.n	8010ece <_dtoa_r+0x69e>
 8010e56:	4b9e      	ldr	r3, [pc, #632]	@ (80110d0 <_dtoa_r+0x8a0>)
 8010e58:	f7ef fbe6 	bl	8000628 <__aeabi_dmul>
 8010e5c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8010e60:	e7bc      	b.n	8010ddc <_dtoa_r+0x5ac>
 8010e62:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8010e66:	4656      	mov	r6, sl
 8010e68:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010e6c:	4620      	mov	r0, r4
 8010e6e:	4629      	mov	r1, r5
 8010e70:	f7ef fd04 	bl	800087c <__aeabi_ddiv>
 8010e74:	f7ef fe88 	bl	8000b88 <__aeabi_d2iz>
 8010e78:	4680      	mov	r8, r0
 8010e7a:	f7ef fb6b 	bl	8000554 <__aeabi_i2d>
 8010e7e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010e82:	f7ef fbd1 	bl	8000628 <__aeabi_dmul>
 8010e86:	4602      	mov	r2, r0
 8010e88:	460b      	mov	r3, r1
 8010e8a:	4620      	mov	r0, r4
 8010e8c:	4629      	mov	r1, r5
 8010e8e:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8010e92:	f7ef fa11 	bl	80002b8 <__aeabi_dsub>
 8010e96:	f806 4b01 	strb.w	r4, [r6], #1
 8010e9a:	9d03      	ldr	r5, [sp, #12]
 8010e9c:	eba6 040a 	sub.w	r4, r6, sl
 8010ea0:	42a5      	cmp	r5, r4
 8010ea2:	4602      	mov	r2, r0
 8010ea4:	460b      	mov	r3, r1
 8010ea6:	d133      	bne.n	8010f10 <_dtoa_r+0x6e0>
 8010ea8:	f7ef fa08 	bl	80002bc <__adddf3>
 8010eac:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010eb0:	4604      	mov	r4, r0
 8010eb2:	460d      	mov	r5, r1
 8010eb4:	f7ef fe48 	bl	8000b48 <__aeabi_dcmpgt>
 8010eb8:	b9c0      	cbnz	r0, 8010eec <_dtoa_r+0x6bc>
 8010eba:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010ebe:	4620      	mov	r0, r4
 8010ec0:	4629      	mov	r1, r5
 8010ec2:	f7ef fe19 	bl	8000af8 <__aeabi_dcmpeq>
 8010ec6:	b110      	cbz	r0, 8010ece <_dtoa_r+0x69e>
 8010ec8:	f018 0f01 	tst.w	r8, #1
 8010ecc:	d10e      	bne.n	8010eec <_dtoa_r+0x6bc>
 8010ece:	9902      	ldr	r1, [sp, #8]
 8010ed0:	4648      	mov	r0, r9
 8010ed2:	f000 fbbd 	bl	8011650 <_Bfree>
 8010ed6:	2300      	movs	r3, #0
 8010ed8:	7033      	strb	r3, [r6, #0]
 8010eda:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8010edc:	3701      	adds	r7, #1
 8010ede:	601f      	str	r7, [r3, #0]
 8010ee0:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8010ee2:	2b00      	cmp	r3, #0
 8010ee4:	f000 824b 	beq.w	801137e <_dtoa_r+0xb4e>
 8010ee8:	601e      	str	r6, [r3, #0]
 8010eea:	e248      	b.n	801137e <_dtoa_r+0xb4e>
 8010eec:	46b8      	mov	r8, r7
 8010eee:	4633      	mov	r3, r6
 8010ef0:	461e      	mov	r6, r3
 8010ef2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8010ef6:	2a39      	cmp	r2, #57	@ 0x39
 8010ef8:	d106      	bne.n	8010f08 <_dtoa_r+0x6d8>
 8010efa:	459a      	cmp	sl, r3
 8010efc:	d1f8      	bne.n	8010ef0 <_dtoa_r+0x6c0>
 8010efe:	2230      	movs	r2, #48	@ 0x30
 8010f00:	f108 0801 	add.w	r8, r8, #1
 8010f04:	f88a 2000 	strb.w	r2, [sl]
 8010f08:	781a      	ldrb	r2, [r3, #0]
 8010f0a:	3201      	adds	r2, #1
 8010f0c:	701a      	strb	r2, [r3, #0]
 8010f0e:	e7a0      	b.n	8010e52 <_dtoa_r+0x622>
 8010f10:	4b6f      	ldr	r3, [pc, #444]	@ (80110d0 <_dtoa_r+0x8a0>)
 8010f12:	2200      	movs	r2, #0
 8010f14:	f7ef fb88 	bl	8000628 <__aeabi_dmul>
 8010f18:	2200      	movs	r2, #0
 8010f1a:	2300      	movs	r3, #0
 8010f1c:	4604      	mov	r4, r0
 8010f1e:	460d      	mov	r5, r1
 8010f20:	f7ef fdea 	bl	8000af8 <__aeabi_dcmpeq>
 8010f24:	2800      	cmp	r0, #0
 8010f26:	d09f      	beq.n	8010e68 <_dtoa_r+0x638>
 8010f28:	e7d1      	b.n	8010ece <_dtoa_r+0x69e>
 8010f2a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8010f2c:	2a00      	cmp	r2, #0
 8010f2e:	f000 80ea 	beq.w	8011106 <_dtoa_r+0x8d6>
 8010f32:	9a07      	ldr	r2, [sp, #28]
 8010f34:	2a01      	cmp	r2, #1
 8010f36:	f300 80cd 	bgt.w	80110d4 <_dtoa_r+0x8a4>
 8010f3a:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8010f3c:	2a00      	cmp	r2, #0
 8010f3e:	f000 80c1 	beq.w	80110c4 <_dtoa_r+0x894>
 8010f42:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8010f46:	9c08      	ldr	r4, [sp, #32]
 8010f48:	9e00      	ldr	r6, [sp, #0]
 8010f4a:	9a00      	ldr	r2, [sp, #0]
 8010f4c:	441a      	add	r2, r3
 8010f4e:	9200      	str	r2, [sp, #0]
 8010f50:	9a06      	ldr	r2, [sp, #24]
 8010f52:	2101      	movs	r1, #1
 8010f54:	441a      	add	r2, r3
 8010f56:	4648      	mov	r0, r9
 8010f58:	9206      	str	r2, [sp, #24]
 8010f5a:	f000 fc77 	bl	801184c <__i2b>
 8010f5e:	4605      	mov	r5, r0
 8010f60:	b166      	cbz	r6, 8010f7c <_dtoa_r+0x74c>
 8010f62:	9b06      	ldr	r3, [sp, #24]
 8010f64:	2b00      	cmp	r3, #0
 8010f66:	dd09      	ble.n	8010f7c <_dtoa_r+0x74c>
 8010f68:	42b3      	cmp	r3, r6
 8010f6a:	9a00      	ldr	r2, [sp, #0]
 8010f6c:	bfa8      	it	ge
 8010f6e:	4633      	movge	r3, r6
 8010f70:	1ad2      	subs	r2, r2, r3
 8010f72:	9200      	str	r2, [sp, #0]
 8010f74:	9a06      	ldr	r2, [sp, #24]
 8010f76:	1af6      	subs	r6, r6, r3
 8010f78:	1ad3      	subs	r3, r2, r3
 8010f7a:	9306      	str	r3, [sp, #24]
 8010f7c:	9b08      	ldr	r3, [sp, #32]
 8010f7e:	b30b      	cbz	r3, 8010fc4 <_dtoa_r+0x794>
 8010f80:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010f82:	2b00      	cmp	r3, #0
 8010f84:	f000 80c6 	beq.w	8011114 <_dtoa_r+0x8e4>
 8010f88:	2c00      	cmp	r4, #0
 8010f8a:	f000 80c0 	beq.w	801110e <_dtoa_r+0x8de>
 8010f8e:	4629      	mov	r1, r5
 8010f90:	4622      	mov	r2, r4
 8010f92:	4648      	mov	r0, r9
 8010f94:	f000 fd12 	bl	80119bc <__pow5mult>
 8010f98:	9a02      	ldr	r2, [sp, #8]
 8010f9a:	4601      	mov	r1, r0
 8010f9c:	4605      	mov	r5, r0
 8010f9e:	4648      	mov	r0, r9
 8010fa0:	f000 fc6a 	bl	8011878 <__multiply>
 8010fa4:	9902      	ldr	r1, [sp, #8]
 8010fa6:	4680      	mov	r8, r0
 8010fa8:	4648      	mov	r0, r9
 8010faa:	f000 fb51 	bl	8011650 <_Bfree>
 8010fae:	9b08      	ldr	r3, [sp, #32]
 8010fb0:	1b1b      	subs	r3, r3, r4
 8010fb2:	9308      	str	r3, [sp, #32]
 8010fb4:	f000 80b1 	beq.w	801111a <_dtoa_r+0x8ea>
 8010fb8:	9a08      	ldr	r2, [sp, #32]
 8010fba:	4641      	mov	r1, r8
 8010fbc:	4648      	mov	r0, r9
 8010fbe:	f000 fcfd 	bl	80119bc <__pow5mult>
 8010fc2:	9002      	str	r0, [sp, #8]
 8010fc4:	2101      	movs	r1, #1
 8010fc6:	4648      	mov	r0, r9
 8010fc8:	f000 fc40 	bl	801184c <__i2b>
 8010fcc:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8010fce:	4604      	mov	r4, r0
 8010fd0:	2b00      	cmp	r3, #0
 8010fd2:	f000 81d8 	beq.w	8011386 <_dtoa_r+0xb56>
 8010fd6:	461a      	mov	r2, r3
 8010fd8:	4601      	mov	r1, r0
 8010fda:	4648      	mov	r0, r9
 8010fdc:	f000 fcee 	bl	80119bc <__pow5mult>
 8010fe0:	9b07      	ldr	r3, [sp, #28]
 8010fe2:	2b01      	cmp	r3, #1
 8010fe4:	4604      	mov	r4, r0
 8010fe6:	f300 809f 	bgt.w	8011128 <_dtoa_r+0x8f8>
 8010fea:	9b04      	ldr	r3, [sp, #16]
 8010fec:	2b00      	cmp	r3, #0
 8010fee:	f040 8097 	bne.w	8011120 <_dtoa_r+0x8f0>
 8010ff2:	9b05      	ldr	r3, [sp, #20]
 8010ff4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8010ff8:	2b00      	cmp	r3, #0
 8010ffa:	f040 8093 	bne.w	8011124 <_dtoa_r+0x8f4>
 8010ffe:	9b05      	ldr	r3, [sp, #20]
 8011000:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8011004:	0d1b      	lsrs	r3, r3, #20
 8011006:	051b      	lsls	r3, r3, #20
 8011008:	b133      	cbz	r3, 8011018 <_dtoa_r+0x7e8>
 801100a:	9b00      	ldr	r3, [sp, #0]
 801100c:	3301      	adds	r3, #1
 801100e:	9300      	str	r3, [sp, #0]
 8011010:	9b06      	ldr	r3, [sp, #24]
 8011012:	3301      	adds	r3, #1
 8011014:	9306      	str	r3, [sp, #24]
 8011016:	2301      	movs	r3, #1
 8011018:	9308      	str	r3, [sp, #32]
 801101a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801101c:	2b00      	cmp	r3, #0
 801101e:	f000 81b8 	beq.w	8011392 <_dtoa_r+0xb62>
 8011022:	6923      	ldr	r3, [r4, #16]
 8011024:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8011028:	6918      	ldr	r0, [r3, #16]
 801102a:	f000 fbc3 	bl	80117b4 <__hi0bits>
 801102e:	f1c0 0020 	rsb	r0, r0, #32
 8011032:	9b06      	ldr	r3, [sp, #24]
 8011034:	4418      	add	r0, r3
 8011036:	f010 001f 	ands.w	r0, r0, #31
 801103a:	f000 8082 	beq.w	8011142 <_dtoa_r+0x912>
 801103e:	f1c0 0320 	rsb	r3, r0, #32
 8011042:	2b04      	cmp	r3, #4
 8011044:	dd73      	ble.n	801112e <_dtoa_r+0x8fe>
 8011046:	9b00      	ldr	r3, [sp, #0]
 8011048:	f1c0 001c 	rsb	r0, r0, #28
 801104c:	4403      	add	r3, r0
 801104e:	9300      	str	r3, [sp, #0]
 8011050:	9b06      	ldr	r3, [sp, #24]
 8011052:	4403      	add	r3, r0
 8011054:	4406      	add	r6, r0
 8011056:	9306      	str	r3, [sp, #24]
 8011058:	9b00      	ldr	r3, [sp, #0]
 801105a:	2b00      	cmp	r3, #0
 801105c:	dd05      	ble.n	801106a <_dtoa_r+0x83a>
 801105e:	9902      	ldr	r1, [sp, #8]
 8011060:	461a      	mov	r2, r3
 8011062:	4648      	mov	r0, r9
 8011064:	f000 fd04 	bl	8011a70 <__lshift>
 8011068:	9002      	str	r0, [sp, #8]
 801106a:	9b06      	ldr	r3, [sp, #24]
 801106c:	2b00      	cmp	r3, #0
 801106e:	dd05      	ble.n	801107c <_dtoa_r+0x84c>
 8011070:	4621      	mov	r1, r4
 8011072:	461a      	mov	r2, r3
 8011074:	4648      	mov	r0, r9
 8011076:	f000 fcfb 	bl	8011a70 <__lshift>
 801107a:	4604      	mov	r4, r0
 801107c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801107e:	2b00      	cmp	r3, #0
 8011080:	d061      	beq.n	8011146 <_dtoa_r+0x916>
 8011082:	9802      	ldr	r0, [sp, #8]
 8011084:	4621      	mov	r1, r4
 8011086:	f000 fd5f 	bl	8011b48 <__mcmp>
 801108a:	2800      	cmp	r0, #0
 801108c:	da5b      	bge.n	8011146 <_dtoa_r+0x916>
 801108e:	2300      	movs	r3, #0
 8011090:	9902      	ldr	r1, [sp, #8]
 8011092:	220a      	movs	r2, #10
 8011094:	4648      	mov	r0, r9
 8011096:	f000 fafd 	bl	8011694 <__multadd>
 801109a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801109c:	9002      	str	r0, [sp, #8]
 801109e:	f107 38ff 	add.w	r8, r7, #4294967295
 80110a2:	2b00      	cmp	r3, #0
 80110a4:	f000 8177 	beq.w	8011396 <_dtoa_r+0xb66>
 80110a8:	4629      	mov	r1, r5
 80110aa:	2300      	movs	r3, #0
 80110ac:	220a      	movs	r2, #10
 80110ae:	4648      	mov	r0, r9
 80110b0:	f000 faf0 	bl	8011694 <__multadd>
 80110b4:	f1bb 0f00 	cmp.w	fp, #0
 80110b8:	4605      	mov	r5, r0
 80110ba:	dc6f      	bgt.n	801119c <_dtoa_r+0x96c>
 80110bc:	9b07      	ldr	r3, [sp, #28]
 80110be:	2b02      	cmp	r3, #2
 80110c0:	dc49      	bgt.n	8011156 <_dtoa_r+0x926>
 80110c2:	e06b      	b.n	801119c <_dtoa_r+0x96c>
 80110c4:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80110c6:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 80110ca:	e73c      	b.n	8010f46 <_dtoa_r+0x716>
 80110cc:	3fe00000 	.word	0x3fe00000
 80110d0:	40240000 	.word	0x40240000
 80110d4:	9b03      	ldr	r3, [sp, #12]
 80110d6:	1e5c      	subs	r4, r3, #1
 80110d8:	9b08      	ldr	r3, [sp, #32]
 80110da:	42a3      	cmp	r3, r4
 80110dc:	db09      	blt.n	80110f2 <_dtoa_r+0x8c2>
 80110de:	1b1c      	subs	r4, r3, r4
 80110e0:	9b03      	ldr	r3, [sp, #12]
 80110e2:	2b00      	cmp	r3, #0
 80110e4:	f6bf af30 	bge.w	8010f48 <_dtoa_r+0x718>
 80110e8:	9b00      	ldr	r3, [sp, #0]
 80110ea:	9a03      	ldr	r2, [sp, #12]
 80110ec:	1a9e      	subs	r6, r3, r2
 80110ee:	2300      	movs	r3, #0
 80110f0:	e72b      	b.n	8010f4a <_dtoa_r+0x71a>
 80110f2:	9b08      	ldr	r3, [sp, #32]
 80110f4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80110f6:	9408      	str	r4, [sp, #32]
 80110f8:	1ae3      	subs	r3, r4, r3
 80110fa:	441a      	add	r2, r3
 80110fc:	9e00      	ldr	r6, [sp, #0]
 80110fe:	9b03      	ldr	r3, [sp, #12]
 8011100:	920d      	str	r2, [sp, #52]	@ 0x34
 8011102:	2400      	movs	r4, #0
 8011104:	e721      	b.n	8010f4a <_dtoa_r+0x71a>
 8011106:	9c08      	ldr	r4, [sp, #32]
 8011108:	9e00      	ldr	r6, [sp, #0]
 801110a:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 801110c:	e728      	b.n	8010f60 <_dtoa_r+0x730>
 801110e:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8011112:	e751      	b.n	8010fb8 <_dtoa_r+0x788>
 8011114:	9a08      	ldr	r2, [sp, #32]
 8011116:	9902      	ldr	r1, [sp, #8]
 8011118:	e750      	b.n	8010fbc <_dtoa_r+0x78c>
 801111a:	f8cd 8008 	str.w	r8, [sp, #8]
 801111e:	e751      	b.n	8010fc4 <_dtoa_r+0x794>
 8011120:	2300      	movs	r3, #0
 8011122:	e779      	b.n	8011018 <_dtoa_r+0x7e8>
 8011124:	9b04      	ldr	r3, [sp, #16]
 8011126:	e777      	b.n	8011018 <_dtoa_r+0x7e8>
 8011128:	2300      	movs	r3, #0
 801112a:	9308      	str	r3, [sp, #32]
 801112c:	e779      	b.n	8011022 <_dtoa_r+0x7f2>
 801112e:	d093      	beq.n	8011058 <_dtoa_r+0x828>
 8011130:	9a00      	ldr	r2, [sp, #0]
 8011132:	331c      	adds	r3, #28
 8011134:	441a      	add	r2, r3
 8011136:	9200      	str	r2, [sp, #0]
 8011138:	9a06      	ldr	r2, [sp, #24]
 801113a:	441a      	add	r2, r3
 801113c:	441e      	add	r6, r3
 801113e:	9206      	str	r2, [sp, #24]
 8011140:	e78a      	b.n	8011058 <_dtoa_r+0x828>
 8011142:	4603      	mov	r3, r0
 8011144:	e7f4      	b.n	8011130 <_dtoa_r+0x900>
 8011146:	9b03      	ldr	r3, [sp, #12]
 8011148:	2b00      	cmp	r3, #0
 801114a:	46b8      	mov	r8, r7
 801114c:	dc20      	bgt.n	8011190 <_dtoa_r+0x960>
 801114e:	469b      	mov	fp, r3
 8011150:	9b07      	ldr	r3, [sp, #28]
 8011152:	2b02      	cmp	r3, #2
 8011154:	dd1e      	ble.n	8011194 <_dtoa_r+0x964>
 8011156:	f1bb 0f00 	cmp.w	fp, #0
 801115a:	f47f adb1 	bne.w	8010cc0 <_dtoa_r+0x490>
 801115e:	4621      	mov	r1, r4
 8011160:	465b      	mov	r3, fp
 8011162:	2205      	movs	r2, #5
 8011164:	4648      	mov	r0, r9
 8011166:	f000 fa95 	bl	8011694 <__multadd>
 801116a:	4601      	mov	r1, r0
 801116c:	4604      	mov	r4, r0
 801116e:	9802      	ldr	r0, [sp, #8]
 8011170:	f000 fcea 	bl	8011b48 <__mcmp>
 8011174:	2800      	cmp	r0, #0
 8011176:	f77f ada3 	ble.w	8010cc0 <_dtoa_r+0x490>
 801117a:	4656      	mov	r6, sl
 801117c:	2331      	movs	r3, #49	@ 0x31
 801117e:	f806 3b01 	strb.w	r3, [r6], #1
 8011182:	f108 0801 	add.w	r8, r8, #1
 8011186:	e59f      	b.n	8010cc8 <_dtoa_r+0x498>
 8011188:	9c03      	ldr	r4, [sp, #12]
 801118a:	46b8      	mov	r8, r7
 801118c:	4625      	mov	r5, r4
 801118e:	e7f4      	b.n	801117a <_dtoa_r+0x94a>
 8011190:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8011194:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011196:	2b00      	cmp	r3, #0
 8011198:	f000 8101 	beq.w	801139e <_dtoa_r+0xb6e>
 801119c:	2e00      	cmp	r6, #0
 801119e:	dd05      	ble.n	80111ac <_dtoa_r+0x97c>
 80111a0:	4629      	mov	r1, r5
 80111a2:	4632      	mov	r2, r6
 80111a4:	4648      	mov	r0, r9
 80111a6:	f000 fc63 	bl	8011a70 <__lshift>
 80111aa:	4605      	mov	r5, r0
 80111ac:	9b08      	ldr	r3, [sp, #32]
 80111ae:	2b00      	cmp	r3, #0
 80111b0:	d05c      	beq.n	801126c <_dtoa_r+0xa3c>
 80111b2:	6869      	ldr	r1, [r5, #4]
 80111b4:	4648      	mov	r0, r9
 80111b6:	f000 fa0b 	bl	80115d0 <_Balloc>
 80111ba:	4606      	mov	r6, r0
 80111bc:	b928      	cbnz	r0, 80111ca <_dtoa_r+0x99a>
 80111be:	4b82      	ldr	r3, [pc, #520]	@ (80113c8 <_dtoa_r+0xb98>)
 80111c0:	4602      	mov	r2, r0
 80111c2:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80111c6:	f7ff bb4a 	b.w	801085e <_dtoa_r+0x2e>
 80111ca:	692a      	ldr	r2, [r5, #16]
 80111cc:	3202      	adds	r2, #2
 80111ce:	0092      	lsls	r2, r2, #2
 80111d0:	f105 010c 	add.w	r1, r5, #12
 80111d4:	300c      	adds	r0, #12
 80111d6:	f7ff fa6e 	bl	80106b6 <memcpy>
 80111da:	2201      	movs	r2, #1
 80111dc:	4631      	mov	r1, r6
 80111de:	4648      	mov	r0, r9
 80111e0:	f000 fc46 	bl	8011a70 <__lshift>
 80111e4:	f10a 0301 	add.w	r3, sl, #1
 80111e8:	9300      	str	r3, [sp, #0]
 80111ea:	eb0a 030b 	add.w	r3, sl, fp
 80111ee:	9308      	str	r3, [sp, #32]
 80111f0:	9b04      	ldr	r3, [sp, #16]
 80111f2:	f003 0301 	and.w	r3, r3, #1
 80111f6:	462f      	mov	r7, r5
 80111f8:	9306      	str	r3, [sp, #24]
 80111fa:	4605      	mov	r5, r0
 80111fc:	9b00      	ldr	r3, [sp, #0]
 80111fe:	9802      	ldr	r0, [sp, #8]
 8011200:	4621      	mov	r1, r4
 8011202:	f103 3bff 	add.w	fp, r3, #4294967295
 8011206:	f7ff fa89 	bl	801071c <quorem>
 801120a:	4603      	mov	r3, r0
 801120c:	3330      	adds	r3, #48	@ 0x30
 801120e:	9003      	str	r0, [sp, #12]
 8011210:	4639      	mov	r1, r7
 8011212:	9802      	ldr	r0, [sp, #8]
 8011214:	9309      	str	r3, [sp, #36]	@ 0x24
 8011216:	f000 fc97 	bl	8011b48 <__mcmp>
 801121a:	462a      	mov	r2, r5
 801121c:	9004      	str	r0, [sp, #16]
 801121e:	4621      	mov	r1, r4
 8011220:	4648      	mov	r0, r9
 8011222:	f000 fcad 	bl	8011b80 <__mdiff>
 8011226:	68c2      	ldr	r2, [r0, #12]
 8011228:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801122a:	4606      	mov	r6, r0
 801122c:	bb02      	cbnz	r2, 8011270 <_dtoa_r+0xa40>
 801122e:	4601      	mov	r1, r0
 8011230:	9802      	ldr	r0, [sp, #8]
 8011232:	f000 fc89 	bl	8011b48 <__mcmp>
 8011236:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011238:	4602      	mov	r2, r0
 801123a:	4631      	mov	r1, r6
 801123c:	4648      	mov	r0, r9
 801123e:	920c      	str	r2, [sp, #48]	@ 0x30
 8011240:	9309      	str	r3, [sp, #36]	@ 0x24
 8011242:	f000 fa05 	bl	8011650 <_Bfree>
 8011246:	9b07      	ldr	r3, [sp, #28]
 8011248:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801124a:	9e00      	ldr	r6, [sp, #0]
 801124c:	ea42 0103 	orr.w	r1, r2, r3
 8011250:	9b06      	ldr	r3, [sp, #24]
 8011252:	4319      	orrs	r1, r3
 8011254:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011256:	d10d      	bne.n	8011274 <_dtoa_r+0xa44>
 8011258:	2b39      	cmp	r3, #57	@ 0x39
 801125a:	d027      	beq.n	80112ac <_dtoa_r+0xa7c>
 801125c:	9a04      	ldr	r2, [sp, #16]
 801125e:	2a00      	cmp	r2, #0
 8011260:	dd01      	ble.n	8011266 <_dtoa_r+0xa36>
 8011262:	9b03      	ldr	r3, [sp, #12]
 8011264:	3331      	adds	r3, #49	@ 0x31
 8011266:	f88b 3000 	strb.w	r3, [fp]
 801126a:	e52e      	b.n	8010cca <_dtoa_r+0x49a>
 801126c:	4628      	mov	r0, r5
 801126e:	e7b9      	b.n	80111e4 <_dtoa_r+0x9b4>
 8011270:	2201      	movs	r2, #1
 8011272:	e7e2      	b.n	801123a <_dtoa_r+0xa0a>
 8011274:	9904      	ldr	r1, [sp, #16]
 8011276:	2900      	cmp	r1, #0
 8011278:	db04      	blt.n	8011284 <_dtoa_r+0xa54>
 801127a:	9807      	ldr	r0, [sp, #28]
 801127c:	4301      	orrs	r1, r0
 801127e:	9806      	ldr	r0, [sp, #24]
 8011280:	4301      	orrs	r1, r0
 8011282:	d120      	bne.n	80112c6 <_dtoa_r+0xa96>
 8011284:	2a00      	cmp	r2, #0
 8011286:	ddee      	ble.n	8011266 <_dtoa_r+0xa36>
 8011288:	9902      	ldr	r1, [sp, #8]
 801128a:	9300      	str	r3, [sp, #0]
 801128c:	2201      	movs	r2, #1
 801128e:	4648      	mov	r0, r9
 8011290:	f000 fbee 	bl	8011a70 <__lshift>
 8011294:	4621      	mov	r1, r4
 8011296:	9002      	str	r0, [sp, #8]
 8011298:	f000 fc56 	bl	8011b48 <__mcmp>
 801129c:	2800      	cmp	r0, #0
 801129e:	9b00      	ldr	r3, [sp, #0]
 80112a0:	dc02      	bgt.n	80112a8 <_dtoa_r+0xa78>
 80112a2:	d1e0      	bne.n	8011266 <_dtoa_r+0xa36>
 80112a4:	07da      	lsls	r2, r3, #31
 80112a6:	d5de      	bpl.n	8011266 <_dtoa_r+0xa36>
 80112a8:	2b39      	cmp	r3, #57	@ 0x39
 80112aa:	d1da      	bne.n	8011262 <_dtoa_r+0xa32>
 80112ac:	2339      	movs	r3, #57	@ 0x39
 80112ae:	f88b 3000 	strb.w	r3, [fp]
 80112b2:	4633      	mov	r3, r6
 80112b4:	461e      	mov	r6, r3
 80112b6:	3b01      	subs	r3, #1
 80112b8:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80112bc:	2a39      	cmp	r2, #57	@ 0x39
 80112be:	d04e      	beq.n	801135e <_dtoa_r+0xb2e>
 80112c0:	3201      	adds	r2, #1
 80112c2:	701a      	strb	r2, [r3, #0]
 80112c4:	e501      	b.n	8010cca <_dtoa_r+0x49a>
 80112c6:	2a00      	cmp	r2, #0
 80112c8:	dd03      	ble.n	80112d2 <_dtoa_r+0xaa2>
 80112ca:	2b39      	cmp	r3, #57	@ 0x39
 80112cc:	d0ee      	beq.n	80112ac <_dtoa_r+0xa7c>
 80112ce:	3301      	adds	r3, #1
 80112d0:	e7c9      	b.n	8011266 <_dtoa_r+0xa36>
 80112d2:	9a00      	ldr	r2, [sp, #0]
 80112d4:	9908      	ldr	r1, [sp, #32]
 80112d6:	f802 3c01 	strb.w	r3, [r2, #-1]
 80112da:	428a      	cmp	r2, r1
 80112dc:	d028      	beq.n	8011330 <_dtoa_r+0xb00>
 80112de:	9902      	ldr	r1, [sp, #8]
 80112e0:	2300      	movs	r3, #0
 80112e2:	220a      	movs	r2, #10
 80112e4:	4648      	mov	r0, r9
 80112e6:	f000 f9d5 	bl	8011694 <__multadd>
 80112ea:	42af      	cmp	r7, r5
 80112ec:	9002      	str	r0, [sp, #8]
 80112ee:	f04f 0300 	mov.w	r3, #0
 80112f2:	f04f 020a 	mov.w	r2, #10
 80112f6:	4639      	mov	r1, r7
 80112f8:	4648      	mov	r0, r9
 80112fa:	d107      	bne.n	801130c <_dtoa_r+0xadc>
 80112fc:	f000 f9ca 	bl	8011694 <__multadd>
 8011300:	4607      	mov	r7, r0
 8011302:	4605      	mov	r5, r0
 8011304:	9b00      	ldr	r3, [sp, #0]
 8011306:	3301      	adds	r3, #1
 8011308:	9300      	str	r3, [sp, #0]
 801130a:	e777      	b.n	80111fc <_dtoa_r+0x9cc>
 801130c:	f000 f9c2 	bl	8011694 <__multadd>
 8011310:	4629      	mov	r1, r5
 8011312:	4607      	mov	r7, r0
 8011314:	2300      	movs	r3, #0
 8011316:	220a      	movs	r2, #10
 8011318:	4648      	mov	r0, r9
 801131a:	f000 f9bb 	bl	8011694 <__multadd>
 801131e:	4605      	mov	r5, r0
 8011320:	e7f0      	b.n	8011304 <_dtoa_r+0xad4>
 8011322:	f1bb 0f00 	cmp.w	fp, #0
 8011326:	bfcc      	ite	gt
 8011328:	465e      	movgt	r6, fp
 801132a:	2601      	movle	r6, #1
 801132c:	4456      	add	r6, sl
 801132e:	2700      	movs	r7, #0
 8011330:	9902      	ldr	r1, [sp, #8]
 8011332:	9300      	str	r3, [sp, #0]
 8011334:	2201      	movs	r2, #1
 8011336:	4648      	mov	r0, r9
 8011338:	f000 fb9a 	bl	8011a70 <__lshift>
 801133c:	4621      	mov	r1, r4
 801133e:	9002      	str	r0, [sp, #8]
 8011340:	f000 fc02 	bl	8011b48 <__mcmp>
 8011344:	2800      	cmp	r0, #0
 8011346:	dcb4      	bgt.n	80112b2 <_dtoa_r+0xa82>
 8011348:	d102      	bne.n	8011350 <_dtoa_r+0xb20>
 801134a:	9b00      	ldr	r3, [sp, #0]
 801134c:	07db      	lsls	r3, r3, #31
 801134e:	d4b0      	bmi.n	80112b2 <_dtoa_r+0xa82>
 8011350:	4633      	mov	r3, r6
 8011352:	461e      	mov	r6, r3
 8011354:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8011358:	2a30      	cmp	r2, #48	@ 0x30
 801135a:	d0fa      	beq.n	8011352 <_dtoa_r+0xb22>
 801135c:	e4b5      	b.n	8010cca <_dtoa_r+0x49a>
 801135e:	459a      	cmp	sl, r3
 8011360:	d1a8      	bne.n	80112b4 <_dtoa_r+0xa84>
 8011362:	2331      	movs	r3, #49	@ 0x31
 8011364:	f108 0801 	add.w	r8, r8, #1
 8011368:	f88a 3000 	strb.w	r3, [sl]
 801136c:	e4ad      	b.n	8010cca <_dtoa_r+0x49a>
 801136e:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8011370:	f8df a058 	ldr.w	sl, [pc, #88]	@ 80113cc <_dtoa_r+0xb9c>
 8011374:	b11b      	cbz	r3, 801137e <_dtoa_r+0xb4e>
 8011376:	f10a 0308 	add.w	r3, sl, #8
 801137a:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 801137c:	6013      	str	r3, [r2, #0]
 801137e:	4650      	mov	r0, sl
 8011380:	b017      	add	sp, #92	@ 0x5c
 8011382:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011386:	9b07      	ldr	r3, [sp, #28]
 8011388:	2b01      	cmp	r3, #1
 801138a:	f77f ae2e 	ble.w	8010fea <_dtoa_r+0x7ba>
 801138e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8011390:	9308      	str	r3, [sp, #32]
 8011392:	2001      	movs	r0, #1
 8011394:	e64d      	b.n	8011032 <_dtoa_r+0x802>
 8011396:	f1bb 0f00 	cmp.w	fp, #0
 801139a:	f77f aed9 	ble.w	8011150 <_dtoa_r+0x920>
 801139e:	4656      	mov	r6, sl
 80113a0:	9802      	ldr	r0, [sp, #8]
 80113a2:	4621      	mov	r1, r4
 80113a4:	f7ff f9ba 	bl	801071c <quorem>
 80113a8:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 80113ac:	f806 3b01 	strb.w	r3, [r6], #1
 80113b0:	eba6 020a 	sub.w	r2, r6, sl
 80113b4:	4593      	cmp	fp, r2
 80113b6:	ddb4      	ble.n	8011322 <_dtoa_r+0xaf2>
 80113b8:	9902      	ldr	r1, [sp, #8]
 80113ba:	2300      	movs	r3, #0
 80113bc:	220a      	movs	r2, #10
 80113be:	4648      	mov	r0, r9
 80113c0:	f000 f968 	bl	8011694 <__multadd>
 80113c4:	9002      	str	r0, [sp, #8]
 80113c6:	e7eb      	b.n	80113a0 <_dtoa_r+0xb70>
 80113c8:	08015975 	.word	0x08015975
 80113cc:	080158f9 	.word	0x080158f9

080113d0 <_free_r>:
 80113d0:	b538      	push	{r3, r4, r5, lr}
 80113d2:	4605      	mov	r5, r0
 80113d4:	2900      	cmp	r1, #0
 80113d6:	d041      	beq.n	801145c <_free_r+0x8c>
 80113d8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80113dc:	1f0c      	subs	r4, r1, #4
 80113de:	2b00      	cmp	r3, #0
 80113e0:	bfb8      	it	lt
 80113e2:	18e4      	addlt	r4, r4, r3
 80113e4:	f000 f8e8 	bl	80115b8 <__malloc_lock>
 80113e8:	4a1d      	ldr	r2, [pc, #116]	@ (8011460 <_free_r+0x90>)
 80113ea:	6813      	ldr	r3, [r2, #0]
 80113ec:	b933      	cbnz	r3, 80113fc <_free_r+0x2c>
 80113ee:	6063      	str	r3, [r4, #4]
 80113f0:	6014      	str	r4, [r2, #0]
 80113f2:	4628      	mov	r0, r5
 80113f4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80113f8:	f000 b8e4 	b.w	80115c4 <__malloc_unlock>
 80113fc:	42a3      	cmp	r3, r4
 80113fe:	d908      	bls.n	8011412 <_free_r+0x42>
 8011400:	6820      	ldr	r0, [r4, #0]
 8011402:	1821      	adds	r1, r4, r0
 8011404:	428b      	cmp	r3, r1
 8011406:	bf01      	itttt	eq
 8011408:	6819      	ldreq	r1, [r3, #0]
 801140a:	685b      	ldreq	r3, [r3, #4]
 801140c:	1809      	addeq	r1, r1, r0
 801140e:	6021      	streq	r1, [r4, #0]
 8011410:	e7ed      	b.n	80113ee <_free_r+0x1e>
 8011412:	461a      	mov	r2, r3
 8011414:	685b      	ldr	r3, [r3, #4]
 8011416:	b10b      	cbz	r3, 801141c <_free_r+0x4c>
 8011418:	42a3      	cmp	r3, r4
 801141a:	d9fa      	bls.n	8011412 <_free_r+0x42>
 801141c:	6811      	ldr	r1, [r2, #0]
 801141e:	1850      	adds	r0, r2, r1
 8011420:	42a0      	cmp	r0, r4
 8011422:	d10b      	bne.n	801143c <_free_r+0x6c>
 8011424:	6820      	ldr	r0, [r4, #0]
 8011426:	4401      	add	r1, r0
 8011428:	1850      	adds	r0, r2, r1
 801142a:	4283      	cmp	r3, r0
 801142c:	6011      	str	r1, [r2, #0]
 801142e:	d1e0      	bne.n	80113f2 <_free_r+0x22>
 8011430:	6818      	ldr	r0, [r3, #0]
 8011432:	685b      	ldr	r3, [r3, #4]
 8011434:	6053      	str	r3, [r2, #4]
 8011436:	4408      	add	r0, r1
 8011438:	6010      	str	r0, [r2, #0]
 801143a:	e7da      	b.n	80113f2 <_free_r+0x22>
 801143c:	d902      	bls.n	8011444 <_free_r+0x74>
 801143e:	230c      	movs	r3, #12
 8011440:	602b      	str	r3, [r5, #0]
 8011442:	e7d6      	b.n	80113f2 <_free_r+0x22>
 8011444:	6820      	ldr	r0, [r4, #0]
 8011446:	1821      	adds	r1, r4, r0
 8011448:	428b      	cmp	r3, r1
 801144a:	bf04      	itt	eq
 801144c:	6819      	ldreq	r1, [r3, #0]
 801144e:	685b      	ldreq	r3, [r3, #4]
 8011450:	6063      	str	r3, [r4, #4]
 8011452:	bf04      	itt	eq
 8011454:	1809      	addeq	r1, r1, r0
 8011456:	6021      	streq	r1, [r4, #0]
 8011458:	6054      	str	r4, [r2, #4]
 801145a:	e7ca      	b.n	80113f2 <_free_r+0x22>
 801145c:	bd38      	pop	{r3, r4, r5, pc}
 801145e:	bf00      	nop
 8011460:	20016530 	.word	0x20016530

08011464 <malloc>:
 8011464:	4b02      	ldr	r3, [pc, #8]	@ (8011470 <malloc+0xc>)
 8011466:	4601      	mov	r1, r0
 8011468:	6818      	ldr	r0, [r3, #0]
 801146a:	f000 b825 	b.w	80114b8 <_malloc_r>
 801146e:	bf00      	nop
 8011470:	2000d140 	.word	0x2000d140

08011474 <sbrk_aligned>:
 8011474:	b570      	push	{r4, r5, r6, lr}
 8011476:	4e0f      	ldr	r6, [pc, #60]	@ (80114b4 <sbrk_aligned+0x40>)
 8011478:	460c      	mov	r4, r1
 801147a:	6831      	ldr	r1, [r6, #0]
 801147c:	4605      	mov	r5, r0
 801147e:	b911      	cbnz	r1, 8011486 <sbrk_aligned+0x12>
 8011480:	f001 ff30 	bl	80132e4 <_sbrk_r>
 8011484:	6030      	str	r0, [r6, #0]
 8011486:	4621      	mov	r1, r4
 8011488:	4628      	mov	r0, r5
 801148a:	f001 ff2b 	bl	80132e4 <_sbrk_r>
 801148e:	1c43      	adds	r3, r0, #1
 8011490:	d103      	bne.n	801149a <sbrk_aligned+0x26>
 8011492:	f04f 34ff 	mov.w	r4, #4294967295
 8011496:	4620      	mov	r0, r4
 8011498:	bd70      	pop	{r4, r5, r6, pc}
 801149a:	1cc4      	adds	r4, r0, #3
 801149c:	f024 0403 	bic.w	r4, r4, #3
 80114a0:	42a0      	cmp	r0, r4
 80114a2:	d0f8      	beq.n	8011496 <sbrk_aligned+0x22>
 80114a4:	1a21      	subs	r1, r4, r0
 80114a6:	4628      	mov	r0, r5
 80114a8:	f001 ff1c 	bl	80132e4 <_sbrk_r>
 80114ac:	3001      	adds	r0, #1
 80114ae:	d1f2      	bne.n	8011496 <sbrk_aligned+0x22>
 80114b0:	e7ef      	b.n	8011492 <sbrk_aligned+0x1e>
 80114b2:	bf00      	nop
 80114b4:	2001652c 	.word	0x2001652c

080114b8 <_malloc_r>:
 80114b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80114bc:	1ccd      	adds	r5, r1, #3
 80114be:	f025 0503 	bic.w	r5, r5, #3
 80114c2:	3508      	adds	r5, #8
 80114c4:	2d0c      	cmp	r5, #12
 80114c6:	bf38      	it	cc
 80114c8:	250c      	movcc	r5, #12
 80114ca:	2d00      	cmp	r5, #0
 80114cc:	4606      	mov	r6, r0
 80114ce:	db01      	blt.n	80114d4 <_malloc_r+0x1c>
 80114d0:	42a9      	cmp	r1, r5
 80114d2:	d904      	bls.n	80114de <_malloc_r+0x26>
 80114d4:	230c      	movs	r3, #12
 80114d6:	6033      	str	r3, [r6, #0]
 80114d8:	2000      	movs	r0, #0
 80114da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80114de:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80115b4 <_malloc_r+0xfc>
 80114e2:	f000 f869 	bl	80115b8 <__malloc_lock>
 80114e6:	f8d8 3000 	ldr.w	r3, [r8]
 80114ea:	461c      	mov	r4, r3
 80114ec:	bb44      	cbnz	r4, 8011540 <_malloc_r+0x88>
 80114ee:	4629      	mov	r1, r5
 80114f0:	4630      	mov	r0, r6
 80114f2:	f7ff ffbf 	bl	8011474 <sbrk_aligned>
 80114f6:	1c43      	adds	r3, r0, #1
 80114f8:	4604      	mov	r4, r0
 80114fa:	d158      	bne.n	80115ae <_malloc_r+0xf6>
 80114fc:	f8d8 4000 	ldr.w	r4, [r8]
 8011500:	4627      	mov	r7, r4
 8011502:	2f00      	cmp	r7, #0
 8011504:	d143      	bne.n	801158e <_malloc_r+0xd6>
 8011506:	2c00      	cmp	r4, #0
 8011508:	d04b      	beq.n	80115a2 <_malloc_r+0xea>
 801150a:	6823      	ldr	r3, [r4, #0]
 801150c:	4639      	mov	r1, r7
 801150e:	4630      	mov	r0, r6
 8011510:	eb04 0903 	add.w	r9, r4, r3
 8011514:	f001 fee6 	bl	80132e4 <_sbrk_r>
 8011518:	4581      	cmp	r9, r0
 801151a:	d142      	bne.n	80115a2 <_malloc_r+0xea>
 801151c:	6821      	ldr	r1, [r4, #0]
 801151e:	1a6d      	subs	r5, r5, r1
 8011520:	4629      	mov	r1, r5
 8011522:	4630      	mov	r0, r6
 8011524:	f7ff ffa6 	bl	8011474 <sbrk_aligned>
 8011528:	3001      	adds	r0, #1
 801152a:	d03a      	beq.n	80115a2 <_malloc_r+0xea>
 801152c:	6823      	ldr	r3, [r4, #0]
 801152e:	442b      	add	r3, r5
 8011530:	6023      	str	r3, [r4, #0]
 8011532:	f8d8 3000 	ldr.w	r3, [r8]
 8011536:	685a      	ldr	r2, [r3, #4]
 8011538:	bb62      	cbnz	r2, 8011594 <_malloc_r+0xdc>
 801153a:	f8c8 7000 	str.w	r7, [r8]
 801153e:	e00f      	b.n	8011560 <_malloc_r+0xa8>
 8011540:	6822      	ldr	r2, [r4, #0]
 8011542:	1b52      	subs	r2, r2, r5
 8011544:	d420      	bmi.n	8011588 <_malloc_r+0xd0>
 8011546:	2a0b      	cmp	r2, #11
 8011548:	d917      	bls.n	801157a <_malloc_r+0xc2>
 801154a:	1961      	adds	r1, r4, r5
 801154c:	42a3      	cmp	r3, r4
 801154e:	6025      	str	r5, [r4, #0]
 8011550:	bf18      	it	ne
 8011552:	6059      	strne	r1, [r3, #4]
 8011554:	6863      	ldr	r3, [r4, #4]
 8011556:	bf08      	it	eq
 8011558:	f8c8 1000 	streq.w	r1, [r8]
 801155c:	5162      	str	r2, [r4, r5]
 801155e:	604b      	str	r3, [r1, #4]
 8011560:	4630      	mov	r0, r6
 8011562:	f000 f82f 	bl	80115c4 <__malloc_unlock>
 8011566:	f104 000b 	add.w	r0, r4, #11
 801156a:	1d23      	adds	r3, r4, #4
 801156c:	f020 0007 	bic.w	r0, r0, #7
 8011570:	1ac2      	subs	r2, r0, r3
 8011572:	bf1c      	itt	ne
 8011574:	1a1b      	subne	r3, r3, r0
 8011576:	50a3      	strne	r3, [r4, r2]
 8011578:	e7af      	b.n	80114da <_malloc_r+0x22>
 801157a:	6862      	ldr	r2, [r4, #4]
 801157c:	42a3      	cmp	r3, r4
 801157e:	bf0c      	ite	eq
 8011580:	f8c8 2000 	streq.w	r2, [r8]
 8011584:	605a      	strne	r2, [r3, #4]
 8011586:	e7eb      	b.n	8011560 <_malloc_r+0xa8>
 8011588:	4623      	mov	r3, r4
 801158a:	6864      	ldr	r4, [r4, #4]
 801158c:	e7ae      	b.n	80114ec <_malloc_r+0x34>
 801158e:	463c      	mov	r4, r7
 8011590:	687f      	ldr	r7, [r7, #4]
 8011592:	e7b6      	b.n	8011502 <_malloc_r+0x4a>
 8011594:	461a      	mov	r2, r3
 8011596:	685b      	ldr	r3, [r3, #4]
 8011598:	42a3      	cmp	r3, r4
 801159a:	d1fb      	bne.n	8011594 <_malloc_r+0xdc>
 801159c:	2300      	movs	r3, #0
 801159e:	6053      	str	r3, [r2, #4]
 80115a0:	e7de      	b.n	8011560 <_malloc_r+0xa8>
 80115a2:	230c      	movs	r3, #12
 80115a4:	6033      	str	r3, [r6, #0]
 80115a6:	4630      	mov	r0, r6
 80115a8:	f000 f80c 	bl	80115c4 <__malloc_unlock>
 80115ac:	e794      	b.n	80114d8 <_malloc_r+0x20>
 80115ae:	6005      	str	r5, [r0, #0]
 80115b0:	e7d6      	b.n	8011560 <_malloc_r+0xa8>
 80115b2:	bf00      	nop
 80115b4:	20016530 	.word	0x20016530

080115b8 <__malloc_lock>:
 80115b8:	4801      	ldr	r0, [pc, #4]	@ (80115c0 <__malloc_lock+0x8>)
 80115ba:	f7ff b87a 	b.w	80106b2 <__retarget_lock_acquire_recursive>
 80115be:	bf00      	nop
 80115c0:	20016528 	.word	0x20016528

080115c4 <__malloc_unlock>:
 80115c4:	4801      	ldr	r0, [pc, #4]	@ (80115cc <__malloc_unlock+0x8>)
 80115c6:	f7ff b875 	b.w	80106b4 <__retarget_lock_release_recursive>
 80115ca:	bf00      	nop
 80115cc:	20016528 	.word	0x20016528

080115d0 <_Balloc>:
 80115d0:	b570      	push	{r4, r5, r6, lr}
 80115d2:	69c6      	ldr	r6, [r0, #28]
 80115d4:	4604      	mov	r4, r0
 80115d6:	460d      	mov	r5, r1
 80115d8:	b976      	cbnz	r6, 80115f8 <_Balloc+0x28>
 80115da:	2010      	movs	r0, #16
 80115dc:	f7ff ff42 	bl	8011464 <malloc>
 80115e0:	4602      	mov	r2, r0
 80115e2:	61e0      	str	r0, [r4, #28]
 80115e4:	b920      	cbnz	r0, 80115f0 <_Balloc+0x20>
 80115e6:	4b18      	ldr	r3, [pc, #96]	@ (8011648 <_Balloc+0x78>)
 80115e8:	4818      	ldr	r0, [pc, #96]	@ (801164c <_Balloc+0x7c>)
 80115ea:	216b      	movs	r1, #107	@ 0x6b
 80115ec:	f7ff f878 	bl	80106e0 <__assert_func>
 80115f0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80115f4:	6006      	str	r6, [r0, #0]
 80115f6:	60c6      	str	r6, [r0, #12]
 80115f8:	69e6      	ldr	r6, [r4, #28]
 80115fa:	68f3      	ldr	r3, [r6, #12]
 80115fc:	b183      	cbz	r3, 8011620 <_Balloc+0x50>
 80115fe:	69e3      	ldr	r3, [r4, #28]
 8011600:	68db      	ldr	r3, [r3, #12]
 8011602:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8011606:	b9b8      	cbnz	r0, 8011638 <_Balloc+0x68>
 8011608:	2101      	movs	r1, #1
 801160a:	fa01 f605 	lsl.w	r6, r1, r5
 801160e:	1d72      	adds	r2, r6, #5
 8011610:	0092      	lsls	r2, r2, #2
 8011612:	4620      	mov	r0, r4
 8011614:	f001 fe87 	bl	8013326 <_calloc_r>
 8011618:	b160      	cbz	r0, 8011634 <_Balloc+0x64>
 801161a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801161e:	e00e      	b.n	801163e <_Balloc+0x6e>
 8011620:	2221      	movs	r2, #33	@ 0x21
 8011622:	2104      	movs	r1, #4
 8011624:	4620      	mov	r0, r4
 8011626:	f001 fe7e 	bl	8013326 <_calloc_r>
 801162a:	69e3      	ldr	r3, [r4, #28]
 801162c:	60f0      	str	r0, [r6, #12]
 801162e:	68db      	ldr	r3, [r3, #12]
 8011630:	2b00      	cmp	r3, #0
 8011632:	d1e4      	bne.n	80115fe <_Balloc+0x2e>
 8011634:	2000      	movs	r0, #0
 8011636:	bd70      	pop	{r4, r5, r6, pc}
 8011638:	6802      	ldr	r2, [r0, #0]
 801163a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801163e:	2300      	movs	r3, #0
 8011640:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8011644:	e7f7      	b.n	8011636 <_Balloc+0x66>
 8011646:	bf00      	nop
 8011648:	08015906 	.word	0x08015906
 801164c:	08015986 	.word	0x08015986

08011650 <_Bfree>:
 8011650:	b570      	push	{r4, r5, r6, lr}
 8011652:	69c6      	ldr	r6, [r0, #28]
 8011654:	4605      	mov	r5, r0
 8011656:	460c      	mov	r4, r1
 8011658:	b976      	cbnz	r6, 8011678 <_Bfree+0x28>
 801165a:	2010      	movs	r0, #16
 801165c:	f7ff ff02 	bl	8011464 <malloc>
 8011660:	4602      	mov	r2, r0
 8011662:	61e8      	str	r0, [r5, #28]
 8011664:	b920      	cbnz	r0, 8011670 <_Bfree+0x20>
 8011666:	4b09      	ldr	r3, [pc, #36]	@ (801168c <_Bfree+0x3c>)
 8011668:	4809      	ldr	r0, [pc, #36]	@ (8011690 <_Bfree+0x40>)
 801166a:	218f      	movs	r1, #143	@ 0x8f
 801166c:	f7ff f838 	bl	80106e0 <__assert_func>
 8011670:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8011674:	6006      	str	r6, [r0, #0]
 8011676:	60c6      	str	r6, [r0, #12]
 8011678:	b13c      	cbz	r4, 801168a <_Bfree+0x3a>
 801167a:	69eb      	ldr	r3, [r5, #28]
 801167c:	6862      	ldr	r2, [r4, #4]
 801167e:	68db      	ldr	r3, [r3, #12]
 8011680:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8011684:	6021      	str	r1, [r4, #0]
 8011686:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801168a:	bd70      	pop	{r4, r5, r6, pc}
 801168c:	08015906 	.word	0x08015906
 8011690:	08015986 	.word	0x08015986

08011694 <__multadd>:
 8011694:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011698:	690d      	ldr	r5, [r1, #16]
 801169a:	4607      	mov	r7, r0
 801169c:	460c      	mov	r4, r1
 801169e:	461e      	mov	r6, r3
 80116a0:	f101 0c14 	add.w	ip, r1, #20
 80116a4:	2000      	movs	r0, #0
 80116a6:	f8dc 3000 	ldr.w	r3, [ip]
 80116aa:	b299      	uxth	r1, r3
 80116ac:	fb02 6101 	mla	r1, r2, r1, r6
 80116b0:	0c1e      	lsrs	r6, r3, #16
 80116b2:	0c0b      	lsrs	r3, r1, #16
 80116b4:	fb02 3306 	mla	r3, r2, r6, r3
 80116b8:	b289      	uxth	r1, r1
 80116ba:	3001      	adds	r0, #1
 80116bc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80116c0:	4285      	cmp	r5, r0
 80116c2:	f84c 1b04 	str.w	r1, [ip], #4
 80116c6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80116ca:	dcec      	bgt.n	80116a6 <__multadd+0x12>
 80116cc:	b30e      	cbz	r6, 8011712 <__multadd+0x7e>
 80116ce:	68a3      	ldr	r3, [r4, #8]
 80116d0:	42ab      	cmp	r3, r5
 80116d2:	dc19      	bgt.n	8011708 <__multadd+0x74>
 80116d4:	6861      	ldr	r1, [r4, #4]
 80116d6:	4638      	mov	r0, r7
 80116d8:	3101      	adds	r1, #1
 80116da:	f7ff ff79 	bl	80115d0 <_Balloc>
 80116de:	4680      	mov	r8, r0
 80116e0:	b928      	cbnz	r0, 80116ee <__multadd+0x5a>
 80116e2:	4602      	mov	r2, r0
 80116e4:	4b0c      	ldr	r3, [pc, #48]	@ (8011718 <__multadd+0x84>)
 80116e6:	480d      	ldr	r0, [pc, #52]	@ (801171c <__multadd+0x88>)
 80116e8:	21ba      	movs	r1, #186	@ 0xba
 80116ea:	f7fe fff9 	bl	80106e0 <__assert_func>
 80116ee:	6922      	ldr	r2, [r4, #16]
 80116f0:	3202      	adds	r2, #2
 80116f2:	f104 010c 	add.w	r1, r4, #12
 80116f6:	0092      	lsls	r2, r2, #2
 80116f8:	300c      	adds	r0, #12
 80116fa:	f7fe ffdc 	bl	80106b6 <memcpy>
 80116fe:	4621      	mov	r1, r4
 8011700:	4638      	mov	r0, r7
 8011702:	f7ff ffa5 	bl	8011650 <_Bfree>
 8011706:	4644      	mov	r4, r8
 8011708:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 801170c:	3501      	adds	r5, #1
 801170e:	615e      	str	r6, [r3, #20]
 8011710:	6125      	str	r5, [r4, #16]
 8011712:	4620      	mov	r0, r4
 8011714:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011718:	08015975 	.word	0x08015975
 801171c:	08015986 	.word	0x08015986

08011720 <__s2b>:
 8011720:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011724:	460c      	mov	r4, r1
 8011726:	4615      	mov	r5, r2
 8011728:	461f      	mov	r7, r3
 801172a:	2209      	movs	r2, #9
 801172c:	3308      	adds	r3, #8
 801172e:	4606      	mov	r6, r0
 8011730:	fb93 f3f2 	sdiv	r3, r3, r2
 8011734:	2100      	movs	r1, #0
 8011736:	2201      	movs	r2, #1
 8011738:	429a      	cmp	r2, r3
 801173a:	db09      	blt.n	8011750 <__s2b+0x30>
 801173c:	4630      	mov	r0, r6
 801173e:	f7ff ff47 	bl	80115d0 <_Balloc>
 8011742:	b940      	cbnz	r0, 8011756 <__s2b+0x36>
 8011744:	4602      	mov	r2, r0
 8011746:	4b19      	ldr	r3, [pc, #100]	@ (80117ac <__s2b+0x8c>)
 8011748:	4819      	ldr	r0, [pc, #100]	@ (80117b0 <__s2b+0x90>)
 801174a:	21d3      	movs	r1, #211	@ 0xd3
 801174c:	f7fe ffc8 	bl	80106e0 <__assert_func>
 8011750:	0052      	lsls	r2, r2, #1
 8011752:	3101      	adds	r1, #1
 8011754:	e7f0      	b.n	8011738 <__s2b+0x18>
 8011756:	9b08      	ldr	r3, [sp, #32]
 8011758:	6143      	str	r3, [r0, #20]
 801175a:	2d09      	cmp	r5, #9
 801175c:	f04f 0301 	mov.w	r3, #1
 8011760:	6103      	str	r3, [r0, #16]
 8011762:	dd16      	ble.n	8011792 <__s2b+0x72>
 8011764:	f104 0909 	add.w	r9, r4, #9
 8011768:	46c8      	mov	r8, r9
 801176a:	442c      	add	r4, r5
 801176c:	f818 3b01 	ldrb.w	r3, [r8], #1
 8011770:	4601      	mov	r1, r0
 8011772:	3b30      	subs	r3, #48	@ 0x30
 8011774:	220a      	movs	r2, #10
 8011776:	4630      	mov	r0, r6
 8011778:	f7ff ff8c 	bl	8011694 <__multadd>
 801177c:	45a0      	cmp	r8, r4
 801177e:	d1f5      	bne.n	801176c <__s2b+0x4c>
 8011780:	f1a5 0408 	sub.w	r4, r5, #8
 8011784:	444c      	add	r4, r9
 8011786:	1b2d      	subs	r5, r5, r4
 8011788:	1963      	adds	r3, r4, r5
 801178a:	42bb      	cmp	r3, r7
 801178c:	db04      	blt.n	8011798 <__s2b+0x78>
 801178e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011792:	340a      	adds	r4, #10
 8011794:	2509      	movs	r5, #9
 8011796:	e7f6      	b.n	8011786 <__s2b+0x66>
 8011798:	f814 3b01 	ldrb.w	r3, [r4], #1
 801179c:	4601      	mov	r1, r0
 801179e:	3b30      	subs	r3, #48	@ 0x30
 80117a0:	220a      	movs	r2, #10
 80117a2:	4630      	mov	r0, r6
 80117a4:	f7ff ff76 	bl	8011694 <__multadd>
 80117a8:	e7ee      	b.n	8011788 <__s2b+0x68>
 80117aa:	bf00      	nop
 80117ac:	08015975 	.word	0x08015975
 80117b0:	08015986 	.word	0x08015986

080117b4 <__hi0bits>:
 80117b4:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80117b8:	4603      	mov	r3, r0
 80117ba:	bf36      	itet	cc
 80117bc:	0403      	lslcc	r3, r0, #16
 80117be:	2000      	movcs	r0, #0
 80117c0:	2010      	movcc	r0, #16
 80117c2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80117c6:	bf3c      	itt	cc
 80117c8:	021b      	lslcc	r3, r3, #8
 80117ca:	3008      	addcc	r0, #8
 80117cc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80117d0:	bf3c      	itt	cc
 80117d2:	011b      	lslcc	r3, r3, #4
 80117d4:	3004      	addcc	r0, #4
 80117d6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80117da:	bf3c      	itt	cc
 80117dc:	009b      	lslcc	r3, r3, #2
 80117de:	3002      	addcc	r0, #2
 80117e0:	2b00      	cmp	r3, #0
 80117e2:	db05      	blt.n	80117f0 <__hi0bits+0x3c>
 80117e4:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 80117e8:	f100 0001 	add.w	r0, r0, #1
 80117ec:	bf08      	it	eq
 80117ee:	2020      	moveq	r0, #32
 80117f0:	4770      	bx	lr

080117f2 <__lo0bits>:
 80117f2:	6803      	ldr	r3, [r0, #0]
 80117f4:	4602      	mov	r2, r0
 80117f6:	f013 0007 	ands.w	r0, r3, #7
 80117fa:	d00b      	beq.n	8011814 <__lo0bits+0x22>
 80117fc:	07d9      	lsls	r1, r3, #31
 80117fe:	d421      	bmi.n	8011844 <__lo0bits+0x52>
 8011800:	0798      	lsls	r0, r3, #30
 8011802:	bf49      	itett	mi
 8011804:	085b      	lsrmi	r3, r3, #1
 8011806:	089b      	lsrpl	r3, r3, #2
 8011808:	2001      	movmi	r0, #1
 801180a:	6013      	strmi	r3, [r2, #0]
 801180c:	bf5c      	itt	pl
 801180e:	6013      	strpl	r3, [r2, #0]
 8011810:	2002      	movpl	r0, #2
 8011812:	4770      	bx	lr
 8011814:	b299      	uxth	r1, r3
 8011816:	b909      	cbnz	r1, 801181c <__lo0bits+0x2a>
 8011818:	0c1b      	lsrs	r3, r3, #16
 801181a:	2010      	movs	r0, #16
 801181c:	b2d9      	uxtb	r1, r3
 801181e:	b909      	cbnz	r1, 8011824 <__lo0bits+0x32>
 8011820:	3008      	adds	r0, #8
 8011822:	0a1b      	lsrs	r3, r3, #8
 8011824:	0719      	lsls	r1, r3, #28
 8011826:	bf04      	itt	eq
 8011828:	091b      	lsreq	r3, r3, #4
 801182a:	3004      	addeq	r0, #4
 801182c:	0799      	lsls	r1, r3, #30
 801182e:	bf04      	itt	eq
 8011830:	089b      	lsreq	r3, r3, #2
 8011832:	3002      	addeq	r0, #2
 8011834:	07d9      	lsls	r1, r3, #31
 8011836:	d403      	bmi.n	8011840 <__lo0bits+0x4e>
 8011838:	085b      	lsrs	r3, r3, #1
 801183a:	f100 0001 	add.w	r0, r0, #1
 801183e:	d003      	beq.n	8011848 <__lo0bits+0x56>
 8011840:	6013      	str	r3, [r2, #0]
 8011842:	4770      	bx	lr
 8011844:	2000      	movs	r0, #0
 8011846:	4770      	bx	lr
 8011848:	2020      	movs	r0, #32
 801184a:	4770      	bx	lr

0801184c <__i2b>:
 801184c:	b510      	push	{r4, lr}
 801184e:	460c      	mov	r4, r1
 8011850:	2101      	movs	r1, #1
 8011852:	f7ff febd 	bl	80115d0 <_Balloc>
 8011856:	4602      	mov	r2, r0
 8011858:	b928      	cbnz	r0, 8011866 <__i2b+0x1a>
 801185a:	4b05      	ldr	r3, [pc, #20]	@ (8011870 <__i2b+0x24>)
 801185c:	4805      	ldr	r0, [pc, #20]	@ (8011874 <__i2b+0x28>)
 801185e:	f240 1145 	movw	r1, #325	@ 0x145
 8011862:	f7fe ff3d 	bl	80106e0 <__assert_func>
 8011866:	2301      	movs	r3, #1
 8011868:	6144      	str	r4, [r0, #20]
 801186a:	6103      	str	r3, [r0, #16]
 801186c:	bd10      	pop	{r4, pc}
 801186e:	bf00      	nop
 8011870:	08015975 	.word	0x08015975
 8011874:	08015986 	.word	0x08015986

08011878 <__multiply>:
 8011878:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801187c:	4617      	mov	r7, r2
 801187e:	690a      	ldr	r2, [r1, #16]
 8011880:	693b      	ldr	r3, [r7, #16]
 8011882:	429a      	cmp	r2, r3
 8011884:	bfa8      	it	ge
 8011886:	463b      	movge	r3, r7
 8011888:	4689      	mov	r9, r1
 801188a:	bfa4      	itt	ge
 801188c:	460f      	movge	r7, r1
 801188e:	4699      	movge	r9, r3
 8011890:	693d      	ldr	r5, [r7, #16]
 8011892:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8011896:	68bb      	ldr	r3, [r7, #8]
 8011898:	6879      	ldr	r1, [r7, #4]
 801189a:	eb05 060a 	add.w	r6, r5, sl
 801189e:	42b3      	cmp	r3, r6
 80118a0:	b085      	sub	sp, #20
 80118a2:	bfb8      	it	lt
 80118a4:	3101      	addlt	r1, #1
 80118a6:	f7ff fe93 	bl	80115d0 <_Balloc>
 80118aa:	b930      	cbnz	r0, 80118ba <__multiply+0x42>
 80118ac:	4602      	mov	r2, r0
 80118ae:	4b41      	ldr	r3, [pc, #260]	@ (80119b4 <__multiply+0x13c>)
 80118b0:	4841      	ldr	r0, [pc, #260]	@ (80119b8 <__multiply+0x140>)
 80118b2:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 80118b6:	f7fe ff13 	bl	80106e0 <__assert_func>
 80118ba:	f100 0414 	add.w	r4, r0, #20
 80118be:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 80118c2:	4623      	mov	r3, r4
 80118c4:	2200      	movs	r2, #0
 80118c6:	4573      	cmp	r3, lr
 80118c8:	d320      	bcc.n	801190c <__multiply+0x94>
 80118ca:	f107 0814 	add.w	r8, r7, #20
 80118ce:	f109 0114 	add.w	r1, r9, #20
 80118d2:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 80118d6:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 80118da:	9302      	str	r3, [sp, #8]
 80118dc:	1beb      	subs	r3, r5, r7
 80118de:	3b15      	subs	r3, #21
 80118e0:	f023 0303 	bic.w	r3, r3, #3
 80118e4:	3304      	adds	r3, #4
 80118e6:	3715      	adds	r7, #21
 80118e8:	42bd      	cmp	r5, r7
 80118ea:	bf38      	it	cc
 80118ec:	2304      	movcc	r3, #4
 80118ee:	9301      	str	r3, [sp, #4]
 80118f0:	9b02      	ldr	r3, [sp, #8]
 80118f2:	9103      	str	r1, [sp, #12]
 80118f4:	428b      	cmp	r3, r1
 80118f6:	d80c      	bhi.n	8011912 <__multiply+0x9a>
 80118f8:	2e00      	cmp	r6, #0
 80118fa:	dd03      	ble.n	8011904 <__multiply+0x8c>
 80118fc:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8011900:	2b00      	cmp	r3, #0
 8011902:	d055      	beq.n	80119b0 <__multiply+0x138>
 8011904:	6106      	str	r6, [r0, #16]
 8011906:	b005      	add	sp, #20
 8011908:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801190c:	f843 2b04 	str.w	r2, [r3], #4
 8011910:	e7d9      	b.n	80118c6 <__multiply+0x4e>
 8011912:	f8b1 a000 	ldrh.w	sl, [r1]
 8011916:	f1ba 0f00 	cmp.w	sl, #0
 801191a:	d01f      	beq.n	801195c <__multiply+0xe4>
 801191c:	46c4      	mov	ip, r8
 801191e:	46a1      	mov	r9, r4
 8011920:	2700      	movs	r7, #0
 8011922:	f85c 2b04 	ldr.w	r2, [ip], #4
 8011926:	f8d9 3000 	ldr.w	r3, [r9]
 801192a:	fa1f fb82 	uxth.w	fp, r2
 801192e:	b29b      	uxth	r3, r3
 8011930:	fb0a 330b 	mla	r3, sl, fp, r3
 8011934:	443b      	add	r3, r7
 8011936:	f8d9 7000 	ldr.w	r7, [r9]
 801193a:	0c12      	lsrs	r2, r2, #16
 801193c:	0c3f      	lsrs	r7, r7, #16
 801193e:	fb0a 7202 	mla	r2, sl, r2, r7
 8011942:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 8011946:	b29b      	uxth	r3, r3
 8011948:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801194c:	4565      	cmp	r5, ip
 801194e:	f849 3b04 	str.w	r3, [r9], #4
 8011952:	ea4f 4712 	mov.w	r7, r2, lsr #16
 8011956:	d8e4      	bhi.n	8011922 <__multiply+0xaa>
 8011958:	9b01      	ldr	r3, [sp, #4]
 801195a:	50e7      	str	r7, [r4, r3]
 801195c:	9b03      	ldr	r3, [sp, #12]
 801195e:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8011962:	3104      	adds	r1, #4
 8011964:	f1b9 0f00 	cmp.w	r9, #0
 8011968:	d020      	beq.n	80119ac <__multiply+0x134>
 801196a:	6823      	ldr	r3, [r4, #0]
 801196c:	4647      	mov	r7, r8
 801196e:	46a4      	mov	ip, r4
 8011970:	f04f 0a00 	mov.w	sl, #0
 8011974:	f8b7 b000 	ldrh.w	fp, [r7]
 8011978:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 801197c:	fb09 220b 	mla	r2, r9, fp, r2
 8011980:	4452      	add	r2, sl
 8011982:	b29b      	uxth	r3, r3
 8011984:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8011988:	f84c 3b04 	str.w	r3, [ip], #4
 801198c:	f857 3b04 	ldr.w	r3, [r7], #4
 8011990:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8011994:	f8bc 3000 	ldrh.w	r3, [ip]
 8011998:	fb09 330a 	mla	r3, r9, sl, r3
 801199c:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 80119a0:	42bd      	cmp	r5, r7
 80119a2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80119a6:	d8e5      	bhi.n	8011974 <__multiply+0xfc>
 80119a8:	9a01      	ldr	r2, [sp, #4]
 80119aa:	50a3      	str	r3, [r4, r2]
 80119ac:	3404      	adds	r4, #4
 80119ae:	e79f      	b.n	80118f0 <__multiply+0x78>
 80119b0:	3e01      	subs	r6, #1
 80119b2:	e7a1      	b.n	80118f8 <__multiply+0x80>
 80119b4:	08015975 	.word	0x08015975
 80119b8:	08015986 	.word	0x08015986

080119bc <__pow5mult>:
 80119bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80119c0:	4615      	mov	r5, r2
 80119c2:	f012 0203 	ands.w	r2, r2, #3
 80119c6:	4607      	mov	r7, r0
 80119c8:	460e      	mov	r6, r1
 80119ca:	d007      	beq.n	80119dc <__pow5mult+0x20>
 80119cc:	4c25      	ldr	r4, [pc, #148]	@ (8011a64 <__pow5mult+0xa8>)
 80119ce:	3a01      	subs	r2, #1
 80119d0:	2300      	movs	r3, #0
 80119d2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80119d6:	f7ff fe5d 	bl	8011694 <__multadd>
 80119da:	4606      	mov	r6, r0
 80119dc:	10ad      	asrs	r5, r5, #2
 80119de:	d03d      	beq.n	8011a5c <__pow5mult+0xa0>
 80119e0:	69fc      	ldr	r4, [r7, #28]
 80119e2:	b97c      	cbnz	r4, 8011a04 <__pow5mult+0x48>
 80119e4:	2010      	movs	r0, #16
 80119e6:	f7ff fd3d 	bl	8011464 <malloc>
 80119ea:	4602      	mov	r2, r0
 80119ec:	61f8      	str	r0, [r7, #28]
 80119ee:	b928      	cbnz	r0, 80119fc <__pow5mult+0x40>
 80119f0:	4b1d      	ldr	r3, [pc, #116]	@ (8011a68 <__pow5mult+0xac>)
 80119f2:	481e      	ldr	r0, [pc, #120]	@ (8011a6c <__pow5mult+0xb0>)
 80119f4:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80119f8:	f7fe fe72 	bl	80106e0 <__assert_func>
 80119fc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8011a00:	6004      	str	r4, [r0, #0]
 8011a02:	60c4      	str	r4, [r0, #12]
 8011a04:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8011a08:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8011a0c:	b94c      	cbnz	r4, 8011a22 <__pow5mult+0x66>
 8011a0e:	f240 2171 	movw	r1, #625	@ 0x271
 8011a12:	4638      	mov	r0, r7
 8011a14:	f7ff ff1a 	bl	801184c <__i2b>
 8011a18:	2300      	movs	r3, #0
 8011a1a:	f8c8 0008 	str.w	r0, [r8, #8]
 8011a1e:	4604      	mov	r4, r0
 8011a20:	6003      	str	r3, [r0, #0]
 8011a22:	f04f 0900 	mov.w	r9, #0
 8011a26:	07eb      	lsls	r3, r5, #31
 8011a28:	d50a      	bpl.n	8011a40 <__pow5mult+0x84>
 8011a2a:	4631      	mov	r1, r6
 8011a2c:	4622      	mov	r2, r4
 8011a2e:	4638      	mov	r0, r7
 8011a30:	f7ff ff22 	bl	8011878 <__multiply>
 8011a34:	4631      	mov	r1, r6
 8011a36:	4680      	mov	r8, r0
 8011a38:	4638      	mov	r0, r7
 8011a3a:	f7ff fe09 	bl	8011650 <_Bfree>
 8011a3e:	4646      	mov	r6, r8
 8011a40:	106d      	asrs	r5, r5, #1
 8011a42:	d00b      	beq.n	8011a5c <__pow5mult+0xa0>
 8011a44:	6820      	ldr	r0, [r4, #0]
 8011a46:	b938      	cbnz	r0, 8011a58 <__pow5mult+0x9c>
 8011a48:	4622      	mov	r2, r4
 8011a4a:	4621      	mov	r1, r4
 8011a4c:	4638      	mov	r0, r7
 8011a4e:	f7ff ff13 	bl	8011878 <__multiply>
 8011a52:	6020      	str	r0, [r4, #0]
 8011a54:	f8c0 9000 	str.w	r9, [r0]
 8011a58:	4604      	mov	r4, r0
 8011a5a:	e7e4      	b.n	8011a26 <__pow5mult+0x6a>
 8011a5c:	4630      	mov	r0, r6
 8011a5e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011a62:	bf00      	nop
 8011a64:	08015a5c 	.word	0x08015a5c
 8011a68:	08015906 	.word	0x08015906
 8011a6c:	08015986 	.word	0x08015986

08011a70 <__lshift>:
 8011a70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011a74:	460c      	mov	r4, r1
 8011a76:	6849      	ldr	r1, [r1, #4]
 8011a78:	6923      	ldr	r3, [r4, #16]
 8011a7a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8011a7e:	68a3      	ldr	r3, [r4, #8]
 8011a80:	4607      	mov	r7, r0
 8011a82:	4691      	mov	r9, r2
 8011a84:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8011a88:	f108 0601 	add.w	r6, r8, #1
 8011a8c:	42b3      	cmp	r3, r6
 8011a8e:	db0b      	blt.n	8011aa8 <__lshift+0x38>
 8011a90:	4638      	mov	r0, r7
 8011a92:	f7ff fd9d 	bl	80115d0 <_Balloc>
 8011a96:	4605      	mov	r5, r0
 8011a98:	b948      	cbnz	r0, 8011aae <__lshift+0x3e>
 8011a9a:	4602      	mov	r2, r0
 8011a9c:	4b28      	ldr	r3, [pc, #160]	@ (8011b40 <__lshift+0xd0>)
 8011a9e:	4829      	ldr	r0, [pc, #164]	@ (8011b44 <__lshift+0xd4>)
 8011aa0:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8011aa4:	f7fe fe1c 	bl	80106e0 <__assert_func>
 8011aa8:	3101      	adds	r1, #1
 8011aaa:	005b      	lsls	r3, r3, #1
 8011aac:	e7ee      	b.n	8011a8c <__lshift+0x1c>
 8011aae:	2300      	movs	r3, #0
 8011ab0:	f100 0114 	add.w	r1, r0, #20
 8011ab4:	f100 0210 	add.w	r2, r0, #16
 8011ab8:	4618      	mov	r0, r3
 8011aba:	4553      	cmp	r3, sl
 8011abc:	db33      	blt.n	8011b26 <__lshift+0xb6>
 8011abe:	6920      	ldr	r0, [r4, #16]
 8011ac0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8011ac4:	f104 0314 	add.w	r3, r4, #20
 8011ac8:	f019 091f 	ands.w	r9, r9, #31
 8011acc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8011ad0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8011ad4:	d02b      	beq.n	8011b2e <__lshift+0xbe>
 8011ad6:	f1c9 0e20 	rsb	lr, r9, #32
 8011ada:	468a      	mov	sl, r1
 8011adc:	2200      	movs	r2, #0
 8011ade:	6818      	ldr	r0, [r3, #0]
 8011ae0:	fa00 f009 	lsl.w	r0, r0, r9
 8011ae4:	4310      	orrs	r0, r2
 8011ae6:	f84a 0b04 	str.w	r0, [sl], #4
 8011aea:	f853 2b04 	ldr.w	r2, [r3], #4
 8011aee:	459c      	cmp	ip, r3
 8011af0:	fa22 f20e 	lsr.w	r2, r2, lr
 8011af4:	d8f3      	bhi.n	8011ade <__lshift+0x6e>
 8011af6:	ebac 0304 	sub.w	r3, ip, r4
 8011afa:	3b15      	subs	r3, #21
 8011afc:	f023 0303 	bic.w	r3, r3, #3
 8011b00:	3304      	adds	r3, #4
 8011b02:	f104 0015 	add.w	r0, r4, #21
 8011b06:	4560      	cmp	r0, ip
 8011b08:	bf88      	it	hi
 8011b0a:	2304      	movhi	r3, #4
 8011b0c:	50ca      	str	r2, [r1, r3]
 8011b0e:	b10a      	cbz	r2, 8011b14 <__lshift+0xa4>
 8011b10:	f108 0602 	add.w	r6, r8, #2
 8011b14:	3e01      	subs	r6, #1
 8011b16:	4638      	mov	r0, r7
 8011b18:	612e      	str	r6, [r5, #16]
 8011b1a:	4621      	mov	r1, r4
 8011b1c:	f7ff fd98 	bl	8011650 <_Bfree>
 8011b20:	4628      	mov	r0, r5
 8011b22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011b26:	f842 0f04 	str.w	r0, [r2, #4]!
 8011b2a:	3301      	adds	r3, #1
 8011b2c:	e7c5      	b.n	8011aba <__lshift+0x4a>
 8011b2e:	3904      	subs	r1, #4
 8011b30:	f853 2b04 	ldr.w	r2, [r3], #4
 8011b34:	f841 2f04 	str.w	r2, [r1, #4]!
 8011b38:	459c      	cmp	ip, r3
 8011b3a:	d8f9      	bhi.n	8011b30 <__lshift+0xc0>
 8011b3c:	e7ea      	b.n	8011b14 <__lshift+0xa4>
 8011b3e:	bf00      	nop
 8011b40:	08015975 	.word	0x08015975
 8011b44:	08015986 	.word	0x08015986

08011b48 <__mcmp>:
 8011b48:	690a      	ldr	r2, [r1, #16]
 8011b4a:	4603      	mov	r3, r0
 8011b4c:	6900      	ldr	r0, [r0, #16]
 8011b4e:	1a80      	subs	r0, r0, r2
 8011b50:	b530      	push	{r4, r5, lr}
 8011b52:	d10e      	bne.n	8011b72 <__mcmp+0x2a>
 8011b54:	3314      	adds	r3, #20
 8011b56:	3114      	adds	r1, #20
 8011b58:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8011b5c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8011b60:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8011b64:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8011b68:	4295      	cmp	r5, r2
 8011b6a:	d003      	beq.n	8011b74 <__mcmp+0x2c>
 8011b6c:	d205      	bcs.n	8011b7a <__mcmp+0x32>
 8011b6e:	f04f 30ff 	mov.w	r0, #4294967295
 8011b72:	bd30      	pop	{r4, r5, pc}
 8011b74:	42a3      	cmp	r3, r4
 8011b76:	d3f3      	bcc.n	8011b60 <__mcmp+0x18>
 8011b78:	e7fb      	b.n	8011b72 <__mcmp+0x2a>
 8011b7a:	2001      	movs	r0, #1
 8011b7c:	e7f9      	b.n	8011b72 <__mcmp+0x2a>
	...

08011b80 <__mdiff>:
 8011b80:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011b84:	4689      	mov	r9, r1
 8011b86:	4606      	mov	r6, r0
 8011b88:	4611      	mov	r1, r2
 8011b8a:	4648      	mov	r0, r9
 8011b8c:	4614      	mov	r4, r2
 8011b8e:	f7ff ffdb 	bl	8011b48 <__mcmp>
 8011b92:	1e05      	subs	r5, r0, #0
 8011b94:	d112      	bne.n	8011bbc <__mdiff+0x3c>
 8011b96:	4629      	mov	r1, r5
 8011b98:	4630      	mov	r0, r6
 8011b9a:	f7ff fd19 	bl	80115d0 <_Balloc>
 8011b9e:	4602      	mov	r2, r0
 8011ba0:	b928      	cbnz	r0, 8011bae <__mdiff+0x2e>
 8011ba2:	4b3f      	ldr	r3, [pc, #252]	@ (8011ca0 <__mdiff+0x120>)
 8011ba4:	f240 2137 	movw	r1, #567	@ 0x237
 8011ba8:	483e      	ldr	r0, [pc, #248]	@ (8011ca4 <__mdiff+0x124>)
 8011baa:	f7fe fd99 	bl	80106e0 <__assert_func>
 8011bae:	2301      	movs	r3, #1
 8011bb0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8011bb4:	4610      	mov	r0, r2
 8011bb6:	b003      	add	sp, #12
 8011bb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011bbc:	bfbc      	itt	lt
 8011bbe:	464b      	movlt	r3, r9
 8011bc0:	46a1      	movlt	r9, r4
 8011bc2:	4630      	mov	r0, r6
 8011bc4:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8011bc8:	bfba      	itte	lt
 8011bca:	461c      	movlt	r4, r3
 8011bcc:	2501      	movlt	r5, #1
 8011bce:	2500      	movge	r5, #0
 8011bd0:	f7ff fcfe 	bl	80115d0 <_Balloc>
 8011bd4:	4602      	mov	r2, r0
 8011bd6:	b918      	cbnz	r0, 8011be0 <__mdiff+0x60>
 8011bd8:	4b31      	ldr	r3, [pc, #196]	@ (8011ca0 <__mdiff+0x120>)
 8011bda:	f240 2145 	movw	r1, #581	@ 0x245
 8011bde:	e7e3      	b.n	8011ba8 <__mdiff+0x28>
 8011be0:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8011be4:	6926      	ldr	r6, [r4, #16]
 8011be6:	60c5      	str	r5, [r0, #12]
 8011be8:	f109 0310 	add.w	r3, r9, #16
 8011bec:	f109 0514 	add.w	r5, r9, #20
 8011bf0:	f104 0e14 	add.w	lr, r4, #20
 8011bf4:	f100 0b14 	add.w	fp, r0, #20
 8011bf8:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8011bfc:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8011c00:	9301      	str	r3, [sp, #4]
 8011c02:	46d9      	mov	r9, fp
 8011c04:	f04f 0c00 	mov.w	ip, #0
 8011c08:	9b01      	ldr	r3, [sp, #4]
 8011c0a:	f85e 0b04 	ldr.w	r0, [lr], #4
 8011c0e:	f853 af04 	ldr.w	sl, [r3, #4]!
 8011c12:	9301      	str	r3, [sp, #4]
 8011c14:	fa1f f38a 	uxth.w	r3, sl
 8011c18:	4619      	mov	r1, r3
 8011c1a:	b283      	uxth	r3, r0
 8011c1c:	1acb      	subs	r3, r1, r3
 8011c1e:	0c00      	lsrs	r0, r0, #16
 8011c20:	4463      	add	r3, ip
 8011c22:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8011c26:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8011c2a:	b29b      	uxth	r3, r3
 8011c2c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8011c30:	4576      	cmp	r6, lr
 8011c32:	f849 3b04 	str.w	r3, [r9], #4
 8011c36:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8011c3a:	d8e5      	bhi.n	8011c08 <__mdiff+0x88>
 8011c3c:	1b33      	subs	r3, r6, r4
 8011c3e:	3b15      	subs	r3, #21
 8011c40:	f023 0303 	bic.w	r3, r3, #3
 8011c44:	3415      	adds	r4, #21
 8011c46:	3304      	adds	r3, #4
 8011c48:	42a6      	cmp	r6, r4
 8011c4a:	bf38      	it	cc
 8011c4c:	2304      	movcc	r3, #4
 8011c4e:	441d      	add	r5, r3
 8011c50:	445b      	add	r3, fp
 8011c52:	461e      	mov	r6, r3
 8011c54:	462c      	mov	r4, r5
 8011c56:	4544      	cmp	r4, r8
 8011c58:	d30e      	bcc.n	8011c78 <__mdiff+0xf8>
 8011c5a:	f108 0103 	add.w	r1, r8, #3
 8011c5e:	1b49      	subs	r1, r1, r5
 8011c60:	f021 0103 	bic.w	r1, r1, #3
 8011c64:	3d03      	subs	r5, #3
 8011c66:	45a8      	cmp	r8, r5
 8011c68:	bf38      	it	cc
 8011c6a:	2100      	movcc	r1, #0
 8011c6c:	440b      	add	r3, r1
 8011c6e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8011c72:	b191      	cbz	r1, 8011c9a <__mdiff+0x11a>
 8011c74:	6117      	str	r7, [r2, #16]
 8011c76:	e79d      	b.n	8011bb4 <__mdiff+0x34>
 8011c78:	f854 1b04 	ldr.w	r1, [r4], #4
 8011c7c:	46e6      	mov	lr, ip
 8011c7e:	0c08      	lsrs	r0, r1, #16
 8011c80:	fa1c fc81 	uxtah	ip, ip, r1
 8011c84:	4471      	add	r1, lr
 8011c86:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8011c8a:	b289      	uxth	r1, r1
 8011c8c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8011c90:	f846 1b04 	str.w	r1, [r6], #4
 8011c94:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8011c98:	e7dd      	b.n	8011c56 <__mdiff+0xd6>
 8011c9a:	3f01      	subs	r7, #1
 8011c9c:	e7e7      	b.n	8011c6e <__mdiff+0xee>
 8011c9e:	bf00      	nop
 8011ca0:	08015975 	.word	0x08015975
 8011ca4:	08015986 	.word	0x08015986

08011ca8 <__ulp>:
 8011ca8:	b082      	sub	sp, #8
 8011caa:	ed8d 0b00 	vstr	d0, [sp]
 8011cae:	9a01      	ldr	r2, [sp, #4]
 8011cb0:	4b0f      	ldr	r3, [pc, #60]	@ (8011cf0 <__ulp+0x48>)
 8011cb2:	4013      	ands	r3, r2
 8011cb4:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8011cb8:	2b00      	cmp	r3, #0
 8011cba:	dc08      	bgt.n	8011cce <__ulp+0x26>
 8011cbc:	425b      	negs	r3, r3
 8011cbe:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8011cc2:	ea4f 5223 	mov.w	r2, r3, asr #20
 8011cc6:	da04      	bge.n	8011cd2 <__ulp+0x2a>
 8011cc8:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8011ccc:	4113      	asrs	r3, r2
 8011cce:	2200      	movs	r2, #0
 8011cd0:	e008      	b.n	8011ce4 <__ulp+0x3c>
 8011cd2:	f1a2 0314 	sub.w	r3, r2, #20
 8011cd6:	2b1e      	cmp	r3, #30
 8011cd8:	bfda      	itte	le
 8011cda:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 8011cde:	40da      	lsrle	r2, r3
 8011ce0:	2201      	movgt	r2, #1
 8011ce2:	2300      	movs	r3, #0
 8011ce4:	4619      	mov	r1, r3
 8011ce6:	4610      	mov	r0, r2
 8011ce8:	ec41 0b10 	vmov	d0, r0, r1
 8011cec:	b002      	add	sp, #8
 8011cee:	4770      	bx	lr
 8011cf0:	7ff00000 	.word	0x7ff00000

08011cf4 <__b2d>:
 8011cf4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011cf8:	6906      	ldr	r6, [r0, #16]
 8011cfa:	f100 0814 	add.w	r8, r0, #20
 8011cfe:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8011d02:	1f37      	subs	r7, r6, #4
 8011d04:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8011d08:	4610      	mov	r0, r2
 8011d0a:	f7ff fd53 	bl	80117b4 <__hi0bits>
 8011d0e:	f1c0 0320 	rsb	r3, r0, #32
 8011d12:	280a      	cmp	r0, #10
 8011d14:	600b      	str	r3, [r1, #0]
 8011d16:	491b      	ldr	r1, [pc, #108]	@ (8011d84 <__b2d+0x90>)
 8011d18:	dc15      	bgt.n	8011d46 <__b2d+0x52>
 8011d1a:	f1c0 0c0b 	rsb	ip, r0, #11
 8011d1e:	fa22 f30c 	lsr.w	r3, r2, ip
 8011d22:	45b8      	cmp	r8, r7
 8011d24:	ea43 0501 	orr.w	r5, r3, r1
 8011d28:	bf34      	ite	cc
 8011d2a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8011d2e:	2300      	movcs	r3, #0
 8011d30:	3015      	adds	r0, #21
 8011d32:	fa02 f000 	lsl.w	r0, r2, r0
 8011d36:	fa23 f30c 	lsr.w	r3, r3, ip
 8011d3a:	4303      	orrs	r3, r0
 8011d3c:	461c      	mov	r4, r3
 8011d3e:	ec45 4b10 	vmov	d0, r4, r5
 8011d42:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011d46:	45b8      	cmp	r8, r7
 8011d48:	bf3a      	itte	cc
 8011d4a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8011d4e:	f1a6 0708 	subcc.w	r7, r6, #8
 8011d52:	2300      	movcs	r3, #0
 8011d54:	380b      	subs	r0, #11
 8011d56:	d012      	beq.n	8011d7e <__b2d+0x8a>
 8011d58:	f1c0 0120 	rsb	r1, r0, #32
 8011d5c:	fa23 f401 	lsr.w	r4, r3, r1
 8011d60:	4082      	lsls	r2, r0
 8011d62:	4322      	orrs	r2, r4
 8011d64:	4547      	cmp	r7, r8
 8011d66:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 8011d6a:	bf8c      	ite	hi
 8011d6c:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8011d70:	2200      	movls	r2, #0
 8011d72:	4083      	lsls	r3, r0
 8011d74:	40ca      	lsrs	r2, r1
 8011d76:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8011d7a:	4313      	orrs	r3, r2
 8011d7c:	e7de      	b.n	8011d3c <__b2d+0x48>
 8011d7e:	ea42 0501 	orr.w	r5, r2, r1
 8011d82:	e7db      	b.n	8011d3c <__b2d+0x48>
 8011d84:	3ff00000 	.word	0x3ff00000

08011d88 <__d2b>:
 8011d88:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8011d8c:	460f      	mov	r7, r1
 8011d8e:	2101      	movs	r1, #1
 8011d90:	ec59 8b10 	vmov	r8, r9, d0
 8011d94:	4616      	mov	r6, r2
 8011d96:	f7ff fc1b 	bl	80115d0 <_Balloc>
 8011d9a:	4604      	mov	r4, r0
 8011d9c:	b930      	cbnz	r0, 8011dac <__d2b+0x24>
 8011d9e:	4602      	mov	r2, r0
 8011da0:	4b23      	ldr	r3, [pc, #140]	@ (8011e30 <__d2b+0xa8>)
 8011da2:	4824      	ldr	r0, [pc, #144]	@ (8011e34 <__d2b+0xac>)
 8011da4:	f240 310f 	movw	r1, #783	@ 0x30f
 8011da8:	f7fe fc9a 	bl	80106e0 <__assert_func>
 8011dac:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8011db0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8011db4:	b10d      	cbz	r5, 8011dba <__d2b+0x32>
 8011db6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8011dba:	9301      	str	r3, [sp, #4]
 8011dbc:	f1b8 0300 	subs.w	r3, r8, #0
 8011dc0:	d023      	beq.n	8011e0a <__d2b+0x82>
 8011dc2:	4668      	mov	r0, sp
 8011dc4:	9300      	str	r3, [sp, #0]
 8011dc6:	f7ff fd14 	bl	80117f2 <__lo0bits>
 8011dca:	e9dd 1200 	ldrd	r1, r2, [sp]
 8011dce:	b1d0      	cbz	r0, 8011e06 <__d2b+0x7e>
 8011dd0:	f1c0 0320 	rsb	r3, r0, #32
 8011dd4:	fa02 f303 	lsl.w	r3, r2, r3
 8011dd8:	430b      	orrs	r3, r1
 8011dda:	40c2      	lsrs	r2, r0
 8011ddc:	6163      	str	r3, [r4, #20]
 8011dde:	9201      	str	r2, [sp, #4]
 8011de0:	9b01      	ldr	r3, [sp, #4]
 8011de2:	61a3      	str	r3, [r4, #24]
 8011de4:	2b00      	cmp	r3, #0
 8011de6:	bf0c      	ite	eq
 8011de8:	2201      	moveq	r2, #1
 8011dea:	2202      	movne	r2, #2
 8011dec:	6122      	str	r2, [r4, #16]
 8011dee:	b1a5      	cbz	r5, 8011e1a <__d2b+0x92>
 8011df0:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8011df4:	4405      	add	r5, r0
 8011df6:	603d      	str	r5, [r7, #0]
 8011df8:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8011dfc:	6030      	str	r0, [r6, #0]
 8011dfe:	4620      	mov	r0, r4
 8011e00:	b003      	add	sp, #12
 8011e02:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011e06:	6161      	str	r1, [r4, #20]
 8011e08:	e7ea      	b.n	8011de0 <__d2b+0x58>
 8011e0a:	a801      	add	r0, sp, #4
 8011e0c:	f7ff fcf1 	bl	80117f2 <__lo0bits>
 8011e10:	9b01      	ldr	r3, [sp, #4]
 8011e12:	6163      	str	r3, [r4, #20]
 8011e14:	3020      	adds	r0, #32
 8011e16:	2201      	movs	r2, #1
 8011e18:	e7e8      	b.n	8011dec <__d2b+0x64>
 8011e1a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8011e1e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8011e22:	6038      	str	r0, [r7, #0]
 8011e24:	6918      	ldr	r0, [r3, #16]
 8011e26:	f7ff fcc5 	bl	80117b4 <__hi0bits>
 8011e2a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8011e2e:	e7e5      	b.n	8011dfc <__d2b+0x74>
 8011e30:	08015975 	.word	0x08015975
 8011e34:	08015986 	.word	0x08015986

08011e38 <__ratio>:
 8011e38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011e3c:	b085      	sub	sp, #20
 8011e3e:	e9cd 1000 	strd	r1, r0, [sp]
 8011e42:	a902      	add	r1, sp, #8
 8011e44:	f7ff ff56 	bl	8011cf4 <__b2d>
 8011e48:	9800      	ldr	r0, [sp, #0]
 8011e4a:	a903      	add	r1, sp, #12
 8011e4c:	ec55 4b10 	vmov	r4, r5, d0
 8011e50:	f7ff ff50 	bl	8011cf4 <__b2d>
 8011e54:	9b01      	ldr	r3, [sp, #4]
 8011e56:	6919      	ldr	r1, [r3, #16]
 8011e58:	9b00      	ldr	r3, [sp, #0]
 8011e5a:	691b      	ldr	r3, [r3, #16]
 8011e5c:	1ac9      	subs	r1, r1, r3
 8011e5e:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8011e62:	1a9b      	subs	r3, r3, r2
 8011e64:	ec5b ab10 	vmov	sl, fp, d0
 8011e68:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8011e6c:	2b00      	cmp	r3, #0
 8011e6e:	bfce      	itee	gt
 8011e70:	462a      	movgt	r2, r5
 8011e72:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8011e76:	465a      	movle	r2, fp
 8011e78:	462f      	mov	r7, r5
 8011e7a:	46d9      	mov	r9, fp
 8011e7c:	bfcc      	ite	gt
 8011e7e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8011e82:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 8011e86:	464b      	mov	r3, r9
 8011e88:	4652      	mov	r2, sl
 8011e8a:	4620      	mov	r0, r4
 8011e8c:	4639      	mov	r1, r7
 8011e8e:	f7ee fcf5 	bl	800087c <__aeabi_ddiv>
 8011e92:	ec41 0b10 	vmov	d0, r0, r1
 8011e96:	b005      	add	sp, #20
 8011e98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08011e9c <__copybits>:
 8011e9c:	3901      	subs	r1, #1
 8011e9e:	b570      	push	{r4, r5, r6, lr}
 8011ea0:	1149      	asrs	r1, r1, #5
 8011ea2:	6914      	ldr	r4, [r2, #16]
 8011ea4:	3101      	adds	r1, #1
 8011ea6:	f102 0314 	add.w	r3, r2, #20
 8011eaa:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8011eae:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8011eb2:	1f05      	subs	r5, r0, #4
 8011eb4:	42a3      	cmp	r3, r4
 8011eb6:	d30c      	bcc.n	8011ed2 <__copybits+0x36>
 8011eb8:	1aa3      	subs	r3, r4, r2
 8011eba:	3b11      	subs	r3, #17
 8011ebc:	f023 0303 	bic.w	r3, r3, #3
 8011ec0:	3211      	adds	r2, #17
 8011ec2:	42a2      	cmp	r2, r4
 8011ec4:	bf88      	it	hi
 8011ec6:	2300      	movhi	r3, #0
 8011ec8:	4418      	add	r0, r3
 8011eca:	2300      	movs	r3, #0
 8011ecc:	4288      	cmp	r0, r1
 8011ece:	d305      	bcc.n	8011edc <__copybits+0x40>
 8011ed0:	bd70      	pop	{r4, r5, r6, pc}
 8011ed2:	f853 6b04 	ldr.w	r6, [r3], #4
 8011ed6:	f845 6f04 	str.w	r6, [r5, #4]!
 8011eda:	e7eb      	b.n	8011eb4 <__copybits+0x18>
 8011edc:	f840 3b04 	str.w	r3, [r0], #4
 8011ee0:	e7f4      	b.n	8011ecc <__copybits+0x30>

08011ee2 <__any_on>:
 8011ee2:	f100 0214 	add.w	r2, r0, #20
 8011ee6:	6900      	ldr	r0, [r0, #16]
 8011ee8:	114b      	asrs	r3, r1, #5
 8011eea:	4298      	cmp	r0, r3
 8011eec:	b510      	push	{r4, lr}
 8011eee:	db11      	blt.n	8011f14 <__any_on+0x32>
 8011ef0:	dd0a      	ble.n	8011f08 <__any_on+0x26>
 8011ef2:	f011 011f 	ands.w	r1, r1, #31
 8011ef6:	d007      	beq.n	8011f08 <__any_on+0x26>
 8011ef8:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8011efc:	fa24 f001 	lsr.w	r0, r4, r1
 8011f00:	fa00 f101 	lsl.w	r1, r0, r1
 8011f04:	428c      	cmp	r4, r1
 8011f06:	d10b      	bne.n	8011f20 <__any_on+0x3e>
 8011f08:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8011f0c:	4293      	cmp	r3, r2
 8011f0e:	d803      	bhi.n	8011f18 <__any_on+0x36>
 8011f10:	2000      	movs	r0, #0
 8011f12:	bd10      	pop	{r4, pc}
 8011f14:	4603      	mov	r3, r0
 8011f16:	e7f7      	b.n	8011f08 <__any_on+0x26>
 8011f18:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8011f1c:	2900      	cmp	r1, #0
 8011f1e:	d0f5      	beq.n	8011f0c <__any_on+0x2a>
 8011f20:	2001      	movs	r0, #1
 8011f22:	e7f6      	b.n	8011f12 <__any_on+0x30>

08011f24 <sulp>:
 8011f24:	b570      	push	{r4, r5, r6, lr}
 8011f26:	4604      	mov	r4, r0
 8011f28:	460d      	mov	r5, r1
 8011f2a:	ec45 4b10 	vmov	d0, r4, r5
 8011f2e:	4616      	mov	r6, r2
 8011f30:	f7ff feba 	bl	8011ca8 <__ulp>
 8011f34:	ec51 0b10 	vmov	r0, r1, d0
 8011f38:	b17e      	cbz	r6, 8011f5a <sulp+0x36>
 8011f3a:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8011f3e:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8011f42:	2b00      	cmp	r3, #0
 8011f44:	dd09      	ble.n	8011f5a <sulp+0x36>
 8011f46:	051b      	lsls	r3, r3, #20
 8011f48:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8011f4c:	2400      	movs	r4, #0
 8011f4e:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 8011f52:	4622      	mov	r2, r4
 8011f54:	462b      	mov	r3, r5
 8011f56:	f7ee fb67 	bl	8000628 <__aeabi_dmul>
 8011f5a:	ec41 0b10 	vmov	d0, r0, r1
 8011f5e:	bd70      	pop	{r4, r5, r6, pc}

08011f60 <_strtod_l>:
 8011f60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011f64:	b09f      	sub	sp, #124	@ 0x7c
 8011f66:	460c      	mov	r4, r1
 8011f68:	9217      	str	r2, [sp, #92]	@ 0x5c
 8011f6a:	2200      	movs	r2, #0
 8011f6c:	921a      	str	r2, [sp, #104]	@ 0x68
 8011f6e:	9005      	str	r0, [sp, #20]
 8011f70:	f04f 0a00 	mov.w	sl, #0
 8011f74:	f04f 0b00 	mov.w	fp, #0
 8011f78:	460a      	mov	r2, r1
 8011f7a:	9219      	str	r2, [sp, #100]	@ 0x64
 8011f7c:	7811      	ldrb	r1, [r2, #0]
 8011f7e:	292b      	cmp	r1, #43	@ 0x2b
 8011f80:	d04a      	beq.n	8012018 <_strtod_l+0xb8>
 8011f82:	d838      	bhi.n	8011ff6 <_strtod_l+0x96>
 8011f84:	290d      	cmp	r1, #13
 8011f86:	d832      	bhi.n	8011fee <_strtod_l+0x8e>
 8011f88:	2908      	cmp	r1, #8
 8011f8a:	d832      	bhi.n	8011ff2 <_strtod_l+0x92>
 8011f8c:	2900      	cmp	r1, #0
 8011f8e:	d03b      	beq.n	8012008 <_strtod_l+0xa8>
 8011f90:	2200      	movs	r2, #0
 8011f92:	920e      	str	r2, [sp, #56]	@ 0x38
 8011f94:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8011f96:	782a      	ldrb	r2, [r5, #0]
 8011f98:	2a30      	cmp	r2, #48	@ 0x30
 8011f9a:	f040 80b2 	bne.w	8012102 <_strtod_l+0x1a2>
 8011f9e:	786a      	ldrb	r2, [r5, #1]
 8011fa0:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8011fa4:	2a58      	cmp	r2, #88	@ 0x58
 8011fa6:	d16e      	bne.n	8012086 <_strtod_l+0x126>
 8011fa8:	9302      	str	r3, [sp, #8]
 8011faa:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8011fac:	9301      	str	r3, [sp, #4]
 8011fae:	ab1a      	add	r3, sp, #104	@ 0x68
 8011fb0:	9300      	str	r3, [sp, #0]
 8011fb2:	4a8f      	ldr	r2, [pc, #572]	@ (80121f0 <_strtod_l+0x290>)
 8011fb4:	9805      	ldr	r0, [sp, #20]
 8011fb6:	ab1b      	add	r3, sp, #108	@ 0x6c
 8011fb8:	a919      	add	r1, sp, #100	@ 0x64
 8011fba:	f001 fa2f 	bl	801341c <__gethex>
 8011fbe:	f010 060f 	ands.w	r6, r0, #15
 8011fc2:	4604      	mov	r4, r0
 8011fc4:	d005      	beq.n	8011fd2 <_strtod_l+0x72>
 8011fc6:	2e06      	cmp	r6, #6
 8011fc8:	d128      	bne.n	801201c <_strtod_l+0xbc>
 8011fca:	3501      	adds	r5, #1
 8011fcc:	2300      	movs	r3, #0
 8011fce:	9519      	str	r5, [sp, #100]	@ 0x64
 8011fd0:	930e      	str	r3, [sp, #56]	@ 0x38
 8011fd2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8011fd4:	2b00      	cmp	r3, #0
 8011fd6:	f040 858e 	bne.w	8012af6 <_strtod_l+0xb96>
 8011fda:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8011fdc:	b1cb      	cbz	r3, 8012012 <_strtod_l+0xb2>
 8011fde:	4652      	mov	r2, sl
 8011fe0:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 8011fe4:	ec43 2b10 	vmov	d0, r2, r3
 8011fe8:	b01f      	add	sp, #124	@ 0x7c
 8011fea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011fee:	2920      	cmp	r1, #32
 8011ff0:	d1ce      	bne.n	8011f90 <_strtod_l+0x30>
 8011ff2:	3201      	adds	r2, #1
 8011ff4:	e7c1      	b.n	8011f7a <_strtod_l+0x1a>
 8011ff6:	292d      	cmp	r1, #45	@ 0x2d
 8011ff8:	d1ca      	bne.n	8011f90 <_strtod_l+0x30>
 8011ffa:	2101      	movs	r1, #1
 8011ffc:	910e      	str	r1, [sp, #56]	@ 0x38
 8011ffe:	1c51      	adds	r1, r2, #1
 8012000:	9119      	str	r1, [sp, #100]	@ 0x64
 8012002:	7852      	ldrb	r2, [r2, #1]
 8012004:	2a00      	cmp	r2, #0
 8012006:	d1c5      	bne.n	8011f94 <_strtod_l+0x34>
 8012008:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 801200a:	9419      	str	r4, [sp, #100]	@ 0x64
 801200c:	2b00      	cmp	r3, #0
 801200e:	f040 8570 	bne.w	8012af2 <_strtod_l+0xb92>
 8012012:	4652      	mov	r2, sl
 8012014:	465b      	mov	r3, fp
 8012016:	e7e5      	b.n	8011fe4 <_strtod_l+0x84>
 8012018:	2100      	movs	r1, #0
 801201a:	e7ef      	b.n	8011ffc <_strtod_l+0x9c>
 801201c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 801201e:	b13a      	cbz	r2, 8012030 <_strtod_l+0xd0>
 8012020:	2135      	movs	r1, #53	@ 0x35
 8012022:	a81c      	add	r0, sp, #112	@ 0x70
 8012024:	f7ff ff3a 	bl	8011e9c <__copybits>
 8012028:	991a      	ldr	r1, [sp, #104]	@ 0x68
 801202a:	9805      	ldr	r0, [sp, #20]
 801202c:	f7ff fb10 	bl	8011650 <_Bfree>
 8012030:	3e01      	subs	r6, #1
 8012032:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8012034:	2e04      	cmp	r6, #4
 8012036:	d806      	bhi.n	8012046 <_strtod_l+0xe6>
 8012038:	e8df f006 	tbb	[pc, r6]
 801203c:	201d0314 	.word	0x201d0314
 8012040:	14          	.byte	0x14
 8012041:	00          	.byte	0x00
 8012042:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 8012046:	05e1      	lsls	r1, r4, #23
 8012048:	bf48      	it	mi
 801204a:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 801204e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8012052:	0d1b      	lsrs	r3, r3, #20
 8012054:	051b      	lsls	r3, r3, #20
 8012056:	2b00      	cmp	r3, #0
 8012058:	d1bb      	bne.n	8011fd2 <_strtod_l+0x72>
 801205a:	f7fe faff 	bl	801065c <__errno>
 801205e:	2322      	movs	r3, #34	@ 0x22
 8012060:	6003      	str	r3, [r0, #0]
 8012062:	e7b6      	b.n	8011fd2 <_strtod_l+0x72>
 8012064:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8012068:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 801206c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8012070:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8012074:	e7e7      	b.n	8012046 <_strtod_l+0xe6>
 8012076:	f8df b180 	ldr.w	fp, [pc, #384]	@ 80121f8 <_strtod_l+0x298>
 801207a:	e7e4      	b.n	8012046 <_strtod_l+0xe6>
 801207c:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8012080:	f04f 3aff 	mov.w	sl, #4294967295
 8012084:	e7df      	b.n	8012046 <_strtod_l+0xe6>
 8012086:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8012088:	1c5a      	adds	r2, r3, #1
 801208a:	9219      	str	r2, [sp, #100]	@ 0x64
 801208c:	785b      	ldrb	r3, [r3, #1]
 801208e:	2b30      	cmp	r3, #48	@ 0x30
 8012090:	d0f9      	beq.n	8012086 <_strtod_l+0x126>
 8012092:	2b00      	cmp	r3, #0
 8012094:	d09d      	beq.n	8011fd2 <_strtod_l+0x72>
 8012096:	2301      	movs	r3, #1
 8012098:	2700      	movs	r7, #0
 801209a:	9308      	str	r3, [sp, #32]
 801209c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801209e:	930c      	str	r3, [sp, #48]	@ 0x30
 80120a0:	970b      	str	r7, [sp, #44]	@ 0x2c
 80120a2:	46b9      	mov	r9, r7
 80120a4:	220a      	movs	r2, #10
 80120a6:	9819      	ldr	r0, [sp, #100]	@ 0x64
 80120a8:	7805      	ldrb	r5, [r0, #0]
 80120aa:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 80120ae:	b2d9      	uxtb	r1, r3
 80120b0:	2909      	cmp	r1, #9
 80120b2:	d928      	bls.n	8012106 <_strtod_l+0x1a6>
 80120b4:	494f      	ldr	r1, [pc, #316]	@ (80121f4 <_strtod_l+0x294>)
 80120b6:	2201      	movs	r2, #1
 80120b8:	f001 f8e0 	bl	801327c <strncmp>
 80120bc:	2800      	cmp	r0, #0
 80120be:	d032      	beq.n	8012126 <_strtod_l+0x1c6>
 80120c0:	2000      	movs	r0, #0
 80120c2:	462a      	mov	r2, r5
 80120c4:	900a      	str	r0, [sp, #40]	@ 0x28
 80120c6:	464d      	mov	r5, r9
 80120c8:	4603      	mov	r3, r0
 80120ca:	2a65      	cmp	r2, #101	@ 0x65
 80120cc:	d001      	beq.n	80120d2 <_strtod_l+0x172>
 80120ce:	2a45      	cmp	r2, #69	@ 0x45
 80120d0:	d114      	bne.n	80120fc <_strtod_l+0x19c>
 80120d2:	b91d      	cbnz	r5, 80120dc <_strtod_l+0x17c>
 80120d4:	9a08      	ldr	r2, [sp, #32]
 80120d6:	4302      	orrs	r2, r0
 80120d8:	d096      	beq.n	8012008 <_strtod_l+0xa8>
 80120da:	2500      	movs	r5, #0
 80120dc:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 80120de:	1c62      	adds	r2, r4, #1
 80120e0:	9219      	str	r2, [sp, #100]	@ 0x64
 80120e2:	7862      	ldrb	r2, [r4, #1]
 80120e4:	2a2b      	cmp	r2, #43	@ 0x2b
 80120e6:	d07a      	beq.n	80121de <_strtod_l+0x27e>
 80120e8:	2a2d      	cmp	r2, #45	@ 0x2d
 80120ea:	d07e      	beq.n	80121ea <_strtod_l+0x28a>
 80120ec:	f04f 0c00 	mov.w	ip, #0
 80120f0:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 80120f4:	2909      	cmp	r1, #9
 80120f6:	f240 8085 	bls.w	8012204 <_strtod_l+0x2a4>
 80120fa:	9419      	str	r4, [sp, #100]	@ 0x64
 80120fc:	f04f 0800 	mov.w	r8, #0
 8012100:	e0a5      	b.n	801224e <_strtod_l+0x2ee>
 8012102:	2300      	movs	r3, #0
 8012104:	e7c8      	b.n	8012098 <_strtod_l+0x138>
 8012106:	f1b9 0f08 	cmp.w	r9, #8
 801210a:	bfd8      	it	le
 801210c:	990b      	ldrle	r1, [sp, #44]	@ 0x2c
 801210e:	f100 0001 	add.w	r0, r0, #1
 8012112:	bfda      	itte	le
 8012114:	fb02 3301 	mlale	r3, r2, r1, r3
 8012118:	930b      	strle	r3, [sp, #44]	@ 0x2c
 801211a:	fb02 3707 	mlagt	r7, r2, r7, r3
 801211e:	f109 0901 	add.w	r9, r9, #1
 8012122:	9019      	str	r0, [sp, #100]	@ 0x64
 8012124:	e7bf      	b.n	80120a6 <_strtod_l+0x146>
 8012126:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8012128:	1c5a      	adds	r2, r3, #1
 801212a:	9219      	str	r2, [sp, #100]	@ 0x64
 801212c:	785a      	ldrb	r2, [r3, #1]
 801212e:	f1b9 0f00 	cmp.w	r9, #0
 8012132:	d03b      	beq.n	80121ac <_strtod_l+0x24c>
 8012134:	900a      	str	r0, [sp, #40]	@ 0x28
 8012136:	464d      	mov	r5, r9
 8012138:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 801213c:	2b09      	cmp	r3, #9
 801213e:	d912      	bls.n	8012166 <_strtod_l+0x206>
 8012140:	2301      	movs	r3, #1
 8012142:	e7c2      	b.n	80120ca <_strtod_l+0x16a>
 8012144:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8012146:	1c5a      	adds	r2, r3, #1
 8012148:	9219      	str	r2, [sp, #100]	@ 0x64
 801214a:	785a      	ldrb	r2, [r3, #1]
 801214c:	3001      	adds	r0, #1
 801214e:	2a30      	cmp	r2, #48	@ 0x30
 8012150:	d0f8      	beq.n	8012144 <_strtod_l+0x1e4>
 8012152:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8012156:	2b08      	cmp	r3, #8
 8012158:	f200 84d2 	bhi.w	8012b00 <_strtod_l+0xba0>
 801215c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801215e:	900a      	str	r0, [sp, #40]	@ 0x28
 8012160:	2000      	movs	r0, #0
 8012162:	930c      	str	r3, [sp, #48]	@ 0x30
 8012164:	4605      	mov	r5, r0
 8012166:	3a30      	subs	r2, #48	@ 0x30
 8012168:	f100 0301 	add.w	r3, r0, #1
 801216c:	d018      	beq.n	80121a0 <_strtod_l+0x240>
 801216e:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8012170:	4419      	add	r1, r3
 8012172:	910a      	str	r1, [sp, #40]	@ 0x28
 8012174:	462e      	mov	r6, r5
 8012176:	f04f 0e0a 	mov.w	lr, #10
 801217a:	1c71      	adds	r1, r6, #1
 801217c:	eba1 0c05 	sub.w	ip, r1, r5
 8012180:	4563      	cmp	r3, ip
 8012182:	dc15      	bgt.n	80121b0 <_strtod_l+0x250>
 8012184:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 8012188:	182b      	adds	r3, r5, r0
 801218a:	2b08      	cmp	r3, #8
 801218c:	f105 0501 	add.w	r5, r5, #1
 8012190:	4405      	add	r5, r0
 8012192:	dc1a      	bgt.n	80121ca <_strtod_l+0x26a>
 8012194:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8012196:	230a      	movs	r3, #10
 8012198:	fb03 2301 	mla	r3, r3, r1, r2
 801219c:	930b      	str	r3, [sp, #44]	@ 0x2c
 801219e:	2300      	movs	r3, #0
 80121a0:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80121a2:	1c51      	adds	r1, r2, #1
 80121a4:	9119      	str	r1, [sp, #100]	@ 0x64
 80121a6:	7852      	ldrb	r2, [r2, #1]
 80121a8:	4618      	mov	r0, r3
 80121aa:	e7c5      	b.n	8012138 <_strtod_l+0x1d8>
 80121ac:	4648      	mov	r0, r9
 80121ae:	e7ce      	b.n	801214e <_strtod_l+0x1ee>
 80121b0:	2e08      	cmp	r6, #8
 80121b2:	dc05      	bgt.n	80121c0 <_strtod_l+0x260>
 80121b4:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 80121b6:	fb0e f606 	mul.w	r6, lr, r6
 80121ba:	960b      	str	r6, [sp, #44]	@ 0x2c
 80121bc:	460e      	mov	r6, r1
 80121be:	e7dc      	b.n	801217a <_strtod_l+0x21a>
 80121c0:	2910      	cmp	r1, #16
 80121c2:	bfd8      	it	le
 80121c4:	fb0e f707 	mulle.w	r7, lr, r7
 80121c8:	e7f8      	b.n	80121bc <_strtod_l+0x25c>
 80121ca:	2b0f      	cmp	r3, #15
 80121cc:	bfdc      	itt	le
 80121ce:	230a      	movle	r3, #10
 80121d0:	fb03 2707 	mlale	r7, r3, r7, r2
 80121d4:	e7e3      	b.n	801219e <_strtod_l+0x23e>
 80121d6:	2300      	movs	r3, #0
 80121d8:	930a      	str	r3, [sp, #40]	@ 0x28
 80121da:	2301      	movs	r3, #1
 80121dc:	e77a      	b.n	80120d4 <_strtod_l+0x174>
 80121de:	f04f 0c00 	mov.w	ip, #0
 80121e2:	1ca2      	adds	r2, r4, #2
 80121e4:	9219      	str	r2, [sp, #100]	@ 0x64
 80121e6:	78a2      	ldrb	r2, [r4, #2]
 80121e8:	e782      	b.n	80120f0 <_strtod_l+0x190>
 80121ea:	f04f 0c01 	mov.w	ip, #1
 80121ee:	e7f8      	b.n	80121e2 <_strtod_l+0x282>
 80121f0:	08015b6c 	.word	0x08015b6c
 80121f4:	080159df 	.word	0x080159df
 80121f8:	7ff00000 	.word	0x7ff00000
 80121fc:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80121fe:	1c51      	adds	r1, r2, #1
 8012200:	9119      	str	r1, [sp, #100]	@ 0x64
 8012202:	7852      	ldrb	r2, [r2, #1]
 8012204:	2a30      	cmp	r2, #48	@ 0x30
 8012206:	d0f9      	beq.n	80121fc <_strtod_l+0x29c>
 8012208:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 801220c:	2908      	cmp	r1, #8
 801220e:	f63f af75 	bhi.w	80120fc <_strtod_l+0x19c>
 8012212:	3a30      	subs	r2, #48	@ 0x30
 8012214:	9209      	str	r2, [sp, #36]	@ 0x24
 8012216:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8012218:	920f      	str	r2, [sp, #60]	@ 0x3c
 801221a:	f04f 080a 	mov.w	r8, #10
 801221e:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8012220:	1c56      	adds	r6, r2, #1
 8012222:	9619      	str	r6, [sp, #100]	@ 0x64
 8012224:	7852      	ldrb	r2, [r2, #1]
 8012226:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 801222a:	f1be 0f09 	cmp.w	lr, #9
 801222e:	d939      	bls.n	80122a4 <_strtod_l+0x344>
 8012230:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8012232:	1a76      	subs	r6, r6, r1
 8012234:	2e08      	cmp	r6, #8
 8012236:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 801223a:	dc03      	bgt.n	8012244 <_strtod_l+0x2e4>
 801223c:	9909      	ldr	r1, [sp, #36]	@ 0x24
 801223e:	4588      	cmp	r8, r1
 8012240:	bfa8      	it	ge
 8012242:	4688      	movge	r8, r1
 8012244:	f1bc 0f00 	cmp.w	ip, #0
 8012248:	d001      	beq.n	801224e <_strtod_l+0x2ee>
 801224a:	f1c8 0800 	rsb	r8, r8, #0
 801224e:	2d00      	cmp	r5, #0
 8012250:	d14e      	bne.n	80122f0 <_strtod_l+0x390>
 8012252:	9908      	ldr	r1, [sp, #32]
 8012254:	4308      	orrs	r0, r1
 8012256:	f47f aebc 	bne.w	8011fd2 <_strtod_l+0x72>
 801225a:	2b00      	cmp	r3, #0
 801225c:	f47f aed4 	bne.w	8012008 <_strtod_l+0xa8>
 8012260:	2a69      	cmp	r2, #105	@ 0x69
 8012262:	d028      	beq.n	80122b6 <_strtod_l+0x356>
 8012264:	dc25      	bgt.n	80122b2 <_strtod_l+0x352>
 8012266:	2a49      	cmp	r2, #73	@ 0x49
 8012268:	d025      	beq.n	80122b6 <_strtod_l+0x356>
 801226a:	2a4e      	cmp	r2, #78	@ 0x4e
 801226c:	f47f aecc 	bne.w	8012008 <_strtod_l+0xa8>
 8012270:	499a      	ldr	r1, [pc, #616]	@ (80124dc <_strtod_l+0x57c>)
 8012272:	a819      	add	r0, sp, #100	@ 0x64
 8012274:	f001 faf4 	bl	8013860 <__match>
 8012278:	2800      	cmp	r0, #0
 801227a:	f43f aec5 	beq.w	8012008 <_strtod_l+0xa8>
 801227e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8012280:	781b      	ldrb	r3, [r3, #0]
 8012282:	2b28      	cmp	r3, #40	@ 0x28
 8012284:	d12e      	bne.n	80122e4 <_strtod_l+0x384>
 8012286:	4996      	ldr	r1, [pc, #600]	@ (80124e0 <_strtod_l+0x580>)
 8012288:	aa1c      	add	r2, sp, #112	@ 0x70
 801228a:	a819      	add	r0, sp, #100	@ 0x64
 801228c:	f001 fafc 	bl	8013888 <__hexnan>
 8012290:	2805      	cmp	r0, #5
 8012292:	d127      	bne.n	80122e4 <_strtod_l+0x384>
 8012294:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8012296:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 801229a:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 801229e:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 80122a2:	e696      	b.n	8011fd2 <_strtod_l+0x72>
 80122a4:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80122a6:	fb08 2101 	mla	r1, r8, r1, r2
 80122aa:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 80122ae:	9209      	str	r2, [sp, #36]	@ 0x24
 80122b0:	e7b5      	b.n	801221e <_strtod_l+0x2be>
 80122b2:	2a6e      	cmp	r2, #110	@ 0x6e
 80122b4:	e7da      	b.n	801226c <_strtod_l+0x30c>
 80122b6:	498b      	ldr	r1, [pc, #556]	@ (80124e4 <_strtod_l+0x584>)
 80122b8:	a819      	add	r0, sp, #100	@ 0x64
 80122ba:	f001 fad1 	bl	8013860 <__match>
 80122be:	2800      	cmp	r0, #0
 80122c0:	f43f aea2 	beq.w	8012008 <_strtod_l+0xa8>
 80122c4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80122c6:	4988      	ldr	r1, [pc, #544]	@ (80124e8 <_strtod_l+0x588>)
 80122c8:	3b01      	subs	r3, #1
 80122ca:	a819      	add	r0, sp, #100	@ 0x64
 80122cc:	9319      	str	r3, [sp, #100]	@ 0x64
 80122ce:	f001 fac7 	bl	8013860 <__match>
 80122d2:	b910      	cbnz	r0, 80122da <_strtod_l+0x37a>
 80122d4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80122d6:	3301      	adds	r3, #1
 80122d8:	9319      	str	r3, [sp, #100]	@ 0x64
 80122da:	f8df b21c 	ldr.w	fp, [pc, #540]	@ 80124f8 <_strtod_l+0x598>
 80122de:	f04f 0a00 	mov.w	sl, #0
 80122e2:	e676      	b.n	8011fd2 <_strtod_l+0x72>
 80122e4:	4881      	ldr	r0, [pc, #516]	@ (80124ec <_strtod_l+0x58c>)
 80122e6:	f001 f80f 	bl	8013308 <nan>
 80122ea:	ec5b ab10 	vmov	sl, fp, d0
 80122ee:	e670      	b.n	8011fd2 <_strtod_l+0x72>
 80122f0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80122f2:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 80122f4:	eba8 0303 	sub.w	r3, r8, r3
 80122f8:	f1b9 0f00 	cmp.w	r9, #0
 80122fc:	bf08      	it	eq
 80122fe:	46a9      	moveq	r9, r5
 8012300:	2d10      	cmp	r5, #16
 8012302:	9309      	str	r3, [sp, #36]	@ 0x24
 8012304:	462c      	mov	r4, r5
 8012306:	bfa8      	it	ge
 8012308:	2410      	movge	r4, #16
 801230a:	f7ee f913 	bl	8000534 <__aeabi_ui2d>
 801230e:	2d09      	cmp	r5, #9
 8012310:	4682      	mov	sl, r0
 8012312:	468b      	mov	fp, r1
 8012314:	dc13      	bgt.n	801233e <_strtod_l+0x3de>
 8012316:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012318:	2b00      	cmp	r3, #0
 801231a:	f43f ae5a 	beq.w	8011fd2 <_strtod_l+0x72>
 801231e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012320:	dd78      	ble.n	8012414 <_strtod_l+0x4b4>
 8012322:	2b16      	cmp	r3, #22
 8012324:	dc5f      	bgt.n	80123e6 <_strtod_l+0x486>
 8012326:	4972      	ldr	r1, [pc, #456]	@ (80124f0 <_strtod_l+0x590>)
 8012328:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 801232c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012330:	4652      	mov	r2, sl
 8012332:	465b      	mov	r3, fp
 8012334:	f7ee f978 	bl	8000628 <__aeabi_dmul>
 8012338:	4682      	mov	sl, r0
 801233a:	468b      	mov	fp, r1
 801233c:	e649      	b.n	8011fd2 <_strtod_l+0x72>
 801233e:	4b6c      	ldr	r3, [pc, #432]	@ (80124f0 <_strtod_l+0x590>)
 8012340:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8012344:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8012348:	f7ee f96e 	bl	8000628 <__aeabi_dmul>
 801234c:	4682      	mov	sl, r0
 801234e:	4638      	mov	r0, r7
 8012350:	468b      	mov	fp, r1
 8012352:	f7ee f8ef 	bl	8000534 <__aeabi_ui2d>
 8012356:	4602      	mov	r2, r0
 8012358:	460b      	mov	r3, r1
 801235a:	4650      	mov	r0, sl
 801235c:	4659      	mov	r1, fp
 801235e:	f7ed ffad 	bl	80002bc <__adddf3>
 8012362:	2d0f      	cmp	r5, #15
 8012364:	4682      	mov	sl, r0
 8012366:	468b      	mov	fp, r1
 8012368:	ddd5      	ble.n	8012316 <_strtod_l+0x3b6>
 801236a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801236c:	1b2c      	subs	r4, r5, r4
 801236e:	441c      	add	r4, r3
 8012370:	2c00      	cmp	r4, #0
 8012372:	f340 8093 	ble.w	801249c <_strtod_l+0x53c>
 8012376:	f014 030f 	ands.w	r3, r4, #15
 801237a:	d00a      	beq.n	8012392 <_strtod_l+0x432>
 801237c:	495c      	ldr	r1, [pc, #368]	@ (80124f0 <_strtod_l+0x590>)
 801237e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8012382:	4652      	mov	r2, sl
 8012384:	465b      	mov	r3, fp
 8012386:	e9d1 0100 	ldrd	r0, r1, [r1]
 801238a:	f7ee f94d 	bl	8000628 <__aeabi_dmul>
 801238e:	4682      	mov	sl, r0
 8012390:	468b      	mov	fp, r1
 8012392:	f034 040f 	bics.w	r4, r4, #15
 8012396:	d073      	beq.n	8012480 <_strtod_l+0x520>
 8012398:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 801239c:	dd49      	ble.n	8012432 <_strtod_l+0x4d2>
 801239e:	2400      	movs	r4, #0
 80123a0:	46a0      	mov	r8, r4
 80123a2:	940b      	str	r4, [sp, #44]	@ 0x2c
 80123a4:	46a1      	mov	r9, r4
 80123a6:	9a05      	ldr	r2, [sp, #20]
 80123a8:	f8df b14c 	ldr.w	fp, [pc, #332]	@ 80124f8 <_strtod_l+0x598>
 80123ac:	2322      	movs	r3, #34	@ 0x22
 80123ae:	6013      	str	r3, [r2, #0]
 80123b0:	f04f 0a00 	mov.w	sl, #0
 80123b4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80123b6:	2b00      	cmp	r3, #0
 80123b8:	f43f ae0b 	beq.w	8011fd2 <_strtod_l+0x72>
 80123bc:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80123be:	9805      	ldr	r0, [sp, #20]
 80123c0:	f7ff f946 	bl	8011650 <_Bfree>
 80123c4:	9805      	ldr	r0, [sp, #20]
 80123c6:	4649      	mov	r1, r9
 80123c8:	f7ff f942 	bl	8011650 <_Bfree>
 80123cc:	9805      	ldr	r0, [sp, #20]
 80123ce:	4641      	mov	r1, r8
 80123d0:	f7ff f93e 	bl	8011650 <_Bfree>
 80123d4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80123d6:	9805      	ldr	r0, [sp, #20]
 80123d8:	f7ff f93a 	bl	8011650 <_Bfree>
 80123dc:	9805      	ldr	r0, [sp, #20]
 80123de:	4621      	mov	r1, r4
 80123e0:	f7ff f936 	bl	8011650 <_Bfree>
 80123e4:	e5f5      	b.n	8011fd2 <_strtod_l+0x72>
 80123e6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80123e8:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 80123ec:	4293      	cmp	r3, r2
 80123ee:	dbbc      	blt.n	801236a <_strtod_l+0x40a>
 80123f0:	4c3f      	ldr	r4, [pc, #252]	@ (80124f0 <_strtod_l+0x590>)
 80123f2:	f1c5 050f 	rsb	r5, r5, #15
 80123f6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 80123fa:	4652      	mov	r2, sl
 80123fc:	465b      	mov	r3, fp
 80123fe:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012402:	f7ee f911 	bl	8000628 <__aeabi_dmul>
 8012406:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012408:	1b5d      	subs	r5, r3, r5
 801240a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 801240e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8012412:	e78f      	b.n	8012334 <_strtod_l+0x3d4>
 8012414:	3316      	adds	r3, #22
 8012416:	dba8      	blt.n	801236a <_strtod_l+0x40a>
 8012418:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801241a:	eba3 0808 	sub.w	r8, r3, r8
 801241e:	4b34      	ldr	r3, [pc, #208]	@ (80124f0 <_strtod_l+0x590>)
 8012420:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 8012424:	e9d8 2300 	ldrd	r2, r3, [r8]
 8012428:	4650      	mov	r0, sl
 801242a:	4659      	mov	r1, fp
 801242c:	f7ee fa26 	bl	800087c <__aeabi_ddiv>
 8012430:	e782      	b.n	8012338 <_strtod_l+0x3d8>
 8012432:	2300      	movs	r3, #0
 8012434:	4f2f      	ldr	r7, [pc, #188]	@ (80124f4 <_strtod_l+0x594>)
 8012436:	1124      	asrs	r4, r4, #4
 8012438:	4650      	mov	r0, sl
 801243a:	4659      	mov	r1, fp
 801243c:	461e      	mov	r6, r3
 801243e:	2c01      	cmp	r4, #1
 8012440:	dc21      	bgt.n	8012486 <_strtod_l+0x526>
 8012442:	b10b      	cbz	r3, 8012448 <_strtod_l+0x4e8>
 8012444:	4682      	mov	sl, r0
 8012446:	468b      	mov	fp, r1
 8012448:	492a      	ldr	r1, [pc, #168]	@ (80124f4 <_strtod_l+0x594>)
 801244a:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 801244e:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8012452:	4652      	mov	r2, sl
 8012454:	465b      	mov	r3, fp
 8012456:	e9d1 0100 	ldrd	r0, r1, [r1]
 801245a:	f7ee f8e5 	bl	8000628 <__aeabi_dmul>
 801245e:	4b26      	ldr	r3, [pc, #152]	@ (80124f8 <_strtod_l+0x598>)
 8012460:	460a      	mov	r2, r1
 8012462:	400b      	ands	r3, r1
 8012464:	4925      	ldr	r1, [pc, #148]	@ (80124fc <_strtod_l+0x59c>)
 8012466:	428b      	cmp	r3, r1
 8012468:	4682      	mov	sl, r0
 801246a:	d898      	bhi.n	801239e <_strtod_l+0x43e>
 801246c:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8012470:	428b      	cmp	r3, r1
 8012472:	bf86      	itte	hi
 8012474:	f8df b088 	ldrhi.w	fp, [pc, #136]	@ 8012500 <_strtod_l+0x5a0>
 8012478:	f04f 3aff 	movhi.w	sl, #4294967295
 801247c:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8012480:	2300      	movs	r3, #0
 8012482:	9308      	str	r3, [sp, #32]
 8012484:	e076      	b.n	8012574 <_strtod_l+0x614>
 8012486:	07e2      	lsls	r2, r4, #31
 8012488:	d504      	bpl.n	8012494 <_strtod_l+0x534>
 801248a:	e9d7 2300 	ldrd	r2, r3, [r7]
 801248e:	f7ee f8cb 	bl	8000628 <__aeabi_dmul>
 8012492:	2301      	movs	r3, #1
 8012494:	3601      	adds	r6, #1
 8012496:	1064      	asrs	r4, r4, #1
 8012498:	3708      	adds	r7, #8
 801249a:	e7d0      	b.n	801243e <_strtod_l+0x4de>
 801249c:	d0f0      	beq.n	8012480 <_strtod_l+0x520>
 801249e:	4264      	negs	r4, r4
 80124a0:	f014 020f 	ands.w	r2, r4, #15
 80124a4:	d00a      	beq.n	80124bc <_strtod_l+0x55c>
 80124a6:	4b12      	ldr	r3, [pc, #72]	@ (80124f0 <_strtod_l+0x590>)
 80124a8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80124ac:	4650      	mov	r0, sl
 80124ae:	4659      	mov	r1, fp
 80124b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80124b4:	f7ee f9e2 	bl	800087c <__aeabi_ddiv>
 80124b8:	4682      	mov	sl, r0
 80124ba:	468b      	mov	fp, r1
 80124bc:	1124      	asrs	r4, r4, #4
 80124be:	d0df      	beq.n	8012480 <_strtod_l+0x520>
 80124c0:	2c1f      	cmp	r4, #31
 80124c2:	dd1f      	ble.n	8012504 <_strtod_l+0x5a4>
 80124c4:	2400      	movs	r4, #0
 80124c6:	46a0      	mov	r8, r4
 80124c8:	940b      	str	r4, [sp, #44]	@ 0x2c
 80124ca:	46a1      	mov	r9, r4
 80124cc:	9a05      	ldr	r2, [sp, #20]
 80124ce:	2322      	movs	r3, #34	@ 0x22
 80124d0:	f04f 0a00 	mov.w	sl, #0
 80124d4:	f04f 0b00 	mov.w	fp, #0
 80124d8:	6013      	str	r3, [r2, #0]
 80124da:	e76b      	b.n	80123b4 <_strtod_l+0x454>
 80124dc:	08015891 	.word	0x08015891
 80124e0:	08015b58 	.word	0x08015b58
 80124e4:	08015889 	.word	0x08015889
 80124e8:	080158fc 	.word	0x080158fc
 80124ec:	080158f8 	.word	0x080158f8
 80124f0:	08015a90 	.word	0x08015a90
 80124f4:	08015a68 	.word	0x08015a68
 80124f8:	7ff00000 	.word	0x7ff00000
 80124fc:	7ca00000 	.word	0x7ca00000
 8012500:	7fefffff 	.word	0x7fefffff
 8012504:	f014 0310 	ands.w	r3, r4, #16
 8012508:	bf18      	it	ne
 801250a:	236a      	movne	r3, #106	@ 0x6a
 801250c:	4ea9      	ldr	r6, [pc, #676]	@ (80127b4 <_strtod_l+0x854>)
 801250e:	9308      	str	r3, [sp, #32]
 8012510:	4650      	mov	r0, sl
 8012512:	4659      	mov	r1, fp
 8012514:	2300      	movs	r3, #0
 8012516:	07e7      	lsls	r7, r4, #31
 8012518:	d504      	bpl.n	8012524 <_strtod_l+0x5c4>
 801251a:	e9d6 2300 	ldrd	r2, r3, [r6]
 801251e:	f7ee f883 	bl	8000628 <__aeabi_dmul>
 8012522:	2301      	movs	r3, #1
 8012524:	1064      	asrs	r4, r4, #1
 8012526:	f106 0608 	add.w	r6, r6, #8
 801252a:	d1f4      	bne.n	8012516 <_strtod_l+0x5b6>
 801252c:	b10b      	cbz	r3, 8012532 <_strtod_l+0x5d2>
 801252e:	4682      	mov	sl, r0
 8012530:	468b      	mov	fp, r1
 8012532:	9b08      	ldr	r3, [sp, #32]
 8012534:	b1b3      	cbz	r3, 8012564 <_strtod_l+0x604>
 8012536:	f3cb 520a 	ubfx	r2, fp, #20, #11
 801253a:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 801253e:	2b00      	cmp	r3, #0
 8012540:	4659      	mov	r1, fp
 8012542:	dd0f      	ble.n	8012564 <_strtod_l+0x604>
 8012544:	2b1f      	cmp	r3, #31
 8012546:	dd56      	ble.n	80125f6 <_strtod_l+0x696>
 8012548:	2b34      	cmp	r3, #52	@ 0x34
 801254a:	bfde      	ittt	le
 801254c:	f04f 33ff 	movle.w	r3, #4294967295
 8012550:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 8012554:	4093      	lslle	r3, r2
 8012556:	f04f 0a00 	mov.w	sl, #0
 801255a:	bfcc      	ite	gt
 801255c:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8012560:	ea03 0b01 	andle.w	fp, r3, r1
 8012564:	2200      	movs	r2, #0
 8012566:	2300      	movs	r3, #0
 8012568:	4650      	mov	r0, sl
 801256a:	4659      	mov	r1, fp
 801256c:	f7ee fac4 	bl	8000af8 <__aeabi_dcmpeq>
 8012570:	2800      	cmp	r0, #0
 8012572:	d1a7      	bne.n	80124c4 <_strtod_l+0x564>
 8012574:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8012576:	9300      	str	r3, [sp, #0]
 8012578:	990c      	ldr	r1, [sp, #48]	@ 0x30
 801257a:	9805      	ldr	r0, [sp, #20]
 801257c:	462b      	mov	r3, r5
 801257e:	464a      	mov	r2, r9
 8012580:	f7ff f8ce 	bl	8011720 <__s2b>
 8012584:	900b      	str	r0, [sp, #44]	@ 0x2c
 8012586:	2800      	cmp	r0, #0
 8012588:	f43f af09 	beq.w	801239e <_strtod_l+0x43e>
 801258c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801258e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8012590:	2a00      	cmp	r2, #0
 8012592:	eba3 0308 	sub.w	r3, r3, r8
 8012596:	bfa8      	it	ge
 8012598:	2300      	movge	r3, #0
 801259a:	9312      	str	r3, [sp, #72]	@ 0x48
 801259c:	2400      	movs	r4, #0
 801259e:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 80125a2:	9316      	str	r3, [sp, #88]	@ 0x58
 80125a4:	46a0      	mov	r8, r4
 80125a6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80125a8:	9805      	ldr	r0, [sp, #20]
 80125aa:	6859      	ldr	r1, [r3, #4]
 80125ac:	f7ff f810 	bl	80115d0 <_Balloc>
 80125b0:	4681      	mov	r9, r0
 80125b2:	2800      	cmp	r0, #0
 80125b4:	f43f aef7 	beq.w	80123a6 <_strtod_l+0x446>
 80125b8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80125ba:	691a      	ldr	r2, [r3, #16]
 80125bc:	3202      	adds	r2, #2
 80125be:	f103 010c 	add.w	r1, r3, #12
 80125c2:	0092      	lsls	r2, r2, #2
 80125c4:	300c      	adds	r0, #12
 80125c6:	f7fe f876 	bl	80106b6 <memcpy>
 80125ca:	ec4b ab10 	vmov	d0, sl, fp
 80125ce:	9805      	ldr	r0, [sp, #20]
 80125d0:	aa1c      	add	r2, sp, #112	@ 0x70
 80125d2:	a91b      	add	r1, sp, #108	@ 0x6c
 80125d4:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 80125d8:	f7ff fbd6 	bl	8011d88 <__d2b>
 80125dc:	901a      	str	r0, [sp, #104]	@ 0x68
 80125de:	2800      	cmp	r0, #0
 80125e0:	f43f aee1 	beq.w	80123a6 <_strtod_l+0x446>
 80125e4:	9805      	ldr	r0, [sp, #20]
 80125e6:	2101      	movs	r1, #1
 80125e8:	f7ff f930 	bl	801184c <__i2b>
 80125ec:	4680      	mov	r8, r0
 80125ee:	b948      	cbnz	r0, 8012604 <_strtod_l+0x6a4>
 80125f0:	f04f 0800 	mov.w	r8, #0
 80125f4:	e6d7      	b.n	80123a6 <_strtod_l+0x446>
 80125f6:	f04f 32ff 	mov.w	r2, #4294967295
 80125fa:	fa02 f303 	lsl.w	r3, r2, r3
 80125fe:	ea03 0a0a 	and.w	sl, r3, sl
 8012602:	e7af      	b.n	8012564 <_strtod_l+0x604>
 8012604:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8012606:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8012608:	2d00      	cmp	r5, #0
 801260a:	bfab      	itete	ge
 801260c:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 801260e:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 8012610:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8012612:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 8012614:	bfac      	ite	ge
 8012616:	18ef      	addge	r7, r5, r3
 8012618:	1b5e      	sublt	r6, r3, r5
 801261a:	9b08      	ldr	r3, [sp, #32]
 801261c:	1aed      	subs	r5, r5, r3
 801261e:	4415      	add	r5, r2
 8012620:	4b65      	ldr	r3, [pc, #404]	@ (80127b8 <_strtod_l+0x858>)
 8012622:	3d01      	subs	r5, #1
 8012624:	429d      	cmp	r5, r3
 8012626:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 801262a:	da50      	bge.n	80126ce <_strtod_l+0x76e>
 801262c:	1b5b      	subs	r3, r3, r5
 801262e:	2b1f      	cmp	r3, #31
 8012630:	eba2 0203 	sub.w	r2, r2, r3
 8012634:	f04f 0101 	mov.w	r1, #1
 8012638:	dc3d      	bgt.n	80126b6 <_strtod_l+0x756>
 801263a:	fa01 f303 	lsl.w	r3, r1, r3
 801263e:	9313      	str	r3, [sp, #76]	@ 0x4c
 8012640:	2300      	movs	r3, #0
 8012642:	9310      	str	r3, [sp, #64]	@ 0x40
 8012644:	18bd      	adds	r5, r7, r2
 8012646:	9b08      	ldr	r3, [sp, #32]
 8012648:	42af      	cmp	r7, r5
 801264a:	4416      	add	r6, r2
 801264c:	441e      	add	r6, r3
 801264e:	463b      	mov	r3, r7
 8012650:	bfa8      	it	ge
 8012652:	462b      	movge	r3, r5
 8012654:	42b3      	cmp	r3, r6
 8012656:	bfa8      	it	ge
 8012658:	4633      	movge	r3, r6
 801265a:	2b00      	cmp	r3, #0
 801265c:	bfc2      	ittt	gt
 801265e:	1aed      	subgt	r5, r5, r3
 8012660:	1af6      	subgt	r6, r6, r3
 8012662:	1aff      	subgt	r7, r7, r3
 8012664:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8012666:	2b00      	cmp	r3, #0
 8012668:	dd16      	ble.n	8012698 <_strtod_l+0x738>
 801266a:	4641      	mov	r1, r8
 801266c:	9805      	ldr	r0, [sp, #20]
 801266e:	461a      	mov	r2, r3
 8012670:	f7ff f9a4 	bl	80119bc <__pow5mult>
 8012674:	4680      	mov	r8, r0
 8012676:	2800      	cmp	r0, #0
 8012678:	d0ba      	beq.n	80125f0 <_strtod_l+0x690>
 801267a:	4601      	mov	r1, r0
 801267c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 801267e:	9805      	ldr	r0, [sp, #20]
 8012680:	f7ff f8fa 	bl	8011878 <__multiply>
 8012684:	900a      	str	r0, [sp, #40]	@ 0x28
 8012686:	2800      	cmp	r0, #0
 8012688:	f43f ae8d 	beq.w	80123a6 <_strtod_l+0x446>
 801268c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 801268e:	9805      	ldr	r0, [sp, #20]
 8012690:	f7fe ffde 	bl	8011650 <_Bfree>
 8012694:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8012696:	931a      	str	r3, [sp, #104]	@ 0x68
 8012698:	2d00      	cmp	r5, #0
 801269a:	dc1d      	bgt.n	80126d8 <_strtod_l+0x778>
 801269c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801269e:	2b00      	cmp	r3, #0
 80126a0:	dd23      	ble.n	80126ea <_strtod_l+0x78a>
 80126a2:	4649      	mov	r1, r9
 80126a4:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 80126a6:	9805      	ldr	r0, [sp, #20]
 80126a8:	f7ff f988 	bl	80119bc <__pow5mult>
 80126ac:	4681      	mov	r9, r0
 80126ae:	b9e0      	cbnz	r0, 80126ea <_strtod_l+0x78a>
 80126b0:	f04f 0900 	mov.w	r9, #0
 80126b4:	e677      	b.n	80123a6 <_strtod_l+0x446>
 80126b6:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 80126ba:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 80126be:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 80126c2:	35e2      	adds	r5, #226	@ 0xe2
 80126c4:	fa01 f305 	lsl.w	r3, r1, r5
 80126c8:	9310      	str	r3, [sp, #64]	@ 0x40
 80126ca:	9113      	str	r1, [sp, #76]	@ 0x4c
 80126cc:	e7ba      	b.n	8012644 <_strtod_l+0x6e4>
 80126ce:	2300      	movs	r3, #0
 80126d0:	9310      	str	r3, [sp, #64]	@ 0x40
 80126d2:	2301      	movs	r3, #1
 80126d4:	9313      	str	r3, [sp, #76]	@ 0x4c
 80126d6:	e7b5      	b.n	8012644 <_strtod_l+0x6e4>
 80126d8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80126da:	9805      	ldr	r0, [sp, #20]
 80126dc:	462a      	mov	r2, r5
 80126de:	f7ff f9c7 	bl	8011a70 <__lshift>
 80126e2:	901a      	str	r0, [sp, #104]	@ 0x68
 80126e4:	2800      	cmp	r0, #0
 80126e6:	d1d9      	bne.n	801269c <_strtod_l+0x73c>
 80126e8:	e65d      	b.n	80123a6 <_strtod_l+0x446>
 80126ea:	2e00      	cmp	r6, #0
 80126ec:	dd07      	ble.n	80126fe <_strtod_l+0x79e>
 80126ee:	4649      	mov	r1, r9
 80126f0:	9805      	ldr	r0, [sp, #20]
 80126f2:	4632      	mov	r2, r6
 80126f4:	f7ff f9bc 	bl	8011a70 <__lshift>
 80126f8:	4681      	mov	r9, r0
 80126fa:	2800      	cmp	r0, #0
 80126fc:	d0d8      	beq.n	80126b0 <_strtod_l+0x750>
 80126fe:	2f00      	cmp	r7, #0
 8012700:	dd08      	ble.n	8012714 <_strtod_l+0x7b4>
 8012702:	4641      	mov	r1, r8
 8012704:	9805      	ldr	r0, [sp, #20]
 8012706:	463a      	mov	r2, r7
 8012708:	f7ff f9b2 	bl	8011a70 <__lshift>
 801270c:	4680      	mov	r8, r0
 801270e:	2800      	cmp	r0, #0
 8012710:	f43f ae49 	beq.w	80123a6 <_strtod_l+0x446>
 8012714:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8012716:	9805      	ldr	r0, [sp, #20]
 8012718:	464a      	mov	r2, r9
 801271a:	f7ff fa31 	bl	8011b80 <__mdiff>
 801271e:	4604      	mov	r4, r0
 8012720:	2800      	cmp	r0, #0
 8012722:	f43f ae40 	beq.w	80123a6 <_strtod_l+0x446>
 8012726:	68c3      	ldr	r3, [r0, #12]
 8012728:	930f      	str	r3, [sp, #60]	@ 0x3c
 801272a:	2300      	movs	r3, #0
 801272c:	60c3      	str	r3, [r0, #12]
 801272e:	4641      	mov	r1, r8
 8012730:	f7ff fa0a 	bl	8011b48 <__mcmp>
 8012734:	2800      	cmp	r0, #0
 8012736:	da45      	bge.n	80127c4 <_strtod_l+0x864>
 8012738:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801273a:	ea53 030a 	orrs.w	r3, r3, sl
 801273e:	d16b      	bne.n	8012818 <_strtod_l+0x8b8>
 8012740:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8012744:	2b00      	cmp	r3, #0
 8012746:	d167      	bne.n	8012818 <_strtod_l+0x8b8>
 8012748:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 801274c:	0d1b      	lsrs	r3, r3, #20
 801274e:	051b      	lsls	r3, r3, #20
 8012750:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8012754:	d960      	bls.n	8012818 <_strtod_l+0x8b8>
 8012756:	6963      	ldr	r3, [r4, #20]
 8012758:	b913      	cbnz	r3, 8012760 <_strtod_l+0x800>
 801275a:	6923      	ldr	r3, [r4, #16]
 801275c:	2b01      	cmp	r3, #1
 801275e:	dd5b      	ble.n	8012818 <_strtod_l+0x8b8>
 8012760:	4621      	mov	r1, r4
 8012762:	2201      	movs	r2, #1
 8012764:	9805      	ldr	r0, [sp, #20]
 8012766:	f7ff f983 	bl	8011a70 <__lshift>
 801276a:	4641      	mov	r1, r8
 801276c:	4604      	mov	r4, r0
 801276e:	f7ff f9eb 	bl	8011b48 <__mcmp>
 8012772:	2800      	cmp	r0, #0
 8012774:	dd50      	ble.n	8012818 <_strtod_l+0x8b8>
 8012776:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 801277a:	9a08      	ldr	r2, [sp, #32]
 801277c:	0d1b      	lsrs	r3, r3, #20
 801277e:	051b      	lsls	r3, r3, #20
 8012780:	2a00      	cmp	r2, #0
 8012782:	d06a      	beq.n	801285a <_strtod_l+0x8fa>
 8012784:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8012788:	d867      	bhi.n	801285a <_strtod_l+0x8fa>
 801278a:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 801278e:	f67f ae9d 	bls.w	80124cc <_strtod_l+0x56c>
 8012792:	4b0a      	ldr	r3, [pc, #40]	@ (80127bc <_strtod_l+0x85c>)
 8012794:	4650      	mov	r0, sl
 8012796:	4659      	mov	r1, fp
 8012798:	2200      	movs	r2, #0
 801279a:	f7ed ff45 	bl	8000628 <__aeabi_dmul>
 801279e:	4b08      	ldr	r3, [pc, #32]	@ (80127c0 <_strtod_l+0x860>)
 80127a0:	400b      	ands	r3, r1
 80127a2:	4682      	mov	sl, r0
 80127a4:	468b      	mov	fp, r1
 80127a6:	2b00      	cmp	r3, #0
 80127a8:	f47f ae08 	bne.w	80123bc <_strtod_l+0x45c>
 80127ac:	9a05      	ldr	r2, [sp, #20]
 80127ae:	2322      	movs	r3, #34	@ 0x22
 80127b0:	6013      	str	r3, [r2, #0]
 80127b2:	e603      	b.n	80123bc <_strtod_l+0x45c>
 80127b4:	08015b80 	.word	0x08015b80
 80127b8:	fffffc02 	.word	0xfffffc02
 80127bc:	39500000 	.word	0x39500000
 80127c0:	7ff00000 	.word	0x7ff00000
 80127c4:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 80127c8:	d165      	bne.n	8012896 <_strtod_l+0x936>
 80127ca:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80127cc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80127d0:	b35a      	cbz	r2, 801282a <_strtod_l+0x8ca>
 80127d2:	4a9f      	ldr	r2, [pc, #636]	@ (8012a50 <_strtod_l+0xaf0>)
 80127d4:	4293      	cmp	r3, r2
 80127d6:	d12b      	bne.n	8012830 <_strtod_l+0x8d0>
 80127d8:	9b08      	ldr	r3, [sp, #32]
 80127da:	4651      	mov	r1, sl
 80127dc:	b303      	cbz	r3, 8012820 <_strtod_l+0x8c0>
 80127de:	4b9d      	ldr	r3, [pc, #628]	@ (8012a54 <_strtod_l+0xaf4>)
 80127e0:	465a      	mov	r2, fp
 80127e2:	4013      	ands	r3, r2
 80127e4:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 80127e8:	f04f 32ff 	mov.w	r2, #4294967295
 80127ec:	d81b      	bhi.n	8012826 <_strtod_l+0x8c6>
 80127ee:	0d1b      	lsrs	r3, r3, #20
 80127f0:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 80127f4:	fa02 f303 	lsl.w	r3, r2, r3
 80127f8:	4299      	cmp	r1, r3
 80127fa:	d119      	bne.n	8012830 <_strtod_l+0x8d0>
 80127fc:	4b96      	ldr	r3, [pc, #600]	@ (8012a58 <_strtod_l+0xaf8>)
 80127fe:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8012800:	429a      	cmp	r2, r3
 8012802:	d102      	bne.n	801280a <_strtod_l+0x8aa>
 8012804:	3101      	adds	r1, #1
 8012806:	f43f adce 	beq.w	80123a6 <_strtod_l+0x446>
 801280a:	4b92      	ldr	r3, [pc, #584]	@ (8012a54 <_strtod_l+0xaf4>)
 801280c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801280e:	401a      	ands	r2, r3
 8012810:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 8012814:	f04f 0a00 	mov.w	sl, #0
 8012818:	9b08      	ldr	r3, [sp, #32]
 801281a:	2b00      	cmp	r3, #0
 801281c:	d1b9      	bne.n	8012792 <_strtod_l+0x832>
 801281e:	e5cd      	b.n	80123bc <_strtod_l+0x45c>
 8012820:	f04f 33ff 	mov.w	r3, #4294967295
 8012824:	e7e8      	b.n	80127f8 <_strtod_l+0x898>
 8012826:	4613      	mov	r3, r2
 8012828:	e7e6      	b.n	80127f8 <_strtod_l+0x898>
 801282a:	ea53 030a 	orrs.w	r3, r3, sl
 801282e:	d0a2      	beq.n	8012776 <_strtod_l+0x816>
 8012830:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8012832:	b1db      	cbz	r3, 801286c <_strtod_l+0x90c>
 8012834:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8012836:	4213      	tst	r3, r2
 8012838:	d0ee      	beq.n	8012818 <_strtod_l+0x8b8>
 801283a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801283c:	9a08      	ldr	r2, [sp, #32]
 801283e:	4650      	mov	r0, sl
 8012840:	4659      	mov	r1, fp
 8012842:	b1bb      	cbz	r3, 8012874 <_strtod_l+0x914>
 8012844:	f7ff fb6e 	bl	8011f24 <sulp>
 8012848:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801284c:	ec53 2b10 	vmov	r2, r3, d0
 8012850:	f7ed fd34 	bl	80002bc <__adddf3>
 8012854:	4682      	mov	sl, r0
 8012856:	468b      	mov	fp, r1
 8012858:	e7de      	b.n	8012818 <_strtod_l+0x8b8>
 801285a:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 801285e:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8012862:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8012866:	f04f 3aff 	mov.w	sl, #4294967295
 801286a:	e7d5      	b.n	8012818 <_strtod_l+0x8b8>
 801286c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801286e:	ea13 0f0a 	tst.w	r3, sl
 8012872:	e7e1      	b.n	8012838 <_strtod_l+0x8d8>
 8012874:	f7ff fb56 	bl	8011f24 <sulp>
 8012878:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801287c:	ec53 2b10 	vmov	r2, r3, d0
 8012880:	f7ed fd1a 	bl	80002b8 <__aeabi_dsub>
 8012884:	2200      	movs	r2, #0
 8012886:	2300      	movs	r3, #0
 8012888:	4682      	mov	sl, r0
 801288a:	468b      	mov	fp, r1
 801288c:	f7ee f934 	bl	8000af8 <__aeabi_dcmpeq>
 8012890:	2800      	cmp	r0, #0
 8012892:	d0c1      	beq.n	8012818 <_strtod_l+0x8b8>
 8012894:	e61a      	b.n	80124cc <_strtod_l+0x56c>
 8012896:	4641      	mov	r1, r8
 8012898:	4620      	mov	r0, r4
 801289a:	f7ff facd 	bl	8011e38 <__ratio>
 801289e:	ec57 6b10 	vmov	r6, r7, d0
 80128a2:	2200      	movs	r2, #0
 80128a4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80128a8:	4630      	mov	r0, r6
 80128aa:	4639      	mov	r1, r7
 80128ac:	f7ee f938 	bl	8000b20 <__aeabi_dcmple>
 80128b0:	2800      	cmp	r0, #0
 80128b2:	d06f      	beq.n	8012994 <_strtod_l+0xa34>
 80128b4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80128b6:	2b00      	cmp	r3, #0
 80128b8:	d17a      	bne.n	80129b0 <_strtod_l+0xa50>
 80128ba:	f1ba 0f00 	cmp.w	sl, #0
 80128be:	d158      	bne.n	8012972 <_strtod_l+0xa12>
 80128c0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80128c2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80128c6:	2b00      	cmp	r3, #0
 80128c8:	d15a      	bne.n	8012980 <_strtod_l+0xa20>
 80128ca:	4b64      	ldr	r3, [pc, #400]	@ (8012a5c <_strtod_l+0xafc>)
 80128cc:	2200      	movs	r2, #0
 80128ce:	4630      	mov	r0, r6
 80128d0:	4639      	mov	r1, r7
 80128d2:	f7ee f91b 	bl	8000b0c <__aeabi_dcmplt>
 80128d6:	2800      	cmp	r0, #0
 80128d8:	d159      	bne.n	801298e <_strtod_l+0xa2e>
 80128da:	4630      	mov	r0, r6
 80128dc:	4639      	mov	r1, r7
 80128de:	4b60      	ldr	r3, [pc, #384]	@ (8012a60 <_strtod_l+0xb00>)
 80128e0:	2200      	movs	r2, #0
 80128e2:	f7ed fea1 	bl	8000628 <__aeabi_dmul>
 80128e6:	4606      	mov	r6, r0
 80128e8:	460f      	mov	r7, r1
 80128ea:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 80128ee:	9606      	str	r6, [sp, #24]
 80128f0:	9307      	str	r3, [sp, #28]
 80128f2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80128f6:	4d57      	ldr	r5, [pc, #348]	@ (8012a54 <_strtod_l+0xaf4>)
 80128f8:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 80128fc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80128fe:	401d      	ands	r5, r3
 8012900:	4b58      	ldr	r3, [pc, #352]	@ (8012a64 <_strtod_l+0xb04>)
 8012902:	429d      	cmp	r5, r3
 8012904:	f040 80b2 	bne.w	8012a6c <_strtod_l+0xb0c>
 8012908:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801290a:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 801290e:	ec4b ab10 	vmov	d0, sl, fp
 8012912:	f7ff f9c9 	bl	8011ca8 <__ulp>
 8012916:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801291a:	ec51 0b10 	vmov	r0, r1, d0
 801291e:	f7ed fe83 	bl	8000628 <__aeabi_dmul>
 8012922:	4652      	mov	r2, sl
 8012924:	465b      	mov	r3, fp
 8012926:	f7ed fcc9 	bl	80002bc <__adddf3>
 801292a:	460b      	mov	r3, r1
 801292c:	4949      	ldr	r1, [pc, #292]	@ (8012a54 <_strtod_l+0xaf4>)
 801292e:	4a4e      	ldr	r2, [pc, #312]	@ (8012a68 <_strtod_l+0xb08>)
 8012930:	4019      	ands	r1, r3
 8012932:	4291      	cmp	r1, r2
 8012934:	4682      	mov	sl, r0
 8012936:	d942      	bls.n	80129be <_strtod_l+0xa5e>
 8012938:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801293a:	4b47      	ldr	r3, [pc, #284]	@ (8012a58 <_strtod_l+0xaf8>)
 801293c:	429a      	cmp	r2, r3
 801293e:	d103      	bne.n	8012948 <_strtod_l+0x9e8>
 8012940:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8012942:	3301      	adds	r3, #1
 8012944:	f43f ad2f 	beq.w	80123a6 <_strtod_l+0x446>
 8012948:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 8012a58 <_strtod_l+0xaf8>
 801294c:	f04f 3aff 	mov.w	sl, #4294967295
 8012950:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8012952:	9805      	ldr	r0, [sp, #20]
 8012954:	f7fe fe7c 	bl	8011650 <_Bfree>
 8012958:	9805      	ldr	r0, [sp, #20]
 801295a:	4649      	mov	r1, r9
 801295c:	f7fe fe78 	bl	8011650 <_Bfree>
 8012960:	9805      	ldr	r0, [sp, #20]
 8012962:	4641      	mov	r1, r8
 8012964:	f7fe fe74 	bl	8011650 <_Bfree>
 8012968:	9805      	ldr	r0, [sp, #20]
 801296a:	4621      	mov	r1, r4
 801296c:	f7fe fe70 	bl	8011650 <_Bfree>
 8012970:	e619      	b.n	80125a6 <_strtod_l+0x646>
 8012972:	f1ba 0f01 	cmp.w	sl, #1
 8012976:	d103      	bne.n	8012980 <_strtod_l+0xa20>
 8012978:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801297a:	2b00      	cmp	r3, #0
 801297c:	f43f ada6 	beq.w	80124cc <_strtod_l+0x56c>
 8012980:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 8012a30 <_strtod_l+0xad0>
 8012984:	4f35      	ldr	r7, [pc, #212]	@ (8012a5c <_strtod_l+0xafc>)
 8012986:	ed8d 7b06 	vstr	d7, [sp, #24]
 801298a:	2600      	movs	r6, #0
 801298c:	e7b1      	b.n	80128f2 <_strtod_l+0x992>
 801298e:	4f34      	ldr	r7, [pc, #208]	@ (8012a60 <_strtod_l+0xb00>)
 8012990:	2600      	movs	r6, #0
 8012992:	e7aa      	b.n	80128ea <_strtod_l+0x98a>
 8012994:	4b32      	ldr	r3, [pc, #200]	@ (8012a60 <_strtod_l+0xb00>)
 8012996:	4630      	mov	r0, r6
 8012998:	4639      	mov	r1, r7
 801299a:	2200      	movs	r2, #0
 801299c:	f7ed fe44 	bl	8000628 <__aeabi_dmul>
 80129a0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80129a2:	4606      	mov	r6, r0
 80129a4:	460f      	mov	r7, r1
 80129a6:	2b00      	cmp	r3, #0
 80129a8:	d09f      	beq.n	80128ea <_strtod_l+0x98a>
 80129aa:	e9cd 6706 	strd	r6, r7, [sp, #24]
 80129ae:	e7a0      	b.n	80128f2 <_strtod_l+0x992>
 80129b0:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8012a38 <_strtod_l+0xad8>
 80129b4:	ed8d 7b06 	vstr	d7, [sp, #24]
 80129b8:	ec57 6b17 	vmov	r6, r7, d7
 80129bc:	e799      	b.n	80128f2 <_strtod_l+0x992>
 80129be:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 80129c2:	9b08      	ldr	r3, [sp, #32]
 80129c4:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 80129c8:	2b00      	cmp	r3, #0
 80129ca:	d1c1      	bne.n	8012950 <_strtod_l+0x9f0>
 80129cc:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80129d0:	0d1b      	lsrs	r3, r3, #20
 80129d2:	051b      	lsls	r3, r3, #20
 80129d4:	429d      	cmp	r5, r3
 80129d6:	d1bb      	bne.n	8012950 <_strtod_l+0x9f0>
 80129d8:	4630      	mov	r0, r6
 80129da:	4639      	mov	r1, r7
 80129dc:	f7ee f984 	bl	8000ce8 <__aeabi_d2lz>
 80129e0:	f7ed fdf4 	bl	80005cc <__aeabi_l2d>
 80129e4:	4602      	mov	r2, r0
 80129e6:	460b      	mov	r3, r1
 80129e8:	4630      	mov	r0, r6
 80129ea:	4639      	mov	r1, r7
 80129ec:	f7ed fc64 	bl	80002b8 <__aeabi_dsub>
 80129f0:	460b      	mov	r3, r1
 80129f2:	4602      	mov	r2, r0
 80129f4:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 80129f8:	f3cb 0613 	ubfx	r6, fp, #0, #20
 80129fc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80129fe:	ea46 060a 	orr.w	r6, r6, sl
 8012a02:	431e      	orrs	r6, r3
 8012a04:	d06f      	beq.n	8012ae6 <_strtod_l+0xb86>
 8012a06:	a30e      	add	r3, pc, #56	@ (adr r3, 8012a40 <_strtod_l+0xae0>)
 8012a08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012a0c:	f7ee f87e 	bl	8000b0c <__aeabi_dcmplt>
 8012a10:	2800      	cmp	r0, #0
 8012a12:	f47f acd3 	bne.w	80123bc <_strtod_l+0x45c>
 8012a16:	a30c      	add	r3, pc, #48	@ (adr r3, 8012a48 <_strtod_l+0xae8>)
 8012a18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012a1c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8012a20:	f7ee f892 	bl	8000b48 <__aeabi_dcmpgt>
 8012a24:	2800      	cmp	r0, #0
 8012a26:	d093      	beq.n	8012950 <_strtod_l+0x9f0>
 8012a28:	e4c8      	b.n	80123bc <_strtod_l+0x45c>
 8012a2a:	bf00      	nop
 8012a2c:	f3af 8000 	nop.w
 8012a30:	00000000 	.word	0x00000000
 8012a34:	bff00000 	.word	0xbff00000
 8012a38:	00000000 	.word	0x00000000
 8012a3c:	3ff00000 	.word	0x3ff00000
 8012a40:	94a03595 	.word	0x94a03595
 8012a44:	3fdfffff 	.word	0x3fdfffff
 8012a48:	35afe535 	.word	0x35afe535
 8012a4c:	3fe00000 	.word	0x3fe00000
 8012a50:	000fffff 	.word	0x000fffff
 8012a54:	7ff00000 	.word	0x7ff00000
 8012a58:	7fefffff 	.word	0x7fefffff
 8012a5c:	3ff00000 	.word	0x3ff00000
 8012a60:	3fe00000 	.word	0x3fe00000
 8012a64:	7fe00000 	.word	0x7fe00000
 8012a68:	7c9fffff 	.word	0x7c9fffff
 8012a6c:	9b08      	ldr	r3, [sp, #32]
 8012a6e:	b323      	cbz	r3, 8012aba <_strtod_l+0xb5a>
 8012a70:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 8012a74:	d821      	bhi.n	8012aba <_strtod_l+0xb5a>
 8012a76:	a328      	add	r3, pc, #160	@ (adr r3, 8012b18 <_strtod_l+0xbb8>)
 8012a78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012a7c:	4630      	mov	r0, r6
 8012a7e:	4639      	mov	r1, r7
 8012a80:	f7ee f84e 	bl	8000b20 <__aeabi_dcmple>
 8012a84:	b1a0      	cbz	r0, 8012ab0 <_strtod_l+0xb50>
 8012a86:	4639      	mov	r1, r7
 8012a88:	4630      	mov	r0, r6
 8012a8a:	f7ee f8a5 	bl	8000bd8 <__aeabi_d2uiz>
 8012a8e:	2801      	cmp	r0, #1
 8012a90:	bf38      	it	cc
 8012a92:	2001      	movcc	r0, #1
 8012a94:	f7ed fd4e 	bl	8000534 <__aeabi_ui2d>
 8012a98:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8012a9a:	4606      	mov	r6, r0
 8012a9c:	460f      	mov	r7, r1
 8012a9e:	b9fb      	cbnz	r3, 8012ae0 <_strtod_l+0xb80>
 8012aa0:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8012aa4:	9014      	str	r0, [sp, #80]	@ 0x50
 8012aa6:	9315      	str	r3, [sp, #84]	@ 0x54
 8012aa8:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 8012aac:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8012ab0:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8012ab2:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 8012ab6:	1b5b      	subs	r3, r3, r5
 8012ab8:	9311      	str	r3, [sp, #68]	@ 0x44
 8012aba:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8012abe:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 8012ac2:	f7ff f8f1 	bl	8011ca8 <__ulp>
 8012ac6:	4650      	mov	r0, sl
 8012ac8:	ec53 2b10 	vmov	r2, r3, d0
 8012acc:	4659      	mov	r1, fp
 8012ace:	f7ed fdab 	bl	8000628 <__aeabi_dmul>
 8012ad2:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8012ad6:	f7ed fbf1 	bl	80002bc <__adddf3>
 8012ada:	4682      	mov	sl, r0
 8012adc:	468b      	mov	fp, r1
 8012ade:	e770      	b.n	80129c2 <_strtod_l+0xa62>
 8012ae0:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 8012ae4:	e7e0      	b.n	8012aa8 <_strtod_l+0xb48>
 8012ae6:	a30e      	add	r3, pc, #56	@ (adr r3, 8012b20 <_strtod_l+0xbc0>)
 8012ae8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012aec:	f7ee f80e 	bl	8000b0c <__aeabi_dcmplt>
 8012af0:	e798      	b.n	8012a24 <_strtod_l+0xac4>
 8012af2:	2300      	movs	r3, #0
 8012af4:	930e      	str	r3, [sp, #56]	@ 0x38
 8012af6:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8012af8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8012afa:	6013      	str	r3, [r2, #0]
 8012afc:	f7ff ba6d 	b.w	8011fda <_strtod_l+0x7a>
 8012b00:	2a65      	cmp	r2, #101	@ 0x65
 8012b02:	f43f ab68 	beq.w	80121d6 <_strtod_l+0x276>
 8012b06:	2a45      	cmp	r2, #69	@ 0x45
 8012b08:	f43f ab65 	beq.w	80121d6 <_strtod_l+0x276>
 8012b0c:	2301      	movs	r3, #1
 8012b0e:	f7ff bba0 	b.w	8012252 <_strtod_l+0x2f2>
 8012b12:	bf00      	nop
 8012b14:	f3af 8000 	nop.w
 8012b18:	ffc00000 	.word	0xffc00000
 8012b1c:	41dfffff 	.word	0x41dfffff
 8012b20:	94a03595 	.word	0x94a03595
 8012b24:	3fcfffff 	.word	0x3fcfffff

08012b28 <_strtod_r>:
 8012b28:	4b01      	ldr	r3, [pc, #4]	@ (8012b30 <_strtod_r+0x8>)
 8012b2a:	f7ff ba19 	b.w	8011f60 <_strtod_l>
 8012b2e:	bf00      	nop
 8012b30:	2000d190 	.word	0x2000d190

08012b34 <_strtol_l.isra.0>:
 8012b34:	2b24      	cmp	r3, #36	@ 0x24
 8012b36:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012b3a:	4686      	mov	lr, r0
 8012b3c:	4690      	mov	r8, r2
 8012b3e:	d801      	bhi.n	8012b44 <_strtol_l.isra.0+0x10>
 8012b40:	2b01      	cmp	r3, #1
 8012b42:	d106      	bne.n	8012b52 <_strtol_l.isra.0+0x1e>
 8012b44:	f7fd fd8a 	bl	801065c <__errno>
 8012b48:	2316      	movs	r3, #22
 8012b4a:	6003      	str	r3, [r0, #0]
 8012b4c:	2000      	movs	r0, #0
 8012b4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012b52:	4834      	ldr	r0, [pc, #208]	@ (8012c24 <_strtol_l.isra.0+0xf0>)
 8012b54:	460d      	mov	r5, r1
 8012b56:	462a      	mov	r2, r5
 8012b58:	f815 4b01 	ldrb.w	r4, [r5], #1
 8012b5c:	5d06      	ldrb	r6, [r0, r4]
 8012b5e:	f016 0608 	ands.w	r6, r6, #8
 8012b62:	d1f8      	bne.n	8012b56 <_strtol_l.isra.0+0x22>
 8012b64:	2c2d      	cmp	r4, #45	@ 0x2d
 8012b66:	d110      	bne.n	8012b8a <_strtol_l.isra.0+0x56>
 8012b68:	782c      	ldrb	r4, [r5, #0]
 8012b6a:	2601      	movs	r6, #1
 8012b6c:	1c95      	adds	r5, r2, #2
 8012b6e:	f033 0210 	bics.w	r2, r3, #16
 8012b72:	d115      	bne.n	8012ba0 <_strtol_l.isra.0+0x6c>
 8012b74:	2c30      	cmp	r4, #48	@ 0x30
 8012b76:	d10d      	bne.n	8012b94 <_strtol_l.isra.0+0x60>
 8012b78:	782a      	ldrb	r2, [r5, #0]
 8012b7a:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8012b7e:	2a58      	cmp	r2, #88	@ 0x58
 8012b80:	d108      	bne.n	8012b94 <_strtol_l.isra.0+0x60>
 8012b82:	786c      	ldrb	r4, [r5, #1]
 8012b84:	3502      	adds	r5, #2
 8012b86:	2310      	movs	r3, #16
 8012b88:	e00a      	b.n	8012ba0 <_strtol_l.isra.0+0x6c>
 8012b8a:	2c2b      	cmp	r4, #43	@ 0x2b
 8012b8c:	bf04      	itt	eq
 8012b8e:	782c      	ldrbeq	r4, [r5, #0]
 8012b90:	1c95      	addeq	r5, r2, #2
 8012b92:	e7ec      	b.n	8012b6e <_strtol_l.isra.0+0x3a>
 8012b94:	2b00      	cmp	r3, #0
 8012b96:	d1f6      	bne.n	8012b86 <_strtol_l.isra.0+0x52>
 8012b98:	2c30      	cmp	r4, #48	@ 0x30
 8012b9a:	bf14      	ite	ne
 8012b9c:	230a      	movne	r3, #10
 8012b9e:	2308      	moveq	r3, #8
 8012ba0:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8012ba4:	f10c 3cff 	add.w	ip, ip, #4294967295
 8012ba8:	2200      	movs	r2, #0
 8012baa:	fbbc f9f3 	udiv	r9, ip, r3
 8012bae:	4610      	mov	r0, r2
 8012bb0:	fb03 ca19 	mls	sl, r3, r9, ip
 8012bb4:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8012bb8:	2f09      	cmp	r7, #9
 8012bba:	d80f      	bhi.n	8012bdc <_strtol_l.isra.0+0xa8>
 8012bbc:	463c      	mov	r4, r7
 8012bbe:	42a3      	cmp	r3, r4
 8012bc0:	dd1b      	ble.n	8012bfa <_strtol_l.isra.0+0xc6>
 8012bc2:	1c57      	adds	r7, r2, #1
 8012bc4:	d007      	beq.n	8012bd6 <_strtol_l.isra.0+0xa2>
 8012bc6:	4581      	cmp	r9, r0
 8012bc8:	d314      	bcc.n	8012bf4 <_strtol_l.isra.0+0xc0>
 8012bca:	d101      	bne.n	8012bd0 <_strtol_l.isra.0+0x9c>
 8012bcc:	45a2      	cmp	sl, r4
 8012bce:	db11      	blt.n	8012bf4 <_strtol_l.isra.0+0xc0>
 8012bd0:	fb00 4003 	mla	r0, r0, r3, r4
 8012bd4:	2201      	movs	r2, #1
 8012bd6:	f815 4b01 	ldrb.w	r4, [r5], #1
 8012bda:	e7eb      	b.n	8012bb4 <_strtol_l.isra.0+0x80>
 8012bdc:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8012be0:	2f19      	cmp	r7, #25
 8012be2:	d801      	bhi.n	8012be8 <_strtol_l.isra.0+0xb4>
 8012be4:	3c37      	subs	r4, #55	@ 0x37
 8012be6:	e7ea      	b.n	8012bbe <_strtol_l.isra.0+0x8a>
 8012be8:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8012bec:	2f19      	cmp	r7, #25
 8012bee:	d804      	bhi.n	8012bfa <_strtol_l.isra.0+0xc6>
 8012bf0:	3c57      	subs	r4, #87	@ 0x57
 8012bf2:	e7e4      	b.n	8012bbe <_strtol_l.isra.0+0x8a>
 8012bf4:	f04f 32ff 	mov.w	r2, #4294967295
 8012bf8:	e7ed      	b.n	8012bd6 <_strtol_l.isra.0+0xa2>
 8012bfa:	1c53      	adds	r3, r2, #1
 8012bfc:	d108      	bne.n	8012c10 <_strtol_l.isra.0+0xdc>
 8012bfe:	2322      	movs	r3, #34	@ 0x22
 8012c00:	f8ce 3000 	str.w	r3, [lr]
 8012c04:	4660      	mov	r0, ip
 8012c06:	f1b8 0f00 	cmp.w	r8, #0
 8012c0a:	d0a0      	beq.n	8012b4e <_strtol_l.isra.0+0x1a>
 8012c0c:	1e69      	subs	r1, r5, #1
 8012c0e:	e006      	b.n	8012c1e <_strtol_l.isra.0+0xea>
 8012c10:	b106      	cbz	r6, 8012c14 <_strtol_l.isra.0+0xe0>
 8012c12:	4240      	negs	r0, r0
 8012c14:	f1b8 0f00 	cmp.w	r8, #0
 8012c18:	d099      	beq.n	8012b4e <_strtol_l.isra.0+0x1a>
 8012c1a:	2a00      	cmp	r2, #0
 8012c1c:	d1f6      	bne.n	8012c0c <_strtol_l.isra.0+0xd8>
 8012c1e:	f8c8 1000 	str.w	r1, [r8]
 8012c22:	e794      	b.n	8012b4e <_strtol_l.isra.0+0x1a>
 8012c24:	08015ba9 	.word	0x08015ba9

08012c28 <_strtol_r>:
 8012c28:	f7ff bf84 	b.w	8012b34 <_strtol_l.isra.0>

08012c2c <__ssputs_r>:
 8012c2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012c30:	688e      	ldr	r6, [r1, #8]
 8012c32:	461f      	mov	r7, r3
 8012c34:	42be      	cmp	r6, r7
 8012c36:	680b      	ldr	r3, [r1, #0]
 8012c38:	4682      	mov	sl, r0
 8012c3a:	460c      	mov	r4, r1
 8012c3c:	4690      	mov	r8, r2
 8012c3e:	d82d      	bhi.n	8012c9c <__ssputs_r+0x70>
 8012c40:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8012c44:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8012c48:	d026      	beq.n	8012c98 <__ssputs_r+0x6c>
 8012c4a:	6965      	ldr	r5, [r4, #20]
 8012c4c:	6909      	ldr	r1, [r1, #16]
 8012c4e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8012c52:	eba3 0901 	sub.w	r9, r3, r1
 8012c56:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8012c5a:	1c7b      	adds	r3, r7, #1
 8012c5c:	444b      	add	r3, r9
 8012c5e:	106d      	asrs	r5, r5, #1
 8012c60:	429d      	cmp	r5, r3
 8012c62:	bf38      	it	cc
 8012c64:	461d      	movcc	r5, r3
 8012c66:	0553      	lsls	r3, r2, #21
 8012c68:	d527      	bpl.n	8012cba <__ssputs_r+0x8e>
 8012c6a:	4629      	mov	r1, r5
 8012c6c:	f7fe fc24 	bl	80114b8 <_malloc_r>
 8012c70:	4606      	mov	r6, r0
 8012c72:	b360      	cbz	r0, 8012cce <__ssputs_r+0xa2>
 8012c74:	6921      	ldr	r1, [r4, #16]
 8012c76:	464a      	mov	r2, r9
 8012c78:	f7fd fd1d 	bl	80106b6 <memcpy>
 8012c7c:	89a3      	ldrh	r3, [r4, #12]
 8012c7e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8012c82:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8012c86:	81a3      	strh	r3, [r4, #12]
 8012c88:	6126      	str	r6, [r4, #16]
 8012c8a:	6165      	str	r5, [r4, #20]
 8012c8c:	444e      	add	r6, r9
 8012c8e:	eba5 0509 	sub.w	r5, r5, r9
 8012c92:	6026      	str	r6, [r4, #0]
 8012c94:	60a5      	str	r5, [r4, #8]
 8012c96:	463e      	mov	r6, r7
 8012c98:	42be      	cmp	r6, r7
 8012c9a:	d900      	bls.n	8012c9e <__ssputs_r+0x72>
 8012c9c:	463e      	mov	r6, r7
 8012c9e:	6820      	ldr	r0, [r4, #0]
 8012ca0:	4632      	mov	r2, r6
 8012ca2:	4641      	mov	r1, r8
 8012ca4:	f000 fad0 	bl	8013248 <memmove>
 8012ca8:	68a3      	ldr	r3, [r4, #8]
 8012caa:	1b9b      	subs	r3, r3, r6
 8012cac:	60a3      	str	r3, [r4, #8]
 8012cae:	6823      	ldr	r3, [r4, #0]
 8012cb0:	4433      	add	r3, r6
 8012cb2:	6023      	str	r3, [r4, #0]
 8012cb4:	2000      	movs	r0, #0
 8012cb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012cba:	462a      	mov	r2, r5
 8012cbc:	f000 fe91 	bl	80139e2 <_realloc_r>
 8012cc0:	4606      	mov	r6, r0
 8012cc2:	2800      	cmp	r0, #0
 8012cc4:	d1e0      	bne.n	8012c88 <__ssputs_r+0x5c>
 8012cc6:	6921      	ldr	r1, [r4, #16]
 8012cc8:	4650      	mov	r0, sl
 8012cca:	f7fe fb81 	bl	80113d0 <_free_r>
 8012cce:	230c      	movs	r3, #12
 8012cd0:	f8ca 3000 	str.w	r3, [sl]
 8012cd4:	89a3      	ldrh	r3, [r4, #12]
 8012cd6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8012cda:	81a3      	strh	r3, [r4, #12]
 8012cdc:	f04f 30ff 	mov.w	r0, #4294967295
 8012ce0:	e7e9      	b.n	8012cb6 <__ssputs_r+0x8a>
	...

08012ce4 <_svfiprintf_r>:
 8012ce4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012ce8:	4698      	mov	r8, r3
 8012cea:	898b      	ldrh	r3, [r1, #12]
 8012cec:	061b      	lsls	r3, r3, #24
 8012cee:	b09d      	sub	sp, #116	@ 0x74
 8012cf0:	4607      	mov	r7, r0
 8012cf2:	460d      	mov	r5, r1
 8012cf4:	4614      	mov	r4, r2
 8012cf6:	d510      	bpl.n	8012d1a <_svfiprintf_r+0x36>
 8012cf8:	690b      	ldr	r3, [r1, #16]
 8012cfa:	b973      	cbnz	r3, 8012d1a <_svfiprintf_r+0x36>
 8012cfc:	2140      	movs	r1, #64	@ 0x40
 8012cfe:	f7fe fbdb 	bl	80114b8 <_malloc_r>
 8012d02:	6028      	str	r0, [r5, #0]
 8012d04:	6128      	str	r0, [r5, #16]
 8012d06:	b930      	cbnz	r0, 8012d16 <_svfiprintf_r+0x32>
 8012d08:	230c      	movs	r3, #12
 8012d0a:	603b      	str	r3, [r7, #0]
 8012d0c:	f04f 30ff 	mov.w	r0, #4294967295
 8012d10:	b01d      	add	sp, #116	@ 0x74
 8012d12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012d16:	2340      	movs	r3, #64	@ 0x40
 8012d18:	616b      	str	r3, [r5, #20]
 8012d1a:	2300      	movs	r3, #0
 8012d1c:	9309      	str	r3, [sp, #36]	@ 0x24
 8012d1e:	2320      	movs	r3, #32
 8012d20:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8012d24:	f8cd 800c 	str.w	r8, [sp, #12]
 8012d28:	2330      	movs	r3, #48	@ 0x30
 8012d2a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8012ec8 <_svfiprintf_r+0x1e4>
 8012d2e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8012d32:	f04f 0901 	mov.w	r9, #1
 8012d36:	4623      	mov	r3, r4
 8012d38:	469a      	mov	sl, r3
 8012d3a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012d3e:	b10a      	cbz	r2, 8012d44 <_svfiprintf_r+0x60>
 8012d40:	2a25      	cmp	r2, #37	@ 0x25
 8012d42:	d1f9      	bne.n	8012d38 <_svfiprintf_r+0x54>
 8012d44:	ebba 0b04 	subs.w	fp, sl, r4
 8012d48:	d00b      	beq.n	8012d62 <_svfiprintf_r+0x7e>
 8012d4a:	465b      	mov	r3, fp
 8012d4c:	4622      	mov	r2, r4
 8012d4e:	4629      	mov	r1, r5
 8012d50:	4638      	mov	r0, r7
 8012d52:	f7ff ff6b 	bl	8012c2c <__ssputs_r>
 8012d56:	3001      	adds	r0, #1
 8012d58:	f000 80a7 	beq.w	8012eaa <_svfiprintf_r+0x1c6>
 8012d5c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8012d5e:	445a      	add	r2, fp
 8012d60:	9209      	str	r2, [sp, #36]	@ 0x24
 8012d62:	f89a 3000 	ldrb.w	r3, [sl]
 8012d66:	2b00      	cmp	r3, #0
 8012d68:	f000 809f 	beq.w	8012eaa <_svfiprintf_r+0x1c6>
 8012d6c:	2300      	movs	r3, #0
 8012d6e:	f04f 32ff 	mov.w	r2, #4294967295
 8012d72:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8012d76:	f10a 0a01 	add.w	sl, sl, #1
 8012d7a:	9304      	str	r3, [sp, #16]
 8012d7c:	9307      	str	r3, [sp, #28]
 8012d7e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8012d82:	931a      	str	r3, [sp, #104]	@ 0x68
 8012d84:	4654      	mov	r4, sl
 8012d86:	2205      	movs	r2, #5
 8012d88:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012d8c:	484e      	ldr	r0, [pc, #312]	@ (8012ec8 <_svfiprintf_r+0x1e4>)
 8012d8e:	f7ed fa37 	bl	8000200 <memchr>
 8012d92:	9a04      	ldr	r2, [sp, #16]
 8012d94:	b9d8      	cbnz	r0, 8012dce <_svfiprintf_r+0xea>
 8012d96:	06d0      	lsls	r0, r2, #27
 8012d98:	bf44      	itt	mi
 8012d9a:	2320      	movmi	r3, #32
 8012d9c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8012da0:	0711      	lsls	r1, r2, #28
 8012da2:	bf44      	itt	mi
 8012da4:	232b      	movmi	r3, #43	@ 0x2b
 8012da6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8012daa:	f89a 3000 	ldrb.w	r3, [sl]
 8012dae:	2b2a      	cmp	r3, #42	@ 0x2a
 8012db0:	d015      	beq.n	8012dde <_svfiprintf_r+0xfa>
 8012db2:	9a07      	ldr	r2, [sp, #28]
 8012db4:	4654      	mov	r4, sl
 8012db6:	2000      	movs	r0, #0
 8012db8:	f04f 0c0a 	mov.w	ip, #10
 8012dbc:	4621      	mov	r1, r4
 8012dbe:	f811 3b01 	ldrb.w	r3, [r1], #1
 8012dc2:	3b30      	subs	r3, #48	@ 0x30
 8012dc4:	2b09      	cmp	r3, #9
 8012dc6:	d94b      	bls.n	8012e60 <_svfiprintf_r+0x17c>
 8012dc8:	b1b0      	cbz	r0, 8012df8 <_svfiprintf_r+0x114>
 8012dca:	9207      	str	r2, [sp, #28]
 8012dcc:	e014      	b.n	8012df8 <_svfiprintf_r+0x114>
 8012dce:	eba0 0308 	sub.w	r3, r0, r8
 8012dd2:	fa09 f303 	lsl.w	r3, r9, r3
 8012dd6:	4313      	orrs	r3, r2
 8012dd8:	9304      	str	r3, [sp, #16]
 8012dda:	46a2      	mov	sl, r4
 8012ddc:	e7d2      	b.n	8012d84 <_svfiprintf_r+0xa0>
 8012dde:	9b03      	ldr	r3, [sp, #12]
 8012de0:	1d19      	adds	r1, r3, #4
 8012de2:	681b      	ldr	r3, [r3, #0]
 8012de4:	9103      	str	r1, [sp, #12]
 8012de6:	2b00      	cmp	r3, #0
 8012de8:	bfbb      	ittet	lt
 8012dea:	425b      	neglt	r3, r3
 8012dec:	f042 0202 	orrlt.w	r2, r2, #2
 8012df0:	9307      	strge	r3, [sp, #28]
 8012df2:	9307      	strlt	r3, [sp, #28]
 8012df4:	bfb8      	it	lt
 8012df6:	9204      	strlt	r2, [sp, #16]
 8012df8:	7823      	ldrb	r3, [r4, #0]
 8012dfa:	2b2e      	cmp	r3, #46	@ 0x2e
 8012dfc:	d10a      	bne.n	8012e14 <_svfiprintf_r+0x130>
 8012dfe:	7863      	ldrb	r3, [r4, #1]
 8012e00:	2b2a      	cmp	r3, #42	@ 0x2a
 8012e02:	d132      	bne.n	8012e6a <_svfiprintf_r+0x186>
 8012e04:	9b03      	ldr	r3, [sp, #12]
 8012e06:	1d1a      	adds	r2, r3, #4
 8012e08:	681b      	ldr	r3, [r3, #0]
 8012e0a:	9203      	str	r2, [sp, #12]
 8012e0c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8012e10:	3402      	adds	r4, #2
 8012e12:	9305      	str	r3, [sp, #20]
 8012e14:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8012ed8 <_svfiprintf_r+0x1f4>
 8012e18:	7821      	ldrb	r1, [r4, #0]
 8012e1a:	2203      	movs	r2, #3
 8012e1c:	4650      	mov	r0, sl
 8012e1e:	f7ed f9ef 	bl	8000200 <memchr>
 8012e22:	b138      	cbz	r0, 8012e34 <_svfiprintf_r+0x150>
 8012e24:	9b04      	ldr	r3, [sp, #16]
 8012e26:	eba0 000a 	sub.w	r0, r0, sl
 8012e2a:	2240      	movs	r2, #64	@ 0x40
 8012e2c:	4082      	lsls	r2, r0
 8012e2e:	4313      	orrs	r3, r2
 8012e30:	3401      	adds	r4, #1
 8012e32:	9304      	str	r3, [sp, #16]
 8012e34:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012e38:	4824      	ldr	r0, [pc, #144]	@ (8012ecc <_svfiprintf_r+0x1e8>)
 8012e3a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8012e3e:	2206      	movs	r2, #6
 8012e40:	f7ed f9de 	bl	8000200 <memchr>
 8012e44:	2800      	cmp	r0, #0
 8012e46:	d036      	beq.n	8012eb6 <_svfiprintf_r+0x1d2>
 8012e48:	4b21      	ldr	r3, [pc, #132]	@ (8012ed0 <_svfiprintf_r+0x1ec>)
 8012e4a:	bb1b      	cbnz	r3, 8012e94 <_svfiprintf_r+0x1b0>
 8012e4c:	9b03      	ldr	r3, [sp, #12]
 8012e4e:	3307      	adds	r3, #7
 8012e50:	f023 0307 	bic.w	r3, r3, #7
 8012e54:	3308      	adds	r3, #8
 8012e56:	9303      	str	r3, [sp, #12]
 8012e58:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012e5a:	4433      	add	r3, r6
 8012e5c:	9309      	str	r3, [sp, #36]	@ 0x24
 8012e5e:	e76a      	b.n	8012d36 <_svfiprintf_r+0x52>
 8012e60:	fb0c 3202 	mla	r2, ip, r2, r3
 8012e64:	460c      	mov	r4, r1
 8012e66:	2001      	movs	r0, #1
 8012e68:	e7a8      	b.n	8012dbc <_svfiprintf_r+0xd8>
 8012e6a:	2300      	movs	r3, #0
 8012e6c:	3401      	adds	r4, #1
 8012e6e:	9305      	str	r3, [sp, #20]
 8012e70:	4619      	mov	r1, r3
 8012e72:	f04f 0c0a 	mov.w	ip, #10
 8012e76:	4620      	mov	r0, r4
 8012e78:	f810 2b01 	ldrb.w	r2, [r0], #1
 8012e7c:	3a30      	subs	r2, #48	@ 0x30
 8012e7e:	2a09      	cmp	r2, #9
 8012e80:	d903      	bls.n	8012e8a <_svfiprintf_r+0x1a6>
 8012e82:	2b00      	cmp	r3, #0
 8012e84:	d0c6      	beq.n	8012e14 <_svfiprintf_r+0x130>
 8012e86:	9105      	str	r1, [sp, #20]
 8012e88:	e7c4      	b.n	8012e14 <_svfiprintf_r+0x130>
 8012e8a:	fb0c 2101 	mla	r1, ip, r1, r2
 8012e8e:	4604      	mov	r4, r0
 8012e90:	2301      	movs	r3, #1
 8012e92:	e7f0      	b.n	8012e76 <_svfiprintf_r+0x192>
 8012e94:	ab03      	add	r3, sp, #12
 8012e96:	9300      	str	r3, [sp, #0]
 8012e98:	462a      	mov	r2, r5
 8012e9a:	4b0e      	ldr	r3, [pc, #56]	@ (8012ed4 <_svfiprintf_r+0x1f0>)
 8012e9c:	a904      	add	r1, sp, #16
 8012e9e:	4638      	mov	r0, r7
 8012ea0:	f7fc faa4 	bl	800f3ec <_printf_float>
 8012ea4:	1c42      	adds	r2, r0, #1
 8012ea6:	4606      	mov	r6, r0
 8012ea8:	d1d6      	bne.n	8012e58 <_svfiprintf_r+0x174>
 8012eaa:	89ab      	ldrh	r3, [r5, #12]
 8012eac:	065b      	lsls	r3, r3, #25
 8012eae:	f53f af2d 	bmi.w	8012d0c <_svfiprintf_r+0x28>
 8012eb2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8012eb4:	e72c      	b.n	8012d10 <_svfiprintf_r+0x2c>
 8012eb6:	ab03      	add	r3, sp, #12
 8012eb8:	9300      	str	r3, [sp, #0]
 8012eba:	462a      	mov	r2, r5
 8012ebc:	4b05      	ldr	r3, [pc, #20]	@ (8012ed4 <_svfiprintf_r+0x1f0>)
 8012ebe:	a904      	add	r1, sp, #16
 8012ec0:	4638      	mov	r0, r7
 8012ec2:	f7fc fd2b 	bl	800f91c <_printf_i>
 8012ec6:	e7ed      	b.n	8012ea4 <_svfiprintf_r+0x1c0>
 8012ec8:	080159e1 	.word	0x080159e1
 8012ecc:	080159eb 	.word	0x080159eb
 8012ed0:	0800f3ed 	.word	0x0800f3ed
 8012ed4:	08012c2d 	.word	0x08012c2d
 8012ed8:	080159e7 	.word	0x080159e7

08012edc <__sfputc_r>:
 8012edc:	6893      	ldr	r3, [r2, #8]
 8012ede:	3b01      	subs	r3, #1
 8012ee0:	2b00      	cmp	r3, #0
 8012ee2:	b410      	push	{r4}
 8012ee4:	6093      	str	r3, [r2, #8]
 8012ee6:	da08      	bge.n	8012efa <__sfputc_r+0x1e>
 8012ee8:	6994      	ldr	r4, [r2, #24]
 8012eea:	42a3      	cmp	r3, r4
 8012eec:	db01      	blt.n	8012ef2 <__sfputc_r+0x16>
 8012eee:	290a      	cmp	r1, #10
 8012ef0:	d103      	bne.n	8012efa <__sfputc_r+0x1e>
 8012ef2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012ef6:	f7fd baca 	b.w	801048e <__swbuf_r>
 8012efa:	6813      	ldr	r3, [r2, #0]
 8012efc:	1c58      	adds	r0, r3, #1
 8012efe:	6010      	str	r0, [r2, #0]
 8012f00:	7019      	strb	r1, [r3, #0]
 8012f02:	4608      	mov	r0, r1
 8012f04:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012f08:	4770      	bx	lr

08012f0a <__sfputs_r>:
 8012f0a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012f0c:	4606      	mov	r6, r0
 8012f0e:	460f      	mov	r7, r1
 8012f10:	4614      	mov	r4, r2
 8012f12:	18d5      	adds	r5, r2, r3
 8012f14:	42ac      	cmp	r4, r5
 8012f16:	d101      	bne.n	8012f1c <__sfputs_r+0x12>
 8012f18:	2000      	movs	r0, #0
 8012f1a:	e007      	b.n	8012f2c <__sfputs_r+0x22>
 8012f1c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012f20:	463a      	mov	r2, r7
 8012f22:	4630      	mov	r0, r6
 8012f24:	f7ff ffda 	bl	8012edc <__sfputc_r>
 8012f28:	1c43      	adds	r3, r0, #1
 8012f2a:	d1f3      	bne.n	8012f14 <__sfputs_r+0xa>
 8012f2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08012f30 <_vfiprintf_r>:
 8012f30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012f34:	460d      	mov	r5, r1
 8012f36:	b09d      	sub	sp, #116	@ 0x74
 8012f38:	4614      	mov	r4, r2
 8012f3a:	4698      	mov	r8, r3
 8012f3c:	4606      	mov	r6, r0
 8012f3e:	b118      	cbz	r0, 8012f48 <_vfiprintf_r+0x18>
 8012f40:	6a03      	ldr	r3, [r0, #32]
 8012f42:	b90b      	cbnz	r3, 8012f48 <_vfiprintf_r+0x18>
 8012f44:	f7fd f962 	bl	801020c <__sinit>
 8012f48:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8012f4a:	07d9      	lsls	r1, r3, #31
 8012f4c:	d405      	bmi.n	8012f5a <_vfiprintf_r+0x2a>
 8012f4e:	89ab      	ldrh	r3, [r5, #12]
 8012f50:	059a      	lsls	r2, r3, #22
 8012f52:	d402      	bmi.n	8012f5a <_vfiprintf_r+0x2a>
 8012f54:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8012f56:	f7fd fbac 	bl	80106b2 <__retarget_lock_acquire_recursive>
 8012f5a:	89ab      	ldrh	r3, [r5, #12]
 8012f5c:	071b      	lsls	r3, r3, #28
 8012f5e:	d501      	bpl.n	8012f64 <_vfiprintf_r+0x34>
 8012f60:	692b      	ldr	r3, [r5, #16]
 8012f62:	b99b      	cbnz	r3, 8012f8c <_vfiprintf_r+0x5c>
 8012f64:	4629      	mov	r1, r5
 8012f66:	4630      	mov	r0, r6
 8012f68:	f7fd fad0 	bl	801050c <__swsetup_r>
 8012f6c:	b170      	cbz	r0, 8012f8c <_vfiprintf_r+0x5c>
 8012f6e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8012f70:	07dc      	lsls	r4, r3, #31
 8012f72:	d504      	bpl.n	8012f7e <_vfiprintf_r+0x4e>
 8012f74:	f04f 30ff 	mov.w	r0, #4294967295
 8012f78:	b01d      	add	sp, #116	@ 0x74
 8012f7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012f7e:	89ab      	ldrh	r3, [r5, #12]
 8012f80:	0598      	lsls	r0, r3, #22
 8012f82:	d4f7      	bmi.n	8012f74 <_vfiprintf_r+0x44>
 8012f84:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8012f86:	f7fd fb95 	bl	80106b4 <__retarget_lock_release_recursive>
 8012f8a:	e7f3      	b.n	8012f74 <_vfiprintf_r+0x44>
 8012f8c:	2300      	movs	r3, #0
 8012f8e:	9309      	str	r3, [sp, #36]	@ 0x24
 8012f90:	2320      	movs	r3, #32
 8012f92:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8012f96:	f8cd 800c 	str.w	r8, [sp, #12]
 8012f9a:	2330      	movs	r3, #48	@ 0x30
 8012f9c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 801314c <_vfiprintf_r+0x21c>
 8012fa0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8012fa4:	f04f 0901 	mov.w	r9, #1
 8012fa8:	4623      	mov	r3, r4
 8012faa:	469a      	mov	sl, r3
 8012fac:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012fb0:	b10a      	cbz	r2, 8012fb6 <_vfiprintf_r+0x86>
 8012fb2:	2a25      	cmp	r2, #37	@ 0x25
 8012fb4:	d1f9      	bne.n	8012faa <_vfiprintf_r+0x7a>
 8012fb6:	ebba 0b04 	subs.w	fp, sl, r4
 8012fba:	d00b      	beq.n	8012fd4 <_vfiprintf_r+0xa4>
 8012fbc:	465b      	mov	r3, fp
 8012fbe:	4622      	mov	r2, r4
 8012fc0:	4629      	mov	r1, r5
 8012fc2:	4630      	mov	r0, r6
 8012fc4:	f7ff ffa1 	bl	8012f0a <__sfputs_r>
 8012fc8:	3001      	adds	r0, #1
 8012fca:	f000 80a7 	beq.w	801311c <_vfiprintf_r+0x1ec>
 8012fce:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8012fd0:	445a      	add	r2, fp
 8012fd2:	9209      	str	r2, [sp, #36]	@ 0x24
 8012fd4:	f89a 3000 	ldrb.w	r3, [sl]
 8012fd8:	2b00      	cmp	r3, #0
 8012fda:	f000 809f 	beq.w	801311c <_vfiprintf_r+0x1ec>
 8012fde:	2300      	movs	r3, #0
 8012fe0:	f04f 32ff 	mov.w	r2, #4294967295
 8012fe4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8012fe8:	f10a 0a01 	add.w	sl, sl, #1
 8012fec:	9304      	str	r3, [sp, #16]
 8012fee:	9307      	str	r3, [sp, #28]
 8012ff0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8012ff4:	931a      	str	r3, [sp, #104]	@ 0x68
 8012ff6:	4654      	mov	r4, sl
 8012ff8:	2205      	movs	r2, #5
 8012ffa:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012ffe:	4853      	ldr	r0, [pc, #332]	@ (801314c <_vfiprintf_r+0x21c>)
 8013000:	f7ed f8fe 	bl	8000200 <memchr>
 8013004:	9a04      	ldr	r2, [sp, #16]
 8013006:	b9d8      	cbnz	r0, 8013040 <_vfiprintf_r+0x110>
 8013008:	06d1      	lsls	r1, r2, #27
 801300a:	bf44      	itt	mi
 801300c:	2320      	movmi	r3, #32
 801300e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8013012:	0713      	lsls	r3, r2, #28
 8013014:	bf44      	itt	mi
 8013016:	232b      	movmi	r3, #43	@ 0x2b
 8013018:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801301c:	f89a 3000 	ldrb.w	r3, [sl]
 8013020:	2b2a      	cmp	r3, #42	@ 0x2a
 8013022:	d015      	beq.n	8013050 <_vfiprintf_r+0x120>
 8013024:	9a07      	ldr	r2, [sp, #28]
 8013026:	4654      	mov	r4, sl
 8013028:	2000      	movs	r0, #0
 801302a:	f04f 0c0a 	mov.w	ip, #10
 801302e:	4621      	mov	r1, r4
 8013030:	f811 3b01 	ldrb.w	r3, [r1], #1
 8013034:	3b30      	subs	r3, #48	@ 0x30
 8013036:	2b09      	cmp	r3, #9
 8013038:	d94b      	bls.n	80130d2 <_vfiprintf_r+0x1a2>
 801303a:	b1b0      	cbz	r0, 801306a <_vfiprintf_r+0x13a>
 801303c:	9207      	str	r2, [sp, #28]
 801303e:	e014      	b.n	801306a <_vfiprintf_r+0x13a>
 8013040:	eba0 0308 	sub.w	r3, r0, r8
 8013044:	fa09 f303 	lsl.w	r3, r9, r3
 8013048:	4313      	orrs	r3, r2
 801304a:	9304      	str	r3, [sp, #16]
 801304c:	46a2      	mov	sl, r4
 801304e:	e7d2      	b.n	8012ff6 <_vfiprintf_r+0xc6>
 8013050:	9b03      	ldr	r3, [sp, #12]
 8013052:	1d19      	adds	r1, r3, #4
 8013054:	681b      	ldr	r3, [r3, #0]
 8013056:	9103      	str	r1, [sp, #12]
 8013058:	2b00      	cmp	r3, #0
 801305a:	bfbb      	ittet	lt
 801305c:	425b      	neglt	r3, r3
 801305e:	f042 0202 	orrlt.w	r2, r2, #2
 8013062:	9307      	strge	r3, [sp, #28]
 8013064:	9307      	strlt	r3, [sp, #28]
 8013066:	bfb8      	it	lt
 8013068:	9204      	strlt	r2, [sp, #16]
 801306a:	7823      	ldrb	r3, [r4, #0]
 801306c:	2b2e      	cmp	r3, #46	@ 0x2e
 801306e:	d10a      	bne.n	8013086 <_vfiprintf_r+0x156>
 8013070:	7863      	ldrb	r3, [r4, #1]
 8013072:	2b2a      	cmp	r3, #42	@ 0x2a
 8013074:	d132      	bne.n	80130dc <_vfiprintf_r+0x1ac>
 8013076:	9b03      	ldr	r3, [sp, #12]
 8013078:	1d1a      	adds	r2, r3, #4
 801307a:	681b      	ldr	r3, [r3, #0]
 801307c:	9203      	str	r2, [sp, #12]
 801307e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8013082:	3402      	adds	r4, #2
 8013084:	9305      	str	r3, [sp, #20]
 8013086:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 801315c <_vfiprintf_r+0x22c>
 801308a:	7821      	ldrb	r1, [r4, #0]
 801308c:	2203      	movs	r2, #3
 801308e:	4650      	mov	r0, sl
 8013090:	f7ed f8b6 	bl	8000200 <memchr>
 8013094:	b138      	cbz	r0, 80130a6 <_vfiprintf_r+0x176>
 8013096:	9b04      	ldr	r3, [sp, #16]
 8013098:	eba0 000a 	sub.w	r0, r0, sl
 801309c:	2240      	movs	r2, #64	@ 0x40
 801309e:	4082      	lsls	r2, r0
 80130a0:	4313      	orrs	r3, r2
 80130a2:	3401      	adds	r4, #1
 80130a4:	9304      	str	r3, [sp, #16]
 80130a6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80130aa:	4829      	ldr	r0, [pc, #164]	@ (8013150 <_vfiprintf_r+0x220>)
 80130ac:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80130b0:	2206      	movs	r2, #6
 80130b2:	f7ed f8a5 	bl	8000200 <memchr>
 80130b6:	2800      	cmp	r0, #0
 80130b8:	d03f      	beq.n	801313a <_vfiprintf_r+0x20a>
 80130ba:	4b26      	ldr	r3, [pc, #152]	@ (8013154 <_vfiprintf_r+0x224>)
 80130bc:	bb1b      	cbnz	r3, 8013106 <_vfiprintf_r+0x1d6>
 80130be:	9b03      	ldr	r3, [sp, #12]
 80130c0:	3307      	adds	r3, #7
 80130c2:	f023 0307 	bic.w	r3, r3, #7
 80130c6:	3308      	adds	r3, #8
 80130c8:	9303      	str	r3, [sp, #12]
 80130ca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80130cc:	443b      	add	r3, r7
 80130ce:	9309      	str	r3, [sp, #36]	@ 0x24
 80130d0:	e76a      	b.n	8012fa8 <_vfiprintf_r+0x78>
 80130d2:	fb0c 3202 	mla	r2, ip, r2, r3
 80130d6:	460c      	mov	r4, r1
 80130d8:	2001      	movs	r0, #1
 80130da:	e7a8      	b.n	801302e <_vfiprintf_r+0xfe>
 80130dc:	2300      	movs	r3, #0
 80130de:	3401      	adds	r4, #1
 80130e0:	9305      	str	r3, [sp, #20]
 80130e2:	4619      	mov	r1, r3
 80130e4:	f04f 0c0a 	mov.w	ip, #10
 80130e8:	4620      	mov	r0, r4
 80130ea:	f810 2b01 	ldrb.w	r2, [r0], #1
 80130ee:	3a30      	subs	r2, #48	@ 0x30
 80130f0:	2a09      	cmp	r2, #9
 80130f2:	d903      	bls.n	80130fc <_vfiprintf_r+0x1cc>
 80130f4:	2b00      	cmp	r3, #0
 80130f6:	d0c6      	beq.n	8013086 <_vfiprintf_r+0x156>
 80130f8:	9105      	str	r1, [sp, #20]
 80130fa:	e7c4      	b.n	8013086 <_vfiprintf_r+0x156>
 80130fc:	fb0c 2101 	mla	r1, ip, r1, r2
 8013100:	4604      	mov	r4, r0
 8013102:	2301      	movs	r3, #1
 8013104:	e7f0      	b.n	80130e8 <_vfiprintf_r+0x1b8>
 8013106:	ab03      	add	r3, sp, #12
 8013108:	9300      	str	r3, [sp, #0]
 801310a:	462a      	mov	r2, r5
 801310c:	4b12      	ldr	r3, [pc, #72]	@ (8013158 <_vfiprintf_r+0x228>)
 801310e:	a904      	add	r1, sp, #16
 8013110:	4630      	mov	r0, r6
 8013112:	f7fc f96b 	bl	800f3ec <_printf_float>
 8013116:	4607      	mov	r7, r0
 8013118:	1c78      	adds	r0, r7, #1
 801311a:	d1d6      	bne.n	80130ca <_vfiprintf_r+0x19a>
 801311c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801311e:	07d9      	lsls	r1, r3, #31
 8013120:	d405      	bmi.n	801312e <_vfiprintf_r+0x1fe>
 8013122:	89ab      	ldrh	r3, [r5, #12]
 8013124:	059a      	lsls	r2, r3, #22
 8013126:	d402      	bmi.n	801312e <_vfiprintf_r+0x1fe>
 8013128:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801312a:	f7fd fac3 	bl	80106b4 <__retarget_lock_release_recursive>
 801312e:	89ab      	ldrh	r3, [r5, #12]
 8013130:	065b      	lsls	r3, r3, #25
 8013132:	f53f af1f 	bmi.w	8012f74 <_vfiprintf_r+0x44>
 8013136:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8013138:	e71e      	b.n	8012f78 <_vfiprintf_r+0x48>
 801313a:	ab03      	add	r3, sp, #12
 801313c:	9300      	str	r3, [sp, #0]
 801313e:	462a      	mov	r2, r5
 8013140:	4b05      	ldr	r3, [pc, #20]	@ (8013158 <_vfiprintf_r+0x228>)
 8013142:	a904      	add	r1, sp, #16
 8013144:	4630      	mov	r0, r6
 8013146:	f7fc fbe9 	bl	800f91c <_printf_i>
 801314a:	e7e4      	b.n	8013116 <_vfiprintf_r+0x1e6>
 801314c:	080159e1 	.word	0x080159e1
 8013150:	080159eb 	.word	0x080159eb
 8013154:	0800f3ed 	.word	0x0800f3ed
 8013158:	08012f0b 	.word	0x08012f0b
 801315c:	080159e7 	.word	0x080159e7

08013160 <fiprintf>:
 8013160:	b40e      	push	{r1, r2, r3}
 8013162:	b503      	push	{r0, r1, lr}
 8013164:	4601      	mov	r1, r0
 8013166:	ab03      	add	r3, sp, #12
 8013168:	4805      	ldr	r0, [pc, #20]	@ (8013180 <fiprintf+0x20>)
 801316a:	f853 2b04 	ldr.w	r2, [r3], #4
 801316e:	6800      	ldr	r0, [r0, #0]
 8013170:	9301      	str	r3, [sp, #4]
 8013172:	f7ff fedd 	bl	8012f30 <_vfiprintf_r>
 8013176:	b002      	add	sp, #8
 8013178:	f85d eb04 	ldr.w	lr, [sp], #4
 801317c:	b003      	add	sp, #12
 801317e:	4770      	bx	lr
 8013180:	2000d140 	.word	0x2000d140

08013184 <__swhatbuf_r>:
 8013184:	b570      	push	{r4, r5, r6, lr}
 8013186:	460c      	mov	r4, r1
 8013188:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801318c:	2900      	cmp	r1, #0
 801318e:	b096      	sub	sp, #88	@ 0x58
 8013190:	4615      	mov	r5, r2
 8013192:	461e      	mov	r6, r3
 8013194:	da0d      	bge.n	80131b2 <__swhatbuf_r+0x2e>
 8013196:	89a3      	ldrh	r3, [r4, #12]
 8013198:	f013 0f80 	tst.w	r3, #128	@ 0x80
 801319c:	f04f 0100 	mov.w	r1, #0
 80131a0:	bf14      	ite	ne
 80131a2:	2340      	movne	r3, #64	@ 0x40
 80131a4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80131a8:	2000      	movs	r0, #0
 80131aa:	6031      	str	r1, [r6, #0]
 80131ac:	602b      	str	r3, [r5, #0]
 80131ae:	b016      	add	sp, #88	@ 0x58
 80131b0:	bd70      	pop	{r4, r5, r6, pc}
 80131b2:	466a      	mov	r2, sp
 80131b4:	f000 f874 	bl	80132a0 <_fstat_r>
 80131b8:	2800      	cmp	r0, #0
 80131ba:	dbec      	blt.n	8013196 <__swhatbuf_r+0x12>
 80131bc:	9901      	ldr	r1, [sp, #4]
 80131be:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80131c2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80131c6:	4259      	negs	r1, r3
 80131c8:	4159      	adcs	r1, r3
 80131ca:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80131ce:	e7eb      	b.n	80131a8 <__swhatbuf_r+0x24>

080131d0 <__smakebuf_r>:
 80131d0:	898b      	ldrh	r3, [r1, #12]
 80131d2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80131d4:	079d      	lsls	r5, r3, #30
 80131d6:	4606      	mov	r6, r0
 80131d8:	460c      	mov	r4, r1
 80131da:	d507      	bpl.n	80131ec <__smakebuf_r+0x1c>
 80131dc:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80131e0:	6023      	str	r3, [r4, #0]
 80131e2:	6123      	str	r3, [r4, #16]
 80131e4:	2301      	movs	r3, #1
 80131e6:	6163      	str	r3, [r4, #20]
 80131e8:	b003      	add	sp, #12
 80131ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80131ec:	ab01      	add	r3, sp, #4
 80131ee:	466a      	mov	r2, sp
 80131f0:	f7ff ffc8 	bl	8013184 <__swhatbuf_r>
 80131f4:	9f00      	ldr	r7, [sp, #0]
 80131f6:	4605      	mov	r5, r0
 80131f8:	4639      	mov	r1, r7
 80131fa:	4630      	mov	r0, r6
 80131fc:	f7fe f95c 	bl	80114b8 <_malloc_r>
 8013200:	b948      	cbnz	r0, 8013216 <__smakebuf_r+0x46>
 8013202:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013206:	059a      	lsls	r2, r3, #22
 8013208:	d4ee      	bmi.n	80131e8 <__smakebuf_r+0x18>
 801320a:	f023 0303 	bic.w	r3, r3, #3
 801320e:	f043 0302 	orr.w	r3, r3, #2
 8013212:	81a3      	strh	r3, [r4, #12]
 8013214:	e7e2      	b.n	80131dc <__smakebuf_r+0xc>
 8013216:	89a3      	ldrh	r3, [r4, #12]
 8013218:	6020      	str	r0, [r4, #0]
 801321a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801321e:	81a3      	strh	r3, [r4, #12]
 8013220:	9b01      	ldr	r3, [sp, #4]
 8013222:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8013226:	b15b      	cbz	r3, 8013240 <__smakebuf_r+0x70>
 8013228:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801322c:	4630      	mov	r0, r6
 801322e:	f000 f849 	bl	80132c4 <_isatty_r>
 8013232:	b128      	cbz	r0, 8013240 <__smakebuf_r+0x70>
 8013234:	89a3      	ldrh	r3, [r4, #12]
 8013236:	f023 0303 	bic.w	r3, r3, #3
 801323a:	f043 0301 	orr.w	r3, r3, #1
 801323e:	81a3      	strh	r3, [r4, #12]
 8013240:	89a3      	ldrh	r3, [r4, #12]
 8013242:	431d      	orrs	r5, r3
 8013244:	81a5      	strh	r5, [r4, #12]
 8013246:	e7cf      	b.n	80131e8 <__smakebuf_r+0x18>

08013248 <memmove>:
 8013248:	4288      	cmp	r0, r1
 801324a:	b510      	push	{r4, lr}
 801324c:	eb01 0402 	add.w	r4, r1, r2
 8013250:	d902      	bls.n	8013258 <memmove+0x10>
 8013252:	4284      	cmp	r4, r0
 8013254:	4623      	mov	r3, r4
 8013256:	d807      	bhi.n	8013268 <memmove+0x20>
 8013258:	1e43      	subs	r3, r0, #1
 801325a:	42a1      	cmp	r1, r4
 801325c:	d008      	beq.n	8013270 <memmove+0x28>
 801325e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8013262:	f803 2f01 	strb.w	r2, [r3, #1]!
 8013266:	e7f8      	b.n	801325a <memmove+0x12>
 8013268:	4402      	add	r2, r0
 801326a:	4601      	mov	r1, r0
 801326c:	428a      	cmp	r2, r1
 801326e:	d100      	bne.n	8013272 <memmove+0x2a>
 8013270:	bd10      	pop	{r4, pc}
 8013272:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8013276:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801327a:	e7f7      	b.n	801326c <memmove+0x24>

0801327c <strncmp>:
 801327c:	b510      	push	{r4, lr}
 801327e:	b16a      	cbz	r2, 801329c <strncmp+0x20>
 8013280:	3901      	subs	r1, #1
 8013282:	1884      	adds	r4, r0, r2
 8013284:	f810 2b01 	ldrb.w	r2, [r0], #1
 8013288:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 801328c:	429a      	cmp	r2, r3
 801328e:	d103      	bne.n	8013298 <strncmp+0x1c>
 8013290:	42a0      	cmp	r0, r4
 8013292:	d001      	beq.n	8013298 <strncmp+0x1c>
 8013294:	2a00      	cmp	r2, #0
 8013296:	d1f5      	bne.n	8013284 <strncmp+0x8>
 8013298:	1ad0      	subs	r0, r2, r3
 801329a:	bd10      	pop	{r4, pc}
 801329c:	4610      	mov	r0, r2
 801329e:	e7fc      	b.n	801329a <strncmp+0x1e>

080132a0 <_fstat_r>:
 80132a0:	b538      	push	{r3, r4, r5, lr}
 80132a2:	4d07      	ldr	r5, [pc, #28]	@ (80132c0 <_fstat_r+0x20>)
 80132a4:	2300      	movs	r3, #0
 80132a6:	4604      	mov	r4, r0
 80132a8:	4608      	mov	r0, r1
 80132aa:	4611      	mov	r1, r2
 80132ac:	602b      	str	r3, [r5, #0]
 80132ae:	f7ed ff1b 	bl	80010e8 <_fstat>
 80132b2:	1c43      	adds	r3, r0, #1
 80132b4:	d102      	bne.n	80132bc <_fstat_r+0x1c>
 80132b6:	682b      	ldr	r3, [r5, #0]
 80132b8:	b103      	cbz	r3, 80132bc <_fstat_r+0x1c>
 80132ba:	6023      	str	r3, [r4, #0]
 80132bc:	bd38      	pop	{r3, r4, r5, pc}
 80132be:	bf00      	nop
 80132c0:	20016524 	.word	0x20016524

080132c4 <_isatty_r>:
 80132c4:	b538      	push	{r3, r4, r5, lr}
 80132c6:	4d06      	ldr	r5, [pc, #24]	@ (80132e0 <_isatty_r+0x1c>)
 80132c8:	2300      	movs	r3, #0
 80132ca:	4604      	mov	r4, r0
 80132cc:	4608      	mov	r0, r1
 80132ce:	602b      	str	r3, [r5, #0]
 80132d0:	f7ed ff1c 	bl	800110c <_isatty>
 80132d4:	1c43      	adds	r3, r0, #1
 80132d6:	d102      	bne.n	80132de <_isatty_r+0x1a>
 80132d8:	682b      	ldr	r3, [r5, #0]
 80132da:	b103      	cbz	r3, 80132de <_isatty_r+0x1a>
 80132dc:	6023      	str	r3, [r4, #0]
 80132de:	bd38      	pop	{r3, r4, r5, pc}
 80132e0:	20016524 	.word	0x20016524

080132e4 <_sbrk_r>:
 80132e4:	b538      	push	{r3, r4, r5, lr}
 80132e6:	4d06      	ldr	r5, [pc, #24]	@ (8013300 <_sbrk_r+0x1c>)
 80132e8:	2300      	movs	r3, #0
 80132ea:	4604      	mov	r4, r0
 80132ec:	4608      	mov	r0, r1
 80132ee:	602b      	str	r3, [r5, #0]
 80132f0:	f7f1 fea0 	bl	8005034 <_sbrk>
 80132f4:	1c43      	adds	r3, r0, #1
 80132f6:	d102      	bne.n	80132fe <_sbrk_r+0x1a>
 80132f8:	682b      	ldr	r3, [r5, #0]
 80132fa:	b103      	cbz	r3, 80132fe <_sbrk_r+0x1a>
 80132fc:	6023      	str	r3, [r4, #0]
 80132fe:	bd38      	pop	{r3, r4, r5, pc}
 8013300:	20016524 	.word	0x20016524
 8013304:	00000000 	.word	0x00000000

08013308 <nan>:
 8013308:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8013310 <nan+0x8>
 801330c:	4770      	bx	lr
 801330e:	bf00      	nop
 8013310:	00000000 	.word	0x00000000
 8013314:	7ff80000 	.word	0x7ff80000

08013318 <abort>:
 8013318:	b508      	push	{r3, lr}
 801331a:	2006      	movs	r0, #6
 801331c:	f000 fbc4 	bl	8013aa8 <raise>
 8013320:	2001      	movs	r0, #1
 8013322:	f7ed feb5 	bl	8001090 <_exit>

08013326 <_calloc_r>:
 8013326:	b570      	push	{r4, r5, r6, lr}
 8013328:	fba1 5402 	umull	r5, r4, r1, r2
 801332c:	b934      	cbnz	r4, 801333c <_calloc_r+0x16>
 801332e:	4629      	mov	r1, r5
 8013330:	f7fe f8c2 	bl	80114b8 <_malloc_r>
 8013334:	4606      	mov	r6, r0
 8013336:	b928      	cbnz	r0, 8013344 <_calloc_r+0x1e>
 8013338:	4630      	mov	r0, r6
 801333a:	bd70      	pop	{r4, r5, r6, pc}
 801333c:	220c      	movs	r2, #12
 801333e:	6002      	str	r2, [r0, #0]
 8013340:	2600      	movs	r6, #0
 8013342:	e7f9      	b.n	8013338 <_calloc_r+0x12>
 8013344:	462a      	mov	r2, r5
 8013346:	4621      	mov	r1, r4
 8013348:	f7fd f936 	bl	80105b8 <memset>
 801334c:	e7f4      	b.n	8013338 <_calloc_r+0x12>

0801334e <rshift>:
 801334e:	6903      	ldr	r3, [r0, #16]
 8013350:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8013354:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8013358:	ea4f 1261 	mov.w	r2, r1, asr #5
 801335c:	f100 0414 	add.w	r4, r0, #20
 8013360:	dd45      	ble.n	80133ee <rshift+0xa0>
 8013362:	f011 011f 	ands.w	r1, r1, #31
 8013366:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 801336a:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 801336e:	d10c      	bne.n	801338a <rshift+0x3c>
 8013370:	f100 0710 	add.w	r7, r0, #16
 8013374:	4629      	mov	r1, r5
 8013376:	42b1      	cmp	r1, r6
 8013378:	d334      	bcc.n	80133e4 <rshift+0x96>
 801337a:	1a9b      	subs	r3, r3, r2
 801337c:	009b      	lsls	r3, r3, #2
 801337e:	1eea      	subs	r2, r5, #3
 8013380:	4296      	cmp	r6, r2
 8013382:	bf38      	it	cc
 8013384:	2300      	movcc	r3, #0
 8013386:	4423      	add	r3, r4
 8013388:	e015      	b.n	80133b6 <rshift+0x68>
 801338a:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 801338e:	f1c1 0820 	rsb	r8, r1, #32
 8013392:	40cf      	lsrs	r7, r1
 8013394:	f105 0e04 	add.w	lr, r5, #4
 8013398:	46a1      	mov	r9, r4
 801339a:	4576      	cmp	r6, lr
 801339c:	46f4      	mov	ip, lr
 801339e:	d815      	bhi.n	80133cc <rshift+0x7e>
 80133a0:	1a9a      	subs	r2, r3, r2
 80133a2:	0092      	lsls	r2, r2, #2
 80133a4:	3a04      	subs	r2, #4
 80133a6:	3501      	adds	r5, #1
 80133a8:	42ae      	cmp	r6, r5
 80133aa:	bf38      	it	cc
 80133ac:	2200      	movcc	r2, #0
 80133ae:	18a3      	adds	r3, r4, r2
 80133b0:	50a7      	str	r7, [r4, r2]
 80133b2:	b107      	cbz	r7, 80133b6 <rshift+0x68>
 80133b4:	3304      	adds	r3, #4
 80133b6:	1b1a      	subs	r2, r3, r4
 80133b8:	42a3      	cmp	r3, r4
 80133ba:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80133be:	bf08      	it	eq
 80133c0:	2300      	moveq	r3, #0
 80133c2:	6102      	str	r2, [r0, #16]
 80133c4:	bf08      	it	eq
 80133c6:	6143      	streq	r3, [r0, #20]
 80133c8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80133cc:	f8dc c000 	ldr.w	ip, [ip]
 80133d0:	fa0c fc08 	lsl.w	ip, ip, r8
 80133d4:	ea4c 0707 	orr.w	r7, ip, r7
 80133d8:	f849 7b04 	str.w	r7, [r9], #4
 80133dc:	f85e 7b04 	ldr.w	r7, [lr], #4
 80133e0:	40cf      	lsrs	r7, r1
 80133e2:	e7da      	b.n	801339a <rshift+0x4c>
 80133e4:	f851 cb04 	ldr.w	ip, [r1], #4
 80133e8:	f847 cf04 	str.w	ip, [r7, #4]!
 80133ec:	e7c3      	b.n	8013376 <rshift+0x28>
 80133ee:	4623      	mov	r3, r4
 80133f0:	e7e1      	b.n	80133b6 <rshift+0x68>

080133f2 <__hexdig_fun>:
 80133f2:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 80133f6:	2b09      	cmp	r3, #9
 80133f8:	d802      	bhi.n	8013400 <__hexdig_fun+0xe>
 80133fa:	3820      	subs	r0, #32
 80133fc:	b2c0      	uxtb	r0, r0
 80133fe:	4770      	bx	lr
 8013400:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8013404:	2b05      	cmp	r3, #5
 8013406:	d801      	bhi.n	801340c <__hexdig_fun+0x1a>
 8013408:	3847      	subs	r0, #71	@ 0x47
 801340a:	e7f7      	b.n	80133fc <__hexdig_fun+0xa>
 801340c:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8013410:	2b05      	cmp	r3, #5
 8013412:	d801      	bhi.n	8013418 <__hexdig_fun+0x26>
 8013414:	3827      	subs	r0, #39	@ 0x27
 8013416:	e7f1      	b.n	80133fc <__hexdig_fun+0xa>
 8013418:	2000      	movs	r0, #0
 801341a:	4770      	bx	lr

0801341c <__gethex>:
 801341c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013420:	b085      	sub	sp, #20
 8013422:	468a      	mov	sl, r1
 8013424:	9302      	str	r3, [sp, #8]
 8013426:	680b      	ldr	r3, [r1, #0]
 8013428:	9001      	str	r0, [sp, #4]
 801342a:	4690      	mov	r8, r2
 801342c:	1c9c      	adds	r4, r3, #2
 801342e:	46a1      	mov	r9, r4
 8013430:	f814 0b01 	ldrb.w	r0, [r4], #1
 8013434:	2830      	cmp	r0, #48	@ 0x30
 8013436:	d0fa      	beq.n	801342e <__gethex+0x12>
 8013438:	eba9 0303 	sub.w	r3, r9, r3
 801343c:	f1a3 0b02 	sub.w	fp, r3, #2
 8013440:	f7ff ffd7 	bl	80133f2 <__hexdig_fun>
 8013444:	4605      	mov	r5, r0
 8013446:	2800      	cmp	r0, #0
 8013448:	d168      	bne.n	801351c <__gethex+0x100>
 801344a:	49a0      	ldr	r1, [pc, #640]	@ (80136cc <__gethex+0x2b0>)
 801344c:	2201      	movs	r2, #1
 801344e:	4648      	mov	r0, r9
 8013450:	f7ff ff14 	bl	801327c <strncmp>
 8013454:	4607      	mov	r7, r0
 8013456:	2800      	cmp	r0, #0
 8013458:	d167      	bne.n	801352a <__gethex+0x10e>
 801345a:	f899 0001 	ldrb.w	r0, [r9, #1]
 801345e:	4626      	mov	r6, r4
 8013460:	f7ff ffc7 	bl	80133f2 <__hexdig_fun>
 8013464:	2800      	cmp	r0, #0
 8013466:	d062      	beq.n	801352e <__gethex+0x112>
 8013468:	4623      	mov	r3, r4
 801346a:	7818      	ldrb	r0, [r3, #0]
 801346c:	2830      	cmp	r0, #48	@ 0x30
 801346e:	4699      	mov	r9, r3
 8013470:	f103 0301 	add.w	r3, r3, #1
 8013474:	d0f9      	beq.n	801346a <__gethex+0x4e>
 8013476:	f7ff ffbc 	bl	80133f2 <__hexdig_fun>
 801347a:	fab0 f580 	clz	r5, r0
 801347e:	096d      	lsrs	r5, r5, #5
 8013480:	f04f 0b01 	mov.w	fp, #1
 8013484:	464a      	mov	r2, r9
 8013486:	4616      	mov	r6, r2
 8013488:	3201      	adds	r2, #1
 801348a:	7830      	ldrb	r0, [r6, #0]
 801348c:	f7ff ffb1 	bl	80133f2 <__hexdig_fun>
 8013490:	2800      	cmp	r0, #0
 8013492:	d1f8      	bne.n	8013486 <__gethex+0x6a>
 8013494:	498d      	ldr	r1, [pc, #564]	@ (80136cc <__gethex+0x2b0>)
 8013496:	2201      	movs	r2, #1
 8013498:	4630      	mov	r0, r6
 801349a:	f7ff feef 	bl	801327c <strncmp>
 801349e:	2800      	cmp	r0, #0
 80134a0:	d13f      	bne.n	8013522 <__gethex+0x106>
 80134a2:	b944      	cbnz	r4, 80134b6 <__gethex+0x9a>
 80134a4:	1c74      	adds	r4, r6, #1
 80134a6:	4622      	mov	r2, r4
 80134a8:	4616      	mov	r6, r2
 80134aa:	3201      	adds	r2, #1
 80134ac:	7830      	ldrb	r0, [r6, #0]
 80134ae:	f7ff ffa0 	bl	80133f2 <__hexdig_fun>
 80134b2:	2800      	cmp	r0, #0
 80134b4:	d1f8      	bne.n	80134a8 <__gethex+0x8c>
 80134b6:	1ba4      	subs	r4, r4, r6
 80134b8:	00a7      	lsls	r7, r4, #2
 80134ba:	7833      	ldrb	r3, [r6, #0]
 80134bc:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 80134c0:	2b50      	cmp	r3, #80	@ 0x50
 80134c2:	d13e      	bne.n	8013542 <__gethex+0x126>
 80134c4:	7873      	ldrb	r3, [r6, #1]
 80134c6:	2b2b      	cmp	r3, #43	@ 0x2b
 80134c8:	d033      	beq.n	8013532 <__gethex+0x116>
 80134ca:	2b2d      	cmp	r3, #45	@ 0x2d
 80134cc:	d034      	beq.n	8013538 <__gethex+0x11c>
 80134ce:	1c71      	adds	r1, r6, #1
 80134d0:	2400      	movs	r4, #0
 80134d2:	7808      	ldrb	r0, [r1, #0]
 80134d4:	f7ff ff8d 	bl	80133f2 <__hexdig_fun>
 80134d8:	1e43      	subs	r3, r0, #1
 80134da:	b2db      	uxtb	r3, r3
 80134dc:	2b18      	cmp	r3, #24
 80134de:	d830      	bhi.n	8013542 <__gethex+0x126>
 80134e0:	f1a0 0210 	sub.w	r2, r0, #16
 80134e4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80134e8:	f7ff ff83 	bl	80133f2 <__hexdig_fun>
 80134ec:	f100 3cff 	add.w	ip, r0, #4294967295
 80134f0:	fa5f fc8c 	uxtb.w	ip, ip
 80134f4:	f1bc 0f18 	cmp.w	ip, #24
 80134f8:	f04f 030a 	mov.w	r3, #10
 80134fc:	d91e      	bls.n	801353c <__gethex+0x120>
 80134fe:	b104      	cbz	r4, 8013502 <__gethex+0xe6>
 8013500:	4252      	negs	r2, r2
 8013502:	4417      	add	r7, r2
 8013504:	f8ca 1000 	str.w	r1, [sl]
 8013508:	b1ed      	cbz	r5, 8013546 <__gethex+0x12a>
 801350a:	f1bb 0f00 	cmp.w	fp, #0
 801350e:	bf0c      	ite	eq
 8013510:	2506      	moveq	r5, #6
 8013512:	2500      	movne	r5, #0
 8013514:	4628      	mov	r0, r5
 8013516:	b005      	add	sp, #20
 8013518:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801351c:	2500      	movs	r5, #0
 801351e:	462c      	mov	r4, r5
 8013520:	e7b0      	b.n	8013484 <__gethex+0x68>
 8013522:	2c00      	cmp	r4, #0
 8013524:	d1c7      	bne.n	80134b6 <__gethex+0x9a>
 8013526:	4627      	mov	r7, r4
 8013528:	e7c7      	b.n	80134ba <__gethex+0x9e>
 801352a:	464e      	mov	r6, r9
 801352c:	462f      	mov	r7, r5
 801352e:	2501      	movs	r5, #1
 8013530:	e7c3      	b.n	80134ba <__gethex+0x9e>
 8013532:	2400      	movs	r4, #0
 8013534:	1cb1      	adds	r1, r6, #2
 8013536:	e7cc      	b.n	80134d2 <__gethex+0xb6>
 8013538:	2401      	movs	r4, #1
 801353a:	e7fb      	b.n	8013534 <__gethex+0x118>
 801353c:	fb03 0002 	mla	r0, r3, r2, r0
 8013540:	e7ce      	b.n	80134e0 <__gethex+0xc4>
 8013542:	4631      	mov	r1, r6
 8013544:	e7de      	b.n	8013504 <__gethex+0xe8>
 8013546:	eba6 0309 	sub.w	r3, r6, r9
 801354a:	3b01      	subs	r3, #1
 801354c:	4629      	mov	r1, r5
 801354e:	2b07      	cmp	r3, #7
 8013550:	dc0a      	bgt.n	8013568 <__gethex+0x14c>
 8013552:	9801      	ldr	r0, [sp, #4]
 8013554:	f7fe f83c 	bl	80115d0 <_Balloc>
 8013558:	4604      	mov	r4, r0
 801355a:	b940      	cbnz	r0, 801356e <__gethex+0x152>
 801355c:	4b5c      	ldr	r3, [pc, #368]	@ (80136d0 <__gethex+0x2b4>)
 801355e:	4602      	mov	r2, r0
 8013560:	21e4      	movs	r1, #228	@ 0xe4
 8013562:	485c      	ldr	r0, [pc, #368]	@ (80136d4 <__gethex+0x2b8>)
 8013564:	f7fd f8bc 	bl	80106e0 <__assert_func>
 8013568:	3101      	adds	r1, #1
 801356a:	105b      	asrs	r3, r3, #1
 801356c:	e7ef      	b.n	801354e <__gethex+0x132>
 801356e:	f100 0a14 	add.w	sl, r0, #20
 8013572:	2300      	movs	r3, #0
 8013574:	4655      	mov	r5, sl
 8013576:	469b      	mov	fp, r3
 8013578:	45b1      	cmp	r9, r6
 801357a:	d337      	bcc.n	80135ec <__gethex+0x1d0>
 801357c:	f845 bb04 	str.w	fp, [r5], #4
 8013580:	eba5 050a 	sub.w	r5, r5, sl
 8013584:	10ad      	asrs	r5, r5, #2
 8013586:	6125      	str	r5, [r4, #16]
 8013588:	4658      	mov	r0, fp
 801358a:	f7fe f913 	bl	80117b4 <__hi0bits>
 801358e:	016d      	lsls	r5, r5, #5
 8013590:	f8d8 6000 	ldr.w	r6, [r8]
 8013594:	1a2d      	subs	r5, r5, r0
 8013596:	42b5      	cmp	r5, r6
 8013598:	dd54      	ble.n	8013644 <__gethex+0x228>
 801359a:	1bad      	subs	r5, r5, r6
 801359c:	4629      	mov	r1, r5
 801359e:	4620      	mov	r0, r4
 80135a0:	f7fe fc9f 	bl	8011ee2 <__any_on>
 80135a4:	4681      	mov	r9, r0
 80135a6:	b178      	cbz	r0, 80135c8 <__gethex+0x1ac>
 80135a8:	1e6b      	subs	r3, r5, #1
 80135aa:	1159      	asrs	r1, r3, #5
 80135ac:	f003 021f 	and.w	r2, r3, #31
 80135b0:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 80135b4:	f04f 0901 	mov.w	r9, #1
 80135b8:	fa09 f202 	lsl.w	r2, r9, r2
 80135bc:	420a      	tst	r2, r1
 80135be:	d003      	beq.n	80135c8 <__gethex+0x1ac>
 80135c0:	454b      	cmp	r3, r9
 80135c2:	dc36      	bgt.n	8013632 <__gethex+0x216>
 80135c4:	f04f 0902 	mov.w	r9, #2
 80135c8:	4629      	mov	r1, r5
 80135ca:	4620      	mov	r0, r4
 80135cc:	f7ff febf 	bl	801334e <rshift>
 80135d0:	442f      	add	r7, r5
 80135d2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80135d6:	42bb      	cmp	r3, r7
 80135d8:	da42      	bge.n	8013660 <__gethex+0x244>
 80135da:	9801      	ldr	r0, [sp, #4]
 80135dc:	4621      	mov	r1, r4
 80135de:	f7fe f837 	bl	8011650 <_Bfree>
 80135e2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80135e4:	2300      	movs	r3, #0
 80135e6:	6013      	str	r3, [r2, #0]
 80135e8:	25a3      	movs	r5, #163	@ 0xa3
 80135ea:	e793      	b.n	8013514 <__gethex+0xf8>
 80135ec:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 80135f0:	2a2e      	cmp	r2, #46	@ 0x2e
 80135f2:	d012      	beq.n	801361a <__gethex+0x1fe>
 80135f4:	2b20      	cmp	r3, #32
 80135f6:	d104      	bne.n	8013602 <__gethex+0x1e6>
 80135f8:	f845 bb04 	str.w	fp, [r5], #4
 80135fc:	f04f 0b00 	mov.w	fp, #0
 8013600:	465b      	mov	r3, fp
 8013602:	7830      	ldrb	r0, [r6, #0]
 8013604:	9303      	str	r3, [sp, #12]
 8013606:	f7ff fef4 	bl	80133f2 <__hexdig_fun>
 801360a:	9b03      	ldr	r3, [sp, #12]
 801360c:	f000 000f 	and.w	r0, r0, #15
 8013610:	4098      	lsls	r0, r3
 8013612:	ea4b 0b00 	orr.w	fp, fp, r0
 8013616:	3304      	adds	r3, #4
 8013618:	e7ae      	b.n	8013578 <__gethex+0x15c>
 801361a:	45b1      	cmp	r9, r6
 801361c:	d8ea      	bhi.n	80135f4 <__gethex+0x1d8>
 801361e:	492b      	ldr	r1, [pc, #172]	@ (80136cc <__gethex+0x2b0>)
 8013620:	9303      	str	r3, [sp, #12]
 8013622:	2201      	movs	r2, #1
 8013624:	4630      	mov	r0, r6
 8013626:	f7ff fe29 	bl	801327c <strncmp>
 801362a:	9b03      	ldr	r3, [sp, #12]
 801362c:	2800      	cmp	r0, #0
 801362e:	d1e1      	bne.n	80135f4 <__gethex+0x1d8>
 8013630:	e7a2      	b.n	8013578 <__gethex+0x15c>
 8013632:	1ea9      	subs	r1, r5, #2
 8013634:	4620      	mov	r0, r4
 8013636:	f7fe fc54 	bl	8011ee2 <__any_on>
 801363a:	2800      	cmp	r0, #0
 801363c:	d0c2      	beq.n	80135c4 <__gethex+0x1a8>
 801363e:	f04f 0903 	mov.w	r9, #3
 8013642:	e7c1      	b.n	80135c8 <__gethex+0x1ac>
 8013644:	da09      	bge.n	801365a <__gethex+0x23e>
 8013646:	1b75      	subs	r5, r6, r5
 8013648:	4621      	mov	r1, r4
 801364a:	9801      	ldr	r0, [sp, #4]
 801364c:	462a      	mov	r2, r5
 801364e:	f7fe fa0f 	bl	8011a70 <__lshift>
 8013652:	1b7f      	subs	r7, r7, r5
 8013654:	4604      	mov	r4, r0
 8013656:	f100 0a14 	add.w	sl, r0, #20
 801365a:	f04f 0900 	mov.w	r9, #0
 801365e:	e7b8      	b.n	80135d2 <__gethex+0x1b6>
 8013660:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8013664:	42bd      	cmp	r5, r7
 8013666:	dd6f      	ble.n	8013748 <__gethex+0x32c>
 8013668:	1bed      	subs	r5, r5, r7
 801366a:	42ae      	cmp	r6, r5
 801366c:	dc34      	bgt.n	80136d8 <__gethex+0x2bc>
 801366e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8013672:	2b02      	cmp	r3, #2
 8013674:	d022      	beq.n	80136bc <__gethex+0x2a0>
 8013676:	2b03      	cmp	r3, #3
 8013678:	d024      	beq.n	80136c4 <__gethex+0x2a8>
 801367a:	2b01      	cmp	r3, #1
 801367c:	d115      	bne.n	80136aa <__gethex+0x28e>
 801367e:	42ae      	cmp	r6, r5
 8013680:	d113      	bne.n	80136aa <__gethex+0x28e>
 8013682:	2e01      	cmp	r6, #1
 8013684:	d10b      	bne.n	801369e <__gethex+0x282>
 8013686:	9a02      	ldr	r2, [sp, #8]
 8013688:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801368c:	6013      	str	r3, [r2, #0]
 801368e:	2301      	movs	r3, #1
 8013690:	6123      	str	r3, [r4, #16]
 8013692:	f8ca 3000 	str.w	r3, [sl]
 8013696:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8013698:	2562      	movs	r5, #98	@ 0x62
 801369a:	601c      	str	r4, [r3, #0]
 801369c:	e73a      	b.n	8013514 <__gethex+0xf8>
 801369e:	1e71      	subs	r1, r6, #1
 80136a0:	4620      	mov	r0, r4
 80136a2:	f7fe fc1e 	bl	8011ee2 <__any_on>
 80136a6:	2800      	cmp	r0, #0
 80136a8:	d1ed      	bne.n	8013686 <__gethex+0x26a>
 80136aa:	9801      	ldr	r0, [sp, #4]
 80136ac:	4621      	mov	r1, r4
 80136ae:	f7fd ffcf 	bl	8011650 <_Bfree>
 80136b2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80136b4:	2300      	movs	r3, #0
 80136b6:	6013      	str	r3, [r2, #0]
 80136b8:	2550      	movs	r5, #80	@ 0x50
 80136ba:	e72b      	b.n	8013514 <__gethex+0xf8>
 80136bc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80136be:	2b00      	cmp	r3, #0
 80136c0:	d1f3      	bne.n	80136aa <__gethex+0x28e>
 80136c2:	e7e0      	b.n	8013686 <__gethex+0x26a>
 80136c4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80136c6:	2b00      	cmp	r3, #0
 80136c8:	d1dd      	bne.n	8013686 <__gethex+0x26a>
 80136ca:	e7ee      	b.n	80136aa <__gethex+0x28e>
 80136cc:	080159df 	.word	0x080159df
 80136d0:	08015975 	.word	0x08015975
 80136d4:	080159fa 	.word	0x080159fa
 80136d8:	1e6f      	subs	r7, r5, #1
 80136da:	f1b9 0f00 	cmp.w	r9, #0
 80136de:	d130      	bne.n	8013742 <__gethex+0x326>
 80136e0:	b127      	cbz	r7, 80136ec <__gethex+0x2d0>
 80136e2:	4639      	mov	r1, r7
 80136e4:	4620      	mov	r0, r4
 80136e6:	f7fe fbfc 	bl	8011ee2 <__any_on>
 80136ea:	4681      	mov	r9, r0
 80136ec:	117a      	asrs	r2, r7, #5
 80136ee:	2301      	movs	r3, #1
 80136f0:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 80136f4:	f007 071f 	and.w	r7, r7, #31
 80136f8:	40bb      	lsls	r3, r7
 80136fa:	4213      	tst	r3, r2
 80136fc:	4629      	mov	r1, r5
 80136fe:	4620      	mov	r0, r4
 8013700:	bf18      	it	ne
 8013702:	f049 0902 	orrne.w	r9, r9, #2
 8013706:	f7ff fe22 	bl	801334e <rshift>
 801370a:	f8d8 7004 	ldr.w	r7, [r8, #4]
 801370e:	1b76      	subs	r6, r6, r5
 8013710:	2502      	movs	r5, #2
 8013712:	f1b9 0f00 	cmp.w	r9, #0
 8013716:	d047      	beq.n	80137a8 <__gethex+0x38c>
 8013718:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801371c:	2b02      	cmp	r3, #2
 801371e:	d015      	beq.n	801374c <__gethex+0x330>
 8013720:	2b03      	cmp	r3, #3
 8013722:	d017      	beq.n	8013754 <__gethex+0x338>
 8013724:	2b01      	cmp	r3, #1
 8013726:	d109      	bne.n	801373c <__gethex+0x320>
 8013728:	f019 0f02 	tst.w	r9, #2
 801372c:	d006      	beq.n	801373c <__gethex+0x320>
 801372e:	f8da 3000 	ldr.w	r3, [sl]
 8013732:	ea49 0903 	orr.w	r9, r9, r3
 8013736:	f019 0f01 	tst.w	r9, #1
 801373a:	d10e      	bne.n	801375a <__gethex+0x33e>
 801373c:	f045 0510 	orr.w	r5, r5, #16
 8013740:	e032      	b.n	80137a8 <__gethex+0x38c>
 8013742:	f04f 0901 	mov.w	r9, #1
 8013746:	e7d1      	b.n	80136ec <__gethex+0x2d0>
 8013748:	2501      	movs	r5, #1
 801374a:	e7e2      	b.n	8013712 <__gethex+0x2f6>
 801374c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801374e:	f1c3 0301 	rsb	r3, r3, #1
 8013752:	930f      	str	r3, [sp, #60]	@ 0x3c
 8013754:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8013756:	2b00      	cmp	r3, #0
 8013758:	d0f0      	beq.n	801373c <__gethex+0x320>
 801375a:	f8d4 b010 	ldr.w	fp, [r4, #16]
 801375e:	f104 0314 	add.w	r3, r4, #20
 8013762:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8013766:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 801376a:	f04f 0c00 	mov.w	ip, #0
 801376e:	4618      	mov	r0, r3
 8013770:	f853 2b04 	ldr.w	r2, [r3], #4
 8013774:	f1b2 3fff 	cmp.w	r2, #4294967295
 8013778:	d01b      	beq.n	80137b2 <__gethex+0x396>
 801377a:	3201      	adds	r2, #1
 801377c:	6002      	str	r2, [r0, #0]
 801377e:	2d02      	cmp	r5, #2
 8013780:	f104 0314 	add.w	r3, r4, #20
 8013784:	d13c      	bne.n	8013800 <__gethex+0x3e4>
 8013786:	f8d8 2000 	ldr.w	r2, [r8]
 801378a:	3a01      	subs	r2, #1
 801378c:	42b2      	cmp	r2, r6
 801378e:	d109      	bne.n	80137a4 <__gethex+0x388>
 8013790:	1171      	asrs	r1, r6, #5
 8013792:	2201      	movs	r2, #1
 8013794:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8013798:	f006 061f 	and.w	r6, r6, #31
 801379c:	fa02 f606 	lsl.w	r6, r2, r6
 80137a0:	421e      	tst	r6, r3
 80137a2:	d13a      	bne.n	801381a <__gethex+0x3fe>
 80137a4:	f045 0520 	orr.w	r5, r5, #32
 80137a8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80137aa:	601c      	str	r4, [r3, #0]
 80137ac:	9b02      	ldr	r3, [sp, #8]
 80137ae:	601f      	str	r7, [r3, #0]
 80137b0:	e6b0      	b.n	8013514 <__gethex+0xf8>
 80137b2:	4299      	cmp	r1, r3
 80137b4:	f843 cc04 	str.w	ip, [r3, #-4]
 80137b8:	d8d9      	bhi.n	801376e <__gethex+0x352>
 80137ba:	68a3      	ldr	r3, [r4, #8]
 80137bc:	459b      	cmp	fp, r3
 80137be:	db17      	blt.n	80137f0 <__gethex+0x3d4>
 80137c0:	6861      	ldr	r1, [r4, #4]
 80137c2:	9801      	ldr	r0, [sp, #4]
 80137c4:	3101      	adds	r1, #1
 80137c6:	f7fd ff03 	bl	80115d0 <_Balloc>
 80137ca:	4681      	mov	r9, r0
 80137cc:	b918      	cbnz	r0, 80137d6 <__gethex+0x3ba>
 80137ce:	4b1a      	ldr	r3, [pc, #104]	@ (8013838 <__gethex+0x41c>)
 80137d0:	4602      	mov	r2, r0
 80137d2:	2184      	movs	r1, #132	@ 0x84
 80137d4:	e6c5      	b.n	8013562 <__gethex+0x146>
 80137d6:	6922      	ldr	r2, [r4, #16]
 80137d8:	3202      	adds	r2, #2
 80137da:	f104 010c 	add.w	r1, r4, #12
 80137de:	0092      	lsls	r2, r2, #2
 80137e0:	300c      	adds	r0, #12
 80137e2:	f7fc ff68 	bl	80106b6 <memcpy>
 80137e6:	4621      	mov	r1, r4
 80137e8:	9801      	ldr	r0, [sp, #4]
 80137ea:	f7fd ff31 	bl	8011650 <_Bfree>
 80137ee:	464c      	mov	r4, r9
 80137f0:	6923      	ldr	r3, [r4, #16]
 80137f2:	1c5a      	adds	r2, r3, #1
 80137f4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80137f8:	6122      	str	r2, [r4, #16]
 80137fa:	2201      	movs	r2, #1
 80137fc:	615a      	str	r2, [r3, #20]
 80137fe:	e7be      	b.n	801377e <__gethex+0x362>
 8013800:	6922      	ldr	r2, [r4, #16]
 8013802:	455a      	cmp	r2, fp
 8013804:	dd0b      	ble.n	801381e <__gethex+0x402>
 8013806:	2101      	movs	r1, #1
 8013808:	4620      	mov	r0, r4
 801380a:	f7ff fda0 	bl	801334e <rshift>
 801380e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8013812:	3701      	adds	r7, #1
 8013814:	42bb      	cmp	r3, r7
 8013816:	f6ff aee0 	blt.w	80135da <__gethex+0x1be>
 801381a:	2501      	movs	r5, #1
 801381c:	e7c2      	b.n	80137a4 <__gethex+0x388>
 801381e:	f016 061f 	ands.w	r6, r6, #31
 8013822:	d0fa      	beq.n	801381a <__gethex+0x3fe>
 8013824:	4453      	add	r3, sl
 8013826:	f1c6 0620 	rsb	r6, r6, #32
 801382a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 801382e:	f7fd ffc1 	bl	80117b4 <__hi0bits>
 8013832:	42b0      	cmp	r0, r6
 8013834:	dbe7      	blt.n	8013806 <__gethex+0x3ea>
 8013836:	e7f0      	b.n	801381a <__gethex+0x3fe>
 8013838:	08015975 	.word	0x08015975

0801383c <L_shift>:
 801383c:	f1c2 0208 	rsb	r2, r2, #8
 8013840:	0092      	lsls	r2, r2, #2
 8013842:	b570      	push	{r4, r5, r6, lr}
 8013844:	f1c2 0620 	rsb	r6, r2, #32
 8013848:	6843      	ldr	r3, [r0, #4]
 801384a:	6804      	ldr	r4, [r0, #0]
 801384c:	fa03 f506 	lsl.w	r5, r3, r6
 8013850:	432c      	orrs	r4, r5
 8013852:	40d3      	lsrs	r3, r2
 8013854:	6004      	str	r4, [r0, #0]
 8013856:	f840 3f04 	str.w	r3, [r0, #4]!
 801385a:	4288      	cmp	r0, r1
 801385c:	d3f4      	bcc.n	8013848 <L_shift+0xc>
 801385e:	bd70      	pop	{r4, r5, r6, pc}

08013860 <__match>:
 8013860:	b530      	push	{r4, r5, lr}
 8013862:	6803      	ldr	r3, [r0, #0]
 8013864:	3301      	adds	r3, #1
 8013866:	f811 4b01 	ldrb.w	r4, [r1], #1
 801386a:	b914      	cbnz	r4, 8013872 <__match+0x12>
 801386c:	6003      	str	r3, [r0, #0]
 801386e:	2001      	movs	r0, #1
 8013870:	bd30      	pop	{r4, r5, pc}
 8013872:	f813 2b01 	ldrb.w	r2, [r3], #1
 8013876:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 801387a:	2d19      	cmp	r5, #25
 801387c:	bf98      	it	ls
 801387e:	3220      	addls	r2, #32
 8013880:	42a2      	cmp	r2, r4
 8013882:	d0f0      	beq.n	8013866 <__match+0x6>
 8013884:	2000      	movs	r0, #0
 8013886:	e7f3      	b.n	8013870 <__match+0x10>

08013888 <__hexnan>:
 8013888:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801388c:	680b      	ldr	r3, [r1, #0]
 801388e:	6801      	ldr	r1, [r0, #0]
 8013890:	115e      	asrs	r6, r3, #5
 8013892:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8013896:	f013 031f 	ands.w	r3, r3, #31
 801389a:	b087      	sub	sp, #28
 801389c:	bf18      	it	ne
 801389e:	3604      	addne	r6, #4
 80138a0:	2500      	movs	r5, #0
 80138a2:	1f37      	subs	r7, r6, #4
 80138a4:	4682      	mov	sl, r0
 80138a6:	4690      	mov	r8, r2
 80138a8:	9301      	str	r3, [sp, #4]
 80138aa:	f846 5c04 	str.w	r5, [r6, #-4]
 80138ae:	46b9      	mov	r9, r7
 80138b0:	463c      	mov	r4, r7
 80138b2:	9502      	str	r5, [sp, #8]
 80138b4:	46ab      	mov	fp, r5
 80138b6:	784a      	ldrb	r2, [r1, #1]
 80138b8:	1c4b      	adds	r3, r1, #1
 80138ba:	9303      	str	r3, [sp, #12]
 80138bc:	b342      	cbz	r2, 8013910 <__hexnan+0x88>
 80138be:	4610      	mov	r0, r2
 80138c0:	9105      	str	r1, [sp, #20]
 80138c2:	9204      	str	r2, [sp, #16]
 80138c4:	f7ff fd95 	bl	80133f2 <__hexdig_fun>
 80138c8:	2800      	cmp	r0, #0
 80138ca:	d151      	bne.n	8013970 <__hexnan+0xe8>
 80138cc:	9a04      	ldr	r2, [sp, #16]
 80138ce:	9905      	ldr	r1, [sp, #20]
 80138d0:	2a20      	cmp	r2, #32
 80138d2:	d818      	bhi.n	8013906 <__hexnan+0x7e>
 80138d4:	9b02      	ldr	r3, [sp, #8]
 80138d6:	459b      	cmp	fp, r3
 80138d8:	dd13      	ble.n	8013902 <__hexnan+0x7a>
 80138da:	454c      	cmp	r4, r9
 80138dc:	d206      	bcs.n	80138ec <__hexnan+0x64>
 80138de:	2d07      	cmp	r5, #7
 80138e0:	dc04      	bgt.n	80138ec <__hexnan+0x64>
 80138e2:	462a      	mov	r2, r5
 80138e4:	4649      	mov	r1, r9
 80138e6:	4620      	mov	r0, r4
 80138e8:	f7ff ffa8 	bl	801383c <L_shift>
 80138ec:	4544      	cmp	r4, r8
 80138ee:	d952      	bls.n	8013996 <__hexnan+0x10e>
 80138f0:	2300      	movs	r3, #0
 80138f2:	f1a4 0904 	sub.w	r9, r4, #4
 80138f6:	f844 3c04 	str.w	r3, [r4, #-4]
 80138fa:	f8cd b008 	str.w	fp, [sp, #8]
 80138fe:	464c      	mov	r4, r9
 8013900:	461d      	mov	r5, r3
 8013902:	9903      	ldr	r1, [sp, #12]
 8013904:	e7d7      	b.n	80138b6 <__hexnan+0x2e>
 8013906:	2a29      	cmp	r2, #41	@ 0x29
 8013908:	d157      	bne.n	80139ba <__hexnan+0x132>
 801390a:	3102      	adds	r1, #2
 801390c:	f8ca 1000 	str.w	r1, [sl]
 8013910:	f1bb 0f00 	cmp.w	fp, #0
 8013914:	d051      	beq.n	80139ba <__hexnan+0x132>
 8013916:	454c      	cmp	r4, r9
 8013918:	d206      	bcs.n	8013928 <__hexnan+0xa0>
 801391a:	2d07      	cmp	r5, #7
 801391c:	dc04      	bgt.n	8013928 <__hexnan+0xa0>
 801391e:	462a      	mov	r2, r5
 8013920:	4649      	mov	r1, r9
 8013922:	4620      	mov	r0, r4
 8013924:	f7ff ff8a 	bl	801383c <L_shift>
 8013928:	4544      	cmp	r4, r8
 801392a:	d936      	bls.n	801399a <__hexnan+0x112>
 801392c:	f1a8 0204 	sub.w	r2, r8, #4
 8013930:	4623      	mov	r3, r4
 8013932:	f853 1b04 	ldr.w	r1, [r3], #4
 8013936:	f842 1f04 	str.w	r1, [r2, #4]!
 801393a:	429f      	cmp	r7, r3
 801393c:	d2f9      	bcs.n	8013932 <__hexnan+0xaa>
 801393e:	1b3b      	subs	r3, r7, r4
 8013940:	f023 0303 	bic.w	r3, r3, #3
 8013944:	3304      	adds	r3, #4
 8013946:	3401      	adds	r4, #1
 8013948:	3e03      	subs	r6, #3
 801394a:	42b4      	cmp	r4, r6
 801394c:	bf88      	it	hi
 801394e:	2304      	movhi	r3, #4
 8013950:	4443      	add	r3, r8
 8013952:	2200      	movs	r2, #0
 8013954:	f843 2b04 	str.w	r2, [r3], #4
 8013958:	429f      	cmp	r7, r3
 801395a:	d2fb      	bcs.n	8013954 <__hexnan+0xcc>
 801395c:	683b      	ldr	r3, [r7, #0]
 801395e:	b91b      	cbnz	r3, 8013968 <__hexnan+0xe0>
 8013960:	4547      	cmp	r7, r8
 8013962:	d128      	bne.n	80139b6 <__hexnan+0x12e>
 8013964:	2301      	movs	r3, #1
 8013966:	603b      	str	r3, [r7, #0]
 8013968:	2005      	movs	r0, #5
 801396a:	b007      	add	sp, #28
 801396c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013970:	3501      	adds	r5, #1
 8013972:	2d08      	cmp	r5, #8
 8013974:	f10b 0b01 	add.w	fp, fp, #1
 8013978:	dd06      	ble.n	8013988 <__hexnan+0x100>
 801397a:	4544      	cmp	r4, r8
 801397c:	d9c1      	bls.n	8013902 <__hexnan+0x7a>
 801397e:	2300      	movs	r3, #0
 8013980:	f844 3c04 	str.w	r3, [r4, #-4]
 8013984:	2501      	movs	r5, #1
 8013986:	3c04      	subs	r4, #4
 8013988:	6822      	ldr	r2, [r4, #0]
 801398a:	f000 000f 	and.w	r0, r0, #15
 801398e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8013992:	6020      	str	r0, [r4, #0]
 8013994:	e7b5      	b.n	8013902 <__hexnan+0x7a>
 8013996:	2508      	movs	r5, #8
 8013998:	e7b3      	b.n	8013902 <__hexnan+0x7a>
 801399a:	9b01      	ldr	r3, [sp, #4]
 801399c:	2b00      	cmp	r3, #0
 801399e:	d0dd      	beq.n	801395c <__hexnan+0xd4>
 80139a0:	f1c3 0320 	rsb	r3, r3, #32
 80139a4:	f04f 32ff 	mov.w	r2, #4294967295
 80139a8:	40da      	lsrs	r2, r3
 80139aa:	f856 3c04 	ldr.w	r3, [r6, #-4]
 80139ae:	4013      	ands	r3, r2
 80139b0:	f846 3c04 	str.w	r3, [r6, #-4]
 80139b4:	e7d2      	b.n	801395c <__hexnan+0xd4>
 80139b6:	3f04      	subs	r7, #4
 80139b8:	e7d0      	b.n	801395c <__hexnan+0xd4>
 80139ba:	2004      	movs	r0, #4
 80139bc:	e7d5      	b.n	801396a <__hexnan+0xe2>

080139be <__ascii_mbtowc>:
 80139be:	b082      	sub	sp, #8
 80139c0:	b901      	cbnz	r1, 80139c4 <__ascii_mbtowc+0x6>
 80139c2:	a901      	add	r1, sp, #4
 80139c4:	b142      	cbz	r2, 80139d8 <__ascii_mbtowc+0x1a>
 80139c6:	b14b      	cbz	r3, 80139dc <__ascii_mbtowc+0x1e>
 80139c8:	7813      	ldrb	r3, [r2, #0]
 80139ca:	600b      	str	r3, [r1, #0]
 80139cc:	7812      	ldrb	r2, [r2, #0]
 80139ce:	1e10      	subs	r0, r2, #0
 80139d0:	bf18      	it	ne
 80139d2:	2001      	movne	r0, #1
 80139d4:	b002      	add	sp, #8
 80139d6:	4770      	bx	lr
 80139d8:	4610      	mov	r0, r2
 80139da:	e7fb      	b.n	80139d4 <__ascii_mbtowc+0x16>
 80139dc:	f06f 0001 	mvn.w	r0, #1
 80139e0:	e7f8      	b.n	80139d4 <__ascii_mbtowc+0x16>

080139e2 <_realloc_r>:
 80139e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80139e6:	4607      	mov	r7, r0
 80139e8:	4614      	mov	r4, r2
 80139ea:	460d      	mov	r5, r1
 80139ec:	b921      	cbnz	r1, 80139f8 <_realloc_r+0x16>
 80139ee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80139f2:	4611      	mov	r1, r2
 80139f4:	f7fd bd60 	b.w	80114b8 <_malloc_r>
 80139f8:	b92a      	cbnz	r2, 8013a06 <_realloc_r+0x24>
 80139fa:	f7fd fce9 	bl	80113d0 <_free_r>
 80139fe:	4625      	mov	r5, r4
 8013a00:	4628      	mov	r0, r5
 8013a02:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013a06:	f000 f86b 	bl	8013ae0 <_malloc_usable_size_r>
 8013a0a:	4284      	cmp	r4, r0
 8013a0c:	4606      	mov	r6, r0
 8013a0e:	d802      	bhi.n	8013a16 <_realloc_r+0x34>
 8013a10:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8013a14:	d8f4      	bhi.n	8013a00 <_realloc_r+0x1e>
 8013a16:	4621      	mov	r1, r4
 8013a18:	4638      	mov	r0, r7
 8013a1a:	f7fd fd4d 	bl	80114b8 <_malloc_r>
 8013a1e:	4680      	mov	r8, r0
 8013a20:	b908      	cbnz	r0, 8013a26 <_realloc_r+0x44>
 8013a22:	4645      	mov	r5, r8
 8013a24:	e7ec      	b.n	8013a00 <_realloc_r+0x1e>
 8013a26:	42b4      	cmp	r4, r6
 8013a28:	4622      	mov	r2, r4
 8013a2a:	4629      	mov	r1, r5
 8013a2c:	bf28      	it	cs
 8013a2e:	4632      	movcs	r2, r6
 8013a30:	f7fc fe41 	bl	80106b6 <memcpy>
 8013a34:	4629      	mov	r1, r5
 8013a36:	4638      	mov	r0, r7
 8013a38:	f7fd fcca 	bl	80113d0 <_free_r>
 8013a3c:	e7f1      	b.n	8013a22 <_realloc_r+0x40>

08013a3e <__ascii_wctomb>:
 8013a3e:	4603      	mov	r3, r0
 8013a40:	4608      	mov	r0, r1
 8013a42:	b141      	cbz	r1, 8013a56 <__ascii_wctomb+0x18>
 8013a44:	2aff      	cmp	r2, #255	@ 0xff
 8013a46:	d904      	bls.n	8013a52 <__ascii_wctomb+0x14>
 8013a48:	228a      	movs	r2, #138	@ 0x8a
 8013a4a:	601a      	str	r2, [r3, #0]
 8013a4c:	f04f 30ff 	mov.w	r0, #4294967295
 8013a50:	4770      	bx	lr
 8013a52:	700a      	strb	r2, [r1, #0]
 8013a54:	2001      	movs	r0, #1
 8013a56:	4770      	bx	lr

08013a58 <_raise_r>:
 8013a58:	291f      	cmp	r1, #31
 8013a5a:	b538      	push	{r3, r4, r5, lr}
 8013a5c:	4605      	mov	r5, r0
 8013a5e:	460c      	mov	r4, r1
 8013a60:	d904      	bls.n	8013a6c <_raise_r+0x14>
 8013a62:	2316      	movs	r3, #22
 8013a64:	6003      	str	r3, [r0, #0]
 8013a66:	f04f 30ff 	mov.w	r0, #4294967295
 8013a6a:	bd38      	pop	{r3, r4, r5, pc}
 8013a6c:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8013a6e:	b112      	cbz	r2, 8013a76 <_raise_r+0x1e>
 8013a70:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8013a74:	b94b      	cbnz	r3, 8013a8a <_raise_r+0x32>
 8013a76:	4628      	mov	r0, r5
 8013a78:	f000 f830 	bl	8013adc <_getpid_r>
 8013a7c:	4622      	mov	r2, r4
 8013a7e:	4601      	mov	r1, r0
 8013a80:	4628      	mov	r0, r5
 8013a82:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8013a86:	f000 b817 	b.w	8013ab8 <_kill_r>
 8013a8a:	2b01      	cmp	r3, #1
 8013a8c:	d00a      	beq.n	8013aa4 <_raise_r+0x4c>
 8013a8e:	1c59      	adds	r1, r3, #1
 8013a90:	d103      	bne.n	8013a9a <_raise_r+0x42>
 8013a92:	2316      	movs	r3, #22
 8013a94:	6003      	str	r3, [r0, #0]
 8013a96:	2001      	movs	r0, #1
 8013a98:	e7e7      	b.n	8013a6a <_raise_r+0x12>
 8013a9a:	2100      	movs	r1, #0
 8013a9c:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8013aa0:	4620      	mov	r0, r4
 8013aa2:	4798      	blx	r3
 8013aa4:	2000      	movs	r0, #0
 8013aa6:	e7e0      	b.n	8013a6a <_raise_r+0x12>

08013aa8 <raise>:
 8013aa8:	4b02      	ldr	r3, [pc, #8]	@ (8013ab4 <raise+0xc>)
 8013aaa:	4601      	mov	r1, r0
 8013aac:	6818      	ldr	r0, [r3, #0]
 8013aae:	f7ff bfd3 	b.w	8013a58 <_raise_r>
 8013ab2:	bf00      	nop
 8013ab4:	2000d140 	.word	0x2000d140

08013ab8 <_kill_r>:
 8013ab8:	b538      	push	{r3, r4, r5, lr}
 8013aba:	4d07      	ldr	r5, [pc, #28]	@ (8013ad8 <_kill_r+0x20>)
 8013abc:	2300      	movs	r3, #0
 8013abe:	4604      	mov	r4, r0
 8013ac0:	4608      	mov	r0, r1
 8013ac2:	4611      	mov	r1, r2
 8013ac4:	602b      	str	r3, [r5, #0]
 8013ac6:	f7ed fad1 	bl	800106c <_kill>
 8013aca:	1c43      	adds	r3, r0, #1
 8013acc:	d102      	bne.n	8013ad4 <_kill_r+0x1c>
 8013ace:	682b      	ldr	r3, [r5, #0]
 8013ad0:	b103      	cbz	r3, 8013ad4 <_kill_r+0x1c>
 8013ad2:	6023      	str	r3, [r4, #0]
 8013ad4:	bd38      	pop	{r3, r4, r5, pc}
 8013ad6:	bf00      	nop
 8013ad8:	20016524 	.word	0x20016524

08013adc <_getpid_r>:
 8013adc:	f7ed bab8 	b.w	8001050 <_getpid>

08013ae0 <_malloc_usable_size_r>:
 8013ae0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8013ae4:	1f18      	subs	r0, r3, #4
 8013ae6:	2b00      	cmp	r3, #0
 8013ae8:	bfbc      	itt	lt
 8013aea:	580b      	ldrlt	r3, [r1, r0]
 8013aec:	18c0      	addlt	r0, r0, r3
 8013aee:	4770      	bx	lr

08013af0 <_init>:
 8013af0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013af2:	bf00      	nop
 8013af4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013af6:	bc08      	pop	{r3}
 8013af8:	469e      	mov	lr, r3
 8013afa:	4770      	bx	lr

08013afc <_fini>:
 8013afc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013afe:	bf00      	nop
 8013b00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013b02:	bc08      	pop	{r3}
 8013b04:	469e      	mov	lr, r3
 8013b06:	4770      	bx	lr
