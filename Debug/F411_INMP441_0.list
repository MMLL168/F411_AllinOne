
F411_INMP441_0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f240  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001b64  0800f3e0  0800f3e0  000103e0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08010f44  08010f44  0001f2fc  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08010f44  08010f44  00011f44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08010f4c  08010f4c  0001f2fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08010f4c  08010f4c  00011f4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08010f50  08010f50  00011f50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000d2fc  20000000  08010f54  00012000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00006f20  2000d2fc  0801e250  0001f2fc  2**2
                  ALLOC
 10 ._user_heap_stack 00001004  2001421c  0801e250  0002021c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0001f2fc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001a002  00000000  00000000  0001f32c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004441  00000000  00000000  0003932e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001570  00000000  00000000  0003d770  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001075  00000000  00000000  0003ece0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001c74d  00000000  00000000  0003fd55  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001e9ed  00000000  00000000  0005c4a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a284b  00000000  00000000  0007ae8f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0011d6da  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006cc8  00000000  00000000  0011d720  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000053  00000000  00000000  001243e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000d2fc 	.word	0x2000d2fc
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800f3c8 	.word	0x0800f3c8

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000d300 	.word	0x2000d300
 80001dc:	0800f3c8 	.word	0x0800f3c8

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cac:	f000 b9be 	b.w	800102c <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f83c 	bl	8000d34 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__aeabi_d2lz>:
 8000cc8:	b538      	push	{r3, r4, r5, lr}
 8000cca:	2200      	movs	r2, #0
 8000ccc:	2300      	movs	r3, #0
 8000cce:	4604      	mov	r4, r0
 8000cd0:	460d      	mov	r5, r1
 8000cd2:	f7ff ff0b 	bl	8000aec <__aeabi_dcmplt>
 8000cd6:	b928      	cbnz	r0, 8000ce4 <__aeabi_d2lz+0x1c>
 8000cd8:	4620      	mov	r0, r4
 8000cda:	4629      	mov	r1, r5
 8000cdc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000ce0:	f000 b80a 	b.w	8000cf8 <__aeabi_d2ulz>
 8000ce4:	4620      	mov	r0, r4
 8000ce6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000cea:	f000 f805 	bl	8000cf8 <__aeabi_d2ulz>
 8000cee:	4240      	negs	r0, r0
 8000cf0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cf4:	bd38      	pop	{r3, r4, r5, pc}
 8000cf6:	bf00      	nop

08000cf8 <__aeabi_d2ulz>:
 8000cf8:	b5d0      	push	{r4, r6, r7, lr}
 8000cfa:	4b0c      	ldr	r3, [pc, #48]	@ (8000d2c <__aeabi_d2ulz+0x34>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	4606      	mov	r6, r0
 8000d00:	460f      	mov	r7, r1
 8000d02:	f7ff fc81 	bl	8000608 <__aeabi_dmul>
 8000d06:	f7ff ff57 	bl	8000bb8 <__aeabi_d2uiz>
 8000d0a:	4604      	mov	r4, r0
 8000d0c:	f7ff fc02 	bl	8000514 <__aeabi_ui2d>
 8000d10:	4b07      	ldr	r3, [pc, #28]	@ (8000d30 <__aeabi_d2ulz+0x38>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	f7ff fc78 	bl	8000608 <__aeabi_dmul>
 8000d18:	4602      	mov	r2, r0
 8000d1a:	460b      	mov	r3, r1
 8000d1c:	4630      	mov	r0, r6
 8000d1e:	4639      	mov	r1, r7
 8000d20:	f7ff faba 	bl	8000298 <__aeabi_dsub>
 8000d24:	f7ff ff48 	bl	8000bb8 <__aeabi_d2uiz>
 8000d28:	4621      	mov	r1, r4
 8000d2a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d2c:	3df00000 	.word	0x3df00000
 8000d30:	41f00000 	.word	0x41f00000

08000d34 <__udivmoddi4>:
 8000d34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d38:	9d08      	ldr	r5, [sp, #32]
 8000d3a:	468e      	mov	lr, r1
 8000d3c:	4604      	mov	r4, r0
 8000d3e:	4688      	mov	r8, r1
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d14a      	bne.n	8000dda <__udivmoddi4+0xa6>
 8000d44:	428a      	cmp	r2, r1
 8000d46:	4617      	mov	r7, r2
 8000d48:	d962      	bls.n	8000e10 <__udivmoddi4+0xdc>
 8000d4a:	fab2 f682 	clz	r6, r2
 8000d4e:	b14e      	cbz	r6, 8000d64 <__udivmoddi4+0x30>
 8000d50:	f1c6 0320 	rsb	r3, r6, #32
 8000d54:	fa01 f806 	lsl.w	r8, r1, r6
 8000d58:	fa20 f303 	lsr.w	r3, r0, r3
 8000d5c:	40b7      	lsls	r7, r6
 8000d5e:	ea43 0808 	orr.w	r8, r3, r8
 8000d62:	40b4      	lsls	r4, r6
 8000d64:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d68:	fa1f fc87 	uxth.w	ip, r7
 8000d6c:	fbb8 f1fe 	udiv	r1, r8, lr
 8000d70:	0c23      	lsrs	r3, r4, #16
 8000d72:	fb0e 8811 	mls	r8, lr, r1, r8
 8000d76:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d7a:	fb01 f20c 	mul.w	r2, r1, ip
 8000d7e:	429a      	cmp	r2, r3
 8000d80:	d909      	bls.n	8000d96 <__udivmoddi4+0x62>
 8000d82:	18fb      	adds	r3, r7, r3
 8000d84:	f101 30ff 	add.w	r0, r1, #4294967295
 8000d88:	f080 80ea 	bcs.w	8000f60 <__udivmoddi4+0x22c>
 8000d8c:	429a      	cmp	r2, r3
 8000d8e:	f240 80e7 	bls.w	8000f60 <__udivmoddi4+0x22c>
 8000d92:	3902      	subs	r1, #2
 8000d94:	443b      	add	r3, r7
 8000d96:	1a9a      	subs	r2, r3, r2
 8000d98:	b2a3      	uxth	r3, r4
 8000d9a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d9e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000da2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000da6:	fb00 fc0c 	mul.w	ip, r0, ip
 8000daa:	459c      	cmp	ip, r3
 8000dac:	d909      	bls.n	8000dc2 <__udivmoddi4+0x8e>
 8000dae:	18fb      	adds	r3, r7, r3
 8000db0:	f100 32ff 	add.w	r2, r0, #4294967295
 8000db4:	f080 80d6 	bcs.w	8000f64 <__udivmoddi4+0x230>
 8000db8:	459c      	cmp	ip, r3
 8000dba:	f240 80d3 	bls.w	8000f64 <__udivmoddi4+0x230>
 8000dbe:	443b      	add	r3, r7
 8000dc0:	3802      	subs	r0, #2
 8000dc2:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000dc6:	eba3 030c 	sub.w	r3, r3, ip
 8000dca:	2100      	movs	r1, #0
 8000dcc:	b11d      	cbz	r5, 8000dd6 <__udivmoddi4+0xa2>
 8000dce:	40f3      	lsrs	r3, r6
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	e9c5 3200 	strd	r3, r2, [r5]
 8000dd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dda:	428b      	cmp	r3, r1
 8000ddc:	d905      	bls.n	8000dea <__udivmoddi4+0xb6>
 8000dde:	b10d      	cbz	r5, 8000de4 <__udivmoddi4+0xb0>
 8000de0:	e9c5 0100 	strd	r0, r1, [r5]
 8000de4:	2100      	movs	r1, #0
 8000de6:	4608      	mov	r0, r1
 8000de8:	e7f5      	b.n	8000dd6 <__udivmoddi4+0xa2>
 8000dea:	fab3 f183 	clz	r1, r3
 8000dee:	2900      	cmp	r1, #0
 8000df0:	d146      	bne.n	8000e80 <__udivmoddi4+0x14c>
 8000df2:	4573      	cmp	r3, lr
 8000df4:	d302      	bcc.n	8000dfc <__udivmoddi4+0xc8>
 8000df6:	4282      	cmp	r2, r0
 8000df8:	f200 8105 	bhi.w	8001006 <__udivmoddi4+0x2d2>
 8000dfc:	1a84      	subs	r4, r0, r2
 8000dfe:	eb6e 0203 	sbc.w	r2, lr, r3
 8000e02:	2001      	movs	r0, #1
 8000e04:	4690      	mov	r8, r2
 8000e06:	2d00      	cmp	r5, #0
 8000e08:	d0e5      	beq.n	8000dd6 <__udivmoddi4+0xa2>
 8000e0a:	e9c5 4800 	strd	r4, r8, [r5]
 8000e0e:	e7e2      	b.n	8000dd6 <__udivmoddi4+0xa2>
 8000e10:	2a00      	cmp	r2, #0
 8000e12:	f000 8090 	beq.w	8000f36 <__udivmoddi4+0x202>
 8000e16:	fab2 f682 	clz	r6, r2
 8000e1a:	2e00      	cmp	r6, #0
 8000e1c:	f040 80a4 	bne.w	8000f68 <__udivmoddi4+0x234>
 8000e20:	1a8a      	subs	r2, r1, r2
 8000e22:	0c03      	lsrs	r3, r0, #16
 8000e24:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e28:	b280      	uxth	r0, r0
 8000e2a:	b2bc      	uxth	r4, r7
 8000e2c:	2101      	movs	r1, #1
 8000e2e:	fbb2 fcfe 	udiv	ip, r2, lr
 8000e32:	fb0e 221c 	mls	r2, lr, ip, r2
 8000e36:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000e3a:	fb04 f20c 	mul.w	r2, r4, ip
 8000e3e:	429a      	cmp	r2, r3
 8000e40:	d907      	bls.n	8000e52 <__udivmoddi4+0x11e>
 8000e42:	18fb      	adds	r3, r7, r3
 8000e44:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000e48:	d202      	bcs.n	8000e50 <__udivmoddi4+0x11c>
 8000e4a:	429a      	cmp	r2, r3
 8000e4c:	f200 80e0 	bhi.w	8001010 <__udivmoddi4+0x2dc>
 8000e50:	46c4      	mov	ip, r8
 8000e52:	1a9b      	subs	r3, r3, r2
 8000e54:	fbb3 f2fe 	udiv	r2, r3, lr
 8000e58:	fb0e 3312 	mls	r3, lr, r2, r3
 8000e5c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000e60:	fb02 f404 	mul.w	r4, r2, r4
 8000e64:	429c      	cmp	r4, r3
 8000e66:	d907      	bls.n	8000e78 <__udivmoddi4+0x144>
 8000e68:	18fb      	adds	r3, r7, r3
 8000e6a:	f102 30ff 	add.w	r0, r2, #4294967295
 8000e6e:	d202      	bcs.n	8000e76 <__udivmoddi4+0x142>
 8000e70:	429c      	cmp	r4, r3
 8000e72:	f200 80ca 	bhi.w	800100a <__udivmoddi4+0x2d6>
 8000e76:	4602      	mov	r2, r0
 8000e78:	1b1b      	subs	r3, r3, r4
 8000e7a:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000e7e:	e7a5      	b.n	8000dcc <__udivmoddi4+0x98>
 8000e80:	f1c1 0620 	rsb	r6, r1, #32
 8000e84:	408b      	lsls	r3, r1
 8000e86:	fa22 f706 	lsr.w	r7, r2, r6
 8000e8a:	431f      	orrs	r7, r3
 8000e8c:	fa0e f401 	lsl.w	r4, lr, r1
 8000e90:	fa20 f306 	lsr.w	r3, r0, r6
 8000e94:	fa2e fe06 	lsr.w	lr, lr, r6
 8000e98:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000e9c:	4323      	orrs	r3, r4
 8000e9e:	fa00 f801 	lsl.w	r8, r0, r1
 8000ea2:	fa1f fc87 	uxth.w	ip, r7
 8000ea6:	fbbe f0f9 	udiv	r0, lr, r9
 8000eaa:	0c1c      	lsrs	r4, r3, #16
 8000eac:	fb09 ee10 	mls	lr, r9, r0, lr
 8000eb0:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000eb4:	fb00 fe0c 	mul.w	lr, r0, ip
 8000eb8:	45a6      	cmp	lr, r4
 8000eba:	fa02 f201 	lsl.w	r2, r2, r1
 8000ebe:	d909      	bls.n	8000ed4 <__udivmoddi4+0x1a0>
 8000ec0:	193c      	adds	r4, r7, r4
 8000ec2:	f100 3aff 	add.w	sl, r0, #4294967295
 8000ec6:	f080 809c 	bcs.w	8001002 <__udivmoddi4+0x2ce>
 8000eca:	45a6      	cmp	lr, r4
 8000ecc:	f240 8099 	bls.w	8001002 <__udivmoddi4+0x2ce>
 8000ed0:	3802      	subs	r0, #2
 8000ed2:	443c      	add	r4, r7
 8000ed4:	eba4 040e 	sub.w	r4, r4, lr
 8000ed8:	fa1f fe83 	uxth.w	lr, r3
 8000edc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000ee0:	fb09 4413 	mls	r4, r9, r3, r4
 8000ee4:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000ee8:	fb03 fc0c 	mul.w	ip, r3, ip
 8000eec:	45a4      	cmp	ip, r4
 8000eee:	d908      	bls.n	8000f02 <__udivmoddi4+0x1ce>
 8000ef0:	193c      	adds	r4, r7, r4
 8000ef2:	f103 3eff 	add.w	lr, r3, #4294967295
 8000ef6:	f080 8082 	bcs.w	8000ffe <__udivmoddi4+0x2ca>
 8000efa:	45a4      	cmp	ip, r4
 8000efc:	d97f      	bls.n	8000ffe <__udivmoddi4+0x2ca>
 8000efe:	3b02      	subs	r3, #2
 8000f00:	443c      	add	r4, r7
 8000f02:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000f06:	eba4 040c 	sub.w	r4, r4, ip
 8000f0a:	fba0 ec02 	umull	lr, ip, r0, r2
 8000f0e:	4564      	cmp	r4, ip
 8000f10:	4673      	mov	r3, lr
 8000f12:	46e1      	mov	r9, ip
 8000f14:	d362      	bcc.n	8000fdc <__udivmoddi4+0x2a8>
 8000f16:	d05f      	beq.n	8000fd8 <__udivmoddi4+0x2a4>
 8000f18:	b15d      	cbz	r5, 8000f32 <__udivmoddi4+0x1fe>
 8000f1a:	ebb8 0203 	subs.w	r2, r8, r3
 8000f1e:	eb64 0409 	sbc.w	r4, r4, r9
 8000f22:	fa04 f606 	lsl.w	r6, r4, r6
 8000f26:	fa22 f301 	lsr.w	r3, r2, r1
 8000f2a:	431e      	orrs	r6, r3
 8000f2c:	40cc      	lsrs	r4, r1
 8000f2e:	e9c5 6400 	strd	r6, r4, [r5]
 8000f32:	2100      	movs	r1, #0
 8000f34:	e74f      	b.n	8000dd6 <__udivmoddi4+0xa2>
 8000f36:	fbb1 fcf2 	udiv	ip, r1, r2
 8000f3a:	0c01      	lsrs	r1, r0, #16
 8000f3c:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000f40:	b280      	uxth	r0, r0
 8000f42:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000f46:	463b      	mov	r3, r7
 8000f48:	4638      	mov	r0, r7
 8000f4a:	463c      	mov	r4, r7
 8000f4c:	46b8      	mov	r8, r7
 8000f4e:	46be      	mov	lr, r7
 8000f50:	2620      	movs	r6, #32
 8000f52:	fbb1 f1f7 	udiv	r1, r1, r7
 8000f56:	eba2 0208 	sub.w	r2, r2, r8
 8000f5a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000f5e:	e766      	b.n	8000e2e <__udivmoddi4+0xfa>
 8000f60:	4601      	mov	r1, r0
 8000f62:	e718      	b.n	8000d96 <__udivmoddi4+0x62>
 8000f64:	4610      	mov	r0, r2
 8000f66:	e72c      	b.n	8000dc2 <__udivmoddi4+0x8e>
 8000f68:	f1c6 0220 	rsb	r2, r6, #32
 8000f6c:	fa2e f302 	lsr.w	r3, lr, r2
 8000f70:	40b7      	lsls	r7, r6
 8000f72:	40b1      	lsls	r1, r6
 8000f74:	fa20 f202 	lsr.w	r2, r0, r2
 8000f78:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000f7c:	430a      	orrs	r2, r1
 8000f7e:	fbb3 f8fe 	udiv	r8, r3, lr
 8000f82:	b2bc      	uxth	r4, r7
 8000f84:	fb0e 3318 	mls	r3, lr, r8, r3
 8000f88:	0c11      	lsrs	r1, r2, #16
 8000f8a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f8e:	fb08 f904 	mul.w	r9, r8, r4
 8000f92:	40b0      	lsls	r0, r6
 8000f94:	4589      	cmp	r9, r1
 8000f96:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000f9a:	b280      	uxth	r0, r0
 8000f9c:	d93e      	bls.n	800101c <__udivmoddi4+0x2e8>
 8000f9e:	1879      	adds	r1, r7, r1
 8000fa0:	f108 3cff 	add.w	ip, r8, #4294967295
 8000fa4:	d201      	bcs.n	8000faa <__udivmoddi4+0x276>
 8000fa6:	4589      	cmp	r9, r1
 8000fa8:	d81f      	bhi.n	8000fea <__udivmoddi4+0x2b6>
 8000faa:	eba1 0109 	sub.w	r1, r1, r9
 8000fae:	fbb1 f9fe 	udiv	r9, r1, lr
 8000fb2:	fb09 f804 	mul.w	r8, r9, r4
 8000fb6:	fb0e 1119 	mls	r1, lr, r9, r1
 8000fba:	b292      	uxth	r2, r2
 8000fbc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000fc0:	4542      	cmp	r2, r8
 8000fc2:	d229      	bcs.n	8001018 <__udivmoddi4+0x2e4>
 8000fc4:	18ba      	adds	r2, r7, r2
 8000fc6:	f109 31ff 	add.w	r1, r9, #4294967295
 8000fca:	d2c4      	bcs.n	8000f56 <__udivmoddi4+0x222>
 8000fcc:	4542      	cmp	r2, r8
 8000fce:	d2c2      	bcs.n	8000f56 <__udivmoddi4+0x222>
 8000fd0:	f1a9 0102 	sub.w	r1, r9, #2
 8000fd4:	443a      	add	r2, r7
 8000fd6:	e7be      	b.n	8000f56 <__udivmoddi4+0x222>
 8000fd8:	45f0      	cmp	r8, lr
 8000fda:	d29d      	bcs.n	8000f18 <__udivmoddi4+0x1e4>
 8000fdc:	ebbe 0302 	subs.w	r3, lr, r2
 8000fe0:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000fe4:	3801      	subs	r0, #1
 8000fe6:	46e1      	mov	r9, ip
 8000fe8:	e796      	b.n	8000f18 <__udivmoddi4+0x1e4>
 8000fea:	eba7 0909 	sub.w	r9, r7, r9
 8000fee:	4449      	add	r1, r9
 8000ff0:	f1a8 0c02 	sub.w	ip, r8, #2
 8000ff4:	fbb1 f9fe 	udiv	r9, r1, lr
 8000ff8:	fb09 f804 	mul.w	r8, r9, r4
 8000ffc:	e7db      	b.n	8000fb6 <__udivmoddi4+0x282>
 8000ffe:	4673      	mov	r3, lr
 8001000:	e77f      	b.n	8000f02 <__udivmoddi4+0x1ce>
 8001002:	4650      	mov	r0, sl
 8001004:	e766      	b.n	8000ed4 <__udivmoddi4+0x1a0>
 8001006:	4608      	mov	r0, r1
 8001008:	e6fd      	b.n	8000e06 <__udivmoddi4+0xd2>
 800100a:	443b      	add	r3, r7
 800100c:	3a02      	subs	r2, #2
 800100e:	e733      	b.n	8000e78 <__udivmoddi4+0x144>
 8001010:	f1ac 0c02 	sub.w	ip, ip, #2
 8001014:	443b      	add	r3, r7
 8001016:	e71c      	b.n	8000e52 <__udivmoddi4+0x11e>
 8001018:	4649      	mov	r1, r9
 800101a:	e79c      	b.n	8000f56 <__udivmoddi4+0x222>
 800101c:	eba1 0109 	sub.w	r1, r1, r9
 8001020:	46c4      	mov	ip, r8
 8001022:	fbb1 f9fe 	udiv	r9, r1, lr
 8001026:	fb09 f804 	mul.w	r8, r9, r4
 800102a:	e7c4      	b.n	8000fb6 <__udivmoddi4+0x282>

0800102c <__aeabi_idiv0>:
 800102c:	4770      	bx	lr
 800102e:	bf00      	nop

08001030 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8001030:	b480      	push	{r7}
 8001032:	b083      	sub	sp, #12
 8001034:	af00      	add	r7, sp, #0
 8001036:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8001038:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 800103c:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 8001040:	f003 0301 	and.w	r3, r3, #1
 8001044:	2b00      	cmp	r3, #0
 8001046:	d013      	beq.n	8001070 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8001048:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 800104c:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 8001050:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8001054:	2b00      	cmp	r3, #0
 8001056:	d00b      	beq.n	8001070 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8001058:	e000      	b.n	800105c <ITM_SendChar+0x2c>
    {
      __NOP();
 800105a:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 800105c:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	2b00      	cmp	r3, #0
 8001064:	d0f9      	beq.n	800105a <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8001066:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 800106a:	687a      	ldr	r2, [r7, #4]
 800106c:	b2d2      	uxtb	r2, r2
 800106e:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8001070:	687b      	ldr	r3, [r7, #4]
}
 8001072:	4618      	mov	r0, r3
 8001074:	370c      	adds	r7, #12
 8001076:	46bd      	mov	sp, r7
 8001078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107c:	4770      	bx	lr
	...

08001080 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001080:	b480      	push	{r7}
 8001082:	af00      	add	r7, sp, #0
	errno = ENOSYS;
 8001084:	4b04      	ldr	r3, [pc, #16]	@ (8001098 <_getpid+0x18>)
 8001086:	2258      	movs	r2, #88	@ 0x58
 8001088:	601a      	str	r2, [r3, #0]
	return -1;
 800108a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800108e:	4618      	mov	r0, r3
 8001090:	46bd      	mov	sp, r7
 8001092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001096:	4770      	bx	lr
 8001098:	2001420c 	.word	0x2001420c

0800109c <_kill>:
  errno = ENOSYS;
  return -1;
}

int _kill(int32_t pid, int32_t sig)
{
 800109c:	b480      	push	{r7}
 800109e:	b083      	sub	sp, #12
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	6078      	str	r0, [r7, #4]
 80010a4:	6039      	str	r1, [r7, #0]
	errno = ENOSYS;
 80010a6:	4b05      	ldr	r3, [pc, #20]	@ (80010bc <_kill+0x20>)
 80010a8:	2258      	movs	r2, #88	@ 0x58
 80010aa:	601a      	str	r2, [r3, #0]
	return -1;
 80010ac:	f04f 33ff 	mov.w	r3, #4294967295
}
 80010b0:	4618      	mov	r0, r3
 80010b2:	370c      	adds	r7, #12
 80010b4:	46bd      	mov	sp, r7
 80010b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ba:	4770      	bx	lr
 80010bc:	2001420c 	.word	0x2001420c

080010c0 <_exit>:

void _exit(int32_t status)
{
 80010c0:	b480      	push	{r7}
 80010c2:	b083      	sub	sp, #12
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
	while (1) {}		/* Make sure we hang here */
 80010c8:	bf00      	nop
 80010ca:	e7fd      	b.n	80010c8 <_exit+0x8>

080010cc <_write>:
}

int _write(int32_t file, uint8_t *ptr, int32_t len)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b086      	sub	sp, #24
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	60f8      	str	r0, [r7, #12]
 80010d4:	60b9      	str	r1, [r7, #8]
 80010d6:	607a      	str	r2, [r7, #4]
	/* Implement your write code here, this is used by puts and printf for example */
	/* return len; */

	for(int i=0 ; i<len ; i++) ITM_SendChar((*ptr++));
 80010d8:	2300      	movs	r3, #0
 80010da:	617b      	str	r3, [r7, #20]
 80010dc:	e009      	b.n	80010f2 <_write+0x26>
 80010de:	68bb      	ldr	r3, [r7, #8]
 80010e0:	1c5a      	adds	r2, r3, #1
 80010e2:	60ba      	str	r2, [r7, #8]
 80010e4:	781b      	ldrb	r3, [r3, #0]
 80010e6:	4618      	mov	r0, r3
 80010e8:	f7ff ffa2 	bl	8001030 <ITM_SendChar>
 80010ec:	697b      	ldr	r3, [r7, #20]
 80010ee:	3301      	adds	r3, #1
 80010f0:	617b      	str	r3, [r7, #20]
 80010f2:	697a      	ldr	r2, [r7, #20]
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	429a      	cmp	r2, r3
 80010f8:	dbf1      	blt.n	80010de <_write+0x12>
	return len;
 80010fa:	687b      	ldr	r3, [r7, #4]
}
 80010fc:	4618      	mov	r0, r3
 80010fe:	3718      	adds	r7, #24
 8001100:	46bd      	mov	sp, r7
 8001102:	bd80      	pop	{r7, pc}

08001104 <_close>:
	return (void *) prev_heap_end;
}
#endif

int _close(int32_t file)
{
 8001104:	b480      	push	{r7}
 8001106:	b083      	sub	sp, #12
 8001108:	af00      	add	r7, sp, #0
 800110a:	6078      	str	r0, [r7, #4]
	errno = ENOSYS;
 800110c:	4b05      	ldr	r3, [pc, #20]	@ (8001124 <_close+0x20>)
 800110e:	2258      	movs	r2, #88	@ 0x58
 8001110:	601a      	str	r2, [r3, #0]
	return -1;
 8001112:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001116:	4618      	mov	r0, r3
 8001118:	370c      	adds	r7, #12
 800111a:	46bd      	mov	sp, r7
 800111c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001120:	4770      	bx	lr
 8001122:	bf00      	nop
 8001124:	2001420c 	.word	0x2001420c

08001128 <_fstat>:


int _fstat(int32_t file, struct stat *st)
{
 8001128:	b480      	push	{r7}
 800112a:	b083      	sub	sp, #12
 800112c:	af00      	add	r7, sp, #0
 800112e:	6078      	str	r0, [r7, #4]
 8001130:	6039      	str	r1, [r7, #0]
	errno = ENOSYS;
 8001132:	4b05      	ldr	r3, [pc, #20]	@ (8001148 <_fstat+0x20>)
 8001134:	2258      	movs	r2, #88	@ 0x58
 8001136:	601a      	str	r2, [r3, #0]
	return -1;
 8001138:	f04f 33ff 	mov.w	r3, #4294967295
}
 800113c:	4618      	mov	r0, r3
 800113e:	370c      	adds	r7, #12
 8001140:	46bd      	mov	sp, r7
 8001142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001146:	4770      	bx	lr
 8001148:	2001420c 	.word	0x2001420c

0800114c <_isatty>:

int _isatty(int32_t file)
{
 800114c:	b480      	push	{r7}
 800114e:	b083      	sub	sp, #12
 8001150:	af00      	add	r7, sp, #0
 8001152:	6078      	str	r0, [r7, #4]
	errno = ENOSYS;
 8001154:	4b04      	ldr	r3, [pc, #16]	@ (8001168 <_isatty+0x1c>)
 8001156:	2258      	movs	r2, #88	@ 0x58
 8001158:	601a      	str	r2, [r3, #0]
	return 0;
 800115a:	2300      	movs	r3, #0
}
 800115c:	4618      	mov	r0, r3
 800115e:	370c      	adds	r7, #12
 8001160:	46bd      	mov	sp, r7
 8001162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001166:	4770      	bx	lr
 8001168:	2001420c 	.word	0x2001420c

0800116c <_lseek>:

int _lseek(int32_t file, int32_t ptr, int32_t dir)
{
 800116c:	b480      	push	{r7}
 800116e:	b085      	sub	sp, #20
 8001170:	af00      	add	r7, sp, #0
 8001172:	60f8      	str	r0, [r7, #12]
 8001174:	60b9      	str	r1, [r7, #8]
 8001176:	607a      	str	r2, [r7, #4]
	errno = ENOSYS;
 8001178:	4b05      	ldr	r3, [pc, #20]	@ (8001190 <_lseek+0x24>)
 800117a:	2258      	movs	r2, #88	@ 0x58
 800117c:	601a      	str	r2, [r3, #0]
	return -1;
 800117e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001182:	4618      	mov	r0, r3
 8001184:	3714      	adds	r7, #20
 8001186:	46bd      	mov	sp, r7
 8001188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118c:	4770      	bx	lr
 800118e:	bf00      	nop
 8001190:	2001420c 	.word	0x2001420c

08001194 <_read>:

int _read(int32_t file, uint8_t *ptr, int32_t len)
{
 8001194:	b480      	push	{r7}
 8001196:	b085      	sub	sp, #20
 8001198:	af00      	add	r7, sp, #0
 800119a:	60f8      	str	r0, [r7, #12]
 800119c:	60b9      	str	r1, [r7, #8]
 800119e:	607a      	str	r2, [r7, #4]
	errno = ENOSYS;
 80011a0:	4b05      	ldr	r3, [pc, #20]	@ (80011b8 <_read+0x24>)
 80011a2:	2258      	movs	r2, #88	@ 0x58
 80011a4:	601a      	str	r2, [r3, #0]
	return -1;
 80011a6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80011aa:	4618      	mov	r0, r3
 80011ac:	3714      	adds	r7, #20
 80011ae:	46bd      	mov	sp, r7
 80011b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b4:	4770      	bx	lr
 80011b6:	bf00      	nop
 80011b8:	2001420c 	.word	0x2001420c

080011bc <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	b084      	sub	sp, #16
 80011c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80011c2:	463b      	mov	r3, r7
 80011c4:	2200      	movs	r2, #0
 80011c6:	601a      	str	r2, [r3, #0]
 80011c8:	605a      	str	r2, [r3, #4]
 80011ca:	609a      	str	r2, [r3, #8]
 80011cc:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80011ce:	4b36      	ldr	r3, [pc, #216]	@ (80012a8 <MX_ADC1_Init+0xec>)
 80011d0:	4a36      	ldr	r2, [pc, #216]	@ (80012ac <MX_ADC1_Init+0xf0>)
 80011d2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80011d4:	4b34      	ldr	r3, [pc, #208]	@ (80012a8 <MX_ADC1_Init+0xec>)
 80011d6:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80011da:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80011dc:	4b32      	ldr	r3, [pc, #200]	@ (80012a8 <MX_ADC1_Init+0xec>)
 80011de:	2200      	movs	r2, #0
 80011e0:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 80011e2:	4b31      	ldr	r3, [pc, #196]	@ (80012a8 <MX_ADC1_Init+0xec>)
 80011e4:	2201      	movs	r2, #1
 80011e6:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80011e8:	4b2f      	ldr	r3, [pc, #188]	@ (80012a8 <MX_ADC1_Init+0xec>)
 80011ea:	2200      	movs	r2, #0
 80011ec:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80011ee:	4b2e      	ldr	r3, [pc, #184]	@ (80012a8 <MX_ADC1_Init+0xec>)
 80011f0:	2200      	movs	r2, #0
 80011f2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80011f6:	4b2c      	ldr	r3, [pc, #176]	@ (80012a8 <MX_ADC1_Init+0xec>)
 80011f8:	2200      	movs	r2, #0
 80011fa:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80011fc:	4b2a      	ldr	r3, [pc, #168]	@ (80012a8 <MX_ADC1_Init+0xec>)
 80011fe:	4a2c      	ldr	r2, [pc, #176]	@ (80012b0 <MX_ADC1_Init+0xf4>)
 8001200:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001202:	4b29      	ldr	r3, [pc, #164]	@ (80012a8 <MX_ADC1_Init+0xec>)
 8001204:	2200      	movs	r2, #0
 8001206:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 4;
 8001208:	4b27      	ldr	r3, [pc, #156]	@ (80012a8 <MX_ADC1_Init+0xec>)
 800120a:	2204      	movs	r2, #4
 800120c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800120e:	4b26      	ldr	r3, [pc, #152]	@ (80012a8 <MX_ADC1_Init+0xec>)
 8001210:	2200      	movs	r2, #0
 8001212:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001216:	4b24      	ldr	r3, [pc, #144]	@ (80012a8 <MX_ADC1_Init+0xec>)
 8001218:	2201      	movs	r2, #1
 800121a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800121c:	4822      	ldr	r0, [pc, #136]	@ (80012a8 <MX_ADC1_Init+0xec>)
 800121e:	f004 f9f3 	bl	8005608 <HAL_ADC_Init>
 8001222:	4603      	mov	r3, r0
 8001224:	2b00      	cmp	r3, #0
 8001226:	d001      	beq.n	800122c <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001228:	f001 fbe6 	bl	80029f8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 800122c:	2306      	movs	r3, #6
 800122e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001230:	2301      	movs	r3, #1
 8001232:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001234:	2300      	movs	r3, #0
 8001236:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001238:	463b      	mov	r3, r7
 800123a:	4619      	mov	r1, r3
 800123c:	481a      	ldr	r0, [pc, #104]	@ (80012a8 <MX_ADC1_Init+0xec>)
 800123e:	f004 fb89 	bl	8005954 <HAL_ADC_ConfigChannel>
 8001242:	4603      	mov	r3, r0
 8001244:	2b00      	cmp	r3, #0
 8001246:	d001      	beq.n	800124c <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001248:	f001 fbd6 	bl	80029f8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 800124c:	2307      	movs	r3, #7
 800124e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8001250:	2302      	movs	r3, #2
 8001252:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001254:	463b      	mov	r3, r7
 8001256:	4619      	mov	r1, r3
 8001258:	4813      	ldr	r0, [pc, #76]	@ (80012a8 <MX_ADC1_Init+0xec>)
 800125a:	f004 fb7b 	bl	8005954 <HAL_ADC_ConfigChannel>
 800125e:	4603      	mov	r3, r0
 8001260:	2b00      	cmp	r3, #0
 8001262:	d001      	beq.n	8001268 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8001264:	f001 fbc8 	bl	80029f8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8001268:	230e      	movs	r3, #14
 800126a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 800126c:	2303      	movs	r3, #3
 800126e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001270:	463b      	mov	r3, r7
 8001272:	4619      	mov	r1, r3
 8001274:	480c      	ldr	r0, [pc, #48]	@ (80012a8 <MX_ADC1_Init+0xec>)
 8001276:	f004 fb6d 	bl	8005954 <HAL_ADC_ConfigChannel>
 800127a:	4603      	mov	r3, r0
 800127c:	2b00      	cmp	r3, #0
 800127e:	d001      	beq.n	8001284 <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 8001280:	f001 fbba 	bl	80029f8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8001284:	230f      	movs	r3, #15
 8001286:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8001288:	2304      	movs	r3, #4
 800128a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800128c:	463b      	mov	r3, r7
 800128e:	4619      	mov	r1, r3
 8001290:	4805      	ldr	r0, [pc, #20]	@ (80012a8 <MX_ADC1_Init+0xec>)
 8001292:	f004 fb5f 	bl	8005954 <HAL_ADC_ConfigChannel>
 8001296:	4603      	mov	r3, r0
 8001298:	2b00      	cmp	r3, #0
 800129a:	d001      	beq.n	80012a0 <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 800129c:	f001 fbac 	bl	80029f8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80012a0:	bf00      	nop
 80012a2:	3710      	adds	r7, #16
 80012a4:	46bd      	mov	sp, r7
 80012a6:	bd80      	pop	{r7, pc}
 80012a8:	2000d318 	.word	0x2000d318
 80012ac:	40012000 	.word	0x40012000
 80012b0:	0f000001 	.word	0x0f000001

080012b4 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b08a      	sub	sp, #40	@ 0x28
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012bc:	f107 0314 	add.w	r3, r7, #20
 80012c0:	2200      	movs	r2, #0
 80012c2:	601a      	str	r2, [r3, #0]
 80012c4:	605a      	str	r2, [r3, #4]
 80012c6:	609a      	str	r2, [r3, #8]
 80012c8:	60da      	str	r2, [r3, #12]
 80012ca:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	4a3b      	ldr	r2, [pc, #236]	@ (80013c0 <HAL_ADC_MspInit+0x10c>)
 80012d2:	4293      	cmp	r3, r2
 80012d4:	d170      	bne.n	80013b8 <HAL_ADC_MspInit+0x104>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80012d6:	2300      	movs	r3, #0
 80012d8:	613b      	str	r3, [r7, #16]
 80012da:	4b3a      	ldr	r3, [pc, #232]	@ (80013c4 <HAL_ADC_MspInit+0x110>)
 80012dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012de:	4a39      	ldr	r2, [pc, #228]	@ (80013c4 <HAL_ADC_MspInit+0x110>)
 80012e0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80012e4:	6453      	str	r3, [r2, #68]	@ 0x44
 80012e6:	4b37      	ldr	r3, [pc, #220]	@ (80013c4 <HAL_ADC_MspInit+0x110>)
 80012e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012ea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80012ee:	613b      	str	r3, [r7, #16]
 80012f0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012f2:	2300      	movs	r3, #0
 80012f4:	60fb      	str	r3, [r7, #12]
 80012f6:	4b33      	ldr	r3, [pc, #204]	@ (80013c4 <HAL_ADC_MspInit+0x110>)
 80012f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012fa:	4a32      	ldr	r2, [pc, #200]	@ (80013c4 <HAL_ADC_MspInit+0x110>)
 80012fc:	f043 0301 	orr.w	r3, r3, #1
 8001300:	6313      	str	r3, [r2, #48]	@ 0x30
 8001302:	4b30      	ldr	r3, [pc, #192]	@ (80013c4 <HAL_ADC_MspInit+0x110>)
 8001304:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001306:	f003 0301 	and.w	r3, r3, #1
 800130a:	60fb      	str	r3, [r7, #12]
 800130c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800130e:	2300      	movs	r3, #0
 8001310:	60bb      	str	r3, [r7, #8]
 8001312:	4b2c      	ldr	r3, [pc, #176]	@ (80013c4 <HAL_ADC_MspInit+0x110>)
 8001314:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001316:	4a2b      	ldr	r2, [pc, #172]	@ (80013c4 <HAL_ADC_MspInit+0x110>)
 8001318:	f043 0304 	orr.w	r3, r3, #4
 800131c:	6313      	str	r3, [r2, #48]	@ 0x30
 800131e:	4b29      	ldr	r3, [pc, #164]	@ (80013c4 <HAL_ADC_MspInit+0x110>)
 8001320:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001322:	f003 0304 	and.w	r3, r3, #4
 8001326:	60bb      	str	r3, [r7, #8]
 8001328:	68bb      	ldr	r3, [r7, #8]
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    PC4     ------> ADC1_IN14
    PC5     ------> ADC1_IN15
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800132a:	23c0      	movs	r3, #192	@ 0xc0
 800132c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800132e:	2303      	movs	r3, #3
 8001330:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001332:	2300      	movs	r3, #0
 8001334:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001336:	f107 0314 	add.w	r3, r7, #20
 800133a:	4619      	mov	r1, r3
 800133c:	4822      	ldr	r0, [pc, #136]	@ (80013c8 <HAL_ADC_MspInit+0x114>)
 800133e:	f005 fae9 	bl	8006914 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8001342:	2330      	movs	r3, #48	@ 0x30
 8001344:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001346:	2303      	movs	r3, #3
 8001348:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800134a:	2300      	movs	r3, #0
 800134c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800134e:	f107 0314 	add.w	r3, r7, #20
 8001352:	4619      	mov	r1, r3
 8001354:	481d      	ldr	r0, [pc, #116]	@ (80013cc <HAL_ADC_MspInit+0x118>)
 8001356:	f005 fadd 	bl	8006914 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 800135a:	4b1d      	ldr	r3, [pc, #116]	@ (80013d0 <HAL_ADC_MspInit+0x11c>)
 800135c:	4a1d      	ldr	r2, [pc, #116]	@ (80013d4 <HAL_ADC_MspInit+0x120>)
 800135e:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001360:	4b1b      	ldr	r3, [pc, #108]	@ (80013d0 <HAL_ADC_MspInit+0x11c>)
 8001362:	2200      	movs	r2, #0
 8001364:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001366:	4b1a      	ldr	r3, [pc, #104]	@ (80013d0 <HAL_ADC_MspInit+0x11c>)
 8001368:	2200      	movs	r2, #0
 800136a:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800136c:	4b18      	ldr	r3, [pc, #96]	@ (80013d0 <HAL_ADC_MspInit+0x11c>)
 800136e:	2200      	movs	r2, #0
 8001370:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001372:	4b17      	ldr	r3, [pc, #92]	@ (80013d0 <HAL_ADC_MspInit+0x11c>)
 8001374:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001378:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800137a:	4b15      	ldr	r3, [pc, #84]	@ (80013d0 <HAL_ADC_MspInit+0x11c>)
 800137c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001380:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001382:	4b13      	ldr	r3, [pc, #76]	@ (80013d0 <HAL_ADC_MspInit+0x11c>)
 8001384:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001388:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 800138a:	4b11      	ldr	r3, [pc, #68]	@ (80013d0 <HAL_ADC_MspInit+0x11c>)
 800138c:	2200      	movs	r2, #0
 800138e:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001390:	4b0f      	ldr	r3, [pc, #60]	@ (80013d0 <HAL_ADC_MspInit+0x11c>)
 8001392:	2200      	movs	r2, #0
 8001394:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001396:	4b0e      	ldr	r3, [pc, #56]	@ (80013d0 <HAL_ADC_MspInit+0x11c>)
 8001398:	2200      	movs	r2, #0
 800139a:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800139c:	480c      	ldr	r0, [pc, #48]	@ (80013d0 <HAL_ADC_MspInit+0x11c>)
 800139e:	f004 feb7 	bl	8006110 <HAL_DMA_Init>
 80013a2:	4603      	mov	r3, r0
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d001      	beq.n	80013ac <HAL_ADC_MspInit+0xf8>
    {
      Error_Handler();
 80013a8:	f001 fb26 	bl	80029f8 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	4a08      	ldr	r2, [pc, #32]	@ (80013d0 <HAL_ADC_MspInit+0x11c>)
 80013b0:	639a      	str	r2, [r3, #56]	@ 0x38
 80013b2:	4a07      	ldr	r2, [pc, #28]	@ (80013d0 <HAL_ADC_MspInit+0x11c>)
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80013b8:	bf00      	nop
 80013ba:	3728      	adds	r7, #40	@ 0x28
 80013bc:	46bd      	mov	sp, r7
 80013be:	bd80      	pop	{r7, pc}
 80013c0:	40012000 	.word	0x40012000
 80013c4:	40023800 	.word	0x40023800
 80013c8:	40020000 	.word	0x40020000
 80013cc:	40020800 	.word	0x40020800
 80013d0:	2000d360 	.word	0x2000d360
 80013d4:	40026410 	.word	0x40026410

080013d8 <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 80013dc:	4b06      	ldr	r3, [pc, #24]	@ (80013f8 <MX_CRC_Init+0x20>)
 80013de:	4a07      	ldr	r2, [pc, #28]	@ (80013fc <MX_CRC_Init+0x24>)
 80013e0:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80013e2:	4805      	ldr	r0, [pc, #20]	@ (80013f8 <MX_CRC_Init+0x20>)
 80013e4:	f004 fe77 	bl	80060d6 <HAL_CRC_Init>
 80013e8:	4603      	mov	r3, r0
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d001      	beq.n	80013f2 <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 80013ee:	f001 fb03 	bl	80029f8 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 80013f2:	bf00      	nop
 80013f4:	bd80      	pop	{r7, pc}
 80013f6:	bf00      	nop
 80013f8:	2000d3c0 	.word	0x2000d3c0
 80013fc:	40023000 	.word	0x40023000

08001400 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 8001400:	b480      	push	{r7}
 8001402:	b085      	sub	sp, #20
 8001404:	af00      	add	r7, sp, #0
 8001406:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	4a0b      	ldr	r2, [pc, #44]	@ (800143c <HAL_CRC_MspInit+0x3c>)
 800140e:	4293      	cmp	r3, r2
 8001410:	d10d      	bne.n	800142e <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8001412:	2300      	movs	r3, #0
 8001414:	60fb      	str	r3, [r7, #12]
 8001416:	4b0a      	ldr	r3, [pc, #40]	@ (8001440 <HAL_CRC_MspInit+0x40>)
 8001418:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800141a:	4a09      	ldr	r2, [pc, #36]	@ (8001440 <HAL_CRC_MspInit+0x40>)
 800141c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001420:	6313      	str	r3, [r2, #48]	@ 0x30
 8001422:	4b07      	ldr	r3, [pc, #28]	@ (8001440 <HAL_CRC_MspInit+0x40>)
 8001424:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001426:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800142a:	60fb      	str	r3, [r7, #12]
 800142c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 800142e:	bf00      	nop
 8001430:	3714      	adds	r7, #20
 8001432:	46bd      	mov	sp, r7
 8001434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001438:	4770      	bx	lr
 800143a:	bf00      	nop
 800143c:	40023000 	.word	0x40023000
 8001440:	40023800 	.word	0x40023800

08001444 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	b082      	sub	sp, #8
 8001448:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800144a:	2300      	movs	r3, #0
 800144c:	607b      	str	r3, [r7, #4]
 800144e:	4b17      	ldr	r3, [pc, #92]	@ (80014ac <MX_DMA_Init+0x68>)
 8001450:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001452:	4a16      	ldr	r2, [pc, #88]	@ (80014ac <MX_DMA_Init+0x68>)
 8001454:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001458:	6313      	str	r3, [r2, #48]	@ 0x30
 800145a:	4b14      	ldr	r3, [pc, #80]	@ (80014ac <MX_DMA_Init+0x68>)
 800145c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800145e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001462:	607b      	str	r3, [r7, #4]
 8001464:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001466:	2300      	movs	r3, #0
 8001468:	603b      	str	r3, [r7, #0]
 800146a:	4b10      	ldr	r3, [pc, #64]	@ (80014ac <MX_DMA_Init+0x68>)
 800146c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800146e:	4a0f      	ldr	r2, [pc, #60]	@ (80014ac <MX_DMA_Init+0x68>)
 8001470:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001474:	6313      	str	r3, [r2, #48]	@ 0x30
 8001476:	4b0d      	ldr	r3, [pc, #52]	@ (80014ac <MX_DMA_Init+0x68>)
 8001478:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800147a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800147e:	603b      	str	r3, [r7, #0]
 8001480:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 8001482:	2200      	movs	r2, #0
 8001484:	2100      	movs	r1, #0
 8001486:	200e      	movs	r0, #14
 8001488:	f004 fdef 	bl	800606a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 800148c:	200e      	movs	r0, #14
 800148e:	f004 fe08 	bl	80060a2 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8001492:	2200      	movs	r2, #0
 8001494:	2100      	movs	r1, #0
 8001496:	2038      	movs	r0, #56	@ 0x38
 8001498:	f004 fde7 	bl	800606a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 800149c:	2038      	movs	r0, #56	@ 0x38
 800149e:	f004 fe00 	bl	80060a2 <HAL_NVIC_EnableIRQ>

}
 80014a2:	bf00      	nop
 80014a4:	3708      	adds	r7, #8
 80014a6:	46bd      	mov	sp, r7
 80014a8:	bd80      	pop	{r7, pc}
 80014aa:	bf00      	nop
 80014ac:	40023800 	.word	0x40023800

080014b0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b08a      	sub	sp, #40	@ 0x28
 80014b4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014b6:	f107 0314 	add.w	r3, r7, #20
 80014ba:	2200      	movs	r2, #0
 80014bc:	601a      	str	r2, [r3, #0]
 80014be:	605a      	str	r2, [r3, #4]
 80014c0:	609a      	str	r2, [r3, #8]
 80014c2:	60da      	str	r2, [r3, #12]
 80014c4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80014c6:	2300      	movs	r3, #0
 80014c8:	613b      	str	r3, [r7, #16]
 80014ca:	4b45      	ldr	r3, [pc, #276]	@ (80015e0 <MX_GPIO_Init+0x130>)
 80014cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014ce:	4a44      	ldr	r2, [pc, #272]	@ (80015e0 <MX_GPIO_Init+0x130>)
 80014d0:	f043 0304 	orr.w	r3, r3, #4
 80014d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80014d6:	4b42      	ldr	r3, [pc, #264]	@ (80015e0 <MX_GPIO_Init+0x130>)
 80014d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014da:	f003 0304 	and.w	r3, r3, #4
 80014de:	613b      	str	r3, [r7, #16]
 80014e0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80014e2:	2300      	movs	r3, #0
 80014e4:	60fb      	str	r3, [r7, #12]
 80014e6:	4b3e      	ldr	r3, [pc, #248]	@ (80015e0 <MX_GPIO_Init+0x130>)
 80014e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014ea:	4a3d      	ldr	r2, [pc, #244]	@ (80015e0 <MX_GPIO_Init+0x130>)
 80014ec:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80014f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80014f2:	4b3b      	ldr	r3, [pc, #236]	@ (80015e0 <MX_GPIO_Init+0x130>)
 80014f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014f6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80014fa:	60fb      	str	r3, [r7, #12]
 80014fc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80014fe:	2300      	movs	r3, #0
 8001500:	60bb      	str	r3, [r7, #8]
 8001502:	4b37      	ldr	r3, [pc, #220]	@ (80015e0 <MX_GPIO_Init+0x130>)
 8001504:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001506:	4a36      	ldr	r2, [pc, #216]	@ (80015e0 <MX_GPIO_Init+0x130>)
 8001508:	f043 0301 	orr.w	r3, r3, #1
 800150c:	6313      	str	r3, [r2, #48]	@ 0x30
 800150e:	4b34      	ldr	r3, [pc, #208]	@ (80015e0 <MX_GPIO_Init+0x130>)
 8001510:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001512:	f003 0301 	and.w	r3, r3, #1
 8001516:	60bb      	str	r3, [r7, #8]
 8001518:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800151a:	2300      	movs	r3, #0
 800151c:	607b      	str	r3, [r7, #4]
 800151e:	4b30      	ldr	r3, [pc, #192]	@ (80015e0 <MX_GPIO_Init+0x130>)
 8001520:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001522:	4a2f      	ldr	r2, [pc, #188]	@ (80015e0 <MX_GPIO_Init+0x130>)
 8001524:	f043 0302 	orr.w	r3, r3, #2
 8001528:	6313      	str	r3, [r2, #48]	@ 0x30
 800152a:	4b2d      	ldr	r3, [pc, #180]	@ (80015e0 <MX_GPIO_Init+0x130>)
 800152c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800152e:	f003 0302 	and.w	r3, r3, #2
 8001532:	607b      	str	r3, [r7, #4]
 8001534:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, ILI9341_DC_Pin|ILI9341_RESET_Pin, GPIO_PIN_RESET);
 8001536:	2200      	movs	r2, #0
 8001538:	2103      	movs	r1, #3
 800153a:	482a      	ldr	r0, [pc, #168]	@ (80015e4 <MX_GPIO_Init+0x134>)
 800153c:	f005 fb86 	bl	8006c4c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001540:	2200      	movs	r2, #0
 8001542:	2120      	movs	r1, #32
 8001544:	4828      	ldr	r0, [pc, #160]	@ (80015e8 <MX_GPIO_Init+0x138>)
 8001546:	f005 fb81 	bl	8006c4c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ILI9341_CS_Pin|SDCARD_CS_Pin, GPIO_PIN_SET);
 800154a:	2201      	movs	r2, #1
 800154c:	f244 0102 	movw	r1, #16386	@ 0x4002
 8001550:	4826      	ldr	r0, [pc, #152]	@ (80015ec <MX_GPIO_Init+0x13c>)
 8001552:	f005 fb7b 	bl	8006c4c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001556:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800155a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800155c:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8001560:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001562:	2300      	movs	r3, #0
 8001564:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001566:	f107 0314 	add.w	r3, r7, #20
 800156a:	4619      	mov	r1, r3
 800156c:	481d      	ldr	r0, [pc, #116]	@ (80015e4 <MX_GPIO_Init+0x134>)
 800156e:	f005 f9d1 	bl	8006914 <HAL_GPIO_Init>

  /*Configure GPIO pins : ILI9341_DC_Pin ILI9341_RESET_Pin */
  GPIO_InitStruct.Pin = ILI9341_DC_Pin|ILI9341_RESET_Pin;
 8001572:	2303      	movs	r3, #3
 8001574:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001576:	2301      	movs	r3, #1
 8001578:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800157a:	2300      	movs	r3, #0
 800157c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800157e:	2300      	movs	r3, #0
 8001580:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001582:	f107 0314 	add.w	r3, r7, #20
 8001586:	4619      	mov	r1, r3
 8001588:	4816      	ldr	r0, [pc, #88]	@ (80015e4 <MX_GPIO_Init+0x134>)
 800158a:	f005 f9c3 	bl	8006914 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800158e:	2320      	movs	r3, #32
 8001590:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001592:	2301      	movs	r3, #1
 8001594:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001596:	2300      	movs	r3, #0
 8001598:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800159a:	2300      	movs	r3, #0
 800159c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800159e:	f107 0314 	add.w	r3, r7, #20
 80015a2:	4619      	mov	r1, r3
 80015a4:	4810      	ldr	r0, [pc, #64]	@ (80015e8 <MX_GPIO_Init+0x138>)
 80015a6:	f005 f9b5 	bl	8006914 <HAL_GPIO_Init>

  /*Configure GPIO pins : ILI9341_CS_Pin SDCARD_CS_Pin */
  GPIO_InitStruct.Pin = ILI9341_CS_Pin|SDCARD_CS_Pin;
 80015aa:	f244 0302 	movw	r3, #16386	@ 0x4002
 80015ae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015b0:	2301      	movs	r3, #1
 80015b2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015b4:	2300      	movs	r3, #0
 80015b6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015b8:	2300      	movs	r3, #0
 80015ba:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015bc:	f107 0314 	add.w	r3, r7, #20
 80015c0:	4619      	mov	r1, r3
 80015c2:	480a      	ldr	r0, [pc, #40]	@ (80015ec <MX_GPIO_Init+0x13c>)
 80015c4:	f005 f9a6 	bl	8006914 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80015c8:	2200      	movs	r2, #0
 80015ca:	2100      	movs	r1, #0
 80015cc:	2028      	movs	r0, #40	@ 0x28
 80015ce:	f004 fd4c 	bl	800606a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80015d2:	2028      	movs	r0, #40	@ 0x28
 80015d4:	f004 fd65 	bl	80060a2 <HAL_NVIC_EnableIRQ>

}
 80015d8:	bf00      	nop
 80015da:	3728      	adds	r7, #40	@ 0x28
 80015dc:	46bd      	mov	sp, r7
 80015de:	bd80      	pop	{r7, pc}
 80015e0:	40023800 	.word	0x40023800
 80015e4:	40020800 	.word	0x40020800
 80015e8:	40020000 	.word	0x40020000
 80015ec:	40020400 	.word	0x40020400

080015f0 <MX_I2S2_Init>:
I2S_HandleTypeDef hi2s3;
DMA_HandleTypeDef hdma_spi2_rx;

/* I2S2 init function */
void MX_I2S2_Init(void)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 80015f4:	4b13      	ldr	r3, [pc, #76]	@ (8001644 <MX_I2S2_Init+0x54>)
 80015f6:	4a14      	ldr	r2, [pc, #80]	@ (8001648 <MX_I2S2_Init+0x58>)
 80015f8:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_RX;
 80015fa:	4b12      	ldr	r3, [pc, #72]	@ (8001644 <MX_I2S2_Init+0x54>)
 80015fc:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8001600:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 8001602:	4b10      	ldr	r3, [pc, #64]	@ (8001644 <MX_I2S2_Init+0x54>)
 8001604:	2200      	movs	r2, #0
 8001606:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_24B;
 8001608:	4b0e      	ldr	r3, [pc, #56]	@ (8001644 <MX_I2S2_Init+0x54>)
 800160a:	2203      	movs	r2, #3
 800160c:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 800160e:	4b0d      	ldr	r3, [pc, #52]	@ (8001644 <MX_I2S2_Init+0x54>)
 8001610:	2200      	movs	r2, #0
 8001612:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_16K;
 8001614:	4b0b      	ldr	r3, [pc, #44]	@ (8001644 <MX_I2S2_Init+0x54>)
 8001616:	f44f 527a 	mov.w	r2, #16000	@ 0x3e80
 800161a:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 800161c:	4b09      	ldr	r3, [pc, #36]	@ (8001644 <MX_I2S2_Init+0x54>)
 800161e:	2200      	movs	r2, #0
 8001620:	619a      	str	r2, [r3, #24]
  hi2s2.Init.ClockSource = I2S_CLOCK_PLL;
 8001622:	4b08      	ldr	r3, [pc, #32]	@ (8001644 <MX_I2S2_Init+0x54>)
 8001624:	2200      	movs	r2, #0
 8001626:	61da      	str	r2, [r3, #28]
  hi2s2.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8001628:	4b06      	ldr	r3, [pc, #24]	@ (8001644 <MX_I2S2_Init+0x54>)
 800162a:	2200      	movs	r2, #0
 800162c:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 800162e:	4805      	ldr	r0, [pc, #20]	@ (8001644 <MX_I2S2_Init+0x54>)
 8001630:	f005 fb4a 	bl	8006cc8 <HAL_I2S_Init>
 8001634:	4603      	mov	r3, r0
 8001636:	2b00      	cmp	r3, #0
 8001638:	d001      	beq.n	800163e <MX_I2S2_Init+0x4e>
  {
    Error_Handler();
 800163a:	f001 f9dd 	bl	80029f8 <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 800163e:	bf00      	nop
 8001640:	bd80      	pop	{r7, pc}
 8001642:	bf00      	nop
 8001644:	2000d3c8 	.word	0x2000d3c8
 8001648:	40003800 	.word	0x40003800

0800164c <MX_I2S3_Init>:
/* I2S3 init function */
void MX_I2S3_Init(void)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8001650:	4b13      	ldr	r3, [pc, #76]	@ (80016a0 <MX_I2S3_Init+0x54>)
 8001652:	4a14      	ldr	r2, [pc, #80]	@ (80016a4 <MX_I2S3_Init+0x58>)
 8001654:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8001656:	4b12      	ldr	r3, [pc, #72]	@ (80016a0 <MX_I2S3_Init+0x54>)
 8001658:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800165c:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 800165e:	4b10      	ldr	r3, [pc, #64]	@ (80016a0 <MX_I2S3_Init+0x54>)
 8001660:	2200      	movs	r2, #0
 8001662:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8001664:	4b0e      	ldr	r3, [pc, #56]	@ (80016a0 <MX_I2S3_Init+0x54>)
 8001666:	2200      	movs	r2, #0
 8001668:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 800166a:	4b0d      	ldr	r3, [pc, #52]	@ (80016a0 <MX_I2S3_Init+0x54>)
 800166c:	2200      	movs	r2, #0
 800166e:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_16K;
 8001670:	4b0b      	ldr	r3, [pc, #44]	@ (80016a0 <MX_I2S3_Init+0x54>)
 8001672:	f44f 527a 	mov.w	r2, #16000	@ 0x3e80
 8001676:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8001678:	4b09      	ldr	r3, [pc, #36]	@ (80016a0 <MX_I2S3_Init+0x54>)
 800167a:	2200      	movs	r2, #0
 800167c:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 800167e:	4b08      	ldr	r3, [pc, #32]	@ (80016a0 <MX_I2S3_Init+0x54>)
 8001680:	2200      	movs	r2, #0
 8001682:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8001684:	4b06      	ldr	r3, [pc, #24]	@ (80016a0 <MX_I2S3_Init+0x54>)
 8001686:	2200      	movs	r2, #0
 8001688:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 800168a:	4805      	ldr	r0, [pc, #20]	@ (80016a0 <MX_I2S3_Init+0x54>)
 800168c:	f005 fb1c 	bl	8006cc8 <HAL_I2S_Init>
 8001690:	4603      	mov	r3, r0
 8001692:	2b00      	cmp	r3, #0
 8001694:	d001      	beq.n	800169a <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 8001696:	f001 f9af 	bl	80029f8 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 800169a:	bf00      	nop
 800169c:	bd80      	pop	{r7, pc}
 800169e:	bf00      	nop
 80016a0:	2000d410 	.word	0x2000d410
 80016a4:	40003c00 	.word	0x40003c00

080016a8 <HAL_I2S_MspInit>:

void HAL_I2S_MspInit(I2S_HandleTypeDef* i2sHandle)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	b08e      	sub	sp, #56	@ 0x38
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016b0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80016b4:	2200      	movs	r2, #0
 80016b6:	601a      	str	r2, [r3, #0]
 80016b8:	605a      	str	r2, [r3, #4]
 80016ba:	609a      	str	r2, [r3, #8]
 80016bc:	60da      	str	r2, [r3, #12]
 80016be:	611a      	str	r2, [r3, #16]
  if(i2sHandle->Instance==SPI2)
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	4a69      	ldr	r2, [pc, #420]	@ (800186c <HAL_I2S_MspInit+0x1c4>)
 80016c6:	4293      	cmp	r3, r2
 80016c8:	d17b      	bne.n	80017c2 <HAL_I2S_MspInit+0x11a>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* I2S2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80016ca:	2300      	movs	r3, #0
 80016cc:	623b      	str	r3, [r7, #32]
 80016ce:	4b68      	ldr	r3, [pc, #416]	@ (8001870 <HAL_I2S_MspInit+0x1c8>)
 80016d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016d2:	4a67      	ldr	r2, [pc, #412]	@ (8001870 <HAL_I2S_MspInit+0x1c8>)
 80016d4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80016d8:	6413      	str	r3, [r2, #64]	@ 0x40
 80016da:	4b65      	ldr	r3, [pc, #404]	@ (8001870 <HAL_I2S_MspInit+0x1c8>)
 80016dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016de:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80016e2:	623b      	str	r3, [r7, #32]
 80016e4:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80016e6:	2300      	movs	r3, #0
 80016e8:	61fb      	str	r3, [r7, #28]
 80016ea:	4b61      	ldr	r3, [pc, #388]	@ (8001870 <HAL_I2S_MspInit+0x1c8>)
 80016ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016ee:	4a60      	ldr	r2, [pc, #384]	@ (8001870 <HAL_I2S_MspInit+0x1c8>)
 80016f0:	f043 0304 	orr.w	r3, r3, #4
 80016f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80016f6:	4b5e      	ldr	r3, [pc, #376]	@ (8001870 <HAL_I2S_MspInit+0x1c8>)
 80016f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016fa:	f003 0304 	and.w	r3, r3, #4
 80016fe:	61fb      	str	r3, [r7, #28]
 8001700:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001702:	2300      	movs	r3, #0
 8001704:	61bb      	str	r3, [r7, #24]
 8001706:	4b5a      	ldr	r3, [pc, #360]	@ (8001870 <HAL_I2S_MspInit+0x1c8>)
 8001708:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800170a:	4a59      	ldr	r2, [pc, #356]	@ (8001870 <HAL_I2S_MspInit+0x1c8>)
 800170c:	f043 0302 	orr.w	r3, r3, #2
 8001710:	6313      	str	r3, [r2, #48]	@ 0x30
 8001712:	4b57      	ldr	r3, [pc, #348]	@ (8001870 <HAL_I2S_MspInit+0x1c8>)
 8001714:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001716:	f003 0302 	and.w	r3, r3, #2
 800171a:	61bb      	str	r3, [r7, #24]
 800171c:	69bb      	ldr	r3, [r7, #24]
    /**I2S2 GPIO Configuration
    PC3     ------> I2S2_SD
    PB10     ------> I2S2_CK
    PB12     ------> I2S2_WS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800171e:	2308      	movs	r3, #8
 8001720:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001722:	2302      	movs	r3, #2
 8001724:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001726:	2300      	movs	r3, #0
 8001728:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800172a:	2300      	movs	r3, #0
 800172c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800172e:	2305      	movs	r3, #5
 8001730:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001732:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001736:	4619      	mov	r1, r3
 8001738:	484e      	ldr	r0, [pc, #312]	@ (8001874 <HAL_I2S_MspInit+0x1cc>)
 800173a:	f005 f8eb 	bl	8006914 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12;
 800173e:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001742:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001744:	2302      	movs	r3, #2
 8001746:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001748:	2300      	movs	r3, #0
 800174a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800174c:	2300      	movs	r3, #0
 800174e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001750:	2305      	movs	r3, #5
 8001752:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001754:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001758:	4619      	mov	r1, r3
 800175a:	4847      	ldr	r0, [pc, #284]	@ (8001878 <HAL_I2S_MspInit+0x1d0>)
 800175c:	f005 f8da 	bl	8006914 <HAL_GPIO_Init>

    /* I2S2 DMA Init */
    /* SPI2_RX Init */
    hdma_spi2_rx.Instance = DMA1_Stream3;
 8001760:	4b46      	ldr	r3, [pc, #280]	@ (800187c <HAL_I2S_MspInit+0x1d4>)
 8001762:	4a47      	ldr	r2, [pc, #284]	@ (8001880 <HAL_I2S_MspInit+0x1d8>)
 8001764:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Channel = DMA_CHANNEL_0;
 8001766:	4b45      	ldr	r3, [pc, #276]	@ (800187c <HAL_I2S_MspInit+0x1d4>)
 8001768:	2200      	movs	r2, #0
 800176a:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800176c:	4b43      	ldr	r3, [pc, #268]	@ (800187c <HAL_I2S_MspInit+0x1d4>)
 800176e:	2200      	movs	r2, #0
 8001770:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001772:	4b42      	ldr	r3, [pc, #264]	@ (800187c <HAL_I2S_MspInit+0x1d4>)
 8001774:	2200      	movs	r2, #0
 8001776:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001778:	4b40      	ldr	r3, [pc, #256]	@ (800187c <HAL_I2S_MspInit+0x1d4>)
 800177a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800177e:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001780:	4b3e      	ldr	r3, [pc, #248]	@ (800187c <HAL_I2S_MspInit+0x1d4>)
 8001782:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001786:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001788:	4b3c      	ldr	r3, [pc, #240]	@ (800187c <HAL_I2S_MspInit+0x1d4>)
 800178a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800178e:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_CIRCULAR;
 8001790:	4b3a      	ldr	r3, [pc, #232]	@ (800187c <HAL_I2S_MspInit+0x1d4>)
 8001792:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001796:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001798:	4b38      	ldr	r3, [pc, #224]	@ (800187c <HAL_I2S_MspInit+0x1d4>)
 800179a:	2200      	movs	r2, #0
 800179c:	621a      	str	r2, [r3, #32]
    hdma_spi2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800179e:	4b37      	ldr	r3, [pc, #220]	@ (800187c <HAL_I2S_MspInit+0x1d4>)
 80017a0:	2200      	movs	r2, #0
 80017a2:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 80017a4:	4835      	ldr	r0, [pc, #212]	@ (800187c <HAL_I2S_MspInit+0x1d4>)
 80017a6:	f004 fcb3 	bl	8006110 <HAL_DMA_Init>
 80017aa:	4603      	mov	r3, r0
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d001      	beq.n	80017b4 <HAL_I2S_MspInit+0x10c>
    {
      Error_Handler();
 80017b0:	f001 f922 	bl	80029f8 <Error_Handler>
    }

    __HAL_LINKDMA(i2sHandle,hdmarx,hdma_spi2_rx);
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	4a31      	ldr	r2, [pc, #196]	@ (800187c <HAL_I2S_MspInit+0x1d4>)
 80017b8:	63da      	str	r2, [r3, #60]	@ 0x3c
 80017ba:	4a30      	ldr	r2, [pc, #192]	@ (800187c <HAL_I2S_MspInit+0x1d4>)
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 80017c0:	e04f      	b.n	8001862 <HAL_I2S_MspInit+0x1ba>
  else if(i2sHandle->Instance==SPI3)
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	4a2f      	ldr	r2, [pc, #188]	@ (8001884 <HAL_I2S_MspInit+0x1dc>)
 80017c8:	4293      	cmp	r3, r2
 80017ca:	d14a      	bne.n	8001862 <HAL_I2S_MspInit+0x1ba>
    __HAL_RCC_SPI3_CLK_ENABLE();
 80017cc:	2300      	movs	r3, #0
 80017ce:	617b      	str	r3, [r7, #20]
 80017d0:	4b27      	ldr	r3, [pc, #156]	@ (8001870 <HAL_I2S_MspInit+0x1c8>)
 80017d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017d4:	4a26      	ldr	r2, [pc, #152]	@ (8001870 <HAL_I2S_MspInit+0x1c8>)
 80017d6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80017da:	6413      	str	r3, [r2, #64]	@ 0x40
 80017dc:	4b24      	ldr	r3, [pc, #144]	@ (8001870 <HAL_I2S_MspInit+0x1c8>)
 80017de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017e0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80017e4:	617b      	str	r3, [r7, #20]
 80017e6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017e8:	2300      	movs	r3, #0
 80017ea:	613b      	str	r3, [r7, #16]
 80017ec:	4b20      	ldr	r3, [pc, #128]	@ (8001870 <HAL_I2S_MspInit+0x1c8>)
 80017ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017f0:	4a1f      	ldr	r2, [pc, #124]	@ (8001870 <HAL_I2S_MspInit+0x1c8>)
 80017f2:	f043 0301 	orr.w	r3, r3, #1
 80017f6:	6313      	str	r3, [r2, #48]	@ 0x30
 80017f8:	4b1d      	ldr	r3, [pc, #116]	@ (8001870 <HAL_I2S_MspInit+0x1c8>)
 80017fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017fc:	f003 0301 	and.w	r3, r3, #1
 8001800:	613b      	str	r3, [r7, #16]
 8001802:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001804:	2300      	movs	r3, #0
 8001806:	60fb      	str	r3, [r7, #12]
 8001808:	4b19      	ldr	r3, [pc, #100]	@ (8001870 <HAL_I2S_MspInit+0x1c8>)
 800180a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800180c:	4a18      	ldr	r2, [pc, #96]	@ (8001870 <HAL_I2S_MspInit+0x1c8>)
 800180e:	f043 0304 	orr.w	r3, r3, #4
 8001812:	6313      	str	r3, [r2, #48]	@ 0x30
 8001814:	4b16      	ldr	r3, [pc, #88]	@ (8001870 <HAL_I2S_MspInit+0x1c8>)
 8001816:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001818:	f003 0304 	and.w	r3, r3, #4
 800181c:	60fb      	str	r3, [r7, #12]
 800181e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001820:	2310      	movs	r3, #16
 8001822:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001824:	2302      	movs	r3, #2
 8001826:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001828:	2300      	movs	r3, #0
 800182a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800182c:	2300      	movs	r3, #0
 800182e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001830:	2306      	movs	r3, #6
 8001832:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001834:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001838:	4619      	mov	r1, r3
 800183a:	4813      	ldr	r0, [pc, #76]	@ (8001888 <HAL_I2S_MspInit+0x1e0>)
 800183c:	f005 f86a 	bl	8006914 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12;
 8001840:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001844:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001846:	2302      	movs	r3, #2
 8001848:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800184a:	2300      	movs	r3, #0
 800184c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800184e:	2300      	movs	r3, #0
 8001850:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001852:	2306      	movs	r3, #6
 8001854:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001856:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800185a:	4619      	mov	r1, r3
 800185c:	4805      	ldr	r0, [pc, #20]	@ (8001874 <HAL_I2S_MspInit+0x1cc>)
 800185e:	f005 f859 	bl	8006914 <HAL_GPIO_Init>
}
 8001862:	bf00      	nop
 8001864:	3738      	adds	r7, #56	@ 0x38
 8001866:	46bd      	mov	sp, r7
 8001868:	bd80      	pop	{r7, pc}
 800186a:	bf00      	nop
 800186c:	40003800 	.word	0x40003800
 8001870:	40023800 	.word	0x40023800
 8001874:	40020800 	.word	0x40020800
 8001878:	40020400 	.word	0x40020400
 800187c:	2000d458 	.word	0x2000d458
 8001880:	40026058 	.word	0x40026058
 8001884:	40003c00 	.word	0x40003c00
 8001888:	40020000 	.word	0x40020000

0800188c <ILI9341_WriteCommand>:
#include "stm32f4xx_hal.h"
#include "ili9341.h"

// Send command to display. Use ILI9341_SELECT() before
static inline void ILI9341_WriteCommand(ILI9341TypeDef *display, uint8_t command)
{
 800188c:	b580      	push	{r7, lr}
 800188e:	b082      	sub	sp, #8
 8001890:	af00      	add	r7, sp, #0
 8001892:	6078      	str	r0, [r7, #4]
 8001894:	460b      	mov	r3, r1
 8001896:	70fb      	strb	r3, [r7, #3]
	ILI9341_COMMAND(display);
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	8a5b      	ldrh	r3, [r3, #18]
 800189c:	461a      	mov	r2, r3
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	689b      	ldr	r3, [r3, #8]
 80018a2:	0412      	lsls	r2, r2, #16
 80018a4:	619a      	str	r2, [r3, #24]
	HAL_SPI_Transmit(display->spi, &command, 1, 1);
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	6818      	ldr	r0, [r3, #0]
 80018aa:	1cf9      	adds	r1, r7, #3
 80018ac:	2301      	movs	r3, #1
 80018ae:	2201      	movs	r2, #1
 80018b0:	f006 fe39 	bl	8008526 <HAL_SPI_Transmit>
}
 80018b4:	bf00      	nop
 80018b6:	3708      	adds	r7, #8
 80018b8:	46bd      	mov	sp, r7
 80018ba:	bd80      	pop	{r7, pc}

080018bc <ILI9341_WriteByte>:

// Send byte to display. Use ILI9341_SELECT() before
static inline void ILI9341_WriteByte(ILI9341TypeDef *display, uint8_t data)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	b082      	sub	sp, #8
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]
 80018c4:	460b      	mov	r3, r1
 80018c6:	70fb      	strb	r3, [r7, #3]
	ILI9341_DATA(display);
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	8a5a      	ldrh	r2, [r3, #18]
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	689b      	ldr	r3, [r3, #8]
 80018d0:	619a      	str	r2, [r3, #24]
	HAL_SPI_Transmit(display->spi, &data, 1, 1);
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	6818      	ldr	r0, [r3, #0]
 80018d6:	1cf9      	adds	r1, r7, #3
 80018d8:	2301      	movs	r3, #1
 80018da:	2201      	movs	r2, #1
 80018dc:	f006 fe23 	bl	8008526 <HAL_SPI_Transmit>
}
 80018e0:	bf00      	nop
 80018e2:	3708      	adds	r7, #8
 80018e4:	46bd      	mov	sp, r7
 80018e6:	bd80      	pop	{r7, pc}

080018e8 <ILI9341_WriteBuffer>:

// Send buffer to display. Use ILI9341_SELECT() before
static inline void ILI9341_WriteBuffer(ILI9341TypeDef *display, uint8_t* buff, size_t buff_size)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	b086      	sub	sp, #24
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	60f8      	str	r0, [r7, #12]
 80018f0:	60b9      	str	r1, [r7, #8]
 80018f2:	607a      	str	r2, [r7, #4]
	ILI9341_DATA(display);
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	8a5a      	ldrh	r2, [r3, #18]
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	689b      	ldr	r3, [r3, #8]
 80018fc:	619a      	str	r2, [r3, #24]

    // split data in small chunks because HAL can't send more then 64K at once
    while (buff_size > 0) {
 80018fe:	e015      	b.n	800192c <ILI9341_WriteBuffer+0x44>
        uint16_t chunk_size = buff_size > 32768 ? 32768 : buff_size;
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001906:	bf28      	it	cs
 8001908:	f44f 4300 	movcs.w	r3, #32768	@ 0x8000
 800190c:	82fb      	strh	r3, [r7, #22]
        HAL_SPI_Transmit(display->spi, buff, chunk_size, 10);
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	6818      	ldr	r0, [r3, #0]
 8001912:	8afa      	ldrh	r2, [r7, #22]
 8001914:	230a      	movs	r3, #10
 8001916:	68b9      	ldr	r1, [r7, #8]
 8001918:	f006 fe05 	bl	8008526 <HAL_SPI_Transmit>
        buff += chunk_size;
 800191c:	8afb      	ldrh	r3, [r7, #22]
 800191e:	68ba      	ldr	r2, [r7, #8]
 8001920:	4413      	add	r3, r2
 8001922:	60bb      	str	r3, [r7, #8]
        buff_size -= chunk_size;
 8001924:	8afb      	ldrh	r3, [r7, #22]
 8001926:	687a      	ldr	r2, [r7, #4]
 8001928:	1ad3      	subs	r3, r2, r3
 800192a:	607b      	str	r3, [r7, #4]
    while (buff_size > 0) {
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	2b00      	cmp	r3, #0
 8001930:	d1e6      	bne.n	8001900 <ILI9341_WriteBuffer+0x18>
    }
}
 8001932:	bf00      	nop
 8001934:	bf00      	nop
 8001936:	3718      	adds	r7, #24
 8001938:	46bd      	mov	sp, r7
 800193a:	bd80      	pop	{r7, pc}

0800193c <ILI9341_SetAddressWindow>:

static inline void ILI9341_SetAddressWindow(ILI9341TypeDef *display, uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2)
{
 800193c:	b580      	push	{r7, lr}
 800193e:	b086      	sub	sp, #24
 8001940:	af00      	add	r7, sp, #0
 8001942:	60f8      	str	r0, [r7, #12]
 8001944:	4608      	mov	r0, r1
 8001946:	4611      	mov	r1, r2
 8001948:	461a      	mov	r2, r3
 800194a:	4603      	mov	r3, r0
 800194c:	817b      	strh	r3, [r7, #10]
 800194e:	460b      	mov	r3, r1
 8001950:	813b      	strh	r3, [r7, #8]
 8001952:	4613      	mov	r3, r2
 8001954:	80fb      	strh	r3, [r7, #6]
    // Column address set
	ILI9341_WriteCommand(display, 0x2A); // CASET
 8001956:	212a      	movs	r1, #42	@ 0x2a
 8001958:	68f8      	ldr	r0, [r7, #12]
 800195a:	f7ff ff97 	bl	800188c <ILI9341_WriteCommand>

	uint8_t data[4];
	data[0] = x1 >> 8;
 800195e:	897b      	ldrh	r3, [r7, #10]
 8001960:	0a1b      	lsrs	r3, r3, #8
 8001962:	b29b      	uxth	r3, r3
 8001964:	b2db      	uxtb	r3, r3
 8001966:	753b      	strb	r3, [r7, #20]
	data[1] = x1;
 8001968:	897b      	ldrh	r3, [r7, #10]
 800196a:	b2db      	uxtb	r3, r3
 800196c:	757b      	strb	r3, [r7, #21]
	data[2] = x2 >> 8;
 800196e:	88fb      	ldrh	r3, [r7, #6]
 8001970:	0a1b      	lsrs	r3, r3, #8
 8001972:	b29b      	uxth	r3, r3
 8001974:	b2db      	uxtb	r3, r3
 8001976:	75bb      	strb	r3, [r7, #22]
	data[3] = x2;
 8001978:	88fb      	ldrh	r3, [r7, #6]
 800197a:	b2db      	uxtb	r3, r3
 800197c:	75fb      	strb	r3, [r7, #23]

	ILI9341_DATA(display);
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	8a5a      	ldrh	r2, [r3, #18]
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	689b      	ldr	r3, [r3, #8]
 8001986:	619a      	str	r2, [r3, #24]
	HAL_SPI_Transmit(display->spi, data, 4, 1);
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	6818      	ldr	r0, [r3, #0]
 800198c:	f107 0114 	add.w	r1, r7, #20
 8001990:	2301      	movs	r3, #1
 8001992:	2204      	movs	r2, #4
 8001994:	f006 fdc7 	bl	8008526 <HAL_SPI_Transmit>

    // Row address set
	ILI9341_WriteCommand(display, 0x2B); // RASET
 8001998:	212b      	movs	r1, #43	@ 0x2b
 800199a:	68f8      	ldr	r0, [r7, #12]
 800199c:	f7ff ff76 	bl	800188c <ILI9341_WriteCommand>

	data[0] = y1 >> 8;
 80019a0:	893b      	ldrh	r3, [r7, #8]
 80019a2:	0a1b      	lsrs	r3, r3, #8
 80019a4:	b29b      	uxth	r3, r3
 80019a6:	b2db      	uxtb	r3, r3
 80019a8:	753b      	strb	r3, [r7, #20]
	data[1] = y1;
 80019aa:	893b      	ldrh	r3, [r7, #8]
 80019ac:	b2db      	uxtb	r3, r3
 80019ae:	757b      	strb	r3, [r7, #21]
	data[2] = y2 >> 8;
 80019b0:	8c3b      	ldrh	r3, [r7, #32]
 80019b2:	0a1b      	lsrs	r3, r3, #8
 80019b4:	b29b      	uxth	r3, r3
 80019b6:	b2db      	uxtb	r3, r3
 80019b8:	75bb      	strb	r3, [r7, #22]
	data[3] = y2;
 80019ba:	8c3b      	ldrh	r3, [r7, #32]
 80019bc:	b2db      	uxtb	r3, r3
 80019be:	75fb      	strb	r3, [r7, #23]

	ILI9341_DATA(display);
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	8a5a      	ldrh	r2, [r3, #18]
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	689b      	ldr	r3, [r3, #8]
 80019c8:	619a      	str	r2, [r3, #24]
	HAL_SPI_Transmit(display->spi, data, 4, 1);
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	6818      	ldr	r0, [r3, #0]
 80019ce:	f107 0114 	add.w	r1, r7, #20
 80019d2:	2301      	movs	r3, #1
 80019d4:	2204      	movs	r2, #4
 80019d6:	f006 fda6 	bl	8008526 <HAL_SPI_Transmit>

    // Write to RAM
	ILI9341_WriteCommand(display, 0x2C); // RAMWR
 80019da:	212c      	movs	r1, #44	@ 0x2c
 80019dc:	68f8      	ldr	r0, [r7, #12]
 80019de:	f7ff ff55 	bl	800188c <ILI9341_WriteCommand>
}
 80019e2:	bf00      	nop
 80019e4:	3718      	adds	r7, #24
 80019e6:	46bd      	mov	sp, r7
 80019e8:	bd80      	pop	{r7, pc}

080019ea <ILI9341_Reset>:

static inline void ILI9341_Reset(ILI9341TypeDef *display)
{
 80019ea:	b580      	push	{r7, lr}
 80019ec:	b082      	sub	sp, #8
 80019ee:	af00      	add	r7, sp, #0
 80019f0:	6078      	str	r0, [r7, #4]
    display->reset_gpio_port->BSRR = (uint32_t)(display->reset_pin) << 16U;
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	8a9b      	ldrh	r3, [r3, #20]
 80019f6:	461a      	mov	r2, r3
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	68db      	ldr	r3, [r3, #12]
 80019fc:	0412      	lsls	r2, r2, #16
 80019fe:	619a      	str	r2, [r3, #24]
    HAL_Delay(5);
 8001a00:	2005      	movs	r0, #5
 8001a02:	f003 fddd 	bl	80055c0 <HAL_Delay>
    display->reset_gpio_port->BSRR = display->reset_pin;
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	8a9a      	ldrh	r2, [r3, #20]
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	68db      	ldr	r3, [r3, #12]
 8001a0e:	619a      	str	r2, [r3, #24]
}
 8001a10:	bf00      	nop
 8001a12:	3708      	adds	r7, #8
 8001a14:	46bd      	mov	sp, r7
 8001a16:	bd80      	pop	{r7, pc}

08001a18 <ILI9341_Init>:

void ILI9341_Init(ILI9341TypeDef *display)
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	b082      	sub	sp, #8
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	6078      	str	r0, [r7, #4]
	ILI9341_SELECT(display);
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	8a1b      	ldrh	r3, [r3, #16]
 8001a24:	461a      	mov	r2, r3
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	685b      	ldr	r3, [r3, #4]
 8001a2a:	0412      	lsls	r2, r2, #16
 8001a2c:	619a      	str	r2, [r3, #24]
	ILI9341_Reset(display);
 8001a2e:	6878      	ldr	r0, [r7, #4]
 8001a30:	f7ff ffdb 	bl	80019ea <ILI9341_Reset>

	// SOFTWARE RESET
	ILI9341_WriteCommand(display, 0x01);
 8001a34:	2101      	movs	r1, #1
 8001a36:	6878      	ldr	r0, [r7, #4]
 8001a38:	f7ff ff28 	bl	800188c <ILI9341_WriteCommand>
	HAL_Delay(1000);
 8001a3c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001a40:	f003 fdbe 	bl	80055c0 <HAL_Delay>

	// POWER CONTROL A
	ILI9341_WriteCommand(display, 0xCB);
 8001a44:	21cb      	movs	r1, #203	@ 0xcb
 8001a46:	6878      	ldr	r0, [r7, #4]
 8001a48:	f7ff ff20 	bl	800188c <ILI9341_WriteCommand>
	ILI9341_WriteByte(display, 0x39);
 8001a4c:	2139      	movs	r1, #57	@ 0x39
 8001a4e:	6878      	ldr	r0, [r7, #4]
 8001a50:	f7ff ff34 	bl	80018bc <ILI9341_WriteByte>
	ILI9341_WriteByte(display, 0x2C);
 8001a54:	212c      	movs	r1, #44	@ 0x2c
 8001a56:	6878      	ldr	r0, [r7, #4]
 8001a58:	f7ff ff30 	bl	80018bc <ILI9341_WriteByte>
	ILI9341_WriteByte(display, 0x00);
 8001a5c:	2100      	movs	r1, #0
 8001a5e:	6878      	ldr	r0, [r7, #4]
 8001a60:	f7ff ff2c 	bl	80018bc <ILI9341_WriteByte>
	ILI9341_WriteByte(display, 0x34);
 8001a64:	2134      	movs	r1, #52	@ 0x34
 8001a66:	6878      	ldr	r0, [r7, #4]
 8001a68:	f7ff ff28 	bl	80018bc <ILI9341_WriteByte>
	ILI9341_WriteByte(display, 0x02);
 8001a6c:	2102      	movs	r1, #2
 8001a6e:	6878      	ldr	r0, [r7, #4]
 8001a70:	f7ff ff24 	bl	80018bc <ILI9341_WriteByte>

	// POWER CONTROL B
	ILI9341_WriteCommand(display, 0xCF);
 8001a74:	21cf      	movs	r1, #207	@ 0xcf
 8001a76:	6878      	ldr	r0, [r7, #4]
 8001a78:	f7ff ff08 	bl	800188c <ILI9341_WriteCommand>
	ILI9341_WriteByte(display, 0x00);
 8001a7c:	2100      	movs	r1, #0
 8001a7e:	6878      	ldr	r0, [r7, #4]
 8001a80:	f7ff ff1c 	bl	80018bc <ILI9341_WriteByte>
	ILI9341_WriteByte(display, 0xC1);
 8001a84:	21c1      	movs	r1, #193	@ 0xc1
 8001a86:	6878      	ldr	r0, [r7, #4]
 8001a88:	f7ff ff18 	bl	80018bc <ILI9341_WriteByte>
	ILI9341_WriteByte(display, 0x30);
 8001a8c:	2130      	movs	r1, #48	@ 0x30
 8001a8e:	6878      	ldr	r0, [r7, #4]
 8001a90:	f7ff ff14 	bl	80018bc <ILI9341_WriteByte>

	// DRIVER TIMING CONTROL A
	ILI9341_WriteCommand(display, 0xE8);
 8001a94:	21e8      	movs	r1, #232	@ 0xe8
 8001a96:	6878      	ldr	r0, [r7, #4]
 8001a98:	f7ff fef8 	bl	800188c <ILI9341_WriteCommand>
	ILI9341_WriteByte(display, 0x85);
 8001a9c:	2185      	movs	r1, #133	@ 0x85
 8001a9e:	6878      	ldr	r0, [r7, #4]
 8001aa0:	f7ff ff0c 	bl	80018bc <ILI9341_WriteByte>
	ILI9341_WriteByte(display, 0x00);
 8001aa4:	2100      	movs	r1, #0
 8001aa6:	6878      	ldr	r0, [r7, #4]
 8001aa8:	f7ff ff08 	bl	80018bc <ILI9341_WriteByte>
	ILI9341_WriteByte(display, 0x78);
 8001aac:	2178      	movs	r1, #120	@ 0x78
 8001aae:	6878      	ldr	r0, [r7, #4]
 8001ab0:	f7ff ff04 	bl	80018bc <ILI9341_WriteByte>

	// DRIVER TIMING CONTROL B
	ILI9341_WriteCommand(display, 0xEA);
 8001ab4:	21ea      	movs	r1, #234	@ 0xea
 8001ab6:	6878      	ldr	r0, [r7, #4]
 8001ab8:	f7ff fee8 	bl	800188c <ILI9341_WriteCommand>
	ILI9341_WriteByte(display, 0x00);
 8001abc:	2100      	movs	r1, #0
 8001abe:	6878      	ldr	r0, [r7, #4]
 8001ac0:	f7ff fefc 	bl	80018bc <ILI9341_WriteByte>
	ILI9341_WriteByte(display, 0x00);
 8001ac4:	2100      	movs	r1, #0
 8001ac6:	6878      	ldr	r0, [r7, #4]
 8001ac8:	f7ff fef8 	bl	80018bc <ILI9341_WriteByte>

	// POWER ON SEQUENCE CONTROL
	ILI9341_WriteCommand(display, 0xED);
 8001acc:	21ed      	movs	r1, #237	@ 0xed
 8001ace:	6878      	ldr	r0, [r7, #4]
 8001ad0:	f7ff fedc 	bl	800188c <ILI9341_WriteCommand>
	ILI9341_WriteByte(display, 0x64);
 8001ad4:	2164      	movs	r1, #100	@ 0x64
 8001ad6:	6878      	ldr	r0, [r7, #4]
 8001ad8:	f7ff fef0 	bl	80018bc <ILI9341_WriteByte>
	ILI9341_WriteByte(display, 0x03);
 8001adc:	2103      	movs	r1, #3
 8001ade:	6878      	ldr	r0, [r7, #4]
 8001ae0:	f7ff feec 	bl	80018bc <ILI9341_WriteByte>
	ILI9341_WriteByte(display, 0x12);
 8001ae4:	2112      	movs	r1, #18
 8001ae6:	6878      	ldr	r0, [r7, #4]
 8001ae8:	f7ff fee8 	bl	80018bc <ILI9341_WriteByte>
	ILI9341_WriteByte(display, 0x81);
 8001aec:	2181      	movs	r1, #129	@ 0x81
 8001aee:	6878      	ldr	r0, [r7, #4]
 8001af0:	f7ff fee4 	bl	80018bc <ILI9341_WriteByte>

	// PUMP RATIO CONTROL
	ILI9341_WriteCommand(display, 0xF7);
 8001af4:	21f7      	movs	r1, #247	@ 0xf7
 8001af6:	6878      	ldr	r0, [r7, #4]
 8001af8:	f7ff fec8 	bl	800188c <ILI9341_WriteCommand>
	ILI9341_WriteByte(display, 0x20);
 8001afc:	2120      	movs	r1, #32
 8001afe:	6878      	ldr	r0, [r7, #4]
 8001b00:	f7ff fedc 	bl	80018bc <ILI9341_WriteByte>

	// POWER CONTROL,VRH[5:0]
	ILI9341_WriteCommand(display, 0xC0);
 8001b04:	21c0      	movs	r1, #192	@ 0xc0
 8001b06:	6878      	ldr	r0, [r7, #4]
 8001b08:	f7ff fec0 	bl	800188c <ILI9341_WriteCommand>
	ILI9341_WriteByte(display, 0x23);
 8001b0c:	2123      	movs	r1, #35	@ 0x23
 8001b0e:	6878      	ldr	r0, [r7, #4]
 8001b10:	f7ff fed4 	bl	80018bc <ILI9341_WriteByte>

	// POWER CONTROL,SAP[2:0];BT[3:0]
	ILI9341_WriteCommand(display, 0xC1);
 8001b14:	21c1      	movs	r1, #193	@ 0xc1
 8001b16:	6878      	ldr	r0, [r7, #4]
 8001b18:	f7ff feb8 	bl	800188c <ILI9341_WriteCommand>
	ILI9341_WriteByte(display, 0x10);
 8001b1c:	2110      	movs	r1, #16
 8001b1e:	6878      	ldr	r0, [r7, #4]
 8001b20:	f7ff fecc 	bl	80018bc <ILI9341_WriteByte>

	// VCM CONTROL
	ILI9341_WriteCommand(display, 0xC5);
 8001b24:	21c5      	movs	r1, #197	@ 0xc5
 8001b26:	6878      	ldr	r0, [r7, #4]
 8001b28:	f7ff feb0 	bl	800188c <ILI9341_WriteCommand>
	ILI9341_WriteByte(display, 0x3E);
 8001b2c:	213e      	movs	r1, #62	@ 0x3e
 8001b2e:	6878      	ldr	r0, [r7, #4]
 8001b30:	f7ff fec4 	bl	80018bc <ILI9341_WriteByte>
	ILI9341_WriteByte(display, 0x28);
 8001b34:	2128      	movs	r1, #40	@ 0x28
 8001b36:	6878      	ldr	r0, [r7, #4]
 8001b38:	f7ff fec0 	bl	80018bc <ILI9341_WriteByte>

	// VCM CONTROL 2
	ILI9341_WriteCommand(display, 0xC7);
 8001b3c:	21c7      	movs	r1, #199	@ 0xc7
 8001b3e:	6878      	ldr	r0, [r7, #4]
 8001b40:	f7ff fea4 	bl	800188c <ILI9341_WriteCommand>
	ILI9341_WriteByte(display, 0x86);
 8001b44:	2186      	movs	r1, #134	@ 0x86
 8001b46:	6878      	ldr	r0, [r7, #4]
 8001b48:	f7ff feb8 	bl	80018bc <ILI9341_WriteByte>

	// MEMORY ACCESS CONTROL
	ILI9341_WriteCommand(display, 0x36);
 8001b4c:	2136      	movs	r1, #54	@ 0x36
 8001b4e:	6878      	ldr	r0, [r7, #4]
 8001b50:	f7ff fe9c 	bl	800188c <ILI9341_WriteCommand>
	ILI9341_WriteByte(display, 0x48);
 8001b54:	2148      	movs	r1, #72	@ 0x48
 8001b56:	6878      	ldr	r0, [r7, #4]
 8001b58:	f7ff feb0 	bl	80018bc <ILI9341_WriteByte>

	// PIXEL FORMAT
	ILI9341_WriteCommand(display, 0x3A);
 8001b5c:	213a      	movs	r1, #58	@ 0x3a
 8001b5e:	6878      	ldr	r0, [r7, #4]
 8001b60:	f7ff fe94 	bl	800188c <ILI9341_WriteCommand>
	ILI9341_WriteByte(display, 0x55);
 8001b64:	2155      	movs	r1, #85	@ 0x55
 8001b66:	6878      	ldr	r0, [r7, #4]
 8001b68:	f7ff fea8 	bl	80018bc <ILI9341_WriteByte>

	// FRAME RATIO CONTROL, STANDARD RGB COLOR
	ILI9341_WriteCommand(display, 0xB1);
 8001b6c:	21b1      	movs	r1, #177	@ 0xb1
 8001b6e:	6878      	ldr	r0, [r7, #4]
 8001b70:	f7ff fe8c 	bl	800188c <ILI9341_WriteCommand>
	ILI9341_WriteByte(display, 0x00);
 8001b74:	2100      	movs	r1, #0
 8001b76:	6878      	ldr	r0, [r7, #4]
 8001b78:	f7ff fea0 	bl	80018bc <ILI9341_WriteByte>
	ILI9341_WriteByte(display, 0x18);
 8001b7c:	2118      	movs	r1, #24
 8001b7e:	6878      	ldr	r0, [r7, #4]
 8001b80:	f7ff fe9c 	bl	80018bc <ILI9341_WriteByte>

	// DISPLAY FUNCTION CONTROL
	ILI9341_WriteCommand(display, 0xB6);
 8001b84:	21b6      	movs	r1, #182	@ 0xb6
 8001b86:	6878      	ldr	r0, [r7, #4]
 8001b88:	f7ff fe80 	bl	800188c <ILI9341_WriteCommand>
	ILI9341_WriteByte(display, 0x08);
 8001b8c:	2108      	movs	r1, #8
 8001b8e:	6878      	ldr	r0, [r7, #4]
 8001b90:	f7ff fe94 	bl	80018bc <ILI9341_WriteByte>
	ILI9341_WriteByte(display, 0x82);
 8001b94:	2182      	movs	r1, #130	@ 0x82
 8001b96:	6878      	ldr	r0, [r7, #4]
 8001b98:	f7ff fe90 	bl	80018bc <ILI9341_WriteByte>
	ILI9341_WriteByte(display, 0x27);
 8001b9c:	2127      	movs	r1, #39	@ 0x27
 8001b9e:	6878      	ldr	r0, [r7, #4]
 8001ba0:	f7ff fe8c 	bl	80018bc <ILI9341_WriteByte>

	// 3GAMMA FUNCTION DISABLE
	ILI9341_WriteCommand(display, 0xF2);
 8001ba4:	21f2      	movs	r1, #242	@ 0xf2
 8001ba6:	6878      	ldr	r0, [r7, #4]
 8001ba8:	f7ff fe70 	bl	800188c <ILI9341_WriteCommand>
	ILI9341_WriteByte(display, 0x00);
 8001bac:	2100      	movs	r1, #0
 8001bae:	6878      	ldr	r0, [r7, #4]
 8001bb0:	f7ff fe84 	bl	80018bc <ILI9341_WriteByte>

	// GAMMA CURVE SELECTED
	ILI9341_WriteCommand(display, 0x26);
 8001bb4:	2126      	movs	r1, #38	@ 0x26
 8001bb6:	6878      	ldr	r0, [r7, #4]
 8001bb8:	f7ff fe68 	bl	800188c <ILI9341_WriteCommand>
	ILI9341_WriteByte(display, 0x01);
 8001bbc:	2101      	movs	r1, #1
 8001bbe:	6878      	ldr	r0, [r7, #4]
 8001bc0:	f7ff fe7c 	bl	80018bc <ILI9341_WriteByte>

	// POSITIVE GAMMA CORRECTION
	ILI9341_WriteCommand(display, 0xE0);
 8001bc4:	21e0      	movs	r1, #224	@ 0xe0
 8001bc6:	6878      	ldr	r0, [r7, #4]
 8001bc8:	f7ff fe60 	bl	800188c <ILI9341_WriteCommand>
	ILI9341_WriteByte(display, 0x0F);
 8001bcc:	210f      	movs	r1, #15
 8001bce:	6878      	ldr	r0, [r7, #4]
 8001bd0:	f7ff fe74 	bl	80018bc <ILI9341_WriteByte>
	ILI9341_WriteByte(display, 0x31);
 8001bd4:	2131      	movs	r1, #49	@ 0x31
 8001bd6:	6878      	ldr	r0, [r7, #4]
 8001bd8:	f7ff fe70 	bl	80018bc <ILI9341_WriteByte>
	ILI9341_WriteByte(display, 0x2B);
 8001bdc:	212b      	movs	r1, #43	@ 0x2b
 8001bde:	6878      	ldr	r0, [r7, #4]
 8001be0:	f7ff fe6c 	bl	80018bc <ILI9341_WriteByte>
	ILI9341_WriteByte(display, 0x0C);
 8001be4:	210c      	movs	r1, #12
 8001be6:	6878      	ldr	r0, [r7, #4]
 8001be8:	f7ff fe68 	bl	80018bc <ILI9341_WriteByte>
	ILI9341_WriteByte(display, 0x0E);
 8001bec:	210e      	movs	r1, #14
 8001bee:	6878      	ldr	r0, [r7, #4]
 8001bf0:	f7ff fe64 	bl	80018bc <ILI9341_WriteByte>
	ILI9341_WriteByte(display, 0x08);
 8001bf4:	2108      	movs	r1, #8
 8001bf6:	6878      	ldr	r0, [r7, #4]
 8001bf8:	f7ff fe60 	bl	80018bc <ILI9341_WriteByte>
	ILI9341_WriteByte(display, 0x4E);
 8001bfc:	214e      	movs	r1, #78	@ 0x4e
 8001bfe:	6878      	ldr	r0, [r7, #4]
 8001c00:	f7ff fe5c 	bl	80018bc <ILI9341_WriteByte>
	ILI9341_WriteByte(display, 0xF1);
 8001c04:	21f1      	movs	r1, #241	@ 0xf1
 8001c06:	6878      	ldr	r0, [r7, #4]
 8001c08:	f7ff fe58 	bl	80018bc <ILI9341_WriteByte>
	ILI9341_WriteByte(display, 0x37);
 8001c0c:	2137      	movs	r1, #55	@ 0x37
 8001c0e:	6878      	ldr	r0, [r7, #4]
 8001c10:	f7ff fe54 	bl	80018bc <ILI9341_WriteByte>
	ILI9341_WriteByte(display, 0x07);
 8001c14:	2107      	movs	r1, #7
 8001c16:	6878      	ldr	r0, [r7, #4]
 8001c18:	f7ff fe50 	bl	80018bc <ILI9341_WriteByte>
	ILI9341_WriteByte(display, 0x10);
 8001c1c:	2110      	movs	r1, #16
 8001c1e:	6878      	ldr	r0, [r7, #4]
 8001c20:	f7ff fe4c 	bl	80018bc <ILI9341_WriteByte>
	ILI9341_WriteByte(display, 0x03);
 8001c24:	2103      	movs	r1, #3
 8001c26:	6878      	ldr	r0, [r7, #4]
 8001c28:	f7ff fe48 	bl	80018bc <ILI9341_WriteByte>
	ILI9341_WriteByte(display, 0x0E);
 8001c2c:	210e      	movs	r1, #14
 8001c2e:	6878      	ldr	r0, [r7, #4]
 8001c30:	f7ff fe44 	bl	80018bc <ILI9341_WriteByte>
	ILI9341_WriteByte(display, 0x09);
 8001c34:	2109      	movs	r1, #9
 8001c36:	6878      	ldr	r0, [r7, #4]
 8001c38:	f7ff fe40 	bl	80018bc <ILI9341_WriteByte>
	ILI9341_WriteByte(display, 0x00);
 8001c3c:	2100      	movs	r1, #0
 8001c3e:	6878      	ldr	r0, [r7, #4]
 8001c40:	f7ff fe3c 	bl	80018bc <ILI9341_WriteByte>

	// NEGATIVE GAMMA CORRECTION
	ILI9341_WriteCommand(display, 0xE1);
 8001c44:	21e1      	movs	r1, #225	@ 0xe1
 8001c46:	6878      	ldr	r0, [r7, #4]
 8001c48:	f7ff fe20 	bl	800188c <ILI9341_WriteCommand>
	ILI9341_WriteByte(display, 0x00);
 8001c4c:	2100      	movs	r1, #0
 8001c4e:	6878      	ldr	r0, [r7, #4]
 8001c50:	f7ff fe34 	bl	80018bc <ILI9341_WriteByte>
	ILI9341_WriteByte(display, 0x0E);
 8001c54:	210e      	movs	r1, #14
 8001c56:	6878      	ldr	r0, [r7, #4]
 8001c58:	f7ff fe30 	bl	80018bc <ILI9341_WriteByte>
	ILI9341_WriteByte(display, 0x14);
 8001c5c:	2114      	movs	r1, #20
 8001c5e:	6878      	ldr	r0, [r7, #4]
 8001c60:	f7ff fe2c 	bl	80018bc <ILI9341_WriteByte>
	ILI9341_WriteByte(display, 0x03);
 8001c64:	2103      	movs	r1, #3
 8001c66:	6878      	ldr	r0, [r7, #4]
 8001c68:	f7ff fe28 	bl	80018bc <ILI9341_WriteByte>
	ILI9341_WriteByte(display, 0x11);
 8001c6c:	2111      	movs	r1, #17
 8001c6e:	6878      	ldr	r0, [r7, #4]
 8001c70:	f7ff fe24 	bl	80018bc <ILI9341_WriteByte>
	ILI9341_WriteByte(display, 0x07);
 8001c74:	2107      	movs	r1, #7
 8001c76:	6878      	ldr	r0, [r7, #4]
 8001c78:	f7ff fe20 	bl	80018bc <ILI9341_WriteByte>
	ILI9341_WriteByte(display, 0x31);
 8001c7c:	2131      	movs	r1, #49	@ 0x31
 8001c7e:	6878      	ldr	r0, [r7, #4]
 8001c80:	f7ff fe1c 	bl	80018bc <ILI9341_WriteByte>
	ILI9341_WriteByte(display, 0xC1);
 8001c84:	21c1      	movs	r1, #193	@ 0xc1
 8001c86:	6878      	ldr	r0, [r7, #4]
 8001c88:	f7ff fe18 	bl	80018bc <ILI9341_WriteByte>
	ILI9341_WriteByte(display, 0x48);
 8001c8c:	2148      	movs	r1, #72	@ 0x48
 8001c8e:	6878      	ldr	r0, [r7, #4]
 8001c90:	f7ff fe14 	bl	80018bc <ILI9341_WriteByte>
	ILI9341_WriteByte(display, 0x08);
 8001c94:	2108      	movs	r1, #8
 8001c96:	6878      	ldr	r0, [r7, #4]
 8001c98:	f7ff fe10 	bl	80018bc <ILI9341_WriteByte>
	ILI9341_WriteByte(display, 0x0F);
 8001c9c:	210f      	movs	r1, #15
 8001c9e:	6878      	ldr	r0, [r7, #4]
 8001ca0:	f7ff fe0c 	bl	80018bc <ILI9341_WriteByte>
	ILI9341_WriteByte(display, 0x0C);
 8001ca4:	210c      	movs	r1, #12
 8001ca6:	6878      	ldr	r0, [r7, #4]
 8001ca8:	f7ff fe08 	bl	80018bc <ILI9341_WriteByte>
	ILI9341_WriteByte(display, 0x31);
 8001cac:	2131      	movs	r1, #49	@ 0x31
 8001cae:	6878      	ldr	r0, [r7, #4]
 8001cb0:	f7ff fe04 	bl	80018bc <ILI9341_WriteByte>
	ILI9341_WriteByte(display, 0x36);
 8001cb4:	2136      	movs	r1, #54	@ 0x36
 8001cb6:	6878      	ldr	r0, [r7, #4]
 8001cb8:	f7ff fe00 	bl	80018bc <ILI9341_WriteByte>
	ILI9341_WriteByte(display, 0x0F);
 8001cbc:	210f      	movs	r1, #15
 8001cbe:	6878      	ldr	r0, [r7, #4]
 8001cc0:	f7ff fdfc 	bl	80018bc <ILI9341_WriteByte>

	// EXIT SLEEP
	ILI9341_WriteCommand(display, 0x11);
 8001cc4:	2111      	movs	r1, #17
 8001cc6:	6878      	ldr	r0, [r7, #4]
 8001cc8:	f7ff fde0 	bl	800188c <ILI9341_WriteCommand>
	HAL_Delay(120);
 8001ccc:	2078      	movs	r0, #120	@ 0x78
 8001cce:	f003 fc77 	bl	80055c0 <HAL_Delay>

	// TURN ON DISPLAY
	ILI9341_WriteCommand(display, 0x29);
 8001cd2:	2129      	movs	r1, #41	@ 0x29
 8001cd4:	6878      	ldr	r0, [r7, #4]
 8001cd6:	f7ff fdd9 	bl	800188c <ILI9341_WriteCommand>

	// MADCTL
	ILI9341_WriteCommand(display, 0x36);
 8001cda:	2136      	movs	r1, #54	@ 0x36
 8001cdc:	6878      	ldr	r0, [r7, #4]
 8001cde:	f7ff fdd5 	bl	800188c <ILI9341_WriteCommand>
	ILI9341_WriteByte(display, display->orientation);
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	7e9b      	ldrb	r3, [r3, #26]
 8001ce6:	4619      	mov	r1, r3
 8001ce8:	6878      	ldr	r0, [r7, #4]
 8001cea:	f7ff fde7 	bl	80018bc <ILI9341_WriteByte>

	ILI9341_UNSELECT(display);
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	8a1a      	ldrh	r2, [r3, #16]
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	685b      	ldr	r3, [r3, #4]
 8001cf6:	619a      	str	r2, [r3, #24]
}
 8001cf8:	bf00      	nop
 8001cfa:	3708      	adds	r7, #8
 8001cfc:	46bd      	mov	sp, r7
 8001cfe:	bd80      	pop	{r7, pc}

08001d00 <ILI9341_DrawPixel>:
    ILI9341_WriteCommand(display, (invert > 0) ? 0x21 /* INVON */ : 0x20 /* INVOFF */);
    ILI9341_UNSELECT(display);
}

void ILI9341_DrawPixel(ILI9341TypeDef *display, uint16_t x, uint16_t y, uint16_t color)
{
 8001d00:	b580      	push	{r7, lr}
 8001d02:	b088      	sub	sp, #32
 8001d04:	af02      	add	r7, sp, #8
 8001d06:	60f8      	str	r0, [r7, #12]
 8001d08:	4608      	mov	r0, r1
 8001d0a:	4611      	mov	r1, r2
 8001d0c:	461a      	mov	r2, r3
 8001d0e:	4603      	mov	r3, r0
 8001d10:	817b      	strh	r3, [r7, #10]
 8001d12:	460b      	mov	r3, r1
 8001d14:	813b      	strh	r3, [r7, #8]
 8001d16:	4613      	mov	r3, r2
 8001d18:	80fb      	strh	r3, [r7, #6]
	// Check out of bounds
	if((x >= display->width) || (y >= display->height))
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	8adb      	ldrh	r3, [r3, #22]
 8001d1e:	897a      	ldrh	r2, [r7, #10]
 8001d20:	429a      	cmp	r2, r3
 8001d22:	d233      	bcs.n	8001d8c <ILI9341_DrawPixel+0x8c>
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	8b1b      	ldrh	r3, [r3, #24]
 8001d28:	893a      	ldrh	r2, [r7, #8]
 8001d2a:	429a      	cmp	r2, r3
 8001d2c:	d22e      	bcs.n	8001d8c <ILI9341_DrawPixel+0x8c>
		return;

	ILI9341_SELECT(display);
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	8a1b      	ldrh	r3, [r3, #16]
 8001d32:	461a      	mov	r2, r3
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	685b      	ldr	r3, [r3, #4]
 8001d38:	0412      	lsls	r2, r2, #16
 8001d3a:	619a      	str	r2, [r3, #24]
	ILI9341_SetAddressWindow(display, x, y, x + 1, y + 1);
 8001d3c:	897b      	ldrh	r3, [r7, #10]
 8001d3e:	3301      	adds	r3, #1
 8001d40:	b298      	uxth	r0, r3
 8001d42:	893b      	ldrh	r3, [r7, #8]
 8001d44:	3301      	adds	r3, #1
 8001d46:	b29b      	uxth	r3, r3
 8001d48:	893a      	ldrh	r2, [r7, #8]
 8001d4a:	8979      	ldrh	r1, [r7, #10]
 8001d4c:	9300      	str	r3, [sp, #0]
 8001d4e:	4603      	mov	r3, r0
 8001d50:	68f8      	ldr	r0, [r7, #12]
 8001d52:	f7ff fdf3 	bl	800193c <ILI9341_SetAddressWindow>

	ILI9341_DATA(display);
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	8a5a      	ldrh	r2, [r3, #18]
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	689b      	ldr	r3, [r3, #8]
 8001d5e:	619a      	str	r2, [r3, #24]
	uint8_t data[2] = { color >> 8, color };
 8001d60:	88fb      	ldrh	r3, [r7, #6]
 8001d62:	0a1b      	lsrs	r3, r3, #8
 8001d64:	b29b      	uxth	r3, r3
 8001d66:	b2db      	uxtb	r3, r3
 8001d68:	753b      	strb	r3, [r7, #20]
 8001d6a:	88fb      	ldrh	r3, [r7, #6]
 8001d6c:	b2db      	uxtb	r3, r3
 8001d6e:	757b      	strb	r3, [r7, #21]
	HAL_SPI_Transmit(display->spi, data, 2, 1);
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	6818      	ldr	r0, [r3, #0]
 8001d74:	f107 0114 	add.w	r1, r7, #20
 8001d78:	2301      	movs	r3, #1
 8001d7a:	2202      	movs	r2, #2
 8001d7c:	f006 fbd3 	bl	8008526 <HAL_SPI_Transmit>

	ILI9341_UNSELECT(display);
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	8a1a      	ldrh	r2, [r3, #16]
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	685b      	ldr	r3, [r3, #4]
 8001d88:	619a      	str	r2, [r3, #24]
 8001d8a:	e000      	b.n	8001d8e <ILI9341_DrawPixel+0x8e>
		return;
 8001d8c:	bf00      	nop
}
 8001d8e:	3718      	adds	r7, #24
 8001d90:	46bd      	mov	sp, r7
 8001d92:	bd80      	pop	{r7, pc}

08001d94 <ILI9341_Fill>:

static void ILI9341_Fill(ILI9341TypeDef *display, uint16_t color, uint32_t size)
{
 8001d94:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001d98:	b08f      	sub	sp, #60	@ 0x3c
 8001d9a:	af00      	add	r7, sp, #0
 8001d9c:	60f8      	str	r0, [r7, #12]
 8001d9e:	460b      	mov	r3, r1
 8001da0:	607a      	str	r2, [r7, #4]
 8001da2:	817b      	strh	r3, [r7, #10]
 8001da4:	466b      	mov	r3, sp
 8001da6:	461e      	mov	r6, r3
	ILI9341_DATA(display);
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	8a5a      	ldrh	r2, [r3, #18]
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	689b      	ldr	r3, [r3, #8]
 8001db0:	619a      	str	r2, [r3, #24]

	uint32_t buffer_size = 0;
 8001db2:	2300      	movs	r3, #0
 8001db4:	637b      	str	r3, [r7, #52]	@ 0x34

	if ((size * 2) < ILI9341_BUFFER_MAX_SIZE)
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	005b      	lsls	r3, r3, #1
 8001dba:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8001dbe:	d202      	bcs.n	8001dc6 <ILI9341_Fill+0x32>
		buffer_size = size;
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	637b      	str	r3, [r7, #52]	@ 0x34
 8001dc4:	e002      	b.n	8001dcc <ILI9341_Fill+0x38>
	else
		buffer_size = ILI9341_BUFFER_MAX_SIZE;
 8001dc6:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8001dca:	637b      	str	r3, [r7, #52]	@ 0x34

	uint8_t color_shifted = color >> 8;
 8001dcc:	897b      	ldrh	r3, [r7, #10]
 8001dce:	0a1b      	lsrs	r3, r3, #8
 8001dd0:	b29b      	uxth	r3, r3
 8001dd2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
	uint8_t buffer[buffer_size];
 8001dd6:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8001dd8:	460b      	mov	r3, r1
 8001dda:	3b01      	subs	r3, #1
 8001ddc:	627b      	str	r3, [r7, #36]	@ 0x24
 8001dde:	2300      	movs	r3, #0
 8001de0:	4688      	mov	r8, r1
 8001de2:	4699      	mov	r9, r3
 8001de4:	f04f 0200 	mov.w	r2, #0
 8001de8:	f04f 0300 	mov.w	r3, #0
 8001dec:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001df0:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001df4:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001df8:	2300      	movs	r3, #0
 8001dfa:	460c      	mov	r4, r1
 8001dfc:	461d      	mov	r5, r3
 8001dfe:	f04f 0200 	mov.w	r2, #0
 8001e02:	f04f 0300 	mov.w	r3, #0
 8001e06:	00eb      	lsls	r3, r5, #3
 8001e08:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001e0c:	00e2      	lsls	r2, r4, #3
 8001e0e:	1dcb      	adds	r3, r1, #7
 8001e10:	08db      	lsrs	r3, r3, #3
 8001e12:	00db      	lsls	r3, r3, #3
 8001e14:	ebad 0d03 	sub.w	sp, sp, r3
 8001e18:	466b      	mov	r3, sp
 8001e1a:	3300      	adds	r3, #0
 8001e1c:	623b      	str	r3, [r7, #32]

	for (uint32_t i = 0; i < buffer_size; i += 2) {
 8001e1e:	2300      	movs	r3, #0
 8001e20:	633b      	str	r3, [r7, #48]	@ 0x30
 8001e22:	e00e      	b.n	8001e42 <ILI9341_Fill+0xae>
		buffer[i]     = color_shifted;
 8001e24:	6a3a      	ldr	r2, [r7, #32]
 8001e26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001e28:	4413      	add	r3, r2
 8001e2a:	f897 202b 	ldrb.w	r2, [r7, #43]	@ 0x2b
 8001e2e:	701a      	strb	r2, [r3, #0]
		buffer[i + 1] = color;
 8001e30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001e32:	3301      	adds	r3, #1
 8001e34:	897a      	ldrh	r2, [r7, #10]
 8001e36:	b2d1      	uxtb	r1, r2
 8001e38:	6a3a      	ldr	r2, [r7, #32]
 8001e3a:	54d1      	strb	r1, [r2, r3]
	for (uint32_t i = 0; i < buffer_size; i += 2) {
 8001e3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001e3e:	3302      	adds	r3, #2
 8001e40:	633b      	str	r3, [r7, #48]	@ 0x30
 8001e42:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001e44:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001e46:	429a      	cmp	r2, r3
 8001e48:	d3ec      	bcc.n	8001e24 <ILI9341_Fill+0x90>
	}

	uint32_t sending_size   = size * 2;
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	005b      	lsls	r3, r3, #1
 8001e4e:	61fb      	str	r3, [r7, #28]
	uint32_t sending_blocks = sending_size / buffer_size;
 8001e50:	69fa      	ldr	r2, [r7, #28]
 8001e52:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001e54:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e58:	61bb      	str	r3, [r7, #24]
	uint32_t sending_remain = sending_size % buffer_size;
 8001e5a:	69fb      	ldr	r3, [r7, #28]
 8001e5c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001e5e:	fbb3 f2f2 	udiv	r2, r3, r2
 8001e62:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8001e64:	fb01 f202 	mul.w	r2, r1, r2
 8001e68:	1a9b      	subs	r3, r3, r2
 8001e6a:	617b      	str	r3, [r7, #20]

	if (sending_blocks != 0) {
 8001e6c:	69bb      	ldr	r3, [r7, #24]
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d011      	beq.n	8001e96 <ILI9341_Fill+0x102>
		for(uint32_t i = 0; i < sending_blocks; i++)
 8001e72:	2300      	movs	r3, #0
 8001e74:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001e76:	e00a      	b.n	8001e8e <ILI9341_Fill+0xfa>
			HAL_SPI_Transmit(display->spi, (uint8_t*)buffer, buffer_size, 10);
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	6818      	ldr	r0, [r3, #0]
 8001e7c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001e7e:	b29a      	uxth	r2, r3
 8001e80:	230a      	movs	r3, #10
 8001e82:	6a39      	ldr	r1, [r7, #32]
 8001e84:	f006 fb4f 	bl	8008526 <HAL_SPI_Transmit>
		for(uint32_t i = 0; i < sending_blocks; i++)
 8001e88:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001e8a:	3301      	adds	r3, #1
 8001e8c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001e8e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001e90:	69bb      	ldr	r3, [r7, #24]
 8001e92:	429a      	cmp	r2, r3
 8001e94:	d3f0      	bcc.n	8001e78 <ILI9341_Fill+0xe4>
	}

	HAL_SPI_Transmit(display->spi, (uint8_t*)buffer, sending_remain, 10);
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	6818      	ldr	r0, [r3, #0]
 8001e9a:	697b      	ldr	r3, [r7, #20]
 8001e9c:	b29a      	uxth	r2, r3
 8001e9e:	230a      	movs	r3, #10
 8001ea0:	6a39      	ldr	r1, [r7, #32]
 8001ea2:	f006 fb40 	bl	8008526 <HAL_SPI_Transmit>
 8001ea6:	46b5      	mov	sp, r6
}
 8001ea8:	bf00      	nop
 8001eaa:	373c      	adds	r7, #60	@ 0x3c
 8001eac:	46bd      	mov	sp, r7
 8001eae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08001eb2 <ILI9341_FillScreen>:

void ILI9341_FillScreen(ILI9341TypeDef *display, uint16_t color)
{
 8001eb2:	b580      	push	{r7, lr}
 8001eb4:	b084      	sub	sp, #16
 8001eb6:	af02      	add	r7, sp, #8
 8001eb8:	6078      	str	r0, [r7, #4]
 8001eba:	460b      	mov	r3, r1
 8001ebc:	807b      	strh	r3, [r7, #2]
	ILI9341_SELECT(display);
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	8a1b      	ldrh	r3, [r3, #16]
 8001ec2:	461a      	mov	r2, r3
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	685b      	ldr	r3, [r3, #4]
 8001ec8:	0412      	lsls	r2, r2, #16
 8001eca:	619a      	str	r2, [r3, #24]
	ILI9341_SetAddressWindow(display, 0, 0, display->width - 1, display->height - 1);
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	8adb      	ldrh	r3, [r3, #22]
 8001ed0:	3b01      	subs	r3, #1
 8001ed2:	b29a      	uxth	r2, r3
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	8b1b      	ldrh	r3, [r3, #24]
 8001ed8:	3b01      	subs	r3, #1
 8001eda:	b29b      	uxth	r3, r3
 8001edc:	9300      	str	r3, [sp, #0]
 8001ede:	4613      	mov	r3, r2
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	2100      	movs	r1, #0
 8001ee4:	6878      	ldr	r0, [r7, #4]
 8001ee6:	f7ff fd29 	bl	800193c <ILI9341_SetAddressWindow>
	ILI9341_Fill(display, color, display->width * display->height);
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	8adb      	ldrh	r3, [r3, #22]
 8001eee:	461a      	mov	r2, r3
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	8b1b      	ldrh	r3, [r3, #24]
 8001ef4:	fb02 f303 	mul.w	r3, r2, r3
 8001ef8:	461a      	mov	r2, r3
 8001efa:	887b      	ldrh	r3, [r7, #2]
 8001efc:	4619      	mov	r1, r3
 8001efe:	6878      	ldr	r0, [r7, #4]
 8001f00:	f7ff ff48 	bl	8001d94 <ILI9341_Fill>
	ILI9341_UNSELECT(display);
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	8a1a      	ldrh	r2, [r3, #16]
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	685b      	ldr	r3, [r3, #4]
 8001f0c:	619a      	str	r2, [r3, #24]
}
 8001f0e:	bf00      	nop
 8001f10:	3708      	adds	r7, #8
 8001f12:	46bd      	mov	sp, r7
 8001f14:	bd80      	pop	{r7, pc}

08001f16 <ILI9341_FillRectangle>:

void ILI9341_FillRectangle(ILI9341TypeDef *display, uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color)
{
 8001f16:	b580      	push	{r7, lr}
 8001f18:	b086      	sub	sp, #24
 8001f1a:	af02      	add	r7, sp, #8
 8001f1c:	60f8      	str	r0, [r7, #12]
 8001f1e:	4608      	mov	r0, r1
 8001f20:	4611      	mov	r1, r2
 8001f22:	461a      	mov	r2, r3
 8001f24:	4603      	mov	r3, r0
 8001f26:	817b      	strh	r3, [r7, #10]
 8001f28:	460b      	mov	r3, r1
 8001f2a:	813b      	strh	r3, [r7, #8]
 8001f2c:	4613      	mov	r3, r2
 8001f2e:	80fb      	strh	r3, [r7, #6]
	if ((x >= display->width) || (y >= display->height))
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	8adb      	ldrh	r3, [r3, #22]
 8001f34:	897a      	ldrh	r2, [r7, #10]
 8001f36:	429a      	cmp	r2, r3
 8001f38:	d246      	bcs.n	8001fc8 <ILI9341_FillRectangle+0xb2>
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	8b1b      	ldrh	r3, [r3, #24]
 8001f3e:	893a      	ldrh	r2, [r7, #8]
 8001f40:	429a      	cmp	r2, r3
 8001f42:	d241      	bcs.n	8001fc8 <ILI9341_FillRectangle+0xb2>
		return;

	if ((x + w - 1) >= display->width)
 8001f44:	897a      	ldrh	r2, [r7, #10]
 8001f46:	88fb      	ldrh	r3, [r7, #6]
 8001f48:	4413      	add	r3, r2
 8001f4a:	68fa      	ldr	r2, [r7, #12]
 8001f4c:	8ad2      	ldrh	r2, [r2, #22]
 8001f4e:	4293      	cmp	r3, r2
 8001f50:	dd04      	ble.n	8001f5c <ILI9341_FillRectangle+0x46>
		w = display->width - x;
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	8ada      	ldrh	r2, [r3, #22]
 8001f56:	897b      	ldrh	r3, [r7, #10]
 8001f58:	1ad3      	subs	r3, r2, r3
 8001f5a:	80fb      	strh	r3, [r7, #6]

	if ((y + h - 1) >= display->height)
 8001f5c:	893a      	ldrh	r2, [r7, #8]
 8001f5e:	8b3b      	ldrh	r3, [r7, #24]
 8001f60:	4413      	add	r3, r2
 8001f62:	68fa      	ldr	r2, [r7, #12]
 8001f64:	8b12      	ldrh	r2, [r2, #24]
 8001f66:	4293      	cmp	r3, r2
 8001f68:	dd04      	ble.n	8001f74 <ILI9341_FillRectangle+0x5e>
		h = display->height - y;
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	8b1a      	ldrh	r2, [r3, #24]
 8001f6e:	893b      	ldrh	r3, [r7, #8]
 8001f70:	1ad3      	subs	r3, r2, r3
 8001f72:	833b      	strh	r3, [r7, #24]

	ILI9341_SELECT(display);
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	8a1b      	ldrh	r3, [r3, #16]
 8001f78:	461a      	mov	r2, r3
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	685b      	ldr	r3, [r3, #4]
 8001f7e:	0412      	lsls	r2, r2, #16
 8001f80:	619a      	str	r2, [r3, #24]
	ILI9341_SetAddressWindow(display, x, y, x + w - 1, y + h - 1);
 8001f82:	897a      	ldrh	r2, [r7, #10]
 8001f84:	88fb      	ldrh	r3, [r7, #6]
 8001f86:	4413      	add	r3, r2
 8001f88:	b29b      	uxth	r3, r3
 8001f8a:	3b01      	subs	r3, #1
 8001f8c:	b298      	uxth	r0, r3
 8001f8e:	893a      	ldrh	r2, [r7, #8]
 8001f90:	8b3b      	ldrh	r3, [r7, #24]
 8001f92:	4413      	add	r3, r2
 8001f94:	b29b      	uxth	r3, r3
 8001f96:	3b01      	subs	r3, #1
 8001f98:	b29b      	uxth	r3, r3
 8001f9a:	893a      	ldrh	r2, [r7, #8]
 8001f9c:	8979      	ldrh	r1, [r7, #10]
 8001f9e:	9300      	str	r3, [sp, #0]
 8001fa0:	4603      	mov	r3, r0
 8001fa2:	68f8      	ldr	r0, [r7, #12]
 8001fa4:	f7ff fcca 	bl	800193c <ILI9341_SetAddressWindow>
	ILI9341_Fill(display, color, w * h);
 8001fa8:	88fb      	ldrh	r3, [r7, #6]
 8001faa:	8b3a      	ldrh	r2, [r7, #24]
 8001fac:	fb02 f303 	mul.w	r3, r2, r3
 8001fb0:	461a      	mov	r2, r3
 8001fb2:	8bbb      	ldrh	r3, [r7, #28]
 8001fb4:	4619      	mov	r1, r3
 8001fb6:	68f8      	ldr	r0, [r7, #12]
 8001fb8:	f7ff feec 	bl	8001d94 <ILI9341_Fill>
	ILI9341_UNSELECT(display);
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	8a1a      	ldrh	r2, [r3, #16]
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	685b      	ldr	r3, [r3, #4]
 8001fc4:	619a      	str	r2, [r3, #24]
 8001fc6:	e000      	b.n	8001fca <ILI9341_FillRectangle+0xb4>
		return;
 8001fc8:	bf00      	nop
}
 8001fca:	3710      	adds	r7, #16
 8001fcc:	46bd      	mov	sp, r7
 8001fce:	bd80      	pop	{r7, pc}

08001fd0 <ILI9341_Rectangle>:

void ILI9341_Rectangle(ILI9341TypeDef *display, uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color)
{
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	b086      	sub	sp, #24
 8001fd4:	af02      	add	r7, sp, #8
 8001fd6:	60f8      	str	r0, [r7, #12]
 8001fd8:	4608      	mov	r0, r1
 8001fda:	4611      	mov	r1, r2
 8001fdc:	461a      	mov	r2, r3
 8001fde:	4603      	mov	r3, r0
 8001fe0:	817b      	strh	r3, [r7, #10]
 8001fe2:	460b      	mov	r3, r1
 8001fe4:	813b      	strh	r3, [r7, #8]
 8001fe6:	4613      	mov	r3, r2
 8001fe8:	80fb      	strh	r3, [r7, #6]
	ILI9341_FillRectangle(display, x,     y,     w + 1, 1, color);
 8001fea:	88fb      	ldrh	r3, [r7, #6]
 8001fec:	3301      	adds	r3, #1
 8001fee:	b298      	uxth	r0, r3
 8001ff0:	893a      	ldrh	r2, [r7, #8]
 8001ff2:	8979      	ldrh	r1, [r7, #10]
 8001ff4:	8bbb      	ldrh	r3, [r7, #28]
 8001ff6:	9301      	str	r3, [sp, #4]
 8001ff8:	2301      	movs	r3, #1
 8001ffa:	9300      	str	r3, [sp, #0]
 8001ffc:	4603      	mov	r3, r0
 8001ffe:	68f8      	ldr	r0, [r7, #12]
 8002000:	f7ff ff89 	bl	8001f16 <ILI9341_FillRectangle>
	ILI9341_FillRectangle(display, x, y + h,     w + 1, 1, color);
 8002004:	893a      	ldrh	r2, [r7, #8]
 8002006:	8b3b      	ldrh	r3, [r7, #24]
 8002008:	4413      	add	r3, r2
 800200a:	b29a      	uxth	r2, r3
 800200c:	88fb      	ldrh	r3, [r7, #6]
 800200e:	3301      	adds	r3, #1
 8002010:	b298      	uxth	r0, r3
 8002012:	8979      	ldrh	r1, [r7, #10]
 8002014:	8bbb      	ldrh	r3, [r7, #28]
 8002016:	9301      	str	r3, [sp, #4]
 8002018:	2301      	movs	r3, #1
 800201a:	9300      	str	r3, [sp, #0]
 800201c:	4603      	mov	r3, r0
 800201e:	68f8      	ldr	r0, [r7, #12]
 8002020:	f7ff ff79 	bl	8001f16 <ILI9341_FillRectangle>
	ILI9341_FillRectangle(display, x,     y,     1,     h, color);
 8002024:	893a      	ldrh	r2, [r7, #8]
 8002026:	8979      	ldrh	r1, [r7, #10]
 8002028:	8bbb      	ldrh	r3, [r7, #28]
 800202a:	9301      	str	r3, [sp, #4]
 800202c:	8b3b      	ldrh	r3, [r7, #24]
 800202e:	9300      	str	r3, [sp, #0]
 8002030:	2301      	movs	r3, #1
 8002032:	68f8      	ldr	r0, [r7, #12]
 8002034:	f7ff ff6f 	bl	8001f16 <ILI9341_FillRectangle>
	ILI9341_FillRectangle(display, x + w, y,     1,     h, color);
 8002038:	897a      	ldrh	r2, [r7, #10]
 800203a:	88fb      	ldrh	r3, [r7, #6]
 800203c:	4413      	add	r3, r2
 800203e:	b299      	uxth	r1, r3
 8002040:	893a      	ldrh	r2, [r7, #8]
 8002042:	8bbb      	ldrh	r3, [r7, #28]
 8002044:	9301      	str	r3, [sp, #4]
 8002046:	8b3b      	ldrh	r3, [r7, #24]
 8002048:	9300      	str	r3, [sp, #0]
 800204a:	2301      	movs	r3, #1
 800204c:	68f8      	ldr	r0, [r7, #12]
 800204e:	f7ff ff62 	bl	8001f16 <ILI9341_FillRectangle>
}
 8002052:	bf00      	nop
 8002054:	3710      	adds	r7, #16
 8002056:	46bd      	mov	sp, r7
 8002058:	bd80      	pop	{r7, pc}

0800205a <ILI9341_WriteChar>:

static void ILI9341_WriteChar(ILI9341TypeDef *display, uint16_t x, uint16_t y, char ch, FontDef font, uint16_t color, uint16_t bgcolor)
{
 800205a:	b580      	push	{r7, lr}
 800205c:	b08c      	sub	sp, #48	@ 0x30
 800205e:	af02      	add	r7, sp, #8
 8002060:	60f8      	str	r0, [r7, #12]
 8002062:	4608      	mov	r0, r1
 8002064:	4611      	mov	r1, r2
 8002066:	461a      	mov	r2, r3
 8002068:	4603      	mov	r3, r0
 800206a:	817b      	strh	r3, [r7, #10]
 800206c:	460b      	mov	r3, r1
 800206e:	813b      	strh	r3, [r7, #8]
 8002070:	4613      	mov	r3, r2
 8002072:	71fb      	strb	r3, [r7, #7]
    uint32_t i, b, j;

    ILI9341_SetAddressWindow(display, x, y, x + font.width - 1, y + font.height - 1);
 8002074:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8002078:	461a      	mov	r2, r3
 800207a:	897b      	ldrh	r3, [r7, #10]
 800207c:	4413      	add	r3, r2
 800207e:	b29b      	uxth	r3, r3
 8002080:	3b01      	subs	r3, #1
 8002082:	b298      	uxth	r0, r3
 8002084:	f897 3031 	ldrb.w	r3, [r7, #49]	@ 0x31
 8002088:	461a      	mov	r2, r3
 800208a:	893b      	ldrh	r3, [r7, #8]
 800208c:	4413      	add	r3, r2
 800208e:	b29b      	uxth	r3, r3
 8002090:	3b01      	subs	r3, #1
 8002092:	b29b      	uxth	r3, r3
 8002094:	893a      	ldrh	r2, [r7, #8]
 8002096:	8979      	ldrh	r1, [r7, #10]
 8002098:	9300      	str	r3, [sp, #0]
 800209a:	4603      	mov	r3, r0
 800209c:	68f8      	ldr	r0, [r7, #12]
 800209e:	f7ff fc4d 	bl	800193c <ILI9341_SetAddressWindow>

    for (i = 0; i < font.height; i++) {
 80020a2:	2300      	movs	r3, #0
 80020a4:	627b      	str	r3, [r7, #36]	@ 0x24
 80020a6:	e043      	b.n	8002130 <ILI9341_WriteChar+0xd6>
        b = font.data[(ch - 32) * font.height + i];
 80020a8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80020aa:	79fb      	ldrb	r3, [r7, #7]
 80020ac:	3b20      	subs	r3, #32
 80020ae:	f897 1031 	ldrb.w	r1, [r7, #49]	@ 0x31
 80020b2:	fb01 f303 	mul.w	r3, r1, r3
 80020b6:	4619      	mov	r1, r3
 80020b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020ba:	440b      	add	r3, r1
 80020bc:	005b      	lsls	r3, r3, #1
 80020be:	4413      	add	r3, r2
 80020c0:	881b      	ldrh	r3, [r3, #0]
 80020c2:	61fb      	str	r3, [r7, #28]
        for (j = 0; j < font.width; j++) {
 80020c4:	2300      	movs	r3, #0
 80020c6:	623b      	str	r3, [r7, #32]
 80020c8:	e029      	b.n	800211e <ILI9341_WriteChar+0xc4>
            if ((b << j) & 0x8000) {
 80020ca:	69fa      	ldr	r2, [r7, #28]
 80020cc:	6a3b      	ldr	r3, [r7, #32]
 80020ce:	fa02 f303 	lsl.w	r3, r2, r3
 80020d2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d00f      	beq.n	80020fa <ILI9341_WriteChar+0xa0>
                uint8_t data[] = { color >> 8, color & 0xFF };
 80020da:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 80020dc:	0a1b      	lsrs	r3, r3, #8
 80020de:	b29b      	uxth	r3, r3
 80020e0:	b2db      	uxtb	r3, r3
 80020e2:	763b      	strb	r3, [r7, #24]
 80020e4:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 80020e6:	b2db      	uxtb	r3, r3
 80020e8:	767b      	strb	r3, [r7, #25]
                ILI9341_WriteBuffer(display, data, sizeof(data));
 80020ea:	f107 0318 	add.w	r3, r7, #24
 80020ee:	2202      	movs	r2, #2
 80020f0:	4619      	mov	r1, r3
 80020f2:	68f8      	ldr	r0, [r7, #12]
 80020f4:	f7ff fbf8 	bl	80018e8 <ILI9341_WriteBuffer>
 80020f8:	e00e      	b.n	8002118 <ILI9341_WriteChar+0xbe>
            } else {
                uint8_t data[] = { bgcolor >> 8, bgcolor & 0xFF };
 80020fa:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 80020fc:	0a1b      	lsrs	r3, r3, #8
 80020fe:	b29b      	uxth	r3, r3
 8002100:	b2db      	uxtb	r3, r3
 8002102:	753b      	strb	r3, [r7, #20]
 8002104:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8002106:	b2db      	uxtb	r3, r3
 8002108:	757b      	strb	r3, [r7, #21]
                ILI9341_WriteBuffer(display, data, sizeof(data));
 800210a:	f107 0314 	add.w	r3, r7, #20
 800210e:	2202      	movs	r2, #2
 8002110:	4619      	mov	r1, r3
 8002112:	68f8      	ldr	r0, [r7, #12]
 8002114:	f7ff fbe8 	bl	80018e8 <ILI9341_WriteBuffer>
        for (j = 0; j < font.width; j++) {
 8002118:	6a3b      	ldr	r3, [r7, #32]
 800211a:	3301      	adds	r3, #1
 800211c:	623b      	str	r3, [r7, #32]
 800211e:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8002122:	461a      	mov	r2, r3
 8002124:	6a3b      	ldr	r3, [r7, #32]
 8002126:	4293      	cmp	r3, r2
 8002128:	d3cf      	bcc.n	80020ca <ILI9341_WriteChar+0x70>
    for (i = 0; i < font.height; i++) {
 800212a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800212c:	3301      	adds	r3, #1
 800212e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002130:	f897 3031 	ldrb.w	r3, [r7, #49]	@ 0x31
 8002134:	461a      	mov	r2, r3
 8002136:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002138:	4293      	cmp	r3, r2
 800213a:	d3b5      	bcc.n	80020a8 <ILI9341_WriteChar+0x4e>
            }
        }
    }
}
 800213c:	bf00      	nop
 800213e:	bf00      	nop
 8002140:	3728      	adds	r7, #40	@ 0x28
 8002142:	46bd      	mov	sp, r7
 8002144:	bd80      	pop	{r7, pc}

08002146 <ILI9341_WriteString>:

void ILI9341_WriteString(ILI9341TypeDef *display, uint16_t x, uint16_t y, const char* str, FontDef font, uint16_t color, uint16_t bgcolor)
{
 8002146:	b5b0      	push	{r4, r5, r7, lr}
 8002148:	b088      	sub	sp, #32
 800214a:	af04      	add	r7, sp, #16
 800214c:	60f8      	str	r0, [r7, #12]
 800214e:	607b      	str	r3, [r7, #4]
 8002150:	460b      	mov	r3, r1
 8002152:	817b      	strh	r3, [r7, #10]
 8002154:	4613      	mov	r3, r2
 8002156:	813b      	strh	r3, [r7, #8]
	ILI9341_SELECT(display);
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	8a1b      	ldrh	r3, [r3, #16]
 800215c:	461a      	mov	r2, r3
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	685b      	ldr	r3, [r3, #4]
 8002162:	0412      	lsls	r2, r2, #16
 8002164:	619a      	str	r2, [r3, #24]

    while (*str) {
 8002166:	e03b      	b.n	80021e0 <ILI9341_WriteString+0x9a>
        if (x + font.width >= display->width) {
 8002168:	897b      	ldrh	r3, [r7, #10]
 800216a:	f897 2020 	ldrb.w	r2, [r7, #32]
 800216e:	4413      	add	r3, r2
 8002170:	68fa      	ldr	r2, [r7, #12]
 8002172:	8ad2      	ldrh	r2, [r2, #22]
 8002174:	4293      	cmp	r3, r2
 8002176:	db17      	blt.n	80021a8 <ILI9341_WriteString+0x62>
            x = 0;
 8002178:	2300      	movs	r3, #0
 800217a:	817b      	strh	r3, [r7, #10]
            y += font.height;
 800217c:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8002180:	461a      	mov	r2, r3
 8002182:	893b      	ldrh	r3, [r7, #8]
 8002184:	4413      	add	r3, r2
 8002186:	813b      	strh	r3, [r7, #8]

            if (y + font.height >= display->height)
 8002188:	893b      	ldrh	r3, [r7, #8]
 800218a:	f897 2021 	ldrb.w	r2, [r7, #33]	@ 0x21
 800218e:	4413      	add	r3, r2
 8002190:	68fa      	ldr	r2, [r7, #12]
 8002192:	8b12      	ldrh	r2, [r2, #24]
 8002194:	4293      	cmp	r3, r2
 8002196:	da28      	bge.n	80021ea <ILI9341_WriteString+0xa4>
                break;

            if (*str == ' ') {
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	781b      	ldrb	r3, [r3, #0]
 800219c:	2b20      	cmp	r3, #32
 800219e:	d103      	bne.n	80021a8 <ILI9341_WriteString+0x62>
                // skip spaces in the beginning of the new line
                str++;
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	3301      	adds	r3, #1
 80021a4:	607b      	str	r3, [r7, #4]
                continue;
 80021a6:	e01b      	b.n	80021e0 <ILI9341_WriteString+0x9a>
            }
        }

        ILI9341_WriteChar(display, x, y, *str, font, color, bgcolor);
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	781d      	ldrb	r5, [r3, #0]
 80021ac:	893a      	ldrh	r2, [r7, #8]
 80021ae:	897c      	ldrh	r4, [r7, #10]
 80021b0:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 80021b2:	9303      	str	r3, [sp, #12]
 80021b4:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80021b6:	9302      	str	r3, [sp, #8]
 80021b8:	466b      	mov	r3, sp
 80021ba:	f107 0120 	add.w	r1, r7, #32
 80021be:	c903      	ldmia	r1, {r0, r1}
 80021c0:	e883 0003 	stmia.w	r3, {r0, r1}
 80021c4:	462b      	mov	r3, r5
 80021c6:	4621      	mov	r1, r4
 80021c8:	68f8      	ldr	r0, [r7, #12]
 80021ca:	f7ff ff46 	bl	800205a <ILI9341_WriteChar>
        x += font.width;
 80021ce:	f897 3020 	ldrb.w	r3, [r7, #32]
 80021d2:	461a      	mov	r2, r3
 80021d4:	897b      	ldrh	r3, [r7, #10]
 80021d6:	4413      	add	r3, r2
 80021d8:	817b      	strh	r3, [r7, #10]
        str++;
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	3301      	adds	r3, #1
 80021de:	607b      	str	r3, [r7, #4]
    while (*str) {
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	781b      	ldrb	r3, [r3, #0]
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d1bf      	bne.n	8002168 <ILI9341_WriteString+0x22>
 80021e8:	e000      	b.n	80021ec <ILI9341_WriteString+0xa6>
                break;
 80021ea:	bf00      	nop
    }

	ILI9341_UNSELECT(display);
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	8a1a      	ldrh	r2, [r3, #16]
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	685b      	ldr	r3, [r3, #4]
 80021f4:	619a      	str	r2, [r3, #24]
}
 80021f6:	bf00      	nop
 80021f8:	3710      	adds	r7, #16
 80021fa:	46bd      	mov	sp, r7
 80021fc:	bdb0      	pop	{r4, r5, r7, pc}
	...

08002200 <HAL_I2S_RxCpltCallback>:
  * @brief  I2S 接收全滿回呼函式
  * @param  hi2s: I2S handle
  * @retval None
  */
void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8002200:	b580      	push	{r7, lr}
 8002202:	b082      	sub	sp, #8
 8002204:	af00      	add	r7, sp, #0
 8002206:	6078      	str	r0, [r7, #4]
  // DMA 已經填充完緩衝區的後半部分
  // 在這裡呼叫語音辨識函式，處理後半段的資料
  // speech_recognition_run(&i2s_rx_buffer[I2S_BUFFER_SIZE / 2], I2S_BUFFER_SIZE / 2);
  buffer_is_ready = 2; // 示意：設定旗標
 8002208:	4b1f      	ldr	r3, [pc, #124]	@ (8002288 <HAL_I2S_RxCpltCallback+0x88>)
 800220a:	2202      	movs	r2, #2
 800220c:	601a      	str	r2, [r3, #0]
	if(hi2s==&hi2s2){
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	4a1e      	ldr	r2, [pc, #120]	@ (800228c <HAL_I2S_RxCpltCallback+0x8c>)
 8002212:	4293      	cmp	r3, r2
 8002214:	d133      	bne.n	800227e <HAL_I2S_RxCpltCallback+0x7e>
		cb_cnt++;//回调次数计数
 8002216:	4b1e      	ldr	r3, [pc, #120]	@ (8002290 <HAL_I2S_RxCpltCallback+0x90>)
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	3301      	adds	r3, #1
 800221c:	4a1c      	ldr	r2, [pc, #112]	@ (8002290 <HAL_I2S_RxCpltCallback+0x90>)
 800221e:	6013      	str	r3, [r2, #0]
		//将两个32整型合并为一个
		//dat32 example: 0000fffb 00004f00
		//printf("%x\r\n",data_i2s[0]<<8);
		//printf("%x\r\n",data_i2s[1]>>8);

		val24=(i2s_rx_buffer[0]<<8)+(i2s_rx_buffer[1]>>8);
 8002220:	4b1c      	ldr	r3, [pc, #112]	@ (8002294 <HAL_I2S_RxCpltCallback+0x94>)
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	021a      	lsls	r2, r3, #8
 8002226:	4b1b      	ldr	r3, [pc, #108]	@ (8002294 <HAL_I2S_RxCpltCallback+0x94>)
 8002228:	685b      	ldr	r3, [r3, #4]
 800222a:	0a1b      	lsrs	r3, r3, #8
 800222c:	4413      	add	r3, r2
 800222e:	4a1a      	ldr	r2, [pc, #104]	@ (8002298 <HAL_I2S_RxCpltCallback+0x98>)
 8002230:	6013      	str	r3, [r2, #0]
		//printf("%d\r\n",val24);
      //将24位有符号整型扩展到32位
		if(val24 & 0x800000)
 8002232:	4b19      	ldr	r3, [pc, #100]	@ (8002298 <HAL_I2S_RxCpltCallback+0x98>)
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800223a:	2b00      	cmp	r3, #0
 800223c:	d007      	beq.n	800224e <HAL_I2S_RxCpltCallback+0x4e>
		{//negative
			val32=0xff000000 | val24;
 800223e:	4b16      	ldr	r3, [pc, #88]	@ (8002298 <HAL_I2S_RxCpltCallback+0x98>)
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002246:	461a      	mov	r2, r3
 8002248:	4b14      	ldr	r3, [pc, #80]	@ (800229c <HAL_I2S_RxCpltCallback+0x9c>)
 800224a:	601a      	str	r2, [r3, #0]
 800224c:	e004      	b.n	8002258 <HAL_I2S_RxCpltCallback+0x58>
		}
		else
		{//positive
			val32=val24;
 800224e:	4b12      	ldr	r3, [pc, #72]	@ (8002298 <HAL_I2S_RxCpltCallback+0x98>)
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	461a      	mov	r2, r3
 8002254:	4b11      	ldr	r3, [pc, #68]	@ (800229c <HAL_I2S_RxCpltCallback+0x9c>)
 8002256:	601a      	str	r2, [r3, #0]
		}
		//以采样频率的十分之一，串口发送采样值
		if(cb_cnt%10==0)
 8002258:	4b0d      	ldr	r3, [pc, #52]	@ (8002290 <HAL_I2S_RxCpltCallback+0x90>)
 800225a:	6819      	ldr	r1, [r3, #0]
 800225c:	4b10      	ldr	r3, [pc, #64]	@ (80022a0 <HAL_I2S_RxCpltCallback+0xa0>)
 800225e:	fba3 2301 	umull	r2, r3, r3, r1
 8002262:	08da      	lsrs	r2, r3, #3
 8002264:	4613      	mov	r3, r2
 8002266:	009b      	lsls	r3, r3, #2
 8002268:	4413      	add	r3, r2
 800226a:	005b      	lsls	r3, r3, #1
 800226c:	1aca      	subs	r2, r1, r3
 800226e:	2a00      	cmp	r2, #0
 8002270:	d105      	bne.n	800227e <HAL_I2S_RxCpltCallback+0x7e>
			printf("%d\r\n",val32);
 8002272:	4b0a      	ldr	r3, [pc, #40]	@ (800229c <HAL_I2S_RxCpltCallback+0x9c>)
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	4619      	mov	r1, r3
 8002278:	480a      	ldr	r0, [pc, #40]	@ (80022a4 <HAL_I2S_RxCpltCallback+0xa4>)
 800227a:	f009 fbbf 	bl	800b9fc <iprintf>
	}
}
 800227e:	bf00      	nop
 8002280:	3708      	adds	r7, #8
 8002282:	46bd      	mov	sp, r7
 8002284:	bd80      	pop	{r7, pc}
 8002286:	bf00      	nop
 8002288:	2000d4e4 	.word	0x2000d4e4
 800228c:	2000d3c8 	.word	0x2000d3c8
 8002290:	2000d4e8 	.word	0x2000d4e8
 8002294:	2000d4d4 	.word	0x2000d4d4
 8002298:	2000d4ec 	.word	0x2000d4ec
 800229c:	2000d4f0 	.word	0x2000d4f0
 80022a0:	cccccccd 	.word	0xcccccccd
 80022a4:	0800f3e0 	.word	0x0800f3e0

080022a8 <HAL_UART_RxCpltCallback>:
// --- AI 推論相關變數 ---
// 這個變數將連接 main.c 和 app_x-cube-ai.c
int score_from_uart = 0;

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80022a8:	b580      	push	{r7, lr}
 80022aa:	b082      	sub	sp, #8
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	6078      	str	r0, [r7, #4]
  // 確保是我們想要的 UART (例如 USART2) 觸發的中斷
  if (huart->Instance == USART6)
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	4a1b      	ldr	r2, [pc, #108]	@ (8002324 <HAL_UART_RxCpltCallback+0x7c>)
 80022b6:	4293      	cmp	r3, r2
 80022b8:	d130      	bne.n	800231c <HAL_UART_RxCpltCallback+0x74>
  {
    // 檢查是否是換行符 (Enter 鍵)，或者緩衝區是否已滿
    if (rx_byte == '\r' || rx_byte == '\n' || uart_rx_index >= (UART_RX_BUFFER_SIZE - 1))
 80022ba:	4b1b      	ldr	r3, [pc, #108]	@ (8002328 <HAL_UART_RxCpltCallback+0x80>)
 80022bc:	781b      	ldrb	r3, [r3, #0]
 80022be:	2b0d      	cmp	r3, #13
 80022c0:	d008      	beq.n	80022d4 <HAL_UART_RxCpltCallback+0x2c>
 80022c2:	4b19      	ldr	r3, [pc, #100]	@ (8002328 <HAL_UART_RxCpltCallback+0x80>)
 80022c4:	781b      	ldrb	r3, [r3, #0]
 80022c6:	2b0a      	cmp	r3, #10
 80022c8:	d004      	beq.n	80022d4 <HAL_UART_RxCpltCallback+0x2c>
 80022ca:	4b18      	ldr	r3, [pc, #96]	@ (800232c <HAL_UART_RxCpltCallback+0x84>)
 80022cc:	781b      	ldrb	r3, [r3, #0]
 80022ce:	b2db      	uxtb	r3, r3
 80022d0:	2b08      	cmp	r3, #8
 80022d2:	d912      	bls.n	80022fa <HAL_UART_RxCpltCallback+0x52>
    {
      // 1. 在字串末尾加上結束符 '\0'
      uart_rx_buffer[uart_rx_index] = '\0';
 80022d4:	4b15      	ldr	r3, [pc, #84]	@ (800232c <HAL_UART_RxCpltCallback+0x84>)
 80022d6:	781b      	ldrb	r3, [r3, #0]
 80022d8:	b2db      	uxtb	r3, r3
 80022da:	461a      	mov	r2, r3
 80022dc:	4b14      	ldr	r3, [pc, #80]	@ (8002330 <HAL_UART_RxCpltCallback+0x88>)
 80022de:	2100      	movs	r1, #0
 80022e0:	5499      	strb	r1, [r3, r2]

      // 2. 設定新數據旗標，通知主迴圈處理
      if (uart_rx_index > 0) // 確保不是空指令
 80022e2:	4b12      	ldr	r3, [pc, #72]	@ (800232c <HAL_UART_RxCpltCallback+0x84>)
 80022e4:	781b      	ldrb	r3, [r3, #0]
 80022e6:	b2db      	uxtb	r3, r3
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d002      	beq.n	80022f2 <HAL_UART_RxCpltCallback+0x4a>
      {
        new_data_received = true;
 80022ec:	4b11      	ldr	r3, [pc, #68]	@ (8002334 <HAL_UART_RxCpltCallback+0x8c>)
 80022ee:	2201      	movs	r2, #1
 80022f0:	701a      	strb	r2, [r3, #0]
      }

      // 3. 重置索引，準備下一次接收
      uart_rx_index = 0;
 80022f2:	4b0e      	ldr	r3, [pc, #56]	@ (800232c <HAL_UART_RxCpltCallback+0x84>)
 80022f4:	2200      	movs	r2, #0
 80022f6:	701a      	strb	r2, [r3, #0]
 80022f8:	e00b      	b.n	8002312 <HAL_UART_RxCpltCallback+0x6a>
    }
    else
    {
      // 將收到的位元組存入緩衝區，並移動索引
      uart_rx_buffer[uart_rx_index++] = rx_byte;
 80022fa:	4b0c      	ldr	r3, [pc, #48]	@ (800232c <HAL_UART_RxCpltCallback+0x84>)
 80022fc:	781b      	ldrb	r3, [r3, #0]
 80022fe:	b2db      	uxtb	r3, r3
 8002300:	1c5a      	adds	r2, r3, #1
 8002302:	b2d1      	uxtb	r1, r2
 8002304:	4a09      	ldr	r2, [pc, #36]	@ (800232c <HAL_UART_RxCpltCallback+0x84>)
 8002306:	7011      	strb	r1, [r2, #0]
 8002308:	461a      	mov	r2, r3
 800230a:	4b07      	ldr	r3, [pc, #28]	@ (8002328 <HAL_UART_RxCpltCallback+0x80>)
 800230c:	7819      	ldrb	r1, [r3, #0]
 800230e:	4b08      	ldr	r3, [pc, #32]	@ (8002330 <HAL_UART_RxCpltCallback+0x88>)
 8002310:	5499      	strb	r1, [r3, r2]
    }

    // !!! 非常重要：重新啟動 UART 中斷接收，準備接收下一個位元組 !!!
    HAL_UART_Receive_IT(&huart6, &rx_byte, 1);
 8002312:	2201      	movs	r2, #1
 8002314:	4904      	ldr	r1, [pc, #16]	@ (8002328 <HAL_UART_RxCpltCallback+0x80>)
 8002316:	4808      	ldr	r0, [pc, #32]	@ (8002338 <HAL_UART_RxCpltCallback+0x90>)
 8002318:	f007 fc4e 	bl	8009bb8 <HAL_UART_Receive_IT>
  }
}
 800231c:	bf00      	nop
 800231e:	3708      	adds	r7, #8
 8002320:	46bd      	mov	sp, r7
 8002322:	bd80      	pop	{r7, pc}
 8002324:	40011400 	.word	0x40011400
 8002328:	2000d4fe 	.word	0x2000d4fe
 800232c:	2000d4ff 	.word	0x2000d4ff
 8002330:	2000d4f4 	.word	0x2000d4f4
 8002334:	2000d500 	.word	0x2000d500
 8002338:	20014070 	.word	0x20014070

0800233c <HAL_TIM_PeriodElapsedCallback>:

uint16_t txData;
int txIndex;
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800233c:	b580      	push	{r7, lr}
 800233e:	b082      	sub	sp, #8
 8002340:	af00      	add	r7, sp, #0
 8002342:	6078      	str	r0, [r7, #4]
  if(htim->Instance == TIM2)
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800234c:	d125      	bne.n	800239a <HAL_TIM_PeriodElapsedCallback+0x5e>
  {
    txData = ((uint16_t)helloworld[txIndex+1] << 8) | helloworld[txIndex];
 800234e:	4b1e      	ldr	r3, [pc, #120]	@ (80023c8 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	3301      	adds	r3, #1
 8002354:	4a1d      	ldr	r2, [pc, #116]	@ (80023cc <HAL_TIM_PeriodElapsedCallback+0x90>)
 8002356:	5cd3      	ldrb	r3, [r2, r3]
 8002358:	b21b      	sxth	r3, r3
 800235a:	021b      	lsls	r3, r3, #8
 800235c:	b21a      	sxth	r2, r3
 800235e:	4b1a      	ldr	r3, [pc, #104]	@ (80023c8 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	491a      	ldr	r1, [pc, #104]	@ (80023cc <HAL_TIM_PeriodElapsedCallback+0x90>)
 8002364:	5ccb      	ldrb	r3, [r1, r3]
 8002366:	b21b      	sxth	r3, r3
 8002368:	4313      	orrs	r3, r2
 800236a:	b21b      	sxth	r3, r3
 800236c:	b29a      	uxth	r2, r3
 800236e:	4b18      	ldr	r3, [pc, #96]	@ (80023d0 <HAL_TIM_PeriodElapsedCallback+0x94>)
 8002370:	801a      	strh	r2, [r3, #0]
    txIndex = txIndex + 2;
 8002372:	4b15      	ldr	r3, [pc, #84]	@ (80023c8 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	3302      	adds	r3, #2
 8002378:	4a13      	ldr	r2, [pc, #76]	@ (80023c8 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 800237a:	6013      	str	r3, [r2, #0]
    if(txIndex>53456) txIndex = 0;
 800237c:	4b12      	ldr	r3, [pc, #72]	@ (80023c8 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f24d 02d0 	movw	r2, #53456	@ 0xd0d0
 8002384:	4293      	cmp	r3, r2
 8002386:	dd02      	ble.n	800238e <HAL_TIM_PeriodElapsedCallback+0x52>
 8002388:	4b0f      	ldr	r3, [pc, #60]	@ (80023c8 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 800238a:	2200      	movs	r2, #0
 800238c:	601a      	str	r2, [r3, #0]
    HAL_I2S_Transmit(&hi2s3, &txData, 1, 10);
 800238e:	230a      	movs	r3, #10
 8002390:	2201      	movs	r2, #1
 8002392:	490f      	ldr	r1, [pc, #60]	@ (80023d0 <HAL_TIM_PeriodElapsedCallback+0x94>)
 8002394:	480f      	ldr	r0, [pc, #60]	@ (80023d4 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8002396:	f004 fdd7 	bl	8006f48 <HAL_I2S_Transmit>
  }

	if(htim->Instance == TIM10)
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	4a0e      	ldr	r2, [pc, #56]	@ (80023d8 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 80023a0:	4293      	cmp	r3, r2
 80023a2:	d10c      	bne.n	80023be <HAL_TIM_PeriodElapsedCallback+0x82>
	{
		if (adc_available) {
 80023a4:	4b0d      	ldr	r3, [pc, #52]	@ (80023dc <HAL_TIM_PeriodElapsedCallback+0xa0>)
 80023a6:	781b      	ldrb	r3, [r3, #0]
 80023a8:	b2db      	uxtb	r3, r3
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d007      	beq.n	80023be <HAL_TIM_PeriodElapsedCallback+0x82>
			adc_available = 0;
 80023ae:	4b0b      	ldr	r3, [pc, #44]	@ (80023dc <HAL_TIM_PeriodElapsedCallback+0xa0>)
 80023b0:	2200      	movs	r2, #0
 80023b2:	701a      	strb	r2, [r3, #0]
			HAL_ADC_Start_DMA(&hadc1, (uint32_t*)&adc_data, 2);
 80023b4:	2202      	movs	r2, #2
 80023b6:	490a      	ldr	r1, [pc, #40]	@ (80023e0 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 80023b8:	480a      	ldr	r0, [pc, #40]	@ (80023e4 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 80023ba:	f003 f969 	bl	8005690 <HAL_ADC_Start_DMA>
		}
	}
}
 80023be:	bf00      	nop
 80023c0:	3708      	adds	r7, #8
 80023c2:	46bd      	mov	sp, r7
 80023c4:	bd80      	pop	{r7, pc}
 80023c6:	bf00      	nop
 80023c8:	2000d504 	.word	0x2000d504
 80023cc:	20000010 	.word	0x20000010
 80023d0:	2000d502 	.word	0x2000d502
 80023d4:	2000d410 	.word	0x2000d410
 80023d8:	40014400 	.word	0x40014400
 80023dc:	2000d0e1 	.word	0x2000d0e1
 80023e0:	2000d508 	.word	0x2000d508
 80023e4:	2000d318 	.word	0x2000d318

080023e8 <HAL_ADC_ConvCpltCallback>:


void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80023e8:	b580      	push	{r7, lr}
 80023ea:	b084      	sub	sp, #16
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	6078      	str	r0, [r7, #4]
    if(hadc->Instance == ADC1)
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	4a91      	ldr	r2, [pc, #580]	@ (800263c <HAL_ADC_ConvCpltCallback+0x254>)
 80023f6:	4293      	cmp	r3, r2
 80023f8:	f040 81c2 	bne.w	8002780 <HAL_ADC_ConvCpltCallback+0x398>
    {
    	if (adc_reset_cyccnt) {
 80023fc:	4b90      	ldr	r3, [pc, #576]	@ (8002640 <HAL_ADC_ConvCpltCallback+0x258>)
 80023fe:	781b      	ldrb	r3, [r3, #0]
 8002400:	b2db      	uxtb	r3, r3
 8002402:	2b00      	cmp	r3, #0
 8002404:	d00b      	beq.n	800241e <HAL_ADC_ConvCpltCallback+0x36>
    		DWT->CYCCNT = 0U;
 8002406:	4b8f      	ldr	r3, [pc, #572]	@ (8002644 <HAL_ADC_ConvCpltCallback+0x25c>)
 8002408:	2200      	movs	r2, #0
 800240a:	605a      	str	r2, [r3, #4]
    		adc0_time_delta = 0;
 800240c:	4b8e      	ldr	r3, [pc, #568]	@ (8002648 <HAL_ADC_ConvCpltCallback+0x260>)
 800240e:	2200      	movs	r2, #0
 8002410:	601a      	str	r2, [r3, #0]
    		adc1_time_delta = 0;
 8002412:	4b8e      	ldr	r3, [pc, #568]	@ (800264c <HAL_ADC_ConvCpltCallback+0x264>)
 8002414:	2200      	movs	r2, #0
 8002416:	601a      	str	r2, [r3, #0]
    		adc_reset_cyccnt = 0;
 8002418:	4b89      	ldr	r3, [pc, #548]	@ (8002640 <HAL_ADC_ConvCpltCallback+0x258>)
 800241a:	2200      	movs	r2, #0
 800241c:	701a      	strb	r2, [r3, #0]
    	}

    	if (!adc0_filled) {
 800241e:	4b8c      	ldr	r3, [pc, #560]	@ (8002650 <HAL_ADC_ConvCpltCallback+0x268>)
 8002420:	781b      	ldrb	r3, [r3, #0]
 8002422:	b2db      	uxtb	r3, r3
 8002424:	2b00      	cmp	r3, #0
 8002426:	f040 80a4 	bne.w	8002572 <HAL_ADC_ConvCpltCallback+0x18a>
			adc0_time[adc0_length] = (DWT->CYCCNT - adc0_time_delta) / (SystemCoreClock / 1000000);
 800242a:	4b86      	ldr	r3, [pc, #536]	@ (8002644 <HAL_ADC_ConvCpltCallback+0x25c>)
 800242c:	685a      	ldr	r2, [r3, #4]
 800242e:	4b86      	ldr	r3, [pc, #536]	@ (8002648 <HAL_ADC_ConvCpltCallback+0x260>)
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	1ad1      	subs	r1, r2, r3
 8002434:	4b87      	ldr	r3, [pc, #540]	@ (8002654 <HAL_ADC_ConvCpltCallback+0x26c>)
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	4a87      	ldr	r2, [pc, #540]	@ (8002658 <HAL_ADC_ConvCpltCallback+0x270>)
 800243a:	fba2 2303 	umull	r2, r3, r2, r3
 800243e:	0c9a      	lsrs	r2, r3, #18
 8002440:	4b86      	ldr	r3, [pc, #536]	@ (800265c <HAL_ADC_ConvCpltCallback+0x274>)
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	fbb1 f2f2 	udiv	r2, r1, r2
 8002448:	4985      	ldr	r1, [pc, #532]	@ (8002660 <HAL_ADC_ConvCpltCallback+0x278>)
 800244a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			adc0[adc0_length] = adc_data[0] * ADC_CHANNEL0_SCALE;
 800244e:	4b83      	ldr	r3, [pc, #524]	@ (800265c <HAL_ADC_ConvCpltCallback+0x274>)
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	4a84      	ldr	r2, [pc, #528]	@ (8002664 <HAL_ADC_ConvCpltCallback+0x27c>)
 8002454:	8812      	ldrh	r2, [r2, #0]
 8002456:	b291      	uxth	r1, r2
 8002458:	4a83      	ldr	r2, [pc, #524]	@ (8002668 <HAL_ADC_ConvCpltCallback+0x280>)
 800245a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

			if (adc_max[0] < adc0[adc0_length])
 800245e:	4b83      	ldr	r3, [pc, #524]	@ (800266c <HAL_ADC_ConvCpltCallback+0x284>)
 8002460:	881b      	ldrh	r3, [r3, #0]
 8002462:	b29a      	uxth	r2, r3
 8002464:	4b7d      	ldr	r3, [pc, #500]	@ (800265c <HAL_ADC_ConvCpltCallback+0x274>)
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	497f      	ldr	r1, [pc, #508]	@ (8002668 <HAL_ADC_ConvCpltCallback+0x280>)
 800246a:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800246e:	429a      	cmp	r2, r3
 8002470:	d206      	bcs.n	8002480 <HAL_ADC_ConvCpltCallback+0x98>
				adc_max[0] = adc0[adc0_length];
 8002472:	4b7a      	ldr	r3, [pc, #488]	@ (800265c <HAL_ADC_ConvCpltCallback+0x274>)
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	4a7c      	ldr	r2, [pc, #496]	@ (8002668 <HAL_ADC_ConvCpltCallback+0x280>)
 8002478:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 800247c:	4b7b      	ldr	r3, [pc, #492]	@ (800266c <HAL_ADC_ConvCpltCallback+0x284>)
 800247e:	801a      	strh	r2, [r3, #0]

			if (adc_min[0] > adc0[adc0_length])
 8002480:	4b7b      	ldr	r3, [pc, #492]	@ (8002670 <HAL_ADC_ConvCpltCallback+0x288>)
 8002482:	881b      	ldrh	r3, [r3, #0]
 8002484:	b29a      	uxth	r2, r3
 8002486:	4b75      	ldr	r3, [pc, #468]	@ (800265c <HAL_ADC_ConvCpltCallback+0x274>)
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	4977      	ldr	r1, [pc, #476]	@ (8002668 <HAL_ADC_ConvCpltCallback+0x280>)
 800248c:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8002490:	429a      	cmp	r2, r3
 8002492:	d906      	bls.n	80024a2 <HAL_ADC_ConvCpltCallback+0xba>
				adc_min[0] = adc0[adc0_length];
 8002494:	4b71      	ldr	r3, [pc, #452]	@ (800265c <HAL_ADC_ConvCpltCallback+0x274>)
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	4a73      	ldr	r2, [pc, #460]	@ (8002668 <HAL_ADC_ConvCpltCallback+0x280>)
 800249a:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 800249e:	4b74      	ldr	r3, [pc, #464]	@ (8002670 <HAL_ADC_ConvCpltCallback+0x288>)
 80024a0:	801a      	strh	r2, [r3, #0]

			if (adc0_length < (ADC_BUFFER_SIZE - 1)) {
 80024a2:	4b6e      	ldr	r3, [pc, #440]	@ (800265c <HAL_ADC_ConvCpltCallback+0x274>)
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f240 72fe 	movw	r2, #2046	@ 0x7fe
 80024aa:	4293      	cmp	r3, r2
 80024ac:	d85e      	bhi.n	800256c <HAL_ADC_ConvCpltCallback+0x184>

				uint8_t trigger = 0;
 80024ae:	2300      	movs	r3, #0
 80024b0:	73fb      	strb	r3, [r7, #15]

				if (trigger_mode == 0)
 80024b2:	4b70      	ldr	r3, [pc, #448]	@ (8002674 <HAL_ADC_ConvCpltCallback+0x28c>)
 80024b4:	781b      	ldrb	r3, [r3, #0]
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d114      	bne.n	80024e4 <HAL_ADC_ConvCpltCallback+0xfc>
					trigger = (adc0_prev < trigger0_value && adc0[adc0_length] > trigger0_value);
 80024ba:	4b6f      	ldr	r3, [pc, #444]	@ (8002678 <HAL_ADC_ConvCpltCallback+0x290>)
 80024bc:	881b      	ldrh	r3, [r3, #0]
 80024be:	b29a      	uxth	r2, r3
 80024c0:	4b6e      	ldr	r3, [pc, #440]	@ (800267c <HAL_ADC_ConvCpltCallback+0x294>)
 80024c2:	881b      	ldrh	r3, [r3, #0]
 80024c4:	429a      	cmp	r2, r3
 80024c6:	d20a      	bcs.n	80024de <HAL_ADC_ConvCpltCallback+0xf6>
 80024c8:	4b64      	ldr	r3, [pc, #400]	@ (800265c <HAL_ADC_ConvCpltCallback+0x274>)
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	4a66      	ldr	r2, [pc, #408]	@ (8002668 <HAL_ADC_ConvCpltCallback+0x280>)
 80024ce:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 80024d2:	4b6a      	ldr	r3, [pc, #424]	@ (800267c <HAL_ADC_ConvCpltCallback+0x294>)
 80024d4:	881b      	ldrh	r3, [r3, #0]
 80024d6:	429a      	cmp	r2, r3
 80024d8:	d901      	bls.n	80024de <HAL_ADC_ConvCpltCallback+0xf6>
 80024da:	2301      	movs	r3, #1
 80024dc:	e000      	b.n	80024e0 <HAL_ADC_ConvCpltCallback+0xf8>
 80024de:	2300      	movs	r3, #0
 80024e0:	73fb      	strb	r3, [r7, #15]
 80024e2:	e013      	b.n	800250c <HAL_ADC_ConvCpltCallback+0x124>
				else
					trigger = (adc0_prev > trigger0_value && adc0[adc0_length] < trigger0_value);
 80024e4:	4b64      	ldr	r3, [pc, #400]	@ (8002678 <HAL_ADC_ConvCpltCallback+0x290>)
 80024e6:	881b      	ldrh	r3, [r3, #0]
 80024e8:	b29a      	uxth	r2, r3
 80024ea:	4b64      	ldr	r3, [pc, #400]	@ (800267c <HAL_ADC_ConvCpltCallback+0x294>)
 80024ec:	881b      	ldrh	r3, [r3, #0]
 80024ee:	429a      	cmp	r2, r3
 80024f0:	d90a      	bls.n	8002508 <HAL_ADC_ConvCpltCallback+0x120>
 80024f2:	4b5a      	ldr	r3, [pc, #360]	@ (800265c <HAL_ADC_ConvCpltCallback+0x274>)
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	4a5c      	ldr	r2, [pc, #368]	@ (8002668 <HAL_ADC_ConvCpltCallback+0x280>)
 80024f8:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 80024fc:	4b5f      	ldr	r3, [pc, #380]	@ (800267c <HAL_ADC_ConvCpltCallback+0x294>)
 80024fe:	881b      	ldrh	r3, [r3, #0]
 8002500:	429a      	cmp	r2, r3
 8002502:	d201      	bcs.n	8002508 <HAL_ADC_ConvCpltCallback+0x120>
 8002504:	2301      	movs	r3, #1
 8002506:	e000      	b.n	800250a <HAL_ADC_ConvCpltCallback+0x122>
 8002508:	2300      	movs	r3, #0
 800250a:	73fb      	strb	r3, [r7, #15]

				if (trigger && adc0_length != 0) {
 800250c:	7bfb      	ldrb	r3, [r7, #15]
 800250e:	2b00      	cmp	r3, #0
 8002510:	d021      	beq.n	8002556 <HAL_ADC_ConvCpltCallback+0x16e>
 8002512:	4b52      	ldr	r3, [pc, #328]	@ (800265c <HAL_ADC_ConvCpltCallback+0x274>)
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	2b00      	cmp	r3, #0
 8002518:	d01d      	beq.n	8002556 <HAL_ADC_ConvCpltCallback+0x16e>
					if (!event_trigger0_detected) {
 800251a:	4b59      	ldr	r3, [pc, #356]	@ (8002680 <HAL_ADC_ConvCpltCallback+0x298>)
 800251c:	781b      	ldrb	r3, [r3, #0]
 800251e:	2b00      	cmp	r3, #0
 8002520:	d10a      	bne.n	8002538 <HAL_ADC_ConvCpltCallback+0x150>
						adc0_length = 0;
 8002522:	4b4e      	ldr	r3, [pc, #312]	@ (800265c <HAL_ADC_ConvCpltCallback+0x274>)
 8002524:	2200      	movs	r2, #0
 8002526:	601a      	str	r2, [r3, #0]
						adc0_time_delta = DWT->CYCCNT;
 8002528:	4b46      	ldr	r3, [pc, #280]	@ (8002644 <HAL_ADC_ConvCpltCallback+0x25c>)
 800252a:	685b      	ldr	r3, [r3, #4]
 800252c:	4a46      	ldr	r2, [pc, #280]	@ (8002648 <HAL_ADC_ConvCpltCallback+0x260>)
 800252e:	6013      	str	r3, [r2, #0]
						event_trigger0_detected = 1;
 8002530:	4b53      	ldr	r3, [pc, #332]	@ (8002680 <HAL_ADC_ConvCpltCallback+0x298>)
 8002532:	2201      	movs	r2, #1
 8002534:	701a      	strb	r2, [r3, #0]
 8002536:	e00e      	b.n	8002556 <HAL_ADC_ConvCpltCallback+0x16e>
					} else if (!adc_period0_detected) {
 8002538:	4b52      	ldr	r3, [pc, #328]	@ (8002684 <HAL_ADC_ConvCpltCallback+0x29c>)
 800253a:	781b      	ldrb	r3, [r3, #0]
 800253c:	b2db      	uxtb	r3, r3
 800253e:	2b00      	cmp	r3, #0
 8002540:	d109      	bne.n	8002556 <HAL_ADC_ConvCpltCallback+0x16e>
						adc_period[0] = adc0_time[adc0_length];
 8002542:	4b46      	ldr	r3, [pc, #280]	@ (800265c <HAL_ADC_ConvCpltCallback+0x274>)
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	4a46      	ldr	r2, [pc, #280]	@ (8002660 <HAL_ADC_ConvCpltCallback+0x278>)
 8002548:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800254c:	4a4e      	ldr	r2, [pc, #312]	@ (8002688 <HAL_ADC_ConvCpltCallback+0x2a0>)
 800254e:	6013      	str	r3, [r2, #0]
						adc_period0_detected = 1;
 8002550:	4b4c      	ldr	r3, [pc, #304]	@ (8002684 <HAL_ADC_ConvCpltCallback+0x29c>)
 8002552:	2201      	movs	r2, #1
 8002554:	701a      	strb	r2, [r3, #0]
					}
				}

				adc0_prev = adc_data[0] * ADC_CHANNEL0_SCALE;
 8002556:	4b43      	ldr	r3, [pc, #268]	@ (8002664 <HAL_ADC_ConvCpltCallback+0x27c>)
 8002558:	881b      	ldrh	r3, [r3, #0]
 800255a:	b29a      	uxth	r2, r3
 800255c:	4b46      	ldr	r3, [pc, #280]	@ (8002678 <HAL_ADC_ConvCpltCallback+0x290>)
 800255e:	801a      	strh	r2, [r3, #0]
				adc0_length++;
 8002560:	4b3e      	ldr	r3, [pc, #248]	@ (800265c <HAL_ADC_ConvCpltCallback+0x274>)
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	3301      	adds	r3, #1
 8002566:	4a3d      	ldr	r2, [pc, #244]	@ (800265c <HAL_ADC_ConvCpltCallback+0x274>)
 8002568:	6013      	str	r3, [r2, #0]
 800256a:	e002      	b.n	8002572 <HAL_ADC_ConvCpltCallback+0x18a>

			} else
				adc0_filled = 1;
 800256c:	4b38      	ldr	r3, [pc, #224]	@ (8002650 <HAL_ADC_ConvCpltCallback+0x268>)
 800256e:	2201      	movs	r2, #1
 8002570:	701a      	strb	r2, [r3, #0]
    	}

    	if (!adc1_filled) {
 8002572:	4b46      	ldr	r3, [pc, #280]	@ (800268c <HAL_ADC_ConvCpltCallback+0x2a4>)
 8002574:	781b      	ldrb	r3, [r3, #0]
 8002576:	b2db      	uxtb	r3, r3
 8002578:	2b00      	cmp	r3, #0
 800257a:	f040 80da 	bne.w	8002732 <HAL_ADC_ConvCpltCallback+0x34a>
			adc1_time[adc1_length] = (DWT->CYCCNT - adc1_time_delta) / (SystemCoreClock / 1000000);
 800257e:	4b31      	ldr	r3, [pc, #196]	@ (8002644 <HAL_ADC_ConvCpltCallback+0x25c>)
 8002580:	685a      	ldr	r2, [r3, #4]
 8002582:	4b32      	ldr	r3, [pc, #200]	@ (800264c <HAL_ADC_ConvCpltCallback+0x264>)
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	1ad1      	subs	r1, r2, r3
 8002588:	4b32      	ldr	r3, [pc, #200]	@ (8002654 <HAL_ADC_ConvCpltCallback+0x26c>)
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	4a32      	ldr	r2, [pc, #200]	@ (8002658 <HAL_ADC_ConvCpltCallback+0x270>)
 800258e:	fba2 2303 	umull	r2, r3, r2, r3
 8002592:	0c9a      	lsrs	r2, r3, #18
 8002594:	4b3e      	ldr	r3, [pc, #248]	@ (8002690 <HAL_ADC_ConvCpltCallback+0x2a8>)
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	fbb1 f2f2 	udiv	r2, r1, r2
 800259c:	493d      	ldr	r1, [pc, #244]	@ (8002694 <HAL_ADC_ConvCpltCallback+0x2ac>)
 800259e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			adc1[adc1_length] = adc_data[1] * ADC_CHANNEL1_SCALE;
 80025a2:	4b3b      	ldr	r3, [pc, #236]	@ (8002690 <HAL_ADC_ConvCpltCallback+0x2a8>)
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	4a2f      	ldr	r2, [pc, #188]	@ (8002664 <HAL_ADC_ConvCpltCallback+0x27c>)
 80025a8:	8852      	ldrh	r2, [r2, #2]
 80025aa:	b291      	uxth	r1, r2
 80025ac:	4a3a      	ldr	r2, [pc, #232]	@ (8002698 <HAL_ADC_ConvCpltCallback+0x2b0>)
 80025ae:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

			if (adc_max[1] < adc1[adc1_length])
 80025b2:	4b2e      	ldr	r3, [pc, #184]	@ (800266c <HAL_ADC_ConvCpltCallback+0x284>)
 80025b4:	885b      	ldrh	r3, [r3, #2]
 80025b6:	b29a      	uxth	r2, r3
 80025b8:	4b35      	ldr	r3, [pc, #212]	@ (8002690 <HAL_ADC_ConvCpltCallback+0x2a8>)
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	4936      	ldr	r1, [pc, #216]	@ (8002698 <HAL_ADC_ConvCpltCallback+0x2b0>)
 80025be:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80025c2:	429a      	cmp	r2, r3
 80025c4:	d206      	bcs.n	80025d4 <HAL_ADC_ConvCpltCallback+0x1ec>
				adc_max[1] = adc1[adc1_length];
 80025c6:	4b32      	ldr	r3, [pc, #200]	@ (8002690 <HAL_ADC_ConvCpltCallback+0x2a8>)
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	4a33      	ldr	r2, [pc, #204]	@ (8002698 <HAL_ADC_ConvCpltCallback+0x2b0>)
 80025cc:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 80025d0:	4b26      	ldr	r3, [pc, #152]	@ (800266c <HAL_ADC_ConvCpltCallback+0x284>)
 80025d2:	805a      	strh	r2, [r3, #2]

			if (adc_min[1] > adc1[adc1_length])
 80025d4:	4b26      	ldr	r3, [pc, #152]	@ (8002670 <HAL_ADC_ConvCpltCallback+0x288>)
 80025d6:	885b      	ldrh	r3, [r3, #2]
 80025d8:	b29a      	uxth	r2, r3
 80025da:	4b2d      	ldr	r3, [pc, #180]	@ (8002690 <HAL_ADC_ConvCpltCallback+0x2a8>)
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	492e      	ldr	r1, [pc, #184]	@ (8002698 <HAL_ADC_ConvCpltCallback+0x2b0>)
 80025e0:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80025e4:	429a      	cmp	r2, r3
 80025e6:	d906      	bls.n	80025f6 <HAL_ADC_ConvCpltCallback+0x20e>
				adc_min[1] = adc1[adc1_length];
 80025e8:	4b29      	ldr	r3, [pc, #164]	@ (8002690 <HAL_ADC_ConvCpltCallback+0x2a8>)
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	4a2a      	ldr	r2, [pc, #168]	@ (8002698 <HAL_ADC_ConvCpltCallback+0x2b0>)
 80025ee:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 80025f2:	4b1f      	ldr	r3, [pc, #124]	@ (8002670 <HAL_ADC_ConvCpltCallback+0x288>)
 80025f4:	805a      	strh	r2, [r3, #2]

			if (adc1_length < (ADC_BUFFER_SIZE - 1)) {
 80025f6:	4b26      	ldr	r3, [pc, #152]	@ (8002690 <HAL_ADC_ConvCpltCallback+0x2a8>)
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	f240 72fe 	movw	r2, #2046	@ 0x7fe
 80025fe:	4293      	cmp	r3, r2
 8002600:	f200 8094 	bhi.w	800272c <HAL_ADC_ConvCpltCallback+0x344>

				uint8_t trigger = 0;
 8002604:	2300      	movs	r3, #0
 8002606:	73bb      	strb	r3, [r7, #14]

				if (trigger_mode == 0)
 8002608:	4b1a      	ldr	r3, [pc, #104]	@ (8002674 <HAL_ADC_ConvCpltCallback+0x28c>)
 800260a:	781b      	ldrb	r3, [r3, #0]
 800260c:	2b00      	cmp	r3, #0
 800260e:	d149      	bne.n	80026a4 <HAL_ADC_ConvCpltCallback+0x2bc>
					trigger = (adc1_prev < trigger1_value && adc1[adc1_length] > trigger1_value);
 8002610:	4b22      	ldr	r3, [pc, #136]	@ (800269c <HAL_ADC_ConvCpltCallback+0x2b4>)
 8002612:	881b      	ldrh	r3, [r3, #0]
 8002614:	b29a      	uxth	r2, r3
 8002616:	4b22      	ldr	r3, [pc, #136]	@ (80026a0 <HAL_ADC_ConvCpltCallback+0x2b8>)
 8002618:	881b      	ldrh	r3, [r3, #0]
 800261a:	429a      	cmp	r2, r3
 800261c:	d20a      	bcs.n	8002634 <HAL_ADC_ConvCpltCallback+0x24c>
 800261e:	4b1c      	ldr	r3, [pc, #112]	@ (8002690 <HAL_ADC_ConvCpltCallback+0x2a8>)
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	4a1d      	ldr	r2, [pc, #116]	@ (8002698 <HAL_ADC_ConvCpltCallback+0x2b0>)
 8002624:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8002628:	4b1d      	ldr	r3, [pc, #116]	@ (80026a0 <HAL_ADC_ConvCpltCallback+0x2b8>)
 800262a:	881b      	ldrh	r3, [r3, #0]
 800262c:	429a      	cmp	r2, r3
 800262e:	d901      	bls.n	8002634 <HAL_ADC_ConvCpltCallback+0x24c>
 8002630:	2301      	movs	r3, #1
 8002632:	e000      	b.n	8002636 <HAL_ADC_ConvCpltCallback+0x24e>
 8002634:	2300      	movs	r3, #0
 8002636:	73bb      	strb	r3, [r7, #14]
 8002638:	e048      	b.n	80026cc <HAL_ADC_ConvCpltCallback+0x2e4>
 800263a:	bf00      	nop
 800263c:	40012000 	.word	0x40012000
 8002640:	2000d0e2 	.word	0x2000d0e2
 8002644:	e0001000 	.word	0xe0001000
 8002648:	20013e00 	.word	0x20013e00
 800264c:	20013e04 	.word	0x20013e04
 8002650:	2000d518 	.word	0x2000d518
 8002654:	2000d114 	.word	0x2000d114
 8002658:	431bde83 	.word	0x431bde83
 800265c:	2000d510 	.word	0x2000d510
 8002660:	2000d52c 	.word	0x2000d52c
 8002664:	2000d508 	.word	0x2000d508
 8002668:	2001152c 	.word	0x2001152c
 800266c:	2000d51c 	.word	0x2000d51c
 8002670:	2000d0e4 	.word	0x2000d0e4
 8002674:	2001352c 	.word	0x2001352c
 8002678:	20013e08 	.word	0x20013e08
 800267c:	2000d0fc 	.word	0x2000d0fc
 8002680:	2000d109 	.word	0x2000d109
 8002684:	2000d528 	.word	0x2000d528
 8002688:	2000d520 	.word	0x2000d520
 800268c:	2000d0e0 	.word	0x2000d0e0
 8002690:	2000d514 	.word	0x2000d514
 8002694:	2000f52c 	.word	0x2000f52c
 8002698:	2001252c 	.word	0x2001252c
 800269c:	20013e0a 	.word	0x20013e0a
 80026a0:	2000d0fe 	.word	0x2000d0fe
				else
					trigger = (adc1_prev > trigger1_value && adc1[adc1_length] < trigger1_value);
 80026a4:	4b38      	ldr	r3, [pc, #224]	@ (8002788 <HAL_ADC_ConvCpltCallback+0x3a0>)
 80026a6:	881b      	ldrh	r3, [r3, #0]
 80026a8:	b29a      	uxth	r2, r3
 80026aa:	4b38      	ldr	r3, [pc, #224]	@ (800278c <HAL_ADC_ConvCpltCallback+0x3a4>)
 80026ac:	881b      	ldrh	r3, [r3, #0]
 80026ae:	429a      	cmp	r2, r3
 80026b0:	d90a      	bls.n	80026c8 <HAL_ADC_ConvCpltCallback+0x2e0>
 80026b2:	4b37      	ldr	r3, [pc, #220]	@ (8002790 <HAL_ADC_ConvCpltCallback+0x3a8>)
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	4a37      	ldr	r2, [pc, #220]	@ (8002794 <HAL_ADC_ConvCpltCallback+0x3ac>)
 80026b8:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 80026bc:	4b33      	ldr	r3, [pc, #204]	@ (800278c <HAL_ADC_ConvCpltCallback+0x3a4>)
 80026be:	881b      	ldrh	r3, [r3, #0]
 80026c0:	429a      	cmp	r2, r3
 80026c2:	d201      	bcs.n	80026c8 <HAL_ADC_ConvCpltCallback+0x2e0>
 80026c4:	2301      	movs	r3, #1
 80026c6:	e000      	b.n	80026ca <HAL_ADC_ConvCpltCallback+0x2e2>
 80026c8:	2300      	movs	r3, #0
 80026ca:	73bb      	strb	r3, [r7, #14]

				if (trigger && adc1_length != 0) {
 80026cc:	7bbb      	ldrb	r3, [r7, #14]
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d021      	beq.n	8002716 <HAL_ADC_ConvCpltCallback+0x32e>
 80026d2:	4b2f      	ldr	r3, [pc, #188]	@ (8002790 <HAL_ADC_ConvCpltCallback+0x3a8>)
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d01d      	beq.n	8002716 <HAL_ADC_ConvCpltCallback+0x32e>
					if (!event_trigger1_detected) {
 80026da:	4b2f      	ldr	r3, [pc, #188]	@ (8002798 <HAL_ADC_ConvCpltCallback+0x3b0>)
 80026dc:	781b      	ldrb	r3, [r3, #0]
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d10a      	bne.n	80026f8 <HAL_ADC_ConvCpltCallback+0x310>
						adc1_length = 0;
 80026e2:	4b2b      	ldr	r3, [pc, #172]	@ (8002790 <HAL_ADC_ConvCpltCallback+0x3a8>)
 80026e4:	2200      	movs	r2, #0
 80026e6:	601a      	str	r2, [r3, #0]
						adc1_time_delta = DWT->CYCCNT;
 80026e8:	4b2c      	ldr	r3, [pc, #176]	@ (800279c <HAL_ADC_ConvCpltCallback+0x3b4>)
 80026ea:	685b      	ldr	r3, [r3, #4]
 80026ec:	4a2c      	ldr	r2, [pc, #176]	@ (80027a0 <HAL_ADC_ConvCpltCallback+0x3b8>)
 80026ee:	6013      	str	r3, [r2, #0]
						event_trigger1_detected = 1;
 80026f0:	4b29      	ldr	r3, [pc, #164]	@ (8002798 <HAL_ADC_ConvCpltCallback+0x3b0>)
 80026f2:	2201      	movs	r2, #1
 80026f4:	701a      	strb	r2, [r3, #0]
 80026f6:	e00e      	b.n	8002716 <HAL_ADC_ConvCpltCallback+0x32e>
					} else if (!adc_period1_detected) {
 80026f8:	4b2a      	ldr	r3, [pc, #168]	@ (80027a4 <HAL_ADC_ConvCpltCallback+0x3bc>)
 80026fa:	781b      	ldrb	r3, [r3, #0]
 80026fc:	b2db      	uxtb	r3, r3
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d109      	bne.n	8002716 <HAL_ADC_ConvCpltCallback+0x32e>
						adc_period[1] = adc1_time[adc1_length];
 8002702:	4b23      	ldr	r3, [pc, #140]	@ (8002790 <HAL_ADC_ConvCpltCallback+0x3a8>)
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	4a28      	ldr	r2, [pc, #160]	@ (80027a8 <HAL_ADC_ConvCpltCallback+0x3c0>)
 8002708:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800270c:	4a27      	ldr	r2, [pc, #156]	@ (80027ac <HAL_ADC_ConvCpltCallback+0x3c4>)
 800270e:	6053      	str	r3, [r2, #4]
						adc_period1_detected = 1;
 8002710:	4b24      	ldr	r3, [pc, #144]	@ (80027a4 <HAL_ADC_ConvCpltCallback+0x3bc>)
 8002712:	2201      	movs	r2, #1
 8002714:	701a      	strb	r2, [r3, #0]
					}
				}

				adc1_prev = adc_data[1] * ADC_CHANNEL1_SCALE;
 8002716:	4b26      	ldr	r3, [pc, #152]	@ (80027b0 <HAL_ADC_ConvCpltCallback+0x3c8>)
 8002718:	885b      	ldrh	r3, [r3, #2]
 800271a:	b29a      	uxth	r2, r3
 800271c:	4b1a      	ldr	r3, [pc, #104]	@ (8002788 <HAL_ADC_ConvCpltCallback+0x3a0>)
 800271e:	801a      	strh	r2, [r3, #0]
				adc1_length++;
 8002720:	4b1b      	ldr	r3, [pc, #108]	@ (8002790 <HAL_ADC_ConvCpltCallback+0x3a8>)
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	3301      	adds	r3, #1
 8002726:	4a1a      	ldr	r2, [pc, #104]	@ (8002790 <HAL_ADC_ConvCpltCallback+0x3a8>)
 8002728:	6013      	str	r3, [r2, #0]
 800272a:	e002      	b.n	8002732 <HAL_ADC_ConvCpltCallback+0x34a>

			} else
				adc1_filled = 1;
 800272c:	4b21      	ldr	r3, [pc, #132]	@ (80027b4 <HAL_ADC_ConvCpltCallback+0x3cc>)
 800272e:	2201      	movs	r2, #1
 8002730:	701a      	strb	r2, [r3, #0]
    	}

		if (adc0_filled && adc1_filled) {
 8002732:	4b21      	ldr	r3, [pc, #132]	@ (80027b8 <HAL_ADC_ConvCpltCallback+0x3d0>)
 8002734:	781b      	ldrb	r3, [r3, #0]
 8002736:	b2db      	uxtb	r3, r3
 8002738:	2b00      	cmp	r3, #0
 800273a:	d012      	beq.n	8002762 <HAL_ADC_ConvCpltCallback+0x37a>
 800273c:	4b1d      	ldr	r3, [pc, #116]	@ (80027b4 <HAL_ADC_ConvCpltCallback+0x3cc>)
 800273e:	781b      	ldrb	r3, [r3, #0]
 8002740:	b2db      	uxtb	r3, r3
 8002742:	2b00      	cmp	r3, #0
 8002744:	d00d      	beq.n	8002762 <HAL_ADC_ConvCpltCallback+0x37a>
			event_adc = 1;
 8002746:	4b1d      	ldr	r3, [pc, #116]	@ (80027bc <HAL_ADC_ConvCpltCallback+0x3d4>)
 8002748:	2201      	movs	r2, #1
 800274a:	701a      	strb	r2, [r3, #0]

	    	if (!adc_immediate) {
 800274c:	4b1c      	ldr	r3, [pc, #112]	@ (80027c0 <HAL_ADC_ConvCpltCallback+0x3d8>)
 800274e:	781b      	ldrb	r3, [r3, #0]
 8002750:	2b00      	cmp	r3, #0
 8002752:	d114      	bne.n	800277e <HAL_ADC_ConvCpltCallback+0x396>
				HAL_TIM_Base_Stop_IT(&htim10);
 8002754:	481b      	ldr	r0, [pc, #108]	@ (80027c4 <HAL_ADC_ConvCpltCallback+0x3dc>)
 8002756:	f006 f9b9 	bl	8008acc <HAL_TIM_Base_Stop_IT>
				adc_available = 1;
 800275a:	4b1b      	ldr	r3, [pc, #108]	@ (80027c8 <HAL_ADC_ConvCpltCallback+0x3e0>)
 800275c:	2201      	movs	r2, #1
 800275e:	701a      	strb	r2, [r3, #0]
	    	}

    		return;
 8002760:	e00d      	b.n	800277e <HAL_ADC_ConvCpltCallback+0x396>
		}

		if (adc_immediate)
 8002762:	4b17      	ldr	r3, [pc, #92]	@ (80027c0 <HAL_ADC_ConvCpltCallback+0x3d8>)
 8002764:	781b      	ldrb	r3, [r3, #0]
 8002766:	2b00      	cmp	r3, #0
 8002768:	d005      	beq.n	8002776 <HAL_ADC_ConvCpltCallback+0x38e>
			HAL_ADC_Start_DMA(&hadc1, (uint32_t*)&adc_data, 2);
 800276a:	2202      	movs	r2, #2
 800276c:	4910      	ldr	r1, [pc, #64]	@ (80027b0 <HAL_ADC_ConvCpltCallback+0x3c8>)
 800276e:	4817      	ldr	r0, [pc, #92]	@ (80027cc <HAL_ADC_ConvCpltCallback+0x3e4>)
 8002770:	f002 ff8e 	bl	8005690 <HAL_ADC_Start_DMA>
 8002774:	e004      	b.n	8002780 <HAL_ADC_ConvCpltCallback+0x398>
		else
			adc_available = 1;
 8002776:	4b14      	ldr	r3, [pc, #80]	@ (80027c8 <HAL_ADC_ConvCpltCallback+0x3e0>)
 8002778:	2201      	movs	r2, #1
 800277a:	701a      	strb	r2, [r3, #0]
 800277c:	e000      	b.n	8002780 <HAL_ADC_ConvCpltCallback+0x398>
    		return;
 800277e:	bf00      	nop
    }
}
 8002780:	3710      	adds	r7, #16
 8002782:	46bd      	mov	sp, r7
 8002784:	bd80      	pop	{r7, pc}
 8002786:	bf00      	nop
 8002788:	20013e0a 	.word	0x20013e0a
 800278c:	2000d0fe 	.word	0x2000d0fe
 8002790:	2000d514 	.word	0x2000d514
 8002794:	2001252c 	.word	0x2001252c
 8002798:	2000d10a 	.word	0x2000d10a
 800279c:	e0001000 	.word	0xe0001000
 80027a0:	20013e04 	.word	0x20013e04
 80027a4:	2000d529 	.word	0x2000d529
 80027a8:	2000f52c 	.word	0x2000f52c
 80027ac:	2000d520 	.word	0x2000d520
 80027b0:	2000d508 	.word	0x2000d508
 80027b4:	2000d0e0 	.word	0x2000d0e0
 80027b8:	2000d518 	.word	0x2000d518
 80027bc:	2001352d 	.word	0x2001352d
 80027c0:	2000d0e8 	.word	0x2000d0e8
 80027c4:	20013fe0 	.word	0x20013fe0
 80027c8:	2000d0e1 	.word	0x2000d0e1
 80027cc:	2000d318 	.word	0x2000d318

080027d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80027d0:	b580      	push	{r7, lr}
 80027d2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80027d4:	f002 fe82 	bl	80054dc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80027d8:	f000 f886 	bl	80028e8 <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80027dc:	f000 f8ec 	bl	80029b8 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80027e0:	f7fe fe66 	bl	80014b0 <MX_GPIO_Init>
  MX_DMA_Init();
 80027e4:	f7fe fe2e 	bl	8001444 <MX_DMA_Init>
  MX_USART2_UART_Init();
 80027e8:	f002 fd74 	bl	80052d4 <MX_USART2_UART_Init>
  MX_I2S2_Init();
 80027ec:	f7fe ff00 	bl	80015f0 <MX_I2S2_Init>
  MX_USART6_UART_Init();
 80027f0:	f002 fd9a 	bl	8005328 <MX_USART6_UART_Init>
  MX_CRC_Init();
 80027f4:	f7fe fdf0 	bl	80013d8 <MX_CRC_Init>
  MX_I2S3_Init();
 80027f8:	f7fe ff28 	bl	800164c <MX_I2S3_Init>
  MX_TIM2_Init();
 80027fc:	f002 fb3a 	bl	8004e74 <MX_TIM2_Init>
  MX_SPI5_Init();
 8002800:	f002 f8b6 	bl	8004970 <MX_SPI5_Init>
  MX_TIM1_Init();
 8002804:	f002 fa94 	bl	8004d30 <MX_TIM1_Init>
  MX_ADC1_Init();
 8002808:	f7fe fcd8 	bl	80011bc <MX_ADC1_Init>
  MX_FATFS_Init();
 800280c:	f008 f90c 	bl	800aa28 <MX_FATFS_Init>
  MX_SPI4_Init();
 8002810:	f002 f878 	bl	8004904 <MX_SPI4_Init>
  MX_TIM10_Init();
 8002814:	f002 fc22 	bl	800505c <MX_TIM10_Init>
  MX_TIM3_Init();
 8002818:	f002 fb78 	bl	8004f0c <MX_TIM3_Init>
  MX_TIM4_Init();
 800281c:	f002 fbca 	bl	8004fb4 <MX_TIM4_Init>
  {
      Error_Handler();
  }
#endif

  if (HAL_UART_Receive_IT(&huart6, &rx_byte, 1) != HAL_OK)
 8002820:	2201      	movs	r2, #1
 8002822:	4923      	ldr	r1, [pc, #140]	@ (80028b0 <main+0xe0>)
 8002824:	4823      	ldr	r0, [pc, #140]	@ (80028b4 <main+0xe4>)
 8002826:	f007 f9c7 	bl	8009bb8 <HAL_UART_Receive_IT>
 800282a:	4603      	mov	r3, r0
 800282c:	2b00      	cmp	r3, #0
 800282e:	d001      	beq.n	8002834 <main+0x64>
  {
      Error_Handler();
 8002830:	f000 f8e2 	bl	80029f8 <Error_Handler>
  }

  printf("AI Model Application Started...\r\n");
 8002834:	4820      	ldr	r0, [pc, #128]	@ (80028b8 <main+0xe8>)
 8002836:	f009 f949 	bl	800bacc <puts>


  txIndex = 0;
 800283a:	4b20      	ldr	r3, [pc, #128]	@ (80028bc <main+0xec>)
 800283c:	2200      	movs	r2, #0
 800283e:	601a      	str	r2, [r3, #0]

  // For DWT->CYCCNT ...
  SCB_DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8002840:	4b1f      	ldr	r3, [pc, #124]	@ (80028c0 <main+0xf0>)
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	4a1e      	ldr	r2, [pc, #120]	@ (80028c0 <main+0xf0>)
 8002846:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800284a:	6013      	str	r3, [r2, #0]
  DWT_CONTROL |= DWT_CTRL_CYCCNTENA_Msk;
 800284c:	4b1d      	ldr	r3, [pc, #116]	@ (80028c4 <main+0xf4>)
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	4a1c      	ldr	r2, [pc, #112]	@ (80028c4 <main+0xf4>)
 8002852:	f043 0301 	orr.w	r3, r3, #1
 8002856:	6013      	str	r3, [r2, #0]

  adc_reset_cyccnt = 1;
 8002858:	4b1b      	ldr	r3, [pc, #108]	@ (80028c8 <main+0xf8>)
 800285a:	2201      	movs	r2, #1
 800285c:	701a      	strb	r2, [r3, #0]
  if (adc_immediate)
 800285e:	4b1b      	ldr	r3, [pc, #108]	@ (80028cc <main+0xfc>)
 8002860:	781b      	ldrb	r3, [r3, #0]
 8002862:	2b00      	cmp	r3, #0
 8002864:	d005      	beq.n	8002872 <main+0xa2>
  {
	  // The ADC starts immediately after the previous measurement is handled
	  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)&adc_data, 2);
 8002866:	2202      	movs	r2, #2
 8002868:	4919      	ldr	r1, [pc, #100]	@ (80028d0 <main+0x100>)
 800286a:	481a      	ldr	r0, [pc, #104]	@ (80028d4 <main+0x104>)
 800286c:	f002 ff10 	bl	8005690 <HAL_ADC_Start_DMA>
 8002870:	e002      	b.n	8002878 <main+0xa8>
  }
  else
  {
	  // ADC starts by timer
	  HAL_TIM_Base_Start_IT(&htim10);
 8002872:	4819      	ldr	r0, [pc, #100]	@ (80028d8 <main+0x108>)
 8002874:	f006 f8c8 	bl	8008a08 <HAL_TIM_Base_Start_IT>
  }

  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8002878:	2100      	movs	r1, #0
 800287a:	4818      	ldr	r0, [pc, #96]	@ (80028dc <main+0x10c>)
 800287c:	f006 f9ae 	bl	8008bdc <HAL_TIM_PWM_Start>

  InitOscState();
 8002880:	f000 f8c0 	bl	8002a04 <InitOscState>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
  {
	 if(HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin) == GPIO_PIN_RESET)
 8002884:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002888:	4815      	ldr	r0, [pc, #84]	@ (80028e0 <main+0x110>)
 800288a:	f004 f9c7 	bl	8006c1c <HAL_GPIO_ReadPin>
 800288e:	4603      	mov	r3, r0
 8002890:	2b00      	cmp	r3, #0
 8002892:	d103      	bne.n	800289c <main+0xcc>
	 {

		  HAL_TIM_Base_Start_IT(&htim2);
 8002894:	4813      	ldr	r0, [pc, #76]	@ (80028e4 <main+0x114>)
 8002896:	f006 f8b7 	bl	8008a08 <HAL_TIM_Base_Start_IT>
 800289a:	e005      	b.n	80028a8 <main+0xd8>
	 }
	 else
	 {
		  txIndex = 0;
 800289c:	4b07      	ldr	r3, [pc, #28]	@ (80028bc <main+0xec>)
 800289e:	2200      	movs	r2, #0
 80028a0:	601a      	str	r2, [r3, #0]
		  HAL_TIM_Base_Stop_IT(&htim2);
 80028a2:	4810      	ldr	r0, [pc, #64]	@ (80028e4 <main+0x114>)
 80028a4:	f006 f912 	bl	8008acc <HAL_TIM_Base_Stop_IT>
	 }

	 Oscilloscope_Process();
 80028a8:	f000 ffe8 	bl	800387c <Oscilloscope_Process>
	 if(HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin) == GPIO_PIN_RESET)
 80028ac:	e7ea      	b.n	8002884 <main+0xb4>
 80028ae:	bf00      	nop
 80028b0:	2000d4fe 	.word	0x2000d4fe
 80028b4:	20014070 	.word	0x20014070
 80028b8:	0800f3e8 	.word	0x0800f3e8
 80028bc:	2000d504 	.word	0x2000d504
 80028c0:	e000edfc 	.word	0xe000edfc
 80028c4:	e0001000 	.word	0xe0001000
 80028c8:	2000d0e2 	.word	0x2000d0e2
 80028cc:	2000d0e8 	.word	0x2000d0e8
 80028d0:	2000d508 	.word	0x2000d508
 80028d4:	2000d318 	.word	0x2000d318
 80028d8:	20013fe0 	.word	0x20013fe0
 80028dc:	20013ec0 	.word	0x20013ec0
 80028e0:	40020800 	.word	0x40020800
 80028e4:	20013f08 	.word	0x20013f08

080028e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80028e8:	b580      	push	{r7, lr}
 80028ea:	b094      	sub	sp, #80	@ 0x50
 80028ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80028ee:	f107 0320 	add.w	r3, r7, #32
 80028f2:	2230      	movs	r2, #48	@ 0x30
 80028f4:	2100      	movs	r1, #0
 80028f6:	4618      	mov	r0, r3
 80028f8:	f009 fa20 	bl	800bd3c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80028fc:	f107 030c 	add.w	r3, r7, #12
 8002900:	2200      	movs	r2, #0
 8002902:	601a      	str	r2, [r3, #0]
 8002904:	605a      	str	r2, [r3, #4]
 8002906:	609a      	str	r2, [r3, #8]
 8002908:	60da      	str	r2, [r3, #12]
 800290a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800290c:	2300      	movs	r3, #0
 800290e:	60bb      	str	r3, [r7, #8]
 8002910:	4b27      	ldr	r3, [pc, #156]	@ (80029b0 <SystemClock_Config+0xc8>)
 8002912:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002914:	4a26      	ldr	r2, [pc, #152]	@ (80029b0 <SystemClock_Config+0xc8>)
 8002916:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800291a:	6413      	str	r3, [r2, #64]	@ 0x40
 800291c:	4b24      	ldr	r3, [pc, #144]	@ (80029b0 <SystemClock_Config+0xc8>)
 800291e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002920:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002924:	60bb      	str	r3, [r7, #8]
 8002926:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002928:	2300      	movs	r3, #0
 800292a:	607b      	str	r3, [r7, #4]
 800292c:	4b21      	ldr	r3, [pc, #132]	@ (80029b4 <SystemClock_Config+0xcc>)
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	4a20      	ldr	r2, [pc, #128]	@ (80029b4 <SystemClock_Config+0xcc>)
 8002932:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002936:	6013      	str	r3, [r2, #0]
 8002938:	4b1e      	ldr	r3, [pc, #120]	@ (80029b4 <SystemClock_Config+0xcc>)
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8002940:	607b      	str	r3, [r7, #4]
 8002942:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002944:	2302      	movs	r3, #2
 8002946:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002948:	2301      	movs	r3, #1
 800294a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800294c:	2310      	movs	r3, #16
 800294e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002950:	2302      	movs	r3, #2
 8002952:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002954:	2300      	movs	r3, #0
 8002956:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8002958:	2308      	movs	r3, #8
 800295a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 800295c:	2364      	movs	r3, #100	@ 0x64
 800295e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002960:	2302      	movs	r3, #2
 8002962:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8002964:	2307      	movs	r3, #7
 8002966:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002968:	f107 0320 	add.w	r3, r7, #32
 800296c:	4618      	mov	r0, r3
 800296e:	f004 ff67 	bl	8007840 <HAL_RCC_OscConfig>
 8002972:	4603      	mov	r3, r0
 8002974:	2b00      	cmp	r3, #0
 8002976:	d001      	beq.n	800297c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8002978:	f000 f83e 	bl	80029f8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800297c:	230f      	movs	r3, #15
 800297e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002980:	2302      	movs	r3, #2
 8002982:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002984:	2300      	movs	r3, #0
 8002986:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002988:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800298c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800298e:	2300      	movs	r3, #0
 8002990:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8002992:	f107 030c 	add.w	r3, r7, #12
 8002996:	2103      	movs	r1, #3
 8002998:	4618      	mov	r0, r3
 800299a:	f005 f9c9 	bl	8007d30 <HAL_RCC_ClockConfig>
 800299e:	4603      	mov	r3, r0
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d001      	beq.n	80029a8 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80029a4:	f000 f828 	bl	80029f8 <Error_Handler>
  }
}
 80029a8:	bf00      	nop
 80029aa:	3750      	adds	r7, #80	@ 0x50
 80029ac:	46bd      	mov	sp, r7
 80029ae:	bd80      	pop	{r7, pc}
 80029b0:	40023800 	.word	0x40023800
 80029b4:	40007000 	.word	0x40007000

080029b8 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 80029b8:	b580      	push	{r7, lr}
 80029ba:	b086      	sub	sp, #24
 80029bc:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80029be:	463b      	mov	r3, r7
 80029c0:	2200      	movs	r2, #0
 80029c2:	601a      	str	r2, [r3, #0]
 80029c4:	605a      	str	r2, [r3, #4]
 80029c6:	609a      	str	r2, [r3, #8]
 80029c8:	60da      	str	r2, [r3, #12]
 80029ca:	611a      	str	r2, [r3, #16]
 80029cc:	615a      	str	r2, [r3, #20]

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 80029ce:	2301      	movs	r3, #1
 80029d0:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 80029d2:	23c0      	movs	r3, #192	@ 0xc0
 80029d4:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLLI2S.PLLI2SM = 16;
 80029d6:	2310      	movs	r3, #16
 80029d8:	607b      	str	r3, [r7, #4]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 80029da:	2302      	movs	r3, #2
 80029dc:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80029de:	463b      	mov	r3, r7
 80029e0:	4618      	mov	r0, r3
 80029e2:	f005 fbc5 	bl	8008170 <HAL_RCCEx_PeriphCLKConfig>
 80029e6:	4603      	mov	r3, r0
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d001      	beq.n	80029f0 <PeriphCommonClock_Config+0x38>
  {
    Error_Handler();
 80029ec:	f000 f804 	bl	80029f8 <Error_Handler>
  }
}
 80029f0:	bf00      	nop
 80029f2:	3718      	adds	r7, #24
 80029f4:	46bd      	mov	sp, r7
 80029f6:	bd80      	pop	{r7, pc}

080029f8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80029f8:	b480      	push	{r7}
 80029fa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80029fc:	b672      	cpsid	i
}
 80029fe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002a00:	bf00      	nop
 8002a02:	e7fd      	b.n	8002a00 <Error_Handler+0x8>

08002a04 <InitOscState>:
extern TIM_HandleTypeDef htim3;
extern TIM_HandleTypeDef htim4;
extern TIM_HandleTypeDef htim10;

void InitOscState(void)
{
 8002a04:	b580      	push	{r7, lr}
 8002a06:	b0c6      	sub	sp, #280	@ 0x118
 8002a08:	af04      	add	r7, sp, #16

	  frames_ticks = HAL_GetTick();
 8002a0a:	f002 fdcd 	bl	80055a8 <HAL_GetTick>
 8002a0e:	4603      	mov	r3, r0
 8002a10:	4a73      	ldr	r2, [pc, #460]	@ (8002be0 <InitOscState+0x1dc>)
 8002a12:	6013      	str	r3, [r2, #0]

	  for (uint16_t i = 0; i < 280; i++) {
 8002a14:	2300      	movs	r3, #0
 8002a16:	f8a7 3106 	strh.w	r3, [r7, #262]	@ 0x106
 8002a1a:	e01e      	b.n	8002a5a <InitOscState+0x56>
		  pixel_dirty0[i][0] = 0;
 8002a1c:	f8b7 3106 	ldrh.w	r3, [r7, #262]	@ 0x106
 8002a20:	4a70      	ldr	r2, [pc, #448]	@ (8002be4 <InitOscState+0x1e0>)
 8002a22:	2100      	movs	r1, #0
 8002a24:	f822 1023 	strh.w	r1, [r2, r3, lsl #2]
		  pixel_dirty0[i][1] = 0;
 8002a28:	f8b7 3106 	ldrh.w	r3, [r7, #262]	@ 0x106
 8002a2c:	4a6d      	ldr	r2, [pc, #436]	@ (8002be4 <InitOscState+0x1e0>)
 8002a2e:	009b      	lsls	r3, r3, #2
 8002a30:	4413      	add	r3, r2
 8002a32:	2200      	movs	r2, #0
 8002a34:	805a      	strh	r2, [r3, #2]
		  pixel_dirty1[i][0] = 0;
 8002a36:	f8b7 3106 	ldrh.w	r3, [r7, #262]	@ 0x106
 8002a3a:	4a6b      	ldr	r2, [pc, #428]	@ (8002be8 <InitOscState+0x1e4>)
 8002a3c:	2100      	movs	r1, #0
 8002a3e:	f822 1023 	strh.w	r1, [r2, r3, lsl #2]
		  pixel_dirty1[i][1] = 0;
 8002a42:	f8b7 3106 	ldrh.w	r3, [r7, #262]	@ 0x106
 8002a46:	4a68      	ldr	r2, [pc, #416]	@ (8002be8 <InitOscState+0x1e4>)
 8002a48:	009b      	lsls	r3, r3, #2
 8002a4a:	4413      	add	r3, r2
 8002a4c:	2200      	movs	r2, #0
 8002a4e:	805a      	strh	r2, [r3, #2]
	  for (uint16_t i = 0; i < 280; i++) {
 8002a50:	f8b7 3106 	ldrh.w	r3, [r7, #262]	@ 0x106
 8002a54:	3301      	adds	r3, #1
 8002a56:	f8a7 3106 	strh.w	r3, [r7, #262]	@ 0x106
 8002a5a:	f8b7 3106 	ldrh.w	r3, [r7, #262]	@ 0x106
 8002a5e:	f5b3 7f8c 	cmp.w	r3, #280	@ 0x118
 8002a62:	d3db      	bcc.n	8002a1c <InitOscState+0x18>
	  }

	  // Display init
	   display.spi             = &hspi5;
 8002a64:	4b61      	ldr	r3, [pc, #388]	@ (8002bec <InitOscState+0x1e8>)
 8002a66:	4a62      	ldr	r2, [pc, #392]	@ (8002bf0 <InitOscState+0x1ec>)
 8002a68:	601a      	str	r2, [r3, #0]
	   display.cs_gpio_port    = ILI9341_CS_GPIO_Port;
 8002a6a:	4b60      	ldr	r3, [pc, #384]	@ (8002bec <InitOscState+0x1e8>)
 8002a6c:	4a61      	ldr	r2, [pc, #388]	@ (8002bf4 <InitOscState+0x1f0>)
 8002a6e:	605a      	str	r2, [r3, #4]
	   display.dc_gpio_port    = ILI9341_DC_GPIO_Port;
 8002a70:	4b5e      	ldr	r3, [pc, #376]	@ (8002bec <InitOscState+0x1e8>)
 8002a72:	4a61      	ldr	r2, [pc, #388]	@ (8002bf8 <InitOscState+0x1f4>)
 8002a74:	609a      	str	r2, [r3, #8]
	   display.reset_gpio_port = ILI9341_RESET_GPIO_Port;
 8002a76:	4b5d      	ldr	r3, [pc, #372]	@ (8002bec <InitOscState+0x1e8>)
 8002a78:	4a5f      	ldr	r2, [pc, #380]	@ (8002bf8 <InitOscState+0x1f4>)
 8002a7a:	60da      	str	r2, [r3, #12]
	   display.cs_pin          = ILI9341_CS_Pin;
 8002a7c:	4b5b      	ldr	r3, [pc, #364]	@ (8002bec <InitOscState+0x1e8>)
 8002a7e:	2202      	movs	r2, #2
 8002a80:	821a      	strh	r2, [r3, #16]
	   display.dc_pin          = ILI9341_DC_Pin;
 8002a82:	4b5a      	ldr	r3, [pc, #360]	@ (8002bec <InitOscState+0x1e8>)
 8002a84:	2201      	movs	r2, #1
 8002a86:	825a      	strh	r2, [r3, #18]
	   display.reset_pin       = ILI9341_RESET_Pin;
 8002a88:	4b58      	ldr	r3, [pc, #352]	@ (8002bec <InitOscState+0x1e8>)
 8002a8a:	2202      	movs	r2, #2
 8002a8c:	829a      	strh	r2, [r3, #20]
	   display.width           = 320;
 8002a8e:	4b57      	ldr	r3, [pc, #348]	@ (8002bec <InitOscState+0x1e8>)
 8002a90:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8002a94:	82da      	strh	r2, [r3, #22]
	   display.height          = 240;
 8002a96:	4b55      	ldr	r3, [pc, #340]	@ (8002bec <InitOscState+0x1e8>)
 8002a98:	22f0      	movs	r2, #240	@ 0xf0
 8002a9a:	831a      	strh	r2, [r3, #24]
	   display.orientation     = ILI9341_ORIENTATION_ROTATE_RIGHT;
 8002a9c:	4b53      	ldr	r3, [pc, #332]	@ (8002bec <InitOscState+0x1e8>)
 8002a9e:	22e8      	movs	r2, #232	@ 0xe8
 8002aa0:	769a      	strb	r2, [r3, #26]

	   ILI9341_UNSELECT(&display);
 8002aa2:	4b52      	ldr	r3, [pc, #328]	@ (8002bec <InitOscState+0x1e8>)
 8002aa4:	8a1a      	ldrh	r2, [r3, #16]
 8002aa6:	4b51      	ldr	r3, [pc, #324]	@ (8002bec <InitOscState+0x1e8>)
 8002aa8:	685b      	ldr	r3, [r3, #4]
 8002aaa:	619a      	str	r2, [r3, #24]
	   ILI9341_Init(&display);
 8002aac:	484f      	ldr	r0, [pc, #316]	@ (8002bec <InitOscState+0x1e8>)
 8002aae:	f7fe ffb3 	bl	8001a18 <ILI9341_Init>

		  // Local vars
		  char string[255];

	  // Dispaly freq. (for debug)
	  ILI9341_FillScreen(&display, ILI9341_BLACK);
 8002ab2:	2100      	movs	r1, #0
 8002ab4:	484d      	ldr	r0, [pc, #308]	@ (8002bec <InitOscState+0x1e8>)
 8002ab6:	f7ff f9fc 	bl	8001eb2 <ILI9341_FillScreen>

	  snprintf(string, 255, "Oscilloscope");
 8002aba:	1d3b      	adds	r3, r7, #4
 8002abc:	4a4f      	ldr	r2, [pc, #316]	@ (8002bfc <InitOscState+0x1f8>)
 8002abe:	21ff      	movs	r1, #255	@ 0xff
 8002ac0:	4618      	mov	r0, r3
 8002ac2:	f009 f80b 	bl	800badc <sniprintf>
	  ILI9341_WriteString(&display, 0, 18 * 0, string, Font_11x18, ILI9341_BLACK, ILI9341_WHITE);
 8002ac6:	1d3b      	adds	r3, r7, #4
 8002ac8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002acc:	9203      	str	r2, [sp, #12]
 8002ace:	2200      	movs	r2, #0
 8002ad0:	9202      	str	r2, [sp, #8]
 8002ad2:	494b      	ldr	r1, [pc, #300]	@ (8002c00 <InitOscState+0x1fc>)
 8002ad4:	466a      	mov	r2, sp
 8002ad6:	c903      	ldmia	r1, {r0, r1}
 8002ad8:	e882 0003 	stmia.w	r2, {r0, r1}
 8002adc:	2200      	movs	r2, #0
 8002ade:	2100      	movs	r1, #0
 8002ae0:	4842      	ldr	r0, [pc, #264]	@ (8002bec <InitOscState+0x1e8>)
 8002ae2:	f7ff fb30 	bl	8002146 <ILI9341_WriteString>

	  snprintf(string, 255, "SYCLK = %ldMHz", HAL_RCC_GetSysClockFreq()/1000000);
 8002ae6:	f005 fa09 	bl	8007efc <HAL_RCC_GetSysClockFreq>
 8002aea:	4603      	mov	r3, r0
 8002aec:	4a45      	ldr	r2, [pc, #276]	@ (8002c04 <InitOscState+0x200>)
 8002aee:	fba2 2303 	umull	r2, r3, r2, r3
 8002af2:	0c9b      	lsrs	r3, r3, #18
 8002af4:	1d38      	adds	r0, r7, #4
 8002af6:	4a44      	ldr	r2, [pc, #272]	@ (8002c08 <InitOscState+0x204>)
 8002af8:	21ff      	movs	r1, #255	@ 0xff
 8002afa:	f008 ffef 	bl	800badc <sniprintf>
	  ILI9341_WriteString(&display, 0, 18 * 1, string, Font_11x18, ILI9341_BLACK, ILI9341_WHITE);
 8002afe:	1d3b      	adds	r3, r7, #4
 8002b00:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002b04:	9203      	str	r2, [sp, #12]
 8002b06:	2200      	movs	r2, #0
 8002b08:	9202      	str	r2, [sp, #8]
 8002b0a:	493d      	ldr	r1, [pc, #244]	@ (8002c00 <InitOscState+0x1fc>)
 8002b0c:	466a      	mov	r2, sp
 8002b0e:	c903      	ldmia	r1, {r0, r1}
 8002b10:	e882 0003 	stmia.w	r2, {r0, r1}
 8002b14:	2212      	movs	r2, #18
 8002b16:	2100      	movs	r1, #0
 8002b18:	4834      	ldr	r0, [pc, #208]	@ (8002bec <InitOscState+0x1e8>)
 8002b1a:	f7ff fb14 	bl	8002146 <ILI9341_WriteString>

	  snprintf(string, 255, "HCLK  = %ldMHz", HAL_RCC_GetHCLKFreq()/1000000);
 8002b1e:	f005 faf3 	bl	8008108 <HAL_RCC_GetHCLKFreq>
 8002b22:	4603      	mov	r3, r0
 8002b24:	4a37      	ldr	r2, [pc, #220]	@ (8002c04 <InitOscState+0x200>)
 8002b26:	fba2 2303 	umull	r2, r3, r2, r3
 8002b2a:	0c9b      	lsrs	r3, r3, #18
 8002b2c:	1d38      	adds	r0, r7, #4
 8002b2e:	4a37      	ldr	r2, [pc, #220]	@ (8002c0c <InitOscState+0x208>)
 8002b30:	21ff      	movs	r1, #255	@ 0xff
 8002b32:	f008 ffd3 	bl	800badc <sniprintf>
	  ILI9341_WriteString(&display, 0, 18 * 2, string, Font_11x18, ILI9341_BLACK, ILI9341_WHITE);
 8002b36:	1d3b      	adds	r3, r7, #4
 8002b38:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002b3c:	9203      	str	r2, [sp, #12]
 8002b3e:	2200      	movs	r2, #0
 8002b40:	9202      	str	r2, [sp, #8]
 8002b42:	492f      	ldr	r1, [pc, #188]	@ (8002c00 <InitOscState+0x1fc>)
 8002b44:	466a      	mov	r2, sp
 8002b46:	c903      	ldmia	r1, {r0, r1}
 8002b48:	e882 0003 	stmia.w	r2, {r0, r1}
 8002b4c:	2224      	movs	r2, #36	@ 0x24
 8002b4e:	2100      	movs	r1, #0
 8002b50:	4826      	ldr	r0, [pc, #152]	@ (8002bec <InitOscState+0x1e8>)
 8002b52:	f7ff faf8 	bl	8002146 <ILI9341_WriteString>

	  snprintf(string, 255, "APB1  = %ldMHz", HAL_RCC_GetPCLK1Freq()/1000000);
 8002b56:	f005 fae3 	bl	8008120 <HAL_RCC_GetPCLK1Freq>
 8002b5a:	4603      	mov	r3, r0
 8002b5c:	4a29      	ldr	r2, [pc, #164]	@ (8002c04 <InitOscState+0x200>)
 8002b5e:	fba2 2303 	umull	r2, r3, r2, r3
 8002b62:	0c9b      	lsrs	r3, r3, #18
 8002b64:	1d38      	adds	r0, r7, #4
 8002b66:	4a2a      	ldr	r2, [pc, #168]	@ (8002c10 <InitOscState+0x20c>)
 8002b68:	21ff      	movs	r1, #255	@ 0xff
 8002b6a:	f008 ffb7 	bl	800badc <sniprintf>
	  ILI9341_WriteString(&display, 0, 18 * 3, string, Font_11x18, ILI9341_BLACK, ILI9341_WHITE);
 8002b6e:	1d3b      	adds	r3, r7, #4
 8002b70:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002b74:	9203      	str	r2, [sp, #12]
 8002b76:	2200      	movs	r2, #0
 8002b78:	9202      	str	r2, [sp, #8]
 8002b7a:	4921      	ldr	r1, [pc, #132]	@ (8002c00 <InitOscState+0x1fc>)
 8002b7c:	466a      	mov	r2, sp
 8002b7e:	c903      	ldmia	r1, {r0, r1}
 8002b80:	e882 0003 	stmia.w	r2, {r0, r1}
 8002b84:	2236      	movs	r2, #54	@ 0x36
 8002b86:	2100      	movs	r1, #0
 8002b88:	4818      	ldr	r0, [pc, #96]	@ (8002bec <InitOscState+0x1e8>)
 8002b8a:	f7ff fadc 	bl	8002146 <ILI9341_WriteString>

	  snprintf(string, 255, "APB2  = %ldMHz", HAL_RCC_GetPCLK2Freq()/1000000);
 8002b8e:	f005 fadb 	bl	8008148 <HAL_RCC_GetPCLK2Freq>
 8002b92:	4603      	mov	r3, r0
 8002b94:	4a1b      	ldr	r2, [pc, #108]	@ (8002c04 <InitOscState+0x200>)
 8002b96:	fba2 2303 	umull	r2, r3, r2, r3
 8002b9a:	0c9b      	lsrs	r3, r3, #18
 8002b9c:	1d38      	adds	r0, r7, #4
 8002b9e:	4a1d      	ldr	r2, [pc, #116]	@ (8002c14 <InitOscState+0x210>)
 8002ba0:	21ff      	movs	r1, #255	@ 0xff
 8002ba2:	f008 ff9b 	bl	800badc <sniprintf>
	  ILI9341_WriteString(&display, 0, 18 * 4, string, Font_11x18, ILI9341_BLACK, ILI9341_WHITE);
 8002ba6:	1d3b      	adds	r3, r7, #4
 8002ba8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002bac:	9203      	str	r2, [sp, #12]
 8002bae:	2200      	movs	r2, #0
 8002bb0:	9202      	str	r2, [sp, #8]
 8002bb2:	4913      	ldr	r1, [pc, #76]	@ (8002c00 <InitOscState+0x1fc>)
 8002bb4:	466a      	mov	r2, sp
 8002bb6:	c903      	ldmia	r1, {r0, r1}
 8002bb8:	e882 0003 	stmia.w	r2, {r0, r1}
 8002bbc:	2248      	movs	r2, #72	@ 0x48
 8002bbe:	2100      	movs	r1, #0
 8002bc0:	480a      	ldr	r0, [pc, #40]	@ (8002bec <InitOscState+0x1e8>)
 8002bc2:	f7ff fac0 	bl	8002146 <ILI9341_WriteString>

	  HAL_Delay(1000);
 8002bc6:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002bca:	f002 fcf9 	bl	80055c0 <HAL_Delay>
	  ILI9341_FillScreen(&display, ILI9341_BLACK);
 8002bce:	2100      	movs	r1, #0
 8002bd0:	4806      	ldr	r0, [pc, #24]	@ (8002bec <InitOscState+0x1e8>)
 8002bd2:	f7ff f96e 	bl	8001eb2 <ILI9341_FillScreen>
}
 8002bd6:	bf00      	nop
 8002bd8:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 8002bdc:	46bd      	mov	sp, r7
 8002bde:	bd80      	pop	{r7, pc}
 8002be0:	2001353c 	.word	0x2001353c
 8002be4:	20013540 	.word	0x20013540
 8002be8:	200139a0 	.word	0x200139a0
 8002bec:	2000d4b8 	.word	0x2000d4b8
 8002bf0:	20013e64 	.word	0x20013e64
 8002bf4:	40020400 	.word	0x40020400
 8002bf8:	40020800 	.word	0x40020800
 8002bfc:	0800f40c 	.word	0x0800f40c
 8002c00:	20000008 	.word	0x20000008
 8002c04:	431bde83 	.word	0x431bde83
 8002c08:	0800f41c 	.word	0x0800f41c
 8002c0c:	0800f42c 	.word	0x0800f42c
 8002c10:	0800f43c 	.word	0x0800f43c
 8002c14:	0800f44c 	.word	0x0800f44c

08002c18 <drawAxis>:


static void drawAxis(ILI9341TypeDef *display)
{
 8002c18:	b580      	push	{r7, lr}
 8002c1a:	b088      	sub	sp, #32
 8002c1c:	af02      	add	r7, sp, #8
 8002c1e:	6078      	str	r0, [r7, #4]
	for (uint16_t i = 0; i < 9; i++) {
 8002c20:	2300      	movs	r3, #0
 8002c22:	82fb      	strh	r3, [r7, #22]
 8002c24:	e034      	b.n	8002c90 <drawAxis+0x78>
		uint16_t y = 20 + 25 * i;
 8002c26:	8afb      	ldrh	r3, [r7, #22]
 8002c28:	461a      	mov	r2, r3
 8002c2a:	0092      	lsls	r2, r2, #2
 8002c2c:	4413      	add	r3, r2
 8002c2e:	461a      	mov	r2, r3
 8002c30:	0091      	lsls	r1, r2, #2
 8002c32:	461a      	mov	r2, r3
 8002c34:	460b      	mov	r3, r1
 8002c36:	4413      	add	r3, r2
 8002c38:	b29b      	uxth	r3, r3
 8002c3a:	3314      	adds	r3, #20
 8002c3c:	81bb      	strh	r3, [r7, #12]

		if (i == 0 || i == 8) {
 8002c3e:	8afb      	ldrh	r3, [r7, #22]
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d002      	beq.n	8002c4a <drawAxis+0x32>
 8002c44:	8afb      	ldrh	r3, [r7, #22]
 8002c46:	2b08      	cmp	r3, #8
 8002c48:	d10c      	bne.n	8002c64 <drawAxis+0x4c>
			ILI9341_FillRectangle(display, 20, y, 276, 1, ILI9341_WHITE);
 8002c4a:	89ba      	ldrh	r2, [r7, #12]
 8002c4c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002c50:	9301      	str	r3, [sp, #4]
 8002c52:	2301      	movs	r3, #1
 8002c54:	9300      	str	r3, [sp, #0]
 8002c56:	f44f 738a 	mov.w	r3, #276	@ 0x114
 8002c5a:	2114      	movs	r1, #20
 8002c5c:	6878      	ldr	r0, [r7, #4]
 8002c5e:	f7ff f95a 	bl	8001f16 <ILI9341_FillRectangle>
			continue;
 8002c62:	e012      	b.n	8002c8a <drawAxis+0x72>
		}

		for (uint16_t j = 0; j < 276; j += 2)
 8002c64:	2300      	movs	r3, #0
 8002c66:	82bb      	strh	r3, [r7, #20]
 8002c68:	e00b      	b.n	8002c82 <drawAxis+0x6a>
			ILI9341_DrawPixel(display, 20 + j, y, ILI9341_GRAY);
 8002c6a:	8abb      	ldrh	r3, [r7, #20]
 8002c6c:	3314      	adds	r3, #20
 8002c6e:	b299      	uxth	r1, r3
 8002c70:	89ba      	ldrh	r2, [r7, #12]
 8002c72:	f245 238a 	movw	r3, #21130	@ 0x528a
 8002c76:	6878      	ldr	r0, [r7, #4]
 8002c78:	f7ff f842 	bl	8001d00 <ILI9341_DrawPixel>
		for (uint16_t j = 0; j < 276; j += 2)
 8002c7c:	8abb      	ldrh	r3, [r7, #20]
 8002c7e:	3302      	adds	r3, #2
 8002c80:	82bb      	strh	r3, [r7, #20]
 8002c82:	8abb      	ldrh	r3, [r7, #20]
 8002c84:	f5b3 7f8a 	cmp.w	r3, #276	@ 0x114
 8002c88:	d3ef      	bcc.n	8002c6a <drawAxis+0x52>
	for (uint16_t i = 0; i < 9; i++) {
 8002c8a:	8afb      	ldrh	r3, [r7, #22]
 8002c8c:	3301      	adds	r3, #1
 8002c8e:	82fb      	strh	r3, [r7, #22]
 8002c90:	8afb      	ldrh	r3, [r7, #22]
 8002c92:	2b08      	cmp	r3, #8
 8002c94:	d9c7      	bls.n	8002c26 <drawAxis+0xe>
	}

	for (uint16_t i = 0; i < 12; i++) {
 8002c96:	2300      	movs	r3, #0
 8002c98:	827b      	strh	r3, [r7, #18]
 8002c9a:	e032      	b.n	8002d02 <drawAxis+0xea>
		uint16_t x = 20 + 25 * i;
 8002c9c:	8a7b      	ldrh	r3, [r7, #18]
 8002c9e:	461a      	mov	r2, r3
 8002ca0:	0092      	lsls	r2, r2, #2
 8002ca2:	4413      	add	r3, r2
 8002ca4:	461a      	mov	r2, r3
 8002ca6:	0091      	lsls	r1, r2, #2
 8002ca8:	461a      	mov	r2, r3
 8002caa:	460b      	mov	r3, r1
 8002cac:	4413      	add	r3, r2
 8002cae:	b29b      	uxth	r3, r3
 8002cb0:	3314      	adds	r3, #20
 8002cb2:	81fb      	strh	r3, [r7, #14]

		if (i == 0 || i == 11) {
 8002cb4:	8a7b      	ldrh	r3, [r7, #18]
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d002      	beq.n	8002cc0 <drawAxis+0xa8>
 8002cba:	8a7b      	ldrh	r3, [r7, #18]
 8002cbc:	2b0b      	cmp	r3, #11
 8002cbe:	d10b      	bne.n	8002cd8 <drawAxis+0xc0>
			ILI9341_FillRectangle(display, x, 20, 1, 200, ILI9341_WHITE);
 8002cc0:	89f9      	ldrh	r1, [r7, #14]
 8002cc2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002cc6:	9301      	str	r3, [sp, #4]
 8002cc8:	23c8      	movs	r3, #200	@ 0xc8
 8002cca:	9300      	str	r3, [sp, #0]
 8002ccc:	2301      	movs	r3, #1
 8002cce:	2214      	movs	r2, #20
 8002cd0:	6878      	ldr	r0, [r7, #4]
 8002cd2:	f7ff f920 	bl	8001f16 <ILI9341_FillRectangle>
			continue;
 8002cd6:	e011      	b.n	8002cfc <drawAxis+0xe4>
		}

		for (uint16_t j = 0; j < 200; j += 2)
 8002cd8:	2300      	movs	r3, #0
 8002cda:	823b      	strh	r3, [r7, #16]
 8002cdc:	e00b      	b.n	8002cf6 <drawAxis+0xde>
			ILI9341_DrawPixel(display, x, 20 + j, ILI9341_GRAY);
 8002cde:	8a3b      	ldrh	r3, [r7, #16]
 8002ce0:	3314      	adds	r3, #20
 8002ce2:	b29a      	uxth	r2, r3
 8002ce4:	89f9      	ldrh	r1, [r7, #14]
 8002ce6:	f245 238a 	movw	r3, #21130	@ 0x528a
 8002cea:	6878      	ldr	r0, [r7, #4]
 8002cec:	f7ff f808 	bl	8001d00 <ILI9341_DrawPixel>
		for (uint16_t j = 0; j < 200; j += 2)
 8002cf0:	8a3b      	ldrh	r3, [r7, #16]
 8002cf2:	3302      	adds	r3, #2
 8002cf4:	823b      	strh	r3, [r7, #16]
 8002cf6:	8a3b      	ldrh	r3, [r7, #16]
 8002cf8:	2bc7      	cmp	r3, #199	@ 0xc7
 8002cfa:	d9f0      	bls.n	8002cde <drawAxis+0xc6>
	for (uint16_t i = 0; i < 12; i++) {
 8002cfc:	8a7b      	ldrh	r3, [r7, #18]
 8002cfe:	3301      	adds	r3, #1
 8002d00:	827b      	strh	r3, [r7, #18]
 8002d02:	8a7b      	ldrh	r3, [r7, #18]
 8002d04:	2b0b      	cmp	r3, #11
 8002d06:	d9c9      	bls.n	8002c9c <drawAxis+0x84>
	}
}
 8002d08:	bf00      	nop
 8002d0a:	bf00      	nop
 8002d0c:	3718      	adds	r7, #24
 8002d0e:	46bd      	mov	sp, r7
 8002d10:	bd80      	pop	{r7, pc}

08002d12 <clearCursor>:

static void clearCursor(ILI9341TypeDef *display, uint16_t pos)
{
 8002d12:	b580      	push	{r7, lr}
 8002d14:	b084      	sub	sp, #16
 8002d16:	af02      	add	r7, sp, #8
 8002d18:	6078      	str	r0, [r7, #4]
 8002d1a:	460b      	mov	r3, r1
 8002d1c:	807b      	strh	r3, [r7, #2]
	ILI9341_FillRectangle(display, 0, pos - 6, 20, 11, ILI9341_BLACK);
 8002d1e:	887b      	ldrh	r3, [r7, #2]
 8002d20:	3b06      	subs	r3, #6
 8002d22:	b29a      	uxth	r2, r3
 8002d24:	2300      	movs	r3, #0
 8002d26:	9301      	str	r3, [sp, #4]
 8002d28:	230b      	movs	r3, #11
 8002d2a:	9300      	str	r3, [sp, #0]
 8002d2c:	2314      	movs	r3, #20
 8002d2e:	2100      	movs	r1, #0
 8002d30:	6878      	ldr	r0, [r7, #4]
 8002d32:	f7ff f8f0 	bl	8001f16 <ILI9341_FillRectangle>
}
 8002d36:	bf00      	nop
 8002d38:	3708      	adds	r7, #8
 8002d3a:	46bd      	mov	sp, r7
 8002d3c:	bd80      	pop	{r7, pc}

08002d3e <clearTrigger>:

static void clearTrigger(ILI9341TypeDef *display, uint16_t pos)
{
 8002d3e:	b580      	push	{r7, lr}
 8002d40:	b084      	sub	sp, #16
 8002d42:	af02      	add	r7, sp, #8
 8002d44:	6078      	str	r0, [r7, #4]
 8002d46:	460b      	mov	r3, r1
 8002d48:	807b      	strh	r3, [r7, #2]
	ILI9341_FillRectangle(display, 296, pos - 6, 20, 11, ILI9341_BLACK);
 8002d4a:	887b      	ldrh	r3, [r7, #2]
 8002d4c:	3b06      	subs	r3, #6
 8002d4e:	b29a      	uxth	r2, r3
 8002d50:	2300      	movs	r3, #0
 8002d52:	9301      	str	r3, [sp, #4]
 8002d54:	230b      	movs	r3, #11
 8002d56:	9300      	str	r3, [sp, #0]
 8002d58:	2314      	movs	r3, #20
 8002d5a:	f44f 7194 	mov.w	r1, #296	@ 0x128
 8002d5e:	6878      	ldr	r0, [r7, #4]
 8002d60:	f7ff f8d9 	bl	8001f16 <ILI9341_FillRectangle>
}
 8002d64:	bf00      	nop
 8002d66:	3708      	adds	r7, #8
 8002d68:	46bd      	mov	sp, r7
 8002d6a:	bd80      	pop	{r7, pc}

08002d6c <drawCursor>:

static void drawCursor(ILI9341TypeDef *display, uint16_t pos, char *name, uint16_t color)
{
 8002d6c:	b580      	push	{r7, lr}
 8002d6e:	b08a      	sub	sp, #40	@ 0x28
 8002d70:	af04      	add	r7, sp, #16
 8002d72:	60f8      	str	r0, [r7, #12]
 8002d74:	607a      	str	r2, [r7, #4]
 8002d76:	461a      	mov	r2, r3
 8002d78:	460b      	mov	r3, r1
 8002d7a:	817b      	strh	r3, [r7, #10]
 8002d7c:	4613      	mov	r3, r2
 8002d7e:	813b      	strh	r3, [r7, #8]
	ILI9341_FillRectangle(display, 0, pos - 6, 7 * 2, 1, color);
 8002d80:	897b      	ldrh	r3, [r7, #10]
 8002d82:	3b06      	subs	r3, #6
 8002d84:	b29a      	uxth	r2, r3
 8002d86:	893b      	ldrh	r3, [r7, #8]
 8002d88:	9301      	str	r3, [sp, #4]
 8002d8a:	2301      	movs	r3, #1
 8002d8c:	9300      	str	r3, [sp, #0]
 8002d8e:	230e      	movs	r3, #14
 8002d90:	2100      	movs	r1, #0
 8002d92:	68f8      	ldr	r0, [r7, #12]
 8002d94:	f7ff f8bf 	bl	8001f16 <ILI9341_FillRectangle>
	ILI9341_WriteString(display, 0, pos - 5, name, Font_7x10, ILI9341_BLACK, color);
 8002d98:	897b      	ldrh	r3, [r7, #10]
 8002d9a:	3b05      	subs	r3, #5
 8002d9c:	b29a      	uxth	r2, r3
 8002d9e:	893b      	ldrh	r3, [r7, #8]
 8002da0:	9303      	str	r3, [sp, #12]
 8002da2:	2300      	movs	r3, #0
 8002da4:	9302      	str	r3, [sp, #8]
 8002da6:	4919      	ldr	r1, [pc, #100]	@ (8002e0c <drawCursor+0xa0>)
 8002da8:	466b      	mov	r3, sp
 8002daa:	c903      	ldmia	r1, {r0, r1}
 8002dac:	e883 0003 	stmia.w	r3, {r0, r1}
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	2100      	movs	r1, #0
 8002db4:	68f8      	ldr	r0, [r7, #12]
 8002db6:	f7ff f9c6 	bl	8002146 <ILI9341_WriteString>

	for (uint8_t i = 0; i < 6; i++) {
 8002dba:	2300      	movs	r3, #0
 8002dbc:	75fb      	strb	r3, [r7, #23]
 8002dbe:	e01d      	b.n	8002dfc <drawCursor+0x90>
		for (uint8_t j = i; j < 11 - i; j++)
 8002dc0:	7dfb      	ldrb	r3, [r7, #23]
 8002dc2:	75bb      	strb	r3, [r7, #22]
 8002dc4:	e011      	b.n	8002dea <drawCursor+0x7e>
			ILI9341_DrawPixel(display, 14 + i, pos - 6 + j, color);
 8002dc6:	7dfb      	ldrb	r3, [r7, #23]
 8002dc8:	b29b      	uxth	r3, r3
 8002dca:	330e      	adds	r3, #14
 8002dcc:	b299      	uxth	r1, r3
 8002dce:	7dbb      	ldrb	r3, [r7, #22]
 8002dd0:	b29a      	uxth	r2, r3
 8002dd2:	897b      	ldrh	r3, [r7, #10]
 8002dd4:	4413      	add	r3, r2
 8002dd6:	b29b      	uxth	r3, r3
 8002dd8:	3b06      	subs	r3, #6
 8002dda:	b29a      	uxth	r2, r3
 8002ddc:	893b      	ldrh	r3, [r7, #8]
 8002dde:	68f8      	ldr	r0, [r7, #12]
 8002de0:	f7fe ff8e 	bl	8001d00 <ILI9341_DrawPixel>
		for (uint8_t j = i; j < 11 - i; j++)
 8002de4:	7dbb      	ldrb	r3, [r7, #22]
 8002de6:	3301      	adds	r3, #1
 8002de8:	75bb      	strb	r3, [r7, #22]
 8002dea:	7dba      	ldrb	r2, [r7, #22]
 8002dec:	7dfb      	ldrb	r3, [r7, #23]
 8002dee:	f1c3 030b 	rsb	r3, r3, #11
 8002df2:	429a      	cmp	r2, r3
 8002df4:	dbe7      	blt.n	8002dc6 <drawCursor+0x5a>
	for (uint8_t i = 0; i < 6; i++) {
 8002df6:	7dfb      	ldrb	r3, [r7, #23]
 8002df8:	3301      	adds	r3, #1
 8002dfa:	75fb      	strb	r3, [r7, #23]
 8002dfc:	7dfb      	ldrb	r3, [r7, #23]
 8002dfe:	2b05      	cmp	r3, #5
 8002e00:	d9de      	bls.n	8002dc0 <drawCursor+0x54>
	}
}
 8002e02:	bf00      	nop
 8002e04:	bf00      	nop
 8002e06:	3718      	adds	r7, #24
 8002e08:	46bd      	mov	sp, r7
 8002e0a:	bd80      	pop	{r7, pc}
 8002e0c:	20000000 	.word	0x20000000

08002e10 <drawTrigger>:

static void drawTrigger(ILI9341TypeDef *display, uint16_t pos, char *name, uint16_t color)
{
 8002e10:	b580      	push	{r7, lr}
 8002e12:	b08a      	sub	sp, #40	@ 0x28
 8002e14:	af04      	add	r7, sp, #16
 8002e16:	60f8      	str	r0, [r7, #12]
 8002e18:	607a      	str	r2, [r7, #4]
 8002e1a:	461a      	mov	r2, r3
 8002e1c:	460b      	mov	r3, r1
 8002e1e:	817b      	strh	r3, [r7, #10]
 8002e20:	4613      	mov	r3, r2
 8002e22:	813b      	strh	r3, [r7, #8]
	ILI9341_FillRectangle(display, 302, pos - 6, 7 * 2, 1, color);
 8002e24:	897b      	ldrh	r3, [r7, #10]
 8002e26:	3b06      	subs	r3, #6
 8002e28:	b29a      	uxth	r2, r3
 8002e2a:	893b      	ldrh	r3, [r7, #8]
 8002e2c:	9301      	str	r3, [sp, #4]
 8002e2e:	2301      	movs	r3, #1
 8002e30:	9300      	str	r3, [sp, #0]
 8002e32:	230e      	movs	r3, #14
 8002e34:	f44f 7197 	mov.w	r1, #302	@ 0x12e
 8002e38:	68f8      	ldr	r0, [r7, #12]
 8002e3a:	f7ff f86c 	bl	8001f16 <ILI9341_FillRectangle>
	ILI9341_WriteString(display, 302, pos - 5, name, Font_7x10, ILI9341_BLACK, color);
 8002e3e:	897b      	ldrh	r3, [r7, #10]
 8002e40:	3b05      	subs	r3, #5
 8002e42:	b29a      	uxth	r2, r3
 8002e44:	893b      	ldrh	r3, [r7, #8]
 8002e46:	9303      	str	r3, [sp, #12]
 8002e48:	2300      	movs	r3, #0
 8002e4a:	9302      	str	r3, [sp, #8]
 8002e4c:	491a      	ldr	r1, [pc, #104]	@ (8002eb8 <drawTrigger+0xa8>)
 8002e4e:	466b      	mov	r3, sp
 8002e50:	c903      	ldmia	r1, {r0, r1}
 8002e52:	e883 0003 	stmia.w	r3, {r0, r1}
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	f44f 7197 	mov.w	r1, #302	@ 0x12e
 8002e5c:	68f8      	ldr	r0, [r7, #12]
 8002e5e:	f7ff f972 	bl	8002146 <ILI9341_WriteString>

	for (uint8_t i = 0; i < 6; i++) {
 8002e62:	2300      	movs	r3, #0
 8002e64:	75fb      	strb	r3, [r7, #23]
 8002e66:	e01f      	b.n	8002ea8 <drawTrigger+0x98>
		for (uint8_t j = i; j < 11 - i; j++)
 8002e68:	7dfb      	ldrb	r3, [r7, #23]
 8002e6a:	75bb      	strb	r3, [r7, #22]
 8002e6c:	e013      	b.n	8002e96 <drawTrigger+0x86>
			ILI9341_DrawPixel(display, 301 - i, pos - 6 + j, color);
 8002e6e:	7dfb      	ldrb	r3, [r7, #23]
 8002e70:	b29b      	uxth	r3, r3
 8002e72:	f5c3 7396 	rsb	r3, r3, #300	@ 0x12c
 8002e76:	3301      	adds	r3, #1
 8002e78:	b299      	uxth	r1, r3
 8002e7a:	7dbb      	ldrb	r3, [r7, #22]
 8002e7c:	b29a      	uxth	r2, r3
 8002e7e:	897b      	ldrh	r3, [r7, #10]
 8002e80:	4413      	add	r3, r2
 8002e82:	b29b      	uxth	r3, r3
 8002e84:	3b06      	subs	r3, #6
 8002e86:	b29a      	uxth	r2, r3
 8002e88:	893b      	ldrh	r3, [r7, #8]
 8002e8a:	68f8      	ldr	r0, [r7, #12]
 8002e8c:	f7fe ff38 	bl	8001d00 <ILI9341_DrawPixel>
		for (uint8_t j = i; j < 11 - i; j++)
 8002e90:	7dbb      	ldrb	r3, [r7, #22]
 8002e92:	3301      	adds	r3, #1
 8002e94:	75bb      	strb	r3, [r7, #22]
 8002e96:	7dba      	ldrb	r2, [r7, #22]
 8002e98:	7dfb      	ldrb	r3, [r7, #23]
 8002e9a:	f1c3 030b 	rsb	r3, r3, #11
 8002e9e:	429a      	cmp	r2, r3
 8002ea0:	dbe5      	blt.n	8002e6e <drawTrigger+0x5e>
	for (uint8_t i = 0; i < 6; i++) {
 8002ea2:	7dfb      	ldrb	r3, [r7, #23]
 8002ea4:	3301      	adds	r3, #1
 8002ea6:	75fb      	strb	r3, [r7, #23]
 8002ea8:	7dfb      	ldrb	r3, [r7, #23]
 8002eaa:	2b05      	cmp	r3, #5
 8002eac:	d9dc      	bls.n	8002e68 <drawTrigger+0x58>
	}
}
 8002eae:	bf00      	nop
 8002eb0:	bf00      	nop
 8002eb2:	3718      	adds	r7, #24
 8002eb4:	46bd      	mov	sp, r7
 8002eb6:	bd80      	pop	{r7, pc}
 8002eb8:	20000000 	.word	0x20000000

08002ebc <drawSignal>:

static void drawSignal(ILI9341TypeDef *display, uint32_t *adc_time, uint16_t *adc0, uint32_t adc_length, uint16_t pixel_dirty[280][2], uint16_t cursor, uint16_t color)
{
 8002ebc:	b590      	push	{r4, r7, lr}
 8002ebe:	f2ad 6dd4 	subw	sp, sp, #1748	@ 0x6d4
 8002ec2:	af00      	add	r7, sp, #0
 8002ec4:	f507 64da 	add.w	r4, r7, #1744	@ 0x6d0
 8002ec8:	f2a4 64c4 	subw	r4, r4, #1732	@ 0x6c4
 8002ecc:	6020      	str	r0, [r4, #0]
 8002ece:	f507 60da 	add.w	r0, r7, #1744	@ 0x6d0
 8002ed2:	f5a0 60d9 	sub.w	r0, r0, #1736	@ 0x6c8
 8002ed6:	6001      	str	r1, [r0, #0]
 8002ed8:	f507 61da 	add.w	r1, r7, #1744	@ 0x6d0
 8002edc:	f2a1 61cc 	subw	r1, r1, #1740	@ 0x6cc
 8002ee0:	600a      	str	r2, [r1, #0]
 8002ee2:	f507 62da 	add.w	r2, r7, #1744	@ 0x6d0
 8002ee6:	f5a2 62da 	sub.w	r2, r2, #1744	@ 0x6d0
 8002eea:	6013      	str	r3, [r2, #0]
	uint16_t point[280];
	for (uint16_t i = 0; i < 280; i++)
 8002eec:	2300      	movs	r3, #0
 8002eee:	f8a7 36ce 	strh.w	r3, [r7, #1742]	@ 0x6ce
 8002ef2:	e00d      	b.n	8002f10 <drawSignal+0x54>
		point[i] = 0;
 8002ef4:	f8b7 26ce 	ldrh.w	r2, [r7, #1742]	@ 0x6ce
 8002ef8:	f507 63da 	add.w	r3, r7, #1744	@ 0x6d0
 8002efc:	f5a3 7318 	sub.w	r3, r3, #608	@ 0x260
 8002f00:	2100      	movs	r1, #0
 8002f02:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	for (uint16_t i = 0; i < 280; i++)
 8002f06:	f8b7 36ce 	ldrh.w	r3, [r7, #1742]	@ 0x6ce
 8002f0a:	3301      	adds	r3, #1
 8002f0c:	f8a7 36ce 	strh.w	r3, [r7, #1742]	@ 0x6ce
 8002f10:	f8b7 36ce 	ldrh.w	r3, [r7, #1742]	@ 0x6ce
 8002f14:	f5b3 7f8c 	cmp.w	r3, #280	@ 0x118
 8002f18:	d3ec      	bcc.n	8002ef4 <drawSignal+0x38>

	for (uint16_t i = 0; i < adc_length; i++) {
 8002f1a:	2300      	movs	r3, #0
 8002f1c:	f8a7 36cc 	strh.w	r3, [r7, #1740]	@ 0x6cc
 8002f20:	e0a5      	b.n	800306e <drawSignal+0x1b2>

		float uV = (float)(adc0[i]) * 3300000.0f / 4096.0f;
 8002f22:	f8b7 36cc 	ldrh.w	r3, [r7, #1740]	@ 0x6cc
 8002f26:	005b      	lsls	r3, r3, #1
 8002f28:	f507 62da 	add.w	r2, r7, #1744	@ 0x6d0
 8002f2c:	f2a2 62cc 	subw	r2, r2, #1740	@ 0x6cc
 8002f30:	6812      	ldr	r2, [r2, #0]
 8002f32:	4413      	add	r3, r2
 8002f34:	881b      	ldrh	r3, [r3, #0]
 8002f36:	ee07 3a90 	vmov	s15, r3
 8002f3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002f3e:	ed9f 7aa1 	vldr	s14, [pc, #644]	@ 80031c4 <drawSignal+0x308>
 8002f42:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002f46:	eddf 6aa0 	vldr	s13, [pc, #640]	@ 80031c8 <drawSignal+0x30c>
 8002f4a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002f4e:	f507 63d4 	add.w	r3, r7, #1696	@ 0x6a0
 8002f52:	edc3 7a00 	vstr	s15, [r3]
		uint16_t x = (float)(adc_time[i]) * 280.0f / (float)(12.0f * xlim_us);
 8002f56:	f8b7 36cc 	ldrh.w	r3, [r7, #1740]	@ 0x6cc
 8002f5a:	009b      	lsls	r3, r3, #2
 8002f5c:	f507 62da 	add.w	r2, r7, #1744	@ 0x6d0
 8002f60:	f5a2 62d9 	sub.w	r2, r2, #1736	@ 0x6c8
 8002f64:	6812      	ldr	r2, [r2, #0]
 8002f66:	4413      	add	r3, r2
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	ee07 3a90 	vmov	s15, r3
 8002f6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002f72:	ed9f 7a96 	vldr	s14, [pc, #600]	@ 80031cc <drawSignal+0x310>
 8002f76:	ee67 6a87 	vmul.f32	s13, s15, s14
 8002f7a:	4b95      	ldr	r3, [pc, #596]	@ (80031d0 <drawSignal+0x314>)
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	ee07 3a90 	vmov	s15, r3
 8002f82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002f86:	eeb2 7a08 	vmov.f32	s14, #40	@ 0x41400000  12.0
 8002f8a:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002f8e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002f92:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002f96:	ee17 3a90 	vmov	r3, s15
 8002f9a:	f8a7 36ca 	strh.w	r3, [r7, #1738]	@ 0x6ca
		uint16_t y = cursor - ((uV / (float)(ylim_uV)) * 200.0f / 8.0f);
 8002f9e:	f8b7 36e4 	ldrh.w	r3, [r7, #1764]	@ 0x6e4
 8002fa2:	ee07 3a90 	vmov	s15, r3
 8002fa6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002faa:	4b8a      	ldr	r3, [pc, #552]	@ (80031d4 <drawSignal+0x318>)
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	ee07 3a90 	vmov	s15, r3
 8002fb2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002fb6:	f507 63d4 	add.w	r3, r7, #1696	@ 0x6a0
 8002fba:	ed93 6a00 	vldr	s12, [r3]
 8002fbe:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8002fc2:	eddf 6a85 	vldr	s13, [pc, #532]	@ 80031d8 <drawSignal+0x31c>
 8002fc6:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8002fca:	eeb2 6a00 	vmov.f32	s12, #32	@ 0x41000000  8.0
 8002fce:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002fd2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002fd6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002fda:	ee17 3a90 	vmov	r3, s15
 8002fde:	f8a7 36c8 	strh.w	r3, [r7, #1736]	@ 0x6c8

		if (x < 0)
			x = 0;

		if (x > 274)
 8002fe2:	f8b7 36ca 	ldrh.w	r3, [r7, #1738]	@ 0x6ca
 8002fe6:	f5b3 7f89 	cmp.w	r3, #274	@ 0x112
 8002fea:	d903      	bls.n	8002ff4 <drawSignal+0x138>
			x = 274;
 8002fec:	f44f 7389 	mov.w	r3, #274	@ 0x112
 8002ff0:	f8a7 36ca 	strh.w	r3, [r7, #1738]	@ 0x6ca

		if (y < 21)
 8002ff4:	f8b7 36c8 	ldrh.w	r3, [r7, #1736]	@ 0x6c8
 8002ff8:	2b14      	cmp	r3, #20
 8002ffa:	d802      	bhi.n	8003002 <drawSignal+0x146>
			y = 21;
 8002ffc:	2315      	movs	r3, #21
 8002ffe:	f8a7 36c8 	strh.w	r3, [r7, #1736]	@ 0x6c8

		if (y > 219)
 8003002:	f8b7 36c8 	ldrh.w	r3, [r7, #1736]	@ 0x6c8
 8003006:	2bdb      	cmp	r3, #219	@ 0xdb
 8003008:	d902      	bls.n	8003010 <drawSignal+0x154>
			y = 219;
 800300a:	23db      	movs	r3, #219	@ 0xdb
 800300c:	f8a7 36c8 	strh.w	r3, [r7, #1736]	@ 0x6c8

		point[x] += (float)(y - point[x]) * 1.0f;
 8003010:	f8b7 26ca 	ldrh.w	r2, [r7, #1738]	@ 0x6ca
 8003014:	f507 63da 	add.w	r3, r7, #1744	@ 0x6d0
 8003018:	f5a3 7318 	sub.w	r3, r3, #608	@ 0x260
 800301c:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8003020:	ee07 3a90 	vmov	s15, r3
 8003024:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003028:	f8b7 36c8 	ldrh.w	r3, [r7, #1736]	@ 0x6c8
 800302c:	f8b7 16ca 	ldrh.w	r1, [r7, #1738]	@ 0x6ca
 8003030:	f507 62da 	add.w	r2, r7, #1744	@ 0x6d0
 8003034:	f5a2 7218 	sub.w	r2, r2, #608	@ 0x260
 8003038:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 800303c:	1a9b      	subs	r3, r3, r2
 800303e:	ee07 3a90 	vmov	s15, r3
 8003042:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003046:	ee77 7a27 	vadd.f32	s15, s14, s15
 800304a:	f8b7 26ca 	ldrh.w	r2, [r7, #1738]	@ 0x6ca
 800304e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003052:	ee17 3a90 	vmov	r3, s15
 8003056:	b299      	uxth	r1, r3
 8003058:	f507 63da 	add.w	r3, r7, #1744	@ 0x6d0
 800305c:	f5a3 7318 	sub.w	r3, r3, #608	@ 0x260
 8003060:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	for (uint16_t i = 0; i < adc_length; i++) {
 8003064:	f8b7 36cc 	ldrh.w	r3, [r7, #1740]	@ 0x6cc
 8003068:	3301      	adds	r3, #1
 800306a:	f8a7 36cc 	strh.w	r3, [r7, #1740]	@ 0x6cc
 800306e:	f8b7 36cc 	ldrh.w	r3, [r7, #1740]	@ 0x6cc
 8003072:	f507 62da 	add.w	r2, r7, #1744	@ 0x6d0
 8003076:	f5a2 62da 	sub.w	r2, r2, #1744	@ 0x6d0
 800307a:	6812      	ldr	r2, [r2, #0]
 800307c:	429a      	cmp	r2, r3
 800307e:	f63f af50 	bhi.w	8002f22 <drawSignal+0x66>
	}

	uint16_t pixel[280][2];
	for (uint16_t i = 0; i < 280; i++) {
 8003082:	2300      	movs	r3, #0
 8003084:	f8a7 36c6 	strh.w	r3, [r7, #1734]	@ 0x6c6
 8003088:	e017      	b.n	80030ba <drawSignal+0x1fe>
		pixel[i][0] = 220;
 800308a:	f8b7 26c6 	ldrh.w	r2, [r7, #1734]	@ 0x6c6
 800308e:	f507 63da 	add.w	r3, r7, #1744	@ 0x6d0
 8003092:	f5a3 63d8 	sub.w	r3, r3, #1728	@ 0x6c0
 8003096:	21dc      	movs	r1, #220	@ 0xdc
 8003098:	f823 1022 	strh.w	r1, [r3, r2, lsl #2]
		pixel[i][1] = 20;
 800309c:	f8b7 36c6 	ldrh.w	r3, [r7, #1734]	@ 0x6c6
 80030a0:	f507 62da 	add.w	r2, r7, #1744	@ 0x6d0
 80030a4:	f5a2 62d8 	sub.w	r2, r2, #1728	@ 0x6c0
 80030a8:	009b      	lsls	r3, r3, #2
 80030aa:	4413      	add	r3, r2
 80030ac:	2214      	movs	r2, #20
 80030ae:	805a      	strh	r2, [r3, #2]
	for (uint16_t i = 0; i < 280; i++) {
 80030b0:	f8b7 36c6 	ldrh.w	r3, [r7, #1734]	@ 0x6c6
 80030b4:	3301      	adds	r3, #1
 80030b6:	f8a7 36c6 	strh.w	r3, [r7, #1734]	@ 0x6c6
 80030ba:	f8b7 36c6 	ldrh.w	r3, [r7, #1734]	@ 0x6c6
 80030be:	f5b3 7f8c 	cmp.w	r3, #280	@ 0x118
 80030c2:	d3e2      	bcc.n	800308a <drawSignal+0x1ce>
	}

	for (uint16_t i = 1; i <= 279; i++) {
 80030c4:	2301      	movs	r3, #1
 80030c6:	f8a7 36c4 	strh.w	r3, [r7, #1732]	@ 0x6c4
 80030ca:	e11b      	b.n	8003304 <drawSignal+0x448>

		if (point[i] == 0)
 80030cc:	f8b7 26c4 	ldrh.w	r2, [r7, #1732]	@ 0x6c4
 80030d0:	f507 63da 	add.w	r3, r7, #1744	@ 0x6d0
 80030d4:	f5a3 7318 	sub.w	r3, r3, #608	@ 0x260
 80030d8:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80030dc:	2b00      	cmp	r3, #0
 80030de:	f000 8105 	beq.w	80032ec <drawSignal+0x430>
			continue;

		int16_t x1 = i;
 80030e2:	f8b7 36c4 	ldrh.w	r3, [r7, #1732]	@ 0x6c4
 80030e6:	f8a7 36b2 	strh.w	r3, [r7, #1714]	@ 0x6b2
		int16_t x0 = x1 - 1;
 80030ea:	f8b7 36b2 	ldrh.w	r3, [r7, #1714]	@ 0x6b2
 80030ee:	3b01      	subs	r3, #1
 80030f0:	b29b      	uxth	r3, r3
 80030f2:	f8a7 36c2 	strh.w	r3, [r7, #1730]	@ 0x6c2

		for (; x0 >= 0; x0--) {
 80030f6:	e010      	b.n	800311a <drawSignal+0x25e>
			if (point[x0] != 0)
 80030f8:	f9b7 26c2 	ldrsh.w	r2, [r7, #1730]	@ 0x6c2
 80030fc:	f507 63da 	add.w	r3, r7, #1744	@ 0x6d0
 8003100:	f5a3 7318 	sub.w	r3, r3, #608	@ 0x260
 8003104:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8003108:	2b00      	cmp	r3, #0
 800310a:	d10b      	bne.n	8003124 <drawSignal+0x268>
		for (; x0 >= 0; x0--) {
 800310c:	f9b7 36c2 	ldrsh.w	r3, [r7, #1730]	@ 0x6c2
 8003110:	b29b      	uxth	r3, r3
 8003112:	3b01      	subs	r3, #1
 8003114:	b29b      	uxth	r3, r3
 8003116:	f8a7 36c2 	strh.w	r3, [r7, #1730]	@ 0x6c2
 800311a:	f9b7 36c2 	ldrsh.w	r3, [r7, #1730]	@ 0x6c2
 800311e:	2b00      	cmp	r3, #0
 8003120:	daea      	bge.n	80030f8 <drawSignal+0x23c>
 8003122:	e000      	b.n	8003126 <drawSignal+0x26a>
				break;
 8003124:	bf00      	nop
		}

		if (x0 == 0 && point[x0] == 0)
 8003126:	f9b7 36c2 	ldrsh.w	r3, [r7, #1730]	@ 0x6c2
 800312a:	2b00      	cmp	r3, #0
 800312c:	d10a      	bne.n	8003144 <drawSignal+0x288>
 800312e:	f9b7 26c2 	ldrsh.w	r2, [r7, #1730]	@ 0x6c2
 8003132:	f507 63da 	add.w	r3, r7, #1744	@ 0x6d0
 8003136:	f5a3 7318 	sub.w	r3, r3, #608	@ 0x260
 800313a:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800313e:	2b00      	cmp	r3, #0
 8003140:	f000 81fa 	beq.w	8003538 <drawSignal+0x67c>
			return;

		int16_t y0 = point[x0];
 8003144:	f9b7 26c2 	ldrsh.w	r2, [r7, #1730]	@ 0x6c2
 8003148:	f507 63da 	add.w	r3, r7, #1744	@ 0x6d0
 800314c:	f5a3 7318 	sub.w	r3, r3, #608	@ 0x260
 8003150:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8003154:	f8a7 36c0 	strh.w	r3, [r7, #1728]	@ 0x6c0
		int16_t y1 = point[x1];
 8003158:	f9b7 26b2 	ldrsh.w	r2, [r7, #1714]	@ 0x6b2
 800315c:	f507 63da 	add.w	r3, r7, #1744	@ 0x6d0
 8003160:	f5a3 7318 	sub.w	r3, r3, #608	@ 0x260
 8003164:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8003168:	f8a7 36b0 	strh.w	r3, [r7, #1712]	@ 0x6b0

		int16_t dx = (x1 - x0) > 0 ? (x1 - x0) : -(x1 - x0);
 800316c:	f9b7 26b2 	ldrsh.w	r2, [r7, #1714]	@ 0x6b2
 8003170:	f9b7 36c2 	ldrsh.w	r3, [r7, #1730]	@ 0x6c2
 8003174:	1ad3      	subs	r3, r2, r3
 8003176:	2b00      	cmp	r3, #0
 8003178:	bfb8      	it	lt
 800317a:	425b      	neglt	r3, r3
 800317c:	f8a7 36ae 	strh.w	r3, [r7, #1710]	@ 0x6ae
		int16_t sx = x0 < x1 ? 1 : -1;
 8003180:	f9b7 26c2 	ldrsh.w	r2, [r7, #1730]	@ 0x6c2
 8003184:	f9b7 36b2 	ldrsh.w	r3, [r7, #1714]	@ 0x6b2
 8003188:	429a      	cmp	r2, r3
 800318a:	da01      	bge.n	8003190 <drawSignal+0x2d4>
 800318c:	2301      	movs	r3, #1
 800318e:	e001      	b.n	8003194 <drawSignal+0x2d8>
 8003190:	f04f 33ff 	mov.w	r3, #4294967295
 8003194:	f8a7 36ac 	strh.w	r3, [r7, #1708]	@ 0x6ac
		int16_t dy = (y1 - y0) > 0 ? -(y1 - y0) : (y1 - y0);
 8003198:	f9b7 26b0 	ldrsh.w	r2, [r7, #1712]	@ 0x6b0
 800319c:	f9b7 36c0 	ldrsh.w	r3, [r7, #1728]	@ 0x6c0
 80031a0:	1ad3      	subs	r3, r2, r3
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	bfb8      	it	lt
 80031a6:	425b      	neglt	r3, r3
 80031a8:	b29b      	uxth	r3, r3
 80031aa:	425b      	negs	r3, r3
 80031ac:	b29b      	uxth	r3, r3
 80031ae:	f8a7 36aa 	strh.w	r3, [r7, #1706]	@ 0x6aa
		int16_t sy = y0 < y1 ? 1 : -1;
 80031b2:	f9b7 26c0 	ldrsh.w	r2, [r7, #1728]	@ 0x6c0
 80031b6:	f9b7 36b0 	ldrsh.w	r3, [r7, #1712]	@ 0x6b0
 80031ba:	429a      	cmp	r2, r3
 80031bc:	da0e      	bge.n	80031dc <drawSignal+0x320>
 80031be:	2301      	movs	r3, #1
 80031c0:	e00e      	b.n	80031e0 <drawSignal+0x324>
 80031c2:	bf00      	nop
 80031c4:	4a496a80 	.word	0x4a496a80
 80031c8:	45800000 	.word	0x45800000
 80031cc:	438c0000 	.word	0x438c0000
 80031d0:	2000d0ec 	.word	0x2000d0ec
 80031d4:	2000d0f0 	.word	0x2000d0f0
 80031d8:	43480000 	.word	0x43480000
 80031dc:	f04f 33ff 	mov.w	r3, #4294967295
 80031e0:	f8a7 36a8 	strh.w	r3, [r7, #1704]	@ 0x6a8
		int16_t error = dx + dy;
 80031e4:	f8b7 26ae 	ldrh.w	r2, [r7, #1710]	@ 0x6ae
 80031e8:	f8b7 36aa 	ldrh.w	r3, [r7, #1706]	@ 0x6aa
 80031ec:	4413      	add	r3, r2
 80031ee:	b29b      	uxth	r3, r3
 80031f0:	f8a7 36be 	strh.w	r3, [r7, #1726]	@ 0x6be

		while (1) {

			if (pixel[x0][0] > y0)
 80031f4:	f9b7 26c2 	ldrsh.w	r2, [r7, #1730]	@ 0x6c2
 80031f8:	f507 63da 	add.w	r3, r7, #1744	@ 0x6d0
 80031fc:	f5a3 63d8 	sub.w	r3, r3, #1728	@ 0x6c0
 8003200:	f833 3022 	ldrh.w	r3, [r3, r2, lsl #2]
 8003204:	461a      	mov	r2, r3
 8003206:	f9b7 36c0 	ldrsh.w	r3, [r7, #1728]	@ 0x6c0
 800320a:	429a      	cmp	r2, r3
 800320c:	dd09      	ble.n	8003222 <drawSignal+0x366>
				pixel[x0][0] = y0;
 800320e:	f9b7 26c2 	ldrsh.w	r2, [r7, #1730]	@ 0x6c2
 8003212:	f8b7 16c0 	ldrh.w	r1, [r7, #1728]	@ 0x6c0
 8003216:	f507 63da 	add.w	r3, r7, #1744	@ 0x6d0
 800321a:	f5a3 63d8 	sub.w	r3, r3, #1728	@ 0x6c0
 800321e:	f823 1022 	strh.w	r1, [r3, r2, lsl #2]

			if (pixel[x0][1] < y0)
 8003222:	f9b7 36c2 	ldrsh.w	r3, [r7, #1730]	@ 0x6c2
 8003226:	f507 62da 	add.w	r2, r7, #1744	@ 0x6d0
 800322a:	f5a2 62d8 	sub.w	r2, r2, #1728	@ 0x6c0
 800322e:	009b      	lsls	r3, r3, #2
 8003230:	4413      	add	r3, r2
 8003232:	885b      	ldrh	r3, [r3, #2]
 8003234:	461a      	mov	r2, r3
 8003236:	f9b7 36c0 	ldrsh.w	r3, [r7, #1728]	@ 0x6c0
 800323a:	429a      	cmp	r2, r3
 800323c:	da0b      	bge.n	8003256 <drawSignal+0x39a>
				pixel[x0][1] = y0;
 800323e:	f9b7 36c2 	ldrsh.w	r3, [r7, #1730]	@ 0x6c2
 8003242:	f8b7 16c0 	ldrh.w	r1, [r7, #1728]	@ 0x6c0
 8003246:	f507 62da 	add.w	r2, r7, #1744	@ 0x6d0
 800324a:	f5a2 62d8 	sub.w	r2, r2, #1728	@ 0x6c0
 800324e:	009b      	lsls	r3, r3, #2
 8003250:	4413      	add	r3, r2
 8003252:	460a      	mov	r2, r1
 8003254:	805a      	strh	r2, [r3, #2]

			if (x0 == x1 && y0 == y1)
 8003256:	f9b7 26c2 	ldrsh.w	r2, [r7, #1730]	@ 0x6c2
 800325a:	f9b7 36b2 	ldrsh.w	r3, [r7, #1714]	@ 0x6b2
 800325e:	429a      	cmp	r2, r3
 8003260:	d105      	bne.n	800326e <drawSignal+0x3b2>
 8003262:	f9b7 26c0 	ldrsh.w	r2, [r7, #1728]	@ 0x6c0
 8003266:	f9b7 36b0 	ldrsh.w	r3, [r7, #1712]	@ 0x6b0
 800326a:	429a      	cmp	r2, r3
 800326c:	d040      	beq.n	80032f0 <drawSignal+0x434>
				break;

			int16_t e2 = 2 * error;
 800326e:	f8b7 36be 	ldrh.w	r3, [r7, #1726]	@ 0x6be
 8003272:	005b      	lsls	r3, r3, #1
 8003274:	b29b      	uxth	r3, r3
 8003276:	f8a7 36a6 	strh.w	r3, [r7, #1702]	@ 0x6a6

			if (e2 >= dy) {
 800327a:	f9b7 26a6 	ldrsh.w	r2, [r7, #1702]	@ 0x6a6
 800327e:	f9b7 36aa 	ldrsh.w	r3, [r7, #1706]	@ 0x6aa
 8003282:	429a      	cmp	r2, r3
 8003284:	db15      	blt.n	80032b2 <drawSignal+0x3f6>
				if (x0 == x1)
 8003286:	f9b7 26c2 	ldrsh.w	r2, [r7, #1730]	@ 0x6c2
 800328a:	f9b7 36b2 	ldrsh.w	r3, [r7, #1714]	@ 0x6b2
 800328e:	429a      	cmp	r2, r3
 8003290:	d030      	beq.n	80032f4 <drawSignal+0x438>
					break;

				error = error + dy;
 8003292:	f8b7 26be 	ldrh.w	r2, [r7, #1726]	@ 0x6be
 8003296:	f8b7 36aa 	ldrh.w	r3, [r7, #1706]	@ 0x6aa
 800329a:	4413      	add	r3, r2
 800329c:	b29b      	uxth	r3, r3
 800329e:	f8a7 36be 	strh.w	r3, [r7, #1726]	@ 0x6be
				x0 = x0 + sx;
 80032a2:	f8b7 26c2 	ldrh.w	r2, [r7, #1730]	@ 0x6c2
 80032a6:	f8b7 36ac 	ldrh.w	r3, [r7, #1708]	@ 0x6ac
 80032aa:	4413      	add	r3, r2
 80032ac:	b29b      	uxth	r3, r3
 80032ae:	f8a7 36c2 	strh.w	r3, [r7, #1730]	@ 0x6c2
			}

			if (e2 <= dx) {
 80032b2:	f9b7 26a6 	ldrsh.w	r2, [r7, #1702]	@ 0x6a6
 80032b6:	f9b7 36ae 	ldrsh.w	r3, [r7, #1710]	@ 0x6ae
 80032ba:	429a      	cmp	r2, r3
 80032bc:	dc9a      	bgt.n	80031f4 <drawSignal+0x338>
				if (y0 == y1)
 80032be:	f9b7 26c0 	ldrsh.w	r2, [r7, #1728]	@ 0x6c0
 80032c2:	f9b7 36b0 	ldrsh.w	r3, [r7, #1712]	@ 0x6b0
 80032c6:	429a      	cmp	r2, r3
 80032c8:	d016      	beq.n	80032f8 <drawSignal+0x43c>
					break;

				error = error + dx;
 80032ca:	f8b7 26be 	ldrh.w	r2, [r7, #1726]	@ 0x6be
 80032ce:	f8b7 36ae 	ldrh.w	r3, [r7, #1710]	@ 0x6ae
 80032d2:	4413      	add	r3, r2
 80032d4:	b29b      	uxth	r3, r3
 80032d6:	f8a7 36be 	strh.w	r3, [r7, #1726]	@ 0x6be
				y0 = y0 + sy;
 80032da:	f8b7 26c0 	ldrh.w	r2, [r7, #1728]	@ 0x6c0
 80032de:	f8b7 36a8 	ldrh.w	r3, [r7, #1704]	@ 0x6a8
 80032e2:	4413      	add	r3, r2
 80032e4:	b29b      	uxth	r3, r3
 80032e6:	f8a7 36c0 	strh.w	r3, [r7, #1728]	@ 0x6c0
		while (1) {
 80032ea:	e783      	b.n	80031f4 <drawSignal+0x338>
			continue;
 80032ec:	bf00      	nop
 80032ee:	e004      	b.n	80032fa <drawSignal+0x43e>
				break;
 80032f0:	bf00      	nop
 80032f2:	e002      	b.n	80032fa <drawSignal+0x43e>
					break;
 80032f4:	bf00      	nop
 80032f6:	e000      	b.n	80032fa <drawSignal+0x43e>
					break;
 80032f8:	bf00      	nop
	for (uint16_t i = 1; i <= 279; i++) {
 80032fa:	f8b7 36c4 	ldrh.w	r3, [r7, #1732]	@ 0x6c4
 80032fe:	3301      	adds	r3, #1
 8003300:	f8a7 36c4 	strh.w	r3, [r7, #1732]	@ 0x6c4
 8003304:	f8b7 36c4 	ldrh.w	r3, [r7, #1732]	@ 0x6c4
 8003308:	f5b3 7f8c 	cmp.w	r3, #280	@ 0x118
 800330c:	f4ff aede 	bcc.w	80030cc <drawSignal+0x210>
			}
		}
	}

	for (uint16_t i = 1; i <= 279; i++) {
 8003310:	2301      	movs	r3, #1
 8003312:	f8a7 36bc 	strh.w	r3, [r7, #1724]	@ 0x6bc
 8003316:	e108      	b.n	800352a <drawSignal+0x66e>
		uint16_t min = pixel[i][0] < pixel_dirty[i][0] ? pixel[i][0] : pixel_dirty[i][0];
 8003318:	f8b7 36bc 	ldrh.w	r3, [r7, #1724]	@ 0x6bc
 800331c:	009b      	lsls	r3, r3, #2
 800331e:	f8d7 26e0 	ldr.w	r2, [r7, #1760]	@ 0x6e0
 8003322:	4413      	add	r3, r2
 8003324:	881a      	ldrh	r2, [r3, #0]
 8003326:	f8b7 16bc 	ldrh.w	r1, [r7, #1724]	@ 0x6bc
 800332a:	f507 63da 	add.w	r3, r7, #1744	@ 0x6d0
 800332e:	f5a3 63d8 	sub.w	r3, r3, #1728	@ 0x6c0
 8003332:	f833 3021 	ldrh.w	r3, [r3, r1, lsl #2]
 8003336:	4293      	cmp	r3, r2
 8003338:	bf28      	it	cs
 800333a:	4613      	movcs	r3, r2
 800333c:	f8a7 36b6 	strh.w	r3, [r7, #1718]	@ 0x6b6
		uint16_t max = pixel[i][1] > pixel_dirty[i][1] ? pixel[i][1] : pixel_dirty[i][1];
 8003340:	f8b7 36bc 	ldrh.w	r3, [r7, #1724]	@ 0x6bc
 8003344:	009b      	lsls	r3, r3, #2
 8003346:	f8d7 26e0 	ldr.w	r2, [r7, #1760]	@ 0x6e0
 800334a:	4413      	add	r3, r2
 800334c:	885a      	ldrh	r2, [r3, #2]
 800334e:	f8b7 36bc 	ldrh.w	r3, [r7, #1724]	@ 0x6bc
 8003352:	f507 61da 	add.w	r1, r7, #1744	@ 0x6d0
 8003356:	f5a1 61d8 	sub.w	r1, r1, #1728	@ 0x6c0
 800335a:	009b      	lsls	r3, r3, #2
 800335c:	440b      	add	r3, r1
 800335e:	885b      	ldrh	r3, [r3, #2]
 8003360:	4293      	cmp	r3, r2
 8003362:	bf38      	it	cc
 8003364:	4613      	movcc	r3, r2
 8003366:	f8a7 36b4 	strh.w	r3, [r7, #1716]	@ 0x6b4

		for (uint16_t j = min; j <= max; j++) {
 800336a:	f8b7 36b6 	ldrh.w	r3, [r7, #1718]	@ 0x6b6
 800336e:	f8a7 36ba 	strh.w	r3, [r7, #1722]	@ 0x6ba
 8003372:	e0af      	b.n	80034d4 <drawSignal+0x618>
			uint8_t draw = 0;
 8003374:	2300      	movs	r3, #0
 8003376:	f887 36b9 	strb.w	r3, [r7, #1721]	@ 0x6b9
			if (j >= pixel[i][0] && j <= pixel[i][1])
 800337a:	f8b7 26bc 	ldrh.w	r2, [r7, #1724]	@ 0x6bc
 800337e:	f507 63da 	add.w	r3, r7, #1744	@ 0x6d0
 8003382:	f5a3 63d8 	sub.w	r3, r3, #1728	@ 0x6c0
 8003386:	f833 3022 	ldrh.w	r3, [r3, r2, lsl #2]
 800338a:	f8b7 26ba 	ldrh.w	r2, [r7, #1722]	@ 0x6ba
 800338e:	429a      	cmp	r2, r3
 8003390:	d30f      	bcc.n	80033b2 <drawSignal+0x4f6>
 8003392:	f8b7 36bc 	ldrh.w	r3, [r7, #1724]	@ 0x6bc
 8003396:	f507 62da 	add.w	r2, r7, #1744	@ 0x6d0
 800339a:	f5a2 62d8 	sub.w	r2, r2, #1728	@ 0x6c0
 800339e:	009b      	lsls	r3, r3, #2
 80033a0:	4413      	add	r3, r2
 80033a2:	885b      	ldrh	r3, [r3, #2]
 80033a4:	f8b7 26ba 	ldrh.w	r2, [r7, #1722]	@ 0x6ba
 80033a8:	429a      	cmp	r2, r3
 80033aa:	d802      	bhi.n	80033b2 <drawSignal+0x4f6>
				draw = 1;
 80033ac:	2301      	movs	r3, #1
 80033ae:	f887 36b9 	strb.w	r3, [r7, #1721]	@ 0x6b9

			uint8_t clear = 0;
 80033b2:	2300      	movs	r3, #0
 80033b4:	f887 36b8 	strb.w	r3, [r7, #1720]	@ 0x6b8
			if (j >= pixel_dirty[i][0] && j <= pixel_dirty[i][1])
 80033b8:	f8b7 36bc 	ldrh.w	r3, [r7, #1724]	@ 0x6bc
 80033bc:	009b      	lsls	r3, r3, #2
 80033be:	f8d7 26e0 	ldr.w	r2, [r7, #1760]	@ 0x6e0
 80033c2:	4413      	add	r3, r2
 80033c4:	881b      	ldrh	r3, [r3, #0]
 80033c6:	f8b7 26ba 	ldrh.w	r2, [r7, #1722]	@ 0x6ba
 80033ca:	429a      	cmp	r2, r3
 80033cc:	d30d      	bcc.n	80033ea <drawSignal+0x52e>
 80033ce:	f8b7 36bc 	ldrh.w	r3, [r7, #1724]	@ 0x6bc
 80033d2:	009b      	lsls	r3, r3, #2
 80033d4:	f8d7 26e0 	ldr.w	r2, [r7, #1760]	@ 0x6e0
 80033d8:	4413      	add	r3, r2
 80033da:	885b      	ldrh	r3, [r3, #2]
 80033dc:	f8b7 26ba 	ldrh.w	r2, [r7, #1722]	@ 0x6ba
 80033e0:	429a      	cmp	r2, r3
 80033e2:	d802      	bhi.n	80033ea <drawSignal+0x52e>
				clear = 1;
 80033e4:	2301      	movs	r3, #1
 80033e6:	f887 36b8 	strb.w	r3, [r7, #1720]	@ 0x6b8

			if (draw && !clear && j > 21)
 80033ea:	f897 36b9 	ldrb.w	r3, [r7, #1721]	@ 0x6b9
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d016      	beq.n	8003420 <drawSignal+0x564>
 80033f2:	f897 36b8 	ldrb.w	r3, [r7, #1720]	@ 0x6b8
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d112      	bne.n	8003420 <drawSignal+0x564>
 80033fa:	f8b7 36ba 	ldrh.w	r3, [r7, #1722]	@ 0x6ba
 80033fe:	2b15      	cmp	r3, #21
 8003400:	d90e      	bls.n	8003420 <drawSignal+0x564>
				ILI9341_DrawPixel(display, i + 20, j, color);
 8003402:	f8b7 36bc 	ldrh.w	r3, [r7, #1724]	@ 0x6bc
 8003406:	3314      	adds	r3, #20
 8003408:	b299      	uxth	r1, r3
 800340a:	f8b7 36e8 	ldrh.w	r3, [r7, #1768]	@ 0x6e8
 800340e:	f8b7 26ba 	ldrh.w	r2, [r7, #1722]	@ 0x6ba
 8003412:	f507 60da 	add.w	r0, r7, #1744	@ 0x6d0
 8003416:	f2a0 60c4 	subw	r0, r0, #1732	@ 0x6c4
 800341a:	6800      	ldr	r0, [r0, #0]
 800341c:	f7fe fc70 	bl	8001d00 <ILI9341_DrawPixel>

			if (!draw && clear) {
 8003420:	f897 36b9 	ldrb.w	r3, [r7, #1721]	@ 0x6b9
 8003424:	2b00      	cmp	r3, #0
 8003426:	d150      	bne.n	80034ca <drawSignal+0x60e>
 8003428:	f897 36b8 	ldrb.w	r3, [r7, #1720]	@ 0x6b8
 800342c:	2b00      	cmp	r3, #0
 800342e:	d04c      	beq.n	80034ca <drawSignal+0x60e>
				if (((i % 25) == 0 && (j % 2) == 0) || ((i % 2) == 0 && ((j - 20) % 25) == 0))
 8003430:	f8b7 26bc 	ldrh.w	r2, [r7, #1724]	@ 0x6bc
 8003434:	4b43      	ldr	r3, [pc, #268]	@ (8003544 <drawSignal+0x688>)
 8003436:	fba3 1302 	umull	r1, r3, r3, r2
 800343a:	08d9      	lsrs	r1, r3, #3
 800343c:	460b      	mov	r3, r1
 800343e:	009b      	lsls	r3, r3, #2
 8003440:	440b      	add	r3, r1
 8003442:	0099      	lsls	r1, r3, #2
 8003444:	440b      	add	r3, r1
 8003446:	1ad3      	subs	r3, r2, r3
 8003448:	b29b      	uxth	r3, r3
 800344a:	2b00      	cmp	r3, #0
 800344c:	d106      	bne.n	800345c <drawSignal+0x5a0>
 800344e:	f8b7 36ba 	ldrh.w	r3, [r7, #1722]	@ 0x6ba
 8003452:	f003 0301 	and.w	r3, r3, #1
 8003456:	b29b      	uxth	r3, r3
 8003458:	2b00      	cmp	r3, #0
 800345a:	d018      	beq.n	800348e <drawSignal+0x5d2>
 800345c:	f8b7 36bc 	ldrh.w	r3, [r7, #1724]	@ 0x6bc
 8003460:	f003 0301 	and.w	r3, r3, #1
 8003464:	b29b      	uxth	r3, r3
 8003466:	2b00      	cmp	r3, #0
 8003468:	d121      	bne.n	80034ae <drawSignal+0x5f2>
 800346a:	f8b7 36ba 	ldrh.w	r3, [r7, #1722]	@ 0x6ba
 800346e:	f1a3 0114 	sub.w	r1, r3, #20
 8003472:	4b34      	ldr	r3, [pc, #208]	@ (8003544 <drawSignal+0x688>)
 8003474:	fb83 2301 	smull	r2, r3, r3, r1
 8003478:	10da      	asrs	r2, r3, #3
 800347a:	17cb      	asrs	r3, r1, #31
 800347c:	1ad2      	subs	r2, r2, r3
 800347e:	4613      	mov	r3, r2
 8003480:	009b      	lsls	r3, r3, #2
 8003482:	4413      	add	r3, r2
 8003484:	009a      	lsls	r2, r3, #2
 8003486:	4413      	add	r3, r2
 8003488:	1aca      	subs	r2, r1, r3
 800348a:	2a00      	cmp	r2, #0
 800348c:	d10f      	bne.n	80034ae <drawSignal+0x5f2>
					ILI9341_DrawPixel(display, i + 20, j,  ILI9341_GRAY);
 800348e:	f8b7 36bc 	ldrh.w	r3, [r7, #1724]	@ 0x6bc
 8003492:	3314      	adds	r3, #20
 8003494:	b299      	uxth	r1, r3
 8003496:	f8b7 26ba 	ldrh.w	r2, [r7, #1722]	@ 0x6ba
 800349a:	f507 63da 	add.w	r3, r7, #1744	@ 0x6d0
 800349e:	f2a3 60c4 	subw	r0, r3, #1732	@ 0x6c4
 80034a2:	f245 238a 	movw	r3, #21130	@ 0x528a
 80034a6:	6800      	ldr	r0, [r0, #0]
 80034a8:	f7fe fc2a 	bl	8001d00 <ILI9341_DrawPixel>
 80034ac:	e00d      	b.n	80034ca <drawSignal+0x60e>
				else
					ILI9341_DrawPixel(display, i + 20, j, ILI9341_BLACK);
 80034ae:	f8b7 36bc 	ldrh.w	r3, [r7, #1724]	@ 0x6bc
 80034b2:	3314      	adds	r3, #20
 80034b4:	b299      	uxth	r1, r3
 80034b6:	f8b7 26ba 	ldrh.w	r2, [r7, #1722]	@ 0x6ba
 80034ba:	f507 63da 	add.w	r3, r7, #1744	@ 0x6d0
 80034be:	f2a3 60c4 	subw	r0, r3, #1732	@ 0x6c4
 80034c2:	2300      	movs	r3, #0
 80034c4:	6800      	ldr	r0, [r0, #0]
 80034c6:	f7fe fc1b 	bl	8001d00 <ILI9341_DrawPixel>
		for (uint16_t j = min; j <= max; j++) {
 80034ca:	f8b7 36ba 	ldrh.w	r3, [r7, #1722]	@ 0x6ba
 80034ce:	3301      	adds	r3, #1
 80034d0:	f8a7 36ba 	strh.w	r3, [r7, #1722]	@ 0x6ba
 80034d4:	f8b7 26ba 	ldrh.w	r2, [r7, #1722]	@ 0x6ba
 80034d8:	f8b7 36b4 	ldrh.w	r3, [r7, #1716]	@ 0x6b4
 80034dc:	429a      	cmp	r2, r3
 80034de:	f67f af49 	bls.w	8003374 <drawSignal+0x4b8>
			}
		}

		pixel_dirty[i][0] = pixel[i][0];
 80034e2:	f8b7 16bc 	ldrh.w	r1, [r7, #1724]	@ 0x6bc
 80034e6:	f8b7 36bc 	ldrh.w	r3, [r7, #1724]	@ 0x6bc
 80034ea:	009b      	lsls	r3, r3, #2
 80034ec:	f8d7 26e0 	ldr.w	r2, [r7, #1760]	@ 0x6e0
 80034f0:	4413      	add	r3, r2
 80034f2:	f507 62da 	add.w	r2, r7, #1744	@ 0x6d0
 80034f6:	f5a2 62d8 	sub.w	r2, r2, #1728	@ 0x6c0
 80034fa:	f832 2021 	ldrh.w	r2, [r2, r1, lsl #2]
 80034fe:	801a      	strh	r2, [r3, #0]
		pixel_dirty[i][1] = pixel[i][1];
 8003500:	f8b7 36bc 	ldrh.w	r3, [r7, #1724]	@ 0x6bc
 8003504:	f8b7 26bc 	ldrh.w	r2, [r7, #1724]	@ 0x6bc
 8003508:	0092      	lsls	r2, r2, #2
 800350a:	f8d7 16e0 	ldr.w	r1, [r7, #1760]	@ 0x6e0
 800350e:	440a      	add	r2, r1
 8003510:	f507 61da 	add.w	r1, r7, #1744	@ 0x6d0
 8003514:	f5a1 61d8 	sub.w	r1, r1, #1728	@ 0x6c0
 8003518:	009b      	lsls	r3, r3, #2
 800351a:	440b      	add	r3, r1
 800351c:	885b      	ldrh	r3, [r3, #2]
 800351e:	8053      	strh	r3, [r2, #2]
	for (uint16_t i = 1; i <= 279; i++) {
 8003520:	f8b7 36bc 	ldrh.w	r3, [r7, #1724]	@ 0x6bc
 8003524:	3301      	adds	r3, #1
 8003526:	f8a7 36bc 	strh.w	r3, [r7, #1724]	@ 0x6bc
 800352a:	f8b7 36bc 	ldrh.w	r3, [r7, #1724]	@ 0x6bc
 800352e:	f5b3 7f8c 	cmp.w	r3, #280	@ 0x118
 8003532:	f4ff aef1 	bcc.w	8003318 <drawSignal+0x45c>
 8003536:	e000      	b.n	800353a <drawSignal+0x67e>
			return;
 8003538:	bf00      	nop
	}
}
 800353a:	f207 67d4 	addw	r7, r7, #1748	@ 0x6d4
 800353e:	46bd      	mov	sp, r7
 8003540:	bd90      	pop	{r4, r7, pc}
 8003542:	bf00      	nop
 8003544:	51eb851f 	.word	0x51eb851f

08003548 <clearSignal>:

static void clearSignal(ILI9341TypeDef *display, uint16_t pixel_dirty[280][2])
{
 8003548:	b580      	push	{r7, lr}
 800354a:	b084      	sub	sp, #16
 800354c:	af00      	add	r7, sp, #0
 800354e:	6078      	str	r0, [r7, #4]
 8003550:	6039      	str	r1, [r7, #0]
	for (uint16_t i = 1; i <= 279; i++) {
 8003552:	2301      	movs	r3, #1
 8003554:	81fb      	strh	r3, [r7, #14]
 8003556:	e05d      	b.n	8003614 <clearSignal+0xcc>
		for (uint16_t j = pixel_dirty[i][0]; j <= pixel_dirty[i][1]; j++) {
 8003558:	89fb      	ldrh	r3, [r7, #14]
 800355a:	009b      	lsls	r3, r3, #2
 800355c:	683a      	ldr	r2, [r7, #0]
 800355e:	4413      	add	r3, r2
 8003560:	881b      	ldrh	r3, [r3, #0]
 8003562:	81bb      	strh	r3, [r7, #12]
 8003564:	e03f      	b.n	80035e6 <clearSignal+0x9e>
			if (((i % 25) == 0 && (j % 2) == 0) || ((i % 2) == 0 && ((j - 20) % 25) == 0))
 8003566:	89fa      	ldrh	r2, [r7, #14]
 8003568:	4b2f      	ldr	r3, [pc, #188]	@ (8003628 <clearSignal+0xe0>)
 800356a:	fba3 1302 	umull	r1, r3, r3, r2
 800356e:	08d9      	lsrs	r1, r3, #3
 8003570:	460b      	mov	r3, r1
 8003572:	009b      	lsls	r3, r3, #2
 8003574:	440b      	add	r3, r1
 8003576:	0099      	lsls	r1, r3, #2
 8003578:	440b      	add	r3, r1
 800357a:	1ad3      	subs	r3, r2, r3
 800357c:	b29b      	uxth	r3, r3
 800357e:	2b00      	cmp	r3, #0
 8003580:	d105      	bne.n	800358e <clearSignal+0x46>
 8003582:	89bb      	ldrh	r3, [r7, #12]
 8003584:	f003 0301 	and.w	r3, r3, #1
 8003588:	b29b      	uxth	r3, r3
 800358a:	2b00      	cmp	r3, #0
 800358c:	d016      	beq.n	80035bc <clearSignal+0x74>
 800358e:	89fb      	ldrh	r3, [r7, #14]
 8003590:	f003 0301 	and.w	r3, r3, #1
 8003594:	b29b      	uxth	r3, r3
 8003596:	2b00      	cmp	r3, #0
 8003598:	d11a      	bne.n	80035d0 <clearSignal+0x88>
 800359a:	89bb      	ldrh	r3, [r7, #12]
 800359c:	f1a3 0114 	sub.w	r1, r3, #20
 80035a0:	4b21      	ldr	r3, [pc, #132]	@ (8003628 <clearSignal+0xe0>)
 80035a2:	fb83 2301 	smull	r2, r3, r3, r1
 80035a6:	10da      	asrs	r2, r3, #3
 80035a8:	17cb      	asrs	r3, r1, #31
 80035aa:	1ad2      	subs	r2, r2, r3
 80035ac:	4613      	mov	r3, r2
 80035ae:	009b      	lsls	r3, r3, #2
 80035b0:	4413      	add	r3, r2
 80035b2:	009a      	lsls	r2, r3, #2
 80035b4:	4413      	add	r3, r2
 80035b6:	1aca      	subs	r2, r1, r3
 80035b8:	2a00      	cmp	r2, #0
 80035ba:	d109      	bne.n	80035d0 <clearSignal+0x88>
				ILI9341_DrawPixel(display, i + 20, j,  ILI9341_GRAY);
 80035bc:	89fb      	ldrh	r3, [r7, #14]
 80035be:	3314      	adds	r3, #20
 80035c0:	b299      	uxth	r1, r3
 80035c2:	89ba      	ldrh	r2, [r7, #12]
 80035c4:	f245 238a 	movw	r3, #21130	@ 0x528a
 80035c8:	6878      	ldr	r0, [r7, #4]
 80035ca:	f7fe fb99 	bl	8001d00 <ILI9341_DrawPixel>
 80035ce:	e007      	b.n	80035e0 <clearSignal+0x98>
			else
				ILI9341_DrawPixel(display, i + 20, j, ILI9341_BLACK);
 80035d0:	89fb      	ldrh	r3, [r7, #14]
 80035d2:	3314      	adds	r3, #20
 80035d4:	b299      	uxth	r1, r3
 80035d6:	89ba      	ldrh	r2, [r7, #12]
 80035d8:	2300      	movs	r3, #0
 80035da:	6878      	ldr	r0, [r7, #4]
 80035dc:	f7fe fb90 	bl	8001d00 <ILI9341_DrawPixel>
		for (uint16_t j = pixel_dirty[i][0]; j <= pixel_dirty[i][1]; j++) {
 80035e0:	89bb      	ldrh	r3, [r7, #12]
 80035e2:	3301      	adds	r3, #1
 80035e4:	81bb      	strh	r3, [r7, #12]
 80035e6:	89fb      	ldrh	r3, [r7, #14]
 80035e8:	009b      	lsls	r3, r3, #2
 80035ea:	683a      	ldr	r2, [r7, #0]
 80035ec:	4413      	add	r3, r2
 80035ee:	885b      	ldrh	r3, [r3, #2]
 80035f0:	89ba      	ldrh	r2, [r7, #12]
 80035f2:	429a      	cmp	r2, r3
 80035f4:	d9b7      	bls.n	8003566 <clearSignal+0x1e>
		}

		pixel_dirty[i][0] = 0;
 80035f6:	89fb      	ldrh	r3, [r7, #14]
 80035f8:	009b      	lsls	r3, r3, #2
 80035fa:	683a      	ldr	r2, [r7, #0]
 80035fc:	4413      	add	r3, r2
 80035fe:	2200      	movs	r2, #0
 8003600:	801a      	strh	r2, [r3, #0]
		pixel_dirty[i][1] = 0;
 8003602:	89fb      	ldrh	r3, [r7, #14]
 8003604:	009b      	lsls	r3, r3, #2
 8003606:	683a      	ldr	r2, [r7, #0]
 8003608:	4413      	add	r3, r2
 800360a:	2200      	movs	r2, #0
 800360c:	805a      	strh	r2, [r3, #2]
	for (uint16_t i = 1; i <= 279; i++) {
 800360e:	89fb      	ldrh	r3, [r7, #14]
 8003610:	3301      	adds	r3, #1
 8003612:	81fb      	strh	r3, [r7, #14]
 8003614:	89fb      	ldrh	r3, [r7, #14]
 8003616:	f5b3 7f8c 	cmp.w	r3, #280	@ 0x118
 800361a:	d39d      	bcc.n	8003558 <clearSignal+0x10>
	}
}
 800361c:	bf00      	nop
 800361e:	bf00      	nop
 8003620:	3710      	adds	r7, #16
 8003622:	46bd      	mov	sp, r7
 8003624:	bd80      	pop	{r7, pc}
 8003626:	bf00      	nop
 8003628:	51eb851f 	.word	0x51eb851f

0800362c <drawSignalParam>:

static void drawSignalParam(ILI9341TypeDef *display, char *string, size_t size, uint16_t adc_max, uint16_t adc_min, uint32_t adc_period)
{
 800362c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003630:	b096      	sub	sp, #88	@ 0x58
 8003632:	af0c      	add	r7, sp, #48	@ 0x30
 8003634:	60f8      	str	r0, [r7, #12]
 8003636:	60b9      	str	r1, [r7, #8]
 8003638:	607a      	str	r2, [r7, #4]
 800363a:	807b      	strh	r3, [r7, #2]
	float max  = (float)(adc_max) * 3300000.0f / 4096.0f;
 800363c:	887b      	ldrh	r3, [r7, #2]
 800363e:	ee07 3a90 	vmov	s15, r3
 8003642:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003646:	ed9f 7a7f 	vldr	s14, [pc, #508]	@ 8003844 <drawSignalParam+0x218>
 800364a:	ee27 7a87 	vmul.f32	s14, s15, s14
 800364e:	eddf 6a7e 	vldr	s13, [pc, #504]	@ 8003848 <drawSignalParam+0x21c>
 8003652:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003656:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
	float min  = (float)(adc_min) * 3300000.0f / 4096.0f;
 800365a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800365e:	ee07 3a90 	vmov	s15, r3
 8003662:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003666:	ed9f 7a77 	vldr	s14, [pc, #476]	@ 8003844 <drawSignalParam+0x218>
 800366a:	ee27 7a87 	vmul.f32	s14, s15, s14
 800366e:	eddf 6a76 	vldr	s13, [pc, #472]	@ 8003848 <drawSignalParam+0x21c>
 8003672:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003676:	edc7 7a08 	vstr	s15, [r7, #32]
	float freq = 1.0f / ((float)(adc_period) / 1000000.0f);
 800367a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800367c:	ee07 3a90 	vmov	s15, r3
 8003680:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003684:	eddf 6a71 	vldr	s13, [pc, #452]	@ 800384c <drawSignalParam+0x220>
 8003688:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800368c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003690:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003694:	edc7 7a07 	vstr	s15, [r7, #28]
	char *max_postfix  = "";
 8003698:	4b6d      	ldr	r3, [pc, #436]	@ (8003850 <drawSignalParam+0x224>)
 800369a:	61bb      	str	r3, [r7, #24]
	char *min_postfix  = "";
 800369c:	4b6c      	ldr	r3, [pc, #432]	@ (8003850 <drawSignalParam+0x224>)
 800369e:	617b      	str	r3, [r7, #20]
	char *freq_postfix = "";
 80036a0:	4b6b      	ldr	r3, [pc, #428]	@ (8003850 <drawSignalParam+0x224>)
 80036a2:	613b      	str	r3, [r7, #16]

	if (max >= 1000000.0f) {
 80036a4:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 80036a8:	ed9f 7a68 	vldr	s14, [pc, #416]	@ 800384c <drawSignalParam+0x220>
 80036ac:	eef4 7ac7 	vcmpe.f32	s15, s14
 80036b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80036b4:	db0a      	blt.n	80036cc <drawSignalParam+0xa0>
		max /= 1000000.0f;
 80036b6:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 80036ba:	eddf 6a64 	vldr	s13, [pc, #400]	@ 800384c <drawSignalParam+0x220>
 80036be:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80036c2:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
		max_postfix = " V";
 80036c6:	4b63      	ldr	r3, [pc, #396]	@ (8003854 <drawSignalParam+0x228>)
 80036c8:	61bb      	str	r3, [r7, #24]
 80036ca:	e015      	b.n	80036f8 <drawSignalParam+0xcc>
	} else if (max >= 1000.0f) {
 80036cc:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 80036d0:	ed9f 7a61 	vldr	s14, [pc, #388]	@ 8003858 <drawSignalParam+0x22c>
 80036d4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80036d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80036dc:	db0a      	blt.n	80036f4 <drawSignalParam+0xc8>
		max /= 1000.0f;
 80036de:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 80036e2:	eddf 6a5d 	vldr	s13, [pc, #372]	@ 8003858 <drawSignalParam+0x22c>
 80036e6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80036ea:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
		max_postfix = "mV";
 80036ee:	4b5b      	ldr	r3, [pc, #364]	@ (800385c <drawSignalParam+0x230>)
 80036f0:	61bb      	str	r3, [r7, #24]
 80036f2:	e001      	b.n	80036f8 <drawSignalParam+0xcc>
	} else
		max_postfix = "uV";
 80036f4:	4b5a      	ldr	r3, [pc, #360]	@ (8003860 <drawSignalParam+0x234>)
 80036f6:	61bb      	str	r3, [r7, #24]

	if (min >= 1000000.0f) {
 80036f8:	edd7 7a08 	vldr	s15, [r7, #32]
 80036fc:	ed9f 7a53 	vldr	s14, [pc, #332]	@ 800384c <drawSignalParam+0x220>
 8003700:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003704:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003708:	db0a      	blt.n	8003720 <drawSignalParam+0xf4>
		min /= 1000000.0f;
 800370a:	ed97 7a08 	vldr	s14, [r7, #32]
 800370e:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800384c <drawSignalParam+0x220>
 8003712:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003716:	edc7 7a08 	vstr	s15, [r7, #32]
		min_postfix = " V";
 800371a:	4b4e      	ldr	r3, [pc, #312]	@ (8003854 <drawSignalParam+0x228>)
 800371c:	617b      	str	r3, [r7, #20]
 800371e:	e015      	b.n	800374c <drawSignalParam+0x120>
	} else if (min >= 1000.0f) {
 8003720:	edd7 7a08 	vldr	s15, [r7, #32]
 8003724:	ed9f 7a4c 	vldr	s14, [pc, #304]	@ 8003858 <drawSignalParam+0x22c>
 8003728:	eef4 7ac7 	vcmpe.f32	s15, s14
 800372c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003730:	db0a      	blt.n	8003748 <drawSignalParam+0x11c>
		min /= 1000.0f;
 8003732:	ed97 7a08 	vldr	s14, [r7, #32]
 8003736:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8003858 <drawSignalParam+0x22c>
 800373a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800373e:	edc7 7a08 	vstr	s15, [r7, #32]
		min_postfix = "mV";
 8003742:	4b46      	ldr	r3, [pc, #280]	@ (800385c <drawSignalParam+0x230>)
 8003744:	617b      	str	r3, [r7, #20]
 8003746:	e001      	b.n	800374c <drawSignalParam+0x120>
	} else
		min_postfix = "uV";
 8003748:	4b45      	ldr	r3, [pc, #276]	@ (8003860 <drawSignalParam+0x234>)
 800374a:	617b      	str	r3, [r7, #20]

	if (freq >= 1000000.0f) {
 800374c:	edd7 7a07 	vldr	s15, [r7, #28]
 8003750:	ed9f 7a3e 	vldr	s14, [pc, #248]	@ 800384c <drawSignalParam+0x220>
 8003754:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003758:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800375c:	db0a      	blt.n	8003774 <drawSignalParam+0x148>
		freq /= 1000000.0f;
 800375e:	ed97 7a07 	vldr	s14, [r7, #28]
 8003762:	eddf 6a3a 	vldr	s13, [pc, #232]	@ 800384c <drawSignalParam+0x220>
 8003766:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800376a:	edc7 7a07 	vstr	s15, [r7, #28]
		freq_postfix = "MHz";
 800376e:	4b3d      	ldr	r3, [pc, #244]	@ (8003864 <drawSignalParam+0x238>)
 8003770:	613b      	str	r3, [r7, #16]
 8003772:	e015      	b.n	80037a0 <drawSignalParam+0x174>
	} else if (freq >= 1000.0f) {
 8003774:	edd7 7a07 	vldr	s15, [r7, #28]
 8003778:	ed9f 7a37 	vldr	s14, [pc, #220]	@ 8003858 <drawSignalParam+0x22c>
 800377c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003780:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003784:	db0a      	blt.n	800379c <drawSignalParam+0x170>
		freq /= 1000.0f;
 8003786:	ed97 7a07 	vldr	s14, [r7, #28]
 800378a:	eddf 6a33 	vldr	s13, [pc, #204]	@ 8003858 <drawSignalParam+0x22c>
 800378e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003792:	edc7 7a07 	vstr	s15, [r7, #28]
		freq_postfix = "kHz";
 8003796:	4b34      	ldr	r3, [pc, #208]	@ (8003868 <drawSignalParam+0x23c>)
 8003798:	613b      	str	r3, [r7, #16]
 800379a:	e001      	b.n	80037a0 <drawSignalParam+0x174>
	} else
		freq_postfix = " Hz";
 800379c:	4b33      	ldr	r3, [pc, #204]	@ (800386c <drawSignalParam+0x240>)
 800379e:	613b      	str	r3, [r7, #16]

	if (adc_period != 0)
 80037a0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d020      	beq.n	80037e8 <drawSignalParam+0x1bc>
		snprintf(string, size, "ampl:%3.1f%s~%3.1f%s freq:%3.0f%s  ", min, min_postfix, max, max_postfix, freq, freq_postfix);
 80037a6:	6a38      	ldr	r0, [r7, #32]
 80037a8:	f7fc fed6 	bl	8000558 <__aeabi_f2d>
 80037ac:	4604      	mov	r4, r0
 80037ae:	460d      	mov	r5, r1
 80037b0:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80037b2:	f7fc fed1 	bl	8000558 <__aeabi_f2d>
 80037b6:	4680      	mov	r8, r0
 80037b8:	4689      	mov	r9, r1
 80037ba:	69f8      	ldr	r0, [r7, #28]
 80037bc:	f7fc fecc 	bl	8000558 <__aeabi_f2d>
 80037c0:	4602      	mov	r2, r0
 80037c2:	460b      	mov	r3, r1
 80037c4:	6939      	ldr	r1, [r7, #16]
 80037c6:	910a      	str	r1, [sp, #40]	@ 0x28
 80037c8:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80037cc:	69bb      	ldr	r3, [r7, #24]
 80037ce:	9306      	str	r3, [sp, #24]
 80037d0:	e9cd 8904 	strd	r8, r9, [sp, #16]
 80037d4:	697b      	ldr	r3, [r7, #20]
 80037d6:	9302      	str	r3, [sp, #8]
 80037d8:	e9cd 4500 	strd	r4, r5, [sp]
 80037dc:	4a24      	ldr	r2, [pc, #144]	@ (8003870 <drawSignalParam+0x244>)
 80037de:	6879      	ldr	r1, [r7, #4]
 80037e0:	68b8      	ldr	r0, [r7, #8]
 80037e2:	f008 f97b 	bl	800badc <sniprintf>
 80037e6:	e016      	b.n	8003816 <drawSignalParam+0x1ea>
	else
		snprintf(string, size, "ampl:%3.1f%s~%3.1f%s freq:??? Hz  ", min, min_postfix, max, max_postfix);
 80037e8:	6a38      	ldr	r0, [r7, #32]
 80037ea:	f7fc feb5 	bl	8000558 <__aeabi_f2d>
 80037ee:	4604      	mov	r4, r0
 80037f0:	460d      	mov	r5, r1
 80037f2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80037f4:	f7fc feb0 	bl	8000558 <__aeabi_f2d>
 80037f8:	4602      	mov	r2, r0
 80037fa:	460b      	mov	r3, r1
 80037fc:	69b9      	ldr	r1, [r7, #24]
 80037fe:	9106      	str	r1, [sp, #24]
 8003800:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8003804:	697b      	ldr	r3, [r7, #20]
 8003806:	9302      	str	r3, [sp, #8]
 8003808:	e9cd 4500 	strd	r4, r5, [sp]
 800380c:	4a19      	ldr	r2, [pc, #100]	@ (8003874 <drawSignalParam+0x248>)
 800380e:	6879      	ldr	r1, [r7, #4]
 8003810:	68b8      	ldr	r0, [r7, #8]
 8003812:	f008 f963 	bl	800badc <sniprintf>

	ILI9341_WriteString(display, 98, 225, string, Font_7x10, ILI9341_WHITE, ILI9341_BLACK);
 8003816:	2300      	movs	r3, #0
 8003818:	9303      	str	r3, [sp, #12]
 800381a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800381e:	9302      	str	r3, [sp, #8]
 8003820:	4a15      	ldr	r2, [pc, #84]	@ (8003878 <drawSignalParam+0x24c>)
 8003822:	466b      	mov	r3, sp
 8003824:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003828:	e883 0003 	stmia.w	r3, {r0, r1}
 800382c:	68bb      	ldr	r3, [r7, #8]
 800382e:	22e1      	movs	r2, #225	@ 0xe1
 8003830:	2162      	movs	r1, #98	@ 0x62
 8003832:	68f8      	ldr	r0, [r7, #12]
 8003834:	f7fe fc87 	bl	8002146 <ILI9341_WriteString>
}
 8003838:	bf00      	nop
 800383a:	3728      	adds	r7, #40	@ 0x28
 800383c:	46bd      	mov	sp, r7
 800383e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8003842:	bf00      	nop
 8003844:	4a496a80 	.word	0x4a496a80
 8003848:	45800000 	.word	0x45800000
 800384c:	49742400 	.word	0x49742400
 8003850:	0800f45c 	.word	0x0800f45c
 8003854:	0800f460 	.word	0x0800f460
 8003858:	447a0000 	.word	0x447a0000
 800385c:	0800f464 	.word	0x0800f464
 8003860:	0800f468 	.word	0x0800f468
 8003864:	0800f46c 	.word	0x0800f46c
 8003868:	0800f470 	.word	0x0800f470
 800386c:	0800f474 	.word	0x0800f474
 8003870:	0800f478 	.word	0x0800f478
 8003874:	0800f49c 	.word	0x0800f49c
 8003878:	20000000 	.word	0x20000000

0800387c <Oscilloscope_Process>:

void Oscilloscope_Process(void)
{
 800387c:	b5b0      	push	{r4, r5, r7, lr}
 800387e:	f5ad 7d00 	sub.w	sp, sp, #512	@ 0x200
 8003882:	af04      	add	r7, sp, #16
	// Draw axis
	if (event_axis) {
 8003884:	4ba2      	ldr	r3, [pc, #648]	@ (8003b10 <Oscilloscope_Process+0x294>)
 8003886:	781b      	ldrb	r3, [r3, #0]
 8003888:	2b00      	cmp	r3, #0
 800388a:	d005      	beq.n	8003898 <Oscilloscope_Process+0x1c>
		drawAxis(&display);
 800388c:	48a1      	ldr	r0, [pc, #644]	@ (8003b14 <Oscilloscope_Process+0x298>)
 800388e:	f7ff f9c3 	bl	8002c18 <drawAxis>
		event_axis = 0;
 8003892:	4b9f      	ldr	r3, [pc, #636]	@ (8003b10 <Oscilloscope_Process+0x294>)
 8003894:	2200      	movs	r2, #0
 8003896:	701a      	strb	r2, [r3, #0]
	}

	uint8_t local_event_adc = 0;
 8003898:	2300      	movs	r3, #0
 800389a:	f887 31ef 	strb.w	r3, [r7, #495]	@ 0x1ef
	if (event_adc) {
 800389e:	4b9e      	ldr	r3, [pc, #632]	@ (8003b18 <Oscilloscope_Process+0x29c>)
 80038a0:	781b      	ldrb	r3, [r3, #0]
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d005      	beq.n	80038b2 <Oscilloscope_Process+0x36>
		local_event_adc = 1;
 80038a6:	2301      	movs	r3, #1
 80038a8:	f887 31ef 	strb.w	r3, [r7, #495]	@ 0x1ef
		event_adc = 0;
 80038ac:	4b9a      	ldr	r3, [pc, #616]	@ (8003b18 <Oscilloscope_Process+0x29c>)
 80038ae:	2200      	movs	r2, #0
 80038b0:	701a      	strb	r2, [r3, #0]
	}

	// Draw signals
	if (local_event_adc) {
 80038b2:	f897 31ef 	ldrb.w	r3, [r7, #495]	@ 0x1ef
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d027      	beq.n	800390a <Oscilloscope_Process+0x8e>

		if (menu_channel0_enabled)
 80038ba:	4b98      	ldr	r3, [pc, #608]	@ (8003b1c <Oscilloscope_Process+0x2a0>)
 80038bc:	781b      	ldrb	r3, [r3, #0]
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d00f      	beq.n	80038e2 <Oscilloscope_Process+0x66>
			drawSignal(&display, adc0_time, adc0, adc0_length, pixel_dirty0, cursor0, ILI9341_YELLOW);
 80038c2:	4b97      	ldr	r3, [pc, #604]	@ (8003b20 <Oscilloscope_Process+0x2a4>)
 80038c4:	681a      	ldr	r2, [r3, #0]
 80038c6:	4b97      	ldr	r3, [pc, #604]	@ (8003b24 <Oscilloscope_Process+0x2a8>)
 80038c8:	881b      	ldrh	r3, [r3, #0]
 80038ca:	f64f 71e0 	movw	r1, #65504	@ 0xffe0
 80038ce:	9102      	str	r1, [sp, #8]
 80038d0:	9301      	str	r3, [sp, #4]
 80038d2:	4b95      	ldr	r3, [pc, #596]	@ (8003b28 <Oscilloscope_Process+0x2ac>)
 80038d4:	9300      	str	r3, [sp, #0]
 80038d6:	4613      	mov	r3, r2
 80038d8:	4a94      	ldr	r2, [pc, #592]	@ (8003b2c <Oscilloscope_Process+0x2b0>)
 80038da:	4995      	ldr	r1, [pc, #596]	@ (8003b30 <Oscilloscope_Process+0x2b4>)
 80038dc:	488d      	ldr	r0, [pc, #564]	@ (8003b14 <Oscilloscope_Process+0x298>)
 80038de:	f7ff faed 	bl	8002ebc <drawSignal>

		if (menu_channel1_enabled)
 80038e2:	4b94      	ldr	r3, [pc, #592]	@ (8003b34 <Oscilloscope_Process+0x2b8>)
 80038e4:	781b      	ldrb	r3, [r3, #0]
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d00f      	beq.n	800390a <Oscilloscope_Process+0x8e>
			drawSignal(&display, adc1_time, adc1, adc1_length, pixel_dirty1, cursor1, ILI9341_CYAN);
 80038ea:	4b93      	ldr	r3, [pc, #588]	@ (8003b38 <Oscilloscope_Process+0x2bc>)
 80038ec:	681a      	ldr	r2, [r3, #0]
 80038ee:	4b93      	ldr	r3, [pc, #588]	@ (8003b3c <Oscilloscope_Process+0x2c0>)
 80038f0:	881b      	ldrh	r3, [r3, #0]
 80038f2:	f240 71ff 	movw	r1, #2047	@ 0x7ff
 80038f6:	9102      	str	r1, [sp, #8]
 80038f8:	9301      	str	r3, [sp, #4]
 80038fa:	4b91      	ldr	r3, [pc, #580]	@ (8003b40 <Oscilloscope_Process+0x2c4>)
 80038fc:	9300      	str	r3, [sp, #0]
 80038fe:	4613      	mov	r3, r2
 8003900:	4a90      	ldr	r2, [pc, #576]	@ (8003b44 <Oscilloscope_Process+0x2c8>)
 8003902:	4991      	ldr	r1, [pc, #580]	@ (8003b48 <Oscilloscope_Process+0x2cc>)
 8003904:	4883      	ldr	r0, [pc, #524]	@ (8003b14 <Oscilloscope_Process+0x298>)
 8003906:	f7ff fad9 	bl	8002ebc <drawSignal>
	}

	  char string[255];

	// Draw FPS
	if (frames > 60) {
 800390a:	4b90      	ldr	r3, [pc, #576]	@ (8003b4c <Oscilloscope_Process+0x2d0>)
 800390c:	781b      	ldrb	r3, [r3, #0]
 800390e:	2b3c      	cmp	r3, #60	@ 0x3c
 8003910:	d934      	bls.n	800397c <Oscilloscope_Process+0x100>
		snprintf(string, 255, "FPS: %5i", (int)(1000.0f / ((float)(HAL_GetTick() - frames_ticks) / 60.0f)));
 8003912:	f001 fe49 	bl	80055a8 <HAL_GetTick>
 8003916:	4602      	mov	r2, r0
 8003918:	4b8d      	ldr	r3, [pc, #564]	@ (8003b50 <Oscilloscope_Process+0x2d4>)
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	1ad3      	subs	r3, r2, r3
 800391e:	ee07 3a90 	vmov	s15, r3
 8003922:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003926:	eddf 6a8b 	vldr	s13, [pc, #556]	@ 8003b54 <Oscilloscope_Process+0x2d8>
 800392a:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800392e:	eddf 6a8a 	vldr	s13, [pc, #552]	@ 8003b58 <Oscilloscope_Process+0x2dc>
 8003932:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003936:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800393a:	f107 00cc 	add.w	r0, r7, #204	@ 0xcc
 800393e:	ee17 3a90 	vmov	r3, s15
 8003942:	4a86      	ldr	r2, [pc, #536]	@ (8003b5c <Oscilloscope_Process+0x2e0>)
 8003944:	21ff      	movs	r1, #255	@ 0xff
 8003946:	f008 f8c9 	bl	800badc <sniprintf>
		ILI9341_WriteString(&display, 225, 5, string, Font_7x10, ILI9341_WHITE, ILI9341_BLACK);
 800394a:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 800394e:	2200      	movs	r2, #0
 8003950:	9203      	str	r2, [sp, #12]
 8003952:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003956:	9202      	str	r2, [sp, #8]
 8003958:	4981      	ldr	r1, [pc, #516]	@ (8003b60 <Oscilloscope_Process+0x2e4>)
 800395a:	466a      	mov	r2, sp
 800395c:	c903      	ldmia	r1, {r0, r1}
 800395e:	e882 0003 	stmia.w	r2, {r0, r1}
 8003962:	2205      	movs	r2, #5
 8003964:	21e1      	movs	r1, #225	@ 0xe1
 8003966:	486b      	ldr	r0, [pc, #428]	@ (8003b14 <Oscilloscope_Process+0x298>)
 8003968:	f7fe fbed 	bl	8002146 <ILI9341_WriteString>

		frames = 0;
 800396c:	4b77      	ldr	r3, [pc, #476]	@ (8003b4c <Oscilloscope_Process+0x2d0>)
 800396e:	2200      	movs	r2, #0
 8003970:	701a      	strb	r2, [r3, #0]
		frames_ticks = HAL_GetTick();
 8003972:	f001 fe19 	bl	80055a8 <HAL_GetTick>
 8003976:	4603      	mov	r3, r0
 8003978:	4a75      	ldr	r2, [pc, #468]	@ (8003b50 <Oscilloscope_Process+0x2d4>)
 800397a:	6013      	str	r3, [r2, #0]
	}

	// Handle button events
	if (event_button0) {
 800397c:	4b79      	ldr	r3, [pc, #484]	@ (8003b64 <Oscilloscope_Process+0x2e8>)
 800397e:	781b      	ldrb	r3, [r3, #0]
 8003980:	2b00      	cmp	r3, #0
 8003982:	d038      	beq.n	80039f6 <Oscilloscope_Process+0x17a>

		if (!menu_extended) {
 8003984:	4b78      	ldr	r3, [pc, #480]	@ (8003b68 <Oscilloscope_Process+0x2ec>)
 8003986:	781b      	ldrb	r3, [r3, #0]
 8003988:	2b00      	cmp	r3, #0
 800398a:	d131      	bne.n	80039f0 <Oscilloscope_Process+0x174>
			ILI9341_Rectangle(&display, menu_selector_x, menu_selector_y, 38, 13, ILI9341_BLACK);
 800398c:	4b77      	ldr	r3, [pc, #476]	@ (8003b6c <Oscilloscope_Process+0x2f0>)
 800398e:	8819      	ldrh	r1, [r3, #0]
 8003990:	4b77      	ldr	r3, [pc, #476]	@ (8003b70 <Oscilloscope_Process+0x2f4>)
 8003992:	881a      	ldrh	r2, [r3, #0]
 8003994:	2300      	movs	r3, #0
 8003996:	9301      	str	r3, [sp, #4]
 8003998:	230d      	movs	r3, #13
 800399a:	9300      	str	r3, [sp, #0]
 800399c:	2326      	movs	r3, #38	@ 0x26
 800399e:	485d      	ldr	r0, [pc, #372]	@ (8003b14 <Oscilloscope_Process+0x298>)
 80039a0:	f7fe fb16 	bl	8001fd0 <ILI9341_Rectangle>

			menu_selected_item++;
 80039a4:	4b73      	ldr	r3, [pc, #460]	@ (8003b74 <Oscilloscope_Process+0x2f8>)
 80039a6:	f993 3000 	ldrsb.w	r3, [r3]
 80039aa:	b2db      	uxtb	r3, r3
 80039ac:	3301      	adds	r3, #1
 80039ae:	b2db      	uxtb	r3, r3
 80039b0:	b25a      	sxtb	r2, r3
 80039b2:	4b70      	ldr	r3, [pc, #448]	@ (8003b74 <Oscilloscope_Process+0x2f8>)
 80039b4:	701a      	strb	r2, [r3, #0]

			if (menu_selected_item > 3)
 80039b6:	4b6f      	ldr	r3, [pc, #444]	@ (8003b74 <Oscilloscope_Process+0x2f8>)
 80039b8:	f993 3000 	ldrsb.w	r3, [r3]
 80039bc:	2b03      	cmp	r3, #3
 80039be:	dd02      	ble.n	80039c6 <Oscilloscope_Process+0x14a>
				menu_selected_item = 2;
 80039c0:	4b6c      	ldr	r3, [pc, #432]	@ (8003b74 <Oscilloscope_Process+0x2f8>)
 80039c2:	2202      	movs	r2, #2
 80039c4:	701a      	strb	r2, [r3, #0]

			menu_selector_x = 20 + 38 * menu_selected_item;
 80039c6:	4b6b      	ldr	r3, [pc, #428]	@ (8003b74 <Oscilloscope_Process+0x2f8>)
 80039c8:	f993 3000 	ldrsb.w	r3, [r3]
 80039cc:	b29b      	uxth	r3, r3
 80039ce:	461a      	mov	r2, r3
 80039d0:	00d2      	lsls	r2, r2, #3
 80039d2:	441a      	add	r2, r3
 80039d4:	0052      	lsls	r2, r2, #1
 80039d6:	4413      	add	r3, r2
 80039d8:	005b      	lsls	r3, r3, #1
 80039da:	b29b      	uxth	r3, r3
 80039dc:	3314      	adds	r3, #20
 80039de:	b29a      	uxth	r2, r3
 80039e0:	4b62      	ldr	r3, [pc, #392]	@ (8003b6c <Oscilloscope_Process+0x2f0>)
 80039e2:	801a      	strh	r2, [r3, #0]
			menu_selector_y = 3;
 80039e4:	4b62      	ldr	r3, [pc, #392]	@ (8003b70 <Oscilloscope_Process+0x2f4>)
 80039e6:	2203      	movs	r2, #3
 80039e8:	801a      	strh	r2, [r3, #0]

			event_selector = 1;
 80039ea:	4b63      	ldr	r3, [pc, #396]	@ (8003b78 <Oscilloscope_Process+0x2fc>)
 80039ec:	2201      	movs	r2, #1
 80039ee:	701a      	strb	r2, [r3, #0]
		}

		event_button0 = 0;
 80039f0:	4b5c      	ldr	r3, [pc, #368]	@ (8003b64 <Oscilloscope_Process+0x2e8>)
 80039f2:	2200      	movs	r2, #0
 80039f4:	701a      	strb	r2, [r3, #0]
	}

	if (event_button1) {
 80039f6:	4b61      	ldr	r3, [pc, #388]	@ (8003b7c <Oscilloscope_Process+0x300>)
 80039f8:	781b      	ldrb	r3, [r3, #0]
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d03e      	beq.n	8003a7c <Oscilloscope_Process+0x200>
		menu_extended = !menu_extended;
 80039fe:	4b5a      	ldr	r3, [pc, #360]	@ (8003b68 <Oscilloscope_Process+0x2ec>)
 8003a00:	781b      	ldrb	r3, [r3, #0]
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	bf0c      	ite	eq
 8003a06:	2301      	moveq	r3, #1
 8003a08:	2300      	movne	r3, #0
 8003a0a:	b2db      	uxtb	r3, r3
 8003a0c:	461a      	mov	r2, r3
 8003a0e:	4b56      	ldr	r3, [pc, #344]	@ (8003b68 <Oscilloscope_Process+0x2ec>)
 8003a10:	701a      	strb	r2, [r3, #0]

		if (!menu_extended) {
 8003a12:	4b55      	ldr	r3, [pc, #340]	@ (8003b68 <Oscilloscope_Process+0x2ec>)
 8003a14:	781b      	ldrb	r3, [r3, #0]
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d127      	bne.n	8003a6a <Oscilloscope_Process+0x1ee>
			ILI9341_Rectangle(&display, menu_selector_x, menu_selector_y, 38, 13, ILI9341_BLACK);
 8003a1a:	4b54      	ldr	r3, [pc, #336]	@ (8003b6c <Oscilloscope_Process+0x2f0>)
 8003a1c:	8819      	ldrh	r1, [r3, #0]
 8003a1e:	4b54      	ldr	r3, [pc, #336]	@ (8003b70 <Oscilloscope_Process+0x2f4>)
 8003a20:	881a      	ldrh	r2, [r3, #0]
 8003a22:	2300      	movs	r3, #0
 8003a24:	9301      	str	r3, [sp, #4]
 8003a26:	230d      	movs	r3, #13
 8003a28:	9300      	str	r3, [sp, #0]
 8003a2a:	2326      	movs	r3, #38	@ 0x26
 8003a2c:	4839      	ldr	r0, [pc, #228]	@ (8003b14 <Oscilloscope_Process+0x298>)
 8003a2e:	f7fe facf 	bl	8001fd0 <ILI9341_Rectangle>

			menu_selected_item = 2;
 8003a32:	4b50      	ldr	r3, [pc, #320]	@ (8003b74 <Oscilloscope_Process+0x2f8>)
 8003a34:	2202      	movs	r2, #2
 8003a36:	701a      	strb	r2, [r3, #0]

			menu_selector_x = 20 + 38 * menu_selected_item;
 8003a38:	4b4e      	ldr	r3, [pc, #312]	@ (8003b74 <Oscilloscope_Process+0x2f8>)
 8003a3a:	f993 3000 	ldrsb.w	r3, [r3]
 8003a3e:	b29b      	uxth	r3, r3
 8003a40:	461a      	mov	r2, r3
 8003a42:	00d2      	lsls	r2, r2, #3
 8003a44:	441a      	add	r2, r3
 8003a46:	0052      	lsls	r2, r2, #1
 8003a48:	4413      	add	r3, r2
 8003a4a:	005b      	lsls	r3, r3, #1
 8003a4c:	b29b      	uxth	r3, r3
 8003a4e:	3314      	adds	r3, #20
 8003a50:	b29a      	uxth	r2, r3
 8003a52:	4b46      	ldr	r3, [pc, #280]	@ (8003b6c <Oscilloscope_Process+0x2f0>)
 8003a54:	801a      	strh	r2, [r3, #0]
			menu_selector_y = 3;
 8003a56:	4b46      	ldr	r3, [pc, #280]	@ (8003b70 <Oscilloscope_Process+0x2f4>)
 8003a58:	2203      	movs	r2, #3
 8003a5a:	801a      	strh	r2, [r3, #0]

			mode = 0;
 8003a5c:	4b48      	ldr	r3, [pc, #288]	@ (8003b80 <Oscilloscope_Process+0x304>)
 8003a5e:	2200      	movs	r2, #0
 8003a60:	701a      	strb	r2, [r3, #0]
			event_selector = 1;
 8003a62:	4b45      	ldr	r3, [pc, #276]	@ (8003b78 <Oscilloscope_Process+0x2fc>)
 8003a64:	2201      	movs	r2, #1
 8003a66:	701a      	strb	r2, [r3, #0]
 8003a68:	e002      	b.n	8003a70 <Oscilloscope_Process+0x1f4>
		} else
			mode = 1;
 8003a6a:	4b45      	ldr	r3, [pc, #276]	@ (8003b80 <Oscilloscope_Process+0x304>)
 8003a6c:	2201      	movs	r2, #1
 8003a6e:	701a      	strb	r2, [r3, #0]

		event_mode = 1;
 8003a70:	4b44      	ldr	r3, [pc, #272]	@ (8003b84 <Oscilloscope_Process+0x308>)
 8003a72:	2201      	movs	r2, #1
 8003a74:	701a      	strb	r2, [r3, #0]
		event_button1 = 0;
 8003a76:	4b41      	ldr	r3, [pc, #260]	@ (8003b7c <Oscilloscope_Process+0x300>)
 8003a78:	2200      	movs	r2, #0
 8003a7a:	701a      	strb	r2, [r3, #0]
	}

	if (event_button2) {
 8003a7c:	4b42      	ldr	r3, [pc, #264]	@ (8003b88 <Oscilloscope_Process+0x30c>)
 8003a7e:	781b      	ldrb	r3, [r3, #0]
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d039      	beq.n	8003af8 <Oscilloscope_Process+0x27c>
		if (menu_selected_item == 2) {
 8003a84:	4b3b      	ldr	r3, [pc, #236]	@ (8003b74 <Oscilloscope_Process+0x2f8>)
 8003a86:	f993 3000 	ldrsb.w	r3, [r3]
 8003a8a:	2b02      	cmp	r3, #2
 8003a8c:	d111      	bne.n	8003ab2 <Oscilloscope_Process+0x236>
			menu_channel0_enabled = !menu_channel0_enabled;
 8003a8e:	4b23      	ldr	r3, [pc, #140]	@ (8003b1c <Oscilloscope_Process+0x2a0>)
 8003a90:	781b      	ldrb	r3, [r3, #0]
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	bf0c      	ite	eq
 8003a96:	2301      	moveq	r3, #1
 8003a98:	2300      	movne	r3, #0
 8003a9a:	b2db      	uxtb	r3, r3
 8003a9c:	461a      	mov	r2, r3
 8003a9e:	4b1f      	ldr	r3, [pc, #124]	@ (8003b1c <Oscilloscope_Process+0x2a0>)
 8003aa0:	701a      	strb	r2, [r3, #0]

			if (!menu_channel0_enabled)
 8003aa2:	4b1e      	ldr	r3, [pc, #120]	@ (8003b1c <Oscilloscope_Process+0x2a0>)
 8003aa4:	781b      	ldrb	r3, [r3, #0]
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d103      	bne.n	8003ab2 <Oscilloscope_Process+0x236>
				clearSignal(&display, pixel_dirty0);
 8003aaa:	491f      	ldr	r1, [pc, #124]	@ (8003b28 <Oscilloscope_Process+0x2ac>)
 8003aac:	4819      	ldr	r0, [pc, #100]	@ (8003b14 <Oscilloscope_Process+0x298>)
 8003aae:	f7ff fd4b 	bl	8003548 <clearSignal>
		}

		if (menu_selected_item == 3) {
 8003ab2:	4b30      	ldr	r3, [pc, #192]	@ (8003b74 <Oscilloscope_Process+0x2f8>)
 8003ab4:	f993 3000 	ldrsb.w	r3, [r3]
 8003ab8:	2b03      	cmp	r3, #3
 8003aba:	d111      	bne.n	8003ae0 <Oscilloscope_Process+0x264>
			menu_channel1_enabled = !menu_channel1_enabled;
 8003abc:	4b1d      	ldr	r3, [pc, #116]	@ (8003b34 <Oscilloscope_Process+0x2b8>)
 8003abe:	781b      	ldrb	r3, [r3, #0]
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	bf0c      	ite	eq
 8003ac4:	2301      	moveq	r3, #1
 8003ac6:	2300      	movne	r3, #0
 8003ac8:	b2db      	uxtb	r3, r3
 8003aca:	461a      	mov	r2, r3
 8003acc:	4b19      	ldr	r3, [pc, #100]	@ (8003b34 <Oscilloscope_Process+0x2b8>)
 8003ace:	701a      	strb	r2, [r3, #0]

			if (!menu_channel1_enabled)
 8003ad0:	4b18      	ldr	r3, [pc, #96]	@ (8003b34 <Oscilloscope_Process+0x2b8>)
 8003ad2:	781b      	ldrb	r3, [r3, #0]
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d103      	bne.n	8003ae0 <Oscilloscope_Process+0x264>
				clearSignal(&display, pixel_dirty1);
 8003ad8:	4919      	ldr	r1, [pc, #100]	@ (8003b40 <Oscilloscope_Process+0x2c4>)
 8003ada:	480e      	ldr	r0, [pc, #56]	@ (8003b14 <Oscilloscope_Process+0x298>)
 8003adc:	f7ff fd34 	bl	8003548 <clearSignal>
		}

		event_cursor  = 1;
 8003ae0:	4b2a      	ldr	r3, [pc, #168]	@ (8003b8c <Oscilloscope_Process+0x310>)
 8003ae2:	2201      	movs	r2, #1
 8003ae4:	701a      	strb	r2, [r3, #0]
		event_trigger = 1;
 8003ae6:	4b2a      	ldr	r3, [pc, #168]	@ (8003b90 <Oscilloscope_Process+0x314>)
 8003ae8:	2201      	movs	r2, #1
 8003aea:	701a      	strb	r2, [r3, #0]
		event_channel = 1;
 8003aec:	4b29      	ldr	r3, [pc, #164]	@ (8003b94 <Oscilloscope_Process+0x318>)
 8003aee:	2201      	movs	r2, #1
 8003af0:	701a      	strb	r2, [r3, #0]
		event_button2 = 0;
 8003af2:	4b25      	ldr	r3, [pc, #148]	@ (8003b88 <Oscilloscope_Process+0x30c>)
 8003af4:	2200      	movs	r2, #0
 8003af6:	701a      	strb	r2, [r3, #0]
	}

	// Handle UI redraw channel events
	if (event_channel) {
 8003af8:	4b26      	ldr	r3, [pc, #152]	@ (8003b94 <Oscilloscope_Process+0x318>)
 8003afa:	781b      	ldrb	r3, [r3, #0]
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d07f      	beq.n	8003c00 <Oscilloscope_Process+0x384>
		uint16_t channel0_color = menu_channel0_enabled ? ILI9341_YELLOW  : ILI9341_COLOR565(60, 60, 0);
 8003b00:	4b06      	ldr	r3, [pc, #24]	@ (8003b1c <Oscilloscope_Process+0x2a0>)
 8003b02:	781b      	ldrb	r3, [r3, #0]
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d047      	beq.n	8003b98 <Oscilloscope_Process+0x31c>
 8003b08:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8003b0c:	e046      	b.n	8003b9c <Oscilloscope_Process+0x320>
 8003b0e:	bf00      	nop
 8003b10:	2000d100 	.word	0x2000d100
 8003b14:	2000d4b8 	.word	0x2000d4b8
 8003b18:	2001352d 	.word	0x2001352d
 8003b1c:	2000d10b 	.word	0x2000d10b
 8003b20:	2000d510 	.word	0x2000d510
 8003b24:	2000d0f4 	.word	0x2000d0f4
 8003b28:	20013540 	.word	0x20013540
 8003b2c:	2001152c 	.word	0x2001152c
 8003b30:	2000d52c 	.word	0x2000d52c
 8003b34:	2000d10c 	.word	0x2000d10c
 8003b38:	2000d514 	.word	0x2000d514
 8003b3c:	2000d0f6 	.word	0x2000d0f6
 8003b40:	200139a0 	.word	0x200139a0
 8003b44:	2001252c 	.word	0x2001252c
 8003b48:	2000f52c 	.word	0x2000f52c
 8003b4c:	20013538 	.word	0x20013538
 8003b50:	2001353c 	.word	0x2001353c
 8003b54:	42700000 	.word	0x42700000
 8003b58:	447a0000 	.word	0x447a0000
 8003b5c:	0800f4c0 	.word	0x0800f4c0
 8003b60:	20000000 	.word	0x20000000
 8003b64:	2001352e 	.word	0x2001352e
 8003b68:	20013531 	.word	0x20013531
 8003b6c:	2000d10e 	.word	0x2000d10e
 8003b70:	2000d110 	.word	0x2000d110
 8003b74:	2000d10d 	.word	0x2000d10d
 8003b78:	2000d107 	.word	0x2000d107
 8003b7c:	2001352f 	.word	0x2001352f
 8003b80:	20013532 	.word	0x20013532
 8003b84:	2000d101 	.word	0x2000d101
 8003b88:	20013530 	.word	0x20013530
 8003b8c:	2000d102 	.word	0x2000d102
 8003b90:	2000d103 	.word	0x2000d103
 8003b94:	2000d104 	.word	0x2000d104
 8003b98:	f643 13e0 	movw	r3, #14816	@ 0x39e0
 8003b9c:	f8a7 31de 	strh.w	r3, [r7, #478]	@ 0x1de
		uint16_t channel1_color = menu_channel1_enabled ? ILI9341_CYAN    : ILI9341_COLOR565(0, 60, 60);
 8003ba0:	4b5e      	ldr	r3, [pc, #376]	@ (8003d1c <Oscilloscope_Process+0x4a0>)
 8003ba2:	781b      	ldrb	r3, [r3, #0]
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d002      	beq.n	8003bae <Oscilloscope_Process+0x332>
 8003ba8:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 8003bac:	e001      	b.n	8003bb2 <Oscilloscope_Process+0x336>
 8003bae:	f240 13e7 	movw	r3, #487	@ 0x1e7
 8003bb2:	f8a7 31dc 	strh.w	r3, [r7, #476]	@ 0x1dc

		ILI9341_WriteString(&display, 110 - 12, 5, " CH1 ", Font_7x10, ILI9341_BLACK, channel0_color);
 8003bb6:	f8b7 31de 	ldrh.w	r3, [r7, #478]	@ 0x1de
 8003bba:	9303      	str	r3, [sp, #12]
 8003bbc:	2300      	movs	r3, #0
 8003bbe:	9302      	str	r3, [sp, #8]
 8003bc0:	4a57      	ldr	r2, [pc, #348]	@ (8003d20 <Oscilloscope_Process+0x4a4>)
 8003bc2:	466b      	mov	r3, sp
 8003bc4:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003bc8:	e883 0003 	stmia.w	r3, {r0, r1}
 8003bcc:	4b55      	ldr	r3, [pc, #340]	@ (8003d24 <Oscilloscope_Process+0x4a8>)
 8003bce:	2205      	movs	r2, #5
 8003bd0:	2162      	movs	r1, #98	@ 0x62
 8003bd2:	4855      	ldr	r0, [pc, #340]	@ (8003d28 <Oscilloscope_Process+0x4ac>)
 8003bd4:	f7fe fab7 	bl	8002146 <ILI9341_WriteString>
		ILI9341_WriteString(&display, 148 - 12, 5, " CH2 ", Font_7x10, ILI9341_BLACK, channel1_color);
 8003bd8:	f8b7 31dc 	ldrh.w	r3, [r7, #476]	@ 0x1dc
 8003bdc:	9303      	str	r3, [sp, #12]
 8003bde:	2300      	movs	r3, #0
 8003be0:	9302      	str	r3, [sp, #8]
 8003be2:	4a4f      	ldr	r2, [pc, #316]	@ (8003d20 <Oscilloscope_Process+0x4a4>)
 8003be4:	466b      	mov	r3, sp
 8003be6:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003bea:	e883 0003 	stmia.w	r3, {r0, r1}
 8003bee:	4b4f      	ldr	r3, [pc, #316]	@ (8003d2c <Oscilloscope_Process+0x4b0>)
 8003bf0:	2205      	movs	r2, #5
 8003bf2:	2188      	movs	r1, #136	@ 0x88
 8003bf4:	484c      	ldr	r0, [pc, #304]	@ (8003d28 <Oscilloscope_Process+0x4ac>)
 8003bf6:	f7fe faa6 	bl	8002146 <ILI9341_WriteString>

		event_channel = 0;
 8003bfa:	4b4d      	ldr	r3, [pc, #308]	@ (8003d30 <Oscilloscope_Process+0x4b4>)
 8003bfc:	2200      	movs	r2, #0
 8003bfe:	701a      	strb	r2, [r3, #0]
	}

	// Handle encoder0
	int32_t encoder0_curr = __HAL_TIM_GET_COUNTER(&htim3);
 8003c00:	4b4c      	ldr	r3, [pc, #304]	@ (8003d34 <Oscilloscope_Process+0x4b8>)
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c06:	f8c7 31d8 	str.w	r3, [r7, #472]	@ 0x1d8
	encoder0_curr = 32767 - ((encoder0_curr - 1) & 0xFFFF) / 2;
 8003c0a:	f8d7 31d8 	ldr.w	r3, [r7, #472]	@ 0x1d8
 8003c0e:	3b01      	subs	r3, #1
 8003c10:	b29b      	uxth	r3, r3
 8003c12:	0fda      	lsrs	r2, r3, #31
 8003c14:	4413      	add	r3, r2
 8003c16:	105b      	asrs	r3, r3, #1
 8003c18:	425b      	negs	r3, r3
 8003c1a:	f503 43ff 	add.w	r3, r3, #32640	@ 0x7f80
 8003c1e:	337f      	adds	r3, #127	@ 0x7f
 8003c20:	f8c7 31d8 	str.w	r3, [r7, #472]	@ 0x1d8

	if(encoder0_curr != encoder0_prev) {
 8003c24:	4b44      	ldr	r3, [pc, #272]	@ (8003d38 <Oscilloscope_Process+0x4bc>)
 8003c26:	881b      	ldrh	r3, [r3, #0]
 8003c28:	461a      	mov	r2, r3
 8003c2a:	f8d7 31d8 	ldr.w	r3, [r7, #472]	@ 0x1d8
 8003c2e:	4293      	cmp	r3, r2
 8003c30:	f000 80dd 	beq.w	8003dee <Oscilloscope_Process+0x572>
		int32_t delta = encoder0_curr - encoder0_prev;
 8003c34:	4b40      	ldr	r3, [pc, #256]	@ (8003d38 <Oscilloscope_Process+0x4bc>)
 8003c36:	881b      	ldrh	r3, [r3, #0]
 8003c38:	461a      	mov	r2, r3
 8003c3a:	f8d7 31d8 	ldr.w	r3, [r7, #472]	@ 0x1d8
 8003c3e:	1a9b      	subs	r3, r3, r2
 8003c40:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8

		if (delta > 10)
 8003c44:	f8d7 31e8 	ldr.w	r3, [r7, #488]	@ 0x1e8
 8003c48:	2b0a      	cmp	r3, #10
 8003c4a:	dd03      	ble.n	8003c54 <Oscilloscope_Process+0x3d8>
			delta = -1;
 8003c4c:	f04f 33ff 	mov.w	r3, #4294967295
 8003c50:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8

		if (delta < -10)
 8003c54:	f8d7 31e8 	ldr.w	r3, [r7, #488]	@ 0x1e8
 8003c58:	f113 0f0a 	cmn.w	r3, #10
 8003c5c:	da02      	bge.n	8003c64 <Oscilloscope_Process+0x3e8>
			delta = 1;
 8003c5e:	2301      	movs	r3, #1
 8003c60:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8

		if (menu_extended) {
 8003c64:	4b35      	ldr	r3, [pc, #212]	@ (8003d3c <Oscilloscope_Process+0x4c0>)
 8003c66:	781b      	ldrb	r3, [r3, #0]
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d071      	beq.n	8003d50 <Oscilloscope_Process+0x4d4>
			ILI9341_Rectangle(&display, menu_selector_x, menu_selector_y, 38, 13, ILI9341_BLACK);
 8003c6c:	4b34      	ldr	r3, [pc, #208]	@ (8003d40 <Oscilloscope_Process+0x4c4>)
 8003c6e:	8819      	ldrh	r1, [r3, #0]
 8003c70:	4b34      	ldr	r3, [pc, #208]	@ (8003d44 <Oscilloscope_Process+0x4c8>)
 8003c72:	881a      	ldrh	r2, [r3, #0]
 8003c74:	2300      	movs	r3, #0
 8003c76:	9301      	str	r3, [sp, #4]
 8003c78:	230d      	movs	r3, #13
 8003c7a:	9300      	str	r3, [sp, #0]
 8003c7c:	2326      	movs	r3, #38	@ 0x26
 8003c7e:	482a      	ldr	r0, [pc, #168]	@ (8003d28 <Oscilloscope_Process+0x4ac>)
 8003c80:	f7fe f9a6 	bl	8001fd0 <ILI9341_Rectangle>

			menu_selected_item += delta;
 8003c84:	f8d7 31e8 	ldr.w	r3, [r7, #488]	@ 0x1e8
 8003c88:	b2da      	uxtb	r2, r3
 8003c8a:	4b2f      	ldr	r3, [pc, #188]	@ (8003d48 <Oscilloscope_Process+0x4cc>)
 8003c8c:	f993 3000 	ldrsb.w	r3, [r3]
 8003c90:	b2db      	uxtb	r3, r3
 8003c92:	4413      	add	r3, r2
 8003c94:	b2db      	uxtb	r3, r3
 8003c96:	b25a      	sxtb	r2, r3
 8003c98:	4b2b      	ldr	r3, [pc, #172]	@ (8003d48 <Oscilloscope_Process+0x4cc>)
 8003c9a:	701a      	strb	r2, [r3, #0]

			if (menu_selected_item < 0)
 8003c9c:	4b2a      	ldr	r3, [pc, #168]	@ (8003d48 <Oscilloscope_Process+0x4cc>)
 8003c9e:	f993 3000 	ldrsb.w	r3, [r3]
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	da02      	bge.n	8003cac <Oscilloscope_Process+0x430>
				menu_selected_item = 0;
 8003ca6:	4b28      	ldr	r3, [pc, #160]	@ (8003d48 <Oscilloscope_Process+0x4cc>)
 8003ca8:	2200      	movs	r2, #0
 8003caa:	701a      	strb	r2, [r3, #0]

			if (menu_selected_item > 5)
 8003cac:	4b26      	ldr	r3, [pc, #152]	@ (8003d48 <Oscilloscope_Process+0x4cc>)
 8003cae:	f993 3000 	ldrsb.w	r3, [r3]
 8003cb2:	2b05      	cmp	r3, #5
 8003cb4:	dd02      	ble.n	8003cbc <Oscilloscope_Process+0x440>
				menu_selected_item = 5;
 8003cb6:	4b24      	ldr	r3, [pc, #144]	@ (8003d48 <Oscilloscope_Process+0x4cc>)
 8003cb8:	2205      	movs	r2, #5
 8003cba:	701a      	strb	r2, [r3, #0]

			if (menu_selected_item < 4) {
 8003cbc:	4b22      	ldr	r3, [pc, #136]	@ (8003d48 <Oscilloscope_Process+0x4cc>)
 8003cbe:	f993 3000 	ldrsb.w	r3, [r3]
 8003cc2:	2b03      	cmp	r3, #3
 8003cc4:	dc12      	bgt.n	8003cec <Oscilloscope_Process+0x470>
				menu_selector_x = 20 + 38 * menu_selected_item;
 8003cc6:	4b20      	ldr	r3, [pc, #128]	@ (8003d48 <Oscilloscope_Process+0x4cc>)
 8003cc8:	f993 3000 	ldrsb.w	r3, [r3]
 8003ccc:	b29b      	uxth	r3, r3
 8003cce:	461a      	mov	r2, r3
 8003cd0:	00d2      	lsls	r2, r2, #3
 8003cd2:	441a      	add	r2, r3
 8003cd4:	0052      	lsls	r2, r2, #1
 8003cd6:	4413      	add	r3, r2
 8003cd8:	005b      	lsls	r3, r3, #1
 8003cda:	b29b      	uxth	r3, r3
 8003cdc:	3314      	adds	r3, #20
 8003cde:	b29a      	uxth	r2, r3
 8003ce0:	4b17      	ldr	r3, [pc, #92]	@ (8003d40 <Oscilloscope_Process+0x4c4>)
 8003ce2:	801a      	strh	r2, [r3, #0]
				menu_selector_y = 3;
 8003ce4:	4b17      	ldr	r3, [pc, #92]	@ (8003d44 <Oscilloscope_Process+0x4c8>)
 8003ce6:	2203      	movs	r2, #3
 8003ce8:	801a      	strh	r2, [r3, #0]
 8003cea:	e012      	b.n	8003d12 <Oscilloscope_Process+0x496>
			} else {
				menu_selector_x = 20 + 38 * (menu_selected_item - 4);
 8003cec:	4b16      	ldr	r3, [pc, #88]	@ (8003d48 <Oscilloscope_Process+0x4cc>)
 8003cee:	f993 3000 	ldrsb.w	r3, [r3]
 8003cf2:	3b04      	subs	r3, #4
 8003cf4:	b29b      	uxth	r3, r3
 8003cf6:	461a      	mov	r2, r3
 8003cf8:	00d2      	lsls	r2, r2, #3
 8003cfa:	441a      	add	r2, r3
 8003cfc:	0052      	lsls	r2, r2, #1
 8003cfe:	4413      	add	r3, r2
 8003d00:	005b      	lsls	r3, r3, #1
 8003d02:	b29b      	uxth	r3, r3
 8003d04:	3314      	adds	r3, #20
 8003d06:	b29a      	uxth	r2, r3
 8003d08:	4b0d      	ldr	r3, [pc, #52]	@ (8003d40 <Oscilloscope_Process+0x4c4>)
 8003d0a:	801a      	strh	r2, [r3, #0]
				menu_selector_y = 223;
 8003d0c:	4b0d      	ldr	r3, [pc, #52]	@ (8003d44 <Oscilloscope_Process+0x4c8>)
 8003d0e:	22df      	movs	r2, #223	@ 0xdf
 8003d10:	801a      	strh	r2, [r3, #0]
			}

			event_selector = 1;
 8003d12:	4b0e      	ldr	r3, [pc, #56]	@ (8003d4c <Oscilloscope_Process+0x4d0>)
 8003d14:	2201      	movs	r2, #1
 8003d16:	701a      	strb	r2, [r3, #0]
 8003d18:	e05e      	b.n	8003dd8 <Oscilloscope_Process+0x55c>
 8003d1a:	bf00      	nop
 8003d1c:	2000d10c 	.word	0x2000d10c
 8003d20:	20000000 	.word	0x20000000
 8003d24:	0800f4cc 	.word	0x0800f4cc
 8003d28:	2000d4b8 	.word	0x2000d4b8
 8003d2c:	0800f4d4 	.word	0x0800f4d4
 8003d30:	2000d104 	.word	0x2000d104
 8003d34:	20013f50 	.word	0x20013f50
 8003d38:	20013534 	.word	0x20013534
 8003d3c:	20013531 	.word	0x20013531
 8003d40:	2000d10e 	.word	0x2000d10e
 8003d44:	2000d110 	.word	0x2000d110
 8003d48:	2000d10d 	.word	0x2000d10d
 8003d4c:	2000d107 	.word	0x2000d107

		} else {

			if (menu_selected_item == 2) {
 8003d50:	4ba0      	ldr	r3, [pc, #640]	@ (8003fd4 <Oscilloscope_Process+0x758>)
 8003d52:	f993 3000 	ldrsb.w	r3, [r3]
 8003d56:	2b02      	cmp	r3, #2
 8003d58:	d11c      	bne.n	8003d94 <Oscilloscope_Process+0x518>
				clearCursor(&display, cursor0);
 8003d5a:	4b9f      	ldr	r3, [pc, #636]	@ (8003fd8 <Oscilloscope_Process+0x75c>)
 8003d5c:	881b      	ldrh	r3, [r3, #0]
 8003d5e:	4619      	mov	r1, r3
 8003d60:	489e      	ldr	r0, [pc, #632]	@ (8003fdc <Oscilloscope_Process+0x760>)
 8003d62:	f7fe ffd6 	bl	8002d12 <clearCursor>
				cursor0 += delta;
 8003d66:	f8d7 31e8 	ldr.w	r3, [r7, #488]	@ 0x1e8
 8003d6a:	b29a      	uxth	r2, r3
 8003d6c:	4b9a      	ldr	r3, [pc, #616]	@ (8003fd8 <Oscilloscope_Process+0x75c>)
 8003d6e:	881b      	ldrh	r3, [r3, #0]
 8003d70:	4413      	add	r3, r2
 8003d72:	b29a      	uxth	r2, r3
 8003d74:	4b98      	ldr	r3, [pc, #608]	@ (8003fd8 <Oscilloscope_Process+0x75c>)
 8003d76:	801a      	strh	r2, [r3, #0]

				if (cursor0 < 20)
 8003d78:	4b97      	ldr	r3, [pc, #604]	@ (8003fd8 <Oscilloscope_Process+0x75c>)
 8003d7a:	881b      	ldrh	r3, [r3, #0]
 8003d7c:	2b13      	cmp	r3, #19
 8003d7e:	d802      	bhi.n	8003d86 <Oscilloscope_Process+0x50a>
					cursor0 = 20;
 8003d80:	4b95      	ldr	r3, [pc, #596]	@ (8003fd8 <Oscilloscope_Process+0x75c>)
 8003d82:	2214      	movs	r2, #20
 8003d84:	801a      	strh	r2, [r3, #0]

				if (cursor0 > 220)
 8003d86:	4b94      	ldr	r3, [pc, #592]	@ (8003fd8 <Oscilloscope_Process+0x75c>)
 8003d88:	881b      	ldrh	r3, [r3, #0]
 8003d8a:	2bdc      	cmp	r3, #220	@ 0xdc
 8003d8c:	d902      	bls.n	8003d94 <Oscilloscope_Process+0x518>
					cursor0 = 220;
 8003d8e:	4b92      	ldr	r3, [pc, #584]	@ (8003fd8 <Oscilloscope_Process+0x75c>)
 8003d90:	22dc      	movs	r2, #220	@ 0xdc
 8003d92:	801a      	strh	r2, [r3, #0]
			}

			if (menu_selected_item == 3) {
 8003d94:	4b8f      	ldr	r3, [pc, #572]	@ (8003fd4 <Oscilloscope_Process+0x758>)
 8003d96:	f993 3000 	ldrsb.w	r3, [r3]
 8003d9a:	2b03      	cmp	r3, #3
 8003d9c:	d11c      	bne.n	8003dd8 <Oscilloscope_Process+0x55c>
				clearCursor(&display, cursor1);
 8003d9e:	4b90      	ldr	r3, [pc, #576]	@ (8003fe0 <Oscilloscope_Process+0x764>)
 8003da0:	881b      	ldrh	r3, [r3, #0]
 8003da2:	4619      	mov	r1, r3
 8003da4:	488d      	ldr	r0, [pc, #564]	@ (8003fdc <Oscilloscope_Process+0x760>)
 8003da6:	f7fe ffb4 	bl	8002d12 <clearCursor>
				cursor1 += delta;
 8003daa:	f8d7 31e8 	ldr.w	r3, [r7, #488]	@ 0x1e8
 8003dae:	b29a      	uxth	r2, r3
 8003db0:	4b8b      	ldr	r3, [pc, #556]	@ (8003fe0 <Oscilloscope_Process+0x764>)
 8003db2:	881b      	ldrh	r3, [r3, #0]
 8003db4:	4413      	add	r3, r2
 8003db6:	b29a      	uxth	r2, r3
 8003db8:	4b89      	ldr	r3, [pc, #548]	@ (8003fe0 <Oscilloscope_Process+0x764>)
 8003dba:	801a      	strh	r2, [r3, #0]

				if (cursor1 < 20)
 8003dbc:	4b88      	ldr	r3, [pc, #544]	@ (8003fe0 <Oscilloscope_Process+0x764>)
 8003dbe:	881b      	ldrh	r3, [r3, #0]
 8003dc0:	2b13      	cmp	r3, #19
 8003dc2:	d802      	bhi.n	8003dca <Oscilloscope_Process+0x54e>
					cursor1 = 20;
 8003dc4:	4b86      	ldr	r3, [pc, #536]	@ (8003fe0 <Oscilloscope_Process+0x764>)
 8003dc6:	2214      	movs	r2, #20
 8003dc8:	801a      	strh	r2, [r3, #0]

				if (cursor1 > 220)
 8003dca:	4b85      	ldr	r3, [pc, #532]	@ (8003fe0 <Oscilloscope_Process+0x764>)
 8003dcc:	881b      	ldrh	r3, [r3, #0]
 8003dce:	2bdc      	cmp	r3, #220	@ 0xdc
 8003dd0:	d902      	bls.n	8003dd8 <Oscilloscope_Process+0x55c>
					cursor1 = 220;
 8003dd2:	4b83      	ldr	r3, [pc, #524]	@ (8003fe0 <Oscilloscope_Process+0x764>)
 8003dd4:	22dc      	movs	r2, #220	@ 0xdc
 8003dd6:	801a      	strh	r2, [r3, #0]
			}

		}

		event_cursor = 1;
 8003dd8:	4b82      	ldr	r3, [pc, #520]	@ (8003fe4 <Oscilloscope_Process+0x768>)
 8003dda:	2201      	movs	r2, #1
 8003ddc:	701a      	strb	r2, [r3, #0]
		event_trigger = 1;
 8003dde:	4b82      	ldr	r3, [pc, #520]	@ (8003fe8 <Oscilloscope_Process+0x76c>)
 8003de0:	2201      	movs	r2, #1
 8003de2:	701a      	strb	r2, [r3, #0]
		encoder0_prev = encoder0_curr;
 8003de4:	f8d7 31d8 	ldr.w	r3, [r7, #472]	@ 0x1d8
 8003de8:	b29a      	uxth	r2, r3
 8003dea:	4b80      	ldr	r3, [pc, #512]	@ (8003fec <Oscilloscope_Process+0x770>)
 8003dec:	801a      	strh	r2, [r3, #0]
	}

	// Handle UI redraw cursor events
	if (event_cursor) {
 8003dee:	4b7d      	ldr	r3, [pc, #500]	@ (8003fe4 <Oscilloscope_Process+0x768>)
 8003df0:	781b      	ldrb	r3, [r3, #0]
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d026      	beq.n	8003e44 <Oscilloscope_Process+0x5c8>
		clearCursor(&display, cursor0);
 8003df6:	4b78      	ldr	r3, [pc, #480]	@ (8003fd8 <Oscilloscope_Process+0x75c>)
 8003df8:	881b      	ldrh	r3, [r3, #0]
 8003dfa:	4619      	mov	r1, r3
 8003dfc:	4877      	ldr	r0, [pc, #476]	@ (8003fdc <Oscilloscope_Process+0x760>)
 8003dfe:	f7fe ff88 	bl	8002d12 <clearCursor>
		clearCursor(&display, cursor1);
 8003e02:	4b77      	ldr	r3, [pc, #476]	@ (8003fe0 <Oscilloscope_Process+0x764>)
 8003e04:	881b      	ldrh	r3, [r3, #0]
 8003e06:	4619      	mov	r1, r3
 8003e08:	4874      	ldr	r0, [pc, #464]	@ (8003fdc <Oscilloscope_Process+0x760>)
 8003e0a:	f7fe ff82 	bl	8002d12 <clearCursor>

		if (menu_channel0_enabled)
 8003e0e:	4b78      	ldr	r3, [pc, #480]	@ (8003ff0 <Oscilloscope_Process+0x774>)
 8003e10:	781b      	ldrb	r3, [r3, #0]
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d007      	beq.n	8003e26 <Oscilloscope_Process+0x5aa>
			drawCursor(&display, cursor0, "C1", ILI9341_YELLOW);
 8003e16:	4b70      	ldr	r3, [pc, #448]	@ (8003fd8 <Oscilloscope_Process+0x75c>)
 8003e18:	8819      	ldrh	r1, [r3, #0]
 8003e1a:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8003e1e:	4a75      	ldr	r2, [pc, #468]	@ (8003ff4 <Oscilloscope_Process+0x778>)
 8003e20:	486e      	ldr	r0, [pc, #440]	@ (8003fdc <Oscilloscope_Process+0x760>)
 8003e22:	f7fe ffa3 	bl	8002d6c <drawCursor>

		if (menu_channel1_enabled)
 8003e26:	4b74      	ldr	r3, [pc, #464]	@ (8003ff8 <Oscilloscope_Process+0x77c>)
 8003e28:	781b      	ldrb	r3, [r3, #0]
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d007      	beq.n	8003e3e <Oscilloscope_Process+0x5c2>
			drawCursor(&display, cursor1, "C2", ILI9341_CYAN);
 8003e2e:	4b6c      	ldr	r3, [pc, #432]	@ (8003fe0 <Oscilloscope_Process+0x764>)
 8003e30:	8819      	ldrh	r1, [r3, #0]
 8003e32:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 8003e36:	4a71      	ldr	r2, [pc, #452]	@ (8003ffc <Oscilloscope_Process+0x780>)
 8003e38:	4868      	ldr	r0, [pc, #416]	@ (8003fdc <Oscilloscope_Process+0x760>)
 8003e3a:	f7fe ff97 	bl	8002d6c <drawCursor>

		event_cursor = 0;
 8003e3e:	4b69      	ldr	r3, [pc, #420]	@ (8003fe4 <Oscilloscope_Process+0x768>)
 8003e40:	2200      	movs	r2, #0
 8003e42:	701a      	strb	r2, [r3, #0]
	}

	// Handle encoder1
	int32_t encoder1_curr = __HAL_TIM_GET_COUNTER(&htim4);
 8003e44:	4b6e      	ldr	r3, [pc, #440]	@ (8004000 <Oscilloscope_Process+0x784>)
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e4a:	f8c7 31d4 	str.w	r3, [r7, #468]	@ 0x1d4
	encoder1_curr = 32767 - ((encoder1_curr - 1) & 0xFFFF) / 2;
 8003e4e:	f8d7 31d4 	ldr.w	r3, [r7, #468]	@ 0x1d4
 8003e52:	3b01      	subs	r3, #1
 8003e54:	b29b      	uxth	r3, r3
 8003e56:	0fda      	lsrs	r2, r3, #31
 8003e58:	4413      	add	r3, r2
 8003e5a:	105b      	asrs	r3, r3, #1
 8003e5c:	425b      	negs	r3, r3
 8003e5e:	f503 43ff 	add.w	r3, r3, #32640	@ 0x7f80
 8003e62:	337f      	adds	r3, #127	@ 0x7f
 8003e64:	f8c7 31d4 	str.w	r3, [r7, #468]	@ 0x1d4

	if(encoder1_curr != encoder1_prev || event_trigger) {
 8003e68:	4b66      	ldr	r3, [pc, #408]	@ (8004004 <Oscilloscope_Process+0x788>)
 8003e6a:	881b      	ldrh	r3, [r3, #0]
 8003e6c:	461a      	mov	r2, r3
 8003e6e:	f8d7 31d4 	ldr.w	r3, [r7, #468]	@ 0x1d4
 8003e72:	4293      	cmp	r3, r2
 8003e74:	d104      	bne.n	8003e80 <Oscilloscope_Process+0x604>
 8003e76:	4b5c      	ldr	r3, [pc, #368]	@ (8003fe8 <Oscilloscope_Process+0x76c>)
 8003e78:	781b      	ldrb	r3, [r3, #0]
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	f000 824a 	beq.w	8004314 <Oscilloscope_Process+0xa98>
		int32_t delta = encoder1_curr - encoder1_prev;
 8003e80:	4b60      	ldr	r3, [pc, #384]	@ (8004004 <Oscilloscope_Process+0x788>)
 8003e82:	881b      	ldrh	r3, [r3, #0]
 8003e84:	461a      	mov	r2, r3
 8003e86:	f8d7 31d4 	ldr.w	r3, [r7, #468]	@ 0x1d4
 8003e8a:	1a9b      	subs	r3, r3, r2
 8003e8c:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4

		if (delta > 10)
 8003e90:	f8d7 31e4 	ldr.w	r3, [r7, #484]	@ 0x1e4
 8003e94:	2b0a      	cmp	r3, #10
 8003e96:	dd03      	ble.n	8003ea0 <Oscilloscope_Process+0x624>
			delta = -1;
 8003e98:	f04f 33ff 	mov.w	r3, #4294967295
 8003e9c:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4

		if (delta < -10)
 8003ea0:	f8d7 31e4 	ldr.w	r3, [r7, #484]	@ 0x1e4
 8003ea4:	f113 0f0a 	cmn.w	r3, #10
 8003ea8:	da02      	bge.n	8003eb0 <Oscilloscope_Process+0x634>
			delta = 1;
 8003eaa:	2301      	movs	r3, #1
 8003eac:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4

		if (menu_extended) {
 8003eb0:	4b55      	ldr	r3, [pc, #340]	@ (8004008 <Oscilloscope_Process+0x78c>)
 8003eb2:	781b      	ldrb	r3, [r3, #0]
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	f000 816f 	beq.w	8004198 <Oscilloscope_Process+0x91c>

			if (menu_selected_item == 1) {
 8003eba:	4b46      	ldr	r3, [pc, #280]	@ (8003fd4 <Oscilloscope_Process+0x758>)
 8003ebc:	f993 3000 	ldrsb.w	r3, [r3]
 8003ec0:	2b01      	cmp	r3, #1
 8003ec2:	d112      	bne.n	8003eea <Oscilloscope_Process+0x66e>
				trigger_mode += delta;
 8003ec4:	f8d7 31e4 	ldr.w	r3, [r7, #484]	@ 0x1e4
 8003ec8:	b2da      	uxtb	r2, r3
 8003eca:	4b50      	ldr	r3, [pc, #320]	@ (800400c <Oscilloscope_Process+0x790>)
 8003ecc:	781b      	ldrb	r3, [r3, #0]
 8003ece:	4413      	add	r3, r2
 8003ed0:	b2da      	uxtb	r2, r3
 8003ed2:	4b4e      	ldr	r3, [pc, #312]	@ (800400c <Oscilloscope_Process+0x790>)
 8003ed4:	701a      	strb	r2, [r3, #0]

				if (trigger_mode < 0)
					trigger_mode = 0;

				if (trigger_mode > 1)
 8003ed6:	4b4d      	ldr	r3, [pc, #308]	@ (800400c <Oscilloscope_Process+0x790>)
 8003ed8:	781b      	ldrb	r3, [r3, #0]
 8003eda:	2b01      	cmp	r3, #1
 8003edc:	d902      	bls.n	8003ee4 <Oscilloscope_Process+0x668>
					trigger_mode = 1;
 8003ede:	4b4b      	ldr	r3, [pc, #300]	@ (800400c <Oscilloscope_Process+0x790>)
 8003ee0:	2201      	movs	r2, #1
 8003ee2:	701a      	strb	r2, [r3, #0]

				event_trigger_mode = 1;
 8003ee4:	4b4a      	ldr	r3, [pc, #296]	@ (8004010 <Oscilloscope_Process+0x794>)
 8003ee6:	2201      	movs	r2, #1
 8003ee8:	701a      	strb	r2, [r3, #0]
			}

			if (menu_selected_item == 4) {
 8003eea:	4b3a      	ldr	r3, [pc, #232]	@ (8003fd4 <Oscilloscope_Process+0x758>)
 8003eec:	f993 3000 	ldrsb.w	r3, [r3]
 8003ef0:	2b04      	cmp	r3, #4
 8003ef2:	f040 8100 	bne.w	80040f6 <Oscilloscope_Process+0x87a>
				mode_seconds += delta;
 8003ef6:	f8d7 31e4 	ldr.w	r3, [r7, #484]	@ 0x1e4
 8003efa:	b2da      	uxtb	r2, r3
 8003efc:	4b45      	ldr	r3, [pc, #276]	@ (8004014 <Oscilloscope_Process+0x798>)
 8003efe:	781b      	ldrb	r3, [r3, #0]
 8003f00:	4413      	add	r3, r2
 8003f02:	b2da      	uxtb	r2, r3
 8003f04:	4b43      	ldr	r3, [pc, #268]	@ (8004014 <Oscilloscope_Process+0x798>)
 8003f06:	701a      	strb	r2, [r3, #0]

				if (mode_seconds < 0)
					mode_seconds = 0;

				if (mode_seconds > 16)
 8003f08:	4b42      	ldr	r3, [pc, #264]	@ (8004014 <Oscilloscope_Process+0x798>)
 8003f0a:	781b      	ldrb	r3, [r3, #0]
 8003f0c:	2b10      	cmp	r3, #16
 8003f0e:	d902      	bls.n	8003f16 <Oscilloscope_Process+0x69a>
					mode_seconds = 16;
 8003f10:	4b40      	ldr	r3, [pc, #256]	@ (8004014 <Oscilloscope_Process+0x798>)
 8003f12:	2210      	movs	r2, #16
 8003f14:	701a      	strb	r2, [r3, #0]

				uint32_t list_seconds[17] = {
 8003f16:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 8003f1a:	f5a3 73f8 	sub.w	r3, r3, #496	@ 0x1f0
 8003f1e:	4a3e      	ldr	r2, [pc, #248]	@ (8004018 <Oscilloscope_Process+0x79c>)
 8003f20:	4618      	mov	r0, r3
 8003f22:	4611      	mov	r1, r2
 8003f24:	2344      	movs	r3, #68	@ 0x44
 8003f26:	461a      	mov	r2, r3
 8003f28:	f007 ff87 	bl	800be3a <memcpy>
					200000,
					500000,
					1000000
				};

				xlim_us = list_seconds[mode_seconds];
 8003f2c:	4b39      	ldr	r3, [pc, #228]	@ (8004014 <Oscilloscope_Process+0x798>)
 8003f2e:	781b      	ldrb	r3, [r3, #0]
 8003f30:	461a      	mov	r2, r3
 8003f32:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 8003f36:	f5a3 73f8 	sub.w	r3, r3, #496	@ 0x1f0
 8003f3a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003f3e:	4a37      	ldr	r2, [pc, #220]	@ (800401c <Oscilloscope_Process+0x7a0>)
 8003f40:	6013      	str	r3, [r2, #0]

				if (adc_immediate) {
 8003f42:	4b37      	ldr	r3, [pc, #220]	@ (8004020 <Oscilloscope_Process+0x7a4>)
 8003f44:	781b      	ldrb	r3, [r3, #0]
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d005      	beq.n	8003f56 <Oscilloscope_Process+0x6da>
					HAL_TIM_Base_Stop_IT(&htim10);
 8003f4a:	4836      	ldr	r0, [pc, #216]	@ (8004024 <Oscilloscope_Process+0x7a8>)
 8003f4c:	f004 fdbe 	bl	8008acc <HAL_TIM_Base_Stop_IT>
					adc_available = 1;
 8003f50:	4b35      	ldr	r3, [pc, #212]	@ (8004028 <Oscilloscope_Process+0x7ac>)
 8003f52:	2201      	movs	r2, #1
 8003f54:	701a      	strb	r2, [r3, #0]
				}

				HAL_ADC_Stop_DMA(&hadc1);
 8003f56:	4835      	ldr	r0, [pc, #212]	@ (800402c <Oscilloscope_Process+0x7b0>)
 8003f58:	f001 fc8e 	bl	8005878 <HAL_ADC_Stop_DMA>

				adc_reset_cyccnt = 1;
 8003f5c:	4b34      	ldr	r3, [pc, #208]	@ (8004030 <Oscilloscope_Process+0x7b4>)
 8003f5e:	2201      	movs	r2, #1
 8003f60:	701a      	strb	r2, [r3, #0]
				adc0_length = 0;
 8003f62:	4b34      	ldr	r3, [pc, #208]	@ (8004034 <Oscilloscope_Process+0x7b8>)
 8003f64:	2200      	movs	r2, #0
 8003f66:	601a      	str	r2, [r3, #0]
				adc1_length = 0;
 8003f68:	4b33      	ldr	r3, [pc, #204]	@ (8004038 <Oscilloscope_Process+0x7bc>)
 8003f6a:	2200      	movs	r2, #0
 8003f6c:	601a      	str	r2, [r3, #0]
				adc_max[0] = 0;
 8003f6e:	4b33      	ldr	r3, [pc, #204]	@ (800403c <Oscilloscope_Process+0x7c0>)
 8003f70:	2200      	movs	r2, #0
 8003f72:	801a      	strh	r2, [r3, #0]
				adc_max[1] = 0;
 8003f74:	4b31      	ldr	r3, [pc, #196]	@ (800403c <Oscilloscope_Process+0x7c0>)
 8003f76:	2200      	movs	r2, #0
 8003f78:	805a      	strh	r2, [r3, #2]
				adc_min[0] = -1;
 8003f7a:	4b31      	ldr	r3, [pc, #196]	@ (8004040 <Oscilloscope_Process+0x7c4>)
 8003f7c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003f80:	801a      	strh	r2, [r3, #0]
				adc_min[1] = -1;
 8003f82:	4b2f      	ldr	r3, [pc, #188]	@ (8004040 <Oscilloscope_Process+0x7c4>)
 8003f84:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003f88:	805a      	strh	r2, [r3, #2]
				adc_period[0] = 0;
 8003f8a:	4b2e      	ldr	r3, [pc, #184]	@ (8004044 <Oscilloscope_Process+0x7c8>)
 8003f8c:	2200      	movs	r2, #0
 8003f8e:	601a      	str	r2, [r3, #0]
				adc_period[1] = 0;
 8003f90:	4b2c      	ldr	r3, [pc, #176]	@ (8004044 <Oscilloscope_Process+0x7c8>)
 8003f92:	2200      	movs	r2, #0
 8003f94:	605a      	str	r2, [r3, #4]
				adc_period0_detected = 0;
 8003f96:	4b2c      	ldr	r3, [pc, #176]	@ (8004048 <Oscilloscope_Process+0x7cc>)
 8003f98:	2200      	movs	r2, #0
 8003f9a:	701a      	strb	r2, [r3, #0]
				adc_period1_detected = 0;
 8003f9c:	4b2b      	ldr	r3, [pc, #172]	@ (800404c <Oscilloscope_Process+0x7d0>)
 8003f9e:	2200      	movs	r2, #0
 8003fa0:	701a      	strb	r2, [r3, #0]
				event_trigger0_detected = 0;
 8003fa2:	4b2b      	ldr	r3, [pc, #172]	@ (8004050 <Oscilloscope_Process+0x7d4>)
 8003fa4:	2200      	movs	r2, #0
 8003fa6:	701a      	strb	r2, [r3, #0]
				event_trigger1_detected = 0;
 8003fa8:	4b2a      	ldr	r3, [pc, #168]	@ (8004054 <Oscilloscope_Process+0x7d8>)
 8003faa:	2200      	movs	r2, #0
 8003fac:	701a      	strb	r2, [r3, #0]

				if (menu_channel0_enabled)
 8003fae:	4b10      	ldr	r3, [pc, #64]	@ (8003ff0 <Oscilloscope_Process+0x774>)
 8003fb0:	781b      	ldrb	r3, [r3, #0]
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d003      	beq.n	8003fbe <Oscilloscope_Process+0x742>
					adc0_filled = 0;
 8003fb6:	4b28      	ldr	r3, [pc, #160]	@ (8004058 <Oscilloscope_Process+0x7dc>)
 8003fb8:	2200      	movs	r2, #0
 8003fba:	701a      	strb	r2, [r3, #0]
 8003fbc:	e002      	b.n	8003fc4 <Oscilloscope_Process+0x748>
				else
					adc0_filled = 1;
 8003fbe:	4b26      	ldr	r3, [pc, #152]	@ (8004058 <Oscilloscope_Process+0x7dc>)
 8003fc0:	2201      	movs	r2, #1
 8003fc2:	701a      	strb	r2, [r3, #0]

				if (menu_channel1_enabled)
 8003fc4:	4b0c      	ldr	r3, [pc, #48]	@ (8003ff8 <Oscilloscope_Process+0x77c>)
 8003fc6:	781b      	ldrb	r3, [r3, #0]
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d049      	beq.n	8004060 <Oscilloscope_Process+0x7e4>
					adc1_filled = 0;
 8003fcc:	4b23      	ldr	r3, [pc, #140]	@ (800405c <Oscilloscope_Process+0x7e0>)
 8003fce:	2200      	movs	r2, #0
 8003fd0:	701a      	strb	r2, [r3, #0]
 8003fd2:	e048      	b.n	8004066 <Oscilloscope_Process+0x7ea>
 8003fd4:	2000d10d 	.word	0x2000d10d
 8003fd8:	2000d0f4 	.word	0x2000d0f4
 8003fdc:	2000d4b8 	.word	0x2000d4b8
 8003fe0:	2000d0f6 	.word	0x2000d0f6
 8003fe4:	2000d102 	.word	0x2000d102
 8003fe8:	2000d103 	.word	0x2000d103
 8003fec:	20013534 	.word	0x20013534
 8003ff0:	2000d10b 	.word	0x2000d10b
 8003ff4:	0800f4dc 	.word	0x0800f4dc
 8003ff8:	2000d10c 	.word	0x2000d10c
 8003ffc:	0800f4e0 	.word	0x0800f4e0
 8004000:	20013f98 	.word	0x20013f98
 8004004:	20013536 	.word	0x20013536
 8004008:	20013531 	.word	0x20013531
 800400c:	2001352c 	.word	0x2001352c
 8004010:	2000d108 	.word	0x2000d108
 8004014:	2000d112 	.word	0x2000d112
 8004018:	0800f53c 	.word	0x0800f53c
 800401c:	2000d0ec 	.word	0x2000d0ec
 8004020:	2000d0e8 	.word	0x2000d0e8
 8004024:	20013fe0 	.word	0x20013fe0
 8004028:	2000d0e1 	.word	0x2000d0e1
 800402c:	2000d318 	.word	0x2000d318
 8004030:	2000d0e2 	.word	0x2000d0e2
 8004034:	2000d510 	.word	0x2000d510
 8004038:	2000d514 	.word	0x2000d514
 800403c:	2000d51c 	.word	0x2000d51c
 8004040:	2000d0e4 	.word	0x2000d0e4
 8004044:	2000d520 	.word	0x2000d520
 8004048:	2000d528 	.word	0x2000d528
 800404c:	2000d529 	.word	0x2000d529
 8004050:	2000d109 	.word	0x2000d109
 8004054:	2000d10a 	.word	0x2000d10a
 8004058:	2000d518 	.word	0x2000d518
 800405c:	2000d0e0 	.word	0x2000d0e0
				else
					adc1_filled = 1;
 8004060:	4b3f      	ldr	r3, [pc, #252]	@ (8004160 <Oscilloscope_Process+0x8e4>)
 8004062:	2201      	movs	r2, #1
 8004064:	701a      	strb	r2, [r3, #0]

				adc_immediate = xlim_us <= 500;
 8004066:	4b3f      	ldr	r3, [pc, #252]	@ (8004164 <Oscilloscope_Process+0x8e8>)
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 800406e:	bf94      	ite	ls
 8004070:	2301      	movls	r3, #1
 8004072:	2300      	movhi	r3, #0
 8004074:	b2db      	uxtb	r3, r3
 8004076:	461a      	mov	r2, r3
 8004078:	4b3b      	ldr	r3, [pc, #236]	@ (8004168 <Oscilloscope_Process+0x8ec>)
 800407a:	701a      	strb	r2, [r3, #0]

				if (!adc_immediate) {
 800407c:	4b3a      	ldr	r3, [pc, #232]	@ (8004168 <Oscilloscope_Process+0x8ec>)
 800407e:	781b      	ldrb	r3, [r3, #0]
 8004080:	2b00      	cmp	r3, #0
 8004082:	d12d      	bne.n	80040e0 <Oscilloscope_Process+0x864>
					uint32_t list_timer_settings[17][2] = {
 8004084:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 8004088:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 800408c:	4a37      	ldr	r2, [pc, #220]	@ (800416c <Oscilloscope_Process+0x8f0>)
 800408e:	4618      	mov	r0, r3
 8004090:	4611      	mov	r1, r2
 8004092:	2388      	movs	r3, #136	@ 0x88
 8004094:	461a      	mov	r2, r3
 8004096:	f007 fed0 	bl	800be3a <memcpy>
						{  8228, 100 },
						{ 20570, 100 },
						{ 41142, 100 }
					};

					htim10.Init.Prescaler = list_timer_settings[mode_seconds][0];
 800409a:	4b35      	ldr	r3, [pc, #212]	@ (8004170 <Oscilloscope_Process+0x8f4>)
 800409c:	781b      	ldrb	r3, [r3, #0]
 800409e:	461a      	mov	r2, r3
 80040a0:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 80040a4:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 80040a8:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
 80040ac:	4a31      	ldr	r2, [pc, #196]	@ (8004174 <Oscilloscope_Process+0x8f8>)
 80040ae:	6053      	str	r3, [r2, #4]
					htim10.Init.Period    = list_timer_settings[mode_seconds][1];
 80040b0:	4b2f      	ldr	r3, [pc, #188]	@ (8004170 <Oscilloscope_Process+0x8f4>)
 80040b2:	781b      	ldrb	r3, [r3, #0]
 80040b4:	4619      	mov	r1, r3
 80040b6:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 80040ba:	f5a3 72d6 	sub.w	r2, r3, #428	@ 0x1ac
 80040be:	00cb      	lsls	r3, r1, #3
 80040c0:	4413      	add	r3, r2
 80040c2:	685b      	ldr	r3, [r3, #4]
 80040c4:	4a2b      	ldr	r2, [pc, #172]	@ (8004174 <Oscilloscope_Process+0x8f8>)
 80040c6:	60d3      	str	r3, [r2, #12]

					if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 80040c8:	482a      	ldr	r0, [pc, #168]	@ (8004174 <Oscilloscope_Process+0x8f8>)
 80040ca:	f004 fc4d 	bl	8008968 <HAL_TIM_Base_Init>
 80040ce:	4603      	mov	r3, r0
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d001      	beq.n	80040d8 <Oscilloscope_Process+0x85c>
						Error_Handler();
 80040d4:	f7fe fc90 	bl	80029f8 <Error_Handler>

					HAL_TIM_Base_Start_IT(&htim10);
 80040d8:	4826      	ldr	r0, [pc, #152]	@ (8004174 <Oscilloscope_Process+0x8f8>)
 80040da:	f004 fc95 	bl	8008a08 <HAL_TIM_Base_Start_IT>
 80040de:	e004      	b.n	80040ea <Oscilloscope_Process+0x86e>
				} else
					HAL_ADC_Start_DMA(&hadc1, (uint32_t*)&adc_data, 2);
 80040e0:	2202      	movs	r2, #2
 80040e2:	4925      	ldr	r1, [pc, #148]	@ (8004178 <Oscilloscope_Process+0x8fc>)
 80040e4:	4825      	ldr	r0, [pc, #148]	@ (800417c <Oscilloscope_Process+0x900>)
 80040e6:	f001 fad3 	bl	8005690 <HAL_ADC_Start_DMA>

				local_event_adc = 0;
 80040ea:	2300      	movs	r3, #0
 80040ec:	f887 31ef 	strb.w	r3, [r7, #495]	@ 0x1ef
				event_seconds = 1;
 80040f0:	4b23      	ldr	r3, [pc, #140]	@ (8004180 <Oscilloscope_Process+0x904>)
 80040f2:	2201      	movs	r2, #1
 80040f4:	701a      	strb	r2, [r3, #0]
			}

			if (menu_selected_item == 5) {
 80040f6:	4b23      	ldr	r3, [pc, #140]	@ (8004184 <Oscilloscope_Process+0x908>)
 80040f8:	f993 3000 	ldrsb.w	r3, [r3]
 80040fc:	2b05      	cmp	r3, #5
 80040fe:	f040 8101 	bne.w	8004304 <Oscilloscope_Process+0xa88>
				mode_voltage += delta;
 8004102:	f8d7 31e4 	ldr.w	r3, [r7, #484]	@ 0x1e4
 8004106:	b2da      	uxtb	r2, r3
 8004108:	4b1f      	ldr	r3, [pc, #124]	@ (8004188 <Oscilloscope_Process+0x90c>)
 800410a:	781b      	ldrb	r3, [r3, #0]
 800410c:	4413      	add	r3, r2
 800410e:	b2da      	uxtb	r2, r3
 8004110:	4b1d      	ldr	r3, [pc, #116]	@ (8004188 <Oscilloscope_Process+0x90c>)
 8004112:	701a      	strb	r2, [r3, #0]

				if (mode_voltage < 0)
					mode_voltage = 0;

				if (mode_voltage > 9)
 8004114:	4b1c      	ldr	r3, [pc, #112]	@ (8004188 <Oscilloscope_Process+0x90c>)
 8004116:	781b      	ldrb	r3, [r3, #0]
 8004118:	2b09      	cmp	r3, #9
 800411a:	d902      	bls.n	8004122 <Oscilloscope_Process+0x8a6>
					mode_voltage = 9;
 800411c:	4b1a      	ldr	r3, [pc, #104]	@ (8004188 <Oscilloscope_Process+0x90c>)
 800411e:	2209      	movs	r2, #9
 8004120:	701a      	strb	r2, [r3, #0]

				uint32_t list_voltage[10] = {
 8004122:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 8004126:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 800412a:	4a18      	ldr	r2, [pc, #96]	@ (800418c <Oscilloscope_Process+0x910>)
 800412c:	461c      	mov	r4, r3
 800412e:	4615      	mov	r5, r2
 8004130:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004132:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004134:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004136:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004138:	e895 0003 	ldmia.w	r5, {r0, r1}
 800413c:	e884 0003 	stmia.w	r4, {r0, r1}
					2000000,
					5000000,
					10000000
				};

				ylim_uV = list_voltage[mode_voltage];
 8004140:	4b11      	ldr	r3, [pc, #68]	@ (8004188 <Oscilloscope_Process+0x90c>)
 8004142:	781b      	ldrb	r3, [r3, #0]
 8004144:	461a      	mov	r2, r3
 8004146:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 800414a:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 800414e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004152:	4a0f      	ldr	r2, [pc, #60]	@ (8004190 <Oscilloscope_Process+0x914>)
 8004154:	6013      	str	r3, [r2, #0]

				event_voltage = 1;
 8004156:	4b0f      	ldr	r3, [pc, #60]	@ (8004194 <Oscilloscope_Process+0x918>)
 8004158:	2201      	movs	r2, #1
 800415a:	701a      	strb	r2, [r3, #0]
 800415c:	e0d2      	b.n	8004304 <Oscilloscope_Process+0xa88>
 800415e:	bf00      	nop
 8004160:	2000d0e0 	.word	0x2000d0e0
 8004164:	2000d0ec 	.word	0x2000d0ec
 8004168:	2000d0e8 	.word	0x2000d0e8
 800416c:	0800f580 	.word	0x0800f580
 8004170:	2000d112 	.word	0x2000d112
 8004174:	20013fe0 	.word	0x20013fe0
 8004178:	2000d508 	.word	0x2000d508
 800417c:	2000d318 	.word	0x2000d318
 8004180:	2000d105 	.word	0x2000d105
 8004184:	2000d10d 	.word	0x2000d10d
 8004188:	2000d113 	.word	0x2000d113
 800418c:	0800f608 	.word	0x0800f608
 8004190:	2000d0f0 	.word	0x2000d0f0
 8004194:	2000d106 	.word	0x2000d106
			}

		} else {

			if (menu_selected_item == 2) {
 8004198:	4baa      	ldr	r3, [pc, #680]	@ (8004444 <Oscilloscope_Process+0xbc8>)
 800419a:	f993 3000 	ldrsb.w	r3, [r3]
 800419e:	2b02      	cmp	r3, #2
 80041a0:	d155      	bne.n	800424e <Oscilloscope_Process+0x9d2>
				clearTrigger(&display, trigger0);
 80041a2:	4ba9      	ldr	r3, [pc, #676]	@ (8004448 <Oscilloscope_Process+0xbcc>)
 80041a4:	881b      	ldrh	r3, [r3, #0]
 80041a6:	4619      	mov	r1, r3
 80041a8:	48a8      	ldr	r0, [pc, #672]	@ (800444c <Oscilloscope_Process+0xbd0>)
 80041aa:	f7fe fdc8 	bl	8002d3e <clearTrigger>
				trigger0 += delta;
 80041ae:	f8d7 31e4 	ldr.w	r3, [r7, #484]	@ 0x1e4
 80041b2:	b29a      	uxth	r2, r3
 80041b4:	4ba4      	ldr	r3, [pc, #656]	@ (8004448 <Oscilloscope_Process+0xbcc>)
 80041b6:	881b      	ldrh	r3, [r3, #0]
 80041b8:	4413      	add	r3, r2
 80041ba:	b29a      	uxth	r2, r3
 80041bc:	4ba2      	ldr	r3, [pc, #648]	@ (8004448 <Oscilloscope_Process+0xbcc>)
 80041be:	801a      	strh	r2, [r3, #0]

				if (trigger0 < 20)
 80041c0:	4ba1      	ldr	r3, [pc, #644]	@ (8004448 <Oscilloscope_Process+0xbcc>)
 80041c2:	881b      	ldrh	r3, [r3, #0]
 80041c4:	2b13      	cmp	r3, #19
 80041c6:	d802      	bhi.n	80041ce <Oscilloscope_Process+0x952>
					trigger0 = 20;
 80041c8:	4b9f      	ldr	r3, [pc, #636]	@ (8004448 <Oscilloscope_Process+0xbcc>)
 80041ca:	2214      	movs	r2, #20
 80041cc:	801a      	strh	r2, [r3, #0]

				if (trigger0 > 220)
 80041ce:	4b9e      	ldr	r3, [pc, #632]	@ (8004448 <Oscilloscope_Process+0xbcc>)
 80041d0:	881b      	ldrh	r3, [r3, #0]
 80041d2:	2bdc      	cmp	r3, #220	@ 0xdc
 80041d4:	d902      	bls.n	80041dc <Oscilloscope_Process+0x960>
					trigger0 = 220;
 80041d6:	4b9c      	ldr	r3, [pc, #624]	@ (8004448 <Oscilloscope_Process+0xbcc>)
 80041d8:	22dc      	movs	r2, #220	@ 0xdc
 80041da:	801a      	strh	r2, [r3, #0]

				if (trigger0 > cursor0)
 80041dc:	4b9a      	ldr	r3, [pc, #616]	@ (8004448 <Oscilloscope_Process+0xbcc>)
 80041de:	881a      	ldrh	r2, [r3, #0]
 80041e0:	4b9b      	ldr	r3, [pc, #620]	@ (8004450 <Oscilloscope_Process+0xbd4>)
 80041e2:	881b      	ldrh	r3, [r3, #0]
 80041e4:	429a      	cmp	r2, r3
 80041e6:	d903      	bls.n	80041f0 <Oscilloscope_Process+0x974>
					trigger0 = cursor0;
 80041e8:	4b99      	ldr	r3, [pc, #612]	@ (8004450 <Oscilloscope_Process+0xbd4>)
 80041ea:	881a      	ldrh	r2, [r3, #0]
 80041ec:	4b96      	ldr	r3, [pc, #600]	@ (8004448 <Oscilloscope_Process+0xbcc>)
 80041ee:	801a      	strh	r2, [r3, #0]

				float uV = -((float)(ylim_uV) * ((8.0f * (trigger0 - cursor0)) / 200.0f));
 80041f0:	4b98      	ldr	r3, [pc, #608]	@ (8004454 <Oscilloscope_Process+0xbd8>)
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	ee07 3a90 	vmov	s15, r3
 80041f8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80041fc:	4b92      	ldr	r3, [pc, #584]	@ (8004448 <Oscilloscope_Process+0xbcc>)
 80041fe:	881b      	ldrh	r3, [r3, #0]
 8004200:	461a      	mov	r2, r3
 8004202:	4b93      	ldr	r3, [pc, #588]	@ (8004450 <Oscilloscope_Process+0xbd4>)
 8004204:	881b      	ldrh	r3, [r3, #0]
 8004206:	1ad3      	subs	r3, r2, r3
 8004208:	ee07 3a90 	vmov	s15, r3
 800420c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004210:	eef2 6a00 	vmov.f32	s13, #32	@ 0x41000000  8.0
 8004214:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8004218:	ed9f 6a8f 	vldr	s12, [pc, #572]	@ 8004458 <Oscilloscope_Process+0xbdc>
 800421c:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8004220:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004224:	eef1 7a67 	vneg.f32	s15, s15
 8004228:	edc7 7a74 	vstr	s15, [r7, #464]	@ 0x1d0
				trigger0_value = uV * 4096.0f / 3300000.0f;
 800422c:	edd7 7a74 	vldr	s15, [r7, #464]	@ 0x1d0
 8004230:	ed9f 7a8a 	vldr	s14, [pc, #552]	@ 800445c <Oscilloscope_Process+0xbe0>
 8004234:	ee27 7a87 	vmul.f32	s14, s15, s14
 8004238:	eddf 6a89 	vldr	s13, [pc, #548]	@ 8004460 <Oscilloscope_Process+0xbe4>
 800423c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004240:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004244:	ee17 3a90 	vmov	r3, s15
 8004248:	b29a      	uxth	r2, r3
 800424a:	4b86      	ldr	r3, [pc, #536]	@ (8004464 <Oscilloscope_Process+0xbe8>)
 800424c:	801a      	strh	r2, [r3, #0]
			}

			if (menu_selected_item == 3) {
 800424e:	4b7d      	ldr	r3, [pc, #500]	@ (8004444 <Oscilloscope_Process+0xbc8>)
 8004250:	f993 3000 	ldrsb.w	r3, [r3]
 8004254:	2b03      	cmp	r3, #3
 8004256:	d155      	bne.n	8004304 <Oscilloscope_Process+0xa88>
				clearTrigger(&display, trigger1);
 8004258:	4b83      	ldr	r3, [pc, #524]	@ (8004468 <Oscilloscope_Process+0xbec>)
 800425a:	881b      	ldrh	r3, [r3, #0]
 800425c:	4619      	mov	r1, r3
 800425e:	487b      	ldr	r0, [pc, #492]	@ (800444c <Oscilloscope_Process+0xbd0>)
 8004260:	f7fe fd6d 	bl	8002d3e <clearTrigger>
				trigger1 += delta;
 8004264:	f8d7 31e4 	ldr.w	r3, [r7, #484]	@ 0x1e4
 8004268:	b29a      	uxth	r2, r3
 800426a:	4b7f      	ldr	r3, [pc, #508]	@ (8004468 <Oscilloscope_Process+0xbec>)
 800426c:	881b      	ldrh	r3, [r3, #0]
 800426e:	4413      	add	r3, r2
 8004270:	b29a      	uxth	r2, r3
 8004272:	4b7d      	ldr	r3, [pc, #500]	@ (8004468 <Oscilloscope_Process+0xbec>)
 8004274:	801a      	strh	r2, [r3, #0]

				if (trigger1 < 20)
 8004276:	4b7c      	ldr	r3, [pc, #496]	@ (8004468 <Oscilloscope_Process+0xbec>)
 8004278:	881b      	ldrh	r3, [r3, #0]
 800427a:	2b13      	cmp	r3, #19
 800427c:	d802      	bhi.n	8004284 <Oscilloscope_Process+0xa08>
					trigger1 = 20;
 800427e:	4b7a      	ldr	r3, [pc, #488]	@ (8004468 <Oscilloscope_Process+0xbec>)
 8004280:	2214      	movs	r2, #20
 8004282:	801a      	strh	r2, [r3, #0]

				if (trigger1 > 220)
 8004284:	4b78      	ldr	r3, [pc, #480]	@ (8004468 <Oscilloscope_Process+0xbec>)
 8004286:	881b      	ldrh	r3, [r3, #0]
 8004288:	2bdc      	cmp	r3, #220	@ 0xdc
 800428a:	d902      	bls.n	8004292 <Oscilloscope_Process+0xa16>
					trigger1 = 220;
 800428c:	4b76      	ldr	r3, [pc, #472]	@ (8004468 <Oscilloscope_Process+0xbec>)
 800428e:	22dc      	movs	r2, #220	@ 0xdc
 8004290:	801a      	strh	r2, [r3, #0]

				if (trigger1 > cursor1)
 8004292:	4b75      	ldr	r3, [pc, #468]	@ (8004468 <Oscilloscope_Process+0xbec>)
 8004294:	881a      	ldrh	r2, [r3, #0]
 8004296:	4b75      	ldr	r3, [pc, #468]	@ (800446c <Oscilloscope_Process+0xbf0>)
 8004298:	881b      	ldrh	r3, [r3, #0]
 800429a:	429a      	cmp	r2, r3
 800429c:	d903      	bls.n	80042a6 <Oscilloscope_Process+0xa2a>
					trigger1 = cursor1;
 800429e:	4b73      	ldr	r3, [pc, #460]	@ (800446c <Oscilloscope_Process+0xbf0>)
 80042a0:	881a      	ldrh	r2, [r3, #0]
 80042a2:	4b71      	ldr	r3, [pc, #452]	@ (8004468 <Oscilloscope_Process+0xbec>)
 80042a4:	801a      	strh	r2, [r3, #0]

				float uV = -((float)(ylim_uV) * ((8.0f * (trigger1 - cursor1)) / 200.0f));
 80042a6:	4b6b      	ldr	r3, [pc, #428]	@ (8004454 <Oscilloscope_Process+0xbd8>)
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	ee07 3a90 	vmov	s15, r3
 80042ae:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80042b2:	4b6d      	ldr	r3, [pc, #436]	@ (8004468 <Oscilloscope_Process+0xbec>)
 80042b4:	881b      	ldrh	r3, [r3, #0]
 80042b6:	461a      	mov	r2, r3
 80042b8:	4b6c      	ldr	r3, [pc, #432]	@ (800446c <Oscilloscope_Process+0xbf0>)
 80042ba:	881b      	ldrh	r3, [r3, #0]
 80042bc:	1ad3      	subs	r3, r2, r3
 80042be:	ee07 3a90 	vmov	s15, r3
 80042c2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80042c6:	eef2 6a00 	vmov.f32	s13, #32	@ 0x41000000  8.0
 80042ca:	ee67 6aa6 	vmul.f32	s13, s15, s13
 80042ce:	ed9f 6a62 	vldr	s12, [pc, #392]	@ 8004458 <Oscilloscope_Process+0xbdc>
 80042d2:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80042d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80042da:	eef1 7a67 	vneg.f32	s15, s15
 80042de:	edc7 7a73 	vstr	s15, [r7, #460]	@ 0x1cc
				trigger1_value = uV * 4096.0f / 3300000.0f;
 80042e2:	edd7 7a73 	vldr	s15, [r7, #460]	@ 0x1cc
 80042e6:	ed9f 7a5d 	vldr	s14, [pc, #372]	@ 800445c <Oscilloscope_Process+0xbe0>
 80042ea:	ee27 7a87 	vmul.f32	s14, s15, s14
 80042ee:	eddf 6a5c 	vldr	s13, [pc, #368]	@ 8004460 <Oscilloscope_Process+0xbe4>
 80042f2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80042f6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80042fa:	ee17 3a90 	vmov	r3, s15
 80042fe:	b29a      	uxth	r2, r3
 8004300:	4b5b      	ldr	r3, [pc, #364]	@ (8004470 <Oscilloscope_Process+0xbf4>)
 8004302:	801a      	strh	r2, [r3, #0]
			}

		}

		event_trigger = 1;
 8004304:	4b5b      	ldr	r3, [pc, #364]	@ (8004474 <Oscilloscope_Process+0xbf8>)
 8004306:	2201      	movs	r2, #1
 8004308:	701a      	strb	r2, [r3, #0]
		encoder1_prev = encoder1_curr;
 800430a:	f8d7 31d4 	ldr.w	r3, [r7, #468]	@ 0x1d4
 800430e:	b29a      	uxth	r2, r3
 8004310:	4b59      	ldr	r3, [pc, #356]	@ (8004478 <Oscilloscope_Process+0xbfc>)
 8004312:	801a      	strh	r2, [r3, #0]
	}

	// Handle UI redraw trigger events
	if (event_trigger) {
 8004314:	4b57      	ldr	r3, [pc, #348]	@ (8004474 <Oscilloscope_Process+0xbf8>)
 8004316:	781b      	ldrb	r3, [r3, #0]
 8004318:	2b00      	cmp	r3, #0
 800431a:	d026      	beq.n	800436a <Oscilloscope_Process+0xaee>
		clearTrigger(&display, trigger0);
 800431c:	4b4a      	ldr	r3, [pc, #296]	@ (8004448 <Oscilloscope_Process+0xbcc>)
 800431e:	881b      	ldrh	r3, [r3, #0]
 8004320:	4619      	mov	r1, r3
 8004322:	484a      	ldr	r0, [pc, #296]	@ (800444c <Oscilloscope_Process+0xbd0>)
 8004324:	f7fe fd0b 	bl	8002d3e <clearTrigger>
		clearTrigger(&display, trigger1);
 8004328:	4b4f      	ldr	r3, [pc, #316]	@ (8004468 <Oscilloscope_Process+0xbec>)
 800432a:	881b      	ldrh	r3, [r3, #0]
 800432c:	4619      	mov	r1, r3
 800432e:	4847      	ldr	r0, [pc, #284]	@ (800444c <Oscilloscope_Process+0xbd0>)
 8004330:	f7fe fd05 	bl	8002d3e <clearTrigger>

		if (menu_channel0_enabled)
 8004334:	4b51      	ldr	r3, [pc, #324]	@ (800447c <Oscilloscope_Process+0xc00>)
 8004336:	781b      	ldrb	r3, [r3, #0]
 8004338:	2b00      	cmp	r3, #0
 800433a:	d007      	beq.n	800434c <Oscilloscope_Process+0xad0>
			drawTrigger(&display, trigger0, "T1", ILI9341_YELLOW);
 800433c:	4b42      	ldr	r3, [pc, #264]	@ (8004448 <Oscilloscope_Process+0xbcc>)
 800433e:	8819      	ldrh	r1, [r3, #0]
 8004340:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8004344:	4a4e      	ldr	r2, [pc, #312]	@ (8004480 <Oscilloscope_Process+0xc04>)
 8004346:	4841      	ldr	r0, [pc, #260]	@ (800444c <Oscilloscope_Process+0xbd0>)
 8004348:	f7fe fd62 	bl	8002e10 <drawTrigger>

		if (menu_channel1_enabled)
 800434c:	4b4d      	ldr	r3, [pc, #308]	@ (8004484 <Oscilloscope_Process+0xc08>)
 800434e:	781b      	ldrb	r3, [r3, #0]
 8004350:	2b00      	cmp	r3, #0
 8004352:	d007      	beq.n	8004364 <Oscilloscope_Process+0xae8>
			drawTrigger(&display, trigger1, "T2", ILI9341_CYAN);
 8004354:	4b44      	ldr	r3, [pc, #272]	@ (8004468 <Oscilloscope_Process+0xbec>)
 8004356:	8819      	ldrh	r1, [r3, #0]
 8004358:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 800435c:	4a4a      	ldr	r2, [pc, #296]	@ (8004488 <Oscilloscope_Process+0xc0c>)
 800435e:	483b      	ldr	r0, [pc, #236]	@ (800444c <Oscilloscope_Process+0xbd0>)
 8004360:	f7fe fd56 	bl	8002e10 <drawTrigger>

		event_trigger = 0;
 8004364:	4b43      	ldr	r3, [pc, #268]	@ (8004474 <Oscilloscope_Process+0xbf8>)
 8004366:	2200      	movs	r2, #0
 8004368:	701a      	strb	r2, [r3, #0]
	}

	// Handle UI redraw selector events
	if (event_selector) {
 800436a:	4b48      	ldr	r3, [pc, #288]	@ (800448c <Oscilloscope_Process+0xc10>)
 800436c:	781b      	ldrb	r3, [r3, #0]
 800436e:	2b00      	cmp	r3, #0
 8004370:	d00f      	beq.n	8004392 <Oscilloscope_Process+0xb16>
		ILI9341_Rectangle(&display, menu_selector_x, menu_selector_y, 38, 13, ILI9341_WHITE);
 8004372:	4b47      	ldr	r3, [pc, #284]	@ (8004490 <Oscilloscope_Process+0xc14>)
 8004374:	8819      	ldrh	r1, [r3, #0]
 8004376:	4b47      	ldr	r3, [pc, #284]	@ (8004494 <Oscilloscope_Process+0xc18>)
 8004378:	881a      	ldrh	r2, [r3, #0]
 800437a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800437e:	9301      	str	r3, [sp, #4]
 8004380:	230d      	movs	r3, #13
 8004382:	9300      	str	r3, [sp, #0]
 8004384:	2326      	movs	r3, #38	@ 0x26
 8004386:	4831      	ldr	r0, [pc, #196]	@ (800444c <Oscilloscope_Process+0xbd0>)
 8004388:	f7fd fe22 	bl	8001fd0 <ILI9341_Rectangle>
		event_selector = 0;
 800438c:	4b3f      	ldr	r3, [pc, #252]	@ (800448c <Oscilloscope_Process+0xc10>)
 800438e:	2200      	movs	r2, #0
 8004390:	701a      	strb	r2, [r3, #0]
	}

	// Handle UI redraw mode events
	if (event_mode) {
 8004392:	4b41      	ldr	r3, [pc, #260]	@ (8004498 <Oscilloscope_Process+0xc1c>)
 8004394:	781b      	ldrb	r3, [r3, #0]
 8004396:	2b00      	cmp	r3, #0
 8004398:	d040      	beq.n	800441c <Oscilloscope_Process+0xba0>
		if (mode == 0)
 800439a:	4b40      	ldr	r3, [pc, #256]	@ (800449c <Oscilloscope_Process+0xc20>)
 800439c:	781b      	ldrb	r3, [r3, #0]
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d110      	bne.n	80043c4 <Oscilloscope_Process+0xb48>
			ILI9341_WriteString(&display, 22, 5, " RUN ", Font_7x10, ILI9341_BLACK, ILI9341_GREEN);
 80043a2:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 80043a6:	9303      	str	r3, [sp, #12]
 80043a8:	2300      	movs	r3, #0
 80043aa:	9302      	str	r3, [sp, #8]
 80043ac:	4a3c      	ldr	r2, [pc, #240]	@ (80044a0 <Oscilloscope_Process+0xc24>)
 80043ae:	466b      	mov	r3, sp
 80043b0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80043b4:	e883 0003 	stmia.w	r3, {r0, r1}
 80043b8:	4b3a      	ldr	r3, [pc, #232]	@ (80044a4 <Oscilloscope_Process+0xc28>)
 80043ba:	2205      	movs	r2, #5
 80043bc:	2116      	movs	r1, #22
 80043be:	4823      	ldr	r0, [pc, #140]	@ (800444c <Oscilloscope_Process+0xbd0>)
 80043c0:	f7fd fec1 	bl	8002146 <ILI9341_WriteString>

		if (mode == 1)
 80043c4:	4b35      	ldr	r3, [pc, #212]	@ (800449c <Oscilloscope_Process+0xc20>)
 80043c6:	781b      	ldrb	r3, [r3, #0]
 80043c8:	2b01      	cmp	r3, #1
 80043ca:	d10f      	bne.n	80043ec <Oscilloscope_Process+0xb70>
			ILI9341_WriteString(&display, 22, 5, "MENU:", Font_7x10, ILI9341_BLACK, ILI9341_BLUE);
 80043cc:	231f      	movs	r3, #31
 80043ce:	9303      	str	r3, [sp, #12]
 80043d0:	2300      	movs	r3, #0
 80043d2:	9302      	str	r3, [sp, #8]
 80043d4:	4a32      	ldr	r2, [pc, #200]	@ (80044a0 <Oscilloscope_Process+0xc24>)
 80043d6:	466b      	mov	r3, sp
 80043d8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80043dc:	e883 0003 	stmia.w	r3, {r0, r1}
 80043e0:	4b31      	ldr	r3, [pc, #196]	@ (80044a8 <Oscilloscope_Process+0xc2c>)
 80043e2:	2205      	movs	r2, #5
 80043e4:	2116      	movs	r1, #22
 80043e6:	4819      	ldr	r0, [pc, #100]	@ (800444c <Oscilloscope_Process+0xbd0>)
 80043e8:	f7fd fead 	bl	8002146 <ILI9341_WriteString>

		if (mode == 2)
 80043ec:	4b2b      	ldr	r3, [pc, #172]	@ (800449c <Oscilloscope_Process+0xc20>)
 80043ee:	781b      	ldrb	r3, [r3, #0]
 80043f0:	2b02      	cmp	r3, #2
 80043f2:	d110      	bne.n	8004416 <Oscilloscope_Process+0xb9a>
			ILI9341_WriteString(&display, 22, 5, "HOLD:", Font_7x10, ILI9341_BLACK, ILI9341_YELLOW);
 80043f4:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 80043f8:	9303      	str	r3, [sp, #12]
 80043fa:	2300      	movs	r3, #0
 80043fc:	9302      	str	r3, [sp, #8]
 80043fe:	4a28      	ldr	r2, [pc, #160]	@ (80044a0 <Oscilloscope_Process+0xc24>)
 8004400:	466b      	mov	r3, sp
 8004402:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004406:	e883 0003 	stmia.w	r3, {r0, r1}
 800440a:	4b28      	ldr	r3, [pc, #160]	@ (80044ac <Oscilloscope_Process+0xc30>)
 800440c:	2205      	movs	r2, #5
 800440e:	2116      	movs	r1, #22
 8004410:	480e      	ldr	r0, [pc, #56]	@ (800444c <Oscilloscope_Process+0xbd0>)
 8004412:	f7fd fe98 	bl	8002146 <ILI9341_WriteString>

		event_mode = 0;
 8004416:	4b20      	ldr	r3, [pc, #128]	@ (8004498 <Oscilloscope_Process+0xc1c>)
 8004418:	2200      	movs	r2, #0
 800441a:	701a      	strb	r2, [r3, #0]
	}

	// Handle UI redraw trigger mode events
	if (event_trigger_mode) {
 800441c:	4b24      	ldr	r3, [pc, #144]	@ (80044b0 <Oscilloscope_Process+0xc34>)
 800441e:	781b      	ldrb	r3, [r3, #0]
 8004420:	2b00      	cmp	r3, #0
 8004422:	f000 80e0 	beq.w	80045e6 <Oscilloscope_Process+0xd6a>
		ILI9341_FillRectangle(&display, 61,  5, 33, 10, ILI9341_BLACK);
 8004426:	2300      	movs	r3, #0
 8004428:	9301      	str	r3, [sp, #4]
 800442a:	230a      	movs	r3, #10
 800442c:	9300      	str	r3, [sp, #0]
 800442e:	2321      	movs	r3, #33	@ 0x21
 8004430:	2205      	movs	r2, #5
 8004432:	213d      	movs	r1, #61	@ 0x3d
 8004434:	4805      	ldr	r0, [pc, #20]	@ (800444c <Oscilloscope_Process+0xbd0>)
 8004436:	f7fd fd6e 	bl	8001f16 <ILI9341_FillRectangle>
		ILI9341_FillRectangle(&display, 61, 14, 11, 1, ILI9341_WHITE);
 800443a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800443e:	9301      	str	r3, [sp, #4]
 8004440:	e038      	b.n	80044b4 <Oscilloscope_Process+0xc38>
 8004442:	bf00      	nop
 8004444:	2000d10d 	.word	0x2000d10d
 8004448:	2000d0f8 	.word	0x2000d0f8
 800444c:	2000d4b8 	.word	0x2000d4b8
 8004450:	2000d0f4 	.word	0x2000d0f4
 8004454:	2000d0f0 	.word	0x2000d0f0
 8004458:	43480000 	.word	0x43480000
 800445c:	45800000 	.word	0x45800000
 8004460:	4a496a80 	.word	0x4a496a80
 8004464:	2000d0fc 	.word	0x2000d0fc
 8004468:	2000d0fa 	.word	0x2000d0fa
 800446c:	2000d0f6 	.word	0x2000d0f6
 8004470:	2000d0fe 	.word	0x2000d0fe
 8004474:	2000d103 	.word	0x2000d103
 8004478:	20013536 	.word	0x20013536
 800447c:	2000d10b 	.word	0x2000d10b
 8004480:	0800f4e4 	.word	0x0800f4e4
 8004484:	2000d10c 	.word	0x2000d10c
 8004488:	0800f4e8 	.word	0x0800f4e8
 800448c:	2000d107 	.word	0x2000d107
 8004490:	2000d10e 	.word	0x2000d10e
 8004494:	2000d110 	.word	0x2000d110
 8004498:	2000d101 	.word	0x2000d101
 800449c:	20013532 	.word	0x20013532
 80044a0:	20000000 	.word	0x20000000
 80044a4:	0800f4ec 	.word	0x0800f4ec
 80044a8:	0800f4f4 	.word	0x0800f4f4
 80044ac:	0800f4fc 	.word	0x0800f4fc
 80044b0:	2000d108 	.word	0x2000d108
 80044b4:	2301      	movs	r3, #1
 80044b6:	9300      	str	r3, [sp, #0]
 80044b8:	230b      	movs	r3, #11
 80044ba:	220e      	movs	r2, #14
 80044bc:	213d      	movs	r1, #61	@ 0x3d
 80044be:	48aa      	ldr	r0, [pc, #680]	@ (8004768 <Oscilloscope_Process+0xeec>)
 80044c0:	f7fd fd29 	bl	8001f16 <ILI9341_FillRectangle>
		ILI9341_FillRectangle(&display, 72,  5, 11, 1, ILI9341_WHITE);
 80044c4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80044c8:	9301      	str	r3, [sp, #4]
 80044ca:	2301      	movs	r3, #1
 80044cc:	9300      	str	r3, [sp, #0]
 80044ce:	230b      	movs	r3, #11
 80044d0:	2205      	movs	r2, #5
 80044d2:	2148      	movs	r1, #72	@ 0x48
 80044d4:	48a4      	ldr	r0, [pc, #656]	@ (8004768 <Oscilloscope_Process+0xeec>)
 80044d6:	f7fd fd1e 	bl	8001f16 <ILI9341_FillRectangle>
		ILI9341_FillRectangle(&display, 83, 14, 11, 1, ILI9341_WHITE);
 80044da:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80044de:	9301      	str	r3, [sp, #4]
 80044e0:	2301      	movs	r3, #1
 80044e2:	9300      	str	r3, [sp, #0]
 80044e4:	230b      	movs	r3, #11
 80044e6:	220e      	movs	r2, #14
 80044e8:	2153      	movs	r1, #83	@ 0x53
 80044ea:	489f      	ldr	r0, [pc, #636]	@ (8004768 <Oscilloscope_Process+0xeec>)
 80044ec:	f7fd fd13 	bl	8001f16 <ILI9341_FillRectangle>
		ILI9341_FillRectangle(&display, 72,  5, 1, 10, ILI9341_WHITE);
 80044f0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80044f4:	9301      	str	r3, [sp, #4]
 80044f6:	230a      	movs	r3, #10
 80044f8:	9300      	str	r3, [sp, #0]
 80044fa:	2301      	movs	r3, #1
 80044fc:	2205      	movs	r2, #5
 80044fe:	2148      	movs	r1, #72	@ 0x48
 8004500:	4899      	ldr	r0, [pc, #612]	@ (8004768 <Oscilloscope_Process+0xeec>)
 8004502:	f7fd fd08 	bl	8001f16 <ILI9341_FillRectangle>
		ILI9341_FillRectangle(&display, 82,  5, 1, 10, ILI9341_WHITE);
 8004506:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800450a:	9301      	str	r3, [sp, #4]
 800450c:	230a      	movs	r3, #10
 800450e:	9300      	str	r3, [sp, #0]
 8004510:	2301      	movs	r3, #1
 8004512:	2205      	movs	r2, #5
 8004514:	2152      	movs	r1, #82	@ 0x52
 8004516:	4894      	ldr	r0, [pc, #592]	@ (8004768 <Oscilloscope_Process+0xeec>)
 8004518:	f7fd fcfd 	bl	8001f16 <ILI9341_FillRectangle>

		if (trigger_mode == 0) {
 800451c:	4b93      	ldr	r3, [pc, #588]	@ (800476c <Oscilloscope_Process+0xef0>)
 800451e:	781b      	ldrb	r3, [r3, #0]
 8004520:	2b00      	cmp	r3, #0
 8004522:	d12f      	bne.n	8004584 <Oscilloscope_Process+0xd08>
			for (uint8_t i = 0; i < 4; i++) {
 8004524:	2300      	movs	r3, #0
 8004526:	f887 31e3 	strb.w	r3, [r7, #483]	@ 0x1e3
 800452a:	e026      	b.n	800457a <Oscilloscope_Process+0xcfe>
				for (uint8_t j = i; j < (7 - i); j++)
 800452c:	f897 31e3 	ldrb.w	r3, [r7, #483]	@ 0x1e3
 8004530:	f887 31e2 	strb.w	r3, [r7, #482]	@ 0x1e2
 8004534:	e014      	b.n	8004560 <Oscilloscope_Process+0xce4>
					ILI9341_DrawPixel(&display, 69 + j, 11 - i, ILI9341_GREEN);
 8004536:	f897 31e2 	ldrb.w	r3, [r7, #482]	@ 0x1e2
 800453a:	b29b      	uxth	r3, r3
 800453c:	3345      	adds	r3, #69	@ 0x45
 800453e:	b299      	uxth	r1, r3
 8004540:	f897 31e3 	ldrb.w	r3, [r7, #483]	@ 0x1e3
 8004544:	b29b      	uxth	r3, r3
 8004546:	f1c3 030b 	rsb	r3, r3, #11
 800454a:	b29a      	uxth	r2, r3
 800454c:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8004550:	4885      	ldr	r0, [pc, #532]	@ (8004768 <Oscilloscope_Process+0xeec>)
 8004552:	f7fd fbd5 	bl	8001d00 <ILI9341_DrawPixel>
				for (uint8_t j = i; j < (7 - i); j++)
 8004556:	f897 31e2 	ldrb.w	r3, [r7, #482]	@ 0x1e2
 800455a:	3301      	adds	r3, #1
 800455c:	f887 31e2 	strb.w	r3, [r7, #482]	@ 0x1e2
 8004560:	f897 21e2 	ldrb.w	r2, [r7, #482]	@ 0x1e2
 8004564:	f897 31e3 	ldrb.w	r3, [r7, #483]	@ 0x1e3
 8004568:	f1c3 0307 	rsb	r3, r3, #7
 800456c:	429a      	cmp	r2, r3
 800456e:	dbe2      	blt.n	8004536 <Oscilloscope_Process+0xcba>
			for (uint8_t i = 0; i < 4; i++) {
 8004570:	f897 31e3 	ldrb.w	r3, [r7, #483]	@ 0x1e3
 8004574:	3301      	adds	r3, #1
 8004576:	f887 31e3 	strb.w	r3, [r7, #483]	@ 0x1e3
 800457a:	f897 31e3 	ldrb.w	r3, [r7, #483]	@ 0x1e3
 800457e:	2b03      	cmp	r3, #3
 8004580:	d9d4      	bls.n	800452c <Oscilloscope_Process+0xcb0>
 8004582:	e02d      	b.n	80045e0 <Oscilloscope_Process+0xd64>
			}
		} else {
			for (uint8_t i = 0; i < 4; i++) {
 8004584:	2300      	movs	r3, #0
 8004586:	f887 31e1 	strb.w	r3, [r7, #481]	@ 0x1e1
 800458a:	e025      	b.n	80045d8 <Oscilloscope_Process+0xd5c>
			  for (uint8_t j = i; j < (7 - i); j++)
 800458c:	f897 31e1 	ldrb.w	r3, [r7, #481]	@ 0x1e1
 8004590:	f887 31e0 	strb.w	r3, [r7, #480]	@ 0x1e0
 8004594:	e013      	b.n	80045be <Oscilloscope_Process+0xd42>
				  ILI9341_DrawPixel(&display, 79 + j, 8 + i, ILI9341_RED);
 8004596:	f897 31e0 	ldrb.w	r3, [r7, #480]	@ 0x1e0
 800459a:	b29b      	uxth	r3, r3
 800459c:	334f      	adds	r3, #79	@ 0x4f
 800459e:	b299      	uxth	r1, r3
 80045a0:	f897 31e1 	ldrb.w	r3, [r7, #481]	@ 0x1e1
 80045a4:	b29b      	uxth	r3, r3
 80045a6:	3308      	adds	r3, #8
 80045a8:	b29a      	uxth	r2, r3
 80045aa:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 80045ae:	486e      	ldr	r0, [pc, #440]	@ (8004768 <Oscilloscope_Process+0xeec>)
 80045b0:	f7fd fba6 	bl	8001d00 <ILI9341_DrawPixel>
			  for (uint8_t j = i; j < (7 - i); j++)
 80045b4:	f897 31e0 	ldrb.w	r3, [r7, #480]	@ 0x1e0
 80045b8:	3301      	adds	r3, #1
 80045ba:	f887 31e0 	strb.w	r3, [r7, #480]	@ 0x1e0
 80045be:	f897 21e0 	ldrb.w	r2, [r7, #480]	@ 0x1e0
 80045c2:	f897 31e1 	ldrb.w	r3, [r7, #481]	@ 0x1e1
 80045c6:	f1c3 0307 	rsb	r3, r3, #7
 80045ca:	429a      	cmp	r2, r3
 80045cc:	dbe3      	blt.n	8004596 <Oscilloscope_Process+0xd1a>
			for (uint8_t i = 0; i < 4; i++) {
 80045ce:	f897 31e1 	ldrb.w	r3, [r7, #481]	@ 0x1e1
 80045d2:	3301      	adds	r3, #1
 80045d4:	f887 31e1 	strb.w	r3, [r7, #481]	@ 0x1e1
 80045d8:	f897 31e1 	ldrb.w	r3, [r7, #481]	@ 0x1e1
 80045dc:	2b03      	cmp	r3, #3
 80045de:	d9d5      	bls.n	800458c <Oscilloscope_Process+0xd10>
			}
		}

		event_trigger_mode = 0;
 80045e0:	4b63      	ldr	r3, [pc, #396]	@ (8004770 <Oscilloscope_Process+0xef4>)
 80045e2:	2200      	movs	r2, #0
 80045e4:	701a      	strb	r2, [r3, #0]
	}

	// Handle UI redraw seconds events
	if (event_seconds) {
 80045e6:	4b63      	ldr	r3, [pc, #396]	@ (8004774 <Oscilloscope_Process+0xef8>)
 80045e8:	781b      	ldrb	r3, [r3, #0]
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d03f      	beq.n	800466e <Oscilloscope_Process+0xdf2>
		if (xlim_us >= 1000000)
 80045ee:	4b62      	ldr	r3, [pc, #392]	@ (8004778 <Oscilloscope_Process+0xefc>)
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	4a62      	ldr	r2, [pc, #392]	@ (800477c <Oscilloscope_Process+0xf00>)
 80045f4:	4293      	cmp	r3, r2
 80045f6:	d90c      	bls.n	8004612 <Oscilloscope_Process+0xd96>
			snprintf(string, 255, "%3li s",  xlim_us / 1000000);
 80045f8:	4b5f      	ldr	r3, [pc, #380]	@ (8004778 <Oscilloscope_Process+0xefc>)
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	4a60      	ldr	r2, [pc, #384]	@ (8004780 <Oscilloscope_Process+0xf04>)
 80045fe:	fba2 2303 	umull	r2, r3, r2, r3
 8004602:	0c9b      	lsrs	r3, r3, #18
 8004604:	f107 00cc 	add.w	r0, r7, #204	@ 0xcc
 8004608:	4a5e      	ldr	r2, [pc, #376]	@ (8004784 <Oscilloscope_Process+0xf08>)
 800460a:	21ff      	movs	r1, #255	@ 0xff
 800460c:	f007 fa66 	bl	800badc <sniprintf>
 8004610:	e019      	b.n	8004646 <Oscilloscope_Process+0xdca>
		else if (xlim_us >= 1000)
 8004612:	4b59      	ldr	r3, [pc, #356]	@ (8004778 <Oscilloscope_Process+0xefc>)
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800461a:	d30c      	bcc.n	8004636 <Oscilloscope_Process+0xdba>
			snprintf(string, 255, "%3lims", xlim_us / 1000);
 800461c:	4b56      	ldr	r3, [pc, #344]	@ (8004778 <Oscilloscope_Process+0xefc>)
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	4a59      	ldr	r2, [pc, #356]	@ (8004788 <Oscilloscope_Process+0xf0c>)
 8004622:	fba2 2303 	umull	r2, r3, r2, r3
 8004626:	099b      	lsrs	r3, r3, #6
 8004628:	f107 00cc 	add.w	r0, r7, #204	@ 0xcc
 800462c:	4a57      	ldr	r2, [pc, #348]	@ (800478c <Oscilloscope_Process+0xf10>)
 800462e:	21ff      	movs	r1, #255	@ 0xff
 8004630:	f007 fa54 	bl	800badc <sniprintf>
 8004634:	e007      	b.n	8004646 <Oscilloscope_Process+0xdca>
		else
			snprintf(string, 255, "%3lius", xlim_us);
 8004636:	4b50      	ldr	r3, [pc, #320]	@ (8004778 <Oscilloscope_Process+0xefc>)
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	f107 00cc 	add.w	r0, r7, #204	@ 0xcc
 800463e:	4a54      	ldr	r2, [pc, #336]	@ (8004790 <Oscilloscope_Process+0xf14>)
 8004640:	21ff      	movs	r1, #255	@ 0xff
 8004642:	f007 fa4b 	bl	800badc <sniprintf>

		ILI9341_WriteString(&display, 22, 225, string, Font_7x10, ILI9341_BLACK, ILI9341_WHITE);
 8004646:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 800464a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800464e:	9203      	str	r2, [sp, #12]
 8004650:	2200      	movs	r2, #0
 8004652:	9202      	str	r2, [sp, #8]
 8004654:	494f      	ldr	r1, [pc, #316]	@ (8004794 <Oscilloscope_Process+0xf18>)
 8004656:	466a      	mov	r2, sp
 8004658:	c903      	ldmia	r1, {r0, r1}
 800465a:	e882 0003 	stmia.w	r2, {r0, r1}
 800465e:	22e1      	movs	r2, #225	@ 0xe1
 8004660:	2116      	movs	r1, #22
 8004662:	4841      	ldr	r0, [pc, #260]	@ (8004768 <Oscilloscope_Process+0xeec>)
 8004664:	f7fd fd6f 	bl	8002146 <ILI9341_WriteString>

		event_seconds = 0;
 8004668:	4b42      	ldr	r3, [pc, #264]	@ (8004774 <Oscilloscope_Process+0xef8>)
 800466a:	2200      	movs	r2, #0
 800466c:	701a      	strb	r2, [r3, #0]
	}

	// Handle UI redraw voltage events
	if (event_voltage) {
 800466e:	4b4a      	ldr	r3, [pc, #296]	@ (8004798 <Oscilloscope_Process+0xf1c>)
 8004670:	781b      	ldrb	r3, [r3, #0]
 8004672:	2b00      	cmp	r3, #0
 8004674:	d03f      	beq.n	80046f6 <Oscilloscope_Process+0xe7a>
		if (ylim_uV >= 1000000)
 8004676:	4b49      	ldr	r3, [pc, #292]	@ (800479c <Oscilloscope_Process+0xf20>)
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	4a40      	ldr	r2, [pc, #256]	@ (800477c <Oscilloscope_Process+0xf00>)
 800467c:	4293      	cmp	r3, r2
 800467e:	d90c      	bls.n	800469a <Oscilloscope_Process+0xe1e>
			snprintf(string, 255, "%3li V",  ylim_uV / 1000000);
 8004680:	4b46      	ldr	r3, [pc, #280]	@ (800479c <Oscilloscope_Process+0xf20>)
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	4a3e      	ldr	r2, [pc, #248]	@ (8004780 <Oscilloscope_Process+0xf04>)
 8004686:	fba2 2303 	umull	r2, r3, r2, r3
 800468a:	0c9b      	lsrs	r3, r3, #18
 800468c:	f107 00cc 	add.w	r0, r7, #204	@ 0xcc
 8004690:	4a43      	ldr	r2, [pc, #268]	@ (80047a0 <Oscilloscope_Process+0xf24>)
 8004692:	21ff      	movs	r1, #255	@ 0xff
 8004694:	f007 fa22 	bl	800badc <sniprintf>
 8004698:	e019      	b.n	80046ce <Oscilloscope_Process+0xe52>
		else if (ylim_uV >= 1000)
 800469a:	4b40      	ldr	r3, [pc, #256]	@ (800479c <Oscilloscope_Process+0xf20>)
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80046a2:	d30c      	bcc.n	80046be <Oscilloscope_Process+0xe42>
			snprintf(string, 255, "%3limV", ylim_uV / 1000);
 80046a4:	4b3d      	ldr	r3, [pc, #244]	@ (800479c <Oscilloscope_Process+0xf20>)
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	4a37      	ldr	r2, [pc, #220]	@ (8004788 <Oscilloscope_Process+0xf0c>)
 80046aa:	fba2 2303 	umull	r2, r3, r2, r3
 80046ae:	099b      	lsrs	r3, r3, #6
 80046b0:	f107 00cc 	add.w	r0, r7, #204	@ 0xcc
 80046b4:	4a3b      	ldr	r2, [pc, #236]	@ (80047a4 <Oscilloscope_Process+0xf28>)
 80046b6:	21ff      	movs	r1, #255	@ 0xff
 80046b8:	f007 fa10 	bl	800badc <sniprintf>
 80046bc:	e007      	b.n	80046ce <Oscilloscope_Process+0xe52>
		else
			snprintf(string, 255, "%3liuV", ylim_uV);
 80046be:	4b37      	ldr	r3, [pc, #220]	@ (800479c <Oscilloscope_Process+0xf20>)
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	f107 00cc 	add.w	r0, r7, #204	@ 0xcc
 80046c6:	4a38      	ldr	r2, [pc, #224]	@ (80047a8 <Oscilloscope_Process+0xf2c>)
 80046c8:	21ff      	movs	r1, #255	@ 0xff
 80046ca:	f007 fa07 	bl	800badc <sniprintf>

		ILI9341_WriteString(&display, 60, 225, string, Font_7x10, ILI9341_BLACK, ILI9341_WHITE);
 80046ce:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 80046d2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80046d6:	9203      	str	r2, [sp, #12]
 80046d8:	2200      	movs	r2, #0
 80046da:	9202      	str	r2, [sp, #8]
 80046dc:	492d      	ldr	r1, [pc, #180]	@ (8004794 <Oscilloscope_Process+0xf18>)
 80046de:	466a      	mov	r2, sp
 80046e0:	c903      	ldmia	r1, {r0, r1}
 80046e2:	e882 0003 	stmia.w	r2, {r0, r1}
 80046e6:	22e1      	movs	r2, #225	@ 0xe1
 80046e8:	213c      	movs	r1, #60	@ 0x3c
 80046ea:	481f      	ldr	r0, [pc, #124]	@ (8004768 <Oscilloscope_Process+0xeec>)
 80046ec:	f7fd fd2b 	bl	8002146 <ILI9341_WriteString>

		event_voltage = 0;
 80046f0:	4b29      	ldr	r3, [pc, #164]	@ (8004798 <Oscilloscope_Process+0xf1c>)
 80046f2:	2200      	movs	r2, #0
 80046f4:	701a      	strb	r2, [r3, #0]
	}

	snprintf(string, 255, "T:%i%i", event_trigger0_detected, event_trigger1_detected);
 80046f6:	4b2d      	ldr	r3, [pc, #180]	@ (80047ac <Oscilloscope_Process+0xf30>)
 80046f8:	781b      	ldrb	r3, [r3, #0]
 80046fa:	461a      	mov	r2, r3
 80046fc:	4b2c      	ldr	r3, [pc, #176]	@ (80047b0 <Oscilloscope_Process+0xf34>)
 80046fe:	781b      	ldrb	r3, [r3, #0]
 8004700:	f107 00cc 	add.w	r0, r7, #204	@ 0xcc
 8004704:	9300      	str	r3, [sp, #0]
 8004706:	4613      	mov	r3, r2
 8004708:	4a2a      	ldr	r2, [pc, #168]	@ (80047b4 <Oscilloscope_Process+0xf38>)
 800470a:	21ff      	movs	r1, #255	@ 0xff
 800470c:	f007 f9e6 	bl	800badc <sniprintf>
	ILI9341_WriteString(&display, 195, 5, string, Font_7x10, ILI9341_WHITE, ILI9341_BLACK);
 8004710:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8004714:	2200      	movs	r2, #0
 8004716:	9203      	str	r2, [sp, #12]
 8004718:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800471c:	9202      	str	r2, [sp, #8]
 800471e:	491d      	ldr	r1, [pc, #116]	@ (8004794 <Oscilloscope_Process+0xf18>)
 8004720:	466a      	mov	r2, sp
 8004722:	c903      	ldmia	r1, {r0, r1}
 8004724:	e882 0003 	stmia.w	r2, {r0, r1}
 8004728:	2205      	movs	r2, #5
 800472a:	21c3      	movs	r1, #195	@ 0xc3
 800472c:	480e      	ldr	r0, [pc, #56]	@ (8004768 <Oscilloscope_Process+0xeec>)
 800472e:	f7fd fd0a 	bl	8002146 <ILI9341_WriteString>

	if (menu_channel1_enabled && menu_selected_item == 3) {
 8004732:	4b21      	ldr	r3, [pc, #132]	@ (80047b8 <Oscilloscope_Process+0xf3c>)
 8004734:	781b      	ldrb	r3, [r3, #0]
 8004736:	2b00      	cmp	r3, #0
 8004738:	d048      	beq.n	80047cc <Oscilloscope_Process+0xf50>
 800473a:	4b20      	ldr	r3, [pc, #128]	@ (80047bc <Oscilloscope_Process+0xf40>)
 800473c:	f993 3000 	ldrsb.w	r3, [r3]
 8004740:	2b03      	cmp	r3, #3
 8004742:	d143      	bne.n	80047cc <Oscilloscope_Process+0xf50>
		//if (adc_period1_detected)
			drawSignalParam(&display, string, 255, adc_max[1], adc_min[1], adc_period[1]);
 8004744:	4b1e      	ldr	r3, [pc, #120]	@ (80047c0 <Oscilloscope_Process+0xf44>)
 8004746:	885b      	ldrh	r3, [r3, #2]
 8004748:	b298      	uxth	r0, r3
 800474a:	4b1e      	ldr	r3, [pc, #120]	@ (80047c4 <Oscilloscope_Process+0xf48>)
 800474c:	885b      	ldrh	r3, [r3, #2]
 800474e:	b29b      	uxth	r3, r3
 8004750:	4a1d      	ldr	r2, [pc, #116]	@ (80047c8 <Oscilloscope_Process+0xf4c>)
 8004752:	6852      	ldr	r2, [r2, #4]
 8004754:	f107 01cc 	add.w	r1, r7, #204	@ 0xcc
 8004758:	9201      	str	r2, [sp, #4]
 800475a:	9300      	str	r3, [sp, #0]
 800475c:	4603      	mov	r3, r0
 800475e:	22ff      	movs	r2, #255	@ 0xff
 8004760:	4801      	ldr	r0, [pc, #4]	@ (8004768 <Oscilloscope_Process+0xeec>)
 8004762:	f7fe ff63 	bl	800362c <drawSignalParam>
 8004766:	e046      	b.n	80047f6 <Oscilloscope_Process+0xf7a>
 8004768:	2000d4b8 	.word	0x2000d4b8
 800476c:	2001352c 	.word	0x2001352c
 8004770:	2000d108 	.word	0x2000d108
 8004774:	2000d105 	.word	0x2000d105
 8004778:	2000d0ec 	.word	0x2000d0ec
 800477c:	000f423f 	.word	0x000f423f
 8004780:	431bde83 	.word	0x431bde83
 8004784:	0800f504 	.word	0x0800f504
 8004788:	10624dd3 	.word	0x10624dd3
 800478c:	0800f50c 	.word	0x0800f50c
 8004790:	0800f514 	.word	0x0800f514
 8004794:	20000000 	.word	0x20000000
 8004798:	2000d106 	.word	0x2000d106
 800479c:	2000d0f0 	.word	0x2000d0f0
 80047a0:	0800f51c 	.word	0x0800f51c
 80047a4:	0800f524 	.word	0x0800f524
 80047a8:	0800f52c 	.word	0x0800f52c
 80047ac:	2000d109 	.word	0x2000d109
 80047b0:	2000d10a 	.word	0x2000d10a
 80047b4:	0800f534 	.word	0x0800f534
 80047b8:	2000d10c 	.word	0x2000d10c
 80047bc:	2000d10d 	.word	0x2000d10d
 80047c0:	2000d51c 	.word	0x2000d51c
 80047c4:	2000d0e4 	.word	0x2000d0e4
 80047c8:	2000d520 	.word	0x2000d520
	} else if (menu_channel0_enabled) {
 80047cc:	4b39      	ldr	r3, [pc, #228]	@ (80048b4 <Oscilloscope_Process+0x1038>)
 80047ce:	781b      	ldrb	r3, [r3, #0]
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d010      	beq.n	80047f6 <Oscilloscope_Process+0xf7a>
		//if (adc_period0_detected)
			drawSignalParam(&display, string, 255, adc_max[0], adc_min[0], adc_period[0]);
 80047d4:	4b38      	ldr	r3, [pc, #224]	@ (80048b8 <Oscilloscope_Process+0x103c>)
 80047d6:	881b      	ldrh	r3, [r3, #0]
 80047d8:	b298      	uxth	r0, r3
 80047da:	4b38      	ldr	r3, [pc, #224]	@ (80048bc <Oscilloscope_Process+0x1040>)
 80047dc:	881b      	ldrh	r3, [r3, #0]
 80047de:	b29b      	uxth	r3, r3
 80047e0:	4a37      	ldr	r2, [pc, #220]	@ (80048c0 <Oscilloscope_Process+0x1044>)
 80047e2:	6812      	ldr	r2, [r2, #0]
 80047e4:	f107 01cc 	add.w	r1, r7, #204	@ 0xcc
 80047e8:	9201      	str	r2, [sp, #4]
 80047ea:	9300      	str	r3, [sp, #0]
 80047ec:	4603      	mov	r3, r0
 80047ee:	22ff      	movs	r2, #255	@ 0xff
 80047f0:	4834      	ldr	r0, [pc, #208]	@ (80048c4 <Oscilloscope_Process+0x1048>)
 80047f2:	f7fe ff1b 	bl	800362c <drawSignalParam>
	}

	// Restart ADC ...
	if (local_event_adc) {
 80047f6:	f897 31ef 	ldrb.w	r3, [r7, #495]	@ 0x1ef
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d04e      	beq.n	800489c <Oscilloscope_Process+0x1020>
		adc_reset_cyccnt = 1;
 80047fe:	4b32      	ldr	r3, [pc, #200]	@ (80048c8 <Oscilloscope_Process+0x104c>)
 8004800:	2201      	movs	r2, #1
 8004802:	701a      	strb	r2, [r3, #0]
		adc0_length = 0;
 8004804:	4b31      	ldr	r3, [pc, #196]	@ (80048cc <Oscilloscope_Process+0x1050>)
 8004806:	2200      	movs	r2, #0
 8004808:	601a      	str	r2, [r3, #0]
		adc1_length = 0;
 800480a:	4b31      	ldr	r3, [pc, #196]	@ (80048d0 <Oscilloscope_Process+0x1054>)
 800480c:	2200      	movs	r2, #0
 800480e:	601a      	str	r2, [r3, #0]
		adc_max[0] = 0;
 8004810:	4b29      	ldr	r3, [pc, #164]	@ (80048b8 <Oscilloscope_Process+0x103c>)
 8004812:	2200      	movs	r2, #0
 8004814:	801a      	strh	r2, [r3, #0]
		adc_max[1] = 0;
 8004816:	4b28      	ldr	r3, [pc, #160]	@ (80048b8 <Oscilloscope_Process+0x103c>)
 8004818:	2200      	movs	r2, #0
 800481a:	805a      	strh	r2, [r3, #2]
		adc_min[0] = -1;
 800481c:	4b27      	ldr	r3, [pc, #156]	@ (80048bc <Oscilloscope_Process+0x1040>)
 800481e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004822:	801a      	strh	r2, [r3, #0]
		adc_min[1] = -1;
 8004824:	4b25      	ldr	r3, [pc, #148]	@ (80048bc <Oscilloscope_Process+0x1040>)
 8004826:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800482a:	805a      	strh	r2, [r3, #2]
		adc_period[0] = 0;
 800482c:	4b24      	ldr	r3, [pc, #144]	@ (80048c0 <Oscilloscope_Process+0x1044>)
 800482e:	2200      	movs	r2, #0
 8004830:	601a      	str	r2, [r3, #0]
		adc_period[1] = 0;
 8004832:	4b23      	ldr	r3, [pc, #140]	@ (80048c0 <Oscilloscope_Process+0x1044>)
 8004834:	2200      	movs	r2, #0
 8004836:	605a      	str	r2, [r3, #4]
		adc_period0_detected = 0;
 8004838:	4b26      	ldr	r3, [pc, #152]	@ (80048d4 <Oscilloscope_Process+0x1058>)
 800483a:	2200      	movs	r2, #0
 800483c:	701a      	strb	r2, [r3, #0]
		adc_period1_detected = 0;
 800483e:	4b26      	ldr	r3, [pc, #152]	@ (80048d8 <Oscilloscope_Process+0x105c>)
 8004840:	2200      	movs	r2, #0
 8004842:	701a      	strb	r2, [r3, #0]
		event_trigger0_detected = 0;
 8004844:	4b25      	ldr	r3, [pc, #148]	@ (80048dc <Oscilloscope_Process+0x1060>)
 8004846:	2200      	movs	r2, #0
 8004848:	701a      	strb	r2, [r3, #0]
		event_trigger1_detected = 0;
 800484a:	4b25      	ldr	r3, [pc, #148]	@ (80048e0 <Oscilloscope_Process+0x1064>)
 800484c:	2200      	movs	r2, #0
 800484e:	701a      	strb	r2, [r3, #0]

		if (menu_channel0_enabled)
 8004850:	4b18      	ldr	r3, [pc, #96]	@ (80048b4 <Oscilloscope_Process+0x1038>)
 8004852:	781b      	ldrb	r3, [r3, #0]
 8004854:	2b00      	cmp	r3, #0
 8004856:	d003      	beq.n	8004860 <Oscilloscope_Process+0xfe4>
			adc0_filled = 0;
 8004858:	4b22      	ldr	r3, [pc, #136]	@ (80048e4 <Oscilloscope_Process+0x1068>)
 800485a:	2200      	movs	r2, #0
 800485c:	701a      	strb	r2, [r3, #0]
 800485e:	e002      	b.n	8004866 <Oscilloscope_Process+0xfea>
		else
			adc0_filled = 1;
 8004860:	4b20      	ldr	r3, [pc, #128]	@ (80048e4 <Oscilloscope_Process+0x1068>)
 8004862:	2201      	movs	r2, #1
 8004864:	701a      	strb	r2, [r3, #0]

		if (menu_channel1_enabled)
 8004866:	4b20      	ldr	r3, [pc, #128]	@ (80048e8 <Oscilloscope_Process+0x106c>)
 8004868:	781b      	ldrb	r3, [r3, #0]
 800486a:	2b00      	cmp	r3, #0
 800486c:	d003      	beq.n	8004876 <Oscilloscope_Process+0xffa>
			adc1_filled = 0;
 800486e:	4b1f      	ldr	r3, [pc, #124]	@ (80048ec <Oscilloscope_Process+0x1070>)
 8004870:	2200      	movs	r2, #0
 8004872:	701a      	strb	r2, [r3, #0]
 8004874:	e002      	b.n	800487c <Oscilloscope_Process+0x1000>
		else
			adc1_filled = 1;
 8004876:	4b1d      	ldr	r3, [pc, #116]	@ (80048ec <Oscilloscope_Process+0x1070>)
 8004878:	2201      	movs	r2, #1
 800487a:	701a      	strb	r2, [r3, #0]

		if (adc_immediate) {
 800487c:	4b1c      	ldr	r3, [pc, #112]	@ (80048f0 <Oscilloscope_Process+0x1074>)
 800487e:	781b      	ldrb	r3, [r3, #0]
 8004880:	2b00      	cmp	r3, #0
 8004882:	d005      	beq.n	8004890 <Oscilloscope_Process+0x1014>
			// The ADC starts immediately after the previous measurement is handled
			HAL_ADC_Start_DMA(&hadc1, (uint32_t*)&adc_data, 2);
 8004884:	2202      	movs	r2, #2
 8004886:	491b      	ldr	r1, [pc, #108]	@ (80048f4 <Oscilloscope_Process+0x1078>)
 8004888:	481b      	ldr	r0, [pc, #108]	@ (80048f8 <Oscilloscope_Process+0x107c>)
 800488a:	f000 ff01 	bl	8005690 <HAL_ADC_Start_DMA>
 800488e:	e002      	b.n	8004896 <Oscilloscope_Process+0x101a>
		} else {
			// ADC starts by timer
			HAL_TIM_Base_Start_IT(&htim10);
 8004890:	481a      	ldr	r0, [pc, #104]	@ (80048fc <Oscilloscope_Process+0x1080>)
 8004892:	f004 f8b9 	bl	8008a08 <HAL_TIM_Base_Start_IT>
		}

		local_event_adc = 0;
 8004896:	2300      	movs	r3, #0
 8004898:	f887 31ef 	strb.w	r3, [r7, #495]	@ 0x1ef
	}

	frames++;
 800489c:	4b18      	ldr	r3, [pc, #96]	@ (8004900 <Oscilloscope_Process+0x1084>)
 800489e:	781b      	ldrb	r3, [r3, #0]
 80048a0:	3301      	adds	r3, #1
 80048a2:	b2da      	uxtb	r2, r3
 80048a4:	4b16      	ldr	r3, [pc, #88]	@ (8004900 <Oscilloscope_Process+0x1084>)
 80048a6:	701a      	strb	r2, [r3, #0]

}
 80048a8:	bf00      	nop
 80048aa:	f507 77f8 	add.w	r7, r7, #496	@ 0x1f0
 80048ae:	46bd      	mov	sp, r7
 80048b0:	bdb0      	pop	{r4, r5, r7, pc}
 80048b2:	bf00      	nop
 80048b4:	2000d10b 	.word	0x2000d10b
 80048b8:	2000d51c 	.word	0x2000d51c
 80048bc:	2000d0e4 	.word	0x2000d0e4
 80048c0:	2000d520 	.word	0x2000d520
 80048c4:	2000d4b8 	.word	0x2000d4b8
 80048c8:	2000d0e2 	.word	0x2000d0e2
 80048cc:	2000d510 	.word	0x2000d510
 80048d0:	2000d514 	.word	0x2000d514
 80048d4:	2000d528 	.word	0x2000d528
 80048d8:	2000d529 	.word	0x2000d529
 80048dc:	2000d109 	.word	0x2000d109
 80048e0:	2000d10a 	.word	0x2000d10a
 80048e4:	2000d518 	.word	0x2000d518
 80048e8:	2000d10c 	.word	0x2000d10c
 80048ec:	2000d0e0 	.word	0x2000d0e0
 80048f0:	2000d0e8 	.word	0x2000d0e8
 80048f4:	2000d508 	.word	0x2000d508
 80048f8:	2000d318 	.word	0x2000d318
 80048fc:	20013fe0 	.word	0x20013fe0
 8004900:	20013538 	.word	0x20013538

08004904 <MX_SPI4_Init>:
SPI_HandleTypeDef hspi4;
SPI_HandleTypeDef hspi5;

/* SPI4 init function */
void MX_SPI4_Init(void)
{
 8004904:	b580      	push	{r7, lr}
 8004906:	af00      	add	r7, sp, #0
  /* USER CODE END SPI4_Init 0 */

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  hspi4.Instance = SPI4;
 8004908:	4b17      	ldr	r3, [pc, #92]	@ (8004968 <MX_SPI4_Init+0x64>)
 800490a:	4a18      	ldr	r2, [pc, #96]	@ (800496c <MX_SPI4_Init+0x68>)
 800490c:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 800490e:	4b16      	ldr	r3, [pc, #88]	@ (8004968 <MX_SPI4_Init+0x64>)
 8004910:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8004914:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 8004916:	4b14      	ldr	r3, [pc, #80]	@ (8004968 <MX_SPI4_Init+0x64>)
 8004918:	2200      	movs	r2, #0
 800491a:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 800491c:	4b12      	ldr	r3, [pc, #72]	@ (8004968 <MX_SPI4_Init+0x64>)
 800491e:	2200      	movs	r2, #0
 8004920:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 8004922:	4b11      	ldr	r3, [pc, #68]	@ (8004968 <MX_SPI4_Init+0x64>)
 8004924:	2200      	movs	r2, #0
 8004926:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 8004928:	4b0f      	ldr	r3, [pc, #60]	@ (8004968 <MX_SPI4_Init+0x64>)
 800492a:	2200      	movs	r2, #0
 800492c:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 800492e:	4b0e      	ldr	r3, [pc, #56]	@ (8004968 <MX_SPI4_Init+0x64>)
 8004930:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004934:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004936:	4b0c      	ldr	r3, [pc, #48]	@ (8004968 <MX_SPI4_Init+0x64>)
 8004938:	2200      	movs	r2, #0
 800493a:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800493c:	4b0a      	ldr	r3, [pc, #40]	@ (8004968 <MX_SPI4_Init+0x64>)
 800493e:	2200      	movs	r2, #0
 8004940:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 8004942:	4b09      	ldr	r3, [pc, #36]	@ (8004968 <MX_SPI4_Init+0x64>)
 8004944:	2200      	movs	r2, #0
 8004946:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004948:	4b07      	ldr	r3, [pc, #28]	@ (8004968 <MX_SPI4_Init+0x64>)
 800494a:	2200      	movs	r2, #0
 800494c:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi4.Init.CRCPolynomial = 10;
 800494e:	4b06      	ldr	r3, [pc, #24]	@ (8004968 <MX_SPI4_Init+0x64>)
 8004950:	220a      	movs	r2, #10
 8004952:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 8004954:	4804      	ldr	r0, [pc, #16]	@ (8004968 <MX_SPI4_Init+0x64>)
 8004956:	f003 fd5d 	bl	8008414 <HAL_SPI_Init>
 800495a:	4603      	mov	r3, r0
 800495c:	2b00      	cmp	r3, #0
 800495e:	d001      	beq.n	8004964 <MX_SPI4_Init+0x60>
  {
    Error_Handler();
 8004960:	f7fe f84a 	bl	80029f8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 8004964:	bf00      	nop
 8004966:	bd80      	pop	{r7, pc}
 8004968:	20013e0c 	.word	0x20013e0c
 800496c:	40013400 	.word	0x40013400

08004970 <MX_SPI5_Init>:
/* SPI5 init function */
void MX_SPI5_Init(void)
{
 8004970:	b580      	push	{r7, lr}
 8004972:	af00      	add	r7, sp, #0
  /* USER CODE END SPI5_Init 0 */

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  hspi5.Instance = SPI5;
 8004974:	4b17      	ldr	r3, [pc, #92]	@ (80049d4 <MX_SPI5_Init+0x64>)
 8004976:	4a18      	ldr	r2, [pc, #96]	@ (80049d8 <MX_SPI5_Init+0x68>)
 8004978:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 800497a:	4b16      	ldr	r3, [pc, #88]	@ (80049d4 <MX_SPI5_Init+0x64>)
 800497c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8004980:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 8004982:	4b14      	ldr	r3, [pc, #80]	@ (80049d4 <MX_SPI5_Init+0x64>)
 8004984:	2200      	movs	r2, #0
 8004986:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 8004988:	4b12      	ldr	r3, [pc, #72]	@ (80049d4 <MX_SPI5_Init+0x64>)
 800498a:	2200      	movs	r2, #0
 800498c:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 800498e:	4b11      	ldr	r3, [pc, #68]	@ (80049d4 <MX_SPI5_Init+0x64>)
 8004990:	2200      	movs	r2, #0
 8004992:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8004994:	4b0f      	ldr	r3, [pc, #60]	@ (80049d4 <MX_SPI5_Init+0x64>)
 8004996:	2200      	movs	r2, #0
 8004998:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 800499a:	4b0e      	ldr	r3, [pc, #56]	@ (80049d4 <MX_SPI5_Init+0x64>)
 800499c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80049a0:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80049a2:	4b0c      	ldr	r3, [pc, #48]	@ (80049d4 <MX_SPI5_Init+0x64>)
 80049a4:	2200      	movs	r2, #0
 80049a6:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80049a8:	4b0a      	ldr	r3, [pc, #40]	@ (80049d4 <MX_SPI5_Init+0x64>)
 80049aa:	2200      	movs	r2, #0
 80049ac:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 80049ae:	4b09      	ldr	r3, [pc, #36]	@ (80049d4 <MX_SPI5_Init+0x64>)
 80049b0:	2200      	movs	r2, #0
 80049b2:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80049b4:	4b07      	ldr	r3, [pc, #28]	@ (80049d4 <MX_SPI5_Init+0x64>)
 80049b6:	2200      	movs	r2, #0
 80049b8:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi5.Init.CRCPolynomial = 10;
 80049ba:	4b06      	ldr	r3, [pc, #24]	@ (80049d4 <MX_SPI5_Init+0x64>)
 80049bc:	220a      	movs	r2, #10
 80049be:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 80049c0:	4804      	ldr	r0, [pc, #16]	@ (80049d4 <MX_SPI5_Init+0x64>)
 80049c2:	f003 fd27 	bl	8008414 <HAL_SPI_Init>
 80049c6:	4603      	mov	r3, r0
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d001      	beq.n	80049d0 <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 80049cc:	f7fe f814 	bl	80029f8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 80049d0:	bf00      	nop
 80049d2:	bd80      	pop	{r7, pc}
 80049d4:	20013e64 	.word	0x20013e64
 80049d8:	40015000 	.word	0x40015000

080049dc <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80049dc:	b580      	push	{r7, lr}
 80049de:	b08e      	sub	sp, #56	@ 0x38
 80049e0:	af00      	add	r7, sp, #0
 80049e2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80049e4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80049e8:	2200      	movs	r2, #0
 80049ea:	601a      	str	r2, [r3, #0]
 80049ec:	605a      	str	r2, [r3, #4]
 80049ee:	609a      	str	r2, [r3, #8]
 80049f0:	60da      	str	r2, [r3, #12]
 80049f2:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI4)
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	4a59      	ldr	r2, [pc, #356]	@ (8004b60 <HAL_SPI_MspInit+0x184>)
 80049fa:	4293      	cmp	r3, r2
 80049fc:	d15c      	bne.n	8004ab8 <HAL_SPI_MspInit+0xdc>
  {
  /* USER CODE BEGIN SPI4_MspInit 0 */

  /* USER CODE END SPI4_MspInit 0 */
    /* SPI4 clock enable */
    __HAL_RCC_SPI4_CLK_ENABLE();
 80049fe:	2300      	movs	r3, #0
 8004a00:	623b      	str	r3, [r7, #32]
 8004a02:	4b58      	ldr	r3, [pc, #352]	@ (8004b64 <HAL_SPI_MspInit+0x188>)
 8004a04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a06:	4a57      	ldr	r2, [pc, #348]	@ (8004b64 <HAL_SPI_MspInit+0x188>)
 8004a08:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8004a0c:	6453      	str	r3, [r2, #68]	@ 0x44
 8004a0e:	4b55      	ldr	r3, [pc, #340]	@ (8004b64 <HAL_SPI_MspInit+0x188>)
 8004a10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a12:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004a16:	623b      	str	r3, [r7, #32]
 8004a18:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004a1a:	2300      	movs	r3, #0
 8004a1c:	61fb      	str	r3, [r7, #28]
 8004a1e:	4b51      	ldr	r3, [pc, #324]	@ (8004b64 <HAL_SPI_MspInit+0x188>)
 8004a20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a22:	4a50      	ldr	r2, [pc, #320]	@ (8004b64 <HAL_SPI_MspInit+0x188>)
 8004a24:	f043 0301 	orr.w	r3, r3, #1
 8004a28:	6313      	str	r3, [r2, #48]	@ 0x30
 8004a2a:	4b4e      	ldr	r3, [pc, #312]	@ (8004b64 <HAL_SPI_MspInit+0x188>)
 8004a2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a2e:	f003 0301 	and.w	r3, r3, #1
 8004a32:	61fb      	str	r3, [r7, #28]
 8004a34:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004a36:	2300      	movs	r3, #0
 8004a38:	61bb      	str	r3, [r7, #24]
 8004a3a:	4b4a      	ldr	r3, [pc, #296]	@ (8004b64 <HAL_SPI_MspInit+0x188>)
 8004a3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a3e:	4a49      	ldr	r2, [pc, #292]	@ (8004b64 <HAL_SPI_MspInit+0x188>)
 8004a40:	f043 0302 	orr.w	r3, r3, #2
 8004a44:	6313      	str	r3, [r2, #48]	@ 0x30
 8004a46:	4b47      	ldr	r3, [pc, #284]	@ (8004b64 <HAL_SPI_MspInit+0x188>)
 8004a48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a4a:	f003 0302 	and.w	r3, r3, #2
 8004a4e:	61bb      	str	r3, [r7, #24]
 8004a50:	69bb      	ldr	r3, [r7, #24]
    /**SPI4 GPIO Configuration
    PA1     ------> SPI4_MOSI
    PB13     ------> SPI4_SCK
    PA11     ------> SPI4_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8004a52:	2302      	movs	r3, #2
 8004a54:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004a56:	2302      	movs	r3, #2
 8004a58:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a5a:	2300      	movs	r3, #0
 8004a5c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004a5e:	2303      	movs	r3, #3
 8004a60:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8004a62:	2305      	movs	r3, #5
 8004a64:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004a66:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004a6a:	4619      	mov	r1, r3
 8004a6c:	483e      	ldr	r0, [pc, #248]	@ (8004b68 <HAL_SPI_MspInit+0x18c>)
 8004a6e:	f001 ff51 	bl	8006914 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8004a72:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8004a76:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004a78:	2302      	movs	r3, #2
 8004a7a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a7c:	2300      	movs	r3, #0
 8004a7e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004a80:	2303      	movs	r3, #3
 8004a82:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI4;
 8004a84:	2306      	movs	r3, #6
 8004a86:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004a88:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004a8c:	4619      	mov	r1, r3
 8004a8e:	4837      	ldr	r0, [pc, #220]	@ (8004b6c <HAL_SPI_MspInit+0x190>)
 8004a90:	f001 ff40 	bl	8006914 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8004a94:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8004a98:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004a9a:	2302      	movs	r3, #2
 8004a9c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a9e:	2300      	movs	r3, #0
 8004aa0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004aa2:	2303      	movs	r3, #3
 8004aa4:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI4;
 8004aa6:	2306      	movs	r3, #6
 8004aa8:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004aaa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004aae:	4619      	mov	r1, r3
 8004ab0:	482d      	ldr	r0, [pc, #180]	@ (8004b68 <HAL_SPI_MspInit+0x18c>)
 8004ab2:	f001 ff2f 	bl	8006914 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }
}
 8004ab6:	e04f      	b.n	8004b58 <HAL_SPI_MspInit+0x17c>
  else if(spiHandle->Instance==SPI5)
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	4a2c      	ldr	r2, [pc, #176]	@ (8004b70 <HAL_SPI_MspInit+0x194>)
 8004abe:	4293      	cmp	r3, r2
 8004ac0:	d14a      	bne.n	8004b58 <HAL_SPI_MspInit+0x17c>
    __HAL_RCC_SPI5_CLK_ENABLE();
 8004ac2:	2300      	movs	r3, #0
 8004ac4:	617b      	str	r3, [r7, #20]
 8004ac6:	4b27      	ldr	r3, [pc, #156]	@ (8004b64 <HAL_SPI_MspInit+0x188>)
 8004ac8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004aca:	4a26      	ldr	r2, [pc, #152]	@ (8004b64 <HAL_SPI_MspInit+0x188>)
 8004acc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004ad0:	6453      	str	r3, [r2, #68]	@ 0x44
 8004ad2:	4b24      	ldr	r3, [pc, #144]	@ (8004b64 <HAL_SPI_MspInit+0x188>)
 8004ad4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004ad6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004ada:	617b      	str	r3, [r7, #20]
 8004adc:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004ade:	2300      	movs	r3, #0
 8004ae0:	613b      	str	r3, [r7, #16]
 8004ae2:	4b20      	ldr	r3, [pc, #128]	@ (8004b64 <HAL_SPI_MspInit+0x188>)
 8004ae4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ae6:	4a1f      	ldr	r2, [pc, #124]	@ (8004b64 <HAL_SPI_MspInit+0x188>)
 8004ae8:	f043 0302 	orr.w	r3, r3, #2
 8004aec:	6313      	str	r3, [r2, #48]	@ 0x30
 8004aee:	4b1d      	ldr	r3, [pc, #116]	@ (8004b64 <HAL_SPI_MspInit+0x188>)
 8004af0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004af2:	f003 0302 	and.w	r3, r3, #2
 8004af6:	613b      	str	r3, [r7, #16]
 8004af8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004afa:	2300      	movs	r3, #0
 8004afc:	60fb      	str	r3, [r7, #12]
 8004afe:	4b19      	ldr	r3, [pc, #100]	@ (8004b64 <HAL_SPI_MspInit+0x188>)
 8004b00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b02:	4a18      	ldr	r2, [pc, #96]	@ (8004b64 <HAL_SPI_MspInit+0x188>)
 8004b04:	f043 0301 	orr.w	r3, r3, #1
 8004b08:	6313      	str	r3, [r2, #48]	@ 0x30
 8004b0a:	4b16      	ldr	r3, [pc, #88]	@ (8004b64 <HAL_SPI_MspInit+0x188>)
 8004b0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b0e:	f003 0301 	and.w	r3, r3, #1
 8004b12:	60fb      	str	r3, [r7, #12]
 8004b14:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8004b16:	2301      	movs	r3, #1
 8004b18:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004b1a:	2302      	movs	r3, #2
 8004b1c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b1e:	2300      	movs	r3, #0
 8004b20:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004b22:	2303      	movs	r3, #3
 8004b24:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI5;
 8004b26:	2306      	movs	r3, #6
 8004b28:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004b2a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004b2e:	4619      	mov	r1, r3
 8004b30:	480e      	ldr	r0, [pc, #56]	@ (8004b6c <HAL_SPI_MspInit+0x190>)
 8004b32:	f001 feef 	bl	8006914 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12;
 8004b36:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8004b3a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004b3c:	2302      	movs	r3, #2
 8004b3e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b40:	2300      	movs	r3, #0
 8004b42:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004b44:	2303      	movs	r3, #3
 8004b46:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI5;
 8004b48:	2306      	movs	r3, #6
 8004b4a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004b4c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004b50:	4619      	mov	r1, r3
 8004b52:	4805      	ldr	r0, [pc, #20]	@ (8004b68 <HAL_SPI_MspInit+0x18c>)
 8004b54:	f001 fede 	bl	8006914 <HAL_GPIO_Init>
}
 8004b58:	bf00      	nop
 8004b5a:	3738      	adds	r7, #56	@ 0x38
 8004b5c:	46bd      	mov	sp, r7
 8004b5e:	bd80      	pop	{r7, pc}
 8004b60:	40013400 	.word	0x40013400
 8004b64:	40023800 	.word	0x40023800
 8004b68:	40020000 	.word	0x40020000
 8004b6c:	40020400 	.word	0x40020400
 8004b70:	40015000 	.word	0x40015000

08004b74 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004b74:	b580      	push	{r7, lr}
 8004b76:	b082      	sub	sp, #8
 8004b78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004b7a:	2300      	movs	r3, #0
 8004b7c:	607b      	str	r3, [r7, #4]
 8004b7e:	4b10      	ldr	r3, [pc, #64]	@ (8004bc0 <HAL_MspInit+0x4c>)
 8004b80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b82:	4a0f      	ldr	r2, [pc, #60]	@ (8004bc0 <HAL_MspInit+0x4c>)
 8004b84:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004b88:	6453      	str	r3, [r2, #68]	@ 0x44
 8004b8a:	4b0d      	ldr	r3, [pc, #52]	@ (8004bc0 <HAL_MspInit+0x4c>)
 8004b8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b8e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004b92:	607b      	str	r3, [r7, #4]
 8004b94:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004b96:	2300      	movs	r3, #0
 8004b98:	603b      	str	r3, [r7, #0]
 8004b9a:	4b09      	ldr	r3, [pc, #36]	@ (8004bc0 <HAL_MspInit+0x4c>)
 8004b9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b9e:	4a08      	ldr	r2, [pc, #32]	@ (8004bc0 <HAL_MspInit+0x4c>)
 8004ba0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004ba4:	6413      	str	r3, [r2, #64]	@ 0x40
 8004ba6:	4b06      	ldr	r3, [pc, #24]	@ (8004bc0 <HAL_MspInit+0x4c>)
 8004ba8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004baa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004bae:	603b      	str	r3, [r7, #0]
 8004bb0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8004bb2:	2007      	movs	r0, #7
 8004bb4:	f001 fa4e 	bl	8006054 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004bb8:	bf00      	nop
 8004bba:	3708      	adds	r7, #8
 8004bbc:	46bd      	mov	sp, r7
 8004bbe:	bd80      	pop	{r7, pc}
 8004bc0:	40023800 	.word	0x40023800

08004bc4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004bc4:	b480      	push	{r7}
 8004bc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8004bc8:	bf00      	nop
 8004bca:	e7fd      	b.n	8004bc8 <NMI_Handler+0x4>

08004bcc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004bcc:	b480      	push	{r7}
 8004bce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004bd0:	bf00      	nop
 8004bd2:	e7fd      	b.n	8004bd0 <HardFault_Handler+0x4>

08004bd4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004bd4:	b480      	push	{r7}
 8004bd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004bd8:	bf00      	nop
 8004bda:	e7fd      	b.n	8004bd8 <MemManage_Handler+0x4>

08004bdc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004bdc:	b480      	push	{r7}
 8004bde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004be0:	bf00      	nop
 8004be2:	e7fd      	b.n	8004be0 <BusFault_Handler+0x4>

08004be4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004be4:	b480      	push	{r7}
 8004be6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004be8:	bf00      	nop
 8004bea:	e7fd      	b.n	8004be8 <UsageFault_Handler+0x4>

08004bec <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004bec:	b480      	push	{r7}
 8004bee:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004bf0:	bf00      	nop
 8004bf2:	46bd      	mov	sp, r7
 8004bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf8:	4770      	bx	lr

08004bfa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004bfa:	b480      	push	{r7}
 8004bfc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004bfe:	bf00      	nop
 8004c00:	46bd      	mov	sp, r7
 8004c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c06:	4770      	bx	lr

08004c08 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004c08:	b480      	push	{r7}
 8004c0a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004c0c:	bf00      	nop
 8004c0e:	46bd      	mov	sp, r7
 8004c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c14:	4770      	bx	lr

08004c16 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004c16:	b580      	push	{r7, lr}
 8004c18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004c1a:	f000 fcb1 	bl	8005580 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004c1e:	bf00      	nop
 8004c20:	bd80      	pop	{r7, pc}
	...

08004c24 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8004c24:	b580      	push	{r7, lr}
 8004c26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 8004c28:	4802      	ldr	r0, [pc, #8]	@ (8004c34 <DMA1_Stream3_IRQHandler+0x10>)
 8004c2a:	f001 fc09 	bl	8006440 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8004c2e:	bf00      	nop
 8004c30:	bd80      	pop	{r7, pc}
 8004c32:	bf00      	nop
 8004c34:	2000d458 	.word	0x2000d458

08004c38 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8004c38:	b580      	push	{r7, lr}
 8004c3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8004c3c:	4803      	ldr	r0, [pc, #12]	@ (8004c4c <TIM1_UP_TIM10_IRQHandler+0x14>)
 8004c3e:	f004 f923 	bl	8008e88 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim10);
 8004c42:	4803      	ldr	r0, [pc, #12]	@ (8004c50 <TIM1_UP_TIM10_IRQHandler+0x18>)
 8004c44:	f004 f920 	bl	8008e88 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8004c48:	bf00      	nop
 8004c4a:	bd80      	pop	{r7, pc}
 8004c4c:	20013ec0 	.word	0x20013ec0
 8004c50:	20013fe0 	.word	0x20013fe0

08004c54 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8004c54:	b580      	push	{r7, lr}
 8004c56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8004c58:	4802      	ldr	r0, [pc, #8]	@ (8004c64 <TIM2_IRQHandler+0x10>)
 8004c5a:	f004 f915 	bl	8008e88 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8004c5e:	bf00      	nop
 8004c60:	bd80      	pop	{r7, pc}
 8004c62:	bf00      	nop
 8004c64:	20013f08 	.word	0x20013f08

08004c68 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8004c68:	b580      	push	{r7, lr}
 8004c6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8004c6c:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8004c70:	f002 f806 	bl	8006c80 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8004c74:	bf00      	nop
 8004c76:	bd80      	pop	{r7, pc}

08004c78 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8004c78:	b580      	push	{r7, lr}
 8004c7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8004c7c:	4802      	ldr	r0, [pc, #8]	@ (8004c88 <DMA2_Stream0_IRQHandler+0x10>)
 8004c7e:	f001 fbdf 	bl	8006440 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8004c82:	bf00      	nop
 8004c84:	bd80      	pop	{r7, pc}
 8004c86:	bf00      	nop
 8004c88:	2000d360 	.word	0x2000d360

08004c8c <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8004c8c:	b580      	push	{r7, lr}
 8004c8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8004c90:	4802      	ldr	r0, [pc, #8]	@ (8004c9c <USART6_IRQHandler+0x10>)
 8004c92:	f004 ffb7 	bl	8009c04 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8004c96:	bf00      	nop
 8004c98:	bd80      	pop	{r7, pc}
 8004c9a:	bf00      	nop
 8004c9c:	20014070 	.word	0x20014070

08004ca0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004ca0:	b580      	push	{r7, lr}
 8004ca2:	b086      	sub	sp, #24
 8004ca4:	af00      	add	r7, sp, #0
 8004ca6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004ca8:	4a14      	ldr	r2, [pc, #80]	@ (8004cfc <_sbrk+0x5c>)
 8004caa:	4b15      	ldr	r3, [pc, #84]	@ (8004d00 <_sbrk+0x60>)
 8004cac:	1ad3      	subs	r3, r2, r3
 8004cae:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004cb0:	697b      	ldr	r3, [r7, #20]
 8004cb2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004cb4:	4b13      	ldr	r3, [pc, #76]	@ (8004d04 <_sbrk+0x64>)
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d102      	bne.n	8004cc2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004cbc:	4b11      	ldr	r3, [pc, #68]	@ (8004d04 <_sbrk+0x64>)
 8004cbe:	4a12      	ldr	r2, [pc, #72]	@ (8004d08 <_sbrk+0x68>)
 8004cc0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004cc2:	4b10      	ldr	r3, [pc, #64]	@ (8004d04 <_sbrk+0x64>)
 8004cc4:	681a      	ldr	r2, [r3, #0]
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	4413      	add	r3, r2
 8004cca:	693a      	ldr	r2, [r7, #16]
 8004ccc:	429a      	cmp	r2, r3
 8004cce:	d207      	bcs.n	8004ce0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004cd0:	f007 f886 	bl	800bde0 <__errno>
 8004cd4:	4603      	mov	r3, r0
 8004cd6:	220c      	movs	r2, #12
 8004cd8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004cda:	f04f 33ff 	mov.w	r3, #4294967295
 8004cde:	e009      	b.n	8004cf4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004ce0:	4b08      	ldr	r3, [pc, #32]	@ (8004d04 <_sbrk+0x64>)
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004ce6:	4b07      	ldr	r3, [pc, #28]	@ (8004d04 <_sbrk+0x64>)
 8004ce8:	681a      	ldr	r2, [r3, #0]
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	4413      	add	r3, r2
 8004cee:	4a05      	ldr	r2, [pc, #20]	@ (8004d04 <_sbrk+0x64>)
 8004cf0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004cf2:	68fb      	ldr	r3, [r7, #12]
}
 8004cf4:	4618      	mov	r0, r3
 8004cf6:	3718      	adds	r7, #24
 8004cf8:	46bd      	mov	sp, r7
 8004cfa:	bd80      	pop	{r7, pc}
 8004cfc:	20020000 	.word	0x20020000
 8004d00:	00000800 	.word	0x00000800
 8004d04:	20013ebc 	.word	0x20013ebc
 8004d08:	20014220 	.word	0x20014220

08004d0c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004d0c:	b480      	push	{r7}
 8004d0e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004d10:	4b06      	ldr	r3, [pc, #24]	@ (8004d2c <SystemInit+0x20>)
 8004d12:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004d16:	4a05      	ldr	r2, [pc, #20]	@ (8004d2c <SystemInit+0x20>)
 8004d18:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8004d1c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004d20:	bf00      	nop
 8004d22:	46bd      	mov	sp, r7
 8004d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d28:	4770      	bx	lr
 8004d2a:	bf00      	nop
 8004d2c:	e000ed00 	.word	0xe000ed00

08004d30 <MX_TIM1_Init>:
TIM_HandleTypeDef htim4;
TIM_HandleTypeDef htim10;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8004d30:	b580      	push	{r7, lr}
 8004d32:	b096      	sub	sp, #88	@ 0x58
 8004d34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004d36:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8004d3a:	2200      	movs	r2, #0
 8004d3c:	601a      	str	r2, [r3, #0]
 8004d3e:	605a      	str	r2, [r3, #4]
 8004d40:	609a      	str	r2, [r3, #8]
 8004d42:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004d44:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8004d48:	2200      	movs	r2, #0
 8004d4a:	601a      	str	r2, [r3, #0]
 8004d4c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004d4e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004d52:	2200      	movs	r2, #0
 8004d54:	601a      	str	r2, [r3, #0]
 8004d56:	605a      	str	r2, [r3, #4]
 8004d58:	609a      	str	r2, [r3, #8]
 8004d5a:	60da      	str	r2, [r3, #12]
 8004d5c:	611a      	str	r2, [r3, #16]
 8004d5e:	615a      	str	r2, [r3, #20]
 8004d60:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8004d62:	1d3b      	adds	r3, r7, #4
 8004d64:	2220      	movs	r2, #32
 8004d66:	2100      	movs	r1, #0
 8004d68:	4618      	mov	r0, r3
 8004d6a:	f006 ffe7 	bl	800bd3c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8004d6e:	4b3f      	ldr	r3, [pc, #252]	@ (8004e6c <MX_TIM1_Init+0x13c>)
 8004d70:	4a3f      	ldr	r2, [pc, #252]	@ (8004e70 <MX_TIM1_Init+0x140>)
 8004d72:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 100-1;
 8004d74:	4b3d      	ldr	r3, [pc, #244]	@ (8004e6c <MX_TIM1_Init+0x13c>)
 8004d76:	2263      	movs	r2, #99	@ 0x63
 8004d78:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004d7a:	4b3c      	ldr	r3, [pc, #240]	@ (8004e6c <MX_TIM1_Init+0x13c>)
 8004d7c:	2200      	movs	r2, #0
 8004d7e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000-1;
 8004d80:	4b3a      	ldr	r3, [pc, #232]	@ (8004e6c <MX_TIM1_Init+0x13c>)
 8004d82:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8004d86:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004d88:	4b38      	ldr	r3, [pc, #224]	@ (8004e6c <MX_TIM1_Init+0x13c>)
 8004d8a:	2200      	movs	r2, #0
 8004d8c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8004d8e:	4b37      	ldr	r3, [pc, #220]	@ (8004e6c <MX_TIM1_Init+0x13c>)
 8004d90:	2200      	movs	r2, #0
 8004d92:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004d94:	4b35      	ldr	r3, [pc, #212]	@ (8004e6c <MX_TIM1_Init+0x13c>)
 8004d96:	2200      	movs	r2, #0
 8004d98:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8004d9a:	4834      	ldr	r0, [pc, #208]	@ (8004e6c <MX_TIM1_Init+0x13c>)
 8004d9c:	f003 fde4 	bl	8008968 <HAL_TIM_Base_Init>
 8004da0:	4603      	mov	r3, r0
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d001      	beq.n	8004daa <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8004da6:	f7fd fe27 	bl	80029f8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004daa:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004dae:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8004db0:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8004db4:	4619      	mov	r1, r3
 8004db6:	482d      	ldr	r0, [pc, #180]	@ (8004e6c <MX_TIM1_Init+0x13c>)
 8004db8:	f004 fa18 	bl	80091ec <HAL_TIM_ConfigClockSource>
 8004dbc:	4603      	mov	r3, r0
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d001      	beq.n	8004dc6 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8004dc2:	f7fd fe19 	bl	80029f8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8004dc6:	4829      	ldr	r0, [pc, #164]	@ (8004e6c <MX_TIM1_Init+0x13c>)
 8004dc8:	f003 feaf 	bl	8008b2a <HAL_TIM_PWM_Init>
 8004dcc:	4603      	mov	r3, r0
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d001      	beq.n	8004dd6 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8004dd2:	f7fd fe11 	bl	80029f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004dd6:	2300      	movs	r3, #0
 8004dd8:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004dda:	2300      	movs	r3, #0
 8004ddc:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8004dde:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8004de2:	4619      	mov	r1, r3
 8004de4:	4821      	ldr	r0, [pc, #132]	@ (8004e6c <MX_TIM1_Init+0x13c>)
 8004de6:	f004 fdc3 	bl	8009970 <HAL_TIMEx_MasterConfigSynchronization>
 8004dea:	4603      	mov	r3, r0
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d001      	beq.n	8004df4 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8004df0:	f7fd fe02 	bl	80029f8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004df4:	2360      	movs	r3, #96	@ 0x60
 8004df6:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 500;
 8004df8:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8004dfc:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004dfe:	2300      	movs	r3, #0
 8004e00:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8004e02:	2300      	movs	r3, #0
 8004e04:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004e06:	2300      	movs	r3, #0
 8004e08:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8004e0a:	2300      	movs	r3, #0
 8004e0c:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8004e0e:	2300      	movs	r3, #0
 8004e10:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004e12:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004e16:	2200      	movs	r2, #0
 8004e18:	4619      	mov	r1, r3
 8004e1a:	4814      	ldr	r0, [pc, #80]	@ (8004e6c <MX_TIM1_Init+0x13c>)
 8004e1c:	f004 f924 	bl	8009068 <HAL_TIM_PWM_ConfigChannel>
 8004e20:	4603      	mov	r3, r0
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d001      	beq.n	8004e2a <MX_TIM1_Init+0xfa>
  {
    Error_Handler();
 8004e26:	f7fd fde7 	bl	80029f8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8004e2a:	2300      	movs	r3, #0
 8004e2c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8004e2e:	2300      	movs	r3, #0
 8004e30:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8004e32:	2300      	movs	r3, #0
 8004e34:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8004e36:	2300      	movs	r3, #0
 8004e38:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8004e3a:	2300      	movs	r3, #0
 8004e3c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8004e3e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8004e42:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8004e44:	2300      	movs	r3, #0
 8004e46:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8004e48:	1d3b      	adds	r3, r7, #4
 8004e4a:	4619      	mov	r1, r3
 8004e4c:	4807      	ldr	r0, [pc, #28]	@ (8004e6c <MX_TIM1_Init+0x13c>)
 8004e4e:	f004 fdfd 	bl	8009a4c <HAL_TIMEx_ConfigBreakDeadTime>
 8004e52:	4603      	mov	r3, r0
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d001      	beq.n	8004e5c <MX_TIM1_Init+0x12c>
  {
    Error_Handler();
 8004e58:	f7fd fdce 	bl	80029f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8004e5c:	4803      	ldr	r0, [pc, #12]	@ (8004e6c <MX_TIM1_Init+0x13c>)
 8004e5e:	f000 f9ff 	bl	8005260 <HAL_TIM_MspPostInit>

}
 8004e62:	bf00      	nop
 8004e64:	3758      	adds	r7, #88	@ 0x58
 8004e66:	46bd      	mov	sp, r7
 8004e68:	bd80      	pop	{r7, pc}
 8004e6a:	bf00      	nop
 8004e6c:	20013ec0 	.word	0x20013ec0
 8004e70:	40010000 	.word	0x40010000

08004e74 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8004e74:	b580      	push	{r7, lr}
 8004e76:	b086      	sub	sp, #24
 8004e78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004e7a:	f107 0308 	add.w	r3, r7, #8
 8004e7e:	2200      	movs	r2, #0
 8004e80:	601a      	str	r2, [r3, #0]
 8004e82:	605a      	str	r2, [r3, #4]
 8004e84:	609a      	str	r2, [r3, #8]
 8004e86:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004e88:	463b      	mov	r3, r7
 8004e8a:	2200      	movs	r2, #0
 8004e8c:	601a      	str	r2, [r3, #0]
 8004e8e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8004e90:	4b1d      	ldr	r3, [pc, #116]	@ (8004f08 <MX_TIM2_Init+0x94>)
 8004e92:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8004e96:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 100-1;
 8004e98:	4b1b      	ldr	r3, [pc, #108]	@ (8004f08 <MX_TIM2_Init+0x94>)
 8004e9a:	2263      	movs	r2, #99	@ 0x63
 8004e9c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004e9e:	4b1a      	ldr	r3, [pc, #104]	@ (8004f08 <MX_TIM2_Init+0x94>)
 8004ea0:	2200      	movs	r2, #0
 8004ea2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 32-1;
 8004ea4:	4b18      	ldr	r3, [pc, #96]	@ (8004f08 <MX_TIM2_Init+0x94>)
 8004ea6:	221f      	movs	r2, #31
 8004ea8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004eaa:	4b17      	ldr	r3, [pc, #92]	@ (8004f08 <MX_TIM2_Init+0x94>)
 8004eac:	2200      	movs	r2, #0
 8004eae:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004eb0:	4b15      	ldr	r3, [pc, #84]	@ (8004f08 <MX_TIM2_Init+0x94>)
 8004eb2:	2200      	movs	r2, #0
 8004eb4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8004eb6:	4814      	ldr	r0, [pc, #80]	@ (8004f08 <MX_TIM2_Init+0x94>)
 8004eb8:	f003 fd56 	bl	8008968 <HAL_TIM_Base_Init>
 8004ebc:	4603      	mov	r3, r0
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d001      	beq.n	8004ec6 <MX_TIM2_Init+0x52>
  {
    Error_Handler();
 8004ec2:	f7fd fd99 	bl	80029f8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004ec6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004eca:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8004ecc:	f107 0308 	add.w	r3, r7, #8
 8004ed0:	4619      	mov	r1, r3
 8004ed2:	480d      	ldr	r0, [pc, #52]	@ (8004f08 <MX_TIM2_Init+0x94>)
 8004ed4:	f004 f98a 	bl	80091ec <HAL_TIM_ConfigClockSource>
 8004ed8:	4603      	mov	r3, r0
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d001      	beq.n	8004ee2 <MX_TIM2_Init+0x6e>
  {
    Error_Handler();
 8004ede:	f7fd fd8b 	bl	80029f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004ee2:	2300      	movs	r3, #0
 8004ee4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004ee6:	2300      	movs	r3, #0
 8004ee8:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8004eea:	463b      	mov	r3, r7
 8004eec:	4619      	mov	r1, r3
 8004eee:	4806      	ldr	r0, [pc, #24]	@ (8004f08 <MX_TIM2_Init+0x94>)
 8004ef0:	f004 fd3e 	bl	8009970 <HAL_TIMEx_MasterConfigSynchronization>
 8004ef4:	4603      	mov	r3, r0
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d001      	beq.n	8004efe <MX_TIM2_Init+0x8a>
  {
    Error_Handler();
 8004efa:	f7fd fd7d 	bl	80029f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8004efe:	bf00      	nop
 8004f00:	3718      	adds	r7, #24
 8004f02:	46bd      	mov	sp, r7
 8004f04:	bd80      	pop	{r7, pc}
 8004f06:	bf00      	nop
 8004f08:	20013f08 	.word	0x20013f08

08004f0c <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8004f0c:	b580      	push	{r7, lr}
 8004f0e:	b08c      	sub	sp, #48	@ 0x30
 8004f10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8004f12:	f107 030c 	add.w	r3, r7, #12
 8004f16:	2224      	movs	r2, #36	@ 0x24
 8004f18:	2100      	movs	r1, #0
 8004f1a:	4618      	mov	r0, r3
 8004f1c:	f006 ff0e 	bl	800bd3c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004f20:	1d3b      	adds	r3, r7, #4
 8004f22:	2200      	movs	r2, #0
 8004f24:	601a      	str	r2, [r3, #0]
 8004f26:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8004f28:	4b20      	ldr	r3, [pc, #128]	@ (8004fac <MX_TIM3_Init+0xa0>)
 8004f2a:	4a21      	ldr	r2, [pc, #132]	@ (8004fb0 <MX_TIM3_Init+0xa4>)
 8004f2c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8004f2e:	4b1f      	ldr	r3, [pc, #124]	@ (8004fac <MX_TIM3_Init+0xa0>)
 8004f30:	2200      	movs	r2, #0
 8004f32:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004f34:	4b1d      	ldr	r3, [pc, #116]	@ (8004fac <MX_TIM3_Init+0xa0>)
 8004f36:	2200      	movs	r2, #0
 8004f38:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8004f3a:	4b1c      	ldr	r3, [pc, #112]	@ (8004fac <MX_TIM3_Init+0xa0>)
 8004f3c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004f40:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004f42:	4b1a      	ldr	r3, [pc, #104]	@ (8004fac <MX_TIM3_Init+0xa0>)
 8004f44:	2200      	movs	r2, #0
 8004f46:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004f48:	4b18      	ldr	r3, [pc, #96]	@ (8004fac <MX_TIM3_Init+0xa0>)
 8004f4a:	2200      	movs	r2, #0
 8004f4c:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8004f4e:	2301      	movs	r3, #1
 8004f50:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8004f52:	2300      	movs	r3, #0
 8004f54:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8004f56:	2301      	movs	r3, #1
 8004f58:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8004f5a:	2300      	movs	r3, #0
 8004f5c:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8004f5e:	2300      	movs	r3, #0
 8004f60:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8004f62:	2300      	movs	r3, #0
 8004f64:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8004f66:	2301      	movs	r3, #1
 8004f68:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8004f6a:	2300      	movs	r3, #0
 8004f6c:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8004f6e:	2300      	movs	r3, #0
 8004f70:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8004f72:	f107 030c 	add.w	r3, r7, #12
 8004f76:	4619      	mov	r1, r3
 8004f78:	480c      	ldr	r0, [pc, #48]	@ (8004fac <MX_TIM3_Init+0xa0>)
 8004f7a:	f003 fedf 	bl	8008d3c <HAL_TIM_Encoder_Init>
 8004f7e:	4603      	mov	r3, r0
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d001      	beq.n	8004f88 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8004f84:	f7fd fd38 	bl	80029f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004f88:	2300      	movs	r3, #0
 8004f8a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004f8c:	2300      	movs	r3, #0
 8004f8e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8004f90:	1d3b      	adds	r3, r7, #4
 8004f92:	4619      	mov	r1, r3
 8004f94:	4805      	ldr	r0, [pc, #20]	@ (8004fac <MX_TIM3_Init+0xa0>)
 8004f96:	f004 fceb 	bl	8009970 <HAL_TIMEx_MasterConfigSynchronization>
 8004f9a:	4603      	mov	r3, r0
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d001      	beq.n	8004fa4 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8004fa0:	f7fd fd2a 	bl	80029f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8004fa4:	bf00      	nop
 8004fa6:	3730      	adds	r7, #48	@ 0x30
 8004fa8:	46bd      	mov	sp, r7
 8004faa:	bd80      	pop	{r7, pc}
 8004fac:	20013f50 	.word	0x20013f50
 8004fb0:	40000400 	.word	0x40000400

08004fb4 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8004fb4:	b580      	push	{r7, lr}
 8004fb6:	b08c      	sub	sp, #48	@ 0x30
 8004fb8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8004fba:	f107 030c 	add.w	r3, r7, #12
 8004fbe:	2224      	movs	r2, #36	@ 0x24
 8004fc0:	2100      	movs	r1, #0
 8004fc2:	4618      	mov	r0, r3
 8004fc4:	f006 feba 	bl	800bd3c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004fc8:	1d3b      	adds	r3, r7, #4
 8004fca:	2200      	movs	r2, #0
 8004fcc:	601a      	str	r2, [r3, #0]
 8004fce:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8004fd0:	4b20      	ldr	r3, [pc, #128]	@ (8005054 <MX_TIM4_Init+0xa0>)
 8004fd2:	4a21      	ldr	r2, [pc, #132]	@ (8005058 <MX_TIM4_Init+0xa4>)
 8004fd4:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8004fd6:	4b1f      	ldr	r3, [pc, #124]	@ (8005054 <MX_TIM4_Init+0xa0>)
 8004fd8:	2200      	movs	r2, #0
 8004fda:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004fdc:	4b1d      	ldr	r3, [pc, #116]	@ (8005054 <MX_TIM4_Init+0xa0>)
 8004fde:	2200      	movs	r2, #0
 8004fe0:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8004fe2:	4b1c      	ldr	r3, [pc, #112]	@ (8005054 <MX_TIM4_Init+0xa0>)
 8004fe4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004fe8:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004fea:	4b1a      	ldr	r3, [pc, #104]	@ (8005054 <MX_TIM4_Init+0xa0>)
 8004fec:	2200      	movs	r2, #0
 8004fee:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004ff0:	4b18      	ldr	r3, [pc, #96]	@ (8005054 <MX_TIM4_Init+0xa0>)
 8004ff2:	2200      	movs	r2, #0
 8004ff4:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8004ff6:	2301      	movs	r3, #1
 8004ff8:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8004ffa:	2300      	movs	r3, #0
 8004ffc:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8004ffe:	2301      	movs	r3, #1
 8005000:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8005002:	2300      	movs	r3, #0
 8005004:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8005006:	2300      	movs	r3, #0
 8005008:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800500a:	2300      	movs	r3, #0
 800500c:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800500e:	2301      	movs	r3, #1
 8005010:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8005012:	2300      	movs	r3, #0
 8005014:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8005016:	2300      	movs	r3, #0
 8005018:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 800501a:	f107 030c 	add.w	r3, r7, #12
 800501e:	4619      	mov	r1, r3
 8005020:	480c      	ldr	r0, [pc, #48]	@ (8005054 <MX_TIM4_Init+0xa0>)
 8005022:	f003 fe8b 	bl	8008d3c <HAL_TIM_Encoder_Init>
 8005026:	4603      	mov	r3, r0
 8005028:	2b00      	cmp	r3, #0
 800502a:	d001      	beq.n	8005030 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 800502c:	f7fd fce4 	bl	80029f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005030:	2300      	movs	r3, #0
 8005032:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005034:	2300      	movs	r3, #0
 8005036:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8005038:	1d3b      	adds	r3, r7, #4
 800503a:	4619      	mov	r1, r3
 800503c:	4805      	ldr	r0, [pc, #20]	@ (8005054 <MX_TIM4_Init+0xa0>)
 800503e:	f004 fc97 	bl	8009970 <HAL_TIMEx_MasterConfigSynchronization>
 8005042:	4603      	mov	r3, r0
 8005044:	2b00      	cmp	r3, #0
 8005046:	d001      	beq.n	800504c <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 8005048:	f7fd fcd6 	bl	80029f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800504c:	bf00      	nop
 800504e:	3730      	adds	r7, #48	@ 0x30
 8005050:	46bd      	mov	sp, r7
 8005052:	bd80      	pop	{r7, pc}
 8005054:	20013f98 	.word	0x20013f98
 8005058:	40000800 	.word	0x40000800

0800505c <MX_TIM10_Init>:
/* TIM10 init function */
void MX_TIM10_Init(void)
{
 800505c:	b580      	push	{r7, lr}
 800505e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8005060:	4b0e      	ldr	r3, [pc, #56]	@ (800509c <MX_TIM10_Init+0x40>)
 8005062:	4a0f      	ldr	r2, [pc, #60]	@ (80050a0 <MX_TIM10_Init+0x44>)
 8005064:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 0;
 8005066:	4b0d      	ldr	r3, [pc, #52]	@ (800509c <MX_TIM10_Init+0x40>)
 8005068:	2200      	movs	r2, #0
 800506a:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 800506c:	4b0b      	ldr	r3, [pc, #44]	@ (800509c <MX_TIM10_Init+0x40>)
 800506e:	2200      	movs	r2, #0
 8005070:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 288-1;
 8005072:	4b0a      	ldr	r3, [pc, #40]	@ (800509c <MX_TIM10_Init+0x40>)
 8005074:	f240 121f 	movw	r2, #287	@ 0x11f
 8005078:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800507a:	4b08      	ldr	r3, [pc, #32]	@ (800509c <MX_TIM10_Init+0x40>)
 800507c:	2200      	movs	r2, #0
 800507e:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005080:	4b06      	ldr	r3, [pc, #24]	@ (800509c <MX_TIM10_Init+0x40>)
 8005082:	2200      	movs	r2, #0
 8005084:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8005086:	4805      	ldr	r0, [pc, #20]	@ (800509c <MX_TIM10_Init+0x40>)
 8005088:	f003 fc6e 	bl	8008968 <HAL_TIM_Base_Init>
 800508c:	4603      	mov	r3, r0
 800508e:	2b00      	cmp	r3, #0
 8005090:	d001      	beq.n	8005096 <MX_TIM10_Init+0x3a>
  {
    Error_Handler();
 8005092:	f7fd fcb1 	bl	80029f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 8005096:	bf00      	nop
 8005098:	bd80      	pop	{r7, pc}
 800509a:	bf00      	nop
 800509c:	20013fe0 	.word	0x20013fe0
 80050a0:	40014400 	.word	0x40014400

080050a4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80050a4:	b580      	push	{r7, lr}
 80050a6:	b086      	sub	sp, #24
 80050a8:	af00      	add	r7, sp, #0
 80050aa:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	4a2a      	ldr	r2, [pc, #168]	@ (800515c <HAL_TIM_Base_MspInit+0xb8>)
 80050b2:	4293      	cmp	r3, r2
 80050b4:	d116      	bne.n	80050e4 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80050b6:	2300      	movs	r3, #0
 80050b8:	617b      	str	r3, [r7, #20]
 80050ba:	4b29      	ldr	r3, [pc, #164]	@ (8005160 <HAL_TIM_Base_MspInit+0xbc>)
 80050bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80050be:	4a28      	ldr	r2, [pc, #160]	@ (8005160 <HAL_TIM_Base_MspInit+0xbc>)
 80050c0:	f043 0301 	orr.w	r3, r3, #1
 80050c4:	6453      	str	r3, [r2, #68]	@ 0x44
 80050c6:	4b26      	ldr	r3, [pc, #152]	@ (8005160 <HAL_TIM_Base_MspInit+0xbc>)
 80050c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80050ca:	f003 0301 	and.w	r3, r3, #1
 80050ce:	617b      	str	r3, [r7, #20]
 80050d0:	697b      	ldr	r3, [r7, #20]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 80050d2:	2200      	movs	r2, #0
 80050d4:	2100      	movs	r1, #0
 80050d6:	2019      	movs	r0, #25
 80050d8:	f000 ffc7 	bl	800606a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80050dc:	2019      	movs	r0, #25
 80050de:	f000 ffe0 	bl	80060a2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }
}
 80050e2:	e036      	b.n	8005152 <HAL_TIM_Base_MspInit+0xae>
  else if(tim_baseHandle->Instance==TIM2)
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80050ec:	d116      	bne.n	800511c <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80050ee:	2300      	movs	r3, #0
 80050f0:	613b      	str	r3, [r7, #16]
 80050f2:	4b1b      	ldr	r3, [pc, #108]	@ (8005160 <HAL_TIM_Base_MspInit+0xbc>)
 80050f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050f6:	4a1a      	ldr	r2, [pc, #104]	@ (8005160 <HAL_TIM_Base_MspInit+0xbc>)
 80050f8:	f043 0301 	orr.w	r3, r3, #1
 80050fc:	6413      	str	r3, [r2, #64]	@ 0x40
 80050fe:	4b18      	ldr	r3, [pc, #96]	@ (8005160 <HAL_TIM_Base_MspInit+0xbc>)
 8005100:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005102:	f003 0301 	and.w	r3, r3, #1
 8005106:	613b      	str	r3, [r7, #16]
 8005108:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800510a:	2200      	movs	r2, #0
 800510c:	2100      	movs	r1, #0
 800510e:	201c      	movs	r0, #28
 8005110:	f000 ffab 	bl	800606a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8005114:	201c      	movs	r0, #28
 8005116:	f000 ffc4 	bl	80060a2 <HAL_NVIC_EnableIRQ>
}
 800511a:	e01a      	b.n	8005152 <HAL_TIM_Base_MspInit+0xae>
  else if(tim_baseHandle->Instance==TIM10)
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	4a10      	ldr	r2, [pc, #64]	@ (8005164 <HAL_TIM_Base_MspInit+0xc0>)
 8005122:	4293      	cmp	r3, r2
 8005124:	d115      	bne.n	8005152 <HAL_TIM_Base_MspInit+0xae>
    __HAL_RCC_TIM10_CLK_ENABLE();
 8005126:	2300      	movs	r3, #0
 8005128:	60fb      	str	r3, [r7, #12]
 800512a:	4b0d      	ldr	r3, [pc, #52]	@ (8005160 <HAL_TIM_Base_MspInit+0xbc>)
 800512c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800512e:	4a0c      	ldr	r2, [pc, #48]	@ (8005160 <HAL_TIM_Base_MspInit+0xbc>)
 8005130:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005134:	6453      	str	r3, [r2, #68]	@ 0x44
 8005136:	4b0a      	ldr	r3, [pc, #40]	@ (8005160 <HAL_TIM_Base_MspInit+0xbc>)
 8005138:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800513a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800513e:	60fb      	str	r3, [r7, #12]
 8005140:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8005142:	2200      	movs	r2, #0
 8005144:	2100      	movs	r1, #0
 8005146:	2019      	movs	r0, #25
 8005148:	f000 ff8f 	bl	800606a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800514c:	2019      	movs	r0, #25
 800514e:	f000 ffa8 	bl	80060a2 <HAL_NVIC_EnableIRQ>
}
 8005152:	bf00      	nop
 8005154:	3718      	adds	r7, #24
 8005156:	46bd      	mov	sp, r7
 8005158:	bd80      	pop	{r7, pc}
 800515a:	bf00      	nop
 800515c:	40010000 	.word	0x40010000
 8005160:	40023800 	.word	0x40023800
 8005164:	40014400 	.word	0x40014400

08005168 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8005168:	b580      	push	{r7, lr}
 800516a:	b08c      	sub	sp, #48	@ 0x30
 800516c:	af00      	add	r7, sp, #0
 800516e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005170:	f107 031c 	add.w	r3, r7, #28
 8005174:	2200      	movs	r2, #0
 8005176:	601a      	str	r2, [r3, #0]
 8005178:	605a      	str	r2, [r3, #4]
 800517a:	609a      	str	r2, [r3, #8]
 800517c:	60da      	str	r2, [r3, #12]
 800517e:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM3)
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	4a32      	ldr	r2, [pc, #200]	@ (8005250 <HAL_TIM_Encoder_MspInit+0xe8>)
 8005186:	4293      	cmp	r3, r2
 8005188:	d12c      	bne.n	80051e4 <HAL_TIM_Encoder_MspInit+0x7c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800518a:	2300      	movs	r3, #0
 800518c:	61bb      	str	r3, [r7, #24]
 800518e:	4b31      	ldr	r3, [pc, #196]	@ (8005254 <HAL_TIM_Encoder_MspInit+0xec>)
 8005190:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005192:	4a30      	ldr	r2, [pc, #192]	@ (8005254 <HAL_TIM_Encoder_MspInit+0xec>)
 8005194:	f043 0302 	orr.w	r3, r3, #2
 8005198:	6413      	str	r3, [r2, #64]	@ 0x40
 800519a:	4b2e      	ldr	r3, [pc, #184]	@ (8005254 <HAL_TIM_Encoder_MspInit+0xec>)
 800519c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800519e:	f003 0302 	and.w	r3, r3, #2
 80051a2:	61bb      	str	r3, [r7, #24]
 80051a4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80051a6:	2300      	movs	r3, #0
 80051a8:	617b      	str	r3, [r7, #20]
 80051aa:	4b2a      	ldr	r3, [pc, #168]	@ (8005254 <HAL_TIM_Encoder_MspInit+0xec>)
 80051ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80051ae:	4a29      	ldr	r2, [pc, #164]	@ (8005254 <HAL_TIM_Encoder_MspInit+0xec>)
 80051b0:	f043 0302 	orr.w	r3, r3, #2
 80051b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80051b6:	4b27      	ldr	r3, [pc, #156]	@ (8005254 <HAL_TIM_Encoder_MspInit+0xec>)
 80051b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80051ba:	f003 0302 	and.w	r3, r3, #2
 80051be:	617b      	str	r3, [r7, #20]
 80051c0:	697b      	ldr	r3, [r7, #20]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = ENCODER1_INB_Pin|ENCODER1_INA_Pin;
 80051c2:	2330      	movs	r3, #48	@ 0x30
 80051c4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80051c6:	2302      	movs	r3, #2
 80051c8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80051ca:	2300      	movs	r3, #0
 80051cc:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80051ce:	2300      	movs	r3, #0
 80051d0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80051d2:	2302      	movs	r3, #2
 80051d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80051d6:	f107 031c 	add.w	r3, r7, #28
 80051da:	4619      	mov	r1, r3
 80051dc:	481e      	ldr	r0, [pc, #120]	@ (8005258 <HAL_TIM_Encoder_MspInit+0xf0>)
 80051de:	f001 fb99 	bl	8006914 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 80051e2:	e030      	b.n	8005246 <HAL_TIM_Encoder_MspInit+0xde>
  else if(tim_encoderHandle->Instance==TIM4)
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	4a1c      	ldr	r2, [pc, #112]	@ (800525c <HAL_TIM_Encoder_MspInit+0xf4>)
 80051ea:	4293      	cmp	r3, r2
 80051ec:	d12b      	bne.n	8005246 <HAL_TIM_Encoder_MspInit+0xde>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80051ee:	2300      	movs	r3, #0
 80051f0:	613b      	str	r3, [r7, #16]
 80051f2:	4b18      	ldr	r3, [pc, #96]	@ (8005254 <HAL_TIM_Encoder_MspInit+0xec>)
 80051f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051f6:	4a17      	ldr	r2, [pc, #92]	@ (8005254 <HAL_TIM_Encoder_MspInit+0xec>)
 80051f8:	f043 0304 	orr.w	r3, r3, #4
 80051fc:	6413      	str	r3, [r2, #64]	@ 0x40
 80051fe:	4b15      	ldr	r3, [pc, #84]	@ (8005254 <HAL_TIM_Encoder_MspInit+0xec>)
 8005200:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005202:	f003 0304 	and.w	r3, r3, #4
 8005206:	613b      	str	r3, [r7, #16]
 8005208:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800520a:	2300      	movs	r3, #0
 800520c:	60fb      	str	r3, [r7, #12]
 800520e:	4b11      	ldr	r3, [pc, #68]	@ (8005254 <HAL_TIM_Encoder_MspInit+0xec>)
 8005210:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005212:	4a10      	ldr	r2, [pc, #64]	@ (8005254 <HAL_TIM_Encoder_MspInit+0xec>)
 8005214:	f043 0302 	orr.w	r3, r3, #2
 8005218:	6313      	str	r3, [r2, #48]	@ 0x30
 800521a:	4b0e      	ldr	r3, [pc, #56]	@ (8005254 <HAL_TIM_Encoder_MspInit+0xec>)
 800521c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800521e:	f003 0302 	and.w	r3, r3, #2
 8005222:	60fb      	str	r3, [r7, #12]
 8005224:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ENCODER0_INB_Pin|ENCODER0_INA_Pin;
 8005226:	23c0      	movs	r3, #192	@ 0xc0
 8005228:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800522a:	2302      	movs	r3, #2
 800522c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800522e:	2300      	movs	r3, #0
 8005230:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005232:	2300      	movs	r3, #0
 8005234:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8005236:	2302      	movs	r3, #2
 8005238:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800523a:	f107 031c 	add.w	r3, r7, #28
 800523e:	4619      	mov	r1, r3
 8005240:	4805      	ldr	r0, [pc, #20]	@ (8005258 <HAL_TIM_Encoder_MspInit+0xf0>)
 8005242:	f001 fb67 	bl	8006914 <HAL_GPIO_Init>
}
 8005246:	bf00      	nop
 8005248:	3730      	adds	r7, #48	@ 0x30
 800524a:	46bd      	mov	sp, r7
 800524c:	bd80      	pop	{r7, pc}
 800524e:	bf00      	nop
 8005250:	40000400 	.word	0x40000400
 8005254:	40023800 	.word	0x40023800
 8005258:	40020400 	.word	0x40020400
 800525c:	40000800 	.word	0x40000800

08005260 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8005260:	b580      	push	{r7, lr}
 8005262:	b088      	sub	sp, #32
 8005264:	af00      	add	r7, sp, #0
 8005266:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005268:	f107 030c 	add.w	r3, r7, #12
 800526c:	2200      	movs	r2, #0
 800526e:	601a      	str	r2, [r3, #0]
 8005270:	605a      	str	r2, [r3, #4]
 8005272:	609a      	str	r2, [r3, #8]
 8005274:	60da      	str	r2, [r3, #12]
 8005276:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	4a12      	ldr	r2, [pc, #72]	@ (80052c8 <HAL_TIM_MspPostInit+0x68>)
 800527e:	4293      	cmp	r3, r2
 8005280:	d11e      	bne.n	80052c0 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005282:	2300      	movs	r3, #0
 8005284:	60bb      	str	r3, [r7, #8]
 8005286:	4b11      	ldr	r3, [pc, #68]	@ (80052cc <HAL_TIM_MspPostInit+0x6c>)
 8005288:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800528a:	4a10      	ldr	r2, [pc, #64]	@ (80052cc <HAL_TIM_MspPostInit+0x6c>)
 800528c:	f043 0301 	orr.w	r3, r3, #1
 8005290:	6313      	str	r3, [r2, #48]	@ 0x30
 8005292:	4b0e      	ldr	r3, [pc, #56]	@ (80052cc <HAL_TIM_MspPostInit+0x6c>)
 8005294:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005296:	f003 0301 	and.w	r3, r3, #1
 800529a:	60bb      	str	r3, [r7, #8]
 800529c:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800529e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80052a2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80052a4:	2302      	movs	r3, #2
 80052a6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80052a8:	2300      	movs	r3, #0
 80052aa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80052ac:	2300      	movs	r3, #0
 80052ae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80052b0:	2301      	movs	r3, #1
 80052b2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80052b4:	f107 030c 	add.w	r3, r7, #12
 80052b8:	4619      	mov	r1, r3
 80052ba:	4805      	ldr	r0, [pc, #20]	@ (80052d0 <HAL_TIM_MspPostInit+0x70>)
 80052bc:	f001 fb2a 	bl	8006914 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80052c0:	bf00      	nop
 80052c2:	3720      	adds	r7, #32
 80052c4:	46bd      	mov	sp, r7
 80052c6:	bd80      	pop	{r7, pc}
 80052c8:	40010000 	.word	0x40010000
 80052cc:	40023800 	.word	0x40023800
 80052d0:	40020000 	.word	0x40020000

080052d4 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart6;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80052d4:	b580      	push	{r7, lr}
 80052d6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80052d8:	4b11      	ldr	r3, [pc, #68]	@ (8005320 <MX_USART2_UART_Init+0x4c>)
 80052da:	4a12      	ldr	r2, [pc, #72]	@ (8005324 <MX_USART2_UART_Init+0x50>)
 80052dc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80052de:	4b10      	ldr	r3, [pc, #64]	@ (8005320 <MX_USART2_UART_Init+0x4c>)
 80052e0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80052e4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80052e6:	4b0e      	ldr	r3, [pc, #56]	@ (8005320 <MX_USART2_UART_Init+0x4c>)
 80052e8:	2200      	movs	r2, #0
 80052ea:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80052ec:	4b0c      	ldr	r3, [pc, #48]	@ (8005320 <MX_USART2_UART_Init+0x4c>)
 80052ee:	2200      	movs	r2, #0
 80052f0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80052f2:	4b0b      	ldr	r3, [pc, #44]	@ (8005320 <MX_USART2_UART_Init+0x4c>)
 80052f4:	2200      	movs	r2, #0
 80052f6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80052f8:	4b09      	ldr	r3, [pc, #36]	@ (8005320 <MX_USART2_UART_Init+0x4c>)
 80052fa:	220c      	movs	r2, #12
 80052fc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80052fe:	4b08      	ldr	r3, [pc, #32]	@ (8005320 <MX_USART2_UART_Init+0x4c>)
 8005300:	2200      	movs	r2, #0
 8005302:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8005304:	4b06      	ldr	r3, [pc, #24]	@ (8005320 <MX_USART2_UART_Init+0x4c>)
 8005306:	2200      	movs	r2, #0
 8005308:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800530a:	4805      	ldr	r0, [pc, #20]	@ (8005320 <MX_USART2_UART_Init+0x4c>)
 800530c:	f004 fc04 	bl	8009b18 <HAL_UART_Init>
 8005310:	4603      	mov	r3, r0
 8005312:	2b00      	cmp	r3, #0
 8005314:	d001      	beq.n	800531a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8005316:	f7fd fb6f 	bl	80029f8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800531a:	bf00      	nop
 800531c:	bd80      	pop	{r7, pc}
 800531e:	bf00      	nop
 8005320:	20014028 	.word	0x20014028
 8005324:	40004400 	.word	0x40004400

08005328 <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 8005328:	b580      	push	{r7, lr}
 800532a:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 800532c:	4b11      	ldr	r3, [pc, #68]	@ (8005374 <MX_USART6_UART_Init+0x4c>)
 800532e:	4a12      	ldr	r2, [pc, #72]	@ (8005378 <MX_USART6_UART_Init+0x50>)
 8005330:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8005332:	4b10      	ldr	r3, [pc, #64]	@ (8005374 <MX_USART6_UART_Init+0x4c>)
 8005334:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8005338:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800533a:	4b0e      	ldr	r3, [pc, #56]	@ (8005374 <MX_USART6_UART_Init+0x4c>)
 800533c:	2200      	movs	r2, #0
 800533e:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8005340:	4b0c      	ldr	r3, [pc, #48]	@ (8005374 <MX_USART6_UART_Init+0x4c>)
 8005342:	2200      	movs	r2, #0
 8005344:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8005346:	4b0b      	ldr	r3, [pc, #44]	@ (8005374 <MX_USART6_UART_Init+0x4c>)
 8005348:	2200      	movs	r2, #0
 800534a:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 800534c:	4b09      	ldr	r3, [pc, #36]	@ (8005374 <MX_USART6_UART_Init+0x4c>)
 800534e:	220c      	movs	r2, #12
 8005350:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005352:	4b08      	ldr	r3, [pc, #32]	@ (8005374 <MX_USART6_UART_Init+0x4c>)
 8005354:	2200      	movs	r2, #0
 8005356:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8005358:	4b06      	ldr	r3, [pc, #24]	@ (8005374 <MX_USART6_UART_Init+0x4c>)
 800535a:	2200      	movs	r2, #0
 800535c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 800535e:	4805      	ldr	r0, [pc, #20]	@ (8005374 <MX_USART6_UART_Init+0x4c>)
 8005360:	f004 fbda 	bl	8009b18 <HAL_UART_Init>
 8005364:	4603      	mov	r3, r0
 8005366:	2b00      	cmp	r3, #0
 8005368:	d001      	beq.n	800536e <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 800536a:	f7fd fb45 	bl	80029f8 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 800536e:	bf00      	nop
 8005370:	bd80      	pop	{r7, pc}
 8005372:	bf00      	nop
 8005374:	20014070 	.word	0x20014070
 8005378:	40011400 	.word	0x40011400

0800537c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800537c:	b580      	push	{r7, lr}
 800537e:	b08c      	sub	sp, #48	@ 0x30
 8005380:	af00      	add	r7, sp, #0
 8005382:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005384:	f107 031c 	add.w	r3, r7, #28
 8005388:	2200      	movs	r2, #0
 800538a:	601a      	str	r2, [r3, #0]
 800538c:	605a      	str	r2, [r3, #4]
 800538e:	609a      	str	r2, [r3, #8]
 8005390:	60da      	str	r2, [r3, #12]
 8005392:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	4a36      	ldr	r2, [pc, #216]	@ (8005474 <HAL_UART_MspInit+0xf8>)
 800539a:	4293      	cmp	r3, r2
 800539c:	d12c      	bne.n	80053f8 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800539e:	2300      	movs	r3, #0
 80053a0:	61bb      	str	r3, [r7, #24]
 80053a2:	4b35      	ldr	r3, [pc, #212]	@ (8005478 <HAL_UART_MspInit+0xfc>)
 80053a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80053a6:	4a34      	ldr	r2, [pc, #208]	@ (8005478 <HAL_UART_MspInit+0xfc>)
 80053a8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80053ac:	6413      	str	r3, [r2, #64]	@ 0x40
 80053ae:	4b32      	ldr	r3, [pc, #200]	@ (8005478 <HAL_UART_MspInit+0xfc>)
 80053b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80053b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80053b6:	61bb      	str	r3, [r7, #24]
 80053b8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80053ba:	2300      	movs	r3, #0
 80053bc:	617b      	str	r3, [r7, #20]
 80053be:	4b2e      	ldr	r3, [pc, #184]	@ (8005478 <HAL_UART_MspInit+0xfc>)
 80053c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80053c2:	4a2d      	ldr	r2, [pc, #180]	@ (8005478 <HAL_UART_MspInit+0xfc>)
 80053c4:	f043 0301 	orr.w	r3, r3, #1
 80053c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80053ca:	4b2b      	ldr	r3, [pc, #172]	@ (8005478 <HAL_UART_MspInit+0xfc>)
 80053cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80053ce:	f003 0301 	and.w	r3, r3, #1
 80053d2:	617b      	str	r3, [r7, #20]
 80053d4:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80053d6:	230c      	movs	r3, #12
 80053d8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80053da:	2302      	movs	r3, #2
 80053dc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80053de:	2300      	movs	r3, #0
 80053e0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80053e2:	2303      	movs	r3, #3
 80053e4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80053e6:	2307      	movs	r3, #7
 80053e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80053ea:	f107 031c 	add.w	r3, r7, #28
 80053ee:	4619      	mov	r1, r3
 80053f0:	4822      	ldr	r0, [pc, #136]	@ (800547c <HAL_UART_MspInit+0x100>)
 80053f2:	f001 fa8f 	bl	8006914 <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 80053f6:	e038      	b.n	800546a <HAL_UART_MspInit+0xee>
  else if(uartHandle->Instance==USART6)
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	4a20      	ldr	r2, [pc, #128]	@ (8005480 <HAL_UART_MspInit+0x104>)
 80053fe:	4293      	cmp	r3, r2
 8005400:	d133      	bne.n	800546a <HAL_UART_MspInit+0xee>
    __HAL_RCC_USART6_CLK_ENABLE();
 8005402:	2300      	movs	r3, #0
 8005404:	613b      	str	r3, [r7, #16]
 8005406:	4b1c      	ldr	r3, [pc, #112]	@ (8005478 <HAL_UART_MspInit+0xfc>)
 8005408:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800540a:	4a1b      	ldr	r2, [pc, #108]	@ (8005478 <HAL_UART_MspInit+0xfc>)
 800540c:	f043 0320 	orr.w	r3, r3, #32
 8005410:	6453      	str	r3, [r2, #68]	@ 0x44
 8005412:	4b19      	ldr	r3, [pc, #100]	@ (8005478 <HAL_UART_MspInit+0xfc>)
 8005414:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005416:	f003 0320 	and.w	r3, r3, #32
 800541a:	613b      	str	r3, [r7, #16]
 800541c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800541e:	2300      	movs	r3, #0
 8005420:	60fb      	str	r3, [r7, #12]
 8005422:	4b15      	ldr	r3, [pc, #84]	@ (8005478 <HAL_UART_MspInit+0xfc>)
 8005424:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005426:	4a14      	ldr	r2, [pc, #80]	@ (8005478 <HAL_UART_MspInit+0xfc>)
 8005428:	f043 0304 	orr.w	r3, r3, #4
 800542c:	6313      	str	r3, [r2, #48]	@ 0x30
 800542e:	4b12      	ldr	r3, [pc, #72]	@ (8005478 <HAL_UART_MspInit+0xfc>)
 8005430:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005432:	f003 0304 	and.w	r3, r3, #4
 8005436:	60fb      	str	r3, [r7, #12]
 8005438:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800543a:	23c0      	movs	r3, #192	@ 0xc0
 800543c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800543e:	2302      	movs	r3, #2
 8005440:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005442:	2300      	movs	r3, #0
 8005444:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005446:	2303      	movs	r3, #3
 8005448:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 800544a:	2308      	movs	r3, #8
 800544c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800544e:	f107 031c 	add.w	r3, r7, #28
 8005452:	4619      	mov	r1, r3
 8005454:	480b      	ldr	r0, [pc, #44]	@ (8005484 <HAL_UART_MspInit+0x108>)
 8005456:	f001 fa5d 	bl	8006914 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 800545a:	2200      	movs	r2, #0
 800545c:	2100      	movs	r1, #0
 800545e:	2047      	movs	r0, #71	@ 0x47
 8005460:	f000 fe03 	bl	800606a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8005464:	2047      	movs	r0, #71	@ 0x47
 8005466:	f000 fe1c 	bl	80060a2 <HAL_NVIC_EnableIRQ>
}
 800546a:	bf00      	nop
 800546c:	3730      	adds	r7, #48	@ 0x30
 800546e:	46bd      	mov	sp, r7
 8005470:	bd80      	pop	{r7, pc}
 8005472:	bf00      	nop
 8005474:	40004400 	.word	0x40004400
 8005478:	40023800 	.word	0x40023800
 800547c:	40020000 	.word	0x40020000
 8005480:	40011400 	.word	0x40011400
 8005484:	40020800 	.word	0x40020800

08005488 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8005488:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80054c0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800548c:	f7ff fc3e 	bl	8004d0c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8005490:	480c      	ldr	r0, [pc, #48]	@ (80054c4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8005492:	490d      	ldr	r1, [pc, #52]	@ (80054c8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8005494:	4a0d      	ldr	r2, [pc, #52]	@ (80054cc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8005496:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005498:	e002      	b.n	80054a0 <LoopCopyDataInit>

0800549a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800549a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800549c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800549e:	3304      	adds	r3, #4

080054a0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80054a0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80054a2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80054a4:	d3f9      	bcc.n	800549a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80054a6:	4a0a      	ldr	r2, [pc, #40]	@ (80054d0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80054a8:	4c0a      	ldr	r4, [pc, #40]	@ (80054d4 <LoopFillZerobss+0x22>)
  movs r3, #0
 80054aa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80054ac:	e001      	b.n	80054b2 <LoopFillZerobss>

080054ae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80054ae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80054b0:	3204      	adds	r2, #4

080054b2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80054b2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80054b4:	d3fb      	bcc.n	80054ae <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80054b6:	f006 fc99 	bl	800bdec <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80054ba:	f7fd f989 	bl	80027d0 <main>
  bx  lr    
 80054be:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80054c0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80054c4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80054c8:	2000d2fc 	.word	0x2000d2fc
  ldr r2, =_sidata
 80054cc:	08010f54 	.word	0x08010f54
  ldr r2, =_sbss
 80054d0:	2000d2fc 	.word	0x2000d2fc
  ldr r4, =_ebss
 80054d4:	2001421c 	.word	0x2001421c

080054d8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80054d8:	e7fe      	b.n	80054d8 <ADC_IRQHandler>
	...

080054dc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80054dc:	b580      	push	{r7, lr}
 80054de:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80054e0:	4b0e      	ldr	r3, [pc, #56]	@ (800551c <HAL_Init+0x40>)
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	4a0d      	ldr	r2, [pc, #52]	@ (800551c <HAL_Init+0x40>)
 80054e6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80054ea:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80054ec:	4b0b      	ldr	r3, [pc, #44]	@ (800551c <HAL_Init+0x40>)
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	4a0a      	ldr	r2, [pc, #40]	@ (800551c <HAL_Init+0x40>)
 80054f2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80054f6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80054f8:	4b08      	ldr	r3, [pc, #32]	@ (800551c <HAL_Init+0x40>)
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	4a07      	ldr	r2, [pc, #28]	@ (800551c <HAL_Init+0x40>)
 80054fe:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005502:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005504:	2003      	movs	r0, #3
 8005506:	f000 fda5 	bl	8006054 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800550a:	2000      	movs	r0, #0
 800550c:	f000 f808 	bl	8005520 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8005510:	f7ff fb30 	bl	8004b74 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8005514:	2300      	movs	r3, #0
}
 8005516:	4618      	mov	r0, r3
 8005518:	bd80      	pop	{r7, pc}
 800551a:	bf00      	nop
 800551c:	40023c00 	.word	0x40023c00

08005520 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005520:	b580      	push	{r7, lr}
 8005522:	b082      	sub	sp, #8
 8005524:	af00      	add	r7, sp, #0
 8005526:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8005528:	4b12      	ldr	r3, [pc, #72]	@ (8005574 <HAL_InitTick+0x54>)
 800552a:	681a      	ldr	r2, [r3, #0]
 800552c:	4b12      	ldr	r3, [pc, #72]	@ (8005578 <HAL_InitTick+0x58>)
 800552e:	781b      	ldrb	r3, [r3, #0]
 8005530:	4619      	mov	r1, r3
 8005532:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8005536:	fbb3 f3f1 	udiv	r3, r3, r1
 800553a:	fbb2 f3f3 	udiv	r3, r2, r3
 800553e:	4618      	mov	r0, r3
 8005540:	f000 fdbd 	bl	80060be <HAL_SYSTICK_Config>
 8005544:	4603      	mov	r3, r0
 8005546:	2b00      	cmp	r3, #0
 8005548:	d001      	beq.n	800554e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800554a:	2301      	movs	r3, #1
 800554c:	e00e      	b.n	800556c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	2b0f      	cmp	r3, #15
 8005552:	d80a      	bhi.n	800556a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005554:	2200      	movs	r2, #0
 8005556:	6879      	ldr	r1, [r7, #4]
 8005558:	f04f 30ff 	mov.w	r0, #4294967295
 800555c:	f000 fd85 	bl	800606a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8005560:	4a06      	ldr	r2, [pc, #24]	@ (800557c <HAL_InitTick+0x5c>)
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8005566:	2300      	movs	r3, #0
 8005568:	e000      	b.n	800556c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800556a:	2301      	movs	r3, #1
}
 800556c:	4618      	mov	r0, r3
 800556e:	3708      	adds	r7, #8
 8005570:	46bd      	mov	sp, r7
 8005572:	bd80      	pop	{r7, pc}
 8005574:	2000d114 	.word	0x2000d114
 8005578:	2000d11c 	.word	0x2000d11c
 800557c:	2000d118 	.word	0x2000d118

08005580 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005580:	b480      	push	{r7}
 8005582:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005584:	4b06      	ldr	r3, [pc, #24]	@ (80055a0 <HAL_IncTick+0x20>)
 8005586:	781b      	ldrb	r3, [r3, #0]
 8005588:	461a      	mov	r2, r3
 800558a:	4b06      	ldr	r3, [pc, #24]	@ (80055a4 <HAL_IncTick+0x24>)
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	4413      	add	r3, r2
 8005590:	4a04      	ldr	r2, [pc, #16]	@ (80055a4 <HAL_IncTick+0x24>)
 8005592:	6013      	str	r3, [r2, #0]
}
 8005594:	bf00      	nop
 8005596:	46bd      	mov	sp, r7
 8005598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800559c:	4770      	bx	lr
 800559e:	bf00      	nop
 80055a0:	2000d11c 	.word	0x2000d11c
 80055a4:	200140b8 	.word	0x200140b8

080055a8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80055a8:	b480      	push	{r7}
 80055aa:	af00      	add	r7, sp, #0
  return uwTick;
 80055ac:	4b03      	ldr	r3, [pc, #12]	@ (80055bc <HAL_GetTick+0x14>)
 80055ae:	681b      	ldr	r3, [r3, #0]
}
 80055b0:	4618      	mov	r0, r3
 80055b2:	46bd      	mov	sp, r7
 80055b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b8:	4770      	bx	lr
 80055ba:	bf00      	nop
 80055bc:	200140b8 	.word	0x200140b8

080055c0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80055c0:	b580      	push	{r7, lr}
 80055c2:	b084      	sub	sp, #16
 80055c4:	af00      	add	r7, sp, #0
 80055c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80055c8:	f7ff ffee 	bl	80055a8 <HAL_GetTick>
 80055cc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055d8:	d005      	beq.n	80055e6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80055da:	4b0a      	ldr	r3, [pc, #40]	@ (8005604 <HAL_Delay+0x44>)
 80055dc:	781b      	ldrb	r3, [r3, #0]
 80055de:	461a      	mov	r2, r3
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	4413      	add	r3, r2
 80055e4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80055e6:	bf00      	nop
 80055e8:	f7ff ffde 	bl	80055a8 <HAL_GetTick>
 80055ec:	4602      	mov	r2, r0
 80055ee:	68bb      	ldr	r3, [r7, #8]
 80055f0:	1ad3      	subs	r3, r2, r3
 80055f2:	68fa      	ldr	r2, [r7, #12]
 80055f4:	429a      	cmp	r2, r3
 80055f6:	d8f7      	bhi.n	80055e8 <HAL_Delay+0x28>
  {
  }
}
 80055f8:	bf00      	nop
 80055fa:	bf00      	nop
 80055fc:	3710      	adds	r7, #16
 80055fe:	46bd      	mov	sp, r7
 8005600:	bd80      	pop	{r7, pc}
 8005602:	bf00      	nop
 8005604:	2000d11c 	.word	0x2000d11c

08005608 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8005608:	b580      	push	{r7, lr}
 800560a:	b084      	sub	sp, #16
 800560c:	af00      	add	r7, sp, #0
 800560e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005610:	2300      	movs	r3, #0
 8005612:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	2b00      	cmp	r3, #0
 8005618:	d101      	bne.n	800561e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800561a:	2301      	movs	r3, #1
 800561c:	e033      	b.n	8005686 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005622:	2b00      	cmp	r3, #0
 8005624:	d109      	bne.n	800563a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8005626:	6878      	ldr	r0, [r7, #4]
 8005628:	f7fb fe44 	bl	80012b4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	2200      	movs	r2, #0
 8005630:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	2200      	movs	r2, #0
 8005636:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800563e:	f003 0310 	and.w	r3, r3, #16
 8005642:	2b00      	cmp	r3, #0
 8005644:	d118      	bne.n	8005678 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800564a:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800564e:	f023 0302 	bic.w	r3, r3, #2
 8005652:	f043 0202 	orr.w	r2, r3, #2
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 800565a:	6878      	ldr	r0, [r7, #4]
 800565c:	f000 faac 	bl	8005bb8 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	2200      	movs	r2, #0
 8005664:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800566a:	f023 0303 	bic.w	r3, r3, #3
 800566e:	f043 0201 	orr.w	r2, r3, #1
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	641a      	str	r2, [r3, #64]	@ 0x40
 8005676:	e001      	b.n	800567c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8005678:	2301      	movs	r3, #1
 800567a:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	2200      	movs	r2, #0
 8005680:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8005684:	7bfb      	ldrb	r3, [r7, #15]
}
 8005686:	4618      	mov	r0, r3
 8005688:	3710      	adds	r7, #16
 800568a:	46bd      	mov	sp, r7
 800568c:	bd80      	pop	{r7, pc}
	...

08005690 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8005690:	b580      	push	{r7, lr}
 8005692:	b088      	sub	sp, #32
 8005694:	af00      	add	r7, sp, #0
 8005696:	60f8      	str	r0, [r7, #12]
 8005698:	60b9      	str	r1, [r7, #8]
 800569a:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 800569c:	2300      	movs	r3, #0
 800569e:	617b      	str	r3, [r7, #20]
  ADC_Common_TypeDef *tmpADC_Common;
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80056a0:	2300      	movs	r3, #0
 80056a2:	77fb      	strb	r3, [r7, #31]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80056aa:	2b01      	cmp	r3, #1
 80056ac:	d101      	bne.n	80056b2 <HAL_ADC_Start_DMA+0x22>
 80056ae:	2302      	movs	r3, #2
 80056b0:	e0d0      	b.n	8005854 <HAL_ADC_Start_DMA+0x1c4>
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	2201      	movs	r2, #1
 80056b6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	689b      	ldr	r3, [r3, #8]
 80056c0:	f003 0301 	and.w	r3, r3, #1
 80056c4:	2b01      	cmp	r3, #1
 80056c6:	d018      	beq.n	80056fa <HAL_ADC_Start_DMA+0x6a>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	689a      	ldr	r2, [r3, #8]
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	f042 0201 	orr.w	r2, r2, #1
 80056d6:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80056d8:	4b60      	ldr	r3, [pc, #384]	@ (800585c <HAL_ADC_Start_DMA+0x1cc>)
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	4a60      	ldr	r2, [pc, #384]	@ (8005860 <HAL_ADC_Start_DMA+0x1d0>)
 80056de:	fba2 2303 	umull	r2, r3, r2, r3
 80056e2:	0c9a      	lsrs	r2, r3, #18
 80056e4:	4613      	mov	r3, r2
 80056e6:	005b      	lsls	r3, r3, #1
 80056e8:	4413      	add	r3, r2
 80056ea:	617b      	str	r3, [r7, #20]
    while (counter != 0U)
 80056ec:	e002      	b.n	80056f4 <HAL_ADC_Start_DMA+0x64>
    {
      counter--;
 80056ee:	697b      	ldr	r3, [r7, #20]
 80056f0:	3b01      	subs	r3, #1
 80056f2:	617b      	str	r3, [r7, #20]
    while (counter != 0U)
 80056f4:	697b      	ldr	r3, [r7, #20]
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d1f9      	bne.n	80056ee <HAL_ADC_Start_DMA+0x5e>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	689b      	ldr	r3, [r3, #8]
 8005700:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005704:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005708:	d107      	bne.n	800571a <HAL_ADC_Start_DMA+0x8a>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	689a      	ldr	r2, [r3, #8]
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005718:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	689b      	ldr	r3, [r3, #8]
 8005720:	f003 0301 	and.w	r3, r3, #1
 8005724:	2b01      	cmp	r3, #1
 8005726:	f040 8088 	bne.w	800583a <HAL_ADC_Start_DMA+0x1aa>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800572e:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8005732:	f023 0301 	bic.w	r3, r3, #1
 8005736:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	685b      	ldr	r3, [r3, #4]
 8005744:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005748:	2b00      	cmp	r3, #0
 800574a:	d007      	beq.n	800575c <HAL_ADC_Start_DMA+0xcc>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005750:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8005754:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005760:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005764:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005768:	d106      	bne.n	8005778 <HAL_ADC_Start_DMA+0xe8>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800576e:	f023 0206 	bic.w	r2, r3, #6
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	645a      	str	r2, [r3, #68]	@ 0x44
 8005776:	e002      	b.n	800577e <HAL_ADC_Start_DMA+0xee>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	2200      	movs	r2, #0
 800577c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	2200      	movs	r2, #0
 8005782:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005786:	4b37      	ldr	r3, [pc, #220]	@ (8005864 <HAL_ADC_Start_DMA+0x1d4>)
 8005788:	61bb      	str	r3, [r7, #24]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800578e:	4a36      	ldr	r2, [pc, #216]	@ (8005868 <HAL_ADC_Start_DMA+0x1d8>)
 8005790:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005796:	4a35      	ldr	r2, [pc, #212]	@ (800586c <HAL_ADC_Start_DMA+0x1dc>)
 8005798:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800579e:	4a34      	ldr	r2, [pc, #208]	@ (8005870 <HAL_ADC_Start_DMA+0x1e0>)
 80057a0:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 80057aa:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	685a      	ldr	r2, [r3, #4]
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 80057ba:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	689a      	ldr	r2, [r3, #8]
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80057ca:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	334c      	adds	r3, #76	@ 0x4c
 80057d6:	4619      	mov	r1, r3
 80057d8:	68ba      	ldr	r2, [r7, #8]
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	f000 fd46 	bl	800626c <HAL_DMA_Start_IT>
 80057e0:	4603      	mov	r3, r0
 80057e2:	77fb      	strb	r3, [r7, #31]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80057e4:	69bb      	ldr	r3, [r7, #24]
 80057e6:	685b      	ldr	r3, [r3, #4]
 80057e8:	f003 031f 	and.w	r3, r3, #31
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d10f      	bne.n	8005810 <HAL_ADC_Start_DMA+0x180>
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	689b      	ldr	r3, [r3, #8]
 80057f6:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d129      	bne.n	8005852 <HAL_ADC_Start_DMA+0x1c2>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	689a      	ldr	r2, [r3, #8]
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 800580c:	609a      	str	r2, [r3, #8]
 800580e:	e020      	b.n	8005852 <HAL_ADC_Start_DMA+0x1c2>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	4a17      	ldr	r2, [pc, #92]	@ (8005874 <HAL_ADC_Start_DMA+0x1e4>)
 8005816:	4293      	cmp	r3, r2
 8005818:	d11b      	bne.n	8005852 <HAL_ADC_Start_DMA+0x1c2>
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	689b      	ldr	r3, [r3, #8]
 8005820:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8005824:	2b00      	cmp	r3, #0
 8005826:	d114      	bne.n	8005852 <HAL_ADC_Start_DMA+0x1c2>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	689a      	ldr	r2, [r3, #8]
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8005836:	609a      	str	r2, [r3, #8]
 8005838:	e00b      	b.n	8005852 <HAL_ADC_Start_DMA+0x1c2>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800583e:	f043 0210 	orr.w	r2, r3, #16
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800584a:	f043 0201 	orr.w	r2, r3, #1
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return tmp_hal_status;
 8005852:	7ffb      	ldrb	r3, [r7, #31]
}
 8005854:	4618      	mov	r0, r3
 8005856:	3720      	adds	r7, #32
 8005858:	46bd      	mov	sp, r7
 800585a:	bd80      	pop	{r7, pc}
 800585c:	2000d114 	.word	0x2000d114
 8005860:	431bde83 	.word	0x431bde83
 8005864:	40012300 	.word	0x40012300
 8005868:	08005db1 	.word	0x08005db1
 800586c:	08005e6b 	.word	0x08005e6b
 8005870:	08005e87 	.word	0x08005e87
 8005874:	40012000 	.word	0x40012000

08005878 <HAL_ADC_Stop_DMA>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef *hadc)
{
 8005878:	b580      	push	{r7, lr}
 800587a:	b084      	sub	sp, #16
 800587c:	af00      	add	r7, sp, #0
 800587e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005880:	2300      	movs	r3, #0
 8005882:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800588a:	2b01      	cmp	r3, #1
 800588c:	d101      	bne.n	8005892 <HAL_ADC_Stop_DMA+0x1a>
 800588e:	2302      	movs	r3, #2
 8005890:	e048      	b.n	8005924 <HAL_ADC_Stop_DMA+0xac>
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	2201      	movs	r2, #1
 8005896:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	689a      	ldr	r2, [r3, #8]
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	f022 0201 	bic.w	r2, r2, #1
 80058a8:	609a      	str	r2, [r3, #8]

  /* Check if ADC is effectively disabled */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	689b      	ldr	r3, [r3, #8]
 80058b0:	f003 0301 	and.w	r3, r3, #1
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d130      	bne.n	800591a <HAL_ADC_Stop_DMA+0xa2>
  {
    /* Disable the selected ADC DMA mode */
    hadc->Instance->CR2 &= ~ADC_CR2_DMA;
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	689a      	ldr	r2, [r3, #8]
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80058c6:	609a      	str	r2, [r3, #8]

    /* Disable the DMA channel (in case of DMA in circular mode or stop while */
    /* DMA transfer is on going)                                              */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80058cc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80058d0:	b2db      	uxtb	r3, r3
 80058d2:	2b02      	cmp	r3, #2
 80058d4:	d10f      	bne.n	80058f6 <HAL_ADC_Stop_DMA+0x7e>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80058da:	4618      	mov	r0, r3
 80058dc:	f000 fd1e 	bl	800631c <HAL_DMA_Abort>
 80058e0:	4603      	mov	r3, r0
 80058e2:	73fb      	strb	r3, [r7, #15]

      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 80058e4:	7bfb      	ldrb	r3, [r7, #15]
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d005      	beq.n	80058f6 <HAL_ADC_Stop_DMA+0x7e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80058ee:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	641a      	str	r2, [r3, #64]	@ 0x40
      }
    }

    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	685a      	ldr	r2, [r3, #4]
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	f022 6280 	bic.w	r2, r2, #67108864	@ 0x4000000
 8005904:	605a      	str	r2, [r3, #4]

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800590a:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800590e:	f023 0301 	bic.w	r3, r3, #1
 8005912:	f043 0201 	orr.w	r2, r3, #1
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	2200      	movs	r2, #0
 800591e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8005922:	7bfb      	ldrb	r3, [r7, #15]
}
 8005924:	4618      	mov	r0, r3
 8005926:	3710      	adds	r7, #16
 8005928:	46bd      	mov	sp, r7
 800592a:	bd80      	pop	{r7, pc}

0800592c <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 800592c:	b480      	push	{r7}
 800592e:	b083      	sub	sp, #12
 8005930:	af00      	add	r7, sp, #0
 8005932:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8005934:	bf00      	nop
 8005936:	370c      	adds	r7, #12
 8005938:	46bd      	mov	sp, r7
 800593a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800593e:	4770      	bx	lr

08005940 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8005940:	b480      	push	{r7}
 8005942:	b083      	sub	sp, #12
 8005944:	af00      	add	r7, sp, #0
 8005946:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8005948:	bf00      	nop
 800594a:	370c      	adds	r7, #12
 800594c:	46bd      	mov	sp, r7
 800594e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005952:	4770      	bx	lr

08005954 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8005954:	b480      	push	{r7}
 8005956:	b085      	sub	sp, #20
 8005958:	af00      	add	r7, sp, #0
 800595a:	6078      	str	r0, [r7, #4]
 800595c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800595e:	2300      	movs	r3, #0
 8005960:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005968:	2b01      	cmp	r3, #1
 800596a:	d101      	bne.n	8005970 <HAL_ADC_ConfigChannel+0x1c>
 800596c:	2302      	movs	r3, #2
 800596e:	e113      	b.n	8005b98 <HAL_ADC_ConfigChannel+0x244>
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	2201      	movs	r2, #1
 8005974:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8005978:	683b      	ldr	r3, [r7, #0]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	2b09      	cmp	r3, #9
 800597e:	d925      	bls.n	80059cc <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	68d9      	ldr	r1, [r3, #12]
 8005986:	683b      	ldr	r3, [r7, #0]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	b29b      	uxth	r3, r3
 800598c:	461a      	mov	r2, r3
 800598e:	4613      	mov	r3, r2
 8005990:	005b      	lsls	r3, r3, #1
 8005992:	4413      	add	r3, r2
 8005994:	3b1e      	subs	r3, #30
 8005996:	2207      	movs	r2, #7
 8005998:	fa02 f303 	lsl.w	r3, r2, r3
 800599c:	43da      	mvns	r2, r3
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	400a      	ands	r2, r1
 80059a4:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	68d9      	ldr	r1, [r3, #12]
 80059ac:	683b      	ldr	r3, [r7, #0]
 80059ae:	689a      	ldr	r2, [r3, #8]
 80059b0:	683b      	ldr	r3, [r7, #0]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	b29b      	uxth	r3, r3
 80059b6:	4618      	mov	r0, r3
 80059b8:	4603      	mov	r3, r0
 80059ba:	005b      	lsls	r3, r3, #1
 80059bc:	4403      	add	r3, r0
 80059be:	3b1e      	subs	r3, #30
 80059c0:	409a      	lsls	r2, r3
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	430a      	orrs	r2, r1
 80059c8:	60da      	str	r2, [r3, #12]
 80059ca:	e022      	b.n	8005a12 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	6919      	ldr	r1, [r3, #16]
 80059d2:	683b      	ldr	r3, [r7, #0]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	b29b      	uxth	r3, r3
 80059d8:	461a      	mov	r2, r3
 80059da:	4613      	mov	r3, r2
 80059dc:	005b      	lsls	r3, r3, #1
 80059de:	4413      	add	r3, r2
 80059e0:	2207      	movs	r2, #7
 80059e2:	fa02 f303 	lsl.w	r3, r2, r3
 80059e6:	43da      	mvns	r2, r3
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	400a      	ands	r2, r1
 80059ee:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	6919      	ldr	r1, [r3, #16]
 80059f6:	683b      	ldr	r3, [r7, #0]
 80059f8:	689a      	ldr	r2, [r3, #8]
 80059fa:	683b      	ldr	r3, [r7, #0]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	b29b      	uxth	r3, r3
 8005a00:	4618      	mov	r0, r3
 8005a02:	4603      	mov	r3, r0
 8005a04:	005b      	lsls	r3, r3, #1
 8005a06:	4403      	add	r3, r0
 8005a08:	409a      	lsls	r2, r3
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	430a      	orrs	r2, r1
 8005a10:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8005a12:	683b      	ldr	r3, [r7, #0]
 8005a14:	685b      	ldr	r3, [r3, #4]
 8005a16:	2b06      	cmp	r3, #6
 8005a18:	d824      	bhi.n	8005a64 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8005a20:	683b      	ldr	r3, [r7, #0]
 8005a22:	685a      	ldr	r2, [r3, #4]
 8005a24:	4613      	mov	r3, r2
 8005a26:	009b      	lsls	r3, r3, #2
 8005a28:	4413      	add	r3, r2
 8005a2a:	3b05      	subs	r3, #5
 8005a2c:	221f      	movs	r2, #31
 8005a2e:	fa02 f303 	lsl.w	r3, r2, r3
 8005a32:	43da      	mvns	r2, r3
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	400a      	ands	r2, r1
 8005a3a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8005a42:	683b      	ldr	r3, [r7, #0]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	b29b      	uxth	r3, r3
 8005a48:	4618      	mov	r0, r3
 8005a4a:	683b      	ldr	r3, [r7, #0]
 8005a4c:	685a      	ldr	r2, [r3, #4]
 8005a4e:	4613      	mov	r3, r2
 8005a50:	009b      	lsls	r3, r3, #2
 8005a52:	4413      	add	r3, r2
 8005a54:	3b05      	subs	r3, #5
 8005a56:	fa00 f203 	lsl.w	r2, r0, r3
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	430a      	orrs	r2, r1
 8005a60:	635a      	str	r2, [r3, #52]	@ 0x34
 8005a62:	e04c      	b.n	8005afe <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8005a64:	683b      	ldr	r3, [r7, #0]
 8005a66:	685b      	ldr	r3, [r3, #4]
 8005a68:	2b0c      	cmp	r3, #12
 8005a6a:	d824      	bhi.n	8005ab6 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8005a72:	683b      	ldr	r3, [r7, #0]
 8005a74:	685a      	ldr	r2, [r3, #4]
 8005a76:	4613      	mov	r3, r2
 8005a78:	009b      	lsls	r3, r3, #2
 8005a7a:	4413      	add	r3, r2
 8005a7c:	3b23      	subs	r3, #35	@ 0x23
 8005a7e:	221f      	movs	r2, #31
 8005a80:	fa02 f303 	lsl.w	r3, r2, r3
 8005a84:	43da      	mvns	r2, r3
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	400a      	ands	r2, r1
 8005a8c:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8005a94:	683b      	ldr	r3, [r7, #0]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	b29b      	uxth	r3, r3
 8005a9a:	4618      	mov	r0, r3
 8005a9c:	683b      	ldr	r3, [r7, #0]
 8005a9e:	685a      	ldr	r2, [r3, #4]
 8005aa0:	4613      	mov	r3, r2
 8005aa2:	009b      	lsls	r3, r3, #2
 8005aa4:	4413      	add	r3, r2
 8005aa6:	3b23      	subs	r3, #35	@ 0x23
 8005aa8:	fa00 f203 	lsl.w	r2, r0, r3
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	430a      	orrs	r2, r1
 8005ab2:	631a      	str	r2, [r3, #48]	@ 0x30
 8005ab4:	e023      	b.n	8005afe <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8005abc:	683b      	ldr	r3, [r7, #0]
 8005abe:	685a      	ldr	r2, [r3, #4]
 8005ac0:	4613      	mov	r3, r2
 8005ac2:	009b      	lsls	r3, r3, #2
 8005ac4:	4413      	add	r3, r2
 8005ac6:	3b41      	subs	r3, #65	@ 0x41
 8005ac8:	221f      	movs	r2, #31
 8005aca:	fa02 f303 	lsl.w	r3, r2, r3
 8005ace:	43da      	mvns	r2, r3
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	400a      	ands	r2, r1
 8005ad6:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8005ade:	683b      	ldr	r3, [r7, #0]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	b29b      	uxth	r3, r3
 8005ae4:	4618      	mov	r0, r3
 8005ae6:	683b      	ldr	r3, [r7, #0]
 8005ae8:	685a      	ldr	r2, [r3, #4]
 8005aea:	4613      	mov	r3, r2
 8005aec:	009b      	lsls	r3, r3, #2
 8005aee:	4413      	add	r3, r2
 8005af0:	3b41      	subs	r3, #65	@ 0x41
 8005af2:	fa00 f203 	lsl.w	r2, r0, r3
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	430a      	orrs	r2, r1
 8005afc:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005afe:	4b29      	ldr	r3, [pc, #164]	@ (8005ba4 <HAL_ADC_ConfigChannel+0x250>)
 8005b00:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	4a28      	ldr	r2, [pc, #160]	@ (8005ba8 <HAL_ADC_ConfigChannel+0x254>)
 8005b08:	4293      	cmp	r3, r2
 8005b0a:	d10f      	bne.n	8005b2c <HAL_ADC_ConfigChannel+0x1d8>
 8005b0c:	683b      	ldr	r3, [r7, #0]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	2b12      	cmp	r3, #18
 8005b12:	d10b      	bne.n	8005b2c <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	685b      	ldr	r3, [r3, #4]
 8005b18:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	685b      	ldr	r3, [r3, #4]
 8005b24:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	4a1d      	ldr	r2, [pc, #116]	@ (8005ba8 <HAL_ADC_ConfigChannel+0x254>)
 8005b32:	4293      	cmp	r3, r2
 8005b34:	d12b      	bne.n	8005b8e <HAL_ADC_ConfigChannel+0x23a>
 8005b36:	683b      	ldr	r3, [r7, #0]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	4a1c      	ldr	r2, [pc, #112]	@ (8005bac <HAL_ADC_ConfigChannel+0x258>)
 8005b3c:	4293      	cmp	r3, r2
 8005b3e:	d003      	beq.n	8005b48 <HAL_ADC_ConfigChannel+0x1f4>
 8005b40:	683b      	ldr	r3, [r7, #0]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	2b11      	cmp	r3, #17
 8005b46:	d122      	bne.n	8005b8e <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	685b      	ldr	r3, [r3, #4]
 8005b4c:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	685b      	ldr	r3, [r3, #4]
 8005b58:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8005b60:	683b      	ldr	r3, [r7, #0]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	4a11      	ldr	r2, [pc, #68]	@ (8005bac <HAL_ADC_ConfigChannel+0x258>)
 8005b66:	4293      	cmp	r3, r2
 8005b68:	d111      	bne.n	8005b8e <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8005b6a:	4b11      	ldr	r3, [pc, #68]	@ (8005bb0 <HAL_ADC_ConfigChannel+0x25c>)
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	4a11      	ldr	r2, [pc, #68]	@ (8005bb4 <HAL_ADC_ConfigChannel+0x260>)
 8005b70:	fba2 2303 	umull	r2, r3, r2, r3
 8005b74:	0c9a      	lsrs	r2, r3, #18
 8005b76:	4613      	mov	r3, r2
 8005b78:	009b      	lsls	r3, r3, #2
 8005b7a:	4413      	add	r3, r2
 8005b7c:	005b      	lsls	r3, r3, #1
 8005b7e:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8005b80:	e002      	b.n	8005b88 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8005b82:	68bb      	ldr	r3, [r7, #8]
 8005b84:	3b01      	subs	r3, #1
 8005b86:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8005b88:	68bb      	ldr	r3, [r7, #8]
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d1f9      	bne.n	8005b82 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	2200      	movs	r2, #0
 8005b92:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8005b96:	2300      	movs	r3, #0
}
 8005b98:	4618      	mov	r0, r3
 8005b9a:	3714      	adds	r7, #20
 8005b9c:	46bd      	mov	sp, r7
 8005b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ba2:	4770      	bx	lr
 8005ba4:	40012300 	.word	0x40012300
 8005ba8:	40012000 	.word	0x40012000
 8005bac:	10000012 	.word	0x10000012
 8005bb0:	2000d114 	.word	0x2000d114
 8005bb4:	431bde83 	.word	0x431bde83

08005bb8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8005bb8:	b480      	push	{r7}
 8005bba:	b085      	sub	sp, #20
 8005bbc:	af00      	add	r7, sp, #0
 8005bbe:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005bc0:	4b79      	ldr	r3, [pc, #484]	@ (8005da8 <ADC_Init+0x1f0>)
 8005bc2:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	685b      	ldr	r3, [r3, #4]
 8005bc8:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	685a      	ldr	r2, [r3, #4]
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	685b      	ldr	r3, [r3, #4]
 8005bd8:	431a      	orrs	r2, r3
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	685a      	ldr	r2, [r3, #4]
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005bec:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	6859      	ldr	r1, [r3, #4]
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	691b      	ldr	r3, [r3, #16]
 8005bf8:	021a      	lsls	r2, r3, #8
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	430a      	orrs	r2, r1
 8005c00:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	685a      	ldr	r2, [r3, #4]
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8005c10:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	6859      	ldr	r1, [r3, #4]
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	689a      	ldr	r2, [r3, #8]
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	430a      	orrs	r2, r1
 8005c22:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	689a      	ldr	r2, [r3, #8]
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005c32:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	6899      	ldr	r1, [r3, #8]
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	68da      	ldr	r2, [r3, #12]
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	430a      	orrs	r2, r1
 8005c44:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c4a:	4a58      	ldr	r2, [pc, #352]	@ (8005dac <ADC_Init+0x1f4>)
 8005c4c:	4293      	cmp	r3, r2
 8005c4e:	d022      	beq.n	8005c96 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	689a      	ldr	r2, [r3, #8]
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8005c5e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	6899      	ldr	r1, [r3, #8]
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	430a      	orrs	r2, r1
 8005c70:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	689a      	ldr	r2, [r3, #8]
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8005c80:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	6899      	ldr	r1, [r3, #8]
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	430a      	orrs	r2, r1
 8005c92:	609a      	str	r2, [r3, #8]
 8005c94:	e00f      	b.n	8005cb6 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	689a      	ldr	r2, [r3, #8]
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8005ca4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	689a      	ldr	r2, [r3, #8]
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8005cb4:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	689a      	ldr	r2, [r3, #8]
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	f022 0202 	bic.w	r2, r2, #2
 8005cc4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	6899      	ldr	r1, [r3, #8]
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	7e1b      	ldrb	r3, [r3, #24]
 8005cd0:	005a      	lsls	r2, r3, #1
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	430a      	orrs	r2, r1
 8005cd8:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d01b      	beq.n	8005d1c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	685a      	ldr	r2, [r3, #4]
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005cf2:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	685a      	ldr	r2, [r3, #4]
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8005d02:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	6859      	ldr	r1, [r3, #4]
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d0e:	3b01      	subs	r3, #1
 8005d10:	035a      	lsls	r2, r3, #13
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	430a      	orrs	r2, r1
 8005d18:	605a      	str	r2, [r3, #4]
 8005d1a:	e007      	b.n	8005d2c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	685a      	ldr	r2, [r3, #4]
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005d2a:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8005d3a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	69db      	ldr	r3, [r3, #28]
 8005d46:	3b01      	subs	r3, #1
 8005d48:	051a      	lsls	r2, r3, #20
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	430a      	orrs	r2, r1
 8005d50:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	689a      	ldr	r2, [r3, #8]
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8005d60:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	6899      	ldr	r1, [r3, #8]
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8005d6e:	025a      	lsls	r2, r3, #9
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	430a      	orrs	r2, r1
 8005d76:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	689a      	ldr	r2, [r3, #8]
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005d86:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	6899      	ldr	r1, [r3, #8]
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	695b      	ldr	r3, [r3, #20]
 8005d92:	029a      	lsls	r2, r3, #10
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	430a      	orrs	r2, r1
 8005d9a:	609a      	str	r2, [r3, #8]
}
 8005d9c:	bf00      	nop
 8005d9e:	3714      	adds	r7, #20
 8005da0:	46bd      	mov	sp, r7
 8005da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005da6:	4770      	bx	lr
 8005da8:	40012300 	.word	0x40012300
 8005dac:	0f000001 	.word	0x0f000001

08005db0 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8005db0:	b580      	push	{r7, lr}
 8005db2:	b084      	sub	sp, #16
 8005db4:	af00      	add	r7, sp, #0
 8005db6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005dbc:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005dc2:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d13c      	bne.n	8005e44 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005dce:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	689b      	ldr	r3, [r3, #8]
 8005ddc:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d12b      	bne.n	8005e3c <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d127      	bne.n	8005e3c <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005df2:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d006      	beq.n	8005e08 <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	689b      	ldr	r3, [r3, #8]
 8005e00:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d119      	bne.n	8005e3c <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	685a      	ldr	r2, [r3, #4]
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	f022 0220 	bic.w	r2, r2, #32
 8005e16:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e1c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e28:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d105      	bne.n	8005e3c <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e34:	f043 0201 	orr.w	r2, r3, #1
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8005e3c:	68f8      	ldr	r0, [r7, #12]
 8005e3e:	f7fc fad3 	bl	80023e8 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8005e42:	e00e      	b.n	8005e62 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e48:	f003 0310 	and.w	r3, r3, #16
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d003      	beq.n	8005e58 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8005e50:	68f8      	ldr	r0, [r7, #12]
 8005e52:	f7ff fd75 	bl	8005940 <HAL_ADC_ErrorCallback>
}
 8005e56:	e004      	b.n	8005e62 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e5c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005e5e:	6878      	ldr	r0, [r7, #4]
 8005e60:	4798      	blx	r3
}
 8005e62:	bf00      	nop
 8005e64:	3710      	adds	r7, #16
 8005e66:	46bd      	mov	sp, r7
 8005e68:	bd80      	pop	{r7, pc}

08005e6a <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8005e6a:	b580      	push	{r7, lr}
 8005e6c:	b084      	sub	sp, #16
 8005e6e:	af00      	add	r7, sp, #0
 8005e70:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e76:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8005e78:	68f8      	ldr	r0, [r7, #12]
 8005e7a:	f7ff fd57 	bl	800592c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8005e7e:	bf00      	nop
 8005e80:	3710      	adds	r7, #16
 8005e82:	46bd      	mov	sp, r7
 8005e84:	bd80      	pop	{r7, pc}

08005e86 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8005e86:	b580      	push	{r7, lr}
 8005e88:	b084      	sub	sp, #16
 8005e8a:	af00      	add	r7, sp, #0
 8005e8c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e92:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	2240      	movs	r2, #64	@ 0x40
 8005e98:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005e9e:	f043 0204 	orr.w	r2, r3, #4
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8005ea6:	68f8      	ldr	r0, [r7, #12]
 8005ea8:	f7ff fd4a 	bl	8005940 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8005eac:	bf00      	nop
 8005eae:	3710      	adds	r7, #16
 8005eb0:	46bd      	mov	sp, r7
 8005eb2:	bd80      	pop	{r7, pc}

08005eb4 <__NVIC_SetPriorityGrouping>:
{
 8005eb4:	b480      	push	{r7}
 8005eb6:	b085      	sub	sp, #20
 8005eb8:	af00      	add	r7, sp, #0
 8005eba:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	f003 0307 	and.w	r3, r3, #7
 8005ec2:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005ec4:	4b0c      	ldr	r3, [pc, #48]	@ (8005ef8 <__NVIC_SetPriorityGrouping+0x44>)
 8005ec6:	68db      	ldr	r3, [r3, #12]
 8005ec8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005eca:	68ba      	ldr	r2, [r7, #8]
 8005ecc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8005ed0:	4013      	ands	r3, r2
 8005ed2:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005ed8:	68bb      	ldr	r3, [r7, #8]
 8005eda:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005edc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8005ee0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005ee4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005ee6:	4a04      	ldr	r2, [pc, #16]	@ (8005ef8 <__NVIC_SetPriorityGrouping+0x44>)
 8005ee8:	68bb      	ldr	r3, [r7, #8]
 8005eea:	60d3      	str	r3, [r2, #12]
}
 8005eec:	bf00      	nop
 8005eee:	3714      	adds	r7, #20
 8005ef0:	46bd      	mov	sp, r7
 8005ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ef6:	4770      	bx	lr
 8005ef8:	e000ed00 	.word	0xe000ed00

08005efc <__NVIC_GetPriorityGrouping>:
{
 8005efc:	b480      	push	{r7}
 8005efe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005f00:	4b04      	ldr	r3, [pc, #16]	@ (8005f14 <__NVIC_GetPriorityGrouping+0x18>)
 8005f02:	68db      	ldr	r3, [r3, #12]
 8005f04:	0a1b      	lsrs	r3, r3, #8
 8005f06:	f003 0307 	and.w	r3, r3, #7
}
 8005f0a:	4618      	mov	r0, r3
 8005f0c:	46bd      	mov	sp, r7
 8005f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f12:	4770      	bx	lr
 8005f14:	e000ed00 	.word	0xe000ed00

08005f18 <__NVIC_EnableIRQ>:
{
 8005f18:	b480      	push	{r7}
 8005f1a:	b083      	sub	sp, #12
 8005f1c:	af00      	add	r7, sp, #0
 8005f1e:	4603      	mov	r3, r0
 8005f20:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005f22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	db0b      	blt.n	8005f42 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005f2a:	79fb      	ldrb	r3, [r7, #7]
 8005f2c:	f003 021f 	and.w	r2, r3, #31
 8005f30:	4907      	ldr	r1, [pc, #28]	@ (8005f50 <__NVIC_EnableIRQ+0x38>)
 8005f32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005f36:	095b      	lsrs	r3, r3, #5
 8005f38:	2001      	movs	r0, #1
 8005f3a:	fa00 f202 	lsl.w	r2, r0, r2
 8005f3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8005f42:	bf00      	nop
 8005f44:	370c      	adds	r7, #12
 8005f46:	46bd      	mov	sp, r7
 8005f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f4c:	4770      	bx	lr
 8005f4e:	bf00      	nop
 8005f50:	e000e100 	.word	0xe000e100

08005f54 <__NVIC_SetPriority>:
{
 8005f54:	b480      	push	{r7}
 8005f56:	b083      	sub	sp, #12
 8005f58:	af00      	add	r7, sp, #0
 8005f5a:	4603      	mov	r3, r0
 8005f5c:	6039      	str	r1, [r7, #0]
 8005f5e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005f60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	db0a      	blt.n	8005f7e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005f68:	683b      	ldr	r3, [r7, #0]
 8005f6a:	b2da      	uxtb	r2, r3
 8005f6c:	490c      	ldr	r1, [pc, #48]	@ (8005fa0 <__NVIC_SetPriority+0x4c>)
 8005f6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005f72:	0112      	lsls	r2, r2, #4
 8005f74:	b2d2      	uxtb	r2, r2
 8005f76:	440b      	add	r3, r1
 8005f78:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8005f7c:	e00a      	b.n	8005f94 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005f7e:	683b      	ldr	r3, [r7, #0]
 8005f80:	b2da      	uxtb	r2, r3
 8005f82:	4908      	ldr	r1, [pc, #32]	@ (8005fa4 <__NVIC_SetPriority+0x50>)
 8005f84:	79fb      	ldrb	r3, [r7, #7]
 8005f86:	f003 030f 	and.w	r3, r3, #15
 8005f8a:	3b04      	subs	r3, #4
 8005f8c:	0112      	lsls	r2, r2, #4
 8005f8e:	b2d2      	uxtb	r2, r2
 8005f90:	440b      	add	r3, r1
 8005f92:	761a      	strb	r2, [r3, #24]
}
 8005f94:	bf00      	nop
 8005f96:	370c      	adds	r7, #12
 8005f98:	46bd      	mov	sp, r7
 8005f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f9e:	4770      	bx	lr
 8005fa0:	e000e100 	.word	0xe000e100
 8005fa4:	e000ed00 	.word	0xe000ed00

08005fa8 <NVIC_EncodePriority>:
{
 8005fa8:	b480      	push	{r7}
 8005faa:	b089      	sub	sp, #36	@ 0x24
 8005fac:	af00      	add	r7, sp, #0
 8005fae:	60f8      	str	r0, [r7, #12]
 8005fb0:	60b9      	str	r1, [r7, #8]
 8005fb2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	f003 0307 	and.w	r3, r3, #7
 8005fba:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005fbc:	69fb      	ldr	r3, [r7, #28]
 8005fbe:	f1c3 0307 	rsb	r3, r3, #7
 8005fc2:	2b04      	cmp	r3, #4
 8005fc4:	bf28      	it	cs
 8005fc6:	2304      	movcs	r3, #4
 8005fc8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005fca:	69fb      	ldr	r3, [r7, #28]
 8005fcc:	3304      	adds	r3, #4
 8005fce:	2b06      	cmp	r3, #6
 8005fd0:	d902      	bls.n	8005fd8 <NVIC_EncodePriority+0x30>
 8005fd2:	69fb      	ldr	r3, [r7, #28]
 8005fd4:	3b03      	subs	r3, #3
 8005fd6:	e000      	b.n	8005fda <NVIC_EncodePriority+0x32>
 8005fd8:	2300      	movs	r3, #0
 8005fda:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005fdc:	f04f 32ff 	mov.w	r2, #4294967295
 8005fe0:	69bb      	ldr	r3, [r7, #24]
 8005fe2:	fa02 f303 	lsl.w	r3, r2, r3
 8005fe6:	43da      	mvns	r2, r3
 8005fe8:	68bb      	ldr	r3, [r7, #8]
 8005fea:	401a      	ands	r2, r3
 8005fec:	697b      	ldr	r3, [r7, #20]
 8005fee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005ff0:	f04f 31ff 	mov.w	r1, #4294967295
 8005ff4:	697b      	ldr	r3, [r7, #20]
 8005ff6:	fa01 f303 	lsl.w	r3, r1, r3
 8005ffa:	43d9      	mvns	r1, r3
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006000:	4313      	orrs	r3, r2
}
 8006002:	4618      	mov	r0, r3
 8006004:	3724      	adds	r7, #36	@ 0x24
 8006006:	46bd      	mov	sp, r7
 8006008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800600c:	4770      	bx	lr
	...

08006010 <SysTick_Config>:
{
 8006010:	b580      	push	{r7, lr}
 8006012:	b082      	sub	sp, #8
 8006014:	af00      	add	r7, sp, #0
 8006016:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	3b01      	subs	r3, #1
 800601c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006020:	d301      	bcc.n	8006026 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8006022:	2301      	movs	r3, #1
 8006024:	e00f      	b.n	8006046 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8006026:	4a0a      	ldr	r2, [pc, #40]	@ (8006050 <SysTick_Config+0x40>)
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	3b01      	subs	r3, #1
 800602c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800602e:	210f      	movs	r1, #15
 8006030:	f04f 30ff 	mov.w	r0, #4294967295
 8006034:	f7ff ff8e 	bl	8005f54 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006038:	4b05      	ldr	r3, [pc, #20]	@ (8006050 <SysTick_Config+0x40>)
 800603a:	2200      	movs	r2, #0
 800603c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800603e:	4b04      	ldr	r3, [pc, #16]	@ (8006050 <SysTick_Config+0x40>)
 8006040:	2207      	movs	r2, #7
 8006042:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8006044:	2300      	movs	r3, #0
}
 8006046:	4618      	mov	r0, r3
 8006048:	3708      	adds	r7, #8
 800604a:	46bd      	mov	sp, r7
 800604c:	bd80      	pop	{r7, pc}
 800604e:	bf00      	nop
 8006050:	e000e010 	.word	0xe000e010

08006054 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006054:	b580      	push	{r7, lr}
 8006056:	b082      	sub	sp, #8
 8006058:	af00      	add	r7, sp, #0
 800605a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800605c:	6878      	ldr	r0, [r7, #4]
 800605e:	f7ff ff29 	bl	8005eb4 <__NVIC_SetPriorityGrouping>
}
 8006062:	bf00      	nop
 8006064:	3708      	adds	r7, #8
 8006066:	46bd      	mov	sp, r7
 8006068:	bd80      	pop	{r7, pc}

0800606a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800606a:	b580      	push	{r7, lr}
 800606c:	b086      	sub	sp, #24
 800606e:	af00      	add	r7, sp, #0
 8006070:	4603      	mov	r3, r0
 8006072:	60b9      	str	r1, [r7, #8]
 8006074:	607a      	str	r2, [r7, #4]
 8006076:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8006078:	2300      	movs	r3, #0
 800607a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800607c:	f7ff ff3e 	bl	8005efc <__NVIC_GetPriorityGrouping>
 8006080:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006082:	687a      	ldr	r2, [r7, #4]
 8006084:	68b9      	ldr	r1, [r7, #8]
 8006086:	6978      	ldr	r0, [r7, #20]
 8006088:	f7ff ff8e 	bl	8005fa8 <NVIC_EncodePriority>
 800608c:	4602      	mov	r2, r0
 800608e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006092:	4611      	mov	r1, r2
 8006094:	4618      	mov	r0, r3
 8006096:	f7ff ff5d 	bl	8005f54 <__NVIC_SetPriority>
}
 800609a:	bf00      	nop
 800609c:	3718      	adds	r7, #24
 800609e:	46bd      	mov	sp, r7
 80060a0:	bd80      	pop	{r7, pc}

080060a2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80060a2:	b580      	push	{r7, lr}
 80060a4:	b082      	sub	sp, #8
 80060a6:	af00      	add	r7, sp, #0
 80060a8:	4603      	mov	r3, r0
 80060aa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80060ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80060b0:	4618      	mov	r0, r3
 80060b2:	f7ff ff31 	bl	8005f18 <__NVIC_EnableIRQ>
}
 80060b6:	bf00      	nop
 80060b8:	3708      	adds	r7, #8
 80060ba:	46bd      	mov	sp, r7
 80060bc:	bd80      	pop	{r7, pc}

080060be <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80060be:	b580      	push	{r7, lr}
 80060c0:	b082      	sub	sp, #8
 80060c2:	af00      	add	r7, sp, #0
 80060c4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80060c6:	6878      	ldr	r0, [r7, #4]
 80060c8:	f7ff ffa2 	bl	8006010 <SysTick_Config>
 80060cc:	4603      	mov	r3, r0
}
 80060ce:	4618      	mov	r0, r3
 80060d0:	3708      	adds	r7, #8
 80060d2:	46bd      	mov	sp, r7
 80060d4:	bd80      	pop	{r7, pc}

080060d6 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 80060d6:	b580      	push	{r7, lr}
 80060d8:	b082      	sub	sp, #8
 80060da:	af00      	add	r7, sp, #0
 80060dc:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d101      	bne.n	80060e8 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 80060e4:	2301      	movs	r3, #1
 80060e6:	e00e      	b.n	8006106 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	795b      	ldrb	r3, [r3, #5]
 80060ec:	b2db      	uxtb	r3, r3
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d105      	bne.n	80060fe <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	2200      	movs	r2, #0
 80060f6:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 80060f8:	6878      	ldr	r0, [r7, #4]
 80060fa:	f7fb f981 	bl	8001400 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	2201      	movs	r2, #1
 8006102:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8006104:	2300      	movs	r3, #0
}
 8006106:	4618      	mov	r0, r3
 8006108:	3708      	adds	r7, #8
 800610a:	46bd      	mov	sp, r7
 800610c:	bd80      	pop	{r7, pc}
	...

08006110 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8006110:	b580      	push	{r7, lr}
 8006112:	b086      	sub	sp, #24
 8006114:	af00      	add	r7, sp, #0
 8006116:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8006118:	2300      	movs	r3, #0
 800611a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800611c:	f7ff fa44 	bl	80055a8 <HAL_GetTick>
 8006120:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	2b00      	cmp	r3, #0
 8006126:	d101      	bne.n	800612c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8006128:	2301      	movs	r3, #1
 800612a:	e099      	b.n	8006260 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	2202      	movs	r2, #2
 8006130:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	2200      	movs	r2, #0
 8006138:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	681a      	ldr	r2, [r3, #0]
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	f022 0201 	bic.w	r2, r2, #1
 800614a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800614c:	e00f      	b.n	800616e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800614e:	f7ff fa2b 	bl	80055a8 <HAL_GetTick>
 8006152:	4602      	mov	r2, r0
 8006154:	693b      	ldr	r3, [r7, #16]
 8006156:	1ad3      	subs	r3, r2, r3
 8006158:	2b05      	cmp	r3, #5
 800615a:	d908      	bls.n	800616e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	2220      	movs	r2, #32
 8006160:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	2203      	movs	r2, #3
 8006166:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 800616a:	2303      	movs	r3, #3
 800616c:	e078      	b.n	8006260 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	f003 0301 	and.w	r3, r3, #1
 8006178:	2b00      	cmp	r3, #0
 800617a:	d1e8      	bne.n	800614e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8006184:	697a      	ldr	r2, [r7, #20]
 8006186:	4b38      	ldr	r3, [pc, #224]	@ (8006268 <HAL_DMA_Init+0x158>)
 8006188:	4013      	ands	r3, r2
 800618a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	685a      	ldr	r2, [r3, #4]
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	689b      	ldr	r3, [r3, #8]
 8006194:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800619a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	691b      	ldr	r3, [r3, #16]
 80061a0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80061a6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	699b      	ldr	r3, [r3, #24]
 80061ac:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80061b2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	6a1b      	ldr	r3, [r3, #32]
 80061b8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80061ba:	697a      	ldr	r2, [r7, #20]
 80061bc:	4313      	orrs	r3, r2
 80061be:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061c4:	2b04      	cmp	r3, #4
 80061c6:	d107      	bne.n	80061d8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80061d0:	4313      	orrs	r3, r2
 80061d2:	697a      	ldr	r2, [r7, #20]
 80061d4:	4313      	orrs	r3, r2
 80061d6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	697a      	ldr	r2, [r7, #20]
 80061de:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	695b      	ldr	r3, [r3, #20]
 80061e6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80061e8:	697b      	ldr	r3, [r7, #20]
 80061ea:	f023 0307 	bic.w	r3, r3, #7
 80061ee:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061f4:	697a      	ldr	r2, [r7, #20]
 80061f6:	4313      	orrs	r3, r2
 80061f8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061fe:	2b04      	cmp	r3, #4
 8006200:	d117      	bne.n	8006232 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006206:	697a      	ldr	r2, [r7, #20]
 8006208:	4313      	orrs	r3, r2
 800620a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006210:	2b00      	cmp	r3, #0
 8006212:	d00e      	beq.n	8006232 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8006214:	6878      	ldr	r0, [r7, #4]
 8006216:	f000 fb01 	bl	800681c <DMA_CheckFifoParam>
 800621a:	4603      	mov	r3, r0
 800621c:	2b00      	cmp	r3, #0
 800621e:	d008      	beq.n	8006232 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	2240      	movs	r2, #64	@ 0x40
 8006224:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	2201      	movs	r2, #1
 800622a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 800622e:	2301      	movs	r3, #1
 8006230:	e016      	b.n	8006260 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	697a      	ldr	r2, [r7, #20]
 8006238:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800623a:	6878      	ldr	r0, [r7, #4]
 800623c:	f000 fab8 	bl	80067b0 <DMA_CalcBaseAndBitshift>
 8006240:	4603      	mov	r3, r0
 8006242:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006248:	223f      	movs	r2, #63	@ 0x3f
 800624a:	409a      	lsls	r2, r3
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	2200      	movs	r2, #0
 8006254:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	2201      	movs	r2, #1
 800625a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 800625e:	2300      	movs	r3, #0
}
 8006260:	4618      	mov	r0, r3
 8006262:	3718      	adds	r7, #24
 8006264:	46bd      	mov	sp, r7
 8006266:	bd80      	pop	{r7, pc}
 8006268:	f010803f 	.word	0xf010803f

0800626c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800626c:	b580      	push	{r7, lr}
 800626e:	b086      	sub	sp, #24
 8006270:	af00      	add	r7, sp, #0
 8006272:	60f8      	str	r0, [r7, #12]
 8006274:	60b9      	str	r1, [r7, #8]
 8006276:	607a      	str	r2, [r7, #4]
 8006278:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800627a:	2300      	movs	r3, #0
 800627c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006282:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800628a:	2b01      	cmp	r3, #1
 800628c:	d101      	bne.n	8006292 <HAL_DMA_Start_IT+0x26>
 800628e:	2302      	movs	r3, #2
 8006290:	e040      	b.n	8006314 <HAL_DMA_Start_IT+0xa8>
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	2201      	movs	r2, #1
 8006296:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80062a0:	b2db      	uxtb	r3, r3
 80062a2:	2b01      	cmp	r3, #1
 80062a4:	d12f      	bne.n	8006306 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	2202      	movs	r2, #2
 80062aa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	2200      	movs	r2, #0
 80062b2:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80062b4:	683b      	ldr	r3, [r7, #0]
 80062b6:	687a      	ldr	r2, [r7, #4]
 80062b8:	68b9      	ldr	r1, [r7, #8]
 80062ba:	68f8      	ldr	r0, [r7, #12]
 80062bc:	f000 fa4a 	bl	8006754 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80062c4:	223f      	movs	r2, #63	@ 0x3f
 80062c6:	409a      	lsls	r2, r3
 80062c8:	693b      	ldr	r3, [r7, #16]
 80062ca:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	681a      	ldr	r2, [r3, #0]
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	f042 0216 	orr.w	r2, r2, #22
 80062da:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d007      	beq.n	80062f4 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	681a      	ldr	r2, [r3, #0]
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	f042 0208 	orr.w	r2, r2, #8
 80062f2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	681a      	ldr	r2, [r3, #0]
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	f042 0201 	orr.w	r2, r2, #1
 8006302:	601a      	str	r2, [r3, #0]
 8006304:	e005      	b.n	8006312 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	2200      	movs	r2, #0
 800630a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800630e:	2302      	movs	r3, #2
 8006310:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8006312:	7dfb      	ldrb	r3, [r7, #23]
}
 8006314:	4618      	mov	r0, r3
 8006316:	3718      	adds	r7, #24
 8006318:	46bd      	mov	sp, r7
 800631a:	bd80      	pop	{r7, pc}

0800631c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800631c:	b580      	push	{r7, lr}
 800631e:	b084      	sub	sp, #16
 8006320:	af00      	add	r7, sp, #0
 8006322:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006328:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800632a:	f7ff f93d 	bl	80055a8 <HAL_GetTick>
 800632e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8006336:	b2db      	uxtb	r3, r3
 8006338:	2b02      	cmp	r3, #2
 800633a:	d008      	beq.n	800634e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	2280      	movs	r2, #128	@ 0x80
 8006340:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	2200      	movs	r2, #0
 8006346:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 800634a:	2301      	movs	r3, #1
 800634c:	e052      	b.n	80063f4 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	681a      	ldr	r2, [r3, #0]
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	f022 0216 	bic.w	r2, r2, #22
 800635c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	695a      	ldr	r2, [r3, #20]
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800636c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006372:	2b00      	cmp	r3, #0
 8006374:	d103      	bne.n	800637e <HAL_DMA_Abort+0x62>
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800637a:	2b00      	cmp	r3, #0
 800637c:	d007      	beq.n	800638e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	681a      	ldr	r2, [r3, #0]
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	f022 0208 	bic.w	r2, r2, #8
 800638c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	681a      	ldr	r2, [r3, #0]
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	f022 0201 	bic.w	r2, r2, #1
 800639c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800639e:	e013      	b.n	80063c8 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80063a0:	f7ff f902 	bl	80055a8 <HAL_GetTick>
 80063a4:	4602      	mov	r2, r0
 80063a6:	68bb      	ldr	r3, [r7, #8]
 80063a8:	1ad3      	subs	r3, r2, r3
 80063aa:	2b05      	cmp	r3, #5
 80063ac:	d90c      	bls.n	80063c8 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	2220      	movs	r2, #32
 80063b2:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	2203      	movs	r2, #3
 80063b8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	2200      	movs	r2, #0
 80063c0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 80063c4:	2303      	movs	r3, #3
 80063c6:	e015      	b.n	80063f4 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	f003 0301 	and.w	r3, r3, #1
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d1e4      	bne.n	80063a0 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80063da:	223f      	movs	r2, #63	@ 0x3f
 80063dc:	409a      	lsls	r2, r3
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	2201      	movs	r2, #1
 80063e6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	2200      	movs	r2, #0
 80063ee:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 80063f2:	2300      	movs	r3, #0
}
 80063f4:	4618      	mov	r0, r3
 80063f6:	3710      	adds	r7, #16
 80063f8:	46bd      	mov	sp, r7
 80063fa:	bd80      	pop	{r7, pc}

080063fc <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80063fc:	b480      	push	{r7}
 80063fe:	b083      	sub	sp, #12
 8006400:	af00      	add	r7, sp, #0
 8006402:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800640a:	b2db      	uxtb	r3, r3
 800640c:	2b02      	cmp	r3, #2
 800640e:	d004      	beq.n	800641a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	2280      	movs	r2, #128	@ 0x80
 8006414:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8006416:	2301      	movs	r3, #1
 8006418:	e00c      	b.n	8006434 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	2205      	movs	r2, #5
 800641e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	681a      	ldr	r2, [r3, #0]
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	f022 0201 	bic.w	r2, r2, #1
 8006430:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8006432:	2300      	movs	r3, #0
}
 8006434:	4618      	mov	r0, r3
 8006436:	370c      	adds	r7, #12
 8006438:	46bd      	mov	sp, r7
 800643a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800643e:	4770      	bx	lr

08006440 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8006440:	b580      	push	{r7, lr}
 8006442:	b086      	sub	sp, #24
 8006444:	af00      	add	r7, sp, #0
 8006446:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8006448:	2300      	movs	r3, #0
 800644a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800644c:	4b8e      	ldr	r3, [pc, #568]	@ (8006688 <HAL_DMA_IRQHandler+0x248>)
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	4a8e      	ldr	r2, [pc, #568]	@ (800668c <HAL_DMA_IRQHandler+0x24c>)
 8006452:	fba2 2303 	umull	r2, r3, r2, r3
 8006456:	0a9b      	lsrs	r3, r3, #10
 8006458:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800645e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8006460:	693b      	ldr	r3, [r7, #16]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800646a:	2208      	movs	r2, #8
 800646c:	409a      	lsls	r2, r3
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	4013      	ands	r3, r2
 8006472:	2b00      	cmp	r3, #0
 8006474:	d01a      	beq.n	80064ac <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	f003 0304 	and.w	r3, r3, #4
 8006480:	2b00      	cmp	r3, #0
 8006482:	d013      	beq.n	80064ac <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	681a      	ldr	r2, [r3, #0]
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	f022 0204 	bic.w	r2, r2, #4
 8006492:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006498:	2208      	movs	r2, #8
 800649a:	409a      	lsls	r2, r3
 800649c:	693b      	ldr	r3, [r7, #16]
 800649e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80064a4:	f043 0201 	orr.w	r2, r3, #1
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80064b0:	2201      	movs	r2, #1
 80064b2:	409a      	lsls	r2, r3
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	4013      	ands	r3, r2
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d012      	beq.n	80064e2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	695b      	ldr	r3, [r3, #20]
 80064c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d00b      	beq.n	80064e2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80064ce:	2201      	movs	r2, #1
 80064d0:	409a      	lsls	r2, r3
 80064d2:	693b      	ldr	r3, [r7, #16]
 80064d4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80064da:	f043 0202 	orr.w	r2, r3, #2
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80064e6:	2204      	movs	r2, #4
 80064e8:	409a      	lsls	r2, r3
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	4013      	ands	r3, r2
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d012      	beq.n	8006518 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	f003 0302 	and.w	r3, r3, #2
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d00b      	beq.n	8006518 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006504:	2204      	movs	r2, #4
 8006506:	409a      	lsls	r2, r3
 8006508:	693b      	ldr	r3, [r7, #16]
 800650a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006510:	f043 0204 	orr.w	r2, r3, #4
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800651c:	2210      	movs	r2, #16
 800651e:	409a      	lsls	r2, r3
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	4013      	ands	r3, r2
 8006524:	2b00      	cmp	r3, #0
 8006526:	d043      	beq.n	80065b0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	f003 0308 	and.w	r3, r3, #8
 8006532:	2b00      	cmp	r3, #0
 8006534:	d03c      	beq.n	80065b0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800653a:	2210      	movs	r2, #16
 800653c:	409a      	lsls	r2, r3
 800653e:	693b      	ldr	r3, [r7, #16]
 8006540:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800654c:	2b00      	cmp	r3, #0
 800654e:	d018      	beq.n	8006582 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800655a:	2b00      	cmp	r3, #0
 800655c:	d108      	bne.n	8006570 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006562:	2b00      	cmp	r3, #0
 8006564:	d024      	beq.n	80065b0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800656a:	6878      	ldr	r0, [r7, #4]
 800656c:	4798      	blx	r3
 800656e:	e01f      	b.n	80065b0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006574:	2b00      	cmp	r3, #0
 8006576:	d01b      	beq.n	80065b0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800657c:	6878      	ldr	r0, [r7, #4]
 800657e:	4798      	blx	r3
 8006580:	e016      	b.n	80065b0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800658c:	2b00      	cmp	r3, #0
 800658e:	d107      	bne.n	80065a0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	681a      	ldr	r2, [r3, #0]
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	f022 0208 	bic.w	r2, r2, #8
 800659e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d003      	beq.n	80065b0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80065ac:	6878      	ldr	r0, [r7, #4]
 80065ae:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80065b4:	2220      	movs	r2, #32
 80065b6:	409a      	lsls	r2, r3
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	4013      	ands	r3, r2
 80065bc:	2b00      	cmp	r3, #0
 80065be:	f000 808f 	beq.w	80066e0 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	f003 0310 	and.w	r3, r3, #16
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	f000 8087 	beq.w	80066e0 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80065d6:	2220      	movs	r2, #32
 80065d8:	409a      	lsls	r2, r3
 80065da:	693b      	ldr	r3, [r7, #16]
 80065dc:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80065e4:	b2db      	uxtb	r3, r3
 80065e6:	2b05      	cmp	r3, #5
 80065e8:	d136      	bne.n	8006658 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	681a      	ldr	r2, [r3, #0]
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	f022 0216 	bic.w	r2, r2, #22
 80065f8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	695a      	ldr	r2, [r3, #20]
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006608:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800660e:	2b00      	cmp	r3, #0
 8006610:	d103      	bne.n	800661a <HAL_DMA_IRQHandler+0x1da>
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006616:	2b00      	cmp	r3, #0
 8006618:	d007      	beq.n	800662a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	681a      	ldr	r2, [r3, #0]
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	f022 0208 	bic.w	r2, r2, #8
 8006628:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800662e:	223f      	movs	r2, #63	@ 0x3f
 8006630:	409a      	lsls	r2, r3
 8006632:	693b      	ldr	r3, [r7, #16]
 8006634:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	2201      	movs	r2, #1
 800663a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	2200      	movs	r2, #0
 8006642:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800664a:	2b00      	cmp	r3, #0
 800664c:	d07e      	beq.n	800674c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006652:	6878      	ldr	r0, [r7, #4]
 8006654:	4798      	blx	r3
        }
        return;
 8006656:	e079      	b.n	800674c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006662:	2b00      	cmp	r3, #0
 8006664:	d01d      	beq.n	80066a2 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8006670:	2b00      	cmp	r3, #0
 8006672:	d10d      	bne.n	8006690 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006678:	2b00      	cmp	r3, #0
 800667a:	d031      	beq.n	80066e0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006680:	6878      	ldr	r0, [r7, #4]
 8006682:	4798      	blx	r3
 8006684:	e02c      	b.n	80066e0 <HAL_DMA_IRQHandler+0x2a0>
 8006686:	bf00      	nop
 8006688:	2000d114 	.word	0x2000d114
 800668c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006694:	2b00      	cmp	r3, #0
 8006696:	d023      	beq.n	80066e0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800669c:	6878      	ldr	r0, [r7, #4]
 800669e:	4798      	blx	r3
 80066a0:	e01e      	b.n	80066e0 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	d10f      	bne.n	80066d0 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	681a      	ldr	r2, [r3, #0]
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	f022 0210 	bic.w	r2, r2, #16
 80066be:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	2201      	movs	r2, #1
 80066c4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	2200      	movs	r2, #0
 80066cc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d003      	beq.n	80066e0 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80066dc:	6878      	ldr	r0, [r7, #4]
 80066de:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	d032      	beq.n	800674e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80066ec:	f003 0301 	and.w	r3, r3, #1
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	d022      	beq.n	800673a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	2205      	movs	r2, #5
 80066f8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	681a      	ldr	r2, [r3, #0]
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	f022 0201 	bic.w	r2, r2, #1
 800670a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800670c:	68bb      	ldr	r3, [r7, #8]
 800670e:	3301      	adds	r3, #1
 8006710:	60bb      	str	r3, [r7, #8]
 8006712:	697a      	ldr	r2, [r7, #20]
 8006714:	429a      	cmp	r2, r3
 8006716:	d307      	bcc.n	8006728 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	f003 0301 	and.w	r3, r3, #1
 8006722:	2b00      	cmp	r3, #0
 8006724:	d1f2      	bne.n	800670c <HAL_DMA_IRQHandler+0x2cc>
 8006726:	e000      	b.n	800672a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8006728:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	2201      	movs	r2, #1
 800672e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	2200      	movs	r2, #0
 8006736:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800673e:	2b00      	cmp	r3, #0
 8006740:	d005      	beq.n	800674e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006746:	6878      	ldr	r0, [r7, #4]
 8006748:	4798      	blx	r3
 800674a:	e000      	b.n	800674e <HAL_DMA_IRQHandler+0x30e>
        return;
 800674c:	bf00      	nop
    }
  }
}
 800674e:	3718      	adds	r7, #24
 8006750:	46bd      	mov	sp, r7
 8006752:	bd80      	pop	{r7, pc}

08006754 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006754:	b480      	push	{r7}
 8006756:	b085      	sub	sp, #20
 8006758:	af00      	add	r7, sp, #0
 800675a:	60f8      	str	r0, [r7, #12]
 800675c:	60b9      	str	r1, [r7, #8]
 800675e:	607a      	str	r2, [r7, #4]
 8006760:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	681a      	ldr	r2, [r3, #0]
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8006770:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	683a      	ldr	r2, [r7, #0]
 8006778:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	689b      	ldr	r3, [r3, #8]
 800677e:	2b40      	cmp	r3, #64	@ 0x40
 8006780:	d108      	bne.n	8006794 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	687a      	ldr	r2, [r7, #4]
 8006788:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	68ba      	ldr	r2, [r7, #8]
 8006790:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8006792:	e007      	b.n	80067a4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	68ba      	ldr	r2, [r7, #8]
 800679a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	687a      	ldr	r2, [r7, #4]
 80067a2:	60da      	str	r2, [r3, #12]
}
 80067a4:	bf00      	nop
 80067a6:	3714      	adds	r7, #20
 80067a8:	46bd      	mov	sp, r7
 80067aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ae:	4770      	bx	lr

080067b0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80067b0:	b480      	push	{r7}
 80067b2:	b085      	sub	sp, #20
 80067b4:	af00      	add	r7, sp, #0
 80067b6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	b2db      	uxtb	r3, r3
 80067be:	3b10      	subs	r3, #16
 80067c0:	4a14      	ldr	r2, [pc, #80]	@ (8006814 <DMA_CalcBaseAndBitshift+0x64>)
 80067c2:	fba2 2303 	umull	r2, r3, r2, r3
 80067c6:	091b      	lsrs	r3, r3, #4
 80067c8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80067ca:	4a13      	ldr	r2, [pc, #76]	@ (8006818 <DMA_CalcBaseAndBitshift+0x68>)
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	4413      	add	r3, r2
 80067d0:	781b      	ldrb	r3, [r3, #0]
 80067d2:	461a      	mov	r2, r3
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	2b03      	cmp	r3, #3
 80067dc:	d909      	bls.n	80067f2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80067e6:	f023 0303 	bic.w	r3, r3, #3
 80067ea:	1d1a      	adds	r2, r3, #4
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	659a      	str	r2, [r3, #88]	@ 0x58
 80067f0:	e007      	b.n	8006802 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80067fa:	f023 0303 	bic.w	r3, r3, #3
 80067fe:	687a      	ldr	r2, [r7, #4]
 8006800:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8006806:	4618      	mov	r0, r3
 8006808:	3714      	adds	r7, #20
 800680a:	46bd      	mov	sp, r7
 800680c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006810:	4770      	bx	lr
 8006812:	bf00      	nop
 8006814:	aaaaaaab 	.word	0xaaaaaaab
 8006818:	08010b10 	.word	0x08010b10

0800681c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800681c:	b480      	push	{r7}
 800681e:	b085      	sub	sp, #20
 8006820:	af00      	add	r7, sp, #0
 8006822:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006824:	2300      	movs	r3, #0
 8006826:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800682c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	699b      	ldr	r3, [r3, #24]
 8006832:	2b00      	cmp	r3, #0
 8006834:	d11f      	bne.n	8006876 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8006836:	68bb      	ldr	r3, [r7, #8]
 8006838:	2b03      	cmp	r3, #3
 800683a:	d856      	bhi.n	80068ea <DMA_CheckFifoParam+0xce>
 800683c:	a201      	add	r2, pc, #4	@ (adr r2, 8006844 <DMA_CheckFifoParam+0x28>)
 800683e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006842:	bf00      	nop
 8006844:	08006855 	.word	0x08006855
 8006848:	08006867 	.word	0x08006867
 800684c:	08006855 	.word	0x08006855
 8006850:	080068eb 	.word	0x080068eb
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006858:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800685c:	2b00      	cmp	r3, #0
 800685e:	d046      	beq.n	80068ee <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8006860:	2301      	movs	r3, #1
 8006862:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006864:	e043      	b.n	80068ee <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800686a:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800686e:	d140      	bne.n	80068f2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8006870:	2301      	movs	r3, #1
 8006872:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006874:	e03d      	b.n	80068f2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	699b      	ldr	r3, [r3, #24]
 800687a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800687e:	d121      	bne.n	80068c4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8006880:	68bb      	ldr	r3, [r7, #8]
 8006882:	2b03      	cmp	r3, #3
 8006884:	d837      	bhi.n	80068f6 <DMA_CheckFifoParam+0xda>
 8006886:	a201      	add	r2, pc, #4	@ (adr r2, 800688c <DMA_CheckFifoParam+0x70>)
 8006888:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800688c:	0800689d 	.word	0x0800689d
 8006890:	080068a3 	.word	0x080068a3
 8006894:	0800689d 	.word	0x0800689d
 8006898:	080068b5 	.word	0x080068b5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800689c:	2301      	movs	r3, #1
 800689e:	73fb      	strb	r3, [r7, #15]
      break;
 80068a0:	e030      	b.n	8006904 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80068a6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d025      	beq.n	80068fa <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80068ae:	2301      	movs	r3, #1
 80068b0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80068b2:	e022      	b.n	80068fa <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80068b8:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80068bc:	d11f      	bne.n	80068fe <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80068be:	2301      	movs	r3, #1
 80068c0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80068c2:	e01c      	b.n	80068fe <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80068c4:	68bb      	ldr	r3, [r7, #8]
 80068c6:	2b02      	cmp	r3, #2
 80068c8:	d903      	bls.n	80068d2 <DMA_CheckFifoParam+0xb6>
 80068ca:	68bb      	ldr	r3, [r7, #8]
 80068cc:	2b03      	cmp	r3, #3
 80068ce:	d003      	beq.n	80068d8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80068d0:	e018      	b.n	8006904 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80068d2:	2301      	movs	r3, #1
 80068d4:	73fb      	strb	r3, [r7, #15]
      break;
 80068d6:	e015      	b.n	8006904 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80068dc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d00e      	beq.n	8006902 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80068e4:	2301      	movs	r3, #1
 80068e6:	73fb      	strb	r3, [r7, #15]
      break;
 80068e8:	e00b      	b.n	8006902 <DMA_CheckFifoParam+0xe6>
      break;
 80068ea:	bf00      	nop
 80068ec:	e00a      	b.n	8006904 <DMA_CheckFifoParam+0xe8>
      break;
 80068ee:	bf00      	nop
 80068f0:	e008      	b.n	8006904 <DMA_CheckFifoParam+0xe8>
      break;
 80068f2:	bf00      	nop
 80068f4:	e006      	b.n	8006904 <DMA_CheckFifoParam+0xe8>
      break;
 80068f6:	bf00      	nop
 80068f8:	e004      	b.n	8006904 <DMA_CheckFifoParam+0xe8>
      break;
 80068fa:	bf00      	nop
 80068fc:	e002      	b.n	8006904 <DMA_CheckFifoParam+0xe8>
      break;   
 80068fe:	bf00      	nop
 8006900:	e000      	b.n	8006904 <DMA_CheckFifoParam+0xe8>
      break;
 8006902:	bf00      	nop
    }
  } 
  
  return status; 
 8006904:	7bfb      	ldrb	r3, [r7, #15]
}
 8006906:	4618      	mov	r0, r3
 8006908:	3714      	adds	r7, #20
 800690a:	46bd      	mov	sp, r7
 800690c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006910:	4770      	bx	lr
 8006912:	bf00      	nop

08006914 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006914:	b480      	push	{r7}
 8006916:	b089      	sub	sp, #36	@ 0x24
 8006918:	af00      	add	r7, sp, #0
 800691a:	6078      	str	r0, [r7, #4]
 800691c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800691e:	2300      	movs	r3, #0
 8006920:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8006922:	2300      	movs	r3, #0
 8006924:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8006926:	2300      	movs	r3, #0
 8006928:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800692a:	2300      	movs	r3, #0
 800692c:	61fb      	str	r3, [r7, #28]
 800692e:	e159      	b.n	8006be4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8006930:	2201      	movs	r2, #1
 8006932:	69fb      	ldr	r3, [r7, #28]
 8006934:	fa02 f303 	lsl.w	r3, r2, r3
 8006938:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800693a:	683b      	ldr	r3, [r7, #0]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	697a      	ldr	r2, [r7, #20]
 8006940:	4013      	ands	r3, r2
 8006942:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8006944:	693a      	ldr	r2, [r7, #16]
 8006946:	697b      	ldr	r3, [r7, #20]
 8006948:	429a      	cmp	r2, r3
 800694a:	f040 8148 	bne.w	8006bde <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800694e:	683b      	ldr	r3, [r7, #0]
 8006950:	685b      	ldr	r3, [r3, #4]
 8006952:	f003 0303 	and.w	r3, r3, #3
 8006956:	2b01      	cmp	r3, #1
 8006958:	d005      	beq.n	8006966 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800695a:	683b      	ldr	r3, [r7, #0]
 800695c:	685b      	ldr	r3, [r3, #4]
 800695e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8006962:	2b02      	cmp	r3, #2
 8006964:	d130      	bne.n	80069c8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	689b      	ldr	r3, [r3, #8]
 800696a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800696c:	69fb      	ldr	r3, [r7, #28]
 800696e:	005b      	lsls	r3, r3, #1
 8006970:	2203      	movs	r2, #3
 8006972:	fa02 f303 	lsl.w	r3, r2, r3
 8006976:	43db      	mvns	r3, r3
 8006978:	69ba      	ldr	r2, [r7, #24]
 800697a:	4013      	ands	r3, r2
 800697c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800697e:	683b      	ldr	r3, [r7, #0]
 8006980:	68da      	ldr	r2, [r3, #12]
 8006982:	69fb      	ldr	r3, [r7, #28]
 8006984:	005b      	lsls	r3, r3, #1
 8006986:	fa02 f303 	lsl.w	r3, r2, r3
 800698a:	69ba      	ldr	r2, [r7, #24]
 800698c:	4313      	orrs	r3, r2
 800698e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	69ba      	ldr	r2, [r7, #24]
 8006994:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	685b      	ldr	r3, [r3, #4]
 800699a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800699c:	2201      	movs	r2, #1
 800699e:	69fb      	ldr	r3, [r7, #28]
 80069a0:	fa02 f303 	lsl.w	r3, r2, r3
 80069a4:	43db      	mvns	r3, r3
 80069a6:	69ba      	ldr	r2, [r7, #24]
 80069a8:	4013      	ands	r3, r2
 80069aa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80069ac:	683b      	ldr	r3, [r7, #0]
 80069ae:	685b      	ldr	r3, [r3, #4]
 80069b0:	091b      	lsrs	r3, r3, #4
 80069b2:	f003 0201 	and.w	r2, r3, #1
 80069b6:	69fb      	ldr	r3, [r7, #28]
 80069b8:	fa02 f303 	lsl.w	r3, r2, r3
 80069bc:	69ba      	ldr	r2, [r7, #24]
 80069be:	4313      	orrs	r3, r2
 80069c0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	69ba      	ldr	r2, [r7, #24]
 80069c6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80069c8:	683b      	ldr	r3, [r7, #0]
 80069ca:	685b      	ldr	r3, [r3, #4]
 80069cc:	f003 0303 	and.w	r3, r3, #3
 80069d0:	2b03      	cmp	r3, #3
 80069d2:	d017      	beq.n	8006a04 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	68db      	ldr	r3, [r3, #12]
 80069d8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80069da:	69fb      	ldr	r3, [r7, #28]
 80069dc:	005b      	lsls	r3, r3, #1
 80069de:	2203      	movs	r2, #3
 80069e0:	fa02 f303 	lsl.w	r3, r2, r3
 80069e4:	43db      	mvns	r3, r3
 80069e6:	69ba      	ldr	r2, [r7, #24]
 80069e8:	4013      	ands	r3, r2
 80069ea:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80069ec:	683b      	ldr	r3, [r7, #0]
 80069ee:	689a      	ldr	r2, [r3, #8]
 80069f0:	69fb      	ldr	r3, [r7, #28]
 80069f2:	005b      	lsls	r3, r3, #1
 80069f4:	fa02 f303 	lsl.w	r3, r2, r3
 80069f8:	69ba      	ldr	r2, [r7, #24]
 80069fa:	4313      	orrs	r3, r2
 80069fc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	69ba      	ldr	r2, [r7, #24]
 8006a02:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006a04:	683b      	ldr	r3, [r7, #0]
 8006a06:	685b      	ldr	r3, [r3, #4]
 8006a08:	f003 0303 	and.w	r3, r3, #3
 8006a0c:	2b02      	cmp	r3, #2
 8006a0e:	d123      	bne.n	8006a58 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006a10:	69fb      	ldr	r3, [r7, #28]
 8006a12:	08da      	lsrs	r2, r3, #3
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	3208      	adds	r2, #8
 8006a18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006a1c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8006a1e:	69fb      	ldr	r3, [r7, #28]
 8006a20:	f003 0307 	and.w	r3, r3, #7
 8006a24:	009b      	lsls	r3, r3, #2
 8006a26:	220f      	movs	r2, #15
 8006a28:	fa02 f303 	lsl.w	r3, r2, r3
 8006a2c:	43db      	mvns	r3, r3
 8006a2e:	69ba      	ldr	r2, [r7, #24]
 8006a30:	4013      	ands	r3, r2
 8006a32:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8006a34:	683b      	ldr	r3, [r7, #0]
 8006a36:	691a      	ldr	r2, [r3, #16]
 8006a38:	69fb      	ldr	r3, [r7, #28]
 8006a3a:	f003 0307 	and.w	r3, r3, #7
 8006a3e:	009b      	lsls	r3, r3, #2
 8006a40:	fa02 f303 	lsl.w	r3, r2, r3
 8006a44:	69ba      	ldr	r2, [r7, #24]
 8006a46:	4313      	orrs	r3, r2
 8006a48:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8006a4a:	69fb      	ldr	r3, [r7, #28]
 8006a4c:	08da      	lsrs	r2, r3, #3
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	3208      	adds	r2, #8
 8006a52:	69b9      	ldr	r1, [r7, #24]
 8006a54:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8006a5e:	69fb      	ldr	r3, [r7, #28]
 8006a60:	005b      	lsls	r3, r3, #1
 8006a62:	2203      	movs	r2, #3
 8006a64:	fa02 f303 	lsl.w	r3, r2, r3
 8006a68:	43db      	mvns	r3, r3
 8006a6a:	69ba      	ldr	r2, [r7, #24]
 8006a6c:	4013      	ands	r3, r2
 8006a6e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006a70:	683b      	ldr	r3, [r7, #0]
 8006a72:	685b      	ldr	r3, [r3, #4]
 8006a74:	f003 0203 	and.w	r2, r3, #3
 8006a78:	69fb      	ldr	r3, [r7, #28]
 8006a7a:	005b      	lsls	r3, r3, #1
 8006a7c:	fa02 f303 	lsl.w	r3, r2, r3
 8006a80:	69ba      	ldr	r2, [r7, #24]
 8006a82:	4313      	orrs	r3, r2
 8006a84:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	69ba      	ldr	r2, [r7, #24]
 8006a8a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8006a8c:	683b      	ldr	r3, [r7, #0]
 8006a8e:	685b      	ldr	r3, [r3, #4]
 8006a90:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	f000 80a2 	beq.w	8006bde <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006a9a:	2300      	movs	r3, #0
 8006a9c:	60fb      	str	r3, [r7, #12]
 8006a9e:	4b57      	ldr	r3, [pc, #348]	@ (8006bfc <HAL_GPIO_Init+0x2e8>)
 8006aa0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006aa2:	4a56      	ldr	r2, [pc, #344]	@ (8006bfc <HAL_GPIO_Init+0x2e8>)
 8006aa4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8006aa8:	6453      	str	r3, [r2, #68]	@ 0x44
 8006aaa:	4b54      	ldr	r3, [pc, #336]	@ (8006bfc <HAL_GPIO_Init+0x2e8>)
 8006aac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006aae:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006ab2:	60fb      	str	r3, [r7, #12]
 8006ab4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8006ab6:	4a52      	ldr	r2, [pc, #328]	@ (8006c00 <HAL_GPIO_Init+0x2ec>)
 8006ab8:	69fb      	ldr	r3, [r7, #28]
 8006aba:	089b      	lsrs	r3, r3, #2
 8006abc:	3302      	adds	r3, #2
 8006abe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006ac2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8006ac4:	69fb      	ldr	r3, [r7, #28]
 8006ac6:	f003 0303 	and.w	r3, r3, #3
 8006aca:	009b      	lsls	r3, r3, #2
 8006acc:	220f      	movs	r2, #15
 8006ace:	fa02 f303 	lsl.w	r3, r2, r3
 8006ad2:	43db      	mvns	r3, r3
 8006ad4:	69ba      	ldr	r2, [r7, #24]
 8006ad6:	4013      	ands	r3, r2
 8006ad8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	4a49      	ldr	r2, [pc, #292]	@ (8006c04 <HAL_GPIO_Init+0x2f0>)
 8006ade:	4293      	cmp	r3, r2
 8006ae0:	d019      	beq.n	8006b16 <HAL_GPIO_Init+0x202>
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	4a48      	ldr	r2, [pc, #288]	@ (8006c08 <HAL_GPIO_Init+0x2f4>)
 8006ae6:	4293      	cmp	r3, r2
 8006ae8:	d013      	beq.n	8006b12 <HAL_GPIO_Init+0x1fe>
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	4a47      	ldr	r2, [pc, #284]	@ (8006c0c <HAL_GPIO_Init+0x2f8>)
 8006aee:	4293      	cmp	r3, r2
 8006af0:	d00d      	beq.n	8006b0e <HAL_GPIO_Init+0x1fa>
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	4a46      	ldr	r2, [pc, #280]	@ (8006c10 <HAL_GPIO_Init+0x2fc>)
 8006af6:	4293      	cmp	r3, r2
 8006af8:	d007      	beq.n	8006b0a <HAL_GPIO_Init+0x1f6>
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	4a45      	ldr	r2, [pc, #276]	@ (8006c14 <HAL_GPIO_Init+0x300>)
 8006afe:	4293      	cmp	r3, r2
 8006b00:	d101      	bne.n	8006b06 <HAL_GPIO_Init+0x1f2>
 8006b02:	2304      	movs	r3, #4
 8006b04:	e008      	b.n	8006b18 <HAL_GPIO_Init+0x204>
 8006b06:	2307      	movs	r3, #7
 8006b08:	e006      	b.n	8006b18 <HAL_GPIO_Init+0x204>
 8006b0a:	2303      	movs	r3, #3
 8006b0c:	e004      	b.n	8006b18 <HAL_GPIO_Init+0x204>
 8006b0e:	2302      	movs	r3, #2
 8006b10:	e002      	b.n	8006b18 <HAL_GPIO_Init+0x204>
 8006b12:	2301      	movs	r3, #1
 8006b14:	e000      	b.n	8006b18 <HAL_GPIO_Init+0x204>
 8006b16:	2300      	movs	r3, #0
 8006b18:	69fa      	ldr	r2, [r7, #28]
 8006b1a:	f002 0203 	and.w	r2, r2, #3
 8006b1e:	0092      	lsls	r2, r2, #2
 8006b20:	4093      	lsls	r3, r2
 8006b22:	69ba      	ldr	r2, [r7, #24]
 8006b24:	4313      	orrs	r3, r2
 8006b26:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006b28:	4935      	ldr	r1, [pc, #212]	@ (8006c00 <HAL_GPIO_Init+0x2ec>)
 8006b2a:	69fb      	ldr	r3, [r7, #28]
 8006b2c:	089b      	lsrs	r3, r3, #2
 8006b2e:	3302      	adds	r3, #2
 8006b30:	69ba      	ldr	r2, [r7, #24]
 8006b32:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8006b36:	4b38      	ldr	r3, [pc, #224]	@ (8006c18 <HAL_GPIO_Init+0x304>)
 8006b38:	689b      	ldr	r3, [r3, #8]
 8006b3a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006b3c:	693b      	ldr	r3, [r7, #16]
 8006b3e:	43db      	mvns	r3, r3
 8006b40:	69ba      	ldr	r2, [r7, #24]
 8006b42:	4013      	ands	r3, r2
 8006b44:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8006b46:	683b      	ldr	r3, [r7, #0]
 8006b48:	685b      	ldr	r3, [r3, #4]
 8006b4a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d003      	beq.n	8006b5a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8006b52:	69ba      	ldr	r2, [r7, #24]
 8006b54:	693b      	ldr	r3, [r7, #16]
 8006b56:	4313      	orrs	r3, r2
 8006b58:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8006b5a:	4a2f      	ldr	r2, [pc, #188]	@ (8006c18 <HAL_GPIO_Init+0x304>)
 8006b5c:	69bb      	ldr	r3, [r7, #24]
 8006b5e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8006b60:	4b2d      	ldr	r3, [pc, #180]	@ (8006c18 <HAL_GPIO_Init+0x304>)
 8006b62:	68db      	ldr	r3, [r3, #12]
 8006b64:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006b66:	693b      	ldr	r3, [r7, #16]
 8006b68:	43db      	mvns	r3, r3
 8006b6a:	69ba      	ldr	r2, [r7, #24]
 8006b6c:	4013      	ands	r3, r2
 8006b6e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8006b70:	683b      	ldr	r3, [r7, #0]
 8006b72:	685b      	ldr	r3, [r3, #4]
 8006b74:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	d003      	beq.n	8006b84 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8006b7c:	69ba      	ldr	r2, [r7, #24]
 8006b7e:	693b      	ldr	r3, [r7, #16]
 8006b80:	4313      	orrs	r3, r2
 8006b82:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8006b84:	4a24      	ldr	r2, [pc, #144]	@ (8006c18 <HAL_GPIO_Init+0x304>)
 8006b86:	69bb      	ldr	r3, [r7, #24]
 8006b88:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8006b8a:	4b23      	ldr	r3, [pc, #140]	@ (8006c18 <HAL_GPIO_Init+0x304>)
 8006b8c:	685b      	ldr	r3, [r3, #4]
 8006b8e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006b90:	693b      	ldr	r3, [r7, #16]
 8006b92:	43db      	mvns	r3, r3
 8006b94:	69ba      	ldr	r2, [r7, #24]
 8006b96:	4013      	ands	r3, r2
 8006b98:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8006b9a:	683b      	ldr	r3, [r7, #0]
 8006b9c:	685b      	ldr	r3, [r3, #4]
 8006b9e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d003      	beq.n	8006bae <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8006ba6:	69ba      	ldr	r2, [r7, #24]
 8006ba8:	693b      	ldr	r3, [r7, #16]
 8006baa:	4313      	orrs	r3, r2
 8006bac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8006bae:	4a1a      	ldr	r2, [pc, #104]	@ (8006c18 <HAL_GPIO_Init+0x304>)
 8006bb0:	69bb      	ldr	r3, [r7, #24]
 8006bb2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8006bb4:	4b18      	ldr	r3, [pc, #96]	@ (8006c18 <HAL_GPIO_Init+0x304>)
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006bba:	693b      	ldr	r3, [r7, #16]
 8006bbc:	43db      	mvns	r3, r3
 8006bbe:	69ba      	ldr	r2, [r7, #24]
 8006bc0:	4013      	ands	r3, r2
 8006bc2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8006bc4:	683b      	ldr	r3, [r7, #0]
 8006bc6:	685b      	ldr	r3, [r3, #4]
 8006bc8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	d003      	beq.n	8006bd8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8006bd0:	69ba      	ldr	r2, [r7, #24]
 8006bd2:	693b      	ldr	r3, [r7, #16]
 8006bd4:	4313      	orrs	r3, r2
 8006bd6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8006bd8:	4a0f      	ldr	r2, [pc, #60]	@ (8006c18 <HAL_GPIO_Init+0x304>)
 8006bda:	69bb      	ldr	r3, [r7, #24]
 8006bdc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006bde:	69fb      	ldr	r3, [r7, #28]
 8006be0:	3301      	adds	r3, #1
 8006be2:	61fb      	str	r3, [r7, #28]
 8006be4:	69fb      	ldr	r3, [r7, #28]
 8006be6:	2b0f      	cmp	r3, #15
 8006be8:	f67f aea2 	bls.w	8006930 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8006bec:	bf00      	nop
 8006bee:	bf00      	nop
 8006bf0:	3724      	adds	r7, #36	@ 0x24
 8006bf2:	46bd      	mov	sp, r7
 8006bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bf8:	4770      	bx	lr
 8006bfa:	bf00      	nop
 8006bfc:	40023800 	.word	0x40023800
 8006c00:	40013800 	.word	0x40013800
 8006c04:	40020000 	.word	0x40020000
 8006c08:	40020400 	.word	0x40020400
 8006c0c:	40020800 	.word	0x40020800
 8006c10:	40020c00 	.word	0x40020c00
 8006c14:	40021000 	.word	0x40021000
 8006c18:	40013c00 	.word	0x40013c00

08006c1c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8006c1c:	b480      	push	{r7}
 8006c1e:	b085      	sub	sp, #20
 8006c20:	af00      	add	r7, sp, #0
 8006c22:	6078      	str	r0, [r7, #4]
 8006c24:	460b      	mov	r3, r1
 8006c26:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	691a      	ldr	r2, [r3, #16]
 8006c2c:	887b      	ldrh	r3, [r7, #2]
 8006c2e:	4013      	ands	r3, r2
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	d002      	beq.n	8006c3a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8006c34:	2301      	movs	r3, #1
 8006c36:	73fb      	strb	r3, [r7, #15]
 8006c38:	e001      	b.n	8006c3e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8006c3a:	2300      	movs	r3, #0
 8006c3c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8006c3e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c40:	4618      	mov	r0, r3
 8006c42:	3714      	adds	r7, #20
 8006c44:	46bd      	mov	sp, r7
 8006c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c4a:	4770      	bx	lr

08006c4c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006c4c:	b480      	push	{r7}
 8006c4e:	b083      	sub	sp, #12
 8006c50:	af00      	add	r7, sp, #0
 8006c52:	6078      	str	r0, [r7, #4]
 8006c54:	460b      	mov	r3, r1
 8006c56:	807b      	strh	r3, [r7, #2]
 8006c58:	4613      	mov	r3, r2
 8006c5a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8006c5c:	787b      	ldrb	r3, [r7, #1]
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	d003      	beq.n	8006c6a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006c62:	887a      	ldrh	r2, [r7, #2]
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8006c68:	e003      	b.n	8006c72 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8006c6a:	887b      	ldrh	r3, [r7, #2]
 8006c6c:	041a      	lsls	r2, r3, #16
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	619a      	str	r2, [r3, #24]
}
 8006c72:	bf00      	nop
 8006c74:	370c      	adds	r7, #12
 8006c76:	46bd      	mov	sp, r7
 8006c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c7c:	4770      	bx	lr
	...

08006c80 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8006c80:	b580      	push	{r7, lr}
 8006c82:	b082      	sub	sp, #8
 8006c84:	af00      	add	r7, sp, #0
 8006c86:	4603      	mov	r3, r0
 8006c88:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8006c8a:	4b08      	ldr	r3, [pc, #32]	@ (8006cac <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006c8c:	695a      	ldr	r2, [r3, #20]
 8006c8e:	88fb      	ldrh	r3, [r7, #6]
 8006c90:	4013      	ands	r3, r2
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d006      	beq.n	8006ca4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8006c96:	4a05      	ldr	r2, [pc, #20]	@ (8006cac <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006c98:	88fb      	ldrh	r3, [r7, #6]
 8006c9a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8006c9c:	88fb      	ldrh	r3, [r7, #6]
 8006c9e:	4618      	mov	r0, r3
 8006ca0:	f000 f806 	bl	8006cb0 <HAL_GPIO_EXTI_Callback>
  }
}
 8006ca4:	bf00      	nop
 8006ca6:	3708      	adds	r7, #8
 8006ca8:	46bd      	mov	sp, r7
 8006caa:	bd80      	pop	{r7, pc}
 8006cac:	40013c00 	.word	0x40013c00

08006cb0 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8006cb0:	b480      	push	{r7}
 8006cb2:	b083      	sub	sp, #12
 8006cb4:	af00      	add	r7, sp, #0
 8006cb6:	4603      	mov	r3, r0
 8006cb8:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8006cba:	bf00      	nop
 8006cbc:	370c      	adds	r7, #12
 8006cbe:	46bd      	mov	sp, r7
 8006cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cc4:	4770      	bx	lr
	...

08006cc8 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8006cc8:	b580      	push	{r7, lr}
 8006cca:	b088      	sub	sp, #32
 8006ccc:	af00      	add	r7, sp, #0
 8006cce:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d101      	bne.n	8006cda <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8006cd6:	2301      	movs	r3, #1
 8006cd8:	e128      	b.n	8006f2c <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006ce0:	b2db      	uxtb	r3, r3
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d109      	bne.n	8006cfa <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	2200      	movs	r2, #0
 8006cea:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	4a90      	ldr	r2, [pc, #576]	@ (8006f34 <HAL_I2S_Init+0x26c>)
 8006cf2:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8006cf4:	6878      	ldr	r0, [r7, #4]
 8006cf6:	f7fa fcd7 	bl	80016a8 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	2202      	movs	r2, #2
 8006cfe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	69db      	ldr	r3, [r3, #28]
 8006d08:	687a      	ldr	r2, [r7, #4]
 8006d0a:	6812      	ldr	r2, [r2, #0]
 8006d0c:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8006d10:	f023 030f 	bic.w	r3, r3, #15
 8006d14:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	2202      	movs	r2, #2
 8006d1c:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	695b      	ldr	r3, [r3, #20]
 8006d22:	2b02      	cmp	r3, #2
 8006d24:	d060      	beq.n	8006de8 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	68db      	ldr	r3, [r3, #12]
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	d102      	bne.n	8006d34 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8006d2e:	2310      	movs	r3, #16
 8006d30:	617b      	str	r3, [r7, #20]
 8006d32:	e001      	b.n	8006d38 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8006d34:	2320      	movs	r3, #32
 8006d36:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	689b      	ldr	r3, [r3, #8]
 8006d3c:	2b20      	cmp	r3, #32
 8006d3e:	d802      	bhi.n	8006d46 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8006d40:	697b      	ldr	r3, [r7, #20]
 8006d42:	005b      	lsls	r3, r3, #1
 8006d44:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8006d46:	2001      	movs	r0, #1
 8006d48:	f001 fb02 	bl	8008350 <HAL_RCCEx_GetPeriphCLKFreq>
 8006d4c:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	691b      	ldr	r3, [r3, #16]
 8006d52:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006d56:	d125      	bne.n	8006da4 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	68db      	ldr	r3, [r3, #12]
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	d010      	beq.n	8006d82 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8006d60:	697b      	ldr	r3, [r7, #20]
 8006d62:	009b      	lsls	r3, r3, #2
 8006d64:	68fa      	ldr	r2, [r7, #12]
 8006d66:	fbb2 f2f3 	udiv	r2, r2, r3
 8006d6a:	4613      	mov	r3, r2
 8006d6c:	009b      	lsls	r3, r3, #2
 8006d6e:	4413      	add	r3, r2
 8006d70:	005b      	lsls	r3, r3, #1
 8006d72:	461a      	mov	r2, r3
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	695b      	ldr	r3, [r3, #20]
 8006d78:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d7c:	3305      	adds	r3, #5
 8006d7e:	613b      	str	r3, [r7, #16]
 8006d80:	e01f      	b.n	8006dc2 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8006d82:	697b      	ldr	r3, [r7, #20]
 8006d84:	00db      	lsls	r3, r3, #3
 8006d86:	68fa      	ldr	r2, [r7, #12]
 8006d88:	fbb2 f2f3 	udiv	r2, r2, r3
 8006d8c:	4613      	mov	r3, r2
 8006d8e:	009b      	lsls	r3, r3, #2
 8006d90:	4413      	add	r3, r2
 8006d92:	005b      	lsls	r3, r3, #1
 8006d94:	461a      	mov	r2, r3
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	695b      	ldr	r3, [r3, #20]
 8006d9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d9e:	3305      	adds	r3, #5
 8006da0:	613b      	str	r3, [r7, #16]
 8006da2:	e00e      	b.n	8006dc2 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8006da4:	68fa      	ldr	r2, [r7, #12]
 8006da6:	697b      	ldr	r3, [r7, #20]
 8006da8:	fbb2 f2f3 	udiv	r2, r2, r3
 8006dac:	4613      	mov	r3, r2
 8006dae:	009b      	lsls	r3, r3, #2
 8006db0:	4413      	add	r3, r2
 8006db2:	005b      	lsls	r3, r3, #1
 8006db4:	461a      	mov	r2, r3
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	695b      	ldr	r3, [r3, #20]
 8006dba:	fbb2 f3f3 	udiv	r3, r2, r3
 8006dbe:	3305      	adds	r3, #5
 8006dc0:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8006dc2:	693b      	ldr	r3, [r7, #16]
 8006dc4:	4a5c      	ldr	r2, [pc, #368]	@ (8006f38 <HAL_I2S_Init+0x270>)
 8006dc6:	fba2 2303 	umull	r2, r3, r2, r3
 8006dca:	08db      	lsrs	r3, r3, #3
 8006dcc:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8006dce:	693b      	ldr	r3, [r7, #16]
 8006dd0:	f003 0301 	and.w	r3, r3, #1
 8006dd4:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8006dd6:	693a      	ldr	r2, [r7, #16]
 8006dd8:	69bb      	ldr	r3, [r7, #24]
 8006dda:	1ad3      	subs	r3, r2, r3
 8006ddc:	085b      	lsrs	r3, r3, #1
 8006dde:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8006de0:	69bb      	ldr	r3, [r7, #24]
 8006de2:	021b      	lsls	r3, r3, #8
 8006de4:	61bb      	str	r3, [r7, #24]
 8006de6:	e003      	b.n	8006df0 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8006de8:	2302      	movs	r3, #2
 8006dea:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8006dec:	2300      	movs	r3, #0
 8006dee:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8006df0:	69fb      	ldr	r3, [r7, #28]
 8006df2:	2b01      	cmp	r3, #1
 8006df4:	d902      	bls.n	8006dfc <HAL_I2S_Init+0x134>
 8006df6:	69fb      	ldr	r3, [r7, #28]
 8006df8:	2bff      	cmp	r3, #255	@ 0xff
 8006dfa:	d907      	bls.n	8006e0c <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006e00:	f043 0210 	orr.w	r2, r3, #16
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	645a      	str	r2, [r3, #68]	@ 0x44
    return  HAL_ERROR;
 8006e08:	2301      	movs	r3, #1
 8006e0a:	e08f      	b.n	8006f2c <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	691a      	ldr	r2, [r3, #16]
 8006e10:	69bb      	ldr	r3, [r7, #24]
 8006e12:	ea42 0103 	orr.w	r1, r2, r3
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	69fa      	ldr	r2, [r7, #28]
 8006e1c:	430a      	orrs	r2, r1
 8006e1e:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	69db      	ldr	r3, [r3, #28]
 8006e26:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8006e2a:	f023 030f 	bic.w	r3, r3, #15
 8006e2e:	687a      	ldr	r2, [r7, #4]
 8006e30:	6851      	ldr	r1, [r2, #4]
 8006e32:	687a      	ldr	r2, [r7, #4]
 8006e34:	6892      	ldr	r2, [r2, #8]
 8006e36:	4311      	orrs	r1, r2
 8006e38:	687a      	ldr	r2, [r7, #4]
 8006e3a:	68d2      	ldr	r2, [r2, #12]
 8006e3c:	4311      	orrs	r1, r2
 8006e3e:	687a      	ldr	r2, [r7, #4]
 8006e40:	6992      	ldr	r2, [r2, #24]
 8006e42:	430a      	orrs	r2, r1
 8006e44:	431a      	orrs	r2, r3
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006e4e:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	6a1b      	ldr	r3, [r3, #32]
 8006e54:	2b01      	cmp	r3, #1
 8006e56:	d161      	bne.n	8006f1c <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	4a38      	ldr	r2, [pc, #224]	@ (8006f3c <HAL_I2S_Init+0x274>)
 8006e5c:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	4a37      	ldr	r2, [pc, #220]	@ (8006f40 <HAL_I2S_Init+0x278>)
 8006e64:	4293      	cmp	r3, r2
 8006e66:	d101      	bne.n	8006e6c <HAL_I2S_Init+0x1a4>
 8006e68:	4b36      	ldr	r3, [pc, #216]	@ (8006f44 <HAL_I2S_Init+0x27c>)
 8006e6a:	e001      	b.n	8006e70 <HAL_I2S_Init+0x1a8>
 8006e6c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006e70:	69db      	ldr	r3, [r3, #28]
 8006e72:	687a      	ldr	r2, [r7, #4]
 8006e74:	6812      	ldr	r2, [r2, #0]
 8006e76:	4932      	ldr	r1, [pc, #200]	@ (8006f40 <HAL_I2S_Init+0x278>)
 8006e78:	428a      	cmp	r2, r1
 8006e7a:	d101      	bne.n	8006e80 <HAL_I2S_Init+0x1b8>
 8006e7c:	4a31      	ldr	r2, [pc, #196]	@ (8006f44 <HAL_I2S_Init+0x27c>)
 8006e7e:	e001      	b.n	8006e84 <HAL_I2S_Init+0x1bc>
 8006e80:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 8006e84:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8006e88:	f023 030f 	bic.w	r3, r3, #15
 8006e8c:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	4a2b      	ldr	r2, [pc, #172]	@ (8006f40 <HAL_I2S_Init+0x278>)
 8006e94:	4293      	cmp	r3, r2
 8006e96:	d101      	bne.n	8006e9c <HAL_I2S_Init+0x1d4>
 8006e98:	4b2a      	ldr	r3, [pc, #168]	@ (8006f44 <HAL_I2S_Init+0x27c>)
 8006e9a:	e001      	b.n	8006ea0 <HAL_I2S_Init+0x1d8>
 8006e9c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006ea0:	2202      	movs	r2, #2
 8006ea2:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	4a25      	ldr	r2, [pc, #148]	@ (8006f40 <HAL_I2S_Init+0x278>)
 8006eaa:	4293      	cmp	r3, r2
 8006eac:	d101      	bne.n	8006eb2 <HAL_I2S_Init+0x1ea>
 8006eae:	4b25      	ldr	r3, [pc, #148]	@ (8006f44 <HAL_I2S_Init+0x27c>)
 8006eb0:	e001      	b.n	8006eb6 <HAL_I2S_Init+0x1ee>
 8006eb2:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006eb6:	69db      	ldr	r3, [r3, #28]
 8006eb8:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	685b      	ldr	r3, [r3, #4]
 8006ebe:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006ec2:	d003      	beq.n	8006ecc <HAL_I2S_Init+0x204>
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	685b      	ldr	r3, [r3, #4]
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	d103      	bne.n	8006ed4 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8006ecc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8006ed0:	613b      	str	r3, [r7, #16]
 8006ed2:	e001      	b.n	8006ed8 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8006ed4:	2300      	movs	r3, #0
 8006ed6:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8006ed8:	693b      	ldr	r3, [r7, #16]
 8006eda:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	689b      	ldr	r3, [r3, #8]
 8006ee0:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8006ee2:	4313      	orrs	r3, r2
 8006ee4:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	68db      	ldr	r3, [r3, #12]
 8006eea:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8006eec:	4313      	orrs	r3, r2
 8006eee:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	699b      	ldr	r3, [r3, #24]
 8006ef4:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8006ef6:	4313      	orrs	r3, r2
 8006ef8:	b29a      	uxth	r2, r3
 8006efa:	897b      	ldrh	r3, [r7, #10]
 8006efc:	4313      	orrs	r3, r2
 8006efe:	b29b      	uxth	r3, r3
 8006f00:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8006f04:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	4a0d      	ldr	r2, [pc, #52]	@ (8006f40 <HAL_I2S_Init+0x278>)
 8006f0c:	4293      	cmp	r3, r2
 8006f0e:	d101      	bne.n	8006f14 <HAL_I2S_Init+0x24c>
 8006f10:	4b0c      	ldr	r3, [pc, #48]	@ (8006f44 <HAL_I2S_Init+0x27c>)
 8006f12:	e001      	b.n	8006f18 <HAL_I2S_Init+0x250>
 8006f14:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006f18:	897a      	ldrh	r2, [r7, #10]
 8006f1a:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	2200      	movs	r2, #0
 8006f20:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	2201      	movs	r2, #1
 8006f26:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  return HAL_OK;
 8006f2a:	2300      	movs	r3, #0
}
 8006f2c:	4618      	mov	r0, r3
 8006f2e:	3720      	adds	r7, #32
 8006f30:	46bd      	mov	sp, r7
 8006f32:	bd80      	pop	{r7, pc}
 8006f34:	08007205 	.word	0x08007205
 8006f38:	cccccccd 	.word	0xcccccccd
 8006f3c:	0800738d 	.word	0x0800738d
 8006f40:	40003800 	.word	0x40003800
 8006f44:	40003400 	.word	0x40003400

08006f48 <HAL_I2S_Transmit>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Transmit(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006f48:	b580      	push	{r7, lr}
 8006f4a:	b086      	sub	sp, #24
 8006f4c:	af00      	add	r7, sp, #0
 8006f4e:	60f8      	str	r0, [r7, #12]
 8006f50:	60b9      	str	r1, [r7, #8]
 8006f52:	603b      	str	r3, [r7, #0]
 8006f54:	4613      	mov	r3, r2
 8006f56:	80fb      	strh	r3, [r7, #6]
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 8006f58:	68bb      	ldr	r3, [r7, #8]
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d002      	beq.n	8006f64 <HAL_I2S_Transmit+0x1c>
 8006f5e:	88fb      	ldrh	r3, [r7, #6]
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	d101      	bne.n	8006f68 <HAL_I2S_Transmit+0x20>
  {
    return  HAL_ERROR;
 8006f64:	2301      	movs	r3, #1
 8006f66:	e0d8      	b.n	800711a <HAL_I2S_Transmit+0x1d2>
  }

  if (hi2s->State != HAL_I2S_STATE_READY)
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006f6e:	b2db      	uxtb	r3, r3
 8006f70:	2b01      	cmp	r3, #1
 8006f72:	d001      	beq.n	8006f78 <HAL_I2S_Transmit+0x30>
  {
    return HAL_BUSY;
 8006f74:	2302      	movs	r3, #2
 8006f76:	e0d0      	b.n	800711a <HAL_I2S_Transmit+0x1d2>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006f7e:	b2db      	uxtb	r3, r3
 8006f80:	2b01      	cmp	r3, #1
 8006f82:	d101      	bne.n	8006f88 <HAL_I2S_Transmit+0x40>
 8006f84:	2302      	movs	r3, #2
 8006f86:	e0c8      	b.n	800711a <HAL_I2S_Transmit+0x1d2>
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	2201      	movs	r2, #1
 8006f8c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_TX;
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	2203      	movs	r2, #3
 8006f94:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	2200      	movs	r2, #0
 8006f9c:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2s->pTxBuffPtr = pData;
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	68ba      	ldr	r2, [r7, #8]
 8006fa2:	625a      	str	r2, [r3, #36]	@ 0x24

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	69db      	ldr	r3, [r3, #28]
 8006faa:	f003 0307 	and.w	r3, r3, #7
 8006fae:	617b      	str	r3, [r7, #20]

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 8006fb0:	697b      	ldr	r3, [r7, #20]
 8006fb2:	2b03      	cmp	r3, #3
 8006fb4:	d002      	beq.n	8006fbc <HAL_I2S_Transmit+0x74>
 8006fb6:	697b      	ldr	r3, [r7, #20]
 8006fb8:	2b05      	cmp	r3, #5
 8006fba:	d10a      	bne.n	8006fd2 <HAL_I2S_Transmit+0x8a>
  {
    hi2s->TxXferSize = (Size << 1U);
 8006fbc:	88fb      	ldrh	r3, [r7, #6]
 8006fbe:	005b      	lsls	r3, r3, #1
 8006fc0:	b29a      	uxth	r2, r3
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2s->TxXferCount = (Size << 1U);
 8006fc6:	88fb      	ldrh	r3, [r7, #6]
 8006fc8:	005b      	lsls	r3, r3, #1
 8006fca:	b29a      	uxth	r2, r3
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8006fd0:	e005      	b.n	8006fde <HAL_I2S_Transmit+0x96>
  }
  else
  {
    hi2s->TxXferSize = Size;
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	88fa      	ldrh	r2, [r7, #6]
 8006fd6:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2s->TxXferCount = Size;
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	88fa      	ldrh	r2, [r7, #6]
 8006fdc:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }

  tmpreg_cfgr = hi2s->Instance->I2SCFGR;
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	69db      	ldr	r3, [r3, #28]
 8006fe4:	617b      	str	r3, [r7, #20]

  /* Check if the I2S is already enabled */
  if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SE) != SPI_I2SCFGR_I2SE)
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	69db      	ldr	r3, [r3, #28]
 8006fec:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006ff0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006ff4:	d007      	beq.n	8007006 <HAL_I2S_Transmit+0xbe>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	69da      	ldr	r2, [r3, #28]
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8007004:	61da      	str	r2, [r3, #28]
  }

  /* Wait until TXE flag is set */
  if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_TXE, SET, Timeout) != HAL_OK)
 8007006:	683b      	ldr	r3, [r7, #0]
 8007008:	2201      	movs	r2, #1
 800700a:	2102      	movs	r1, #2
 800700c:	68f8      	ldr	r0, [r7, #12]
 800700e:	f000 f983 	bl	8007318 <I2S_WaitFlagStateUntilTimeout>
 8007012:	4603      	mov	r3, r0
 8007014:	2b00      	cmp	r3, #0
 8007016:	d04e      	beq.n	80070b6 <HAL_I2S_Transmit+0x16e>
  {
    /* Set the error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800701c:	f043 0201 	orr.w	r2, r3, #1
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2s->State = HAL_I2S_STATE_READY;
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	2201      	movs	r2, #1
 8007028:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    __HAL_UNLOCK(hi2s);
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	2200      	movs	r2, #0
 8007030:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    return HAL_ERROR;
 8007034:	2301      	movs	r3, #1
 8007036:	e070      	b.n	800711a <HAL_I2S_Transmit+0x1d2>
  }

  while (hi2s->TxXferCount > 0U)
  {
    hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800703c:	881a      	ldrh	r2, [r3, #0]
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	60da      	str	r2, [r3, #12]
    hi2s->pTxBuffPtr++;
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007048:	1c9a      	adds	r2, r3, #2
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2s->TxXferCount--;
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007052:	b29b      	uxth	r3, r3
 8007054:	3b01      	subs	r3, #1
 8007056:	b29a      	uxth	r2, r3
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	855a      	strh	r2, [r3, #42]	@ 0x2a

    /* Wait until TXE flag is set */
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_TXE, SET, Timeout) != HAL_OK)
 800705c:	683b      	ldr	r3, [r7, #0]
 800705e:	2201      	movs	r2, #1
 8007060:	2102      	movs	r1, #2
 8007062:	68f8      	ldr	r0, [r7, #12]
 8007064:	f000 f958 	bl	8007318 <I2S_WaitFlagStateUntilTimeout>
 8007068:	4603      	mov	r3, r0
 800706a:	2b00      	cmp	r3, #0
 800706c:	d00f      	beq.n	800708e <HAL_I2S_Transmit+0x146>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007072:	f043 0201 	orr.w	r2, r3, #1
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	645a      	str	r2, [r3, #68]	@ 0x44
      hi2s->State = HAL_I2S_STATE_READY;
 800707a:	68fb      	ldr	r3, [r7, #12]
 800707c:	2201      	movs	r2, #1
 800707e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      __HAL_UNLOCK(hi2s);
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	2200      	movs	r2, #0
 8007086:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 800708a:	2301      	movs	r3, #1
 800708c:	e045      	b.n	800711a <HAL_I2S_Transmit+0x1d2>
    }

    /* Check if an underrun occurs */
    if (__HAL_I2S_GET_FLAG(hi2s, I2S_FLAG_UDR) == SET)
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	689b      	ldr	r3, [r3, #8]
 8007094:	f003 0308 	and.w	r3, r3, #8
 8007098:	2b08      	cmp	r3, #8
 800709a:	d10c      	bne.n	80070b6 <HAL_I2S_Transmit+0x16e>
    {
      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 800709c:	2300      	movs	r3, #0
 800709e:	613b      	str	r3, [r7, #16]
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	689b      	ldr	r3, [r3, #8]
 80070a6:	613b      	str	r3, [r7, #16]
 80070a8:	693b      	ldr	r3, [r7, #16]

      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80070ae:	f043 0204 	orr.w	r2, r3, #4
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	645a      	str	r2, [r3, #68]	@ 0x44
  while (hi2s->TxXferCount > 0U)
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80070ba:	b29b      	uxth	r3, r3
 80070bc:	2b00      	cmp	r3, #0
 80070be:	d1bb      	bne.n	8007038 <HAL_I2S_Transmit+0xf0>
    }
  }

  /* Check if Slave mode is selected */
  if (((tmpreg_cfgr & SPI_I2SCFGR_I2SCFG) == I2S_MODE_SLAVE_TX)
 80070c0:	697b      	ldr	r3, [r7, #20]
 80070c2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d005      	beq.n	80070d6 <HAL_I2S_Transmit+0x18e>
      || ((tmpreg_cfgr & SPI_I2SCFGR_I2SCFG) == I2S_MODE_SLAVE_RX))
 80070ca:	697b      	ldr	r3, [r7, #20]
 80070cc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80070d0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80070d4:	d118      	bne.n	8007108 <HAL_I2S_Transmit+0x1c0>
  {
    /* Wait until Busy flag is reset */
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_BSY, RESET, Timeout) != HAL_OK)
 80070d6:	683b      	ldr	r3, [r7, #0]
 80070d8:	2200      	movs	r2, #0
 80070da:	2180      	movs	r1, #128	@ 0x80
 80070dc:	68f8      	ldr	r0, [r7, #12]
 80070de:	f000 f91b 	bl	8007318 <I2S_WaitFlagStateUntilTimeout>
 80070e2:	4603      	mov	r3, r0
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	d00f      	beq.n	8007108 <HAL_I2S_Transmit+0x1c0>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80070ec:	f043 0201 	orr.w	r2, r3, #1
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	645a      	str	r2, [r3, #68]	@ 0x44
      hi2s->State = HAL_I2S_STATE_READY;
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	2201      	movs	r2, #1
 80070f8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      __HAL_UNLOCK(hi2s);
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	2200      	movs	r2, #0
 8007100:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8007104:	2301      	movs	r3, #1
 8007106:	e008      	b.n	800711a <HAL_I2S_Transmit+0x1d2>
    }
  }

  hi2s->State = HAL_I2S_STATE_READY;
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	2201      	movs	r2, #1
 800710c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  __HAL_UNLOCK(hi2s);
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	2200      	movs	r2, #0
 8007114:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  return HAL_OK;
 8007118:	2300      	movs	r3, #0
}
 800711a:	4618      	mov	r0, r3
 800711c:	3718      	adds	r7, #24
 800711e:	46bd      	mov	sp, r7
 8007120:	bd80      	pop	{r7, pc}

08007122 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8007122:	b480      	push	{r7}
 8007124:	b083      	sub	sp, #12
 8007126:	af00      	add	r7, sp, #0
 8007128:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 800712a:	bf00      	nop
 800712c:	370c      	adds	r7, #12
 800712e:	46bd      	mov	sp, r7
 8007130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007134:	4770      	bx	lr

08007136 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8007136:	b480      	push	{r7}
 8007138:	b083      	sub	sp, #12
 800713a:	af00      	add	r7, sp, #0
 800713c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 800713e:	bf00      	nop
 8007140:	370c      	adds	r7, #12
 8007142:	46bd      	mov	sp, r7
 8007144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007148:	4770      	bx	lr

0800714a <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 800714a:	b580      	push	{r7, lr}
 800714c:	b082      	sub	sp, #8
 800714e:	af00      	add	r7, sp, #0
 8007150:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007156:	881a      	ldrh	r2, [r3, #0]
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007162:	1c9a      	adds	r2, r3, #2
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	625a      	str	r2, [r3, #36]	@ 0x24
  hi2s->TxXferCount--;
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800716c:	b29b      	uxth	r3, r3
 800716e:	3b01      	subs	r3, #1
 8007170:	b29a      	uxth	r2, r3
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800717a:	b29b      	uxth	r3, r3
 800717c:	2b00      	cmp	r3, #0
 800717e:	d10e      	bne.n	800719e <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	685a      	ldr	r2, [r3, #4]
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 800718e:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	2201      	movs	r2, #1
 8007194:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8007198:	6878      	ldr	r0, [r7, #4]
 800719a:	f7ff ffc2 	bl	8007122 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 800719e:	bf00      	nop
 80071a0:	3708      	adds	r7, #8
 80071a2:	46bd      	mov	sp, r7
 80071a4:	bd80      	pop	{r7, pc}

080071a6 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 80071a6:	b580      	push	{r7, lr}
 80071a8:	b082      	sub	sp, #8
 80071aa:	af00      	add	r7, sp, #0
 80071ac:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	68da      	ldr	r2, [r3, #12]
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80071b8:	b292      	uxth	r2, r2
 80071ba:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80071c0:	1c9a      	adds	r2, r3, #2
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2s->RxXferCount--;
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80071ca:	b29b      	uxth	r3, r3
 80071cc:	3b01      	subs	r3, #1
 80071ce:	b29a      	uxth	r2, r3
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80071d8:	b29b      	uxth	r3, r3
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d10e      	bne.n	80071fc <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	685a      	ldr	r2, [r3, #4]
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80071ec:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	2201      	movs	r2, #1
 80071f2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 80071f6:	6878      	ldr	r0, [r7, #4]
 80071f8:	f7fb f802 	bl	8002200 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80071fc:	bf00      	nop
 80071fe:	3708      	adds	r7, #8
 8007200:	46bd      	mov	sp, r7
 8007202:	bd80      	pop	{r7, pc}

08007204 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8007204:	b580      	push	{r7, lr}
 8007206:	b086      	sub	sp, #24
 8007208:	af00      	add	r7, sp, #0
 800720a:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	689b      	ldr	r3, [r3, #8]
 8007212:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800721a:	b2db      	uxtb	r3, r3
 800721c:	2b04      	cmp	r3, #4
 800721e:	d13a      	bne.n	8007296 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8007220:	697b      	ldr	r3, [r7, #20]
 8007222:	f003 0301 	and.w	r3, r3, #1
 8007226:	2b01      	cmp	r3, #1
 8007228:	d109      	bne.n	800723e <I2S_IRQHandler+0x3a>
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	685b      	ldr	r3, [r3, #4]
 8007230:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007234:	2b40      	cmp	r3, #64	@ 0x40
 8007236:	d102      	bne.n	800723e <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8007238:	6878      	ldr	r0, [r7, #4]
 800723a:	f7ff ffb4 	bl	80071a6 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 800723e:	697b      	ldr	r3, [r7, #20]
 8007240:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007244:	2b40      	cmp	r3, #64	@ 0x40
 8007246:	d126      	bne.n	8007296 <I2S_IRQHandler+0x92>
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	685b      	ldr	r3, [r3, #4]
 800724e:	f003 0320 	and.w	r3, r3, #32
 8007252:	2b20      	cmp	r3, #32
 8007254:	d11f      	bne.n	8007296 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	685a      	ldr	r2, [r3, #4]
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8007264:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8007266:	2300      	movs	r3, #0
 8007268:	613b      	str	r3, [r7, #16]
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	68db      	ldr	r3, [r3, #12]
 8007270:	613b      	str	r3, [r7, #16]
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	689b      	ldr	r3, [r3, #8]
 8007278:	613b      	str	r3, [r7, #16]
 800727a:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	2201      	movs	r2, #1
 8007280:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007288:	f043 0202 	orr.w	r2, r3, #2
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8007290:	6878      	ldr	r0, [r7, #4]
 8007292:	f7ff ff50 	bl	8007136 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800729c:	b2db      	uxtb	r3, r3
 800729e:	2b03      	cmp	r3, #3
 80072a0:	d136      	bne.n	8007310 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 80072a2:	697b      	ldr	r3, [r7, #20]
 80072a4:	f003 0302 	and.w	r3, r3, #2
 80072a8:	2b02      	cmp	r3, #2
 80072aa:	d109      	bne.n	80072c0 <I2S_IRQHandler+0xbc>
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	685b      	ldr	r3, [r3, #4]
 80072b2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80072b6:	2b80      	cmp	r3, #128	@ 0x80
 80072b8:	d102      	bne.n	80072c0 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 80072ba:	6878      	ldr	r0, [r7, #4]
 80072bc:	f7ff ff45 	bl	800714a <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80072c0:	697b      	ldr	r3, [r7, #20]
 80072c2:	f003 0308 	and.w	r3, r3, #8
 80072c6:	2b08      	cmp	r3, #8
 80072c8:	d122      	bne.n	8007310 <I2S_IRQHandler+0x10c>
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	685b      	ldr	r3, [r3, #4]
 80072d0:	f003 0320 	and.w	r3, r3, #32
 80072d4:	2b20      	cmp	r3, #32
 80072d6:	d11b      	bne.n	8007310 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	685a      	ldr	r2, [r3, #4]
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80072e6:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80072e8:	2300      	movs	r3, #0
 80072ea:	60fb      	str	r3, [r7, #12]
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	689b      	ldr	r3, [r3, #8]
 80072f2:	60fb      	str	r3, [r7, #12]
 80072f4:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	2201      	movs	r2, #1
 80072fa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007302:	f043 0204 	orr.w	r2, r3, #4
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800730a:	6878      	ldr	r0, [r7, #4]
 800730c:	f7ff ff13 	bl	8007136 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8007310:	bf00      	nop
 8007312:	3718      	adds	r7, #24
 8007314:	46bd      	mov	sp, r7
 8007316:	bd80      	pop	{r7, pc}

08007318 <I2S_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef I2S_WaitFlagStateUntilTimeout(I2S_HandleTypeDef *hi2s, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout)
{
 8007318:	b580      	push	{r7, lr}
 800731a:	b086      	sub	sp, #24
 800731c:	af00      	add	r7, sp, #0
 800731e:	60f8      	str	r0, [r7, #12]
 8007320:	60b9      	str	r1, [r7, #8]
 8007322:	603b      	str	r3, [r7, #0]
 8007324:	4613      	mov	r3, r2
 8007326:	71fb      	strb	r3, [r7, #7]
  uint32_t tickstart;

  /* Get tick */
  tickstart = HAL_GetTick();
 8007328:	f7fe f93e 	bl	80055a8 <HAL_GetTick>
 800732c:	6178      	str	r0, [r7, #20]

  /* Wait until flag is set to status*/
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 800732e:	e018      	b.n	8007362 <I2S_WaitFlagStateUntilTimeout+0x4a>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007330:	683b      	ldr	r3, [r7, #0]
 8007332:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007336:	d014      	beq.n	8007362 <I2S_WaitFlagStateUntilTimeout+0x4a>
    {
      if (((HAL_GetTick() - tickstart) >= Timeout) || (Timeout == 0U))
 8007338:	f7fe f936 	bl	80055a8 <HAL_GetTick>
 800733c:	4602      	mov	r2, r0
 800733e:	697b      	ldr	r3, [r7, #20]
 8007340:	1ad3      	subs	r3, r2, r3
 8007342:	683a      	ldr	r2, [r7, #0]
 8007344:	429a      	cmp	r2, r3
 8007346:	d902      	bls.n	800734e <I2S_WaitFlagStateUntilTimeout+0x36>
 8007348:	683b      	ldr	r3, [r7, #0]
 800734a:	2b00      	cmp	r3, #0
 800734c:	d109      	bne.n	8007362 <I2S_WaitFlagStateUntilTimeout+0x4a>
      {
        /* Set the I2S State ready */
        hi2s->State = HAL_I2S_STATE_READY;
 800734e:	68fb      	ldr	r3, [r7, #12]
 8007350:	2201      	movs	r2, #1
 8007352:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2s);
 8007356:	68fb      	ldr	r3, [r7, #12]
 8007358:	2200      	movs	r2, #0
 800735a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_TIMEOUT;
 800735e:	2303      	movs	r3, #3
 8007360:	e00f      	b.n	8007382 <I2S_WaitFlagStateUntilTimeout+0x6a>
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	689a      	ldr	r2, [r3, #8]
 8007368:	68bb      	ldr	r3, [r7, #8]
 800736a:	4013      	ands	r3, r2
 800736c:	68ba      	ldr	r2, [r7, #8]
 800736e:	429a      	cmp	r2, r3
 8007370:	bf0c      	ite	eq
 8007372:	2301      	moveq	r3, #1
 8007374:	2300      	movne	r3, #0
 8007376:	b2db      	uxtb	r3, r3
 8007378:	461a      	mov	r2, r3
 800737a:	79fb      	ldrb	r3, [r7, #7]
 800737c:	429a      	cmp	r2, r3
 800737e:	d1d7      	bne.n	8007330 <I2S_WaitFlagStateUntilTimeout+0x18>
      }
    }
  }
  return HAL_OK;
 8007380:	2300      	movs	r3, #0
}
 8007382:	4618      	mov	r0, r3
 8007384:	3718      	adds	r7, #24
 8007386:	46bd      	mov	sp, r7
 8007388:	bd80      	pop	{r7, pc}
	...

0800738c <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 800738c:	b580      	push	{r7, lr}
 800738e:	b088      	sub	sp, #32
 8007390:	af00      	add	r7, sp, #0
 8007392:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	689b      	ldr	r3, [r3, #8]
 800739a:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	4a92      	ldr	r2, [pc, #584]	@ (80075ec <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80073a2:	4293      	cmp	r3, r2
 80073a4:	d101      	bne.n	80073aa <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 80073a6:	4b92      	ldr	r3, [pc, #584]	@ (80075f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80073a8:	e001      	b.n	80073ae <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 80073aa:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80073ae:	689b      	ldr	r3, [r3, #8]
 80073b0:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	685b      	ldr	r3, [r3, #4]
 80073b8:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	4a8b      	ldr	r2, [pc, #556]	@ (80075ec <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80073c0:	4293      	cmp	r3, r2
 80073c2:	d101      	bne.n	80073c8 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 80073c4:	4b8a      	ldr	r3, [pc, #552]	@ (80075f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80073c6:	e001      	b.n	80073cc <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 80073c8:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80073cc:	685b      	ldr	r3, [r3, #4]
 80073ce:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	685b      	ldr	r3, [r3, #4]
 80073d4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80073d8:	d004      	beq.n	80073e4 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	685b      	ldr	r3, [r3, #4]
 80073de:	2b00      	cmp	r3, #0
 80073e0:	f040 8099 	bne.w	8007516 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 80073e4:	69fb      	ldr	r3, [r7, #28]
 80073e6:	f003 0302 	and.w	r3, r3, #2
 80073ea:	2b02      	cmp	r3, #2
 80073ec:	d107      	bne.n	80073fe <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 80073ee:	697b      	ldr	r3, [r7, #20]
 80073f0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	d002      	beq.n	80073fe <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 80073f8:	6878      	ldr	r0, [r7, #4]
 80073fa:	f000 f925 	bl	8007648 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 80073fe:	69bb      	ldr	r3, [r7, #24]
 8007400:	f003 0301 	and.w	r3, r3, #1
 8007404:	2b01      	cmp	r3, #1
 8007406:	d107      	bne.n	8007418 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8007408:	693b      	ldr	r3, [r7, #16]
 800740a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800740e:	2b00      	cmp	r3, #0
 8007410:	d002      	beq.n	8007418 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8007412:	6878      	ldr	r0, [r7, #4]
 8007414:	f000 f9c8 	bl	80077a8 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8007418:	69bb      	ldr	r3, [r7, #24]
 800741a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800741e:	2b40      	cmp	r3, #64	@ 0x40
 8007420:	d13a      	bne.n	8007498 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8007422:	693b      	ldr	r3, [r7, #16]
 8007424:	f003 0320 	and.w	r3, r3, #32
 8007428:	2b00      	cmp	r3, #0
 800742a:	d035      	beq.n	8007498 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	4a6e      	ldr	r2, [pc, #440]	@ (80075ec <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8007432:	4293      	cmp	r3, r2
 8007434:	d101      	bne.n	800743a <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8007436:	4b6e      	ldr	r3, [pc, #440]	@ (80075f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8007438:	e001      	b.n	800743e <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 800743a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800743e:	685a      	ldr	r2, [r3, #4]
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	4969      	ldr	r1, [pc, #420]	@ (80075ec <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8007446:	428b      	cmp	r3, r1
 8007448:	d101      	bne.n	800744e <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 800744a:	4b69      	ldr	r3, [pc, #420]	@ (80075f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800744c:	e001      	b.n	8007452 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 800744e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8007452:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8007456:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	685a      	ldr	r2, [r3, #4]
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8007466:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8007468:	2300      	movs	r3, #0
 800746a:	60fb      	str	r3, [r7, #12]
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	68db      	ldr	r3, [r3, #12]
 8007472:	60fb      	str	r3, [r7, #12]
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	689b      	ldr	r3, [r3, #8]
 800747a:	60fb      	str	r3, [r7, #12]
 800747c:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	2201      	movs	r2, #1
 8007482:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800748a:	f043 0202 	orr.w	r2, r3, #2
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8007492:	6878      	ldr	r0, [r7, #4]
 8007494:	f7ff fe4f 	bl	8007136 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8007498:	69fb      	ldr	r3, [r7, #28]
 800749a:	f003 0308 	and.w	r3, r3, #8
 800749e:	2b08      	cmp	r3, #8
 80074a0:	f040 80c3 	bne.w	800762a <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 80074a4:	697b      	ldr	r3, [r7, #20]
 80074a6:	f003 0320 	and.w	r3, r3, #32
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	f000 80bd 	beq.w	800762a <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	685a      	ldr	r2, [r3, #4]
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80074be:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	4a49      	ldr	r2, [pc, #292]	@ (80075ec <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80074c6:	4293      	cmp	r3, r2
 80074c8:	d101      	bne.n	80074ce <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 80074ca:	4b49      	ldr	r3, [pc, #292]	@ (80075f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80074cc:	e001      	b.n	80074d2 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 80074ce:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80074d2:	685a      	ldr	r2, [r3, #4]
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	4944      	ldr	r1, [pc, #272]	@ (80075ec <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80074da:	428b      	cmp	r3, r1
 80074dc:	d101      	bne.n	80074e2 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 80074de:	4b44      	ldr	r3, [pc, #272]	@ (80075f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80074e0:	e001      	b.n	80074e6 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 80074e2:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80074e6:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80074ea:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80074ec:	2300      	movs	r3, #0
 80074ee:	60bb      	str	r3, [r7, #8]
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	689b      	ldr	r3, [r3, #8]
 80074f6:	60bb      	str	r3, [r7, #8]
 80074f8:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	2201      	movs	r2, #1
 80074fe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007506:	f043 0204 	orr.w	r2, r3, #4
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800750e:	6878      	ldr	r0, [r7, #4]
 8007510:	f7ff fe11 	bl	8007136 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8007514:	e089      	b.n	800762a <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8007516:	69bb      	ldr	r3, [r7, #24]
 8007518:	f003 0302 	and.w	r3, r3, #2
 800751c:	2b02      	cmp	r3, #2
 800751e:	d107      	bne.n	8007530 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8007520:	693b      	ldr	r3, [r7, #16]
 8007522:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007526:	2b00      	cmp	r3, #0
 8007528:	d002      	beq.n	8007530 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 800752a:	6878      	ldr	r0, [r7, #4]
 800752c:	f000 f8be 	bl	80076ac <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8007530:	69fb      	ldr	r3, [r7, #28]
 8007532:	f003 0301 	and.w	r3, r3, #1
 8007536:	2b01      	cmp	r3, #1
 8007538:	d107      	bne.n	800754a <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 800753a:	697b      	ldr	r3, [r7, #20]
 800753c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007540:	2b00      	cmp	r3, #0
 8007542:	d002      	beq.n	800754a <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8007544:	6878      	ldr	r0, [r7, #4]
 8007546:	f000 f8fd 	bl	8007744 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800754a:	69fb      	ldr	r3, [r7, #28]
 800754c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007550:	2b40      	cmp	r3, #64	@ 0x40
 8007552:	d12f      	bne.n	80075b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8007554:	697b      	ldr	r3, [r7, #20]
 8007556:	f003 0320 	and.w	r3, r3, #32
 800755a:	2b00      	cmp	r3, #0
 800755c:	d02a      	beq.n	80075b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	685a      	ldr	r2, [r3, #4]
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800756c:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	4a1e      	ldr	r2, [pc, #120]	@ (80075ec <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8007574:	4293      	cmp	r3, r2
 8007576:	d101      	bne.n	800757c <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8007578:	4b1d      	ldr	r3, [pc, #116]	@ (80075f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800757a:	e001      	b.n	8007580 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 800757c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8007580:	685a      	ldr	r2, [r3, #4]
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	4919      	ldr	r1, [pc, #100]	@ (80075ec <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8007588:	428b      	cmp	r3, r1
 800758a:	d101      	bne.n	8007590 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 800758c:	4b18      	ldr	r3, [pc, #96]	@ (80075f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800758e:	e001      	b.n	8007594 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8007590:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8007594:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8007598:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	2201      	movs	r2, #1
 800759e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80075a6:	f043 0202 	orr.w	r2, r3, #2
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80075ae:	6878      	ldr	r0, [r7, #4]
 80075b0:	f7ff fdc1 	bl	8007136 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80075b4:	69bb      	ldr	r3, [r7, #24]
 80075b6:	f003 0308 	and.w	r3, r3, #8
 80075ba:	2b08      	cmp	r3, #8
 80075bc:	d136      	bne.n	800762c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 80075be:	693b      	ldr	r3, [r7, #16]
 80075c0:	f003 0320 	and.w	r3, r3, #32
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	d031      	beq.n	800762c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	4a07      	ldr	r2, [pc, #28]	@ (80075ec <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80075ce:	4293      	cmp	r3, r2
 80075d0:	d101      	bne.n	80075d6 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 80075d2:	4b07      	ldr	r3, [pc, #28]	@ (80075f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80075d4:	e001      	b.n	80075da <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 80075d6:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80075da:	685a      	ldr	r2, [r3, #4]
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	4902      	ldr	r1, [pc, #8]	@ (80075ec <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80075e2:	428b      	cmp	r3, r1
 80075e4:	d106      	bne.n	80075f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 80075e6:	4b02      	ldr	r3, [pc, #8]	@ (80075f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80075e8:	e006      	b.n	80075f8 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 80075ea:	bf00      	nop
 80075ec:	40003800 	.word	0x40003800
 80075f0:	40003400 	.word	0x40003400
 80075f4:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80075f8:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80075fc:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	685a      	ldr	r2, [r3, #4]
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800760c:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	2201      	movs	r2, #1
 8007612:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800761a:	f043 0204 	orr.w	r2, r3, #4
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8007622:	6878      	ldr	r0, [r7, #4]
 8007624:	f7ff fd87 	bl	8007136 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8007628:	e000      	b.n	800762c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800762a:	bf00      	nop
}
 800762c:	bf00      	nop
 800762e:	3720      	adds	r7, #32
 8007630:	46bd      	mov	sp, r7
 8007632:	bd80      	pop	{r7, pc}

08007634 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8007634:	b480      	push	{r7}
 8007636:	b083      	sub	sp, #12
 8007638:	af00      	add	r7, sp, #0
 800763a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 800763c:	bf00      	nop
 800763e:	370c      	adds	r7, #12
 8007640:	46bd      	mov	sp, r7
 8007642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007646:	4770      	bx	lr

08007648 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8007648:	b580      	push	{r7, lr}
 800764a:	b082      	sub	sp, #8
 800764c:	af00      	add	r7, sp, #0
 800764e:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007654:	1c99      	adds	r1, r3, #2
 8007656:	687a      	ldr	r2, [r7, #4]
 8007658:	6251      	str	r1, [r2, #36]	@ 0x24
 800765a:	881a      	ldrh	r2, [r3, #0]
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007666:	b29b      	uxth	r3, r3
 8007668:	3b01      	subs	r3, #1
 800766a:	b29a      	uxth	r2, r3
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007674:	b29b      	uxth	r3, r3
 8007676:	2b00      	cmp	r3, #0
 8007678:	d113      	bne.n	80076a2 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	685a      	ldr	r2, [r3, #4]
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8007688:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800768e:	b29b      	uxth	r3, r3
 8007690:	2b00      	cmp	r3, #0
 8007692:	d106      	bne.n	80076a2 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	2201      	movs	r2, #1
 8007698:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800769c:	6878      	ldr	r0, [r7, #4]
 800769e:	f7ff ffc9 	bl	8007634 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80076a2:	bf00      	nop
 80076a4:	3708      	adds	r7, #8
 80076a6:	46bd      	mov	sp, r7
 80076a8:	bd80      	pop	{r7, pc}
	...

080076ac <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80076ac:	b580      	push	{r7, lr}
 80076ae:	b082      	sub	sp, #8
 80076b0:	af00      	add	r7, sp, #0
 80076b2:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80076b8:	1c99      	adds	r1, r3, #2
 80076ba:	687a      	ldr	r2, [r7, #4]
 80076bc:	6251      	str	r1, [r2, #36]	@ 0x24
 80076be:	8819      	ldrh	r1, [r3, #0]
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	4a1d      	ldr	r2, [pc, #116]	@ (800773c <I2SEx_TxISR_I2SExt+0x90>)
 80076c6:	4293      	cmp	r3, r2
 80076c8:	d101      	bne.n	80076ce <I2SEx_TxISR_I2SExt+0x22>
 80076ca:	4b1d      	ldr	r3, [pc, #116]	@ (8007740 <I2SEx_TxISR_I2SExt+0x94>)
 80076cc:	e001      	b.n	80076d2 <I2SEx_TxISR_I2SExt+0x26>
 80076ce:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80076d2:	460a      	mov	r2, r1
 80076d4:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80076da:	b29b      	uxth	r3, r3
 80076dc:	3b01      	subs	r3, #1
 80076de:	b29a      	uxth	r2, r3
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80076e8:	b29b      	uxth	r3, r3
 80076ea:	2b00      	cmp	r3, #0
 80076ec:	d121      	bne.n	8007732 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	4a12      	ldr	r2, [pc, #72]	@ (800773c <I2SEx_TxISR_I2SExt+0x90>)
 80076f4:	4293      	cmp	r3, r2
 80076f6:	d101      	bne.n	80076fc <I2SEx_TxISR_I2SExt+0x50>
 80076f8:	4b11      	ldr	r3, [pc, #68]	@ (8007740 <I2SEx_TxISR_I2SExt+0x94>)
 80076fa:	e001      	b.n	8007700 <I2SEx_TxISR_I2SExt+0x54>
 80076fc:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8007700:	685a      	ldr	r2, [r3, #4]
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	490d      	ldr	r1, [pc, #52]	@ (800773c <I2SEx_TxISR_I2SExt+0x90>)
 8007708:	428b      	cmp	r3, r1
 800770a:	d101      	bne.n	8007710 <I2SEx_TxISR_I2SExt+0x64>
 800770c:	4b0c      	ldr	r3, [pc, #48]	@ (8007740 <I2SEx_TxISR_I2SExt+0x94>)
 800770e:	e001      	b.n	8007714 <I2SEx_TxISR_I2SExt+0x68>
 8007710:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8007714:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8007718:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800771e:	b29b      	uxth	r3, r3
 8007720:	2b00      	cmp	r3, #0
 8007722:	d106      	bne.n	8007732 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	2201      	movs	r2, #1
 8007728:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800772c:	6878      	ldr	r0, [r7, #4]
 800772e:	f7ff ff81 	bl	8007634 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8007732:	bf00      	nop
 8007734:	3708      	adds	r7, #8
 8007736:	46bd      	mov	sp, r7
 8007738:	bd80      	pop	{r7, pc}
 800773a:	bf00      	nop
 800773c:	40003800 	.word	0x40003800
 8007740:	40003400 	.word	0x40003400

08007744 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8007744:	b580      	push	{r7, lr}
 8007746:	b082      	sub	sp, #8
 8007748:	af00      	add	r7, sp, #0
 800774a:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	68d8      	ldr	r0, [r3, #12]
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007756:	1c99      	adds	r1, r3, #2
 8007758:	687a      	ldr	r2, [r7, #4]
 800775a:	62d1      	str	r1, [r2, #44]	@ 0x2c
 800775c:	b282      	uxth	r2, r0
 800775e:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8007764:	b29b      	uxth	r3, r3
 8007766:	3b01      	subs	r3, #1
 8007768:	b29a      	uxth	r2, r3
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8007772:	b29b      	uxth	r3, r3
 8007774:	2b00      	cmp	r3, #0
 8007776:	d113      	bne.n	80077a0 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	685a      	ldr	r2, [r3, #4]
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8007786:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800778c:	b29b      	uxth	r3, r3
 800778e:	2b00      	cmp	r3, #0
 8007790:	d106      	bne.n	80077a0 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	2201      	movs	r2, #1
 8007796:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800779a:	6878      	ldr	r0, [r7, #4]
 800779c:	f7ff ff4a 	bl	8007634 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80077a0:	bf00      	nop
 80077a2:	3708      	adds	r7, #8
 80077a4:	46bd      	mov	sp, r7
 80077a6:	bd80      	pop	{r7, pc}

080077a8 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80077a8:	b580      	push	{r7, lr}
 80077aa:	b082      	sub	sp, #8
 80077ac:	af00      	add	r7, sp, #0
 80077ae:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	4a20      	ldr	r2, [pc, #128]	@ (8007838 <I2SEx_RxISR_I2SExt+0x90>)
 80077b6:	4293      	cmp	r3, r2
 80077b8:	d101      	bne.n	80077be <I2SEx_RxISR_I2SExt+0x16>
 80077ba:	4b20      	ldr	r3, [pc, #128]	@ (800783c <I2SEx_RxISR_I2SExt+0x94>)
 80077bc:	e001      	b.n	80077c2 <I2SEx_RxISR_I2SExt+0x1a>
 80077be:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80077c2:	68d8      	ldr	r0, [r3, #12]
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80077c8:	1c99      	adds	r1, r3, #2
 80077ca:	687a      	ldr	r2, [r7, #4]
 80077cc:	62d1      	str	r1, [r2, #44]	@ 0x2c
 80077ce:	b282      	uxth	r2, r0
 80077d0:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80077d6:	b29b      	uxth	r3, r3
 80077d8:	3b01      	subs	r3, #1
 80077da:	b29a      	uxth	r2, r3
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80077e4:	b29b      	uxth	r3, r3
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	d121      	bne.n	800782e <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	4a12      	ldr	r2, [pc, #72]	@ (8007838 <I2SEx_RxISR_I2SExt+0x90>)
 80077f0:	4293      	cmp	r3, r2
 80077f2:	d101      	bne.n	80077f8 <I2SEx_RxISR_I2SExt+0x50>
 80077f4:	4b11      	ldr	r3, [pc, #68]	@ (800783c <I2SEx_RxISR_I2SExt+0x94>)
 80077f6:	e001      	b.n	80077fc <I2SEx_RxISR_I2SExt+0x54>
 80077f8:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80077fc:	685a      	ldr	r2, [r3, #4]
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	490d      	ldr	r1, [pc, #52]	@ (8007838 <I2SEx_RxISR_I2SExt+0x90>)
 8007804:	428b      	cmp	r3, r1
 8007806:	d101      	bne.n	800780c <I2SEx_RxISR_I2SExt+0x64>
 8007808:	4b0c      	ldr	r3, [pc, #48]	@ (800783c <I2SEx_RxISR_I2SExt+0x94>)
 800780a:	e001      	b.n	8007810 <I2SEx_RxISR_I2SExt+0x68>
 800780c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8007810:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8007814:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800781a:	b29b      	uxth	r3, r3
 800781c:	2b00      	cmp	r3, #0
 800781e:	d106      	bne.n	800782e <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	2201      	movs	r2, #1
 8007824:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8007828:	6878      	ldr	r0, [r7, #4]
 800782a:	f7ff ff03 	bl	8007634 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800782e:	bf00      	nop
 8007830:	3708      	adds	r7, #8
 8007832:	46bd      	mov	sp, r7
 8007834:	bd80      	pop	{r7, pc}
 8007836:	bf00      	nop
 8007838:	40003800 	.word	0x40003800
 800783c:	40003400 	.word	0x40003400

08007840 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007840:	b580      	push	{r7, lr}
 8007842:	b086      	sub	sp, #24
 8007844:	af00      	add	r7, sp, #0
 8007846:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	2b00      	cmp	r3, #0
 800784c:	d101      	bne.n	8007852 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800784e:	2301      	movs	r3, #1
 8007850:	e267      	b.n	8007d22 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	f003 0301 	and.w	r3, r3, #1
 800785a:	2b00      	cmp	r3, #0
 800785c:	d075      	beq.n	800794a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800785e:	4b88      	ldr	r3, [pc, #544]	@ (8007a80 <HAL_RCC_OscConfig+0x240>)
 8007860:	689b      	ldr	r3, [r3, #8]
 8007862:	f003 030c 	and.w	r3, r3, #12
 8007866:	2b04      	cmp	r3, #4
 8007868:	d00c      	beq.n	8007884 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800786a:	4b85      	ldr	r3, [pc, #532]	@ (8007a80 <HAL_RCC_OscConfig+0x240>)
 800786c:	689b      	ldr	r3, [r3, #8]
 800786e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8007872:	2b08      	cmp	r3, #8
 8007874:	d112      	bne.n	800789c <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007876:	4b82      	ldr	r3, [pc, #520]	@ (8007a80 <HAL_RCC_OscConfig+0x240>)
 8007878:	685b      	ldr	r3, [r3, #4]
 800787a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800787e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007882:	d10b      	bne.n	800789c <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007884:	4b7e      	ldr	r3, [pc, #504]	@ (8007a80 <HAL_RCC_OscConfig+0x240>)
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800788c:	2b00      	cmp	r3, #0
 800788e:	d05b      	beq.n	8007948 <HAL_RCC_OscConfig+0x108>
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	685b      	ldr	r3, [r3, #4]
 8007894:	2b00      	cmp	r3, #0
 8007896:	d157      	bne.n	8007948 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8007898:	2301      	movs	r3, #1
 800789a:	e242      	b.n	8007d22 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	685b      	ldr	r3, [r3, #4]
 80078a0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80078a4:	d106      	bne.n	80078b4 <HAL_RCC_OscConfig+0x74>
 80078a6:	4b76      	ldr	r3, [pc, #472]	@ (8007a80 <HAL_RCC_OscConfig+0x240>)
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	4a75      	ldr	r2, [pc, #468]	@ (8007a80 <HAL_RCC_OscConfig+0x240>)
 80078ac:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80078b0:	6013      	str	r3, [r2, #0]
 80078b2:	e01d      	b.n	80078f0 <HAL_RCC_OscConfig+0xb0>
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	685b      	ldr	r3, [r3, #4]
 80078b8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80078bc:	d10c      	bne.n	80078d8 <HAL_RCC_OscConfig+0x98>
 80078be:	4b70      	ldr	r3, [pc, #448]	@ (8007a80 <HAL_RCC_OscConfig+0x240>)
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	4a6f      	ldr	r2, [pc, #444]	@ (8007a80 <HAL_RCC_OscConfig+0x240>)
 80078c4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80078c8:	6013      	str	r3, [r2, #0]
 80078ca:	4b6d      	ldr	r3, [pc, #436]	@ (8007a80 <HAL_RCC_OscConfig+0x240>)
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	4a6c      	ldr	r2, [pc, #432]	@ (8007a80 <HAL_RCC_OscConfig+0x240>)
 80078d0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80078d4:	6013      	str	r3, [r2, #0]
 80078d6:	e00b      	b.n	80078f0 <HAL_RCC_OscConfig+0xb0>
 80078d8:	4b69      	ldr	r3, [pc, #420]	@ (8007a80 <HAL_RCC_OscConfig+0x240>)
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	4a68      	ldr	r2, [pc, #416]	@ (8007a80 <HAL_RCC_OscConfig+0x240>)
 80078de:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80078e2:	6013      	str	r3, [r2, #0]
 80078e4:	4b66      	ldr	r3, [pc, #408]	@ (8007a80 <HAL_RCC_OscConfig+0x240>)
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	4a65      	ldr	r2, [pc, #404]	@ (8007a80 <HAL_RCC_OscConfig+0x240>)
 80078ea:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80078ee:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	685b      	ldr	r3, [r3, #4]
 80078f4:	2b00      	cmp	r3, #0
 80078f6:	d013      	beq.n	8007920 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80078f8:	f7fd fe56 	bl	80055a8 <HAL_GetTick>
 80078fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80078fe:	e008      	b.n	8007912 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007900:	f7fd fe52 	bl	80055a8 <HAL_GetTick>
 8007904:	4602      	mov	r2, r0
 8007906:	693b      	ldr	r3, [r7, #16]
 8007908:	1ad3      	subs	r3, r2, r3
 800790a:	2b64      	cmp	r3, #100	@ 0x64
 800790c:	d901      	bls.n	8007912 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800790e:	2303      	movs	r3, #3
 8007910:	e207      	b.n	8007d22 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007912:	4b5b      	ldr	r3, [pc, #364]	@ (8007a80 <HAL_RCC_OscConfig+0x240>)
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800791a:	2b00      	cmp	r3, #0
 800791c:	d0f0      	beq.n	8007900 <HAL_RCC_OscConfig+0xc0>
 800791e:	e014      	b.n	800794a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007920:	f7fd fe42 	bl	80055a8 <HAL_GetTick>
 8007924:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007926:	e008      	b.n	800793a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007928:	f7fd fe3e 	bl	80055a8 <HAL_GetTick>
 800792c:	4602      	mov	r2, r0
 800792e:	693b      	ldr	r3, [r7, #16]
 8007930:	1ad3      	subs	r3, r2, r3
 8007932:	2b64      	cmp	r3, #100	@ 0x64
 8007934:	d901      	bls.n	800793a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8007936:	2303      	movs	r3, #3
 8007938:	e1f3      	b.n	8007d22 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800793a:	4b51      	ldr	r3, [pc, #324]	@ (8007a80 <HAL_RCC_OscConfig+0x240>)
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007942:	2b00      	cmp	r3, #0
 8007944:	d1f0      	bne.n	8007928 <HAL_RCC_OscConfig+0xe8>
 8007946:	e000      	b.n	800794a <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007948:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	f003 0302 	and.w	r3, r3, #2
 8007952:	2b00      	cmp	r3, #0
 8007954:	d063      	beq.n	8007a1e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8007956:	4b4a      	ldr	r3, [pc, #296]	@ (8007a80 <HAL_RCC_OscConfig+0x240>)
 8007958:	689b      	ldr	r3, [r3, #8]
 800795a:	f003 030c 	and.w	r3, r3, #12
 800795e:	2b00      	cmp	r3, #0
 8007960:	d00b      	beq.n	800797a <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007962:	4b47      	ldr	r3, [pc, #284]	@ (8007a80 <HAL_RCC_OscConfig+0x240>)
 8007964:	689b      	ldr	r3, [r3, #8]
 8007966:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800796a:	2b08      	cmp	r3, #8
 800796c:	d11c      	bne.n	80079a8 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800796e:	4b44      	ldr	r3, [pc, #272]	@ (8007a80 <HAL_RCC_OscConfig+0x240>)
 8007970:	685b      	ldr	r3, [r3, #4]
 8007972:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007976:	2b00      	cmp	r3, #0
 8007978:	d116      	bne.n	80079a8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800797a:	4b41      	ldr	r3, [pc, #260]	@ (8007a80 <HAL_RCC_OscConfig+0x240>)
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	f003 0302 	and.w	r3, r3, #2
 8007982:	2b00      	cmp	r3, #0
 8007984:	d005      	beq.n	8007992 <HAL_RCC_OscConfig+0x152>
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	68db      	ldr	r3, [r3, #12]
 800798a:	2b01      	cmp	r3, #1
 800798c:	d001      	beq.n	8007992 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800798e:	2301      	movs	r3, #1
 8007990:	e1c7      	b.n	8007d22 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007992:	4b3b      	ldr	r3, [pc, #236]	@ (8007a80 <HAL_RCC_OscConfig+0x240>)
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	691b      	ldr	r3, [r3, #16]
 800799e:	00db      	lsls	r3, r3, #3
 80079a0:	4937      	ldr	r1, [pc, #220]	@ (8007a80 <HAL_RCC_OscConfig+0x240>)
 80079a2:	4313      	orrs	r3, r2
 80079a4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80079a6:	e03a      	b.n	8007a1e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	68db      	ldr	r3, [r3, #12]
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	d020      	beq.n	80079f2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80079b0:	4b34      	ldr	r3, [pc, #208]	@ (8007a84 <HAL_RCC_OscConfig+0x244>)
 80079b2:	2201      	movs	r2, #1
 80079b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80079b6:	f7fd fdf7 	bl	80055a8 <HAL_GetTick>
 80079ba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80079bc:	e008      	b.n	80079d0 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80079be:	f7fd fdf3 	bl	80055a8 <HAL_GetTick>
 80079c2:	4602      	mov	r2, r0
 80079c4:	693b      	ldr	r3, [r7, #16]
 80079c6:	1ad3      	subs	r3, r2, r3
 80079c8:	2b02      	cmp	r3, #2
 80079ca:	d901      	bls.n	80079d0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80079cc:	2303      	movs	r3, #3
 80079ce:	e1a8      	b.n	8007d22 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80079d0:	4b2b      	ldr	r3, [pc, #172]	@ (8007a80 <HAL_RCC_OscConfig+0x240>)
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	f003 0302 	and.w	r3, r3, #2
 80079d8:	2b00      	cmp	r3, #0
 80079da:	d0f0      	beq.n	80079be <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80079dc:	4b28      	ldr	r3, [pc, #160]	@ (8007a80 <HAL_RCC_OscConfig+0x240>)
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	691b      	ldr	r3, [r3, #16]
 80079e8:	00db      	lsls	r3, r3, #3
 80079ea:	4925      	ldr	r1, [pc, #148]	@ (8007a80 <HAL_RCC_OscConfig+0x240>)
 80079ec:	4313      	orrs	r3, r2
 80079ee:	600b      	str	r3, [r1, #0]
 80079f0:	e015      	b.n	8007a1e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80079f2:	4b24      	ldr	r3, [pc, #144]	@ (8007a84 <HAL_RCC_OscConfig+0x244>)
 80079f4:	2200      	movs	r2, #0
 80079f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80079f8:	f7fd fdd6 	bl	80055a8 <HAL_GetTick>
 80079fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80079fe:	e008      	b.n	8007a12 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007a00:	f7fd fdd2 	bl	80055a8 <HAL_GetTick>
 8007a04:	4602      	mov	r2, r0
 8007a06:	693b      	ldr	r3, [r7, #16]
 8007a08:	1ad3      	subs	r3, r2, r3
 8007a0a:	2b02      	cmp	r3, #2
 8007a0c:	d901      	bls.n	8007a12 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8007a0e:	2303      	movs	r3, #3
 8007a10:	e187      	b.n	8007d22 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007a12:	4b1b      	ldr	r3, [pc, #108]	@ (8007a80 <HAL_RCC_OscConfig+0x240>)
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	f003 0302 	and.w	r3, r3, #2
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	d1f0      	bne.n	8007a00 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	f003 0308 	and.w	r3, r3, #8
 8007a26:	2b00      	cmp	r3, #0
 8007a28:	d036      	beq.n	8007a98 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	695b      	ldr	r3, [r3, #20]
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	d016      	beq.n	8007a60 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007a32:	4b15      	ldr	r3, [pc, #84]	@ (8007a88 <HAL_RCC_OscConfig+0x248>)
 8007a34:	2201      	movs	r2, #1
 8007a36:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007a38:	f7fd fdb6 	bl	80055a8 <HAL_GetTick>
 8007a3c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007a3e:	e008      	b.n	8007a52 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007a40:	f7fd fdb2 	bl	80055a8 <HAL_GetTick>
 8007a44:	4602      	mov	r2, r0
 8007a46:	693b      	ldr	r3, [r7, #16]
 8007a48:	1ad3      	subs	r3, r2, r3
 8007a4a:	2b02      	cmp	r3, #2
 8007a4c:	d901      	bls.n	8007a52 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8007a4e:	2303      	movs	r3, #3
 8007a50:	e167      	b.n	8007d22 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007a52:	4b0b      	ldr	r3, [pc, #44]	@ (8007a80 <HAL_RCC_OscConfig+0x240>)
 8007a54:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007a56:	f003 0302 	and.w	r3, r3, #2
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	d0f0      	beq.n	8007a40 <HAL_RCC_OscConfig+0x200>
 8007a5e:	e01b      	b.n	8007a98 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007a60:	4b09      	ldr	r3, [pc, #36]	@ (8007a88 <HAL_RCC_OscConfig+0x248>)
 8007a62:	2200      	movs	r2, #0
 8007a64:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007a66:	f7fd fd9f 	bl	80055a8 <HAL_GetTick>
 8007a6a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007a6c:	e00e      	b.n	8007a8c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007a6e:	f7fd fd9b 	bl	80055a8 <HAL_GetTick>
 8007a72:	4602      	mov	r2, r0
 8007a74:	693b      	ldr	r3, [r7, #16]
 8007a76:	1ad3      	subs	r3, r2, r3
 8007a78:	2b02      	cmp	r3, #2
 8007a7a:	d907      	bls.n	8007a8c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8007a7c:	2303      	movs	r3, #3
 8007a7e:	e150      	b.n	8007d22 <HAL_RCC_OscConfig+0x4e2>
 8007a80:	40023800 	.word	0x40023800
 8007a84:	42470000 	.word	0x42470000
 8007a88:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007a8c:	4b88      	ldr	r3, [pc, #544]	@ (8007cb0 <HAL_RCC_OscConfig+0x470>)
 8007a8e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007a90:	f003 0302 	and.w	r3, r3, #2
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	d1ea      	bne.n	8007a6e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	f003 0304 	and.w	r3, r3, #4
 8007aa0:	2b00      	cmp	r3, #0
 8007aa2:	f000 8097 	beq.w	8007bd4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007aa6:	2300      	movs	r3, #0
 8007aa8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007aaa:	4b81      	ldr	r3, [pc, #516]	@ (8007cb0 <HAL_RCC_OscConfig+0x470>)
 8007aac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007aae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	d10f      	bne.n	8007ad6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007ab6:	2300      	movs	r3, #0
 8007ab8:	60bb      	str	r3, [r7, #8]
 8007aba:	4b7d      	ldr	r3, [pc, #500]	@ (8007cb0 <HAL_RCC_OscConfig+0x470>)
 8007abc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007abe:	4a7c      	ldr	r2, [pc, #496]	@ (8007cb0 <HAL_RCC_OscConfig+0x470>)
 8007ac0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007ac4:	6413      	str	r3, [r2, #64]	@ 0x40
 8007ac6:	4b7a      	ldr	r3, [pc, #488]	@ (8007cb0 <HAL_RCC_OscConfig+0x470>)
 8007ac8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007aca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007ace:	60bb      	str	r3, [r7, #8]
 8007ad0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007ad2:	2301      	movs	r3, #1
 8007ad4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007ad6:	4b77      	ldr	r3, [pc, #476]	@ (8007cb4 <HAL_RCC_OscConfig+0x474>)
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	d118      	bne.n	8007b14 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007ae2:	4b74      	ldr	r3, [pc, #464]	@ (8007cb4 <HAL_RCC_OscConfig+0x474>)
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	4a73      	ldr	r2, [pc, #460]	@ (8007cb4 <HAL_RCC_OscConfig+0x474>)
 8007ae8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007aec:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007aee:	f7fd fd5b 	bl	80055a8 <HAL_GetTick>
 8007af2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007af4:	e008      	b.n	8007b08 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007af6:	f7fd fd57 	bl	80055a8 <HAL_GetTick>
 8007afa:	4602      	mov	r2, r0
 8007afc:	693b      	ldr	r3, [r7, #16]
 8007afe:	1ad3      	subs	r3, r2, r3
 8007b00:	2b02      	cmp	r3, #2
 8007b02:	d901      	bls.n	8007b08 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8007b04:	2303      	movs	r3, #3
 8007b06:	e10c      	b.n	8007d22 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007b08:	4b6a      	ldr	r3, [pc, #424]	@ (8007cb4 <HAL_RCC_OscConfig+0x474>)
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007b10:	2b00      	cmp	r3, #0
 8007b12:	d0f0      	beq.n	8007af6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	689b      	ldr	r3, [r3, #8]
 8007b18:	2b01      	cmp	r3, #1
 8007b1a:	d106      	bne.n	8007b2a <HAL_RCC_OscConfig+0x2ea>
 8007b1c:	4b64      	ldr	r3, [pc, #400]	@ (8007cb0 <HAL_RCC_OscConfig+0x470>)
 8007b1e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007b20:	4a63      	ldr	r2, [pc, #396]	@ (8007cb0 <HAL_RCC_OscConfig+0x470>)
 8007b22:	f043 0301 	orr.w	r3, r3, #1
 8007b26:	6713      	str	r3, [r2, #112]	@ 0x70
 8007b28:	e01c      	b.n	8007b64 <HAL_RCC_OscConfig+0x324>
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	689b      	ldr	r3, [r3, #8]
 8007b2e:	2b05      	cmp	r3, #5
 8007b30:	d10c      	bne.n	8007b4c <HAL_RCC_OscConfig+0x30c>
 8007b32:	4b5f      	ldr	r3, [pc, #380]	@ (8007cb0 <HAL_RCC_OscConfig+0x470>)
 8007b34:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007b36:	4a5e      	ldr	r2, [pc, #376]	@ (8007cb0 <HAL_RCC_OscConfig+0x470>)
 8007b38:	f043 0304 	orr.w	r3, r3, #4
 8007b3c:	6713      	str	r3, [r2, #112]	@ 0x70
 8007b3e:	4b5c      	ldr	r3, [pc, #368]	@ (8007cb0 <HAL_RCC_OscConfig+0x470>)
 8007b40:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007b42:	4a5b      	ldr	r2, [pc, #364]	@ (8007cb0 <HAL_RCC_OscConfig+0x470>)
 8007b44:	f043 0301 	orr.w	r3, r3, #1
 8007b48:	6713      	str	r3, [r2, #112]	@ 0x70
 8007b4a:	e00b      	b.n	8007b64 <HAL_RCC_OscConfig+0x324>
 8007b4c:	4b58      	ldr	r3, [pc, #352]	@ (8007cb0 <HAL_RCC_OscConfig+0x470>)
 8007b4e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007b50:	4a57      	ldr	r2, [pc, #348]	@ (8007cb0 <HAL_RCC_OscConfig+0x470>)
 8007b52:	f023 0301 	bic.w	r3, r3, #1
 8007b56:	6713      	str	r3, [r2, #112]	@ 0x70
 8007b58:	4b55      	ldr	r3, [pc, #340]	@ (8007cb0 <HAL_RCC_OscConfig+0x470>)
 8007b5a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007b5c:	4a54      	ldr	r2, [pc, #336]	@ (8007cb0 <HAL_RCC_OscConfig+0x470>)
 8007b5e:	f023 0304 	bic.w	r3, r3, #4
 8007b62:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	689b      	ldr	r3, [r3, #8]
 8007b68:	2b00      	cmp	r3, #0
 8007b6a:	d015      	beq.n	8007b98 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007b6c:	f7fd fd1c 	bl	80055a8 <HAL_GetTick>
 8007b70:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007b72:	e00a      	b.n	8007b8a <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007b74:	f7fd fd18 	bl	80055a8 <HAL_GetTick>
 8007b78:	4602      	mov	r2, r0
 8007b7a:	693b      	ldr	r3, [r7, #16]
 8007b7c:	1ad3      	subs	r3, r2, r3
 8007b7e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007b82:	4293      	cmp	r3, r2
 8007b84:	d901      	bls.n	8007b8a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8007b86:	2303      	movs	r3, #3
 8007b88:	e0cb      	b.n	8007d22 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007b8a:	4b49      	ldr	r3, [pc, #292]	@ (8007cb0 <HAL_RCC_OscConfig+0x470>)
 8007b8c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007b8e:	f003 0302 	and.w	r3, r3, #2
 8007b92:	2b00      	cmp	r3, #0
 8007b94:	d0ee      	beq.n	8007b74 <HAL_RCC_OscConfig+0x334>
 8007b96:	e014      	b.n	8007bc2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007b98:	f7fd fd06 	bl	80055a8 <HAL_GetTick>
 8007b9c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007b9e:	e00a      	b.n	8007bb6 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007ba0:	f7fd fd02 	bl	80055a8 <HAL_GetTick>
 8007ba4:	4602      	mov	r2, r0
 8007ba6:	693b      	ldr	r3, [r7, #16]
 8007ba8:	1ad3      	subs	r3, r2, r3
 8007baa:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007bae:	4293      	cmp	r3, r2
 8007bb0:	d901      	bls.n	8007bb6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8007bb2:	2303      	movs	r3, #3
 8007bb4:	e0b5      	b.n	8007d22 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007bb6:	4b3e      	ldr	r3, [pc, #248]	@ (8007cb0 <HAL_RCC_OscConfig+0x470>)
 8007bb8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007bba:	f003 0302 	and.w	r3, r3, #2
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	d1ee      	bne.n	8007ba0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8007bc2:	7dfb      	ldrb	r3, [r7, #23]
 8007bc4:	2b01      	cmp	r3, #1
 8007bc6:	d105      	bne.n	8007bd4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007bc8:	4b39      	ldr	r3, [pc, #228]	@ (8007cb0 <HAL_RCC_OscConfig+0x470>)
 8007bca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007bcc:	4a38      	ldr	r2, [pc, #224]	@ (8007cb0 <HAL_RCC_OscConfig+0x470>)
 8007bce:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007bd2:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	699b      	ldr	r3, [r3, #24]
 8007bd8:	2b00      	cmp	r3, #0
 8007bda:	f000 80a1 	beq.w	8007d20 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8007bde:	4b34      	ldr	r3, [pc, #208]	@ (8007cb0 <HAL_RCC_OscConfig+0x470>)
 8007be0:	689b      	ldr	r3, [r3, #8]
 8007be2:	f003 030c 	and.w	r3, r3, #12
 8007be6:	2b08      	cmp	r3, #8
 8007be8:	d05c      	beq.n	8007ca4 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	699b      	ldr	r3, [r3, #24]
 8007bee:	2b02      	cmp	r3, #2
 8007bf0:	d141      	bne.n	8007c76 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007bf2:	4b31      	ldr	r3, [pc, #196]	@ (8007cb8 <HAL_RCC_OscConfig+0x478>)
 8007bf4:	2200      	movs	r2, #0
 8007bf6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007bf8:	f7fd fcd6 	bl	80055a8 <HAL_GetTick>
 8007bfc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007bfe:	e008      	b.n	8007c12 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007c00:	f7fd fcd2 	bl	80055a8 <HAL_GetTick>
 8007c04:	4602      	mov	r2, r0
 8007c06:	693b      	ldr	r3, [r7, #16]
 8007c08:	1ad3      	subs	r3, r2, r3
 8007c0a:	2b02      	cmp	r3, #2
 8007c0c:	d901      	bls.n	8007c12 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8007c0e:	2303      	movs	r3, #3
 8007c10:	e087      	b.n	8007d22 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007c12:	4b27      	ldr	r3, [pc, #156]	@ (8007cb0 <HAL_RCC_OscConfig+0x470>)
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007c1a:	2b00      	cmp	r3, #0
 8007c1c:	d1f0      	bne.n	8007c00 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	69da      	ldr	r2, [r3, #28]
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	6a1b      	ldr	r3, [r3, #32]
 8007c26:	431a      	orrs	r2, r3
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007c2c:	019b      	lsls	r3, r3, #6
 8007c2e:	431a      	orrs	r2, r3
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007c34:	085b      	lsrs	r3, r3, #1
 8007c36:	3b01      	subs	r3, #1
 8007c38:	041b      	lsls	r3, r3, #16
 8007c3a:	431a      	orrs	r2, r3
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c40:	061b      	lsls	r3, r3, #24
 8007c42:	491b      	ldr	r1, [pc, #108]	@ (8007cb0 <HAL_RCC_OscConfig+0x470>)
 8007c44:	4313      	orrs	r3, r2
 8007c46:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007c48:	4b1b      	ldr	r3, [pc, #108]	@ (8007cb8 <HAL_RCC_OscConfig+0x478>)
 8007c4a:	2201      	movs	r2, #1
 8007c4c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007c4e:	f7fd fcab 	bl	80055a8 <HAL_GetTick>
 8007c52:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007c54:	e008      	b.n	8007c68 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007c56:	f7fd fca7 	bl	80055a8 <HAL_GetTick>
 8007c5a:	4602      	mov	r2, r0
 8007c5c:	693b      	ldr	r3, [r7, #16]
 8007c5e:	1ad3      	subs	r3, r2, r3
 8007c60:	2b02      	cmp	r3, #2
 8007c62:	d901      	bls.n	8007c68 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8007c64:	2303      	movs	r3, #3
 8007c66:	e05c      	b.n	8007d22 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007c68:	4b11      	ldr	r3, [pc, #68]	@ (8007cb0 <HAL_RCC_OscConfig+0x470>)
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007c70:	2b00      	cmp	r3, #0
 8007c72:	d0f0      	beq.n	8007c56 <HAL_RCC_OscConfig+0x416>
 8007c74:	e054      	b.n	8007d20 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007c76:	4b10      	ldr	r3, [pc, #64]	@ (8007cb8 <HAL_RCC_OscConfig+0x478>)
 8007c78:	2200      	movs	r2, #0
 8007c7a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007c7c:	f7fd fc94 	bl	80055a8 <HAL_GetTick>
 8007c80:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007c82:	e008      	b.n	8007c96 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007c84:	f7fd fc90 	bl	80055a8 <HAL_GetTick>
 8007c88:	4602      	mov	r2, r0
 8007c8a:	693b      	ldr	r3, [r7, #16]
 8007c8c:	1ad3      	subs	r3, r2, r3
 8007c8e:	2b02      	cmp	r3, #2
 8007c90:	d901      	bls.n	8007c96 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8007c92:	2303      	movs	r3, #3
 8007c94:	e045      	b.n	8007d22 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007c96:	4b06      	ldr	r3, [pc, #24]	@ (8007cb0 <HAL_RCC_OscConfig+0x470>)
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007c9e:	2b00      	cmp	r3, #0
 8007ca0:	d1f0      	bne.n	8007c84 <HAL_RCC_OscConfig+0x444>
 8007ca2:	e03d      	b.n	8007d20 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	699b      	ldr	r3, [r3, #24]
 8007ca8:	2b01      	cmp	r3, #1
 8007caa:	d107      	bne.n	8007cbc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8007cac:	2301      	movs	r3, #1
 8007cae:	e038      	b.n	8007d22 <HAL_RCC_OscConfig+0x4e2>
 8007cb0:	40023800 	.word	0x40023800
 8007cb4:	40007000 	.word	0x40007000
 8007cb8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8007cbc:	4b1b      	ldr	r3, [pc, #108]	@ (8007d2c <HAL_RCC_OscConfig+0x4ec>)
 8007cbe:	685b      	ldr	r3, [r3, #4]
 8007cc0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	699b      	ldr	r3, [r3, #24]
 8007cc6:	2b01      	cmp	r3, #1
 8007cc8:	d028      	beq.n	8007d1c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007cca:	68fb      	ldr	r3, [r7, #12]
 8007ccc:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007cd4:	429a      	cmp	r2, r3
 8007cd6:	d121      	bne.n	8007d1c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007cd8:	68fb      	ldr	r3, [r7, #12]
 8007cda:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007ce2:	429a      	cmp	r2, r3
 8007ce4:	d11a      	bne.n	8007d1c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007ce6:	68fa      	ldr	r2, [r7, #12]
 8007ce8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8007cec:	4013      	ands	r3, r2
 8007cee:	687a      	ldr	r2, [r7, #4]
 8007cf0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8007cf2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007cf4:	4293      	cmp	r3, r2
 8007cf6:	d111      	bne.n	8007d1c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007cf8:	68fb      	ldr	r3, [r7, #12]
 8007cfa:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007d02:	085b      	lsrs	r3, r3, #1
 8007d04:	3b01      	subs	r3, #1
 8007d06:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007d08:	429a      	cmp	r2, r3
 8007d0a:	d107      	bne.n	8007d1c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8007d0c:	68fb      	ldr	r3, [r7, #12]
 8007d0e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007d16:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007d18:	429a      	cmp	r2, r3
 8007d1a:	d001      	beq.n	8007d20 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8007d1c:	2301      	movs	r3, #1
 8007d1e:	e000      	b.n	8007d22 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8007d20:	2300      	movs	r3, #0
}
 8007d22:	4618      	mov	r0, r3
 8007d24:	3718      	adds	r7, #24
 8007d26:	46bd      	mov	sp, r7
 8007d28:	bd80      	pop	{r7, pc}
 8007d2a:	bf00      	nop
 8007d2c:	40023800 	.word	0x40023800

08007d30 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007d30:	b580      	push	{r7, lr}
 8007d32:	b084      	sub	sp, #16
 8007d34:	af00      	add	r7, sp, #0
 8007d36:	6078      	str	r0, [r7, #4]
 8007d38:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	2b00      	cmp	r3, #0
 8007d3e:	d101      	bne.n	8007d44 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007d40:	2301      	movs	r3, #1
 8007d42:	e0cc      	b.n	8007ede <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007d44:	4b68      	ldr	r3, [pc, #416]	@ (8007ee8 <HAL_RCC_ClockConfig+0x1b8>)
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	f003 0307 	and.w	r3, r3, #7
 8007d4c:	683a      	ldr	r2, [r7, #0]
 8007d4e:	429a      	cmp	r2, r3
 8007d50:	d90c      	bls.n	8007d6c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007d52:	4b65      	ldr	r3, [pc, #404]	@ (8007ee8 <HAL_RCC_ClockConfig+0x1b8>)
 8007d54:	683a      	ldr	r2, [r7, #0]
 8007d56:	b2d2      	uxtb	r2, r2
 8007d58:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007d5a:	4b63      	ldr	r3, [pc, #396]	@ (8007ee8 <HAL_RCC_ClockConfig+0x1b8>)
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	f003 0307 	and.w	r3, r3, #7
 8007d62:	683a      	ldr	r2, [r7, #0]
 8007d64:	429a      	cmp	r2, r3
 8007d66:	d001      	beq.n	8007d6c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8007d68:	2301      	movs	r3, #1
 8007d6a:	e0b8      	b.n	8007ede <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	f003 0302 	and.w	r3, r3, #2
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	d020      	beq.n	8007dba <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	f003 0304 	and.w	r3, r3, #4
 8007d80:	2b00      	cmp	r3, #0
 8007d82:	d005      	beq.n	8007d90 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007d84:	4b59      	ldr	r3, [pc, #356]	@ (8007eec <HAL_RCC_ClockConfig+0x1bc>)
 8007d86:	689b      	ldr	r3, [r3, #8]
 8007d88:	4a58      	ldr	r2, [pc, #352]	@ (8007eec <HAL_RCC_ClockConfig+0x1bc>)
 8007d8a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8007d8e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	f003 0308 	and.w	r3, r3, #8
 8007d98:	2b00      	cmp	r3, #0
 8007d9a:	d005      	beq.n	8007da8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007d9c:	4b53      	ldr	r3, [pc, #332]	@ (8007eec <HAL_RCC_ClockConfig+0x1bc>)
 8007d9e:	689b      	ldr	r3, [r3, #8]
 8007da0:	4a52      	ldr	r2, [pc, #328]	@ (8007eec <HAL_RCC_ClockConfig+0x1bc>)
 8007da2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8007da6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007da8:	4b50      	ldr	r3, [pc, #320]	@ (8007eec <HAL_RCC_ClockConfig+0x1bc>)
 8007daa:	689b      	ldr	r3, [r3, #8]
 8007dac:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	689b      	ldr	r3, [r3, #8]
 8007db4:	494d      	ldr	r1, [pc, #308]	@ (8007eec <HAL_RCC_ClockConfig+0x1bc>)
 8007db6:	4313      	orrs	r3, r2
 8007db8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	f003 0301 	and.w	r3, r3, #1
 8007dc2:	2b00      	cmp	r3, #0
 8007dc4:	d044      	beq.n	8007e50 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	685b      	ldr	r3, [r3, #4]
 8007dca:	2b01      	cmp	r3, #1
 8007dcc:	d107      	bne.n	8007dde <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007dce:	4b47      	ldr	r3, [pc, #284]	@ (8007eec <HAL_RCC_ClockConfig+0x1bc>)
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007dd6:	2b00      	cmp	r3, #0
 8007dd8:	d119      	bne.n	8007e0e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007dda:	2301      	movs	r3, #1
 8007ddc:	e07f      	b.n	8007ede <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	685b      	ldr	r3, [r3, #4]
 8007de2:	2b02      	cmp	r3, #2
 8007de4:	d003      	beq.n	8007dee <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007dea:	2b03      	cmp	r3, #3
 8007dec:	d107      	bne.n	8007dfe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007dee:	4b3f      	ldr	r3, [pc, #252]	@ (8007eec <HAL_RCC_ClockConfig+0x1bc>)
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007df6:	2b00      	cmp	r3, #0
 8007df8:	d109      	bne.n	8007e0e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007dfa:	2301      	movs	r3, #1
 8007dfc:	e06f      	b.n	8007ede <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007dfe:	4b3b      	ldr	r3, [pc, #236]	@ (8007eec <HAL_RCC_ClockConfig+0x1bc>)
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	f003 0302 	and.w	r3, r3, #2
 8007e06:	2b00      	cmp	r3, #0
 8007e08:	d101      	bne.n	8007e0e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007e0a:	2301      	movs	r3, #1
 8007e0c:	e067      	b.n	8007ede <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007e0e:	4b37      	ldr	r3, [pc, #220]	@ (8007eec <HAL_RCC_ClockConfig+0x1bc>)
 8007e10:	689b      	ldr	r3, [r3, #8]
 8007e12:	f023 0203 	bic.w	r2, r3, #3
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	685b      	ldr	r3, [r3, #4]
 8007e1a:	4934      	ldr	r1, [pc, #208]	@ (8007eec <HAL_RCC_ClockConfig+0x1bc>)
 8007e1c:	4313      	orrs	r3, r2
 8007e1e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007e20:	f7fd fbc2 	bl	80055a8 <HAL_GetTick>
 8007e24:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007e26:	e00a      	b.n	8007e3e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007e28:	f7fd fbbe 	bl	80055a8 <HAL_GetTick>
 8007e2c:	4602      	mov	r2, r0
 8007e2e:	68fb      	ldr	r3, [r7, #12]
 8007e30:	1ad3      	subs	r3, r2, r3
 8007e32:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007e36:	4293      	cmp	r3, r2
 8007e38:	d901      	bls.n	8007e3e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8007e3a:	2303      	movs	r3, #3
 8007e3c:	e04f      	b.n	8007ede <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007e3e:	4b2b      	ldr	r3, [pc, #172]	@ (8007eec <HAL_RCC_ClockConfig+0x1bc>)
 8007e40:	689b      	ldr	r3, [r3, #8]
 8007e42:	f003 020c 	and.w	r2, r3, #12
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	685b      	ldr	r3, [r3, #4]
 8007e4a:	009b      	lsls	r3, r3, #2
 8007e4c:	429a      	cmp	r2, r3
 8007e4e:	d1eb      	bne.n	8007e28 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007e50:	4b25      	ldr	r3, [pc, #148]	@ (8007ee8 <HAL_RCC_ClockConfig+0x1b8>)
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	f003 0307 	and.w	r3, r3, #7
 8007e58:	683a      	ldr	r2, [r7, #0]
 8007e5a:	429a      	cmp	r2, r3
 8007e5c:	d20c      	bcs.n	8007e78 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007e5e:	4b22      	ldr	r3, [pc, #136]	@ (8007ee8 <HAL_RCC_ClockConfig+0x1b8>)
 8007e60:	683a      	ldr	r2, [r7, #0]
 8007e62:	b2d2      	uxtb	r2, r2
 8007e64:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007e66:	4b20      	ldr	r3, [pc, #128]	@ (8007ee8 <HAL_RCC_ClockConfig+0x1b8>)
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	f003 0307 	and.w	r3, r3, #7
 8007e6e:	683a      	ldr	r2, [r7, #0]
 8007e70:	429a      	cmp	r2, r3
 8007e72:	d001      	beq.n	8007e78 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8007e74:	2301      	movs	r3, #1
 8007e76:	e032      	b.n	8007ede <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	f003 0304 	and.w	r3, r3, #4
 8007e80:	2b00      	cmp	r3, #0
 8007e82:	d008      	beq.n	8007e96 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007e84:	4b19      	ldr	r3, [pc, #100]	@ (8007eec <HAL_RCC_ClockConfig+0x1bc>)
 8007e86:	689b      	ldr	r3, [r3, #8]
 8007e88:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	68db      	ldr	r3, [r3, #12]
 8007e90:	4916      	ldr	r1, [pc, #88]	@ (8007eec <HAL_RCC_ClockConfig+0x1bc>)
 8007e92:	4313      	orrs	r3, r2
 8007e94:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	f003 0308 	and.w	r3, r3, #8
 8007e9e:	2b00      	cmp	r3, #0
 8007ea0:	d009      	beq.n	8007eb6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007ea2:	4b12      	ldr	r3, [pc, #72]	@ (8007eec <HAL_RCC_ClockConfig+0x1bc>)
 8007ea4:	689b      	ldr	r3, [r3, #8]
 8007ea6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	691b      	ldr	r3, [r3, #16]
 8007eae:	00db      	lsls	r3, r3, #3
 8007eb0:	490e      	ldr	r1, [pc, #56]	@ (8007eec <HAL_RCC_ClockConfig+0x1bc>)
 8007eb2:	4313      	orrs	r3, r2
 8007eb4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8007eb6:	f000 f821 	bl	8007efc <HAL_RCC_GetSysClockFreq>
 8007eba:	4602      	mov	r2, r0
 8007ebc:	4b0b      	ldr	r3, [pc, #44]	@ (8007eec <HAL_RCC_ClockConfig+0x1bc>)
 8007ebe:	689b      	ldr	r3, [r3, #8]
 8007ec0:	091b      	lsrs	r3, r3, #4
 8007ec2:	f003 030f 	and.w	r3, r3, #15
 8007ec6:	490a      	ldr	r1, [pc, #40]	@ (8007ef0 <HAL_RCC_ClockConfig+0x1c0>)
 8007ec8:	5ccb      	ldrb	r3, [r1, r3]
 8007eca:	fa22 f303 	lsr.w	r3, r2, r3
 8007ece:	4a09      	ldr	r2, [pc, #36]	@ (8007ef4 <HAL_RCC_ClockConfig+0x1c4>)
 8007ed0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8007ed2:	4b09      	ldr	r3, [pc, #36]	@ (8007ef8 <HAL_RCC_ClockConfig+0x1c8>)
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	4618      	mov	r0, r3
 8007ed8:	f7fd fb22 	bl	8005520 <HAL_InitTick>

  return HAL_OK;
 8007edc:	2300      	movs	r3, #0
}
 8007ede:	4618      	mov	r0, r3
 8007ee0:	3710      	adds	r7, #16
 8007ee2:	46bd      	mov	sp, r7
 8007ee4:	bd80      	pop	{r7, pc}
 8007ee6:	bf00      	nop
 8007ee8:	40023c00 	.word	0x40023c00
 8007eec:	40023800 	.word	0x40023800
 8007ef0:	08010af8 	.word	0x08010af8
 8007ef4:	2000d114 	.word	0x2000d114
 8007ef8:	2000d118 	.word	0x2000d118

08007efc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007efc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007f00:	b094      	sub	sp, #80	@ 0x50
 8007f02:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8007f04:	2300      	movs	r3, #0
 8007f06:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8007f08:	2300      	movs	r3, #0
 8007f0a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8007f0c:	2300      	movs	r3, #0
 8007f0e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8007f10:	2300      	movs	r3, #0
 8007f12:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007f14:	4b79      	ldr	r3, [pc, #484]	@ (80080fc <HAL_RCC_GetSysClockFreq+0x200>)
 8007f16:	689b      	ldr	r3, [r3, #8]
 8007f18:	f003 030c 	and.w	r3, r3, #12
 8007f1c:	2b08      	cmp	r3, #8
 8007f1e:	d00d      	beq.n	8007f3c <HAL_RCC_GetSysClockFreq+0x40>
 8007f20:	2b08      	cmp	r3, #8
 8007f22:	f200 80e1 	bhi.w	80080e8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	d002      	beq.n	8007f30 <HAL_RCC_GetSysClockFreq+0x34>
 8007f2a:	2b04      	cmp	r3, #4
 8007f2c:	d003      	beq.n	8007f36 <HAL_RCC_GetSysClockFreq+0x3a>
 8007f2e:	e0db      	b.n	80080e8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007f30:	4b73      	ldr	r3, [pc, #460]	@ (8008100 <HAL_RCC_GetSysClockFreq+0x204>)
 8007f32:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8007f34:	e0db      	b.n	80080ee <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8007f36:	4b73      	ldr	r3, [pc, #460]	@ (8008104 <HAL_RCC_GetSysClockFreq+0x208>)
 8007f38:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8007f3a:	e0d8      	b.n	80080ee <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007f3c:	4b6f      	ldr	r3, [pc, #444]	@ (80080fc <HAL_RCC_GetSysClockFreq+0x200>)
 8007f3e:	685b      	ldr	r3, [r3, #4]
 8007f40:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007f44:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8007f46:	4b6d      	ldr	r3, [pc, #436]	@ (80080fc <HAL_RCC_GetSysClockFreq+0x200>)
 8007f48:	685b      	ldr	r3, [r3, #4]
 8007f4a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007f4e:	2b00      	cmp	r3, #0
 8007f50:	d063      	beq.n	800801a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007f52:	4b6a      	ldr	r3, [pc, #424]	@ (80080fc <HAL_RCC_GetSysClockFreq+0x200>)
 8007f54:	685b      	ldr	r3, [r3, #4]
 8007f56:	099b      	lsrs	r3, r3, #6
 8007f58:	2200      	movs	r2, #0
 8007f5a:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007f5c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8007f5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f60:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007f64:	633b      	str	r3, [r7, #48]	@ 0x30
 8007f66:	2300      	movs	r3, #0
 8007f68:	637b      	str	r3, [r7, #52]	@ 0x34
 8007f6a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8007f6e:	4622      	mov	r2, r4
 8007f70:	462b      	mov	r3, r5
 8007f72:	f04f 0000 	mov.w	r0, #0
 8007f76:	f04f 0100 	mov.w	r1, #0
 8007f7a:	0159      	lsls	r1, r3, #5
 8007f7c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007f80:	0150      	lsls	r0, r2, #5
 8007f82:	4602      	mov	r2, r0
 8007f84:	460b      	mov	r3, r1
 8007f86:	4621      	mov	r1, r4
 8007f88:	1a51      	subs	r1, r2, r1
 8007f8a:	6139      	str	r1, [r7, #16]
 8007f8c:	4629      	mov	r1, r5
 8007f8e:	eb63 0301 	sbc.w	r3, r3, r1
 8007f92:	617b      	str	r3, [r7, #20]
 8007f94:	f04f 0200 	mov.w	r2, #0
 8007f98:	f04f 0300 	mov.w	r3, #0
 8007f9c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007fa0:	4659      	mov	r1, fp
 8007fa2:	018b      	lsls	r3, r1, #6
 8007fa4:	4651      	mov	r1, sl
 8007fa6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8007faa:	4651      	mov	r1, sl
 8007fac:	018a      	lsls	r2, r1, #6
 8007fae:	4651      	mov	r1, sl
 8007fb0:	ebb2 0801 	subs.w	r8, r2, r1
 8007fb4:	4659      	mov	r1, fp
 8007fb6:	eb63 0901 	sbc.w	r9, r3, r1
 8007fba:	f04f 0200 	mov.w	r2, #0
 8007fbe:	f04f 0300 	mov.w	r3, #0
 8007fc2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007fc6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007fca:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007fce:	4690      	mov	r8, r2
 8007fd0:	4699      	mov	r9, r3
 8007fd2:	4623      	mov	r3, r4
 8007fd4:	eb18 0303 	adds.w	r3, r8, r3
 8007fd8:	60bb      	str	r3, [r7, #8]
 8007fda:	462b      	mov	r3, r5
 8007fdc:	eb49 0303 	adc.w	r3, r9, r3
 8007fe0:	60fb      	str	r3, [r7, #12]
 8007fe2:	f04f 0200 	mov.w	r2, #0
 8007fe6:	f04f 0300 	mov.w	r3, #0
 8007fea:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8007fee:	4629      	mov	r1, r5
 8007ff0:	024b      	lsls	r3, r1, #9
 8007ff2:	4621      	mov	r1, r4
 8007ff4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8007ff8:	4621      	mov	r1, r4
 8007ffa:	024a      	lsls	r2, r1, #9
 8007ffc:	4610      	mov	r0, r2
 8007ffe:	4619      	mov	r1, r3
 8008000:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008002:	2200      	movs	r2, #0
 8008004:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008006:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008008:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800800c:	f7f8 fe44 	bl	8000c98 <__aeabi_uldivmod>
 8008010:	4602      	mov	r2, r0
 8008012:	460b      	mov	r3, r1
 8008014:	4613      	mov	r3, r2
 8008016:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008018:	e058      	b.n	80080cc <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800801a:	4b38      	ldr	r3, [pc, #224]	@ (80080fc <HAL_RCC_GetSysClockFreq+0x200>)
 800801c:	685b      	ldr	r3, [r3, #4]
 800801e:	099b      	lsrs	r3, r3, #6
 8008020:	2200      	movs	r2, #0
 8008022:	4618      	mov	r0, r3
 8008024:	4611      	mov	r1, r2
 8008026:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800802a:	623b      	str	r3, [r7, #32]
 800802c:	2300      	movs	r3, #0
 800802e:	627b      	str	r3, [r7, #36]	@ 0x24
 8008030:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8008034:	4642      	mov	r2, r8
 8008036:	464b      	mov	r3, r9
 8008038:	f04f 0000 	mov.w	r0, #0
 800803c:	f04f 0100 	mov.w	r1, #0
 8008040:	0159      	lsls	r1, r3, #5
 8008042:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8008046:	0150      	lsls	r0, r2, #5
 8008048:	4602      	mov	r2, r0
 800804a:	460b      	mov	r3, r1
 800804c:	4641      	mov	r1, r8
 800804e:	ebb2 0a01 	subs.w	sl, r2, r1
 8008052:	4649      	mov	r1, r9
 8008054:	eb63 0b01 	sbc.w	fp, r3, r1
 8008058:	f04f 0200 	mov.w	r2, #0
 800805c:	f04f 0300 	mov.w	r3, #0
 8008060:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8008064:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8008068:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800806c:	ebb2 040a 	subs.w	r4, r2, sl
 8008070:	eb63 050b 	sbc.w	r5, r3, fp
 8008074:	f04f 0200 	mov.w	r2, #0
 8008078:	f04f 0300 	mov.w	r3, #0
 800807c:	00eb      	lsls	r3, r5, #3
 800807e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008082:	00e2      	lsls	r2, r4, #3
 8008084:	4614      	mov	r4, r2
 8008086:	461d      	mov	r5, r3
 8008088:	4643      	mov	r3, r8
 800808a:	18e3      	adds	r3, r4, r3
 800808c:	603b      	str	r3, [r7, #0]
 800808e:	464b      	mov	r3, r9
 8008090:	eb45 0303 	adc.w	r3, r5, r3
 8008094:	607b      	str	r3, [r7, #4]
 8008096:	f04f 0200 	mov.w	r2, #0
 800809a:	f04f 0300 	mov.w	r3, #0
 800809e:	e9d7 4500 	ldrd	r4, r5, [r7]
 80080a2:	4629      	mov	r1, r5
 80080a4:	028b      	lsls	r3, r1, #10
 80080a6:	4621      	mov	r1, r4
 80080a8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80080ac:	4621      	mov	r1, r4
 80080ae:	028a      	lsls	r2, r1, #10
 80080b0:	4610      	mov	r0, r2
 80080b2:	4619      	mov	r1, r3
 80080b4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80080b6:	2200      	movs	r2, #0
 80080b8:	61bb      	str	r3, [r7, #24]
 80080ba:	61fa      	str	r2, [r7, #28]
 80080bc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80080c0:	f7f8 fdea 	bl	8000c98 <__aeabi_uldivmod>
 80080c4:	4602      	mov	r2, r0
 80080c6:	460b      	mov	r3, r1
 80080c8:	4613      	mov	r3, r2
 80080ca:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80080cc:	4b0b      	ldr	r3, [pc, #44]	@ (80080fc <HAL_RCC_GetSysClockFreq+0x200>)
 80080ce:	685b      	ldr	r3, [r3, #4]
 80080d0:	0c1b      	lsrs	r3, r3, #16
 80080d2:	f003 0303 	and.w	r3, r3, #3
 80080d6:	3301      	adds	r3, #1
 80080d8:	005b      	lsls	r3, r3, #1
 80080da:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 80080dc:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80080de:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80080e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80080e4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80080e6:	e002      	b.n	80080ee <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80080e8:	4b05      	ldr	r3, [pc, #20]	@ (8008100 <HAL_RCC_GetSysClockFreq+0x204>)
 80080ea:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80080ec:	bf00      	nop
    }
  }
  return sysclockfreq;
 80080ee:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80080f0:	4618      	mov	r0, r3
 80080f2:	3750      	adds	r7, #80	@ 0x50
 80080f4:	46bd      	mov	sp, r7
 80080f6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80080fa:	bf00      	nop
 80080fc:	40023800 	.word	0x40023800
 8008100:	00f42400 	.word	0x00f42400
 8008104:	007a1200 	.word	0x007a1200

08008108 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008108:	b480      	push	{r7}
 800810a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800810c:	4b03      	ldr	r3, [pc, #12]	@ (800811c <HAL_RCC_GetHCLKFreq+0x14>)
 800810e:	681b      	ldr	r3, [r3, #0]
}
 8008110:	4618      	mov	r0, r3
 8008112:	46bd      	mov	sp, r7
 8008114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008118:	4770      	bx	lr
 800811a:	bf00      	nop
 800811c:	2000d114 	.word	0x2000d114

08008120 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008120:	b580      	push	{r7, lr}
 8008122:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8008124:	f7ff fff0 	bl	8008108 <HAL_RCC_GetHCLKFreq>
 8008128:	4602      	mov	r2, r0
 800812a:	4b05      	ldr	r3, [pc, #20]	@ (8008140 <HAL_RCC_GetPCLK1Freq+0x20>)
 800812c:	689b      	ldr	r3, [r3, #8]
 800812e:	0a9b      	lsrs	r3, r3, #10
 8008130:	f003 0307 	and.w	r3, r3, #7
 8008134:	4903      	ldr	r1, [pc, #12]	@ (8008144 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008136:	5ccb      	ldrb	r3, [r1, r3]
 8008138:	fa22 f303 	lsr.w	r3, r2, r3
}
 800813c:	4618      	mov	r0, r3
 800813e:	bd80      	pop	{r7, pc}
 8008140:	40023800 	.word	0x40023800
 8008144:	08010b08 	.word	0x08010b08

08008148 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008148:	b580      	push	{r7, lr}
 800814a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800814c:	f7ff ffdc 	bl	8008108 <HAL_RCC_GetHCLKFreq>
 8008150:	4602      	mov	r2, r0
 8008152:	4b05      	ldr	r3, [pc, #20]	@ (8008168 <HAL_RCC_GetPCLK2Freq+0x20>)
 8008154:	689b      	ldr	r3, [r3, #8]
 8008156:	0b5b      	lsrs	r3, r3, #13
 8008158:	f003 0307 	and.w	r3, r3, #7
 800815c:	4903      	ldr	r1, [pc, #12]	@ (800816c <HAL_RCC_GetPCLK2Freq+0x24>)
 800815e:	5ccb      	ldrb	r3, [r1, r3]
 8008160:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008164:	4618      	mov	r0, r3
 8008166:	bd80      	pop	{r7, pc}
 8008168:	40023800 	.word	0x40023800
 800816c:	08010b08 	.word	0x08010b08

08008170 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008170:	b580      	push	{r7, lr}
 8008172:	b086      	sub	sp, #24
 8008174:	af00      	add	r7, sp, #0
 8008176:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8008178:	2300      	movs	r3, #0
 800817a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 800817c:	2300      	movs	r3, #0
 800817e:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	f003 0301 	and.w	r3, r3, #1
 8008188:	2b00      	cmp	r3, #0
 800818a:	d105      	bne.n	8008198 <HAL_RCCEx_PeriphCLKConfig+0x28>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	f003 0304 	and.w	r3, r3, #4
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8008194:	2b00      	cmp	r3, #0
 8008196:	d038      	beq.n	800820a <HAL_RCCEx_PeriphCLKConfig+0x9a>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8008198:	4b68      	ldr	r3, [pc, #416]	@ (800833c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800819a:	2200      	movs	r2, #0
 800819c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800819e:	f7fd fa03 	bl	80055a8 <HAL_GetTick>
 80081a2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80081a4:	e008      	b.n	80081b8 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80081a6:	f7fd f9ff 	bl	80055a8 <HAL_GetTick>
 80081aa:	4602      	mov	r2, r0
 80081ac:	697b      	ldr	r3, [r7, #20]
 80081ae:	1ad3      	subs	r3, r2, r3
 80081b0:	2b02      	cmp	r3, #2
 80081b2:	d901      	bls.n	80081b8 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80081b4:	2303      	movs	r3, #3
 80081b6:	e0bd      	b.n	8008334 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80081b8:	4b61      	ldr	r3, [pc, #388]	@ (8008340 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80081c0:	2b00      	cmp	r3, #0
 80081c2:	d1f0      	bne.n	80081a6 <HAL_RCCEx_PeriphCLKConfig+0x36>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN,
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	685a      	ldr	r2, [r3, #4]
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	689b      	ldr	r3, [r3, #8]
 80081cc:	019b      	lsls	r3, r3, #6
 80081ce:	431a      	orrs	r2, r3
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	68db      	ldr	r3, [r3, #12]
 80081d4:	071b      	lsls	r3, r3, #28
 80081d6:	495a      	ldr	r1, [pc, #360]	@ (8008340 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80081d8:	4313      	orrs	r3, r2
 80081da:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80081de:	4b57      	ldr	r3, [pc, #348]	@ (800833c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80081e0:	2201      	movs	r2, #1
 80081e2:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80081e4:	f7fd f9e0 	bl	80055a8 <HAL_GetTick>
 80081e8:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80081ea:	e008      	b.n	80081fe <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80081ec:	f7fd f9dc 	bl	80055a8 <HAL_GetTick>
 80081f0:	4602      	mov	r2, r0
 80081f2:	697b      	ldr	r3, [r7, #20]
 80081f4:	1ad3      	subs	r3, r2, r3
 80081f6:	2b02      	cmp	r3, #2
 80081f8:	d901      	bls.n	80081fe <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80081fa:	2303      	movs	r3, #3
 80081fc:	e09a      	b.n	8008334 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80081fe:	4b50      	ldr	r3, [pc, #320]	@ (8008340 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008206:	2b00      	cmp	r3, #0
 8008208:	d0f0      	beq.n	80081ec <HAL_RCCEx_PeriphCLKConfig+0x7c>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	f003 0302 	and.w	r3, r3, #2
 8008212:	2b00      	cmp	r3, #0
 8008214:	f000 8083 	beq.w	800831e <HAL_RCCEx_PeriphCLKConfig+0x1ae>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8008218:	2300      	movs	r3, #0
 800821a:	60fb      	str	r3, [r7, #12]
 800821c:	4b48      	ldr	r3, [pc, #288]	@ (8008340 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800821e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008220:	4a47      	ldr	r2, [pc, #284]	@ (8008340 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008222:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008226:	6413      	str	r3, [r2, #64]	@ 0x40
 8008228:	4b45      	ldr	r3, [pc, #276]	@ (8008340 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800822a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800822c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008230:	60fb      	str	r3, [r7, #12]
 8008232:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8008234:	4b43      	ldr	r3, [pc, #268]	@ (8008344 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	4a42      	ldr	r2, [pc, #264]	@ (8008344 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800823a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800823e:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8008240:	f7fd f9b2 	bl	80055a8 <HAL_GetTick>
 8008244:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8008246:	e008      	b.n	800825a <HAL_RCCEx_PeriphCLKConfig+0xea>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008248:	f7fd f9ae 	bl	80055a8 <HAL_GetTick>
 800824c:	4602      	mov	r2, r0
 800824e:	697b      	ldr	r3, [r7, #20]
 8008250:	1ad3      	subs	r3, r2, r3
 8008252:	2b02      	cmp	r3, #2
 8008254:	d901      	bls.n	800825a <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        return HAL_TIMEOUT;
 8008256:	2303      	movs	r3, #3
 8008258:	e06c      	b.n	8008334 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 800825a:	4b3a      	ldr	r3, [pc, #232]	@ (8008344 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800825c:	681b      	ldr	r3, [r3, #0]
 800825e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008262:	2b00      	cmp	r3, #0
 8008264:	d0f0      	beq.n	8008248 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8008266:	4b36      	ldr	r3, [pc, #216]	@ (8008340 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008268:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800826a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800826e:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8008270:	693b      	ldr	r3, [r7, #16]
 8008272:	2b00      	cmp	r3, #0
 8008274:	d02f      	beq.n	80082d6 <HAL_RCCEx_PeriphCLKConfig+0x166>
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	691b      	ldr	r3, [r3, #16]
 800827a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800827e:	693a      	ldr	r2, [r7, #16]
 8008280:	429a      	cmp	r2, r3
 8008282:	d028      	beq.n	80082d6 <HAL_RCCEx_PeriphCLKConfig+0x166>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8008284:	4b2e      	ldr	r3, [pc, #184]	@ (8008340 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008286:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008288:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800828c:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800828e:	4b2e      	ldr	r3, [pc, #184]	@ (8008348 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8008290:	2201      	movs	r2, #1
 8008292:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8008294:	4b2c      	ldr	r3, [pc, #176]	@ (8008348 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8008296:	2200      	movs	r2, #0
 8008298:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800829a:	4a29      	ldr	r2, [pc, #164]	@ (8008340 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800829c:	693b      	ldr	r3, [r7, #16]
 800829e:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80082a0:	4b27      	ldr	r3, [pc, #156]	@ (8008340 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80082a2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80082a4:	f003 0301 	and.w	r3, r3, #1
 80082a8:	2b01      	cmp	r3, #1
 80082aa:	d114      	bne.n	80082d6 <HAL_RCCEx_PeriphCLKConfig+0x166>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80082ac:	f7fd f97c 	bl	80055a8 <HAL_GetTick>
 80082b0:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80082b2:	e00a      	b.n	80082ca <HAL_RCCEx_PeriphCLKConfig+0x15a>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80082b4:	f7fd f978 	bl	80055a8 <HAL_GetTick>
 80082b8:	4602      	mov	r2, r0
 80082ba:	697b      	ldr	r3, [r7, #20]
 80082bc:	1ad3      	subs	r3, r2, r3
 80082be:	f241 3288 	movw	r2, #5000	@ 0x1388
 80082c2:	4293      	cmp	r3, r2
 80082c4:	d901      	bls.n	80082ca <HAL_RCCEx_PeriphCLKConfig+0x15a>
          {
            return HAL_TIMEOUT;
 80082c6:	2303      	movs	r3, #3
 80082c8:	e034      	b.n	8008334 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80082ca:	4b1d      	ldr	r3, [pc, #116]	@ (8008340 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80082cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80082ce:	f003 0302 	and.w	r3, r3, #2
 80082d2:	2b00      	cmp	r3, #0
 80082d4:	d0ee      	beq.n	80082b4 <HAL_RCCEx_PeriphCLKConfig+0x144>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	691b      	ldr	r3, [r3, #16]
 80082da:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80082de:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80082e2:	d10d      	bne.n	8008300 <HAL_RCCEx_PeriphCLKConfig+0x190>
 80082e4:	4b16      	ldr	r3, [pc, #88]	@ (8008340 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80082e6:	689b      	ldr	r3, [r3, #8]
 80082e8:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	691b      	ldr	r3, [r3, #16]
 80082f0:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 80082f4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80082f8:	4911      	ldr	r1, [pc, #68]	@ (8008340 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80082fa:	4313      	orrs	r3, r2
 80082fc:	608b      	str	r3, [r1, #8]
 80082fe:	e005      	b.n	800830c <HAL_RCCEx_PeriphCLKConfig+0x19c>
 8008300:	4b0f      	ldr	r3, [pc, #60]	@ (8008340 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008302:	689b      	ldr	r3, [r3, #8]
 8008304:	4a0e      	ldr	r2, [pc, #56]	@ (8008340 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008306:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 800830a:	6093      	str	r3, [r2, #8]
 800830c:	4b0c      	ldr	r3, [pc, #48]	@ (8008340 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800830e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	691b      	ldr	r3, [r3, #16]
 8008314:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008318:	4909      	ldr	r1, [pc, #36]	@ (8008340 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800831a:	4313      	orrs	r3, r2
 800831c:	670b      	str	r3, [r1, #112]	@ 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	f003 0308 	and.w	r3, r3, #8
 8008326:	2b00      	cmp	r3, #0
 8008328:	d003      	beq.n	8008332 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	7d1a      	ldrb	r2, [r3, #20]
 800832e:	4b07      	ldr	r3, [pc, #28]	@ (800834c <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 8008330:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8008332:	2300      	movs	r3, #0
}
 8008334:	4618      	mov	r0, r3
 8008336:	3718      	adds	r7, #24
 8008338:	46bd      	mov	sp, r7
 800833a:	bd80      	pop	{r7, pc}
 800833c:	42470068 	.word	0x42470068
 8008340:	40023800 	.word	0x40023800
 8008344:	40007000 	.word	0x40007000
 8008348:	42470e40 	.word	0x42470e40
 800834c:	424711e0 	.word	0x424711e0

08008350 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8008350:	b480      	push	{r7}
 8008352:	b087      	sub	sp, #28
 8008354:	af00      	add	r7, sp, #0
 8008356:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8008358:	2300      	movs	r3, #0
 800835a:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 800835c:	2300      	movs	r3, #0
 800835e:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8008360:	2300      	movs	r3, #0
 8008362:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8008364:	2300      	movs	r3, #0
 8008366:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	2b01      	cmp	r3, #1
 800836c:	d141      	bne.n	80083f2 <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
  {
    case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 800836e:	4b25      	ldr	r3, [pc, #148]	@ (8008404 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8008370:	689b      	ldr	r3, [r3, #8]
 8008372:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008376:	60fb      	str	r3, [r7, #12]
      switch (srcclk)
 8008378:	68fb      	ldr	r3, [r7, #12]
 800837a:	2b00      	cmp	r3, #0
 800837c:	d006      	beq.n	800838c <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
 800837e:	68fb      	ldr	r3, [r7, #12]
 8008380:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8008384:	d131      	bne.n	80083ea <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
      {
        /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
        case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8008386:	4b20      	ldr	r3, [pc, #128]	@ (8008408 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8008388:	617b      	str	r3, [r7, #20]
          break;
 800838a:	e031      	b.n	80083f0 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
        case RCC_I2SCLKSOURCE_PLLI2S:
        {
#if defined(STM32F411xE)
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
          if ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800838c:	4b1d      	ldr	r3, [pc, #116]	@ (8008404 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 800838e:	685b      	ldr	r3, [r3, #4]
 8008390:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008394:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008398:	d109      	bne.n	80083ae <HAL_RCCEx_GetPeriphCLKFreq+0x5e>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 800839a:	4b1a      	ldr	r3, [pc, #104]	@ (8008404 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 800839c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80083a0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80083a4:	4a19      	ldr	r2, [pc, #100]	@ (800840c <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
 80083a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80083aa:	613b      	str	r3, [r7, #16]
 80083ac:	e008      	b.n	80083c0 <HAL_RCCEx_GetPeriphCLKFreq+0x70>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 80083ae:	4b15      	ldr	r3, [pc, #84]	@ (8008404 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 80083b0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80083b4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80083b8:	4a15      	ldr	r2, [pc, #84]	@ (8008410 <HAL_RCCEx_GetPeriphCLKFreq+0xc0>)
 80083ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80083be:	613b      	str	r3, [r7, #16]
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 80083c0:	4b10      	ldr	r3, [pc, #64]	@ (8008404 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 80083c2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80083c6:	099b      	lsrs	r3, r3, #6
 80083c8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80083cc:	693b      	ldr	r3, [r7, #16]
 80083ce:	fb02 f303 	mul.w	r3, r2, r3
 80083d2:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput / (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 80083d4:	4b0b      	ldr	r3, [pc, #44]	@ (8008404 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 80083d6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80083da:	0f1b      	lsrs	r3, r3, #28
 80083dc:	f003 0307 	and.w	r3, r3, #7
 80083e0:	68ba      	ldr	r2, [r7, #8]
 80083e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80083e6:	617b      	str	r3, [r7, #20]
          break;
 80083e8:	e002      	b.n	80083f0 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
        }
        /* Clock not enabled for I2S*/
        default:
        {
          frequency = 0U;
 80083ea:	2300      	movs	r3, #0
 80083ec:	617b      	str	r3, [r7, #20]
          break;
 80083ee:	bf00      	nop
        }
      }
      break;
 80083f0:	e000      	b.n	80083f4 <HAL_RCCEx_GetPeriphCLKFreq+0xa4>
    }
    default:
    {
      break;
 80083f2:	bf00      	nop
    }
  }
  return frequency;
 80083f4:	697b      	ldr	r3, [r7, #20]
}
 80083f6:	4618      	mov	r0, r3
 80083f8:	371c      	adds	r7, #28
 80083fa:	46bd      	mov	sp, r7
 80083fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008400:	4770      	bx	lr
 8008402:	bf00      	nop
 8008404:	40023800 	.word	0x40023800
 8008408:	00bb8000 	.word	0x00bb8000
 800840c:	007a1200 	.word	0x007a1200
 8008410:	00f42400 	.word	0x00f42400

08008414 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008414:	b580      	push	{r7, lr}
 8008416:	b082      	sub	sp, #8
 8008418:	af00      	add	r7, sp, #0
 800841a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	2b00      	cmp	r3, #0
 8008420:	d101      	bne.n	8008426 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8008422:	2301      	movs	r3, #1
 8008424:	e07b      	b.n	800851e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800842a:	2b00      	cmp	r3, #0
 800842c:	d108      	bne.n	8008440 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	685b      	ldr	r3, [r3, #4]
 8008432:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8008436:	d009      	beq.n	800844c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	2200      	movs	r2, #0
 800843c:	61da      	str	r2, [r3, #28]
 800843e:	e005      	b.n	800844c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	2200      	movs	r2, #0
 8008444:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	2200      	movs	r2, #0
 800844a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	2200      	movs	r2, #0
 8008450:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8008458:	b2db      	uxtb	r3, r3
 800845a:	2b00      	cmp	r3, #0
 800845c:	d106      	bne.n	800846c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	2200      	movs	r2, #0
 8008462:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8008466:	6878      	ldr	r0, [r7, #4]
 8008468:	f7fc fab8 	bl	80049dc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	2202      	movs	r2, #2
 8008470:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	681a      	ldr	r2, [r3, #0]
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	681b      	ldr	r3, [r3, #0]
 800847e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008482:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	685b      	ldr	r3, [r3, #4]
 8008488:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	689b      	ldr	r3, [r3, #8]
 8008490:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8008494:	431a      	orrs	r2, r3
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	68db      	ldr	r3, [r3, #12]
 800849a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800849e:	431a      	orrs	r2, r3
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	691b      	ldr	r3, [r3, #16]
 80084a4:	f003 0302 	and.w	r3, r3, #2
 80084a8:	431a      	orrs	r2, r3
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	695b      	ldr	r3, [r3, #20]
 80084ae:	f003 0301 	and.w	r3, r3, #1
 80084b2:	431a      	orrs	r2, r3
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	699b      	ldr	r3, [r3, #24]
 80084b8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80084bc:	431a      	orrs	r2, r3
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	69db      	ldr	r3, [r3, #28]
 80084c2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80084c6:	431a      	orrs	r2, r3
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	6a1b      	ldr	r3, [r3, #32]
 80084cc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80084d0:	ea42 0103 	orr.w	r1, r2, r3
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80084d8:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	430a      	orrs	r2, r1
 80084e2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	699b      	ldr	r3, [r3, #24]
 80084e8:	0c1b      	lsrs	r3, r3, #16
 80084ea:	f003 0104 	and.w	r1, r3, #4
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80084f2:	f003 0210 	and.w	r2, r3, #16
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	681b      	ldr	r3, [r3, #0]
 80084fa:	430a      	orrs	r2, r1
 80084fc:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	681b      	ldr	r3, [r3, #0]
 8008502:	69da      	ldr	r2, [r3, #28]
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	681b      	ldr	r3, [r3, #0]
 8008508:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800850c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	2200      	movs	r2, #0
 8008512:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	2201      	movs	r2, #1
 8008518:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 800851c:	2300      	movs	r3, #0
}
 800851e:	4618      	mov	r0, r3
 8008520:	3708      	adds	r7, #8
 8008522:	46bd      	mov	sp, r7
 8008524:	bd80      	pop	{r7, pc}

08008526 <HAL_SPI_Transmit>:
  * @param  Size amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008526:	b580      	push	{r7, lr}
 8008528:	b088      	sub	sp, #32
 800852a:	af00      	add	r7, sp, #0
 800852c:	60f8      	str	r0, [r7, #12]
 800852e:	60b9      	str	r1, [r7, #8]
 8008530:	603b      	str	r3, [r7, #0]
 8008532:	4613      	mov	r3, r2
 8008534:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008536:	f7fd f837 	bl	80055a8 <HAL_GetTick>
 800853a:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 800853c:	88fb      	ldrh	r3, [r7, #6]
 800853e:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8008540:	68fb      	ldr	r3, [r7, #12]
 8008542:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8008546:	b2db      	uxtb	r3, r3
 8008548:	2b01      	cmp	r3, #1
 800854a:	d001      	beq.n	8008550 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 800854c:	2302      	movs	r3, #2
 800854e:	e12a      	b.n	80087a6 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8008550:	68bb      	ldr	r3, [r7, #8]
 8008552:	2b00      	cmp	r3, #0
 8008554:	d002      	beq.n	800855c <HAL_SPI_Transmit+0x36>
 8008556:	88fb      	ldrh	r3, [r7, #6]
 8008558:	2b00      	cmp	r3, #0
 800855a:	d101      	bne.n	8008560 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 800855c:	2301      	movs	r3, #1
 800855e:	e122      	b.n	80087a6 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008560:	68fb      	ldr	r3, [r7, #12]
 8008562:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8008566:	2b01      	cmp	r3, #1
 8008568:	d101      	bne.n	800856e <HAL_SPI_Transmit+0x48>
 800856a:	2302      	movs	r3, #2
 800856c:	e11b      	b.n	80087a6 <HAL_SPI_Transmit+0x280>
 800856e:	68fb      	ldr	r3, [r7, #12]
 8008570:	2201      	movs	r2, #1
 8008572:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8008576:	68fb      	ldr	r3, [r7, #12]
 8008578:	2203      	movs	r2, #3
 800857a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800857e:	68fb      	ldr	r3, [r7, #12]
 8008580:	2200      	movs	r2, #0
 8008582:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8008584:	68fb      	ldr	r3, [r7, #12]
 8008586:	68ba      	ldr	r2, [r7, #8]
 8008588:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 800858a:	68fb      	ldr	r3, [r7, #12]
 800858c:	88fa      	ldrh	r2, [r7, #6]
 800858e:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8008590:	68fb      	ldr	r3, [r7, #12]
 8008592:	88fa      	ldrh	r2, [r7, #6]
 8008594:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8008596:	68fb      	ldr	r3, [r7, #12]
 8008598:	2200      	movs	r2, #0
 800859a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 800859c:	68fb      	ldr	r3, [r7, #12]
 800859e:	2200      	movs	r2, #0
 80085a0:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 80085a2:	68fb      	ldr	r3, [r7, #12]
 80085a4:	2200      	movs	r2, #0
 80085a6:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 80085a8:	68fb      	ldr	r3, [r7, #12]
 80085aa:	2200      	movs	r2, #0
 80085ac:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 80085ae:	68fb      	ldr	r3, [r7, #12]
 80085b0:	2200      	movs	r2, #0
 80085b2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80085b4:	68fb      	ldr	r3, [r7, #12]
 80085b6:	689b      	ldr	r3, [r3, #8]
 80085b8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80085bc:	d10f      	bne.n	80085de <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80085be:	68fb      	ldr	r3, [r7, #12]
 80085c0:	681b      	ldr	r3, [r3, #0]
 80085c2:	681a      	ldr	r2, [r3, #0]
 80085c4:	68fb      	ldr	r3, [r7, #12]
 80085c6:	681b      	ldr	r3, [r3, #0]
 80085c8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80085cc:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80085ce:	68fb      	ldr	r3, [r7, #12]
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	681a      	ldr	r2, [r3, #0]
 80085d4:	68fb      	ldr	r3, [r7, #12]
 80085d6:	681b      	ldr	r3, [r3, #0]
 80085d8:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80085dc:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80085de:	68fb      	ldr	r3, [r7, #12]
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80085e8:	2b40      	cmp	r3, #64	@ 0x40
 80085ea:	d007      	beq.n	80085fc <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80085ec:	68fb      	ldr	r3, [r7, #12]
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	681a      	ldr	r2, [r3, #0]
 80085f2:	68fb      	ldr	r3, [r7, #12]
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80085fa:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80085fc:	68fb      	ldr	r3, [r7, #12]
 80085fe:	68db      	ldr	r3, [r3, #12]
 8008600:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008604:	d152      	bne.n	80086ac <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008606:	68fb      	ldr	r3, [r7, #12]
 8008608:	685b      	ldr	r3, [r3, #4]
 800860a:	2b00      	cmp	r3, #0
 800860c:	d002      	beq.n	8008614 <HAL_SPI_Transmit+0xee>
 800860e:	8b7b      	ldrh	r3, [r7, #26]
 8008610:	2b01      	cmp	r3, #1
 8008612:	d145      	bne.n	80086a0 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8008614:	68fb      	ldr	r3, [r7, #12]
 8008616:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008618:	881a      	ldrh	r2, [r3, #0]
 800861a:	68fb      	ldr	r3, [r7, #12]
 800861c:	681b      	ldr	r3, [r3, #0]
 800861e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8008620:	68fb      	ldr	r3, [r7, #12]
 8008622:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008624:	1c9a      	adds	r2, r3, #2
 8008626:	68fb      	ldr	r3, [r7, #12]
 8008628:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800862a:	68fb      	ldr	r3, [r7, #12]
 800862c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800862e:	b29b      	uxth	r3, r3
 8008630:	3b01      	subs	r3, #1
 8008632:	b29a      	uxth	r2, r3
 8008634:	68fb      	ldr	r3, [r7, #12]
 8008636:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8008638:	e032      	b.n	80086a0 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800863a:	68fb      	ldr	r3, [r7, #12]
 800863c:	681b      	ldr	r3, [r3, #0]
 800863e:	689b      	ldr	r3, [r3, #8]
 8008640:	f003 0302 	and.w	r3, r3, #2
 8008644:	2b02      	cmp	r3, #2
 8008646:	d112      	bne.n	800866e <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8008648:	68fb      	ldr	r3, [r7, #12]
 800864a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800864c:	881a      	ldrh	r2, [r3, #0]
 800864e:	68fb      	ldr	r3, [r7, #12]
 8008650:	681b      	ldr	r3, [r3, #0]
 8008652:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008654:	68fb      	ldr	r3, [r7, #12]
 8008656:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008658:	1c9a      	adds	r2, r3, #2
 800865a:	68fb      	ldr	r3, [r7, #12]
 800865c:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800865e:	68fb      	ldr	r3, [r7, #12]
 8008660:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008662:	b29b      	uxth	r3, r3
 8008664:	3b01      	subs	r3, #1
 8008666:	b29a      	uxth	r2, r3
 8008668:	68fb      	ldr	r3, [r7, #12]
 800866a:	86da      	strh	r2, [r3, #54]	@ 0x36
 800866c:	e018      	b.n	80086a0 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800866e:	f7fc ff9b 	bl	80055a8 <HAL_GetTick>
 8008672:	4602      	mov	r2, r0
 8008674:	69fb      	ldr	r3, [r7, #28]
 8008676:	1ad3      	subs	r3, r2, r3
 8008678:	683a      	ldr	r2, [r7, #0]
 800867a:	429a      	cmp	r2, r3
 800867c:	d803      	bhi.n	8008686 <HAL_SPI_Transmit+0x160>
 800867e:	683b      	ldr	r3, [r7, #0]
 8008680:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008684:	d102      	bne.n	800868c <HAL_SPI_Transmit+0x166>
 8008686:	683b      	ldr	r3, [r7, #0]
 8008688:	2b00      	cmp	r3, #0
 800868a:	d109      	bne.n	80086a0 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800868c:	68fb      	ldr	r3, [r7, #12]
 800868e:	2201      	movs	r2, #1
 8008690:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8008694:	68fb      	ldr	r3, [r7, #12]
 8008696:	2200      	movs	r2, #0
 8008698:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800869c:	2303      	movs	r3, #3
 800869e:	e082      	b.n	80087a6 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 80086a0:	68fb      	ldr	r3, [r7, #12]
 80086a2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80086a4:	b29b      	uxth	r3, r3
 80086a6:	2b00      	cmp	r3, #0
 80086a8:	d1c7      	bne.n	800863a <HAL_SPI_Transmit+0x114>
 80086aa:	e053      	b.n	8008754 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80086ac:	68fb      	ldr	r3, [r7, #12]
 80086ae:	685b      	ldr	r3, [r3, #4]
 80086b0:	2b00      	cmp	r3, #0
 80086b2:	d002      	beq.n	80086ba <HAL_SPI_Transmit+0x194>
 80086b4:	8b7b      	ldrh	r3, [r7, #26]
 80086b6:	2b01      	cmp	r3, #1
 80086b8:	d147      	bne.n	800874a <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80086ba:	68fb      	ldr	r3, [r7, #12]
 80086bc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80086be:	68fb      	ldr	r3, [r7, #12]
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	330c      	adds	r3, #12
 80086c4:	7812      	ldrb	r2, [r2, #0]
 80086c6:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80086c8:	68fb      	ldr	r3, [r7, #12]
 80086ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80086cc:	1c5a      	adds	r2, r3, #1
 80086ce:	68fb      	ldr	r3, [r7, #12]
 80086d0:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80086d2:	68fb      	ldr	r3, [r7, #12]
 80086d4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80086d6:	b29b      	uxth	r3, r3
 80086d8:	3b01      	subs	r3, #1
 80086da:	b29a      	uxth	r2, r3
 80086dc:	68fb      	ldr	r3, [r7, #12]
 80086de:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 80086e0:	e033      	b.n	800874a <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80086e2:	68fb      	ldr	r3, [r7, #12]
 80086e4:	681b      	ldr	r3, [r3, #0]
 80086e6:	689b      	ldr	r3, [r3, #8]
 80086e8:	f003 0302 	and.w	r3, r3, #2
 80086ec:	2b02      	cmp	r3, #2
 80086ee:	d113      	bne.n	8008718 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80086f0:	68fb      	ldr	r3, [r7, #12]
 80086f2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80086f4:	68fb      	ldr	r3, [r7, #12]
 80086f6:	681b      	ldr	r3, [r3, #0]
 80086f8:	330c      	adds	r3, #12
 80086fa:	7812      	ldrb	r2, [r2, #0]
 80086fc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80086fe:	68fb      	ldr	r3, [r7, #12]
 8008700:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008702:	1c5a      	adds	r2, r3, #1
 8008704:	68fb      	ldr	r3, [r7, #12]
 8008706:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8008708:	68fb      	ldr	r3, [r7, #12]
 800870a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800870c:	b29b      	uxth	r3, r3
 800870e:	3b01      	subs	r3, #1
 8008710:	b29a      	uxth	r2, r3
 8008712:	68fb      	ldr	r3, [r7, #12]
 8008714:	86da      	strh	r2, [r3, #54]	@ 0x36
 8008716:	e018      	b.n	800874a <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008718:	f7fc ff46 	bl	80055a8 <HAL_GetTick>
 800871c:	4602      	mov	r2, r0
 800871e:	69fb      	ldr	r3, [r7, #28]
 8008720:	1ad3      	subs	r3, r2, r3
 8008722:	683a      	ldr	r2, [r7, #0]
 8008724:	429a      	cmp	r2, r3
 8008726:	d803      	bhi.n	8008730 <HAL_SPI_Transmit+0x20a>
 8008728:	683b      	ldr	r3, [r7, #0]
 800872a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800872e:	d102      	bne.n	8008736 <HAL_SPI_Transmit+0x210>
 8008730:	683b      	ldr	r3, [r7, #0]
 8008732:	2b00      	cmp	r3, #0
 8008734:	d109      	bne.n	800874a <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8008736:	68fb      	ldr	r3, [r7, #12]
 8008738:	2201      	movs	r2, #1
 800873a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800873e:	68fb      	ldr	r3, [r7, #12]
 8008740:	2200      	movs	r2, #0
 8008742:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8008746:	2303      	movs	r3, #3
 8008748:	e02d      	b.n	80087a6 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 800874a:	68fb      	ldr	r3, [r7, #12]
 800874c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800874e:	b29b      	uxth	r3, r3
 8008750:	2b00      	cmp	r3, #0
 8008752:	d1c6      	bne.n	80086e2 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008754:	69fa      	ldr	r2, [r7, #28]
 8008756:	6839      	ldr	r1, [r7, #0]
 8008758:	68f8      	ldr	r0, [r7, #12]
 800875a:	f000 f8b1 	bl	80088c0 <SPI_EndRxTxTransaction>
 800875e:	4603      	mov	r3, r0
 8008760:	2b00      	cmp	r3, #0
 8008762:	d002      	beq.n	800876a <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008764:	68fb      	ldr	r3, [r7, #12]
 8008766:	2220      	movs	r2, #32
 8008768:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800876a:	68fb      	ldr	r3, [r7, #12]
 800876c:	689b      	ldr	r3, [r3, #8]
 800876e:	2b00      	cmp	r3, #0
 8008770:	d10a      	bne.n	8008788 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008772:	2300      	movs	r3, #0
 8008774:	617b      	str	r3, [r7, #20]
 8008776:	68fb      	ldr	r3, [r7, #12]
 8008778:	681b      	ldr	r3, [r3, #0]
 800877a:	68db      	ldr	r3, [r3, #12]
 800877c:	617b      	str	r3, [r7, #20]
 800877e:	68fb      	ldr	r3, [r7, #12]
 8008780:	681b      	ldr	r3, [r3, #0]
 8008782:	689b      	ldr	r3, [r3, #8]
 8008784:	617b      	str	r3, [r7, #20]
 8008786:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8008788:	68fb      	ldr	r3, [r7, #12]
 800878a:	2201      	movs	r2, #1
 800878c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8008790:	68fb      	ldr	r3, [r7, #12]
 8008792:	2200      	movs	r2, #0
 8008794:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008798:	68fb      	ldr	r3, [r7, #12]
 800879a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800879c:	2b00      	cmp	r3, #0
 800879e:	d001      	beq.n	80087a4 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 80087a0:	2301      	movs	r3, #1
 80087a2:	e000      	b.n	80087a6 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 80087a4:	2300      	movs	r3, #0
  }
}
 80087a6:	4618      	mov	r0, r3
 80087a8:	3720      	adds	r7, #32
 80087aa:	46bd      	mov	sp, r7
 80087ac:	bd80      	pop	{r7, pc}
	...

080087b0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80087b0:	b580      	push	{r7, lr}
 80087b2:	b088      	sub	sp, #32
 80087b4:	af00      	add	r7, sp, #0
 80087b6:	60f8      	str	r0, [r7, #12]
 80087b8:	60b9      	str	r1, [r7, #8]
 80087ba:	603b      	str	r3, [r7, #0]
 80087bc:	4613      	mov	r3, r2
 80087be:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80087c0:	f7fc fef2 	bl	80055a8 <HAL_GetTick>
 80087c4:	4602      	mov	r2, r0
 80087c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80087c8:	1a9b      	subs	r3, r3, r2
 80087ca:	683a      	ldr	r2, [r7, #0]
 80087cc:	4413      	add	r3, r2
 80087ce:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80087d0:	f7fc feea 	bl	80055a8 <HAL_GetTick>
 80087d4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80087d6:	4b39      	ldr	r3, [pc, #228]	@ (80088bc <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80087d8:	681b      	ldr	r3, [r3, #0]
 80087da:	015b      	lsls	r3, r3, #5
 80087dc:	0d1b      	lsrs	r3, r3, #20
 80087de:	69fa      	ldr	r2, [r7, #28]
 80087e0:	fb02 f303 	mul.w	r3, r2, r3
 80087e4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80087e6:	e055      	b.n	8008894 <SPI_WaitFlagStateUntilTimeout+0xe4>
  {
    if (Timeout != HAL_MAX_DELAY)
 80087e8:	683b      	ldr	r3, [r7, #0]
 80087ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80087ee:	d051      	beq.n	8008894 <SPI_WaitFlagStateUntilTimeout+0xe4>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80087f0:	f7fc feda 	bl	80055a8 <HAL_GetTick>
 80087f4:	4602      	mov	r2, r0
 80087f6:	69bb      	ldr	r3, [r7, #24]
 80087f8:	1ad3      	subs	r3, r2, r3
 80087fa:	69fa      	ldr	r2, [r7, #28]
 80087fc:	429a      	cmp	r2, r3
 80087fe:	d902      	bls.n	8008806 <SPI_WaitFlagStateUntilTimeout+0x56>
 8008800:	69fb      	ldr	r3, [r7, #28]
 8008802:	2b00      	cmp	r3, #0
 8008804:	d13d      	bne.n	8008882 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8008806:	68fb      	ldr	r3, [r7, #12]
 8008808:	681b      	ldr	r3, [r3, #0]
 800880a:	685a      	ldr	r2, [r3, #4]
 800880c:	68fb      	ldr	r3, [r7, #12]
 800880e:	681b      	ldr	r3, [r3, #0]
 8008810:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8008814:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008816:	68fb      	ldr	r3, [r7, #12]
 8008818:	685b      	ldr	r3, [r3, #4]
 800881a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800881e:	d111      	bne.n	8008844 <SPI_WaitFlagStateUntilTimeout+0x94>
 8008820:	68fb      	ldr	r3, [r7, #12]
 8008822:	689b      	ldr	r3, [r3, #8]
 8008824:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008828:	d004      	beq.n	8008834 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800882a:	68fb      	ldr	r3, [r7, #12]
 800882c:	689b      	ldr	r3, [r3, #8]
 800882e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008832:	d107      	bne.n	8008844 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8008834:	68fb      	ldr	r3, [r7, #12]
 8008836:	681b      	ldr	r3, [r3, #0]
 8008838:	681a      	ldr	r2, [r3, #0]
 800883a:	68fb      	ldr	r3, [r7, #12]
 800883c:	681b      	ldr	r3, [r3, #0]
 800883e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008842:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008844:	68fb      	ldr	r3, [r7, #12]
 8008846:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008848:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800884c:	d10f      	bne.n	800886e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800884e:	68fb      	ldr	r3, [r7, #12]
 8008850:	681b      	ldr	r3, [r3, #0]
 8008852:	681a      	ldr	r2, [r3, #0]
 8008854:	68fb      	ldr	r3, [r7, #12]
 8008856:	681b      	ldr	r3, [r3, #0]
 8008858:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800885c:	601a      	str	r2, [r3, #0]
 800885e:	68fb      	ldr	r3, [r7, #12]
 8008860:	681b      	ldr	r3, [r3, #0]
 8008862:	681a      	ldr	r2, [r3, #0]
 8008864:	68fb      	ldr	r3, [r7, #12]
 8008866:	681b      	ldr	r3, [r3, #0]
 8008868:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800886c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800886e:	68fb      	ldr	r3, [r7, #12]
 8008870:	2201      	movs	r2, #1
 8008872:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8008876:	68fb      	ldr	r3, [r7, #12]
 8008878:	2200      	movs	r2, #0
 800887a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 800887e:	2303      	movs	r3, #3
 8008880:	e018      	b.n	80088b4 <SPI_WaitFlagStateUntilTimeout+0x104>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8008882:	697b      	ldr	r3, [r7, #20]
 8008884:	2b00      	cmp	r3, #0
 8008886:	d102      	bne.n	800888e <SPI_WaitFlagStateUntilTimeout+0xde>
      {
        tmp_timeout = 0U;
 8008888:	2300      	movs	r3, #0
 800888a:	61fb      	str	r3, [r7, #28]
 800888c:	e002      	b.n	8008894 <SPI_WaitFlagStateUntilTimeout+0xe4>
      }
      else
      {
        count--;
 800888e:	697b      	ldr	r3, [r7, #20]
 8008890:	3b01      	subs	r3, #1
 8008892:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008894:	68fb      	ldr	r3, [r7, #12]
 8008896:	681b      	ldr	r3, [r3, #0]
 8008898:	689a      	ldr	r2, [r3, #8]
 800889a:	68bb      	ldr	r3, [r7, #8]
 800889c:	4013      	ands	r3, r2
 800889e:	68ba      	ldr	r2, [r7, #8]
 80088a0:	429a      	cmp	r2, r3
 80088a2:	bf0c      	ite	eq
 80088a4:	2301      	moveq	r3, #1
 80088a6:	2300      	movne	r3, #0
 80088a8:	b2db      	uxtb	r3, r3
 80088aa:	461a      	mov	r2, r3
 80088ac:	79fb      	ldrb	r3, [r7, #7]
 80088ae:	429a      	cmp	r2, r3
 80088b0:	d19a      	bne.n	80087e8 <SPI_WaitFlagStateUntilTimeout+0x38>
      }
    }
  }

  return HAL_OK;
 80088b2:	2300      	movs	r3, #0
}
 80088b4:	4618      	mov	r0, r3
 80088b6:	3720      	adds	r7, #32
 80088b8:	46bd      	mov	sp, r7
 80088ba:	bd80      	pop	{r7, pc}
 80088bc:	2000d114 	.word	0x2000d114

080088c0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80088c0:	b580      	push	{r7, lr}
 80088c2:	b088      	sub	sp, #32
 80088c4:	af02      	add	r7, sp, #8
 80088c6:	60f8      	str	r0, [r7, #12]
 80088c8:	60b9      	str	r1, [r7, #8]
 80088ca:	607a      	str	r2, [r7, #4]
  __IO uint32_t count;

  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	9300      	str	r3, [sp, #0]
 80088d0:	68bb      	ldr	r3, [r7, #8]
 80088d2:	2201      	movs	r2, #1
 80088d4:	2102      	movs	r1, #2
 80088d6:	68f8      	ldr	r0, [r7, #12]
 80088d8:	f7ff ff6a 	bl	80087b0 <SPI_WaitFlagStateUntilTimeout>
 80088dc:	4603      	mov	r3, r0
 80088de:	2b00      	cmp	r3, #0
 80088e0:	d007      	beq.n	80088f2 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80088e2:	68fb      	ldr	r3, [r7, #12]
 80088e4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80088e6:	f043 0220 	orr.w	r2, r3, #32
 80088ea:	68fb      	ldr	r3, [r7, #12]
 80088ec:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 80088ee:	2303      	movs	r3, #3
 80088f0:	e032      	b.n	8008958 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in us */
  count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80088f2:	4b1b      	ldr	r3, [pc, #108]	@ (8008960 <SPI_EndRxTxTransaction+0xa0>)
 80088f4:	681b      	ldr	r3, [r3, #0]
 80088f6:	4a1b      	ldr	r2, [pc, #108]	@ (8008964 <SPI_EndRxTxTransaction+0xa4>)
 80088f8:	fba2 2303 	umull	r2, r3, r2, r3
 80088fc:	0d5b      	lsrs	r3, r3, #21
 80088fe:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8008902:	fb02 f303 	mul.w	r3, r2, r3
 8008906:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008908:	68fb      	ldr	r3, [r7, #12]
 800890a:	685b      	ldr	r3, [r3, #4]
 800890c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8008910:	d112      	bne.n	8008938 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	9300      	str	r3, [sp, #0]
 8008916:	68bb      	ldr	r3, [r7, #8]
 8008918:	2200      	movs	r2, #0
 800891a:	2180      	movs	r1, #128	@ 0x80
 800891c:	68f8      	ldr	r0, [r7, #12]
 800891e:	f7ff ff47 	bl	80087b0 <SPI_WaitFlagStateUntilTimeout>
 8008922:	4603      	mov	r3, r0
 8008924:	2b00      	cmp	r3, #0
 8008926:	d016      	beq.n	8008956 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008928:	68fb      	ldr	r3, [r7, #12]
 800892a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800892c:	f043 0220 	orr.w	r2, r3, #32
 8008930:	68fb      	ldr	r3, [r7, #12]
 8008932:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8008934:	2303      	movs	r3, #3
 8008936:	e00f      	b.n	8008958 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8008938:	697b      	ldr	r3, [r7, #20]
 800893a:	2b00      	cmp	r3, #0
 800893c:	d00a      	beq.n	8008954 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 800893e:	697b      	ldr	r3, [r7, #20]
 8008940:	3b01      	subs	r3, #1
 8008942:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8008944:	68fb      	ldr	r3, [r7, #12]
 8008946:	681b      	ldr	r3, [r3, #0]
 8008948:	689b      	ldr	r3, [r3, #8]
 800894a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800894e:	2b80      	cmp	r3, #128	@ 0x80
 8008950:	d0f2      	beq.n	8008938 <SPI_EndRxTxTransaction+0x78>
 8008952:	e000      	b.n	8008956 <SPI_EndRxTxTransaction+0x96>
        break;
 8008954:	bf00      	nop
  }

  return HAL_OK;
 8008956:	2300      	movs	r3, #0
}
 8008958:	4618      	mov	r0, r3
 800895a:	3718      	adds	r7, #24
 800895c:	46bd      	mov	sp, r7
 800895e:	bd80      	pop	{r7, pc}
 8008960:	2000d114 	.word	0x2000d114
 8008964:	165e9f81 	.word	0x165e9f81

08008968 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008968:	b580      	push	{r7, lr}
 800896a:	b082      	sub	sp, #8
 800896c:	af00      	add	r7, sp, #0
 800896e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	2b00      	cmp	r3, #0
 8008974:	d101      	bne.n	800897a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008976:	2301      	movs	r3, #1
 8008978:	e041      	b.n	80089fe <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008980:	b2db      	uxtb	r3, r3
 8008982:	2b00      	cmp	r3, #0
 8008984:	d106      	bne.n	8008994 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	2200      	movs	r2, #0
 800898a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800898e:	6878      	ldr	r0, [r7, #4]
 8008990:	f7fc fb88 	bl	80050a4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	2202      	movs	r2, #2
 8008998:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	681a      	ldr	r2, [r3, #0]
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	3304      	adds	r3, #4
 80089a4:	4619      	mov	r1, r3
 80089a6:	4610      	mov	r0, r2
 80089a8:	f000 fd10 	bl	80093cc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	2201      	movs	r2, #1
 80089b0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	2201      	movs	r2, #1
 80089b8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	2201      	movs	r2, #1
 80089c0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	2201      	movs	r2, #1
 80089c8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	2201      	movs	r2, #1
 80089d0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	2201      	movs	r2, #1
 80089d8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	2201      	movs	r2, #1
 80089e0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	2201      	movs	r2, #1
 80089e8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	2201      	movs	r2, #1
 80089f0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	2201      	movs	r2, #1
 80089f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80089fc:	2300      	movs	r3, #0
}
 80089fe:	4618      	mov	r0, r3
 8008a00:	3708      	adds	r7, #8
 8008a02:	46bd      	mov	sp, r7
 8008a04:	bd80      	pop	{r7, pc}
	...

08008a08 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008a08:	b480      	push	{r7}
 8008a0a:	b085      	sub	sp, #20
 8008a0c:	af00      	add	r7, sp, #0
 8008a0e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008a16:	b2db      	uxtb	r3, r3
 8008a18:	2b01      	cmp	r3, #1
 8008a1a:	d001      	beq.n	8008a20 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008a1c:	2301      	movs	r3, #1
 8008a1e:	e044      	b.n	8008aaa <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	2202      	movs	r2, #2
 8008a24:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	681b      	ldr	r3, [r3, #0]
 8008a2c:	68da      	ldr	r2, [r3, #12]
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	681b      	ldr	r3, [r3, #0]
 8008a32:	f042 0201 	orr.w	r2, r2, #1
 8008a36:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	681b      	ldr	r3, [r3, #0]
 8008a3c:	4a1e      	ldr	r2, [pc, #120]	@ (8008ab8 <HAL_TIM_Base_Start_IT+0xb0>)
 8008a3e:	4293      	cmp	r3, r2
 8008a40:	d018      	beq.n	8008a74 <HAL_TIM_Base_Start_IT+0x6c>
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	681b      	ldr	r3, [r3, #0]
 8008a46:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008a4a:	d013      	beq.n	8008a74 <HAL_TIM_Base_Start_IT+0x6c>
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	681b      	ldr	r3, [r3, #0]
 8008a50:	4a1a      	ldr	r2, [pc, #104]	@ (8008abc <HAL_TIM_Base_Start_IT+0xb4>)
 8008a52:	4293      	cmp	r3, r2
 8008a54:	d00e      	beq.n	8008a74 <HAL_TIM_Base_Start_IT+0x6c>
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	681b      	ldr	r3, [r3, #0]
 8008a5a:	4a19      	ldr	r2, [pc, #100]	@ (8008ac0 <HAL_TIM_Base_Start_IT+0xb8>)
 8008a5c:	4293      	cmp	r3, r2
 8008a5e:	d009      	beq.n	8008a74 <HAL_TIM_Base_Start_IT+0x6c>
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	681b      	ldr	r3, [r3, #0]
 8008a64:	4a17      	ldr	r2, [pc, #92]	@ (8008ac4 <HAL_TIM_Base_Start_IT+0xbc>)
 8008a66:	4293      	cmp	r3, r2
 8008a68:	d004      	beq.n	8008a74 <HAL_TIM_Base_Start_IT+0x6c>
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	681b      	ldr	r3, [r3, #0]
 8008a6e:	4a16      	ldr	r2, [pc, #88]	@ (8008ac8 <HAL_TIM_Base_Start_IT+0xc0>)
 8008a70:	4293      	cmp	r3, r2
 8008a72:	d111      	bne.n	8008a98 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	681b      	ldr	r3, [r3, #0]
 8008a78:	689b      	ldr	r3, [r3, #8]
 8008a7a:	f003 0307 	and.w	r3, r3, #7
 8008a7e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008a80:	68fb      	ldr	r3, [r7, #12]
 8008a82:	2b06      	cmp	r3, #6
 8008a84:	d010      	beq.n	8008aa8 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	681b      	ldr	r3, [r3, #0]
 8008a8a:	681a      	ldr	r2, [r3, #0]
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	681b      	ldr	r3, [r3, #0]
 8008a90:	f042 0201 	orr.w	r2, r2, #1
 8008a94:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008a96:	e007      	b.n	8008aa8 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	681b      	ldr	r3, [r3, #0]
 8008a9c:	681a      	ldr	r2, [r3, #0]
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	681b      	ldr	r3, [r3, #0]
 8008aa2:	f042 0201 	orr.w	r2, r2, #1
 8008aa6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008aa8:	2300      	movs	r3, #0
}
 8008aaa:	4618      	mov	r0, r3
 8008aac:	3714      	adds	r7, #20
 8008aae:	46bd      	mov	sp, r7
 8008ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ab4:	4770      	bx	lr
 8008ab6:	bf00      	nop
 8008ab8:	40010000 	.word	0x40010000
 8008abc:	40000400 	.word	0x40000400
 8008ac0:	40000800 	.word	0x40000800
 8008ac4:	40000c00 	.word	0x40000c00
 8008ac8:	40014000 	.word	0x40014000

08008acc <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8008acc:	b480      	push	{r7}
 8008ace:	b083      	sub	sp, #12
 8008ad0:	af00      	add	r7, sp, #0
 8008ad2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	681b      	ldr	r3, [r3, #0]
 8008ad8:	68da      	ldr	r2, [r3, #12]
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	681b      	ldr	r3, [r3, #0]
 8008ade:	f022 0201 	bic.w	r2, r2, #1
 8008ae2:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	6a1a      	ldr	r2, [r3, #32]
 8008aea:	f241 1311 	movw	r3, #4369	@ 0x1111
 8008aee:	4013      	ands	r3, r2
 8008af0:	2b00      	cmp	r3, #0
 8008af2:	d10f      	bne.n	8008b14 <HAL_TIM_Base_Stop_IT+0x48>
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	681b      	ldr	r3, [r3, #0]
 8008af8:	6a1a      	ldr	r2, [r3, #32]
 8008afa:	f240 4344 	movw	r3, #1092	@ 0x444
 8008afe:	4013      	ands	r3, r2
 8008b00:	2b00      	cmp	r3, #0
 8008b02:	d107      	bne.n	8008b14 <HAL_TIM_Base_Stop_IT+0x48>
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	681a      	ldr	r2, [r3, #0]
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	681b      	ldr	r3, [r3, #0]
 8008b0e:	f022 0201 	bic.w	r2, r2, #1
 8008b12:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	2201      	movs	r2, #1
 8008b18:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 8008b1c:	2300      	movs	r3, #0
}
 8008b1e:	4618      	mov	r0, r3
 8008b20:	370c      	adds	r7, #12
 8008b22:	46bd      	mov	sp, r7
 8008b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b28:	4770      	bx	lr

08008b2a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8008b2a:	b580      	push	{r7, lr}
 8008b2c:	b082      	sub	sp, #8
 8008b2e:	af00      	add	r7, sp, #0
 8008b30:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	2b00      	cmp	r3, #0
 8008b36:	d101      	bne.n	8008b3c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8008b38:	2301      	movs	r3, #1
 8008b3a:	e041      	b.n	8008bc0 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008b42:	b2db      	uxtb	r3, r3
 8008b44:	2b00      	cmp	r3, #0
 8008b46:	d106      	bne.n	8008b56 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	2200      	movs	r2, #0
 8008b4c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8008b50:	6878      	ldr	r0, [r7, #4]
 8008b52:	f000 f839 	bl	8008bc8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	2202      	movs	r2, #2
 8008b5a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	681a      	ldr	r2, [r3, #0]
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	3304      	adds	r3, #4
 8008b66:	4619      	mov	r1, r3
 8008b68:	4610      	mov	r0, r2
 8008b6a:	f000 fc2f 	bl	80093cc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	2201      	movs	r2, #1
 8008b72:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	2201      	movs	r2, #1
 8008b7a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	2201      	movs	r2, #1
 8008b82:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	2201      	movs	r2, #1
 8008b8a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	2201      	movs	r2, #1
 8008b92:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	2201      	movs	r2, #1
 8008b9a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	2201      	movs	r2, #1
 8008ba2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	2201      	movs	r2, #1
 8008baa:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	2201      	movs	r2, #1
 8008bb2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	2201      	movs	r2, #1
 8008bba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8008bbe:	2300      	movs	r3, #0
}
 8008bc0:	4618      	mov	r0, r3
 8008bc2:	3708      	adds	r7, #8
 8008bc4:	46bd      	mov	sp, r7
 8008bc6:	bd80      	pop	{r7, pc}

08008bc8 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8008bc8:	b480      	push	{r7}
 8008bca:	b083      	sub	sp, #12
 8008bcc:	af00      	add	r7, sp, #0
 8008bce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8008bd0:	bf00      	nop
 8008bd2:	370c      	adds	r7, #12
 8008bd4:	46bd      	mov	sp, r7
 8008bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bda:	4770      	bx	lr

08008bdc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008bdc:	b580      	push	{r7, lr}
 8008bde:	b084      	sub	sp, #16
 8008be0:	af00      	add	r7, sp, #0
 8008be2:	6078      	str	r0, [r7, #4]
 8008be4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8008be6:	683b      	ldr	r3, [r7, #0]
 8008be8:	2b00      	cmp	r3, #0
 8008bea:	d109      	bne.n	8008c00 <HAL_TIM_PWM_Start+0x24>
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8008bf2:	b2db      	uxtb	r3, r3
 8008bf4:	2b01      	cmp	r3, #1
 8008bf6:	bf14      	ite	ne
 8008bf8:	2301      	movne	r3, #1
 8008bfa:	2300      	moveq	r3, #0
 8008bfc:	b2db      	uxtb	r3, r3
 8008bfe:	e022      	b.n	8008c46 <HAL_TIM_PWM_Start+0x6a>
 8008c00:	683b      	ldr	r3, [r7, #0]
 8008c02:	2b04      	cmp	r3, #4
 8008c04:	d109      	bne.n	8008c1a <HAL_TIM_PWM_Start+0x3e>
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8008c0c:	b2db      	uxtb	r3, r3
 8008c0e:	2b01      	cmp	r3, #1
 8008c10:	bf14      	ite	ne
 8008c12:	2301      	movne	r3, #1
 8008c14:	2300      	moveq	r3, #0
 8008c16:	b2db      	uxtb	r3, r3
 8008c18:	e015      	b.n	8008c46 <HAL_TIM_PWM_Start+0x6a>
 8008c1a:	683b      	ldr	r3, [r7, #0]
 8008c1c:	2b08      	cmp	r3, #8
 8008c1e:	d109      	bne.n	8008c34 <HAL_TIM_PWM_Start+0x58>
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8008c26:	b2db      	uxtb	r3, r3
 8008c28:	2b01      	cmp	r3, #1
 8008c2a:	bf14      	ite	ne
 8008c2c:	2301      	movne	r3, #1
 8008c2e:	2300      	moveq	r3, #0
 8008c30:	b2db      	uxtb	r3, r3
 8008c32:	e008      	b.n	8008c46 <HAL_TIM_PWM_Start+0x6a>
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008c3a:	b2db      	uxtb	r3, r3
 8008c3c:	2b01      	cmp	r3, #1
 8008c3e:	bf14      	ite	ne
 8008c40:	2301      	movne	r3, #1
 8008c42:	2300      	moveq	r3, #0
 8008c44:	b2db      	uxtb	r3, r3
 8008c46:	2b00      	cmp	r3, #0
 8008c48:	d001      	beq.n	8008c4e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8008c4a:	2301      	movs	r3, #1
 8008c4c:	e068      	b.n	8008d20 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008c4e:	683b      	ldr	r3, [r7, #0]
 8008c50:	2b00      	cmp	r3, #0
 8008c52:	d104      	bne.n	8008c5e <HAL_TIM_PWM_Start+0x82>
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	2202      	movs	r2, #2
 8008c58:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008c5c:	e013      	b.n	8008c86 <HAL_TIM_PWM_Start+0xaa>
 8008c5e:	683b      	ldr	r3, [r7, #0]
 8008c60:	2b04      	cmp	r3, #4
 8008c62:	d104      	bne.n	8008c6e <HAL_TIM_PWM_Start+0x92>
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	2202      	movs	r2, #2
 8008c68:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008c6c:	e00b      	b.n	8008c86 <HAL_TIM_PWM_Start+0xaa>
 8008c6e:	683b      	ldr	r3, [r7, #0]
 8008c70:	2b08      	cmp	r3, #8
 8008c72:	d104      	bne.n	8008c7e <HAL_TIM_PWM_Start+0xa2>
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	2202      	movs	r2, #2
 8008c78:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008c7c:	e003      	b.n	8008c86 <HAL_TIM_PWM_Start+0xaa>
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	2202      	movs	r2, #2
 8008c82:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	681b      	ldr	r3, [r3, #0]
 8008c8a:	2201      	movs	r2, #1
 8008c8c:	6839      	ldr	r1, [r7, #0]
 8008c8e:	4618      	mov	r0, r3
 8008c90:	f000 fe48 	bl	8009924 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	681b      	ldr	r3, [r3, #0]
 8008c98:	4a23      	ldr	r2, [pc, #140]	@ (8008d28 <HAL_TIM_PWM_Start+0x14c>)
 8008c9a:	4293      	cmp	r3, r2
 8008c9c:	d107      	bne.n	8008cae <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	681b      	ldr	r3, [r3, #0]
 8008ca2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	681b      	ldr	r3, [r3, #0]
 8008ca8:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8008cac:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	681b      	ldr	r3, [r3, #0]
 8008cb2:	4a1d      	ldr	r2, [pc, #116]	@ (8008d28 <HAL_TIM_PWM_Start+0x14c>)
 8008cb4:	4293      	cmp	r3, r2
 8008cb6:	d018      	beq.n	8008cea <HAL_TIM_PWM_Start+0x10e>
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	681b      	ldr	r3, [r3, #0]
 8008cbc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008cc0:	d013      	beq.n	8008cea <HAL_TIM_PWM_Start+0x10e>
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	681b      	ldr	r3, [r3, #0]
 8008cc6:	4a19      	ldr	r2, [pc, #100]	@ (8008d2c <HAL_TIM_PWM_Start+0x150>)
 8008cc8:	4293      	cmp	r3, r2
 8008cca:	d00e      	beq.n	8008cea <HAL_TIM_PWM_Start+0x10e>
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	681b      	ldr	r3, [r3, #0]
 8008cd0:	4a17      	ldr	r2, [pc, #92]	@ (8008d30 <HAL_TIM_PWM_Start+0x154>)
 8008cd2:	4293      	cmp	r3, r2
 8008cd4:	d009      	beq.n	8008cea <HAL_TIM_PWM_Start+0x10e>
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	681b      	ldr	r3, [r3, #0]
 8008cda:	4a16      	ldr	r2, [pc, #88]	@ (8008d34 <HAL_TIM_PWM_Start+0x158>)
 8008cdc:	4293      	cmp	r3, r2
 8008cde:	d004      	beq.n	8008cea <HAL_TIM_PWM_Start+0x10e>
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	681b      	ldr	r3, [r3, #0]
 8008ce4:	4a14      	ldr	r2, [pc, #80]	@ (8008d38 <HAL_TIM_PWM_Start+0x15c>)
 8008ce6:	4293      	cmp	r3, r2
 8008ce8:	d111      	bne.n	8008d0e <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	681b      	ldr	r3, [r3, #0]
 8008cee:	689b      	ldr	r3, [r3, #8]
 8008cf0:	f003 0307 	and.w	r3, r3, #7
 8008cf4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008cf6:	68fb      	ldr	r3, [r7, #12]
 8008cf8:	2b06      	cmp	r3, #6
 8008cfa:	d010      	beq.n	8008d1e <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	681b      	ldr	r3, [r3, #0]
 8008d00:	681a      	ldr	r2, [r3, #0]
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	681b      	ldr	r3, [r3, #0]
 8008d06:	f042 0201 	orr.w	r2, r2, #1
 8008d0a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008d0c:	e007      	b.n	8008d1e <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	681b      	ldr	r3, [r3, #0]
 8008d12:	681a      	ldr	r2, [r3, #0]
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	681b      	ldr	r3, [r3, #0]
 8008d18:	f042 0201 	orr.w	r2, r2, #1
 8008d1c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008d1e:	2300      	movs	r3, #0
}
 8008d20:	4618      	mov	r0, r3
 8008d22:	3710      	adds	r7, #16
 8008d24:	46bd      	mov	sp, r7
 8008d26:	bd80      	pop	{r7, pc}
 8008d28:	40010000 	.word	0x40010000
 8008d2c:	40000400 	.word	0x40000400
 8008d30:	40000800 	.word	0x40000800
 8008d34:	40000c00 	.word	0x40000c00
 8008d38:	40014000 	.word	0x40014000

08008d3c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8008d3c:	b580      	push	{r7, lr}
 8008d3e:	b086      	sub	sp, #24
 8008d40:	af00      	add	r7, sp, #0
 8008d42:	6078      	str	r0, [r7, #4]
 8008d44:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	2b00      	cmp	r3, #0
 8008d4a:	d101      	bne.n	8008d50 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8008d4c:	2301      	movs	r3, #1
 8008d4e:	e097      	b.n	8008e80 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008d56:	b2db      	uxtb	r3, r3
 8008d58:	2b00      	cmp	r3, #0
 8008d5a:	d106      	bne.n	8008d6a <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	2200      	movs	r2, #0
 8008d60:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8008d64:	6878      	ldr	r0, [r7, #4]
 8008d66:	f7fc f9ff 	bl	8005168 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	2202      	movs	r2, #2
 8008d6e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	681b      	ldr	r3, [r3, #0]
 8008d76:	689b      	ldr	r3, [r3, #8]
 8008d78:	687a      	ldr	r2, [r7, #4]
 8008d7a:	6812      	ldr	r2, [r2, #0]
 8008d7c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008d80:	f023 0307 	bic.w	r3, r3, #7
 8008d84:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	681a      	ldr	r2, [r3, #0]
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	3304      	adds	r3, #4
 8008d8e:	4619      	mov	r1, r3
 8008d90:	4610      	mov	r0, r2
 8008d92:	f000 fb1b 	bl	80093cc <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	681b      	ldr	r3, [r3, #0]
 8008d9a:	689b      	ldr	r3, [r3, #8]
 8008d9c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	681b      	ldr	r3, [r3, #0]
 8008da2:	699b      	ldr	r3, [r3, #24]
 8008da4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	681b      	ldr	r3, [r3, #0]
 8008daa:	6a1b      	ldr	r3, [r3, #32]
 8008dac:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8008dae:	683b      	ldr	r3, [r7, #0]
 8008db0:	681b      	ldr	r3, [r3, #0]
 8008db2:	697a      	ldr	r2, [r7, #20]
 8008db4:	4313      	orrs	r3, r2
 8008db6:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8008db8:	693b      	ldr	r3, [r7, #16]
 8008dba:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008dbe:	f023 0303 	bic.w	r3, r3, #3
 8008dc2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8008dc4:	683b      	ldr	r3, [r7, #0]
 8008dc6:	689a      	ldr	r2, [r3, #8]
 8008dc8:	683b      	ldr	r3, [r7, #0]
 8008dca:	699b      	ldr	r3, [r3, #24]
 8008dcc:	021b      	lsls	r3, r3, #8
 8008dce:	4313      	orrs	r3, r2
 8008dd0:	693a      	ldr	r2, [r7, #16]
 8008dd2:	4313      	orrs	r3, r2
 8008dd4:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8008dd6:	693b      	ldr	r3, [r7, #16]
 8008dd8:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8008ddc:	f023 030c 	bic.w	r3, r3, #12
 8008de0:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8008de2:	693b      	ldr	r3, [r7, #16]
 8008de4:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8008de8:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8008dec:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8008dee:	683b      	ldr	r3, [r7, #0]
 8008df0:	68da      	ldr	r2, [r3, #12]
 8008df2:	683b      	ldr	r3, [r7, #0]
 8008df4:	69db      	ldr	r3, [r3, #28]
 8008df6:	021b      	lsls	r3, r3, #8
 8008df8:	4313      	orrs	r3, r2
 8008dfa:	693a      	ldr	r2, [r7, #16]
 8008dfc:	4313      	orrs	r3, r2
 8008dfe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8008e00:	683b      	ldr	r3, [r7, #0]
 8008e02:	691b      	ldr	r3, [r3, #16]
 8008e04:	011a      	lsls	r2, r3, #4
 8008e06:	683b      	ldr	r3, [r7, #0]
 8008e08:	6a1b      	ldr	r3, [r3, #32]
 8008e0a:	031b      	lsls	r3, r3, #12
 8008e0c:	4313      	orrs	r3, r2
 8008e0e:	693a      	ldr	r2, [r7, #16]
 8008e10:	4313      	orrs	r3, r2
 8008e12:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8008e14:	68fb      	ldr	r3, [r7, #12]
 8008e16:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8008e1a:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8008e1c:	68fb      	ldr	r3, [r7, #12]
 8008e1e:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8008e22:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8008e24:	683b      	ldr	r3, [r7, #0]
 8008e26:	685a      	ldr	r2, [r3, #4]
 8008e28:	683b      	ldr	r3, [r7, #0]
 8008e2a:	695b      	ldr	r3, [r3, #20]
 8008e2c:	011b      	lsls	r3, r3, #4
 8008e2e:	4313      	orrs	r3, r2
 8008e30:	68fa      	ldr	r2, [r7, #12]
 8008e32:	4313      	orrs	r3, r2
 8008e34:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	681b      	ldr	r3, [r3, #0]
 8008e3a:	697a      	ldr	r2, [r7, #20]
 8008e3c:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	681b      	ldr	r3, [r3, #0]
 8008e42:	693a      	ldr	r2, [r7, #16]
 8008e44:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	681b      	ldr	r3, [r3, #0]
 8008e4a:	68fa      	ldr	r2, [r7, #12]
 8008e4c:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	2201      	movs	r2, #1
 8008e52:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	2201      	movs	r2, #1
 8008e5a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	2201      	movs	r2, #1
 8008e62:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	2201      	movs	r2, #1
 8008e6a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	2201      	movs	r2, #1
 8008e72:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	2201      	movs	r2, #1
 8008e7a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8008e7e:	2300      	movs	r3, #0
}
 8008e80:	4618      	mov	r0, r3
 8008e82:	3718      	adds	r7, #24
 8008e84:	46bd      	mov	sp, r7
 8008e86:	bd80      	pop	{r7, pc}

08008e88 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008e88:	b580      	push	{r7, lr}
 8008e8a:	b084      	sub	sp, #16
 8008e8c:	af00      	add	r7, sp, #0
 8008e8e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	681b      	ldr	r3, [r3, #0]
 8008e94:	68db      	ldr	r3, [r3, #12]
 8008e96:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	681b      	ldr	r3, [r3, #0]
 8008e9c:	691b      	ldr	r3, [r3, #16]
 8008e9e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8008ea0:	68bb      	ldr	r3, [r7, #8]
 8008ea2:	f003 0302 	and.w	r3, r3, #2
 8008ea6:	2b00      	cmp	r3, #0
 8008ea8:	d020      	beq.n	8008eec <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8008eaa:	68fb      	ldr	r3, [r7, #12]
 8008eac:	f003 0302 	and.w	r3, r3, #2
 8008eb0:	2b00      	cmp	r3, #0
 8008eb2:	d01b      	beq.n	8008eec <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	681b      	ldr	r3, [r3, #0]
 8008eb8:	f06f 0202 	mvn.w	r2, #2
 8008ebc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	2201      	movs	r2, #1
 8008ec2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	681b      	ldr	r3, [r3, #0]
 8008ec8:	699b      	ldr	r3, [r3, #24]
 8008eca:	f003 0303 	and.w	r3, r3, #3
 8008ece:	2b00      	cmp	r3, #0
 8008ed0:	d003      	beq.n	8008eda <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008ed2:	6878      	ldr	r0, [r7, #4]
 8008ed4:	f000 fa5b 	bl	800938e <HAL_TIM_IC_CaptureCallback>
 8008ed8:	e005      	b.n	8008ee6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008eda:	6878      	ldr	r0, [r7, #4]
 8008edc:	f000 fa4d 	bl	800937a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008ee0:	6878      	ldr	r0, [r7, #4]
 8008ee2:	f000 fa5e 	bl	80093a2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	2200      	movs	r2, #0
 8008eea:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8008eec:	68bb      	ldr	r3, [r7, #8]
 8008eee:	f003 0304 	and.w	r3, r3, #4
 8008ef2:	2b00      	cmp	r3, #0
 8008ef4:	d020      	beq.n	8008f38 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8008ef6:	68fb      	ldr	r3, [r7, #12]
 8008ef8:	f003 0304 	and.w	r3, r3, #4
 8008efc:	2b00      	cmp	r3, #0
 8008efe:	d01b      	beq.n	8008f38 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	681b      	ldr	r3, [r3, #0]
 8008f04:	f06f 0204 	mvn.w	r2, #4
 8008f08:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	2202      	movs	r2, #2
 8008f0e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	681b      	ldr	r3, [r3, #0]
 8008f14:	699b      	ldr	r3, [r3, #24]
 8008f16:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008f1a:	2b00      	cmp	r3, #0
 8008f1c:	d003      	beq.n	8008f26 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008f1e:	6878      	ldr	r0, [r7, #4]
 8008f20:	f000 fa35 	bl	800938e <HAL_TIM_IC_CaptureCallback>
 8008f24:	e005      	b.n	8008f32 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008f26:	6878      	ldr	r0, [r7, #4]
 8008f28:	f000 fa27 	bl	800937a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008f2c:	6878      	ldr	r0, [r7, #4]
 8008f2e:	f000 fa38 	bl	80093a2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	2200      	movs	r2, #0
 8008f36:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8008f38:	68bb      	ldr	r3, [r7, #8]
 8008f3a:	f003 0308 	and.w	r3, r3, #8
 8008f3e:	2b00      	cmp	r3, #0
 8008f40:	d020      	beq.n	8008f84 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8008f42:	68fb      	ldr	r3, [r7, #12]
 8008f44:	f003 0308 	and.w	r3, r3, #8
 8008f48:	2b00      	cmp	r3, #0
 8008f4a:	d01b      	beq.n	8008f84 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	681b      	ldr	r3, [r3, #0]
 8008f50:	f06f 0208 	mvn.w	r2, #8
 8008f54:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	2204      	movs	r2, #4
 8008f5a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	681b      	ldr	r3, [r3, #0]
 8008f60:	69db      	ldr	r3, [r3, #28]
 8008f62:	f003 0303 	and.w	r3, r3, #3
 8008f66:	2b00      	cmp	r3, #0
 8008f68:	d003      	beq.n	8008f72 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008f6a:	6878      	ldr	r0, [r7, #4]
 8008f6c:	f000 fa0f 	bl	800938e <HAL_TIM_IC_CaptureCallback>
 8008f70:	e005      	b.n	8008f7e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008f72:	6878      	ldr	r0, [r7, #4]
 8008f74:	f000 fa01 	bl	800937a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008f78:	6878      	ldr	r0, [r7, #4]
 8008f7a:	f000 fa12 	bl	80093a2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	2200      	movs	r2, #0
 8008f82:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8008f84:	68bb      	ldr	r3, [r7, #8]
 8008f86:	f003 0310 	and.w	r3, r3, #16
 8008f8a:	2b00      	cmp	r3, #0
 8008f8c:	d020      	beq.n	8008fd0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8008f8e:	68fb      	ldr	r3, [r7, #12]
 8008f90:	f003 0310 	and.w	r3, r3, #16
 8008f94:	2b00      	cmp	r3, #0
 8008f96:	d01b      	beq.n	8008fd0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	681b      	ldr	r3, [r3, #0]
 8008f9c:	f06f 0210 	mvn.w	r2, #16
 8008fa0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	2208      	movs	r2, #8
 8008fa6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	681b      	ldr	r3, [r3, #0]
 8008fac:	69db      	ldr	r3, [r3, #28]
 8008fae:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008fb2:	2b00      	cmp	r3, #0
 8008fb4:	d003      	beq.n	8008fbe <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008fb6:	6878      	ldr	r0, [r7, #4]
 8008fb8:	f000 f9e9 	bl	800938e <HAL_TIM_IC_CaptureCallback>
 8008fbc:	e005      	b.n	8008fca <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008fbe:	6878      	ldr	r0, [r7, #4]
 8008fc0:	f000 f9db 	bl	800937a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008fc4:	6878      	ldr	r0, [r7, #4]
 8008fc6:	f000 f9ec 	bl	80093a2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	2200      	movs	r2, #0
 8008fce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8008fd0:	68bb      	ldr	r3, [r7, #8]
 8008fd2:	f003 0301 	and.w	r3, r3, #1
 8008fd6:	2b00      	cmp	r3, #0
 8008fd8:	d00c      	beq.n	8008ff4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8008fda:	68fb      	ldr	r3, [r7, #12]
 8008fdc:	f003 0301 	and.w	r3, r3, #1
 8008fe0:	2b00      	cmp	r3, #0
 8008fe2:	d007      	beq.n	8008ff4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	681b      	ldr	r3, [r3, #0]
 8008fe8:	f06f 0201 	mvn.w	r2, #1
 8008fec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008fee:	6878      	ldr	r0, [r7, #4]
 8008ff0:	f7f9 f9a4 	bl	800233c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8008ff4:	68bb      	ldr	r3, [r7, #8]
 8008ff6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008ffa:	2b00      	cmp	r3, #0
 8008ffc:	d00c      	beq.n	8009018 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8008ffe:	68fb      	ldr	r3, [r7, #12]
 8009000:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009004:	2b00      	cmp	r3, #0
 8009006:	d007      	beq.n	8009018 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	681b      	ldr	r3, [r3, #0]
 800900c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8009010:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009012:	6878      	ldr	r0, [r7, #4]
 8009014:	f000 fd76 	bl	8009b04 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8009018:	68bb      	ldr	r3, [r7, #8]
 800901a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800901e:	2b00      	cmp	r3, #0
 8009020:	d00c      	beq.n	800903c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8009022:	68fb      	ldr	r3, [r7, #12]
 8009024:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009028:	2b00      	cmp	r3, #0
 800902a:	d007      	beq.n	800903c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	681b      	ldr	r3, [r3, #0]
 8009030:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8009034:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009036:	6878      	ldr	r0, [r7, #4]
 8009038:	f000 f9bd 	bl	80093b6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800903c:	68bb      	ldr	r3, [r7, #8]
 800903e:	f003 0320 	and.w	r3, r3, #32
 8009042:	2b00      	cmp	r3, #0
 8009044:	d00c      	beq.n	8009060 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8009046:	68fb      	ldr	r3, [r7, #12]
 8009048:	f003 0320 	and.w	r3, r3, #32
 800904c:	2b00      	cmp	r3, #0
 800904e:	d007      	beq.n	8009060 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	681b      	ldr	r3, [r3, #0]
 8009054:	f06f 0220 	mvn.w	r2, #32
 8009058:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800905a:	6878      	ldr	r0, [r7, #4]
 800905c:	f000 fd48 	bl	8009af0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009060:	bf00      	nop
 8009062:	3710      	adds	r7, #16
 8009064:	46bd      	mov	sp, r7
 8009066:	bd80      	pop	{r7, pc}

08009068 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8009068:	b580      	push	{r7, lr}
 800906a:	b086      	sub	sp, #24
 800906c:	af00      	add	r7, sp, #0
 800906e:	60f8      	str	r0, [r7, #12]
 8009070:	60b9      	str	r1, [r7, #8]
 8009072:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009074:	2300      	movs	r3, #0
 8009076:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8009078:	68fb      	ldr	r3, [r7, #12]
 800907a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800907e:	2b01      	cmp	r3, #1
 8009080:	d101      	bne.n	8009086 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8009082:	2302      	movs	r3, #2
 8009084:	e0ae      	b.n	80091e4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8009086:	68fb      	ldr	r3, [r7, #12]
 8009088:	2201      	movs	r2, #1
 800908a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	2b0c      	cmp	r3, #12
 8009092:	f200 809f 	bhi.w	80091d4 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8009096:	a201      	add	r2, pc, #4	@ (adr r2, 800909c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8009098:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800909c:	080090d1 	.word	0x080090d1
 80090a0:	080091d5 	.word	0x080091d5
 80090a4:	080091d5 	.word	0x080091d5
 80090a8:	080091d5 	.word	0x080091d5
 80090ac:	08009111 	.word	0x08009111
 80090b0:	080091d5 	.word	0x080091d5
 80090b4:	080091d5 	.word	0x080091d5
 80090b8:	080091d5 	.word	0x080091d5
 80090bc:	08009153 	.word	0x08009153
 80090c0:	080091d5 	.word	0x080091d5
 80090c4:	080091d5 	.word	0x080091d5
 80090c8:	080091d5 	.word	0x080091d5
 80090cc:	08009193 	.word	0x08009193
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80090d0:	68fb      	ldr	r3, [r7, #12]
 80090d2:	681b      	ldr	r3, [r3, #0]
 80090d4:	68b9      	ldr	r1, [r7, #8]
 80090d6:	4618      	mov	r0, r3
 80090d8:	f000 f9fe 	bl	80094d8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80090dc:	68fb      	ldr	r3, [r7, #12]
 80090de:	681b      	ldr	r3, [r3, #0]
 80090e0:	699a      	ldr	r2, [r3, #24]
 80090e2:	68fb      	ldr	r3, [r7, #12]
 80090e4:	681b      	ldr	r3, [r3, #0]
 80090e6:	f042 0208 	orr.w	r2, r2, #8
 80090ea:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80090ec:	68fb      	ldr	r3, [r7, #12]
 80090ee:	681b      	ldr	r3, [r3, #0]
 80090f0:	699a      	ldr	r2, [r3, #24]
 80090f2:	68fb      	ldr	r3, [r7, #12]
 80090f4:	681b      	ldr	r3, [r3, #0]
 80090f6:	f022 0204 	bic.w	r2, r2, #4
 80090fa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80090fc:	68fb      	ldr	r3, [r7, #12]
 80090fe:	681b      	ldr	r3, [r3, #0]
 8009100:	6999      	ldr	r1, [r3, #24]
 8009102:	68bb      	ldr	r3, [r7, #8]
 8009104:	691a      	ldr	r2, [r3, #16]
 8009106:	68fb      	ldr	r3, [r7, #12]
 8009108:	681b      	ldr	r3, [r3, #0]
 800910a:	430a      	orrs	r2, r1
 800910c:	619a      	str	r2, [r3, #24]
      break;
 800910e:	e064      	b.n	80091da <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8009110:	68fb      	ldr	r3, [r7, #12]
 8009112:	681b      	ldr	r3, [r3, #0]
 8009114:	68b9      	ldr	r1, [r7, #8]
 8009116:	4618      	mov	r0, r3
 8009118:	f000 fa44 	bl	80095a4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800911c:	68fb      	ldr	r3, [r7, #12]
 800911e:	681b      	ldr	r3, [r3, #0]
 8009120:	699a      	ldr	r2, [r3, #24]
 8009122:	68fb      	ldr	r3, [r7, #12]
 8009124:	681b      	ldr	r3, [r3, #0]
 8009126:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800912a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800912c:	68fb      	ldr	r3, [r7, #12]
 800912e:	681b      	ldr	r3, [r3, #0]
 8009130:	699a      	ldr	r2, [r3, #24]
 8009132:	68fb      	ldr	r3, [r7, #12]
 8009134:	681b      	ldr	r3, [r3, #0]
 8009136:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800913a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800913c:	68fb      	ldr	r3, [r7, #12]
 800913e:	681b      	ldr	r3, [r3, #0]
 8009140:	6999      	ldr	r1, [r3, #24]
 8009142:	68bb      	ldr	r3, [r7, #8]
 8009144:	691b      	ldr	r3, [r3, #16]
 8009146:	021a      	lsls	r2, r3, #8
 8009148:	68fb      	ldr	r3, [r7, #12]
 800914a:	681b      	ldr	r3, [r3, #0]
 800914c:	430a      	orrs	r2, r1
 800914e:	619a      	str	r2, [r3, #24]
      break;
 8009150:	e043      	b.n	80091da <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8009152:	68fb      	ldr	r3, [r7, #12]
 8009154:	681b      	ldr	r3, [r3, #0]
 8009156:	68b9      	ldr	r1, [r7, #8]
 8009158:	4618      	mov	r0, r3
 800915a:	f000 fa8f 	bl	800967c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800915e:	68fb      	ldr	r3, [r7, #12]
 8009160:	681b      	ldr	r3, [r3, #0]
 8009162:	69da      	ldr	r2, [r3, #28]
 8009164:	68fb      	ldr	r3, [r7, #12]
 8009166:	681b      	ldr	r3, [r3, #0]
 8009168:	f042 0208 	orr.w	r2, r2, #8
 800916c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800916e:	68fb      	ldr	r3, [r7, #12]
 8009170:	681b      	ldr	r3, [r3, #0]
 8009172:	69da      	ldr	r2, [r3, #28]
 8009174:	68fb      	ldr	r3, [r7, #12]
 8009176:	681b      	ldr	r3, [r3, #0]
 8009178:	f022 0204 	bic.w	r2, r2, #4
 800917c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800917e:	68fb      	ldr	r3, [r7, #12]
 8009180:	681b      	ldr	r3, [r3, #0]
 8009182:	69d9      	ldr	r1, [r3, #28]
 8009184:	68bb      	ldr	r3, [r7, #8]
 8009186:	691a      	ldr	r2, [r3, #16]
 8009188:	68fb      	ldr	r3, [r7, #12]
 800918a:	681b      	ldr	r3, [r3, #0]
 800918c:	430a      	orrs	r2, r1
 800918e:	61da      	str	r2, [r3, #28]
      break;
 8009190:	e023      	b.n	80091da <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8009192:	68fb      	ldr	r3, [r7, #12]
 8009194:	681b      	ldr	r3, [r3, #0]
 8009196:	68b9      	ldr	r1, [r7, #8]
 8009198:	4618      	mov	r0, r3
 800919a:	f000 fad9 	bl	8009750 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800919e:	68fb      	ldr	r3, [r7, #12]
 80091a0:	681b      	ldr	r3, [r3, #0]
 80091a2:	69da      	ldr	r2, [r3, #28]
 80091a4:	68fb      	ldr	r3, [r7, #12]
 80091a6:	681b      	ldr	r3, [r3, #0]
 80091a8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80091ac:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80091ae:	68fb      	ldr	r3, [r7, #12]
 80091b0:	681b      	ldr	r3, [r3, #0]
 80091b2:	69da      	ldr	r2, [r3, #28]
 80091b4:	68fb      	ldr	r3, [r7, #12]
 80091b6:	681b      	ldr	r3, [r3, #0]
 80091b8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80091bc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80091be:	68fb      	ldr	r3, [r7, #12]
 80091c0:	681b      	ldr	r3, [r3, #0]
 80091c2:	69d9      	ldr	r1, [r3, #28]
 80091c4:	68bb      	ldr	r3, [r7, #8]
 80091c6:	691b      	ldr	r3, [r3, #16]
 80091c8:	021a      	lsls	r2, r3, #8
 80091ca:	68fb      	ldr	r3, [r7, #12]
 80091cc:	681b      	ldr	r3, [r3, #0]
 80091ce:	430a      	orrs	r2, r1
 80091d0:	61da      	str	r2, [r3, #28]
      break;
 80091d2:	e002      	b.n	80091da <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80091d4:	2301      	movs	r3, #1
 80091d6:	75fb      	strb	r3, [r7, #23]
      break;
 80091d8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80091da:	68fb      	ldr	r3, [r7, #12]
 80091dc:	2200      	movs	r2, #0
 80091de:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80091e2:	7dfb      	ldrb	r3, [r7, #23]
}
 80091e4:	4618      	mov	r0, r3
 80091e6:	3718      	adds	r7, #24
 80091e8:	46bd      	mov	sp, r7
 80091ea:	bd80      	pop	{r7, pc}

080091ec <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80091ec:	b580      	push	{r7, lr}
 80091ee:	b084      	sub	sp, #16
 80091f0:	af00      	add	r7, sp, #0
 80091f2:	6078      	str	r0, [r7, #4]
 80091f4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80091f6:	2300      	movs	r3, #0
 80091f8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009200:	2b01      	cmp	r3, #1
 8009202:	d101      	bne.n	8009208 <HAL_TIM_ConfigClockSource+0x1c>
 8009204:	2302      	movs	r3, #2
 8009206:	e0b4      	b.n	8009372 <HAL_TIM_ConfigClockSource+0x186>
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	2201      	movs	r2, #1
 800920c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	2202      	movs	r2, #2
 8009214:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	681b      	ldr	r3, [r3, #0]
 800921c:	689b      	ldr	r3, [r3, #8]
 800921e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8009220:	68bb      	ldr	r3, [r7, #8]
 8009222:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8009226:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009228:	68bb      	ldr	r3, [r7, #8]
 800922a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800922e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	681b      	ldr	r3, [r3, #0]
 8009234:	68ba      	ldr	r2, [r7, #8]
 8009236:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8009238:	683b      	ldr	r3, [r7, #0]
 800923a:	681b      	ldr	r3, [r3, #0]
 800923c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009240:	d03e      	beq.n	80092c0 <HAL_TIM_ConfigClockSource+0xd4>
 8009242:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009246:	f200 8087 	bhi.w	8009358 <HAL_TIM_ConfigClockSource+0x16c>
 800924a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800924e:	f000 8086 	beq.w	800935e <HAL_TIM_ConfigClockSource+0x172>
 8009252:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009256:	d87f      	bhi.n	8009358 <HAL_TIM_ConfigClockSource+0x16c>
 8009258:	2b70      	cmp	r3, #112	@ 0x70
 800925a:	d01a      	beq.n	8009292 <HAL_TIM_ConfigClockSource+0xa6>
 800925c:	2b70      	cmp	r3, #112	@ 0x70
 800925e:	d87b      	bhi.n	8009358 <HAL_TIM_ConfigClockSource+0x16c>
 8009260:	2b60      	cmp	r3, #96	@ 0x60
 8009262:	d050      	beq.n	8009306 <HAL_TIM_ConfigClockSource+0x11a>
 8009264:	2b60      	cmp	r3, #96	@ 0x60
 8009266:	d877      	bhi.n	8009358 <HAL_TIM_ConfigClockSource+0x16c>
 8009268:	2b50      	cmp	r3, #80	@ 0x50
 800926a:	d03c      	beq.n	80092e6 <HAL_TIM_ConfigClockSource+0xfa>
 800926c:	2b50      	cmp	r3, #80	@ 0x50
 800926e:	d873      	bhi.n	8009358 <HAL_TIM_ConfigClockSource+0x16c>
 8009270:	2b40      	cmp	r3, #64	@ 0x40
 8009272:	d058      	beq.n	8009326 <HAL_TIM_ConfigClockSource+0x13a>
 8009274:	2b40      	cmp	r3, #64	@ 0x40
 8009276:	d86f      	bhi.n	8009358 <HAL_TIM_ConfigClockSource+0x16c>
 8009278:	2b30      	cmp	r3, #48	@ 0x30
 800927a:	d064      	beq.n	8009346 <HAL_TIM_ConfigClockSource+0x15a>
 800927c:	2b30      	cmp	r3, #48	@ 0x30
 800927e:	d86b      	bhi.n	8009358 <HAL_TIM_ConfigClockSource+0x16c>
 8009280:	2b20      	cmp	r3, #32
 8009282:	d060      	beq.n	8009346 <HAL_TIM_ConfigClockSource+0x15a>
 8009284:	2b20      	cmp	r3, #32
 8009286:	d867      	bhi.n	8009358 <HAL_TIM_ConfigClockSource+0x16c>
 8009288:	2b00      	cmp	r3, #0
 800928a:	d05c      	beq.n	8009346 <HAL_TIM_ConfigClockSource+0x15a>
 800928c:	2b10      	cmp	r3, #16
 800928e:	d05a      	beq.n	8009346 <HAL_TIM_ConfigClockSource+0x15a>
 8009290:	e062      	b.n	8009358 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8009296:	683b      	ldr	r3, [r7, #0]
 8009298:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800929a:	683b      	ldr	r3, [r7, #0]
 800929c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800929e:	683b      	ldr	r3, [r7, #0]
 80092a0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80092a2:	f000 fb1f 	bl	80098e4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	681b      	ldr	r3, [r3, #0]
 80092aa:	689b      	ldr	r3, [r3, #8]
 80092ac:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80092ae:	68bb      	ldr	r3, [r7, #8]
 80092b0:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80092b4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	681b      	ldr	r3, [r3, #0]
 80092ba:	68ba      	ldr	r2, [r7, #8]
 80092bc:	609a      	str	r2, [r3, #8]
      break;
 80092be:	e04f      	b.n	8009360 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80092c4:	683b      	ldr	r3, [r7, #0]
 80092c6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80092c8:	683b      	ldr	r3, [r7, #0]
 80092ca:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80092cc:	683b      	ldr	r3, [r7, #0]
 80092ce:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80092d0:	f000 fb08 	bl	80098e4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	681b      	ldr	r3, [r3, #0]
 80092d8:	689a      	ldr	r2, [r3, #8]
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	681b      	ldr	r3, [r3, #0]
 80092de:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80092e2:	609a      	str	r2, [r3, #8]
      break;
 80092e4:	e03c      	b.n	8009360 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80092ea:	683b      	ldr	r3, [r7, #0]
 80092ec:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80092ee:	683b      	ldr	r3, [r7, #0]
 80092f0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80092f2:	461a      	mov	r2, r3
 80092f4:	f000 fa7c 	bl	80097f0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	681b      	ldr	r3, [r3, #0]
 80092fc:	2150      	movs	r1, #80	@ 0x50
 80092fe:	4618      	mov	r0, r3
 8009300:	f000 fad5 	bl	80098ae <TIM_ITRx_SetConfig>
      break;
 8009304:	e02c      	b.n	8009360 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800930a:	683b      	ldr	r3, [r7, #0]
 800930c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800930e:	683b      	ldr	r3, [r7, #0]
 8009310:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8009312:	461a      	mov	r2, r3
 8009314:	f000 fa9b 	bl	800984e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	681b      	ldr	r3, [r3, #0]
 800931c:	2160      	movs	r1, #96	@ 0x60
 800931e:	4618      	mov	r0, r3
 8009320:	f000 fac5 	bl	80098ae <TIM_ITRx_SetConfig>
      break;
 8009324:	e01c      	b.n	8009360 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800932a:	683b      	ldr	r3, [r7, #0]
 800932c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800932e:	683b      	ldr	r3, [r7, #0]
 8009330:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009332:	461a      	mov	r2, r3
 8009334:	f000 fa5c 	bl	80097f0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	681b      	ldr	r3, [r3, #0]
 800933c:	2140      	movs	r1, #64	@ 0x40
 800933e:	4618      	mov	r0, r3
 8009340:	f000 fab5 	bl	80098ae <TIM_ITRx_SetConfig>
      break;
 8009344:	e00c      	b.n	8009360 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	681a      	ldr	r2, [r3, #0]
 800934a:	683b      	ldr	r3, [r7, #0]
 800934c:	681b      	ldr	r3, [r3, #0]
 800934e:	4619      	mov	r1, r3
 8009350:	4610      	mov	r0, r2
 8009352:	f000 faac 	bl	80098ae <TIM_ITRx_SetConfig>
      break;
 8009356:	e003      	b.n	8009360 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8009358:	2301      	movs	r3, #1
 800935a:	73fb      	strb	r3, [r7, #15]
      break;
 800935c:	e000      	b.n	8009360 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800935e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	2201      	movs	r2, #1
 8009364:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	2200      	movs	r2, #0
 800936c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8009370:	7bfb      	ldrb	r3, [r7, #15]
}
 8009372:	4618      	mov	r0, r3
 8009374:	3710      	adds	r7, #16
 8009376:	46bd      	mov	sp, r7
 8009378:	bd80      	pop	{r7, pc}

0800937a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800937a:	b480      	push	{r7}
 800937c:	b083      	sub	sp, #12
 800937e:	af00      	add	r7, sp, #0
 8009380:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009382:	bf00      	nop
 8009384:	370c      	adds	r7, #12
 8009386:	46bd      	mov	sp, r7
 8009388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800938c:	4770      	bx	lr

0800938e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800938e:	b480      	push	{r7}
 8009390:	b083      	sub	sp, #12
 8009392:	af00      	add	r7, sp, #0
 8009394:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009396:	bf00      	nop
 8009398:	370c      	adds	r7, #12
 800939a:	46bd      	mov	sp, r7
 800939c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093a0:	4770      	bx	lr

080093a2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80093a2:	b480      	push	{r7}
 80093a4:	b083      	sub	sp, #12
 80093a6:	af00      	add	r7, sp, #0
 80093a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80093aa:	bf00      	nop
 80093ac:	370c      	adds	r7, #12
 80093ae:	46bd      	mov	sp, r7
 80093b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093b4:	4770      	bx	lr

080093b6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80093b6:	b480      	push	{r7}
 80093b8:	b083      	sub	sp, #12
 80093ba:	af00      	add	r7, sp, #0
 80093bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80093be:	bf00      	nop
 80093c0:	370c      	adds	r7, #12
 80093c2:	46bd      	mov	sp, r7
 80093c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093c8:	4770      	bx	lr
	...

080093cc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80093cc:	b480      	push	{r7}
 80093ce:	b085      	sub	sp, #20
 80093d0:	af00      	add	r7, sp, #0
 80093d2:	6078      	str	r0, [r7, #4]
 80093d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	681b      	ldr	r3, [r3, #0]
 80093da:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	4a37      	ldr	r2, [pc, #220]	@ (80094bc <TIM_Base_SetConfig+0xf0>)
 80093e0:	4293      	cmp	r3, r2
 80093e2:	d00f      	beq.n	8009404 <TIM_Base_SetConfig+0x38>
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80093ea:	d00b      	beq.n	8009404 <TIM_Base_SetConfig+0x38>
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	4a34      	ldr	r2, [pc, #208]	@ (80094c0 <TIM_Base_SetConfig+0xf4>)
 80093f0:	4293      	cmp	r3, r2
 80093f2:	d007      	beq.n	8009404 <TIM_Base_SetConfig+0x38>
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	4a33      	ldr	r2, [pc, #204]	@ (80094c4 <TIM_Base_SetConfig+0xf8>)
 80093f8:	4293      	cmp	r3, r2
 80093fa:	d003      	beq.n	8009404 <TIM_Base_SetConfig+0x38>
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	4a32      	ldr	r2, [pc, #200]	@ (80094c8 <TIM_Base_SetConfig+0xfc>)
 8009400:	4293      	cmp	r3, r2
 8009402:	d108      	bne.n	8009416 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009404:	68fb      	ldr	r3, [r7, #12]
 8009406:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800940a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800940c:	683b      	ldr	r3, [r7, #0]
 800940e:	685b      	ldr	r3, [r3, #4]
 8009410:	68fa      	ldr	r2, [r7, #12]
 8009412:	4313      	orrs	r3, r2
 8009414:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	4a28      	ldr	r2, [pc, #160]	@ (80094bc <TIM_Base_SetConfig+0xf0>)
 800941a:	4293      	cmp	r3, r2
 800941c:	d01b      	beq.n	8009456 <TIM_Base_SetConfig+0x8a>
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009424:	d017      	beq.n	8009456 <TIM_Base_SetConfig+0x8a>
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	4a25      	ldr	r2, [pc, #148]	@ (80094c0 <TIM_Base_SetConfig+0xf4>)
 800942a:	4293      	cmp	r3, r2
 800942c:	d013      	beq.n	8009456 <TIM_Base_SetConfig+0x8a>
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	4a24      	ldr	r2, [pc, #144]	@ (80094c4 <TIM_Base_SetConfig+0xf8>)
 8009432:	4293      	cmp	r3, r2
 8009434:	d00f      	beq.n	8009456 <TIM_Base_SetConfig+0x8a>
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	4a23      	ldr	r2, [pc, #140]	@ (80094c8 <TIM_Base_SetConfig+0xfc>)
 800943a:	4293      	cmp	r3, r2
 800943c:	d00b      	beq.n	8009456 <TIM_Base_SetConfig+0x8a>
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	4a22      	ldr	r2, [pc, #136]	@ (80094cc <TIM_Base_SetConfig+0x100>)
 8009442:	4293      	cmp	r3, r2
 8009444:	d007      	beq.n	8009456 <TIM_Base_SetConfig+0x8a>
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	4a21      	ldr	r2, [pc, #132]	@ (80094d0 <TIM_Base_SetConfig+0x104>)
 800944a:	4293      	cmp	r3, r2
 800944c:	d003      	beq.n	8009456 <TIM_Base_SetConfig+0x8a>
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	4a20      	ldr	r2, [pc, #128]	@ (80094d4 <TIM_Base_SetConfig+0x108>)
 8009452:	4293      	cmp	r3, r2
 8009454:	d108      	bne.n	8009468 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009456:	68fb      	ldr	r3, [r7, #12]
 8009458:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800945c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800945e:	683b      	ldr	r3, [r7, #0]
 8009460:	68db      	ldr	r3, [r3, #12]
 8009462:	68fa      	ldr	r2, [r7, #12]
 8009464:	4313      	orrs	r3, r2
 8009466:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009468:	68fb      	ldr	r3, [r7, #12]
 800946a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800946e:	683b      	ldr	r3, [r7, #0]
 8009470:	695b      	ldr	r3, [r3, #20]
 8009472:	4313      	orrs	r3, r2
 8009474:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009476:	683b      	ldr	r3, [r7, #0]
 8009478:	689a      	ldr	r2, [r3, #8]
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800947e:	683b      	ldr	r3, [r7, #0]
 8009480:	681a      	ldr	r2, [r3, #0]
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	4a0c      	ldr	r2, [pc, #48]	@ (80094bc <TIM_Base_SetConfig+0xf0>)
 800948a:	4293      	cmp	r3, r2
 800948c:	d103      	bne.n	8009496 <TIM_Base_SetConfig+0xca>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800948e:	683b      	ldr	r3, [r7, #0]
 8009490:	691a      	ldr	r2, [r3, #16]
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	681b      	ldr	r3, [r3, #0]
 800949a:	f043 0204 	orr.w	r2, r3, #4
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	2201      	movs	r2, #1
 80094a6:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	68fa      	ldr	r2, [r7, #12]
 80094ac:	601a      	str	r2, [r3, #0]
}
 80094ae:	bf00      	nop
 80094b0:	3714      	adds	r7, #20
 80094b2:	46bd      	mov	sp, r7
 80094b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094b8:	4770      	bx	lr
 80094ba:	bf00      	nop
 80094bc:	40010000 	.word	0x40010000
 80094c0:	40000400 	.word	0x40000400
 80094c4:	40000800 	.word	0x40000800
 80094c8:	40000c00 	.word	0x40000c00
 80094cc:	40014000 	.word	0x40014000
 80094d0:	40014400 	.word	0x40014400
 80094d4:	40014800 	.word	0x40014800

080094d8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80094d8:	b480      	push	{r7}
 80094da:	b087      	sub	sp, #28
 80094dc:	af00      	add	r7, sp, #0
 80094de:	6078      	str	r0, [r7, #4]
 80094e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	6a1b      	ldr	r3, [r3, #32]
 80094e6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	6a1b      	ldr	r3, [r3, #32]
 80094ec:	f023 0201 	bic.w	r2, r3, #1
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	685b      	ldr	r3, [r3, #4]
 80094f8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	699b      	ldr	r3, [r3, #24]
 80094fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8009500:	68fb      	ldr	r3, [r7, #12]
 8009502:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009506:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8009508:	68fb      	ldr	r3, [r7, #12]
 800950a:	f023 0303 	bic.w	r3, r3, #3
 800950e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009510:	683b      	ldr	r3, [r7, #0]
 8009512:	681b      	ldr	r3, [r3, #0]
 8009514:	68fa      	ldr	r2, [r7, #12]
 8009516:	4313      	orrs	r3, r2
 8009518:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800951a:	697b      	ldr	r3, [r7, #20]
 800951c:	f023 0302 	bic.w	r3, r3, #2
 8009520:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8009522:	683b      	ldr	r3, [r7, #0]
 8009524:	689b      	ldr	r3, [r3, #8]
 8009526:	697a      	ldr	r2, [r7, #20]
 8009528:	4313      	orrs	r3, r2
 800952a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	4a1c      	ldr	r2, [pc, #112]	@ (80095a0 <TIM_OC1_SetConfig+0xc8>)
 8009530:	4293      	cmp	r3, r2
 8009532:	d10c      	bne.n	800954e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8009534:	697b      	ldr	r3, [r7, #20]
 8009536:	f023 0308 	bic.w	r3, r3, #8
 800953a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800953c:	683b      	ldr	r3, [r7, #0]
 800953e:	68db      	ldr	r3, [r3, #12]
 8009540:	697a      	ldr	r2, [r7, #20]
 8009542:	4313      	orrs	r3, r2
 8009544:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8009546:	697b      	ldr	r3, [r7, #20]
 8009548:	f023 0304 	bic.w	r3, r3, #4
 800954c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	4a13      	ldr	r2, [pc, #76]	@ (80095a0 <TIM_OC1_SetConfig+0xc8>)
 8009552:	4293      	cmp	r3, r2
 8009554:	d111      	bne.n	800957a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8009556:	693b      	ldr	r3, [r7, #16]
 8009558:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800955c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800955e:	693b      	ldr	r3, [r7, #16]
 8009560:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8009564:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8009566:	683b      	ldr	r3, [r7, #0]
 8009568:	695b      	ldr	r3, [r3, #20]
 800956a:	693a      	ldr	r2, [r7, #16]
 800956c:	4313      	orrs	r3, r2
 800956e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8009570:	683b      	ldr	r3, [r7, #0]
 8009572:	699b      	ldr	r3, [r3, #24]
 8009574:	693a      	ldr	r2, [r7, #16]
 8009576:	4313      	orrs	r3, r2
 8009578:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	693a      	ldr	r2, [r7, #16]
 800957e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	68fa      	ldr	r2, [r7, #12]
 8009584:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8009586:	683b      	ldr	r3, [r7, #0]
 8009588:	685a      	ldr	r2, [r3, #4]
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	697a      	ldr	r2, [r7, #20]
 8009592:	621a      	str	r2, [r3, #32]
}
 8009594:	bf00      	nop
 8009596:	371c      	adds	r7, #28
 8009598:	46bd      	mov	sp, r7
 800959a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800959e:	4770      	bx	lr
 80095a0:	40010000 	.word	0x40010000

080095a4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80095a4:	b480      	push	{r7}
 80095a6:	b087      	sub	sp, #28
 80095a8:	af00      	add	r7, sp, #0
 80095aa:	6078      	str	r0, [r7, #4]
 80095ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	6a1b      	ldr	r3, [r3, #32]
 80095b2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	6a1b      	ldr	r3, [r3, #32]
 80095b8:	f023 0210 	bic.w	r2, r3, #16
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	685b      	ldr	r3, [r3, #4]
 80095c4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	699b      	ldr	r3, [r3, #24]
 80095ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80095cc:	68fb      	ldr	r3, [r7, #12]
 80095ce:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80095d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80095d4:	68fb      	ldr	r3, [r7, #12]
 80095d6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80095da:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80095dc:	683b      	ldr	r3, [r7, #0]
 80095de:	681b      	ldr	r3, [r3, #0]
 80095e0:	021b      	lsls	r3, r3, #8
 80095e2:	68fa      	ldr	r2, [r7, #12]
 80095e4:	4313      	orrs	r3, r2
 80095e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80095e8:	697b      	ldr	r3, [r7, #20]
 80095ea:	f023 0320 	bic.w	r3, r3, #32
 80095ee:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80095f0:	683b      	ldr	r3, [r7, #0]
 80095f2:	689b      	ldr	r3, [r3, #8]
 80095f4:	011b      	lsls	r3, r3, #4
 80095f6:	697a      	ldr	r2, [r7, #20]
 80095f8:	4313      	orrs	r3, r2
 80095fa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	4a1e      	ldr	r2, [pc, #120]	@ (8009678 <TIM_OC2_SetConfig+0xd4>)
 8009600:	4293      	cmp	r3, r2
 8009602:	d10d      	bne.n	8009620 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8009604:	697b      	ldr	r3, [r7, #20]
 8009606:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800960a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800960c:	683b      	ldr	r3, [r7, #0]
 800960e:	68db      	ldr	r3, [r3, #12]
 8009610:	011b      	lsls	r3, r3, #4
 8009612:	697a      	ldr	r2, [r7, #20]
 8009614:	4313      	orrs	r3, r2
 8009616:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8009618:	697b      	ldr	r3, [r7, #20]
 800961a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800961e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	4a15      	ldr	r2, [pc, #84]	@ (8009678 <TIM_OC2_SetConfig+0xd4>)
 8009624:	4293      	cmp	r3, r2
 8009626:	d113      	bne.n	8009650 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8009628:	693b      	ldr	r3, [r7, #16]
 800962a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800962e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8009630:	693b      	ldr	r3, [r7, #16]
 8009632:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8009636:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8009638:	683b      	ldr	r3, [r7, #0]
 800963a:	695b      	ldr	r3, [r3, #20]
 800963c:	009b      	lsls	r3, r3, #2
 800963e:	693a      	ldr	r2, [r7, #16]
 8009640:	4313      	orrs	r3, r2
 8009642:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8009644:	683b      	ldr	r3, [r7, #0]
 8009646:	699b      	ldr	r3, [r3, #24]
 8009648:	009b      	lsls	r3, r3, #2
 800964a:	693a      	ldr	r2, [r7, #16]
 800964c:	4313      	orrs	r3, r2
 800964e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	693a      	ldr	r2, [r7, #16]
 8009654:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	68fa      	ldr	r2, [r7, #12]
 800965a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800965c:	683b      	ldr	r3, [r7, #0]
 800965e:	685a      	ldr	r2, [r3, #4]
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	697a      	ldr	r2, [r7, #20]
 8009668:	621a      	str	r2, [r3, #32]
}
 800966a:	bf00      	nop
 800966c:	371c      	adds	r7, #28
 800966e:	46bd      	mov	sp, r7
 8009670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009674:	4770      	bx	lr
 8009676:	bf00      	nop
 8009678:	40010000 	.word	0x40010000

0800967c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800967c:	b480      	push	{r7}
 800967e:	b087      	sub	sp, #28
 8009680:	af00      	add	r7, sp, #0
 8009682:	6078      	str	r0, [r7, #4]
 8009684:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	6a1b      	ldr	r3, [r3, #32]
 800968a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	6a1b      	ldr	r3, [r3, #32]
 8009690:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	685b      	ldr	r3, [r3, #4]
 800969c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	69db      	ldr	r3, [r3, #28]
 80096a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80096a4:	68fb      	ldr	r3, [r7, #12]
 80096a6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80096aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80096ac:	68fb      	ldr	r3, [r7, #12]
 80096ae:	f023 0303 	bic.w	r3, r3, #3
 80096b2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80096b4:	683b      	ldr	r3, [r7, #0]
 80096b6:	681b      	ldr	r3, [r3, #0]
 80096b8:	68fa      	ldr	r2, [r7, #12]
 80096ba:	4313      	orrs	r3, r2
 80096bc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80096be:	697b      	ldr	r3, [r7, #20]
 80096c0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80096c4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80096c6:	683b      	ldr	r3, [r7, #0]
 80096c8:	689b      	ldr	r3, [r3, #8]
 80096ca:	021b      	lsls	r3, r3, #8
 80096cc:	697a      	ldr	r2, [r7, #20]
 80096ce:	4313      	orrs	r3, r2
 80096d0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	4a1d      	ldr	r2, [pc, #116]	@ (800974c <TIM_OC3_SetConfig+0xd0>)
 80096d6:	4293      	cmp	r3, r2
 80096d8:	d10d      	bne.n	80096f6 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80096da:	697b      	ldr	r3, [r7, #20]
 80096dc:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80096e0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80096e2:	683b      	ldr	r3, [r7, #0]
 80096e4:	68db      	ldr	r3, [r3, #12]
 80096e6:	021b      	lsls	r3, r3, #8
 80096e8:	697a      	ldr	r2, [r7, #20]
 80096ea:	4313      	orrs	r3, r2
 80096ec:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80096ee:	697b      	ldr	r3, [r7, #20]
 80096f0:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80096f4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	4a14      	ldr	r2, [pc, #80]	@ (800974c <TIM_OC3_SetConfig+0xd0>)
 80096fa:	4293      	cmp	r3, r2
 80096fc:	d113      	bne.n	8009726 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80096fe:	693b      	ldr	r3, [r7, #16]
 8009700:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8009704:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8009706:	693b      	ldr	r3, [r7, #16]
 8009708:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800970c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800970e:	683b      	ldr	r3, [r7, #0]
 8009710:	695b      	ldr	r3, [r3, #20]
 8009712:	011b      	lsls	r3, r3, #4
 8009714:	693a      	ldr	r2, [r7, #16]
 8009716:	4313      	orrs	r3, r2
 8009718:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800971a:	683b      	ldr	r3, [r7, #0]
 800971c:	699b      	ldr	r3, [r3, #24]
 800971e:	011b      	lsls	r3, r3, #4
 8009720:	693a      	ldr	r2, [r7, #16]
 8009722:	4313      	orrs	r3, r2
 8009724:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	693a      	ldr	r2, [r7, #16]
 800972a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	68fa      	ldr	r2, [r7, #12]
 8009730:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8009732:	683b      	ldr	r3, [r7, #0]
 8009734:	685a      	ldr	r2, [r3, #4]
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	697a      	ldr	r2, [r7, #20]
 800973e:	621a      	str	r2, [r3, #32]
}
 8009740:	bf00      	nop
 8009742:	371c      	adds	r7, #28
 8009744:	46bd      	mov	sp, r7
 8009746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800974a:	4770      	bx	lr
 800974c:	40010000 	.word	0x40010000

08009750 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009750:	b480      	push	{r7}
 8009752:	b087      	sub	sp, #28
 8009754:	af00      	add	r7, sp, #0
 8009756:	6078      	str	r0, [r7, #4]
 8009758:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	6a1b      	ldr	r3, [r3, #32]
 800975e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	6a1b      	ldr	r3, [r3, #32]
 8009764:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	685b      	ldr	r3, [r3, #4]
 8009770:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	69db      	ldr	r3, [r3, #28]
 8009776:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8009778:	68fb      	ldr	r3, [r7, #12]
 800977a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800977e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8009780:	68fb      	ldr	r3, [r7, #12]
 8009782:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009786:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009788:	683b      	ldr	r3, [r7, #0]
 800978a:	681b      	ldr	r3, [r3, #0]
 800978c:	021b      	lsls	r3, r3, #8
 800978e:	68fa      	ldr	r2, [r7, #12]
 8009790:	4313      	orrs	r3, r2
 8009792:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8009794:	693b      	ldr	r3, [r7, #16]
 8009796:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800979a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800979c:	683b      	ldr	r3, [r7, #0]
 800979e:	689b      	ldr	r3, [r3, #8]
 80097a0:	031b      	lsls	r3, r3, #12
 80097a2:	693a      	ldr	r2, [r7, #16]
 80097a4:	4313      	orrs	r3, r2
 80097a6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	4a10      	ldr	r2, [pc, #64]	@ (80097ec <TIM_OC4_SetConfig+0x9c>)
 80097ac:	4293      	cmp	r3, r2
 80097ae:	d109      	bne.n	80097c4 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80097b0:	697b      	ldr	r3, [r7, #20]
 80097b2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80097b6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80097b8:	683b      	ldr	r3, [r7, #0]
 80097ba:	695b      	ldr	r3, [r3, #20]
 80097bc:	019b      	lsls	r3, r3, #6
 80097be:	697a      	ldr	r2, [r7, #20]
 80097c0:	4313      	orrs	r3, r2
 80097c2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	697a      	ldr	r2, [r7, #20]
 80097c8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	68fa      	ldr	r2, [r7, #12]
 80097ce:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80097d0:	683b      	ldr	r3, [r7, #0]
 80097d2:	685a      	ldr	r2, [r3, #4]
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	693a      	ldr	r2, [r7, #16]
 80097dc:	621a      	str	r2, [r3, #32]
}
 80097de:	bf00      	nop
 80097e0:	371c      	adds	r7, #28
 80097e2:	46bd      	mov	sp, r7
 80097e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097e8:	4770      	bx	lr
 80097ea:	bf00      	nop
 80097ec:	40010000 	.word	0x40010000

080097f0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80097f0:	b480      	push	{r7}
 80097f2:	b087      	sub	sp, #28
 80097f4:	af00      	add	r7, sp, #0
 80097f6:	60f8      	str	r0, [r7, #12]
 80097f8:	60b9      	str	r1, [r7, #8]
 80097fa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80097fc:	68fb      	ldr	r3, [r7, #12]
 80097fe:	6a1b      	ldr	r3, [r3, #32]
 8009800:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009802:	68fb      	ldr	r3, [r7, #12]
 8009804:	6a1b      	ldr	r3, [r3, #32]
 8009806:	f023 0201 	bic.w	r2, r3, #1
 800980a:	68fb      	ldr	r3, [r7, #12]
 800980c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800980e:	68fb      	ldr	r3, [r7, #12]
 8009810:	699b      	ldr	r3, [r3, #24]
 8009812:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009814:	693b      	ldr	r3, [r7, #16]
 8009816:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800981a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	011b      	lsls	r3, r3, #4
 8009820:	693a      	ldr	r2, [r7, #16]
 8009822:	4313      	orrs	r3, r2
 8009824:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009826:	697b      	ldr	r3, [r7, #20]
 8009828:	f023 030a 	bic.w	r3, r3, #10
 800982c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800982e:	697a      	ldr	r2, [r7, #20]
 8009830:	68bb      	ldr	r3, [r7, #8]
 8009832:	4313      	orrs	r3, r2
 8009834:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009836:	68fb      	ldr	r3, [r7, #12]
 8009838:	693a      	ldr	r2, [r7, #16]
 800983a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800983c:	68fb      	ldr	r3, [r7, #12]
 800983e:	697a      	ldr	r2, [r7, #20]
 8009840:	621a      	str	r2, [r3, #32]
}
 8009842:	bf00      	nop
 8009844:	371c      	adds	r7, #28
 8009846:	46bd      	mov	sp, r7
 8009848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800984c:	4770      	bx	lr

0800984e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800984e:	b480      	push	{r7}
 8009850:	b087      	sub	sp, #28
 8009852:	af00      	add	r7, sp, #0
 8009854:	60f8      	str	r0, [r7, #12]
 8009856:	60b9      	str	r1, [r7, #8]
 8009858:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800985a:	68fb      	ldr	r3, [r7, #12]
 800985c:	6a1b      	ldr	r3, [r3, #32]
 800985e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009860:	68fb      	ldr	r3, [r7, #12]
 8009862:	6a1b      	ldr	r3, [r3, #32]
 8009864:	f023 0210 	bic.w	r2, r3, #16
 8009868:	68fb      	ldr	r3, [r7, #12]
 800986a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800986c:	68fb      	ldr	r3, [r7, #12]
 800986e:	699b      	ldr	r3, [r3, #24]
 8009870:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009872:	693b      	ldr	r3, [r7, #16]
 8009874:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8009878:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	031b      	lsls	r3, r3, #12
 800987e:	693a      	ldr	r2, [r7, #16]
 8009880:	4313      	orrs	r3, r2
 8009882:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009884:	697b      	ldr	r3, [r7, #20]
 8009886:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800988a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800988c:	68bb      	ldr	r3, [r7, #8]
 800988e:	011b      	lsls	r3, r3, #4
 8009890:	697a      	ldr	r2, [r7, #20]
 8009892:	4313      	orrs	r3, r2
 8009894:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009896:	68fb      	ldr	r3, [r7, #12]
 8009898:	693a      	ldr	r2, [r7, #16]
 800989a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800989c:	68fb      	ldr	r3, [r7, #12]
 800989e:	697a      	ldr	r2, [r7, #20]
 80098a0:	621a      	str	r2, [r3, #32]
}
 80098a2:	bf00      	nop
 80098a4:	371c      	adds	r7, #28
 80098a6:	46bd      	mov	sp, r7
 80098a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098ac:	4770      	bx	lr

080098ae <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80098ae:	b480      	push	{r7}
 80098b0:	b085      	sub	sp, #20
 80098b2:	af00      	add	r7, sp, #0
 80098b4:	6078      	str	r0, [r7, #4]
 80098b6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	689b      	ldr	r3, [r3, #8]
 80098bc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80098be:	68fb      	ldr	r3, [r7, #12]
 80098c0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80098c4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80098c6:	683a      	ldr	r2, [r7, #0]
 80098c8:	68fb      	ldr	r3, [r7, #12]
 80098ca:	4313      	orrs	r3, r2
 80098cc:	f043 0307 	orr.w	r3, r3, #7
 80098d0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	68fa      	ldr	r2, [r7, #12]
 80098d6:	609a      	str	r2, [r3, #8]
}
 80098d8:	bf00      	nop
 80098da:	3714      	adds	r7, #20
 80098dc:	46bd      	mov	sp, r7
 80098de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098e2:	4770      	bx	lr

080098e4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80098e4:	b480      	push	{r7}
 80098e6:	b087      	sub	sp, #28
 80098e8:	af00      	add	r7, sp, #0
 80098ea:	60f8      	str	r0, [r7, #12]
 80098ec:	60b9      	str	r1, [r7, #8]
 80098ee:	607a      	str	r2, [r7, #4]
 80098f0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80098f2:	68fb      	ldr	r3, [r7, #12]
 80098f4:	689b      	ldr	r3, [r3, #8]
 80098f6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80098f8:	697b      	ldr	r3, [r7, #20]
 80098fa:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80098fe:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009900:	683b      	ldr	r3, [r7, #0]
 8009902:	021a      	lsls	r2, r3, #8
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	431a      	orrs	r2, r3
 8009908:	68bb      	ldr	r3, [r7, #8]
 800990a:	4313      	orrs	r3, r2
 800990c:	697a      	ldr	r2, [r7, #20]
 800990e:	4313      	orrs	r3, r2
 8009910:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009912:	68fb      	ldr	r3, [r7, #12]
 8009914:	697a      	ldr	r2, [r7, #20]
 8009916:	609a      	str	r2, [r3, #8]
}
 8009918:	bf00      	nop
 800991a:	371c      	adds	r7, #28
 800991c:	46bd      	mov	sp, r7
 800991e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009922:	4770      	bx	lr

08009924 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8009924:	b480      	push	{r7}
 8009926:	b087      	sub	sp, #28
 8009928:	af00      	add	r7, sp, #0
 800992a:	60f8      	str	r0, [r7, #12]
 800992c:	60b9      	str	r1, [r7, #8]
 800992e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8009930:	68bb      	ldr	r3, [r7, #8]
 8009932:	f003 031f 	and.w	r3, r3, #31
 8009936:	2201      	movs	r2, #1
 8009938:	fa02 f303 	lsl.w	r3, r2, r3
 800993c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800993e:	68fb      	ldr	r3, [r7, #12]
 8009940:	6a1a      	ldr	r2, [r3, #32]
 8009942:	697b      	ldr	r3, [r7, #20]
 8009944:	43db      	mvns	r3, r3
 8009946:	401a      	ands	r2, r3
 8009948:	68fb      	ldr	r3, [r7, #12]
 800994a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800994c:	68fb      	ldr	r3, [r7, #12]
 800994e:	6a1a      	ldr	r2, [r3, #32]
 8009950:	68bb      	ldr	r3, [r7, #8]
 8009952:	f003 031f 	and.w	r3, r3, #31
 8009956:	6879      	ldr	r1, [r7, #4]
 8009958:	fa01 f303 	lsl.w	r3, r1, r3
 800995c:	431a      	orrs	r2, r3
 800995e:	68fb      	ldr	r3, [r7, #12]
 8009960:	621a      	str	r2, [r3, #32]
}
 8009962:	bf00      	nop
 8009964:	371c      	adds	r7, #28
 8009966:	46bd      	mov	sp, r7
 8009968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800996c:	4770      	bx	lr
	...

08009970 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009970:	b480      	push	{r7}
 8009972:	b085      	sub	sp, #20
 8009974:	af00      	add	r7, sp, #0
 8009976:	6078      	str	r0, [r7, #4]
 8009978:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009980:	2b01      	cmp	r3, #1
 8009982:	d101      	bne.n	8009988 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009984:	2302      	movs	r3, #2
 8009986:	e050      	b.n	8009a2a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	2201      	movs	r2, #1
 800998c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	2202      	movs	r2, #2
 8009994:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	681b      	ldr	r3, [r3, #0]
 800999c:	685b      	ldr	r3, [r3, #4]
 800999e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	681b      	ldr	r3, [r3, #0]
 80099a4:	689b      	ldr	r3, [r3, #8]
 80099a6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80099a8:	68fb      	ldr	r3, [r7, #12]
 80099aa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80099ae:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80099b0:	683b      	ldr	r3, [r7, #0]
 80099b2:	681b      	ldr	r3, [r3, #0]
 80099b4:	68fa      	ldr	r2, [r7, #12]
 80099b6:	4313      	orrs	r3, r2
 80099b8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	681b      	ldr	r3, [r3, #0]
 80099be:	68fa      	ldr	r2, [r7, #12]
 80099c0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	681b      	ldr	r3, [r3, #0]
 80099c6:	4a1c      	ldr	r2, [pc, #112]	@ (8009a38 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80099c8:	4293      	cmp	r3, r2
 80099ca:	d018      	beq.n	80099fe <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	681b      	ldr	r3, [r3, #0]
 80099d0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80099d4:	d013      	beq.n	80099fe <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	681b      	ldr	r3, [r3, #0]
 80099da:	4a18      	ldr	r2, [pc, #96]	@ (8009a3c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80099dc:	4293      	cmp	r3, r2
 80099de:	d00e      	beq.n	80099fe <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	681b      	ldr	r3, [r3, #0]
 80099e4:	4a16      	ldr	r2, [pc, #88]	@ (8009a40 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80099e6:	4293      	cmp	r3, r2
 80099e8:	d009      	beq.n	80099fe <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	681b      	ldr	r3, [r3, #0]
 80099ee:	4a15      	ldr	r2, [pc, #84]	@ (8009a44 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80099f0:	4293      	cmp	r3, r2
 80099f2:	d004      	beq.n	80099fe <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	681b      	ldr	r3, [r3, #0]
 80099f8:	4a13      	ldr	r2, [pc, #76]	@ (8009a48 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80099fa:	4293      	cmp	r3, r2
 80099fc:	d10c      	bne.n	8009a18 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80099fe:	68bb      	ldr	r3, [r7, #8]
 8009a00:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009a04:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009a06:	683b      	ldr	r3, [r7, #0]
 8009a08:	685b      	ldr	r3, [r3, #4]
 8009a0a:	68ba      	ldr	r2, [r7, #8]
 8009a0c:	4313      	orrs	r3, r2
 8009a0e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	681b      	ldr	r3, [r3, #0]
 8009a14:	68ba      	ldr	r2, [r7, #8]
 8009a16:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	2201      	movs	r2, #1
 8009a1c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	2200      	movs	r2, #0
 8009a24:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8009a28:	2300      	movs	r3, #0
}
 8009a2a:	4618      	mov	r0, r3
 8009a2c:	3714      	adds	r7, #20
 8009a2e:	46bd      	mov	sp, r7
 8009a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a34:	4770      	bx	lr
 8009a36:	bf00      	nop
 8009a38:	40010000 	.word	0x40010000
 8009a3c:	40000400 	.word	0x40000400
 8009a40:	40000800 	.word	0x40000800
 8009a44:	40000c00 	.word	0x40000c00
 8009a48:	40014000 	.word	0x40014000

08009a4c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8009a4c:	b480      	push	{r7}
 8009a4e:	b085      	sub	sp, #20
 8009a50:	af00      	add	r7, sp, #0
 8009a52:	6078      	str	r0, [r7, #4]
 8009a54:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8009a56:	2300      	movs	r3, #0
 8009a58:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009a60:	2b01      	cmp	r3, #1
 8009a62:	d101      	bne.n	8009a68 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8009a64:	2302      	movs	r3, #2
 8009a66:	e03d      	b.n	8009ae4 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	2201      	movs	r2, #1
 8009a6c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8009a70:	68fb      	ldr	r3, [r7, #12]
 8009a72:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8009a76:	683b      	ldr	r3, [r7, #0]
 8009a78:	68db      	ldr	r3, [r3, #12]
 8009a7a:	4313      	orrs	r3, r2
 8009a7c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8009a7e:	68fb      	ldr	r3, [r7, #12]
 8009a80:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8009a84:	683b      	ldr	r3, [r7, #0]
 8009a86:	689b      	ldr	r3, [r3, #8]
 8009a88:	4313      	orrs	r3, r2
 8009a8a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8009a8c:	68fb      	ldr	r3, [r7, #12]
 8009a8e:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8009a92:	683b      	ldr	r3, [r7, #0]
 8009a94:	685b      	ldr	r3, [r3, #4]
 8009a96:	4313      	orrs	r3, r2
 8009a98:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8009a9a:	68fb      	ldr	r3, [r7, #12]
 8009a9c:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8009aa0:	683b      	ldr	r3, [r7, #0]
 8009aa2:	681b      	ldr	r3, [r3, #0]
 8009aa4:	4313      	orrs	r3, r2
 8009aa6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8009aa8:	68fb      	ldr	r3, [r7, #12]
 8009aaa:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8009aae:	683b      	ldr	r3, [r7, #0]
 8009ab0:	691b      	ldr	r3, [r3, #16]
 8009ab2:	4313      	orrs	r3, r2
 8009ab4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8009ab6:	68fb      	ldr	r3, [r7, #12]
 8009ab8:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8009abc:	683b      	ldr	r3, [r7, #0]
 8009abe:	695b      	ldr	r3, [r3, #20]
 8009ac0:	4313      	orrs	r3, r2
 8009ac2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8009ac4:	68fb      	ldr	r3, [r7, #12]
 8009ac6:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8009aca:	683b      	ldr	r3, [r7, #0]
 8009acc:	69db      	ldr	r3, [r3, #28]
 8009ace:	4313      	orrs	r3, r2
 8009ad0:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	681b      	ldr	r3, [r3, #0]
 8009ad6:	68fa      	ldr	r2, [r7, #12]
 8009ad8:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	2200      	movs	r2, #0
 8009ade:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8009ae2:	2300      	movs	r3, #0
}
 8009ae4:	4618      	mov	r0, r3
 8009ae6:	3714      	adds	r7, #20
 8009ae8:	46bd      	mov	sp, r7
 8009aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aee:	4770      	bx	lr

08009af0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009af0:	b480      	push	{r7}
 8009af2:	b083      	sub	sp, #12
 8009af4:	af00      	add	r7, sp, #0
 8009af6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009af8:	bf00      	nop
 8009afa:	370c      	adds	r7, #12
 8009afc:	46bd      	mov	sp, r7
 8009afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b02:	4770      	bx	lr

08009b04 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009b04:	b480      	push	{r7}
 8009b06:	b083      	sub	sp, #12
 8009b08:	af00      	add	r7, sp, #0
 8009b0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009b0c:	bf00      	nop
 8009b0e:	370c      	adds	r7, #12
 8009b10:	46bd      	mov	sp, r7
 8009b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b16:	4770      	bx	lr

08009b18 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009b18:	b580      	push	{r7, lr}
 8009b1a:	b082      	sub	sp, #8
 8009b1c:	af00      	add	r7, sp, #0
 8009b1e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	2b00      	cmp	r3, #0
 8009b24:	d101      	bne.n	8009b2a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009b26:	2301      	movs	r3, #1
 8009b28:	e042      	b.n	8009bb0 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009b30:	b2db      	uxtb	r3, r3
 8009b32:	2b00      	cmp	r3, #0
 8009b34:	d106      	bne.n	8009b44 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	2200      	movs	r2, #0
 8009b3a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009b3e:	6878      	ldr	r0, [r7, #4]
 8009b40:	f7fb fc1c 	bl	800537c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	2224      	movs	r2, #36	@ 0x24
 8009b48:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	681b      	ldr	r3, [r3, #0]
 8009b50:	68da      	ldr	r2, [r3, #12]
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	681b      	ldr	r3, [r3, #0]
 8009b56:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8009b5a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8009b5c:	6878      	ldr	r0, [r7, #4]
 8009b5e:	f000 fcef 	bl	800a540 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	681b      	ldr	r3, [r3, #0]
 8009b66:	691a      	ldr	r2, [r3, #16]
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	681b      	ldr	r3, [r3, #0]
 8009b6c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8009b70:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	681b      	ldr	r3, [r3, #0]
 8009b76:	695a      	ldr	r2, [r3, #20]
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	681b      	ldr	r3, [r3, #0]
 8009b7c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8009b80:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	681b      	ldr	r3, [r3, #0]
 8009b86:	68da      	ldr	r2, [r3, #12]
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	681b      	ldr	r3, [r3, #0]
 8009b8c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8009b90:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	2200      	movs	r2, #0
 8009b96:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	2220      	movs	r2, #32
 8009b9c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	2220      	movs	r2, #32
 8009ba4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	2200      	movs	r2, #0
 8009bac:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8009bae:	2300      	movs	r3, #0
}
 8009bb0:	4618      	mov	r0, r3
 8009bb2:	3708      	adds	r7, #8
 8009bb4:	46bd      	mov	sp, r7
 8009bb6:	bd80      	pop	{r7, pc}

08009bb8 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009bb8:	b580      	push	{r7, lr}
 8009bba:	b084      	sub	sp, #16
 8009bbc:	af00      	add	r7, sp, #0
 8009bbe:	60f8      	str	r0, [r7, #12]
 8009bc0:	60b9      	str	r1, [r7, #8]
 8009bc2:	4613      	mov	r3, r2
 8009bc4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8009bc6:	68fb      	ldr	r3, [r7, #12]
 8009bc8:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8009bcc:	b2db      	uxtb	r3, r3
 8009bce:	2b20      	cmp	r3, #32
 8009bd0:	d112      	bne.n	8009bf8 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8009bd2:	68bb      	ldr	r3, [r7, #8]
 8009bd4:	2b00      	cmp	r3, #0
 8009bd6:	d002      	beq.n	8009bde <HAL_UART_Receive_IT+0x26>
 8009bd8:	88fb      	ldrh	r3, [r7, #6]
 8009bda:	2b00      	cmp	r3, #0
 8009bdc:	d101      	bne.n	8009be2 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8009bde:	2301      	movs	r3, #1
 8009be0:	e00b      	b.n	8009bfa <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009be2:	68fb      	ldr	r3, [r7, #12]
 8009be4:	2200      	movs	r2, #0
 8009be6:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8009be8:	88fb      	ldrh	r3, [r7, #6]
 8009bea:	461a      	mov	r2, r3
 8009bec:	68b9      	ldr	r1, [r7, #8]
 8009bee:	68f8      	ldr	r0, [r7, #12]
 8009bf0:	f000 fad2 	bl	800a198 <UART_Start_Receive_IT>
 8009bf4:	4603      	mov	r3, r0
 8009bf6:	e000      	b.n	8009bfa <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8009bf8:	2302      	movs	r3, #2
  }
}
 8009bfa:	4618      	mov	r0, r3
 8009bfc:	3710      	adds	r7, #16
 8009bfe:	46bd      	mov	sp, r7
 8009c00:	bd80      	pop	{r7, pc}
	...

08009c04 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8009c04:	b580      	push	{r7, lr}
 8009c06:	b0ba      	sub	sp, #232	@ 0xe8
 8009c08:	af00      	add	r7, sp, #0
 8009c0a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	681b      	ldr	r3, [r3, #0]
 8009c10:	681b      	ldr	r3, [r3, #0]
 8009c12:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	681b      	ldr	r3, [r3, #0]
 8009c1a:	68db      	ldr	r3, [r3, #12]
 8009c1c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	681b      	ldr	r3, [r3, #0]
 8009c24:	695b      	ldr	r3, [r3, #20]
 8009c26:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8009c2a:	2300      	movs	r3, #0
 8009c2c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8009c30:	2300      	movs	r3, #0
 8009c32:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8009c36:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009c3a:	f003 030f 	and.w	r3, r3, #15
 8009c3e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8009c42:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8009c46:	2b00      	cmp	r3, #0
 8009c48:	d10f      	bne.n	8009c6a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8009c4a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009c4e:	f003 0320 	and.w	r3, r3, #32
 8009c52:	2b00      	cmp	r3, #0
 8009c54:	d009      	beq.n	8009c6a <HAL_UART_IRQHandler+0x66>
 8009c56:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009c5a:	f003 0320 	and.w	r3, r3, #32
 8009c5e:	2b00      	cmp	r3, #0
 8009c60:	d003      	beq.n	8009c6a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8009c62:	6878      	ldr	r0, [r7, #4]
 8009c64:	f000 fbae 	bl	800a3c4 <UART_Receive_IT>
      return;
 8009c68:	e273      	b.n	800a152 <HAL_UART_IRQHandler+0x54e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8009c6a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8009c6e:	2b00      	cmp	r3, #0
 8009c70:	f000 80de 	beq.w	8009e30 <HAL_UART_IRQHandler+0x22c>
 8009c74:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009c78:	f003 0301 	and.w	r3, r3, #1
 8009c7c:	2b00      	cmp	r3, #0
 8009c7e:	d106      	bne.n	8009c8e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8009c80:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009c84:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8009c88:	2b00      	cmp	r3, #0
 8009c8a:	f000 80d1 	beq.w	8009e30 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8009c8e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009c92:	f003 0301 	and.w	r3, r3, #1
 8009c96:	2b00      	cmp	r3, #0
 8009c98:	d00b      	beq.n	8009cb2 <HAL_UART_IRQHandler+0xae>
 8009c9a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009c9e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009ca2:	2b00      	cmp	r3, #0
 8009ca4:	d005      	beq.n	8009cb2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009caa:	f043 0201 	orr.w	r2, r3, #1
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8009cb2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009cb6:	f003 0304 	and.w	r3, r3, #4
 8009cba:	2b00      	cmp	r3, #0
 8009cbc:	d00b      	beq.n	8009cd6 <HAL_UART_IRQHandler+0xd2>
 8009cbe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009cc2:	f003 0301 	and.w	r3, r3, #1
 8009cc6:	2b00      	cmp	r3, #0
 8009cc8:	d005      	beq.n	8009cd6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009cce:	f043 0202 	orr.w	r2, r3, #2
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8009cd6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009cda:	f003 0302 	and.w	r3, r3, #2
 8009cde:	2b00      	cmp	r3, #0
 8009ce0:	d00b      	beq.n	8009cfa <HAL_UART_IRQHandler+0xf6>
 8009ce2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009ce6:	f003 0301 	and.w	r3, r3, #1
 8009cea:	2b00      	cmp	r3, #0
 8009cec:	d005      	beq.n	8009cfa <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009cf2:	f043 0204 	orr.w	r2, r3, #4
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8009cfa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009cfe:	f003 0308 	and.w	r3, r3, #8
 8009d02:	2b00      	cmp	r3, #0
 8009d04:	d011      	beq.n	8009d2a <HAL_UART_IRQHandler+0x126>
 8009d06:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009d0a:	f003 0320 	and.w	r3, r3, #32
 8009d0e:	2b00      	cmp	r3, #0
 8009d10:	d105      	bne.n	8009d1e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8009d12:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009d16:	f003 0301 	and.w	r3, r3, #1
 8009d1a:	2b00      	cmp	r3, #0
 8009d1c:	d005      	beq.n	8009d2a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009d22:	f043 0208 	orr.w	r2, r3, #8
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009d2e:	2b00      	cmp	r3, #0
 8009d30:	f000 820a 	beq.w	800a148 <HAL_UART_IRQHandler+0x544>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8009d34:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009d38:	f003 0320 	and.w	r3, r3, #32
 8009d3c:	2b00      	cmp	r3, #0
 8009d3e:	d008      	beq.n	8009d52 <HAL_UART_IRQHandler+0x14e>
 8009d40:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009d44:	f003 0320 	and.w	r3, r3, #32
 8009d48:	2b00      	cmp	r3, #0
 8009d4a:	d002      	beq.n	8009d52 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8009d4c:	6878      	ldr	r0, [r7, #4]
 8009d4e:	f000 fb39 	bl	800a3c4 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	681b      	ldr	r3, [r3, #0]
 8009d56:	695b      	ldr	r3, [r3, #20]
 8009d58:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009d5c:	2b40      	cmp	r3, #64	@ 0x40
 8009d5e:	bf0c      	ite	eq
 8009d60:	2301      	moveq	r3, #1
 8009d62:	2300      	movne	r3, #0
 8009d64:	b2db      	uxtb	r3, r3
 8009d66:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009d6e:	f003 0308 	and.w	r3, r3, #8
 8009d72:	2b00      	cmp	r3, #0
 8009d74:	d103      	bne.n	8009d7e <HAL_UART_IRQHandler+0x17a>
 8009d76:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8009d7a:	2b00      	cmp	r3, #0
 8009d7c:	d04f      	beq.n	8009e1e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8009d7e:	6878      	ldr	r0, [r7, #4]
 8009d80:	f000 fa44 	bl	800a20c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	681b      	ldr	r3, [r3, #0]
 8009d88:	695b      	ldr	r3, [r3, #20]
 8009d8a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009d8e:	2b40      	cmp	r3, #64	@ 0x40
 8009d90:	d141      	bne.n	8009e16 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	681b      	ldr	r3, [r3, #0]
 8009d96:	3314      	adds	r3, #20
 8009d98:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d9c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8009da0:	e853 3f00 	ldrex	r3, [r3]
 8009da4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8009da8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8009dac:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009db0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	681b      	ldr	r3, [r3, #0]
 8009db8:	3314      	adds	r3, #20
 8009dba:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8009dbe:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8009dc2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009dc6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8009dca:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8009dce:	e841 2300 	strex	r3, r2, [r1]
 8009dd2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8009dd6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8009dda:	2b00      	cmp	r3, #0
 8009ddc:	d1d9      	bne.n	8009d92 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009de2:	2b00      	cmp	r3, #0
 8009de4:	d013      	beq.n	8009e0e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009dea:	4a8a      	ldr	r2, [pc, #552]	@ (800a014 <HAL_UART_IRQHandler+0x410>)
 8009dec:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009df2:	4618      	mov	r0, r3
 8009df4:	f7fc fb02 	bl	80063fc <HAL_DMA_Abort_IT>
 8009df8:	4603      	mov	r3, r0
 8009dfa:	2b00      	cmp	r3, #0
 8009dfc:	d016      	beq.n	8009e2c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009e02:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009e04:	687a      	ldr	r2, [r7, #4]
 8009e06:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8009e08:	4610      	mov	r0, r2
 8009e0a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009e0c:	e00e      	b.n	8009e2c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8009e0e:	6878      	ldr	r0, [r7, #4]
 8009e10:	f000 f9ac 	bl	800a16c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009e14:	e00a      	b.n	8009e2c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009e16:	6878      	ldr	r0, [r7, #4]
 8009e18:	f000 f9a8 	bl	800a16c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009e1c:	e006      	b.n	8009e2c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8009e1e:	6878      	ldr	r0, [r7, #4]
 8009e20:	f000 f9a4 	bl	800a16c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	2200      	movs	r2, #0
 8009e28:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8009e2a:	e18d      	b.n	800a148 <HAL_UART_IRQHandler+0x544>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009e2c:	bf00      	nop
    return;
 8009e2e:	e18b      	b.n	800a148 <HAL_UART_IRQHandler+0x544>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009e34:	2b01      	cmp	r3, #1
 8009e36:	f040 8167 	bne.w	800a108 <HAL_UART_IRQHandler+0x504>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8009e3a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009e3e:	f003 0310 	and.w	r3, r3, #16
 8009e42:	2b00      	cmp	r3, #0
 8009e44:	f000 8160 	beq.w	800a108 <HAL_UART_IRQHandler+0x504>
      && ((cr1its & USART_CR1_IDLEIE) != 0U))
 8009e48:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009e4c:	f003 0310 	and.w	r3, r3, #16
 8009e50:	2b00      	cmp	r3, #0
 8009e52:	f000 8159 	beq.w	800a108 <HAL_UART_IRQHandler+0x504>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8009e56:	2300      	movs	r3, #0
 8009e58:	60bb      	str	r3, [r7, #8]
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	681b      	ldr	r3, [r3, #0]
 8009e5e:	681b      	ldr	r3, [r3, #0]
 8009e60:	60bb      	str	r3, [r7, #8]
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	681b      	ldr	r3, [r3, #0]
 8009e66:	685b      	ldr	r3, [r3, #4]
 8009e68:	60bb      	str	r3, [r7, #8]
 8009e6a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	681b      	ldr	r3, [r3, #0]
 8009e70:	695b      	ldr	r3, [r3, #20]
 8009e72:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009e76:	2b40      	cmp	r3, #64	@ 0x40
 8009e78:	f040 80ce 	bne.w	800a018 <HAL_UART_IRQHandler+0x414>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009e80:	681b      	ldr	r3, [r3, #0]
 8009e82:	685b      	ldr	r3, [r3, #4]
 8009e84:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8009e88:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8009e8c:	2b00      	cmp	r3, #0
 8009e8e:	f000 80a9 	beq.w	8009fe4 <HAL_UART_IRQHandler+0x3e0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8009e96:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8009e9a:	429a      	cmp	r2, r3
 8009e9c:	f080 80a2 	bcs.w	8009fe4 <HAL_UART_IRQHandler+0x3e0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8009ea6:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009eac:	69db      	ldr	r3, [r3, #28]
 8009eae:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009eb2:	f000 8088 	beq.w	8009fc6 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	681b      	ldr	r3, [r3, #0]
 8009eba:	330c      	adds	r3, #12
 8009ebc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ec0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8009ec4:	e853 3f00 	ldrex	r3, [r3]
 8009ec8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8009ecc:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8009ed0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009ed4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	681b      	ldr	r3, [r3, #0]
 8009edc:	330c      	adds	r3, #12
 8009ede:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8009ee2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8009ee6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009eea:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8009eee:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8009ef2:	e841 2300 	strex	r3, r2, [r1]
 8009ef6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8009efa:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009efe:	2b00      	cmp	r3, #0
 8009f00:	d1d9      	bne.n	8009eb6 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	681b      	ldr	r3, [r3, #0]
 8009f06:	3314      	adds	r3, #20
 8009f08:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f0a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8009f0c:	e853 3f00 	ldrex	r3, [r3]
 8009f10:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8009f12:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009f14:	f023 0301 	bic.w	r3, r3, #1
 8009f18:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	681b      	ldr	r3, [r3, #0]
 8009f20:	3314      	adds	r3, #20
 8009f22:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8009f26:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8009f2a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f2c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8009f2e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8009f32:	e841 2300 	strex	r3, r2, [r1]
 8009f36:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8009f38:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009f3a:	2b00      	cmp	r3, #0
 8009f3c:	d1e1      	bne.n	8009f02 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	681b      	ldr	r3, [r3, #0]
 8009f42:	3314      	adds	r3, #20
 8009f44:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f46:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009f48:	e853 3f00 	ldrex	r3, [r3]
 8009f4c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8009f4e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009f50:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009f54:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	681b      	ldr	r3, [r3, #0]
 8009f5c:	3314      	adds	r3, #20
 8009f5e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8009f62:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8009f64:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f66:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8009f68:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8009f6a:	e841 2300 	strex	r3, r2, [r1]
 8009f6e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8009f70:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009f72:	2b00      	cmp	r3, #0
 8009f74:	d1e3      	bne.n	8009f3e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	2220      	movs	r2, #32
 8009f7a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	2200      	movs	r2, #0
 8009f82:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	681b      	ldr	r3, [r3, #0]
 8009f88:	330c      	adds	r3, #12
 8009f8a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f8c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009f8e:	e853 3f00 	ldrex	r3, [r3]
 8009f92:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8009f94:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009f96:	f023 0310 	bic.w	r3, r3, #16
 8009f9a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	681b      	ldr	r3, [r3, #0]
 8009fa2:	330c      	adds	r3, #12
 8009fa4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8009fa8:	65ba      	str	r2, [r7, #88]	@ 0x58
 8009faa:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009fac:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8009fae:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8009fb0:	e841 2300 	strex	r3, r2, [r1]
 8009fb4:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8009fb6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009fb8:	2b00      	cmp	r3, #0
 8009fba:	d1e3      	bne.n	8009f84 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009fc0:	4618      	mov	r0, r3
 8009fc2:	f7fc f9ab 	bl	800631c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	2202      	movs	r2, #2
 8009fca:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8009fd4:	b29b      	uxth	r3, r3
 8009fd6:	1ad3      	subs	r3, r2, r3
 8009fd8:	b29b      	uxth	r3, r3
 8009fda:	4619      	mov	r1, r3
 8009fdc:	6878      	ldr	r0, [r7, #4]
 8009fde:	f000 f8cf 	bl	800a180 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8009fe2:	e0b3      	b.n	800a14c <HAL_UART_IRQHandler+0x548>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8009fe8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8009fec:	429a      	cmp	r2, r3
 8009fee:	f040 80ad 	bne.w	800a14c <HAL_UART_IRQHandler+0x548>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009ff6:	69db      	ldr	r3, [r3, #28]
 8009ff8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009ffc:	f040 80a6 	bne.w	800a14c <HAL_UART_IRQHandler+0x548>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	2202      	movs	r2, #2
 800a004:	635a      	str	r2, [r3, #52]	@ 0x34
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800a00a:	4619      	mov	r1, r3
 800a00c:	6878      	ldr	r0, [r7, #4]
 800a00e:	f000 f8b7 	bl	800a180 <HAL_UARTEx_RxEventCallback>
      return;
 800a012:	e09b      	b.n	800a14c <HAL_UART_IRQHandler+0x548>
 800a014:	0800a2d3 	.word	0x0800a2d3
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800a020:	b29b      	uxth	r3, r3
 800a022:	1ad3      	subs	r3, r2, r3
 800a024:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800a02c:	b29b      	uxth	r3, r3
 800a02e:	2b00      	cmp	r3, #0
 800a030:	f000 808e 	beq.w	800a150 <HAL_UART_IRQHandler+0x54c>
          && (nb_rx_data > 0U))
 800a034:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800a038:	2b00      	cmp	r3, #0
 800a03a:	f000 8089 	beq.w	800a150 <HAL_UART_IRQHandler+0x54c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	681b      	ldr	r3, [r3, #0]
 800a042:	330c      	adds	r3, #12
 800a044:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a046:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a048:	e853 3f00 	ldrex	r3, [r3]
 800a04c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800a04e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a050:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a054:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	681b      	ldr	r3, [r3, #0]
 800a05c:	330c      	adds	r3, #12
 800a05e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800a062:	647a      	str	r2, [r7, #68]	@ 0x44
 800a064:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a066:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800a068:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a06a:	e841 2300 	strex	r3, r2, [r1]
 800a06e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800a070:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a072:	2b00      	cmp	r3, #0
 800a074:	d1e3      	bne.n	800a03e <HAL_UART_IRQHandler+0x43a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	681b      	ldr	r3, [r3, #0]
 800a07a:	3314      	adds	r3, #20
 800a07c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a07e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a080:	e853 3f00 	ldrex	r3, [r3]
 800a084:	623b      	str	r3, [r7, #32]
   return(result);
 800a086:	6a3b      	ldr	r3, [r7, #32]
 800a088:	f023 0301 	bic.w	r3, r3, #1
 800a08c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	681b      	ldr	r3, [r3, #0]
 800a094:	3314      	adds	r3, #20
 800a096:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800a09a:	633a      	str	r2, [r7, #48]	@ 0x30
 800a09c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a09e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a0a0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a0a2:	e841 2300 	strex	r3, r2, [r1]
 800a0a6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a0a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a0aa:	2b00      	cmp	r3, #0
 800a0ac:	d1e3      	bne.n	800a076 <HAL_UART_IRQHandler+0x472>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	2220      	movs	r2, #32
 800a0b2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a0b6:	687b      	ldr	r3, [r7, #4]
 800a0b8:	2200      	movs	r2, #0
 800a0ba:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	681b      	ldr	r3, [r3, #0]
 800a0c0:	330c      	adds	r3, #12
 800a0c2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a0c4:	693b      	ldr	r3, [r7, #16]
 800a0c6:	e853 3f00 	ldrex	r3, [r3]
 800a0ca:	60fb      	str	r3, [r7, #12]
   return(result);
 800a0cc:	68fb      	ldr	r3, [r7, #12]
 800a0ce:	f023 0310 	bic.w	r3, r3, #16
 800a0d2:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	681b      	ldr	r3, [r3, #0]
 800a0da:	330c      	adds	r3, #12
 800a0dc:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 800a0e0:	61fa      	str	r2, [r7, #28]
 800a0e2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a0e4:	69b9      	ldr	r1, [r7, #24]
 800a0e6:	69fa      	ldr	r2, [r7, #28]
 800a0e8:	e841 2300 	strex	r3, r2, [r1]
 800a0ec:	617b      	str	r3, [r7, #20]
   return(result);
 800a0ee:	697b      	ldr	r3, [r7, #20]
 800a0f0:	2b00      	cmp	r3, #0
 800a0f2:	d1e3      	bne.n	800a0bc <HAL_UART_IRQHandler+0x4b8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	2202      	movs	r2, #2
 800a0f8:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800a0fa:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800a0fe:	4619      	mov	r1, r3
 800a100:	6878      	ldr	r0, [r7, #4]
 800a102:	f000 f83d 	bl	800a180 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800a106:	e023      	b.n	800a150 <HAL_UART_IRQHandler+0x54c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800a108:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a10c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a110:	2b00      	cmp	r3, #0
 800a112:	d009      	beq.n	800a128 <HAL_UART_IRQHandler+0x524>
 800a114:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a118:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a11c:	2b00      	cmp	r3, #0
 800a11e:	d003      	beq.n	800a128 <HAL_UART_IRQHandler+0x524>
  {
    UART_Transmit_IT(huart);
 800a120:	6878      	ldr	r0, [r7, #4]
 800a122:	f000 f8e7 	bl	800a2f4 <UART_Transmit_IT>
    return;
 800a126:	e014      	b.n	800a152 <HAL_UART_IRQHandler+0x54e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800a128:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a12c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a130:	2b00      	cmp	r3, #0
 800a132:	d00e      	beq.n	800a152 <HAL_UART_IRQHandler+0x54e>
 800a134:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a138:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a13c:	2b00      	cmp	r3, #0
 800a13e:	d008      	beq.n	800a152 <HAL_UART_IRQHandler+0x54e>
  {
    UART_EndTransmit_IT(huart);
 800a140:	6878      	ldr	r0, [r7, #4]
 800a142:	f000 f927 	bl	800a394 <UART_EndTransmit_IT>
    return;
 800a146:	e004      	b.n	800a152 <HAL_UART_IRQHandler+0x54e>
    return;
 800a148:	bf00      	nop
 800a14a:	e002      	b.n	800a152 <HAL_UART_IRQHandler+0x54e>
      return;
 800a14c:	bf00      	nop
 800a14e:	e000      	b.n	800a152 <HAL_UART_IRQHandler+0x54e>
      return;
 800a150:	bf00      	nop
  }
}
 800a152:	37e8      	adds	r7, #232	@ 0xe8
 800a154:	46bd      	mov	sp, r7
 800a156:	bd80      	pop	{r7, pc}

0800a158 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800a158:	b480      	push	{r7}
 800a15a:	b083      	sub	sp, #12
 800a15c:	af00      	add	r7, sp, #0
 800a15e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800a160:	bf00      	nop
 800a162:	370c      	adds	r7, #12
 800a164:	46bd      	mov	sp, r7
 800a166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a16a:	4770      	bx	lr

0800a16c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800a16c:	b480      	push	{r7}
 800a16e:	b083      	sub	sp, #12
 800a170:	af00      	add	r7, sp, #0
 800a172:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800a174:	bf00      	nop
 800a176:	370c      	adds	r7, #12
 800a178:	46bd      	mov	sp, r7
 800a17a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a17e:	4770      	bx	lr

0800a180 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800a180:	b480      	push	{r7}
 800a182:	b083      	sub	sp, #12
 800a184:	af00      	add	r7, sp, #0
 800a186:	6078      	str	r0, [r7, #4]
 800a188:	460b      	mov	r3, r1
 800a18a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800a18c:	bf00      	nop
 800a18e:	370c      	adds	r7, #12
 800a190:	46bd      	mov	sp, r7
 800a192:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a196:	4770      	bx	lr

0800a198 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a198:	b480      	push	{r7}
 800a19a:	b085      	sub	sp, #20
 800a19c:	af00      	add	r7, sp, #0
 800a19e:	60f8      	str	r0, [r7, #12]
 800a1a0:	60b9      	str	r1, [r7, #8]
 800a1a2:	4613      	mov	r3, r2
 800a1a4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800a1a6:	68fb      	ldr	r3, [r7, #12]
 800a1a8:	68ba      	ldr	r2, [r7, #8]
 800a1aa:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 800a1ac:	68fb      	ldr	r3, [r7, #12]
 800a1ae:	88fa      	ldrh	r2, [r7, #6]
 800a1b0:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 800a1b2:	68fb      	ldr	r3, [r7, #12]
 800a1b4:	88fa      	ldrh	r2, [r7, #6]
 800a1b6:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a1b8:	68fb      	ldr	r3, [r7, #12]
 800a1ba:	2200      	movs	r2, #0
 800a1bc:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800a1be:	68fb      	ldr	r3, [r7, #12]
 800a1c0:	2222      	movs	r2, #34	@ 0x22
 800a1c2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 800a1c6:	68fb      	ldr	r3, [r7, #12]
 800a1c8:	691b      	ldr	r3, [r3, #16]
 800a1ca:	2b00      	cmp	r3, #0
 800a1cc:	d007      	beq.n	800a1de <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800a1ce:	68fb      	ldr	r3, [r7, #12]
 800a1d0:	681b      	ldr	r3, [r3, #0]
 800a1d2:	68da      	ldr	r2, [r3, #12]
 800a1d4:	68fb      	ldr	r3, [r7, #12]
 800a1d6:	681b      	ldr	r3, [r3, #0]
 800a1d8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800a1dc:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800a1de:	68fb      	ldr	r3, [r7, #12]
 800a1e0:	681b      	ldr	r3, [r3, #0]
 800a1e2:	695a      	ldr	r2, [r3, #20]
 800a1e4:	68fb      	ldr	r3, [r7, #12]
 800a1e6:	681b      	ldr	r3, [r3, #0]
 800a1e8:	f042 0201 	orr.w	r2, r2, #1
 800a1ec:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800a1ee:	68fb      	ldr	r3, [r7, #12]
 800a1f0:	681b      	ldr	r3, [r3, #0]
 800a1f2:	68da      	ldr	r2, [r3, #12]
 800a1f4:	68fb      	ldr	r3, [r7, #12]
 800a1f6:	681b      	ldr	r3, [r3, #0]
 800a1f8:	f042 0220 	orr.w	r2, r2, #32
 800a1fc:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800a1fe:	2300      	movs	r3, #0
}
 800a200:	4618      	mov	r0, r3
 800a202:	3714      	adds	r7, #20
 800a204:	46bd      	mov	sp, r7
 800a206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a20a:	4770      	bx	lr

0800a20c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a20c:	b480      	push	{r7}
 800a20e:	b095      	sub	sp, #84	@ 0x54
 800a210:	af00      	add	r7, sp, #0
 800a212:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	681b      	ldr	r3, [r3, #0]
 800a218:	330c      	adds	r3, #12
 800a21a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a21c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a21e:	e853 3f00 	ldrex	r3, [r3]
 800a222:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800a224:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a226:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a22a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	681b      	ldr	r3, [r3, #0]
 800a230:	330c      	adds	r3, #12
 800a232:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800a234:	643a      	str	r2, [r7, #64]	@ 0x40
 800a236:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a238:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800a23a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800a23c:	e841 2300 	strex	r3, r2, [r1]
 800a240:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800a242:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a244:	2b00      	cmp	r3, #0
 800a246:	d1e5      	bne.n	800a214 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	681b      	ldr	r3, [r3, #0]
 800a24c:	3314      	adds	r3, #20
 800a24e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a250:	6a3b      	ldr	r3, [r7, #32]
 800a252:	e853 3f00 	ldrex	r3, [r3]
 800a256:	61fb      	str	r3, [r7, #28]
   return(result);
 800a258:	69fb      	ldr	r3, [r7, #28]
 800a25a:	f023 0301 	bic.w	r3, r3, #1
 800a25e:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	681b      	ldr	r3, [r3, #0]
 800a264:	3314      	adds	r3, #20
 800a266:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a268:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800a26a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a26c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a26e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a270:	e841 2300 	strex	r3, r2, [r1]
 800a274:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a276:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a278:	2b00      	cmp	r3, #0
 800a27a:	d1e5      	bne.n	800a248 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a280:	2b01      	cmp	r3, #1
 800a282:	d119      	bne.n	800a2b8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	681b      	ldr	r3, [r3, #0]
 800a288:	330c      	adds	r3, #12
 800a28a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a28c:	68fb      	ldr	r3, [r7, #12]
 800a28e:	e853 3f00 	ldrex	r3, [r3]
 800a292:	60bb      	str	r3, [r7, #8]
   return(result);
 800a294:	68bb      	ldr	r3, [r7, #8]
 800a296:	f023 0310 	bic.w	r3, r3, #16
 800a29a:	647b      	str	r3, [r7, #68]	@ 0x44
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	681b      	ldr	r3, [r3, #0]
 800a2a0:	330c      	adds	r3, #12
 800a2a2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a2a4:	61ba      	str	r2, [r7, #24]
 800a2a6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a2a8:	6979      	ldr	r1, [r7, #20]
 800a2aa:	69ba      	ldr	r2, [r7, #24]
 800a2ac:	e841 2300 	strex	r3, r2, [r1]
 800a2b0:	613b      	str	r3, [r7, #16]
   return(result);
 800a2b2:	693b      	ldr	r3, [r7, #16]
 800a2b4:	2b00      	cmp	r3, #0
 800a2b6:	d1e5      	bne.n	800a284 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	2220      	movs	r2, #32
 800a2bc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	2200      	movs	r2, #0
 800a2c4:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800a2c6:	bf00      	nop
 800a2c8:	3754      	adds	r7, #84	@ 0x54
 800a2ca:	46bd      	mov	sp, r7
 800a2cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2d0:	4770      	bx	lr

0800a2d2 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a2d2:	b580      	push	{r7, lr}
 800a2d4:	b084      	sub	sp, #16
 800a2d6:	af00      	add	r7, sp, #0
 800a2d8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a2de:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800a2e0:	68fb      	ldr	r3, [r7, #12]
 800a2e2:	2200      	movs	r2, #0
 800a2e4:	85da      	strh	r2, [r3, #46]	@ 0x2e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a2e6:	68f8      	ldr	r0, [r7, #12]
 800a2e8:	f7ff ff40 	bl	800a16c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a2ec:	bf00      	nop
 800a2ee:	3710      	adds	r7, #16
 800a2f0:	46bd      	mov	sp, r7
 800a2f2:	bd80      	pop	{r7, pc}

0800a2f4 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800a2f4:	b480      	push	{r7}
 800a2f6:	b085      	sub	sp, #20
 800a2f8:	af00      	add	r7, sp, #0
 800a2fa:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a302:	b2db      	uxtb	r3, r3
 800a304:	2b21      	cmp	r3, #33	@ 0x21
 800a306:	d13e      	bne.n	800a386 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	689b      	ldr	r3, [r3, #8]
 800a30c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a310:	d114      	bne.n	800a33c <UART_Transmit_IT+0x48>
 800a312:	687b      	ldr	r3, [r7, #4]
 800a314:	691b      	ldr	r3, [r3, #16]
 800a316:	2b00      	cmp	r3, #0
 800a318:	d110      	bne.n	800a33c <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	6a1b      	ldr	r3, [r3, #32]
 800a31e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800a320:	68fb      	ldr	r3, [r7, #12]
 800a322:	881b      	ldrh	r3, [r3, #0]
 800a324:	461a      	mov	r2, r3
 800a326:	687b      	ldr	r3, [r7, #4]
 800a328:	681b      	ldr	r3, [r3, #0]
 800a32a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a32e:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	6a1b      	ldr	r3, [r3, #32]
 800a334:	1c9a      	adds	r2, r3, #2
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	621a      	str	r2, [r3, #32]
 800a33a:	e008      	b.n	800a34e <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	6a1b      	ldr	r3, [r3, #32]
 800a340:	1c59      	adds	r1, r3, #1
 800a342:	687a      	ldr	r2, [r7, #4]
 800a344:	6211      	str	r1, [r2, #32]
 800a346:	781a      	ldrb	r2, [r3, #0]
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	681b      	ldr	r3, [r3, #0]
 800a34c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800a352:	b29b      	uxth	r3, r3
 800a354:	3b01      	subs	r3, #1
 800a356:	b29b      	uxth	r3, r3
 800a358:	687a      	ldr	r2, [r7, #4]
 800a35a:	4619      	mov	r1, r3
 800a35c:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800a35e:	2b00      	cmp	r3, #0
 800a360:	d10f      	bne.n	800a382 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	681b      	ldr	r3, [r3, #0]
 800a366:	68da      	ldr	r2, [r3, #12]
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	681b      	ldr	r3, [r3, #0]
 800a36c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800a370:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800a372:	687b      	ldr	r3, [r7, #4]
 800a374:	681b      	ldr	r3, [r3, #0]
 800a376:	68da      	ldr	r2, [r3, #12]
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	681b      	ldr	r3, [r3, #0]
 800a37c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800a380:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800a382:	2300      	movs	r3, #0
 800a384:	e000      	b.n	800a388 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800a386:	2302      	movs	r3, #2
  }
}
 800a388:	4618      	mov	r0, r3
 800a38a:	3714      	adds	r7, #20
 800a38c:	46bd      	mov	sp, r7
 800a38e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a392:	4770      	bx	lr

0800a394 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800a394:	b580      	push	{r7, lr}
 800a396:	b082      	sub	sp, #8
 800a398:	af00      	add	r7, sp, #0
 800a39a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	681b      	ldr	r3, [r3, #0]
 800a3a0:	68da      	ldr	r2, [r3, #12]
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	681b      	ldr	r3, [r3, #0]
 800a3a6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800a3aa:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	2220      	movs	r2, #32
 800a3b0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800a3b4:	6878      	ldr	r0, [r7, #4]
 800a3b6:	f7ff fecf 	bl	800a158 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800a3ba:	2300      	movs	r3, #0
}
 800a3bc:	4618      	mov	r0, r3
 800a3be:	3708      	adds	r7, #8
 800a3c0:	46bd      	mov	sp, r7
 800a3c2:	bd80      	pop	{r7, pc}

0800a3c4 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800a3c4:	b580      	push	{r7, lr}
 800a3c6:	b08c      	sub	sp, #48	@ 0x30
 800a3c8:	af00      	add	r7, sp, #0
 800a3ca:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits = NULL;
 800a3cc:	2300      	movs	r3, #0
 800a3ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint16_t *pdata16bits = NULL;
 800a3d0:	2300      	movs	r3, #0
 800a3d2:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800a3da:	b2db      	uxtb	r3, r3
 800a3dc:	2b22      	cmp	r3, #34	@ 0x22
 800a3de:	f040 80aa 	bne.w	800a536 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a3e2:	687b      	ldr	r3, [r7, #4]
 800a3e4:	689b      	ldr	r3, [r3, #8]
 800a3e6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a3ea:	d115      	bne.n	800a418 <UART_Receive_IT+0x54>
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	691b      	ldr	r3, [r3, #16]
 800a3f0:	2b00      	cmp	r3, #0
 800a3f2:	d111      	bne.n	800a418 <UART_Receive_IT+0x54>
    {
      /* Unused pdata8bits */
      UNUSED(pdata8bits);
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a3f8:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	681b      	ldr	r3, [r3, #0]
 800a3fe:	685b      	ldr	r3, [r3, #4]
 800a400:	b29b      	uxth	r3, r3
 800a402:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a406:	b29a      	uxth	r2, r3
 800a408:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a40a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a410:	1c9a      	adds	r2, r3, #2
 800a412:	687b      	ldr	r3, [r7, #4]
 800a414:	629a      	str	r2, [r3, #40]	@ 0x28
 800a416:	e024      	b.n	800a462 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a41c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      /* Unused pdata16bits */
      UNUSED(pdata16bits);

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	689b      	ldr	r3, [r3, #8]
 800a422:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a426:	d007      	beq.n	800a438 <UART_Receive_IT+0x74>
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	689b      	ldr	r3, [r3, #8]
 800a42c:	2b00      	cmp	r3, #0
 800a42e:	d10a      	bne.n	800a446 <UART_Receive_IT+0x82>
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	691b      	ldr	r3, [r3, #16]
 800a434:	2b00      	cmp	r3, #0
 800a436:	d106      	bne.n	800a446 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	681b      	ldr	r3, [r3, #0]
 800a43c:	685b      	ldr	r3, [r3, #4]
 800a43e:	b2da      	uxtb	r2, r3
 800a440:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a442:	701a      	strb	r2, [r3, #0]
 800a444:	e008      	b.n	800a458 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800a446:	687b      	ldr	r3, [r7, #4]
 800a448:	681b      	ldr	r3, [r3, #0]
 800a44a:	685b      	ldr	r3, [r3, #4]
 800a44c:	b2db      	uxtb	r3, r3
 800a44e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a452:	b2da      	uxtb	r2, r3
 800a454:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a456:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a45c:	1c5a      	adds	r2, r3, #1
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800a462:	687b      	ldr	r3, [r7, #4]
 800a464:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800a466:	b29b      	uxth	r3, r3
 800a468:	3b01      	subs	r3, #1
 800a46a:	b29b      	uxth	r3, r3
 800a46c:	687a      	ldr	r2, [r7, #4]
 800a46e:	4619      	mov	r1, r3
 800a470:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800a472:	2b00      	cmp	r3, #0
 800a474:	d15d      	bne.n	800a532 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800a476:	687b      	ldr	r3, [r7, #4]
 800a478:	681b      	ldr	r3, [r3, #0]
 800a47a:	68da      	ldr	r2, [r3, #12]
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	681b      	ldr	r3, [r3, #0]
 800a480:	f022 0220 	bic.w	r2, r2, #32
 800a484:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	681b      	ldr	r3, [r3, #0]
 800a48a:	68da      	ldr	r2, [r3, #12]
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	681b      	ldr	r3, [r3, #0]
 800a490:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800a494:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	681b      	ldr	r3, [r3, #0]
 800a49a:	695a      	ldr	r2, [r3, #20]
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	681b      	ldr	r3, [r3, #0]
 800a4a0:	f022 0201 	bic.w	r2, r2, #1
 800a4a4:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	2220      	movs	r2, #32
 800a4aa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a4ae:	687b      	ldr	r3, [r7, #4]
 800a4b0:	2200      	movs	r2, #0
 800a4b2:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a4b8:	2b01      	cmp	r3, #1
 800a4ba:	d135      	bne.n	800a528 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	2200      	movs	r2, #0
 800a4c0:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	681b      	ldr	r3, [r3, #0]
 800a4c6:	330c      	adds	r3, #12
 800a4c8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a4ca:	697b      	ldr	r3, [r7, #20]
 800a4cc:	e853 3f00 	ldrex	r3, [r3]
 800a4d0:	613b      	str	r3, [r7, #16]
   return(result);
 800a4d2:	693b      	ldr	r3, [r7, #16]
 800a4d4:	f023 0310 	bic.w	r3, r3, #16
 800a4d8:	627b      	str	r3, [r7, #36]	@ 0x24
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	681b      	ldr	r3, [r3, #0]
 800a4de:	330c      	adds	r3, #12
 800a4e0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a4e2:	623a      	str	r2, [r7, #32]
 800a4e4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a4e6:	69f9      	ldr	r1, [r7, #28]
 800a4e8:	6a3a      	ldr	r2, [r7, #32]
 800a4ea:	e841 2300 	strex	r3, r2, [r1]
 800a4ee:	61bb      	str	r3, [r7, #24]
   return(result);
 800a4f0:	69bb      	ldr	r3, [r7, #24]
 800a4f2:	2b00      	cmp	r3, #0
 800a4f4:	d1e5      	bne.n	800a4c2 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	681b      	ldr	r3, [r3, #0]
 800a4fa:	681b      	ldr	r3, [r3, #0]
 800a4fc:	f003 0310 	and.w	r3, r3, #16
 800a500:	2b10      	cmp	r3, #16
 800a502:	d10a      	bne.n	800a51a <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800a504:	2300      	movs	r3, #0
 800a506:	60fb      	str	r3, [r7, #12]
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	681b      	ldr	r3, [r3, #0]
 800a50c:	681b      	ldr	r3, [r3, #0]
 800a50e:	60fb      	str	r3, [r7, #12]
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	681b      	ldr	r3, [r3, #0]
 800a514:	685b      	ldr	r3, [r3, #4]
 800a516:	60fb      	str	r3, [r7, #12]
 800a518:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800a51e:	4619      	mov	r1, r3
 800a520:	6878      	ldr	r0, [r7, #4]
 800a522:	f7ff fe2d 	bl	800a180 <HAL_UARTEx_RxEventCallback>
 800a526:	e002      	b.n	800a52e <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800a528:	6878      	ldr	r0, [r7, #4]
 800a52a:	f7f7 febd 	bl	80022a8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800a52e:	2300      	movs	r3, #0
 800a530:	e002      	b.n	800a538 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800a532:	2300      	movs	r3, #0
 800a534:	e000      	b.n	800a538 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800a536:	2302      	movs	r3, #2
  }
}
 800a538:	4618      	mov	r0, r3
 800a53a:	3730      	adds	r7, #48	@ 0x30
 800a53c:	46bd      	mov	sp, r7
 800a53e:	bd80      	pop	{r7, pc}

0800a540 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a540:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a544:	b0c0      	sub	sp, #256	@ 0x100
 800a546:	af00      	add	r7, sp, #0
 800a548:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a54c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a550:	681b      	ldr	r3, [r3, #0]
 800a552:	691b      	ldr	r3, [r3, #16]
 800a554:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800a558:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a55c:	68d9      	ldr	r1, [r3, #12]
 800a55e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a562:	681a      	ldr	r2, [r3, #0]
 800a564:	ea40 0301 	orr.w	r3, r0, r1
 800a568:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800a56a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a56e:	689a      	ldr	r2, [r3, #8]
 800a570:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a574:	691b      	ldr	r3, [r3, #16]
 800a576:	431a      	orrs	r2, r3
 800a578:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a57c:	695b      	ldr	r3, [r3, #20]
 800a57e:	431a      	orrs	r2, r3
 800a580:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a584:	69db      	ldr	r3, [r3, #28]
 800a586:	4313      	orrs	r3, r2
 800a588:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800a58c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a590:	681b      	ldr	r3, [r3, #0]
 800a592:	68db      	ldr	r3, [r3, #12]
 800a594:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800a598:	f021 010c 	bic.w	r1, r1, #12
 800a59c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a5a0:	681a      	ldr	r2, [r3, #0]
 800a5a2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800a5a6:	430b      	orrs	r3, r1
 800a5a8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800a5aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a5ae:	681b      	ldr	r3, [r3, #0]
 800a5b0:	695b      	ldr	r3, [r3, #20]
 800a5b2:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800a5b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a5ba:	6999      	ldr	r1, [r3, #24]
 800a5bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a5c0:	681a      	ldr	r2, [r3, #0]
 800a5c2:	ea40 0301 	orr.w	r3, r0, r1
 800a5c6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800a5c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a5cc:	681a      	ldr	r2, [r3, #0]
 800a5ce:	4b8f      	ldr	r3, [pc, #572]	@ (800a80c <UART_SetConfig+0x2cc>)
 800a5d0:	429a      	cmp	r2, r3
 800a5d2:	d005      	beq.n	800a5e0 <UART_SetConfig+0xa0>
 800a5d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a5d8:	681a      	ldr	r2, [r3, #0]
 800a5da:	4b8d      	ldr	r3, [pc, #564]	@ (800a810 <UART_SetConfig+0x2d0>)
 800a5dc:	429a      	cmp	r2, r3
 800a5de:	d104      	bne.n	800a5ea <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800a5e0:	f7fd fdb2 	bl	8008148 <HAL_RCC_GetPCLK2Freq>
 800a5e4:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800a5e8:	e003      	b.n	800a5f2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800a5ea:	f7fd fd99 	bl	8008120 <HAL_RCC_GetPCLK1Freq>
 800a5ee:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a5f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a5f6:	69db      	ldr	r3, [r3, #28]
 800a5f8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a5fc:	f040 810c 	bne.w	800a818 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800a600:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800a604:	2200      	movs	r2, #0
 800a606:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800a60a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800a60e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800a612:	4622      	mov	r2, r4
 800a614:	462b      	mov	r3, r5
 800a616:	1891      	adds	r1, r2, r2
 800a618:	65b9      	str	r1, [r7, #88]	@ 0x58
 800a61a:	415b      	adcs	r3, r3
 800a61c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800a61e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800a622:	4621      	mov	r1, r4
 800a624:	eb12 0801 	adds.w	r8, r2, r1
 800a628:	4629      	mov	r1, r5
 800a62a:	eb43 0901 	adc.w	r9, r3, r1
 800a62e:	f04f 0200 	mov.w	r2, #0
 800a632:	f04f 0300 	mov.w	r3, #0
 800a636:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800a63a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800a63e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800a642:	4690      	mov	r8, r2
 800a644:	4699      	mov	r9, r3
 800a646:	4623      	mov	r3, r4
 800a648:	eb18 0303 	adds.w	r3, r8, r3
 800a64c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800a650:	462b      	mov	r3, r5
 800a652:	eb49 0303 	adc.w	r3, r9, r3
 800a656:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800a65a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a65e:	685b      	ldr	r3, [r3, #4]
 800a660:	2200      	movs	r2, #0
 800a662:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800a666:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800a66a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800a66e:	460b      	mov	r3, r1
 800a670:	18db      	adds	r3, r3, r3
 800a672:	653b      	str	r3, [r7, #80]	@ 0x50
 800a674:	4613      	mov	r3, r2
 800a676:	eb42 0303 	adc.w	r3, r2, r3
 800a67a:	657b      	str	r3, [r7, #84]	@ 0x54
 800a67c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800a680:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800a684:	f7f6 fb08 	bl	8000c98 <__aeabi_uldivmod>
 800a688:	4602      	mov	r2, r0
 800a68a:	460b      	mov	r3, r1
 800a68c:	4b61      	ldr	r3, [pc, #388]	@ (800a814 <UART_SetConfig+0x2d4>)
 800a68e:	fba3 2302 	umull	r2, r3, r3, r2
 800a692:	095b      	lsrs	r3, r3, #5
 800a694:	011c      	lsls	r4, r3, #4
 800a696:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800a69a:	2200      	movs	r2, #0
 800a69c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800a6a0:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800a6a4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800a6a8:	4642      	mov	r2, r8
 800a6aa:	464b      	mov	r3, r9
 800a6ac:	1891      	adds	r1, r2, r2
 800a6ae:	64b9      	str	r1, [r7, #72]	@ 0x48
 800a6b0:	415b      	adcs	r3, r3
 800a6b2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a6b4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800a6b8:	4641      	mov	r1, r8
 800a6ba:	eb12 0a01 	adds.w	sl, r2, r1
 800a6be:	4649      	mov	r1, r9
 800a6c0:	eb43 0b01 	adc.w	fp, r3, r1
 800a6c4:	f04f 0200 	mov.w	r2, #0
 800a6c8:	f04f 0300 	mov.w	r3, #0
 800a6cc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800a6d0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800a6d4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800a6d8:	4692      	mov	sl, r2
 800a6da:	469b      	mov	fp, r3
 800a6dc:	4643      	mov	r3, r8
 800a6de:	eb1a 0303 	adds.w	r3, sl, r3
 800a6e2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800a6e6:	464b      	mov	r3, r9
 800a6e8:	eb4b 0303 	adc.w	r3, fp, r3
 800a6ec:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800a6f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a6f4:	685b      	ldr	r3, [r3, #4]
 800a6f6:	2200      	movs	r2, #0
 800a6f8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800a6fc:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800a700:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800a704:	460b      	mov	r3, r1
 800a706:	18db      	adds	r3, r3, r3
 800a708:	643b      	str	r3, [r7, #64]	@ 0x40
 800a70a:	4613      	mov	r3, r2
 800a70c:	eb42 0303 	adc.w	r3, r2, r3
 800a710:	647b      	str	r3, [r7, #68]	@ 0x44
 800a712:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800a716:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800a71a:	f7f6 fabd 	bl	8000c98 <__aeabi_uldivmod>
 800a71e:	4602      	mov	r2, r0
 800a720:	460b      	mov	r3, r1
 800a722:	4611      	mov	r1, r2
 800a724:	4b3b      	ldr	r3, [pc, #236]	@ (800a814 <UART_SetConfig+0x2d4>)
 800a726:	fba3 2301 	umull	r2, r3, r3, r1
 800a72a:	095b      	lsrs	r3, r3, #5
 800a72c:	2264      	movs	r2, #100	@ 0x64
 800a72e:	fb02 f303 	mul.w	r3, r2, r3
 800a732:	1acb      	subs	r3, r1, r3
 800a734:	00db      	lsls	r3, r3, #3
 800a736:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800a73a:	4b36      	ldr	r3, [pc, #216]	@ (800a814 <UART_SetConfig+0x2d4>)
 800a73c:	fba3 2302 	umull	r2, r3, r3, r2
 800a740:	095b      	lsrs	r3, r3, #5
 800a742:	005b      	lsls	r3, r3, #1
 800a744:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800a748:	441c      	add	r4, r3
 800a74a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800a74e:	2200      	movs	r2, #0
 800a750:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800a754:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800a758:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800a75c:	4642      	mov	r2, r8
 800a75e:	464b      	mov	r3, r9
 800a760:	1891      	adds	r1, r2, r2
 800a762:	63b9      	str	r1, [r7, #56]	@ 0x38
 800a764:	415b      	adcs	r3, r3
 800a766:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a768:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800a76c:	4641      	mov	r1, r8
 800a76e:	1851      	adds	r1, r2, r1
 800a770:	6339      	str	r1, [r7, #48]	@ 0x30
 800a772:	4649      	mov	r1, r9
 800a774:	414b      	adcs	r3, r1
 800a776:	637b      	str	r3, [r7, #52]	@ 0x34
 800a778:	f04f 0200 	mov.w	r2, #0
 800a77c:	f04f 0300 	mov.w	r3, #0
 800a780:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800a784:	4659      	mov	r1, fp
 800a786:	00cb      	lsls	r3, r1, #3
 800a788:	4651      	mov	r1, sl
 800a78a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a78e:	4651      	mov	r1, sl
 800a790:	00ca      	lsls	r2, r1, #3
 800a792:	4610      	mov	r0, r2
 800a794:	4619      	mov	r1, r3
 800a796:	4603      	mov	r3, r0
 800a798:	4642      	mov	r2, r8
 800a79a:	189b      	adds	r3, r3, r2
 800a79c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800a7a0:	464b      	mov	r3, r9
 800a7a2:	460a      	mov	r2, r1
 800a7a4:	eb42 0303 	adc.w	r3, r2, r3
 800a7a8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800a7ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a7b0:	685b      	ldr	r3, [r3, #4]
 800a7b2:	2200      	movs	r2, #0
 800a7b4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800a7b8:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800a7bc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800a7c0:	460b      	mov	r3, r1
 800a7c2:	18db      	adds	r3, r3, r3
 800a7c4:	62bb      	str	r3, [r7, #40]	@ 0x28
 800a7c6:	4613      	mov	r3, r2
 800a7c8:	eb42 0303 	adc.w	r3, r2, r3
 800a7cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a7ce:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800a7d2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800a7d6:	f7f6 fa5f 	bl	8000c98 <__aeabi_uldivmod>
 800a7da:	4602      	mov	r2, r0
 800a7dc:	460b      	mov	r3, r1
 800a7de:	4b0d      	ldr	r3, [pc, #52]	@ (800a814 <UART_SetConfig+0x2d4>)
 800a7e0:	fba3 1302 	umull	r1, r3, r3, r2
 800a7e4:	095b      	lsrs	r3, r3, #5
 800a7e6:	2164      	movs	r1, #100	@ 0x64
 800a7e8:	fb01 f303 	mul.w	r3, r1, r3
 800a7ec:	1ad3      	subs	r3, r2, r3
 800a7ee:	00db      	lsls	r3, r3, #3
 800a7f0:	3332      	adds	r3, #50	@ 0x32
 800a7f2:	4a08      	ldr	r2, [pc, #32]	@ (800a814 <UART_SetConfig+0x2d4>)
 800a7f4:	fba2 2303 	umull	r2, r3, r2, r3
 800a7f8:	095b      	lsrs	r3, r3, #5
 800a7fa:	f003 0207 	and.w	r2, r3, #7
 800a7fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a802:	681b      	ldr	r3, [r3, #0]
 800a804:	4422      	add	r2, r4
 800a806:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800a808:	e106      	b.n	800aa18 <UART_SetConfig+0x4d8>
 800a80a:	bf00      	nop
 800a80c:	40011000 	.word	0x40011000
 800a810:	40011400 	.word	0x40011400
 800a814:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800a818:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800a81c:	2200      	movs	r2, #0
 800a81e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800a822:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800a826:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800a82a:	4642      	mov	r2, r8
 800a82c:	464b      	mov	r3, r9
 800a82e:	1891      	adds	r1, r2, r2
 800a830:	6239      	str	r1, [r7, #32]
 800a832:	415b      	adcs	r3, r3
 800a834:	627b      	str	r3, [r7, #36]	@ 0x24
 800a836:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800a83a:	4641      	mov	r1, r8
 800a83c:	1854      	adds	r4, r2, r1
 800a83e:	4649      	mov	r1, r9
 800a840:	eb43 0501 	adc.w	r5, r3, r1
 800a844:	f04f 0200 	mov.w	r2, #0
 800a848:	f04f 0300 	mov.w	r3, #0
 800a84c:	00eb      	lsls	r3, r5, #3
 800a84e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800a852:	00e2      	lsls	r2, r4, #3
 800a854:	4614      	mov	r4, r2
 800a856:	461d      	mov	r5, r3
 800a858:	4643      	mov	r3, r8
 800a85a:	18e3      	adds	r3, r4, r3
 800a85c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800a860:	464b      	mov	r3, r9
 800a862:	eb45 0303 	adc.w	r3, r5, r3
 800a866:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800a86a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a86e:	685b      	ldr	r3, [r3, #4]
 800a870:	2200      	movs	r2, #0
 800a872:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800a876:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800a87a:	f04f 0200 	mov.w	r2, #0
 800a87e:	f04f 0300 	mov.w	r3, #0
 800a882:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800a886:	4629      	mov	r1, r5
 800a888:	008b      	lsls	r3, r1, #2
 800a88a:	4621      	mov	r1, r4
 800a88c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a890:	4621      	mov	r1, r4
 800a892:	008a      	lsls	r2, r1, #2
 800a894:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800a898:	f7f6 f9fe 	bl	8000c98 <__aeabi_uldivmod>
 800a89c:	4602      	mov	r2, r0
 800a89e:	460b      	mov	r3, r1
 800a8a0:	4b60      	ldr	r3, [pc, #384]	@ (800aa24 <UART_SetConfig+0x4e4>)
 800a8a2:	fba3 2302 	umull	r2, r3, r3, r2
 800a8a6:	095b      	lsrs	r3, r3, #5
 800a8a8:	011c      	lsls	r4, r3, #4
 800a8aa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800a8ae:	2200      	movs	r2, #0
 800a8b0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800a8b4:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800a8b8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800a8bc:	4642      	mov	r2, r8
 800a8be:	464b      	mov	r3, r9
 800a8c0:	1891      	adds	r1, r2, r2
 800a8c2:	61b9      	str	r1, [r7, #24]
 800a8c4:	415b      	adcs	r3, r3
 800a8c6:	61fb      	str	r3, [r7, #28]
 800a8c8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800a8cc:	4641      	mov	r1, r8
 800a8ce:	1851      	adds	r1, r2, r1
 800a8d0:	6139      	str	r1, [r7, #16]
 800a8d2:	4649      	mov	r1, r9
 800a8d4:	414b      	adcs	r3, r1
 800a8d6:	617b      	str	r3, [r7, #20]
 800a8d8:	f04f 0200 	mov.w	r2, #0
 800a8dc:	f04f 0300 	mov.w	r3, #0
 800a8e0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800a8e4:	4659      	mov	r1, fp
 800a8e6:	00cb      	lsls	r3, r1, #3
 800a8e8:	4651      	mov	r1, sl
 800a8ea:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a8ee:	4651      	mov	r1, sl
 800a8f0:	00ca      	lsls	r2, r1, #3
 800a8f2:	4610      	mov	r0, r2
 800a8f4:	4619      	mov	r1, r3
 800a8f6:	4603      	mov	r3, r0
 800a8f8:	4642      	mov	r2, r8
 800a8fa:	189b      	adds	r3, r3, r2
 800a8fc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800a900:	464b      	mov	r3, r9
 800a902:	460a      	mov	r2, r1
 800a904:	eb42 0303 	adc.w	r3, r2, r3
 800a908:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800a90c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a910:	685b      	ldr	r3, [r3, #4]
 800a912:	2200      	movs	r2, #0
 800a914:	67bb      	str	r3, [r7, #120]	@ 0x78
 800a916:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800a918:	f04f 0200 	mov.w	r2, #0
 800a91c:	f04f 0300 	mov.w	r3, #0
 800a920:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800a924:	4649      	mov	r1, r9
 800a926:	008b      	lsls	r3, r1, #2
 800a928:	4641      	mov	r1, r8
 800a92a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a92e:	4641      	mov	r1, r8
 800a930:	008a      	lsls	r2, r1, #2
 800a932:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800a936:	f7f6 f9af 	bl	8000c98 <__aeabi_uldivmod>
 800a93a:	4602      	mov	r2, r0
 800a93c:	460b      	mov	r3, r1
 800a93e:	4611      	mov	r1, r2
 800a940:	4b38      	ldr	r3, [pc, #224]	@ (800aa24 <UART_SetConfig+0x4e4>)
 800a942:	fba3 2301 	umull	r2, r3, r3, r1
 800a946:	095b      	lsrs	r3, r3, #5
 800a948:	2264      	movs	r2, #100	@ 0x64
 800a94a:	fb02 f303 	mul.w	r3, r2, r3
 800a94e:	1acb      	subs	r3, r1, r3
 800a950:	011b      	lsls	r3, r3, #4
 800a952:	3332      	adds	r3, #50	@ 0x32
 800a954:	4a33      	ldr	r2, [pc, #204]	@ (800aa24 <UART_SetConfig+0x4e4>)
 800a956:	fba2 2303 	umull	r2, r3, r2, r3
 800a95a:	095b      	lsrs	r3, r3, #5
 800a95c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800a960:	441c      	add	r4, r3
 800a962:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800a966:	2200      	movs	r2, #0
 800a968:	673b      	str	r3, [r7, #112]	@ 0x70
 800a96a:	677a      	str	r2, [r7, #116]	@ 0x74
 800a96c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800a970:	4642      	mov	r2, r8
 800a972:	464b      	mov	r3, r9
 800a974:	1891      	adds	r1, r2, r2
 800a976:	60b9      	str	r1, [r7, #8]
 800a978:	415b      	adcs	r3, r3
 800a97a:	60fb      	str	r3, [r7, #12]
 800a97c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800a980:	4641      	mov	r1, r8
 800a982:	1851      	adds	r1, r2, r1
 800a984:	6039      	str	r1, [r7, #0]
 800a986:	4649      	mov	r1, r9
 800a988:	414b      	adcs	r3, r1
 800a98a:	607b      	str	r3, [r7, #4]
 800a98c:	f04f 0200 	mov.w	r2, #0
 800a990:	f04f 0300 	mov.w	r3, #0
 800a994:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800a998:	4659      	mov	r1, fp
 800a99a:	00cb      	lsls	r3, r1, #3
 800a99c:	4651      	mov	r1, sl
 800a99e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a9a2:	4651      	mov	r1, sl
 800a9a4:	00ca      	lsls	r2, r1, #3
 800a9a6:	4610      	mov	r0, r2
 800a9a8:	4619      	mov	r1, r3
 800a9aa:	4603      	mov	r3, r0
 800a9ac:	4642      	mov	r2, r8
 800a9ae:	189b      	adds	r3, r3, r2
 800a9b0:	66bb      	str	r3, [r7, #104]	@ 0x68
 800a9b2:	464b      	mov	r3, r9
 800a9b4:	460a      	mov	r2, r1
 800a9b6:	eb42 0303 	adc.w	r3, r2, r3
 800a9ba:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800a9bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a9c0:	685b      	ldr	r3, [r3, #4]
 800a9c2:	2200      	movs	r2, #0
 800a9c4:	663b      	str	r3, [r7, #96]	@ 0x60
 800a9c6:	667a      	str	r2, [r7, #100]	@ 0x64
 800a9c8:	f04f 0200 	mov.w	r2, #0
 800a9cc:	f04f 0300 	mov.w	r3, #0
 800a9d0:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800a9d4:	4649      	mov	r1, r9
 800a9d6:	008b      	lsls	r3, r1, #2
 800a9d8:	4641      	mov	r1, r8
 800a9da:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a9de:	4641      	mov	r1, r8
 800a9e0:	008a      	lsls	r2, r1, #2
 800a9e2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800a9e6:	f7f6 f957 	bl	8000c98 <__aeabi_uldivmod>
 800a9ea:	4602      	mov	r2, r0
 800a9ec:	460b      	mov	r3, r1
 800a9ee:	4b0d      	ldr	r3, [pc, #52]	@ (800aa24 <UART_SetConfig+0x4e4>)
 800a9f0:	fba3 1302 	umull	r1, r3, r3, r2
 800a9f4:	095b      	lsrs	r3, r3, #5
 800a9f6:	2164      	movs	r1, #100	@ 0x64
 800a9f8:	fb01 f303 	mul.w	r3, r1, r3
 800a9fc:	1ad3      	subs	r3, r2, r3
 800a9fe:	011b      	lsls	r3, r3, #4
 800aa00:	3332      	adds	r3, #50	@ 0x32
 800aa02:	4a08      	ldr	r2, [pc, #32]	@ (800aa24 <UART_SetConfig+0x4e4>)
 800aa04:	fba2 2303 	umull	r2, r3, r2, r3
 800aa08:	095b      	lsrs	r3, r3, #5
 800aa0a:	f003 020f 	and.w	r2, r3, #15
 800aa0e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800aa12:	681b      	ldr	r3, [r3, #0]
 800aa14:	4422      	add	r2, r4
 800aa16:	609a      	str	r2, [r3, #8]
}
 800aa18:	bf00      	nop
 800aa1a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800aa1e:	46bd      	mov	sp, r7
 800aa20:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800aa24:	51eb851f 	.word	0x51eb851f

0800aa28 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800aa28:	b580      	push	{r7, lr}
 800aa2a:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 800aa2c:	4904      	ldr	r1, [pc, #16]	@ (800aa40 <MX_FATFS_Init+0x18>)
 800aa2e:	4805      	ldr	r0, [pc, #20]	@ (800aa44 <MX_FATFS_Init+0x1c>)
 800aa30:	f000 f8b0 	bl	800ab94 <FATFS_LinkDriver>
 800aa34:	4603      	mov	r3, r0
 800aa36:	461a      	mov	r2, r3
 800aa38:	4b03      	ldr	r3, [pc, #12]	@ (800aa48 <MX_FATFS_Init+0x20>)
 800aa3a:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800aa3c:	bf00      	nop
 800aa3e:	bd80      	pop	{r7, pc}
 800aa40:	200140c0 	.word	0x200140c0
 800aa44:	2000d120 	.word	0x2000d120
 800aa48:	200140bc 	.word	0x200140bc

0800aa4c <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 800aa4c:	b480      	push	{r7}
 800aa4e:	b083      	sub	sp, #12
 800aa50:	af00      	add	r7, sp, #0
 800aa52:	4603      	mov	r3, r0
 800aa54:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    Stat = STA_NOINIT;
 800aa56:	4b06      	ldr	r3, [pc, #24]	@ (800aa70 <USER_initialize+0x24>)
 800aa58:	2201      	movs	r2, #1
 800aa5a:	701a      	strb	r2, [r3, #0]
    return Stat;
 800aa5c:	4b04      	ldr	r3, [pc, #16]	@ (800aa70 <USER_initialize+0x24>)
 800aa5e:	781b      	ldrb	r3, [r3, #0]
 800aa60:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 800aa62:	4618      	mov	r0, r3
 800aa64:	370c      	adds	r7, #12
 800aa66:	46bd      	mov	sp, r7
 800aa68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa6c:	4770      	bx	lr
 800aa6e:	bf00      	nop
 800aa70:	2000d11d 	.word	0x2000d11d

0800aa74 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 800aa74:	b480      	push	{r7}
 800aa76:	b083      	sub	sp, #12
 800aa78:	af00      	add	r7, sp, #0
 800aa7a:	4603      	mov	r3, r0
 800aa7c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    Stat = STA_NOINIT;
 800aa7e:	4b06      	ldr	r3, [pc, #24]	@ (800aa98 <USER_status+0x24>)
 800aa80:	2201      	movs	r2, #1
 800aa82:	701a      	strb	r2, [r3, #0]
    return Stat;
 800aa84:	4b04      	ldr	r3, [pc, #16]	@ (800aa98 <USER_status+0x24>)
 800aa86:	781b      	ldrb	r3, [r3, #0]
 800aa88:	b2db      	uxtb	r3, r3
  /* USER CODE END STATUS */
}
 800aa8a:	4618      	mov	r0, r3
 800aa8c:	370c      	adds	r7, #12
 800aa8e:	46bd      	mov	sp, r7
 800aa90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa94:	4770      	bx	lr
 800aa96:	bf00      	nop
 800aa98:	2000d11d 	.word	0x2000d11d

0800aa9c <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 800aa9c:	b480      	push	{r7}
 800aa9e:	b085      	sub	sp, #20
 800aaa0:	af00      	add	r7, sp, #0
 800aaa2:	60b9      	str	r1, [r7, #8]
 800aaa4:	607a      	str	r2, [r7, #4]
 800aaa6:	603b      	str	r3, [r7, #0]
 800aaa8:	4603      	mov	r3, r0
 800aaaa:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return RES_OK;
 800aaac:	2300      	movs	r3, #0
  /* USER CODE END READ */
}
 800aaae:	4618      	mov	r0, r3
 800aab0:	3714      	adds	r7, #20
 800aab2:	46bd      	mov	sp, r7
 800aab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aab8:	4770      	bx	lr

0800aaba <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 800aaba:	b480      	push	{r7}
 800aabc:	b085      	sub	sp, #20
 800aabe:	af00      	add	r7, sp, #0
 800aac0:	60b9      	str	r1, [r7, #8]
 800aac2:	607a      	str	r2, [r7, #4]
 800aac4:	603b      	str	r3, [r7, #0]
 800aac6:	4603      	mov	r3, r0
 800aac8:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return RES_OK;
 800aaca:	2300      	movs	r3, #0
  /* USER CODE END WRITE */
}
 800aacc:	4618      	mov	r0, r3
 800aace:	3714      	adds	r7, #20
 800aad0:	46bd      	mov	sp, r7
 800aad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aad6:	4770      	bx	lr

0800aad8 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 800aad8:	b480      	push	{r7}
 800aada:	b085      	sub	sp, #20
 800aadc:	af00      	add	r7, sp, #0
 800aade:	4603      	mov	r3, r0
 800aae0:	603a      	str	r2, [r7, #0]
 800aae2:	71fb      	strb	r3, [r7, #7]
 800aae4:	460b      	mov	r3, r1
 800aae6:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    DRESULT res = RES_ERROR;
 800aae8:	2301      	movs	r3, #1
 800aaea:	73fb      	strb	r3, [r7, #15]
    return res;
 800aaec:	7bfb      	ldrb	r3, [r7, #15]
  /* USER CODE END IOCTL */
}
 800aaee:	4618      	mov	r0, r3
 800aaf0:	3714      	adds	r7, #20
 800aaf2:	46bd      	mov	sp, r7
 800aaf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaf8:	4770      	bx	lr
	...

0800aafc <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800aafc:	b480      	push	{r7}
 800aafe:	b087      	sub	sp, #28
 800ab00:	af00      	add	r7, sp, #0
 800ab02:	60f8      	str	r0, [r7, #12]
 800ab04:	60b9      	str	r1, [r7, #8]
 800ab06:	4613      	mov	r3, r2
 800ab08:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800ab0a:	2301      	movs	r3, #1
 800ab0c:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800ab0e:	2300      	movs	r3, #0
 800ab10:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800ab12:	4b1f      	ldr	r3, [pc, #124]	@ (800ab90 <FATFS_LinkDriverEx+0x94>)
 800ab14:	7a5b      	ldrb	r3, [r3, #9]
 800ab16:	b2db      	uxtb	r3, r3
 800ab18:	2b00      	cmp	r3, #0
 800ab1a:	d131      	bne.n	800ab80 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800ab1c:	4b1c      	ldr	r3, [pc, #112]	@ (800ab90 <FATFS_LinkDriverEx+0x94>)
 800ab1e:	7a5b      	ldrb	r3, [r3, #9]
 800ab20:	b2db      	uxtb	r3, r3
 800ab22:	461a      	mov	r2, r3
 800ab24:	4b1a      	ldr	r3, [pc, #104]	@ (800ab90 <FATFS_LinkDriverEx+0x94>)
 800ab26:	2100      	movs	r1, #0
 800ab28:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800ab2a:	4b19      	ldr	r3, [pc, #100]	@ (800ab90 <FATFS_LinkDriverEx+0x94>)
 800ab2c:	7a5b      	ldrb	r3, [r3, #9]
 800ab2e:	b2db      	uxtb	r3, r3
 800ab30:	4a17      	ldr	r2, [pc, #92]	@ (800ab90 <FATFS_LinkDriverEx+0x94>)
 800ab32:	009b      	lsls	r3, r3, #2
 800ab34:	4413      	add	r3, r2
 800ab36:	68fa      	ldr	r2, [r7, #12]
 800ab38:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800ab3a:	4b15      	ldr	r3, [pc, #84]	@ (800ab90 <FATFS_LinkDriverEx+0x94>)
 800ab3c:	7a5b      	ldrb	r3, [r3, #9]
 800ab3e:	b2db      	uxtb	r3, r3
 800ab40:	461a      	mov	r2, r3
 800ab42:	4b13      	ldr	r3, [pc, #76]	@ (800ab90 <FATFS_LinkDriverEx+0x94>)
 800ab44:	4413      	add	r3, r2
 800ab46:	79fa      	ldrb	r2, [r7, #7]
 800ab48:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800ab4a:	4b11      	ldr	r3, [pc, #68]	@ (800ab90 <FATFS_LinkDriverEx+0x94>)
 800ab4c:	7a5b      	ldrb	r3, [r3, #9]
 800ab4e:	b2db      	uxtb	r3, r3
 800ab50:	1c5a      	adds	r2, r3, #1
 800ab52:	b2d1      	uxtb	r1, r2
 800ab54:	4a0e      	ldr	r2, [pc, #56]	@ (800ab90 <FATFS_LinkDriverEx+0x94>)
 800ab56:	7251      	strb	r1, [r2, #9]
 800ab58:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800ab5a:	7dbb      	ldrb	r3, [r7, #22]
 800ab5c:	3330      	adds	r3, #48	@ 0x30
 800ab5e:	b2da      	uxtb	r2, r3
 800ab60:	68bb      	ldr	r3, [r7, #8]
 800ab62:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800ab64:	68bb      	ldr	r3, [r7, #8]
 800ab66:	3301      	adds	r3, #1
 800ab68:	223a      	movs	r2, #58	@ 0x3a
 800ab6a:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800ab6c:	68bb      	ldr	r3, [r7, #8]
 800ab6e:	3302      	adds	r3, #2
 800ab70:	222f      	movs	r2, #47	@ 0x2f
 800ab72:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800ab74:	68bb      	ldr	r3, [r7, #8]
 800ab76:	3303      	adds	r3, #3
 800ab78:	2200      	movs	r2, #0
 800ab7a:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800ab7c:	2300      	movs	r3, #0
 800ab7e:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800ab80:	7dfb      	ldrb	r3, [r7, #23]
}
 800ab82:	4618      	mov	r0, r3
 800ab84:	371c      	adds	r7, #28
 800ab86:	46bd      	mov	sp, r7
 800ab88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab8c:	4770      	bx	lr
 800ab8e:	bf00      	nop
 800ab90:	200140c4 	.word	0x200140c4

0800ab94 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800ab94:	b580      	push	{r7, lr}
 800ab96:	b082      	sub	sp, #8
 800ab98:	af00      	add	r7, sp, #0
 800ab9a:	6078      	str	r0, [r7, #4]
 800ab9c:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800ab9e:	2200      	movs	r2, #0
 800aba0:	6839      	ldr	r1, [r7, #0]
 800aba2:	6878      	ldr	r0, [r7, #4]
 800aba4:	f7ff ffaa 	bl	800aafc <FATFS_LinkDriverEx>
 800aba8:	4603      	mov	r3, r0
}
 800abaa:	4618      	mov	r0, r3
 800abac:	3708      	adds	r7, #8
 800abae:	46bd      	mov	sp, r7
 800abb0:	bd80      	pop	{r7, pc}

0800abb2 <__cvt>:
 800abb2:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800abb6:	ec57 6b10 	vmov	r6, r7, d0
 800abba:	2f00      	cmp	r7, #0
 800abbc:	460c      	mov	r4, r1
 800abbe:	4619      	mov	r1, r3
 800abc0:	463b      	mov	r3, r7
 800abc2:	bfbb      	ittet	lt
 800abc4:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800abc8:	461f      	movlt	r7, r3
 800abca:	2300      	movge	r3, #0
 800abcc:	232d      	movlt	r3, #45	@ 0x2d
 800abce:	700b      	strb	r3, [r1, #0]
 800abd0:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800abd2:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800abd6:	4691      	mov	r9, r2
 800abd8:	f023 0820 	bic.w	r8, r3, #32
 800abdc:	bfbc      	itt	lt
 800abde:	4632      	movlt	r2, r6
 800abe0:	4616      	movlt	r6, r2
 800abe2:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800abe6:	d005      	beq.n	800abf4 <__cvt+0x42>
 800abe8:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800abec:	d100      	bne.n	800abf0 <__cvt+0x3e>
 800abee:	3401      	adds	r4, #1
 800abf0:	2102      	movs	r1, #2
 800abf2:	e000      	b.n	800abf6 <__cvt+0x44>
 800abf4:	2103      	movs	r1, #3
 800abf6:	ab03      	add	r3, sp, #12
 800abf8:	9301      	str	r3, [sp, #4]
 800abfa:	ab02      	add	r3, sp, #8
 800abfc:	9300      	str	r3, [sp, #0]
 800abfe:	ec47 6b10 	vmov	d0, r6, r7
 800ac02:	4653      	mov	r3, sl
 800ac04:	4622      	mov	r2, r4
 800ac06:	f001 f9d3 	bl	800bfb0 <_dtoa_r>
 800ac0a:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800ac0e:	4605      	mov	r5, r0
 800ac10:	d119      	bne.n	800ac46 <__cvt+0x94>
 800ac12:	f019 0f01 	tst.w	r9, #1
 800ac16:	d00e      	beq.n	800ac36 <__cvt+0x84>
 800ac18:	eb00 0904 	add.w	r9, r0, r4
 800ac1c:	2200      	movs	r2, #0
 800ac1e:	2300      	movs	r3, #0
 800ac20:	4630      	mov	r0, r6
 800ac22:	4639      	mov	r1, r7
 800ac24:	f7f5 ff58 	bl	8000ad8 <__aeabi_dcmpeq>
 800ac28:	b108      	cbz	r0, 800ac2e <__cvt+0x7c>
 800ac2a:	f8cd 900c 	str.w	r9, [sp, #12]
 800ac2e:	2230      	movs	r2, #48	@ 0x30
 800ac30:	9b03      	ldr	r3, [sp, #12]
 800ac32:	454b      	cmp	r3, r9
 800ac34:	d31e      	bcc.n	800ac74 <__cvt+0xc2>
 800ac36:	9b03      	ldr	r3, [sp, #12]
 800ac38:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ac3a:	1b5b      	subs	r3, r3, r5
 800ac3c:	4628      	mov	r0, r5
 800ac3e:	6013      	str	r3, [r2, #0]
 800ac40:	b004      	add	sp, #16
 800ac42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ac46:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800ac4a:	eb00 0904 	add.w	r9, r0, r4
 800ac4e:	d1e5      	bne.n	800ac1c <__cvt+0x6a>
 800ac50:	7803      	ldrb	r3, [r0, #0]
 800ac52:	2b30      	cmp	r3, #48	@ 0x30
 800ac54:	d10a      	bne.n	800ac6c <__cvt+0xba>
 800ac56:	2200      	movs	r2, #0
 800ac58:	2300      	movs	r3, #0
 800ac5a:	4630      	mov	r0, r6
 800ac5c:	4639      	mov	r1, r7
 800ac5e:	f7f5 ff3b 	bl	8000ad8 <__aeabi_dcmpeq>
 800ac62:	b918      	cbnz	r0, 800ac6c <__cvt+0xba>
 800ac64:	f1c4 0401 	rsb	r4, r4, #1
 800ac68:	f8ca 4000 	str.w	r4, [sl]
 800ac6c:	f8da 3000 	ldr.w	r3, [sl]
 800ac70:	4499      	add	r9, r3
 800ac72:	e7d3      	b.n	800ac1c <__cvt+0x6a>
 800ac74:	1c59      	adds	r1, r3, #1
 800ac76:	9103      	str	r1, [sp, #12]
 800ac78:	701a      	strb	r2, [r3, #0]
 800ac7a:	e7d9      	b.n	800ac30 <__cvt+0x7e>

0800ac7c <__exponent>:
 800ac7c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ac7e:	2900      	cmp	r1, #0
 800ac80:	bfba      	itte	lt
 800ac82:	4249      	neglt	r1, r1
 800ac84:	232d      	movlt	r3, #45	@ 0x2d
 800ac86:	232b      	movge	r3, #43	@ 0x2b
 800ac88:	2909      	cmp	r1, #9
 800ac8a:	7002      	strb	r2, [r0, #0]
 800ac8c:	7043      	strb	r3, [r0, #1]
 800ac8e:	dd29      	ble.n	800ace4 <__exponent+0x68>
 800ac90:	f10d 0307 	add.w	r3, sp, #7
 800ac94:	461d      	mov	r5, r3
 800ac96:	270a      	movs	r7, #10
 800ac98:	461a      	mov	r2, r3
 800ac9a:	fbb1 f6f7 	udiv	r6, r1, r7
 800ac9e:	fb07 1416 	mls	r4, r7, r6, r1
 800aca2:	3430      	adds	r4, #48	@ 0x30
 800aca4:	f802 4c01 	strb.w	r4, [r2, #-1]
 800aca8:	460c      	mov	r4, r1
 800acaa:	2c63      	cmp	r4, #99	@ 0x63
 800acac:	f103 33ff 	add.w	r3, r3, #4294967295
 800acb0:	4631      	mov	r1, r6
 800acb2:	dcf1      	bgt.n	800ac98 <__exponent+0x1c>
 800acb4:	3130      	adds	r1, #48	@ 0x30
 800acb6:	1e94      	subs	r4, r2, #2
 800acb8:	f803 1c01 	strb.w	r1, [r3, #-1]
 800acbc:	1c41      	adds	r1, r0, #1
 800acbe:	4623      	mov	r3, r4
 800acc0:	42ab      	cmp	r3, r5
 800acc2:	d30a      	bcc.n	800acda <__exponent+0x5e>
 800acc4:	f10d 0309 	add.w	r3, sp, #9
 800acc8:	1a9b      	subs	r3, r3, r2
 800acca:	42ac      	cmp	r4, r5
 800accc:	bf88      	it	hi
 800acce:	2300      	movhi	r3, #0
 800acd0:	3302      	adds	r3, #2
 800acd2:	4403      	add	r3, r0
 800acd4:	1a18      	subs	r0, r3, r0
 800acd6:	b003      	add	sp, #12
 800acd8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800acda:	f813 6b01 	ldrb.w	r6, [r3], #1
 800acde:	f801 6f01 	strb.w	r6, [r1, #1]!
 800ace2:	e7ed      	b.n	800acc0 <__exponent+0x44>
 800ace4:	2330      	movs	r3, #48	@ 0x30
 800ace6:	3130      	adds	r1, #48	@ 0x30
 800ace8:	7083      	strb	r3, [r0, #2]
 800acea:	70c1      	strb	r1, [r0, #3]
 800acec:	1d03      	adds	r3, r0, #4
 800acee:	e7f1      	b.n	800acd4 <__exponent+0x58>

0800acf0 <_printf_float>:
 800acf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800acf4:	b08d      	sub	sp, #52	@ 0x34
 800acf6:	460c      	mov	r4, r1
 800acf8:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800acfc:	4616      	mov	r6, r2
 800acfe:	461f      	mov	r7, r3
 800ad00:	4605      	mov	r5, r0
 800ad02:	f001 f823 	bl	800bd4c <_localeconv_r>
 800ad06:	6803      	ldr	r3, [r0, #0]
 800ad08:	9304      	str	r3, [sp, #16]
 800ad0a:	4618      	mov	r0, r3
 800ad0c:	f7f5 fab8 	bl	8000280 <strlen>
 800ad10:	2300      	movs	r3, #0
 800ad12:	930a      	str	r3, [sp, #40]	@ 0x28
 800ad14:	f8d8 3000 	ldr.w	r3, [r8]
 800ad18:	9005      	str	r0, [sp, #20]
 800ad1a:	3307      	adds	r3, #7
 800ad1c:	f023 0307 	bic.w	r3, r3, #7
 800ad20:	f103 0208 	add.w	r2, r3, #8
 800ad24:	f894 a018 	ldrb.w	sl, [r4, #24]
 800ad28:	f8d4 b000 	ldr.w	fp, [r4]
 800ad2c:	f8c8 2000 	str.w	r2, [r8]
 800ad30:	e9d3 8900 	ldrd	r8, r9, [r3]
 800ad34:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800ad38:	9307      	str	r3, [sp, #28]
 800ad3a:	f8cd 8018 	str.w	r8, [sp, #24]
 800ad3e:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800ad42:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ad46:	4b9c      	ldr	r3, [pc, #624]	@ (800afb8 <_printf_float+0x2c8>)
 800ad48:	f04f 32ff 	mov.w	r2, #4294967295
 800ad4c:	f7f5 fef6 	bl	8000b3c <__aeabi_dcmpun>
 800ad50:	bb70      	cbnz	r0, 800adb0 <_printf_float+0xc0>
 800ad52:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ad56:	4b98      	ldr	r3, [pc, #608]	@ (800afb8 <_printf_float+0x2c8>)
 800ad58:	f04f 32ff 	mov.w	r2, #4294967295
 800ad5c:	f7f5 fed0 	bl	8000b00 <__aeabi_dcmple>
 800ad60:	bb30      	cbnz	r0, 800adb0 <_printf_float+0xc0>
 800ad62:	2200      	movs	r2, #0
 800ad64:	2300      	movs	r3, #0
 800ad66:	4640      	mov	r0, r8
 800ad68:	4649      	mov	r1, r9
 800ad6a:	f7f5 febf 	bl	8000aec <__aeabi_dcmplt>
 800ad6e:	b110      	cbz	r0, 800ad76 <_printf_float+0x86>
 800ad70:	232d      	movs	r3, #45	@ 0x2d
 800ad72:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ad76:	4a91      	ldr	r2, [pc, #580]	@ (800afbc <_printf_float+0x2cc>)
 800ad78:	4b91      	ldr	r3, [pc, #580]	@ (800afc0 <_printf_float+0x2d0>)
 800ad7a:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800ad7e:	bf8c      	ite	hi
 800ad80:	4690      	movhi	r8, r2
 800ad82:	4698      	movls	r8, r3
 800ad84:	2303      	movs	r3, #3
 800ad86:	6123      	str	r3, [r4, #16]
 800ad88:	f02b 0304 	bic.w	r3, fp, #4
 800ad8c:	6023      	str	r3, [r4, #0]
 800ad8e:	f04f 0900 	mov.w	r9, #0
 800ad92:	9700      	str	r7, [sp, #0]
 800ad94:	4633      	mov	r3, r6
 800ad96:	aa0b      	add	r2, sp, #44	@ 0x2c
 800ad98:	4621      	mov	r1, r4
 800ad9a:	4628      	mov	r0, r5
 800ad9c:	f000 f9d2 	bl	800b144 <_printf_common>
 800ada0:	3001      	adds	r0, #1
 800ada2:	f040 808d 	bne.w	800aec0 <_printf_float+0x1d0>
 800ada6:	f04f 30ff 	mov.w	r0, #4294967295
 800adaa:	b00d      	add	sp, #52	@ 0x34
 800adac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800adb0:	4642      	mov	r2, r8
 800adb2:	464b      	mov	r3, r9
 800adb4:	4640      	mov	r0, r8
 800adb6:	4649      	mov	r1, r9
 800adb8:	f7f5 fec0 	bl	8000b3c <__aeabi_dcmpun>
 800adbc:	b140      	cbz	r0, 800add0 <_printf_float+0xe0>
 800adbe:	464b      	mov	r3, r9
 800adc0:	2b00      	cmp	r3, #0
 800adc2:	bfbc      	itt	lt
 800adc4:	232d      	movlt	r3, #45	@ 0x2d
 800adc6:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800adca:	4a7e      	ldr	r2, [pc, #504]	@ (800afc4 <_printf_float+0x2d4>)
 800adcc:	4b7e      	ldr	r3, [pc, #504]	@ (800afc8 <_printf_float+0x2d8>)
 800adce:	e7d4      	b.n	800ad7a <_printf_float+0x8a>
 800add0:	6863      	ldr	r3, [r4, #4]
 800add2:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800add6:	9206      	str	r2, [sp, #24]
 800add8:	1c5a      	adds	r2, r3, #1
 800adda:	d13b      	bne.n	800ae54 <_printf_float+0x164>
 800addc:	2306      	movs	r3, #6
 800adde:	6063      	str	r3, [r4, #4]
 800ade0:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800ade4:	2300      	movs	r3, #0
 800ade6:	6022      	str	r2, [r4, #0]
 800ade8:	9303      	str	r3, [sp, #12]
 800adea:	ab0a      	add	r3, sp, #40	@ 0x28
 800adec:	e9cd a301 	strd	sl, r3, [sp, #4]
 800adf0:	ab09      	add	r3, sp, #36	@ 0x24
 800adf2:	9300      	str	r3, [sp, #0]
 800adf4:	6861      	ldr	r1, [r4, #4]
 800adf6:	ec49 8b10 	vmov	d0, r8, r9
 800adfa:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800adfe:	4628      	mov	r0, r5
 800ae00:	f7ff fed7 	bl	800abb2 <__cvt>
 800ae04:	9b06      	ldr	r3, [sp, #24]
 800ae06:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800ae08:	2b47      	cmp	r3, #71	@ 0x47
 800ae0a:	4680      	mov	r8, r0
 800ae0c:	d129      	bne.n	800ae62 <_printf_float+0x172>
 800ae0e:	1cc8      	adds	r0, r1, #3
 800ae10:	db02      	blt.n	800ae18 <_printf_float+0x128>
 800ae12:	6863      	ldr	r3, [r4, #4]
 800ae14:	4299      	cmp	r1, r3
 800ae16:	dd41      	ble.n	800ae9c <_printf_float+0x1ac>
 800ae18:	f1aa 0a02 	sub.w	sl, sl, #2
 800ae1c:	fa5f fa8a 	uxtb.w	sl, sl
 800ae20:	3901      	subs	r1, #1
 800ae22:	4652      	mov	r2, sl
 800ae24:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800ae28:	9109      	str	r1, [sp, #36]	@ 0x24
 800ae2a:	f7ff ff27 	bl	800ac7c <__exponent>
 800ae2e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800ae30:	1813      	adds	r3, r2, r0
 800ae32:	2a01      	cmp	r2, #1
 800ae34:	4681      	mov	r9, r0
 800ae36:	6123      	str	r3, [r4, #16]
 800ae38:	dc02      	bgt.n	800ae40 <_printf_float+0x150>
 800ae3a:	6822      	ldr	r2, [r4, #0]
 800ae3c:	07d2      	lsls	r2, r2, #31
 800ae3e:	d501      	bpl.n	800ae44 <_printf_float+0x154>
 800ae40:	3301      	adds	r3, #1
 800ae42:	6123      	str	r3, [r4, #16]
 800ae44:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800ae48:	2b00      	cmp	r3, #0
 800ae4a:	d0a2      	beq.n	800ad92 <_printf_float+0xa2>
 800ae4c:	232d      	movs	r3, #45	@ 0x2d
 800ae4e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ae52:	e79e      	b.n	800ad92 <_printf_float+0xa2>
 800ae54:	9a06      	ldr	r2, [sp, #24]
 800ae56:	2a47      	cmp	r2, #71	@ 0x47
 800ae58:	d1c2      	bne.n	800ade0 <_printf_float+0xf0>
 800ae5a:	2b00      	cmp	r3, #0
 800ae5c:	d1c0      	bne.n	800ade0 <_printf_float+0xf0>
 800ae5e:	2301      	movs	r3, #1
 800ae60:	e7bd      	b.n	800adde <_printf_float+0xee>
 800ae62:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800ae66:	d9db      	bls.n	800ae20 <_printf_float+0x130>
 800ae68:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800ae6c:	d118      	bne.n	800aea0 <_printf_float+0x1b0>
 800ae6e:	2900      	cmp	r1, #0
 800ae70:	6863      	ldr	r3, [r4, #4]
 800ae72:	dd0b      	ble.n	800ae8c <_printf_float+0x19c>
 800ae74:	6121      	str	r1, [r4, #16]
 800ae76:	b913      	cbnz	r3, 800ae7e <_printf_float+0x18e>
 800ae78:	6822      	ldr	r2, [r4, #0]
 800ae7a:	07d0      	lsls	r0, r2, #31
 800ae7c:	d502      	bpl.n	800ae84 <_printf_float+0x194>
 800ae7e:	3301      	adds	r3, #1
 800ae80:	440b      	add	r3, r1
 800ae82:	6123      	str	r3, [r4, #16]
 800ae84:	65a1      	str	r1, [r4, #88]	@ 0x58
 800ae86:	f04f 0900 	mov.w	r9, #0
 800ae8a:	e7db      	b.n	800ae44 <_printf_float+0x154>
 800ae8c:	b913      	cbnz	r3, 800ae94 <_printf_float+0x1a4>
 800ae8e:	6822      	ldr	r2, [r4, #0]
 800ae90:	07d2      	lsls	r2, r2, #31
 800ae92:	d501      	bpl.n	800ae98 <_printf_float+0x1a8>
 800ae94:	3302      	adds	r3, #2
 800ae96:	e7f4      	b.n	800ae82 <_printf_float+0x192>
 800ae98:	2301      	movs	r3, #1
 800ae9a:	e7f2      	b.n	800ae82 <_printf_float+0x192>
 800ae9c:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800aea0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800aea2:	4299      	cmp	r1, r3
 800aea4:	db05      	blt.n	800aeb2 <_printf_float+0x1c2>
 800aea6:	6823      	ldr	r3, [r4, #0]
 800aea8:	6121      	str	r1, [r4, #16]
 800aeaa:	07d8      	lsls	r0, r3, #31
 800aeac:	d5ea      	bpl.n	800ae84 <_printf_float+0x194>
 800aeae:	1c4b      	adds	r3, r1, #1
 800aeb0:	e7e7      	b.n	800ae82 <_printf_float+0x192>
 800aeb2:	2900      	cmp	r1, #0
 800aeb4:	bfd4      	ite	le
 800aeb6:	f1c1 0202 	rsble	r2, r1, #2
 800aeba:	2201      	movgt	r2, #1
 800aebc:	4413      	add	r3, r2
 800aebe:	e7e0      	b.n	800ae82 <_printf_float+0x192>
 800aec0:	6823      	ldr	r3, [r4, #0]
 800aec2:	055a      	lsls	r2, r3, #21
 800aec4:	d407      	bmi.n	800aed6 <_printf_float+0x1e6>
 800aec6:	6923      	ldr	r3, [r4, #16]
 800aec8:	4642      	mov	r2, r8
 800aeca:	4631      	mov	r1, r6
 800aecc:	4628      	mov	r0, r5
 800aece:	47b8      	blx	r7
 800aed0:	3001      	adds	r0, #1
 800aed2:	d12b      	bne.n	800af2c <_printf_float+0x23c>
 800aed4:	e767      	b.n	800ada6 <_printf_float+0xb6>
 800aed6:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800aeda:	f240 80dd 	bls.w	800b098 <_printf_float+0x3a8>
 800aede:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800aee2:	2200      	movs	r2, #0
 800aee4:	2300      	movs	r3, #0
 800aee6:	f7f5 fdf7 	bl	8000ad8 <__aeabi_dcmpeq>
 800aeea:	2800      	cmp	r0, #0
 800aeec:	d033      	beq.n	800af56 <_printf_float+0x266>
 800aeee:	4a37      	ldr	r2, [pc, #220]	@ (800afcc <_printf_float+0x2dc>)
 800aef0:	2301      	movs	r3, #1
 800aef2:	4631      	mov	r1, r6
 800aef4:	4628      	mov	r0, r5
 800aef6:	47b8      	blx	r7
 800aef8:	3001      	adds	r0, #1
 800aefa:	f43f af54 	beq.w	800ada6 <_printf_float+0xb6>
 800aefe:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800af02:	4543      	cmp	r3, r8
 800af04:	db02      	blt.n	800af0c <_printf_float+0x21c>
 800af06:	6823      	ldr	r3, [r4, #0]
 800af08:	07d8      	lsls	r0, r3, #31
 800af0a:	d50f      	bpl.n	800af2c <_printf_float+0x23c>
 800af0c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800af10:	4631      	mov	r1, r6
 800af12:	4628      	mov	r0, r5
 800af14:	47b8      	blx	r7
 800af16:	3001      	adds	r0, #1
 800af18:	f43f af45 	beq.w	800ada6 <_printf_float+0xb6>
 800af1c:	f04f 0900 	mov.w	r9, #0
 800af20:	f108 38ff 	add.w	r8, r8, #4294967295
 800af24:	f104 0a1a 	add.w	sl, r4, #26
 800af28:	45c8      	cmp	r8, r9
 800af2a:	dc09      	bgt.n	800af40 <_printf_float+0x250>
 800af2c:	6823      	ldr	r3, [r4, #0]
 800af2e:	079b      	lsls	r3, r3, #30
 800af30:	f100 8103 	bmi.w	800b13a <_printf_float+0x44a>
 800af34:	68e0      	ldr	r0, [r4, #12]
 800af36:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800af38:	4298      	cmp	r0, r3
 800af3a:	bfb8      	it	lt
 800af3c:	4618      	movlt	r0, r3
 800af3e:	e734      	b.n	800adaa <_printf_float+0xba>
 800af40:	2301      	movs	r3, #1
 800af42:	4652      	mov	r2, sl
 800af44:	4631      	mov	r1, r6
 800af46:	4628      	mov	r0, r5
 800af48:	47b8      	blx	r7
 800af4a:	3001      	adds	r0, #1
 800af4c:	f43f af2b 	beq.w	800ada6 <_printf_float+0xb6>
 800af50:	f109 0901 	add.w	r9, r9, #1
 800af54:	e7e8      	b.n	800af28 <_printf_float+0x238>
 800af56:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800af58:	2b00      	cmp	r3, #0
 800af5a:	dc39      	bgt.n	800afd0 <_printf_float+0x2e0>
 800af5c:	4a1b      	ldr	r2, [pc, #108]	@ (800afcc <_printf_float+0x2dc>)
 800af5e:	2301      	movs	r3, #1
 800af60:	4631      	mov	r1, r6
 800af62:	4628      	mov	r0, r5
 800af64:	47b8      	blx	r7
 800af66:	3001      	adds	r0, #1
 800af68:	f43f af1d 	beq.w	800ada6 <_printf_float+0xb6>
 800af6c:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800af70:	ea59 0303 	orrs.w	r3, r9, r3
 800af74:	d102      	bne.n	800af7c <_printf_float+0x28c>
 800af76:	6823      	ldr	r3, [r4, #0]
 800af78:	07d9      	lsls	r1, r3, #31
 800af7a:	d5d7      	bpl.n	800af2c <_printf_float+0x23c>
 800af7c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800af80:	4631      	mov	r1, r6
 800af82:	4628      	mov	r0, r5
 800af84:	47b8      	blx	r7
 800af86:	3001      	adds	r0, #1
 800af88:	f43f af0d 	beq.w	800ada6 <_printf_float+0xb6>
 800af8c:	f04f 0a00 	mov.w	sl, #0
 800af90:	f104 0b1a 	add.w	fp, r4, #26
 800af94:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800af96:	425b      	negs	r3, r3
 800af98:	4553      	cmp	r3, sl
 800af9a:	dc01      	bgt.n	800afa0 <_printf_float+0x2b0>
 800af9c:	464b      	mov	r3, r9
 800af9e:	e793      	b.n	800aec8 <_printf_float+0x1d8>
 800afa0:	2301      	movs	r3, #1
 800afa2:	465a      	mov	r2, fp
 800afa4:	4631      	mov	r1, r6
 800afa6:	4628      	mov	r0, r5
 800afa8:	47b8      	blx	r7
 800afaa:	3001      	adds	r0, #1
 800afac:	f43f aefb 	beq.w	800ada6 <_printf_float+0xb6>
 800afb0:	f10a 0a01 	add.w	sl, sl, #1
 800afb4:	e7ee      	b.n	800af94 <_printf_float+0x2a4>
 800afb6:	bf00      	nop
 800afb8:	7fefffff 	.word	0x7fefffff
 800afbc:	08010b1c 	.word	0x08010b1c
 800afc0:	08010b18 	.word	0x08010b18
 800afc4:	08010b24 	.word	0x08010b24
 800afc8:	08010b20 	.word	0x08010b20
 800afcc:	08010b28 	.word	0x08010b28
 800afd0:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800afd2:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800afd6:	4553      	cmp	r3, sl
 800afd8:	bfa8      	it	ge
 800afda:	4653      	movge	r3, sl
 800afdc:	2b00      	cmp	r3, #0
 800afde:	4699      	mov	r9, r3
 800afe0:	dc36      	bgt.n	800b050 <_printf_float+0x360>
 800afe2:	f04f 0b00 	mov.w	fp, #0
 800afe6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800afea:	f104 021a 	add.w	r2, r4, #26
 800afee:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800aff0:	9306      	str	r3, [sp, #24]
 800aff2:	eba3 0309 	sub.w	r3, r3, r9
 800aff6:	455b      	cmp	r3, fp
 800aff8:	dc31      	bgt.n	800b05e <_printf_float+0x36e>
 800affa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800affc:	459a      	cmp	sl, r3
 800affe:	dc3a      	bgt.n	800b076 <_printf_float+0x386>
 800b000:	6823      	ldr	r3, [r4, #0]
 800b002:	07da      	lsls	r2, r3, #31
 800b004:	d437      	bmi.n	800b076 <_printf_float+0x386>
 800b006:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b008:	ebaa 0903 	sub.w	r9, sl, r3
 800b00c:	9b06      	ldr	r3, [sp, #24]
 800b00e:	ebaa 0303 	sub.w	r3, sl, r3
 800b012:	4599      	cmp	r9, r3
 800b014:	bfa8      	it	ge
 800b016:	4699      	movge	r9, r3
 800b018:	f1b9 0f00 	cmp.w	r9, #0
 800b01c:	dc33      	bgt.n	800b086 <_printf_float+0x396>
 800b01e:	f04f 0800 	mov.w	r8, #0
 800b022:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b026:	f104 0b1a 	add.w	fp, r4, #26
 800b02a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b02c:	ebaa 0303 	sub.w	r3, sl, r3
 800b030:	eba3 0309 	sub.w	r3, r3, r9
 800b034:	4543      	cmp	r3, r8
 800b036:	f77f af79 	ble.w	800af2c <_printf_float+0x23c>
 800b03a:	2301      	movs	r3, #1
 800b03c:	465a      	mov	r2, fp
 800b03e:	4631      	mov	r1, r6
 800b040:	4628      	mov	r0, r5
 800b042:	47b8      	blx	r7
 800b044:	3001      	adds	r0, #1
 800b046:	f43f aeae 	beq.w	800ada6 <_printf_float+0xb6>
 800b04a:	f108 0801 	add.w	r8, r8, #1
 800b04e:	e7ec      	b.n	800b02a <_printf_float+0x33a>
 800b050:	4642      	mov	r2, r8
 800b052:	4631      	mov	r1, r6
 800b054:	4628      	mov	r0, r5
 800b056:	47b8      	blx	r7
 800b058:	3001      	adds	r0, #1
 800b05a:	d1c2      	bne.n	800afe2 <_printf_float+0x2f2>
 800b05c:	e6a3      	b.n	800ada6 <_printf_float+0xb6>
 800b05e:	2301      	movs	r3, #1
 800b060:	4631      	mov	r1, r6
 800b062:	4628      	mov	r0, r5
 800b064:	9206      	str	r2, [sp, #24]
 800b066:	47b8      	blx	r7
 800b068:	3001      	adds	r0, #1
 800b06a:	f43f ae9c 	beq.w	800ada6 <_printf_float+0xb6>
 800b06e:	9a06      	ldr	r2, [sp, #24]
 800b070:	f10b 0b01 	add.w	fp, fp, #1
 800b074:	e7bb      	b.n	800afee <_printf_float+0x2fe>
 800b076:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b07a:	4631      	mov	r1, r6
 800b07c:	4628      	mov	r0, r5
 800b07e:	47b8      	blx	r7
 800b080:	3001      	adds	r0, #1
 800b082:	d1c0      	bne.n	800b006 <_printf_float+0x316>
 800b084:	e68f      	b.n	800ada6 <_printf_float+0xb6>
 800b086:	9a06      	ldr	r2, [sp, #24]
 800b088:	464b      	mov	r3, r9
 800b08a:	4442      	add	r2, r8
 800b08c:	4631      	mov	r1, r6
 800b08e:	4628      	mov	r0, r5
 800b090:	47b8      	blx	r7
 800b092:	3001      	adds	r0, #1
 800b094:	d1c3      	bne.n	800b01e <_printf_float+0x32e>
 800b096:	e686      	b.n	800ada6 <_printf_float+0xb6>
 800b098:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800b09c:	f1ba 0f01 	cmp.w	sl, #1
 800b0a0:	dc01      	bgt.n	800b0a6 <_printf_float+0x3b6>
 800b0a2:	07db      	lsls	r3, r3, #31
 800b0a4:	d536      	bpl.n	800b114 <_printf_float+0x424>
 800b0a6:	2301      	movs	r3, #1
 800b0a8:	4642      	mov	r2, r8
 800b0aa:	4631      	mov	r1, r6
 800b0ac:	4628      	mov	r0, r5
 800b0ae:	47b8      	blx	r7
 800b0b0:	3001      	adds	r0, #1
 800b0b2:	f43f ae78 	beq.w	800ada6 <_printf_float+0xb6>
 800b0b6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b0ba:	4631      	mov	r1, r6
 800b0bc:	4628      	mov	r0, r5
 800b0be:	47b8      	blx	r7
 800b0c0:	3001      	adds	r0, #1
 800b0c2:	f43f ae70 	beq.w	800ada6 <_printf_float+0xb6>
 800b0c6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800b0ca:	2200      	movs	r2, #0
 800b0cc:	2300      	movs	r3, #0
 800b0ce:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b0d2:	f7f5 fd01 	bl	8000ad8 <__aeabi_dcmpeq>
 800b0d6:	b9c0      	cbnz	r0, 800b10a <_printf_float+0x41a>
 800b0d8:	4653      	mov	r3, sl
 800b0da:	f108 0201 	add.w	r2, r8, #1
 800b0de:	4631      	mov	r1, r6
 800b0e0:	4628      	mov	r0, r5
 800b0e2:	47b8      	blx	r7
 800b0e4:	3001      	adds	r0, #1
 800b0e6:	d10c      	bne.n	800b102 <_printf_float+0x412>
 800b0e8:	e65d      	b.n	800ada6 <_printf_float+0xb6>
 800b0ea:	2301      	movs	r3, #1
 800b0ec:	465a      	mov	r2, fp
 800b0ee:	4631      	mov	r1, r6
 800b0f0:	4628      	mov	r0, r5
 800b0f2:	47b8      	blx	r7
 800b0f4:	3001      	adds	r0, #1
 800b0f6:	f43f ae56 	beq.w	800ada6 <_printf_float+0xb6>
 800b0fa:	f108 0801 	add.w	r8, r8, #1
 800b0fe:	45d0      	cmp	r8, sl
 800b100:	dbf3      	blt.n	800b0ea <_printf_float+0x3fa>
 800b102:	464b      	mov	r3, r9
 800b104:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800b108:	e6df      	b.n	800aeca <_printf_float+0x1da>
 800b10a:	f04f 0800 	mov.w	r8, #0
 800b10e:	f104 0b1a 	add.w	fp, r4, #26
 800b112:	e7f4      	b.n	800b0fe <_printf_float+0x40e>
 800b114:	2301      	movs	r3, #1
 800b116:	4642      	mov	r2, r8
 800b118:	e7e1      	b.n	800b0de <_printf_float+0x3ee>
 800b11a:	2301      	movs	r3, #1
 800b11c:	464a      	mov	r2, r9
 800b11e:	4631      	mov	r1, r6
 800b120:	4628      	mov	r0, r5
 800b122:	47b8      	blx	r7
 800b124:	3001      	adds	r0, #1
 800b126:	f43f ae3e 	beq.w	800ada6 <_printf_float+0xb6>
 800b12a:	f108 0801 	add.w	r8, r8, #1
 800b12e:	68e3      	ldr	r3, [r4, #12]
 800b130:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800b132:	1a5b      	subs	r3, r3, r1
 800b134:	4543      	cmp	r3, r8
 800b136:	dcf0      	bgt.n	800b11a <_printf_float+0x42a>
 800b138:	e6fc      	b.n	800af34 <_printf_float+0x244>
 800b13a:	f04f 0800 	mov.w	r8, #0
 800b13e:	f104 0919 	add.w	r9, r4, #25
 800b142:	e7f4      	b.n	800b12e <_printf_float+0x43e>

0800b144 <_printf_common>:
 800b144:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b148:	4616      	mov	r6, r2
 800b14a:	4698      	mov	r8, r3
 800b14c:	688a      	ldr	r2, [r1, #8]
 800b14e:	690b      	ldr	r3, [r1, #16]
 800b150:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800b154:	4293      	cmp	r3, r2
 800b156:	bfb8      	it	lt
 800b158:	4613      	movlt	r3, r2
 800b15a:	6033      	str	r3, [r6, #0]
 800b15c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800b160:	4607      	mov	r7, r0
 800b162:	460c      	mov	r4, r1
 800b164:	b10a      	cbz	r2, 800b16a <_printf_common+0x26>
 800b166:	3301      	adds	r3, #1
 800b168:	6033      	str	r3, [r6, #0]
 800b16a:	6823      	ldr	r3, [r4, #0]
 800b16c:	0699      	lsls	r1, r3, #26
 800b16e:	bf42      	ittt	mi
 800b170:	6833      	ldrmi	r3, [r6, #0]
 800b172:	3302      	addmi	r3, #2
 800b174:	6033      	strmi	r3, [r6, #0]
 800b176:	6825      	ldr	r5, [r4, #0]
 800b178:	f015 0506 	ands.w	r5, r5, #6
 800b17c:	d106      	bne.n	800b18c <_printf_common+0x48>
 800b17e:	f104 0a19 	add.w	sl, r4, #25
 800b182:	68e3      	ldr	r3, [r4, #12]
 800b184:	6832      	ldr	r2, [r6, #0]
 800b186:	1a9b      	subs	r3, r3, r2
 800b188:	42ab      	cmp	r3, r5
 800b18a:	dc26      	bgt.n	800b1da <_printf_common+0x96>
 800b18c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800b190:	6822      	ldr	r2, [r4, #0]
 800b192:	3b00      	subs	r3, #0
 800b194:	bf18      	it	ne
 800b196:	2301      	movne	r3, #1
 800b198:	0692      	lsls	r2, r2, #26
 800b19a:	d42b      	bmi.n	800b1f4 <_printf_common+0xb0>
 800b19c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800b1a0:	4641      	mov	r1, r8
 800b1a2:	4638      	mov	r0, r7
 800b1a4:	47c8      	blx	r9
 800b1a6:	3001      	adds	r0, #1
 800b1a8:	d01e      	beq.n	800b1e8 <_printf_common+0xa4>
 800b1aa:	6823      	ldr	r3, [r4, #0]
 800b1ac:	6922      	ldr	r2, [r4, #16]
 800b1ae:	f003 0306 	and.w	r3, r3, #6
 800b1b2:	2b04      	cmp	r3, #4
 800b1b4:	bf02      	ittt	eq
 800b1b6:	68e5      	ldreq	r5, [r4, #12]
 800b1b8:	6833      	ldreq	r3, [r6, #0]
 800b1ba:	1aed      	subeq	r5, r5, r3
 800b1bc:	68a3      	ldr	r3, [r4, #8]
 800b1be:	bf0c      	ite	eq
 800b1c0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b1c4:	2500      	movne	r5, #0
 800b1c6:	4293      	cmp	r3, r2
 800b1c8:	bfc4      	itt	gt
 800b1ca:	1a9b      	subgt	r3, r3, r2
 800b1cc:	18ed      	addgt	r5, r5, r3
 800b1ce:	2600      	movs	r6, #0
 800b1d0:	341a      	adds	r4, #26
 800b1d2:	42b5      	cmp	r5, r6
 800b1d4:	d11a      	bne.n	800b20c <_printf_common+0xc8>
 800b1d6:	2000      	movs	r0, #0
 800b1d8:	e008      	b.n	800b1ec <_printf_common+0xa8>
 800b1da:	2301      	movs	r3, #1
 800b1dc:	4652      	mov	r2, sl
 800b1de:	4641      	mov	r1, r8
 800b1e0:	4638      	mov	r0, r7
 800b1e2:	47c8      	blx	r9
 800b1e4:	3001      	adds	r0, #1
 800b1e6:	d103      	bne.n	800b1f0 <_printf_common+0xac>
 800b1e8:	f04f 30ff 	mov.w	r0, #4294967295
 800b1ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b1f0:	3501      	adds	r5, #1
 800b1f2:	e7c6      	b.n	800b182 <_printf_common+0x3e>
 800b1f4:	18e1      	adds	r1, r4, r3
 800b1f6:	1c5a      	adds	r2, r3, #1
 800b1f8:	2030      	movs	r0, #48	@ 0x30
 800b1fa:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800b1fe:	4422      	add	r2, r4
 800b200:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800b204:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800b208:	3302      	adds	r3, #2
 800b20a:	e7c7      	b.n	800b19c <_printf_common+0x58>
 800b20c:	2301      	movs	r3, #1
 800b20e:	4622      	mov	r2, r4
 800b210:	4641      	mov	r1, r8
 800b212:	4638      	mov	r0, r7
 800b214:	47c8      	blx	r9
 800b216:	3001      	adds	r0, #1
 800b218:	d0e6      	beq.n	800b1e8 <_printf_common+0xa4>
 800b21a:	3601      	adds	r6, #1
 800b21c:	e7d9      	b.n	800b1d2 <_printf_common+0x8e>
	...

0800b220 <_printf_i>:
 800b220:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b224:	7e0f      	ldrb	r7, [r1, #24]
 800b226:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800b228:	2f78      	cmp	r7, #120	@ 0x78
 800b22a:	4691      	mov	r9, r2
 800b22c:	4680      	mov	r8, r0
 800b22e:	460c      	mov	r4, r1
 800b230:	469a      	mov	sl, r3
 800b232:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800b236:	d807      	bhi.n	800b248 <_printf_i+0x28>
 800b238:	2f62      	cmp	r7, #98	@ 0x62
 800b23a:	d80a      	bhi.n	800b252 <_printf_i+0x32>
 800b23c:	2f00      	cmp	r7, #0
 800b23e:	f000 80d1 	beq.w	800b3e4 <_printf_i+0x1c4>
 800b242:	2f58      	cmp	r7, #88	@ 0x58
 800b244:	f000 80b8 	beq.w	800b3b8 <_printf_i+0x198>
 800b248:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b24c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800b250:	e03a      	b.n	800b2c8 <_printf_i+0xa8>
 800b252:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800b256:	2b15      	cmp	r3, #21
 800b258:	d8f6      	bhi.n	800b248 <_printf_i+0x28>
 800b25a:	a101      	add	r1, pc, #4	@ (adr r1, 800b260 <_printf_i+0x40>)
 800b25c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b260:	0800b2b9 	.word	0x0800b2b9
 800b264:	0800b2cd 	.word	0x0800b2cd
 800b268:	0800b249 	.word	0x0800b249
 800b26c:	0800b249 	.word	0x0800b249
 800b270:	0800b249 	.word	0x0800b249
 800b274:	0800b249 	.word	0x0800b249
 800b278:	0800b2cd 	.word	0x0800b2cd
 800b27c:	0800b249 	.word	0x0800b249
 800b280:	0800b249 	.word	0x0800b249
 800b284:	0800b249 	.word	0x0800b249
 800b288:	0800b249 	.word	0x0800b249
 800b28c:	0800b3cb 	.word	0x0800b3cb
 800b290:	0800b2f7 	.word	0x0800b2f7
 800b294:	0800b385 	.word	0x0800b385
 800b298:	0800b249 	.word	0x0800b249
 800b29c:	0800b249 	.word	0x0800b249
 800b2a0:	0800b3ed 	.word	0x0800b3ed
 800b2a4:	0800b249 	.word	0x0800b249
 800b2a8:	0800b2f7 	.word	0x0800b2f7
 800b2ac:	0800b249 	.word	0x0800b249
 800b2b0:	0800b249 	.word	0x0800b249
 800b2b4:	0800b38d 	.word	0x0800b38d
 800b2b8:	6833      	ldr	r3, [r6, #0]
 800b2ba:	1d1a      	adds	r2, r3, #4
 800b2bc:	681b      	ldr	r3, [r3, #0]
 800b2be:	6032      	str	r2, [r6, #0]
 800b2c0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b2c4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800b2c8:	2301      	movs	r3, #1
 800b2ca:	e09c      	b.n	800b406 <_printf_i+0x1e6>
 800b2cc:	6833      	ldr	r3, [r6, #0]
 800b2ce:	6820      	ldr	r0, [r4, #0]
 800b2d0:	1d19      	adds	r1, r3, #4
 800b2d2:	6031      	str	r1, [r6, #0]
 800b2d4:	0606      	lsls	r6, r0, #24
 800b2d6:	d501      	bpl.n	800b2dc <_printf_i+0xbc>
 800b2d8:	681d      	ldr	r5, [r3, #0]
 800b2da:	e003      	b.n	800b2e4 <_printf_i+0xc4>
 800b2dc:	0645      	lsls	r5, r0, #25
 800b2de:	d5fb      	bpl.n	800b2d8 <_printf_i+0xb8>
 800b2e0:	f9b3 5000 	ldrsh.w	r5, [r3]
 800b2e4:	2d00      	cmp	r5, #0
 800b2e6:	da03      	bge.n	800b2f0 <_printf_i+0xd0>
 800b2e8:	232d      	movs	r3, #45	@ 0x2d
 800b2ea:	426d      	negs	r5, r5
 800b2ec:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b2f0:	4858      	ldr	r0, [pc, #352]	@ (800b454 <_printf_i+0x234>)
 800b2f2:	230a      	movs	r3, #10
 800b2f4:	e011      	b.n	800b31a <_printf_i+0xfa>
 800b2f6:	6821      	ldr	r1, [r4, #0]
 800b2f8:	6833      	ldr	r3, [r6, #0]
 800b2fa:	0608      	lsls	r0, r1, #24
 800b2fc:	f853 5b04 	ldr.w	r5, [r3], #4
 800b300:	d402      	bmi.n	800b308 <_printf_i+0xe8>
 800b302:	0649      	lsls	r1, r1, #25
 800b304:	bf48      	it	mi
 800b306:	b2ad      	uxthmi	r5, r5
 800b308:	2f6f      	cmp	r7, #111	@ 0x6f
 800b30a:	4852      	ldr	r0, [pc, #328]	@ (800b454 <_printf_i+0x234>)
 800b30c:	6033      	str	r3, [r6, #0]
 800b30e:	bf14      	ite	ne
 800b310:	230a      	movne	r3, #10
 800b312:	2308      	moveq	r3, #8
 800b314:	2100      	movs	r1, #0
 800b316:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800b31a:	6866      	ldr	r6, [r4, #4]
 800b31c:	60a6      	str	r6, [r4, #8]
 800b31e:	2e00      	cmp	r6, #0
 800b320:	db05      	blt.n	800b32e <_printf_i+0x10e>
 800b322:	6821      	ldr	r1, [r4, #0]
 800b324:	432e      	orrs	r6, r5
 800b326:	f021 0104 	bic.w	r1, r1, #4
 800b32a:	6021      	str	r1, [r4, #0]
 800b32c:	d04b      	beq.n	800b3c6 <_printf_i+0x1a6>
 800b32e:	4616      	mov	r6, r2
 800b330:	fbb5 f1f3 	udiv	r1, r5, r3
 800b334:	fb03 5711 	mls	r7, r3, r1, r5
 800b338:	5dc7      	ldrb	r7, [r0, r7]
 800b33a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800b33e:	462f      	mov	r7, r5
 800b340:	42bb      	cmp	r3, r7
 800b342:	460d      	mov	r5, r1
 800b344:	d9f4      	bls.n	800b330 <_printf_i+0x110>
 800b346:	2b08      	cmp	r3, #8
 800b348:	d10b      	bne.n	800b362 <_printf_i+0x142>
 800b34a:	6823      	ldr	r3, [r4, #0]
 800b34c:	07df      	lsls	r7, r3, #31
 800b34e:	d508      	bpl.n	800b362 <_printf_i+0x142>
 800b350:	6923      	ldr	r3, [r4, #16]
 800b352:	6861      	ldr	r1, [r4, #4]
 800b354:	4299      	cmp	r1, r3
 800b356:	bfde      	ittt	le
 800b358:	2330      	movle	r3, #48	@ 0x30
 800b35a:	f806 3c01 	strble.w	r3, [r6, #-1]
 800b35e:	f106 36ff 	addle.w	r6, r6, #4294967295
 800b362:	1b92      	subs	r2, r2, r6
 800b364:	6122      	str	r2, [r4, #16]
 800b366:	f8cd a000 	str.w	sl, [sp]
 800b36a:	464b      	mov	r3, r9
 800b36c:	aa03      	add	r2, sp, #12
 800b36e:	4621      	mov	r1, r4
 800b370:	4640      	mov	r0, r8
 800b372:	f7ff fee7 	bl	800b144 <_printf_common>
 800b376:	3001      	adds	r0, #1
 800b378:	d14a      	bne.n	800b410 <_printf_i+0x1f0>
 800b37a:	f04f 30ff 	mov.w	r0, #4294967295
 800b37e:	b004      	add	sp, #16
 800b380:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b384:	6823      	ldr	r3, [r4, #0]
 800b386:	f043 0320 	orr.w	r3, r3, #32
 800b38a:	6023      	str	r3, [r4, #0]
 800b38c:	4832      	ldr	r0, [pc, #200]	@ (800b458 <_printf_i+0x238>)
 800b38e:	2778      	movs	r7, #120	@ 0x78
 800b390:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800b394:	6823      	ldr	r3, [r4, #0]
 800b396:	6831      	ldr	r1, [r6, #0]
 800b398:	061f      	lsls	r7, r3, #24
 800b39a:	f851 5b04 	ldr.w	r5, [r1], #4
 800b39e:	d402      	bmi.n	800b3a6 <_printf_i+0x186>
 800b3a0:	065f      	lsls	r7, r3, #25
 800b3a2:	bf48      	it	mi
 800b3a4:	b2ad      	uxthmi	r5, r5
 800b3a6:	6031      	str	r1, [r6, #0]
 800b3a8:	07d9      	lsls	r1, r3, #31
 800b3aa:	bf44      	itt	mi
 800b3ac:	f043 0320 	orrmi.w	r3, r3, #32
 800b3b0:	6023      	strmi	r3, [r4, #0]
 800b3b2:	b11d      	cbz	r5, 800b3bc <_printf_i+0x19c>
 800b3b4:	2310      	movs	r3, #16
 800b3b6:	e7ad      	b.n	800b314 <_printf_i+0xf4>
 800b3b8:	4826      	ldr	r0, [pc, #152]	@ (800b454 <_printf_i+0x234>)
 800b3ba:	e7e9      	b.n	800b390 <_printf_i+0x170>
 800b3bc:	6823      	ldr	r3, [r4, #0]
 800b3be:	f023 0320 	bic.w	r3, r3, #32
 800b3c2:	6023      	str	r3, [r4, #0]
 800b3c4:	e7f6      	b.n	800b3b4 <_printf_i+0x194>
 800b3c6:	4616      	mov	r6, r2
 800b3c8:	e7bd      	b.n	800b346 <_printf_i+0x126>
 800b3ca:	6833      	ldr	r3, [r6, #0]
 800b3cc:	6825      	ldr	r5, [r4, #0]
 800b3ce:	6961      	ldr	r1, [r4, #20]
 800b3d0:	1d18      	adds	r0, r3, #4
 800b3d2:	6030      	str	r0, [r6, #0]
 800b3d4:	062e      	lsls	r6, r5, #24
 800b3d6:	681b      	ldr	r3, [r3, #0]
 800b3d8:	d501      	bpl.n	800b3de <_printf_i+0x1be>
 800b3da:	6019      	str	r1, [r3, #0]
 800b3dc:	e002      	b.n	800b3e4 <_printf_i+0x1c4>
 800b3de:	0668      	lsls	r0, r5, #25
 800b3e0:	d5fb      	bpl.n	800b3da <_printf_i+0x1ba>
 800b3e2:	8019      	strh	r1, [r3, #0]
 800b3e4:	2300      	movs	r3, #0
 800b3e6:	6123      	str	r3, [r4, #16]
 800b3e8:	4616      	mov	r6, r2
 800b3ea:	e7bc      	b.n	800b366 <_printf_i+0x146>
 800b3ec:	6833      	ldr	r3, [r6, #0]
 800b3ee:	1d1a      	adds	r2, r3, #4
 800b3f0:	6032      	str	r2, [r6, #0]
 800b3f2:	681e      	ldr	r6, [r3, #0]
 800b3f4:	6862      	ldr	r2, [r4, #4]
 800b3f6:	2100      	movs	r1, #0
 800b3f8:	4630      	mov	r0, r6
 800b3fa:	f7f4 fef1 	bl	80001e0 <memchr>
 800b3fe:	b108      	cbz	r0, 800b404 <_printf_i+0x1e4>
 800b400:	1b80      	subs	r0, r0, r6
 800b402:	6060      	str	r0, [r4, #4]
 800b404:	6863      	ldr	r3, [r4, #4]
 800b406:	6123      	str	r3, [r4, #16]
 800b408:	2300      	movs	r3, #0
 800b40a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b40e:	e7aa      	b.n	800b366 <_printf_i+0x146>
 800b410:	6923      	ldr	r3, [r4, #16]
 800b412:	4632      	mov	r2, r6
 800b414:	4649      	mov	r1, r9
 800b416:	4640      	mov	r0, r8
 800b418:	47d0      	blx	sl
 800b41a:	3001      	adds	r0, #1
 800b41c:	d0ad      	beq.n	800b37a <_printf_i+0x15a>
 800b41e:	6823      	ldr	r3, [r4, #0]
 800b420:	079b      	lsls	r3, r3, #30
 800b422:	d413      	bmi.n	800b44c <_printf_i+0x22c>
 800b424:	68e0      	ldr	r0, [r4, #12]
 800b426:	9b03      	ldr	r3, [sp, #12]
 800b428:	4298      	cmp	r0, r3
 800b42a:	bfb8      	it	lt
 800b42c:	4618      	movlt	r0, r3
 800b42e:	e7a6      	b.n	800b37e <_printf_i+0x15e>
 800b430:	2301      	movs	r3, #1
 800b432:	4632      	mov	r2, r6
 800b434:	4649      	mov	r1, r9
 800b436:	4640      	mov	r0, r8
 800b438:	47d0      	blx	sl
 800b43a:	3001      	adds	r0, #1
 800b43c:	d09d      	beq.n	800b37a <_printf_i+0x15a>
 800b43e:	3501      	adds	r5, #1
 800b440:	68e3      	ldr	r3, [r4, #12]
 800b442:	9903      	ldr	r1, [sp, #12]
 800b444:	1a5b      	subs	r3, r3, r1
 800b446:	42ab      	cmp	r3, r5
 800b448:	dcf2      	bgt.n	800b430 <_printf_i+0x210>
 800b44a:	e7eb      	b.n	800b424 <_printf_i+0x204>
 800b44c:	2500      	movs	r5, #0
 800b44e:	f104 0619 	add.w	r6, r4, #25
 800b452:	e7f5      	b.n	800b440 <_printf_i+0x220>
 800b454:	08010b2a 	.word	0x08010b2a
 800b458:	08010b3b 	.word	0x08010b3b

0800b45c <_scanf_float>:
 800b45c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b460:	b087      	sub	sp, #28
 800b462:	4691      	mov	r9, r2
 800b464:	9303      	str	r3, [sp, #12]
 800b466:	688b      	ldr	r3, [r1, #8]
 800b468:	1e5a      	subs	r2, r3, #1
 800b46a:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800b46e:	bf81      	itttt	hi
 800b470:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800b474:	eb03 0b05 	addhi.w	fp, r3, r5
 800b478:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800b47c:	608b      	strhi	r3, [r1, #8]
 800b47e:	680b      	ldr	r3, [r1, #0]
 800b480:	460a      	mov	r2, r1
 800b482:	f04f 0500 	mov.w	r5, #0
 800b486:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800b48a:	f842 3b1c 	str.w	r3, [r2], #28
 800b48e:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800b492:	4680      	mov	r8, r0
 800b494:	460c      	mov	r4, r1
 800b496:	bf98      	it	ls
 800b498:	f04f 0b00 	movls.w	fp, #0
 800b49c:	9201      	str	r2, [sp, #4]
 800b49e:	4616      	mov	r6, r2
 800b4a0:	46aa      	mov	sl, r5
 800b4a2:	462f      	mov	r7, r5
 800b4a4:	9502      	str	r5, [sp, #8]
 800b4a6:	68a2      	ldr	r2, [r4, #8]
 800b4a8:	b15a      	cbz	r2, 800b4c2 <_scanf_float+0x66>
 800b4aa:	f8d9 3000 	ldr.w	r3, [r9]
 800b4ae:	781b      	ldrb	r3, [r3, #0]
 800b4b0:	2b4e      	cmp	r3, #78	@ 0x4e
 800b4b2:	d863      	bhi.n	800b57c <_scanf_float+0x120>
 800b4b4:	2b40      	cmp	r3, #64	@ 0x40
 800b4b6:	d83b      	bhi.n	800b530 <_scanf_float+0xd4>
 800b4b8:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 800b4bc:	b2c8      	uxtb	r0, r1
 800b4be:	280e      	cmp	r0, #14
 800b4c0:	d939      	bls.n	800b536 <_scanf_float+0xda>
 800b4c2:	b11f      	cbz	r7, 800b4cc <_scanf_float+0x70>
 800b4c4:	6823      	ldr	r3, [r4, #0]
 800b4c6:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b4ca:	6023      	str	r3, [r4, #0]
 800b4cc:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b4d0:	f1ba 0f01 	cmp.w	sl, #1
 800b4d4:	f200 8114 	bhi.w	800b700 <_scanf_float+0x2a4>
 800b4d8:	9b01      	ldr	r3, [sp, #4]
 800b4da:	429e      	cmp	r6, r3
 800b4dc:	f200 8105 	bhi.w	800b6ea <_scanf_float+0x28e>
 800b4e0:	2001      	movs	r0, #1
 800b4e2:	b007      	add	sp, #28
 800b4e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b4e8:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800b4ec:	2a0d      	cmp	r2, #13
 800b4ee:	d8e8      	bhi.n	800b4c2 <_scanf_float+0x66>
 800b4f0:	a101      	add	r1, pc, #4	@ (adr r1, 800b4f8 <_scanf_float+0x9c>)
 800b4f2:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800b4f6:	bf00      	nop
 800b4f8:	0800b641 	.word	0x0800b641
 800b4fc:	0800b4c3 	.word	0x0800b4c3
 800b500:	0800b4c3 	.word	0x0800b4c3
 800b504:	0800b4c3 	.word	0x0800b4c3
 800b508:	0800b69d 	.word	0x0800b69d
 800b50c:	0800b677 	.word	0x0800b677
 800b510:	0800b4c3 	.word	0x0800b4c3
 800b514:	0800b4c3 	.word	0x0800b4c3
 800b518:	0800b64f 	.word	0x0800b64f
 800b51c:	0800b4c3 	.word	0x0800b4c3
 800b520:	0800b4c3 	.word	0x0800b4c3
 800b524:	0800b4c3 	.word	0x0800b4c3
 800b528:	0800b4c3 	.word	0x0800b4c3
 800b52c:	0800b60b 	.word	0x0800b60b
 800b530:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 800b534:	e7da      	b.n	800b4ec <_scanf_float+0x90>
 800b536:	290e      	cmp	r1, #14
 800b538:	d8c3      	bhi.n	800b4c2 <_scanf_float+0x66>
 800b53a:	a001      	add	r0, pc, #4	@ (adr r0, 800b540 <_scanf_float+0xe4>)
 800b53c:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800b540:	0800b5fb 	.word	0x0800b5fb
 800b544:	0800b4c3 	.word	0x0800b4c3
 800b548:	0800b5fb 	.word	0x0800b5fb
 800b54c:	0800b68b 	.word	0x0800b68b
 800b550:	0800b4c3 	.word	0x0800b4c3
 800b554:	0800b59d 	.word	0x0800b59d
 800b558:	0800b5e1 	.word	0x0800b5e1
 800b55c:	0800b5e1 	.word	0x0800b5e1
 800b560:	0800b5e1 	.word	0x0800b5e1
 800b564:	0800b5e1 	.word	0x0800b5e1
 800b568:	0800b5e1 	.word	0x0800b5e1
 800b56c:	0800b5e1 	.word	0x0800b5e1
 800b570:	0800b5e1 	.word	0x0800b5e1
 800b574:	0800b5e1 	.word	0x0800b5e1
 800b578:	0800b5e1 	.word	0x0800b5e1
 800b57c:	2b6e      	cmp	r3, #110	@ 0x6e
 800b57e:	d809      	bhi.n	800b594 <_scanf_float+0x138>
 800b580:	2b60      	cmp	r3, #96	@ 0x60
 800b582:	d8b1      	bhi.n	800b4e8 <_scanf_float+0x8c>
 800b584:	2b54      	cmp	r3, #84	@ 0x54
 800b586:	d07b      	beq.n	800b680 <_scanf_float+0x224>
 800b588:	2b59      	cmp	r3, #89	@ 0x59
 800b58a:	d19a      	bne.n	800b4c2 <_scanf_float+0x66>
 800b58c:	2d07      	cmp	r5, #7
 800b58e:	d198      	bne.n	800b4c2 <_scanf_float+0x66>
 800b590:	2508      	movs	r5, #8
 800b592:	e02f      	b.n	800b5f4 <_scanf_float+0x198>
 800b594:	2b74      	cmp	r3, #116	@ 0x74
 800b596:	d073      	beq.n	800b680 <_scanf_float+0x224>
 800b598:	2b79      	cmp	r3, #121	@ 0x79
 800b59a:	e7f6      	b.n	800b58a <_scanf_float+0x12e>
 800b59c:	6821      	ldr	r1, [r4, #0]
 800b59e:	05c8      	lsls	r0, r1, #23
 800b5a0:	d51e      	bpl.n	800b5e0 <_scanf_float+0x184>
 800b5a2:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800b5a6:	6021      	str	r1, [r4, #0]
 800b5a8:	3701      	adds	r7, #1
 800b5aa:	f1bb 0f00 	cmp.w	fp, #0
 800b5ae:	d003      	beq.n	800b5b8 <_scanf_float+0x15c>
 800b5b0:	3201      	adds	r2, #1
 800b5b2:	f10b 3bff 	add.w	fp, fp, #4294967295
 800b5b6:	60a2      	str	r2, [r4, #8]
 800b5b8:	68a3      	ldr	r3, [r4, #8]
 800b5ba:	3b01      	subs	r3, #1
 800b5bc:	60a3      	str	r3, [r4, #8]
 800b5be:	6923      	ldr	r3, [r4, #16]
 800b5c0:	3301      	adds	r3, #1
 800b5c2:	6123      	str	r3, [r4, #16]
 800b5c4:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800b5c8:	3b01      	subs	r3, #1
 800b5ca:	2b00      	cmp	r3, #0
 800b5cc:	f8c9 3004 	str.w	r3, [r9, #4]
 800b5d0:	f340 8082 	ble.w	800b6d8 <_scanf_float+0x27c>
 800b5d4:	f8d9 3000 	ldr.w	r3, [r9]
 800b5d8:	3301      	adds	r3, #1
 800b5da:	f8c9 3000 	str.w	r3, [r9]
 800b5de:	e762      	b.n	800b4a6 <_scanf_float+0x4a>
 800b5e0:	eb1a 0105 	adds.w	r1, sl, r5
 800b5e4:	f47f af6d 	bne.w	800b4c2 <_scanf_float+0x66>
 800b5e8:	6822      	ldr	r2, [r4, #0]
 800b5ea:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 800b5ee:	6022      	str	r2, [r4, #0]
 800b5f0:	460d      	mov	r5, r1
 800b5f2:	468a      	mov	sl, r1
 800b5f4:	f806 3b01 	strb.w	r3, [r6], #1
 800b5f8:	e7de      	b.n	800b5b8 <_scanf_float+0x15c>
 800b5fa:	6822      	ldr	r2, [r4, #0]
 800b5fc:	0610      	lsls	r0, r2, #24
 800b5fe:	f57f af60 	bpl.w	800b4c2 <_scanf_float+0x66>
 800b602:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800b606:	6022      	str	r2, [r4, #0]
 800b608:	e7f4      	b.n	800b5f4 <_scanf_float+0x198>
 800b60a:	f1ba 0f00 	cmp.w	sl, #0
 800b60e:	d10c      	bne.n	800b62a <_scanf_float+0x1ce>
 800b610:	b977      	cbnz	r7, 800b630 <_scanf_float+0x1d4>
 800b612:	6822      	ldr	r2, [r4, #0]
 800b614:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800b618:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800b61c:	d108      	bne.n	800b630 <_scanf_float+0x1d4>
 800b61e:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800b622:	6022      	str	r2, [r4, #0]
 800b624:	f04f 0a01 	mov.w	sl, #1
 800b628:	e7e4      	b.n	800b5f4 <_scanf_float+0x198>
 800b62a:	f1ba 0f02 	cmp.w	sl, #2
 800b62e:	d050      	beq.n	800b6d2 <_scanf_float+0x276>
 800b630:	2d01      	cmp	r5, #1
 800b632:	d002      	beq.n	800b63a <_scanf_float+0x1de>
 800b634:	2d04      	cmp	r5, #4
 800b636:	f47f af44 	bne.w	800b4c2 <_scanf_float+0x66>
 800b63a:	3501      	adds	r5, #1
 800b63c:	b2ed      	uxtb	r5, r5
 800b63e:	e7d9      	b.n	800b5f4 <_scanf_float+0x198>
 800b640:	f1ba 0f01 	cmp.w	sl, #1
 800b644:	f47f af3d 	bne.w	800b4c2 <_scanf_float+0x66>
 800b648:	f04f 0a02 	mov.w	sl, #2
 800b64c:	e7d2      	b.n	800b5f4 <_scanf_float+0x198>
 800b64e:	b975      	cbnz	r5, 800b66e <_scanf_float+0x212>
 800b650:	2f00      	cmp	r7, #0
 800b652:	f47f af37 	bne.w	800b4c4 <_scanf_float+0x68>
 800b656:	6822      	ldr	r2, [r4, #0]
 800b658:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800b65c:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800b660:	f040 8103 	bne.w	800b86a <_scanf_float+0x40e>
 800b664:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800b668:	6022      	str	r2, [r4, #0]
 800b66a:	2501      	movs	r5, #1
 800b66c:	e7c2      	b.n	800b5f4 <_scanf_float+0x198>
 800b66e:	2d03      	cmp	r5, #3
 800b670:	d0e3      	beq.n	800b63a <_scanf_float+0x1de>
 800b672:	2d05      	cmp	r5, #5
 800b674:	e7df      	b.n	800b636 <_scanf_float+0x1da>
 800b676:	2d02      	cmp	r5, #2
 800b678:	f47f af23 	bne.w	800b4c2 <_scanf_float+0x66>
 800b67c:	2503      	movs	r5, #3
 800b67e:	e7b9      	b.n	800b5f4 <_scanf_float+0x198>
 800b680:	2d06      	cmp	r5, #6
 800b682:	f47f af1e 	bne.w	800b4c2 <_scanf_float+0x66>
 800b686:	2507      	movs	r5, #7
 800b688:	e7b4      	b.n	800b5f4 <_scanf_float+0x198>
 800b68a:	6822      	ldr	r2, [r4, #0]
 800b68c:	0591      	lsls	r1, r2, #22
 800b68e:	f57f af18 	bpl.w	800b4c2 <_scanf_float+0x66>
 800b692:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800b696:	6022      	str	r2, [r4, #0]
 800b698:	9702      	str	r7, [sp, #8]
 800b69a:	e7ab      	b.n	800b5f4 <_scanf_float+0x198>
 800b69c:	6822      	ldr	r2, [r4, #0]
 800b69e:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 800b6a2:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800b6a6:	d005      	beq.n	800b6b4 <_scanf_float+0x258>
 800b6a8:	0550      	lsls	r0, r2, #21
 800b6aa:	f57f af0a 	bpl.w	800b4c2 <_scanf_float+0x66>
 800b6ae:	2f00      	cmp	r7, #0
 800b6b0:	f000 80db 	beq.w	800b86a <_scanf_float+0x40e>
 800b6b4:	0591      	lsls	r1, r2, #22
 800b6b6:	bf58      	it	pl
 800b6b8:	9902      	ldrpl	r1, [sp, #8]
 800b6ba:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800b6be:	bf58      	it	pl
 800b6c0:	1a79      	subpl	r1, r7, r1
 800b6c2:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800b6c6:	bf58      	it	pl
 800b6c8:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800b6cc:	6022      	str	r2, [r4, #0]
 800b6ce:	2700      	movs	r7, #0
 800b6d0:	e790      	b.n	800b5f4 <_scanf_float+0x198>
 800b6d2:	f04f 0a03 	mov.w	sl, #3
 800b6d6:	e78d      	b.n	800b5f4 <_scanf_float+0x198>
 800b6d8:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800b6dc:	4649      	mov	r1, r9
 800b6de:	4640      	mov	r0, r8
 800b6e0:	4798      	blx	r3
 800b6e2:	2800      	cmp	r0, #0
 800b6e4:	f43f aedf 	beq.w	800b4a6 <_scanf_float+0x4a>
 800b6e8:	e6eb      	b.n	800b4c2 <_scanf_float+0x66>
 800b6ea:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800b6ee:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800b6f2:	464a      	mov	r2, r9
 800b6f4:	4640      	mov	r0, r8
 800b6f6:	4798      	blx	r3
 800b6f8:	6923      	ldr	r3, [r4, #16]
 800b6fa:	3b01      	subs	r3, #1
 800b6fc:	6123      	str	r3, [r4, #16]
 800b6fe:	e6eb      	b.n	800b4d8 <_scanf_float+0x7c>
 800b700:	1e6b      	subs	r3, r5, #1
 800b702:	2b06      	cmp	r3, #6
 800b704:	d824      	bhi.n	800b750 <_scanf_float+0x2f4>
 800b706:	2d02      	cmp	r5, #2
 800b708:	d836      	bhi.n	800b778 <_scanf_float+0x31c>
 800b70a:	9b01      	ldr	r3, [sp, #4]
 800b70c:	429e      	cmp	r6, r3
 800b70e:	f67f aee7 	bls.w	800b4e0 <_scanf_float+0x84>
 800b712:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800b716:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800b71a:	464a      	mov	r2, r9
 800b71c:	4640      	mov	r0, r8
 800b71e:	4798      	blx	r3
 800b720:	6923      	ldr	r3, [r4, #16]
 800b722:	3b01      	subs	r3, #1
 800b724:	6123      	str	r3, [r4, #16]
 800b726:	e7f0      	b.n	800b70a <_scanf_float+0x2ae>
 800b728:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800b72c:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 800b730:	464a      	mov	r2, r9
 800b732:	4640      	mov	r0, r8
 800b734:	4798      	blx	r3
 800b736:	6923      	ldr	r3, [r4, #16]
 800b738:	3b01      	subs	r3, #1
 800b73a:	6123      	str	r3, [r4, #16]
 800b73c:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b740:	fa5f fa8a 	uxtb.w	sl, sl
 800b744:	f1ba 0f02 	cmp.w	sl, #2
 800b748:	d1ee      	bne.n	800b728 <_scanf_float+0x2cc>
 800b74a:	3d03      	subs	r5, #3
 800b74c:	b2ed      	uxtb	r5, r5
 800b74e:	1b76      	subs	r6, r6, r5
 800b750:	6823      	ldr	r3, [r4, #0]
 800b752:	05da      	lsls	r2, r3, #23
 800b754:	d530      	bpl.n	800b7b8 <_scanf_float+0x35c>
 800b756:	055b      	lsls	r3, r3, #21
 800b758:	d511      	bpl.n	800b77e <_scanf_float+0x322>
 800b75a:	9b01      	ldr	r3, [sp, #4]
 800b75c:	429e      	cmp	r6, r3
 800b75e:	f67f aebf 	bls.w	800b4e0 <_scanf_float+0x84>
 800b762:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800b766:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800b76a:	464a      	mov	r2, r9
 800b76c:	4640      	mov	r0, r8
 800b76e:	4798      	blx	r3
 800b770:	6923      	ldr	r3, [r4, #16]
 800b772:	3b01      	subs	r3, #1
 800b774:	6123      	str	r3, [r4, #16]
 800b776:	e7f0      	b.n	800b75a <_scanf_float+0x2fe>
 800b778:	46aa      	mov	sl, r5
 800b77a:	46b3      	mov	fp, r6
 800b77c:	e7de      	b.n	800b73c <_scanf_float+0x2e0>
 800b77e:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800b782:	6923      	ldr	r3, [r4, #16]
 800b784:	2965      	cmp	r1, #101	@ 0x65
 800b786:	f103 33ff 	add.w	r3, r3, #4294967295
 800b78a:	f106 35ff 	add.w	r5, r6, #4294967295
 800b78e:	6123      	str	r3, [r4, #16]
 800b790:	d00c      	beq.n	800b7ac <_scanf_float+0x350>
 800b792:	2945      	cmp	r1, #69	@ 0x45
 800b794:	d00a      	beq.n	800b7ac <_scanf_float+0x350>
 800b796:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800b79a:	464a      	mov	r2, r9
 800b79c:	4640      	mov	r0, r8
 800b79e:	4798      	blx	r3
 800b7a0:	6923      	ldr	r3, [r4, #16]
 800b7a2:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800b7a6:	3b01      	subs	r3, #1
 800b7a8:	1eb5      	subs	r5, r6, #2
 800b7aa:	6123      	str	r3, [r4, #16]
 800b7ac:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800b7b0:	464a      	mov	r2, r9
 800b7b2:	4640      	mov	r0, r8
 800b7b4:	4798      	blx	r3
 800b7b6:	462e      	mov	r6, r5
 800b7b8:	6822      	ldr	r2, [r4, #0]
 800b7ba:	f012 0210 	ands.w	r2, r2, #16
 800b7be:	d001      	beq.n	800b7c4 <_scanf_float+0x368>
 800b7c0:	2000      	movs	r0, #0
 800b7c2:	e68e      	b.n	800b4e2 <_scanf_float+0x86>
 800b7c4:	7032      	strb	r2, [r6, #0]
 800b7c6:	6823      	ldr	r3, [r4, #0]
 800b7c8:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800b7cc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b7d0:	d125      	bne.n	800b81e <_scanf_float+0x3c2>
 800b7d2:	9b02      	ldr	r3, [sp, #8]
 800b7d4:	429f      	cmp	r7, r3
 800b7d6:	d00a      	beq.n	800b7ee <_scanf_float+0x392>
 800b7d8:	1bda      	subs	r2, r3, r7
 800b7da:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 800b7de:	429e      	cmp	r6, r3
 800b7e0:	bf28      	it	cs
 800b7e2:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 800b7e6:	4922      	ldr	r1, [pc, #136]	@ (800b870 <_scanf_float+0x414>)
 800b7e8:	4630      	mov	r0, r6
 800b7ea:	f000 f9ad 	bl	800bb48 <siprintf>
 800b7ee:	9901      	ldr	r1, [sp, #4]
 800b7f0:	2200      	movs	r2, #0
 800b7f2:	4640      	mov	r0, r8
 800b7f4:	f002 fd58 	bl	800e2a8 <_strtod_r>
 800b7f8:	9b03      	ldr	r3, [sp, #12]
 800b7fa:	6821      	ldr	r1, [r4, #0]
 800b7fc:	681b      	ldr	r3, [r3, #0]
 800b7fe:	f011 0f02 	tst.w	r1, #2
 800b802:	ec57 6b10 	vmov	r6, r7, d0
 800b806:	f103 0204 	add.w	r2, r3, #4
 800b80a:	d015      	beq.n	800b838 <_scanf_float+0x3dc>
 800b80c:	9903      	ldr	r1, [sp, #12]
 800b80e:	600a      	str	r2, [r1, #0]
 800b810:	681b      	ldr	r3, [r3, #0]
 800b812:	e9c3 6700 	strd	r6, r7, [r3]
 800b816:	68e3      	ldr	r3, [r4, #12]
 800b818:	3301      	adds	r3, #1
 800b81a:	60e3      	str	r3, [r4, #12]
 800b81c:	e7d0      	b.n	800b7c0 <_scanf_float+0x364>
 800b81e:	9b04      	ldr	r3, [sp, #16]
 800b820:	2b00      	cmp	r3, #0
 800b822:	d0e4      	beq.n	800b7ee <_scanf_float+0x392>
 800b824:	9905      	ldr	r1, [sp, #20]
 800b826:	230a      	movs	r3, #10
 800b828:	3101      	adds	r1, #1
 800b82a:	4640      	mov	r0, r8
 800b82c:	f002 fdbc 	bl	800e3a8 <_strtol_r>
 800b830:	9b04      	ldr	r3, [sp, #16]
 800b832:	9e05      	ldr	r6, [sp, #20]
 800b834:	1ac2      	subs	r2, r0, r3
 800b836:	e7d0      	b.n	800b7da <_scanf_float+0x37e>
 800b838:	f011 0f04 	tst.w	r1, #4
 800b83c:	9903      	ldr	r1, [sp, #12]
 800b83e:	600a      	str	r2, [r1, #0]
 800b840:	d1e6      	bne.n	800b810 <_scanf_float+0x3b4>
 800b842:	681d      	ldr	r5, [r3, #0]
 800b844:	4632      	mov	r2, r6
 800b846:	463b      	mov	r3, r7
 800b848:	4630      	mov	r0, r6
 800b84a:	4639      	mov	r1, r7
 800b84c:	f7f5 f976 	bl	8000b3c <__aeabi_dcmpun>
 800b850:	b128      	cbz	r0, 800b85e <_scanf_float+0x402>
 800b852:	4808      	ldr	r0, [pc, #32]	@ (800b874 <_scanf_float+0x418>)
 800b854:	f000 fb00 	bl	800be58 <nanf>
 800b858:	ed85 0a00 	vstr	s0, [r5]
 800b85c:	e7db      	b.n	800b816 <_scanf_float+0x3ba>
 800b85e:	4630      	mov	r0, r6
 800b860:	4639      	mov	r1, r7
 800b862:	f7f5 f9c9 	bl	8000bf8 <__aeabi_d2f>
 800b866:	6028      	str	r0, [r5, #0]
 800b868:	e7d5      	b.n	800b816 <_scanf_float+0x3ba>
 800b86a:	2700      	movs	r7, #0
 800b86c:	e62e      	b.n	800b4cc <_scanf_float+0x70>
 800b86e:	bf00      	nop
 800b870:	08010b4c 	.word	0x08010b4c
 800b874:	08010b8c 	.word	0x08010b8c

0800b878 <std>:
 800b878:	2300      	movs	r3, #0
 800b87a:	b510      	push	{r4, lr}
 800b87c:	4604      	mov	r4, r0
 800b87e:	e9c0 3300 	strd	r3, r3, [r0]
 800b882:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b886:	6083      	str	r3, [r0, #8]
 800b888:	8181      	strh	r1, [r0, #12]
 800b88a:	6643      	str	r3, [r0, #100]	@ 0x64
 800b88c:	81c2      	strh	r2, [r0, #14]
 800b88e:	6183      	str	r3, [r0, #24]
 800b890:	4619      	mov	r1, r3
 800b892:	2208      	movs	r2, #8
 800b894:	305c      	adds	r0, #92	@ 0x5c
 800b896:	f000 fa51 	bl	800bd3c <memset>
 800b89a:	4b0d      	ldr	r3, [pc, #52]	@ (800b8d0 <std+0x58>)
 800b89c:	6263      	str	r3, [r4, #36]	@ 0x24
 800b89e:	4b0d      	ldr	r3, [pc, #52]	@ (800b8d4 <std+0x5c>)
 800b8a0:	62a3      	str	r3, [r4, #40]	@ 0x28
 800b8a2:	4b0d      	ldr	r3, [pc, #52]	@ (800b8d8 <std+0x60>)
 800b8a4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800b8a6:	4b0d      	ldr	r3, [pc, #52]	@ (800b8dc <std+0x64>)
 800b8a8:	6323      	str	r3, [r4, #48]	@ 0x30
 800b8aa:	4b0d      	ldr	r3, [pc, #52]	@ (800b8e0 <std+0x68>)
 800b8ac:	6224      	str	r4, [r4, #32]
 800b8ae:	429c      	cmp	r4, r3
 800b8b0:	d006      	beq.n	800b8c0 <std+0x48>
 800b8b2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800b8b6:	4294      	cmp	r4, r2
 800b8b8:	d002      	beq.n	800b8c0 <std+0x48>
 800b8ba:	33d0      	adds	r3, #208	@ 0xd0
 800b8bc:	429c      	cmp	r4, r3
 800b8be:	d105      	bne.n	800b8cc <std+0x54>
 800b8c0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800b8c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b8c8:	f000 bab4 	b.w	800be34 <__retarget_lock_init_recursive>
 800b8cc:	bd10      	pop	{r4, pc}
 800b8ce:	bf00      	nop
 800b8d0:	0800bb8d 	.word	0x0800bb8d
 800b8d4:	0800bbaf 	.word	0x0800bbaf
 800b8d8:	0800bbe7 	.word	0x0800bbe7
 800b8dc:	0800bc0b 	.word	0x0800bc0b
 800b8e0:	200140d0 	.word	0x200140d0

0800b8e4 <stdio_exit_handler>:
 800b8e4:	4a02      	ldr	r2, [pc, #8]	@ (800b8f0 <stdio_exit_handler+0xc>)
 800b8e6:	4903      	ldr	r1, [pc, #12]	@ (800b8f4 <stdio_exit_handler+0x10>)
 800b8e8:	4803      	ldr	r0, [pc, #12]	@ (800b8f8 <stdio_exit_handler+0x14>)
 800b8ea:	f000 b869 	b.w	800b9c0 <_fwalk_sglue>
 800b8ee:	bf00      	nop
 800b8f0:	2000d134 	.word	0x2000d134
 800b8f4:	0800e9e9 	.word	0x0800e9e9
 800b8f8:	2000d144 	.word	0x2000d144

0800b8fc <cleanup_stdio>:
 800b8fc:	6841      	ldr	r1, [r0, #4]
 800b8fe:	4b0c      	ldr	r3, [pc, #48]	@ (800b930 <cleanup_stdio+0x34>)
 800b900:	4299      	cmp	r1, r3
 800b902:	b510      	push	{r4, lr}
 800b904:	4604      	mov	r4, r0
 800b906:	d001      	beq.n	800b90c <cleanup_stdio+0x10>
 800b908:	f003 f86e 	bl	800e9e8 <_fflush_r>
 800b90c:	68a1      	ldr	r1, [r4, #8]
 800b90e:	4b09      	ldr	r3, [pc, #36]	@ (800b934 <cleanup_stdio+0x38>)
 800b910:	4299      	cmp	r1, r3
 800b912:	d002      	beq.n	800b91a <cleanup_stdio+0x1e>
 800b914:	4620      	mov	r0, r4
 800b916:	f003 f867 	bl	800e9e8 <_fflush_r>
 800b91a:	68e1      	ldr	r1, [r4, #12]
 800b91c:	4b06      	ldr	r3, [pc, #24]	@ (800b938 <cleanup_stdio+0x3c>)
 800b91e:	4299      	cmp	r1, r3
 800b920:	d004      	beq.n	800b92c <cleanup_stdio+0x30>
 800b922:	4620      	mov	r0, r4
 800b924:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b928:	f003 b85e 	b.w	800e9e8 <_fflush_r>
 800b92c:	bd10      	pop	{r4, pc}
 800b92e:	bf00      	nop
 800b930:	200140d0 	.word	0x200140d0
 800b934:	20014138 	.word	0x20014138
 800b938:	200141a0 	.word	0x200141a0

0800b93c <global_stdio_init.part.0>:
 800b93c:	b510      	push	{r4, lr}
 800b93e:	4b0b      	ldr	r3, [pc, #44]	@ (800b96c <global_stdio_init.part.0+0x30>)
 800b940:	4c0b      	ldr	r4, [pc, #44]	@ (800b970 <global_stdio_init.part.0+0x34>)
 800b942:	4a0c      	ldr	r2, [pc, #48]	@ (800b974 <global_stdio_init.part.0+0x38>)
 800b944:	601a      	str	r2, [r3, #0]
 800b946:	4620      	mov	r0, r4
 800b948:	2200      	movs	r2, #0
 800b94a:	2104      	movs	r1, #4
 800b94c:	f7ff ff94 	bl	800b878 <std>
 800b950:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800b954:	2201      	movs	r2, #1
 800b956:	2109      	movs	r1, #9
 800b958:	f7ff ff8e 	bl	800b878 <std>
 800b95c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800b960:	2202      	movs	r2, #2
 800b962:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b966:	2112      	movs	r1, #18
 800b968:	f7ff bf86 	b.w	800b878 <std>
 800b96c:	20014208 	.word	0x20014208
 800b970:	200140d0 	.word	0x200140d0
 800b974:	0800b8e5 	.word	0x0800b8e5

0800b978 <__sfp_lock_acquire>:
 800b978:	4801      	ldr	r0, [pc, #4]	@ (800b980 <__sfp_lock_acquire+0x8>)
 800b97a:	f000 ba5c 	b.w	800be36 <__retarget_lock_acquire_recursive>
 800b97e:	bf00      	nop
 800b980:	20014211 	.word	0x20014211

0800b984 <__sfp_lock_release>:
 800b984:	4801      	ldr	r0, [pc, #4]	@ (800b98c <__sfp_lock_release+0x8>)
 800b986:	f000 ba57 	b.w	800be38 <__retarget_lock_release_recursive>
 800b98a:	bf00      	nop
 800b98c:	20014211 	.word	0x20014211

0800b990 <__sinit>:
 800b990:	b510      	push	{r4, lr}
 800b992:	4604      	mov	r4, r0
 800b994:	f7ff fff0 	bl	800b978 <__sfp_lock_acquire>
 800b998:	6a23      	ldr	r3, [r4, #32]
 800b99a:	b11b      	cbz	r3, 800b9a4 <__sinit+0x14>
 800b99c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b9a0:	f7ff bff0 	b.w	800b984 <__sfp_lock_release>
 800b9a4:	4b04      	ldr	r3, [pc, #16]	@ (800b9b8 <__sinit+0x28>)
 800b9a6:	6223      	str	r3, [r4, #32]
 800b9a8:	4b04      	ldr	r3, [pc, #16]	@ (800b9bc <__sinit+0x2c>)
 800b9aa:	681b      	ldr	r3, [r3, #0]
 800b9ac:	2b00      	cmp	r3, #0
 800b9ae:	d1f5      	bne.n	800b99c <__sinit+0xc>
 800b9b0:	f7ff ffc4 	bl	800b93c <global_stdio_init.part.0>
 800b9b4:	e7f2      	b.n	800b99c <__sinit+0xc>
 800b9b6:	bf00      	nop
 800b9b8:	0800b8fd 	.word	0x0800b8fd
 800b9bc:	20014208 	.word	0x20014208

0800b9c0 <_fwalk_sglue>:
 800b9c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b9c4:	4607      	mov	r7, r0
 800b9c6:	4688      	mov	r8, r1
 800b9c8:	4614      	mov	r4, r2
 800b9ca:	2600      	movs	r6, #0
 800b9cc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b9d0:	f1b9 0901 	subs.w	r9, r9, #1
 800b9d4:	d505      	bpl.n	800b9e2 <_fwalk_sglue+0x22>
 800b9d6:	6824      	ldr	r4, [r4, #0]
 800b9d8:	2c00      	cmp	r4, #0
 800b9da:	d1f7      	bne.n	800b9cc <_fwalk_sglue+0xc>
 800b9dc:	4630      	mov	r0, r6
 800b9de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b9e2:	89ab      	ldrh	r3, [r5, #12]
 800b9e4:	2b01      	cmp	r3, #1
 800b9e6:	d907      	bls.n	800b9f8 <_fwalk_sglue+0x38>
 800b9e8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b9ec:	3301      	adds	r3, #1
 800b9ee:	d003      	beq.n	800b9f8 <_fwalk_sglue+0x38>
 800b9f0:	4629      	mov	r1, r5
 800b9f2:	4638      	mov	r0, r7
 800b9f4:	47c0      	blx	r8
 800b9f6:	4306      	orrs	r6, r0
 800b9f8:	3568      	adds	r5, #104	@ 0x68
 800b9fa:	e7e9      	b.n	800b9d0 <_fwalk_sglue+0x10>

0800b9fc <iprintf>:
 800b9fc:	b40f      	push	{r0, r1, r2, r3}
 800b9fe:	b507      	push	{r0, r1, r2, lr}
 800ba00:	4906      	ldr	r1, [pc, #24]	@ (800ba1c <iprintf+0x20>)
 800ba02:	ab04      	add	r3, sp, #16
 800ba04:	6808      	ldr	r0, [r1, #0]
 800ba06:	f853 2b04 	ldr.w	r2, [r3], #4
 800ba0a:	6881      	ldr	r1, [r0, #8]
 800ba0c:	9301      	str	r3, [sp, #4]
 800ba0e:	f002 fe4f 	bl	800e6b0 <_vfiprintf_r>
 800ba12:	b003      	add	sp, #12
 800ba14:	f85d eb04 	ldr.w	lr, [sp], #4
 800ba18:	b004      	add	sp, #16
 800ba1a:	4770      	bx	lr
 800ba1c:	2000d140 	.word	0x2000d140

0800ba20 <_puts_r>:
 800ba20:	6a03      	ldr	r3, [r0, #32]
 800ba22:	b570      	push	{r4, r5, r6, lr}
 800ba24:	6884      	ldr	r4, [r0, #8]
 800ba26:	4605      	mov	r5, r0
 800ba28:	460e      	mov	r6, r1
 800ba2a:	b90b      	cbnz	r3, 800ba30 <_puts_r+0x10>
 800ba2c:	f7ff ffb0 	bl	800b990 <__sinit>
 800ba30:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800ba32:	07db      	lsls	r3, r3, #31
 800ba34:	d405      	bmi.n	800ba42 <_puts_r+0x22>
 800ba36:	89a3      	ldrh	r3, [r4, #12]
 800ba38:	0598      	lsls	r0, r3, #22
 800ba3a:	d402      	bmi.n	800ba42 <_puts_r+0x22>
 800ba3c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ba3e:	f000 f9fa 	bl	800be36 <__retarget_lock_acquire_recursive>
 800ba42:	89a3      	ldrh	r3, [r4, #12]
 800ba44:	0719      	lsls	r1, r3, #28
 800ba46:	d502      	bpl.n	800ba4e <_puts_r+0x2e>
 800ba48:	6923      	ldr	r3, [r4, #16]
 800ba4a:	2b00      	cmp	r3, #0
 800ba4c:	d135      	bne.n	800baba <_puts_r+0x9a>
 800ba4e:	4621      	mov	r1, r4
 800ba50:	4628      	mov	r0, r5
 800ba52:	f000 f91d 	bl	800bc90 <__swsetup_r>
 800ba56:	b380      	cbz	r0, 800baba <_puts_r+0x9a>
 800ba58:	f04f 35ff 	mov.w	r5, #4294967295
 800ba5c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800ba5e:	07da      	lsls	r2, r3, #31
 800ba60:	d405      	bmi.n	800ba6e <_puts_r+0x4e>
 800ba62:	89a3      	ldrh	r3, [r4, #12]
 800ba64:	059b      	lsls	r3, r3, #22
 800ba66:	d402      	bmi.n	800ba6e <_puts_r+0x4e>
 800ba68:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ba6a:	f000 f9e5 	bl	800be38 <__retarget_lock_release_recursive>
 800ba6e:	4628      	mov	r0, r5
 800ba70:	bd70      	pop	{r4, r5, r6, pc}
 800ba72:	2b00      	cmp	r3, #0
 800ba74:	da04      	bge.n	800ba80 <_puts_r+0x60>
 800ba76:	69a2      	ldr	r2, [r4, #24]
 800ba78:	429a      	cmp	r2, r3
 800ba7a:	dc17      	bgt.n	800baac <_puts_r+0x8c>
 800ba7c:	290a      	cmp	r1, #10
 800ba7e:	d015      	beq.n	800baac <_puts_r+0x8c>
 800ba80:	6823      	ldr	r3, [r4, #0]
 800ba82:	1c5a      	adds	r2, r3, #1
 800ba84:	6022      	str	r2, [r4, #0]
 800ba86:	7019      	strb	r1, [r3, #0]
 800ba88:	68a3      	ldr	r3, [r4, #8]
 800ba8a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800ba8e:	3b01      	subs	r3, #1
 800ba90:	60a3      	str	r3, [r4, #8]
 800ba92:	2900      	cmp	r1, #0
 800ba94:	d1ed      	bne.n	800ba72 <_puts_r+0x52>
 800ba96:	2b00      	cmp	r3, #0
 800ba98:	da11      	bge.n	800babe <_puts_r+0x9e>
 800ba9a:	4622      	mov	r2, r4
 800ba9c:	210a      	movs	r1, #10
 800ba9e:	4628      	mov	r0, r5
 800baa0:	f000 f8b7 	bl	800bc12 <__swbuf_r>
 800baa4:	3001      	adds	r0, #1
 800baa6:	d0d7      	beq.n	800ba58 <_puts_r+0x38>
 800baa8:	250a      	movs	r5, #10
 800baaa:	e7d7      	b.n	800ba5c <_puts_r+0x3c>
 800baac:	4622      	mov	r2, r4
 800baae:	4628      	mov	r0, r5
 800bab0:	f000 f8af 	bl	800bc12 <__swbuf_r>
 800bab4:	3001      	adds	r0, #1
 800bab6:	d1e7      	bne.n	800ba88 <_puts_r+0x68>
 800bab8:	e7ce      	b.n	800ba58 <_puts_r+0x38>
 800baba:	3e01      	subs	r6, #1
 800babc:	e7e4      	b.n	800ba88 <_puts_r+0x68>
 800babe:	6823      	ldr	r3, [r4, #0]
 800bac0:	1c5a      	adds	r2, r3, #1
 800bac2:	6022      	str	r2, [r4, #0]
 800bac4:	220a      	movs	r2, #10
 800bac6:	701a      	strb	r2, [r3, #0]
 800bac8:	e7ee      	b.n	800baa8 <_puts_r+0x88>
	...

0800bacc <puts>:
 800bacc:	4b02      	ldr	r3, [pc, #8]	@ (800bad8 <puts+0xc>)
 800bace:	4601      	mov	r1, r0
 800bad0:	6818      	ldr	r0, [r3, #0]
 800bad2:	f7ff bfa5 	b.w	800ba20 <_puts_r>
 800bad6:	bf00      	nop
 800bad8:	2000d140 	.word	0x2000d140

0800badc <sniprintf>:
 800badc:	b40c      	push	{r2, r3}
 800bade:	b530      	push	{r4, r5, lr}
 800bae0:	4b18      	ldr	r3, [pc, #96]	@ (800bb44 <sniprintf+0x68>)
 800bae2:	1e0c      	subs	r4, r1, #0
 800bae4:	681d      	ldr	r5, [r3, #0]
 800bae6:	b09d      	sub	sp, #116	@ 0x74
 800bae8:	da08      	bge.n	800bafc <sniprintf+0x20>
 800baea:	238b      	movs	r3, #139	@ 0x8b
 800baec:	602b      	str	r3, [r5, #0]
 800baee:	f04f 30ff 	mov.w	r0, #4294967295
 800baf2:	b01d      	add	sp, #116	@ 0x74
 800baf4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800baf8:	b002      	add	sp, #8
 800bafa:	4770      	bx	lr
 800bafc:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800bb00:	f8ad 3014 	strh.w	r3, [sp, #20]
 800bb04:	f04f 0300 	mov.w	r3, #0
 800bb08:	931b      	str	r3, [sp, #108]	@ 0x6c
 800bb0a:	bf14      	ite	ne
 800bb0c:	f104 33ff 	addne.w	r3, r4, #4294967295
 800bb10:	4623      	moveq	r3, r4
 800bb12:	9304      	str	r3, [sp, #16]
 800bb14:	9307      	str	r3, [sp, #28]
 800bb16:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800bb1a:	9002      	str	r0, [sp, #8]
 800bb1c:	9006      	str	r0, [sp, #24]
 800bb1e:	f8ad 3016 	strh.w	r3, [sp, #22]
 800bb22:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800bb24:	ab21      	add	r3, sp, #132	@ 0x84
 800bb26:	a902      	add	r1, sp, #8
 800bb28:	4628      	mov	r0, r5
 800bb2a:	9301      	str	r3, [sp, #4]
 800bb2c:	f002 fc9a 	bl	800e464 <_svfiprintf_r>
 800bb30:	1c43      	adds	r3, r0, #1
 800bb32:	bfbc      	itt	lt
 800bb34:	238b      	movlt	r3, #139	@ 0x8b
 800bb36:	602b      	strlt	r3, [r5, #0]
 800bb38:	2c00      	cmp	r4, #0
 800bb3a:	d0da      	beq.n	800baf2 <sniprintf+0x16>
 800bb3c:	9b02      	ldr	r3, [sp, #8]
 800bb3e:	2200      	movs	r2, #0
 800bb40:	701a      	strb	r2, [r3, #0]
 800bb42:	e7d6      	b.n	800baf2 <sniprintf+0x16>
 800bb44:	2000d140 	.word	0x2000d140

0800bb48 <siprintf>:
 800bb48:	b40e      	push	{r1, r2, r3}
 800bb4a:	b510      	push	{r4, lr}
 800bb4c:	b09d      	sub	sp, #116	@ 0x74
 800bb4e:	ab1f      	add	r3, sp, #124	@ 0x7c
 800bb50:	9002      	str	r0, [sp, #8]
 800bb52:	9006      	str	r0, [sp, #24]
 800bb54:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800bb58:	480a      	ldr	r0, [pc, #40]	@ (800bb84 <siprintf+0x3c>)
 800bb5a:	9107      	str	r1, [sp, #28]
 800bb5c:	9104      	str	r1, [sp, #16]
 800bb5e:	490a      	ldr	r1, [pc, #40]	@ (800bb88 <siprintf+0x40>)
 800bb60:	f853 2b04 	ldr.w	r2, [r3], #4
 800bb64:	9105      	str	r1, [sp, #20]
 800bb66:	2400      	movs	r4, #0
 800bb68:	a902      	add	r1, sp, #8
 800bb6a:	6800      	ldr	r0, [r0, #0]
 800bb6c:	9301      	str	r3, [sp, #4]
 800bb6e:	941b      	str	r4, [sp, #108]	@ 0x6c
 800bb70:	f002 fc78 	bl	800e464 <_svfiprintf_r>
 800bb74:	9b02      	ldr	r3, [sp, #8]
 800bb76:	701c      	strb	r4, [r3, #0]
 800bb78:	b01d      	add	sp, #116	@ 0x74
 800bb7a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bb7e:	b003      	add	sp, #12
 800bb80:	4770      	bx	lr
 800bb82:	bf00      	nop
 800bb84:	2000d140 	.word	0x2000d140
 800bb88:	ffff0208 	.word	0xffff0208

0800bb8c <__sread>:
 800bb8c:	b510      	push	{r4, lr}
 800bb8e:	460c      	mov	r4, r1
 800bb90:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bb94:	f000 f900 	bl	800bd98 <_read_r>
 800bb98:	2800      	cmp	r0, #0
 800bb9a:	bfab      	itete	ge
 800bb9c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800bb9e:	89a3      	ldrhlt	r3, [r4, #12]
 800bba0:	181b      	addge	r3, r3, r0
 800bba2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800bba6:	bfac      	ite	ge
 800bba8:	6563      	strge	r3, [r4, #84]	@ 0x54
 800bbaa:	81a3      	strhlt	r3, [r4, #12]
 800bbac:	bd10      	pop	{r4, pc}

0800bbae <__swrite>:
 800bbae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bbb2:	461f      	mov	r7, r3
 800bbb4:	898b      	ldrh	r3, [r1, #12]
 800bbb6:	05db      	lsls	r3, r3, #23
 800bbb8:	4605      	mov	r5, r0
 800bbba:	460c      	mov	r4, r1
 800bbbc:	4616      	mov	r6, r2
 800bbbe:	d505      	bpl.n	800bbcc <__swrite+0x1e>
 800bbc0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bbc4:	2302      	movs	r3, #2
 800bbc6:	2200      	movs	r2, #0
 800bbc8:	f000 f8d4 	bl	800bd74 <_lseek_r>
 800bbcc:	89a3      	ldrh	r3, [r4, #12]
 800bbce:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bbd2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800bbd6:	81a3      	strh	r3, [r4, #12]
 800bbd8:	4632      	mov	r2, r6
 800bbda:	463b      	mov	r3, r7
 800bbdc:	4628      	mov	r0, r5
 800bbde:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bbe2:	f000 b8eb 	b.w	800bdbc <_write_r>

0800bbe6 <__sseek>:
 800bbe6:	b510      	push	{r4, lr}
 800bbe8:	460c      	mov	r4, r1
 800bbea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bbee:	f000 f8c1 	bl	800bd74 <_lseek_r>
 800bbf2:	1c43      	adds	r3, r0, #1
 800bbf4:	89a3      	ldrh	r3, [r4, #12]
 800bbf6:	bf15      	itete	ne
 800bbf8:	6560      	strne	r0, [r4, #84]	@ 0x54
 800bbfa:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800bbfe:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800bc02:	81a3      	strheq	r3, [r4, #12]
 800bc04:	bf18      	it	ne
 800bc06:	81a3      	strhne	r3, [r4, #12]
 800bc08:	bd10      	pop	{r4, pc}

0800bc0a <__sclose>:
 800bc0a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bc0e:	f000 b8a1 	b.w	800bd54 <_close_r>

0800bc12 <__swbuf_r>:
 800bc12:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bc14:	460e      	mov	r6, r1
 800bc16:	4614      	mov	r4, r2
 800bc18:	4605      	mov	r5, r0
 800bc1a:	b118      	cbz	r0, 800bc24 <__swbuf_r+0x12>
 800bc1c:	6a03      	ldr	r3, [r0, #32]
 800bc1e:	b90b      	cbnz	r3, 800bc24 <__swbuf_r+0x12>
 800bc20:	f7ff feb6 	bl	800b990 <__sinit>
 800bc24:	69a3      	ldr	r3, [r4, #24]
 800bc26:	60a3      	str	r3, [r4, #8]
 800bc28:	89a3      	ldrh	r3, [r4, #12]
 800bc2a:	071a      	lsls	r2, r3, #28
 800bc2c:	d501      	bpl.n	800bc32 <__swbuf_r+0x20>
 800bc2e:	6923      	ldr	r3, [r4, #16]
 800bc30:	b943      	cbnz	r3, 800bc44 <__swbuf_r+0x32>
 800bc32:	4621      	mov	r1, r4
 800bc34:	4628      	mov	r0, r5
 800bc36:	f000 f82b 	bl	800bc90 <__swsetup_r>
 800bc3a:	b118      	cbz	r0, 800bc44 <__swbuf_r+0x32>
 800bc3c:	f04f 37ff 	mov.w	r7, #4294967295
 800bc40:	4638      	mov	r0, r7
 800bc42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bc44:	6823      	ldr	r3, [r4, #0]
 800bc46:	6922      	ldr	r2, [r4, #16]
 800bc48:	1a98      	subs	r0, r3, r2
 800bc4a:	6963      	ldr	r3, [r4, #20]
 800bc4c:	b2f6      	uxtb	r6, r6
 800bc4e:	4283      	cmp	r3, r0
 800bc50:	4637      	mov	r7, r6
 800bc52:	dc05      	bgt.n	800bc60 <__swbuf_r+0x4e>
 800bc54:	4621      	mov	r1, r4
 800bc56:	4628      	mov	r0, r5
 800bc58:	f002 fec6 	bl	800e9e8 <_fflush_r>
 800bc5c:	2800      	cmp	r0, #0
 800bc5e:	d1ed      	bne.n	800bc3c <__swbuf_r+0x2a>
 800bc60:	68a3      	ldr	r3, [r4, #8]
 800bc62:	3b01      	subs	r3, #1
 800bc64:	60a3      	str	r3, [r4, #8]
 800bc66:	6823      	ldr	r3, [r4, #0]
 800bc68:	1c5a      	adds	r2, r3, #1
 800bc6a:	6022      	str	r2, [r4, #0]
 800bc6c:	701e      	strb	r6, [r3, #0]
 800bc6e:	6962      	ldr	r2, [r4, #20]
 800bc70:	1c43      	adds	r3, r0, #1
 800bc72:	429a      	cmp	r2, r3
 800bc74:	d004      	beq.n	800bc80 <__swbuf_r+0x6e>
 800bc76:	89a3      	ldrh	r3, [r4, #12]
 800bc78:	07db      	lsls	r3, r3, #31
 800bc7a:	d5e1      	bpl.n	800bc40 <__swbuf_r+0x2e>
 800bc7c:	2e0a      	cmp	r6, #10
 800bc7e:	d1df      	bne.n	800bc40 <__swbuf_r+0x2e>
 800bc80:	4621      	mov	r1, r4
 800bc82:	4628      	mov	r0, r5
 800bc84:	f002 feb0 	bl	800e9e8 <_fflush_r>
 800bc88:	2800      	cmp	r0, #0
 800bc8a:	d0d9      	beq.n	800bc40 <__swbuf_r+0x2e>
 800bc8c:	e7d6      	b.n	800bc3c <__swbuf_r+0x2a>
	...

0800bc90 <__swsetup_r>:
 800bc90:	b538      	push	{r3, r4, r5, lr}
 800bc92:	4b29      	ldr	r3, [pc, #164]	@ (800bd38 <__swsetup_r+0xa8>)
 800bc94:	4605      	mov	r5, r0
 800bc96:	6818      	ldr	r0, [r3, #0]
 800bc98:	460c      	mov	r4, r1
 800bc9a:	b118      	cbz	r0, 800bca4 <__swsetup_r+0x14>
 800bc9c:	6a03      	ldr	r3, [r0, #32]
 800bc9e:	b90b      	cbnz	r3, 800bca4 <__swsetup_r+0x14>
 800bca0:	f7ff fe76 	bl	800b990 <__sinit>
 800bca4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bca8:	0719      	lsls	r1, r3, #28
 800bcaa:	d422      	bmi.n	800bcf2 <__swsetup_r+0x62>
 800bcac:	06da      	lsls	r2, r3, #27
 800bcae:	d407      	bmi.n	800bcc0 <__swsetup_r+0x30>
 800bcb0:	2209      	movs	r2, #9
 800bcb2:	602a      	str	r2, [r5, #0]
 800bcb4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bcb8:	81a3      	strh	r3, [r4, #12]
 800bcba:	f04f 30ff 	mov.w	r0, #4294967295
 800bcbe:	e033      	b.n	800bd28 <__swsetup_r+0x98>
 800bcc0:	0758      	lsls	r0, r3, #29
 800bcc2:	d512      	bpl.n	800bcea <__swsetup_r+0x5a>
 800bcc4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800bcc6:	b141      	cbz	r1, 800bcda <__swsetup_r+0x4a>
 800bcc8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800bccc:	4299      	cmp	r1, r3
 800bcce:	d002      	beq.n	800bcd6 <__swsetup_r+0x46>
 800bcd0:	4628      	mov	r0, r5
 800bcd2:	f000 ff3d 	bl	800cb50 <_free_r>
 800bcd6:	2300      	movs	r3, #0
 800bcd8:	6363      	str	r3, [r4, #52]	@ 0x34
 800bcda:	89a3      	ldrh	r3, [r4, #12]
 800bcdc:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800bce0:	81a3      	strh	r3, [r4, #12]
 800bce2:	2300      	movs	r3, #0
 800bce4:	6063      	str	r3, [r4, #4]
 800bce6:	6923      	ldr	r3, [r4, #16]
 800bce8:	6023      	str	r3, [r4, #0]
 800bcea:	89a3      	ldrh	r3, [r4, #12]
 800bcec:	f043 0308 	orr.w	r3, r3, #8
 800bcf0:	81a3      	strh	r3, [r4, #12]
 800bcf2:	6923      	ldr	r3, [r4, #16]
 800bcf4:	b94b      	cbnz	r3, 800bd0a <__swsetup_r+0x7a>
 800bcf6:	89a3      	ldrh	r3, [r4, #12]
 800bcf8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800bcfc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800bd00:	d003      	beq.n	800bd0a <__swsetup_r+0x7a>
 800bd02:	4621      	mov	r1, r4
 800bd04:	4628      	mov	r0, r5
 800bd06:	f002 fecf 	bl	800eaa8 <__smakebuf_r>
 800bd0a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bd0e:	f013 0201 	ands.w	r2, r3, #1
 800bd12:	d00a      	beq.n	800bd2a <__swsetup_r+0x9a>
 800bd14:	2200      	movs	r2, #0
 800bd16:	60a2      	str	r2, [r4, #8]
 800bd18:	6962      	ldr	r2, [r4, #20]
 800bd1a:	4252      	negs	r2, r2
 800bd1c:	61a2      	str	r2, [r4, #24]
 800bd1e:	6922      	ldr	r2, [r4, #16]
 800bd20:	b942      	cbnz	r2, 800bd34 <__swsetup_r+0xa4>
 800bd22:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800bd26:	d1c5      	bne.n	800bcb4 <__swsetup_r+0x24>
 800bd28:	bd38      	pop	{r3, r4, r5, pc}
 800bd2a:	0799      	lsls	r1, r3, #30
 800bd2c:	bf58      	it	pl
 800bd2e:	6962      	ldrpl	r2, [r4, #20]
 800bd30:	60a2      	str	r2, [r4, #8]
 800bd32:	e7f4      	b.n	800bd1e <__swsetup_r+0x8e>
 800bd34:	2000      	movs	r0, #0
 800bd36:	e7f7      	b.n	800bd28 <__swsetup_r+0x98>
 800bd38:	2000d140 	.word	0x2000d140

0800bd3c <memset>:
 800bd3c:	4402      	add	r2, r0
 800bd3e:	4603      	mov	r3, r0
 800bd40:	4293      	cmp	r3, r2
 800bd42:	d100      	bne.n	800bd46 <memset+0xa>
 800bd44:	4770      	bx	lr
 800bd46:	f803 1b01 	strb.w	r1, [r3], #1
 800bd4a:	e7f9      	b.n	800bd40 <memset+0x4>

0800bd4c <_localeconv_r>:
 800bd4c:	4800      	ldr	r0, [pc, #0]	@ (800bd50 <_localeconv_r+0x4>)
 800bd4e:	4770      	bx	lr
 800bd50:	2000d280 	.word	0x2000d280

0800bd54 <_close_r>:
 800bd54:	b538      	push	{r3, r4, r5, lr}
 800bd56:	4d06      	ldr	r5, [pc, #24]	@ (800bd70 <_close_r+0x1c>)
 800bd58:	2300      	movs	r3, #0
 800bd5a:	4604      	mov	r4, r0
 800bd5c:	4608      	mov	r0, r1
 800bd5e:	602b      	str	r3, [r5, #0]
 800bd60:	f7f5 f9d0 	bl	8001104 <_close>
 800bd64:	1c43      	adds	r3, r0, #1
 800bd66:	d102      	bne.n	800bd6e <_close_r+0x1a>
 800bd68:	682b      	ldr	r3, [r5, #0]
 800bd6a:	b103      	cbz	r3, 800bd6e <_close_r+0x1a>
 800bd6c:	6023      	str	r3, [r4, #0]
 800bd6e:	bd38      	pop	{r3, r4, r5, pc}
 800bd70:	2001420c 	.word	0x2001420c

0800bd74 <_lseek_r>:
 800bd74:	b538      	push	{r3, r4, r5, lr}
 800bd76:	4d07      	ldr	r5, [pc, #28]	@ (800bd94 <_lseek_r+0x20>)
 800bd78:	4604      	mov	r4, r0
 800bd7a:	4608      	mov	r0, r1
 800bd7c:	4611      	mov	r1, r2
 800bd7e:	2200      	movs	r2, #0
 800bd80:	602a      	str	r2, [r5, #0]
 800bd82:	461a      	mov	r2, r3
 800bd84:	f7f5 f9f2 	bl	800116c <_lseek>
 800bd88:	1c43      	adds	r3, r0, #1
 800bd8a:	d102      	bne.n	800bd92 <_lseek_r+0x1e>
 800bd8c:	682b      	ldr	r3, [r5, #0]
 800bd8e:	b103      	cbz	r3, 800bd92 <_lseek_r+0x1e>
 800bd90:	6023      	str	r3, [r4, #0]
 800bd92:	bd38      	pop	{r3, r4, r5, pc}
 800bd94:	2001420c 	.word	0x2001420c

0800bd98 <_read_r>:
 800bd98:	b538      	push	{r3, r4, r5, lr}
 800bd9a:	4d07      	ldr	r5, [pc, #28]	@ (800bdb8 <_read_r+0x20>)
 800bd9c:	4604      	mov	r4, r0
 800bd9e:	4608      	mov	r0, r1
 800bda0:	4611      	mov	r1, r2
 800bda2:	2200      	movs	r2, #0
 800bda4:	602a      	str	r2, [r5, #0]
 800bda6:	461a      	mov	r2, r3
 800bda8:	f7f5 f9f4 	bl	8001194 <_read>
 800bdac:	1c43      	adds	r3, r0, #1
 800bdae:	d102      	bne.n	800bdb6 <_read_r+0x1e>
 800bdb0:	682b      	ldr	r3, [r5, #0]
 800bdb2:	b103      	cbz	r3, 800bdb6 <_read_r+0x1e>
 800bdb4:	6023      	str	r3, [r4, #0]
 800bdb6:	bd38      	pop	{r3, r4, r5, pc}
 800bdb8:	2001420c 	.word	0x2001420c

0800bdbc <_write_r>:
 800bdbc:	b538      	push	{r3, r4, r5, lr}
 800bdbe:	4d07      	ldr	r5, [pc, #28]	@ (800bddc <_write_r+0x20>)
 800bdc0:	4604      	mov	r4, r0
 800bdc2:	4608      	mov	r0, r1
 800bdc4:	4611      	mov	r1, r2
 800bdc6:	2200      	movs	r2, #0
 800bdc8:	602a      	str	r2, [r5, #0]
 800bdca:	461a      	mov	r2, r3
 800bdcc:	f7f5 f97e 	bl	80010cc <_write>
 800bdd0:	1c43      	adds	r3, r0, #1
 800bdd2:	d102      	bne.n	800bdda <_write_r+0x1e>
 800bdd4:	682b      	ldr	r3, [r5, #0]
 800bdd6:	b103      	cbz	r3, 800bdda <_write_r+0x1e>
 800bdd8:	6023      	str	r3, [r4, #0]
 800bdda:	bd38      	pop	{r3, r4, r5, pc}
 800bddc:	2001420c 	.word	0x2001420c

0800bde0 <__errno>:
 800bde0:	4b01      	ldr	r3, [pc, #4]	@ (800bde8 <__errno+0x8>)
 800bde2:	6818      	ldr	r0, [r3, #0]
 800bde4:	4770      	bx	lr
 800bde6:	bf00      	nop
 800bde8:	2000d140 	.word	0x2000d140

0800bdec <__libc_init_array>:
 800bdec:	b570      	push	{r4, r5, r6, lr}
 800bdee:	4d0d      	ldr	r5, [pc, #52]	@ (800be24 <__libc_init_array+0x38>)
 800bdf0:	4c0d      	ldr	r4, [pc, #52]	@ (800be28 <__libc_init_array+0x3c>)
 800bdf2:	1b64      	subs	r4, r4, r5
 800bdf4:	10a4      	asrs	r4, r4, #2
 800bdf6:	2600      	movs	r6, #0
 800bdf8:	42a6      	cmp	r6, r4
 800bdfa:	d109      	bne.n	800be10 <__libc_init_array+0x24>
 800bdfc:	4d0b      	ldr	r5, [pc, #44]	@ (800be2c <__libc_init_array+0x40>)
 800bdfe:	4c0c      	ldr	r4, [pc, #48]	@ (800be30 <__libc_init_array+0x44>)
 800be00:	f003 fae2 	bl	800f3c8 <_init>
 800be04:	1b64      	subs	r4, r4, r5
 800be06:	10a4      	asrs	r4, r4, #2
 800be08:	2600      	movs	r6, #0
 800be0a:	42a6      	cmp	r6, r4
 800be0c:	d105      	bne.n	800be1a <__libc_init_array+0x2e>
 800be0e:	bd70      	pop	{r4, r5, r6, pc}
 800be10:	f855 3b04 	ldr.w	r3, [r5], #4
 800be14:	4798      	blx	r3
 800be16:	3601      	adds	r6, #1
 800be18:	e7ee      	b.n	800bdf8 <__libc_init_array+0xc>
 800be1a:	f855 3b04 	ldr.w	r3, [r5], #4
 800be1e:	4798      	blx	r3
 800be20:	3601      	adds	r6, #1
 800be22:	e7f2      	b.n	800be0a <__libc_init_array+0x1e>
 800be24:	08010f4c 	.word	0x08010f4c
 800be28:	08010f4c 	.word	0x08010f4c
 800be2c:	08010f4c 	.word	0x08010f4c
 800be30:	08010f50 	.word	0x08010f50

0800be34 <__retarget_lock_init_recursive>:
 800be34:	4770      	bx	lr

0800be36 <__retarget_lock_acquire_recursive>:
 800be36:	4770      	bx	lr

0800be38 <__retarget_lock_release_recursive>:
 800be38:	4770      	bx	lr

0800be3a <memcpy>:
 800be3a:	440a      	add	r2, r1
 800be3c:	4291      	cmp	r1, r2
 800be3e:	f100 33ff 	add.w	r3, r0, #4294967295
 800be42:	d100      	bne.n	800be46 <memcpy+0xc>
 800be44:	4770      	bx	lr
 800be46:	b510      	push	{r4, lr}
 800be48:	f811 4b01 	ldrb.w	r4, [r1], #1
 800be4c:	f803 4f01 	strb.w	r4, [r3, #1]!
 800be50:	4291      	cmp	r1, r2
 800be52:	d1f9      	bne.n	800be48 <memcpy+0xe>
 800be54:	bd10      	pop	{r4, pc}
	...

0800be58 <nanf>:
 800be58:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800be60 <nanf+0x8>
 800be5c:	4770      	bx	lr
 800be5e:	bf00      	nop
 800be60:	7fc00000 	.word	0x7fc00000

0800be64 <__assert_func>:
 800be64:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800be66:	4614      	mov	r4, r2
 800be68:	461a      	mov	r2, r3
 800be6a:	4b09      	ldr	r3, [pc, #36]	@ (800be90 <__assert_func+0x2c>)
 800be6c:	681b      	ldr	r3, [r3, #0]
 800be6e:	4605      	mov	r5, r0
 800be70:	68d8      	ldr	r0, [r3, #12]
 800be72:	b14c      	cbz	r4, 800be88 <__assert_func+0x24>
 800be74:	4b07      	ldr	r3, [pc, #28]	@ (800be94 <__assert_func+0x30>)
 800be76:	9100      	str	r1, [sp, #0]
 800be78:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800be7c:	4906      	ldr	r1, [pc, #24]	@ (800be98 <__assert_func+0x34>)
 800be7e:	462b      	mov	r3, r5
 800be80:	f002 fdda 	bl	800ea38 <fiprintf>
 800be84:	f002 feb4 	bl	800ebf0 <abort>
 800be88:	4b04      	ldr	r3, [pc, #16]	@ (800be9c <__assert_func+0x38>)
 800be8a:	461c      	mov	r4, r3
 800be8c:	e7f3      	b.n	800be76 <__assert_func+0x12>
 800be8e:	bf00      	nop
 800be90:	2000d140 	.word	0x2000d140
 800be94:	08010b51 	.word	0x08010b51
 800be98:	08010b5e 	.word	0x08010b5e
 800be9c:	08010b8c 	.word	0x08010b8c

0800bea0 <quorem>:
 800bea0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bea4:	6903      	ldr	r3, [r0, #16]
 800bea6:	690c      	ldr	r4, [r1, #16]
 800bea8:	42a3      	cmp	r3, r4
 800beaa:	4607      	mov	r7, r0
 800beac:	db7e      	blt.n	800bfac <quorem+0x10c>
 800beae:	3c01      	subs	r4, #1
 800beb0:	f101 0814 	add.w	r8, r1, #20
 800beb4:	00a3      	lsls	r3, r4, #2
 800beb6:	f100 0514 	add.w	r5, r0, #20
 800beba:	9300      	str	r3, [sp, #0]
 800bebc:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800bec0:	9301      	str	r3, [sp, #4]
 800bec2:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800bec6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800beca:	3301      	adds	r3, #1
 800becc:	429a      	cmp	r2, r3
 800bece:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800bed2:	fbb2 f6f3 	udiv	r6, r2, r3
 800bed6:	d32e      	bcc.n	800bf36 <quorem+0x96>
 800bed8:	f04f 0a00 	mov.w	sl, #0
 800bedc:	46c4      	mov	ip, r8
 800bede:	46ae      	mov	lr, r5
 800bee0:	46d3      	mov	fp, sl
 800bee2:	f85c 3b04 	ldr.w	r3, [ip], #4
 800bee6:	b298      	uxth	r0, r3
 800bee8:	fb06 a000 	mla	r0, r6, r0, sl
 800beec:	0c02      	lsrs	r2, r0, #16
 800beee:	0c1b      	lsrs	r3, r3, #16
 800bef0:	fb06 2303 	mla	r3, r6, r3, r2
 800bef4:	f8de 2000 	ldr.w	r2, [lr]
 800bef8:	b280      	uxth	r0, r0
 800befa:	b292      	uxth	r2, r2
 800befc:	1a12      	subs	r2, r2, r0
 800befe:	445a      	add	r2, fp
 800bf00:	f8de 0000 	ldr.w	r0, [lr]
 800bf04:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800bf08:	b29b      	uxth	r3, r3
 800bf0a:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800bf0e:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800bf12:	b292      	uxth	r2, r2
 800bf14:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800bf18:	45e1      	cmp	r9, ip
 800bf1a:	f84e 2b04 	str.w	r2, [lr], #4
 800bf1e:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800bf22:	d2de      	bcs.n	800bee2 <quorem+0x42>
 800bf24:	9b00      	ldr	r3, [sp, #0]
 800bf26:	58eb      	ldr	r3, [r5, r3]
 800bf28:	b92b      	cbnz	r3, 800bf36 <quorem+0x96>
 800bf2a:	9b01      	ldr	r3, [sp, #4]
 800bf2c:	3b04      	subs	r3, #4
 800bf2e:	429d      	cmp	r5, r3
 800bf30:	461a      	mov	r2, r3
 800bf32:	d32f      	bcc.n	800bf94 <quorem+0xf4>
 800bf34:	613c      	str	r4, [r7, #16]
 800bf36:	4638      	mov	r0, r7
 800bf38:	f001 f9c6 	bl	800d2c8 <__mcmp>
 800bf3c:	2800      	cmp	r0, #0
 800bf3e:	db25      	blt.n	800bf8c <quorem+0xec>
 800bf40:	4629      	mov	r1, r5
 800bf42:	2000      	movs	r0, #0
 800bf44:	f858 2b04 	ldr.w	r2, [r8], #4
 800bf48:	f8d1 c000 	ldr.w	ip, [r1]
 800bf4c:	fa1f fe82 	uxth.w	lr, r2
 800bf50:	fa1f f38c 	uxth.w	r3, ip
 800bf54:	eba3 030e 	sub.w	r3, r3, lr
 800bf58:	4403      	add	r3, r0
 800bf5a:	0c12      	lsrs	r2, r2, #16
 800bf5c:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800bf60:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800bf64:	b29b      	uxth	r3, r3
 800bf66:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800bf6a:	45c1      	cmp	r9, r8
 800bf6c:	f841 3b04 	str.w	r3, [r1], #4
 800bf70:	ea4f 4022 	mov.w	r0, r2, asr #16
 800bf74:	d2e6      	bcs.n	800bf44 <quorem+0xa4>
 800bf76:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800bf7a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800bf7e:	b922      	cbnz	r2, 800bf8a <quorem+0xea>
 800bf80:	3b04      	subs	r3, #4
 800bf82:	429d      	cmp	r5, r3
 800bf84:	461a      	mov	r2, r3
 800bf86:	d30b      	bcc.n	800bfa0 <quorem+0x100>
 800bf88:	613c      	str	r4, [r7, #16]
 800bf8a:	3601      	adds	r6, #1
 800bf8c:	4630      	mov	r0, r6
 800bf8e:	b003      	add	sp, #12
 800bf90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bf94:	6812      	ldr	r2, [r2, #0]
 800bf96:	3b04      	subs	r3, #4
 800bf98:	2a00      	cmp	r2, #0
 800bf9a:	d1cb      	bne.n	800bf34 <quorem+0x94>
 800bf9c:	3c01      	subs	r4, #1
 800bf9e:	e7c6      	b.n	800bf2e <quorem+0x8e>
 800bfa0:	6812      	ldr	r2, [r2, #0]
 800bfa2:	3b04      	subs	r3, #4
 800bfa4:	2a00      	cmp	r2, #0
 800bfa6:	d1ef      	bne.n	800bf88 <quorem+0xe8>
 800bfa8:	3c01      	subs	r4, #1
 800bfaa:	e7ea      	b.n	800bf82 <quorem+0xe2>
 800bfac:	2000      	movs	r0, #0
 800bfae:	e7ee      	b.n	800bf8e <quorem+0xee>

0800bfb0 <_dtoa_r>:
 800bfb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bfb4:	69c7      	ldr	r7, [r0, #28]
 800bfb6:	b097      	sub	sp, #92	@ 0x5c
 800bfb8:	ed8d 0b04 	vstr	d0, [sp, #16]
 800bfbc:	ec55 4b10 	vmov	r4, r5, d0
 800bfc0:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 800bfc2:	9107      	str	r1, [sp, #28]
 800bfc4:	4681      	mov	r9, r0
 800bfc6:	920c      	str	r2, [sp, #48]	@ 0x30
 800bfc8:	9311      	str	r3, [sp, #68]	@ 0x44
 800bfca:	b97f      	cbnz	r7, 800bfec <_dtoa_r+0x3c>
 800bfcc:	2010      	movs	r0, #16
 800bfce:	f000 fe09 	bl	800cbe4 <malloc>
 800bfd2:	4602      	mov	r2, r0
 800bfd4:	f8c9 001c 	str.w	r0, [r9, #28]
 800bfd8:	b920      	cbnz	r0, 800bfe4 <_dtoa_r+0x34>
 800bfda:	4ba9      	ldr	r3, [pc, #676]	@ (800c280 <_dtoa_r+0x2d0>)
 800bfdc:	21ef      	movs	r1, #239	@ 0xef
 800bfde:	48a9      	ldr	r0, [pc, #676]	@ (800c284 <_dtoa_r+0x2d4>)
 800bfe0:	f7ff ff40 	bl	800be64 <__assert_func>
 800bfe4:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800bfe8:	6007      	str	r7, [r0, #0]
 800bfea:	60c7      	str	r7, [r0, #12]
 800bfec:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800bff0:	6819      	ldr	r1, [r3, #0]
 800bff2:	b159      	cbz	r1, 800c00c <_dtoa_r+0x5c>
 800bff4:	685a      	ldr	r2, [r3, #4]
 800bff6:	604a      	str	r2, [r1, #4]
 800bff8:	2301      	movs	r3, #1
 800bffa:	4093      	lsls	r3, r2
 800bffc:	608b      	str	r3, [r1, #8]
 800bffe:	4648      	mov	r0, r9
 800c000:	f000 fee6 	bl	800cdd0 <_Bfree>
 800c004:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800c008:	2200      	movs	r2, #0
 800c00a:	601a      	str	r2, [r3, #0]
 800c00c:	1e2b      	subs	r3, r5, #0
 800c00e:	bfb9      	ittee	lt
 800c010:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800c014:	9305      	strlt	r3, [sp, #20]
 800c016:	2300      	movge	r3, #0
 800c018:	6033      	strge	r3, [r6, #0]
 800c01a:	9f05      	ldr	r7, [sp, #20]
 800c01c:	4b9a      	ldr	r3, [pc, #616]	@ (800c288 <_dtoa_r+0x2d8>)
 800c01e:	bfbc      	itt	lt
 800c020:	2201      	movlt	r2, #1
 800c022:	6032      	strlt	r2, [r6, #0]
 800c024:	43bb      	bics	r3, r7
 800c026:	d112      	bne.n	800c04e <_dtoa_r+0x9e>
 800c028:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800c02a:	f242 730f 	movw	r3, #9999	@ 0x270f
 800c02e:	6013      	str	r3, [r2, #0]
 800c030:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800c034:	4323      	orrs	r3, r4
 800c036:	f000 855a 	beq.w	800caee <_dtoa_r+0xb3e>
 800c03a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800c03c:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 800c29c <_dtoa_r+0x2ec>
 800c040:	2b00      	cmp	r3, #0
 800c042:	f000 855c 	beq.w	800cafe <_dtoa_r+0xb4e>
 800c046:	f10a 0303 	add.w	r3, sl, #3
 800c04a:	f000 bd56 	b.w	800cafa <_dtoa_r+0xb4a>
 800c04e:	ed9d 7b04 	vldr	d7, [sp, #16]
 800c052:	2200      	movs	r2, #0
 800c054:	ec51 0b17 	vmov	r0, r1, d7
 800c058:	2300      	movs	r3, #0
 800c05a:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 800c05e:	f7f4 fd3b 	bl	8000ad8 <__aeabi_dcmpeq>
 800c062:	4680      	mov	r8, r0
 800c064:	b158      	cbz	r0, 800c07e <_dtoa_r+0xce>
 800c066:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800c068:	2301      	movs	r3, #1
 800c06a:	6013      	str	r3, [r2, #0]
 800c06c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800c06e:	b113      	cbz	r3, 800c076 <_dtoa_r+0xc6>
 800c070:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800c072:	4b86      	ldr	r3, [pc, #536]	@ (800c28c <_dtoa_r+0x2dc>)
 800c074:	6013      	str	r3, [r2, #0]
 800c076:	f8df a228 	ldr.w	sl, [pc, #552]	@ 800c2a0 <_dtoa_r+0x2f0>
 800c07a:	f000 bd40 	b.w	800cafe <_dtoa_r+0xb4e>
 800c07e:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 800c082:	aa14      	add	r2, sp, #80	@ 0x50
 800c084:	a915      	add	r1, sp, #84	@ 0x54
 800c086:	4648      	mov	r0, r9
 800c088:	f001 fa3e 	bl	800d508 <__d2b>
 800c08c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800c090:	9002      	str	r0, [sp, #8]
 800c092:	2e00      	cmp	r6, #0
 800c094:	d078      	beq.n	800c188 <_dtoa_r+0x1d8>
 800c096:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c098:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 800c09c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c0a0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800c0a4:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800c0a8:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800c0ac:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800c0b0:	4619      	mov	r1, r3
 800c0b2:	2200      	movs	r2, #0
 800c0b4:	4b76      	ldr	r3, [pc, #472]	@ (800c290 <_dtoa_r+0x2e0>)
 800c0b6:	f7f4 f8ef 	bl	8000298 <__aeabi_dsub>
 800c0ba:	a36b      	add	r3, pc, #428	@ (adr r3, 800c268 <_dtoa_r+0x2b8>)
 800c0bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0c0:	f7f4 faa2 	bl	8000608 <__aeabi_dmul>
 800c0c4:	a36a      	add	r3, pc, #424	@ (adr r3, 800c270 <_dtoa_r+0x2c0>)
 800c0c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0ca:	f7f4 f8e7 	bl	800029c <__adddf3>
 800c0ce:	4604      	mov	r4, r0
 800c0d0:	4630      	mov	r0, r6
 800c0d2:	460d      	mov	r5, r1
 800c0d4:	f7f4 fa2e 	bl	8000534 <__aeabi_i2d>
 800c0d8:	a367      	add	r3, pc, #412	@ (adr r3, 800c278 <_dtoa_r+0x2c8>)
 800c0da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0de:	f7f4 fa93 	bl	8000608 <__aeabi_dmul>
 800c0e2:	4602      	mov	r2, r0
 800c0e4:	460b      	mov	r3, r1
 800c0e6:	4620      	mov	r0, r4
 800c0e8:	4629      	mov	r1, r5
 800c0ea:	f7f4 f8d7 	bl	800029c <__adddf3>
 800c0ee:	4604      	mov	r4, r0
 800c0f0:	460d      	mov	r5, r1
 800c0f2:	f7f4 fd39 	bl	8000b68 <__aeabi_d2iz>
 800c0f6:	2200      	movs	r2, #0
 800c0f8:	4607      	mov	r7, r0
 800c0fa:	2300      	movs	r3, #0
 800c0fc:	4620      	mov	r0, r4
 800c0fe:	4629      	mov	r1, r5
 800c100:	f7f4 fcf4 	bl	8000aec <__aeabi_dcmplt>
 800c104:	b140      	cbz	r0, 800c118 <_dtoa_r+0x168>
 800c106:	4638      	mov	r0, r7
 800c108:	f7f4 fa14 	bl	8000534 <__aeabi_i2d>
 800c10c:	4622      	mov	r2, r4
 800c10e:	462b      	mov	r3, r5
 800c110:	f7f4 fce2 	bl	8000ad8 <__aeabi_dcmpeq>
 800c114:	b900      	cbnz	r0, 800c118 <_dtoa_r+0x168>
 800c116:	3f01      	subs	r7, #1
 800c118:	2f16      	cmp	r7, #22
 800c11a:	d852      	bhi.n	800c1c2 <_dtoa_r+0x212>
 800c11c:	4b5d      	ldr	r3, [pc, #372]	@ (800c294 <_dtoa_r+0x2e4>)
 800c11e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800c122:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c126:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800c12a:	f7f4 fcdf 	bl	8000aec <__aeabi_dcmplt>
 800c12e:	2800      	cmp	r0, #0
 800c130:	d049      	beq.n	800c1c6 <_dtoa_r+0x216>
 800c132:	3f01      	subs	r7, #1
 800c134:	2300      	movs	r3, #0
 800c136:	9310      	str	r3, [sp, #64]	@ 0x40
 800c138:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800c13a:	1b9b      	subs	r3, r3, r6
 800c13c:	1e5a      	subs	r2, r3, #1
 800c13e:	bf45      	ittet	mi
 800c140:	f1c3 0301 	rsbmi	r3, r3, #1
 800c144:	9300      	strmi	r3, [sp, #0]
 800c146:	2300      	movpl	r3, #0
 800c148:	2300      	movmi	r3, #0
 800c14a:	9206      	str	r2, [sp, #24]
 800c14c:	bf54      	ite	pl
 800c14e:	9300      	strpl	r3, [sp, #0]
 800c150:	9306      	strmi	r3, [sp, #24]
 800c152:	2f00      	cmp	r7, #0
 800c154:	db39      	blt.n	800c1ca <_dtoa_r+0x21a>
 800c156:	9b06      	ldr	r3, [sp, #24]
 800c158:	970d      	str	r7, [sp, #52]	@ 0x34
 800c15a:	443b      	add	r3, r7
 800c15c:	9306      	str	r3, [sp, #24]
 800c15e:	2300      	movs	r3, #0
 800c160:	9308      	str	r3, [sp, #32]
 800c162:	9b07      	ldr	r3, [sp, #28]
 800c164:	2b09      	cmp	r3, #9
 800c166:	d863      	bhi.n	800c230 <_dtoa_r+0x280>
 800c168:	2b05      	cmp	r3, #5
 800c16a:	bfc4      	itt	gt
 800c16c:	3b04      	subgt	r3, #4
 800c16e:	9307      	strgt	r3, [sp, #28]
 800c170:	9b07      	ldr	r3, [sp, #28]
 800c172:	f1a3 0302 	sub.w	r3, r3, #2
 800c176:	bfcc      	ite	gt
 800c178:	2400      	movgt	r4, #0
 800c17a:	2401      	movle	r4, #1
 800c17c:	2b03      	cmp	r3, #3
 800c17e:	d863      	bhi.n	800c248 <_dtoa_r+0x298>
 800c180:	e8df f003 	tbb	[pc, r3]
 800c184:	2b375452 	.word	0x2b375452
 800c188:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 800c18c:	441e      	add	r6, r3
 800c18e:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800c192:	2b20      	cmp	r3, #32
 800c194:	bfc1      	itttt	gt
 800c196:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800c19a:	409f      	lslgt	r7, r3
 800c19c:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800c1a0:	fa24 f303 	lsrgt.w	r3, r4, r3
 800c1a4:	bfd6      	itet	le
 800c1a6:	f1c3 0320 	rsble	r3, r3, #32
 800c1aa:	ea47 0003 	orrgt.w	r0, r7, r3
 800c1ae:	fa04 f003 	lslle.w	r0, r4, r3
 800c1b2:	f7f4 f9af 	bl	8000514 <__aeabi_ui2d>
 800c1b6:	2201      	movs	r2, #1
 800c1b8:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800c1bc:	3e01      	subs	r6, #1
 800c1be:	9212      	str	r2, [sp, #72]	@ 0x48
 800c1c0:	e776      	b.n	800c0b0 <_dtoa_r+0x100>
 800c1c2:	2301      	movs	r3, #1
 800c1c4:	e7b7      	b.n	800c136 <_dtoa_r+0x186>
 800c1c6:	9010      	str	r0, [sp, #64]	@ 0x40
 800c1c8:	e7b6      	b.n	800c138 <_dtoa_r+0x188>
 800c1ca:	9b00      	ldr	r3, [sp, #0]
 800c1cc:	1bdb      	subs	r3, r3, r7
 800c1ce:	9300      	str	r3, [sp, #0]
 800c1d0:	427b      	negs	r3, r7
 800c1d2:	9308      	str	r3, [sp, #32]
 800c1d4:	2300      	movs	r3, #0
 800c1d6:	930d      	str	r3, [sp, #52]	@ 0x34
 800c1d8:	e7c3      	b.n	800c162 <_dtoa_r+0x1b2>
 800c1da:	2301      	movs	r3, #1
 800c1dc:	9309      	str	r3, [sp, #36]	@ 0x24
 800c1de:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800c1e0:	eb07 0b03 	add.w	fp, r7, r3
 800c1e4:	f10b 0301 	add.w	r3, fp, #1
 800c1e8:	2b01      	cmp	r3, #1
 800c1ea:	9303      	str	r3, [sp, #12]
 800c1ec:	bfb8      	it	lt
 800c1ee:	2301      	movlt	r3, #1
 800c1f0:	e006      	b.n	800c200 <_dtoa_r+0x250>
 800c1f2:	2301      	movs	r3, #1
 800c1f4:	9309      	str	r3, [sp, #36]	@ 0x24
 800c1f6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800c1f8:	2b00      	cmp	r3, #0
 800c1fa:	dd28      	ble.n	800c24e <_dtoa_r+0x29e>
 800c1fc:	469b      	mov	fp, r3
 800c1fe:	9303      	str	r3, [sp, #12]
 800c200:	f8d9 001c 	ldr.w	r0, [r9, #28]
 800c204:	2100      	movs	r1, #0
 800c206:	2204      	movs	r2, #4
 800c208:	f102 0514 	add.w	r5, r2, #20
 800c20c:	429d      	cmp	r5, r3
 800c20e:	d926      	bls.n	800c25e <_dtoa_r+0x2ae>
 800c210:	6041      	str	r1, [r0, #4]
 800c212:	4648      	mov	r0, r9
 800c214:	f000 fd9c 	bl	800cd50 <_Balloc>
 800c218:	4682      	mov	sl, r0
 800c21a:	2800      	cmp	r0, #0
 800c21c:	d142      	bne.n	800c2a4 <_dtoa_r+0x2f4>
 800c21e:	4b1e      	ldr	r3, [pc, #120]	@ (800c298 <_dtoa_r+0x2e8>)
 800c220:	4602      	mov	r2, r0
 800c222:	f240 11af 	movw	r1, #431	@ 0x1af
 800c226:	e6da      	b.n	800bfde <_dtoa_r+0x2e>
 800c228:	2300      	movs	r3, #0
 800c22a:	e7e3      	b.n	800c1f4 <_dtoa_r+0x244>
 800c22c:	2300      	movs	r3, #0
 800c22e:	e7d5      	b.n	800c1dc <_dtoa_r+0x22c>
 800c230:	2401      	movs	r4, #1
 800c232:	2300      	movs	r3, #0
 800c234:	9307      	str	r3, [sp, #28]
 800c236:	9409      	str	r4, [sp, #36]	@ 0x24
 800c238:	f04f 3bff 	mov.w	fp, #4294967295
 800c23c:	2200      	movs	r2, #0
 800c23e:	f8cd b00c 	str.w	fp, [sp, #12]
 800c242:	2312      	movs	r3, #18
 800c244:	920c      	str	r2, [sp, #48]	@ 0x30
 800c246:	e7db      	b.n	800c200 <_dtoa_r+0x250>
 800c248:	2301      	movs	r3, #1
 800c24a:	9309      	str	r3, [sp, #36]	@ 0x24
 800c24c:	e7f4      	b.n	800c238 <_dtoa_r+0x288>
 800c24e:	f04f 0b01 	mov.w	fp, #1
 800c252:	f8cd b00c 	str.w	fp, [sp, #12]
 800c256:	465b      	mov	r3, fp
 800c258:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 800c25c:	e7d0      	b.n	800c200 <_dtoa_r+0x250>
 800c25e:	3101      	adds	r1, #1
 800c260:	0052      	lsls	r2, r2, #1
 800c262:	e7d1      	b.n	800c208 <_dtoa_r+0x258>
 800c264:	f3af 8000 	nop.w
 800c268:	636f4361 	.word	0x636f4361
 800c26c:	3fd287a7 	.word	0x3fd287a7
 800c270:	8b60c8b3 	.word	0x8b60c8b3
 800c274:	3fc68a28 	.word	0x3fc68a28
 800c278:	509f79fb 	.word	0x509f79fb
 800c27c:	3fd34413 	.word	0x3fd34413
 800c280:	08010b9a 	.word	0x08010b9a
 800c284:	08010bb1 	.word	0x08010bb1
 800c288:	7ff00000 	.word	0x7ff00000
 800c28c:	08010b29 	.word	0x08010b29
 800c290:	3ff80000 	.word	0x3ff80000
 800c294:	08010d28 	.word	0x08010d28
 800c298:	08010c09 	.word	0x08010c09
 800c29c:	08010b96 	.word	0x08010b96
 800c2a0:	08010b28 	.word	0x08010b28
 800c2a4:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800c2a8:	6018      	str	r0, [r3, #0]
 800c2aa:	9b03      	ldr	r3, [sp, #12]
 800c2ac:	2b0e      	cmp	r3, #14
 800c2ae:	f200 80a1 	bhi.w	800c3f4 <_dtoa_r+0x444>
 800c2b2:	2c00      	cmp	r4, #0
 800c2b4:	f000 809e 	beq.w	800c3f4 <_dtoa_r+0x444>
 800c2b8:	2f00      	cmp	r7, #0
 800c2ba:	dd33      	ble.n	800c324 <_dtoa_r+0x374>
 800c2bc:	4b9c      	ldr	r3, [pc, #624]	@ (800c530 <_dtoa_r+0x580>)
 800c2be:	f007 020f 	and.w	r2, r7, #15
 800c2c2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c2c6:	ed93 7b00 	vldr	d7, [r3]
 800c2ca:	05f8      	lsls	r0, r7, #23
 800c2cc:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 800c2d0:	ea4f 1427 	mov.w	r4, r7, asr #4
 800c2d4:	d516      	bpl.n	800c304 <_dtoa_r+0x354>
 800c2d6:	4b97      	ldr	r3, [pc, #604]	@ (800c534 <_dtoa_r+0x584>)
 800c2d8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800c2dc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800c2e0:	f7f4 fabc 	bl	800085c <__aeabi_ddiv>
 800c2e4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c2e8:	f004 040f 	and.w	r4, r4, #15
 800c2ec:	2603      	movs	r6, #3
 800c2ee:	4d91      	ldr	r5, [pc, #580]	@ (800c534 <_dtoa_r+0x584>)
 800c2f0:	b954      	cbnz	r4, 800c308 <_dtoa_r+0x358>
 800c2f2:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800c2f6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c2fa:	f7f4 faaf 	bl	800085c <__aeabi_ddiv>
 800c2fe:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c302:	e028      	b.n	800c356 <_dtoa_r+0x3a6>
 800c304:	2602      	movs	r6, #2
 800c306:	e7f2      	b.n	800c2ee <_dtoa_r+0x33e>
 800c308:	07e1      	lsls	r1, r4, #31
 800c30a:	d508      	bpl.n	800c31e <_dtoa_r+0x36e>
 800c30c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800c310:	e9d5 2300 	ldrd	r2, r3, [r5]
 800c314:	f7f4 f978 	bl	8000608 <__aeabi_dmul>
 800c318:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800c31c:	3601      	adds	r6, #1
 800c31e:	1064      	asrs	r4, r4, #1
 800c320:	3508      	adds	r5, #8
 800c322:	e7e5      	b.n	800c2f0 <_dtoa_r+0x340>
 800c324:	f000 80af 	beq.w	800c486 <_dtoa_r+0x4d6>
 800c328:	427c      	negs	r4, r7
 800c32a:	4b81      	ldr	r3, [pc, #516]	@ (800c530 <_dtoa_r+0x580>)
 800c32c:	4d81      	ldr	r5, [pc, #516]	@ (800c534 <_dtoa_r+0x584>)
 800c32e:	f004 020f 	and.w	r2, r4, #15
 800c332:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c336:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c33a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800c33e:	f7f4 f963 	bl	8000608 <__aeabi_dmul>
 800c342:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c346:	1124      	asrs	r4, r4, #4
 800c348:	2300      	movs	r3, #0
 800c34a:	2602      	movs	r6, #2
 800c34c:	2c00      	cmp	r4, #0
 800c34e:	f040 808f 	bne.w	800c470 <_dtoa_r+0x4c0>
 800c352:	2b00      	cmp	r3, #0
 800c354:	d1d3      	bne.n	800c2fe <_dtoa_r+0x34e>
 800c356:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800c358:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800c35c:	2b00      	cmp	r3, #0
 800c35e:	f000 8094 	beq.w	800c48a <_dtoa_r+0x4da>
 800c362:	4b75      	ldr	r3, [pc, #468]	@ (800c538 <_dtoa_r+0x588>)
 800c364:	2200      	movs	r2, #0
 800c366:	4620      	mov	r0, r4
 800c368:	4629      	mov	r1, r5
 800c36a:	f7f4 fbbf 	bl	8000aec <__aeabi_dcmplt>
 800c36e:	2800      	cmp	r0, #0
 800c370:	f000 808b 	beq.w	800c48a <_dtoa_r+0x4da>
 800c374:	9b03      	ldr	r3, [sp, #12]
 800c376:	2b00      	cmp	r3, #0
 800c378:	f000 8087 	beq.w	800c48a <_dtoa_r+0x4da>
 800c37c:	f1bb 0f00 	cmp.w	fp, #0
 800c380:	dd34      	ble.n	800c3ec <_dtoa_r+0x43c>
 800c382:	4620      	mov	r0, r4
 800c384:	4b6d      	ldr	r3, [pc, #436]	@ (800c53c <_dtoa_r+0x58c>)
 800c386:	2200      	movs	r2, #0
 800c388:	4629      	mov	r1, r5
 800c38a:	f7f4 f93d 	bl	8000608 <__aeabi_dmul>
 800c38e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c392:	f107 38ff 	add.w	r8, r7, #4294967295
 800c396:	3601      	adds	r6, #1
 800c398:	465c      	mov	r4, fp
 800c39a:	4630      	mov	r0, r6
 800c39c:	f7f4 f8ca 	bl	8000534 <__aeabi_i2d>
 800c3a0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c3a4:	f7f4 f930 	bl	8000608 <__aeabi_dmul>
 800c3a8:	4b65      	ldr	r3, [pc, #404]	@ (800c540 <_dtoa_r+0x590>)
 800c3aa:	2200      	movs	r2, #0
 800c3ac:	f7f3 ff76 	bl	800029c <__adddf3>
 800c3b0:	4605      	mov	r5, r0
 800c3b2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800c3b6:	2c00      	cmp	r4, #0
 800c3b8:	d16a      	bne.n	800c490 <_dtoa_r+0x4e0>
 800c3ba:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c3be:	4b61      	ldr	r3, [pc, #388]	@ (800c544 <_dtoa_r+0x594>)
 800c3c0:	2200      	movs	r2, #0
 800c3c2:	f7f3 ff69 	bl	8000298 <__aeabi_dsub>
 800c3c6:	4602      	mov	r2, r0
 800c3c8:	460b      	mov	r3, r1
 800c3ca:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800c3ce:	462a      	mov	r2, r5
 800c3d0:	4633      	mov	r3, r6
 800c3d2:	f7f4 fba9 	bl	8000b28 <__aeabi_dcmpgt>
 800c3d6:	2800      	cmp	r0, #0
 800c3d8:	f040 8298 	bne.w	800c90c <_dtoa_r+0x95c>
 800c3dc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c3e0:	462a      	mov	r2, r5
 800c3e2:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800c3e6:	f7f4 fb81 	bl	8000aec <__aeabi_dcmplt>
 800c3ea:	bb38      	cbnz	r0, 800c43c <_dtoa_r+0x48c>
 800c3ec:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 800c3f0:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800c3f4:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800c3f6:	2b00      	cmp	r3, #0
 800c3f8:	f2c0 8157 	blt.w	800c6aa <_dtoa_r+0x6fa>
 800c3fc:	2f0e      	cmp	r7, #14
 800c3fe:	f300 8154 	bgt.w	800c6aa <_dtoa_r+0x6fa>
 800c402:	4b4b      	ldr	r3, [pc, #300]	@ (800c530 <_dtoa_r+0x580>)
 800c404:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800c408:	ed93 7b00 	vldr	d7, [r3]
 800c40c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800c40e:	2b00      	cmp	r3, #0
 800c410:	ed8d 7b00 	vstr	d7, [sp]
 800c414:	f280 80e5 	bge.w	800c5e2 <_dtoa_r+0x632>
 800c418:	9b03      	ldr	r3, [sp, #12]
 800c41a:	2b00      	cmp	r3, #0
 800c41c:	f300 80e1 	bgt.w	800c5e2 <_dtoa_r+0x632>
 800c420:	d10c      	bne.n	800c43c <_dtoa_r+0x48c>
 800c422:	4b48      	ldr	r3, [pc, #288]	@ (800c544 <_dtoa_r+0x594>)
 800c424:	2200      	movs	r2, #0
 800c426:	ec51 0b17 	vmov	r0, r1, d7
 800c42a:	f7f4 f8ed 	bl	8000608 <__aeabi_dmul>
 800c42e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c432:	f7f4 fb6f 	bl	8000b14 <__aeabi_dcmpge>
 800c436:	2800      	cmp	r0, #0
 800c438:	f000 8266 	beq.w	800c908 <_dtoa_r+0x958>
 800c43c:	2400      	movs	r4, #0
 800c43e:	4625      	mov	r5, r4
 800c440:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800c442:	4656      	mov	r6, sl
 800c444:	ea6f 0803 	mvn.w	r8, r3
 800c448:	2700      	movs	r7, #0
 800c44a:	4621      	mov	r1, r4
 800c44c:	4648      	mov	r0, r9
 800c44e:	f000 fcbf 	bl	800cdd0 <_Bfree>
 800c452:	2d00      	cmp	r5, #0
 800c454:	f000 80bd 	beq.w	800c5d2 <_dtoa_r+0x622>
 800c458:	b12f      	cbz	r7, 800c466 <_dtoa_r+0x4b6>
 800c45a:	42af      	cmp	r7, r5
 800c45c:	d003      	beq.n	800c466 <_dtoa_r+0x4b6>
 800c45e:	4639      	mov	r1, r7
 800c460:	4648      	mov	r0, r9
 800c462:	f000 fcb5 	bl	800cdd0 <_Bfree>
 800c466:	4629      	mov	r1, r5
 800c468:	4648      	mov	r0, r9
 800c46a:	f000 fcb1 	bl	800cdd0 <_Bfree>
 800c46e:	e0b0      	b.n	800c5d2 <_dtoa_r+0x622>
 800c470:	07e2      	lsls	r2, r4, #31
 800c472:	d505      	bpl.n	800c480 <_dtoa_r+0x4d0>
 800c474:	e9d5 2300 	ldrd	r2, r3, [r5]
 800c478:	f7f4 f8c6 	bl	8000608 <__aeabi_dmul>
 800c47c:	3601      	adds	r6, #1
 800c47e:	2301      	movs	r3, #1
 800c480:	1064      	asrs	r4, r4, #1
 800c482:	3508      	adds	r5, #8
 800c484:	e762      	b.n	800c34c <_dtoa_r+0x39c>
 800c486:	2602      	movs	r6, #2
 800c488:	e765      	b.n	800c356 <_dtoa_r+0x3a6>
 800c48a:	9c03      	ldr	r4, [sp, #12]
 800c48c:	46b8      	mov	r8, r7
 800c48e:	e784      	b.n	800c39a <_dtoa_r+0x3ea>
 800c490:	4b27      	ldr	r3, [pc, #156]	@ (800c530 <_dtoa_r+0x580>)
 800c492:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800c494:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800c498:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800c49c:	4454      	add	r4, sl
 800c49e:	2900      	cmp	r1, #0
 800c4a0:	d054      	beq.n	800c54c <_dtoa_r+0x59c>
 800c4a2:	4929      	ldr	r1, [pc, #164]	@ (800c548 <_dtoa_r+0x598>)
 800c4a4:	2000      	movs	r0, #0
 800c4a6:	f7f4 f9d9 	bl	800085c <__aeabi_ddiv>
 800c4aa:	4633      	mov	r3, r6
 800c4ac:	462a      	mov	r2, r5
 800c4ae:	f7f3 fef3 	bl	8000298 <__aeabi_dsub>
 800c4b2:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800c4b6:	4656      	mov	r6, sl
 800c4b8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c4bc:	f7f4 fb54 	bl	8000b68 <__aeabi_d2iz>
 800c4c0:	4605      	mov	r5, r0
 800c4c2:	f7f4 f837 	bl	8000534 <__aeabi_i2d>
 800c4c6:	4602      	mov	r2, r0
 800c4c8:	460b      	mov	r3, r1
 800c4ca:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c4ce:	f7f3 fee3 	bl	8000298 <__aeabi_dsub>
 800c4d2:	3530      	adds	r5, #48	@ 0x30
 800c4d4:	4602      	mov	r2, r0
 800c4d6:	460b      	mov	r3, r1
 800c4d8:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800c4dc:	f806 5b01 	strb.w	r5, [r6], #1
 800c4e0:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800c4e4:	f7f4 fb02 	bl	8000aec <__aeabi_dcmplt>
 800c4e8:	2800      	cmp	r0, #0
 800c4ea:	d172      	bne.n	800c5d2 <_dtoa_r+0x622>
 800c4ec:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c4f0:	4911      	ldr	r1, [pc, #68]	@ (800c538 <_dtoa_r+0x588>)
 800c4f2:	2000      	movs	r0, #0
 800c4f4:	f7f3 fed0 	bl	8000298 <__aeabi_dsub>
 800c4f8:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800c4fc:	f7f4 faf6 	bl	8000aec <__aeabi_dcmplt>
 800c500:	2800      	cmp	r0, #0
 800c502:	f040 80b4 	bne.w	800c66e <_dtoa_r+0x6be>
 800c506:	42a6      	cmp	r6, r4
 800c508:	f43f af70 	beq.w	800c3ec <_dtoa_r+0x43c>
 800c50c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800c510:	4b0a      	ldr	r3, [pc, #40]	@ (800c53c <_dtoa_r+0x58c>)
 800c512:	2200      	movs	r2, #0
 800c514:	f7f4 f878 	bl	8000608 <__aeabi_dmul>
 800c518:	4b08      	ldr	r3, [pc, #32]	@ (800c53c <_dtoa_r+0x58c>)
 800c51a:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800c51e:	2200      	movs	r2, #0
 800c520:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c524:	f7f4 f870 	bl	8000608 <__aeabi_dmul>
 800c528:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c52c:	e7c4      	b.n	800c4b8 <_dtoa_r+0x508>
 800c52e:	bf00      	nop
 800c530:	08010d28 	.word	0x08010d28
 800c534:	08010d00 	.word	0x08010d00
 800c538:	3ff00000 	.word	0x3ff00000
 800c53c:	40240000 	.word	0x40240000
 800c540:	401c0000 	.word	0x401c0000
 800c544:	40140000 	.word	0x40140000
 800c548:	3fe00000 	.word	0x3fe00000
 800c54c:	4631      	mov	r1, r6
 800c54e:	4628      	mov	r0, r5
 800c550:	f7f4 f85a 	bl	8000608 <__aeabi_dmul>
 800c554:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800c558:	9413      	str	r4, [sp, #76]	@ 0x4c
 800c55a:	4656      	mov	r6, sl
 800c55c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c560:	f7f4 fb02 	bl	8000b68 <__aeabi_d2iz>
 800c564:	4605      	mov	r5, r0
 800c566:	f7f3 ffe5 	bl	8000534 <__aeabi_i2d>
 800c56a:	4602      	mov	r2, r0
 800c56c:	460b      	mov	r3, r1
 800c56e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c572:	f7f3 fe91 	bl	8000298 <__aeabi_dsub>
 800c576:	3530      	adds	r5, #48	@ 0x30
 800c578:	f806 5b01 	strb.w	r5, [r6], #1
 800c57c:	4602      	mov	r2, r0
 800c57e:	460b      	mov	r3, r1
 800c580:	42a6      	cmp	r6, r4
 800c582:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800c586:	f04f 0200 	mov.w	r2, #0
 800c58a:	d124      	bne.n	800c5d6 <_dtoa_r+0x626>
 800c58c:	4baf      	ldr	r3, [pc, #700]	@ (800c84c <_dtoa_r+0x89c>)
 800c58e:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800c592:	f7f3 fe83 	bl	800029c <__adddf3>
 800c596:	4602      	mov	r2, r0
 800c598:	460b      	mov	r3, r1
 800c59a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c59e:	f7f4 fac3 	bl	8000b28 <__aeabi_dcmpgt>
 800c5a2:	2800      	cmp	r0, #0
 800c5a4:	d163      	bne.n	800c66e <_dtoa_r+0x6be>
 800c5a6:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800c5aa:	49a8      	ldr	r1, [pc, #672]	@ (800c84c <_dtoa_r+0x89c>)
 800c5ac:	2000      	movs	r0, #0
 800c5ae:	f7f3 fe73 	bl	8000298 <__aeabi_dsub>
 800c5b2:	4602      	mov	r2, r0
 800c5b4:	460b      	mov	r3, r1
 800c5b6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c5ba:	f7f4 fa97 	bl	8000aec <__aeabi_dcmplt>
 800c5be:	2800      	cmp	r0, #0
 800c5c0:	f43f af14 	beq.w	800c3ec <_dtoa_r+0x43c>
 800c5c4:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800c5c6:	1e73      	subs	r3, r6, #1
 800c5c8:	9313      	str	r3, [sp, #76]	@ 0x4c
 800c5ca:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800c5ce:	2b30      	cmp	r3, #48	@ 0x30
 800c5d0:	d0f8      	beq.n	800c5c4 <_dtoa_r+0x614>
 800c5d2:	4647      	mov	r7, r8
 800c5d4:	e03b      	b.n	800c64e <_dtoa_r+0x69e>
 800c5d6:	4b9e      	ldr	r3, [pc, #632]	@ (800c850 <_dtoa_r+0x8a0>)
 800c5d8:	f7f4 f816 	bl	8000608 <__aeabi_dmul>
 800c5dc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c5e0:	e7bc      	b.n	800c55c <_dtoa_r+0x5ac>
 800c5e2:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800c5e6:	4656      	mov	r6, sl
 800c5e8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c5ec:	4620      	mov	r0, r4
 800c5ee:	4629      	mov	r1, r5
 800c5f0:	f7f4 f934 	bl	800085c <__aeabi_ddiv>
 800c5f4:	f7f4 fab8 	bl	8000b68 <__aeabi_d2iz>
 800c5f8:	4680      	mov	r8, r0
 800c5fa:	f7f3 ff9b 	bl	8000534 <__aeabi_i2d>
 800c5fe:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c602:	f7f4 f801 	bl	8000608 <__aeabi_dmul>
 800c606:	4602      	mov	r2, r0
 800c608:	460b      	mov	r3, r1
 800c60a:	4620      	mov	r0, r4
 800c60c:	4629      	mov	r1, r5
 800c60e:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800c612:	f7f3 fe41 	bl	8000298 <__aeabi_dsub>
 800c616:	f806 4b01 	strb.w	r4, [r6], #1
 800c61a:	9d03      	ldr	r5, [sp, #12]
 800c61c:	eba6 040a 	sub.w	r4, r6, sl
 800c620:	42a5      	cmp	r5, r4
 800c622:	4602      	mov	r2, r0
 800c624:	460b      	mov	r3, r1
 800c626:	d133      	bne.n	800c690 <_dtoa_r+0x6e0>
 800c628:	f7f3 fe38 	bl	800029c <__adddf3>
 800c62c:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c630:	4604      	mov	r4, r0
 800c632:	460d      	mov	r5, r1
 800c634:	f7f4 fa78 	bl	8000b28 <__aeabi_dcmpgt>
 800c638:	b9c0      	cbnz	r0, 800c66c <_dtoa_r+0x6bc>
 800c63a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c63e:	4620      	mov	r0, r4
 800c640:	4629      	mov	r1, r5
 800c642:	f7f4 fa49 	bl	8000ad8 <__aeabi_dcmpeq>
 800c646:	b110      	cbz	r0, 800c64e <_dtoa_r+0x69e>
 800c648:	f018 0f01 	tst.w	r8, #1
 800c64c:	d10e      	bne.n	800c66c <_dtoa_r+0x6bc>
 800c64e:	9902      	ldr	r1, [sp, #8]
 800c650:	4648      	mov	r0, r9
 800c652:	f000 fbbd 	bl	800cdd0 <_Bfree>
 800c656:	2300      	movs	r3, #0
 800c658:	7033      	strb	r3, [r6, #0]
 800c65a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800c65c:	3701      	adds	r7, #1
 800c65e:	601f      	str	r7, [r3, #0]
 800c660:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800c662:	2b00      	cmp	r3, #0
 800c664:	f000 824b 	beq.w	800cafe <_dtoa_r+0xb4e>
 800c668:	601e      	str	r6, [r3, #0]
 800c66a:	e248      	b.n	800cafe <_dtoa_r+0xb4e>
 800c66c:	46b8      	mov	r8, r7
 800c66e:	4633      	mov	r3, r6
 800c670:	461e      	mov	r6, r3
 800c672:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c676:	2a39      	cmp	r2, #57	@ 0x39
 800c678:	d106      	bne.n	800c688 <_dtoa_r+0x6d8>
 800c67a:	459a      	cmp	sl, r3
 800c67c:	d1f8      	bne.n	800c670 <_dtoa_r+0x6c0>
 800c67e:	2230      	movs	r2, #48	@ 0x30
 800c680:	f108 0801 	add.w	r8, r8, #1
 800c684:	f88a 2000 	strb.w	r2, [sl]
 800c688:	781a      	ldrb	r2, [r3, #0]
 800c68a:	3201      	adds	r2, #1
 800c68c:	701a      	strb	r2, [r3, #0]
 800c68e:	e7a0      	b.n	800c5d2 <_dtoa_r+0x622>
 800c690:	4b6f      	ldr	r3, [pc, #444]	@ (800c850 <_dtoa_r+0x8a0>)
 800c692:	2200      	movs	r2, #0
 800c694:	f7f3 ffb8 	bl	8000608 <__aeabi_dmul>
 800c698:	2200      	movs	r2, #0
 800c69a:	2300      	movs	r3, #0
 800c69c:	4604      	mov	r4, r0
 800c69e:	460d      	mov	r5, r1
 800c6a0:	f7f4 fa1a 	bl	8000ad8 <__aeabi_dcmpeq>
 800c6a4:	2800      	cmp	r0, #0
 800c6a6:	d09f      	beq.n	800c5e8 <_dtoa_r+0x638>
 800c6a8:	e7d1      	b.n	800c64e <_dtoa_r+0x69e>
 800c6aa:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c6ac:	2a00      	cmp	r2, #0
 800c6ae:	f000 80ea 	beq.w	800c886 <_dtoa_r+0x8d6>
 800c6b2:	9a07      	ldr	r2, [sp, #28]
 800c6b4:	2a01      	cmp	r2, #1
 800c6b6:	f300 80cd 	bgt.w	800c854 <_dtoa_r+0x8a4>
 800c6ba:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800c6bc:	2a00      	cmp	r2, #0
 800c6be:	f000 80c1 	beq.w	800c844 <_dtoa_r+0x894>
 800c6c2:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800c6c6:	9c08      	ldr	r4, [sp, #32]
 800c6c8:	9e00      	ldr	r6, [sp, #0]
 800c6ca:	9a00      	ldr	r2, [sp, #0]
 800c6cc:	441a      	add	r2, r3
 800c6ce:	9200      	str	r2, [sp, #0]
 800c6d0:	9a06      	ldr	r2, [sp, #24]
 800c6d2:	2101      	movs	r1, #1
 800c6d4:	441a      	add	r2, r3
 800c6d6:	4648      	mov	r0, r9
 800c6d8:	9206      	str	r2, [sp, #24]
 800c6da:	f000 fc77 	bl	800cfcc <__i2b>
 800c6de:	4605      	mov	r5, r0
 800c6e0:	b166      	cbz	r6, 800c6fc <_dtoa_r+0x74c>
 800c6e2:	9b06      	ldr	r3, [sp, #24]
 800c6e4:	2b00      	cmp	r3, #0
 800c6e6:	dd09      	ble.n	800c6fc <_dtoa_r+0x74c>
 800c6e8:	42b3      	cmp	r3, r6
 800c6ea:	9a00      	ldr	r2, [sp, #0]
 800c6ec:	bfa8      	it	ge
 800c6ee:	4633      	movge	r3, r6
 800c6f0:	1ad2      	subs	r2, r2, r3
 800c6f2:	9200      	str	r2, [sp, #0]
 800c6f4:	9a06      	ldr	r2, [sp, #24]
 800c6f6:	1af6      	subs	r6, r6, r3
 800c6f8:	1ad3      	subs	r3, r2, r3
 800c6fa:	9306      	str	r3, [sp, #24]
 800c6fc:	9b08      	ldr	r3, [sp, #32]
 800c6fe:	b30b      	cbz	r3, 800c744 <_dtoa_r+0x794>
 800c700:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c702:	2b00      	cmp	r3, #0
 800c704:	f000 80c6 	beq.w	800c894 <_dtoa_r+0x8e4>
 800c708:	2c00      	cmp	r4, #0
 800c70a:	f000 80c0 	beq.w	800c88e <_dtoa_r+0x8de>
 800c70e:	4629      	mov	r1, r5
 800c710:	4622      	mov	r2, r4
 800c712:	4648      	mov	r0, r9
 800c714:	f000 fd12 	bl	800d13c <__pow5mult>
 800c718:	9a02      	ldr	r2, [sp, #8]
 800c71a:	4601      	mov	r1, r0
 800c71c:	4605      	mov	r5, r0
 800c71e:	4648      	mov	r0, r9
 800c720:	f000 fc6a 	bl	800cff8 <__multiply>
 800c724:	9902      	ldr	r1, [sp, #8]
 800c726:	4680      	mov	r8, r0
 800c728:	4648      	mov	r0, r9
 800c72a:	f000 fb51 	bl	800cdd0 <_Bfree>
 800c72e:	9b08      	ldr	r3, [sp, #32]
 800c730:	1b1b      	subs	r3, r3, r4
 800c732:	9308      	str	r3, [sp, #32]
 800c734:	f000 80b1 	beq.w	800c89a <_dtoa_r+0x8ea>
 800c738:	9a08      	ldr	r2, [sp, #32]
 800c73a:	4641      	mov	r1, r8
 800c73c:	4648      	mov	r0, r9
 800c73e:	f000 fcfd 	bl	800d13c <__pow5mult>
 800c742:	9002      	str	r0, [sp, #8]
 800c744:	2101      	movs	r1, #1
 800c746:	4648      	mov	r0, r9
 800c748:	f000 fc40 	bl	800cfcc <__i2b>
 800c74c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800c74e:	4604      	mov	r4, r0
 800c750:	2b00      	cmp	r3, #0
 800c752:	f000 81d8 	beq.w	800cb06 <_dtoa_r+0xb56>
 800c756:	461a      	mov	r2, r3
 800c758:	4601      	mov	r1, r0
 800c75a:	4648      	mov	r0, r9
 800c75c:	f000 fcee 	bl	800d13c <__pow5mult>
 800c760:	9b07      	ldr	r3, [sp, #28]
 800c762:	2b01      	cmp	r3, #1
 800c764:	4604      	mov	r4, r0
 800c766:	f300 809f 	bgt.w	800c8a8 <_dtoa_r+0x8f8>
 800c76a:	9b04      	ldr	r3, [sp, #16]
 800c76c:	2b00      	cmp	r3, #0
 800c76e:	f040 8097 	bne.w	800c8a0 <_dtoa_r+0x8f0>
 800c772:	9b05      	ldr	r3, [sp, #20]
 800c774:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c778:	2b00      	cmp	r3, #0
 800c77a:	f040 8093 	bne.w	800c8a4 <_dtoa_r+0x8f4>
 800c77e:	9b05      	ldr	r3, [sp, #20]
 800c780:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800c784:	0d1b      	lsrs	r3, r3, #20
 800c786:	051b      	lsls	r3, r3, #20
 800c788:	b133      	cbz	r3, 800c798 <_dtoa_r+0x7e8>
 800c78a:	9b00      	ldr	r3, [sp, #0]
 800c78c:	3301      	adds	r3, #1
 800c78e:	9300      	str	r3, [sp, #0]
 800c790:	9b06      	ldr	r3, [sp, #24]
 800c792:	3301      	adds	r3, #1
 800c794:	9306      	str	r3, [sp, #24]
 800c796:	2301      	movs	r3, #1
 800c798:	9308      	str	r3, [sp, #32]
 800c79a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800c79c:	2b00      	cmp	r3, #0
 800c79e:	f000 81b8 	beq.w	800cb12 <_dtoa_r+0xb62>
 800c7a2:	6923      	ldr	r3, [r4, #16]
 800c7a4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800c7a8:	6918      	ldr	r0, [r3, #16]
 800c7aa:	f000 fbc3 	bl	800cf34 <__hi0bits>
 800c7ae:	f1c0 0020 	rsb	r0, r0, #32
 800c7b2:	9b06      	ldr	r3, [sp, #24]
 800c7b4:	4418      	add	r0, r3
 800c7b6:	f010 001f 	ands.w	r0, r0, #31
 800c7ba:	f000 8082 	beq.w	800c8c2 <_dtoa_r+0x912>
 800c7be:	f1c0 0320 	rsb	r3, r0, #32
 800c7c2:	2b04      	cmp	r3, #4
 800c7c4:	dd73      	ble.n	800c8ae <_dtoa_r+0x8fe>
 800c7c6:	9b00      	ldr	r3, [sp, #0]
 800c7c8:	f1c0 001c 	rsb	r0, r0, #28
 800c7cc:	4403      	add	r3, r0
 800c7ce:	9300      	str	r3, [sp, #0]
 800c7d0:	9b06      	ldr	r3, [sp, #24]
 800c7d2:	4403      	add	r3, r0
 800c7d4:	4406      	add	r6, r0
 800c7d6:	9306      	str	r3, [sp, #24]
 800c7d8:	9b00      	ldr	r3, [sp, #0]
 800c7da:	2b00      	cmp	r3, #0
 800c7dc:	dd05      	ble.n	800c7ea <_dtoa_r+0x83a>
 800c7de:	9902      	ldr	r1, [sp, #8]
 800c7e0:	461a      	mov	r2, r3
 800c7e2:	4648      	mov	r0, r9
 800c7e4:	f000 fd04 	bl	800d1f0 <__lshift>
 800c7e8:	9002      	str	r0, [sp, #8]
 800c7ea:	9b06      	ldr	r3, [sp, #24]
 800c7ec:	2b00      	cmp	r3, #0
 800c7ee:	dd05      	ble.n	800c7fc <_dtoa_r+0x84c>
 800c7f0:	4621      	mov	r1, r4
 800c7f2:	461a      	mov	r2, r3
 800c7f4:	4648      	mov	r0, r9
 800c7f6:	f000 fcfb 	bl	800d1f0 <__lshift>
 800c7fa:	4604      	mov	r4, r0
 800c7fc:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800c7fe:	2b00      	cmp	r3, #0
 800c800:	d061      	beq.n	800c8c6 <_dtoa_r+0x916>
 800c802:	9802      	ldr	r0, [sp, #8]
 800c804:	4621      	mov	r1, r4
 800c806:	f000 fd5f 	bl	800d2c8 <__mcmp>
 800c80a:	2800      	cmp	r0, #0
 800c80c:	da5b      	bge.n	800c8c6 <_dtoa_r+0x916>
 800c80e:	2300      	movs	r3, #0
 800c810:	9902      	ldr	r1, [sp, #8]
 800c812:	220a      	movs	r2, #10
 800c814:	4648      	mov	r0, r9
 800c816:	f000 fafd 	bl	800ce14 <__multadd>
 800c81a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c81c:	9002      	str	r0, [sp, #8]
 800c81e:	f107 38ff 	add.w	r8, r7, #4294967295
 800c822:	2b00      	cmp	r3, #0
 800c824:	f000 8177 	beq.w	800cb16 <_dtoa_r+0xb66>
 800c828:	4629      	mov	r1, r5
 800c82a:	2300      	movs	r3, #0
 800c82c:	220a      	movs	r2, #10
 800c82e:	4648      	mov	r0, r9
 800c830:	f000 faf0 	bl	800ce14 <__multadd>
 800c834:	f1bb 0f00 	cmp.w	fp, #0
 800c838:	4605      	mov	r5, r0
 800c83a:	dc6f      	bgt.n	800c91c <_dtoa_r+0x96c>
 800c83c:	9b07      	ldr	r3, [sp, #28]
 800c83e:	2b02      	cmp	r3, #2
 800c840:	dc49      	bgt.n	800c8d6 <_dtoa_r+0x926>
 800c842:	e06b      	b.n	800c91c <_dtoa_r+0x96c>
 800c844:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800c846:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800c84a:	e73c      	b.n	800c6c6 <_dtoa_r+0x716>
 800c84c:	3fe00000 	.word	0x3fe00000
 800c850:	40240000 	.word	0x40240000
 800c854:	9b03      	ldr	r3, [sp, #12]
 800c856:	1e5c      	subs	r4, r3, #1
 800c858:	9b08      	ldr	r3, [sp, #32]
 800c85a:	42a3      	cmp	r3, r4
 800c85c:	db09      	blt.n	800c872 <_dtoa_r+0x8c2>
 800c85e:	1b1c      	subs	r4, r3, r4
 800c860:	9b03      	ldr	r3, [sp, #12]
 800c862:	2b00      	cmp	r3, #0
 800c864:	f6bf af30 	bge.w	800c6c8 <_dtoa_r+0x718>
 800c868:	9b00      	ldr	r3, [sp, #0]
 800c86a:	9a03      	ldr	r2, [sp, #12]
 800c86c:	1a9e      	subs	r6, r3, r2
 800c86e:	2300      	movs	r3, #0
 800c870:	e72b      	b.n	800c6ca <_dtoa_r+0x71a>
 800c872:	9b08      	ldr	r3, [sp, #32]
 800c874:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800c876:	9408      	str	r4, [sp, #32]
 800c878:	1ae3      	subs	r3, r4, r3
 800c87a:	441a      	add	r2, r3
 800c87c:	9e00      	ldr	r6, [sp, #0]
 800c87e:	9b03      	ldr	r3, [sp, #12]
 800c880:	920d      	str	r2, [sp, #52]	@ 0x34
 800c882:	2400      	movs	r4, #0
 800c884:	e721      	b.n	800c6ca <_dtoa_r+0x71a>
 800c886:	9c08      	ldr	r4, [sp, #32]
 800c888:	9e00      	ldr	r6, [sp, #0]
 800c88a:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 800c88c:	e728      	b.n	800c6e0 <_dtoa_r+0x730>
 800c88e:	f8dd 8008 	ldr.w	r8, [sp, #8]
 800c892:	e751      	b.n	800c738 <_dtoa_r+0x788>
 800c894:	9a08      	ldr	r2, [sp, #32]
 800c896:	9902      	ldr	r1, [sp, #8]
 800c898:	e750      	b.n	800c73c <_dtoa_r+0x78c>
 800c89a:	f8cd 8008 	str.w	r8, [sp, #8]
 800c89e:	e751      	b.n	800c744 <_dtoa_r+0x794>
 800c8a0:	2300      	movs	r3, #0
 800c8a2:	e779      	b.n	800c798 <_dtoa_r+0x7e8>
 800c8a4:	9b04      	ldr	r3, [sp, #16]
 800c8a6:	e777      	b.n	800c798 <_dtoa_r+0x7e8>
 800c8a8:	2300      	movs	r3, #0
 800c8aa:	9308      	str	r3, [sp, #32]
 800c8ac:	e779      	b.n	800c7a2 <_dtoa_r+0x7f2>
 800c8ae:	d093      	beq.n	800c7d8 <_dtoa_r+0x828>
 800c8b0:	9a00      	ldr	r2, [sp, #0]
 800c8b2:	331c      	adds	r3, #28
 800c8b4:	441a      	add	r2, r3
 800c8b6:	9200      	str	r2, [sp, #0]
 800c8b8:	9a06      	ldr	r2, [sp, #24]
 800c8ba:	441a      	add	r2, r3
 800c8bc:	441e      	add	r6, r3
 800c8be:	9206      	str	r2, [sp, #24]
 800c8c0:	e78a      	b.n	800c7d8 <_dtoa_r+0x828>
 800c8c2:	4603      	mov	r3, r0
 800c8c4:	e7f4      	b.n	800c8b0 <_dtoa_r+0x900>
 800c8c6:	9b03      	ldr	r3, [sp, #12]
 800c8c8:	2b00      	cmp	r3, #0
 800c8ca:	46b8      	mov	r8, r7
 800c8cc:	dc20      	bgt.n	800c910 <_dtoa_r+0x960>
 800c8ce:	469b      	mov	fp, r3
 800c8d0:	9b07      	ldr	r3, [sp, #28]
 800c8d2:	2b02      	cmp	r3, #2
 800c8d4:	dd1e      	ble.n	800c914 <_dtoa_r+0x964>
 800c8d6:	f1bb 0f00 	cmp.w	fp, #0
 800c8da:	f47f adb1 	bne.w	800c440 <_dtoa_r+0x490>
 800c8de:	4621      	mov	r1, r4
 800c8e0:	465b      	mov	r3, fp
 800c8e2:	2205      	movs	r2, #5
 800c8e4:	4648      	mov	r0, r9
 800c8e6:	f000 fa95 	bl	800ce14 <__multadd>
 800c8ea:	4601      	mov	r1, r0
 800c8ec:	4604      	mov	r4, r0
 800c8ee:	9802      	ldr	r0, [sp, #8]
 800c8f0:	f000 fcea 	bl	800d2c8 <__mcmp>
 800c8f4:	2800      	cmp	r0, #0
 800c8f6:	f77f ada3 	ble.w	800c440 <_dtoa_r+0x490>
 800c8fa:	4656      	mov	r6, sl
 800c8fc:	2331      	movs	r3, #49	@ 0x31
 800c8fe:	f806 3b01 	strb.w	r3, [r6], #1
 800c902:	f108 0801 	add.w	r8, r8, #1
 800c906:	e59f      	b.n	800c448 <_dtoa_r+0x498>
 800c908:	9c03      	ldr	r4, [sp, #12]
 800c90a:	46b8      	mov	r8, r7
 800c90c:	4625      	mov	r5, r4
 800c90e:	e7f4      	b.n	800c8fa <_dtoa_r+0x94a>
 800c910:	f8dd b00c 	ldr.w	fp, [sp, #12]
 800c914:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c916:	2b00      	cmp	r3, #0
 800c918:	f000 8101 	beq.w	800cb1e <_dtoa_r+0xb6e>
 800c91c:	2e00      	cmp	r6, #0
 800c91e:	dd05      	ble.n	800c92c <_dtoa_r+0x97c>
 800c920:	4629      	mov	r1, r5
 800c922:	4632      	mov	r2, r6
 800c924:	4648      	mov	r0, r9
 800c926:	f000 fc63 	bl	800d1f0 <__lshift>
 800c92a:	4605      	mov	r5, r0
 800c92c:	9b08      	ldr	r3, [sp, #32]
 800c92e:	2b00      	cmp	r3, #0
 800c930:	d05c      	beq.n	800c9ec <_dtoa_r+0xa3c>
 800c932:	6869      	ldr	r1, [r5, #4]
 800c934:	4648      	mov	r0, r9
 800c936:	f000 fa0b 	bl	800cd50 <_Balloc>
 800c93a:	4606      	mov	r6, r0
 800c93c:	b928      	cbnz	r0, 800c94a <_dtoa_r+0x99a>
 800c93e:	4b82      	ldr	r3, [pc, #520]	@ (800cb48 <_dtoa_r+0xb98>)
 800c940:	4602      	mov	r2, r0
 800c942:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800c946:	f7ff bb4a 	b.w	800bfde <_dtoa_r+0x2e>
 800c94a:	692a      	ldr	r2, [r5, #16]
 800c94c:	3202      	adds	r2, #2
 800c94e:	0092      	lsls	r2, r2, #2
 800c950:	f105 010c 	add.w	r1, r5, #12
 800c954:	300c      	adds	r0, #12
 800c956:	f7ff fa70 	bl	800be3a <memcpy>
 800c95a:	2201      	movs	r2, #1
 800c95c:	4631      	mov	r1, r6
 800c95e:	4648      	mov	r0, r9
 800c960:	f000 fc46 	bl	800d1f0 <__lshift>
 800c964:	f10a 0301 	add.w	r3, sl, #1
 800c968:	9300      	str	r3, [sp, #0]
 800c96a:	eb0a 030b 	add.w	r3, sl, fp
 800c96e:	9308      	str	r3, [sp, #32]
 800c970:	9b04      	ldr	r3, [sp, #16]
 800c972:	f003 0301 	and.w	r3, r3, #1
 800c976:	462f      	mov	r7, r5
 800c978:	9306      	str	r3, [sp, #24]
 800c97a:	4605      	mov	r5, r0
 800c97c:	9b00      	ldr	r3, [sp, #0]
 800c97e:	9802      	ldr	r0, [sp, #8]
 800c980:	4621      	mov	r1, r4
 800c982:	f103 3bff 	add.w	fp, r3, #4294967295
 800c986:	f7ff fa8b 	bl	800bea0 <quorem>
 800c98a:	4603      	mov	r3, r0
 800c98c:	3330      	adds	r3, #48	@ 0x30
 800c98e:	9003      	str	r0, [sp, #12]
 800c990:	4639      	mov	r1, r7
 800c992:	9802      	ldr	r0, [sp, #8]
 800c994:	9309      	str	r3, [sp, #36]	@ 0x24
 800c996:	f000 fc97 	bl	800d2c8 <__mcmp>
 800c99a:	462a      	mov	r2, r5
 800c99c:	9004      	str	r0, [sp, #16]
 800c99e:	4621      	mov	r1, r4
 800c9a0:	4648      	mov	r0, r9
 800c9a2:	f000 fcad 	bl	800d300 <__mdiff>
 800c9a6:	68c2      	ldr	r2, [r0, #12]
 800c9a8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c9aa:	4606      	mov	r6, r0
 800c9ac:	bb02      	cbnz	r2, 800c9f0 <_dtoa_r+0xa40>
 800c9ae:	4601      	mov	r1, r0
 800c9b0:	9802      	ldr	r0, [sp, #8]
 800c9b2:	f000 fc89 	bl	800d2c8 <__mcmp>
 800c9b6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c9b8:	4602      	mov	r2, r0
 800c9ba:	4631      	mov	r1, r6
 800c9bc:	4648      	mov	r0, r9
 800c9be:	920c      	str	r2, [sp, #48]	@ 0x30
 800c9c0:	9309      	str	r3, [sp, #36]	@ 0x24
 800c9c2:	f000 fa05 	bl	800cdd0 <_Bfree>
 800c9c6:	9b07      	ldr	r3, [sp, #28]
 800c9c8:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800c9ca:	9e00      	ldr	r6, [sp, #0]
 800c9cc:	ea42 0103 	orr.w	r1, r2, r3
 800c9d0:	9b06      	ldr	r3, [sp, #24]
 800c9d2:	4319      	orrs	r1, r3
 800c9d4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c9d6:	d10d      	bne.n	800c9f4 <_dtoa_r+0xa44>
 800c9d8:	2b39      	cmp	r3, #57	@ 0x39
 800c9da:	d027      	beq.n	800ca2c <_dtoa_r+0xa7c>
 800c9dc:	9a04      	ldr	r2, [sp, #16]
 800c9de:	2a00      	cmp	r2, #0
 800c9e0:	dd01      	ble.n	800c9e6 <_dtoa_r+0xa36>
 800c9e2:	9b03      	ldr	r3, [sp, #12]
 800c9e4:	3331      	adds	r3, #49	@ 0x31
 800c9e6:	f88b 3000 	strb.w	r3, [fp]
 800c9ea:	e52e      	b.n	800c44a <_dtoa_r+0x49a>
 800c9ec:	4628      	mov	r0, r5
 800c9ee:	e7b9      	b.n	800c964 <_dtoa_r+0x9b4>
 800c9f0:	2201      	movs	r2, #1
 800c9f2:	e7e2      	b.n	800c9ba <_dtoa_r+0xa0a>
 800c9f4:	9904      	ldr	r1, [sp, #16]
 800c9f6:	2900      	cmp	r1, #0
 800c9f8:	db04      	blt.n	800ca04 <_dtoa_r+0xa54>
 800c9fa:	9807      	ldr	r0, [sp, #28]
 800c9fc:	4301      	orrs	r1, r0
 800c9fe:	9806      	ldr	r0, [sp, #24]
 800ca00:	4301      	orrs	r1, r0
 800ca02:	d120      	bne.n	800ca46 <_dtoa_r+0xa96>
 800ca04:	2a00      	cmp	r2, #0
 800ca06:	ddee      	ble.n	800c9e6 <_dtoa_r+0xa36>
 800ca08:	9902      	ldr	r1, [sp, #8]
 800ca0a:	9300      	str	r3, [sp, #0]
 800ca0c:	2201      	movs	r2, #1
 800ca0e:	4648      	mov	r0, r9
 800ca10:	f000 fbee 	bl	800d1f0 <__lshift>
 800ca14:	4621      	mov	r1, r4
 800ca16:	9002      	str	r0, [sp, #8]
 800ca18:	f000 fc56 	bl	800d2c8 <__mcmp>
 800ca1c:	2800      	cmp	r0, #0
 800ca1e:	9b00      	ldr	r3, [sp, #0]
 800ca20:	dc02      	bgt.n	800ca28 <_dtoa_r+0xa78>
 800ca22:	d1e0      	bne.n	800c9e6 <_dtoa_r+0xa36>
 800ca24:	07da      	lsls	r2, r3, #31
 800ca26:	d5de      	bpl.n	800c9e6 <_dtoa_r+0xa36>
 800ca28:	2b39      	cmp	r3, #57	@ 0x39
 800ca2a:	d1da      	bne.n	800c9e2 <_dtoa_r+0xa32>
 800ca2c:	2339      	movs	r3, #57	@ 0x39
 800ca2e:	f88b 3000 	strb.w	r3, [fp]
 800ca32:	4633      	mov	r3, r6
 800ca34:	461e      	mov	r6, r3
 800ca36:	3b01      	subs	r3, #1
 800ca38:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800ca3c:	2a39      	cmp	r2, #57	@ 0x39
 800ca3e:	d04e      	beq.n	800cade <_dtoa_r+0xb2e>
 800ca40:	3201      	adds	r2, #1
 800ca42:	701a      	strb	r2, [r3, #0]
 800ca44:	e501      	b.n	800c44a <_dtoa_r+0x49a>
 800ca46:	2a00      	cmp	r2, #0
 800ca48:	dd03      	ble.n	800ca52 <_dtoa_r+0xaa2>
 800ca4a:	2b39      	cmp	r3, #57	@ 0x39
 800ca4c:	d0ee      	beq.n	800ca2c <_dtoa_r+0xa7c>
 800ca4e:	3301      	adds	r3, #1
 800ca50:	e7c9      	b.n	800c9e6 <_dtoa_r+0xa36>
 800ca52:	9a00      	ldr	r2, [sp, #0]
 800ca54:	9908      	ldr	r1, [sp, #32]
 800ca56:	f802 3c01 	strb.w	r3, [r2, #-1]
 800ca5a:	428a      	cmp	r2, r1
 800ca5c:	d028      	beq.n	800cab0 <_dtoa_r+0xb00>
 800ca5e:	9902      	ldr	r1, [sp, #8]
 800ca60:	2300      	movs	r3, #0
 800ca62:	220a      	movs	r2, #10
 800ca64:	4648      	mov	r0, r9
 800ca66:	f000 f9d5 	bl	800ce14 <__multadd>
 800ca6a:	42af      	cmp	r7, r5
 800ca6c:	9002      	str	r0, [sp, #8]
 800ca6e:	f04f 0300 	mov.w	r3, #0
 800ca72:	f04f 020a 	mov.w	r2, #10
 800ca76:	4639      	mov	r1, r7
 800ca78:	4648      	mov	r0, r9
 800ca7a:	d107      	bne.n	800ca8c <_dtoa_r+0xadc>
 800ca7c:	f000 f9ca 	bl	800ce14 <__multadd>
 800ca80:	4607      	mov	r7, r0
 800ca82:	4605      	mov	r5, r0
 800ca84:	9b00      	ldr	r3, [sp, #0]
 800ca86:	3301      	adds	r3, #1
 800ca88:	9300      	str	r3, [sp, #0]
 800ca8a:	e777      	b.n	800c97c <_dtoa_r+0x9cc>
 800ca8c:	f000 f9c2 	bl	800ce14 <__multadd>
 800ca90:	4629      	mov	r1, r5
 800ca92:	4607      	mov	r7, r0
 800ca94:	2300      	movs	r3, #0
 800ca96:	220a      	movs	r2, #10
 800ca98:	4648      	mov	r0, r9
 800ca9a:	f000 f9bb 	bl	800ce14 <__multadd>
 800ca9e:	4605      	mov	r5, r0
 800caa0:	e7f0      	b.n	800ca84 <_dtoa_r+0xad4>
 800caa2:	f1bb 0f00 	cmp.w	fp, #0
 800caa6:	bfcc      	ite	gt
 800caa8:	465e      	movgt	r6, fp
 800caaa:	2601      	movle	r6, #1
 800caac:	4456      	add	r6, sl
 800caae:	2700      	movs	r7, #0
 800cab0:	9902      	ldr	r1, [sp, #8]
 800cab2:	9300      	str	r3, [sp, #0]
 800cab4:	2201      	movs	r2, #1
 800cab6:	4648      	mov	r0, r9
 800cab8:	f000 fb9a 	bl	800d1f0 <__lshift>
 800cabc:	4621      	mov	r1, r4
 800cabe:	9002      	str	r0, [sp, #8]
 800cac0:	f000 fc02 	bl	800d2c8 <__mcmp>
 800cac4:	2800      	cmp	r0, #0
 800cac6:	dcb4      	bgt.n	800ca32 <_dtoa_r+0xa82>
 800cac8:	d102      	bne.n	800cad0 <_dtoa_r+0xb20>
 800caca:	9b00      	ldr	r3, [sp, #0]
 800cacc:	07db      	lsls	r3, r3, #31
 800cace:	d4b0      	bmi.n	800ca32 <_dtoa_r+0xa82>
 800cad0:	4633      	mov	r3, r6
 800cad2:	461e      	mov	r6, r3
 800cad4:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800cad8:	2a30      	cmp	r2, #48	@ 0x30
 800cada:	d0fa      	beq.n	800cad2 <_dtoa_r+0xb22>
 800cadc:	e4b5      	b.n	800c44a <_dtoa_r+0x49a>
 800cade:	459a      	cmp	sl, r3
 800cae0:	d1a8      	bne.n	800ca34 <_dtoa_r+0xa84>
 800cae2:	2331      	movs	r3, #49	@ 0x31
 800cae4:	f108 0801 	add.w	r8, r8, #1
 800cae8:	f88a 3000 	strb.w	r3, [sl]
 800caec:	e4ad      	b.n	800c44a <_dtoa_r+0x49a>
 800caee:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800caf0:	f8df a058 	ldr.w	sl, [pc, #88]	@ 800cb4c <_dtoa_r+0xb9c>
 800caf4:	b11b      	cbz	r3, 800cafe <_dtoa_r+0xb4e>
 800caf6:	f10a 0308 	add.w	r3, sl, #8
 800cafa:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800cafc:	6013      	str	r3, [r2, #0]
 800cafe:	4650      	mov	r0, sl
 800cb00:	b017      	add	sp, #92	@ 0x5c
 800cb02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cb06:	9b07      	ldr	r3, [sp, #28]
 800cb08:	2b01      	cmp	r3, #1
 800cb0a:	f77f ae2e 	ble.w	800c76a <_dtoa_r+0x7ba>
 800cb0e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800cb10:	9308      	str	r3, [sp, #32]
 800cb12:	2001      	movs	r0, #1
 800cb14:	e64d      	b.n	800c7b2 <_dtoa_r+0x802>
 800cb16:	f1bb 0f00 	cmp.w	fp, #0
 800cb1a:	f77f aed9 	ble.w	800c8d0 <_dtoa_r+0x920>
 800cb1e:	4656      	mov	r6, sl
 800cb20:	9802      	ldr	r0, [sp, #8]
 800cb22:	4621      	mov	r1, r4
 800cb24:	f7ff f9bc 	bl	800bea0 <quorem>
 800cb28:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 800cb2c:	f806 3b01 	strb.w	r3, [r6], #1
 800cb30:	eba6 020a 	sub.w	r2, r6, sl
 800cb34:	4593      	cmp	fp, r2
 800cb36:	ddb4      	ble.n	800caa2 <_dtoa_r+0xaf2>
 800cb38:	9902      	ldr	r1, [sp, #8]
 800cb3a:	2300      	movs	r3, #0
 800cb3c:	220a      	movs	r2, #10
 800cb3e:	4648      	mov	r0, r9
 800cb40:	f000 f968 	bl	800ce14 <__multadd>
 800cb44:	9002      	str	r0, [sp, #8]
 800cb46:	e7eb      	b.n	800cb20 <_dtoa_r+0xb70>
 800cb48:	08010c09 	.word	0x08010c09
 800cb4c:	08010b8d 	.word	0x08010b8d

0800cb50 <_free_r>:
 800cb50:	b538      	push	{r3, r4, r5, lr}
 800cb52:	4605      	mov	r5, r0
 800cb54:	2900      	cmp	r1, #0
 800cb56:	d041      	beq.n	800cbdc <_free_r+0x8c>
 800cb58:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cb5c:	1f0c      	subs	r4, r1, #4
 800cb5e:	2b00      	cmp	r3, #0
 800cb60:	bfb8      	it	lt
 800cb62:	18e4      	addlt	r4, r4, r3
 800cb64:	f000 f8e8 	bl	800cd38 <__malloc_lock>
 800cb68:	4a1d      	ldr	r2, [pc, #116]	@ (800cbe0 <_free_r+0x90>)
 800cb6a:	6813      	ldr	r3, [r2, #0]
 800cb6c:	b933      	cbnz	r3, 800cb7c <_free_r+0x2c>
 800cb6e:	6063      	str	r3, [r4, #4]
 800cb70:	6014      	str	r4, [r2, #0]
 800cb72:	4628      	mov	r0, r5
 800cb74:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800cb78:	f000 b8e4 	b.w	800cd44 <__malloc_unlock>
 800cb7c:	42a3      	cmp	r3, r4
 800cb7e:	d908      	bls.n	800cb92 <_free_r+0x42>
 800cb80:	6820      	ldr	r0, [r4, #0]
 800cb82:	1821      	adds	r1, r4, r0
 800cb84:	428b      	cmp	r3, r1
 800cb86:	bf01      	itttt	eq
 800cb88:	6819      	ldreq	r1, [r3, #0]
 800cb8a:	685b      	ldreq	r3, [r3, #4]
 800cb8c:	1809      	addeq	r1, r1, r0
 800cb8e:	6021      	streq	r1, [r4, #0]
 800cb90:	e7ed      	b.n	800cb6e <_free_r+0x1e>
 800cb92:	461a      	mov	r2, r3
 800cb94:	685b      	ldr	r3, [r3, #4]
 800cb96:	b10b      	cbz	r3, 800cb9c <_free_r+0x4c>
 800cb98:	42a3      	cmp	r3, r4
 800cb9a:	d9fa      	bls.n	800cb92 <_free_r+0x42>
 800cb9c:	6811      	ldr	r1, [r2, #0]
 800cb9e:	1850      	adds	r0, r2, r1
 800cba0:	42a0      	cmp	r0, r4
 800cba2:	d10b      	bne.n	800cbbc <_free_r+0x6c>
 800cba4:	6820      	ldr	r0, [r4, #0]
 800cba6:	4401      	add	r1, r0
 800cba8:	1850      	adds	r0, r2, r1
 800cbaa:	4283      	cmp	r3, r0
 800cbac:	6011      	str	r1, [r2, #0]
 800cbae:	d1e0      	bne.n	800cb72 <_free_r+0x22>
 800cbb0:	6818      	ldr	r0, [r3, #0]
 800cbb2:	685b      	ldr	r3, [r3, #4]
 800cbb4:	6053      	str	r3, [r2, #4]
 800cbb6:	4408      	add	r0, r1
 800cbb8:	6010      	str	r0, [r2, #0]
 800cbba:	e7da      	b.n	800cb72 <_free_r+0x22>
 800cbbc:	d902      	bls.n	800cbc4 <_free_r+0x74>
 800cbbe:	230c      	movs	r3, #12
 800cbc0:	602b      	str	r3, [r5, #0]
 800cbc2:	e7d6      	b.n	800cb72 <_free_r+0x22>
 800cbc4:	6820      	ldr	r0, [r4, #0]
 800cbc6:	1821      	adds	r1, r4, r0
 800cbc8:	428b      	cmp	r3, r1
 800cbca:	bf04      	itt	eq
 800cbcc:	6819      	ldreq	r1, [r3, #0]
 800cbce:	685b      	ldreq	r3, [r3, #4]
 800cbd0:	6063      	str	r3, [r4, #4]
 800cbd2:	bf04      	itt	eq
 800cbd4:	1809      	addeq	r1, r1, r0
 800cbd6:	6021      	streq	r1, [r4, #0]
 800cbd8:	6054      	str	r4, [r2, #4]
 800cbda:	e7ca      	b.n	800cb72 <_free_r+0x22>
 800cbdc:	bd38      	pop	{r3, r4, r5, pc}
 800cbde:	bf00      	nop
 800cbe0:	20014218 	.word	0x20014218

0800cbe4 <malloc>:
 800cbe4:	4b02      	ldr	r3, [pc, #8]	@ (800cbf0 <malloc+0xc>)
 800cbe6:	4601      	mov	r1, r0
 800cbe8:	6818      	ldr	r0, [r3, #0]
 800cbea:	f000 b825 	b.w	800cc38 <_malloc_r>
 800cbee:	bf00      	nop
 800cbf0:	2000d140 	.word	0x2000d140

0800cbf4 <sbrk_aligned>:
 800cbf4:	b570      	push	{r4, r5, r6, lr}
 800cbf6:	4e0f      	ldr	r6, [pc, #60]	@ (800cc34 <sbrk_aligned+0x40>)
 800cbf8:	460c      	mov	r4, r1
 800cbfa:	6831      	ldr	r1, [r6, #0]
 800cbfc:	4605      	mov	r5, r0
 800cbfe:	b911      	cbnz	r1, 800cc06 <sbrk_aligned+0x12>
 800cc00:	f001 ffdc 	bl	800ebbc <_sbrk_r>
 800cc04:	6030      	str	r0, [r6, #0]
 800cc06:	4621      	mov	r1, r4
 800cc08:	4628      	mov	r0, r5
 800cc0a:	f001 ffd7 	bl	800ebbc <_sbrk_r>
 800cc0e:	1c43      	adds	r3, r0, #1
 800cc10:	d103      	bne.n	800cc1a <sbrk_aligned+0x26>
 800cc12:	f04f 34ff 	mov.w	r4, #4294967295
 800cc16:	4620      	mov	r0, r4
 800cc18:	bd70      	pop	{r4, r5, r6, pc}
 800cc1a:	1cc4      	adds	r4, r0, #3
 800cc1c:	f024 0403 	bic.w	r4, r4, #3
 800cc20:	42a0      	cmp	r0, r4
 800cc22:	d0f8      	beq.n	800cc16 <sbrk_aligned+0x22>
 800cc24:	1a21      	subs	r1, r4, r0
 800cc26:	4628      	mov	r0, r5
 800cc28:	f001 ffc8 	bl	800ebbc <_sbrk_r>
 800cc2c:	3001      	adds	r0, #1
 800cc2e:	d1f2      	bne.n	800cc16 <sbrk_aligned+0x22>
 800cc30:	e7ef      	b.n	800cc12 <sbrk_aligned+0x1e>
 800cc32:	bf00      	nop
 800cc34:	20014214 	.word	0x20014214

0800cc38 <_malloc_r>:
 800cc38:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cc3c:	1ccd      	adds	r5, r1, #3
 800cc3e:	f025 0503 	bic.w	r5, r5, #3
 800cc42:	3508      	adds	r5, #8
 800cc44:	2d0c      	cmp	r5, #12
 800cc46:	bf38      	it	cc
 800cc48:	250c      	movcc	r5, #12
 800cc4a:	2d00      	cmp	r5, #0
 800cc4c:	4606      	mov	r6, r0
 800cc4e:	db01      	blt.n	800cc54 <_malloc_r+0x1c>
 800cc50:	42a9      	cmp	r1, r5
 800cc52:	d904      	bls.n	800cc5e <_malloc_r+0x26>
 800cc54:	230c      	movs	r3, #12
 800cc56:	6033      	str	r3, [r6, #0]
 800cc58:	2000      	movs	r0, #0
 800cc5a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cc5e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800cd34 <_malloc_r+0xfc>
 800cc62:	f000 f869 	bl	800cd38 <__malloc_lock>
 800cc66:	f8d8 3000 	ldr.w	r3, [r8]
 800cc6a:	461c      	mov	r4, r3
 800cc6c:	bb44      	cbnz	r4, 800ccc0 <_malloc_r+0x88>
 800cc6e:	4629      	mov	r1, r5
 800cc70:	4630      	mov	r0, r6
 800cc72:	f7ff ffbf 	bl	800cbf4 <sbrk_aligned>
 800cc76:	1c43      	adds	r3, r0, #1
 800cc78:	4604      	mov	r4, r0
 800cc7a:	d158      	bne.n	800cd2e <_malloc_r+0xf6>
 800cc7c:	f8d8 4000 	ldr.w	r4, [r8]
 800cc80:	4627      	mov	r7, r4
 800cc82:	2f00      	cmp	r7, #0
 800cc84:	d143      	bne.n	800cd0e <_malloc_r+0xd6>
 800cc86:	2c00      	cmp	r4, #0
 800cc88:	d04b      	beq.n	800cd22 <_malloc_r+0xea>
 800cc8a:	6823      	ldr	r3, [r4, #0]
 800cc8c:	4639      	mov	r1, r7
 800cc8e:	4630      	mov	r0, r6
 800cc90:	eb04 0903 	add.w	r9, r4, r3
 800cc94:	f001 ff92 	bl	800ebbc <_sbrk_r>
 800cc98:	4581      	cmp	r9, r0
 800cc9a:	d142      	bne.n	800cd22 <_malloc_r+0xea>
 800cc9c:	6821      	ldr	r1, [r4, #0]
 800cc9e:	1a6d      	subs	r5, r5, r1
 800cca0:	4629      	mov	r1, r5
 800cca2:	4630      	mov	r0, r6
 800cca4:	f7ff ffa6 	bl	800cbf4 <sbrk_aligned>
 800cca8:	3001      	adds	r0, #1
 800ccaa:	d03a      	beq.n	800cd22 <_malloc_r+0xea>
 800ccac:	6823      	ldr	r3, [r4, #0]
 800ccae:	442b      	add	r3, r5
 800ccb0:	6023      	str	r3, [r4, #0]
 800ccb2:	f8d8 3000 	ldr.w	r3, [r8]
 800ccb6:	685a      	ldr	r2, [r3, #4]
 800ccb8:	bb62      	cbnz	r2, 800cd14 <_malloc_r+0xdc>
 800ccba:	f8c8 7000 	str.w	r7, [r8]
 800ccbe:	e00f      	b.n	800cce0 <_malloc_r+0xa8>
 800ccc0:	6822      	ldr	r2, [r4, #0]
 800ccc2:	1b52      	subs	r2, r2, r5
 800ccc4:	d420      	bmi.n	800cd08 <_malloc_r+0xd0>
 800ccc6:	2a0b      	cmp	r2, #11
 800ccc8:	d917      	bls.n	800ccfa <_malloc_r+0xc2>
 800ccca:	1961      	adds	r1, r4, r5
 800cccc:	42a3      	cmp	r3, r4
 800ccce:	6025      	str	r5, [r4, #0]
 800ccd0:	bf18      	it	ne
 800ccd2:	6059      	strne	r1, [r3, #4]
 800ccd4:	6863      	ldr	r3, [r4, #4]
 800ccd6:	bf08      	it	eq
 800ccd8:	f8c8 1000 	streq.w	r1, [r8]
 800ccdc:	5162      	str	r2, [r4, r5]
 800ccde:	604b      	str	r3, [r1, #4]
 800cce0:	4630      	mov	r0, r6
 800cce2:	f000 f82f 	bl	800cd44 <__malloc_unlock>
 800cce6:	f104 000b 	add.w	r0, r4, #11
 800ccea:	1d23      	adds	r3, r4, #4
 800ccec:	f020 0007 	bic.w	r0, r0, #7
 800ccf0:	1ac2      	subs	r2, r0, r3
 800ccf2:	bf1c      	itt	ne
 800ccf4:	1a1b      	subne	r3, r3, r0
 800ccf6:	50a3      	strne	r3, [r4, r2]
 800ccf8:	e7af      	b.n	800cc5a <_malloc_r+0x22>
 800ccfa:	6862      	ldr	r2, [r4, #4]
 800ccfc:	42a3      	cmp	r3, r4
 800ccfe:	bf0c      	ite	eq
 800cd00:	f8c8 2000 	streq.w	r2, [r8]
 800cd04:	605a      	strne	r2, [r3, #4]
 800cd06:	e7eb      	b.n	800cce0 <_malloc_r+0xa8>
 800cd08:	4623      	mov	r3, r4
 800cd0a:	6864      	ldr	r4, [r4, #4]
 800cd0c:	e7ae      	b.n	800cc6c <_malloc_r+0x34>
 800cd0e:	463c      	mov	r4, r7
 800cd10:	687f      	ldr	r7, [r7, #4]
 800cd12:	e7b6      	b.n	800cc82 <_malloc_r+0x4a>
 800cd14:	461a      	mov	r2, r3
 800cd16:	685b      	ldr	r3, [r3, #4]
 800cd18:	42a3      	cmp	r3, r4
 800cd1a:	d1fb      	bne.n	800cd14 <_malloc_r+0xdc>
 800cd1c:	2300      	movs	r3, #0
 800cd1e:	6053      	str	r3, [r2, #4]
 800cd20:	e7de      	b.n	800cce0 <_malloc_r+0xa8>
 800cd22:	230c      	movs	r3, #12
 800cd24:	6033      	str	r3, [r6, #0]
 800cd26:	4630      	mov	r0, r6
 800cd28:	f000 f80c 	bl	800cd44 <__malloc_unlock>
 800cd2c:	e794      	b.n	800cc58 <_malloc_r+0x20>
 800cd2e:	6005      	str	r5, [r0, #0]
 800cd30:	e7d6      	b.n	800cce0 <_malloc_r+0xa8>
 800cd32:	bf00      	nop
 800cd34:	20014218 	.word	0x20014218

0800cd38 <__malloc_lock>:
 800cd38:	4801      	ldr	r0, [pc, #4]	@ (800cd40 <__malloc_lock+0x8>)
 800cd3a:	f7ff b87c 	b.w	800be36 <__retarget_lock_acquire_recursive>
 800cd3e:	bf00      	nop
 800cd40:	20014210 	.word	0x20014210

0800cd44 <__malloc_unlock>:
 800cd44:	4801      	ldr	r0, [pc, #4]	@ (800cd4c <__malloc_unlock+0x8>)
 800cd46:	f7ff b877 	b.w	800be38 <__retarget_lock_release_recursive>
 800cd4a:	bf00      	nop
 800cd4c:	20014210 	.word	0x20014210

0800cd50 <_Balloc>:
 800cd50:	b570      	push	{r4, r5, r6, lr}
 800cd52:	69c6      	ldr	r6, [r0, #28]
 800cd54:	4604      	mov	r4, r0
 800cd56:	460d      	mov	r5, r1
 800cd58:	b976      	cbnz	r6, 800cd78 <_Balloc+0x28>
 800cd5a:	2010      	movs	r0, #16
 800cd5c:	f7ff ff42 	bl	800cbe4 <malloc>
 800cd60:	4602      	mov	r2, r0
 800cd62:	61e0      	str	r0, [r4, #28]
 800cd64:	b920      	cbnz	r0, 800cd70 <_Balloc+0x20>
 800cd66:	4b18      	ldr	r3, [pc, #96]	@ (800cdc8 <_Balloc+0x78>)
 800cd68:	4818      	ldr	r0, [pc, #96]	@ (800cdcc <_Balloc+0x7c>)
 800cd6a:	216b      	movs	r1, #107	@ 0x6b
 800cd6c:	f7ff f87a 	bl	800be64 <__assert_func>
 800cd70:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800cd74:	6006      	str	r6, [r0, #0]
 800cd76:	60c6      	str	r6, [r0, #12]
 800cd78:	69e6      	ldr	r6, [r4, #28]
 800cd7a:	68f3      	ldr	r3, [r6, #12]
 800cd7c:	b183      	cbz	r3, 800cda0 <_Balloc+0x50>
 800cd7e:	69e3      	ldr	r3, [r4, #28]
 800cd80:	68db      	ldr	r3, [r3, #12]
 800cd82:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800cd86:	b9b8      	cbnz	r0, 800cdb8 <_Balloc+0x68>
 800cd88:	2101      	movs	r1, #1
 800cd8a:	fa01 f605 	lsl.w	r6, r1, r5
 800cd8e:	1d72      	adds	r2, r6, #5
 800cd90:	0092      	lsls	r2, r2, #2
 800cd92:	4620      	mov	r0, r4
 800cd94:	f001 ff33 	bl	800ebfe <_calloc_r>
 800cd98:	b160      	cbz	r0, 800cdb4 <_Balloc+0x64>
 800cd9a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800cd9e:	e00e      	b.n	800cdbe <_Balloc+0x6e>
 800cda0:	2221      	movs	r2, #33	@ 0x21
 800cda2:	2104      	movs	r1, #4
 800cda4:	4620      	mov	r0, r4
 800cda6:	f001 ff2a 	bl	800ebfe <_calloc_r>
 800cdaa:	69e3      	ldr	r3, [r4, #28]
 800cdac:	60f0      	str	r0, [r6, #12]
 800cdae:	68db      	ldr	r3, [r3, #12]
 800cdb0:	2b00      	cmp	r3, #0
 800cdb2:	d1e4      	bne.n	800cd7e <_Balloc+0x2e>
 800cdb4:	2000      	movs	r0, #0
 800cdb6:	bd70      	pop	{r4, r5, r6, pc}
 800cdb8:	6802      	ldr	r2, [r0, #0]
 800cdba:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800cdbe:	2300      	movs	r3, #0
 800cdc0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800cdc4:	e7f7      	b.n	800cdb6 <_Balloc+0x66>
 800cdc6:	bf00      	nop
 800cdc8:	08010b9a 	.word	0x08010b9a
 800cdcc:	08010c1a 	.word	0x08010c1a

0800cdd0 <_Bfree>:
 800cdd0:	b570      	push	{r4, r5, r6, lr}
 800cdd2:	69c6      	ldr	r6, [r0, #28]
 800cdd4:	4605      	mov	r5, r0
 800cdd6:	460c      	mov	r4, r1
 800cdd8:	b976      	cbnz	r6, 800cdf8 <_Bfree+0x28>
 800cdda:	2010      	movs	r0, #16
 800cddc:	f7ff ff02 	bl	800cbe4 <malloc>
 800cde0:	4602      	mov	r2, r0
 800cde2:	61e8      	str	r0, [r5, #28]
 800cde4:	b920      	cbnz	r0, 800cdf0 <_Bfree+0x20>
 800cde6:	4b09      	ldr	r3, [pc, #36]	@ (800ce0c <_Bfree+0x3c>)
 800cde8:	4809      	ldr	r0, [pc, #36]	@ (800ce10 <_Bfree+0x40>)
 800cdea:	218f      	movs	r1, #143	@ 0x8f
 800cdec:	f7ff f83a 	bl	800be64 <__assert_func>
 800cdf0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800cdf4:	6006      	str	r6, [r0, #0]
 800cdf6:	60c6      	str	r6, [r0, #12]
 800cdf8:	b13c      	cbz	r4, 800ce0a <_Bfree+0x3a>
 800cdfa:	69eb      	ldr	r3, [r5, #28]
 800cdfc:	6862      	ldr	r2, [r4, #4]
 800cdfe:	68db      	ldr	r3, [r3, #12]
 800ce00:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800ce04:	6021      	str	r1, [r4, #0]
 800ce06:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800ce0a:	bd70      	pop	{r4, r5, r6, pc}
 800ce0c:	08010b9a 	.word	0x08010b9a
 800ce10:	08010c1a 	.word	0x08010c1a

0800ce14 <__multadd>:
 800ce14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ce18:	690d      	ldr	r5, [r1, #16]
 800ce1a:	4607      	mov	r7, r0
 800ce1c:	460c      	mov	r4, r1
 800ce1e:	461e      	mov	r6, r3
 800ce20:	f101 0c14 	add.w	ip, r1, #20
 800ce24:	2000      	movs	r0, #0
 800ce26:	f8dc 3000 	ldr.w	r3, [ip]
 800ce2a:	b299      	uxth	r1, r3
 800ce2c:	fb02 6101 	mla	r1, r2, r1, r6
 800ce30:	0c1e      	lsrs	r6, r3, #16
 800ce32:	0c0b      	lsrs	r3, r1, #16
 800ce34:	fb02 3306 	mla	r3, r2, r6, r3
 800ce38:	b289      	uxth	r1, r1
 800ce3a:	3001      	adds	r0, #1
 800ce3c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800ce40:	4285      	cmp	r5, r0
 800ce42:	f84c 1b04 	str.w	r1, [ip], #4
 800ce46:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800ce4a:	dcec      	bgt.n	800ce26 <__multadd+0x12>
 800ce4c:	b30e      	cbz	r6, 800ce92 <__multadd+0x7e>
 800ce4e:	68a3      	ldr	r3, [r4, #8]
 800ce50:	42ab      	cmp	r3, r5
 800ce52:	dc19      	bgt.n	800ce88 <__multadd+0x74>
 800ce54:	6861      	ldr	r1, [r4, #4]
 800ce56:	4638      	mov	r0, r7
 800ce58:	3101      	adds	r1, #1
 800ce5a:	f7ff ff79 	bl	800cd50 <_Balloc>
 800ce5e:	4680      	mov	r8, r0
 800ce60:	b928      	cbnz	r0, 800ce6e <__multadd+0x5a>
 800ce62:	4602      	mov	r2, r0
 800ce64:	4b0c      	ldr	r3, [pc, #48]	@ (800ce98 <__multadd+0x84>)
 800ce66:	480d      	ldr	r0, [pc, #52]	@ (800ce9c <__multadd+0x88>)
 800ce68:	21ba      	movs	r1, #186	@ 0xba
 800ce6a:	f7fe fffb 	bl	800be64 <__assert_func>
 800ce6e:	6922      	ldr	r2, [r4, #16]
 800ce70:	3202      	adds	r2, #2
 800ce72:	f104 010c 	add.w	r1, r4, #12
 800ce76:	0092      	lsls	r2, r2, #2
 800ce78:	300c      	adds	r0, #12
 800ce7a:	f7fe ffde 	bl	800be3a <memcpy>
 800ce7e:	4621      	mov	r1, r4
 800ce80:	4638      	mov	r0, r7
 800ce82:	f7ff ffa5 	bl	800cdd0 <_Bfree>
 800ce86:	4644      	mov	r4, r8
 800ce88:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800ce8c:	3501      	adds	r5, #1
 800ce8e:	615e      	str	r6, [r3, #20]
 800ce90:	6125      	str	r5, [r4, #16]
 800ce92:	4620      	mov	r0, r4
 800ce94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ce98:	08010c09 	.word	0x08010c09
 800ce9c:	08010c1a 	.word	0x08010c1a

0800cea0 <__s2b>:
 800cea0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cea4:	460c      	mov	r4, r1
 800cea6:	4615      	mov	r5, r2
 800cea8:	461f      	mov	r7, r3
 800ceaa:	2209      	movs	r2, #9
 800ceac:	3308      	adds	r3, #8
 800ceae:	4606      	mov	r6, r0
 800ceb0:	fb93 f3f2 	sdiv	r3, r3, r2
 800ceb4:	2100      	movs	r1, #0
 800ceb6:	2201      	movs	r2, #1
 800ceb8:	429a      	cmp	r2, r3
 800ceba:	db09      	blt.n	800ced0 <__s2b+0x30>
 800cebc:	4630      	mov	r0, r6
 800cebe:	f7ff ff47 	bl	800cd50 <_Balloc>
 800cec2:	b940      	cbnz	r0, 800ced6 <__s2b+0x36>
 800cec4:	4602      	mov	r2, r0
 800cec6:	4b19      	ldr	r3, [pc, #100]	@ (800cf2c <__s2b+0x8c>)
 800cec8:	4819      	ldr	r0, [pc, #100]	@ (800cf30 <__s2b+0x90>)
 800ceca:	21d3      	movs	r1, #211	@ 0xd3
 800cecc:	f7fe ffca 	bl	800be64 <__assert_func>
 800ced0:	0052      	lsls	r2, r2, #1
 800ced2:	3101      	adds	r1, #1
 800ced4:	e7f0      	b.n	800ceb8 <__s2b+0x18>
 800ced6:	9b08      	ldr	r3, [sp, #32]
 800ced8:	6143      	str	r3, [r0, #20]
 800ceda:	2d09      	cmp	r5, #9
 800cedc:	f04f 0301 	mov.w	r3, #1
 800cee0:	6103      	str	r3, [r0, #16]
 800cee2:	dd16      	ble.n	800cf12 <__s2b+0x72>
 800cee4:	f104 0909 	add.w	r9, r4, #9
 800cee8:	46c8      	mov	r8, r9
 800ceea:	442c      	add	r4, r5
 800ceec:	f818 3b01 	ldrb.w	r3, [r8], #1
 800cef0:	4601      	mov	r1, r0
 800cef2:	3b30      	subs	r3, #48	@ 0x30
 800cef4:	220a      	movs	r2, #10
 800cef6:	4630      	mov	r0, r6
 800cef8:	f7ff ff8c 	bl	800ce14 <__multadd>
 800cefc:	45a0      	cmp	r8, r4
 800cefe:	d1f5      	bne.n	800ceec <__s2b+0x4c>
 800cf00:	f1a5 0408 	sub.w	r4, r5, #8
 800cf04:	444c      	add	r4, r9
 800cf06:	1b2d      	subs	r5, r5, r4
 800cf08:	1963      	adds	r3, r4, r5
 800cf0a:	42bb      	cmp	r3, r7
 800cf0c:	db04      	blt.n	800cf18 <__s2b+0x78>
 800cf0e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cf12:	340a      	adds	r4, #10
 800cf14:	2509      	movs	r5, #9
 800cf16:	e7f6      	b.n	800cf06 <__s2b+0x66>
 800cf18:	f814 3b01 	ldrb.w	r3, [r4], #1
 800cf1c:	4601      	mov	r1, r0
 800cf1e:	3b30      	subs	r3, #48	@ 0x30
 800cf20:	220a      	movs	r2, #10
 800cf22:	4630      	mov	r0, r6
 800cf24:	f7ff ff76 	bl	800ce14 <__multadd>
 800cf28:	e7ee      	b.n	800cf08 <__s2b+0x68>
 800cf2a:	bf00      	nop
 800cf2c:	08010c09 	.word	0x08010c09
 800cf30:	08010c1a 	.word	0x08010c1a

0800cf34 <__hi0bits>:
 800cf34:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800cf38:	4603      	mov	r3, r0
 800cf3a:	bf36      	itet	cc
 800cf3c:	0403      	lslcc	r3, r0, #16
 800cf3e:	2000      	movcs	r0, #0
 800cf40:	2010      	movcc	r0, #16
 800cf42:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800cf46:	bf3c      	itt	cc
 800cf48:	021b      	lslcc	r3, r3, #8
 800cf4a:	3008      	addcc	r0, #8
 800cf4c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800cf50:	bf3c      	itt	cc
 800cf52:	011b      	lslcc	r3, r3, #4
 800cf54:	3004      	addcc	r0, #4
 800cf56:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800cf5a:	bf3c      	itt	cc
 800cf5c:	009b      	lslcc	r3, r3, #2
 800cf5e:	3002      	addcc	r0, #2
 800cf60:	2b00      	cmp	r3, #0
 800cf62:	db05      	blt.n	800cf70 <__hi0bits+0x3c>
 800cf64:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800cf68:	f100 0001 	add.w	r0, r0, #1
 800cf6c:	bf08      	it	eq
 800cf6e:	2020      	moveq	r0, #32
 800cf70:	4770      	bx	lr

0800cf72 <__lo0bits>:
 800cf72:	6803      	ldr	r3, [r0, #0]
 800cf74:	4602      	mov	r2, r0
 800cf76:	f013 0007 	ands.w	r0, r3, #7
 800cf7a:	d00b      	beq.n	800cf94 <__lo0bits+0x22>
 800cf7c:	07d9      	lsls	r1, r3, #31
 800cf7e:	d421      	bmi.n	800cfc4 <__lo0bits+0x52>
 800cf80:	0798      	lsls	r0, r3, #30
 800cf82:	bf49      	itett	mi
 800cf84:	085b      	lsrmi	r3, r3, #1
 800cf86:	089b      	lsrpl	r3, r3, #2
 800cf88:	2001      	movmi	r0, #1
 800cf8a:	6013      	strmi	r3, [r2, #0]
 800cf8c:	bf5c      	itt	pl
 800cf8e:	6013      	strpl	r3, [r2, #0]
 800cf90:	2002      	movpl	r0, #2
 800cf92:	4770      	bx	lr
 800cf94:	b299      	uxth	r1, r3
 800cf96:	b909      	cbnz	r1, 800cf9c <__lo0bits+0x2a>
 800cf98:	0c1b      	lsrs	r3, r3, #16
 800cf9a:	2010      	movs	r0, #16
 800cf9c:	b2d9      	uxtb	r1, r3
 800cf9e:	b909      	cbnz	r1, 800cfa4 <__lo0bits+0x32>
 800cfa0:	3008      	adds	r0, #8
 800cfa2:	0a1b      	lsrs	r3, r3, #8
 800cfa4:	0719      	lsls	r1, r3, #28
 800cfa6:	bf04      	itt	eq
 800cfa8:	091b      	lsreq	r3, r3, #4
 800cfaa:	3004      	addeq	r0, #4
 800cfac:	0799      	lsls	r1, r3, #30
 800cfae:	bf04      	itt	eq
 800cfb0:	089b      	lsreq	r3, r3, #2
 800cfb2:	3002      	addeq	r0, #2
 800cfb4:	07d9      	lsls	r1, r3, #31
 800cfb6:	d403      	bmi.n	800cfc0 <__lo0bits+0x4e>
 800cfb8:	085b      	lsrs	r3, r3, #1
 800cfba:	f100 0001 	add.w	r0, r0, #1
 800cfbe:	d003      	beq.n	800cfc8 <__lo0bits+0x56>
 800cfc0:	6013      	str	r3, [r2, #0]
 800cfc2:	4770      	bx	lr
 800cfc4:	2000      	movs	r0, #0
 800cfc6:	4770      	bx	lr
 800cfc8:	2020      	movs	r0, #32
 800cfca:	4770      	bx	lr

0800cfcc <__i2b>:
 800cfcc:	b510      	push	{r4, lr}
 800cfce:	460c      	mov	r4, r1
 800cfd0:	2101      	movs	r1, #1
 800cfd2:	f7ff febd 	bl	800cd50 <_Balloc>
 800cfd6:	4602      	mov	r2, r0
 800cfd8:	b928      	cbnz	r0, 800cfe6 <__i2b+0x1a>
 800cfda:	4b05      	ldr	r3, [pc, #20]	@ (800cff0 <__i2b+0x24>)
 800cfdc:	4805      	ldr	r0, [pc, #20]	@ (800cff4 <__i2b+0x28>)
 800cfde:	f240 1145 	movw	r1, #325	@ 0x145
 800cfe2:	f7fe ff3f 	bl	800be64 <__assert_func>
 800cfe6:	2301      	movs	r3, #1
 800cfe8:	6144      	str	r4, [r0, #20]
 800cfea:	6103      	str	r3, [r0, #16]
 800cfec:	bd10      	pop	{r4, pc}
 800cfee:	bf00      	nop
 800cff0:	08010c09 	.word	0x08010c09
 800cff4:	08010c1a 	.word	0x08010c1a

0800cff8 <__multiply>:
 800cff8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cffc:	4617      	mov	r7, r2
 800cffe:	690a      	ldr	r2, [r1, #16]
 800d000:	693b      	ldr	r3, [r7, #16]
 800d002:	429a      	cmp	r2, r3
 800d004:	bfa8      	it	ge
 800d006:	463b      	movge	r3, r7
 800d008:	4689      	mov	r9, r1
 800d00a:	bfa4      	itt	ge
 800d00c:	460f      	movge	r7, r1
 800d00e:	4699      	movge	r9, r3
 800d010:	693d      	ldr	r5, [r7, #16]
 800d012:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800d016:	68bb      	ldr	r3, [r7, #8]
 800d018:	6879      	ldr	r1, [r7, #4]
 800d01a:	eb05 060a 	add.w	r6, r5, sl
 800d01e:	42b3      	cmp	r3, r6
 800d020:	b085      	sub	sp, #20
 800d022:	bfb8      	it	lt
 800d024:	3101      	addlt	r1, #1
 800d026:	f7ff fe93 	bl	800cd50 <_Balloc>
 800d02a:	b930      	cbnz	r0, 800d03a <__multiply+0x42>
 800d02c:	4602      	mov	r2, r0
 800d02e:	4b41      	ldr	r3, [pc, #260]	@ (800d134 <__multiply+0x13c>)
 800d030:	4841      	ldr	r0, [pc, #260]	@ (800d138 <__multiply+0x140>)
 800d032:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800d036:	f7fe ff15 	bl	800be64 <__assert_func>
 800d03a:	f100 0414 	add.w	r4, r0, #20
 800d03e:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800d042:	4623      	mov	r3, r4
 800d044:	2200      	movs	r2, #0
 800d046:	4573      	cmp	r3, lr
 800d048:	d320      	bcc.n	800d08c <__multiply+0x94>
 800d04a:	f107 0814 	add.w	r8, r7, #20
 800d04e:	f109 0114 	add.w	r1, r9, #20
 800d052:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800d056:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800d05a:	9302      	str	r3, [sp, #8]
 800d05c:	1beb      	subs	r3, r5, r7
 800d05e:	3b15      	subs	r3, #21
 800d060:	f023 0303 	bic.w	r3, r3, #3
 800d064:	3304      	adds	r3, #4
 800d066:	3715      	adds	r7, #21
 800d068:	42bd      	cmp	r5, r7
 800d06a:	bf38      	it	cc
 800d06c:	2304      	movcc	r3, #4
 800d06e:	9301      	str	r3, [sp, #4]
 800d070:	9b02      	ldr	r3, [sp, #8]
 800d072:	9103      	str	r1, [sp, #12]
 800d074:	428b      	cmp	r3, r1
 800d076:	d80c      	bhi.n	800d092 <__multiply+0x9a>
 800d078:	2e00      	cmp	r6, #0
 800d07a:	dd03      	ble.n	800d084 <__multiply+0x8c>
 800d07c:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800d080:	2b00      	cmp	r3, #0
 800d082:	d055      	beq.n	800d130 <__multiply+0x138>
 800d084:	6106      	str	r6, [r0, #16]
 800d086:	b005      	add	sp, #20
 800d088:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d08c:	f843 2b04 	str.w	r2, [r3], #4
 800d090:	e7d9      	b.n	800d046 <__multiply+0x4e>
 800d092:	f8b1 a000 	ldrh.w	sl, [r1]
 800d096:	f1ba 0f00 	cmp.w	sl, #0
 800d09a:	d01f      	beq.n	800d0dc <__multiply+0xe4>
 800d09c:	46c4      	mov	ip, r8
 800d09e:	46a1      	mov	r9, r4
 800d0a0:	2700      	movs	r7, #0
 800d0a2:	f85c 2b04 	ldr.w	r2, [ip], #4
 800d0a6:	f8d9 3000 	ldr.w	r3, [r9]
 800d0aa:	fa1f fb82 	uxth.w	fp, r2
 800d0ae:	b29b      	uxth	r3, r3
 800d0b0:	fb0a 330b 	mla	r3, sl, fp, r3
 800d0b4:	443b      	add	r3, r7
 800d0b6:	f8d9 7000 	ldr.w	r7, [r9]
 800d0ba:	0c12      	lsrs	r2, r2, #16
 800d0bc:	0c3f      	lsrs	r7, r7, #16
 800d0be:	fb0a 7202 	mla	r2, sl, r2, r7
 800d0c2:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800d0c6:	b29b      	uxth	r3, r3
 800d0c8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d0cc:	4565      	cmp	r5, ip
 800d0ce:	f849 3b04 	str.w	r3, [r9], #4
 800d0d2:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800d0d6:	d8e4      	bhi.n	800d0a2 <__multiply+0xaa>
 800d0d8:	9b01      	ldr	r3, [sp, #4]
 800d0da:	50e7      	str	r7, [r4, r3]
 800d0dc:	9b03      	ldr	r3, [sp, #12]
 800d0de:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800d0e2:	3104      	adds	r1, #4
 800d0e4:	f1b9 0f00 	cmp.w	r9, #0
 800d0e8:	d020      	beq.n	800d12c <__multiply+0x134>
 800d0ea:	6823      	ldr	r3, [r4, #0]
 800d0ec:	4647      	mov	r7, r8
 800d0ee:	46a4      	mov	ip, r4
 800d0f0:	f04f 0a00 	mov.w	sl, #0
 800d0f4:	f8b7 b000 	ldrh.w	fp, [r7]
 800d0f8:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800d0fc:	fb09 220b 	mla	r2, r9, fp, r2
 800d100:	4452      	add	r2, sl
 800d102:	b29b      	uxth	r3, r3
 800d104:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d108:	f84c 3b04 	str.w	r3, [ip], #4
 800d10c:	f857 3b04 	ldr.w	r3, [r7], #4
 800d110:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800d114:	f8bc 3000 	ldrh.w	r3, [ip]
 800d118:	fb09 330a 	mla	r3, r9, sl, r3
 800d11c:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 800d120:	42bd      	cmp	r5, r7
 800d122:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800d126:	d8e5      	bhi.n	800d0f4 <__multiply+0xfc>
 800d128:	9a01      	ldr	r2, [sp, #4]
 800d12a:	50a3      	str	r3, [r4, r2]
 800d12c:	3404      	adds	r4, #4
 800d12e:	e79f      	b.n	800d070 <__multiply+0x78>
 800d130:	3e01      	subs	r6, #1
 800d132:	e7a1      	b.n	800d078 <__multiply+0x80>
 800d134:	08010c09 	.word	0x08010c09
 800d138:	08010c1a 	.word	0x08010c1a

0800d13c <__pow5mult>:
 800d13c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d140:	4615      	mov	r5, r2
 800d142:	f012 0203 	ands.w	r2, r2, #3
 800d146:	4607      	mov	r7, r0
 800d148:	460e      	mov	r6, r1
 800d14a:	d007      	beq.n	800d15c <__pow5mult+0x20>
 800d14c:	4c25      	ldr	r4, [pc, #148]	@ (800d1e4 <__pow5mult+0xa8>)
 800d14e:	3a01      	subs	r2, #1
 800d150:	2300      	movs	r3, #0
 800d152:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800d156:	f7ff fe5d 	bl	800ce14 <__multadd>
 800d15a:	4606      	mov	r6, r0
 800d15c:	10ad      	asrs	r5, r5, #2
 800d15e:	d03d      	beq.n	800d1dc <__pow5mult+0xa0>
 800d160:	69fc      	ldr	r4, [r7, #28]
 800d162:	b97c      	cbnz	r4, 800d184 <__pow5mult+0x48>
 800d164:	2010      	movs	r0, #16
 800d166:	f7ff fd3d 	bl	800cbe4 <malloc>
 800d16a:	4602      	mov	r2, r0
 800d16c:	61f8      	str	r0, [r7, #28]
 800d16e:	b928      	cbnz	r0, 800d17c <__pow5mult+0x40>
 800d170:	4b1d      	ldr	r3, [pc, #116]	@ (800d1e8 <__pow5mult+0xac>)
 800d172:	481e      	ldr	r0, [pc, #120]	@ (800d1ec <__pow5mult+0xb0>)
 800d174:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800d178:	f7fe fe74 	bl	800be64 <__assert_func>
 800d17c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800d180:	6004      	str	r4, [r0, #0]
 800d182:	60c4      	str	r4, [r0, #12]
 800d184:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800d188:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800d18c:	b94c      	cbnz	r4, 800d1a2 <__pow5mult+0x66>
 800d18e:	f240 2171 	movw	r1, #625	@ 0x271
 800d192:	4638      	mov	r0, r7
 800d194:	f7ff ff1a 	bl	800cfcc <__i2b>
 800d198:	2300      	movs	r3, #0
 800d19a:	f8c8 0008 	str.w	r0, [r8, #8]
 800d19e:	4604      	mov	r4, r0
 800d1a0:	6003      	str	r3, [r0, #0]
 800d1a2:	f04f 0900 	mov.w	r9, #0
 800d1a6:	07eb      	lsls	r3, r5, #31
 800d1a8:	d50a      	bpl.n	800d1c0 <__pow5mult+0x84>
 800d1aa:	4631      	mov	r1, r6
 800d1ac:	4622      	mov	r2, r4
 800d1ae:	4638      	mov	r0, r7
 800d1b0:	f7ff ff22 	bl	800cff8 <__multiply>
 800d1b4:	4631      	mov	r1, r6
 800d1b6:	4680      	mov	r8, r0
 800d1b8:	4638      	mov	r0, r7
 800d1ba:	f7ff fe09 	bl	800cdd0 <_Bfree>
 800d1be:	4646      	mov	r6, r8
 800d1c0:	106d      	asrs	r5, r5, #1
 800d1c2:	d00b      	beq.n	800d1dc <__pow5mult+0xa0>
 800d1c4:	6820      	ldr	r0, [r4, #0]
 800d1c6:	b938      	cbnz	r0, 800d1d8 <__pow5mult+0x9c>
 800d1c8:	4622      	mov	r2, r4
 800d1ca:	4621      	mov	r1, r4
 800d1cc:	4638      	mov	r0, r7
 800d1ce:	f7ff ff13 	bl	800cff8 <__multiply>
 800d1d2:	6020      	str	r0, [r4, #0]
 800d1d4:	f8c0 9000 	str.w	r9, [r0]
 800d1d8:	4604      	mov	r4, r0
 800d1da:	e7e4      	b.n	800d1a6 <__pow5mult+0x6a>
 800d1dc:	4630      	mov	r0, r6
 800d1de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d1e2:	bf00      	nop
 800d1e4:	08010cf0 	.word	0x08010cf0
 800d1e8:	08010b9a 	.word	0x08010b9a
 800d1ec:	08010c1a 	.word	0x08010c1a

0800d1f0 <__lshift>:
 800d1f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d1f4:	460c      	mov	r4, r1
 800d1f6:	6849      	ldr	r1, [r1, #4]
 800d1f8:	6923      	ldr	r3, [r4, #16]
 800d1fa:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800d1fe:	68a3      	ldr	r3, [r4, #8]
 800d200:	4607      	mov	r7, r0
 800d202:	4691      	mov	r9, r2
 800d204:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800d208:	f108 0601 	add.w	r6, r8, #1
 800d20c:	42b3      	cmp	r3, r6
 800d20e:	db0b      	blt.n	800d228 <__lshift+0x38>
 800d210:	4638      	mov	r0, r7
 800d212:	f7ff fd9d 	bl	800cd50 <_Balloc>
 800d216:	4605      	mov	r5, r0
 800d218:	b948      	cbnz	r0, 800d22e <__lshift+0x3e>
 800d21a:	4602      	mov	r2, r0
 800d21c:	4b28      	ldr	r3, [pc, #160]	@ (800d2c0 <__lshift+0xd0>)
 800d21e:	4829      	ldr	r0, [pc, #164]	@ (800d2c4 <__lshift+0xd4>)
 800d220:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800d224:	f7fe fe1e 	bl	800be64 <__assert_func>
 800d228:	3101      	adds	r1, #1
 800d22a:	005b      	lsls	r3, r3, #1
 800d22c:	e7ee      	b.n	800d20c <__lshift+0x1c>
 800d22e:	2300      	movs	r3, #0
 800d230:	f100 0114 	add.w	r1, r0, #20
 800d234:	f100 0210 	add.w	r2, r0, #16
 800d238:	4618      	mov	r0, r3
 800d23a:	4553      	cmp	r3, sl
 800d23c:	db33      	blt.n	800d2a6 <__lshift+0xb6>
 800d23e:	6920      	ldr	r0, [r4, #16]
 800d240:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800d244:	f104 0314 	add.w	r3, r4, #20
 800d248:	f019 091f 	ands.w	r9, r9, #31
 800d24c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800d250:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800d254:	d02b      	beq.n	800d2ae <__lshift+0xbe>
 800d256:	f1c9 0e20 	rsb	lr, r9, #32
 800d25a:	468a      	mov	sl, r1
 800d25c:	2200      	movs	r2, #0
 800d25e:	6818      	ldr	r0, [r3, #0]
 800d260:	fa00 f009 	lsl.w	r0, r0, r9
 800d264:	4310      	orrs	r0, r2
 800d266:	f84a 0b04 	str.w	r0, [sl], #4
 800d26a:	f853 2b04 	ldr.w	r2, [r3], #4
 800d26e:	459c      	cmp	ip, r3
 800d270:	fa22 f20e 	lsr.w	r2, r2, lr
 800d274:	d8f3      	bhi.n	800d25e <__lshift+0x6e>
 800d276:	ebac 0304 	sub.w	r3, ip, r4
 800d27a:	3b15      	subs	r3, #21
 800d27c:	f023 0303 	bic.w	r3, r3, #3
 800d280:	3304      	adds	r3, #4
 800d282:	f104 0015 	add.w	r0, r4, #21
 800d286:	4560      	cmp	r0, ip
 800d288:	bf88      	it	hi
 800d28a:	2304      	movhi	r3, #4
 800d28c:	50ca      	str	r2, [r1, r3]
 800d28e:	b10a      	cbz	r2, 800d294 <__lshift+0xa4>
 800d290:	f108 0602 	add.w	r6, r8, #2
 800d294:	3e01      	subs	r6, #1
 800d296:	4638      	mov	r0, r7
 800d298:	612e      	str	r6, [r5, #16]
 800d29a:	4621      	mov	r1, r4
 800d29c:	f7ff fd98 	bl	800cdd0 <_Bfree>
 800d2a0:	4628      	mov	r0, r5
 800d2a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d2a6:	f842 0f04 	str.w	r0, [r2, #4]!
 800d2aa:	3301      	adds	r3, #1
 800d2ac:	e7c5      	b.n	800d23a <__lshift+0x4a>
 800d2ae:	3904      	subs	r1, #4
 800d2b0:	f853 2b04 	ldr.w	r2, [r3], #4
 800d2b4:	f841 2f04 	str.w	r2, [r1, #4]!
 800d2b8:	459c      	cmp	ip, r3
 800d2ba:	d8f9      	bhi.n	800d2b0 <__lshift+0xc0>
 800d2bc:	e7ea      	b.n	800d294 <__lshift+0xa4>
 800d2be:	bf00      	nop
 800d2c0:	08010c09 	.word	0x08010c09
 800d2c4:	08010c1a 	.word	0x08010c1a

0800d2c8 <__mcmp>:
 800d2c8:	690a      	ldr	r2, [r1, #16]
 800d2ca:	4603      	mov	r3, r0
 800d2cc:	6900      	ldr	r0, [r0, #16]
 800d2ce:	1a80      	subs	r0, r0, r2
 800d2d0:	b530      	push	{r4, r5, lr}
 800d2d2:	d10e      	bne.n	800d2f2 <__mcmp+0x2a>
 800d2d4:	3314      	adds	r3, #20
 800d2d6:	3114      	adds	r1, #20
 800d2d8:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800d2dc:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800d2e0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800d2e4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800d2e8:	4295      	cmp	r5, r2
 800d2ea:	d003      	beq.n	800d2f4 <__mcmp+0x2c>
 800d2ec:	d205      	bcs.n	800d2fa <__mcmp+0x32>
 800d2ee:	f04f 30ff 	mov.w	r0, #4294967295
 800d2f2:	bd30      	pop	{r4, r5, pc}
 800d2f4:	42a3      	cmp	r3, r4
 800d2f6:	d3f3      	bcc.n	800d2e0 <__mcmp+0x18>
 800d2f8:	e7fb      	b.n	800d2f2 <__mcmp+0x2a>
 800d2fa:	2001      	movs	r0, #1
 800d2fc:	e7f9      	b.n	800d2f2 <__mcmp+0x2a>
	...

0800d300 <__mdiff>:
 800d300:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d304:	4689      	mov	r9, r1
 800d306:	4606      	mov	r6, r0
 800d308:	4611      	mov	r1, r2
 800d30a:	4648      	mov	r0, r9
 800d30c:	4614      	mov	r4, r2
 800d30e:	f7ff ffdb 	bl	800d2c8 <__mcmp>
 800d312:	1e05      	subs	r5, r0, #0
 800d314:	d112      	bne.n	800d33c <__mdiff+0x3c>
 800d316:	4629      	mov	r1, r5
 800d318:	4630      	mov	r0, r6
 800d31a:	f7ff fd19 	bl	800cd50 <_Balloc>
 800d31e:	4602      	mov	r2, r0
 800d320:	b928      	cbnz	r0, 800d32e <__mdiff+0x2e>
 800d322:	4b3f      	ldr	r3, [pc, #252]	@ (800d420 <__mdiff+0x120>)
 800d324:	f240 2137 	movw	r1, #567	@ 0x237
 800d328:	483e      	ldr	r0, [pc, #248]	@ (800d424 <__mdiff+0x124>)
 800d32a:	f7fe fd9b 	bl	800be64 <__assert_func>
 800d32e:	2301      	movs	r3, #1
 800d330:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800d334:	4610      	mov	r0, r2
 800d336:	b003      	add	sp, #12
 800d338:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d33c:	bfbc      	itt	lt
 800d33e:	464b      	movlt	r3, r9
 800d340:	46a1      	movlt	r9, r4
 800d342:	4630      	mov	r0, r6
 800d344:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800d348:	bfba      	itte	lt
 800d34a:	461c      	movlt	r4, r3
 800d34c:	2501      	movlt	r5, #1
 800d34e:	2500      	movge	r5, #0
 800d350:	f7ff fcfe 	bl	800cd50 <_Balloc>
 800d354:	4602      	mov	r2, r0
 800d356:	b918      	cbnz	r0, 800d360 <__mdiff+0x60>
 800d358:	4b31      	ldr	r3, [pc, #196]	@ (800d420 <__mdiff+0x120>)
 800d35a:	f240 2145 	movw	r1, #581	@ 0x245
 800d35e:	e7e3      	b.n	800d328 <__mdiff+0x28>
 800d360:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800d364:	6926      	ldr	r6, [r4, #16]
 800d366:	60c5      	str	r5, [r0, #12]
 800d368:	f109 0310 	add.w	r3, r9, #16
 800d36c:	f109 0514 	add.w	r5, r9, #20
 800d370:	f104 0e14 	add.w	lr, r4, #20
 800d374:	f100 0b14 	add.w	fp, r0, #20
 800d378:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800d37c:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800d380:	9301      	str	r3, [sp, #4]
 800d382:	46d9      	mov	r9, fp
 800d384:	f04f 0c00 	mov.w	ip, #0
 800d388:	9b01      	ldr	r3, [sp, #4]
 800d38a:	f85e 0b04 	ldr.w	r0, [lr], #4
 800d38e:	f853 af04 	ldr.w	sl, [r3, #4]!
 800d392:	9301      	str	r3, [sp, #4]
 800d394:	fa1f f38a 	uxth.w	r3, sl
 800d398:	4619      	mov	r1, r3
 800d39a:	b283      	uxth	r3, r0
 800d39c:	1acb      	subs	r3, r1, r3
 800d39e:	0c00      	lsrs	r0, r0, #16
 800d3a0:	4463      	add	r3, ip
 800d3a2:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800d3a6:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800d3aa:	b29b      	uxth	r3, r3
 800d3ac:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800d3b0:	4576      	cmp	r6, lr
 800d3b2:	f849 3b04 	str.w	r3, [r9], #4
 800d3b6:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800d3ba:	d8e5      	bhi.n	800d388 <__mdiff+0x88>
 800d3bc:	1b33      	subs	r3, r6, r4
 800d3be:	3b15      	subs	r3, #21
 800d3c0:	f023 0303 	bic.w	r3, r3, #3
 800d3c4:	3415      	adds	r4, #21
 800d3c6:	3304      	adds	r3, #4
 800d3c8:	42a6      	cmp	r6, r4
 800d3ca:	bf38      	it	cc
 800d3cc:	2304      	movcc	r3, #4
 800d3ce:	441d      	add	r5, r3
 800d3d0:	445b      	add	r3, fp
 800d3d2:	461e      	mov	r6, r3
 800d3d4:	462c      	mov	r4, r5
 800d3d6:	4544      	cmp	r4, r8
 800d3d8:	d30e      	bcc.n	800d3f8 <__mdiff+0xf8>
 800d3da:	f108 0103 	add.w	r1, r8, #3
 800d3de:	1b49      	subs	r1, r1, r5
 800d3e0:	f021 0103 	bic.w	r1, r1, #3
 800d3e4:	3d03      	subs	r5, #3
 800d3e6:	45a8      	cmp	r8, r5
 800d3e8:	bf38      	it	cc
 800d3ea:	2100      	movcc	r1, #0
 800d3ec:	440b      	add	r3, r1
 800d3ee:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800d3f2:	b191      	cbz	r1, 800d41a <__mdiff+0x11a>
 800d3f4:	6117      	str	r7, [r2, #16]
 800d3f6:	e79d      	b.n	800d334 <__mdiff+0x34>
 800d3f8:	f854 1b04 	ldr.w	r1, [r4], #4
 800d3fc:	46e6      	mov	lr, ip
 800d3fe:	0c08      	lsrs	r0, r1, #16
 800d400:	fa1c fc81 	uxtah	ip, ip, r1
 800d404:	4471      	add	r1, lr
 800d406:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800d40a:	b289      	uxth	r1, r1
 800d40c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800d410:	f846 1b04 	str.w	r1, [r6], #4
 800d414:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800d418:	e7dd      	b.n	800d3d6 <__mdiff+0xd6>
 800d41a:	3f01      	subs	r7, #1
 800d41c:	e7e7      	b.n	800d3ee <__mdiff+0xee>
 800d41e:	bf00      	nop
 800d420:	08010c09 	.word	0x08010c09
 800d424:	08010c1a 	.word	0x08010c1a

0800d428 <__ulp>:
 800d428:	b082      	sub	sp, #8
 800d42a:	ed8d 0b00 	vstr	d0, [sp]
 800d42e:	9a01      	ldr	r2, [sp, #4]
 800d430:	4b0f      	ldr	r3, [pc, #60]	@ (800d470 <__ulp+0x48>)
 800d432:	4013      	ands	r3, r2
 800d434:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800d438:	2b00      	cmp	r3, #0
 800d43a:	dc08      	bgt.n	800d44e <__ulp+0x26>
 800d43c:	425b      	negs	r3, r3
 800d43e:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800d442:	ea4f 5223 	mov.w	r2, r3, asr #20
 800d446:	da04      	bge.n	800d452 <__ulp+0x2a>
 800d448:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800d44c:	4113      	asrs	r3, r2
 800d44e:	2200      	movs	r2, #0
 800d450:	e008      	b.n	800d464 <__ulp+0x3c>
 800d452:	f1a2 0314 	sub.w	r3, r2, #20
 800d456:	2b1e      	cmp	r3, #30
 800d458:	bfda      	itte	le
 800d45a:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800d45e:	40da      	lsrle	r2, r3
 800d460:	2201      	movgt	r2, #1
 800d462:	2300      	movs	r3, #0
 800d464:	4619      	mov	r1, r3
 800d466:	4610      	mov	r0, r2
 800d468:	ec41 0b10 	vmov	d0, r0, r1
 800d46c:	b002      	add	sp, #8
 800d46e:	4770      	bx	lr
 800d470:	7ff00000 	.word	0x7ff00000

0800d474 <__b2d>:
 800d474:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d478:	6906      	ldr	r6, [r0, #16]
 800d47a:	f100 0814 	add.w	r8, r0, #20
 800d47e:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800d482:	1f37      	subs	r7, r6, #4
 800d484:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800d488:	4610      	mov	r0, r2
 800d48a:	f7ff fd53 	bl	800cf34 <__hi0bits>
 800d48e:	f1c0 0320 	rsb	r3, r0, #32
 800d492:	280a      	cmp	r0, #10
 800d494:	600b      	str	r3, [r1, #0]
 800d496:	491b      	ldr	r1, [pc, #108]	@ (800d504 <__b2d+0x90>)
 800d498:	dc15      	bgt.n	800d4c6 <__b2d+0x52>
 800d49a:	f1c0 0c0b 	rsb	ip, r0, #11
 800d49e:	fa22 f30c 	lsr.w	r3, r2, ip
 800d4a2:	45b8      	cmp	r8, r7
 800d4a4:	ea43 0501 	orr.w	r5, r3, r1
 800d4a8:	bf34      	ite	cc
 800d4aa:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800d4ae:	2300      	movcs	r3, #0
 800d4b0:	3015      	adds	r0, #21
 800d4b2:	fa02 f000 	lsl.w	r0, r2, r0
 800d4b6:	fa23 f30c 	lsr.w	r3, r3, ip
 800d4ba:	4303      	orrs	r3, r0
 800d4bc:	461c      	mov	r4, r3
 800d4be:	ec45 4b10 	vmov	d0, r4, r5
 800d4c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d4c6:	45b8      	cmp	r8, r7
 800d4c8:	bf3a      	itte	cc
 800d4ca:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800d4ce:	f1a6 0708 	subcc.w	r7, r6, #8
 800d4d2:	2300      	movcs	r3, #0
 800d4d4:	380b      	subs	r0, #11
 800d4d6:	d012      	beq.n	800d4fe <__b2d+0x8a>
 800d4d8:	f1c0 0120 	rsb	r1, r0, #32
 800d4dc:	fa23 f401 	lsr.w	r4, r3, r1
 800d4e0:	4082      	lsls	r2, r0
 800d4e2:	4322      	orrs	r2, r4
 800d4e4:	4547      	cmp	r7, r8
 800d4e6:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800d4ea:	bf8c      	ite	hi
 800d4ec:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800d4f0:	2200      	movls	r2, #0
 800d4f2:	4083      	lsls	r3, r0
 800d4f4:	40ca      	lsrs	r2, r1
 800d4f6:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800d4fa:	4313      	orrs	r3, r2
 800d4fc:	e7de      	b.n	800d4bc <__b2d+0x48>
 800d4fe:	ea42 0501 	orr.w	r5, r2, r1
 800d502:	e7db      	b.n	800d4bc <__b2d+0x48>
 800d504:	3ff00000 	.word	0x3ff00000

0800d508 <__d2b>:
 800d508:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800d50c:	460f      	mov	r7, r1
 800d50e:	2101      	movs	r1, #1
 800d510:	ec59 8b10 	vmov	r8, r9, d0
 800d514:	4616      	mov	r6, r2
 800d516:	f7ff fc1b 	bl	800cd50 <_Balloc>
 800d51a:	4604      	mov	r4, r0
 800d51c:	b930      	cbnz	r0, 800d52c <__d2b+0x24>
 800d51e:	4602      	mov	r2, r0
 800d520:	4b23      	ldr	r3, [pc, #140]	@ (800d5b0 <__d2b+0xa8>)
 800d522:	4824      	ldr	r0, [pc, #144]	@ (800d5b4 <__d2b+0xac>)
 800d524:	f240 310f 	movw	r1, #783	@ 0x30f
 800d528:	f7fe fc9c 	bl	800be64 <__assert_func>
 800d52c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800d530:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800d534:	b10d      	cbz	r5, 800d53a <__d2b+0x32>
 800d536:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800d53a:	9301      	str	r3, [sp, #4]
 800d53c:	f1b8 0300 	subs.w	r3, r8, #0
 800d540:	d023      	beq.n	800d58a <__d2b+0x82>
 800d542:	4668      	mov	r0, sp
 800d544:	9300      	str	r3, [sp, #0]
 800d546:	f7ff fd14 	bl	800cf72 <__lo0bits>
 800d54a:	e9dd 1200 	ldrd	r1, r2, [sp]
 800d54e:	b1d0      	cbz	r0, 800d586 <__d2b+0x7e>
 800d550:	f1c0 0320 	rsb	r3, r0, #32
 800d554:	fa02 f303 	lsl.w	r3, r2, r3
 800d558:	430b      	orrs	r3, r1
 800d55a:	40c2      	lsrs	r2, r0
 800d55c:	6163      	str	r3, [r4, #20]
 800d55e:	9201      	str	r2, [sp, #4]
 800d560:	9b01      	ldr	r3, [sp, #4]
 800d562:	61a3      	str	r3, [r4, #24]
 800d564:	2b00      	cmp	r3, #0
 800d566:	bf0c      	ite	eq
 800d568:	2201      	moveq	r2, #1
 800d56a:	2202      	movne	r2, #2
 800d56c:	6122      	str	r2, [r4, #16]
 800d56e:	b1a5      	cbz	r5, 800d59a <__d2b+0x92>
 800d570:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800d574:	4405      	add	r5, r0
 800d576:	603d      	str	r5, [r7, #0]
 800d578:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800d57c:	6030      	str	r0, [r6, #0]
 800d57e:	4620      	mov	r0, r4
 800d580:	b003      	add	sp, #12
 800d582:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d586:	6161      	str	r1, [r4, #20]
 800d588:	e7ea      	b.n	800d560 <__d2b+0x58>
 800d58a:	a801      	add	r0, sp, #4
 800d58c:	f7ff fcf1 	bl	800cf72 <__lo0bits>
 800d590:	9b01      	ldr	r3, [sp, #4]
 800d592:	6163      	str	r3, [r4, #20]
 800d594:	3020      	adds	r0, #32
 800d596:	2201      	movs	r2, #1
 800d598:	e7e8      	b.n	800d56c <__d2b+0x64>
 800d59a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800d59e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800d5a2:	6038      	str	r0, [r7, #0]
 800d5a4:	6918      	ldr	r0, [r3, #16]
 800d5a6:	f7ff fcc5 	bl	800cf34 <__hi0bits>
 800d5aa:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800d5ae:	e7e5      	b.n	800d57c <__d2b+0x74>
 800d5b0:	08010c09 	.word	0x08010c09
 800d5b4:	08010c1a 	.word	0x08010c1a

0800d5b8 <__ratio>:
 800d5b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d5bc:	b085      	sub	sp, #20
 800d5be:	e9cd 1000 	strd	r1, r0, [sp]
 800d5c2:	a902      	add	r1, sp, #8
 800d5c4:	f7ff ff56 	bl	800d474 <__b2d>
 800d5c8:	9800      	ldr	r0, [sp, #0]
 800d5ca:	a903      	add	r1, sp, #12
 800d5cc:	ec55 4b10 	vmov	r4, r5, d0
 800d5d0:	f7ff ff50 	bl	800d474 <__b2d>
 800d5d4:	9b01      	ldr	r3, [sp, #4]
 800d5d6:	6919      	ldr	r1, [r3, #16]
 800d5d8:	9b00      	ldr	r3, [sp, #0]
 800d5da:	691b      	ldr	r3, [r3, #16]
 800d5dc:	1ac9      	subs	r1, r1, r3
 800d5de:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800d5e2:	1a9b      	subs	r3, r3, r2
 800d5e4:	ec5b ab10 	vmov	sl, fp, d0
 800d5e8:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800d5ec:	2b00      	cmp	r3, #0
 800d5ee:	bfce      	itee	gt
 800d5f0:	462a      	movgt	r2, r5
 800d5f2:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800d5f6:	465a      	movle	r2, fp
 800d5f8:	462f      	mov	r7, r5
 800d5fa:	46d9      	mov	r9, fp
 800d5fc:	bfcc      	ite	gt
 800d5fe:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800d602:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800d606:	464b      	mov	r3, r9
 800d608:	4652      	mov	r2, sl
 800d60a:	4620      	mov	r0, r4
 800d60c:	4639      	mov	r1, r7
 800d60e:	f7f3 f925 	bl	800085c <__aeabi_ddiv>
 800d612:	ec41 0b10 	vmov	d0, r0, r1
 800d616:	b005      	add	sp, #20
 800d618:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800d61c <__copybits>:
 800d61c:	3901      	subs	r1, #1
 800d61e:	b570      	push	{r4, r5, r6, lr}
 800d620:	1149      	asrs	r1, r1, #5
 800d622:	6914      	ldr	r4, [r2, #16]
 800d624:	3101      	adds	r1, #1
 800d626:	f102 0314 	add.w	r3, r2, #20
 800d62a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800d62e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800d632:	1f05      	subs	r5, r0, #4
 800d634:	42a3      	cmp	r3, r4
 800d636:	d30c      	bcc.n	800d652 <__copybits+0x36>
 800d638:	1aa3      	subs	r3, r4, r2
 800d63a:	3b11      	subs	r3, #17
 800d63c:	f023 0303 	bic.w	r3, r3, #3
 800d640:	3211      	adds	r2, #17
 800d642:	42a2      	cmp	r2, r4
 800d644:	bf88      	it	hi
 800d646:	2300      	movhi	r3, #0
 800d648:	4418      	add	r0, r3
 800d64a:	2300      	movs	r3, #0
 800d64c:	4288      	cmp	r0, r1
 800d64e:	d305      	bcc.n	800d65c <__copybits+0x40>
 800d650:	bd70      	pop	{r4, r5, r6, pc}
 800d652:	f853 6b04 	ldr.w	r6, [r3], #4
 800d656:	f845 6f04 	str.w	r6, [r5, #4]!
 800d65a:	e7eb      	b.n	800d634 <__copybits+0x18>
 800d65c:	f840 3b04 	str.w	r3, [r0], #4
 800d660:	e7f4      	b.n	800d64c <__copybits+0x30>

0800d662 <__any_on>:
 800d662:	f100 0214 	add.w	r2, r0, #20
 800d666:	6900      	ldr	r0, [r0, #16]
 800d668:	114b      	asrs	r3, r1, #5
 800d66a:	4298      	cmp	r0, r3
 800d66c:	b510      	push	{r4, lr}
 800d66e:	db11      	blt.n	800d694 <__any_on+0x32>
 800d670:	dd0a      	ble.n	800d688 <__any_on+0x26>
 800d672:	f011 011f 	ands.w	r1, r1, #31
 800d676:	d007      	beq.n	800d688 <__any_on+0x26>
 800d678:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800d67c:	fa24 f001 	lsr.w	r0, r4, r1
 800d680:	fa00 f101 	lsl.w	r1, r0, r1
 800d684:	428c      	cmp	r4, r1
 800d686:	d10b      	bne.n	800d6a0 <__any_on+0x3e>
 800d688:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800d68c:	4293      	cmp	r3, r2
 800d68e:	d803      	bhi.n	800d698 <__any_on+0x36>
 800d690:	2000      	movs	r0, #0
 800d692:	bd10      	pop	{r4, pc}
 800d694:	4603      	mov	r3, r0
 800d696:	e7f7      	b.n	800d688 <__any_on+0x26>
 800d698:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800d69c:	2900      	cmp	r1, #0
 800d69e:	d0f5      	beq.n	800d68c <__any_on+0x2a>
 800d6a0:	2001      	movs	r0, #1
 800d6a2:	e7f6      	b.n	800d692 <__any_on+0x30>

0800d6a4 <sulp>:
 800d6a4:	b570      	push	{r4, r5, r6, lr}
 800d6a6:	4604      	mov	r4, r0
 800d6a8:	460d      	mov	r5, r1
 800d6aa:	ec45 4b10 	vmov	d0, r4, r5
 800d6ae:	4616      	mov	r6, r2
 800d6b0:	f7ff feba 	bl	800d428 <__ulp>
 800d6b4:	ec51 0b10 	vmov	r0, r1, d0
 800d6b8:	b17e      	cbz	r6, 800d6da <sulp+0x36>
 800d6ba:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800d6be:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800d6c2:	2b00      	cmp	r3, #0
 800d6c4:	dd09      	ble.n	800d6da <sulp+0x36>
 800d6c6:	051b      	lsls	r3, r3, #20
 800d6c8:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800d6cc:	2400      	movs	r4, #0
 800d6ce:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800d6d2:	4622      	mov	r2, r4
 800d6d4:	462b      	mov	r3, r5
 800d6d6:	f7f2 ff97 	bl	8000608 <__aeabi_dmul>
 800d6da:	ec41 0b10 	vmov	d0, r0, r1
 800d6de:	bd70      	pop	{r4, r5, r6, pc}

0800d6e0 <_strtod_l>:
 800d6e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d6e4:	b09f      	sub	sp, #124	@ 0x7c
 800d6e6:	460c      	mov	r4, r1
 800d6e8:	9217      	str	r2, [sp, #92]	@ 0x5c
 800d6ea:	2200      	movs	r2, #0
 800d6ec:	921a      	str	r2, [sp, #104]	@ 0x68
 800d6ee:	9005      	str	r0, [sp, #20]
 800d6f0:	f04f 0a00 	mov.w	sl, #0
 800d6f4:	f04f 0b00 	mov.w	fp, #0
 800d6f8:	460a      	mov	r2, r1
 800d6fa:	9219      	str	r2, [sp, #100]	@ 0x64
 800d6fc:	7811      	ldrb	r1, [r2, #0]
 800d6fe:	292b      	cmp	r1, #43	@ 0x2b
 800d700:	d04a      	beq.n	800d798 <_strtod_l+0xb8>
 800d702:	d838      	bhi.n	800d776 <_strtod_l+0x96>
 800d704:	290d      	cmp	r1, #13
 800d706:	d832      	bhi.n	800d76e <_strtod_l+0x8e>
 800d708:	2908      	cmp	r1, #8
 800d70a:	d832      	bhi.n	800d772 <_strtod_l+0x92>
 800d70c:	2900      	cmp	r1, #0
 800d70e:	d03b      	beq.n	800d788 <_strtod_l+0xa8>
 800d710:	2200      	movs	r2, #0
 800d712:	920e      	str	r2, [sp, #56]	@ 0x38
 800d714:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800d716:	782a      	ldrb	r2, [r5, #0]
 800d718:	2a30      	cmp	r2, #48	@ 0x30
 800d71a:	f040 80b2 	bne.w	800d882 <_strtod_l+0x1a2>
 800d71e:	786a      	ldrb	r2, [r5, #1]
 800d720:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800d724:	2a58      	cmp	r2, #88	@ 0x58
 800d726:	d16e      	bne.n	800d806 <_strtod_l+0x126>
 800d728:	9302      	str	r3, [sp, #8]
 800d72a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d72c:	9301      	str	r3, [sp, #4]
 800d72e:	ab1a      	add	r3, sp, #104	@ 0x68
 800d730:	9300      	str	r3, [sp, #0]
 800d732:	4a8f      	ldr	r2, [pc, #572]	@ (800d970 <_strtod_l+0x290>)
 800d734:	9805      	ldr	r0, [sp, #20]
 800d736:	ab1b      	add	r3, sp, #108	@ 0x6c
 800d738:	a919      	add	r1, sp, #100	@ 0x64
 800d73a:	f001 fadb 	bl	800ecf4 <__gethex>
 800d73e:	f010 060f 	ands.w	r6, r0, #15
 800d742:	4604      	mov	r4, r0
 800d744:	d005      	beq.n	800d752 <_strtod_l+0x72>
 800d746:	2e06      	cmp	r6, #6
 800d748:	d128      	bne.n	800d79c <_strtod_l+0xbc>
 800d74a:	3501      	adds	r5, #1
 800d74c:	2300      	movs	r3, #0
 800d74e:	9519      	str	r5, [sp, #100]	@ 0x64
 800d750:	930e      	str	r3, [sp, #56]	@ 0x38
 800d752:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800d754:	2b00      	cmp	r3, #0
 800d756:	f040 858e 	bne.w	800e276 <_strtod_l+0xb96>
 800d75a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d75c:	b1cb      	cbz	r3, 800d792 <_strtod_l+0xb2>
 800d75e:	4652      	mov	r2, sl
 800d760:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800d764:	ec43 2b10 	vmov	d0, r2, r3
 800d768:	b01f      	add	sp, #124	@ 0x7c
 800d76a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d76e:	2920      	cmp	r1, #32
 800d770:	d1ce      	bne.n	800d710 <_strtod_l+0x30>
 800d772:	3201      	adds	r2, #1
 800d774:	e7c1      	b.n	800d6fa <_strtod_l+0x1a>
 800d776:	292d      	cmp	r1, #45	@ 0x2d
 800d778:	d1ca      	bne.n	800d710 <_strtod_l+0x30>
 800d77a:	2101      	movs	r1, #1
 800d77c:	910e      	str	r1, [sp, #56]	@ 0x38
 800d77e:	1c51      	adds	r1, r2, #1
 800d780:	9119      	str	r1, [sp, #100]	@ 0x64
 800d782:	7852      	ldrb	r2, [r2, #1]
 800d784:	2a00      	cmp	r2, #0
 800d786:	d1c5      	bne.n	800d714 <_strtod_l+0x34>
 800d788:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800d78a:	9419      	str	r4, [sp, #100]	@ 0x64
 800d78c:	2b00      	cmp	r3, #0
 800d78e:	f040 8570 	bne.w	800e272 <_strtod_l+0xb92>
 800d792:	4652      	mov	r2, sl
 800d794:	465b      	mov	r3, fp
 800d796:	e7e5      	b.n	800d764 <_strtod_l+0x84>
 800d798:	2100      	movs	r1, #0
 800d79a:	e7ef      	b.n	800d77c <_strtod_l+0x9c>
 800d79c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800d79e:	b13a      	cbz	r2, 800d7b0 <_strtod_l+0xd0>
 800d7a0:	2135      	movs	r1, #53	@ 0x35
 800d7a2:	a81c      	add	r0, sp, #112	@ 0x70
 800d7a4:	f7ff ff3a 	bl	800d61c <__copybits>
 800d7a8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800d7aa:	9805      	ldr	r0, [sp, #20]
 800d7ac:	f7ff fb10 	bl	800cdd0 <_Bfree>
 800d7b0:	3e01      	subs	r6, #1
 800d7b2:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800d7b4:	2e04      	cmp	r6, #4
 800d7b6:	d806      	bhi.n	800d7c6 <_strtod_l+0xe6>
 800d7b8:	e8df f006 	tbb	[pc, r6]
 800d7bc:	201d0314 	.word	0x201d0314
 800d7c0:	14          	.byte	0x14
 800d7c1:	00          	.byte	0x00
 800d7c2:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800d7c6:	05e1      	lsls	r1, r4, #23
 800d7c8:	bf48      	it	mi
 800d7ca:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800d7ce:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800d7d2:	0d1b      	lsrs	r3, r3, #20
 800d7d4:	051b      	lsls	r3, r3, #20
 800d7d6:	2b00      	cmp	r3, #0
 800d7d8:	d1bb      	bne.n	800d752 <_strtod_l+0x72>
 800d7da:	f7fe fb01 	bl	800bde0 <__errno>
 800d7de:	2322      	movs	r3, #34	@ 0x22
 800d7e0:	6003      	str	r3, [r0, #0]
 800d7e2:	e7b6      	b.n	800d752 <_strtod_l+0x72>
 800d7e4:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800d7e8:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800d7ec:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800d7f0:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800d7f4:	e7e7      	b.n	800d7c6 <_strtod_l+0xe6>
 800d7f6:	f8df b180 	ldr.w	fp, [pc, #384]	@ 800d978 <_strtod_l+0x298>
 800d7fa:	e7e4      	b.n	800d7c6 <_strtod_l+0xe6>
 800d7fc:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800d800:	f04f 3aff 	mov.w	sl, #4294967295
 800d804:	e7df      	b.n	800d7c6 <_strtod_l+0xe6>
 800d806:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800d808:	1c5a      	adds	r2, r3, #1
 800d80a:	9219      	str	r2, [sp, #100]	@ 0x64
 800d80c:	785b      	ldrb	r3, [r3, #1]
 800d80e:	2b30      	cmp	r3, #48	@ 0x30
 800d810:	d0f9      	beq.n	800d806 <_strtod_l+0x126>
 800d812:	2b00      	cmp	r3, #0
 800d814:	d09d      	beq.n	800d752 <_strtod_l+0x72>
 800d816:	2301      	movs	r3, #1
 800d818:	2700      	movs	r7, #0
 800d81a:	9308      	str	r3, [sp, #32]
 800d81c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800d81e:	930c      	str	r3, [sp, #48]	@ 0x30
 800d820:	970b      	str	r7, [sp, #44]	@ 0x2c
 800d822:	46b9      	mov	r9, r7
 800d824:	220a      	movs	r2, #10
 800d826:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800d828:	7805      	ldrb	r5, [r0, #0]
 800d82a:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800d82e:	b2d9      	uxtb	r1, r3
 800d830:	2909      	cmp	r1, #9
 800d832:	d928      	bls.n	800d886 <_strtod_l+0x1a6>
 800d834:	494f      	ldr	r1, [pc, #316]	@ (800d974 <_strtod_l+0x294>)
 800d836:	2201      	movs	r2, #1
 800d838:	f001 f98c 	bl	800eb54 <strncmp>
 800d83c:	2800      	cmp	r0, #0
 800d83e:	d032      	beq.n	800d8a6 <_strtod_l+0x1c6>
 800d840:	2000      	movs	r0, #0
 800d842:	462a      	mov	r2, r5
 800d844:	900a      	str	r0, [sp, #40]	@ 0x28
 800d846:	464d      	mov	r5, r9
 800d848:	4603      	mov	r3, r0
 800d84a:	2a65      	cmp	r2, #101	@ 0x65
 800d84c:	d001      	beq.n	800d852 <_strtod_l+0x172>
 800d84e:	2a45      	cmp	r2, #69	@ 0x45
 800d850:	d114      	bne.n	800d87c <_strtod_l+0x19c>
 800d852:	b91d      	cbnz	r5, 800d85c <_strtod_l+0x17c>
 800d854:	9a08      	ldr	r2, [sp, #32]
 800d856:	4302      	orrs	r2, r0
 800d858:	d096      	beq.n	800d788 <_strtod_l+0xa8>
 800d85a:	2500      	movs	r5, #0
 800d85c:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800d85e:	1c62      	adds	r2, r4, #1
 800d860:	9219      	str	r2, [sp, #100]	@ 0x64
 800d862:	7862      	ldrb	r2, [r4, #1]
 800d864:	2a2b      	cmp	r2, #43	@ 0x2b
 800d866:	d07a      	beq.n	800d95e <_strtod_l+0x27e>
 800d868:	2a2d      	cmp	r2, #45	@ 0x2d
 800d86a:	d07e      	beq.n	800d96a <_strtod_l+0x28a>
 800d86c:	f04f 0c00 	mov.w	ip, #0
 800d870:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800d874:	2909      	cmp	r1, #9
 800d876:	f240 8085 	bls.w	800d984 <_strtod_l+0x2a4>
 800d87a:	9419      	str	r4, [sp, #100]	@ 0x64
 800d87c:	f04f 0800 	mov.w	r8, #0
 800d880:	e0a5      	b.n	800d9ce <_strtod_l+0x2ee>
 800d882:	2300      	movs	r3, #0
 800d884:	e7c8      	b.n	800d818 <_strtod_l+0x138>
 800d886:	f1b9 0f08 	cmp.w	r9, #8
 800d88a:	bfd8      	it	le
 800d88c:	990b      	ldrle	r1, [sp, #44]	@ 0x2c
 800d88e:	f100 0001 	add.w	r0, r0, #1
 800d892:	bfda      	itte	le
 800d894:	fb02 3301 	mlale	r3, r2, r1, r3
 800d898:	930b      	strle	r3, [sp, #44]	@ 0x2c
 800d89a:	fb02 3707 	mlagt	r7, r2, r7, r3
 800d89e:	f109 0901 	add.w	r9, r9, #1
 800d8a2:	9019      	str	r0, [sp, #100]	@ 0x64
 800d8a4:	e7bf      	b.n	800d826 <_strtod_l+0x146>
 800d8a6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800d8a8:	1c5a      	adds	r2, r3, #1
 800d8aa:	9219      	str	r2, [sp, #100]	@ 0x64
 800d8ac:	785a      	ldrb	r2, [r3, #1]
 800d8ae:	f1b9 0f00 	cmp.w	r9, #0
 800d8b2:	d03b      	beq.n	800d92c <_strtod_l+0x24c>
 800d8b4:	900a      	str	r0, [sp, #40]	@ 0x28
 800d8b6:	464d      	mov	r5, r9
 800d8b8:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800d8bc:	2b09      	cmp	r3, #9
 800d8be:	d912      	bls.n	800d8e6 <_strtod_l+0x206>
 800d8c0:	2301      	movs	r3, #1
 800d8c2:	e7c2      	b.n	800d84a <_strtod_l+0x16a>
 800d8c4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800d8c6:	1c5a      	adds	r2, r3, #1
 800d8c8:	9219      	str	r2, [sp, #100]	@ 0x64
 800d8ca:	785a      	ldrb	r2, [r3, #1]
 800d8cc:	3001      	adds	r0, #1
 800d8ce:	2a30      	cmp	r2, #48	@ 0x30
 800d8d0:	d0f8      	beq.n	800d8c4 <_strtod_l+0x1e4>
 800d8d2:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800d8d6:	2b08      	cmp	r3, #8
 800d8d8:	f200 84d2 	bhi.w	800e280 <_strtod_l+0xba0>
 800d8dc:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800d8de:	900a      	str	r0, [sp, #40]	@ 0x28
 800d8e0:	2000      	movs	r0, #0
 800d8e2:	930c      	str	r3, [sp, #48]	@ 0x30
 800d8e4:	4605      	mov	r5, r0
 800d8e6:	3a30      	subs	r2, #48	@ 0x30
 800d8e8:	f100 0301 	add.w	r3, r0, #1
 800d8ec:	d018      	beq.n	800d920 <_strtod_l+0x240>
 800d8ee:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800d8f0:	4419      	add	r1, r3
 800d8f2:	910a      	str	r1, [sp, #40]	@ 0x28
 800d8f4:	462e      	mov	r6, r5
 800d8f6:	f04f 0e0a 	mov.w	lr, #10
 800d8fa:	1c71      	adds	r1, r6, #1
 800d8fc:	eba1 0c05 	sub.w	ip, r1, r5
 800d900:	4563      	cmp	r3, ip
 800d902:	dc15      	bgt.n	800d930 <_strtod_l+0x250>
 800d904:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 800d908:	182b      	adds	r3, r5, r0
 800d90a:	2b08      	cmp	r3, #8
 800d90c:	f105 0501 	add.w	r5, r5, #1
 800d910:	4405      	add	r5, r0
 800d912:	dc1a      	bgt.n	800d94a <_strtod_l+0x26a>
 800d914:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800d916:	230a      	movs	r3, #10
 800d918:	fb03 2301 	mla	r3, r3, r1, r2
 800d91c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800d91e:	2300      	movs	r3, #0
 800d920:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800d922:	1c51      	adds	r1, r2, #1
 800d924:	9119      	str	r1, [sp, #100]	@ 0x64
 800d926:	7852      	ldrb	r2, [r2, #1]
 800d928:	4618      	mov	r0, r3
 800d92a:	e7c5      	b.n	800d8b8 <_strtod_l+0x1d8>
 800d92c:	4648      	mov	r0, r9
 800d92e:	e7ce      	b.n	800d8ce <_strtod_l+0x1ee>
 800d930:	2e08      	cmp	r6, #8
 800d932:	dc05      	bgt.n	800d940 <_strtod_l+0x260>
 800d934:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800d936:	fb0e f606 	mul.w	r6, lr, r6
 800d93a:	960b      	str	r6, [sp, #44]	@ 0x2c
 800d93c:	460e      	mov	r6, r1
 800d93e:	e7dc      	b.n	800d8fa <_strtod_l+0x21a>
 800d940:	2910      	cmp	r1, #16
 800d942:	bfd8      	it	le
 800d944:	fb0e f707 	mulle.w	r7, lr, r7
 800d948:	e7f8      	b.n	800d93c <_strtod_l+0x25c>
 800d94a:	2b0f      	cmp	r3, #15
 800d94c:	bfdc      	itt	le
 800d94e:	230a      	movle	r3, #10
 800d950:	fb03 2707 	mlale	r7, r3, r7, r2
 800d954:	e7e3      	b.n	800d91e <_strtod_l+0x23e>
 800d956:	2300      	movs	r3, #0
 800d958:	930a      	str	r3, [sp, #40]	@ 0x28
 800d95a:	2301      	movs	r3, #1
 800d95c:	e77a      	b.n	800d854 <_strtod_l+0x174>
 800d95e:	f04f 0c00 	mov.w	ip, #0
 800d962:	1ca2      	adds	r2, r4, #2
 800d964:	9219      	str	r2, [sp, #100]	@ 0x64
 800d966:	78a2      	ldrb	r2, [r4, #2]
 800d968:	e782      	b.n	800d870 <_strtod_l+0x190>
 800d96a:	f04f 0c01 	mov.w	ip, #1
 800d96e:	e7f8      	b.n	800d962 <_strtod_l+0x282>
 800d970:	08010e04 	.word	0x08010e04
 800d974:	08010c73 	.word	0x08010c73
 800d978:	7ff00000 	.word	0x7ff00000
 800d97c:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800d97e:	1c51      	adds	r1, r2, #1
 800d980:	9119      	str	r1, [sp, #100]	@ 0x64
 800d982:	7852      	ldrb	r2, [r2, #1]
 800d984:	2a30      	cmp	r2, #48	@ 0x30
 800d986:	d0f9      	beq.n	800d97c <_strtod_l+0x29c>
 800d988:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800d98c:	2908      	cmp	r1, #8
 800d98e:	f63f af75 	bhi.w	800d87c <_strtod_l+0x19c>
 800d992:	3a30      	subs	r2, #48	@ 0x30
 800d994:	9209      	str	r2, [sp, #36]	@ 0x24
 800d996:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800d998:	920f      	str	r2, [sp, #60]	@ 0x3c
 800d99a:	f04f 080a 	mov.w	r8, #10
 800d99e:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800d9a0:	1c56      	adds	r6, r2, #1
 800d9a2:	9619      	str	r6, [sp, #100]	@ 0x64
 800d9a4:	7852      	ldrb	r2, [r2, #1]
 800d9a6:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800d9aa:	f1be 0f09 	cmp.w	lr, #9
 800d9ae:	d939      	bls.n	800da24 <_strtod_l+0x344>
 800d9b0:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800d9b2:	1a76      	subs	r6, r6, r1
 800d9b4:	2e08      	cmp	r6, #8
 800d9b6:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800d9ba:	dc03      	bgt.n	800d9c4 <_strtod_l+0x2e4>
 800d9bc:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800d9be:	4588      	cmp	r8, r1
 800d9c0:	bfa8      	it	ge
 800d9c2:	4688      	movge	r8, r1
 800d9c4:	f1bc 0f00 	cmp.w	ip, #0
 800d9c8:	d001      	beq.n	800d9ce <_strtod_l+0x2ee>
 800d9ca:	f1c8 0800 	rsb	r8, r8, #0
 800d9ce:	2d00      	cmp	r5, #0
 800d9d0:	d14e      	bne.n	800da70 <_strtod_l+0x390>
 800d9d2:	9908      	ldr	r1, [sp, #32]
 800d9d4:	4308      	orrs	r0, r1
 800d9d6:	f47f aebc 	bne.w	800d752 <_strtod_l+0x72>
 800d9da:	2b00      	cmp	r3, #0
 800d9dc:	f47f aed4 	bne.w	800d788 <_strtod_l+0xa8>
 800d9e0:	2a69      	cmp	r2, #105	@ 0x69
 800d9e2:	d028      	beq.n	800da36 <_strtod_l+0x356>
 800d9e4:	dc25      	bgt.n	800da32 <_strtod_l+0x352>
 800d9e6:	2a49      	cmp	r2, #73	@ 0x49
 800d9e8:	d025      	beq.n	800da36 <_strtod_l+0x356>
 800d9ea:	2a4e      	cmp	r2, #78	@ 0x4e
 800d9ec:	f47f aecc 	bne.w	800d788 <_strtod_l+0xa8>
 800d9f0:	499a      	ldr	r1, [pc, #616]	@ (800dc5c <_strtod_l+0x57c>)
 800d9f2:	a819      	add	r0, sp, #100	@ 0x64
 800d9f4:	f001 fba0 	bl	800f138 <__match>
 800d9f8:	2800      	cmp	r0, #0
 800d9fa:	f43f aec5 	beq.w	800d788 <_strtod_l+0xa8>
 800d9fe:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800da00:	781b      	ldrb	r3, [r3, #0]
 800da02:	2b28      	cmp	r3, #40	@ 0x28
 800da04:	d12e      	bne.n	800da64 <_strtod_l+0x384>
 800da06:	4996      	ldr	r1, [pc, #600]	@ (800dc60 <_strtod_l+0x580>)
 800da08:	aa1c      	add	r2, sp, #112	@ 0x70
 800da0a:	a819      	add	r0, sp, #100	@ 0x64
 800da0c:	f001 fba8 	bl	800f160 <__hexnan>
 800da10:	2805      	cmp	r0, #5
 800da12:	d127      	bne.n	800da64 <_strtod_l+0x384>
 800da14:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800da16:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800da1a:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800da1e:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800da22:	e696      	b.n	800d752 <_strtod_l+0x72>
 800da24:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800da26:	fb08 2101 	mla	r1, r8, r1, r2
 800da2a:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800da2e:	9209      	str	r2, [sp, #36]	@ 0x24
 800da30:	e7b5      	b.n	800d99e <_strtod_l+0x2be>
 800da32:	2a6e      	cmp	r2, #110	@ 0x6e
 800da34:	e7da      	b.n	800d9ec <_strtod_l+0x30c>
 800da36:	498b      	ldr	r1, [pc, #556]	@ (800dc64 <_strtod_l+0x584>)
 800da38:	a819      	add	r0, sp, #100	@ 0x64
 800da3a:	f001 fb7d 	bl	800f138 <__match>
 800da3e:	2800      	cmp	r0, #0
 800da40:	f43f aea2 	beq.w	800d788 <_strtod_l+0xa8>
 800da44:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800da46:	4988      	ldr	r1, [pc, #544]	@ (800dc68 <_strtod_l+0x588>)
 800da48:	3b01      	subs	r3, #1
 800da4a:	a819      	add	r0, sp, #100	@ 0x64
 800da4c:	9319      	str	r3, [sp, #100]	@ 0x64
 800da4e:	f001 fb73 	bl	800f138 <__match>
 800da52:	b910      	cbnz	r0, 800da5a <_strtod_l+0x37a>
 800da54:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800da56:	3301      	adds	r3, #1
 800da58:	9319      	str	r3, [sp, #100]	@ 0x64
 800da5a:	f8df b21c 	ldr.w	fp, [pc, #540]	@ 800dc78 <_strtod_l+0x598>
 800da5e:	f04f 0a00 	mov.w	sl, #0
 800da62:	e676      	b.n	800d752 <_strtod_l+0x72>
 800da64:	4881      	ldr	r0, [pc, #516]	@ (800dc6c <_strtod_l+0x58c>)
 800da66:	f001 f8bb 	bl	800ebe0 <nan>
 800da6a:	ec5b ab10 	vmov	sl, fp, d0
 800da6e:	e670      	b.n	800d752 <_strtod_l+0x72>
 800da70:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800da72:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 800da74:	eba8 0303 	sub.w	r3, r8, r3
 800da78:	f1b9 0f00 	cmp.w	r9, #0
 800da7c:	bf08      	it	eq
 800da7e:	46a9      	moveq	r9, r5
 800da80:	2d10      	cmp	r5, #16
 800da82:	9309      	str	r3, [sp, #36]	@ 0x24
 800da84:	462c      	mov	r4, r5
 800da86:	bfa8      	it	ge
 800da88:	2410      	movge	r4, #16
 800da8a:	f7f2 fd43 	bl	8000514 <__aeabi_ui2d>
 800da8e:	2d09      	cmp	r5, #9
 800da90:	4682      	mov	sl, r0
 800da92:	468b      	mov	fp, r1
 800da94:	dc13      	bgt.n	800dabe <_strtod_l+0x3de>
 800da96:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800da98:	2b00      	cmp	r3, #0
 800da9a:	f43f ae5a 	beq.w	800d752 <_strtod_l+0x72>
 800da9e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800daa0:	dd78      	ble.n	800db94 <_strtod_l+0x4b4>
 800daa2:	2b16      	cmp	r3, #22
 800daa4:	dc5f      	bgt.n	800db66 <_strtod_l+0x486>
 800daa6:	4972      	ldr	r1, [pc, #456]	@ (800dc70 <_strtod_l+0x590>)
 800daa8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800daac:	e9d1 0100 	ldrd	r0, r1, [r1]
 800dab0:	4652      	mov	r2, sl
 800dab2:	465b      	mov	r3, fp
 800dab4:	f7f2 fda8 	bl	8000608 <__aeabi_dmul>
 800dab8:	4682      	mov	sl, r0
 800daba:	468b      	mov	fp, r1
 800dabc:	e649      	b.n	800d752 <_strtod_l+0x72>
 800dabe:	4b6c      	ldr	r3, [pc, #432]	@ (800dc70 <_strtod_l+0x590>)
 800dac0:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800dac4:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800dac8:	f7f2 fd9e 	bl	8000608 <__aeabi_dmul>
 800dacc:	4682      	mov	sl, r0
 800dace:	4638      	mov	r0, r7
 800dad0:	468b      	mov	fp, r1
 800dad2:	f7f2 fd1f 	bl	8000514 <__aeabi_ui2d>
 800dad6:	4602      	mov	r2, r0
 800dad8:	460b      	mov	r3, r1
 800dada:	4650      	mov	r0, sl
 800dadc:	4659      	mov	r1, fp
 800dade:	f7f2 fbdd 	bl	800029c <__adddf3>
 800dae2:	2d0f      	cmp	r5, #15
 800dae4:	4682      	mov	sl, r0
 800dae6:	468b      	mov	fp, r1
 800dae8:	ddd5      	ble.n	800da96 <_strtod_l+0x3b6>
 800daea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800daec:	1b2c      	subs	r4, r5, r4
 800daee:	441c      	add	r4, r3
 800daf0:	2c00      	cmp	r4, #0
 800daf2:	f340 8093 	ble.w	800dc1c <_strtod_l+0x53c>
 800daf6:	f014 030f 	ands.w	r3, r4, #15
 800dafa:	d00a      	beq.n	800db12 <_strtod_l+0x432>
 800dafc:	495c      	ldr	r1, [pc, #368]	@ (800dc70 <_strtod_l+0x590>)
 800dafe:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800db02:	4652      	mov	r2, sl
 800db04:	465b      	mov	r3, fp
 800db06:	e9d1 0100 	ldrd	r0, r1, [r1]
 800db0a:	f7f2 fd7d 	bl	8000608 <__aeabi_dmul>
 800db0e:	4682      	mov	sl, r0
 800db10:	468b      	mov	fp, r1
 800db12:	f034 040f 	bics.w	r4, r4, #15
 800db16:	d073      	beq.n	800dc00 <_strtod_l+0x520>
 800db18:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800db1c:	dd49      	ble.n	800dbb2 <_strtod_l+0x4d2>
 800db1e:	2400      	movs	r4, #0
 800db20:	46a0      	mov	r8, r4
 800db22:	940b      	str	r4, [sp, #44]	@ 0x2c
 800db24:	46a1      	mov	r9, r4
 800db26:	9a05      	ldr	r2, [sp, #20]
 800db28:	f8df b14c 	ldr.w	fp, [pc, #332]	@ 800dc78 <_strtod_l+0x598>
 800db2c:	2322      	movs	r3, #34	@ 0x22
 800db2e:	6013      	str	r3, [r2, #0]
 800db30:	f04f 0a00 	mov.w	sl, #0
 800db34:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800db36:	2b00      	cmp	r3, #0
 800db38:	f43f ae0b 	beq.w	800d752 <_strtod_l+0x72>
 800db3c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800db3e:	9805      	ldr	r0, [sp, #20]
 800db40:	f7ff f946 	bl	800cdd0 <_Bfree>
 800db44:	9805      	ldr	r0, [sp, #20]
 800db46:	4649      	mov	r1, r9
 800db48:	f7ff f942 	bl	800cdd0 <_Bfree>
 800db4c:	9805      	ldr	r0, [sp, #20]
 800db4e:	4641      	mov	r1, r8
 800db50:	f7ff f93e 	bl	800cdd0 <_Bfree>
 800db54:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800db56:	9805      	ldr	r0, [sp, #20]
 800db58:	f7ff f93a 	bl	800cdd0 <_Bfree>
 800db5c:	9805      	ldr	r0, [sp, #20]
 800db5e:	4621      	mov	r1, r4
 800db60:	f7ff f936 	bl	800cdd0 <_Bfree>
 800db64:	e5f5      	b.n	800d752 <_strtod_l+0x72>
 800db66:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800db68:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800db6c:	4293      	cmp	r3, r2
 800db6e:	dbbc      	blt.n	800daea <_strtod_l+0x40a>
 800db70:	4c3f      	ldr	r4, [pc, #252]	@ (800dc70 <_strtod_l+0x590>)
 800db72:	f1c5 050f 	rsb	r5, r5, #15
 800db76:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800db7a:	4652      	mov	r2, sl
 800db7c:	465b      	mov	r3, fp
 800db7e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800db82:	f7f2 fd41 	bl	8000608 <__aeabi_dmul>
 800db86:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800db88:	1b5d      	subs	r5, r3, r5
 800db8a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800db8e:	e9d4 2300 	ldrd	r2, r3, [r4]
 800db92:	e78f      	b.n	800dab4 <_strtod_l+0x3d4>
 800db94:	3316      	adds	r3, #22
 800db96:	dba8      	blt.n	800daea <_strtod_l+0x40a>
 800db98:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800db9a:	eba3 0808 	sub.w	r8, r3, r8
 800db9e:	4b34      	ldr	r3, [pc, #208]	@ (800dc70 <_strtod_l+0x590>)
 800dba0:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800dba4:	e9d8 2300 	ldrd	r2, r3, [r8]
 800dba8:	4650      	mov	r0, sl
 800dbaa:	4659      	mov	r1, fp
 800dbac:	f7f2 fe56 	bl	800085c <__aeabi_ddiv>
 800dbb0:	e782      	b.n	800dab8 <_strtod_l+0x3d8>
 800dbb2:	2300      	movs	r3, #0
 800dbb4:	4f2f      	ldr	r7, [pc, #188]	@ (800dc74 <_strtod_l+0x594>)
 800dbb6:	1124      	asrs	r4, r4, #4
 800dbb8:	4650      	mov	r0, sl
 800dbba:	4659      	mov	r1, fp
 800dbbc:	461e      	mov	r6, r3
 800dbbe:	2c01      	cmp	r4, #1
 800dbc0:	dc21      	bgt.n	800dc06 <_strtod_l+0x526>
 800dbc2:	b10b      	cbz	r3, 800dbc8 <_strtod_l+0x4e8>
 800dbc4:	4682      	mov	sl, r0
 800dbc6:	468b      	mov	fp, r1
 800dbc8:	492a      	ldr	r1, [pc, #168]	@ (800dc74 <_strtod_l+0x594>)
 800dbca:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800dbce:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800dbd2:	4652      	mov	r2, sl
 800dbd4:	465b      	mov	r3, fp
 800dbd6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800dbda:	f7f2 fd15 	bl	8000608 <__aeabi_dmul>
 800dbde:	4b26      	ldr	r3, [pc, #152]	@ (800dc78 <_strtod_l+0x598>)
 800dbe0:	460a      	mov	r2, r1
 800dbe2:	400b      	ands	r3, r1
 800dbe4:	4925      	ldr	r1, [pc, #148]	@ (800dc7c <_strtod_l+0x59c>)
 800dbe6:	428b      	cmp	r3, r1
 800dbe8:	4682      	mov	sl, r0
 800dbea:	d898      	bhi.n	800db1e <_strtod_l+0x43e>
 800dbec:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800dbf0:	428b      	cmp	r3, r1
 800dbf2:	bf86      	itte	hi
 800dbf4:	f8df b088 	ldrhi.w	fp, [pc, #136]	@ 800dc80 <_strtod_l+0x5a0>
 800dbf8:	f04f 3aff 	movhi.w	sl, #4294967295
 800dbfc:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800dc00:	2300      	movs	r3, #0
 800dc02:	9308      	str	r3, [sp, #32]
 800dc04:	e076      	b.n	800dcf4 <_strtod_l+0x614>
 800dc06:	07e2      	lsls	r2, r4, #31
 800dc08:	d504      	bpl.n	800dc14 <_strtod_l+0x534>
 800dc0a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800dc0e:	f7f2 fcfb 	bl	8000608 <__aeabi_dmul>
 800dc12:	2301      	movs	r3, #1
 800dc14:	3601      	adds	r6, #1
 800dc16:	1064      	asrs	r4, r4, #1
 800dc18:	3708      	adds	r7, #8
 800dc1a:	e7d0      	b.n	800dbbe <_strtod_l+0x4de>
 800dc1c:	d0f0      	beq.n	800dc00 <_strtod_l+0x520>
 800dc1e:	4264      	negs	r4, r4
 800dc20:	f014 020f 	ands.w	r2, r4, #15
 800dc24:	d00a      	beq.n	800dc3c <_strtod_l+0x55c>
 800dc26:	4b12      	ldr	r3, [pc, #72]	@ (800dc70 <_strtod_l+0x590>)
 800dc28:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800dc2c:	4650      	mov	r0, sl
 800dc2e:	4659      	mov	r1, fp
 800dc30:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc34:	f7f2 fe12 	bl	800085c <__aeabi_ddiv>
 800dc38:	4682      	mov	sl, r0
 800dc3a:	468b      	mov	fp, r1
 800dc3c:	1124      	asrs	r4, r4, #4
 800dc3e:	d0df      	beq.n	800dc00 <_strtod_l+0x520>
 800dc40:	2c1f      	cmp	r4, #31
 800dc42:	dd1f      	ble.n	800dc84 <_strtod_l+0x5a4>
 800dc44:	2400      	movs	r4, #0
 800dc46:	46a0      	mov	r8, r4
 800dc48:	940b      	str	r4, [sp, #44]	@ 0x2c
 800dc4a:	46a1      	mov	r9, r4
 800dc4c:	9a05      	ldr	r2, [sp, #20]
 800dc4e:	2322      	movs	r3, #34	@ 0x22
 800dc50:	f04f 0a00 	mov.w	sl, #0
 800dc54:	f04f 0b00 	mov.w	fp, #0
 800dc58:	6013      	str	r3, [r2, #0]
 800dc5a:	e76b      	b.n	800db34 <_strtod_l+0x454>
 800dc5c:	08010b25 	.word	0x08010b25
 800dc60:	08010df0 	.word	0x08010df0
 800dc64:	08010b1d 	.word	0x08010b1d
 800dc68:	08010b90 	.word	0x08010b90
 800dc6c:	08010b8c 	.word	0x08010b8c
 800dc70:	08010d28 	.word	0x08010d28
 800dc74:	08010d00 	.word	0x08010d00
 800dc78:	7ff00000 	.word	0x7ff00000
 800dc7c:	7ca00000 	.word	0x7ca00000
 800dc80:	7fefffff 	.word	0x7fefffff
 800dc84:	f014 0310 	ands.w	r3, r4, #16
 800dc88:	bf18      	it	ne
 800dc8a:	236a      	movne	r3, #106	@ 0x6a
 800dc8c:	4ea9      	ldr	r6, [pc, #676]	@ (800df34 <_strtod_l+0x854>)
 800dc8e:	9308      	str	r3, [sp, #32]
 800dc90:	4650      	mov	r0, sl
 800dc92:	4659      	mov	r1, fp
 800dc94:	2300      	movs	r3, #0
 800dc96:	07e7      	lsls	r7, r4, #31
 800dc98:	d504      	bpl.n	800dca4 <_strtod_l+0x5c4>
 800dc9a:	e9d6 2300 	ldrd	r2, r3, [r6]
 800dc9e:	f7f2 fcb3 	bl	8000608 <__aeabi_dmul>
 800dca2:	2301      	movs	r3, #1
 800dca4:	1064      	asrs	r4, r4, #1
 800dca6:	f106 0608 	add.w	r6, r6, #8
 800dcaa:	d1f4      	bne.n	800dc96 <_strtod_l+0x5b6>
 800dcac:	b10b      	cbz	r3, 800dcb2 <_strtod_l+0x5d2>
 800dcae:	4682      	mov	sl, r0
 800dcb0:	468b      	mov	fp, r1
 800dcb2:	9b08      	ldr	r3, [sp, #32]
 800dcb4:	b1b3      	cbz	r3, 800dce4 <_strtod_l+0x604>
 800dcb6:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800dcba:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800dcbe:	2b00      	cmp	r3, #0
 800dcc0:	4659      	mov	r1, fp
 800dcc2:	dd0f      	ble.n	800dce4 <_strtod_l+0x604>
 800dcc4:	2b1f      	cmp	r3, #31
 800dcc6:	dd56      	ble.n	800dd76 <_strtod_l+0x696>
 800dcc8:	2b34      	cmp	r3, #52	@ 0x34
 800dcca:	bfde      	ittt	le
 800dccc:	f04f 33ff 	movle.w	r3, #4294967295
 800dcd0:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800dcd4:	4093      	lslle	r3, r2
 800dcd6:	f04f 0a00 	mov.w	sl, #0
 800dcda:	bfcc      	ite	gt
 800dcdc:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800dce0:	ea03 0b01 	andle.w	fp, r3, r1
 800dce4:	2200      	movs	r2, #0
 800dce6:	2300      	movs	r3, #0
 800dce8:	4650      	mov	r0, sl
 800dcea:	4659      	mov	r1, fp
 800dcec:	f7f2 fef4 	bl	8000ad8 <__aeabi_dcmpeq>
 800dcf0:	2800      	cmp	r0, #0
 800dcf2:	d1a7      	bne.n	800dc44 <_strtod_l+0x564>
 800dcf4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800dcf6:	9300      	str	r3, [sp, #0]
 800dcf8:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800dcfa:	9805      	ldr	r0, [sp, #20]
 800dcfc:	462b      	mov	r3, r5
 800dcfe:	464a      	mov	r2, r9
 800dd00:	f7ff f8ce 	bl	800cea0 <__s2b>
 800dd04:	900b      	str	r0, [sp, #44]	@ 0x2c
 800dd06:	2800      	cmp	r0, #0
 800dd08:	f43f af09 	beq.w	800db1e <_strtod_l+0x43e>
 800dd0c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800dd0e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800dd10:	2a00      	cmp	r2, #0
 800dd12:	eba3 0308 	sub.w	r3, r3, r8
 800dd16:	bfa8      	it	ge
 800dd18:	2300      	movge	r3, #0
 800dd1a:	9312      	str	r3, [sp, #72]	@ 0x48
 800dd1c:	2400      	movs	r4, #0
 800dd1e:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800dd22:	9316      	str	r3, [sp, #88]	@ 0x58
 800dd24:	46a0      	mov	r8, r4
 800dd26:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800dd28:	9805      	ldr	r0, [sp, #20]
 800dd2a:	6859      	ldr	r1, [r3, #4]
 800dd2c:	f7ff f810 	bl	800cd50 <_Balloc>
 800dd30:	4681      	mov	r9, r0
 800dd32:	2800      	cmp	r0, #0
 800dd34:	f43f aef7 	beq.w	800db26 <_strtod_l+0x446>
 800dd38:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800dd3a:	691a      	ldr	r2, [r3, #16]
 800dd3c:	3202      	adds	r2, #2
 800dd3e:	f103 010c 	add.w	r1, r3, #12
 800dd42:	0092      	lsls	r2, r2, #2
 800dd44:	300c      	adds	r0, #12
 800dd46:	f7fe f878 	bl	800be3a <memcpy>
 800dd4a:	ec4b ab10 	vmov	d0, sl, fp
 800dd4e:	9805      	ldr	r0, [sp, #20]
 800dd50:	aa1c      	add	r2, sp, #112	@ 0x70
 800dd52:	a91b      	add	r1, sp, #108	@ 0x6c
 800dd54:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800dd58:	f7ff fbd6 	bl	800d508 <__d2b>
 800dd5c:	901a      	str	r0, [sp, #104]	@ 0x68
 800dd5e:	2800      	cmp	r0, #0
 800dd60:	f43f aee1 	beq.w	800db26 <_strtod_l+0x446>
 800dd64:	9805      	ldr	r0, [sp, #20]
 800dd66:	2101      	movs	r1, #1
 800dd68:	f7ff f930 	bl	800cfcc <__i2b>
 800dd6c:	4680      	mov	r8, r0
 800dd6e:	b948      	cbnz	r0, 800dd84 <_strtod_l+0x6a4>
 800dd70:	f04f 0800 	mov.w	r8, #0
 800dd74:	e6d7      	b.n	800db26 <_strtod_l+0x446>
 800dd76:	f04f 32ff 	mov.w	r2, #4294967295
 800dd7a:	fa02 f303 	lsl.w	r3, r2, r3
 800dd7e:	ea03 0a0a 	and.w	sl, r3, sl
 800dd82:	e7af      	b.n	800dce4 <_strtod_l+0x604>
 800dd84:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800dd86:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800dd88:	2d00      	cmp	r5, #0
 800dd8a:	bfab      	itete	ge
 800dd8c:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800dd8e:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800dd90:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800dd92:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800dd94:	bfac      	ite	ge
 800dd96:	18ef      	addge	r7, r5, r3
 800dd98:	1b5e      	sublt	r6, r3, r5
 800dd9a:	9b08      	ldr	r3, [sp, #32]
 800dd9c:	1aed      	subs	r5, r5, r3
 800dd9e:	4415      	add	r5, r2
 800dda0:	4b65      	ldr	r3, [pc, #404]	@ (800df38 <_strtod_l+0x858>)
 800dda2:	3d01      	subs	r5, #1
 800dda4:	429d      	cmp	r5, r3
 800dda6:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800ddaa:	da50      	bge.n	800de4e <_strtod_l+0x76e>
 800ddac:	1b5b      	subs	r3, r3, r5
 800ddae:	2b1f      	cmp	r3, #31
 800ddb0:	eba2 0203 	sub.w	r2, r2, r3
 800ddb4:	f04f 0101 	mov.w	r1, #1
 800ddb8:	dc3d      	bgt.n	800de36 <_strtod_l+0x756>
 800ddba:	fa01 f303 	lsl.w	r3, r1, r3
 800ddbe:	9313      	str	r3, [sp, #76]	@ 0x4c
 800ddc0:	2300      	movs	r3, #0
 800ddc2:	9310      	str	r3, [sp, #64]	@ 0x40
 800ddc4:	18bd      	adds	r5, r7, r2
 800ddc6:	9b08      	ldr	r3, [sp, #32]
 800ddc8:	42af      	cmp	r7, r5
 800ddca:	4416      	add	r6, r2
 800ddcc:	441e      	add	r6, r3
 800ddce:	463b      	mov	r3, r7
 800ddd0:	bfa8      	it	ge
 800ddd2:	462b      	movge	r3, r5
 800ddd4:	42b3      	cmp	r3, r6
 800ddd6:	bfa8      	it	ge
 800ddd8:	4633      	movge	r3, r6
 800ddda:	2b00      	cmp	r3, #0
 800dddc:	bfc2      	ittt	gt
 800ddde:	1aed      	subgt	r5, r5, r3
 800dde0:	1af6      	subgt	r6, r6, r3
 800dde2:	1aff      	subgt	r7, r7, r3
 800dde4:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800dde6:	2b00      	cmp	r3, #0
 800dde8:	dd16      	ble.n	800de18 <_strtod_l+0x738>
 800ddea:	4641      	mov	r1, r8
 800ddec:	9805      	ldr	r0, [sp, #20]
 800ddee:	461a      	mov	r2, r3
 800ddf0:	f7ff f9a4 	bl	800d13c <__pow5mult>
 800ddf4:	4680      	mov	r8, r0
 800ddf6:	2800      	cmp	r0, #0
 800ddf8:	d0ba      	beq.n	800dd70 <_strtod_l+0x690>
 800ddfa:	4601      	mov	r1, r0
 800ddfc:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800ddfe:	9805      	ldr	r0, [sp, #20]
 800de00:	f7ff f8fa 	bl	800cff8 <__multiply>
 800de04:	900a      	str	r0, [sp, #40]	@ 0x28
 800de06:	2800      	cmp	r0, #0
 800de08:	f43f ae8d 	beq.w	800db26 <_strtod_l+0x446>
 800de0c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800de0e:	9805      	ldr	r0, [sp, #20]
 800de10:	f7fe ffde 	bl	800cdd0 <_Bfree>
 800de14:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800de16:	931a      	str	r3, [sp, #104]	@ 0x68
 800de18:	2d00      	cmp	r5, #0
 800de1a:	dc1d      	bgt.n	800de58 <_strtod_l+0x778>
 800de1c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800de1e:	2b00      	cmp	r3, #0
 800de20:	dd23      	ble.n	800de6a <_strtod_l+0x78a>
 800de22:	4649      	mov	r1, r9
 800de24:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800de26:	9805      	ldr	r0, [sp, #20]
 800de28:	f7ff f988 	bl	800d13c <__pow5mult>
 800de2c:	4681      	mov	r9, r0
 800de2e:	b9e0      	cbnz	r0, 800de6a <_strtod_l+0x78a>
 800de30:	f04f 0900 	mov.w	r9, #0
 800de34:	e677      	b.n	800db26 <_strtod_l+0x446>
 800de36:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800de3a:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800de3e:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800de42:	35e2      	adds	r5, #226	@ 0xe2
 800de44:	fa01 f305 	lsl.w	r3, r1, r5
 800de48:	9310      	str	r3, [sp, #64]	@ 0x40
 800de4a:	9113      	str	r1, [sp, #76]	@ 0x4c
 800de4c:	e7ba      	b.n	800ddc4 <_strtod_l+0x6e4>
 800de4e:	2300      	movs	r3, #0
 800de50:	9310      	str	r3, [sp, #64]	@ 0x40
 800de52:	2301      	movs	r3, #1
 800de54:	9313      	str	r3, [sp, #76]	@ 0x4c
 800de56:	e7b5      	b.n	800ddc4 <_strtod_l+0x6e4>
 800de58:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800de5a:	9805      	ldr	r0, [sp, #20]
 800de5c:	462a      	mov	r2, r5
 800de5e:	f7ff f9c7 	bl	800d1f0 <__lshift>
 800de62:	901a      	str	r0, [sp, #104]	@ 0x68
 800de64:	2800      	cmp	r0, #0
 800de66:	d1d9      	bne.n	800de1c <_strtod_l+0x73c>
 800de68:	e65d      	b.n	800db26 <_strtod_l+0x446>
 800de6a:	2e00      	cmp	r6, #0
 800de6c:	dd07      	ble.n	800de7e <_strtod_l+0x79e>
 800de6e:	4649      	mov	r1, r9
 800de70:	9805      	ldr	r0, [sp, #20]
 800de72:	4632      	mov	r2, r6
 800de74:	f7ff f9bc 	bl	800d1f0 <__lshift>
 800de78:	4681      	mov	r9, r0
 800de7a:	2800      	cmp	r0, #0
 800de7c:	d0d8      	beq.n	800de30 <_strtod_l+0x750>
 800de7e:	2f00      	cmp	r7, #0
 800de80:	dd08      	ble.n	800de94 <_strtod_l+0x7b4>
 800de82:	4641      	mov	r1, r8
 800de84:	9805      	ldr	r0, [sp, #20]
 800de86:	463a      	mov	r2, r7
 800de88:	f7ff f9b2 	bl	800d1f0 <__lshift>
 800de8c:	4680      	mov	r8, r0
 800de8e:	2800      	cmp	r0, #0
 800de90:	f43f ae49 	beq.w	800db26 <_strtod_l+0x446>
 800de94:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800de96:	9805      	ldr	r0, [sp, #20]
 800de98:	464a      	mov	r2, r9
 800de9a:	f7ff fa31 	bl	800d300 <__mdiff>
 800de9e:	4604      	mov	r4, r0
 800dea0:	2800      	cmp	r0, #0
 800dea2:	f43f ae40 	beq.w	800db26 <_strtod_l+0x446>
 800dea6:	68c3      	ldr	r3, [r0, #12]
 800dea8:	930f      	str	r3, [sp, #60]	@ 0x3c
 800deaa:	2300      	movs	r3, #0
 800deac:	60c3      	str	r3, [r0, #12]
 800deae:	4641      	mov	r1, r8
 800deb0:	f7ff fa0a 	bl	800d2c8 <__mcmp>
 800deb4:	2800      	cmp	r0, #0
 800deb6:	da45      	bge.n	800df44 <_strtod_l+0x864>
 800deb8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800deba:	ea53 030a 	orrs.w	r3, r3, sl
 800debe:	d16b      	bne.n	800df98 <_strtod_l+0x8b8>
 800dec0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800dec4:	2b00      	cmp	r3, #0
 800dec6:	d167      	bne.n	800df98 <_strtod_l+0x8b8>
 800dec8:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800decc:	0d1b      	lsrs	r3, r3, #20
 800dece:	051b      	lsls	r3, r3, #20
 800ded0:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800ded4:	d960      	bls.n	800df98 <_strtod_l+0x8b8>
 800ded6:	6963      	ldr	r3, [r4, #20]
 800ded8:	b913      	cbnz	r3, 800dee0 <_strtod_l+0x800>
 800deda:	6923      	ldr	r3, [r4, #16]
 800dedc:	2b01      	cmp	r3, #1
 800dede:	dd5b      	ble.n	800df98 <_strtod_l+0x8b8>
 800dee0:	4621      	mov	r1, r4
 800dee2:	2201      	movs	r2, #1
 800dee4:	9805      	ldr	r0, [sp, #20]
 800dee6:	f7ff f983 	bl	800d1f0 <__lshift>
 800deea:	4641      	mov	r1, r8
 800deec:	4604      	mov	r4, r0
 800deee:	f7ff f9eb 	bl	800d2c8 <__mcmp>
 800def2:	2800      	cmp	r0, #0
 800def4:	dd50      	ble.n	800df98 <_strtod_l+0x8b8>
 800def6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800defa:	9a08      	ldr	r2, [sp, #32]
 800defc:	0d1b      	lsrs	r3, r3, #20
 800defe:	051b      	lsls	r3, r3, #20
 800df00:	2a00      	cmp	r2, #0
 800df02:	d06a      	beq.n	800dfda <_strtod_l+0x8fa>
 800df04:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800df08:	d867      	bhi.n	800dfda <_strtod_l+0x8fa>
 800df0a:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800df0e:	f67f ae9d 	bls.w	800dc4c <_strtod_l+0x56c>
 800df12:	4b0a      	ldr	r3, [pc, #40]	@ (800df3c <_strtod_l+0x85c>)
 800df14:	4650      	mov	r0, sl
 800df16:	4659      	mov	r1, fp
 800df18:	2200      	movs	r2, #0
 800df1a:	f7f2 fb75 	bl	8000608 <__aeabi_dmul>
 800df1e:	4b08      	ldr	r3, [pc, #32]	@ (800df40 <_strtod_l+0x860>)
 800df20:	400b      	ands	r3, r1
 800df22:	4682      	mov	sl, r0
 800df24:	468b      	mov	fp, r1
 800df26:	2b00      	cmp	r3, #0
 800df28:	f47f ae08 	bne.w	800db3c <_strtod_l+0x45c>
 800df2c:	9a05      	ldr	r2, [sp, #20]
 800df2e:	2322      	movs	r3, #34	@ 0x22
 800df30:	6013      	str	r3, [r2, #0]
 800df32:	e603      	b.n	800db3c <_strtod_l+0x45c>
 800df34:	08010e18 	.word	0x08010e18
 800df38:	fffffc02 	.word	0xfffffc02
 800df3c:	39500000 	.word	0x39500000
 800df40:	7ff00000 	.word	0x7ff00000
 800df44:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 800df48:	d165      	bne.n	800e016 <_strtod_l+0x936>
 800df4a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800df4c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800df50:	b35a      	cbz	r2, 800dfaa <_strtod_l+0x8ca>
 800df52:	4a9f      	ldr	r2, [pc, #636]	@ (800e1d0 <_strtod_l+0xaf0>)
 800df54:	4293      	cmp	r3, r2
 800df56:	d12b      	bne.n	800dfb0 <_strtod_l+0x8d0>
 800df58:	9b08      	ldr	r3, [sp, #32]
 800df5a:	4651      	mov	r1, sl
 800df5c:	b303      	cbz	r3, 800dfa0 <_strtod_l+0x8c0>
 800df5e:	4b9d      	ldr	r3, [pc, #628]	@ (800e1d4 <_strtod_l+0xaf4>)
 800df60:	465a      	mov	r2, fp
 800df62:	4013      	ands	r3, r2
 800df64:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800df68:	f04f 32ff 	mov.w	r2, #4294967295
 800df6c:	d81b      	bhi.n	800dfa6 <_strtod_l+0x8c6>
 800df6e:	0d1b      	lsrs	r3, r3, #20
 800df70:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800df74:	fa02 f303 	lsl.w	r3, r2, r3
 800df78:	4299      	cmp	r1, r3
 800df7a:	d119      	bne.n	800dfb0 <_strtod_l+0x8d0>
 800df7c:	4b96      	ldr	r3, [pc, #600]	@ (800e1d8 <_strtod_l+0xaf8>)
 800df7e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800df80:	429a      	cmp	r2, r3
 800df82:	d102      	bne.n	800df8a <_strtod_l+0x8aa>
 800df84:	3101      	adds	r1, #1
 800df86:	f43f adce 	beq.w	800db26 <_strtod_l+0x446>
 800df8a:	4b92      	ldr	r3, [pc, #584]	@ (800e1d4 <_strtod_l+0xaf4>)
 800df8c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800df8e:	401a      	ands	r2, r3
 800df90:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800df94:	f04f 0a00 	mov.w	sl, #0
 800df98:	9b08      	ldr	r3, [sp, #32]
 800df9a:	2b00      	cmp	r3, #0
 800df9c:	d1b9      	bne.n	800df12 <_strtod_l+0x832>
 800df9e:	e5cd      	b.n	800db3c <_strtod_l+0x45c>
 800dfa0:	f04f 33ff 	mov.w	r3, #4294967295
 800dfa4:	e7e8      	b.n	800df78 <_strtod_l+0x898>
 800dfa6:	4613      	mov	r3, r2
 800dfa8:	e7e6      	b.n	800df78 <_strtod_l+0x898>
 800dfaa:	ea53 030a 	orrs.w	r3, r3, sl
 800dfae:	d0a2      	beq.n	800def6 <_strtod_l+0x816>
 800dfb0:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800dfb2:	b1db      	cbz	r3, 800dfec <_strtod_l+0x90c>
 800dfb4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800dfb6:	4213      	tst	r3, r2
 800dfb8:	d0ee      	beq.n	800df98 <_strtod_l+0x8b8>
 800dfba:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800dfbc:	9a08      	ldr	r2, [sp, #32]
 800dfbe:	4650      	mov	r0, sl
 800dfc0:	4659      	mov	r1, fp
 800dfc2:	b1bb      	cbz	r3, 800dff4 <_strtod_l+0x914>
 800dfc4:	f7ff fb6e 	bl	800d6a4 <sulp>
 800dfc8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800dfcc:	ec53 2b10 	vmov	r2, r3, d0
 800dfd0:	f7f2 f964 	bl	800029c <__adddf3>
 800dfd4:	4682      	mov	sl, r0
 800dfd6:	468b      	mov	fp, r1
 800dfd8:	e7de      	b.n	800df98 <_strtod_l+0x8b8>
 800dfda:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800dfde:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800dfe2:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800dfe6:	f04f 3aff 	mov.w	sl, #4294967295
 800dfea:	e7d5      	b.n	800df98 <_strtod_l+0x8b8>
 800dfec:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800dfee:	ea13 0f0a 	tst.w	r3, sl
 800dff2:	e7e1      	b.n	800dfb8 <_strtod_l+0x8d8>
 800dff4:	f7ff fb56 	bl	800d6a4 <sulp>
 800dff8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800dffc:	ec53 2b10 	vmov	r2, r3, d0
 800e000:	f7f2 f94a 	bl	8000298 <__aeabi_dsub>
 800e004:	2200      	movs	r2, #0
 800e006:	2300      	movs	r3, #0
 800e008:	4682      	mov	sl, r0
 800e00a:	468b      	mov	fp, r1
 800e00c:	f7f2 fd64 	bl	8000ad8 <__aeabi_dcmpeq>
 800e010:	2800      	cmp	r0, #0
 800e012:	d0c1      	beq.n	800df98 <_strtod_l+0x8b8>
 800e014:	e61a      	b.n	800dc4c <_strtod_l+0x56c>
 800e016:	4641      	mov	r1, r8
 800e018:	4620      	mov	r0, r4
 800e01a:	f7ff facd 	bl	800d5b8 <__ratio>
 800e01e:	ec57 6b10 	vmov	r6, r7, d0
 800e022:	2200      	movs	r2, #0
 800e024:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800e028:	4630      	mov	r0, r6
 800e02a:	4639      	mov	r1, r7
 800e02c:	f7f2 fd68 	bl	8000b00 <__aeabi_dcmple>
 800e030:	2800      	cmp	r0, #0
 800e032:	d06f      	beq.n	800e114 <_strtod_l+0xa34>
 800e034:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e036:	2b00      	cmp	r3, #0
 800e038:	d17a      	bne.n	800e130 <_strtod_l+0xa50>
 800e03a:	f1ba 0f00 	cmp.w	sl, #0
 800e03e:	d158      	bne.n	800e0f2 <_strtod_l+0xa12>
 800e040:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e042:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800e046:	2b00      	cmp	r3, #0
 800e048:	d15a      	bne.n	800e100 <_strtod_l+0xa20>
 800e04a:	4b64      	ldr	r3, [pc, #400]	@ (800e1dc <_strtod_l+0xafc>)
 800e04c:	2200      	movs	r2, #0
 800e04e:	4630      	mov	r0, r6
 800e050:	4639      	mov	r1, r7
 800e052:	f7f2 fd4b 	bl	8000aec <__aeabi_dcmplt>
 800e056:	2800      	cmp	r0, #0
 800e058:	d159      	bne.n	800e10e <_strtod_l+0xa2e>
 800e05a:	4630      	mov	r0, r6
 800e05c:	4639      	mov	r1, r7
 800e05e:	4b60      	ldr	r3, [pc, #384]	@ (800e1e0 <_strtod_l+0xb00>)
 800e060:	2200      	movs	r2, #0
 800e062:	f7f2 fad1 	bl	8000608 <__aeabi_dmul>
 800e066:	4606      	mov	r6, r0
 800e068:	460f      	mov	r7, r1
 800e06a:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800e06e:	9606      	str	r6, [sp, #24]
 800e070:	9307      	str	r3, [sp, #28]
 800e072:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800e076:	4d57      	ldr	r5, [pc, #348]	@ (800e1d4 <_strtod_l+0xaf4>)
 800e078:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800e07c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e07e:	401d      	ands	r5, r3
 800e080:	4b58      	ldr	r3, [pc, #352]	@ (800e1e4 <_strtod_l+0xb04>)
 800e082:	429d      	cmp	r5, r3
 800e084:	f040 80b2 	bne.w	800e1ec <_strtod_l+0xb0c>
 800e088:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e08a:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800e08e:	ec4b ab10 	vmov	d0, sl, fp
 800e092:	f7ff f9c9 	bl	800d428 <__ulp>
 800e096:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800e09a:	ec51 0b10 	vmov	r0, r1, d0
 800e09e:	f7f2 fab3 	bl	8000608 <__aeabi_dmul>
 800e0a2:	4652      	mov	r2, sl
 800e0a4:	465b      	mov	r3, fp
 800e0a6:	f7f2 f8f9 	bl	800029c <__adddf3>
 800e0aa:	460b      	mov	r3, r1
 800e0ac:	4949      	ldr	r1, [pc, #292]	@ (800e1d4 <_strtod_l+0xaf4>)
 800e0ae:	4a4e      	ldr	r2, [pc, #312]	@ (800e1e8 <_strtod_l+0xb08>)
 800e0b0:	4019      	ands	r1, r3
 800e0b2:	4291      	cmp	r1, r2
 800e0b4:	4682      	mov	sl, r0
 800e0b6:	d942      	bls.n	800e13e <_strtod_l+0xa5e>
 800e0b8:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800e0ba:	4b47      	ldr	r3, [pc, #284]	@ (800e1d8 <_strtod_l+0xaf8>)
 800e0bc:	429a      	cmp	r2, r3
 800e0be:	d103      	bne.n	800e0c8 <_strtod_l+0x9e8>
 800e0c0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800e0c2:	3301      	adds	r3, #1
 800e0c4:	f43f ad2f 	beq.w	800db26 <_strtod_l+0x446>
 800e0c8:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 800e1d8 <_strtod_l+0xaf8>
 800e0cc:	f04f 3aff 	mov.w	sl, #4294967295
 800e0d0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800e0d2:	9805      	ldr	r0, [sp, #20]
 800e0d4:	f7fe fe7c 	bl	800cdd0 <_Bfree>
 800e0d8:	9805      	ldr	r0, [sp, #20]
 800e0da:	4649      	mov	r1, r9
 800e0dc:	f7fe fe78 	bl	800cdd0 <_Bfree>
 800e0e0:	9805      	ldr	r0, [sp, #20]
 800e0e2:	4641      	mov	r1, r8
 800e0e4:	f7fe fe74 	bl	800cdd0 <_Bfree>
 800e0e8:	9805      	ldr	r0, [sp, #20]
 800e0ea:	4621      	mov	r1, r4
 800e0ec:	f7fe fe70 	bl	800cdd0 <_Bfree>
 800e0f0:	e619      	b.n	800dd26 <_strtod_l+0x646>
 800e0f2:	f1ba 0f01 	cmp.w	sl, #1
 800e0f6:	d103      	bne.n	800e100 <_strtod_l+0xa20>
 800e0f8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e0fa:	2b00      	cmp	r3, #0
 800e0fc:	f43f ada6 	beq.w	800dc4c <_strtod_l+0x56c>
 800e100:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 800e1b0 <_strtod_l+0xad0>
 800e104:	4f35      	ldr	r7, [pc, #212]	@ (800e1dc <_strtod_l+0xafc>)
 800e106:	ed8d 7b06 	vstr	d7, [sp, #24]
 800e10a:	2600      	movs	r6, #0
 800e10c:	e7b1      	b.n	800e072 <_strtod_l+0x992>
 800e10e:	4f34      	ldr	r7, [pc, #208]	@ (800e1e0 <_strtod_l+0xb00>)
 800e110:	2600      	movs	r6, #0
 800e112:	e7aa      	b.n	800e06a <_strtod_l+0x98a>
 800e114:	4b32      	ldr	r3, [pc, #200]	@ (800e1e0 <_strtod_l+0xb00>)
 800e116:	4630      	mov	r0, r6
 800e118:	4639      	mov	r1, r7
 800e11a:	2200      	movs	r2, #0
 800e11c:	f7f2 fa74 	bl	8000608 <__aeabi_dmul>
 800e120:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e122:	4606      	mov	r6, r0
 800e124:	460f      	mov	r7, r1
 800e126:	2b00      	cmp	r3, #0
 800e128:	d09f      	beq.n	800e06a <_strtod_l+0x98a>
 800e12a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800e12e:	e7a0      	b.n	800e072 <_strtod_l+0x992>
 800e130:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800e1b8 <_strtod_l+0xad8>
 800e134:	ed8d 7b06 	vstr	d7, [sp, #24]
 800e138:	ec57 6b17 	vmov	r6, r7, d7
 800e13c:	e799      	b.n	800e072 <_strtod_l+0x992>
 800e13e:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800e142:	9b08      	ldr	r3, [sp, #32]
 800e144:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 800e148:	2b00      	cmp	r3, #0
 800e14a:	d1c1      	bne.n	800e0d0 <_strtod_l+0x9f0>
 800e14c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800e150:	0d1b      	lsrs	r3, r3, #20
 800e152:	051b      	lsls	r3, r3, #20
 800e154:	429d      	cmp	r5, r3
 800e156:	d1bb      	bne.n	800e0d0 <_strtod_l+0x9f0>
 800e158:	4630      	mov	r0, r6
 800e15a:	4639      	mov	r1, r7
 800e15c:	f7f2 fdb4 	bl	8000cc8 <__aeabi_d2lz>
 800e160:	f7f2 fa24 	bl	80005ac <__aeabi_l2d>
 800e164:	4602      	mov	r2, r0
 800e166:	460b      	mov	r3, r1
 800e168:	4630      	mov	r0, r6
 800e16a:	4639      	mov	r1, r7
 800e16c:	f7f2 f894 	bl	8000298 <__aeabi_dsub>
 800e170:	460b      	mov	r3, r1
 800e172:	4602      	mov	r2, r0
 800e174:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800e178:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800e17c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e17e:	ea46 060a 	orr.w	r6, r6, sl
 800e182:	431e      	orrs	r6, r3
 800e184:	d06f      	beq.n	800e266 <_strtod_l+0xb86>
 800e186:	a30e      	add	r3, pc, #56	@ (adr r3, 800e1c0 <_strtod_l+0xae0>)
 800e188:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e18c:	f7f2 fcae 	bl	8000aec <__aeabi_dcmplt>
 800e190:	2800      	cmp	r0, #0
 800e192:	f47f acd3 	bne.w	800db3c <_strtod_l+0x45c>
 800e196:	a30c      	add	r3, pc, #48	@ (adr r3, 800e1c8 <_strtod_l+0xae8>)
 800e198:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e19c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800e1a0:	f7f2 fcc2 	bl	8000b28 <__aeabi_dcmpgt>
 800e1a4:	2800      	cmp	r0, #0
 800e1a6:	d093      	beq.n	800e0d0 <_strtod_l+0x9f0>
 800e1a8:	e4c8      	b.n	800db3c <_strtod_l+0x45c>
 800e1aa:	bf00      	nop
 800e1ac:	f3af 8000 	nop.w
 800e1b0:	00000000 	.word	0x00000000
 800e1b4:	bff00000 	.word	0xbff00000
 800e1b8:	00000000 	.word	0x00000000
 800e1bc:	3ff00000 	.word	0x3ff00000
 800e1c0:	94a03595 	.word	0x94a03595
 800e1c4:	3fdfffff 	.word	0x3fdfffff
 800e1c8:	35afe535 	.word	0x35afe535
 800e1cc:	3fe00000 	.word	0x3fe00000
 800e1d0:	000fffff 	.word	0x000fffff
 800e1d4:	7ff00000 	.word	0x7ff00000
 800e1d8:	7fefffff 	.word	0x7fefffff
 800e1dc:	3ff00000 	.word	0x3ff00000
 800e1e0:	3fe00000 	.word	0x3fe00000
 800e1e4:	7fe00000 	.word	0x7fe00000
 800e1e8:	7c9fffff 	.word	0x7c9fffff
 800e1ec:	9b08      	ldr	r3, [sp, #32]
 800e1ee:	b323      	cbz	r3, 800e23a <_strtod_l+0xb5a>
 800e1f0:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800e1f4:	d821      	bhi.n	800e23a <_strtod_l+0xb5a>
 800e1f6:	a328      	add	r3, pc, #160	@ (adr r3, 800e298 <_strtod_l+0xbb8>)
 800e1f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e1fc:	4630      	mov	r0, r6
 800e1fe:	4639      	mov	r1, r7
 800e200:	f7f2 fc7e 	bl	8000b00 <__aeabi_dcmple>
 800e204:	b1a0      	cbz	r0, 800e230 <_strtod_l+0xb50>
 800e206:	4639      	mov	r1, r7
 800e208:	4630      	mov	r0, r6
 800e20a:	f7f2 fcd5 	bl	8000bb8 <__aeabi_d2uiz>
 800e20e:	2801      	cmp	r0, #1
 800e210:	bf38      	it	cc
 800e212:	2001      	movcc	r0, #1
 800e214:	f7f2 f97e 	bl	8000514 <__aeabi_ui2d>
 800e218:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e21a:	4606      	mov	r6, r0
 800e21c:	460f      	mov	r7, r1
 800e21e:	b9fb      	cbnz	r3, 800e260 <_strtod_l+0xb80>
 800e220:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800e224:	9014      	str	r0, [sp, #80]	@ 0x50
 800e226:	9315      	str	r3, [sp, #84]	@ 0x54
 800e228:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800e22c:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800e230:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800e232:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800e236:	1b5b      	subs	r3, r3, r5
 800e238:	9311      	str	r3, [sp, #68]	@ 0x44
 800e23a:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800e23e:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800e242:	f7ff f8f1 	bl	800d428 <__ulp>
 800e246:	4650      	mov	r0, sl
 800e248:	ec53 2b10 	vmov	r2, r3, d0
 800e24c:	4659      	mov	r1, fp
 800e24e:	f7f2 f9db 	bl	8000608 <__aeabi_dmul>
 800e252:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800e256:	f7f2 f821 	bl	800029c <__adddf3>
 800e25a:	4682      	mov	sl, r0
 800e25c:	468b      	mov	fp, r1
 800e25e:	e770      	b.n	800e142 <_strtod_l+0xa62>
 800e260:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800e264:	e7e0      	b.n	800e228 <_strtod_l+0xb48>
 800e266:	a30e      	add	r3, pc, #56	@ (adr r3, 800e2a0 <_strtod_l+0xbc0>)
 800e268:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e26c:	f7f2 fc3e 	bl	8000aec <__aeabi_dcmplt>
 800e270:	e798      	b.n	800e1a4 <_strtod_l+0xac4>
 800e272:	2300      	movs	r3, #0
 800e274:	930e      	str	r3, [sp, #56]	@ 0x38
 800e276:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800e278:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800e27a:	6013      	str	r3, [r2, #0]
 800e27c:	f7ff ba6d 	b.w	800d75a <_strtod_l+0x7a>
 800e280:	2a65      	cmp	r2, #101	@ 0x65
 800e282:	f43f ab68 	beq.w	800d956 <_strtod_l+0x276>
 800e286:	2a45      	cmp	r2, #69	@ 0x45
 800e288:	f43f ab65 	beq.w	800d956 <_strtod_l+0x276>
 800e28c:	2301      	movs	r3, #1
 800e28e:	f7ff bba0 	b.w	800d9d2 <_strtod_l+0x2f2>
 800e292:	bf00      	nop
 800e294:	f3af 8000 	nop.w
 800e298:	ffc00000 	.word	0xffc00000
 800e29c:	41dfffff 	.word	0x41dfffff
 800e2a0:	94a03595 	.word	0x94a03595
 800e2a4:	3fcfffff 	.word	0x3fcfffff

0800e2a8 <_strtod_r>:
 800e2a8:	4b01      	ldr	r3, [pc, #4]	@ (800e2b0 <_strtod_r+0x8>)
 800e2aa:	f7ff ba19 	b.w	800d6e0 <_strtod_l>
 800e2ae:	bf00      	nop
 800e2b0:	2000d190 	.word	0x2000d190

0800e2b4 <_strtol_l.isra.0>:
 800e2b4:	2b24      	cmp	r3, #36	@ 0x24
 800e2b6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e2ba:	4686      	mov	lr, r0
 800e2bc:	4690      	mov	r8, r2
 800e2be:	d801      	bhi.n	800e2c4 <_strtol_l.isra.0+0x10>
 800e2c0:	2b01      	cmp	r3, #1
 800e2c2:	d106      	bne.n	800e2d2 <_strtol_l.isra.0+0x1e>
 800e2c4:	f7fd fd8c 	bl	800bde0 <__errno>
 800e2c8:	2316      	movs	r3, #22
 800e2ca:	6003      	str	r3, [r0, #0]
 800e2cc:	2000      	movs	r0, #0
 800e2ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e2d2:	4834      	ldr	r0, [pc, #208]	@ (800e3a4 <_strtol_l.isra.0+0xf0>)
 800e2d4:	460d      	mov	r5, r1
 800e2d6:	462a      	mov	r2, r5
 800e2d8:	f815 4b01 	ldrb.w	r4, [r5], #1
 800e2dc:	5d06      	ldrb	r6, [r0, r4]
 800e2de:	f016 0608 	ands.w	r6, r6, #8
 800e2e2:	d1f8      	bne.n	800e2d6 <_strtol_l.isra.0+0x22>
 800e2e4:	2c2d      	cmp	r4, #45	@ 0x2d
 800e2e6:	d110      	bne.n	800e30a <_strtol_l.isra.0+0x56>
 800e2e8:	782c      	ldrb	r4, [r5, #0]
 800e2ea:	2601      	movs	r6, #1
 800e2ec:	1c95      	adds	r5, r2, #2
 800e2ee:	f033 0210 	bics.w	r2, r3, #16
 800e2f2:	d115      	bne.n	800e320 <_strtol_l.isra.0+0x6c>
 800e2f4:	2c30      	cmp	r4, #48	@ 0x30
 800e2f6:	d10d      	bne.n	800e314 <_strtol_l.isra.0+0x60>
 800e2f8:	782a      	ldrb	r2, [r5, #0]
 800e2fa:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800e2fe:	2a58      	cmp	r2, #88	@ 0x58
 800e300:	d108      	bne.n	800e314 <_strtol_l.isra.0+0x60>
 800e302:	786c      	ldrb	r4, [r5, #1]
 800e304:	3502      	adds	r5, #2
 800e306:	2310      	movs	r3, #16
 800e308:	e00a      	b.n	800e320 <_strtol_l.isra.0+0x6c>
 800e30a:	2c2b      	cmp	r4, #43	@ 0x2b
 800e30c:	bf04      	itt	eq
 800e30e:	782c      	ldrbeq	r4, [r5, #0]
 800e310:	1c95      	addeq	r5, r2, #2
 800e312:	e7ec      	b.n	800e2ee <_strtol_l.isra.0+0x3a>
 800e314:	2b00      	cmp	r3, #0
 800e316:	d1f6      	bne.n	800e306 <_strtol_l.isra.0+0x52>
 800e318:	2c30      	cmp	r4, #48	@ 0x30
 800e31a:	bf14      	ite	ne
 800e31c:	230a      	movne	r3, #10
 800e31e:	2308      	moveq	r3, #8
 800e320:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800e324:	f10c 3cff 	add.w	ip, ip, #4294967295
 800e328:	2200      	movs	r2, #0
 800e32a:	fbbc f9f3 	udiv	r9, ip, r3
 800e32e:	4610      	mov	r0, r2
 800e330:	fb03 ca19 	mls	sl, r3, r9, ip
 800e334:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800e338:	2f09      	cmp	r7, #9
 800e33a:	d80f      	bhi.n	800e35c <_strtol_l.isra.0+0xa8>
 800e33c:	463c      	mov	r4, r7
 800e33e:	42a3      	cmp	r3, r4
 800e340:	dd1b      	ble.n	800e37a <_strtol_l.isra.0+0xc6>
 800e342:	1c57      	adds	r7, r2, #1
 800e344:	d007      	beq.n	800e356 <_strtol_l.isra.0+0xa2>
 800e346:	4581      	cmp	r9, r0
 800e348:	d314      	bcc.n	800e374 <_strtol_l.isra.0+0xc0>
 800e34a:	d101      	bne.n	800e350 <_strtol_l.isra.0+0x9c>
 800e34c:	45a2      	cmp	sl, r4
 800e34e:	db11      	blt.n	800e374 <_strtol_l.isra.0+0xc0>
 800e350:	fb00 4003 	mla	r0, r0, r3, r4
 800e354:	2201      	movs	r2, #1
 800e356:	f815 4b01 	ldrb.w	r4, [r5], #1
 800e35a:	e7eb      	b.n	800e334 <_strtol_l.isra.0+0x80>
 800e35c:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800e360:	2f19      	cmp	r7, #25
 800e362:	d801      	bhi.n	800e368 <_strtol_l.isra.0+0xb4>
 800e364:	3c37      	subs	r4, #55	@ 0x37
 800e366:	e7ea      	b.n	800e33e <_strtol_l.isra.0+0x8a>
 800e368:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800e36c:	2f19      	cmp	r7, #25
 800e36e:	d804      	bhi.n	800e37a <_strtol_l.isra.0+0xc6>
 800e370:	3c57      	subs	r4, #87	@ 0x57
 800e372:	e7e4      	b.n	800e33e <_strtol_l.isra.0+0x8a>
 800e374:	f04f 32ff 	mov.w	r2, #4294967295
 800e378:	e7ed      	b.n	800e356 <_strtol_l.isra.0+0xa2>
 800e37a:	1c53      	adds	r3, r2, #1
 800e37c:	d108      	bne.n	800e390 <_strtol_l.isra.0+0xdc>
 800e37e:	2322      	movs	r3, #34	@ 0x22
 800e380:	f8ce 3000 	str.w	r3, [lr]
 800e384:	4660      	mov	r0, ip
 800e386:	f1b8 0f00 	cmp.w	r8, #0
 800e38a:	d0a0      	beq.n	800e2ce <_strtol_l.isra.0+0x1a>
 800e38c:	1e69      	subs	r1, r5, #1
 800e38e:	e006      	b.n	800e39e <_strtol_l.isra.0+0xea>
 800e390:	b106      	cbz	r6, 800e394 <_strtol_l.isra.0+0xe0>
 800e392:	4240      	negs	r0, r0
 800e394:	f1b8 0f00 	cmp.w	r8, #0
 800e398:	d099      	beq.n	800e2ce <_strtol_l.isra.0+0x1a>
 800e39a:	2a00      	cmp	r2, #0
 800e39c:	d1f6      	bne.n	800e38c <_strtol_l.isra.0+0xd8>
 800e39e:	f8c8 1000 	str.w	r1, [r8]
 800e3a2:	e794      	b.n	800e2ce <_strtol_l.isra.0+0x1a>
 800e3a4:	08010e41 	.word	0x08010e41

0800e3a8 <_strtol_r>:
 800e3a8:	f7ff bf84 	b.w	800e2b4 <_strtol_l.isra.0>

0800e3ac <__ssputs_r>:
 800e3ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e3b0:	688e      	ldr	r6, [r1, #8]
 800e3b2:	461f      	mov	r7, r3
 800e3b4:	42be      	cmp	r6, r7
 800e3b6:	680b      	ldr	r3, [r1, #0]
 800e3b8:	4682      	mov	sl, r0
 800e3ba:	460c      	mov	r4, r1
 800e3bc:	4690      	mov	r8, r2
 800e3be:	d82d      	bhi.n	800e41c <__ssputs_r+0x70>
 800e3c0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800e3c4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800e3c8:	d026      	beq.n	800e418 <__ssputs_r+0x6c>
 800e3ca:	6965      	ldr	r5, [r4, #20]
 800e3cc:	6909      	ldr	r1, [r1, #16]
 800e3ce:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800e3d2:	eba3 0901 	sub.w	r9, r3, r1
 800e3d6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800e3da:	1c7b      	adds	r3, r7, #1
 800e3dc:	444b      	add	r3, r9
 800e3de:	106d      	asrs	r5, r5, #1
 800e3e0:	429d      	cmp	r5, r3
 800e3e2:	bf38      	it	cc
 800e3e4:	461d      	movcc	r5, r3
 800e3e6:	0553      	lsls	r3, r2, #21
 800e3e8:	d527      	bpl.n	800e43a <__ssputs_r+0x8e>
 800e3ea:	4629      	mov	r1, r5
 800e3ec:	f7fe fc24 	bl	800cc38 <_malloc_r>
 800e3f0:	4606      	mov	r6, r0
 800e3f2:	b360      	cbz	r0, 800e44e <__ssputs_r+0xa2>
 800e3f4:	6921      	ldr	r1, [r4, #16]
 800e3f6:	464a      	mov	r2, r9
 800e3f8:	f7fd fd1f 	bl	800be3a <memcpy>
 800e3fc:	89a3      	ldrh	r3, [r4, #12]
 800e3fe:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800e402:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e406:	81a3      	strh	r3, [r4, #12]
 800e408:	6126      	str	r6, [r4, #16]
 800e40a:	6165      	str	r5, [r4, #20]
 800e40c:	444e      	add	r6, r9
 800e40e:	eba5 0509 	sub.w	r5, r5, r9
 800e412:	6026      	str	r6, [r4, #0]
 800e414:	60a5      	str	r5, [r4, #8]
 800e416:	463e      	mov	r6, r7
 800e418:	42be      	cmp	r6, r7
 800e41a:	d900      	bls.n	800e41e <__ssputs_r+0x72>
 800e41c:	463e      	mov	r6, r7
 800e41e:	6820      	ldr	r0, [r4, #0]
 800e420:	4632      	mov	r2, r6
 800e422:	4641      	mov	r1, r8
 800e424:	f000 fb7c 	bl	800eb20 <memmove>
 800e428:	68a3      	ldr	r3, [r4, #8]
 800e42a:	1b9b      	subs	r3, r3, r6
 800e42c:	60a3      	str	r3, [r4, #8]
 800e42e:	6823      	ldr	r3, [r4, #0]
 800e430:	4433      	add	r3, r6
 800e432:	6023      	str	r3, [r4, #0]
 800e434:	2000      	movs	r0, #0
 800e436:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e43a:	462a      	mov	r2, r5
 800e43c:	f000 ff3d 	bl	800f2ba <_realloc_r>
 800e440:	4606      	mov	r6, r0
 800e442:	2800      	cmp	r0, #0
 800e444:	d1e0      	bne.n	800e408 <__ssputs_r+0x5c>
 800e446:	6921      	ldr	r1, [r4, #16]
 800e448:	4650      	mov	r0, sl
 800e44a:	f7fe fb81 	bl	800cb50 <_free_r>
 800e44e:	230c      	movs	r3, #12
 800e450:	f8ca 3000 	str.w	r3, [sl]
 800e454:	89a3      	ldrh	r3, [r4, #12]
 800e456:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e45a:	81a3      	strh	r3, [r4, #12]
 800e45c:	f04f 30ff 	mov.w	r0, #4294967295
 800e460:	e7e9      	b.n	800e436 <__ssputs_r+0x8a>
	...

0800e464 <_svfiprintf_r>:
 800e464:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e468:	4698      	mov	r8, r3
 800e46a:	898b      	ldrh	r3, [r1, #12]
 800e46c:	061b      	lsls	r3, r3, #24
 800e46e:	b09d      	sub	sp, #116	@ 0x74
 800e470:	4607      	mov	r7, r0
 800e472:	460d      	mov	r5, r1
 800e474:	4614      	mov	r4, r2
 800e476:	d510      	bpl.n	800e49a <_svfiprintf_r+0x36>
 800e478:	690b      	ldr	r3, [r1, #16]
 800e47a:	b973      	cbnz	r3, 800e49a <_svfiprintf_r+0x36>
 800e47c:	2140      	movs	r1, #64	@ 0x40
 800e47e:	f7fe fbdb 	bl	800cc38 <_malloc_r>
 800e482:	6028      	str	r0, [r5, #0]
 800e484:	6128      	str	r0, [r5, #16]
 800e486:	b930      	cbnz	r0, 800e496 <_svfiprintf_r+0x32>
 800e488:	230c      	movs	r3, #12
 800e48a:	603b      	str	r3, [r7, #0]
 800e48c:	f04f 30ff 	mov.w	r0, #4294967295
 800e490:	b01d      	add	sp, #116	@ 0x74
 800e492:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e496:	2340      	movs	r3, #64	@ 0x40
 800e498:	616b      	str	r3, [r5, #20]
 800e49a:	2300      	movs	r3, #0
 800e49c:	9309      	str	r3, [sp, #36]	@ 0x24
 800e49e:	2320      	movs	r3, #32
 800e4a0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800e4a4:	f8cd 800c 	str.w	r8, [sp, #12]
 800e4a8:	2330      	movs	r3, #48	@ 0x30
 800e4aa:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800e648 <_svfiprintf_r+0x1e4>
 800e4ae:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800e4b2:	f04f 0901 	mov.w	r9, #1
 800e4b6:	4623      	mov	r3, r4
 800e4b8:	469a      	mov	sl, r3
 800e4ba:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e4be:	b10a      	cbz	r2, 800e4c4 <_svfiprintf_r+0x60>
 800e4c0:	2a25      	cmp	r2, #37	@ 0x25
 800e4c2:	d1f9      	bne.n	800e4b8 <_svfiprintf_r+0x54>
 800e4c4:	ebba 0b04 	subs.w	fp, sl, r4
 800e4c8:	d00b      	beq.n	800e4e2 <_svfiprintf_r+0x7e>
 800e4ca:	465b      	mov	r3, fp
 800e4cc:	4622      	mov	r2, r4
 800e4ce:	4629      	mov	r1, r5
 800e4d0:	4638      	mov	r0, r7
 800e4d2:	f7ff ff6b 	bl	800e3ac <__ssputs_r>
 800e4d6:	3001      	adds	r0, #1
 800e4d8:	f000 80a7 	beq.w	800e62a <_svfiprintf_r+0x1c6>
 800e4dc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e4de:	445a      	add	r2, fp
 800e4e0:	9209      	str	r2, [sp, #36]	@ 0x24
 800e4e2:	f89a 3000 	ldrb.w	r3, [sl]
 800e4e6:	2b00      	cmp	r3, #0
 800e4e8:	f000 809f 	beq.w	800e62a <_svfiprintf_r+0x1c6>
 800e4ec:	2300      	movs	r3, #0
 800e4ee:	f04f 32ff 	mov.w	r2, #4294967295
 800e4f2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e4f6:	f10a 0a01 	add.w	sl, sl, #1
 800e4fa:	9304      	str	r3, [sp, #16]
 800e4fc:	9307      	str	r3, [sp, #28]
 800e4fe:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800e502:	931a      	str	r3, [sp, #104]	@ 0x68
 800e504:	4654      	mov	r4, sl
 800e506:	2205      	movs	r2, #5
 800e508:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e50c:	484e      	ldr	r0, [pc, #312]	@ (800e648 <_svfiprintf_r+0x1e4>)
 800e50e:	f7f1 fe67 	bl	80001e0 <memchr>
 800e512:	9a04      	ldr	r2, [sp, #16]
 800e514:	b9d8      	cbnz	r0, 800e54e <_svfiprintf_r+0xea>
 800e516:	06d0      	lsls	r0, r2, #27
 800e518:	bf44      	itt	mi
 800e51a:	2320      	movmi	r3, #32
 800e51c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e520:	0711      	lsls	r1, r2, #28
 800e522:	bf44      	itt	mi
 800e524:	232b      	movmi	r3, #43	@ 0x2b
 800e526:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e52a:	f89a 3000 	ldrb.w	r3, [sl]
 800e52e:	2b2a      	cmp	r3, #42	@ 0x2a
 800e530:	d015      	beq.n	800e55e <_svfiprintf_r+0xfa>
 800e532:	9a07      	ldr	r2, [sp, #28]
 800e534:	4654      	mov	r4, sl
 800e536:	2000      	movs	r0, #0
 800e538:	f04f 0c0a 	mov.w	ip, #10
 800e53c:	4621      	mov	r1, r4
 800e53e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e542:	3b30      	subs	r3, #48	@ 0x30
 800e544:	2b09      	cmp	r3, #9
 800e546:	d94b      	bls.n	800e5e0 <_svfiprintf_r+0x17c>
 800e548:	b1b0      	cbz	r0, 800e578 <_svfiprintf_r+0x114>
 800e54a:	9207      	str	r2, [sp, #28]
 800e54c:	e014      	b.n	800e578 <_svfiprintf_r+0x114>
 800e54e:	eba0 0308 	sub.w	r3, r0, r8
 800e552:	fa09 f303 	lsl.w	r3, r9, r3
 800e556:	4313      	orrs	r3, r2
 800e558:	9304      	str	r3, [sp, #16]
 800e55a:	46a2      	mov	sl, r4
 800e55c:	e7d2      	b.n	800e504 <_svfiprintf_r+0xa0>
 800e55e:	9b03      	ldr	r3, [sp, #12]
 800e560:	1d19      	adds	r1, r3, #4
 800e562:	681b      	ldr	r3, [r3, #0]
 800e564:	9103      	str	r1, [sp, #12]
 800e566:	2b00      	cmp	r3, #0
 800e568:	bfbb      	ittet	lt
 800e56a:	425b      	neglt	r3, r3
 800e56c:	f042 0202 	orrlt.w	r2, r2, #2
 800e570:	9307      	strge	r3, [sp, #28]
 800e572:	9307      	strlt	r3, [sp, #28]
 800e574:	bfb8      	it	lt
 800e576:	9204      	strlt	r2, [sp, #16]
 800e578:	7823      	ldrb	r3, [r4, #0]
 800e57a:	2b2e      	cmp	r3, #46	@ 0x2e
 800e57c:	d10a      	bne.n	800e594 <_svfiprintf_r+0x130>
 800e57e:	7863      	ldrb	r3, [r4, #1]
 800e580:	2b2a      	cmp	r3, #42	@ 0x2a
 800e582:	d132      	bne.n	800e5ea <_svfiprintf_r+0x186>
 800e584:	9b03      	ldr	r3, [sp, #12]
 800e586:	1d1a      	adds	r2, r3, #4
 800e588:	681b      	ldr	r3, [r3, #0]
 800e58a:	9203      	str	r2, [sp, #12]
 800e58c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800e590:	3402      	adds	r4, #2
 800e592:	9305      	str	r3, [sp, #20]
 800e594:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800e658 <_svfiprintf_r+0x1f4>
 800e598:	7821      	ldrb	r1, [r4, #0]
 800e59a:	2203      	movs	r2, #3
 800e59c:	4650      	mov	r0, sl
 800e59e:	f7f1 fe1f 	bl	80001e0 <memchr>
 800e5a2:	b138      	cbz	r0, 800e5b4 <_svfiprintf_r+0x150>
 800e5a4:	9b04      	ldr	r3, [sp, #16]
 800e5a6:	eba0 000a 	sub.w	r0, r0, sl
 800e5aa:	2240      	movs	r2, #64	@ 0x40
 800e5ac:	4082      	lsls	r2, r0
 800e5ae:	4313      	orrs	r3, r2
 800e5b0:	3401      	adds	r4, #1
 800e5b2:	9304      	str	r3, [sp, #16]
 800e5b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e5b8:	4824      	ldr	r0, [pc, #144]	@ (800e64c <_svfiprintf_r+0x1e8>)
 800e5ba:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800e5be:	2206      	movs	r2, #6
 800e5c0:	f7f1 fe0e 	bl	80001e0 <memchr>
 800e5c4:	2800      	cmp	r0, #0
 800e5c6:	d036      	beq.n	800e636 <_svfiprintf_r+0x1d2>
 800e5c8:	4b21      	ldr	r3, [pc, #132]	@ (800e650 <_svfiprintf_r+0x1ec>)
 800e5ca:	bb1b      	cbnz	r3, 800e614 <_svfiprintf_r+0x1b0>
 800e5cc:	9b03      	ldr	r3, [sp, #12]
 800e5ce:	3307      	adds	r3, #7
 800e5d0:	f023 0307 	bic.w	r3, r3, #7
 800e5d4:	3308      	adds	r3, #8
 800e5d6:	9303      	str	r3, [sp, #12]
 800e5d8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e5da:	4433      	add	r3, r6
 800e5dc:	9309      	str	r3, [sp, #36]	@ 0x24
 800e5de:	e76a      	b.n	800e4b6 <_svfiprintf_r+0x52>
 800e5e0:	fb0c 3202 	mla	r2, ip, r2, r3
 800e5e4:	460c      	mov	r4, r1
 800e5e6:	2001      	movs	r0, #1
 800e5e8:	e7a8      	b.n	800e53c <_svfiprintf_r+0xd8>
 800e5ea:	2300      	movs	r3, #0
 800e5ec:	3401      	adds	r4, #1
 800e5ee:	9305      	str	r3, [sp, #20]
 800e5f0:	4619      	mov	r1, r3
 800e5f2:	f04f 0c0a 	mov.w	ip, #10
 800e5f6:	4620      	mov	r0, r4
 800e5f8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e5fc:	3a30      	subs	r2, #48	@ 0x30
 800e5fe:	2a09      	cmp	r2, #9
 800e600:	d903      	bls.n	800e60a <_svfiprintf_r+0x1a6>
 800e602:	2b00      	cmp	r3, #0
 800e604:	d0c6      	beq.n	800e594 <_svfiprintf_r+0x130>
 800e606:	9105      	str	r1, [sp, #20]
 800e608:	e7c4      	b.n	800e594 <_svfiprintf_r+0x130>
 800e60a:	fb0c 2101 	mla	r1, ip, r1, r2
 800e60e:	4604      	mov	r4, r0
 800e610:	2301      	movs	r3, #1
 800e612:	e7f0      	b.n	800e5f6 <_svfiprintf_r+0x192>
 800e614:	ab03      	add	r3, sp, #12
 800e616:	9300      	str	r3, [sp, #0]
 800e618:	462a      	mov	r2, r5
 800e61a:	4b0e      	ldr	r3, [pc, #56]	@ (800e654 <_svfiprintf_r+0x1f0>)
 800e61c:	a904      	add	r1, sp, #16
 800e61e:	4638      	mov	r0, r7
 800e620:	f7fc fb66 	bl	800acf0 <_printf_float>
 800e624:	1c42      	adds	r2, r0, #1
 800e626:	4606      	mov	r6, r0
 800e628:	d1d6      	bne.n	800e5d8 <_svfiprintf_r+0x174>
 800e62a:	89ab      	ldrh	r3, [r5, #12]
 800e62c:	065b      	lsls	r3, r3, #25
 800e62e:	f53f af2d 	bmi.w	800e48c <_svfiprintf_r+0x28>
 800e632:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800e634:	e72c      	b.n	800e490 <_svfiprintf_r+0x2c>
 800e636:	ab03      	add	r3, sp, #12
 800e638:	9300      	str	r3, [sp, #0]
 800e63a:	462a      	mov	r2, r5
 800e63c:	4b05      	ldr	r3, [pc, #20]	@ (800e654 <_svfiprintf_r+0x1f0>)
 800e63e:	a904      	add	r1, sp, #16
 800e640:	4638      	mov	r0, r7
 800e642:	f7fc fded 	bl	800b220 <_printf_i>
 800e646:	e7ed      	b.n	800e624 <_svfiprintf_r+0x1c0>
 800e648:	08010c75 	.word	0x08010c75
 800e64c:	08010c7f 	.word	0x08010c7f
 800e650:	0800acf1 	.word	0x0800acf1
 800e654:	0800e3ad 	.word	0x0800e3ad
 800e658:	08010c7b 	.word	0x08010c7b

0800e65c <__sfputc_r>:
 800e65c:	6893      	ldr	r3, [r2, #8]
 800e65e:	3b01      	subs	r3, #1
 800e660:	2b00      	cmp	r3, #0
 800e662:	b410      	push	{r4}
 800e664:	6093      	str	r3, [r2, #8]
 800e666:	da08      	bge.n	800e67a <__sfputc_r+0x1e>
 800e668:	6994      	ldr	r4, [r2, #24]
 800e66a:	42a3      	cmp	r3, r4
 800e66c:	db01      	blt.n	800e672 <__sfputc_r+0x16>
 800e66e:	290a      	cmp	r1, #10
 800e670:	d103      	bne.n	800e67a <__sfputc_r+0x1e>
 800e672:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e676:	f7fd bacc 	b.w	800bc12 <__swbuf_r>
 800e67a:	6813      	ldr	r3, [r2, #0]
 800e67c:	1c58      	adds	r0, r3, #1
 800e67e:	6010      	str	r0, [r2, #0]
 800e680:	7019      	strb	r1, [r3, #0]
 800e682:	4608      	mov	r0, r1
 800e684:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e688:	4770      	bx	lr

0800e68a <__sfputs_r>:
 800e68a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e68c:	4606      	mov	r6, r0
 800e68e:	460f      	mov	r7, r1
 800e690:	4614      	mov	r4, r2
 800e692:	18d5      	adds	r5, r2, r3
 800e694:	42ac      	cmp	r4, r5
 800e696:	d101      	bne.n	800e69c <__sfputs_r+0x12>
 800e698:	2000      	movs	r0, #0
 800e69a:	e007      	b.n	800e6ac <__sfputs_r+0x22>
 800e69c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e6a0:	463a      	mov	r2, r7
 800e6a2:	4630      	mov	r0, r6
 800e6a4:	f7ff ffda 	bl	800e65c <__sfputc_r>
 800e6a8:	1c43      	adds	r3, r0, #1
 800e6aa:	d1f3      	bne.n	800e694 <__sfputs_r+0xa>
 800e6ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800e6b0 <_vfiprintf_r>:
 800e6b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e6b4:	460d      	mov	r5, r1
 800e6b6:	b09d      	sub	sp, #116	@ 0x74
 800e6b8:	4614      	mov	r4, r2
 800e6ba:	4698      	mov	r8, r3
 800e6bc:	4606      	mov	r6, r0
 800e6be:	b118      	cbz	r0, 800e6c8 <_vfiprintf_r+0x18>
 800e6c0:	6a03      	ldr	r3, [r0, #32]
 800e6c2:	b90b      	cbnz	r3, 800e6c8 <_vfiprintf_r+0x18>
 800e6c4:	f7fd f964 	bl	800b990 <__sinit>
 800e6c8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e6ca:	07d9      	lsls	r1, r3, #31
 800e6cc:	d405      	bmi.n	800e6da <_vfiprintf_r+0x2a>
 800e6ce:	89ab      	ldrh	r3, [r5, #12]
 800e6d0:	059a      	lsls	r2, r3, #22
 800e6d2:	d402      	bmi.n	800e6da <_vfiprintf_r+0x2a>
 800e6d4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e6d6:	f7fd fbae 	bl	800be36 <__retarget_lock_acquire_recursive>
 800e6da:	89ab      	ldrh	r3, [r5, #12]
 800e6dc:	071b      	lsls	r3, r3, #28
 800e6de:	d501      	bpl.n	800e6e4 <_vfiprintf_r+0x34>
 800e6e0:	692b      	ldr	r3, [r5, #16]
 800e6e2:	b99b      	cbnz	r3, 800e70c <_vfiprintf_r+0x5c>
 800e6e4:	4629      	mov	r1, r5
 800e6e6:	4630      	mov	r0, r6
 800e6e8:	f7fd fad2 	bl	800bc90 <__swsetup_r>
 800e6ec:	b170      	cbz	r0, 800e70c <_vfiprintf_r+0x5c>
 800e6ee:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e6f0:	07dc      	lsls	r4, r3, #31
 800e6f2:	d504      	bpl.n	800e6fe <_vfiprintf_r+0x4e>
 800e6f4:	f04f 30ff 	mov.w	r0, #4294967295
 800e6f8:	b01d      	add	sp, #116	@ 0x74
 800e6fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e6fe:	89ab      	ldrh	r3, [r5, #12]
 800e700:	0598      	lsls	r0, r3, #22
 800e702:	d4f7      	bmi.n	800e6f4 <_vfiprintf_r+0x44>
 800e704:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e706:	f7fd fb97 	bl	800be38 <__retarget_lock_release_recursive>
 800e70a:	e7f3      	b.n	800e6f4 <_vfiprintf_r+0x44>
 800e70c:	2300      	movs	r3, #0
 800e70e:	9309      	str	r3, [sp, #36]	@ 0x24
 800e710:	2320      	movs	r3, #32
 800e712:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800e716:	f8cd 800c 	str.w	r8, [sp, #12]
 800e71a:	2330      	movs	r3, #48	@ 0x30
 800e71c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800e8cc <_vfiprintf_r+0x21c>
 800e720:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800e724:	f04f 0901 	mov.w	r9, #1
 800e728:	4623      	mov	r3, r4
 800e72a:	469a      	mov	sl, r3
 800e72c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e730:	b10a      	cbz	r2, 800e736 <_vfiprintf_r+0x86>
 800e732:	2a25      	cmp	r2, #37	@ 0x25
 800e734:	d1f9      	bne.n	800e72a <_vfiprintf_r+0x7a>
 800e736:	ebba 0b04 	subs.w	fp, sl, r4
 800e73a:	d00b      	beq.n	800e754 <_vfiprintf_r+0xa4>
 800e73c:	465b      	mov	r3, fp
 800e73e:	4622      	mov	r2, r4
 800e740:	4629      	mov	r1, r5
 800e742:	4630      	mov	r0, r6
 800e744:	f7ff ffa1 	bl	800e68a <__sfputs_r>
 800e748:	3001      	adds	r0, #1
 800e74a:	f000 80a7 	beq.w	800e89c <_vfiprintf_r+0x1ec>
 800e74e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e750:	445a      	add	r2, fp
 800e752:	9209      	str	r2, [sp, #36]	@ 0x24
 800e754:	f89a 3000 	ldrb.w	r3, [sl]
 800e758:	2b00      	cmp	r3, #0
 800e75a:	f000 809f 	beq.w	800e89c <_vfiprintf_r+0x1ec>
 800e75e:	2300      	movs	r3, #0
 800e760:	f04f 32ff 	mov.w	r2, #4294967295
 800e764:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e768:	f10a 0a01 	add.w	sl, sl, #1
 800e76c:	9304      	str	r3, [sp, #16]
 800e76e:	9307      	str	r3, [sp, #28]
 800e770:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800e774:	931a      	str	r3, [sp, #104]	@ 0x68
 800e776:	4654      	mov	r4, sl
 800e778:	2205      	movs	r2, #5
 800e77a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e77e:	4853      	ldr	r0, [pc, #332]	@ (800e8cc <_vfiprintf_r+0x21c>)
 800e780:	f7f1 fd2e 	bl	80001e0 <memchr>
 800e784:	9a04      	ldr	r2, [sp, #16]
 800e786:	b9d8      	cbnz	r0, 800e7c0 <_vfiprintf_r+0x110>
 800e788:	06d1      	lsls	r1, r2, #27
 800e78a:	bf44      	itt	mi
 800e78c:	2320      	movmi	r3, #32
 800e78e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e792:	0713      	lsls	r3, r2, #28
 800e794:	bf44      	itt	mi
 800e796:	232b      	movmi	r3, #43	@ 0x2b
 800e798:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e79c:	f89a 3000 	ldrb.w	r3, [sl]
 800e7a0:	2b2a      	cmp	r3, #42	@ 0x2a
 800e7a2:	d015      	beq.n	800e7d0 <_vfiprintf_r+0x120>
 800e7a4:	9a07      	ldr	r2, [sp, #28]
 800e7a6:	4654      	mov	r4, sl
 800e7a8:	2000      	movs	r0, #0
 800e7aa:	f04f 0c0a 	mov.w	ip, #10
 800e7ae:	4621      	mov	r1, r4
 800e7b0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e7b4:	3b30      	subs	r3, #48	@ 0x30
 800e7b6:	2b09      	cmp	r3, #9
 800e7b8:	d94b      	bls.n	800e852 <_vfiprintf_r+0x1a2>
 800e7ba:	b1b0      	cbz	r0, 800e7ea <_vfiprintf_r+0x13a>
 800e7bc:	9207      	str	r2, [sp, #28]
 800e7be:	e014      	b.n	800e7ea <_vfiprintf_r+0x13a>
 800e7c0:	eba0 0308 	sub.w	r3, r0, r8
 800e7c4:	fa09 f303 	lsl.w	r3, r9, r3
 800e7c8:	4313      	orrs	r3, r2
 800e7ca:	9304      	str	r3, [sp, #16]
 800e7cc:	46a2      	mov	sl, r4
 800e7ce:	e7d2      	b.n	800e776 <_vfiprintf_r+0xc6>
 800e7d0:	9b03      	ldr	r3, [sp, #12]
 800e7d2:	1d19      	adds	r1, r3, #4
 800e7d4:	681b      	ldr	r3, [r3, #0]
 800e7d6:	9103      	str	r1, [sp, #12]
 800e7d8:	2b00      	cmp	r3, #0
 800e7da:	bfbb      	ittet	lt
 800e7dc:	425b      	neglt	r3, r3
 800e7de:	f042 0202 	orrlt.w	r2, r2, #2
 800e7e2:	9307      	strge	r3, [sp, #28]
 800e7e4:	9307      	strlt	r3, [sp, #28]
 800e7e6:	bfb8      	it	lt
 800e7e8:	9204      	strlt	r2, [sp, #16]
 800e7ea:	7823      	ldrb	r3, [r4, #0]
 800e7ec:	2b2e      	cmp	r3, #46	@ 0x2e
 800e7ee:	d10a      	bne.n	800e806 <_vfiprintf_r+0x156>
 800e7f0:	7863      	ldrb	r3, [r4, #1]
 800e7f2:	2b2a      	cmp	r3, #42	@ 0x2a
 800e7f4:	d132      	bne.n	800e85c <_vfiprintf_r+0x1ac>
 800e7f6:	9b03      	ldr	r3, [sp, #12]
 800e7f8:	1d1a      	adds	r2, r3, #4
 800e7fa:	681b      	ldr	r3, [r3, #0]
 800e7fc:	9203      	str	r2, [sp, #12]
 800e7fe:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800e802:	3402      	adds	r4, #2
 800e804:	9305      	str	r3, [sp, #20]
 800e806:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800e8dc <_vfiprintf_r+0x22c>
 800e80a:	7821      	ldrb	r1, [r4, #0]
 800e80c:	2203      	movs	r2, #3
 800e80e:	4650      	mov	r0, sl
 800e810:	f7f1 fce6 	bl	80001e0 <memchr>
 800e814:	b138      	cbz	r0, 800e826 <_vfiprintf_r+0x176>
 800e816:	9b04      	ldr	r3, [sp, #16]
 800e818:	eba0 000a 	sub.w	r0, r0, sl
 800e81c:	2240      	movs	r2, #64	@ 0x40
 800e81e:	4082      	lsls	r2, r0
 800e820:	4313      	orrs	r3, r2
 800e822:	3401      	adds	r4, #1
 800e824:	9304      	str	r3, [sp, #16]
 800e826:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e82a:	4829      	ldr	r0, [pc, #164]	@ (800e8d0 <_vfiprintf_r+0x220>)
 800e82c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800e830:	2206      	movs	r2, #6
 800e832:	f7f1 fcd5 	bl	80001e0 <memchr>
 800e836:	2800      	cmp	r0, #0
 800e838:	d03f      	beq.n	800e8ba <_vfiprintf_r+0x20a>
 800e83a:	4b26      	ldr	r3, [pc, #152]	@ (800e8d4 <_vfiprintf_r+0x224>)
 800e83c:	bb1b      	cbnz	r3, 800e886 <_vfiprintf_r+0x1d6>
 800e83e:	9b03      	ldr	r3, [sp, #12]
 800e840:	3307      	adds	r3, #7
 800e842:	f023 0307 	bic.w	r3, r3, #7
 800e846:	3308      	adds	r3, #8
 800e848:	9303      	str	r3, [sp, #12]
 800e84a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e84c:	443b      	add	r3, r7
 800e84e:	9309      	str	r3, [sp, #36]	@ 0x24
 800e850:	e76a      	b.n	800e728 <_vfiprintf_r+0x78>
 800e852:	fb0c 3202 	mla	r2, ip, r2, r3
 800e856:	460c      	mov	r4, r1
 800e858:	2001      	movs	r0, #1
 800e85a:	e7a8      	b.n	800e7ae <_vfiprintf_r+0xfe>
 800e85c:	2300      	movs	r3, #0
 800e85e:	3401      	adds	r4, #1
 800e860:	9305      	str	r3, [sp, #20]
 800e862:	4619      	mov	r1, r3
 800e864:	f04f 0c0a 	mov.w	ip, #10
 800e868:	4620      	mov	r0, r4
 800e86a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e86e:	3a30      	subs	r2, #48	@ 0x30
 800e870:	2a09      	cmp	r2, #9
 800e872:	d903      	bls.n	800e87c <_vfiprintf_r+0x1cc>
 800e874:	2b00      	cmp	r3, #0
 800e876:	d0c6      	beq.n	800e806 <_vfiprintf_r+0x156>
 800e878:	9105      	str	r1, [sp, #20]
 800e87a:	e7c4      	b.n	800e806 <_vfiprintf_r+0x156>
 800e87c:	fb0c 2101 	mla	r1, ip, r1, r2
 800e880:	4604      	mov	r4, r0
 800e882:	2301      	movs	r3, #1
 800e884:	e7f0      	b.n	800e868 <_vfiprintf_r+0x1b8>
 800e886:	ab03      	add	r3, sp, #12
 800e888:	9300      	str	r3, [sp, #0]
 800e88a:	462a      	mov	r2, r5
 800e88c:	4b12      	ldr	r3, [pc, #72]	@ (800e8d8 <_vfiprintf_r+0x228>)
 800e88e:	a904      	add	r1, sp, #16
 800e890:	4630      	mov	r0, r6
 800e892:	f7fc fa2d 	bl	800acf0 <_printf_float>
 800e896:	4607      	mov	r7, r0
 800e898:	1c78      	adds	r0, r7, #1
 800e89a:	d1d6      	bne.n	800e84a <_vfiprintf_r+0x19a>
 800e89c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e89e:	07d9      	lsls	r1, r3, #31
 800e8a0:	d405      	bmi.n	800e8ae <_vfiprintf_r+0x1fe>
 800e8a2:	89ab      	ldrh	r3, [r5, #12]
 800e8a4:	059a      	lsls	r2, r3, #22
 800e8a6:	d402      	bmi.n	800e8ae <_vfiprintf_r+0x1fe>
 800e8a8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e8aa:	f7fd fac5 	bl	800be38 <__retarget_lock_release_recursive>
 800e8ae:	89ab      	ldrh	r3, [r5, #12]
 800e8b0:	065b      	lsls	r3, r3, #25
 800e8b2:	f53f af1f 	bmi.w	800e6f4 <_vfiprintf_r+0x44>
 800e8b6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800e8b8:	e71e      	b.n	800e6f8 <_vfiprintf_r+0x48>
 800e8ba:	ab03      	add	r3, sp, #12
 800e8bc:	9300      	str	r3, [sp, #0]
 800e8be:	462a      	mov	r2, r5
 800e8c0:	4b05      	ldr	r3, [pc, #20]	@ (800e8d8 <_vfiprintf_r+0x228>)
 800e8c2:	a904      	add	r1, sp, #16
 800e8c4:	4630      	mov	r0, r6
 800e8c6:	f7fc fcab 	bl	800b220 <_printf_i>
 800e8ca:	e7e4      	b.n	800e896 <_vfiprintf_r+0x1e6>
 800e8cc:	08010c75 	.word	0x08010c75
 800e8d0:	08010c7f 	.word	0x08010c7f
 800e8d4:	0800acf1 	.word	0x0800acf1
 800e8d8:	0800e68b 	.word	0x0800e68b
 800e8dc:	08010c7b 	.word	0x08010c7b

0800e8e0 <__sflush_r>:
 800e8e0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800e8e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e8e8:	0716      	lsls	r6, r2, #28
 800e8ea:	4605      	mov	r5, r0
 800e8ec:	460c      	mov	r4, r1
 800e8ee:	d454      	bmi.n	800e99a <__sflush_r+0xba>
 800e8f0:	684b      	ldr	r3, [r1, #4]
 800e8f2:	2b00      	cmp	r3, #0
 800e8f4:	dc02      	bgt.n	800e8fc <__sflush_r+0x1c>
 800e8f6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800e8f8:	2b00      	cmp	r3, #0
 800e8fa:	dd48      	ble.n	800e98e <__sflush_r+0xae>
 800e8fc:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800e8fe:	2e00      	cmp	r6, #0
 800e900:	d045      	beq.n	800e98e <__sflush_r+0xae>
 800e902:	2300      	movs	r3, #0
 800e904:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800e908:	682f      	ldr	r7, [r5, #0]
 800e90a:	6a21      	ldr	r1, [r4, #32]
 800e90c:	602b      	str	r3, [r5, #0]
 800e90e:	d030      	beq.n	800e972 <__sflush_r+0x92>
 800e910:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800e912:	89a3      	ldrh	r3, [r4, #12]
 800e914:	0759      	lsls	r1, r3, #29
 800e916:	d505      	bpl.n	800e924 <__sflush_r+0x44>
 800e918:	6863      	ldr	r3, [r4, #4]
 800e91a:	1ad2      	subs	r2, r2, r3
 800e91c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800e91e:	b10b      	cbz	r3, 800e924 <__sflush_r+0x44>
 800e920:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800e922:	1ad2      	subs	r2, r2, r3
 800e924:	2300      	movs	r3, #0
 800e926:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800e928:	6a21      	ldr	r1, [r4, #32]
 800e92a:	4628      	mov	r0, r5
 800e92c:	47b0      	blx	r6
 800e92e:	1c43      	adds	r3, r0, #1
 800e930:	89a3      	ldrh	r3, [r4, #12]
 800e932:	d106      	bne.n	800e942 <__sflush_r+0x62>
 800e934:	6829      	ldr	r1, [r5, #0]
 800e936:	291d      	cmp	r1, #29
 800e938:	d82b      	bhi.n	800e992 <__sflush_r+0xb2>
 800e93a:	4a2a      	ldr	r2, [pc, #168]	@ (800e9e4 <__sflush_r+0x104>)
 800e93c:	40ca      	lsrs	r2, r1
 800e93e:	07d6      	lsls	r6, r2, #31
 800e940:	d527      	bpl.n	800e992 <__sflush_r+0xb2>
 800e942:	2200      	movs	r2, #0
 800e944:	6062      	str	r2, [r4, #4]
 800e946:	04d9      	lsls	r1, r3, #19
 800e948:	6922      	ldr	r2, [r4, #16]
 800e94a:	6022      	str	r2, [r4, #0]
 800e94c:	d504      	bpl.n	800e958 <__sflush_r+0x78>
 800e94e:	1c42      	adds	r2, r0, #1
 800e950:	d101      	bne.n	800e956 <__sflush_r+0x76>
 800e952:	682b      	ldr	r3, [r5, #0]
 800e954:	b903      	cbnz	r3, 800e958 <__sflush_r+0x78>
 800e956:	6560      	str	r0, [r4, #84]	@ 0x54
 800e958:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800e95a:	602f      	str	r7, [r5, #0]
 800e95c:	b1b9      	cbz	r1, 800e98e <__sflush_r+0xae>
 800e95e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800e962:	4299      	cmp	r1, r3
 800e964:	d002      	beq.n	800e96c <__sflush_r+0x8c>
 800e966:	4628      	mov	r0, r5
 800e968:	f7fe f8f2 	bl	800cb50 <_free_r>
 800e96c:	2300      	movs	r3, #0
 800e96e:	6363      	str	r3, [r4, #52]	@ 0x34
 800e970:	e00d      	b.n	800e98e <__sflush_r+0xae>
 800e972:	2301      	movs	r3, #1
 800e974:	4628      	mov	r0, r5
 800e976:	47b0      	blx	r6
 800e978:	4602      	mov	r2, r0
 800e97a:	1c50      	adds	r0, r2, #1
 800e97c:	d1c9      	bne.n	800e912 <__sflush_r+0x32>
 800e97e:	682b      	ldr	r3, [r5, #0]
 800e980:	2b00      	cmp	r3, #0
 800e982:	d0c6      	beq.n	800e912 <__sflush_r+0x32>
 800e984:	2b1d      	cmp	r3, #29
 800e986:	d001      	beq.n	800e98c <__sflush_r+0xac>
 800e988:	2b16      	cmp	r3, #22
 800e98a:	d11e      	bne.n	800e9ca <__sflush_r+0xea>
 800e98c:	602f      	str	r7, [r5, #0]
 800e98e:	2000      	movs	r0, #0
 800e990:	e022      	b.n	800e9d8 <__sflush_r+0xf8>
 800e992:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e996:	b21b      	sxth	r3, r3
 800e998:	e01b      	b.n	800e9d2 <__sflush_r+0xf2>
 800e99a:	690f      	ldr	r7, [r1, #16]
 800e99c:	2f00      	cmp	r7, #0
 800e99e:	d0f6      	beq.n	800e98e <__sflush_r+0xae>
 800e9a0:	0793      	lsls	r3, r2, #30
 800e9a2:	680e      	ldr	r6, [r1, #0]
 800e9a4:	bf08      	it	eq
 800e9a6:	694b      	ldreq	r3, [r1, #20]
 800e9a8:	600f      	str	r7, [r1, #0]
 800e9aa:	bf18      	it	ne
 800e9ac:	2300      	movne	r3, #0
 800e9ae:	eba6 0807 	sub.w	r8, r6, r7
 800e9b2:	608b      	str	r3, [r1, #8]
 800e9b4:	f1b8 0f00 	cmp.w	r8, #0
 800e9b8:	dde9      	ble.n	800e98e <__sflush_r+0xae>
 800e9ba:	6a21      	ldr	r1, [r4, #32]
 800e9bc:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800e9be:	4643      	mov	r3, r8
 800e9c0:	463a      	mov	r2, r7
 800e9c2:	4628      	mov	r0, r5
 800e9c4:	47b0      	blx	r6
 800e9c6:	2800      	cmp	r0, #0
 800e9c8:	dc08      	bgt.n	800e9dc <__sflush_r+0xfc>
 800e9ca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e9ce:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e9d2:	81a3      	strh	r3, [r4, #12]
 800e9d4:	f04f 30ff 	mov.w	r0, #4294967295
 800e9d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e9dc:	4407      	add	r7, r0
 800e9de:	eba8 0800 	sub.w	r8, r8, r0
 800e9e2:	e7e7      	b.n	800e9b4 <__sflush_r+0xd4>
 800e9e4:	20400001 	.word	0x20400001

0800e9e8 <_fflush_r>:
 800e9e8:	b538      	push	{r3, r4, r5, lr}
 800e9ea:	690b      	ldr	r3, [r1, #16]
 800e9ec:	4605      	mov	r5, r0
 800e9ee:	460c      	mov	r4, r1
 800e9f0:	b913      	cbnz	r3, 800e9f8 <_fflush_r+0x10>
 800e9f2:	2500      	movs	r5, #0
 800e9f4:	4628      	mov	r0, r5
 800e9f6:	bd38      	pop	{r3, r4, r5, pc}
 800e9f8:	b118      	cbz	r0, 800ea02 <_fflush_r+0x1a>
 800e9fa:	6a03      	ldr	r3, [r0, #32]
 800e9fc:	b90b      	cbnz	r3, 800ea02 <_fflush_r+0x1a>
 800e9fe:	f7fc ffc7 	bl	800b990 <__sinit>
 800ea02:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ea06:	2b00      	cmp	r3, #0
 800ea08:	d0f3      	beq.n	800e9f2 <_fflush_r+0xa>
 800ea0a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800ea0c:	07d0      	lsls	r0, r2, #31
 800ea0e:	d404      	bmi.n	800ea1a <_fflush_r+0x32>
 800ea10:	0599      	lsls	r1, r3, #22
 800ea12:	d402      	bmi.n	800ea1a <_fflush_r+0x32>
 800ea14:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ea16:	f7fd fa0e 	bl	800be36 <__retarget_lock_acquire_recursive>
 800ea1a:	4628      	mov	r0, r5
 800ea1c:	4621      	mov	r1, r4
 800ea1e:	f7ff ff5f 	bl	800e8e0 <__sflush_r>
 800ea22:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800ea24:	07da      	lsls	r2, r3, #31
 800ea26:	4605      	mov	r5, r0
 800ea28:	d4e4      	bmi.n	800e9f4 <_fflush_r+0xc>
 800ea2a:	89a3      	ldrh	r3, [r4, #12]
 800ea2c:	059b      	lsls	r3, r3, #22
 800ea2e:	d4e1      	bmi.n	800e9f4 <_fflush_r+0xc>
 800ea30:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ea32:	f7fd fa01 	bl	800be38 <__retarget_lock_release_recursive>
 800ea36:	e7dd      	b.n	800e9f4 <_fflush_r+0xc>

0800ea38 <fiprintf>:
 800ea38:	b40e      	push	{r1, r2, r3}
 800ea3a:	b503      	push	{r0, r1, lr}
 800ea3c:	4601      	mov	r1, r0
 800ea3e:	ab03      	add	r3, sp, #12
 800ea40:	4805      	ldr	r0, [pc, #20]	@ (800ea58 <fiprintf+0x20>)
 800ea42:	f853 2b04 	ldr.w	r2, [r3], #4
 800ea46:	6800      	ldr	r0, [r0, #0]
 800ea48:	9301      	str	r3, [sp, #4]
 800ea4a:	f7ff fe31 	bl	800e6b0 <_vfiprintf_r>
 800ea4e:	b002      	add	sp, #8
 800ea50:	f85d eb04 	ldr.w	lr, [sp], #4
 800ea54:	b003      	add	sp, #12
 800ea56:	4770      	bx	lr
 800ea58:	2000d140 	.word	0x2000d140

0800ea5c <__swhatbuf_r>:
 800ea5c:	b570      	push	{r4, r5, r6, lr}
 800ea5e:	460c      	mov	r4, r1
 800ea60:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ea64:	2900      	cmp	r1, #0
 800ea66:	b096      	sub	sp, #88	@ 0x58
 800ea68:	4615      	mov	r5, r2
 800ea6a:	461e      	mov	r6, r3
 800ea6c:	da0d      	bge.n	800ea8a <__swhatbuf_r+0x2e>
 800ea6e:	89a3      	ldrh	r3, [r4, #12]
 800ea70:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800ea74:	f04f 0100 	mov.w	r1, #0
 800ea78:	bf14      	ite	ne
 800ea7a:	2340      	movne	r3, #64	@ 0x40
 800ea7c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800ea80:	2000      	movs	r0, #0
 800ea82:	6031      	str	r1, [r6, #0]
 800ea84:	602b      	str	r3, [r5, #0]
 800ea86:	b016      	add	sp, #88	@ 0x58
 800ea88:	bd70      	pop	{r4, r5, r6, pc}
 800ea8a:	466a      	mov	r2, sp
 800ea8c:	f000 f874 	bl	800eb78 <_fstat_r>
 800ea90:	2800      	cmp	r0, #0
 800ea92:	dbec      	blt.n	800ea6e <__swhatbuf_r+0x12>
 800ea94:	9901      	ldr	r1, [sp, #4]
 800ea96:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800ea9a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800ea9e:	4259      	negs	r1, r3
 800eaa0:	4159      	adcs	r1, r3
 800eaa2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800eaa6:	e7eb      	b.n	800ea80 <__swhatbuf_r+0x24>

0800eaa8 <__smakebuf_r>:
 800eaa8:	898b      	ldrh	r3, [r1, #12]
 800eaaa:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800eaac:	079d      	lsls	r5, r3, #30
 800eaae:	4606      	mov	r6, r0
 800eab0:	460c      	mov	r4, r1
 800eab2:	d507      	bpl.n	800eac4 <__smakebuf_r+0x1c>
 800eab4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800eab8:	6023      	str	r3, [r4, #0]
 800eaba:	6123      	str	r3, [r4, #16]
 800eabc:	2301      	movs	r3, #1
 800eabe:	6163      	str	r3, [r4, #20]
 800eac0:	b003      	add	sp, #12
 800eac2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800eac4:	ab01      	add	r3, sp, #4
 800eac6:	466a      	mov	r2, sp
 800eac8:	f7ff ffc8 	bl	800ea5c <__swhatbuf_r>
 800eacc:	9f00      	ldr	r7, [sp, #0]
 800eace:	4605      	mov	r5, r0
 800ead0:	4639      	mov	r1, r7
 800ead2:	4630      	mov	r0, r6
 800ead4:	f7fe f8b0 	bl	800cc38 <_malloc_r>
 800ead8:	b948      	cbnz	r0, 800eaee <__smakebuf_r+0x46>
 800eada:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800eade:	059a      	lsls	r2, r3, #22
 800eae0:	d4ee      	bmi.n	800eac0 <__smakebuf_r+0x18>
 800eae2:	f023 0303 	bic.w	r3, r3, #3
 800eae6:	f043 0302 	orr.w	r3, r3, #2
 800eaea:	81a3      	strh	r3, [r4, #12]
 800eaec:	e7e2      	b.n	800eab4 <__smakebuf_r+0xc>
 800eaee:	89a3      	ldrh	r3, [r4, #12]
 800eaf0:	6020      	str	r0, [r4, #0]
 800eaf2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800eaf6:	81a3      	strh	r3, [r4, #12]
 800eaf8:	9b01      	ldr	r3, [sp, #4]
 800eafa:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800eafe:	b15b      	cbz	r3, 800eb18 <__smakebuf_r+0x70>
 800eb00:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800eb04:	4630      	mov	r0, r6
 800eb06:	f000 f849 	bl	800eb9c <_isatty_r>
 800eb0a:	b128      	cbz	r0, 800eb18 <__smakebuf_r+0x70>
 800eb0c:	89a3      	ldrh	r3, [r4, #12]
 800eb0e:	f023 0303 	bic.w	r3, r3, #3
 800eb12:	f043 0301 	orr.w	r3, r3, #1
 800eb16:	81a3      	strh	r3, [r4, #12]
 800eb18:	89a3      	ldrh	r3, [r4, #12]
 800eb1a:	431d      	orrs	r5, r3
 800eb1c:	81a5      	strh	r5, [r4, #12]
 800eb1e:	e7cf      	b.n	800eac0 <__smakebuf_r+0x18>

0800eb20 <memmove>:
 800eb20:	4288      	cmp	r0, r1
 800eb22:	b510      	push	{r4, lr}
 800eb24:	eb01 0402 	add.w	r4, r1, r2
 800eb28:	d902      	bls.n	800eb30 <memmove+0x10>
 800eb2a:	4284      	cmp	r4, r0
 800eb2c:	4623      	mov	r3, r4
 800eb2e:	d807      	bhi.n	800eb40 <memmove+0x20>
 800eb30:	1e43      	subs	r3, r0, #1
 800eb32:	42a1      	cmp	r1, r4
 800eb34:	d008      	beq.n	800eb48 <memmove+0x28>
 800eb36:	f811 2b01 	ldrb.w	r2, [r1], #1
 800eb3a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800eb3e:	e7f8      	b.n	800eb32 <memmove+0x12>
 800eb40:	4402      	add	r2, r0
 800eb42:	4601      	mov	r1, r0
 800eb44:	428a      	cmp	r2, r1
 800eb46:	d100      	bne.n	800eb4a <memmove+0x2a>
 800eb48:	bd10      	pop	{r4, pc}
 800eb4a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800eb4e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800eb52:	e7f7      	b.n	800eb44 <memmove+0x24>

0800eb54 <strncmp>:
 800eb54:	b510      	push	{r4, lr}
 800eb56:	b16a      	cbz	r2, 800eb74 <strncmp+0x20>
 800eb58:	3901      	subs	r1, #1
 800eb5a:	1884      	adds	r4, r0, r2
 800eb5c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800eb60:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800eb64:	429a      	cmp	r2, r3
 800eb66:	d103      	bne.n	800eb70 <strncmp+0x1c>
 800eb68:	42a0      	cmp	r0, r4
 800eb6a:	d001      	beq.n	800eb70 <strncmp+0x1c>
 800eb6c:	2a00      	cmp	r2, #0
 800eb6e:	d1f5      	bne.n	800eb5c <strncmp+0x8>
 800eb70:	1ad0      	subs	r0, r2, r3
 800eb72:	bd10      	pop	{r4, pc}
 800eb74:	4610      	mov	r0, r2
 800eb76:	e7fc      	b.n	800eb72 <strncmp+0x1e>

0800eb78 <_fstat_r>:
 800eb78:	b538      	push	{r3, r4, r5, lr}
 800eb7a:	4d07      	ldr	r5, [pc, #28]	@ (800eb98 <_fstat_r+0x20>)
 800eb7c:	2300      	movs	r3, #0
 800eb7e:	4604      	mov	r4, r0
 800eb80:	4608      	mov	r0, r1
 800eb82:	4611      	mov	r1, r2
 800eb84:	602b      	str	r3, [r5, #0]
 800eb86:	f7f2 facf 	bl	8001128 <_fstat>
 800eb8a:	1c43      	adds	r3, r0, #1
 800eb8c:	d102      	bne.n	800eb94 <_fstat_r+0x1c>
 800eb8e:	682b      	ldr	r3, [r5, #0]
 800eb90:	b103      	cbz	r3, 800eb94 <_fstat_r+0x1c>
 800eb92:	6023      	str	r3, [r4, #0]
 800eb94:	bd38      	pop	{r3, r4, r5, pc}
 800eb96:	bf00      	nop
 800eb98:	2001420c 	.word	0x2001420c

0800eb9c <_isatty_r>:
 800eb9c:	b538      	push	{r3, r4, r5, lr}
 800eb9e:	4d06      	ldr	r5, [pc, #24]	@ (800ebb8 <_isatty_r+0x1c>)
 800eba0:	2300      	movs	r3, #0
 800eba2:	4604      	mov	r4, r0
 800eba4:	4608      	mov	r0, r1
 800eba6:	602b      	str	r3, [r5, #0]
 800eba8:	f7f2 fad0 	bl	800114c <_isatty>
 800ebac:	1c43      	adds	r3, r0, #1
 800ebae:	d102      	bne.n	800ebb6 <_isatty_r+0x1a>
 800ebb0:	682b      	ldr	r3, [r5, #0]
 800ebb2:	b103      	cbz	r3, 800ebb6 <_isatty_r+0x1a>
 800ebb4:	6023      	str	r3, [r4, #0]
 800ebb6:	bd38      	pop	{r3, r4, r5, pc}
 800ebb8:	2001420c 	.word	0x2001420c

0800ebbc <_sbrk_r>:
 800ebbc:	b538      	push	{r3, r4, r5, lr}
 800ebbe:	4d06      	ldr	r5, [pc, #24]	@ (800ebd8 <_sbrk_r+0x1c>)
 800ebc0:	2300      	movs	r3, #0
 800ebc2:	4604      	mov	r4, r0
 800ebc4:	4608      	mov	r0, r1
 800ebc6:	602b      	str	r3, [r5, #0]
 800ebc8:	f7f6 f86a 	bl	8004ca0 <_sbrk>
 800ebcc:	1c43      	adds	r3, r0, #1
 800ebce:	d102      	bne.n	800ebd6 <_sbrk_r+0x1a>
 800ebd0:	682b      	ldr	r3, [r5, #0]
 800ebd2:	b103      	cbz	r3, 800ebd6 <_sbrk_r+0x1a>
 800ebd4:	6023      	str	r3, [r4, #0]
 800ebd6:	bd38      	pop	{r3, r4, r5, pc}
 800ebd8:	2001420c 	.word	0x2001420c
 800ebdc:	00000000 	.word	0x00000000

0800ebe0 <nan>:
 800ebe0:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800ebe8 <nan+0x8>
 800ebe4:	4770      	bx	lr
 800ebe6:	bf00      	nop
 800ebe8:	00000000 	.word	0x00000000
 800ebec:	7ff80000 	.word	0x7ff80000

0800ebf0 <abort>:
 800ebf0:	b508      	push	{r3, lr}
 800ebf2:	2006      	movs	r0, #6
 800ebf4:	f000 fbc4 	bl	800f380 <raise>
 800ebf8:	2001      	movs	r0, #1
 800ebfa:	f7f2 fa61 	bl	80010c0 <_exit>

0800ebfe <_calloc_r>:
 800ebfe:	b570      	push	{r4, r5, r6, lr}
 800ec00:	fba1 5402 	umull	r5, r4, r1, r2
 800ec04:	b934      	cbnz	r4, 800ec14 <_calloc_r+0x16>
 800ec06:	4629      	mov	r1, r5
 800ec08:	f7fe f816 	bl	800cc38 <_malloc_r>
 800ec0c:	4606      	mov	r6, r0
 800ec0e:	b928      	cbnz	r0, 800ec1c <_calloc_r+0x1e>
 800ec10:	4630      	mov	r0, r6
 800ec12:	bd70      	pop	{r4, r5, r6, pc}
 800ec14:	220c      	movs	r2, #12
 800ec16:	6002      	str	r2, [r0, #0]
 800ec18:	2600      	movs	r6, #0
 800ec1a:	e7f9      	b.n	800ec10 <_calloc_r+0x12>
 800ec1c:	462a      	mov	r2, r5
 800ec1e:	4621      	mov	r1, r4
 800ec20:	f7fd f88c 	bl	800bd3c <memset>
 800ec24:	e7f4      	b.n	800ec10 <_calloc_r+0x12>

0800ec26 <rshift>:
 800ec26:	6903      	ldr	r3, [r0, #16]
 800ec28:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800ec2c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ec30:	ea4f 1261 	mov.w	r2, r1, asr #5
 800ec34:	f100 0414 	add.w	r4, r0, #20
 800ec38:	dd45      	ble.n	800ecc6 <rshift+0xa0>
 800ec3a:	f011 011f 	ands.w	r1, r1, #31
 800ec3e:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800ec42:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800ec46:	d10c      	bne.n	800ec62 <rshift+0x3c>
 800ec48:	f100 0710 	add.w	r7, r0, #16
 800ec4c:	4629      	mov	r1, r5
 800ec4e:	42b1      	cmp	r1, r6
 800ec50:	d334      	bcc.n	800ecbc <rshift+0x96>
 800ec52:	1a9b      	subs	r3, r3, r2
 800ec54:	009b      	lsls	r3, r3, #2
 800ec56:	1eea      	subs	r2, r5, #3
 800ec58:	4296      	cmp	r6, r2
 800ec5a:	bf38      	it	cc
 800ec5c:	2300      	movcc	r3, #0
 800ec5e:	4423      	add	r3, r4
 800ec60:	e015      	b.n	800ec8e <rshift+0x68>
 800ec62:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800ec66:	f1c1 0820 	rsb	r8, r1, #32
 800ec6a:	40cf      	lsrs	r7, r1
 800ec6c:	f105 0e04 	add.w	lr, r5, #4
 800ec70:	46a1      	mov	r9, r4
 800ec72:	4576      	cmp	r6, lr
 800ec74:	46f4      	mov	ip, lr
 800ec76:	d815      	bhi.n	800eca4 <rshift+0x7e>
 800ec78:	1a9a      	subs	r2, r3, r2
 800ec7a:	0092      	lsls	r2, r2, #2
 800ec7c:	3a04      	subs	r2, #4
 800ec7e:	3501      	adds	r5, #1
 800ec80:	42ae      	cmp	r6, r5
 800ec82:	bf38      	it	cc
 800ec84:	2200      	movcc	r2, #0
 800ec86:	18a3      	adds	r3, r4, r2
 800ec88:	50a7      	str	r7, [r4, r2]
 800ec8a:	b107      	cbz	r7, 800ec8e <rshift+0x68>
 800ec8c:	3304      	adds	r3, #4
 800ec8e:	1b1a      	subs	r2, r3, r4
 800ec90:	42a3      	cmp	r3, r4
 800ec92:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800ec96:	bf08      	it	eq
 800ec98:	2300      	moveq	r3, #0
 800ec9a:	6102      	str	r2, [r0, #16]
 800ec9c:	bf08      	it	eq
 800ec9e:	6143      	streq	r3, [r0, #20]
 800eca0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800eca4:	f8dc c000 	ldr.w	ip, [ip]
 800eca8:	fa0c fc08 	lsl.w	ip, ip, r8
 800ecac:	ea4c 0707 	orr.w	r7, ip, r7
 800ecb0:	f849 7b04 	str.w	r7, [r9], #4
 800ecb4:	f85e 7b04 	ldr.w	r7, [lr], #4
 800ecb8:	40cf      	lsrs	r7, r1
 800ecba:	e7da      	b.n	800ec72 <rshift+0x4c>
 800ecbc:	f851 cb04 	ldr.w	ip, [r1], #4
 800ecc0:	f847 cf04 	str.w	ip, [r7, #4]!
 800ecc4:	e7c3      	b.n	800ec4e <rshift+0x28>
 800ecc6:	4623      	mov	r3, r4
 800ecc8:	e7e1      	b.n	800ec8e <rshift+0x68>

0800ecca <__hexdig_fun>:
 800ecca:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800ecce:	2b09      	cmp	r3, #9
 800ecd0:	d802      	bhi.n	800ecd8 <__hexdig_fun+0xe>
 800ecd2:	3820      	subs	r0, #32
 800ecd4:	b2c0      	uxtb	r0, r0
 800ecd6:	4770      	bx	lr
 800ecd8:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800ecdc:	2b05      	cmp	r3, #5
 800ecde:	d801      	bhi.n	800ece4 <__hexdig_fun+0x1a>
 800ece0:	3847      	subs	r0, #71	@ 0x47
 800ece2:	e7f7      	b.n	800ecd4 <__hexdig_fun+0xa>
 800ece4:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800ece8:	2b05      	cmp	r3, #5
 800ecea:	d801      	bhi.n	800ecf0 <__hexdig_fun+0x26>
 800ecec:	3827      	subs	r0, #39	@ 0x27
 800ecee:	e7f1      	b.n	800ecd4 <__hexdig_fun+0xa>
 800ecf0:	2000      	movs	r0, #0
 800ecf2:	4770      	bx	lr

0800ecf4 <__gethex>:
 800ecf4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ecf8:	b085      	sub	sp, #20
 800ecfa:	468a      	mov	sl, r1
 800ecfc:	9302      	str	r3, [sp, #8]
 800ecfe:	680b      	ldr	r3, [r1, #0]
 800ed00:	9001      	str	r0, [sp, #4]
 800ed02:	4690      	mov	r8, r2
 800ed04:	1c9c      	adds	r4, r3, #2
 800ed06:	46a1      	mov	r9, r4
 800ed08:	f814 0b01 	ldrb.w	r0, [r4], #1
 800ed0c:	2830      	cmp	r0, #48	@ 0x30
 800ed0e:	d0fa      	beq.n	800ed06 <__gethex+0x12>
 800ed10:	eba9 0303 	sub.w	r3, r9, r3
 800ed14:	f1a3 0b02 	sub.w	fp, r3, #2
 800ed18:	f7ff ffd7 	bl	800ecca <__hexdig_fun>
 800ed1c:	4605      	mov	r5, r0
 800ed1e:	2800      	cmp	r0, #0
 800ed20:	d168      	bne.n	800edf4 <__gethex+0x100>
 800ed22:	49a0      	ldr	r1, [pc, #640]	@ (800efa4 <__gethex+0x2b0>)
 800ed24:	2201      	movs	r2, #1
 800ed26:	4648      	mov	r0, r9
 800ed28:	f7ff ff14 	bl	800eb54 <strncmp>
 800ed2c:	4607      	mov	r7, r0
 800ed2e:	2800      	cmp	r0, #0
 800ed30:	d167      	bne.n	800ee02 <__gethex+0x10e>
 800ed32:	f899 0001 	ldrb.w	r0, [r9, #1]
 800ed36:	4626      	mov	r6, r4
 800ed38:	f7ff ffc7 	bl	800ecca <__hexdig_fun>
 800ed3c:	2800      	cmp	r0, #0
 800ed3e:	d062      	beq.n	800ee06 <__gethex+0x112>
 800ed40:	4623      	mov	r3, r4
 800ed42:	7818      	ldrb	r0, [r3, #0]
 800ed44:	2830      	cmp	r0, #48	@ 0x30
 800ed46:	4699      	mov	r9, r3
 800ed48:	f103 0301 	add.w	r3, r3, #1
 800ed4c:	d0f9      	beq.n	800ed42 <__gethex+0x4e>
 800ed4e:	f7ff ffbc 	bl	800ecca <__hexdig_fun>
 800ed52:	fab0 f580 	clz	r5, r0
 800ed56:	096d      	lsrs	r5, r5, #5
 800ed58:	f04f 0b01 	mov.w	fp, #1
 800ed5c:	464a      	mov	r2, r9
 800ed5e:	4616      	mov	r6, r2
 800ed60:	3201      	adds	r2, #1
 800ed62:	7830      	ldrb	r0, [r6, #0]
 800ed64:	f7ff ffb1 	bl	800ecca <__hexdig_fun>
 800ed68:	2800      	cmp	r0, #0
 800ed6a:	d1f8      	bne.n	800ed5e <__gethex+0x6a>
 800ed6c:	498d      	ldr	r1, [pc, #564]	@ (800efa4 <__gethex+0x2b0>)
 800ed6e:	2201      	movs	r2, #1
 800ed70:	4630      	mov	r0, r6
 800ed72:	f7ff feef 	bl	800eb54 <strncmp>
 800ed76:	2800      	cmp	r0, #0
 800ed78:	d13f      	bne.n	800edfa <__gethex+0x106>
 800ed7a:	b944      	cbnz	r4, 800ed8e <__gethex+0x9a>
 800ed7c:	1c74      	adds	r4, r6, #1
 800ed7e:	4622      	mov	r2, r4
 800ed80:	4616      	mov	r6, r2
 800ed82:	3201      	adds	r2, #1
 800ed84:	7830      	ldrb	r0, [r6, #0]
 800ed86:	f7ff ffa0 	bl	800ecca <__hexdig_fun>
 800ed8a:	2800      	cmp	r0, #0
 800ed8c:	d1f8      	bne.n	800ed80 <__gethex+0x8c>
 800ed8e:	1ba4      	subs	r4, r4, r6
 800ed90:	00a7      	lsls	r7, r4, #2
 800ed92:	7833      	ldrb	r3, [r6, #0]
 800ed94:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800ed98:	2b50      	cmp	r3, #80	@ 0x50
 800ed9a:	d13e      	bne.n	800ee1a <__gethex+0x126>
 800ed9c:	7873      	ldrb	r3, [r6, #1]
 800ed9e:	2b2b      	cmp	r3, #43	@ 0x2b
 800eda0:	d033      	beq.n	800ee0a <__gethex+0x116>
 800eda2:	2b2d      	cmp	r3, #45	@ 0x2d
 800eda4:	d034      	beq.n	800ee10 <__gethex+0x11c>
 800eda6:	1c71      	adds	r1, r6, #1
 800eda8:	2400      	movs	r4, #0
 800edaa:	7808      	ldrb	r0, [r1, #0]
 800edac:	f7ff ff8d 	bl	800ecca <__hexdig_fun>
 800edb0:	1e43      	subs	r3, r0, #1
 800edb2:	b2db      	uxtb	r3, r3
 800edb4:	2b18      	cmp	r3, #24
 800edb6:	d830      	bhi.n	800ee1a <__gethex+0x126>
 800edb8:	f1a0 0210 	sub.w	r2, r0, #16
 800edbc:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800edc0:	f7ff ff83 	bl	800ecca <__hexdig_fun>
 800edc4:	f100 3cff 	add.w	ip, r0, #4294967295
 800edc8:	fa5f fc8c 	uxtb.w	ip, ip
 800edcc:	f1bc 0f18 	cmp.w	ip, #24
 800edd0:	f04f 030a 	mov.w	r3, #10
 800edd4:	d91e      	bls.n	800ee14 <__gethex+0x120>
 800edd6:	b104      	cbz	r4, 800edda <__gethex+0xe6>
 800edd8:	4252      	negs	r2, r2
 800edda:	4417      	add	r7, r2
 800eddc:	f8ca 1000 	str.w	r1, [sl]
 800ede0:	b1ed      	cbz	r5, 800ee1e <__gethex+0x12a>
 800ede2:	f1bb 0f00 	cmp.w	fp, #0
 800ede6:	bf0c      	ite	eq
 800ede8:	2506      	moveq	r5, #6
 800edea:	2500      	movne	r5, #0
 800edec:	4628      	mov	r0, r5
 800edee:	b005      	add	sp, #20
 800edf0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800edf4:	2500      	movs	r5, #0
 800edf6:	462c      	mov	r4, r5
 800edf8:	e7b0      	b.n	800ed5c <__gethex+0x68>
 800edfa:	2c00      	cmp	r4, #0
 800edfc:	d1c7      	bne.n	800ed8e <__gethex+0x9a>
 800edfe:	4627      	mov	r7, r4
 800ee00:	e7c7      	b.n	800ed92 <__gethex+0x9e>
 800ee02:	464e      	mov	r6, r9
 800ee04:	462f      	mov	r7, r5
 800ee06:	2501      	movs	r5, #1
 800ee08:	e7c3      	b.n	800ed92 <__gethex+0x9e>
 800ee0a:	2400      	movs	r4, #0
 800ee0c:	1cb1      	adds	r1, r6, #2
 800ee0e:	e7cc      	b.n	800edaa <__gethex+0xb6>
 800ee10:	2401      	movs	r4, #1
 800ee12:	e7fb      	b.n	800ee0c <__gethex+0x118>
 800ee14:	fb03 0002 	mla	r0, r3, r2, r0
 800ee18:	e7ce      	b.n	800edb8 <__gethex+0xc4>
 800ee1a:	4631      	mov	r1, r6
 800ee1c:	e7de      	b.n	800eddc <__gethex+0xe8>
 800ee1e:	eba6 0309 	sub.w	r3, r6, r9
 800ee22:	3b01      	subs	r3, #1
 800ee24:	4629      	mov	r1, r5
 800ee26:	2b07      	cmp	r3, #7
 800ee28:	dc0a      	bgt.n	800ee40 <__gethex+0x14c>
 800ee2a:	9801      	ldr	r0, [sp, #4]
 800ee2c:	f7fd ff90 	bl	800cd50 <_Balloc>
 800ee30:	4604      	mov	r4, r0
 800ee32:	b940      	cbnz	r0, 800ee46 <__gethex+0x152>
 800ee34:	4b5c      	ldr	r3, [pc, #368]	@ (800efa8 <__gethex+0x2b4>)
 800ee36:	4602      	mov	r2, r0
 800ee38:	21e4      	movs	r1, #228	@ 0xe4
 800ee3a:	485c      	ldr	r0, [pc, #368]	@ (800efac <__gethex+0x2b8>)
 800ee3c:	f7fd f812 	bl	800be64 <__assert_func>
 800ee40:	3101      	adds	r1, #1
 800ee42:	105b      	asrs	r3, r3, #1
 800ee44:	e7ef      	b.n	800ee26 <__gethex+0x132>
 800ee46:	f100 0a14 	add.w	sl, r0, #20
 800ee4a:	2300      	movs	r3, #0
 800ee4c:	4655      	mov	r5, sl
 800ee4e:	469b      	mov	fp, r3
 800ee50:	45b1      	cmp	r9, r6
 800ee52:	d337      	bcc.n	800eec4 <__gethex+0x1d0>
 800ee54:	f845 bb04 	str.w	fp, [r5], #4
 800ee58:	eba5 050a 	sub.w	r5, r5, sl
 800ee5c:	10ad      	asrs	r5, r5, #2
 800ee5e:	6125      	str	r5, [r4, #16]
 800ee60:	4658      	mov	r0, fp
 800ee62:	f7fe f867 	bl	800cf34 <__hi0bits>
 800ee66:	016d      	lsls	r5, r5, #5
 800ee68:	f8d8 6000 	ldr.w	r6, [r8]
 800ee6c:	1a2d      	subs	r5, r5, r0
 800ee6e:	42b5      	cmp	r5, r6
 800ee70:	dd54      	ble.n	800ef1c <__gethex+0x228>
 800ee72:	1bad      	subs	r5, r5, r6
 800ee74:	4629      	mov	r1, r5
 800ee76:	4620      	mov	r0, r4
 800ee78:	f7fe fbf3 	bl	800d662 <__any_on>
 800ee7c:	4681      	mov	r9, r0
 800ee7e:	b178      	cbz	r0, 800eea0 <__gethex+0x1ac>
 800ee80:	1e6b      	subs	r3, r5, #1
 800ee82:	1159      	asrs	r1, r3, #5
 800ee84:	f003 021f 	and.w	r2, r3, #31
 800ee88:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800ee8c:	f04f 0901 	mov.w	r9, #1
 800ee90:	fa09 f202 	lsl.w	r2, r9, r2
 800ee94:	420a      	tst	r2, r1
 800ee96:	d003      	beq.n	800eea0 <__gethex+0x1ac>
 800ee98:	454b      	cmp	r3, r9
 800ee9a:	dc36      	bgt.n	800ef0a <__gethex+0x216>
 800ee9c:	f04f 0902 	mov.w	r9, #2
 800eea0:	4629      	mov	r1, r5
 800eea2:	4620      	mov	r0, r4
 800eea4:	f7ff febf 	bl	800ec26 <rshift>
 800eea8:	442f      	add	r7, r5
 800eeaa:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800eeae:	42bb      	cmp	r3, r7
 800eeb0:	da42      	bge.n	800ef38 <__gethex+0x244>
 800eeb2:	9801      	ldr	r0, [sp, #4]
 800eeb4:	4621      	mov	r1, r4
 800eeb6:	f7fd ff8b 	bl	800cdd0 <_Bfree>
 800eeba:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800eebc:	2300      	movs	r3, #0
 800eebe:	6013      	str	r3, [r2, #0]
 800eec0:	25a3      	movs	r5, #163	@ 0xa3
 800eec2:	e793      	b.n	800edec <__gethex+0xf8>
 800eec4:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800eec8:	2a2e      	cmp	r2, #46	@ 0x2e
 800eeca:	d012      	beq.n	800eef2 <__gethex+0x1fe>
 800eecc:	2b20      	cmp	r3, #32
 800eece:	d104      	bne.n	800eeda <__gethex+0x1e6>
 800eed0:	f845 bb04 	str.w	fp, [r5], #4
 800eed4:	f04f 0b00 	mov.w	fp, #0
 800eed8:	465b      	mov	r3, fp
 800eeda:	7830      	ldrb	r0, [r6, #0]
 800eedc:	9303      	str	r3, [sp, #12]
 800eede:	f7ff fef4 	bl	800ecca <__hexdig_fun>
 800eee2:	9b03      	ldr	r3, [sp, #12]
 800eee4:	f000 000f 	and.w	r0, r0, #15
 800eee8:	4098      	lsls	r0, r3
 800eeea:	ea4b 0b00 	orr.w	fp, fp, r0
 800eeee:	3304      	adds	r3, #4
 800eef0:	e7ae      	b.n	800ee50 <__gethex+0x15c>
 800eef2:	45b1      	cmp	r9, r6
 800eef4:	d8ea      	bhi.n	800eecc <__gethex+0x1d8>
 800eef6:	492b      	ldr	r1, [pc, #172]	@ (800efa4 <__gethex+0x2b0>)
 800eef8:	9303      	str	r3, [sp, #12]
 800eefa:	2201      	movs	r2, #1
 800eefc:	4630      	mov	r0, r6
 800eefe:	f7ff fe29 	bl	800eb54 <strncmp>
 800ef02:	9b03      	ldr	r3, [sp, #12]
 800ef04:	2800      	cmp	r0, #0
 800ef06:	d1e1      	bne.n	800eecc <__gethex+0x1d8>
 800ef08:	e7a2      	b.n	800ee50 <__gethex+0x15c>
 800ef0a:	1ea9      	subs	r1, r5, #2
 800ef0c:	4620      	mov	r0, r4
 800ef0e:	f7fe fba8 	bl	800d662 <__any_on>
 800ef12:	2800      	cmp	r0, #0
 800ef14:	d0c2      	beq.n	800ee9c <__gethex+0x1a8>
 800ef16:	f04f 0903 	mov.w	r9, #3
 800ef1a:	e7c1      	b.n	800eea0 <__gethex+0x1ac>
 800ef1c:	da09      	bge.n	800ef32 <__gethex+0x23e>
 800ef1e:	1b75      	subs	r5, r6, r5
 800ef20:	4621      	mov	r1, r4
 800ef22:	9801      	ldr	r0, [sp, #4]
 800ef24:	462a      	mov	r2, r5
 800ef26:	f7fe f963 	bl	800d1f0 <__lshift>
 800ef2a:	1b7f      	subs	r7, r7, r5
 800ef2c:	4604      	mov	r4, r0
 800ef2e:	f100 0a14 	add.w	sl, r0, #20
 800ef32:	f04f 0900 	mov.w	r9, #0
 800ef36:	e7b8      	b.n	800eeaa <__gethex+0x1b6>
 800ef38:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800ef3c:	42bd      	cmp	r5, r7
 800ef3e:	dd6f      	ble.n	800f020 <__gethex+0x32c>
 800ef40:	1bed      	subs	r5, r5, r7
 800ef42:	42ae      	cmp	r6, r5
 800ef44:	dc34      	bgt.n	800efb0 <__gethex+0x2bc>
 800ef46:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800ef4a:	2b02      	cmp	r3, #2
 800ef4c:	d022      	beq.n	800ef94 <__gethex+0x2a0>
 800ef4e:	2b03      	cmp	r3, #3
 800ef50:	d024      	beq.n	800ef9c <__gethex+0x2a8>
 800ef52:	2b01      	cmp	r3, #1
 800ef54:	d115      	bne.n	800ef82 <__gethex+0x28e>
 800ef56:	42ae      	cmp	r6, r5
 800ef58:	d113      	bne.n	800ef82 <__gethex+0x28e>
 800ef5a:	2e01      	cmp	r6, #1
 800ef5c:	d10b      	bne.n	800ef76 <__gethex+0x282>
 800ef5e:	9a02      	ldr	r2, [sp, #8]
 800ef60:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800ef64:	6013      	str	r3, [r2, #0]
 800ef66:	2301      	movs	r3, #1
 800ef68:	6123      	str	r3, [r4, #16]
 800ef6a:	f8ca 3000 	str.w	r3, [sl]
 800ef6e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ef70:	2562      	movs	r5, #98	@ 0x62
 800ef72:	601c      	str	r4, [r3, #0]
 800ef74:	e73a      	b.n	800edec <__gethex+0xf8>
 800ef76:	1e71      	subs	r1, r6, #1
 800ef78:	4620      	mov	r0, r4
 800ef7a:	f7fe fb72 	bl	800d662 <__any_on>
 800ef7e:	2800      	cmp	r0, #0
 800ef80:	d1ed      	bne.n	800ef5e <__gethex+0x26a>
 800ef82:	9801      	ldr	r0, [sp, #4]
 800ef84:	4621      	mov	r1, r4
 800ef86:	f7fd ff23 	bl	800cdd0 <_Bfree>
 800ef8a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ef8c:	2300      	movs	r3, #0
 800ef8e:	6013      	str	r3, [r2, #0]
 800ef90:	2550      	movs	r5, #80	@ 0x50
 800ef92:	e72b      	b.n	800edec <__gethex+0xf8>
 800ef94:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ef96:	2b00      	cmp	r3, #0
 800ef98:	d1f3      	bne.n	800ef82 <__gethex+0x28e>
 800ef9a:	e7e0      	b.n	800ef5e <__gethex+0x26a>
 800ef9c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ef9e:	2b00      	cmp	r3, #0
 800efa0:	d1dd      	bne.n	800ef5e <__gethex+0x26a>
 800efa2:	e7ee      	b.n	800ef82 <__gethex+0x28e>
 800efa4:	08010c73 	.word	0x08010c73
 800efa8:	08010c09 	.word	0x08010c09
 800efac:	08010c8e 	.word	0x08010c8e
 800efb0:	1e6f      	subs	r7, r5, #1
 800efb2:	f1b9 0f00 	cmp.w	r9, #0
 800efb6:	d130      	bne.n	800f01a <__gethex+0x326>
 800efb8:	b127      	cbz	r7, 800efc4 <__gethex+0x2d0>
 800efba:	4639      	mov	r1, r7
 800efbc:	4620      	mov	r0, r4
 800efbe:	f7fe fb50 	bl	800d662 <__any_on>
 800efc2:	4681      	mov	r9, r0
 800efc4:	117a      	asrs	r2, r7, #5
 800efc6:	2301      	movs	r3, #1
 800efc8:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800efcc:	f007 071f 	and.w	r7, r7, #31
 800efd0:	40bb      	lsls	r3, r7
 800efd2:	4213      	tst	r3, r2
 800efd4:	4629      	mov	r1, r5
 800efd6:	4620      	mov	r0, r4
 800efd8:	bf18      	it	ne
 800efda:	f049 0902 	orrne.w	r9, r9, #2
 800efde:	f7ff fe22 	bl	800ec26 <rshift>
 800efe2:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800efe6:	1b76      	subs	r6, r6, r5
 800efe8:	2502      	movs	r5, #2
 800efea:	f1b9 0f00 	cmp.w	r9, #0
 800efee:	d047      	beq.n	800f080 <__gethex+0x38c>
 800eff0:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800eff4:	2b02      	cmp	r3, #2
 800eff6:	d015      	beq.n	800f024 <__gethex+0x330>
 800eff8:	2b03      	cmp	r3, #3
 800effa:	d017      	beq.n	800f02c <__gethex+0x338>
 800effc:	2b01      	cmp	r3, #1
 800effe:	d109      	bne.n	800f014 <__gethex+0x320>
 800f000:	f019 0f02 	tst.w	r9, #2
 800f004:	d006      	beq.n	800f014 <__gethex+0x320>
 800f006:	f8da 3000 	ldr.w	r3, [sl]
 800f00a:	ea49 0903 	orr.w	r9, r9, r3
 800f00e:	f019 0f01 	tst.w	r9, #1
 800f012:	d10e      	bne.n	800f032 <__gethex+0x33e>
 800f014:	f045 0510 	orr.w	r5, r5, #16
 800f018:	e032      	b.n	800f080 <__gethex+0x38c>
 800f01a:	f04f 0901 	mov.w	r9, #1
 800f01e:	e7d1      	b.n	800efc4 <__gethex+0x2d0>
 800f020:	2501      	movs	r5, #1
 800f022:	e7e2      	b.n	800efea <__gethex+0x2f6>
 800f024:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f026:	f1c3 0301 	rsb	r3, r3, #1
 800f02a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800f02c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f02e:	2b00      	cmp	r3, #0
 800f030:	d0f0      	beq.n	800f014 <__gethex+0x320>
 800f032:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800f036:	f104 0314 	add.w	r3, r4, #20
 800f03a:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800f03e:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800f042:	f04f 0c00 	mov.w	ip, #0
 800f046:	4618      	mov	r0, r3
 800f048:	f853 2b04 	ldr.w	r2, [r3], #4
 800f04c:	f1b2 3fff 	cmp.w	r2, #4294967295
 800f050:	d01b      	beq.n	800f08a <__gethex+0x396>
 800f052:	3201      	adds	r2, #1
 800f054:	6002      	str	r2, [r0, #0]
 800f056:	2d02      	cmp	r5, #2
 800f058:	f104 0314 	add.w	r3, r4, #20
 800f05c:	d13c      	bne.n	800f0d8 <__gethex+0x3e4>
 800f05e:	f8d8 2000 	ldr.w	r2, [r8]
 800f062:	3a01      	subs	r2, #1
 800f064:	42b2      	cmp	r2, r6
 800f066:	d109      	bne.n	800f07c <__gethex+0x388>
 800f068:	1171      	asrs	r1, r6, #5
 800f06a:	2201      	movs	r2, #1
 800f06c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800f070:	f006 061f 	and.w	r6, r6, #31
 800f074:	fa02 f606 	lsl.w	r6, r2, r6
 800f078:	421e      	tst	r6, r3
 800f07a:	d13a      	bne.n	800f0f2 <__gethex+0x3fe>
 800f07c:	f045 0520 	orr.w	r5, r5, #32
 800f080:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f082:	601c      	str	r4, [r3, #0]
 800f084:	9b02      	ldr	r3, [sp, #8]
 800f086:	601f      	str	r7, [r3, #0]
 800f088:	e6b0      	b.n	800edec <__gethex+0xf8>
 800f08a:	4299      	cmp	r1, r3
 800f08c:	f843 cc04 	str.w	ip, [r3, #-4]
 800f090:	d8d9      	bhi.n	800f046 <__gethex+0x352>
 800f092:	68a3      	ldr	r3, [r4, #8]
 800f094:	459b      	cmp	fp, r3
 800f096:	db17      	blt.n	800f0c8 <__gethex+0x3d4>
 800f098:	6861      	ldr	r1, [r4, #4]
 800f09a:	9801      	ldr	r0, [sp, #4]
 800f09c:	3101      	adds	r1, #1
 800f09e:	f7fd fe57 	bl	800cd50 <_Balloc>
 800f0a2:	4681      	mov	r9, r0
 800f0a4:	b918      	cbnz	r0, 800f0ae <__gethex+0x3ba>
 800f0a6:	4b1a      	ldr	r3, [pc, #104]	@ (800f110 <__gethex+0x41c>)
 800f0a8:	4602      	mov	r2, r0
 800f0aa:	2184      	movs	r1, #132	@ 0x84
 800f0ac:	e6c5      	b.n	800ee3a <__gethex+0x146>
 800f0ae:	6922      	ldr	r2, [r4, #16]
 800f0b0:	3202      	adds	r2, #2
 800f0b2:	f104 010c 	add.w	r1, r4, #12
 800f0b6:	0092      	lsls	r2, r2, #2
 800f0b8:	300c      	adds	r0, #12
 800f0ba:	f7fc febe 	bl	800be3a <memcpy>
 800f0be:	4621      	mov	r1, r4
 800f0c0:	9801      	ldr	r0, [sp, #4]
 800f0c2:	f7fd fe85 	bl	800cdd0 <_Bfree>
 800f0c6:	464c      	mov	r4, r9
 800f0c8:	6923      	ldr	r3, [r4, #16]
 800f0ca:	1c5a      	adds	r2, r3, #1
 800f0cc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800f0d0:	6122      	str	r2, [r4, #16]
 800f0d2:	2201      	movs	r2, #1
 800f0d4:	615a      	str	r2, [r3, #20]
 800f0d6:	e7be      	b.n	800f056 <__gethex+0x362>
 800f0d8:	6922      	ldr	r2, [r4, #16]
 800f0da:	455a      	cmp	r2, fp
 800f0dc:	dd0b      	ble.n	800f0f6 <__gethex+0x402>
 800f0de:	2101      	movs	r1, #1
 800f0e0:	4620      	mov	r0, r4
 800f0e2:	f7ff fda0 	bl	800ec26 <rshift>
 800f0e6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800f0ea:	3701      	adds	r7, #1
 800f0ec:	42bb      	cmp	r3, r7
 800f0ee:	f6ff aee0 	blt.w	800eeb2 <__gethex+0x1be>
 800f0f2:	2501      	movs	r5, #1
 800f0f4:	e7c2      	b.n	800f07c <__gethex+0x388>
 800f0f6:	f016 061f 	ands.w	r6, r6, #31
 800f0fa:	d0fa      	beq.n	800f0f2 <__gethex+0x3fe>
 800f0fc:	4453      	add	r3, sl
 800f0fe:	f1c6 0620 	rsb	r6, r6, #32
 800f102:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800f106:	f7fd ff15 	bl	800cf34 <__hi0bits>
 800f10a:	42b0      	cmp	r0, r6
 800f10c:	dbe7      	blt.n	800f0de <__gethex+0x3ea>
 800f10e:	e7f0      	b.n	800f0f2 <__gethex+0x3fe>
 800f110:	08010c09 	.word	0x08010c09

0800f114 <L_shift>:
 800f114:	f1c2 0208 	rsb	r2, r2, #8
 800f118:	0092      	lsls	r2, r2, #2
 800f11a:	b570      	push	{r4, r5, r6, lr}
 800f11c:	f1c2 0620 	rsb	r6, r2, #32
 800f120:	6843      	ldr	r3, [r0, #4]
 800f122:	6804      	ldr	r4, [r0, #0]
 800f124:	fa03 f506 	lsl.w	r5, r3, r6
 800f128:	432c      	orrs	r4, r5
 800f12a:	40d3      	lsrs	r3, r2
 800f12c:	6004      	str	r4, [r0, #0]
 800f12e:	f840 3f04 	str.w	r3, [r0, #4]!
 800f132:	4288      	cmp	r0, r1
 800f134:	d3f4      	bcc.n	800f120 <L_shift+0xc>
 800f136:	bd70      	pop	{r4, r5, r6, pc}

0800f138 <__match>:
 800f138:	b530      	push	{r4, r5, lr}
 800f13a:	6803      	ldr	r3, [r0, #0]
 800f13c:	3301      	adds	r3, #1
 800f13e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f142:	b914      	cbnz	r4, 800f14a <__match+0x12>
 800f144:	6003      	str	r3, [r0, #0]
 800f146:	2001      	movs	r0, #1
 800f148:	bd30      	pop	{r4, r5, pc}
 800f14a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f14e:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800f152:	2d19      	cmp	r5, #25
 800f154:	bf98      	it	ls
 800f156:	3220      	addls	r2, #32
 800f158:	42a2      	cmp	r2, r4
 800f15a:	d0f0      	beq.n	800f13e <__match+0x6>
 800f15c:	2000      	movs	r0, #0
 800f15e:	e7f3      	b.n	800f148 <__match+0x10>

0800f160 <__hexnan>:
 800f160:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f164:	680b      	ldr	r3, [r1, #0]
 800f166:	6801      	ldr	r1, [r0, #0]
 800f168:	115e      	asrs	r6, r3, #5
 800f16a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800f16e:	f013 031f 	ands.w	r3, r3, #31
 800f172:	b087      	sub	sp, #28
 800f174:	bf18      	it	ne
 800f176:	3604      	addne	r6, #4
 800f178:	2500      	movs	r5, #0
 800f17a:	1f37      	subs	r7, r6, #4
 800f17c:	4682      	mov	sl, r0
 800f17e:	4690      	mov	r8, r2
 800f180:	9301      	str	r3, [sp, #4]
 800f182:	f846 5c04 	str.w	r5, [r6, #-4]
 800f186:	46b9      	mov	r9, r7
 800f188:	463c      	mov	r4, r7
 800f18a:	9502      	str	r5, [sp, #8]
 800f18c:	46ab      	mov	fp, r5
 800f18e:	784a      	ldrb	r2, [r1, #1]
 800f190:	1c4b      	adds	r3, r1, #1
 800f192:	9303      	str	r3, [sp, #12]
 800f194:	b342      	cbz	r2, 800f1e8 <__hexnan+0x88>
 800f196:	4610      	mov	r0, r2
 800f198:	9105      	str	r1, [sp, #20]
 800f19a:	9204      	str	r2, [sp, #16]
 800f19c:	f7ff fd95 	bl	800ecca <__hexdig_fun>
 800f1a0:	2800      	cmp	r0, #0
 800f1a2:	d151      	bne.n	800f248 <__hexnan+0xe8>
 800f1a4:	9a04      	ldr	r2, [sp, #16]
 800f1a6:	9905      	ldr	r1, [sp, #20]
 800f1a8:	2a20      	cmp	r2, #32
 800f1aa:	d818      	bhi.n	800f1de <__hexnan+0x7e>
 800f1ac:	9b02      	ldr	r3, [sp, #8]
 800f1ae:	459b      	cmp	fp, r3
 800f1b0:	dd13      	ble.n	800f1da <__hexnan+0x7a>
 800f1b2:	454c      	cmp	r4, r9
 800f1b4:	d206      	bcs.n	800f1c4 <__hexnan+0x64>
 800f1b6:	2d07      	cmp	r5, #7
 800f1b8:	dc04      	bgt.n	800f1c4 <__hexnan+0x64>
 800f1ba:	462a      	mov	r2, r5
 800f1bc:	4649      	mov	r1, r9
 800f1be:	4620      	mov	r0, r4
 800f1c0:	f7ff ffa8 	bl	800f114 <L_shift>
 800f1c4:	4544      	cmp	r4, r8
 800f1c6:	d952      	bls.n	800f26e <__hexnan+0x10e>
 800f1c8:	2300      	movs	r3, #0
 800f1ca:	f1a4 0904 	sub.w	r9, r4, #4
 800f1ce:	f844 3c04 	str.w	r3, [r4, #-4]
 800f1d2:	f8cd b008 	str.w	fp, [sp, #8]
 800f1d6:	464c      	mov	r4, r9
 800f1d8:	461d      	mov	r5, r3
 800f1da:	9903      	ldr	r1, [sp, #12]
 800f1dc:	e7d7      	b.n	800f18e <__hexnan+0x2e>
 800f1de:	2a29      	cmp	r2, #41	@ 0x29
 800f1e0:	d157      	bne.n	800f292 <__hexnan+0x132>
 800f1e2:	3102      	adds	r1, #2
 800f1e4:	f8ca 1000 	str.w	r1, [sl]
 800f1e8:	f1bb 0f00 	cmp.w	fp, #0
 800f1ec:	d051      	beq.n	800f292 <__hexnan+0x132>
 800f1ee:	454c      	cmp	r4, r9
 800f1f0:	d206      	bcs.n	800f200 <__hexnan+0xa0>
 800f1f2:	2d07      	cmp	r5, #7
 800f1f4:	dc04      	bgt.n	800f200 <__hexnan+0xa0>
 800f1f6:	462a      	mov	r2, r5
 800f1f8:	4649      	mov	r1, r9
 800f1fa:	4620      	mov	r0, r4
 800f1fc:	f7ff ff8a 	bl	800f114 <L_shift>
 800f200:	4544      	cmp	r4, r8
 800f202:	d936      	bls.n	800f272 <__hexnan+0x112>
 800f204:	f1a8 0204 	sub.w	r2, r8, #4
 800f208:	4623      	mov	r3, r4
 800f20a:	f853 1b04 	ldr.w	r1, [r3], #4
 800f20e:	f842 1f04 	str.w	r1, [r2, #4]!
 800f212:	429f      	cmp	r7, r3
 800f214:	d2f9      	bcs.n	800f20a <__hexnan+0xaa>
 800f216:	1b3b      	subs	r3, r7, r4
 800f218:	f023 0303 	bic.w	r3, r3, #3
 800f21c:	3304      	adds	r3, #4
 800f21e:	3401      	adds	r4, #1
 800f220:	3e03      	subs	r6, #3
 800f222:	42b4      	cmp	r4, r6
 800f224:	bf88      	it	hi
 800f226:	2304      	movhi	r3, #4
 800f228:	4443      	add	r3, r8
 800f22a:	2200      	movs	r2, #0
 800f22c:	f843 2b04 	str.w	r2, [r3], #4
 800f230:	429f      	cmp	r7, r3
 800f232:	d2fb      	bcs.n	800f22c <__hexnan+0xcc>
 800f234:	683b      	ldr	r3, [r7, #0]
 800f236:	b91b      	cbnz	r3, 800f240 <__hexnan+0xe0>
 800f238:	4547      	cmp	r7, r8
 800f23a:	d128      	bne.n	800f28e <__hexnan+0x12e>
 800f23c:	2301      	movs	r3, #1
 800f23e:	603b      	str	r3, [r7, #0]
 800f240:	2005      	movs	r0, #5
 800f242:	b007      	add	sp, #28
 800f244:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f248:	3501      	adds	r5, #1
 800f24a:	2d08      	cmp	r5, #8
 800f24c:	f10b 0b01 	add.w	fp, fp, #1
 800f250:	dd06      	ble.n	800f260 <__hexnan+0x100>
 800f252:	4544      	cmp	r4, r8
 800f254:	d9c1      	bls.n	800f1da <__hexnan+0x7a>
 800f256:	2300      	movs	r3, #0
 800f258:	f844 3c04 	str.w	r3, [r4, #-4]
 800f25c:	2501      	movs	r5, #1
 800f25e:	3c04      	subs	r4, #4
 800f260:	6822      	ldr	r2, [r4, #0]
 800f262:	f000 000f 	and.w	r0, r0, #15
 800f266:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800f26a:	6020      	str	r0, [r4, #0]
 800f26c:	e7b5      	b.n	800f1da <__hexnan+0x7a>
 800f26e:	2508      	movs	r5, #8
 800f270:	e7b3      	b.n	800f1da <__hexnan+0x7a>
 800f272:	9b01      	ldr	r3, [sp, #4]
 800f274:	2b00      	cmp	r3, #0
 800f276:	d0dd      	beq.n	800f234 <__hexnan+0xd4>
 800f278:	f1c3 0320 	rsb	r3, r3, #32
 800f27c:	f04f 32ff 	mov.w	r2, #4294967295
 800f280:	40da      	lsrs	r2, r3
 800f282:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800f286:	4013      	ands	r3, r2
 800f288:	f846 3c04 	str.w	r3, [r6, #-4]
 800f28c:	e7d2      	b.n	800f234 <__hexnan+0xd4>
 800f28e:	3f04      	subs	r7, #4
 800f290:	e7d0      	b.n	800f234 <__hexnan+0xd4>
 800f292:	2004      	movs	r0, #4
 800f294:	e7d5      	b.n	800f242 <__hexnan+0xe2>

0800f296 <__ascii_mbtowc>:
 800f296:	b082      	sub	sp, #8
 800f298:	b901      	cbnz	r1, 800f29c <__ascii_mbtowc+0x6>
 800f29a:	a901      	add	r1, sp, #4
 800f29c:	b142      	cbz	r2, 800f2b0 <__ascii_mbtowc+0x1a>
 800f29e:	b14b      	cbz	r3, 800f2b4 <__ascii_mbtowc+0x1e>
 800f2a0:	7813      	ldrb	r3, [r2, #0]
 800f2a2:	600b      	str	r3, [r1, #0]
 800f2a4:	7812      	ldrb	r2, [r2, #0]
 800f2a6:	1e10      	subs	r0, r2, #0
 800f2a8:	bf18      	it	ne
 800f2aa:	2001      	movne	r0, #1
 800f2ac:	b002      	add	sp, #8
 800f2ae:	4770      	bx	lr
 800f2b0:	4610      	mov	r0, r2
 800f2b2:	e7fb      	b.n	800f2ac <__ascii_mbtowc+0x16>
 800f2b4:	f06f 0001 	mvn.w	r0, #1
 800f2b8:	e7f8      	b.n	800f2ac <__ascii_mbtowc+0x16>

0800f2ba <_realloc_r>:
 800f2ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f2be:	4607      	mov	r7, r0
 800f2c0:	4614      	mov	r4, r2
 800f2c2:	460d      	mov	r5, r1
 800f2c4:	b921      	cbnz	r1, 800f2d0 <_realloc_r+0x16>
 800f2c6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f2ca:	4611      	mov	r1, r2
 800f2cc:	f7fd bcb4 	b.w	800cc38 <_malloc_r>
 800f2d0:	b92a      	cbnz	r2, 800f2de <_realloc_r+0x24>
 800f2d2:	f7fd fc3d 	bl	800cb50 <_free_r>
 800f2d6:	4625      	mov	r5, r4
 800f2d8:	4628      	mov	r0, r5
 800f2da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f2de:	f000 f86b 	bl	800f3b8 <_malloc_usable_size_r>
 800f2e2:	4284      	cmp	r4, r0
 800f2e4:	4606      	mov	r6, r0
 800f2e6:	d802      	bhi.n	800f2ee <_realloc_r+0x34>
 800f2e8:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800f2ec:	d8f4      	bhi.n	800f2d8 <_realloc_r+0x1e>
 800f2ee:	4621      	mov	r1, r4
 800f2f0:	4638      	mov	r0, r7
 800f2f2:	f7fd fca1 	bl	800cc38 <_malloc_r>
 800f2f6:	4680      	mov	r8, r0
 800f2f8:	b908      	cbnz	r0, 800f2fe <_realloc_r+0x44>
 800f2fa:	4645      	mov	r5, r8
 800f2fc:	e7ec      	b.n	800f2d8 <_realloc_r+0x1e>
 800f2fe:	42b4      	cmp	r4, r6
 800f300:	4622      	mov	r2, r4
 800f302:	4629      	mov	r1, r5
 800f304:	bf28      	it	cs
 800f306:	4632      	movcs	r2, r6
 800f308:	f7fc fd97 	bl	800be3a <memcpy>
 800f30c:	4629      	mov	r1, r5
 800f30e:	4638      	mov	r0, r7
 800f310:	f7fd fc1e 	bl	800cb50 <_free_r>
 800f314:	e7f1      	b.n	800f2fa <_realloc_r+0x40>

0800f316 <__ascii_wctomb>:
 800f316:	4603      	mov	r3, r0
 800f318:	4608      	mov	r0, r1
 800f31a:	b141      	cbz	r1, 800f32e <__ascii_wctomb+0x18>
 800f31c:	2aff      	cmp	r2, #255	@ 0xff
 800f31e:	d904      	bls.n	800f32a <__ascii_wctomb+0x14>
 800f320:	228a      	movs	r2, #138	@ 0x8a
 800f322:	601a      	str	r2, [r3, #0]
 800f324:	f04f 30ff 	mov.w	r0, #4294967295
 800f328:	4770      	bx	lr
 800f32a:	700a      	strb	r2, [r1, #0]
 800f32c:	2001      	movs	r0, #1
 800f32e:	4770      	bx	lr

0800f330 <_raise_r>:
 800f330:	291f      	cmp	r1, #31
 800f332:	b538      	push	{r3, r4, r5, lr}
 800f334:	4605      	mov	r5, r0
 800f336:	460c      	mov	r4, r1
 800f338:	d904      	bls.n	800f344 <_raise_r+0x14>
 800f33a:	2316      	movs	r3, #22
 800f33c:	6003      	str	r3, [r0, #0]
 800f33e:	f04f 30ff 	mov.w	r0, #4294967295
 800f342:	bd38      	pop	{r3, r4, r5, pc}
 800f344:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800f346:	b112      	cbz	r2, 800f34e <_raise_r+0x1e>
 800f348:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800f34c:	b94b      	cbnz	r3, 800f362 <_raise_r+0x32>
 800f34e:	4628      	mov	r0, r5
 800f350:	f000 f830 	bl	800f3b4 <_getpid_r>
 800f354:	4622      	mov	r2, r4
 800f356:	4601      	mov	r1, r0
 800f358:	4628      	mov	r0, r5
 800f35a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f35e:	f000 b817 	b.w	800f390 <_kill_r>
 800f362:	2b01      	cmp	r3, #1
 800f364:	d00a      	beq.n	800f37c <_raise_r+0x4c>
 800f366:	1c59      	adds	r1, r3, #1
 800f368:	d103      	bne.n	800f372 <_raise_r+0x42>
 800f36a:	2316      	movs	r3, #22
 800f36c:	6003      	str	r3, [r0, #0]
 800f36e:	2001      	movs	r0, #1
 800f370:	e7e7      	b.n	800f342 <_raise_r+0x12>
 800f372:	2100      	movs	r1, #0
 800f374:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800f378:	4620      	mov	r0, r4
 800f37a:	4798      	blx	r3
 800f37c:	2000      	movs	r0, #0
 800f37e:	e7e0      	b.n	800f342 <_raise_r+0x12>

0800f380 <raise>:
 800f380:	4b02      	ldr	r3, [pc, #8]	@ (800f38c <raise+0xc>)
 800f382:	4601      	mov	r1, r0
 800f384:	6818      	ldr	r0, [r3, #0]
 800f386:	f7ff bfd3 	b.w	800f330 <_raise_r>
 800f38a:	bf00      	nop
 800f38c:	2000d140 	.word	0x2000d140

0800f390 <_kill_r>:
 800f390:	b538      	push	{r3, r4, r5, lr}
 800f392:	4d07      	ldr	r5, [pc, #28]	@ (800f3b0 <_kill_r+0x20>)
 800f394:	2300      	movs	r3, #0
 800f396:	4604      	mov	r4, r0
 800f398:	4608      	mov	r0, r1
 800f39a:	4611      	mov	r1, r2
 800f39c:	602b      	str	r3, [r5, #0]
 800f39e:	f7f1 fe7d 	bl	800109c <_kill>
 800f3a2:	1c43      	adds	r3, r0, #1
 800f3a4:	d102      	bne.n	800f3ac <_kill_r+0x1c>
 800f3a6:	682b      	ldr	r3, [r5, #0]
 800f3a8:	b103      	cbz	r3, 800f3ac <_kill_r+0x1c>
 800f3aa:	6023      	str	r3, [r4, #0]
 800f3ac:	bd38      	pop	{r3, r4, r5, pc}
 800f3ae:	bf00      	nop
 800f3b0:	2001420c 	.word	0x2001420c

0800f3b4 <_getpid_r>:
 800f3b4:	f7f1 be64 	b.w	8001080 <_getpid>

0800f3b8 <_malloc_usable_size_r>:
 800f3b8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f3bc:	1f18      	subs	r0, r3, #4
 800f3be:	2b00      	cmp	r3, #0
 800f3c0:	bfbc      	itt	lt
 800f3c2:	580b      	ldrlt	r3, [r1, r0]
 800f3c4:	18c0      	addlt	r0, r0, r3
 800f3c6:	4770      	bx	lr

0800f3c8 <_init>:
 800f3c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f3ca:	bf00      	nop
 800f3cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f3ce:	bc08      	pop	{r3}
 800f3d0:	469e      	mov	lr, r3
 800f3d2:	4770      	bx	lr

0800f3d4 <_fini>:
 800f3d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f3d6:	bf00      	nop
 800f3d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f3da:	bc08      	pop	{r3}
 800f3dc:	469e      	mov	lr, r3
 800f3de:	4770      	bx	lr
