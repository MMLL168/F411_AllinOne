
F411_INMP441_0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f3e8  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001b6c  0800f588  0800f588  00010588  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080110f4  080110f4  000202f4  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080110f4  080110f4  000120f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080110fc  080110fc  000202f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080110fc  080110fc  000120fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08011100  08011100  00012100  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000d2f4  20000000  08011104  00013000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001e58  2000d2f4  0801e3f8  000202f4  2**2
                  ALLOC
 10 ._user_heap_stack 00001004  2000f14c  0801e3f8  0002114c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000202f4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018bbe  00000000  00000000  00020324  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004164  00000000  00000000  00038ee2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000014d8  00000000  00000000  0003d048  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001006  00000000  00000000  0003e520  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001c562  00000000  00000000  0003f526  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001dfd2  00000000  00000000  0005ba88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a24fd  00000000  00000000  00079a5a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0011bf57  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006a58  00000000  00000000  0011bf9c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000053  00000000  00000000  001229f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000d2f4 	.word	0x2000d2f4
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800f570 	.word	0x0800f570

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000d2f8 	.word	0x2000d2f8
 80001dc:	0800f570 	.word	0x0800f570

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cac:	f000 b9be 	b.w	800102c <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f83c 	bl	8000d34 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__aeabi_d2lz>:
 8000cc8:	b538      	push	{r3, r4, r5, lr}
 8000cca:	2200      	movs	r2, #0
 8000ccc:	2300      	movs	r3, #0
 8000cce:	4604      	mov	r4, r0
 8000cd0:	460d      	mov	r5, r1
 8000cd2:	f7ff ff0b 	bl	8000aec <__aeabi_dcmplt>
 8000cd6:	b928      	cbnz	r0, 8000ce4 <__aeabi_d2lz+0x1c>
 8000cd8:	4620      	mov	r0, r4
 8000cda:	4629      	mov	r1, r5
 8000cdc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000ce0:	f000 b80a 	b.w	8000cf8 <__aeabi_d2ulz>
 8000ce4:	4620      	mov	r0, r4
 8000ce6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000cea:	f000 f805 	bl	8000cf8 <__aeabi_d2ulz>
 8000cee:	4240      	negs	r0, r0
 8000cf0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cf4:	bd38      	pop	{r3, r4, r5, pc}
 8000cf6:	bf00      	nop

08000cf8 <__aeabi_d2ulz>:
 8000cf8:	b5d0      	push	{r4, r6, r7, lr}
 8000cfa:	4b0c      	ldr	r3, [pc, #48]	@ (8000d2c <__aeabi_d2ulz+0x34>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	4606      	mov	r6, r0
 8000d00:	460f      	mov	r7, r1
 8000d02:	f7ff fc81 	bl	8000608 <__aeabi_dmul>
 8000d06:	f7ff ff57 	bl	8000bb8 <__aeabi_d2uiz>
 8000d0a:	4604      	mov	r4, r0
 8000d0c:	f7ff fc02 	bl	8000514 <__aeabi_ui2d>
 8000d10:	4b07      	ldr	r3, [pc, #28]	@ (8000d30 <__aeabi_d2ulz+0x38>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	f7ff fc78 	bl	8000608 <__aeabi_dmul>
 8000d18:	4602      	mov	r2, r0
 8000d1a:	460b      	mov	r3, r1
 8000d1c:	4630      	mov	r0, r6
 8000d1e:	4639      	mov	r1, r7
 8000d20:	f7ff faba 	bl	8000298 <__aeabi_dsub>
 8000d24:	f7ff ff48 	bl	8000bb8 <__aeabi_d2uiz>
 8000d28:	4621      	mov	r1, r4
 8000d2a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d2c:	3df00000 	.word	0x3df00000
 8000d30:	41f00000 	.word	0x41f00000

08000d34 <__udivmoddi4>:
 8000d34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d38:	9d08      	ldr	r5, [sp, #32]
 8000d3a:	468e      	mov	lr, r1
 8000d3c:	4604      	mov	r4, r0
 8000d3e:	4688      	mov	r8, r1
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d14a      	bne.n	8000dda <__udivmoddi4+0xa6>
 8000d44:	428a      	cmp	r2, r1
 8000d46:	4617      	mov	r7, r2
 8000d48:	d962      	bls.n	8000e10 <__udivmoddi4+0xdc>
 8000d4a:	fab2 f682 	clz	r6, r2
 8000d4e:	b14e      	cbz	r6, 8000d64 <__udivmoddi4+0x30>
 8000d50:	f1c6 0320 	rsb	r3, r6, #32
 8000d54:	fa01 f806 	lsl.w	r8, r1, r6
 8000d58:	fa20 f303 	lsr.w	r3, r0, r3
 8000d5c:	40b7      	lsls	r7, r6
 8000d5e:	ea43 0808 	orr.w	r8, r3, r8
 8000d62:	40b4      	lsls	r4, r6
 8000d64:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d68:	fa1f fc87 	uxth.w	ip, r7
 8000d6c:	fbb8 f1fe 	udiv	r1, r8, lr
 8000d70:	0c23      	lsrs	r3, r4, #16
 8000d72:	fb0e 8811 	mls	r8, lr, r1, r8
 8000d76:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d7a:	fb01 f20c 	mul.w	r2, r1, ip
 8000d7e:	429a      	cmp	r2, r3
 8000d80:	d909      	bls.n	8000d96 <__udivmoddi4+0x62>
 8000d82:	18fb      	adds	r3, r7, r3
 8000d84:	f101 30ff 	add.w	r0, r1, #4294967295
 8000d88:	f080 80ea 	bcs.w	8000f60 <__udivmoddi4+0x22c>
 8000d8c:	429a      	cmp	r2, r3
 8000d8e:	f240 80e7 	bls.w	8000f60 <__udivmoddi4+0x22c>
 8000d92:	3902      	subs	r1, #2
 8000d94:	443b      	add	r3, r7
 8000d96:	1a9a      	subs	r2, r3, r2
 8000d98:	b2a3      	uxth	r3, r4
 8000d9a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d9e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000da2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000da6:	fb00 fc0c 	mul.w	ip, r0, ip
 8000daa:	459c      	cmp	ip, r3
 8000dac:	d909      	bls.n	8000dc2 <__udivmoddi4+0x8e>
 8000dae:	18fb      	adds	r3, r7, r3
 8000db0:	f100 32ff 	add.w	r2, r0, #4294967295
 8000db4:	f080 80d6 	bcs.w	8000f64 <__udivmoddi4+0x230>
 8000db8:	459c      	cmp	ip, r3
 8000dba:	f240 80d3 	bls.w	8000f64 <__udivmoddi4+0x230>
 8000dbe:	443b      	add	r3, r7
 8000dc0:	3802      	subs	r0, #2
 8000dc2:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000dc6:	eba3 030c 	sub.w	r3, r3, ip
 8000dca:	2100      	movs	r1, #0
 8000dcc:	b11d      	cbz	r5, 8000dd6 <__udivmoddi4+0xa2>
 8000dce:	40f3      	lsrs	r3, r6
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	e9c5 3200 	strd	r3, r2, [r5]
 8000dd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dda:	428b      	cmp	r3, r1
 8000ddc:	d905      	bls.n	8000dea <__udivmoddi4+0xb6>
 8000dde:	b10d      	cbz	r5, 8000de4 <__udivmoddi4+0xb0>
 8000de0:	e9c5 0100 	strd	r0, r1, [r5]
 8000de4:	2100      	movs	r1, #0
 8000de6:	4608      	mov	r0, r1
 8000de8:	e7f5      	b.n	8000dd6 <__udivmoddi4+0xa2>
 8000dea:	fab3 f183 	clz	r1, r3
 8000dee:	2900      	cmp	r1, #0
 8000df0:	d146      	bne.n	8000e80 <__udivmoddi4+0x14c>
 8000df2:	4573      	cmp	r3, lr
 8000df4:	d302      	bcc.n	8000dfc <__udivmoddi4+0xc8>
 8000df6:	4282      	cmp	r2, r0
 8000df8:	f200 8105 	bhi.w	8001006 <__udivmoddi4+0x2d2>
 8000dfc:	1a84      	subs	r4, r0, r2
 8000dfe:	eb6e 0203 	sbc.w	r2, lr, r3
 8000e02:	2001      	movs	r0, #1
 8000e04:	4690      	mov	r8, r2
 8000e06:	2d00      	cmp	r5, #0
 8000e08:	d0e5      	beq.n	8000dd6 <__udivmoddi4+0xa2>
 8000e0a:	e9c5 4800 	strd	r4, r8, [r5]
 8000e0e:	e7e2      	b.n	8000dd6 <__udivmoddi4+0xa2>
 8000e10:	2a00      	cmp	r2, #0
 8000e12:	f000 8090 	beq.w	8000f36 <__udivmoddi4+0x202>
 8000e16:	fab2 f682 	clz	r6, r2
 8000e1a:	2e00      	cmp	r6, #0
 8000e1c:	f040 80a4 	bne.w	8000f68 <__udivmoddi4+0x234>
 8000e20:	1a8a      	subs	r2, r1, r2
 8000e22:	0c03      	lsrs	r3, r0, #16
 8000e24:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e28:	b280      	uxth	r0, r0
 8000e2a:	b2bc      	uxth	r4, r7
 8000e2c:	2101      	movs	r1, #1
 8000e2e:	fbb2 fcfe 	udiv	ip, r2, lr
 8000e32:	fb0e 221c 	mls	r2, lr, ip, r2
 8000e36:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000e3a:	fb04 f20c 	mul.w	r2, r4, ip
 8000e3e:	429a      	cmp	r2, r3
 8000e40:	d907      	bls.n	8000e52 <__udivmoddi4+0x11e>
 8000e42:	18fb      	adds	r3, r7, r3
 8000e44:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000e48:	d202      	bcs.n	8000e50 <__udivmoddi4+0x11c>
 8000e4a:	429a      	cmp	r2, r3
 8000e4c:	f200 80e0 	bhi.w	8001010 <__udivmoddi4+0x2dc>
 8000e50:	46c4      	mov	ip, r8
 8000e52:	1a9b      	subs	r3, r3, r2
 8000e54:	fbb3 f2fe 	udiv	r2, r3, lr
 8000e58:	fb0e 3312 	mls	r3, lr, r2, r3
 8000e5c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000e60:	fb02 f404 	mul.w	r4, r2, r4
 8000e64:	429c      	cmp	r4, r3
 8000e66:	d907      	bls.n	8000e78 <__udivmoddi4+0x144>
 8000e68:	18fb      	adds	r3, r7, r3
 8000e6a:	f102 30ff 	add.w	r0, r2, #4294967295
 8000e6e:	d202      	bcs.n	8000e76 <__udivmoddi4+0x142>
 8000e70:	429c      	cmp	r4, r3
 8000e72:	f200 80ca 	bhi.w	800100a <__udivmoddi4+0x2d6>
 8000e76:	4602      	mov	r2, r0
 8000e78:	1b1b      	subs	r3, r3, r4
 8000e7a:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000e7e:	e7a5      	b.n	8000dcc <__udivmoddi4+0x98>
 8000e80:	f1c1 0620 	rsb	r6, r1, #32
 8000e84:	408b      	lsls	r3, r1
 8000e86:	fa22 f706 	lsr.w	r7, r2, r6
 8000e8a:	431f      	orrs	r7, r3
 8000e8c:	fa0e f401 	lsl.w	r4, lr, r1
 8000e90:	fa20 f306 	lsr.w	r3, r0, r6
 8000e94:	fa2e fe06 	lsr.w	lr, lr, r6
 8000e98:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000e9c:	4323      	orrs	r3, r4
 8000e9e:	fa00 f801 	lsl.w	r8, r0, r1
 8000ea2:	fa1f fc87 	uxth.w	ip, r7
 8000ea6:	fbbe f0f9 	udiv	r0, lr, r9
 8000eaa:	0c1c      	lsrs	r4, r3, #16
 8000eac:	fb09 ee10 	mls	lr, r9, r0, lr
 8000eb0:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000eb4:	fb00 fe0c 	mul.w	lr, r0, ip
 8000eb8:	45a6      	cmp	lr, r4
 8000eba:	fa02 f201 	lsl.w	r2, r2, r1
 8000ebe:	d909      	bls.n	8000ed4 <__udivmoddi4+0x1a0>
 8000ec0:	193c      	adds	r4, r7, r4
 8000ec2:	f100 3aff 	add.w	sl, r0, #4294967295
 8000ec6:	f080 809c 	bcs.w	8001002 <__udivmoddi4+0x2ce>
 8000eca:	45a6      	cmp	lr, r4
 8000ecc:	f240 8099 	bls.w	8001002 <__udivmoddi4+0x2ce>
 8000ed0:	3802      	subs	r0, #2
 8000ed2:	443c      	add	r4, r7
 8000ed4:	eba4 040e 	sub.w	r4, r4, lr
 8000ed8:	fa1f fe83 	uxth.w	lr, r3
 8000edc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000ee0:	fb09 4413 	mls	r4, r9, r3, r4
 8000ee4:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000ee8:	fb03 fc0c 	mul.w	ip, r3, ip
 8000eec:	45a4      	cmp	ip, r4
 8000eee:	d908      	bls.n	8000f02 <__udivmoddi4+0x1ce>
 8000ef0:	193c      	adds	r4, r7, r4
 8000ef2:	f103 3eff 	add.w	lr, r3, #4294967295
 8000ef6:	f080 8082 	bcs.w	8000ffe <__udivmoddi4+0x2ca>
 8000efa:	45a4      	cmp	ip, r4
 8000efc:	d97f      	bls.n	8000ffe <__udivmoddi4+0x2ca>
 8000efe:	3b02      	subs	r3, #2
 8000f00:	443c      	add	r4, r7
 8000f02:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000f06:	eba4 040c 	sub.w	r4, r4, ip
 8000f0a:	fba0 ec02 	umull	lr, ip, r0, r2
 8000f0e:	4564      	cmp	r4, ip
 8000f10:	4673      	mov	r3, lr
 8000f12:	46e1      	mov	r9, ip
 8000f14:	d362      	bcc.n	8000fdc <__udivmoddi4+0x2a8>
 8000f16:	d05f      	beq.n	8000fd8 <__udivmoddi4+0x2a4>
 8000f18:	b15d      	cbz	r5, 8000f32 <__udivmoddi4+0x1fe>
 8000f1a:	ebb8 0203 	subs.w	r2, r8, r3
 8000f1e:	eb64 0409 	sbc.w	r4, r4, r9
 8000f22:	fa04 f606 	lsl.w	r6, r4, r6
 8000f26:	fa22 f301 	lsr.w	r3, r2, r1
 8000f2a:	431e      	orrs	r6, r3
 8000f2c:	40cc      	lsrs	r4, r1
 8000f2e:	e9c5 6400 	strd	r6, r4, [r5]
 8000f32:	2100      	movs	r1, #0
 8000f34:	e74f      	b.n	8000dd6 <__udivmoddi4+0xa2>
 8000f36:	fbb1 fcf2 	udiv	ip, r1, r2
 8000f3a:	0c01      	lsrs	r1, r0, #16
 8000f3c:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000f40:	b280      	uxth	r0, r0
 8000f42:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000f46:	463b      	mov	r3, r7
 8000f48:	4638      	mov	r0, r7
 8000f4a:	463c      	mov	r4, r7
 8000f4c:	46b8      	mov	r8, r7
 8000f4e:	46be      	mov	lr, r7
 8000f50:	2620      	movs	r6, #32
 8000f52:	fbb1 f1f7 	udiv	r1, r1, r7
 8000f56:	eba2 0208 	sub.w	r2, r2, r8
 8000f5a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000f5e:	e766      	b.n	8000e2e <__udivmoddi4+0xfa>
 8000f60:	4601      	mov	r1, r0
 8000f62:	e718      	b.n	8000d96 <__udivmoddi4+0x62>
 8000f64:	4610      	mov	r0, r2
 8000f66:	e72c      	b.n	8000dc2 <__udivmoddi4+0x8e>
 8000f68:	f1c6 0220 	rsb	r2, r6, #32
 8000f6c:	fa2e f302 	lsr.w	r3, lr, r2
 8000f70:	40b7      	lsls	r7, r6
 8000f72:	40b1      	lsls	r1, r6
 8000f74:	fa20 f202 	lsr.w	r2, r0, r2
 8000f78:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000f7c:	430a      	orrs	r2, r1
 8000f7e:	fbb3 f8fe 	udiv	r8, r3, lr
 8000f82:	b2bc      	uxth	r4, r7
 8000f84:	fb0e 3318 	mls	r3, lr, r8, r3
 8000f88:	0c11      	lsrs	r1, r2, #16
 8000f8a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f8e:	fb08 f904 	mul.w	r9, r8, r4
 8000f92:	40b0      	lsls	r0, r6
 8000f94:	4589      	cmp	r9, r1
 8000f96:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000f9a:	b280      	uxth	r0, r0
 8000f9c:	d93e      	bls.n	800101c <__udivmoddi4+0x2e8>
 8000f9e:	1879      	adds	r1, r7, r1
 8000fa0:	f108 3cff 	add.w	ip, r8, #4294967295
 8000fa4:	d201      	bcs.n	8000faa <__udivmoddi4+0x276>
 8000fa6:	4589      	cmp	r9, r1
 8000fa8:	d81f      	bhi.n	8000fea <__udivmoddi4+0x2b6>
 8000faa:	eba1 0109 	sub.w	r1, r1, r9
 8000fae:	fbb1 f9fe 	udiv	r9, r1, lr
 8000fb2:	fb09 f804 	mul.w	r8, r9, r4
 8000fb6:	fb0e 1119 	mls	r1, lr, r9, r1
 8000fba:	b292      	uxth	r2, r2
 8000fbc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000fc0:	4542      	cmp	r2, r8
 8000fc2:	d229      	bcs.n	8001018 <__udivmoddi4+0x2e4>
 8000fc4:	18ba      	adds	r2, r7, r2
 8000fc6:	f109 31ff 	add.w	r1, r9, #4294967295
 8000fca:	d2c4      	bcs.n	8000f56 <__udivmoddi4+0x222>
 8000fcc:	4542      	cmp	r2, r8
 8000fce:	d2c2      	bcs.n	8000f56 <__udivmoddi4+0x222>
 8000fd0:	f1a9 0102 	sub.w	r1, r9, #2
 8000fd4:	443a      	add	r2, r7
 8000fd6:	e7be      	b.n	8000f56 <__udivmoddi4+0x222>
 8000fd8:	45f0      	cmp	r8, lr
 8000fda:	d29d      	bcs.n	8000f18 <__udivmoddi4+0x1e4>
 8000fdc:	ebbe 0302 	subs.w	r3, lr, r2
 8000fe0:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000fe4:	3801      	subs	r0, #1
 8000fe6:	46e1      	mov	r9, ip
 8000fe8:	e796      	b.n	8000f18 <__udivmoddi4+0x1e4>
 8000fea:	eba7 0909 	sub.w	r9, r7, r9
 8000fee:	4449      	add	r1, r9
 8000ff0:	f1a8 0c02 	sub.w	ip, r8, #2
 8000ff4:	fbb1 f9fe 	udiv	r9, r1, lr
 8000ff8:	fb09 f804 	mul.w	r8, r9, r4
 8000ffc:	e7db      	b.n	8000fb6 <__udivmoddi4+0x282>
 8000ffe:	4673      	mov	r3, lr
 8001000:	e77f      	b.n	8000f02 <__udivmoddi4+0x1ce>
 8001002:	4650      	mov	r0, sl
 8001004:	e766      	b.n	8000ed4 <__udivmoddi4+0x1a0>
 8001006:	4608      	mov	r0, r1
 8001008:	e6fd      	b.n	8000e06 <__udivmoddi4+0xd2>
 800100a:	443b      	add	r3, r7
 800100c:	3a02      	subs	r2, #2
 800100e:	e733      	b.n	8000e78 <__udivmoddi4+0x144>
 8001010:	f1ac 0c02 	sub.w	ip, ip, #2
 8001014:	443b      	add	r3, r7
 8001016:	e71c      	b.n	8000e52 <__udivmoddi4+0x11e>
 8001018:	4649      	mov	r1, r9
 800101a:	e79c      	b.n	8000f56 <__udivmoddi4+0x222>
 800101c:	eba1 0109 	sub.w	r1, r1, r9
 8001020:	46c4      	mov	ip, r8
 8001022:	fbb1 f9fe 	udiv	r9, r1, lr
 8001026:	fb09 f804 	mul.w	r8, r9, r4
 800102a:	e7c4      	b.n	8000fb6 <__udivmoddi4+0x282>

0800102c <__aeabi_idiv0>:
 800102c:	4770      	bx	lr
 800102e:	bf00      	nop

08001030 <_close>:
 * 這些是未實作的函式存根。
 * 當應用程式連結到 newlib-nano 函式庫但沒有提供這些底層實作時，
 * 就需要這些存根來避免連結器錯誤。
 */

int _close(int file) {
 8001030:	b480      	push	{r7}
 8001032:	b083      	sub	sp, #12
 8001034:	af00      	add	r7, sp, #0
 8001036:	6078      	str	r0, [r7, #4]
    return -1;
 8001038:	f04f 33ff 	mov.w	r3, #4294967295
}
 800103c:	4618      	mov	r0, r3
 800103e:	370c      	adds	r7, #12
 8001040:	46bd      	mov	sp, r7
 8001042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001046:	4770      	bx	lr

08001048 <_lseek>:

int _lseek(int file, int ptr, int dir) {
 8001048:	b480      	push	{r7}
 800104a:	b085      	sub	sp, #20
 800104c:	af00      	add	r7, sp, #0
 800104e:	60f8      	str	r0, [r7, #12]
 8001050:	60b9      	str	r1, [r7, #8]
 8001052:	607a      	str	r2, [r7, #4]
    return 0;
 8001054:	2300      	movs	r3, #0
}
 8001056:	4618      	mov	r0, r3
 8001058:	3714      	adds	r7, #20
 800105a:	46bd      	mov	sp, r7
 800105c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001060:	4770      	bx	lr

08001062 <_read>:

int _read(int file, char *ptr, int len) {
 8001062:	b480      	push	{r7}
 8001064:	b085      	sub	sp, #20
 8001066:	af00      	add	r7, sp, #0
 8001068:	60f8      	str	r0, [r7, #12]
 800106a:	60b9      	str	r1, [r7, #8]
 800106c:	607a      	str	r2, [r7, #4]
    return 0;
 800106e:	2300      	movs	r3, #0
}
 8001070:	4618      	mov	r0, r3
 8001072:	3714      	adds	r7, #20
 8001074:	46bd      	mov	sp, r7
 8001076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107a:	4770      	bx	lr

0800107c <_fstat>:

int _fstat(int file, struct stat *st) {
 800107c:	b480      	push	{r7}
 800107e:	b083      	sub	sp, #12
 8001080:	af00      	add	r7, sp, #0
 8001082:	6078      	str	r0, [r7, #4]
 8001084:	6039      	str	r1, [r7, #0]
    st->st_mode = S_IFCHR;
 8001086:	683b      	ldr	r3, [r7, #0]
 8001088:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800108c:	605a      	str	r2, [r3, #4]
    return 0;
 800108e:	2300      	movs	r3, #0
}
 8001090:	4618      	mov	r0, r3
 8001092:	370c      	adds	r7, #12
 8001094:	46bd      	mov	sp, r7
 8001096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109a:	4770      	bx	lr

0800109c <_isatty>:

int _isatty(int file) {
 800109c:	b480      	push	{r7}
 800109e:	b083      	sub	sp, #12
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	6078      	str	r0, [r7, #4]
    return 1;
 80010a4:	2301      	movs	r3, #1
}
 80010a6:	4618      	mov	r0, r3
 80010a8:	370c      	adds	r7, #12
 80010aa:	46bd      	mov	sp, r7
 80010ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b0:	4770      	bx	lr
	...

080010b4 <_write>:

int _write(int file, char *ptr, int len)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b084      	sub	sp, #16
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	60f8      	str	r0, [r7, #12]
 80010bc:	60b9      	str	r1, [r7, #8]
 80010be:	607a      	str	r2, [r7, #4]
  // 只處理標準輸出 (STDOUT) 和標準錯誤 (STDERR)
  if (file == 1 || file == 2)
 80010c0:	68fb      	ldr	r3, [r7, #12]
 80010c2:	2b01      	cmp	r3, #1
 80010c4:	d002      	beq.n	80010cc <_write+0x18>
 80010c6:	68fb      	ldr	r3, [r7, #12]
 80010c8:	2b02      	cmp	r3, #2
 80010ca:	d106      	bne.n	80010da <_write+0x26>
  {
    // 將數據透過 huart6 傳送出去
    // 注意，我們傳遞的是 huart6 的位址: &huart6
    // 最後一個參數是超時時間，設定 100ms 即可
    HAL_UART_Transmit(&huart6, (uint8_t*)ptr, len, 100);
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	b29a      	uxth	r2, r3
 80010d0:	2364      	movs	r3, #100	@ 0x64
 80010d2:	68b9      	ldr	r1, [r7, #8]
 80010d4:	4803      	ldr	r0, [pc, #12]	@ (80010e4 <_write+0x30>)
 80010d6:	f008 fd5f 	bl	8009b98 <HAL_UART_Transmit>
  }
  return len;
 80010da:	687b      	ldr	r3, [r7, #4]
}
 80010dc:	4618      	mov	r0, r3
 80010de:	3710      	adds	r7, #16
 80010e0:	46bd      	mov	sp, r7
 80010e2:	bd80      	pop	{r7, pc}
 80010e4:	2000efa0 	.word	0x2000efa0

080010e8 <_getpid>:

// 其他可能需要的存根
int _getpid(void) {
 80010e8:	b480      	push	{r7}
 80010ea:	af00      	add	r7, sp, #0
    return 1;
 80010ec:	2301      	movs	r3, #1
}
 80010ee:	4618      	mov	r0, r3
 80010f0:	46bd      	mov	sp, r7
 80010f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f6:	4770      	bx	lr

080010f8 <_kill>:

int _kill(int pid, int sig) {
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b082      	sub	sp, #8
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]
 8001100:	6039      	str	r1, [r7, #0]
    errno = EINVAL;
 8001102:	f00a ff41 	bl	800bf88 <__errno>
 8001106:	4603      	mov	r3, r0
 8001108:	2216      	movs	r2, #22
 800110a:	601a      	str	r2, [r3, #0]
    return -1;
 800110c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001110:	4618      	mov	r0, r3
 8001112:	3708      	adds	r7, #8
 8001114:	46bd      	mov	sp, r7
 8001116:	bd80      	pop	{r7, pc}

08001118 <_exit>:

void _exit(int status) {
 8001118:	b580      	push	{r7, lr}
 800111a:	b082      	sub	sp, #8
 800111c:	af00      	add	r7, sp, #0
 800111e:	6078      	str	r0, [r7, #4]
    _kill(status, -1);
 8001120:	f04f 31ff 	mov.w	r1, #4294967295
 8001124:	6878      	ldr	r0, [r7, #4]
 8001126:	f7ff ffe7 	bl	80010f8 <_kill>
    while (1) {} // 無限迴圈
 800112a:	bf00      	nop
 800112c:	e7fd      	b.n	800112a <_exit+0x12>
	...

08001130 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	b084      	sub	sp, #16
 8001134:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001136:	463b      	mov	r3, r7
 8001138:	2200      	movs	r2, #0
 800113a:	601a      	str	r2, [r3, #0]
 800113c:	605a      	str	r2, [r3, #4]
 800113e:	609a      	str	r2, [r3, #8]
 8001140:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001142:	4b36      	ldr	r3, [pc, #216]	@ (800121c <MX_ADC1_Init+0xec>)
 8001144:	4a36      	ldr	r2, [pc, #216]	@ (8001220 <MX_ADC1_Init+0xf0>)
 8001146:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001148:	4b34      	ldr	r3, [pc, #208]	@ (800121c <MX_ADC1_Init+0xec>)
 800114a:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800114e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001150:	4b32      	ldr	r3, [pc, #200]	@ (800121c <MX_ADC1_Init+0xec>)
 8001152:	2200      	movs	r2, #0
 8001154:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8001156:	4b31      	ldr	r3, [pc, #196]	@ (800121c <MX_ADC1_Init+0xec>)
 8001158:	2201      	movs	r2, #1
 800115a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800115c:	4b2f      	ldr	r3, [pc, #188]	@ (800121c <MX_ADC1_Init+0xec>)
 800115e:	2200      	movs	r2, #0
 8001160:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001162:	4b2e      	ldr	r3, [pc, #184]	@ (800121c <MX_ADC1_Init+0xec>)
 8001164:	2200      	movs	r2, #0
 8001166:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800116a:	4b2c      	ldr	r3, [pc, #176]	@ (800121c <MX_ADC1_Init+0xec>)
 800116c:	2200      	movs	r2, #0
 800116e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001170:	4b2a      	ldr	r3, [pc, #168]	@ (800121c <MX_ADC1_Init+0xec>)
 8001172:	4a2c      	ldr	r2, [pc, #176]	@ (8001224 <MX_ADC1_Init+0xf4>)
 8001174:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001176:	4b29      	ldr	r3, [pc, #164]	@ (800121c <MX_ADC1_Init+0xec>)
 8001178:	2200      	movs	r2, #0
 800117a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 4;
 800117c:	4b27      	ldr	r3, [pc, #156]	@ (800121c <MX_ADC1_Init+0xec>)
 800117e:	2204      	movs	r2, #4
 8001180:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001182:	4b26      	ldr	r3, [pc, #152]	@ (800121c <MX_ADC1_Init+0xec>)
 8001184:	2200      	movs	r2, #0
 8001186:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800118a:	4b24      	ldr	r3, [pc, #144]	@ (800121c <MX_ADC1_Init+0xec>)
 800118c:	2201      	movs	r2, #1
 800118e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001190:	4822      	ldr	r0, [pc, #136]	@ (800121c <MX_ADC1_Init+0xec>)
 8001192:	f004 fa29 	bl	80055e8 <HAL_ADC_Init>
 8001196:	4603      	mov	r3, r0
 8001198:	2b00      	cmp	r3, #0
 800119a:	d001      	beq.n	80011a0 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 800119c:	f003 fb9c 	bl	80048d8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 80011a0:	2306      	movs	r3, #6
 80011a2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80011a4:	2301      	movs	r3, #1
 80011a6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80011a8:	2300      	movs	r3, #0
 80011aa:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80011ac:	463b      	mov	r3, r7
 80011ae:	4619      	mov	r1, r3
 80011b0:	481a      	ldr	r0, [pc, #104]	@ (800121c <MX_ADC1_Init+0xec>)
 80011b2:	f004 fbbf 	bl	8005934 <HAL_ADC_ConfigChannel>
 80011b6:	4603      	mov	r3, r0
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d001      	beq.n	80011c0 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80011bc:	f003 fb8c 	bl	80048d8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 80011c0:	2307      	movs	r3, #7
 80011c2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 80011c4:	2302      	movs	r3, #2
 80011c6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80011c8:	463b      	mov	r3, r7
 80011ca:	4619      	mov	r1, r3
 80011cc:	4813      	ldr	r0, [pc, #76]	@ (800121c <MX_ADC1_Init+0xec>)
 80011ce:	f004 fbb1 	bl	8005934 <HAL_ADC_ConfigChannel>
 80011d2:	4603      	mov	r3, r0
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d001      	beq.n	80011dc <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 80011d8:	f003 fb7e 	bl	80048d8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 80011dc:	230e      	movs	r3, #14
 80011de:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 80011e0:	2303      	movs	r3, #3
 80011e2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80011e4:	463b      	mov	r3, r7
 80011e6:	4619      	mov	r1, r3
 80011e8:	480c      	ldr	r0, [pc, #48]	@ (800121c <MX_ADC1_Init+0xec>)
 80011ea:	f004 fba3 	bl	8005934 <HAL_ADC_ConfigChannel>
 80011ee:	4603      	mov	r3, r0
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d001      	beq.n	80011f8 <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 80011f4:	f003 fb70 	bl	80048d8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_15;
 80011f8:	230f      	movs	r3, #15
 80011fa:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 80011fc:	2304      	movs	r3, #4
 80011fe:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001200:	463b      	mov	r3, r7
 8001202:	4619      	mov	r1, r3
 8001204:	4805      	ldr	r0, [pc, #20]	@ (800121c <MX_ADC1_Init+0xec>)
 8001206:	f004 fb95 	bl	8005934 <HAL_ADC_ConfigChannel>
 800120a:	4603      	mov	r3, r0
 800120c:	2b00      	cmp	r3, #0
 800120e:	d001      	beq.n	8001214 <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 8001210:	f003 fb62 	bl	80048d8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001214:	bf00      	nop
 8001216:	3710      	adds	r7, #16
 8001218:	46bd      	mov	sp, r7
 800121a:	bd80      	pop	{r7, pc}
 800121c:	2000d310 	.word	0x2000d310
 8001220:	40012000 	.word	0x40012000
 8001224:	0f000001 	.word	0x0f000001

08001228 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	b08a      	sub	sp, #40	@ 0x28
 800122c:	af00      	add	r7, sp, #0
 800122e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001230:	f107 0314 	add.w	r3, r7, #20
 8001234:	2200      	movs	r2, #0
 8001236:	601a      	str	r2, [r3, #0]
 8001238:	605a      	str	r2, [r3, #4]
 800123a:	609a      	str	r2, [r3, #8]
 800123c:	60da      	str	r2, [r3, #12]
 800123e:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	4a3b      	ldr	r2, [pc, #236]	@ (8001334 <HAL_ADC_MspInit+0x10c>)
 8001246:	4293      	cmp	r3, r2
 8001248:	d170      	bne.n	800132c <HAL_ADC_MspInit+0x104>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800124a:	2300      	movs	r3, #0
 800124c:	613b      	str	r3, [r7, #16]
 800124e:	4b3a      	ldr	r3, [pc, #232]	@ (8001338 <HAL_ADC_MspInit+0x110>)
 8001250:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001252:	4a39      	ldr	r2, [pc, #228]	@ (8001338 <HAL_ADC_MspInit+0x110>)
 8001254:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001258:	6453      	str	r3, [r2, #68]	@ 0x44
 800125a:	4b37      	ldr	r3, [pc, #220]	@ (8001338 <HAL_ADC_MspInit+0x110>)
 800125c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800125e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001262:	613b      	str	r3, [r7, #16]
 8001264:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001266:	2300      	movs	r3, #0
 8001268:	60fb      	str	r3, [r7, #12]
 800126a:	4b33      	ldr	r3, [pc, #204]	@ (8001338 <HAL_ADC_MspInit+0x110>)
 800126c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800126e:	4a32      	ldr	r2, [pc, #200]	@ (8001338 <HAL_ADC_MspInit+0x110>)
 8001270:	f043 0301 	orr.w	r3, r3, #1
 8001274:	6313      	str	r3, [r2, #48]	@ 0x30
 8001276:	4b30      	ldr	r3, [pc, #192]	@ (8001338 <HAL_ADC_MspInit+0x110>)
 8001278:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800127a:	f003 0301 	and.w	r3, r3, #1
 800127e:	60fb      	str	r3, [r7, #12]
 8001280:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001282:	2300      	movs	r3, #0
 8001284:	60bb      	str	r3, [r7, #8]
 8001286:	4b2c      	ldr	r3, [pc, #176]	@ (8001338 <HAL_ADC_MspInit+0x110>)
 8001288:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800128a:	4a2b      	ldr	r2, [pc, #172]	@ (8001338 <HAL_ADC_MspInit+0x110>)
 800128c:	f043 0304 	orr.w	r3, r3, #4
 8001290:	6313      	str	r3, [r2, #48]	@ 0x30
 8001292:	4b29      	ldr	r3, [pc, #164]	@ (8001338 <HAL_ADC_MspInit+0x110>)
 8001294:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001296:	f003 0304 	and.w	r3, r3, #4
 800129a:	60bb      	str	r3, [r7, #8]
 800129c:	68bb      	ldr	r3, [r7, #8]
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    PC4     ------> ADC1_IN14
    PC5     ------> ADC1_IN15
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800129e:	23c0      	movs	r3, #192	@ 0xc0
 80012a0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80012a2:	2303      	movs	r3, #3
 80012a4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012a6:	2300      	movs	r3, #0
 80012a8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012aa:	f107 0314 	add.w	r3, r7, #20
 80012ae:	4619      	mov	r1, r3
 80012b0:	4822      	ldr	r0, [pc, #136]	@ (800133c <HAL_ADC_MspInit+0x114>)
 80012b2:	f005 fb1f 	bl	80068f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80012b6:	2330      	movs	r3, #48	@ 0x30
 80012b8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80012ba:	2303      	movs	r3, #3
 80012bc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012be:	2300      	movs	r3, #0
 80012c0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012c2:	f107 0314 	add.w	r3, r7, #20
 80012c6:	4619      	mov	r1, r3
 80012c8:	481d      	ldr	r0, [pc, #116]	@ (8001340 <HAL_ADC_MspInit+0x118>)
 80012ca:	f005 fb13 	bl	80068f4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 80012ce:	4b1d      	ldr	r3, [pc, #116]	@ (8001344 <HAL_ADC_MspInit+0x11c>)
 80012d0:	4a1d      	ldr	r2, [pc, #116]	@ (8001348 <HAL_ADC_MspInit+0x120>)
 80012d2:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80012d4:	4b1b      	ldr	r3, [pc, #108]	@ (8001344 <HAL_ADC_MspInit+0x11c>)
 80012d6:	2200      	movs	r2, #0
 80012d8:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80012da:	4b1a      	ldr	r3, [pc, #104]	@ (8001344 <HAL_ADC_MspInit+0x11c>)
 80012dc:	2200      	movs	r2, #0
 80012de:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80012e0:	4b18      	ldr	r3, [pc, #96]	@ (8001344 <HAL_ADC_MspInit+0x11c>)
 80012e2:	2200      	movs	r2, #0
 80012e4:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80012e6:	4b17      	ldr	r3, [pc, #92]	@ (8001344 <HAL_ADC_MspInit+0x11c>)
 80012e8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80012ec:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80012ee:	4b15      	ldr	r3, [pc, #84]	@ (8001344 <HAL_ADC_MspInit+0x11c>)
 80012f0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80012f4:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80012f6:	4b13      	ldr	r3, [pc, #76]	@ (8001344 <HAL_ADC_MspInit+0x11c>)
 80012f8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80012fc:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 80012fe:	4b11      	ldr	r3, [pc, #68]	@ (8001344 <HAL_ADC_MspInit+0x11c>)
 8001300:	2200      	movs	r2, #0
 8001302:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001304:	4b0f      	ldr	r3, [pc, #60]	@ (8001344 <HAL_ADC_MspInit+0x11c>)
 8001306:	2200      	movs	r2, #0
 8001308:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800130a:	4b0e      	ldr	r3, [pc, #56]	@ (8001344 <HAL_ADC_MspInit+0x11c>)
 800130c:	2200      	movs	r2, #0
 800130e:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001310:	480c      	ldr	r0, [pc, #48]	@ (8001344 <HAL_ADC_MspInit+0x11c>)
 8001312:	f004 feed 	bl	80060f0 <HAL_DMA_Init>
 8001316:	4603      	mov	r3, r0
 8001318:	2b00      	cmp	r3, #0
 800131a:	d001      	beq.n	8001320 <HAL_ADC_MspInit+0xf8>
    {
      Error_Handler();
 800131c:	f003 fadc 	bl	80048d8 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	4a08      	ldr	r2, [pc, #32]	@ (8001344 <HAL_ADC_MspInit+0x11c>)
 8001324:	639a      	str	r2, [r3, #56]	@ 0x38
 8001326:	4a07      	ldr	r2, [pc, #28]	@ (8001344 <HAL_ADC_MspInit+0x11c>)
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800132c:	bf00      	nop
 800132e:	3728      	adds	r7, #40	@ 0x28
 8001330:	46bd      	mov	sp, r7
 8001332:	bd80      	pop	{r7, pc}
 8001334:	40012000 	.word	0x40012000
 8001338:	40023800 	.word	0x40023800
 800133c:	40020000 	.word	0x40020000
 8001340:	40020800 	.word	0x40020800
 8001344:	2000d358 	.word	0x2000d358
 8001348:	40026410 	.word	0x40026410

0800134c <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8001350:	4b06      	ldr	r3, [pc, #24]	@ (800136c <MX_CRC_Init+0x20>)
 8001352:	4a07      	ldr	r2, [pc, #28]	@ (8001370 <MX_CRC_Init+0x24>)
 8001354:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8001356:	4805      	ldr	r0, [pc, #20]	@ (800136c <MX_CRC_Init+0x20>)
 8001358:	f004 fead 	bl	80060b6 <HAL_CRC_Init>
 800135c:	4603      	mov	r3, r0
 800135e:	2b00      	cmp	r3, #0
 8001360:	d001      	beq.n	8001366 <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 8001362:	f003 fab9 	bl	80048d8 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8001366:	bf00      	nop
 8001368:	bd80      	pop	{r7, pc}
 800136a:	bf00      	nop
 800136c:	2000d3b8 	.word	0x2000d3b8
 8001370:	40023000 	.word	0x40023000

08001374 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 8001374:	b480      	push	{r7}
 8001376:	b085      	sub	sp, #20
 8001378:	af00      	add	r7, sp, #0
 800137a:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	4a0b      	ldr	r2, [pc, #44]	@ (80013b0 <HAL_CRC_MspInit+0x3c>)
 8001382:	4293      	cmp	r3, r2
 8001384:	d10d      	bne.n	80013a2 <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8001386:	2300      	movs	r3, #0
 8001388:	60fb      	str	r3, [r7, #12]
 800138a:	4b0a      	ldr	r3, [pc, #40]	@ (80013b4 <HAL_CRC_MspInit+0x40>)
 800138c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800138e:	4a09      	ldr	r2, [pc, #36]	@ (80013b4 <HAL_CRC_MspInit+0x40>)
 8001390:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001394:	6313      	str	r3, [r2, #48]	@ 0x30
 8001396:	4b07      	ldr	r3, [pc, #28]	@ (80013b4 <HAL_CRC_MspInit+0x40>)
 8001398:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800139a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800139e:	60fb      	str	r3, [r7, #12]
 80013a0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 80013a2:	bf00      	nop
 80013a4:	3714      	adds	r7, #20
 80013a6:	46bd      	mov	sp, r7
 80013a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ac:	4770      	bx	lr
 80013ae:	bf00      	nop
 80013b0:	40023000 	.word	0x40023000
 80013b4:	40023800 	.word	0x40023800

080013b8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b082      	sub	sp, #8
 80013bc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80013be:	2300      	movs	r3, #0
 80013c0:	607b      	str	r3, [r7, #4]
 80013c2:	4b17      	ldr	r3, [pc, #92]	@ (8001420 <MX_DMA_Init+0x68>)
 80013c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013c6:	4a16      	ldr	r2, [pc, #88]	@ (8001420 <MX_DMA_Init+0x68>)
 80013c8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80013cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80013ce:	4b14      	ldr	r3, [pc, #80]	@ (8001420 <MX_DMA_Init+0x68>)
 80013d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013d2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80013d6:	607b      	str	r3, [r7, #4]
 80013d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 80013da:	2300      	movs	r3, #0
 80013dc:	603b      	str	r3, [r7, #0]
 80013de:	4b10      	ldr	r3, [pc, #64]	@ (8001420 <MX_DMA_Init+0x68>)
 80013e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013e2:	4a0f      	ldr	r2, [pc, #60]	@ (8001420 <MX_DMA_Init+0x68>)
 80013e4:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80013e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80013ea:	4b0d      	ldr	r3, [pc, #52]	@ (8001420 <MX_DMA_Init+0x68>)
 80013ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013ee:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80013f2:	603b      	str	r3, [r7, #0]
 80013f4:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 80013f6:	2200      	movs	r2, #0
 80013f8:	2100      	movs	r1, #0
 80013fa:	200e      	movs	r0, #14
 80013fc:	f004 fe25 	bl	800604a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8001400:	200e      	movs	r0, #14
 8001402:	f004 fe3e 	bl	8006082 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8001406:	2200      	movs	r2, #0
 8001408:	2100      	movs	r1, #0
 800140a:	2038      	movs	r0, #56	@ 0x38
 800140c:	f004 fe1d 	bl	800604a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001410:	2038      	movs	r0, #56	@ 0x38
 8001412:	f004 fe36 	bl	8006082 <HAL_NVIC_EnableIRQ>

}
 8001416:	bf00      	nop
 8001418:	3708      	adds	r7, #8
 800141a:	46bd      	mov	sp, r7
 800141c:	bd80      	pop	{r7, pc}
 800141e:	bf00      	nop
 8001420:	40023800 	.word	0x40023800

08001424 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	b08a      	sub	sp, #40	@ 0x28
 8001428:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800142a:	f107 0314 	add.w	r3, r7, #20
 800142e:	2200      	movs	r2, #0
 8001430:	601a      	str	r2, [r3, #0]
 8001432:	605a      	str	r2, [r3, #4]
 8001434:	609a      	str	r2, [r3, #8]
 8001436:	60da      	str	r2, [r3, #12]
 8001438:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800143a:	2300      	movs	r3, #0
 800143c:	613b      	str	r3, [r7, #16]
 800143e:	4b45      	ldr	r3, [pc, #276]	@ (8001554 <MX_GPIO_Init+0x130>)
 8001440:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001442:	4a44      	ldr	r2, [pc, #272]	@ (8001554 <MX_GPIO_Init+0x130>)
 8001444:	f043 0304 	orr.w	r3, r3, #4
 8001448:	6313      	str	r3, [r2, #48]	@ 0x30
 800144a:	4b42      	ldr	r3, [pc, #264]	@ (8001554 <MX_GPIO_Init+0x130>)
 800144c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800144e:	f003 0304 	and.w	r3, r3, #4
 8001452:	613b      	str	r3, [r7, #16]
 8001454:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001456:	2300      	movs	r3, #0
 8001458:	60fb      	str	r3, [r7, #12]
 800145a:	4b3e      	ldr	r3, [pc, #248]	@ (8001554 <MX_GPIO_Init+0x130>)
 800145c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800145e:	4a3d      	ldr	r2, [pc, #244]	@ (8001554 <MX_GPIO_Init+0x130>)
 8001460:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001464:	6313      	str	r3, [r2, #48]	@ 0x30
 8001466:	4b3b      	ldr	r3, [pc, #236]	@ (8001554 <MX_GPIO_Init+0x130>)
 8001468:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800146a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800146e:	60fb      	str	r3, [r7, #12]
 8001470:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001472:	2300      	movs	r3, #0
 8001474:	60bb      	str	r3, [r7, #8]
 8001476:	4b37      	ldr	r3, [pc, #220]	@ (8001554 <MX_GPIO_Init+0x130>)
 8001478:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800147a:	4a36      	ldr	r2, [pc, #216]	@ (8001554 <MX_GPIO_Init+0x130>)
 800147c:	f043 0301 	orr.w	r3, r3, #1
 8001480:	6313      	str	r3, [r2, #48]	@ 0x30
 8001482:	4b34      	ldr	r3, [pc, #208]	@ (8001554 <MX_GPIO_Init+0x130>)
 8001484:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001486:	f003 0301 	and.w	r3, r3, #1
 800148a:	60bb      	str	r3, [r7, #8]
 800148c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800148e:	2300      	movs	r3, #0
 8001490:	607b      	str	r3, [r7, #4]
 8001492:	4b30      	ldr	r3, [pc, #192]	@ (8001554 <MX_GPIO_Init+0x130>)
 8001494:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001496:	4a2f      	ldr	r2, [pc, #188]	@ (8001554 <MX_GPIO_Init+0x130>)
 8001498:	f043 0302 	orr.w	r3, r3, #2
 800149c:	6313      	str	r3, [r2, #48]	@ 0x30
 800149e:	4b2d      	ldr	r3, [pc, #180]	@ (8001554 <MX_GPIO_Init+0x130>)
 80014a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014a2:	f003 0302 	and.w	r3, r3, #2
 80014a6:	607b      	str	r3, [r7, #4]
 80014a8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, ILI9341_DC_Pin|ILI9341_RESET_Pin, GPIO_PIN_RESET);
 80014aa:	2200      	movs	r2, #0
 80014ac:	2103      	movs	r1, #3
 80014ae:	482a      	ldr	r0, [pc, #168]	@ (8001558 <MX_GPIO_Init+0x134>)
 80014b0:	f005 fbbc 	bl	8006c2c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80014b4:	2200      	movs	r2, #0
 80014b6:	2120      	movs	r1, #32
 80014b8:	4828      	ldr	r0, [pc, #160]	@ (800155c <MX_GPIO_Init+0x138>)
 80014ba:	f005 fbb7 	bl	8006c2c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ILI9341_CS_Pin|SDCARD_CS_Pin, GPIO_PIN_SET);
 80014be:	2201      	movs	r2, #1
 80014c0:	f244 0102 	movw	r1, #16386	@ 0x4002
 80014c4:	4826      	ldr	r0, [pc, #152]	@ (8001560 <MX_GPIO_Init+0x13c>)
 80014c6:	f005 fbb1 	bl	8006c2c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80014ca:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80014ce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80014d0:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80014d4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014d6:	2300      	movs	r3, #0
 80014d8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80014da:	f107 0314 	add.w	r3, r7, #20
 80014de:	4619      	mov	r1, r3
 80014e0:	481d      	ldr	r0, [pc, #116]	@ (8001558 <MX_GPIO_Init+0x134>)
 80014e2:	f005 fa07 	bl	80068f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : ILI9341_DC_Pin ILI9341_RESET_Pin */
  GPIO_InitStruct.Pin = ILI9341_DC_Pin|ILI9341_RESET_Pin;
 80014e6:	2303      	movs	r3, #3
 80014e8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014ea:	2301      	movs	r3, #1
 80014ec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ee:	2300      	movs	r3, #0
 80014f0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014f2:	2300      	movs	r3, #0
 80014f4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80014f6:	f107 0314 	add.w	r3, r7, #20
 80014fa:	4619      	mov	r1, r3
 80014fc:	4816      	ldr	r0, [pc, #88]	@ (8001558 <MX_GPIO_Init+0x134>)
 80014fe:	f005 f9f9 	bl	80068f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001502:	2320      	movs	r3, #32
 8001504:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001506:	2301      	movs	r3, #1
 8001508:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800150a:	2300      	movs	r3, #0
 800150c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800150e:	2300      	movs	r3, #0
 8001510:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001512:	f107 0314 	add.w	r3, r7, #20
 8001516:	4619      	mov	r1, r3
 8001518:	4810      	ldr	r0, [pc, #64]	@ (800155c <MX_GPIO_Init+0x138>)
 800151a:	f005 f9eb 	bl	80068f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : ILI9341_CS_Pin SDCARD_CS_Pin */
  GPIO_InitStruct.Pin = ILI9341_CS_Pin|SDCARD_CS_Pin;
 800151e:	f244 0302 	movw	r3, #16386	@ 0x4002
 8001522:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001524:	2301      	movs	r3, #1
 8001526:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001528:	2300      	movs	r3, #0
 800152a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800152c:	2300      	movs	r3, #0
 800152e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001530:	f107 0314 	add.w	r3, r7, #20
 8001534:	4619      	mov	r1, r3
 8001536:	480a      	ldr	r0, [pc, #40]	@ (8001560 <MX_GPIO_Init+0x13c>)
 8001538:	f005 f9dc 	bl	80068f4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800153c:	2200      	movs	r2, #0
 800153e:	2100      	movs	r1, #0
 8001540:	2028      	movs	r0, #40	@ 0x28
 8001542:	f004 fd82 	bl	800604a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001546:	2028      	movs	r0, #40	@ 0x28
 8001548:	f004 fd9b 	bl	8006082 <HAL_NVIC_EnableIRQ>

}
 800154c:	bf00      	nop
 800154e:	3728      	adds	r7, #40	@ 0x28
 8001550:	46bd      	mov	sp, r7
 8001552:	bd80      	pop	{r7, pc}
 8001554:	40023800 	.word	0x40023800
 8001558:	40020800 	.word	0x40020800
 800155c:	40020000 	.word	0x40020000
 8001560:	40020400 	.word	0x40020400

08001564 <MX_I2S2_Init>:
I2S_HandleTypeDef hi2s3;
DMA_HandleTypeDef hdma_spi2_rx;

/* I2S2 init function */
void MX_I2S2_Init(void)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 8001568:	4b13      	ldr	r3, [pc, #76]	@ (80015b8 <MX_I2S2_Init+0x54>)
 800156a:	4a14      	ldr	r2, [pc, #80]	@ (80015bc <MX_I2S2_Init+0x58>)
 800156c:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_RX;
 800156e:	4b12      	ldr	r3, [pc, #72]	@ (80015b8 <MX_I2S2_Init+0x54>)
 8001570:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8001574:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 8001576:	4b10      	ldr	r3, [pc, #64]	@ (80015b8 <MX_I2S2_Init+0x54>)
 8001578:	2200      	movs	r2, #0
 800157a:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_24B;
 800157c:	4b0e      	ldr	r3, [pc, #56]	@ (80015b8 <MX_I2S2_Init+0x54>)
 800157e:	2203      	movs	r2, #3
 8001580:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 8001582:	4b0d      	ldr	r3, [pc, #52]	@ (80015b8 <MX_I2S2_Init+0x54>)
 8001584:	2200      	movs	r2, #0
 8001586:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_16K;
 8001588:	4b0b      	ldr	r3, [pc, #44]	@ (80015b8 <MX_I2S2_Init+0x54>)
 800158a:	f44f 527a 	mov.w	r2, #16000	@ 0x3e80
 800158e:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 8001590:	4b09      	ldr	r3, [pc, #36]	@ (80015b8 <MX_I2S2_Init+0x54>)
 8001592:	2200      	movs	r2, #0
 8001594:	619a      	str	r2, [r3, #24]
  hi2s2.Init.ClockSource = I2S_CLOCK_PLL;
 8001596:	4b08      	ldr	r3, [pc, #32]	@ (80015b8 <MX_I2S2_Init+0x54>)
 8001598:	2200      	movs	r2, #0
 800159a:	61da      	str	r2, [r3, #28]
  hi2s2.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 800159c:	4b06      	ldr	r3, [pc, #24]	@ (80015b8 <MX_I2S2_Init+0x54>)
 800159e:	2200      	movs	r2, #0
 80015a0:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 80015a2:	4805      	ldr	r0, [pc, #20]	@ (80015b8 <MX_I2S2_Init+0x54>)
 80015a4:	f005 fb80 	bl	8006ca8 <HAL_I2S_Init>
 80015a8:	4603      	mov	r3, r0
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d001      	beq.n	80015b2 <MX_I2S2_Init+0x4e>
  {
    Error_Handler();
 80015ae:	f003 f993 	bl	80048d8 <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 80015b2:	bf00      	nop
 80015b4:	bd80      	pop	{r7, pc}
 80015b6:	bf00      	nop
 80015b8:	2000d3c0 	.word	0x2000d3c0
 80015bc:	40003800 	.word	0x40003800

080015c0 <MX_I2S3_Init>:
/* I2S3 init function */
void MX_I2S3_Init(void)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 80015c4:	4b13      	ldr	r3, [pc, #76]	@ (8001614 <MX_I2S3_Init+0x54>)
 80015c6:	4a14      	ldr	r2, [pc, #80]	@ (8001618 <MX_I2S3_Init+0x58>)
 80015c8:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 80015ca:	4b12      	ldr	r3, [pc, #72]	@ (8001614 <MX_I2S3_Init+0x54>)
 80015cc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80015d0:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 80015d2:	4b10      	ldr	r3, [pc, #64]	@ (8001614 <MX_I2S3_Init+0x54>)
 80015d4:	2200      	movs	r2, #0
 80015d6:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 80015d8:	4b0e      	ldr	r3, [pc, #56]	@ (8001614 <MX_I2S3_Init+0x54>)
 80015da:	2200      	movs	r2, #0
 80015dc:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 80015de:	4b0d      	ldr	r3, [pc, #52]	@ (8001614 <MX_I2S3_Init+0x54>)
 80015e0:	2200      	movs	r2, #0
 80015e2:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_16K;
 80015e4:	4b0b      	ldr	r3, [pc, #44]	@ (8001614 <MX_I2S3_Init+0x54>)
 80015e6:	f44f 527a 	mov.w	r2, #16000	@ 0x3e80
 80015ea:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 80015ec:	4b09      	ldr	r3, [pc, #36]	@ (8001614 <MX_I2S3_Init+0x54>)
 80015ee:	2200      	movs	r2, #0
 80015f0:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 80015f2:	4b08      	ldr	r3, [pc, #32]	@ (8001614 <MX_I2S3_Init+0x54>)
 80015f4:	2200      	movs	r2, #0
 80015f6:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 80015f8:	4b06      	ldr	r3, [pc, #24]	@ (8001614 <MX_I2S3_Init+0x54>)
 80015fa:	2200      	movs	r2, #0
 80015fc:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 80015fe:	4805      	ldr	r0, [pc, #20]	@ (8001614 <MX_I2S3_Init+0x54>)
 8001600:	f005 fb52 	bl	8006ca8 <HAL_I2S_Init>
 8001604:	4603      	mov	r3, r0
 8001606:	2b00      	cmp	r3, #0
 8001608:	d001      	beq.n	800160e <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 800160a:	f003 f965 	bl	80048d8 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 800160e:	bf00      	nop
 8001610:	bd80      	pop	{r7, pc}
 8001612:	bf00      	nop
 8001614:	2000d408 	.word	0x2000d408
 8001618:	40003c00 	.word	0x40003c00

0800161c <HAL_I2S_MspInit>:

void HAL_I2S_MspInit(I2S_HandleTypeDef* i2sHandle)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	b08e      	sub	sp, #56	@ 0x38
 8001620:	af00      	add	r7, sp, #0
 8001622:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001624:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001628:	2200      	movs	r2, #0
 800162a:	601a      	str	r2, [r3, #0]
 800162c:	605a      	str	r2, [r3, #4]
 800162e:	609a      	str	r2, [r3, #8]
 8001630:	60da      	str	r2, [r3, #12]
 8001632:	611a      	str	r2, [r3, #16]
  if(i2sHandle->Instance==SPI2)
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	4a69      	ldr	r2, [pc, #420]	@ (80017e0 <HAL_I2S_MspInit+0x1c4>)
 800163a:	4293      	cmp	r3, r2
 800163c:	d17b      	bne.n	8001736 <HAL_I2S_MspInit+0x11a>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* I2S2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800163e:	2300      	movs	r3, #0
 8001640:	623b      	str	r3, [r7, #32]
 8001642:	4b68      	ldr	r3, [pc, #416]	@ (80017e4 <HAL_I2S_MspInit+0x1c8>)
 8001644:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001646:	4a67      	ldr	r2, [pc, #412]	@ (80017e4 <HAL_I2S_MspInit+0x1c8>)
 8001648:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800164c:	6413      	str	r3, [r2, #64]	@ 0x40
 800164e:	4b65      	ldr	r3, [pc, #404]	@ (80017e4 <HAL_I2S_MspInit+0x1c8>)
 8001650:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001652:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001656:	623b      	str	r3, [r7, #32]
 8001658:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800165a:	2300      	movs	r3, #0
 800165c:	61fb      	str	r3, [r7, #28]
 800165e:	4b61      	ldr	r3, [pc, #388]	@ (80017e4 <HAL_I2S_MspInit+0x1c8>)
 8001660:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001662:	4a60      	ldr	r2, [pc, #384]	@ (80017e4 <HAL_I2S_MspInit+0x1c8>)
 8001664:	f043 0304 	orr.w	r3, r3, #4
 8001668:	6313      	str	r3, [r2, #48]	@ 0x30
 800166a:	4b5e      	ldr	r3, [pc, #376]	@ (80017e4 <HAL_I2S_MspInit+0x1c8>)
 800166c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800166e:	f003 0304 	and.w	r3, r3, #4
 8001672:	61fb      	str	r3, [r7, #28]
 8001674:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001676:	2300      	movs	r3, #0
 8001678:	61bb      	str	r3, [r7, #24]
 800167a:	4b5a      	ldr	r3, [pc, #360]	@ (80017e4 <HAL_I2S_MspInit+0x1c8>)
 800167c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800167e:	4a59      	ldr	r2, [pc, #356]	@ (80017e4 <HAL_I2S_MspInit+0x1c8>)
 8001680:	f043 0302 	orr.w	r3, r3, #2
 8001684:	6313      	str	r3, [r2, #48]	@ 0x30
 8001686:	4b57      	ldr	r3, [pc, #348]	@ (80017e4 <HAL_I2S_MspInit+0x1c8>)
 8001688:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800168a:	f003 0302 	and.w	r3, r3, #2
 800168e:	61bb      	str	r3, [r7, #24]
 8001690:	69bb      	ldr	r3, [r7, #24]
    /**I2S2 GPIO Configuration
    PC3     ------> I2S2_SD
    PB10     ------> I2S2_CK
    PB12     ------> I2S2_WS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001692:	2308      	movs	r3, #8
 8001694:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001696:	2302      	movs	r3, #2
 8001698:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800169a:	2300      	movs	r3, #0
 800169c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800169e:	2300      	movs	r3, #0
 80016a0:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80016a2:	2305      	movs	r3, #5
 80016a4:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80016a6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80016aa:	4619      	mov	r1, r3
 80016ac:	484e      	ldr	r0, [pc, #312]	@ (80017e8 <HAL_I2S_MspInit+0x1cc>)
 80016ae:	f005 f921 	bl	80068f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12;
 80016b2:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80016b6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016b8:	2302      	movs	r3, #2
 80016ba:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016bc:	2300      	movs	r3, #0
 80016be:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016c0:	2300      	movs	r3, #0
 80016c2:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80016c4:	2305      	movs	r3, #5
 80016c6:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016c8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80016cc:	4619      	mov	r1, r3
 80016ce:	4847      	ldr	r0, [pc, #284]	@ (80017ec <HAL_I2S_MspInit+0x1d0>)
 80016d0:	f005 f910 	bl	80068f4 <HAL_GPIO_Init>

    /* I2S2 DMA Init */
    /* SPI2_RX Init */
    hdma_spi2_rx.Instance = DMA1_Stream3;
 80016d4:	4b46      	ldr	r3, [pc, #280]	@ (80017f0 <HAL_I2S_MspInit+0x1d4>)
 80016d6:	4a47      	ldr	r2, [pc, #284]	@ (80017f4 <HAL_I2S_MspInit+0x1d8>)
 80016d8:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Channel = DMA_CHANNEL_0;
 80016da:	4b45      	ldr	r3, [pc, #276]	@ (80017f0 <HAL_I2S_MspInit+0x1d4>)
 80016dc:	2200      	movs	r2, #0
 80016de:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80016e0:	4b43      	ldr	r3, [pc, #268]	@ (80017f0 <HAL_I2S_MspInit+0x1d4>)
 80016e2:	2200      	movs	r2, #0
 80016e4:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80016e6:	4b42      	ldr	r3, [pc, #264]	@ (80017f0 <HAL_I2S_MspInit+0x1d4>)
 80016e8:	2200      	movs	r2, #0
 80016ea:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80016ec:	4b40      	ldr	r3, [pc, #256]	@ (80017f0 <HAL_I2S_MspInit+0x1d4>)
 80016ee:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80016f2:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80016f4:	4b3e      	ldr	r3, [pc, #248]	@ (80017f0 <HAL_I2S_MspInit+0x1d4>)
 80016f6:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80016fa:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80016fc:	4b3c      	ldr	r3, [pc, #240]	@ (80017f0 <HAL_I2S_MspInit+0x1d4>)
 80016fe:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001702:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_CIRCULAR;
 8001704:	4b3a      	ldr	r3, [pc, #232]	@ (80017f0 <HAL_I2S_MspInit+0x1d4>)
 8001706:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800170a:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_LOW;
 800170c:	4b38      	ldr	r3, [pc, #224]	@ (80017f0 <HAL_I2S_MspInit+0x1d4>)
 800170e:	2200      	movs	r2, #0
 8001710:	621a      	str	r2, [r3, #32]
    hdma_spi2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001712:	4b37      	ldr	r3, [pc, #220]	@ (80017f0 <HAL_I2S_MspInit+0x1d4>)
 8001714:	2200      	movs	r2, #0
 8001716:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 8001718:	4835      	ldr	r0, [pc, #212]	@ (80017f0 <HAL_I2S_MspInit+0x1d4>)
 800171a:	f004 fce9 	bl	80060f0 <HAL_DMA_Init>
 800171e:	4603      	mov	r3, r0
 8001720:	2b00      	cmp	r3, #0
 8001722:	d001      	beq.n	8001728 <HAL_I2S_MspInit+0x10c>
    {
      Error_Handler();
 8001724:	f003 f8d8 	bl	80048d8 <Error_Handler>
    }

    __HAL_LINKDMA(i2sHandle,hdmarx,hdma_spi2_rx);
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	4a31      	ldr	r2, [pc, #196]	@ (80017f0 <HAL_I2S_MspInit+0x1d4>)
 800172c:	63da      	str	r2, [r3, #60]	@ 0x3c
 800172e:	4a30      	ldr	r2, [pc, #192]	@ (80017f0 <HAL_I2S_MspInit+0x1d4>)
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8001734:	e04f      	b.n	80017d6 <HAL_I2S_MspInit+0x1ba>
  else if(i2sHandle->Instance==SPI3)
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	4a2f      	ldr	r2, [pc, #188]	@ (80017f8 <HAL_I2S_MspInit+0x1dc>)
 800173c:	4293      	cmp	r3, r2
 800173e:	d14a      	bne.n	80017d6 <HAL_I2S_MspInit+0x1ba>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001740:	2300      	movs	r3, #0
 8001742:	617b      	str	r3, [r7, #20]
 8001744:	4b27      	ldr	r3, [pc, #156]	@ (80017e4 <HAL_I2S_MspInit+0x1c8>)
 8001746:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001748:	4a26      	ldr	r2, [pc, #152]	@ (80017e4 <HAL_I2S_MspInit+0x1c8>)
 800174a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800174e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001750:	4b24      	ldr	r3, [pc, #144]	@ (80017e4 <HAL_I2S_MspInit+0x1c8>)
 8001752:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001754:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001758:	617b      	str	r3, [r7, #20]
 800175a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800175c:	2300      	movs	r3, #0
 800175e:	613b      	str	r3, [r7, #16]
 8001760:	4b20      	ldr	r3, [pc, #128]	@ (80017e4 <HAL_I2S_MspInit+0x1c8>)
 8001762:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001764:	4a1f      	ldr	r2, [pc, #124]	@ (80017e4 <HAL_I2S_MspInit+0x1c8>)
 8001766:	f043 0301 	orr.w	r3, r3, #1
 800176a:	6313      	str	r3, [r2, #48]	@ 0x30
 800176c:	4b1d      	ldr	r3, [pc, #116]	@ (80017e4 <HAL_I2S_MspInit+0x1c8>)
 800176e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001770:	f003 0301 	and.w	r3, r3, #1
 8001774:	613b      	str	r3, [r7, #16]
 8001776:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001778:	2300      	movs	r3, #0
 800177a:	60fb      	str	r3, [r7, #12]
 800177c:	4b19      	ldr	r3, [pc, #100]	@ (80017e4 <HAL_I2S_MspInit+0x1c8>)
 800177e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001780:	4a18      	ldr	r2, [pc, #96]	@ (80017e4 <HAL_I2S_MspInit+0x1c8>)
 8001782:	f043 0304 	orr.w	r3, r3, #4
 8001786:	6313      	str	r3, [r2, #48]	@ 0x30
 8001788:	4b16      	ldr	r3, [pc, #88]	@ (80017e4 <HAL_I2S_MspInit+0x1c8>)
 800178a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800178c:	f003 0304 	and.w	r3, r3, #4
 8001790:	60fb      	str	r3, [r7, #12]
 8001792:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001794:	2310      	movs	r3, #16
 8001796:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001798:	2302      	movs	r3, #2
 800179a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800179c:	2300      	movs	r3, #0
 800179e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017a0:	2300      	movs	r3, #0
 80017a2:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80017a4:	2306      	movs	r3, #6
 80017a6:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017a8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80017ac:	4619      	mov	r1, r3
 80017ae:	4813      	ldr	r0, [pc, #76]	@ (80017fc <HAL_I2S_MspInit+0x1e0>)
 80017b0:	f005 f8a0 	bl	80068f4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12;
 80017b4:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80017b8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017ba:	2302      	movs	r3, #2
 80017bc:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017be:	2300      	movs	r3, #0
 80017c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017c2:	2300      	movs	r3, #0
 80017c4:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80017c6:	2306      	movs	r3, #6
 80017c8:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80017ca:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80017ce:	4619      	mov	r1, r3
 80017d0:	4805      	ldr	r0, [pc, #20]	@ (80017e8 <HAL_I2S_MspInit+0x1cc>)
 80017d2:	f005 f88f 	bl	80068f4 <HAL_GPIO_Init>
}
 80017d6:	bf00      	nop
 80017d8:	3738      	adds	r7, #56	@ 0x38
 80017da:	46bd      	mov	sp, r7
 80017dc:	bd80      	pop	{r7, pc}
 80017de:	bf00      	nop
 80017e0:	40003800 	.word	0x40003800
 80017e4:	40023800 	.word	0x40023800
 80017e8:	40020800 	.word	0x40020800
 80017ec:	40020400 	.word	0x40020400
 80017f0:	2000d450 	.word	0x2000d450
 80017f4:	40026058 	.word	0x40026058
 80017f8:	40003c00 	.word	0x40003c00
 80017fc:	40020000 	.word	0x40020000

08001800 <ILI9341_WriteCommand>:
#include "stm32f4xx_hal.h"
#include "ili9341.h"

// Send command to display. Use ILI9341_SELECT() before
static inline void ILI9341_WriteCommand(ILI9341TypeDef *display, uint8_t command)
{
 8001800:	b580      	push	{r7, lr}
 8001802:	b082      	sub	sp, #8
 8001804:	af00      	add	r7, sp, #0
 8001806:	6078      	str	r0, [r7, #4]
 8001808:	460b      	mov	r3, r1
 800180a:	70fb      	strb	r3, [r7, #3]
	ILI9341_COMMAND(display);
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	8a5b      	ldrh	r3, [r3, #18]
 8001810:	461a      	mov	r2, r3
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	689b      	ldr	r3, [r3, #8]
 8001816:	0412      	lsls	r2, r2, #16
 8001818:	619a      	str	r2, [r3, #24]
	HAL_SPI_Transmit(display->spi, &command, 1, 1);
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	6818      	ldr	r0, [r3, #0]
 800181e:	1cf9      	adds	r1, r7, #3
 8001820:	2301      	movs	r3, #1
 8001822:	2201      	movs	r2, #1
 8001824:	f006 fe6f 	bl	8008506 <HAL_SPI_Transmit>
}
 8001828:	bf00      	nop
 800182a:	3708      	adds	r7, #8
 800182c:	46bd      	mov	sp, r7
 800182e:	bd80      	pop	{r7, pc}

08001830 <ILI9341_WriteByte>:

// Send byte to display. Use ILI9341_SELECT() before
static inline void ILI9341_WriteByte(ILI9341TypeDef *display, uint8_t data)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	b082      	sub	sp, #8
 8001834:	af00      	add	r7, sp, #0
 8001836:	6078      	str	r0, [r7, #4]
 8001838:	460b      	mov	r3, r1
 800183a:	70fb      	strb	r3, [r7, #3]
	ILI9341_DATA(display);
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	8a5a      	ldrh	r2, [r3, #18]
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	689b      	ldr	r3, [r3, #8]
 8001844:	619a      	str	r2, [r3, #24]
	HAL_SPI_Transmit(display->spi, &data, 1, 1);
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	6818      	ldr	r0, [r3, #0]
 800184a:	1cf9      	adds	r1, r7, #3
 800184c:	2301      	movs	r3, #1
 800184e:	2201      	movs	r2, #1
 8001850:	f006 fe59 	bl	8008506 <HAL_SPI_Transmit>
}
 8001854:	bf00      	nop
 8001856:	3708      	adds	r7, #8
 8001858:	46bd      	mov	sp, r7
 800185a:	bd80      	pop	{r7, pc}

0800185c <ILI9341_WriteBuffer>:

// Send buffer to display. Use ILI9341_SELECT() before
static inline void ILI9341_WriteBuffer(ILI9341TypeDef *display, uint8_t* buff, size_t buff_size)
{
 800185c:	b580      	push	{r7, lr}
 800185e:	b086      	sub	sp, #24
 8001860:	af00      	add	r7, sp, #0
 8001862:	60f8      	str	r0, [r7, #12]
 8001864:	60b9      	str	r1, [r7, #8]
 8001866:	607a      	str	r2, [r7, #4]
	ILI9341_DATA(display);
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	8a5a      	ldrh	r2, [r3, #18]
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	689b      	ldr	r3, [r3, #8]
 8001870:	619a      	str	r2, [r3, #24]

    // split data in small chunks because HAL can't send more then 64K at once
    while (buff_size > 0) {
 8001872:	e015      	b.n	80018a0 <ILI9341_WriteBuffer+0x44>
        uint16_t chunk_size = buff_size > 32768 ? 32768 : buff_size;
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800187a:	bf28      	it	cs
 800187c:	f44f 4300 	movcs.w	r3, #32768	@ 0x8000
 8001880:	82fb      	strh	r3, [r7, #22]
        HAL_SPI_Transmit(display->spi, buff, chunk_size, 10);
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	6818      	ldr	r0, [r3, #0]
 8001886:	8afa      	ldrh	r2, [r7, #22]
 8001888:	230a      	movs	r3, #10
 800188a:	68b9      	ldr	r1, [r7, #8]
 800188c:	f006 fe3b 	bl	8008506 <HAL_SPI_Transmit>
        buff += chunk_size;
 8001890:	8afb      	ldrh	r3, [r7, #22]
 8001892:	68ba      	ldr	r2, [r7, #8]
 8001894:	4413      	add	r3, r2
 8001896:	60bb      	str	r3, [r7, #8]
        buff_size -= chunk_size;
 8001898:	8afb      	ldrh	r3, [r7, #22]
 800189a:	687a      	ldr	r2, [r7, #4]
 800189c:	1ad3      	subs	r3, r2, r3
 800189e:	607b      	str	r3, [r7, #4]
    while (buff_size > 0) {
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d1e6      	bne.n	8001874 <ILI9341_WriteBuffer+0x18>
    }
}
 80018a6:	bf00      	nop
 80018a8:	bf00      	nop
 80018aa:	3718      	adds	r7, #24
 80018ac:	46bd      	mov	sp, r7
 80018ae:	bd80      	pop	{r7, pc}

080018b0 <ILI9341_SetAddressWindow>:

static inline void ILI9341_SetAddressWindow(ILI9341TypeDef *display, uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2)
{
 80018b0:	b580      	push	{r7, lr}
 80018b2:	b086      	sub	sp, #24
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	60f8      	str	r0, [r7, #12]
 80018b8:	4608      	mov	r0, r1
 80018ba:	4611      	mov	r1, r2
 80018bc:	461a      	mov	r2, r3
 80018be:	4603      	mov	r3, r0
 80018c0:	817b      	strh	r3, [r7, #10]
 80018c2:	460b      	mov	r3, r1
 80018c4:	813b      	strh	r3, [r7, #8]
 80018c6:	4613      	mov	r3, r2
 80018c8:	80fb      	strh	r3, [r7, #6]
    // Column address set
	ILI9341_WriteCommand(display, 0x2A); // CASET
 80018ca:	212a      	movs	r1, #42	@ 0x2a
 80018cc:	68f8      	ldr	r0, [r7, #12]
 80018ce:	f7ff ff97 	bl	8001800 <ILI9341_WriteCommand>

	uint8_t data[4];
	data[0] = x1 >> 8;
 80018d2:	897b      	ldrh	r3, [r7, #10]
 80018d4:	0a1b      	lsrs	r3, r3, #8
 80018d6:	b29b      	uxth	r3, r3
 80018d8:	b2db      	uxtb	r3, r3
 80018da:	753b      	strb	r3, [r7, #20]
	data[1] = x1;
 80018dc:	897b      	ldrh	r3, [r7, #10]
 80018de:	b2db      	uxtb	r3, r3
 80018e0:	757b      	strb	r3, [r7, #21]
	data[2] = x2 >> 8;
 80018e2:	88fb      	ldrh	r3, [r7, #6]
 80018e4:	0a1b      	lsrs	r3, r3, #8
 80018e6:	b29b      	uxth	r3, r3
 80018e8:	b2db      	uxtb	r3, r3
 80018ea:	75bb      	strb	r3, [r7, #22]
	data[3] = x2;
 80018ec:	88fb      	ldrh	r3, [r7, #6]
 80018ee:	b2db      	uxtb	r3, r3
 80018f0:	75fb      	strb	r3, [r7, #23]

	ILI9341_DATA(display);
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	8a5a      	ldrh	r2, [r3, #18]
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	689b      	ldr	r3, [r3, #8]
 80018fa:	619a      	str	r2, [r3, #24]
	HAL_SPI_Transmit(display->spi, data, 4, 1);
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	6818      	ldr	r0, [r3, #0]
 8001900:	f107 0114 	add.w	r1, r7, #20
 8001904:	2301      	movs	r3, #1
 8001906:	2204      	movs	r2, #4
 8001908:	f006 fdfd 	bl	8008506 <HAL_SPI_Transmit>

    // Row address set
	ILI9341_WriteCommand(display, 0x2B); // RASET
 800190c:	212b      	movs	r1, #43	@ 0x2b
 800190e:	68f8      	ldr	r0, [r7, #12]
 8001910:	f7ff ff76 	bl	8001800 <ILI9341_WriteCommand>

	data[0] = y1 >> 8;
 8001914:	893b      	ldrh	r3, [r7, #8]
 8001916:	0a1b      	lsrs	r3, r3, #8
 8001918:	b29b      	uxth	r3, r3
 800191a:	b2db      	uxtb	r3, r3
 800191c:	753b      	strb	r3, [r7, #20]
	data[1] = y1;
 800191e:	893b      	ldrh	r3, [r7, #8]
 8001920:	b2db      	uxtb	r3, r3
 8001922:	757b      	strb	r3, [r7, #21]
	data[2] = y2 >> 8;
 8001924:	8c3b      	ldrh	r3, [r7, #32]
 8001926:	0a1b      	lsrs	r3, r3, #8
 8001928:	b29b      	uxth	r3, r3
 800192a:	b2db      	uxtb	r3, r3
 800192c:	75bb      	strb	r3, [r7, #22]
	data[3] = y2;
 800192e:	8c3b      	ldrh	r3, [r7, #32]
 8001930:	b2db      	uxtb	r3, r3
 8001932:	75fb      	strb	r3, [r7, #23]

	ILI9341_DATA(display);
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	8a5a      	ldrh	r2, [r3, #18]
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	689b      	ldr	r3, [r3, #8]
 800193c:	619a      	str	r2, [r3, #24]
	HAL_SPI_Transmit(display->spi, data, 4, 1);
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	6818      	ldr	r0, [r3, #0]
 8001942:	f107 0114 	add.w	r1, r7, #20
 8001946:	2301      	movs	r3, #1
 8001948:	2204      	movs	r2, #4
 800194a:	f006 fddc 	bl	8008506 <HAL_SPI_Transmit>

    // Write to RAM
	ILI9341_WriteCommand(display, 0x2C); // RAMWR
 800194e:	212c      	movs	r1, #44	@ 0x2c
 8001950:	68f8      	ldr	r0, [r7, #12]
 8001952:	f7ff ff55 	bl	8001800 <ILI9341_WriteCommand>
}
 8001956:	bf00      	nop
 8001958:	3718      	adds	r7, #24
 800195a:	46bd      	mov	sp, r7
 800195c:	bd80      	pop	{r7, pc}

0800195e <ILI9341_Reset>:

static inline void ILI9341_Reset(ILI9341TypeDef *display)
{
 800195e:	b580      	push	{r7, lr}
 8001960:	b082      	sub	sp, #8
 8001962:	af00      	add	r7, sp, #0
 8001964:	6078      	str	r0, [r7, #4]
    display->reset_gpio_port->BSRR = (uint32_t)(display->reset_pin) << 16U;
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	8a9b      	ldrh	r3, [r3, #20]
 800196a:	461a      	mov	r2, r3
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	68db      	ldr	r3, [r3, #12]
 8001970:	0412      	lsls	r2, r2, #16
 8001972:	619a      	str	r2, [r3, #24]
    HAL_Delay(5);
 8001974:	2005      	movs	r0, #5
 8001976:	f003 fe13 	bl	80055a0 <HAL_Delay>
    display->reset_gpio_port->BSRR = display->reset_pin;
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	8a9a      	ldrh	r2, [r3, #20]
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	68db      	ldr	r3, [r3, #12]
 8001982:	619a      	str	r2, [r3, #24]
}
 8001984:	bf00      	nop
 8001986:	3708      	adds	r7, #8
 8001988:	46bd      	mov	sp, r7
 800198a:	bd80      	pop	{r7, pc}

0800198c <ILI9341_Init>:

void ILI9341_Init(ILI9341TypeDef *display)
{
 800198c:	b580      	push	{r7, lr}
 800198e:	b082      	sub	sp, #8
 8001990:	af00      	add	r7, sp, #0
 8001992:	6078      	str	r0, [r7, #4]
	ILI9341_SELECT(display);
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	8a1b      	ldrh	r3, [r3, #16]
 8001998:	461a      	mov	r2, r3
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	685b      	ldr	r3, [r3, #4]
 800199e:	0412      	lsls	r2, r2, #16
 80019a0:	619a      	str	r2, [r3, #24]
	ILI9341_Reset(display);
 80019a2:	6878      	ldr	r0, [r7, #4]
 80019a4:	f7ff ffdb 	bl	800195e <ILI9341_Reset>

	// SOFTWARE RESET
	ILI9341_WriteCommand(display, 0x01);
 80019a8:	2101      	movs	r1, #1
 80019aa:	6878      	ldr	r0, [r7, #4]
 80019ac:	f7ff ff28 	bl	8001800 <ILI9341_WriteCommand>
	HAL_Delay(1000);
 80019b0:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80019b4:	f003 fdf4 	bl	80055a0 <HAL_Delay>

	// POWER CONTROL A
	ILI9341_WriteCommand(display, 0xCB);
 80019b8:	21cb      	movs	r1, #203	@ 0xcb
 80019ba:	6878      	ldr	r0, [r7, #4]
 80019bc:	f7ff ff20 	bl	8001800 <ILI9341_WriteCommand>
	ILI9341_WriteByte(display, 0x39);
 80019c0:	2139      	movs	r1, #57	@ 0x39
 80019c2:	6878      	ldr	r0, [r7, #4]
 80019c4:	f7ff ff34 	bl	8001830 <ILI9341_WriteByte>
	ILI9341_WriteByte(display, 0x2C);
 80019c8:	212c      	movs	r1, #44	@ 0x2c
 80019ca:	6878      	ldr	r0, [r7, #4]
 80019cc:	f7ff ff30 	bl	8001830 <ILI9341_WriteByte>
	ILI9341_WriteByte(display, 0x00);
 80019d0:	2100      	movs	r1, #0
 80019d2:	6878      	ldr	r0, [r7, #4]
 80019d4:	f7ff ff2c 	bl	8001830 <ILI9341_WriteByte>
	ILI9341_WriteByte(display, 0x34);
 80019d8:	2134      	movs	r1, #52	@ 0x34
 80019da:	6878      	ldr	r0, [r7, #4]
 80019dc:	f7ff ff28 	bl	8001830 <ILI9341_WriteByte>
	ILI9341_WriteByte(display, 0x02);
 80019e0:	2102      	movs	r1, #2
 80019e2:	6878      	ldr	r0, [r7, #4]
 80019e4:	f7ff ff24 	bl	8001830 <ILI9341_WriteByte>

	// POWER CONTROL B
	ILI9341_WriteCommand(display, 0xCF);
 80019e8:	21cf      	movs	r1, #207	@ 0xcf
 80019ea:	6878      	ldr	r0, [r7, #4]
 80019ec:	f7ff ff08 	bl	8001800 <ILI9341_WriteCommand>
	ILI9341_WriteByte(display, 0x00);
 80019f0:	2100      	movs	r1, #0
 80019f2:	6878      	ldr	r0, [r7, #4]
 80019f4:	f7ff ff1c 	bl	8001830 <ILI9341_WriteByte>
	ILI9341_WriteByte(display, 0xC1);
 80019f8:	21c1      	movs	r1, #193	@ 0xc1
 80019fa:	6878      	ldr	r0, [r7, #4]
 80019fc:	f7ff ff18 	bl	8001830 <ILI9341_WriteByte>
	ILI9341_WriteByte(display, 0x30);
 8001a00:	2130      	movs	r1, #48	@ 0x30
 8001a02:	6878      	ldr	r0, [r7, #4]
 8001a04:	f7ff ff14 	bl	8001830 <ILI9341_WriteByte>

	// DRIVER TIMING CONTROL A
	ILI9341_WriteCommand(display, 0xE8);
 8001a08:	21e8      	movs	r1, #232	@ 0xe8
 8001a0a:	6878      	ldr	r0, [r7, #4]
 8001a0c:	f7ff fef8 	bl	8001800 <ILI9341_WriteCommand>
	ILI9341_WriteByte(display, 0x85);
 8001a10:	2185      	movs	r1, #133	@ 0x85
 8001a12:	6878      	ldr	r0, [r7, #4]
 8001a14:	f7ff ff0c 	bl	8001830 <ILI9341_WriteByte>
	ILI9341_WriteByte(display, 0x00);
 8001a18:	2100      	movs	r1, #0
 8001a1a:	6878      	ldr	r0, [r7, #4]
 8001a1c:	f7ff ff08 	bl	8001830 <ILI9341_WriteByte>
	ILI9341_WriteByte(display, 0x78);
 8001a20:	2178      	movs	r1, #120	@ 0x78
 8001a22:	6878      	ldr	r0, [r7, #4]
 8001a24:	f7ff ff04 	bl	8001830 <ILI9341_WriteByte>

	// DRIVER TIMING CONTROL B
	ILI9341_WriteCommand(display, 0xEA);
 8001a28:	21ea      	movs	r1, #234	@ 0xea
 8001a2a:	6878      	ldr	r0, [r7, #4]
 8001a2c:	f7ff fee8 	bl	8001800 <ILI9341_WriteCommand>
	ILI9341_WriteByte(display, 0x00);
 8001a30:	2100      	movs	r1, #0
 8001a32:	6878      	ldr	r0, [r7, #4]
 8001a34:	f7ff fefc 	bl	8001830 <ILI9341_WriteByte>
	ILI9341_WriteByte(display, 0x00);
 8001a38:	2100      	movs	r1, #0
 8001a3a:	6878      	ldr	r0, [r7, #4]
 8001a3c:	f7ff fef8 	bl	8001830 <ILI9341_WriteByte>

	// POWER ON SEQUENCE CONTROL
	ILI9341_WriteCommand(display, 0xED);
 8001a40:	21ed      	movs	r1, #237	@ 0xed
 8001a42:	6878      	ldr	r0, [r7, #4]
 8001a44:	f7ff fedc 	bl	8001800 <ILI9341_WriteCommand>
	ILI9341_WriteByte(display, 0x64);
 8001a48:	2164      	movs	r1, #100	@ 0x64
 8001a4a:	6878      	ldr	r0, [r7, #4]
 8001a4c:	f7ff fef0 	bl	8001830 <ILI9341_WriteByte>
	ILI9341_WriteByte(display, 0x03);
 8001a50:	2103      	movs	r1, #3
 8001a52:	6878      	ldr	r0, [r7, #4]
 8001a54:	f7ff feec 	bl	8001830 <ILI9341_WriteByte>
	ILI9341_WriteByte(display, 0x12);
 8001a58:	2112      	movs	r1, #18
 8001a5a:	6878      	ldr	r0, [r7, #4]
 8001a5c:	f7ff fee8 	bl	8001830 <ILI9341_WriteByte>
	ILI9341_WriteByte(display, 0x81);
 8001a60:	2181      	movs	r1, #129	@ 0x81
 8001a62:	6878      	ldr	r0, [r7, #4]
 8001a64:	f7ff fee4 	bl	8001830 <ILI9341_WriteByte>

	// PUMP RATIO CONTROL
	ILI9341_WriteCommand(display, 0xF7);
 8001a68:	21f7      	movs	r1, #247	@ 0xf7
 8001a6a:	6878      	ldr	r0, [r7, #4]
 8001a6c:	f7ff fec8 	bl	8001800 <ILI9341_WriteCommand>
	ILI9341_WriteByte(display, 0x20);
 8001a70:	2120      	movs	r1, #32
 8001a72:	6878      	ldr	r0, [r7, #4]
 8001a74:	f7ff fedc 	bl	8001830 <ILI9341_WriteByte>

	// POWER CONTROL,VRH[5:0]
	ILI9341_WriteCommand(display, 0xC0);
 8001a78:	21c0      	movs	r1, #192	@ 0xc0
 8001a7a:	6878      	ldr	r0, [r7, #4]
 8001a7c:	f7ff fec0 	bl	8001800 <ILI9341_WriteCommand>
	ILI9341_WriteByte(display, 0x23);
 8001a80:	2123      	movs	r1, #35	@ 0x23
 8001a82:	6878      	ldr	r0, [r7, #4]
 8001a84:	f7ff fed4 	bl	8001830 <ILI9341_WriteByte>

	// POWER CONTROL,SAP[2:0];BT[3:0]
	ILI9341_WriteCommand(display, 0xC1);
 8001a88:	21c1      	movs	r1, #193	@ 0xc1
 8001a8a:	6878      	ldr	r0, [r7, #4]
 8001a8c:	f7ff feb8 	bl	8001800 <ILI9341_WriteCommand>
	ILI9341_WriteByte(display, 0x10);
 8001a90:	2110      	movs	r1, #16
 8001a92:	6878      	ldr	r0, [r7, #4]
 8001a94:	f7ff fecc 	bl	8001830 <ILI9341_WriteByte>

	// VCM CONTROL
	ILI9341_WriteCommand(display, 0xC5);
 8001a98:	21c5      	movs	r1, #197	@ 0xc5
 8001a9a:	6878      	ldr	r0, [r7, #4]
 8001a9c:	f7ff feb0 	bl	8001800 <ILI9341_WriteCommand>
	ILI9341_WriteByte(display, 0x3E);
 8001aa0:	213e      	movs	r1, #62	@ 0x3e
 8001aa2:	6878      	ldr	r0, [r7, #4]
 8001aa4:	f7ff fec4 	bl	8001830 <ILI9341_WriteByte>
	ILI9341_WriteByte(display, 0x28);
 8001aa8:	2128      	movs	r1, #40	@ 0x28
 8001aaa:	6878      	ldr	r0, [r7, #4]
 8001aac:	f7ff fec0 	bl	8001830 <ILI9341_WriteByte>

	// VCM CONTROL 2
	ILI9341_WriteCommand(display, 0xC7);
 8001ab0:	21c7      	movs	r1, #199	@ 0xc7
 8001ab2:	6878      	ldr	r0, [r7, #4]
 8001ab4:	f7ff fea4 	bl	8001800 <ILI9341_WriteCommand>
	ILI9341_WriteByte(display, 0x86);
 8001ab8:	2186      	movs	r1, #134	@ 0x86
 8001aba:	6878      	ldr	r0, [r7, #4]
 8001abc:	f7ff feb8 	bl	8001830 <ILI9341_WriteByte>

	// MEMORY ACCESS CONTROL
	ILI9341_WriteCommand(display, 0x36);
 8001ac0:	2136      	movs	r1, #54	@ 0x36
 8001ac2:	6878      	ldr	r0, [r7, #4]
 8001ac4:	f7ff fe9c 	bl	8001800 <ILI9341_WriteCommand>
	ILI9341_WriteByte(display, 0x48);
 8001ac8:	2148      	movs	r1, #72	@ 0x48
 8001aca:	6878      	ldr	r0, [r7, #4]
 8001acc:	f7ff feb0 	bl	8001830 <ILI9341_WriteByte>

	// PIXEL FORMAT
	ILI9341_WriteCommand(display, 0x3A);
 8001ad0:	213a      	movs	r1, #58	@ 0x3a
 8001ad2:	6878      	ldr	r0, [r7, #4]
 8001ad4:	f7ff fe94 	bl	8001800 <ILI9341_WriteCommand>
	ILI9341_WriteByte(display, 0x55);
 8001ad8:	2155      	movs	r1, #85	@ 0x55
 8001ada:	6878      	ldr	r0, [r7, #4]
 8001adc:	f7ff fea8 	bl	8001830 <ILI9341_WriteByte>

	// FRAME RATIO CONTROL, STANDARD RGB COLOR
	ILI9341_WriteCommand(display, 0xB1);
 8001ae0:	21b1      	movs	r1, #177	@ 0xb1
 8001ae2:	6878      	ldr	r0, [r7, #4]
 8001ae4:	f7ff fe8c 	bl	8001800 <ILI9341_WriteCommand>
	ILI9341_WriteByte(display, 0x00);
 8001ae8:	2100      	movs	r1, #0
 8001aea:	6878      	ldr	r0, [r7, #4]
 8001aec:	f7ff fea0 	bl	8001830 <ILI9341_WriteByte>
	ILI9341_WriteByte(display, 0x18);
 8001af0:	2118      	movs	r1, #24
 8001af2:	6878      	ldr	r0, [r7, #4]
 8001af4:	f7ff fe9c 	bl	8001830 <ILI9341_WriteByte>

	// DISPLAY FUNCTION CONTROL
	ILI9341_WriteCommand(display, 0xB6);
 8001af8:	21b6      	movs	r1, #182	@ 0xb6
 8001afa:	6878      	ldr	r0, [r7, #4]
 8001afc:	f7ff fe80 	bl	8001800 <ILI9341_WriteCommand>
	ILI9341_WriteByte(display, 0x08);
 8001b00:	2108      	movs	r1, #8
 8001b02:	6878      	ldr	r0, [r7, #4]
 8001b04:	f7ff fe94 	bl	8001830 <ILI9341_WriteByte>
	ILI9341_WriteByte(display, 0x82);
 8001b08:	2182      	movs	r1, #130	@ 0x82
 8001b0a:	6878      	ldr	r0, [r7, #4]
 8001b0c:	f7ff fe90 	bl	8001830 <ILI9341_WriteByte>
	ILI9341_WriteByte(display, 0x27);
 8001b10:	2127      	movs	r1, #39	@ 0x27
 8001b12:	6878      	ldr	r0, [r7, #4]
 8001b14:	f7ff fe8c 	bl	8001830 <ILI9341_WriteByte>

	// 3GAMMA FUNCTION DISABLE
	ILI9341_WriteCommand(display, 0xF2);
 8001b18:	21f2      	movs	r1, #242	@ 0xf2
 8001b1a:	6878      	ldr	r0, [r7, #4]
 8001b1c:	f7ff fe70 	bl	8001800 <ILI9341_WriteCommand>
	ILI9341_WriteByte(display, 0x00);
 8001b20:	2100      	movs	r1, #0
 8001b22:	6878      	ldr	r0, [r7, #4]
 8001b24:	f7ff fe84 	bl	8001830 <ILI9341_WriteByte>

	// GAMMA CURVE SELECTED
	ILI9341_WriteCommand(display, 0x26);
 8001b28:	2126      	movs	r1, #38	@ 0x26
 8001b2a:	6878      	ldr	r0, [r7, #4]
 8001b2c:	f7ff fe68 	bl	8001800 <ILI9341_WriteCommand>
	ILI9341_WriteByte(display, 0x01);
 8001b30:	2101      	movs	r1, #1
 8001b32:	6878      	ldr	r0, [r7, #4]
 8001b34:	f7ff fe7c 	bl	8001830 <ILI9341_WriteByte>

	// POSITIVE GAMMA CORRECTION
	ILI9341_WriteCommand(display, 0xE0);
 8001b38:	21e0      	movs	r1, #224	@ 0xe0
 8001b3a:	6878      	ldr	r0, [r7, #4]
 8001b3c:	f7ff fe60 	bl	8001800 <ILI9341_WriteCommand>
	ILI9341_WriteByte(display, 0x0F);
 8001b40:	210f      	movs	r1, #15
 8001b42:	6878      	ldr	r0, [r7, #4]
 8001b44:	f7ff fe74 	bl	8001830 <ILI9341_WriteByte>
	ILI9341_WriteByte(display, 0x31);
 8001b48:	2131      	movs	r1, #49	@ 0x31
 8001b4a:	6878      	ldr	r0, [r7, #4]
 8001b4c:	f7ff fe70 	bl	8001830 <ILI9341_WriteByte>
	ILI9341_WriteByte(display, 0x2B);
 8001b50:	212b      	movs	r1, #43	@ 0x2b
 8001b52:	6878      	ldr	r0, [r7, #4]
 8001b54:	f7ff fe6c 	bl	8001830 <ILI9341_WriteByte>
	ILI9341_WriteByte(display, 0x0C);
 8001b58:	210c      	movs	r1, #12
 8001b5a:	6878      	ldr	r0, [r7, #4]
 8001b5c:	f7ff fe68 	bl	8001830 <ILI9341_WriteByte>
	ILI9341_WriteByte(display, 0x0E);
 8001b60:	210e      	movs	r1, #14
 8001b62:	6878      	ldr	r0, [r7, #4]
 8001b64:	f7ff fe64 	bl	8001830 <ILI9341_WriteByte>
	ILI9341_WriteByte(display, 0x08);
 8001b68:	2108      	movs	r1, #8
 8001b6a:	6878      	ldr	r0, [r7, #4]
 8001b6c:	f7ff fe60 	bl	8001830 <ILI9341_WriteByte>
	ILI9341_WriteByte(display, 0x4E);
 8001b70:	214e      	movs	r1, #78	@ 0x4e
 8001b72:	6878      	ldr	r0, [r7, #4]
 8001b74:	f7ff fe5c 	bl	8001830 <ILI9341_WriteByte>
	ILI9341_WriteByte(display, 0xF1);
 8001b78:	21f1      	movs	r1, #241	@ 0xf1
 8001b7a:	6878      	ldr	r0, [r7, #4]
 8001b7c:	f7ff fe58 	bl	8001830 <ILI9341_WriteByte>
	ILI9341_WriteByte(display, 0x37);
 8001b80:	2137      	movs	r1, #55	@ 0x37
 8001b82:	6878      	ldr	r0, [r7, #4]
 8001b84:	f7ff fe54 	bl	8001830 <ILI9341_WriteByte>
	ILI9341_WriteByte(display, 0x07);
 8001b88:	2107      	movs	r1, #7
 8001b8a:	6878      	ldr	r0, [r7, #4]
 8001b8c:	f7ff fe50 	bl	8001830 <ILI9341_WriteByte>
	ILI9341_WriteByte(display, 0x10);
 8001b90:	2110      	movs	r1, #16
 8001b92:	6878      	ldr	r0, [r7, #4]
 8001b94:	f7ff fe4c 	bl	8001830 <ILI9341_WriteByte>
	ILI9341_WriteByte(display, 0x03);
 8001b98:	2103      	movs	r1, #3
 8001b9a:	6878      	ldr	r0, [r7, #4]
 8001b9c:	f7ff fe48 	bl	8001830 <ILI9341_WriteByte>
	ILI9341_WriteByte(display, 0x0E);
 8001ba0:	210e      	movs	r1, #14
 8001ba2:	6878      	ldr	r0, [r7, #4]
 8001ba4:	f7ff fe44 	bl	8001830 <ILI9341_WriteByte>
	ILI9341_WriteByte(display, 0x09);
 8001ba8:	2109      	movs	r1, #9
 8001baa:	6878      	ldr	r0, [r7, #4]
 8001bac:	f7ff fe40 	bl	8001830 <ILI9341_WriteByte>
	ILI9341_WriteByte(display, 0x00);
 8001bb0:	2100      	movs	r1, #0
 8001bb2:	6878      	ldr	r0, [r7, #4]
 8001bb4:	f7ff fe3c 	bl	8001830 <ILI9341_WriteByte>

	// NEGATIVE GAMMA CORRECTION
	ILI9341_WriteCommand(display, 0xE1);
 8001bb8:	21e1      	movs	r1, #225	@ 0xe1
 8001bba:	6878      	ldr	r0, [r7, #4]
 8001bbc:	f7ff fe20 	bl	8001800 <ILI9341_WriteCommand>
	ILI9341_WriteByte(display, 0x00);
 8001bc0:	2100      	movs	r1, #0
 8001bc2:	6878      	ldr	r0, [r7, #4]
 8001bc4:	f7ff fe34 	bl	8001830 <ILI9341_WriteByte>
	ILI9341_WriteByte(display, 0x0E);
 8001bc8:	210e      	movs	r1, #14
 8001bca:	6878      	ldr	r0, [r7, #4]
 8001bcc:	f7ff fe30 	bl	8001830 <ILI9341_WriteByte>
	ILI9341_WriteByte(display, 0x14);
 8001bd0:	2114      	movs	r1, #20
 8001bd2:	6878      	ldr	r0, [r7, #4]
 8001bd4:	f7ff fe2c 	bl	8001830 <ILI9341_WriteByte>
	ILI9341_WriteByte(display, 0x03);
 8001bd8:	2103      	movs	r1, #3
 8001bda:	6878      	ldr	r0, [r7, #4]
 8001bdc:	f7ff fe28 	bl	8001830 <ILI9341_WriteByte>
	ILI9341_WriteByte(display, 0x11);
 8001be0:	2111      	movs	r1, #17
 8001be2:	6878      	ldr	r0, [r7, #4]
 8001be4:	f7ff fe24 	bl	8001830 <ILI9341_WriteByte>
	ILI9341_WriteByte(display, 0x07);
 8001be8:	2107      	movs	r1, #7
 8001bea:	6878      	ldr	r0, [r7, #4]
 8001bec:	f7ff fe20 	bl	8001830 <ILI9341_WriteByte>
	ILI9341_WriteByte(display, 0x31);
 8001bf0:	2131      	movs	r1, #49	@ 0x31
 8001bf2:	6878      	ldr	r0, [r7, #4]
 8001bf4:	f7ff fe1c 	bl	8001830 <ILI9341_WriteByte>
	ILI9341_WriteByte(display, 0xC1);
 8001bf8:	21c1      	movs	r1, #193	@ 0xc1
 8001bfa:	6878      	ldr	r0, [r7, #4]
 8001bfc:	f7ff fe18 	bl	8001830 <ILI9341_WriteByte>
	ILI9341_WriteByte(display, 0x48);
 8001c00:	2148      	movs	r1, #72	@ 0x48
 8001c02:	6878      	ldr	r0, [r7, #4]
 8001c04:	f7ff fe14 	bl	8001830 <ILI9341_WriteByte>
	ILI9341_WriteByte(display, 0x08);
 8001c08:	2108      	movs	r1, #8
 8001c0a:	6878      	ldr	r0, [r7, #4]
 8001c0c:	f7ff fe10 	bl	8001830 <ILI9341_WriteByte>
	ILI9341_WriteByte(display, 0x0F);
 8001c10:	210f      	movs	r1, #15
 8001c12:	6878      	ldr	r0, [r7, #4]
 8001c14:	f7ff fe0c 	bl	8001830 <ILI9341_WriteByte>
	ILI9341_WriteByte(display, 0x0C);
 8001c18:	210c      	movs	r1, #12
 8001c1a:	6878      	ldr	r0, [r7, #4]
 8001c1c:	f7ff fe08 	bl	8001830 <ILI9341_WriteByte>
	ILI9341_WriteByte(display, 0x31);
 8001c20:	2131      	movs	r1, #49	@ 0x31
 8001c22:	6878      	ldr	r0, [r7, #4]
 8001c24:	f7ff fe04 	bl	8001830 <ILI9341_WriteByte>
	ILI9341_WriteByte(display, 0x36);
 8001c28:	2136      	movs	r1, #54	@ 0x36
 8001c2a:	6878      	ldr	r0, [r7, #4]
 8001c2c:	f7ff fe00 	bl	8001830 <ILI9341_WriteByte>
	ILI9341_WriteByte(display, 0x0F);
 8001c30:	210f      	movs	r1, #15
 8001c32:	6878      	ldr	r0, [r7, #4]
 8001c34:	f7ff fdfc 	bl	8001830 <ILI9341_WriteByte>

	// EXIT SLEEP
	ILI9341_WriteCommand(display, 0x11);
 8001c38:	2111      	movs	r1, #17
 8001c3a:	6878      	ldr	r0, [r7, #4]
 8001c3c:	f7ff fde0 	bl	8001800 <ILI9341_WriteCommand>
	HAL_Delay(120);
 8001c40:	2078      	movs	r0, #120	@ 0x78
 8001c42:	f003 fcad 	bl	80055a0 <HAL_Delay>

	// TURN ON DISPLAY
	ILI9341_WriteCommand(display, 0x29);
 8001c46:	2129      	movs	r1, #41	@ 0x29
 8001c48:	6878      	ldr	r0, [r7, #4]
 8001c4a:	f7ff fdd9 	bl	8001800 <ILI9341_WriteCommand>

	// MADCTL
	ILI9341_WriteCommand(display, 0x36);
 8001c4e:	2136      	movs	r1, #54	@ 0x36
 8001c50:	6878      	ldr	r0, [r7, #4]
 8001c52:	f7ff fdd5 	bl	8001800 <ILI9341_WriteCommand>
	ILI9341_WriteByte(display, display->orientation);
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	7e9b      	ldrb	r3, [r3, #26]
 8001c5a:	4619      	mov	r1, r3
 8001c5c:	6878      	ldr	r0, [r7, #4]
 8001c5e:	f7ff fde7 	bl	8001830 <ILI9341_WriteByte>

	ILI9341_UNSELECT(display);
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	8a1a      	ldrh	r2, [r3, #16]
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	685b      	ldr	r3, [r3, #4]
 8001c6a:	619a      	str	r2, [r3, #24]
}
 8001c6c:	bf00      	nop
 8001c6e:	3708      	adds	r7, #8
 8001c70:	46bd      	mov	sp, r7
 8001c72:	bd80      	pop	{r7, pc}

08001c74 <ILI9341_DrawPixel>:
    ILI9341_WriteCommand(display, (invert > 0) ? 0x21 /* INVON */ : 0x20 /* INVOFF */);
    ILI9341_UNSELECT(display);
}

void ILI9341_DrawPixel(ILI9341TypeDef *display, uint16_t x, uint16_t y, uint16_t color)
{
 8001c74:	b580      	push	{r7, lr}
 8001c76:	b088      	sub	sp, #32
 8001c78:	af02      	add	r7, sp, #8
 8001c7a:	60f8      	str	r0, [r7, #12]
 8001c7c:	4608      	mov	r0, r1
 8001c7e:	4611      	mov	r1, r2
 8001c80:	461a      	mov	r2, r3
 8001c82:	4603      	mov	r3, r0
 8001c84:	817b      	strh	r3, [r7, #10]
 8001c86:	460b      	mov	r3, r1
 8001c88:	813b      	strh	r3, [r7, #8]
 8001c8a:	4613      	mov	r3, r2
 8001c8c:	80fb      	strh	r3, [r7, #6]
	// Check out of bounds
	if((x >= display->width) || (y >= display->height))
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	8adb      	ldrh	r3, [r3, #22]
 8001c92:	897a      	ldrh	r2, [r7, #10]
 8001c94:	429a      	cmp	r2, r3
 8001c96:	d233      	bcs.n	8001d00 <ILI9341_DrawPixel+0x8c>
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	8b1b      	ldrh	r3, [r3, #24]
 8001c9c:	893a      	ldrh	r2, [r7, #8]
 8001c9e:	429a      	cmp	r2, r3
 8001ca0:	d22e      	bcs.n	8001d00 <ILI9341_DrawPixel+0x8c>
		return;

	ILI9341_SELECT(display);
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	8a1b      	ldrh	r3, [r3, #16]
 8001ca6:	461a      	mov	r2, r3
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	685b      	ldr	r3, [r3, #4]
 8001cac:	0412      	lsls	r2, r2, #16
 8001cae:	619a      	str	r2, [r3, #24]
	ILI9341_SetAddressWindow(display, x, y, x + 1, y + 1);
 8001cb0:	897b      	ldrh	r3, [r7, #10]
 8001cb2:	3301      	adds	r3, #1
 8001cb4:	b298      	uxth	r0, r3
 8001cb6:	893b      	ldrh	r3, [r7, #8]
 8001cb8:	3301      	adds	r3, #1
 8001cba:	b29b      	uxth	r3, r3
 8001cbc:	893a      	ldrh	r2, [r7, #8]
 8001cbe:	8979      	ldrh	r1, [r7, #10]
 8001cc0:	9300      	str	r3, [sp, #0]
 8001cc2:	4603      	mov	r3, r0
 8001cc4:	68f8      	ldr	r0, [r7, #12]
 8001cc6:	f7ff fdf3 	bl	80018b0 <ILI9341_SetAddressWindow>

	ILI9341_DATA(display);
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	8a5a      	ldrh	r2, [r3, #18]
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	689b      	ldr	r3, [r3, #8]
 8001cd2:	619a      	str	r2, [r3, #24]
	uint8_t data[2] = { color >> 8, color };
 8001cd4:	88fb      	ldrh	r3, [r7, #6]
 8001cd6:	0a1b      	lsrs	r3, r3, #8
 8001cd8:	b29b      	uxth	r3, r3
 8001cda:	b2db      	uxtb	r3, r3
 8001cdc:	753b      	strb	r3, [r7, #20]
 8001cde:	88fb      	ldrh	r3, [r7, #6]
 8001ce0:	b2db      	uxtb	r3, r3
 8001ce2:	757b      	strb	r3, [r7, #21]
	HAL_SPI_Transmit(display->spi, data, 2, 1);
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	6818      	ldr	r0, [r3, #0]
 8001ce8:	f107 0114 	add.w	r1, r7, #20
 8001cec:	2301      	movs	r3, #1
 8001cee:	2202      	movs	r2, #2
 8001cf0:	f006 fc09 	bl	8008506 <HAL_SPI_Transmit>

	ILI9341_UNSELECT(display);
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	8a1a      	ldrh	r2, [r3, #16]
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	685b      	ldr	r3, [r3, #4]
 8001cfc:	619a      	str	r2, [r3, #24]
 8001cfe:	e000      	b.n	8001d02 <ILI9341_DrawPixel+0x8e>
		return;
 8001d00:	bf00      	nop
}
 8001d02:	3718      	adds	r7, #24
 8001d04:	46bd      	mov	sp, r7
 8001d06:	bd80      	pop	{r7, pc}

08001d08 <ILI9341_Fill>:

static void ILI9341_Fill(ILI9341TypeDef *display, uint16_t color, uint32_t size)
{
 8001d08:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001d0c:	b08f      	sub	sp, #60	@ 0x3c
 8001d0e:	af00      	add	r7, sp, #0
 8001d10:	60f8      	str	r0, [r7, #12]
 8001d12:	460b      	mov	r3, r1
 8001d14:	607a      	str	r2, [r7, #4]
 8001d16:	817b      	strh	r3, [r7, #10]
 8001d18:	466b      	mov	r3, sp
 8001d1a:	461e      	mov	r6, r3
	ILI9341_DATA(display);
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	8a5a      	ldrh	r2, [r3, #18]
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	689b      	ldr	r3, [r3, #8]
 8001d24:	619a      	str	r2, [r3, #24]

	uint32_t buffer_size = 0;
 8001d26:	2300      	movs	r3, #0
 8001d28:	637b      	str	r3, [r7, #52]	@ 0x34

	if ((size * 2) < ILI9341_BUFFER_MAX_SIZE)
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	005b      	lsls	r3, r3, #1
 8001d2e:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8001d32:	d202      	bcs.n	8001d3a <ILI9341_Fill+0x32>
		buffer_size = size;
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	637b      	str	r3, [r7, #52]	@ 0x34
 8001d38:	e002      	b.n	8001d40 <ILI9341_Fill+0x38>
	else
		buffer_size = ILI9341_BUFFER_MAX_SIZE;
 8001d3a:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8001d3e:	637b      	str	r3, [r7, #52]	@ 0x34

	uint8_t color_shifted = color >> 8;
 8001d40:	897b      	ldrh	r3, [r7, #10]
 8001d42:	0a1b      	lsrs	r3, r3, #8
 8001d44:	b29b      	uxth	r3, r3
 8001d46:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
	uint8_t buffer[buffer_size];
 8001d4a:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8001d4c:	460b      	mov	r3, r1
 8001d4e:	3b01      	subs	r3, #1
 8001d50:	627b      	str	r3, [r7, #36]	@ 0x24
 8001d52:	2300      	movs	r3, #0
 8001d54:	4688      	mov	r8, r1
 8001d56:	4699      	mov	r9, r3
 8001d58:	f04f 0200 	mov.w	r2, #0
 8001d5c:	f04f 0300 	mov.w	r3, #0
 8001d60:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001d64:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001d68:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001d6c:	2300      	movs	r3, #0
 8001d6e:	460c      	mov	r4, r1
 8001d70:	461d      	mov	r5, r3
 8001d72:	f04f 0200 	mov.w	r2, #0
 8001d76:	f04f 0300 	mov.w	r3, #0
 8001d7a:	00eb      	lsls	r3, r5, #3
 8001d7c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001d80:	00e2      	lsls	r2, r4, #3
 8001d82:	1dcb      	adds	r3, r1, #7
 8001d84:	08db      	lsrs	r3, r3, #3
 8001d86:	00db      	lsls	r3, r3, #3
 8001d88:	ebad 0d03 	sub.w	sp, sp, r3
 8001d8c:	466b      	mov	r3, sp
 8001d8e:	3300      	adds	r3, #0
 8001d90:	623b      	str	r3, [r7, #32]

	for (uint32_t i = 0; i < buffer_size; i += 2) {
 8001d92:	2300      	movs	r3, #0
 8001d94:	633b      	str	r3, [r7, #48]	@ 0x30
 8001d96:	e00e      	b.n	8001db6 <ILI9341_Fill+0xae>
		buffer[i]     = color_shifted;
 8001d98:	6a3a      	ldr	r2, [r7, #32]
 8001d9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001d9c:	4413      	add	r3, r2
 8001d9e:	f897 202b 	ldrb.w	r2, [r7, #43]	@ 0x2b
 8001da2:	701a      	strb	r2, [r3, #0]
		buffer[i + 1] = color;
 8001da4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001da6:	3301      	adds	r3, #1
 8001da8:	897a      	ldrh	r2, [r7, #10]
 8001daa:	b2d1      	uxtb	r1, r2
 8001dac:	6a3a      	ldr	r2, [r7, #32]
 8001dae:	54d1      	strb	r1, [r2, r3]
	for (uint32_t i = 0; i < buffer_size; i += 2) {
 8001db0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001db2:	3302      	adds	r3, #2
 8001db4:	633b      	str	r3, [r7, #48]	@ 0x30
 8001db6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001db8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001dba:	429a      	cmp	r2, r3
 8001dbc:	d3ec      	bcc.n	8001d98 <ILI9341_Fill+0x90>
	}

	uint32_t sending_size   = size * 2;
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	005b      	lsls	r3, r3, #1
 8001dc2:	61fb      	str	r3, [r7, #28]
	uint32_t sending_blocks = sending_size / buffer_size;
 8001dc4:	69fa      	ldr	r2, [r7, #28]
 8001dc6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001dc8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001dcc:	61bb      	str	r3, [r7, #24]
	uint32_t sending_remain = sending_size % buffer_size;
 8001dce:	69fb      	ldr	r3, [r7, #28]
 8001dd0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001dd2:	fbb3 f2f2 	udiv	r2, r3, r2
 8001dd6:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8001dd8:	fb01 f202 	mul.w	r2, r1, r2
 8001ddc:	1a9b      	subs	r3, r3, r2
 8001dde:	617b      	str	r3, [r7, #20]

	if (sending_blocks != 0) {
 8001de0:	69bb      	ldr	r3, [r7, #24]
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d011      	beq.n	8001e0a <ILI9341_Fill+0x102>
		for(uint32_t i = 0; i < sending_blocks; i++)
 8001de6:	2300      	movs	r3, #0
 8001de8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001dea:	e00a      	b.n	8001e02 <ILI9341_Fill+0xfa>
			HAL_SPI_Transmit(display->spi, (uint8_t*)buffer, buffer_size, 10);
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	6818      	ldr	r0, [r3, #0]
 8001df0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001df2:	b29a      	uxth	r2, r3
 8001df4:	230a      	movs	r3, #10
 8001df6:	6a39      	ldr	r1, [r7, #32]
 8001df8:	f006 fb85 	bl	8008506 <HAL_SPI_Transmit>
		for(uint32_t i = 0; i < sending_blocks; i++)
 8001dfc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001dfe:	3301      	adds	r3, #1
 8001e00:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001e02:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001e04:	69bb      	ldr	r3, [r7, #24]
 8001e06:	429a      	cmp	r2, r3
 8001e08:	d3f0      	bcc.n	8001dec <ILI9341_Fill+0xe4>
	}

	HAL_SPI_Transmit(display->spi, (uint8_t*)buffer, sending_remain, 10);
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	6818      	ldr	r0, [r3, #0]
 8001e0e:	697b      	ldr	r3, [r7, #20]
 8001e10:	b29a      	uxth	r2, r3
 8001e12:	230a      	movs	r3, #10
 8001e14:	6a39      	ldr	r1, [r7, #32]
 8001e16:	f006 fb76 	bl	8008506 <HAL_SPI_Transmit>
 8001e1a:	46b5      	mov	sp, r6
}
 8001e1c:	bf00      	nop
 8001e1e:	373c      	adds	r7, #60	@ 0x3c
 8001e20:	46bd      	mov	sp, r7
 8001e22:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08001e26 <ILI9341_FillScreen>:

void ILI9341_FillScreen(ILI9341TypeDef *display, uint16_t color)
{
 8001e26:	b580      	push	{r7, lr}
 8001e28:	b084      	sub	sp, #16
 8001e2a:	af02      	add	r7, sp, #8
 8001e2c:	6078      	str	r0, [r7, #4]
 8001e2e:	460b      	mov	r3, r1
 8001e30:	807b      	strh	r3, [r7, #2]
	ILI9341_SELECT(display);
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	8a1b      	ldrh	r3, [r3, #16]
 8001e36:	461a      	mov	r2, r3
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	685b      	ldr	r3, [r3, #4]
 8001e3c:	0412      	lsls	r2, r2, #16
 8001e3e:	619a      	str	r2, [r3, #24]
	ILI9341_SetAddressWindow(display, 0, 0, display->width - 1, display->height - 1);
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	8adb      	ldrh	r3, [r3, #22]
 8001e44:	3b01      	subs	r3, #1
 8001e46:	b29a      	uxth	r2, r3
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	8b1b      	ldrh	r3, [r3, #24]
 8001e4c:	3b01      	subs	r3, #1
 8001e4e:	b29b      	uxth	r3, r3
 8001e50:	9300      	str	r3, [sp, #0]
 8001e52:	4613      	mov	r3, r2
 8001e54:	2200      	movs	r2, #0
 8001e56:	2100      	movs	r1, #0
 8001e58:	6878      	ldr	r0, [r7, #4]
 8001e5a:	f7ff fd29 	bl	80018b0 <ILI9341_SetAddressWindow>
	ILI9341_Fill(display, color, display->width * display->height);
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	8adb      	ldrh	r3, [r3, #22]
 8001e62:	461a      	mov	r2, r3
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	8b1b      	ldrh	r3, [r3, #24]
 8001e68:	fb02 f303 	mul.w	r3, r2, r3
 8001e6c:	461a      	mov	r2, r3
 8001e6e:	887b      	ldrh	r3, [r7, #2]
 8001e70:	4619      	mov	r1, r3
 8001e72:	6878      	ldr	r0, [r7, #4]
 8001e74:	f7ff ff48 	bl	8001d08 <ILI9341_Fill>
	ILI9341_UNSELECT(display);
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	8a1a      	ldrh	r2, [r3, #16]
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	685b      	ldr	r3, [r3, #4]
 8001e80:	619a      	str	r2, [r3, #24]
}
 8001e82:	bf00      	nop
 8001e84:	3708      	adds	r7, #8
 8001e86:	46bd      	mov	sp, r7
 8001e88:	bd80      	pop	{r7, pc}

08001e8a <ILI9341_FillRectangle>:

void ILI9341_FillRectangle(ILI9341TypeDef *display, uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color)
{
 8001e8a:	b580      	push	{r7, lr}
 8001e8c:	b086      	sub	sp, #24
 8001e8e:	af02      	add	r7, sp, #8
 8001e90:	60f8      	str	r0, [r7, #12]
 8001e92:	4608      	mov	r0, r1
 8001e94:	4611      	mov	r1, r2
 8001e96:	461a      	mov	r2, r3
 8001e98:	4603      	mov	r3, r0
 8001e9a:	817b      	strh	r3, [r7, #10]
 8001e9c:	460b      	mov	r3, r1
 8001e9e:	813b      	strh	r3, [r7, #8]
 8001ea0:	4613      	mov	r3, r2
 8001ea2:	80fb      	strh	r3, [r7, #6]
	if ((x >= display->width) || (y >= display->height))
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	8adb      	ldrh	r3, [r3, #22]
 8001ea8:	897a      	ldrh	r2, [r7, #10]
 8001eaa:	429a      	cmp	r2, r3
 8001eac:	d246      	bcs.n	8001f3c <ILI9341_FillRectangle+0xb2>
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	8b1b      	ldrh	r3, [r3, #24]
 8001eb2:	893a      	ldrh	r2, [r7, #8]
 8001eb4:	429a      	cmp	r2, r3
 8001eb6:	d241      	bcs.n	8001f3c <ILI9341_FillRectangle+0xb2>
		return;

	if ((x + w - 1) >= display->width)
 8001eb8:	897a      	ldrh	r2, [r7, #10]
 8001eba:	88fb      	ldrh	r3, [r7, #6]
 8001ebc:	4413      	add	r3, r2
 8001ebe:	68fa      	ldr	r2, [r7, #12]
 8001ec0:	8ad2      	ldrh	r2, [r2, #22]
 8001ec2:	4293      	cmp	r3, r2
 8001ec4:	dd04      	ble.n	8001ed0 <ILI9341_FillRectangle+0x46>
		w = display->width - x;
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	8ada      	ldrh	r2, [r3, #22]
 8001eca:	897b      	ldrh	r3, [r7, #10]
 8001ecc:	1ad3      	subs	r3, r2, r3
 8001ece:	80fb      	strh	r3, [r7, #6]

	if ((y + h - 1) >= display->height)
 8001ed0:	893a      	ldrh	r2, [r7, #8]
 8001ed2:	8b3b      	ldrh	r3, [r7, #24]
 8001ed4:	4413      	add	r3, r2
 8001ed6:	68fa      	ldr	r2, [r7, #12]
 8001ed8:	8b12      	ldrh	r2, [r2, #24]
 8001eda:	4293      	cmp	r3, r2
 8001edc:	dd04      	ble.n	8001ee8 <ILI9341_FillRectangle+0x5e>
		h = display->height - y;
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	8b1a      	ldrh	r2, [r3, #24]
 8001ee2:	893b      	ldrh	r3, [r7, #8]
 8001ee4:	1ad3      	subs	r3, r2, r3
 8001ee6:	833b      	strh	r3, [r7, #24]

	ILI9341_SELECT(display);
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	8a1b      	ldrh	r3, [r3, #16]
 8001eec:	461a      	mov	r2, r3
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	685b      	ldr	r3, [r3, #4]
 8001ef2:	0412      	lsls	r2, r2, #16
 8001ef4:	619a      	str	r2, [r3, #24]
	ILI9341_SetAddressWindow(display, x, y, x + w - 1, y + h - 1);
 8001ef6:	897a      	ldrh	r2, [r7, #10]
 8001ef8:	88fb      	ldrh	r3, [r7, #6]
 8001efa:	4413      	add	r3, r2
 8001efc:	b29b      	uxth	r3, r3
 8001efe:	3b01      	subs	r3, #1
 8001f00:	b298      	uxth	r0, r3
 8001f02:	893a      	ldrh	r2, [r7, #8]
 8001f04:	8b3b      	ldrh	r3, [r7, #24]
 8001f06:	4413      	add	r3, r2
 8001f08:	b29b      	uxth	r3, r3
 8001f0a:	3b01      	subs	r3, #1
 8001f0c:	b29b      	uxth	r3, r3
 8001f0e:	893a      	ldrh	r2, [r7, #8]
 8001f10:	8979      	ldrh	r1, [r7, #10]
 8001f12:	9300      	str	r3, [sp, #0]
 8001f14:	4603      	mov	r3, r0
 8001f16:	68f8      	ldr	r0, [r7, #12]
 8001f18:	f7ff fcca 	bl	80018b0 <ILI9341_SetAddressWindow>
	ILI9341_Fill(display, color, w * h);
 8001f1c:	88fb      	ldrh	r3, [r7, #6]
 8001f1e:	8b3a      	ldrh	r2, [r7, #24]
 8001f20:	fb02 f303 	mul.w	r3, r2, r3
 8001f24:	461a      	mov	r2, r3
 8001f26:	8bbb      	ldrh	r3, [r7, #28]
 8001f28:	4619      	mov	r1, r3
 8001f2a:	68f8      	ldr	r0, [r7, #12]
 8001f2c:	f7ff feec 	bl	8001d08 <ILI9341_Fill>
	ILI9341_UNSELECT(display);
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	8a1a      	ldrh	r2, [r3, #16]
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	685b      	ldr	r3, [r3, #4]
 8001f38:	619a      	str	r2, [r3, #24]
 8001f3a:	e000      	b.n	8001f3e <ILI9341_FillRectangle+0xb4>
		return;
 8001f3c:	bf00      	nop
}
 8001f3e:	3710      	adds	r7, #16
 8001f40:	46bd      	mov	sp, r7
 8001f42:	bd80      	pop	{r7, pc}

08001f44 <ILI9341_Rectangle>:

void ILI9341_Rectangle(ILI9341TypeDef *display, uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color)
{
 8001f44:	b580      	push	{r7, lr}
 8001f46:	b086      	sub	sp, #24
 8001f48:	af02      	add	r7, sp, #8
 8001f4a:	60f8      	str	r0, [r7, #12]
 8001f4c:	4608      	mov	r0, r1
 8001f4e:	4611      	mov	r1, r2
 8001f50:	461a      	mov	r2, r3
 8001f52:	4603      	mov	r3, r0
 8001f54:	817b      	strh	r3, [r7, #10]
 8001f56:	460b      	mov	r3, r1
 8001f58:	813b      	strh	r3, [r7, #8]
 8001f5a:	4613      	mov	r3, r2
 8001f5c:	80fb      	strh	r3, [r7, #6]
	ILI9341_FillRectangle(display, x,     y,     w + 1, 1, color);
 8001f5e:	88fb      	ldrh	r3, [r7, #6]
 8001f60:	3301      	adds	r3, #1
 8001f62:	b298      	uxth	r0, r3
 8001f64:	893a      	ldrh	r2, [r7, #8]
 8001f66:	8979      	ldrh	r1, [r7, #10]
 8001f68:	8bbb      	ldrh	r3, [r7, #28]
 8001f6a:	9301      	str	r3, [sp, #4]
 8001f6c:	2301      	movs	r3, #1
 8001f6e:	9300      	str	r3, [sp, #0]
 8001f70:	4603      	mov	r3, r0
 8001f72:	68f8      	ldr	r0, [r7, #12]
 8001f74:	f7ff ff89 	bl	8001e8a <ILI9341_FillRectangle>
	ILI9341_FillRectangle(display, x, y + h,     w + 1, 1, color);
 8001f78:	893a      	ldrh	r2, [r7, #8]
 8001f7a:	8b3b      	ldrh	r3, [r7, #24]
 8001f7c:	4413      	add	r3, r2
 8001f7e:	b29a      	uxth	r2, r3
 8001f80:	88fb      	ldrh	r3, [r7, #6]
 8001f82:	3301      	adds	r3, #1
 8001f84:	b298      	uxth	r0, r3
 8001f86:	8979      	ldrh	r1, [r7, #10]
 8001f88:	8bbb      	ldrh	r3, [r7, #28]
 8001f8a:	9301      	str	r3, [sp, #4]
 8001f8c:	2301      	movs	r3, #1
 8001f8e:	9300      	str	r3, [sp, #0]
 8001f90:	4603      	mov	r3, r0
 8001f92:	68f8      	ldr	r0, [r7, #12]
 8001f94:	f7ff ff79 	bl	8001e8a <ILI9341_FillRectangle>
	ILI9341_FillRectangle(display, x,     y,     1,     h, color);
 8001f98:	893a      	ldrh	r2, [r7, #8]
 8001f9a:	8979      	ldrh	r1, [r7, #10]
 8001f9c:	8bbb      	ldrh	r3, [r7, #28]
 8001f9e:	9301      	str	r3, [sp, #4]
 8001fa0:	8b3b      	ldrh	r3, [r7, #24]
 8001fa2:	9300      	str	r3, [sp, #0]
 8001fa4:	2301      	movs	r3, #1
 8001fa6:	68f8      	ldr	r0, [r7, #12]
 8001fa8:	f7ff ff6f 	bl	8001e8a <ILI9341_FillRectangle>
	ILI9341_FillRectangle(display, x + w, y,     1,     h, color);
 8001fac:	897a      	ldrh	r2, [r7, #10]
 8001fae:	88fb      	ldrh	r3, [r7, #6]
 8001fb0:	4413      	add	r3, r2
 8001fb2:	b299      	uxth	r1, r3
 8001fb4:	893a      	ldrh	r2, [r7, #8]
 8001fb6:	8bbb      	ldrh	r3, [r7, #28]
 8001fb8:	9301      	str	r3, [sp, #4]
 8001fba:	8b3b      	ldrh	r3, [r7, #24]
 8001fbc:	9300      	str	r3, [sp, #0]
 8001fbe:	2301      	movs	r3, #1
 8001fc0:	68f8      	ldr	r0, [r7, #12]
 8001fc2:	f7ff ff62 	bl	8001e8a <ILI9341_FillRectangle>
}
 8001fc6:	bf00      	nop
 8001fc8:	3710      	adds	r7, #16
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	bd80      	pop	{r7, pc}

08001fce <ILI9341_WriteChar>:

static void ILI9341_WriteChar(ILI9341TypeDef *display, uint16_t x, uint16_t y, char ch, FontDef font, uint16_t color, uint16_t bgcolor)
{
 8001fce:	b580      	push	{r7, lr}
 8001fd0:	b08c      	sub	sp, #48	@ 0x30
 8001fd2:	af02      	add	r7, sp, #8
 8001fd4:	60f8      	str	r0, [r7, #12]
 8001fd6:	4608      	mov	r0, r1
 8001fd8:	4611      	mov	r1, r2
 8001fda:	461a      	mov	r2, r3
 8001fdc:	4603      	mov	r3, r0
 8001fde:	817b      	strh	r3, [r7, #10]
 8001fe0:	460b      	mov	r3, r1
 8001fe2:	813b      	strh	r3, [r7, #8]
 8001fe4:	4613      	mov	r3, r2
 8001fe6:	71fb      	strb	r3, [r7, #7]
    uint32_t i, b, j;

    ILI9341_SetAddressWindow(display, x, y, x + font.width - 1, y + font.height - 1);
 8001fe8:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8001fec:	461a      	mov	r2, r3
 8001fee:	897b      	ldrh	r3, [r7, #10]
 8001ff0:	4413      	add	r3, r2
 8001ff2:	b29b      	uxth	r3, r3
 8001ff4:	3b01      	subs	r3, #1
 8001ff6:	b298      	uxth	r0, r3
 8001ff8:	f897 3031 	ldrb.w	r3, [r7, #49]	@ 0x31
 8001ffc:	461a      	mov	r2, r3
 8001ffe:	893b      	ldrh	r3, [r7, #8]
 8002000:	4413      	add	r3, r2
 8002002:	b29b      	uxth	r3, r3
 8002004:	3b01      	subs	r3, #1
 8002006:	b29b      	uxth	r3, r3
 8002008:	893a      	ldrh	r2, [r7, #8]
 800200a:	8979      	ldrh	r1, [r7, #10]
 800200c:	9300      	str	r3, [sp, #0]
 800200e:	4603      	mov	r3, r0
 8002010:	68f8      	ldr	r0, [r7, #12]
 8002012:	f7ff fc4d 	bl	80018b0 <ILI9341_SetAddressWindow>

    for (i = 0; i < font.height; i++) {
 8002016:	2300      	movs	r3, #0
 8002018:	627b      	str	r3, [r7, #36]	@ 0x24
 800201a:	e043      	b.n	80020a4 <ILI9341_WriteChar+0xd6>
        b = font.data[(ch - 32) * font.height + i];
 800201c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800201e:	79fb      	ldrb	r3, [r7, #7]
 8002020:	3b20      	subs	r3, #32
 8002022:	f897 1031 	ldrb.w	r1, [r7, #49]	@ 0x31
 8002026:	fb01 f303 	mul.w	r3, r1, r3
 800202a:	4619      	mov	r1, r3
 800202c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800202e:	440b      	add	r3, r1
 8002030:	005b      	lsls	r3, r3, #1
 8002032:	4413      	add	r3, r2
 8002034:	881b      	ldrh	r3, [r3, #0]
 8002036:	61fb      	str	r3, [r7, #28]
        for (j = 0; j < font.width; j++) {
 8002038:	2300      	movs	r3, #0
 800203a:	623b      	str	r3, [r7, #32]
 800203c:	e029      	b.n	8002092 <ILI9341_WriteChar+0xc4>
            if ((b << j) & 0x8000) {
 800203e:	69fa      	ldr	r2, [r7, #28]
 8002040:	6a3b      	ldr	r3, [r7, #32]
 8002042:	fa02 f303 	lsl.w	r3, r2, r3
 8002046:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800204a:	2b00      	cmp	r3, #0
 800204c:	d00f      	beq.n	800206e <ILI9341_WriteChar+0xa0>
                uint8_t data[] = { color >> 8, color & 0xFF };
 800204e:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8002050:	0a1b      	lsrs	r3, r3, #8
 8002052:	b29b      	uxth	r3, r3
 8002054:	b2db      	uxtb	r3, r3
 8002056:	763b      	strb	r3, [r7, #24]
 8002058:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 800205a:	b2db      	uxtb	r3, r3
 800205c:	767b      	strb	r3, [r7, #25]
                ILI9341_WriteBuffer(display, data, sizeof(data));
 800205e:	f107 0318 	add.w	r3, r7, #24
 8002062:	2202      	movs	r2, #2
 8002064:	4619      	mov	r1, r3
 8002066:	68f8      	ldr	r0, [r7, #12]
 8002068:	f7ff fbf8 	bl	800185c <ILI9341_WriteBuffer>
 800206c:	e00e      	b.n	800208c <ILI9341_WriteChar+0xbe>
            } else {
                uint8_t data[] = { bgcolor >> 8, bgcolor & 0xFF };
 800206e:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8002070:	0a1b      	lsrs	r3, r3, #8
 8002072:	b29b      	uxth	r3, r3
 8002074:	b2db      	uxtb	r3, r3
 8002076:	753b      	strb	r3, [r7, #20]
 8002078:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800207a:	b2db      	uxtb	r3, r3
 800207c:	757b      	strb	r3, [r7, #21]
                ILI9341_WriteBuffer(display, data, sizeof(data));
 800207e:	f107 0314 	add.w	r3, r7, #20
 8002082:	2202      	movs	r2, #2
 8002084:	4619      	mov	r1, r3
 8002086:	68f8      	ldr	r0, [r7, #12]
 8002088:	f7ff fbe8 	bl	800185c <ILI9341_WriteBuffer>
        for (j = 0; j < font.width; j++) {
 800208c:	6a3b      	ldr	r3, [r7, #32]
 800208e:	3301      	adds	r3, #1
 8002090:	623b      	str	r3, [r7, #32]
 8002092:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8002096:	461a      	mov	r2, r3
 8002098:	6a3b      	ldr	r3, [r7, #32]
 800209a:	4293      	cmp	r3, r2
 800209c:	d3cf      	bcc.n	800203e <ILI9341_WriteChar+0x70>
    for (i = 0; i < font.height; i++) {
 800209e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020a0:	3301      	adds	r3, #1
 80020a2:	627b      	str	r3, [r7, #36]	@ 0x24
 80020a4:	f897 3031 	ldrb.w	r3, [r7, #49]	@ 0x31
 80020a8:	461a      	mov	r2, r3
 80020aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020ac:	4293      	cmp	r3, r2
 80020ae:	d3b5      	bcc.n	800201c <ILI9341_WriteChar+0x4e>
            }
        }
    }
}
 80020b0:	bf00      	nop
 80020b2:	bf00      	nop
 80020b4:	3728      	adds	r7, #40	@ 0x28
 80020b6:	46bd      	mov	sp, r7
 80020b8:	bd80      	pop	{r7, pc}

080020ba <ILI9341_WriteString>:

void ILI9341_WriteString(ILI9341TypeDef *display, uint16_t x, uint16_t y, const char* str, FontDef font, uint16_t color, uint16_t bgcolor)
{
 80020ba:	b5b0      	push	{r4, r5, r7, lr}
 80020bc:	b088      	sub	sp, #32
 80020be:	af04      	add	r7, sp, #16
 80020c0:	60f8      	str	r0, [r7, #12]
 80020c2:	607b      	str	r3, [r7, #4]
 80020c4:	460b      	mov	r3, r1
 80020c6:	817b      	strh	r3, [r7, #10]
 80020c8:	4613      	mov	r3, r2
 80020ca:	813b      	strh	r3, [r7, #8]
	ILI9341_SELECT(display);
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	8a1b      	ldrh	r3, [r3, #16]
 80020d0:	461a      	mov	r2, r3
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	685b      	ldr	r3, [r3, #4]
 80020d6:	0412      	lsls	r2, r2, #16
 80020d8:	619a      	str	r2, [r3, #24]

    while (*str) {
 80020da:	e03b      	b.n	8002154 <ILI9341_WriteString+0x9a>
        if (x + font.width >= display->width) {
 80020dc:	897b      	ldrh	r3, [r7, #10]
 80020de:	f897 2020 	ldrb.w	r2, [r7, #32]
 80020e2:	4413      	add	r3, r2
 80020e4:	68fa      	ldr	r2, [r7, #12]
 80020e6:	8ad2      	ldrh	r2, [r2, #22]
 80020e8:	4293      	cmp	r3, r2
 80020ea:	db17      	blt.n	800211c <ILI9341_WriteString+0x62>
            x = 0;
 80020ec:	2300      	movs	r3, #0
 80020ee:	817b      	strh	r3, [r7, #10]
            y += font.height;
 80020f0:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 80020f4:	461a      	mov	r2, r3
 80020f6:	893b      	ldrh	r3, [r7, #8]
 80020f8:	4413      	add	r3, r2
 80020fa:	813b      	strh	r3, [r7, #8]

            if (y + font.height >= display->height)
 80020fc:	893b      	ldrh	r3, [r7, #8]
 80020fe:	f897 2021 	ldrb.w	r2, [r7, #33]	@ 0x21
 8002102:	4413      	add	r3, r2
 8002104:	68fa      	ldr	r2, [r7, #12]
 8002106:	8b12      	ldrh	r2, [r2, #24]
 8002108:	4293      	cmp	r3, r2
 800210a:	da28      	bge.n	800215e <ILI9341_WriteString+0xa4>
                break;

            if (*str == ' ') {
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	781b      	ldrb	r3, [r3, #0]
 8002110:	2b20      	cmp	r3, #32
 8002112:	d103      	bne.n	800211c <ILI9341_WriteString+0x62>
                // skip spaces in the beginning of the new line
                str++;
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	3301      	adds	r3, #1
 8002118:	607b      	str	r3, [r7, #4]
                continue;
 800211a:	e01b      	b.n	8002154 <ILI9341_WriteString+0x9a>
            }
        }

        ILI9341_WriteChar(display, x, y, *str, font, color, bgcolor);
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	781d      	ldrb	r5, [r3, #0]
 8002120:	893a      	ldrh	r2, [r7, #8]
 8002122:	897c      	ldrh	r4, [r7, #10]
 8002124:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8002126:	9303      	str	r3, [sp, #12]
 8002128:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800212a:	9302      	str	r3, [sp, #8]
 800212c:	466b      	mov	r3, sp
 800212e:	f107 0120 	add.w	r1, r7, #32
 8002132:	c903      	ldmia	r1, {r0, r1}
 8002134:	e883 0003 	stmia.w	r3, {r0, r1}
 8002138:	462b      	mov	r3, r5
 800213a:	4621      	mov	r1, r4
 800213c:	68f8      	ldr	r0, [r7, #12]
 800213e:	f7ff ff46 	bl	8001fce <ILI9341_WriteChar>
        x += font.width;
 8002142:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002146:	461a      	mov	r2, r3
 8002148:	897b      	ldrh	r3, [r7, #10]
 800214a:	4413      	add	r3, r2
 800214c:	817b      	strh	r3, [r7, #10]
        str++;
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	3301      	adds	r3, #1
 8002152:	607b      	str	r3, [r7, #4]
    while (*str) {
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	781b      	ldrb	r3, [r3, #0]
 8002158:	2b00      	cmp	r3, #0
 800215a:	d1bf      	bne.n	80020dc <ILI9341_WriteString+0x22>
 800215c:	e000      	b.n	8002160 <ILI9341_WriteString+0xa6>
                break;
 800215e:	bf00      	nop
    }

	ILI9341_UNSELECT(display);
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	8a1a      	ldrh	r2, [r3, #16]
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	685b      	ldr	r3, [r3, #4]
 8002168:	619a      	str	r2, [r3, #24]
}
 800216a:	bf00      	nop
 800216c:	3710      	adds	r7, #16
 800216e:	46bd      	mov	sp, r7
 8002170:	bdb0      	pop	{r4, r5, r7, pc}
	...

08002174 <HAL_I2S_RxCpltCallback>:
  * @brief  I2S 接收全滿回呼函式
  * @param  hi2s: I2S handle
  * @retval None
  */
void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8002174:	b580      	push	{r7, lr}
 8002176:	b082      	sub	sp, #8
 8002178:	af00      	add	r7, sp, #0
 800217a:	6078      	str	r0, [r7, #4]
  // DMA 已經填充完緩衝區的後半部分
  // 在這裡呼叫語音辨識函式，處理後半段的資料
  // speech_recognition_run(&i2s_rx_buffer[I2S_BUFFER_SIZE / 2], I2S_BUFFER_SIZE / 2);
  buffer_is_ready = 2; // 示意：設定旗標
 800217c:	4b1f      	ldr	r3, [pc, #124]	@ (80021fc <HAL_I2S_RxCpltCallback+0x88>)
 800217e:	2202      	movs	r2, #2
 8002180:	601a      	str	r2, [r3, #0]
	if(hi2s==&hi2s2){
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	4a1e      	ldr	r2, [pc, #120]	@ (8002200 <HAL_I2S_RxCpltCallback+0x8c>)
 8002186:	4293      	cmp	r3, r2
 8002188:	d133      	bne.n	80021f2 <HAL_I2S_RxCpltCallback+0x7e>
		cb_cnt++;//回调次数计数
 800218a:	4b1e      	ldr	r3, [pc, #120]	@ (8002204 <HAL_I2S_RxCpltCallback+0x90>)
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	3301      	adds	r3, #1
 8002190:	4a1c      	ldr	r2, [pc, #112]	@ (8002204 <HAL_I2S_RxCpltCallback+0x90>)
 8002192:	6013      	str	r3, [r2, #0]
		//将两个32整型合并为一个
		//dat32 example: 0000fffb 00004f00
		//printf("%x\r\n",data_i2s[0]<<8);
		//printf("%x\r\n",data_i2s[1]>>8);

		val24=(i2s_rx_buffer[0]<<8)+(i2s_rx_buffer[1]>>8);
 8002194:	4b1c      	ldr	r3, [pc, #112]	@ (8002208 <HAL_I2S_RxCpltCallback+0x94>)
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	021a      	lsls	r2, r3, #8
 800219a:	4b1b      	ldr	r3, [pc, #108]	@ (8002208 <HAL_I2S_RxCpltCallback+0x94>)
 800219c:	685b      	ldr	r3, [r3, #4]
 800219e:	0a1b      	lsrs	r3, r3, #8
 80021a0:	4413      	add	r3, r2
 80021a2:	4a1a      	ldr	r2, [pc, #104]	@ (800220c <HAL_I2S_RxCpltCallback+0x98>)
 80021a4:	6013      	str	r3, [r2, #0]
		//printf("%d\r\n",val24);
      //将24位有符号整型扩展到32位
		if(val24 & 0x800000)
 80021a6:	4b19      	ldr	r3, [pc, #100]	@ (800220c <HAL_I2S_RxCpltCallback+0x98>)
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d007      	beq.n	80021c2 <HAL_I2S_RxCpltCallback+0x4e>
		{//negative
			val32=0xff000000 | val24;
 80021b2:	4b16      	ldr	r3, [pc, #88]	@ (800220c <HAL_I2S_RxCpltCallback+0x98>)
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80021ba:	461a      	mov	r2, r3
 80021bc:	4b14      	ldr	r3, [pc, #80]	@ (8002210 <HAL_I2S_RxCpltCallback+0x9c>)
 80021be:	601a      	str	r2, [r3, #0]
 80021c0:	e004      	b.n	80021cc <HAL_I2S_RxCpltCallback+0x58>
		}
		else
		{//positive
			val32=val24;
 80021c2:	4b12      	ldr	r3, [pc, #72]	@ (800220c <HAL_I2S_RxCpltCallback+0x98>)
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	461a      	mov	r2, r3
 80021c8:	4b11      	ldr	r3, [pc, #68]	@ (8002210 <HAL_I2S_RxCpltCallback+0x9c>)
 80021ca:	601a      	str	r2, [r3, #0]
		}
		//以采样频率的十分之一，串口发送采样值
		if(cb_cnt%10==0)
 80021cc:	4b0d      	ldr	r3, [pc, #52]	@ (8002204 <HAL_I2S_RxCpltCallback+0x90>)
 80021ce:	6819      	ldr	r1, [r3, #0]
 80021d0:	4b10      	ldr	r3, [pc, #64]	@ (8002214 <HAL_I2S_RxCpltCallback+0xa0>)
 80021d2:	fba3 2301 	umull	r2, r3, r3, r1
 80021d6:	08da      	lsrs	r2, r3, #3
 80021d8:	4613      	mov	r3, r2
 80021da:	009b      	lsls	r3, r3, #2
 80021dc:	4413      	add	r3, r2
 80021de:	005b      	lsls	r3, r3, #1
 80021e0:	1aca      	subs	r2, r1, r3
 80021e2:	2a00      	cmp	r2, #0
 80021e4:	d105      	bne.n	80021f2 <HAL_I2S_RxCpltCallback+0x7e>
			printf("%d\r\n",val32);
 80021e6:	4b0a      	ldr	r3, [pc, #40]	@ (8002210 <HAL_I2S_RxCpltCallback+0x9c>)
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	4619      	mov	r1, r3
 80021ec:	480a      	ldr	r0, [pc, #40]	@ (8002218 <HAL_I2S_RxCpltCallback+0xa4>)
 80021ee:	f009 fcd9 	bl	800bba4 <iprintf>
	}
}
 80021f2:	bf00      	nop
 80021f4:	3708      	adds	r7, #8
 80021f6:	46bd      	mov	sp, r7
 80021f8:	bd80      	pop	{r7, pc}
 80021fa:	bf00      	nop
 80021fc:	2000d4c0 	.word	0x2000d4c0
 8002200:	2000d3c0 	.word	0x2000d3c0
 8002204:	2000d4c4 	.word	0x2000d4c4
 8002208:	2000d4b0 	.word	0x2000d4b0
 800220c:	2000d4c8 	.word	0x2000d4c8
 8002210:	2000d4cc 	.word	0x2000d4cc
 8002214:	cccccccd 	.word	0xcccccccd
 8002218:	0800f588 	.word	0x0800f588

0800221c <HAL_UART_RxCpltCallback>:
// --- AI 推論相關變數 ---
// 這個變數將連接 main.c 和 app_x-cube-ai.c
int score_from_uart = 0;

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800221c:	b580      	push	{r7, lr}
 800221e:	b082      	sub	sp, #8
 8002220:	af00      	add	r7, sp, #0
 8002222:	6078      	str	r0, [r7, #4]
  // 確保是我們想要的 UART (例如 USART2) 觸發的中斷
  if (huart->Instance == USART6)
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	4a1b      	ldr	r2, [pc, #108]	@ (8002298 <HAL_UART_RxCpltCallback+0x7c>)
 800222a:	4293      	cmp	r3, r2
 800222c:	d130      	bne.n	8002290 <HAL_UART_RxCpltCallback+0x74>
  {
    // 檢查是否是換行符 (Enter 鍵)，或者緩衝區是否已滿
    if (rx_byte == '\r' || rx_byte == '\n' || uart_rx_index >= (UART_RX_BUFFER_SIZE - 1))
 800222e:	4b1b      	ldr	r3, [pc, #108]	@ (800229c <HAL_UART_RxCpltCallback+0x80>)
 8002230:	781b      	ldrb	r3, [r3, #0]
 8002232:	2b0d      	cmp	r3, #13
 8002234:	d008      	beq.n	8002248 <HAL_UART_RxCpltCallback+0x2c>
 8002236:	4b19      	ldr	r3, [pc, #100]	@ (800229c <HAL_UART_RxCpltCallback+0x80>)
 8002238:	781b      	ldrb	r3, [r3, #0]
 800223a:	2b0a      	cmp	r3, #10
 800223c:	d004      	beq.n	8002248 <HAL_UART_RxCpltCallback+0x2c>
 800223e:	4b18      	ldr	r3, [pc, #96]	@ (80022a0 <HAL_UART_RxCpltCallback+0x84>)
 8002240:	781b      	ldrb	r3, [r3, #0]
 8002242:	b2db      	uxtb	r3, r3
 8002244:	2b08      	cmp	r3, #8
 8002246:	d912      	bls.n	800226e <HAL_UART_RxCpltCallback+0x52>
    {
      // 1. 在字串末尾加上結束符 '\0'
      uart_rx_buffer[uart_rx_index] = '\0';
 8002248:	4b15      	ldr	r3, [pc, #84]	@ (80022a0 <HAL_UART_RxCpltCallback+0x84>)
 800224a:	781b      	ldrb	r3, [r3, #0]
 800224c:	b2db      	uxtb	r3, r3
 800224e:	461a      	mov	r2, r3
 8002250:	4b14      	ldr	r3, [pc, #80]	@ (80022a4 <HAL_UART_RxCpltCallback+0x88>)
 8002252:	2100      	movs	r1, #0
 8002254:	5499      	strb	r1, [r3, r2]

      // 2. 設定新數據旗標，通知主迴圈處理
      if (uart_rx_index > 0) // 確保不是空指令
 8002256:	4b12      	ldr	r3, [pc, #72]	@ (80022a0 <HAL_UART_RxCpltCallback+0x84>)
 8002258:	781b      	ldrb	r3, [r3, #0]
 800225a:	b2db      	uxtb	r3, r3
 800225c:	2b00      	cmp	r3, #0
 800225e:	d002      	beq.n	8002266 <HAL_UART_RxCpltCallback+0x4a>
      {
        new_data_received = true;
 8002260:	4b11      	ldr	r3, [pc, #68]	@ (80022a8 <HAL_UART_RxCpltCallback+0x8c>)
 8002262:	2201      	movs	r2, #1
 8002264:	701a      	strb	r2, [r3, #0]
      }

      // 3. 重置索引，準備下一次接收
      uart_rx_index = 0;
 8002266:	4b0e      	ldr	r3, [pc, #56]	@ (80022a0 <HAL_UART_RxCpltCallback+0x84>)
 8002268:	2200      	movs	r2, #0
 800226a:	701a      	strb	r2, [r3, #0]
 800226c:	e00b      	b.n	8002286 <HAL_UART_RxCpltCallback+0x6a>
    }
    else
    {
      // 將收到的位元組存入緩衝區，並移動索引
      uart_rx_buffer[uart_rx_index++] = rx_byte;
 800226e:	4b0c      	ldr	r3, [pc, #48]	@ (80022a0 <HAL_UART_RxCpltCallback+0x84>)
 8002270:	781b      	ldrb	r3, [r3, #0]
 8002272:	b2db      	uxtb	r3, r3
 8002274:	1c5a      	adds	r2, r3, #1
 8002276:	b2d1      	uxtb	r1, r2
 8002278:	4a09      	ldr	r2, [pc, #36]	@ (80022a0 <HAL_UART_RxCpltCallback+0x84>)
 800227a:	7011      	strb	r1, [r2, #0]
 800227c:	461a      	mov	r2, r3
 800227e:	4b07      	ldr	r3, [pc, #28]	@ (800229c <HAL_UART_RxCpltCallback+0x80>)
 8002280:	7819      	ldrb	r1, [r3, #0]
 8002282:	4b08      	ldr	r3, [pc, #32]	@ (80022a4 <HAL_UART_RxCpltCallback+0x88>)
 8002284:	5499      	strb	r1, [r3, r2]
    }

    // !!! 非常重要：重新啟動 UART 中斷接收，準備接收下一個位元組 !!!
    HAL_UART_Receive_IT(&huart6, &rx_byte, 1);
 8002286:	2201      	movs	r2, #1
 8002288:	4904      	ldr	r1, [pc, #16]	@ (800229c <HAL_UART_RxCpltCallback+0x80>)
 800228a:	4808      	ldr	r0, [pc, #32]	@ (80022ac <HAL_UART_RxCpltCallback+0x90>)
 800228c:	f007 fd0f 	bl	8009cae <HAL_UART_Receive_IT>
  }
}
 8002290:	bf00      	nop
 8002292:	3708      	adds	r7, #8
 8002294:	46bd      	mov	sp, r7
 8002296:	bd80      	pop	{r7, pc}
 8002298:	40011400 	.word	0x40011400
 800229c:	2000d4da 	.word	0x2000d4da
 80022a0:	2000d4db 	.word	0x2000d4db
 80022a4:	2000d4d0 	.word	0x2000d4d0
 80022a8:	2000d4dc 	.word	0x2000d4dc
 80022ac:	2000efa0 	.word	0x2000efa0

080022b0 <HAL_TIM_PeriodElapsedCallback>:


uint16_t txData;
int txIndex;
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80022b0:	b580      	push	{r7, lr}
 80022b2:	b082      	sub	sp, #8
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	6078      	str	r0, [r7, #4]
  if(htim->Instance == TIM2)
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80022c0:	d125      	bne.n	800230e <HAL_TIM_PeriodElapsedCallback+0x5e>
  {
    txData = ((uint16_t)helloworld[txIndex+1] << 8) | helloworld[txIndex];
 80022c2:	4b1e      	ldr	r3, [pc, #120]	@ (800233c <HAL_TIM_PeriodElapsedCallback+0x8c>)
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	3301      	adds	r3, #1
 80022c8:	4a1d      	ldr	r2, [pc, #116]	@ (8002340 <HAL_TIM_PeriodElapsedCallback+0x90>)
 80022ca:	5cd3      	ldrb	r3, [r2, r3]
 80022cc:	b21b      	sxth	r3, r3
 80022ce:	021b      	lsls	r3, r3, #8
 80022d0:	b21a      	sxth	r2, r3
 80022d2:	4b1a      	ldr	r3, [pc, #104]	@ (800233c <HAL_TIM_PeriodElapsedCallback+0x8c>)
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	491a      	ldr	r1, [pc, #104]	@ (8002340 <HAL_TIM_PeriodElapsedCallback+0x90>)
 80022d8:	5ccb      	ldrb	r3, [r1, r3]
 80022da:	b21b      	sxth	r3, r3
 80022dc:	4313      	orrs	r3, r2
 80022de:	b21b      	sxth	r3, r3
 80022e0:	b29a      	uxth	r2, r3
 80022e2:	4b18      	ldr	r3, [pc, #96]	@ (8002344 <HAL_TIM_PeriodElapsedCallback+0x94>)
 80022e4:	801a      	strh	r2, [r3, #0]
    txIndex = txIndex + 2;
 80022e6:	4b15      	ldr	r3, [pc, #84]	@ (800233c <HAL_TIM_PeriodElapsedCallback+0x8c>)
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	3302      	adds	r3, #2
 80022ec:	4a13      	ldr	r2, [pc, #76]	@ (800233c <HAL_TIM_PeriodElapsedCallback+0x8c>)
 80022ee:	6013      	str	r3, [r2, #0]
    if(txIndex>53456) txIndex = 0;
 80022f0:	4b12      	ldr	r3, [pc, #72]	@ (800233c <HAL_TIM_PeriodElapsedCallback+0x8c>)
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	f24d 02d0 	movw	r2, #53456	@ 0xd0d0
 80022f8:	4293      	cmp	r3, r2
 80022fa:	dd02      	ble.n	8002302 <HAL_TIM_PeriodElapsedCallback+0x52>
 80022fc:	4b0f      	ldr	r3, [pc, #60]	@ (800233c <HAL_TIM_PeriodElapsedCallback+0x8c>)
 80022fe:	2200      	movs	r2, #0
 8002300:	601a      	str	r2, [r3, #0]
    HAL_I2S_Transmit(&hi2s3, &txData, 1, 10);
 8002302:	230a      	movs	r3, #10
 8002304:	2201      	movs	r2, #1
 8002306:	490f      	ldr	r1, [pc, #60]	@ (8002344 <HAL_TIM_PeriodElapsedCallback+0x94>)
 8002308:	480f      	ldr	r0, [pc, #60]	@ (8002348 <HAL_TIM_PeriodElapsedCallback+0x98>)
 800230a:	f004 fe0d 	bl	8006f28 <HAL_I2S_Transmit>
  }

	if(htim->Instance == TIM10)
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	4a0e      	ldr	r2, [pc, #56]	@ (800234c <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8002314:	4293      	cmp	r3, r2
 8002316:	d10c      	bne.n	8002332 <HAL_TIM_PeriodElapsedCallback+0x82>
	{
		if (adc_available) {
 8002318:	4b0d      	ldr	r3, [pc, #52]	@ (8002350 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 800231a:	781b      	ldrb	r3, [r3, #0]
 800231c:	b2db      	uxtb	r3, r3
 800231e:	2b00      	cmp	r3, #0
 8002320:	d007      	beq.n	8002332 <HAL_TIM_PeriodElapsedCallback+0x82>
			adc_available = 0;
 8002322:	4b0b      	ldr	r3, [pc, #44]	@ (8002350 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8002324:	2200      	movs	r2, #0
 8002326:	701a      	strb	r2, [r3, #0]
			HAL_ADC_Start_DMA(&hadc1, (uint32_t*)&adc_data, 2);
 8002328:	2202      	movs	r2, #2
 800232a:	490a      	ldr	r1, [pc, #40]	@ (8002354 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 800232c:	480a      	ldr	r0, [pc, #40]	@ (8002358 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 800232e:	f003 f99f 	bl	8005670 <HAL_ADC_Start_DMA>
		}
	}
}
 8002332:	bf00      	nop
 8002334:	3708      	adds	r7, #8
 8002336:	46bd      	mov	sp, r7
 8002338:	bd80      	pop	{r7, pc}
 800233a:	bf00      	nop
 800233c:	2000ed38 	.word	0x2000ed38
 8002340:	20000010 	.word	0x20000010
 8002344:	2000ed34 	.word	0x2000ed34
 8002348:	2000d408 	.word	0x2000d408
 800234c:	40014400 	.word	0x40014400
 8002350:	2000d0e1 	.word	0x2000d0e1
 8002354:	2000d4fc 	.word	0x2000d4fc
 8002358:	2000d310 	.word	0x2000d310

0800235c <HAL_ADC_ConvCpltCallback>:


void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800235c:	b580      	push	{r7, lr}
 800235e:	b084      	sub	sp, #16
 8002360:	af00      	add	r7, sp, #0
 8002362:	6078      	str	r0, [r7, #4]
    if(hadc->Instance == ADC1)
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	4a95      	ldr	r2, [pc, #596]	@ (80025c0 <HAL_ADC_ConvCpltCallback+0x264>)
 800236a:	4293      	cmp	r3, r2
 800236c:	f040 81cd 	bne.w	800270a <HAL_ADC_ConvCpltCallback+0x3ae>
    {
    	if (adc_reset_cyccnt) {
 8002370:	4b94      	ldr	r3, [pc, #592]	@ (80025c4 <HAL_ADC_ConvCpltCallback+0x268>)
 8002372:	781b      	ldrb	r3, [r3, #0]
 8002374:	b2db      	uxtb	r3, r3
 8002376:	2b00      	cmp	r3, #0
 8002378:	d00b      	beq.n	8002392 <HAL_ADC_ConvCpltCallback+0x36>
    		DWT->CYCCNT = 0U;
 800237a:	4b93      	ldr	r3, [pc, #588]	@ (80025c8 <HAL_ADC_ConvCpltCallback+0x26c>)
 800237c:	2200      	movs	r2, #0
 800237e:	605a      	str	r2, [r3, #4]
    		adc0_time_delta = 0;
 8002380:	4b92      	ldr	r3, [pc, #584]	@ (80025cc <HAL_ADC_ConvCpltCallback+0x270>)
 8002382:	2200      	movs	r2, #0
 8002384:	601a      	str	r2, [r3, #0]
    		adc1_time_delta = 0;
 8002386:	4b92      	ldr	r3, [pc, #584]	@ (80025d0 <HAL_ADC_ConvCpltCallback+0x274>)
 8002388:	2200      	movs	r2, #0
 800238a:	601a      	str	r2, [r3, #0]
    		adc_reset_cyccnt = 0;
 800238c:	4b8d      	ldr	r3, [pc, #564]	@ (80025c4 <HAL_ADC_ConvCpltCallback+0x268>)
 800238e:	2200      	movs	r2, #0
 8002390:	701a      	strb	r2, [r3, #0]
    	}

    	if (!adc0_filled) {
 8002392:	4b90      	ldr	r3, [pc, #576]	@ (80025d4 <HAL_ADC_ConvCpltCallback+0x278>)
 8002394:	781b      	ldrb	r3, [r3, #0]
 8002396:	b2db      	uxtb	r3, r3
 8002398:	2b00      	cmp	r3, #0
 800239a:	f040 80b0 	bne.w	80024fe <HAL_ADC_ConvCpltCallback+0x1a2>
			adc0_time[adc0_length] = (DWT->CYCCNT - adc0_time_delta) / (SystemCoreClock / 1000000);
 800239e:	4b8a      	ldr	r3, [pc, #552]	@ (80025c8 <HAL_ADC_ConvCpltCallback+0x26c>)
 80023a0:	685a      	ldr	r2, [r3, #4]
 80023a2:	4b8a      	ldr	r3, [pc, #552]	@ (80025cc <HAL_ADC_ConvCpltCallback+0x270>)
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	1ad1      	subs	r1, r2, r3
 80023a8:	4b8b      	ldr	r3, [pc, #556]	@ (80025d8 <HAL_ADC_ConvCpltCallback+0x27c>)
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	4a8b      	ldr	r2, [pc, #556]	@ (80025dc <HAL_ADC_ConvCpltCallback+0x280>)
 80023ae:	fba2 2303 	umull	r2, r3, r2, r3
 80023b2:	0c9a      	lsrs	r2, r3, #18
 80023b4:	4b8a      	ldr	r3, [pc, #552]	@ (80025e0 <HAL_ADC_ConvCpltCallback+0x284>)
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	fbb1 f2f2 	udiv	r2, r1, r2
 80023bc:	4989      	ldr	r1, [pc, #548]	@ (80025e4 <HAL_ADC_ConvCpltCallback+0x288>)
 80023be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			adc0[adc0_length] = adc_data[0] * ADC_CHANNEL0_SCALE;
 80023c2:	4b89      	ldr	r3, [pc, #548]	@ (80025e8 <HAL_ADC_ConvCpltCallback+0x28c>)
 80023c4:	881b      	ldrh	r3, [r3, #0]
 80023c6:	b299      	uxth	r1, r3
 80023c8:	4b85      	ldr	r3, [pc, #532]	@ (80025e0 <HAL_ADC_ConvCpltCallback+0x284>)
 80023ca:	681a      	ldr	r2, [r3, #0]
 80023cc:	460b      	mov	r3, r1
 80023ce:	4619      	mov	r1, r3
 80023d0:	0089      	lsls	r1, r1, #2
 80023d2:	4419      	add	r1, r3
 80023d4:	0049      	lsls	r1, r1, #1
 80023d6:	440b      	add	r3, r1
 80023d8:	b299      	uxth	r1, r3
 80023da:	4b84      	ldr	r3, [pc, #528]	@ (80025ec <HAL_ADC_ConvCpltCallback+0x290>)
 80023dc:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]

			if (adc_max[0] < adc0[adc0_length])
 80023e0:	4b83      	ldr	r3, [pc, #524]	@ (80025f0 <HAL_ADC_ConvCpltCallback+0x294>)
 80023e2:	881b      	ldrh	r3, [r3, #0]
 80023e4:	b29a      	uxth	r2, r3
 80023e6:	4b7e      	ldr	r3, [pc, #504]	@ (80025e0 <HAL_ADC_ConvCpltCallback+0x284>)
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	4980      	ldr	r1, [pc, #512]	@ (80025ec <HAL_ADC_ConvCpltCallback+0x290>)
 80023ec:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80023f0:	429a      	cmp	r2, r3
 80023f2:	d206      	bcs.n	8002402 <HAL_ADC_ConvCpltCallback+0xa6>
				adc_max[0] = adc0[adc0_length];
 80023f4:	4b7a      	ldr	r3, [pc, #488]	@ (80025e0 <HAL_ADC_ConvCpltCallback+0x284>)
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	4a7c      	ldr	r2, [pc, #496]	@ (80025ec <HAL_ADC_ConvCpltCallback+0x290>)
 80023fa:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 80023fe:	4b7c      	ldr	r3, [pc, #496]	@ (80025f0 <HAL_ADC_ConvCpltCallback+0x294>)
 8002400:	801a      	strh	r2, [r3, #0]

			if (adc_min[0] > adc0[adc0_length])
 8002402:	4b7c      	ldr	r3, [pc, #496]	@ (80025f4 <HAL_ADC_ConvCpltCallback+0x298>)
 8002404:	881b      	ldrh	r3, [r3, #0]
 8002406:	b29a      	uxth	r2, r3
 8002408:	4b75      	ldr	r3, [pc, #468]	@ (80025e0 <HAL_ADC_ConvCpltCallback+0x284>)
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	4977      	ldr	r1, [pc, #476]	@ (80025ec <HAL_ADC_ConvCpltCallback+0x290>)
 800240e:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8002412:	429a      	cmp	r2, r3
 8002414:	d906      	bls.n	8002424 <HAL_ADC_ConvCpltCallback+0xc8>
				adc_min[0] = adc0[adc0_length];
 8002416:	4b72      	ldr	r3, [pc, #456]	@ (80025e0 <HAL_ADC_ConvCpltCallback+0x284>)
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	4a74      	ldr	r2, [pc, #464]	@ (80025ec <HAL_ADC_ConvCpltCallback+0x290>)
 800241c:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8002420:	4b74      	ldr	r3, [pc, #464]	@ (80025f4 <HAL_ADC_ConvCpltCallback+0x298>)
 8002422:	801a      	strh	r2, [r3, #0]

			if (adc0_length < (ADC_BUFFER_SIZE - 1)) {
 8002424:	4b6e      	ldr	r3, [pc, #440]	@ (80025e0 <HAL_ADC_ConvCpltCallback+0x284>)
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	f5b3 7fff 	cmp.w	r3, #510	@ 0x1fe
 800242c:	d864      	bhi.n	80024f8 <HAL_ADC_ConvCpltCallback+0x19c>

				uint8_t trigger = 0;
 800242e:	2300      	movs	r3, #0
 8002430:	73fb      	strb	r3, [r7, #15]

				if (trigger_mode == 0)
 8002432:	4b71      	ldr	r3, [pc, #452]	@ (80025f8 <HAL_ADC_ConvCpltCallback+0x29c>)
 8002434:	781b      	ldrb	r3, [r3, #0]
 8002436:	2b00      	cmp	r3, #0
 8002438:	d114      	bne.n	8002464 <HAL_ADC_ConvCpltCallback+0x108>
					trigger = (adc0_prev < trigger0_value && adc0[adc0_length] > trigger0_value);
 800243a:	4b70      	ldr	r3, [pc, #448]	@ (80025fc <HAL_ADC_ConvCpltCallback+0x2a0>)
 800243c:	881b      	ldrh	r3, [r3, #0]
 800243e:	b29a      	uxth	r2, r3
 8002440:	4b6f      	ldr	r3, [pc, #444]	@ (8002600 <HAL_ADC_ConvCpltCallback+0x2a4>)
 8002442:	881b      	ldrh	r3, [r3, #0]
 8002444:	429a      	cmp	r2, r3
 8002446:	d20a      	bcs.n	800245e <HAL_ADC_ConvCpltCallback+0x102>
 8002448:	4b65      	ldr	r3, [pc, #404]	@ (80025e0 <HAL_ADC_ConvCpltCallback+0x284>)
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	4a67      	ldr	r2, [pc, #412]	@ (80025ec <HAL_ADC_ConvCpltCallback+0x290>)
 800244e:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8002452:	4b6b      	ldr	r3, [pc, #428]	@ (8002600 <HAL_ADC_ConvCpltCallback+0x2a4>)
 8002454:	881b      	ldrh	r3, [r3, #0]
 8002456:	429a      	cmp	r2, r3
 8002458:	d901      	bls.n	800245e <HAL_ADC_ConvCpltCallback+0x102>
 800245a:	2301      	movs	r3, #1
 800245c:	e000      	b.n	8002460 <HAL_ADC_ConvCpltCallback+0x104>
 800245e:	2300      	movs	r3, #0
 8002460:	73fb      	strb	r3, [r7, #15]
 8002462:	e013      	b.n	800248c <HAL_ADC_ConvCpltCallback+0x130>
				else
					trigger = (adc0_prev > trigger0_value && adc0[adc0_length] < trigger0_value);
 8002464:	4b65      	ldr	r3, [pc, #404]	@ (80025fc <HAL_ADC_ConvCpltCallback+0x2a0>)
 8002466:	881b      	ldrh	r3, [r3, #0]
 8002468:	b29a      	uxth	r2, r3
 800246a:	4b65      	ldr	r3, [pc, #404]	@ (8002600 <HAL_ADC_ConvCpltCallback+0x2a4>)
 800246c:	881b      	ldrh	r3, [r3, #0]
 800246e:	429a      	cmp	r2, r3
 8002470:	d90a      	bls.n	8002488 <HAL_ADC_ConvCpltCallback+0x12c>
 8002472:	4b5b      	ldr	r3, [pc, #364]	@ (80025e0 <HAL_ADC_ConvCpltCallback+0x284>)
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	4a5d      	ldr	r2, [pc, #372]	@ (80025ec <HAL_ADC_ConvCpltCallback+0x290>)
 8002478:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 800247c:	4b60      	ldr	r3, [pc, #384]	@ (8002600 <HAL_ADC_ConvCpltCallback+0x2a4>)
 800247e:	881b      	ldrh	r3, [r3, #0]
 8002480:	429a      	cmp	r2, r3
 8002482:	d201      	bcs.n	8002488 <HAL_ADC_ConvCpltCallback+0x12c>
 8002484:	2301      	movs	r3, #1
 8002486:	e000      	b.n	800248a <HAL_ADC_ConvCpltCallback+0x12e>
 8002488:	2300      	movs	r3, #0
 800248a:	73fb      	strb	r3, [r7, #15]

				if (trigger && adc0_length != 0) {
 800248c:	7bfb      	ldrb	r3, [r7, #15]
 800248e:	2b00      	cmp	r3, #0
 8002490:	d021      	beq.n	80024d6 <HAL_ADC_ConvCpltCallback+0x17a>
 8002492:	4b53      	ldr	r3, [pc, #332]	@ (80025e0 <HAL_ADC_ConvCpltCallback+0x284>)
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	2b00      	cmp	r3, #0
 8002498:	d01d      	beq.n	80024d6 <HAL_ADC_ConvCpltCallback+0x17a>
					if (!event_trigger0_detected) {
 800249a:	4b5a      	ldr	r3, [pc, #360]	@ (8002604 <HAL_ADC_ConvCpltCallback+0x2a8>)
 800249c:	781b      	ldrb	r3, [r3, #0]
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d10a      	bne.n	80024b8 <HAL_ADC_ConvCpltCallback+0x15c>
						adc0_length = 0;
 80024a2:	4b4f      	ldr	r3, [pc, #316]	@ (80025e0 <HAL_ADC_ConvCpltCallback+0x284>)
 80024a4:	2200      	movs	r2, #0
 80024a6:	601a      	str	r2, [r3, #0]
						adc0_time_delta = DWT->CYCCNT;
 80024a8:	4b47      	ldr	r3, [pc, #284]	@ (80025c8 <HAL_ADC_ConvCpltCallback+0x26c>)
 80024aa:	685b      	ldr	r3, [r3, #4]
 80024ac:	4a47      	ldr	r2, [pc, #284]	@ (80025cc <HAL_ADC_ConvCpltCallback+0x270>)
 80024ae:	6013      	str	r3, [r2, #0]
						event_trigger0_detected = 1;
 80024b0:	4b54      	ldr	r3, [pc, #336]	@ (8002604 <HAL_ADC_ConvCpltCallback+0x2a8>)
 80024b2:	2201      	movs	r2, #1
 80024b4:	701a      	strb	r2, [r3, #0]
 80024b6:	e00e      	b.n	80024d6 <HAL_ADC_ConvCpltCallback+0x17a>
					} else if (!adc_period0_detected) {
 80024b8:	4b53      	ldr	r3, [pc, #332]	@ (8002608 <HAL_ADC_ConvCpltCallback+0x2ac>)
 80024ba:	781b      	ldrb	r3, [r3, #0]
 80024bc:	b2db      	uxtb	r3, r3
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d109      	bne.n	80024d6 <HAL_ADC_ConvCpltCallback+0x17a>
						adc_period[0] = adc0_time[adc0_length];
 80024c2:	4b47      	ldr	r3, [pc, #284]	@ (80025e0 <HAL_ADC_ConvCpltCallback+0x284>)
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	4a47      	ldr	r2, [pc, #284]	@ (80025e4 <HAL_ADC_ConvCpltCallback+0x288>)
 80024c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80024cc:	4a4f      	ldr	r2, [pc, #316]	@ (800260c <HAL_ADC_ConvCpltCallback+0x2b0>)
 80024ce:	6013      	str	r3, [r2, #0]
						adc_period0_detected = 1;
 80024d0:	4b4d      	ldr	r3, [pc, #308]	@ (8002608 <HAL_ADC_ConvCpltCallback+0x2ac>)
 80024d2:	2201      	movs	r2, #1
 80024d4:	701a      	strb	r2, [r3, #0]
					}
				}

				adc0_prev = adc_data[0] * ADC_CHANNEL0_SCALE;
 80024d6:	4b44      	ldr	r3, [pc, #272]	@ (80025e8 <HAL_ADC_ConvCpltCallback+0x28c>)
 80024d8:	881b      	ldrh	r3, [r3, #0]
 80024da:	b29b      	uxth	r3, r3
 80024dc:	461a      	mov	r2, r3
 80024de:	0092      	lsls	r2, r2, #2
 80024e0:	441a      	add	r2, r3
 80024e2:	0052      	lsls	r2, r2, #1
 80024e4:	4413      	add	r3, r2
 80024e6:	b29a      	uxth	r2, r3
 80024e8:	4b44      	ldr	r3, [pc, #272]	@ (80025fc <HAL_ADC_ConvCpltCallback+0x2a0>)
 80024ea:	801a      	strh	r2, [r3, #0]
				adc0_length++;
 80024ec:	4b3c      	ldr	r3, [pc, #240]	@ (80025e0 <HAL_ADC_ConvCpltCallback+0x284>)
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	3301      	adds	r3, #1
 80024f2:	4a3b      	ldr	r2, [pc, #236]	@ (80025e0 <HAL_ADC_ConvCpltCallback+0x284>)
 80024f4:	6013      	str	r3, [r2, #0]
 80024f6:	e002      	b.n	80024fe <HAL_ADC_ConvCpltCallback+0x1a2>

			} else
				adc0_filled = 1;
 80024f8:	4b36      	ldr	r3, [pc, #216]	@ (80025d4 <HAL_ADC_ConvCpltCallback+0x278>)
 80024fa:	2201      	movs	r2, #1
 80024fc:	701a      	strb	r2, [r3, #0]
    	}

    	if (!adc1_filled) {
 80024fe:	4b44      	ldr	r3, [pc, #272]	@ (8002610 <HAL_ADC_ConvCpltCallback+0x2b4>)
 8002500:	781b      	ldrb	r3, [r3, #0]
 8002502:	b2db      	uxtb	r3, r3
 8002504:	2b00      	cmp	r3, #0
 8002506:	f040 80d9 	bne.w	80026bc <HAL_ADC_ConvCpltCallback+0x360>
			adc1_time[adc1_length] = (DWT->CYCCNT - adc1_time_delta) / (SystemCoreClock / 1000000);
 800250a:	4b2f      	ldr	r3, [pc, #188]	@ (80025c8 <HAL_ADC_ConvCpltCallback+0x26c>)
 800250c:	685a      	ldr	r2, [r3, #4]
 800250e:	4b30      	ldr	r3, [pc, #192]	@ (80025d0 <HAL_ADC_ConvCpltCallback+0x274>)
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	1ad1      	subs	r1, r2, r3
 8002514:	4b30      	ldr	r3, [pc, #192]	@ (80025d8 <HAL_ADC_ConvCpltCallback+0x27c>)
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	4a30      	ldr	r2, [pc, #192]	@ (80025dc <HAL_ADC_ConvCpltCallback+0x280>)
 800251a:	fba2 2303 	umull	r2, r3, r2, r3
 800251e:	0c9a      	lsrs	r2, r3, #18
 8002520:	4b3c      	ldr	r3, [pc, #240]	@ (8002614 <HAL_ADC_ConvCpltCallback+0x2b8>)
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	fbb1 f2f2 	udiv	r2, r1, r2
 8002528:	493b      	ldr	r1, [pc, #236]	@ (8002618 <HAL_ADC_ConvCpltCallback+0x2bc>)
 800252a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			adc1[adc1_length] = adc_data[1] * ADC_CHANNEL1_SCALE;
 800252e:	4b39      	ldr	r3, [pc, #228]	@ (8002614 <HAL_ADC_ConvCpltCallback+0x2b8>)
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	4a2d      	ldr	r2, [pc, #180]	@ (80025e8 <HAL_ADC_ConvCpltCallback+0x28c>)
 8002534:	8852      	ldrh	r2, [r2, #2]
 8002536:	b291      	uxth	r1, r2
 8002538:	4a38      	ldr	r2, [pc, #224]	@ (800261c <HAL_ADC_ConvCpltCallback+0x2c0>)
 800253a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

			if (adc_max[1] < adc1[adc1_length])
 800253e:	4b2c      	ldr	r3, [pc, #176]	@ (80025f0 <HAL_ADC_ConvCpltCallback+0x294>)
 8002540:	885b      	ldrh	r3, [r3, #2]
 8002542:	b29a      	uxth	r2, r3
 8002544:	4b33      	ldr	r3, [pc, #204]	@ (8002614 <HAL_ADC_ConvCpltCallback+0x2b8>)
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	4934      	ldr	r1, [pc, #208]	@ (800261c <HAL_ADC_ConvCpltCallback+0x2c0>)
 800254a:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800254e:	429a      	cmp	r2, r3
 8002550:	d206      	bcs.n	8002560 <HAL_ADC_ConvCpltCallback+0x204>
				adc_max[1] = adc1[adc1_length];
 8002552:	4b30      	ldr	r3, [pc, #192]	@ (8002614 <HAL_ADC_ConvCpltCallback+0x2b8>)
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	4a31      	ldr	r2, [pc, #196]	@ (800261c <HAL_ADC_ConvCpltCallback+0x2c0>)
 8002558:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 800255c:	4b24      	ldr	r3, [pc, #144]	@ (80025f0 <HAL_ADC_ConvCpltCallback+0x294>)
 800255e:	805a      	strh	r2, [r3, #2]

			if (adc_min[1] > adc1[adc1_length])
 8002560:	4b24      	ldr	r3, [pc, #144]	@ (80025f4 <HAL_ADC_ConvCpltCallback+0x298>)
 8002562:	885b      	ldrh	r3, [r3, #2]
 8002564:	b29a      	uxth	r2, r3
 8002566:	4b2b      	ldr	r3, [pc, #172]	@ (8002614 <HAL_ADC_ConvCpltCallback+0x2b8>)
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	492c      	ldr	r1, [pc, #176]	@ (800261c <HAL_ADC_ConvCpltCallback+0x2c0>)
 800256c:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8002570:	429a      	cmp	r2, r3
 8002572:	d906      	bls.n	8002582 <HAL_ADC_ConvCpltCallback+0x226>
				adc_min[1] = adc1[adc1_length];
 8002574:	4b27      	ldr	r3, [pc, #156]	@ (8002614 <HAL_ADC_ConvCpltCallback+0x2b8>)
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	4a28      	ldr	r2, [pc, #160]	@ (800261c <HAL_ADC_ConvCpltCallback+0x2c0>)
 800257a:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 800257e:	4b1d      	ldr	r3, [pc, #116]	@ (80025f4 <HAL_ADC_ConvCpltCallback+0x298>)
 8002580:	805a      	strh	r2, [r3, #2]

			if (adc1_length < (ADC_BUFFER_SIZE - 1)) {
 8002582:	4b24      	ldr	r3, [pc, #144]	@ (8002614 <HAL_ADC_ConvCpltCallback+0x2b8>)
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f5b3 7fff 	cmp.w	r3, #510	@ 0x1fe
 800258a:	f200 8094 	bhi.w	80026b6 <HAL_ADC_ConvCpltCallback+0x35a>

				uint8_t trigger = 0;
 800258e:	2300      	movs	r3, #0
 8002590:	73bb      	strb	r3, [r7, #14]

				if (trigger_mode == 0)
 8002592:	4b19      	ldr	r3, [pc, #100]	@ (80025f8 <HAL_ADC_ConvCpltCallback+0x29c>)
 8002594:	781b      	ldrb	r3, [r3, #0]
 8002596:	2b00      	cmp	r3, #0
 8002598:	d149      	bne.n	800262e <HAL_ADC_ConvCpltCallback+0x2d2>
					trigger = (adc1_prev < trigger1_value && adc1[adc1_length] > trigger1_value);
 800259a:	4b21      	ldr	r3, [pc, #132]	@ (8002620 <HAL_ADC_ConvCpltCallback+0x2c4>)
 800259c:	881b      	ldrh	r3, [r3, #0]
 800259e:	b29a      	uxth	r2, r3
 80025a0:	4b20      	ldr	r3, [pc, #128]	@ (8002624 <HAL_ADC_ConvCpltCallback+0x2c8>)
 80025a2:	881b      	ldrh	r3, [r3, #0]
 80025a4:	429a      	cmp	r2, r3
 80025a6:	d23f      	bcs.n	8002628 <HAL_ADC_ConvCpltCallback+0x2cc>
 80025a8:	4b1a      	ldr	r3, [pc, #104]	@ (8002614 <HAL_ADC_ConvCpltCallback+0x2b8>)
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	4a1b      	ldr	r2, [pc, #108]	@ (800261c <HAL_ADC_ConvCpltCallback+0x2c0>)
 80025ae:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 80025b2:	4b1c      	ldr	r3, [pc, #112]	@ (8002624 <HAL_ADC_ConvCpltCallback+0x2c8>)
 80025b4:	881b      	ldrh	r3, [r3, #0]
 80025b6:	429a      	cmp	r2, r3
 80025b8:	d936      	bls.n	8002628 <HAL_ADC_ConvCpltCallback+0x2cc>
 80025ba:	2301      	movs	r3, #1
 80025bc:	e035      	b.n	800262a <HAL_ADC_ConvCpltCallback+0x2ce>
 80025be:	bf00      	nop
 80025c0:	40012000 	.word	0x40012000
 80025c4:	2000d0e2 	.word	0x2000d0e2
 80025c8:	e0001000 	.word	0xe0001000
 80025cc:	2000ed28 	.word	0x2000ed28
 80025d0:	2000ed2c 	.word	0x2000ed2c
 80025d4:	2000d50c 	.word	0x2000d50c
 80025d8:	2000d10c 	.word	0x2000d10c
 80025dc:	431bde83 	.word	0x431bde83
 80025e0:	2000d504 	.word	0x2000d504
 80025e4:	2000d520 	.word	0x2000d520
 80025e8:	2000d4fc 	.word	0x2000d4fc
 80025ec:	2000e520 	.word	0x2000e520
 80025f0:	2000d510 	.word	0x2000d510
 80025f4:	2000d0e4 	.word	0x2000d0e4
 80025f8:	2000ed20 	.word	0x2000ed20
 80025fc:	2000ed30 	.word	0x2000ed30
 8002600:	2000d0fc 	.word	0x2000d0fc
 8002604:	2000d109 	.word	0x2000d109
 8002608:	2000d51c 	.word	0x2000d51c
 800260c:	2000d514 	.word	0x2000d514
 8002610:	2000d0e0 	.word	0x2000d0e0
 8002614:	2000d508 	.word	0x2000d508
 8002618:	2000dd20 	.word	0x2000dd20
 800261c:	2000e920 	.word	0x2000e920
 8002620:	2000ed32 	.word	0x2000ed32
 8002624:	2000d0fe 	.word	0x2000d0fe
 8002628:	2300      	movs	r3, #0
 800262a:	73bb      	strb	r3, [r7, #14]
 800262c:	e013      	b.n	8002656 <HAL_ADC_ConvCpltCallback+0x2fa>
				else
					trigger = (adc1_prev > trigger1_value && adc1[adc1_length] < trigger1_value);
 800262e:	4b38      	ldr	r3, [pc, #224]	@ (8002710 <HAL_ADC_ConvCpltCallback+0x3b4>)
 8002630:	881b      	ldrh	r3, [r3, #0]
 8002632:	b29a      	uxth	r2, r3
 8002634:	4b37      	ldr	r3, [pc, #220]	@ (8002714 <HAL_ADC_ConvCpltCallback+0x3b8>)
 8002636:	881b      	ldrh	r3, [r3, #0]
 8002638:	429a      	cmp	r2, r3
 800263a:	d90a      	bls.n	8002652 <HAL_ADC_ConvCpltCallback+0x2f6>
 800263c:	4b36      	ldr	r3, [pc, #216]	@ (8002718 <HAL_ADC_ConvCpltCallback+0x3bc>)
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	4a36      	ldr	r2, [pc, #216]	@ (800271c <HAL_ADC_ConvCpltCallback+0x3c0>)
 8002642:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8002646:	4b33      	ldr	r3, [pc, #204]	@ (8002714 <HAL_ADC_ConvCpltCallback+0x3b8>)
 8002648:	881b      	ldrh	r3, [r3, #0]
 800264a:	429a      	cmp	r2, r3
 800264c:	d201      	bcs.n	8002652 <HAL_ADC_ConvCpltCallback+0x2f6>
 800264e:	2301      	movs	r3, #1
 8002650:	e000      	b.n	8002654 <HAL_ADC_ConvCpltCallback+0x2f8>
 8002652:	2300      	movs	r3, #0
 8002654:	73bb      	strb	r3, [r7, #14]

				if (trigger && adc1_length != 0) {
 8002656:	7bbb      	ldrb	r3, [r7, #14]
 8002658:	2b00      	cmp	r3, #0
 800265a:	d021      	beq.n	80026a0 <HAL_ADC_ConvCpltCallback+0x344>
 800265c:	4b2e      	ldr	r3, [pc, #184]	@ (8002718 <HAL_ADC_ConvCpltCallback+0x3bc>)
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	2b00      	cmp	r3, #0
 8002662:	d01d      	beq.n	80026a0 <HAL_ADC_ConvCpltCallback+0x344>
					if (!event_trigger1_detected) {
 8002664:	4b2e      	ldr	r3, [pc, #184]	@ (8002720 <HAL_ADC_ConvCpltCallback+0x3c4>)
 8002666:	781b      	ldrb	r3, [r3, #0]
 8002668:	2b00      	cmp	r3, #0
 800266a:	d10a      	bne.n	8002682 <HAL_ADC_ConvCpltCallback+0x326>
						adc1_length = 0;
 800266c:	4b2a      	ldr	r3, [pc, #168]	@ (8002718 <HAL_ADC_ConvCpltCallback+0x3bc>)
 800266e:	2200      	movs	r2, #0
 8002670:	601a      	str	r2, [r3, #0]
						adc1_time_delta = DWT->CYCCNT;
 8002672:	4b2c      	ldr	r3, [pc, #176]	@ (8002724 <HAL_ADC_ConvCpltCallback+0x3c8>)
 8002674:	685b      	ldr	r3, [r3, #4]
 8002676:	4a2c      	ldr	r2, [pc, #176]	@ (8002728 <HAL_ADC_ConvCpltCallback+0x3cc>)
 8002678:	6013      	str	r3, [r2, #0]
						event_trigger1_detected = 1;
 800267a:	4b29      	ldr	r3, [pc, #164]	@ (8002720 <HAL_ADC_ConvCpltCallback+0x3c4>)
 800267c:	2201      	movs	r2, #1
 800267e:	701a      	strb	r2, [r3, #0]
 8002680:	e00e      	b.n	80026a0 <HAL_ADC_ConvCpltCallback+0x344>
					} else if (!adc_period1_detected) {
 8002682:	4b2a      	ldr	r3, [pc, #168]	@ (800272c <HAL_ADC_ConvCpltCallback+0x3d0>)
 8002684:	781b      	ldrb	r3, [r3, #0]
 8002686:	b2db      	uxtb	r3, r3
 8002688:	2b00      	cmp	r3, #0
 800268a:	d109      	bne.n	80026a0 <HAL_ADC_ConvCpltCallback+0x344>
						adc_period[1] = adc1_time[adc1_length];
 800268c:	4b22      	ldr	r3, [pc, #136]	@ (8002718 <HAL_ADC_ConvCpltCallback+0x3bc>)
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	4a27      	ldr	r2, [pc, #156]	@ (8002730 <HAL_ADC_ConvCpltCallback+0x3d4>)
 8002692:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002696:	4a27      	ldr	r2, [pc, #156]	@ (8002734 <HAL_ADC_ConvCpltCallback+0x3d8>)
 8002698:	6053      	str	r3, [r2, #4]
						adc_period1_detected = 1;
 800269a:	4b24      	ldr	r3, [pc, #144]	@ (800272c <HAL_ADC_ConvCpltCallback+0x3d0>)
 800269c:	2201      	movs	r2, #1
 800269e:	701a      	strb	r2, [r3, #0]
					}
				}

				adc1_prev = adc_data[1] * ADC_CHANNEL1_SCALE;
 80026a0:	4b25      	ldr	r3, [pc, #148]	@ (8002738 <HAL_ADC_ConvCpltCallback+0x3dc>)
 80026a2:	885b      	ldrh	r3, [r3, #2]
 80026a4:	b29a      	uxth	r2, r3
 80026a6:	4b1a      	ldr	r3, [pc, #104]	@ (8002710 <HAL_ADC_ConvCpltCallback+0x3b4>)
 80026a8:	801a      	strh	r2, [r3, #0]
				adc1_length++;
 80026aa:	4b1b      	ldr	r3, [pc, #108]	@ (8002718 <HAL_ADC_ConvCpltCallback+0x3bc>)
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	3301      	adds	r3, #1
 80026b0:	4a19      	ldr	r2, [pc, #100]	@ (8002718 <HAL_ADC_ConvCpltCallback+0x3bc>)
 80026b2:	6013      	str	r3, [r2, #0]
 80026b4:	e002      	b.n	80026bc <HAL_ADC_ConvCpltCallback+0x360>

			} else
				adc1_filled = 1;
 80026b6:	4b21      	ldr	r3, [pc, #132]	@ (800273c <HAL_ADC_ConvCpltCallback+0x3e0>)
 80026b8:	2201      	movs	r2, #1
 80026ba:	701a      	strb	r2, [r3, #0]
    	}

		if (adc0_filled && adc1_filled) {
 80026bc:	4b20      	ldr	r3, [pc, #128]	@ (8002740 <HAL_ADC_ConvCpltCallback+0x3e4>)
 80026be:	781b      	ldrb	r3, [r3, #0]
 80026c0:	b2db      	uxtb	r3, r3
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d012      	beq.n	80026ec <HAL_ADC_ConvCpltCallback+0x390>
 80026c6:	4b1d      	ldr	r3, [pc, #116]	@ (800273c <HAL_ADC_ConvCpltCallback+0x3e0>)
 80026c8:	781b      	ldrb	r3, [r3, #0]
 80026ca:	b2db      	uxtb	r3, r3
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d00d      	beq.n	80026ec <HAL_ADC_ConvCpltCallback+0x390>
			event_adc = 1;
 80026d0:	4b1c      	ldr	r3, [pc, #112]	@ (8002744 <HAL_ADC_ConvCpltCallback+0x3e8>)
 80026d2:	2201      	movs	r2, #1
 80026d4:	701a      	strb	r2, [r3, #0]

	    	if (!adc_immediate) {
 80026d6:	4b1c      	ldr	r3, [pc, #112]	@ (8002748 <HAL_ADC_ConvCpltCallback+0x3ec>)
 80026d8:	781b      	ldrb	r3, [r3, #0]
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d114      	bne.n	8002708 <HAL_ADC_ConvCpltCallback+0x3ac>
				HAL_TIM_Base_Stop_IT(&htim10);
 80026de:	481b      	ldr	r0, [pc, #108]	@ (800274c <HAL_ADC_ConvCpltCallback+0x3f0>)
 80026e0:	f006 f9e4 	bl	8008aac <HAL_TIM_Base_Stop_IT>
				adc_available = 1;
 80026e4:	4b1a      	ldr	r3, [pc, #104]	@ (8002750 <HAL_ADC_ConvCpltCallback+0x3f4>)
 80026e6:	2201      	movs	r2, #1
 80026e8:	701a      	strb	r2, [r3, #0]
	    	}

    		return;
 80026ea:	e00d      	b.n	8002708 <HAL_ADC_ConvCpltCallback+0x3ac>
		}

		if (adc_immediate)
 80026ec:	4b16      	ldr	r3, [pc, #88]	@ (8002748 <HAL_ADC_ConvCpltCallback+0x3ec>)
 80026ee:	781b      	ldrb	r3, [r3, #0]
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d005      	beq.n	8002700 <HAL_ADC_ConvCpltCallback+0x3a4>
			HAL_ADC_Start_DMA(&hadc1, (uint32_t*)&adc_data, 2);
 80026f4:	2202      	movs	r2, #2
 80026f6:	4910      	ldr	r1, [pc, #64]	@ (8002738 <HAL_ADC_ConvCpltCallback+0x3dc>)
 80026f8:	4816      	ldr	r0, [pc, #88]	@ (8002754 <HAL_ADC_ConvCpltCallback+0x3f8>)
 80026fa:	f002 ffb9 	bl	8005670 <HAL_ADC_Start_DMA>
 80026fe:	e004      	b.n	800270a <HAL_ADC_ConvCpltCallback+0x3ae>
		else
			adc_available = 1;
 8002700:	4b13      	ldr	r3, [pc, #76]	@ (8002750 <HAL_ADC_ConvCpltCallback+0x3f4>)
 8002702:	2201      	movs	r2, #1
 8002704:	701a      	strb	r2, [r3, #0]
 8002706:	e000      	b.n	800270a <HAL_ADC_ConvCpltCallback+0x3ae>
    		return;
 8002708:	bf00      	nop
    }
}
 800270a:	3710      	adds	r7, #16
 800270c:	46bd      	mov	sp, r7
 800270e:	bd80      	pop	{r7, pc}
 8002710:	2000ed32 	.word	0x2000ed32
 8002714:	2000d0fe 	.word	0x2000d0fe
 8002718:	2000d508 	.word	0x2000d508
 800271c:	2000e920 	.word	0x2000e920
 8002720:	2000d10a 	.word	0x2000d10a
 8002724:	e0001000 	.word	0xe0001000
 8002728:	2000ed2c 	.word	0x2000ed2c
 800272c:	2000d51d 	.word	0x2000d51d
 8002730:	2000dd20 	.word	0x2000dd20
 8002734:	2000d514 	.word	0x2000d514
 8002738:	2000d4fc 	.word	0x2000d4fc
 800273c:	2000d0e0 	.word	0x2000d0e0
 8002740:	2000d50c 	.word	0x2000d50c
 8002744:	2000ed21 	.word	0x2000ed21
 8002748:	2000d0e8 	.word	0x2000d0e8
 800274c:	2000ef10 	.word	0x2000ef10
 8002750:	2000d0e1 	.word	0x2000d0e1
 8002754:	2000d310 	.word	0x2000d310

08002758 <drawAxis>:


static void drawAxis(ILI9341TypeDef *display)
{
 8002758:	b580      	push	{r7, lr}
 800275a:	b088      	sub	sp, #32
 800275c:	af02      	add	r7, sp, #8
 800275e:	6078      	str	r0, [r7, #4]
	for (uint16_t i = 0; i < 9; i++) {
 8002760:	2300      	movs	r3, #0
 8002762:	82fb      	strh	r3, [r7, #22]
 8002764:	e034      	b.n	80027d0 <drawAxis+0x78>
		uint16_t y = 20 + 25 * i;
 8002766:	8afb      	ldrh	r3, [r7, #22]
 8002768:	461a      	mov	r2, r3
 800276a:	0092      	lsls	r2, r2, #2
 800276c:	4413      	add	r3, r2
 800276e:	461a      	mov	r2, r3
 8002770:	0091      	lsls	r1, r2, #2
 8002772:	461a      	mov	r2, r3
 8002774:	460b      	mov	r3, r1
 8002776:	4413      	add	r3, r2
 8002778:	b29b      	uxth	r3, r3
 800277a:	3314      	adds	r3, #20
 800277c:	81bb      	strh	r3, [r7, #12]

		if (i == 0 || i == 8) {
 800277e:	8afb      	ldrh	r3, [r7, #22]
 8002780:	2b00      	cmp	r3, #0
 8002782:	d002      	beq.n	800278a <drawAxis+0x32>
 8002784:	8afb      	ldrh	r3, [r7, #22]
 8002786:	2b08      	cmp	r3, #8
 8002788:	d10c      	bne.n	80027a4 <drawAxis+0x4c>
			ILI9341_FillRectangle(display, 20, y, 276, 1, ILI9341_WHITE);
 800278a:	89ba      	ldrh	r2, [r7, #12]
 800278c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002790:	9301      	str	r3, [sp, #4]
 8002792:	2301      	movs	r3, #1
 8002794:	9300      	str	r3, [sp, #0]
 8002796:	f44f 738a 	mov.w	r3, #276	@ 0x114
 800279a:	2114      	movs	r1, #20
 800279c:	6878      	ldr	r0, [r7, #4]
 800279e:	f7ff fb74 	bl	8001e8a <ILI9341_FillRectangle>
			continue;
 80027a2:	e012      	b.n	80027ca <drawAxis+0x72>
		}

		for (uint16_t j = 0; j < 276; j += 2)
 80027a4:	2300      	movs	r3, #0
 80027a6:	82bb      	strh	r3, [r7, #20]
 80027a8:	e00b      	b.n	80027c2 <drawAxis+0x6a>
			ILI9341_DrawPixel(display, 20 + j, y, ILI9341_GRAY);
 80027aa:	8abb      	ldrh	r3, [r7, #20]
 80027ac:	3314      	adds	r3, #20
 80027ae:	b299      	uxth	r1, r3
 80027b0:	89ba      	ldrh	r2, [r7, #12]
 80027b2:	f245 238a 	movw	r3, #21130	@ 0x528a
 80027b6:	6878      	ldr	r0, [r7, #4]
 80027b8:	f7ff fa5c 	bl	8001c74 <ILI9341_DrawPixel>
		for (uint16_t j = 0; j < 276; j += 2)
 80027bc:	8abb      	ldrh	r3, [r7, #20]
 80027be:	3302      	adds	r3, #2
 80027c0:	82bb      	strh	r3, [r7, #20]
 80027c2:	8abb      	ldrh	r3, [r7, #20]
 80027c4:	f5b3 7f8a 	cmp.w	r3, #276	@ 0x114
 80027c8:	d3ef      	bcc.n	80027aa <drawAxis+0x52>
	for (uint16_t i = 0; i < 9; i++) {
 80027ca:	8afb      	ldrh	r3, [r7, #22]
 80027cc:	3301      	adds	r3, #1
 80027ce:	82fb      	strh	r3, [r7, #22]
 80027d0:	8afb      	ldrh	r3, [r7, #22]
 80027d2:	2b08      	cmp	r3, #8
 80027d4:	d9c7      	bls.n	8002766 <drawAxis+0xe>
	}

	for (uint16_t i = 0; i < 12; i++) {
 80027d6:	2300      	movs	r3, #0
 80027d8:	827b      	strh	r3, [r7, #18]
 80027da:	e032      	b.n	8002842 <drawAxis+0xea>
		uint16_t x = 20 + 25 * i;
 80027dc:	8a7b      	ldrh	r3, [r7, #18]
 80027de:	461a      	mov	r2, r3
 80027e0:	0092      	lsls	r2, r2, #2
 80027e2:	4413      	add	r3, r2
 80027e4:	461a      	mov	r2, r3
 80027e6:	0091      	lsls	r1, r2, #2
 80027e8:	461a      	mov	r2, r3
 80027ea:	460b      	mov	r3, r1
 80027ec:	4413      	add	r3, r2
 80027ee:	b29b      	uxth	r3, r3
 80027f0:	3314      	adds	r3, #20
 80027f2:	81fb      	strh	r3, [r7, #14]

		if (i == 0 || i == 11) {
 80027f4:	8a7b      	ldrh	r3, [r7, #18]
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d002      	beq.n	8002800 <drawAxis+0xa8>
 80027fa:	8a7b      	ldrh	r3, [r7, #18]
 80027fc:	2b0b      	cmp	r3, #11
 80027fe:	d10b      	bne.n	8002818 <drawAxis+0xc0>
			ILI9341_FillRectangle(display, x, 20, 1, 200, ILI9341_WHITE);
 8002800:	89f9      	ldrh	r1, [r7, #14]
 8002802:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002806:	9301      	str	r3, [sp, #4]
 8002808:	23c8      	movs	r3, #200	@ 0xc8
 800280a:	9300      	str	r3, [sp, #0]
 800280c:	2301      	movs	r3, #1
 800280e:	2214      	movs	r2, #20
 8002810:	6878      	ldr	r0, [r7, #4]
 8002812:	f7ff fb3a 	bl	8001e8a <ILI9341_FillRectangle>
			continue;
 8002816:	e011      	b.n	800283c <drawAxis+0xe4>
		}

		for (uint16_t j = 0; j < 200; j += 2)
 8002818:	2300      	movs	r3, #0
 800281a:	823b      	strh	r3, [r7, #16]
 800281c:	e00b      	b.n	8002836 <drawAxis+0xde>
			ILI9341_DrawPixel(display, x, 20 + j, ILI9341_GRAY);
 800281e:	8a3b      	ldrh	r3, [r7, #16]
 8002820:	3314      	adds	r3, #20
 8002822:	b29a      	uxth	r2, r3
 8002824:	89f9      	ldrh	r1, [r7, #14]
 8002826:	f245 238a 	movw	r3, #21130	@ 0x528a
 800282a:	6878      	ldr	r0, [r7, #4]
 800282c:	f7ff fa22 	bl	8001c74 <ILI9341_DrawPixel>
		for (uint16_t j = 0; j < 200; j += 2)
 8002830:	8a3b      	ldrh	r3, [r7, #16]
 8002832:	3302      	adds	r3, #2
 8002834:	823b      	strh	r3, [r7, #16]
 8002836:	8a3b      	ldrh	r3, [r7, #16]
 8002838:	2bc7      	cmp	r3, #199	@ 0xc7
 800283a:	d9f0      	bls.n	800281e <drawAxis+0xc6>
	for (uint16_t i = 0; i < 12; i++) {
 800283c:	8a7b      	ldrh	r3, [r7, #18]
 800283e:	3301      	adds	r3, #1
 8002840:	827b      	strh	r3, [r7, #18]
 8002842:	8a7b      	ldrh	r3, [r7, #18]
 8002844:	2b0b      	cmp	r3, #11
 8002846:	d9c9      	bls.n	80027dc <drawAxis+0x84>
	}
}
 8002848:	bf00      	nop
 800284a:	bf00      	nop
 800284c:	3718      	adds	r7, #24
 800284e:	46bd      	mov	sp, r7
 8002850:	bd80      	pop	{r7, pc}

08002852 <clearCursor>:

static void clearCursor(ILI9341TypeDef *display, uint16_t pos)
{
 8002852:	b580      	push	{r7, lr}
 8002854:	b084      	sub	sp, #16
 8002856:	af02      	add	r7, sp, #8
 8002858:	6078      	str	r0, [r7, #4]
 800285a:	460b      	mov	r3, r1
 800285c:	807b      	strh	r3, [r7, #2]
	ILI9341_FillRectangle(display, 0, pos - 6, 20, 11, ILI9341_BLACK);
 800285e:	887b      	ldrh	r3, [r7, #2]
 8002860:	3b06      	subs	r3, #6
 8002862:	b29a      	uxth	r2, r3
 8002864:	2300      	movs	r3, #0
 8002866:	9301      	str	r3, [sp, #4]
 8002868:	230b      	movs	r3, #11
 800286a:	9300      	str	r3, [sp, #0]
 800286c:	2314      	movs	r3, #20
 800286e:	2100      	movs	r1, #0
 8002870:	6878      	ldr	r0, [r7, #4]
 8002872:	f7ff fb0a 	bl	8001e8a <ILI9341_FillRectangle>
}
 8002876:	bf00      	nop
 8002878:	3708      	adds	r7, #8
 800287a:	46bd      	mov	sp, r7
 800287c:	bd80      	pop	{r7, pc}

0800287e <clearTrigger>:

static void clearTrigger(ILI9341TypeDef *display, uint16_t pos)
{
 800287e:	b580      	push	{r7, lr}
 8002880:	b084      	sub	sp, #16
 8002882:	af02      	add	r7, sp, #8
 8002884:	6078      	str	r0, [r7, #4]
 8002886:	460b      	mov	r3, r1
 8002888:	807b      	strh	r3, [r7, #2]
	ILI9341_FillRectangle(display, 296, pos - 6, 20, 11, ILI9341_BLACK);
 800288a:	887b      	ldrh	r3, [r7, #2]
 800288c:	3b06      	subs	r3, #6
 800288e:	b29a      	uxth	r2, r3
 8002890:	2300      	movs	r3, #0
 8002892:	9301      	str	r3, [sp, #4]
 8002894:	230b      	movs	r3, #11
 8002896:	9300      	str	r3, [sp, #0]
 8002898:	2314      	movs	r3, #20
 800289a:	f44f 7194 	mov.w	r1, #296	@ 0x128
 800289e:	6878      	ldr	r0, [r7, #4]
 80028a0:	f7ff faf3 	bl	8001e8a <ILI9341_FillRectangle>
}
 80028a4:	bf00      	nop
 80028a6:	3708      	adds	r7, #8
 80028a8:	46bd      	mov	sp, r7
 80028aa:	bd80      	pop	{r7, pc}

080028ac <drawCursor>:

static void drawCursor(ILI9341TypeDef *display, uint16_t pos, char *name, uint16_t color)
{
 80028ac:	b580      	push	{r7, lr}
 80028ae:	b08a      	sub	sp, #40	@ 0x28
 80028b0:	af04      	add	r7, sp, #16
 80028b2:	60f8      	str	r0, [r7, #12]
 80028b4:	607a      	str	r2, [r7, #4]
 80028b6:	461a      	mov	r2, r3
 80028b8:	460b      	mov	r3, r1
 80028ba:	817b      	strh	r3, [r7, #10]
 80028bc:	4613      	mov	r3, r2
 80028be:	813b      	strh	r3, [r7, #8]
	ILI9341_FillRectangle(display, 0, pos - 6, 7 * 2, 1, color);
 80028c0:	897b      	ldrh	r3, [r7, #10]
 80028c2:	3b06      	subs	r3, #6
 80028c4:	b29a      	uxth	r2, r3
 80028c6:	893b      	ldrh	r3, [r7, #8]
 80028c8:	9301      	str	r3, [sp, #4]
 80028ca:	2301      	movs	r3, #1
 80028cc:	9300      	str	r3, [sp, #0]
 80028ce:	230e      	movs	r3, #14
 80028d0:	2100      	movs	r1, #0
 80028d2:	68f8      	ldr	r0, [r7, #12]
 80028d4:	f7ff fad9 	bl	8001e8a <ILI9341_FillRectangle>
	ILI9341_WriteString(display, 0, pos - 5, name, Font_7x10, ILI9341_BLACK, color);
 80028d8:	897b      	ldrh	r3, [r7, #10]
 80028da:	3b05      	subs	r3, #5
 80028dc:	b29a      	uxth	r2, r3
 80028de:	893b      	ldrh	r3, [r7, #8]
 80028e0:	9303      	str	r3, [sp, #12]
 80028e2:	2300      	movs	r3, #0
 80028e4:	9302      	str	r3, [sp, #8]
 80028e6:	4919      	ldr	r1, [pc, #100]	@ (800294c <drawCursor+0xa0>)
 80028e8:	466b      	mov	r3, sp
 80028ea:	c903      	ldmia	r1, {r0, r1}
 80028ec:	e883 0003 	stmia.w	r3, {r0, r1}
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	2100      	movs	r1, #0
 80028f4:	68f8      	ldr	r0, [r7, #12]
 80028f6:	f7ff fbe0 	bl	80020ba <ILI9341_WriteString>

	for (uint8_t i = 0; i < 6; i++) {
 80028fa:	2300      	movs	r3, #0
 80028fc:	75fb      	strb	r3, [r7, #23]
 80028fe:	e01d      	b.n	800293c <drawCursor+0x90>
		for (uint8_t j = i; j < 11 - i; j++)
 8002900:	7dfb      	ldrb	r3, [r7, #23]
 8002902:	75bb      	strb	r3, [r7, #22]
 8002904:	e011      	b.n	800292a <drawCursor+0x7e>
			ILI9341_DrawPixel(display, 14 + i, pos - 6 + j, color);
 8002906:	7dfb      	ldrb	r3, [r7, #23]
 8002908:	b29b      	uxth	r3, r3
 800290a:	330e      	adds	r3, #14
 800290c:	b299      	uxth	r1, r3
 800290e:	7dbb      	ldrb	r3, [r7, #22]
 8002910:	b29a      	uxth	r2, r3
 8002912:	897b      	ldrh	r3, [r7, #10]
 8002914:	4413      	add	r3, r2
 8002916:	b29b      	uxth	r3, r3
 8002918:	3b06      	subs	r3, #6
 800291a:	b29a      	uxth	r2, r3
 800291c:	893b      	ldrh	r3, [r7, #8]
 800291e:	68f8      	ldr	r0, [r7, #12]
 8002920:	f7ff f9a8 	bl	8001c74 <ILI9341_DrawPixel>
		for (uint8_t j = i; j < 11 - i; j++)
 8002924:	7dbb      	ldrb	r3, [r7, #22]
 8002926:	3301      	adds	r3, #1
 8002928:	75bb      	strb	r3, [r7, #22]
 800292a:	7dba      	ldrb	r2, [r7, #22]
 800292c:	7dfb      	ldrb	r3, [r7, #23]
 800292e:	f1c3 030b 	rsb	r3, r3, #11
 8002932:	429a      	cmp	r2, r3
 8002934:	dbe7      	blt.n	8002906 <drawCursor+0x5a>
	for (uint8_t i = 0; i < 6; i++) {
 8002936:	7dfb      	ldrb	r3, [r7, #23]
 8002938:	3301      	adds	r3, #1
 800293a:	75fb      	strb	r3, [r7, #23]
 800293c:	7dfb      	ldrb	r3, [r7, #23]
 800293e:	2b05      	cmp	r3, #5
 8002940:	d9de      	bls.n	8002900 <drawCursor+0x54>
	}
}
 8002942:	bf00      	nop
 8002944:	bf00      	nop
 8002946:	3718      	adds	r7, #24
 8002948:	46bd      	mov	sp, r7
 800294a:	bd80      	pop	{r7, pc}
 800294c:	20000000 	.word	0x20000000

08002950 <drawTrigger>:

static void drawTrigger(ILI9341TypeDef *display, uint16_t pos, char *name, uint16_t color)
{
 8002950:	b580      	push	{r7, lr}
 8002952:	b08a      	sub	sp, #40	@ 0x28
 8002954:	af04      	add	r7, sp, #16
 8002956:	60f8      	str	r0, [r7, #12]
 8002958:	607a      	str	r2, [r7, #4]
 800295a:	461a      	mov	r2, r3
 800295c:	460b      	mov	r3, r1
 800295e:	817b      	strh	r3, [r7, #10]
 8002960:	4613      	mov	r3, r2
 8002962:	813b      	strh	r3, [r7, #8]
	ILI9341_FillRectangle(display, 302, pos - 6, 7 * 2, 1, color);
 8002964:	897b      	ldrh	r3, [r7, #10]
 8002966:	3b06      	subs	r3, #6
 8002968:	b29a      	uxth	r2, r3
 800296a:	893b      	ldrh	r3, [r7, #8]
 800296c:	9301      	str	r3, [sp, #4]
 800296e:	2301      	movs	r3, #1
 8002970:	9300      	str	r3, [sp, #0]
 8002972:	230e      	movs	r3, #14
 8002974:	f44f 7197 	mov.w	r1, #302	@ 0x12e
 8002978:	68f8      	ldr	r0, [r7, #12]
 800297a:	f7ff fa86 	bl	8001e8a <ILI9341_FillRectangle>
	ILI9341_WriteString(display, 302, pos - 5, name, Font_7x10, ILI9341_BLACK, color);
 800297e:	897b      	ldrh	r3, [r7, #10]
 8002980:	3b05      	subs	r3, #5
 8002982:	b29a      	uxth	r2, r3
 8002984:	893b      	ldrh	r3, [r7, #8]
 8002986:	9303      	str	r3, [sp, #12]
 8002988:	2300      	movs	r3, #0
 800298a:	9302      	str	r3, [sp, #8]
 800298c:	491a      	ldr	r1, [pc, #104]	@ (80029f8 <drawTrigger+0xa8>)
 800298e:	466b      	mov	r3, sp
 8002990:	c903      	ldmia	r1, {r0, r1}
 8002992:	e883 0003 	stmia.w	r3, {r0, r1}
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	f44f 7197 	mov.w	r1, #302	@ 0x12e
 800299c:	68f8      	ldr	r0, [r7, #12]
 800299e:	f7ff fb8c 	bl	80020ba <ILI9341_WriteString>

	for (uint8_t i = 0; i < 6; i++) {
 80029a2:	2300      	movs	r3, #0
 80029a4:	75fb      	strb	r3, [r7, #23]
 80029a6:	e01f      	b.n	80029e8 <drawTrigger+0x98>
		for (uint8_t j = i; j < 11 - i; j++)
 80029a8:	7dfb      	ldrb	r3, [r7, #23]
 80029aa:	75bb      	strb	r3, [r7, #22]
 80029ac:	e013      	b.n	80029d6 <drawTrigger+0x86>
			ILI9341_DrawPixel(display, 301 - i, pos - 6 + j, color);
 80029ae:	7dfb      	ldrb	r3, [r7, #23]
 80029b0:	b29b      	uxth	r3, r3
 80029b2:	f5c3 7396 	rsb	r3, r3, #300	@ 0x12c
 80029b6:	3301      	adds	r3, #1
 80029b8:	b299      	uxth	r1, r3
 80029ba:	7dbb      	ldrb	r3, [r7, #22]
 80029bc:	b29a      	uxth	r2, r3
 80029be:	897b      	ldrh	r3, [r7, #10]
 80029c0:	4413      	add	r3, r2
 80029c2:	b29b      	uxth	r3, r3
 80029c4:	3b06      	subs	r3, #6
 80029c6:	b29a      	uxth	r2, r3
 80029c8:	893b      	ldrh	r3, [r7, #8]
 80029ca:	68f8      	ldr	r0, [r7, #12]
 80029cc:	f7ff f952 	bl	8001c74 <ILI9341_DrawPixel>
		for (uint8_t j = i; j < 11 - i; j++)
 80029d0:	7dbb      	ldrb	r3, [r7, #22]
 80029d2:	3301      	adds	r3, #1
 80029d4:	75bb      	strb	r3, [r7, #22]
 80029d6:	7dba      	ldrb	r2, [r7, #22]
 80029d8:	7dfb      	ldrb	r3, [r7, #23]
 80029da:	f1c3 030b 	rsb	r3, r3, #11
 80029de:	429a      	cmp	r2, r3
 80029e0:	dbe5      	blt.n	80029ae <drawTrigger+0x5e>
	for (uint8_t i = 0; i < 6; i++) {
 80029e2:	7dfb      	ldrb	r3, [r7, #23]
 80029e4:	3301      	adds	r3, #1
 80029e6:	75fb      	strb	r3, [r7, #23]
 80029e8:	7dfb      	ldrb	r3, [r7, #23]
 80029ea:	2b05      	cmp	r3, #5
 80029ec:	d9dc      	bls.n	80029a8 <drawTrigger+0x58>
	}
}
 80029ee:	bf00      	nop
 80029f0:	bf00      	nop
 80029f2:	3718      	adds	r7, #24
 80029f4:	46bd      	mov	sp, r7
 80029f6:	bd80      	pop	{r7, pc}
 80029f8:	20000000 	.word	0x20000000

080029fc <drawSignal>:

static void drawSignal(ILI9341TypeDef *display, uint32_t *adc_time, uint16_t *adc0, uint32_t adc_length, uint16_t pixel_dirty[280][2], uint16_t cursor, uint16_t color)
{
 80029fc:	b590      	push	{r4, r7, lr}
 80029fe:	f2ad 6dd4 	subw	sp, sp, #1748	@ 0x6d4
 8002a02:	af00      	add	r7, sp, #0
 8002a04:	f507 64da 	add.w	r4, r7, #1744	@ 0x6d0
 8002a08:	f2a4 64c4 	subw	r4, r4, #1732	@ 0x6c4
 8002a0c:	6020      	str	r0, [r4, #0]
 8002a0e:	f507 60da 	add.w	r0, r7, #1744	@ 0x6d0
 8002a12:	f5a0 60d9 	sub.w	r0, r0, #1736	@ 0x6c8
 8002a16:	6001      	str	r1, [r0, #0]
 8002a18:	f507 61da 	add.w	r1, r7, #1744	@ 0x6d0
 8002a1c:	f2a1 61cc 	subw	r1, r1, #1740	@ 0x6cc
 8002a20:	600a      	str	r2, [r1, #0]
 8002a22:	f507 62da 	add.w	r2, r7, #1744	@ 0x6d0
 8002a26:	f5a2 62da 	sub.w	r2, r2, #1744	@ 0x6d0
 8002a2a:	6013      	str	r3, [r2, #0]
	uint16_t point[280];
	for (uint16_t i = 0; i < 280; i++)
 8002a2c:	2300      	movs	r3, #0
 8002a2e:	f8a7 36ce 	strh.w	r3, [r7, #1742]	@ 0x6ce
 8002a32:	e00d      	b.n	8002a50 <drawSignal+0x54>
		point[i] = 0;
 8002a34:	f8b7 26ce 	ldrh.w	r2, [r7, #1742]	@ 0x6ce
 8002a38:	f507 63da 	add.w	r3, r7, #1744	@ 0x6d0
 8002a3c:	f5a3 7318 	sub.w	r3, r3, #608	@ 0x260
 8002a40:	2100      	movs	r1, #0
 8002a42:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	for (uint16_t i = 0; i < 280; i++)
 8002a46:	f8b7 36ce 	ldrh.w	r3, [r7, #1742]	@ 0x6ce
 8002a4a:	3301      	adds	r3, #1
 8002a4c:	f8a7 36ce 	strh.w	r3, [r7, #1742]	@ 0x6ce
 8002a50:	f8b7 36ce 	ldrh.w	r3, [r7, #1742]	@ 0x6ce
 8002a54:	f5b3 7f8c 	cmp.w	r3, #280	@ 0x118
 8002a58:	d3ec      	bcc.n	8002a34 <drawSignal+0x38>

	for (uint16_t i = 0; i < adc_length; i++) {
 8002a5a:	2300      	movs	r3, #0
 8002a5c:	f8a7 36cc 	strh.w	r3, [r7, #1740]	@ 0x6cc
 8002a60:	e0a5      	b.n	8002bae <drawSignal+0x1b2>

		float uV = (float)(adc0[i]) * 3300000.0f / 4096.0f;
 8002a62:	f8b7 36cc 	ldrh.w	r3, [r7, #1740]	@ 0x6cc
 8002a66:	005b      	lsls	r3, r3, #1
 8002a68:	f507 62da 	add.w	r2, r7, #1744	@ 0x6d0
 8002a6c:	f2a2 62cc 	subw	r2, r2, #1740	@ 0x6cc
 8002a70:	6812      	ldr	r2, [r2, #0]
 8002a72:	4413      	add	r3, r2
 8002a74:	881b      	ldrh	r3, [r3, #0]
 8002a76:	ee07 3a90 	vmov	s15, r3
 8002a7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002a7e:	ed9f 7aa1 	vldr	s14, [pc, #644]	@ 8002d04 <drawSignal+0x308>
 8002a82:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002a86:	eddf 6aa0 	vldr	s13, [pc, #640]	@ 8002d08 <drawSignal+0x30c>
 8002a8a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002a8e:	f507 63d4 	add.w	r3, r7, #1696	@ 0x6a0
 8002a92:	edc3 7a00 	vstr	s15, [r3]
		uint16_t x = (float)(adc_time[i]) * 280.0f / (float)(12.0f * xlim_us);
 8002a96:	f8b7 36cc 	ldrh.w	r3, [r7, #1740]	@ 0x6cc
 8002a9a:	009b      	lsls	r3, r3, #2
 8002a9c:	f507 62da 	add.w	r2, r7, #1744	@ 0x6d0
 8002aa0:	f5a2 62d9 	sub.w	r2, r2, #1736	@ 0x6c8
 8002aa4:	6812      	ldr	r2, [r2, #0]
 8002aa6:	4413      	add	r3, r2
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	ee07 3a90 	vmov	s15, r3
 8002aae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002ab2:	ed9f 7a96 	vldr	s14, [pc, #600]	@ 8002d0c <drawSignal+0x310>
 8002ab6:	ee67 6a87 	vmul.f32	s13, s15, s14
 8002aba:	4b95      	ldr	r3, [pc, #596]	@ (8002d10 <drawSignal+0x314>)
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	ee07 3a90 	vmov	s15, r3
 8002ac2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002ac6:	eeb2 7a08 	vmov.f32	s14, #40	@ 0x41400000  12.0
 8002aca:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002ace:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002ad2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002ad6:	ee17 3a90 	vmov	r3, s15
 8002ada:	f8a7 36ca 	strh.w	r3, [r7, #1738]	@ 0x6ca
		uint16_t y = cursor - ((uV / (float)(ylim_uV)) * 200.0f / 8.0f);
 8002ade:	f8b7 36e4 	ldrh.w	r3, [r7, #1764]	@ 0x6e4
 8002ae2:	ee07 3a90 	vmov	s15, r3
 8002ae6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002aea:	4b8a      	ldr	r3, [pc, #552]	@ (8002d14 <drawSignal+0x318>)
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	ee07 3a90 	vmov	s15, r3
 8002af2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002af6:	f507 63d4 	add.w	r3, r7, #1696	@ 0x6a0
 8002afa:	ed93 6a00 	vldr	s12, [r3]
 8002afe:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8002b02:	eddf 6a85 	vldr	s13, [pc, #532]	@ 8002d18 <drawSignal+0x31c>
 8002b06:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8002b0a:	eeb2 6a00 	vmov.f32	s12, #32	@ 0x41000000  8.0
 8002b0e:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002b12:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002b16:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002b1a:	ee17 3a90 	vmov	r3, s15
 8002b1e:	f8a7 36c8 	strh.w	r3, [r7, #1736]	@ 0x6c8

		if (x < 0)
			x = 0;

		if (x > 274)
 8002b22:	f8b7 36ca 	ldrh.w	r3, [r7, #1738]	@ 0x6ca
 8002b26:	f5b3 7f89 	cmp.w	r3, #274	@ 0x112
 8002b2a:	d903      	bls.n	8002b34 <drawSignal+0x138>
			x = 274;
 8002b2c:	f44f 7389 	mov.w	r3, #274	@ 0x112
 8002b30:	f8a7 36ca 	strh.w	r3, [r7, #1738]	@ 0x6ca

		if (y < 21)
 8002b34:	f8b7 36c8 	ldrh.w	r3, [r7, #1736]	@ 0x6c8
 8002b38:	2b14      	cmp	r3, #20
 8002b3a:	d802      	bhi.n	8002b42 <drawSignal+0x146>
			y = 21;
 8002b3c:	2315      	movs	r3, #21
 8002b3e:	f8a7 36c8 	strh.w	r3, [r7, #1736]	@ 0x6c8

		if (y > 219)
 8002b42:	f8b7 36c8 	ldrh.w	r3, [r7, #1736]	@ 0x6c8
 8002b46:	2bdb      	cmp	r3, #219	@ 0xdb
 8002b48:	d902      	bls.n	8002b50 <drawSignal+0x154>
			y = 219;
 8002b4a:	23db      	movs	r3, #219	@ 0xdb
 8002b4c:	f8a7 36c8 	strh.w	r3, [r7, #1736]	@ 0x6c8

		point[x] += (float)(y - point[x]) * 1.0f;
 8002b50:	f8b7 26ca 	ldrh.w	r2, [r7, #1738]	@ 0x6ca
 8002b54:	f507 63da 	add.w	r3, r7, #1744	@ 0x6d0
 8002b58:	f5a3 7318 	sub.w	r3, r3, #608	@ 0x260
 8002b5c:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8002b60:	ee07 3a90 	vmov	s15, r3
 8002b64:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002b68:	f8b7 36c8 	ldrh.w	r3, [r7, #1736]	@ 0x6c8
 8002b6c:	f8b7 16ca 	ldrh.w	r1, [r7, #1738]	@ 0x6ca
 8002b70:	f507 62da 	add.w	r2, r7, #1744	@ 0x6d0
 8002b74:	f5a2 7218 	sub.w	r2, r2, #608	@ 0x260
 8002b78:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 8002b7c:	1a9b      	subs	r3, r3, r2
 8002b7e:	ee07 3a90 	vmov	s15, r3
 8002b82:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002b86:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002b8a:	f8b7 26ca 	ldrh.w	r2, [r7, #1738]	@ 0x6ca
 8002b8e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002b92:	ee17 3a90 	vmov	r3, s15
 8002b96:	b299      	uxth	r1, r3
 8002b98:	f507 63da 	add.w	r3, r7, #1744	@ 0x6d0
 8002b9c:	f5a3 7318 	sub.w	r3, r3, #608	@ 0x260
 8002ba0:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	for (uint16_t i = 0; i < adc_length; i++) {
 8002ba4:	f8b7 36cc 	ldrh.w	r3, [r7, #1740]	@ 0x6cc
 8002ba8:	3301      	adds	r3, #1
 8002baa:	f8a7 36cc 	strh.w	r3, [r7, #1740]	@ 0x6cc
 8002bae:	f8b7 36cc 	ldrh.w	r3, [r7, #1740]	@ 0x6cc
 8002bb2:	f507 62da 	add.w	r2, r7, #1744	@ 0x6d0
 8002bb6:	f5a2 62da 	sub.w	r2, r2, #1744	@ 0x6d0
 8002bba:	6812      	ldr	r2, [r2, #0]
 8002bbc:	429a      	cmp	r2, r3
 8002bbe:	f63f af50 	bhi.w	8002a62 <drawSignal+0x66>
	}

	uint16_t pixel[280][2];
	for (uint16_t i = 0; i < 280; i++) {
 8002bc2:	2300      	movs	r3, #0
 8002bc4:	f8a7 36c6 	strh.w	r3, [r7, #1734]	@ 0x6c6
 8002bc8:	e017      	b.n	8002bfa <drawSignal+0x1fe>
		pixel[i][0] = 220;
 8002bca:	f8b7 26c6 	ldrh.w	r2, [r7, #1734]	@ 0x6c6
 8002bce:	f507 63da 	add.w	r3, r7, #1744	@ 0x6d0
 8002bd2:	f5a3 63d8 	sub.w	r3, r3, #1728	@ 0x6c0
 8002bd6:	21dc      	movs	r1, #220	@ 0xdc
 8002bd8:	f823 1022 	strh.w	r1, [r3, r2, lsl #2]
		pixel[i][1] = 20;
 8002bdc:	f8b7 36c6 	ldrh.w	r3, [r7, #1734]	@ 0x6c6
 8002be0:	f507 62da 	add.w	r2, r7, #1744	@ 0x6d0
 8002be4:	f5a2 62d8 	sub.w	r2, r2, #1728	@ 0x6c0
 8002be8:	009b      	lsls	r3, r3, #2
 8002bea:	4413      	add	r3, r2
 8002bec:	2214      	movs	r2, #20
 8002bee:	805a      	strh	r2, [r3, #2]
	for (uint16_t i = 0; i < 280; i++) {
 8002bf0:	f8b7 36c6 	ldrh.w	r3, [r7, #1734]	@ 0x6c6
 8002bf4:	3301      	adds	r3, #1
 8002bf6:	f8a7 36c6 	strh.w	r3, [r7, #1734]	@ 0x6c6
 8002bfa:	f8b7 36c6 	ldrh.w	r3, [r7, #1734]	@ 0x6c6
 8002bfe:	f5b3 7f8c 	cmp.w	r3, #280	@ 0x118
 8002c02:	d3e2      	bcc.n	8002bca <drawSignal+0x1ce>
	}

	for (uint16_t i = 1; i <= 279; i++) {
 8002c04:	2301      	movs	r3, #1
 8002c06:	f8a7 36c4 	strh.w	r3, [r7, #1732]	@ 0x6c4
 8002c0a:	e11b      	b.n	8002e44 <drawSignal+0x448>

		if (point[i] == 0)
 8002c0c:	f8b7 26c4 	ldrh.w	r2, [r7, #1732]	@ 0x6c4
 8002c10:	f507 63da 	add.w	r3, r7, #1744	@ 0x6d0
 8002c14:	f5a3 7318 	sub.w	r3, r3, #608	@ 0x260
 8002c18:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	f000 8105 	beq.w	8002e2c <drawSignal+0x430>
			continue;

		int16_t x1 = i;
 8002c22:	f8b7 36c4 	ldrh.w	r3, [r7, #1732]	@ 0x6c4
 8002c26:	f8a7 36b2 	strh.w	r3, [r7, #1714]	@ 0x6b2
		int16_t x0 = x1 - 1;
 8002c2a:	f8b7 36b2 	ldrh.w	r3, [r7, #1714]	@ 0x6b2
 8002c2e:	3b01      	subs	r3, #1
 8002c30:	b29b      	uxth	r3, r3
 8002c32:	f8a7 36c2 	strh.w	r3, [r7, #1730]	@ 0x6c2

		for (; x0 >= 0; x0--) {
 8002c36:	e010      	b.n	8002c5a <drawSignal+0x25e>
			if (point[x0] != 0)
 8002c38:	f9b7 26c2 	ldrsh.w	r2, [r7, #1730]	@ 0x6c2
 8002c3c:	f507 63da 	add.w	r3, r7, #1744	@ 0x6d0
 8002c40:	f5a3 7318 	sub.w	r3, r3, #608	@ 0x260
 8002c44:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d10b      	bne.n	8002c64 <drawSignal+0x268>
		for (; x0 >= 0; x0--) {
 8002c4c:	f9b7 36c2 	ldrsh.w	r3, [r7, #1730]	@ 0x6c2
 8002c50:	b29b      	uxth	r3, r3
 8002c52:	3b01      	subs	r3, #1
 8002c54:	b29b      	uxth	r3, r3
 8002c56:	f8a7 36c2 	strh.w	r3, [r7, #1730]	@ 0x6c2
 8002c5a:	f9b7 36c2 	ldrsh.w	r3, [r7, #1730]	@ 0x6c2
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	daea      	bge.n	8002c38 <drawSignal+0x23c>
 8002c62:	e000      	b.n	8002c66 <drawSignal+0x26a>
				break;
 8002c64:	bf00      	nop
		}

		if (x0 == 0 && point[x0] == 0)
 8002c66:	f9b7 36c2 	ldrsh.w	r3, [r7, #1730]	@ 0x6c2
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d10a      	bne.n	8002c84 <drawSignal+0x288>
 8002c6e:	f9b7 26c2 	ldrsh.w	r2, [r7, #1730]	@ 0x6c2
 8002c72:	f507 63da 	add.w	r3, r7, #1744	@ 0x6d0
 8002c76:	f5a3 7318 	sub.w	r3, r3, #608	@ 0x260
 8002c7a:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	f000 81fa 	beq.w	8003078 <drawSignal+0x67c>
			return;

		int16_t y0 = point[x0];
 8002c84:	f9b7 26c2 	ldrsh.w	r2, [r7, #1730]	@ 0x6c2
 8002c88:	f507 63da 	add.w	r3, r7, #1744	@ 0x6d0
 8002c8c:	f5a3 7318 	sub.w	r3, r3, #608	@ 0x260
 8002c90:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8002c94:	f8a7 36c0 	strh.w	r3, [r7, #1728]	@ 0x6c0
		int16_t y1 = point[x1];
 8002c98:	f9b7 26b2 	ldrsh.w	r2, [r7, #1714]	@ 0x6b2
 8002c9c:	f507 63da 	add.w	r3, r7, #1744	@ 0x6d0
 8002ca0:	f5a3 7318 	sub.w	r3, r3, #608	@ 0x260
 8002ca4:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8002ca8:	f8a7 36b0 	strh.w	r3, [r7, #1712]	@ 0x6b0

		int16_t dx = (x1 - x0) > 0 ? (x1 - x0) : -(x1 - x0);
 8002cac:	f9b7 26b2 	ldrsh.w	r2, [r7, #1714]	@ 0x6b2
 8002cb0:	f9b7 36c2 	ldrsh.w	r3, [r7, #1730]	@ 0x6c2
 8002cb4:	1ad3      	subs	r3, r2, r3
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	bfb8      	it	lt
 8002cba:	425b      	neglt	r3, r3
 8002cbc:	f8a7 36ae 	strh.w	r3, [r7, #1710]	@ 0x6ae
		int16_t sx = x0 < x1 ? 1 : -1;
 8002cc0:	f9b7 26c2 	ldrsh.w	r2, [r7, #1730]	@ 0x6c2
 8002cc4:	f9b7 36b2 	ldrsh.w	r3, [r7, #1714]	@ 0x6b2
 8002cc8:	429a      	cmp	r2, r3
 8002cca:	da01      	bge.n	8002cd0 <drawSignal+0x2d4>
 8002ccc:	2301      	movs	r3, #1
 8002cce:	e001      	b.n	8002cd4 <drawSignal+0x2d8>
 8002cd0:	f04f 33ff 	mov.w	r3, #4294967295
 8002cd4:	f8a7 36ac 	strh.w	r3, [r7, #1708]	@ 0x6ac
		int16_t dy = (y1 - y0) > 0 ? -(y1 - y0) : (y1 - y0);
 8002cd8:	f9b7 26b0 	ldrsh.w	r2, [r7, #1712]	@ 0x6b0
 8002cdc:	f9b7 36c0 	ldrsh.w	r3, [r7, #1728]	@ 0x6c0
 8002ce0:	1ad3      	subs	r3, r2, r3
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	bfb8      	it	lt
 8002ce6:	425b      	neglt	r3, r3
 8002ce8:	b29b      	uxth	r3, r3
 8002cea:	425b      	negs	r3, r3
 8002cec:	b29b      	uxth	r3, r3
 8002cee:	f8a7 36aa 	strh.w	r3, [r7, #1706]	@ 0x6aa
		int16_t sy = y0 < y1 ? 1 : -1;
 8002cf2:	f9b7 26c0 	ldrsh.w	r2, [r7, #1728]	@ 0x6c0
 8002cf6:	f9b7 36b0 	ldrsh.w	r3, [r7, #1712]	@ 0x6b0
 8002cfa:	429a      	cmp	r2, r3
 8002cfc:	da0e      	bge.n	8002d1c <drawSignal+0x320>
 8002cfe:	2301      	movs	r3, #1
 8002d00:	e00e      	b.n	8002d20 <drawSignal+0x324>
 8002d02:	bf00      	nop
 8002d04:	4a496a80 	.word	0x4a496a80
 8002d08:	45800000 	.word	0x45800000
 8002d0c:	438c0000 	.word	0x438c0000
 8002d10:	2000d0ec 	.word	0x2000d0ec
 8002d14:	2000d0f0 	.word	0x2000d0f0
 8002d18:	43480000 	.word	0x43480000
 8002d1c:	f04f 33ff 	mov.w	r3, #4294967295
 8002d20:	f8a7 36a8 	strh.w	r3, [r7, #1704]	@ 0x6a8
		int16_t error = dx + dy;
 8002d24:	f8b7 26ae 	ldrh.w	r2, [r7, #1710]	@ 0x6ae
 8002d28:	f8b7 36aa 	ldrh.w	r3, [r7, #1706]	@ 0x6aa
 8002d2c:	4413      	add	r3, r2
 8002d2e:	b29b      	uxth	r3, r3
 8002d30:	f8a7 36be 	strh.w	r3, [r7, #1726]	@ 0x6be

		while (1) {

			if (pixel[x0][0] > y0)
 8002d34:	f9b7 26c2 	ldrsh.w	r2, [r7, #1730]	@ 0x6c2
 8002d38:	f507 63da 	add.w	r3, r7, #1744	@ 0x6d0
 8002d3c:	f5a3 63d8 	sub.w	r3, r3, #1728	@ 0x6c0
 8002d40:	f833 3022 	ldrh.w	r3, [r3, r2, lsl #2]
 8002d44:	461a      	mov	r2, r3
 8002d46:	f9b7 36c0 	ldrsh.w	r3, [r7, #1728]	@ 0x6c0
 8002d4a:	429a      	cmp	r2, r3
 8002d4c:	dd09      	ble.n	8002d62 <drawSignal+0x366>
				pixel[x0][0] = y0;
 8002d4e:	f9b7 26c2 	ldrsh.w	r2, [r7, #1730]	@ 0x6c2
 8002d52:	f8b7 16c0 	ldrh.w	r1, [r7, #1728]	@ 0x6c0
 8002d56:	f507 63da 	add.w	r3, r7, #1744	@ 0x6d0
 8002d5a:	f5a3 63d8 	sub.w	r3, r3, #1728	@ 0x6c0
 8002d5e:	f823 1022 	strh.w	r1, [r3, r2, lsl #2]

			if (pixel[x0][1] < y0)
 8002d62:	f9b7 36c2 	ldrsh.w	r3, [r7, #1730]	@ 0x6c2
 8002d66:	f507 62da 	add.w	r2, r7, #1744	@ 0x6d0
 8002d6a:	f5a2 62d8 	sub.w	r2, r2, #1728	@ 0x6c0
 8002d6e:	009b      	lsls	r3, r3, #2
 8002d70:	4413      	add	r3, r2
 8002d72:	885b      	ldrh	r3, [r3, #2]
 8002d74:	461a      	mov	r2, r3
 8002d76:	f9b7 36c0 	ldrsh.w	r3, [r7, #1728]	@ 0x6c0
 8002d7a:	429a      	cmp	r2, r3
 8002d7c:	da0b      	bge.n	8002d96 <drawSignal+0x39a>
				pixel[x0][1] = y0;
 8002d7e:	f9b7 36c2 	ldrsh.w	r3, [r7, #1730]	@ 0x6c2
 8002d82:	f8b7 16c0 	ldrh.w	r1, [r7, #1728]	@ 0x6c0
 8002d86:	f507 62da 	add.w	r2, r7, #1744	@ 0x6d0
 8002d8a:	f5a2 62d8 	sub.w	r2, r2, #1728	@ 0x6c0
 8002d8e:	009b      	lsls	r3, r3, #2
 8002d90:	4413      	add	r3, r2
 8002d92:	460a      	mov	r2, r1
 8002d94:	805a      	strh	r2, [r3, #2]

			if (x0 == x1 && y0 == y1)
 8002d96:	f9b7 26c2 	ldrsh.w	r2, [r7, #1730]	@ 0x6c2
 8002d9a:	f9b7 36b2 	ldrsh.w	r3, [r7, #1714]	@ 0x6b2
 8002d9e:	429a      	cmp	r2, r3
 8002da0:	d105      	bne.n	8002dae <drawSignal+0x3b2>
 8002da2:	f9b7 26c0 	ldrsh.w	r2, [r7, #1728]	@ 0x6c0
 8002da6:	f9b7 36b0 	ldrsh.w	r3, [r7, #1712]	@ 0x6b0
 8002daa:	429a      	cmp	r2, r3
 8002dac:	d040      	beq.n	8002e30 <drawSignal+0x434>
				break;

			int16_t e2 = 2 * error;
 8002dae:	f8b7 36be 	ldrh.w	r3, [r7, #1726]	@ 0x6be
 8002db2:	005b      	lsls	r3, r3, #1
 8002db4:	b29b      	uxth	r3, r3
 8002db6:	f8a7 36a6 	strh.w	r3, [r7, #1702]	@ 0x6a6

			if (e2 >= dy) {
 8002dba:	f9b7 26a6 	ldrsh.w	r2, [r7, #1702]	@ 0x6a6
 8002dbe:	f9b7 36aa 	ldrsh.w	r3, [r7, #1706]	@ 0x6aa
 8002dc2:	429a      	cmp	r2, r3
 8002dc4:	db15      	blt.n	8002df2 <drawSignal+0x3f6>
				if (x0 == x1)
 8002dc6:	f9b7 26c2 	ldrsh.w	r2, [r7, #1730]	@ 0x6c2
 8002dca:	f9b7 36b2 	ldrsh.w	r3, [r7, #1714]	@ 0x6b2
 8002dce:	429a      	cmp	r2, r3
 8002dd0:	d030      	beq.n	8002e34 <drawSignal+0x438>
					break;

				error = error + dy;
 8002dd2:	f8b7 26be 	ldrh.w	r2, [r7, #1726]	@ 0x6be
 8002dd6:	f8b7 36aa 	ldrh.w	r3, [r7, #1706]	@ 0x6aa
 8002dda:	4413      	add	r3, r2
 8002ddc:	b29b      	uxth	r3, r3
 8002dde:	f8a7 36be 	strh.w	r3, [r7, #1726]	@ 0x6be
				x0 = x0 + sx;
 8002de2:	f8b7 26c2 	ldrh.w	r2, [r7, #1730]	@ 0x6c2
 8002de6:	f8b7 36ac 	ldrh.w	r3, [r7, #1708]	@ 0x6ac
 8002dea:	4413      	add	r3, r2
 8002dec:	b29b      	uxth	r3, r3
 8002dee:	f8a7 36c2 	strh.w	r3, [r7, #1730]	@ 0x6c2
			}

			if (e2 <= dx) {
 8002df2:	f9b7 26a6 	ldrsh.w	r2, [r7, #1702]	@ 0x6a6
 8002df6:	f9b7 36ae 	ldrsh.w	r3, [r7, #1710]	@ 0x6ae
 8002dfa:	429a      	cmp	r2, r3
 8002dfc:	dc9a      	bgt.n	8002d34 <drawSignal+0x338>
				if (y0 == y1)
 8002dfe:	f9b7 26c0 	ldrsh.w	r2, [r7, #1728]	@ 0x6c0
 8002e02:	f9b7 36b0 	ldrsh.w	r3, [r7, #1712]	@ 0x6b0
 8002e06:	429a      	cmp	r2, r3
 8002e08:	d016      	beq.n	8002e38 <drawSignal+0x43c>
					break;

				error = error + dx;
 8002e0a:	f8b7 26be 	ldrh.w	r2, [r7, #1726]	@ 0x6be
 8002e0e:	f8b7 36ae 	ldrh.w	r3, [r7, #1710]	@ 0x6ae
 8002e12:	4413      	add	r3, r2
 8002e14:	b29b      	uxth	r3, r3
 8002e16:	f8a7 36be 	strh.w	r3, [r7, #1726]	@ 0x6be
				y0 = y0 + sy;
 8002e1a:	f8b7 26c0 	ldrh.w	r2, [r7, #1728]	@ 0x6c0
 8002e1e:	f8b7 36a8 	ldrh.w	r3, [r7, #1704]	@ 0x6a8
 8002e22:	4413      	add	r3, r2
 8002e24:	b29b      	uxth	r3, r3
 8002e26:	f8a7 36c0 	strh.w	r3, [r7, #1728]	@ 0x6c0
		while (1) {
 8002e2a:	e783      	b.n	8002d34 <drawSignal+0x338>
			continue;
 8002e2c:	bf00      	nop
 8002e2e:	e004      	b.n	8002e3a <drawSignal+0x43e>
				break;
 8002e30:	bf00      	nop
 8002e32:	e002      	b.n	8002e3a <drawSignal+0x43e>
					break;
 8002e34:	bf00      	nop
 8002e36:	e000      	b.n	8002e3a <drawSignal+0x43e>
					break;
 8002e38:	bf00      	nop
	for (uint16_t i = 1; i <= 279; i++) {
 8002e3a:	f8b7 36c4 	ldrh.w	r3, [r7, #1732]	@ 0x6c4
 8002e3e:	3301      	adds	r3, #1
 8002e40:	f8a7 36c4 	strh.w	r3, [r7, #1732]	@ 0x6c4
 8002e44:	f8b7 36c4 	ldrh.w	r3, [r7, #1732]	@ 0x6c4
 8002e48:	f5b3 7f8c 	cmp.w	r3, #280	@ 0x118
 8002e4c:	f4ff aede 	bcc.w	8002c0c <drawSignal+0x210>
			}
		}
	}

	for (uint16_t i = 1; i <= 279; i++) {
 8002e50:	2301      	movs	r3, #1
 8002e52:	f8a7 36bc 	strh.w	r3, [r7, #1724]	@ 0x6bc
 8002e56:	e108      	b.n	800306a <drawSignal+0x66e>
		uint16_t min = pixel[i][0] < pixel_dirty[i][0] ? pixel[i][0] : pixel_dirty[i][0];
 8002e58:	f8b7 36bc 	ldrh.w	r3, [r7, #1724]	@ 0x6bc
 8002e5c:	009b      	lsls	r3, r3, #2
 8002e5e:	f8d7 26e0 	ldr.w	r2, [r7, #1760]	@ 0x6e0
 8002e62:	4413      	add	r3, r2
 8002e64:	881a      	ldrh	r2, [r3, #0]
 8002e66:	f8b7 16bc 	ldrh.w	r1, [r7, #1724]	@ 0x6bc
 8002e6a:	f507 63da 	add.w	r3, r7, #1744	@ 0x6d0
 8002e6e:	f5a3 63d8 	sub.w	r3, r3, #1728	@ 0x6c0
 8002e72:	f833 3021 	ldrh.w	r3, [r3, r1, lsl #2]
 8002e76:	4293      	cmp	r3, r2
 8002e78:	bf28      	it	cs
 8002e7a:	4613      	movcs	r3, r2
 8002e7c:	f8a7 36b6 	strh.w	r3, [r7, #1718]	@ 0x6b6
		uint16_t max = pixel[i][1] > pixel_dirty[i][1] ? pixel[i][1] : pixel_dirty[i][1];
 8002e80:	f8b7 36bc 	ldrh.w	r3, [r7, #1724]	@ 0x6bc
 8002e84:	009b      	lsls	r3, r3, #2
 8002e86:	f8d7 26e0 	ldr.w	r2, [r7, #1760]	@ 0x6e0
 8002e8a:	4413      	add	r3, r2
 8002e8c:	885a      	ldrh	r2, [r3, #2]
 8002e8e:	f8b7 36bc 	ldrh.w	r3, [r7, #1724]	@ 0x6bc
 8002e92:	f507 61da 	add.w	r1, r7, #1744	@ 0x6d0
 8002e96:	f5a1 61d8 	sub.w	r1, r1, #1728	@ 0x6c0
 8002e9a:	009b      	lsls	r3, r3, #2
 8002e9c:	440b      	add	r3, r1
 8002e9e:	885b      	ldrh	r3, [r3, #2]
 8002ea0:	4293      	cmp	r3, r2
 8002ea2:	bf38      	it	cc
 8002ea4:	4613      	movcc	r3, r2
 8002ea6:	f8a7 36b4 	strh.w	r3, [r7, #1716]	@ 0x6b4

		for (uint16_t j = min; j <= max; j++) {
 8002eaa:	f8b7 36b6 	ldrh.w	r3, [r7, #1718]	@ 0x6b6
 8002eae:	f8a7 36ba 	strh.w	r3, [r7, #1722]	@ 0x6ba
 8002eb2:	e0af      	b.n	8003014 <drawSignal+0x618>
			uint8_t draw = 0;
 8002eb4:	2300      	movs	r3, #0
 8002eb6:	f887 36b9 	strb.w	r3, [r7, #1721]	@ 0x6b9
			if (j >= pixel[i][0] && j <= pixel[i][1])
 8002eba:	f8b7 26bc 	ldrh.w	r2, [r7, #1724]	@ 0x6bc
 8002ebe:	f507 63da 	add.w	r3, r7, #1744	@ 0x6d0
 8002ec2:	f5a3 63d8 	sub.w	r3, r3, #1728	@ 0x6c0
 8002ec6:	f833 3022 	ldrh.w	r3, [r3, r2, lsl #2]
 8002eca:	f8b7 26ba 	ldrh.w	r2, [r7, #1722]	@ 0x6ba
 8002ece:	429a      	cmp	r2, r3
 8002ed0:	d30f      	bcc.n	8002ef2 <drawSignal+0x4f6>
 8002ed2:	f8b7 36bc 	ldrh.w	r3, [r7, #1724]	@ 0x6bc
 8002ed6:	f507 62da 	add.w	r2, r7, #1744	@ 0x6d0
 8002eda:	f5a2 62d8 	sub.w	r2, r2, #1728	@ 0x6c0
 8002ede:	009b      	lsls	r3, r3, #2
 8002ee0:	4413      	add	r3, r2
 8002ee2:	885b      	ldrh	r3, [r3, #2]
 8002ee4:	f8b7 26ba 	ldrh.w	r2, [r7, #1722]	@ 0x6ba
 8002ee8:	429a      	cmp	r2, r3
 8002eea:	d802      	bhi.n	8002ef2 <drawSignal+0x4f6>
				draw = 1;
 8002eec:	2301      	movs	r3, #1
 8002eee:	f887 36b9 	strb.w	r3, [r7, #1721]	@ 0x6b9

			uint8_t clear = 0;
 8002ef2:	2300      	movs	r3, #0
 8002ef4:	f887 36b8 	strb.w	r3, [r7, #1720]	@ 0x6b8
			if (j >= pixel_dirty[i][0] && j <= pixel_dirty[i][1])
 8002ef8:	f8b7 36bc 	ldrh.w	r3, [r7, #1724]	@ 0x6bc
 8002efc:	009b      	lsls	r3, r3, #2
 8002efe:	f8d7 26e0 	ldr.w	r2, [r7, #1760]	@ 0x6e0
 8002f02:	4413      	add	r3, r2
 8002f04:	881b      	ldrh	r3, [r3, #0]
 8002f06:	f8b7 26ba 	ldrh.w	r2, [r7, #1722]	@ 0x6ba
 8002f0a:	429a      	cmp	r2, r3
 8002f0c:	d30d      	bcc.n	8002f2a <drawSignal+0x52e>
 8002f0e:	f8b7 36bc 	ldrh.w	r3, [r7, #1724]	@ 0x6bc
 8002f12:	009b      	lsls	r3, r3, #2
 8002f14:	f8d7 26e0 	ldr.w	r2, [r7, #1760]	@ 0x6e0
 8002f18:	4413      	add	r3, r2
 8002f1a:	885b      	ldrh	r3, [r3, #2]
 8002f1c:	f8b7 26ba 	ldrh.w	r2, [r7, #1722]	@ 0x6ba
 8002f20:	429a      	cmp	r2, r3
 8002f22:	d802      	bhi.n	8002f2a <drawSignal+0x52e>
				clear = 1;
 8002f24:	2301      	movs	r3, #1
 8002f26:	f887 36b8 	strb.w	r3, [r7, #1720]	@ 0x6b8

			if (draw && !clear && j > 21)
 8002f2a:	f897 36b9 	ldrb.w	r3, [r7, #1721]	@ 0x6b9
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d016      	beq.n	8002f60 <drawSignal+0x564>
 8002f32:	f897 36b8 	ldrb.w	r3, [r7, #1720]	@ 0x6b8
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d112      	bne.n	8002f60 <drawSignal+0x564>
 8002f3a:	f8b7 36ba 	ldrh.w	r3, [r7, #1722]	@ 0x6ba
 8002f3e:	2b15      	cmp	r3, #21
 8002f40:	d90e      	bls.n	8002f60 <drawSignal+0x564>
				ILI9341_DrawPixel(display, i + 20, j, color);
 8002f42:	f8b7 36bc 	ldrh.w	r3, [r7, #1724]	@ 0x6bc
 8002f46:	3314      	adds	r3, #20
 8002f48:	b299      	uxth	r1, r3
 8002f4a:	f8b7 36e8 	ldrh.w	r3, [r7, #1768]	@ 0x6e8
 8002f4e:	f8b7 26ba 	ldrh.w	r2, [r7, #1722]	@ 0x6ba
 8002f52:	f507 60da 	add.w	r0, r7, #1744	@ 0x6d0
 8002f56:	f2a0 60c4 	subw	r0, r0, #1732	@ 0x6c4
 8002f5a:	6800      	ldr	r0, [r0, #0]
 8002f5c:	f7fe fe8a 	bl	8001c74 <ILI9341_DrawPixel>

			if (!draw && clear) {
 8002f60:	f897 36b9 	ldrb.w	r3, [r7, #1721]	@ 0x6b9
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d150      	bne.n	800300a <drawSignal+0x60e>
 8002f68:	f897 36b8 	ldrb.w	r3, [r7, #1720]	@ 0x6b8
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d04c      	beq.n	800300a <drawSignal+0x60e>
				if (((i % 25) == 0 && (j % 2) == 0) || ((i % 2) == 0 && ((j - 20) % 25) == 0))
 8002f70:	f8b7 26bc 	ldrh.w	r2, [r7, #1724]	@ 0x6bc
 8002f74:	4b43      	ldr	r3, [pc, #268]	@ (8003084 <drawSignal+0x688>)
 8002f76:	fba3 1302 	umull	r1, r3, r3, r2
 8002f7a:	08d9      	lsrs	r1, r3, #3
 8002f7c:	460b      	mov	r3, r1
 8002f7e:	009b      	lsls	r3, r3, #2
 8002f80:	440b      	add	r3, r1
 8002f82:	0099      	lsls	r1, r3, #2
 8002f84:	440b      	add	r3, r1
 8002f86:	1ad3      	subs	r3, r2, r3
 8002f88:	b29b      	uxth	r3, r3
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d106      	bne.n	8002f9c <drawSignal+0x5a0>
 8002f8e:	f8b7 36ba 	ldrh.w	r3, [r7, #1722]	@ 0x6ba
 8002f92:	f003 0301 	and.w	r3, r3, #1
 8002f96:	b29b      	uxth	r3, r3
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d018      	beq.n	8002fce <drawSignal+0x5d2>
 8002f9c:	f8b7 36bc 	ldrh.w	r3, [r7, #1724]	@ 0x6bc
 8002fa0:	f003 0301 	and.w	r3, r3, #1
 8002fa4:	b29b      	uxth	r3, r3
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d121      	bne.n	8002fee <drawSignal+0x5f2>
 8002faa:	f8b7 36ba 	ldrh.w	r3, [r7, #1722]	@ 0x6ba
 8002fae:	f1a3 0114 	sub.w	r1, r3, #20
 8002fb2:	4b34      	ldr	r3, [pc, #208]	@ (8003084 <drawSignal+0x688>)
 8002fb4:	fb83 2301 	smull	r2, r3, r3, r1
 8002fb8:	10da      	asrs	r2, r3, #3
 8002fba:	17cb      	asrs	r3, r1, #31
 8002fbc:	1ad2      	subs	r2, r2, r3
 8002fbe:	4613      	mov	r3, r2
 8002fc0:	009b      	lsls	r3, r3, #2
 8002fc2:	4413      	add	r3, r2
 8002fc4:	009a      	lsls	r2, r3, #2
 8002fc6:	4413      	add	r3, r2
 8002fc8:	1aca      	subs	r2, r1, r3
 8002fca:	2a00      	cmp	r2, #0
 8002fcc:	d10f      	bne.n	8002fee <drawSignal+0x5f2>
					ILI9341_DrawPixel(display, i + 20, j,  ILI9341_GRAY);
 8002fce:	f8b7 36bc 	ldrh.w	r3, [r7, #1724]	@ 0x6bc
 8002fd2:	3314      	adds	r3, #20
 8002fd4:	b299      	uxth	r1, r3
 8002fd6:	f8b7 26ba 	ldrh.w	r2, [r7, #1722]	@ 0x6ba
 8002fda:	f507 63da 	add.w	r3, r7, #1744	@ 0x6d0
 8002fde:	f2a3 60c4 	subw	r0, r3, #1732	@ 0x6c4
 8002fe2:	f245 238a 	movw	r3, #21130	@ 0x528a
 8002fe6:	6800      	ldr	r0, [r0, #0]
 8002fe8:	f7fe fe44 	bl	8001c74 <ILI9341_DrawPixel>
 8002fec:	e00d      	b.n	800300a <drawSignal+0x60e>
				else
					ILI9341_DrawPixel(display, i + 20, j, ILI9341_BLACK);
 8002fee:	f8b7 36bc 	ldrh.w	r3, [r7, #1724]	@ 0x6bc
 8002ff2:	3314      	adds	r3, #20
 8002ff4:	b299      	uxth	r1, r3
 8002ff6:	f8b7 26ba 	ldrh.w	r2, [r7, #1722]	@ 0x6ba
 8002ffa:	f507 63da 	add.w	r3, r7, #1744	@ 0x6d0
 8002ffe:	f2a3 60c4 	subw	r0, r3, #1732	@ 0x6c4
 8003002:	2300      	movs	r3, #0
 8003004:	6800      	ldr	r0, [r0, #0]
 8003006:	f7fe fe35 	bl	8001c74 <ILI9341_DrawPixel>
		for (uint16_t j = min; j <= max; j++) {
 800300a:	f8b7 36ba 	ldrh.w	r3, [r7, #1722]	@ 0x6ba
 800300e:	3301      	adds	r3, #1
 8003010:	f8a7 36ba 	strh.w	r3, [r7, #1722]	@ 0x6ba
 8003014:	f8b7 26ba 	ldrh.w	r2, [r7, #1722]	@ 0x6ba
 8003018:	f8b7 36b4 	ldrh.w	r3, [r7, #1716]	@ 0x6b4
 800301c:	429a      	cmp	r2, r3
 800301e:	f67f af49 	bls.w	8002eb4 <drawSignal+0x4b8>
			}
		}

		pixel_dirty[i][0] = pixel[i][0];
 8003022:	f8b7 16bc 	ldrh.w	r1, [r7, #1724]	@ 0x6bc
 8003026:	f8b7 36bc 	ldrh.w	r3, [r7, #1724]	@ 0x6bc
 800302a:	009b      	lsls	r3, r3, #2
 800302c:	f8d7 26e0 	ldr.w	r2, [r7, #1760]	@ 0x6e0
 8003030:	4413      	add	r3, r2
 8003032:	f507 62da 	add.w	r2, r7, #1744	@ 0x6d0
 8003036:	f5a2 62d8 	sub.w	r2, r2, #1728	@ 0x6c0
 800303a:	f832 2021 	ldrh.w	r2, [r2, r1, lsl #2]
 800303e:	801a      	strh	r2, [r3, #0]
		pixel_dirty[i][1] = pixel[i][1];
 8003040:	f8b7 36bc 	ldrh.w	r3, [r7, #1724]	@ 0x6bc
 8003044:	f8b7 26bc 	ldrh.w	r2, [r7, #1724]	@ 0x6bc
 8003048:	0092      	lsls	r2, r2, #2
 800304a:	f8d7 16e0 	ldr.w	r1, [r7, #1760]	@ 0x6e0
 800304e:	440a      	add	r2, r1
 8003050:	f507 61da 	add.w	r1, r7, #1744	@ 0x6d0
 8003054:	f5a1 61d8 	sub.w	r1, r1, #1728	@ 0x6c0
 8003058:	009b      	lsls	r3, r3, #2
 800305a:	440b      	add	r3, r1
 800305c:	885b      	ldrh	r3, [r3, #2]
 800305e:	8053      	strh	r3, [r2, #2]
	for (uint16_t i = 1; i <= 279; i++) {
 8003060:	f8b7 36bc 	ldrh.w	r3, [r7, #1724]	@ 0x6bc
 8003064:	3301      	adds	r3, #1
 8003066:	f8a7 36bc 	strh.w	r3, [r7, #1724]	@ 0x6bc
 800306a:	f8b7 36bc 	ldrh.w	r3, [r7, #1724]	@ 0x6bc
 800306e:	f5b3 7f8c 	cmp.w	r3, #280	@ 0x118
 8003072:	f4ff aef1 	bcc.w	8002e58 <drawSignal+0x45c>
 8003076:	e000      	b.n	800307a <drawSignal+0x67e>
			return;
 8003078:	bf00      	nop
	}
}
 800307a:	f207 67d4 	addw	r7, r7, #1748	@ 0x6d4
 800307e:	46bd      	mov	sp, r7
 8003080:	bd90      	pop	{r4, r7, pc}
 8003082:	bf00      	nop
 8003084:	51eb851f 	.word	0x51eb851f

08003088 <clearSignal>:

static void clearSignal(ILI9341TypeDef *display, uint16_t pixel_dirty[280][2])
{
 8003088:	b580      	push	{r7, lr}
 800308a:	b084      	sub	sp, #16
 800308c:	af00      	add	r7, sp, #0
 800308e:	6078      	str	r0, [r7, #4]
 8003090:	6039      	str	r1, [r7, #0]
	for (uint16_t i = 1; i <= 279; i++) {
 8003092:	2301      	movs	r3, #1
 8003094:	81fb      	strh	r3, [r7, #14]
 8003096:	e05d      	b.n	8003154 <clearSignal+0xcc>
		for (uint16_t j = pixel_dirty[i][0]; j <= pixel_dirty[i][1]; j++) {
 8003098:	89fb      	ldrh	r3, [r7, #14]
 800309a:	009b      	lsls	r3, r3, #2
 800309c:	683a      	ldr	r2, [r7, #0]
 800309e:	4413      	add	r3, r2
 80030a0:	881b      	ldrh	r3, [r3, #0]
 80030a2:	81bb      	strh	r3, [r7, #12]
 80030a4:	e03f      	b.n	8003126 <clearSignal+0x9e>
			if (((i % 25) == 0 && (j % 2) == 0) || ((i % 2) == 0 && ((j - 20) % 25) == 0))
 80030a6:	89fa      	ldrh	r2, [r7, #14]
 80030a8:	4b2f      	ldr	r3, [pc, #188]	@ (8003168 <clearSignal+0xe0>)
 80030aa:	fba3 1302 	umull	r1, r3, r3, r2
 80030ae:	08d9      	lsrs	r1, r3, #3
 80030b0:	460b      	mov	r3, r1
 80030b2:	009b      	lsls	r3, r3, #2
 80030b4:	440b      	add	r3, r1
 80030b6:	0099      	lsls	r1, r3, #2
 80030b8:	440b      	add	r3, r1
 80030ba:	1ad3      	subs	r3, r2, r3
 80030bc:	b29b      	uxth	r3, r3
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d105      	bne.n	80030ce <clearSignal+0x46>
 80030c2:	89bb      	ldrh	r3, [r7, #12]
 80030c4:	f003 0301 	and.w	r3, r3, #1
 80030c8:	b29b      	uxth	r3, r3
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d016      	beq.n	80030fc <clearSignal+0x74>
 80030ce:	89fb      	ldrh	r3, [r7, #14]
 80030d0:	f003 0301 	and.w	r3, r3, #1
 80030d4:	b29b      	uxth	r3, r3
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d11a      	bne.n	8003110 <clearSignal+0x88>
 80030da:	89bb      	ldrh	r3, [r7, #12]
 80030dc:	f1a3 0114 	sub.w	r1, r3, #20
 80030e0:	4b21      	ldr	r3, [pc, #132]	@ (8003168 <clearSignal+0xe0>)
 80030e2:	fb83 2301 	smull	r2, r3, r3, r1
 80030e6:	10da      	asrs	r2, r3, #3
 80030e8:	17cb      	asrs	r3, r1, #31
 80030ea:	1ad2      	subs	r2, r2, r3
 80030ec:	4613      	mov	r3, r2
 80030ee:	009b      	lsls	r3, r3, #2
 80030f0:	4413      	add	r3, r2
 80030f2:	009a      	lsls	r2, r3, #2
 80030f4:	4413      	add	r3, r2
 80030f6:	1aca      	subs	r2, r1, r3
 80030f8:	2a00      	cmp	r2, #0
 80030fa:	d109      	bne.n	8003110 <clearSignal+0x88>
				ILI9341_DrawPixel(display, i + 20, j,  ILI9341_GRAY);
 80030fc:	89fb      	ldrh	r3, [r7, #14]
 80030fe:	3314      	adds	r3, #20
 8003100:	b299      	uxth	r1, r3
 8003102:	89ba      	ldrh	r2, [r7, #12]
 8003104:	f245 238a 	movw	r3, #21130	@ 0x528a
 8003108:	6878      	ldr	r0, [r7, #4]
 800310a:	f7fe fdb3 	bl	8001c74 <ILI9341_DrawPixel>
 800310e:	e007      	b.n	8003120 <clearSignal+0x98>
			else
				ILI9341_DrawPixel(display, i + 20, j, ILI9341_BLACK);
 8003110:	89fb      	ldrh	r3, [r7, #14]
 8003112:	3314      	adds	r3, #20
 8003114:	b299      	uxth	r1, r3
 8003116:	89ba      	ldrh	r2, [r7, #12]
 8003118:	2300      	movs	r3, #0
 800311a:	6878      	ldr	r0, [r7, #4]
 800311c:	f7fe fdaa 	bl	8001c74 <ILI9341_DrawPixel>
		for (uint16_t j = pixel_dirty[i][0]; j <= pixel_dirty[i][1]; j++) {
 8003120:	89bb      	ldrh	r3, [r7, #12]
 8003122:	3301      	adds	r3, #1
 8003124:	81bb      	strh	r3, [r7, #12]
 8003126:	89fb      	ldrh	r3, [r7, #14]
 8003128:	009b      	lsls	r3, r3, #2
 800312a:	683a      	ldr	r2, [r7, #0]
 800312c:	4413      	add	r3, r2
 800312e:	885b      	ldrh	r3, [r3, #2]
 8003130:	89ba      	ldrh	r2, [r7, #12]
 8003132:	429a      	cmp	r2, r3
 8003134:	d9b7      	bls.n	80030a6 <clearSignal+0x1e>
		}

		pixel_dirty[i][0] = 0;
 8003136:	89fb      	ldrh	r3, [r7, #14]
 8003138:	009b      	lsls	r3, r3, #2
 800313a:	683a      	ldr	r2, [r7, #0]
 800313c:	4413      	add	r3, r2
 800313e:	2200      	movs	r2, #0
 8003140:	801a      	strh	r2, [r3, #0]
		pixel_dirty[i][1] = 0;
 8003142:	89fb      	ldrh	r3, [r7, #14]
 8003144:	009b      	lsls	r3, r3, #2
 8003146:	683a      	ldr	r2, [r7, #0]
 8003148:	4413      	add	r3, r2
 800314a:	2200      	movs	r2, #0
 800314c:	805a      	strh	r2, [r3, #2]
	for (uint16_t i = 1; i <= 279; i++) {
 800314e:	89fb      	ldrh	r3, [r7, #14]
 8003150:	3301      	adds	r3, #1
 8003152:	81fb      	strh	r3, [r7, #14]
 8003154:	89fb      	ldrh	r3, [r7, #14]
 8003156:	f5b3 7f8c 	cmp.w	r3, #280	@ 0x118
 800315a:	d39d      	bcc.n	8003098 <clearSignal+0x10>
	}
}
 800315c:	bf00      	nop
 800315e:	bf00      	nop
 8003160:	3710      	adds	r7, #16
 8003162:	46bd      	mov	sp, r7
 8003164:	bd80      	pop	{r7, pc}
 8003166:	bf00      	nop
 8003168:	51eb851f 	.word	0x51eb851f

0800316c <drawSignalParam>:

static void drawSignalParam(ILI9341TypeDef *display, char *string, size_t size, uint16_t adc_max, uint16_t adc_min, uint32_t adc_period)
{
 800316c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003170:	b096      	sub	sp, #88	@ 0x58
 8003172:	af0c      	add	r7, sp, #48	@ 0x30
 8003174:	60f8      	str	r0, [r7, #12]
 8003176:	60b9      	str	r1, [r7, #8]
 8003178:	607a      	str	r2, [r7, #4]
 800317a:	807b      	strh	r3, [r7, #2]
	float max  = (float)(adc_max) * 3300000.0f / 4096.0f;
 800317c:	887b      	ldrh	r3, [r7, #2]
 800317e:	ee07 3a90 	vmov	s15, r3
 8003182:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003186:	ed9f 7a7f 	vldr	s14, [pc, #508]	@ 8003384 <drawSignalParam+0x218>
 800318a:	ee27 7a87 	vmul.f32	s14, s15, s14
 800318e:	eddf 6a7e 	vldr	s13, [pc, #504]	@ 8003388 <drawSignalParam+0x21c>
 8003192:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003196:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
	float min  = (float)(adc_min) * 3300000.0f / 4096.0f;
 800319a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800319e:	ee07 3a90 	vmov	s15, r3
 80031a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80031a6:	ed9f 7a77 	vldr	s14, [pc, #476]	@ 8003384 <drawSignalParam+0x218>
 80031aa:	ee27 7a87 	vmul.f32	s14, s15, s14
 80031ae:	eddf 6a76 	vldr	s13, [pc, #472]	@ 8003388 <drawSignalParam+0x21c>
 80031b2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80031b6:	edc7 7a08 	vstr	s15, [r7, #32]
	float freq = 1.0f / ((float)(adc_period) / 1000000.0f);
 80031ba:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80031bc:	ee07 3a90 	vmov	s15, r3
 80031c0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80031c4:	eddf 6a71 	vldr	s13, [pc, #452]	@ 800338c <drawSignalParam+0x220>
 80031c8:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80031cc:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80031d0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80031d4:	edc7 7a07 	vstr	s15, [r7, #28]
	char *max_postfix  = "";
 80031d8:	4b6d      	ldr	r3, [pc, #436]	@ (8003390 <drawSignalParam+0x224>)
 80031da:	61bb      	str	r3, [r7, #24]
	char *min_postfix  = "";
 80031dc:	4b6c      	ldr	r3, [pc, #432]	@ (8003390 <drawSignalParam+0x224>)
 80031de:	617b      	str	r3, [r7, #20]
	char *freq_postfix = "";
 80031e0:	4b6b      	ldr	r3, [pc, #428]	@ (8003390 <drawSignalParam+0x224>)
 80031e2:	613b      	str	r3, [r7, #16]

	if (max >= 1000000.0f) {
 80031e4:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 80031e8:	ed9f 7a68 	vldr	s14, [pc, #416]	@ 800338c <drawSignalParam+0x220>
 80031ec:	eef4 7ac7 	vcmpe.f32	s15, s14
 80031f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80031f4:	db0a      	blt.n	800320c <drawSignalParam+0xa0>
		max /= 1000000.0f;
 80031f6:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 80031fa:	eddf 6a64 	vldr	s13, [pc, #400]	@ 800338c <drawSignalParam+0x220>
 80031fe:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003202:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
		max_postfix = " V";
 8003206:	4b63      	ldr	r3, [pc, #396]	@ (8003394 <drawSignalParam+0x228>)
 8003208:	61bb      	str	r3, [r7, #24]
 800320a:	e015      	b.n	8003238 <drawSignalParam+0xcc>
	} else if (max >= 1000.0f) {
 800320c:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8003210:	ed9f 7a61 	vldr	s14, [pc, #388]	@ 8003398 <drawSignalParam+0x22c>
 8003214:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003218:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800321c:	db0a      	blt.n	8003234 <drawSignalParam+0xc8>
		max /= 1000.0f;
 800321e:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8003222:	eddf 6a5d 	vldr	s13, [pc, #372]	@ 8003398 <drawSignalParam+0x22c>
 8003226:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800322a:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
		max_postfix = "mV";
 800322e:	4b5b      	ldr	r3, [pc, #364]	@ (800339c <drawSignalParam+0x230>)
 8003230:	61bb      	str	r3, [r7, #24]
 8003232:	e001      	b.n	8003238 <drawSignalParam+0xcc>
	} else
		max_postfix = "uV";
 8003234:	4b5a      	ldr	r3, [pc, #360]	@ (80033a0 <drawSignalParam+0x234>)
 8003236:	61bb      	str	r3, [r7, #24]

	if (min >= 1000000.0f) {
 8003238:	edd7 7a08 	vldr	s15, [r7, #32]
 800323c:	ed9f 7a53 	vldr	s14, [pc, #332]	@ 800338c <drawSignalParam+0x220>
 8003240:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003244:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003248:	db0a      	blt.n	8003260 <drawSignalParam+0xf4>
		min /= 1000000.0f;
 800324a:	ed97 7a08 	vldr	s14, [r7, #32]
 800324e:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800338c <drawSignalParam+0x220>
 8003252:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003256:	edc7 7a08 	vstr	s15, [r7, #32]
		min_postfix = " V";
 800325a:	4b4e      	ldr	r3, [pc, #312]	@ (8003394 <drawSignalParam+0x228>)
 800325c:	617b      	str	r3, [r7, #20]
 800325e:	e015      	b.n	800328c <drawSignalParam+0x120>
	} else if (min >= 1000.0f) {
 8003260:	edd7 7a08 	vldr	s15, [r7, #32]
 8003264:	ed9f 7a4c 	vldr	s14, [pc, #304]	@ 8003398 <drawSignalParam+0x22c>
 8003268:	eef4 7ac7 	vcmpe.f32	s15, s14
 800326c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003270:	db0a      	blt.n	8003288 <drawSignalParam+0x11c>
		min /= 1000.0f;
 8003272:	ed97 7a08 	vldr	s14, [r7, #32]
 8003276:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8003398 <drawSignalParam+0x22c>
 800327a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800327e:	edc7 7a08 	vstr	s15, [r7, #32]
		min_postfix = "mV";
 8003282:	4b46      	ldr	r3, [pc, #280]	@ (800339c <drawSignalParam+0x230>)
 8003284:	617b      	str	r3, [r7, #20]
 8003286:	e001      	b.n	800328c <drawSignalParam+0x120>
	} else
		min_postfix = "uV";
 8003288:	4b45      	ldr	r3, [pc, #276]	@ (80033a0 <drawSignalParam+0x234>)
 800328a:	617b      	str	r3, [r7, #20]

	if (freq >= 1000000.0f) {
 800328c:	edd7 7a07 	vldr	s15, [r7, #28]
 8003290:	ed9f 7a3e 	vldr	s14, [pc, #248]	@ 800338c <drawSignalParam+0x220>
 8003294:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003298:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800329c:	db0a      	blt.n	80032b4 <drawSignalParam+0x148>
		freq /= 1000000.0f;
 800329e:	ed97 7a07 	vldr	s14, [r7, #28]
 80032a2:	eddf 6a3a 	vldr	s13, [pc, #232]	@ 800338c <drawSignalParam+0x220>
 80032a6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80032aa:	edc7 7a07 	vstr	s15, [r7, #28]
		freq_postfix = "MHz";
 80032ae:	4b3d      	ldr	r3, [pc, #244]	@ (80033a4 <drawSignalParam+0x238>)
 80032b0:	613b      	str	r3, [r7, #16]
 80032b2:	e015      	b.n	80032e0 <drawSignalParam+0x174>
	} else if (freq >= 1000.0f) {
 80032b4:	edd7 7a07 	vldr	s15, [r7, #28]
 80032b8:	ed9f 7a37 	vldr	s14, [pc, #220]	@ 8003398 <drawSignalParam+0x22c>
 80032bc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80032c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80032c4:	db0a      	blt.n	80032dc <drawSignalParam+0x170>
		freq /= 1000.0f;
 80032c6:	ed97 7a07 	vldr	s14, [r7, #28]
 80032ca:	eddf 6a33 	vldr	s13, [pc, #204]	@ 8003398 <drawSignalParam+0x22c>
 80032ce:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80032d2:	edc7 7a07 	vstr	s15, [r7, #28]
		freq_postfix = "kHz";
 80032d6:	4b34      	ldr	r3, [pc, #208]	@ (80033a8 <drawSignalParam+0x23c>)
 80032d8:	613b      	str	r3, [r7, #16]
 80032da:	e001      	b.n	80032e0 <drawSignalParam+0x174>
	} else
		freq_postfix = " Hz";
 80032dc:	4b33      	ldr	r3, [pc, #204]	@ (80033ac <drawSignalParam+0x240>)
 80032de:	613b      	str	r3, [r7, #16]

	if (adc_period != 0)
 80032e0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d020      	beq.n	8003328 <drawSignalParam+0x1bc>
		snprintf(string, size, "ampl:%3.1f%s~%3.1f%s freq:%3.0f%s  ", min, min_postfix, max, max_postfix, freq, freq_postfix);
 80032e6:	6a38      	ldr	r0, [r7, #32]
 80032e8:	f7fd f936 	bl	8000558 <__aeabi_f2d>
 80032ec:	4604      	mov	r4, r0
 80032ee:	460d      	mov	r5, r1
 80032f0:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80032f2:	f7fd f931 	bl	8000558 <__aeabi_f2d>
 80032f6:	4680      	mov	r8, r0
 80032f8:	4689      	mov	r9, r1
 80032fa:	69f8      	ldr	r0, [r7, #28]
 80032fc:	f7fd f92c 	bl	8000558 <__aeabi_f2d>
 8003300:	4602      	mov	r2, r0
 8003302:	460b      	mov	r3, r1
 8003304:	6939      	ldr	r1, [r7, #16]
 8003306:	910a      	str	r1, [sp, #40]	@ 0x28
 8003308:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800330c:	69bb      	ldr	r3, [r7, #24]
 800330e:	9306      	str	r3, [sp, #24]
 8003310:	e9cd 8904 	strd	r8, r9, [sp, #16]
 8003314:	697b      	ldr	r3, [r7, #20]
 8003316:	9302      	str	r3, [sp, #8]
 8003318:	e9cd 4500 	strd	r4, r5, [sp]
 800331c:	4a24      	ldr	r2, [pc, #144]	@ (80033b0 <drawSignalParam+0x244>)
 800331e:	6879      	ldr	r1, [r7, #4]
 8003320:	68b8      	ldr	r0, [r7, #8]
 8003322:	f008 fcaf 	bl	800bc84 <sniprintf>
 8003326:	e016      	b.n	8003356 <drawSignalParam+0x1ea>
	else
		snprintf(string, size, "ampl:%3.1f%s~%3.1f%s freq:??? Hz  ", min, min_postfix, max, max_postfix);
 8003328:	6a38      	ldr	r0, [r7, #32]
 800332a:	f7fd f915 	bl	8000558 <__aeabi_f2d>
 800332e:	4604      	mov	r4, r0
 8003330:	460d      	mov	r5, r1
 8003332:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8003334:	f7fd f910 	bl	8000558 <__aeabi_f2d>
 8003338:	4602      	mov	r2, r0
 800333a:	460b      	mov	r3, r1
 800333c:	69b9      	ldr	r1, [r7, #24]
 800333e:	9106      	str	r1, [sp, #24]
 8003340:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8003344:	697b      	ldr	r3, [r7, #20]
 8003346:	9302      	str	r3, [sp, #8]
 8003348:	e9cd 4500 	strd	r4, r5, [sp]
 800334c:	4a19      	ldr	r2, [pc, #100]	@ (80033b4 <drawSignalParam+0x248>)
 800334e:	6879      	ldr	r1, [r7, #4]
 8003350:	68b8      	ldr	r0, [r7, #8]
 8003352:	f008 fc97 	bl	800bc84 <sniprintf>

	ILI9341_WriteString(display, 98, 225, string, Font_7x10, ILI9341_WHITE, ILI9341_BLACK);
 8003356:	2300      	movs	r3, #0
 8003358:	9303      	str	r3, [sp, #12]
 800335a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800335e:	9302      	str	r3, [sp, #8]
 8003360:	4a15      	ldr	r2, [pc, #84]	@ (80033b8 <drawSignalParam+0x24c>)
 8003362:	466b      	mov	r3, sp
 8003364:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003368:	e883 0003 	stmia.w	r3, {r0, r1}
 800336c:	68bb      	ldr	r3, [r7, #8]
 800336e:	22e1      	movs	r2, #225	@ 0xe1
 8003370:	2162      	movs	r1, #98	@ 0x62
 8003372:	68f8      	ldr	r0, [r7, #12]
 8003374:	f7fe fea1 	bl	80020ba <ILI9341_WriteString>
}
 8003378:	bf00      	nop
 800337a:	3728      	adds	r7, #40	@ 0x28
 800337c:	46bd      	mov	sp, r7
 800337e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8003382:	bf00      	nop
 8003384:	4a496a80 	.word	0x4a496a80
 8003388:	45800000 	.word	0x45800000
 800338c:	49742400 	.word	0x49742400
 8003390:	0800f590 	.word	0x0800f590
 8003394:	0800f594 	.word	0x0800f594
 8003398:	447a0000 	.word	0x447a0000
 800339c:	0800f598 	.word	0x0800f598
 80033a0:	0800f59c 	.word	0x0800f59c
 80033a4:	0800f5a0 	.word	0x0800f5a0
 80033a8:	0800f5a4 	.word	0x0800f5a4
 80033ac:	0800f5a8 	.word	0x0800f5a8
 80033b0:	0800f5ac 	.word	0x0800f5ac
 80033b4:	0800f5d0 	.word	0x0800f5d0
 80033b8:	20000000 	.word	0x20000000

080033bc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80033bc:	b5b0      	push	{r4, r5, r7, lr}
 80033be:	f5ad 6d2e 	sub.w	sp, sp, #2784	@ 0xae0
 80033c2:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80033c4:	f002 f87a 	bl	80054bc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80033c8:	f001 f9fe 	bl	80047c8 <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80033cc:	f001 fa64 	bl	8004898 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80033d0:	f7fe f828 	bl	8001424 <MX_GPIO_Init>
  MX_DMA_Init();
 80033d4:	f7fd fff0 	bl	80013b8 <MX_DMA_Init>
  MX_USART2_UART_Init();
 80033d8:	f001 ff6c 	bl	80052b4 <MX_USART2_UART_Init>
  MX_I2S2_Init();
 80033dc:	f7fe f8c2 	bl	8001564 <MX_I2S2_Init>
  MX_USART6_UART_Init();
 80033e0:	f001 ff92 	bl	8005308 <MX_USART6_UART_Init>
  MX_CRC_Init();
 80033e4:	f7fd ffb2 	bl	800134c <MX_CRC_Init>
  MX_I2S3_Init();
 80033e8:	f7fe f8ea 	bl	80015c0 <MX_I2S3_Init>
  MX_TIM2_Init();
 80033ec:	f001 fd32 	bl	8004e54 <MX_TIM2_Init>
  MX_SPI5_Init();
 80033f0:	f001 faae 	bl	8004950 <MX_SPI5_Init>
  MX_TIM1_Init();
 80033f4:	f001 fc8c 	bl	8004d10 <MX_TIM1_Init>
  MX_ADC1_Init();
 80033f8:	f7fd fe9a 	bl	8001130 <MX_ADC1_Init>
  MX_FATFS_Init();
 80033fc:	f007 fbe8 	bl	800abd0 <MX_FATFS_Init>
  MX_SPI4_Init();
 8003400:	f001 fa70 	bl	80048e4 <MX_SPI4_Init>
  MX_TIM10_Init();
 8003404:	f001 fe1a 	bl	800503c <MX_TIM10_Init>
  MX_TIM3_Init();
 8003408:	f001 fd70 	bl	8004eec <MX_TIM3_Init>
  MX_TIM4_Init();
 800340c:	f001 fdc2 	bl	8004f94 <MX_TIM4_Init>
  {
      Error_Handler();
  }
#endif

  if (HAL_UART_Receive_IT(&huart6, &rx_byte, 1) != HAL_OK)
 8003410:	2201      	movs	r2, #1
 8003412:	49a7      	ldr	r1, [pc, #668]	@ (80036b0 <main+0x2f4>)
 8003414:	48a7      	ldr	r0, [pc, #668]	@ (80036b4 <main+0x2f8>)
 8003416:	f006 fc4a 	bl	8009cae <HAL_UART_Receive_IT>
 800341a:	4603      	mov	r3, r0
 800341c:	2b00      	cmp	r3, #0
 800341e:	d001      	beq.n	8003424 <main+0x68>
  {
      Error_Handler();
 8003420:	f001 fa5a 	bl	80048d8 <Error_Handler>
  }

  printf("AI Model Application Started...\r\n");
 8003424:	48a4      	ldr	r0, [pc, #656]	@ (80036b8 <main+0x2fc>)
 8003426:	f008 fc25 	bl	800bc74 <puts>


  txIndex = 0;
 800342a:	4ba4      	ldr	r3, [pc, #656]	@ (80036bc <main+0x300>)
 800342c:	2200      	movs	r2, #0
 800342e:	601a      	str	r2, [r3, #0]


  // Display init
  display.spi             = &hspi5;
 8003430:	4ba3      	ldr	r3, [pc, #652]	@ (80036c0 <main+0x304>)
 8003432:	4aa4      	ldr	r2, [pc, #656]	@ (80036c4 <main+0x308>)
 8003434:	601a      	str	r2, [r3, #0]
  display.cs_gpio_port    = ILI9341_CS_GPIO_Port;
 8003436:	4ba2      	ldr	r3, [pc, #648]	@ (80036c0 <main+0x304>)
 8003438:	4aa3      	ldr	r2, [pc, #652]	@ (80036c8 <main+0x30c>)
 800343a:	605a      	str	r2, [r3, #4]
  display.dc_gpio_port    = ILI9341_DC_GPIO_Port;
 800343c:	4ba0      	ldr	r3, [pc, #640]	@ (80036c0 <main+0x304>)
 800343e:	4aa3      	ldr	r2, [pc, #652]	@ (80036cc <main+0x310>)
 8003440:	609a      	str	r2, [r3, #8]
  display.reset_gpio_port = ILI9341_RESET_GPIO_Port;
 8003442:	4b9f      	ldr	r3, [pc, #636]	@ (80036c0 <main+0x304>)
 8003444:	4aa1      	ldr	r2, [pc, #644]	@ (80036cc <main+0x310>)
 8003446:	60da      	str	r2, [r3, #12]
  display.cs_pin          = ILI9341_CS_Pin;
 8003448:	4b9d      	ldr	r3, [pc, #628]	@ (80036c0 <main+0x304>)
 800344a:	2202      	movs	r2, #2
 800344c:	821a      	strh	r2, [r3, #16]
  display.dc_pin          = ILI9341_DC_Pin;
 800344e:	4b9c      	ldr	r3, [pc, #624]	@ (80036c0 <main+0x304>)
 8003450:	2201      	movs	r2, #1
 8003452:	825a      	strh	r2, [r3, #18]
  display.reset_pin       = ILI9341_RESET_Pin;
 8003454:	4b9a      	ldr	r3, [pc, #616]	@ (80036c0 <main+0x304>)
 8003456:	2202      	movs	r2, #2
 8003458:	829a      	strh	r2, [r3, #20]
  display.width           = 320;
 800345a:	4b99      	ldr	r3, [pc, #612]	@ (80036c0 <main+0x304>)
 800345c:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8003460:	82da      	strh	r2, [r3, #22]
  display.height          = 240;
 8003462:	4b97      	ldr	r3, [pc, #604]	@ (80036c0 <main+0x304>)
 8003464:	22f0      	movs	r2, #240	@ 0xf0
 8003466:	831a      	strh	r2, [r3, #24]
  display.orientation     = ILI9341_ORIENTATION_ROTATE_RIGHT;
 8003468:	4b95      	ldr	r3, [pc, #596]	@ (80036c0 <main+0x304>)
 800346a:	22e8      	movs	r2, #232	@ 0xe8
 800346c:	769a      	strb	r2, [r3, #26]

  ILI9341_UNSELECT(&display);
 800346e:	4b94      	ldr	r3, [pc, #592]	@ (80036c0 <main+0x304>)
 8003470:	8a1a      	ldrh	r2, [r3, #16]
 8003472:	4b93      	ldr	r3, [pc, #588]	@ (80036c0 <main+0x304>)
 8003474:	685b      	ldr	r3, [r3, #4]
 8003476:	619a      	str	r2, [r3, #24]
  ILI9341_Init(&display);
 8003478:	4891      	ldr	r0, [pc, #580]	@ (80036c0 <main+0x304>)
 800347a:	f7fe fa87 	bl	800198c <ILI9341_Init>

  // Local vars
  char string[255];

  uint8_t  menu_extended         = 0;
 800347e:	2300      	movs	r3, #0
 8003480:	f887 3acf 	strb.w	r3, [r7, #2767]	@ 0xacf
  uint8_t  menu_channel0_enabled = 1;
 8003484:	2301      	movs	r3, #1
 8003486:	f887 3ace 	strb.w	r3, [r7, #2766]	@ 0xace
  uint8_t  menu_channel1_enabled = 0;
 800348a:	2300      	movs	r3, #0
 800348c:	f887 3acd 	strb.w	r3, [r7, #2765]	@ 0xacd
  int8_t   menu_selected_item    = 2;
 8003490:	2302      	movs	r3, #2
 8003492:	f887 3acc 	strb.w	r3, [r7, #2764]	@ 0xacc
  uint16_t menu_selector_x       = 96;
 8003496:	2360      	movs	r3, #96	@ 0x60
 8003498:	f8a7 3aca 	strh.w	r3, [r7, #2762]	@ 0xaca
  uint16_t menu_selector_y       = 3;
 800349c:	2303      	movs	r3, #3
 800349e:	f8a7 3ac8 	strh.w	r3, [r7, #2760]	@ 0xac8

  uint8_t  mode = 0;
 80034a2:	2300      	movs	r3, #0
 80034a4:	f887 3ac7 	strb.w	r3, [r7, #2759]	@ 0xac7
  uint8_t  mode_seconds = 5;
 80034a8:	2305      	movs	r3, #5
 80034aa:	f887 3ac6 	strb.w	r3, [r7, #2758]	@ 0xac6
  uint8_t  mode_voltage = 6;
 80034ae:	2306      	movs	r3, #6
 80034b0:	f887 3ac5 	strb.w	r3, [r7, #2757]	@ 0xac5

  uint16_t encoder0_prev = 0;
 80034b4:	2300      	movs	r3, #0
 80034b6:	f8a7 3ac2 	strh.w	r3, [r7, #2754]	@ 0xac2
  uint16_t encoder1_prev = 0;
 80034ba:	2300      	movs	r3, #0
 80034bc:	f8a7 3ac0 	strh.w	r3, [r7, #2752]	@ 0xac0

  uint8_t  frames = 0;
 80034c0:	2300      	movs	r3, #0
 80034c2:	f887 3abf 	strb.w	r3, [r7, #2751]	@ 0xabf
  uint32_t frames_ticks = HAL_GetTick();
 80034c6:	f002 f85f 	bl	8005588 <HAL_GetTick>
 80034ca:	f8c7 0ab8 	str.w	r0, [r7, #2744]	@ 0xab8

  uint16_t pixel_dirty0[280][2];
  uint16_t pixel_dirty1[280][2];
  for (uint16_t i = 0; i < 280; i++) {
 80034ce:	2300      	movs	r3, #0
 80034d0:	f8a7 3ab6 	strh.w	r3, [r7, #2742]	@ 0xab6
 80034d4:	e02a      	b.n	800352c <main+0x170>
	  pixel_dirty0[i][0] = 0;
 80034d6:	f8b7 2ab6 	ldrh.w	r2, [r7, #2742]	@ 0xab6
 80034da:	f507 632d 	add.w	r3, r7, #2768	@ 0xad0
 80034de:	f5a3 63b4 	sub.w	r3, r3, #1440	@ 0x5a0
 80034e2:	2100      	movs	r1, #0
 80034e4:	f823 1022 	strh.w	r1, [r3, r2, lsl #2]
	  pixel_dirty0[i][1] = 0;
 80034e8:	f8b7 3ab6 	ldrh.w	r3, [r7, #2742]	@ 0xab6
 80034ec:	f507 622d 	add.w	r2, r7, #2768	@ 0xad0
 80034f0:	f5a2 62b4 	sub.w	r2, r2, #1440	@ 0x5a0
 80034f4:	009b      	lsls	r3, r3, #2
 80034f6:	4413      	add	r3, r2
 80034f8:	2200      	movs	r2, #0
 80034fa:	805a      	strh	r2, [r3, #2]
	  pixel_dirty1[i][0] = 0;
 80034fc:	f8b7 2ab6 	ldrh.w	r2, [r7, #2742]	@ 0xab6
 8003500:	f507 632d 	add.w	r3, r7, #2768	@ 0xad0
 8003504:	f5a3 6320 	sub.w	r3, r3, #2560	@ 0xa00
 8003508:	2100      	movs	r1, #0
 800350a:	f823 1022 	strh.w	r1, [r3, r2, lsl #2]
	  pixel_dirty1[i][1] = 0;
 800350e:	f8b7 3ab6 	ldrh.w	r3, [r7, #2742]	@ 0xab6
 8003512:	f507 622d 	add.w	r2, r7, #2768	@ 0xad0
 8003516:	f5a2 6220 	sub.w	r2, r2, #2560	@ 0xa00
 800351a:	009b      	lsls	r3, r3, #2
 800351c:	4413      	add	r3, r2
 800351e:	2200      	movs	r2, #0
 8003520:	805a      	strh	r2, [r3, #2]
  for (uint16_t i = 0; i < 280; i++) {
 8003522:	f8b7 3ab6 	ldrh.w	r3, [r7, #2742]	@ 0xab6
 8003526:	3301      	adds	r3, #1
 8003528:	f8a7 3ab6 	strh.w	r3, [r7, #2742]	@ 0xab6
 800352c:	f8b7 3ab6 	ldrh.w	r3, [r7, #2742]	@ 0xab6
 8003530:	f5b3 7f8c 	cmp.w	r3, #280	@ 0x118
 8003534:	d3cf      	bcc.n	80034d6 <main+0x11a>
  }

  // Dispaly freq. (for debug)
  ILI9341_FillScreen(&display, ILI9341_BLACK);
 8003536:	2100      	movs	r1, #0
 8003538:	4861      	ldr	r0, [pc, #388]	@ (80036c0 <main+0x304>)
 800353a:	f7fe fc74 	bl	8001e26 <ILI9341_FillScreen>

  snprintf(string, 255, "Oscilloscope");
 800353e:	f507 6319 	add.w	r3, r7, #2448	@ 0x990
 8003542:	4a63      	ldr	r2, [pc, #396]	@ (80036d0 <main+0x314>)
 8003544:	21ff      	movs	r1, #255	@ 0xff
 8003546:	4618      	mov	r0, r3
 8003548:	f008 fb9c 	bl	800bc84 <sniprintf>
  ILI9341_WriteString(&display, 0, 18 * 0, string, Font_11x18, ILI9341_BLACK, ILI9341_WHITE);
 800354c:	f507 6319 	add.w	r3, r7, #2448	@ 0x990
 8003550:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003554:	9203      	str	r2, [sp, #12]
 8003556:	2200      	movs	r2, #0
 8003558:	9202      	str	r2, [sp, #8]
 800355a:	495e      	ldr	r1, [pc, #376]	@ (80036d4 <main+0x318>)
 800355c:	466a      	mov	r2, sp
 800355e:	c903      	ldmia	r1, {r0, r1}
 8003560:	e882 0003 	stmia.w	r2, {r0, r1}
 8003564:	2200      	movs	r2, #0
 8003566:	2100      	movs	r1, #0
 8003568:	4855      	ldr	r0, [pc, #340]	@ (80036c0 <main+0x304>)
 800356a:	f7fe fda6 	bl	80020ba <ILI9341_WriteString>

  snprintf(string, 255, "SYCLK = %ldMHz", HAL_RCC_GetSysClockFreq()/1000000);
 800356e:	f004 fcb5 	bl	8007edc <HAL_RCC_GetSysClockFreq>
 8003572:	4603      	mov	r3, r0
 8003574:	4a58      	ldr	r2, [pc, #352]	@ (80036d8 <main+0x31c>)
 8003576:	fba2 2303 	umull	r2, r3, r2, r3
 800357a:	0c9b      	lsrs	r3, r3, #18
 800357c:	f507 6019 	add.w	r0, r7, #2448	@ 0x990
 8003580:	4a56      	ldr	r2, [pc, #344]	@ (80036dc <main+0x320>)
 8003582:	21ff      	movs	r1, #255	@ 0xff
 8003584:	f008 fb7e 	bl	800bc84 <sniprintf>
  ILI9341_WriteString(&display, 0, 18 * 1, string, Font_11x18, ILI9341_BLACK, ILI9341_WHITE);
 8003588:	f507 6319 	add.w	r3, r7, #2448	@ 0x990
 800358c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003590:	9203      	str	r2, [sp, #12]
 8003592:	2200      	movs	r2, #0
 8003594:	9202      	str	r2, [sp, #8]
 8003596:	494f      	ldr	r1, [pc, #316]	@ (80036d4 <main+0x318>)
 8003598:	466a      	mov	r2, sp
 800359a:	c903      	ldmia	r1, {r0, r1}
 800359c:	e882 0003 	stmia.w	r2, {r0, r1}
 80035a0:	2212      	movs	r2, #18
 80035a2:	2100      	movs	r1, #0
 80035a4:	4846      	ldr	r0, [pc, #280]	@ (80036c0 <main+0x304>)
 80035a6:	f7fe fd88 	bl	80020ba <ILI9341_WriteString>

  snprintf(string, 255, "HCLK  = %ldMHz", HAL_RCC_GetHCLKFreq()/1000000);
 80035aa:	f004 fd9d 	bl	80080e8 <HAL_RCC_GetHCLKFreq>
 80035ae:	4603      	mov	r3, r0
 80035b0:	4a49      	ldr	r2, [pc, #292]	@ (80036d8 <main+0x31c>)
 80035b2:	fba2 2303 	umull	r2, r3, r2, r3
 80035b6:	0c9b      	lsrs	r3, r3, #18
 80035b8:	f507 6019 	add.w	r0, r7, #2448	@ 0x990
 80035bc:	4a48      	ldr	r2, [pc, #288]	@ (80036e0 <main+0x324>)
 80035be:	21ff      	movs	r1, #255	@ 0xff
 80035c0:	f008 fb60 	bl	800bc84 <sniprintf>
  ILI9341_WriteString(&display, 0, 18 * 2, string, Font_11x18, ILI9341_BLACK, ILI9341_WHITE);
 80035c4:	f507 6319 	add.w	r3, r7, #2448	@ 0x990
 80035c8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80035cc:	9203      	str	r2, [sp, #12]
 80035ce:	2200      	movs	r2, #0
 80035d0:	9202      	str	r2, [sp, #8]
 80035d2:	4940      	ldr	r1, [pc, #256]	@ (80036d4 <main+0x318>)
 80035d4:	466a      	mov	r2, sp
 80035d6:	c903      	ldmia	r1, {r0, r1}
 80035d8:	e882 0003 	stmia.w	r2, {r0, r1}
 80035dc:	2224      	movs	r2, #36	@ 0x24
 80035de:	2100      	movs	r1, #0
 80035e0:	4837      	ldr	r0, [pc, #220]	@ (80036c0 <main+0x304>)
 80035e2:	f7fe fd6a 	bl	80020ba <ILI9341_WriteString>

  snprintf(string, 255, "APB1  = %ldMHz", HAL_RCC_GetPCLK1Freq()/1000000);
 80035e6:	f004 fd8b 	bl	8008100 <HAL_RCC_GetPCLK1Freq>
 80035ea:	4603      	mov	r3, r0
 80035ec:	4a3a      	ldr	r2, [pc, #232]	@ (80036d8 <main+0x31c>)
 80035ee:	fba2 2303 	umull	r2, r3, r2, r3
 80035f2:	0c9b      	lsrs	r3, r3, #18
 80035f4:	f507 6019 	add.w	r0, r7, #2448	@ 0x990
 80035f8:	4a3a      	ldr	r2, [pc, #232]	@ (80036e4 <main+0x328>)
 80035fa:	21ff      	movs	r1, #255	@ 0xff
 80035fc:	f008 fb42 	bl	800bc84 <sniprintf>
  ILI9341_WriteString(&display, 0, 18 * 3, string, Font_11x18, ILI9341_BLACK, ILI9341_WHITE);
 8003600:	f507 6319 	add.w	r3, r7, #2448	@ 0x990
 8003604:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003608:	9203      	str	r2, [sp, #12]
 800360a:	2200      	movs	r2, #0
 800360c:	9202      	str	r2, [sp, #8]
 800360e:	4931      	ldr	r1, [pc, #196]	@ (80036d4 <main+0x318>)
 8003610:	466a      	mov	r2, sp
 8003612:	c903      	ldmia	r1, {r0, r1}
 8003614:	e882 0003 	stmia.w	r2, {r0, r1}
 8003618:	2236      	movs	r2, #54	@ 0x36
 800361a:	2100      	movs	r1, #0
 800361c:	4828      	ldr	r0, [pc, #160]	@ (80036c0 <main+0x304>)
 800361e:	f7fe fd4c 	bl	80020ba <ILI9341_WriteString>

  snprintf(string, 255, "APB2  = %ldMHz", HAL_RCC_GetPCLK2Freq()/1000000);
 8003622:	f004 fd81 	bl	8008128 <HAL_RCC_GetPCLK2Freq>
 8003626:	4603      	mov	r3, r0
 8003628:	4a2b      	ldr	r2, [pc, #172]	@ (80036d8 <main+0x31c>)
 800362a:	fba2 2303 	umull	r2, r3, r2, r3
 800362e:	0c9b      	lsrs	r3, r3, #18
 8003630:	f507 6019 	add.w	r0, r7, #2448	@ 0x990
 8003634:	4a2c      	ldr	r2, [pc, #176]	@ (80036e8 <main+0x32c>)
 8003636:	21ff      	movs	r1, #255	@ 0xff
 8003638:	f008 fb24 	bl	800bc84 <sniprintf>
  ILI9341_WriteString(&display, 0, 18 * 4, string, Font_11x18, ILI9341_BLACK, ILI9341_WHITE);
 800363c:	f507 6319 	add.w	r3, r7, #2448	@ 0x990
 8003640:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003644:	9203      	str	r2, [sp, #12]
 8003646:	2200      	movs	r2, #0
 8003648:	9202      	str	r2, [sp, #8]
 800364a:	4922      	ldr	r1, [pc, #136]	@ (80036d4 <main+0x318>)
 800364c:	466a      	mov	r2, sp
 800364e:	c903      	ldmia	r1, {r0, r1}
 8003650:	e882 0003 	stmia.w	r2, {r0, r1}
 8003654:	2248      	movs	r2, #72	@ 0x48
 8003656:	2100      	movs	r1, #0
 8003658:	4819      	ldr	r0, [pc, #100]	@ (80036c0 <main+0x304>)
 800365a:	f7fe fd2e 	bl	80020ba <ILI9341_WriteString>

  HAL_Delay(1000);
 800365e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8003662:	f001 ff9d 	bl	80055a0 <HAL_Delay>
  ILI9341_FillScreen(&display, ILI9341_BLACK);
 8003666:	2100      	movs	r1, #0
 8003668:	4815      	ldr	r0, [pc, #84]	@ (80036c0 <main+0x304>)
 800366a:	f7fe fbdc 	bl	8001e26 <ILI9341_FillScreen>

  adc_reset_cyccnt = 1;
 800366e:	4b1f      	ldr	r3, [pc, #124]	@ (80036ec <main+0x330>)
 8003670:	2201      	movs	r2, #1
 8003672:	701a      	strb	r2, [r3, #0]
  if (adc_immediate) {
 8003674:	4b1e      	ldr	r3, [pc, #120]	@ (80036f0 <main+0x334>)
 8003676:	781b      	ldrb	r3, [r3, #0]
 8003678:	2b00      	cmp	r3, #0
 800367a:	d005      	beq.n	8003688 <main+0x2cc>
	  // The ADC starts immediately after the previous measurement is handled
	  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)&adc_data, 2);
 800367c:	2202      	movs	r2, #2
 800367e:	491d      	ldr	r1, [pc, #116]	@ (80036f4 <main+0x338>)
 8003680:	481d      	ldr	r0, [pc, #116]	@ (80036f8 <main+0x33c>)
 8003682:	f001 fff5 	bl	8005670 <HAL_ADC_Start_DMA>
 8003686:	e002      	b.n	800368e <main+0x2d2>
  } else {
	  // ADC starts by timer
	  HAL_TIM_Base_Start_IT(&htim10);
 8003688:	481c      	ldr	r0, [pc, #112]	@ (80036fc <main+0x340>)
 800368a:	f005 f9ad 	bl	80089e8 <HAL_TIM_Base_Start_IT>
  }

  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 800368e:	2100      	movs	r1, #0
 8003690:	481b      	ldr	r0, [pc, #108]	@ (8003700 <main+0x344>)
 8003692:	f005 fa93 	bl	8008bbc <HAL_TIM_PWM_Start>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
  {
	 if(HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin) == GPIO_PIN_RESET)
 8003696:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800369a:	480c      	ldr	r0, [pc, #48]	@ (80036cc <main+0x310>)
 800369c:	f003 faae 	bl	8006bfc <HAL_GPIO_ReadPin>
 80036a0:	4603      	mov	r3, r0
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d130      	bne.n	8003708 <main+0x34c>
	 {

		  HAL_TIM_Base_Start_IT(&htim2);
 80036a6:	4817      	ldr	r0, [pc, #92]	@ (8003704 <main+0x348>)
 80036a8:	f005 f99e 	bl	80089e8 <HAL_TIM_Base_Start_IT>
 80036ac:	e032      	b.n	8003714 <main+0x358>
 80036ae:	bf00      	nop
 80036b0:	2000d4da 	.word	0x2000d4da
 80036b4:	2000efa0 	.word	0x2000efa0
 80036b8:	0800f5f4 	.word	0x0800f5f4
 80036bc:	2000ed38 	.word	0x2000ed38
 80036c0:	2000d4e0 	.word	0x2000d4e0
 80036c4:	2000ed94 	.word	0x2000ed94
 80036c8:	40020400 	.word	0x40020400
 80036cc:	40020800 	.word	0x40020800
 80036d0:	0800f618 	.word	0x0800f618
 80036d4:	20000008 	.word	0x20000008
 80036d8:	431bde83 	.word	0x431bde83
 80036dc:	0800f628 	.word	0x0800f628
 80036e0:	0800f638 	.word	0x0800f638
 80036e4:	0800f648 	.word	0x0800f648
 80036e8:	0800f658 	.word	0x0800f658
 80036ec:	2000d0e2 	.word	0x2000d0e2
 80036f0:	2000d0e8 	.word	0x2000d0e8
 80036f4:	2000d4fc 	.word	0x2000d4fc
 80036f8:	2000d310 	.word	0x2000d310
 80036fc:	2000ef10 	.word	0x2000ef10
 8003700:	2000edf0 	.word	0x2000edf0
 8003704:	2000ee38 	.word	0x2000ee38
	 }
	 else
	 {
		  txIndex = 0;
 8003708:	4bb8      	ldr	r3, [pc, #736]	@ (80039ec <main+0x630>)
 800370a:	2200      	movs	r2, #0
 800370c:	601a      	str	r2, [r3, #0]
		  HAL_TIM_Base_Stop_IT(&htim2);
 800370e:	48b8      	ldr	r0, [pc, #736]	@ (80039f0 <main+0x634>)
 8003710:	f005 f9cc 	bl	8008aac <HAL_TIM_Base_Stop_IT>
	 }

		// Draw axis
		if (event_axis) {
 8003714:	4bb7      	ldr	r3, [pc, #732]	@ (80039f4 <main+0x638>)
 8003716:	781b      	ldrb	r3, [r3, #0]
 8003718:	2b00      	cmp	r3, #0
 800371a:	d005      	beq.n	8003728 <main+0x36c>
			drawAxis(&display);
 800371c:	48b6      	ldr	r0, [pc, #728]	@ (80039f8 <main+0x63c>)
 800371e:	f7ff f81b 	bl	8002758 <drawAxis>
			event_axis = 0;
 8003722:	4bb4      	ldr	r3, [pc, #720]	@ (80039f4 <main+0x638>)
 8003724:	2200      	movs	r2, #0
 8003726:	701a      	strb	r2, [r3, #0]
		}

		uint8_t local_event_adc = 0;
 8003728:	2300      	movs	r3, #0
 800372a:	f887 3ab5 	strb.w	r3, [r7, #2741]	@ 0xab5
		if (event_adc) {
 800372e:	4bb3      	ldr	r3, [pc, #716]	@ (80039fc <main+0x640>)
 8003730:	781b      	ldrb	r3, [r3, #0]
 8003732:	2b00      	cmp	r3, #0
 8003734:	d005      	beq.n	8003742 <main+0x386>
			local_event_adc = 1;
 8003736:	2301      	movs	r3, #1
 8003738:	f887 3ab5 	strb.w	r3, [r7, #2741]	@ 0xab5
			event_adc = 0;
 800373c:	4baf      	ldr	r3, [pc, #700]	@ (80039fc <main+0x640>)
 800373e:	2200      	movs	r2, #0
 8003740:	701a      	strb	r2, [r3, #0]
		}

		// Draw signals
		if (local_event_adc) {
 8003742:	f897 3ab5 	ldrb.w	r3, [r7, #2741]	@ 0xab5
 8003746:	2b00      	cmp	r3, #0
 8003748:	f000 80a8 	beq.w	800389c <main+0x4e0>

            if (menu_channel0_enabled && !adc0_filled)
 800374c:	f897 3ace 	ldrb.w	r3, [r7, #2766]	@ 0xace
 8003750:	2b00      	cmp	r3, #0
 8003752:	d016      	beq.n	8003782 <main+0x3c6>
 8003754:	4baa      	ldr	r3, [pc, #680]	@ (8003a00 <main+0x644>)
 8003756:	781b      	ldrb	r3, [r3, #0]
 8003758:	b2db      	uxtb	r3, r3
 800375a:	2b00      	cmp	r3, #0
 800375c:	d111      	bne.n	8003782 <main+0x3c6>
                drawSignal(&display, adc0_time, adc0, adc0_length, pixel_dirty0, cursor0, ILI9341_YELLOW);
 800375e:	4ba9      	ldr	r3, [pc, #676]	@ (8003a04 <main+0x648>)
 8003760:	681a      	ldr	r2, [r3, #0]
 8003762:	4ba9      	ldr	r3, [pc, #676]	@ (8003a08 <main+0x64c>)
 8003764:	881b      	ldrh	r3, [r3, #0]
 8003766:	f64f 71e0 	movw	r1, #65504	@ 0xffe0
 800376a:	9102      	str	r1, [sp, #8]
 800376c:	9301      	str	r3, [sp, #4]
 800376e:	f507 63a6 	add.w	r3, r7, #1328	@ 0x530
 8003772:	9300      	str	r3, [sp, #0]
 8003774:	4613      	mov	r3, r2
 8003776:	4aa5      	ldr	r2, [pc, #660]	@ (8003a0c <main+0x650>)
 8003778:	49a5      	ldr	r1, [pc, #660]	@ (8003a10 <main+0x654>)
 800377a:	489f      	ldr	r0, [pc, #636]	@ (80039f8 <main+0x63c>)
 800377c:	f7ff f93e 	bl	80029fc <drawSignal>
 8003780:	e038      	b.n	80037f4 <main+0x438>
            else if (menu_channel0_enabled && adc0_filled) {
 8003782:	f897 3ace 	ldrb.w	r3, [r7, #2766]	@ 0xace
 8003786:	2b00      	cmp	r3, #0
 8003788:	d034      	beq.n	80037f4 <main+0x438>
 800378a:	4b9d      	ldr	r3, [pc, #628]	@ (8003a00 <main+0x644>)
 800378c:	781b      	ldrb	r3, [r3, #0]
 800378e:	b2db      	uxtb	r3, r3
 8003790:	2b00      	cmp	r3, #0
 8003792:	d02f      	beq.n	80037f4 <main+0x438>
                clearSignal(&display, pixel_dirty0);
 8003794:	f507 63a6 	add.w	r3, r7, #1328	@ 0x530
 8003798:	4619      	mov	r1, r3
 800379a:	4897      	ldr	r0, [pc, #604]	@ (80039f8 <main+0x63c>)
 800379c:	f7ff fc74 	bl	8003088 <clearSignal>
                ILI9341_WriteString(&display, 60, cursor0, "No Data", Font_7x10, ILI9341_GRAY, ILI9341_BLACK);
 80037a0:	4b99      	ldr	r3, [pc, #612]	@ (8003a08 <main+0x64c>)
 80037a2:	881a      	ldrh	r2, [r3, #0]
 80037a4:	2300      	movs	r3, #0
 80037a6:	9303      	str	r3, [sp, #12]
 80037a8:	f245 238a 	movw	r3, #21130	@ 0x528a
 80037ac:	9302      	str	r3, [sp, #8]
 80037ae:	4999      	ldr	r1, [pc, #612]	@ (8003a14 <main+0x658>)
 80037b0:	466b      	mov	r3, sp
 80037b2:	c903      	ldmia	r1, {r0, r1}
 80037b4:	e883 0003 	stmia.w	r3, {r0, r1}
 80037b8:	4b97      	ldr	r3, [pc, #604]	@ (8003a18 <main+0x65c>)
 80037ba:	213c      	movs	r1, #60	@ 0x3c
 80037bc:	488e      	ldr	r0, [pc, #568]	@ (80039f8 <main+0x63c>)
 80037be:	f7fe fc7c 	bl	80020ba <ILI9341_WriteString>
                // 畫基線
                for (uint16_t i = 1; i <= 279; i += 2)
 80037c2:	2301      	movs	r3, #1
 80037c4:	f8a7 3ab2 	strh.w	r3, [r7, #2738]	@ 0xab2
 80037c8:	e00f      	b.n	80037ea <main+0x42e>
                    ILI9341_DrawPixel(&display, i + 20, cursor0, ILI9341_GRAY);
 80037ca:	f8b7 3ab2 	ldrh.w	r3, [r7, #2738]	@ 0xab2
 80037ce:	3314      	adds	r3, #20
 80037d0:	b299      	uxth	r1, r3
 80037d2:	4b8d      	ldr	r3, [pc, #564]	@ (8003a08 <main+0x64c>)
 80037d4:	881a      	ldrh	r2, [r3, #0]
 80037d6:	f245 238a 	movw	r3, #21130	@ 0x528a
 80037da:	4887      	ldr	r0, [pc, #540]	@ (80039f8 <main+0x63c>)
 80037dc:	f7fe fa4a 	bl	8001c74 <ILI9341_DrawPixel>
                for (uint16_t i = 1; i <= 279; i += 2)
 80037e0:	f8b7 3ab2 	ldrh.w	r3, [r7, #2738]	@ 0xab2
 80037e4:	3302      	adds	r3, #2
 80037e6:	f8a7 3ab2 	strh.w	r3, [r7, #2738]	@ 0xab2
 80037ea:	f8b7 3ab2 	ldrh.w	r3, [r7, #2738]	@ 0xab2
 80037ee:	f5b3 7f8c 	cmp.w	r3, #280	@ 0x118
 80037f2:	d3ea      	bcc.n	80037ca <main+0x40e>
            }

            if (menu_channel1_enabled && !adc1_filled)
 80037f4:	f897 3acd 	ldrb.w	r3, [r7, #2765]	@ 0xacd
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d016      	beq.n	800382a <main+0x46e>
 80037fc:	4b87      	ldr	r3, [pc, #540]	@ (8003a1c <main+0x660>)
 80037fe:	781b      	ldrb	r3, [r3, #0]
 8003800:	b2db      	uxtb	r3, r3
 8003802:	2b00      	cmp	r3, #0
 8003804:	d111      	bne.n	800382a <main+0x46e>
                drawSignal(&display, adc1_time, adc1, adc1_length, pixel_dirty1, cursor1, ILI9341_CYAN);
 8003806:	4b86      	ldr	r3, [pc, #536]	@ (8003a20 <main+0x664>)
 8003808:	681a      	ldr	r2, [r3, #0]
 800380a:	4b86      	ldr	r3, [pc, #536]	@ (8003a24 <main+0x668>)
 800380c:	881b      	ldrh	r3, [r3, #0]
 800380e:	f240 71ff 	movw	r1, #2047	@ 0x7ff
 8003812:	9102      	str	r1, [sp, #8]
 8003814:	9301      	str	r3, [sp, #4]
 8003816:	f107 03d0 	add.w	r3, r7, #208	@ 0xd0
 800381a:	9300      	str	r3, [sp, #0]
 800381c:	4613      	mov	r3, r2
 800381e:	4a82      	ldr	r2, [pc, #520]	@ (8003a28 <main+0x66c>)
 8003820:	4982      	ldr	r1, [pc, #520]	@ (8003a2c <main+0x670>)
 8003822:	4875      	ldr	r0, [pc, #468]	@ (80039f8 <main+0x63c>)
 8003824:	f7ff f8ea 	bl	80029fc <drawSignal>
 8003828:	e038      	b.n	800389c <main+0x4e0>
            else if (menu_channel1_enabled && adc1_filled) {
 800382a:	f897 3acd 	ldrb.w	r3, [r7, #2765]	@ 0xacd
 800382e:	2b00      	cmp	r3, #0
 8003830:	d034      	beq.n	800389c <main+0x4e0>
 8003832:	4b7a      	ldr	r3, [pc, #488]	@ (8003a1c <main+0x660>)
 8003834:	781b      	ldrb	r3, [r3, #0]
 8003836:	b2db      	uxtb	r3, r3
 8003838:	2b00      	cmp	r3, #0
 800383a:	d02f      	beq.n	800389c <main+0x4e0>
                clearSignal(&display, pixel_dirty1);
 800383c:	f107 03d0 	add.w	r3, r7, #208	@ 0xd0
 8003840:	4619      	mov	r1, r3
 8003842:	486d      	ldr	r0, [pc, #436]	@ (80039f8 <main+0x63c>)
 8003844:	f7ff fc20 	bl	8003088 <clearSignal>
                ILI9341_WriteString(&display, 60, cursor1, "No Data", Font_7x10, ILI9341_GRAY, ILI9341_BLACK);
 8003848:	4b76      	ldr	r3, [pc, #472]	@ (8003a24 <main+0x668>)
 800384a:	881a      	ldrh	r2, [r3, #0]
 800384c:	2300      	movs	r3, #0
 800384e:	9303      	str	r3, [sp, #12]
 8003850:	f245 238a 	movw	r3, #21130	@ 0x528a
 8003854:	9302      	str	r3, [sp, #8]
 8003856:	496f      	ldr	r1, [pc, #444]	@ (8003a14 <main+0x658>)
 8003858:	466b      	mov	r3, sp
 800385a:	c903      	ldmia	r1, {r0, r1}
 800385c:	e883 0003 	stmia.w	r3, {r0, r1}
 8003860:	4b6d      	ldr	r3, [pc, #436]	@ (8003a18 <main+0x65c>)
 8003862:	213c      	movs	r1, #60	@ 0x3c
 8003864:	4864      	ldr	r0, [pc, #400]	@ (80039f8 <main+0x63c>)
 8003866:	f7fe fc28 	bl	80020ba <ILI9341_WriteString>
                for (uint16_t i = 1; i <= 279; i += 2)
 800386a:	2301      	movs	r3, #1
 800386c:	f8a7 3ab0 	strh.w	r3, [r7, #2736]	@ 0xab0
 8003870:	e00f      	b.n	8003892 <main+0x4d6>
                    ILI9341_DrawPixel(&display, i + 20, cursor1, ILI9341_GRAY);
 8003872:	f8b7 3ab0 	ldrh.w	r3, [r7, #2736]	@ 0xab0
 8003876:	3314      	adds	r3, #20
 8003878:	b299      	uxth	r1, r3
 800387a:	4b6a      	ldr	r3, [pc, #424]	@ (8003a24 <main+0x668>)
 800387c:	881a      	ldrh	r2, [r3, #0]
 800387e:	f245 238a 	movw	r3, #21130	@ 0x528a
 8003882:	485d      	ldr	r0, [pc, #372]	@ (80039f8 <main+0x63c>)
 8003884:	f7fe f9f6 	bl	8001c74 <ILI9341_DrawPixel>
                for (uint16_t i = 1; i <= 279; i += 2)
 8003888:	f8b7 3ab0 	ldrh.w	r3, [r7, #2736]	@ 0xab0
 800388c:	3302      	adds	r3, #2
 800388e:	f8a7 3ab0 	strh.w	r3, [r7, #2736]	@ 0xab0
 8003892:	f8b7 3ab0 	ldrh.w	r3, [r7, #2736]	@ 0xab0
 8003896:	f5b3 7f8c 	cmp.w	r3, #280	@ 0x118
 800389a:	d3ea      	bcc.n	8003872 <main+0x4b6>
            }
		}

		// Draw FPS
		if (frames > 60) {
 800389c:	f897 3abf 	ldrb.w	r3, [r7, #2751]	@ 0xabf
 80038a0:	2b3c      	cmp	r3, #60	@ 0x3c
 80038a2:	d933      	bls.n	800390c <main+0x550>
			snprintf(string, 255, "FPS: %5i", (int)(1000.0f / ((float)(HAL_GetTick() - frames_ticks) / 60.0f)));
 80038a4:	f001 fe70 	bl	8005588 <HAL_GetTick>
 80038a8:	4602      	mov	r2, r0
 80038aa:	f8d7 3ab8 	ldr.w	r3, [r7, #2744]	@ 0xab8
 80038ae:	1ad3      	subs	r3, r2, r3
 80038b0:	ee07 3a90 	vmov	s15, r3
 80038b4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80038b8:	eddf 6a5d 	vldr	s13, [pc, #372]	@ 8003a30 <main+0x674>
 80038bc:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80038c0:	eddf 6a5c 	vldr	s13, [pc, #368]	@ 8003a34 <main+0x678>
 80038c4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80038c8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80038cc:	f507 6019 	add.w	r0, r7, #2448	@ 0x990
 80038d0:	ee17 3a90 	vmov	r3, s15
 80038d4:	4a58      	ldr	r2, [pc, #352]	@ (8003a38 <main+0x67c>)
 80038d6:	21ff      	movs	r1, #255	@ 0xff
 80038d8:	f008 f9d4 	bl	800bc84 <sniprintf>
			ILI9341_WriteString(&display, 225, 5, string, Font_7x10, ILI9341_WHITE, ILI9341_BLACK);
 80038dc:	f507 6319 	add.w	r3, r7, #2448	@ 0x990
 80038e0:	2200      	movs	r2, #0
 80038e2:	9203      	str	r2, [sp, #12]
 80038e4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80038e8:	9202      	str	r2, [sp, #8]
 80038ea:	494a      	ldr	r1, [pc, #296]	@ (8003a14 <main+0x658>)
 80038ec:	466a      	mov	r2, sp
 80038ee:	c903      	ldmia	r1, {r0, r1}
 80038f0:	e882 0003 	stmia.w	r2, {r0, r1}
 80038f4:	2205      	movs	r2, #5
 80038f6:	21e1      	movs	r1, #225	@ 0xe1
 80038f8:	483f      	ldr	r0, [pc, #252]	@ (80039f8 <main+0x63c>)
 80038fa:	f7fe fbde 	bl	80020ba <ILI9341_WriteString>

			frames = 0;
 80038fe:	2300      	movs	r3, #0
 8003900:	f887 3abf 	strb.w	r3, [r7, #2751]	@ 0xabf
			frames_ticks = HAL_GetTick();
 8003904:	f001 fe40 	bl	8005588 <HAL_GetTick>
 8003908:	f8c7 0ab8 	str.w	r0, [r7, #2744]	@ 0xab8
		}

		// Handle button events
		if (event_button0) {
 800390c:	4b4b      	ldr	r3, [pc, #300]	@ (8003a3c <main+0x680>)
 800390e:	781b      	ldrb	r3, [r3, #0]
 8003910:	2b00      	cmp	r3, #0
 8003912:	d033      	beq.n	800397c <main+0x5c0>

			if (!menu_extended) {
 8003914:	f897 3acf 	ldrb.w	r3, [r7, #2767]	@ 0xacf
 8003918:	2b00      	cmp	r3, #0
 800391a:	d12c      	bne.n	8003976 <main+0x5ba>
				ILI9341_Rectangle(&display, menu_selector_x, menu_selector_y, 38, 13, ILI9341_BLACK);
 800391c:	f8b7 2ac8 	ldrh.w	r2, [r7, #2760]	@ 0xac8
 8003920:	f8b7 1aca 	ldrh.w	r1, [r7, #2762]	@ 0xaca
 8003924:	2300      	movs	r3, #0
 8003926:	9301      	str	r3, [sp, #4]
 8003928:	230d      	movs	r3, #13
 800392a:	9300      	str	r3, [sp, #0]
 800392c:	2326      	movs	r3, #38	@ 0x26
 800392e:	4832      	ldr	r0, [pc, #200]	@ (80039f8 <main+0x63c>)
 8003930:	f7fe fb08 	bl	8001f44 <ILI9341_Rectangle>

				menu_selected_item++;
 8003934:	f997 3acc 	ldrsb.w	r3, [r7, #2764]	@ 0xacc
 8003938:	b2db      	uxtb	r3, r3
 800393a:	3301      	adds	r3, #1
 800393c:	b2db      	uxtb	r3, r3
 800393e:	f887 3acc 	strb.w	r3, [r7, #2764]	@ 0xacc

				if (menu_selected_item > 3)
 8003942:	f997 3acc 	ldrsb.w	r3, [r7, #2764]	@ 0xacc
 8003946:	2b03      	cmp	r3, #3
 8003948:	dd02      	ble.n	8003950 <main+0x594>
					menu_selected_item = 2;
 800394a:	2302      	movs	r3, #2
 800394c:	f887 3acc 	strb.w	r3, [r7, #2764]	@ 0xacc

				menu_selector_x = 20 + 38 * menu_selected_item;
 8003950:	f997 3acc 	ldrsb.w	r3, [r7, #2764]	@ 0xacc
 8003954:	b29b      	uxth	r3, r3
 8003956:	461a      	mov	r2, r3
 8003958:	00d2      	lsls	r2, r2, #3
 800395a:	441a      	add	r2, r3
 800395c:	0052      	lsls	r2, r2, #1
 800395e:	4413      	add	r3, r2
 8003960:	005b      	lsls	r3, r3, #1
 8003962:	b29b      	uxth	r3, r3
 8003964:	3314      	adds	r3, #20
 8003966:	f8a7 3aca 	strh.w	r3, [r7, #2762]	@ 0xaca
				menu_selector_y = 3;
 800396a:	2303      	movs	r3, #3
 800396c:	f8a7 3ac8 	strh.w	r3, [r7, #2760]	@ 0xac8

				event_selector = 1;
 8003970:	4b33      	ldr	r3, [pc, #204]	@ (8003a40 <main+0x684>)
 8003972:	2201      	movs	r2, #1
 8003974:	701a      	strb	r2, [r3, #0]
			}

			event_button0 = 0;
 8003976:	4b31      	ldr	r3, [pc, #196]	@ (8003a3c <main+0x680>)
 8003978:	2200      	movs	r2, #0
 800397a:	701a      	strb	r2, [r3, #0]
		}

		if (event_button1) {
 800397c:	4b31      	ldr	r3, [pc, #196]	@ (8003a44 <main+0x688>)
 800397e:	781b      	ldrb	r3, [r3, #0]
 8003980:	2b00      	cmp	r3, #0
 8003982:	d06a      	beq.n	8003a5a <main+0x69e>
			menu_extended = !menu_extended;
 8003984:	f897 3acf 	ldrb.w	r3, [r7, #2767]	@ 0xacf
 8003988:	2b00      	cmp	r3, #0
 800398a:	bf0c      	ite	eq
 800398c:	2301      	moveq	r3, #1
 800398e:	2300      	movne	r3, #0
 8003990:	b2db      	uxtb	r3, r3
 8003992:	f887 3acf 	strb.w	r3, [r7, #2767]	@ 0xacf

			if (!menu_extended) {
 8003996:	f897 3acf 	ldrb.w	r3, [r7, #2767]	@ 0xacf
 800399a:	2b00      	cmp	r3, #0
 800399c:	d154      	bne.n	8003a48 <main+0x68c>
				ILI9341_Rectangle(&display, menu_selector_x, menu_selector_y, 38, 13, ILI9341_BLACK);
 800399e:	f8b7 2ac8 	ldrh.w	r2, [r7, #2760]	@ 0xac8
 80039a2:	f8b7 1aca 	ldrh.w	r1, [r7, #2762]	@ 0xaca
 80039a6:	2300      	movs	r3, #0
 80039a8:	9301      	str	r3, [sp, #4]
 80039aa:	230d      	movs	r3, #13
 80039ac:	9300      	str	r3, [sp, #0]
 80039ae:	2326      	movs	r3, #38	@ 0x26
 80039b0:	4811      	ldr	r0, [pc, #68]	@ (80039f8 <main+0x63c>)
 80039b2:	f7fe fac7 	bl	8001f44 <ILI9341_Rectangle>

				menu_selected_item = 2;
 80039b6:	2302      	movs	r3, #2
 80039b8:	f887 3acc 	strb.w	r3, [r7, #2764]	@ 0xacc

				menu_selector_x = 20 + 38 * menu_selected_item;
 80039bc:	f997 3acc 	ldrsb.w	r3, [r7, #2764]	@ 0xacc
 80039c0:	b29b      	uxth	r3, r3
 80039c2:	461a      	mov	r2, r3
 80039c4:	00d2      	lsls	r2, r2, #3
 80039c6:	441a      	add	r2, r3
 80039c8:	0052      	lsls	r2, r2, #1
 80039ca:	4413      	add	r3, r2
 80039cc:	005b      	lsls	r3, r3, #1
 80039ce:	b29b      	uxth	r3, r3
 80039d0:	3314      	adds	r3, #20
 80039d2:	f8a7 3aca 	strh.w	r3, [r7, #2762]	@ 0xaca
				menu_selector_y = 3;
 80039d6:	2303      	movs	r3, #3
 80039d8:	f8a7 3ac8 	strh.w	r3, [r7, #2760]	@ 0xac8

				mode = 0;
 80039dc:	2300      	movs	r3, #0
 80039de:	f887 3ac7 	strb.w	r3, [r7, #2759]	@ 0xac7
				event_selector = 1;
 80039e2:	4b17      	ldr	r3, [pc, #92]	@ (8003a40 <main+0x684>)
 80039e4:	2201      	movs	r2, #1
 80039e6:	701a      	strb	r2, [r3, #0]
 80039e8:	e031      	b.n	8003a4e <main+0x692>
 80039ea:	bf00      	nop
 80039ec:	2000ed38 	.word	0x2000ed38
 80039f0:	2000ee38 	.word	0x2000ee38
 80039f4:	2000d100 	.word	0x2000d100
 80039f8:	2000d4e0 	.word	0x2000d4e0
 80039fc:	2000ed21 	.word	0x2000ed21
 8003a00:	2000d50c 	.word	0x2000d50c
 8003a04:	2000d504 	.word	0x2000d504
 8003a08:	2000d0f4 	.word	0x2000d0f4
 8003a0c:	2000e520 	.word	0x2000e520
 8003a10:	2000d520 	.word	0x2000d520
 8003a14:	20000000 	.word	0x20000000
 8003a18:	0800f668 	.word	0x0800f668
 8003a1c:	2000d0e0 	.word	0x2000d0e0
 8003a20:	2000d508 	.word	0x2000d508
 8003a24:	2000d0f6 	.word	0x2000d0f6
 8003a28:	2000e920 	.word	0x2000e920
 8003a2c:	2000dd20 	.word	0x2000dd20
 8003a30:	42700000 	.word	0x42700000
 8003a34:	447a0000 	.word	0x447a0000
 8003a38:	0800f670 	.word	0x0800f670
 8003a3c:	2000ed22 	.word	0x2000ed22
 8003a40:	2000d107 	.word	0x2000d107
 8003a44:	2000ed23 	.word	0x2000ed23
			} else
				mode = 1;
 8003a48:	2301      	movs	r3, #1
 8003a4a:	f887 3ac7 	strb.w	r3, [r7, #2759]	@ 0xac7

			event_mode = 1;
 8003a4e:	4b82      	ldr	r3, [pc, #520]	@ (8003c58 <main+0x89c>)
 8003a50:	2201      	movs	r2, #1
 8003a52:	701a      	strb	r2, [r3, #0]
			event_button1 = 0;
 8003a54:	4b81      	ldr	r3, [pc, #516]	@ (8003c5c <main+0x8a0>)
 8003a56:	2200      	movs	r2, #0
 8003a58:	701a      	strb	r2, [r3, #0]
		}

		if (event_button2) {
 8003a5a:	4b81      	ldr	r3, [pc, #516]	@ (8003c60 <main+0x8a4>)
 8003a5c:	781b      	ldrb	r3, [r3, #0]
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d039      	beq.n	8003ad6 <main+0x71a>
			if (menu_selected_item == 2) {
 8003a62:	f997 3acc 	ldrsb.w	r3, [r7, #2764]	@ 0xacc
 8003a66:	2b02      	cmp	r3, #2
 8003a68:	d112      	bne.n	8003a90 <main+0x6d4>
				menu_channel0_enabled = !menu_channel0_enabled;
 8003a6a:	f897 3ace 	ldrb.w	r3, [r7, #2766]	@ 0xace
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	bf0c      	ite	eq
 8003a72:	2301      	moveq	r3, #1
 8003a74:	2300      	movne	r3, #0
 8003a76:	b2db      	uxtb	r3, r3
 8003a78:	f887 3ace 	strb.w	r3, [r7, #2766]	@ 0xace

				if (!menu_channel0_enabled)
 8003a7c:	f897 3ace 	ldrb.w	r3, [r7, #2766]	@ 0xace
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d105      	bne.n	8003a90 <main+0x6d4>
					clearSignal(&display, pixel_dirty0);
 8003a84:	f507 63a6 	add.w	r3, r7, #1328	@ 0x530
 8003a88:	4619      	mov	r1, r3
 8003a8a:	4876      	ldr	r0, [pc, #472]	@ (8003c64 <main+0x8a8>)
 8003a8c:	f7ff fafc 	bl	8003088 <clearSignal>
			}

			if (menu_selected_item == 3) {
 8003a90:	f997 3acc 	ldrsb.w	r3, [r7, #2764]	@ 0xacc
 8003a94:	2b03      	cmp	r3, #3
 8003a96:	d112      	bne.n	8003abe <main+0x702>
				menu_channel1_enabled = !menu_channel1_enabled;
 8003a98:	f897 3acd 	ldrb.w	r3, [r7, #2765]	@ 0xacd
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	bf0c      	ite	eq
 8003aa0:	2301      	moveq	r3, #1
 8003aa2:	2300      	movne	r3, #0
 8003aa4:	b2db      	uxtb	r3, r3
 8003aa6:	f887 3acd 	strb.w	r3, [r7, #2765]	@ 0xacd

				if (!menu_channel1_enabled)
 8003aaa:	f897 3acd 	ldrb.w	r3, [r7, #2765]	@ 0xacd
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d105      	bne.n	8003abe <main+0x702>
					clearSignal(&display, pixel_dirty1);
 8003ab2:	f107 03d0 	add.w	r3, r7, #208	@ 0xd0
 8003ab6:	4619      	mov	r1, r3
 8003ab8:	486a      	ldr	r0, [pc, #424]	@ (8003c64 <main+0x8a8>)
 8003aba:	f7ff fae5 	bl	8003088 <clearSignal>
			}

			event_cursor  = 1;
 8003abe:	4b6a      	ldr	r3, [pc, #424]	@ (8003c68 <main+0x8ac>)
 8003ac0:	2201      	movs	r2, #1
 8003ac2:	701a      	strb	r2, [r3, #0]
			event_trigger = 1;
 8003ac4:	4b69      	ldr	r3, [pc, #420]	@ (8003c6c <main+0x8b0>)
 8003ac6:	2201      	movs	r2, #1
 8003ac8:	701a      	strb	r2, [r3, #0]
			event_channel = 1;
 8003aca:	4b69      	ldr	r3, [pc, #420]	@ (8003c70 <main+0x8b4>)
 8003acc:	2201      	movs	r2, #1
 8003ace:	701a      	strb	r2, [r3, #0]
			event_button2 = 0;
 8003ad0:	4b63      	ldr	r3, [pc, #396]	@ (8003c60 <main+0x8a4>)
 8003ad2:	2200      	movs	r2, #0
 8003ad4:	701a      	strb	r2, [r3, #0]
		}

		// Handle UI redraw channel events
		if (event_channel) {
 8003ad6:	4b66      	ldr	r3, [pc, #408]	@ (8003c70 <main+0x8b4>)
 8003ad8:	781b      	ldrb	r3, [r3, #0]
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d03a      	beq.n	8003b54 <main+0x798>
			uint16_t channel0_color = menu_channel0_enabled ? ILI9341_YELLOW  : ILI9341_COLOR565(60, 60, 0);
 8003ade:	f897 3ace 	ldrb.w	r3, [r7, #2766]	@ 0xace
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d002      	beq.n	8003aec <main+0x730>
 8003ae6:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8003aea:	e001      	b.n	8003af0 <main+0x734>
 8003aec:	f643 13e0 	movw	r3, #14816	@ 0x39e0
 8003af0:	f8a7 3aa2 	strh.w	r3, [r7, #2722]	@ 0xaa2
			uint16_t channel1_color = menu_channel1_enabled ? ILI9341_CYAN    : ILI9341_COLOR565(0, 60, 60);
 8003af4:	f897 3acd 	ldrb.w	r3, [r7, #2765]	@ 0xacd
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d002      	beq.n	8003b02 <main+0x746>
 8003afc:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 8003b00:	e001      	b.n	8003b06 <main+0x74a>
 8003b02:	f240 13e7 	movw	r3, #487	@ 0x1e7
 8003b06:	f8a7 3aa0 	strh.w	r3, [r7, #2720]	@ 0xaa0

			ILI9341_WriteString(&display, 110 - 12, 5, " CH1 ", Font_7x10, ILI9341_BLACK, channel0_color);
 8003b0a:	f8b7 3aa2 	ldrh.w	r3, [r7, #2722]	@ 0xaa2
 8003b0e:	9303      	str	r3, [sp, #12]
 8003b10:	2300      	movs	r3, #0
 8003b12:	9302      	str	r3, [sp, #8]
 8003b14:	4a57      	ldr	r2, [pc, #348]	@ (8003c74 <main+0x8b8>)
 8003b16:	466b      	mov	r3, sp
 8003b18:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003b1c:	e883 0003 	stmia.w	r3, {r0, r1}
 8003b20:	4b55      	ldr	r3, [pc, #340]	@ (8003c78 <main+0x8bc>)
 8003b22:	2205      	movs	r2, #5
 8003b24:	2162      	movs	r1, #98	@ 0x62
 8003b26:	484f      	ldr	r0, [pc, #316]	@ (8003c64 <main+0x8a8>)
 8003b28:	f7fe fac7 	bl	80020ba <ILI9341_WriteString>
			ILI9341_WriteString(&display, 148 - 12, 5, " CH2 ", Font_7x10, ILI9341_BLACK, channel1_color);
 8003b2c:	f8b7 3aa0 	ldrh.w	r3, [r7, #2720]	@ 0xaa0
 8003b30:	9303      	str	r3, [sp, #12]
 8003b32:	2300      	movs	r3, #0
 8003b34:	9302      	str	r3, [sp, #8]
 8003b36:	4a4f      	ldr	r2, [pc, #316]	@ (8003c74 <main+0x8b8>)
 8003b38:	466b      	mov	r3, sp
 8003b3a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003b3e:	e883 0003 	stmia.w	r3, {r0, r1}
 8003b42:	4b4e      	ldr	r3, [pc, #312]	@ (8003c7c <main+0x8c0>)
 8003b44:	2205      	movs	r2, #5
 8003b46:	2188      	movs	r1, #136	@ 0x88
 8003b48:	4846      	ldr	r0, [pc, #280]	@ (8003c64 <main+0x8a8>)
 8003b4a:	f7fe fab6 	bl	80020ba <ILI9341_WriteString>

			event_channel = 0;
 8003b4e:	4b48      	ldr	r3, [pc, #288]	@ (8003c70 <main+0x8b4>)
 8003b50:	2200      	movs	r2, #0
 8003b52:	701a      	strb	r2, [r3, #0]
		}

		// Handle encoder0
		int32_t encoder0_curr = __HAL_TIM_GET_COUNTER(&htim3);
 8003b54:	4b4a      	ldr	r3, [pc, #296]	@ (8003c80 <main+0x8c4>)
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b5a:	f8c7 3a9c 	str.w	r3, [r7, #2716]	@ 0xa9c
		encoder0_curr = 32767 - ((encoder0_curr - 1) & 0xFFFF) / 2;
 8003b5e:	f8d7 3a9c 	ldr.w	r3, [r7, #2716]	@ 0xa9c
 8003b62:	3b01      	subs	r3, #1
 8003b64:	b29b      	uxth	r3, r3
 8003b66:	0fda      	lsrs	r2, r3, #31
 8003b68:	4413      	add	r3, r2
 8003b6a:	105b      	asrs	r3, r3, #1
 8003b6c:	425b      	negs	r3, r3
 8003b6e:	f503 43ff 	add.w	r3, r3, #32640	@ 0x7f80
 8003b72:	337f      	adds	r3, #127	@ 0x7f
 8003b74:	f8c7 3a9c 	str.w	r3, [r7, #2716]	@ 0xa9c

		if(encoder0_curr != encoder0_prev) {
 8003b78:	f8b7 3ac2 	ldrh.w	r3, [r7, #2754]	@ 0xac2
 8003b7c:	f8d7 2a9c 	ldr.w	r2, [r7, #2716]	@ 0xa9c
 8003b80:	429a      	cmp	r2, r3
 8003b82:	f000 80cd 	beq.w	8003d20 <main+0x964>
			int32_t delta = encoder0_curr - encoder0_prev;
 8003b86:	f8b7 3ac2 	ldrh.w	r3, [r7, #2754]	@ 0xac2
 8003b8a:	f8d7 2a9c 	ldr.w	r2, [r7, #2716]	@ 0xa9c
 8003b8e:	1ad3      	subs	r3, r2, r3
 8003b90:	f8c7 3aac 	str.w	r3, [r7, #2732]	@ 0xaac

			if (delta > 10)
 8003b94:	f8d7 3aac 	ldr.w	r3, [r7, #2732]	@ 0xaac
 8003b98:	2b0a      	cmp	r3, #10
 8003b9a:	dd03      	ble.n	8003ba4 <main+0x7e8>
				delta = -1;
 8003b9c:	f04f 33ff 	mov.w	r3, #4294967295
 8003ba0:	f8c7 3aac 	str.w	r3, [r7, #2732]	@ 0xaac

			if (delta < -10)
 8003ba4:	f8d7 3aac 	ldr.w	r3, [r7, #2732]	@ 0xaac
 8003ba8:	f113 0f0a 	cmn.w	r3, #10
 8003bac:	da02      	bge.n	8003bb4 <main+0x7f8>
				delta = 1;
 8003bae:	2301      	movs	r3, #1
 8003bb0:	f8c7 3aac 	str.w	r3, [r7, #2732]	@ 0xaac

			if (menu_extended) {
 8003bb4:	f897 3acf 	ldrb.w	r3, [r7, #2767]	@ 0xacf
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d065      	beq.n	8003c88 <main+0x8cc>
				ILI9341_Rectangle(&display, menu_selector_x, menu_selector_y, 38, 13, ILI9341_BLACK);
 8003bbc:	f8b7 2ac8 	ldrh.w	r2, [r7, #2760]	@ 0xac8
 8003bc0:	f8b7 1aca 	ldrh.w	r1, [r7, #2762]	@ 0xaca
 8003bc4:	2300      	movs	r3, #0
 8003bc6:	9301      	str	r3, [sp, #4]
 8003bc8:	230d      	movs	r3, #13
 8003bca:	9300      	str	r3, [sp, #0]
 8003bcc:	2326      	movs	r3, #38	@ 0x26
 8003bce:	4825      	ldr	r0, [pc, #148]	@ (8003c64 <main+0x8a8>)
 8003bd0:	f7fe f9b8 	bl	8001f44 <ILI9341_Rectangle>

				menu_selected_item += delta;
 8003bd4:	f8d7 3aac 	ldr.w	r3, [r7, #2732]	@ 0xaac
 8003bd8:	b2da      	uxtb	r2, r3
 8003bda:	f897 3acc 	ldrb.w	r3, [r7, #2764]	@ 0xacc
 8003bde:	4413      	add	r3, r2
 8003be0:	b2db      	uxtb	r3, r3
 8003be2:	f887 3acc 	strb.w	r3, [r7, #2764]	@ 0xacc

				if (menu_selected_item < 0)
 8003be6:	f997 3acc 	ldrsb.w	r3, [r7, #2764]	@ 0xacc
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	da02      	bge.n	8003bf4 <main+0x838>
					menu_selected_item = 0;
 8003bee:	2300      	movs	r3, #0
 8003bf0:	f887 3acc 	strb.w	r3, [r7, #2764]	@ 0xacc

				if (menu_selected_item > 5)
 8003bf4:	f997 3acc 	ldrsb.w	r3, [r7, #2764]	@ 0xacc
 8003bf8:	2b05      	cmp	r3, #5
 8003bfa:	dd02      	ble.n	8003c02 <main+0x846>
					menu_selected_item = 5;
 8003bfc:	2305      	movs	r3, #5
 8003bfe:	f887 3acc 	strb.w	r3, [r7, #2764]	@ 0xacc

				if (menu_selected_item < 4) {
 8003c02:	f997 3acc 	ldrsb.w	r3, [r7, #2764]	@ 0xacc
 8003c06:	2b03      	cmp	r3, #3
 8003c08:	dc10      	bgt.n	8003c2c <main+0x870>
					menu_selector_x = 20 + 38 * menu_selected_item;
 8003c0a:	f997 3acc 	ldrsb.w	r3, [r7, #2764]	@ 0xacc
 8003c0e:	b29b      	uxth	r3, r3
 8003c10:	461a      	mov	r2, r3
 8003c12:	00d2      	lsls	r2, r2, #3
 8003c14:	441a      	add	r2, r3
 8003c16:	0052      	lsls	r2, r2, #1
 8003c18:	4413      	add	r3, r2
 8003c1a:	005b      	lsls	r3, r3, #1
 8003c1c:	b29b      	uxth	r3, r3
 8003c1e:	3314      	adds	r3, #20
 8003c20:	f8a7 3aca 	strh.w	r3, [r7, #2762]	@ 0xaca
					menu_selector_y = 3;
 8003c24:	2303      	movs	r3, #3
 8003c26:	f8a7 3ac8 	strh.w	r3, [r7, #2760]	@ 0xac8
 8003c2a:	e010      	b.n	8003c4e <main+0x892>
				} else {
					menu_selector_x = 20 + 38 * (menu_selected_item - 4);
 8003c2c:	f997 3acc 	ldrsb.w	r3, [r7, #2764]	@ 0xacc
 8003c30:	3b04      	subs	r3, #4
 8003c32:	b29b      	uxth	r3, r3
 8003c34:	461a      	mov	r2, r3
 8003c36:	00d2      	lsls	r2, r2, #3
 8003c38:	441a      	add	r2, r3
 8003c3a:	0052      	lsls	r2, r2, #1
 8003c3c:	4413      	add	r3, r2
 8003c3e:	005b      	lsls	r3, r3, #1
 8003c40:	b29b      	uxth	r3, r3
 8003c42:	3314      	adds	r3, #20
 8003c44:	f8a7 3aca 	strh.w	r3, [r7, #2762]	@ 0xaca
					menu_selector_y = 223;
 8003c48:	23df      	movs	r3, #223	@ 0xdf
 8003c4a:	f8a7 3ac8 	strh.w	r3, [r7, #2760]	@ 0xac8
				}

				event_selector = 1;
 8003c4e:	4b0d      	ldr	r3, [pc, #52]	@ (8003c84 <main+0x8c8>)
 8003c50:	2201      	movs	r2, #1
 8003c52:	701a      	strb	r2, [r3, #0]
 8003c54:	e05a      	b.n	8003d0c <main+0x950>
 8003c56:	bf00      	nop
 8003c58:	2000d101 	.word	0x2000d101
 8003c5c:	2000ed23 	.word	0x2000ed23
 8003c60:	2000ed24 	.word	0x2000ed24
 8003c64:	2000d4e0 	.word	0x2000d4e0
 8003c68:	2000d102 	.word	0x2000d102
 8003c6c:	2000d103 	.word	0x2000d103
 8003c70:	2000d104 	.word	0x2000d104
 8003c74:	20000000 	.word	0x20000000
 8003c78:	0800f67c 	.word	0x0800f67c
 8003c7c:	0800f684 	.word	0x0800f684
 8003c80:	2000ee80 	.word	0x2000ee80
 8003c84:	2000d107 	.word	0x2000d107

			} else {

				if (menu_selected_item == 2) {
 8003c88:	f997 3acc 	ldrsb.w	r3, [r7, #2764]	@ 0xacc
 8003c8c:	2b02      	cmp	r3, #2
 8003c8e:	d11c      	bne.n	8003cca <main+0x90e>
					clearCursor(&display, cursor0);
 8003c90:	4b9a      	ldr	r3, [pc, #616]	@ (8003efc <main+0xb40>)
 8003c92:	881b      	ldrh	r3, [r3, #0]
 8003c94:	4619      	mov	r1, r3
 8003c96:	489a      	ldr	r0, [pc, #616]	@ (8003f00 <main+0xb44>)
 8003c98:	f7fe fddb 	bl	8002852 <clearCursor>
					cursor0 += delta;
 8003c9c:	f8d7 3aac 	ldr.w	r3, [r7, #2732]	@ 0xaac
 8003ca0:	b29a      	uxth	r2, r3
 8003ca2:	4b96      	ldr	r3, [pc, #600]	@ (8003efc <main+0xb40>)
 8003ca4:	881b      	ldrh	r3, [r3, #0]
 8003ca6:	4413      	add	r3, r2
 8003ca8:	b29a      	uxth	r2, r3
 8003caa:	4b94      	ldr	r3, [pc, #592]	@ (8003efc <main+0xb40>)
 8003cac:	801a      	strh	r2, [r3, #0]

					if (cursor0 < 20)
 8003cae:	4b93      	ldr	r3, [pc, #588]	@ (8003efc <main+0xb40>)
 8003cb0:	881b      	ldrh	r3, [r3, #0]
 8003cb2:	2b13      	cmp	r3, #19
 8003cb4:	d802      	bhi.n	8003cbc <main+0x900>
						cursor0 = 20;
 8003cb6:	4b91      	ldr	r3, [pc, #580]	@ (8003efc <main+0xb40>)
 8003cb8:	2214      	movs	r2, #20
 8003cba:	801a      	strh	r2, [r3, #0]

					if (cursor0 > 220)
 8003cbc:	4b8f      	ldr	r3, [pc, #572]	@ (8003efc <main+0xb40>)
 8003cbe:	881b      	ldrh	r3, [r3, #0]
 8003cc0:	2bdc      	cmp	r3, #220	@ 0xdc
 8003cc2:	d902      	bls.n	8003cca <main+0x90e>
						cursor0 = 220;
 8003cc4:	4b8d      	ldr	r3, [pc, #564]	@ (8003efc <main+0xb40>)
 8003cc6:	22dc      	movs	r2, #220	@ 0xdc
 8003cc8:	801a      	strh	r2, [r3, #0]
				}

				if (menu_selected_item == 3) {
 8003cca:	f997 3acc 	ldrsb.w	r3, [r7, #2764]	@ 0xacc
 8003cce:	2b03      	cmp	r3, #3
 8003cd0:	d11c      	bne.n	8003d0c <main+0x950>
					clearCursor(&display, cursor1);
 8003cd2:	4b8c      	ldr	r3, [pc, #560]	@ (8003f04 <main+0xb48>)
 8003cd4:	881b      	ldrh	r3, [r3, #0]
 8003cd6:	4619      	mov	r1, r3
 8003cd8:	4889      	ldr	r0, [pc, #548]	@ (8003f00 <main+0xb44>)
 8003cda:	f7fe fdba 	bl	8002852 <clearCursor>
					cursor1 += delta;
 8003cde:	f8d7 3aac 	ldr.w	r3, [r7, #2732]	@ 0xaac
 8003ce2:	b29a      	uxth	r2, r3
 8003ce4:	4b87      	ldr	r3, [pc, #540]	@ (8003f04 <main+0xb48>)
 8003ce6:	881b      	ldrh	r3, [r3, #0]
 8003ce8:	4413      	add	r3, r2
 8003cea:	b29a      	uxth	r2, r3
 8003cec:	4b85      	ldr	r3, [pc, #532]	@ (8003f04 <main+0xb48>)
 8003cee:	801a      	strh	r2, [r3, #0]

					if (cursor1 < 20)
 8003cf0:	4b84      	ldr	r3, [pc, #528]	@ (8003f04 <main+0xb48>)
 8003cf2:	881b      	ldrh	r3, [r3, #0]
 8003cf4:	2b13      	cmp	r3, #19
 8003cf6:	d802      	bhi.n	8003cfe <main+0x942>
						cursor1 = 20;
 8003cf8:	4b82      	ldr	r3, [pc, #520]	@ (8003f04 <main+0xb48>)
 8003cfa:	2214      	movs	r2, #20
 8003cfc:	801a      	strh	r2, [r3, #0]

					if (cursor1 > 220)
 8003cfe:	4b81      	ldr	r3, [pc, #516]	@ (8003f04 <main+0xb48>)
 8003d00:	881b      	ldrh	r3, [r3, #0]
 8003d02:	2bdc      	cmp	r3, #220	@ 0xdc
 8003d04:	d902      	bls.n	8003d0c <main+0x950>
						cursor1 = 220;
 8003d06:	4b7f      	ldr	r3, [pc, #508]	@ (8003f04 <main+0xb48>)
 8003d08:	22dc      	movs	r2, #220	@ 0xdc
 8003d0a:	801a      	strh	r2, [r3, #0]
				}

			}

			event_cursor = 1;
 8003d0c:	4b7e      	ldr	r3, [pc, #504]	@ (8003f08 <main+0xb4c>)
 8003d0e:	2201      	movs	r2, #1
 8003d10:	701a      	strb	r2, [r3, #0]
			event_trigger = 1;
 8003d12:	4b7e      	ldr	r3, [pc, #504]	@ (8003f0c <main+0xb50>)
 8003d14:	2201      	movs	r2, #1
 8003d16:	701a      	strb	r2, [r3, #0]
			encoder0_prev = encoder0_curr;
 8003d18:	f8d7 3a9c 	ldr.w	r3, [r7, #2716]	@ 0xa9c
 8003d1c:	f8a7 3ac2 	strh.w	r3, [r7, #2754]	@ 0xac2
		}

		// Handle UI redraw cursor events
		if (event_cursor) {
 8003d20:	4b79      	ldr	r3, [pc, #484]	@ (8003f08 <main+0xb4c>)
 8003d22:	781b      	ldrb	r3, [r3, #0]
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d026      	beq.n	8003d76 <main+0x9ba>
			clearCursor(&display, cursor0);
 8003d28:	4b74      	ldr	r3, [pc, #464]	@ (8003efc <main+0xb40>)
 8003d2a:	881b      	ldrh	r3, [r3, #0]
 8003d2c:	4619      	mov	r1, r3
 8003d2e:	4874      	ldr	r0, [pc, #464]	@ (8003f00 <main+0xb44>)
 8003d30:	f7fe fd8f 	bl	8002852 <clearCursor>
			clearCursor(&display, cursor1);
 8003d34:	4b73      	ldr	r3, [pc, #460]	@ (8003f04 <main+0xb48>)
 8003d36:	881b      	ldrh	r3, [r3, #0]
 8003d38:	4619      	mov	r1, r3
 8003d3a:	4871      	ldr	r0, [pc, #452]	@ (8003f00 <main+0xb44>)
 8003d3c:	f7fe fd89 	bl	8002852 <clearCursor>

			if (menu_channel0_enabled)
 8003d40:	f897 3ace 	ldrb.w	r3, [r7, #2766]	@ 0xace
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d007      	beq.n	8003d58 <main+0x99c>
				drawCursor(&display, cursor0, "C1", ILI9341_YELLOW);
 8003d48:	4b6c      	ldr	r3, [pc, #432]	@ (8003efc <main+0xb40>)
 8003d4a:	8819      	ldrh	r1, [r3, #0]
 8003d4c:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8003d50:	4a6f      	ldr	r2, [pc, #444]	@ (8003f10 <main+0xb54>)
 8003d52:	486b      	ldr	r0, [pc, #428]	@ (8003f00 <main+0xb44>)
 8003d54:	f7fe fdaa 	bl	80028ac <drawCursor>

			if (menu_channel1_enabled)
 8003d58:	f897 3acd 	ldrb.w	r3, [r7, #2765]	@ 0xacd
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d007      	beq.n	8003d70 <main+0x9b4>
				drawCursor(&display, cursor1, "C2", ILI9341_CYAN);
 8003d60:	4b68      	ldr	r3, [pc, #416]	@ (8003f04 <main+0xb48>)
 8003d62:	8819      	ldrh	r1, [r3, #0]
 8003d64:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 8003d68:	4a6a      	ldr	r2, [pc, #424]	@ (8003f14 <main+0xb58>)
 8003d6a:	4865      	ldr	r0, [pc, #404]	@ (8003f00 <main+0xb44>)
 8003d6c:	f7fe fd9e 	bl	80028ac <drawCursor>

			event_cursor = 0;
 8003d70:	4b65      	ldr	r3, [pc, #404]	@ (8003f08 <main+0xb4c>)
 8003d72:	2200      	movs	r2, #0
 8003d74:	701a      	strb	r2, [r3, #0]
		}

		// Handle encoder1
		int32_t encoder1_curr = __HAL_TIM_GET_COUNTER(&htim4);
 8003d76:	4b68      	ldr	r3, [pc, #416]	@ (8003f18 <main+0xb5c>)
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d7c:	f8c7 3a98 	str.w	r3, [r7, #2712]	@ 0xa98
		encoder1_curr = 32767 - ((encoder1_curr - 1) & 0xFFFF) / 2;
 8003d80:	f8d7 3a98 	ldr.w	r3, [r7, #2712]	@ 0xa98
 8003d84:	3b01      	subs	r3, #1
 8003d86:	b29b      	uxth	r3, r3
 8003d88:	0fda      	lsrs	r2, r3, #31
 8003d8a:	4413      	add	r3, r2
 8003d8c:	105b      	asrs	r3, r3, #1
 8003d8e:	425b      	negs	r3, r3
 8003d90:	f503 43ff 	add.w	r3, r3, #32640	@ 0x7f80
 8003d94:	337f      	adds	r3, #127	@ 0x7f
 8003d96:	f8c7 3a98 	str.w	r3, [r7, #2712]	@ 0xa98

		if(encoder1_curr != encoder1_prev || event_trigger) {
 8003d9a:	f8b7 3ac0 	ldrh.w	r3, [r7, #2752]	@ 0xac0
 8003d9e:	f8d7 2a98 	ldr.w	r2, [r7, #2712]	@ 0xa98
 8003da2:	429a      	cmp	r2, r3
 8003da4:	d104      	bne.n	8003db0 <main+0x9f4>
 8003da6:	4b59      	ldr	r3, [pc, #356]	@ (8003f0c <main+0xb50>)
 8003da8:	781b      	ldrb	r3, [r3, #0]
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	f000 8231 	beq.w	8004212 <main+0xe56>
			int32_t delta = encoder1_curr - encoder1_prev;
 8003db0:	f8b7 3ac0 	ldrh.w	r3, [r7, #2752]	@ 0xac0
 8003db4:	f8d7 2a98 	ldr.w	r2, [r7, #2712]	@ 0xa98
 8003db8:	1ad3      	subs	r3, r2, r3
 8003dba:	f8c7 3aa8 	str.w	r3, [r7, #2728]	@ 0xaa8

			if (delta > 10)
 8003dbe:	f8d7 3aa8 	ldr.w	r3, [r7, #2728]	@ 0xaa8
 8003dc2:	2b0a      	cmp	r3, #10
 8003dc4:	dd03      	ble.n	8003dce <main+0xa12>
				delta = -1;
 8003dc6:	f04f 33ff 	mov.w	r3, #4294967295
 8003dca:	f8c7 3aa8 	str.w	r3, [r7, #2728]	@ 0xaa8

			if (delta < -10)
 8003dce:	f8d7 3aa8 	ldr.w	r3, [r7, #2728]	@ 0xaa8
 8003dd2:	f113 0f0a 	cmn.w	r3, #10
 8003dd6:	da02      	bge.n	8003dde <main+0xa22>
				delta = 1;
 8003dd8:	2301      	movs	r3, #1
 8003dda:	f8c7 3aa8 	str.w	r3, [r7, #2728]	@ 0xaa8

			if (menu_extended) {
 8003dde:	f897 3acf 	ldrb.w	r3, [r7, #2767]	@ 0xacf
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	f000 8152 	beq.w	800408c <main+0xcd0>

				if (menu_selected_item == 1) {
 8003de8:	f997 3acc 	ldrsb.w	r3, [r7, #2764]	@ 0xacc
 8003dec:	2b01      	cmp	r3, #1
 8003dee:	d112      	bne.n	8003e16 <main+0xa5a>
					trigger_mode += delta;
 8003df0:	f8d7 3aa8 	ldr.w	r3, [r7, #2728]	@ 0xaa8
 8003df4:	b2da      	uxtb	r2, r3
 8003df6:	4b49      	ldr	r3, [pc, #292]	@ (8003f1c <main+0xb60>)
 8003df8:	781b      	ldrb	r3, [r3, #0]
 8003dfa:	4413      	add	r3, r2
 8003dfc:	b2da      	uxtb	r2, r3
 8003dfe:	4b47      	ldr	r3, [pc, #284]	@ (8003f1c <main+0xb60>)
 8003e00:	701a      	strb	r2, [r3, #0]

					if (trigger_mode < 0)
						trigger_mode = 0;

					if (trigger_mode > 1)
 8003e02:	4b46      	ldr	r3, [pc, #280]	@ (8003f1c <main+0xb60>)
 8003e04:	781b      	ldrb	r3, [r3, #0]
 8003e06:	2b01      	cmp	r3, #1
 8003e08:	d902      	bls.n	8003e10 <main+0xa54>
						trigger_mode = 1;
 8003e0a:	4b44      	ldr	r3, [pc, #272]	@ (8003f1c <main+0xb60>)
 8003e0c:	2201      	movs	r2, #1
 8003e0e:	701a      	strb	r2, [r3, #0]

					event_trigger_mode = 1;
 8003e10:	4b43      	ldr	r3, [pc, #268]	@ (8003f20 <main+0xb64>)
 8003e12:	2201      	movs	r2, #1
 8003e14:	701a      	strb	r2, [r3, #0]
				}

				if (menu_selected_item == 4) {
 8003e16:	f997 3acc 	ldrsb.w	r3, [r7, #2764]	@ 0xacc
 8003e1a:	2b04      	cmp	r3, #4
 8003e1c:	f040 80ef 	bne.w	8003ffe <main+0xc42>
					mode_seconds += delta;
 8003e20:	f8d7 3aa8 	ldr.w	r3, [r7, #2728]	@ 0xaa8
 8003e24:	b2da      	uxtb	r2, r3
 8003e26:	f897 3ac6 	ldrb.w	r3, [r7, #2758]	@ 0xac6
 8003e2a:	4413      	add	r3, r2
 8003e2c:	f887 3ac6 	strb.w	r3, [r7, #2758]	@ 0xac6

					if (mode_seconds < 0)
						mode_seconds = 0;

					if (mode_seconds > 16)
 8003e30:	f897 3ac6 	ldrb.w	r3, [r7, #2758]	@ 0xac6
 8003e34:	2b10      	cmp	r3, #16
 8003e36:	d902      	bls.n	8003e3e <main+0xa82>
						mode_seconds = 16;
 8003e38:	2310      	movs	r3, #16
 8003e3a:	f887 3ac6 	strb.w	r3, [r7, #2758]	@ 0xac6

					uint32_t list_seconds[17] = {
 8003e3e:	f507 632d 	add.w	r3, r7, #2768	@ 0xad0
 8003e42:	f6a3 23cc 	subw	r3, r3, #2764	@ 0xacc
 8003e46:	4a37      	ldr	r2, [pc, #220]	@ (8003f24 <main+0xb68>)
 8003e48:	4618      	mov	r0, r3
 8003e4a:	4611      	mov	r1, r2
 8003e4c:	2344      	movs	r3, #68	@ 0x44
 8003e4e:	461a      	mov	r2, r3
 8003e50:	f008 f8c7 	bl	800bfe2 <memcpy>
						200000,
						500000,
						1000000
					};

					xlim_us = list_seconds[mode_seconds];
 8003e54:	f897 2ac6 	ldrb.w	r2, [r7, #2758]	@ 0xac6
 8003e58:	f507 632d 	add.w	r3, r7, #2768	@ 0xad0
 8003e5c:	f6a3 23cc 	subw	r3, r3, #2764	@ 0xacc
 8003e60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003e64:	4a30      	ldr	r2, [pc, #192]	@ (8003f28 <main+0xb6c>)
 8003e66:	6013      	str	r3, [r2, #0]

					if (adc_immediate) {
 8003e68:	4b30      	ldr	r3, [pc, #192]	@ (8003f2c <main+0xb70>)
 8003e6a:	781b      	ldrb	r3, [r3, #0]
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d005      	beq.n	8003e7c <main+0xac0>
						HAL_TIM_Base_Stop_IT(&htim10);
 8003e70:	482f      	ldr	r0, [pc, #188]	@ (8003f30 <main+0xb74>)
 8003e72:	f004 fe1b 	bl	8008aac <HAL_TIM_Base_Stop_IT>
						adc_available = 1;
 8003e76:	4b2f      	ldr	r3, [pc, #188]	@ (8003f34 <main+0xb78>)
 8003e78:	2201      	movs	r2, #1
 8003e7a:	701a      	strb	r2, [r3, #0]
					}

					HAL_ADC_Stop_DMA(&hadc1);
 8003e7c:	482e      	ldr	r0, [pc, #184]	@ (8003f38 <main+0xb7c>)
 8003e7e:	f001 fceb 	bl	8005858 <HAL_ADC_Stop_DMA>

					adc_reset_cyccnt = 1;
 8003e82:	4b2e      	ldr	r3, [pc, #184]	@ (8003f3c <main+0xb80>)
 8003e84:	2201      	movs	r2, #1
 8003e86:	701a      	strb	r2, [r3, #0]
					adc0_length = 0;
 8003e88:	4b2d      	ldr	r3, [pc, #180]	@ (8003f40 <main+0xb84>)
 8003e8a:	2200      	movs	r2, #0
 8003e8c:	601a      	str	r2, [r3, #0]
					adc1_length = 0;
 8003e8e:	4b2d      	ldr	r3, [pc, #180]	@ (8003f44 <main+0xb88>)
 8003e90:	2200      	movs	r2, #0
 8003e92:	601a      	str	r2, [r3, #0]
					adc_max[0] = 0;
 8003e94:	4b2c      	ldr	r3, [pc, #176]	@ (8003f48 <main+0xb8c>)
 8003e96:	2200      	movs	r2, #0
 8003e98:	801a      	strh	r2, [r3, #0]
					adc_max[1] = 0;
 8003e9a:	4b2b      	ldr	r3, [pc, #172]	@ (8003f48 <main+0xb8c>)
 8003e9c:	2200      	movs	r2, #0
 8003e9e:	805a      	strh	r2, [r3, #2]
					adc_min[0] = -1;
 8003ea0:	4b2a      	ldr	r3, [pc, #168]	@ (8003f4c <main+0xb90>)
 8003ea2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003ea6:	801a      	strh	r2, [r3, #0]
					adc_min[1] = -1;
 8003ea8:	4b28      	ldr	r3, [pc, #160]	@ (8003f4c <main+0xb90>)
 8003eaa:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003eae:	805a      	strh	r2, [r3, #2]
					adc_period[0] = 0;
 8003eb0:	4b27      	ldr	r3, [pc, #156]	@ (8003f50 <main+0xb94>)
 8003eb2:	2200      	movs	r2, #0
 8003eb4:	601a      	str	r2, [r3, #0]
					adc_period[1] = 0;
 8003eb6:	4b26      	ldr	r3, [pc, #152]	@ (8003f50 <main+0xb94>)
 8003eb8:	2200      	movs	r2, #0
 8003eba:	605a      	str	r2, [r3, #4]
					adc_period0_detected = 0;
 8003ebc:	4b25      	ldr	r3, [pc, #148]	@ (8003f54 <main+0xb98>)
 8003ebe:	2200      	movs	r2, #0
 8003ec0:	701a      	strb	r2, [r3, #0]
					adc_period1_detected = 0;
 8003ec2:	4b25      	ldr	r3, [pc, #148]	@ (8003f58 <main+0xb9c>)
 8003ec4:	2200      	movs	r2, #0
 8003ec6:	701a      	strb	r2, [r3, #0]
					event_trigger0_detected = 0;
 8003ec8:	4b24      	ldr	r3, [pc, #144]	@ (8003f5c <main+0xba0>)
 8003eca:	2200      	movs	r2, #0
 8003ecc:	701a      	strb	r2, [r3, #0]
					event_trigger1_detected = 0;
 8003ece:	4b24      	ldr	r3, [pc, #144]	@ (8003f60 <main+0xba4>)
 8003ed0:	2200      	movs	r2, #0
 8003ed2:	701a      	strb	r2, [r3, #0]

					if (menu_channel0_enabled)
 8003ed4:	f897 3ace 	ldrb.w	r3, [r7, #2766]	@ 0xace
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d003      	beq.n	8003ee4 <main+0xb28>
						adc0_filled = 0;
 8003edc:	4b21      	ldr	r3, [pc, #132]	@ (8003f64 <main+0xba8>)
 8003ede:	2200      	movs	r2, #0
 8003ee0:	701a      	strb	r2, [r3, #0]
 8003ee2:	e002      	b.n	8003eea <main+0xb2e>
					else
						adc0_filled = 1;
 8003ee4:	4b1f      	ldr	r3, [pc, #124]	@ (8003f64 <main+0xba8>)
 8003ee6:	2201      	movs	r2, #1
 8003ee8:	701a      	strb	r2, [r3, #0]

					if (menu_channel1_enabled)
 8003eea:	f897 3acd 	ldrb.w	r3, [r7, #2765]	@ 0xacd
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d03c      	beq.n	8003f6c <main+0xbb0>
						adc1_filled = 0;
 8003ef2:	4b1d      	ldr	r3, [pc, #116]	@ (8003f68 <main+0xbac>)
 8003ef4:	2200      	movs	r2, #0
 8003ef6:	701a      	strb	r2, [r3, #0]
 8003ef8:	e03b      	b.n	8003f72 <main+0xbb6>
 8003efa:	bf00      	nop
 8003efc:	2000d0f4 	.word	0x2000d0f4
 8003f00:	2000d4e0 	.word	0x2000d4e0
 8003f04:	2000d0f6 	.word	0x2000d0f6
 8003f08:	2000d102 	.word	0x2000d102
 8003f0c:	2000d103 	.word	0x2000d103
 8003f10:	0800f68c 	.word	0x0800f68c
 8003f14:	0800f690 	.word	0x0800f690
 8003f18:	2000eec8 	.word	0x2000eec8
 8003f1c:	2000ed20 	.word	0x2000ed20
 8003f20:	2000d108 	.word	0x2000d108
 8003f24:	0800f6ec 	.word	0x0800f6ec
 8003f28:	2000d0ec 	.word	0x2000d0ec
 8003f2c:	2000d0e8 	.word	0x2000d0e8
 8003f30:	2000ef10 	.word	0x2000ef10
 8003f34:	2000d0e1 	.word	0x2000d0e1
 8003f38:	2000d310 	.word	0x2000d310
 8003f3c:	2000d0e2 	.word	0x2000d0e2
 8003f40:	2000d504 	.word	0x2000d504
 8003f44:	2000d508 	.word	0x2000d508
 8003f48:	2000d510 	.word	0x2000d510
 8003f4c:	2000d0e4 	.word	0x2000d0e4
 8003f50:	2000d514 	.word	0x2000d514
 8003f54:	2000d51c 	.word	0x2000d51c
 8003f58:	2000d51d 	.word	0x2000d51d
 8003f5c:	2000d109 	.word	0x2000d109
 8003f60:	2000d10a 	.word	0x2000d10a
 8003f64:	2000d50c 	.word	0x2000d50c
 8003f68:	2000d0e0 	.word	0x2000d0e0
					else
						adc1_filled = 1;
 8003f6c:	4b3c      	ldr	r3, [pc, #240]	@ (8004060 <main+0xca4>)
 8003f6e:	2201      	movs	r2, #1
 8003f70:	701a      	strb	r2, [r3, #0]

					adc_immediate = xlim_us <= 500;
 8003f72:	4b3c      	ldr	r3, [pc, #240]	@ (8004064 <main+0xca8>)
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8003f7a:	bf94      	ite	ls
 8003f7c:	2301      	movls	r3, #1
 8003f7e:	2300      	movhi	r3, #0
 8003f80:	b2db      	uxtb	r3, r3
 8003f82:	461a      	mov	r2, r3
 8003f84:	4b38      	ldr	r3, [pc, #224]	@ (8004068 <main+0xcac>)
 8003f86:	701a      	strb	r2, [r3, #0]

					if (!adc_immediate) {
 8003f88:	4b37      	ldr	r3, [pc, #220]	@ (8004068 <main+0xcac>)
 8003f8a:	781b      	ldrb	r3, [r3, #0]
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d12b      	bne.n	8003fe8 <main+0xc2c>
						uint32_t list_timer_settings[17][2] = {
 8003f90:	f507 632d 	add.w	r3, r7, #2768	@ 0xad0
 8003f94:	f6a3 2388 	subw	r3, r3, #2696	@ 0xa88
 8003f98:	4a34      	ldr	r2, [pc, #208]	@ (800406c <main+0xcb0>)
 8003f9a:	4618      	mov	r0, r3
 8003f9c:	4611      	mov	r1, r2
 8003f9e:	2388      	movs	r3, #136	@ 0x88
 8003fa0:	461a      	mov	r2, r3
 8003fa2:	f008 f81e 	bl	800bfe2 <memcpy>
							{  8228, 100 },
							{ 20570, 100 },
							{ 41142, 100 }
						};

						htim10.Init.Prescaler = list_timer_settings[mode_seconds][0];
 8003fa6:	f897 2ac6 	ldrb.w	r2, [r7, #2758]	@ 0xac6
 8003faa:	f507 632d 	add.w	r3, r7, #2768	@ 0xad0
 8003fae:	f6a3 2388 	subw	r3, r3, #2696	@ 0xa88
 8003fb2:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
 8003fb6:	4a2e      	ldr	r2, [pc, #184]	@ (8004070 <main+0xcb4>)
 8003fb8:	6053      	str	r3, [r2, #4]
						htim10.Init.Period    = list_timer_settings[mode_seconds][1];
 8003fba:	f897 3ac6 	ldrb.w	r3, [r7, #2758]	@ 0xac6
 8003fbe:	f507 622d 	add.w	r2, r7, #2768	@ 0xad0
 8003fc2:	f6a2 2288 	subw	r2, r2, #2696	@ 0xa88
 8003fc6:	00db      	lsls	r3, r3, #3
 8003fc8:	4413      	add	r3, r2
 8003fca:	685b      	ldr	r3, [r3, #4]
 8003fcc:	4a28      	ldr	r2, [pc, #160]	@ (8004070 <main+0xcb4>)
 8003fce:	60d3      	str	r3, [r2, #12]

						if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8003fd0:	4827      	ldr	r0, [pc, #156]	@ (8004070 <main+0xcb4>)
 8003fd2:	f004 fcb9 	bl	8008948 <HAL_TIM_Base_Init>
 8003fd6:	4603      	mov	r3, r0
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d001      	beq.n	8003fe0 <main+0xc24>
							Error_Handler();
 8003fdc:	f000 fc7c 	bl	80048d8 <Error_Handler>

						HAL_TIM_Base_Start_IT(&htim10);
 8003fe0:	4823      	ldr	r0, [pc, #140]	@ (8004070 <main+0xcb4>)
 8003fe2:	f004 fd01 	bl	80089e8 <HAL_TIM_Base_Start_IT>
 8003fe6:	e004      	b.n	8003ff2 <main+0xc36>
					} else
						HAL_ADC_Start_DMA(&hadc1, (uint32_t*)&adc_data, 2);
 8003fe8:	2202      	movs	r2, #2
 8003fea:	4922      	ldr	r1, [pc, #136]	@ (8004074 <main+0xcb8>)
 8003fec:	4822      	ldr	r0, [pc, #136]	@ (8004078 <main+0xcbc>)
 8003fee:	f001 fb3f 	bl	8005670 <HAL_ADC_Start_DMA>

					local_event_adc = 0;
 8003ff2:	2300      	movs	r3, #0
 8003ff4:	f887 3ab5 	strb.w	r3, [r7, #2741]	@ 0xab5
					event_seconds = 1;
 8003ff8:	4b20      	ldr	r3, [pc, #128]	@ (800407c <main+0xcc0>)
 8003ffa:	2201      	movs	r2, #1
 8003ffc:	701a      	strb	r2, [r3, #0]
				}

				if (menu_selected_item == 5) {
 8003ffe:	f997 3acc 	ldrsb.w	r3, [r7, #2764]	@ 0xacc
 8004002:	2b05      	cmp	r3, #5
 8004004:	f040 80fe 	bne.w	8004204 <main+0xe48>
					mode_voltage += delta;
 8004008:	f8d7 3aa8 	ldr.w	r3, [r7, #2728]	@ 0xaa8
 800400c:	b2da      	uxtb	r2, r3
 800400e:	f897 3ac5 	ldrb.w	r3, [r7, #2757]	@ 0xac5
 8004012:	4413      	add	r3, r2
 8004014:	f887 3ac5 	strb.w	r3, [r7, #2757]	@ 0xac5

					if (mode_voltage < 0)
						mode_voltage = 0;

					if (mode_voltage > 9)
 8004018:	f897 3ac5 	ldrb.w	r3, [r7, #2757]	@ 0xac5
 800401c:	2b09      	cmp	r3, #9
 800401e:	d902      	bls.n	8004026 <main+0xc6a>
						mode_voltage = 9;
 8004020:	2309      	movs	r3, #9
 8004022:	f887 3ac5 	strb.w	r3, [r7, #2757]	@ 0xac5

					uint32_t list_voltage[10] = {
 8004026:	f507 632d 	add.w	r3, r7, #2768	@ 0xad0
 800402a:	f6a3 2388 	subw	r3, r3, #2696	@ 0xa88
 800402e:	4a14      	ldr	r2, [pc, #80]	@ (8004080 <main+0xcc4>)
 8004030:	461c      	mov	r4, r3
 8004032:	4615      	mov	r5, r2
 8004034:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004036:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004038:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800403a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800403c:	e895 0003 	ldmia.w	r5, {r0, r1}
 8004040:	e884 0003 	stmia.w	r4, {r0, r1}
						2000000,
						5000000,
						10000000
					};

					ylim_uV = list_voltage[mode_voltage];
 8004044:	f897 2ac5 	ldrb.w	r2, [r7, #2757]	@ 0xac5
 8004048:	f507 632d 	add.w	r3, r7, #2768	@ 0xad0
 800404c:	f6a3 2388 	subw	r3, r3, #2696	@ 0xa88
 8004050:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004054:	4a0b      	ldr	r2, [pc, #44]	@ (8004084 <main+0xcc8>)
 8004056:	6013      	str	r3, [r2, #0]

					event_voltage = 1;
 8004058:	4b0b      	ldr	r3, [pc, #44]	@ (8004088 <main+0xccc>)
 800405a:	2201      	movs	r2, #1
 800405c:	701a      	strb	r2, [r3, #0]
 800405e:	e0d1      	b.n	8004204 <main+0xe48>
 8004060:	2000d0e0 	.word	0x2000d0e0
 8004064:	2000d0ec 	.word	0x2000d0ec
 8004068:	2000d0e8 	.word	0x2000d0e8
 800406c:	0800f730 	.word	0x0800f730
 8004070:	2000ef10 	.word	0x2000ef10
 8004074:	2000d4fc 	.word	0x2000d4fc
 8004078:	2000d310 	.word	0x2000d310
 800407c:	2000d105 	.word	0x2000d105
 8004080:	0800f7b8 	.word	0x0800f7b8
 8004084:	2000d0f0 	.word	0x2000d0f0
 8004088:	2000d106 	.word	0x2000d106
				}

			} else {

				if (menu_selected_item == 2) {
 800408c:	f997 3acc 	ldrsb.w	r3, [r7, #2764]	@ 0xacc
 8004090:	2b02      	cmp	r3, #2
 8004092:	d159      	bne.n	8004148 <main+0xd8c>
					clearTrigger(&display, trigger0);
 8004094:	4bb2      	ldr	r3, [pc, #712]	@ (8004360 <main+0xfa4>)
 8004096:	881b      	ldrh	r3, [r3, #0]
 8004098:	4619      	mov	r1, r3
 800409a:	48b2      	ldr	r0, [pc, #712]	@ (8004364 <main+0xfa8>)
 800409c:	f7fe fbef 	bl	800287e <clearTrigger>
					trigger0 += delta;
 80040a0:	f8d7 3aa8 	ldr.w	r3, [r7, #2728]	@ 0xaa8
 80040a4:	b29a      	uxth	r2, r3
 80040a6:	4bae      	ldr	r3, [pc, #696]	@ (8004360 <main+0xfa4>)
 80040a8:	881b      	ldrh	r3, [r3, #0]
 80040aa:	4413      	add	r3, r2
 80040ac:	b29a      	uxth	r2, r3
 80040ae:	4bac      	ldr	r3, [pc, #688]	@ (8004360 <main+0xfa4>)
 80040b0:	801a      	strh	r2, [r3, #0]

					if (trigger0 < 20)
 80040b2:	4bab      	ldr	r3, [pc, #684]	@ (8004360 <main+0xfa4>)
 80040b4:	881b      	ldrh	r3, [r3, #0]
 80040b6:	2b13      	cmp	r3, #19
 80040b8:	d802      	bhi.n	80040c0 <main+0xd04>
						trigger0 = 20;
 80040ba:	4ba9      	ldr	r3, [pc, #676]	@ (8004360 <main+0xfa4>)
 80040bc:	2214      	movs	r2, #20
 80040be:	801a      	strh	r2, [r3, #0]

					if (trigger0 > 220)
 80040c0:	4ba7      	ldr	r3, [pc, #668]	@ (8004360 <main+0xfa4>)
 80040c2:	881b      	ldrh	r3, [r3, #0]
 80040c4:	2bdc      	cmp	r3, #220	@ 0xdc
 80040c6:	d902      	bls.n	80040ce <main+0xd12>
						trigger0 = 220;
 80040c8:	4ba5      	ldr	r3, [pc, #660]	@ (8004360 <main+0xfa4>)
 80040ca:	22dc      	movs	r2, #220	@ 0xdc
 80040cc:	801a      	strh	r2, [r3, #0]

					if (trigger0 > cursor0)
 80040ce:	4ba4      	ldr	r3, [pc, #656]	@ (8004360 <main+0xfa4>)
 80040d0:	881a      	ldrh	r2, [r3, #0]
 80040d2:	4ba5      	ldr	r3, [pc, #660]	@ (8004368 <main+0xfac>)
 80040d4:	881b      	ldrh	r3, [r3, #0]
 80040d6:	429a      	cmp	r2, r3
 80040d8:	d903      	bls.n	80040e2 <main+0xd26>
						trigger0 = cursor0;
 80040da:	4ba3      	ldr	r3, [pc, #652]	@ (8004368 <main+0xfac>)
 80040dc:	881a      	ldrh	r2, [r3, #0]
 80040de:	4ba0      	ldr	r3, [pc, #640]	@ (8004360 <main+0xfa4>)
 80040e0:	801a      	strh	r2, [r3, #0]

					float uV = -((float)(ylim_uV) * ((8.0f * (trigger0 - cursor0)) / 200.0f));
 80040e2:	4ba2      	ldr	r3, [pc, #648]	@ (800436c <main+0xfb0>)
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	ee07 3a90 	vmov	s15, r3
 80040ea:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80040ee:	4b9c      	ldr	r3, [pc, #624]	@ (8004360 <main+0xfa4>)
 80040f0:	881b      	ldrh	r3, [r3, #0]
 80040f2:	461a      	mov	r2, r3
 80040f4:	4b9c      	ldr	r3, [pc, #624]	@ (8004368 <main+0xfac>)
 80040f6:	881b      	ldrh	r3, [r3, #0]
 80040f8:	1ad3      	subs	r3, r2, r3
 80040fa:	ee07 3a90 	vmov	s15, r3
 80040fe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004102:	eef2 6a00 	vmov.f32	s13, #32	@ 0x41000000  8.0
 8004106:	ee67 6aa6 	vmul.f32	s13, s15, s13
 800410a:	ed9f 6a99 	vldr	s12, [pc, #612]	@ 8004370 <main+0xfb4>
 800410e:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8004112:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004116:	eef1 7a67 	vneg.f32	s15, s15
 800411a:	f607 2394 	addw	r3, r7, #2708	@ 0xa94
 800411e:	edc3 7a00 	vstr	s15, [r3]
					trigger0_value = uV * 4096.0f / 3300000.0f;
 8004122:	f607 2394 	addw	r3, r7, #2708	@ 0xa94
 8004126:	edd3 7a00 	vldr	s15, [r3]
 800412a:	ed9f 7a92 	vldr	s14, [pc, #584]	@ 8004374 <main+0xfb8>
 800412e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8004132:	eddf 6a91 	vldr	s13, [pc, #580]	@ 8004378 <main+0xfbc>
 8004136:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800413a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800413e:	ee17 3a90 	vmov	r3, s15
 8004142:	b29a      	uxth	r2, r3
 8004144:	4b8d      	ldr	r3, [pc, #564]	@ (800437c <main+0xfc0>)
 8004146:	801a      	strh	r2, [r3, #0]
				}

				if (menu_selected_item == 3) {
 8004148:	f997 3acc 	ldrsb.w	r3, [r7, #2764]	@ 0xacc
 800414c:	2b03      	cmp	r3, #3
 800414e:	d159      	bne.n	8004204 <main+0xe48>
					clearTrigger(&display, trigger1);
 8004150:	4b8b      	ldr	r3, [pc, #556]	@ (8004380 <main+0xfc4>)
 8004152:	881b      	ldrh	r3, [r3, #0]
 8004154:	4619      	mov	r1, r3
 8004156:	4883      	ldr	r0, [pc, #524]	@ (8004364 <main+0xfa8>)
 8004158:	f7fe fb91 	bl	800287e <clearTrigger>
					trigger1 += delta;
 800415c:	f8d7 3aa8 	ldr.w	r3, [r7, #2728]	@ 0xaa8
 8004160:	b29a      	uxth	r2, r3
 8004162:	4b87      	ldr	r3, [pc, #540]	@ (8004380 <main+0xfc4>)
 8004164:	881b      	ldrh	r3, [r3, #0]
 8004166:	4413      	add	r3, r2
 8004168:	b29a      	uxth	r2, r3
 800416a:	4b85      	ldr	r3, [pc, #532]	@ (8004380 <main+0xfc4>)
 800416c:	801a      	strh	r2, [r3, #0]

					if (trigger1 < 20)
 800416e:	4b84      	ldr	r3, [pc, #528]	@ (8004380 <main+0xfc4>)
 8004170:	881b      	ldrh	r3, [r3, #0]
 8004172:	2b13      	cmp	r3, #19
 8004174:	d802      	bhi.n	800417c <main+0xdc0>
						trigger1 = 20;
 8004176:	4b82      	ldr	r3, [pc, #520]	@ (8004380 <main+0xfc4>)
 8004178:	2214      	movs	r2, #20
 800417a:	801a      	strh	r2, [r3, #0]

					if (trigger1 > 220)
 800417c:	4b80      	ldr	r3, [pc, #512]	@ (8004380 <main+0xfc4>)
 800417e:	881b      	ldrh	r3, [r3, #0]
 8004180:	2bdc      	cmp	r3, #220	@ 0xdc
 8004182:	d902      	bls.n	800418a <main+0xdce>
						trigger1 = 220;
 8004184:	4b7e      	ldr	r3, [pc, #504]	@ (8004380 <main+0xfc4>)
 8004186:	22dc      	movs	r2, #220	@ 0xdc
 8004188:	801a      	strh	r2, [r3, #0]

					if (trigger1 > cursor1)
 800418a:	4b7d      	ldr	r3, [pc, #500]	@ (8004380 <main+0xfc4>)
 800418c:	881a      	ldrh	r2, [r3, #0]
 800418e:	4b7d      	ldr	r3, [pc, #500]	@ (8004384 <main+0xfc8>)
 8004190:	881b      	ldrh	r3, [r3, #0]
 8004192:	429a      	cmp	r2, r3
 8004194:	d903      	bls.n	800419e <main+0xde2>
						trigger1 = cursor1;
 8004196:	4b7b      	ldr	r3, [pc, #492]	@ (8004384 <main+0xfc8>)
 8004198:	881a      	ldrh	r2, [r3, #0]
 800419a:	4b79      	ldr	r3, [pc, #484]	@ (8004380 <main+0xfc4>)
 800419c:	801a      	strh	r2, [r3, #0]

					float uV = -((float)(ylim_uV) * ((8.0f * (trigger1 - cursor1)) / 200.0f));
 800419e:	4b73      	ldr	r3, [pc, #460]	@ (800436c <main+0xfb0>)
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	ee07 3a90 	vmov	s15, r3
 80041a6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80041aa:	4b75      	ldr	r3, [pc, #468]	@ (8004380 <main+0xfc4>)
 80041ac:	881b      	ldrh	r3, [r3, #0]
 80041ae:	461a      	mov	r2, r3
 80041b0:	4b74      	ldr	r3, [pc, #464]	@ (8004384 <main+0xfc8>)
 80041b2:	881b      	ldrh	r3, [r3, #0]
 80041b4:	1ad3      	subs	r3, r2, r3
 80041b6:	ee07 3a90 	vmov	s15, r3
 80041ba:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80041be:	eef2 6a00 	vmov.f32	s13, #32	@ 0x41000000  8.0
 80041c2:	ee67 6aa6 	vmul.f32	s13, s15, s13
 80041c6:	ed9f 6a6a 	vldr	s12, [pc, #424]	@ 8004370 <main+0xfb4>
 80041ca:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80041ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80041d2:	eef1 7a67 	vneg.f32	s15, s15
 80041d6:	f507 6329 	add.w	r3, r7, #2704	@ 0xa90
 80041da:	edc3 7a00 	vstr	s15, [r3]
					trigger1_value = uV * 4096.0f / 3300000.0f;
 80041de:	f507 6329 	add.w	r3, r7, #2704	@ 0xa90
 80041e2:	edd3 7a00 	vldr	s15, [r3]
 80041e6:	ed9f 7a63 	vldr	s14, [pc, #396]	@ 8004374 <main+0xfb8>
 80041ea:	ee27 7a87 	vmul.f32	s14, s15, s14
 80041ee:	eddf 6a62 	vldr	s13, [pc, #392]	@ 8004378 <main+0xfbc>
 80041f2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80041f6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80041fa:	ee17 3a90 	vmov	r3, s15
 80041fe:	b29a      	uxth	r2, r3
 8004200:	4b61      	ldr	r3, [pc, #388]	@ (8004388 <main+0xfcc>)
 8004202:	801a      	strh	r2, [r3, #0]
				}

			}

			event_trigger = 1;
 8004204:	4b61      	ldr	r3, [pc, #388]	@ (800438c <main+0xfd0>)
 8004206:	2201      	movs	r2, #1
 8004208:	701a      	strb	r2, [r3, #0]
			encoder1_prev = encoder1_curr;
 800420a:	f8d7 3a98 	ldr.w	r3, [r7, #2712]	@ 0xa98
 800420e:	f8a7 3ac0 	strh.w	r3, [r7, #2752]	@ 0xac0
		}

		// Handle UI redraw trigger events
		if (event_trigger) {
 8004212:	4b5e      	ldr	r3, [pc, #376]	@ (800438c <main+0xfd0>)
 8004214:	781b      	ldrb	r3, [r3, #0]
 8004216:	2b00      	cmp	r3, #0
 8004218:	d026      	beq.n	8004268 <main+0xeac>
			clearTrigger(&display, trigger0);
 800421a:	4b51      	ldr	r3, [pc, #324]	@ (8004360 <main+0xfa4>)
 800421c:	881b      	ldrh	r3, [r3, #0]
 800421e:	4619      	mov	r1, r3
 8004220:	4850      	ldr	r0, [pc, #320]	@ (8004364 <main+0xfa8>)
 8004222:	f7fe fb2c 	bl	800287e <clearTrigger>
			clearTrigger(&display, trigger1);
 8004226:	4b56      	ldr	r3, [pc, #344]	@ (8004380 <main+0xfc4>)
 8004228:	881b      	ldrh	r3, [r3, #0]
 800422a:	4619      	mov	r1, r3
 800422c:	484d      	ldr	r0, [pc, #308]	@ (8004364 <main+0xfa8>)
 800422e:	f7fe fb26 	bl	800287e <clearTrigger>

			if (menu_channel0_enabled)
 8004232:	f897 3ace 	ldrb.w	r3, [r7, #2766]	@ 0xace
 8004236:	2b00      	cmp	r3, #0
 8004238:	d007      	beq.n	800424a <main+0xe8e>
				drawTrigger(&display, trigger0, "T1", ILI9341_YELLOW);
 800423a:	4b49      	ldr	r3, [pc, #292]	@ (8004360 <main+0xfa4>)
 800423c:	8819      	ldrh	r1, [r3, #0]
 800423e:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8004242:	4a53      	ldr	r2, [pc, #332]	@ (8004390 <main+0xfd4>)
 8004244:	4847      	ldr	r0, [pc, #284]	@ (8004364 <main+0xfa8>)
 8004246:	f7fe fb83 	bl	8002950 <drawTrigger>

			if (menu_channel1_enabled)
 800424a:	f897 3acd 	ldrb.w	r3, [r7, #2765]	@ 0xacd
 800424e:	2b00      	cmp	r3, #0
 8004250:	d007      	beq.n	8004262 <main+0xea6>
				drawTrigger(&display, trigger1, "T2", ILI9341_CYAN);
 8004252:	4b4b      	ldr	r3, [pc, #300]	@ (8004380 <main+0xfc4>)
 8004254:	8819      	ldrh	r1, [r3, #0]
 8004256:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 800425a:	4a4e      	ldr	r2, [pc, #312]	@ (8004394 <main+0xfd8>)
 800425c:	4841      	ldr	r0, [pc, #260]	@ (8004364 <main+0xfa8>)
 800425e:	f7fe fb77 	bl	8002950 <drawTrigger>

			event_trigger = 0;
 8004262:	4b4a      	ldr	r3, [pc, #296]	@ (800438c <main+0xfd0>)
 8004264:	2200      	movs	r2, #0
 8004266:	701a      	strb	r2, [r3, #0]
		}

		// Handle UI redraw selector events
		if (event_selector) {
 8004268:	4b4b      	ldr	r3, [pc, #300]	@ (8004398 <main+0xfdc>)
 800426a:	781b      	ldrb	r3, [r3, #0]
 800426c:	2b00      	cmp	r3, #0
 800426e:	d00f      	beq.n	8004290 <main+0xed4>
			ILI9341_Rectangle(&display, menu_selector_x, menu_selector_y, 38, 13, ILI9341_WHITE);
 8004270:	f8b7 2ac8 	ldrh.w	r2, [r7, #2760]	@ 0xac8
 8004274:	f8b7 1aca 	ldrh.w	r1, [r7, #2762]	@ 0xaca
 8004278:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800427c:	9301      	str	r3, [sp, #4]
 800427e:	230d      	movs	r3, #13
 8004280:	9300      	str	r3, [sp, #0]
 8004282:	2326      	movs	r3, #38	@ 0x26
 8004284:	4837      	ldr	r0, [pc, #220]	@ (8004364 <main+0xfa8>)
 8004286:	f7fd fe5d 	bl	8001f44 <ILI9341_Rectangle>
			event_selector = 0;
 800428a:	4b43      	ldr	r3, [pc, #268]	@ (8004398 <main+0xfdc>)
 800428c:	2200      	movs	r2, #0
 800428e:	701a      	strb	r2, [r3, #0]
		}

		// Handle UI redraw mode events
		if (event_mode) {
 8004290:	4b42      	ldr	r3, [pc, #264]	@ (800439c <main+0xfe0>)
 8004292:	781b      	ldrb	r3, [r3, #0]
 8004294:	2b00      	cmp	r3, #0
 8004296:	d040      	beq.n	800431a <main+0xf5e>
			if (mode == 0)
 8004298:	f897 3ac7 	ldrb.w	r3, [r7, #2759]	@ 0xac7
 800429c:	2b00      	cmp	r3, #0
 800429e:	d110      	bne.n	80042c2 <main+0xf06>
				ILI9341_WriteString(&display, 22, 5, " RUN ", Font_7x10, ILI9341_BLACK, ILI9341_GREEN);
 80042a0:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 80042a4:	9303      	str	r3, [sp, #12]
 80042a6:	2300      	movs	r3, #0
 80042a8:	9302      	str	r3, [sp, #8]
 80042aa:	4a3d      	ldr	r2, [pc, #244]	@ (80043a0 <main+0xfe4>)
 80042ac:	466b      	mov	r3, sp
 80042ae:	e892 0003 	ldmia.w	r2, {r0, r1}
 80042b2:	e883 0003 	stmia.w	r3, {r0, r1}
 80042b6:	4b3b      	ldr	r3, [pc, #236]	@ (80043a4 <main+0xfe8>)
 80042b8:	2205      	movs	r2, #5
 80042ba:	2116      	movs	r1, #22
 80042bc:	4829      	ldr	r0, [pc, #164]	@ (8004364 <main+0xfa8>)
 80042be:	f7fd fefc 	bl	80020ba <ILI9341_WriteString>

			if (mode == 1)
 80042c2:	f897 3ac7 	ldrb.w	r3, [r7, #2759]	@ 0xac7
 80042c6:	2b01      	cmp	r3, #1
 80042c8:	d10f      	bne.n	80042ea <main+0xf2e>
				ILI9341_WriteString(&display, 22, 5, "MENU:", Font_7x10, ILI9341_BLACK, ILI9341_BLUE);
 80042ca:	231f      	movs	r3, #31
 80042cc:	9303      	str	r3, [sp, #12]
 80042ce:	2300      	movs	r3, #0
 80042d0:	9302      	str	r3, [sp, #8]
 80042d2:	4a33      	ldr	r2, [pc, #204]	@ (80043a0 <main+0xfe4>)
 80042d4:	466b      	mov	r3, sp
 80042d6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80042da:	e883 0003 	stmia.w	r3, {r0, r1}
 80042de:	4b32      	ldr	r3, [pc, #200]	@ (80043a8 <main+0xfec>)
 80042e0:	2205      	movs	r2, #5
 80042e2:	2116      	movs	r1, #22
 80042e4:	481f      	ldr	r0, [pc, #124]	@ (8004364 <main+0xfa8>)
 80042e6:	f7fd fee8 	bl	80020ba <ILI9341_WriteString>

			if (mode == 2)
 80042ea:	f897 3ac7 	ldrb.w	r3, [r7, #2759]	@ 0xac7
 80042ee:	2b02      	cmp	r3, #2
 80042f0:	d110      	bne.n	8004314 <main+0xf58>
				ILI9341_WriteString(&display, 22, 5, "HOLD:", Font_7x10, ILI9341_BLACK, ILI9341_YELLOW);
 80042f2:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 80042f6:	9303      	str	r3, [sp, #12]
 80042f8:	2300      	movs	r3, #0
 80042fa:	9302      	str	r3, [sp, #8]
 80042fc:	4a28      	ldr	r2, [pc, #160]	@ (80043a0 <main+0xfe4>)
 80042fe:	466b      	mov	r3, sp
 8004300:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004304:	e883 0003 	stmia.w	r3, {r0, r1}
 8004308:	4b28      	ldr	r3, [pc, #160]	@ (80043ac <main+0xff0>)
 800430a:	2205      	movs	r2, #5
 800430c:	2116      	movs	r1, #22
 800430e:	4815      	ldr	r0, [pc, #84]	@ (8004364 <main+0xfa8>)
 8004310:	f7fd fed3 	bl	80020ba <ILI9341_WriteString>

			event_mode = 0;
 8004314:	4b21      	ldr	r3, [pc, #132]	@ (800439c <main+0xfe0>)
 8004316:	2200      	movs	r2, #0
 8004318:	701a      	strb	r2, [r3, #0]
		}

		// Handle UI redraw trigger mode events
		if (event_trigger_mode) {
 800431a:	4b25      	ldr	r3, [pc, #148]	@ (80043b0 <main+0xff4>)
 800431c:	781b      	ldrb	r3, [r3, #0]
 800431e:	2b00      	cmp	r3, #0
 8004320:	f000 80d1 	beq.w	80044c6 <main+0x110a>
			ILI9341_FillRectangle(&display, 61,  5, 33, 10, ILI9341_BLACK);
 8004324:	2300      	movs	r3, #0
 8004326:	9301      	str	r3, [sp, #4]
 8004328:	230a      	movs	r3, #10
 800432a:	9300      	str	r3, [sp, #0]
 800432c:	2321      	movs	r3, #33	@ 0x21
 800432e:	2205      	movs	r2, #5
 8004330:	213d      	movs	r1, #61	@ 0x3d
 8004332:	480c      	ldr	r0, [pc, #48]	@ (8004364 <main+0xfa8>)
 8004334:	f7fd fda9 	bl	8001e8a <ILI9341_FillRectangle>
			ILI9341_FillRectangle(&display, 61, 14, 11, 1, ILI9341_WHITE);
 8004338:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800433c:	9301      	str	r3, [sp, #4]
 800433e:	2301      	movs	r3, #1
 8004340:	9300      	str	r3, [sp, #0]
 8004342:	230b      	movs	r3, #11
 8004344:	220e      	movs	r2, #14
 8004346:	213d      	movs	r1, #61	@ 0x3d
 8004348:	4806      	ldr	r0, [pc, #24]	@ (8004364 <main+0xfa8>)
 800434a:	f7fd fd9e 	bl	8001e8a <ILI9341_FillRectangle>
			ILI9341_FillRectangle(&display, 72,  5, 11, 1, ILI9341_WHITE);
 800434e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8004352:	9301      	str	r3, [sp, #4]
 8004354:	2301      	movs	r3, #1
 8004356:	9300      	str	r3, [sp, #0]
 8004358:	230b      	movs	r3, #11
 800435a:	2205      	movs	r2, #5
 800435c:	2148      	movs	r1, #72	@ 0x48
 800435e:	e029      	b.n	80043b4 <main+0xff8>
 8004360:	2000d0f8 	.word	0x2000d0f8
 8004364:	2000d4e0 	.word	0x2000d4e0
 8004368:	2000d0f4 	.word	0x2000d0f4
 800436c:	2000d0f0 	.word	0x2000d0f0
 8004370:	43480000 	.word	0x43480000
 8004374:	45800000 	.word	0x45800000
 8004378:	4a496a80 	.word	0x4a496a80
 800437c:	2000d0fc 	.word	0x2000d0fc
 8004380:	2000d0fa 	.word	0x2000d0fa
 8004384:	2000d0f6 	.word	0x2000d0f6
 8004388:	2000d0fe 	.word	0x2000d0fe
 800438c:	2000d103 	.word	0x2000d103
 8004390:	0800f694 	.word	0x0800f694
 8004394:	0800f698 	.word	0x0800f698
 8004398:	2000d107 	.word	0x2000d107
 800439c:	2000d101 	.word	0x2000d101
 80043a0:	20000000 	.word	0x20000000
 80043a4:	0800f69c 	.word	0x0800f69c
 80043a8:	0800f6a4 	.word	0x0800f6a4
 80043ac:	0800f6ac 	.word	0x0800f6ac
 80043b0:	2000d108 	.word	0x2000d108
 80043b4:	48a4      	ldr	r0, [pc, #656]	@ (8004648 <main+0x128c>)
 80043b6:	f7fd fd68 	bl	8001e8a <ILI9341_FillRectangle>
			ILI9341_FillRectangle(&display, 83, 14, 11, 1, ILI9341_WHITE);
 80043ba:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80043be:	9301      	str	r3, [sp, #4]
 80043c0:	2301      	movs	r3, #1
 80043c2:	9300      	str	r3, [sp, #0]
 80043c4:	230b      	movs	r3, #11
 80043c6:	220e      	movs	r2, #14
 80043c8:	2153      	movs	r1, #83	@ 0x53
 80043ca:	489f      	ldr	r0, [pc, #636]	@ (8004648 <main+0x128c>)
 80043cc:	f7fd fd5d 	bl	8001e8a <ILI9341_FillRectangle>
			ILI9341_FillRectangle(&display, 72,  5, 1, 10, ILI9341_WHITE);
 80043d0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80043d4:	9301      	str	r3, [sp, #4]
 80043d6:	230a      	movs	r3, #10
 80043d8:	9300      	str	r3, [sp, #0]
 80043da:	2301      	movs	r3, #1
 80043dc:	2205      	movs	r2, #5
 80043de:	2148      	movs	r1, #72	@ 0x48
 80043e0:	4899      	ldr	r0, [pc, #612]	@ (8004648 <main+0x128c>)
 80043e2:	f7fd fd52 	bl	8001e8a <ILI9341_FillRectangle>
			ILI9341_FillRectangle(&display, 82,  5, 1, 10, ILI9341_WHITE);
 80043e6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80043ea:	9301      	str	r3, [sp, #4]
 80043ec:	230a      	movs	r3, #10
 80043ee:	9300      	str	r3, [sp, #0]
 80043f0:	2301      	movs	r3, #1
 80043f2:	2205      	movs	r2, #5
 80043f4:	2152      	movs	r1, #82	@ 0x52
 80043f6:	4894      	ldr	r0, [pc, #592]	@ (8004648 <main+0x128c>)
 80043f8:	f7fd fd47 	bl	8001e8a <ILI9341_FillRectangle>

			if (trigger_mode == 0) {
 80043fc:	4b93      	ldr	r3, [pc, #588]	@ (800464c <main+0x1290>)
 80043fe:	781b      	ldrb	r3, [r3, #0]
 8004400:	2b00      	cmp	r3, #0
 8004402:	d12f      	bne.n	8004464 <main+0x10a8>
				for (uint8_t i = 0; i < 4; i++) {
 8004404:	2300      	movs	r3, #0
 8004406:	f887 3aa7 	strb.w	r3, [r7, #2727]	@ 0xaa7
 800440a:	e026      	b.n	800445a <main+0x109e>
					for (uint8_t j = i; j < (7 - i); j++)
 800440c:	f897 3aa7 	ldrb.w	r3, [r7, #2727]	@ 0xaa7
 8004410:	f887 3aa6 	strb.w	r3, [r7, #2726]	@ 0xaa6
 8004414:	e014      	b.n	8004440 <main+0x1084>
						ILI9341_DrawPixel(&display, 69 + j, 11 - i, ILI9341_GREEN);
 8004416:	f897 3aa6 	ldrb.w	r3, [r7, #2726]	@ 0xaa6
 800441a:	b29b      	uxth	r3, r3
 800441c:	3345      	adds	r3, #69	@ 0x45
 800441e:	b299      	uxth	r1, r3
 8004420:	f897 3aa7 	ldrb.w	r3, [r7, #2727]	@ 0xaa7
 8004424:	b29b      	uxth	r3, r3
 8004426:	f1c3 030b 	rsb	r3, r3, #11
 800442a:	b29a      	uxth	r2, r3
 800442c:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8004430:	4885      	ldr	r0, [pc, #532]	@ (8004648 <main+0x128c>)
 8004432:	f7fd fc1f 	bl	8001c74 <ILI9341_DrawPixel>
					for (uint8_t j = i; j < (7 - i); j++)
 8004436:	f897 3aa6 	ldrb.w	r3, [r7, #2726]	@ 0xaa6
 800443a:	3301      	adds	r3, #1
 800443c:	f887 3aa6 	strb.w	r3, [r7, #2726]	@ 0xaa6
 8004440:	f897 2aa6 	ldrb.w	r2, [r7, #2726]	@ 0xaa6
 8004444:	f897 3aa7 	ldrb.w	r3, [r7, #2727]	@ 0xaa7
 8004448:	f1c3 0307 	rsb	r3, r3, #7
 800444c:	429a      	cmp	r2, r3
 800444e:	dbe2      	blt.n	8004416 <main+0x105a>
				for (uint8_t i = 0; i < 4; i++) {
 8004450:	f897 3aa7 	ldrb.w	r3, [r7, #2727]	@ 0xaa7
 8004454:	3301      	adds	r3, #1
 8004456:	f887 3aa7 	strb.w	r3, [r7, #2727]	@ 0xaa7
 800445a:	f897 3aa7 	ldrb.w	r3, [r7, #2727]	@ 0xaa7
 800445e:	2b03      	cmp	r3, #3
 8004460:	d9d4      	bls.n	800440c <main+0x1050>
 8004462:	e02d      	b.n	80044c0 <main+0x1104>
				}
			} else {
				for (uint8_t i = 0; i < 4; i++) {
 8004464:	2300      	movs	r3, #0
 8004466:	f887 3aa5 	strb.w	r3, [r7, #2725]	@ 0xaa5
 800446a:	e025      	b.n	80044b8 <main+0x10fc>
				  for (uint8_t j = i; j < (7 - i); j++)
 800446c:	f897 3aa5 	ldrb.w	r3, [r7, #2725]	@ 0xaa5
 8004470:	f887 3aa4 	strb.w	r3, [r7, #2724]	@ 0xaa4
 8004474:	e013      	b.n	800449e <main+0x10e2>
					  ILI9341_DrawPixel(&display, 79 + j, 8 + i, ILI9341_RED);
 8004476:	f897 3aa4 	ldrb.w	r3, [r7, #2724]	@ 0xaa4
 800447a:	b29b      	uxth	r3, r3
 800447c:	334f      	adds	r3, #79	@ 0x4f
 800447e:	b299      	uxth	r1, r3
 8004480:	f897 3aa5 	ldrb.w	r3, [r7, #2725]	@ 0xaa5
 8004484:	b29b      	uxth	r3, r3
 8004486:	3308      	adds	r3, #8
 8004488:	b29a      	uxth	r2, r3
 800448a:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 800448e:	486e      	ldr	r0, [pc, #440]	@ (8004648 <main+0x128c>)
 8004490:	f7fd fbf0 	bl	8001c74 <ILI9341_DrawPixel>
				  for (uint8_t j = i; j < (7 - i); j++)
 8004494:	f897 3aa4 	ldrb.w	r3, [r7, #2724]	@ 0xaa4
 8004498:	3301      	adds	r3, #1
 800449a:	f887 3aa4 	strb.w	r3, [r7, #2724]	@ 0xaa4
 800449e:	f897 2aa4 	ldrb.w	r2, [r7, #2724]	@ 0xaa4
 80044a2:	f897 3aa5 	ldrb.w	r3, [r7, #2725]	@ 0xaa5
 80044a6:	f1c3 0307 	rsb	r3, r3, #7
 80044aa:	429a      	cmp	r2, r3
 80044ac:	dbe3      	blt.n	8004476 <main+0x10ba>
				for (uint8_t i = 0; i < 4; i++) {
 80044ae:	f897 3aa5 	ldrb.w	r3, [r7, #2725]	@ 0xaa5
 80044b2:	3301      	adds	r3, #1
 80044b4:	f887 3aa5 	strb.w	r3, [r7, #2725]	@ 0xaa5
 80044b8:	f897 3aa5 	ldrb.w	r3, [r7, #2725]	@ 0xaa5
 80044bc:	2b03      	cmp	r3, #3
 80044be:	d9d5      	bls.n	800446c <main+0x10b0>
				}
			}

			event_trigger_mode = 0;
 80044c0:	4b63      	ldr	r3, [pc, #396]	@ (8004650 <main+0x1294>)
 80044c2:	2200      	movs	r2, #0
 80044c4:	701a      	strb	r2, [r3, #0]
		}

		// Handle UI redraw seconds events
		if (event_seconds) {
 80044c6:	4b63      	ldr	r3, [pc, #396]	@ (8004654 <main+0x1298>)
 80044c8:	781b      	ldrb	r3, [r3, #0]
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d03f      	beq.n	800454e <main+0x1192>
			if (xlim_us >= 1000000)
 80044ce:	4b62      	ldr	r3, [pc, #392]	@ (8004658 <main+0x129c>)
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	4a62      	ldr	r2, [pc, #392]	@ (800465c <main+0x12a0>)
 80044d4:	4293      	cmp	r3, r2
 80044d6:	d90c      	bls.n	80044f2 <main+0x1136>
				snprintf(string, 255, "%3li s",  xlim_us / 1000000);
 80044d8:	4b5f      	ldr	r3, [pc, #380]	@ (8004658 <main+0x129c>)
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	4a60      	ldr	r2, [pc, #384]	@ (8004660 <main+0x12a4>)
 80044de:	fba2 2303 	umull	r2, r3, r2, r3
 80044e2:	0c9b      	lsrs	r3, r3, #18
 80044e4:	f507 6019 	add.w	r0, r7, #2448	@ 0x990
 80044e8:	4a5e      	ldr	r2, [pc, #376]	@ (8004664 <main+0x12a8>)
 80044ea:	21ff      	movs	r1, #255	@ 0xff
 80044ec:	f007 fbca 	bl	800bc84 <sniprintf>
 80044f0:	e019      	b.n	8004526 <main+0x116a>
			else if (xlim_us >= 1000)
 80044f2:	4b59      	ldr	r3, [pc, #356]	@ (8004658 <main+0x129c>)
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80044fa:	d30c      	bcc.n	8004516 <main+0x115a>
				snprintf(string, 255, "%3lims", xlim_us / 1000);
 80044fc:	4b56      	ldr	r3, [pc, #344]	@ (8004658 <main+0x129c>)
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	4a59      	ldr	r2, [pc, #356]	@ (8004668 <main+0x12ac>)
 8004502:	fba2 2303 	umull	r2, r3, r2, r3
 8004506:	099b      	lsrs	r3, r3, #6
 8004508:	f507 6019 	add.w	r0, r7, #2448	@ 0x990
 800450c:	4a57      	ldr	r2, [pc, #348]	@ (800466c <main+0x12b0>)
 800450e:	21ff      	movs	r1, #255	@ 0xff
 8004510:	f007 fbb8 	bl	800bc84 <sniprintf>
 8004514:	e007      	b.n	8004526 <main+0x116a>
			else
				snprintf(string, 255, "%3lius", xlim_us);
 8004516:	4b50      	ldr	r3, [pc, #320]	@ (8004658 <main+0x129c>)
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	f507 6019 	add.w	r0, r7, #2448	@ 0x990
 800451e:	4a54      	ldr	r2, [pc, #336]	@ (8004670 <main+0x12b4>)
 8004520:	21ff      	movs	r1, #255	@ 0xff
 8004522:	f007 fbaf 	bl	800bc84 <sniprintf>

			ILI9341_WriteString(&display, 22, 225, string, Font_7x10, ILI9341_BLACK, ILI9341_WHITE);
 8004526:	f507 6319 	add.w	r3, r7, #2448	@ 0x990
 800452a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800452e:	9203      	str	r2, [sp, #12]
 8004530:	2200      	movs	r2, #0
 8004532:	9202      	str	r2, [sp, #8]
 8004534:	494f      	ldr	r1, [pc, #316]	@ (8004674 <main+0x12b8>)
 8004536:	466a      	mov	r2, sp
 8004538:	c903      	ldmia	r1, {r0, r1}
 800453a:	e882 0003 	stmia.w	r2, {r0, r1}
 800453e:	22e1      	movs	r2, #225	@ 0xe1
 8004540:	2116      	movs	r1, #22
 8004542:	4841      	ldr	r0, [pc, #260]	@ (8004648 <main+0x128c>)
 8004544:	f7fd fdb9 	bl	80020ba <ILI9341_WriteString>

			event_seconds = 0;
 8004548:	4b42      	ldr	r3, [pc, #264]	@ (8004654 <main+0x1298>)
 800454a:	2200      	movs	r2, #0
 800454c:	701a      	strb	r2, [r3, #0]
		}

		// Handle UI redraw voltage events
		if (event_voltage) {
 800454e:	4b4a      	ldr	r3, [pc, #296]	@ (8004678 <main+0x12bc>)
 8004550:	781b      	ldrb	r3, [r3, #0]
 8004552:	2b00      	cmp	r3, #0
 8004554:	d03f      	beq.n	80045d6 <main+0x121a>
			if (ylim_uV >= 1000000)
 8004556:	4b49      	ldr	r3, [pc, #292]	@ (800467c <main+0x12c0>)
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	4a40      	ldr	r2, [pc, #256]	@ (800465c <main+0x12a0>)
 800455c:	4293      	cmp	r3, r2
 800455e:	d90c      	bls.n	800457a <main+0x11be>
				snprintf(string, 255, "%3li V",  ylim_uV / 1000000);
 8004560:	4b46      	ldr	r3, [pc, #280]	@ (800467c <main+0x12c0>)
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	4a3e      	ldr	r2, [pc, #248]	@ (8004660 <main+0x12a4>)
 8004566:	fba2 2303 	umull	r2, r3, r2, r3
 800456a:	0c9b      	lsrs	r3, r3, #18
 800456c:	f507 6019 	add.w	r0, r7, #2448	@ 0x990
 8004570:	4a43      	ldr	r2, [pc, #268]	@ (8004680 <main+0x12c4>)
 8004572:	21ff      	movs	r1, #255	@ 0xff
 8004574:	f007 fb86 	bl	800bc84 <sniprintf>
 8004578:	e019      	b.n	80045ae <main+0x11f2>
			else if (ylim_uV >= 1000)
 800457a:	4b40      	ldr	r3, [pc, #256]	@ (800467c <main+0x12c0>)
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004582:	d30c      	bcc.n	800459e <main+0x11e2>
				snprintf(string, 255, "%3limV", ylim_uV / 1000);
 8004584:	4b3d      	ldr	r3, [pc, #244]	@ (800467c <main+0x12c0>)
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	4a37      	ldr	r2, [pc, #220]	@ (8004668 <main+0x12ac>)
 800458a:	fba2 2303 	umull	r2, r3, r2, r3
 800458e:	099b      	lsrs	r3, r3, #6
 8004590:	f507 6019 	add.w	r0, r7, #2448	@ 0x990
 8004594:	4a3b      	ldr	r2, [pc, #236]	@ (8004684 <main+0x12c8>)
 8004596:	21ff      	movs	r1, #255	@ 0xff
 8004598:	f007 fb74 	bl	800bc84 <sniprintf>
 800459c:	e007      	b.n	80045ae <main+0x11f2>
			else
				snprintf(string, 255, "%3liuV", ylim_uV);
 800459e:	4b37      	ldr	r3, [pc, #220]	@ (800467c <main+0x12c0>)
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	f507 6019 	add.w	r0, r7, #2448	@ 0x990
 80045a6:	4a38      	ldr	r2, [pc, #224]	@ (8004688 <main+0x12cc>)
 80045a8:	21ff      	movs	r1, #255	@ 0xff
 80045aa:	f007 fb6b 	bl	800bc84 <sniprintf>

			ILI9341_WriteString(&display, 60, 225, string, Font_7x10, ILI9341_BLACK, ILI9341_WHITE);
 80045ae:	f507 6319 	add.w	r3, r7, #2448	@ 0x990
 80045b2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80045b6:	9203      	str	r2, [sp, #12]
 80045b8:	2200      	movs	r2, #0
 80045ba:	9202      	str	r2, [sp, #8]
 80045bc:	492d      	ldr	r1, [pc, #180]	@ (8004674 <main+0x12b8>)
 80045be:	466a      	mov	r2, sp
 80045c0:	c903      	ldmia	r1, {r0, r1}
 80045c2:	e882 0003 	stmia.w	r2, {r0, r1}
 80045c6:	22e1      	movs	r2, #225	@ 0xe1
 80045c8:	213c      	movs	r1, #60	@ 0x3c
 80045ca:	481f      	ldr	r0, [pc, #124]	@ (8004648 <main+0x128c>)
 80045cc:	f7fd fd75 	bl	80020ba <ILI9341_WriteString>

			event_voltage = 0;
 80045d0:	4b29      	ldr	r3, [pc, #164]	@ (8004678 <main+0x12bc>)
 80045d2:	2200      	movs	r2, #0
 80045d4:	701a      	strb	r2, [r3, #0]
		}

		snprintf(string, 255, "T:%i%i", event_trigger0_detected, event_trigger1_detected);
 80045d6:	4b2d      	ldr	r3, [pc, #180]	@ (800468c <main+0x12d0>)
 80045d8:	781b      	ldrb	r3, [r3, #0]
 80045da:	461a      	mov	r2, r3
 80045dc:	4b2c      	ldr	r3, [pc, #176]	@ (8004690 <main+0x12d4>)
 80045de:	781b      	ldrb	r3, [r3, #0]
 80045e0:	f507 6019 	add.w	r0, r7, #2448	@ 0x990
 80045e4:	9300      	str	r3, [sp, #0]
 80045e6:	4613      	mov	r3, r2
 80045e8:	4a2a      	ldr	r2, [pc, #168]	@ (8004694 <main+0x12d8>)
 80045ea:	21ff      	movs	r1, #255	@ 0xff
 80045ec:	f007 fb4a 	bl	800bc84 <sniprintf>
		ILI9341_WriteString(&display, 195, 5, string, Font_7x10, ILI9341_WHITE, ILI9341_BLACK);
 80045f0:	f507 6319 	add.w	r3, r7, #2448	@ 0x990
 80045f4:	2200      	movs	r2, #0
 80045f6:	9203      	str	r2, [sp, #12]
 80045f8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80045fc:	9202      	str	r2, [sp, #8]
 80045fe:	491d      	ldr	r1, [pc, #116]	@ (8004674 <main+0x12b8>)
 8004600:	466a      	mov	r2, sp
 8004602:	c903      	ldmia	r1, {r0, r1}
 8004604:	e882 0003 	stmia.w	r2, {r0, r1}
 8004608:	2205      	movs	r2, #5
 800460a:	21c3      	movs	r1, #195	@ 0xc3
 800460c:	480e      	ldr	r0, [pc, #56]	@ (8004648 <main+0x128c>)
 800460e:	f7fd fd54 	bl	80020ba <ILI9341_WriteString>

		if (menu_channel1_enabled && menu_selected_item == 3) {
 8004612:	f897 3acd 	ldrb.w	r3, [r7, #2765]	@ 0xacd
 8004616:	2b00      	cmp	r3, #0
 8004618:	d044      	beq.n	80046a4 <main+0x12e8>
 800461a:	f997 3acc 	ldrsb.w	r3, [r7, #2764]	@ 0xacc
 800461e:	2b03      	cmp	r3, #3
 8004620:	d140      	bne.n	80046a4 <main+0x12e8>
			//if (adc_period1_detected)
				drawSignalParam(&display, string, 255, adc_max[1], adc_min[1], adc_period[1]);
 8004622:	4b1d      	ldr	r3, [pc, #116]	@ (8004698 <main+0x12dc>)
 8004624:	885b      	ldrh	r3, [r3, #2]
 8004626:	b298      	uxth	r0, r3
 8004628:	4b1c      	ldr	r3, [pc, #112]	@ (800469c <main+0x12e0>)
 800462a:	885b      	ldrh	r3, [r3, #2]
 800462c:	b29b      	uxth	r3, r3
 800462e:	4a1c      	ldr	r2, [pc, #112]	@ (80046a0 <main+0x12e4>)
 8004630:	6852      	ldr	r2, [r2, #4]
 8004632:	f507 6119 	add.w	r1, r7, #2448	@ 0x990
 8004636:	9201      	str	r2, [sp, #4]
 8004638:	9300      	str	r3, [sp, #0]
 800463a:	4603      	mov	r3, r0
 800463c:	22ff      	movs	r2, #255	@ 0xff
 800463e:	4802      	ldr	r0, [pc, #8]	@ (8004648 <main+0x128c>)
 8004640:	f7fe fd94 	bl	800316c <drawSignalParam>
 8004644:	e043      	b.n	80046ce <main+0x1312>
 8004646:	bf00      	nop
 8004648:	2000d4e0 	.word	0x2000d4e0
 800464c:	2000ed20 	.word	0x2000ed20
 8004650:	2000d108 	.word	0x2000d108
 8004654:	2000d105 	.word	0x2000d105
 8004658:	2000d0ec 	.word	0x2000d0ec
 800465c:	000f423f 	.word	0x000f423f
 8004660:	431bde83 	.word	0x431bde83
 8004664:	0800f6b4 	.word	0x0800f6b4
 8004668:	10624dd3 	.word	0x10624dd3
 800466c:	0800f6bc 	.word	0x0800f6bc
 8004670:	0800f6c4 	.word	0x0800f6c4
 8004674:	20000000 	.word	0x20000000
 8004678:	2000d106 	.word	0x2000d106
 800467c:	2000d0f0 	.word	0x2000d0f0
 8004680:	0800f6cc 	.word	0x0800f6cc
 8004684:	0800f6d4 	.word	0x0800f6d4
 8004688:	0800f6dc 	.word	0x0800f6dc
 800468c:	2000d109 	.word	0x2000d109
 8004690:	2000d10a 	.word	0x2000d10a
 8004694:	0800f6e4 	.word	0x0800f6e4
 8004698:	2000d510 	.word	0x2000d510
 800469c:	2000d0e4 	.word	0x2000d0e4
 80046a0:	2000d514 	.word	0x2000d514
		} else if (menu_channel0_enabled) {
 80046a4:	f897 3ace 	ldrb.w	r3, [r7, #2766]	@ 0xace
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d010      	beq.n	80046ce <main+0x1312>
			//if (adc_period0_detected)
				drawSignalParam(&display, string, 255, adc_max[0], adc_min[0], adc_period[0]);
 80046ac:	4b35      	ldr	r3, [pc, #212]	@ (8004784 <main+0x13c8>)
 80046ae:	881b      	ldrh	r3, [r3, #0]
 80046b0:	b298      	uxth	r0, r3
 80046b2:	4b35      	ldr	r3, [pc, #212]	@ (8004788 <main+0x13cc>)
 80046b4:	881b      	ldrh	r3, [r3, #0]
 80046b6:	b29b      	uxth	r3, r3
 80046b8:	4a34      	ldr	r2, [pc, #208]	@ (800478c <main+0x13d0>)
 80046ba:	6812      	ldr	r2, [r2, #0]
 80046bc:	f507 6119 	add.w	r1, r7, #2448	@ 0x990
 80046c0:	9201      	str	r2, [sp, #4]
 80046c2:	9300      	str	r3, [sp, #0]
 80046c4:	4603      	mov	r3, r0
 80046c6:	22ff      	movs	r2, #255	@ 0xff
 80046c8:	4831      	ldr	r0, [pc, #196]	@ (8004790 <main+0x13d4>)
 80046ca:	f7fe fd4f 	bl	800316c <drawSignalParam>
		}

		// Restart ADC ...
		if (local_event_adc) {
 80046ce:	f897 3ab5 	ldrb.w	r3, [r7, #2741]	@ 0xab5
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d04e      	beq.n	8004774 <main+0x13b8>
			adc_reset_cyccnt = 1;
 80046d6:	4b2f      	ldr	r3, [pc, #188]	@ (8004794 <main+0x13d8>)
 80046d8:	2201      	movs	r2, #1
 80046da:	701a      	strb	r2, [r3, #0]
			adc0_length = 0;
 80046dc:	4b2e      	ldr	r3, [pc, #184]	@ (8004798 <main+0x13dc>)
 80046de:	2200      	movs	r2, #0
 80046e0:	601a      	str	r2, [r3, #0]
			adc1_length = 0;
 80046e2:	4b2e      	ldr	r3, [pc, #184]	@ (800479c <main+0x13e0>)
 80046e4:	2200      	movs	r2, #0
 80046e6:	601a      	str	r2, [r3, #0]
			adc_max[0] = 0;
 80046e8:	4b26      	ldr	r3, [pc, #152]	@ (8004784 <main+0x13c8>)
 80046ea:	2200      	movs	r2, #0
 80046ec:	801a      	strh	r2, [r3, #0]
			adc_max[1] = 0;
 80046ee:	4b25      	ldr	r3, [pc, #148]	@ (8004784 <main+0x13c8>)
 80046f0:	2200      	movs	r2, #0
 80046f2:	805a      	strh	r2, [r3, #2]
			adc_min[0] = -1;
 80046f4:	4b24      	ldr	r3, [pc, #144]	@ (8004788 <main+0x13cc>)
 80046f6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80046fa:	801a      	strh	r2, [r3, #0]
			adc_min[1] = -1;
 80046fc:	4b22      	ldr	r3, [pc, #136]	@ (8004788 <main+0x13cc>)
 80046fe:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004702:	805a      	strh	r2, [r3, #2]
			adc_period[0] = 0;
 8004704:	4b21      	ldr	r3, [pc, #132]	@ (800478c <main+0x13d0>)
 8004706:	2200      	movs	r2, #0
 8004708:	601a      	str	r2, [r3, #0]
			adc_period[1] = 0;
 800470a:	4b20      	ldr	r3, [pc, #128]	@ (800478c <main+0x13d0>)
 800470c:	2200      	movs	r2, #0
 800470e:	605a      	str	r2, [r3, #4]
			adc_period0_detected = 0;
 8004710:	4b23      	ldr	r3, [pc, #140]	@ (80047a0 <main+0x13e4>)
 8004712:	2200      	movs	r2, #0
 8004714:	701a      	strb	r2, [r3, #0]
			adc_period1_detected = 0;
 8004716:	4b23      	ldr	r3, [pc, #140]	@ (80047a4 <main+0x13e8>)
 8004718:	2200      	movs	r2, #0
 800471a:	701a      	strb	r2, [r3, #0]
			event_trigger0_detected = 0;
 800471c:	4b22      	ldr	r3, [pc, #136]	@ (80047a8 <main+0x13ec>)
 800471e:	2200      	movs	r2, #0
 8004720:	701a      	strb	r2, [r3, #0]
			event_trigger1_detected = 0;
 8004722:	4b22      	ldr	r3, [pc, #136]	@ (80047ac <main+0x13f0>)
 8004724:	2200      	movs	r2, #0
 8004726:	701a      	strb	r2, [r3, #0]

			if (menu_channel0_enabled)
 8004728:	f897 3ace 	ldrb.w	r3, [r7, #2766]	@ 0xace
 800472c:	2b00      	cmp	r3, #0
 800472e:	d003      	beq.n	8004738 <main+0x137c>
				adc0_filled = 0;
 8004730:	4b1f      	ldr	r3, [pc, #124]	@ (80047b0 <main+0x13f4>)
 8004732:	2200      	movs	r2, #0
 8004734:	701a      	strb	r2, [r3, #0]
 8004736:	e002      	b.n	800473e <main+0x1382>
			else
				adc0_filled = 1;
 8004738:	4b1d      	ldr	r3, [pc, #116]	@ (80047b0 <main+0x13f4>)
 800473a:	2201      	movs	r2, #1
 800473c:	701a      	strb	r2, [r3, #0]

			if (menu_channel1_enabled)
 800473e:	f897 3acd 	ldrb.w	r3, [r7, #2765]	@ 0xacd
 8004742:	2b00      	cmp	r3, #0
 8004744:	d003      	beq.n	800474e <main+0x1392>
				adc1_filled = 0;
 8004746:	4b1b      	ldr	r3, [pc, #108]	@ (80047b4 <main+0x13f8>)
 8004748:	2200      	movs	r2, #0
 800474a:	701a      	strb	r2, [r3, #0]
 800474c:	e002      	b.n	8004754 <main+0x1398>
			else
				adc1_filled = 1;
 800474e:	4b19      	ldr	r3, [pc, #100]	@ (80047b4 <main+0x13f8>)
 8004750:	2201      	movs	r2, #1
 8004752:	701a      	strb	r2, [r3, #0]

			if (adc_immediate) {
 8004754:	4b18      	ldr	r3, [pc, #96]	@ (80047b8 <main+0x13fc>)
 8004756:	781b      	ldrb	r3, [r3, #0]
 8004758:	2b00      	cmp	r3, #0
 800475a:	d005      	beq.n	8004768 <main+0x13ac>
				// The ADC starts immediately after the previous measurement is handled
				HAL_ADC_Start_DMA(&hadc1, (uint32_t*)&adc_data, 2);
 800475c:	2202      	movs	r2, #2
 800475e:	4917      	ldr	r1, [pc, #92]	@ (80047bc <main+0x1400>)
 8004760:	4817      	ldr	r0, [pc, #92]	@ (80047c0 <main+0x1404>)
 8004762:	f000 ff85 	bl	8005670 <HAL_ADC_Start_DMA>
 8004766:	e002      	b.n	800476e <main+0x13b2>
			} else {
				// ADC starts by timer
				HAL_TIM_Base_Start_IT(&htim10);
 8004768:	4816      	ldr	r0, [pc, #88]	@ (80047c4 <main+0x1408>)
 800476a:	f004 f93d 	bl	80089e8 <HAL_TIM_Base_Start_IT>
			}

			local_event_adc = 0;
 800476e:	2300      	movs	r3, #0
 8004770:	f887 3ab5 	strb.w	r3, [r7, #2741]	@ 0xab5
		}

		frames++;
 8004774:	f897 3abf 	ldrb.w	r3, [r7, #2751]	@ 0xabf
 8004778:	3301      	adds	r3, #1
 800477a:	f887 3abf 	strb.w	r3, [r7, #2751]	@ 0xabf
  {
 800477e:	f7fe bf8a 	b.w	8003696 <main+0x2da>
 8004782:	bf00      	nop
 8004784:	2000d510 	.word	0x2000d510
 8004788:	2000d0e4 	.word	0x2000d0e4
 800478c:	2000d514 	.word	0x2000d514
 8004790:	2000d4e0 	.word	0x2000d4e0
 8004794:	2000d0e2 	.word	0x2000d0e2
 8004798:	2000d504 	.word	0x2000d504
 800479c:	2000d508 	.word	0x2000d508
 80047a0:	2000d51c 	.word	0x2000d51c
 80047a4:	2000d51d 	.word	0x2000d51d
 80047a8:	2000d109 	.word	0x2000d109
 80047ac:	2000d10a 	.word	0x2000d10a
 80047b0:	2000d50c 	.word	0x2000d50c
 80047b4:	2000d0e0 	.word	0x2000d0e0
 80047b8:	2000d0e8 	.word	0x2000d0e8
 80047bc:	2000d4fc 	.word	0x2000d4fc
 80047c0:	2000d310 	.word	0x2000d310
 80047c4:	2000ef10 	.word	0x2000ef10

080047c8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80047c8:	b580      	push	{r7, lr}
 80047ca:	b094      	sub	sp, #80	@ 0x50
 80047cc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80047ce:	f107 0320 	add.w	r3, r7, #32
 80047d2:	2230      	movs	r2, #48	@ 0x30
 80047d4:	2100      	movs	r1, #0
 80047d6:	4618      	mov	r0, r3
 80047d8:	f007 fb84 	bl	800bee4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80047dc:	f107 030c 	add.w	r3, r7, #12
 80047e0:	2200      	movs	r2, #0
 80047e2:	601a      	str	r2, [r3, #0]
 80047e4:	605a      	str	r2, [r3, #4]
 80047e6:	609a      	str	r2, [r3, #8]
 80047e8:	60da      	str	r2, [r3, #12]
 80047ea:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80047ec:	2300      	movs	r3, #0
 80047ee:	60bb      	str	r3, [r7, #8]
 80047f0:	4b27      	ldr	r3, [pc, #156]	@ (8004890 <SystemClock_Config+0xc8>)
 80047f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047f4:	4a26      	ldr	r2, [pc, #152]	@ (8004890 <SystemClock_Config+0xc8>)
 80047f6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80047fa:	6413      	str	r3, [r2, #64]	@ 0x40
 80047fc:	4b24      	ldr	r3, [pc, #144]	@ (8004890 <SystemClock_Config+0xc8>)
 80047fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004800:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004804:	60bb      	str	r3, [r7, #8]
 8004806:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8004808:	2300      	movs	r3, #0
 800480a:	607b      	str	r3, [r7, #4]
 800480c:	4b21      	ldr	r3, [pc, #132]	@ (8004894 <SystemClock_Config+0xcc>)
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	4a20      	ldr	r2, [pc, #128]	@ (8004894 <SystemClock_Config+0xcc>)
 8004812:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004816:	6013      	str	r3, [r2, #0]
 8004818:	4b1e      	ldr	r3, [pc, #120]	@ (8004894 <SystemClock_Config+0xcc>)
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8004820:	607b      	str	r3, [r7, #4]
 8004822:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8004824:	2302      	movs	r3, #2
 8004826:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8004828:	2301      	movs	r3, #1
 800482a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800482c:	2310      	movs	r3, #16
 800482e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004830:	2302      	movs	r3, #2
 8004832:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8004834:	2300      	movs	r3, #0
 8004836:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8004838:	2308      	movs	r3, #8
 800483a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 800483c:	2364      	movs	r3, #100	@ 0x64
 800483e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8004840:	2302      	movs	r3, #2
 8004842:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8004844:	2307      	movs	r3, #7
 8004846:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004848:	f107 0320 	add.w	r3, r7, #32
 800484c:	4618      	mov	r0, r3
 800484e:	f002 ffe7 	bl	8007820 <HAL_RCC_OscConfig>
 8004852:	4603      	mov	r3, r0
 8004854:	2b00      	cmp	r3, #0
 8004856:	d001      	beq.n	800485c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8004858:	f000 f83e 	bl	80048d8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800485c:	230f      	movs	r3, #15
 800485e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004860:	2302      	movs	r3, #2
 8004862:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004864:	2300      	movs	r3, #0
 8004866:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8004868:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800486c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800486e:	2300      	movs	r3, #0
 8004870:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8004872:	f107 030c 	add.w	r3, r7, #12
 8004876:	2103      	movs	r1, #3
 8004878:	4618      	mov	r0, r3
 800487a:	f003 fa49 	bl	8007d10 <HAL_RCC_ClockConfig>
 800487e:	4603      	mov	r3, r0
 8004880:	2b00      	cmp	r3, #0
 8004882:	d001      	beq.n	8004888 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8004884:	f000 f828 	bl	80048d8 <Error_Handler>
  }
}
 8004888:	bf00      	nop
 800488a:	3750      	adds	r7, #80	@ 0x50
 800488c:	46bd      	mov	sp, r7
 800488e:	bd80      	pop	{r7, pc}
 8004890:	40023800 	.word	0x40023800
 8004894:	40007000 	.word	0x40007000

08004898 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8004898:	b580      	push	{r7, lr}
 800489a:	b086      	sub	sp, #24
 800489c:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800489e:	463b      	mov	r3, r7
 80048a0:	2200      	movs	r2, #0
 80048a2:	601a      	str	r2, [r3, #0]
 80048a4:	605a      	str	r2, [r3, #4]
 80048a6:	609a      	str	r2, [r3, #8]
 80048a8:	60da      	str	r2, [r3, #12]
 80048aa:	611a      	str	r2, [r3, #16]
 80048ac:	615a      	str	r2, [r3, #20]

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 80048ae:	2301      	movs	r3, #1
 80048b0:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 80048b2:	23c0      	movs	r3, #192	@ 0xc0
 80048b4:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLLI2S.PLLI2SM = 16;
 80048b6:	2310      	movs	r3, #16
 80048b8:	607b      	str	r3, [r7, #4]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 80048ba:	2302      	movs	r3, #2
 80048bc:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80048be:	463b      	mov	r3, r7
 80048c0:	4618      	mov	r0, r3
 80048c2:	f003 fc45 	bl	8008150 <HAL_RCCEx_PeriphCLKConfig>
 80048c6:	4603      	mov	r3, r0
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d001      	beq.n	80048d0 <PeriphCommonClock_Config+0x38>
  {
    Error_Handler();
 80048cc:	f000 f804 	bl	80048d8 <Error_Handler>
  }
}
 80048d0:	bf00      	nop
 80048d2:	3718      	adds	r7, #24
 80048d4:	46bd      	mov	sp, r7
 80048d6:	bd80      	pop	{r7, pc}

080048d8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80048d8:	b480      	push	{r7}
 80048da:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80048dc:	b672      	cpsid	i
}
 80048de:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80048e0:	bf00      	nop
 80048e2:	e7fd      	b.n	80048e0 <Error_Handler+0x8>

080048e4 <MX_SPI4_Init>:
SPI_HandleTypeDef hspi4;
SPI_HandleTypeDef hspi5;

/* SPI4 init function */
void MX_SPI4_Init(void)
{
 80048e4:	b580      	push	{r7, lr}
 80048e6:	af00      	add	r7, sp, #0
  /* USER CODE END SPI4_Init 0 */

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  hspi4.Instance = SPI4;
 80048e8:	4b17      	ldr	r3, [pc, #92]	@ (8004948 <MX_SPI4_Init+0x64>)
 80048ea:	4a18      	ldr	r2, [pc, #96]	@ (800494c <MX_SPI4_Init+0x68>)
 80048ec:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 80048ee:	4b16      	ldr	r3, [pc, #88]	@ (8004948 <MX_SPI4_Init+0x64>)
 80048f0:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80048f4:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 80048f6:	4b14      	ldr	r3, [pc, #80]	@ (8004948 <MX_SPI4_Init+0x64>)
 80048f8:	2200      	movs	r2, #0
 80048fa:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 80048fc:	4b12      	ldr	r3, [pc, #72]	@ (8004948 <MX_SPI4_Init+0x64>)
 80048fe:	2200      	movs	r2, #0
 8004900:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 8004902:	4b11      	ldr	r3, [pc, #68]	@ (8004948 <MX_SPI4_Init+0x64>)
 8004904:	2200      	movs	r2, #0
 8004906:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 8004908:	4b0f      	ldr	r3, [pc, #60]	@ (8004948 <MX_SPI4_Init+0x64>)
 800490a:	2200      	movs	r2, #0
 800490c:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 800490e:	4b0e      	ldr	r3, [pc, #56]	@ (8004948 <MX_SPI4_Init+0x64>)
 8004910:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004914:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004916:	4b0c      	ldr	r3, [pc, #48]	@ (8004948 <MX_SPI4_Init+0x64>)
 8004918:	2200      	movs	r2, #0
 800491a:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800491c:	4b0a      	ldr	r3, [pc, #40]	@ (8004948 <MX_SPI4_Init+0x64>)
 800491e:	2200      	movs	r2, #0
 8004920:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 8004922:	4b09      	ldr	r3, [pc, #36]	@ (8004948 <MX_SPI4_Init+0x64>)
 8004924:	2200      	movs	r2, #0
 8004926:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004928:	4b07      	ldr	r3, [pc, #28]	@ (8004948 <MX_SPI4_Init+0x64>)
 800492a:	2200      	movs	r2, #0
 800492c:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi4.Init.CRCPolynomial = 10;
 800492e:	4b06      	ldr	r3, [pc, #24]	@ (8004948 <MX_SPI4_Init+0x64>)
 8004930:	220a      	movs	r2, #10
 8004932:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 8004934:	4804      	ldr	r0, [pc, #16]	@ (8004948 <MX_SPI4_Init+0x64>)
 8004936:	f003 fd5d 	bl	80083f4 <HAL_SPI_Init>
 800493a:	4603      	mov	r3, r0
 800493c:	2b00      	cmp	r3, #0
 800493e:	d001      	beq.n	8004944 <MX_SPI4_Init+0x60>
  {
    Error_Handler();
 8004940:	f7ff ffca 	bl	80048d8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 8004944:	bf00      	nop
 8004946:	bd80      	pop	{r7, pc}
 8004948:	2000ed3c 	.word	0x2000ed3c
 800494c:	40013400 	.word	0x40013400

08004950 <MX_SPI5_Init>:
/* SPI5 init function */
void MX_SPI5_Init(void)
{
 8004950:	b580      	push	{r7, lr}
 8004952:	af00      	add	r7, sp, #0
  /* USER CODE END SPI5_Init 0 */

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  hspi5.Instance = SPI5;
 8004954:	4b17      	ldr	r3, [pc, #92]	@ (80049b4 <MX_SPI5_Init+0x64>)
 8004956:	4a18      	ldr	r2, [pc, #96]	@ (80049b8 <MX_SPI5_Init+0x68>)
 8004958:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 800495a:	4b16      	ldr	r3, [pc, #88]	@ (80049b4 <MX_SPI5_Init+0x64>)
 800495c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8004960:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 8004962:	4b14      	ldr	r3, [pc, #80]	@ (80049b4 <MX_SPI5_Init+0x64>)
 8004964:	2200      	movs	r2, #0
 8004966:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 8004968:	4b12      	ldr	r3, [pc, #72]	@ (80049b4 <MX_SPI5_Init+0x64>)
 800496a:	2200      	movs	r2, #0
 800496c:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 800496e:	4b11      	ldr	r3, [pc, #68]	@ (80049b4 <MX_SPI5_Init+0x64>)
 8004970:	2200      	movs	r2, #0
 8004972:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8004974:	4b0f      	ldr	r3, [pc, #60]	@ (80049b4 <MX_SPI5_Init+0x64>)
 8004976:	2200      	movs	r2, #0
 8004978:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 800497a:	4b0e      	ldr	r3, [pc, #56]	@ (80049b4 <MX_SPI5_Init+0x64>)
 800497c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004980:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004982:	4b0c      	ldr	r3, [pc, #48]	@ (80049b4 <MX_SPI5_Init+0x64>)
 8004984:	2200      	movs	r2, #0
 8004986:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8004988:	4b0a      	ldr	r3, [pc, #40]	@ (80049b4 <MX_SPI5_Init+0x64>)
 800498a:	2200      	movs	r2, #0
 800498c:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 800498e:	4b09      	ldr	r3, [pc, #36]	@ (80049b4 <MX_SPI5_Init+0x64>)
 8004990:	2200      	movs	r2, #0
 8004992:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004994:	4b07      	ldr	r3, [pc, #28]	@ (80049b4 <MX_SPI5_Init+0x64>)
 8004996:	2200      	movs	r2, #0
 8004998:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi5.Init.CRCPolynomial = 10;
 800499a:	4b06      	ldr	r3, [pc, #24]	@ (80049b4 <MX_SPI5_Init+0x64>)
 800499c:	220a      	movs	r2, #10
 800499e:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 80049a0:	4804      	ldr	r0, [pc, #16]	@ (80049b4 <MX_SPI5_Init+0x64>)
 80049a2:	f003 fd27 	bl	80083f4 <HAL_SPI_Init>
 80049a6:	4603      	mov	r3, r0
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d001      	beq.n	80049b0 <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 80049ac:	f7ff ff94 	bl	80048d8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 80049b0:	bf00      	nop
 80049b2:	bd80      	pop	{r7, pc}
 80049b4:	2000ed94 	.word	0x2000ed94
 80049b8:	40015000 	.word	0x40015000

080049bc <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80049bc:	b580      	push	{r7, lr}
 80049be:	b08e      	sub	sp, #56	@ 0x38
 80049c0:	af00      	add	r7, sp, #0
 80049c2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80049c4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80049c8:	2200      	movs	r2, #0
 80049ca:	601a      	str	r2, [r3, #0]
 80049cc:	605a      	str	r2, [r3, #4]
 80049ce:	609a      	str	r2, [r3, #8]
 80049d0:	60da      	str	r2, [r3, #12]
 80049d2:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI4)
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	4a59      	ldr	r2, [pc, #356]	@ (8004b40 <HAL_SPI_MspInit+0x184>)
 80049da:	4293      	cmp	r3, r2
 80049dc:	d15c      	bne.n	8004a98 <HAL_SPI_MspInit+0xdc>
  {
  /* USER CODE BEGIN SPI4_MspInit 0 */

  /* USER CODE END SPI4_MspInit 0 */
    /* SPI4 clock enable */
    __HAL_RCC_SPI4_CLK_ENABLE();
 80049de:	2300      	movs	r3, #0
 80049e0:	623b      	str	r3, [r7, #32]
 80049e2:	4b58      	ldr	r3, [pc, #352]	@ (8004b44 <HAL_SPI_MspInit+0x188>)
 80049e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80049e6:	4a57      	ldr	r2, [pc, #348]	@ (8004b44 <HAL_SPI_MspInit+0x188>)
 80049e8:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80049ec:	6453      	str	r3, [r2, #68]	@ 0x44
 80049ee:	4b55      	ldr	r3, [pc, #340]	@ (8004b44 <HAL_SPI_MspInit+0x188>)
 80049f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80049f2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80049f6:	623b      	str	r3, [r7, #32]
 80049f8:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80049fa:	2300      	movs	r3, #0
 80049fc:	61fb      	str	r3, [r7, #28]
 80049fe:	4b51      	ldr	r3, [pc, #324]	@ (8004b44 <HAL_SPI_MspInit+0x188>)
 8004a00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a02:	4a50      	ldr	r2, [pc, #320]	@ (8004b44 <HAL_SPI_MspInit+0x188>)
 8004a04:	f043 0301 	orr.w	r3, r3, #1
 8004a08:	6313      	str	r3, [r2, #48]	@ 0x30
 8004a0a:	4b4e      	ldr	r3, [pc, #312]	@ (8004b44 <HAL_SPI_MspInit+0x188>)
 8004a0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a0e:	f003 0301 	and.w	r3, r3, #1
 8004a12:	61fb      	str	r3, [r7, #28]
 8004a14:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004a16:	2300      	movs	r3, #0
 8004a18:	61bb      	str	r3, [r7, #24]
 8004a1a:	4b4a      	ldr	r3, [pc, #296]	@ (8004b44 <HAL_SPI_MspInit+0x188>)
 8004a1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a1e:	4a49      	ldr	r2, [pc, #292]	@ (8004b44 <HAL_SPI_MspInit+0x188>)
 8004a20:	f043 0302 	orr.w	r3, r3, #2
 8004a24:	6313      	str	r3, [r2, #48]	@ 0x30
 8004a26:	4b47      	ldr	r3, [pc, #284]	@ (8004b44 <HAL_SPI_MspInit+0x188>)
 8004a28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a2a:	f003 0302 	and.w	r3, r3, #2
 8004a2e:	61bb      	str	r3, [r7, #24]
 8004a30:	69bb      	ldr	r3, [r7, #24]
    /**SPI4 GPIO Configuration
    PA1     ------> SPI4_MOSI
    PB13     ------> SPI4_SCK
    PA11     ------> SPI4_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8004a32:	2302      	movs	r3, #2
 8004a34:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004a36:	2302      	movs	r3, #2
 8004a38:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a3a:	2300      	movs	r3, #0
 8004a3c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004a3e:	2303      	movs	r3, #3
 8004a40:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8004a42:	2305      	movs	r3, #5
 8004a44:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004a46:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004a4a:	4619      	mov	r1, r3
 8004a4c:	483e      	ldr	r0, [pc, #248]	@ (8004b48 <HAL_SPI_MspInit+0x18c>)
 8004a4e:	f001 ff51 	bl	80068f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8004a52:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8004a56:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004a58:	2302      	movs	r3, #2
 8004a5a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a5c:	2300      	movs	r3, #0
 8004a5e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004a60:	2303      	movs	r3, #3
 8004a62:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI4;
 8004a64:	2306      	movs	r3, #6
 8004a66:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004a68:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004a6c:	4619      	mov	r1, r3
 8004a6e:	4837      	ldr	r0, [pc, #220]	@ (8004b4c <HAL_SPI_MspInit+0x190>)
 8004a70:	f001 ff40 	bl	80068f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8004a74:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8004a78:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004a7a:	2302      	movs	r3, #2
 8004a7c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a7e:	2300      	movs	r3, #0
 8004a80:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004a82:	2303      	movs	r3, #3
 8004a84:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI4;
 8004a86:	2306      	movs	r3, #6
 8004a88:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004a8a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004a8e:	4619      	mov	r1, r3
 8004a90:	482d      	ldr	r0, [pc, #180]	@ (8004b48 <HAL_SPI_MspInit+0x18c>)
 8004a92:	f001 ff2f 	bl	80068f4 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }
}
 8004a96:	e04f      	b.n	8004b38 <HAL_SPI_MspInit+0x17c>
  else if(spiHandle->Instance==SPI5)
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	4a2c      	ldr	r2, [pc, #176]	@ (8004b50 <HAL_SPI_MspInit+0x194>)
 8004a9e:	4293      	cmp	r3, r2
 8004aa0:	d14a      	bne.n	8004b38 <HAL_SPI_MspInit+0x17c>
    __HAL_RCC_SPI5_CLK_ENABLE();
 8004aa2:	2300      	movs	r3, #0
 8004aa4:	617b      	str	r3, [r7, #20]
 8004aa6:	4b27      	ldr	r3, [pc, #156]	@ (8004b44 <HAL_SPI_MspInit+0x188>)
 8004aa8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004aaa:	4a26      	ldr	r2, [pc, #152]	@ (8004b44 <HAL_SPI_MspInit+0x188>)
 8004aac:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004ab0:	6453      	str	r3, [r2, #68]	@ 0x44
 8004ab2:	4b24      	ldr	r3, [pc, #144]	@ (8004b44 <HAL_SPI_MspInit+0x188>)
 8004ab4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004ab6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004aba:	617b      	str	r3, [r7, #20]
 8004abc:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004abe:	2300      	movs	r3, #0
 8004ac0:	613b      	str	r3, [r7, #16]
 8004ac2:	4b20      	ldr	r3, [pc, #128]	@ (8004b44 <HAL_SPI_MspInit+0x188>)
 8004ac4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ac6:	4a1f      	ldr	r2, [pc, #124]	@ (8004b44 <HAL_SPI_MspInit+0x188>)
 8004ac8:	f043 0302 	orr.w	r3, r3, #2
 8004acc:	6313      	str	r3, [r2, #48]	@ 0x30
 8004ace:	4b1d      	ldr	r3, [pc, #116]	@ (8004b44 <HAL_SPI_MspInit+0x188>)
 8004ad0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ad2:	f003 0302 	and.w	r3, r3, #2
 8004ad6:	613b      	str	r3, [r7, #16]
 8004ad8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004ada:	2300      	movs	r3, #0
 8004adc:	60fb      	str	r3, [r7, #12]
 8004ade:	4b19      	ldr	r3, [pc, #100]	@ (8004b44 <HAL_SPI_MspInit+0x188>)
 8004ae0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ae2:	4a18      	ldr	r2, [pc, #96]	@ (8004b44 <HAL_SPI_MspInit+0x188>)
 8004ae4:	f043 0301 	orr.w	r3, r3, #1
 8004ae8:	6313      	str	r3, [r2, #48]	@ 0x30
 8004aea:	4b16      	ldr	r3, [pc, #88]	@ (8004b44 <HAL_SPI_MspInit+0x188>)
 8004aec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004aee:	f003 0301 	and.w	r3, r3, #1
 8004af2:	60fb      	str	r3, [r7, #12]
 8004af4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8004af6:	2301      	movs	r3, #1
 8004af8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004afa:	2302      	movs	r3, #2
 8004afc:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004afe:	2300      	movs	r3, #0
 8004b00:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004b02:	2303      	movs	r3, #3
 8004b04:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI5;
 8004b06:	2306      	movs	r3, #6
 8004b08:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004b0a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004b0e:	4619      	mov	r1, r3
 8004b10:	480e      	ldr	r0, [pc, #56]	@ (8004b4c <HAL_SPI_MspInit+0x190>)
 8004b12:	f001 feef 	bl	80068f4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12;
 8004b16:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8004b1a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004b1c:	2302      	movs	r3, #2
 8004b1e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b20:	2300      	movs	r3, #0
 8004b22:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004b24:	2303      	movs	r3, #3
 8004b26:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI5;
 8004b28:	2306      	movs	r3, #6
 8004b2a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004b2c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004b30:	4619      	mov	r1, r3
 8004b32:	4805      	ldr	r0, [pc, #20]	@ (8004b48 <HAL_SPI_MspInit+0x18c>)
 8004b34:	f001 fede 	bl	80068f4 <HAL_GPIO_Init>
}
 8004b38:	bf00      	nop
 8004b3a:	3738      	adds	r7, #56	@ 0x38
 8004b3c:	46bd      	mov	sp, r7
 8004b3e:	bd80      	pop	{r7, pc}
 8004b40:	40013400 	.word	0x40013400
 8004b44:	40023800 	.word	0x40023800
 8004b48:	40020000 	.word	0x40020000
 8004b4c:	40020400 	.word	0x40020400
 8004b50:	40015000 	.word	0x40015000

08004b54 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004b54:	b580      	push	{r7, lr}
 8004b56:	b082      	sub	sp, #8
 8004b58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004b5a:	2300      	movs	r3, #0
 8004b5c:	607b      	str	r3, [r7, #4]
 8004b5e:	4b10      	ldr	r3, [pc, #64]	@ (8004ba0 <HAL_MspInit+0x4c>)
 8004b60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b62:	4a0f      	ldr	r2, [pc, #60]	@ (8004ba0 <HAL_MspInit+0x4c>)
 8004b64:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004b68:	6453      	str	r3, [r2, #68]	@ 0x44
 8004b6a:	4b0d      	ldr	r3, [pc, #52]	@ (8004ba0 <HAL_MspInit+0x4c>)
 8004b6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b6e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004b72:	607b      	str	r3, [r7, #4]
 8004b74:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004b76:	2300      	movs	r3, #0
 8004b78:	603b      	str	r3, [r7, #0]
 8004b7a:	4b09      	ldr	r3, [pc, #36]	@ (8004ba0 <HAL_MspInit+0x4c>)
 8004b7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b7e:	4a08      	ldr	r2, [pc, #32]	@ (8004ba0 <HAL_MspInit+0x4c>)
 8004b80:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004b84:	6413      	str	r3, [r2, #64]	@ 0x40
 8004b86:	4b06      	ldr	r3, [pc, #24]	@ (8004ba0 <HAL_MspInit+0x4c>)
 8004b88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b8a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004b8e:	603b      	str	r3, [r7, #0]
 8004b90:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8004b92:	2007      	movs	r0, #7
 8004b94:	f001 fa4e 	bl	8006034 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004b98:	bf00      	nop
 8004b9a:	3708      	adds	r7, #8
 8004b9c:	46bd      	mov	sp, r7
 8004b9e:	bd80      	pop	{r7, pc}
 8004ba0:	40023800 	.word	0x40023800

08004ba4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004ba4:	b480      	push	{r7}
 8004ba6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8004ba8:	bf00      	nop
 8004baa:	e7fd      	b.n	8004ba8 <NMI_Handler+0x4>

08004bac <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004bac:	b480      	push	{r7}
 8004bae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004bb0:	bf00      	nop
 8004bb2:	e7fd      	b.n	8004bb0 <HardFault_Handler+0x4>

08004bb4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004bb4:	b480      	push	{r7}
 8004bb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004bb8:	bf00      	nop
 8004bba:	e7fd      	b.n	8004bb8 <MemManage_Handler+0x4>

08004bbc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004bbc:	b480      	push	{r7}
 8004bbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004bc0:	bf00      	nop
 8004bc2:	e7fd      	b.n	8004bc0 <BusFault_Handler+0x4>

08004bc4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004bc4:	b480      	push	{r7}
 8004bc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004bc8:	bf00      	nop
 8004bca:	e7fd      	b.n	8004bc8 <UsageFault_Handler+0x4>

08004bcc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004bcc:	b480      	push	{r7}
 8004bce:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004bd0:	bf00      	nop
 8004bd2:	46bd      	mov	sp, r7
 8004bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd8:	4770      	bx	lr

08004bda <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004bda:	b480      	push	{r7}
 8004bdc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004bde:	bf00      	nop
 8004be0:	46bd      	mov	sp, r7
 8004be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be6:	4770      	bx	lr

08004be8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004be8:	b480      	push	{r7}
 8004bea:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004bec:	bf00      	nop
 8004bee:	46bd      	mov	sp, r7
 8004bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf4:	4770      	bx	lr

08004bf6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004bf6:	b580      	push	{r7, lr}
 8004bf8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004bfa:	f000 fcb1 	bl	8005560 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004bfe:	bf00      	nop
 8004c00:	bd80      	pop	{r7, pc}
	...

08004c04 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8004c04:	b580      	push	{r7, lr}
 8004c06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 8004c08:	4802      	ldr	r0, [pc, #8]	@ (8004c14 <DMA1_Stream3_IRQHandler+0x10>)
 8004c0a:	f001 fc09 	bl	8006420 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8004c0e:	bf00      	nop
 8004c10:	bd80      	pop	{r7, pc}
 8004c12:	bf00      	nop
 8004c14:	2000d450 	.word	0x2000d450

08004c18 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8004c18:	b580      	push	{r7, lr}
 8004c1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8004c1c:	4803      	ldr	r0, [pc, #12]	@ (8004c2c <TIM1_UP_TIM10_IRQHandler+0x14>)
 8004c1e:	f004 f923 	bl	8008e68 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim10);
 8004c22:	4803      	ldr	r0, [pc, #12]	@ (8004c30 <TIM1_UP_TIM10_IRQHandler+0x18>)
 8004c24:	f004 f920 	bl	8008e68 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8004c28:	bf00      	nop
 8004c2a:	bd80      	pop	{r7, pc}
 8004c2c:	2000edf0 	.word	0x2000edf0
 8004c30:	2000ef10 	.word	0x2000ef10

08004c34 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8004c34:	b580      	push	{r7, lr}
 8004c36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8004c38:	4802      	ldr	r0, [pc, #8]	@ (8004c44 <TIM2_IRQHandler+0x10>)
 8004c3a:	f004 f915 	bl	8008e68 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8004c3e:	bf00      	nop
 8004c40:	bd80      	pop	{r7, pc}
 8004c42:	bf00      	nop
 8004c44:	2000ee38 	.word	0x2000ee38

08004c48 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8004c48:	b580      	push	{r7, lr}
 8004c4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8004c4c:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8004c50:	f002 f806 	bl	8006c60 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8004c54:	bf00      	nop
 8004c56:	bd80      	pop	{r7, pc}

08004c58 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8004c58:	b580      	push	{r7, lr}
 8004c5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8004c5c:	4802      	ldr	r0, [pc, #8]	@ (8004c68 <DMA2_Stream0_IRQHandler+0x10>)
 8004c5e:	f001 fbdf 	bl	8006420 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8004c62:	bf00      	nop
 8004c64:	bd80      	pop	{r7, pc}
 8004c66:	bf00      	nop
 8004c68:	2000d358 	.word	0x2000d358

08004c6c <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8004c6c:	b580      	push	{r7, lr}
 8004c6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8004c70:	4802      	ldr	r0, [pc, #8]	@ (8004c7c <USART6_IRQHandler+0x10>)
 8004c72:	f005 f841 	bl	8009cf8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8004c76:	bf00      	nop
 8004c78:	bd80      	pop	{r7, pc}
 8004c7a:	bf00      	nop
 8004c7c:	2000efa0 	.word	0x2000efa0

08004c80 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004c80:	b580      	push	{r7, lr}
 8004c82:	b086      	sub	sp, #24
 8004c84:	af00      	add	r7, sp, #0
 8004c86:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004c88:	4a14      	ldr	r2, [pc, #80]	@ (8004cdc <_sbrk+0x5c>)
 8004c8a:	4b15      	ldr	r3, [pc, #84]	@ (8004ce0 <_sbrk+0x60>)
 8004c8c:	1ad3      	subs	r3, r2, r3
 8004c8e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004c90:	697b      	ldr	r3, [r7, #20]
 8004c92:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004c94:	4b13      	ldr	r3, [pc, #76]	@ (8004ce4 <_sbrk+0x64>)
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d102      	bne.n	8004ca2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004c9c:	4b11      	ldr	r3, [pc, #68]	@ (8004ce4 <_sbrk+0x64>)
 8004c9e:	4a12      	ldr	r2, [pc, #72]	@ (8004ce8 <_sbrk+0x68>)
 8004ca0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004ca2:	4b10      	ldr	r3, [pc, #64]	@ (8004ce4 <_sbrk+0x64>)
 8004ca4:	681a      	ldr	r2, [r3, #0]
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	4413      	add	r3, r2
 8004caa:	693a      	ldr	r2, [r7, #16]
 8004cac:	429a      	cmp	r2, r3
 8004cae:	d207      	bcs.n	8004cc0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004cb0:	f007 f96a 	bl	800bf88 <__errno>
 8004cb4:	4603      	mov	r3, r0
 8004cb6:	220c      	movs	r2, #12
 8004cb8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004cba:	f04f 33ff 	mov.w	r3, #4294967295
 8004cbe:	e009      	b.n	8004cd4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004cc0:	4b08      	ldr	r3, [pc, #32]	@ (8004ce4 <_sbrk+0x64>)
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004cc6:	4b07      	ldr	r3, [pc, #28]	@ (8004ce4 <_sbrk+0x64>)
 8004cc8:	681a      	ldr	r2, [r3, #0]
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	4413      	add	r3, r2
 8004cce:	4a05      	ldr	r2, [pc, #20]	@ (8004ce4 <_sbrk+0x64>)
 8004cd0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004cd2:	68fb      	ldr	r3, [r7, #12]
}
 8004cd4:	4618      	mov	r0, r3
 8004cd6:	3718      	adds	r7, #24
 8004cd8:	46bd      	mov	sp, r7
 8004cda:	bd80      	pop	{r7, pc}
 8004cdc:	20020000 	.word	0x20020000
 8004ce0:	00000800 	.word	0x00000800
 8004ce4:	2000edec 	.word	0x2000edec
 8004ce8:	2000f150 	.word	0x2000f150

08004cec <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004cec:	b480      	push	{r7}
 8004cee:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004cf0:	4b06      	ldr	r3, [pc, #24]	@ (8004d0c <SystemInit+0x20>)
 8004cf2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004cf6:	4a05      	ldr	r2, [pc, #20]	@ (8004d0c <SystemInit+0x20>)
 8004cf8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8004cfc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004d00:	bf00      	nop
 8004d02:	46bd      	mov	sp, r7
 8004d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d08:	4770      	bx	lr
 8004d0a:	bf00      	nop
 8004d0c:	e000ed00 	.word	0xe000ed00

08004d10 <MX_TIM1_Init>:
TIM_HandleTypeDef htim4;
TIM_HandleTypeDef htim10;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8004d10:	b580      	push	{r7, lr}
 8004d12:	b096      	sub	sp, #88	@ 0x58
 8004d14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004d16:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8004d1a:	2200      	movs	r2, #0
 8004d1c:	601a      	str	r2, [r3, #0]
 8004d1e:	605a      	str	r2, [r3, #4]
 8004d20:	609a      	str	r2, [r3, #8]
 8004d22:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004d24:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8004d28:	2200      	movs	r2, #0
 8004d2a:	601a      	str	r2, [r3, #0]
 8004d2c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004d2e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004d32:	2200      	movs	r2, #0
 8004d34:	601a      	str	r2, [r3, #0]
 8004d36:	605a      	str	r2, [r3, #4]
 8004d38:	609a      	str	r2, [r3, #8]
 8004d3a:	60da      	str	r2, [r3, #12]
 8004d3c:	611a      	str	r2, [r3, #16]
 8004d3e:	615a      	str	r2, [r3, #20]
 8004d40:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8004d42:	1d3b      	adds	r3, r7, #4
 8004d44:	2220      	movs	r2, #32
 8004d46:	2100      	movs	r1, #0
 8004d48:	4618      	mov	r0, r3
 8004d4a:	f007 f8cb 	bl	800bee4 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8004d4e:	4b3f      	ldr	r3, [pc, #252]	@ (8004e4c <MX_TIM1_Init+0x13c>)
 8004d50:	4a3f      	ldr	r2, [pc, #252]	@ (8004e50 <MX_TIM1_Init+0x140>)
 8004d52:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 100-1;
 8004d54:	4b3d      	ldr	r3, [pc, #244]	@ (8004e4c <MX_TIM1_Init+0x13c>)
 8004d56:	2263      	movs	r2, #99	@ 0x63
 8004d58:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004d5a:	4b3c      	ldr	r3, [pc, #240]	@ (8004e4c <MX_TIM1_Init+0x13c>)
 8004d5c:	2200      	movs	r2, #0
 8004d5e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000-1;
 8004d60:	4b3a      	ldr	r3, [pc, #232]	@ (8004e4c <MX_TIM1_Init+0x13c>)
 8004d62:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8004d66:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004d68:	4b38      	ldr	r3, [pc, #224]	@ (8004e4c <MX_TIM1_Init+0x13c>)
 8004d6a:	2200      	movs	r2, #0
 8004d6c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8004d6e:	4b37      	ldr	r3, [pc, #220]	@ (8004e4c <MX_TIM1_Init+0x13c>)
 8004d70:	2200      	movs	r2, #0
 8004d72:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004d74:	4b35      	ldr	r3, [pc, #212]	@ (8004e4c <MX_TIM1_Init+0x13c>)
 8004d76:	2200      	movs	r2, #0
 8004d78:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8004d7a:	4834      	ldr	r0, [pc, #208]	@ (8004e4c <MX_TIM1_Init+0x13c>)
 8004d7c:	f003 fde4 	bl	8008948 <HAL_TIM_Base_Init>
 8004d80:	4603      	mov	r3, r0
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d001      	beq.n	8004d8a <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8004d86:	f7ff fda7 	bl	80048d8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004d8a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004d8e:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8004d90:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8004d94:	4619      	mov	r1, r3
 8004d96:	482d      	ldr	r0, [pc, #180]	@ (8004e4c <MX_TIM1_Init+0x13c>)
 8004d98:	f004 fa18 	bl	80091cc <HAL_TIM_ConfigClockSource>
 8004d9c:	4603      	mov	r3, r0
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d001      	beq.n	8004da6 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8004da2:	f7ff fd99 	bl	80048d8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8004da6:	4829      	ldr	r0, [pc, #164]	@ (8004e4c <MX_TIM1_Init+0x13c>)
 8004da8:	f003 feaf 	bl	8008b0a <HAL_TIM_PWM_Init>
 8004dac:	4603      	mov	r3, r0
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d001      	beq.n	8004db6 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8004db2:	f7ff fd91 	bl	80048d8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004db6:	2300      	movs	r3, #0
 8004db8:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004dba:	2300      	movs	r3, #0
 8004dbc:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8004dbe:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8004dc2:	4619      	mov	r1, r3
 8004dc4:	4821      	ldr	r0, [pc, #132]	@ (8004e4c <MX_TIM1_Init+0x13c>)
 8004dc6:	f004 fdc3 	bl	8009950 <HAL_TIMEx_MasterConfigSynchronization>
 8004dca:	4603      	mov	r3, r0
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d001      	beq.n	8004dd4 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8004dd0:	f7ff fd82 	bl	80048d8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004dd4:	2360      	movs	r3, #96	@ 0x60
 8004dd6:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 500;
 8004dd8:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8004ddc:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004dde:	2300      	movs	r3, #0
 8004de0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8004de2:	2300      	movs	r3, #0
 8004de4:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004de6:	2300      	movs	r3, #0
 8004de8:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8004dea:	2300      	movs	r3, #0
 8004dec:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8004dee:	2300      	movs	r3, #0
 8004df0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004df2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004df6:	2200      	movs	r2, #0
 8004df8:	4619      	mov	r1, r3
 8004dfa:	4814      	ldr	r0, [pc, #80]	@ (8004e4c <MX_TIM1_Init+0x13c>)
 8004dfc:	f004 f924 	bl	8009048 <HAL_TIM_PWM_ConfigChannel>
 8004e00:	4603      	mov	r3, r0
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d001      	beq.n	8004e0a <MX_TIM1_Init+0xfa>
  {
    Error_Handler();
 8004e06:	f7ff fd67 	bl	80048d8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8004e0a:	2300      	movs	r3, #0
 8004e0c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8004e0e:	2300      	movs	r3, #0
 8004e10:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8004e12:	2300      	movs	r3, #0
 8004e14:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8004e16:	2300      	movs	r3, #0
 8004e18:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8004e1a:	2300      	movs	r3, #0
 8004e1c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8004e1e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8004e22:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8004e24:	2300      	movs	r3, #0
 8004e26:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8004e28:	1d3b      	adds	r3, r7, #4
 8004e2a:	4619      	mov	r1, r3
 8004e2c:	4807      	ldr	r0, [pc, #28]	@ (8004e4c <MX_TIM1_Init+0x13c>)
 8004e2e:	f004 fdfd 	bl	8009a2c <HAL_TIMEx_ConfigBreakDeadTime>
 8004e32:	4603      	mov	r3, r0
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d001      	beq.n	8004e3c <MX_TIM1_Init+0x12c>
  {
    Error_Handler();
 8004e38:	f7ff fd4e 	bl	80048d8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8004e3c:	4803      	ldr	r0, [pc, #12]	@ (8004e4c <MX_TIM1_Init+0x13c>)
 8004e3e:	f000 f9ff 	bl	8005240 <HAL_TIM_MspPostInit>

}
 8004e42:	bf00      	nop
 8004e44:	3758      	adds	r7, #88	@ 0x58
 8004e46:	46bd      	mov	sp, r7
 8004e48:	bd80      	pop	{r7, pc}
 8004e4a:	bf00      	nop
 8004e4c:	2000edf0 	.word	0x2000edf0
 8004e50:	40010000 	.word	0x40010000

08004e54 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8004e54:	b580      	push	{r7, lr}
 8004e56:	b086      	sub	sp, #24
 8004e58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004e5a:	f107 0308 	add.w	r3, r7, #8
 8004e5e:	2200      	movs	r2, #0
 8004e60:	601a      	str	r2, [r3, #0]
 8004e62:	605a      	str	r2, [r3, #4]
 8004e64:	609a      	str	r2, [r3, #8]
 8004e66:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004e68:	463b      	mov	r3, r7
 8004e6a:	2200      	movs	r2, #0
 8004e6c:	601a      	str	r2, [r3, #0]
 8004e6e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8004e70:	4b1d      	ldr	r3, [pc, #116]	@ (8004ee8 <MX_TIM2_Init+0x94>)
 8004e72:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8004e76:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 100-1;
 8004e78:	4b1b      	ldr	r3, [pc, #108]	@ (8004ee8 <MX_TIM2_Init+0x94>)
 8004e7a:	2263      	movs	r2, #99	@ 0x63
 8004e7c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004e7e:	4b1a      	ldr	r3, [pc, #104]	@ (8004ee8 <MX_TIM2_Init+0x94>)
 8004e80:	2200      	movs	r2, #0
 8004e82:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 32-1;
 8004e84:	4b18      	ldr	r3, [pc, #96]	@ (8004ee8 <MX_TIM2_Init+0x94>)
 8004e86:	221f      	movs	r2, #31
 8004e88:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004e8a:	4b17      	ldr	r3, [pc, #92]	@ (8004ee8 <MX_TIM2_Init+0x94>)
 8004e8c:	2200      	movs	r2, #0
 8004e8e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004e90:	4b15      	ldr	r3, [pc, #84]	@ (8004ee8 <MX_TIM2_Init+0x94>)
 8004e92:	2200      	movs	r2, #0
 8004e94:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8004e96:	4814      	ldr	r0, [pc, #80]	@ (8004ee8 <MX_TIM2_Init+0x94>)
 8004e98:	f003 fd56 	bl	8008948 <HAL_TIM_Base_Init>
 8004e9c:	4603      	mov	r3, r0
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d001      	beq.n	8004ea6 <MX_TIM2_Init+0x52>
  {
    Error_Handler();
 8004ea2:	f7ff fd19 	bl	80048d8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004ea6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004eaa:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8004eac:	f107 0308 	add.w	r3, r7, #8
 8004eb0:	4619      	mov	r1, r3
 8004eb2:	480d      	ldr	r0, [pc, #52]	@ (8004ee8 <MX_TIM2_Init+0x94>)
 8004eb4:	f004 f98a 	bl	80091cc <HAL_TIM_ConfigClockSource>
 8004eb8:	4603      	mov	r3, r0
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d001      	beq.n	8004ec2 <MX_TIM2_Init+0x6e>
  {
    Error_Handler();
 8004ebe:	f7ff fd0b 	bl	80048d8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004ec2:	2300      	movs	r3, #0
 8004ec4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004ec6:	2300      	movs	r3, #0
 8004ec8:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8004eca:	463b      	mov	r3, r7
 8004ecc:	4619      	mov	r1, r3
 8004ece:	4806      	ldr	r0, [pc, #24]	@ (8004ee8 <MX_TIM2_Init+0x94>)
 8004ed0:	f004 fd3e 	bl	8009950 <HAL_TIMEx_MasterConfigSynchronization>
 8004ed4:	4603      	mov	r3, r0
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d001      	beq.n	8004ede <MX_TIM2_Init+0x8a>
  {
    Error_Handler();
 8004eda:	f7ff fcfd 	bl	80048d8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8004ede:	bf00      	nop
 8004ee0:	3718      	adds	r7, #24
 8004ee2:	46bd      	mov	sp, r7
 8004ee4:	bd80      	pop	{r7, pc}
 8004ee6:	bf00      	nop
 8004ee8:	2000ee38 	.word	0x2000ee38

08004eec <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8004eec:	b580      	push	{r7, lr}
 8004eee:	b08c      	sub	sp, #48	@ 0x30
 8004ef0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8004ef2:	f107 030c 	add.w	r3, r7, #12
 8004ef6:	2224      	movs	r2, #36	@ 0x24
 8004ef8:	2100      	movs	r1, #0
 8004efa:	4618      	mov	r0, r3
 8004efc:	f006 fff2 	bl	800bee4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004f00:	1d3b      	adds	r3, r7, #4
 8004f02:	2200      	movs	r2, #0
 8004f04:	601a      	str	r2, [r3, #0]
 8004f06:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8004f08:	4b20      	ldr	r3, [pc, #128]	@ (8004f8c <MX_TIM3_Init+0xa0>)
 8004f0a:	4a21      	ldr	r2, [pc, #132]	@ (8004f90 <MX_TIM3_Init+0xa4>)
 8004f0c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8004f0e:	4b1f      	ldr	r3, [pc, #124]	@ (8004f8c <MX_TIM3_Init+0xa0>)
 8004f10:	2200      	movs	r2, #0
 8004f12:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004f14:	4b1d      	ldr	r3, [pc, #116]	@ (8004f8c <MX_TIM3_Init+0xa0>)
 8004f16:	2200      	movs	r2, #0
 8004f18:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8004f1a:	4b1c      	ldr	r3, [pc, #112]	@ (8004f8c <MX_TIM3_Init+0xa0>)
 8004f1c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004f20:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004f22:	4b1a      	ldr	r3, [pc, #104]	@ (8004f8c <MX_TIM3_Init+0xa0>)
 8004f24:	2200      	movs	r2, #0
 8004f26:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004f28:	4b18      	ldr	r3, [pc, #96]	@ (8004f8c <MX_TIM3_Init+0xa0>)
 8004f2a:	2200      	movs	r2, #0
 8004f2c:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8004f2e:	2301      	movs	r3, #1
 8004f30:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8004f32:	2300      	movs	r3, #0
 8004f34:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8004f36:	2301      	movs	r3, #1
 8004f38:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8004f3a:	2300      	movs	r3, #0
 8004f3c:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8004f3e:	2300      	movs	r3, #0
 8004f40:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8004f42:	2300      	movs	r3, #0
 8004f44:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8004f46:	2301      	movs	r3, #1
 8004f48:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8004f4a:	2300      	movs	r3, #0
 8004f4c:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8004f4e:	2300      	movs	r3, #0
 8004f50:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8004f52:	f107 030c 	add.w	r3, r7, #12
 8004f56:	4619      	mov	r1, r3
 8004f58:	480c      	ldr	r0, [pc, #48]	@ (8004f8c <MX_TIM3_Init+0xa0>)
 8004f5a:	f003 fedf 	bl	8008d1c <HAL_TIM_Encoder_Init>
 8004f5e:	4603      	mov	r3, r0
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d001      	beq.n	8004f68 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8004f64:	f7ff fcb8 	bl	80048d8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004f68:	2300      	movs	r3, #0
 8004f6a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004f6c:	2300      	movs	r3, #0
 8004f6e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8004f70:	1d3b      	adds	r3, r7, #4
 8004f72:	4619      	mov	r1, r3
 8004f74:	4805      	ldr	r0, [pc, #20]	@ (8004f8c <MX_TIM3_Init+0xa0>)
 8004f76:	f004 fceb 	bl	8009950 <HAL_TIMEx_MasterConfigSynchronization>
 8004f7a:	4603      	mov	r3, r0
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d001      	beq.n	8004f84 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8004f80:	f7ff fcaa 	bl	80048d8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8004f84:	bf00      	nop
 8004f86:	3730      	adds	r7, #48	@ 0x30
 8004f88:	46bd      	mov	sp, r7
 8004f8a:	bd80      	pop	{r7, pc}
 8004f8c:	2000ee80 	.word	0x2000ee80
 8004f90:	40000400 	.word	0x40000400

08004f94 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8004f94:	b580      	push	{r7, lr}
 8004f96:	b08c      	sub	sp, #48	@ 0x30
 8004f98:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8004f9a:	f107 030c 	add.w	r3, r7, #12
 8004f9e:	2224      	movs	r2, #36	@ 0x24
 8004fa0:	2100      	movs	r1, #0
 8004fa2:	4618      	mov	r0, r3
 8004fa4:	f006 ff9e 	bl	800bee4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004fa8:	1d3b      	adds	r3, r7, #4
 8004faa:	2200      	movs	r2, #0
 8004fac:	601a      	str	r2, [r3, #0]
 8004fae:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8004fb0:	4b20      	ldr	r3, [pc, #128]	@ (8005034 <MX_TIM4_Init+0xa0>)
 8004fb2:	4a21      	ldr	r2, [pc, #132]	@ (8005038 <MX_TIM4_Init+0xa4>)
 8004fb4:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8004fb6:	4b1f      	ldr	r3, [pc, #124]	@ (8005034 <MX_TIM4_Init+0xa0>)
 8004fb8:	2200      	movs	r2, #0
 8004fba:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004fbc:	4b1d      	ldr	r3, [pc, #116]	@ (8005034 <MX_TIM4_Init+0xa0>)
 8004fbe:	2200      	movs	r2, #0
 8004fc0:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8004fc2:	4b1c      	ldr	r3, [pc, #112]	@ (8005034 <MX_TIM4_Init+0xa0>)
 8004fc4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004fc8:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004fca:	4b1a      	ldr	r3, [pc, #104]	@ (8005034 <MX_TIM4_Init+0xa0>)
 8004fcc:	2200      	movs	r2, #0
 8004fce:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004fd0:	4b18      	ldr	r3, [pc, #96]	@ (8005034 <MX_TIM4_Init+0xa0>)
 8004fd2:	2200      	movs	r2, #0
 8004fd4:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8004fd6:	2301      	movs	r3, #1
 8004fd8:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8004fda:	2300      	movs	r3, #0
 8004fdc:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8004fde:	2301      	movs	r3, #1
 8004fe0:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8004fe2:	2300      	movs	r3, #0
 8004fe4:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8004fe6:	2300      	movs	r3, #0
 8004fe8:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8004fea:	2300      	movs	r3, #0
 8004fec:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8004fee:	2301      	movs	r3, #1
 8004ff0:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8004ff2:	2300      	movs	r3, #0
 8004ff4:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8004ff6:	2300      	movs	r3, #0
 8004ff8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8004ffa:	f107 030c 	add.w	r3, r7, #12
 8004ffe:	4619      	mov	r1, r3
 8005000:	480c      	ldr	r0, [pc, #48]	@ (8005034 <MX_TIM4_Init+0xa0>)
 8005002:	f003 fe8b 	bl	8008d1c <HAL_TIM_Encoder_Init>
 8005006:	4603      	mov	r3, r0
 8005008:	2b00      	cmp	r3, #0
 800500a:	d001      	beq.n	8005010 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 800500c:	f7ff fc64 	bl	80048d8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005010:	2300      	movs	r3, #0
 8005012:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005014:	2300      	movs	r3, #0
 8005016:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8005018:	1d3b      	adds	r3, r7, #4
 800501a:	4619      	mov	r1, r3
 800501c:	4805      	ldr	r0, [pc, #20]	@ (8005034 <MX_TIM4_Init+0xa0>)
 800501e:	f004 fc97 	bl	8009950 <HAL_TIMEx_MasterConfigSynchronization>
 8005022:	4603      	mov	r3, r0
 8005024:	2b00      	cmp	r3, #0
 8005026:	d001      	beq.n	800502c <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 8005028:	f7ff fc56 	bl	80048d8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800502c:	bf00      	nop
 800502e:	3730      	adds	r7, #48	@ 0x30
 8005030:	46bd      	mov	sp, r7
 8005032:	bd80      	pop	{r7, pc}
 8005034:	2000eec8 	.word	0x2000eec8
 8005038:	40000800 	.word	0x40000800

0800503c <MX_TIM10_Init>:
/* TIM10 init function */
void MX_TIM10_Init(void)
{
 800503c:	b580      	push	{r7, lr}
 800503e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8005040:	4b0e      	ldr	r3, [pc, #56]	@ (800507c <MX_TIM10_Init+0x40>)
 8005042:	4a0f      	ldr	r2, [pc, #60]	@ (8005080 <MX_TIM10_Init+0x44>)
 8005044:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 0;
 8005046:	4b0d      	ldr	r3, [pc, #52]	@ (800507c <MX_TIM10_Init+0x40>)
 8005048:	2200      	movs	r2, #0
 800504a:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 800504c:	4b0b      	ldr	r3, [pc, #44]	@ (800507c <MX_TIM10_Init+0x40>)
 800504e:	2200      	movs	r2, #0
 8005050:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 288-1;
 8005052:	4b0a      	ldr	r3, [pc, #40]	@ (800507c <MX_TIM10_Init+0x40>)
 8005054:	f240 121f 	movw	r2, #287	@ 0x11f
 8005058:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800505a:	4b08      	ldr	r3, [pc, #32]	@ (800507c <MX_TIM10_Init+0x40>)
 800505c:	2200      	movs	r2, #0
 800505e:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005060:	4b06      	ldr	r3, [pc, #24]	@ (800507c <MX_TIM10_Init+0x40>)
 8005062:	2200      	movs	r2, #0
 8005064:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8005066:	4805      	ldr	r0, [pc, #20]	@ (800507c <MX_TIM10_Init+0x40>)
 8005068:	f003 fc6e 	bl	8008948 <HAL_TIM_Base_Init>
 800506c:	4603      	mov	r3, r0
 800506e:	2b00      	cmp	r3, #0
 8005070:	d001      	beq.n	8005076 <MX_TIM10_Init+0x3a>
  {
    Error_Handler();
 8005072:	f7ff fc31 	bl	80048d8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 8005076:	bf00      	nop
 8005078:	bd80      	pop	{r7, pc}
 800507a:	bf00      	nop
 800507c:	2000ef10 	.word	0x2000ef10
 8005080:	40014400 	.word	0x40014400

08005084 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8005084:	b580      	push	{r7, lr}
 8005086:	b086      	sub	sp, #24
 8005088:	af00      	add	r7, sp, #0
 800508a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	4a2a      	ldr	r2, [pc, #168]	@ (800513c <HAL_TIM_Base_MspInit+0xb8>)
 8005092:	4293      	cmp	r3, r2
 8005094:	d116      	bne.n	80050c4 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8005096:	2300      	movs	r3, #0
 8005098:	617b      	str	r3, [r7, #20]
 800509a:	4b29      	ldr	r3, [pc, #164]	@ (8005140 <HAL_TIM_Base_MspInit+0xbc>)
 800509c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800509e:	4a28      	ldr	r2, [pc, #160]	@ (8005140 <HAL_TIM_Base_MspInit+0xbc>)
 80050a0:	f043 0301 	orr.w	r3, r3, #1
 80050a4:	6453      	str	r3, [r2, #68]	@ 0x44
 80050a6:	4b26      	ldr	r3, [pc, #152]	@ (8005140 <HAL_TIM_Base_MspInit+0xbc>)
 80050a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80050aa:	f003 0301 	and.w	r3, r3, #1
 80050ae:	617b      	str	r3, [r7, #20]
 80050b0:	697b      	ldr	r3, [r7, #20]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 80050b2:	2200      	movs	r2, #0
 80050b4:	2100      	movs	r1, #0
 80050b6:	2019      	movs	r0, #25
 80050b8:	f000 ffc7 	bl	800604a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80050bc:	2019      	movs	r0, #25
 80050be:	f000 ffe0 	bl	8006082 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }
}
 80050c2:	e036      	b.n	8005132 <HAL_TIM_Base_MspInit+0xae>
  else if(tim_baseHandle->Instance==TIM2)
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80050cc:	d116      	bne.n	80050fc <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80050ce:	2300      	movs	r3, #0
 80050d0:	613b      	str	r3, [r7, #16]
 80050d2:	4b1b      	ldr	r3, [pc, #108]	@ (8005140 <HAL_TIM_Base_MspInit+0xbc>)
 80050d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050d6:	4a1a      	ldr	r2, [pc, #104]	@ (8005140 <HAL_TIM_Base_MspInit+0xbc>)
 80050d8:	f043 0301 	orr.w	r3, r3, #1
 80050dc:	6413      	str	r3, [r2, #64]	@ 0x40
 80050de:	4b18      	ldr	r3, [pc, #96]	@ (8005140 <HAL_TIM_Base_MspInit+0xbc>)
 80050e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050e2:	f003 0301 	and.w	r3, r3, #1
 80050e6:	613b      	str	r3, [r7, #16]
 80050e8:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80050ea:	2200      	movs	r2, #0
 80050ec:	2100      	movs	r1, #0
 80050ee:	201c      	movs	r0, #28
 80050f0:	f000 ffab 	bl	800604a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80050f4:	201c      	movs	r0, #28
 80050f6:	f000 ffc4 	bl	8006082 <HAL_NVIC_EnableIRQ>
}
 80050fa:	e01a      	b.n	8005132 <HAL_TIM_Base_MspInit+0xae>
  else if(tim_baseHandle->Instance==TIM10)
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	4a10      	ldr	r2, [pc, #64]	@ (8005144 <HAL_TIM_Base_MspInit+0xc0>)
 8005102:	4293      	cmp	r3, r2
 8005104:	d115      	bne.n	8005132 <HAL_TIM_Base_MspInit+0xae>
    __HAL_RCC_TIM10_CLK_ENABLE();
 8005106:	2300      	movs	r3, #0
 8005108:	60fb      	str	r3, [r7, #12]
 800510a:	4b0d      	ldr	r3, [pc, #52]	@ (8005140 <HAL_TIM_Base_MspInit+0xbc>)
 800510c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800510e:	4a0c      	ldr	r2, [pc, #48]	@ (8005140 <HAL_TIM_Base_MspInit+0xbc>)
 8005110:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005114:	6453      	str	r3, [r2, #68]	@ 0x44
 8005116:	4b0a      	ldr	r3, [pc, #40]	@ (8005140 <HAL_TIM_Base_MspInit+0xbc>)
 8005118:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800511a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800511e:	60fb      	str	r3, [r7, #12]
 8005120:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8005122:	2200      	movs	r2, #0
 8005124:	2100      	movs	r1, #0
 8005126:	2019      	movs	r0, #25
 8005128:	f000 ff8f 	bl	800604a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800512c:	2019      	movs	r0, #25
 800512e:	f000 ffa8 	bl	8006082 <HAL_NVIC_EnableIRQ>
}
 8005132:	bf00      	nop
 8005134:	3718      	adds	r7, #24
 8005136:	46bd      	mov	sp, r7
 8005138:	bd80      	pop	{r7, pc}
 800513a:	bf00      	nop
 800513c:	40010000 	.word	0x40010000
 8005140:	40023800 	.word	0x40023800
 8005144:	40014400 	.word	0x40014400

08005148 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8005148:	b580      	push	{r7, lr}
 800514a:	b08c      	sub	sp, #48	@ 0x30
 800514c:	af00      	add	r7, sp, #0
 800514e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005150:	f107 031c 	add.w	r3, r7, #28
 8005154:	2200      	movs	r2, #0
 8005156:	601a      	str	r2, [r3, #0]
 8005158:	605a      	str	r2, [r3, #4]
 800515a:	609a      	str	r2, [r3, #8]
 800515c:	60da      	str	r2, [r3, #12]
 800515e:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM3)
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	4a32      	ldr	r2, [pc, #200]	@ (8005230 <HAL_TIM_Encoder_MspInit+0xe8>)
 8005166:	4293      	cmp	r3, r2
 8005168:	d12c      	bne.n	80051c4 <HAL_TIM_Encoder_MspInit+0x7c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800516a:	2300      	movs	r3, #0
 800516c:	61bb      	str	r3, [r7, #24]
 800516e:	4b31      	ldr	r3, [pc, #196]	@ (8005234 <HAL_TIM_Encoder_MspInit+0xec>)
 8005170:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005172:	4a30      	ldr	r2, [pc, #192]	@ (8005234 <HAL_TIM_Encoder_MspInit+0xec>)
 8005174:	f043 0302 	orr.w	r3, r3, #2
 8005178:	6413      	str	r3, [r2, #64]	@ 0x40
 800517a:	4b2e      	ldr	r3, [pc, #184]	@ (8005234 <HAL_TIM_Encoder_MspInit+0xec>)
 800517c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800517e:	f003 0302 	and.w	r3, r3, #2
 8005182:	61bb      	str	r3, [r7, #24]
 8005184:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005186:	2300      	movs	r3, #0
 8005188:	617b      	str	r3, [r7, #20]
 800518a:	4b2a      	ldr	r3, [pc, #168]	@ (8005234 <HAL_TIM_Encoder_MspInit+0xec>)
 800518c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800518e:	4a29      	ldr	r2, [pc, #164]	@ (8005234 <HAL_TIM_Encoder_MspInit+0xec>)
 8005190:	f043 0302 	orr.w	r3, r3, #2
 8005194:	6313      	str	r3, [r2, #48]	@ 0x30
 8005196:	4b27      	ldr	r3, [pc, #156]	@ (8005234 <HAL_TIM_Encoder_MspInit+0xec>)
 8005198:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800519a:	f003 0302 	and.w	r3, r3, #2
 800519e:	617b      	str	r3, [r7, #20]
 80051a0:	697b      	ldr	r3, [r7, #20]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = ENCODER1_INB_Pin|ENCODER1_INA_Pin;
 80051a2:	2330      	movs	r3, #48	@ 0x30
 80051a4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80051a6:	2302      	movs	r3, #2
 80051a8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80051aa:	2300      	movs	r3, #0
 80051ac:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80051ae:	2300      	movs	r3, #0
 80051b0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80051b2:	2302      	movs	r3, #2
 80051b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80051b6:	f107 031c 	add.w	r3, r7, #28
 80051ba:	4619      	mov	r1, r3
 80051bc:	481e      	ldr	r0, [pc, #120]	@ (8005238 <HAL_TIM_Encoder_MspInit+0xf0>)
 80051be:	f001 fb99 	bl	80068f4 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 80051c2:	e030      	b.n	8005226 <HAL_TIM_Encoder_MspInit+0xde>
  else if(tim_encoderHandle->Instance==TIM4)
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	4a1c      	ldr	r2, [pc, #112]	@ (800523c <HAL_TIM_Encoder_MspInit+0xf4>)
 80051ca:	4293      	cmp	r3, r2
 80051cc:	d12b      	bne.n	8005226 <HAL_TIM_Encoder_MspInit+0xde>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80051ce:	2300      	movs	r3, #0
 80051d0:	613b      	str	r3, [r7, #16]
 80051d2:	4b18      	ldr	r3, [pc, #96]	@ (8005234 <HAL_TIM_Encoder_MspInit+0xec>)
 80051d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051d6:	4a17      	ldr	r2, [pc, #92]	@ (8005234 <HAL_TIM_Encoder_MspInit+0xec>)
 80051d8:	f043 0304 	orr.w	r3, r3, #4
 80051dc:	6413      	str	r3, [r2, #64]	@ 0x40
 80051de:	4b15      	ldr	r3, [pc, #84]	@ (8005234 <HAL_TIM_Encoder_MspInit+0xec>)
 80051e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051e2:	f003 0304 	and.w	r3, r3, #4
 80051e6:	613b      	str	r3, [r7, #16]
 80051e8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80051ea:	2300      	movs	r3, #0
 80051ec:	60fb      	str	r3, [r7, #12]
 80051ee:	4b11      	ldr	r3, [pc, #68]	@ (8005234 <HAL_TIM_Encoder_MspInit+0xec>)
 80051f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80051f2:	4a10      	ldr	r2, [pc, #64]	@ (8005234 <HAL_TIM_Encoder_MspInit+0xec>)
 80051f4:	f043 0302 	orr.w	r3, r3, #2
 80051f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80051fa:	4b0e      	ldr	r3, [pc, #56]	@ (8005234 <HAL_TIM_Encoder_MspInit+0xec>)
 80051fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80051fe:	f003 0302 	and.w	r3, r3, #2
 8005202:	60fb      	str	r3, [r7, #12]
 8005204:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ENCODER0_INB_Pin|ENCODER0_INA_Pin;
 8005206:	23c0      	movs	r3, #192	@ 0xc0
 8005208:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800520a:	2302      	movs	r3, #2
 800520c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800520e:	2300      	movs	r3, #0
 8005210:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005212:	2300      	movs	r3, #0
 8005214:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8005216:	2302      	movs	r3, #2
 8005218:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800521a:	f107 031c 	add.w	r3, r7, #28
 800521e:	4619      	mov	r1, r3
 8005220:	4805      	ldr	r0, [pc, #20]	@ (8005238 <HAL_TIM_Encoder_MspInit+0xf0>)
 8005222:	f001 fb67 	bl	80068f4 <HAL_GPIO_Init>
}
 8005226:	bf00      	nop
 8005228:	3730      	adds	r7, #48	@ 0x30
 800522a:	46bd      	mov	sp, r7
 800522c:	bd80      	pop	{r7, pc}
 800522e:	bf00      	nop
 8005230:	40000400 	.word	0x40000400
 8005234:	40023800 	.word	0x40023800
 8005238:	40020400 	.word	0x40020400
 800523c:	40000800 	.word	0x40000800

08005240 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8005240:	b580      	push	{r7, lr}
 8005242:	b088      	sub	sp, #32
 8005244:	af00      	add	r7, sp, #0
 8005246:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005248:	f107 030c 	add.w	r3, r7, #12
 800524c:	2200      	movs	r2, #0
 800524e:	601a      	str	r2, [r3, #0]
 8005250:	605a      	str	r2, [r3, #4]
 8005252:	609a      	str	r2, [r3, #8]
 8005254:	60da      	str	r2, [r3, #12]
 8005256:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	4a12      	ldr	r2, [pc, #72]	@ (80052a8 <HAL_TIM_MspPostInit+0x68>)
 800525e:	4293      	cmp	r3, r2
 8005260:	d11e      	bne.n	80052a0 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005262:	2300      	movs	r3, #0
 8005264:	60bb      	str	r3, [r7, #8]
 8005266:	4b11      	ldr	r3, [pc, #68]	@ (80052ac <HAL_TIM_MspPostInit+0x6c>)
 8005268:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800526a:	4a10      	ldr	r2, [pc, #64]	@ (80052ac <HAL_TIM_MspPostInit+0x6c>)
 800526c:	f043 0301 	orr.w	r3, r3, #1
 8005270:	6313      	str	r3, [r2, #48]	@ 0x30
 8005272:	4b0e      	ldr	r3, [pc, #56]	@ (80052ac <HAL_TIM_MspPostInit+0x6c>)
 8005274:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005276:	f003 0301 	and.w	r3, r3, #1
 800527a:	60bb      	str	r3, [r7, #8]
 800527c:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800527e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8005282:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005284:	2302      	movs	r3, #2
 8005286:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005288:	2300      	movs	r3, #0
 800528a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800528c:	2300      	movs	r3, #0
 800528e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8005290:	2301      	movs	r3, #1
 8005292:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005294:	f107 030c 	add.w	r3, r7, #12
 8005298:	4619      	mov	r1, r3
 800529a:	4805      	ldr	r0, [pc, #20]	@ (80052b0 <HAL_TIM_MspPostInit+0x70>)
 800529c:	f001 fb2a 	bl	80068f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80052a0:	bf00      	nop
 80052a2:	3720      	adds	r7, #32
 80052a4:	46bd      	mov	sp, r7
 80052a6:	bd80      	pop	{r7, pc}
 80052a8:	40010000 	.word	0x40010000
 80052ac:	40023800 	.word	0x40023800
 80052b0:	40020000 	.word	0x40020000

080052b4 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart6;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80052b4:	b580      	push	{r7, lr}
 80052b6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80052b8:	4b11      	ldr	r3, [pc, #68]	@ (8005300 <MX_USART2_UART_Init+0x4c>)
 80052ba:	4a12      	ldr	r2, [pc, #72]	@ (8005304 <MX_USART2_UART_Init+0x50>)
 80052bc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80052be:	4b10      	ldr	r3, [pc, #64]	@ (8005300 <MX_USART2_UART_Init+0x4c>)
 80052c0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80052c4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80052c6:	4b0e      	ldr	r3, [pc, #56]	@ (8005300 <MX_USART2_UART_Init+0x4c>)
 80052c8:	2200      	movs	r2, #0
 80052ca:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80052cc:	4b0c      	ldr	r3, [pc, #48]	@ (8005300 <MX_USART2_UART_Init+0x4c>)
 80052ce:	2200      	movs	r2, #0
 80052d0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80052d2:	4b0b      	ldr	r3, [pc, #44]	@ (8005300 <MX_USART2_UART_Init+0x4c>)
 80052d4:	2200      	movs	r2, #0
 80052d6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80052d8:	4b09      	ldr	r3, [pc, #36]	@ (8005300 <MX_USART2_UART_Init+0x4c>)
 80052da:	220c      	movs	r2, #12
 80052dc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80052de:	4b08      	ldr	r3, [pc, #32]	@ (8005300 <MX_USART2_UART_Init+0x4c>)
 80052e0:	2200      	movs	r2, #0
 80052e2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80052e4:	4b06      	ldr	r3, [pc, #24]	@ (8005300 <MX_USART2_UART_Init+0x4c>)
 80052e6:	2200      	movs	r2, #0
 80052e8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80052ea:	4805      	ldr	r0, [pc, #20]	@ (8005300 <MX_USART2_UART_Init+0x4c>)
 80052ec:	f004 fc04 	bl	8009af8 <HAL_UART_Init>
 80052f0:	4603      	mov	r3, r0
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d001      	beq.n	80052fa <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80052f6:	f7ff faef 	bl	80048d8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80052fa:	bf00      	nop
 80052fc:	bd80      	pop	{r7, pc}
 80052fe:	bf00      	nop
 8005300:	2000ef58 	.word	0x2000ef58
 8005304:	40004400 	.word	0x40004400

08005308 <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 8005308:	b580      	push	{r7, lr}
 800530a:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 800530c:	4b11      	ldr	r3, [pc, #68]	@ (8005354 <MX_USART6_UART_Init+0x4c>)
 800530e:	4a12      	ldr	r2, [pc, #72]	@ (8005358 <MX_USART6_UART_Init+0x50>)
 8005310:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8005312:	4b10      	ldr	r3, [pc, #64]	@ (8005354 <MX_USART6_UART_Init+0x4c>)
 8005314:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8005318:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800531a:	4b0e      	ldr	r3, [pc, #56]	@ (8005354 <MX_USART6_UART_Init+0x4c>)
 800531c:	2200      	movs	r2, #0
 800531e:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8005320:	4b0c      	ldr	r3, [pc, #48]	@ (8005354 <MX_USART6_UART_Init+0x4c>)
 8005322:	2200      	movs	r2, #0
 8005324:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8005326:	4b0b      	ldr	r3, [pc, #44]	@ (8005354 <MX_USART6_UART_Init+0x4c>)
 8005328:	2200      	movs	r2, #0
 800532a:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 800532c:	4b09      	ldr	r3, [pc, #36]	@ (8005354 <MX_USART6_UART_Init+0x4c>)
 800532e:	220c      	movs	r2, #12
 8005330:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005332:	4b08      	ldr	r3, [pc, #32]	@ (8005354 <MX_USART6_UART_Init+0x4c>)
 8005334:	2200      	movs	r2, #0
 8005336:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8005338:	4b06      	ldr	r3, [pc, #24]	@ (8005354 <MX_USART6_UART_Init+0x4c>)
 800533a:	2200      	movs	r2, #0
 800533c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 800533e:	4805      	ldr	r0, [pc, #20]	@ (8005354 <MX_USART6_UART_Init+0x4c>)
 8005340:	f004 fbda 	bl	8009af8 <HAL_UART_Init>
 8005344:	4603      	mov	r3, r0
 8005346:	2b00      	cmp	r3, #0
 8005348:	d001      	beq.n	800534e <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 800534a:	f7ff fac5 	bl	80048d8 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 800534e:	bf00      	nop
 8005350:	bd80      	pop	{r7, pc}
 8005352:	bf00      	nop
 8005354:	2000efa0 	.word	0x2000efa0
 8005358:	40011400 	.word	0x40011400

0800535c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800535c:	b580      	push	{r7, lr}
 800535e:	b08c      	sub	sp, #48	@ 0x30
 8005360:	af00      	add	r7, sp, #0
 8005362:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005364:	f107 031c 	add.w	r3, r7, #28
 8005368:	2200      	movs	r2, #0
 800536a:	601a      	str	r2, [r3, #0]
 800536c:	605a      	str	r2, [r3, #4]
 800536e:	609a      	str	r2, [r3, #8]
 8005370:	60da      	str	r2, [r3, #12]
 8005372:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	4a36      	ldr	r2, [pc, #216]	@ (8005454 <HAL_UART_MspInit+0xf8>)
 800537a:	4293      	cmp	r3, r2
 800537c:	d12c      	bne.n	80053d8 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800537e:	2300      	movs	r3, #0
 8005380:	61bb      	str	r3, [r7, #24]
 8005382:	4b35      	ldr	r3, [pc, #212]	@ (8005458 <HAL_UART_MspInit+0xfc>)
 8005384:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005386:	4a34      	ldr	r2, [pc, #208]	@ (8005458 <HAL_UART_MspInit+0xfc>)
 8005388:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800538c:	6413      	str	r3, [r2, #64]	@ 0x40
 800538e:	4b32      	ldr	r3, [pc, #200]	@ (8005458 <HAL_UART_MspInit+0xfc>)
 8005390:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005392:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005396:	61bb      	str	r3, [r7, #24]
 8005398:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800539a:	2300      	movs	r3, #0
 800539c:	617b      	str	r3, [r7, #20]
 800539e:	4b2e      	ldr	r3, [pc, #184]	@ (8005458 <HAL_UART_MspInit+0xfc>)
 80053a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80053a2:	4a2d      	ldr	r2, [pc, #180]	@ (8005458 <HAL_UART_MspInit+0xfc>)
 80053a4:	f043 0301 	orr.w	r3, r3, #1
 80053a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80053aa:	4b2b      	ldr	r3, [pc, #172]	@ (8005458 <HAL_UART_MspInit+0xfc>)
 80053ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80053ae:	f003 0301 	and.w	r3, r3, #1
 80053b2:	617b      	str	r3, [r7, #20]
 80053b4:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80053b6:	230c      	movs	r3, #12
 80053b8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80053ba:	2302      	movs	r3, #2
 80053bc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80053be:	2300      	movs	r3, #0
 80053c0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80053c2:	2303      	movs	r3, #3
 80053c4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80053c6:	2307      	movs	r3, #7
 80053c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80053ca:	f107 031c 	add.w	r3, r7, #28
 80053ce:	4619      	mov	r1, r3
 80053d0:	4822      	ldr	r0, [pc, #136]	@ (800545c <HAL_UART_MspInit+0x100>)
 80053d2:	f001 fa8f 	bl	80068f4 <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 80053d6:	e038      	b.n	800544a <HAL_UART_MspInit+0xee>
  else if(uartHandle->Instance==USART6)
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	4a20      	ldr	r2, [pc, #128]	@ (8005460 <HAL_UART_MspInit+0x104>)
 80053de:	4293      	cmp	r3, r2
 80053e0:	d133      	bne.n	800544a <HAL_UART_MspInit+0xee>
    __HAL_RCC_USART6_CLK_ENABLE();
 80053e2:	2300      	movs	r3, #0
 80053e4:	613b      	str	r3, [r7, #16]
 80053e6:	4b1c      	ldr	r3, [pc, #112]	@ (8005458 <HAL_UART_MspInit+0xfc>)
 80053e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80053ea:	4a1b      	ldr	r2, [pc, #108]	@ (8005458 <HAL_UART_MspInit+0xfc>)
 80053ec:	f043 0320 	orr.w	r3, r3, #32
 80053f0:	6453      	str	r3, [r2, #68]	@ 0x44
 80053f2:	4b19      	ldr	r3, [pc, #100]	@ (8005458 <HAL_UART_MspInit+0xfc>)
 80053f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80053f6:	f003 0320 	and.w	r3, r3, #32
 80053fa:	613b      	str	r3, [r7, #16]
 80053fc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80053fe:	2300      	movs	r3, #0
 8005400:	60fb      	str	r3, [r7, #12]
 8005402:	4b15      	ldr	r3, [pc, #84]	@ (8005458 <HAL_UART_MspInit+0xfc>)
 8005404:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005406:	4a14      	ldr	r2, [pc, #80]	@ (8005458 <HAL_UART_MspInit+0xfc>)
 8005408:	f043 0304 	orr.w	r3, r3, #4
 800540c:	6313      	str	r3, [r2, #48]	@ 0x30
 800540e:	4b12      	ldr	r3, [pc, #72]	@ (8005458 <HAL_UART_MspInit+0xfc>)
 8005410:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005412:	f003 0304 	and.w	r3, r3, #4
 8005416:	60fb      	str	r3, [r7, #12]
 8005418:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800541a:	23c0      	movs	r3, #192	@ 0xc0
 800541c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800541e:	2302      	movs	r3, #2
 8005420:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005422:	2300      	movs	r3, #0
 8005424:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005426:	2303      	movs	r3, #3
 8005428:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 800542a:	2308      	movs	r3, #8
 800542c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800542e:	f107 031c 	add.w	r3, r7, #28
 8005432:	4619      	mov	r1, r3
 8005434:	480b      	ldr	r0, [pc, #44]	@ (8005464 <HAL_UART_MspInit+0x108>)
 8005436:	f001 fa5d 	bl	80068f4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 800543a:	2200      	movs	r2, #0
 800543c:	2100      	movs	r1, #0
 800543e:	2047      	movs	r0, #71	@ 0x47
 8005440:	f000 fe03 	bl	800604a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8005444:	2047      	movs	r0, #71	@ 0x47
 8005446:	f000 fe1c 	bl	8006082 <HAL_NVIC_EnableIRQ>
}
 800544a:	bf00      	nop
 800544c:	3730      	adds	r7, #48	@ 0x30
 800544e:	46bd      	mov	sp, r7
 8005450:	bd80      	pop	{r7, pc}
 8005452:	bf00      	nop
 8005454:	40004400 	.word	0x40004400
 8005458:	40023800 	.word	0x40023800
 800545c:	40020000 	.word	0x40020000
 8005460:	40011400 	.word	0x40011400
 8005464:	40020800 	.word	0x40020800

08005468 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8005468:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80054a0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800546c:	f7ff fc3e 	bl	8004cec <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8005470:	480c      	ldr	r0, [pc, #48]	@ (80054a4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8005472:	490d      	ldr	r1, [pc, #52]	@ (80054a8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8005474:	4a0d      	ldr	r2, [pc, #52]	@ (80054ac <LoopFillZerobss+0x1a>)
  movs r3, #0
 8005476:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005478:	e002      	b.n	8005480 <LoopCopyDataInit>

0800547a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800547a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800547c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800547e:	3304      	adds	r3, #4

08005480 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005480:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005482:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005484:	d3f9      	bcc.n	800547a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8005486:	4a0a      	ldr	r2, [pc, #40]	@ (80054b0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8005488:	4c0a      	ldr	r4, [pc, #40]	@ (80054b4 <LoopFillZerobss+0x22>)
  movs r3, #0
 800548a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800548c:	e001      	b.n	8005492 <LoopFillZerobss>

0800548e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800548e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005490:	3204      	adds	r2, #4

08005492 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8005492:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005494:	d3fb      	bcc.n	800548e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8005496:	f006 fd7d 	bl	800bf94 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800549a:	f7fd ff8f 	bl	80033bc <main>
  bx  lr    
 800549e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80054a0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80054a4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80054a8:	2000d2f4 	.word	0x2000d2f4
  ldr r2, =_sidata
 80054ac:	08011104 	.word	0x08011104
  ldr r2, =_sbss
 80054b0:	2000d2f4 	.word	0x2000d2f4
  ldr r4, =_ebss
 80054b4:	2000f14c 	.word	0x2000f14c

080054b8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80054b8:	e7fe      	b.n	80054b8 <ADC_IRQHandler>
	...

080054bc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80054bc:	b580      	push	{r7, lr}
 80054be:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80054c0:	4b0e      	ldr	r3, [pc, #56]	@ (80054fc <HAL_Init+0x40>)
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	4a0d      	ldr	r2, [pc, #52]	@ (80054fc <HAL_Init+0x40>)
 80054c6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80054ca:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80054cc:	4b0b      	ldr	r3, [pc, #44]	@ (80054fc <HAL_Init+0x40>)
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	4a0a      	ldr	r2, [pc, #40]	@ (80054fc <HAL_Init+0x40>)
 80054d2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80054d6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80054d8:	4b08      	ldr	r3, [pc, #32]	@ (80054fc <HAL_Init+0x40>)
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	4a07      	ldr	r2, [pc, #28]	@ (80054fc <HAL_Init+0x40>)
 80054de:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80054e2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80054e4:	2003      	movs	r0, #3
 80054e6:	f000 fda5 	bl	8006034 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80054ea:	2000      	movs	r0, #0
 80054ec:	f000 f808 	bl	8005500 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80054f0:	f7ff fb30 	bl	8004b54 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80054f4:	2300      	movs	r3, #0
}
 80054f6:	4618      	mov	r0, r3
 80054f8:	bd80      	pop	{r7, pc}
 80054fa:	bf00      	nop
 80054fc:	40023c00 	.word	0x40023c00

08005500 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005500:	b580      	push	{r7, lr}
 8005502:	b082      	sub	sp, #8
 8005504:	af00      	add	r7, sp, #0
 8005506:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8005508:	4b12      	ldr	r3, [pc, #72]	@ (8005554 <HAL_InitTick+0x54>)
 800550a:	681a      	ldr	r2, [r3, #0]
 800550c:	4b12      	ldr	r3, [pc, #72]	@ (8005558 <HAL_InitTick+0x58>)
 800550e:	781b      	ldrb	r3, [r3, #0]
 8005510:	4619      	mov	r1, r3
 8005512:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8005516:	fbb3 f3f1 	udiv	r3, r3, r1
 800551a:	fbb2 f3f3 	udiv	r3, r2, r3
 800551e:	4618      	mov	r0, r3
 8005520:	f000 fdbd 	bl	800609e <HAL_SYSTICK_Config>
 8005524:	4603      	mov	r3, r0
 8005526:	2b00      	cmp	r3, #0
 8005528:	d001      	beq.n	800552e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800552a:	2301      	movs	r3, #1
 800552c:	e00e      	b.n	800554c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	2b0f      	cmp	r3, #15
 8005532:	d80a      	bhi.n	800554a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005534:	2200      	movs	r2, #0
 8005536:	6879      	ldr	r1, [r7, #4]
 8005538:	f04f 30ff 	mov.w	r0, #4294967295
 800553c:	f000 fd85 	bl	800604a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8005540:	4a06      	ldr	r2, [pc, #24]	@ (800555c <HAL_InitTick+0x5c>)
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8005546:	2300      	movs	r3, #0
 8005548:	e000      	b.n	800554c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800554a:	2301      	movs	r3, #1
}
 800554c:	4618      	mov	r0, r3
 800554e:	3708      	adds	r7, #8
 8005550:	46bd      	mov	sp, r7
 8005552:	bd80      	pop	{r7, pc}
 8005554:	2000d10c 	.word	0x2000d10c
 8005558:	2000d114 	.word	0x2000d114
 800555c:	2000d110 	.word	0x2000d110

08005560 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005560:	b480      	push	{r7}
 8005562:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005564:	4b06      	ldr	r3, [pc, #24]	@ (8005580 <HAL_IncTick+0x20>)
 8005566:	781b      	ldrb	r3, [r3, #0]
 8005568:	461a      	mov	r2, r3
 800556a:	4b06      	ldr	r3, [pc, #24]	@ (8005584 <HAL_IncTick+0x24>)
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	4413      	add	r3, r2
 8005570:	4a04      	ldr	r2, [pc, #16]	@ (8005584 <HAL_IncTick+0x24>)
 8005572:	6013      	str	r3, [r2, #0]
}
 8005574:	bf00      	nop
 8005576:	46bd      	mov	sp, r7
 8005578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800557c:	4770      	bx	lr
 800557e:	bf00      	nop
 8005580:	2000d114 	.word	0x2000d114
 8005584:	2000efe8 	.word	0x2000efe8

08005588 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005588:	b480      	push	{r7}
 800558a:	af00      	add	r7, sp, #0
  return uwTick;
 800558c:	4b03      	ldr	r3, [pc, #12]	@ (800559c <HAL_GetTick+0x14>)
 800558e:	681b      	ldr	r3, [r3, #0]
}
 8005590:	4618      	mov	r0, r3
 8005592:	46bd      	mov	sp, r7
 8005594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005598:	4770      	bx	lr
 800559a:	bf00      	nop
 800559c:	2000efe8 	.word	0x2000efe8

080055a0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80055a0:	b580      	push	{r7, lr}
 80055a2:	b084      	sub	sp, #16
 80055a4:	af00      	add	r7, sp, #0
 80055a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80055a8:	f7ff ffee 	bl	8005588 <HAL_GetTick>
 80055ac:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055b8:	d005      	beq.n	80055c6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80055ba:	4b0a      	ldr	r3, [pc, #40]	@ (80055e4 <HAL_Delay+0x44>)
 80055bc:	781b      	ldrb	r3, [r3, #0]
 80055be:	461a      	mov	r2, r3
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	4413      	add	r3, r2
 80055c4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80055c6:	bf00      	nop
 80055c8:	f7ff ffde 	bl	8005588 <HAL_GetTick>
 80055cc:	4602      	mov	r2, r0
 80055ce:	68bb      	ldr	r3, [r7, #8]
 80055d0:	1ad3      	subs	r3, r2, r3
 80055d2:	68fa      	ldr	r2, [r7, #12]
 80055d4:	429a      	cmp	r2, r3
 80055d6:	d8f7      	bhi.n	80055c8 <HAL_Delay+0x28>
  {
  }
}
 80055d8:	bf00      	nop
 80055da:	bf00      	nop
 80055dc:	3710      	adds	r7, #16
 80055de:	46bd      	mov	sp, r7
 80055e0:	bd80      	pop	{r7, pc}
 80055e2:	bf00      	nop
 80055e4:	2000d114 	.word	0x2000d114

080055e8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80055e8:	b580      	push	{r7, lr}
 80055ea:	b084      	sub	sp, #16
 80055ec:	af00      	add	r7, sp, #0
 80055ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80055f0:	2300      	movs	r3, #0
 80055f2:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d101      	bne.n	80055fe <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80055fa:	2301      	movs	r3, #1
 80055fc:	e033      	b.n	8005666 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005602:	2b00      	cmp	r3, #0
 8005604:	d109      	bne.n	800561a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8005606:	6878      	ldr	r0, [r7, #4]
 8005608:	f7fb fe0e 	bl	8001228 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	2200      	movs	r2, #0
 8005610:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	2200      	movs	r2, #0
 8005616:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800561e:	f003 0310 	and.w	r3, r3, #16
 8005622:	2b00      	cmp	r3, #0
 8005624:	d118      	bne.n	8005658 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800562a:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800562e:	f023 0302 	bic.w	r3, r3, #2
 8005632:	f043 0202 	orr.w	r2, r3, #2
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 800563a:	6878      	ldr	r0, [r7, #4]
 800563c:	f000 faac 	bl	8005b98 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	2200      	movs	r2, #0
 8005644:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800564a:	f023 0303 	bic.w	r3, r3, #3
 800564e:	f043 0201 	orr.w	r2, r3, #1
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	641a      	str	r2, [r3, #64]	@ 0x40
 8005656:	e001      	b.n	800565c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8005658:	2301      	movs	r3, #1
 800565a:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	2200      	movs	r2, #0
 8005660:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8005664:	7bfb      	ldrb	r3, [r7, #15]
}
 8005666:	4618      	mov	r0, r3
 8005668:	3710      	adds	r7, #16
 800566a:	46bd      	mov	sp, r7
 800566c:	bd80      	pop	{r7, pc}
	...

08005670 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8005670:	b580      	push	{r7, lr}
 8005672:	b088      	sub	sp, #32
 8005674:	af00      	add	r7, sp, #0
 8005676:	60f8      	str	r0, [r7, #12]
 8005678:	60b9      	str	r1, [r7, #8]
 800567a:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 800567c:	2300      	movs	r3, #0
 800567e:	617b      	str	r3, [r7, #20]
  ADC_Common_TypeDef *tmpADC_Common;
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005680:	2300      	movs	r3, #0
 8005682:	77fb      	strb	r3, [r7, #31]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800568a:	2b01      	cmp	r3, #1
 800568c:	d101      	bne.n	8005692 <HAL_ADC_Start_DMA+0x22>
 800568e:	2302      	movs	r3, #2
 8005690:	e0d0      	b.n	8005834 <HAL_ADC_Start_DMA+0x1c4>
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	2201      	movs	r2, #1
 8005696:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	689b      	ldr	r3, [r3, #8]
 80056a0:	f003 0301 	and.w	r3, r3, #1
 80056a4:	2b01      	cmp	r3, #1
 80056a6:	d018      	beq.n	80056da <HAL_ADC_Start_DMA+0x6a>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	689a      	ldr	r2, [r3, #8]
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	f042 0201 	orr.w	r2, r2, #1
 80056b6:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80056b8:	4b60      	ldr	r3, [pc, #384]	@ (800583c <HAL_ADC_Start_DMA+0x1cc>)
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	4a60      	ldr	r2, [pc, #384]	@ (8005840 <HAL_ADC_Start_DMA+0x1d0>)
 80056be:	fba2 2303 	umull	r2, r3, r2, r3
 80056c2:	0c9a      	lsrs	r2, r3, #18
 80056c4:	4613      	mov	r3, r2
 80056c6:	005b      	lsls	r3, r3, #1
 80056c8:	4413      	add	r3, r2
 80056ca:	617b      	str	r3, [r7, #20]
    while (counter != 0U)
 80056cc:	e002      	b.n	80056d4 <HAL_ADC_Start_DMA+0x64>
    {
      counter--;
 80056ce:	697b      	ldr	r3, [r7, #20]
 80056d0:	3b01      	subs	r3, #1
 80056d2:	617b      	str	r3, [r7, #20]
    while (counter != 0U)
 80056d4:	697b      	ldr	r3, [r7, #20]
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d1f9      	bne.n	80056ce <HAL_ADC_Start_DMA+0x5e>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	689b      	ldr	r3, [r3, #8]
 80056e0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80056e4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80056e8:	d107      	bne.n	80056fa <HAL_ADC_Start_DMA+0x8a>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	689a      	ldr	r2, [r3, #8]
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80056f8:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	689b      	ldr	r3, [r3, #8]
 8005700:	f003 0301 	and.w	r3, r3, #1
 8005704:	2b01      	cmp	r3, #1
 8005706:	f040 8088 	bne.w	800581a <HAL_ADC_Start_DMA+0x1aa>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800570e:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8005712:	f023 0301 	bic.w	r3, r3, #1
 8005716:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	685b      	ldr	r3, [r3, #4]
 8005724:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005728:	2b00      	cmp	r3, #0
 800572a:	d007      	beq.n	800573c <HAL_ADC_Start_DMA+0xcc>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005730:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8005734:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005740:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005744:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005748:	d106      	bne.n	8005758 <HAL_ADC_Start_DMA+0xe8>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800574e:	f023 0206 	bic.w	r2, r3, #6
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	645a      	str	r2, [r3, #68]	@ 0x44
 8005756:	e002      	b.n	800575e <HAL_ADC_Start_DMA+0xee>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	2200      	movs	r2, #0
 800575c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	2200      	movs	r2, #0
 8005762:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005766:	4b37      	ldr	r3, [pc, #220]	@ (8005844 <HAL_ADC_Start_DMA+0x1d4>)
 8005768:	61bb      	str	r3, [r7, #24]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800576e:	4a36      	ldr	r2, [pc, #216]	@ (8005848 <HAL_ADC_Start_DMA+0x1d8>)
 8005770:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005776:	4a35      	ldr	r2, [pc, #212]	@ (800584c <HAL_ADC_Start_DMA+0x1dc>)
 8005778:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800577e:	4a34      	ldr	r2, [pc, #208]	@ (8005850 <HAL_ADC_Start_DMA+0x1e0>)
 8005780:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 800578a:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	685a      	ldr	r2, [r3, #4]
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 800579a:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	689a      	ldr	r2, [r3, #8]
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80057aa:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	334c      	adds	r3, #76	@ 0x4c
 80057b6:	4619      	mov	r1, r3
 80057b8:	68ba      	ldr	r2, [r7, #8]
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	f000 fd46 	bl	800624c <HAL_DMA_Start_IT>
 80057c0:	4603      	mov	r3, r0
 80057c2:	77fb      	strb	r3, [r7, #31]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80057c4:	69bb      	ldr	r3, [r7, #24]
 80057c6:	685b      	ldr	r3, [r3, #4]
 80057c8:	f003 031f 	and.w	r3, r3, #31
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d10f      	bne.n	80057f0 <HAL_ADC_Start_DMA+0x180>
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	689b      	ldr	r3, [r3, #8]
 80057d6:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d129      	bne.n	8005832 <HAL_ADC_Start_DMA+0x1c2>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	689a      	ldr	r2, [r3, #8]
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80057ec:	609a      	str	r2, [r3, #8]
 80057ee:	e020      	b.n	8005832 <HAL_ADC_Start_DMA+0x1c2>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	4a17      	ldr	r2, [pc, #92]	@ (8005854 <HAL_ADC_Start_DMA+0x1e4>)
 80057f6:	4293      	cmp	r3, r2
 80057f8:	d11b      	bne.n	8005832 <HAL_ADC_Start_DMA+0x1c2>
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	689b      	ldr	r3, [r3, #8]
 8005800:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8005804:	2b00      	cmp	r3, #0
 8005806:	d114      	bne.n	8005832 <HAL_ADC_Start_DMA+0x1c2>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	689a      	ldr	r2, [r3, #8]
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8005816:	609a      	str	r2, [r3, #8]
 8005818:	e00b      	b.n	8005832 <HAL_ADC_Start_DMA+0x1c2>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800581e:	f043 0210 	orr.w	r2, r3, #16
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800582a:	f043 0201 	orr.w	r2, r3, #1
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return tmp_hal_status;
 8005832:	7ffb      	ldrb	r3, [r7, #31]
}
 8005834:	4618      	mov	r0, r3
 8005836:	3720      	adds	r7, #32
 8005838:	46bd      	mov	sp, r7
 800583a:	bd80      	pop	{r7, pc}
 800583c:	2000d10c 	.word	0x2000d10c
 8005840:	431bde83 	.word	0x431bde83
 8005844:	40012300 	.word	0x40012300
 8005848:	08005d91 	.word	0x08005d91
 800584c:	08005e4b 	.word	0x08005e4b
 8005850:	08005e67 	.word	0x08005e67
 8005854:	40012000 	.word	0x40012000

08005858 <HAL_ADC_Stop_DMA>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef *hadc)
{
 8005858:	b580      	push	{r7, lr}
 800585a:	b084      	sub	sp, #16
 800585c:	af00      	add	r7, sp, #0
 800585e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005860:	2300      	movs	r3, #0
 8005862:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800586a:	2b01      	cmp	r3, #1
 800586c:	d101      	bne.n	8005872 <HAL_ADC_Stop_DMA+0x1a>
 800586e:	2302      	movs	r3, #2
 8005870:	e048      	b.n	8005904 <HAL_ADC_Stop_DMA+0xac>
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	2201      	movs	r2, #1
 8005876:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	689a      	ldr	r2, [r3, #8]
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	f022 0201 	bic.w	r2, r2, #1
 8005888:	609a      	str	r2, [r3, #8]

  /* Check if ADC is effectively disabled */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	689b      	ldr	r3, [r3, #8]
 8005890:	f003 0301 	and.w	r3, r3, #1
 8005894:	2b00      	cmp	r3, #0
 8005896:	d130      	bne.n	80058fa <HAL_ADC_Stop_DMA+0xa2>
  {
    /* Disable the selected ADC DMA mode */
    hadc->Instance->CR2 &= ~ADC_CR2_DMA;
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	689a      	ldr	r2, [r3, #8]
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80058a6:	609a      	str	r2, [r3, #8]

    /* Disable the DMA channel (in case of DMA in circular mode or stop while */
    /* DMA transfer is on going)                                              */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80058ac:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80058b0:	b2db      	uxtb	r3, r3
 80058b2:	2b02      	cmp	r3, #2
 80058b4:	d10f      	bne.n	80058d6 <HAL_ADC_Stop_DMA+0x7e>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80058ba:	4618      	mov	r0, r3
 80058bc:	f000 fd1e 	bl	80062fc <HAL_DMA_Abort>
 80058c0:	4603      	mov	r3, r0
 80058c2:	73fb      	strb	r3, [r7, #15]

      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 80058c4:	7bfb      	ldrb	r3, [r7, #15]
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d005      	beq.n	80058d6 <HAL_ADC_Stop_DMA+0x7e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80058ce:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	641a      	str	r2, [r3, #64]	@ 0x40
      }
    }

    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	685a      	ldr	r2, [r3, #4]
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	f022 6280 	bic.w	r2, r2, #67108864	@ 0x4000000
 80058e4:	605a      	str	r2, [r3, #4]

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80058ea:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80058ee:	f023 0301 	bic.w	r3, r3, #1
 80058f2:	f043 0201 	orr.w	r2, r3, #1
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	2200      	movs	r2, #0
 80058fe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8005902:	7bfb      	ldrb	r3, [r7, #15]
}
 8005904:	4618      	mov	r0, r3
 8005906:	3710      	adds	r7, #16
 8005908:	46bd      	mov	sp, r7
 800590a:	bd80      	pop	{r7, pc}

0800590c <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 800590c:	b480      	push	{r7}
 800590e:	b083      	sub	sp, #12
 8005910:	af00      	add	r7, sp, #0
 8005912:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8005914:	bf00      	nop
 8005916:	370c      	adds	r7, #12
 8005918:	46bd      	mov	sp, r7
 800591a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800591e:	4770      	bx	lr

08005920 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8005920:	b480      	push	{r7}
 8005922:	b083      	sub	sp, #12
 8005924:	af00      	add	r7, sp, #0
 8005926:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8005928:	bf00      	nop
 800592a:	370c      	adds	r7, #12
 800592c:	46bd      	mov	sp, r7
 800592e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005932:	4770      	bx	lr

08005934 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8005934:	b480      	push	{r7}
 8005936:	b085      	sub	sp, #20
 8005938:	af00      	add	r7, sp, #0
 800593a:	6078      	str	r0, [r7, #4]
 800593c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800593e:	2300      	movs	r3, #0
 8005940:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005948:	2b01      	cmp	r3, #1
 800594a:	d101      	bne.n	8005950 <HAL_ADC_ConfigChannel+0x1c>
 800594c:	2302      	movs	r3, #2
 800594e:	e113      	b.n	8005b78 <HAL_ADC_ConfigChannel+0x244>
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	2201      	movs	r2, #1
 8005954:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8005958:	683b      	ldr	r3, [r7, #0]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	2b09      	cmp	r3, #9
 800595e:	d925      	bls.n	80059ac <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	68d9      	ldr	r1, [r3, #12]
 8005966:	683b      	ldr	r3, [r7, #0]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	b29b      	uxth	r3, r3
 800596c:	461a      	mov	r2, r3
 800596e:	4613      	mov	r3, r2
 8005970:	005b      	lsls	r3, r3, #1
 8005972:	4413      	add	r3, r2
 8005974:	3b1e      	subs	r3, #30
 8005976:	2207      	movs	r2, #7
 8005978:	fa02 f303 	lsl.w	r3, r2, r3
 800597c:	43da      	mvns	r2, r3
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	400a      	ands	r2, r1
 8005984:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	68d9      	ldr	r1, [r3, #12]
 800598c:	683b      	ldr	r3, [r7, #0]
 800598e:	689a      	ldr	r2, [r3, #8]
 8005990:	683b      	ldr	r3, [r7, #0]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	b29b      	uxth	r3, r3
 8005996:	4618      	mov	r0, r3
 8005998:	4603      	mov	r3, r0
 800599a:	005b      	lsls	r3, r3, #1
 800599c:	4403      	add	r3, r0
 800599e:	3b1e      	subs	r3, #30
 80059a0:	409a      	lsls	r2, r3
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	430a      	orrs	r2, r1
 80059a8:	60da      	str	r2, [r3, #12]
 80059aa:	e022      	b.n	80059f2 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	6919      	ldr	r1, [r3, #16]
 80059b2:	683b      	ldr	r3, [r7, #0]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	b29b      	uxth	r3, r3
 80059b8:	461a      	mov	r2, r3
 80059ba:	4613      	mov	r3, r2
 80059bc:	005b      	lsls	r3, r3, #1
 80059be:	4413      	add	r3, r2
 80059c0:	2207      	movs	r2, #7
 80059c2:	fa02 f303 	lsl.w	r3, r2, r3
 80059c6:	43da      	mvns	r2, r3
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	400a      	ands	r2, r1
 80059ce:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	6919      	ldr	r1, [r3, #16]
 80059d6:	683b      	ldr	r3, [r7, #0]
 80059d8:	689a      	ldr	r2, [r3, #8]
 80059da:	683b      	ldr	r3, [r7, #0]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	b29b      	uxth	r3, r3
 80059e0:	4618      	mov	r0, r3
 80059e2:	4603      	mov	r3, r0
 80059e4:	005b      	lsls	r3, r3, #1
 80059e6:	4403      	add	r3, r0
 80059e8:	409a      	lsls	r2, r3
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	430a      	orrs	r2, r1
 80059f0:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80059f2:	683b      	ldr	r3, [r7, #0]
 80059f4:	685b      	ldr	r3, [r3, #4]
 80059f6:	2b06      	cmp	r3, #6
 80059f8:	d824      	bhi.n	8005a44 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8005a00:	683b      	ldr	r3, [r7, #0]
 8005a02:	685a      	ldr	r2, [r3, #4]
 8005a04:	4613      	mov	r3, r2
 8005a06:	009b      	lsls	r3, r3, #2
 8005a08:	4413      	add	r3, r2
 8005a0a:	3b05      	subs	r3, #5
 8005a0c:	221f      	movs	r2, #31
 8005a0e:	fa02 f303 	lsl.w	r3, r2, r3
 8005a12:	43da      	mvns	r2, r3
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	400a      	ands	r2, r1
 8005a1a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8005a22:	683b      	ldr	r3, [r7, #0]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	b29b      	uxth	r3, r3
 8005a28:	4618      	mov	r0, r3
 8005a2a:	683b      	ldr	r3, [r7, #0]
 8005a2c:	685a      	ldr	r2, [r3, #4]
 8005a2e:	4613      	mov	r3, r2
 8005a30:	009b      	lsls	r3, r3, #2
 8005a32:	4413      	add	r3, r2
 8005a34:	3b05      	subs	r3, #5
 8005a36:	fa00 f203 	lsl.w	r2, r0, r3
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	430a      	orrs	r2, r1
 8005a40:	635a      	str	r2, [r3, #52]	@ 0x34
 8005a42:	e04c      	b.n	8005ade <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8005a44:	683b      	ldr	r3, [r7, #0]
 8005a46:	685b      	ldr	r3, [r3, #4]
 8005a48:	2b0c      	cmp	r3, #12
 8005a4a:	d824      	bhi.n	8005a96 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8005a52:	683b      	ldr	r3, [r7, #0]
 8005a54:	685a      	ldr	r2, [r3, #4]
 8005a56:	4613      	mov	r3, r2
 8005a58:	009b      	lsls	r3, r3, #2
 8005a5a:	4413      	add	r3, r2
 8005a5c:	3b23      	subs	r3, #35	@ 0x23
 8005a5e:	221f      	movs	r2, #31
 8005a60:	fa02 f303 	lsl.w	r3, r2, r3
 8005a64:	43da      	mvns	r2, r3
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	400a      	ands	r2, r1
 8005a6c:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8005a74:	683b      	ldr	r3, [r7, #0]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	b29b      	uxth	r3, r3
 8005a7a:	4618      	mov	r0, r3
 8005a7c:	683b      	ldr	r3, [r7, #0]
 8005a7e:	685a      	ldr	r2, [r3, #4]
 8005a80:	4613      	mov	r3, r2
 8005a82:	009b      	lsls	r3, r3, #2
 8005a84:	4413      	add	r3, r2
 8005a86:	3b23      	subs	r3, #35	@ 0x23
 8005a88:	fa00 f203 	lsl.w	r2, r0, r3
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	430a      	orrs	r2, r1
 8005a92:	631a      	str	r2, [r3, #48]	@ 0x30
 8005a94:	e023      	b.n	8005ade <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8005a9c:	683b      	ldr	r3, [r7, #0]
 8005a9e:	685a      	ldr	r2, [r3, #4]
 8005aa0:	4613      	mov	r3, r2
 8005aa2:	009b      	lsls	r3, r3, #2
 8005aa4:	4413      	add	r3, r2
 8005aa6:	3b41      	subs	r3, #65	@ 0x41
 8005aa8:	221f      	movs	r2, #31
 8005aaa:	fa02 f303 	lsl.w	r3, r2, r3
 8005aae:	43da      	mvns	r2, r3
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	400a      	ands	r2, r1
 8005ab6:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8005abe:	683b      	ldr	r3, [r7, #0]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	b29b      	uxth	r3, r3
 8005ac4:	4618      	mov	r0, r3
 8005ac6:	683b      	ldr	r3, [r7, #0]
 8005ac8:	685a      	ldr	r2, [r3, #4]
 8005aca:	4613      	mov	r3, r2
 8005acc:	009b      	lsls	r3, r3, #2
 8005ace:	4413      	add	r3, r2
 8005ad0:	3b41      	subs	r3, #65	@ 0x41
 8005ad2:	fa00 f203 	lsl.w	r2, r0, r3
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	430a      	orrs	r2, r1
 8005adc:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005ade:	4b29      	ldr	r3, [pc, #164]	@ (8005b84 <HAL_ADC_ConfigChannel+0x250>)
 8005ae0:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	4a28      	ldr	r2, [pc, #160]	@ (8005b88 <HAL_ADC_ConfigChannel+0x254>)
 8005ae8:	4293      	cmp	r3, r2
 8005aea:	d10f      	bne.n	8005b0c <HAL_ADC_ConfigChannel+0x1d8>
 8005aec:	683b      	ldr	r3, [r7, #0]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	2b12      	cmp	r3, #18
 8005af2:	d10b      	bne.n	8005b0c <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	685b      	ldr	r3, [r3, #4]
 8005af8:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	685b      	ldr	r3, [r3, #4]
 8005b04:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	4a1d      	ldr	r2, [pc, #116]	@ (8005b88 <HAL_ADC_ConfigChannel+0x254>)
 8005b12:	4293      	cmp	r3, r2
 8005b14:	d12b      	bne.n	8005b6e <HAL_ADC_ConfigChannel+0x23a>
 8005b16:	683b      	ldr	r3, [r7, #0]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	4a1c      	ldr	r2, [pc, #112]	@ (8005b8c <HAL_ADC_ConfigChannel+0x258>)
 8005b1c:	4293      	cmp	r3, r2
 8005b1e:	d003      	beq.n	8005b28 <HAL_ADC_ConfigChannel+0x1f4>
 8005b20:	683b      	ldr	r3, [r7, #0]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	2b11      	cmp	r3, #17
 8005b26:	d122      	bne.n	8005b6e <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	685b      	ldr	r3, [r3, #4]
 8005b2c:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	685b      	ldr	r3, [r3, #4]
 8005b38:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8005b40:	683b      	ldr	r3, [r7, #0]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	4a11      	ldr	r2, [pc, #68]	@ (8005b8c <HAL_ADC_ConfigChannel+0x258>)
 8005b46:	4293      	cmp	r3, r2
 8005b48:	d111      	bne.n	8005b6e <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8005b4a:	4b11      	ldr	r3, [pc, #68]	@ (8005b90 <HAL_ADC_ConfigChannel+0x25c>)
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	4a11      	ldr	r2, [pc, #68]	@ (8005b94 <HAL_ADC_ConfigChannel+0x260>)
 8005b50:	fba2 2303 	umull	r2, r3, r2, r3
 8005b54:	0c9a      	lsrs	r2, r3, #18
 8005b56:	4613      	mov	r3, r2
 8005b58:	009b      	lsls	r3, r3, #2
 8005b5a:	4413      	add	r3, r2
 8005b5c:	005b      	lsls	r3, r3, #1
 8005b5e:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8005b60:	e002      	b.n	8005b68 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8005b62:	68bb      	ldr	r3, [r7, #8]
 8005b64:	3b01      	subs	r3, #1
 8005b66:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8005b68:	68bb      	ldr	r3, [r7, #8]
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d1f9      	bne.n	8005b62 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	2200      	movs	r2, #0
 8005b72:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8005b76:	2300      	movs	r3, #0
}
 8005b78:	4618      	mov	r0, r3
 8005b7a:	3714      	adds	r7, #20
 8005b7c:	46bd      	mov	sp, r7
 8005b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b82:	4770      	bx	lr
 8005b84:	40012300 	.word	0x40012300
 8005b88:	40012000 	.word	0x40012000
 8005b8c:	10000012 	.word	0x10000012
 8005b90:	2000d10c 	.word	0x2000d10c
 8005b94:	431bde83 	.word	0x431bde83

08005b98 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8005b98:	b480      	push	{r7}
 8005b9a:	b085      	sub	sp, #20
 8005b9c:	af00      	add	r7, sp, #0
 8005b9e:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005ba0:	4b79      	ldr	r3, [pc, #484]	@ (8005d88 <ADC_Init+0x1f0>)
 8005ba2:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	685b      	ldr	r3, [r3, #4]
 8005ba8:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	685a      	ldr	r2, [r3, #4]
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	685b      	ldr	r3, [r3, #4]
 8005bb8:	431a      	orrs	r2, r3
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	685a      	ldr	r2, [r3, #4]
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005bcc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	6859      	ldr	r1, [r3, #4]
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	691b      	ldr	r3, [r3, #16]
 8005bd8:	021a      	lsls	r2, r3, #8
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	430a      	orrs	r2, r1
 8005be0:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	685a      	ldr	r2, [r3, #4]
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8005bf0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	6859      	ldr	r1, [r3, #4]
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	689a      	ldr	r2, [r3, #8]
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	430a      	orrs	r2, r1
 8005c02:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	689a      	ldr	r2, [r3, #8]
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005c12:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	6899      	ldr	r1, [r3, #8]
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	68da      	ldr	r2, [r3, #12]
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	430a      	orrs	r2, r1
 8005c24:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c2a:	4a58      	ldr	r2, [pc, #352]	@ (8005d8c <ADC_Init+0x1f4>)
 8005c2c:	4293      	cmp	r3, r2
 8005c2e:	d022      	beq.n	8005c76 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	689a      	ldr	r2, [r3, #8]
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8005c3e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	6899      	ldr	r1, [r3, #8]
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	430a      	orrs	r2, r1
 8005c50:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	689a      	ldr	r2, [r3, #8]
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8005c60:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	6899      	ldr	r1, [r3, #8]
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	430a      	orrs	r2, r1
 8005c72:	609a      	str	r2, [r3, #8]
 8005c74:	e00f      	b.n	8005c96 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	689a      	ldr	r2, [r3, #8]
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8005c84:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	689a      	ldr	r2, [r3, #8]
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8005c94:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	689a      	ldr	r2, [r3, #8]
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	f022 0202 	bic.w	r2, r2, #2
 8005ca4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	6899      	ldr	r1, [r3, #8]
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	7e1b      	ldrb	r3, [r3, #24]
 8005cb0:	005a      	lsls	r2, r3, #1
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	430a      	orrs	r2, r1
 8005cb8:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d01b      	beq.n	8005cfc <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	685a      	ldr	r2, [r3, #4]
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005cd2:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	685a      	ldr	r2, [r3, #4]
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8005ce2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	6859      	ldr	r1, [r3, #4]
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005cee:	3b01      	subs	r3, #1
 8005cf0:	035a      	lsls	r2, r3, #13
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	430a      	orrs	r2, r1
 8005cf8:	605a      	str	r2, [r3, #4]
 8005cfa:	e007      	b.n	8005d0c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	685a      	ldr	r2, [r3, #4]
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005d0a:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8005d1a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	69db      	ldr	r3, [r3, #28]
 8005d26:	3b01      	subs	r3, #1
 8005d28:	051a      	lsls	r2, r3, #20
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	430a      	orrs	r2, r1
 8005d30:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	689a      	ldr	r2, [r3, #8]
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8005d40:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	6899      	ldr	r1, [r3, #8]
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8005d4e:	025a      	lsls	r2, r3, #9
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	430a      	orrs	r2, r1
 8005d56:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	689a      	ldr	r2, [r3, #8]
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005d66:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	6899      	ldr	r1, [r3, #8]
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	695b      	ldr	r3, [r3, #20]
 8005d72:	029a      	lsls	r2, r3, #10
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	430a      	orrs	r2, r1
 8005d7a:	609a      	str	r2, [r3, #8]
}
 8005d7c:	bf00      	nop
 8005d7e:	3714      	adds	r7, #20
 8005d80:	46bd      	mov	sp, r7
 8005d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d86:	4770      	bx	lr
 8005d88:	40012300 	.word	0x40012300
 8005d8c:	0f000001 	.word	0x0f000001

08005d90 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8005d90:	b580      	push	{r7, lr}
 8005d92:	b084      	sub	sp, #16
 8005d94:	af00      	add	r7, sp, #0
 8005d96:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d9c:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005da2:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d13c      	bne.n	8005e24 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005dae:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	689b      	ldr	r3, [r3, #8]
 8005dbc:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d12b      	bne.n	8005e1c <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d127      	bne.n	8005e1c <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005dd2:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d006      	beq.n	8005de8 <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	689b      	ldr	r3, [r3, #8]
 8005de0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d119      	bne.n	8005e1c <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	685a      	ldr	r2, [r3, #4]
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	f022 0220 	bic.w	r2, r2, #32
 8005df6:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005dfc:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e08:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d105      	bne.n	8005e1c <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e14:	f043 0201 	orr.w	r2, r3, #1
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8005e1c:	68f8      	ldr	r0, [r7, #12]
 8005e1e:	f7fc fa9d 	bl	800235c <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8005e22:	e00e      	b.n	8005e42 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e28:	f003 0310 	and.w	r3, r3, #16
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d003      	beq.n	8005e38 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8005e30:	68f8      	ldr	r0, [r7, #12]
 8005e32:	f7ff fd75 	bl	8005920 <HAL_ADC_ErrorCallback>
}
 8005e36:	e004      	b.n	8005e42 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e3c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005e3e:	6878      	ldr	r0, [r7, #4]
 8005e40:	4798      	blx	r3
}
 8005e42:	bf00      	nop
 8005e44:	3710      	adds	r7, #16
 8005e46:	46bd      	mov	sp, r7
 8005e48:	bd80      	pop	{r7, pc}

08005e4a <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8005e4a:	b580      	push	{r7, lr}
 8005e4c:	b084      	sub	sp, #16
 8005e4e:	af00      	add	r7, sp, #0
 8005e50:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e56:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8005e58:	68f8      	ldr	r0, [r7, #12]
 8005e5a:	f7ff fd57 	bl	800590c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8005e5e:	bf00      	nop
 8005e60:	3710      	adds	r7, #16
 8005e62:	46bd      	mov	sp, r7
 8005e64:	bd80      	pop	{r7, pc}

08005e66 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8005e66:	b580      	push	{r7, lr}
 8005e68:	b084      	sub	sp, #16
 8005e6a:	af00      	add	r7, sp, #0
 8005e6c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e72:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	2240      	movs	r2, #64	@ 0x40
 8005e78:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005e7e:	f043 0204 	orr.w	r2, r3, #4
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8005e86:	68f8      	ldr	r0, [r7, #12]
 8005e88:	f7ff fd4a 	bl	8005920 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8005e8c:	bf00      	nop
 8005e8e:	3710      	adds	r7, #16
 8005e90:	46bd      	mov	sp, r7
 8005e92:	bd80      	pop	{r7, pc}

08005e94 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005e94:	b480      	push	{r7}
 8005e96:	b085      	sub	sp, #20
 8005e98:	af00      	add	r7, sp, #0
 8005e9a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	f003 0307 	and.w	r3, r3, #7
 8005ea2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005ea4:	4b0c      	ldr	r3, [pc, #48]	@ (8005ed8 <__NVIC_SetPriorityGrouping+0x44>)
 8005ea6:	68db      	ldr	r3, [r3, #12]
 8005ea8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005eaa:	68ba      	ldr	r2, [r7, #8]
 8005eac:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8005eb0:	4013      	ands	r3, r2
 8005eb2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005eb8:	68bb      	ldr	r3, [r7, #8]
 8005eba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005ebc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8005ec0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005ec4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005ec6:	4a04      	ldr	r2, [pc, #16]	@ (8005ed8 <__NVIC_SetPriorityGrouping+0x44>)
 8005ec8:	68bb      	ldr	r3, [r7, #8]
 8005eca:	60d3      	str	r3, [r2, #12]
}
 8005ecc:	bf00      	nop
 8005ece:	3714      	adds	r7, #20
 8005ed0:	46bd      	mov	sp, r7
 8005ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed6:	4770      	bx	lr
 8005ed8:	e000ed00 	.word	0xe000ed00

08005edc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005edc:	b480      	push	{r7}
 8005ede:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005ee0:	4b04      	ldr	r3, [pc, #16]	@ (8005ef4 <__NVIC_GetPriorityGrouping+0x18>)
 8005ee2:	68db      	ldr	r3, [r3, #12]
 8005ee4:	0a1b      	lsrs	r3, r3, #8
 8005ee6:	f003 0307 	and.w	r3, r3, #7
}
 8005eea:	4618      	mov	r0, r3
 8005eec:	46bd      	mov	sp, r7
 8005eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ef2:	4770      	bx	lr
 8005ef4:	e000ed00 	.word	0xe000ed00

08005ef8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005ef8:	b480      	push	{r7}
 8005efa:	b083      	sub	sp, #12
 8005efc:	af00      	add	r7, sp, #0
 8005efe:	4603      	mov	r3, r0
 8005f00:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005f02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	db0b      	blt.n	8005f22 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005f0a:	79fb      	ldrb	r3, [r7, #7]
 8005f0c:	f003 021f 	and.w	r2, r3, #31
 8005f10:	4907      	ldr	r1, [pc, #28]	@ (8005f30 <__NVIC_EnableIRQ+0x38>)
 8005f12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005f16:	095b      	lsrs	r3, r3, #5
 8005f18:	2001      	movs	r0, #1
 8005f1a:	fa00 f202 	lsl.w	r2, r0, r2
 8005f1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8005f22:	bf00      	nop
 8005f24:	370c      	adds	r7, #12
 8005f26:	46bd      	mov	sp, r7
 8005f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f2c:	4770      	bx	lr
 8005f2e:	bf00      	nop
 8005f30:	e000e100 	.word	0xe000e100

08005f34 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005f34:	b480      	push	{r7}
 8005f36:	b083      	sub	sp, #12
 8005f38:	af00      	add	r7, sp, #0
 8005f3a:	4603      	mov	r3, r0
 8005f3c:	6039      	str	r1, [r7, #0]
 8005f3e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005f40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	db0a      	blt.n	8005f5e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005f48:	683b      	ldr	r3, [r7, #0]
 8005f4a:	b2da      	uxtb	r2, r3
 8005f4c:	490c      	ldr	r1, [pc, #48]	@ (8005f80 <__NVIC_SetPriority+0x4c>)
 8005f4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005f52:	0112      	lsls	r2, r2, #4
 8005f54:	b2d2      	uxtb	r2, r2
 8005f56:	440b      	add	r3, r1
 8005f58:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005f5c:	e00a      	b.n	8005f74 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005f5e:	683b      	ldr	r3, [r7, #0]
 8005f60:	b2da      	uxtb	r2, r3
 8005f62:	4908      	ldr	r1, [pc, #32]	@ (8005f84 <__NVIC_SetPriority+0x50>)
 8005f64:	79fb      	ldrb	r3, [r7, #7]
 8005f66:	f003 030f 	and.w	r3, r3, #15
 8005f6a:	3b04      	subs	r3, #4
 8005f6c:	0112      	lsls	r2, r2, #4
 8005f6e:	b2d2      	uxtb	r2, r2
 8005f70:	440b      	add	r3, r1
 8005f72:	761a      	strb	r2, [r3, #24]
}
 8005f74:	bf00      	nop
 8005f76:	370c      	adds	r7, #12
 8005f78:	46bd      	mov	sp, r7
 8005f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f7e:	4770      	bx	lr
 8005f80:	e000e100 	.word	0xe000e100
 8005f84:	e000ed00 	.word	0xe000ed00

08005f88 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005f88:	b480      	push	{r7}
 8005f8a:	b089      	sub	sp, #36	@ 0x24
 8005f8c:	af00      	add	r7, sp, #0
 8005f8e:	60f8      	str	r0, [r7, #12]
 8005f90:	60b9      	str	r1, [r7, #8]
 8005f92:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	f003 0307 	and.w	r3, r3, #7
 8005f9a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005f9c:	69fb      	ldr	r3, [r7, #28]
 8005f9e:	f1c3 0307 	rsb	r3, r3, #7
 8005fa2:	2b04      	cmp	r3, #4
 8005fa4:	bf28      	it	cs
 8005fa6:	2304      	movcs	r3, #4
 8005fa8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005faa:	69fb      	ldr	r3, [r7, #28]
 8005fac:	3304      	adds	r3, #4
 8005fae:	2b06      	cmp	r3, #6
 8005fb0:	d902      	bls.n	8005fb8 <NVIC_EncodePriority+0x30>
 8005fb2:	69fb      	ldr	r3, [r7, #28]
 8005fb4:	3b03      	subs	r3, #3
 8005fb6:	e000      	b.n	8005fba <NVIC_EncodePriority+0x32>
 8005fb8:	2300      	movs	r3, #0
 8005fba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005fbc:	f04f 32ff 	mov.w	r2, #4294967295
 8005fc0:	69bb      	ldr	r3, [r7, #24]
 8005fc2:	fa02 f303 	lsl.w	r3, r2, r3
 8005fc6:	43da      	mvns	r2, r3
 8005fc8:	68bb      	ldr	r3, [r7, #8]
 8005fca:	401a      	ands	r2, r3
 8005fcc:	697b      	ldr	r3, [r7, #20]
 8005fce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005fd0:	f04f 31ff 	mov.w	r1, #4294967295
 8005fd4:	697b      	ldr	r3, [r7, #20]
 8005fd6:	fa01 f303 	lsl.w	r3, r1, r3
 8005fda:	43d9      	mvns	r1, r3
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005fe0:	4313      	orrs	r3, r2
         );
}
 8005fe2:	4618      	mov	r0, r3
 8005fe4:	3724      	adds	r7, #36	@ 0x24
 8005fe6:	46bd      	mov	sp, r7
 8005fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fec:	4770      	bx	lr
	...

08005ff0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005ff0:	b580      	push	{r7, lr}
 8005ff2:	b082      	sub	sp, #8
 8005ff4:	af00      	add	r7, sp, #0
 8005ff6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	3b01      	subs	r3, #1
 8005ffc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006000:	d301      	bcc.n	8006006 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8006002:	2301      	movs	r3, #1
 8006004:	e00f      	b.n	8006026 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8006006:	4a0a      	ldr	r2, [pc, #40]	@ (8006030 <SysTick_Config+0x40>)
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	3b01      	subs	r3, #1
 800600c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800600e:	210f      	movs	r1, #15
 8006010:	f04f 30ff 	mov.w	r0, #4294967295
 8006014:	f7ff ff8e 	bl	8005f34 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006018:	4b05      	ldr	r3, [pc, #20]	@ (8006030 <SysTick_Config+0x40>)
 800601a:	2200      	movs	r2, #0
 800601c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800601e:	4b04      	ldr	r3, [pc, #16]	@ (8006030 <SysTick_Config+0x40>)
 8006020:	2207      	movs	r2, #7
 8006022:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006024:	2300      	movs	r3, #0
}
 8006026:	4618      	mov	r0, r3
 8006028:	3708      	adds	r7, #8
 800602a:	46bd      	mov	sp, r7
 800602c:	bd80      	pop	{r7, pc}
 800602e:	bf00      	nop
 8006030:	e000e010 	.word	0xe000e010

08006034 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006034:	b580      	push	{r7, lr}
 8006036:	b082      	sub	sp, #8
 8006038:	af00      	add	r7, sp, #0
 800603a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800603c:	6878      	ldr	r0, [r7, #4]
 800603e:	f7ff ff29 	bl	8005e94 <__NVIC_SetPriorityGrouping>
}
 8006042:	bf00      	nop
 8006044:	3708      	adds	r7, #8
 8006046:	46bd      	mov	sp, r7
 8006048:	bd80      	pop	{r7, pc}

0800604a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800604a:	b580      	push	{r7, lr}
 800604c:	b086      	sub	sp, #24
 800604e:	af00      	add	r7, sp, #0
 8006050:	4603      	mov	r3, r0
 8006052:	60b9      	str	r1, [r7, #8]
 8006054:	607a      	str	r2, [r7, #4]
 8006056:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8006058:	2300      	movs	r3, #0
 800605a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800605c:	f7ff ff3e 	bl	8005edc <__NVIC_GetPriorityGrouping>
 8006060:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006062:	687a      	ldr	r2, [r7, #4]
 8006064:	68b9      	ldr	r1, [r7, #8]
 8006066:	6978      	ldr	r0, [r7, #20]
 8006068:	f7ff ff8e 	bl	8005f88 <NVIC_EncodePriority>
 800606c:	4602      	mov	r2, r0
 800606e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006072:	4611      	mov	r1, r2
 8006074:	4618      	mov	r0, r3
 8006076:	f7ff ff5d 	bl	8005f34 <__NVIC_SetPriority>
}
 800607a:	bf00      	nop
 800607c:	3718      	adds	r7, #24
 800607e:	46bd      	mov	sp, r7
 8006080:	bd80      	pop	{r7, pc}

08006082 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006082:	b580      	push	{r7, lr}
 8006084:	b082      	sub	sp, #8
 8006086:	af00      	add	r7, sp, #0
 8006088:	4603      	mov	r3, r0
 800608a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800608c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006090:	4618      	mov	r0, r3
 8006092:	f7ff ff31 	bl	8005ef8 <__NVIC_EnableIRQ>
}
 8006096:	bf00      	nop
 8006098:	3708      	adds	r7, #8
 800609a:	46bd      	mov	sp, r7
 800609c:	bd80      	pop	{r7, pc}

0800609e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800609e:	b580      	push	{r7, lr}
 80060a0:	b082      	sub	sp, #8
 80060a2:	af00      	add	r7, sp, #0
 80060a4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80060a6:	6878      	ldr	r0, [r7, #4]
 80060a8:	f7ff ffa2 	bl	8005ff0 <SysTick_Config>
 80060ac:	4603      	mov	r3, r0
}
 80060ae:	4618      	mov	r0, r3
 80060b0:	3708      	adds	r7, #8
 80060b2:	46bd      	mov	sp, r7
 80060b4:	bd80      	pop	{r7, pc}

080060b6 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 80060b6:	b580      	push	{r7, lr}
 80060b8:	b082      	sub	sp, #8
 80060ba:	af00      	add	r7, sp, #0
 80060bc:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d101      	bne.n	80060c8 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 80060c4:	2301      	movs	r3, #1
 80060c6:	e00e      	b.n	80060e6 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	795b      	ldrb	r3, [r3, #5]
 80060cc:	b2db      	uxtb	r3, r3
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d105      	bne.n	80060de <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	2200      	movs	r2, #0
 80060d6:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 80060d8:	6878      	ldr	r0, [r7, #4]
 80060da:	f7fb f94b 	bl	8001374 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	2201      	movs	r2, #1
 80060e2:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80060e4:	2300      	movs	r3, #0
}
 80060e6:	4618      	mov	r0, r3
 80060e8:	3708      	adds	r7, #8
 80060ea:	46bd      	mov	sp, r7
 80060ec:	bd80      	pop	{r7, pc}
	...

080060f0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80060f0:	b580      	push	{r7, lr}
 80060f2:	b086      	sub	sp, #24
 80060f4:	af00      	add	r7, sp, #0
 80060f6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80060f8:	2300      	movs	r3, #0
 80060fa:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80060fc:	f7ff fa44 	bl	8005588 <HAL_GetTick>
 8006100:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	2b00      	cmp	r3, #0
 8006106:	d101      	bne.n	800610c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8006108:	2301      	movs	r3, #1
 800610a:	e099      	b.n	8006240 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	2202      	movs	r2, #2
 8006110:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	2200      	movs	r2, #0
 8006118:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	681a      	ldr	r2, [r3, #0]
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	f022 0201 	bic.w	r2, r2, #1
 800612a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800612c:	e00f      	b.n	800614e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800612e:	f7ff fa2b 	bl	8005588 <HAL_GetTick>
 8006132:	4602      	mov	r2, r0
 8006134:	693b      	ldr	r3, [r7, #16]
 8006136:	1ad3      	subs	r3, r2, r3
 8006138:	2b05      	cmp	r3, #5
 800613a:	d908      	bls.n	800614e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	2220      	movs	r2, #32
 8006140:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	2203      	movs	r2, #3
 8006146:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 800614a:	2303      	movs	r3, #3
 800614c:	e078      	b.n	8006240 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	f003 0301 	and.w	r3, r3, #1
 8006158:	2b00      	cmp	r3, #0
 800615a:	d1e8      	bne.n	800612e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8006164:	697a      	ldr	r2, [r7, #20]
 8006166:	4b38      	ldr	r3, [pc, #224]	@ (8006248 <HAL_DMA_Init+0x158>)
 8006168:	4013      	ands	r3, r2
 800616a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	685a      	ldr	r2, [r3, #4]
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	689b      	ldr	r3, [r3, #8]
 8006174:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800617a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	691b      	ldr	r3, [r3, #16]
 8006180:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006186:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	699b      	ldr	r3, [r3, #24]
 800618c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006192:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	6a1b      	ldr	r3, [r3, #32]
 8006198:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800619a:	697a      	ldr	r2, [r7, #20]
 800619c:	4313      	orrs	r3, r2
 800619e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061a4:	2b04      	cmp	r3, #4
 80061a6:	d107      	bne.n	80061b8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80061b0:	4313      	orrs	r3, r2
 80061b2:	697a      	ldr	r2, [r7, #20]
 80061b4:	4313      	orrs	r3, r2
 80061b6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	697a      	ldr	r2, [r7, #20]
 80061be:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	695b      	ldr	r3, [r3, #20]
 80061c6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80061c8:	697b      	ldr	r3, [r7, #20]
 80061ca:	f023 0307 	bic.w	r3, r3, #7
 80061ce:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061d4:	697a      	ldr	r2, [r7, #20]
 80061d6:	4313      	orrs	r3, r2
 80061d8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061de:	2b04      	cmp	r3, #4
 80061e0:	d117      	bne.n	8006212 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80061e6:	697a      	ldr	r2, [r7, #20]
 80061e8:	4313      	orrs	r3, r2
 80061ea:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d00e      	beq.n	8006212 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80061f4:	6878      	ldr	r0, [r7, #4]
 80061f6:	f000 fb01 	bl	80067fc <DMA_CheckFifoParam>
 80061fa:	4603      	mov	r3, r0
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d008      	beq.n	8006212 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	2240      	movs	r2, #64	@ 0x40
 8006204:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	2201      	movs	r2, #1
 800620a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 800620e:	2301      	movs	r3, #1
 8006210:	e016      	b.n	8006240 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	697a      	ldr	r2, [r7, #20]
 8006218:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800621a:	6878      	ldr	r0, [r7, #4]
 800621c:	f000 fab8 	bl	8006790 <DMA_CalcBaseAndBitshift>
 8006220:	4603      	mov	r3, r0
 8006222:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006228:	223f      	movs	r2, #63	@ 0x3f
 800622a:	409a      	lsls	r2, r3
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	2200      	movs	r2, #0
 8006234:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	2201      	movs	r2, #1
 800623a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 800623e:	2300      	movs	r3, #0
}
 8006240:	4618      	mov	r0, r3
 8006242:	3718      	adds	r7, #24
 8006244:	46bd      	mov	sp, r7
 8006246:	bd80      	pop	{r7, pc}
 8006248:	f010803f 	.word	0xf010803f

0800624c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800624c:	b580      	push	{r7, lr}
 800624e:	b086      	sub	sp, #24
 8006250:	af00      	add	r7, sp, #0
 8006252:	60f8      	str	r0, [r7, #12]
 8006254:	60b9      	str	r1, [r7, #8]
 8006256:	607a      	str	r2, [r7, #4]
 8006258:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800625a:	2300      	movs	r3, #0
 800625c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006262:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800626a:	2b01      	cmp	r3, #1
 800626c:	d101      	bne.n	8006272 <HAL_DMA_Start_IT+0x26>
 800626e:	2302      	movs	r3, #2
 8006270:	e040      	b.n	80062f4 <HAL_DMA_Start_IT+0xa8>
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	2201      	movs	r2, #1
 8006276:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8006280:	b2db      	uxtb	r3, r3
 8006282:	2b01      	cmp	r3, #1
 8006284:	d12f      	bne.n	80062e6 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	2202      	movs	r2, #2
 800628a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	2200      	movs	r2, #0
 8006292:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8006294:	683b      	ldr	r3, [r7, #0]
 8006296:	687a      	ldr	r2, [r7, #4]
 8006298:	68b9      	ldr	r1, [r7, #8]
 800629a:	68f8      	ldr	r0, [r7, #12]
 800629c:	f000 fa4a 	bl	8006734 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80062a4:	223f      	movs	r2, #63	@ 0x3f
 80062a6:	409a      	lsls	r2, r3
 80062a8:	693b      	ldr	r3, [r7, #16]
 80062aa:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	681a      	ldr	r2, [r3, #0]
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	f042 0216 	orr.w	r2, r2, #22
 80062ba:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d007      	beq.n	80062d4 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	681a      	ldr	r2, [r3, #0]
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	f042 0208 	orr.w	r2, r2, #8
 80062d2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	681a      	ldr	r2, [r3, #0]
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	f042 0201 	orr.w	r2, r2, #1
 80062e2:	601a      	str	r2, [r3, #0]
 80062e4:	e005      	b.n	80062f2 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	2200      	movs	r2, #0
 80062ea:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80062ee:	2302      	movs	r3, #2
 80062f0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80062f2:	7dfb      	ldrb	r3, [r7, #23]
}
 80062f4:	4618      	mov	r0, r3
 80062f6:	3718      	adds	r7, #24
 80062f8:	46bd      	mov	sp, r7
 80062fa:	bd80      	pop	{r7, pc}

080062fc <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80062fc:	b580      	push	{r7, lr}
 80062fe:	b084      	sub	sp, #16
 8006300:	af00      	add	r7, sp, #0
 8006302:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006308:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800630a:	f7ff f93d 	bl	8005588 <HAL_GetTick>
 800630e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8006316:	b2db      	uxtb	r3, r3
 8006318:	2b02      	cmp	r3, #2
 800631a:	d008      	beq.n	800632e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	2280      	movs	r2, #128	@ 0x80
 8006320:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	2200      	movs	r2, #0
 8006326:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 800632a:	2301      	movs	r3, #1
 800632c:	e052      	b.n	80063d4 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	681a      	ldr	r2, [r3, #0]
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	f022 0216 	bic.w	r2, r2, #22
 800633c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	695a      	ldr	r2, [r3, #20]
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800634c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006352:	2b00      	cmp	r3, #0
 8006354:	d103      	bne.n	800635e <HAL_DMA_Abort+0x62>
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800635a:	2b00      	cmp	r3, #0
 800635c:	d007      	beq.n	800636e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	681a      	ldr	r2, [r3, #0]
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	f022 0208 	bic.w	r2, r2, #8
 800636c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	681a      	ldr	r2, [r3, #0]
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	f022 0201 	bic.w	r2, r2, #1
 800637c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800637e:	e013      	b.n	80063a8 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8006380:	f7ff f902 	bl	8005588 <HAL_GetTick>
 8006384:	4602      	mov	r2, r0
 8006386:	68bb      	ldr	r3, [r7, #8]
 8006388:	1ad3      	subs	r3, r2, r3
 800638a:	2b05      	cmp	r3, #5
 800638c:	d90c      	bls.n	80063a8 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	2220      	movs	r2, #32
 8006392:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	2203      	movs	r2, #3
 8006398:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	2200      	movs	r2, #0
 80063a0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 80063a4:	2303      	movs	r3, #3
 80063a6:	e015      	b.n	80063d4 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	f003 0301 	and.w	r3, r3, #1
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d1e4      	bne.n	8006380 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80063ba:	223f      	movs	r2, #63	@ 0x3f
 80063bc:	409a      	lsls	r2, r3
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	2201      	movs	r2, #1
 80063c6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	2200      	movs	r2, #0
 80063ce:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 80063d2:	2300      	movs	r3, #0
}
 80063d4:	4618      	mov	r0, r3
 80063d6:	3710      	adds	r7, #16
 80063d8:	46bd      	mov	sp, r7
 80063da:	bd80      	pop	{r7, pc}

080063dc <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80063dc:	b480      	push	{r7}
 80063de:	b083      	sub	sp, #12
 80063e0:	af00      	add	r7, sp, #0
 80063e2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80063ea:	b2db      	uxtb	r3, r3
 80063ec:	2b02      	cmp	r3, #2
 80063ee:	d004      	beq.n	80063fa <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	2280      	movs	r2, #128	@ 0x80
 80063f4:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80063f6:	2301      	movs	r3, #1
 80063f8:	e00c      	b.n	8006414 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	2205      	movs	r2, #5
 80063fe:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	681a      	ldr	r2, [r3, #0]
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	f022 0201 	bic.w	r2, r2, #1
 8006410:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8006412:	2300      	movs	r3, #0
}
 8006414:	4618      	mov	r0, r3
 8006416:	370c      	adds	r7, #12
 8006418:	46bd      	mov	sp, r7
 800641a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800641e:	4770      	bx	lr

08006420 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8006420:	b580      	push	{r7, lr}
 8006422:	b086      	sub	sp, #24
 8006424:	af00      	add	r7, sp, #0
 8006426:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8006428:	2300      	movs	r3, #0
 800642a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800642c:	4b8e      	ldr	r3, [pc, #568]	@ (8006668 <HAL_DMA_IRQHandler+0x248>)
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	4a8e      	ldr	r2, [pc, #568]	@ (800666c <HAL_DMA_IRQHandler+0x24c>)
 8006432:	fba2 2303 	umull	r2, r3, r2, r3
 8006436:	0a9b      	lsrs	r3, r3, #10
 8006438:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800643e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8006440:	693b      	ldr	r3, [r7, #16]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800644a:	2208      	movs	r2, #8
 800644c:	409a      	lsls	r2, r3
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	4013      	ands	r3, r2
 8006452:	2b00      	cmp	r3, #0
 8006454:	d01a      	beq.n	800648c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	f003 0304 	and.w	r3, r3, #4
 8006460:	2b00      	cmp	r3, #0
 8006462:	d013      	beq.n	800648c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	681a      	ldr	r2, [r3, #0]
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	f022 0204 	bic.w	r2, r2, #4
 8006472:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006478:	2208      	movs	r2, #8
 800647a:	409a      	lsls	r2, r3
 800647c:	693b      	ldr	r3, [r7, #16]
 800647e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006484:	f043 0201 	orr.w	r2, r3, #1
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006490:	2201      	movs	r2, #1
 8006492:	409a      	lsls	r2, r3
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	4013      	ands	r3, r2
 8006498:	2b00      	cmp	r3, #0
 800649a:	d012      	beq.n	80064c2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	695b      	ldr	r3, [r3, #20]
 80064a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d00b      	beq.n	80064c2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80064ae:	2201      	movs	r2, #1
 80064b0:	409a      	lsls	r2, r3
 80064b2:	693b      	ldr	r3, [r7, #16]
 80064b4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80064ba:	f043 0202 	orr.w	r2, r3, #2
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80064c6:	2204      	movs	r2, #4
 80064c8:	409a      	lsls	r2, r3
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	4013      	ands	r3, r2
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d012      	beq.n	80064f8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	f003 0302 	and.w	r3, r3, #2
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d00b      	beq.n	80064f8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80064e4:	2204      	movs	r2, #4
 80064e6:	409a      	lsls	r2, r3
 80064e8:	693b      	ldr	r3, [r7, #16]
 80064ea:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80064f0:	f043 0204 	orr.w	r2, r3, #4
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80064fc:	2210      	movs	r2, #16
 80064fe:	409a      	lsls	r2, r3
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	4013      	ands	r3, r2
 8006504:	2b00      	cmp	r3, #0
 8006506:	d043      	beq.n	8006590 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	f003 0308 	and.w	r3, r3, #8
 8006512:	2b00      	cmp	r3, #0
 8006514:	d03c      	beq.n	8006590 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800651a:	2210      	movs	r2, #16
 800651c:	409a      	lsls	r2, r3
 800651e:	693b      	ldr	r3, [r7, #16]
 8006520:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800652c:	2b00      	cmp	r3, #0
 800652e:	d018      	beq.n	8006562 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800653a:	2b00      	cmp	r3, #0
 800653c:	d108      	bne.n	8006550 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006542:	2b00      	cmp	r3, #0
 8006544:	d024      	beq.n	8006590 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800654a:	6878      	ldr	r0, [r7, #4]
 800654c:	4798      	blx	r3
 800654e:	e01f      	b.n	8006590 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006554:	2b00      	cmp	r3, #0
 8006556:	d01b      	beq.n	8006590 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800655c:	6878      	ldr	r0, [r7, #4]
 800655e:	4798      	blx	r3
 8006560:	e016      	b.n	8006590 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800656c:	2b00      	cmp	r3, #0
 800656e:	d107      	bne.n	8006580 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	681a      	ldr	r2, [r3, #0]
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	f022 0208 	bic.w	r2, r2, #8
 800657e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006584:	2b00      	cmp	r3, #0
 8006586:	d003      	beq.n	8006590 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800658c:	6878      	ldr	r0, [r7, #4]
 800658e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006594:	2220      	movs	r2, #32
 8006596:	409a      	lsls	r2, r3
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	4013      	ands	r3, r2
 800659c:	2b00      	cmp	r3, #0
 800659e:	f000 808f 	beq.w	80066c0 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	f003 0310 	and.w	r3, r3, #16
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	f000 8087 	beq.w	80066c0 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80065b6:	2220      	movs	r2, #32
 80065b8:	409a      	lsls	r2, r3
 80065ba:	693b      	ldr	r3, [r7, #16]
 80065bc:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80065c4:	b2db      	uxtb	r3, r3
 80065c6:	2b05      	cmp	r3, #5
 80065c8:	d136      	bne.n	8006638 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	681a      	ldr	r2, [r3, #0]
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	f022 0216 	bic.w	r2, r2, #22
 80065d8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	695a      	ldr	r2, [r3, #20]
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80065e8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d103      	bne.n	80065fa <HAL_DMA_IRQHandler+0x1da>
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d007      	beq.n	800660a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	681a      	ldr	r2, [r3, #0]
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	f022 0208 	bic.w	r2, r2, #8
 8006608:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800660e:	223f      	movs	r2, #63	@ 0x3f
 8006610:	409a      	lsls	r2, r3
 8006612:	693b      	ldr	r3, [r7, #16]
 8006614:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	2201      	movs	r2, #1
 800661a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	2200      	movs	r2, #0
 8006622:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800662a:	2b00      	cmp	r3, #0
 800662c:	d07e      	beq.n	800672c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006632:	6878      	ldr	r0, [r7, #4]
 8006634:	4798      	blx	r3
        }
        return;
 8006636:	e079      	b.n	800672c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006642:	2b00      	cmp	r3, #0
 8006644:	d01d      	beq.n	8006682 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8006650:	2b00      	cmp	r3, #0
 8006652:	d10d      	bne.n	8006670 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006658:	2b00      	cmp	r3, #0
 800665a:	d031      	beq.n	80066c0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006660:	6878      	ldr	r0, [r7, #4]
 8006662:	4798      	blx	r3
 8006664:	e02c      	b.n	80066c0 <HAL_DMA_IRQHandler+0x2a0>
 8006666:	bf00      	nop
 8006668:	2000d10c 	.word	0x2000d10c
 800666c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006674:	2b00      	cmp	r3, #0
 8006676:	d023      	beq.n	80066c0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800667c:	6878      	ldr	r0, [r7, #4]
 800667e:	4798      	blx	r3
 8006680:	e01e      	b.n	80066c0 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800668c:	2b00      	cmp	r3, #0
 800668e:	d10f      	bne.n	80066b0 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	681a      	ldr	r2, [r3, #0]
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	f022 0210 	bic.w	r2, r2, #16
 800669e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	2201      	movs	r2, #1
 80066a4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	2200      	movs	r2, #0
 80066ac:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d003      	beq.n	80066c0 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80066bc:	6878      	ldr	r0, [r7, #4]
 80066be:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d032      	beq.n	800672e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80066cc:	f003 0301 	and.w	r3, r3, #1
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d022      	beq.n	800671a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	2205      	movs	r2, #5
 80066d8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	681a      	ldr	r2, [r3, #0]
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	f022 0201 	bic.w	r2, r2, #1
 80066ea:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80066ec:	68bb      	ldr	r3, [r7, #8]
 80066ee:	3301      	adds	r3, #1
 80066f0:	60bb      	str	r3, [r7, #8]
 80066f2:	697a      	ldr	r2, [r7, #20]
 80066f4:	429a      	cmp	r2, r3
 80066f6:	d307      	bcc.n	8006708 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	f003 0301 	and.w	r3, r3, #1
 8006702:	2b00      	cmp	r3, #0
 8006704:	d1f2      	bne.n	80066ec <HAL_DMA_IRQHandler+0x2cc>
 8006706:	e000      	b.n	800670a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8006708:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	2201      	movs	r2, #1
 800670e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	2200      	movs	r2, #0
 8006716:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800671e:	2b00      	cmp	r3, #0
 8006720:	d005      	beq.n	800672e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006726:	6878      	ldr	r0, [r7, #4]
 8006728:	4798      	blx	r3
 800672a:	e000      	b.n	800672e <HAL_DMA_IRQHandler+0x30e>
        return;
 800672c:	bf00      	nop
    }
  }
}
 800672e:	3718      	adds	r7, #24
 8006730:	46bd      	mov	sp, r7
 8006732:	bd80      	pop	{r7, pc}

08006734 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006734:	b480      	push	{r7}
 8006736:	b085      	sub	sp, #20
 8006738:	af00      	add	r7, sp, #0
 800673a:	60f8      	str	r0, [r7, #12]
 800673c:	60b9      	str	r1, [r7, #8]
 800673e:	607a      	str	r2, [r7, #4]
 8006740:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	681a      	ldr	r2, [r3, #0]
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8006750:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	683a      	ldr	r2, [r7, #0]
 8006758:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	689b      	ldr	r3, [r3, #8]
 800675e:	2b40      	cmp	r3, #64	@ 0x40
 8006760:	d108      	bne.n	8006774 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	687a      	ldr	r2, [r7, #4]
 8006768:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	68ba      	ldr	r2, [r7, #8]
 8006770:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8006772:	e007      	b.n	8006784 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	68ba      	ldr	r2, [r7, #8]
 800677a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	687a      	ldr	r2, [r7, #4]
 8006782:	60da      	str	r2, [r3, #12]
}
 8006784:	bf00      	nop
 8006786:	3714      	adds	r7, #20
 8006788:	46bd      	mov	sp, r7
 800678a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800678e:	4770      	bx	lr

08006790 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8006790:	b480      	push	{r7}
 8006792:	b085      	sub	sp, #20
 8006794:	af00      	add	r7, sp, #0
 8006796:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	b2db      	uxtb	r3, r3
 800679e:	3b10      	subs	r3, #16
 80067a0:	4a14      	ldr	r2, [pc, #80]	@ (80067f4 <DMA_CalcBaseAndBitshift+0x64>)
 80067a2:	fba2 2303 	umull	r2, r3, r2, r3
 80067a6:	091b      	lsrs	r3, r3, #4
 80067a8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80067aa:	4a13      	ldr	r2, [pc, #76]	@ (80067f8 <DMA_CalcBaseAndBitshift+0x68>)
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	4413      	add	r3, r2
 80067b0:	781b      	ldrb	r3, [r3, #0]
 80067b2:	461a      	mov	r2, r3
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	2b03      	cmp	r3, #3
 80067bc:	d909      	bls.n	80067d2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80067c6:	f023 0303 	bic.w	r3, r3, #3
 80067ca:	1d1a      	adds	r2, r3, #4
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	659a      	str	r2, [r3, #88]	@ 0x58
 80067d0:	e007      	b.n	80067e2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80067da:	f023 0303 	bic.w	r3, r3, #3
 80067de:	687a      	ldr	r2, [r7, #4]
 80067e0:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80067e6:	4618      	mov	r0, r3
 80067e8:	3714      	adds	r7, #20
 80067ea:	46bd      	mov	sp, r7
 80067ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067f0:	4770      	bx	lr
 80067f2:	bf00      	nop
 80067f4:	aaaaaaab 	.word	0xaaaaaaab
 80067f8:	08010cc0 	.word	0x08010cc0

080067fc <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80067fc:	b480      	push	{r7}
 80067fe:	b085      	sub	sp, #20
 8006800:	af00      	add	r7, sp, #0
 8006802:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006804:	2300      	movs	r3, #0
 8006806:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800680c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	699b      	ldr	r3, [r3, #24]
 8006812:	2b00      	cmp	r3, #0
 8006814:	d11f      	bne.n	8006856 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8006816:	68bb      	ldr	r3, [r7, #8]
 8006818:	2b03      	cmp	r3, #3
 800681a:	d856      	bhi.n	80068ca <DMA_CheckFifoParam+0xce>
 800681c:	a201      	add	r2, pc, #4	@ (adr r2, 8006824 <DMA_CheckFifoParam+0x28>)
 800681e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006822:	bf00      	nop
 8006824:	08006835 	.word	0x08006835
 8006828:	08006847 	.word	0x08006847
 800682c:	08006835 	.word	0x08006835
 8006830:	080068cb 	.word	0x080068cb
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006838:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800683c:	2b00      	cmp	r3, #0
 800683e:	d046      	beq.n	80068ce <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8006840:	2301      	movs	r3, #1
 8006842:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006844:	e043      	b.n	80068ce <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800684a:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800684e:	d140      	bne.n	80068d2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8006850:	2301      	movs	r3, #1
 8006852:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006854:	e03d      	b.n	80068d2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	699b      	ldr	r3, [r3, #24]
 800685a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800685e:	d121      	bne.n	80068a4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8006860:	68bb      	ldr	r3, [r7, #8]
 8006862:	2b03      	cmp	r3, #3
 8006864:	d837      	bhi.n	80068d6 <DMA_CheckFifoParam+0xda>
 8006866:	a201      	add	r2, pc, #4	@ (adr r2, 800686c <DMA_CheckFifoParam+0x70>)
 8006868:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800686c:	0800687d 	.word	0x0800687d
 8006870:	08006883 	.word	0x08006883
 8006874:	0800687d 	.word	0x0800687d
 8006878:	08006895 	.word	0x08006895
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800687c:	2301      	movs	r3, #1
 800687e:	73fb      	strb	r3, [r7, #15]
      break;
 8006880:	e030      	b.n	80068e4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006886:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800688a:	2b00      	cmp	r3, #0
 800688c:	d025      	beq.n	80068da <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800688e:	2301      	movs	r3, #1
 8006890:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006892:	e022      	b.n	80068da <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006898:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800689c:	d11f      	bne.n	80068de <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800689e:	2301      	movs	r3, #1
 80068a0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80068a2:	e01c      	b.n	80068de <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80068a4:	68bb      	ldr	r3, [r7, #8]
 80068a6:	2b02      	cmp	r3, #2
 80068a8:	d903      	bls.n	80068b2 <DMA_CheckFifoParam+0xb6>
 80068aa:	68bb      	ldr	r3, [r7, #8]
 80068ac:	2b03      	cmp	r3, #3
 80068ae:	d003      	beq.n	80068b8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80068b0:	e018      	b.n	80068e4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80068b2:	2301      	movs	r3, #1
 80068b4:	73fb      	strb	r3, [r7, #15]
      break;
 80068b6:	e015      	b.n	80068e4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80068bc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	d00e      	beq.n	80068e2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80068c4:	2301      	movs	r3, #1
 80068c6:	73fb      	strb	r3, [r7, #15]
      break;
 80068c8:	e00b      	b.n	80068e2 <DMA_CheckFifoParam+0xe6>
      break;
 80068ca:	bf00      	nop
 80068cc:	e00a      	b.n	80068e4 <DMA_CheckFifoParam+0xe8>
      break;
 80068ce:	bf00      	nop
 80068d0:	e008      	b.n	80068e4 <DMA_CheckFifoParam+0xe8>
      break;
 80068d2:	bf00      	nop
 80068d4:	e006      	b.n	80068e4 <DMA_CheckFifoParam+0xe8>
      break;
 80068d6:	bf00      	nop
 80068d8:	e004      	b.n	80068e4 <DMA_CheckFifoParam+0xe8>
      break;
 80068da:	bf00      	nop
 80068dc:	e002      	b.n	80068e4 <DMA_CheckFifoParam+0xe8>
      break;   
 80068de:	bf00      	nop
 80068e0:	e000      	b.n	80068e4 <DMA_CheckFifoParam+0xe8>
      break;
 80068e2:	bf00      	nop
    }
  } 
  
  return status; 
 80068e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80068e6:	4618      	mov	r0, r3
 80068e8:	3714      	adds	r7, #20
 80068ea:	46bd      	mov	sp, r7
 80068ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068f0:	4770      	bx	lr
 80068f2:	bf00      	nop

080068f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80068f4:	b480      	push	{r7}
 80068f6:	b089      	sub	sp, #36	@ 0x24
 80068f8:	af00      	add	r7, sp, #0
 80068fa:	6078      	str	r0, [r7, #4]
 80068fc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80068fe:	2300      	movs	r3, #0
 8006900:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8006902:	2300      	movs	r3, #0
 8006904:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8006906:	2300      	movs	r3, #0
 8006908:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800690a:	2300      	movs	r3, #0
 800690c:	61fb      	str	r3, [r7, #28]
 800690e:	e159      	b.n	8006bc4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8006910:	2201      	movs	r2, #1
 8006912:	69fb      	ldr	r3, [r7, #28]
 8006914:	fa02 f303 	lsl.w	r3, r2, r3
 8006918:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800691a:	683b      	ldr	r3, [r7, #0]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	697a      	ldr	r2, [r7, #20]
 8006920:	4013      	ands	r3, r2
 8006922:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8006924:	693a      	ldr	r2, [r7, #16]
 8006926:	697b      	ldr	r3, [r7, #20]
 8006928:	429a      	cmp	r2, r3
 800692a:	f040 8148 	bne.w	8006bbe <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800692e:	683b      	ldr	r3, [r7, #0]
 8006930:	685b      	ldr	r3, [r3, #4]
 8006932:	f003 0303 	and.w	r3, r3, #3
 8006936:	2b01      	cmp	r3, #1
 8006938:	d005      	beq.n	8006946 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800693a:	683b      	ldr	r3, [r7, #0]
 800693c:	685b      	ldr	r3, [r3, #4]
 800693e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8006942:	2b02      	cmp	r3, #2
 8006944:	d130      	bne.n	80069a8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	689b      	ldr	r3, [r3, #8]
 800694a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800694c:	69fb      	ldr	r3, [r7, #28]
 800694e:	005b      	lsls	r3, r3, #1
 8006950:	2203      	movs	r2, #3
 8006952:	fa02 f303 	lsl.w	r3, r2, r3
 8006956:	43db      	mvns	r3, r3
 8006958:	69ba      	ldr	r2, [r7, #24]
 800695a:	4013      	ands	r3, r2
 800695c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800695e:	683b      	ldr	r3, [r7, #0]
 8006960:	68da      	ldr	r2, [r3, #12]
 8006962:	69fb      	ldr	r3, [r7, #28]
 8006964:	005b      	lsls	r3, r3, #1
 8006966:	fa02 f303 	lsl.w	r3, r2, r3
 800696a:	69ba      	ldr	r2, [r7, #24]
 800696c:	4313      	orrs	r3, r2
 800696e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	69ba      	ldr	r2, [r7, #24]
 8006974:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	685b      	ldr	r3, [r3, #4]
 800697a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800697c:	2201      	movs	r2, #1
 800697e:	69fb      	ldr	r3, [r7, #28]
 8006980:	fa02 f303 	lsl.w	r3, r2, r3
 8006984:	43db      	mvns	r3, r3
 8006986:	69ba      	ldr	r2, [r7, #24]
 8006988:	4013      	ands	r3, r2
 800698a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800698c:	683b      	ldr	r3, [r7, #0]
 800698e:	685b      	ldr	r3, [r3, #4]
 8006990:	091b      	lsrs	r3, r3, #4
 8006992:	f003 0201 	and.w	r2, r3, #1
 8006996:	69fb      	ldr	r3, [r7, #28]
 8006998:	fa02 f303 	lsl.w	r3, r2, r3
 800699c:	69ba      	ldr	r2, [r7, #24]
 800699e:	4313      	orrs	r3, r2
 80069a0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	69ba      	ldr	r2, [r7, #24]
 80069a6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80069a8:	683b      	ldr	r3, [r7, #0]
 80069aa:	685b      	ldr	r3, [r3, #4]
 80069ac:	f003 0303 	and.w	r3, r3, #3
 80069b0:	2b03      	cmp	r3, #3
 80069b2:	d017      	beq.n	80069e4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	68db      	ldr	r3, [r3, #12]
 80069b8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80069ba:	69fb      	ldr	r3, [r7, #28]
 80069bc:	005b      	lsls	r3, r3, #1
 80069be:	2203      	movs	r2, #3
 80069c0:	fa02 f303 	lsl.w	r3, r2, r3
 80069c4:	43db      	mvns	r3, r3
 80069c6:	69ba      	ldr	r2, [r7, #24]
 80069c8:	4013      	ands	r3, r2
 80069ca:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80069cc:	683b      	ldr	r3, [r7, #0]
 80069ce:	689a      	ldr	r2, [r3, #8]
 80069d0:	69fb      	ldr	r3, [r7, #28]
 80069d2:	005b      	lsls	r3, r3, #1
 80069d4:	fa02 f303 	lsl.w	r3, r2, r3
 80069d8:	69ba      	ldr	r2, [r7, #24]
 80069da:	4313      	orrs	r3, r2
 80069dc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	69ba      	ldr	r2, [r7, #24]
 80069e2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80069e4:	683b      	ldr	r3, [r7, #0]
 80069e6:	685b      	ldr	r3, [r3, #4]
 80069e8:	f003 0303 	and.w	r3, r3, #3
 80069ec:	2b02      	cmp	r3, #2
 80069ee:	d123      	bne.n	8006a38 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80069f0:	69fb      	ldr	r3, [r7, #28]
 80069f2:	08da      	lsrs	r2, r3, #3
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	3208      	adds	r2, #8
 80069f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80069fc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80069fe:	69fb      	ldr	r3, [r7, #28]
 8006a00:	f003 0307 	and.w	r3, r3, #7
 8006a04:	009b      	lsls	r3, r3, #2
 8006a06:	220f      	movs	r2, #15
 8006a08:	fa02 f303 	lsl.w	r3, r2, r3
 8006a0c:	43db      	mvns	r3, r3
 8006a0e:	69ba      	ldr	r2, [r7, #24]
 8006a10:	4013      	ands	r3, r2
 8006a12:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8006a14:	683b      	ldr	r3, [r7, #0]
 8006a16:	691a      	ldr	r2, [r3, #16]
 8006a18:	69fb      	ldr	r3, [r7, #28]
 8006a1a:	f003 0307 	and.w	r3, r3, #7
 8006a1e:	009b      	lsls	r3, r3, #2
 8006a20:	fa02 f303 	lsl.w	r3, r2, r3
 8006a24:	69ba      	ldr	r2, [r7, #24]
 8006a26:	4313      	orrs	r3, r2
 8006a28:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8006a2a:	69fb      	ldr	r3, [r7, #28]
 8006a2c:	08da      	lsrs	r2, r3, #3
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	3208      	adds	r2, #8
 8006a32:	69b9      	ldr	r1, [r7, #24]
 8006a34:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8006a3e:	69fb      	ldr	r3, [r7, #28]
 8006a40:	005b      	lsls	r3, r3, #1
 8006a42:	2203      	movs	r2, #3
 8006a44:	fa02 f303 	lsl.w	r3, r2, r3
 8006a48:	43db      	mvns	r3, r3
 8006a4a:	69ba      	ldr	r2, [r7, #24]
 8006a4c:	4013      	ands	r3, r2
 8006a4e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006a50:	683b      	ldr	r3, [r7, #0]
 8006a52:	685b      	ldr	r3, [r3, #4]
 8006a54:	f003 0203 	and.w	r2, r3, #3
 8006a58:	69fb      	ldr	r3, [r7, #28]
 8006a5a:	005b      	lsls	r3, r3, #1
 8006a5c:	fa02 f303 	lsl.w	r3, r2, r3
 8006a60:	69ba      	ldr	r2, [r7, #24]
 8006a62:	4313      	orrs	r3, r2
 8006a64:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	69ba      	ldr	r2, [r7, #24]
 8006a6a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8006a6c:	683b      	ldr	r3, [r7, #0]
 8006a6e:	685b      	ldr	r3, [r3, #4]
 8006a70:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	f000 80a2 	beq.w	8006bbe <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006a7a:	2300      	movs	r3, #0
 8006a7c:	60fb      	str	r3, [r7, #12]
 8006a7e:	4b57      	ldr	r3, [pc, #348]	@ (8006bdc <HAL_GPIO_Init+0x2e8>)
 8006a80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006a82:	4a56      	ldr	r2, [pc, #344]	@ (8006bdc <HAL_GPIO_Init+0x2e8>)
 8006a84:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8006a88:	6453      	str	r3, [r2, #68]	@ 0x44
 8006a8a:	4b54      	ldr	r3, [pc, #336]	@ (8006bdc <HAL_GPIO_Init+0x2e8>)
 8006a8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006a8e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006a92:	60fb      	str	r3, [r7, #12]
 8006a94:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8006a96:	4a52      	ldr	r2, [pc, #328]	@ (8006be0 <HAL_GPIO_Init+0x2ec>)
 8006a98:	69fb      	ldr	r3, [r7, #28]
 8006a9a:	089b      	lsrs	r3, r3, #2
 8006a9c:	3302      	adds	r3, #2
 8006a9e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006aa2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8006aa4:	69fb      	ldr	r3, [r7, #28]
 8006aa6:	f003 0303 	and.w	r3, r3, #3
 8006aaa:	009b      	lsls	r3, r3, #2
 8006aac:	220f      	movs	r2, #15
 8006aae:	fa02 f303 	lsl.w	r3, r2, r3
 8006ab2:	43db      	mvns	r3, r3
 8006ab4:	69ba      	ldr	r2, [r7, #24]
 8006ab6:	4013      	ands	r3, r2
 8006ab8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	4a49      	ldr	r2, [pc, #292]	@ (8006be4 <HAL_GPIO_Init+0x2f0>)
 8006abe:	4293      	cmp	r3, r2
 8006ac0:	d019      	beq.n	8006af6 <HAL_GPIO_Init+0x202>
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	4a48      	ldr	r2, [pc, #288]	@ (8006be8 <HAL_GPIO_Init+0x2f4>)
 8006ac6:	4293      	cmp	r3, r2
 8006ac8:	d013      	beq.n	8006af2 <HAL_GPIO_Init+0x1fe>
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	4a47      	ldr	r2, [pc, #284]	@ (8006bec <HAL_GPIO_Init+0x2f8>)
 8006ace:	4293      	cmp	r3, r2
 8006ad0:	d00d      	beq.n	8006aee <HAL_GPIO_Init+0x1fa>
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	4a46      	ldr	r2, [pc, #280]	@ (8006bf0 <HAL_GPIO_Init+0x2fc>)
 8006ad6:	4293      	cmp	r3, r2
 8006ad8:	d007      	beq.n	8006aea <HAL_GPIO_Init+0x1f6>
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	4a45      	ldr	r2, [pc, #276]	@ (8006bf4 <HAL_GPIO_Init+0x300>)
 8006ade:	4293      	cmp	r3, r2
 8006ae0:	d101      	bne.n	8006ae6 <HAL_GPIO_Init+0x1f2>
 8006ae2:	2304      	movs	r3, #4
 8006ae4:	e008      	b.n	8006af8 <HAL_GPIO_Init+0x204>
 8006ae6:	2307      	movs	r3, #7
 8006ae8:	e006      	b.n	8006af8 <HAL_GPIO_Init+0x204>
 8006aea:	2303      	movs	r3, #3
 8006aec:	e004      	b.n	8006af8 <HAL_GPIO_Init+0x204>
 8006aee:	2302      	movs	r3, #2
 8006af0:	e002      	b.n	8006af8 <HAL_GPIO_Init+0x204>
 8006af2:	2301      	movs	r3, #1
 8006af4:	e000      	b.n	8006af8 <HAL_GPIO_Init+0x204>
 8006af6:	2300      	movs	r3, #0
 8006af8:	69fa      	ldr	r2, [r7, #28]
 8006afa:	f002 0203 	and.w	r2, r2, #3
 8006afe:	0092      	lsls	r2, r2, #2
 8006b00:	4093      	lsls	r3, r2
 8006b02:	69ba      	ldr	r2, [r7, #24]
 8006b04:	4313      	orrs	r3, r2
 8006b06:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006b08:	4935      	ldr	r1, [pc, #212]	@ (8006be0 <HAL_GPIO_Init+0x2ec>)
 8006b0a:	69fb      	ldr	r3, [r7, #28]
 8006b0c:	089b      	lsrs	r3, r3, #2
 8006b0e:	3302      	adds	r3, #2
 8006b10:	69ba      	ldr	r2, [r7, #24]
 8006b12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8006b16:	4b38      	ldr	r3, [pc, #224]	@ (8006bf8 <HAL_GPIO_Init+0x304>)
 8006b18:	689b      	ldr	r3, [r3, #8]
 8006b1a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006b1c:	693b      	ldr	r3, [r7, #16]
 8006b1e:	43db      	mvns	r3, r3
 8006b20:	69ba      	ldr	r2, [r7, #24]
 8006b22:	4013      	ands	r3, r2
 8006b24:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8006b26:	683b      	ldr	r3, [r7, #0]
 8006b28:	685b      	ldr	r3, [r3, #4]
 8006b2a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d003      	beq.n	8006b3a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8006b32:	69ba      	ldr	r2, [r7, #24]
 8006b34:	693b      	ldr	r3, [r7, #16]
 8006b36:	4313      	orrs	r3, r2
 8006b38:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8006b3a:	4a2f      	ldr	r2, [pc, #188]	@ (8006bf8 <HAL_GPIO_Init+0x304>)
 8006b3c:	69bb      	ldr	r3, [r7, #24]
 8006b3e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8006b40:	4b2d      	ldr	r3, [pc, #180]	@ (8006bf8 <HAL_GPIO_Init+0x304>)
 8006b42:	68db      	ldr	r3, [r3, #12]
 8006b44:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006b46:	693b      	ldr	r3, [r7, #16]
 8006b48:	43db      	mvns	r3, r3
 8006b4a:	69ba      	ldr	r2, [r7, #24]
 8006b4c:	4013      	ands	r3, r2
 8006b4e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8006b50:	683b      	ldr	r3, [r7, #0]
 8006b52:	685b      	ldr	r3, [r3, #4]
 8006b54:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	d003      	beq.n	8006b64 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8006b5c:	69ba      	ldr	r2, [r7, #24]
 8006b5e:	693b      	ldr	r3, [r7, #16]
 8006b60:	4313      	orrs	r3, r2
 8006b62:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8006b64:	4a24      	ldr	r2, [pc, #144]	@ (8006bf8 <HAL_GPIO_Init+0x304>)
 8006b66:	69bb      	ldr	r3, [r7, #24]
 8006b68:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8006b6a:	4b23      	ldr	r3, [pc, #140]	@ (8006bf8 <HAL_GPIO_Init+0x304>)
 8006b6c:	685b      	ldr	r3, [r3, #4]
 8006b6e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006b70:	693b      	ldr	r3, [r7, #16]
 8006b72:	43db      	mvns	r3, r3
 8006b74:	69ba      	ldr	r2, [r7, #24]
 8006b76:	4013      	ands	r3, r2
 8006b78:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8006b7a:	683b      	ldr	r3, [r7, #0]
 8006b7c:	685b      	ldr	r3, [r3, #4]
 8006b7e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d003      	beq.n	8006b8e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8006b86:	69ba      	ldr	r2, [r7, #24]
 8006b88:	693b      	ldr	r3, [r7, #16]
 8006b8a:	4313      	orrs	r3, r2
 8006b8c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8006b8e:	4a1a      	ldr	r2, [pc, #104]	@ (8006bf8 <HAL_GPIO_Init+0x304>)
 8006b90:	69bb      	ldr	r3, [r7, #24]
 8006b92:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8006b94:	4b18      	ldr	r3, [pc, #96]	@ (8006bf8 <HAL_GPIO_Init+0x304>)
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006b9a:	693b      	ldr	r3, [r7, #16]
 8006b9c:	43db      	mvns	r3, r3
 8006b9e:	69ba      	ldr	r2, [r7, #24]
 8006ba0:	4013      	ands	r3, r2
 8006ba2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8006ba4:	683b      	ldr	r3, [r7, #0]
 8006ba6:	685b      	ldr	r3, [r3, #4]
 8006ba8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d003      	beq.n	8006bb8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8006bb0:	69ba      	ldr	r2, [r7, #24]
 8006bb2:	693b      	ldr	r3, [r7, #16]
 8006bb4:	4313      	orrs	r3, r2
 8006bb6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8006bb8:	4a0f      	ldr	r2, [pc, #60]	@ (8006bf8 <HAL_GPIO_Init+0x304>)
 8006bba:	69bb      	ldr	r3, [r7, #24]
 8006bbc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006bbe:	69fb      	ldr	r3, [r7, #28]
 8006bc0:	3301      	adds	r3, #1
 8006bc2:	61fb      	str	r3, [r7, #28]
 8006bc4:	69fb      	ldr	r3, [r7, #28]
 8006bc6:	2b0f      	cmp	r3, #15
 8006bc8:	f67f aea2 	bls.w	8006910 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8006bcc:	bf00      	nop
 8006bce:	bf00      	nop
 8006bd0:	3724      	adds	r7, #36	@ 0x24
 8006bd2:	46bd      	mov	sp, r7
 8006bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bd8:	4770      	bx	lr
 8006bda:	bf00      	nop
 8006bdc:	40023800 	.word	0x40023800
 8006be0:	40013800 	.word	0x40013800
 8006be4:	40020000 	.word	0x40020000
 8006be8:	40020400 	.word	0x40020400
 8006bec:	40020800 	.word	0x40020800
 8006bf0:	40020c00 	.word	0x40020c00
 8006bf4:	40021000 	.word	0x40021000
 8006bf8:	40013c00 	.word	0x40013c00

08006bfc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8006bfc:	b480      	push	{r7}
 8006bfe:	b085      	sub	sp, #20
 8006c00:	af00      	add	r7, sp, #0
 8006c02:	6078      	str	r0, [r7, #4]
 8006c04:	460b      	mov	r3, r1
 8006c06:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	691a      	ldr	r2, [r3, #16]
 8006c0c:	887b      	ldrh	r3, [r7, #2]
 8006c0e:	4013      	ands	r3, r2
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	d002      	beq.n	8006c1a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8006c14:	2301      	movs	r3, #1
 8006c16:	73fb      	strb	r3, [r7, #15]
 8006c18:	e001      	b.n	8006c1e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8006c1a:	2300      	movs	r3, #0
 8006c1c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8006c1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c20:	4618      	mov	r0, r3
 8006c22:	3714      	adds	r7, #20
 8006c24:	46bd      	mov	sp, r7
 8006c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c2a:	4770      	bx	lr

08006c2c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006c2c:	b480      	push	{r7}
 8006c2e:	b083      	sub	sp, #12
 8006c30:	af00      	add	r7, sp, #0
 8006c32:	6078      	str	r0, [r7, #4]
 8006c34:	460b      	mov	r3, r1
 8006c36:	807b      	strh	r3, [r7, #2]
 8006c38:	4613      	mov	r3, r2
 8006c3a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8006c3c:	787b      	ldrb	r3, [r7, #1]
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d003      	beq.n	8006c4a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006c42:	887a      	ldrh	r2, [r7, #2]
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8006c48:	e003      	b.n	8006c52 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8006c4a:	887b      	ldrh	r3, [r7, #2]
 8006c4c:	041a      	lsls	r2, r3, #16
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	619a      	str	r2, [r3, #24]
}
 8006c52:	bf00      	nop
 8006c54:	370c      	adds	r7, #12
 8006c56:	46bd      	mov	sp, r7
 8006c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c5c:	4770      	bx	lr
	...

08006c60 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8006c60:	b580      	push	{r7, lr}
 8006c62:	b082      	sub	sp, #8
 8006c64:	af00      	add	r7, sp, #0
 8006c66:	4603      	mov	r3, r0
 8006c68:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8006c6a:	4b08      	ldr	r3, [pc, #32]	@ (8006c8c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006c6c:	695a      	ldr	r2, [r3, #20]
 8006c6e:	88fb      	ldrh	r3, [r7, #6]
 8006c70:	4013      	ands	r3, r2
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	d006      	beq.n	8006c84 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8006c76:	4a05      	ldr	r2, [pc, #20]	@ (8006c8c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006c78:	88fb      	ldrh	r3, [r7, #6]
 8006c7a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8006c7c:	88fb      	ldrh	r3, [r7, #6]
 8006c7e:	4618      	mov	r0, r3
 8006c80:	f000 f806 	bl	8006c90 <HAL_GPIO_EXTI_Callback>
  }
}
 8006c84:	bf00      	nop
 8006c86:	3708      	adds	r7, #8
 8006c88:	46bd      	mov	sp, r7
 8006c8a:	bd80      	pop	{r7, pc}
 8006c8c:	40013c00 	.word	0x40013c00

08006c90 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8006c90:	b480      	push	{r7}
 8006c92:	b083      	sub	sp, #12
 8006c94:	af00      	add	r7, sp, #0
 8006c96:	4603      	mov	r3, r0
 8006c98:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8006c9a:	bf00      	nop
 8006c9c:	370c      	adds	r7, #12
 8006c9e:	46bd      	mov	sp, r7
 8006ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ca4:	4770      	bx	lr
	...

08006ca8 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8006ca8:	b580      	push	{r7, lr}
 8006caa:	b088      	sub	sp, #32
 8006cac:	af00      	add	r7, sp, #0
 8006cae:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	d101      	bne.n	8006cba <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8006cb6:	2301      	movs	r3, #1
 8006cb8:	e128      	b.n	8006f0c <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006cc0:	b2db      	uxtb	r3, r3
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d109      	bne.n	8006cda <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	2200      	movs	r2, #0
 8006cca:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	4a90      	ldr	r2, [pc, #576]	@ (8006f14 <HAL_I2S_Init+0x26c>)
 8006cd2:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8006cd4:	6878      	ldr	r0, [r7, #4]
 8006cd6:	f7fa fca1 	bl	800161c <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	2202      	movs	r2, #2
 8006cde:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	69db      	ldr	r3, [r3, #28]
 8006ce8:	687a      	ldr	r2, [r7, #4]
 8006cea:	6812      	ldr	r2, [r2, #0]
 8006cec:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8006cf0:	f023 030f 	bic.w	r3, r3, #15
 8006cf4:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	2202      	movs	r2, #2
 8006cfc:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	695b      	ldr	r3, [r3, #20]
 8006d02:	2b02      	cmp	r3, #2
 8006d04:	d060      	beq.n	8006dc8 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	68db      	ldr	r3, [r3, #12]
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d102      	bne.n	8006d14 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8006d0e:	2310      	movs	r3, #16
 8006d10:	617b      	str	r3, [r7, #20]
 8006d12:	e001      	b.n	8006d18 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8006d14:	2320      	movs	r3, #32
 8006d16:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	689b      	ldr	r3, [r3, #8]
 8006d1c:	2b20      	cmp	r3, #32
 8006d1e:	d802      	bhi.n	8006d26 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8006d20:	697b      	ldr	r3, [r7, #20]
 8006d22:	005b      	lsls	r3, r3, #1
 8006d24:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8006d26:	2001      	movs	r0, #1
 8006d28:	f001 fb02 	bl	8008330 <HAL_RCCEx_GetPeriphCLKFreq>
 8006d2c:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	691b      	ldr	r3, [r3, #16]
 8006d32:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006d36:	d125      	bne.n	8006d84 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	68db      	ldr	r3, [r3, #12]
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d010      	beq.n	8006d62 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8006d40:	697b      	ldr	r3, [r7, #20]
 8006d42:	009b      	lsls	r3, r3, #2
 8006d44:	68fa      	ldr	r2, [r7, #12]
 8006d46:	fbb2 f2f3 	udiv	r2, r2, r3
 8006d4a:	4613      	mov	r3, r2
 8006d4c:	009b      	lsls	r3, r3, #2
 8006d4e:	4413      	add	r3, r2
 8006d50:	005b      	lsls	r3, r3, #1
 8006d52:	461a      	mov	r2, r3
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	695b      	ldr	r3, [r3, #20]
 8006d58:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d5c:	3305      	adds	r3, #5
 8006d5e:	613b      	str	r3, [r7, #16]
 8006d60:	e01f      	b.n	8006da2 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8006d62:	697b      	ldr	r3, [r7, #20]
 8006d64:	00db      	lsls	r3, r3, #3
 8006d66:	68fa      	ldr	r2, [r7, #12]
 8006d68:	fbb2 f2f3 	udiv	r2, r2, r3
 8006d6c:	4613      	mov	r3, r2
 8006d6e:	009b      	lsls	r3, r3, #2
 8006d70:	4413      	add	r3, r2
 8006d72:	005b      	lsls	r3, r3, #1
 8006d74:	461a      	mov	r2, r3
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	695b      	ldr	r3, [r3, #20]
 8006d7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d7e:	3305      	adds	r3, #5
 8006d80:	613b      	str	r3, [r7, #16]
 8006d82:	e00e      	b.n	8006da2 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8006d84:	68fa      	ldr	r2, [r7, #12]
 8006d86:	697b      	ldr	r3, [r7, #20]
 8006d88:	fbb2 f2f3 	udiv	r2, r2, r3
 8006d8c:	4613      	mov	r3, r2
 8006d8e:	009b      	lsls	r3, r3, #2
 8006d90:	4413      	add	r3, r2
 8006d92:	005b      	lsls	r3, r3, #1
 8006d94:	461a      	mov	r2, r3
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	695b      	ldr	r3, [r3, #20]
 8006d9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d9e:	3305      	adds	r3, #5
 8006da0:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8006da2:	693b      	ldr	r3, [r7, #16]
 8006da4:	4a5c      	ldr	r2, [pc, #368]	@ (8006f18 <HAL_I2S_Init+0x270>)
 8006da6:	fba2 2303 	umull	r2, r3, r2, r3
 8006daa:	08db      	lsrs	r3, r3, #3
 8006dac:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8006dae:	693b      	ldr	r3, [r7, #16]
 8006db0:	f003 0301 	and.w	r3, r3, #1
 8006db4:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8006db6:	693a      	ldr	r2, [r7, #16]
 8006db8:	69bb      	ldr	r3, [r7, #24]
 8006dba:	1ad3      	subs	r3, r2, r3
 8006dbc:	085b      	lsrs	r3, r3, #1
 8006dbe:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8006dc0:	69bb      	ldr	r3, [r7, #24]
 8006dc2:	021b      	lsls	r3, r3, #8
 8006dc4:	61bb      	str	r3, [r7, #24]
 8006dc6:	e003      	b.n	8006dd0 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8006dc8:	2302      	movs	r3, #2
 8006dca:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8006dcc:	2300      	movs	r3, #0
 8006dce:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8006dd0:	69fb      	ldr	r3, [r7, #28]
 8006dd2:	2b01      	cmp	r3, #1
 8006dd4:	d902      	bls.n	8006ddc <HAL_I2S_Init+0x134>
 8006dd6:	69fb      	ldr	r3, [r7, #28]
 8006dd8:	2bff      	cmp	r3, #255	@ 0xff
 8006dda:	d907      	bls.n	8006dec <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006de0:	f043 0210 	orr.w	r2, r3, #16
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	645a      	str	r2, [r3, #68]	@ 0x44
    return  HAL_ERROR;
 8006de8:	2301      	movs	r3, #1
 8006dea:	e08f      	b.n	8006f0c <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	691a      	ldr	r2, [r3, #16]
 8006df0:	69bb      	ldr	r3, [r7, #24]
 8006df2:	ea42 0103 	orr.w	r1, r2, r3
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	69fa      	ldr	r2, [r7, #28]
 8006dfc:	430a      	orrs	r2, r1
 8006dfe:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	69db      	ldr	r3, [r3, #28]
 8006e06:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8006e0a:	f023 030f 	bic.w	r3, r3, #15
 8006e0e:	687a      	ldr	r2, [r7, #4]
 8006e10:	6851      	ldr	r1, [r2, #4]
 8006e12:	687a      	ldr	r2, [r7, #4]
 8006e14:	6892      	ldr	r2, [r2, #8]
 8006e16:	4311      	orrs	r1, r2
 8006e18:	687a      	ldr	r2, [r7, #4]
 8006e1a:	68d2      	ldr	r2, [r2, #12]
 8006e1c:	4311      	orrs	r1, r2
 8006e1e:	687a      	ldr	r2, [r7, #4]
 8006e20:	6992      	ldr	r2, [r2, #24]
 8006e22:	430a      	orrs	r2, r1
 8006e24:	431a      	orrs	r2, r3
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006e2e:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	6a1b      	ldr	r3, [r3, #32]
 8006e34:	2b01      	cmp	r3, #1
 8006e36:	d161      	bne.n	8006efc <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	4a38      	ldr	r2, [pc, #224]	@ (8006f1c <HAL_I2S_Init+0x274>)
 8006e3c:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	4a37      	ldr	r2, [pc, #220]	@ (8006f20 <HAL_I2S_Init+0x278>)
 8006e44:	4293      	cmp	r3, r2
 8006e46:	d101      	bne.n	8006e4c <HAL_I2S_Init+0x1a4>
 8006e48:	4b36      	ldr	r3, [pc, #216]	@ (8006f24 <HAL_I2S_Init+0x27c>)
 8006e4a:	e001      	b.n	8006e50 <HAL_I2S_Init+0x1a8>
 8006e4c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006e50:	69db      	ldr	r3, [r3, #28]
 8006e52:	687a      	ldr	r2, [r7, #4]
 8006e54:	6812      	ldr	r2, [r2, #0]
 8006e56:	4932      	ldr	r1, [pc, #200]	@ (8006f20 <HAL_I2S_Init+0x278>)
 8006e58:	428a      	cmp	r2, r1
 8006e5a:	d101      	bne.n	8006e60 <HAL_I2S_Init+0x1b8>
 8006e5c:	4a31      	ldr	r2, [pc, #196]	@ (8006f24 <HAL_I2S_Init+0x27c>)
 8006e5e:	e001      	b.n	8006e64 <HAL_I2S_Init+0x1bc>
 8006e60:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 8006e64:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8006e68:	f023 030f 	bic.w	r3, r3, #15
 8006e6c:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	4a2b      	ldr	r2, [pc, #172]	@ (8006f20 <HAL_I2S_Init+0x278>)
 8006e74:	4293      	cmp	r3, r2
 8006e76:	d101      	bne.n	8006e7c <HAL_I2S_Init+0x1d4>
 8006e78:	4b2a      	ldr	r3, [pc, #168]	@ (8006f24 <HAL_I2S_Init+0x27c>)
 8006e7a:	e001      	b.n	8006e80 <HAL_I2S_Init+0x1d8>
 8006e7c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006e80:	2202      	movs	r2, #2
 8006e82:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	4a25      	ldr	r2, [pc, #148]	@ (8006f20 <HAL_I2S_Init+0x278>)
 8006e8a:	4293      	cmp	r3, r2
 8006e8c:	d101      	bne.n	8006e92 <HAL_I2S_Init+0x1ea>
 8006e8e:	4b25      	ldr	r3, [pc, #148]	@ (8006f24 <HAL_I2S_Init+0x27c>)
 8006e90:	e001      	b.n	8006e96 <HAL_I2S_Init+0x1ee>
 8006e92:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006e96:	69db      	ldr	r3, [r3, #28]
 8006e98:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	685b      	ldr	r3, [r3, #4]
 8006e9e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006ea2:	d003      	beq.n	8006eac <HAL_I2S_Init+0x204>
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	685b      	ldr	r3, [r3, #4]
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	d103      	bne.n	8006eb4 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8006eac:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8006eb0:	613b      	str	r3, [r7, #16]
 8006eb2:	e001      	b.n	8006eb8 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8006eb4:	2300      	movs	r3, #0
 8006eb6:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8006eb8:	693b      	ldr	r3, [r7, #16]
 8006eba:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	689b      	ldr	r3, [r3, #8]
 8006ec0:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8006ec2:	4313      	orrs	r3, r2
 8006ec4:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	68db      	ldr	r3, [r3, #12]
 8006eca:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8006ecc:	4313      	orrs	r3, r2
 8006ece:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	699b      	ldr	r3, [r3, #24]
 8006ed4:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8006ed6:	4313      	orrs	r3, r2
 8006ed8:	b29a      	uxth	r2, r3
 8006eda:	897b      	ldrh	r3, [r7, #10]
 8006edc:	4313      	orrs	r3, r2
 8006ede:	b29b      	uxth	r3, r3
 8006ee0:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8006ee4:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	4a0d      	ldr	r2, [pc, #52]	@ (8006f20 <HAL_I2S_Init+0x278>)
 8006eec:	4293      	cmp	r3, r2
 8006eee:	d101      	bne.n	8006ef4 <HAL_I2S_Init+0x24c>
 8006ef0:	4b0c      	ldr	r3, [pc, #48]	@ (8006f24 <HAL_I2S_Init+0x27c>)
 8006ef2:	e001      	b.n	8006ef8 <HAL_I2S_Init+0x250>
 8006ef4:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006ef8:	897a      	ldrh	r2, [r7, #10]
 8006efa:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	2200      	movs	r2, #0
 8006f00:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	2201      	movs	r2, #1
 8006f06:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  return HAL_OK;
 8006f0a:	2300      	movs	r3, #0
}
 8006f0c:	4618      	mov	r0, r3
 8006f0e:	3720      	adds	r7, #32
 8006f10:	46bd      	mov	sp, r7
 8006f12:	bd80      	pop	{r7, pc}
 8006f14:	080071e5 	.word	0x080071e5
 8006f18:	cccccccd 	.word	0xcccccccd
 8006f1c:	0800736d 	.word	0x0800736d
 8006f20:	40003800 	.word	0x40003800
 8006f24:	40003400 	.word	0x40003400

08006f28 <HAL_I2S_Transmit>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Transmit(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006f28:	b580      	push	{r7, lr}
 8006f2a:	b086      	sub	sp, #24
 8006f2c:	af00      	add	r7, sp, #0
 8006f2e:	60f8      	str	r0, [r7, #12]
 8006f30:	60b9      	str	r1, [r7, #8]
 8006f32:	603b      	str	r3, [r7, #0]
 8006f34:	4613      	mov	r3, r2
 8006f36:	80fb      	strh	r3, [r7, #6]
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 8006f38:	68bb      	ldr	r3, [r7, #8]
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	d002      	beq.n	8006f44 <HAL_I2S_Transmit+0x1c>
 8006f3e:	88fb      	ldrh	r3, [r7, #6]
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	d101      	bne.n	8006f48 <HAL_I2S_Transmit+0x20>
  {
    return  HAL_ERROR;
 8006f44:	2301      	movs	r3, #1
 8006f46:	e0d8      	b.n	80070fa <HAL_I2S_Transmit+0x1d2>
  }

  if (hi2s->State != HAL_I2S_STATE_READY)
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006f4e:	b2db      	uxtb	r3, r3
 8006f50:	2b01      	cmp	r3, #1
 8006f52:	d001      	beq.n	8006f58 <HAL_I2S_Transmit+0x30>
  {
    return HAL_BUSY;
 8006f54:	2302      	movs	r3, #2
 8006f56:	e0d0      	b.n	80070fa <HAL_I2S_Transmit+0x1d2>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006f5e:	b2db      	uxtb	r3, r3
 8006f60:	2b01      	cmp	r3, #1
 8006f62:	d101      	bne.n	8006f68 <HAL_I2S_Transmit+0x40>
 8006f64:	2302      	movs	r3, #2
 8006f66:	e0c8      	b.n	80070fa <HAL_I2S_Transmit+0x1d2>
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	2201      	movs	r2, #1
 8006f6c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_TX;
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	2203      	movs	r2, #3
 8006f74:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	2200      	movs	r2, #0
 8006f7c:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2s->pTxBuffPtr = pData;
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	68ba      	ldr	r2, [r7, #8]
 8006f82:	625a      	str	r2, [r3, #36]	@ 0x24

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	69db      	ldr	r3, [r3, #28]
 8006f8a:	f003 0307 	and.w	r3, r3, #7
 8006f8e:	617b      	str	r3, [r7, #20]

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 8006f90:	697b      	ldr	r3, [r7, #20]
 8006f92:	2b03      	cmp	r3, #3
 8006f94:	d002      	beq.n	8006f9c <HAL_I2S_Transmit+0x74>
 8006f96:	697b      	ldr	r3, [r7, #20]
 8006f98:	2b05      	cmp	r3, #5
 8006f9a:	d10a      	bne.n	8006fb2 <HAL_I2S_Transmit+0x8a>
  {
    hi2s->TxXferSize = (Size << 1U);
 8006f9c:	88fb      	ldrh	r3, [r7, #6]
 8006f9e:	005b      	lsls	r3, r3, #1
 8006fa0:	b29a      	uxth	r2, r3
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2s->TxXferCount = (Size << 1U);
 8006fa6:	88fb      	ldrh	r3, [r7, #6]
 8006fa8:	005b      	lsls	r3, r3, #1
 8006faa:	b29a      	uxth	r2, r3
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8006fb0:	e005      	b.n	8006fbe <HAL_I2S_Transmit+0x96>
  }
  else
  {
    hi2s->TxXferSize = Size;
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	88fa      	ldrh	r2, [r7, #6]
 8006fb6:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2s->TxXferCount = Size;
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	88fa      	ldrh	r2, [r7, #6]
 8006fbc:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }

  tmpreg_cfgr = hi2s->Instance->I2SCFGR;
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	69db      	ldr	r3, [r3, #28]
 8006fc4:	617b      	str	r3, [r7, #20]

  /* Check if the I2S is already enabled */
  if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SE) != SPI_I2SCFGR_I2SE)
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	69db      	ldr	r3, [r3, #28]
 8006fcc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006fd0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006fd4:	d007      	beq.n	8006fe6 <HAL_I2S_Transmit+0xbe>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	69da      	ldr	r2, [r3, #28]
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8006fe4:	61da      	str	r2, [r3, #28]
  }

  /* Wait until TXE flag is set */
  if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_TXE, SET, Timeout) != HAL_OK)
 8006fe6:	683b      	ldr	r3, [r7, #0]
 8006fe8:	2201      	movs	r2, #1
 8006fea:	2102      	movs	r1, #2
 8006fec:	68f8      	ldr	r0, [r7, #12]
 8006fee:	f000 f983 	bl	80072f8 <I2S_WaitFlagStateUntilTimeout>
 8006ff2:	4603      	mov	r3, r0
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	d04e      	beq.n	8007096 <HAL_I2S_Transmit+0x16e>
  {
    /* Set the error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006ffc:	f043 0201 	orr.w	r2, r3, #1
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2s->State = HAL_I2S_STATE_READY;
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	2201      	movs	r2, #1
 8007008:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    __HAL_UNLOCK(hi2s);
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	2200      	movs	r2, #0
 8007010:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    return HAL_ERROR;
 8007014:	2301      	movs	r3, #1
 8007016:	e070      	b.n	80070fa <HAL_I2S_Transmit+0x1d2>
  }

  while (hi2s->TxXferCount > 0U)
  {
    hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800701c:	881a      	ldrh	r2, [r3, #0]
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	60da      	str	r2, [r3, #12]
    hi2s->pTxBuffPtr++;
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007028:	1c9a      	adds	r2, r3, #2
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2s->TxXferCount--;
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007032:	b29b      	uxth	r3, r3
 8007034:	3b01      	subs	r3, #1
 8007036:	b29a      	uxth	r2, r3
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	855a      	strh	r2, [r3, #42]	@ 0x2a

    /* Wait until TXE flag is set */
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_TXE, SET, Timeout) != HAL_OK)
 800703c:	683b      	ldr	r3, [r7, #0]
 800703e:	2201      	movs	r2, #1
 8007040:	2102      	movs	r1, #2
 8007042:	68f8      	ldr	r0, [r7, #12]
 8007044:	f000 f958 	bl	80072f8 <I2S_WaitFlagStateUntilTimeout>
 8007048:	4603      	mov	r3, r0
 800704a:	2b00      	cmp	r3, #0
 800704c:	d00f      	beq.n	800706e <HAL_I2S_Transmit+0x146>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007052:	f043 0201 	orr.w	r2, r3, #1
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	645a      	str	r2, [r3, #68]	@ 0x44
      hi2s->State = HAL_I2S_STATE_READY;
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	2201      	movs	r2, #1
 800705e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      __HAL_UNLOCK(hi2s);
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	2200      	movs	r2, #0
 8007066:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 800706a:	2301      	movs	r3, #1
 800706c:	e045      	b.n	80070fa <HAL_I2S_Transmit+0x1d2>
    }

    /* Check if an underrun occurs */
    if (__HAL_I2S_GET_FLAG(hi2s, I2S_FLAG_UDR) == SET)
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	689b      	ldr	r3, [r3, #8]
 8007074:	f003 0308 	and.w	r3, r3, #8
 8007078:	2b08      	cmp	r3, #8
 800707a:	d10c      	bne.n	8007096 <HAL_I2S_Transmit+0x16e>
    {
      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 800707c:	2300      	movs	r3, #0
 800707e:	613b      	str	r3, [r7, #16]
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	689b      	ldr	r3, [r3, #8]
 8007086:	613b      	str	r3, [r7, #16]
 8007088:	693b      	ldr	r3, [r7, #16]

      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800708e:	f043 0204 	orr.w	r2, r3, #4
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	645a      	str	r2, [r3, #68]	@ 0x44
  while (hi2s->TxXferCount > 0U)
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800709a:	b29b      	uxth	r3, r3
 800709c:	2b00      	cmp	r3, #0
 800709e:	d1bb      	bne.n	8007018 <HAL_I2S_Transmit+0xf0>
    }
  }

  /* Check if Slave mode is selected */
  if (((tmpreg_cfgr & SPI_I2SCFGR_I2SCFG) == I2S_MODE_SLAVE_TX)
 80070a0:	697b      	ldr	r3, [r7, #20]
 80070a2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	d005      	beq.n	80070b6 <HAL_I2S_Transmit+0x18e>
      || ((tmpreg_cfgr & SPI_I2SCFGR_I2SCFG) == I2S_MODE_SLAVE_RX))
 80070aa:	697b      	ldr	r3, [r7, #20]
 80070ac:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80070b0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80070b4:	d118      	bne.n	80070e8 <HAL_I2S_Transmit+0x1c0>
  {
    /* Wait until Busy flag is reset */
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_BSY, RESET, Timeout) != HAL_OK)
 80070b6:	683b      	ldr	r3, [r7, #0]
 80070b8:	2200      	movs	r2, #0
 80070ba:	2180      	movs	r1, #128	@ 0x80
 80070bc:	68f8      	ldr	r0, [r7, #12]
 80070be:	f000 f91b 	bl	80072f8 <I2S_WaitFlagStateUntilTimeout>
 80070c2:	4603      	mov	r3, r0
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	d00f      	beq.n	80070e8 <HAL_I2S_Transmit+0x1c0>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80070cc:	f043 0201 	orr.w	r2, r3, #1
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	645a      	str	r2, [r3, #68]	@ 0x44
      hi2s->State = HAL_I2S_STATE_READY;
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	2201      	movs	r2, #1
 80070d8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      __HAL_UNLOCK(hi2s);
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	2200      	movs	r2, #0
 80070e0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 80070e4:	2301      	movs	r3, #1
 80070e6:	e008      	b.n	80070fa <HAL_I2S_Transmit+0x1d2>
    }
  }

  hi2s->State = HAL_I2S_STATE_READY;
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	2201      	movs	r2, #1
 80070ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  __HAL_UNLOCK(hi2s);
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	2200      	movs	r2, #0
 80070f4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  return HAL_OK;
 80070f8:	2300      	movs	r3, #0
}
 80070fa:	4618      	mov	r0, r3
 80070fc:	3718      	adds	r7, #24
 80070fe:	46bd      	mov	sp, r7
 8007100:	bd80      	pop	{r7, pc}

08007102 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8007102:	b480      	push	{r7}
 8007104:	b083      	sub	sp, #12
 8007106:	af00      	add	r7, sp, #0
 8007108:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 800710a:	bf00      	nop
 800710c:	370c      	adds	r7, #12
 800710e:	46bd      	mov	sp, r7
 8007110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007114:	4770      	bx	lr

08007116 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8007116:	b480      	push	{r7}
 8007118:	b083      	sub	sp, #12
 800711a:	af00      	add	r7, sp, #0
 800711c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 800711e:	bf00      	nop
 8007120:	370c      	adds	r7, #12
 8007122:	46bd      	mov	sp, r7
 8007124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007128:	4770      	bx	lr

0800712a <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 800712a:	b580      	push	{r7, lr}
 800712c:	b082      	sub	sp, #8
 800712e:	af00      	add	r7, sp, #0
 8007130:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007136:	881a      	ldrh	r2, [r3, #0]
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007142:	1c9a      	adds	r2, r3, #2
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	625a      	str	r2, [r3, #36]	@ 0x24
  hi2s->TxXferCount--;
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800714c:	b29b      	uxth	r3, r3
 800714e:	3b01      	subs	r3, #1
 8007150:	b29a      	uxth	r2, r3
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800715a:	b29b      	uxth	r3, r3
 800715c:	2b00      	cmp	r3, #0
 800715e:	d10e      	bne.n	800717e <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	685a      	ldr	r2, [r3, #4]
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 800716e:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	2201      	movs	r2, #1
 8007174:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8007178:	6878      	ldr	r0, [r7, #4]
 800717a:	f7ff ffc2 	bl	8007102 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 800717e:	bf00      	nop
 8007180:	3708      	adds	r7, #8
 8007182:	46bd      	mov	sp, r7
 8007184:	bd80      	pop	{r7, pc}

08007186 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8007186:	b580      	push	{r7, lr}
 8007188:	b082      	sub	sp, #8
 800718a:	af00      	add	r7, sp, #0
 800718c:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	68da      	ldr	r2, [r3, #12]
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007198:	b292      	uxth	r2, r2
 800719a:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80071a0:	1c9a      	adds	r2, r3, #2
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2s->RxXferCount--;
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80071aa:	b29b      	uxth	r3, r3
 80071ac:	3b01      	subs	r3, #1
 80071ae:	b29a      	uxth	r2, r3
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80071b8:	b29b      	uxth	r3, r3
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	d10e      	bne.n	80071dc <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	685a      	ldr	r2, [r3, #4]
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80071cc:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	2201      	movs	r2, #1
 80071d2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 80071d6:	6878      	ldr	r0, [r7, #4]
 80071d8:	f7fa ffcc 	bl	8002174 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80071dc:	bf00      	nop
 80071de:	3708      	adds	r7, #8
 80071e0:	46bd      	mov	sp, r7
 80071e2:	bd80      	pop	{r7, pc}

080071e4 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80071e4:	b580      	push	{r7, lr}
 80071e6:	b086      	sub	sp, #24
 80071e8:	af00      	add	r7, sp, #0
 80071ea:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	689b      	ldr	r3, [r3, #8]
 80071f2:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80071fa:	b2db      	uxtb	r3, r3
 80071fc:	2b04      	cmp	r3, #4
 80071fe:	d13a      	bne.n	8007276 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8007200:	697b      	ldr	r3, [r7, #20]
 8007202:	f003 0301 	and.w	r3, r3, #1
 8007206:	2b01      	cmp	r3, #1
 8007208:	d109      	bne.n	800721e <I2S_IRQHandler+0x3a>
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	685b      	ldr	r3, [r3, #4]
 8007210:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007214:	2b40      	cmp	r3, #64	@ 0x40
 8007216:	d102      	bne.n	800721e <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8007218:	6878      	ldr	r0, [r7, #4]
 800721a:	f7ff ffb4 	bl	8007186 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 800721e:	697b      	ldr	r3, [r7, #20]
 8007220:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007224:	2b40      	cmp	r3, #64	@ 0x40
 8007226:	d126      	bne.n	8007276 <I2S_IRQHandler+0x92>
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	685b      	ldr	r3, [r3, #4]
 800722e:	f003 0320 	and.w	r3, r3, #32
 8007232:	2b20      	cmp	r3, #32
 8007234:	d11f      	bne.n	8007276 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	685a      	ldr	r2, [r3, #4]
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8007244:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8007246:	2300      	movs	r3, #0
 8007248:	613b      	str	r3, [r7, #16]
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	68db      	ldr	r3, [r3, #12]
 8007250:	613b      	str	r3, [r7, #16]
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	689b      	ldr	r3, [r3, #8]
 8007258:	613b      	str	r3, [r7, #16]
 800725a:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	2201      	movs	r2, #1
 8007260:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007268:	f043 0202 	orr.w	r2, r3, #2
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8007270:	6878      	ldr	r0, [r7, #4]
 8007272:	f7ff ff50 	bl	8007116 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800727c:	b2db      	uxtb	r3, r3
 800727e:	2b03      	cmp	r3, #3
 8007280:	d136      	bne.n	80072f0 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8007282:	697b      	ldr	r3, [r7, #20]
 8007284:	f003 0302 	and.w	r3, r3, #2
 8007288:	2b02      	cmp	r3, #2
 800728a:	d109      	bne.n	80072a0 <I2S_IRQHandler+0xbc>
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	685b      	ldr	r3, [r3, #4]
 8007292:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007296:	2b80      	cmp	r3, #128	@ 0x80
 8007298:	d102      	bne.n	80072a0 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 800729a:	6878      	ldr	r0, [r7, #4]
 800729c:	f7ff ff45 	bl	800712a <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80072a0:	697b      	ldr	r3, [r7, #20]
 80072a2:	f003 0308 	and.w	r3, r3, #8
 80072a6:	2b08      	cmp	r3, #8
 80072a8:	d122      	bne.n	80072f0 <I2S_IRQHandler+0x10c>
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	685b      	ldr	r3, [r3, #4]
 80072b0:	f003 0320 	and.w	r3, r3, #32
 80072b4:	2b20      	cmp	r3, #32
 80072b6:	d11b      	bne.n	80072f0 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	685a      	ldr	r2, [r3, #4]
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80072c6:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80072c8:	2300      	movs	r3, #0
 80072ca:	60fb      	str	r3, [r7, #12]
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	689b      	ldr	r3, [r3, #8]
 80072d2:	60fb      	str	r3, [r7, #12]
 80072d4:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	2201      	movs	r2, #1
 80072da:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80072e2:	f043 0204 	orr.w	r2, r3, #4
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80072ea:	6878      	ldr	r0, [r7, #4]
 80072ec:	f7ff ff13 	bl	8007116 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80072f0:	bf00      	nop
 80072f2:	3718      	adds	r7, #24
 80072f4:	46bd      	mov	sp, r7
 80072f6:	bd80      	pop	{r7, pc}

080072f8 <I2S_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef I2S_WaitFlagStateUntilTimeout(I2S_HandleTypeDef *hi2s, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout)
{
 80072f8:	b580      	push	{r7, lr}
 80072fa:	b086      	sub	sp, #24
 80072fc:	af00      	add	r7, sp, #0
 80072fe:	60f8      	str	r0, [r7, #12]
 8007300:	60b9      	str	r1, [r7, #8]
 8007302:	603b      	str	r3, [r7, #0]
 8007304:	4613      	mov	r3, r2
 8007306:	71fb      	strb	r3, [r7, #7]
  uint32_t tickstart;

  /* Get tick */
  tickstart = HAL_GetTick();
 8007308:	f7fe f93e 	bl	8005588 <HAL_GetTick>
 800730c:	6178      	str	r0, [r7, #20]

  /* Wait until flag is set to status*/
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 800730e:	e018      	b.n	8007342 <I2S_WaitFlagStateUntilTimeout+0x4a>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007310:	683b      	ldr	r3, [r7, #0]
 8007312:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007316:	d014      	beq.n	8007342 <I2S_WaitFlagStateUntilTimeout+0x4a>
    {
      if (((HAL_GetTick() - tickstart) >= Timeout) || (Timeout == 0U))
 8007318:	f7fe f936 	bl	8005588 <HAL_GetTick>
 800731c:	4602      	mov	r2, r0
 800731e:	697b      	ldr	r3, [r7, #20]
 8007320:	1ad3      	subs	r3, r2, r3
 8007322:	683a      	ldr	r2, [r7, #0]
 8007324:	429a      	cmp	r2, r3
 8007326:	d902      	bls.n	800732e <I2S_WaitFlagStateUntilTimeout+0x36>
 8007328:	683b      	ldr	r3, [r7, #0]
 800732a:	2b00      	cmp	r3, #0
 800732c:	d109      	bne.n	8007342 <I2S_WaitFlagStateUntilTimeout+0x4a>
      {
        /* Set the I2S State ready */
        hi2s->State = HAL_I2S_STATE_READY;
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	2201      	movs	r2, #1
 8007332:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2s);
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	2200      	movs	r2, #0
 800733a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_TIMEOUT;
 800733e:	2303      	movs	r3, #3
 8007340:	e00f      	b.n	8007362 <I2S_WaitFlagStateUntilTimeout+0x6a>
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	689a      	ldr	r2, [r3, #8]
 8007348:	68bb      	ldr	r3, [r7, #8]
 800734a:	4013      	ands	r3, r2
 800734c:	68ba      	ldr	r2, [r7, #8]
 800734e:	429a      	cmp	r2, r3
 8007350:	bf0c      	ite	eq
 8007352:	2301      	moveq	r3, #1
 8007354:	2300      	movne	r3, #0
 8007356:	b2db      	uxtb	r3, r3
 8007358:	461a      	mov	r2, r3
 800735a:	79fb      	ldrb	r3, [r7, #7]
 800735c:	429a      	cmp	r2, r3
 800735e:	d1d7      	bne.n	8007310 <I2S_WaitFlagStateUntilTimeout+0x18>
      }
    }
  }
  return HAL_OK;
 8007360:	2300      	movs	r3, #0
}
 8007362:	4618      	mov	r0, r3
 8007364:	3718      	adds	r7, #24
 8007366:	46bd      	mov	sp, r7
 8007368:	bd80      	pop	{r7, pc}
	...

0800736c <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 800736c:	b580      	push	{r7, lr}
 800736e:	b088      	sub	sp, #32
 8007370:	af00      	add	r7, sp, #0
 8007372:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	689b      	ldr	r3, [r3, #8]
 800737a:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	4a92      	ldr	r2, [pc, #584]	@ (80075cc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8007382:	4293      	cmp	r3, r2
 8007384:	d101      	bne.n	800738a <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8007386:	4b92      	ldr	r3, [pc, #584]	@ (80075d0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8007388:	e001      	b.n	800738e <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 800738a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800738e:	689b      	ldr	r3, [r3, #8]
 8007390:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	685b      	ldr	r3, [r3, #4]
 8007398:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	4a8b      	ldr	r2, [pc, #556]	@ (80075cc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80073a0:	4293      	cmp	r3, r2
 80073a2:	d101      	bne.n	80073a8 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 80073a4:	4b8a      	ldr	r3, [pc, #552]	@ (80075d0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80073a6:	e001      	b.n	80073ac <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 80073a8:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80073ac:	685b      	ldr	r3, [r3, #4]
 80073ae:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	685b      	ldr	r3, [r3, #4]
 80073b4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80073b8:	d004      	beq.n	80073c4 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	685b      	ldr	r3, [r3, #4]
 80073be:	2b00      	cmp	r3, #0
 80073c0:	f040 8099 	bne.w	80074f6 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 80073c4:	69fb      	ldr	r3, [r7, #28]
 80073c6:	f003 0302 	and.w	r3, r3, #2
 80073ca:	2b02      	cmp	r3, #2
 80073cc:	d107      	bne.n	80073de <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 80073ce:	697b      	ldr	r3, [r7, #20]
 80073d0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	d002      	beq.n	80073de <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 80073d8:	6878      	ldr	r0, [r7, #4]
 80073da:	f000 f925 	bl	8007628 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 80073de:	69bb      	ldr	r3, [r7, #24]
 80073e0:	f003 0301 	and.w	r3, r3, #1
 80073e4:	2b01      	cmp	r3, #1
 80073e6:	d107      	bne.n	80073f8 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 80073e8:	693b      	ldr	r3, [r7, #16]
 80073ea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	d002      	beq.n	80073f8 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 80073f2:	6878      	ldr	r0, [r7, #4]
 80073f4:	f000 f9c8 	bl	8007788 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80073f8:	69bb      	ldr	r3, [r7, #24]
 80073fa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80073fe:	2b40      	cmp	r3, #64	@ 0x40
 8007400:	d13a      	bne.n	8007478 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8007402:	693b      	ldr	r3, [r7, #16]
 8007404:	f003 0320 	and.w	r3, r3, #32
 8007408:	2b00      	cmp	r3, #0
 800740a:	d035      	beq.n	8007478 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	4a6e      	ldr	r2, [pc, #440]	@ (80075cc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8007412:	4293      	cmp	r3, r2
 8007414:	d101      	bne.n	800741a <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8007416:	4b6e      	ldr	r3, [pc, #440]	@ (80075d0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8007418:	e001      	b.n	800741e <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 800741a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800741e:	685a      	ldr	r2, [r3, #4]
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	4969      	ldr	r1, [pc, #420]	@ (80075cc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8007426:	428b      	cmp	r3, r1
 8007428:	d101      	bne.n	800742e <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 800742a:	4b69      	ldr	r3, [pc, #420]	@ (80075d0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800742c:	e001      	b.n	8007432 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 800742e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8007432:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8007436:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	685a      	ldr	r2, [r3, #4]
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8007446:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8007448:	2300      	movs	r3, #0
 800744a:	60fb      	str	r3, [r7, #12]
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	68db      	ldr	r3, [r3, #12]
 8007452:	60fb      	str	r3, [r7, #12]
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	689b      	ldr	r3, [r3, #8]
 800745a:	60fb      	str	r3, [r7, #12]
 800745c:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	2201      	movs	r2, #1
 8007462:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800746a:	f043 0202 	orr.w	r2, r3, #2
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8007472:	6878      	ldr	r0, [r7, #4]
 8007474:	f7ff fe4f 	bl	8007116 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8007478:	69fb      	ldr	r3, [r7, #28]
 800747a:	f003 0308 	and.w	r3, r3, #8
 800747e:	2b08      	cmp	r3, #8
 8007480:	f040 80c3 	bne.w	800760a <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8007484:	697b      	ldr	r3, [r7, #20]
 8007486:	f003 0320 	and.w	r3, r3, #32
 800748a:	2b00      	cmp	r3, #0
 800748c:	f000 80bd 	beq.w	800760a <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	685a      	ldr	r2, [r3, #4]
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 800749e:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	4a49      	ldr	r2, [pc, #292]	@ (80075cc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80074a6:	4293      	cmp	r3, r2
 80074a8:	d101      	bne.n	80074ae <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 80074aa:	4b49      	ldr	r3, [pc, #292]	@ (80075d0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80074ac:	e001      	b.n	80074b2 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 80074ae:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80074b2:	685a      	ldr	r2, [r3, #4]
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	4944      	ldr	r1, [pc, #272]	@ (80075cc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80074ba:	428b      	cmp	r3, r1
 80074bc:	d101      	bne.n	80074c2 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 80074be:	4b44      	ldr	r3, [pc, #272]	@ (80075d0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80074c0:	e001      	b.n	80074c6 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 80074c2:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80074c6:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80074ca:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80074cc:	2300      	movs	r3, #0
 80074ce:	60bb      	str	r3, [r7, #8]
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	689b      	ldr	r3, [r3, #8]
 80074d6:	60bb      	str	r3, [r7, #8]
 80074d8:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	2201      	movs	r2, #1
 80074de:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80074e6:	f043 0204 	orr.w	r2, r3, #4
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80074ee:	6878      	ldr	r0, [r7, #4]
 80074f0:	f7ff fe11 	bl	8007116 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80074f4:	e089      	b.n	800760a <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 80074f6:	69bb      	ldr	r3, [r7, #24]
 80074f8:	f003 0302 	and.w	r3, r3, #2
 80074fc:	2b02      	cmp	r3, #2
 80074fe:	d107      	bne.n	8007510 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8007500:	693b      	ldr	r3, [r7, #16]
 8007502:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007506:	2b00      	cmp	r3, #0
 8007508:	d002      	beq.n	8007510 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 800750a:	6878      	ldr	r0, [r7, #4]
 800750c:	f000 f8be 	bl	800768c <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8007510:	69fb      	ldr	r3, [r7, #28]
 8007512:	f003 0301 	and.w	r3, r3, #1
 8007516:	2b01      	cmp	r3, #1
 8007518:	d107      	bne.n	800752a <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 800751a:	697b      	ldr	r3, [r7, #20]
 800751c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007520:	2b00      	cmp	r3, #0
 8007522:	d002      	beq.n	800752a <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8007524:	6878      	ldr	r0, [r7, #4]
 8007526:	f000 f8fd 	bl	8007724 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800752a:	69fb      	ldr	r3, [r7, #28]
 800752c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007530:	2b40      	cmp	r3, #64	@ 0x40
 8007532:	d12f      	bne.n	8007594 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8007534:	697b      	ldr	r3, [r7, #20]
 8007536:	f003 0320 	and.w	r3, r3, #32
 800753a:	2b00      	cmp	r3, #0
 800753c:	d02a      	beq.n	8007594 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	685a      	ldr	r2, [r3, #4]
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800754c:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	4a1e      	ldr	r2, [pc, #120]	@ (80075cc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8007554:	4293      	cmp	r3, r2
 8007556:	d101      	bne.n	800755c <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8007558:	4b1d      	ldr	r3, [pc, #116]	@ (80075d0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800755a:	e001      	b.n	8007560 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 800755c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8007560:	685a      	ldr	r2, [r3, #4]
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	4919      	ldr	r1, [pc, #100]	@ (80075cc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8007568:	428b      	cmp	r3, r1
 800756a:	d101      	bne.n	8007570 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 800756c:	4b18      	ldr	r3, [pc, #96]	@ (80075d0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800756e:	e001      	b.n	8007574 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8007570:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8007574:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8007578:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	2201      	movs	r2, #1
 800757e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007586:	f043 0202 	orr.w	r2, r3, #2
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800758e:	6878      	ldr	r0, [r7, #4]
 8007590:	f7ff fdc1 	bl	8007116 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8007594:	69bb      	ldr	r3, [r7, #24]
 8007596:	f003 0308 	and.w	r3, r3, #8
 800759a:	2b08      	cmp	r3, #8
 800759c:	d136      	bne.n	800760c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 800759e:	693b      	ldr	r3, [r7, #16]
 80075a0:	f003 0320 	and.w	r3, r3, #32
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	d031      	beq.n	800760c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	4a07      	ldr	r2, [pc, #28]	@ (80075cc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80075ae:	4293      	cmp	r3, r2
 80075b0:	d101      	bne.n	80075b6 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 80075b2:	4b07      	ldr	r3, [pc, #28]	@ (80075d0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80075b4:	e001      	b.n	80075ba <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 80075b6:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80075ba:	685a      	ldr	r2, [r3, #4]
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	4902      	ldr	r1, [pc, #8]	@ (80075cc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80075c2:	428b      	cmp	r3, r1
 80075c4:	d106      	bne.n	80075d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 80075c6:	4b02      	ldr	r3, [pc, #8]	@ (80075d0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80075c8:	e006      	b.n	80075d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 80075ca:	bf00      	nop
 80075cc:	40003800 	.word	0x40003800
 80075d0:	40003400 	.word	0x40003400
 80075d4:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80075d8:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80075dc:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	685a      	ldr	r2, [r3, #4]
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80075ec:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	2201      	movs	r2, #1
 80075f2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80075fa:	f043 0204 	orr.w	r2, r3, #4
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8007602:	6878      	ldr	r0, [r7, #4]
 8007604:	f7ff fd87 	bl	8007116 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8007608:	e000      	b.n	800760c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800760a:	bf00      	nop
}
 800760c:	bf00      	nop
 800760e:	3720      	adds	r7, #32
 8007610:	46bd      	mov	sp, r7
 8007612:	bd80      	pop	{r7, pc}

08007614 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8007614:	b480      	push	{r7}
 8007616:	b083      	sub	sp, #12
 8007618:	af00      	add	r7, sp, #0
 800761a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 800761c:	bf00      	nop
 800761e:	370c      	adds	r7, #12
 8007620:	46bd      	mov	sp, r7
 8007622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007626:	4770      	bx	lr

08007628 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8007628:	b580      	push	{r7, lr}
 800762a:	b082      	sub	sp, #8
 800762c:	af00      	add	r7, sp, #0
 800762e:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007634:	1c99      	adds	r1, r3, #2
 8007636:	687a      	ldr	r2, [r7, #4]
 8007638:	6251      	str	r1, [r2, #36]	@ 0x24
 800763a:	881a      	ldrh	r2, [r3, #0]
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007646:	b29b      	uxth	r3, r3
 8007648:	3b01      	subs	r3, #1
 800764a:	b29a      	uxth	r2, r3
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007654:	b29b      	uxth	r3, r3
 8007656:	2b00      	cmp	r3, #0
 8007658:	d113      	bne.n	8007682 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	685a      	ldr	r2, [r3, #4]
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8007668:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800766e:	b29b      	uxth	r3, r3
 8007670:	2b00      	cmp	r3, #0
 8007672:	d106      	bne.n	8007682 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	2201      	movs	r2, #1
 8007678:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800767c:	6878      	ldr	r0, [r7, #4]
 800767e:	f7ff ffc9 	bl	8007614 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8007682:	bf00      	nop
 8007684:	3708      	adds	r7, #8
 8007686:	46bd      	mov	sp, r7
 8007688:	bd80      	pop	{r7, pc}
	...

0800768c <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 800768c:	b580      	push	{r7, lr}
 800768e:	b082      	sub	sp, #8
 8007690:	af00      	add	r7, sp, #0
 8007692:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007698:	1c99      	adds	r1, r3, #2
 800769a:	687a      	ldr	r2, [r7, #4]
 800769c:	6251      	str	r1, [r2, #36]	@ 0x24
 800769e:	8819      	ldrh	r1, [r3, #0]
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	4a1d      	ldr	r2, [pc, #116]	@ (800771c <I2SEx_TxISR_I2SExt+0x90>)
 80076a6:	4293      	cmp	r3, r2
 80076a8:	d101      	bne.n	80076ae <I2SEx_TxISR_I2SExt+0x22>
 80076aa:	4b1d      	ldr	r3, [pc, #116]	@ (8007720 <I2SEx_TxISR_I2SExt+0x94>)
 80076ac:	e001      	b.n	80076b2 <I2SEx_TxISR_I2SExt+0x26>
 80076ae:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80076b2:	460a      	mov	r2, r1
 80076b4:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80076ba:	b29b      	uxth	r3, r3
 80076bc:	3b01      	subs	r3, #1
 80076be:	b29a      	uxth	r2, r3
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80076c8:	b29b      	uxth	r3, r3
 80076ca:	2b00      	cmp	r3, #0
 80076cc:	d121      	bne.n	8007712 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	4a12      	ldr	r2, [pc, #72]	@ (800771c <I2SEx_TxISR_I2SExt+0x90>)
 80076d4:	4293      	cmp	r3, r2
 80076d6:	d101      	bne.n	80076dc <I2SEx_TxISR_I2SExt+0x50>
 80076d8:	4b11      	ldr	r3, [pc, #68]	@ (8007720 <I2SEx_TxISR_I2SExt+0x94>)
 80076da:	e001      	b.n	80076e0 <I2SEx_TxISR_I2SExt+0x54>
 80076dc:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80076e0:	685a      	ldr	r2, [r3, #4]
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	490d      	ldr	r1, [pc, #52]	@ (800771c <I2SEx_TxISR_I2SExt+0x90>)
 80076e8:	428b      	cmp	r3, r1
 80076ea:	d101      	bne.n	80076f0 <I2SEx_TxISR_I2SExt+0x64>
 80076ec:	4b0c      	ldr	r3, [pc, #48]	@ (8007720 <I2SEx_TxISR_I2SExt+0x94>)
 80076ee:	e001      	b.n	80076f4 <I2SEx_TxISR_I2SExt+0x68>
 80076f0:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80076f4:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80076f8:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80076fe:	b29b      	uxth	r3, r3
 8007700:	2b00      	cmp	r3, #0
 8007702:	d106      	bne.n	8007712 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	2201      	movs	r2, #1
 8007708:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800770c:	6878      	ldr	r0, [r7, #4]
 800770e:	f7ff ff81 	bl	8007614 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8007712:	bf00      	nop
 8007714:	3708      	adds	r7, #8
 8007716:	46bd      	mov	sp, r7
 8007718:	bd80      	pop	{r7, pc}
 800771a:	bf00      	nop
 800771c:	40003800 	.word	0x40003800
 8007720:	40003400 	.word	0x40003400

08007724 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8007724:	b580      	push	{r7, lr}
 8007726:	b082      	sub	sp, #8
 8007728:	af00      	add	r7, sp, #0
 800772a:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	68d8      	ldr	r0, [r3, #12]
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007736:	1c99      	adds	r1, r3, #2
 8007738:	687a      	ldr	r2, [r7, #4]
 800773a:	62d1      	str	r1, [r2, #44]	@ 0x2c
 800773c:	b282      	uxth	r2, r0
 800773e:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8007744:	b29b      	uxth	r3, r3
 8007746:	3b01      	subs	r3, #1
 8007748:	b29a      	uxth	r2, r3
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8007752:	b29b      	uxth	r3, r3
 8007754:	2b00      	cmp	r3, #0
 8007756:	d113      	bne.n	8007780 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	685a      	ldr	r2, [r3, #4]
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8007766:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800776c:	b29b      	uxth	r3, r3
 800776e:	2b00      	cmp	r3, #0
 8007770:	d106      	bne.n	8007780 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	2201      	movs	r2, #1
 8007776:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800777a:	6878      	ldr	r0, [r7, #4]
 800777c:	f7ff ff4a 	bl	8007614 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8007780:	bf00      	nop
 8007782:	3708      	adds	r7, #8
 8007784:	46bd      	mov	sp, r7
 8007786:	bd80      	pop	{r7, pc}

08007788 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8007788:	b580      	push	{r7, lr}
 800778a:	b082      	sub	sp, #8
 800778c:	af00      	add	r7, sp, #0
 800778e:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	4a20      	ldr	r2, [pc, #128]	@ (8007818 <I2SEx_RxISR_I2SExt+0x90>)
 8007796:	4293      	cmp	r3, r2
 8007798:	d101      	bne.n	800779e <I2SEx_RxISR_I2SExt+0x16>
 800779a:	4b20      	ldr	r3, [pc, #128]	@ (800781c <I2SEx_RxISR_I2SExt+0x94>)
 800779c:	e001      	b.n	80077a2 <I2SEx_RxISR_I2SExt+0x1a>
 800779e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80077a2:	68d8      	ldr	r0, [r3, #12]
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80077a8:	1c99      	adds	r1, r3, #2
 80077aa:	687a      	ldr	r2, [r7, #4]
 80077ac:	62d1      	str	r1, [r2, #44]	@ 0x2c
 80077ae:	b282      	uxth	r2, r0
 80077b0:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80077b6:	b29b      	uxth	r3, r3
 80077b8:	3b01      	subs	r3, #1
 80077ba:	b29a      	uxth	r2, r3
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80077c4:	b29b      	uxth	r3, r3
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	d121      	bne.n	800780e <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	4a12      	ldr	r2, [pc, #72]	@ (8007818 <I2SEx_RxISR_I2SExt+0x90>)
 80077d0:	4293      	cmp	r3, r2
 80077d2:	d101      	bne.n	80077d8 <I2SEx_RxISR_I2SExt+0x50>
 80077d4:	4b11      	ldr	r3, [pc, #68]	@ (800781c <I2SEx_RxISR_I2SExt+0x94>)
 80077d6:	e001      	b.n	80077dc <I2SEx_RxISR_I2SExt+0x54>
 80077d8:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80077dc:	685a      	ldr	r2, [r3, #4]
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	490d      	ldr	r1, [pc, #52]	@ (8007818 <I2SEx_RxISR_I2SExt+0x90>)
 80077e4:	428b      	cmp	r3, r1
 80077e6:	d101      	bne.n	80077ec <I2SEx_RxISR_I2SExt+0x64>
 80077e8:	4b0c      	ldr	r3, [pc, #48]	@ (800781c <I2SEx_RxISR_I2SExt+0x94>)
 80077ea:	e001      	b.n	80077f0 <I2SEx_RxISR_I2SExt+0x68>
 80077ec:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80077f0:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80077f4:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80077fa:	b29b      	uxth	r3, r3
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	d106      	bne.n	800780e <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	2201      	movs	r2, #1
 8007804:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8007808:	6878      	ldr	r0, [r7, #4]
 800780a:	f7ff ff03 	bl	8007614 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800780e:	bf00      	nop
 8007810:	3708      	adds	r7, #8
 8007812:	46bd      	mov	sp, r7
 8007814:	bd80      	pop	{r7, pc}
 8007816:	bf00      	nop
 8007818:	40003800 	.word	0x40003800
 800781c:	40003400 	.word	0x40003400

08007820 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007820:	b580      	push	{r7, lr}
 8007822:	b086      	sub	sp, #24
 8007824:	af00      	add	r7, sp, #0
 8007826:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	2b00      	cmp	r3, #0
 800782c:	d101      	bne.n	8007832 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800782e:	2301      	movs	r3, #1
 8007830:	e267      	b.n	8007d02 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	f003 0301 	and.w	r3, r3, #1
 800783a:	2b00      	cmp	r3, #0
 800783c:	d075      	beq.n	800792a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800783e:	4b88      	ldr	r3, [pc, #544]	@ (8007a60 <HAL_RCC_OscConfig+0x240>)
 8007840:	689b      	ldr	r3, [r3, #8]
 8007842:	f003 030c 	and.w	r3, r3, #12
 8007846:	2b04      	cmp	r3, #4
 8007848:	d00c      	beq.n	8007864 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800784a:	4b85      	ldr	r3, [pc, #532]	@ (8007a60 <HAL_RCC_OscConfig+0x240>)
 800784c:	689b      	ldr	r3, [r3, #8]
 800784e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8007852:	2b08      	cmp	r3, #8
 8007854:	d112      	bne.n	800787c <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007856:	4b82      	ldr	r3, [pc, #520]	@ (8007a60 <HAL_RCC_OscConfig+0x240>)
 8007858:	685b      	ldr	r3, [r3, #4]
 800785a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800785e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007862:	d10b      	bne.n	800787c <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007864:	4b7e      	ldr	r3, [pc, #504]	@ (8007a60 <HAL_RCC_OscConfig+0x240>)
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800786c:	2b00      	cmp	r3, #0
 800786e:	d05b      	beq.n	8007928 <HAL_RCC_OscConfig+0x108>
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	685b      	ldr	r3, [r3, #4]
 8007874:	2b00      	cmp	r3, #0
 8007876:	d157      	bne.n	8007928 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8007878:	2301      	movs	r3, #1
 800787a:	e242      	b.n	8007d02 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	685b      	ldr	r3, [r3, #4]
 8007880:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007884:	d106      	bne.n	8007894 <HAL_RCC_OscConfig+0x74>
 8007886:	4b76      	ldr	r3, [pc, #472]	@ (8007a60 <HAL_RCC_OscConfig+0x240>)
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	4a75      	ldr	r2, [pc, #468]	@ (8007a60 <HAL_RCC_OscConfig+0x240>)
 800788c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007890:	6013      	str	r3, [r2, #0]
 8007892:	e01d      	b.n	80078d0 <HAL_RCC_OscConfig+0xb0>
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	685b      	ldr	r3, [r3, #4]
 8007898:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800789c:	d10c      	bne.n	80078b8 <HAL_RCC_OscConfig+0x98>
 800789e:	4b70      	ldr	r3, [pc, #448]	@ (8007a60 <HAL_RCC_OscConfig+0x240>)
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	4a6f      	ldr	r2, [pc, #444]	@ (8007a60 <HAL_RCC_OscConfig+0x240>)
 80078a4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80078a8:	6013      	str	r3, [r2, #0]
 80078aa:	4b6d      	ldr	r3, [pc, #436]	@ (8007a60 <HAL_RCC_OscConfig+0x240>)
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	4a6c      	ldr	r2, [pc, #432]	@ (8007a60 <HAL_RCC_OscConfig+0x240>)
 80078b0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80078b4:	6013      	str	r3, [r2, #0]
 80078b6:	e00b      	b.n	80078d0 <HAL_RCC_OscConfig+0xb0>
 80078b8:	4b69      	ldr	r3, [pc, #420]	@ (8007a60 <HAL_RCC_OscConfig+0x240>)
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	4a68      	ldr	r2, [pc, #416]	@ (8007a60 <HAL_RCC_OscConfig+0x240>)
 80078be:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80078c2:	6013      	str	r3, [r2, #0]
 80078c4:	4b66      	ldr	r3, [pc, #408]	@ (8007a60 <HAL_RCC_OscConfig+0x240>)
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	4a65      	ldr	r2, [pc, #404]	@ (8007a60 <HAL_RCC_OscConfig+0x240>)
 80078ca:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80078ce:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	685b      	ldr	r3, [r3, #4]
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	d013      	beq.n	8007900 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80078d8:	f7fd fe56 	bl	8005588 <HAL_GetTick>
 80078dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80078de:	e008      	b.n	80078f2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80078e0:	f7fd fe52 	bl	8005588 <HAL_GetTick>
 80078e4:	4602      	mov	r2, r0
 80078e6:	693b      	ldr	r3, [r7, #16]
 80078e8:	1ad3      	subs	r3, r2, r3
 80078ea:	2b64      	cmp	r3, #100	@ 0x64
 80078ec:	d901      	bls.n	80078f2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80078ee:	2303      	movs	r3, #3
 80078f0:	e207      	b.n	8007d02 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80078f2:	4b5b      	ldr	r3, [pc, #364]	@ (8007a60 <HAL_RCC_OscConfig+0x240>)
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	d0f0      	beq.n	80078e0 <HAL_RCC_OscConfig+0xc0>
 80078fe:	e014      	b.n	800792a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007900:	f7fd fe42 	bl	8005588 <HAL_GetTick>
 8007904:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007906:	e008      	b.n	800791a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007908:	f7fd fe3e 	bl	8005588 <HAL_GetTick>
 800790c:	4602      	mov	r2, r0
 800790e:	693b      	ldr	r3, [r7, #16]
 8007910:	1ad3      	subs	r3, r2, r3
 8007912:	2b64      	cmp	r3, #100	@ 0x64
 8007914:	d901      	bls.n	800791a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8007916:	2303      	movs	r3, #3
 8007918:	e1f3      	b.n	8007d02 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800791a:	4b51      	ldr	r3, [pc, #324]	@ (8007a60 <HAL_RCC_OscConfig+0x240>)
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007922:	2b00      	cmp	r3, #0
 8007924:	d1f0      	bne.n	8007908 <HAL_RCC_OscConfig+0xe8>
 8007926:	e000      	b.n	800792a <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007928:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	f003 0302 	and.w	r3, r3, #2
 8007932:	2b00      	cmp	r3, #0
 8007934:	d063      	beq.n	80079fe <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8007936:	4b4a      	ldr	r3, [pc, #296]	@ (8007a60 <HAL_RCC_OscConfig+0x240>)
 8007938:	689b      	ldr	r3, [r3, #8]
 800793a:	f003 030c 	and.w	r3, r3, #12
 800793e:	2b00      	cmp	r3, #0
 8007940:	d00b      	beq.n	800795a <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007942:	4b47      	ldr	r3, [pc, #284]	@ (8007a60 <HAL_RCC_OscConfig+0x240>)
 8007944:	689b      	ldr	r3, [r3, #8]
 8007946:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800794a:	2b08      	cmp	r3, #8
 800794c:	d11c      	bne.n	8007988 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800794e:	4b44      	ldr	r3, [pc, #272]	@ (8007a60 <HAL_RCC_OscConfig+0x240>)
 8007950:	685b      	ldr	r3, [r3, #4]
 8007952:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007956:	2b00      	cmp	r3, #0
 8007958:	d116      	bne.n	8007988 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800795a:	4b41      	ldr	r3, [pc, #260]	@ (8007a60 <HAL_RCC_OscConfig+0x240>)
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	f003 0302 	and.w	r3, r3, #2
 8007962:	2b00      	cmp	r3, #0
 8007964:	d005      	beq.n	8007972 <HAL_RCC_OscConfig+0x152>
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	68db      	ldr	r3, [r3, #12]
 800796a:	2b01      	cmp	r3, #1
 800796c:	d001      	beq.n	8007972 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800796e:	2301      	movs	r3, #1
 8007970:	e1c7      	b.n	8007d02 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007972:	4b3b      	ldr	r3, [pc, #236]	@ (8007a60 <HAL_RCC_OscConfig+0x240>)
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	691b      	ldr	r3, [r3, #16]
 800797e:	00db      	lsls	r3, r3, #3
 8007980:	4937      	ldr	r1, [pc, #220]	@ (8007a60 <HAL_RCC_OscConfig+0x240>)
 8007982:	4313      	orrs	r3, r2
 8007984:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007986:	e03a      	b.n	80079fe <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	68db      	ldr	r3, [r3, #12]
 800798c:	2b00      	cmp	r3, #0
 800798e:	d020      	beq.n	80079d2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007990:	4b34      	ldr	r3, [pc, #208]	@ (8007a64 <HAL_RCC_OscConfig+0x244>)
 8007992:	2201      	movs	r2, #1
 8007994:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007996:	f7fd fdf7 	bl	8005588 <HAL_GetTick>
 800799a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800799c:	e008      	b.n	80079b0 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800799e:	f7fd fdf3 	bl	8005588 <HAL_GetTick>
 80079a2:	4602      	mov	r2, r0
 80079a4:	693b      	ldr	r3, [r7, #16]
 80079a6:	1ad3      	subs	r3, r2, r3
 80079a8:	2b02      	cmp	r3, #2
 80079aa:	d901      	bls.n	80079b0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80079ac:	2303      	movs	r3, #3
 80079ae:	e1a8      	b.n	8007d02 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80079b0:	4b2b      	ldr	r3, [pc, #172]	@ (8007a60 <HAL_RCC_OscConfig+0x240>)
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	f003 0302 	and.w	r3, r3, #2
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	d0f0      	beq.n	800799e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80079bc:	4b28      	ldr	r3, [pc, #160]	@ (8007a60 <HAL_RCC_OscConfig+0x240>)
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	691b      	ldr	r3, [r3, #16]
 80079c8:	00db      	lsls	r3, r3, #3
 80079ca:	4925      	ldr	r1, [pc, #148]	@ (8007a60 <HAL_RCC_OscConfig+0x240>)
 80079cc:	4313      	orrs	r3, r2
 80079ce:	600b      	str	r3, [r1, #0]
 80079d0:	e015      	b.n	80079fe <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80079d2:	4b24      	ldr	r3, [pc, #144]	@ (8007a64 <HAL_RCC_OscConfig+0x244>)
 80079d4:	2200      	movs	r2, #0
 80079d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80079d8:	f7fd fdd6 	bl	8005588 <HAL_GetTick>
 80079dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80079de:	e008      	b.n	80079f2 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80079e0:	f7fd fdd2 	bl	8005588 <HAL_GetTick>
 80079e4:	4602      	mov	r2, r0
 80079e6:	693b      	ldr	r3, [r7, #16]
 80079e8:	1ad3      	subs	r3, r2, r3
 80079ea:	2b02      	cmp	r3, #2
 80079ec:	d901      	bls.n	80079f2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80079ee:	2303      	movs	r3, #3
 80079f0:	e187      	b.n	8007d02 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80079f2:	4b1b      	ldr	r3, [pc, #108]	@ (8007a60 <HAL_RCC_OscConfig+0x240>)
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	f003 0302 	and.w	r3, r3, #2
 80079fa:	2b00      	cmp	r3, #0
 80079fc:	d1f0      	bne.n	80079e0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	f003 0308 	and.w	r3, r3, #8
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	d036      	beq.n	8007a78 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	695b      	ldr	r3, [r3, #20]
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	d016      	beq.n	8007a40 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007a12:	4b15      	ldr	r3, [pc, #84]	@ (8007a68 <HAL_RCC_OscConfig+0x248>)
 8007a14:	2201      	movs	r2, #1
 8007a16:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007a18:	f7fd fdb6 	bl	8005588 <HAL_GetTick>
 8007a1c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007a1e:	e008      	b.n	8007a32 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007a20:	f7fd fdb2 	bl	8005588 <HAL_GetTick>
 8007a24:	4602      	mov	r2, r0
 8007a26:	693b      	ldr	r3, [r7, #16]
 8007a28:	1ad3      	subs	r3, r2, r3
 8007a2a:	2b02      	cmp	r3, #2
 8007a2c:	d901      	bls.n	8007a32 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8007a2e:	2303      	movs	r3, #3
 8007a30:	e167      	b.n	8007d02 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007a32:	4b0b      	ldr	r3, [pc, #44]	@ (8007a60 <HAL_RCC_OscConfig+0x240>)
 8007a34:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007a36:	f003 0302 	and.w	r3, r3, #2
 8007a3a:	2b00      	cmp	r3, #0
 8007a3c:	d0f0      	beq.n	8007a20 <HAL_RCC_OscConfig+0x200>
 8007a3e:	e01b      	b.n	8007a78 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007a40:	4b09      	ldr	r3, [pc, #36]	@ (8007a68 <HAL_RCC_OscConfig+0x248>)
 8007a42:	2200      	movs	r2, #0
 8007a44:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007a46:	f7fd fd9f 	bl	8005588 <HAL_GetTick>
 8007a4a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007a4c:	e00e      	b.n	8007a6c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007a4e:	f7fd fd9b 	bl	8005588 <HAL_GetTick>
 8007a52:	4602      	mov	r2, r0
 8007a54:	693b      	ldr	r3, [r7, #16]
 8007a56:	1ad3      	subs	r3, r2, r3
 8007a58:	2b02      	cmp	r3, #2
 8007a5a:	d907      	bls.n	8007a6c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8007a5c:	2303      	movs	r3, #3
 8007a5e:	e150      	b.n	8007d02 <HAL_RCC_OscConfig+0x4e2>
 8007a60:	40023800 	.word	0x40023800
 8007a64:	42470000 	.word	0x42470000
 8007a68:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007a6c:	4b88      	ldr	r3, [pc, #544]	@ (8007c90 <HAL_RCC_OscConfig+0x470>)
 8007a6e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007a70:	f003 0302 	and.w	r3, r3, #2
 8007a74:	2b00      	cmp	r3, #0
 8007a76:	d1ea      	bne.n	8007a4e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	f003 0304 	and.w	r3, r3, #4
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	f000 8097 	beq.w	8007bb4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007a86:	2300      	movs	r3, #0
 8007a88:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007a8a:	4b81      	ldr	r3, [pc, #516]	@ (8007c90 <HAL_RCC_OscConfig+0x470>)
 8007a8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007a8e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	d10f      	bne.n	8007ab6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007a96:	2300      	movs	r3, #0
 8007a98:	60bb      	str	r3, [r7, #8]
 8007a9a:	4b7d      	ldr	r3, [pc, #500]	@ (8007c90 <HAL_RCC_OscConfig+0x470>)
 8007a9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007a9e:	4a7c      	ldr	r2, [pc, #496]	@ (8007c90 <HAL_RCC_OscConfig+0x470>)
 8007aa0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007aa4:	6413      	str	r3, [r2, #64]	@ 0x40
 8007aa6:	4b7a      	ldr	r3, [pc, #488]	@ (8007c90 <HAL_RCC_OscConfig+0x470>)
 8007aa8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007aaa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007aae:	60bb      	str	r3, [r7, #8]
 8007ab0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007ab2:	2301      	movs	r3, #1
 8007ab4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007ab6:	4b77      	ldr	r3, [pc, #476]	@ (8007c94 <HAL_RCC_OscConfig+0x474>)
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	d118      	bne.n	8007af4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007ac2:	4b74      	ldr	r3, [pc, #464]	@ (8007c94 <HAL_RCC_OscConfig+0x474>)
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	4a73      	ldr	r2, [pc, #460]	@ (8007c94 <HAL_RCC_OscConfig+0x474>)
 8007ac8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007acc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007ace:	f7fd fd5b 	bl	8005588 <HAL_GetTick>
 8007ad2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007ad4:	e008      	b.n	8007ae8 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007ad6:	f7fd fd57 	bl	8005588 <HAL_GetTick>
 8007ada:	4602      	mov	r2, r0
 8007adc:	693b      	ldr	r3, [r7, #16]
 8007ade:	1ad3      	subs	r3, r2, r3
 8007ae0:	2b02      	cmp	r3, #2
 8007ae2:	d901      	bls.n	8007ae8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8007ae4:	2303      	movs	r3, #3
 8007ae6:	e10c      	b.n	8007d02 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007ae8:	4b6a      	ldr	r3, [pc, #424]	@ (8007c94 <HAL_RCC_OscConfig+0x474>)
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	d0f0      	beq.n	8007ad6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	689b      	ldr	r3, [r3, #8]
 8007af8:	2b01      	cmp	r3, #1
 8007afa:	d106      	bne.n	8007b0a <HAL_RCC_OscConfig+0x2ea>
 8007afc:	4b64      	ldr	r3, [pc, #400]	@ (8007c90 <HAL_RCC_OscConfig+0x470>)
 8007afe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007b00:	4a63      	ldr	r2, [pc, #396]	@ (8007c90 <HAL_RCC_OscConfig+0x470>)
 8007b02:	f043 0301 	orr.w	r3, r3, #1
 8007b06:	6713      	str	r3, [r2, #112]	@ 0x70
 8007b08:	e01c      	b.n	8007b44 <HAL_RCC_OscConfig+0x324>
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	689b      	ldr	r3, [r3, #8]
 8007b0e:	2b05      	cmp	r3, #5
 8007b10:	d10c      	bne.n	8007b2c <HAL_RCC_OscConfig+0x30c>
 8007b12:	4b5f      	ldr	r3, [pc, #380]	@ (8007c90 <HAL_RCC_OscConfig+0x470>)
 8007b14:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007b16:	4a5e      	ldr	r2, [pc, #376]	@ (8007c90 <HAL_RCC_OscConfig+0x470>)
 8007b18:	f043 0304 	orr.w	r3, r3, #4
 8007b1c:	6713      	str	r3, [r2, #112]	@ 0x70
 8007b1e:	4b5c      	ldr	r3, [pc, #368]	@ (8007c90 <HAL_RCC_OscConfig+0x470>)
 8007b20:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007b22:	4a5b      	ldr	r2, [pc, #364]	@ (8007c90 <HAL_RCC_OscConfig+0x470>)
 8007b24:	f043 0301 	orr.w	r3, r3, #1
 8007b28:	6713      	str	r3, [r2, #112]	@ 0x70
 8007b2a:	e00b      	b.n	8007b44 <HAL_RCC_OscConfig+0x324>
 8007b2c:	4b58      	ldr	r3, [pc, #352]	@ (8007c90 <HAL_RCC_OscConfig+0x470>)
 8007b2e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007b30:	4a57      	ldr	r2, [pc, #348]	@ (8007c90 <HAL_RCC_OscConfig+0x470>)
 8007b32:	f023 0301 	bic.w	r3, r3, #1
 8007b36:	6713      	str	r3, [r2, #112]	@ 0x70
 8007b38:	4b55      	ldr	r3, [pc, #340]	@ (8007c90 <HAL_RCC_OscConfig+0x470>)
 8007b3a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007b3c:	4a54      	ldr	r2, [pc, #336]	@ (8007c90 <HAL_RCC_OscConfig+0x470>)
 8007b3e:	f023 0304 	bic.w	r3, r3, #4
 8007b42:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	689b      	ldr	r3, [r3, #8]
 8007b48:	2b00      	cmp	r3, #0
 8007b4a:	d015      	beq.n	8007b78 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007b4c:	f7fd fd1c 	bl	8005588 <HAL_GetTick>
 8007b50:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007b52:	e00a      	b.n	8007b6a <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007b54:	f7fd fd18 	bl	8005588 <HAL_GetTick>
 8007b58:	4602      	mov	r2, r0
 8007b5a:	693b      	ldr	r3, [r7, #16]
 8007b5c:	1ad3      	subs	r3, r2, r3
 8007b5e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007b62:	4293      	cmp	r3, r2
 8007b64:	d901      	bls.n	8007b6a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8007b66:	2303      	movs	r3, #3
 8007b68:	e0cb      	b.n	8007d02 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007b6a:	4b49      	ldr	r3, [pc, #292]	@ (8007c90 <HAL_RCC_OscConfig+0x470>)
 8007b6c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007b6e:	f003 0302 	and.w	r3, r3, #2
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	d0ee      	beq.n	8007b54 <HAL_RCC_OscConfig+0x334>
 8007b76:	e014      	b.n	8007ba2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007b78:	f7fd fd06 	bl	8005588 <HAL_GetTick>
 8007b7c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007b7e:	e00a      	b.n	8007b96 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007b80:	f7fd fd02 	bl	8005588 <HAL_GetTick>
 8007b84:	4602      	mov	r2, r0
 8007b86:	693b      	ldr	r3, [r7, #16]
 8007b88:	1ad3      	subs	r3, r2, r3
 8007b8a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007b8e:	4293      	cmp	r3, r2
 8007b90:	d901      	bls.n	8007b96 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8007b92:	2303      	movs	r3, #3
 8007b94:	e0b5      	b.n	8007d02 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007b96:	4b3e      	ldr	r3, [pc, #248]	@ (8007c90 <HAL_RCC_OscConfig+0x470>)
 8007b98:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007b9a:	f003 0302 	and.w	r3, r3, #2
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	d1ee      	bne.n	8007b80 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8007ba2:	7dfb      	ldrb	r3, [r7, #23]
 8007ba4:	2b01      	cmp	r3, #1
 8007ba6:	d105      	bne.n	8007bb4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007ba8:	4b39      	ldr	r3, [pc, #228]	@ (8007c90 <HAL_RCC_OscConfig+0x470>)
 8007baa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007bac:	4a38      	ldr	r2, [pc, #224]	@ (8007c90 <HAL_RCC_OscConfig+0x470>)
 8007bae:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007bb2:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	699b      	ldr	r3, [r3, #24]
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	f000 80a1 	beq.w	8007d00 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8007bbe:	4b34      	ldr	r3, [pc, #208]	@ (8007c90 <HAL_RCC_OscConfig+0x470>)
 8007bc0:	689b      	ldr	r3, [r3, #8]
 8007bc2:	f003 030c 	and.w	r3, r3, #12
 8007bc6:	2b08      	cmp	r3, #8
 8007bc8:	d05c      	beq.n	8007c84 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	699b      	ldr	r3, [r3, #24]
 8007bce:	2b02      	cmp	r3, #2
 8007bd0:	d141      	bne.n	8007c56 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007bd2:	4b31      	ldr	r3, [pc, #196]	@ (8007c98 <HAL_RCC_OscConfig+0x478>)
 8007bd4:	2200      	movs	r2, #0
 8007bd6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007bd8:	f7fd fcd6 	bl	8005588 <HAL_GetTick>
 8007bdc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007bde:	e008      	b.n	8007bf2 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007be0:	f7fd fcd2 	bl	8005588 <HAL_GetTick>
 8007be4:	4602      	mov	r2, r0
 8007be6:	693b      	ldr	r3, [r7, #16]
 8007be8:	1ad3      	subs	r3, r2, r3
 8007bea:	2b02      	cmp	r3, #2
 8007bec:	d901      	bls.n	8007bf2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8007bee:	2303      	movs	r3, #3
 8007bf0:	e087      	b.n	8007d02 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007bf2:	4b27      	ldr	r3, [pc, #156]	@ (8007c90 <HAL_RCC_OscConfig+0x470>)
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007bfa:	2b00      	cmp	r3, #0
 8007bfc:	d1f0      	bne.n	8007be0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	69da      	ldr	r2, [r3, #28]
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	6a1b      	ldr	r3, [r3, #32]
 8007c06:	431a      	orrs	r2, r3
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007c0c:	019b      	lsls	r3, r3, #6
 8007c0e:	431a      	orrs	r2, r3
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007c14:	085b      	lsrs	r3, r3, #1
 8007c16:	3b01      	subs	r3, #1
 8007c18:	041b      	lsls	r3, r3, #16
 8007c1a:	431a      	orrs	r2, r3
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c20:	061b      	lsls	r3, r3, #24
 8007c22:	491b      	ldr	r1, [pc, #108]	@ (8007c90 <HAL_RCC_OscConfig+0x470>)
 8007c24:	4313      	orrs	r3, r2
 8007c26:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007c28:	4b1b      	ldr	r3, [pc, #108]	@ (8007c98 <HAL_RCC_OscConfig+0x478>)
 8007c2a:	2201      	movs	r2, #1
 8007c2c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007c2e:	f7fd fcab 	bl	8005588 <HAL_GetTick>
 8007c32:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007c34:	e008      	b.n	8007c48 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007c36:	f7fd fca7 	bl	8005588 <HAL_GetTick>
 8007c3a:	4602      	mov	r2, r0
 8007c3c:	693b      	ldr	r3, [r7, #16]
 8007c3e:	1ad3      	subs	r3, r2, r3
 8007c40:	2b02      	cmp	r3, #2
 8007c42:	d901      	bls.n	8007c48 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8007c44:	2303      	movs	r3, #3
 8007c46:	e05c      	b.n	8007d02 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007c48:	4b11      	ldr	r3, [pc, #68]	@ (8007c90 <HAL_RCC_OscConfig+0x470>)
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007c50:	2b00      	cmp	r3, #0
 8007c52:	d0f0      	beq.n	8007c36 <HAL_RCC_OscConfig+0x416>
 8007c54:	e054      	b.n	8007d00 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007c56:	4b10      	ldr	r3, [pc, #64]	@ (8007c98 <HAL_RCC_OscConfig+0x478>)
 8007c58:	2200      	movs	r2, #0
 8007c5a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007c5c:	f7fd fc94 	bl	8005588 <HAL_GetTick>
 8007c60:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007c62:	e008      	b.n	8007c76 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007c64:	f7fd fc90 	bl	8005588 <HAL_GetTick>
 8007c68:	4602      	mov	r2, r0
 8007c6a:	693b      	ldr	r3, [r7, #16]
 8007c6c:	1ad3      	subs	r3, r2, r3
 8007c6e:	2b02      	cmp	r3, #2
 8007c70:	d901      	bls.n	8007c76 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8007c72:	2303      	movs	r3, #3
 8007c74:	e045      	b.n	8007d02 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007c76:	4b06      	ldr	r3, [pc, #24]	@ (8007c90 <HAL_RCC_OscConfig+0x470>)
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007c7e:	2b00      	cmp	r3, #0
 8007c80:	d1f0      	bne.n	8007c64 <HAL_RCC_OscConfig+0x444>
 8007c82:	e03d      	b.n	8007d00 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	699b      	ldr	r3, [r3, #24]
 8007c88:	2b01      	cmp	r3, #1
 8007c8a:	d107      	bne.n	8007c9c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8007c8c:	2301      	movs	r3, #1
 8007c8e:	e038      	b.n	8007d02 <HAL_RCC_OscConfig+0x4e2>
 8007c90:	40023800 	.word	0x40023800
 8007c94:	40007000 	.word	0x40007000
 8007c98:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8007c9c:	4b1b      	ldr	r3, [pc, #108]	@ (8007d0c <HAL_RCC_OscConfig+0x4ec>)
 8007c9e:	685b      	ldr	r3, [r3, #4]
 8007ca0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	699b      	ldr	r3, [r3, #24]
 8007ca6:	2b01      	cmp	r3, #1
 8007ca8:	d028      	beq.n	8007cfc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007caa:	68fb      	ldr	r3, [r7, #12]
 8007cac:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007cb4:	429a      	cmp	r2, r3
 8007cb6:	d121      	bne.n	8007cfc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007cb8:	68fb      	ldr	r3, [r7, #12]
 8007cba:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007cc2:	429a      	cmp	r2, r3
 8007cc4:	d11a      	bne.n	8007cfc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007cc6:	68fa      	ldr	r2, [r7, #12]
 8007cc8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8007ccc:	4013      	ands	r3, r2
 8007cce:	687a      	ldr	r2, [r7, #4]
 8007cd0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8007cd2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007cd4:	4293      	cmp	r3, r2
 8007cd6:	d111      	bne.n	8007cfc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007cd8:	68fb      	ldr	r3, [r7, #12]
 8007cda:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007ce2:	085b      	lsrs	r3, r3, #1
 8007ce4:	3b01      	subs	r3, #1
 8007ce6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007ce8:	429a      	cmp	r2, r3
 8007cea:	d107      	bne.n	8007cfc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8007cec:	68fb      	ldr	r3, [r7, #12]
 8007cee:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007cf6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007cf8:	429a      	cmp	r2, r3
 8007cfa:	d001      	beq.n	8007d00 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8007cfc:	2301      	movs	r3, #1
 8007cfe:	e000      	b.n	8007d02 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8007d00:	2300      	movs	r3, #0
}
 8007d02:	4618      	mov	r0, r3
 8007d04:	3718      	adds	r7, #24
 8007d06:	46bd      	mov	sp, r7
 8007d08:	bd80      	pop	{r7, pc}
 8007d0a:	bf00      	nop
 8007d0c:	40023800 	.word	0x40023800

08007d10 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007d10:	b580      	push	{r7, lr}
 8007d12:	b084      	sub	sp, #16
 8007d14:	af00      	add	r7, sp, #0
 8007d16:	6078      	str	r0, [r7, #4]
 8007d18:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	2b00      	cmp	r3, #0
 8007d1e:	d101      	bne.n	8007d24 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007d20:	2301      	movs	r3, #1
 8007d22:	e0cc      	b.n	8007ebe <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007d24:	4b68      	ldr	r3, [pc, #416]	@ (8007ec8 <HAL_RCC_ClockConfig+0x1b8>)
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	f003 0307 	and.w	r3, r3, #7
 8007d2c:	683a      	ldr	r2, [r7, #0]
 8007d2e:	429a      	cmp	r2, r3
 8007d30:	d90c      	bls.n	8007d4c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007d32:	4b65      	ldr	r3, [pc, #404]	@ (8007ec8 <HAL_RCC_ClockConfig+0x1b8>)
 8007d34:	683a      	ldr	r2, [r7, #0]
 8007d36:	b2d2      	uxtb	r2, r2
 8007d38:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007d3a:	4b63      	ldr	r3, [pc, #396]	@ (8007ec8 <HAL_RCC_ClockConfig+0x1b8>)
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	f003 0307 	and.w	r3, r3, #7
 8007d42:	683a      	ldr	r2, [r7, #0]
 8007d44:	429a      	cmp	r2, r3
 8007d46:	d001      	beq.n	8007d4c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8007d48:	2301      	movs	r3, #1
 8007d4a:	e0b8      	b.n	8007ebe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	f003 0302 	and.w	r3, r3, #2
 8007d54:	2b00      	cmp	r3, #0
 8007d56:	d020      	beq.n	8007d9a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	f003 0304 	and.w	r3, r3, #4
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	d005      	beq.n	8007d70 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007d64:	4b59      	ldr	r3, [pc, #356]	@ (8007ecc <HAL_RCC_ClockConfig+0x1bc>)
 8007d66:	689b      	ldr	r3, [r3, #8]
 8007d68:	4a58      	ldr	r2, [pc, #352]	@ (8007ecc <HAL_RCC_ClockConfig+0x1bc>)
 8007d6a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8007d6e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	f003 0308 	and.w	r3, r3, #8
 8007d78:	2b00      	cmp	r3, #0
 8007d7a:	d005      	beq.n	8007d88 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007d7c:	4b53      	ldr	r3, [pc, #332]	@ (8007ecc <HAL_RCC_ClockConfig+0x1bc>)
 8007d7e:	689b      	ldr	r3, [r3, #8]
 8007d80:	4a52      	ldr	r2, [pc, #328]	@ (8007ecc <HAL_RCC_ClockConfig+0x1bc>)
 8007d82:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8007d86:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007d88:	4b50      	ldr	r3, [pc, #320]	@ (8007ecc <HAL_RCC_ClockConfig+0x1bc>)
 8007d8a:	689b      	ldr	r3, [r3, #8]
 8007d8c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	689b      	ldr	r3, [r3, #8]
 8007d94:	494d      	ldr	r1, [pc, #308]	@ (8007ecc <HAL_RCC_ClockConfig+0x1bc>)
 8007d96:	4313      	orrs	r3, r2
 8007d98:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	f003 0301 	and.w	r3, r3, #1
 8007da2:	2b00      	cmp	r3, #0
 8007da4:	d044      	beq.n	8007e30 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	685b      	ldr	r3, [r3, #4]
 8007daa:	2b01      	cmp	r3, #1
 8007dac:	d107      	bne.n	8007dbe <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007dae:	4b47      	ldr	r3, [pc, #284]	@ (8007ecc <HAL_RCC_ClockConfig+0x1bc>)
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007db6:	2b00      	cmp	r3, #0
 8007db8:	d119      	bne.n	8007dee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007dba:	2301      	movs	r3, #1
 8007dbc:	e07f      	b.n	8007ebe <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	685b      	ldr	r3, [r3, #4]
 8007dc2:	2b02      	cmp	r3, #2
 8007dc4:	d003      	beq.n	8007dce <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007dca:	2b03      	cmp	r3, #3
 8007dcc:	d107      	bne.n	8007dde <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007dce:	4b3f      	ldr	r3, [pc, #252]	@ (8007ecc <HAL_RCC_ClockConfig+0x1bc>)
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007dd6:	2b00      	cmp	r3, #0
 8007dd8:	d109      	bne.n	8007dee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007dda:	2301      	movs	r3, #1
 8007ddc:	e06f      	b.n	8007ebe <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007dde:	4b3b      	ldr	r3, [pc, #236]	@ (8007ecc <HAL_RCC_ClockConfig+0x1bc>)
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	f003 0302 	and.w	r3, r3, #2
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	d101      	bne.n	8007dee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007dea:	2301      	movs	r3, #1
 8007dec:	e067      	b.n	8007ebe <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007dee:	4b37      	ldr	r3, [pc, #220]	@ (8007ecc <HAL_RCC_ClockConfig+0x1bc>)
 8007df0:	689b      	ldr	r3, [r3, #8]
 8007df2:	f023 0203 	bic.w	r2, r3, #3
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	685b      	ldr	r3, [r3, #4]
 8007dfa:	4934      	ldr	r1, [pc, #208]	@ (8007ecc <HAL_RCC_ClockConfig+0x1bc>)
 8007dfc:	4313      	orrs	r3, r2
 8007dfe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007e00:	f7fd fbc2 	bl	8005588 <HAL_GetTick>
 8007e04:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007e06:	e00a      	b.n	8007e1e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007e08:	f7fd fbbe 	bl	8005588 <HAL_GetTick>
 8007e0c:	4602      	mov	r2, r0
 8007e0e:	68fb      	ldr	r3, [r7, #12]
 8007e10:	1ad3      	subs	r3, r2, r3
 8007e12:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007e16:	4293      	cmp	r3, r2
 8007e18:	d901      	bls.n	8007e1e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8007e1a:	2303      	movs	r3, #3
 8007e1c:	e04f      	b.n	8007ebe <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007e1e:	4b2b      	ldr	r3, [pc, #172]	@ (8007ecc <HAL_RCC_ClockConfig+0x1bc>)
 8007e20:	689b      	ldr	r3, [r3, #8]
 8007e22:	f003 020c 	and.w	r2, r3, #12
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	685b      	ldr	r3, [r3, #4]
 8007e2a:	009b      	lsls	r3, r3, #2
 8007e2c:	429a      	cmp	r2, r3
 8007e2e:	d1eb      	bne.n	8007e08 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007e30:	4b25      	ldr	r3, [pc, #148]	@ (8007ec8 <HAL_RCC_ClockConfig+0x1b8>)
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	f003 0307 	and.w	r3, r3, #7
 8007e38:	683a      	ldr	r2, [r7, #0]
 8007e3a:	429a      	cmp	r2, r3
 8007e3c:	d20c      	bcs.n	8007e58 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007e3e:	4b22      	ldr	r3, [pc, #136]	@ (8007ec8 <HAL_RCC_ClockConfig+0x1b8>)
 8007e40:	683a      	ldr	r2, [r7, #0]
 8007e42:	b2d2      	uxtb	r2, r2
 8007e44:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007e46:	4b20      	ldr	r3, [pc, #128]	@ (8007ec8 <HAL_RCC_ClockConfig+0x1b8>)
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	f003 0307 	and.w	r3, r3, #7
 8007e4e:	683a      	ldr	r2, [r7, #0]
 8007e50:	429a      	cmp	r2, r3
 8007e52:	d001      	beq.n	8007e58 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8007e54:	2301      	movs	r3, #1
 8007e56:	e032      	b.n	8007ebe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	f003 0304 	and.w	r3, r3, #4
 8007e60:	2b00      	cmp	r3, #0
 8007e62:	d008      	beq.n	8007e76 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007e64:	4b19      	ldr	r3, [pc, #100]	@ (8007ecc <HAL_RCC_ClockConfig+0x1bc>)
 8007e66:	689b      	ldr	r3, [r3, #8]
 8007e68:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	68db      	ldr	r3, [r3, #12]
 8007e70:	4916      	ldr	r1, [pc, #88]	@ (8007ecc <HAL_RCC_ClockConfig+0x1bc>)
 8007e72:	4313      	orrs	r3, r2
 8007e74:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	f003 0308 	and.w	r3, r3, #8
 8007e7e:	2b00      	cmp	r3, #0
 8007e80:	d009      	beq.n	8007e96 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007e82:	4b12      	ldr	r3, [pc, #72]	@ (8007ecc <HAL_RCC_ClockConfig+0x1bc>)
 8007e84:	689b      	ldr	r3, [r3, #8]
 8007e86:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	691b      	ldr	r3, [r3, #16]
 8007e8e:	00db      	lsls	r3, r3, #3
 8007e90:	490e      	ldr	r1, [pc, #56]	@ (8007ecc <HAL_RCC_ClockConfig+0x1bc>)
 8007e92:	4313      	orrs	r3, r2
 8007e94:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8007e96:	f000 f821 	bl	8007edc <HAL_RCC_GetSysClockFreq>
 8007e9a:	4602      	mov	r2, r0
 8007e9c:	4b0b      	ldr	r3, [pc, #44]	@ (8007ecc <HAL_RCC_ClockConfig+0x1bc>)
 8007e9e:	689b      	ldr	r3, [r3, #8]
 8007ea0:	091b      	lsrs	r3, r3, #4
 8007ea2:	f003 030f 	and.w	r3, r3, #15
 8007ea6:	490a      	ldr	r1, [pc, #40]	@ (8007ed0 <HAL_RCC_ClockConfig+0x1c0>)
 8007ea8:	5ccb      	ldrb	r3, [r1, r3]
 8007eaa:	fa22 f303 	lsr.w	r3, r2, r3
 8007eae:	4a09      	ldr	r2, [pc, #36]	@ (8007ed4 <HAL_RCC_ClockConfig+0x1c4>)
 8007eb0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8007eb2:	4b09      	ldr	r3, [pc, #36]	@ (8007ed8 <HAL_RCC_ClockConfig+0x1c8>)
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	4618      	mov	r0, r3
 8007eb8:	f7fd fb22 	bl	8005500 <HAL_InitTick>

  return HAL_OK;
 8007ebc:	2300      	movs	r3, #0
}
 8007ebe:	4618      	mov	r0, r3
 8007ec0:	3710      	adds	r7, #16
 8007ec2:	46bd      	mov	sp, r7
 8007ec4:	bd80      	pop	{r7, pc}
 8007ec6:	bf00      	nop
 8007ec8:	40023c00 	.word	0x40023c00
 8007ecc:	40023800 	.word	0x40023800
 8007ed0:	08010ca8 	.word	0x08010ca8
 8007ed4:	2000d10c 	.word	0x2000d10c
 8007ed8:	2000d110 	.word	0x2000d110

08007edc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007edc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007ee0:	b094      	sub	sp, #80	@ 0x50
 8007ee2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8007ee4:	2300      	movs	r3, #0
 8007ee6:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8007ee8:	2300      	movs	r3, #0
 8007eea:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8007eec:	2300      	movs	r3, #0
 8007eee:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8007ef0:	2300      	movs	r3, #0
 8007ef2:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007ef4:	4b79      	ldr	r3, [pc, #484]	@ (80080dc <HAL_RCC_GetSysClockFreq+0x200>)
 8007ef6:	689b      	ldr	r3, [r3, #8]
 8007ef8:	f003 030c 	and.w	r3, r3, #12
 8007efc:	2b08      	cmp	r3, #8
 8007efe:	d00d      	beq.n	8007f1c <HAL_RCC_GetSysClockFreq+0x40>
 8007f00:	2b08      	cmp	r3, #8
 8007f02:	f200 80e1 	bhi.w	80080c8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8007f06:	2b00      	cmp	r3, #0
 8007f08:	d002      	beq.n	8007f10 <HAL_RCC_GetSysClockFreq+0x34>
 8007f0a:	2b04      	cmp	r3, #4
 8007f0c:	d003      	beq.n	8007f16 <HAL_RCC_GetSysClockFreq+0x3a>
 8007f0e:	e0db      	b.n	80080c8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007f10:	4b73      	ldr	r3, [pc, #460]	@ (80080e0 <HAL_RCC_GetSysClockFreq+0x204>)
 8007f12:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8007f14:	e0db      	b.n	80080ce <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8007f16:	4b73      	ldr	r3, [pc, #460]	@ (80080e4 <HAL_RCC_GetSysClockFreq+0x208>)
 8007f18:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8007f1a:	e0d8      	b.n	80080ce <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007f1c:	4b6f      	ldr	r3, [pc, #444]	@ (80080dc <HAL_RCC_GetSysClockFreq+0x200>)
 8007f1e:	685b      	ldr	r3, [r3, #4]
 8007f20:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007f24:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8007f26:	4b6d      	ldr	r3, [pc, #436]	@ (80080dc <HAL_RCC_GetSysClockFreq+0x200>)
 8007f28:	685b      	ldr	r3, [r3, #4]
 8007f2a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007f2e:	2b00      	cmp	r3, #0
 8007f30:	d063      	beq.n	8007ffa <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007f32:	4b6a      	ldr	r3, [pc, #424]	@ (80080dc <HAL_RCC_GetSysClockFreq+0x200>)
 8007f34:	685b      	ldr	r3, [r3, #4]
 8007f36:	099b      	lsrs	r3, r3, #6
 8007f38:	2200      	movs	r2, #0
 8007f3a:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007f3c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8007f3e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f40:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007f44:	633b      	str	r3, [r7, #48]	@ 0x30
 8007f46:	2300      	movs	r3, #0
 8007f48:	637b      	str	r3, [r7, #52]	@ 0x34
 8007f4a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8007f4e:	4622      	mov	r2, r4
 8007f50:	462b      	mov	r3, r5
 8007f52:	f04f 0000 	mov.w	r0, #0
 8007f56:	f04f 0100 	mov.w	r1, #0
 8007f5a:	0159      	lsls	r1, r3, #5
 8007f5c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007f60:	0150      	lsls	r0, r2, #5
 8007f62:	4602      	mov	r2, r0
 8007f64:	460b      	mov	r3, r1
 8007f66:	4621      	mov	r1, r4
 8007f68:	1a51      	subs	r1, r2, r1
 8007f6a:	6139      	str	r1, [r7, #16]
 8007f6c:	4629      	mov	r1, r5
 8007f6e:	eb63 0301 	sbc.w	r3, r3, r1
 8007f72:	617b      	str	r3, [r7, #20]
 8007f74:	f04f 0200 	mov.w	r2, #0
 8007f78:	f04f 0300 	mov.w	r3, #0
 8007f7c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007f80:	4659      	mov	r1, fp
 8007f82:	018b      	lsls	r3, r1, #6
 8007f84:	4651      	mov	r1, sl
 8007f86:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8007f8a:	4651      	mov	r1, sl
 8007f8c:	018a      	lsls	r2, r1, #6
 8007f8e:	4651      	mov	r1, sl
 8007f90:	ebb2 0801 	subs.w	r8, r2, r1
 8007f94:	4659      	mov	r1, fp
 8007f96:	eb63 0901 	sbc.w	r9, r3, r1
 8007f9a:	f04f 0200 	mov.w	r2, #0
 8007f9e:	f04f 0300 	mov.w	r3, #0
 8007fa2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007fa6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007faa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007fae:	4690      	mov	r8, r2
 8007fb0:	4699      	mov	r9, r3
 8007fb2:	4623      	mov	r3, r4
 8007fb4:	eb18 0303 	adds.w	r3, r8, r3
 8007fb8:	60bb      	str	r3, [r7, #8]
 8007fba:	462b      	mov	r3, r5
 8007fbc:	eb49 0303 	adc.w	r3, r9, r3
 8007fc0:	60fb      	str	r3, [r7, #12]
 8007fc2:	f04f 0200 	mov.w	r2, #0
 8007fc6:	f04f 0300 	mov.w	r3, #0
 8007fca:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8007fce:	4629      	mov	r1, r5
 8007fd0:	024b      	lsls	r3, r1, #9
 8007fd2:	4621      	mov	r1, r4
 8007fd4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8007fd8:	4621      	mov	r1, r4
 8007fda:	024a      	lsls	r2, r1, #9
 8007fdc:	4610      	mov	r0, r2
 8007fde:	4619      	mov	r1, r3
 8007fe0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007fe2:	2200      	movs	r2, #0
 8007fe4:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007fe6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007fe8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8007fec:	f7f8 fe54 	bl	8000c98 <__aeabi_uldivmod>
 8007ff0:	4602      	mov	r2, r0
 8007ff2:	460b      	mov	r3, r1
 8007ff4:	4613      	mov	r3, r2
 8007ff6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007ff8:	e058      	b.n	80080ac <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007ffa:	4b38      	ldr	r3, [pc, #224]	@ (80080dc <HAL_RCC_GetSysClockFreq+0x200>)
 8007ffc:	685b      	ldr	r3, [r3, #4]
 8007ffe:	099b      	lsrs	r3, r3, #6
 8008000:	2200      	movs	r2, #0
 8008002:	4618      	mov	r0, r3
 8008004:	4611      	mov	r1, r2
 8008006:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800800a:	623b      	str	r3, [r7, #32]
 800800c:	2300      	movs	r3, #0
 800800e:	627b      	str	r3, [r7, #36]	@ 0x24
 8008010:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8008014:	4642      	mov	r2, r8
 8008016:	464b      	mov	r3, r9
 8008018:	f04f 0000 	mov.w	r0, #0
 800801c:	f04f 0100 	mov.w	r1, #0
 8008020:	0159      	lsls	r1, r3, #5
 8008022:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8008026:	0150      	lsls	r0, r2, #5
 8008028:	4602      	mov	r2, r0
 800802a:	460b      	mov	r3, r1
 800802c:	4641      	mov	r1, r8
 800802e:	ebb2 0a01 	subs.w	sl, r2, r1
 8008032:	4649      	mov	r1, r9
 8008034:	eb63 0b01 	sbc.w	fp, r3, r1
 8008038:	f04f 0200 	mov.w	r2, #0
 800803c:	f04f 0300 	mov.w	r3, #0
 8008040:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8008044:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8008048:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800804c:	ebb2 040a 	subs.w	r4, r2, sl
 8008050:	eb63 050b 	sbc.w	r5, r3, fp
 8008054:	f04f 0200 	mov.w	r2, #0
 8008058:	f04f 0300 	mov.w	r3, #0
 800805c:	00eb      	lsls	r3, r5, #3
 800805e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008062:	00e2      	lsls	r2, r4, #3
 8008064:	4614      	mov	r4, r2
 8008066:	461d      	mov	r5, r3
 8008068:	4643      	mov	r3, r8
 800806a:	18e3      	adds	r3, r4, r3
 800806c:	603b      	str	r3, [r7, #0]
 800806e:	464b      	mov	r3, r9
 8008070:	eb45 0303 	adc.w	r3, r5, r3
 8008074:	607b      	str	r3, [r7, #4]
 8008076:	f04f 0200 	mov.w	r2, #0
 800807a:	f04f 0300 	mov.w	r3, #0
 800807e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8008082:	4629      	mov	r1, r5
 8008084:	028b      	lsls	r3, r1, #10
 8008086:	4621      	mov	r1, r4
 8008088:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800808c:	4621      	mov	r1, r4
 800808e:	028a      	lsls	r2, r1, #10
 8008090:	4610      	mov	r0, r2
 8008092:	4619      	mov	r1, r3
 8008094:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008096:	2200      	movs	r2, #0
 8008098:	61bb      	str	r3, [r7, #24]
 800809a:	61fa      	str	r2, [r7, #28]
 800809c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80080a0:	f7f8 fdfa 	bl	8000c98 <__aeabi_uldivmod>
 80080a4:	4602      	mov	r2, r0
 80080a6:	460b      	mov	r3, r1
 80080a8:	4613      	mov	r3, r2
 80080aa:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80080ac:	4b0b      	ldr	r3, [pc, #44]	@ (80080dc <HAL_RCC_GetSysClockFreq+0x200>)
 80080ae:	685b      	ldr	r3, [r3, #4]
 80080b0:	0c1b      	lsrs	r3, r3, #16
 80080b2:	f003 0303 	and.w	r3, r3, #3
 80080b6:	3301      	adds	r3, #1
 80080b8:	005b      	lsls	r3, r3, #1
 80080ba:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 80080bc:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80080be:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80080c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80080c4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80080c6:	e002      	b.n	80080ce <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80080c8:	4b05      	ldr	r3, [pc, #20]	@ (80080e0 <HAL_RCC_GetSysClockFreq+0x204>)
 80080ca:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80080cc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80080ce:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80080d0:	4618      	mov	r0, r3
 80080d2:	3750      	adds	r7, #80	@ 0x50
 80080d4:	46bd      	mov	sp, r7
 80080d6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80080da:	bf00      	nop
 80080dc:	40023800 	.word	0x40023800
 80080e0:	00f42400 	.word	0x00f42400
 80080e4:	007a1200 	.word	0x007a1200

080080e8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80080e8:	b480      	push	{r7}
 80080ea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80080ec:	4b03      	ldr	r3, [pc, #12]	@ (80080fc <HAL_RCC_GetHCLKFreq+0x14>)
 80080ee:	681b      	ldr	r3, [r3, #0]
}
 80080f0:	4618      	mov	r0, r3
 80080f2:	46bd      	mov	sp, r7
 80080f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080f8:	4770      	bx	lr
 80080fa:	bf00      	nop
 80080fc:	2000d10c 	.word	0x2000d10c

08008100 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008100:	b580      	push	{r7, lr}
 8008102:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8008104:	f7ff fff0 	bl	80080e8 <HAL_RCC_GetHCLKFreq>
 8008108:	4602      	mov	r2, r0
 800810a:	4b05      	ldr	r3, [pc, #20]	@ (8008120 <HAL_RCC_GetPCLK1Freq+0x20>)
 800810c:	689b      	ldr	r3, [r3, #8]
 800810e:	0a9b      	lsrs	r3, r3, #10
 8008110:	f003 0307 	and.w	r3, r3, #7
 8008114:	4903      	ldr	r1, [pc, #12]	@ (8008124 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008116:	5ccb      	ldrb	r3, [r1, r3]
 8008118:	fa22 f303 	lsr.w	r3, r2, r3
}
 800811c:	4618      	mov	r0, r3
 800811e:	bd80      	pop	{r7, pc}
 8008120:	40023800 	.word	0x40023800
 8008124:	08010cb8 	.word	0x08010cb8

08008128 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008128:	b580      	push	{r7, lr}
 800812a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800812c:	f7ff ffdc 	bl	80080e8 <HAL_RCC_GetHCLKFreq>
 8008130:	4602      	mov	r2, r0
 8008132:	4b05      	ldr	r3, [pc, #20]	@ (8008148 <HAL_RCC_GetPCLK2Freq+0x20>)
 8008134:	689b      	ldr	r3, [r3, #8]
 8008136:	0b5b      	lsrs	r3, r3, #13
 8008138:	f003 0307 	and.w	r3, r3, #7
 800813c:	4903      	ldr	r1, [pc, #12]	@ (800814c <HAL_RCC_GetPCLK2Freq+0x24>)
 800813e:	5ccb      	ldrb	r3, [r1, r3]
 8008140:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008144:	4618      	mov	r0, r3
 8008146:	bd80      	pop	{r7, pc}
 8008148:	40023800 	.word	0x40023800
 800814c:	08010cb8 	.word	0x08010cb8

08008150 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008150:	b580      	push	{r7, lr}
 8008152:	b086      	sub	sp, #24
 8008154:	af00      	add	r7, sp, #0
 8008156:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8008158:	2300      	movs	r3, #0
 800815a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 800815c:	2300      	movs	r3, #0
 800815e:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	f003 0301 	and.w	r3, r3, #1
 8008168:	2b00      	cmp	r3, #0
 800816a:	d105      	bne.n	8008178 <HAL_RCCEx_PeriphCLKConfig+0x28>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	f003 0304 	and.w	r3, r3, #4
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8008174:	2b00      	cmp	r3, #0
 8008176:	d038      	beq.n	80081ea <HAL_RCCEx_PeriphCLKConfig+0x9a>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8008178:	4b68      	ldr	r3, [pc, #416]	@ (800831c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800817a:	2200      	movs	r2, #0
 800817c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800817e:	f7fd fa03 	bl	8005588 <HAL_GetTick>
 8008182:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8008184:	e008      	b.n	8008198 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8008186:	f7fd f9ff 	bl	8005588 <HAL_GetTick>
 800818a:	4602      	mov	r2, r0
 800818c:	697b      	ldr	r3, [r7, #20]
 800818e:	1ad3      	subs	r3, r2, r3
 8008190:	2b02      	cmp	r3, #2
 8008192:	d901      	bls.n	8008198 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008194:	2303      	movs	r3, #3
 8008196:	e0bd      	b.n	8008314 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8008198:	4b61      	ldr	r3, [pc, #388]	@ (8008320 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80081a0:	2b00      	cmp	r3, #0
 80081a2:	d1f0      	bne.n	8008186 <HAL_RCCEx_PeriphCLKConfig+0x36>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN,
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	685a      	ldr	r2, [r3, #4]
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	689b      	ldr	r3, [r3, #8]
 80081ac:	019b      	lsls	r3, r3, #6
 80081ae:	431a      	orrs	r2, r3
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	68db      	ldr	r3, [r3, #12]
 80081b4:	071b      	lsls	r3, r3, #28
 80081b6:	495a      	ldr	r1, [pc, #360]	@ (8008320 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80081b8:	4313      	orrs	r3, r2
 80081ba:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80081be:	4b57      	ldr	r3, [pc, #348]	@ (800831c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80081c0:	2201      	movs	r2, #1
 80081c2:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80081c4:	f7fd f9e0 	bl	8005588 <HAL_GetTick>
 80081c8:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80081ca:	e008      	b.n	80081de <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80081cc:	f7fd f9dc 	bl	8005588 <HAL_GetTick>
 80081d0:	4602      	mov	r2, r0
 80081d2:	697b      	ldr	r3, [r7, #20]
 80081d4:	1ad3      	subs	r3, r2, r3
 80081d6:	2b02      	cmp	r3, #2
 80081d8:	d901      	bls.n	80081de <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80081da:	2303      	movs	r3, #3
 80081dc:	e09a      	b.n	8008314 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80081de:	4b50      	ldr	r3, [pc, #320]	@ (8008320 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80081e6:	2b00      	cmp	r3, #0
 80081e8:	d0f0      	beq.n	80081cc <HAL_RCCEx_PeriphCLKConfig+0x7c>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	f003 0302 	and.w	r3, r3, #2
 80081f2:	2b00      	cmp	r3, #0
 80081f4:	f000 8083 	beq.w	80082fe <HAL_RCCEx_PeriphCLKConfig+0x1ae>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80081f8:	2300      	movs	r3, #0
 80081fa:	60fb      	str	r3, [r7, #12]
 80081fc:	4b48      	ldr	r3, [pc, #288]	@ (8008320 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80081fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008200:	4a47      	ldr	r2, [pc, #284]	@ (8008320 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008202:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008206:	6413      	str	r3, [r2, #64]	@ 0x40
 8008208:	4b45      	ldr	r3, [pc, #276]	@ (8008320 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800820a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800820c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008210:	60fb      	str	r3, [r7, #12]
 8008212:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8008214:	4b43      	ldr	r3, [pc, #268]	@ (8008324 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	4a42      	ldr	r2, [pc, #264]	@ (8008324 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800821a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800821e:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8008220:	f7fd f9b2 	bl	8005588 <HAL_GetTick>
 8008224:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8008226:	e008      	b.n	800823a <HAL_RCCEx_PeriphCLKConfig+0xea>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008228:	f7fd f9ae 	bl	8005588 <HAL_GetTick>
 800822c:	4602      	mov	r2, r0
 800822e:	697b      	ldr	r3, [r7, #20]
 8008230:	1ad3      	subs	r3, r2, r3
 8008232:	2b02      	cmp	r3, #2
 8008234:	d901      	bls.n	800823a <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        return HAL_TIMEOUT;
 8008236:	2303      	movs	r3, #3
 8008238:	e06c      	b.n	8008314 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 800823a:	4b3a      	ldr	r3, [pc, #232]	@ (8008324 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008242:	2b00      	cmp	r3, #0
 8008244:	d0f0      	beq.n	8008228 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8008246:	4b36      	ldr	r3, [pc, #216]	@ (8008320 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008248:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800824a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800824e:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8008250:	693b      	ldr	r3, [r7, #16]
 8008252:	2b00      	cmp	r3, #0
 8008254:	d02f      	beq.n	80082b6 <HAL_RCCEx_PeriphCLKConfig+0x166>
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	691b      	ldr	r3, [r3, #16]
 800825a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800825e:	693a      	ldr	r2, [r7, #16]
 8008260:	429a      	cmp	r2, r3
 8008262:	d028      	beq.n	80082b6 <HAL_RCCEx_PeriphCLKConfig+0x166>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8008264:	4b2e      	ldr	r3, [pc, #184]	@ (8008320 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008266:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008268:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800826c:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800826e:	4b2e      	ldr	r3, [pc, #184]	@ (8008328 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8008270:	2201      	movs	r2, #1
 8008272:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8008274:	4b2c      	ldr	r3, [pc, #176]	@ (8008328 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8008276:	2200      	movs	r2, #0
 8008278:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800827a:	4a29      	ldr	r2, [pc, #164]	@ (8008320 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800827c:	693b      	ldr	r3, [r7, #16]
 800827e:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8008280:	4b27      	ldr	r3, [pc, #156]	@ (8008320 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008282:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008284:	f003 0301 	and.w	r3, r3, #1
 8008288:	2b01      	cmp	r3, #1
 800828a:	d114      	bne.n	80082b6 <HAL_RCCEx_PeriphCLKConfig+0x166>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800828c:	f7fd f97c 	bl	8005588 <HAL_GetTick>
 8008290:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008292:	e00a      	b.n	80082aa <HAL_RCCEx_PeriphCLKConfig+0x15a>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008294:	f7fd f978 	bl	8005588 <HAL_GetTick>
 8008298:	4602      	mov	r2, r0
 800829a:	697b      	ldr	r3, [r7, #20]
 800829c:	1ad3      	subs	r3, r2, r3
 800829e:	f241 3288 	movw	r2, #5000	@ 0x1388
 80082a2:	4293      	cmp	r3, r2
 80082a4:	d901      	bls.n	80082aa <HAL_RCCEx_PeriphCLKConfig+0x15a>
          {
            return HAL_TIMEOUT;
 80082a6:	2303      	movs	r3, #3
 80082a8:	e034      	b.n	8008314 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80082aa:	4b1d      	ldr	r3, [pc, #116]	@ (8008320 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80082ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80082ae:	f003 0302 	and.w	r3, r3, #2
 80082b2:	2b00      	cmp	r3, #0
 80082b4:	d0ee      	beq.n	8008294 <HAL_RCCEx_PeriphCLKConfig+0x144>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	691b      	ldr	r3, [r3, #16]
 80082ba:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80082be:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80082c2:	d10d      	bne.n	80082e0 <HAL_RCCEx_PeriphCLKConfig+0x190>
 80082c4:	4b16      	ldr	r3, [pc, #88]	@ (8008320 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80082c6:	689b      	ldr	r3, [r3, #8]
 80082c8:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	691b      	ldr	r3, [r3, #16]
 80082d0:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 80082d4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80082d8:	4911      	ldr	r1, [pc, #68]	@ (8008320 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80082da:	4313      	orrs	r3, r2
 80082dc:	608b      	str	r3, [r1, #8]
 80082de:	e005      	b.n	80082ec <HAL_RCCEx_PeriphCLKConfig+0x19c>
 80082e0:	4b0f      	ldr	r3, [pc, #60]	@ (8008320 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80082e2:	689b      	ldr	r3, [r3, #8]
 80082e4:	4a0e      	ldr	r2, [pc, #56]	@ (8008320 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80082e6:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 80082ea:	6093      	str	r3, [r2, #8]
 80082ec:	4b0c      	ldr	r3, [pc, #48]	@ (8008320 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80082ee:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	691b      	ldr	r3, [r3, #16]
 80082f4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80082f8:	4909      	ldr	r1, [pc, #36]	@ (8008320 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80082fa:	4313      	orrs	r3, r2
 80082fc:	670b      	str	r3, [r1, #112]	@ 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	681b      	ldr	r3, [r3, #0]
 8008302:	f003 0308 	and.w	r3, r3, #8
 8008306:	2b00      	cmp	r3, #0
 8008308:	d003      	beq.n	8008312 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	7d1a      	ldrb	r2, [r3, #20]
 800830e:	4b07      	ldr	r3, [pc, #28]	@ (800832c <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 8008310:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8008312:	2300      	movs	r3, #0
}
 8008314:	4618      	mov	r0, r3
 8008316:	3718      	adds	r7, #24
 8008318:	46bd      	mov	sp, r7
 800831a:	bd80      	pop	{r7, pc}
 800831c:	42470068 	.word	0x42470068
 8008320:	40023800 	.word	0x40023800
 8008324:	40007000 	.word	0x40007000
 8008328:	42470e40 	.word	0x42470e40
 800832c:	424711e0 	.word	0x424711e0

08008330 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8008330:	b480      	push	{r7}
 8008332:	b087      	sub	sp, #28
 8008334:	af00      	add	r7, sp, #0
 8008336:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8008338:	2300      	movs	r3, #0
 800833a:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 800833c:	2300      	movs	r3, #0
 800833e:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8008340:	2300      	movs	r3, #0
 8008342:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8008344:	2300      	movs	r3, #0
 8008346:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	2b01      	cmp	r3, #1
 800834c:	d141      	bne.n	80083d2 <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
  {
    case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 800834e:	4b25      	ldr	r3, [pc, #148]	@ (80083e4 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8008350:	689b      	ldr	r3, [r3, #8]
 8008352:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008356:	60fb      	str	r3, [r7, #12]
      switch (srcclk)
 8008358:	68fb      	ldr	r3, [r7, #12]
 800835a:	2b00      	cmp	r3, #0
 800835c:	d006      	beq.n	800836c <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
 800835e:	68fb      	ldr	r3, [r7, #12]
 8008360:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8008364:	d131      	bne.n	80083ca <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
      {
        /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
        case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8008366:	4b20      	ldr	r3, [pc, #128]	@ (80083e8 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8008368:	617b      	str	r3, [r7, #20]
          break;
 800836a:	e031      	b.n	80083d0 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
        case RCC_I2SCLKSOURCE_PLLI2S:
        {
#if defined(STM32F411xE)
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
          if ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800836c:	4b1d      	ldr	r3, [pc, #116]	@ (80083e4 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 800836e:	685b      	ldr	r3, [r3, #4]
 8008370:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008374:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008378:	d109      	bne.n	800838e <HAL_RCCEx_GetPeriphCLKFreq+0x5e>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 800837a:	4b1a      	ldr	r3, [pc, #104]	@ (80083e4 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 800837c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008380:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008384:	4a19      	ldr	r2, [pc, #100]	@ (80083ec <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
 8008386:	fbb2 f3f3 	udiv	r3, r2, r3
 800838a:	613b      	str	r3, [r7, #16]
 800838c:	e008      	b.n	80083a0 <HAL_RCCEx_GetPeriphCLKFreq+0x70>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 800838e:	4b15      	ldr	r3, [pc, #84]	@ (80083e4 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8008390:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008394:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008398:	4a15      	ldr	r2, [pc, #84]	@ (80083f0 <HAL_RCCEx_GetPeriphCLKFreq+0xc0>)
 800839a:	fbb2 f3f3 	udiv	r3, r2, r3
 800839e:	613b      	str	r3, [r7, #16]
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 80083a0:	4b10      	ldr	r3, [pc, #64]	@ (80083e4 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 80083a2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80083a6:	099b      	lsrs	r3, r3, #6
 80083a8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80083ac:	693b      	ldr	r3, [r7, #16]
 80083ae:	fb02 f303 	mul.w	r3, r2, r3
 80083b2:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput / (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 80083b4:	4b0b      	ldr	r3, [pc, #44]	@ (80083e4 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 80083b6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80083ba:	0f1b      	lsrs	r3, r3, #28
 80083bc:	f003 0307 	and.w	r3, r3, #7
 80083c0:	68ba      	ldr	r2, [r7, #8]
 80083c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80083c6:	617b      	str	r3, [r7, #20]
          break;
 80083c8:	e002      	b.n	80083d0 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
        }
        /* Clock not enabled for I2S*/
        default:
        {
          frequency = 0U;
 80083ca:	2300      	movs	r3, #0
 80083cc:	617b      	str	r3, [r7, #20]
          break;
 80083ce:	bf00      	nop
        }
      }
      break;
 80083d0:	e000      	b.n	80083d4 <HAL_RCCEx_GetPeriphCLKFreq+0xa4>
    }
    default:
    {
      break;
 80083d2:	bf00      	nop
    }
  }
  return frequency;
 80083d4:	697b      	ldr	r3, [r7, #20]
}
 80083d6:	4618      	mov	r0, r3
 80083d8:	371c      	adds	r7, #28
 80083da:	46bd      	mov	sp, r7
 80083dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083e0:	4770      	bx	lr
 80083e2:	bf00      	nop
 80083e4:	40023800 	.word	0x40023800
 80083e8:	00bb8000 	.word	0x00bb8000
 80083ec:	007a1200 	.word	0x007a1200
 80083f0:	00f42400 	.word	0x00f42400

080083f4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80083f4:	b580      	push	{r7, lr}
 80083f6:	b082      	sub	sp, #8
 80083f8:	af00      	add	r7, sp, #0
 80083fa:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	2b00      	cmp	r3, #0
 8008400:	d101      	bne.n	8008406 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8008402:	2301      	movs	r3, #1
 8008404:	e07b      	b.n	80084fe <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800840a:	2b00      	cmp	r3, #0
 800840c:	d108      	bne.n	8008420 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	685b      	ldr	r3, [r3, #4]
 8008412:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8008416:	d009      	beq.n	800842c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	2200      	movs	r2, #0
 800841c:	61da      	str	r2, [r3, #28]
 800841e:	e005      	b.n	800842c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	2200      	movs	r2, #0
 8008424:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	2200      	movs	r2, #0
 800842a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	2200      	movs	r2, #0
 8008430:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8008438:	b2db      	uxtb	r3, r3
 800843a:	2b00      	cmp	r3, #0
 800843c:	d106      	bne.n	800844c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	2200      	movs	r2, #0
 8008442:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8008446:	6878      	ldr	r0, [r7, #4]
 8008448:	f7fc fab8 	bl	80049bc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	2202      	movs	r2, #2
 8008450:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	681a      	ldr	r2, [r3, #0]
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008462:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	685b      	ldr	r3, [r3, #4]
 8008468:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	689b      	ldr	r3, [r3, #8]
 8008470:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8008474:	431a      	orrs	r2, r3
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	68db      	ldr	r3, [r3, #12]
 800847a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800847e:	431a      	orrs	r2, r3
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	691b      	ldr	r3, [r3, #16]
 8008484:	f003 0302 	and.w	r3, r3, #2
 8008488:	431a      	orrs	r2, r3
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	695b      	ldr	r3, [r3, #20]
 800848e:	f003 0301 	and.w	r3, r3, #1
 8008492:	431a      	orrs	r2, r3
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	699b      	ldr	r3, [r3, #24]
 8008498:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800849c:	431a      	orrs	r2, r3
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	69db      	ldr	r3, [r3, #28]
 80084a2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80084a6:	431a      	orrs	r2, r3
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	6a1b      	ldr	r3, [r3, #32]
 80084ac:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80084b0:	ea42 0103 	orr.w	r1, r2, r3
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80084b8:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	430a      	orrs	r2, r1
 80084c2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	699b      	ldr	r3, [r3, #24]
 80084c8:	0c1b      	lsrs	r3, r3, #16
 80084ca:	f003 0104 	and.w	r1, r3, #4
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80084d2:	f003 0210 	and.w	r2, r3, #16
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	430a      	orrs	r2, r1
 80084dc:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	681b      	ldr	r3, [r3, #0]
 80084e2:	69da      	ldr	r2, [r3, #28]
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80084ec:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	2200      	movs	r2, #0
 80084f2:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	2201      	movs	r2, #1
 80084f8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80084fc:	2300      	movs	r3, #0
}
 80084fe:	4618      	mov	r0, r3
 8008500:	3708      	adds	r7, #8
 8008502:	46bd      	mov	sp, r7
 8008504:	bd80      	pop	{r7, pc}

08008506 <HAL_SPI_Transmit>:
  * @param  Size amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008506:	b580      	push	{r7, lr}
 8008508:	b088      	sub	sp, #32
 800850a:	af00      	add	r7, sp, #0
 800850c:	60f8      	str	r0, [r7, #12]
 800850e:	60b9      	str	r1, [r7, #8]
 8008510:	603b      	str	r3, [r7, #0]
 8008512:	4613      	mov	r3, r2
 8008514:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008516:	f7fd f837 	bl	8005588 <HAL_GetTick>
 800851a:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 800851c:	88fb      	ldrh	r3, [r7, #6]
 800851e:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8008520:	68fb      	ldr	r3, [r7, #12]
 8008522:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8008526:	b2db      	uxtb	r3, r3
 8008528:	2b01      	cmp	r3, #1
 800852a:	d001      	beq.n	8008530 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 800852c:	2302      	movs	r3, #2
 800852e:	e12a      	b.n	8008786 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8008530:	68bb      	ldr	r3, [r7, #8]
 8008532:	2b00      	cmp	r3, #0
 8008534:	d002      	beq.n	800853c <HAL_SPI_Transmit+0x36>
 8008536:	88fb      	ldrh	r3, [r7, #6]
 8008538:	2b00      	cmp	r3, #0
 800853a:	d101      	bne.n	8008540 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 800853c:	2301      	movs	r3, #1
 800853e:	e122      	b.n	8008786 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008540:	68fb      	ldr	r3, [r7, #12]
 8008542:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8008546:	2b01      	cmp	r3, #1
 8008548:	d101      	bne.n	800854e <HAL_SPI_Transmit+0x48>
 800854a:	2302      	movs	r3, #2
 800854c:	e11b      	b.n	8008786 <HAL_SPI_Transmit+0x280>
 800854e:	68fb      	ldr	r3, [r7, #12]
 8008550:	2201      	movs	r2, #1
 8008552:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8008556:	68fb      	ldr	r3, [r7, #12]
 8008558:	2203      	movs	r2, #3
 800855a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800855e:	68fb      	ldr	r3, [r7, #12]
 8008560:	2200      	movs	r2, #0
 8008562:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8008564:	68fb      	ldr	r3, [r7, #12]
 8008566:	68ba      	ldr	r2, [r7, #8]
 8008568:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 800856a:	68fb      	ldr	r3, [r7, #12]
 800856c:	88fa      	ldrh	r2, [r7, #6]
 800856e:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8008570:	68fb      	ldr	r3, [r7, #12]
 8008572:	88fa      	ldrh	r2, [r7, #6]
 8008574:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8008576:	68fb      	ldr	r3, [r7, #12]
 8008578:	2200      	movs	r2, #0
 800857a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 800857c:	68fb      	ldr	r3, [r7, #12]
 800857e:	2200      	movs	r2, #0
 8008580:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8008582:	68fb      	ldr	r3, [r7, #12]
 8008584:	2200      	movs	r2, #0
 8008586:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8008588:	68fb      	ldr	r3, [r7, #12]
 800858a:	2200      	movs	r2, #0
 800858c:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 800858e:	68fb      	ldr	r3, [r7, #12]
 8008590:	2200      	movs	r2, #0
 8008592:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008594:	68fb      	ldr	r3, [r7, #12]
 8008596:	689b      	ldr	r3, [r3, #8]
 8008598:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800859c:	d10f      	bne.n	80085be <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800859e:	68fb      	ldr	r3, [r7, #12]
 80085a0:	681b      	ldr	r3, [r3, #0]
 80085a2:	681a      	ldr	r2, [r3, #0]
 80085a4:	68fb      	ldr	r3, [r7, #12]
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80085ac:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80085ae:	68fb      	ldr	r3, [r7, #12]
 80085b0:	681b      	ldr	r3, [r3, #0]
 80085b2:	681a      	ldr	r2, [r3, #0]
 80085b4:	68fb      	ldr	r3, [r7, #12]
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80085bc:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80085be:	68fb      	ldr	r3, [r7, #12]
 80085c0:	681b      	ldr	r3, [r3, #0]
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80085c8:	2b40      	cmp	r3, #64	@ 0x40
 80085ca:	d007      	beq.n	80085dc <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80085cc:	68fb      	ldr	r3, [r7, #12]
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	681a      	ldr	r2, [r3, #0]
 80085d2:	68fb      	ldr	r3, [r7, #12]
 80085d4:	681b      	ldr	r3, [r3, #0]
 80085d6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80085da:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80085dc:	68fb      	ldr	r3, [r7, #12]
 80085de:	68db      	ldr	r3, [r3, #12]
 80085e0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80085e4:	d152      	bne.n	800868c <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80085e6:	68fb      	ldr	r3, [r7, #12]
 80085e8:	685b      	ldr	r3, [r3, #4]
 80085ea:	2b00      	cmp	r3, #0
 80085ec:	d002      	beq.n	80085f4 <HAL_SPI_Transmit+0xee>
 80085ee:	8b7b      	ldrh	r3, [r7, #26]
 80085f0:	2b01      	cmp	r3, #1
 80085f2:	d145      	bne.n	8008680 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80085f4:	68fb      	ldr	r3, [r7, #12]
 80085f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80085f8:	881a      	ldrh	r2, [r3, #0]
 80085fa:	68fb      	ldr	r3, [r7, #12]
 80085fc:	681b      	ldr	r3, [r3, #0]
 80085fe:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8008600:	68fb      	ldr	r3, [r7, #12]
 8008602:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008604:	1c9a      	adds	r2, r3, #2
 8008606:	68fb      	ldr	r3, [r7, #12]
 8008608:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800860a:	68fb      	ldr	r3, [r7, #12]
 800860c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800860e:	b29b      	uxth	r3, r3
 8008610:	3b01      	subs	r3, #1
 8008612:	b29a      	uxth	r2, r3
 8008614:	68fb      	ldr	r3, [r7, #12]
 8008616:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8008618:	e032      	b.n	8008680 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800861a:	68fb      	ldr	r3, [r7, #12]
 800861c:	681b      	ldr	r3, [r3, #0]
 800861e:	689b      	ldr	r3, [r3, #8]
 8008620:	f003 0302 	and.w	r3, r3, #2
 8008624:	2b02      	cmp	r3, #2
 8008626:	d112      	bne.n	800864e <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8008628:	68fb      	ldr	r3, [r7, #12]
 800862a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800862c:	881a      	ldrh	r2, [r3, #0]
 800862e:	68fb      	ldr	r3, [r7, #12]
 8008630:	681b      	ldr	r3, [r3, #0]
 8008632:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008634:	68fb      	ldr	r3, [r7, #12]
 8008636:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008638:	1c9a      	adds	r2, r3, #2
 800863a:	68fb      	ldr	r3, [r7, #12]
 800863c:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800863e:	68fb      	ldr	r3, [r7, #12]
 8008640:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008642:	b29b      	uxth	r3, r3
 8008644:	3b01      	subs	r3, #1
 8008646:	b29a      	uxth	r2, r3
 8008648:	68fb      	ldr	r3, [r7, #12]
 800864a:	86da      	strh	r2, [r3, #54]	@ 0x36
 800864c:	e018      	b.n	8008680 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800864e:	f7fc ff9b 	bl	8005588 <HAL_GetTick>
 8008652:	4602      	mov	r2, r0
 8008654:	69fb      	ldr	r3, [r7, #28]
 8008656:	1ad3      	subs	r3, r2, r3
 8008658:	683a      	ldr	r2, [r7, #0]
 800865a:	429a      	cmp	r2, r3
 800865c:	d803      	bhi.n	8008666 <HAL_SPI_Transmit+0x160>
 800865e:	683b      	ldr	r3, [r7, #0]
 8008660:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008664:	d102      	bne.n	800866c <HAL_SPI_Transmit+0x166>
 8008666:	683b      	ldr	r3, [r7, #0]
 8008668:	2b00      	cmp	r3, #0
 800866a:	d109      	bne.n	8008680 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800866c:	68fb      	ldr	r3, [r7, #12]
 800866e:	2201      	movs	r2, #1
 8008670:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8008674:	68fb      	ldr	r3, [r7, #12]
 8008676:	2200      	movs	r2, #0
 8008678:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800867c:	2303      	movs	r3, #3
 800867e:	e082      	b.n	8008786 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8008680:	68fb      	ldr	r3, [r7, #12]
 8008682:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008684:	b29b      	uxth	r3, r3
 8008686:	2b00      	cmp	r3, #0
 8008688:	d1c7      	bne.n	800861a <HAL_SPI_Transmit+0x114>
 800868a:	e053      	b.n	8008734 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800868c:	68fb      	ldr	r3, [r7, #12]
 800868e:	685b      	ldr	r3, [r3, #4]
 8008690:	2b00      	cmp	r3, #0
 8008692:	d002      	beq.n	800869a <HAL_SPI_Transmit+0x194>
 8008694:	8b7b      	ldrh	r3, [r7, #26]
 8008696:	2b01      	cmp	r3, #1
 8008698:	d147      	bne.n	800872a <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800869a:	68fb      	ldr	r3, [r7, #12]
 800869c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800869e:	68fb      	ldr	r3, [r7, #12]
 80086a0:	681b      	ldr	r3, [r3, #0]
 80086a2:	330c      	adds	r3, #12
 80086a4:	7812      	ldrb	r2, [r2, #0]
 80086a6:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80086a8:	68fb      	ldr	r3, [r7, #12]
 80086aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80086ac:	1c5a      	adds	r2, r3, #1
 80086ae:	68fb      	ldr	r3, [r7, #12]
 80086b0:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80086b2:	68fb      	ldr	r3, [r7, #12]
 80086b4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80086b6:	b29b      	uxth	r3, r3
 80086b8:	3b01      	subs	r3, #1
 80086ba:	b29a      	uxth	r2, r3
 80086bc:	68fb      	ldr	r3, [r7, #12]
 80086be:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 80086c0:	e033      	b.n	800872a <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80086c2:	68fb      	ldr	r3, [r7, #12]
 80086c4:	681b      	ldr	r3, [r3, #0]
 80086c6:	689b      	ldr	r3, [r3, #8]
 80086c8:	f003 0302 	and.w	r3, r3, #2
 80086cc:	2b02      	cmp	r3, #2
 80086ce:	d113      	bne.n	80086f8 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80086d0:	68fb      	ldr	r3, [r7, #12]
 80086d2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80086d4:	68fb      	ldr	r3, [r7, #12]
 80086d6:	681b      	ldr	r3, [r3, #0]
 80086d8:	330c      	adds	r3, #12
 80086da:	7812      	ldrb	r2, [r2, #0]
 80086dc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80086de:	68fb      	ldr	r3, [r7, #12]
 80086e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80086e2:	1c5a      	adds	r2, r3, #1
 80086e4:	68fb      	ldr	r3, [r7, #12]
 80086e6:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80086e8:	68fb      	ldr	r3, [r7, #12]
 80086ea:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80086ec:	b29b      	uxth	r3, r3
 80086ee:	3b01      	subs	r3, #1
 80086f0:	b29a      	uxth	r2, r3
 80086f2:	68fb      	ldr	r3, [r7, #12]
 80086f4:	86da      	strh	r2, [r3, #54]	@ 0x36
 80086f6:	e018      	b.n	800872a <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80086f8:	f7fc ff46 	bl	8005588 <HAL_GetTick>
 80086fc:	4602      	mov	r2, r0
 80086fe:	69fb      	ldr	r3, [r7, #28]
 8008700:	1ad3      	subs	r3, r2, r3
 8008702:	683a      	ldr	r2, [r7, #0]
 8008704:	429a      	cmp	r2, r3
 8008706:	d803      	bhi.n	8008710 <HAL_SPI_Transmit+0x20a>
 8008708:	683b      	ldr	r3, [r7, #0]
 800870a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800870e:	d102      	bne.n	8008716 <HAL_SPI_Transmit+0x210>
 8008710:	683b      	ldr	r3, [r7, #0]
 8008712:	2b00      	cmp	r3, #0
 8008714:	d109      	bne.n	800872a <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8008716:	68fb      	ldr	r3, [r7, #12]
 8008718:	2201      	movs	r2, #1
 800871a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800871e:	68fb      	ldr	r3, [r7, #12]
 8008720:	2200      	movs	r2, #0
 8008722:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8008726:	2303      	movs	r3, #3
 8008728:	e02d      	b.n	8008786 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 800872a:	68fb      	ldr	r3, [r7, #12]
 800872c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800872e:	b29b      	uxth	r3, r3
 8008730:	2b00      	cmp	r3, #0
 8008732:	d1c6      	bne.n	80086c2 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008734:	69fa      	ldr	r2, [r7, #28]
 8008736:	6839      	ldr	r1, [r7, #0]
 8008738:	68f8      	ldr	r0, [r7, #12]
 800873a:	f000 f8b1 	bl	80088a0 <SPI_EndRxTxTransaction>
 800873e:	4603      	mov	r3, r0
 8008740:	2b00      	cmp	r3, #0
 8008742:	d002      	beq.n	800874a <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008744:	68fb      	ldr	r3, [r7, #12]
 8008746:	2220      	movs	r2, #32
 8008748:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800874a:	68fb      	ldr	r3, [r7, #12]
 800874c:	689b      	ldr	r3, [r3, #8]
 800874e:	2b00      	cmp	r3, #0
 8008750:	d10a      	bne.n	8008768 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008752:	2300      	movs	r3, #0
 8008754:	617b      	str	r3, [r7, #20]
 8008756:	68fb      	ldr	r3, [r7, #12]
 8008758:	681b      	ldr	r3, [r3, #0]
 800875a:	68db      	ldr	r3, [r3, #12]
 800875c:	617b      	str	r3, [r7, #20]
 800875e:	68fb      	ldr	r3, [r7, #12]
 8008760:	681b      	ldr	r3, [r3, #0]
 8008762:	689b      	ldr	r3, [r3, #8]
 8008764:	617b      	str	r3, [r7, #20]
 8008766:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8008768:	68fb      	ldr	r3, [r7, #12]
 800876a:	2201      	movs	r2, #1
 800876c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8008770:	68fb      	ldr	r3, [r7, #12]
 8008772:	2200      	movs	r2, #0
 8008774:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008778:	68fb      	ldr	r3, [r7, #12]
 800877a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800877c:	2b00      	cmp	r3, #0
 800877e:	d001      	beq.n	8008784 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8008780:	2301      	movs	r3, #1
 8008782:	e000      	b.n	8008786 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8008784:	2300      	movs	r3, #0
  }
}
 8008786:	4618      	mov	r0, r3
 8008788:	3720      	adds	r7, #32
 800878a:	46bd      	mov	sp, r7
 800878c:	bd80      	pop	{r7, pc}
	...

08008790 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8008790:	b580      	push	{r7, lr}
 8008792:	b088      	sub	sp, #32
 8008794:	af00      	add	r7, sp, #0
 8008796:	60f8      	str	r0, [r7, #12]
 8008798:	60b9      	str	r1, [r7, #8]
 800879a:	603b      	str	r3, [r7, #0]
 800879c:	4613      	mov	r3, r2
 800879e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80087a0:	f7fc fef2 	bl	8005588 <HAL_GetTick>
 80087a4:	4602      	mov	r2, r0
 80087a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80087a8:	1a9b      	subs	r3, r3, r2
 80087aa:	683a      	ldr	r2, [r7, #0]
 80087ac:	4413      	add	r3, r2
 80087ae:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80087b0:	f7fc feea 	bl	8005588 <HAL_GetTick>
 80087b4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80087b6:	4b39      	ldr	r3, [pc, #228]	@ (800889c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80087b8:	681b      	ldr	r3, [r3, #0]
 80087ba:	015b      	lsls	r3, r3, #5
 80087bc:	0d1b      	lsrs	r3, r3, #20
 80087be:	69fa      	ldr	r2, [r7, #28]
 80087c0:	fb02 f303 	mul.w	r3, r2, r3
 80087c4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80087c6:	e055      	b.n	8008874 <SPI_WaitFlagStateUntilTimeout+0xe4>
  {
    if (Timeout != HAL_MAX_DELAY)
 80087c8:	683b      	ldr	r3, [r7, #0]
 80087ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80087ce:	d051      	beq.n	8008874 <SPI_WaitFlagStateUntilTimeout+0xe4>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80087d0:	f7fc feda 	bl	8005588 <HAL_GetTick>
 80087d4:	4602      	mov	r2, r0
 80087d6:	69bb      	ldr	r3, [r7, #24]
 80087d8:	1ad3      	subs	r3, r2, r3
 80087da:	69fa      	ldr	r2, [r7, #28]
 80087dc:	429a      	cmp	r2, r3
 80087de:	d902      	bls.n	80087e6 <SPI_WaitFlagStateUntilTimeout+0x56>
 80087e0:	69fb      	ldr	r3, [r7, #28]
 80087e2:	2b00      	cmp	r3, #0
 80087e4:	d13d      	bne.n	8008862 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80087e6:	68fb      	ldr	r3, [r7, #12]
 80087e8:	681b      	ldr	r3, [r3, #0]
 80087ea:	685a      	ldr	r2, [r3, #4]
 80087ec:	68fb      	ldr	r3, [r7, #12]
 80087ee:	681b      	ldr	r3, [r3, #0]
 80087f0:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80087f4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80087f6:	68fb      	ldr	r3, [r7, #12]
 80087f8:	685b      	ldr	r3, [r3, #4]
 80087fa:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80087fe:	d111      	bne.n	8008824 <SPI_WaitFlagStateUntilTimeout+0x94>
 8008800:	68fb      	ldr	r3, [r7, #12]
 8008802:	689b      	ldr	r3, [r3, #8]
 8008804:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008808:	d004      	beq.n	8008814 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800880a:	68fb      	ldr	r3, [r7, #12]
 800880c:	689b      	ldr	r3, [r3, #8]
 800880e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008812:	d107      	bne.n	8008824 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8008814:	68fb      	ldr	r3, [r7, #12]
 8008816:	681b      	ldr	r3, [r3, #0]
 8008818:	681a      	ldr	r2, [r3, #0]
 800881a:	68fb      	ldr	r3, [r7, #12]
 800881c:	681b      	ldr	r3, [r3, #0]
 800881e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008822:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008824:	68fb      	ldr	r3, [r7, #12]
 8008826:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008828:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800882c:	d10f      	bne.n	800884e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800882e:	68fb      	ldr	r3, [r7, #12]
 8008830:	681b      	ldr	r3, [r3, #0]
 8008832:	681a      	ldr	r2, [r3, #0]
 8008834:	68fb      	ldr	r3, [r7, #12]
 8008836:	681b      	ldr	r3, [r3, #0]
 8008838:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800883c:	601a      	str	r2, [r3, #0]
 800883e:	68fb      	ldr	r3, [r7, #12]
 8008840:	681b      	ldr	r3, [r3, #0]
 8008842:	681a      	ldr	r2, [r3, #0]
 8008844:	68fb      	ldr	r3, [r7, #12]
 8008846:	681b      	ldr	r3, [r3, #0]
 8008848:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800884c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800884e:	68fb      	ldr	r3, [r7, #12]
 8008850:	2201      	movs	r2, #1
 8008852:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8008856:	68fb      	ldr	r3, [r7, #12]
 8008858:	2200      	movs	r2, #0
 800885a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 800885e:	2303      	movs	r3, #3
 8008860:	e018      	b.n	8008894 <SPI_WaitFlagStateUntilTimeout+0x104>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8008862:	697b      	ldr	r3, [r7, #20]
 8008864:	2b00      	cmp	r3, #0
 8008866:	d102      	bne.n	800886e <SPI_WaitFlagStateUntilTimeout+0xde>
      {
        tmp_timeout = 0U;
 8008868:	2300      	movs	r3, #0
 800886a:	61fb      	str	r3, [r7, #28]
 800886c:	e002      	b.n	8008874 <SPI_WaitFlagStateUntilTimeout+0xe4>
      }
      else
      {
        count--;
 800886e:	697b      	ldr	r3, [r7, #20]
 8008870:	3b01      	subs	r3, #1
 8008872:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008874:	68fb      	ldr	r3, [r7, #12]
 8008876:	681b      	ldr	r3, [r3, #0]
 8008878:	689a      	ldr	r2, [r3, #8]
 800887a:	68bb      	ldr	r3, [r7, #8]
 800887c:	4013      	ands	r3, r2
 800887e:	68ba      	ldr	r2, [r7, #8]
 8008880:	429a      	cmp	r2, r3
 8008882:	bf0c      	ite	eq
 8008884:	2301      	moveq	r3, #1
 8008886:	2300      	movne	r3, #0
 8008888:	b2db      	uxtb	r3, r3
 800888a:	461a      	mov	r2, r3
 800888c:	79fb      	ldrb	r3, [r7, #7]
 800888e:	429a      	cmp	r2, r3
 8008890:	d19a      	bne.n	80087c8 <SPI_WaitFlagStateUntilTimeout+0x38>
      }
    }
  }

  return HAL_OK;
 8008892:	2300      	movs	r3, #0
}
 8008894:	4618      	mov	r0, r3
 8008896:	3720      	adds	r7, #32
 8008898:	46bd      	mov	sp, r7
 800889a:	bd80      	pop	{r7, pc}
 800889c:	2000d10c 	.word	0x2000d10c

080088a0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80088a0:	b580      	push	{r7, lr}
 80088a2:	b088      	sub	sp, #32
 80088a4:	af02      	add	r7, sp, #8
 80088a6:	60f8      	str	r0, [r7, #12]
 80088a8:	60b9      	str	r1, [r7, #8]
 80088aa:	607a      	str	r2, [r7, #4]
  __IO uint32_t count;

  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	9300      	str	r3, [sp, #0]
 80088b0:	68bb      	ldr	r3, [r7, #8]
 80088b2:	2201      	movs	r2, #1
 80088b4:	2102      	movs	r1, #2
 80088b6:	68f8      	ldr	r0, [r7, #12]
 80088b8:	f7ff ff6a 	bl	8008790 <SPI_WaitFlagStateUntilTimeout>
 80088bc:	4603      	mov	r3, r0
 80088be:	2b00      	cmp	r3, #0
 80088c0:	d007      	beq.n	80088d2 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80088c2:	68fb      	ldr	r3, [r7, #12]
 80088c4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80088c6:	f043 0220 	orr.w	r2, r3, #32
 80088ca:	68fb      	ldr	r3, [r7, #12]
 80088cc:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 80088ce:	2303      	movs	r3, #3
 80088d0:	e032      	b.n	8008938 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in us */
  count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80088d2:	4b1b      	ldr	r3, [pc, #108]	@ (8008940 <SPI_EndRxTxTransaction+0xa0>)
 80088d4:	681b      	ldr	r3, [r3, #0]
 80088d6:	4a1b      	ldr	r2, [pc, #108]	@ (8008944 <SPI_EndRxTxTransaction+0xa4>)
 80088d8:	fba2 2303 	umull	r2, r3, r2, r3
 80088dc:	0d5b      	lsrs	r3, r3, #21
 80088de:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80088e2:	fb02 f303 	mul.w	r3, r2, r3
 80088e6:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80088e8:	68fb      	ldr	r3, [r7, #12]
 80088ea:	685b      	ldr	r3, [r3, #4]
 80088ec:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80088f0:	d112      	bne.n	8008918 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	9300      	str	r3, [sp, #0]
 80088f6:	68bb      	ldr	r3, [r7, #8]
 80088f8:	2200      	movs	r2, #0
 80088fa:	2180      	movs	r1, #128	@ 0x80
 80088fc:	68f8      	ldr	r0, [r7, #12]
 80088fe:	f7ff ff47 	bl	8008790 <SPI_WaitFlagStateUntilTimeout>
 8008902:	4603      	mov	r3, r0
 8008904:	2b00      	cmp	r3, #0
 8008906:	d016      	beq.n	8008936 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008908:	68fb      	ldr	r3, [r7, #12]
 800890a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800890c:	f043 0220 	orr.w	r2, r3, #32
 8008910:	68fb      	ldr	r3, [r7, #12]
 8008912:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8008914:	2303      	movs	r3, #3
 8008916:	e00f      	b.n	8008938 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8008918:	697b      	ldr	r3, [r7, #20]
 800891a:	2b00      	cmp	r3, #0
 800891c:	d00a      	beq.n	8008934 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 800891e:	697b      	ldr	r3, [r7, #20]
 8008920:	3b01      	subs	r3, #1
 8008922:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8008924:	68fb      	ldr	r3, [r7, #12]
 8008926:	681b      	ldr	r3, [r3, #0]
 8008928:	689b      	ldr	r3, [r3, #8]
 800892a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800892e:	2b80      	cmp	r3, #128	@ 0x80
 8008930:	d0f2      	beq.n	8008918 <SPI_EndRxTxTransaction+0x78>
 8008932:	e000      	b.n	8008936 <SPI_EndRxTxTransaction+0x96>
        break;
 8008934:	bf00      	nop
  }

  return HAL_OK;
 8008936:	2300      	movs	r3, #0
}
 8008938:	4618      	mov	r0, r3
 800893a:	3718      	adds	r7, #24
 800893c:	46bd      	mov	sp, r7
 800893e:	bd80      	pop	{r7, pc}
 8008940:	2000d10c 	.word	0x2000d10c
 8008944:	165e9f81 	.word	0x165e9f81

08008948 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008948:	b580      	push	{r7, lr}
 800894a:	b082      	sub	sp, #8
 800894c:	af00      	add	r7, sp, #0
 800894e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	2b00      	cmp	r3, #0
 8008954:	d101      	bne.n	800895a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008956:	2301      	movs	r3, #1
 8008958:	e041      	b.n	80089de <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008960:	b2db      	uxtb	r3, r3
 8008962:	2b00      	cmp	r3, #0
 8008964:	d106      	bne.n	8008974 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	2200      	movs	r2, #0
 800896a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800896e:	6878      	ldr	r0, [r7, #4]
 8008970:	f7fc fb88 	bl	8005084 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	2202      	movs	r2, #2
 8008978:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	681a      	ldr	r2, [r3, #0]
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	3304      	adds	r3, #4
 8008984:	4619      	mov	r1, r3
 8008986:	4610      	mov	r0, r2
 8008988:	f000 fd10 	bl	80093ac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	2201      	movs	r2, #1
 8008990:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	2201      	movs	r2, #1
 8008998:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	2201      	movs	r2, #1
 80089a0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	2201      	movs	r2, #1
 80089a8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	2201      	movs	r2, #1
 80089b0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	2201      	movs	r2, #1
 80089b8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	2201      	movs	r2, #1
 80089c0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	2201      	movs	r2, #1
 80089c8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	2201      	movs	r2, #1
 80089d0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	2201      	movs	r2, #1
 80089d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80089dc:	2300      	movs	r3, #0
}
 80089de:	4618      	mov	r0, r3
 80089e0:	3708      	adds	r7, #8
 80089e2:	46bd      	mov	sp, r7
 80089e4:	bd80      	pop	{r7, pc}
	...

080089e8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80089e8:	b480      	push	{r7}
 80089ea:	b085      	sub	sp, #20
 80089ec:	af00      	add	r7, sp, #0
 80089ee:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80089f6:	b2db      	uxtb	r3, r3
 80089f8:	2b01      	cmp	r3, #1
 80089fa:	d001      	beq.n	8008a00 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80089fc:	2301      	movs	r3, #1
 80089fe:	e044      	b.n	8008a8a <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	2202      	movs	r2, #2
 8008a04:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	681b      	ldr	r3, [r3, #0]
 8008a0c:	68da      	ldr	r2, [r3, #12]
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	681b      	ldr	r3, [r3, #0]
 8008a12:	f042 0201 	orr.w	r2, r2, #1
 8008a16:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	681b      	ldr	r3, [r3, #0]
 8008a1c:	4a1e      	ldr	r2, [pc, #120]	@ (8008a98 <HAL_TIM_Base_Start_IT+0xb0>)
 8008a1e:	4293      	cmp	r3, r2
 8008a20:	d018      	beq.n	8008a54 <HAL_TIM_Base_Start_IT+0x6c>
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008a2a:	d013      	beq.n	8008a54 <HAL_TIM_Base_Start_IT+0x6c>
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	681b      	ldr	r3, [r3, #0]
 8008a30:	4a1a      	ldr	r2, [pc, #104]	@ (8008a9c <HAL_TIM_Base_Start_IT+0xb4>)
 8008a32:	4293      	cmp	r3, r2
 8008a34:	d00e      	beq.n	8008a54 <HAL_TIM_Base_Start_IT+0x6c>
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	681b      	ldr	r3, [r3, #0]
 8008a3a:	4a19      	ldr	r2, [pc, #100]	@ (8008aa0 <HAL_TIM_Base_Start_IT+0xb8>)
 8008a3c:	4293      	cmp	r3, r2
 8008a3e:	d009      	beq.n	8008a54 <HAL_TIM_Base_Start_IT+0x6c>
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	681b      	ldr	r3, [r3, #0]
 8008a44:	4a17      	ldr	r2, [pc, #92]	@ (8008aa4 <HAL_TIM_Base_Start_IT+0xbc>)
 8008a46:	4293      	cmp	r3, r2
 8008a48:	d004      	beq.n	8008a54 <HAL_TIM_Base_Start_IT+0x6c>
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	681b      	ldr	r3, [r3, #0]
 8008a4e:	4a16      	ldr	r2, [pc, #88]	@ (8008aa8 <HAL_TIM_Base_Start_IT+0xc0>)
 8008a50:	4293      	cmp	r3, r2
 8008a52:	d111      	bne.n	8008a78 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	681b      	ldr	r3, [r3, #0]
 8008a58:	689b      	ldr	r3, [r3, #8]
 8008a5a:	f003 0307 	and.w	r3, r3, #7
 8008a5e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008a60:	68fb      	ldr	r3, [r7, #12]
 8008a62:	2b06      	cmp	r3, #6
 8008a64:	d010      	beq.n	8008a88 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	681b      	ldr	r3, [r3, #0]
 8008a6a:	681a      	ldr	r2, [r3, #0]
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	681b      	ldr	r3, [r3, #0]
 8008a70:	f042 0201 	orr.w	r2, r2, #1
 8008a74:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008a76:	e007      	b.n	8008a88 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	681b      	ldr	r3, [r3, #0]
 8008a7c:	681a      	ldr	r2, [r3, #0]
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	681b      	ldr	r3, [r3, #0]
 8008a82:	f042 0201 	orr.w	r2, r2, #1
 8008a86:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008a88:	2300      	movs	r3, #0
}
 8008a8a:	4618      	mov	r0, r3
 8008a8c:	3714      	adds	r7, #20
 8008a8e:	46bd      	mov	sp, r7
 8008a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a94:	4770      	bx	lr
 8008a96:	bf00      	nop
 8008a98:	40010000 	.word	0x40010000
 8008a9c:	40000400 	.word	0x40000400
 8008aa0:	40000800 	.word	0x40000800
 8008aa4:	40000c00 	.word	0x40000c00
 8008aa8:	40014000 	.word	0x40014000

08008aac <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8008aac:	b480      	push	{r7}
 8008aae:	b083      	sub	sp, #12
 8008ab0:	af00      	add	r7, sp, #0
 8008ab2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	681b      	ldr	r3, [r3, #0]
 8008ab8:	68da      	ldr	r2, [r3, #12]
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	681b      	ldr	r3, [r3, #0]
 8008abe:	f022 0201 	bic.w	r2, r2, #1
 8008ac2:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	681b      	ldr	r3, [r3, #0]
 8008ac8:	6a1a      	ldr	r2, [r3, #32]
 8008aca:	f241 1311 	movw	r3, #4369	@ 0x1111
 8008ace:	4013      	ands	r3, r2
 8008ad0:	2b00      	cmp	r3, #0
 8008ad2:	d10f      	bne.n	8008af4 <HAL_TIM_Base_Stop_IT+0x48>
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	681b      	ldr	r3, [r3, #0]
 8008ad8:	6a1a      	ldr	r2, [r3, #32]
 8008ada:	f240 4344 	movw	r3, #1092	@ 0x444
 8008ade:	4013      	ands	r3, r2
 8008ae0:	2b00      	cmp	r3, #0
 8008ae2:	d107      	bne.n	8008af4 <HAL_TIM_Base_Stop_IT+0x48>
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	681a      	ldr	r2, [r3, #0]
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	681b      	ldr	r3, [r3, #0]
 8008aee:	f022 0201 	bic.w	r2, r2, #1
 8008af2:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	2201      	movs	r2, #1
 8008af8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 8008afc:	2300      	movs	r3, #0
}
 8008afe:	4618      	mov	r0, r3
 8008b00:	370c      	adds	r7, #12
 8008b02:	46bd      	mov	sp, r7
 8008b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b08:	4770      	bx	lr

08008b0a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8008b0a:	b580      	push	{r7, lr}
 8008b0c:	b082      	sub	sp, #8
 8008b0e:	af00      	add	r7, sp, #0
 8008b10:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	2b00      	cmp	r3, #0
 8008b16:	d101      	bne.n	8008b1c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8008b18:	2301      	movs	r3, #1
 8008b1a:	e041      	b.n	8008ba0 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008b22:	b2db      	uxtb	r3, r3
 8008b24:	2b00      	cmp	r3, #0
 8008b26:	d106      	bne.n	8008b36 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	2200      	movs	r2, #0
 8008b2c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8008b30:	6878      	ldr	r0, [r7, #4]
 8008b32:	f000 f839 	bl	8008ba8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	2202      	movs	r2, #2
 8008b3a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	681a      	ldr	r2, [r3, #0]
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	3304      	adds	r3, #4
 8008b46:	4619      	mov	r1, r3
 8008b48:	4610      	mov	r0, r2
 8008b4a:	f000 fc2f 	bl	80093ac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	2201      	movs	r2, #1
 8008b52:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	2201      	movs	r2, #1
 8008b5a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	2201      	movs	r2, #1
 8008b62:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	2201      	movs	r2, #1
 8008b6a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	2201      	movs	r2, #1
 8008b72:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	2201      	movs	r2, #1
 8008b7a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	2201      	movs	r2, #1
 8008b82:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	2201      	movs	r2, #1
 8008b8a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	2201      	movs	r2, #1
 8008b92:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	2201      	movs	r2, #1
 8008b9a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8008b9e:	2300      	movs	r3, #0
}
 8008ba0:	4618      	mov	r0, r3
 8008ba2:	3708      	adds	r7, #8
 8008ba4:	46bd      	mov	sp, r7
 8008ba6:	bd80      	pop	{r7, pc}

08008ba8 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8008ba8:	b480      	push	{r7}
 8008baa:	b083      	sub	sp, #12
 8008bac:	af00      	add	r7, sp, #0
 8008bae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8008bb0:	bf00      	nop
 8008bb2:	370c      	adds	r7, #12
 8008bb4:	46bd      	mov	sp, r7
 8008bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bba:	4770      	bx	lr

08008bbc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008bbc:	b580      	push	{r7, lr}
 8008bbe:	b084      	sub	sp, #16
 8008bc0:	af00      	add	r7, sp, #0
 8008bc2:	6078      	str	r0, [r7, #4]
 8008bc4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8008bc6:	683b      	ldr	r3, [r7, #0]
 8008bc8:	2b00      	cmp	r3, #0
 8008bca:	d109      	bne.n	8008be0 <HAL_TIM_PWM_Start+0x24>
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8008bd2:	b2db      	uxtb	r3, r3
 8008bd4:	2b01      	cmp	r3, #1
 8008bd6:	bf14      	ite	ne
 8008bd8:	2301      	movne	r3, #1
 8008bda:	2300      	moveq	r3, #0
 8008bdc:	b2db      	uxtb	r3, r3
 8008bde:	e022      	b.n	8008c26 <HAL_TIM_PWM_Start+0x6a>
 8008be0:	683b      	ldr	r3, [r7, #0]
 8008be2:	2b04      	cmp	r3, #4
 8008be4:	d109      	bne.n	8008bfa <HAL_TIM_PWM_Start+0x3e>
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8008bec:	b2db      	uxtb	r3, r3
 8008bee:	2b01      	cmp	r3, #1
 8008bf0:	bf14      	ite	ne
 8008bf2:	2301      	movne	r3, #1
 8008bf4:	2300      	moveq	r3, #0
 8008bf6:	b2db      	uxtb	r3, r3
 8008bf8:	e015      	b.n	8008c26 <HAL_TIM_PWM_Start+0x6a>
 8008bfa:	683b      	ldr	r3, [r7, #0]
 8008bfc:	2b08      	cmp	r3, #8
 8008bfe:	d109      	bne.n	8008c14 <HAL_TIM_PWM_Start+0x58>
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8008c06:	b2db      	uxtb	r3, r3
 8008c08:	2b01      	cmp	r3, #1
 8008c0a:	bf14      	ite	ne
 8008c0c:	2301      	movne	r3, #1
 8008c0e:	2300      	moveq	r3, #0
 8008c10:	b2db      	uxtb	r3, r3
 8008c12:	e008      	b.n	8008c26 <HAL_TIM_PWM_Start+0x6a>
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008c1a:	b2db      	uxtb	r3, r3
 8008c1c:	2b01      	cmp	r3, #1
 8008c1e:	bf14      	ite	ne
 8008c20:	2301      	movne	r3, #1
 8008c22:	2300      	moveq	r3, #0
 8008c24:	b2db      	uxtb	r3, r3
 8008c26:	2b00      	cmp	r3, #0
 8008c28:	d001      	beq.n	8008c2e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8008c2a:	2301      	movs	r3, #1
 8008c2c:	e068      	b.n	8008d00 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008c2e:	683b      	ldr	r3, [r7, #0]
 8008c30:	2b00      	cmp	r3, #0
 8008c32:	d104      	bne.n	8008c3e <HAL_TIM_PWM_Start+0x82>
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	2202      	movs	r2, #2
 8008c38:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008c3c:	e013      	b.n	8008c66 <HAL_TIM_PWM_Start+0xaa>
 8008c3e:	683b      	ldr	r3, [r7, #0]
 8008c40:	2b04      	cmp	r3, #4
 8008c42:	d104      	bne.n	8008c4e <HAL_TIM_PWM_Start+0x92>
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	2202      	movs	r2, #2
 8008c48:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008c4c:	e00b      	b.n	8008c66 <HAL_TIM_PWM_Start+0xaa>
 8008c4e:	683b      	ldr	r3, [r7, #0]
 8008c50:	2b08      	cmp	r3, #8
 8008c52:	d104      	bne.n	8008c5e <HAL_TIM_PWM_Start+0xa2>
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	2202      	movs	r2, #2
 8008c58:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008c5c:	e003      	b.n	8008c66 <HAL_TIM_PWM_Start+0xaa>
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	2202      	movs	r2, #2
 8008c62:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	681b      	ldr	r3, [r3, #0]
 8008c6a:	2201      	movs	r2, #1
 8008c6c:	6839      	ldr	r1, [r7, #0]
 8008c6e:	4618      	mov	r0, r3
 8008c70:	f000 fe48 	bl	8009904 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	681b      	ldr	r3, [r3, #0]
 8008c78:	4a23      	ldr	r2, [pc, #140]	@ (8008d08 <HAL_TIM_PWM_Start+0x14c>)
 8008c7a:	4293      	cmp	r3, r2
 8008c7c:	d107      	bne.n	8008c8e <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	681b      	ldr	r3, [r3, #0]
 8008c82:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	681b      	ldr	r3, [r3, #0]
 8008c88:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8008c8c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	681b      	ldr	r3, [r3, #0]
 8008c92:	4a1d      	ldr	r2, [pc, #116]	@ (8008d08 <HAL_TIM_PWM_Start+0x14c>)
 8008c94:	4293      	cmp	r3, r2
 8008c96:	d018      	beq.n	8008cca <HAL_TIM_PWM_Start+0x10e>
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	681b      	ldr	r3, [r3, #0]
 8008c9c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008ca0:	d013      	beq.n	8008cca <HAL_TIM_PWM_Start+0x10e>
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	681b      	ldr	r3, [r3, #0]
 8008ca6:	4a19      	ldr	r2, [pc, #100]	@ (8008d0c <HAL_TIM_PWM_Start+0x150>)
 8008ca8:	4293      	cmp	r3, r2
 8008caa:	d00e      	beq.n	8008cca <HAL_TIM_PWM_Start+0x10e>
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	681b      	ldr	r3, [r3, #0]
 8008cb0:	4a17      	ldr	r2, [pc, #92]	@ (8008d10 <HAL_TIM_PWM_Start+0x154>)
 8008cb2:	4293      	cmp	r3, r2
 8008cb4:	d009      	beq.n	8008cca <HAL_TIM_PWM_Start+0x10e>
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	681b      	ldr	r3, [r3, #0]
 8008cba:	4a16      	ldr	r2, [pc, #88]	@ (8008d14 <HAL_TIM_PWM_Start+0x158>)
 8008cbc:	4293      	cmp	r3, r2
 8008cbe:	d004      	beq.n	8008cca <HAL_TIM_PWM_Start+0x10e>
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	681b      	ldr	r3, [r3, #0]
 8008cc4:	4a14      	ldr	r2, [pc, #80]	@ (8008d18 <HAL_TIM_PWM_Start+0x15c>)
 8008cc6:	4293      	cmp	r3, r2
 8008cc8:	d111      	bne.n	8008cee <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	681b      	ldr	r3, [r3, #0]
 8008cce:	689b      	ldr	r3, [r3, #8]
 8008cd0:	f003 0307 	and.w	r3, r3, #7
 8008cd4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008cd6:	68fb      	ldr	r3, [r7, #12]
 8008cd8:	2b06      	cmp	r3, #6
 8008cda:	d010      	beq.n	8008cfe <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	681b      	ldr	r3, [r3, #0]
 8008ce0:	681a      	ldr	r2, [r3, #0]
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	681b      	ldr	r3, [r3, #0]
 8008ce6:	f042 0201 	orr.w	r2, r2, #1
 8008cea:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008cec:	e007      	b.n	8008cfe <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	681b      	ldr	r3, [r3, #0]
 8008cf2:	681a      	ldr	r2, [r3, #0]
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	681b      	ldr	r3, [r3, #0]
 8008cf8:	f042 0201 	orr.w	r2, r2, #1
 8008cfc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008cfe:	2300      	movs	r3, #0
}
 8008d00:	4618      	mov	r0, r3
 8008d02:	3710      	adds	r7, #16
 8008d04:	46bd      	mov	sp, r7
 8008d06:	bd80      	pop	{r7, pc}
 8008d08:	40010000 	.word	0x40010000
 8008d0c:	40000400 	.word	0x40000400
 8008d10:	40000800 	.word	0x40000800
 8008d14:	40000c00 	.word	0x40000c00
 8008d18:	40014000 	.word	0x40014000

08008d1c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8008d1c:	b580      	push	{r7, lr}
 8008d1e:	b086      	sub	sp, #24
 8008d20:	af00      	add	r7, sp, #0
 8008d22:	6078      	str	r0, [r7, #4]
 8008d24:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	2b00      	cmp	r3, #0
 8008d2a:	d101      	bne.n	8008d30 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8008d2c:	2301      	movs	r3, #1
 8008d2e:	e097      	b.n	8008e60 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008d36:	b2db      	uxtb	r3, r3
 8008d38:	2b00      	cmp	r3, #0
 8008d3a:	d106      	bne.n	8008d4a <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	2200      	movs	r2, #0
 8008d40:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8008d44:	6878      	ldr	r0, [r7, #4]
 8008d46:	f7fc f9ff 	bl	8005148 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	2202      	movs	r2, #2
 8008d4e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	681b      	ldr	r3, [r3, #0]
 8008d56:	689b      	ldr	r3, [r3, #8]
 8008d58:	687a      	ldr	r2, [r7, #4]
 8008d5a:	6812      	ldr	r2, [r2, #0]
 8008d5c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008d60:	f023 0307 	bic.w	r3, r3, #7
 8008d64:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	681a      	ldr	r2, [r3, #0]
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	3304      	adds	r3, #4
 8008d6e:	4619      	mov	r1, r3
 8008d70:	4610      	mov	r0, r2
 8008d72:	f000 fb1b 	bl	80093ac <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	681b      	ldr	r3, [r3, #0]
 8008d7a:	689b      	ldr	r3, [r3, #8]
 8008d7c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	681b      	ldr	r3, [r3, #0]
 8008d82:	699b      	ldr	r3, [r3, #24]
 8008d84:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	681b      	ldr	r3, [r3, #0]
 8008d8a:	6a1b      	ldr	r3, [r3, #32]
 8008d8c:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8008d8e:	683b      	ldr	r3, [r7, #0]
 8008d90:	681b      	ldr	r3, [r3, #0]
 8008d92:	697a      	ldr	r2, [r7, #20]
 8008d94:	4313      	orrs	r3, r2
 8008d96:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8008d98:	693b      	ldr	r3, [r7, #16]
 8008d9a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008d9e:	f023 0303 	bic.w	r3, r3, #3
 8008da2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8008da4:	683b      	ldr	r3, [r7, #0]
 8008da6:	689a      	ldr	r2, [r3, #8]
 8008da8:	683b      	ldr	r3, [r7, #0]
 8008daa:	699b      	ldr	r3, [r3, #24]
 8008dac:	021b      	lsls	r3, r3, #8
 8008dae:	4313      	orrs	r3, r2
 8008db0:	693a      	ldr	r2, [r7, #16]
 8008db2:	4313      	orrs	r3, r2
 8008db4:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8008db6:	693b      	ldr	r3, [r7, #16]
 8008db8:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8008dbc:	f023 030c 	bic.w	r3, r3, #12
 8008dc0:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8008dc2:	693b      	ldr	r3, [r7, #16]
 8008dc4:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8008dc8:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8008dcc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8008dce:	683b      	ldr	r3, [r7, #0]
 8008dd0:	68da      	ldr	r2, [r3, #12]
 8008dd2:	683b      	ldr	r3, [r7, #0]
 8008dd4:	69db      	ldr	r3, [r3, #28]
 8008dd6:	021b      	lsls	r3, r3, #8
 8008dd8:	4313      	orrs	r3, r2
 8008dda:	693a      	ldr	r2, [r7, #16]
 8008ddc:	4313      	orrs	r3, r2
 8008dde:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8008de0:	683b      	ldr	r3, [r7, #0]
 8008de2:	691b      	ldr	r3, [r3, #16]
 8008de4:	011a      	lsls	r2, r3, #4
 8008de6:	683b      	ldr	r3, [r7, #0]
 8008de8:	6a1b      	ldr	r3, [r3, #32]
 8008dea:	031b      	lsls	r3, r3, #12
 8008dec:	4313      	orrs	r3, r2
 8008dee:	693a      	ldr	r2, [r7, #16]
 8008df0:	4313      	orrs	r3, r2
 8008df2:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8008df4:	68fb      	ldr	r3, [r7, #12]
 8008df6:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8008dfa:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8008dfc:	68fb      	ldr	r3, [r7, #12]
 8008dfe:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8008e02:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8008e04:	683b      	ldr	r3, [r7, #0]
 8008e06:	685a      	ldr	r2, [r3, #4]
 8008e08:	683b      	ldr	r3, [r7, #0]
 8008e0a:	695b      	ldr	r3, [r3, #20]
 8008e0c:	011b      	lsls	r3, r3, #4
 8008e0e:	4313      	orrs	r3, r2
 8008e10:	68fa      	ldr	r2, [r7, #12]
 8008e12:	4313      	orrs	r3, r2
 8008e14:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	681b      	ldr	r3, [r3, #0]
 8008e1a:	697a      	ldr	r2, [r7, #20]
 8008e1c:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	681b      	ldr	r3, [r3, #0]
 8008e22:	693a      	ldr	r2, [r7, #16]
 8008e24:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	681b      	ldr	r3, [r3, #0]
 8008e2a:	68fa      	ldr	r2, [r7, #12]
 8008e2c:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	2201      	movs	r2, #1
 8008e32:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	2201      	movs	r2, #1
 8008e3a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	2201      	movs	r2, #1
 8008e42:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	2201      	movs	r2, #1
 8008e4a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	2201      	movs	r2, #1
 8008e52:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	2201      	movs	r2, #1
 8008e5a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8008e5e:	2300      	movs	r3, #0
}
 8008e60:	4618      	mov	r0, r3
 8008e62:	3718      	adds	r7, #24
 8008e64:	46bd      	mov	sp, r7
 8008e66:	bd80      	pop	{r7, pc}

08008e68 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008e68:	b580      	push	{r7, lr}
 8008e6a:	b084      	sub	sp, #16
 8008e6c:	af00      	add	r7, sp, #0
 8008e6e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	681b      	ldr	r3, [r3, #0]
 8008e74:	68db      	ldr	r3, [r3, #12]
 8008e76:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	681b      	ldr	r3, [r3, #0]
 8008e7c:	691b      	ldr	r3, [r3, #16]
 8008e7e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8008e80:	68bb      	ldr	r3, [r7, #8]
 8008e82:	f003 0302 	and.w	r3, r3, #2
 8008e86:	2b00      	cmp	r3, #0
 8008e88:	d020      	beq.n	8008ecc <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8008e8a:	68fb      	ldr	r3, [r7, #12]
 8008e8c:	f003 0302 	and.w	r3, r3, #2
 8008e90:	2b00      	cmp	r3, #0
 8008e92:	d01b      	beq.n	8008ecc <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	681b      	ldr	r3, [r3, #0]
 8008e98:	f06f 0202 	mvn.w	r2, #2
 8008e9c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	2201      	movs	r2, #1
 8008ea2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	681b      	ldr	r3, [r3, #0]
 8008ea8:	699b      	ldr	r3, [r3, #24]
 8008eaa:	f003 0303 	and.w	r3, r3, #3
 8008eae:	2b00      	cmp	r3, #0
 8008eb0:	d003      	beq.n	8008eba <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008eb2:	6878      	ldr	r0, [r7, #4]
 8008eb4:	f000 fa5b 	bl	800936e <HAL_TIM_IC_CaptureCallback>
 8008eb8:	e005      	b.n	8008ec6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008eba:	6878      	ldr	r0, [r7, #4]
 8008ebc:	f000 fa4d 	bl	800935a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008ec0:	6878      	ldr	r0, [r7, #4]
 8008ec2:	f000 fa5e 	bl	8009382 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	2200      	movs	r2, #0
 8008eca:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8008ecc:	68bb      	ldr	r3, [r7, #8]
 8008ece:	f003 0304 	and.w	r3, r3, #4
 8008ed2:	2b00      	cmp	r3, #0
 8008ed4:	d020      	beq.n	8008f18 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8008ed6:	68fb      	ldr	r3, [r7, #12]
 8008ed8:	f003 0304 	and.w	r3, r3, #4
 8008edc:	2b00      	cmp	r3, #0
 8008ede:	d01b      	beq.n	8008f18 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	681b      	ldr	r3, [r3, #0]
 8008ee4:	f06f 0204 	mvn.w	r2, #4
 8008ee8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	2202      	movs	r2, #2
 8008eee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	681b      	ldr	r3, [r3, #0]
 8008ef4:	699b      	ldr	r3, [r3, #24]
 8008ef6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008efa:	2b00      	cmp	r3, #0
 8008efc:	d003      	beq.n	8008f06 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008efe:	6878      	ldr	r0, [r7, #4]
 8008f00:	f000 fa35 	bl	800936e <HAL_TIM_IC_CaptureCallback>
 8008f04:	e005      	b.n	8008f12 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008f06:	6878      	ldr	r0, [r7, #4]
 8008f08:	f000 fa27 	bl	800935a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008f0c:	6878      	ldr	r0, [r7, #4]
 8008f0e:	f000 fa38 	bl	8009382 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	2200      	movs	r2, #0
 8008f16:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8008f18:	68bb      	ldr	r3, [r7, #8]
 8008f1a:	f003 0308 	and.w	r3, r3, #8
 8008f1e:	2b00      	cmp	r3, #0
 8008f20:	d020      	beq.n	8008f64 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8008f22:	68fb      	ldr	r3, [r7, #12]
 8008f24:	f003 0308 	and.w	r3, r3, #8
 8008f28:	2b00      	cmp	r3, #0
 8008f2a:	d01b      	beq.n	8008f64 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	681b      	ldr	r3, [r3, #0]
 8008f30:	f06f 0208 	mvn.w	r2, #8
 8008f34:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	2204      	movs	r2, #4
 8008f3a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	681b      	ldr	r3, [r3, #0]
 8008f40:	69db      	ldr	r3, [r3, #28]
 8008f42:	f003 0303 	and.w	r3, r3, #3
 8008f46:	2b00      	cmp	r3, #0
 8008f48:	d003      	beq.n	8008f52 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008f4a:	6878      	ldr	r0, [r7, #4]
 8008f4c:	f000 fa0f 	bl	800936e <HAL_TIM_IC_CaptureCallback>
 8008f50:	e005      	b.n	8008f5e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008f52:	6878      	ldr	r0, [r7, #4]
 8008f54:	f000 fa01 	bl	800935a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008f58:	6878      	ldr	r0, [r7, #4]
 8008f5a:	f000 fa12 	bl	8009382 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	2200      	movs	r2, #0
 8008f62:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8008f64:	68bb      	ldr	r3, [r7, #8]
 8008f66:	f003 0310 	and.w	r3, r3, #16
 8008f6a:	2b00      	cmp	r3, #0
 8008f6c:	d020      	beq.n	8008fb0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8008f6e:	68fb      	ldr	r3, [r7, #12]
 8008f70:	f003 0310 	and.w	r3, r3, #16
 8008f74:	2b00      	cmp	r3, #0
 8008f76:	d01b      	beq.n	8008fb0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	681b      	ldr	r3, [r3, #0]
 8008f7c:	f06f 0210 	mvn.w	r2, #16
 8008f80:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	2208      	movs	r2, #8
 8008f86:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	681b      	ldr	r3, [r3, #0]
 8008f8c:	69db      	ldr	r3, [r3, #28]
 8008f8e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008f92:	2b00      	cmp	r3, #0
 8008f94:	d003      	beq.n	8008f9e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008f96:	6878      	ldr	r0, [r7, #4]
 8008f98:	f000 f9e9 	bl	800936e <HAL_TIM_IC_CaptureCallback>
 8008f9c:	e005      	b.n	8008faa <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008f9e:	6878      	ldr	r0, [r7, #4]
 8008fa0:	f000 f9db 	bl	800935a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008fa4:	6878      	ldr	r0, [r7, #4]
 8008fa6:	f000 f9ec 	bl	8009382 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	2200      	movs	r2, #0
 8008fae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8008fb0:	68bb      	ldr	r3, [r7, #8]
 8008fb2:	f003 0301 	and.w	r3, r3, #1
 8008fb6:	2b00      	cmp	r3, #0
 8008fb8:	d00c      	beq.n	8008fd4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8008fba:	68fb      	ldr	r3, [r7, #12]
 8008fbc:	f003 0301 	and.w	r3, r3, #1
 8008fc0:	2b00      	cmp	r3, #0
 8008fc2:	d007      	beq.n	8008fd4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	681b      	ldr	r3, [r3, #0]
 8008fc8:	f06f 0201 	mvn.w	r2, #1
 8008fcc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008fce:	6878      	ldr	r0, [r7, #4]
 8008fd0:	f7f9 f96e 	bl	80022b0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8008fd4:	68bb      	ldr	r3, [r7, #8]
 8008fd6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008fda:	2b00      	cmp	r3, #0
 8008fdc:	d00c      	beq.n	8008ff8 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8008fde:	68fb      	ldr	r3, [r7, #12]
 8008fe0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008fe4:	2b00      	cmp	r3, #0
 8008fe6:	d007      	beq.n	8008ff8 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	681b      	ldr	r3, [r3, #0]
 8008fec:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8008ff0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008ff2:	6878      	ldr	r0, [r7, #4]
 8008ff4:	f000 fd76 	bl	8009ae4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8008ff8:	68bb      	ldr	r3, [r7, #8]
 8008ffa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008ffe:	2b00      	cmp	r3, #0
 8009000:	d00c      	beq.n	800901c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8009002:	68fb      	ldr	r3, [r7, #12]
 8009004:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009008:	2b00      	cmp	r3, #0
 800900a:	d007      	beq.n	800901c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	681b      	ldr	r3, [r3, #0]
 8009010:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8009014:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009016:	6878      	ldr	r0, [r7, #4]
 8009018:	f000 f9bd 	bl	8009396 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800901c:	68bb      	ldr	r3, [r7, #8]
 800901e:	f003 0320 	and.w	r3, r3, #32
 8009022:	2b00      	cmp	r3, #0
 8009024:	d00c      	beq.n	8009040 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8009026:	68fb      	ldr	r3, [r7, #12]
 8009028:	f003 0320 	and.w	r3, r3, #32
 800902c:	2b00      	cmp	r3, #0
 800902e:	d007      	beq.n	8009040 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	681b      	ldr	r3, [r3, #0]
 8009034:	f06f 0220 	mvn.w	r2, #32
 8009038:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800903a:	6878      	ldr	r0, [r7, #4]
 800903c:	f000 fd48 	bl	8009ad0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009040:	bf00      	nop
 8009042:	3710      	adds	r7, #16
 8009044:	46bd      	mov	sp, r7
 8009046:	bd80      	pop	{r7, pc}

08009048 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8009048:	b580      	push	{r7, lr}
 800904a:	b086      	sub	sp, #24
 800904c:	af00      	add	r7, sp, #0
 800904e:	60f8      	str	r0, [r7, #12]
 8009050:	60b9      	str	r1, [r7, #8]
 8009052:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009054:	2300      	movs	r3, #0
 8009056:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8009058:	68fb      	ldr	r3, [r7, #12]
 800905a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800905e:	2b01      	cmp	r3, #1
 8009060:	d101      	bne.n	8009066 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8009062:	2302      	movs	r3, #2
 8009064:	e0ae      	b.n	80091c4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8009066:	68fb      	ldr	r3, [r7, #12]
 8009068:	2201      	movs	r2, #1
 800906a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	2b0c      	cmp	r3, #12
 8009072:	f200 809f 	bhi.w	80091b4 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8009076:	a201      	add	r2, pc, #4	@ (adr r2, 800907c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8009078:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800907c:	080090b1 	.word	0x080090b1
 8009080:	080091b5 	.word	0x080091b5
 8009084:	080091b5 	.word	0x080091b5
 8009088:	080091b5 	.word	0x080091b5
 800908c:	080090f1 	.word	0x080090f1
 8009090:	080091b5 	.word	0x080091b5
 8009094:	080091b5 	.word	0x080091b5
 8009098:	080091b5 	.word	0x080091b5
 800909c:	08009133 	.word	0x08009133
 80090a0:	080091b5 	.word	0x080091b5
 80090a4:	080091b5 	.word	0x080091b5
 80090a8:	080091b5 	.word	0x080091b5
 80090ac:	08009173 	.word	0x08009173
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80090b0:	68fb      	ldr	r3, [r7, #12]
 80090b2:	681b      	ldr	r3, [r3, #0]
 80090b4:	68b9      	ldr	r1, [r7, #8]
 80090b6:	4618      	mov	r0, r3
 80090b8:	f000 f9fe 	bl	80094b8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80090bc:	68fb      	ldr	r3, [r7, #12]
 80090be:	681b      	ldr	r3, [r3, #0]
 80090c0:	699a      	ldr	r2, [r3, #24]
 80090c2:	68fb      	ldr	r3, [r7, #12]
 80090c4:	681b      	ldr	r3, [r3, #0]
 80090c6:	f042 0208 	orr.w	r2, r2, #8
 80090ca:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80090cc:	68fb      	ldr	r3, [r7, #12]
 80090ce:	681b      	ldr	r3, [r3, #0]
 80090d0:	699a      	ldr	r2, [r3, #24]
 80090d2:	68fb      	ldr	r3, [r7, #12]
 80090d4:	681b      	ldr	r3, [r3, #0]
 80090d6:	f022 0204 	bic.w	r2, r2, #4
 80090da:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80090dc:	68fb      	ldr	r3, [r7, #12]
 80090de:	681b      	ldr	r3, [r3, #0]
 80090e0:	6999      	ldr	r1, [r3, #24]
 80090e2:	68bb      	ldr	r3, [r7, #8]
 80090e4:	691a      	ldr	r2, [r3, #16]
 80090e6:	68fb      	ldr	r3, [r7, #12]
 80090e8:	681b      	ldr	r3, [r3, #0]
 80090ea:	430a      	orrs	r2, r1
 80090ec:	619a      	str	r2, [r3, #24]
      break;
 80090ee:	e064      	b.n	80091ba <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80090f0:	68fb      	ldr	r3, [r7, #12]
 80090f2:	681b      	ldr	r3, [r3, #0]
 80090f4:	68b9      	ldr	r1, [r7, #8]
 80090f6:	4618      	mov	r0, r3
 80090f8:	f000 fa44 	bl	8009584 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80090fc:	68fb      	ldr	r3, [r7, #12]
 80090fe:	681b      	ldr	r3, [r3, #0]
 8009100:	699a      	ldr	r2, [r3, #24]
 8009102:	68fb      	ldr	r3, [r7, #12]
 8009104:	681b      	ldr	r3, [r3, #0]
 8009106:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800910a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800910c:	68fb      	ldr	r3, [r7, #12]
 800910e:	681b      	ldr	r3, [r3, #0]
 8009110:	699a      	ldr	r2, [r3, #24]
 8009112:	68fb      	ldr	r3, [r7, #12]
 8009114:	681b      	ldr	r3, [r3, #0]
 8009116:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800911a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800911c:	68fb      	ldr	r3, [r7, #12]
 800911e:	681b      	ldr	r3, [r3, #0]
 8009120:	6999      	ldr	r1, [r3, #24]
 8009122:	68bb      	ldr	r3, [r7, #8]
 8009124:	691b      	ldr	r3, [r3, #16]
 8009126:	021a      	lsls	r2, r3, #8
 8009128:	68fb      	ldr	r3, [r7, #12]
 800912a:	681b      	ldr	r3, [r3, #0]
 800912c:	430a      	orrs	r2, r1
 800912e:	619a      	str	r2, [r3, #24]
      break;
 8009130:	e043      	b.n	80091ba <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8009132:	68fb      	ldr	r3, [r7, #12]
 8009134:	681b      	ldr	r3, [r3, #0]
 8009136:	68b9      	ldr	r1, [r7, #8]
 8009138:	4618      	mov	r0, r3
 800913a:	f000 fa8f 	bl	800965c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800913e:	68fb      	ldr	r3, [r7, #12]
 8009140:	681b      	ldr	r3, [r3, #0]
 8009142:	69da      	ldr	r2, [r3, #28]
 8009144:	68fb      	ldr	r3, [r7, #12]
 8009146:	681b      	ldr	r3, [r3, #0]
 8009148:	f042 0208 	orr.w	r2, r2, #8
 800914c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800914e:	68fb      	ldr	r3, [r7, #12]
 8009150:	681b      	ldr	r3, [r3, #0]
 8009152:	69da      	ldr	r2, [r3, #28]
 8009154:	68fb      	ldr	r3, [r7, #12]
 8009156:	681b      	ldr	r3, [r3, #0]
 8009158:	f022 0204 	bic.w	r2, r2, #4
 800915c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800915e:	68fb      	ldr	r3, [r7, #12]
 8009160:	681b      	ldr	r3, [r3, #0]
 8009162:	69d9      	ldr	r1, [r3, #28]
 8009164:	68bb      	ldr	r3, [r7, #8]
 8009166:	691a      	ldr	r2, [r3, #16]
 8009168:	68fb      	ldr	r3, [r7, #12]
 800916a:	681b      	ldr	r3, [r3, #0]
 800916c:	430a      	orrs	r2, r1
 800916e:	61da      	str	r2, [r3, #28]
      break;
 8009170:	e023      	b.n	80091ba <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8009172:	68fb      	ldr	r3, [r7, #12]
 8009174:	681b      	ldr	r3, [r3, #0]
 8009176:	68b9      	ldr	r1, [r7, #8]
 8009178:	4618      	mov	r0, r3
 800917a:	f000 fad9 	bl	8009730 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800917e:	68fb      	ldr	r3, [r7, #12]
 8009180:	681b      	ldr	r3, [r3, #0]
 8009182:	69da      	ldr	r2, [r3, #28]
 8009184:	68fb      	ldr	r3, [r7, #12]
 8009186:	681b      	ldr	r3, [r3, #0]
 8009188:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800918c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800918e:	68fb      	ldr	r3, [r7, #12]
 8009190:	681b      	ldr	r3, [r3, #0]
 8009192:	69da      	ldr	r2, [r3, #28]
 8009194:	68fb      	ldr	r3, [r7, #12]
 8009196:	681b      	ldr	r3, [r3, #0]
 8009198:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800919c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800919e:	68fb      	ldr	r3, [r7, #12]
 80091a0:	681b      	ldr	r3, [r3, #0]
 80091a2:	69d9      	ldr	r1, [r3, #28]
 80091a4:	68bb      	ldr	r3, [r7, #8]
 80091a6:	691b      	ldr	r3, [r3, #16]
 80091a8:	021a      	lsls	r2, r3, #8
 80091aa:	68fb      	ldr	r3, [r7, #12]
 80091ac:	681b      	ldr	r3, [r3, #0]
 80091ae:	430a      	orrs	r2, r1
 80091b0:	61da      	str	r2, [r3, #28]
      break;
 80091b2:	e002      	b.n	80091ba <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80091b4:	2301      	movs	r3, #1
 80091b6:	75fb      	strb	r3, [r7, #23]
      break;
 80091b8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80091ba:	68fb      	ldr	r3, [r7, #12]
 80091bc:	2200      	movs	r2, #0
 80091be:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80091c2:	7dfb      	ldrb	r3, [r7, #23]
}
 80091c4:	4618      	mov	r0, r3
 80091c6:	3718      	adds	r7, #24
 80091c8:	46bd      	mov	sp, r7
 80091ca:	bd80      	pop	{r7, pc}

080091cc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80091cc:	b580      	push	{r7, lr}
 80091ce:	b084      	sub	sp, #16
 80091d0:	af00      	add	r7, sp, #0
 80091d2:	6078      	str	r0, [r7, #4]
 80091d4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80091d6:	2300      	movs	r3, #0
 80091d8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80091e0:	2b01      	cmp	r3, #1
 80091e2:	d101      	bne.n	80091e8 <HAL_TIM_ConfigClockSource+0x1c>
 80091e4:	2302      	movs	r3, #2
 80091e6:	e0b4      	b.n	8009352 <HAL_TIM_ConfigClockSource+0x186>
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	2201      	movs	r2, #1
 80091ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	2202      	movs	r2, #2
 80091f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	681b      	ldr	r3, [r3, #0]
 80091fc:	689b      	ldr	r3, [r3, #8]
 80091fe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8009200:	68bb      	ldr	r3, [r7, #8]
 8009202:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8009206:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009208:	68bb      	ldr	r3, [r7, #8]
 800920a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800920e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	681b      	ldr	r3, [r3, #0]
 8009214:	68ba      	ldr	r2, [r7, #8]
 8009216:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8009218:	683b      	ldr	r3, [r7, #0]
 800921a:	681b      	ldr	r3, [r3, #0]
 800921c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009220:	d03e      	beq.n	80092a0 <HAL_TIM_ConfigClockSource+0xd4>
 8009222:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009226:	f200 8087 	bhi.w	8009338 <HAL_TIM_ConfigClockSource+0x16c>
 800922a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800922e:	f000 8086 	beq.w	800933e <HAL_TIM_ConfigClockSource+0x172>
 8009232:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009236:	d87f      	bhi.n	8009338 <HAL_TIM_ConfigClockSource+0x16c>
 8009238:	2b70      	cmp	r3, #112	@ 0x70
 800923a:	d01a      	beq.n	8009272 <HAL_TIM_ConfigClockSource+0xa6>
 800923c:	2b70      	cmp	r3, #112	@ 0x70
 800923e:	d87b      	bhi.n	8009338 <HAL_TIM_ConfigClockSource+0x16c>
 8009240:	2b60      	cmp	r3, #96	@ 0x60
 8009242:	d050      	beq.n	80092e6 <HAL_TIM_ConfigClockSource+0x11a>
 8009244:	2b60      	cmp	r3, #96	@ 0x60
 8009246:	d877      	bhi.n	8009338 <HAL_TIM_ConfigClockSource+0x16c>
 8009248:	2b50      	cmp	r3, #80	@ 0x50
 800924a:	d03c      	beq.n	80092c6 <HAL_TIM_ConfigClockSource+0xfa>
 800924c:	2b50      	cmp	r3, #80	@ 0x50
 800924e:	d873      	bhi.n	8009338 <HAL_TIM_ConfigClockSource+0x16c>
 8009250:	2b40      	cmp	r3, #64	@ 0x40
 8009252:	d058      	beq.n	8009306 <HAL_TIM_ConfigClockSource+0x13a>
 8009254:	2b40      	cmp	r3, #64	@ 0x40
 8009256:	d86f      	bhi.n	8009338 <HAL_TIM_ConfigClockSource+0x16c>
 8009258:	2b30      	cmp	r3, #48	@ 0x30
 800925a:	d064      	beq.n	8009326 <HAL_TIM_ConfigClockSource+0x15a>
 800925c:	2b30      	cmp	r3, #48	@ 0x30
 800925e:	d86b      	bhi.n	8009338 <HAL_TIM_ConfigClockSource+0x16c>
 8009260:	2b20      	cmp	r3, #32
 8009262:	d060      	beq.n	8009326 <HAL_TIM_ConfigClockSource+0x15a>
 8009264:	2b20      	cmp	r3, #32
 8009266:	d867      	bhi.n	8009338 <HAL_TIM_ConfigClockSource+0x16c>
 8009268:	2b00      	cmp	r3, #0
 800926a:	d05c      	beq.n	8009326 <HAL_TIM_ConfigClockSource+0x15a>
 800926c:	2b10      	cmp	r3, #16
 800926e:	d05a      	beq.n	8009326 <HAL_TIM_ConfigClockSource+0x15a>
 8009270:	e062      	b.n	8009338 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8009276:	683b      	ldr	r3, [r7, #0]
 8009278:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800927a:	683b      	ldr	r3, [r7, #0]
 800927c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800927e:	683b      	ldr	r3, [r7, #0]
 8009280:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8009282:	f000 fb1f 	bl	80098c4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	681b      	ldr	r3, [r3, #0]
 800928a:	689b      	ldr	r3, [r3, #8]
 800928c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800928e:	68bb      	ldr	r3, [r7, #8]
 8009290:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8009294:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	681b      	ldr	r3, [r3, #0]
 800929a:	68ba      	ldr	r2, [r7, #8]
 800929c:	609a      	str	r2, [r3, #8]
      break;
 800929e:	e04f      	b.n	8009340 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80092a4:	683b      	ldr	r3, [r7, #0]
 80092a6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80092a8:	683b      	ldr	r3, [r7, #0]
 80092aa:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80092ac:	683b      	ldr	r3, [r7, #0]
 80092ae:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80092b0:	f000 fb08 	bl	80098c4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	681b      	ldr	r3, [r3, #0]
 80092b8:	689a      	ldr	r2, [r3, #8]
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	681b      	ldr	r3, [r3, #0]
 80092be:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80092c2:	609a      	str	r2, [r3, #8]
      break;
 80092c4:	e03c      	b.n	8009340 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80092ca:	683b      	ldr	r3, [r7, #0]
 80092cc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80092ce:	683b      	ldr	r3, [r7, #0]
 80092d0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80092d2:	461a      	mov	r2, r3
 80092d4:	f000 fa7c 	bl	80097d0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	681b      	ldr	r3, [r3, #0]
 80092dc:	2150      	movs	r1, #80	@ 0x50
 80092de:	4618      	mov	r0, r3
 80092e0:	f000 fad5 	bl	800988e <TIM_ITRx_SetConfig>
      break;
 80092e4:	e02c      	b.n	8009340 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80092ea:	683b      	ldr	r3, [r7, #0]
 80092ec:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80092ee:	683b      	ldr	r3, [r7, #0]
 80092f0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80092f2:	461a      	mov	r2, r3
 80092f4:	f000 fa9b 	bl	800982e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	681b      	ldr	r3, [r3, #0]
 80092fc:	2160      	movs	r1, #96	@ 0x60
 80092fe:	4618      	mov	r0, r3
 8009300:	f000 fac5 	bl	800988e <TIM_ITRx_SetConfig>
      break;
 8009304:	e01c      	b.n	8009340 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800930a:	683b      	ldr	r3, [r7, #0]
 800930c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800930e:	683b      	ldr	r3, [r7, #0]
 8009310:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009312:	461a      	mov	r2, r3
 8009314:	f000 fa5c 	bl	80097d0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	681b      	ldr	r3, [r3, #0]
 800931c:	2140      	movs	r1, #64	@ 0x40
 800931e:	4618      	mov	r0, r3
 8009320:	f000 fab5 	bl	800988e <TIM_ITRx_SetConfig>
      break;
 8009324:	e00c      	b.n	8009340 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	681a      	ldr	r2, [r3, #0]
 800932a:	683b      	ldr	r3, [r7, #0]
 800932c:	681b      	ldr	r3, [r3, #0]
 800932e:	4619      	mov	r1, r3
 8009330:	4610      	mov	r0, r2
 8009332:	f000 faac 	bl	800988e <TIM_ITRx_SetConfig>
      break;
 8009336:	e003      	b.n	8009340 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8009338:	2301      	movs	r3, #1
 800933a:	73fb      	strb	r3, [r7, #15]
      break;
 800933c:	e000      	b.n	8009340 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800933e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	2201      	movs	r2, #1
 8009344:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	2200      	movs	r2, #0
 800934c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8009350:	7bfb      	ldrb	r3, [r7, #15]
}
 8009352:	4618      	mov	r0, r3
 8009354:	3710      	adds	r7, #16
 8009356:	46bd      	mov	sp, r7
 8009358:	bd80      	pop	{r7, pc}

0800935a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800935a:	b480      	push	{r7}
 800935c:	b083      	sub	sp, #12
 800935e:	af00      	add	r7, sp, #0
 8009360:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009362:	bf00      	nop
 8009364:	370c      	adds	r7, #12
 8009366:	46bd      	mov	sp, r7
 8009368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800936c:	4770      	bx	lr

0800936e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800936e:	b480      	push	{r7}
 8009370:	b083      	sub	sp, #12
 8009372:	af00      	add	r7, sp, #0
 8009374:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009376:	bf00      	nop
 8009378:	370c      	adds	r7, #12
 800937a:	46bd      	mov	sp, r7
 800937c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009380:	4770      	bx	lr

08009382 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009382:	b480      	push	{r7}
 8009384:	b083      	sub	sp, #12
 8009386:	af00      	add	r7, sp, #0
 8009388:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800938a:	bf00      	nop
 800938c:	370c      	adds	r7, #12
 800938e:	46bd      	mov	sp, r7
 8009390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009394:	4770      	bx	lr

08009396 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009396:	b480      	push	{r7}
 8009398:	b083      	sub	sp, #12
 800939a:	af00      	add	r7, sp, #0
 800939c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800939e:	bf00      	nop
 80093a0:	370c      	adds	r7, #12
 80093a2:	46bd      	mov	sp, r7
 80093a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093a8:	4770      	bx	lr
	...

080093ac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80093ac:	b480      	push	{r7}
 80093ae:	b085      	sub	sp, #20
 80093b0:	af00      	add	r7, sp, #0
 80093b2:	6078      	str	r0, [r7, #4]
 80093b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	681b      	ldr	r3, [r3, #0]
 80093ba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	4a37      	ldr	r2, [pc, #220]	@ (800949c <TIM_Base_SetConfig+0xf0>)
 80093c0:	4293      	cmp	r3, r2
 80093c2:	d00f      	beq.n	80093e4 <TIM_Base_SetConfig+0x38>
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80093ca:	d00b      	beq.n	80093e4 <TIM_Base_SetConfig+0x38>
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	4a34      	ldr	r2, [pc, #208]	@ (80094a0 <TIM_Base_SetConfig+0xf4>)
 80093d0:	4293      	cmp	r3, r2
 80093d2:	d007      	beq.n	80093e4 <TIM_Base_SetConfig+0x38>
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	4a33      	ldr	r2, [pc, #204]	@ (80094a4 <TIM_Base_SetConfig+0xf8>)
 80093d8:	4293      	cmp	r3, r2
 80093da:	d003      	beq.n	80093e4 <TIM_Base_SetConfig+0x38>
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	4a32      	ldr	r2, [pc, #200]	@ (80094a8 <TIM_Base_SetConfig+0xfc>)
 80093e0:	4293      	cmp	r3, r2
 80093e2:	d108      	bne.n	80093f6 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80093e4:	68fb      	ldr	r3, [r7, #12]
 80093e6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80093ea:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80093ec:	683b      	ldr	r3, [r7, #0]
 80093ee:	685b      	ldr	r3, [r3, #4]
 80093f0:	68fa      	ldr	r2, [r7, #12]
 80093f2:	4313      	orrs	r3, r2
 80093f4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	4a28      	ldr	r2, [pc, #160]	@ (800949c <TIM_Base_SetConfig+0xf0>)
 80093fa:	4293      	cmp	r3, r2
 80093fc:	d01b      	beq.n	8009436 <TIM_Base_SetConfig+0x8a>
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009404:	d017      	beq.n	8009436 <TIM_Base_SetConfig+0x8a>
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	4a25      	ldr	r2, [pc, #148]	@ (80094a0 <TIM_Base_SetConfig+0xf4>)
 800940a:	4293      	cmp	r3, r2
 800940c:	d013      	beq.n	8009436 <TIM_Base_SetConfig+0x8a>
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	4a24      	ldr	r2, [pc, #144]	@ (80094a4 <TIM_Base_SetConfig+0xf8>)
 8009412:	4293      	cmp	r3, r2
 8009414:	d00f      	beq.n	8009436 <TIM_Base_SetConfig+0x8a>
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	4a23      	ldr	r2, [pc, #140]	@ (80094a8 <TIM_Base_SetConfig+0xfc>)
 800941a:	4293      	cmp	r3, r2
 800941c:	d00b      	beq.n	8009436 <TIM_Base_SetConfig+0x8a>
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	4a22      	ldr	r2, [pc, #136]	@ (80094ac <TIM_Base_SetConfig+0x100>)
 8009422:	4293      	cmp	r3, r2
 8009424:	d007      	beq.n	8009436 <TIM_Base_SetConfig+0x8a>
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	4a21      	ldr	r2, [pc, #132]	@ (80094b0 <TIM_Base_SetConfig+0x104>)
 800942a:	4293      	cmp	r3, r2
 800942c:	d003      	beq.n	8009436 <TIM_Base_SetConfig+0x8a>
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	4a20      	ldr	r2, [pc, #128]	@ (80094b4 <TIM_Base_SetConfig+0x108>)
 8009432:	4293      	cmp	r3, r2
 8009434:	d108      	bne.n	8009448 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009436:	68fb      	ldr	r3, [r7, #12]
 8009438:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800943c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800943e:	683b      	ldr	r3, [r7, #0]
 8009440:	68db      	ldr	r3, [r3, #12]
 8009442:	68fa      	ldr	r2, [r7, #12]
 8009444:	4313      	orrs	r3, r2
 8009446:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009448:	68fb      	ldr	r3, [r7, #12]
 800944a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800944e:	683b      	ldr	r3, [r7, #0]
 8009450:	695b      	ldr	r3, [r3, #20]
 8009452:	4313      	orrs	r3, r2
 8009454:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009456:	683b      	ldr	r3, [r7, #0]
 8009458:	689a      	ldr	r2, [r3, #8]
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800945e:	683b      	ldr	r3, [r7, #0]
 8009460:	681a      	ldr	r2, [r3, #0]
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	4a0c      	ldr	r2, [pc, #48]	@ (800949c <TIM_Base_SetConfig+0xf0>)
 800946a:	4293      	cmp	r3, r2
 800946c:	d103      	bne.n	8009476 <TIM_Base_SetConfig+0xca>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800946e:	683b      	ldr	r3, [r7, #0]
 8009470:	691a      	ldr	r2, [r3, #16]
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	681b      	ldr	r3, [r3, #0]
 800947a:	f043 0204 	orr.w	r2, r3, #4
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	2201      	movs	r2, #1
 8009486:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	68fa      	ldr	r2, [r7, #12]
 800948c:	601a      	str	r2, [r3, #0]
}
 800948e:	bf00      	nop
 8009490:	3714      	adds	r7, #20
 8009492:	46bd      	mov	sp, r7
 8009494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009498:	4770      	bx	lr
 800949a:	bf00      	nop
 800949c:	40010000 	.word	0x40010000
 80094a0:	40000400 	.word	0x40000400
 80094a4:	40000800 	.word	0x40000800
 80094a8:	40000c00 	.word	0x40000c00
 80094ac:	40014000 	.word	0x40014000
 80094b0:	40014400 	.word	0x40014400
 80094b4:	40014800 	.word	0x40014800

080094b8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80094b8:	b480      	push	{r7}
 80094ba:	b087      	sub	sp, #28
 80094bc:	af00      	add	r7, sp, #0
 80094be:	6078      	str	r0, [r7, #4]
 80094c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	6a1b      	ldr	r3, [r3, #32]
 80094c6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	6a1b      	ldr	r3, [r3, #32]
 80094cc:	f023 0201 	bic.w	r2, r3, #1
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	685b      	ldr	r3, [r3, #4]
 80094d8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	699b      	ldr	r3, [r3, #24]
 80094de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80094e0:	68fb      	ldr	r3, [r7, #12]
 80094e2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80094e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80094e8:	68fb      	ldr	r3, [r7, #12]
 80094ea:	f023 0303 	bic.w	r3, r3, #3
 80094ee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80094f0:	683b      	ldr	r3, [r7, #0]
 80094f2:	681b      	ldr	r3, [r3, #0]
 80094f4:	68fa      	ldr	r2, [r7, #12]
 80094f6:	4313      	orrs	r3, r2
 80094f8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80094fa:	697b      	ldr	r3, [r7, #20]
 80094fc:	f023 0302 	bic.w	r3, r3, #2
 8009500:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8009502:	683b      	ldr	r3, [r7, #0]
 8009504:	689b      	ldr	r3, [r3, #8]
 8009506:	697a      	ldr	r2, [r7, #20]
 8009508:	4313      	orrs	r3, r2
 800950a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	4a1c      	ldr	r2, [pc, #112]	@ (8009580 <TIM_OC1_SetConfig+0xc8>)
 8009510:	4293      	cmp	r3, r2
 8009512:	d10c      	bne.n	800952e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8009514:	697b      	ldr	r3, [r7, #20]
 8009516:	f023 0308 	bic.w	r3, r3, #8
 800951a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800951c:	683b      	ldr	r3, [r7, #0]
 800951e:	68db      	ldr	r3, [r3, #12]
 8009520:	697a      	ldr	r2, [r7, #20]
 8009522:	4313      	orrs	r3, r2
 8009524:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8009526:	697b      	ldr	r3, [r7, #20]
 8009528:	f023 0304 	bic.w	r3, r3, #4
 800952c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	4a13      	ldr	r2, [pc, #76]	@ (8009580 <TIM_OC1_SetConfig+0xc8>)
 8009532:	4293      	cmp	r3, r2
 8009534:	d111      	bne.n	800955a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8009536:	693b      	ldr	r3, [r7, #16]
 8009538:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800953c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800953e:	693b      	ldr	r3, [r7, #16]
 8009540:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8009544:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8009546:	683b      	ldr	r3, [r7, #0]
 8009548:	695b      	ldr	r3, [r3, #20]
 800954a:	693a      	ldr	r2, [r7, #16]
 800954c:	4313      	orrs	r3, r2
 800954e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8009550:	683b      	ldr	r3, [r7, #0]
 8009552:	699b      	ldr	r3, [r3, #24]
 8009554:	693a      	ldr	r2, [r7, #16]
 8009556:	4313      	orrs	r3, r2
 8009558:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	693a      	ldr	r2, [r7, #16]
 800955e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	68fa      	ldr	r2, [r7, #12]
 8009564:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8009566:	683b      	ldr	r3, [r7, #0]
 8009568:	685a      	ldr	r2, [r3, #4]
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	697a      	ldr	r2, [r7, #20]
 8009572:	621a      	str	r2, [r3, #32]
}
 8009574:	bf00      	nop
 8009576:	371c      	adds	r7, #28
 8009578:	46bd      	mov	sp, r7
 800957a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800957e:	4770      	bx	lr
 8009580:	40010000 	.word	0x40010000

08009584 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009584:	b480      	push	{r7}
 8009586:	b087      	sub	sp, #28
 8009588:	af00      	add	r7, sp, #0
 800958a:	6078      	str	r0, [r7, #4]
 800958c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	6a1b      	ldr	r3, [r3, #32]
 8009592:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	6a1b      	ldr	r3, [r3, #32]
 8009598:	f023 0210 	bic.w	r2, r3, #16
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	685b      	ldr	r3, [r3, #4]
 80095a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	699b      	ldr	r3, [r3, #24]
 80095aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80095ac:	68fb      	ldr	r3, [r7, #12]
 80095ae:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80095b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80095b4:	68fb      	ldr	r3, [r7, #12]
 80095b6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80095ba:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80095bc:	683b      	ldr	r3, [r7, #0]
 80095be:	681b      	ldr	r3, [r3, #0]
 80095c0:	021b      	lsls	r3, r3, #8
 80095c2:	68fa      	ldr	r2, [r7, #12]
 80095c4:	4313      	orrs	r3, r2
 80095c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80095c8:	697b      	ldr	r3, [r7, #20]
 80095ca:	f023 0320 	bic.w	r3, r3, #32
 80095ce:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80095d0:	683b      	ldr	r3, [r7, #0]
 80095d2:	689b      	ldr	r3, [r3, #8]
 80095d4:	011b      	lsls	r3, r3, #4
 80095d6:	697a      	ldr	r2, [r7, #20]
 80095d8:	4313      	orrs	r3, r2
 80095da:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	4a1e      	ldr	r2, [pc, #120]	@ (8009658 <TIM_OC2_SetConfig+0xd4>)
 80095e0:	4293      	cmp	r3, r2
 80095e2:	d10d      	bne.n	8009600 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80095e4:	697b      	ldr	r3, [r7, #20]
 80095e6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80095ea:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80095ec:	683b      	ldr	r3, [r7, #0]
 80095ee:	68db      	ldr	r3, [r3, #12]
 80095f0:	011b      	lsls	r3, r3, #4
 80095f2:	697a      	ldr	r2, [r7, #20]
 80095f4:	4313      	orrs	r3, r2
 80095f6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80095f8:	697b      	ldr	r3, [r7, #20]
 80095fa:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80095fe:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	4a15      	ldr	r2, [pc, #84]	@ (8009658 <TIM_OC2_SetConfig+0xd4>)
 8009604:	4293      	cmp	r3, r2
 8009606:	d113      	bne.n	8009630 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8009608:	693b      	ldr	r3, [r7, #16]
 800960a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800960e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8009610:	693b      	ldr	r3, [r7, #16]
 8009612:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8009616:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8009618:	683b      	ldr	r3, [r7, #0]
 800961a:	695b      	ldr	r3, [r3, #20]
 800961c:	009b      	lsls	r3, r3, #2
 800961e:	693a      	ldr	r2, [r7, #16]
 8009620:	4313      	orrs	r3, r2
 8009622:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8009624:	683b      	ldr	r3, [r7, #0]
 8009626:	699b      	ldr	r3, [r3, #24]
 8009628:	009b      	lsls	r3, r3, #2
 800962a:	693a      	ldr	r2, [r7, #16]
 800962c:	4313      	orrs	r3, r2
 800962e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	693a      	ldr	r2, [r7, #16]
 8009634:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	68fa      	ldr	r2, [r7, #12]
 800963a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800963c:	683b      	ldr	r3, [r7, #0]
 800963e:	685a      	ldr	r2, [r3, #4]
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	697a      	ldr	r2, [r7, #20]
 8009648:	621a      	str	r2, [r3, #32]
}
 800964a:	bf00      	nop
 800964c:	371c      	adds	r7, #28
 800964e:	46bd      	mov	sp, r7
 8009650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009654:	4770      	bx	lr
 8009656:	bf00      	nop
 8009658:	40010000 	.word	0x40010000

0800965c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800965c:	b480      	push	{r7}
 800965e:	b087      	sub	sp, #28
 8009660:	af00      	add	r7, sp, #0
 8009662:	6078      	str	r0, [r7, #4]
 8009664:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	6a1b      	ldr	r3, [r3, #32]
 800966a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	6a1b      	ldr	r3, [r3, #32]
 8009670:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	685b      	ldr	r3, [r3, #4]
 800967c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	69db      	ldr	r3, [r3, #28]
 8009682:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8009684:	68fb      	ldr	r3, [r7, #12]
 8009686:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800968a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800968c:	68fb      	ldr	r3, [r7, #12]
 800968e:	f023 0303 	bic.w	r3, r3, #3
 8009692:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009694:	683b      	ldr	r3, [r7, #0]
 8009696:	681b      	ldr	r3, [r3, #0]
 8009698:	68fa      	ldr	r2, [r7, #12]
 800969a:	4313      	orrs	r3, r2
 800969c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800969e:	697b      	ldr	r3, [r7, #20]
 80096a0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80096a4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80096a6:	683b      	ldr	r3, [r7, #0]
 80096a8:	689b      	ldr	r3, [r3, #8]
 80096aa:	021b      	lsls	r3, r3, #8
 80096ac:	697a      	ldr	r2, [r7, #20]
 80096ae:	4313      	orrs	r3, r2
 80096b0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	4a1d      	ldr	r2, [pc, #116]	@ (800972c <TIM_OC3_SetConfig+0xd0>)
 80096b6:	4293      	cmp	r3, r2
 80096b8:	d10d      	bne.n	80096d6 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80096ba:	697b      	ldr	r3, [r7, #20]
 80096bc:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80096c0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80096c2:	683b      	ldr	r3, [r7, #0]
 80096c4:	68db      	ldr	r3, [r3, #12]
 80096c6:	021b      	lsls	r3, r3, #8
 80096c8:	697a      	ldr	r2, [r7, #20]
 80096ca:	4313      	orrs	r3, r2
 80096cc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80096ce:	697b      	ldr	r3, [r7, #20]
 80096d0:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80096d4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	4a14      	ldr	r2, [pc, #80]	@ (800972c <TIM_OC3_SetConfig+0xd0>)
 80096da:	4293      	cmp	r3, r2
 80096dc:	d113      	bne.n	8009706 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80096de:	693b      	ldr	r3, [r7, #16]
 80096e0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80096e4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80096e6:	693b      	ldr	r3, [r7, #16]
 80096e8:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80096ec:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80096ee:	683b      	ldr	r3, [r7, #0]
 80096f0:	695b      	ldr	r3, [r3, #20]
 80096f2:	011b      	lsls	r3, r3, #4
 80096f4:	693a      	ldr	r2, [r7, #16]
 80096f6:	4313      	orrs	r3, r2
 80096f8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80096fa:	683b      	ldr	r3, [r7, #0]
 80096fc:	699b      	ldr	r3, [r3, #24]
 80096fe:	011b      	lsls	r3, r3, #4
 8009700:	693a      	ldr	r2, [r7, #16]
 8009702:	4313      	orrs	r3, r2
 8009704:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	693a      	ldr	r2, [r7, #16]
 800970a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	68fa      	ldr	r2, [r7, #12]
 8009710:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8009712:	683b      	ldr	r3, [r7, #0]
 8009714:	685a      	ldr	r2, [r3, #4]
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	697a      	ldr	r2, [r7, #20]
 800971e:	621a      	str	r2, [r3, #32]
}
 8009720:	bf00      	nop
 8009722:	371c      	adds	r7, #28
 8009724:	46bd      	mov	sp, r7
 8009726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800972a:	4770      	bx	lr
 800972c:	40010000 	.word	0x40010000

08009730 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009730:	b480      	push	{r7}
 8009732:	b087      	sub	sp, #28
 8009734:	af00      	add	r7, sp, #0
 8009736:	6078      	str	r0, [r7, #4]
 8009738:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	6a1b      	ldr	r3, [r3, #32]
 800973e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	6a1b      	ldr	r3, [r3, #32]
 8009744:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	685b      	ldr	r3, [r3, #4]
 8009750:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	69db      	ldr	r3, [r3, #28]
 8009756:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8009758:	68fb      	ldr	r3, [r7, #12]
 800975a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800975e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8009760:	68fb      	ldr	r3, [r7, #12]
 8009762:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009766:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009768:	683b      	ldr	r3, [r7, #0]
 800976a:	681b      	ldr	r3, [r3, #0]
 800976c:	021b      	lsls	r3, r3, #8
 800976e:	68fa      	ldr	r2, [r7, #12]
 8009770:	4313      	orrs	r3, r2
 8009772:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8009774:	693b      	ldr	r3, [r7, #16]
 8009776:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800977a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800977c:	683b      	ldr	r3, [r7, #0]
 800977e:	689b      	ldr	r3, [r3, #8]
 8009780:	031b      	lsls	r3, r3, #12
 8009782:	693a      	ldr	r2, [r7, #16]
 8009784:	4313      	orrs	r3, r2
 8009786:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	4a10      	ldr	r2, [pc, #64]	@ (80097cc <TIM_OC4_SetConfig+0x9c>)
 800978c:	4293      	cmp	r3, r2
 800978e:	d109      	bne.n	80097a4 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8009790:	697b      	ldr	r3, [r7, #20]
 8009792:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8009796:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8009798:	683b      	ldr	r3, [r7, #0]
 800979a:	695b      	ldr	r3, [r3, #20]
 800979c:	019b      	lsls	r3, r3, #6
 800979e:	697a      	ldr	r2, [r7, #20]
 80097a0:	4313      	orrs	r3, r2
 80097a2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	697a      	ldr	r2, [r7, #20]
 80097a8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	68fa      	ldr	r2, [r7, #12]
 80097ae:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80097b0:	683b      	ldr	r3, [r7, #0]
 80097b2:	685a      	ldr	r2, [r3, #4]
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	693a      	ldr	r2, [r7, #16]
 80097bc:	621a      	str	r2, [r3, #32]
}
 80097be:	bf00      	nop
 80097c0:	371c      	adds	r7, #28
 80097c2:	46bd      	mov	sp, r7
 80097c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097c8:	4770      	bx	lr
 80097ca:	bf00      	nop
 80097cc:	40010000 	.word	0x40010000

080097d0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80097d0:	b480      	push	{r7}
 80097d2:	b087      	sub	sp, #28
 80097d4:	af00      	add	r7, sp, #0
 80097d6:	60f8      	str	r0, [r7, #12]
 80097d8:	60b9      	str	r1, [r7, #8]
 80097da:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80097dc:	68fb      	ldr	r3, [r7, #12]
 80097de:	6a1b      	ldr	r3, [r3, #32]
 80097e0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80097e2:	68fb      	ldr	r3, [r7, #12]
 80097e4:	6a1b      	ldr	r3, [r3, #32]
 80097e6:	f023 0201 	bic.w	r2, r3, #1
 80097ea:	68fb      	ldr	r3, [r7, #12]
 80097ec:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80097ee:	68fb      	ldr	r3, [r7, #12]
 80097f0:	699b      	ldr	r3, [r3, #24]
 80097f2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80097f4:	693b      	ldr	r3, [r7, #16]
 80097f6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80097fa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	011b      	lsls	r3, r3, #4
 8009800:	693a      	ldr	r2, [r7, #16]
 8009802:	4313      	orrs	r3, r2
 8009804:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009806:	697b      	ldr	r3, [r7, #20]
 8009808:	f023 030a 	bic.w	r3, r3, #10
 800980c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800980e:	697a      	ldr	r2, [r7, #20]
 8009810:	68bb      	ldr	r3, [r7, #8]
 8009812:	4313      	orrs	r3, r2
 8009814:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009816:	68fb      	ldr	r3, [r7, #12]
 8009818:	693a      	ldr	r2, [r7, #16]
 800981a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800981c:	68fb      	ldr	r3, [r7, #12]
 800981e:	697a      	ldr	r2, [r7, #20]
 8009820:	621a      	str	r2, [r3, #32]
}
 8009822:	bf00      	nop
 8009824:	371c      	adds	r7, #28
 8009826:	46bd      	mov	sp, r7
 8009828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800982c:	4770      	bx	lr

0800982e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800982e:	b480      	push	{r7}
 8009830:	b087      	sub	sp, #28
 8009832:	af00      	add	r7, sp, #0
 8009834:	60f8      	str	r0, [r7, #12]
 8009836:	60b9      	str	r1, [r7, #8]
 8009838:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800983a:	68fb      	ldr	r3, [r7, #12]
 800983c:	6a1b      	ldr	r3, [r3, #32]
 800983e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009840:	68fb      	ldr	r3, [r7, #12]
 8009842:	6a1b      	ldr	r3, [r3, #32]
 8009844:	f023 0210 	bic.w	r2, r3, #16
 8009848:	68fb      	ldr	r3, [r7, #12]
 800984a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800984c:	68fb      	ldr	r3, [r7, #12]
 800984e:	699b      	ldr	r3, [r3, #24]
 8009850:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009852:	693b      	ldr	r3, [r7, #16]
 8009854:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8009858:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	031b      	lsls	r3, r3, #12
 800985e:	693a      	ldr	r2, [r7, #16]
 8009860:	4313      	orrs	r3, r2
 8009862:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009864:	697b      	ldr	r3, [r7, #20]
 8009866:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800986a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800986c:	68bb      	ldr	r3, [r7, #8]
 800986e:	011b      	lsls	r3, r3, #4
 8009870:	697a      	ldr	r2, [r7, #20]
 8009872:	4313      	orrs	r3, r2
 8009874:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009876:	68fb      	ldr	r3, [r7, #12]
 8009878:	693a      	ldr	r2, [r7, #16]
 800987a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800987c:	68fb      	ldr	r3, [r7, #12]
 800987e:	697a      	ldr	r2, [r7, #20]
 8009880:	621a      	str	r2, [r3, #32]
}
 8009882:	bf00      	nop
 8009884:	371c      	adds	r7, #28
 8009886:	46bd      	mov	sp, r7
 8009888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800988c:	4770      	bx	lr

0800988e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800988e:	b480      	push	{r7}
 8009890:	b085      	sub	sp, #20
 8009892:	af00      	add	r7, sp, #0
 8009894:	6078      	str	r0, [r7, #4]
 8009896:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	689b      	ldr	r3, [r3, #8]
 800989c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800989e:	68fb      	ldr	r3, [r7, #12]
 80098a0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80098a4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80098a6:	683a      	ldr	r2, [r7, #0]
 80098a8:	68fb      	ldr	r3, [r7, #12]
 80098aa:	4313      	orrs	r3, r2
 80098ac:	f043 0307 	orr.w	r3, r3, #7
 80098b0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	68fa      	ldr	r2, [r7, #12]
 80098b6:	609a      	str	r2, [r3, #8]
}
 80098b8:	bf00      	nop
 80098ba:	3714      	adds	r7, #20
 80098bc:	46bd      	mov	sp, r7
 80098be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098c2:	4770      	bx	lr

080098c4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80098c4:	b480      	push	{r7}
 80098c6:	b087      	sub	sp, #28
 80098c8:	af00      	add	r7, sp, #0
 80098ca:	60f8      	str	r0, [r7, #12]
 80098cc:	60b9      	str	r1, [r7, #8]
 80098ce:	607a      	str	r2, [r7, #4]
 80098d0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80098d2:	68fb      	ldr	r3, [r7, #12]
 80098d4:	689b      	ldr	r3, [r3, #8]
 80098d6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80098d8:	697b      	ldr	r3, [r7, #20]
 80098da:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80098de:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80098e0:	683b      	ldr	r3, [r7, #0]
 80098e2:	021a      	lsls	r2, r3, #8
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	431a      	orrs	r2, r3
 80098e8:	68bb      	ldr	r3, [r7, #8]
 80098ea:	4313      	orrs	r3, r2
 80098ec:	697a      	ldr	r2, [r7, #20]
 80098ee:	4313      	orrs	r3, r2
 80098f0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80098f2:	68fb      	ldr	r3, [r7, #12]
 80098f4:	697a      	ldr	r2, [r7, #20]
 80098f6:	609a      	str	r2, [r3, #8]
}
 80098f8:	bf00      	nop
 80098fa:	371c      	adds	r7, #28
 80098fc:	46bd      	mov	sp, r7
 80098fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009902:	4770      	bx	lr

08009904 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8009904:	b480      	push	{r7}
 8009906:	b087      	sub	sp, #28
 8009908:	af00      	add	r7, sp, #0
 800990a:	60f8      	str	r0, [r7, #12]
 800990c:	60b9      	str	r1, [r7, #8]
 800990e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8009910:	68bb      	ldr	r3, [r7, #8]
 8009912:	f003 031f 	and.w	r3, r3, #31
 8009916:	2201      	movs	r2, #1
 8009918:	fa02 f303 	lsl.w	r3, r2, r3
 800991c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800991e:	68fb      	ldr	r3, [r7, #12]
 8009920:	6a1a      	ldr	r2, [r3, #32]
 8009922:	697b      	ldr	r3, [r7, #20]
 8009924:	43db      	mvns	r3, r3
 8009926:	401a      	ands	r2, r3
 8009928:	68fb      	ldr	r3, [r7, #12]
 800992a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800992c:	68fb      	ldr	r3, [r7, #12]
 800992e:	6a1a      	ldr	r2, [r3, #32]
 8009930:	68bb      	ldr	r3, [r7, #8]
 8009932:	f003 031f 	and.w	r3, r3, #31
 8009936:	6879      	ldr	r1, [r7, #4]
 8009938:	fa01 f303 	lsl.w	r3, r1, r3
 800993c:	431a      	orrs	r2, r3
 800993e:	68fb      	ldr	r3, [r7, #12]
 8009940:	621a      	str	r2, [r3, #32]
}
 8009942:	bf00      	nop
 8009944:	371c      	adds	r7, #28
 8009946:	46bd      	mov	sp, r7
 8009948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800994c:	4770      	bx	lr
	...

08009950 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009950:	b480      	push	{r7}
 8009952:	b085      	sub	sp, #20
 8009954:	af00      	add	r7, sp, #0
 8009956:	6078      	str	r0, [r7, #4]
 8009958:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009960:	2b01      	cmp	r3, #1
 8009962:	d101      	bne.n	8009968 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009964:	2302      	movs	r3, #2
 8009966:	e050      	b.n	8009a0a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	2201      	movs	r2, #1
 800996c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	2202      	movs	r2, #2
 8009974:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	681b      	ldr	r3, [r3, #0]
 800997c:	685b      	ldr	r3, [r3, #4]
 800997e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	681b      	ldr	r3, [r3, #0]
 8009984:	689b      	ldr	r3, [r3, #8]
 8009986:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009988:	68fb      	ldr	r3, [r7, #12]
 800998a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800998e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009990:	683b      	ldr	r3, [r7, #0]
 8009992:	681b      	ldr	r3, [r3, #0]
 8009994:	68fa      	ldr	r2, [r7, #12]
 8009996:	4313      	orrs	r3, r2
 8009998:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	681b      	ldr	r3, [r3, #0]
 800999e:	68fa      	ldr	r2, [r7, #12]
 80099a0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	681b      	ldr	r3, [r3, #0]
 80099a6:	4a1c      	ldr	r2, [pc, #112]	@ (8009a18 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80099a8:	4293      	cmp	r3, r2
 80099aa:	d018      	beq.n	80099de <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	681b      	ldr	r3, [r3, #0]
 80099b0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80099b4:	d013      	beq.n	80099de <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	681b      	ldr	r3, [r3, #0]
 80099ba:	4a18      	ldr	r2, [pc, #96]	@ (8009a1c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80099bc:	4293      	cmp	r3, r2
 80099be:	d00e      	beq.n	80099de <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	681b      	ldr	r3, [r3, #0]
 80099c4:	4a16      	ldr	r2, [pc, #88]	@ (8009a20 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80099c6:	4293      	cmp	r3, r2
 80099c8:	d009      	beq.n	80099de <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	681b      	ldr	r3, [r3, #0]
 80099ce:	4a15      	ldr	r2, [pc, #84]	@ (8009a24 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80099d0:	4293      	cmp	r3, r2
 80099d2:	d004      	beq.n	80099de <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	681b      	ldr	r3, [r3, #0]
 80099d8:	4a13      	ldr	r2, [pc, #76]	@ (8009a28 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80099da:	4293      	cmp	r3, r2
 80099dc:	d10c      	bne.n	80099f8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80099de:	68bb      	ldr	r3, [r7, #8]
 80099e0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80099e4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80099e6:	683b      	ldr	r3, [r7, #0]
 80099e8:	685b      	ldr	r3, [r3, #4]
 80099ea:	68ba      	ldr	r2, [r7, #8]
 80099ec:	4313      	orrs	r3, r2
 80099ee:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	681b      	ldr	r3, [r3, #0]
 80099f4:	68ba      	ldr	r2, [r7, #8]
 80099f6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	2201      	movs	r2, #1
 80099fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	2200      	movs	r2, #0
 8009a04:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8009a08:	2300      	movs	r3, #0
}
 8009a0a:	4618      	mov	r0, r3
 8009a0c:	3714      	adds	r7, #20
 8009a0e:	46bd      	mov	sp, r7
 8009a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a14:	4770      	bx	lr
 8009a16:	bf00      	nop
 8009a18:	40010000 	.word	0x40010000
 8009a1c:	40000400 	.word	0x40000400
 8009a20:	40000800 	.word	0x40000800
 8009a24:	40000c00 	.word	0x40000c00
 8009a28:	40014000 	.word	0x40014000

08009a2c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8009a2c:	b480      	push	{r7}
 8009a2e:	b085      	sub	sp, #20
 8009a30:	af00      	add	r7, sp, #0
 8009a32:	6078      	str	r0, [r7, #4]
 8009a34:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8009a36:	2300      	movs	r3, #0
 8009a38:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009a40:	2b01      	cmp	r3, #1
 8009a42:	d101      	bne.n	8009a48 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8009a44:	2302      	movs	r3, #2
 8009a46:	e03d      	b.n	8009ac4 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	2201      	movs	r2, #1
 8009a4c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8009a50:	68fb      	ldr	r3, [r7, #12]
 8009a52:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8009a56:	683b      	ldr	r3, [r7, #0]
 8009a58:	68db      	ldr	r3, [r3, #12]
 8009a5a:	4313      	orrs	r3, r2
 8009a5c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8009a5e:	68fb      	ldr	r3, [r7, #12]
 8009a60:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8009a64:	683b      	ldr	r3, [r7, #0]
 8009a66:	689b      	ldr	r3, [r3, #8]
 8009a68:	4313      	orrs	r3, r2
 8009a6a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8009a6c:	68fb      	ldr	r3, [r7, #12]
 8009a6e:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8009a72:	683b      	ldr	r3, [r7, #0]
 8009a74:	685b      	ldr	r3, [r3, #4]
 8009a76:	4313      	orrs	r3, r2
 8009a78:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8009a7a:	68fb      	ldr	r3, [r7, #12]
 8009a7c:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8009a80:	683b      	ldr	r3, [r7, #0]
 8009a82:	681b      	ldr	r3, [r3, #0]
 8009a84:	4313      	orrs	r3, r2
 8009a86:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8009a88:	68fb      	ldr	r3, [r7, #12]
 8009a8a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8009a8e:	683b      	ldr	r3, [r7, #0]
 8009a90:	691b      	ldr	r3, [r3, #16]
 8009a92:	4313      	orrs	r3, r2
 8009a94:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8009a96:	68fb      	ldr	r3, [r7, #12]
 8009a98:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8009a9c:	683b      	ldr	r3, [r7, #0]
 8009a9e:	695b      	ldr	r3, [r3, #20]
 8009aa0:	4313      	orrs	r3, r2
 8009aa2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8009aa4:	68fb      	ldr	r3, [r7, #12]
 8009aa6:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8009aaa:	683b      	ldr	r3, [r7, #0]
 8009aac:	69db      	ldr	r3, [r3, #28]
 8009aae:	4313      	orrs	r3, r2
 8009ab0:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	681b      	ldr	r3, [r3, #0]
 8009ab6:	68fa      	ldr	r2, [r7, #12]
 8009ab8:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	2200      	movs	r2, #0
 8009abe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8009ac2:	2300      	movs	r3, #0
}
 8009ac4:	4618      	mov	r0, r3
 8009ac6:	3714      	adds	r7, #20
 8009ac8:	46bd      	mov	sp, r7
 8009aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ace:	4770      	bx	lr

08009ad0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009ad0:	b480      	push	{r7}
 8009ad2:	b083      	sub	sp, #12
 8009ad4:	af00      	add	r7, sp, #0
 8009ad6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009ad8:	bf00      	nop
 8009ada:	370c      	adds	r7, #12
 8009adc:	46bd      	mov	sp, r7
 8009ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ae2:	4770      	bx	lr

08009ae4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009ae4:	b480      	push	{r7}
 8009ae6:	b083      	sub	sp, #12
 8009ae8:	af00      	add	r7, sp, #0
 8009aea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009aec:	bf00      	nop
 8009aee:	370c      	adds	r7, #12
 8009af0:	46bd      	mov	sp, r7
 8009af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009af6:	4770      	bx	lr

08009af8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009af8:	b580      	push	{r7, lr}
 8009afa:	b082      	sub	sp, #8
 8009afc:	af00      	add	r7, sp, #0
 8009afe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	2b00      	cmp	r3, #0
 8009b04:	d101      	bne.n	8009b0a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009b06:	2301      	movs	r3, #1
 8009b08:	e042      	b.n	8009b90 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009b10:	b2db      	uxtb	r3, r3
 8009b12:	2b00      	cmp	r3, #0
 8009b14:	d106      	bne.n	8009b24 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	2200      	movs	r2, #0
 8009b1a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009b1e:	6878      	ldr	r0, [r7, #4]
 8009b20:	f7fb fc1c 	bl	800535c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	2224      	movs	r2, #36	@ 0x24
 8009b28:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	681b      	ldr	r3, [r3, #0]
 8009b30:	68da      	ldr	r2, [r3, #12]
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	681b      	ldr	r3, [r3, #0]
 8009b36:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8009b3a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8009b3c:	6878      	ldr	r0, [r7, #4]
 8009b3e:	f000 fdd3 	bl	800a6e8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	681b      	ldr	r3, [r3, #0]
 8009b46:	691a      	ldr	r2, [r3, #16]
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	681b      	ldr	r3, [r3, #0]
 8009b4c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8009b50:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	681b      	ldr	r3, [r3, #0]
 8009b56:	695a      	ldr	r2, [r3, #20]
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	681b      	ldr	r3, [r3, #0]
 8009b5c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8009b60:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	681b      	ldr	r3, [r3, #0]
 8009b66:	68da      	ldr	r2, [r3, #12]
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	681b      	ldr	r3, [r3, #0]
 8009b6c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8009b70:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	2200      	movs	r2, #0
 8009b76:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	2220      	movs	r2, #32
 8009b7c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	2220      	movs	r2, #32
 8009b84:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	2200      	movs	r2, #0
 8009b8c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8009b8e:	2300      	movs	r3, #0
}
 8009b90:	4618      	mov	r0, r3
 8009b92:	3708      	adds	r7, #8
 8009b94:	46bd      	mov	sp, r7
 8009b96:	bd80      	pop	{r7, pc}

08009b98 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009b98:	b580      	push	{r7, lr}
 8009b9a:	b08a      	sub	sp, #40	@ 0x28
 8009b9c:	af02      	add	r7, sp, #8
 8009b9e:	60f8      	str	r0, [r7, #12]
 8009ba0:	60b9      	str	r1, [r7, #8]
 8009ba2:	603b      	str	r3, [r7, #0]
 8009ba4:	4613      	mov	r3, r2
 8009ba6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8009ba8:	2300      	movs	r3, #0
 8009baa:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009bac:	68fb      	ldr	r3, [r7, #12]
 8009bae:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009bb2:	b2db      	uxtb	r3, r3
 8009bb4:	2b20      	cmp	r3, #32
 8009bb6:	d175      	bne.n	8009ca4 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8009bb8:	68bb      	ldr	r3, [r7, #8]
 8009bba:	2b00      	cmp	r3, #0
 8009bbc:	d002      	beq.n	8009bc4 <HAL_UART_Transmit+0x2c>
 8009bbe:	88fb      	ldrh	r3, [r7, #6]
 8009bc0:	2b00      	cmp	r3, #0
 8009bc2:	d101      	bne.n	8009bc8 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8009bc4:	2301      	movs	r3, #1
 8009bc6:	e06e      	b.n	8009ca6 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009bc8:	68fb      	ldr	r3, [r7, #12]
 8009bca:	2200      	movs	r2, #0
 8009bcc:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009bce:	68fb      	ldr	r3, [r7, #12]
 8009bd0:	2221      	movs	r2, #33	@ 0x21
 8009bd2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8009bd6:	f7fb fcd7 	bl	8005588 <HAL_GetTick>
 8009bda:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8009bdc:	68fb      	ldr	r3, [r7, #12]
 8009bde:	88fa      	ldrh	r2, [r7, #6]
 8009be0:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8009be2:	68fb      	ldr	r3, [r7, #12]
 8009be4:	88fa      	ldrh	r2, [r7, #6]
 8009be6:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009be8:	68fb      	ldr	r3, [r7, #12]
 8009bea:	689b      	ldr	r3, [r3, #8]
 8009bec:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009bf0:	d108      	bne.n	8009c04 <HAL_UART_Transmit+0x6c>
 8009bf2:	68fb      	ldr	r3, [r7, #12]
 8009bf4:	691b      	ldr	r3, [r3, #16]
 8009bf6:	2b00      	cmp	r3, #0
 8009bf8:	d104      	bne.n	8009c04 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8009bfa:	2300      	movs	r3, #0
 8009bfc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8009bfe:	68bb      	ldr	r3, [r7, #8]
 8009c00:	61bb      	str	r3, [r7, #24]
 8009c02:	e003      	b.n	8009c0c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8009c04:	68bb      	ldr	r3, [r7, #8]
 8009c06:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009c08:	2300      	movs	r3, #0
 8009c0a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8009c0c:	e02e      	b.n	8009c6c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8009c0e:	683b      	ldr	r3, [r7, #0]
 8009c10:	9300      	str	r3, [sp, #0]
 8009c12:	697b      	ldr	r3, [r7, #20]
 8009c14:	2200      	movs	r2, #0
 8009c16:	2180      	movs	r1, #128	@ 0x80
 8009c18:	68f8      	ldr	r0, [r7, #12]
 8009c1a:	f000 fb37 	bl	800a28c <UART_WaitOnFlagUntilTimeout>
 8009c1e:	4603      	mov	r3, r0
 8009c20:	2b00      	cmp	r3, #0
 8009c22:	d005      	beq.n	8009c30 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8009c24:	68fb      	ldr	r3, [r7, #12]
 8009c26:	2220      	movs	r2, #32
 8009c28:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8009c2c:	2303      	movs	r3, #3
 8009c2e:	e03a      	b.n	8009ca6 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8009c30:	69fb      	ldr	r3, [r7, #28]
 8009c32:	2b00      	cmp	r3, #0
 8009c34:	d10b      	bne.n	8009c4e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8009c36:	69bb      	ldr	r3, [r7, #24]
 8009c38:	881b      	ldrh	r3, [r3, #0]
 8009c3a:	461a      	mov	r2, r3
 8009c3c:	68fb      	ldr	r3, [r7, #12]
 8009c3e:	681b      	ldr	r3, [r3, #0]
 8009c40:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009c44:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8009c46:	69bb      	ldr	r3, [r7, #24]
 8009c48:	3302      	adds	r3, #2
 8009c4a:	61bb      	str	r3, [r7, #24]
 8009c4c:	e007      	b.n	8009c5e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8009c4e:	69fb      	ldr	r3, [r7, #28]
 8009c50:	781a      	ldrb	r2, [r3, #0]
 8009c52:	68fb      	ldr	r3, [r7, #12]
 8009c54:	681b      	ldr	r3, [r3, #0]
 8009c56:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8009c58:	69fb      	ldr	r3, [r7, #28]
 8009c5a:	3301      	adds	r3, #1
 8009c5c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8009c5e:	68fb      	ldr	r3, [r7, #12]
 8009c60:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8009c62:	b29b      	uxth	r3, r3
 8009c64:	3b01      	subs	r3, #1
 8009c66:	b29a      	uxth	r2, r3
 8009c68:	68fb      	ldr	r3, [r7, #12]
 8009c6a:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8009c6c:	68fb      	ldr	r3, [r7, #12]
 8009c6e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8009c70:	b29b      	uxth	r3, r3
 8009c72:	2b00      	cmp	r3, #0
 8009c74:	d1cb      	bne.n	8009c0e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8009c76:	683b      	ldr	r3, [r7, #0]
 8009c78:	9300      	str	r3, [sp, #0]
 8009c7a:	697b      	ldr	r3, [r7, #20]
 8009c7c:	2200      	movs	r2, #0
 8009c7e:	2140      	movs	r1, #64	@ 0x40
 8009c80:	68f8      	ldr	r0, [r7, #12]
 8009c82:	f000 fb03 	bl	800a28c <UART_WaitOnFlagUntilTimeout>
 8009c86:	4603      	mov	r3, r0
 8009c88:	2b00      	cmp	r3, #0
 8009c8a:	d005      	beq.n	8009c98 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8009c8c:	68fb      	ldr	r3, [r7, #12]
 8009c8e:	2220      	movs	r2, #32
 8009c90:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8009c94:	2303      	movs	r3, #3
 8009c96:	e006      	b.n	8009ca6 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8009c98:	68fb      	ldr	r3, [r7, #12]
 8009c9a:	2220      	movs	r2, #32
 8009c9c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8009ca0:	2300      	movs	r3, #0
 8009ca2:	e000      	b.n	8009ca6 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8009ca4:	2302      	movs	r3, #2
  }
}
 8009ca6:	4618      	mov	r0, r3
 8009ca8:	3720      	adds	r7, #32
 8009caa:	46bd      	mov	sp, r7
 8009cac:	bd80      	pop	{r7, pc}

08009cae <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009cae:	b580      	push	{r7, lr}
 8009cb0:	b084      	sub	sp, #16
 8009cb2:	af00      	add	r7, sp, #0
 8009cb4:	60f8      	str	r0, [r7, #12]
 8009cb6:	60b9      	str	r1, [r7, #8]
 8009cb8:	4613      	mov	r3, r2
 8009cba:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8009cbc:	68fb      	ldr	r3, [r7, #12]
 8009cbe:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8009cc2:	b2db      	uxtb	r3, r3
 8009cc4:	2b20      	cmp	r3, #32
 8009cc6:	d112      	bne.n	8009cee <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8009cc8:	68bb      	ldr	r3, [r7, #8]
 8009cca:	2b00      	cmp	r3, #0
 8009ccc:	d002      	beq.n	8009cd4 <HAL_UART_Receive_IT+0x26>
 8009cce:	88fb      	ldrh	r3, [r7, #6]
 8009cd0:	2b00      	cmp	r3, #0
 8009cd2:	d101      	bne.n	8009cd8 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8009cd4:	2301      	movs	r3, #1
 8009cd6:	e00b      	b.n	8009cf0 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009cd8:	68fb      	ldr	r3, [r7, #12]
 8009cda:	2200      	movs	r2, #0
 8009cdc:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8009cde:	88fb      	ldrh	r3, [r7, #6]
 8009ce0:	461a      	mov	r2, r3
 8009ce2:	68b9      	ldr	r1, [r7, #8]
 8009ce4:	68f8      	ldr	r0, [r7, #12]
 8009ce6:	f000 fb2a 	bl	800a33e <UART_Start_Receive_IT>
 8009cea:	4603      	mov	r3, r0
 8009cec:	e000      	b.n	8009cf0 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8009cee:	2302      	movs	r3, #2
  }
}
 8009cf0:	4618      	mov	r0, r3
 8009cf2:	3710      	adds	r7, #16
 8009cf4:	46bd      	mov	sp, r7
 8009cf6:	bd80      	pop	{r7, pc}

08009cf8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8009cf8:	b580      	push	{r7, lr}
 8009cfa:	b0ba      	sub	sp, #232	@ 0xe8
 8009cfc:	af00      	add	r7, sp, #0
 8009cfe:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	681b      	ldr	r3, [r3, #0]
 8009d04:	681b      	ldr	r3, [r3, #0]
 8009d06:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	681b      	ldr	r3, [r3, #0]
 8009d0e:	68db      	ldr	r3, [r3, #12]
 8009d10:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	681b      	ldr	r3, [r3, #0]
 8009d18:	695b      	ldr	r3, [r3, #20]
 8009d1a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8009d1e:	2300      	movs	r3, #0
 8009d20:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8009d24:	2300      	movs	r3, #0
 8009d26:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8009d2a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009d2e:	f003 030f 	and.w	r3, r3, #15
 8009d32:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8009d36:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8009d3a:	2b00      	cmp	r3, #0
 8009d3c:	d10f      	bne.n	8009d5e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8009d3e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009d42:	f003 0320 	and.w	r3, r3, #32
 8009d46:	2b00      	cmp	r3, #0
 8009d48:	d009      	beq.n	8009d5e <HAL_UART_IRQHandler+0x66>
 8009d4a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009d4e:	f003 0320 	and.w	r3, r3, #32
 8009d52:	2b00      	cmp	r3, #0
 8009d54:	d003      	beq.n	8009d5e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8009d56:	6878      	ldr	r0, [r7, #4]
 8009d58:	f000 fc07 	bl	800a56a <UART_Receive_IT>
      return;
 8009d5c:	e273      	b.n	800a246 <HAL_UART_IRQHandler+0x54e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8009d5e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8009d62:	2b00      	cmp	r3, #0
 8009d64:	f000 80de 	beq.w	8009f24 <HAL_UART_IRQHandler+0x22c>
 8009d68:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009d6c:	f003 0301 	and.w	r3, r3, #1
 8009d70:	2b00      	cmp	r3, #0
 8009d72:	d106      	bne.n	8009d82 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8009d74:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009d78:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8009d7c:	2b00      	cmp	r3, #0
 8009d7e:	f000 80d1 	beq.w	8009f24 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8009d82:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009d86:	f003 0301 	and.w	r3, r3, #1
 8009d8a:	2b00      	cmp	r3, #0
 8009d8c:	d00b      	beq.n	8009da6 <HAL_UART_IRQHandler+0xae>
 8009d8e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009d92:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009d96:	2b00      	cmp	r3, #0
 8009d98:	d005      	beq.n	8009da6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009d9e:	f043 0201 	orr.w	r2, r3, #1
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8009da6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009daa:	f003 0304 	and.w	r3, r3, #4
 8009dae:	2b00      	cmp	r3, #0
 8009db0:	d00b      	beq.n	8009dca <HAL_UART_IRQHandler+0xd2>
 8009db2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009db6:	f003 0301 	and.w	r3, r3, #1
 8009dba:	2b00      	cmp	r3, #0
 8009dbc:	d005      	beq.n	8009dca <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009dc2:	f043 0202 	orr.w	r2, r3, #2
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8009dca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009dce:	f003 0302 	and.w	r3, r3, #2
 8009dd2:	2b00      	cmp	r3, #0
 8009dd4:	d00b      	beq.n	8009dee <HAL_UART_IRQHandler+0xf6>
 8009dd6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009dda:	f003 0301 	and.w	r3, r3, #1
 8009dde:	2b00      	cmp	r3, #0
 8009de0:	d005      	beq.n	8009dee <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009de6:	f043 0204 	orr.w	r2, r3, #4
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8009dee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009df2:	f003 0308 	and.w	r3, r3, #8
 8009df6:	2b00      	cmp	r3, #0
 8009df8:	d011      	beq.n	8009e1e <HAL_UART_IRQHandler+0x126>
 8009dfa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009dfe:	f003 0320 	and.w	r3, r3, #32
 8009e02:	2b00      	cmp	r3, #0
 8009e04:	d105      	bne.n	8009e12 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8009e06:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009e0a:	f003 0301 	and.w	r3, r3, #1
 8009e0e:	2b00      	cmp	r3, #0
 8009e10:	d005      	beq.n	8009e1e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009e16:	f043 0208 	orr.w	r2, r3, #8
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009e22:	2b00      	cmp	r3, #0
 8009e24:	f000 820a 	beq.w	800a23c <HAL_UART_IRQHandler+0x544>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8009e28:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009e2c:	f003 0320 	and.w	r3, r3, #32
 8009e30:	2b00      	cmp	r3, #0
 8009e32:	d008      	beq.n	8009e46 <HAL_UART_IRQHandler+0x14e>
 8009e34:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009e38:	f003 0320 	and.w	r3, r3, #32
 8009e3c:	2b00      	cmp	r3, #0
 8009e3e:	d002      	beq.n	8009e46 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8009e40:	6878      	ldr	r0, [r7, #4]
 8009e42:	f000 fb92 	bl	800a56a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	681b      	ldr	r3, [r3, #0]
 8009e4a:	695b      	ldr	r3, [r3, #20]
 8009e4c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009e50:	2b40      	cmp	r3, #64	@ 0x40
 8009e52:	bf0c      	ite	eq
 8009e54:	2301      	moveq	r3, #1
 8009e56:	2300      	movne	r3, #0
 8009e58:	b2db      	uxtb	r3, r3
 8009e5a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009e62:	f003 0308 	and.w	r3, r3, #8
 8009e66:	2b00      	cmp	r3, #0
 8009e68:	d103      	bne.n	8009e72 <HAL_UART_IRQHandler+0x17a>
 8009e6a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8009e6e:	2b00      	cmp	r3, #0
 8009e70:	d04f      	beq.n	8009f12 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8009e72:	6878      	ldr	r0, [r7, #4]
 8009e74:	f000 fa9d 	bl	800a3b2 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	681b      	ldr	r3, [r3, #0]
 8009e7c:	695b      	ldr	r3, [r3, #20]
 8009e7e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009e82:	2b40      	cmp	r3, #64	@ 0x40
 8009e84:	d141      	bne.n	8009f0a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	681b      	ldr	r3, [r3, #0]
 8009e8a:	3314      	adds	r3, #20
 8009e8c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e90:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8009e94:	e853 3f00 	ldrex	r3, [r3]
 8009e98:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8009e9c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8009ea0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009ea4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	681b      	ldr	r3, [r3, #0]
 8009eac:	3314      	adds	r3, #20
 8009eae:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8009eb2:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8009eb6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009eba:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8009ebe:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8009ec2:	e841 2300 	strex	r3, r2, [r1]
 8009ec6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8009eca:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8009ece:	2b00      	cmp	r3, #0
 8009ed0:	d1d9      	bne.n	8009e86 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009ed6:	2b00      	cmp	r3, #0
 8009ed8:	d013      	beq.n	8009f02 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009ede:	4a8a      	ldr	r2, [pc, #552]	@ (800a108 <HAL_UART_IRQHandler+0x410>)
 8009ee0:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009ee6:	4618      	mov	r0, r3
 8009ee8:	f7fc fa78 	bl	80063dc <HAL_DMA_Abort_IT>
 8009eec:	4603      	mov	r3, r0
 8009eee:	2b00      	cmp	r3, #0
 8009ef0:	d016      	beq.n	8009f20 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009ef6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009ef8:	687a      	ldr	r2, [r7, #4]
 8009efa:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8009efc:	4610      	mov	r0, r2
 8009efe:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009f00:	e00e      	b.n	8009f20 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8009f02:	6878      	ldr	r0, [r7, #4]
 8009f04:	f000 f9ac 	bl	800a260 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009f08:	e00a      	b.n	8009f20 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009f0a:	6878      	ldr	r0, [r7, #4]
 8009f0c:	f000 f9a8 	bl	800a260 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009f10:	e006      	b.n	8009f20 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8009f12:	6878      	ldr	r0, [r7, #4]
 8009f14:	f000 f9a4 	bl	800a260 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	2200      	movs	r2, #0
 8009f1c:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8009f1e:	e18d      	b.n	800a23c <HAL_UART_IRQHandler+0x544>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009f20:	bf00      	nop
    return;
 8009f22:	e18b      	b.n	800a23c <HAL_UART_IRQHandler+0x544>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009f28:	2b01      	cmp	r3, #1
 8009f2a:	f040 8167 	bne.w	800a1fc <HAL_UART_IRQHandler+0x504>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8009f2e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009f32:	f003 0310 	and.w	r3, r3, #16
 8009f36:	2b00      	cmp	r3, #0
 8009f38:	f000 8160 	beq.w	800a1fc <HAL_UART_IRQHandler+0x504>
      && ((cr1its & USART_CR1_IDLEIE) != 0U))
 8009f3c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009f40:	f003 0310 	and.w	r3, r3, #16
 8009f44:	2b00      	cmp	r3, #0
 8009f46:	f000 8159 	beq.w	800a1fc <HAL_UART_IRQHandler+0x504>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8009f4a:	2300      	movs	r3, #0
 8009f4c:	60bb      	str	r3, [r7, #8]
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	681b      	ldr	r3, [r3, #0]
 8009f52:	681b      	ldr	r3, [r3, #0]
 8009f54:	60bb      	str	r3, [r7, #8]
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	681b      	ldr	r3, [r3, #0]
 8009f5a:	685b      	ldr	r3, [r3, #4]
 8009f5c:	60bb      	str	r3, [r7, #8]
 8009f5e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	681b      	ldr	r3, [r3, #0]
 8009f64:	695b      	ldr	r3, [r3, #20]
 8009f66:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009f6a:	2b40      	cmp	r3, #64	@ 0x40
 8009f6c:	f040 80ce 	bne.w	800a10c <HAL_UART_IRQHandler+0x414>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009f74:	681b      	ldr	r3, [r3, #0]
 8009f76:	685b      	ldr	r3, [r3, #4]
 8009f78:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8009f7c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8009f80:	2b00      	cmp	r3, #0
 8009f82:	f000 80a9 	beq.w	800a0d8 <HAL_UART_IRQHandler+0x3e0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8009f8a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8009f8e:	429a      	cmp	r2, r3
 8009f90:	f080 80a2 	bcs.w	800a0d8 <HAL_UART_IRQHandler+0x3e0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8009f9a:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009fa0:	69db      	ldr	r3, [r3, #28]
 8009fa2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009fa6:	f000 8088 	beq.w	800a0ba <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	681b      	ldr	r3, [r3, #0]
 8009fae:	330c      	adds	r3, #12
 8009fb0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009fb4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8009fb8:	e853 3f00 	ldrex	r3, [r3]
 8009fbc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8009fc0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8009fc4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009fc8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	681b      	ldr	r3, [r3, #0]
 8009fd0:	330c      	adds	r3, #12
 8009fd2:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8009fd6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8009fda:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009fde:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8009fe2:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8009fe6:	e841 2300 	strex	r3, r2, [r1]
 8009fea:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8009fee:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009ff2:	2b00      	cmp	r3, #0
 8009ff4:	d1d9      	bne.n	8009faa <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	681b      	ldr	r3, [r3, #0]
 8009ffa:	3314      	adds	r3, #20
 8009ffc:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ffe:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800a000:	e853 3f00 	ldrex	r3, [r3]
 800a004:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800a006:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800a008:	f023 0301 	bic.w	r3, r3, #1
 800a00c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	681b      	ldr	r3, [r3, #0]
 800a014:	3314      	adds	r3, #20
 800a016:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800a01a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800a01e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a020:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800a022:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800a026:	e841 2300 	strex	r3, r2, [r1]
 800a02a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800a02c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800a02e:	2b00      	cmp	r3, #0
 800a030:	d1e1      	bne.n	8009ff6 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	681b      	ldr	r3, [r3, #0]
 800a036:	3314      	adds	r3, #20
 800a038:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a03a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800a03c:	e853 3f00 	ldrex	r3, [r3]
 800a040:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800a042:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a044:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a048:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	681b      	ldr	r3, [r3, #0]
 800a050:	3314      	adds	r3, #20
 800a052:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800a056:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800a058:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a05a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800a05c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800a05e:	e841 2300 	strex	r3, r2, [r1]
 800a062:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800a064:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a066:	2b00      	cmp	r3, #0
 800a068:	d1e3      	bne.n	800a032 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	2220      	movs	r2, #32
 800a06e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	2200      	movs	r2, #0
 800a076:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	681b      	ldr	r3, [r3, #0]
 800a07c:	330c      	adds	r3, #12
 800a07e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a080:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a082:	e853 3f00 	ldrex	r3, [r3]
 800a086:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800a088:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a08a:	f023 0310 	bic.w	r3, r3, #16
 800a08e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	681b      	ldr	r3, [r3, #0]
 800a096:	330c      	adds	r3, #12
 800a098:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800a09c:	65ba      	str	r2, [r7, #88]	@ 0x58
 800a09e:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a0a0:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800a0a2:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800a0a4:	e841 2300 	strex	r3, r2, [r1]
 800a0a8:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800a0aa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a0ac:	2b00      	cmp	r3, #0
 800a0ae:	d1e3      	bne.n	800a078 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a0b4:	4618      	mov	r0, r3
 800a0b6:	f7fc f921 	bl	80062fc <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	2202      	movs	r2, #2
 800a0be:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800a0c8:	b29b      	uxth	r3, r3
 800a0ca:	1ad3      	subs	r3, r2, r3
 800a0cc:	b29b      	uxth	r3, r3
 800a0ce:	4619      	mov	r1, r3
 800a0d0:	6878      	ldr	r0, [r7, #4]
 800a0d2:	f000 f8cf 	bl	800a274 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 800a0d6:	e0b3      	b.n	800a240 <HAL_UART_IRQHandler+0x548>
        if (nb_remaining_rx_data == huart->RxXferSize)
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800a0dc:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800a0e0:	429a      	cmp	r2, r3
 800a0e2:	f040 80ad 	bne.w	800a240 <HAL_UART_IRQHandler+0x548>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a0ea:	69db      	ldr	r3, [r3, #28]
 800a0ec:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a0f0:	f040 80a6 	bne.w	800a240 <HAL_UART_IRQHandler+0x548>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	2202      	movs	r2, #2
 800a0f8:	635a      	str	r2, [r3, #52]	@ 0x34
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800a0fe:	4619      	mov	r1, r3
 800a100:	6878      	ldr	r0, [r7, #4]
 800a102:	f000 f8b7 	bl	800a274 <HAL_UARTEx_RxEventCallback>
      return;
 800a106:	e09b      	b.n	800a240 <HAL_UART_IRQHandler+0x548>
 800a108:	0800a479 	.word	0x0800a479
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800a114:	b29b      	uxth	r3, r3
 800a116:	1ad3      	subs	r3, r2, r3
 800a118:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800a120:	b29b      	uxth	r3, r3
 800a122:	2b00      	cmp	r3, #0
 800a124:	f000 808e 	beq.w	800a244 <HAL_UART_IRQHandler+0x54c>
          && (nb_rx_data > 0U))
 800a128:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800a12c:	2b00      	cmp	r3, #0
 800a12e:	f000 8089 	beq.w	800a244 <HAL_UART_IRQHandler+0x54c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	681b      	ldr	r3, [r3, #0]
 800a136:	330c      	adds	r3, #12
 800a138:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a13a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a13c:	e853 3f00 	ldrex	r3, [r3]
 800a140:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800a142:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a144:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a148:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	681b      	ldr	r3, [r3, #0]
 800a150:	330c      	adds	r3, #12
 800a152:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800a156:	647a      	str	r2, [r7, #68]	@ 0x44
 800a158:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a15a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800a15c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a15e:	e841 2300 	strex	r3, r2, [r1]
 800a162:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800a164:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a166:	2b00      	cmp	r3, #0
 800a168:	d1e3      	bne.n	800a132 <HAL_UART_IRQHandler+0x43a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	681b      	ldr	r3, [r3, #0]
 800a16e:	3314      	adds	r3, #20
 800a170:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a172:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a174:	e853 3f00 	ldrex	r3, [r3]
 800a178:	623b      	str	r3, [r7, #32]
   return(result);
 800a17a:	6a3b      	ldr	r3, [r7, #32]
 800a17c:	f023 0301 	bic.w	r3, r3, #1
 800a180:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	681b      	ldr	r3, [r3, #0]
 800a188:	3314      	adds	r3, #20
 800a18a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800a18e:	633a      	str	r2, [r7, #48]	@ 0x30
 800a190:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a192:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a194:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a196:	e841 2300 	strex	r3, r2, [r1]
 800a19a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a19c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a19e:	2b00      	cmp	r3, #0
 800a1a0:	d1e3      	bne.n	800a16a <HAL_UART_IRQHandler+0x472>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	2220      	movs	r2, #32
 800a1a6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	2200      	movs	r2, #0
 800a1ae:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	681b      	ldr	r3, [r3, #0]
 800a1b4:	330c      	adds	r3, #12
 800a1b6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a1b8:	693b      	ldr	r3, [r7, #16]
 800a1ba:	e853 3f00 	ldrex	r3, [r3]
 800a1be:	60fb      	str	r3, [r7, #12]
   return(result);
 800a1c0:	68fb      	ldr	r3, [r7, #12]
 800a1c2:	f023 0310 	bic.w	r3, r3, #16
 800a1c6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	681b      	ldr	r3, [r3, #0]
 800a1ce:	330c      	adds	r3, #12
 800a1d0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 800a1d4:	61fa      	str	r2, [r7, #28]
 800a1d6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a1d8:	69b9      	ldr	r1, [r7, #24]
 800a1da:	69fa      	ldr	r2, [r7, #28]
 800a1dc:	e841 2300 	strex	r3, r2, [r1]
 800a1e0:	617b      	str	r3, [r7, #20]
   return(result);
 800a1e2:	697b      	ldr	r3, [r7, #20]
 800a1e4:	2b00      	cmp	r3, #0
 800a1e6:	d1e3      	bne.n	800a1b0 <HAL_UART_IRQHandler+0x4b8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	2202      	movs	r2, #2
 800a1ec:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800a1ee:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800a1f2:	4619      	mov	r1, r3
 800a1f4:	6878      	ldr	r0, [r7, #4]
 800a1f6:	f000 f83d 	bl	800a274 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800a1fa:	e023      	b.n	800a244 <HAL_UART_IRQHandler+0x54c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800a1fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a200:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a204:	2b00      	cmp	r3, #0
 800a206:	d009      	beq.n	800a21c <HAL_UART_IRQHandler+0x524>
 800a208:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a20c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a210:	2b00      	cmp	r3, #0
 800a212:	d003      	beq.n	800a21c <HAL_UART_IRQHandler+0x524>
  {
    UART_Transmit_IT(huart);
 800a214:	6878      	ldr	r0, [r7, #4]
 800a216:	f000 f940 	bl	800a49a <UART_Transmit_IT>
    return;
 800a21a:	e014      	b.n	800a246 <HAL_UART_IRQHandler+0x54e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800a21c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a220:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a224:	2b00      	cmp	r3, #0
 800a226:	d00e      	beq.n	800a246 <HAL_UART_IRQHandler+0x54e>
 800a228:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a22c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a230:	2b00      	cmp	r3, #0
 800a232:	d008      	beq.n	800a246 <HAL_UART_IRQHandler+0x54e>
  {
    UART_EndTransmit_IT(huart);
 800a234:	6878      	ldr	r0, [r7, #4]
 800a236:	f000 f980 	bl	800a53a <UART_EndTransmit_IT>
    return;
 800a23a:	e004      	b.n	800a246 <HAL_UART_IRQHandler+0x54e>
    return;
 800a23c:	bf00      	nop
 800a23e:	e002      	b.n	800a246 <HAL_UART_IRQHandler+0x54e>
      return;
 800a240:	bf00      	nop
 800a242:	e000      	b.n	800a246 <HAL_UART_IRQHandler+0x54e>
      return;
 800a244:	bf00      	nop
  }
}
 800a246:	37e8      	adds	r7, #232	@ 0xe8
 800a248:	46bd      	mov	sp, r7
 800a24a:	bd80      	pop	{r7, pc}

0800a24c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800a24c:	b480      	push	{r7}
 800a24e:	b083      	sub	sp, #12
 800a250:	af00      	add	r7, sp, #0
 800a252:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800a254:	bf00      	nop
 800a256:	370c      	adds	r7, #12
 800a258:	46bd      	mov	sp, r7
 800a25a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a25e:	4770      	bx	lr

0800a260 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800a260:	b480      	push	{r7}
 800a262:	b083      	sub	sp, #12
 800a264:	af00      	add	r7, sp, #0
 800a266:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800a268:	bf00      	nop
 800a26a:	370c      	adds	r7, #12
 800a26c:	46bd      	mov	sp, r7
 800a26e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a272:	4770      	bx	lr

0800a274 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800a274:	b480      	push	{r7}
 800a276:	b083      	sub	sp, #12
 800a278:	af00      	add	r7, sp, #0
 800a27a:	6078      	str	r0, [r7, #4]
 800a27c:	460b      	mov	r3, r1
 800a27e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800a280:	bf00      	nop
 800a282:	370c      	adds	r7, #12
 800a284:	46bd      	mov	sp, r7
 800a286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a28a:	4770      	bx	lr

0800a28c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800a28c:	b580      	push	{r7, lr}
 800a28e:	b086      	sub	sp, #24
 800a290:	af00      	add	r7, sp, #0
 800a292:	60f8      	str	r0, [r7, #12]
 800a294:	60b9      	str	r1, [r7, #8]
 800a296:	603b      	str	r3, [r7, #0]
 800a298:	4613      	mov	r3, r2
 800a29a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a29c:	e03b      	b.n	800a316 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a29e:	6a3b      	ldr	r3, [r7, #32]
 800a2a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a2a4:	d037      	beq.n	800a316 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a2a6:	f7fb f96f 	bl	8005588 <HAL_GetTick>
 800a2aa:	4602      	mov	r2, r0
 800a2ac:	683b      	ldr	r3, [r7, #0]
 800a2ae:	1ad3      	subs	r3, r2, r3
 800a2b0:	6a3a      	ldr	r2, [r7, #32]
 800a2b2:	429a      	cmp	r2, r3
 800a2b4:	d302      	bcc.n	800a2bc <UART_WaitOnFlagUntilTimeout+0x30>
 800a2b6:	6a3b      	ldr	r3, [r7, #32]
 800a2b8:	2b00      	cmp	r3, #0
 800a2ba:	d101      	bne.n	800a2c0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800a2bc:	2303      	movs	r3, #3
 800a2be:	e03a      	b.n	800a336 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800a2c0:	68fb      	ldr	r3, [r7, #12]
 800a2c2:	681b      	ldr	r3, [r3, #0]
 800a2c4:	68db      	ldr	r3, [r3, #12]
 800a2c6:	f003 0304 	and.w	r3, r3, #4
 800a2ca:	2b00      	cmp	r3, #0
 800a2cc:	d023      	beq.n	800a316 <UART_WaitOnFlagUntilTimeout+0x8a>
 800a2ce:	68bb      	ldr	r3, [r7, #8]
 800a2d0:	2b80      	cmp	r3, #128	@ 0x80
 800a2d2:	d020      	beq.n	800a316 <UART_WaitOnFlagUntilTimeout+0x8a>
 800a2d4:	68bb      	ldr	r3, [r7, #8]
 800a2d6:	2b40      	cmp	r3, #64	@ 0x40
 800a2d8:	d01d      	beq.n	800a316 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800a2da:	68fb      	ldr	r3, [r7, #12]
 800a2dc:	681b      	ldr	r3, [r3, #0]
 800a2de:	681b      	ldr	r3, [r3, #0]
 800a2e0:	f003 0308 	and.w	r3, r3, #8
 800a2e4:	2b08      	cmp	r3, #8
 800a2e6:	d116      	bne.n	800a316 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800a2e8:	2300      	movs	r3, #0
 800a2ea:	617b      	str	r3, [r7, #20]
 800a2ec:	68fb      	ldr	r3, [r7, #12]
 800a2ee:	681b      	ldr	r3, [r3, #0]
 800a2f0:	681b      	ldr	r3, [r3, #0]
 800a2f2:	617b      	str	r3, [r7, #20]
 800a2f4:	68fb      	ldr	r3, [r7, #12]
 800a2f6:	681b      	ldr	r3, [r3, #0]
 800a2f8:	685b      	ldr	r3, [r3, #4]
 800a2fa:	617b      	str	r3, [r7, #20]
 800a2fc:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a2fe:	68f8      	ldr	r0, [r7, #12]
 800a300:	f000 f857 	bl	800a3b2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800a304:	68fb      	ldr	r3, [r7, #12]
 800a306:	2208      	movs	r2, #8
 800a308:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a30a:	68fb      	ldr	r3, [r7, #12]
 800a30c:	2200      	movs	r2, #0
 800a30e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800a312:	2301      	movs	r3, #1
 800a314:	e00f      	b.n	800a336 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a316:	68fb      	ldr	r3, [r7, #12]
 800a318:	681b      	ldr	r3, [r3, #0]
 800a31a:	681a      	ldr	r2, [r3, #0]
 800a31c:	68bb      	ldr	r3, [r7, #8]
 800a31e:	4013      	ands	r3, r2
 800a320:	68ba      	ldr	r2, [r7, #8]
 800a322:	429a      	cmp	r2, r3
 800a324:	bf0c      	ite	eq
 800a326:	2301      	moveq	r3, #1
 800a328:	2300      	movne	r3, #0
 800a32a:	b2db      	uxtb	r3, r3
 800a32c:	461a      	mov	r2, r3
 800a32e:	79fb      	ldrb	r3, [r7, #7]
 800a330:	429a      	cmp	r2, r3
 800a332:	d0b4      	beq.n	800a29e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a334:	2300      	movs	r3, #0
}
 800a336:	4618      	mov	r0, r3
 800a338:	3718      	adds	r7, #24
 800a33a:	46bd      	mov	sp, r7
 800a33c:	bd80      	pop	{r7, pc}

0800a33e <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a33e:	b480      	push	{r7}
 800a340:	b085      	sub	sp, #20
 800a342:	af00      	add	r7, sp, #0
 800a344:	60f8      	str	r0, [r7, #12]
 800a346:	60b9      	str	r1, [r7, #8]
 800a348:	4613      	mov	r3, r2
 800a34a:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800a34c:	68fb      	ldr	r3, [r7, #12]
 800a34e:	68ba      	ldr	r2, [r7, #8]
 800a350:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 800a352:	68fb      	ldr	r3, [r7, #12]
 800a354:	88fa      	ldrh	r2, [r7, #6]
 800a356:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 800a358:	68fb      	ldr	r3, [r7, #12]
 800a35a:	88fa      	ldrh	r2, [r7, #6]
 800a35c:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a35e:	68fb      	ldr	r3, [r7, #12]
 800a360:	2200      	movs	r2, #0
 800a362:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800a364:	68fb      	ldr	r3, [r7, #12]
 800a366:	2222      	movs	r2, #34	@ 0x22
 800a368:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 800a36c:	68fb      	ldr	r3, [r7, #12]
 800a36e:	691b      	ldr	r3, [r3, #16]
 800a370:	2b00      	cmp	r3, #0
 800a372:	d007      	beq.n	800a384 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800a374:	68fb      	ldr	r3, [r7, #12]
 800a376:	681b      	ldr	r3, [r3, #0]
 800a378:	68da      	ldr	r2, [r3, #12]
 800a37a:	68fb      	ldr	r3, [r7, #12]
 800a37c:	681b      	ldr	r3, [r3, #0]
 800a37e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800a382:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800a384:	68fb      	ldr	r3, [r7, #12]
 800a386:	681b      	ldr	r3, [r3, #0]
 800a388:	695a      	ldr	r2, [r3, #20]
 800a38a:	68fb      	ldr	r3, [r7, #12]
 800a38c:	681b      	ldr	r3, [r3, #0]
 800a38e:	f042 0201 	orr.w	r2, r2, #1
 800a392:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800a394:	68fb      	ldr	r3, [r7, #12]
 800a396:	681b      	ldr	r3, [r3, #0]
 800a398:	68da      	ldr	r2, [r3, #12]
 800a39a:	68fb      	ldr	r3, [r7, #12]
 800a39c:	681b      	ldr	r3, [r3, #0]
 800a39e:	f042 0220 	orr.w	r2, r2, #32
 800a3a2:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800a3a4:	2300      	movs	r3, #0
}
 800a3a6:	4618      	mov	r0, r3
 800a3a8:	3714      	adds	r7, #20
 800a3aa:	46bd      	mov	sp, r7
 800a3ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3b0:	4770      	bx	lr

0800a3b2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a3b2:	b480      	push	{r7}
 800a3b4:	b095      	sub	sp, #84	@ 0x54
 800a3b6:	af00      	add	r7, sp, #0
 800a3b8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	681b      	ldr	r3, [r3, #0]
 800a3be:	330c      	adds	r3, #12
 800a3c0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a3c2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a3c4:	e853 3f00 	ldrex	r3, [r3]
 800a3c8:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800a3ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a3cc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a3d0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	681b      	ldr	r3, [r3, #0]
 800a3d6:	330c      	adds	r3, #12
 800a3d8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800a3da:	643a      	str	r2, [r7, #64]	@ 0x40
 800a3dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a3de:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800a3e0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800a3e2:	e841 2300 	strex	r3, r2, [r1]
 800a3e6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800a3e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a3ea:	2b00      	cmp	r3, #0
 800a3ec:	d1e5      	bne.n	800a3ba <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	681b      	ldr	r3, [r3, #0]
 800a3f2:	3314      	adds	r3, #20
 800a3f4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a3f6:	6a3b      	ldr	r3, [r7, #32]
 800a3f8:	e853 3f00 	ldrex	r3, [r3]
 800a3fc:	61fb      	str	r3, [r7, #28]
   return(result);
 800a3fe:	69fb      	ldr	r3, [r7, #28]
 800a400:	f023 0301 	bic.w	r3, r3, #1
 800a404:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a406:	687b      	ldr	r3, [r7, #4]
 800a408:	681b      	ldr	r3, [r3, #0]
 800a40a:	3314      	adds	r3, #20
 800a40c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a40e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800a410:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a412:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a414:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a416:	e841 2300 	strex	r3, r2, [r1]
 800a41a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a41c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a41e:	2b00      	cmp	r3, #0
 800a420:	d1e5      	bne.n	800a3ee <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a426:	2b01      	cmp	r3, #1
 800a428:	d119      	bne.n	800a45e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	681b      	ldr	r3, [r3, #0]
 800a42e:	330c      	adds	r3, #12
 800a430:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a432:	68fb      	ldr	r3, [r7, #12]
 800a434:	e853 3f00 	ldrex	r3, [r3]
 800a438:	60bb      	str	r3, [r7, #8]
   return(result);
 800a43a:	68bb      	ldr	r3, [r7, #8]
 800a43c:	f023 0310 	bic.w	r3, r3, #16
 800a440:	647b      	str	r3, [r7, #68]	@ 0x44
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	681b      	ldr	r3, [r3, #0]
 800a446:	330c      	adds	r3, #12
 800a448:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a44a:	61ba      	str	r2, [r7, #24]
 800a44c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a44e:	6979      	ldr	r1, [r7, #20]
 800a450:	69ba      	ldr	r2, [r7, #24]
 800a452:	e841 2300 	strex	r3, r2, [r1]
 800a456:	613b      	str	r3, [r7, #16]
   return(result);
 800a458:	693b      	ldr	r3, [r7, #16]
 800a45a:	2b00      	cmp	r3, #0
 800a45c:	d1e5      	bne.n	800a42a <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	2220      	movs	r2, #32
 800a462:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	2200      	movs	r2, #0
 800a46a:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800a46c:	bf00      	nop
 800a46e:	3754      	adds	r7, #84	@ 0x54
 800a470:	46bd      	mov	sp, r7
 800a472:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a476:	4770      	bx	lr

0800a478 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a478:	b580      	push	{r7, lr}
 800a47a:	b084      	sub	sp, #16
 800a47c:	af00      	add	r7, sp, #0
 800a47e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a484:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800a486:	68fb      	ldr	r3, [r7, #12]
 800a488:	2200      	movs	r2, #0
 800a48a:	85da      	strh	r2, [r3, #46]	@ 0x2e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a48c:	68f8      	ldr	r0, [r7, #12]
 800a48e:	f7ff fee7 	bl	800a260 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a492:	bf00      	nop
 800a494:	3710      	adds	r7, #16
 800a496:	46bd      	mov	sp, r7
 800a498:	bd80      	pop	{r7, pc}

0800a49a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800a49a:	b480      	push	{r7}
 800a49c:	b085      	sub	sp, #20
 800a49e:	af00      	add	r7, sp, #0
 800a4a0:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a4a8:	b2db      	uxtb	r3, r3
 800a4aa:	2b21      	cmp	r3, #33	@ 0x21
 800a4ac:	d13e      	bne.n	800a52c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a4ae:	687b      	ldr	r3, [r7, #4]
 800a4b0:	689b      	ldr	r3, [r3, #8]
 800a4b2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a4b6:	d114      	bne.n	800a4e2 <UART_Transmit_IT+0x48>
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	691b      	ldr	r3, [r3, #16]
 800a4bc:	2b00      	cmp	r3, #0
 800a4be:	d110      	bne.n	800a4e2 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	6a1b      	ldr	r3, [r3, #32]
 800a4c4:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800a4c6:	68fb      	ldr	r3, [r7, #12]
 800a4c8:	881b      	ldrh	r3, [r3, #0]
 800a4ca:	461a      	mov	r2, r3
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	681b      	ldr	r3, [r3, #0]
 800a4d0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a4d4:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	6a1b      	ldr	r3, [r3, #32]
 800a4da:	1c9a      	adds	r2, r3, #2
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	621a      	str	r2, [r3, #32]
 800a4e0:	e008      	b.n	800a4f4 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800a4e2:	687b      	ldr	r3, [r7, #4]
 800a4e4:	6a1b      	ldr	r3, [r3, #32]
 800a4e6:	1c59      	adds	r1, r3, #1
 800a4e8:	687a      	ldr	r2, [r7, #4]
 800a4ea:	6211      	str	r1, [r2, #32]
 800a4ec:	781a      	ldrb	r2, [r3, #0]
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	681b      	ldr	r3, [r3, #0]
 800a4f2:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800a4f8:	b29b      	uxth	r3, r3
 800a4fa:	3b01      	subs	r3, #1
 800a4fc:	b29b      	uxth	r3, r3
 800a4fe:	687a      	ldr	r2, [r7, #4]
 800a500:	4619      	mov	r1, r3
 800a502:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800a504:	2b00      	cmp	r3, #0
 800a506:	d10f      	bne.n	800a528 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	681b      	ldr	r3, [r3, #0]
 800a50c:	68da      	ldr	r2, [r3, #12]
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	681b      	ldr	r3, [r3, #0]
 800a512:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800a516:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	681b      	ldr	r3, [r3, #0]
 800a51c:	68da      	ldr	r2, [r3, #12]
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	681b      	ldr	r3, [r3, #0]
 800a522:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800a526:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800a528:	2300      	movs	r3, #0
 800a52a:	e000      	b.n	800a52e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800a52c:	2302      	movs	r3, #2
  }
}
 800a52e:	4618      	mov	r0, r3
 800a530:	3714      	adds	r7, #20
 800a532:	46bd      	mov	sp, r7
 800a534:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a538:	4770      	bx	lr

0800a53a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800a53a:	b580      	push	{r7, lr}
 800a53c:	b082      	sub	sp, #8
 800a53e:	af00      	add	r7, sp, #0
 800a540:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800a542:	687b      	ldr	r3, [r7, #4]
 800a544:	681b      	ldr	r3, [r3, #0]
 800a546:	68da      	ldr	r2, [r3, #12]
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	681b      	ldr	r3, [r3, #0]
 800a54c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800a550:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a552:	687b      	ldr	r3, [r7, #4]
 800a554:	2220      	movs	r2, #32
 800a556:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800a55a:	6878      	ldr	r0, [r7, #4]
 800a55c:	f7ff fe76 	bl	800a24c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800a560:	2300      	movs	r3, #0
}
 800a562:	4618      	mov	r0, r3
 800a564:	3708      	adds	r7, #8
 800a566:	46bd      	mov	sp, r7
 800a568:	bd80      	pop	{r7, pc}

0800a56a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800a56a:	b580      	push	{r7, lr}
 800a56c:	b08c      	sub	sp, #48	@ 0x30
 800a56e:	af00      	add	r7, sp, #0
 800a570:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits = NULL;
 800a572:	2300      	movs	r3, #0
 800a574:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint16_t *pdata16bits = NULL;
 800a576:	2300      	movs	r3, #0
 800a578:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a57a:	687b      	ldr	r3, [r7, #4]
 800a57c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800a580:	b2db      	uxtb	r3, r3
 800a582:	2b22      	cmp	r3, #34	@ 0x22
 800a584:	f040 80aa 	bne.w	800a6dc <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	689b      	ldr	r3, [r3, #8]
 800a58c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a590:	d115      	bne.n	800a5be <UART_Receive_IT+0x54>
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	691b      	ldr	r3, [r3, #16]
 800a596:	2b00      	cmp	r3, #0
 800a598:	d111      	bne.n	800a5be <UART_Receive_IT+0x54>
    {
      /* Unused pdata8bits */
      UNUSED(pdata8bits);
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800a59a:	687b      	ldr	r3, [r7, #4]
 800a59c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a59e:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	681b      	ldr	r3, [r3, #0]
 800a5a4:	685b      	ldr	r3, [r3, #4]
 800a5a6:	b29b      	uxth	r3, r3
 800a5a8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a5ac:	b29a      	uxth	r2, r3
 800a5ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a5b0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800a5b2:	687b      	ldr	r3, [r7, #4]
 800a5b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a5b6:	1c9a      	adds	r2, r3, #2
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	629a      	str	r2, [r3, #40]	@ 0x28
 800a5bc:	e024      	b.n	800a608 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800a5be:	687b      	ldr	r3, [r7, #4]
 800a5c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a5c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
      /* Unused pdata16bits */
      UNUSED(pdata16bits);

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	689b      	ldr	r3, [r3, #8]
 800a5c8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a5cc:	d007      	beq.n	800a5de <UART_Receive_IT+0x74>
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	689b      	ldr	r3, [r3, #8]
 800a5d2:	2b00      	cmp	r3, #0
 800a5d4:	d10a      	bne.n	800a5ec <UART_Receive_IT+0x82>
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	691b      	ldr	r3, [r3, #16]
 800a5da:	2b00      	cmp	r3, #0
 800a5dc:	d106      	bne.n	800a5ec <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800a5de:	687b      	ldr	r3, [r7, #4]
 800a5e0:	681b      	ldr	r3, [r3, #0]
 800a5e2:	685b      	ldr	r3, [r3, #4]
 800a5e4:	b2da      	uxtb	r2, r3
 800a5e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a5e8:	701a      	strb	r2, [r3, #0]
 800a5ea:	e008      	b.n	800a5fe <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	681b      	ldr	r3, [r3, #0]
 800a5f0:	685b      	ldr	r3, [r3, #4]
 800a5f2:	b2db      	uxtb	r3, r3
 800a5f4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a5f8:	b2da      	uxtb	r2, r3
 800a5fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a5fc:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800a5fe:	687b      	ldr	r3, [r7, #4]
 800a600:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a602:	1c5a      	adds	r2, r3, #1
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800a608:	687b      	ldr	r3, [r7, #4]
 800a60a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800a60c:	b29b      	uxth	r3, r3
 800a60e:	3b01      	subs	r3, #1
 800a610:	b29b      	uxth	r3, r3
 800a612:	687a      	ldr	r2, [r7, #4]
 800a614:	4619      	mov	r1, r3
 800a616:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800a618:	2b00      	cmp	r3, #0
 800a61a:	d15d      	bne.n	800a6d8 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	681b      	ldr	r3, [r3, #0]
 800a620:	68da      	ldr	r2, [r3, #12]
 800a622:	687b      	ldr	r3, [r7, #4]
 800a624:	681b      	ldr	r3, [r3, #0]
 800a626:	f022 0220 	bic.w	r2, r2, #32
 800a62a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	681b      	ldr	r3, [r3, #0]
 800a630:	68da      	ldr	r2, [r3, #12]
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	681b      	ldr	r3, [r3, #0]
 800a636:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800a63a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	681b      	ldr	r3, [r3, #0]
 800a640:	695a      	ldr	r2, [r3, #20]
 800a642:	687b      	ldr	r3, [r7, #4]
 800a644:	681b      	ldr	r3, [r3, #0]
 800a646:	f022 0201 	bic.w	r2, r2, #1
 800a64a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	2220      	movs	r2, #32
 800a650:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	2200      	movs	r2, #0
 800a658:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a65a:	687b      	ldr	r3, [r7, #4]
 800a65c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a65e:	2b01      	cmp	r3, #1
 800a660:	d135      	bne.n	800a6ce <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	2200      	movs	r2, #0
 800a666:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	681b      	ldr	r3, [r3, #0]
 800a66c:	330c      	adds	r3, #12
 800a66e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a670:	697b      	ldr	r3, [r7, #20]
 800a672:	e853 3f00 	ldrex	r3, [r3]
 800a676:	613b      	str	r3, [r7, #16]
   return(result);
 800a678:	693b      	ldr	r3, [r7, #16]
 800a67a:	f023 0310 	bic.w	r3, r3, #16
 800a67e:	627b      	str	r3, [r7, #36]	@ 0x24
 800a680:	687b      	ldr	r3, [r7, #4]
 800a682:	681b      	ldr	r3, [r3, #0]
 800a684:	330c      	adds	r3, #12
 800a686:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a688:	623a      	str	r2, [r7, #32]
 800a68a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a68c:	69f9      	ldr	r1, [r7, #28]
 800a68e:	6a3a      	ldr	r2, [r7, #32]
 800a690:	e841 2300 	strex	r3, r2, [r1]
 800a694:	61bb      	str	r3, [r7, #24]
   return(result);
 800a696:	69bb      	ldr	r3, [r7, #24]
 800a698:	2b00      	cmp	r3, #0
 800a69a:	d1e5      	bne.n	800a668 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800a69c:	687b      	ldr	r3, [r7, #4]
 800a69e:	681b      	ldr	r3, [r3, #0]
 800a6a0:	681b      	ldr	r3, [r3, #0]
 800a6a2:	f003 0310 	and.w	r3, r3, #16
 800a6a6:	2b10      	cmp	r3, #16
 800a6a8:	d10a      	bne.n	800a6c0 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800a6aa:	2300      	movs	r3, #0
 800a6ac:	60fb      	str	r3, [r7, #12]
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	681b      	ldr	r3, [r3, #0]
 800a6b2:	681b      	ldr	r3, [r3, #0]
 800a6b4:	60fb      	str	r3, [r7, #12]
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	681b      	ldr	r3, [r3, #0]
 800a6ba:	685b      	ldr	r3, [r3, #4]
 800a6bc:	60fb      	str	r3, [r7, #12]
 800a6be:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800a6c4:	4619      	mov	r1, r3
 800a6c6:	6878      	ldr	r0, [r7, #4]
 800a6c8:	f7ff fdd4 	bl	800a274 <HAL_UARTEx_RxEventCallback>
 800a6cc:	e002      	b.n	800a6d4 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800a6ce:	6878      	ldr	r0, [r7, #4]
 800a6d0:	f7f7 fda4 	bl	800221c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800a6d4:	2300      	movs	r3, #0
 800a6d6:	e002      	b.n	800a6de <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800a6d8:	2300      	movs	r3, #0
 800a6da:	e000      	b.n	800a6de <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800a6dc:	2302      	movs	r3, #2
  }
}
 800a6de:	4618      	mov	r0, r3
 800a6e0:	3730      	adds	r7, #48	@ 0x30
 800a6e2:	46bd      	mov	sp, r7
 800a6e4:	bd80      	pop	{r7, pc}
	...

0800a6e8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a6e8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a6ec:	b0c0      	sub	sp, #256	@ 0x100
 800a6ee:	af00      	add	r7, sp, #0
 800a6f0:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a6f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a6f8:	681b      	ldr	r3, [r3, #0]
 800a6fa:	691b      	ldr	r3, [r3, #16]
 800a6fc:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800a700:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a704:	68d9      	ldr	r1, [r3, #12]
 800a706:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a70a:	681a      	ldr	r2, [r3, #0]
 800a70c:	ea40 0301 	orr.w	r3, r0, r1
 800a710:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800a712:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a716:	689a      	ldr	r2, [r3, #8]
 800a718:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a71c:	691b      	ldr	r3, [r3, #16]
 800a71e:	431a      	orrs	r2, r3
 800a720:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a724:	695b      	ldr	r3, [r3, #20]
 800a726:	431a      	orrs	r2, r3
 800a728:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a72c:	69db      	ldr	r3, [r3, #28]
 800a72e:	4313      	orrs	r3, r2
 800a730:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800a734:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a738:	681b      	ldr	r3, [r3, #0]
 800a73a:	68db      	ldr	r3, [r3, #12]
 800a73c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800a740:	f021 010c 	bic.w	r1, r1, #12
 800a744:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a748:	681a      	ldr	r2, [r3, #0]
 800a74a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800a74e:	430b      	orrs	r3, r1
 800a750:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800a752:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a756:	681b      	ldr	r3, [r3, #0]
 800a758:	695b      	ldr	r3, [r3, #20]
 800a75a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800a75e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a762:	6999      	ldr	r1, [r3, #24]
 800a764:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a768:	681a      	ldr	r2, [r3, #0]
 800a76a:	ea40 0301 	orr.w	r3, r0, r1
 800a76e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800a770:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a774:	681a      	ldr	r2, [r3, #0]
 800a776:	4b8f      	ldr	r3, [pc, #572]	@ (800a9b4 <UART_SetConfig+0x2cc>)
 800a778:	429a      	cmp	r2, r3
 800a77a:	d005      	beq.n	800a788 <UART_SetConfig+0xa0>
 800a77c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a780:	681a      	ldr	r2, [r3, #0]
 800a782:	4b8d      	ldr	r3, [pc, #564]	@ (800a9b8 <UART_SetConfig+0x2d0>)
 800a784:	429a      	cmp	r2, r3
 800a786:	d104      	bne.n	800a792 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800a788:	f7fd fcce 	bl	8008128 <HAL_RCC_GetPCLK2Freq>
 800a78c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800a790:	e003      	b.n	800a79a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800a792:	f7fd fcb5 	bl	8008100 <HAL_RCC_GetPCLK1Freq>
 800a796:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a79a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a79e:	69db      	ldr	r3, [r3, #28]
 800a7a0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a7a4:	f040 810c 	bne.w	800a9c0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800a7a8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800a7ac:	2200      	movs	r2, #0
 800a7ae:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800a7b2:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800a7b6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800a7ba:	4622      	mov	r2, r4
 800a7bc:	462b      	mov	r3, r5
 800a7be:	1891      	adds	r1, r2, r2
 800a7c0:	65b9      	str	r1, [r7, #88]	@ 0x58
 800a7c2:	415b      	adcs	r3, r3
 800a7c4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800a7c6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800a7ca:	4621      	mov	r1, r4
 800a7cc:	eb12 0801 	adds.w	r8, r2, r1
 800a7d0:	4629      	mov	r1, r5
 800a7d2:	eb43 0901 	adc.w	r9, r3, r1
 800a7d6:	f04f 0200 	mov.w	r2, #0
 800a7da:	f04f 0300 	mov.w	r3, #0
 800a7de:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800a7e2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800a7e6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800a7ea:	4690      	mov	r8, r2
 800a7ec:	4699      	mov	r9, r3
 800a7ee:	4623      	mov	r3, r4
 800a7f0:	eb18 0303 	adds.w	r3, r8, r3
 800a7f4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800a7f8:	462b      	mov	r3, r5
 800a7fa:	eb49 0303 	adc.w	r3, r9, r3
 800a7fe:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800a802:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a806:	685b      	ldr	r3, [r3, #4]
 800a808:	2200      	movs	r2, #0
 800a80a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800a80e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800a812:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800a816:	460b      	mov	r3, r1
 800a818:	18db      	adds	r3, r3, r3
 800a81a:	653b      	str	r3, [r7, #80]	@ 0x50
 800a81c:	4613      	mov	r3, r2
 800a81e:	eb42 0303 	adc.w	r3, r2, r3
 800a822:	657b      	str	r3, [r7, #84]	@ 0x54
 800a824:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800a828:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800a82c:	f7f6 fa34 	bl	8000c98 <__aeabi_uldivmod>
 800a830:	4602      	mov	r2, r0
 800a832:	460b      	mov	r3, r1
 800a834:	4b61      	ldr	r3, [pc, #388]	@ (800a9bc <UART_SetConfig+0x2d4>)
 800a836:	fba3 2302 	umull	r2, r3, r3, r2
 800a83a:	095b      	lsrs	r3, r3, #5
 800a83c:	011c      	lsls	r4, r3, #4
 800a83e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800a842:	2200      	movs	r2, #0
 800a844:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800a848:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800a84c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800a850:	4642      	mov	r2, r8
 800a852:	464b      	mov	r3, r9
 800a854:	1891      	adds	r1, r2, r2
 800a856:	64b9      	str	r1, [r7, #72]	@ 0x48
 800a858:	415b      	adcs	r3, r3
 800a85a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a85c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800a860:	4641      	mov	r1, r8
 800a862:	eb12 0a01 	adds.w	sl, r2, r1
 800a866:	4649      	mov	r1, r9
 800a868:	eb43 0b01 	adc.w	fp, r3, r1
 800a86c:	f04f 0200 	mov.w	r2, #0
 800a870:	f04f 0300 	mov.w	r3, #0
 800a874:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800a878:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800a87c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800a880:	4692      	mov	sl, r2
 800a882:	469b      	mov	fp, r3
 800a884:	4643      	mov	r3, r8
 800a886:	eb1a 0303 	adds.w	r3, sl, r3
 800a88a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800a88e:	464b      	mov	r3, r9
 800a890:	eb4b 0303 	adc.w	r3, fp, r3
 800a894:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800a898:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a89c:	685b      	ldr	r3, [r3, #4]
 800a89e:	2200      	movs	r2, #0
 800a8a0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800a8a4:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800a8a8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800a8ac:	460b      	mov	r3, r1
 800a8ae:	18db      	adds	r3, r3, r3
 800a8b0:	643b      	str	r3, [r7, #64]	@ 0x40
 800a8b2:	4613      	mov	r3, r2
 800a8b4:	eb42 0303 	adc.w	r3, r2, r3
 800a8b8:	647b      	str	r3, [r7, #68]	@ 0x44
 800a8ba:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800a8be:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800a8c2:	f7f6 f9e9 	bl	8000c98 <__aeabi_uldivmod>
 800a8c6:	4602      	mov	r2, r0
 800a8c8:	460b      	mov	r3, r1
 800a8ca:	4611      	mov	r1, r2
 800a8cc:	4b3b      	ldr	r3, [pc, #236]	@ (800a9bc <UART_SetConfig+0x2d4>)
 800a8ce:	fba3 2301 	umull	r2, r3, r3, r1
 800a8d2:	095b      	lsrs	r3, r3, #5
 800a8d4:	2264      	movs	r2, #100	@ 0x64
 800a8d6:	fb02 f303 	mul.w	r3, r2, r3
 800a8da:	1acb      	subs	r3, r1, r3
 800a8dc:	00db      	lsls	r3, r3, #3
 800a8de:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800a8e2:	4b36      	ldr	r3, [pc, #216]	@ (800a9bc <UART_SetConfig+0x2d4>)
 800a8e4:	fba3 2302 	umull	r2, r3, r3, r2
 800a8e8:	095b      	lsrs	r3, r3, #5
 800a8ea:	005b      	lsls	r3, r3, #1
 800a8ec:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800a8f0:	441c      	add	r4, r3
 800a8f2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800a8f6:	2200      	movs	r2, #0
 800a8f8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800a8fc:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800a900:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800a904:	4642      	mov	r2, r8
 800a906:	464b      	mov	r3, r9
 800a908:	1891      	adds	r1, r2, r2
 800a90a:	63b9      	str	r1, [r7, #56]	@ 0x38
 800a90c:	415b      	adcs	r3, r3
 800a90e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a910:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800a914:	4641      	mov	r1, r8
 800a916:	1851      	adds	r1, r2, r1
 800a918:	6339      	str	r1, [r7, #48]	@ 0x30
 800a91a:	4649      	mov	r1, r9
 800a91c:	414b      	adcs	r3, r1
 800a91e:	637b      	str	r3, [r7, #52]	@ 0x34
 800a920:	f04f 0200 	mov.w	r2, #0
 800a924:	f04f 0300 	mov.w	r3, #0
 800a928:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800a92c:	4659      	mov	r1, fp
 800a92e:	00cb      	lsls	r3, r1, #3
 800a930:	4651      	mov	r1, sl
 800a932:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a936:	4651      	mov	r1, sl
 800a938:	00ca      	lsls	r2, r1, #3
 800a93a:	4610      	mov	r0, r2
 800a93c:	4619      	mov	r1, r3
 800a93e:	4603      	mov	r3, r0
 800a940:	4642      	mov	r2, r8
 800a942:	189b      	adds	r3, r3, r2
 800a944:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800a948:	464b      	mov	r3, r9
 800a94a:	460a      	mov	r2, r1
 800a94c:	eb42 0303 	adc.w	r3, r2, r3
 800a950:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800a954:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a958:	685b      	ldr	r3, [r3, #4]
 800a95a:	2200      	movs	r2, #0
 800a95c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800a960:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800a964:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800a968:	460b      	mov	r3, r1
 800a96a:	18db      	adds	r3, r3, r3
 800a96c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800a96e:	4613      	mov	r3, r2
 800a970:	eb42 0303 	adc.w	r3, r2, r3
 800a974:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a976:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800a97a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800a97e:	f7f6 f98b 	bl	8000c98 <__aeabi_uldivmod>
 800a982:	4602      	mov	r2, r0
 800a984:	460b      	mov	r3, r1
 800a986:	4b0d      	ldr	r3, [pc, #52]	@ (800a9bc <UART_SetConfig+0x2d4>)
 800a988:	fba3 1302 	umull	r1, r3, r3, r2
 800a98c:	095b      	lsrs	r3, r3, #5
 800a98e:	2164      	movs	r1, #100	@ 0x64
 800a990:	fb01 f303 	mul.w	r3, r1, r3
 800a994:	1ad3      	subs	r3, r2, r3
 800a996:	00db      	lsls	r3, r3, #3
 800a998:	3332      	adds	r3, #50	@ 0x32
 800a99a:	4a08      	ldr	r2, [pc, #32]	@ (800a9bc <UART_SetConfig+0x2d4>)
 800a99c:	fba2 2303 	umull	r2, r3, r2, r3
 800a9a0:	095b      	lsrs	r3, r3, #5
 800a9a2:	f003 0207 	and.w	r2, r3, #7
 800a9a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a9aa:	681b      	ldr	r3, [r3, #0]
 800a9ac:	4422      	add	r2, r4
 800a9ae:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800a9b0:	e106      	b.n	800abc0 <UART_SetConfig+0x4d8>
 800a9b2:	bf00      	nop
 800a9b4:	40011000 	.word	0x40011000
 800a9b8:	40011400 	.word	0x40011400
 800a9bc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800a9c0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800a9c4:	2200      	movs	r2, #0
 800a9c6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800a9ca:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800a9ce:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800a9d2:	4642      	mov	r2, r8
 800a9d4:	464b      	mov	r3, r9
 800a9d6:	1891      	adds	r1, r2, r2
 800a9d8:	6239      	str	r1, [r7, #32]
 800a9da:	415b      	adcs	r3, r3
 800a9dc:	627b      	str	r3, [r7, #36]	@ 0x24
 800a9de:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800a9e2:	4641      	mov	r1, r8
 800a9e4:	1854      	adds	r4, r2, r1
 800a9e6:	4649      	mov	r1, r9
 800a9e8:	eb43 0501 	adc.w	r5, r3, r1
 800a9ec:	f04f 0200 	mov.w	r2, #0
 800a9f0:	f04f 0300 	mov.w	r3, #0
 800a9f4:	00eb      	lsls	r3, r5, #3
 800a9f6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800a9fa:	00e2      	lsls	r2, r4, #3
 800a9fc:	4614      	mov	r4, r2
 800a9fe:	461d      	mov	r5, r3
 800aa00:	4643      	mov	r3, r8
 800aa02:	18e3      	adds	r3, r4, r3
 800aa04:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800aa08:	464b      	mov	r3, r9
 800aa0a:	eb45 0303 	adc.w	r3, r5, r3
 800aa0e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800aa12:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800aa16:	685b      	ldr	r3, [r3, #4]
 800aa18:	2200      	movs	r2, #0
 800aa1a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800aa1e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800aa22:	f04f 0200 	mov.w	r2, #0
 800aa26:	f04f 0300 	mov.w	r3, #0
 800aa2a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800aa2e:	4629      	mov	r1, r5
 800aa30:	008b      	lsls	r3, r1, #2
 800aa32:	4621      	mov	r1, r4
 800aa34:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800aa38:	4621      	mov	r1, r4
 800aa3a:	008a      	lsls	r2, r1, #2
 800aa3c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800aa40:	f7f6 f92a 	bl	8000c98 <__aeabi_uldivmod>
 800aa44:	4602      	mov	r2, r0
 800aa46:	460b      	mov	r3, r1
 800aa48:	4b60      	ldr	r3, [pc, #384]	@ (800abcc <UART_SetConfig+0x4e4>)
 800aa4a:	fba3 2302 	umull	r2, r3, r3, r2
 800aa4e:	095b      	lsrs	r3, r3, #5
 800aa50:	011c      	lsls	r4, r3, #4
 800aa52:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800aa56:	2200      	movs	r2, #0
 800aa58:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800aa5c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800aa60:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800aa64:	4642      	mov	r2, r8
 800aa66:	464b      	mov	r3, r9
 800aa68:	1891      	adds	r1, r2, r2
 800aa6a:	61b9      	str	r1, [r7, #24]
 800aa6c:	415b      	adcs	r3, r3
 800aa6e:	61fb      	str	r3, [r7, #28]
 800aa70:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800aa74:	4641      	mov	r1, r8
 800aa76:	1851      	adds	r1, r2, r1
 800aa78:	6139      	str	r1, [r7, #16]
 800aa7a:	4649      	mov	r1, r9
 800aa7c:	414b      	adcs	r3, r1
 800aa7e:	617b      	str	r3, [r7, #20]
 800aa80:	f04f 0200 	mov.w	r2, #0
 800aa84:	f04f 0300 	mov.w	r3, #0
 800aa88:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800aa8c:	4659      	mov	r1, fp
 800aa8e:	00cb      	lsls	r3, r1, #3
 800aa90:	4651      	mov	r1, sl
 800aa92:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800aa96:	4651      	mov	r1, sl
 800aa98:	00ca      	lsls	r2, r1, #3
 800aa9a:	4610      	mov	r0, r2
 800aa9c:	4619      	mov	r1, r3
 800aa9e:	4603      	mov	r3, r0
 800aaa0:	4642      	mov	r2, r8
 800aaa2:	189b      	adds	r3, r3, r2
 800aaa4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800aaa8:	464b      	mov	r3, r9
 800aaaa:	460a      	mov	r2, r1
 800aaac:	eb42 0303 	adc.w	r3, r2, r3
 800aab0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800aab4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800aab8:	685b      	ldr	r3, [r3, #4]
 800aaba:	2200      	movs	r2, #0
 800aabc:	67bb      	str	r3, [r7, #120]	@ 0x78
 800aabe:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800aac0:	f04f 0200 	mov.w	r2, #0
 800aac4:	f04f 0300 	mov.w	r3, #0
 800aac8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800aacc:	4649      	mov	r1, r9
 800aace:	008b      	lsls	r3, r1, #2
 800aad0:	4641      	mov	r1, r8
 800aad2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800aad6:	4641      	mov	r1, r8
 800aad8:	008a      	lsls	r2, r1, #2
 800aada:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800aade:	f7f6 f8db 	bl	8000c98 <__aeabi_uldivmod>
 800aae2:	4602      	mov	r2, r0
 800aae4:	460b      	mov	r3, r1
 800aae6:	4611      	mov	r1, r2
 800aae8:	4b38      	ldr	r3, [pc, #224]	@ (800abcc <UART_SetConfig+0x4e4>)
 800aaea:	fba3 2301 	umull	r2, r3, r3, r1
 800aaee:	095b      	lsrs	r3, r3, #5
 800aaf0:	2264      	movs	r2, #100	@ 0x64
 800aaf2:	fb02 f303 	mul.w	r3, r2, r3
 800aaf6:	1acb      	subs	r3, r1, r3
 800aaf8:	011b      	lsls	r3, r3, #4
 800aafa:	3332      	adds	r3, #50	@ 0x32
 800aafc:	4a33      	ldr	r2, [pc, #204]	@ (800abcc <UART_SetConfig+0x4e4>)
 800aafe:	fba2 2303 	umull	r2, r3, r2, r3
 800ab02:	095b      	lsrs	r3, r3, #5
 800ab04:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800ab08:	441c      	add	r4, r3
 800ab0a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800ab0e:	2200      	movs	r2, #0
 800ab10:	673b      	str	r3, [r7, #112]	@ 0x70
 800ab12:	677a      	str	r2, [r7, #116]	@ 0x74
 800ab14:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800ab18:	4642      	mov	r2, r8
 800ab1a:	464b      	mov	r3, r9
 800ab1c:	1891      	adds	r1, r2, r2
 800ab1e:	60b9      	str	r1, [r7, #8]
 800ab20:	415b      	adcs	r3, r3
 800ab22:	60fb      	str	r3, [r7, #12]
 800ab24:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800ab28:	4641      	mov	r1, r8
 800ab2a:	1851      	adds	r1, r2, r1
 800ab2c:	6039      	str	r1, [r7, #0]
 800ab2e:	4649      	mov	r1, r9
 800ab30:	414b      	adcs	r3, r1
 800ab32:	607b      	str	r3, [r7, #4]
 800ab34:	f04f 0200 	mov.w	r2, #0
 800ab38:	f04f 0300 	mov.w	r3, #0
 800ab3c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800ab40:	4659      	mov	r1, fp
 800ab42:	00cb      	lsls	r3, r1, #3
 800ab44:	4651      	mov	r1, sl
 800ab46:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800ab4a:	4651      	mov	r1, sl
 800ab4c:	00ca      	lsls	r2, r1, #3
 800ab4e:	4610      	mov	r0, r2
 800ab50:	4619      	mov	r1, r3
 800ab52:	4603      	mov	r3, r0
 800ab54:	4642      	mov	r2, r8
 800ab56:	189b      	adds	r3, r3, r2
 800ab58:	66bb      	str	r3, [r7, #104]	@ 0x68
 800ab5a:	464b      	mov	r3, r9
 800ab5c:	460a      	mov	r2, r1
 800ab5e:	eb42 0303 	adc.w	r3, r2, r3
 800ab62:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800ab64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ab68:	685b      	ldr	r3, [r3, #4]
 800ab6a:	2200      	movs	r2, #0
 800ab6c:	663b      	str	r3, [r7, #96]	@ 0x60
 800ab6e:	667a      	str	r2, [r7, #100]	@ 0x64
 800ab70:	f04f 0200 	mov.w	r2, #0
 800ab74:	f04f 0300 	mov.w	r3, #0
 800ab78:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800ab7c:	4649      	mov	r1, r9
 800ab7e:	008b      	lsls	r3, r1, #2
 800ab80:	4641      	mov	r1, r8
 800ab82:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800ab86:	4641      	mov	r1, r8
 800ab88:	008a      	lsls	r2, r1, #2
 800ab8a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800ab8e:	f7f6 f883 	bl	8000c98 <__aeabi_uldivmod>
 800ab92:	4602      	mov	r2, r0
 800ab94:	460b      	mov	r3, r1
 800ab96:	4b0d      	ldr	r3, [pc, #52]	@ (800abcc <UART_SetConfig+0x4e4>)
 800ab98:	fba3 1302 	umull	r1, r3, r3, r2
 800ab9c:	095b      	lsrs	r3, r3, #5
 800ab9e:	2164      	movs	r1, #100	@ 0x64
 800aba0:	fb01 f303 	mul.w	r3, r1, r3
 800aba4:	1ad3      	subs	r3, r2, r3
 800aba6:	011b      	lsls	r3, r3, #4
 800aba8:	3332      	adds	r3, #50	@ 0x32
 800abaa:	4a08      	ldr	r2, [pc, #32]	@ (800abcc <UART_SetConfig+0x4e4>)
 800abac:	fba2 2303 	umull	r2, r3, r2, r3
 800abb0:	095b      	lsrs	r3, r3, #5
 800abb2:	f003 020f 	and.w	r2, r3, #15
 800abb6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800abba:	681b      	ldr	r3, [r3, #0]
 800abbc:	4422      	add	r2, r4
 800abbe:	609a      	str	r2, [r3, #8]
}
 800abc0:	bf00      	nop
 800abc2:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800abc6:	46bd      	mov	sp, r7
 800abc8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800abcc:	51eb851f 	.word	0x51eb851f

0800abd0 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800abd0:	b580      	push	{r7, lr}
 800abd2:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 800abd4:	4904      	ldr	r1, [pc, #16]	@ (800abe8 <MX_FATFS_Init+0x18>)
 800abd6:	4805      	ldr	r0, [pc, #20]	@ (800abec <MX_FATFS_Init+0x1c>)
 800abd8:	f000 f8b0 	bl	800ad3c <FATFS_LinkDriver>
 800abdc:	4603      	mov	r3, r0
 800abde:	461a      	mov	r2, r3
 800abe0:	4b03      	ldr	r3, [pc, #12]	@ (800abf0 <MX_FATFS_Init+0x20>)
 800abe2:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800abe4:	bf00      	nop
 800abe6:	bd80      	pop	{r7, pc}
 800abe8:	2000eff0 	.word	0x2000eff0
 800abec:	2000d118 	.word	0x2000d118
 800abf0:	2000efec 	.word	0x2000efec

0800abf4 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 800abf4:	b480      	push	{r7}
 800abf6:	b083      	sub	sp, #12
 800abf8:	af00      	add	r7, sp, #0
 800abfa:	4603      	mov	r3, r0
 800abfc:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    Stat = STA_NOINIT;
 800abfe:	4b06      	ldr	r3, [pc, #24]	@ (800ac18 <USER_initialize+0x24>)
 800ac00:	2201      	movs	r2, #1
 800ac02:	701a      	strb	r2, [r3, #0]
    return Stat;
 800ac04:	4b04      	ldr	r3, [pc, #16]	@ (800ac18 <USER_initialize+0x24>)
 800ac06:	781b      	ldrb	r3, [r3, #0]
 800ac08:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 800ac0a:	4618      	mov	r0, r3
 800ac0c:	370c      	adds	r7, #12
 800ac0e:	46bd      	mov	sp, r7
 800ac10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac14:	4770      	bx	lr
 800ac16:	bf00      	nop
 800ac18:	2000d115 	.word	0x2000d115

0800ac1c <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 800ac1c:	b480      	push	{r7}
 800ac1e:	b083      	sub	sp, #12
 800ac20:	af00      	add	r7, sp, #0
 800ac22:	4603      	mov	r3, r0
 800ac24:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    Stat = STA_NOINIT;
 800ac26:	4b06      	ldr	r3, [pc, #24]	@ (800ac40 <USER_status+0x24>)
 800ac28:	2201      	movs	r2, #1
 800ac2a:	701a      	strb	r2, [r3, #0]
    return Stat;
 800ac2c:	4b04      	ldr	r3, [pc, #16]	@ (800ac40 <USER_status+0x24>)
 800ac2e:	781b      	ldrb	r3, [r3, #0]
 800ac30:	b2db      	uxtb	r3, r3
  /* USER CODE END STATUS */
}
 800ac32:	4618      	mov	r0, r3
 800ac34:	370c      	adds	r7, #12
 800ac36:	46bd      	mov	sp, r7
 800ac38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac3c:	4770      	bx	lr
 800ac3e:	bf00      	nop
 800ac40:	2000d115 	.word	0x2000d115

0800ac44 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 800ac44:	b480      	push	{r7}
 800ac46:	b085      	sub	sp, #20
 800ac48:	af00      	add	r7, sp, #0
 800ac4a:	60b9      	str	r1, [r7, #8]
 800ac4c:	607a      	str	r2, [r7, #4]
 800ac4e:	603b      	str	r3, [r7, #0]
 800ac50:	4603      	mov	r3, r0
 800ac52:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return RES_OK;
 800ac54:	2300      	movs	r3, #0
  /* USER CODE END READ */
}
 800ac56:	4618      	mov	r0, r3
 800ac58:	3714      	adds	r7, #20
 800ac5a:	46bd      	mov	sp, r7
 800ac5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac60:	4770      	bx	lr

0800ac62 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 800ac62:	b480      	push	{r7}
 800ac64:	b085      	sub	sp, #20
 800ac66:	af00      	add	r7, sp, #0
 800ac68:	60b9      	str	r1, [r7, #8]
 800ac6a:	607a      	str	r2, [r7, #4]
 800ac6c:	603b      	str	r3, [r7, #0]
 800ac6e:	4603      	mov	r3, r0
 800ac70:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return RES_OK;
 800ac72:	2300      	movs	r3, #0
  /* USER CODE END WRITE */
}
 800ac74:	4618      	mov	r0, r3
 800ac76:	3714      	adds	r7, #20
 800ac78:	46bd      	mov	sp, r7
 800ac7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac7e:	4770      	bx	lr

0800ac80 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 800ac80:	b480      	push	{r7}
 800ac82:	b085      	sub	sp, #20
 800ac84:	af00      	add	r7, sp, #0
 800ac86:	4603      	mov	r3, r0
 800ac88:	603a      	str	r2, [r7, #0]
 800ac8a:	71fb      	strb	r3, [r7, #7]
 800ac8c:	460b      	mov	r3, r1
 800ac8e:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    DRESULT res = RES_ERROR;
 800ac90:	2301      	movs	r3, #1
 800ac92:	73fb      	strb	r3, [r7, #15]
    return res;
 800ac94:	7bfb      	ldrb	r3, [r7, #15]
  /* USER CODE END IOCTL */
}
 800ac96:	4618      	mov	r0, r3
 800ac98:	3714      	adds	r7, #20
 800ac9a:	46bd      	mov	sp, r7
 800ac9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aca0:	4770      	bx	lr
	...

0800aca4 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800aca4:	b480      	push	{r7}
 800aca6:	b087      	sub	sp, #28
 800aca8:	af00      	add	r7, sp, #0
 800acaa:	60f8      	str	r0, [r7, #12]
 800acac:	60b9      	str	r1, [r7, #8]
 800acae:	4613      	mov	r3, r2
 800acb0:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800acb2:	2301      	movs	r3, #1
 800acb4:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800acb6:	2300      	movs	r3, #0
 800acb8:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800acba:	4b1f      	ldr	r3, [pc, #124]	@ (800ad38 <FATFS_LinkDriverEx+0x94>)
 800acbc:	7a5b      	ldrb	r3, [r3, #9]
 800acbe:	b2db      	uxtb	r3, r3
 800acc0:	2b00      	cmp	r3, #0
 800acc2:	d131      	bne.n	800ad28 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800acc4:	4b1c      	ldr	r3, [pc, #112]	@ (800ad38 <FATFS_LinkDriverEx+0x94>)
 800acc6:	7a5b      	ldrb	r3, [r3, #9]
 800acc8:	b2db      	uxtb	r3, r3
 800acca:	461a      	mov	r2, r3
 800accc:	4b1a      	ldr	r3, [pc, #104]	@ (800ad38 <FATFS_LinkDriverEx+0x94>)
 800acce:	2100      	movs	r1, #0
 800acd0:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800acd2:	4b19      	ldr	r3, [pc, #100]	@ (800ad38 <FATFS_LinkDriverEx+0x94>)
 800acd4:	7a5b      	ldrb	r3, [r3, #9]
 800acd6:	b2db      	uxtb	r3, r3
 800acd8:	4a17      	ldr	r2, [pc, #92]	@ (800ad38 <FATFS_LinkDriverEx+0x94>)
 800acda:	009b      	lsls	r3, r3, #2
 800acdc:	4413      	add	r3, r2
 800acde:	68fa      	ldr	r2, [r7, #12]
 800ace0:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800ace2:	4b15      	ldr	r3, [pc, #84]	@ (800ad38 <FATFS_LinkDriverEx+0x94>)
 800ace4:	7a5b      	ldrb	r3, [r3, #9]
 800ace6:	b2db      	uxtb	r3, r3
 800ace8:	461a      	mov	r2, r3
 800acea:	4b13      	ldr	r3, [pc, #76]	@ (800ad38 <FATFS_LinkDriverEx+0x94>)
 800acec:	4413      	add	r3, r2
 800acee:	79fa      	ldrb	r2, [r7, #7]
 800acf0:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800acf2:	4b11      	ldr	r3, [pc, #68]	@ (800ad38 <FATFS_LinkDriverEx+0x94>)
 800acf4:	7a5b      	ldrb	r3, [r3, #9]
 800acf6:	b2db      	uxtb	r3, r3
 800acf8:	1c5a      	adds	r2, r3, #1
 800acfa:	b2d1      	uxtb	r1, r2
 800acfc:	4a0e      	ldr	r2, [pc, #56]	@ (800ad38 <FATFS_LinkDriverEx+0x94>)
 800acfe:	7251      	strb	r1, [r2, #9]
 800ad00:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800ad02:	7dbb      	ldrb	r3, [r7, #22]
 800ad04:	3330      	adds	r3, #48	@ 0x30
 800ad06:	b2da      	uxtb	r2, r3
 800ad08:	68bb      	ldr	r3, [r7, #8]
 800ad0a:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800ad0c:	68bb      	ldr	r3, [r7, #8]
 800ad0e:	3301      	adds	r3, #1
 800ad10:	223a      	movs	r2, #58	@ 0x3a
 800ad12:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800ad14:	68bb      	ldr	r3, [r7, #8]
 800ad16:	3302      	adds	r3, #2
 800ad18:	222f      	movs	r2, #47	@ 0x2f
 800ad1a:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800ad1c:	68bb      	ldr	r3, [r7, #8]
 800ad1e:	3303      	adds	r3, #3
 800ad20:	2200      	movs	r2, #0
 800ad22:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800ad24:	2300      	movs	r3, #0
 800ad26:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800ad28:	7dfb      	ldrb	r3, [r7, #23]
}
 800ad2a:	4618      	mov	r0, r3
 800ad2c:	371c      	adds	r7, #28
 800ad2e:	46bd      	mov	sp, r7
 800ad30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad34:	4770      	bx	lr
 800ad36:	bf00      	nop
 800ad38:	2000eff4 	.word	0x2000eff4

0800ad3c <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800ad3c:	b580      	push	{r7, lr}
 800ad3e:	b082      	sub	sp, #8
 800ad40:	af00      	add	r7, sp, #0
 800ad42:	6078      	str	r0, [r7, #4]
 800ad44:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800ad46:	2200      	movs	r2, #0
 800ad48:	6839      	ldr	r1, [r7, #0]
 800ad4a:	6878      	ldr	r0, [r7, #4]
 800ad4c:	f7ff ffaa 	bl	800aca4 <FATFS_LinkDriverEx>
 800ad50:	4603      	mov	r3, r0
}
 800ad52:	4618      	mov	r0, r3
 800ad54:	3708      	adds	r7, #8
 800ad56:	46bd      	mov	sp, r7
 800ad58:	bd80      	pop	{r7, pc}

0800ad5a <__cvt>:
 800ad5a:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ad5e:	ec57 6b10 	vmov	r6, r7, d0
 800ad62:	2f00      	cmp	r7, #0
 800ad64:	460c      	mov	r4, r1
 800ad66:	4619      	mov	r1, r3
 800ad68:	463b      	mov	r3, r7
 800ad6a:	bfbb      	ittet	lt
 800ad6c:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800ad70:	461f      	movlt	r7, r3
 800ad72:	2300      	movge	r3, #0
 800ad74:	232d      	movlt	r3, #45	@ 0x2d
 800ad76:	700b      	strb	r3, [r1, #0]
 800ad78:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800ad7a:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800ad7e:	4691      	mov	r9, r2
 800ad80:	f023 0820 	bic.w	r8, r3, #32
 800ad84:	bfbc      	itt	lt
 800ad86:	4632      	movlt	r2, r6
 800ad88:	4616      	movlt	r6, r2
 800ad8a:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800ad8e:	d005      	beq.n	800ad9c <__cvt+0x42>
 800ad90:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800ad94:	d100      	bne.n	800ad98 <__cvt+0x3e>
 800ad96:	3401      	adds	r4, #1
 800ad98:	2102      	movs	r1, #2
 800ad9a:	e000      	b.n	800ad9e <__cvt+0x44>
 800ad9c:	2103      	movs	r1, #3
 800ad9e:	ab03      	add	r3, sp, #12
 800ada0:	9301      	str	r3, [sp, #4]
 800ada2:	ab02      	add	r3, sp, #8
 800ada4:	9300      	str	r3, [sp, #0]
 800ada6:	ec47 6b10 	vmov	d0, r6, r7
 800adaa:	4653      	mov	r3, sl
 800adac:	4622      	mov	r2, r4
 800adae:	f001 f9d3 	bl	800c158 <_dtoa_r>
 800adb2:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800adb6:	4605      	mov	r5, r0
 800adb8:	d119      	bne.n	800adee <__cvt+0x94>
 800adba:	f019 0f01 	tst.w	r9, #1
 800adbe:	d00e      	beq.n	800adde <__cvt+0x84>
 800adc0:	eb00 0904 	add.w	r9, r0, r4
 800adc4:	2200      	movs	r2, #0
 800adc6:	2300      	movs	r3, #0
 800adc8:	4630      	mov	r0, r6
 800adca:	4639      	mov	r1, r7
 800adcc:	f7f5 fe84 	bl	8000ad8 <__aeabi_dcmpeq>
 800add0:	b108      	cbz	r0, 800add6 <__cvt+0x7c>
 800add2:	f8cd 900c 	str.w	r9, [sp, #12]
 800add6:	2230      	movs	r2, #48	@ 0x30
 800add8:	9b03      	ldr	r3, [sp, #12]
 800adda:	454b      	cmp	r3, r9
 800addc:	d31e      	bcc.n	800ae1c <__cvt+0xc2>
 800adde:	9b03      	ldr	r3, [sp, #12]
 800ade0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ade2:	1b5b      	subs	r3, r3, r5
 800ade4:	4628      	mov	r0, r5
 800ade6:	6013      	str	r3, [r2, #0]
 800ade8:	b004      	add	sp, #16
 800adea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800adee:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800adf2:	eb00 0904 	add.w	r9, r0, r4
 800adf6:	d1e5      	bne.n	800adc4 <__cvt+0x6a>
 800adf8:	7803      	ldrb	r3, [r0, #0]
 800adfa:	2b30      	cmp	r3, #48	@ 0x30
 800adfc:	d10a      	bne.n	800ae14 <__cvt+0xba>
 800adfe:	2200      	movs	r2, #0
 800ae00:	2300      	movs	r3, #0
 800ae02:	4630      	mov	r0, r6
 800ae04:	4639      	mov	r1, r7
 800ae06:	f7f5 fe67 	bl	8000ad8 <__aeabi_dcmpeq>
 800ae0a:	b918      	cbnz	r0, 800ae14 <__cvt+0xba>
 800ae0c:	f1c4 0401 	rsb	r4, r4, #1
 800ae10:	f8ca 4000 	str.w	r4, [sl]
 800ae14:	f8da 3000 	ldr.w	r3, [sl]
 800ae18:	4499      	add	r9, r3
 800ae1a:	e7d3      	b.n	800adc4 <__cvt+0x6a>
 800ae1c:	1c59      	adds	r1, r3, #1
 800ae1e:	9103      	str	r1, [sp, #12]
 800ae20:	701a      	strb	r2, [r3, #0]
 800ae22:	e7d9      	b.n	800add8 <__cvt+0x7e>

0800ae24 <__exponent>:
 800ae24:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ae26:	2900      	cmp	r1, #0
 800ae28:	bfba      	itte	lt
 800ae2a:	4249      	neglt	r1, r1
 800ae2c:	232d      	movlt	r3, #45	@ 0x2d
 800ae2e:	232b      	movge	r3, #43	@ 0x2b
 800ae30:	2909      	cmp	r1, #9
 800ae32:	7002      	strb	r2, [r0, #0]
 800ae34:	7043      	strb	r3, [r0, #1]
 800ae36:	dd29      	ble.n	800ae8c <__exponent+0x68>
 800ae38:	f10d 0307 	add.w	r3, sp, #7
 800ae3c:	461d      	mov	r5, r3
 800ae3e:	270a      	movs	r7, #10
 800ae40:	461a      	mov	r2, r3
 800ae42:	fbb1 f6f7 	udiv	r6, r1, r7
 800ae46:	fb07 1416 	mls	r4, r7, r6, r1
 800ae4a:	3430      	adds	r4, #48	@ 0x30
 800ae4c:	f802 4c01 	strb.w	r4, [r2, #-1]
 800ae50:	460c      	mov	r4, r1
 800ae52:	2c63      	cmp	r4, #99	@ 0x63
 800ae54:	f103 33ff 	add.w	r3, r3, #4294967295
 800ae58:	4631      	mov	r1, r6
 800ae5a:	dcf1      	bgt.n	800ae40 <__exponent+0x1c>
 800ae5c:	3130      	adds	r1, #48	@ 0x30
 800ae5e:	1e94      	subs	r4, r2, #2
 800ae60:	f803 1c01 	strb.w	r1, [r3, #-1]
 800ae64:	1c41      	adds	r1, r0, #1
 800ae66:	4623      	mov	r3, r4
 800ae68:	42ab      	cmp	r3, r5
 800ae6a:	d30a      	bcc.n	800ae82 <__exponent+0x5e>
 800ae6c:	f10d 0309 	add.w	r3, sp, #9
 800ae70:	1a9b      	subs	r3, r3, r2
 800ae72:	42ac      	cmp	r4, r5
 800ae74:	bf88      	it	hi
 800ae76:	2300      	movhi	r3, #0
 800ae78:	3302      	adds	r3, #2
 800ae7a:	4403      	add	r3, r0
 800ae7c:	1a18      	subs	r0, r3, r0
 800ae7e:	b003      	add	sp, #12
 800ae80:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ae82:	f813 6b01 	ldrb.w	r6, [r3], #1
 800ae86:	f801 6f01 	strb.w	r6, [r1, #1]!
 800ae8a:	e7ed      	b.n	800ae68 <__exponent+0x44>
 800ae8c:	2330      	movs	r3, #48	@ 0x30
 800ae8e:	3130      	adds	r1, #48	@ 0x30
 800ae90:	7083      	strb	r3, [r0, #2]
 800ae92:	70c1      	strb	r1, [r0, #3]
 800ae94:	1d03      	adds	r3, r0, #4
 800ae96:	e7f1      	b.n	800ae7c <__exponent+0x58>

0800ae98 <_printf_float>:
 800ae98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ae9c:	b08d      	sub	sp, #52	@ 0x34
 800ae9e:	460c      	mov	r4, r1
 800aea0:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800aea4:	4616      	mov	r6, r2
 800aea6:	461f      	mov	r7, r3
 800aea8:	4605      	mov	r5, r0
 800aeaa:	f001 f823 	bl	800bef4 <_localeconv_r>
 800aeae:	6803      	ldr	r3, [r0, #0]
 800aeb0:	9304      	str	r3, [sp, #16]
 800aeb2:	4618      	mov	r0, r3
 800aeb4:	f7f5 f9e4 	bl	8000280 <strlen>
 800aeb8:	2300      	movs	r3, #0
 800aeba:	930a      	str	r3, [sp, #40]	@ 0x28
 800aebc:	f8d8 3000 	ldr.w	r3, [r8]
 800aec0:	9005      	str	r0, [sp, #20]
 800aec2:	3307      	adds	r3, #7
 800aec4:	f023 0307 	bic.w	r3, r3, #7
 800aec8:	f103 0208 	add.w	r2, r3, #8
 800aecc:	f894 a018 	ldrb.w	sl, [r4, #24]
 800aed0:	f8d4 b000 	ldr.w	fp, [r4]
 800aed4:	f8c8 2000 	str.w	r2, [r8]
 800aed8:	e9d3 8900 	ldrd	r8, r9, [r3]
 800aedc:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800aee0:	9307      	str	r3, [sp, #28]
 800aee2:	f8cd 8018 	str.w	r8, [sp, #24]
 800aee6:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800aeea:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800aeee:	4b9c      	ldr	r3, [pc, #624]	@ (800b160 <_printf_float+0x2c8>)
 800aef0:	f04f 32ff 	mov.w	r2, #4294967295
 800aef4:	f7f5 fe22 	bl	8000b3c <__aeabi_dcmpun>
 800aef8:	bb70      	cbnz	r0, 800af58 <_printf_float+0xc0>
 800aefa:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800aefe:	4b98      	ldr	r3, [pc, #608]	@ (800b160 <_printf_float+0x2c8>)
 800af00:	f04f 32ff 	mov.w	r2, #4294967295
 800af04:	f7f5 fdfc 	bl	8000b00 <__aeabi_dcmple>
 800af08:	bb30      	cbnz	r0, 800af58 <_printf_float+0xc0>
 800af0a:	2200      	movs	r2, #0
 800af0c:	2300      	movs	r3, #0
 800af0e:	4640      	mov	r0, r8
 800af10:	4649      	mov	r1, r9
 800af12:	f7f5 fdeb 	bl	8000aec <__aeabi_dcmplt>
 800af16:	b110      	cbz	r0, 800af1e <_printf_float+0x86>
 800af18:	232d      	movs	r3, #45	@ 0x2d
 800af1a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800af1e:	4a91      	ldr	r2, [pc, #580]	@ (800b164 <_printf_float+0x2cc>)
 800af20:	4b91      	ldr	r3, [pc, #580]	@ (800b168 <_printf_float+0x2d0>)
 800af22:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800af26:	bf8c      	ite	hi
 800af28:	4690      	movhi	r8, r2
 800af2a:	4698      	movls	r8, r3
 800af2c:	2303      	movs	r3, #3
 800af2e:	6123      	str	r3, [r4, #16]
 800af30:	f02b 0304 	bic.w	r3, fp, #4
 800af34:	6023      	str	r3, [r4, #0]
 800af36:	f04f 0900 	mov.w	r9, #0
 800af3a:	9700      	str	r7, [sp, #0]
 800af3c:	4633      	mov	r3, r6
 800af3e:	aa0b      	add	r2, sp, #44	@ 0x2c
 800af40:	4621      	mov	r1, r4
 800af42:	4628      	mov	r0, r5
 800af44:	f000 f9d2 	bl	800b2ec <_printf_common>
 800af48:	3001      	adds	r0, #1
 800af4a:	f040 808d 	bne.w	800b068 <_printf_float+0x1d0>
 800af4e:	f04f 30ff 	mov.w	r0, #4294967295
 800af52:	b00d      	add	sp, #52	@ 0x34
 800af54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800af58:	4642      	mov	r2, r8
 800af5a:	464b      	mov	r3, r9
 800af5c:	4640      	mov	r0, r8
 800af5e:	4649      	mov	r1, r9
 800af60:	f7f5 fdec 	bl	8000b3c <__aeabi_dcmpun>
 800af64:	b140      	cbz	r0, 800af78 <_printf_float+0xe0>
 800af66:	464b      	mov	r3, r9
 800af68:	2b00      	cmp	r3, #0
 800af6a:	bfbc      	itt	lt
 800af6c:	232d      	movlt	r3, #45	@ 0x2d
 800af6e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800af72:	4a7e      	ldr	r2, [pc, #504]	@ (800b16c <_printf_float+0x2d4>)
 800af74:	4b7e      	ldr	r3, [pc, #504]	@ (800b170 <_printf_float+0x2d8>)
 800af76:	e7d4      	b.n	800af22 <_printf_float+0x8a>
 800af78:	6863      	ldr	r3, [r4, #4]
 800af7a:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800af7e:	9206      	str	r2, [sp, #24]
 800af80:	1c5a      	adds	r2, r3, #1
 800af82:	d13b      	bne.n	800affc <_printf_float+0x164>
 800af84:	2306      	movs	r3, #6
 800af86:	6063      	str	r3, [r4, #4]
 800af88:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800af8c:	2300      	movs	r3, #0
 800af8e:	6022      	str	r2, [r4, #0]
 800af90:	9303      	str	r3, [sp, #12]
 800af92:	ab0a      	add	r3, sp, #40	@ 0x28
 800af94:	e9cd a301 	strd	sl, r3, [sp, #4]
 800af98:	ab09      	add	r3, sp, #36	@ 0x24
 800af9a:	9300      	str	r3, [sp, #0]
 800af9c:	6861      	ldr	r1, [r4, #4]
 800af9e:	ec49 8b10 	vmov	d0, r8, r9
 800afa2:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800afa6:	4628      	mov	r0, r5
 800afa8:	f7ff fed7 	bl	800ad5a <__cvt>
 800afac:	9b06      	ldr	r3, [sp, #24]
 800afae:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800afb0:	2b47      	cmp	r3, #71	@ 0x47
 800afb2:	4680      	mov	r8, r0
 800afb4:	d129      	bne.n	800b00a <_printf_float+0x172>
 800afb6:	1cc8      	adds	r0, r1, #3
 800afb8:	db02      	blt.n	800afc0 <_printf_float+0x128>
 800afba:	6863      	ldr	r3, [r4, #4]
 800afbc:	4299      	cmp	r1, r3
 800afbe:	dd41      	ble.n	800b044 <_printf_float+0x1ac>
 800afc0:	f1aa 0a02 	sub.w	sl, sl, #2
 800afc4:	fa5f fa8a 	uxtb.w	sl, sl
 800afc8:	3901      	subs	r1, #1
 800afca:	4652      	mov	r2, sl
 800afcc:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800afd0:	9109      	str	r1, [sp, #36]	@ 0x24
 800afd2:	f7ff ff27 	bl	800ae24 <__exponent>
 800afd6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800afd8:	1813      	adds	r3, r2, r0
 800afda:	2a01      	cmp	r2, #1
 800afdc:	4681      	mov	r9, r0
 800afde:	6123      	str	r3, [r4, #16]
 800afe0:	dc02      	bgt.n	800afe8 <_printf_float+0x150>
 800afe2:	6822      	ldr	r2, [r4, #0]
 800afe4:	07d2      	lsls	r2, r2, #31
 800afe6:	d501      	bpl.n	800afec <_printf_float+0x154>
 800afe8:	3301      	adds	r3, #1
 800afea:	6123      	str	r3, [r4, #16]
 800afec:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800aff0:	2b00      	cmp	r3, #0
 800aff2:	d0a2      	beq.n	800af3a <_printf_float+0xa2>
 800aff4:	232d      	movs	r3, #45	@ 0x2d
 800aff6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800affa:	e79e      	b.n	800af3a <_printf_float+0xa2>
 800affc:	9a06      	ldr	r2, [sp, #24]
 800affe:	2a47      	cmp	r2, #71	@ 0x47
 800b000:	d1c2      	bne.n	800af88 <_printf_float+0xf0>
 800b002:	2b00      	cmp	r3, #0
 800b004:	d1c0      	bne.n	800af88 <_printf_float+0xf0>
 800b006:	2301      	movs	r3, #1
 800b008:	e7bd      	b.n	800af86 <_printf_float+0xee>
 800b00a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800b00e:	d9db      	bls.n	800afc8 <_printf_float+0x130>
 800b010:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800b014:	d118      	bne.n	800b048 <_printf_float+0x1b0>
 800b016:	2900      	cmp	r1, #0
 800b018:	6863      	ldr	r3, [r4, #4]
 800b01a:	dd0b      	ble.n	800b034 <_printf_float+0x19c>
 800b01c:	6121      	str	r1, [r4, #16]
 800b01e:	b913      	cbnz	r3, 800b026 <_printf_float+0x18e>
 800b020:	6822      	ldr	r2, [r4, #0]
 800b022:	07d0      	lsls	r0, r2, #31
 800b024:	d502      	bpl.n	800b02c <_printf_float+0x194>
 800b026:	3301      	adds	r3, #1
 800b028:	440b      	add	r3, r1
 800b02a:	6123      	str	r3, [r4, #16]
 800b02c:	65a1      	str	r1, [r4, #88]	@ 0x58
 800b02e:	f04f 0900 	mov.w	r9, #0
 800b032:	e7db      	b.n	800afec <_printf_float+0x154>
 800b034:	b913      	cbnz	r3, 800b03c <_printf_float+0x1a4>
 800b036:	6822      	ldr	r2, [r4, #0]
 800b038:	07d2      	lsls	r2, r2, #31
 800b03a:	d501      	bpl.n	800b040 <_printf_float+0x1a8>
 800b03c:	3302      	adds	r3, #2
 800b03e:	e7f4      	b.n	800b02a <_printf_float+0x192>
 800b040:	2301      	movs	r3, #1
 800b042:	e7f2      	b.n	800b02a <_printf_float+0x192>
 800b044:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800b048:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b04a:	4299      	cmp	r1, r3
 800b04c:	db05      	blt.n	800b05a <_printf_float+0x1c2>
 800b04e:	6823      	ldr	r3, [r4, #0]
 800b050:	6121      	str	r1, [r4, #16]
 800b052:	07d8      	lsls	r0, r3, #31
 800b054:	d5ea      	bpl.n	800b02c <_printf_float+0x194>
 800b056:	1c4b      	adds	r3, r1, #1
 800b058:	e7e7      	b.n	800b02a <_printf_float+0x192>
 800b05a:	2900      	cmp	r1, #0
 800b05c:	bfd4      	ite	le
 800b05e:	f1c1 0202 	rsble	r2, r1, #2
 800b062:	2201      	movgt	r2, #1
 800b064:	4413      	add	r3, r2
 800b066:	e7e0      	b.n	800b02a <_printf_float+0x192>
 800b068:	6823      	ldr	r3, [r4, #0]
 800b06a:	055a      	lsls	r2, r3, #21
 800b06c:	d407      	bmi.n	800b07e <_printf_float+0x1e6>
 800b06e:	6923      	ldr	r3, [r4, #16]
 800b070:	4642      	mov	r2, r8
 800b072:	4631      	mov	r1, r6
 800b074:	4628      	mov	r0, r5
 800b076:	47b8      	blx	r7
 800b078:	3001      	adds	r0, #1
 800b07a:	d12b      	bne.n	800b0d4 <_printf_float+0x23c>
 800b07c:	e767      	b.n	800af4e <_printf_float+0xb6>
 800b07e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800b082:	f240 80dd 	bls.w	800b240 <_printf_float+0x3a8>
 800b086:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800b08a:	2200      	movs	r2, #0
 800b08c:	2300      	movs	r3, #0
 800b08e:	f7f5 fd23 	bl	8000ad8 <__aeabi_dcmpeq>
 800b092:	2800      	cmp	r0, #0
 800b094:	d033      	beq.n	800b0fe <_printf_float+0x266>
 800b096:	4a37      	ldr	r2, [pc, #220]	@ (800b174 <_printf_float+0x2dc>)
 800b098:	2301      	movs	r3, #1
 800b09a:	4631      	mov	r1, r6
 800b09c:	4628      	mov	r0, r5
 800b09e:	47b8      	blx	r7
 800b0a0:	3001      	adds	r0, #1
 800b0a2:	f43f af54 	beq.w	800af4e <_printf_float+0xb6>
 800b0a6:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800b0aa:	4543      	cmp	r3, r8
 800b0ac:	db02      	blt.n	800b0b4 <_printf_float+0x21c>
 800b0ae:	6823      	ldr	r3, [r4, #0]
 800b0b0:	07d8      	lsls	r0, r3, #31
 800b0b2:	d50f      	bpl.n	800b0d4 <_printf_float+0x23c>
 800b0b4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b0b8:	4631      	mov	r1, r6
 800b0ba:	4628      	mov	r0, r5
 800b0bc:	47b8      	blx	r7
 800b0be:	3001      	adds	r0, #1
 800b0c0:	f43f af45 	beq.w	800af4e <_printf_float+0xb6>
 800b0c4:	f04f 0900 	mov.w	r9, #0
 800b0c8:	f108 38ff 	add.w	r8, r8, #4294967295
 800b0cc:	f104 0a1a 	add.w	sl, r4, #26
 800b0d0:	45c8      	cmp	r8, r9
 800b0d2:	dc09      	bgt.n	800b0e8 <_printf_float+0x250>
 800b0d4:	6823      	ldr	r3, [r4, #0]
 800b0d6:	079b      	lsls	r3, r3, #30
 800b0d8:	f100 8103 	bmi.w	800b2e2 <_printf_float+0x44a>
 800b0dc:	68e0      	ldr	r0, [r4, #12]
 800b0de:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b0e0:	4298      	cmp	r0, r3
 800b0e2:	bfb8      	it	lt
 800b0e4:	4618      	movlt	r0, r3
 800b0e6:	e734      	b.n	800af52 <_printf_float+0xba>
 800b0e8:	2301      	movs	r3, #1
 800b0ea:	4652      	mov	r2, sl
 800b0ec:	4631      	mov	r1, r6
 800b0ee:	4628      	mov	r0, r5
 800b0f0:	47b8      	blx	r7
 800b0f2:	3001      	adds	r0, #1
 800b0f4:	f43f af2b 	beq.w	800af4e <_printf_float+0xb6>
 800b0f8:	f109 0901 	add.w	r9, r9, #1
 800b0fc:	e7e8      	b.n	800b0d0 <_printf_float+0x238>
 800b0fe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b100:	2b00      	cmp	r3, #0
 800b102:	dc39      	bgt.n	800b178 <_printf_float+0x2e0>
 800b104:	4a1b      	ldr	r2, [pc, #108]	@ (800b174 <_printf_float+0x2dc>)
 800b106:	2301      	movs	r3, #1
 800b108:	4631      	mov	r1, r6
 800b10a:	4628      	mov	r0, r5
 800b10c:	47b8      	blx	r7
 800b10e:	3001      	adds	r0, #1
 800b110:	f43f af1d 	beq.w	800af4e <_printf_float+0xb6>
 800b114:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800b118:	ea59 0303 	orrs.w	r3, r9, r3
 800b11c:	d102      	bne.n	800b124 <_printf_float+0x28c>
 800b11e:	6823      	ldr	r3, [r4, #0]
 800b120:	07d9      	lsls	r1, r3, #31
 800b122:	d5d7      	bpl.n	800b0d4 <_printf_float+0x23c>
 800b124:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b128:	4631      	mov	r1, r6
 800b12a:	4628      	mov	r0, r5
 800b12c:	47b8      	blx	r7
 800b12e:	3001      	adds	r0, #1
 800b130:	f43f af0d 	beq.w	800af4e <_printf_float+0xb6>
 800b134:	f04f 0a00 	mov.w	sl, #0
 800b138:	f104 0b1a 	add.w	fp, r4, #26
 800b13c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b13e:	425b      	negs	r3, r3
 800b140:	4553      	cmp	r3, sl
 800b142:	dc01      	bgt.n	800b148 <_printf_float+0x2b0>
 800b144:	464b      	mov	r3, r9
 800b146:	e793      	b.n	800b070 <_printf_float+0x1d8>
 800b148:	2301      	movs	r3, #1
 800b14a:	465a      	mov	r2, fp
 800b14c:	4631      	mov	r1, r6
 800b14e:	4628      	mov	r0, r5
 800b150:	47b8      	blx	r7
 800b152:	3001      	adds	r0, #1
 800b154:	f43f aefb 	beq.w	800af4e <_printf_float+0xb6>
 800b158:	f10a 0a01 	add.w	sl, sl, #1
 800b15c:	e7ee      	b.n	800b13c <_printf_float+0x2a4>
 800b15e:	bf00      	nop
 800b160:	7fefffff 	.word	0x7fefffff
 800b164:	08010ccc 	.word	0x08010ccc
 800b168:	08010cc8 	.word	0x08010cc8
 800b16c:	08010cd4 	.word	0x08010cd4
 800b170:	08010cd0 	.word	0x08010cd0
 800b174:	08010cd8 	.word	0x08010cd8
 800b178:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800b17a:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800b17e:	4553      	cmp	r3, sl
 800b180:	bfa8      	it	ge
 800b182:	4653      	movge	r3, sl
 800b184:	2b00      	cmp	r3, #0
 800b186:	4699      	mov	r9, r3
 800b188:	dc36      	bgt.n	800b1f8 <_printf_float+0x360>
 800b18a:	f04f 0b00 	mov.w	fp, #0
 800b18e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b192:	f104 021a 	add.w	r2, r4, #26
 800b196:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800b198:	9306      	str	r3, [sp, #24]
 800b19a:	eba3 0309 	sub.w	r3, r3, r9
 800b19e:	455b      	cmp	r3, fp
 800b1a0:	dc31      	bgt.n	800b206 <_printf_float+0x36e>
 800b1a2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b1a4:	459a      	cmp	sl, r3
 800b1a6:	dc3a      	bgt.n	800b21e <_printf_float+0x386>
 800b1a8:	6823      	ldr	r3, [r4, #0]
 800b1aa:	07da      	lsls	r2, r3, #31
 800b1ac:	d437      	bmi.n	800b21e <_printf_float+0x386>
 800b1ae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b1b0:	ebaa 0903 	sub.w	r9, sl, r3
 800b1b4:	9b06      	ldr	r3, [sp, #24]
 800b1b6:	ebaa 0303 	sub.w	r3, sl, r3
 800b1ba:	4599      	cmp	r9, r3
 800b1bc:	bfa8      	it	ge
 800b1be:	4699      	movge	r9, r3
 800b1c0:	f1b9 0f00 	cmp.w	r9, #0
 800b1c4:	dc33      	bgt.n	800b22e <_printf_float+0x396>
 800b1c6:	f04f 0800 	mov.w	r8, #0
 800b1ca:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b1ce:	f104 0b1a 	add.w	fp, r4, #26
 800b1d2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b1d4:	ebaa 0303 	sub.w	r3, sl, r3
 800b1d8:	eba3 0309 	sub.w	r3, r3, r9
 800b1dc:	4543      	cmp	r3, r8
 800b1de:	f77f af79 	ble.w	800b0d4 <_printf_float+0x23c>
 800b1e2:	2301      	movs	r3, #1
 800b1e4:	465a      	mov	r2, fp
 800b1e6:	4631      	mov	r1, r6
 800b1e8:	4628      	mov	r0, r5
 800b1ea:	47b8      	blx	r7
 800b1ec:	3001      	adds	r0, #1
 800b1ee:	f43f aeae 	beq.w	800af4e <_printf_float+0xb6>
 800b1f2:	f108 0801 	add.w	r8, r8, #1
 800b1f6:	e7ec      	b.n	800b1d2 <_printf_float+0x33a>
 800b1f8:	4642      	mov	r2, r8
 800b1fa:	4631      	mov	r1, r6
 800b1fc:	4628      	mov	r0, r5
 800b1fe:	47b8      	blx	r7
 800b200:	3001      	adds	r0, #1
 800b202:	d1c2      	bne.n	800b18a <_printf_float+0x2f2>
 800b204:	e6a3      	b.n	800af4e <_printf_float+0xb6>
 800b206:	2301      	movs	r3, #1
 800b208:	4631      	mov	r1, r6
 800b20a:	4628      	mov	r0, r5
 800b20c:	9206      	str	r2, [sp, #24]
 800b20e:	47b8      	blx	r7
 800b210:	3001      	adds	r0, #1
 800b212:	f43f ae9c 	beq.w	800af4e <_printf_float+0xb6>
 800b216:	9a06      	ldr	r2, [sp, #24]
 800b218:	f10b 0b01 	add.w	fp, fp, #1
 800b21c:	e7bb      	b.n	800b196 <_printf_float+0x2fe>
 800b21e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b222:	4631      	mov	r1, r6
 800b224:	4628      	mov	r0, r5
 800b226:	47b8      	blx	r7
 800b228:	3001      	adds	r0, #1
 800b22a:	d1c0      	bne.n	800b1ae <_printf_float+0x316>
 800b22c:	e68f      	b.n	800af4e <_printf_float+0xb6>
 800b22e:	9a06      	ldr	r2, [sp, #24]
 800b230:	464b      	mov	r3, r9
 800b232:	4442      	add	r2, r8
 800b234:	4631      	mov	r1, r6
 800b236:	4628      	mov	r0, r5
 800b238:	47b8      	blx	r7
 800b23a:	3001      	adds	r0, #1
 800b23c:	d1c3      	bne.n	800b1c6 <_printf_float+0x32e>
 800b23e:	e686      	b.n	800af4e <_printf_float+0xb6>
 800b240:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800b244:	f1ba 0f01 	cmp.w	sl, #1
 800b248:	dc01      	bgt.n	800b24e <_printf_float+0x3b6>
 800b24a:	07db      	lsls	r3, r3, #31
 800b24c:	d536      	bpl.n	800b2bc <_printf_float+0x424>
 800b24e:	2301      	movs	r3, #1
 800b250:	4642      	mov	r2, r8
 800b252:	4631      	mov	r1, r6
 800b254:	4628      	mov	r0, r5
 800b256:	47b8      	blx	r7
 800b258:	3001      	adds	r0, #1
 800b25a:	f43f ae78 	beq.w	800af4e <_printf_float+0xb6>
 800b25e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b262:	4631      	mov	r1, r6
 800b264:	4628      	mov	r0, r5
 800b266:	47b8      	blx	r7
 800b268:	3001      	adds	r0, #1
 800b26a:	f43f ae70 	beq.w	800af4e <_printf_float+0xb6>
 800b26e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800b272:	2200      	movs	r2, #0
 800b274:	2300      	movs	r3, #0
 800b276:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b27a:	f7f5 fc2d 	bl	8000ad8 <__aeabi_dcmpeq>
 800b27e:	b9c0      	cbnz	r0, 800b2b2 <_printf_float+0x41a>
 800b280:	4653      	mov	r3, sl
 800b282:	f108 0201 	add.w	r2, r8, #1
 800b286:	4631      	mov	r1, r6
 800b288:	4628      	mov	r0, r5
 800b28a:	47b8      	blx	r7
 800b28c:	3001      	adds	r0, #1
 800b28e:	d10c      	bne.n	800b2aa <_printf_float+0x412>
 800b290:	e65d      	b.n	800af4e <_printf_float+0xb6>
 800b292:	2301      	movs	r3, #1
 800b294:	465a      	mov	r2, fp
 800b296:	4631      	mov	r1, r6
 800b298:	4628      	mov	r0, r5
 800b29a:	47b8      	blx	r7
 800b29c:	3001      	adds	r0, #1
 800b29e:	f43f ae56 	beq.w	800af4e <_printf_float+0xb6>
 800b2a2:	f108 0801 	add.w	r8, r8, #1
 800b2a6:	45d0      	cmp	r8, sl
 800b2a8:	dbf3      	blt.n	800b292 <_printf_float+0x3fa>
 800b2aa:	464b      	mov	r3, r9
 800b2ac:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800b2b0:	e6df      	b.n	800b072 <_printf_float+0x1da>
 800b2b2:	f04f 0800 	mov.w	r8, #0
 800b2b6:	f104 0b1a 	add.w	fp, r4, #26
 800b2ba:	e7f4      	b.n	800b2a6 <_printf_float+0x40e>
 800b2bc:	2301      	movs	r3, #1
 800b2be:	4642      	mov	r2, r8
 800b2c0:	e7e1      	b.n	800b286 <_printf_float+0x3ee>
 800b2c2:	2301      	movs	r3, #1
 800b2c4:	464a      	mov	r2, r9
 800b2c6:	4631      	mov	r1, r6
 800b2c8:	4628      	mov	r0, r5
 800b2ca:	47b8      	blx	r7
 800b2cc:	3001      	adds	r0, #1
 800b2ce:	f43f ae3e 	beq.w	800af4e <_printf_float+0xb6>
 800b2d2:	f108 0801 	add.w	r8, r8, #1
 800b2d6:	68e3      	ldr	r3, [r4, #12]
 800b2d8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800b2da:	1a5b      	subs	r3, r3, r1
 800b2dc:	4543      	cmp	r3, r8
 800b2de:	dcf0      	bgt.n	800b2c2 <_printf_float+0x42a>
 800b2e0:	e6fc      	b.n	800b0dc <_printf_float+0x244>
 800b2e2:	f04f 0800 	mov.w	r8, #0
 800b2e6:	f104 0919 	add.w	r9, r4, #25
 800b2ea:	e7f4      	b.n	800b2d6 <_printf_float+0x43e>

0800b2ec <_printf_common>:
 800b2ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b2f0:	4616      	mov	r6, r2
 800b2f2:	4698      	mov	r8, r3
 800b2f4:	688a      	ldr	r2, [r1, #8]
 800b2f6:	690b      	ldr	r3, [r1, #16]
 800b2f8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800b2fc:	4293      	cmp	r3, r2
 800b2fe:	bfb8      	it	lt
 800b300:	4613      	movlt	r3, r2
 800b302:	6033      	str	r3, [r6, #0]
 800b304:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800b308:	4607      	mov	r7, r0
 800b30a:	460c      	mov	r4, r1
 800b30c:	b10a      	cbz	r2, 800b312 <_printf_common+0x26>
 800b30e:	3301      	adds	r3, #1
 800b310:	6033      	str	r3, [r6, #0]
 800b312:	6823      	ldr	r3, [r4, #0]
 800b314:	0699      	lsls	r1, r3, #26
 800b316:	bf42      	ittt	mi
 800b318:	6833      	ldrmi	r3, [r6, #0]
 800b31a:	3302      	addmi	r3, #2
 800b31c:	6033      	strmi	r3, [r6, #0]
 800b31e:	6825      	ldr	r5, [r4, #0]
 800b320:	f015 0506 	ands.w	r5, r5, #6
 800b324:	d106      	bne.n	800b334 <_printf_common+0x48>
 800b326:	f104 0a19 	add.w	sl, r4, #25
 800b32a:	68e3      	ldr	r3, [r4, #12]
 800b32c:	6832      	ldr	r2, [r6, #0]
 800b32e:	1a9b      	subs	r3, r3, r2
 800b330:	42ab      	cmp	r3, r5
 800b332:	dc26      	bgt.n	800b382 <_printf_common+0x96>
 800b334:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800b338:	6822      	ldr	r2, [r4, #0]
 800b33a:	3b00      	subs	r3, #0
 800b33c:	bf18      	it	ne
 800b33e:	2301      	movne	r3, #1
 800b340:	0692      	lsls	r2, r2, #26
 800b342:	d42b      	bmi.n	800b39c <_printf_common+0xb0>
 800b344:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800b348:	4641      	mov	r1, r8
 800b34a:	4638      	mov	r0, r7
 800b34c:	47c8      	blx	r9
 800b34e:	3001      	adds	r0, #1
 800b350:	d01e      	beq.n	800b390 <_printf_common+0xa4>
 800b352:	6823      	ldr	r3, [r4, #0]
 800b354:	6922      	ldr	r2, [r4, #16]
 800b356:	f003 0306 	and.w	r3, r3, #6
 800b35a:	2b04      	cmp	r3, #4
 800b35c:	bf02      	ittt	eq
 800b35e:	68e5      	ldreq	r5, [r4, #12]
 800b360:	6833      	ldreq	r3, [r6, #0]
 800b362:	1aed      	subeq	r5, r5, r3
 800b364:	68a3      	ldr	r3, [r4, #8]
 800b366:	bf0c      	ite	eq
 800b368:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b36c:	2500      	movne	r5, #0
 800b36e:	4293      	cmp	r3, r2
 800b370:	bfc4      	itt	gt
 800b372:	1a9b      	subgt	r3, r3, r2
 800b374:	18ed      	addgt	r5, r5, r3
 800b376:	2600      	movs	r6, #0
 800b378:	341a      	adds	r4, #26
 800b37a:	42b5      	cmp	r5, r6
 800b37c:	d11a      	bne.n	800b3b4 <_printf_common+0xc8>
 800b37e:	2000      	movs	r0, #0
 800b380:	e008      	b.n	800b394 <_printf_common+0xa8>
 800b382:	2301      	movs	r3, #1
 800b384:	4652      	mov	r2, sl
 800b386:	4641      	mov	r1, r8
 800b388:	4638      	mov	r0, r7
 800b38a:	47c8      	blx	r9
 800b38c:	3001      	adds	r0, #1
 800b38e:	d103      	bne.n	800b398 <_printf_common+0xac>
 800b390:	f04f 30ff 	mov.w	r0, #4294967295
 800b394:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b398:	3501      	adds	r5, #1
 800b39a:	e7c6      	b.n	800b32a <_printf_common+0x3e>
 800b39c:	18e1      	adds	r1, r4, r3
 800b39e:	1c5a      	adds	r2, r3, #1
 800b3a0:	2030      	movs	r0, #48	@ 0x30
 800b3a2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800b3a6:	4422      	add	r2, r4
 800b3a8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800b3ac:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800b3b0:	3302      	adds	r3, #2
 800b3b2:	e7c7      	b.n	800b344 <_printf_common+0x58>
 800b3b4:	2301      	movs	r3, #1
 800b3b6:	4622      	mov	r2, r4
 800b3b8:	4641      	mov	r1, r8
 800b3ba:	4638      	mov	r0, r7
 800b3bc:	47c8      	blx	r9
 800b3be:	3001      	adds	r0, #1
 800b3c0:	d0e6      	beq.n	800b390 <_printf_common+0xa4>
 800b3c2:	3601      	adds	r6, #1
 800b3c4:	e7d9      	b.n	800b37a <_printf_common+0x8e>
	...

0800b3c8 <_printf_i>:
 800b3c8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b3cc:	7e0f      	ldrb	r7, [r1, #24]
 800b3ce:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800b3d0:	2f78      	cmp	r7, #120	@ 0x78
 800b3d2:	4691      	mov	r9, r2
 800b3d4:	4680      	mov	r8, r0
 800b3d6:	460c      	mov	r4, r1
 800b3d8:	469a      	mov	sl, r3
 800b3da:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800b3de:	d807      	bhi.n	800b3f0 <_printf_i+0x28>
 800b3e0:	2f62      	cmp	r7, #98	@ 0x62
 800b3e2:	d80a      	bhi.n	800b3fa <_printf_i+0x32>
 800b3e4:	2f00      	cmp	r7, #0
 800b3e6:	f000 80d1 	beq.w	800b58c <_printf_i+0x1c4>
 800b3ea:	2f58      	cmp	r7, #88	@ 0x58
 800b3ec:	f000 80b8 	beq.w	800b560 <_printf_i+0x198>
 800b3f0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b3f4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800b3f8:	e03a      	b.n	800b470 <_printf_i+0xa8>
 800b3fa:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800b3fe:	2b15      	cmp	r3, #21
 800b400:	d8f6      	bhi.n	800b3f0 <_printf_i+0x28>
 800b402:	a101      	add	r1, pc, #4	@ (adr r1, 800b408 <_printf_i+0x40>)
 800b404:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b408:	0800b461 	.word	0x0800b461
 800b40c:	0800b475 	.word	0x0800b475
 800b410:	0800b3f1 	.word	0x0800b3f1
 800b414:	0800b3f1 	.word	0x0800b3f1
 800b418:	0800b3f1 	.word	0x0800b3f1
 800b41c:	0800b3f1 	.word	0x0800b3f1
 800b420:	0800b475 	.word	0x0800b475
 800b424:	0800b3f1 	.word	0x0800b3f1
 800b428:	0800b3f1 	.word	0x0800b3f1
 800b42c:	0800b3f1 	.word	0x0800b3f1
 800b430:	0800b3f1 	.word	0x0800b3f1
 800b434:	0800b573 	.word	0x0800b573
 800b438:	0800b49f 	.word	0x0800b49f
 800b43c:	0800b52d 	.word	0x0800b52d
 800b440:	0800b3f1 	.word	0x0800b3f1
 800b444:	0800b3f1 	.word	0x0800b3f1
 800b448:	0800b595 	.word	0x0800b595
 800b44c:	0800b3f1 	.word	0x0800b3f1
 800b450:	0800b49f 	.word	0x0800b49f
 800b454:	0800b3f1 	.word	0x0800b3f1
 800b458:	0800b3f1 	.word	0x0800b3f1
 800b45c:	0800b535 	.word	0x0800b535
 800b460:	6833      	ldr	r3, [r6, #0]
 800b462:	1d1a      	adds	r2, r3, #4
 800b464:	681b      	ldr	r3, [r3, #0]
 800b466:	6032      	str	r2, [r6, #0]
 800b468:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b46c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800b470:	2301      	movs	r3, #1
 800b472:	e09c      	b.n	800b5ae <_printf_i+0x1e6>
 800b474:	6833      	ldr	r3, [r6, #0]
 800b476:	6820      	ldr	r0, [r4, #0]
 800b478:	1d19      	adds	r1, r3, #4
 800b47a:	6031      	str	r1, [r6, #0]
 800b47c:	0606      	lsls	r6, r0, #24
 800b47e:	d501      	bpl.n	800b484 <_printf_i+0xbc>
 800b480:	681d      	ldr	r5, [r3, #0]
 800b482:	e003      	b.n	800b48c <_printf_i+0xc4>
 800b484:	0645      	lsls	r5, r0, #25
 800b486:	d5fb      	bpl.n	800b480 <_printf_i+0xb8>
 800b488:	f9b3 5000 	ldrsh.w	r5, [r3]
 800b48c:	2d00      	cmp	r5, #0
 800b48e:	da03      	bge.n	800b498 <_printf_i+0xd0>
 800b490:	232d      	movs	r3, #45	@ 0x2d
 800b492:	426d      	negs	r5, r5
 800b494:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b498:	4858      	ldr	r0, [pc, #352]	@ (800b5fc <_printf_i+0x234>)
 800b49a:	230a      	movs	r3, #10
 800b49c:	e011      	b.n	800b4c2 <_printf_i+0xfa>
 800b49e:	6821      	ldr	r1, [r4, #0]
 800b4a0:	6833      	ldr	r3, [r6, #0]
 800b4a2:	0608      	lsls	r0, r1, #24
 800b4a4:	f853 5b04 	ldr.w	r5, [r3], #4
 800b4a8:	d402      	bmi.n	800b4b0 <_printf_i+0xe8>
 800b4aa:	0649      	lsls	r1, r1, #25
 800b4ac:	bf48      	it	mi
 800b4ae:	b2ad      	uxthmi	r5, r5
 800b4b0:	2f6f      	cmp	r7, #111	@ 0x6f
 800b4b2:	4852      	ldr	r0, [pc, #328]	@ (800b5fc <_printf_i+0x234>)
 800b4b4:	6033      	str	r3, [r6, #0]
 800b4b6:	bf14      	ite	ne
 800b4b8:	230a      	movne	r3, #10
 800b4ba:	2308      	moveq	r3, #8
 800b4bc:	2100      	movs	r1, #0
 800b4be:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800b4c2:	6866      	ldr	r6, [r4, #4]
 800b4c4:	60a6      	str	r6, [r4, #8]
 800b4c6:	2e00      	cmp	r6, #0
 800b4c8:	db05      	blt.n	800b4d6 <_printf_i+0x10e>
 800b4ca:	6821      	ldr	r1, [r4, #0]
 800b4cc:	432e      	orrs	r6, r5
 800b4ce:	f021 0104 	bic.w	r1, r1, #4
 800b4d2:	6021      	str	r1, [r4, #0]
 800b4d4:	d04b      	beq.n	800b56e <_printf_i+0x1a6>
 800b4d6:	4616      	mov	r6, r2
 800b4d8:	fbb5 f1f3 	udiv	r1, r5, r3
 800b4dc:	fb03 5711 	mls	r7, r3, r1, r5
 800b4e0:	5dc7      	ldrb	r7, [r0, r7]
 800b4e2:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800b4e6:	462f      	mov	r7, r5
 800b4e8:	42bb      	cmp	r3, r7
 800b4ea:	460d      	mov	r5, r1
 800b4ec:	d9f4      	bls.n	800b4d8 <_printf_i+0x110>
 800b4ee:	2b08      	cmp	r3, #8
 800b4f0:	d10b      	bne.n	800b50a <_printf_i+0x142>
 800b4f2:	6823      	ldr	r3, [r4, #0]
 800b4f4:	07df      	lsls	r7, r3, #31
 800b4f6:	d508      	bpl.n	800b50a <_printf_i+0x142>
 800b4f8:	6923      	ldr	r3, [r4, #16]
 800b4fa:	6861      	ldr	r1, [r4, #4]
 800b4fc:	4299      	cmp	r1, r3
 800b4fe:	bfde      	ittt	le
 800b500:	2330      	movle	r3, #48	@ 0x30
 800b502:	f806 3c01 	strble.w	r3, [r6, #-1]
 800b506:	f106 36ff 	addle.w	r6, r6, #4294967295
 800b50a:	1b92      	subs	r2, r2, r6
 800b50c:	6122      	str	r2, [r4, #16]
 800b50e:	f8cd a000 	str.w	sl, [sp]
 800b512:	464b      	mov	r3, r9
 800b514:	aa03      	add	r2, sp, #12
 800b516:	4621      	mov	r1, r4
 800b518:	4640      	mov	r0, r8
 800b51a:	f7ff fee7 	bl	800b2ec <_printf_common>
 800b51e:	3001      	adds	r0, #1
 800b520:	d14a      	bne.n	800b5b8 <_printf_i+0x1f0>
 800b522:	f04f 30ff 	mov.w	r0, #4294967295
 800b526:	b004      	add	sp, #16
 800b528:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b52c:	6823      	ldr	r3, [r4, #0]
 800b52e:	f043 0320 	orr.w	r3, r3, #32
 800b532:	6023      	str	r3, [r4, #0]
 800b534:	4832      	ldr	r0, [pc, #200]	@ (800b600 <_printf_i+0x238>)
 800b536:	2778      	movs	r7, #120	@ 0x78
 800b538:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800b53c:	6823      	ldr	r3, [r4, #0]
 800b53e:	6831      	ldr	r1, [r6, #0]
 800b540:	061f      	lsls	r7, r3, #24
 800b542:	f851 5b04 	ldr.w	r5, [r1], #4
 800b546:	d402      	bmi.n	800b54e <_printf_i+0x186>
 800b548:	065f      	lsls	r7, r3, #25
 800b54a:	bf48      	it	mi
 800b54c:	b2ad      	uxthmi	r5, r5
 800b54e:	6031      	str	r1, [r6, #0]
 800b550:	07d9      	lsls	r1, r3, #31
 800b552:	bf44      	itt	mi
 800b554:	f043 0320 	orrmi.w	r3, r3, #32
 800b558:	6023      	strmi	r3, [r4, #0]
 800b55a:	b11d      	cbz	r5, 800b564 <_printf_i+0x19c>
 800b55c:	2310      	movs	r3, #16
 800b55e:	e7ad      	b.n	800b4bc <_printf_i+0xf4>
 800b560:	4826      	ldr	r0, [pc, #152]	@ (800b5fc <_printf_i+0x234>)
 800b562:	e7e9      	b.n	800b538 <_printf_i+0x170>
 800b564:	6823      	ldr	r3, [r4, #0]
 800b566:	f023 0320 	bic.w	r3, r3, #32
 800b56a:	6023      	str	r3, [r4, #0]
 800b56c:	e7f6      	b.n	800b55c <_printf_i+0x194>
 800b56e:	4616      	mov	r6, r2
 800b570:	e7bd      	b.n	800b4ee <_printf_i+0x126>
 800b572:	6833      	ldr	r3, [r6, #0]
 800b574:	6825      	ldr	r5, [r4, #0]
 800b576:	6961      	ldr	r1, [r4, #20]
 800b578:	1d18      	adds	r0, r3, #4
 800b57a:	6030      	str	r0, [r6, #0]
 800b57c:	062e      	lsls	r6, r5, #24
 800b57e:	681b      	ldr	r3, [r3, #0]
 800b580:	d501      	bpl.n	800b586 <_printf_i+0x1be>
 800b582:	6019      	str	r1, [r3, #0]
 800b584:	e002      	b.n	800b58c <_printf_i+0x1c4>
 800b586:	0668      	lsls	r0, r5, #25
 800b588:	d5fb      	bpl.n	800b582 <_printf_i+0x1ba>
 800b58a:	8019      	strh	r1, [r3, #0]
 800b58c:	2300      	movs	r3, #0
 800b58e:	6123      	str	r3, [r4, #16]
 800b590:	4616      	mov	r6, r2
 800b592:	e7bc      	b.n	800b50e <_printf_i+0x146>
 800b594:	6833      	ldr	r3, [r6, #0]
 800b596:	1d1a      	adds	r2, r3, #4
 800b598:	6032      	str	r2, [r6, #0]
 800b59a:	681e      	ldr	r6, [r3, #0]
 800b59c:	6862      	ldr	r2, [r4, #4]
 800b59e:	2100      	movs	r1, #0
 800b5a0:	4630      	mov	r0, r6
 800b5a2:	f7f4 fe1d 	bl	80001e0 <memchr>
 800b5a6:	b108      	cbz	r0, 800b5ac <_printf_i+0x1e4>
 800b5a8:	1b80      	subs	r0, r0, r6
 800b5aa:	6060      	str	r0, [r4, #4]
 800b5ac:	6863      	ldr	r3, [r4, #4]
 800b5ae:	6123      	str	r3, [r4, #16]
 800b5b0:	2300      	movs	r3, #0
 800b5b2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b5b6:	e7aa      	b.n	800b50e <_printf_i+0x146>
 800b5b8:	6923      	ldr	r3, [r4, #16]
 800b5ba:	4632      	mov	r2, r6
 800b5bc:	4649      	mov	r1, r9
 800b5be:	4640      	mov	r0, r8
 800b5c0:	47d0      	blx	sl
 800b5c2:	3001      	adds	r0, #1
 800b5c4:	d0ad      	beq.n	800b522 <_printf_i+0x15a>
 800b5c6:	6823      	ldr	r3, [r4, #0]
 800b5c8:	079b      	lsls	r3, r3, #30
 800b5ca:	d413      	bmi.n	800b5f4 <_printf_i+0x22c>
 800b5cc:	68e0      	ldr	r0, [r4, #12]
 800b5ce:	9b03      	ldr	r3, [sp, #12]
 800b5d0:	4298      	cmp	r0, r3
 800b5d2:	bfb8      	it	lt
 800b5d4:	4618      	movlt	r0, r3
 800b5d6:	e7a6      	b.n	800b526 <_printf_i+0x15e>
 800b5d8:	2301      	movs	r3, #1
 800b5da:	4632      	mov	r2, r6
 800b5dc:	4649      	mov	r1, r9
 800b5de:	4640      	mov	r0, r8
 800b5e0:	47d0      	blx	sl
 800b5e2:	3001      	adds	r0, #1
 800b5e4:	d09d      	beq.n	800b522 <_printf_i+0x15a>
 800b5e6:	3501      	adds	r5, #1
 800b5e8:	68e3      	ldr	r3, [r4, #12]
 800b5ea:	9903      	ldr	r1, [sp, #12]
 800b5ec:	1a5b      	subs	r3, r3, r1
 800b5ee:	42ab      	cmp	r3, r5
 800b5f0:	dcf2      	bgt.n	800b5d8 <_printf_i+0x210>
 800b5f2:	e7eb      	b.n	800b5cc <_printf_i+0x204>
 800b5f4:	2500      	movs	r5, #0
 800b5f6:	f104 0619 	add.w	r6, r4, #25
 800b5fa:	e7f5      	b.n	800b5e8 <_printf_i+0x220>
 800b5fc:	08010cda 	.word	0x08010cda
 800b600:	08010ceb 	.word	0x08010ceb

0800b604 <_scanf_float>:
 800b604:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b608:	b087      	sub	sp, #28
 800b60a:	4691      	mov	r9, r2
 800b60c:	9303      	str	r3, [sp, #12]
 800b60e:	688b      	ldr	r3, [r1, #8]
 800b610:	1e5a      	subs	r2, r3, #1
 800b612:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800b616:	bf81      	itttt	hi
 800b618:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800b61c:	eb03 0b05 	addhi.w	fp, r3, r5
 800b620:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800b624:	608b      	strhi	r3, [r1, #8]
 800b626:	680b      	ldr	r3, [r1, #0]
 800b628:	460a      	mov	r2, r1
 800b62a:	f04f 0500 	mov.w	r5, #0
 800b62e:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800b632:	f842 3b1c 	str.w	r3, [r2], #28
 800b636:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800b63a:	4680      	mov	r8, r0
 800b63c:	460c      	mov	r4, r1
 800b63e:	bf98      	it	ls
 800b640:	f04f 0b00 	movls.w	fp, #0
 800b644:	9201      	str	r2, [sp, #4]
 800b646:	4616      	mov	r6, r2
 800b648:	46aa      	mov	sl, r5
 800b64a:	462f      	mov	r7, r5
 800b64c:	9502      	str	r5, [sp, #8]
 800b64e:	68a2      	ldr	r2, [r4, #8]
 800b650:	b15a      	cbz	r2, 800b66a <_scanf_float+0x66>
 800b652:	f8d9 3000 	ldr.w	r3, [r9]
 800b656:	781b      	ldrb	r3, [r3, #0]
 800b658:	2b4e      	cmp	r3, #78	@ 0x4e
 800b65a:	d863      	bhi.n	800b724 <_scanf_float+0x120>
 800b65c:	2b40      	cmp	r3, #64	@ 0x40
 800b65e:	d83b      	bhi.n	800b6d8 <_scanf_float+0xd4>
 800b660:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 800b664:	b2c8      	uxtb	r0, r1
 800b666:	280e      	cmp	r0, #14
 800b668:	d939      	bls.n	800b6de <_scanf_float+0xda>
 800b66a:	b11f      	cbz	r7, 800b674 <_scanf_float+0x70>
 800b66c:	6823      	ldr	r3, [r4, #0]
 800b66e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b672:	6023      	str	r3, [r4, #0]
 800b674:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b678:	f1ba 0f01 	cmp.w	sl, #1
 800b67c:	f200 8114 	bhi.w	800b8a8 <_scanf_float+0x2a4>
 800b680:	9b01      	ldr	r3, [sp, #4]
 800b682:	429e      	cmp	r6, r3
 800b684:	f200 8105 	bhi.w	800b892 <_scanf_float+0x28e>
 800b688:	2001      	movs	r0, #1
 800b68a:	b007      	add	sp, #28
 800b68c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b690:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800b694:	2a0d      	cmp	r2, #13
 800b696:	d8e8      	bhi.n	800b66a <_scanf_float+0x66>
 800b698:	a101      	add	r1, pc, #4	@ (adr r1, 800b6a0 <_scanf_float+0x9c>)
 800b69a:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800b69e:	bf00      	nop
 800b6a0:	0800b7e9 	.word	0x0800b7e9
 800b6a4:	0800b66b 	.word	0x0800b66b
 800b6a8:	0800b66b 	.word	0x0800b66b
 800b6ac:	0800b66b 	.word	0x0800b66b
 800b6b0:	0800b845 	.word	0x0800b845
 800b6b4:	0800b81f 	.word	0x0800b81f
 800b6b8:	0800b66b 	.word	0x0800b66b
 800b6bc:	0800b66b 	.word	0x0800b66b
 800b6c0:	0800b7f7 	.word	0x0800b7f7
 800b6c4:	0800b66b 	.word	0x0800b66b
 800b6c8:	0800b66b 	.word	0x0800b66b
 800b6cc:	0800b66b 	.word	0x0800b66b
 800b6d0:	0800b66b 	.word	0x0800b66b
 800b6d4:	0800b7b3 	.word	0x0800b7b3
 800b6d8:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 800b6dc:	e7da      	b.n	800b694 <_scanf_float+0x90>
 800b6de:	290e      	cmp	r1, #14
 800b6e0:	d8c3      	bhi.n	800b66a <_scanf_float+0x66>
 800b6e2:	a001      	add	r0, pc, #4	@ (adr r0, 800b6e8 <_scanf_float+0xe4>)
 800b6e4:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800b6e8:	0800b7a3 	.word	0x0800b7a3
 800b6ec:	0800b66b 	.word	0x0800b66b
 800b6f0:	0800b7a3 	.word	0x0800b7a3
 800b6f4:	0800b833 	.word	0x0800b833
 800b6f8:	0800b66b 	.word	0x0800b66b
 800b6fc:	0800b745 	.word	0x0800b745
 800b700:	0800b789 	.word	0x0800b789
 800b704:	0800b789 	.word	0x0800b789
 800b708:	0800b789 	.word	0x0800b789
 800b70c:	0800b789 	.word	0x0800b789
 800b710:	0800b789 	.word	0x0800b789
 800b714:	0800b789 	.word	0x0800b789
 800b718:	0800b789 	.word	0x0800b789
 800b71c:	0800b789 	.word	0x0800b789
 800b720:	0800b789 	.word	0x0800b789
 800b724:	2b6e      	cmp	r3, #110	@ 0x6e
 800b726:	d809      	bhi.n	800b73c <_scanf_float+0x138>
 800b728:	2b60      	cmp	r3, #96	@ 0x60
 800b72a:	d8b1      	bhi.n	800b690 <_scanf_float+0x8c>
 800b72c:	2b54      	cmp	r3, #84	@ 0x54
 800b72e:	d07b      	beq.n	800b828 <_scanf_float+0x224>
 800b730:	2b59      	cmp	r3, #89	@ 0x59
 800b732:	d19a      	bne.n	800b66a <_scanf_float+0x66>
 800b734:	2d07      	cmp	r5, #7
 800b736:	d198      	bne.n	800b66a <_scanf_float+0x66>
 800b738:	2508      	movs	r5, #8
 800b73a:	e02f      	b.n	800b79c <_scanf_float+0x198>
 800b73c:	2b74      	cmp	r3, #116	@ 0x74
 800b73e:	d073      	beq.n	800b828 <_scanf_float+0x224>
 800b740:	2b79      	cmp	r3, #121	@ 0x79
 800b742:	e7f6      	b.n	800b732 <_scanf_float+0x12e>
 800b744:	6821      	ldr	r1, [r4, #0]
 800b746:	05c8      	lsls	r0, r1, #23
 800b748:	d51e      	bpl.n	800b788 <_scanf_float+0x184>
 800b74a:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800b74e:	6021      	str	r1, [r4, #0]
 800b750:	3701      	adds	r7, #1
 800b752:	f1bb 0f00 	cmp.w	fp, #0
 800b756:	d003      	beq.n	800b760 <_scanf_float+0x15c>
 800b758:	3201      	adds	r2, #1
 800b75a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800b75e:	60a2      	str	r2, [r4, #8]
 800b760:	68a3      	ldr	r3, [r4, #8]
 800b762:	3b01      	subs	r3, #1
 800b764:	60a3      	str	r3, [r4, #8]
 800b766:	6923      	ldr	r3, [r4, #16]
 800b768:	3301      	adds	r3, #1
 800b76a:	6123      	str	r3, [r4, #16]
 800b76c:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800b770:	3b01      	subs	r3, #1
 800b772:	2b00      	cmp	r3, #0
 800b774:	f8c9 3004 	str.w	r3, [r9, #4]
 800b778:	f340 8082 	ble.w	800b880 <_scanf_float+0x27c>
 800b77c:	f8d9 3000 	ldr.w	r3, [r9]
 800b780:	3301      	adds	r3, #1
 800b782:	f8c9 3000 	str.w	r3, [r9]
 800b786:	e762      	b.n	800b64e <_scanf_float+0x4a>
 800b788:	eb1a 0105 	adds.w	r1, sl, r5
 800b78c:	f47f af6d 	bne.w	800b66a <_scanf_float+0x66>
 800b790:	6822      	ldr	r2, [r4, #0]
 800b792:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 800b796:	6022      	str	r2, [r4, #0]
 800b798:	460d      	mov	r5, r1
 800b79a:	468a      	mov	sl, r1
 800b79c:	f806 3b01 	strb.w	r3, [r6], #1
 800b7a0:	e7de      	b.n	800b760 <_scanf_float+0x15c>
 800b7a2:	6822      	ldr	r2, [r4, #0]
 800b7a4:	0610      	lsls	r0, r2, #24
 800b7a6:	f57f af60 	bpl.w	800b66a <_scanf_float+0x66>
 800b7aa:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800b7ae:	6022      	str	r2, [r4, #0]
 800b7b0:	e7f4      	b.n	800b79c <_scanf_float+0x198>
 800b7b2:	f1ba 0f00 	cmp.w	sl, #0
 800b7b6:	d10c      	bne.n	800b7d2 <_scanf_float+0x1ce>
 800b7b8:	b977      	cbnz	r7, 800b7d8 <_scanf_float+0x1d4>
 800b7ba:	6822      	ldr	r2, [r4, #0]
 800b7bc:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800b7c0:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800b7c4:	d108      	bne.n	800b7d8 <_scanf_float+0x1d4>
 800b7c6:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800b7ca:	6022      	str	r2, [r4, #0]
 800b7cc:	f04f 0a01 	mov.w	sl, #1
 800b7d0:	e7e4      	b.n	800b79c <_scanf_float+0x198>
 800b7d2:	f1ba 0f02 	cmp.w	sl, #2
 800b7d6:	d050      	beq.n	800b87a <_scanf_float+0x276>
 800b7d8:	2d01      	cmp	r5, #1
 800b7da:	d002      	beq.n	800b7e2 <_scanf_float+0x1de>
 800b7dc:	2d04      	cmp	r5, #4
 800b7de:	f47f af44 	bne.w	800b66a <_scanf_float+0x66>
 800b7e2:	3501      	adds	r5, #1
 800b7e4:	b2ed      	uxtb	r5, r5
 800b7e6:	e7d9      	b.n	800b79c <_scanf_float+0x198>
 800b7e8:	f1ba 0f01 	cmp.w	sl, #1
 800b7ec:	f47f af3d 	bne.w	800b66a <_scanf_float+0x66>
 800b7f0:	f04f 0a02 	mov.w	sl, #2
 800b7f4:	e7d2      	b.n	800b79c <_scanf_float+0x198>
 800b7f6:	b975      	cbnz	r5, 800b816 <_scanf_float+0x212>
 800b7f8:	2f00      	cmp	r7, #0
 800b7fa:	f47f af37 	bne.w	800b66c <_scanf_float+0x68>
 800b7fe:	6822      	ldr	r2, [r4, #0]
 800b800:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800b804:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800b808:	f040 8103 	bne.w	800ba12 <_scanf_float+0x40e>
 800b80c:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800b810:	6022      	str	r2, [r4, #0]
 800b812:	2501      	movs	r5, #1
 800b814:	e7c2      	b.n	800b79c <_scanf_float+0x198>
 800b816:	2d03      	cmp	r5, #3
 800b818:	d0e3      	beq.n	800b7e2 <_scanf_float+0x1de>
 800b81a:	2d05      	cmp	r5, #5
 800b81c:	e7df      	b.n	800b7de <_scanf_float+0x1da>
 800b81e:	2d02      	cmp	r5, #2
 800b820:	f47f af23 	bne.w	800b66a <_scanf_float+0x66>
 800b824:	2503      	movs	r5, #3
 800b826:	e7b9      	b.n	800b79c <_scanf_float+0x198>
 800b828:	2d06      	cmp	r5, #6
 800b82a:	f47f af1e 	bne.w	800b66a <_scanf_float+0x66>
 800b82e:	2507      	movs	r5, #7
 800b830:	e7b4      	b.n	800b79c <_scanf_float+0x198>
 800b832:	6822      	ldr	r2, [r4, #0]
 800b834:	0591      	lsls	r1, r2, #22
 800b836:	f57f af18 	bpl.w	800b66a <_scanf_float+0x66>
 800b83a:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800b83e:	6022      	str	r2, [r4, #0]
 800b840:	9702      	str	r7, [sp, #8]
 800b842:	e7ab      	b.n	800b79c <_scanf_float+0x198>
 800b844:	6822      	ldr	r2, [r4, #0]
 800b846:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 800b84a:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800b84e:	d005      	beq.n	800b85c <_scanf_float+0x258>
 800b850:	0550      	lsls	r0, r2, #21
 800b852:	f57f af0a 	bpl.w	800b66a <_scanf_float+0x66>
 800b856:	2f00      	cmp	r7, #0
 800b858:	f000 80db 	beq.w	800ba12 <_scanf_float+0x40e>
 800b85c:	0591      	lsls	r1, r2, #22
 800b85e:	bf58      	it	pl
 800b860:	9902      	ldrpl	r1, [sp, #8]
 800b862:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800b866:	bf58      	it	pl
 800b868:	1a79      	subpl	r1, r7, r1
 800b86a:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800b86e:	bf58      	it	pl
 800b870:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800b874:	6022      	str	r2, [r4, #0]
 800b876:	2700      	movs	r7, #0
 800b878:	e790      	b.n	800b79c <_scanf_float+0x198>
 800b87a:	f04f 0a03 	mov.w	sl, #3
 800b87e:	e78d      	b.n	800b79c <_scanf_float+0x198>
 800b880:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800b884:	4649      	mov	r1, r9
 800b886:	4640      	mov	r0, r8
 800b888:	4798      	blx	r3
 800b88a:	2800      	cmp	r0, #0
 800b88c:	f43f aedf 	beq.w	800b64e <_scanf_float+0x4a>
 800b890:	e6eb      	b.n	800b66a <_scanf_float+0x66>
 800b892:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800b896:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800b89a:	464a      	mov	r2, r9
 800b89c:	4640      	mov	r0, r8
 800b89e:	4798      	blx	r3
 800b8a0:	6923      	ldr	r3, [r4, #16]
 800b8a2:	3b01      	subs	r3, #1
 800b8a4:	6123      	str	r3, [r4, #16]
 800b8a6:	e6eb      	b.n	800b680 <_scanf_float+0x7c>
 800b8a8:	1e6b      	subs	r3, r5, #1
 800b8aa:	2b06      	cmp	r3, #6
 800b8ac:	d824      	bhi.n	800b8f8 <_scanf_float+0x2f4>
 800b8ae:	2d02      	cmp	r5, #2
 800b8b0:	d836      	bhi.n	800b920 <_scanf_float+0x31c>
 800b8b2:	9b01      	ldr	r3, [sp, #4]
 800b8b4:	429e      	cmp	r6, r3
 800b8b6:	f67f aee7 	bls.w	800b688 <_scanf_float+0x84>
 800b8ba:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800b8be:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800b8c2:	464a      	mov	r2, r9
 800b8c4:	4640      	mov	r0, r8
 800b8c6:	4798      	blx	r3
 800b8c8:	6923      	ldr	r3, [r4, #16]
 800b8ca:	3b01      	subs	r3, #1
 800b8cc:	6123      	str	r3, [r4, #16]
 800b8ce:	e7f0      	b.n	800b8b2 <_scanf_float+0x2ae>
 800b8d0:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800b8d4:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 800b8d8:	464a      	mov	r2, r9
 800b8da:	4640      	mov	r0, r8
 800b8dc:	4798      	blx	r3
 800b8de:	6923      	ldr	r3, [r4, #16]
 800b8e0:	3b01      	subs	r3, #1
 800b8e2:	6123      	str	r3, [r4, #16]
 800b8e4:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b8e8:	fa5f fa8a 	uxtb.w	sl, sl
 800b8ec:	f1ba 0f02 	cmp.w	sl, #2
 800b8f0:	d1ee      	bne.n	800b8d0 <_scanf_float+0x2cc>
 800b8f2:	3d03      	subs	r5, #3
 800b8f4:	b2ed      	uxtb	r5, r5
 800b8f6:	1b76      	subs	r6, r6, r5
 800b8f8:	6823      	ldr	r3, [r4, #0]
 800b8fa:	05da      	lsls	r2, r3, #23
 800b8fc:	d530      	bpl.n	800b960 <_scanf_float+0x35c>
 800b8fe:	055b      	lsls	r3, r3, #21
 800b900:	d511      	bpl.n	800b926 <_scanf_float+0x322>
 800b902:	9b01      	ldr	r3, [sp, #4]
 800b904:	429e      	cmp	r6, r3
 800b906:	f67f aebf 	bls.w	800b688 <_scanf_float+0x84>
 800b90a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800b90e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800b912:	464a      	mov	r2, r9
 800b914:	4640      	mov	r0, r8
 800b916:	4798      	blx	r3
 800b918:	6923      	ldr	r3, [r4, #16]
 800b91a:	3b01      	subs	r3, #1
 800b91c:	6123      	str	r3, [r4, #16]
 800b91e:	e7f0      	b.n	800b902 <_scanf_float+0x2fe>
 800b920:	46aa      	mov	sl, r5
 800b922:	46b3      	mov	fp, r6
 800b924:	e7de      	b.n	800b8e4 <_scanf_float+0x2e0>
 800b926:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800b92a:	6923      	ldr	r3, [r4, #16]
 800b92c:	2965      	cmp	r1, #101	@ 0x65
 800b92e:	f103 33ff 	add.w	r3, r3, #4294967295
 800b932:	f106 35ff 	add.w	r5, r6, #4294967295
 800b936:	6123      	str	r3, [r4, #16]
 800b938:	d00c      	beq.n	800b954 <_scanf_float+0x350>
 800b93a:	2945      	cmp	r1, #69	@ 0x45
 800b93c:	d00a      	beq.n	800b954 <_scanf_float+0x350>
 800b93e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800b942:	464a      	mov	r2, r9
 800b944:	4640      	mov	r0, r8
 800b946:	4798      	blx	r3
 800b948:	6923      	ldr	r3, [r4, #16]
 800b94a:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800b94e:	3b01      	subs	r3, #1
 800b950:	1eb5      	subs	r5, r6, #2
 800b952:	6123      	str	r3, [r4, #16]
 800b954:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800b958:	464a      	mov	r2, r9
 800b95a:	4640      	mov	r0, r8
 800b95c:	4798      	blx	r3
 800b95e:	462e      	mov	r6, r5
 800b960:	6822      	ldr	r2, [r4, #0]
 800b962:	f012 0210 	ands.w	r2, r2, #16
 800b966:	d001      	beq.n	800b96c <_scanf_float+0x368>
 800b968:	2000      	movs	r0, #0
 800b96a:	e68e      	b.n	800b68a <_scanf_float+0x86>
 800b96c:	7032      	strb	r2, [r6, #0]
 800b96e:	6823      	ldr	r3, [r4, #0]
 800b970:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800b974:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b978:	d125      	bne.n	800b9c6 <_scanf_float+0x3c2>
 800b97a:	9b02      	ldr	r3, [sp, #8]
 800b97c:	429f      	cmp	r7, r3
 800b97e:	d00a      	beq.n	800b996 <_scanf_float+0x392>
 800b980:	1bda      	subs	r2, r3, r7
 800b982:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 800b986:	429e      	cmp	r6, r3
 800b988:	bf28      	it	cs
 800b98a:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 800b98e:	4922      	ldr	r1, [pc, #136]	@ (800ba18 <_scanf_float+0x414>)
 800b990:	4630      	mov	r0, r6
 800b992:	f000 f9ad 	bl	800bcf0 <siprintf>
 800b996:	9901      	ldr	r1, [sp, #4]
 800b998:	2200      	movs	r2, #0
 800b99a:	4640      	mov	r0, r8
 800b99c:	f002 fd58 	bl	800e450 <_strtod_r>
 800b9a0:	9b03      	ldr	r3, [sp, #12]
 800b9a2:	6821      	ldr	r1, [r4, #0]
 800b9a4:	681b      	ldr	r3, [r3, #0]
 800b9a6:	f011 0f02 	tst.w	r1, #2
 800b9aa:	ec57 6b10 	vmov	r6, r7, d0
 800b9ae:	f103 0204 	add.w	r2, r3, #4
 800b9b2:	d015      	beq.n	800b9e0 <_scanf_float+0x3dc>
 800b9b4:	9903      	ldr	r1, [sp, #12]
 800b9b6:	600a      	str	r2, [r1, #0]
 800b9b8:	681b      	ldr	r3, [r3, #0]
 800b9ba:	e9c3 6700 	strd	r6, r7, [r3]
 800b9be:	68e3      	ldr	r3, [r4, #12]
 800b9c0:	3301      	adds	r3, #1
 800b9c2:	60e3      	str	r3, [r4, #12]
 800b9c4:	e7d0      	b.n	800b968 <_scanf_float+0x364>
 800b9c6:	9b04      	ldr	r3, [sp, #16]
 800b9c8:	2b00      	cmp	r3, #0
 800b9ca:	d0e4      	beq.n	800b996 <_scanf_float+0x392>
 800b9cc:	9905      	ldr	r1, [sp, #20]
 800b9ce:	230a      	movs	r3, #10
 800b9d0:	3101      	adds	r1, #1
 800b9d2:	4640      	mov	r0, r8
 800b9d4:	f002 fdbc 	bl	800e550 <_strtol_r>
 800b9d8:	9b04      	ldr	r3, [sp, #16]
 800b9da:	9e05      	ldr	r6, [sp, #20]
 800b9dc:	1ac2      	subs	r2, r0, r3
 800b9de:	e7d0      	b.n	800b982 <_scanf_float+0x37e>
 800b9e0:	f011 0f04 	tst.w	r1, #4
 800b9e4:	9903      	ldr	r1, [sp, #12]
 800b9e6:	600a      	str	r2, [r1, #0]
 800b9e8:	d1e6      	bne.n	800b9b8 <_scanf_float+0x3b4>
 800b9ea:	681d      	ldr	r5, [r3, #0]
 800b9ec:	4632      	mov	r2, r6
 800b9ee:	463b      	mov	r3, r7
 800b9f0:	4630      	mov	r0, r6
 800b9f2:	4639      	mov	r1, r7
 800b9f4:	f7f5 f8a2 	bl	8000b3c <__aeabi_dcmpun>
 800b9f8:	b128      	cbz	r0, 800ba06 <_scanf_float+0x402>
 800b9fa:	4808      	ldr	r0, [pc, #32]	@ (800ba1c <_scanf_float+0x418>)
 800b9fc:	f000 fb00 	bl	800c000 <nanf>
 800ba00:	ed85 0a00 	vstr	s0, [r5]
 800ba04:	e7db      	b.n	800b9be <_scanf_float+0x3ba>
 800ba06:	4630      	mov	r0, r6
 800ba08:	4639      	mov	r1, r7
 800ba0a:	f7f5 f8f5 	bl	8000bf8 <__aeabi_d2f>
 800ba0e:	6028      	str	r0, [r5, #0]
 800ba10:	e7d5      	b.n	800b9be <_scanf_float+0x3ba>
 800ba12:	2700      	movs	r7, #0
 800ba14:	e62e      	b.n	800b674 <_scanf_float+0x70>
 800ba16:	bf00      	nop
 800ba18:	08010cfc 	.word	0x08010cfc
 800ba1c:	08010d3c 	.word	0x08010d3c

0800ba20 <std>:
 800ba20:	2300      	movs	r3, #0
 800ba22:	b510      	push	{r4, lr}
 800ba24:	4604      	mov	r4, r0
 800ba26:	e9c0 3300 	strd	r3, r3, [r0]
 800ba2a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ba2e:	6083      	str	r3, [r0, #8]
 800ba30:	8181      	strh	r1, [r0, #12]
 800ba32:	6643      	str	r3, [r0, #100]	@ 0x64
 800ba34:	81c2      	strh	r2, [r0, #14]
 800ba36:	6183      	str	r3, [r0, #24]
 800ba38:	4619      	mov	r1, r3
 800ba3a:	2208      	movs	r2, #8
 800ba3c:	305c      	adds	r0, #92	@ 0x5c
 800ba3e:	f000 fa51 	bl	800bee4 <memset>
 800ba42:	4b0d      	ldr	r3, [pc, #52]	@ (800ba78 <std+0x58>)
 800ba44:	6263      	str	r3, [r4, #36]	@ 0x24
 800ba46:	4b0d      	ldr	r3, [pc, #52]	@ (800ba7c <std+0x5c>)
 800ba48:	62a3      	str	r3, [r4, #40]	@ 0x28
 800ba4a:	4b0d      	ldr	r3, [pc, #52]	@ (800ba80 <std+0x60>)
 800ba4c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800ba4e:	4b0d      	ldr	r3, [pc, #52]	@ (800ba84 <std+0x64>)
 800ba50:	6323      	str	r3, [r4, #48]	@ 0x30
 800ba52:	4b0d      	ldr	r3, [pc, #52]	@ (800ba88 <std+0x68>)
 800ba54:	6224      	str	r4, [r4, #32]
 800ba56:	429c      	cmp	r4, r3
 800ba58:	d006      	beq.n	800ba68 <std+0x48>
 800ba5a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800ba5e:	4294      	cmp	r4, r2
 800ba60:	d002      	beq.n	800ba68 <std+0x48>
 800ba62:	33d0      	adds	r3, #208	@ 0xd0
 800ba64:	429c      	cmp	r4, r3
 800ba66:	d105      	bne.n	800ba74 <std+0x54>
 800ba68:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800ba6c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ba70:	f000 bab4 	b.w	800bfdc <__retarget_lock_init_recursive>
 800ba74:	bd10      	pop	{r4, pc}
 800ba76:	bf00      	nop
 800ba78:	0800bd35 	.word	0x0800bd35
 800ba7c:	0800bd57 	.word	0x0800bd57
 800ba80:	0800bd8f 	.word	0x0800bd8f
 800ba84:	0800bdb3 	.word	0x0800bdb3
 800ba88:	2000f000 	.word	0x2000f000

0800ba8c <stdio_exit_handler>:
 800ba8c:	4a02      	ldr	r2, [pc, #8]	@ (800ba98 <stdio_exit_handler+0xc>)
 800ba8e:	4903      	ldr	r1, [pc, #12]	@ (800ba9c <stdio_exit_handler+0x10>)
 800ba90:	4803      	ldr	r0, [pc, #12]	@ (800baa0 <stdio_exit_handler+0x14>)
 800ba92:	f000 b869 	b.w	800bb68 <_fwalk_sglue>
 800ba96:	bf00      	nop
 800ba98:	2000d12c 	.word	0x2000d12c
 800ba9c:	0800eb91 	.word	0x0800eb91
 800baa0:	2000d13c 	.word	0x2000d13c

0800baa4 <cleanup_stdio>:
 800baa4:	6841      	ldr	r1, [r0, #4]
 800baa6:	4b0c      	ldr	r3, [pc, #48]	@ (800bad8 <cleanup_stdio+0x34>)
 800baa8:	4299      	cmp	r1, r3
 800baaa:	b510      	push	{r4, lr}
 800baac:	4604      	mov	r4, r0
 800baae:	d001      	beq.n	800bab4 <cleanup_stdio+0x10>
 800bab0:	f003 f86e 	bl	800eb90 <_fflush_r>
 800bab4:	68a1      	ldr	r1, [r4, #8]
 800bab6:	4b09      	ldr	r3, [pc, #36]	@ (800badc <cleanup_stdio+0x38>)
 800bab8:	4299      	cmp	r1, r3
 800baba:	d002      	beq.n	800bac2 <cleanup_stdio+0x1e>
 800babc:	4620      	mov	r0, r4
 800babe:	f003 f867 	bl	800eb90 <_fflush_r>
 800bac2:	68e1      	ldr	r1, [r4, #12]
 800bac4:	4b06      	ldr	r3, [pc, #24]	@ (800bae0 <cleanup_stdio+0x3c>)
 800bac6:	4299      	cmp	r1, r3
 800bac8:	d004      	beq.n	800bad4 <cleanup_stdio+0x30>
 800baca:	4620      	mov	r0, r4
 800bacc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bad0:	f003 b85e 	b.w	800eb90 <_fflush_r>
 800bad4:	bd10      	pop	{r4, pc}
 800bad6:	bf00      	nop
 800bad8:	2000f000 	.word	0x2000f000
 800badc:	2000f068 	.word	0x2000f068
 800bae0:	2000f0d0 	.word	0x2000f0d0

0800bae4 <global_stdio_init.part.0>:
 800bae4:	b510      	push	{r4, lr}
 800bae6:	4b0b      	ldr	r3, [pc, #44]	@ (800bb14 <global_stdio_init.part.0+0x30>)
 800bae8:	4c0b      	ldr	r4, [pc, #44]	@ (800bb18 <global_stdio_init.part.0+0x34>)
 800baea:	4a0c      	ldr	r2, [pc, #48]	@ (800bb1c <global_stdio_init.part.0+0x38>)
 800baec:	601a      	str	r2, [r3, #0]
 800baee:	4620      	mov	r0, r4
 800baf0:	2200      	movs	r2, #0
 800baf2:	2104      	movs	r1, #4
 800baf4:	f7ff ff94 	bl	800ba20 <std>
 800baf8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800bafc:	2201      	movs	r2, #1
 800bafe:	2109      	movs	r1, #9
 800bb00:	f7ff ff8e 	bl	800ba20 <std>
 800bb04:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800bb08:	2202      	movs	r2, #2
 800bb0a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bb0e:	2112      	movs	r1, #18
 800bb10:	f7ff bf86 	b.w	800ba20 <std>
 800bb14:	2000f138 	.word	0x2000f138
 800bb18:	2000f000 	.word	0x2000f000
 800bb1c:	0800ba8d 	.word	0x0800ba8d

0800bb20 <__sfp_lock_acquire>:
 800bb20:	4801      	ldr	r0, [pc, #4]	@ (800bb28 <__sfp_lock_acquire+0x8>)
 800bb22:	f000 ba5c 	b.w	800bfde <__retarget_lock_acquire_recursive>
 800bb26:	bf00      	nop
 800bb28:	2000f141 	.word	0x2000f141

0800bb2c <__sfp_lock_release>:
 800bb2c:	4801      	ldr	r0, [pc, #4]	@ (800bb34 <__sfp_lock_release+0x8>)
 800bb2e:	f000 ba57 	b.w	800bfe0 <__retarget_lock_release_recursive>
 800bb32:	bf00      	nop
 800bb34:	2000f141 	.word	0x2000f141

0800bb38 <__sinit>:
 800bb38:	b510      	push	{r4, lr}
 800bb3a:	4604      	mov	r4, r0
 800bb3c:	f7ff fff0 	bl	800bb20 <__sfp_lock_acquire>
 800bb40:	6a23      	ldr	r3, [r4, #32]
 800bb42:	b11b      	cbz	r3, 800bb4c <__sinit+0x14>
 800bb44:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bb48:	f7ff bff0 	b.w	800bb2c <__sfp_lock_release>
 800bb4c:	4b04      	ldr	r3, [pc, #16]	@ (800bb60 <__sinit+0x28>)
 800bb4e:	6223      	str	r3, [r4, #32]
 800bb50:	4b04      	ldr	r3, [pc, #16]	@ (800bb64 <__sinit+0x2c>)
 800bb52:	681b      	ldr	r3, [r3, #0]
 800bb54:	2b00      	cmp	r3, #0
 800bb56:	d1f5      	bne.n	800bb44 <__sinit+0xc>
 800bb58:	f7ff ffc4 	bl	800bae4 <global_stdio_init.part.0>
 800bb5c:	e7f2      	b.n	800bb44 <__sinit+0xc>
 800bb5e:	bf00      	nop
 800bb60:	0800baa5 	.word	0x0800baa5
 800bb64:	2000f138 	.word	0x2000f138

0800bb68 <_fwalk_sglue>:
 800bb68:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bb6c:	4607      	mov	r7, r0
 800bb6e:	4688      	mov	r8, r1
 800bb70:	4614      	mov	r4, r2
 800bb72:	2600      	movs	r6, #0
 800bb74:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800bb78:	f1b9 0901 	subs.w	r9, r9, #1
 800bb7c:	d505      	bpl.n	800bb8a <_fwalk_sglue+0x22>
 800bb7e:	6824      	ldr	r4, [r4, #0]
 800bb80:	2c00      	cmp	r4, #0
 800bb82:	d1f7      	bne.n	800bb74 <_fwalk_sglue+0xc>
 800bb84:	4630      	mov	r0, r6
 800bb86:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bb8a:	89ab      	ldrh	r3, [r5, #12]
 800bb8c:	2b01      	cmp	r3, #1
 800bb8e:	d907      	bls.n	800bba0 <_fwalk_sglue+0x38>
 800bb90:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800bb94:	3301      	adds	r3, #1
 800bb96:	d003      	beq.n	800bba0 <_fwalk_sglue+0x38>
 800bb98:	4629      	mov	r1, r5
 800bb9a:	4638      	mov	r0, r7
 800bb9c:	47c0      	blx	r8
 800bb9e:	4306      	orrs	r6, r0
 800bba0:	3568      	adds	r5, #104	@ 0x68
 800bba2:	e7e9      	b.n	800bb78 <_fwalk_sglue+0x10>

0800bba4 <iprintf>:
 800bba4:	b40f      	push	{r0, r1, r2, r3}
 800bba6:	b507      	push	{r0, r1, r2, lr}
 800bba8:	4906      	ldr	r1, [pc, #24]	@ (800bbc4 <iprintf+0x20>)
 800bbaa:	ab04      	add	r3, sp, #16
 800bbac:	6808      	ldr	r0, [r1, #0]
 800bbae:	f853 2b04 	ldr.w	r2, [r3], #4
 800bbb2:	6881      	ldr	r1, [r0, #8]
 800bbb4:	9301      	str	r3, [sp, #4]
 800bbb6:	f002 fe4f 	bl	800e858 <_vfiprintf_r>
 800bbba:	b003      	add	sp, #12
 800bbbc:	f85d eb04 	ldr.w	lr, [sp], #4
 800bbc0:	b004      	add	sp, #16
 800bbc2:	4770      	bx	lr
 800bbc4:	2000d138 	.word	0x2000d138

0800bbc8 <_puts_r>:
 800bbc8:	6a03      	ldr	r3, [r0, #32]
 800bbca:	b570      	push	{r4, r5, r6, lr}
 800bbcc:	6884      	ldr	r4, [r0, #8]
 800bbce:	4605      	mov	r5, r0
 800bbd0:	460e      	mov	r6, r1
 800bbd2:	b90b      	cbnz	r3, 800bbd8 <_puts_r+0x10>
 800bbd4:	f7ff ffb0 	bl	800bb38 <__sinit>
 800bbd8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800bbda:	07db      	lsls	r3, r3, #31
 800bbdc:	d405      	bmi.n	800bbea <_puts_r+0x22>
 800bbde:	89a3      	ldrh	r3, [r4, #12]
 800bbe0:	0598      	lsls	r0, r3, #22
 800bbe2:	d402      	bmi.n	800bbea <_puts_r+0x22>
 800bbe4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800bbe6:	f000 f9fa 	bl	800bfde <__retarget_lock_acquire_recursive>
 800bbea:	89a3      	ldrh	r3, [r4, #12]
 800bbec:	0719      	lsls	r1, r3, #28
 800bbee:	d502      	bpl.n	800bbf6 <_puts_r+0x2e>
 800bbf0:	6923      	ldr	r3, [r4, #16]
 800bbf2:	2b00      	cmp	r3, #0
 800bbf4:	d135      	bne.n	800bc62 <_puts_r+0x9a>
 800bbf6:	4621      	mov	r1, r4
 800bbf8:	4628      	mov	r0, r5
 800bbfa:	f000 f91d 	bl	800be38 <__swsetup_r>
 800bbfe:	b380      	cbz	r0, 800bc62 <_puts_r+0x9a>
 800bc00:	f04f 35ff 	mov.w	r5, #4294967295
 800bc04:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800bc06:	07da      	lsls	r2, r3, #31
 800bc08:	d405      	bmi.n	800bc16 <_puts_r+0x4e>
 800bc0a:	89a3      	ldrh	r3, [r4, #12]
 800bc0c:	059b      	lsls	r3, r3, #22
 800bc0e:	d402      	bmi.n	800bc16 <_puts_r+0x4e>
 800bc10:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800bc12:	f000 f9e5 	bl	800bfe0 <__retarget_lock_release_recursive>
 800bc16:	4628      	mov	r0, r5
 800bc18:	bd70      	pop	{r4, r5, r6, pc}
 800bc1a:	2b00      	cmp	r3, #0
 800bc1c:	da04      	bge.n	800bc28 <_puts_r+0x60>
 800bc1e:	69a2      	ldr	r2, [r4, #24]
 800bc20:	429a      	cmp	r2, r3
 800bc22:	dc17      	bgt.n	800bc54 <_puts_r+0x8c>
 800bc24:	290a      	cmp	r1, #10
 800bc26:	d015      	beq.n	800bc54 <_puts_r+0x8c>
 800bc28:	6823      	ldr	r3, [r4, #0]
 800bc2a:	1c5a      	adds	r2, r3, #1
 800bc2c:	6022      	str	r2, [r4, #0]
 800bc2e:	7019      	strb	r1, [r3, #0]
 800bc30:	68a3      	ldr	r3, [r4, #8]
 800bc32:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800bc36:	3b01      	subs	r3, #1
 800bc38:	60a3      	str	r3, [r4, #8]
 800bc3a:	2900      	cmp	r1, #0
 800bc3c:	d1ed      	bne.n	800bc1a <_puts_r+0x52>
 800bc3e:	2b00      	cmp	r3, #0
 800bc40:	da11      	bge.n	800bc66 <_puts_r+0x9e>
 800bc42:	4622      	mov	r2, r4
 800bc44:	210a      	movs	r1, #10
 800bc46:	4628      	mov	r0, r5
 800bc48:	f000 f8b7 	bl	800bdba <__swbuf_r>
 800bc4c:	3001      	adds	r0, #1
 800bc4e:	d0d7      	beq.n	800bc00 <_puts_r+0x38>
 800bc50:	250a      	movs	r5, #10
 800bc52:	e7d7      	b.n	800bc04 <_puts_r+0x3c>
 800bc54:	4622      	mov	r2, r4
 800bc56:	4628      	mov	r0, r5
 800bc58:	f000 f8af 	bl	800bdba <__swbuf_r>
 800bc5c:	3001      	adds	r0, #1
 800bc5e:	d1e7      	bne.n	800bc30 <_puts_r+0x68>
 800bc60:	e7ce      	b.n	800bc00 <_puts_r+0x38>
 800bc62:	3e01      	subs	r6, #1
 800bc64:	e7e4      	b.n	800bc30 <_puts_r+0x68>
 800bc66:	6823      	ldr	r3, [r4, #0]
 800bc68:	1c5a      	adds	r2, r3, #1
 800bc6a:	6022      	str	r2, [r4, #0]
 800bc6c:	220a      	movs	r2, #10
 800bc6e:	701a      	strb	r2, [r3, #0]
 800bc70:	e7ee      	b.n	800bc50 <_puts_r+0x88>
	...

0800bc74 <puts>:
 800bc74:	4b02      	ldr	r3, [pc, #8]	@ (800bc80 <puts+0xc>)
 800bc76:	4601      	mov	r1, r0
 800bc78:	6818      	ldr	r0, [r3, #0]
 800bc7a:	f7ff bfa5 	b.w	800bbc8 <_puts_r>
 800bc7e:	bf00      	nop
 800bc80:	2000d138 	.word	0x2000d138

0800bc84 <sniprintf>:
 800bc84:	b40c      	push	{r2, r3}
 800bc86:	b530      	push	{r4, r5, lr}
 800bc88:	4b18      	ldr	r3, [pc, #96]	@ (800bcec <sniprintf+0x68>)
 800bc8a:	1e0c      	subs	r4, r1, #0
 800bc8c:	681d      	ldr	r5, [r3, #0]
 800bc8e:	b09d      	sub	sp, #116	@ 0x74
 800bc90:	da08      	bge.n	800bca4 <sniprintf+0x20>
 800bc92:	238b      	movs	r3, #139	@ 0x8b
 800bc94:	602b      	str	r3, [r5, #0]
 800bc96:	f04f 30ff 	mov.w	r0, #4294967295
 800bc9a:	b01d      	add	sp, #116	@ 0x74
 800bc9c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800bca0:	b002      	add	sp, #8
 800bca2:	4770      	bx	lr
 800bca4:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800bca8:	f8ad 3014 	strh.w	r3, [sp, #20]
 800bcac:	f04f 0300 	mov.w	r3, #0
 800bcb0:	931b      	str	r3, [sp, #108]	@ 0x6c
 800bcb2:	bf14      	ite	ne
 800bcb4:	f104 33ff 	addne.w	r3, r4, #4294967295
 800bcb8:	4623      	moveq	r3, r4
 800bcba:	9304      	str	r3, [sp, #16]
 800bcbc:	9307      	str	r3, [sp, #28]
 800bcbe:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800bcc2:	9002      	str	r0, [sp, #8]
 800bcc4:	9006      	str	r0, [sp, #24]
 800bcc6:	f8ad 3016 	strh.w	r3, [sp, #22]
 800bcca:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800bccc:	ab21      	add	r3, sp, #132	@ 0x84
 800bcce:	a902      	add	r1, sp, #8
 800bcd0:	4628      	mov	r0, r5
 800bcd2:	9301      	str	r3, [sp, #4]
 800bcd4:	f002 fc9a 	bl	800e60c <_svfiprintf_r>
 800bcd8:	1c43      	adds	r3, r0, #1
 800bcda:	bfbc      	itt	lt
 800bcdc:	238b      	movlt	r3, #139	@ 0x8b
 800bcde:	602b      	strlt	r3, [r5, #0]
 800bce0:	2c00      	cmp	r4, #0
 800bce2:	d0da      	beq.n	800bc9a <sniprintf+0x16>
 800bce4:	9b02      	ldr	r3, [sp, #8]
 800bce6:	2200      	movs	r2, #0
 800bce8:	701a      	strb	r2, [r3, #0]
 800bcea:	e7d6      	b.n	800bc9a <sniprintf+0x16>
 800bcec:	2000d138 	.word	0x2000d138

0800bcf0 <siprintf>:
 800bcf0:	b40e      	push	{r1, r2, r3}
 800bcf2:	b510      	push	{r4, lr}
 800bcf4:	b09d      	sub	sp, #116	@ 0x74
 800bcf6:	ab1f      	add	r3, sp, #124	@ 0x7c
 800bcf8:	9002      	str	r0, [sp, #8]
 800bcfa:	9006      	str	r0, [sp, #24]
 800bcfc:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800bd00:	480a      	ldr	r0, [pc, #40]	@ (800bd2c <siprintf+0x3c>)
 800bd02:	9107      	str	r1, [sp, #28]
 800bd04:	9104      	str	r1, [sp, #16]
 800bd06:	490a      	ldr	r1, [pc, #40]	@ (800bd30 <siprintf+0x40>)
 800bd08:	f853 2b04 	ldr.w	r2, [r3], #4
 800bd0c:	9105      	str	r1, [sp, #20]
 800bd0e:	2400      	movs	r4, #0
 800bd10:	a902      	add	r1, sp, #8
 800bd12:	6800      	ldr	r0, [r0, #0]
 800bd14:	9301      	str	r3, [sp, #4]
 800bd16:	941b      	str	r4, [sp, #108]	@ 0x6c
 800bd18:	f002 fc78 	bl	800e60c <_svfiprintf_r>
 800bd1c:	9b02      	ldr	r3, [sp, #8]
 800bd1e:	701c      	strb	r4, [r3, #0]
 800bd20:	b01d      	add	sp, #116	@ 0x74
 800bd22:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bd26:	b003      	add	sp, #12
 800bd28:	4770      	bx	lr
 800bd2a:	bf00      	nop
 800bd2c:	2000d138 	.word	0x2000d138
 800bd30:	ffff0208 	.word	0xffff0208

0800bd34 <__sread>:
 800bd34:	b510      	push	{r4, lr}
 800bd36:	460c      	mov	r4, r1
 800bd38:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bd3c:	f000 f900 	bl	800bf40 <_read_r>
 800bd40:	2800      	cmp	r0, #0
 800bd42:	bfab      	itete	ge
 800bd44:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800bd46:	89a3      	ldrhlt	r3, [r4, #12]
 800bd48:	181b      	addge	r3, r3, r0
 800bd4a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800bd4e:	bfac      	ite	ge
 800bd50:	6563      	strge	r3, [r4, #84]	@ 0x54
 800bd52:	81a3      	strhlt	r3, [r4, #12]
 800bd54:	bd10      	pop	{r4, pc}

0800bd56 <__swrite>:
 800bd56:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bd5a:	461f      	mov	r7, r3
 800bd5c:	898b      	ldrh	r3, [r1, #12]
 800bd5e:	05db      	lsls	r3, r3, #23
 800bd60:	4605      	mov	r5, r0
 800bd62:	460c      	mov	r4, r1
 800bd64:	4616      	mov	r6, r2
 800bd66:	d505      	bpl.n	800bd74 <__swrite+0x1e>
 800bd68:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bd6c:	2302      	movs	r3, #2
 800bd6e:	2200      	movs	r2, #0
 800bd70:	f000 f8d4 	bl	800bf1c <_lseek_r>
 800bd74:	89a3      	ldrh	r3, [r4, #12]
 800bd76:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bd7a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800bd7e:	81a3      	strh	r3, [r4, #12]
 800bd80:	4632      	mov	r2, r6
 800bd82:	463b      	mov	r3, r7
 800bd84:	4628      	mov	r0, r5
 800bd86:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bd8a:	f000 b8eb 	b.w	800bf64 <_write_r>

0800bd8e <__sseek>:
 800bd8e:	b510      	push	{r4, lr}
 800bd90:	460c      	mov	r4, r1
 800bd92:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bd96:	f000 f8c1 	bl	800bf1c <_lseek_r>
 800bd9a:	1c43      	adds	r3, r0, #1
 800bd9c:	89a3      	ldrh	r3, [r4, #12]
 800bd9e:	bf15      	itete	ne
 800bda0:	6560      	strne	r0, [r4, #84]	@ 0x54
 800bda2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800bda6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800bdaa:	81a3      	strheq	r3, [r4, #12]
 800bdac:	bf18      	it	ne
 800bdae:	81a3      	strhne	r3, [r4, #12]
 800bdb0:	bd10      	pop	{r4, pc}

0800bdb2 <__sclose>:
 800bdb2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bdb6:	f000 b8a1 	b.w	800befc <_close_r>

0800bdba <__swbuf_r>:
 800bdba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bdbc:	460e      	mov	r6, r1
 800bdbe:	4614      	mov	r4, r2
 800bdc0:	4605      	mov	r5, r0
 800bdc2:	b118      	cbz	r0, 800bdcc <__swbuf_r+0x12>
 800bdc4:	6a03      	ldr	r3, [r0, #32]
 800bdc6:	b90b      	cbnz	r3, 800bdcc <__swbuf_r+0x12>
 800bdc8:	f7ff feb6 	bl	800bb38 <__sinit>
 800bdcc:	69a3      	ldr	r3, [r4, #24]
 800bdce:	60a3      	str	r3, [r4, #8]
 800bdd0:	89a3      	ldrh	r3, [r4, #12]
 800bdd2:	071a      	lsls	r2, r3, #28
 800bdd4:	d501      	bpl.n	800bdda <__swbuf_r+0x20>
 800bdd6:	6923      	ldr	r3, [r4, #16]
 800bdd8:	b943      	cbnz	r3, 800bdec <__swbuf_r+0x32>
 800bdda:	4621      	mov	r1, r4
 800bddc:	4628      	mov	r0, r5
 800bdde:	f000 f82b 	bl	800be38 <__swsetup_r>
 800bde2:	b118      	cbz	r0, 800bdec <__swbuf_r+0x32>
 800bde4:	f04f 37ff 	mov.w	r7, #4294967295
 800bde8:	4638      	mov	r0, r7
 800bdea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bdec:	6823      	ldr	r3, [r4, #0]
 800bdee:	6922      	ldr	r2, [r4, #16]
 800bdf0:	1a98      	subs	r0, r3, r2
 800bdf2:	6963      	ldr	r3, [r4, #20]
 800bdf4:	b2f6      	uxtb	r6, r6
 800bdf6:	4283      	cmp	r3, r0
 800bdf8:	4637      	mov	r7, r6
 800bdfa:	dc05      	bgt.n	800be08 <__swbuf_r+0x4e>
 800bdfc:	4621      	mov	r1, r4
 800bdfe:	4628      	mov	r0, r5
 800be00:	f002 fec6 	bl	800eb90 <_fflush_r>
 800be04:	2800      	cmp	r0, #0
 800be06:	d1ed      	bne.n	800bde4 <__swbuf_r+0x2a>
 800be08:	68a3      	ldr	r3, [r4, #8]
 800be0a:	3b01      	subs	r3, #1
 800be0c:	60a3      	str	r3, [r4, #8]
 800be0e:	6823      	ldr	r3, [r4, #0]
 800be10:	1c5a      	adds	r2, r3, #1
 800be12:	6022      	str	r2, [r4, #0]
 800be14:	701e      	strb	r6, [r3, #0]
 800be16:	6962      	ldr	r2, [r4, #20]
 800be18:	1c43      	adds	r3, r0, #1
 800be1a:	429a      	cmp	r2, r3
 800be1c:	d004      	beq.n	800be28 <__swbuf_r+0x6e>
 800be1e:	89a3      	ldrh	r3, [r4, #12]
 800be20:	07db      	lsls	r3, r3, #31
 800be22:	d5e1      	bpl.n	800bde8 <__swbuf_r+0x2e>
 800be24:	2e0a      	cmp	r6, #10
 800be26:	d1df      	bne.n	800bde8 <__swbuf_r+0x2e>
 800be28:	4621      	mov	r1, r4
 800be2a:	4628      	mov	r0, r5
 800be2c:	f002 feb0 	bl	800eb90 <_fflush_r>
 800be30:	2800      	cmp	r0, #0
 800be32:	d0d9      	beq.n	800bde8 <__swbuf_r+0x2e>
 800be34:	e7d6      	b.n	800bde4 <__swbuf_r+0x2a>
	...

0800be38 <__swsetup_r>:
 800be38:	b538      	push	{r3, r4, r5, lr}
 800be3a:	4b29      	ldr	r3, [pc, #164]	@ (800bee0 <__swsetup_r+0xa8>)
 800be3c:	4605      	mov	r5, r0
 800be3e:	6818      	ldr	r0, [r3, #0]
 800be40:	460c      	mov	r4, r1
 800be42:	b118      	cbz	r0, 800be4c <__swsetup_r+0x14>
 800be44:	6a03      	ldr	r3, [r0, #32]
 800be46:	b90b      	cbnz	r3, 800be4c <__swsetup_r+0x14>
 800be48:	f7ff fe76 	bl	800bb38 <__sinit>
 800be4c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800be50:	0719      	lsls	r1, r3, #28
 800be52:	d422      	bmi.n	800be9a <__swsetup_r+0x62>
 800be54:	06da      	lsls	r2, r3, #27
 800be56:	d407      	bmi.n	800be68 <__swsetup_r+0x30>
 800be58:	2209      	movs	r2, #9
 800be5a:	602a      	str	r2, [r5, #0]
 800be5c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800be60:	81a3      	strh	r3, [r4, #12]
 800be62:	f04f 30ff 	mov.w	r0, #4294967295
 800be66:	e033      	b.n	800bed0 <__swsetup_r+0x98>
 800be68:	0758      	lsls	r0, r3, #29
 800be6a:	d512      	bpl.n	800be92 <__swsetup_r+0x5a>
 800be6c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800be6e:	b141      	cbz	r1, 800be82 <__swsetup_r+0x4a>
 800be70:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800be74:	4299      	cmp	r1, r3
 800be76:	d002      	beq.n	800be7e <__swsetup_r+0x46>
 800be78:	4628      	mov	r0, r5
 800be7a:	f000 ff3d 	bl	800ccf8 <_free_r>
 800be7e:	2300      	movs	r3, #0
 800be80:	6363      	str	r3, [r4, #52]	@ 0x34
 800be82:	89a3      	ldrh	r3, [r4, #12]
 800be84:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800be88:	81a3      	strh	r3, [r4, #12]
 800be8a:	2300      	movs	r3, #0
 800be8c:	6063      	str	r3, [r4, #4]
 800be8e:	6923      	ldr	r3, [r4, #16]
 800be90:	6023      	str	r3, [r4, #0]
 800be92:	89a3      	ldrh	r3, [r4, #12]
 800be94:	f043 0308 	orr.w	r3, r3, #8
 800be98:	81a3      	strh	r3, [r4, #12]
 800be9a:	6923      	ldr	r3, [r4, #16]
 800be9c:	b94b      	cbnz	r3, 800beb2 <__swsetup_r+0x7a>
 800be9e:	89a3      	ldrh	r3, [r4, #12]
 800bea0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800bea4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800bea8:	d003      	beq.n	800beb2 <__swsetup_r+0x7a>
 800beaa:	4621      	mov	r1, r4
 800beac:	4628      	mov	r0, r5
 800beae:	f002 fecf 	bl	800ec50 <__smakebuf_r>
 800beb2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800beb6:	f013 0201 	ands.w	r2, r3, #1
 800beba:	d00a      	beq.n	800bed2 <__swsetup_r+0x9a>
 800bebc:	2200      	movs	r2, #0
 800bebe:	60a2      	str	r2, [r4, #8]
 800bec0:	6962      	ldr	r2, [r4, #20]
 800bec2:	4252      	negs	r2, r2
 800bec4:	61a2      	str	r2, [r4, #24]
 800bec6:	6922      	ldr	r2, [r4, #16]
 800bec8:	b942      	cbnz	r2, 800bedc <__swsetup_r+0xa4>
 800beca:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800bece:	d1c5      	bne.n	800be5c <__swsetup_r+0x24>
 800bed0:	bd38      	pop	{r3, r4, r5, pc}
 800bed2:	0799      	lsls	r1, r3, #30
 800bed4:	bf58      	it	pl
 800bed6:	6962      	ldrpl	r2, [r4, #20]
 800bed8:	60a2      	str	r2, [r4, #8]
 800beda:	e7f4      	b.n	800bec6 <__swsetup_r+0x8e>
 800bedc:	2000      	movs	r0, #0
 800bede:	e7f7      	b.n	800bed0 <__swsetup_r+0x98>
 800bee0:	2000d138 	.word	0x2000d138

0800bee4 <memset>:
 800bee4:	4402      	add	r2, r0
 800bee6:	4603      	mov	r3, r0
 800bee8:	4293      	cmp	r3, r2
 800beea:	d100      	bne.n	800beee <memset+0xa>
 800beec:	4770      	bx	lr
 800beee:	f803 1b01 	strb.w	r1, [r3], #1
 800bef2:	e7f9      	b.n	800bee8 <memset+0x4>

0800bef4 <_localeconv_r>:
 800bef4:	4800      	ldr	r0, [pc, #0]	@ (800bef8 <_localeconv_r+0x4>)
 800bef6:	4770      	bx	lr
 800bef8:	2000d278 	.word	0x2000d278

0800befc <_close_r>:
 800befc:	b538      	push	{r3, r4, r5, lr}
 800befe:	4d06      	ldr	r5, [pc, #24]	@ (800bf18 <_close_r+0x1c>)
 800bf00:	2300      	movs	r3, #0
 800bf02:	4604      	mov	r4, r0
 800bf04:	4608      	mov	r0, r1
 800bf06:	602b      	str	r3, [r5, #0]
 800bf08:	f7f5 f892 	bl	8001030 <_close>
 800bf0c:	1c43      	adds	r3, r0, #1
 800bf0e:	d102      	bne.n	800bf16 <_close_r+0x1a>
 800bf10:	682b      	ldr	r3, [r5, #0]
 800bf12:	b103      	cbz	r3, 800bf16 <_close_r+0x1a>
 800bf14:	6023      	str	r3, [r4, #0]
 800bf16:	bd38      	pop	{r3, r4, r5, pc}
 800bf18:	2000f13c 	.word	0x2000f13c

0800bf1c <_lseek_r>:
 800bf1c:	b538      	push	{r3, r4, r5, lr}
 800bf1e:	4d07      	ldr	r5, [pc, #28]	@ (800bf3c <_lseek_r+0x20>)
 800bf20:	4604      	mov	r4, r0
 800bf22:	4608      	mov	r0, r1
 800bf24:	4611      	mov	r1, r2
 800bf26:	2200      	movs	r2, #0
 800bf28:	602a      	str	r2, [r5, #0]
 800bf2a:	461a      	mov	r2, r3
 800bf2c:	f7f5 f88c 	bl	8001048 <_lseek>
 800bf30:	1c43      	adds	r3, r0, #1
 800bf32:	d102      	bne.n	800bf3a <_lseek_r+0x1e>
 800bf34:	682b      	ldr	r3, [r5, #0]
 800bf36:	b103      	cbz	r3, 800bf3a <_lseek_r+0x1e>
 800bf38:	6023      	str	r3, [r4, #0]
 800bf3a:	bd38      	pop	{r3, r4, r5, pc}
 800bf3c:	2000f13c 	.word	0x2000f13c

0800bf40 <_read_r>:
 800bf40:	b538      	push	{r3, r4, r5, lr}
 800bf42:	4d07      	ldr	r5, [pc, #28]	@ (800bf60 <_read_r+0x20>)
 800bf44:	4604      	mov	r4, r0
 800bf46:	4608      	mov	r0, r1
 800bf48:	4611      	mov	r1, r2
 800bf4a:	2200      	movs	r2, #0
 800bf4c:	602a      	str	r2, [r5, #0]
 800bf4e:	461a      	mov	r2, r3
 800bf50:	f7f5 f887 	bl	8001062 <_read>
 800bf54:	1c43      	adds	r3, r0, #1
 800bf56:	d102      	bne.n	800bf5e <_read_r+0x1e>
 800bf58:	682b      	ldr	r3, [r5, #0]
 800bf5a:	b103      	cbz	r3, 800bf5e <_read_r+0x1e>
 800bf5c:	6023      	str	r3, [r4, #0]
 800bf5e:	bd38      	pop	{r3, r4, r5, pc}
 800bf60:	2000f13c 	.word	0x2000f13c

0800bf64 <_write_r>:
 800bf64:	b538      	push	{r3, r4, r5, lr}
 800bf66:	4d07      	ldr	r5, [pc, #28]	@ (800bf84 <_write_r+0x20>)
 800bf68:	4604      	mov	r4, r0
 800bf6a:	4608      	mov	r0, r1
 800bf6c:	4611      	mov	r1, r2
 800bf6e:	2200      	movs	r2, #0
 800bf70:	602a      	str	r2, [r5, #0]
 800bf72:	461a      	mov	r2, r3
 800bf74:	f7f5 f89e 	bl	80010b4 <_write>
 800bf78:	1c43      	adds	r3, r0, #1
 800bf7a:	d102      	bne.n	800bf82 <_write_r+0x1e>
 800bf7c:	682b      	ldr	r3, [r5, #0]
 800bf7e:	b103      	cbz	r3, 800bf82 <_write_r+0x1e>
 800bf80:	6023      	str	r3, [r4, #0]
 800bf82:	bd38      	pop	{r3, r4, r5, pc}
 800bf84:	2000f13c 	.word	0x2000f13c

0800bf88 <__errno>:
 800bf88:	4b01      	ldr	r3, [pc, #4]	@ (800bf90 <__errno+0x8>)
 800bf8a:	6818      	ldr	r0, [r3, #0]
 800bf8c:	4770      	bx	lr
 800bf8e:	bf00      	nop
 800bf90:	2000d138 	.word	0x2000d138

0800bf94 <__libc_init_array>:
 800bf94:	b570      	push	{r4, r5, r6, lr}
 800bf96:	4d0d      	ldr	r5, [pc, #52]	@ (800bfcc <__libc_init_array+0x38>)
 800bf98:	4c0d      	ldr	r4, [pc, #52]	@ (800bfd0 <__libc_init_array+0x3c>)
 800bf9a:	1b64      	subs	r4, r4, r5
 800bf9c:	10a4      	asrs	r4, r4, #2
 800bf9e:	2600      	movs	r6, #0
 800bfa0:	42a6      	cmp	r6, r4
 800bfa2:	d109      	bne.n	800bfb8 <__libc_init_array+0x24>
 800bfa4:	4d0b      	ldr	r5, [pc, #44]	@ (800bfd4 <__libc_init_array+0x40>)
 800bfa6:	4c0c      	ldr	r4, [pc, #48]	@ (800bfd8 <__libc_init_array+0x44>)
 800bfa8:	f003 fae2 	bl	800f570 <_init>
 800bfac:	1b64      	subs	r4, r4, r5
 800bfae:	10a4      	asrs	r4, r4, #2
 800bfb0:	2600      	movs	r6, #0
 800bfb2:	42a6      	cmp	r6, r4
 800bfb4:	d105      	bne.n	800bfc2 <__libc_init_array+0x2e>
 800bfb6:	bd70      	pop	{r4, r5, r6, pc}
 800bfb8:	f855 3b04 	ldr.w	r3, [r5], #4
 800bfbc:	4798      	blx	r3
 800bfbe:	3601      	adds	r6, #1
 800bfc0:	e7ee      	b.n	800bfa0 <__libc_init_array+0xc>
 800bfc2:	f855 3b04 	ldr.w	r3, [r5], #4
 800bfc6:	4798      	blx	r3
 800bfc8:	3601      	adds	r6, #1
 800bfca:	e7f2      	b.n	800bfb2 <__libc_init_array+0x1e>
 800bfcc:	080110fc 	.word	0x080110fc
 800bfd0:	080110fc 	.word	0x080110fc
 800bfd4:	080110fc 	.word	0x080110fc
 800bfd8:	08011100 	.word	0x08011100

0800bfdc <__retarget_lock_init_recursive>:
 800bfdc:	4770      	bx	lr

0800bfde <__retarget_lock_acquire_recursive>:
 800bfde:	4770      	bx	lr

0800bfe0 <__retarget_lock_release_recursive>:
 800bfe0:	4770      	bx	lr

0800bfe2 <memcpy>:
 800bfe2:	440a      	add	r2, r1
 800bfe4:	4291      	cmp	r1, r2
 800bfe6:	f100 33ff 	add.w	r3, r0, #4294967295
 800bfea:	d100      	bne.n	800bfee <memcpy+0xc>
 800bfec:	4770      	bx	lr
 800bfee:	b510      	push	{r4, lr}
 800bff0:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bff4:	f803 4f01 	strb.w	r4, [r3, #1]!
 800bff8:	4291      	cmp	r1, r2
 800bffa:	d1f9      	bne.n	800bff0 <memcpy+0xe>
 800bffc:	bd10      	pop	{r4, pc}
	...

0800c000 <nanf>:
 800c000:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800c008 <nanf+0x8>
 800c004:	4770      	bx	lr
 800c006:	bf00      	nop
 800c008:	7fc00000 	.word	0x7fc00000

0800c00c <__assert_func>:
 800c00c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c00e:	4614      	mov	r4, r2
 800c010:	461a      	mov	r2, r3
 800c012:	4b09      	ldr	r3, [pc, #36]	@ (800c038 <__assert_func+0x2c>)
 800c014:	681b      	ldr	r3, [r3, #0]
 800c016:	4605      	mov	r5, r0
 800c018:	68d8      	ldr	r0, [r3, #12]
 800c01a:	b14c      	cbz	r4, 800c030 <__assert_func+0x24>
 800c01c:	4b07      	ldr	r3, [pc, #28]	@ (800c03c <__assert_func+0x30>)
 800c01e:	9100      	str	r1, [sp, #0]
 800c020:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c024:	4906      	ldr	r1, [pc, #24]	@ (800c040 <__assert_func+0x34>)
 800c026:	462b      	mov	r3, r5
 800c028:	f002 fdda 	bl	800ebe0 <fiprintf>
 800c02c:	f002 feb4 	bl	800ed98 <abort>
 800c030:	4b04      	ldr	r3, [pc, #16]	@ (800c044 <__assert_func+0x38>)
 800c032:	461c      	mov	r4, r3
 800c034:	e7f3      	b.n	800c01e <__assert_func+0x12>
 800c036:	bf00      	nop
 800c038:	2000d138 	.word	0x2000d138
 800c03c:	08010d01 	.word	0x08010d01
 800c040:	08010d0e 	.word	0x08010d0e
 800c044:	08010d3c 	.word	0x08010d3c

0800c048 <quorem>:
 800c048:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c04c:	6903      	ldr	r3, [r0, #16]
 800c04e:	690c      	ldr	r4, [r1, #16]
 800c050:	42a3      	cmp	r3, r4
 800c052:	4607      	mov	r7, r0
 800c054:	db7e      	blt.n	800c154 <quorem+0x10c>
 800c056:	3c01      	subs	r4, #1
 800c058:	f101 0814 	add.w	r8, r1, #20
 800c05c:	00a3      	lsls	r3, r4, #2
 800c05e:	f100 0514 	add.w	r5, r0, #20
 800c062:	9300      	str	r3, [sp, #0]
 800c064:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c068:	9301      	str	r3, [sp, #4]
 800c06a:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800c06e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c072:	3301      	adds	r3, #1
 800c074:	429a      	cmp	r2, r3
 800c076:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800c07a:	fbb2 f6f3 	udiv	r6, r2, r3
 800c07e:	d32e      	bcc.n	800c0de <quorem+0x96>
 800c080:	f04f 0a00 	mov.w	sl, #0
 800c084:	46c4      	mov	ip, r8
 800c086:	46ae      	mov	lr, r5
 800c088:	46d3      	mov	fp, sl
 800c08a:	f85c 3b04 	ldr.w	r3, [ip], #4
 800c08e:	b298      	uxth	r0, r3
 800c090:	fb06 a000 	mla	r0, r6, r0, sl
 800c094:	0c02      	lsrs	r2, r0, #16
 800c096:	0c1b      	lsrs	r3, r3, #16
 800c098:	fb06 2303 	mla	r3, r6, r3, r2
 800c09c:	f8de 2000 	ldr.w	r2, [lr]
 800c0a0:	b280      	uxth	r0, r0
 800c0a2:	b292      	uxth	r2, r2
 800c0a4:	1a12      	subs	r2, r2, r0
 800c0a6:	445a      	add	r2, fp
 800c0a8:	f8de 0000 	ldr.w	r0, [lr]
 800c0ac:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800c0b0:	b29b      	uxth	r3, r3
 800c0b2:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800c0b6:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800c0ba:	b292      	uxth	r2, r2
 800c0bc:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800c0c0:	45e1      	cmp	r9, ip
 800c0c2:	f84e 2b04 	str.w	r2, [lr], #4
 800c0c6:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800c0ca:	d2de      	bcs.n	800c08a <quorem+0x42>
 800c0cc:	9b00      	ldr	r3, [sp, #0]
 800c0ce:	58eb      	ldr	r3, [r5, r3]
 800c0d0:	b92b      	cbnz	r3, 800c0de <quorem+0x96>
 800c0d2:	9b01      	ldr	r3, [sp, #4]
 800c0d4:	3b04      	subs	r3, #4
 800c0d6:	429d      	cmp	r5, r3
 800c0d8:	461a      	mov	r2, r3
 800c0da:	d32f      	bcc.n	800c13c <quorem+0xf4>
 800c0dc:	613c      	str	r4, [r7, #16]
 800c0de:	4638      	mov	r0, r7
 800c0e0:	f001 f9c6 	bl	800d470 <__mcmp>
 800c0e4:	2800      	cmp	r0, #0
 800c0e6:	db25      	blt.n	800c134 <quorem+0xec>
 800c0e8:	4629      	mov	r1, r5
 800c0ea:	2000      	movs	r0, #0
 800c0ec:	f858 2b04 	ldr.w	r2, [r8], #4
 800c0f0:	f8d1 c000 	ldr.w	ip, [r1]
 800c0f4:	fa1f fe82 	uxth.w	lr, r2
 800c0f8:	fa1f f38c 	uxth.w	r3, ip
 800c0fc:	eba3 030e 	sub.w	r3, r3, lr
 800c100:	4403      	add	r3, r0
 800c102:	0c12      	lsrs	r2, r2, #16
 800c104:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800c108:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800c10c:	b29b      	uxth	r3, r3
 800c10e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c112:	45c1      	cmp	r9, r8
 800c114:	f841 3b04 	str.w	r3, [r1], #4
 800c118:	ea4f 4022 	mov.w	r0, r2, asr #16
 800c11c:	d2e6      	bcs.n	800c0ec <quorem+0xa4>
 800c11e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c122:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c126:	b922      	cbnz	r2, 800c132 <quorem+0xea>
 800c128:	3b04      	subs	r3, #4
 800c12a:	429d      	cmp	r5, r3
 800c12c:	461a      	mov	r2, r3
 800c12e:	d30b      	bcc.n	800c148 <quorem+0x100>
 800c130:	613c      	str	r4, [r7, #16]
 800c132:	3601      	adds	r6, #1
 800c134:	4630      	mov	r0, r6
 800c136:	b003      	add	sp, #12
 800c138:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c13c:	6812      	ldr	r2, [r2, #0]
 800c13e:	3b04      	subs	r3, #4
 800c140:	2a00      	cmp	r2, #0
 800c142:	d1cb      	bne.n	800c0dc <quorem+0x94>
 800c144:	3c01      	subs	r4, #1
 800c146:	e7c6      	b.n	800c0d6 <quorem+0x8e>
 800c148:	6812      	ldr	r2, [r2, #0]
 800c14a:	3b04      	subs	r3, #4
 800c14c:	2a00      	cmp	r2, #0
 800c14e:	d1ef      	bne.n	800c130 <quorem+0xe8>
 800c150:	3c01      	subs	r4, #1
 800c152:	e7ea      	b.n	800c12a <quorem+0xe2>
 800c154:	2000      	movs	r0, #0
 800c156:	e7ee      	b.n	800c136 <quorem+0xee>

0800c158 <_dtoa_r>:
 800c158:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c15c:	69c7      	ldr	r7, [r0, #28]
 800c15e:	b097      	sub	sp, #92	@ 0x5c
 800c160:	ed8d 0b04 	vstr	d0, [sp, #16]
 800c164:	ec55 4b10 	vmov	r4, r5, d0
 800c168:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 800c16a:	9107      	str	r1, [sp, #28]
 800c16c:	4681      	mov	r9, r0
 800c16e:	920c      	str	r2, [sp, #48]	@ 0x30
 800c170:	9311      	str	r3, [sp, #68]	@ 0x44
 800c172:	b97f      	cbnz	r7, 800c194 <_dtoa_r+0x3c>
 800c174:	2010      	movs	r0, #16
 800c176:	f000 fe09 	bl	800cd8c <malloc>
 800c17a:	4602      	mov	r2, r0
 800c17c:	f8c9 001c 	str.w	r0, [r9, #28]
 800c180:	b920      	cbnz	r0, 800c18c <_dtoa_r+0x34>
 800c182:	4ba9      	ldr	r3, [pc, #676]	@ (800c428 <_dtoa_r+0x2d0>)
 800c184:	21ef      	movs	r1, #239	@ 0xef
 800c186:	48a9      	ldr	r0, [pc, #676]	@ (800c42c <_dtoa_r+0x2d4>)
 800c188:	f7ff ff40 	bl	800c00c <__assert_func>
 800c18c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800c190:	6007      	str	r7, [r0, #0]
 800c192:	60c7      	str	r7, [r0, #12]
 800c194:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800c198:	6819      	ldr	r1, [r3, #0]
 800c19a:	b159      	cbz	r1, 800c1b4 <_dtoa_r+0x5c>
 800c19c:	685a      	ldr	r2, [r3, #4]
 800c19e:	604a      	str	r2, [r1, #4]
 800c1a0:	2301      	movs	r3, #1
 800c1a2:	4093      	lsls	r3, r2
 800c1a4:	608b      	str	r3, [r1, #8]
 800c1a6:	4648      	mov	r0, r9
 800c1a8:	f000 fee6 	bl	800cf78 <_Bfree>
 800c1ac:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800c1b0:	2200      	movs	r2, #0
 800c1b2:	601a      	str	r2, [r3, #0]
 800c1b4:	1e2b      	subs	r3, r5, #0
 800c1b6:	bfb9      	ittee	lt
 800c1b8:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800c1bc:	9305      	strlt	r3, [sp, #20]
 800c1be:	2300      	movge	r3, #0
 800c1c0:	6033      	strge	r3, [r6, #0]
 800c1c2:	9f05      	ldr	r7, [sp, #20]
 800c1c4:	4b9a      	ldr	r3, [pc, #616]	@ (800c430 <_dtoa_r+0x2d8>)
 800c1c6:	bfbc      	itt	lt
 800c1c8:	2201      	movlt	r2, #1
 800c1ca:	6032      	strlt	r2, [r6, #0]
 800c1cc:	43bb      	bics	r3, r7
 800c1ce:	d112      	bne.n	800c1f6 <_dtoa_r+0x9e>
 800c1d0:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800c1d2:	f242 730f 	movw	r3, #9999	@ 0x270f
 800c1d6:	6013      	str	r3, [r2, #0]
 800c1d8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800c1dc:	4323      	orrs	r3, r4
 800c1de:	f000 855a 	beq.w	800cc96 <_dtoa_r+0xb3e>
 800c1e2:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800c1e4:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 800c444 <_dtoa_r+0x2ec>
 800c1e8:	2b00      	cmp	r3, #0
 800c1ea:	f000 855c 	beq.w	800cca6 <_dtoa_r+0xb4e>
 800c1ee:	f10a 0303 	add.w	r3, sl, #3
 800c1f2:	f000 bd56 	b.w	800cca2 <_dtoa_r+0xb4a>
 800c1f6:	ed9d 7b04 	vldr	d7, [sp, #16]
 800c1fa:	2200      	movs	r2, #0
 800c1fc:	ec51 0b17 	vmov	r0, r1, d7
 800c200:	2300      	movs	r3, #0
 800c202:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 800c206:	f7f4 fc67 	bl	8000ad8 <__aeabi_dcmpeq>
 800c20a:	4680      	mov	r8, r0
 800c20c:	b158      	cbz	r0, 800c226 <_dtoa_r+0xce>
 800c20e:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800c210:	2301      	movs	r3, #1
 800c212:	6013      	str	r3, [r2, #0]
 800c214:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800c216:	b113      	cbz	r3, 800c21e <_dtoa_r+0xc6>
 800c218:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800c21a:	4b86      	ldr	r3, [pc, #536]	@ (800c434 <_dtoa_r+0x2dc>)
 800c21c:	6013      	str	r3, [r2, #0]
 800c21e:	f8df a228 	ldr.w	sl, [pc, #552]	@ 800c448 <_dtoa_r+0x2f0>
 800c222:	f000 bd40 	b.w	800cca6 <_dtoa_r+0xb4e>
 800c226:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 800c22a:	aa14      	add	r2, sp, #80	@ 0x50
 800c22c:	a915      	add	r1, sp, #84	@ 0x54
 800c22e:	4648      	mov	r0, r9
 800c230:	f001 fa3e 	bl	800d6b0 <__d2b>
 800c234:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800c238:	9002      	str	r0, [sp, #8]
 800c23a:	2e00      	cmp	r6, #0
 800c23c:	d078      	beq.n	800c330 <_dtoa_r+0x1d8>
 800c23e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c240:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 800c244:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c248:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800c24c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800c250:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800c254:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800c258:	4619      	mov	r1, r3
 800c25a:	2200      	movs	r2, #0
 800c25c:	4b76      	ldr	r3, [pc, #472]	@ (800c438 <_dtoa_r+0x2e0>)
 800c25e:	f7f4 f81b 	bl	8000298 <__aeabi_dsub>
 800c262:	a36b      	add	r3, pc, #428	@ (adr r3, 800c410 <_dtoa_r+0x2b8>)
 800c264:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c268:	f7f4 f9ce 	bl	8000608 <__aeabi_dmul>
 800c26c:	a36a      	add	r3, pc, #424	@ (adr r3, 800c418 <_dtoa_r+0x2c0>)
 800c26e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c272:	f7f4 f813 	bl	800029c <__adddf3>
 800c276:	4604      	mov	r4, r0
 800c278:	4630      	mov	r0, r6
 800c27a:	460d      	mov	r5, r1
 800c27c:	f7f4 f95a 	bl	8000534 <__aeabi_i2d>
 800c280:	a367      	add	r3, pc, #412	@ (adr r3, 800c420 <_dtoa_r+0x2c8>)
 800c282:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c286:	f7f4 f9bf 	bl	8000608 <__aeabi_dmul>
 800c28a:	4602      	mov	r2, r0
 800c28c:	460b      	mov	r3, r1
 800c28e:	4620      	mov	r0, r4
 800c290:	4629      	mov	r1, r5
 800c292:	f7f4 f803 	bl	800029c <__adddf3>
 800c296:	4604      	mov	r4, r0
 800c298:	460d      	mov	r5, r1
 800c29a:	f7f4 fc65 	bl	8000b68 <__aeabi_d2iz>
 800c29e:	2200      	movs	r2, #0
 800c2a0:	4607      	mov	r7, r0
 800c2a2:	2300      	movs	r3, #0
 800c2a4:	4620      	mov	r0, r4
 800c2a6:	4629      	mov	r1, r5
 800c2a8:	f7f4 fc20 	bl	8000aec <__aeabi_dcmplt>
 800c2ac:	b140      	cbz	r0, 800c2c0 <_dtoa_r+0x168>
 800c2ae:	4638      	mov	r0, r7
 800c2b0:	f7f4 f940 	bl	8000534 <__aeabi_i2d>
 800c2b4:	4622      	mov	r2, r4
 800c2b6:	462b      	mov	r3, r5
 800c2b8:	f7f4 fc0e 	bl	8000ad8 <__aeabi_dcmpeq>
 800c2bc:	b900      	cbnz	r0, 800c2c0 <_dtoa_r+0x168>
 800c2be:	3f01      	subs	r7, #1
 800c2c0:	2f16      	cmp	r7, #22
 800c2c2:	d852      	bhi.n	800c36a <_dtoa_r+0x212>
 800c2c4:	4b5d      	ldr	r3, [pc, #372]	@ (800c43c <_dtoa_r+0x2e4>)
 800c2c6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800c2ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c2ce:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800c2d2:	f7f4 fc0b 	bl	8000aec <__aeabi_dcmplt>
 800c2d6:	2800      	cmp	r0, #0
 800c2d8:	d049      	beq.n	800c36e <_dtoa_r+0x216>
 800c2da:	3f01      	subs	r7, #1
 800c2dc:	2300      	movs	r3, #0
 800c2de:	9310      	str	r3, [sp, #64]	@ 0x40
 800c2e0:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800c2e2:	1b9b      	subs	r3, r3, r6
 800c2e4:	1e5a      	subs	r2, r3, #1
 800c2e6:	bf45      	ittet	mi
 800c2e8:	f1c3 0301 	rsbmi	r3, r3, #1
 800c2ec:	9300      	strmi	r3, [sp, #0]
 800c2ee:	2300      	movpl	r3, #0
 800c2f0:	2300      	movmi	r3, #0
 800c2f2:	9206      	str	r2, [sp, #24]
 800c2f4:	bf54      	ite	pl
 800c2f6:	9300      	strpl	r3, [sp, #0]
 800c2f8:	9306      	strmi	r3, [sp, #24]
 800c2fa:	2f00      	cmp	r7, #0
 800c2fc:	db39      	blt.n	800c372 <_dtoa_r+0x21a>
 800c2fe:	9b06      	ldr	r3, [sp, #24]
 800c300:	970d      	str	r7, [sp, #52]	@ 0x34
 800c302:	443b      	add	r3, r7
 800c304:	9306      	str	r3, [sp, #24]
 800c306:	2300      	movs	r3, #0
 800c308:	9308      	str	r3, [sp, #32]
 800c30a:	9b07      	ldr	r3, [sp, #28]
 800c30c:	2b09      	cmp	r3, #9
 800c30e:	d863      	bhi.n	800c3d8 <_dtoa_r+0x280>
 800c310:	2b05      	cmp	r3, #5
 800c312:	bfc4      	itt	gt
 800c314:	3b04      	subgt	r3, #4
 800c316:	9307      	strgt	r3, [sp, #28]
 800c318:	9b07      	ldr	r3, [sp, #28]
 800c31a:	f1a3 0302 	sub.w	r3, r3, #2
 800c31e:	bfcc      	ite	gt
 800c320:	2400      	movgt	r4, #0
 800c322:	2401      	movle	r4, #1
 800c324:	2b03      	cmp	r3, #3
 800c326:	d863      	bhi.n	800c3f0 <_dtoa_r+0x298>
 800c328:	e8df f003 	tbb	[pc, r3]
 800c32c:	2b375452 	.word	0x2b375452
 800c330:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 800c334:	441e      	add	r6, r3
 800c336:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800c33a:	2b20      	cmp	r3, #32
 800c33c:	bfc1      	itttt	gt
 800c33e:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800c342:	409f      	lslgt	r7, r3
 800c344:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800c348:	fa24 f303 	lsrgt.w	r3, r4, r3
 800c34c:	bfd6      	itet	le
 800c34e:	f1c3 0320 	rsble	r3, r3, #32
 800c352:	ea47 0003 	orrgt.w	r0, r7, r3
 800c356:	fa04 f003 	lslle.w	r0, r4, r3
 800c35a:	f7f4 f8db 	bl	8000514 <__aeabi_ui2d>
 800c35e:	2201      	movs	r2, #1
 800c360:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800c364:	3e01      	subs	r6, #1
 800c366:	9212      	str	r2, [sp, #72]	@ 0x48
 800c368:	e776      	b.n	800c258 <_dtoa_r+0x100>
 800c36a:	2301      	movs	r3, #1
 800c36c:	e7b7      	b.n	800c2de <_dtoa_r+0x186>
 800c36e:	9010      	str	r0, [sp, #64]	@ 0x40
 800c370:	e7b6      	b.n	800c2e0 <_dtoa_r+0x188>
 800c372:	9b00      	ldr	r3, [sp, #0]
 800c374:	1bdb      	subs	r3, r3, r7
 800c376:	9300      	str	r3, [sp, #0]
 800c378:	427b      	negs	r3, r7
 800c37a:	9308      	str	r3, [sp, #32]
 800c37c:	2300      	movs	r3, #0
 800c37e:	930d      	str	r3, [sp, #52]	@ 0x34
 800c380:	e7c3      	b.n	800c30a <_dtoa_r+0x1b2>
 800c382:	2301      	movs	r3, #1
 800c384:	9309      	str	r3, [sp, #36]	@ 0x24
 800c386:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800c388:	eb07 0b03 	add.w	fp, r7, r3
 800c38c:	f10b 0301 	add.w	r3, fp, #1
 800c390:	2b01      	cmp	r3, #1
 800c392:	9303      	str	r3, [sp, #12]
 800c394:	bfb8      	it	lt
 800c396:	2301      	movlt	r3, #1
 800c398:	e006      	b.n	800c3a8 <_dtoa_r+0x250>
 800c39a:	2301      	movs	r3, #1
 800c39c:	9309      	str	r3, [sp, #36]	@ 0x24
 800c39e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800c3a0:	2b00      	cmp	r3, #0
 800c3a2:	dd28      	ble.n	800c3f6 <_dtoa_r+0x29e>
 800c3a4:	469b      	mov	fp, r3
 800c3a6:	9303      	str	r3, [sp, #12]
 800c3a8:	f8d9 001c 	ldr.w	r0, [r9, #28]
 800c3ac:	2100      	movs	r1, #0
 800c3ae:	2204      	movs	r2, #4
 800c3b0:	f102 0514 	add.w	r5, r2, #20
 800c3b4:	429d      	cmp	r5, r3
 800c3b6:	d926      	bls.n	800c406 <_dtoa_r+0x2ae>
 800c3b8:	6041      	str	r1, [r0, #4]
 800c3ba:	4648      	mov	r0, r9
 800c3bc:	f000 fd9c 	bl	800cef8 <_Balloc>
 800c3c0:	4682      	mov	sl, r0
 800c3c2:	2800      	cmp	r0, #0
 800c3c4:	d142      	bne.n	800c44c <_dtoa_r+0x2f4>
 800c3c6:	4b1e      	ldr	r3, [pc, #120]	@ (800c440 <_dtoa_r+0x2e8>)
 800c3c8:	4602      	mov	r2, r0
 800c3ca:	f240 11af 	movw	r1, #431	@ 0x1af
 800c3ce:	e6da      	b.n	800c186 <_dtoa_r+0x2e>
 800c3d0:	2300      	movs	r3, #0
 800c3d2:	e7e3      	b.n	800c39c <_dtoa_r+0x244>
 800c3d4:	2300      	movs	r3, #0
 800c3d6:	e7d5      	b.n	800c384 <_dtoa_r+0x22c>
 800c3d8:	2401      	movs	r4, #1
 800c3da:	2300      	movs	r3, #0
 800c3dc:	9307      	str	r3, [sp, #28]
 800c3de:	9409      	str	r4, [sp, #36]	@ 0x24
 800c3e0:	f04f 3bff 	mov.w	fp, #4294967295
 800c3e4:	2200      	movs	r2, #0
 800c3e6:	f8cd b00c 	str.w	fp, [sp, #12]
 800c3ea:	2312      	movs	r3, #18
 800c3ec:	920c      	str	r2, [sp, #48]	@ 0x30
 800c3ee:	e7db      	b.n	800c3a8 <_dtoa_r+0x250>
 800c3f0:	2301      	movs	r3, #1
 800c3f2:	9309      	str	r3, [sp, #36]	@ 0x24
 800c3f4:	e7f4      	b.n	800c3e0 <_dtoa_r+0x288>
 800c3f6:	f04f 0b01 	mov.w	fp, #1
 800c3fa:	f8cd b00c 	str.w	fp, [sp, #12]
 800c3fe:	465b      	mov	r3, fp
 800c400:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 800c404:	e7d0      	b.n	800c3a8 <_dtoa_r+0x250>
 800c406:	3101      	adds	r1, #1
 800c408:	0052      	lsls	r2, r2, #1
 800c40a:	e7d1      	b.n	800c3b0 <_dtoa_r+0x258>
 800c40c:	f3af 8000 	nop.w
 800c410:	636f4361 	.word	0x636f4361
 800c414:	3fd287a7 	.word	0x3fd287a7
 800c418:	8b60c8b3 	.word	0x8b60c8b3
 800c41c:	3fc68a28 	.word	0x3fc68a28
 800c420:	509f79fb 	.word	0x509f79fb
 800c424:	3fd34413 	.word	0x3fd34413
 800c428:	08010d4a 	.word	0x08010d4a
 800c42c:	08010d61 	.word	0x08010d61
 800c430:	7ff00000 	.word	0x7ff00000
 800c434:	08010cd9 	.word	0x08010cd9
 800c438:	3ff80000 	.word	0x3ff80000
 800c43c:	08010ed8 	.word	0x08010ed8
 800c440:	08010db9 	.word	0x08010db9
 800c444:	08010d46 	.word	0x08010d46
 800c448:	08010cd8 	.word	0x08010cd8
 800c44c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800c450:	6018      	str	r0, [r3, #0]
 800c452:	9b03      	ldr	r3, [sp, #12]
 800c454:	2b0e      	cmp	r3, #14
 800c456:	f200 80a1 	bhi.w	800c59c <_dtoa_r+0x444>
 800c45a:	2c00      	cmp	r4, #0
 800c45c:	f000 809e 	beq.w	800c59c <_dtoa_r+0x444>
 800c460:	2f00      	cmp	r7, #0
 800c462:	dd33      	ble.n	800c4cc <_dtoa_r+0x374>
 800c464:	4b9c      	ldr	r3, [pc, #624]	@ (800c6d8 <_dtoa_r+0x580>)
 800c466:	f007 020f 	and.w	r2, r7, #15
 800c46a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c46e:	ed93 7b00 	vldr	d7, [r3]
 800c472:	05f8      	lsls	r0, r7, #23
 800c474:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 800c478:	ea4f 1427 	mov.w	r4, r7, asr #4
 800c47c:	d516      	bpl.n	800c4ac <_dtoa_r+0x354>
 800c47e:	4b97      	ldr	r3, [pc, #604]	@ (800c6dc <_dtoa_r+0x584>)
 800c480:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800c484:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800c488:	f7f4 f9e8 	bl	800085c <__aeabi_ddiv>
 800c48c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c490:	f004 040f 	and.w	r4, r4, #15
 800c494:	2603      	movs	r6, #3
 800c496:	4d91      	ldr	r5, [pc, #580]	@ (800c6dc <_dtoa_r+0x584>)
 800c498:	b954      	cbnz	r4, 800c4b0 <_dtoa_r+0x358>
 800c49a:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800c49e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c4a2:	f7f4 f9db 	bl	800085c <__aeabi_ddiv>
 800c4a6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c4aa:	e028      	b.n	800c4fe <_dtoa_r+0x3a6>
 800c4ac:	2602      	movs	r6, #2
 800c4ae:	e7f2      	b.n	800c496 <_dtoa_r+0x33e>
 800c4b0:	07e1      	lsls	r1, r4, #31
 800c4b2:	d508      	bpl.n	800c4c6 <_dtoa_r+0x36e>
 800c4b4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800c4b8:	e9d5 2300 	ldrd	r2, r3, [r5]
 800c4bc:	f7f4 f8a4 	bl	8000608 <__aeabi_dmul>
 800c4c0:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800c4c4:	3601      	adds	r6, #1
 800c4c6:	1064      	asrs	r4, r4, #1
 800c4c8:	3508      	adds	r5, #8
 800c4ca:	e7e5      	b.n	800c498 <_dtoa_r+0x340>
 800c4cc:	f000 80af 	beq.w	800c62e <_dtoa_r+0x4d6>
 800c4d0:	427c      	negs	r4, r7
 800c4d2:	4b81      	ldr	r3, [pc, #516]	@ (800c6d8 <_dtoa_r+0x580>)
 800c4d4:	4d81      	ldr	r5, [pc, #516]	@ (800c6dc <_dtoa_r+0x584>)
 800c4d6:	f004 020f 	and.w	r2, r4, #15
 800c4da:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c4de:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c4e2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800c4e6:	f7f4 f88f 	bl	8000608 <__aeabi_dmul>
 800c4ea:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c4ee:	1124      	asrs	r4, r4, #4
 800c4f0:	2300      	movs	r3, #0
 800c4f2:	2602      	movs	r6, #2
 800c4f4:	2c00      	cmp	r4, #0
 800c4f6:	f040 808f 	bne.w	800c618 <_dtoa_r+0x4c0>
 800c4fa:	2b00      	cmp	r3, #0
 800c4fc:	d1d3      	bne.n	800c4a6 <_dtoa_r+0x34e>
 800c4fe:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800c500:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800c504:	2b00      	cmp	r3, #0
 800c506:	f000 8094 	beq.w	800c632 <_dtoa_r+0x4da>
 800c50a:	4b75      	ldr	r3, [pc, #468]	@ (800c6e0 <_dtoa_r+0x588>)
 800c50c:	2200      	movs	r2, #0
 800c50e:	4620      	mov	r0, r4
 800c510:	4629      	mov	r1, r5
 800c512:	f7f4 faeb 	bl	8000aec <__aeabi_dcmplt>
 800c516:	2800      	cmp	r0, #0
 800c518:	f000 808b 	beq.w	800c632 <_dtoa_r+0x4da>
 800c51c:	9b03      	ldr	r3, [sp, #12]
 800c51e:	2b00      	cmp	r3, #0
 800c520:	f000 8087 	beq.w	800c632 <_dtoa_r+0x4da>
 800c524:	f1bb 0f00 	cmp.w	fp, #0
 800c528:	dd34      	ble.n	800c594 <_dtoa_r+0x43c>
 800c52a:	4620      	mov	r0, r4
 800c52c:	4b6d      	ldr	r3, [pc, #436]	@ (800c6e4 <_dtoa_r+0x58c>)
 800c52e:	2200      	movs	r2, #0
 800c530:	4629      	mov	r1, r5
 800c532:	f7f4 f869 	bl	8000608 <__aeabi_dmul>
 800c536:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c53a:	f107 38ff 	add.w	r8, r7, #4294967295
 800c53e:	3601      	adds	r6, #1
 800c540:	465c      	mov	r4, fp
 800c542:	4630      	mov	r0, r6
 800c544:	f7f3 fff6 	bl	8000534 <__aeabi_i2d>
 800c548:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c54c:	f7f4 f85c 	bl	8000608 <__aeabi_dmul>
 800c550:	4b65      	ldr	r3, [pc, #404]	@ (800c6e8 <_dtoa_r+0x590>)
 800c552:	2200      	movs	r2, #0
 800c554:	f7f3 fea2 	bl	800029c <__adddf3>
 800c558:	4605      	mov	r5, r0
 800c55a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800c55e:	2c00      	cmp	r4, #0
 800c560:	d16a      	bne.n	800c638 <_dtoa_r+0x4e0>
 800c562:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c566:	4b61      	ldr	r3, [pc, #388]	@ (800c6ec <_dtoa_r+0x594>)
 800c568:	2200      	movs	r2, #0
 800c56a:	f7f3 fe95 	bl	8000298 <__aeabi_dsub>
 800c56e:	4602      	mov	r2, r0
 800c570:	460b      	mov	r3, r1
 800c572:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800c576:	462a      	mov	r2, r5
 800c578:	4633      	mov	r3, r6
 800c57a:	f7f4 fad5 	bl	8000b28 <__aeabi_dcmpgt>
 800c57e:	2800      	cmp	r0, #0
 800c580:	f040 8298 	bne.w	800cab4 <_dtoa_r+0x95c>
 800c584:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c588:	462a      	mov	r2, r5
 800c58a:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800c58e:	f7f4 faad 	bl	8000aec <__aeabi_dcmplt>
 800c592:	bb38      	cbnz	r0, 800c5e4 <_dtoa_r+0x48c>
 800c594:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 800c598:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800c59c:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800c59e:	2b00      	cmp	r3, #0
 800c5a0:	f2c0 8157 	blt.w	800c852 <_dtoa_r+0x6fa>
 800c5a4:	2f0e      	cmp	r7, #14
 800c5a6:	f300 8154 	bgt.w	800c852 <_dtoa_r+0x6fa>
 800c5aa:	4b4b      	ldr	r3, [pc, #300]	@ (800c6d8 <_dtoa_r+0x580>)
 800c5ac:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800c5b0:	ed93 7b00 	vldr	d7, [r3]
 800c5b4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800c5b6:	2b00      	cmp	r3, #0
 800c5b8:	ed8d 7b00 	vstr	d7, [sp]
 800c5bc:	f280 80e5 	bge.w	800c78a <_dtoa_r+0x632>
 800c5c0:	9b03      	ldr	r3, [sp, #12]
 800c5c2:	2b00      	cmp	r3, #0
 800c5c4:	f300 80e1 	bgt.w	800c78a <_dtoa_r+0x632>
 800c5c8:	d10c      	bne.n	800c5e4 <_dtoa_r+0x48c>
 800c5ca:	4b48      	ldr	r3, [pc, #288]	@ (800c6ec <_dtoa_r+0x594>)
 800c5cc:	2200      	movs	r2, #0
 800c5ce:	ec51 0b17 	vmov	r0, r1, d7
 800c5d2:	f7f4 f819 	bl	8000608 <__aeabi_dmul>
 800c5d6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c5da:	f7f4 fa9b 	bl	8000b14 <__aeabi_dcmpge>
 800c5de:	2800      	cmp	r0, #0
 800c5e0:	f000 8266 	beq.w	800cab0 <_dtoa_r+0x958>
 800c5e4:	2400      	movs	r4, #0
 800c5e6:	4625      	mov	r5, r4
 800c5e8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800c5ea:	4656      	mov	r6, sl
 800c5ec:	ea6f 0803 	mvn.w	r8, r3
 800c5f0:	2700      	movs	r7, #0
 800c5f2:	4621      	mov	r1, r4
 800c5f4:	4648      	mov	r0, r9
 800c5f6:	f000 fcbf 	bl	800cf78 <_Bfree>
 800c5fa:	2d00      	cmp	r5, #0
 800c5fc:	f000 80bd 	beq.w	800c77a <_dtoa_r+0x622>
 800c600:	b12f      	cbz	r7, 800c60e <_dtoa_r+0x4b6>
 800c602:	42af      	cmp	r7, r5
 800c604:	d003      	beq.n	800c60e <_dtoa_r+0x4b6>
 800c606:	4639      	mov	r1, r7
 800c608:	4648      	mov	r0, r9
 800c60a:	f000 fcb5 	bl	800cf78 <_Bfree>
 800c60e:	4629      	mov	r1, r5
 800c610:	4648      	mov	r0, r9
 800c612:	f000 fcb1 	bl	800cf78 <_Bfree>
 800c616:	e0b0      	b.n	800c77a <_dtoa_r+0x622>
 800c618:	07e2      	lsls	r2, r4, #31
 800c61a:	d505      	bpl.n	800c628 <_dtoa_r+0x4d0>
 800c61c:	e9d5 2300 	ldrd	r2, r3, [r5]
 800c620:	f7f3 fff2 	bl	8000608 <__aeabi_dmul>
 800c624:	3601      	adds	r6, #1
 800c626:	2301      	movs	r3, #1
 800c628:	1064      	asrs	r4, r4, #1
 800c62a:	3508      	adds	r5, #8
 800c62c:	e762      	b.n	800c4f4 <_dtoa_r+0x39c>
 800c62e:	2602      	movs	r6, #2
 800c630:	e765      	b.n	800c4fe <_dtoa_r+0x3a6>
 800c632:	9c03      	ldr	r4, [sp, #12]
 800c634:	46b8      	mov	r8, r7
 800c636:	e784      	b.n	800c542 <_dtoa_r+0x3ea>
 800c638:	4b27      	ldr	r3, [pc, #156]	@ (800c6d8 <_dtoa_r+0x580>)
 800c63a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800c63c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800c640:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800c644:	4454      	add	r4, sl
 800c646:	2900      	cmp	r1, #0
 800c648:	d054      	beq.n	800c6f4 <_dtoa_r+0x59c>
 800c64a:	4929      	ldr	r1, [pc, #164]	@ (800c6f0 <_dtoa_r+0x598>)
 800c64c:	2000      	movs	r0, #0
 800c64e:	f7f4 f905 	bl	800085c <__aeabi_ddiv>
 800c652:	4633      	mov	r3, r6
 800c654:	462a      	mov	r2, r5
 800c656:	f7f3 fe1f 	bl	8000298 <__aeabi_dsub>
 800c65a:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800c65e:	4656      	mov	r6, sl
 800c660:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c664:	f7f4 fa80 	bl	8000b68 <__aeabi_d2iz>
 800c668:	4605      	mov	r5, r0
 800c66a:	f7f3 ff63 	bl	8000534 <__aeabi_i2d>
 800c66e:	4602      	mov	r2, r0
 800c670:	460b      	mov	r3, r1
 800c672:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c676:	f7f3 fe0f 	bl	8000298 <__aeabi_dsub>
 800c67a:	3530      	adds	r5, #48	@ 0x30
 800c67c:	4602      	mov	r2, r0
 800c67e:	460b      	mov	r3, r1
 800c680:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800c684:	f806 5b01 	strb.w	r5, [r6], #1
 800c688:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800c68c:	f7f4 fa2e 	bl	8000aec <__aeabi_dcmplt>
 800c690:	2800      	cmp	r0, #0
 800c692:	d172      	bne.n	800c77a <_dtoa_r+0x622>
 800c694:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c698:	4911      	ldr	r1, [pc, #68]	@ (800c6e0 <_dtoa_r+0x588>)
 800c69a:	2000      	movs	r0, #0
 800c69c:	f7f3 fdfc 	bl	8000298 <__aeabi_dsub>
 800c6a0:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800c6a4:	f7f4 fa22 	bl	8000aec <__aeabi_dcmplt>
 800c6a8:	2800      	cmp	r0, #0
 800c6aa:	f040 80b4 	bne.w	800c816 <_dtoa_r+0x6be>
 800c6ae:	42a6      	cmp	r6, r4
 800c6b0:	f43f af70 	beq.w	800c594 <_dtoa_r+0x43c>
 800c6b4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800c6b8:	4b0a      	ldr	r3, [pc, #40]	@ (800c6e4 <_dtoa_r+0x58c>)
 800c6ba:	2200      	movs	r2, #0
 800c6bc:	f7f3 ffa4 	bl	8000608 <__aeabi_dmul>
 800c6c0:	4b08      	ldr	r3, [pc, #32]	@ (800c6e4 <_dtoa_r+0x58c>)
 800c6c2:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800c6c6:	2200      	movs	r2, #0
 800c6c8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c6cc:	f7f3 ff9c 	bl	8000608 <__aeabi_dmul>
 800c6d0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c6d4:	e7c4      	b.n	800c660 <_dtoa_r+0x508>
 800c6d6:	bf00      	nop
 800c6d8:	08010ed8 	.word	0x08010ed8
 800c6dc:	08010eb0 	.word	0x08010eb0
 800c6e0:	3ff00000 	.word	0x3ff00000
 800c6e4:	40240000 	.word	0x40240000
 800c6e8:	401c0000 	.word	0x401c0000
 800c6ec:	40140000 	.word	0x40140000
 800c6f0:	3fe00000 	.word	0x3fe00000
 800c6f4:	4631      	mov	r1, r6
 800c6f6:	4628      	mov	r0, r5
 800c6f8:	f7f3 ff86 	bl	8000608 <__aeabi_dmul>
 800c6fc:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800c700:	9413      	str	r4, [sp, #76]	@ 0x4c
 800c702:	4656      	mov	r6, sl
 800c704:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c708:	f7f4 fa2e 	bl	8000b68 <__aeabi_d2iz>
 800c70c:	4605      	mov	r5, r0
 800c70e:	f7f3 ff11 	bl	8000534 <__aeabi_i2d>
 800c712:	4602      	mov	r2, r0
 800c714:	460b      	mov	r3, r1
 800c716:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c71a:	f7f3 fdbd 	bl	8000298 <__aeabi_dsub>
 800c71e:	3530      	adds	r5, #48	@ 0x30
 800c720:	f806 5b01 	strb.w	r5, [r6], #1
 800c724:	4602      	mov	r2, r0
 800c726:	460b      	mov	r3, r1
 800c728:	42a6      	cmp	r6, r4
 800c72a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800c72e:	f04f 0200 	mov.w	r2, #0
 800c732:	d124      	bne.n	800c77e <_dtoa_r+0x626>
 800c734:	4baf      	ldr	r3, [pc, #700]	@ (800c9f4 <_dtoa_r+0x89c>)
 800c736:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800c73a:	f7f3 fdaf 	bl	800029c <__adddf3>
 800c73e:	4602      	mov	r2, r0
 800c740:	460b      	mov	r3, r1
 800c742:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c746:	f7f4 f9ef 	bl	8000b28 <__aeabi_dcmpgt>
 800c74a:	2800      	cmp	r0, #0
 800c74c:	d163      	bne.n	800c816 <_dtoa_r+0x6be>
 800c74e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800c752:	49a8      	ldr	r1, [pc, #672]	@ (800c9f4 <_dtoa_r+0x89c>)
 800c754:	2000      	movs	r0, #0
 800c756:	f7f3 fd9f 	bl	8000298 <__aeabi_dsub>
 800c75a:	4602      	mov	r2, r0
 800c75c:	460b      	mov	r3, r1
 800c75e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c762:	f7f4 f9c3 	bl	8000aec <__aeabi_dcmplt>
 800c766:	2800      	cmp	r0, #0
 800c768:	f43f af14 	beq.w	800c594 <_dtoa_r+0x43c>
 800c76c:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800c76e:	1e73      	subs	r3, r6, #1
 800c770:	9313      	str	r3, [sp, #76]	@ 0x4c
 800c772:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800c776:	2b30      	cmp	r3, #48	@ 0x30
 800c778:	d0f8      	beq.n	800c76c <_dtoa_r+0x614>
 800c77a:	4647      	mov	r7, r8
 800c77c:	e03b      	b.n	800c7f6 <_dtoa_r+0x69e>
 800c77e:	4b9e      	ldr	r3, [pc, #632]	@ (800c9f8 <_dtoa_r+0x8a0>)
 800c780:	f7f3 ff42 	bl	8000608 <__aeabi_dmul>
 800c784:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c788:	e7bc      	b.n	800c704 <_dtoa_r+0x5ac>
 800c78a:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800c78e:	4656      	mov	r6, sl
 800c790:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c794:	4620      	mov	r0, r4
 800c796:	4629      	mov	r1, r5
 800c798:	f7f4 f860 	bl	800085c <__aeabi_ddiv>
 800c79c:	f7f4 f9e4 	bl	8000b68 <__aeabi_d2iz>
 800c7a0:	4680      	mov	r8, r0
 800c7a2:	f7f3 fec7 	bl	8000534 <__aeabi_i2d>
 800c7a6:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c7aa:	f7f3 ff2d 	bl	8000608 <__aeabi_dmul>
 800c7ae:	4602      	mov	r2, r0
 800c7b0:	460b      	mov	r3, r1
 800c7b2:	4620      	mov	r0, r4
 800c7b4:	4629      	mov	r1, r5
 800c7b6:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800c7ba:	f7f3 fd6d 	bl	8000298 <__aeabi_dsub>
 800c7be:	f806 4b01 	strb.w	r4, [r6], #1
 800c7c2:	9d03      	ldr	r5, [sp, #12]
 800c7c4:	eba6 040a 	sub.w	r4, r6, sl
 800c7c8:	42a5      	cmp	r5, r4
 800c7ca:	4602      	mov	r2, r0
 800c7cc:	460b      	mov	r3, r1
 800c7ce:	d133      	bne.n	800c838 <_dtoa_r+0x6e0>
 800c7d0:	f7f3 fd64 	bl	800029c <__adddf3>
 800c7d4:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c7d8:	4604      	mov	r4, r0
 800c7da:	460d      	mov	r5, r1
 800c7dc:	f7f4 f9a4 	bl	8000b28 <__aeabi_dcmpgt>
 800c7e0:	b9c0      	cbnz	r0, 800c814 <_dtoa_r+0x6bc>
 800c7e2:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c7e6:	4620      	mov	r0, r4
 800c7e8:	4629      	mov	r1, r5
 800c7ea:	f7f4 f975 	bl	8000ad8 <__aeabi_dcmpeq>
 800c7ee:	b110      	cbz	r0, 800c7f6 <_dtoa_r+0x69e>
 800c7f0:	f018 0f01 	tst.w	r8, #1
 800c7f4:	d10e      	bne.n	800c814 <_dtoa_r+0x6bc>
 800c7f6:	9902      	ldr	r1, [sp, #8]
 800c7f8:	4648      	mov	r0, r9
 800c7fa:	f000 fbbd 	bl	800cf78 <_Bfree>
 800c7fe:	2300      	movs	r3, #0
 800c800:	7033      	strb	r3, [r6, #0]
 800c802:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800c804:	3701      	adds	r7, #1
 800c806:	601f      	str	r7, [r3, #0]
 800c808:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800c80a:	2b00      	cmp	r3, #0
 800c80c:	f000 824b 	beq.w	800cca6 <_dtoa_r+0xb4e>
 800c810:	601e      	str	r6, [r3, #0]
 800c812:	e248      	b.n	800cca6 <_dtoa_r+0xb4e>
 800c814:	46b8      	mov	r8, r7
 800c816:	4633      	mov	r3, r6
 800c818:	461e      	mov	r6, r3
 800c81a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c81e:	2a39      	cmp	r2, #57	@ 0x39
 800c820:	d106      	bne.n	800c830 <_dtoa_r+0x6d8>
 800c822:	459a      	cmp	sl, r3
 800c824:	d1f8      	bne.n	800c818 <_dtoa_r+0x6c0>
 800c826:	2230      	movs	r2, #48	@ 0x30
 800c828:	f108 0801 	add.w	r8, r8, #1
 800c82c:	f88a 2000 	strb.w	r2, [sl]
 800c830:	781a      	ldrb	r2, [r3, #0]
 800c832:	3201      	adds	r2, #1
 800c834:	701a      	strb	r2, [r3, #0]
 800c836:	e7a0      	b.n	800c77a <_dtoa_r+0x622>
 800c838:	4b6f      	ldr	r3, [pc, #444]	@ (800c9f8 <_dtoa_r+0x8a0>)
 800c83a:	2200      	movs	r2, #0
 800c83c:	f7f3 fee4 	bl	8000608 <__aeabi_dmul>
 800c840:	2200      	movs	r2, #0
 800c842:	2300      	movs	r3, #0
 800c844:	4604      	mov	r4, r0
 800c846:	460d      	mov	r5, r1
 800c848:	f7f4 f946 	bl	8000ad8 <__aeabi_dcmpeq>
 800c84c:	2800      	cmp	r0, #0
 800c84e:	d09f      	beq.n	800c790 <_dtoa_r+0x638>
 800c850:	e7d1      	b.n	800c7f6 <_dtoa_r+0x69e>
 800c852:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c854:	2a00      	cmp	r2, #0
 800c856:	f000 80ea 	beq.w	800ca2e <_dtoa_r+0x8d6>
 800c85a:	9a07      	ldr	r2, [sp, #28]
 800c85c:	2a01      	cmp	r2, #1
 800c85e:	f300 80cd 	bgt.w	800c9fc <_dtoa_r+0x8a4>
 800c862:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800c864:	2a00      	cmp	r2, #0
 800c866:	f000 80c1 	beq.w	800c9ec <_dtoa_r+0x894>
 800c86a:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800c86e:	9c08      	ldr	r4, [sp, #32]
 800c870:	9e00      	ldr	r6, [sp, #0]
 800c872:	9a00      	ldr	r2, [sp, #0]
 800c874:	441a      	add	r2, r3
 800c876:	9200      	str	r2, [sp, #0]
 800c878:	9a06      	ldr	r2, [sp, #24]
 800c87a:	2101      	movs	r1, #1
 800c87c:	441a      	add	r2, r3
 800c87e:	4648      	mov	r0, r9
 800c880:	9206      	str	r2, [sp, #24]
 800c882:	f000 fc77 	bl	800d174 <__i2b>
 800c886:	4605      	mov	r5, r0
 800c888:	b166      	cbz	r6, 800c8a4 <_dtoa_r+0x74c>
 800c88a:	9b06      	ldr	r3, [sp, #24]
 800c88c:	2b00      	cmp	r3, #0
 800c88e:	dd09      	ble.n	800c8a4 <_dtoa_r+0x74c>
 800c890:	42b3      	cmp	r3, r6
 800c892:	9a00      	ldr	r2, [sp, #0]
 800c894:	bfa8      	it	ge
 800c896:	4633      	movge	r3, r6
 800c898:	1ad2      	subs	r2, r2, r3
 800c89a:	9200      	str	r2, [sp, #0]
 800c89c:	9a06      	ldr	r2, [sp, #24]
 800c89e:	1af6      	subs	r6, r6, r3
 800c8a0:	1ad3      	subs	r3, r2, r3
 800c8a2:	9306      	str	r3, [sp, #24]
 800c8a4:	9b08      	ldr	r3, [sp, #32]
 800c8a6:	b30b      	cbz	r3, 800c8ec <_dtoa_r+0x794>
 800c8a8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c8aa:	2b00      	cmp	r3, #0
 800c8ac:	f000 80c6 	beq.w	800ca3c <_dtoa_r+0x8e4>
 800c8b0:	2c00      	cmp	r4, #0
 800c8b2:	f000 80c0 	beq.w	800ca36 <_dtoa_r+0x8de>
 800c8b6:	4629      	mov	r1, r5
 800c8b8:	4622      	mov	r2, r4
 800c8ba:	4648      	mov	r0, r9
 800c8bc:	f000 fd12 	bl	800d2e4 <__pow5mult>
 800c8c0:	9a02      	ldr	r2, [sp, #8]
 800c8c2:	4601      	mov	r1, r0
 800c8c4:	4605      	mov	r5, r0
 800c8c6:	4648      	mov	r0, r9
 800c8c8:	f000 fc6a 	bl	800d1a0 <__multiply>
 800c8cc:	9902      	ldr	r1, [sp, #8]
 800c8ce:	4680      	mov	r8, r0
 800c8d0:	4648      	mov	r0, r9
 800c8d2:	f000 fb51 	bl	800cf78 <_Bfree>
 800c8d6:	9b08      	ldr	r3, [sp, #32]
 800c8d8:	1b1b      	subs	r3, r3, r4
 800c8da:	9308      	str	r3, [sp, #32]
 800c8dc:	f000 80b1 	beq.w	800ca42 <_dtoa_r+0x8ea>
 800c8e0:	9a08      	ldr	r2, [sp, #32]
 800c8e2:	4641      	mov	r1, r8
 800c8e4:	4648      	mov	r0, r9
 800c8e6:	f000 fcfd 	bl	800d2e4 <__pow5mult>
 800c8ea:	9002      	str	r0, [sp, #8]
 800c8ec:	2101      	movs	r1, #1
 800c8ee:	4648      	mov	r0, r9
 800c8f0:	f000 fc40 	bl	800d174 <__i2b>
 800c8f4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800c8f6:	4604      	mov	r4, r0
 800c8f8:	2b00      	cmp	r3, #0
 800c8fa:	f000 81d8 	beq.w	800ccae <_dtoa_r+0xb56>
 800c8fe:	461a      	mov	r2, r3
 800c900:	4601      	mov	r1, r0
 800c902:	4648      	mov	r0, r9
 800c904:	f000 fcee 	bl	800d2e4 <__pow5mult>
 800c908:	9b07      	ldr	r3, [sp, #28]
 800c90a:	2b01      	cmp	r3, #1
 800c90c:	4604      	mov	r4, r0
 800c90e:	f300 809f 	bgt.w	800ca50 <_dtoa_r+0x8f8>
 800c912:	9b04      	ldr	r3, [sp, #16]
 800c914:	2b00      	cmp	r3, #0
 800c916:	f040 8097 	bne.w	800ca48 <_dtoa_r+0x8f0>
 800c91a:	9b05      	ldr	r3, [sp, #20]
 800c91c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c920:	2b00      	cmp	r3, #0
 800c922:	f040 8093 	bne.w	800ca4c <_dtoa_r+0x8f4>
 800c926:	9b05      	ldr	r3, [sp, #20]
 800c928:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800c92c:	0d1b      	lsrs	r3, r3, #20
 800c92e:	051b      	lsls	r3, r3, #20
 800c930:	b133      	cbz	r3, 800c940 <_dtoa_r+0x7e8>
 800c932:	9b00      	ldr	r3, [sp, #0]
 800c934:	3301      	adds	r3, #1
 800c936:	9300      	str	r3, [sp, #0]
 800c938:	9b06      	ldr	r3, [sp, #24]
 800c93a:	3301      	adds	r3, #1
 800c93c:	9306      	str	r3, [sp, #24]
 800c93e:	2301      	movs	r3, #1
 800c940:	9308      	str	r3, [sp, #32]
 800c942:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800c944:	2b00      	cmp	r3, #0
 800c946:	f000 81b8 	beq.w	800ccba <_dtoa_r+0xb62>
 800c94a:	6923      	ldr	r3, [r4, #16]
 800c94c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800c950:	6918      	ldr	r0, [r3, #16]
 800c952:	f000 fbc3 	bl	800d0dc <__hi0bits>
 800c956:	f1c0 0020 	rsb	r0, r0, #32
 800c95a:	9b06      	ldr	r3, [sp, #24]
 800c95c:	4418      	add	r0, r3
 800c95e:	f010 001f 	ands.w	r0, r0, #31
 800c962:	f000 8082 	beq.w	800ca6a <_dtoa_r+0x912>
 800c966:	f1c0 0320 	rsb	r3, r0, #32
 800c96a:	2b04      	cmp	r3, #4
 800c96c:	dd73      	ble.n	800ca56 <_dtoa_r+0x8fe>
 800c96e:	9b00      	ldr	r3, [sp, #0]
 800c970:	f1c0 001c 	rsb	r0, r0, #28
 800c974:	4403      	add	r3, r0
 800c976:	9300      	str	r3, [sp, #0]
 800c978:	9b06      	ldr	r3, [sp, #24]
 800c97a:	4403      	add	r3, r0
 800c97c:	4406      	add	r6, r0
 800c97e:	9306      	str	r3, [sp, #24]
 800c980:	9b00      	ldr	r3, [sp, #0]
 800c982:	2b00      	cmp	r3, #0
 800c984:	dd05      	ble.n	800c992 <_dtoa_r+0x83a>
 800c986:	9902      	ldr	r1, [sp, #8]
 800c988:	461a      	mov	r2, r3
 800c98a:	4648      	mov	r0, r9
 800c98c:	f000 fd04 	bl	800d398 <__lshift>
 800c990:	9002      	str	r0, [sp, #8]
 800c992:	9b06      	ldr	r3, [sp, #24]
 800c994:	2b00      	cmp	r3, #0
 800c996:	dd05      	ble.n	800c9a4 <_dtoa_r+0x84c>
 800c998:	4621      	mov	r1, r4
 800c99a:	461a      	mov	r2, r3
 800c99c:	4648      	mov	r0, r9
 800c99e:	f000 fcfb 	bl	800d398 <__lshift>
 800c9a2:	4604      	mov	r4, r0
 800c9a4:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800c9a6:	2b00      	cmp	r3, #0
 800c9a8:	d061      	beq.n	800ca6e <_dtoa_r+0x916>
 800c9aa:	9802      	ldr	r0, [sp, #8]
 800c9ac:	4621      	mov	r1, r4
 800c9ae:	f000 fd5f 	bl	800d470 <__mcmp>
 800c9b2:	2800      	cmp	r0, #0
 800c9b4:	da5b      	bge.n	800ca6e <_dtoa_r+0x916>
 800c9b6:	2300      	movs	r3, #0
 800c9b8:	9902      	ldr	r1, [sp, #8]
 800c9ba:	220a      	movs	r2, #10
 800c9bc:	4648      	mov	r0, r9
 800c9be:	f000 fafd 	bl	800cfbc <__multadd>
 800c9c2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c9c4:	9002      	str	r0, [sp, #8]
 800c9c6:	f107 38ff 	add.w	r8, r7, #4294967295
 800c9ca:	2b00      	cmp	r3, #0
 800c9cc:	f000 8177 	beq.w	800ccbe <_dtoa_r+0xb66>
 800c9d0:	4629      	mov	r1, r5
 800c9d2:	2300      	movs	r3, #0
 800c9d4:	220a      	movs	r2, #10
 800c9d6:	4648      	mov	r0, r9
 800c9d8:	f000 faf0 	bl	800cfbc <__multadd>
 800c9dc:	f1bb 0f00 	cmp.w	fp, #0
 800c9e0:	4605      	mov	r5, r0
 800c9e2:	dc6f      	bgt.n	800cac4 <_dtoa_r+0x96c>
 800c9e4:	9b07      	ldr	r3, [sp, #28]
 800c9e6:	2b02      	cmp	r3, #2
 800c9e8:	dc49      	bgt.n	800ca7e <_dtoa_r+0x926>
 800c9ea:	e06b      	b.n	800cac4 <_dtoa_r+0x96c>
 800c9ec:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800c9ee:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800c9f2:	e73c      	b.n	800c86e <_dtoa_r+0x716>
 800c9f4:	3fe00000 	.word	0x3fe00000
 800c9f8:	40240000 	.word	0x40240000
 800c9fc:	9b03      	ldr	r3, [sp, #12]
 800c9fe:	1e5c      	subs	r4, r3, #1
 800ca00:	9b08      	ldr	r3, [sp, #32]
 800ca02:	42a3      	cmp	r3, r4
 800ca04:	db09      	blt.n	800ca1a <_dtoa_r+0x8c2>
 800ca06:	1b1c      	subs	r4, r3, r4
 800ca08:	9b03      	ldr	r3, [sp, #12]
 800ca0a:	2b00      	cmp	r3, #0
 800ca0c:	f6bf af30 	bge.w	800c870 <_dtoa_r+0x718>
 800ca10:	9b00      	ldr	r3, [sp, #0]
 800ca12:	9a03      	ldr	r2, [sp, #12]
 800ca14:	1a9e      	subs	r6, r3, r2
 800ca16:	2300      	movs	r3, #0
 800ca18:	e72b      	b.n	800c872 <_dtoa_r+0x71a>
 800ca1a:	9b08      	ldr	r3, [sp, #32]
 800ca1c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800ca1e:	9408      	str	r4, [sp, #32]
 800ca20:	1ae3      	subs	r3, r4, r3
 800ca22:	441a      	add	r2, r3
 800ca24:	9e00      	ldr	r6, [sp, #0]
 800ca26:	9b03      	ldr	r3, [sp, #12]
 800ca28:	920d      	str	r2, [sp, #52]	@ 0x34
 800ca2a:	2400      	movs	r4, #0
 800ca2c:	e721      	b.n	800c872 <_dtoa_r+0x71a>
 800ca2e:	9c08      	ldr	r4, [sp, #32]
 800ca30:	9e00      	ldr	r6, [sp, #0]
 800ca32:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 800ca34:	e728      	b.n	800c888 <_dtoa_r+0x730>
 800ca36:	f8dd 8008 	ldr.w	r8, [sp, #8]
 800ca3a:	e751      	b.n	800c8e0 <_dtoa_r+0x788>
 800ca3c:	9a08      	ldr	r2, [sp, #32]
 800ca3e:	9902      	ldr	r1, [sp, #8]
 800ca40:	e750      	b.n	800c8e4 <_dtoa_r+0x78c>
 800ca42:	f8cd 8008 	str.w	r8, [sp, #8]
 800ca46:	e751      	b.n	800c8ec <_dtoa_r+0x794>
 800ca48:	2300      	movs	r3, #0
 800ca4a:	e779      	b.n	800c940 <_dtoa_r+0x7e8>
 800ca4c:	9b04      	ldr	r3, [sp, #16]
 800ca4e:	e777      	b.n	800c940 <_dtoa_r+0x7e8>
 800ca50:	2300      	movs	r3, #0
 800ca52:	9308      	str	r3, [sp, #32]
 800ca54:	e779      	b.n	800c94a <_dtoa_r+0x7f2>
 800ca56:	d093      	beq.n	800c980 <_dtoa_r+0x828>
 800ca58:	9a00      	ldr	r2, [sp, #0]
 800ca5a:	331c      	adds	r3, #28
 800ca5c:	441a      	add	r2, r3
 800ca5e:	9200      	str	r2, [sp, #0]
 800ca60:	9a06      	ldr	r2, [sp, #24]
 800ca62:	441a      	add	r2, r3
 800ca64:	441e      	add	r6, r3
 800ca66:	9206      	str	r2, [sp, #24]
 800ca68:	e78a      	b.n	800c980 <_dtoa_r+0x828>
 800ca6a:	4603      	mov	r3, r0
 800ca6c:	e7f4      	b.n	800ca58 <_dtoa_r+0x900>
 800ca6e:	9b03      	ldr	r3, [sp, #12]
 800ca70:	2b00      	cmp	r3, #0
 800ca72:	46b8      	mov	r8, r7
 800ca74:	dc20      	bgt.n	800cab8 <_dtoa_r+0x960>
 800ca76:	469b      	mov	fp, r3
 800ca78:	9b07      	ldr	r3, [sp, #28]
 800ca7a:	2b02      	cmp	r3, #2
 800ca7c:	dd1e      	ble.n	800cabc <_dtoa_r+0x964>
 800ca7e:	f1bb 0f00 	cmp.w	fp, #0
 800ca82:	f47f adb1 	bne.w	800c5e8 <_dtoa_r+0x490>
 800ca86:	4621      	mov	r1, r4
 800ca88:	465b      	mov	r3, fp
 800ca8a:	2205      	movs	r2, #5
 800ca8c:	4648      	mov	r0, r9
 800ca8e:	f000 fa95 	bl	800cfbc <__multadd>
 800ca92:	4601      	mov	r1, r0
 800ca94:	4604      	mov	r4, r0
 800ca96:	9802      	ldr	r0, [sp, #8]
 800ca98:	f000 fcea 	bl	800d470 <__mcmp>
 800ca9c:	2800      	cmp	r0, #0
 800ca9e:	f77f ada3 	ble.w	800c5e8 <_dtoa_r+0x490>
 800caa2:	4656      	mov	r6, sl
 800caa4:	2331      	movs	r3, #49	@ 0x31
 800caa6:	f806 3b01 	strb.w	r3, [r6], #1
 800caaa:	f108 0801 	add.w	r8, r8, #1
 800caae:	e59f      	b.n	800c5f0 <_dtoa_r+0x498>
 800cab0:	9c03      	ldr	r4, [sp, #12]
 800cab2:	46b8      	mov	r8, r7
 800cab4:	4625      	mov	r5, r4
 800cab6:	e7f4      	b.n	800caa2 <_dtoa_r+0x94a>
 800cab8:	f8dd b00c 	ldr.w	fp, [sp, #12]
 800cabc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cabe:	2b00      	cmp	r3, #0
 800cac0:	f000 8101 	beq.w	800ccc6 <_dtoa_r+0xb6e>
 800cac4:	2e00      	cmp	r6, #0
 800cac6:	dd05      	ble.n	800cad4 <_dtoa_r+0x97c>
 800cac8:	4629      	mov	r1, r5
 800caca:	4632      	mov	r2, r6
 800cacc:	4648      	mov	r0, r9
 800cace:	f000 fc63 	bl	800d398 <__lshift>
 800cad2:	4605      	mov	r5, r0
 800cad4:	9b08      	ldr	r3, [sp, #32]
 800cad6:	2b00      	cmp	r3, #0
 800cad8:	d05c      	beq.n	800cb94 <_dtoa_r+0xa3c>
 800cada:	6869      	ldr	r1, [r5, #4]
 800cadc:	4648      	mov	r0, r9
 800cade:	f000 fa0b 	bl	800cef8 <_Balloc>
 800cae2:	4606      	mov	r6, r0
 800cae4:	b928      	cbnz	r0, 800caf2 <_dtoa_r+0x99a>
 800cae6:	4b82      	ldr	r3, [pc, #520]	@ (800ccf0 <_dtoa_r+0xb98>)
 800cae8:	4602      	mov	r2, r0
 800caea:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800caee:	f7ff bb4a 	b.w	800c186 <_dtoa_r+0x2e>
 800caf2:	692a      	ldr	r2, [r5, #16]
 800caf4:	3202      	adds	r2, #2
 800caf6:	0092      	lsls	r2, r2, #2
 800caf8:	f105 010c 	add.w	r1, r5, #12
 800cafc:	300c      	adds	r0, #12
 800cafe:	f7ff fa70 	bl	800bfe2 <memcpy>
 800cb02:	2201      	movs	r2, #1
 800cb04:	4631      	mov	r1, r6
 800cb06:	4648      	mov	r0, r9
 800cb08:	f000 fc46 	bl	800d398 <__lshift>
 800cb0c:	f10a 0301 	add.w	r3, sl, #1
 800cb10:	9300      	str	r3, [sp, #0]
 800cb12:	eb0a 030b 	add.w	r3, sl, fp
 800cb16:	9308      	str	r3, [sp, #32]
 800cb18:	9b04      	ldr	r3, [sp, #16]
 800cb1a:	f003 0301 	and.w	r3, r3, #1
 800cb1e:	462f      	mov	r7, r5
 800cb20:	9306      	str	r3, [sp, #24]
 800cb22:	4605      	mov	r5, r0
 800cb24:	9b00      	ldr	r3, [sp, #0]
 800cb26:	9802      	ldr	r0, [sp, #8]
 800cb28:	4621      	mov	r1, r4
 800cb2a:	f103 3bff 	add.w	fp, r3, #4294967295
 800cb2e:	f7ff fa8b 	bl	800c048 <quorem>
 800cb32:	4603      	mov	r3, r0
 800cb34:	3330      	adds	r3, #48	@ 0x30
 800cb36:	9003      	str	r0, [sp, #12]
 800cb38:	4639      	mov	r1, r7
 800cb3a:	9802      	ldr	r0, [sp, #8]
 800cb3c:	9309      	str	r3, [sp, #36]	@ 0x24
 800cb3e:	f000 fc97 	bl	800d470 <__mcmp>
 800cb42:	462a      	mov	r2, r5
 800cb44:	9004      	str	r0, [sp, #16]
 800cb46:	4621      	mov	r1, r4
 800cb48:	4648      	mov	r0, r9
 800cb4a:	f000 fcad 	bl	800d4a8 <__mdiff>
 800cb4e:	68c2      	ldr	r2, [r0, #12]
 800cb50:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cb52:	4606      	mov	r6, r0
 800cb54:	bb02      	cbnz	r2, 800cb98 <_dtoa_r+0xa40>
 800cb56:	4601      	mov	r1, r0
 800cb58:	9802      	ldr	r0, [sp, #8]
 800cb5a:	f000 fc89 	bl	800d470 <__mcmp>
 800cb5e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cb60:	4602      	mov	r2, r0
 800cb62:	4631      	mov	r1, r6
 800cb64:	4648      	mov	r0, r9
 800cb66:	920c      	str	r2, [sp, #48]	@ 0x30
 800cb68:	9309      	str	r3, [sp, #36]	@ 0x24
 800cb6a:	f000 fa05 	bl	800cf78 <_Bfree>
 800cb6e:	9b07      	ldr	r3, [sp, #28]
 800cb70:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800cb72:	9e00      	ldr	r6, [sp, #0]
 800cb74:	ea42 0103 	orr.w	r1, r2, r3
 800cb78:	9b06      	ldr	r3, [sp, #24]
 800cb7a:	4319      	orrs	r1, r3
 800cb7c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cb7e:	d10d      	bne.n	800cb9c <_dtoa_r+0xa44>
 800cb80:	2b39      	cmp	r3, #57	@ 0x39
 800cb82:	d027      	beq.n	800cbd4 <_dtoa_r+0xa7c>
 800cb84:	9a04      	ldr	r2, [sp, #16]
 800cb86:	2a00      	cmp	r2, #0
 800cb88:	dd01      	ble.n	800cb8e <_dtoa_r+0xa36>
 800cb8a:	9b03      	ldr	r3, [sp, #12]
 800cb8c:	3331      	adds	r3, #49	@ 0x31
 800cb8e:	f88b 3000 	strb.w	r3, [fp]
 800cb92:	e52e      	b.n	800c5f2 <_dtoa_r+0x49a>
 800cb94:	4628      	mov	r0, r5
 800cb96:	e7b9      	b.n	800cb0c <_dtoa_r+0x9b4>
 800cb98:	2201      	movs	r2, #1
 800cb9a:	e7e2      	b.n	800cb62 <_dtoa_r+0xa0a>
 800cb9c:	9904      	ldr	r1, [sp, #16]
 800cb9e:	2900      	cmp	r1, #0
 800cba0:	db04      	blt.n	800cbac <_dtoa_r+0xa54>
 800cba2:	9807      	ldr	r0, [sp, #28]
 800cba4:	4301      	orrs	r1, r0
 800cba6:	9806      	ldr	r0, [sp, #24]
 800cba8:	4301      	orrs	r1, r0
 800cbaa:	d120      	bne.n	800cbee <_dtoa_r+0xa96>
 800cbac:	2a00      	cmp	r2, #0
 800cbae:	ddee      	ble.n	800cb8e <_dtoa_r+0xa36>
 800cbb0:	9902      	ldr	r1, [sp, #8]
 800cbb2:	9300      	str	r3, [sp, #0]
 800cbb4:	2201      	movs	r2, #1
 800cbb6:	4648      	mov	r0, r9
 800cbb8:	f000 fbee 	bl	800d398 <__lshift>
 800cbbc:	4621      	mov	r1, r4
 800cbbe:	9002      	str	r0, [sp, #8]
 800cbc0:	f000 fc56 	bl	800d470 <__mcmp>
 800cbc4:	2800      	cmp	r0, #0
 800cbc6:	9b00      	ldr	r3, [sp, #0]
 800cbc8:	dc02      	bgt.n	800cbd0 <_dtoa_r+0xa78>
 800cbca:	d1e0      	bne.n	800cb8e <_dtoa_r+0xa36>
 800cbcc:	07da      	lsls	r2, r3, #31
 800cbce:	d5de      	bpl.n	800cb8e <_dtoa_r+0xa36>
 800cbd0:	2b39      	cmp	r3, #57	@ 0x39
 800cbd2:	d1da      	bne.n	800cb8a <_dtoa_r+0xa32>
 800cbd4:	2339      	movs	r3, #57	@ 0x39
 800cbd6:	f88b 3000 	strb.w	r3, [fp]
 800cbda:	4633      	mov	r3, r6
 800cbdc:	461e      	mov	r6, r3
 800cbde:	3b01      	subs	r3, #1
 800cbe0:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800cbe4:	2a39      	cmp	r2, #57	@ 0x39
 800cbe6:	d04e      	beq.n	800cc86 <_dtoa_r+0xb2e>
 800cbe8:	3201      	adds	r2, #1
 800cbea:	701a      	strb	r2, [r3, #0]
 800cbec:	e501      	b.n	800c5f2 <_dtoa_r+0x49a>
 800cbee:	2a00      	cmp	r2, #0
 800cbf0:	dd03      	ble.n	800cbfa <_dtoa_r+0xaa2>
 800cbf2:	2b39      	cmp	r3, #57	@ 0x39
 800cbf4:	d0ee      	beq.n	800cbd4 <_dtoa_r+0xa7c>
 800cbf6:	3301      	adds	r3, #1
 800cbf8:	e7c9      	b.n	800cb8e <_dtoa_r+0xa36>
 800cbfa:	9a00      	ldr	r2, [sp, #0]
 800cbfc:	9908      	ldr	r1, [sp, #32]
 800cbfe:	f802 3c01 	strb.w	r3, [r2, #-1]
 800cc02:	428a      	cmp	r2, r1
 800cc04:	d028      	beq.n	800cc58 <_dtoa_r+0xb00>
 800cc06:	9902      	ldr	r1, [sp, #8]
 800cc08:	2300      	movs	r3, #0
 800cc0a:	220a      	movs	r2, #10
 800cc0c:	4648      	mov	r0, r9
 800cc0e:	f000 f9d5 	bl	800cfbc <__multadd>
 800cc12:	42af      	cmp	r7, r5
 800cc14:	9002      	str	r0, [sp, #8]
 800cc16:	f04f 0300 	mov.w	r3, #0
 800cc1a:	f04f 020a 	mov.w	r2, #10
 800cc1e:	4639      	mov	r1, r7
 800cc20:	4648      	mov	r0, r9
 800cc22:	d107      	bne.n	800cc34 <_dtoa_r+0xadc>
 800cc24:	f000 f9ca 	bl	800cfbc <__multadd>
 800cc28:	4607      	mov	r7, r0
 800cc2a:	4605      	mov	r5, r0
 800cc2c:	9b00      	ldr	r3, [sp, #0]
 800cc2e:	3301      	adds	r3, #1
 800cc30:	9300      	str	r3, [sp, #0]
 800cc32:	e777      	b.n	800cb24 <_dtoa_r+0x9cc>
 800cc34:	f000 f9c2 	bl	800cfbc <__multadd>
 800cc38:	4629      	mov	r1, r5
 800cc3a:	4607      	mov	r7, r0
 800cc3c:	2300      	movs	r3, #0
 800cc3e:	220a      	movs	r2, #10
 800cc40:	4648      	mov	r0, r9
 800cc42:	f000 f9bb 	bl	800cfbc <__multadd>
 800cc46:	4605      	mov	r5, r0
 800cc48:	e7f0      	b.n	800cc2c <_dtoa_r+0xad4>
 800cc4a:	f1bb 0f00 	cmp.w	fp, #0
 800cc4e:	bfcc      	ite	gt
 800cc50:	465e      	movgt	r6, fp
 800cc52:	2601      	movle	r6, #1
 800cc54:	4456      	add	r6, sl
 800cc56:	2700      	movs	r7, #0
 800cc58:	9902      	ldr	r1, [sp, #8]
 800cc5a:	9300      	str	r3, [sp, #0]
 800cc5c:	2201      	movs	r2, #1
 800cc5e:	4648      	mov	r0, r9
 800cc60:	f000 fb9a 	bl	800d398 <__lshift>
 800cc64:	4621      	mov	r1, r4
 800cc66:	9002      	str	r0, [sp, #8]
 800cc68:	f000 fc02 	bl	800d470 <__mcmp>
 800cc6c:	2800      	cmp	r0, #0
 800cc6e:	dcb4      	bgt.n	800cbda <_dtoa_r+0xa82>
 800cc70:	d102      	bne.n	800cc78 <_dtoa_r+0xb20>
 800cc72:	9b00      	ldr	r3, [sp, #0]
 800cc74:	07db      	lsls	r3, r3, #31
 800cc76:	d4b0      	bmi.n	800cbda <_dtoa_r+0xa82>
 800cc78:	4633      	mov	r3, r6
 800cc7a:	461e      	mov	r6, r3
 800cc7c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800cc80:	2a30      	cmp	r2, #48	@ 0x30
 800cc82:	d0fa      	beq.n	800cc7a <_dtoa_r+0xb22>
 800cc84:	e4b5      	b.n	800c5f2 <_dtoa_r+0x49a>
 800cc86:	459a      	cmp	sl, r3
 800cc88:	d1a8      	bne.n	800cbdc <_dtoa_r+0xa84>
 800cc8a:	2331      	movs	r3, #49	@ 0x31
 800cc8c:	f108 0801 	add.w	r8, r8, #1
 800cc90:	f88a 3000 	strb.w	r3, [sl]
 800cc94:	e4ad      	b.n	800c5f2 <_dtoa_r+0x49a>
 800cc96:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800cc98:	f8df a058 	ldr.w	sl, [pc, #88]	@ 800ccf4 <_dtoa_r+0xb9c>
 800cc9c:	b11b      	cbz	r3, 800cca6 <_dtoa_r+0xb4e>
 800cc9e:	f10a 0308 	add.w	r3, sl, #8
 800cca2:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800cca4:	6013      	str	r3, [r2, #0]
 800cca6:	4650      	mov	r0, sl
 800cca8:	b017      	add	sp, #92	@ 0x5c
 800ccaa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ccae:	9b07      	ldr	r3, [sp, #28]
 800ccb0:	2b01      	cmp	r3, #1
 800ccb2:	f77f ae2e 	ble.w	800c912 <_dtoa_r+0x7ba>
 800ccb6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800ccb8:	9308      	str	r3, [sp, #32]
 800ccba:	2001      	movs	r0, #1
 800ccbc:	e64d      	b.n	800c95a <_dtoa_r+0x802>
 800ccbe:	f1bb 0f00 	cmp.w	fp, #0
 800ccc2:	f77f aed9 	ble.w	800ca78 <_dtoa_r+0x920>
 800ccc6:	4656      	mov	r6, sl
 800ccc8:	9802      	ldr	r0, [sp, #8]
 800ccca:	4621      	mov	r1, r4
 800cccc:	f7ff f9bc 	bl	800c048 <quorem>
 800ccd0:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 800ccd4:	f806 3b01 	strb.w	r3, [r6], #1
 800ccd8:	eba6 020a 	sub.w	r2, r6, sl
 800ccdc:	4593      	cmp	fp, r2
 800ccde:	ddb4      	ble.n	800cc4a <_dtoa_r+0xaf2>
 800cce0:	9902      	ldr	r1, [sp, #8]
 800cce2:	2300      	movs	r3, #0
 800cce4:	220a      	movs	r2, #10
 800cce6:	4648      	mov	r0, r9
 800cce8:	f000 f968 	bl	800cfbc <__multadd>
 800ccec:	9002      	str	r0, [sp, #8]
 800ccee:	e7eb      	b.n	800ccc8 <_dtoa_r+0xb70>
 800ccf0:	08010db9 	.word	0x08010db9
 800ccf4:	08010d3d 	.word	0x08010d3d

0800ccf8 <_free_r>:
 800ccf8:	b538      	push	{r3, r4, r5, lr}
 800ccfa:	4605      	mov	r5, r0
 800ccfc:	2900      	cmp	r1, #0
 800ccfe:	d041      	beq.n	800cd84 <_free_r+0x8c>
 800cd00:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cd04:	1f0c      	subs	r4, r1, #4
 800cd06:	2b00      	cmp	r3, #0
 800cd08:	bfb8      	it	lt
 800cd0a:	18e4      	addlt	r4, r4, r3
 800cd0c:	f000 f8e8 	bl	800cee0 <__malloc_lock>
 800cd10:	4a1d      	ldr	r2, [pc, #116]	@ (800cd88 <_free_r+0x90>)
 800cd12:	6813      	ldr	r3, [r2, #0]
 800cd14:	b933      	cbnz	r3, 800cd24 <_free_r+0x2c>
 800cd16:	6063      	str	r3, [r4, #4]
 800cd18:	6014      	str	r4, [r2, #0]
 800cd1a:	4628      	mov	r0, r5
 800cd1c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800cd20:	f000 b8e4 	b.w	800ceec <__malloc_unlock>
 800cd24:	42a3      	cmp	r3, r4
 800cd26:	d908      	bls.n	800cd3a <_free_r+0x42>
 800cd28:	6820      	ldr	r0, [r4, #0]
 800cd2a:	1821      	adds	r1, r4, r0
 800cd2c:	428b      	cmp	r3, r1
 800cd2e:	bf01      	itttt	eq
 800cd30:	6819      	ldreq	r1, [r3, #0]
 800cd32:	685b      	ldreq	r3, [r3, #4]
 800cd34:	1809      	addeq	r1, r1, r0
 800cd36:	6021      	streq	r1, [r4, #0]
 800cd38:	e7ed      	b.n	800cd16 <_free_r+0x1e>
 800cd3a:	461a      	mov	r2, r3
 800cd3c:	685b      	ldr	r3, [r3, #4]
 800cd3e:	b10b      	cbz	r3, 800cd44 <_free_r+0x4c>
 800cd40:	42a3      	cmp	r3, r4
 800cd42:	d9fa      	bls.n	800cd3a <_free_r+0x42>
 800cd44:	6811      	ldr	r1, [r2, #0]
 800cd46:	1850      	adds	r0, r2, r1
 800cd48:	42a0      	cmp	r0, r4
 800cd4a:	d10b      	bne.n	800cd64 <_free_r+0x6c>
 800cd4c:	6820      	ldr	r0, [r4, #0]
 800cd4e:	4401      	add	r1, r0
 800cd50:	1850      	adds	r0, r2, r1
 800cd52:	4283      	cmp	r3, r0
 800cd54:	6011      	str	r1, [r2, #0]
 800cd56:	d1e0      	bne.n	800cd1a <_free_r+0x22>
 800cd58:	6818      	ldr	r0, [r3, #0]
 800cd5a:	685b      	ldr	r3, [r3, #4]
 800cd5c:	6053      	str	r3, [r2, #4]
 800cd5e:	4408      	add	r0, r1
 800cd60:	6010      	str	r0, [r2, #0]
 800cd62:	e7da      	b.n	800cd1a <_free_r+0x22>
 800cd64:	d902      	bls.n	800cd6c <_free_r+0x74>
 800cd66:	230c      	movs	r3, #12
 800cd68:	602b      	str	r3, [r5, #0]
 800cd6a:	e7d6      	b.n	800cd1a <_free_r+0x22>
 800cd6c:	6820      	ldr	r0, [r4, #0]
 800cd6e:	1821      	adds	r1, r4, r0
 800cd70:	428b      	cmp	r3, r1
 800cd72:	bf04      	itt	eq
 800cd74:	6819      	ldreq	r1, [r3, #0]
 800cd76:	685b      	ldreq	r3, [r3, #4]
 800cd78:	6063      	str	r3, [r4, #4]
 800cd7a:	bf04      	itt	eq
 800cd7c:	1809      	addeq	r1, r1, r0
 800cd7e:	6021      	streq	r1, [r4, #0]
 800cd80:	6054      	str	r4, [r2, #4]
 800cd82:	e7ca      	b.n	800cd1a <_free_r+0x22>
 800cd84:	bd38      	pop	{r3, r4, r5, pc}
 800cd86:	bf00      	nop
 800cd88:	2000f148 	.word	0x2000f148

0800cd8c <malloc>:
 800cd8c:	4b02      	ldr	r3, [pc, #8]	@ (800cd98 <malloc+0xc>)
 800cd8e:	4601      	mov	r1, r0
 800cd90:	6818      	ldr	r0, [r3, #0]
 800cd92:	f000 b825 	b.w	800cde0 <_malloc_r>
 800cd96:	bf00      	nop
 800cd98:	2000d138 	.word	0x2000d138

0800cd9c <sbrk_aligned>:
 800cd9c:	b570      	push	{r4, r5, r6, lr}
 800cd9e:	4e0f      	ldr	r6, [pc, #60]	@ (800cddc <sbrk_aligned+0x40>)
 800cda0:	460c      	mov	r4, r1
 800cda2:	6831      	ldr	r1, [r6, #0]
 800cda4:	4605      	mov	r5, r0
 800cda6:	b911      	cbnz	r1, 800cdae <sbrk_aligned+0x12>
 800cda8:	f001 ffdc 	bl	800ed64 <_sbrk_r>
 800cdac:	6030      	str	r0, [r6, #0]
 800cdae:	4621      	mov	r1, r4
 800cdb0:	4628      	mov	r0, r5
 800cdb2:	f001 ffd7 	bl	800ed64 <_sbrk_r>
 800cdb6:	1c43      	adds	r3, r0, #1
 800cdb8:	d103      	bne.n	800cdc2 <sbrk_aligned+0x26>
 800cdba:	f04f 34ff 	mov.w	r4, #4294967295
 800cdbe:	4620      	mov	r0, r4
 800cdc0:	bd70      	pop	{r4, r5, r6, pc}
 800cdc2:	1cc4      	adds	r4, r0, #3
 800cdc4:	f024 0403 	bic.w	r4, r4, #3
 800cdc8:	42a0      	cmp	r0, r4
 800cdca:	d0f8      	beq.n	800cdbe <sbrk_aligned+0x22>
 800cdcc:	1a21      	subs	r1, r4, r0
 800cdce:	4628      	mov	r0, r5
 800cdd0:	f001 ffc8 	bl	800ed64 <_sbrk_r>
 800cdd4:	3001      	adds	r0, #1
 800cdd6:	d1f2      	bne.n	800cdbe <sbrk_aligned+0x22>
 800cdd8:	e7ef      	b.n	800cdba <sbrk_aligned+0x1e>
 800cdda:	bf00      	nop
 800cddc:	2000f144 	.word	0x2000f144

0800cde0 <_malloc_r>:
 800cde0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cde4:	1ccd      	adds	r5, r1, #3
 800cde6:	f025 0503 	bic.w	r5, r5, #3
 800cdea:	3508      	adds	r5, #8
 800cdec:	2d0c      	cmp	r5, #12
 800cdee:	bf38      	it	cc
 800cdf0:	250c      	movcc	r5, #12
 800cdf2:	2d00      	cmp	r5, #0
 800cdf4:	4606      	mov	r6, r0
 800cdf6:	db01      	blt.n	800cdfc <_malloc_r+0x1c>
 800cdf8:	42a9      	cmp	r1, r5
 800cdfa:	d904      	bls.n	800ce06 <_malloc_r+0x26>
 800cdfc:	230c      	movs	r3, #12
 800cdfe:	6033      	str	r3, [r6, #0]
 800ce00:	2000      	movs	r0, #0
 800ce02:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ce06:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800cedc <_malloc_r+0xfc>
 800ce0a:	f000 f869 	bl	800cee0 <__malloc_lock>
 800ce0e:	f8d8 3000 	ldr.w	r3, [r8]
 800ce12:	461c      	mov	r4, r3
 800ce14:	bb44      	cbnz	r4, 800ce68 <_malloc_r+0x88>
 800ce16:	4629      	mov	r1, r5
 800ce18:	4630      	mov	r0, r6
 800ce1a:	f7ff ffbf 	bl	800cd9c <sbrk_aligned>
 800ce1e:	1c43      	adds	r3, r0, #1
 800ce20:	4604      	mov	r4, r0
 800ce22:	d158      	bne.n	800ced6 <_malloc_r+0xf6>
 800ce24:	f8d8 4000 	ldr.w	r4, [r8]
 800ce28:	4627      	mov	r7, r4
 800ce2a:	2f00      	cmp	r7, #0
 800ce2c:	d143      	bne.n	800ceb6 <_malloc_r+0xd6>
 800ce2e:	2c00      	cmp	r4, #0
 800ce30:	d04b      	beq.n	800ceca <_malloc_r+0xea>
 800ce32:	6823      	ldr	r3, [r4, #0]
 800ce34:	4639      	mov	r1, r7
 800ce36:	4630      	mov	r0, r6
 800ce38:	eb04 0903 	add.w	r9, r4, r3
 800ce3c:	f001 ff92 	bl	800ed64 <_sbrk_r>
 800ce40:	4581      	cmp	r9, r0
 800ce42:	d142      	bne.n	800ceca <_malloc_r+0xea>
 800ce44:	6821      	ldr	r1, [r4, #0]
 800ce46:	1a6d      	subs	r5, r5, r1
 800ce48:	4629      	mov	r1, r5
 800ce4a:	4630      	mov	r0, r6
 800ce4c:	f7ff ffa6 	bl	800cd9c <sbrk_aligned>
 800ce50:	3001      	adds	r0, #1
 800ce52:	d03a      	beq.n	800ceca <_malloc_r+0xea>
 800ce54:	6823      	ldr	r3, [r4, #0]
 800ce56:	442b      	add	r3, r5
 800ce58:	6023      	str	r3, [r4, #0]
 800ce5a:	f8d8 3000 	ldr.w	r3, [r8]
 800ce5e:	685a      	ldr	r2, [r3, #4]
 800ce60:	bb62      	cbnz	r2, 800cebc <_malloc_r+0xdc>
 800ce62:	f8c8 7000 	str.w	r7, [r8]
 800ce66:	e00f      	b.n	800ce88 <_malloc_r+0xa8>
 800ce68:	6822      	ldr	r2, [r4, #0]
 800ce6a:	1b52      	subs	r2, r2, r5
 800ce6c:	d420      	bmi.n	800ceb0 <_malloc_r+0xd0>
 800ce6e:	2a0b      	cmp	r2, #11
 800ce70:	d917      	bls.n	800cea2 <_malloc_r+0xc2>
 800ce72:	1961      	adds	r1, r4, r5
 800ce74:	42a3      	cmp	r3, r4
 800ce76:	6025      	str	r5, [r4, #0]
 800ce78:	bf18      	it	ne
 800ce7a:	6059      	strne	r1, [r3, #4]
 800ce7c:	6863      	ldr	r3, [r4, #4]
 800ce7e:	bf08      	it	eq
 800ce80:	f8c8 1000 	streq.w	r1, [r8]
 800ce84:	5162      	str	r2, [r4, r5]
 800ce86:	604b      	str	r3, [r1, #4]
 800ce88:	4630      	mov	r0, r6
 800ce8a:	f000 f82f 	bl	800ceec <__malloc_unlock>
 800ce8e:	f104 000b 	add.w	r0, r4, #11
 800ce92:	1d23      	adds	r3, r4, #4
 800ce94:	f020 0007 	bic.w	r0, r0, #7
 800ce98:	1ac2      	subs	r2, r0, r3
 800ce9a:	bf1c      	itt	ne
 800ce9c:	1a1b      	subne	r3, r3, r0
 800ce9e:	50a3      	strne	r3, [r4, r2]
 800cea0:	e7af      	b.n	800ce02 <_malloc_r+0x22>
 800cea2:	6862      	ldr	r2, [r4, #4]
 800cea4:	42a3      	cmp	r3, r4
 800cea6:	bf0c      	ite	eq
 800cea8:	f8c8 2000 	streq.w	r2, [r8]
 800ceac:	605a      	strne	r2, [r3, #4]
 800ceae:	e7eb      	b.n	800ce88 <_malloc_r+0xa8>
 800ceb0:	4623      	mov	r3, r4
 800ceb2:	6864      	ldr	r4, [r4, #4]
 800ceb4:	e7ae      	b.n	800ce14 <_malloc_r+0x34>
 800ceb6:	463c      	mov	r4, r7
 800ceb8:	687f      	ldr	r7, [r7, #4]
 800ceba:	e7b6      	b.n	800ce2a <_malloc_r+0x4a>
 800cebc:	461a      	mov	r2, r3
 800cebe:	685b      	ldr	r3, [r3, #4]
 800cec0:	42a3      	cmp	r3, r4
 800cec2:	d1fb      	bne.n	800cebc <_malloc_r+0xdc>
 800cec4:	2300      	movs	r3, #0
 800cec6:	6053      	str	r3, [r2, #4]
 800cec8:	e7de      	b.n	800ce88 <_malloc_r+0xa8>
 800ceca:	230c      	movs	r3, #12
 800cecc:	6033      	str	r3, [r6, #0]
 800cece:	4630      	mov	r0, r6
 800ced0:	f000 f80c 	bl	800ceec <__malloc_unlock>
 800ced4:	e794      	b.n	800ce00 <_malloc_r+0x20>
 800ced6:	6005      	str	r5, [r0, #0]
 800ced8:	e7d6      	b.n	800ce88 <_malloc_r+0xa8>
 800ceda:	bf00      	nop
 800cedc:	2000f148 	.word	0x2000f148

0800cee0 <__malloc_lock>:
 800cee0:	4801      	ldr	r0, [pc, #4]	@ (800cee8 <__malloc_lock+0x8>)
 800cee2:	f7ff b87c 	b.w	800bfde <__retarget_lock_acquire_recursive>
 800cee6:	bf00      	nop
 800cee8:	2000f140 	.word	0x2000f140

0800ceec <__malloc_unlock>:
 800ceec:	4801      	ldr	r0, [pc, #4]	@ (800cef4 <__malloc_unlock+0x8>)
 800ceee:	f7ff b877 	b.w	800bfe0 <__retarget_lock_release_recursive>
 800cef2:	bf00      	nop
 800cef4:	2000f140 	.word	0x2000f140

0800cef8 <_Balloc>:
 800cef8:	b570      	push	{r4, r5, r6, lr}
 800cefa:	69c6      	ldr	r6, [r0, #28]
 800cefc:	4604      	mov	r4, r0
 800cefe:	460d      	mov	r5, r1
 800cf00:	b976      	cbnz	r6, 800cf20 <_Balloc+0x28>
 800cf02:	2010      	movs	r0, #16
 800cf04:	f7ff ff42 	bl	800cd8c <malloc>
 800cf08:	4602      	mov	r2, r0
 800cf0a:	61e0      	str	r0, [r4, #28]
 800cf0c:	b920      	cbnz	r0, 800cf18 <_Balloc+0x20>
 800cf0e:	4b18      	ldr	r3, [pc, #96]	@ (800cf70 <_Balloc+0x78>)
 800cf10:	4818      	ldr	r0, [pc, #96]	@ (800cf74 <_Balloc+0x7c>)
 800cf12:	216b      	movs	r1, #107	@ 0x6b
 800cf14:	f7ff f87a 	bl	800c00c <__assert_func>
 800cf18:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800cf1c:	6006      	str	r6, [r0, #0]
 800cf1e:	60c6      	str	r6, [r0, #12]
 800cf20:	69e6      	ldr	r6, [r4, #28]
 800cf22:	68f3      	ldr	r3, [r6, #12]
 800cf24:	b183      	cbz	r3, 800cf48 <_Balloc+0x50>
 800cf26:	69e3      	ldr	r3, [r4, #28]
 800cf28:	68db      	ldr	r3, [r3, #12]
 800cf2a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800cf2e:	b9b8      	cbnz	r0, 800cf60 <_Balloc+0x68>
 800cf30:	2101      	movs	r1, #1
 800cf32:	fa01 f605 	lsl.w	r6, r1, r5
 800cf36:	1d72      	adds	r2, r6, #5
 800cf38:	0092      	lsls	r2, r2, #2
 800cf3a:	4620      	mov	r0, r4
 800cf3c:	f001 ff33 	bl	800eda6 <_calloc_r>
 800cf40:	b160      	cbz	r0, 800cf5c <_Balloc+0x64>
 800cf42:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800cf46:	e00e      	b.n	800cf66 <_Balloc+0x6e>
 800cf48:	2221      	movs	r2, #33	@ 0x21
 800cf4a:	2104      	movs	r1, #4
 800cf4c:	4620      	mov	r0, r4
 800cf4e:	f001 ff2a 	bl	800eda6 <_calloc_r>
 800cf52:	69e3      	ldr	r3, [r4, #28]
 800cf54:	60f0      	str	r0, [r6, #12]
 800cf56:	68db      	ldr	r3, [r3, #12]
 800cf58:	2b00      	cmp	r3, #0
 800cf5a:	d1e4      	bne.n	800cf26 <_Balloc+0x2e>
 800cf5c:	2000      	movs	r0, #0
 800cf5e:	bd70      	pop	{r4, r5, r6, pc}
 800cf60:	6802      	ldr	r2, [r0, #0]
 800cf62:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800cf66:	2300      	movs	r3, #0
 800cf68:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800cf6c:	e7f7      	b.n	800cf5e <_Balloc+0x66>
 800cf6e:	bf00      	nop
 800cf70:	08010d4a 	.word	0x08010d4a
 800cf74:	08010dca 	.word	0x08010dca

0800cf78 <_Bfree>:
 800cf78:	b570      	push	{r4, r5, r6, lr}
 800cf7a:	69c6      	ldr	r6, [r0, #28]
 800cf7c:	4605      	mov	r5, r0
 800cf7e:	460c      	mov	r4, r1
 800cf80:	b976      	cbnz	r6, 800cfa0 <_Bfree+0x28>
 800cf82:	2010      	movs	r0, #16
 800cf84:	f7ff ff02 	bl	800cd8c <malloc>
 800cf88:	4602      	mov	r2, r0
 800cf8a:	61e8      	str	r0, [r5, #28]
 800cf8c:	b920      	cbnz	r0, 800cf98 <_Bfree+0x20>
 800cf8e:	4b09      	ldr	r3, [pc, #36]	@ (800cfb4 <_Bfree+0x3c>)
 800cf90:	4809      	ldr	r0, [pc, #36]	@ (800cfb8 <_Bfree+0x40>)
 800cf92:	218f      	movs	r1, #143	@ 0x8f
 800cf94:	f7ff f83a 	bl	800c00c <__assert_func>
 800cf98:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800cf9c:	6006      	str	r6, [r0, #0]
 800cf9e:	60c6      	str	r6, [r0, #12]
 800cfa0:	b13c      	cbz	r4, 800cfb2 <_Bfree+0x3a>
 800cfa2:	69eb      	ldr	r3, [r5, #28]
 800cfa4:	6862      	ldr	r2, [r4, #4]
 800cfa6:	68db      	ldr	r3, [r3, #12]
 800cfa8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800cfac:	6021      	str	r1, [r4, #0]
 800cfae:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800cfb2:	bd70      	pop	{r4, r5, r6, pc}
 800cfb4:	08010d4a 	.word	0x08010d4a
 800cfb8:	08010dca 	.word	0x08010dca

0800cfbc <__multadd>:
 800cfbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cfc0:	690d      	ldr	r5, [r1, #16]
 800cfc2:	4607      	mov	r7, r0
 800cfc4:	460c      	mov	r4, r1
 800cfc6:	461e      	mov	r6, r3
 800cfc8:	f101 0c14 	add.w	ip, r1, #20
 800cfcc:	2000      	movs	r0, #0
 800cfce:	f8dc 3000 	ldr.w	r3, [ip]
 800cfd2:	b299      	uxth	r1, r3
 800cfd4:	fb02 6101 	mla	r1, r2, r1, r6
 800cfd8:	0c1e      	lsrs	r6, r3, #16
 800cfda:	0c0b      	lsrs	r3, r1, #16
 800cfdc:	fb02 3306 	mla	r3, r2, r6, r3
 800cfe0:	b289      	uxth	r1, r1
 800cfe2:	3001      	adds	r0, #1
 800cfe4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800cfe8:	4285      	cmp	r5, r0
 800cfea:	f84c 1b04 	str.w	r1, [ip], #4
 800cfee:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800cff2:	dcec      	bgt.n	800cfce <__multadd+0x12>
 800cff4:	b30e      	cbz	r6, 800d03a <__multadd+0x7e>
 800cff6:	68a3      	ldr	r3, [r4, #8]
 800cff8:	42ab      	cmp	r3, r5
 800cffa:	dc19      	bgt.n	800d030 <__multadd+0x74>
 800cffc:	6861      	ldr	r1, [r4, #4]
 800cffe:	4638      	mov	r0, r7
 800d000:	3101      	adds	r1, #1
 800d002:	f7ff ff79 	bl	800cef8 <_Balloc>
 800d006:	4680      	mov	r8, r0
 800d008:	b928      	cbnz	r0, 800d016 <__multadd+0x5a>
 800d00a:	4602      	mov	r2, r0
 800d00c:	4b0c      	ldr	r3, [pc, #48]	@ (800d040 <__multadd+0x84>)
 800d00e:	480d      	ldr	r0, [pc, #52]	@ (800d044 <__multadd+0x88>)
 800d010:	21ba      	movs	r1, #186	@ 0xba
 800d012:	f7fe fffb 	bl	800c00c <__assert_func>
 800d016:	6922      	ldr	r2, [r4, #16]
 800d018:	3202      	adds	r2, #2
 800d01a:	f104 010c 	add.w	r1, r4, #12
 800d01e:	0092      	lsls	r2, r2, #2
 800d020:	300c      	adds	r0, #12
 800d022:	f7fe ffde 	bl	800bfe2 <memcpy>
 800d026:	4621      	mov	r1, r4
 800d028:	4638      	mov	r0, r7
 800d02a:	f7ff ffa5 	bl	800cf78 <_Bfree>
 800d02e:	4644      	mov	r4, r8
 800d030:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800d034:	3501      	adds	r5, #1
 800d036:	615e      	str	r6, [r3, #20]
 800d038:	6125      	str	r5, [r4, #16]
 800d03a:	4620      	mov	r0, r4
 800d03c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d040:	08010db9 	.word	0x08010db9
 800d044:	08010dca 	.word	0x08010dca

0800d048 <__s2b>:
 800d048:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d04c:	460c      	mov	r4, r1
 800d04e:	4615      	mov	r5, r2
 800d050:	461f      	mov	r7, r3
 800d052:	2209      	movs	r2, #9
 800d054:	3308      	adds	r3, #8
 800d056:	4606      	mov	r6, r0
 800d058:	fb93 f3f2 	sdiv	r3, r3, r2
 800d05c:	2100      	movs	r1, #0
 800d05e:	2201      	movs	r2, #1
 800d060:	429a      	cmp	r2, r3
 800d062:	db09      	blt.n	800d078 <__s2b+0x30>
 800d064:	4630      	mov	r0, r6
 800d066:	f7ff ff47 	bl	800cef8 <_Balloc>
 800d06a:	b940      	cbnz	r0, 800d07e <__s2b+0x36>
 800d06c:	4602      	mov	r2, r0
 800d06e:	4b19      	ldr	r3, [pc, #100]	@ (800d0d4 <__s2b+0x8c>)
 800d070:	4819      	ldr	r0, [pc, #100]	@ (800d0d8 <__s2b+0x90>)
 800d072:	21d3      	movs	r1, #211	@ 0xd3
 800d074:	f7fe ffca 	bl	800c00c <__assert_func>
 800d078:	0052      	lsls	r2, r2, #1
 800d07a:	3101      	adds	r1, #1
 800d07c:	e7f0      	b.n	800d060 <__s2b+0x18>
 800d07e:	9b08      	ldr	r3, [sp, #32]
 800d080:	6143      	str	r3, [r0, #20]
 800d082:	2d09      	cmp	r5, #9
 800d084:	f04f 0301 	mov.w	r3, #1
 800d088:	6103      	str	r3, [r0, #16]
 800d08a:	dd16      	ble.n	800d0ba <__s2b+0x72>
 800d08c:	f104 0909 	add.w	r9, r4, #9
 800d090:	46c8      	mov	r8, r9
 800d092:	442c      	add	r4, r5
 800d094:	f818 3b01 	ldrb.w	r3, [r8], #1
 800d098:	4601      	mov	r1, r0
 800d09a:	3b30      	subs	r3, #48	@ 0x30
 800d09c:	220a      	movs	r2, #10
 800d09e:	4630      	mov	r0, r6
 800d0a0:	f7ff ff8c 	bl	800cfbc <__multadd>
 800d0a4:	45a0      	cmp	r8, r4
 800d0a6:	d1f5      	bne.n	800d094 <__s2b+0x4c>
 800d0a8:	f1a5 0408 	sub.w	r4, r5, #8
 800d0ac:	444c      	add	r4, r9
 800d0ae:	1b2d      	subs	r5, r5, r4
 800d0b0:	1963      	adds	r3, r4, r5
 800d0b2:	42bb      	cmp	r3, r7
 800d0b4:	db04      	blt.n	800d0c0 <__s2b+0x78>
 800d0b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d0ba:	340a      	adds	r4, #10
 800d0bc:	2509      	movs	r5, #9
 800d0be:	e7f6      	b.n	800d0ae <__s2b+0x66>
 800d0c0:	f814 3b01 	ldrb.w	r3, [r4], #1
 800d0c4:	4601      	mov	r1, r0
 800d0c6:	3b30      	subs	r3, #48	@ 0x30
 800d0c8:	220a      	movs	r2, #10
 800d0ca:	4630      	mov	r0, r6
 800d0cc:	f7ff ff76 	bl	800cfbc <__multadd>
 800d0d0:	e7ee      	b.n	800d0b0 <__s2b+0x68>
 800d0d2:	bf00      	nop
 800d0d4:	08010db9 	.word	0x08010db9
 800d0d8:	08010dca 	.word	0x08010dca

0800d0dc <__hi0bits>:
 800d0dc:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800d0e0:	4603      	mov	r3, r0
 800d0e2:	bf36      	itet	cc
 800d0e4:	0403      	lslcc	r3, r0, #16
 800d0e6:	2000      	movcs	r0, #0
 800d0e8:	2010      	movcc	r0, #16
 800d0ea:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800d0ee:	bf3c      	itt	cc
 800d0f0:	021b      	lslcc	r3, r3, #8
 800d0f2:	3008      	addcc	r0, #8
 800d0f4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800d0f8:	bf3c      	itt	cc
 800d0fa:	011b      	lslcc	r3, r3, #4
 800d0fc:	3004      	addcc	r0, #4
 800d0fe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d102:	bf3c      	itt	cc
 800d104:	009b      	lslcc	r3, r3, #2
 800d106:	3002      	addcc	r0, #2
 800d108:	2b00      	cmp	r3, #0
 800d10a:	db05      	blt.n	800d118 <__hi0bits+0x3c>
 800d10c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800d110:	f100 0001 	add.w	r0, r0, #1
 800d114:	bf08      	it	eq
 800d116:	2020      	moveq	r0, #32
 800d118:	4770      	bx	lr

0800d11a <__lo0bits>:
 800d11a:	6803      	ldr	r3, [r0, #0]
 800d11c:	4602      	mov	r2, r0
 800d11e:	f013 0007 	ands.w	r0, r3, #7
 800d122:	d00b      	beq.n	800d13c <__lo0bits+0x22>
 800d124:	07d9      	lsls	r1, r3, #31
 800d126:	d421      	bmi.n	800d16c <__lo0bits+0x52>
 800d128:	0798      	lsls	r0, r3, #30
 800d12a:	bf49      	itett	mi
 800d12c:	085b      	lsrmi	r3, r3, #1
 800d12e:	089b      	lsrpl	r3, r3, #2
 800d130:	2001      	movmi	r0, #1
 800d132:	6013      	strmi	r3, [r2, #0]
 800d134:	bf5c      	itt	pl
 800d136:	6013      	strpl	r3, [r2, #0]
 800d138:	2002      	movpl	r0, #2
 800d13a:	4770      	bx	lr
 800d13c:	b299      	uxth	r1, r3
 800d13e:	b909      	cbnz	r1, 800d144 <__lo0bits+0x2a>
 800d140:	0c1b      	lsrs	r3, r3, #16
 800d142:	2010      	movs	r0, #16
 800d144:	b2d9      	uxtb	r1, r3
 800d146:	b909      	cbnz	r1, 800d14c <__lo0bits+0x32>
 800d148:	3008      	adds	r0, #8
 800d14a:	0a1b      	lsrs	r3, r3, #8
 800d14c:	0719      	lsls	r1, r3, #28
 800d14e:	bf04      	itt	eq
 800d150:	091b      	lsreq	r3, r3, #4
 800d152:	3004      	addeq	r0, #4
 800d154:	0799      	lsls	r1, r3, #30
 800d156:	bf04      	itt	eq
 800d158:	089b      	lsreq	r3, r3, #2
 800d15a:	3002      	addeq	r0, #2
 800d15c:	07d9      	lsls	r1, r3, #31
 800d15e:	d403      	bmi.n	800d168 <__lo0bits+0x4e>
 800d160:	085b      	lsrs	r3, r3, #1
 800d162:	f100 0001 	add.w	r0, r0, #1
 800d166:	d003      	beq.n	800d170 <__lo0bits+0x56>
 800d168:	6013      	str	r3, [r2, #0]
 800d16a:	4770      	bx	lr
 800d16c:	2000      	movs	r0, #0
 800d16e:	4770      	bx	lr
 800d170:	2020      	movs	r0, #32
 800d172:	4770      	bx	lr

0800d174 <__i2b>:
 800d174:	b510      	push	{r4, lr}
 800d176:	460c      	mov	r4, r1
 800d178:	2101      	movs	r1, #1
 800d17a:	f7ff febd 	bl	800cef8 <_Balloc>
 800d17e:	4602      	mov	r2, r0
 800d180:	b928      	cbnz	r0, 800d18e <__i2b+0x1a>
 800d182:	4b05      	ldr	r3, [pc, #20]	@ (800d198 <__i2b+0x24>)
 800d184:	4805      	ldr	r0, [pc, #20]	@ (800d19c <__i2b+0x28>)
 800d186:	f240 1145 	movw	r1, #325	@ 0x145
 800d18a:	f7fe ff3f 	bl	800c00c <__assert_func>
 800d18e:	2301      	movs	r3, #1
 800d190:	6144      	str	r4, [r0, #20]
 800d192:	6103      	str	r3, [r0, #16]
 800d194:	bd10      	pop	{r4, pc}
 800d196:	bf00      	nop
 800d198:	08010db9 	.word	0x08010db9
 800d19c:	08010dca 	.word	0x08010dca

0800d1a0 <__multiply>:
 800d1a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d1a4:	4617      	mov	r7, r2
 800d1a6:	690a      	ldr	r2, [r1, #16]
 800d1a8:	693b      	ldr	r3, [r7, #16]
 800d1aa:	429a      	cmp	r2, r3
 800d1ac:	bfa8      	it	ge
 800d1ae:	463b      	movge	r3, r7
 800d1b0:	4689      	mov	r9, r1
 800d1b2:	bfa4      	itt	ge
 800d1b4:	460f      	movge	r7, r1
 800d1b6:	4699      	movge	r9, r3
 800d1b8:	693d      	ldr	r5, [r7, #16]
 800d1ba:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800d1be:	68bb      	ldr	r3, [r7, #8]
 800d1c0:	6879      	ldr	r1, [r7, #4]
 800d1c2:	eb05 060a 	add.w	r6, r5, sl
 800d1c6:	42b3      	cmp	r3, r6
 800d1c8:	b085      	sub	sp, #20
 800d1ca:	bfb8      	it	lt
 800d1cc:	3101      	addlt	r1, #1
 800d1ce:	f7ff fe93 	bl	800cef8 <_Balloc>
 800d1d2:	b930      	cbnz	r0, 800d1e2 <__multiply+0x42>
 800d1d4:	4602      	mov	r2, r0
 800d1d6:	4b41      	ldr	r3, [pc, #260]	@ (800d2dc <__multiply+0x13c>)
 800d1d8:	4841      	ldr	r0, [pc, #260]	@ (800d2e0 <__multiply+0x140>)
 800d1da:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800d1de:	f7fe ff15 	bl	800c00c <__assert_func>
 800d1e2:	f100 0414 	add.w	r4, r0, #20
 800d1e6:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800d1ea:	4623      	mov	r3, r4
 800d1ec:	2200      	movs	r2, #0
 800d1ee:	4573      	cmp	r3, lr
 800d1f0:	d320      	bcc.n	800d234 <__multiply+0x94>
 800d1f2:	f107 0814 	add.w	r8, r7, #20
 800d1f6:	f109 0114 	add.w	r1, r9, #20
 800d1fa:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800d1fe:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800d202:	9302      	str	r3, [sp, #8]
 800d204:	1beb      	subs	r3, r5, r7
 800d206:	3b15      	subs	r3, #21
 800d208:	f023 0303 	bic.w	r3, r3, #3
 800d20c:	3304      	adds	r3, #4
 800d20e:	3715      	adds	r7, #21
 800d210:	42bd      	cmp	r5, r7
 800d212:	bf38      	it	cc
 800d214:	2304      	movcc	r3, #4
 800d216:	9301      	str	r3, [sp, #4]
 800d218:	9b02      	ldr	r3, [sp, #8]
 800d21a:	9103      	str	r1, [sp, #12]
 800d21c:	428b      	cmp	r3, r1
 800d21e:	d80c      	bhi.n	800d23a <__multiply+0x9a>
 800d220:	2e00      	cmp	r6, #0
 800d222:	dd03      	ble.n	800d22c <__multiply+0x8c>
 800d224:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800d228:	2b00      	cmp	r3, #0
 800d22a:	d055      	beq.n	800d2d8 <__multiply+0x138>
 800d22c:	6106      	str	r6, [r0, #16]
 800d22e:	b005      	add	sp, #20
 800d230:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d234:	f843 2b04 	str.w	r2, [r3], #4
 800d238:	e7d9      	b.n	800d1ee <__multiply+0x4e>
 800d23a:	f8b1 a000 	ldrh.w	sl, [r1]
 800d23e:	f1ba 0f00 	cmp.w	sl, #0
 800d242:	d01f      	beq.n	800d284 <__multiply+0xe4>
 800d244:	46c4      	mov	ip, r8
 800d246:	46a1      	mov	r9, r4
 800d248:	2700      	movs	r7, #0
 800d24a:	f85c 2b04 	ldr.w	r2, [ip], #4
 800d24e:	f8d9 3000 	ldr.w	r3, [r9]
 800d252:	fa1f fb82 	uxth.w	fp, r2
 800d256:	b29b      	uxth	r3, r3
 800d258:	fb0a 330b 	mla	r3, sl, fp, r3
 800d25c:	443b      	add	r3, r7
 800d25e:	f8d9 7000 	ldr.w	r7, [r9]
 800d262:	0c12      	lsrs	r2, r2, #16
 800d264:	0c3f      	lsrs	r7, r7, #16
 800d266:	fb0a 7202 	mla	r2, sl, r2, r7
 800d26a:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800d26e:	b29b      	uxth	r3, r3
 800d270:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d274:	4565      	cmp	r5, ip
 800d276:	f849 3b04 	str.w	r3, [r9], #4
 800d27a:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800d27e:	d8e4      	bhi.n	800d24a <__multiply+0xaa>
 800d280:	9b01      	ldr	r3, [sp, #4]
 800d282:	50e7      	str	r7, [r4, r3]
 800d284:	9b03      	ldr	r3, [sp, #12]
 800d286:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800d28a:	3104      	adds	r1, #4
 800d28c:	f1b9 0f00 	cmp.w	r9, #0
 800d290:	d020      	beq.n	800d2d4 <__multiply+0x134>
 800d292:	6823      	ldr	r3, [r4, #0]
 800d294:	4647      	mov	r7, r8
 800d296:	46a4      	mov	ip, r4
 800d298:	f04f 0a00 	mov.w	sl, #0
 800d29c:	f8b7 b000 	ldrh.w	fp, [r7]
 800d2a0:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800d2a4:	fb09 220b 	mla	r2, r9, fp, r2
 800d2a8:	4452      	add	r2, sl
 800d2aa:	b29b      	uxth	r3, r3
 800d2ac:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d2b0:	f84c 3b04 	str.w	r3, [ip], #4
 800d2b4:	f857 3b04 	ldr.w	r3, [r7], #4
 800d2b8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800d2bc:	f8bc 3000 	ldrh.w	r3, [ip]
 800d2c0:	fb09 330a 	mla	r3, r9, sl, r3
 800d2c4:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 800d2c8:	42bd      	cmp	r5, r7
 800d2ca:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800d2ce:	d8e5      	bhi.n	800d29c <__multiply+0xfc>
 800d2d0:	9a01      	ldr	r2, [sp, #4]
 800d2d2:	50a3      	str	r3, [r4, r2]
 800d2d4:	3404      	adds	r4, #4
 800d2d6:	e79f      	b.n	800d218 <__multiply+0x78>
 800d2d8:	3e01      	subs	r6, #1
 800d2da:	e7a1      	b.n	800d220 <__multiply+0x80>
 800d2dc:	08010db9 	.word	0x08010db9
 800d2e0:	08010dca 	.word	0x08010dca

0800d2e4 <__pow5mult>:
 800d2e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d2e8:	4615      	mov	r5, r2
 800d2ea:	f012 0203 	ands.w	r2, r2, #3
 800d2ee:	4607      	mov	r7, r0
 800d2f0:	460e      	mov	r6, r1
 800d2f2:	d007      	beq.n	800d304 <__pow5mult+0x20>
 800d2f4:	4c25      	ldr	r4, [pc, #148]	@ (800d38c <__pow5mult+0xa8>)
 800d2f6:	3a01      	subs	r2, #1
 800d2f8:	2300      	movs	r3, #0
 800d2fa:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800d2fe:	f7ff fe5d 	bl	800cfbc <__multadd>
 800d302:	4606      	mov	r6, r0
 800d304:	10ad      	asrs	r5, r5, #2
 800d306:	d03d      	beq.n	800d384 <__pow5mult+0xa0>
 800d308:	69fc      	ldr	r4, [r7, #28]
 800d30a:	b97c      	cbnz	r4, 800d32c <__pow5mult+0x48>
 800d30c:	2010      	movs	r0, #16
 800d30e:	f7ff fd3d 	bl	800cd8c <malloc>
 800d312:	4602      	mov	r2, r0
 800d314:	61f8      	str	r0, [r7, #28]
 800d316:	b928      	cbnz	r0, 800d324 <__pow5mult+0x40>
 800d318:	4b1d      	ldr	r3, [pc, #116]	@ (800d390 <__pow5mult+0xac>)
 800d31a:	481e      	ldr	r0, [pc, #120]	@ (800d394 <__pow5mult+0xb0>)
 800d31c:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800d320:	f7fe fe74 	bl	800c00c <__assert_func>
 800d324:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800d328:	6004      	str	r4, [r0, #0]
 800d32a:	60c4      	str	r4, [r0, #12]
 800d32c:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800d330:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800d334:	b94c      	cbnz	r4, 800d34a <__pow5mult+0x66>
 800d336:	f240 2171 	movw	r1, #625	@ 0x271
 800d33a:	4638      	mov	r0, r7
 800d33c:	f7ff ff1a 	bl	800d174 <__i2b>
 800d340:	2300      	movs	r3, #0
 800d342:	f8c8 0008 	str.w	r0, [r8, #8]
 800d346:	4604      	mov	r4, r0
 800d348:	6003      	str	r3, [r0, #0]
 800d34a:	f04f 0900 	mov.w	r9, #0
 800d34e:	07eb      	lsls	r3, r5, #31
 800d350:	d50a      	bpl.n	800d368 <__pow5mult+0x84>
 800d352:	4631      	mov	r1, r6
 800d354:	4622      	mov	r2, r4
 800d356:	4638      	mov	r0, r7
 800d358:	f7ff ff22 	bl	800d1a0 <__multiply>
 800d35c:	4631      	mov	r1, r6
 800d35e:	4680      	mov	r8, r0
 800d360:	4638      	mov	r0, r7
 800d362:	f7ff fe09 	bl	800cf78 <_Bfree>
 800d366:	4646      	mov	r6, r8
 800d368:	106d      	asrs	r5, r5, #1
 800d36a:	d00b      	beq.n	800d384 <__pow5mult+0xa0>
 800d36c:	6820      	ldr	r0, [r4, #0]
 800d36e:	b938      	cbnz	r0, 800d380 <__pow5mult+0x9c>
 800d370:	4622      	mov	r2, r4
 800d372:	4621      	mov	r1, r4
 800d374:	4638      	mov	r0, r7
 800d376:	f7ff ff13 	bl	800d1a0 <__multiply>
 800d37a:	6020      	str	r0, [r4, #0]
 800d37c:	f8c0 9000 	str.w	r9, [r0]
 800d380:	4604      	mov	r4, r0
 800d382:	e7e4      	b.n	800d34e <__pow5mult+0x6a>
 800d384:	4630      	mov	r0, r6
 800d386:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d38a:	bf00      	nop
 800d38c:	08010ea0 	.word	0x08010ea0
 800d390:	08010d4a 	.word	0x08010d4a
 800d394:	08010dca 	.word	0x08010dca

0800d398 <__lshift>:
 800d398:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d39c:	460c      	mov	r4, r1
 800d39e:	6849      	ldr	r1, [r1, #4]
 800d3a0:	6923      	ldr	r3, [r4, #16]
 800d3a2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800d3a6:	68a3      	ldr	r3, [r4, #8]
 800d3a8:	4607      	mov	r7, r0
 800d3aa:	4691      	mov	r9, r2
 800d3ac:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800d3b0:	f108 0601 	add.w	r6, r8, #1
 800d3b4:	42b3      	cmp	r3, r6
 800d3b6:	db0b      	blt.n	800d3d0 <__lshift+0x38>
 800d3b8:	4638      	mov	r0, r7
 800d3ba:	f7ff fd9d 	bl	800cef8 <_Balloc>
 800d3be:	4605      	mov	r5, r0
 800d3c0:	b948      	cbnz	r0, 800d3d6 <__lshift+0x3e>
 800d3c2:	4602      	mov	r2, r0
 800d3c4:	4b28      	ldr	r3, [pc, #160]	@ (800d468 <__lshift+0xd0>)
 800d3c6:	4829      	ldr	r0, [pc, #164]	@ (800d46c <__lshift+0xd4>)
 800d3c8:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800d3cc:	f7fe fe1e 	bl	800c00c <__assert_func>
 800d3d0:	3101      	adds	r1, #1
 800d3d2:	005b      	lsls	r3, r3, #1
 800d3d4:	e7ee      	b.n	800d3b4 <__lshift+0x1c>
 800d3d6:	2300      	movs	r3, #0
 800d3d8:	f100 0114 	add.w	r1, r0, #20
 800d3dc:	f100 0210 	add.w	r2, r0, #16
 800d3e0:	4618      	mov	r0, r3
 800d3e2:	4553      	cmp	r3, sl
 800d3e4:	db33      	blt.n	800d44e <__lshift+0xb6>
 800d3e6:	6920      	ldr	r0, [r4, #16]
 800d3e8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800d3ec:	f104 0314 	add.w	r3, r4, #20
 800d3f0:	f019 091f 	ands.w	r9, r9, #31
 800d3f4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800d3f8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800d3fc:	d02b      	beq.n	800d456 <__lshift+0xbe>
 800d3fe:	f1c9 0e20 	rsb	lr, r9, #32
 800d402:	468a      	mov	sl, r1
 800d404:	2200      	movs	r2, #0
 800d406:	6818      	ldr	r0, [r3, #0]
 800d408:	fa00 f009 	lsl.w	r0, r0, r9
 800d40c:	4310      	orrs	r0, r2
 800d40e:	f84a 0b04 	str.w	r0, [sl], #4
 800d412:	f853 2b04 	ldr.w	r2, [r3], #4
 800d416:	459c      	cmp	ip, r3
 800d418:	fa22 f20e 	lsr.w	r2, r2, lr
 800d41c:	d8f3      	bhi.n	800d406 <__lshift+0x6e>
 800d41e:	ebac 0304 	sub.w	r3, ip, r4
 800d422:	3b15      	subs	r3, #21
 800d424:	f023 0303 	bic.w	r3, r3, #3
 800d428:	3304      	adds	r3, #4
 800d42a:	f104 0015 	add.w	r0, r4, #21
 800d42e:	4560      	cmp	r0, ip
 800d430:	bf88      	it	hi
 800d432:	2304      	movhi	r3, #4
 800d434:	50ca      	str	r2, [r1, r3]
 800d436:	b10a      	cbz	r2, 800d43c <__lshift+0xa4>
 800d438:	f108 0602 	add.w	r6, r8, #2
 800d43c:	3e01      	subs	r6, #1
 800d43e:	4638      	mov	r0, r7
 800d440:	612e      	str	r6, [r5, #16]
 800d442:	4621      	mov	r1, r4
 800d444:	f7ff fd98 	bl	800cf78 <_Bfree>
 800d448:	4628      	mov	r0, r5
 800d44a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d44e:	f842 0f04 	str.w	r0, [r2, #4]!
 800d452:	3301      	adds	r3, #1
 800d454:	e7c5      	b.n	800d3e2 <__lshift+0x4a>
 800d456:	3904      	subs	r1, #4
 800d458:	f853 2b04 	ldr.w	r2, [r3], #4
 800d45c:	f841 2f04 	str.w	r2, [r1, #4]!
 800d460:	459c      	cmp	ip, r3
 800d462:	d8f9      	bhi.n	800d458 <__lshift+0xc0>
 800d464:	e7ea      	b.n	800d43c <__lshift+0xa4>
 800d466:	bf00      	nop
 800d468:	08010db9 	.word	0x08010db9
 800d46c:	08010dca 	.word	0x08010dca

0800d470 <__mcmp>:
 800d470:	690a      	ldr	r2, [r1, #16]
 800d472:	4603      	mov	r3, r0
 800d474:	6900      	ldr	r0, [r0, #16]
 800d476:	1a80      	subs	r0, r0, r2
 800d478:	b530      	push	{r4, r5, lr}
 800d47a:	d10e      	bne.n	800d49a <__mcmp+0x2a>
 800d47c:	3314      	adds	r3, #20
 800d47e:	3114      	adds	r1, #20
 800d480:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800d484:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800d488:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800d48c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800d490:	4295      	cmp	r5, r2
 800d492:	d003      	beq.n	800d49c <__mcmp+0x2c>
 800d494:	d205      	bcs.n	800d4a2 <__mcmp+0x32>
 800d496:	f04f 30ff 	mov.w	r0, #4294967295
 800d49a:	bd30      	pop	{r4, r5, pc}
 800d49c:	42a3      	cmp	r3, r4
 800d49e:	d3f3      	bcc.n	800d488 <__mcmp+0x18>
 800d4a0:	e7fb      	b.n	800d49a <__mcmp+0x2a>
 800d4a2:	2001      	movs	r0, #1
 800d4a4:	e7f9      	b.n	800d49a <__mcmp+0x2a>
	...

0800d4a8 <__mdiff>:
 800d4a8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d4ac:	4689      	mov	r9, r1
 800d4ae:	4606      	mov	r6, r0
 800d4b0:	4611      	mov	r1, r2
 800d4b2:	4648      	mov	r0, r9
 800d4b4:	4614      	mov	r4, r2
 800d4b6:	f7ff ffdb 	bl	800d470 <__mcmp>
 800d4ba:	1e05      	subs	r5, r0, #0
 800d4bc:	d112      	bne.n	800d4e4 <__mdiff+0x3c>
 800d4be:	4629      	mov	r1, r5
 800d4c0:	4630      	mov	r0, r6
 800d4c2:	f7ff fd19 	bl	800cef8 <_Balloc>
 800d4c6:	4602      	mov	r2, r0
 800d4c8:	b928      	cbnz	r0, 800d4d6 <__mdiff+0x2e>
 800d4ca:	4b3f      	ldr	r3, [pc, #252]	@ (800d5c8 <__mdiff+0x120>)
 800d4cc:	f240 2137 	movw	r1, #567	@ 0x237
 800d4d0:	483e      	ldr	r0, [pc, #248]	@ (800d5cc <__mdiff+0x124>)
 800d4d2:	f7fe fd9b 	bl	800c00c <__assert_func>
 800d4d6:	2301      	movs	r3, #1
 800d4d8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800d4dc:	4610      	mov	r0, r2
 800d4de:	b003      	add	sp, #12
 800d4e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d4e4:	bfbc      	itt	lt
 800d4e6:	464b      	movlt	r3, r9
 800d4e8:	46a1      	movlt	r9, r4
 800d4ea:	4630      	mov	r0, r6
 800d4ec:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800d4f0:	bfba      	itte	lt
 800d4f2:	461c      	movlt	r4, r3
 800d4f4:	2501      	movlt	r5, #1
 800d4f6:	2500      	movge	r5, #0
 800d4f8:	f7ff fcfe 	bl	800cef8 <_Balloc>
 800d4fc:	4602      	mov	r2, r0
 800d4fe:	b918      	cbnz	r0, 800d508 <__mdiff+0x60>
 800d500:	4b31      	ldr	r3, [pc, #196]	@ (800d5c8 <__mdiff+0x120>)
 800d502:	f240 2145 	movw	r1, #581	@ 0x245
 800d506:	e7e3      	b.n	800d4d0 <__mdiff+0x28>
 800d508:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800d50c:	6926      	ldr	r6, [r4, #16]
 800d50e:	60c5      	str	r5, [r0, #12]
 800d510:	f109 0310 	add.w	r3, r9, #16
 800d514:	f109 0514 	add.w	r5, r9, #20
 800d518:	f104 0e14 	add.w	lr, r4, #20
 800d51c:	f100 0b14 	add.w	fp, r0, #20
 800d520:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800d524:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800d528:	9301      	str	r3, [sp, #4]
 800d52a:	46d9      	mov	r9, fp
 800d52c:	f04f 0c00 	mov.w	ip, #0
 800d530:	9b01      	ldr	r3, [sp, #4]
 800d532:	f85e 0b04 	ldr.w	r0, [lr], #4
 800d536:	f853 af04 	ldr.w	sl, [r3, #4]!
 800d53a:	9301      	str	r3, [sp, #4]
 800d53c:	fa1f f38a 	uxth.w	r3, sl
 800d540:	4619      	mov	r1, r3
 800d542:	b283      	uxth	r3, r0
 800d544:	1acb      	subs	r3, r1, r3
 800d546:	0c00      	lsrs	r0, r0, #16
 800d548:	4463      	add	r3, ip
 800d54a:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800d54e:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800d552:	b29b      	uxth	r3, r3
 800d554:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800d558:	4576      	cmp	r6, lr
 800d55a:	f849 3b04 	str.w	r3, [r9], #4
 800d55e:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800d562:	d8e5      	bhi.n	800d530 <__mdiff+0x88>
 800d564:	1b33      	subs	r3, r6, r4
 800d566:	3b15      	subs	r3, #21
 800d568:	f023 0303 	bic.w	r3, r3, #3
 800d56c:	3415      	adds	r4, #21
 800d56e:	3304      	adds	r3, #4
 800d570:	42a6      	cmp	r6, r4
 800d572:	bf38      	it	cc
 800d574:	2304      	movcc	r3, #4
 800d576:	441d      	add	r5, r3
 800d578:	445b      	add	r3, fp
 800d57a:	461e      	mov	r6, r3
 800d57c:	462c      	mov	r4, r5
 800d57e:	4544      	cmp	r4, r8
 800d580:	d30e      	bcc.n	800d5a0 <__mdiff+0xf8>
 800d582:	f108 0103 	add.w	r1, r8, #3
 800d586:	1b49      	subs	r1, r1, r5
 800d588:	f021 0103 	bic.w	r1, r1, #3
 800d58c:	3d03      	subs	r5, #3
 800d58e:	45a8      	cmp	r8, r5
 800d590:	bf38      	it	cc
 800d592:	2100      	movcc	r1, #0
 800d594:	440b      	add	r3, r1
 800d596:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800d59a:	b191      	cbz	r1, 800d5c2 <__mdiff+0x11a>
 800d59c:	6117      	str	r7, [r2, #16]
 800d59e:	e79d      	b.n	800d4dc <__mdiff+0x34>
 800d5a0:	f854 1b04 	ldr.w	r1, [r4], #4
 800d5a4:	46e6      	mov	lr, ip
 800d5a6:	0c08      	lsrs	r0, r1, #16
 800d5a8:	fa1c fc81 	uxtah	ip, ip, r1
 800d5ac:	4471      	add	r1, lr
 800d5ae:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800d5b2:	b289      	uxth	r1, r1
 800d5b4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800d5b8:	f846 1b04 	str.w	r1, [r6], #4
 800d5bc:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800d5c0:	e7dd      	b.n	800d57e <__mdiff+0xd6>
 800d5c2:	3f01      	subs	r7, #1
 800d5c4:	e7e7      	b.n	800d596 <__mdiff+0xee>
 800d5c6:	bf00      	nop
 800d5c8:	08010db9 	.word	0x08010db9
 800d5cc:	08010dca 	.word	0x08010dca

0800d5d0 <__ulp>:
 800d5d0:	b082      	sub	sp, #8
 800d5d2:	ed8d 0b00 	vstr	d0, [sp]
 800d5d6:	9a01      	ldr	r2, [sp, #4]
 800d5d8:	4b0f      	ldr	r3, [pc, #60]	@ (800d618 <__ulp+0x48>)
 800d5da:	4013      	ands	r3, r2
 800d5dc:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800d5e0:	2b00      	cmp	r3, #0
 800d5e2:	dc08      	bgt.n	800d5f6 <__ulp+0x26>
 800d5e4:	425b      	negs	r3, r3
 800d5e6:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800d5ea:	ea4f 5223 	mov.w	r2, r3, asr #20
 800d5ee:	da04      	bge.n	800d5fa <__ulp+0x2a>
 800d5f0:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800d5f4:	4113      	asrs	r3, r2
 800d5f6:	2200      	movs	r2, #0
 800d5f8:	e008      	b.n	800d60c <__ulp+0x3c>
 800d5fa:	f1a2 0314 	sub.w	r3, r2, #20
 800d5fe:	2b1e      	cmp	r3, #30
 800d600:	bfda      	itte	le
 800d602:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800d606:	40da      	lsrle	r2, r3
 800d608:	2201      	movgt	r2, #1
 800d60a:	2300      	movs	r3, #0
 800d60c:	4619      	mov	r1, r3
 800d60e:	4610      	mov	r0, r2
 800d610:	ec41 0b10 	vmov	d0, r0, r1
 800d614:	b002      	add	sp, #8
 800d616:	4770      	bx	lr
 800d618:	7ff00000 	.word	0x7ff00000

0800d61c <__b2d>:
 800d61c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d620:	6906      	ldr	r6, [r0, #16]
 800d622:	f100 0814 	add.w	r8, r0, #20
 800d626:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800d62a:	1f37      	subs	r7, r6, #4
 800d62c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800d630:	4610      	mov	r0, r2
 800d632:	f7ff fd53 	bl	800d0dc <__hi0bits>
 800d636:	f1c0 0320 	rsb	r3, r0, #32
 800d63a:	280a      	cmp	r0, #10
 800d63c:	600b      	str	r3, [r1, #0]
 800d63e:	491b      	ldr	r1, [pc, #108]	@ (800d6ac <__b2d+0x90>)
 800d640:	dc15      	bgt.n	800d66e <__b2d+0x52>
 800d642:	f1c0 0c0b 	rsb	ip, r0, #11
 800d646:	fa22 f30c 	lsr.w	r3, r2, ip
 800d64a:	45b8      	cmp	r8, r7
 800d64c:	ea43 0501 	orr.w	r5, r3, r1
 800d650:	bf34      	ite	cc
 800d652:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800d656:	2300      	movcs	r3, #0
 800d658:	3015      	adds	r0, #21
 800d65a:	fa02 f000 	lsl.w	r0, r2, r0
 800d65e:	fa23 f30c 	lsr.w	r3, r3, ip
 800d662:	4303      	orrs	r3, r0
 800d664:	461c      	mov	r4, r3
 800d666:	ec45 4b10 	vmov	d0, r4, r5
 800d66a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d66e:	45b8      	cmp	r8, r7
 800d670:	bf3a      	itte	cc
 800d672:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800d676:	f1a6 0708 	subcc.w	r7, r6, #8
 800d67a:	2300      	movcs	r3, #0
 800d67c:	380b      	subs	r0, #11
 800d67e:	d012      	beq.n	800d6a6 <__b2d+0x8a>
 800d680:	f1c0 0120 	rsb	r1, r0, #32
 800d684:	fa23 f401 	lsr.w	r4, r3, r1
 800d688:	4082      	lsls	r2, r0
 800d68a:	4322      	orrs	r2, r4
 800d68c:	4547      	cmp	r7, r8
 800d68e:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800d692:	bf8c      	ite	hi
 800d694:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800d698:	2200      	movls	r2, #0
 800d69a:	4083      	lsls	r3, r0
 800d69c:	40ca      	lsrs	r2, r1
 800d69e:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800d6a2:	4313      	orrs	r3, r2
 800d6a4:	e7de      	b.n	800d664 <__b2d+0x48>
 800d6a6:	ea42 0501 	orr.w	r5, r2, r1
 800d6aa:	e7db      	b.n	800d664 <__b2d+0x48>
 800d6ac:	3ff00000 	.word	0x3ff00000

0800d6b0 <__d2b>:
 800d6b0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800d6b4:	460f      	mov	r7, r1
 800d6b6:	2101      	movs	r1, #1
 800d6b8:	ec59 8b10 	vmov	r8, r9, d0
 800d6bc:	4616      	mov	r6, r2
 800d6be:	f7ff fc1b 	bl	800cef8 <_Balloc>
 800d6c2:	4604      	mov	r4, r0
 800d6c4:	b930      	cbnz	r0, 800d6d4 <__d2b+0x24>
 800d6c6:	4602      	mov	r2, r0
 800d6c8:	4b23      	ldr	r3, [pc, #140]	@ (800d758 <__d2b+0xa8>)
 800d6ca:	4824      	ldr	r0, [pc, #144]	@ (800d75c <__d2b+0xac>)
 800d6cc:	f240 310f 	movw	r1, #783	@ 0x30f
 800d6d0:	f7fe fc9c 	bl	800c00c <__assert_func>
 800d6d4:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800d6d8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800d6dc:	b10d      	cbz	r5, 800d6e2 <__d2b+0x32>
 800d6de:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800d6e2:	9301      	str	r3, [sp, #4]
 800d6e4:	f1b8 0300 	subs.w	r3, r8, #0
 800d6e8:	d023      	beq.n	800d732 <__d2b+0x82>
 800d6ea:	4668      	mov	r0, sp
 800d6ec:	9300      	str	r3, [sp, #0]
 800d6ee:	f7ff fd14 	bl	800d11a <__lo0bits>
 800d6f2:	e9dd 1200 	ldrd	r1, r2, [sp]
 800d6f6:	b1d0      	cbz	r0, 800d72e <__d2b+0x7e>
 800d6f8:	f1c0 0320 	rsb	r3, r0, #32
 800d6fc:	fa02 f303 	lsl.w	r3, r2, r3
 800d700:	430b      	orrs	r3, r1
 800d702:	40c2      	lsrs	r2, r0
 800d704:	6163      	str	r3, [r4, #20]
 800d706:	9201      	str	r2, [sp, #4]
 800d708:	9b01      	ldr	r3, [sp, #4]
 800d70a:	61a3      	str	r3, [r4, #24]
 800d70c:	2b00      	cmp	r3, #0
 800d70e:	bf0c      	ite	eq
 800d710:	2201      	moveq	r2, #1
 800d712:	2202      	movne	r2, #2
 800d714:	6122      	str	r2, [r4, #16]
 800d716:	b1a5      	cbz	r5, 800d742 <__d2b+0x92>
 800d718:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800d71c:	4405      	add	r5, r0
 800d71e:	603d      	str	r5, [r7, #0]
 800d720:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800d724:	6030      	str	r0, [r6, #0]
 800d726:	4620      	mov	r0, r4
 800d728:	b003      	add	sp, #12
 800d72a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d72e:	6161      	str	r1, [r4, #20]
 800d730:	e7ea      	b.n	800d708 <__d2b+0x58>
 800d732:	a801      	add	r0, sp, #4
 800d734:	f7ff fcf1 	bl	800d11a <__lo0bits>
 800d738:	9b01      	ldr	r3, [sp, #4]
 800d73a:	6163      	str	r3, [r4, #20]
 800d73c:	3020      	adds	r0, #32
 800d73e:	2201      	movs	r2, #1
 800d740:	e7e8      	b.n	800d714 <__d2b+0x64>
 800d742:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800d746:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800d74a:	6038      	str	r0, [r7, #0]
 800d74c:	6918      	ldr	r0, [r3, #16]
 800d74e:	f7ff fcc5 	bl	800d0dc <__hi0bits>
 800d752:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800d756:	e7e5      	b.n	800d724 <__d2b+0x74>
 800d758:	08010db9 	.word	0x08010db9
 800d75c:	08010dca 	.word	0x08010dca

0800d760 <__ratio>:
 800d760:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d764:	b085      	sub	sp, #20
 800d766:	e9cd 1000 	strd	r1, r0, [sp]
 800d76a:	a902      	add	r1, sp, #8
 800d76c:	f7ff ff56 	bl	800d61c <__b2d>
 800d770:	9800      	ldr	r0, [sp, #0]
 800d772:	a903      	add	r1, sp, #12
 800d774:	ec55 4b10 	vmov	r4, r5, d0
 800d778:	f7ff ff50 	bl	800d61c <__b2d>
 800d77c:	9b01      	ldr	r3, [sp, #4]
 800d77e:	6919      	ldr	r1, [r3, #16]
 800d780:	9b00      	ldr	r3, [sp, #0]
 800d782:	691b      	ldr	r3, [r3, #16]
 800d784:	1ac9      	subs	r1, r1, r3
 800d786:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800d78a:	1a9b      	subs	r3, r3, r2
 800d78c:	ec5b ab10 	vmov	sl, fp, d0
 800d790:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800d794:	2b00      	cmp	r3, #0
 800d796:	bfce      	itee	gt
 800d798:	462a      	movgt	r2, r5
 800d79a:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800d79e:	465a      	movle	r2, fp
 800d7a0:	462f      	mov	r7, r5
 800d7a2:	46d9      	mov	r9, fp
 800d7a4:	bfcc      	ite	gt
 800d7a6:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800d7aa:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800d7ae:	464b      	mov	r3, r9
 800d7b0:	4652      	mov	r2, sl
 800d7b2:	4620      	mov	r0, r4
 800d7b4:	4639      	mov	r1, r7
 800d7b6:	f7f3 f851 	bl	800085c <__aeabi_ddiv>
 800d7ba:	ec41 0b10 	vmov	d0, r0, r1
 800d7be:	b005      	add	sp, #20
 800d7c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800d7c4 <__copybits>:
 800d7c4:	3901      	subs	r1, #1
 800d7c6:	b570      	push	{r4, r5, r6, lr}
 800d7c8:	1149      	asrs	r1, r1, #5
 800d7ca:	6914      	ldr	r4, [r2, #16]
 800d7cc:	3101      	adds	r1, #1
 800d7ce:	f102 0314 	add.w	r3, r2, #20
 800d7d2:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800d7d6:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800d7da:	1f05      	subs	r5, r0, #4
 800d7dc:	42a3      	cmp	r3, r4
 800d7de:	d30c      	bcc.n	800d7fa <__copybits+0x36>
 800d7e0:	1aa3      	subs	r3, r4, r2
 800d7e2:	3b11      	subs	r3, #17
 800d7e4:	f023 0303 	bic.w	r3, r3, #3
 800d7e8:	3211      	adds	r2, #17
 800d7ea:	42a2      	cmp	r2, r4
 800d7ec:	bf88      	it	hi
 800d7ee:	2300      	movhi	r3, #0
 800d7f0:	4418      	add	r0, r3
 800d7f2:	2300      	movs	r3, #0
 800d7f4:	4288      	cmp	r0, r1
 800d7f6:	d305      	bcc.n	800d804 <__copybits+0x40>
 800d7f8:	bd70      	pop	{r4, r5, r6, pc}
 800d7fa:	f853 6b04 	ldr.w	r6, [r3], #4
 800d7fe:	f845 6f04 	str.w	r6, [r5, #4]!
 800d802:	e7eb      	b.n	800d7dc <__copybits+0x18>
 800d804:	f840 3b04 	str.w	r3, [r0], #4
 800d808:	e7f4      	b.n	800d7f4 <__copybits+0x30>

0800d80a <__any_on>:
 800d80a:	f100 0214 	add.w	r2, r0, #20
 800d80e:	6900      	ldr	r0, [r0, #16]
 800d810:	114b      	asrs	r3, r1, #5
 800d812:	4298      	cmp	r0, r3
 800d814:	b510      	push	{r4, lr}
 800d816:	db11      	blt.n	800d83c <__any_on+0x32>
 800d818:	dd0a      	ble.n	800d830 <__any_on+0x26>
 800d81a:	f011 011f 	ands.w	r1, r1, #31
 800d81e:	d007      	beq.n	800d830 <__any_on+0x26>
 800d820:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800d824:	fa24 f001 	lsr.w	r0, r4, r1
 800d828:	fa00 f101 	lsl.w	r1, r0, r1
 800d82c:	428c      	cmp	r4, r1
 800d82e:	d10b      	bne.n	800d848 <__any_on+0x3e>
 800d830:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800d834:	4293      	cmp	r3, r2
 800d836:	d803      	bhi.n	800d840 <__any_on+0x36>
 800d838:	2000      	movs	r0, #0
 800d83a:	bd10      	pop	{r4, pc}
 800d83c:	4603      	mov	r3, r0
 800d83e:	e7f7      	b.n	800d830 <__any_on+0x26>
 800d840:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800d844:	2900      	cmp	r1, #0
 800d846:	d0f5      	beq.n	800d834 <__any_on+0x2a>
 800d848:	2001      	movs	r0, #1
 800d84a:	e7f6      	b.n	800d83a <__any_on+0x30>

0800d84c <sulp>:
 800d84c:	b570      	push	{r4, r5, r6, lr}
 800d84e:	4604      	mov	r4, r0
 800d850:	460d      	mov	r5, r1
 800d852:	ec45 4b10 	vmov	d0, r4, r5
 800d856:	4616      	mov	r6, r2
 800d858:	f7ff feba 	bl	800d5d0 <__ulp>
 800d85c:	ec51 0b10 	vmov	r0, r1, d0
 800d860:	b17e      	cbz	r6, 800d882 <sulp+0x36>
 800d862:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800d866:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800d86a:	2b00      	cmp	r3, #0
 800d86c:	dd09      	ble.n	800d882 <sulp+0x36>
 800d86e:	051b      	lsls	r3, r3, #20
 800d870:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800d874:	2400      	movs	r4, #0
 800d876:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800d87a:	4622      	mov	r2, r4
 800d87c:	462b      	mov	r3, r5
 800d87e:	f7f2 fec3 	bl	8000608 <__aeabi_dmul>
 800d882:	ec41 0b10 	vmov	d0, r0, r1
 800d886:	bd70      	pop	{r4, r5, r6, pc}

0800d888 <_strtod_l>:
 800d888:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d88c:	b09f      	sub	sp, #124	@ 0x7c
 800d88e:	460c      	mov	r4, r1
 800d890:	9217      	str	r2, [sp, #92]	@ 0x5c
 800d892:	2200      	movs	r2, #0
 800d894:	921a      	str	r2, [sp, #104]	@ 0x68
 800d896:	9005      	str	r0, [sp, #20]
 800d898:	f04f 0a00 	mov.w	sl, #0
 800d89c:	f04f 0b00 	mov.w	fp, #0
 800d8a0:	460a      	mov	r2, r1
 800d8a2:	9219      	str	r2, [sp, #100]	@ 0x64
 800d8a4:	7811      	ldrb	r1, [r2, #0]
 800d8a6:	292b      	cmp	r1, #43	@ 0x2b
 800d8a8:	d04a      	beq.n	800d940 <_strtod_l+0xb8>
 800d8aa:	d838      	bhi.n	800d91e <_strtod_l+0x96>
 800d8ac:	290d      	cmp	r1, #13
 800d8ae:	d832      	bhi.n	800d916 <_strtod_l+0x8e>
 800d8b0:	2908      	cmp	r1, #8
 800d8b2:	d832      	bhi.n	800d91a <_strtod_l+0x92>
 800d8b4:	2900      	cmp	r1, #0
 800d8b6:	d03b      	beq.n	800d930 <_strtod_l+0xa8>
 800d8b8:	2200      	movs	r2, #0
 800d8ba:	920e      	str	r2, [sp, #56]	@ 0x38
 800d8bc:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800d8be:	782a      	ldrb	r2, [r5, #0]
 800d8c0:	2a30      	cmp	r2, #48	@ 0x30
 800d8c2:	f040 80b2 	bne.w	800da2a <_strtod_l+0x1a2>
 800d8c6:	786a      	ldrb	r2, [r5, #1]
 800d8c8:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800d8cc:	2a58      	cmp	r2, #88	@ 0x58
 800d8ce:	d16e      	bne.n	800d9ae <_strtod_l+0x126>
 800d8d0:	9302      	str	r3, [sp, #8]
 800d8d2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d8d4:	9301      	str	r3, [sp, #4]
 800d8d6:	ab1a      	add	r3, sp, #104	@ 0x68
 800d8d8:	9300      	str	r3, [sp, #0]
 800d8da:	4a8f      	ldr	r2, [pc, #572]	@ (800db18 <_strtod_l+0x290>)
 800d8dc:	9805      	ldr	r0, [sp, #20]
 800d8de:	ab1b      	add	r3, sp, #108	@ 0x6c
 800d8e0:	a919      	add	r1, sp, #100	@ 0x64
 800d8e2:	f001 fadb 	bl	800ee9c <__gethex>
 800d8e6:	f010 060f 	ands.w	r6, r0, #15
 800d8ea:	4604      	mov	r4, r0
 800d8ec:	d005      	beq.n	800d8fa <_strtod_l+0x72>
 800d8ee:	2e06      	cmp	r6, #6
 800d8f0:	d128      	bne.n	800d944 <_strtod_l+0xbc>
 800d8f2:	3501      	adds	r5, #1
 800d8f4:	2300      	movs	r3, #0
 800d8f6:	9519      	str	r5, [sp, #100]	@ 0x64
 800d8f8:	930e      	str	r3, [sp, #56]	@ 0x38
 800d8fa:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800d8fc:	2b00      	cmp	r3, #0
 800d8fe:	f040 858e 	bne.w	800e41e <_strtod_l+0xb96>
 800d902:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d904:	b1cb      	cbz	r3, 800d93a <_strtod_l+0xb2>
 800d906:	4652      	mov	r2, sl
 800d908:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800d90c:	ec43 2b10 	vmov	d0, r2, r3
 800d910:	b01f      	add	sp, #124	@ 0x7c
 800d912:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d916:	2920      	cmp	r1, #32
 800d918:	d1ce      	bne.n	800d8b8 <_strtod_l+0x30>
 800d91a:	3201      	adds	r2, #1
 800d91c:	e7c1      	b.n	800d8a2 <_strtod_l+0x1a>
 800d91e:	292d      	cmp	r1, #45	@ 0x2d
 800d920:	d1ca      	bne.n	800d8b8 <_strtod_l+0x30>
 800d922:	2101      	movs	r1, #1
 800d924:	910e      	str	r1, [sp, #56]	@ 0x38
 800d926:	1c51      	adds	r1, r2, #1
 800d928:	9119      	str	r1, [sp, #100]	@ 0x64
 800d92a:	7852      	ldrb	r2, [r2, #1]
 800d92c:	2a00      	cmp	r2, #0
 800d92e:	d1c5      	bne.n	800d8bc <_strtod_l+0x34>
 800d930:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800d932:	9419      	str	r4, [sp, #100]	@ 0x64
 800d934:	2b00      	cmp	r3, #0
 800d936:	f040 8570 	bne.w	800e41a <_strtod_l+0xb92>
 800d93a:	4652      	mov	r2, sl
 800d93c:	465b      	mov	r3, fp
 800d93e:	e7e5      	b.n	800d90c <_strtod_l+0x84>
 800d940:	2100      	movs	r1, #0
 800d942:	e7ef      	b.n	800d924 <_strtod_l+0x9c>
 800d944:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800d946:	b13a      	cbz	r2, 800d958 <_strtod_l+0xd0>
 800d948:	2135      	movs	r1, #53	@ 0x35
 800d94a:	a81c      	add	r0, sp, #112	@ 0x70
 800d94c:	f7ff ff3a 	bl	800d7c4 <__copybits>
 800d950:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800d952:	9805      	ldr	r0, [sp, #20]
 800d954:	f7ff fb10 	bl	800cf78 <_Bfree>
 800d958:	3e01      	subs	r6, #1
 800d95a:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800d95c:	2e04      	cmp	r6, #4
 800d95e:	d806      	bhi.n	800d96e <_strtod_l+0xe6>
 800d960:	e8df f006 	tbb	[pc, r6]
 800d964:	201d0314 	.word	0x201d0314
 800d968:	14          	.byte	0x14
 800d969:	00          	.byte	0x00
 800d96a:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800d96e:	05e1      	lsls	r1, r4, #23
 800d970:	bf48      	it	mi
 800d972:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800d976:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800d97a:	0d1b      	lsrs	r3, r3, #20
 800d97c:	051b      	lsls	r3, r3, #20
 800d97e:	2b00      	cmp	r3, #0
 800d980:	d1bb      	bne.n	800d8fa <_strtod_l+0x72>
 800d982:	f7fe fb01 	bl	800bf88 <__errno>
 800d986:	2322      	movs	r3, #34	@ 0x22
 800d988:	6003      	str	r3, [r0, #0]
 800d98a:	e7b6      	b.n	800d8fa <_strtod_l+0x72>
 800d98c:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800d990:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800d994:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800d998:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800d99c:	e7e7      	b.n	800d96e <_strtod_l+0xe6>
 800d99e:	f8df b180 	ldr.w	fp, [pc, #384]	@ 800db20 <_strtod_l+0x298>
 800d9a2:	e7e4      	b.n	800d96e <_strtod_l+0xe6>
 800d9a4:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800d9a8:	f04f 3aff 	mov.w	sl, #4294967295
 800d9ac:	e7df      	b.n	800d96e <_strtod_l+0xe6>
 800d9ae:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800d9b0:	1c5a      	adds	r2, r3, #1
 800d9b2:	9219      	str	r2, [sp, #100]	@ 0x64
 800d9b4:	785b      	ldrb	r3, [r3, #1]
 800d9b6:	2b30      	cmp	r3, #48	@ 0x30
 800d9b8:	d0f9      	beq.n	800d9ae <_strtod_l+0x126>
 800d9ba:	2b00      	cmp	r3, #0
 800d9bc:	d09d      	beq.n	800d8fa <_strtod_l+0x72>
 800d9be:	2301      	movs	r3, #1
 800d9c0:	2700      	movs	r7, #0
 800d9c2:	9308      	str	r3, [sp, #32]
 800d9c4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800d9c6:	930c      	str	r3, [sp, #48]	@ 0x30
 800d9c8:	970b      	str	r7, [sp, #44]	@ 0x2c
 800d9ca:	46b9      	mov	r9, r7
 800d9cc:	220a      	movs	r2, #10
 800d9ce:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800d9d0:	7805      	ldrb	r5, [r0, #0]
 800d9d2:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800d9d6:	b2d9      	uxtb	r1, r3
 800d9d8:	2909      	cmp	r1, #9
 800d9da:	d928      	bls.n	800da2e <_strtod_l+0x1a6>
 800d9dc:	494f      	ldr	r1, [pc, #316]	@ (800db1c <_strtod_l+0x294>)
 800d9de:	2201      	movs	r2, #1
 800d9e0:	f001 f98c 	bl	800ecfc <strncmp>
 800d9e4:	2800      	cmp	r0, #0
 800d9e6:	d032      	beq.n	800da4e <_strtod_l+0x1c6>
 800d9e8:	2000      	movs	r0, #0
 800d9ea:	462a      	mov	r2, r5
 800d9ec:	900a      	str	r0, [sp, #40]	@ 0x28
 800d9ee:	464d      	mov	r5, r9
 800d9f0:	4603      	mov	r3, r0
 800d9f2:	2a65      	cmp	r2, #101	@ 0x65
 800d9f4:	d001      	beq.n	800d9fa <_strtod_l+0x172>
 800d9f6:	2a45      	cmp	r2, #69	@ 0x45
 800d9f8:	d114      	bne.n	800da24 <_strtod_l+0x19c>
 800d9fa:	b91d      	cbnz	r5, 800da04 <_strtod_l+0x17c>
 800d9fc:	9a08      	ldr	r2, [sp, #32]
 800d9fe:	4302      	orrs	r2, r0
 800da00:	d096      	beq.n	800d930 <_strtod_l+0xa8>
 800da02:	2500      	movs	r5, #0
 800da04:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800da06:	1c62      	adds	r2, r4, #1
 800da08:	9219      	str	r2, [sp, #100]	@ 0x64
 800da0a:	7862      	ldrb	r2, [r4, #1]
 800da0c:	2a2b      	cmp	r2, #43	@ 0x2b
 800da0e:	d07a      	beq.n	800db06 <_strtod_l+0x27e>
 800da10:	2a2d      	cmp	r2, #45	@ 0x2d
 800da12:	d07e      	beq.n	800db12 <_strtod_l+0x28a>
 800da14:	f04f 0c00 	mov.w	ip, #0
 800da18:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800da1c:	2909      	cmp	r1, #9
 800da1e:	f240 8085 	bls.w	800db2c <_strtod_l+0x2a4>
 800da22:	9419      	str	r4, [sp, #100]	@ 0x64
 800da24:	f04f 0800 	mov.w	r8, #0
 800da28:	e0a5      	b.n	800db76 <_strtod_l+0x2ee>
 800da2a:	2300      	movs	r3, #0
 800da2c:	e7c8      	b.n	800d9c0 <_strtod_l+0x138>
 800da2e:	f1b9 0f08 	cmp.w	r9, #8
 800da32:	bfd8      	it	le
 800da34:	990b      	ldrle	r1, [sp, #44]	@ 0x2c
 800da36:	f100 0001 	add.w	r0, r0, #1
 800da3a:	bfda      	itte	le
 800da3c:	fb02 3301 	mlale	r3, r2, r1, r3
 800da40:	930b      	strle	r3, [sp, #44]	@ 0x2c
 800da42:	fb02 3707 	mlagt	r7, r2, r7, r3
 800da46:	f109 0901 	add.w	r9, r9, #1
 800da4a:	9019      	str	r0, [sp, #100]	@ 0x64
 800da4c:	e7bf      	b.n	800d9ce <_strtod_l+0x146>
 800da4e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800da50:	1c5a      	adds	r2, r3, #1
 800da52:	9219      	str	r2, [sp, #100]	@ 0x64
 800da54:	785a      	ldrb	r2, [r3, #1]
 800da56:	f1b9 0f00 	cmp.w	r9, #0
 800da5a:	d03b      	beq.n	800dad4 <_strtod_l+0x24c>
 800da5c:	900a      	str	r0, [sp, #40]	@ 0x28
 800da5e:	464d      	mov	r5, r9
 800da60:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800da64:	2b09      	cmp	r3, #9
 800da66:	d912      	bls.n	800da8e <_strtod_l+0x206>
 800da68:	2301      	movs	r3, #1
 800da6a:	e7c2      	b.n	800d9f2 <_strtod_l+0x16a>
 800da6c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800da6e:	1c5a      	adds	r2, r3, #1
 800da70:	9219      	str	r2, [sp, #100]	@ 0x64
 800da72:	785a      	ldrb	r2, [r3, #1]
 800da74:	3001      	adds	r0, #1
 800da76:	2a30      	cmp	r2, #48	@ 0x30
 800da78:	d0f8      	beq.n	800da6c <_strtod_l+0x1e4>
 800da7a:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800da7e:	2b08      	cmp	r3, #8
 800da80:	f200 84d2 	bhi.w	800e428 <_strtod_l+0xba0>
 800da84:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800da86:	900a      	str	r0, [sp, #40]	@ 0x28
 800da88:	2000      	movs	r0, #0
 800da8a:	930c      	str	r3, [sp, #48]	@ 0x30
 800da8c:	4605      	mov	r5, r0
 800da8e:	3a30      	subs	r2, #48	@ 0x30
 800da90:	f100 0301 	add.w	r3, r0, #1
 800da94:	d018      	beq.n	800dac8 <_strtod_l+0x240>
 800da96:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800da98:	4419      	add	r1, r3
 800da9a:	910a      	str	r1, [sp, #40]	@ 0x28
 800da9c:	462e      	mov	r6, r5
 800da9e:	f04f 0e0a 	mov.w	lr, #10
 800daa2:	1c71      	adds	r1, r6, #1
 800daa4:	eba1 0c05 	sub.w	ip, r1, r5
 800daa8:	4563      	cmp	r3, ip
 800daaa:	dc15      	bgt.n	800dad8 <_strtod_l+0x250>
 800daac:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 800dab0:	182b      	adds	r3, r5, r0
 800dab2:	2b08      	cmp	r3, #8
 800dab4:	f105 0501 	add.w	r5, r5, #1
 800dab8:	4405      	add	r5, r0
 800daba:	dc1a      	bgt.n	800daf2 <_strtod_l+0x26a>
 800dabc:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800dabe:	230a      	movs	r3, #10
 800dac0:	fb03 2301 	mla	r3, r3, r1, r2
 800dac4:	930b      	str	r3, [sp, #44]	@ 0x2c
 800dac6:	2300      	movs	r3, #0
 800dac8:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800daca:	1c51      	adds	r1, r2, #1
 800dacc:	9119      	str	r1, [sp, #100]	@ 0x64
 800dace:	7852      	ldrb	r2, [r2, #1]
 800dad0:	4618      	mov	r0, r3
 800dad2:	e7c5      	b.n	800da60 <_strtod_l+0x1d8>
 800dad4:	4648      	mov	r0, r9
 800dad6:	e7ce      	b.n	800da76 <_strtod_l+0x1ee>
 800dad8:	2e08      	cmp	r6, #8
 800dada:	dc05      	bgt.n	800dae8 <_strtod_l+0x260>
 800dadc:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800dade:	fb0e f606 	mul.w	r6, lr, r6
 800dae2:	960b      	str	r6, [sp, #44]	@ 0x2c
 800dae4:	460e      	mov	r6, r1
 800dae6:	e7dc      	b.n	800daa2 <_strtod_l+0x21a>
 800dae8:	2910      	cmp	r1, #16
 800daea:	bfd8      	it	le
 800daec:	fb0e f707 	mulle.w	r7, lr, r7
 800daf0:	e7f8      	b.n	800dae4 <_strtod_l+0x25c>
 800daf2:	2b0f      	cmp	r3, #15
 800daf4:	bfdc      	itt	le
 800daf6:	230a      	movle	r3, #10
 800daf8:	fb03 2707 	mlale	r7, r3, r7, r2
 800dafc:	e7e3      	b.n	800dac6 <_strtod_l+0x23e>
 800dafe:	2300      	movs	r3, #0
 800db00:	930a      	str	r3, [sp, #40]	@ 0x28
 800db02:	2301      	movs	r3, #1
 800db04:	e77a      	b.n	800d9fc <_strtod_l+0x174>
 800db06:	f04f 0c00 	mov.w	ip, #0
 800db0a:	1ca2      	adds	r2, r4, #2
 800db0c:	9219      	str	r2, [sp, #100]	@ 0x64
 800db0e:	78a2      	ldrb	r2, [r4, #2]
 800db10:	e782      	b.n	800da18 <_strtod_l+0x190>
 800db12:	f04f 0c01 	mov.w	ip, #1
 800db16:	e7f8      	b.n	800db0a <_strtod_l+0x282>
 800db18:	08010fb4 	.word	0x08010fb4
 800db1c:	08010e23 	.word	0x08010e23
 800db20:	7ff00000 	.word	0x7ff00000
 800db24:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800db26:	1c51      	adds	r1, r2, #1
 800db28:	9119      	str	r1, [sp, #100]	@ 0x64
 800db2a:	7852      	ldrb	r2, [r2, #1]
 800db2c:	2a30      	cmp	r2, #48	@ 0x30
 800db2e:	d0f9      	beq.n	800db24 <_strtod_l+0x29c>
 800db30:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800db34:	2908      	cmp	r1, #8
 800db36:	f63f af75 	bhi.w	800da24 <_strtod_l+0x19c>
 800db3a:	3a30      	subs	r2, #48	@ 0x30
 800db3c:	9209      	str	r2, [sp, #36]	@ 0x24
 800db3e:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800db40:	920f      	str	r2, [sp, #60]	@ 0x3c
 800db42:	f04f 080a 	mov.w	r8, #10
 800db46:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800db48:	1c56      	adds	r6, r2, #1
 800db4a:	9619      	str	r6, [sp, #100]	@ 0x64
 800db4c:	7852      	ldrb	r2, [r2, #1]
 800db4e:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800db52:	f1be 0f09 	cmp.w	lr, #9
 800db56:	d939      	bls.n	800dbcc <_strtod_l+0x344>
 800db58:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800db5a:	1a76      	subs	r6, r6, r1
 800db5c:	2e08      	cmp	r6, #8
 800db5e:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800db62:	dc03      	bgt.n	800db6c <_strtod_l+0x2e4>
 800db64:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800db66:	4588      	cmp	r8, r1
 800db68:	bfa8      	it	ge
 800db6a:	4688      	movge	r8, r1
 800db6c:	f1bc 0f00 	cmp.w	ip, #0
 800db70:	d001      	beq.n	800db76 <_strtod_l+0x2ee>
 800db72:	f1c8 0800 	rsb	r8, r8, #0
 800db76:	2d00      	cmp	r5, #0
 800db78:	d14e      	bne.n	800dc18 <_strtod_l+0x390>
 800db7a:	9908      	ldr	r1, [sp, #32]
 800db7c:	4308      	orrs	r0, r1
 800db7e:	f47f aebc 	bne.w	800d8fa <_strtod_l+0x72>
 800db82:	2b00      	cmp	r3, #0
 800db84:	f47f aed4 	bne.w	800d930 <_strtod_l+0xa8>
 800db88:	2a69      	cmp	r2, #105	@ 0x69
 800db8a:	d028      	beq.n	800dbde <_strtod_l+0x356>
 800db8c:	dc25      	bgt.n	800dbda <_strtod_l+0x352>
 800db8e:	2a49      	cmp	r2, #73	@ 0x49
 800db90:	d025      	beq.n	800dbde <_strtod_l+0x356>
 800db92:	2a4e      	cmp	r2, #78	@ 0x4e
 800db94:	f47f aecc 	bne.w	800d930 <_strtod_l+0xa8>
 800db98:	499a      	ldr	r1, [pc, #616]	@ (800de04 <_strtod_l+0x57c>)
 800db9a:	a819      	add	r0, sp, #100	@ 0x64
 800db9c:	f001 fba0 	bl	800f2e0 <__match>
 800dba0:	2800      	cmp	r0, #0
 800dba2:	f43f aec5 	beq.w	800d930 <_strtod_l+0xa8>
 800dba6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800dba8:	781b      	ldrb	r3, [r3, #0]
 800dbaa:	2b28      	cmp	r3, #40	@ 0x28
 800dbac:	d12e      	bne.n	800dc0c <_strtod_l+0x384>
 800dbae:	4996      	ldr	r1, [pc, #600]	@ (800de08 <_strtod_l+0x580>)
 800dbb0:	aa1c      	add	r2, sp, #112	@ 0x70
 800dbb2:	a819      	add	r0, sp, #100	@ 0x64
 800dbb4:	f001 fba8 	bl	800f308 <__hexnan>
 800dbb8:	2805      	cmp	r0, #5
 800dbba:	d127      	bne.n	800dc0c <_strtod_l+0x384>
 800dbbc:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800dbbe:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800dbc2:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800dbc6:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800dbca:	e696      	b.n	800d8fa <_strtod_l+0x72>
 800dbcc:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800dbce:	fb08 2101 	mla	r1, r8, r1, r2
 800dbd2:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800dbd6:	9209      	str	r2, [sp, #36]	@ 0x24
 800dbd8:	e7b5      	b.n	800db46 <_strtod_l+0x2be>
 800dbda:	2a6e      	cmp	r2, #110	@ 0x6e
 800dbdc:	e7da      	b.n	800db94 <_strtod_l+0x30c>
 800dbde:	498b      	ldr	r1, [pc, #556]	@ (800de0c <_strtod_l+0x584>)
 800dbe0:	a819      	add	r0, sp, #100	@ 0x64
 800dbe2:	f001 fb7d 	bl	800f2e0 <__match>
 800dbe6:	2800      	cmp	r0, #0
 800dbe8:	f43f aea2 	beq.w	800d930 <_strtod_l+0xa8>
 800dbec:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800dbee:	4988      	ldr	r1, [pc, #544]	@ (800de10 <_strtod_l+0x588>)
 800dbf0:	3b01      	subs	r3, #1
 800dbf2:	a819      	add	r0, sp, #100	@ 0x64
 800dbf4:	9319      	str	r3, [sp, #100]	@ 0x64
 800dbf6:	f001 fb73 	bl	800f2e0 <__match>
 800dbfa:	b910      	cbnz	r0, 800dc02 <_strtod_l+0x37a>
 800dbfc:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800dbfe:	3301      	adds	r3, #1
 800dc00:	9319      	str	r3, [sp, #100]	@ 0x64
 800dc02:	f8df b21c 	ldr.w	fp, [pc, #540]	@ 800de20 <_strtod_l+0x598>
 800dc06:	f04f 0a00 	mov.w	sl, #0
 800dc0a:	e676      	b.n	800d8fa <_strtod_l+0x72>
 800dc0c:	4881      	ldr	r0, [pc, #516]	@ (800de14 <_strtod_l+0x58c>)
 800dc0e:	f001 f8bb 	bl	800ed88 <nan>
 800dc12:	ec5b ab10 	vmov	sl, fp, d0
 800dc16:	e670      	b.n	800d8fa <_strtod_l+0x72>
 800dc18:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800dc1a:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 800dc1c:	eba8 0303 	sub.w	r3, r8, r3
 800dc20:	f1b9 0f00 	cmp.w	r9, #0
 800dc24:	bf08      	it	eq
 800dc26:	46a9      	moveq	r9, r5
 800dc28:	2d10      	cmp	r5, #16
 800dc2a:	9309      	str	r3, [sp, #36]	@ 0x24
 800dc2c:	462c      	mov	r4, r5
 800dc2e:	bfa8      	it	ge
 800dc30:	2410      	movge	r4, #16
 800dc32:	f7f2 fc6f 	bl	8000514 <__aeabi_ui2d>
 800dc36:	2d09      	cmp	r5, #9
 800dc38:	4682      	mov	sl, r0
 800dc3a:	468b      	mov	fp, r1
 800dc3c:	dc13      	bgt.n	800dc66 <_strtod_l+0x3de>
 800dc3e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dc40:	2b00      	cmp	r3, #0
 800dc42:	f43f ae5a 	beq.w	800d8fa <_strtod_l+0x72>
 800dc46:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dc48:	dd78      	ble.n	800dd3c <_strtod_l+0x4b4>
 800dc4a:	2b16      	cmp	r3, #22
 800dc4c:	dc5f      	bgt.n	800dd0e <_strtod_l+0x486>
 800dc4e:	4972      	ldr	r1, [pc, #456]	@ (800de18 <_strtod_l+0x590>)
 800dc50:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800dc54:	e9d1 0100 	ldrd	r0, r1, [r1]
 800dc58:	4652      	mov	r2, sl
 800dc5a:	465b      	mov	r3, fp
 800dc5c:	f7f2 fcd4 	bl	8000608 <__aeabi_dmul>
 800dc60:	4682      	mov	sl, r0
 800dc62:	468b      	mov	fp, r1
 800dc64:	e649      	b.n	800d8fa <_strtod_l+0x72>
 800dc66:	4b6c      	ldr	r3, [pc, #432]	@ (800de18 <_strtod_l+0x590>)
 800dc68:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800dc6c:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800dc70:	f7f2 fcca 	bl	8000608 <__aeabi_dmul>
 800dc74:	4682      	mov	sl, r0
 800dc76:	4638      	mov	r0, r7
 800dc78:	468b      	mov	fp, r1
 800dc7a:	f7f2 fc4b 	bl	8000514 <__aeabi_ui2d>
 800dc7e:	4602      	mov	r2, r0
 800dc80:	460b      	mov	r3, r1
 800dc82:	4650      	mov	r0, sl
 800dc84:	4659      	mov	r1, fp
 800dc86:	f7f2 fb09 	bl	800029c <__adddf3>
 800dc8a:	2d0f      	cmp	r5, #15
 800dc8c:	4682      	mov	sl, r0
 800dc8e:	468b      	mov	fp, r1
 800dc90:	ddd5      	ble.n	800dc3e <_strtod_l+0x3b6>
 800dc92:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dc94:	1b2c      	subs	r4, r5, r4
 800dc96:	441c      	add	r4, r3
 800dc98:	2c00      	cmp	r4, #0
 800dc9a:	f340 8093 	ble.w	800ddc4 <_strtod_l+0x53c>
 800dc9e:	f014 030f 	ands.w	r3, r4, #15
 800dca2:	d00a      	beq.n	800dcba <_strtod_l+0x432>
 800dca4:	495c      	ldr	r1, [pc, #368]	@ (800de18 <_strtod_l+0x590>)
 800dca6:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800dcaa:	4652      	mov	r2, sl
 800dcac:	465b      	mov	r3, fp
 800dcae:	e9d1 0100 	ldrd	r0, r1, [r1]
 800dcb2:	f7f2 fca9 	bl	8000608 <__aeabi_dmul>
 800dcb6:	4682      	mov	sl, r0
 800dcb8:	468b      	mov	fp, r1
 800dcba:	f034 040f 	bics.w	r4, r4, #15
 800dcbe:	d073      	beq.n	800dda8 <_strtod_l+0x520>
 800dcc0:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800dcc4:	dd49      	ble.n	800dd5a <_strtod_l+0x4d2>
 800dcc6:	2400      	movs	r4, #0
 800dcc8:	46a0      	mov	r8, r4
 800dcca:	940b      	str	r4, [sp, #44]	@ 0x2c
 800dccc:	46a1      	mov	r9, r4
 800dcce:	9a05      	ldr	r2, [sp, #20]
 800dcd0:	f8df b14c 	ldr.w	fp, [pc, #332]	@ 800de20 <_strtod_l+0x598>
 800dcd4:	2322      	movs	r3, #34	@ 0x22
 800dcd6:	6013      	str	r3, [r2, #0]
 800dcd8:	f04f 0a00 	mov.w	sl, #0
 800dcdc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800dcde:	2b00      	cmp	r3, #0
 800dce0:	f43f ae0b 	beq.w	800d8fa <_strtod_l+0x72>
 800dce4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800dce6:	9805      	ldr	r0, [sp, #20]
 800dce8:	f7ff f946 	bl	800cf78 <_Bfree>
 800dcec:	9805      	ldr	r0, [sp, #20]
 800dcee:	4649      	mov	r1, r9
 800dcf0:	f7ff f942 	bl	800cf78 <_Bfree>
 800dcf4:	9805      	ldr	r0, [sp, #20]
 800dcf6:	4641      	mov	r1, r8
 800dcf8:	f7ff f93e 	bl	800cf78 <_Bfree>
 800dcfc:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800dcfe:	9805      	ldr	r0, [sp, #20]
 800dd00:	f7ff f93a 	bl	800cf78 <_Bfree>
 800dd04:	9805      	ldr	r0, [sp, #20]
 800dd06:	4621      	mov	r1, r4
 800dd08:	f7ff f936 	bl	800cf78 <_Bfree>
 800dd0c:	e5f5      	b.n	800d8fa <_strtod_l+0x72>
 800dd0e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800dd10:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800dd14:	4293      	cmp	r3, r2
 800dd16:	dbbc      	blt.n	800dc92 <_strtod_l+0x40a>
 800dd18:	4c3f      	ldr	r4, [pc, #252]	@ (800de18 <_strtod_l+0x590>)
 800dd1a:	f1c5 050f 	rsb	r5, r5, #15
 800dd1e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800dd22:	4652      	mov	r2, sl
 800dd24:	465b      	mov	r3, fp
 800dd26:	e9d1 0100 	ldrd	r0, r1, [r1]
 800dd2a:	f7f2 fc6d 	bl	8000608 <__aeabi_dmul>
 800dd2e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dd30:	1b5d      	subs	r5, r3, r5
 800dd32:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800dd36:	e9d4 2300 	ldrd	r2, r3, [r4]
 800dd3a:	e78f      	b.n	800dc5c <_strtod_l+0x3d4>
 800dd3c:	3316      	adds	r3, #22
 800dd3e:	dba8      	blt.n	800dc92 <_strtod_l+0x40a>
 800dd40:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800dd42:	eba3 0808 	sub.w	r8, r3, r8
 800dd46:	4b34      	ldr	r3, [pc, #208]	@ (800de18 <_strtod_l+0x590>)
 800dd48:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800dd4c:	e9d8 2300 	ldrd	r2, r3, [r8]
 800dd50:	4650      	mov	r0, sl
 800dd52:	4659      	mov	r1, fp
 800dd54:	f7f2 fd82 	bl	800085c <__aeabi_ddiv>
 800dd58:	e782      	b.n	800dc60 <_strtod_l+0x3d8>
 800dd5a:	2300      	movs	r3, #0
 800dd5c:	4f2f      	ldr	r7, [pc, #188]	@ (800de1c <_strtod_l+0x594>)
 800dd5e:	1124      	asrs	r4, r4, #4
 800dd60:	4650      	mov	r0, sl
 800dd62:	4659      	mov	r1, fp
 800dd64:	461e      	mov	r6, r3
 800dd66:	2c01      	cmp	r4, #1
 800dd68:	dc21      	bgt.n	800ddae <_strtod_l+0x526>
 800dd6a:	b10b      	cbz	r3, 800dd70 <_strtod_l+0x4e8>
 800dd6c:	4682      	mov	sl, r0
 800dd6e:	468b      	mov	fp, r1
 800dd70:	492a      	ldr	r1, [pc, #168]	@ (800de1c <_strtod_l+0x594>)
 800dd72:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800dd76:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800dd7a:	4652      	mov	r2, sl
 800dd7c:	465b      	mov	r3, fp
 800dd7e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800dd82:	f7f2 fc41 	bl	8000608 <__aeabi_dmul>
 800dd86:	4b26      	ldr	r3, [pc, #152]	@ (800de20 <_strtod_l+0x598>)
 800dd88:	460a      	mov	r2, r1
 800dd8a:	400b      	ands	r3, r1
 800dd8c:	4925      	ldr	r1, [pc, #148]	@ (800de24 <_strtod_l+0x59c>)
 800dd8e:	428b      	cmp	r3, r1
 800dd90:	4682      	mov	sl, r0
 800dd92:	d898      	bhi.n	800dcc6 <_strtod_l+0x43e>
 800dd94:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800dd98:	428b      	cmp	r3, r1
 800dd9a:	bf86      	itte	hi
 800dd9c:	f8df b088 	ldrhi.w	fp, [pc, #136]	@ 800de28 <_strtod_l+0x5a0>
 800dda0:	f04f 3aff 	movhi.w	sl, #4294967295
 800dda4:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800dda8:	2300      	movs	r3, #0
 800ddaa:	9308      	str	r3, [sp, #32]
 800ddac:	e076      	b.n	800de9c <_strtod_l+0x614>
 800ddae:	07e2      	lsls	r2, r4, #31
 800ddb0:	d504      	bpl.n	800ddbc <_strtod_l+0x534>
 800ddb2:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ddb6:	f7f2 fc27 	bl	8000608 <__aeabi_dmul>
 800ddba:	2301      	movs	r3, #1
 800ddbc:	3601      	adds	r6, #1
 800ddbe:	1064      	asrs	r4, r4, #1
 800ddc0:	3708      	adds	r7, #8
 800ddc2:	e7d0      	b.n	800dd66 <_strtod_l+0x4de>
 800ddc4:	d0f0      	beq.n	800dda8 <_strtod_l+0x520>
 800ddc6:	4264      	negs	r4, r4
 800ddc8:	f014 020f 	ands.w	r2, r4, #15
 800ddcc:	d00a      	beq.n	800dde4 <_strtod_l+0x55c>
 800ddce:	4b12      	ldr	r3, [pc, #72]	@ (800de18 <_strtod_l+0x590>)
 800ddd0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ddd4:	4650      	mov	r0, sl
 800ddd6:	4659      	mov	r1, fp
 800ddd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dddc:	f7f2 fd3e 	bl	800085c <__aeabi_ddiv>
 800dde0:	4682      	mov	sl, r0
 800dde2:	468b      	mov	fp, r1
 800dde4:	1124      	asrs	r4, r4, #4
 800dde6:	d0df      	beq.n	800dda8 <_strtod_l+0x520>
 800dde8:	2c1f      	cmp	r4, #31
 800ddea:	dd1f      	ble.n	800de2c <_strtod_l+0x5a4>
 800ddec:	2400      	movs	r4, #0
 800ddee:	46a0      	mov	r8, r4
 800ddf0:	940b      	str	r4, [sp, #44]	@ 0x2c
 800ddf2:	46a1      	mov	r9, r4
 800ddf4:	9a05      	ldr	r2, [sp, #20]
 800ddf6:	2322      	movs	r3, #34	@ 0x22
 800ddf8:	f04f 0a00 	mov.w	sl, #0
 800ddfc:	f04f 0b00 	mov.w	fp, #0
 800de00:	6013      	str	r3, [r2, #0]
 800de02:	e76b      	b.n	800dcdc <_strtod_l+0x454>
 800de04:	08010cd5 	.word	0x08010cd5
 800de08:	08010fa0 	.word	0x08010fa0
 800de0c:	08010ccd 	.word	0x08010ccd
 800de10:	08010d40 	.word	0x08010d40
 800de14:	08010d3c 	.word	0x08010d3c
 800de18:	08010ed8 	.word	0x08010ed8
 800de1c:	08010eb0 	.word	0x08010eb0
 800de20:	7ff00000 	.word	0x7ff00000
 800de24:	7ca00000 	.word	0x7ca00000
 800de28:	7fefffff 	.word	0x7fefffff
 800de2c:	f014 0310 	ands.w	r3, r4, #16
 800de30:	bf18      	it	ne
 800de32:	236a      	movne	r3, #106	@ 0x6a
 800de34:	4ea9      	ldr	r6, [pc, #676]	@ (800e0dc <_strtod_l+0x854>)
 800de36:	9308      	str	r3, [sp, #32]
 800de38:	4650      	mov	r0, sl
 800de3a:	4659      	mov	r1, fp
 800de3c:	2300      	movs	r3, #0
 800de3e:	07e7      	lsls	r7, r4, #31
 800de40:	d504      	bpl.n	800de4c <_strtod_l+0x5c4>
 800de42:	e9d6 2300 	ldrd	r2, r3, [r6]
 800de46:	f7f2 fbdf 	bl	8000608 <__aeabi_dmul>
 800de4a:	2301      	movs	r3, #1
 800de4c:	1064      	asrs	r4, r4, #1
 800de4e:	f106 0608 	add.w	r6, r6, #8
 800de52:	d1f4      	bne.n	800de3e <_strtod_l+0x5b6>
 800de54:	b10b      	cbz	r3, 800de5a <_strtod_l+0x5d2>
 800de56:	4682      	mov	sl, r0
 800de58:	468b      	mov	fp, r1
 800de5a:	9b08      	ldr	r3, [sp, #32]
 800de5c:	b1b3      	cbz	r3, 800de8c <_strtod_l+0x604>
 800de5e:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800de62:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800de66:	2b00      	cmp	r3, #0
 800de68:	4659      	mov	r1, fp
 800de6a:	dd0f      	ble.n	800de8c <_strtod_l+0x604>
 800de6c:	2b1f      	cmp	r3, #31
 800de6e:	dd56      	ble.n	800df1e <_strtod_l+0x696>
 800de70:	2b34      	cmp	r3, #52	@ 0x34
 800de72:	bfde      	ittt	le
 800de74:	f04f 33ff 	movle.w	r3, #4294967295
 800de78:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800de7c:	4093      	lslle	r3, r2
 800de7e:	f04f 0a00 	mov.w	sl, #0
 800de82:	bfcc      	ite	gt
 800de84:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800de88:	ea03 0b01 	andle.w	fp, r3, r1
 800de8c:	2200      	movs	r2, #0
 800de8e:	2300      	movs	r3, #0
 800de90:	4650      	mov	r0, sl
 800de92:	4659      	mov	r1, fp
 800de94:	f7f2 fe20 	bl	8000ad8 <__aeabi_dcmpeq>
 800de98:	2800      	cmp	r0, #0
 800de9a:	d1a7      	bne.n	800ddec <_strtod_l+0x564>
 800de9c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800de9e:	9300      	str	r3, [sp, #0]
 800dea0:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800dea2:	9805      	ldr	r0, [sp, #20]
 800dea4:	462b      	mov	r3, r5
 800dea6:	464a      	mov	r2, r9
 800dea8:	f7ff f8ce 	bl	800d048 <__s2b>
 800deac:	900b      	str	r0, [sp, #44]	@ 0x2c
 800deae:	2800      	cmp	r0, #0
 800deb0:	f43f af09 	beq.w	800dcc6 <_strtod_l+0x43e>
 800deb4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800deb6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800deb8:	2a00      	cmp	r2, #0
 800deba:	eba3 0308 	sub.w	r3, r3, r8
 800debe:	bfa8      	it	ge
 800dec0:	2300      	movge	r3, #0
 800dec2:	9312      	str	r3, [sp, #72]	@ 0x48
 800dec4:	2400      	movs	r4, #0
 800dec6:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800deca:	9316      	str	r3, [sp, #88]	@ 0x58
 800decc:	46a0      	mov	r8, r4
 800dece:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ded0:	9805      	ldr	r0, [sp, #20]
 800ded2:	6859      	ldr	r1, [r3, #4]
 800ded4:	f7ff f810 	bl	800cef8 <_Balloc>
 800ded8:	4681      	mov	r9, r0
 800deda:	2800      	cmp	r0, #0
 800dedc:	f43f aef7 	beq.w	800dcce <_strtod_l+0x446>
 800dee0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800dee2:	691a      	ldr	r2, [r3, #16]
 800dee4:	3202      	adds	r2, #2
 800dee6:	f103 010c 	add.w	r1, r3, #12
 800deea:	0092      	lsls	r2, r2, #2
 800deec:	300c      	adds	r0, #12
 800deee:	f7fe f878 	bl	800bfe2 <memcpy>
 800def2:	ec4b ab10 	vmov	d0, sl, fp
 800def6:	9805      	ldr	r0, [sp, #20]
 800def8:	aa1c      	add	r2, sp, #112	@ 0x70
 800defa:	a91b      	add	r1, sp, #108	@ 0x6c
 800defc:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800df00:	f7ff fbd6 	bl	800d6b0 <__d2b>
 800df04:	901a      	str	r0, [sp, #104]	@ 0x68
 800df06:	2800      	cmp	r0, #0
 800df08:	f43f aee1 	beq.w	800dcce <_strtod_l+0x446>
 800df0c:	9805      	ldr	r0, [sp, #20]
 800df0e:	2101      	movs	r1, #1
 800df10:	f7ff f930 	bl	800d174 <__i2b>
 800df14:	4680      	mov	r8, r0
 800df16:	b948      	cbnz	r0, 800df2c <_strtod_l+0x6a4>
 800df18:	f04f 0800 	mov.w	r8, #0
 800df1c:	e6d7      	b.n	800dcce <_strtod_l+0x446>
 800df1e:	f04f 32ff 	mov.w	r2, #4294967295
 800df22:	fa02 f303 	lsl.w	r3, r2, r3
 800df26:	ea03 0a0a 	and.w	sl, r3, sl
 800df2a:	e7af      	b.n	800de8c <_strtod_l+0x604>
 800df2c:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800df2e:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800df30:	2d00      	cmp	r5, #0
 800df32:	bfab      	itete	ge
 800df34:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800df36:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800df38:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800df3a:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800df3c:	bfac      	ite	ge
 800df3e:	18ef      	addge	r7, r5, r3
 800df40:	1b5e      	sublt	r6, r3, r5
 800df42:	9b08      	ldr	r3, [sp, #32]
 800df44:	1aed      	subs	r5, r5, r3
 800df46:	4415      	add	r5, r2
 800df48:	4b65      	ldr	r3, [pc, #404]	@ (800e0e0 <_strtod_l+0x858>)
 800df4a:	3d01      	subs	r5, #1
 800df4c:	429d      	cmp	r5, r3
 800df4e:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800df52:	da50      	bge.n	800dff6 <_strtod_l+0x76e>
 800df54:	1b5b      	subs	r3, r3, r5
 800df56:	2b1f      	cmp	r3, #31
 800df58:	eba2 0203 	sub.w	r2, r2, r3
 800df5c:	f04f 0101 	mov.w	r1, #1
 800df60:	dc3d      	bgt.n	800dfde <_strtod_l+0x756>
 800df62:	fa01 f303 	lsl.w	r3, r1, r3
 800df66:	9313      	str	r3, [sp, #76]	@ 0x4c
 800df68:	2300      	movs	r3, #0
 800df6a:	9310      	str	r3, [sp, #64]	@ 0x40
 800df6c:	18bd      	adds	r5, r7, r2
 800df6e:	9b08      	ldr	r3, [sp, #32]
 800df70:	42af      	cmp	r7, r5
 800df72:	4416      	add	r6, r2
 800df74:	441e      	add	r6, r3
 800df76:	463b      	mov	r3, r7
 800df78:	bfa8      	it	ge
 800df7a:	462b      	movge	r3, r5
 800df7c:	42b3      	cmp	r3, r6
 800df7e:	bfa8      	it	ge
 800df80:	4633      	movge	r3, r6
 800df82:	2b00      	cmp	r3, #0
 800df84:	bfc2      	ittt	gt
 800df86:	1aed      	subgt	r5, r5, r3
 800df88:	1af6      	subgt	r6, r6, r3
 800df8a:	1aff      	subgt	r7, r7, r3
 800df8c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800df8e:	2b00      	cmp	r3, #0
 800df90:	dd16      	ble.n	800dfc0 <_strtod_l+0x738>
 800df92:	4641      	mov	r1, r8
 800df94:	9805      	ldr	r0, [sp, #20]
 800df96:	461a      	mov	r2, r3
 800df98:	f7ff f9a4 	bl	800d2e4 <__pow5mult>
 800df9c:	4680      	mov	r8, r0
 800df9e:	2800      	cmp	r0, #0
 800dfa0:	d0ba      	beq.n	800df18 <_strtod_l+0x690>
 800dfa2:	4601      	mov	r1, r0
 800dfa4:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800dfa6:	9805      	ldr	r0, [sp, #20]
 800dfa8:	f7ff f8fa 	bl	800d1a0 <__multiply>
 800dfac:	900a      	str	r0, [sp, #40]	@ 0x28
 800dfae:	2800      	cmp	r0, #0
 800dfb0:	f43f ae8d 	beq.w	800dcce <_strtod_l+0x446>
 800dfb4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800dfb6:	9805      	ldr	r0, [sp, #20]
 800dfb8:	f7fe ffde 	bl	800cf78 <_Bfree>
 800dfbc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800dfbe:	931a      	str	r3, [sp, #104]	@ 0x68
 800dfc0:	2d00      	cmp	r5, #0
 800dfc2:	dc1d      	bgt.n	800e000 <_strtod_l+0x778>
 800dfc4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dfc6:	2b00      	cmp	r3, #0
 800dfc8:	dd23      	ble.n	800e012 <_strtod_l+0x78a>
 800dfca:	4649      	mov	r1, r9
 800dfcc:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800dfce:	9805      	ldr	r0, [sp, #20]
 800dfd0:	f7ff f988 	bl	800d2e4 <__pow5mult>
 800dfd4:	4681      	mov	r9, r0
 800dfd6:	b9e0      	cbnz	r0, 800e012 <_strtod_l+0x78a>
 800dfd8:	f04f 0900 	mov.w	r9, #0
 800dfdc:	e677      	b.n	800dcce <_strtod_l+0x446>
 800dfde:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800dfe2:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800dfe6:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800dfea:	35e2      	adds	r5, #226	@ 0xe2
 800dfec:	fa01 f305 	lsl.w	r3, r1, r5
 800dff0:	9310      	str	r3, [sp, #64]	@ 0x40
 800dff2:	9113      	str	r1, [sp, #76]	@ 0x4c
 800dff4:	e7ba      	b.n	800df6c <_strtod_l+0x6e4>
 800dff6:	2300      	movs	r3, #0
 800dff8:	9310      	str	r3, [sp, #64]	@ 0x40
 800dffa:	2301      	movs	r3, #1
 800dffc:	9313      	str	r3, [sp, #76]	@ 0x4c
 800dffe:	e7b5      	b.n	800df6c <_strtod_l+0x6e4>
 800e000:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800e002:	9805      	ldr	r0, [sp, #20]
 800e004:	462a      	mov	r2, r5
 800e006:	f7ff f9c7 	bl	800d398 <__lshift>
 800e00a:	901a      	str	r0, [sp, #104]	@ 0x68
 800e00c:	2800      	cmp	r0, #0
 800e00e:	d1d9      	bne.n	800dfc4 <_strtod_l+0x73c>
 800e010:	e65d      	b.n	800dcce <_strtod_l+0x446>
 800e012:	2e00      	cmp	r6, #0
 800e014:	dd07      	ble.n	800e026 <_strtod_l+0x79e>
 800e016:	4649      	mov	r1, r9
 800e018:	9805      	ldr	r0, [sp, #20]
 800e01a:	4632      	mov	r2, r6
 800e01c:	f7ff f9bc 	bl	800d398 <__lshift>
 800e020:	4681      	mov	r9, r0
 800e022:	2800      	cmp	r0, #0
 800e024:	d0d8      	beq.n	800dfd8 <_strtod_l+0x750>
 800e026:	2f00      	cmp	r7, #0
 800e028:	dd08      	ble.n	800e03c <_strtod_l+0x7b4>
 800e02a:	4641      	mov	r1, r8
 800e02c:	9805      	ldr	r0, [sp, #20]
 800e02e:	463a      	mov	r2, r7
 800e030:	f7ff f9b2 	bl	800d398 <__lshift>
 800e034:	4680      	mov	r8, r0
 800e036:	2800      	cmp	r0, #0
 800e038:	f43f ae49 	beq.w	800dcce <_strtod_l+0x446>
 800e03c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800e03e:	9805      	ldr	r0, [sp, #20]
 800e040:	464a      	mov	r2, r9
 800e042:	f7ff fa31 	bl	800d4a8 <__mdiff>
 800e046:	4604      	mov	r4, r0
 800e048:	2800      	cmp	r0, #0
 800e04a:	f43f ae40 	beq.w	800dcce <_strtod_l+0x446>
 800e04e:	68c3      	ldr	r3, [r0, #12]
 800e050:	930f      	str	r3, [sp, #60]	@ 0x3c
 800e052:	2300      	movs	r3, #0
 800e054:	60c3      	str	r3, [r0, #12]
 800e056:	4641      	mov	r1, r8
 800e058:	f7ff fa0a 	bl	800d470 <__mcmp>
 800e05c:	2800      	cmp	r0, #0
 800e05e:	da45      	bge.n	800e0ec <_strtod_l+0x864>
 800e060:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e062:	ea53 030a 	orrs.w	r3, r3, sl
 800e066:	d16b      	bne.n	800e140 <_strtod_l+0x8b8>
 800e068:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800e06c:	2b00      	cmp	r3, #0
 800e06e:	d167      	bne.n	800e140 <_strtod_l+0x8b8>
 800e070:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800e074:	0d1b      	lsrs	r3, r3, #20
 800e076:	051b      	lsls	r3, r3, #20
 800e078:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800e07c:	d960      	bls.n	800e140 <_strtod_l+0x8b8>
 800e07e:	6963      	ldr	r3, [r4, #20]
 800e080:	b913      	cbnz	r3, 800e088 <_strtod_l+0x800>
 800e082:	6923      	ldr	r3, [r4, #16]
 800e084:	2b01      	cmp	r3, #1
 800e086:	dd5b      	ble.n	800e140 <_strtod_l+0x8b8>
 800e088:	4621      	mov	r1, r4
 800e08a:	2201      	movs	r2, #1
 800e08c:	9805      	ldr	r0, [sp, #20]
 800e08e:	f7ff f983 	bl	800d398 <__lshift>
 800e092:	4641      	mov	r1, r8
 800e094:	4604      	mov	r4, r0
 800e096:	f7ff f9eb 	bl	800d470 <__mcmp>
 800e09a:	2800      	cmp	r0, #0
 800e09c:	dd50      	ble.n	800e140 <_strtod_l+0x8b8>
 800e09e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800e0a2:	9a08      	ldr	r2, [sp, #32]
 800e0a4:	0d1b      	lsrs	r3, r3, #20
 800e0a6:	051b      	lsls	r3, r3, #20
 800e0a8:	2a00      	cmp	r2, #0
 800e0aa:	d06a      	beq.n	800e182 <_strtod_l+0x8fa>
 800e0ac:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800e0b0:	d867      	bhi.n	800e182 <_strtod_l+0x8fa>
 800e0b2:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800e0b6:	f67f ae9d 	bls.w	800ddf4 <_strtod_l+0x56c>
 800e0ba:	4b0a      	ldr	r3, [pc, #40]	@ (800e0e4 <_strtod_l+0x85c>)
 800e0bc:	4650      	mov	r0, sl
 800e0be:	4659      	mov	r1, fp
 800e0c0:	2200      	movs	r2, #0
 800e0c2:	f7f2 faa1 	bl	8000608 <__aeabi_dmul>
 800e0c6:	4b08      	ldr	r3, [pc, #32]	@ (800e0e8 <_strtod_l+0x860>)
 800e0c8:	400b      	ands	r3, r1
 800e0ca:	4682      	mov	sl, r0
 800e0cc:	468b      	mov	fp, r1
 800e0ce:	2b00      	cmp	r3, #0
 800e0d0:	f47f ae08 	bne.w	800dce4 <_strtod_l+0x45c>
 800e0d4:	9a05      	ldr	r2, [sp, #20]
 800e0d6:	2322      	movs	r3, #34	@ 0x22
 800e0d8:	6013      	str	r3, [r2, #0]
 800e0da:	e603      	b.n	800dce4 <_strtod_l+0x45c>
 800e0dc:	08010fc8 	.word	0x08010fc8
 800e0e0:	fffffc02 	.word	0xfffffc02
 800e0e4:	39500000 	.word	0x39500000
 800e0e8:	7ff00000 	.word	0x7ff00000
 800e0ec:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 800e0f0:	d165      	bne.n	800e1be <_strtod_l+0x936>
 800e0f2:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800e0f4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800e0f8:	b35a      	cbz	r2, 800e152 <_strtod_l+0x8ca>
 800e0fa:	4a9f      	ldr	r2, [pc, #636]	@ (800e378 <_strtod_l+0xaf0>)
 800e0fc:	4293      	cmp	r3, r2
 800e0fe:	d12b      	bne.n	800e158 <_strtod_l+0x8d0>
 800e100:	9b08      	ldr	r3, [sp, #32]
 800e102:	4651      	mov	r1, sl
 800e104:	b303      	cbz	r3, 800e148 <_strtod_l+0x8c0>
 800e106:	4b9d      	ldr	r3, [pc, #628]	@ (800e37c <_strtod_l+0xaf4>)
 800e108:	465a      	mov	r2, fp
 800e10a:	4013      	ands	r3, r2
 800e10c:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800e110:	f04f 32ff 	mov.w	r2, #4294967295
 800e114:	d81b      	bhi.n	800e14e <_strtod_l+0x8c6>
 800e116:	0d1b      	lsrs	r3, r3, #20
 800e118:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800e11c:	fa02 f303 	lsl.w	r3, r2, r3
 800e120:	4299      	cmp	r1, r3
 800e122:	d119      	bne.n	800e158 <_strtod_l+0x8d0>
 800e124:	4b96      	ldr	r3, [pc, #600]	@ (800e380 <_strtod_l+0xaf8>)
 800e126:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800e128:	429a      	cmp	r2, r3
 800e12a:	d102      	bne.n	800e132 <_strtod_l+0x8aa>
 800e12c:	3101      	adds	r1, #1
 800e12e:	f43f adce 	beq.w	800dcce <_strtod_l+0x446>
 800e132:	4b92      	ldr	r3, [pc, #584]	@ (800e37c <_strtod_l+0xaf4>)
 800e134:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800e136:	401a      	ands	r2, r3
 800e138:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800e13c:	f04f 0a00 	mov.w	sl, #0
 800e140:	9b08      	ldr	r3, [sp, #32]
 800e142:	2b00      	cmp	r3, #0
 800e144:	d1b9      	bne.n	800e0ba <_strtod_l+0x832>
 800e146:	e5cd      	b.n	800dce4 <_strtod_l+0x45c>
 800e148:	f04f 33ff 	mov.w	r3, #4294967295
 800e14c:	e7e8      	b.n	800e120 <_strtod_l+0x898>
 800e14e:	4613      	mov	r3, r2
 800e150:	e7e6      	b.n	800e120 <_strtod_l+0x898>
 800e152:	ea53 030a 	orrs.w	r3, r3, sl
 800e156:	d0a2      	beq.n	800e09e <_strtod_l+0x816>
 800e158:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800e15a:	b1db      	cbz	r3, 800e194 <_strtod_l+0x90c>
 800e15c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800e15e:	4213      	tst	r3, r2
 800e160:	d0ee      	beq.n	800e140 <_strtod_l+0x8b8>
 800e162:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e164:	9a08      	ldr	r2, [sp, #32]
 800e166:	4650      	mov	r0, sl
 800e168:	4659      	mov	r1, fp
 800e16a:	b1bb      	cbz	r3, 800e19c <_strtod_l+0x914>
 800e16c:	f7ff fb6e 	bl	800d84c <sulp>
 800e170:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800e174:	ec53 2b10 	vmov	r2, r3, d0
 800e178:	f7f2 f890 	bl	800029c <__adddf3>
 800e17c:	4682      	mov	sl, r0
 800e17e:	468b      	mov	fp, r1
 800e180:	e7de      	b.n	800e140 <_strtod_l+0x8b8>
 800e182:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800e186:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800e18a:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800e18e:	f04f 3aff 	mov.w	sl, #4294967295
 800e192:	e7d5      	b.n	800e140 <_strtod_l+0x8b8>
 800e194:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800e196:	ea13 0f0a 	tst.w	r3, sl
 800e19a:	e7e1      	b.n	800e160 <_strtod_l+0x8d8>
 800e19c:	f7ff fb56 	bl	800d84c <sulp>
 800e1a0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800e1a4:	ec53 2b10 	vmov	r2, r3, d0
 800e1a8:	f7f2 f876 	bl	8000298 <__aeabi_dsub>
 800e1ac:	2200      	movs	r2, #0
 800e1ae:	2300      	movs	r3, #0
 800e1b0:	4682      	mov	sl, r0
 800e1b2:	468b      	mov	fp, r1
 800e1b4:	f7f2 fc90 	bl	8000ad8 <__aeabi_dcmpeq>
 800e1b8:	2800      	cmp	r0, #0
 800e1ba:	d0c1      	beq.n	800e140 <_strtod_l+0x8b8>
 800e1bc:	e61a      	b.n	800ddf4 <_strtod_l+0x56c>
 800e1be:	4641      	mov	r1, r8
 800e1c0:	4620      	mov	r0, r4
 800e1c2:	f7ff facd 	bl	800d760 <__ratio>
 800e1c6:	ec57 6b10 	vmov	r6, r7, d0
 800e1ca:	2200      	movs	r2, #0
 800e1cc:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800e1d0:	4630      	mov	r0, r6
 800e1d2:	4639      	mov	r1, r7
 800e1d4:	f7f2 fc94 	bl	8000b00 <__aeabi_dcmple>
 800e1d8:	2800      	cmp	r0, #0
 800e1da:	d06f      	beq.n	800e2bc <_strtod_l+0xa34>
 800e1dc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e1de:	2b00      	cmp	r3, #0
 800e1e0:	d17a      	bne.n	800e2d8 <_strtod_l+0xa50>
 800e1e2:	f1ba 0f00 	cmp.w	sl, #0
 800e1e6:	d158      	bne.n	800e29a <_strtod_l+0xa12>
 800e1e8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e1ea:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800e1ee:	2b00      	cmp	r3, #0
 800e1f0:	d15a      	bne.n	800e2a8 <_strtod_l+0xa20>
 800e1f2:	4b64      	ldr	r3, [pc, #400]	@ (800e384 <_strtod_l+0xafc>)
 800e1f4:	2200      	movs	r2, #0
 800e1f6:	4630      	mov	r0, r6
 800e1f8:	4639      	mov	r1, r7
 800e1fa:	f7f2 fc77 	bl	8000aec <__aeabi_dcmplt>
 800e1fe:	2800      	cmp	r0, #0
 800e200:	d159      	bne.n	800e2b6 <_strtod_l+0xa2e>
 800e202:	4630      	mov	r0, r6
 800e204:	4639      	mov	r1, r7
 800e206:	4b60      	ldr	r3, [pc, #384]	@ (800e388 <_strtod_l+0xb00>)
 800e208:	2200      	movs	r2, #0
 800e20a:	f7f2 f9fd 	bl	8000608 <__aeabi_dmul>
 800e20e:	4606      	mov	r6, r0
 800e210:	460f      	mov	r7, r1
 800e212:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800e216:	9606      	str	r6, [sp, #24]
 800e218:	9307      	str	r3, [sp, #28]
 800e21a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800e21e:	4d57      	ldr	r5, [pc, #348]	@ (800e37c <_strtod_l+0xaf4>)
 800e220:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800e224:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e226:	401d      	ands	r5, r3
 800e228:	4b58      	ldr	r3, [pc, #352]	@ (800e38c <_strtod_l+0xb04>)
 800e22a:	429d      	cmp	r5, r3
 800e22c:	f040 80b2 	bne.w	800e394 <_strtod_l+0xb0c>
 800e230:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e232:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800e236:	ec4b ab10 	vmov	d0, sl, fp
 800e23a:	f7ff f9c9 	bl	800d5d0 <__ulp>
 800e23e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800e242:	ec51 0b10 	vmov	r0, r1, d0
 800e246:	f7f2 f9df 	bl	8000608 <__aeabi_dmul>
 800e24a:	4652      	mov	r2, sl
 800e24c:	465b      	mov	r3, fp
 800e24e:	f7f2 f825 	bl	800029c <__adddf3>
 800e252:	460b      	mov	r3, r1
 800e254:	4949      	ldr	r1, [pc, #292]	@ (800e37c <_strtod_l+0xaf4>)
 800e256:	4a4e      	ldr	r2, [pc, #312]	@ (800e390 <_strtod_l+0xb08>)
 800e258:	4019      	ands	r1, r3
 800e25a:	4291      	cmp	r1, r2
 800e25c:	4682      	mov	sl, r0
 800e25e:	d942      	bls.n	800e2e6 <_strtod_l+0xa5e>
 800e260:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800e262:	4b47      	ldr	r3, [pc, #284]	@ (800e380 <_strtod_l+0xaf8>)
 800e264:	429a      	cmp	r2, r3
 800e266:	d103      	bne.n	800e270 <_strtod_l+0x9e8>
 800e268:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800e26a:	3301      	adds	r3, #1
 800e26c:	f43f ad2f 	beq.w	800dcce <_strtod_l+0x446>
 800e270:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 800e380 <_strtod_l+0xaf8>
 800e274:	f04f 3aff 	mov.w	sl, #4294967295
 800e278:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800e27a:	9805      	ldr	r0, [sp, #20]
 800e27c:	f7fe fe7c 	bl	800cf78 <_Bfree>
 800e280:	9805      	ldr	r0, [sp, #20]
 800e282:	4649      	mov	r1, r9
 800e284:	f7fe fe78 	bl	800cf78 <_Bfree>
 800e288:	9805      	ldr	r0, [sp, #20]
 800e28a:	4641      	mov	r1, r8
 800e28c:	f7fe fe74 	bl	800cf78 <_Bfree>
 800e290:	9805      	ldr	r0, [sp, #20]
 800e292:	4621      	mov	r1, r4
 800e294:	f7fe fe70 	bl	800cf78 <_Bfree>
 800e298:	e619      	b.n	800dece <_strtod_l+0x646>
 800e29a:	f1ba 0f01 	cmp.w	sl, #1
 800e29e:	d103      	bne.n	800e2a8 <_strtod_l+0xa20>
 800e2a0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e2a2:	2b00      	cmp	r3, #0
 800e2a4:	f43f ada6 	beq.w	800ddf4 <_strtod_l+0x56c>
 800e2a8:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 800e358 <_strtod_l+0xad0>
 800e2ac:	4f35      	ldr	r7, [pc, #212]	@ (800e384 <_strtod_l+0xafc>)
 800e2ae:	ed8d 7b06 	vstr	d7, [sp, #24]
 800e2b2:	2600      	movs	r6, #0
 800e2b4:	e7b1      	b.n	800e21a <_strtod_l+0x992>
 800e2b6:	4f34      	ldr	r7, [pc, #208]	@ (800e388 <_strtod_l+0xb00>)
 800e2b8:	2600      	movs	r6, #0
 800e2ba:	e7aa      	b.n	800e212 <_strtod_l+0x98a>
 800e2bc:	4b32      	ldr	r3, [pc, #200]	@ (800e388 <_strtod_l+0xb00>)
 800e2be:	4630      	mov	r0, r6
 800e2c0:	4639      	mov	r1, r7
 800e2c2:	2200      	movs	r2, #0
 800e2c4:	f7f2 f9a0 	bl	8000608 <__aeabi_dmul>
 800e2c8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e2ca:	4606      	mov	r6, r0
 800e2cc:	460f      	mov	r7, r1
 800e2ce:	2b00      	cmp	r3, #0
 800e2d0:	d09f      	beq.n	800e212 <_strtod_l+0x98a>
 800e2d2:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800e2d6:	e7a0      	b.n	800e21a <_strtod_l+0x992>
 800e2d8:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800e360 <_strtod_l+0xad8>
 800e2dc:	ed8d 7b06 	vstr	d7, [sp, #24]
 800e2e0:	ec57 6b17 	vmov	r6, r7, d7
 800e2e4:	e799      	b.n	800e21a <_strtod_l+0x992>
 800e2e6:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800e2ea:	9b08      	ldr	r3, [sp, #32]
 800e2ec:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 800e2f0:	2b00      	cmp	r3, #0
 800e2f2:	d1c1      	bne.n	800e278 <_strtod_l+0x9f0>
 800e2f4:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800e2f8:	0d1b      	lsrs	r3, r3, #20
 800e2fa:	051b      	lsls	r3, r3, #20
 800e2fc:	429d      	cmp	r5, r3
 800e2fe:	d1bb      	bne.n	800e278 <_strtod_l+0x9f0>
 800e300:	4630      	mov	r0, r6
 800e302:	4639      	mov	r1, r7
 800e304:	f7f2 fce0 	bl	8000cc8 <__aeabi_d2lz>
 800e308:	f7f2 f950 	bl	80005ac <__aeabi_l2d>
 800e30c:	4602      	mov	r2, r0
 800e30e:	460b      	mov	r3, r1
 800e310:	4630      	mov	r0, r6
 800e312:	4639      	mov	r1, r7
 800e314:	f7f1 ffc0 	bl	8000298 <__aeabi_dsub>
 800e318:	460b      	mov	r3, r1
 800e31a:	4602      	mov	r2, r0
 800e31c:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800e320:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800e324:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e326:	ea46 060a 	orr.w	r6, r6, sl
 800e32a:	431e      	orrs	r6, r3
 800e32c:	d06f      	beq.n	800e40e <_strtod_l+0xb86>
 800e32e:	a30e      	add	r3, pc, #56	@ (adr r3, 800e368 <_strtod_l+0xae0>)
 800e330:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e334:	f7f2 fbda 	bl	8000aec <__aeabi_dcmplt>
 800e338:	2800      	cmp	r0, #0
 800e33a:	f47f acd3 	bne.w	800dce4 <_strtod_l+0x45c>
 800e33e:	a30c      	add	r3, pc, #48	@ (adr r3, 800e370 <_strtod_l+0xae8>)
 800e340:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e344:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800e348:	f7f2 fbee 	bl	8000b28 <__aeabi_dcmpgt>
 800e34c:	2800      	cmp	r0, #0
 800e34e:	d093      	beq.n	800e278 <_strtod_l+0x9f0>
 800e350:	e4c8      	b.n	800dce4 <_strtod_l+0x45c>
 800e352:	bf00      	nop
 800e354:	f3af 8000 	nop.w
 800e358:	00000000 	.word	0x00000000
 800e35c:	bff00000 	.word	0xbff00000
 800e360:	00000000 	.word	0x00000000
 800e364:	3ff00000 	.word	0x3ff00000
 800e368:	94a03595 	.word	0x94a03595
 800e36c:	3fdfffff 	.word	0x3fdfffff
 800e370:	35afe535 	.word	0x35afe535
 800e374:	3fe00000 	.word	0x3fe00000
 800e378:	000fffff 	.word	0x000fffff
 800e37c:	7ff00000 	.word	0x7ff00000
 800e380:	7fefffff 	.word	0x7fefffff
 800e384:	3ff00000 	.word	0x3ff00000
 800e388:	3fe00000 	.word	0x3fe00000
 800e38c:	7fe00000 	.word	0x7fe00000
 800e390:	7c9fffff 	.word	0x7c9fffff
 800e394:	9b08      	ldr	r3, [sp, #32]
 800e396:	b323      	cbz	r3, 800e3e2 <_strtod_l+0xb5a>
 800e398:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800e39c:	d821      	bhi.n	800e3e2 <_strtod_l+0xb5a>
 800e39e:	a328      	add	r3, pc, #160	@ (adr r3, 800e440 <_strtod_l+0xbb8>)
 800e3a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e3a4:	4630      	mov	r0, r6
 800e3a6:	4639      	mov	r1, r7
 800e3a8:	f7f2 fbaa 	bl	8000b00 <__aeabi_dcmple>
 800e3ac:	b1a0      	cbz	r0, 800e3d8 <_strtod_l+0xb50>
 800e3ae:	4639      	mov	r1, r7
 800e3b0:	4630      	mov	r0, r6
 800e3b2:	f7f2 fc01 	bl	8000bb8 <__aeabi_d2uiz>
 800e3b6:	2801      	cmp	r0, #1
 800e3b8:	bf38      	it	cc
 800e3ba:	2001      	movcc	r0, #1
 800e3bc:	f7f2 f8aa 	bl	8000514 <__aeabi_ui2d>
 800e3c0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e3c2:	4606      	mov	r6, r0
 800e3c4:	460f      	mov	r7, r1
 800e3c6:	b9fb      	cbnz	r3, 800e408 <_strtod_l+0xb80>
 800e3c8:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800e3cc:	9014      	str	r0, [sp, #80]	@ 0x50
 800e3ce:	9315      	str	r3, [sp, #84]	@ 0x54
 800e3d0:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800e3d4:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800e3d8:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800e3da:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800e3de:	1b5b      	subs	r3, r3, r5
 800e3e0:	9311      	str	r3, [sp, #68]	@ 0x44
 800e3e2:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800e3e6:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800e3ea:	f7ff f8f1 	bl	800d5d0 <__ulp>
 800e3ee:	4650      	mov	r0, sl
 800e3f0:	ec53 2b10 	vmov	r2, r3, d0
 800e3f4:	4659      	mov	r1, fp
 800e3f6:	f7f2 f907 	bl	8000608 <__aeabi_dmul>
 800e3fa:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800e3fe:	f7f1 ff4d 	bl	800029c <__adddf3>
 800e402:	4682      	mov	sl, r0
 800e404:	468b      	mov	fp, r1
 800e406:	e770      	b.n	800e2ea <_strtod_l+0xa62>
 800e408:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800e40c:	e7e0      	b.n	800e3d0 <_strtod_l+0xb48>
 800e40e:	a30e      	add	r3, pc, #56	@ (adr r3, 800e448 <_strtod_l+0xbc0>)
 800e410:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e414:	f7f2 fb6a 	bl	8000aec <__aeabi_dcmplt>
 800e418:	e798      	b.n	800e34c <_strtod_l+0xac4>
 800e41a:	2300      	movs	r3, #0
 800e41c:	930e      	str	r3, [sp, #56]	@ 0x38
 800e41e:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800e420:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800e422:	6013      	str	r3, [r2, #0]
 800e424:	f7ff ba6d 	b.w	800d902 <_strtod_l+0x7a>
 800e428:	2a65      	cmp	r2, #101	@ 0x65
 800e42a:	f43f ab68 	beq.w	800dafe <_strtod_l+0x276>
 800e42e:	2a45      	cmp	r2, #69	@ 0x45
 800e430:	f43f ab65 	beq.w	800dafe <_strtod_l+0x276>
 800e434:	2301      	movs	r3, #1
 800e436:	f7ff bba0 	b.w	800db7a <_strtod_l+0x2f2>
 800e43a:	bf00      	nop
 800e43c:	f3af 8000 	nop.w
 800e440:	ffc00000 	.word	0xffc00000
 800e444:	41dfffff 	.word	0x41dfffff
 800e448:	94a03595 	.word	0x94a03595
 800e44c:	3fcfffff 	.word	0x3fcfffff

0800e450 <_strtod_r>:
 800e450:	4b01      	ldr	r3, [pc, #4]	@ (800e458 <_strtod_r+0x8>)
 800e452:	f7ff ba19 	b.w	800d888 <_strtod_l>
 800e456:	bf00      	nop
 800e458:	2000d188 	.word	0x2000d188

0800e45c <_strtol_l.isra.0>:
 800e45c:	2b24      	cmp	r3, #36	@ 0x24
 800e45e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e462:	4686      	mov	lr, r0
 800e464:	4690      	mov	r8, r2
 800e466:	d801      	bhi.n	800e46c <_strtol_l.isra.0+0x10>
 800e468:	2b01      	cmp	r3, #1
 800e46a:	d106      	bne.n	800e47a <_strtol_l.isra.0+0x1e>
 800e46c:	f7fd fd8c 	bl	800bf88 <__errno>
 800e470:	2316      	movs	r3, #22
 800e472:	6003      	str	r3, [r0, #0]
 800e474:	2000      	movs	r0, #0
 800e476:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e47a:	4834      	ldr	r0, [pc, #208]	@ (800e54c <_strtol_l.isra.0+0xf0>)
 800e47c:	460d      	mov	r5, r1
 800e47e:	462a      	mov	r2, r5
 800e480:	f815 4b01 	ldrb.w	r4, [r5], #1
 800e484:	5d06      	ldrb	r6, [r0, r4]
 800e486:	f016 0608 	ands.w	r6, r6, #8
 800e48a:	d1f8      	bne.n	800e47e <_strtol_l.isra.0+0x22>
 800e48c:	2c2d      	cmp	r4, #45	@ 0x2d
 800e48e:	d110      	bne.n	800e4b2 <_strtol_l.isra.0+0x56>
 800e490:	782c      	ldrb	r4, [r5, #0]
 800e492:	2601      	movs	r6, #1
 800e494:	1c95      	adds	r5, r2, #2
 800e496:	f033 0210 	bics.w	r2, r3, #16
 800e49a:	d115      	bne.n	800e4c8 <_strtol_l.isra.0+0x6c>
 800e49c:	2c30      	cmp	r4, #48	@ 0x30
 800e49e:	d10d      	bne.n	800e4bc <_strtol_l.isra.0+0x60>
 800e4a0:	782a      	ldrb	r2, [r5, #0]
 800e4a2:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800e4a6:	2a58      	cmp	r2, #88	@ 0x58
 800e4a8:	d108      	bne.n	800e4bc <_strtol_l.isra.0+0x60>
 800e4aa:	786c      	ldrb	r4, [r5, #1]
 800e4ac:	3502      	adds	r5, #2
 800e4ae:	2310      	movs	r3, #16
 800e4b0:	e00a      	b.n	800e4c8 <_strtol_l.isra.0+0x6c>
 800e4b2:	2c2b      	cmp	r4, #43	@ 0x2b
 800e4b4:	bf04      	itt	eq
 800e4b6:	782c      	ldrbeq	r4, [r5, #0]
 800e4b8:	1c95      	addeq	r5, r2, #2
 800e4ba:	e7ec      	b.n	800e496 <_strtol_l.isra.0+0x3a>
 800e4bc:	2b00      	cmp	r3, #0
 800e4be:	d1f6      	bne.n	800e4ae <_strtol_l.isra.0+0x52>
 800e4c0:	2c30      	cmp	r4, #48	@ 0x30
 800e4c2:	bf14      	ite	ne
 800e4c4:	230a      	movne	r3, #10
 800e4c6:	2308      	moveq	r3, #8
 800e4c8:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800e4cc:	f10c 3cff 	add.w	ip, ip, #4294967295
 800e4d0:	2200      	movs	r2, #0
 800e4d2:	fbbc f9f3 	udiv	r9, ip, r3
 800e4d6:	4610      	mov	r0, r2
 800e4d8:	fb03 ca19 	mls	sl, r3, r9, ip
 800e4dc:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800e4e0:	2f09      	cmp	r7, #9
 800e4e2:	d80f      	bhi.n	800e504 <_strtol_l.isra.0+0xa8>
 800e4e4:	463c      	mov	r4, r7
 800e4e6:	42a3      	cmp	r3, r4
 800e4e8:	dd1b      	ble.n	800e522 <_strtol_l.isra.0+0xc6>
 800e4ea:	1c57      	adds	r7, r2, #1
 800e4ec:	d007      	beq.n	800e4fe <_strtol_l.isra.0+0xa2>
 800e4ee:	4581      	cmp	r9, r0
 800e4f0:	d314      	bcc.n	800e51c <_strtol_l.isra.0+0xc0>
 800e4f2:	d101      	bne.n	800e4f8 <_strtol_l.isra.0+0x9c>
 800e4f4:	45a2      	cmp	sl, r4
 800e4f6:	db11      	blt.n	800e51c <_strtol_l.isra.0+0xc0>
 800e4f8:	fb00 4003 	mla	r0, r0, r3, r4
 800e4fc:	2201      	movs	r2, #1
 800e4fe:	f815 4b01 	ldrb.w	r4, [r5], #1
 800e502:	e7eb      	b.n	800e4dc <_strtol_l.isra.0+0x80>
 800e504:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800e508:	2f19      	cmp	r7, #25
 800e50a:	d801      	bhi.n	800e510 <_strtol_l.isra.0+0xb4>
 800e50c:	3c37      	subs	r4, #55	@ 0x37
 800e50e:	e7ea      	b.n	800e4e6 <_strtol_l.isra.0+0x8a>
 800e510:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800e514:	2f19      	cmp	r7, #25
 800e516:	d804      	bhi.n	800e522 <_strtol_l.isra.0+0xc6>
 800e518:	3c57      	subs	r4, #87	@ 0x57
 800e51a:	e7e4      	b.n	800e4e6 <_strtol_l.isra.0+0x8a>
 800e51c:	f04f 32ff 	mov.w	r2, #4294967295
 800e520:	e7ed      	b.n	800e4fe <_strtol_l.isra.0+0xa2>
 800e522:	1c53      	adds	r3, r2, #1
 800e524:	d108      	bne.n	800e538 <_strtol_l.isra.0+0xdc>
 800e526:	2322      	movs	r3, #34	@ 0x22
 800e528:	f8ce 3000 	str.w	r3, [lr]
 800e52c:	4660      	mov	r0, ip
 800e52e:	f1b8 0f00 	cmp.w	r8, #0
 800e532:	d0a0      	beq.n	800e476 <_strtol_l.isra.0+0x1a>
 800e534:	1e69      	subs	r1, r5, #1
 800e536:	e006      	b.n	800e546 <_strtol_l.isra.0+0xea>
 800e538:	b106      	cbz	r6, 800e53c <_strtol_l.isra.0+0xe0>
 800e53a:	4240      	negs	r0, r0
 800e53c:	f1b8 0f00 	cmp.w	r8, #0
 800e540:	d099      	beq.n	800e476 <_strtol_l.isra.0+0x1a>
 800e542:	2a00      	cmp	r2, #0
 800e544:	d1f6      	bne.n	800e534 <_strtol_l.isra.0+0xd8>
 800e546:	f8c8 1000 	str.w	r1, [r8]
 800e54a:	e794      	b.n	800e476 <_strtol_l.isra.0+0x1a>
 800e54c:	08010ff1 	.word	0x08010ff1

0800e550 <_strtol_r>:
 800e550:	f7ff bf84 	b.w	800e45c <_strtol_l.isra.0>

0800e554 <__ssputs_r>:
 800e554:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e558:	688e      	ldr	r6, [r1, #8]
 800e55a:	461f      	mov	r7, r3
 800e55c:	42be      	cmp	r6, r7
 800e55e:	680b      	ldr	r3, [r1, #0]
 800e560:	4682      	mov	sl, r0
 800e562:	460c      	mov	r4, r1
 800e564:	4690      	mov	r8, r2
 800e566:	d82d      	bhi.n	800e5c4 <__ssputs_r+0x70>
 800e568:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800e56c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800e570:	d026      	beq.n	800e5c0 <__ssputs_r+0x6c>
 800e572:	6965      	ldr	r5, [r4, #20]
 800e574:	6909      	ldr	r1, [r1, #16]
 800e576:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800e57a:	eba3 0901 	sub.w	r9, r3, r1
 800e57e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800e582:	1c7b      	adds	r3, r7, #1
 800e584:	444b      	add	r3, r9
 800e586:	106d      	asrs	r5, r5, #1
 800e588:	429d      	cmp	r5, r3
 800e58a:	bf38      	it	cc
 800e58c:	461d      	movcc	r5, r3
 800e58e:	0553      	lsls	r3, r2, #21
 800e590:	d527      	bpl.n	800e5e2 <__ssputs_r+0x8e>
 800e592:	4629      	mov	r1, r5
 800e594:	f7fe fc24 	bl	800cde0 <_malloc_r>
 800e598:	4606      	mov	r6, r0
 800e59a:	b360      	cbz	r0, 800e5f6 <__ssputs_r+0xa2>
 800e59c:	6921      	ldr	r1, [r4, #16]
 800e59e:	464a      	mov	r2, r9
 800e5a0:	f7fd fd1f 	bl	800bfe2 <memcpy>
 800e5a4:	89a3      	ldrh	r3, [r4, #12]
 800e5a6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800e5aa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e5ae:	81a3      	strh	r3, [r4, #12]
 800e5b0:	6126      	str	r6, [r4, #16]
 800e5b2:	6165      	str	r5, [r4, #20]
 800e5b4:	444e      	add	r6, r9
 800e5b6:	eba5 0509 	sub.w	r5, r5, r9
 800e5ba:	6026      	str	r6, [r4, #0]
 800e5bc:	60a5      	str	r5, [r4, #8]
 800e5be:	463e      	mov	r6, r7
 800e5c0:	42be      	cmp	r6, r7
 800e5c2:	d900      	bls.n	800e5c6 <__ssputs_r+0x72>
 800e5c4:	463e      	mov	r6, r7
 800e5c6:	6820      	ldr	r0, [r4, #0]
 800e5c8:	4632      	mov	r2, r6
 800e5ca:	4641      	mov	r1, r8
 800e5cc:	f000 fb7c 	bl	800ecc8 <memmove>
 800e5d0:	68a3      	ldr	r3, [r4, #8]
 800e5d2:	1b9b      	subs	r3, r3, r6
 800e5d4:	60a3      	str	r3, [r4, #8]
 800e5d6:	6823      	ldr	r3, [r4, #0]
 800e5d8:	4433      	add	r3, r6
 800e5da:	6023      	str	r3, [r4, #0]
 800e5dc:	2000      	movs	r0, #0
 800e5de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e5e2:	462a      	mov	r2, r5
 800e5e4:	f000 ff3d 	bl	800f462 <_realloc_r>
 800e5e8:	4606      	mov	r6, r0
 800e5ea:	2800      	cmp	r0, #0
 800e5ec:	d1e0      	bne.n	800e5b0 <__ssputs_r+0x5c>
 800e5ee:	6921      	ldr	r1, [r4, #16]
 800e5f0:	4650      	mov	r0, sl
 800e5f2:	f7fe fb81 	bl	800ccf8 <_free_r>
 800e5f6:	230c      	movs	r3, #12
 800e5f8:	f8ca 3000 	str.w	r3, [sl]
 800e5fc:	89a3      	ldrh	r3, [r4, #12]
 800e5fe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e602:	81a3      	strh	r3, [r4, #12]
 800e604:	f04f 30ff 	mov.w	r0, #4294967295
 800e608:	e7e9      	b.n	800e5de <__ssputs_r+0x8a>
	...

0800e60c <_svfiprintf_r>:
 800e60c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e610:	4698      	mov	r8, r3
 800e612:	898b      	ldrh	r3, [r1, #12]
 800e614:	061b      	lsls	r3, r3, #24
 800e616:	b09d      	sub	sp, #116	@ 0x74
 800e618:	4607      	mov	r7, r0
 800e61a:	460d      	mov	r5, r1
 800e61c:	4614      	mov	r4, r2
 800e61e:	d510      	bpl.n	800e642 <_svfiprintf_r+0x36>
 800e620:	690b      	ldr	r3, [r1, #16]
 800e622:	b973      	cbnz	r3, 800e642 <_svfiprintf_r+0x36>
 800e624:	2140      	movs	r1, #64	@ 0x40
 800e626:	f7fe fbdb 	bl	800cde0 <_malloc_r>
 800e62a:	6028      	str	r0, [r5, #0]
 800e62c:	6128      	str	r0, [r5, #16]
 800e62e:	b930      	cbnz	r0, 800e63e <_svfiprintf_r+0x32>
 800e630:	230c      	movs	r3, #12
 800e632:	603b      	str	r3, [r7, #0]
 800e634:	f04f 30ff 	mov.w	r0, #4294967295
 800e638:	b01d      	add	sp, #116	@ 0x74
 800e63a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e63e:	2340      	movs	r3, #64	@ 0x40
 800e640:	616b      	str	r3, [r5, #20]
 800e642:	2300      	movs	r3, #0
 800e644:	9309      	str	r3, [sp, #36]	@ 0x24
 800e646:	2320      	movs	r3, #32
 800e648:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800e64c:	f8cd 800c 	str.w	r8, [sp, #12]
 800e650:	2330      	movs	r3, #48	@ 0x30
 800e652:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800e7f0 <_svfiprintf_r+0x1e4>
 800e656:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800e65a:	f04f 0901 	mov.w	r9, #1
 800e65e:	4623      	mov	r3, r4
 800e660:	469a      	mov	sl, r3
 800e662:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e666:	b10a      	cbz	r2, 800e66c <_svfiprintf_r+0x60>
 800e668:	2a25      	cmp	r2, #37	@ 0x25
 800e66a:	d1f9      	bne.n	800e660 <_svfiprintf_r+0x54>
 800e66c:	ebba 0b04 	subs.w	fp, sl, r4
 800e670:	d00b      	beq.n	800e68a <_svfiprintf_r+0x7e>
 800e672:	465b      	mov	r3, fp
 800e674:	4622      	mov	r2, r4
 800e676:	4629      	mov	r1, r5
 800e678:	4638      	mov	r0, r7
 800e67a:	f7ff ff6b 	bl	800e554 <__ssputs_r>
 800e67e:	3001      	adds	r0, #1
 800e680:	f000 80a7 	beq.w	800e7d2 <_svfiprintf_r+0x1c6>
 800e684:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e686:	445a      	add	r2, fp
 800e688:	9209      	str	r2, [sp, #36]	@ 0x24
 800e68a:	f89a 3000 	ldrb.w	r3, [sl]
 800e68e:	2b00      	cmp	r3, #0
 800e690:	f000 809f 	beq.w	800e7d2 <_svfiprintf_r+0x1c6>
 800e694:	2300      	movs	r3, #0
 800e696:	f04f 32ff 	mov.w	r2, #4294967295
 800e69a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e69e:	f10a 0a01 	add.w	sl, sl, #1
 800e6a2:	9304      	str	r3, [sp, #16]
 800e6a4:	9307      	str	r3, [sp, #28]
 800e6a6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800e6aa:	931a      	str	r3, [sp, #104]	@ 0x68
 800e6ac:	4654      	mov	r4, sl
 800e6ae:	2205      	movs	r2, #5
 800e6b0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e6b4:	484e      	ldr	r0, [pc, #312]	@ (800e7f0 <_svfiprintf_r+0x1e4>)
 800e6b6:	f7f1 fd93 	bl	80001e0 <memchr>
 800e6ba:	9a04      	ldr	r2, [sp, #16]
 800e6bc:	b9d8      	cbnz	r0, 800e6f6 <_svfiprintf_r+0xea>
 800e6be:	06d0      	lsls	r0, r2, #27
 800e6c0:	bf44      	itt	mi
 800e6c2:	2320      	movmi	r3, #32
 800e6c4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e6c8:	0711      	lsls	r1, r2, #28
 800e6ca:	bf44      	itt	mi
 800e6cc:	232b      	movmi	r3, #43	@ 0x2b
 800e6ce:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e6d2:	f89a 3000 	ldrb.w	r3, [sl]
 800e6d6:	2b2a      	cmp	r3, #42	@ 0x2a
 800e6d8:	d015      	beq.n	800e706 <_svfiprintf_r+0xfa>
 800e6da:	9a07      	ldr	r2, [sp, #28]
 800e6dc:	4654      	mov	r4, sl
 800e6de:	2000      	movs	r0, #0
 800e6e0:	f04f 0c0a 	mov.w	ip, #10
 800e6e4:	4621      	mov	r1, r4
 800e6e6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e6ea:	3b30      	subs	r3, #48	@ 0x30
 800e6ec:	2b09      	cmp	r3, #9
 800e6ee:	d94b      	bls.n	800e788 <_svfiprintf_r+0x17c>
 800e6f0:	b1b0      	cbz	r0, 800e720 <_svfiprintf_r+0x114>
 800e6f2:	9207      	str	r2, [sp, #28]
 800e6f4:	e014      	b.n	800e720 <_svfiprintf_r+0x114>
 800e6f6:	eba0 0308 	sub.w	r3, r0, r8
 800e6fa:	fa09 f303 	lsl.w	r3, r9, r3
 800e6fe:	4313      	orrs	r3, r2
 800e700:	9304      	str	r3, [sp, #16]
 800e702:	46a2      	mov	sl, r4
 800e704:	e7d2      	b.n	800e6ac <_svfiprintf_r+0xa0>
 800e706:	9b03      	ldr	r3, [sp, #12]
 800e708:	1d19      	adds	r1, r3, #4
 800e70a:	681b      	ldr	r3, [r3, #0]
 800e70c:	9103      	str	r1, [sp, #12]
 800e70e:	2b00      	cmp	r3, #0
 800e710:	bfbb      	ittet	lt
 800e712:	425b      	neglt	r3, r3
 800e714:	f042 0202 	orrlt.w	r2, r2, #2
 800e718:	9307      	strge	r3, [sp, #28]
 800e71a:	9307      	strlt	r3, [sp, #28]
 800e71c:	bfb8      	it	lt
 800e71e:	9204      	strlt	r2, [sp, #16]
 800e720:	7823      	ldrb	r3, [r4, #0]
 800e722:	2b2e      	cmp	r3, #46	@ 0x2e
 800e724:	d10a      	bne.n	800e73c <_svfiprintf_r+0x130>
 800e726:	7863      	ldrb	r3, [r4, #1]
 800e728:	2b2a      	cmp	r3, #42	@ 0x2a
 800e72a:	d132      	bne.n	800e792 <_svfiprintf_r+0x186>
 800e72c:	9b03      	ldr	r3, [sp, #12]
 800e72e:	1d1a      	adds	r2, r3, #4
 800e730:	681b      	ldr	r3, [r3, #0]
 800e732:	9203      	str	r2, [sp, #12]
 800e734:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800e738:	3402      	adds	r4, #2
 800e73a:	9305      	str	r3, [sp, #20]
 800e73c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800e800 <_svfiprintf_r+0x1f4>
 800e740:	7821      	ldrb	r1, [r4, #0]
 800e742:	2203      	movs	r2, #3
 800e744:	4650      	mov	r0, sl
 800e746:	f7f1 fd4b 	bl	80001e0 <memchr>
 800e74a:	b138      	cbz	r0, 800e75c <_svfiprintf_r+0x150>
 800e74c:	9b04      	ldr	r3, [sp, #16]
 800e74e:	eba0 000a 	sub.w	r0, r0, sl
 800e752:	2240      	movs	r2, #64	@ 0x40
 800e754:	4082      	lsls	r2, r0
 800e756:	4313      	orrs	r3, r2
 800e758:	3401      	adds	r4, #1
 800e75a:	9304      	str	r3, [sp, #16]
 800e75c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e760:	4824      	ldr	r0, [pc, #144]	@ (800e7f4 <_svfiprintf_r+0x1e8>)
 800e762:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800e766:	2206      	movs	r2, #6
 800e768:	f7f1 fd3a 	bl	80001e0 <memchr>
 800e76c:	2800      	cmp	r0, #0
 800e76e:	d036      	beq.n	800e7de <_svfiprintf_r+0x1d2>
 800e770:	4b21      	ldr	r3, [pc, #132]	@ (800e7f8 <_svfiprintf_r+0x1ec>)
 800e772:	bb1b      	cbnz	r3, 800e7bc <_svfiprintf_r+0x1b0>
 800e774:	9b03      	ldr	r3, [sp, #12]
 800e776:	3307      	adds	r3, #7
 800e778:	f023 0307 	bic.w	r3, r3, #7
 800e77c:	3308      	adds	r3, #8
 800e77e:	9303      	str	r3, [sp, #12]
 800e780:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e782:	4433      	add	r3, r6
 800e784:	9309      	str	r3, [sp, #36]	@ 0x24
 800e786:	e76a      	b.n	800e65e <_svfiprintf_r+0x52>
 800e788:	fb0c 3202 	mla	r2, ip, r2, r3
 800e78c:	460c      	mov	r4, r1
 800e78e:	2001      	movs	r0, #1
 800e790:	e7a8      	b.n	800e6e4 <_svfiprintf_r+0xd8>
 800e792:	2300      	movs	r3, #0
 800e794:	3401      	adds	r4, #1
 800e796:	9305      	str	r3, [sp, #20]
 800e798:	4619      	mov	r1, r3
 800e79a:	f04f 0c0a 	mov.w	ip, #10
 800e79e:	4620      	mov	r0, r4
 800e7a0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e7a4:	3a30      	subs	r2, #48	@ 0x30
 800e7a6:	2a09      	cmp	r2, #9
 800e7a8:	d903      	bls.n	800e7b2 <_svfiprintf_r+0x1a6>
 800e7aa:	2b00      	cmp	r3, #0
 800e7ac:	d0c6      	beq.n	800e73c <_svfiprintf_r+0x130>
 800e7ae:	9105      	str	r1, [sp, #20]
 800e7b0:	e7c4      	b.n	800e73c <_svfiprintf_r+0x130>
 800e7b2:	fb0c 2101 	mla	r1, ip, r1, r2
 800e7b6:	4604      	mov	r4, r0
 800e7b8:	2301      	movs	r3, #1
 800e7ba:	e7f0      	b.n	800e79e <_svfiprintf_r+0x192>
 800e7bc:	ab03      	add	r3, sp, #12
 800e7be:	9300      	str	r3, [sp, #0]
 800e7c0:	462a      	mov	r2, r5
 800e7c2:	4b0e      	ldr	r3, [pc, #56]	@ (800e7fc <_svfiprintf_r+0x1f0>)
 800e7c4:	a904      	add	r1, sp, #16
 800e7c6:	4638      	mov	r0, r7
 800e7c8:	f7fc fb66 	bl	800ae98 <_printf_float>
 800e7cc:	1c42      	adds	r2, r0, #1
 800e7ce:	4606      	mov	r6, r0
 800e7d0:	d1d6      	bne.n	800e780 <_svfiprintf_r+0x174>
 800e7d2:	89ab      	ldrh	r3, [r5, #12]
 800e7d4:	065b      	lsls	r3, r3, #25
 800e7d6:	f53f af2d 	bmi.w	800e634 <_svfiprintf_r+0x28>
 800e7da:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800e7dc:	e72c      	b.n	800e638 <_svfiprintf_r+0x2c>
 800e7de:	ab03      	add	r3, sp, #12
 800e7e0:	9300      	str	r3, [sp, #0]
 800e7e2:	462a      	mov	r2, r5
 800e7e4:	4b05      	ldr	r3, [pc, #20]	@ (800e7fc <_svfiprintf_r+0x1f0>)
 800e7e6:	a904      	add	r1, sp, #16
 800e7e8:	4638      	mov	r0, r7
 800e7ea:	f7fc fded 	bl	800b3c8 <_printf_i>
 800e7ee:	e7ed      	b.n	800e7cc <_svfiprintf_r+0x1c0>
 800e7f0:	08010e25 	.word	0x08010e25
 800e7f4:	08010e2f 	.word	0x08010e2f
 800e7f8:	0800ae99 	.word	0x0800ae99
 800e7fc:	0800e555 	.word	0x0800e555
 800e800:	08010e2b 	.word	0x08010e2b

0800e804 <__sfputc_r>:
 800e804:	6893      	ldr	r3, [r2, #8]
 800e806:	3b01      	subs	r3, #1
 800e808:	2b00      	cmp	r3, #0
 800e80a:	b410      	push	{r4}
 800e80c:	6093      	str	r3, [r2, #8]
 800e80e:	da08      	bge.n	800e822 <__sfputc_r+0x1e>
 800e810:	6994      	ldr	r4, [r2, #24]
 800e812:	42a3      	cmp	r3, r4
 800e814:	db01      	blt.n	800e81a <__sfputc_r+0x16>
 800e816:	290a      	cmp	r1, #10
 800e818:	d103      	bne.n	800e822 <__sfputc_r+0x1e>
 800e81a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e81e:	f7fd bacc 	b.w	800bdba <__swbuf_r>
 800e822:	6813      	ldr	r3, [r2, #0]
 800e824:	1c58      	adds	r0, r3, #1
 800e826:	6010      	str	r0, [r2, #0]
 800e828:	7019      	strb	r1, [r3, #0]
 800e82a:	4608      	mov	r0, r1
 800e82c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e830:	4770      	bx	lr

0800e832 <__sfputs_r>:
 800e832:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e834:	4606      	mov	r6, r0
 800e836:	460f      	mov	r7, r1
 800e838:	4614      	mov	r4, r2
 800e83a:	18d5      	adds	r5, r2, r3
 800e83c:	42ac      	cmp	r4, r5
 800e83e:	d101      	bne.n	800e844 <__sfputs_r+0x12>
 800e840:	2000      	movs	r0, #0
 800e842:	e007      	b.n	800e854 <__sfputs_r+0x22>
 800e844:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e848:	463a      	mov	r2, r7
 800e84a:	4630      	mov	r0, r6
 800e84c:	f7ff ffda 	bl	800e804 <__sfputc_r>
 800e850:	1c43      	adds	r3, r0, #1
 800e852:	d1f3      	bne.n	800e83c <__sfputs_r+0xa>
 800e854:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800e858 <_vfiprintf_r>:
 800e858:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e85c:	460d      	mov	r5, r1
 800e85e:	b09d      	sub	sp, #116	@ 0x74
 800e860:	4614      	mov	r4, r2
 800e862:	4698      	mov	r8, r3
 800e864:	4606      	mov	r6, r0
 800e866:	b118      	cbz	r0, 800e870 <_vfiprintf_r+0x18>
 800e868:	6a03      	ldr	r3, [r0, #32]
 800e86a:	b90b      	cbnz	r3, 800e870 <_vfiprintf_r+0x18>
 800e86c:	f7fd f964 	bl	800bb38 <__sinit>
 800e870:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e872:	07d9      	lsls	r1, r3, #31
 800e874:	d405      	bmi.n	800e882 <_vfiprintf_r+0x2a>
 800e876:	89ab      	ldrh	r3, [r5, #12]
 800e878:	059a      	lsls	r2, r3, #22
 800e87a:	d402      	bmi.n	800e882 <_vfiprintf_r+0x2a>
 800e87c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e87e:	f7fd fbae 	bl	800bfde <__retarget_lock_acquire_recursive>
 800e882:	89ab      	ldrh	r3, [r5, #12]
 800e884:	071b      	lsls	r3, r3, #28
 800e886:	d501      	bpl.n	800e88c <_vfiprintf_r+0x34>
 800e888:	692b      	ldr	r3, [r5, #16]
 800e88a:	b99b      	cbnz	r3, 800e8b4 <_vfiprintf_r+0x5c>
 800e88c:	4629      	mov	r1, r5
 800e88e:	4630      	mov	r0, r6
 800e890:	f7fd fad2 	bl	800be38 <__swsetup_r>
 800e894:	b170      	cbz	r0, 800e8b4 <_vfiprintf_r+0x5c>
 800e896:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e898:	07dc      	lsls	r4, r3, #31
 800e89a:	d504      	bpl.n	800e8a6 <_vfiprintf_r+0x4e>
 800e89c:	f04f 30ff 	mov.w	r0, #4294967295
 800e8a0:	b01d      	add	sp, #116	@ 0x74
 800e8a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e8a6:	89ab      	ldrh	r3, [r5, #12]
 800e8a8:	0598      	lsls	r0, r3, #22
 800e8aa:	d4f7      	bmi.n	800e89c <_vfiprintf_r+0x44>
 800e8ac:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e8ae:	f7fd fb97 	bl	800bfe0 <__retarget_lock_release_recursive>
 800e8b2:	e7f3      	b.n	800e89c <_vfiprintf_r+0x44>
 800e8b4:	2300      	movs	r3, #0
 800e8b6:	9309      	str	r3, [sp, #36]	@ 0x24
 800e8b8:	2320      	movs	r3, #32
 800e8ba:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800e8be:	f8cd 800c 	str.w	r8, [sp, #12]
 800e8c2:	2330      	movs	r3, #48	@ 0x30
 800e8c4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800ea74 <_vfiprintf_r+0x21c>
 800e8c8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800e8cc:	f04f 0901 	mov.w	r9, #1
 800e8d0:	4623      	mov	r3, r4
 800e8d2:	469a      	mov	sl, r3
 800e8d4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e8d8:	b10a      	cbz	r2, 800e8de <_vfiprintf_r+0x86>
 800e8da:	2a25      	cmp	r2, #37	@ 0x25
 800e8dc:	d1f9      	bne.n	800e8d2 <_vfiprintf_r+0x7a>
 800e8de:	ebba 0b04 	subs.w	fp, sl, r4
 800e8e2:	d00b      	beq.n	800e8fc <_vfiprintf_r+0xa4>
 800e8e4:	465b      	mov	r3, fp
 800e8e6:	4622      	mov	r2, r4
 800e8e8:	4629      	mov	r1, r5
 800e8ea:	4630      	mov	r0, r6
 800e8ec:	f7ff ffa1 	bl	800e832 <__sfputs_r>
 800e8f0:	3001      	adds	r0, #1
 800e8f2:	f000 80a7 	beq.w	800ea44 <_vfiprintf_r+0x1ec>
 800e8f6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e8f8:	445a      	add	r2, fp
 800e8fa:	9209      	str	r2, [sp, #36]	@ 0x24
 800e8fc:	f89a 3000 	ldrb.w	r3, [sl]
 800e900:	2b00      	cmp	r3, #0
 800e902:	f000 809f 	beq.w	800ea44 <_vfiprintf_r+0x1ec>
 800e906:	2300      	movs	r3, #0
 800e908:	f04f 32ff 	mov.w	r2, #4294967295
 800e90c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e910:	f10a 0a01 	add.w	sl, sl, #1
 800e914:	9304      	str	r3, [sp, #16]
 800e916:	9307      	str	r3, [sp, #28]
 800e918:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800e91c:	931a      	str	r3, [sp, #104]	@ 0x68
 800e91e:	4654      	mov	r4, sl
 800e920:	2205      	movs	r2, #5
 800e922:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e926:	4853      	ldr	r0, [pc, #332]	@ (800ea74 <_vfiprintf_r+0x21c>)
 800e928:	f7f1 fc5a 	bl	80001e0 <memchr>
 800e92c:	9a04      	ldr	r2, [sp, #16]
 800e92e:	b9d8      	cbnz	r0, 800e968 <_vfiprintf_r+0x110>
 800e930:	06d1      	lsls	r1, r2, #27
 800e932:	bf44      	itt	mi
 800e934:	2320      	movmi	r3, #32
 800e936:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e93a:	0713      	lsls	r3, r2, #28
 800e93c:	bf44      	itt	mi
 800e93e:	232b      	movmi	r3, #43	@ 0x2b
 800e940:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e944:	f89a 3000 	ldrb.w	r3, [sl]
 800e948:	2b2a      	cmp	r3, #42	@ 0x2a
 800e94a:	d015      	beq.n	800e978 <_vfiprintf_r+0x120>
 800e94c:	9a07      	ldr	r2, [sp, #28]
 800e94e:	4654      	mov	r4, sl
 800e950:	2000      	movs	r0, #0
 800e952:	f04f 0c0a 	mov.w	ip, #10
 800e956:	4621      	mov	r1, r4
 800e958:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e95c:	3b30      	subs	r3, #48	@ 0x30
 800e95e:	2b09      	cmp	r3, #9
 800e960:	d94b      	bls.n	800e9fa <_vfiprintf_r+0x1a2>
 800e962:	b1b0      	cbz	r0, 800e992 <_vfiprintf_r+0x13a>
 800e964:	9207      	str	r2, [sp, #28]
 800e966:	e014      	b.n	800e992 <_vfiprintf_r+0x13a>
 800e968:	eba0 0308 	sub.w	r3, r0, r8
 800e96c:	fa09 f303 	lsl.w	r3, r9, r3
 800e970:	4313      	orrs	r3, r2
 800e972:	9304      	str	r3, [sp, #16]
 800e974:	46a2      	mov	sl, r4
 800e976:	e7d2      	b.n	800e91e <_vfiprintf_r+0xc6>
 800e978:	9b03      	ldr	r3, [sp, #12]
 800e97a:	1d19      	adds	r1, r3, #4
 800e97c:	681b      	ldr	r3, [r3, #0]
 800e97e:	9103      	str	r1, [sp, #12]
 800e980:	2b00      	cmp	r3, #0
 800e982:	bfbb      	ittet	lt
 800e984:	425b      	neglt	r3, r3
 800e986:	f042 0202 	orrlt.w	r2, r2, #2
 800e98a:	9307      	strge	r3, [sp, #28]
 800e98c:	9307      	strlt	r3, [sp, #28]
 800e98e:	bfb8      	it	lt
 800e990:	9204      	strlt	r2, [sp, #16]
 800e992:	7823      	ldrb	r3, [r4, #0]
 800e994:	2b2e      	cmp	r3, #46	@ 0x2e
 800e996:	d10a      	bne.n	800e9ae <_vfiprintf_r+0x156>
 800e998:	7863      	ldrb	r3, [r4, #1]
 800e99a:	2b2a      	cmp	r3, #42	@ 0x2a
 800e99c:	d132      	bne.n	800ea04 <_vfiprintf_r+0x1ac>
 800e99e:	9b03      	ldr	r3, [sp, #12]
 800e9a0:	1d1a      	adds	r2, r3, #4
 800e9a2:	681b      	ldr	r3, [r3, #0]
 800e9a4:	9203      	str	r2, [sp, #12]
 800e9a6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800e9aa:	3402      	adds	r4, #2
 800e9ac:	9305      	str	r3, [sp, #20]
 800e9ae:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800ea84 <_vfiprintf_r+0x22c>
 800e9b2:	7821      	ldrb	r1, [r4, #0]
 800e9b4:	2203      	movs	r2, #3
 800e9b6:	4650      	mov	r0, sl
 800e9b8:	f7f1 fc12 	bl	80001e0 <memchr>
 800e9bc:	b138      	cbz	r0, 800e9ce <_vfiprintf_r+0x176>
 800e9be:	9b04      	ldr	r3, [sp, #16]
 800e9c0:	eba0 000a 	sub.w	r0, r0, sl
 800e9c4:	2240      	movs	r2, #64	@ 0x40
 800e9c6:	4082      	lsls	r2, r0
 800e9c8:	4313      	orrs	r3, r2
 800e9ca:	3401      	adds	r4, #1
 800e9cc:	9304      	str	r3, [sp, #16]
 800e9ce:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e9d2:	4829      	ldr	r0, [pc, #164]	@ (800ea78 <_vfiprintf_r+0x220>)
 800e9d4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800e9d8:	2206      	movs	r2, #6
 800e9da:	f7f1 fc01 	bl	80001e0 <memchr>
 800e9de:	2800      	cmp	r0, #0
 800e9e0:	d03f      	beq.n	800ea62 <_vfiprintf_r+0x20a>
 800e9e2:	4b26      	ldr	r3, [pc, #152]	@ (800ea7c <_vfiprintf_r+0x224>)
 800e9e4:	bb1b      	cbnz	r3, 800ea2e <_vfiprintf_r+0x1d6>
 800e9e6:	9b03      	ldr	r3, [sp, #12]
 800e9e8:	3307      	adds	r3, #7
 800e9ea:	f023 0307 	bic.w	r3, r3, #7
 800e9ee:	3308      	adds	r3, #8
 800e9f0:	9303      	str	r3, [sp, #12]
 800e9f2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e9f4:	443b      	add	r3, r7
 800e9f6:	9309      	str	r3, [sp, #36]	@ 0x24
 800e9f8:	e76a      	b.n	800e8d0 <_vfiprintf_r+0x78>
 800e9fa:	fb0c 3202 	mla	r2, ip, r2, r3
 800e9fe:	460c      	mov	r4, r1
 800ea00:	2001      	movs	r0, #1
 800ea02:	e7a8      	b.n	800e956 <_vfiprintf_r+0xfe>
 800ea04:	2300      	movs	r3, #0
 800ea06:	3401      	adds	r4, #1
 800ea08:	9305      	str	r3, [sp, #20]
 800ea0a:	4619      	mov	r1, r3
 800ea0c:	f04f 0c0a 	mov.w	ip, #10
 800ea10:	4620      	mov	r0, r4
 800ea12:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ea16:	3a30      	subs	r2, #48	@ 0x30
 800ea18:	2a09      	cmp	r2, #9
 800ea1a:	d903      	bls.n	800ea24 <_vfiprintf_r+0x1cc>
 800ea1c:	2b00      	cmp	r3, #0
 800ea1e:	d0c6      	beq.n	800e9ae <_vfiprintf_r+0x156>
 800ea20:	9105      	str	r1, [sp, #20]
 800ea22:	e7c4      	b.n	800e9ae <_vfiprintf_r+0x156>
 800ea24:	fb0c 2101 	mla	r1, ip, r1, r2
 800ea28:	4604      	mov	r4, r0
 800ea2a:	2301      	movs	r3, #1
 800ea2c:	e7f0      	b.n	800ea10 <_vfiprintf_r+0x1b8>
 800ea2e:	ab03      	add	r3, sp, #12
 800ea30:	9300      	str	r3, [sp, #0]
 800ea32:	462a      	mov	r2, r5
 800ea34:	4b12      	ldr	r3, [pc, #72]	@ (800ea80 <_vfiprintf_r+0x228>)
 800ea36:	a904      	add	r1, sp, #16
 800ea38:	4630      	mov	r0, r6
 800ea3a:	f7fc fa2d 	bl	800ae98 <_printf_float>
 800ea3e:	4607      	mov	r7, r0
 800ea40:	1c78      	adds	r0, r7, #1
 800ea42:	d1d6      	bne.n	800e9f2 <_vfiprintf_r+0x19a>
 800ea44:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ea46:	07d9      	lsls	r1, r3, #31
 800ea48:	d405      	bmi.n	800ea56 <_vfiprintf_r+0x1fe>
 800ea4a:	89ab      	ldrh	r3, [r5, #12]
 800ea4c:	059a      	lsls	r2, r3, #22
 800ea4e:	d402      	bmi.n	800ea56 <_vfiprintf_r+0x1fe>
 800ea50:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ea52:	f7fd fac5 	bl	800bfe0 <__retarget_lock_release_recursive>
 800ea56:	89ab      	ldrh	r3, [r5, #12]
 800ea58:	065b      	lsls	r3, r3, #25
 800ea5a:	f53f af1f 	bmi.w	800e89c <_vfiprintf_r+0x44>
 800ea5e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800ea60:	e71e      	b.n	800e8a0 <_vfiprintf_r+0x48>
 800ea62:	ab03      	add	r3, sp, #12
 800ea64:	9300      	str	r3, [sp, #0]
 800ea66:	462a      	mov	r2, r5
 800ea68:	4b05      	ldr	r3, [pc, #20]	@ (800ea80 <_vfiprintf_r+0x228>)
 800ea6a:	a904      	add	r1, sp, #16
 800ea6c:	4630      	mov	r0, r6
 800ea6e:	f7fc fcab 	bl	800b3c8 <_printf_i>
 800ea72:	e7e4      	b.n	800ea3e <_vfiprintf_r+0x1e6>
 800ea74:	08010e25 	.word	0x08010e25
 800ea78:	08010e2f 	.word	0x08010e2f
 800ea7c:	0800ae99 	.word	0x0800ae99
 800ea80:	0800e833 	.word	0x0800e833
 800ea84:	08010e2b 	.word	0x08010e2b

0800ea88 <__sflush_r>:
 800ea88:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800ea8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ea90:	0716      	lsls	r6, r2, #28
 800ea92:	4605      	mov	r5, r0
 800ea94:	460c      	mov	r4, r1
 800ea96:	d454      	bmi.n	800eb42 <__sflush_r+0xba>
 800ea98:	684b      	ldr	r3, [r1, #4]
 800ea9a:	2b00      	cmp	r3, #0
 800ea9c:	dc02      	bgt.n	800eaa4 <__sflush_r+0x1c>
 800ea9e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800eaa0:	2b00      	cmp	r3, #0
 800eaa2:	dd48      	ble.n	800eb36 <__sflush_r+0xae>
 800eaa4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800eaa6:	2e00      	cmp	r6, #0
 800eaa8:	d045      	beq.n	800eb36 <__sflush_r+0xae>
 800eaaa:	2300      	movs	r3, #0
 800eaac:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800eab0:	682f      	ldr	r7, [r5, #0]
 800eab2:	6a21      	ldr	r1, [r4, #32]
 800eab4:	602b      	str	r3, [r5, #0]
 800eab6:	d030      	beq.n	800eb1a <__sflush_r+0x92>
 800eab8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800eaba:	89a3      	ldrh	r3, [r4, #12]
 800eabc:	0759      	lsls	r1, r3, #29
 800eabe:	d505      	bpl.n	800eacc <__sflush_r+0x44>
 800eac0:	6863      	ldr	r3, [r4, #4]
 800eac2:	1ad2      	subs	r2, r2, r3
 800eac4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800eac6:	b10b      	cbz	r3, 800eacc <__sflush_r+0x44>
 800eac8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800eaca:	1ad2      	subs	r2, r2, r3
 800eacc:	2300      	movs	r3, #0
 800eace:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800ead0:	6a21      	ldr	r1, [r4, #32]
 800ead2:	4628      	mov	r0, r5
 800ead4:	47b0      	blx	r6
 800ead6:	1c43      	adds	r3, r0, #1
 800ead8:	89a3      	ldrh	r3, [r4, #12]
 800eada:	d106      	bne.n	800eaea <__sflush_r+0x62>
 800eadc:	6829      	ldr	r1, [r5, #0]
 800eade:	291d      	cmp	r1, #29
 800eae0:	d82b      	bhi.n	800eb3a <__sflush_r+0xb2>
 800eae2:	4a2a      	ldr	r2, [pc, #168]	@ (800eb8c <__sflush_r+0x104>)
 800eae4:	40ca      	lsrs	r2, r1
 800eae6:	07d6      	lsls	r6, r2, #31
 800eae8:	d527      	bpl.n	800eb3a <__sflush_r+0xb2>
 800eaea:	2200      	movs	r2, #0
 800eaec:	6062      	str	r2, [r4, #4]
 800eaee:	04d9      	lsls	r1, r3, #19
 800eaf0:	6922      	ldr	r2, [r4, #16]
 800eaf2:	6022      	str	r2, [r4, #0]
 800eaf4:	d504      	bpl.n	800eb00 <__sflush_r+0x78>
 800eaf6:	1c42      	adds	r2, r0, #1
 800eaf8:	d101      	bne.n	800eafe <__sflush_r+0x76>
 800eafa:	682b      	ldr	r3, [r5, #0]
 800eafc:	b903      	cbnz	r3, 800eb00 <__sflush_r+0x78>
 800eafe:	6560      	str	r0, [r4, #84]	@ 0x54
 800eb00:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800eb02:	602f      	str	r7, [r5, #0]
 800eb04:	b1b9      	cbz	r1, 800eb36 <__sflush_r+0xae>
 800eb06:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800eb0a:	4299      	cmp	r1, r3
 800eb0c:	d002      	beq.n	800eb14 <__sflush_r+0x8c>
 800eb0e:	4628      	mov	r0, r5
 800eb10:	f7fe f8f2 	bl	800ccf8 <_free_r>
 800eb14:	2300      	movs	r3, #0
 800eb16:	6363      	str	r3, [r4, #52]	@ 0x34
 800eb18:	e00d      	b.n	800eb36 <__sflush_r+0xae>
 800eb1a:	2301      	movs	r3, #1
 800eb1c:	4628      	mov	r0, r5
 800eb1e:	47b0      	blx	r6
 800eb20:	4602      	mov	r2, r0
 800eb22:	1c50      	adds	r0, r2, #1
 800eb24:	d1c9      	bne.n	800eaba <__sflush_r+0x32>
 800eb26:	682b      	ldr	r3, [r5, #0]
 800eb28:	2b00      	cmp	r3, #0
 800eb2a:	d0c6      	beq.n	800eaba <__sflush_r+0x32>
 800eb2c:	2b1d      	cmp	r3, #29
 800eb2e:	d001      	beq.n	800eb34 <__sflush_r+0xac>
 800eb30:	2b16      	cmp	r3, #22
 800eb32:	d11e      	bne.n	800eb72 <__sflush_r+0xea>
 800eb34:	602f      	str	r7, [r5, #0]
 800eb36:	2000      	movs	r0, #0
 800eb38:	e022      	b.n	800eb80 <__sflush_r+0xf8>
 800eb3a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800eb3e:	b21b      	sxth	r3, r3
 800eb40:	e01b      	b.n	800eb7a <__sflush_r+0xf2>
 800eb42:	690f      	ldr	r7, [r1, #16]
 800eb44:	2f00      	cmp	r7, #0
 800eb46:	d0f6      	beq.n	800eb36 <__sflush_r+0xae>
 800eb48:	0793      	lsls	r3, r2, #30
 800eb4a:	680e      	ldr	r6, [r1, #0]
 800eb4c:	bf08      	it	eq
 800eb4e:	694b      	ldreq	r3, [r1, #20]
 800eb50:	600f      	str	r7, [r1, #0]
 800eb52:	bf18      	it	ne
 800eb54:	2300      	movne	r3, #0
 800eb56:	eba6 0807 	sub.w	r8, r6, r7
 800eb5a:	608b      	str	r3, [r1, #8]
 800eb5c:	f1b8 0f00 	cmp.w	r8, #0
 800eb60:	dde9      	ble.n	800eb36 <__sflush_r+0xae>
 800eb62:	6a21      	ldr	r1, [r4, #32]
 800eb64:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800eb66:	4643      	mov	r3, r8
 800eb68:	463a      	mov	r2, r7
 800eb6a:	4628      	mov	r0, r5
 800eb6c:	47b0      	blx	r6
 800eb6e:	2800      	cmp	r0, #0
 800eb70:	dc08      	bgt.n	800eb84 <__sflush_r+0xfc>
 800eb72:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800eb76:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800eb7a:	81a3      	strh	r3, [r4, #12]
 800eb7c:	f04f 30ff 	mov.w	r0, #4294967295
 800eb80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800eb84:	4407      	add	r7, r0
 800eb86:	eba8 0800 	sub.w	r8, r8, r0
 800eb8a:	e7e7      	b.n	800eb5c <__sflush_r+0xd4>
 800eb8c:	20400001 	.word	0x20400001

0800eb90 <_fflush_r>:
 800eb90:	b538      	push	{r3, r4, r5, lr}
 800eb92:	690b      	ldr	r3, [r1, #16]
 800eb94:	4605      	mov	r5, r0
 800eb96:	460c      	mov	r4, r1
 800eb98:	b913      	cbnz	r3, 800eba0 <_fflush_r+0x10>
 800eb9a:	2500      	movs	r5, #0
 800eb9c:	4628      	mov	r0, r5
 800eb9e:	bd38      	pop	{r3, r4, r5, pc}
 800eba0:	b118      	cbz	r0, 800ebaa <_fflush_r+0x1a>
 800eba2:	6a03      	ldr	r3, [r0, #32]
 800eba4:	b90b      	cbnz	r3, 800ebaa <_fflush_r+0x1a>
 800eba6:	f7fc ffc7 	bl	800bb38 <__sinit>
 800ebaa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ebae:	2b00      	cmp	r3, #0
 800ebb0:	d0f3      	beq.n	800eb9a <_fflush_r+0xa>
 800ebb2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800ebb4:	07d0      	lsls	r0, r2, #31
 800ebb6:	d404      	bmi.n	800ebc2 <_fflush_r+0x32>
 800ebb8:	0599      	lsls	r1, r3, #22
 800ebba:	d402      	bmi.n	800ebc2 <_fflush_r+0x32>
 800ebbc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ebbe:	f7fd fa0e 	bl	800bfde <__retarget_lock_acquire_recursive>
 800ebc2:	4628      	mov	r0, r5
 800ebc4:	4621      	mov	r1, r4
 800ebc6:	f7ff ff5f 	bl	800ea88 <__sflush_r>
 800ebca:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800ebcc:	07da      	lsls	r2, r3, #31
 800ebce:	4605      	mov	r5, r0
 800ebd0:	d4e4      	bmi.n	800eb9c <_fflush_r+0xc>
 800ebd2:	89a3      	ldrh	r3, [r4, #12]
 800ebd4:	059b      	lsls	r3, r3, #22
 800ebd6:	d4e1      	bmi.n	800eb9c <_fflush_r+0xc>
 800ebd8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ebda:	f7fd fa01 	bl	800bfe0 <__retarget_lock_release_recursive>
 800ebde:	e7dd      	b.n	800eb9c <_fflush_r+0xc>

0800ebe0 <fiprintf>:
 800ebe0:	b40e      	push	{r1, r2, r3}
 800ebe2:	b503      	push	{r0, r1, lr}
 800ebe4:	4601      	mov	r1, r0
 800ebe6:	ab03      	add	r3, sp, #12
 800ebe8:	4805      	ldr	r0, [pc, #20]	@ (800ec00 <fiprintf+0x20>)
 800ebea:	f853 2b04 	ldr.w	r2, [r3], #4
 800ebee:	6800      	ldr	r0, [r0, #0]
 800ebf0:	9301      	str	r3, [sp, #4]
 800ebf2:	f7ff fe31 	bl	800e858 <_vfiprintf_r>
 800ebf6:	b002      	add	sp, #8
 800ebf8:	f85d eb04 	ldr.w	lr, [sp], #4
 800ebfc:	b003      	add	sp, #12
 800ebfe:	4770      	bx	lr
 800ec00:	2000d138 	.word	0x2000d138

0800ec04 <__swhatbuf_r>:
 800ec04:	b570      	push	{r4, r5, r6, lr}
 800ec06:	460c      	mov	r4, r1
 800ec08:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ec0c:	2900      	cmp	r1, #0
 800ec0e:	b096      	sub	sp, #88	@ 0x58
 800ec10:	4615      	mov	r5, r2
 800ec12:	461e      	mov	r6, r3
 800ec14:	da0d      	bge.n	800ec32 <__swhatbuf_r+0x2e>
 800ec16:	89a3      	ldrh	r3, [r4, #12]
 800ec18:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800ec1c:	f04f 0100 	mov.w	r1, #0
 800ec20:	bf14      	ite	ne
 800ec22:	2340      	movne	r3, #64	@ 0x40
 800ec24:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800ec28:	2000      	movs	r0, #0
 800ec2a:	6031      	str	r1, [r6, #0]
 800ec2c:	602b      	str	r3, [r5, #0]
 800ec2e:	b016      	add	sp, #88	@ 0x58
 800ec30:	bd70      	pop	{r4, r5, r6, pc}
 800ec32:	466a      	mov	r2, sp
 800ec34:	f000 f874 	bl	800ed20 <_fstat_r>
 800ec38:	2800      	cmp	r0, #0
 800ec3a:	dbec      	blt.n	800ec16 <__swhatbuf_r+0x12>
 800ec3c:	9901      	ldr	r1, [sp, #4]
 800ec3e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800ec42:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800ec46:	4259      	negs	r1, r3
 800ec48:	4159      	adcs	r1, r3
 800ec4a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800ec4e:	e7eb      	b.n	800ec28 <__swhatbuf_r+0x24>

0800ec50 <__smakebuf_r>:
 800ec50:	898b      	ldrh	r3, [r1, #12]
 800ec52:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ec54:	079d      	lsls	r5, r3, #30
 800ec56:	4606      	mov	r6, r0
 800ec58:	460c      	mov	r4, r1
 800ec5a:	d507      	bpl.n	800ec6c <__smakebuf_r+0x1c>
 800ec5c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800ec60:	6023      	str	r3, [r4, #0]
 800ec62:	6123      	str	r3, [r4, #16]
 800ec64:	2301      	movs	r3, #1
 800ec66:	6163      	str	r3, [r4, #20]
 800ec68:	b003      	add	sp, #12
 800ec6a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ec6c:	ab01      	add	r3, sp, #4
 800ec6e:	466a      	mov	r2, sp
 800ec70:	f7ff ffc8 	bl	800ec04 <__swhatbuf_r>
 800ec74:	9f00      	ldr	r7, [sp, #0]
 800ec76:	4605      	mov	r5, r0
 800ec78:	4639      	mov	r1, r7
 800ec7a:	4630      	mov	r0, r6
 800ec7c:	f7fe f8b0 	bl	800cde0 <_malloc_r>
 800ec80:	b948      	cbnz	r0, 800ec96 <__smakebuf_r+0x46>
 800ec82:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ec86:	059a      	lsls	r2, r3, #22
 800ec88:	d4ee      	bmi.n	800ec68 <__smakebuf_r+0x18>
 800ec8a:	f023 0303 	bic.w	r3, r3, #3
 800ec8e:	f043 0302 	orr.w	r3, r3, #2
 800ec92:	81a3      	strh	r3, [r4, #12]
 800ec94:	e7e2      	b.n	800ec5c <__smakebuf_r+0xc>
 800ec96:	89a3      	ldrh	r3, [r4, #12]
 800ec98:	6020      	str	r0, [r4, #0]
 800ec9a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ec9e:	81a3      	strh	r3, [r4, #12]
 800eca0:	9b01      	ldr	r3, [sp, #4]
 800eca2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800eca6:	b15b      	cbz	r3, 800ecc0 <__smakebuf_r+0x70>
 800eca8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ecac:	4630      	mov	r0, r6
 800ecae:	f000 f849 	bl	800ed44 <_isatty_r>
 800ecb2:	b128      	cbz	r0, 800ecc0 <__smakebuf_r+0x70>
 800ecb4:	89a3      	ldrh	r3, [r4, #12]
 800ecb6:	f023 0303 	bic.w	r3, r3, #3
 800ecba:	f043 0301 	orr.w	r3, r3, #1
 800ecbe:	81a3      	strh	r3, [r4, #12]
 800ecc0:	89a3      	ldrh	r3, [r4, #12]
 800ecc2:	431d      	orrs	r5, r3
 800ecc4:	81a5      	strh	r5, [r4, #12]
 800ecc6:	e7cf      	b.n	800ec68 <__smakebuf_r+0x18>

0800ecc8 <memmove>:
 800ecc8:	4288      	cmp	r0, r1
 800ecca:	b510      	push	{r4, lr}
 800eccc:	eb01 0402 	add.w	r4, r1, r2
 800ecd0:	d902      	bls.n	800ecd8 <memmove+0x10>
 800ecd2:	4284      	cmp	r4, r0
 800ecd4:	4623      	mov	r3, r4
 800ecd6:	d807      	bhi.n	800ece8 <memmove+0x20>
 800ecd8:	1e43      	subs	r3, r0, #1
 800ecda:	42a1      	cmp	r1, r4
 800ecdc:	d008      	beq.n	800ecf0 <memmove+0x28>
 800ecde:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ece2:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ece6:	e7f8      	b.n	800ecda <memmove+0x12>
 800ece8:	4402      	add	r2, r0
 800ecea:	4601      	mov	r1, r0
 800ecec:	428a      	cmp	r2, r1
 800ecee:	d100      	bne.n	800ecf2 <memmove+0x2a>
 800ecf0:	bd10      	pop	{r4, pc}
 800ecf2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ecf6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ecfa:	e7f7      	b.n	800ecec <memmove+0x24>

0800ecfc <strncmp>:
 800ecfc:	b510      	push	{r4, lr}
 800ecfe:	b16a      	cbz	r2, 800ed1c <strncmp+0x20>
 800ed00:	3901      	subs	r1, #1
 800ed02:	1884      	adds	r4, r0, r2
 800ed04:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ed08:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800ed0c:	429a      	cmp	r2, r3
 800ed0e:	d103      	bne.n	800ed18 <strncmp+0x1c>
 800ed10:	42a0      	cmp	r0, r4
 800ed12:	d001      	beq.n	800ed18 <strncmp+0x1c>
 800ed14:	2a00      	cmp	r2, #0
 800ed16:	d1f5      	bne.n	800ed04 <strncmp+0x8>
 800ed18:	1ad0      	subs	r0, r2, r3
 800ed1a:	bd10      	pop	{r4, pc}
 800ed1c:	4610      	mov	r0, r2
 800ed1e:	e7fc      	b.n	800ed1a <strncmp+0x1e>

0800ed20 <_fstat_r>:
 800ed20:	b538      	push	{r3, r4, r5, lr}
 800ed22:	4d07      	ldr	r5, [pc, #28]	@ (800ed40 <_fstat_r+0x20>)
 800ed24:	2300      	movs	r3, #0
 800ed26:	4604      	mov	r4, r0
 800ed28:	4608      	mov	r0, r1
 800ed2a:	4611      	mov	r1, r2
 800ed2c:	602b      	str	r3, [r5, #0]
 800ed2e:	f7f2 f9a5 	bl	800107c <_fstat>
 800ed32:	1c43      	adds	r3, r0, #1
 800ed34:	d102      	bne.n	800ed3c <_fstat_r+0x1c>
 800ed36:	682b      	ldr	r3, [r5, #0]
 800ed38:	b103      	cbz	r3, 800ed3c <_fstat_r+0x1c>
 800ed3a:	6023      	str	r3, [r4, #0]
 800ed3c:	bd38      	pop	{r3, r4, r5, pc}
 800ed3e:	bf00      	nop
 800ed40:	2000f13c 	.word	0x2000f13c

0800ed44 <_isatty_r>:
 800ed44:	b538      	push	{r3, r4, r5, lr}
 800ed46:	4d06      	ldr	r5, [pc, #24]	@ (800ed60 <_isatty_r+0x1c>)
 800ed48:	2300      	movs	r3, #0
 800ed4a:	4604      	mov	r4, r0
 800ed4c:	4608      	mov	r0, r1
 800ed4e:	602b      	str	r3, [r5, #0]
 800ed50:	f7f2 f9a4 	bl	800109c <_isatty>
 800ed54:	1c43      	adds	r3, r0, #1
 800ed56:	d102      	bne.n	800ed5e <_isatty_r+0x1a>
 800ed58:	682b      	ldr	r3, [r5, #0]
 800ed5a:	b103      	cbz	r3, 800ed5e <_isatty_r+0x1a>
 800ed5c:	6023      	str	r3, [r4, #0]
 800ed5e:	bd38      	pop	{r3, r4, r5, pc}
 800ed60:	2000f13c 	.word	0x2000f13c

0800ed64 <_sbrk_r>:
 800ed64:	b538      	push	{r3, r4, r5, lr}
 800ed66:	4d06      	ldr	r5, [pc, #24]	@ (800ed80 <_sbrk_r+0x1c>)
 800ed68:	2300      	movs	r3, #0
 800ed6a:	4604      	mov	r4, r0
 800ed6c:	4608      	mov	r0, r1
 800ed6e:	602b      	str	r3, [r5, #0]
 800ed70:	f7f5 ff86 	bl	8004c80 <_sbrk>
 800ed74:	1c43      	adds	r3, r0, #1
 800ed76:	d102      	bne.n	800ed7e <_sbrk_r+0x1a>
 800ed78:	682b      	ldr	r3, [r5, #0]
 800ed7a:	b103      	cbz	r3, 800ed7e <_sbrk_r+0x1a>
 800ed7c:	6023      	str	r3, [r4, #0]
 800ed7e:	bd38      	pop	{r3, r4, r5, pc}
 800ed80:	2000f13c 	.word	0x2000f13c
 800ed84:	00000000 	.word	0x00000000

0800ed88 <nan>:
 800ed88:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800ed90 <nan+0x8>
 800ed8c:	4770      	bx	lr
 800ed8e:	bf00      	nop
 800ed90:	00000000 	.word	0x00000000
 800ed94:	7ff80000 	.word	0x7ff80000

0800ed98 <abort>:
 800ed98:	b508      	push	{r3, lr}
 800ed9a:	2006      	movs	r0, #6
 800ed9c:	f000 fbc4 	bl	800f528 <raise>
 800eda0:	2001      	movs	r0, #1
 800eda2:	f7f2 f9b9 	bl	8001118 <_exit>

0800eda6 <_calloc_r>:
 800eda6:	b570      	push	{r4, r5, r6, lr}
 800eda8:	fba1 5402 	umull	r5, r4, r1, r2
 800edac:	b934      	cbnz	r4, 800edbc <_calloc_r+0x16>
 800edae:	4629      	mov	r1, r5
 800edb0:	f7fe f816 	bl	800cde0 <_malloc_r>
 800edb4:	4606      	mov	r6, r0
 800edb6:	b928      	cbnz	r0, 800edc4 <_calloc_r+0x1e>
 800edb8:	4630      	mov	r0, r6
 800edba:	bd70      	pop	{r4, r5, r6, pc}
 800edbc:	220c      	movs	r2, #12
 800edbe:	6002      	str	r2, [r0, #0]
 800edc0:	2600      	movs	r6, #0
 800edc2:	e7f9      	b.n	800edb8 <_calloc_r+0x12>
 800edc4:	462a      	mov	r2, r5
 800edc6:	4621      	mov	r1, r4
 800edc8:	f7fd f88c 	bl	800bee4 <memset>
 800edcc:	e7f4      	b.n	800edb8 <_calloc_r+0x12>

0800edce <rshift>:
 800edce:	6903      	ldr	r3, [r0, #16]
 800edd0:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800edd4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800edd8:	ea4f 1261 	mov.w	r2, r1, asr #5
 800eddc:	f100 0414 	add.w	r4, r0, #20
 800ede0:	dd45      	ble.n	800ee6e <rshift+0xa0>
 800ede2:	f011 011f 	ands.w	r1, r1, #31
 800ede6:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800edea:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800edee:	d10c      	bne.n	800ee0a <rshift+0x3c>
 800edf0:	f100 0710 	add.w	r7, r0, #16
 800edf4:	4629      	mov	r1, r5
 800edf6:	42b1      	cmp	r1, r6
 800edf8:	d334      	bcc.n	800ee64 <rshift+0x96>
 800edfa:	1a9b      	subs	r3, r3, r2
 800edfc:	009b      	lsls	r3, r3, #2
 800edfe:	1eea      	subs	r2, r5, #3
 800ee00:	4296      	cmp	r6, r2
 800ee02:	bf38      	it	cc
 800ee04:	2300      	movcc	r3, #0
 800ee06:	4423      	add	r3, r4
 800ee08:	e015      	b.n	800ee36 <rshift+0x68>
 800ee0a:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800ee0e:	f1c1 0820 	rsb	r8, r1, #32
 800ee12:	40cf      	lsrs	r7, r1
 800ee14:	f105 0e04 	add.w	lr, r5, #4
 800ee18:	46a1      	mov	r9, r4
 800ee1a:	4576      	cmp	r6, lr
 800ee1c:	46f4      	mov	ip, lr
 800ee1e:	d815      	bhi.n	800ee4c <rshift+0x7e>
 800ee20:	1a9a      	subs	r2, r3, r2
 800ee22:	0092      	lsls	r2, r2, #2
 800ee24:	3a04      	subs	r2, #4
 800ee26:	3501      	adds	r5, #1
 800ee28:	42ae      	cmp	r6, r5
 800ee2a:	bf38      	it	cc
 800ee2c:	2200      	movcc	r2, #0
 800ee2e:	18a3      	adds	r3, r4, r2
 800ee30:	50a7      	str	r7, [r4, r2]
 800ee32:	b107      	cbz	r7, 800ee36 <rshift+0x68>
 800ee34:	3304      	adds	r3, #4
 800ee36:	1b1a      	subs	r2, r3, r4
 800ee38:	42a3      	cmp	r3, r4
 800ee3a:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800ee3e:	bf08      	it	eq
 800ee40:	2300      	moveq	r3, #0
 800ee42:	6102      	str	r2, [r0, #16]
 800ee44:	bf08      	it	eq
 800ee46:	6143      	streq	r3, [r0, #20]
 800ee48:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ee4c:	f8dc c000 	ldr.w	ip, [ip]
 800ee50:	fa0c fc08 	lsl.w	ip, ip, r8
 800ee54:	ea4c 0707 	orr.w	r7, ip, r7
 800ee58:	f849 7b04 	str.w	r7, [r9], #4
 800ee5c:	f85e 7b04 	ldr.w	r7, [lr], #4
 800ee60:	40cf      	lsrs	r7, r1
 800ee62:	e7da      	b.n	800ee1a <rshift+0x4c>
 800ee64:	f851 cb04 	ldr.w	ip, [r1], #4
 800ee68:	f847 cf04 	str.w	ip, [r7, #4]!
 800ee6c:	e7c3      	b.n	800edf6 <rshift+0x28>
 800ee6e:	4623      	mov	r3, r4
 800ee70:	e7e1      	b.n	800ee36 <rshift+0x68>

0800ee72 <__hexdig_fun>:
 800ee72:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800ee76:	2b09      	cmp	r3, #9
 800ee78:	d802      	bhi.n	800ee80 <__hexdig_fun+0xe>
 800ee7a:	3820      	subs	r0, #32
 800ee7c:	b2c0      	uxtb	r0, r0
 800ee7e:	4770      	bx	lr
 800ee80:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800ee84:	2b05      	cmp	r3, #5
 800ee86:	d801      	bhi.n	800ee8c <__hexdig_fun+0x1a>
 800ee88:	3847      	subs	r0, #71	@ 0x47
 800ee8a:	e7f7      	b.n	800ee7c <__hexdig_fun+0xa>
 800ee8c:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800ee90:	2b05      	cmp	r3, #5
 800ee92:	d801      	bhi.n	800ee98 <__hexdig_fun+0x26>
 800ee94:	3827      	subs	r0, #39	@ 0x27
 800ee96:	e7f1      	b.n	800ee7c <__hexdig_fun+0xa>
 800ee98:	2000      	movs	r0, #0
 800ee9a:	4770      	bx	lr

0800ee9c <__gethex>:
 800ee9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eea0:	b085      	sub	sp, #20
 800eea2:	468a      	mov	sl, r1
 800eea4:	9302      	str	r3, [sp, #8]
 800eea6:	680b      	ldr	r3, [r1, #0]
 800eea8:	9001      	str	r0, [sp, #4]
 800eeaa:	4690      	mov	r8, r2
 800eeac:	1c9c      	adds	r4, r3, #2
 800eeae:	46a1      	mov	r9, r4
 800eeb0:	f814 0b01 	ldrb.w	r0, [r4], #1
 800eeb4:	2830      	cmp	r0, #48	@ 0x30
 800eeb6:	d0fa      	beq.n	800eeae <__gethex+0x12>
 800eeb8:	eba9 0303 	sub.w	r3, r9, r3
 800eebc:	f1a3 0b02 	sub.w	fp, r3, #2
 800eec0:	f7ff ffd7 	bl	800ee72 <__hexdig_fun>
 800eec4:	4605      	mov	r5, r0
 800eec6:	2800      	cmp	r0, #0
 800eec8:	d168      	bne.n	800ef9c <__gethex+0x100>
 800eeca:	49a0      	ldr	r1, [pc, #640]	@ (800f14c <__gethex+0x2b0>)
 800eecc:	2201      	movs	r2, #1
 800eece:	4648      	mov	r0, r9
 800eed0:	f7ff ff14 	bl	800ecfc <strncmp>
 800eed4:	4607      	mov	r7, r0
 800eed6:	2800      	cmp	r0, #0
 800eed8:	d167      	bne.n	800efaa <__gethex+0x10e>
 800eeda:	f899 0001 	ldrb.w	r0, [r9, #1]
 800eede:	4626      	mov	r6, r4
 800eee0:	f7ff ffc7 	bl	800ee72 <__hexdig_fun>
 800eee4:	2800      	cmp	r0, #0
 800eee6:	d062      	beq.n	800efae <__gethex+0x112>
 800eee8:	4623      	mov	r3, r4
 800eeea:	7818      	ldrb	r0, [r3, #0]
 800eeec:	2830      	cmp	r0, #48	@ 0x30
 800eeee:	4699      	mov	r9, r3
 800eef0:	f103 0301 	add.w	r3, r3, #1
 800eef4:	d0f9      	beq.n	800eeea <__gethex+0x4e>
 800eef6:	f7ff ffbc 	bl	800ee72 <__hexdig_fun>
 800eefa:	fab0 f580 	clz	r5, r0
 800eefe:	096d      	lsrs	r5, r5, #5
 800ef00:	f04f 0b01 	mov.w	fp, #1
 800ef04:	464a      	mov	r2, r9
 800ef06:	4616      	mov	r6, r2
 800ef08:	3201      	adds	r2, #1
 800ef0a:	7830      	ldrb	r0, [r6, #0]
 800ef0c:	f7ff ffb1 	bl	800ee72 <__hexdig_fun>
 800ef10:	2800      	cmp	r0, #0
 800ef12:	d1f8      	bne.n	800ef06 <__gethex+0x6a>
 800ef14:	498d      	ldr	r1, [pc, #564]	@ (800f14c <__gethex+0x2b0>)
 800ef16:	2201      	movs	r2, #1
 800ef18:	4630      	mov	r0, r6
 800ef1a:	f7ff feef 	bl	800ecfc <strncmp>
 800ef1e:	2800      	cmp	r0, #0
 800ef20:	d13f      	bne.n	800efa2 <__gethex+0x106>
 800ef22:	b944      	cbnz	r4, 800ef36 <__gethex+0x9a>
 800ef24:	1c74      	adds	r4, r6, #1
 800ef26:	4622      	mov	r2, r4
 800ef28:	4616      	mov	r6, r2
 800ef2a:	3201      	adds	r2, #1
 800ef2c:	7830      	ldrb	r0, [r6, #0]
 800ef2e:	f7ff ffa0 	bl	800ee72 <__hexdig_fun>
 800ef32:	2800      	cmp	r0, #0
 800ef34:	d1f8      	bne.n	800ef28 <__gethex+0x8c>
 800ef36:	1ba4      	subs	r4, r4, r6
 800ef38:	00a7      	lsls	r7, r4, #2
 800ef3a:	7833      	ldrb	r3, [r6, #0]
 800ef3c:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800ef40:	2b50      	cmp	r3, #80	@ 0x50
 800ef42:	d13e      	bne.n	800efc2 <__gethex+0x126>
 800ef44:	7873      	ldrb	r3, [r6, #1]
 800ef46:	2b2b      	cmp	r3, #43	@ 0x2b
 800ef48:	d033      	beq.n	800efb2 <__gethex+0x116>
 800ef4a:	2b2d      	cmp	r3, #45	@ 0x2d
 800ef4c:	d034      	beq.n	800efb8 <__gethex+0x11c>
 800ef4e:	1c71      	adds	r1, r6, #1
 800ef50:	2400      	movs	r4, #0
 800ef52:	7808      	ldrb	r0, [r1, #0]
 800ef54:	f7ff ff8d 	bl	800ee72 <__hexdig_fun>
 800ef58:	1e43      	subs	r3, r0, #1
 800ef5a:	b2db      	uxtb	r3, r3
 800ef5c:	2b18      	cmp	r3, #24
 800ef5e:	d830      	bhi.n	800efc2 <__gethex+0x126>
 800ef60:	f1a0 0210 	sub.w	r2, r0, #16
 800ef64:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800ef68:	f7ff ff83 	bl	800ee72 <__hexdig_fun>
 800ef6c:	f100 3cff 	add.w	ip, r0, #4294967295
 800ef70:	fa5f fc8c 	uxtb.w	ip, ip
 800ef74:	f1bc 0f18 	cmp.w	ip, #24
 800ef78:	f04f 030a 	mov.w	r3, #10
 800ef7c:	d91e      	bls.n	800efbc <__gethex+0x120>
 800ef7e:	b104      	cbz	r4, 800ef82 <__gethex+0xe6>
 800ef80:	4252      	negs	r2, r2
 800ef82:	4417      	add	r7, r2
 800ef84:	f8ca 1000 	str.w	r1, [sl]
 800ef88:	b1ed      	cbz	r5, 800efc6 <__gethex+0x12a>
 800ef8a:	f1bb 0f00 	cmp.w	fp, #0
 800ef8e:	bf0c      	ite	eq
 800ef90:	2506      	moveq	r5, #6
 800ef92:	2500      	movne	r5, #0
 800ef94:	4628      	mov	r0, r5
 800ef96:	b005      	add	sp, #20
 800ef98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ef9c:	2500      	movs	r5, #0
 800ef9e:	462c      	mov	r4, r5
 800efa0:	e7b0      	b.n	800ef04 <__gethex+0x68>
 800efa2:	2c00      	cmp	r4, #0
 800efa4:	d1c7      	bne.n	800ef36 <__gethex+0x9a>
 800efa6:	4627      	mov	r7, r4
 800efa8:	e7c7      	b.n	800ef3a <__gethex+0x9e>
 800efaa:	464e      	mov	r6, r9
 800efac:	462f      	mov	r7, r5
 800efae:	2501      	movs	r5, #1
 800efb0:	e7c3      	b.n	800ef3a <__gethex+0x9e>
 800efb2:	2400      	movs	r4, #0
 800efb4:	1cb1      	adds	r1, r6, #2
 800efb6:	e7cc      	b.n	800ef52 <__gethex+0xb6>
 800efb8:	2401      	movs	r4, #1
 800efba:	e7fb      	b.n	800efb4 <__gethex+0x118>
 800efbc:	fb03 0002 	mla	r0, r3, r2, r0
 800efc0:	e7ce      	b.n	800ef60 <__gethex+0xc4>
 800efc2:	4631      	mov	r1, r6
 800efc4:	e7de      	b.n	800ef84 <__gethex+0xe8>
 800efc6:	eba6 0309 	sub.w	r3, r6, r9
 800efca:	3b01      	subs	r3, #1
 800efcc:	4629      	mov	r1, r5
 800efce:	2b07      	cmp	r3, #7
 800efd0:	dc0a      	bgt.n	800efe8 <__gethex+0x14c>
 800efd2:	9801      	ldr	r0, [sp, #4]
 800efd4:	f7fd ff90 	bl	800cef8 <_Balloc>
 800efd8:	4604      	mov	r4, r0
 800efda:	b940      	cbnz	r0, 800efee <__gethex+0x152>
 800efdc:	4b5c      	ldr	r3, [pc, #368]	@ (800f150 <__gethex+0x2b4>)
 800efde:	4602      	mov	r2, r0
 800efe0:	21e4      	movs	r1, #228	@ 0xe4
 800efe2:	485c      	ldr	r0, [pc, #368]	@ (800f154 <__gethex+0x2b8>)
 800efe4:	f7fd f812 	bl	800c00c <__assert_func>
 800efe8:	3101      	adds	r1, #1
 800efea:	105b      	asrs	r3, r3, #1
 800efec:	e7ef      	b.n	800efce <__gethex+0x132>
 800efee:	f100 0a14 	add.w	sl, r0, #20
 800eff2:	2300      	movs	r3, #0
 800eff4:	4655      	mov	r5, sl
 800eff6:	469b      	mov	fp, r3
 800eff8:	45b1      	cmp	r9, r6
 800effa:	d337      	bcc.n	800f06c <__gethex+0x1d0>
 800effc:	f845 bb04 	str.w	fp, [r5], #4
 800f000:	eba5 050a 	sub.w	r5, r5, sl
 800f004:	10ad      	asrs	r5, r5, #2
 800f006:	6125      	str	r5, [r4, #16]
 800f008:	4658      	mov	r0, fp
 800f00a:	f7fe f867 	bl	800d0dc <__hi0bits>
 800f00e:	016d      	lsls	r5, r5, #5
 800f010:	f8d8 6000 	ldr.w	r6, [r8]
 800f014:	1a2d      	subs	r5, r5, r0
 800f016:	42b5      	cmp	r5, r6
 800f018:	dd54      	ble.n	800f0c4 <__gethex+0x228>
 800f01a:	1bad      	subs	r5, r5, r6
 800f01c:	4629      	mov	r1, r5
 800f01e:	4620      	mov	r0, r4
 800f020:	f7fe fbf3 	bl	800d80a <__any_on>
 800f024:	4681      	mov	r9, r0
 800f026:	b178      	cbz	r0, 800f048 <__gethex+0x1ac>
 800f028:	1e6b      	subs	r3, r5, #1
 800f02a:	1159      	asrs	r1, r3, #5
 800f02c:	f003 021f 	and.w	r2, r3, #31
 800f030:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800f034:	f04f 0901 	mov.w	r9, #1
 800f038:	fa09 f202 	lsl.w	r2, r9, r2
 800f03c:	420a      	tst	r2, r1
 800f03e:	d003      	beq.n	800f048 <__gethex+0x1ac>
 800f040:	454b      	cmp	r3, r9
 800f042:	dc36      	bgt.n	800f0b2 <__gethex+0x216>
 800f044:	f04f 0902 	mov.w	r9, #2
 800f048:	4629      	mov	r1, r5
 800f04a:	4620      	mov	r0, r4
 800f04c:	f7ff febf 	bl	800edce <rshift>
 800f050:	442f      	add	r7, r5
 800f052:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800f056:	42bb      	cmp	r3, r7
 800f058:	da42      	bge.n	800f0e0 <__gethex+0x244>
 800f05a:	9801      	ldr	r0, [sp, #4]
 800f05c:	4621      	mov	r1, r4
 800f05e:	f7fd ff8b 	bl	800cf78 <_Bfree>
 800f062:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800f064:	2300      	movs	r3, #0
 800f066:	6013      	str	r3, [r2, #0]
 800f068:	25a3      	movs	r5, #163	@ 0xa3
 800f06a:	e793      	b.n	800ef94 <__gethex+0xf8>
 800f06c:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800f070:	2a2e      	cmp	r2, #46	@ 0x2e
 800f072:	d012      	beq.n	800f09a <__gethex+0x1fe>
 800f074:	2b20      	cmp	r3, #32
 800f076:	d104      	bne.n	800f082 <__gethex+0x1e6>
 800f078:	f845 bb04 	str.w	fp, [r5], #4
 800f07c:	f04f 0b00 	mov.w	fp, #0
 800f080:	465b      	mov	r3, fp
 800f082:	7830      	ldrb	r0, [r6, #0]
 800f084:	9303      	str	r3, [sp, #12]
 800f086:	f7ff fef4 	bl	800ee72 <__hexdig_fun>
 800f08a:	9b03      	ldr	r3, [sp, #12]
 800f08c:	f000 000f 	and.w	r0, r0, #15
 800f090:	4098      	lsls	r0, r3
 800f092:	ea4b 0b00 	orr.w	fp, fp, r0
 800f096:	3304      	adds	r3, #4
 800f098:	e7ae      	b.n	800eff8 <__gethex+0x15c>
 800f09a:	45b1      	cmp	r9, r6
 800f09c:	d8ea      	bhi.n	800f074 <__gethex+0x1d8>
 800f09e:	492b      	ldr	r1, [pc, #172]	@ (800f14c <__gethex+0x2b0>)
 800f0a0:	9303      	str	r3, [sp, #12]
 800f0a2:	2201      	movs	r2, #1
 800f0a4:	4630      	mov	r0, r6
 800f0a6:	f7ff fe29 	bl	800ecfc <strncmp>
 800f0aa:	9b03      	ldr	r3, [sp, #12]
 800f0ac:	2800      	cmp	r0, #0
 800f0ae:	d1e1      	bne.n	800f074 <__gethex+0x1d8>
 800f0b0:	e7a2      	b.n	800eff8 <__gethex+0x15c>
 800f0b2:	1ea9      	subs	r1, r5, #2
 800f0b4:	4620      	mov	r0, r4
 800f0b6:	f7fe fba8 	bl	800d80a <__any_on>
 800f0ba:	2800      	cmp	r0, #0
 800f0bc:	d0c2      	beq.n	800f044 <__gethex+0x1a8>
 800f0be:	f04f 0903 	mov.w	r9, #3
 800f0c2:	e7c1      	b.n	800f048 <__gethex+0x1ac>
 800f0c4:	da09      	bge.n	800f0da <__gethex+0x23e>
 800f0c6:	1b75      	subs	r5, r6, r5
 800f0c8:	4621      	mov	r1, r4
 800f0ca:	9801      	ldr	r0, [sp, #4]
 800f0cc:	462a      	mov	r2, r5
 800f0ce:	f7fe f963 	bl	800d398 <__lshift>
 800f0d2:	1b7f      	subs	r7, r7, r5
 800f0d4:	4604      	mov	r4, r0
 800f0d6:	f100 0a14 	add.w	sl, r0, #20
 800f0da:	f04f 0900 	mov.w	r9, #0
 800f0de:	e7b8      	b.n	800f052 <__gethex+0x1b6>
 800f0e0:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800f0e4:	42bd      	cmp	r5, r7
 800f0e6:	dd6f      	ble.n	800f1c8 <__gethex+0x32c>
 800f0e8:	1bed      	subs	r5, r5, r7
 800f0ea:	42ae      	cmp	r6, r5
 800f0ec:	dc34      	bgt.n	800f158 <__gethex+0x2bc>
 800f0ee:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800f0f2:	2b02      	cmp	r3, #2
 800f0f4:	d022      	beq.n	800f13c <__gethex+0x2a0>
 800f0f6:	2b03      	cmp	r3, #3
 800f0f8:	d024      	beq.n	800f144 <__gethex+0x2a8>
 800f0fa:	2b01      	cmp	r3, #1
 800f0fc:	d115      	bne.n	800f12a <__gethex+0x28e>
 800f0fe:	42ae      	cmp	r6, r5
 800f100:	d113      	bne.n	800f12a <__gethex+0x28e>
 800f102:	2e01      	cmp	r6, #1
 800f104:	d10b      	bne.n	800f11e <__gethex+0x282>
 800f106:	9a02      	ldr	r2, [sp, #8]
 800f108:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800f10c:	6013      	str	r3, [r2, #0]
 800f10e:	2301      	movs	r3, #1
 800f110:	6123      	str	r3, [r4, #16]
 800f112:	f8ca 3000 	str.w	r3, [sl]
 800f116:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f118:	2562      	movs	r5, #98	@ 0x62
 800f11a:	601c      	str	r4, [r3, #0]
 800f11c:	e73a      	b.n	800ef94 <__gethex+0xf8>
 800f11e:	1e71      	subs	r1, r6, #1
 800f120:	4620      	mov	r0, r4
 800f122:	f7fe fb72 	bl	800d80a <__any_on>
 800f126:	2800      	cmp	r0, #0
 800f128:	d1ed      	bne.n	800f106 <__gethex+0x26a>
 800f12a:	9801      	ldr	r0, [sp, #4]
 800f12c:	4621      	mov	r1, r4
 800f12e:	f7fd ff23 	bl	800cf78 <_Bfree>
 800f132:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800f134:	2300      	movs	r3, #0
 800f136:	6013      	str	r3, [r2, #0]
 800f138:	2550      	movs	r5, #80	@ 0x50
 800f13a:	e72b      	b.n	800ef94 <__gethex+0xf8>
 800f13c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f13e:	2b00      	cmp	r3, #0
 800f140:	d1f3      	bne.n	800f12a <__gethex+0x28e>
 800f142:	e7e0      	b.n	800f106 <__gethex+0x26a>
 800f144:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f146:	2b00      	cmp	r3, #0
 800f148:	d1dd      	bne.n	800f106 <__gethex+0x26a>
 800f14a:	e7ee      	b.n	800f12a <__gethex+0x28e>
 800f14c:	08010e23 	.word	0x08010e23
 800f150:	08010db9 	.word	0x08010db9
 800f154:	08010e3e 	.word	0x08010e3e
 800f158:	1e6f      	subs	r7, r5, #1
 800f15a:	f1b9 0f00 	cmp.w	r9, #0
 800f15e:	d130      	bne.n	800f1c2 <__gethex+0x326>
 800f160:	b127      	cbz	r7, 800f16c <__gethex+0x2d0>
 800f162:	4639      	mov	r1, r7
 800f164:	4620      	mov	r0, r4
 800f166:	f7fe fb50 	bl	800d80a <__any_on>
 800f16a:	4681      	mov	r9, r0
 800f16c:	117a      	asrs	r2, r7, #5
 800f16e:	2301      	movs	r3, #1
 800f170:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800f174:	f007 071f 	and.w	r7, r7, #31
 800f178:	40bb      	lsls	r3, r7
 800f17a:	4213      	tst	r3, r2
 800f17c:	4629      	mov	r1, r5
 800f17e:	4620      	mov	r0, r4
 800f180:	bf18      	it	ne
 800f182:	f049 0902 	orrne.w	r9, r9, #2
 800f186:	f7ff fe22 	bl	800edce <rshift>
 800f18a:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800f18e:	1b76      	subs	r6, r6, r5
 800f190:	2502      	movs	r5, #2
 800f192:	f1b9 0f00 	cmp.w	r9, #0
 800f196:	d047      	beq.n	800f228 <__gethex+0x38c>
 800f198:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800f19c:	2b02      	cmp	r3, #2
 800f19e:	d015      	beq.n	800f1cc <__gethex+0x330>
 800f1a0:	2b03      	cmp	r3, #3
 800f1a2:	d017      	beq.n	800f1d4 <__gethex+0x338>
 800f1a4:	2b01      	cmp	r3, #1
 800f1a6:	d109      	bne.n	800f1bc <__gethex+0x320>
 800f1a8:	f019 0f02 	tst.w	r9, #2
 800f1ac:	d006      	beq.n	800f1bc <__gethex+0x320>
 800f1ae:	f8da 3000 	ldr.w	r3, [sl]
 800f1b2:	ea49 0903 	orr.w	r9, r9, r3
 800f1b6:	f019 0f01 	tst.w	r9, #1
 800f1ba:	d10e      	bne.n	800f1da <__gethex+0x33e>
 800f1bc:	f045 0510 	orr.w	r5, r5, #16
 800f1c0:	e032      	b.n	800f228 <__gethex+0x38c>
 800f1c2:	f04f 0901 	mov.w	r9, #1
 800f1c6:	e7d1      	b.n	800f16c <__gethex+0x2d0>
 800f1c8:	2501      	movs	r5, #1
 800f1ca:	e7e2      	b.n	800f192 <__gethex+0x2f6>
 800f1cc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f1ce:	f1c3 0301 	rsb	r3, r3, #1
 800f1d2:	930f      	str	r3, [sp, #60]	@ 0x3c
 800f1d4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f1d6:	2b00      	cmp	r3, #0
 800f1d8:	d0f0      	beq.n	800f1bc <__gethex+0x320>
 800f1da:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800f1de:	f104 0314 	add.w	r3, r4, #20
 800f1e2:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800f1e6:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800f1ea:	f04f 0c00 	mov.w	ip, #0
 800f1ee:	4618      	mov	r0, r3
 800f1f0:	f853 2b04 	ldr.w	r2, [r3], #4
 800f1f4:	f1b2 3fff 	cmp.w	r2, #4294967295
 800f1f8:	d01b      	beq.n	800f232 <__gethex+0x396>
 800f1fa:	3201      	adds	r2, #1
 800f1fc:	6002      	str	r2, [r0, #0]
 800f1fe:	2d02      	cmp	r5, #2
 800f200:	f104 0314 	add.w	r3, r4, #20
 800f204:	d13c      	bne.n	800f280 <__gethex+0x3e4>
 800f206:	f8d8 2000 	ldr.w	r2, [r8]
 800f20a:	3a01      	subs	r2, #1
 800f20c:	42b2      	cmp	r2, r6
 800f20e:	d109      	bne.n	800f224 <__gethex+0x388>
 800f210:	1171      	asrs	r1, r6, #5
 800f212:	2201      	movs	r2, #1
 800f214:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800f218:	f006 061f 	and.w	r6, r6, #31
 800f21c:	fa02 f606 	lsl.w	r6, r2, r6
 800f220:	421e      	tst	r6, r3
 800f222:	d13a      	bne.n	800f29a <__gethex+0x3fe>
 800f224:	f045 0520 	orr.w	r5, r5, #32
 800f228:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f22a:	601c      	str	r4, [r3, #0]
 800f22c:	9b02      	ldr	r3, [sp, #8]
 800f22e:	601f      	str	r7, [r3, #0]
 800f230:	e6b0      	b.n	800ef94 <__gethex+0xf8>
 800f232:	4299      	cmp	r1, r3
 800f234:	f843 cc04 	str.w	ip, [r3, #-4]
 800f238:	d8d9      	bhi.n	800f1ee <__gethex+0x352>
 800f23a:	68a3      	ldr	r3, [r4, #8]
 800f23c:	459b      	cmp	fp, r3
 800f23e:	db17      	blt.n	800f270 <__gethex+0x3d4>
 800f240:	6861      	ldr	r1, [r4, #4]
 800f242:	9801      	ldr	r0, [sp, #4]
 800f244:	3101      	adds	r1, #1
 800f246:	f7fd fe57 	bl	800cef8 <_Balloc>
 800f24a:	4681      	mov	r9, r0
 800f24c:	b918      	cbnz	r0, 800f256 <__gethex+0x3ba>
 800f24e:	4b1a      	ldr	r3, [pc, #104]	@ (800f2b8 <__gethex+0x41c>)
 800f250:	4602      	mov	r2, r0
 800f252:	2184      	movs	r1, #132	@ 0x84
 800f254:	e6c5      	b.n	800efe2 <__gethex+0x146>
 800f256:	6922      	ldr	r2, [r4, #16]
 800f258:	3202      	adds	r2, #2
 800f25a:	f104 010c 	add.w	r1, r4, #12
 800f25e:	0092      	lsls	r2, r2, #2
 800f260:	300c      	adds	r0, #12
 800f262:	f7fc febe 	bl	800bfe2 <memcpy>
 800f266:	4621      	mov	r1, r4
 800f268:	9801      	ldr	r0, [sp, #4]
 800f26a:	f7fd fe85 	bl	800cf78 <_Bfree>
 800f26e:	464c      	mov	r4, r9
 800f270:	6923      	ldr	r3, [r4, #16]
 800f272:	1c5a      	adds	r2, r3, #1
 800f274:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800f278:	6122      	str	r2, [r4, #16]
 800f27a:	2201      	movs	r2, #1
 800f27c:	615a      	str	r2, [r3, #20]
 800f27e:	e7be      	b.n	800f1fe <__gethex+0x362>
 800f280:	6922      	ldr	r2, [r4, #16]
 800f282:	455a      	cmp	r2, fp
 800f284:	dd0b      	ble.n	800f29e <__gethex+0x402>
 800f286:	2101      	movs	r1, #1
 800f288:	4620      	mov	r0, r4
 800f28a:	f7ff fda0 	bl	800edce <rshift>
 800f28e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800f292:	3701      	adds	r7, #1
 800f294:	42bb      	cmp	r3, r7
 800f296:	f6ff aee0 	blt.w	800f05a <__gethex+0x1be>
 800f29a:	2501      	movs	r5, #1
 800f29c:	e7c2      	b.n	800f224 <__gethex+0x388>
 800f29e:	f016 061f 	ands.w	r6, r6, #31
 800f2a2:	d0fa      	beq.n	800f29a <__gethex+0x3fe>
 800f2a4:	4453      	add	r3, sl
 800f2a6:	f1c6 0620 	rsb	r6, r6, #32
 800f2aa:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800f2ae:	f7fd ff15 	bl	800d0dc <__hi0bits>
 800f2b2:	42b0      	cmp	r0, r6
 800f2b4:	dbe7      	blt.n	800f286 <__gethex+0x3ea>
 800f2b6:	e7f0      	b.n	800f29a <__gethex+0x3fe>
 800f2b8:	08010db9 	.word	0x08010db9

0800f2bc <L_shift>:
 800f2bc:	f1c2 0208 	rsb	r2, r2, #8
 800f2c0:	0092      	lsls	r2, r2, #2
 800f2c2:	b570      	push	{r4, r5, r6, lr}
 800f2c4:	f1c2 0620 	rsb	r6, r2, #32
 800f2c8:	6843      	ldr	r3, [r0, #4]
 800f2ca:	6804      	ldr	r4, [r0, #0]
 800f2cc:	fa03 f506 	lsl.w	r5, r3, r6
 800f2d0:	432c      	orrs	r4, r5
 800f2d2:	40d3      	lsrs	r3, r2
 800f2d4:	6004      	str	r4, [r0, #0]
 800f2d6:	f840 3f04 	str.w	r3, [r0, #4]!
 800f2da:	4288      	cmp	r0, r1
 800f2dc:	d3f4      	bcc.n	800f2c8 <L_shift+0xc>
 800f2de:	bd70      	pop	{r4, r5, r6, pc}

0800f2e0 <__match>:
 800f2e0:	b530      	push	{r4, r5, lr}
 800f2e2:	6803      	ldr	r3, [r0, #0]
 800f2e4:	3301      	adds	r3, #1
 800f2e6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f2ea:	b914      	cbnz	r4, 800f2f2 <__match+0x12>
 800f2ec:	6003      	str	r3, [r0, #0]
 800f2ee:	2001      	movs	r0, #1
 800f2f0:	bd30      	pop	{r4, r5, pc}
 800f2f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f2f6:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800f2fa:	2d19      	cmp	r5, #25
 800f2fc:	bf98      	it	ls
 800f2fe:	3220      	addls	r2, #32
 800f300:	42a2      	cmp	r2, r4
 800f302:	d0f0      	beq.n	800f2e6 <__match+0x6>
 800f304:	2000      	movs	r0, #0
 800f306:	e7f3      	b.n	800f2f0 <__match+0x10>

0800f308 <__hexnan>:
 800f308:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f30c:	680b      	ldr	r3, [r1, #0]
 800f30e:	6801      	ldr	r1, [r0, #0]
 800f310:	115e      	asrs	r6, r3, #5
 800f312:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800f316:	f013 031f 	ands.w	r3, r3, #31
 800f31a:	b087      	sub	sp, #28
 800f31c:	bf18      	it	ne
 800f31e:	3604      	addne	r6, #4
 800f320:	2500      	movs	r5, #0
 800f322:	1f37      	subs	r7, r6, #4
 800f324:	4682      	mov	sl, r0
 800f326:	4690      	mov	r8, r2
 800f328:	9301      	str	r3, [sp, #4]
 800f32a:	f846 5c04 	str.w	r5, [r6, #-4]
 800f32e:	46b9      	mov	r9, r7
 800f330:	463c      	mov	r4, r7
 800f332:	9502      	str	r5, [sp, #8]
 800f334:	46ab      	mov	fp, r5
 800f336:	784a      	ldrb	r2, [r1, #1]
 800f338:	1c4b      	adds	r3, r1, #1
 800f33a:	9303      	str	r3, [sp, #12]
 800f33c:	b342      	cbz	r2, 800f390 <__hexnan+0x88>
 800f33e:	4610      	mov	r0, r2
 800f340:	9105      	str	r1, [sp, #20]
 800f342:	9204      	str	r2, [sp, #16]
 800f344:	f7ff fd95 	bl	800ee72 <__hexdig_fun>
 800f348:	2800      	cmp	r0, #0
 800f34a:	d151      	bne.n	800f3f0 <__hexnan+0xe8>
 800f34c:	9a04      	ldr	r2, [sp, #16]
 800f34e:	9905      	ldr	r1, [sp, #20]
 800f350:	2a20      	cmp	r2, #32
 800f352:	d818      	bhi.n	800f386 <__hexnan+0x7e>
 800f354:	9b02      	ldr	r3, [sp, #8]
 800f356:	459b      	cmp	fp, r3
 800f358:	dd13      	ble.n	800f382 <__hexnan+0x7a>
 800f35a:	454c      	cmp	r4, r9
 800f35c:	d206      	bcs.n	800f36c <__hexnan+0x64>
 800f35e:	2d07      	cmp	r5, #7
 800f360:	dc04      	bgt.n	800f36c <__hexnan+0x64>
 800f362:	462a      	mov	r2, r5
 800f364:	4649      	mov	r1, r9
 800f366:	4620      	mov	r0, r4
 800f368:	f7ff ffa8 	bl	800f2bc <L_shift>
 800f36c:	4544      	cmp	r4, r8
 800f36e:	d952      	bls.n	800f416 <__hexnan+0x10e>
 800f370:	2300      	movs	r3, #0
 800f372:	f1a4 0904 	sub.w	r9, r4, #4
 800f376:	f844 3c04 	str.w	r3, [r4, #-4]
 800f37a:	f8cd b008 	str.w	fp, [sp, #8]
 800f37e:	464c      	mov	r4, r9
 800f380:	461d      	mov	r5, r3
 800f382:	9903      	ldr	r1, [sp, #12]
 800f384:	e7d7      	b.n	800f336 <__hexnan+0x2e>
 800f386:	2a29      	cmp	r2, #41	@ 0x29
 800f388:	d157      	bne.n	800f43a <__hexnan+0x132>
 800f38a:	3102      	adds	r1, #2
 800f38c:	f8ca 1000 	str.w	r1, [sl]
 800f390:	f1bb 0f00 	cmp.w	fp, #0
 800f394:	d051      	beq.n	800f43a <__hexnan+0x132>
 800f396:	454c      	cmp	r4, r9
 800f398:	d206      	bcs.n	800f3a8 <__hexnan+0xa0>
 800f39a:	2d07      	cmp	r5, #7
 800f39c:	dc04      	bgt.n	800f3a8 <__hexnan+0xa0>
 800f39e:	462a      	mov	r2, r5
 800f3a0:	4649      	mov	r1, r9
 800f3a2:	4620      	mov	r0, r4
 800f3a4:	f7ff ff8a 	bl	800f2bc <L_shift>
 800f3a8:	4544      	cmp	r4, r8
 800f3aa:	d936      	bls.n	800f41a <__hexnan+0x112>
 800f3ac:	f1a8 0204 	sub.w	r2, r8, #4
 800f3b0:	4623      	mov	r3, r4
 800f3b2:	f853 1b04 	ldr.w	r1, [r3], #4
 800f3b6:	f842 1f04 	str.w	r1, [r2, #4]!
 800f3ba:	429f      	cmp	r7, r3
 800f3bc:	d2f9      	bcs.n	800f3b2 <__hexnan+0xaa>
 800f3be:	1b3b      	subs	r3, r7, r4
 800f3c0:	f023 0303 	bic.w	r3, r3, #3
 800f3c4:	3304      	adds	r3, #4
 800f3c6:	3401      	adds	r4, #1
 800f3c8:	3e03      	subs	r6, #3
 800f3ca:	42b4      	cmp	r4, r6
 800f3cc:	bf88      	it	hi
 800f3ce:	2304      	movhi	r3, #4
 800f3d0:	4443      	add	r3, r8
 800f3d2:	2200      	movs	r2, #0
 800f3d4:	f843 2b04 	str.w	r2, [r3], #4
 800f3d8:	429f      	cmp	r7, r3
 800f3da:	d2fb      	bcs.n	800f3d4 <__hexnan+0xcc>
 800f3dc:	683b      	ldr	r3, [r7, #0]
 800f3de:	b91b      	cbnz	r3, 800f3e8 <__hexnan+0xe0>
 800f3e0:	4547      	cmp	r7, r8
 800f3e2:	d128      	bne.n	800f436 <__hexnan+0x12e>
 800f3e4:	2301      	movs	r3, #1
 800f3e6:	603b      	str	r3, [r7, #0]
 800f3e8:	2005      	movs	r0, #5
 800f3ea:	b007      	add	sp, #28
 800f3ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f3f0:	3501      	adds	r5, #1
 800f3f2:	2d08      	cmp	r5, #8
 800f3f4:	f10b 0b01 	add.w	fp, fp, #1
 800f3f8:	dd06      	ble.n	800f408 <__hexnan+0x100>
 800f3fa:	4544      	cmp	r4, r8
 800f3fc:	d9c1      	bls.n	800f382 <__hexnan+0x7a>
 800f3fe:	2300      	movs	r3, #0
 800f400:	f844 3c04 	str.w	r3, [r4, #-4]
 800f404:	2501      	movs	r5, #1
 800f406:	3c04      	subs	r4, #4
 800f408:	6822      	ldr	r2, [r4, #0]
 800f40a:	f000 000f 	and.w	r0, r0, #15
 800f40e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800f412:	6020      	str	r0, [r4, #0]
 800f414:	e7b5      	b.n	800f382 <__hexnan+0x7a>
 800f416:	2508      	movs	r5, #8
 800f418:	e7b3      	b.n	800f382 <__hexnan+0x7a>
 800f41a:	9b01      	ldr	r3, [sp, #4]
 800f41c:	2b00      	cmp	r3, #0
 800f41e:	d0dd      	beq.n	800f3dc <__hexnan+0xd4>
 800f420:	f1c3 0320 	rsb	r3, r3, #32
 800f424:	f04f 32ff 	mov.w	r2, #4294967295
 800f428:	40da      	lsrs	r2, r3
 800f42a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800f42e:	4013      	ands	r3, r2
 800f430:	f846 3c04 	str.w	r3, [r6, #-4]
 800f434:	e7d2      	b.n	800f3dc <__hexnan+0xd4>
 800f436:	3f04      	subs	r7, #4
 800f438:	e7d0      	b.n	800f3dc <__hexnan+0xd4>
 800f43a:	2004      	movs	r0, #4
 800f43c:	e7d5      	b.n	800f3ea <__hexnan+0xe2>

0800f43e <__ascii_mbtowc>:
 800f43e:	b082      	sub	sp, #8
 800f440:	b901      	cbnz	r1, 800f444 <__ascii_mbtowc+0x6>
 800f442:	a901      	add	r1, sp, #4
 800f444:	b142      	cbz	r2, 800f458 <__ascii_mbtowc+0x1a>
 800f446:	b14b      	cbz	r3, 800f45c <__ascii_mbtowc+0x1e>
 800f448:	7813      	ldrb	r3, [r2, #0]
 800f44a:	600b      	str	r3, [r1, #0]
 800f44c:	7812      	ldrb	r2, [r2, #0]
 800f44e:	1e10      	subs	r0, r2, #0
 800f450:	bf18      	it	ne
 800f452:	2001      	movne	r0, #1
 800f454:	b002      	add	sp, #8
 800f456:	4770      	bx	lr
 800f458:	4610      	mov	r0, r2
 800f45a:	e7fb      	b.n	800f454 <__ascii_mbtowc+0x16>
 800f45c:	f06f 0001 	mvn.w	r0, #1
 800f460:	e7f8      	b.n	800f454 <__ascii_mbtowc+0x16>

0800f462 <_realloc_r>:
 800f462:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f466:	4607      	mov	r7, r0
 800f468:	4614      	mov	r4, r2
 800f46a:	460d      	mov	r5, r1
 800f46c:	b921      	cbnz	r1, 800f478 <_realloc_r+0x16>
 800f46e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f472:	4611      	mov	r1, r2
 800f474:	f7fd bcb4 	b.w	800cde0 <_malloc_r>
 800f478:	b92a      	cbnz	r2, 800f486 <_realloc_r+0x24>
 800f47a:	f7fd fc3d 	bl	800ccf8 <_free_r>
 800f47e:	4625      	mov	r5, r4
 800f480:	4628      	mov	r0, r5
 800f482:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f486:	f000 f86b 	bl	800f560 <_malloc_usable_size_r>
 800f48a:	4284      	cmp	r4, r0
 800f48c:	4606      	mov	r6, r0
 800f48e:	d802      	bhi.n	800f496 <_realloc_r+0x34>
 800f490:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800f494:	d8f4      	bhi.n	800f480 <_realloc_r+0x1e>
 800f496:	4621      	mov	r1, r4
 800f498:	4638      	mov	r0, r7
 800f49a:	f7fd fca1 	bl	800cde0 <_malloc_r>
 800f49e:	4680      	mov	r8, r0
 800f4a0:	b908      	cbnz	r0, 800f4a6 <_realloc_r+0x44>
 800f4a2:	4645      	mov	r5, r8
 800f4a4:	e7ec      	b.n	800f480 <_realloc_r+0x1e>
 800f4a6:	42b4      	cmp	r4, r6
 800f4a8:	4622      	mov	r2, r4
 800f4aa:	4629      	mov	r1, r5
 800f4ac:	bf28      	it	cs
 800f4ae:	4632      	movcs	r2, r6
 800f4b0:	f7fc fd97 	bl	800bfe2 <memcpy>
 800f4b4:	4629      	mov	r1, r5
 800f4b6:	4638      	mov	r0, r7
 800f4b8:	f7fd fc1e 	bl	800ccf8 <_free_r>
 800f4bc:	e7f1      	b.n	800f4a2 <_realloc_r+0x40>

0800f4be <__ascii_wctomb>:
 800f4be:	4603      	mov	r3, r0
 800f4c0:	4608      	mov	r0, r1
 800f4c2:	b141      	cbz	r1, 800f4d6 <__ascii_wctomb+0x18>
 800f4c4:	2aff      	cmp	r2, #255	@ 0xff
 800f4c6:	d904      	bls.n	800f4d2 <__ascii_wctomb+0x14>
 800f4c8:	228a      	movs	r2, #138	@ 0x8a
 800f4ca:	601a      	str	r2, [r3, #0]
 800f4cc:	f04f 30ff 	mov.w	r0, #4294967295
 800f4d0:	4770      	bx	lr
 800f4d2:	700a      	strb	r2, [r1, #0]
 800f4d4:	2001      	movs	r0, #1
 800f4d6:	4770      	bx	lr

0800f4d8 <_raise_r>:
 800f4d8:	291f      	cmp	r1, #31
 800f4da:	b538      	push	{r3, r4, r5, lr}
 800f4dc:	4605      	mov	r5, r0
 800f4de:	460c      	mov	r4, r1
 800f4e0:	d904      	bls.n	800f4ec <_raise_r+0x14>
 800f4e2:	2316      	movs	r3, #22
 800f4e4:	6003      	str	r3, [r0, #0]
 800f4e6:	f04f 30ff 	mov.w	r0, #4294967295
 800f4ea:	bd38      	pop	{r3, r4, r5, pc}
 800f4ec:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800f4ee:	b112      	cbz	r2, 800f4f6 <_raise_r+0x1e>
 800f4f0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800f4f4:	b94b      	cbnz	r3, 800f50a <_raise_r+0x32>
 800f4f6:	4628      	mov	r0, r5
 800f4f8:	f000 f830 	bl	800f55c <_getpid_r>
 800f4fc:	4622      	mov	r2, r4
 800f4fe:	4601      	mov	r1, r0
 800f500:	4628      	mov	r0, r5
 800f502:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f506:	f000 b817 	b.w	800f538 <_kill_r>
 800f50a:	2b01      	cmp	r3, #1
 800f50c:	d00a      	beq.n	800f524 <_raise_r+0x4c>
 800f50e:	1c59      	adds	r1, r3, #1
 800f510:	d103      	bne.n	800f51a <_raise_r+0x42>
 800f512:	2316      	movs	r3, #22
 800f514:	6003      	str	r3, [r0, #0]
 800f516:	2001      	movs	r0, #1
 800f518:	e7e7      	b.n	800f4ea <_raise_r+0x12>
 800f51a:	2100      	movs	r1, #0
 800f51c:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800f520:	4620      	mov	r0, r4
 800f522:	4798      	blx	r3
 800f524:	2000      	movs	r0, #0
 800f526:	e7e0      	b.n	800f4ea <_raise_r+0x12>

0800f528 <raise>:
 800f528:	4b02      	ldr	r3, [pc, #8]	@ (800f534 <raise+0xc>)
 800f52a:	4601      	mov	r1, r0
 800f52c:	6818      	ldr	r0, [r3, #0]
 800f52e:	f7ff bfd3 	b.w	800f4d8 <_raise_r>
 800f532:	bf00      	nop
 800f534:	2000d138 	.word	0x2000d138

0800f538 <_kill_r>:
 800f538:	b538      	push	{r3, r4, r5, lr}
 800f53a:	4d07      	ldr	r5, [pc, #28]	@ (800f558 <_kill_r+0x20>)
 800f53c:	2300      	movs	r3, #0
 800f53e:	4604      	mov	r4, r0
 800f540:	4608      	mov	r0, r1
 800f542:	4611      	mov	r1, r2
 800f544:	602b      	str	r3, [r5, #0]
 800f546:	f7f1 fdd7 	bl	80010f8 <_kill>
 800f54a:	1c43      	adds	r3, r0, #1
 800f54c:	d102      	bne.n	800f554 <_kill_r+0x1c>
 800f54e:	682b      	ldr	r3, [r5, #0]
 800f550:	b103      	cbz	r3, 800f554 <_kill_r+0x1c>
 800f552:	6023      	str	r3, [r4, #0]
 800f554:	bd38      	pop	{r3, r4, r5, pc}
 800f556:	bf00      	nop
 800f558:	2000f13c 	.word	0x2000f13c

0800f55c <_getpid_r>:
 800f55c:	f7f1 bdc4 	b.w	80010e8 <_getpid>

0800f560 <_malloc_usable_size_r>:
 800f560:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f564:	1f18      	subs	r0, r3, #4
 800f566:	2b00      	cmp	r3, #0
 800f568:	bfbc      	itt	lt
 800f56a:	580b      	ldrlt	r3, [r1, r0]
 800f56c:	18c0      	addlt	r0, r0, r3
 800f56e:	4770      	bx	lr

0800f570 <_init>:
 800f570:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f572:	bf00      	nop
 800f574:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f576:	bc08      	pop	{r3}
 800f578:	469e      	mov	lr, r3
 800f57a:	4770      	bx	lr

0800f57c <_fini>:
 800f57c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f57e:	bf00      	nop
 800f580:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f582:	bc08      	pop	{r3}
 800f584:	469e      	mov	lr, r3
 800f586:	4770      	bx	lr
