
F411_INMP441_0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000100c8  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001ca4  08010268  08010268  00011268  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08011f0c  08011f0c  000202fc  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08011f0c  08011f0c  00012f0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08011f14  08011f14  000202fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08011f14  08011f14  00012f14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08011f18  08011f18  00012f18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000d2fc  20000000  08011f1c  00013000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00006f28  2000d2fc  0801f218  000202fc  2**2
                  ALLOC
 10 ._user_heap_stack 00001004  20014224  0801f218  00021224  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000202fc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001b169  00000000  00000000  0002032c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004780  00000000  00000000  0003b495  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001618  00000000  00000000  0003fc18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000010f6  00000000  00000000  00041230  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001cad8  00000000  00000000  00042326  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001f97e  00000000  00000000  0005edfe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a2ad7  00000000  00000000  0007e77c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00121253  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006f40  00000000  00000000  00121298  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000053  00000000  00000000  001281d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000d2fc 	.word	0x2000d2fc
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08010250 	.word	0x08010250

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000d300 	.word	0x2000d300
 80001dc:	08010250 	.word	0x08010250

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cac:	f000 b9be 	b.w	800102c <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f83c 	bl	8000d34 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__aeabi_d2lz>:
 8000cc8:	b538      	push	{r3, r4, r5, lr}
 8000cca:	2200      	movs	r2, #0
 8000ccc:	2300      	movs	r3, #0
 8000cce:	4604      	mov	r4, r0
 8000cd0:	460d      	mov	r5, r1
 8000cd2:	f7ff ff0b 	bl	8000aec <__aeabi_dcmplt>
 8000cd6:	b928      	cbnz	r0, 8000ce4 <__aeabi_d2lz+0x1c>
 8000cd8:	4620      	mov	r0, r4
 8000cda:	4629      	mov	r1, r5
 8000cdc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000ce0:	f000 b80a 	b.w	8000cf8 <__aeabi_d2ulz>
 8000ce4:	4620      	mov	r0, r4
 8000ce6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000cea:	f000 f805 	bl	8000cf8 <__aeabi_d2ulz>
 8000cee:	4240      	negs	r0, r0
 8000cf0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cf4:	bd38      	pop	{r3, r4, r5, pc}
 8000cf6:	bf00      	nop

08000cf8 <__aeabi_d2ulz>:
 8000cf8:	b5d0      	push	{r4, r6, r7, lr}
 8000cfa:	4b0c      	ldr	r3, [pc, #48]	@ (8000d2c <__aeabi_d2ulz+0x34>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	4606      	mov	r6, r0
 8000d00:	460f      	mov	r7, r1
 8000d02:	f7ff fc81 	bl	8000608 <__aeabi_dmul>
 8000d06:	f7ff ff57 	bl	8000bb8 <__aeabi_d2uiz>
 8000d0a:	4604      	mov	r4, r0
 8000d0c:	f7ff fc02 	bl	8000514 <__aeabi_ui2d>
 8000d10:	4b07      	ldr	r3, [pc, #28]	@ (8000d30 <__aeabi_d2ulz+0x38>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	f7ff fc78 	bl	8000608 <__aeabi_dmul>
 8000d18:	4602      	mov	r2, r0
 8000d1a:	460b      	mov	r3, r1
 8000d1c:	4630      	mov	r0, r6
 8000d1e:	4639      	mov	r1, r7
 8000d20:	f7ff faba 	bl	8000298 <__aeabi_dsub>
 8000d24:	f7ff ff48 	bl	8000bb8 <__aeabi_d2uiz>
 8000d28:	4621      	mov	r1, r4
 8000d2a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d2c:	3df00000 	.word	0x3df00000
 8000d30:	41f00000 	.word	0x41f00000

08000d34 <__udivmoddi4>:
 8000d34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d38:	9d08      	ldr	r5, [sp, #32]
 8000d3a:	468e      	mov	lr, r1
 8000d3c:	4604      	mov	r4, r0
 8000d3e:	4688      	mov	r8, r1
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d14a      	bne.n	8000dda <__udivmoddi4+0xa6>
 8000d44:	428a      	cmp	r2, r1
 8000d46:	4617      	mov	r7, r2
 8000d48:	d962      	bls.n	8000e10 <__udivmoddi4+0xdc>
 8000d4a:	fab2 f682 	clz	r6, r2
 8000d4e:	b14e      	cbz	r6, 8000d64 <__udivmoddi4+0x30>
 8000d50:	f1c6 0320 	rsb	r3, r6, #32
 8000d54:	fa01 f806 	lsl.w	r8, r1, r6
 8000d58:	fa20 f303 	lsr.w	r3, r0, r3
 8000d5c:	40b7      	lsls	r7, r6
 8000d5e:	ea43 0808 	orr.w	r8, r3, r8
 8000d62:	40b4      	lsls	r4, r6
 8000d64:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d68:	fa1f fc87 	uxth.w	ip, r7
 8000d6c:	fbb8 f1fe 	udiv	r1, r8, lr
 8000d70:	0c23      	lsrs	r3, r4, #16
 8000d72:	fb0e 8811 	mls	r8, lr, r1, r8
 8000d76:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d7a:	fb01 f20c 	mul.w	r2, r1, ip
 8000d7e:	429a      	cmp	r2, r3
 8000d80:	d909      	bls.n	8000d96 <__udivmoddi4+0x62>
 8000d82:	18fb      	adds	r3, r7, r3
 8000d84:	f101 30ff 	add.w	r0, r1, #4294967295
 8000d88:	f080 80ea 	bcs.w	8000f60 <__udivmoddi4+0x22c>
 8000d8c:	429a      	cmp	r2, r3
 8000d8e:	f240 80e7 	bls.w	8000f60 <__udivmoddi4+0x22c>
 8000d92:	3902      	subs	r1, #2
 8000d94:	443b      	add	r3, r7
 8000d96:	1a9a      	subs	r2, r3, r2
 8000d98:	b2a3      	uxth	r3, r4
 8000d9a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d9e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000da2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000da6:	fb00 fc0c 	mul.w	ip, r0, ip
 8000daa:	459c      	cmp	ip, r3
 8000dac:	d909      	bls.n	8000dc2 <__udivmoddi4+0x8e>
 8000dae:	18fb      	adds	r3, r7, r3
 8000db0:	f100 32ff 	add.w	r2, r0, #4294967295
 8000db4:	f080 80d6 	bcs.w	8000f64 <__udivmoddi4+0x230>
 8000db8:	459c      	cmp	ip, r3
 8000dba:	f240 80d3 	bls.w	8000f64 <__udivmoddi4+0x230>
 8000dbe:	443b      	add	r3, r7
 8000dc0:	3802      	subs	r0, #2
 8000dc2:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000dc6:	eba3 030c 	sub.w	r3, r3, ip
 8000dca:	2100      	movs	r1, #0
 8000dcc:	b11d      	cbz	r5, 8000dd6 <__udivmoddi4+0xa2>
 8000dce:	40f3      	lsrs	r3, r6
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	e9c5 3200 	strd	r3, r2, [r5]
 8000dd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dda:	428b      	cmp	r3, r1
 8000ddc:	d905      	bls.n	8000dea <__udivmoddi4+0xb6>
 8000dde:	b10d      	cbz	r5, 8000de4 <__udivmoddi4+0xb0>
 8000de0:	e9c5 0100 	strd	r0, r1, [r5]
 8000de4:	2100      	movs	r1, #0
 8000de6:	4608      	mov	r0, r1
 8000de8:	e7f5      	b.n	8000dd6 <__udivmoddi4+0xa2>
 8000dea:	fab3 f183 	clz	r1, r3
 8000dee:	2900      	cmp	r1, #0
 8000df0:	d146      	bne.n	8000e80 <__udivmoddi4+0x14c>
 8000df2:	4573      	cmp	r3, lr
 8000df4:	d302      	bcc.n	8000dfc <__udivmoddi4+0xc8>
 8000df6:	4282      	cmp	r2, r0
 8000df8:	f200 8105 	bhi.w	8001006 <__udivmoddi4+0x2d2>
 8000dfc:	1a84      	subs	r4, r0, r2
 8000dfe:	eb6e 0203 	sbc.w	r2, lr, r3
 8000e02:	2001      	movs	r0, #1
 8000e04:	4690      	mov	r8, r2
 8000e06:	2d00      	cmp	r5, #0
 8000e08:	d0e5      	beq.n	8000dd6 <__udivmoddi4+0xa2>
 8000e0a:	e9c5 4800 	strd	r4, r8, [r5]
 8000e0e:	e7e2      	b.n	8000dd6 <__udivmoddi4+0xa2>
 8000e10:	2a00      	cmp	r2, #0
 8000e12:	f000 8090 	beq.w	8000f36 <__udivmoddi4+0x202>
 8000e16:	fab2 f682 	clz	r6, r2
 8000e1a:	2e00      	cmp	r6, #0
 8000e1c:	f040 80a4 	bne.w	8000f68 <__udivmoddi4+0x234>
 8000e20:	1a8a      	subs	r2, r1, r2
 8000e22:	0c03      	lsrs	r3, r0, #16
 8000e24:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e28:	b280      	uxth	r0, r0
 8000e2a:	b2bc      	uxth	r4, r7
 8000e2c:	2101      	movs	r1, #1
 8000e2e:	fbb2 fcfe 	udiv	ip, r2, lr
 8000e32:	fb0e 221c 	mls	r2, lr, ip, r2
 8000e36:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000e3a:	fb04 f20c 	mul.w	r2, r4, ip
 8000e3e:	429a      	cmp	r2, r3
 8000e40:	d907      	bls.n	8000e52 <__udivmoddi4+0x11e>
 8000e42:	18fb      	adds	r3, r7, r3
 8000e44:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000e48:	d202      	bcs.n	8000e50 <__udivmoddi4+0x11c>
 8000e4a:	429a      	cmp	r2, r3
 8000e4c:	f200 80e0 	bhi.w	8001010 <__udivmoddi4+0x2dc>
 8000e50:	46c4      	mov	ip, r8
 8000e52:	1a9b      	subs	r3, r3, r2
 8000e54:	fbb3 f2fe 	udiv	r2, r3, lr
 8000e58:	fb0e 3312 	mls	r3, lr, r2, r3
 8000e5c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000e60:	fb02 f404 	mul.w	r4, r2, r4
 8000e64:	429c      	cmp	r4, r3
 8000e66:	d907      	bls.n	8000e78 <__udivmoddi4+0x144>
 8000e68:	18fb      	adds	r3, r7, r3
 8000e6a:	f102 30ff 	add.w	r0, r2, #4294967295
 8000e6e:	d202      	bcs.n	8000e76 <__udivmoddi4+0x142>
 8000e70:	429c      	cmp	r4, r3
 8000e72:	f200 80ca 	bhi.w	800100a <__udivmoddi4+0x2d6>
 8000e76:	4602      	mov	r2, r0
 8000e78:	1b1b      	subs	r3, r3, r4
 8000e7a:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000e7e:	e7a5      	b.n	8000dcc <__udivmoddi4+0x98>
 8000e80:	f1c1 0620 	rsb	r6, r1, #32
 8000e84:	408b      	lsls	r3, r1
 8000e86:	fa22 f706 	lsr.w	r7, r2, r6
 8000e8a:	431f      	orrs	r7, r3
 8000e8c:	fa0e f401 	lsl.w	r4, lr, r1
 8000e90:	fa20 f306 	lsr.w	r3, r0, r6
 8000e94:	fa2e fe06 	lsr.w	lr, lr, r6
 8000e98:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000e9c:	4323      	orrs	r3, r4
 8000e9e:	fa00 f801 	lsl.w	r8, r0, r1
 8000ea2:	fa1f fc87 	uxth.w	ip, r7
 8000ea6:	fbbe f0f9 	udiv	r0, lr, r9
 8000eaa:	0c1c      	lsrs	r4, r3, #16
 8000eac:	fb09 ee10 	mls	lr, r9, r0, lr
 8000eb0:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000eb4:	fb00 fe0c 	mul.w	lr, r0, ip
 8000eb8:	45a6      	cmp	lr, r4
 8000eba:	fa02 f201 	lsl.w	r2, r2, r1
 8000ebe:	d909      	bls.n	8000ed4 <__udivmoddi4+0x1a0>
 8000ec0:	193c      	adds	r4, r7, r4
 8000ec2:	f100 3aff 	add.w	sl, r0, #4294967295
 8000ec6:	f080 809c 	bcs.w	8001002 <__udivmoddi4+0x2ce>
 8000eca:	45a6      	cmp	lr, r4
 8000ecc:	f240 8099 	bls.w	8001002 <__udivmoddi4+0x2ce>
 8000ed0:	3802      	subs	r0, #2
 8000ed2:	443c      	add	r4, r7
 8000ed4:	eba4 040e 	sub.w	r4, r4, lr
 8000ed8:	fa1f fe83 	uxth.w	lr, r3
 8000edc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000ee0:	fb09 4413 	mls	r4, r9, r3, r4
 8000ee4:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000ee8:	fb03 fc0c 	mul.w	ip, r3, ip
 8000eec:	45a4      	cmp	ip, r4
 8000eee:	d908      	bls.n	8000f02 <__udivmoddi4+0x1ce>
 8000ef0:	193c      	adds	r4, r7, r4
 8000ef2:	f103 3eff 	add.w	lr, r3, #4294967295
 8000ef6:	f080 8082 	bcs.w	8000ffe <__udivmoddi4+0x2ca>
 8000efa:	45a4      	cmp	ip, r4
 8000efc:	d97f      	bls.n	8000ffe <__udivmoddi4+0x2ca>
 8000efe:	3b02      	subs	r3, #2
 8000f00:	443c      	add	r4, r7
 8000f02:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000f06:	eba4 040c 	sub.w	r4, r4, ip
 8000f0a:	fba0 ec02 	umull	lr, ip, r0, r2
 8000f0e:	4564      	cmp	r4, ip
 8000f10:	4673      	mov	r3, lr
 8000f12:	46e1      	mov	r9, ip
 8000f14:	d362      	bcc.n	8000fdc <__udivmoddi4+0x2a8>
 8000f16:	d05f      	beq.n	8000fd8 <__udivmoddi4+0x2a4>
 8000f18:	b15d      	cbz	r5, 8000f32 <__udivmoddi4+0x1fe>
 8000f1a:	ebb8 0203 	subs.w	r2, r8, r3
 8000f1e:	eb64 0409 	sbc.w	r4, r4, r9
 8000f22:	fa04 f606 	lsl.w	r6, r4, r6
 8000f26:	fa22 f301 	lsr.w	r3, r2, r1
 8000f2a:	431e      	orrs	r6, r3
 8000f2c:	40cc      	lsrs	r4, r1
 8000f2e:	e9c5 6400 	strd	r6, r4, [r5]
 8000f32:	2100      	movs	r1, #0
 8000f34:	e74f      	b.n	8000dd6 <__udivmoddi4+0xa2>
 8000f36:	fbb1 fcf2 	udiv	ip, r1, r2
 8000f3a:	0c01      	lsrs	r1, r0, #16
 8000f3c:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000f40:	b280      	uxth	r0, r0
 8000f42:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000f46:	463b      	mov	r3, r7
 8000f48:	4638      	mov	r0, r7
 8000f4a:	463c      	mov	r4, r7
 8000f4c:	46b8      	mov	r8, r7
 8000f4e:	46be      	mov	lr, r7
 8000f50:	2620      	movs	r6, #32
 8000f52:	fbb1 f1f7 	udiv	r1, r1, r7
 8000f56:	eba2 0208 	sub.w	r2, r2, r8
 8000f5a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000f5e:	e766      	b.n	8000e2e <__udivmoddi4+0xfa>
 8000f60:	4601      	mov	r1, r0
 8000f62:	e718      	b.n	8000d96 <__udivmoddi4+0x62>
 8000f64:	4610      	mov	r0, r2
 8000f66:	e72c      	b.n	8000dc2 <__udivmoddi4+0x8e>
 8000f68:	f1c6 0220 	rsb	r2, r6, #32
 8000f6c:	fa2e f302 	lsr.w	r3, lr, r2
 8000f70:	40b7      	lsls	r7, r6
 8000f72:	40b1      	lsls	r1, r6
 8000f74:	fa20 f202 	lsr.w	r2, r0, r2
 8000f78:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000f7c:	430a      	orrs	r2, r1
 8000f7e:	fbb3 f8fe 	udiv	r8, r3, lr
 8000f82:	b2bc      	uxth	r4, r7
 8000f84:	fb0e 3318 	mls	r3, lr, r8, r3
 8000f88:	0c11      	lsrs	r1, r2, #16
 8000f8a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f8e:	fb08 f904 	mul.w	r9, r8, r4
 8000f92:	40b0      	lsls	r0, r6
 8000f94:	4589      	cmp	r9, r1
 8000f96:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000f9a:	b280      	uxth	r0, r0
 8000f9c:	d93e      	bls.n	800101c <__udivmoddi4+0x2e8>
 8000f9e:	1879      	adds	r1, r7, r1
 8000fa0:	f108 3cff 	add.w	ip, r8, #4294967295
 8000fa4:	d201      	bcs.n	8000faa <__udivmoddi4+0x276>
 8000fa6:	4589      	cmp	r9, r1
 8000fa8:	d81f      	bhi.n	8000fea <__udivmoddi4+0x2b6>
 8000faa:	eba1 0109 	sub.w	r1, r1, r9
 8000fae:	fbb1 f9fe 	udiv	r9, r1, lr
 8000fb2:	fb09 f804 	mul.w	r8, r9, r4
 8000fb6:	fb0e 1119 	mls	r1, lr, r9, r1
 8000fba:	b292      	uxth	r2, r2
 8000fbc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000fc0:	4542      	cmp	r2, r8
 8000fc2:	d229      	bcs.n	8001018 <__udivmoddi4+0x2e4>
 8000fc4:	18ba      	adds	r2, r7, r2
 8000fc6:	f109 31ff 	add.w	r1, r9, #4294967295
 8000fca:	d2c4      	bcs.n	8000f56 <__udivmoddi4+0x222>
 8000fcc:	4542      	cmp	r2, r8
 8000fce:	d2c2      	bcs.n	8000f56 <__udivmoddi4+0x222>
 8000fd0:	f1a9 0102 	sub.w	r1, r9, #2
 8000fd4:	443a      	add	r2, r7
 8000fd6:	e7be      	b.n	8000f56 <__udivmoddi4+0x222>
 8000fd8:	45f0      	cmp	r8, lr
 8000fda:	d29d      	bcs.n	8000f18 <__udivmoddi4+0x1e4>
 8000fdc:	ebbe 0302 	subs.w	r3, lr, r2
 8000fe0:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000fe4:	3801      	subs	r0, #1
 8000fe6:	46e1      	mov	r9, ip
 8000fe8:	e796      	b.n	8000f18 <__udivmoddi4+0x1e4>
 8000fea:	eba7 0909 	sub.w	r9, r7, r9
 8000fee:	4449      	add	r1, r9
 8000ff0:	f1a8 0c02 	sub.w	ip, r8, #2
 8000ff4:	fbb1 f9fe 	udiv	r9, r1, lr
 8000ff8:	fb09 f804 	mul.w	r8, r9, r4
 8000ffc:	e7db      	b.n	8000fb6 <__udivmoddi4+0x282>
 8000ffe:	4673      	mov	r3, lr
 8001000:	e77f      	b.n	8000f02 <__udivmoddi4+0x1ce>
 8001002:	4650      	mov	r0, sl
 8001004:	e766      	b.n	8000ed4 <__udivmoddi4+0x1a0>
 8001006:	4608      	mov	r0, r1
 8001008:	e6fd      	b.n	8000e06 <__udivmoddi4+0xd2>
 800100a:	443b      	add	r3, r7
 800100c:	3a02      	subs	r2, #2
 800100e:	e733      	b.n	8000e78 <__udivmoddi4+0x144>
 8001010:	f1ac 0c02 	sub.w	ip, ip, #2
 8001014:	443b      	add	r3, r7
 8001016:	e71c      	b.n	8000e52 <__udivmoddi4+0x11e>
 8001018:	4649      	mov	r1, r9
 800101a:	e79c      	b.n	8000f56 <__udivmoddi4+0x222>
 800101c:	eba1 0109 	sub.w	r1, r1, r9
 8001020:	46c4      	mov	ip, r8
 8001022:	fbb1 f9fe 	udiv	r9, r1, lr
 8001026:	fb09 f804 	mul.w	r8, r9, r4
 800102a:	e7c4      	b.n	8000fb6 <__udivmoddi4+0x282>

0800102c <__aeabi_idiv0>:
 800102c:	4770      	bx	lr
 800102e:	bf00      	nop

08001030 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001030:	b480      	push	{r7}
 8001032:	af00      	add	r7, sp, #0
	errno = ENOSYS;
 8001034:	4b04      	ldr	r3, [pc, #16]	@ (8001048 <_getpid+0x18>)
 8001036:	2258      	movs	r2, #88	@ 0x58
 8001038:	601a      	str	r2, [r3, #0]
	return -1;
 800103a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800103e:	4618      	mov	r0, r3
 8001040:	46bd      	mov	sp, r7
 8001042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001046:	4770      	bx	lr
 8001048:	20014214 	.word	0x20014214

0800104c <_kill>:
  errno = ENOSYS;
  return -1;
}

int _kill(int32_t pid, int32_t sig)
{
 800104c:	b480      	push	{r7}
 800104e:	b083      	sub	sp, #12
 8001050:	af00      	add	r7, sp, #0
 8001052:	6078      	str	r0, [r7, #4]
 8001054:	6039      	str	r1, [r7, #0]
	errno = ENOSYS;
 8001056:	4b05      	ldr	r3, [pc, #20]	@ (800106c <_kill+0x20>)
 8001058:	2258      	movs	r2, #88	@ 0x58
 800105a:	601a      	str	r2, [r3, #0]
	return -1;
 800105c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001060:	4618      	mov	r0, r3
 8001062:	370c      	adds	r7, #12
 8001064:	46bd      	mov	sp, r7
 8001066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106a:	4770      	bx	lr
 800106c:	20014214 	.word	0x20014214

08001070 <_exit>:

void _exit(int32_t status)
{
 8001070:	b480      	push	{r7}
 8001072:	b083      	sub	sp, #12
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]
	while (1) {}		/* Make sure we hang here */
 8001078:	bf00      	nop
 800107a:	e7fd      	b.n	8001078 <_exit+0x8>

0800107c <_write>:
}

int _write(int32_t file, uint8_t *ptr, int32_t len)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	b084      	sub	sp, #16
 8001080:	af00      	add	r7, sp, #0
 8001082:	60f8      	str	r0, [r7, #12]
 8001084:	60b9      	str	r1, [r7, #8]
 8001086:	607a      	str	r2, [r7, #4]
	/* return len; */
#if 0
	for(int i=0 ; i<len ; i++) ITM_SendChar((*ptr++));
	return len;
#else
	    HAL_UART_Transmit(&huart6, (uint8_t*)ptr, len, 100);
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	b29a      	uxth	r2, r3
 800108c:	2364      	movs	r3, #100	@ 0x64
 800108e:	68b9      	ldr	r1, [r7, #8]
 8001090:	4803      	ldr	r0, [pc, #12]	@ (80010a0 <_write+0x24>)
 8001092:	f008 ff09 	bl	8009ea8 <HAL_UART_Transmit>
	    return len;
 8001096:	687b      	ldr	r3, [r7, #4]
#endif
}
 8001098:	4618      	mov	r0, r3
 800109a:	3710      	adds	r7, #16
 800109c:	46bd      	mov	sp, r7
 800109e:	bd80      	pop	{r7, pc}
 80010a0:	20014070 	.word	0x20014070

080010a4 <_close>:
	return (void *) prev_heap_end;
}
#endif

int _close(int32_t file)
{
 80010a4:	b480      	push	{r7}
 80010a6:	b083      	sub	sp, #12
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	6078      	str	r0, [r7, #4]
	errno = ENOSYS;
 80010ac:	4b05      	ldr	r3, [pc, #20]	@ (80010c4 <_close+0x20>)
 80010ae:	2258      	movs	r2, #88	@ 0x58
 80010b0:	601a      	str	r2, [r3, #0]
	return -1;
 80010b2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80010b6:	4618      	mov	r0, r3
 80010b8:	370c      	adds	r7, #12
 80010ba:	46bd      	mov	sp, r7
 80010bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c0:	4770      	bx	lr
 80010c2:	bf00      	nop
 80010c4:	20014214 	.word	0x20014214

080010c8 <_fstat>:


int _fstat(int32_t file, struct stat *st)
{
 80010c8:	b480      	push	{r7}
 80010ca:	b083      	sub	sp, #12
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	6078      	str	r0, [r7, #4]
 80010d0:	6039      	str	r1, [r7, #0]
	errno = ENOSYS;
 80010d2:	4b05      	ldr	r3, [pc, #20]	@ (80010e8 <_fstat+0x20>)
 80010d4:	2258      	movs	r2, #88	@ 0x58
 80010d6:	601a      	str	r2, [r3, #0]
	return -1;
 80010d8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80010dc:	4618      	mov	r0, r3
 80010de:	370c      	adds	r7, #12
 80010e0:	46bd      	mov	sp, r7
 80010e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e6:	4770      	bx	lr
 80010e8:	20014214 	.word	0x20014214

080010ec <_isatty>:

int _isatty(int32_t file)
{
 80010ec:	b480      	push	{r7}
 80010ee:	b083      	sub	sp, #12
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	6078      	str	r0, [r7, #4]
	errno = ENOSYS;
 80010f4:	4b04      	ldr	r3, [pc, #16]	@ (8001108 <_isatty+0x1c>)
 80010f6:	2258      	movs	r2, #88	@ 0x58
 80010f8:	601a      	str	r2, [r3, #0]
	return 0;
 80010fa:	2300      	movs	r3, #0
}
 80010fc:	4618      	mov	r0, r3
 80010fe:	370c      	adds	r7, #12
 8001100:	46bd      	mov	sp, r7
 8001102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001106:	4770      	bx	lr
 8001108:	20014214 	.word	0x20014214

0800110c <_lseek>:

int _lseek(int32_t file, int32_t ptr, int32_t dir)
{
 800110c:	b480      	push	{r7}
 800110e:	b085      	sub	sp, #20
 8001110:	af00      	add	r7, sp, #0
 8001112:	60f8      	str	r0, [r7, #12]
 8001114:	60b9      	str	r1, [r7, #8]
 8001116:	607a      	str	r2, [r7, #4]
	errno = ENOSYS;
 8001118:	4b05      	ldr	r3, [pc, #20]	@ (8001130 <_lseek+0x24>)
 800111a:	2258      	movs	r2, #88	@ 0x58
 800111c:	601a      	str	r2, [r3, #0]
	return -1;
 800111e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001122:	4618      	mov	r0, r3
 8001124:	3714      	adds	r7, #20
 8001126:	46bd      	mov	sp, r7
 8001128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112c:	4770      	bx	lr
 800112e:	bf00      	nop
 8001130:	20014214 	.word	0x20014214

08001134 <_read>:

int _read(int32_t file, uint8_t *ptr, int32_t len)
{
 8001134:	b480      	push	{r7}
 8001136:	b085      	sub	sp, #20
 8001138:	af00      	add	r7, sp, #0
 800113a:	60f8      	str	r0, [r7, #12]
 800113c:	60b9      	str	r1, [r7, #8]
 800113e:	607a      	str	r2, [r7, #4]
	errno = ENOSYS;
 8001140:	4b05      	ldr	r3, [pc, #20]	@ (8001158 <_read+0x24>)
 8001142:	2258      	movs	r2, #88	@ 0x58
 8001144:	601a      	str	r2, [r3, #0]
	return -1;
 8001146:	f04f 33ff 	mov.w	r3, #4294967295
}
 800114a:	4618      	mov	r0, r3
 800114c:	3714      	adds	r7, #20
 800114e:	46bd      	mov	sp, r7
 8001150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001154:	4770      	bx	lr
 8001156:	bf00      	nop
 8001158:	20014214 	.word	0x20014214

0800115c <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	b084      	sub	sp, #16
 8001160:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001162:	463b      	mov	r3, r7
 8001164:	2200      	movs	r2, #0
 8001166:	601a      	str	r2, [r3, #0]
 8001168:	605a      	str	r2, [r3, #4]
 800116a:	609a      	str	r2, [r3, #8]
 800116c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800116e:	4b36      	ldr	r3, [pc, #216]	@ (8001248 <MX_ADC1_Init+0xec>)
 8001170:	4a36      	ldr	r2, [pc, #216]	@ (800124c <MX_ADC1_Init+0xf0>)
 8001172:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001174:	4b34      	ldr	r3, [pc, #208]	@ (8001248 <MX_ADC1_Init+0xec>)
 8001176:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800117a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800117c:	4b32      	ldr	r3, [pc, #200]	@ (8001248 <MX_ADC1_Init+0xec>)
 800117e:	2200      	movs	r2, #0
 8001180:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8001182:	4b31      	ldr	r3, [pc, #196]	@ (8001248 <MX_ADC1_Init+0xec>)
 8001184:	2201      	movs	r2, #1
 8001186:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001188:	4b2f      	ldr	r3, [pc, #188]	@ (8001248 <MX_ADC1_Init+0xec>)
 800118a:	2200      	movs	r2, #0
 800118c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800118e:	4b2e      	ldr	r3, [pc, #184]	@ (8001248 <MX_ADC1_Init+0xec>)
 8001190:	2200      	movs	r2, #0
 8001192:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001196:	4b2c      	ldr	r3, [pc, #176]	@ (8001248 <MX_ADC1_Init+0xec>)
 8001198:	2200      	movs	r2, #0
 800119a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800119c:	4b2a      	ldr	r3, [pc, #168]	@ (8001248 <MX_ADC1_Init+0xec>)
 800119e:	4a2c      	ldr	r2, [pc, #176]	@ (8001250 <MX_ADC1_Init+0xf4>)
 80011a0:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80011a2:	4b29      	ldr	r3, [pc, #164]	@ (8001248 <MX_ADC1_Init+0xec>)
 80011a4:	2200      	movs	r2, #0
 80011a6:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 4;
 80011a8:	4b27      	ldr	r3, [pc, #156]	@ (8001248 <MX_ADC1_Init+0xec>)
 80011aa:	2204      	movs	r2, #4
 80011ac:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80011ae:	4b26      	ldr	r3, [pc, #152]	@ (8001248 <MX_ADC1_Init+0xec>)
 80011b0:	2200      	movs	r2, #0
 80011b2:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80011b6:	4b24      	ldr	r3, [pc, #144]	@ (8001248 <MX_ADC1_Init+0xec>)
 80011b8:	2201      	movs	r2, #1
 80011ba:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80011bc:	4822      	ldr	r0, [pc, #136]	@ (8001248 <MX_ADC1_Init+0xec>)
 80011be:	f004 f9f3 	bl	80055a8 <HAL_ADC_Init>
 80011c2:	4603      	mov	r3, r0
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d001      	beq.n	80011cc <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80011c8:	f001 fbe6 	bl	8002998 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 80011cc:	2306      	movs	r3, #6
 80011ce:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80011d0:	2301      	movs	r3, #1
 80011d2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80011d4:	2300      	movs	r3, #0
 80011d6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80011d8:	463b      	mov	r3, r7
 80011da:	4619      	mov	r1, r3
 80011dc:	481a      	ldr	r0, [pc, #104]	@ (8001248 <MX_ADC1_Init+0xec>)
 80011de:	f004 fb89 	bl	80058f4 <HAL_ADC_ConfigChannel>
 80011e2:	4603      	mov	r3, r0
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d001      	beq.n	80011ec <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80011e8:	f001 fbd6 	bl	8002998 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 80011ec:	2307      	movs	r3, #7
 80011ee:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 80011f0:	2302      	movs	r3, #2
 80011f2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80011f4:	463b      	mov	r3, r7
 80011f6:	4619      	mov	r1, r3
 80011f8:	4813      	ldr	r0, [pc, #76]	@ (8001248 <MX_ADC1_Init+0xec>)
 80011fa:	f004 fb7b 	bl	80058f4 <HAL_ADC_ConfigChannel>
 80011fe:	4603      	mov	r3, r0
 8001200:	2b00      	cmp	r3, #0
 8001202:	d001      	beq.n	8001208 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8001204:	f001 fbc8 	bl	8002998 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8001208:	230e      	movs	r3, #14
 800120a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 800120c:	2303      	movs	r3, #3
 800120e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001210:	463b      	mov	r3, r7
 8001212:	4619      	mov	r1, r3
 8001214:	480c      	ldr	r0, [pc, #48]	@ (8001248 <MX_ADC1_Init+0xec>)
 8001216:	f004 fb6d 	bl	80058f4 <HAL_ADC_ConfigChannel>
 800121a:	4603      	mov	r3, r0
 800121c:	2b00      	cmp	r3, #0
 800121e:	d001      	beq.n	8001224 <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 8001220:	f001 fbba 	bl	8002998 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8001224:	230f      	movs	r3, #15
 8001226:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8001228:	2304      	movs	r3, #4
 800122a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800122c:	463b      	mov	r3, r7
 800122e:	4619      	mov	r1, r3
 8001230:	4805      	ldr	r0, [pc, #20]	@ (8001248 <MX_ADC1_Init+0xec>)
 8001232:	f004 fb5f 	bl	80058f4 <HAL_ADC_ConfigChannel>
 8001236:	4603      	mov	r3, r0
 8001238:	2b00      	cmp	r3, #0
 800123a:	d001      	beq.n	8001240 <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 800123c:	f001 fbac 	bl	8002998 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001240:	bf00      	nop
 8001242:	3710      	adds	r7, #16
 8001244:	46bd      	mov	sp, r7
 8001246:	bd80      	pop	{r7, pc}
 8001248:	2000d318 	.word	0x2000d318
 800124c:	40012000 	.word	0x40012000
 8001250:	0f000001 	.word	0x0f000001

08001254 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	b08a      	sub	sp, #40	@ 0x28
 8001258:	af00      	add	r7, sp, #0
 800125a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800125c:	f107 0314 	add.w	r3, r7, #20
 8001260:	2200      	movs	r2, #0
 8001262:	601a      	str	r2, [r3, #0]
 8001264:	605a      	str	r2, [r3, #4]
 8001266:	609a      	str	r2, [r3, #8]
 8001268:	60da      	str	r2, [r3, #12]
 800126a:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	4a3b      	ldr	r2, [pc, #236]	@ (8001360 <HAL_ADC_MspInit+0x10c>)
 8001272:	4293      	cmp	r3, r2
 8001274:	d170      	bne.n	8001358 <HAL_ADC_MspInit+0x104>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001276:	2300      	movs	r3, #0
 8001278:	613b      	str	r3, [r7, #16]
 800127a:	4b3a      	ldr	r3, [pc, #232]	@ (8001364 <HAL_ADC_MspInit+0x110>)
 800127c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800127e:	4a39      	ldr	r2, [pc, #228]	@ (8001364 <HAL_ADC_MspInit+0x110>)
 8001280:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001284:	6453      	str	r3, [r2, #68]	@ 0x44
 8001286:	4b37      	ldr	r3, [pc, #220]	@ (8001364 <HAL_ADC_MspInit+0x110>)
 8001288:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800128a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800128e:	613b      	str	r3, [r7, #16]
 8001290:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001292:	2300      	movs	r3, #0
 8001294:	60fb      	str	r3, [r7, #12]
 8001296:	4b33      	ldr	r3, [pc, #204]	@ (8001364 <HAL_ADC_MspInit+0x110>)
 8001298:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800129a:	4a32      	ldr	r2, [pc, #200]	@ (8001364 <HAL_ADC_MspInit+0x110>)
 800129c:	f043 0301 	orr.w	r3, r3, #1
 80012a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80012a2:	4b30      	ldr	r3, [pc, #192]	@ (8001364 <HAL_ADC_MspInit+0x110>)
 80012a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012a6:	f003 0301 	and.w	r3, r3, #1
 80012aa:	60fb      	str	r3, [r7, #12]
 80012ac:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80012ae:	2300      	movs	r3, #0
 80012b0:	60bb      	str	r3, [r7, #8]
 80012b2:	4b2c      	ldr	r3, [pc, #176]	@ (8001364 <HAL_ADC_MspInit+0x110>)
 80012b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012b6:	4a2b      	ldr	r2, [pc, #172]	@ (8001364 <HAL_ADC_MspInit+0x110>)
 80012b8:	f043 0304 	orr.w	r3, r3, #4
 80012bc:	6313      	str	r3, [r2, #48]	@ 0x30
 80012be:	4b29      	ldr	r3, [pc, #164]	@ (8001364 <HAL_ADC_MspInit+0x110>)
 80012c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012c2:	f003 0304 	and.w	r3, r3, #4
 80012c6:	60bb      	str	r3, [r7, #8]
 80012c8:	68bb      	ldr	r3, [r7, #8]
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    PC4     ------> ADC1_IN14
    PC5     ------> ADC1_IN15
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80012ca:	23c0      	movs	r3, #192	@ 0xc0
 80012cc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80012ce:	2303      	movs	r3, #3
 80012d0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012d2:	2300      	movs	r3, #0
 80012d4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012d6:	f107 0314 	add.w	r3, r7, #20
 80012da:	4619      	mov	r1, r3
 80012dc:	4822      	ldr	r0, [pc, #136]	@ (8001368 <HAL_ADC_MspInit+0x114>)
 80012de:	f005 fae9 	bl	80068b4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80012e2:	2330      	movs	r3, #48	@ 0x30
 80012e4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80012e6:	2303      	movs	r3, #3
 80012e8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ea:	2300      	movs	r3, #0
 80012ec:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012ee:	f107 0314 	add.w	r3, r7, #20
 80012f2:	4619      	mov	r1, r3
 80012f4:	481d      	ldr	r0, [pc, #116]	@ (800136c <HAL_ADC_MspInit+0x118>)
 80012f6:	f005 fadd 	bl	80068b4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 80012fa:	4b1d      	ldr	r3, [pc, #116]	@ (8001370 <HAL_ADC_MspInit+0x11c>)
 80012fc:	4a1d      	ldr	r2, [pc, #116]	@ (8001374 <HAL_ADC_MspInit+0x120>)
 80012fe:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001300:	4b1b      	ldr	r3, [pc, #108]	@ (8001370 <HAL_ADC_MspInit+0x11c>)
 8001302:	2200      	movs	r2, #0
 8001304:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001306:	4b1a      	ldr	r3, [pc, #104]	@ (8001370 <HAL_ADC_MspInit+0x11c>)
 8001308:	2200      	movs	r2, #0
 800130a:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800130c:	4b18      	ldr	r3, [pc, #96]	@ (8001370 <HAL_ADC_MspInit+0x11c>)
 800130e:	2200      	movs	r2, #0
 8001310:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001312:	4b17      	ldr	r3, [pc, #92]	@ (8001370 <HAL_ADC_MspInit+0x11c>)
 8001314:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001318:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800131a:	4b15      	ldr	r3, [pc, #84]	@ (8001370 <HAL_ADC_MspInit+0x11c>)
 800131c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001320:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001322:	4b13      	ldr	r3, [pc, #76]	@ (8001370 <HAL_ADC_MspInit+0x11c>)
 8001324:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001328:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 800132a:	4b11      	ldr	r3, [pc, #68]	@ (8001370 <HAL_ADC_MspInit+0x11c>)
 800132c:	2200      	movs	r2, #0
 800132e:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001330:	4b0f      	ldr	r3, [pc, #60]	@ (8001370 <HAL_ADC_MspInit+0x11c>)
 8001332:	2200      	movs	r2, #0
 8001334:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001336:	4b0e      	ldr	r3, [pc, #56]	@ (8001370 <HAL_ADC_MspInit+0x11c>)
 8001338:	2200      	movs	r2, #0
 800133a:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800133c:	480c      	ldr	r0, [pc, #48]	@ (8001370 <HAL_ADC_MspInit+0x11c>)
 800133e:	f004 feb7 	bl	80060b0 <HAL_DMA_Init>
 8001342:	4603      	mov	r3, r0
 8001344:	2b00      	cmp	r3, #0
 8001346:	d001      	beq.n	800134c <HAL_ADC_MspInit+0xf8>
    {
      Error_Handler();
 8001348:	f001 fb26 	bl	8002998 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	4a08      	ldr	r2, [pc, #32]	@ (8001370 <HAL_ADC_MspInit+0x11c>)
 8001350:	639a      	str	r2, [r3, #56]	@ 0x38
 8001352:	4a07      	ldr	r2, [pc, #28]	@ (8001370 <HAL_ADC_MspInit+0x11c>)
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8001358:	bf00      	nop
 800135a:	3728      	adds	r7, #40	@ 0x28
 800135c:	46bd      	mov	sp, r7
 800135e:	bd80      	pop	{r7, pc}
 8001360:	40012000 	.word	0x40012000
 8001364:	40023800 	.word	0x40023800
 8001368:	40020000 	.word	0x40020000
 800136c:	40020800 	.word	0x40020800
 8001370:	2000d360 	.word	0x2000d360
 8001374:	40026410 	.word	0x40026410

08001378 <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 800137c:	4b06      	ldr	r3, [pc, #24]	@ (8001398 <MX_CRC_Init+0x20>)
 800137e:	4a07      	ldr	r2, [pc, #28]	@ (800139c <MX_CRC_Init+0x24>)
 8001380:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8001382:	4805      	ldr	r0, [pc, #20]	@ (8001398 <MX_CRC_Init+0x20>)
 8001384:	f004 fe77 	bl	8006076 <HAL_CRC_Init>
 8001388:	4603      	mov	r3, r0
 800138a:	2b00      	cmp	r3, #0
 800138c:	d001      	beq.n	8001392 <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 800138e:	f001 fb03 	bl	8002998 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8001392:	bf00      	nop
 8001394:	bd80      	pop	{r7, pc}
 8001396:	bf00      	nop
 8001398:	2000d3c0 	.word	0x2000d3c0
 800139c:	40023000 	.word	0x40023000

080013a0 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 80013a0:	b480      	push	{r7}
 80013a2:	b085      	sub	sp, #20
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	4a0b      	ldr	r2, [pc, #44]	@ (80013dc <HAL_CRC_MspInit+0x3c>)
 80013ae:	4293      	cmp	r3, r2
 80013b0:	d10d      	bne.n	80013ce <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80013b2:	2300      	movs	r3, #0
 80013b4:	60fb      	str	r3, [r7, #12]
 80013b6:	4b0a      	ldr	r3, [pc, #40]	@ (80013e0 <HAL_CRC_MspInit+0x40>)
 80013b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013ba:	4a09      	ldr	r2, [pc, #36]	@ (80013e0 <HAL_CRC_MspInit+0x40>)
 80013bc:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80013c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80013c2:	4b07      	ldr	r3, [pc, #28]	@ (80013e0 <HAL_CRC_MspInit+0x40>)
 80013c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013c6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80013ca:	60fb      	str	r3, [r7, #12]
 80013cc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 80013ce:	bf00      	nop
 80013d0:	3714      	adds	r7, #20
 80013d2:	46bd      	mov	sp, r7
 80013d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d8:	4770      	bx	lr
 80013da:	bf00      	nop
 80013dc:	40023000 	.word	0x40023000
 80013e0:	40023800 	.word	0x40023800

080013e4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b082      	sub	sp, #8
 80013e8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80013ea:	2300      	movs	r3, #0
 80013ec:	607b      	str	r3, [r7, #4]
 80013ee:	4b17      	ldr	r3, [pc, #92]	@ (800144c <MX_DMA_Init+0x68>)
 80013f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013f2:	4a16      	ldr	r2, [pc, #88]	@ (800144c <MX_DMA_Init+0x68>)
 80013f4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80013f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80013fa:	4b14      	ldr	r3, [pc, #80]	@ (800144c <MX_DMA_Init+0x68>)
 80013fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013fe:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001402:	607b      	str	r3, [r7, #4]
 8001404:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001406:	2300      	movs	r3, #0
 8001408:	603b      	str	r3, [r7, #0]
 800140a:	4b10      	ldr	r3, [pc, #64]	@ (800144c <MX_DMA_Init+0x68>)
 800140c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800140e:	4a0f      	ldr	r2, [pc, #60]	@ (800144c <MX_DMA_Init+0x68>)
 8001410:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001414:	6313      	str	r3, [r2, #48]	@ 0x30
 8001416:	4b0d      	ldr	r3, [pc, #52]	@ (800144c <MX_DMA_Init+0x68>)
 8001418:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800141a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800141e:	603b      	str	r3, [r7, #0]
 8001420:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 8001422:	2200      	movs	r2, #0
 8001424:	2100      	movs	r1, #0
 8001426:	200e      	movs	r0, #14
 8001428:	f004 fdef 	bl	800600a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 800142c:	200e      	movs	r0, #14
 800142e:	f004 fe08 	bl	8006042 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8001432:	2200      	movs	r2, #0
 8001434:	2100      	movs	r1, #0
 8001436:	2038      	movs	r0, #56	@ 0x38
 8001438:	f004 fde7 	bl	800600a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 800143c:	2038      	movs	r0, #56	@ 0x38
 800143e:	f004 fe00 	bl	8006042 <HAL_NVIC_EnableIRQ>

}
 8001442:	bf00      	nop
 8001444:	3708      	adds	r7, #8
 8001446:	46bd      	mov	sp, r7
 8001448:	bd80      	pop	{r7, pc}
 800144a:	bf00      	nop
 800144c:	40023800 	.word	0x40023800

08001450 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	b08a      	sub	sp, #40	@ 0x28
 8001454:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001456:	f107 0314 	add.w	r3, r7, #20
 800145a:	2200      	movs	r2, #0
 800145c:	601a      	str	r2, [r3, #0]
 800145e:	605a      	str	r2, [r3, #4]
 8001460:	609a      	str	r2, [r3, #8]
 8001462:	60da      	str	r2, [r3, #12]
 8001464:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001466:	2300      	movs	r3, #0
 8001468:	613b      	str	r3, [r7, #16]
 800146a:	4b45      	ldr	r3, [pc, #276]	@ (8001580 <MX_GPIO_Init+0x130>)
 800146c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800146e:	4a44      	ldr	r2, [pc, #272]	@ (8001580 <MX_GPIO_Init+0x130>)
 8001470:	f043 0304 	orr.w	r3, r3, #4
 8001474:	6313      	str	r3, [r2, #48]	@ 0x30
 8001476:	4b42      	ldr	r3, [pc, #264]	@ (8001580 <MX_GPIO_Init+0x130>)
 8001478:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800147a:	f003 0304 	and.w	r3, r3, #4
 800147e:	613b      	str	r3, [r7, #16]
 8001480:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001482:	2300      	movs	r3, #0
 8001484:	60fb      	str	r3, [r7, #12]
 8001486:	4b3e      	ldr	r3, [pc, #248]	@ (8001580 <MX_GPIO_Init+0x130>)
 8001488:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800148a:	4a3d      	ldr	r2, [pc, #244]	@ (8001580 <MX_GPIO_Init+0x130>)
 800148c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001490:	6313      	str	r3, [r2, #48]	@ 0x30
 8001492:	4b3b      	ldr	r3, [pc, #236]	@ (8001580 <MX_GPIO_Init+0x130>)
 8001494:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001496:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800149a:	60fb      	str	r3, [r7, #12]
 800149c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800149e:	2300      	movs	r3, #0
 80014a0:	60bb      	str	r3, [r7, #8]
 80014a2:	4b37      	ldr	r3, [pc, #220]	@ (8001580 <MX_GPIO_Init+0x130>)
 80014a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014a6:	4a36      	ldr	r2, [pc, #216]	@ (8001580 <MX_GPIO_Init+0x130>)
 80014a8:	f043 0301 	orr.w	r3, r3, #1
 80014ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80014ae:	4b34      	ldr	r3, [pc, #208]	@ (8001580 <MX_GPIO_Init+0x130>)
 80014b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014b2:	f003 0301 	and.w	r3, r3, #1
 80014b6:	60bb      	str	r3, [r7, #8]
 80014b8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80014ba:	2300      	movs	r3, #0
 80014bc:	607b      	str	r3, [r7, #4]
 80014be:	4b30      	ldr	r3, [pc, #192]	@ (8001580 <MX_GPIO_Init+0x130>)
 80014c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014c2:	4a2f      	ldr	r2, [pc, #188]	@ (8001580 <MX_GPIO_Init+0x130>)
 80014c4:	f043 0302 	orr.w	r3, r3, #2
 80014c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80014ca:	4b2d      	ldr	r3, [pc, #180]	@ (8001580 <MX_GPIO_Init+0x130>)
 80014cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014ce:	f003 0302 	and.w	r3, r3, #2
 80014d2:	607b      	str	r3, [r7, #4]
 80014d4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, ILI9341_DC_Pin|ILI9341_RESET_Pin, GPIO_PIN_RESET);
 80014d6:	2200      	movs	r2, #0
 80014d8:	2103      	movs	r1, #3
 80014da:	482a      	ldr	r0, [pc, #168]	@ (8001584 <MX_GPIO_Init+0x134>)
 80014dc:	f005 fb86 	bl	8006bec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80014e0:	2200      	movs	r2, #0
 80014e2:	2120      	movs	r1, #32
 80014e4:	4828      	ldr	r0, [pc, #160]	@ (8001588 <MX_GPIO_Init+0x138>)
 80014e6:	f005 fb81 	bl	8006bec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ILI9341_CS_Pin|SDCARD_CS_Pin, GPIO_PIN_SET);
 80014ea:	2201      	movs	r2, #1
 80014ec:	f244 0102 	movw	r1, #16386	@ 0x4002
 80014f0:	4826      	ldr	r0, [pc, #152]	@ (800158c <MX_GPIO_Init+0x13c>)
 80014f2:	f005 fb7b 	bl	8006bec <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80014f6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80014fa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80014fc:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8001500:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001502:	2300      	movs	r3, #0
 8001504:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001506:	f107 0314 	add.w	r3, r7, #20
 800150a:	4619      	mov	r1, r3
 800150c:	481d      	ldr	r0, [pc, #116]	@ (8001584 <MX_GPIO_Init+0x134>)
 800150e:	f005 f9d1 	bl	80068b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : ILI9341_DC_Pin ILI9341_RESET_Pin */
  GPIO_InitStruct.Pin = ILI9341_DC_Pin|ILI9341_RESET_Pin;
 8001512:	2303      	movs	r3, #3
 8001514:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001516:	2301      	movs	r3, #1
 8001518:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800151a:	2300      	movs	r3, #0
 800151c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800151e:	2300      	movs	r3, #0
 8001520:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001522:	f107 0314 	add.w	r3, r7, #20
 8001526:	4619      	mov	r1, r3
 8001528:	4816      	ldr	r0, [pc, #88]	@ (8001584 <MX_GPIO_Init+0x134>)
 800152a:	f005 f9c3 	bl	80068b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800152e:	2320      	movs	r3, #32
 8001530:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001532:	2301      	movs	r3, #1
 8001534:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001536:	2300      	movs	r3, #0
 8001538:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800153a:	2300      	movs	r3, #0
 800153c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800153e:	f107 0314 	add.w	r3, r7, #20
 8001542:	4619      	mov	r1, r3
 8001544:	4810      	ldr	r0, [pc, #64]	@ (8001588 <MX_GPIO_Init+0x138>)
 8001546:	f005 f9b5 	bl	80068b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : ILI9341_CS_Pin SDCARD_CS_Pin */
  GPIO_InitStruct.Pin = ILI9341_CS_Pin|SDCARD_CS_Pin;
 800154a:	f244 0302 	movw	r3, #16386	@ 0x4002
 800154e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001550:	2301      	movs	r3, #1
 8001552:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001554:	2300      	movs	r3, #0
 8001556:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001558:	2300      	movs	r3, #0
 800155a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800155c:	f107 0314 	add.w	r3, r7, #20
 8001560:	4619      	mov	r1, r3
 8001562:	480a      	ldr	r0, [pc, #40]	@ (800158c <MX_GPIO_Init+0x13c>)
 8001564:	f005 f9a6 	bl	80068b4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001568:	2200      	movs	r2, #0
 800156a:	2100      	movs	r1, #0
 800156c:	2028      	movs	r0, #40	@ 0x28
 800156e:	f004 fd4c 	bl	800600a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001572:	2028      	movs	r0, #40	@ 0x28
 8001574:	f004 fd65 	bl	8006042 <HAL_NVIC_EnableIRQ>

}
 8001578:	bf00      	nop
 800157a:	3728      	adds	r7, #40	@ 0x28
 800157c:	46bd      	mov	sp, r7
 800157e:	bd80      	pop	{r7, pc}
 8001580:	40023800 	.word	0x40023800
 8001584:	40020800 	.word	0x40020800
 8001588:	40020000 	.word	0x40020000
 800158c:	40020400 	.word	0x40020400

08001590 <MX_I2S2_Init>:
I2S_HandleTypeDef hi2s3;
DMA_HandleTypeDef hdma_spi2_rx;

/* I2S2 init function */
void MX_I2S2_Init(void)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 8001594:	4b13      	ldr	r3, [pc, #76]	@ (80015e4 <MX_I2S2_Init+0x54>)
 8001596:	4a14      	ldr	r2, [pc, #80]	@ (80015e8 <MX_I2S2_Init+0x58>)
 8001598:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_RX;
 800159a:	4b12      	ldr	r3, [pc, #72]	@ (80015e4 <MX_I2S2_Init+0x54>)
 800159c:	f44f 7240 	mov.w	r2, #768	@ 0x300
 80015a0:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 80015a2:	4b10      	ldr	r3, [pc, #64]	@ (80015e4 <MX_I2S2_Init+0x54>)
 80015a4:	2200      	movs	r2, #0
 80015a6:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_24B;
 80015a8:	4b0e      	ldr	r3, [pc, #56]	@ (80015e4 <MX_I2S2_Init+0x54>)
 80015aa:	2203      	movs	r2, #3
 80015ac:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 80015ae:	4b0d      	ldr	r3, [pc, #52]	@ (80015e4 <MX_I2S2_Init+0x54>)
 80015b0:	2200      	movs	r2, #0
 80015b2:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_16K;
 80015b4:	4b0b      	ldr	r3, [pc, #44]	@ (80015e4 <MX_I2S2_Init+0x54>)
 80015b6:	f44f 527a 	mov.w	r2, #16000	@ 0x3e80
 80015ba:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 80015bc:	4b09      	ldr	r3, [pc, #36]	@ (80015e4 <MX_I2S2_Init+0x54>)
 80015be:	2200      	movs	r2, #0
 80015c0:	619a      	str	r2, [r3, #24]
  hi2s2.Init.ClockSource = I2S_CLOCK_PLL;
 80015c2:	4b08      	ldr	r3, [pc, #32]	@ (80015e4 <MX_I2S2_Init+0x54>)
 80015c4:	2200      	movs	r2, #0
 80015c6:	61da      	str	r2, [r3, #28]
  hi2s2.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 80015c8:	4b06      	ldr	r3, [pc, #24]	@ (80015e4 <MX_I2S2_Init+0x54>)
 80015ca:	2200      	movs	r2, #0
 80015cc:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 80015ce:	4805      	ldr	r0, [pc, #20]	@ (80015e4 <MX_I2S2_Init+0x54>)
 80015d0:	f005 fb4a 	bl	8006c68 <HAL_I2S_Init>
 80015d4:	4603      	mov	r3, r0
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d001      	beq.n	80015de <MX_I2S2_Init+0x4e>
  {
    Error_Handler();
 80015da:	f001 f9dd 	bl	8002998 <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 80015de:	bf00      	nop
 80015e0:	bd80      	pop	{r7, pc}
 80015e2:	bf00      	nop
 80015e4:	2000d3c8 	.word	0x2000d3c8
 80015e8:	40003800 	.word	0x40003800

080015ec <MX_I2S3_Init>:
/* I2S3 init function */
void MX_I2S3_Init(void)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 80015f0:	4b13      	ldr	r3, [pc, #76]	@ (8001640 <MX_I2S3_Init+0x54>)
 80015f2:	4a14      	ldr	r2, [pc, #80]	@ (8001644 <MX_I2S3_Init+0x58>)
 80015f4:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 80015f6:	4b12      	ldr	r3, [pc, #72]	@ (8001640 <MX_I2S3_Init+0x54>)
 80015f8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80015fc:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 80015fe:	4b10      	ldr	r3, [pc, #64]	@ (8001640 <MX_I2S3_Init+0x54>)
 8001600:	2200      	movs	r2, #0
 8001602:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8001604:	4b0e      	ldr	r3, [pc, #56]	@ (8001640 <MX_I2S3_Init+0x54>)
 8001606:	2200      	movs	r2, #0
 8001608:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 800160a:	4b0d      	ldr	r3, [pc, #52]	@ (8001640 <MX_I2S3_Init+0x54>)
 800160c:	2200      	movs	r2, #0
 800160e:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_16K;
 8001610:	4b0b      	ldr	r3, [pc, #44]	@ (8001640 <MX_I2S3_Init+0x54>)
 8001612:	f44f 527a 	mov.w	r2, #16000	@ 0x3e80
 8001616:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8001618:	4b09      	ldr	r3, [pc, #36]	@ (8001640 <MX_I2S3_Init+0x54>)
 800161a:	2200      	movs	r2, #0
 800161c:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 800161e:	4b08      	ldr	r3, [pc, #32]	@ (8001640 <MX_I2S3_Init+0x54>)
 8001620:	2200      	movs	r2, #0
 8001622:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8001624:	4b06      	ldr	r3, [pc, #24]	@ (8001640 <MX_I2S3_Init+0x54>)
 8001626:	2200      	movs	r2, #0
 8001628:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 800162a:	4805      	ldr	r0, [pc, #20]	@ (8001640 <MX_I2S3_Init+0x54>)
 800162c:	f005 fb1c 	bl	8006c68 <HAL_I2S_Init>
 8001630:	4603      	mov	r3, r0
 8001632:	2b00      	cmp	r3, #0
 8001634:	d001      	beq.n	800163a <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 8001636:	f001 f9af 	bl	8002998 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 800163a:	bf00      	nop
 800163c:	bd80      	pop	{r7, pc}
 800163e:	bf00      	nop
 8001640:	2000d410 	.word	0x2000d410
 8001644:	40003c00 	.word	0x40003c00

08001648 <HAL_I2S_MspInit>:

void HAL_I2S_MspInit(I2S_HandleTypeDef* i2sHandle)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	b08e      	sub	sp, #56	@ 0x38
 800164c:	af00      	add	r7, sp, #0
 800164e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001650:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001654:	2200      	movs	r2, #0
 8001656:	601a      	str	r2, [r3, #0]
 8001658:	605a      	str	r2, [r3, #4]
 800165a:	609a      	str	r2, [r3, #8]
 800165c:	60da      	str	r2, [r3, #12]
 800165e:	611a      	str	r2, [r3, #16]
  if(i2sHandle->Instance==SPI2)
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	4a69      	ldr	r2, [pc, #420]	@ (800180c <HAL_I2S_MspInit+0x1c4>)
 8001666:	4293      	cmp	r3, r2
 8001668:	d17b      	bne.n	8001762 <HAL_I2S_MspInit+0x11a>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* I2S2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800166a:	2300      	movs	r3, #0
 800166c:	623b      	str	r3, [r7, #32]
 800166e:	4b68      	ldr	r3, [pc, #416]	@ (8001810 <HAL_I2S_MspInit+0x1c8>)
 8001670:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001672:	4a67      	ldr	r2, [pc, #412]	@ (8001810 <HAL_I2S_MspInit+0x1c8>)
 8001674:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001678:	6413      	str	r3, [r2, #64]	@ 0x40
 800167a:	4b65      	ldr	r3, [pc, #404]	@ (8001810 <HAL_I2S_MspInit+0x1c8>)
 800167c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800167e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001682:	623b      	str	r3, [r7, #32]
 8001684:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001686:	2300      	movs	r3, #0
 8001688:	61fb      	str	r3, [r7, #28]
 800168a:	4b61      	ldr	r3, [pc, #388]	@ (8001810 <HAL_I2S_MspInit+0x1c8>)
 800168c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800168e:	4a60      	ldr	r2, [pc, #384]	@ (8001810 <HAL_I2S_MspInit+0x1c8>)
 8001690:	f043 0304 	orr.w	r3, r3, #4
 8001694:	6313      	str	r3, [r2, #48]	@ 0x30
 8001696:	4b5e      	ldr	r3, [pc, #376]	@ (8001810 <HAL_I2S_MspInit+0x1c8>)
 8001698:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800169a:	f003 0304 	and.w	r3, r3, #4
 800169e:	61fb      	str	r3, [r7, #28]
 80016a0:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80016a2:	2300      	movs	r3, #0
 80016a4:	61bb      	str	r3, [r7, #24]
 80016a6:	4b5a      	ldr	r3, [pc, #360]	@ (8001810 <HAL_I2S_MspInit+0x1c8>)
 80016a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016aa:	4a59      	ldr	r2, [pc, #356]	@ (8001810 <HAL_I2S_MspInit+0x1c8>)
 80016ac:	f043 0302 	orr.w	r3, r3, #2
 80016b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80016b2:	4b57      	ldr	r3, [pc, #348]	@ (8001810 <HAL_I2S_MspInit+0x1c8>)
 80016b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016b6:	f003 0302 	and.w	r3, r3, #2
 80016ba:	61bb      	str	r3, [r7, #24]
 80016bc:	69bb      	ldr	r3, [r7, #24]
    /**I2S2 GPIO Configuration
    PC3     ------> I2S2_SD
    PB10     ------> I2S2_CK
    PB12     ------> I2S2_WS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80016be:	2308      	movs	r3, #8
 80016c0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016c2:	2302      	movs	r3, #2
 80016c4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016c6:	2300      	movs	r3, #0
 80016c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016ca:	2300      	movs	r3, #0
 80016cc:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80016ce:	2305      	movs	r3, #5
 80016d0:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80016d2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80016d6:	4619      	mov	r1, r3
 80016d8:	484e      	ldr	r0, [pc, #312]	@ (8001814 <HAL_I2S_MspInit+0x1cc>)
 80016da:	f005 f8eb 	bl	80068b4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12;
 80016de:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80016e2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016e4:	2302      	movs	r3, #2
 80016e6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016e8:	2300      	movs	r3, #0
 80016ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016ec:	2300      	movs	r3, #0
 80016ee:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80016f0:	2305      	movs	r3, #5
 80016f2:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016f4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80016f8:	4619      	mov	r1, r3
 80016fa:	4847      	ldr	r0, [pc, #284]	@ (8001818 <HAL_I2S_MspInit+0x1d0>)
 80016fc:	f005 f8da 	bl	80068b4 <HAL_GPIO_Init>

    /* I2S2 DMA Init */
    /* SPI2_RX Init */
    hdma_spi2_rx.Instance = DMA1_Stream3;
 8001700:	4b46      	ldr	r3, [pc, #280]	@ (800181c <HAL_I2S_MspInit+0x1d4>)
 8001702:	4a47      	ldr	r2, [pc, #284]	@ (8001820 <HAL_I2S_MspInit+0x1d8>)
 8001704:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Channel = DMA_CHANNEL_0;
 8001706:	4b45      	ldr	r3, [pc, #276]	@ (800181c <HAL_I2S_MspInit+0x1d4>)
 8001708:	2200      	movs	r2, #0
 800170a:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800170c:	4b43      	ldr	r3, [pc, #268]	@ (800181c <HAL_I2S_MspInit+0x1d4>)
 800170e:	2200      	movs	r2, #0
 8001710:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001712:	4b42      	ldr	r3, [pc, #264]	@ (800181c <HAL_I2S_MspInit+0x1d4>)
 8001714:	2200      	movs	r2, #0
 8001716:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001718:	4b40      	ldr	r3, [pc, #256]	@ (800181c <HAL_I2S_MspInit+0x1d4>)
 800171a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800171e:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001720:	4b3e      	ldr	r3, [pc, #248]	@ (800181c <HAL_I2S_MspInit+0x1d4>)
 8001722:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001726:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001728:	4b3c      	ldr	r3, [pc, #240]	@ (800181c <HAL_I2S_MspInit+0x1d4>)
 800172a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800172e:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_CIRCULAR;
 8001730:	4b3a      	ldr	r3, [pc, #232]	@ (800181c <HAL_I2S_MspInit+0x1d4>)
 8001732:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001736:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001738:	4b38      	ldr	r3, [pc, #224]	@ (800181c <HAL_I2S_MspInit+0x1d4>)
 800173a:	2200      	movs	r2, #0
 800173c:	621a      	str	r2, [r3, #32]
    hdma_spi2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800173e:	4b37      	ldr	r3, [pc, #220]	@ (800181c <HAL_I2S_MspInit+0x1d4>)
 8001740:	2200      	movs	r2, #0
 8001742:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 8001744:	4835      	ldr	r0, [pc, #212]	@ (800181c <HAL_I2S_MspInit+0x1d4>)
 8001746:	f004 fcb3 	bl	80060b0 <HAL_DMA_Init>
 800174a:	4603      	mov	r3, r0
 800174c:	2b00      	cmp	r3, #0
 800174e:	d001      	beq.n	8001754 <HAL_I2S_MspInit+0x10c>
    {
      Error_Handler();
 8001750:	f001 f922 	bl	8002998 <Error_Handler>
    }

    __HAL_LINKDMA(i2sHandle,hdmarx,hdma_spi2_rx);
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	4a31      	ldr	r2, [pc, #196]	@ (800181c <HAL_I2S_MspInit+0x1d4>)
 8001758:	63da      	str	r2, [r3, #60]	@ 0x3c
 800175a:	4a30      	ldr	r2, [pc, #192]	@ (800181c <HAL_I2S_MspInit+0x1d4>)
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8001760:	e04f      	b.n	8001802 <HAL_I2S_MspInit+0x1ba>
  else if(i2sHandle->Instance==SPI3)
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	4a2f      	ldr	r2, [pc, #188]	@ (8001824 <HAL_I2S_MspInit+0x1dc>)
 8001768:	4293      	cmp	r3, r2
 800176a:	d14a      	bne.n	8001802 <HAL_I2S_MspInit+0x1ba>
    __HAL_RCC_SPI3_CLK_ENABLE();
 800176c:	2300      	movs	r3, #0
 800176e:	617b      	str	r3, [r7, #20]
 8001770:	4b27      	ldr	r3, [pc, #156]	@ (8001810 <HAL_I2S_MspInit+0x1c8>)
 8001772:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001774:	4a26      	ldr	r2, [pc, #152]	@ (8001810 <HAL_I2S_MspInit+0x1c8>)
 8001776:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800177a:	6413      	str	r3, [r2, #64]	@ 0x40
 800177c:	4b24      	ldr	r3, [pc, #144]	@ (8001810 <HAL_I2S_MspInit+0x1c8>)
 800177e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001780:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001784:	617b      	str	r3, [r7, #20]
 8001786:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001788:	2300      	movs	r3, #0
 800178a:	613b      	str	r3, [r7, #16]
 800178c:	4b20      	ldr	r3, [pc, #128]	@ (8001810 <HAL_I2S_MspInit+0x1c8>)
 800178e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001790:	4a1f      	ldr	r2, [pc, #124]	@ (8001810 <HAL_I2S_MspInit+0x1c8>)
 8001792:	f043 0301 	orr.w	r3, r3, #1
 8001796:	6313      	str	r3, [r2, #48]	@ 0x30
 8001798:	4b1d      	ldr	r3, [pc, #116]	@ (8001810 <HAL_I2S_MspInit+0x1c8>)
 800179a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800179c:	f003 0301 	and.w	r3, r3, #1
 80017a0:	613b      	str	r3, [r7, #16]
 80017a2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80017a4:	2300      	movs	r3, #0
 80017a6:	60fb      	str	r3, [r7, #12]
 80017a8:	4b19      	ldr	r3, [pc, #100]	@ (8001810 <HAL_I2S_MspInit+0x1c8>)
 80017aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017ac:	4a18      	ldr	r2, [pc, #96]	@ (8001810 <HAL_I2S_MspInit+0x1c8>)
 80017ae:	f043 0304 	orr.w	r3, r3, #4
 80017b2:	6313      	str	r3, [r2, #48]	@ 0x30
 80017b4:	4b16      	ldr	r3, [pc, #88]	@ (8001810 <HAL_I2S_MspInit+0x1c8>)
 80017b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017b8:	f003 0304 	and.w	r3, r3, #4
 80017bc:	60fb      	str	r3, [r7, #12]
 80017be:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80017c0:	2310      	movs	r3, #16
 80017c2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017c4:	2302      	movs	r3, #2
 80017c6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017c8:	2300      	movs	r3, #0
 80017ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017cc:	2300      	movs	r3, #0
 80017ce:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80017d0:	2306      	movs	r3, #6
 80017d2:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017d4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80017d8:	4619      	mov	r1, r3
 80017da:	4813      	ldr	r0, [pc, #76]	@ (8001828 <HAL_I2S_MspInit+0x1e0>)
 80017dc:	f005 f86a 	bl	80068b4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12;
 80017e0:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80017e4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017e6:	2302      	movs	r3, #2
 80017e8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ea:	2300      	movs	r3, #0
 80017ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017ee:	2300      	movs	r3, #0
 80017f0:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80017f2:	2306      	movs	r3, #6
 80017f4:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80017f6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80017fa:	4619      	mov	r1, r3
 80017fc:	4805      	ldr	r0, [pc, #20]	@ (8001814 <HAL_I2S_MspInit+0x1cc>)
 80017fe:	f005 f859 	bl	80068b4 <HAL_GPIO_Init>
}
 8001802:	bf00      	nop
 8001804:	3738      	adds	r7, #56	@ 0x38
 8001806:	46bd      	mov	sp, r7
 8001808:	bd80      	pop	{r7, pc}
 800180a:	bf00      	nop
 800180c:	40003800 	.word	0x40003800
 8001810:	40023800 	.word	0x40023800
 8001814:	40020800 	.word	0x40020800
 8001818:	40020400 	.word	0x40020400
 800181c:	2000d458 	.word	0x2000d458
 8001820:	40026058 	.word	0x40026058
 8001824:	40003c00 	.word	0x40003c00
 8001828:	40020000 	.word	0x40020000

0800182c <ILI9341_WriteCommand>:
#include "stm32f4xx_hal.h"
#include "ili9341.h"

// Send command to display. Use ILI9341_SELECT() before
static inline void ILI9341_WriteCommand(ILI9341TypeDef *display, uint8_t command)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	b082      	sub	sp, #8
 8001830:	af00      	add	r7, sp, #0
 8001832:	6078      	str	r0, [r7, #4]
 8001834:	460b      	mov	r3, r1
 8001836:	70fb      	strb	r3, [r7, #3]
	ILI9341_COMMAND(display);
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	8a5b      	ldrh	r3, [r3, #18]
 800183c:	461a      	mov	r2, r3
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	689b      	ldr	r3, [r3, #8]
 8001842:	0412      	lsls	r2, r2, #16
 8001844:	619a      	str	r2, [r3, #24]
	HAL_SPI_Transmit(display->spi, &command, 1, 1);
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	6818      	ldr	r0, [r3, #0]
 800184a:	1cf9      	adds	r1, r7, #3
 800184c:	2301      	movs	r3, #1
 800184e:	2201      	movs	r2, #1
 8001850:	f006 fe39 	bl	80084c6 <HAL_SPI_Transmit>
}
 8001854:	bf00      	nop
 8001856:	3708      	adds	r7, #8
 8001858:	46bd      	mov	sp, r7
 800185a:	bd80      	pop	{r7, pc}

0800185c <ILI9341_WriteByte>:

// Send byte to display. Use ILI9341_SELECT() before
static inline void ILI9341_WriteByte(ILI9341TypeDef *display, uint8_t data)
{
 800185c:	b580      	push	{r7, lr}
 800185e:	b082      	sub	sp, #8
 8001860:	af00      	add	r7, sp, #0
 8001862:	6078      	str	r0, [r7, #4]
 8001864:	460b      	mov	r3, r1
 8001866:	70fb      	strb	r3, [r7, #3]
	ILI9341_DATA(display);
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	8a5a      	ldrh	r2, [r3, #18]
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	689b      	ldr	r3, [r3, #8]
 8001870:	619a      	str	r2, [r3, #24]
	HAL_SPI_Transmit(display->spi, &data, 1, 1);
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	6818      	ldr	r0, [r3, #0]
 8001876:	1cf9      	adds	r1, r7, #3
 8001878:	2301      	movs	r3, #1
 800187a:	2201      	movs	r2, #1
 800187c:	f006 fe23 	bl	80084c6 <HAL_SPI_Transmit>
}
 8001880:	bf00      	nop
 8001882:	3708      	adds	r7, #8
 8001884:	46bd      	mov	sp, r7
 8001886:	bd80      	pop	{r7, pc}

08001888 <ILI9341_WriteBuffer>:

// Send buffer to display. Use ILI9341_SELECT() before
static inline void ILI9341_WriteBuffer(ILI9341TypeDef *display, uint8_t* buff, size_t buff_size)
{
 8001888:	b580      	push	{r7, lr}
 800188a:	b086      	sub	sp, #24
 800188c:	af00      	add	r7, sp, #0
 800188e:	60f8      	str	r0, [r7, #12]
 8001890:	60b9      	str	r1, [r7, #8]
 8001892:	607a      	str	r2, [r7, #4]
	ILI9341_DATA(display);
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	8a5a      	ldrh	r2, [r3, #18]
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	689b      	ldr	r3, [r3, #8]
 800189c:	619a      	str	r2, [r3, #24]

    // split data in small chunks because HAL can't send more then 64K at once
    while (buff_size > 0) {
 800189e:	e015      	b.n	80018cc <ILI9341_WriteBuffer+0x44>
        uint16_t chunk_size = buff_size > 32768 ? 32768 : buff_size;
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80018a6:	bf28      	it	cs
 80018a8:	f44f 4300 	movcs.w	r3, #32768	@ 0x8000
 80018ac:	82fb      	strh	r3, [r7, #22]
        HAL_SPI_Transmit(display->spi, buff, chunk_size, 10);
 80018ae:	68fb      	ldr	r3, [r7, #12]
 80018b0:	6818      	ldr	r0, [r3, #0]
 80018b2:	8afa      	ldrh	r2, [r7, #22]
 80018b4:	230a      	movs	r3, #10
 80018b6:	68b9      	ldr	r1, [r7, #8]
 80018b8:	f006 fe05 	bl	80084c6 <HAL_SPI_Transmit>
        buff += chunk_size;
 80018bc:	8afb      	ldrh	r3, [r7, #22]
 80018be:	68ba      	ldr	r2, [r7, #8]
 80018c0:	4413      	add	r3, r2
 80018c2:	60bb      	str	r3, [r7, #8]
        buff_size -= chunk_size;
 80018c4:	8afb      	ldrh	r3, [r7, #22]
 80018c6:	687a      	ldr	r2, [r7, #4]
 80018c8:	1ad3      	subs	r3, r2, r3
 80018ca:	607b      	str	r3, [r7, #4]
    while (buff_size > 0) {
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d1e6      	bne.n	80018a0 <ILI9341_WriteBuffer+0x18>
    }
}
 80018d2:	bf00      	nop
 80018d4:	bf00      	nop
 80018d6:	3718      	adds	r7, #24
 80018d8:	46bd      	mov	sp, r7
 80018da:	bd80      	pop	{r7, pc}

080018dc <ILI9341_SetAddressWindow>:

static inline void ILI9341_SetAddressWindow(ILI9341TypeDef *display, uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	b086      	sub	sp, #24
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	60f8      	str	r0, [r7, #12]
 80018e4:	4608      	mov	r0, r1
 80018e6:	4611      	mov	r1, r2
 80018e8:	461a      	mov	r2, r3
 80018ea:	4603      	mov	r3, r0
 80018ec:	817b      	strh	r3, [r7, #10]
 80018ee:	460b      	mov	r3, r1
 80018f0:	813b      	strh	r3, [r7, #8]
 80018f2:	4613      	mov	r3, r2
 80018f4:	80fb      	strh	r3, [r7, #6]
    // Column address set
	ILI9341_WriteCommand(display, 0x2A); // CASET
 80018f6:	212a      	movs	r1, #42	@ 0x2a
 80018f8:	68f8      	ldr	r0, [r7, #12]
 80018fa:	f7ff ff97 	bl	800182c <ILI9341_WriteCommand>

	uint8_t data[4];
	data[0] = x1 >> 8;
 80018fe:	897b      	ldrh	r3, [r7, #10]
 8001900:	0a1b      	lsrs	r3, r3, #8
 8001902:	b29b      	uxth	r3, r3
 8001904:	b2db      	uxtb	r3, r3
 8001906:	753b      	strb	r3, [r7, #20]
	data[1] = x1;
 8001908:	897b      	ldrh	r3, [r7, #10]
 800190a:	b2db      	uxtb	r3, r3
 800190c:	757b      	strb	r3, [r7, #21]
	data[2] = x2 >> 8;
 800190e:	88fb      	ldrh	r3, [r7, #6]
 8001910:	0a1b      	lsrs	r3, r3, #8
 8001912:	b29b      	uxth	r3, r3
 8001914:	b2db      	uxtb	r3, r3
 8001916:	75bb      	strb	r3, [r7, #22]
	data[3] = x2;
 8001918:	88fb      	ldrh	r3, [r7, #6]
 800191a:	b2db      	uxtb	r3, r3
 800191c:	75fb      	strb	r3, [r7, #23]

	ILI9341_DATA(display);
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	8a5a      	ldrh	r2, [r3, #18]
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	689b      	ldr	r3, [r3, #8]
 8001926:	619a      	str	r2, [r3, #24]
	HAL_SPI_Transmit(display->spi, data, 4, 1);
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	6818      	ldr	r0, [r3, #0]
 800192c:	f107 0114 	add.w	r1, r7, #20
 8001930:	2301      	movs	r3, #1
 8001932:	2204      	movs	r2, #4
 8001934:	f006 fdc7 	bl	80084c6 <HAL_SPI_Transmit>

    // Row address set
	ILI9341_WriteCommand(display, 0x2B); // RASET
 8001938:	212b      	movs	r1, #43	@ 0x2b
 800193a:	68f8      	ldr	r0, [r7, #12]
 800193c:	f7ff ff76 	bl	800182c <ILI9341_WriteCommand>

	data[0] = y1 >> 8;
 8001940:	893b      	ldrh	r3, [r7, #8]
 8001942:	0a1b      	lsrs	r3, r3, #8
 8001944:	b29b      	uxth	r3, r3
 8001946:	b2db      	uxtb	r3, r3
 8001948:	753b      	strb	r3, [r7, #20]
	data[1] = y1;
 800194a:	893b      	ldrh	r3, [r7, #8]
 800194c:	b2db      	uxtb	r3, r3
 800194e:	757b      	strb	r3, [r7, #21]
	data[2] = y2 >> 8;
 8001950:	8c3b      	ldrh	r3, [r7, #32]
 8001952:	0a1b      	lsrs	r3, r3, #8
 8001954:	b29b      	uxth	r3, r3
 8001956:	b2db      	uxtb	r3, r3
 8001958:	75bb      	strb	r3, [r7, #22]
	data[3] = y2;
 800195a:	8c3b      	ldrh	r3, [r7, #32]
 800195c:	b2db      	uxtb	r3, r3
 800195e:	75fb      	strb	r3, [r7, #23]

	ILI9341_DATA(display);
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	8a5a      	ldrh	r2, [r3, #18]
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	689b      	ldr	r3, [r3, #8]
 8001968:	619a      	str	r2, [r3, #24]
	HAL_SPI_Transmit(display->spi, data, 4, 1);
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	6818      	ldr	r0, [r3, #0]
 800196e:	f107 0114 	add.w	r1, r7, #20
 8001972:	2301      	movs	r3, #1
 8001974:	2204      	movs	r2, #4
 8001976:	f006 fda6 	bl	80084c6 <HAL_SPI_Transmit>

    // Write to RAM
	ILI9341_WriteCommand(display, 0x2C); // RAMWR
 800197a:	212c      	movs	r1, #44	@ 0x2c
 800197c:	68f8      	ldr	r0, [r7, #12]
 800197e:	f7ff ff55 	bl	800182c <ILI9341_WriteCommand>
}
 8001982:	bf00      	nop
 8001984:	3718      	adds	r7, #24
 8001986:	46bd      	mov	sp, r7
 8001988:	bd80      	pop	{r7, pc}

0800198a <ILI9341_Reset>:

static inline void ILI9341_Reset(ILI9341TypeDef *display)
{
 800198a:	b580      	push	{r7, lr}
 800198c:	b082      	sub	sp, #8
 800198e:	af00      	add	r7, sp, #0
 8001990:	6078      	str	r0, [r7, #4]
    display->reset_gpio_port->BSRR = (uint32_t)(display->reset_pin) << 16U;
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	8a9b      	ldrh	r3, [r3, #20]
 8001996:	461a      	mov	r2, r3
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	68db      	ldr	r3, [r3, #12]
 800199c:	0412      	lsls	r2, r2, #16
 800199e:	619a      	str	r2, [r3, #24]
    HAL_Delay(5);
 80019a0:	2005      	movs	r0, #5
 80019a2:	f003 fddd 	bl	8005560 <HAL_Delay>
    display->reset_gpio_port->BSRR = display->reset_pin;
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	8a9a      	ldrh	r2, [r3, #20]
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	68db      	ldr	r3, [r3, #12]
 80019ae:	619a      	str	r2, [r3, #24]
}
 80019b0:	bf00      	nop
 80019b2:	3708      	adds	r7, #8
 80019b4:	46bd      	mov	sp, r7
 80019b6:	bd80      	pop	{r7, pc}

080019b8 <ILI9341_Init>:

void ILI9341_Init(ILI9341TypeDef *display)
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	b082      	sub	sp, #8
 80019bc:	af00      	add	r7, sp, #0
 80019be:	6078      	str	r0, [r7, #4]
	ILI9341_SELECT(display);
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	8a1b      	ldrh	r3, [r3, #16]
 80019c4:	461a      	mov	r2, r3
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	685b      	ldr	r3, [r3, #4]
 80019ca:	0412      	lsls	r2, r2, #16
 80019cc:	619a      	str	r2, [r3, #24]
	ILI9341_Reset(display);
 80019ce:	6878      	ldr	r0, [r7, #4]
 80019d0:	f7ff ffdb 	bl	800198a <ILI9341_Reset>

	// SOFTWARE RESET
	ILI9341_WriteCommand(display, 0x01);
 80019d4:	2101      	movs	r1, #1
 80019d6:	6878      	ldr	r0, [r7, #4]
 80019d8:	f7ff ff28 	bl	800182c <ILI9341_WriteCommand>
	HAL_Delay(1000);
 80019dc:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80019e0:	f003 fdbe 	bl	8005560 <HAL_Delay>

	// POWER CONTROL A
	ILI9341_WriteCommand(display, 0xCB);
 80019e4:	21cb      	movs	r1, #203	@ 0xcb
 80019e6:	6878      	ldr	r0, [r7, #4]
 80019e8:	f7ff ff20 	bl	800182c <ILI9341_WriteCommand>
	ILI9341_WriteByte(display, 0x39);
 80019ec:	2139      	movs	r1, #57	@ 0x39
 80019ee:	6878      	ldr	r0, [r7, #4]
 80019f0:	f7ff ff34 	bl	800185c <ILI9341_WriteByte>
	ILI9341_WriteByte(display, 0x2C);
 80019f4:	212c      	movs	r1, #44	@ 0x2c
 80019f6:	6878      	ldr	r0, [r7, #4]
 80019f8:	f7ff ff30 	bl	800185c <ILI9341_WriteByte>
	ILI9341_WriteByte(display, 0x00);
 80019fc:	2100      	movs	r1, #0
 80019fe:	6878      	ldr	r0, [r7, #4]
 8001a00:	f7ff ff2c 	bl	800185c <ILI9341_WriteByte>
	ILI9341_WriteByte(display, 0x34);
 8001a04:	2134      	movs	r1, #52	@ 0x34
 8001a06:	6878      	ldr	r0, [r7, #4]
 8001a08:	f7ff ff28 	bl	800185c <ILI9341_WriteByte>
	ILI9341_WriteByte(display, 0x02);
 8001a0c:	2102      	movs	r1, #2
 8001a0e:	6878      	ldr	r0, [r7, #4]
 8001a10:	f7ff ff24 	bl	800185c <ILI9341_WriteByte>

	// POWER CONTROL B
	ILI9341_WriteCommand(display, 0xCF);
 8001a14:	21cf      	movs	r1, #207	@ 0xcf
 8001a16:	6878      	ldr	r0, [r7, #4]
 8001a18:	f7ff ff08 	bl	800182c <ILI9341_WriteCommand>
	ILI9341_WriteByte(display, 0x00);
 8001a1c:	2100      	movs	r1, #0
 8001a1e:	6878      	ldr	r0, [r7, #4]
 8001a20:	f7ff ff1c 	bl	800185c <ILI9341_WriteByte>
	ILI9341_WriteByte(display, 0xC1);
 8001a24:	21c1      	movs	r1, #193	@ 0xc1
 8001a26:	6878      	ldr	r0, [r7, #4]
 8001a28:	f7ff ff18 	bl	800185c <ILI9341_WriteByte>
	ILI9341_WriteByte(display, 0x30);
 8001a2c:	2130      	movs	r1, #48	@ 0x30
 8001a2e:	6878      	ldr	r0, [r7, #4]
 8001a30:	f7ff ff14 	bl	800185c <ILI9341_WriteByte>

	// DRIVER TIMING CONTROL A
	ILI9341_WriteCommand(display, 0xE8);
 8001a34:	21e8      	movs	r1, #232	@ 0xe8
 8001a36:	6878      	ldr	r0, [r7, #4]
 8001a38:	f7ff fef8 	bl	800182c <ILI9341_WriteCommand>
	ILI9341_WriteByte(display, 0x85);
 8001a3c:	2185      	movs	r1, #133	@ 0x85
 8001a3e:	6878      	ldr	r0, [r7, #4]
 8001a40:	f7ff ff0c 	bl	800185c <ILI9341_WriteByte>
	ILI9341_WriteByte(display, 0x00);
 8001a44:	2100      	movs	r1, #0
 8001a46:	6878      	ldr	r0, [r7, #4]
 8001a48:	f7ff ff08 	bl	800185c <ILI9341_WriteByte>
	ILI9341_WriteByte(display, 0x78);
 8001a4c:	2178      	movs	r1, #120	@ 0x78
 8001a4e:	6878      	ldr	r0, [r7, #4]
 8001a50:	f7ff ff04 	bl	800185c <ILI9341_WriteByte>

	// DRIVER TIMING CONTROL B
	ILI9341_WriteCommand(display, 0xEA);
 8001a54:	21ea      	movs	r1, #234	@ 0xea
 8001a56:	6878      	ldr	r0, [r7, #4]
 8001a58:	f7ff fee8 	bl	800182c <ILI9341_WriteCommand>
	ILI9341_WriteByte(display, 0x00);
 8001a5c:	2100      	movs	r1, #0
 8001a5e:	6878      	ldr	r0, [r7, #4]
 8001a60:	f7ff fefc 	bl	800185c <ILI9341_WriteByte>
	ILI9341_WriteByte(display, 0x00);
 8001a64:	2100      	movs	r1, #0
 8001a66:	6878      	ldr	r0, [r7, #4]
 8001a68:	f7ff fef8 	bl	800185c <ILI9341_WriteByte>

	// POWER ON SEQUENCE CONTROL
	ILI9341_WriteCommand(display, 0xED);
 8001a6c:	21ed      	movs	r1, #237	@ 0xed
 8001a6e:	6878      	ldr	r0, [r7, #4]
 8001a70:	f7ff fedc 	bl	800182c <ILI9341_WriteCommand>
	ILI9341_WriteByte(display, 0x64);
 8001a74:	2164      	movs	r1, #100	@ 0x64
 8001a76:	6878      	ldr	r0, [r7, #4]
 8001a78:	f7ff fef0 	bl	800185c <ILI9341_WriteByte>
	ILI9341_WriteByte(display, 0x03);
 8001a7c:	2103      	movs	r1, #3
 8001a7e:	6878      	ldr	r0, [r7, #4]
 8001a80:	f7ff feec 	bl	800185c <ILI9341_WriteByte>
	ILI9341_WriteByte(display, 0x12);
 8001a84:	2112      	movs	r1, #18
 8001a86:	6878      	ldr	r0, [r7, #4]
 8001a88:	f7ff fee8 	bl	800185c <ILI9341_WriteByte>
	ILI9341_WriteByte(display, 0x81);
 8001a8c:	2181      	movs	r1, #129	@ 0x81
 8001a8e:	6878      	ldr	r0, [r7, #4]
 8001a90:	f7ff fee4 	bl	800185c <ILI9341_WriteByte>

	// PUMP RATIO CONTROL
	ILI9341_WriteCommand(display, 0xF7);
 8001a94:	21f7      	movs	r1, #247	@ 0xf7
 8001a96:	6878      	ldr	r0, [r7, #4]
 8001a98:	f7ff fec8 	bl	800182c <ILI9341_WriteCommand>
	ILI9341_WriteByte(display, 0x20);
 8001a9c:	2120      	movs	r1, #32
 8001a9e:	6878      	ldr	r0, [r7, #4]
 8001aa0:	f7ff fedc 	bl	800185c <ILI9341_WriteByte>

	// POWER CONTROL,VRH[5:0]
	ILI9341_WriteCommand(display, 0xC0);
 8001aa4:	21c0      	movs	r1, #192	@ 0xc0
 8001aa6:	6878      	ldr	r0, [r7, #4]
 8001aa8:	f7ff fec0 	bl	800182c <ILI9341_WriteCommand>
	ILI9341_WriteByte(display, 0x23);
 8001aac:	2123      	movs	r1, #35	@ 0x23
 8001aae:	6878      	ldr	r0, [r7, #4]
 8001ab0:	f7ff fed4 	bl	800185c <ILI9341_WriteByte>

	// POWER CONTROL,SAP[2:0];BT[3:0]
	ILI9341_WriteCommand(display, 0xC1);
 8001ab4:	21c1      	movs	r1, #193	@ 0xc1
 8001ab6:	6878      	ldr	r0, [r7, #4]
 8001ab8:	f7ff feb8 	bl	800182c <ILI9341_WriteCommand>
	ILI9341_WriteByte(display, 0x10);
 8001abc:	2110      	movs	r1, #16
 8001abe:	6878      	ldr	r0, [r7, #4]
 8001ac0:	f7ff fecc 	bl	800185c <ILI9341_WriteByte>

	// VCM CONTROL
	ILI9341_WriteCommand(display, 0xC5);
 8001ac4:	21c5      	movs	r1, #197	@ 0xc5
 8001ac6:	6878      	ldr	r0, [r7, #4]
 8001ac8:	f7ff feb0 	bl	800182c <ILI9341_WriteCommand>
	ILI9341_WriteByte(display, 0x3E);
 8001acc:	213e      	movs	r1, #62	@ 0x3e
 8001ace:	6878      	ldr	r0, [r7, #4]
 8001ad0:	f7ff fec4 	bl	800185c <ILI9341_WriteByte>
	ILI9341_WriteByte(display, 0x28);
 8001ad4:	2128      	movs	r1, #40	@ 0x28
 8001ad6:	6878      	ldr	r0, [r7, #4]
 8001ad8:	f7ff fec0 	bl	800185c <ILI9341_WriteByte>

	// VCM CONTROL 2
	ILI9341_WriteCommand(display, 0xC7);
 8001adc:	21c7      	movs	r1, #199	@ 0xc7
 8001ade:	6878      	ldr	r0, [r7, #4]
 8001ae0:	f7ff fea4 	bl	800182c <ILI9341_WriteCommand>
	ILI9341_WriteByte(display, 0x86);
 8001ae4:	2186      	movs	r1, #134	@ 0x86
 8001ae6:	6878      	ldr	r0, [r7, #4]
 8001ae8:	f7ff feb8 	bl	800185c <ILI9341_WriteByte>

	// MEMORY ACCESS CONTROL
	ILI9341_WriteCommand(display, 0x36);
 8001aec:	2136      	movs	r1, #54	@ 0x36
 8001aee:	6878      	ldr	r0, [r7, #4]
 8001af0:	f7ff fe9c 	bl	800182c <ILI9341_WriteCommand>
	ILI9341_WriteByte(display, 0x48);
 8001af4:	2148      	movs	r1, #72	@ 0x48
 8001af6:	6878      	ldr	r0, [r7, #4]
 8001af8:	f7ff feb0 	bl	800185c <ILI9341_WriteByte>

	// PIXEL FORMAT
	ILI9341_WriteCommand(display, 0x3A);
 8001afc:	213a      	movs	r1, #58	@ 0x3a
 8001afe:	6878      	ldr	r0, [r7, #4]
 8001b00:	f7ff fe94 	bl	800182c <ILI9341_WriteCommand>
	ILI9341_WriteByte(display, 0x55);
 8001b04:	2155      	movs	r1, #85	@ 0x55
 8001b06:	6878      	ldr	r0, [r7, #4]
 8001b08:	f7ff fea8 	bl	800185c <ILI9341_WriteByte>

	// FRAME RATIO CONTROL, STANDARD RGB COLOR
	ILI9341_WriteCommand(display, 0xB1);
 8001b0c:	21b1      	movs	r1, #177	@ 0xb1
 8001b0e:	6878      	ldr	r0, [r7, #4]
 8001b10:	f7ff fe8c 	bl	800182c <ILI9341_WriteCommand>
	ILI9341_WriteByte(display, 0x00);
 8001b14:	2100      	movs	r1, #0
 8001b16:	6878      	ldr	r0, [r7, #4]
 8001b18:	f7ff fea0 	bl	800185c <ILI9341_WriteByte>
	ILI9341_WriteByte(display, 0x18);
 8001b1c:	2118      	movs	r1, #24
 8001b1e:	6878      	ldr	r0, [r7, #4]
 8001b20:	f7ff fe9c 	bl	800185c <ILI9341_WriteByte>

	// DISPLAY FUNCTION CONTROL
	ILI9341_WriteCommand(display, 0xB6);
 8001b24:	21b6      	movs	r1, #182	@ 0xb6
 8001b26:	6878      	ldr	r0, [r7, #4]
 8001b28:	f7ff fe80 	bl	800182c <ILI9341_WriteCommand>
	ILI9341_WriteByte(display, 0x08);
 8001b2c:	2108      	movs	r1, #8
 8001b2e:	6878      	ldr	r0, [r7, #4]
 8001b30:	f7ff fe94 	bl	800185c <ILI9341_WriteByte>
	ILI9341_WriteByte(display, 0x82);
 8001b34:	2182      	movs	r1, #130	@ 0x82
 8001b36:	6878      	ldr	r0, [r7, #4]
 8001b38:	f7ff fe90 	bl	800185c <ILI9341_WriteByte>
	ILI9341_WriteByte(display, 0x27);
 8001b3c:	2127      	movs	r1, #39	@ 0x27
 8001b3e:	6878      	ldr	r0, [r7, #4]
 8001b40:	f7ff fe8c 	bl	800185c <ILI9341_WriteByte>

	// 3GAMMA FUNCTION DISABLE
	ILI9341_WriteCommand(display, 0xF2);
 8001b44:	21f2      	movs	r1, #242	@ 0xf2
 8001b46:	6878      	ldr	r0, [r7, #4]
 8001b48:	f7ff fe70 	bl	800182c <ILI9341_WriteCommand>
	ILI9341_WriteByte(display, 0x00);
 8001b4c:	2100      	movs	r1, #0
 8001b4e:	6878      	ldr	r0, [r7, #4]
 8001b50:	f7ff fe84 	bl	800185c <ILI9341_WriteByte>

	// GAMMA CURVE SELECTED
	ILI9341_WriteCommand(display, 0x26);
 8001b54:	2126      	movs	r1, #38	@ 0x26
 8001b56:	6878      	ldr	r0, [r7, #4]
 8001b58:	f7ff fe68 	bl	800182c <ILI9341_WriteCommand>
	ILI9341_WriteByte(display, 0x01);
 8001b5c:	2101      	movs	r1, #1
 8001b5e:	6878      	ldr	r0, [r7, #4]
 8001b60:	f7ff fe7c 	bl	800185c <ILI9341_WriteByte>

	// POSITIVE GAMMA CORRECTION
	ILI9341_WriteCommand(display, 0xE0);
 8001b64:	21e0      	movs	r1, #224	@ 0xe0
 8001b66:	6878      	ldr	r0, [r7, #4]
 8001b68:	f7ff fe60 	bl	800182c <ILI9341_WriteCommand>
	ILI9341_WriteByte(display, 0x0F);
 8001b6c:	210f      	movs	r1, #15
 8001b6e:	6878      	ldr	r0, [r7, #4]
 8001b70:	f7ff fe74 	bl	800185c <ILI9341_WriteByte>
	ILI9341_WriteByte(display, 0x31);
 8001b74:	2131      	movs	r1, #49	@ 0x31
 8001b76:	6878      	ldr	r0, [r7, #4]
 8001b78:	f7ff fe70 	bl	800185c <ILI9341_WriteByte>
	ILI9341_WriteByte(display, 0x2B);
 8001b7c:	212b      	movs	r1, #43	@ 0x2b
 8001b7e:	6878      	ldr	r0, [r7, #4]
 8001b80:	f7ff fe6c 	bl	800185c <ILI9341_WriteByte>
	ILI9341_WriteByte(display, 0x0C);
 8001b84:	210c      	movs	r1, #12
 8001b86:	6878      	ldr	r0, [r7, #4]
 8001b88:	f7ff fe68 	bl	800185c <ILI9341_WriteByte>
	ILI9341_WriteByte(display, 0x0E);
 8001b8c:	210e      	movs	r1, #14
 8001b8e:	6878      	ldr	r0, [r7, #4]
 8001b90:	f7ff fe64 	bl	800185c <ILI9341_WriteByte>
	ILI9341_WriteByte(display, 0x08);
 8001b94:	2108      	movs	r1, #8
 8001b96:	6878      	ldr	r0, [r7, #4]
 8001b98:	f7ff fe60 	bl	800185c <ILI9341_WriteByte>
	ILI9341_WriteByte(display, 0x4E);
 8001b9c:	214e      	movs	r1, #78	@ 0x4e
 8001b9e:	6878      	ldr	r0, [r7, #4]
 8001ba0:	f7ff fe5c 	bl	800185c <ILI9341_WriteByte>
	ILI9341_WriteByte(display, 0xF1);
 8001ba4:	21f1      	movs	r1, #241	@ 0xf1
 8001ba6:	6878      	ldr	r0, [r7, #4]
 8001ba8:	f7ff fe58 	bl	800185c <ILI9341_WriteByte>
	ILI9341_WriteByte(display, 0x37);
 8001bac:	2137      	movs	r1, #55	@ 0x37
 8001bae:	6878      	ldr	r0, [r7, #4]
 8001bb0:	f7ff fe54 	bl	800185c <ILI9341_WriteByte>
	ILI9341_WriteByte(display, 0x07);
 8001bb4:	2107      	movs	r1, #7
 8001bb6:	6878      	ldr	r0, [r7, #4]
 8001bb8:	f7ff fe50 	bl	800185c <ILI9341_WriteByte>
	ILI9341_WriteByte(display, 0x10);
 8001bbc:	2110      	movs	r1, #16
 8001bbe:	6878      	ldr	r0, [r7, #4]
 8001bc0:	f7ff fe4c 	bl	800185c <ILI9341_WriteByte>
	ILI9341_WriteByte(display, 0x03);
 8001bc4:	2103      	movs	r1, #3
 8001bc6:	6878      	ldr	r0, [r7, #4]
 8001bc8:	f7ff fe48 	bl	800185c <ILI9341_WriteByte>
	ILI9341_WriteByte(display, 0x0E);
 8001bcc:	210e      	movs	r1, #14
 8001bce:	6878      	ldr	r0, [r7, #4]
 8001bd0:	f7ff fe44 	bl	800185c <ILI9341_WriteByte>
	ILI9341_WriteByte(display, 0x09);
 8001bd4:	2109      	movs	r1, #9
 8001bd6:	6878      	ldr	r0, [r7, #4]
 8001bd8:	f7ff fe40 	bl	800185c <ILI9341_WriteByte>
	ILI9341_WriteByte(display, 0x00);
 8001bdc:	2100      	movs	r1, #0
 8001bde:	6878      	ldr	r0, [r7, #4]
 8001be0:	f7ff fe3c 	bl	800185c <ILI9341_WriteByte>

	// NEGATIVE GAMMA CORRECTION
	ILI9341_WriteCommand(display, 0xE1);
 8001be4:	21e1      	movs	r1, #225	@ 0xe1
 8001be6:	6878      	ldr	r0, [r7, #4]
 8001be8:	f7ff fe20 	bl	800182c <ILI9341_WriteCommand>
	ILI9341_WriteByte(display, 0x00);
 8001bec:	2100      	movs	r1, #0
 8001bee:	6878      	ldr	r0, [r7, #4]
 8001bf0:	f7ff fe34 	bl	800185c <ILI9341_WriteByte>
	ILI9341_WriteByte(display, 0x0E);
 8001bf4:	210e      	movs	r1, #14
 8001bf6:	6878      	ldr	r0, [r7, #4]
 8001bf8:	f7ff fe30 	bl	800185c <ILI9341_WriteByte>
	ILI9341_WriteByte(display, 0x14);
 8001bfc:	2114      	movs	r1, #20
 8001bfe:	6878      	ldr	r0, [r7, #4]
 8001c00:	f7ff fe2c 	bl	800185c <ILI9341_WriteByte>
	ILI9341_WriteByte(display, 0x03);
 8001c04:	2103      	movs	r1, #3
 8001c06:	6878      	ldr	r0, [r7, #4]
 8001c08:	f7ff fe28 	bl	800185c <ILI9341_WriteByte>
	ILI9341_WriteByte(display, 0x11);
 8001c0c:	2111      	movs	r1, #17
 8001c0e:	6878      	ldr	r0, [r7, #4]
 8001c10:	f7ff fe24 	bl	800185c <ILI9341_WriteByte>
	ILI9341_WriteByte(display, 0x07);
 8001c14:	2107      	movs	r1, #7
 8001c16:	6878      	ldr	r0, [r7, #4]
 8001c18:	f7ff fe20 	bl	800185c <ILI9341_WriteByte>
	ILI9341_WriteByte(display, 0x31);
 8001c1c:	2131      	movs	r1, #49	@ 0x31
 8001c1e:	6878      	ldr	r0, [r7, #4]
 8001c20:	f7ff fe1c 	bl	800185c <ILI9341_WriteByte>
	ILI9341_WriteByte(display, 0xC1);
 8001c24:	21c1      	movs	r1, #193	@ 0xc1
 8001c26:	6878      	ldr	r0, [r7, #4]
 8001c28:	f7ff fe18 	bl	800185c <ILI9341_WriteByte>
	ILI9341_WriteByte(display, 0x48);
 8001c2c:	2148      	movs	r1, #72	@ 0x48
 8001c2e:	6878      	ldr	r0, [r7, #4]
 8001c30:	f7ff fe14 	bl	800185c <ILI9341_WriteByte>
	ILI9341_WriteByte(display, 0x08);
 8001c34:	2108      	movs	r1, #8
 8001c36:	6878      	ldr	r0, [r7, #4]
 8001c38:	f7ff fe10 	bl	800185c <ILI9341_WriteByte>
	ILI9341_WriteByte(display, 0x0F);
 8001c3c:	210f      	movs	r1, #15
 8001c3e:	6878      	ldr	r0, [r7, #4]
 8001c40:	f7ff fe0c 	bl	800185c <ILI9341_WriteByte>
	ILI9341_WriteByte(display, 0x0C);
 8001c44:	210c      	movs	r1, #12
 8001c46:	6878      	ldr	r0, [r7, #4]
 8001c48:	f7ff fe08 	bl	800185c <ILI9341_WriteByte>
	ILI9341_WriteByte(display, 0x31);
 8001c4c:	2131      	movs	r1, #49	@ 0x31
 8001c4e:	6878      	ldr	r0, [r7, #4]
 8001c50:	f7ff fe04 	bl	800185c <ILI9341_WriteByte>
	ILI9341_WriteByte(display, 0x36);
 8001c54:	2136      	movs	r1, #54	@ 0x36
 8001c56:	6878      	ldr	r0, [r7, #4]
 8001c58:	f7ff fe00 	bl	800185c <ILI9341_WriteByte>
	ILI9341_WriteByte(display, 0x0F);
 8001c5c:	210f      	movs	r1, #15
 8001c5e:	6878      	ldr	r0, [r7, #4]
 8001c60:	f7ff fdfc 	bl	800185c <ILI9341_WriteByte>

	// EXIT SLEEP
	ILI9341_WriteCommand(display, 0x11);
 8001c64:	2111      	movs	r1, #17
 8001c66:	6878      	ldr	r0, [r7, #4]
 8001c68:	f7ff fde0 	bl	800182c <ILI9341_WriteCommand>
	HAL_Delay(120);
 8001c6c:	2078      	movs	r0, #120	@ 0x78
 8001c6e:	f003 fc77 	bl	8005560 <HAL_Delay>

	// TURN ON DISPLAY
	ILI9341_WriteCommand(display, 0x29);
 8001c72:	2129      	movs	r1, #41	@ 0x29
 8001c74:	6878      	ldr	r0, [r7, #4]
 8001c76:	f7ff fdd9 	bl	800182c <ILI9341_WriteCommand>

	// MADCTL
	ILI9341_WriteCommand(display, 0x36);
 8001c7a:	2136      	movs	r1, #54	@ 0x36
 8001c7c:	6878      	ldr	r0, [r7, #4]
 8001c7e:	f7ff fdd5 	bl	800182c <ILI9341_WriteCommand>
	ILI9341_WriteByte(display, display->orientation);
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	7e9b      	ldrb	r3, [r3, #26]
 8001c86:	4619      	mov	r1, r3
 8001c88:	6878      	ldr	r0, [r7, #4]
 8001c8a:	f7ff fde7 	bl	800185c <ILI9341_WriteByte>

	ILI9341_UNSELECT(display);
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	8a1a      	ldrh	r2, [r3, #16]
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	685b      	ldr	r3, [r3, #4]
 8001c96:	619a      	str	r2, [r3, #24]
}
 8001c98:	bf00      	nop
 8001c9a:	3708      	adds	r7, #8
 8001c9c:	46bd      	mov	sp, r7
 8001c9e:	bd80      	pop	{r7, pc}

08001ca0 <ILI9341_DrawPixel>:
    ILI9341_WriteCommand(display, (invert > 0) ? 0x21 /* INVON */ : 0x20 /* INVOFF */);
    ILI9341_UNSELECT(display);
}

void ILI9341_DrawPixel(ILI9341TypeDef *display, uint16_t x, uint16_t y, uint16_t color)
{
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	b088      	sub	sp, #32
 8001ca4:	af02      	add	r7, sp, #8
 8001ca6:	60f8      	str	r0, [r7, #12]
 8001ca8:	4608      	mov	r0, r1
 8001caa:	4611      	mov	r1, r2
 8001cac:	461a      	mov	r2, r3
 8001cae:	4603      	mov	r3, r0
 8001cb0:	817b      	strh	r3, [r7, #10]
 8001cb2:	460b      	mov	r3, r1
 8001cb4:	813b      	strh	r3, [r7, #8]
 8001cb6:	4613      	mov	r3, r2
 8001cb8:	80fb      	strh	r3, [r7, #6]
	// Check out of bounds
	if((x >= display->width) || (y >= display->height))
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	8adb      	ldrh	r3, [r3, #22]
 8001cbe:	897a      	ldrh	r2, [r7, #10]
 8001cc0:	429a      	cmp	r2, r3
 8001cc2:	d233      	bcs.n	8001d2c <ILI9341_DrawPixel+0x8c>
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	8b1b      	ldrh	r3, [r3, #24]
 8001cc8:	893a      	ldrh	r2, [r7, #8]
 8001cca:	429a      	cmp	r2, r3
 8001ccc:	d22e      	bcs.n	8001d2c <ILI9341_DrawPixel+0x8c>
		return;

	ILI9341_SELECT(display);
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	8a1b      	ldrh	r3, [r3, #16]
 8001cd2:	461a      	mov	r2, r3
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	685b      	ldr	r3, [r3, #4]
 8001cd8:	0412      	lsls	r2, r2, #16
 8001cda:	619a      	str	r2, [r3, #24]
	ILI9341_SetAddressWindow(display, x, y, x + 1, y + 1);
 8001cdc:	897b      	ldrh	r3, [r7, #10]
 8001cde:	3301      	adds	r3, #1
 8001ce0:	b298      	uxth	r0, r3
 8001ce2:	893b      	ldrh	r3, [r7, #8]
 8001ce4:	3301      	adds	r3, #1
 8001ce6:	b29b      	uxth	r3, r3
 8001ce8:	893a      	ldrh	r2, [r7, #8]
 8001cea:	8979      	ldrh	r1, [r7, #10]
 8001cec:	9300      	str	r3, [sp, #0]
 8001cee:	4603      	mov	r3, r0
 8001cf0:	68f8      	ldr	r0, [r7, #12]
 8001cf2:	f7ff fdf3 	bl	80018dc <ILI9341_SetAddressWindow>

	ILI9341_DATA(display);
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	8a5a      	ldrh	r2, [r3, #18]
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	689b      	ldr	r3, [r3, #8]
 8001cfe:	619a      	str	r2, [r3, #24]
	uint8_t data[2] = { color >> 8, color };
 8001d00:	88fb      	ldrh	r3, [r7, #6]
 8001d02:	0a1b      	lsrs	r3, r3, #8
 8001d04:	b29b      	uxth	r3, r3
 8001d06:	b2db      	uxtb	r3, r3
 8001d08:	753b      	strb	r3, [r7, #20]
 8001d0a:	88fb      	ldrh	r3, [r7, #6]
 8001d0c:	b2db      	uxtb	r3, r3
 8001d0e:	757b      	strb	r3, [r7, #21]
	HAL_SPI_Transmit(display->spi, data, 2, 1);
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	6818      	ldr	r0, [r3, #0]
 8001d14:	f107 0114 	add.w	r1, r7, #20
 8001d18:	2301      	movs	r3, #1
 8001d1a:	2202      	movs	r2, #2
 8001d1c:	f006 fbd3 	bl	80084c6 <HAL_SPI_Transmit>

	ILI9341_UNSELECT(display);
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	8a1a      	ldrh	r2, [r3, #16]
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	685b      	ldr	r3, [r3, #4]
 8001d28:	619a      	str	r2, [r3, #24]
 8001d2a:	e000      	b.n	8001d2e <ILI9341_DrawPixel+0x8e>
		return;
 8001d2c:	bf00      	nop
}
 8001d2e:	3718      	adds	r7, #24
 8001d30:	46bd      	mov	sp, r7
 8001d32:	bd80      	pop	{r7, pc}

08001d34 <ILI9341_Fill>:

static void ILI9341_Fill(ILI9341TypeDef *display, uint16_t color, uint32_t size)
{
 8001d34:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001d38:	b08f      	sub	sp, #60	@ 0x3c
 8001d3a:	af00      	add	r7, sp, #0
 8001d3c:	60f8      	str	r0, [r7, #12]
 8001d3e:	460b      	mov	r3, r1
 8001d40:	607a      	str	r2, [r7, #4]
 8001d42:	817b      	strh	r3, [r7, #10]
 8001d44:	466b      	mov	r3, sp
 8001d46:	461e      	mov	r6, r3
	ILI9341_DATA(display);
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	8a5a      	ldrh	r2, [r3, #18]
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	689b      	ldr	r3, [r3, #8]
 8001d50:	619a      	str	r2, [r3, #24]

	uint32_t buffer_size = 0;
 8001d52:	2300      	movs	r3, #0
 8001d54:	637b      	str	r3, [r7, #52]	@ 0x34

	if ((size * 2) < ILI9341_BUFFER_MAX_SIZE)
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	005b      	lsls	r3, r3, #1
 8001d5a:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8001d5e:	d202      	bcs.n	8001d66 <ILI9341_Fill+0x32>
		buffer_size = size;
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	637b      	str	r3, [r7, #52]	@ 0x34
 8001d64:	e002      	b.n	8001d6c <ILI9341_Fill+0x38>
	else
		buffer_size = ILI9341_BUFFER_MAX_SIZE;
 8001d66:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8001d6a:	637b      	str	r3, [r7, #52]	@ 0x34

	uint8_t color_shifted = color >> 8;
 8001d6c:	897b      	ldrh	r3, [r7, #10]
 8001d6e:	0a1b      	lsrs	r3, r3, #8
 8001d70:	b29b      	uxth	r3, r3
 8001d72:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
	uint8_t buffer[buffer_size];
 8001d76:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8001d78:	460b      	mov	r3, r1
 8001d7a:	3b01      	subs	r3, #1
 8001d7c:	627b      	str	r3, [r7, #36]	@ 0x24
 8001d7e:	2300      	movs	r3, #0
 8001d80:	4688      	mov	r8, r1
 8001d82:	4699      	mov	r9, r3
 8001d84:	f04f 0200 	mov.w	r2, #0
 8001d88:	f04f 0300 	mov.w	r3, #0
 8001d8c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001d90:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001d94:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001d98:	2300      	movs	r3, #0
 8001d9a:	460c      	mov	r4, r1
 8001d9c:	461d      	mov	r5, r3
 8001d9e:	f04f 0200 	mov.w	r2, #0
 8001da2:	f04f 0300 	mov.w	r3, #0
 8001da6:	00eb      	lsls	r3, r5, #3
 8001da8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001dac:	00e2      	lsls	r2, r4, #3
 8001dae:	1dcb      	adds	r3, r1, #7
 8001db0:	08db      	lsrs	r3, r3, #3
 8001db2:	00db      	lsls	r3, r3, #3
 8001db4:	ebad 0d03 	sub.w	sp, sp, r3
 8001db8:	466b      	mov	r3, sp
 8001dba:	3300      	adds	r3, #0
 8001dbc:	623b      	str	r3, [r7, #32]

	for (uint32_t i = 0; i < buffer_size; i += 2) {
 8001dbe:	2300      	movs	r3, #0
 8001dc0:	633b      	str	r3, [r7, #48]	@ 0x30
 8001dc2:	e00e      	b.n	8001de2 <ILI9341_Fill+0xae>
		buffer[i]     = color_shifted;
 8001dc4:	6a3a      	ldr	r2, [r7, #32]
 8001dc6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001dc8:	4413      	add	r3, r2
 8001dca:	f897 202b 	ldrb.w	r2, [r7, #43]	@ 0x2b
 8001dce:	701a      	strb	r2, [r3, #0]
		buffer[i + 1] = color;
 8001dd0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001dd2:	3301      	adds	r3, #1
 8001dd4:	897a      	ldrh	r2, [r7, #10]
 8001dd6:	b2d1      	uxtb	r1, r2
 8001dd8:	6a3a      	ldr	r2, [r7, #32]
 8001dda:	54d1      	strb	r1, [r2, r3]
	for (uint32_t i = 0; i < buffer_size; i += 2) {
 8001ddc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001dde:	3302      	adds	r3, #2
 8001de0:	633b      	str	r3, [r7, #48]	@ 0x30
 8001de2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001de4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001de6:	429a      	cmp	r2, r3
 8001de8:	d3ec      	bcc.n	8001dc4 <ILI9341_Fill+0x90>
	}

	uint32_t sending_size   = size * 2;
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	005b      	lsls	r3, r3, #1
 8001dee:	61fb      	str	r3, [r7, #28]
	uint32_t sending_blocks = sending_size / buffer_size;
 8001df0:	69fa      	ldr	r2, [r7, #28]
 8001df2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001df4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001df8:	61bb      	str	r3, [r7, #24]
	uint32_t sending_remain = sending_size % buffer_size;
 8001dfa:	69fb      	ldr	r3, [r7, #28]
 8001dfc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001dfe:	fbb3 f2f2 	udiv	r2, r3, r2
 8001e02:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8001e04:	fb01 f202 	mul.w	r2, r1, r2
 8001e08:	1a9b      	subs	r3, r3, r2
 8001e0a:	617b      	str	r3, [r7, #20]

	if (sending_blocks != 0) {
 8001e0c:	69bb      	ldr	r3, [r7, #24]
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d011      	beq.n	8001e36 <ILI9341_Fill+0x102>
		for(uint32_t i = 0; i < sending_blocks; i++)
 8001e12:	2300      	movs	r3, #0
 8001e14:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001e16:	e00a      	b.n	8001e2e <ILI9341_Fill+0xfa>
			HAL_SPI_Transmit(display->spi, (uint8_t*)buffer, buffer_size, 10);
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	6818      	ldr	r0, [r3, #0]
 8001e1c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001e1e:	b29a      	uxth	r2, r3
 8001e20:	230a      	movs	r3, #10
 8001e22:	6a39      	ldr	r1, [r7, #32]
 8001e24:	f006 fb4f 	bl	80084c6 <HAL_SPI_Transmit>
		for(uint32_t i = 0; i < sending_blocks; i++)
 8001e28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001e2a:	3301      	adds	r3, #1
 8001e2c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001e2e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001e30:	69bb      	ldr	r3, [r7, #24]
 8001e32:	429a      	cmp	r2, r3
 8001e34:	d3f0      	bcc.n	8001e18 <ILI9341_Fill+0xe4>
	}

	HAL_SPI_Transmit(display->spi, (uint8_t*)buffer, sending_remain, 10);
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	6818      	ldr	r0, [r3, #0]
 8001e3a:	697b      	ldr	r3, [r7, #20]
 8001e3c:	b29a      	uxth	r2, r3
 8001e3e:	230a      	movs	r3, #10
 8001e40:	6a39      	ldr	r1, [r7, #32]
 8001e42:	f006 fb40 	bl	80084c6 <HAL_SPI_Transmit>
 8001e46:	46b5      	mov	sp, r6
}
 8001e48:	bf00      	nop
 8001e4a:	373c      	adds	r7, #60	@ 0x3c
 8001e4c:	46bd      	mov	sp, r7
 8001e4e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08001e52 <ILI9341_FillScreen>:

void ILI9341_FillScreen(ILI9341TypeDef *display, uint16_t color)
{
 8001e52:	b580      	push	{r7, lr}
 8001e54:	b084      	sub	sp, #16
 8001e56:	af02      	add	r7, sp, #8
 8001e58:	6078      	str	r0, [r7, #4]
 8001e5a:	460b      	mov	r3, r1
 8001e5c:	807b      	strh	r3, [r7, #2]
	ILI9341_SELECT(display);
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	8a1b      	ldrh	r3, [r3, #16]
 8001e62:	461a      	mov	r2, r3
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	685b      	ldr	r3, [r3, #4]
 8001e68:	0412      	lsls	r2, r2, #16
 8001e6a:	619a      	str	r2, [r3, #24]
	ILI9341_SetAddressWindow(display, 0, 0, display->width - 1, display->height - 1);
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	8adb      	ldrh	r3, [r3, #22]
 8001e70:	3b01      	subs	r3, #1
 8001e72:	b29a      	uxth	r2, r3
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	8b1b      	ldrh	r3, [r3, #24]
 8001e78:	3b01      	subs	r3, #1
 8001e7a:	b29b      	uxth	r3, r3
 8001e7c:	9300      	str	r3, [sp, #0]
 8001e7e:	4613      	mov	r3, r2
 8001e80:	2200      	movs	r2, #0
 8001e82:	2100      	movs	r1, #0
 8001e84:	6878      	ldr	r0, [r7, #4]
 8001e86:	f7ff fd29 	bl	80018dc <ILI9341_SetAddressWindow>
	ILI9341_Fill(display, color, display->width * display->height);
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	8adb      	ldrh	r3, [r3, #22]
 8001e8e:	461a      	mov	r2, r3
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	8b1b      	ldrh	r3, [r3, #24]
 8001e94:	fb02 f303 	mul.w	r3, r2, r3
 8001e98:	461a      	mov	r2, r3
 8001e9a:	887b      	ldrh	r3, [r7, #2]
 8001e9c:	4619      	mov	r1, r3
 8001e9e:	6878      	ldr	r0, [r7, #4]
 8001ea0:	f7ff ff48 	bl	8001d34 <ILI9341_Fill>
	ILI9341_UNSELECT(display);
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	8a1a      	ldrh	r2, [r3, #16]
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	685b      	ldr	r3, [r3, #4]
 8001eac:	619a      	str	r2, [r3, #24]
}
 8001eae:	bf00      	nop
 8001eb0:	3708      	adds	r7, #8
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	bd80      	pop	{r7, pc}

08001eb6 <ILI9341_FillRectangle>:

void ILI9341_FillRectangle(ILI9341TypeDef *display, uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color)
{
 8001eb6:	b580      	push	{r7, lr}
 8001eb8:	b086      	sub	sp, #24
 8001eba:	af02      	add	r7, sp, #8
 8001ebc:	60f8      	str	r0, [r7, #12]
 8001ebe:	4608      	mov	r0, r1
 8001ec0:	4611      	mov	r1, r2
 8001ec2:	461a      	mov	r2, r3
 8001ec4:	4603      	mov	r3, r0
 8001ec6:	817b      	strh	r3, [r7, #10]
 8001ec8:	460b      	mov	r3, r1
 8001eca:	813b      	strh	r3, [r7, #8]
 8001ecc:	4613      	mov	r3, r2
 8001ece:	80fb      	strh	r3, [r7, #6]
	if ((x >= display->width) || (y >= display->height))
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	8adb      	ldrh	r3, [r3, #22]
 8001ed4:	897a      	ldrh	r2, [r7, #10]
 8001ed6:	429a      	cmp	r2, r3
 8001ed8:	d246      	bcs.n	8001f68 <ILI9341_FillRectangle+0xb2>
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	8b1b      	ldrh	r3, [r3, #24]
 8001ede:	893a      	ldrh	r2, [r7, #8]
 8001ee0:	429a      	cmp	r2, r3
 8001ee2:	d241      	bcs.n	8001f68 <ILI9341_FillRectangle+0xb2>
		return;

	if ((x + w - 1) >= display->width)
 8001ee4:	897a      	ldrh	r2, [r7, #10]
 8001ee6:	88fb      	ldrh	r3, [r7, #6]
 8001ee8:	4413      	add	r3, r2
 8001eea:	68fa      	ldr	r2, [r7, #12]
 8001eec:	8ad2      	ldrh	r2, [r2, #22]
 8001eee:	4293      	cmp	r3, r2
 8001ef0:	dd04      	ble.n	8001efc <ILI9341_FillRectangle+0x46>
		w = display->width - x;
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	8ada      	ldrh	r2, [r3, #22]
 8001ef6:	897b      	ldrh	r3, [r7, #10]
 8001ef8:	1ad3      	subs	r3, r2, r3
 8001efa:	80fb      	strh	r3, [r7, #6]

	if ((y + h - 1) >= display->height)
 8001efc:	893a      	ldrh	r2, [r7, #8]
 8001efe:	8b3b      	ldrh	r3, [r7, #24]
 8001f00:	4413      	add	r3, r2
 8001f02:	68fa      	ldr	r2, [r7, #12]
 8001f04:	8b12      	ldrh	r2, [r2, #24]
 8001f06:	4293      	cmp	r3, r2
 8001f08:	dd04      	ble.n	8001f14 <ILI9341_FillRectangle+0x5e>
		h = display->height - y;
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	8b1a      	ldrh	r2, [r3, #24]
 8001f0e:	893b      	ldrh	r3, [r7, #8]
 8001f10:	1ad3      	subs	r3, r2, r3
 8001f12:	833b      	strh	r3, [r7, #24]

	ILI9341_SELECT(display);
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	8a1b      	ldrh	r3, [r3, #16]
 8001f18:	461a      	mov	r2, r3
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	685b      	ldr	r3, [r3, #4]
 8001f1e:	0412      	lsls	r2, r2, #16
 8001f20:	619a      	str	r2, [r3, #24]
	ILI9341_SetAddressWindow(display, x, y, x + w - 1, y + h - 1);
 8001f22:	897a      	ldrh	r2, [r7, #10]
 8001f24:	88fb      	ldrh	r3, [r7, #6]
 8001f26:	4413      	add	r3, r2
 8001f28:	b29b      	uxth	r3, r3
 8001f2a:	3b01      	subs	r3, #1
 8001f2c:	b298      	uxth	r0, r3
 8001f2e:	893a      	ldrh	r2, [r7, #8]
 8001f30:	8b3b      	ldrh	r3, [r7, #24]
 8001f32:	4413      	add	r3, r2
 8001f34:	b29b      	uxth	r3, r3
 8001f36:	3b01      	subs	r3, #1
 8001f38:	b29b      	uxth	r3, r3
 8001f3a:	893a      	ldrh	r2, [r7, #8]
 8001f3c:	8979      	ldrh	r1, [r7, #10]
 8001f3e:	9300      	str	r3, [sp, #0]
 8001f40:	4603      	mov	r3, r0
 8001f42:	68f8      	ldr	r0, [r7, #12]
 8001f44:	f7ff fcca 	bl	80018dc <ILI9341_SetAddressWindow>
	ILI9341_Fill(display, color, w * h);
 8001f48:	88fb      	ldrh	r3, [r7, #6]
 8001f4a:	8b3a      	ldrh	r2, [r7, #24]
 8001f4c:	fb02 f303 	mul.w	r3, r2, r3
 8001f50:	461a      	mov	r2, r3
 8001f52:	8bbb      	ldrh	r3, [r7, #28]
 8001f54:	4619      	mov	r1, r3
 8001f56:	68f8      	ldr	r0, [r7, #12]
 8001f58:	f7ff feec 	bl	8001d34 <ILI9341_Fill>
	ILI9341_UNSELECT(display);
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	8a1a      	ldrh	r2, [r3, #16]
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	685b      	ldr	r3, [r3, #4]
 8001f64:	619a      	str	r2, [r3, #24]
 8001f66:	e000      	b.n	8001f6a <ILI9341_FillRectangle+0xb4>
		return;
 8001f68:	bf00      	nop
}
 8001f6a:	3710      	adds	r7, #16
 8001f6c:	46bd      	mov	sp, r7
 8001f6e:	bd80      	pop	{r7, pc}

08001f70 <ILI9341_Rectangle>:

void ILI9341_Rectangle(ILI9341TypeDef *display, uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color)
{
 8001f70:	b580      	push	{r7, lr}
 8001f72:	b086      	sub	sp, #24
 8001f74:	af02      	add	r7, sp, #8
 8001f76:	60f8      	str	r0, [r7, #12]
 8001f78:	4608      	mov	r0, r1
 8001f7a:	4611      	mov	r1, r2
 8001f7c:	461a      	mov	r2, r3
 8001f7e:	4603      	mov	r3, r0
 8001f80:	817b      	strh	r3, [r7, #10]
 8001f82:	460b      	mov	r3, r1
 8001f84:	813b      	strh	r3, [r7, #8]
 8001f86:	4613      	mov	r3, r2
 8001f88:	80fb      	strh	r3, [r7, #6]
	ILI9341_FillRectangle(display, x,     y,     w + 1, 1, color);
 8001f8a:	88fb      	ldrh	r3, [r7, #6]
 8001f8c:	3301      	adds	r3, #1
 8001f8e:	b298      	uxth	r0, r3
 8001f90:	893a      	ldrh	r2, [r7, #8]
 8001f92:	8979      	ldrh	r1, [r7, #10]
 8001f94:	8bbb      	ldrh	r3, [r7, #28]
 8001f96:	9301      	str	r3, [sp, #4]
 8001f98:	2301      	movs	r3, #1
 8001f9a:	9300      	str	r3, [sp, #0]
 8001f9c:	4603      	mov	r3, r0
 8001f9e:	68f8      	ldr	r0, [r7, #12]
 8001fa0:	f7ff ff89 	bl	8001eb6 <ILI9341_FillRectangle>
	ILI9341_FillRectangle(display, x, y + h,     w + 1, 1, color);
 8001fa4:	893a      	ldrh	r2, [r7, #8]
 8001fa6:	8b3b      	ldrh	r3, [r7, #24]
 8001fa8:	4413      	add	r3, r2
 8001faa:	b29a      	uxth	r2, r3
 8001fac:	88fb      	ldrh	r3, [r7, #6]
 8001fae:	3301      	adds	r3, #1
 8001fb0:	b298      	uxth	r0, r3
 8001fb2:	8979      	ldrh	r1, [r7, #10]
 8001fb4:	8bbb      	ldrh	r3, [r7, #28]
 8001fb6:	9301      	str	r3, [sp, #4]
 8001fb8:	2301      	movs	r3, #1
 8001fba:	9300      	str	r3, [sp, #0]
 8001fbc:	4603      	mov	r3, r0
 8001fbe:	68f8      	ldr	r0, [r7, #12]
 8001fc0:	f7ff ff79 	bl	8001eb6 <ILI9341_FillRectangle>
	ILI9341_FillRectangle(display, x,     y,     1,     h, color);
 8001fc4:	893a      	ldrh	r2, [r7, #8]
 8001fc6:	8979      	ldrh	r1, [r7, #10]
 8001fc8:	8bbb      	ldrh	r3, [r7, #28]
 8001fca:	9301      	str	r3, [sp, #4]
 8001fcc:	8b3b      	ldrh	r3, [r7, #24]
 8001fce:	9300      	str	r3, [sp, #0]
 8001fd0:	2301      	movs	r3, #1
 8001fd2:	68f8      	ldr	r0, [r7, #12]
 8001fd4:	f7ff ff6f 	bl	8001eb6 <ILI9341_FillRectangle>
	ILI9341_FillRectangle(display, x + w, y,     1,     h, color);
 8001fd8:	897a      	ldrh	r2, [r7, #10]
 8001fda:	88fb      	ldrh	r3, [r7, #6]
 8001fdc:	4413      	add	r3, r2
 8001fde:	b299      	uxth	r1, r3
 8001fe0:	893a      	ldrh	r2, [r7, #8]
 8001fe2:	8bbb      	ldrh	r3, [r7, #28]
 8001fe4:	9301      	str	r3, [sp, #4]
 8001fe6:	8b3b      	ldrh	r3, [r7, #24]
 8001fe8:	9300      	str	r3, [sp, #0]
 8001fea:	2301      	movs	r3, #1
 8001fec:	68f8      	ldr	r0, [r7, #12]
 8001fee:	f7ff ff62 	bl	8001eb6 <ILI9341_FillRectangle>
}
 8001ff2:	bf00      	nop
 8001ff4:	3710      	adds	r7, #16
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	bd80      	pop	{r7, pc}

08001ffa <ILI9341_WriteChar>:

static void ILI9341_WriteChar(ILI9341TypeDef *display, uint16_t x, uint16_t y, char ch, FontDef font, uint16_t color, uint16_t bgcolor)
{
 8001ffa:	b580      	push	{r7, lr}
 8001ffc:	b08c      	sub	sp, #48	@ 0x30
 8001ffe:	af02      	add	r7, sp, #8
 8002000:	60f8      	str	r0, [r7, #12]
 8002002:	4608      	mov	r0, r1
 8002004:	4611      	mov	r1, r2
 8002006:	461a      	mov	r2, r3
 8002008:	4603      	mov	r3, r0
 800200a:	817b      	strh	r3, [r7, #10]
 800200c:	460b      	mov	r3, r1
 800200e:	813b      	strh	r3, [r7, #8]
 8002010:	4613      	mov	r3, r2
 8002012:	71fb      	strb	r3, [r7, #7]
    uint32_t i, b, j;

    ILI9341_SetAddressWindow(display, x, y, x + font.width - 1, y + font.height - 1);
 8002014:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8002018:	461a      	mov	r2, r3
 800201a:	897b      	ldrh	r3, [r7, #10]
 800201c:	4413      	add	r3, r2
 800201e:	b29b      	uxth	r3, r3
 8002020:	3b01      	subs	r3, #1
 8002022:	b298      	uxth	r0, r3
 8002024:	f897 3031 	ldrb.w	r3, [r7, #49]	@ 0x31
 8002028:	461a      	mov	r2, r3
 800202a:	893b      	ldrh	r3, [r7, #8]
 800202c:	4413      	add	r3, r2
 800202e:	b29b      	uxth	r3, r3
 8002030:	3b01      	subs	r3, #1
 8002032:	b29b      	uxth	r3, r3
 8002034:	893a      	ldrh	r2, [r7, #8]
 8002036:	8979      	ldrh	r1, [r7, #10]
 8002038:	9300      	str	r3, [sp, #0]
 800203a:	4603      	mov	r3, r0
 800203c:	68f8      	ldr	r0, [r7, #12]
 800203e:	f7ff fc4d 	bl	80018dc <ILI9341_SetAddressWindow>

    for (i = 0; i < font.height; i++) {
 8002042:	2300      	movs	r3, #0
 8002044:	627b      	str	r3, [r7, #36]	@ 0x24
 8002046:	e043      	b.n	80020d0 <ILI9341_WriteChar+0xd6>
        b = font.data[(ch - 32) * font.height + i];
 8002048:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800204a:	79fb      	ldrb	r3, [r7, #7]
 800204c:	3b20      	subs	r3, #32
 800204e:	f897 1031 	ldrb.w	r1, [r7, #49]	@ 0x31
 8002052:	fb01 f303 	mul.w	r3, r1, r3
 8002056:	4619      	mov	r1, r3
 8002058:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800205a:	440b      	add	r3, r1
 800205c:	005b      	lsls	r3, r3, #1
 800205e:	4413      	add	r3, r2
 8002060:	881b      	ldrh	r3, [r3, #0]
 8002062:	61fb      	str	r3, [r7, #28]
        for (j = 0; j < font.width; j++) {
 8002064:	2300      	movs	r3, #0
 8002066:	623b      	str	r3, [r7, #32]
 8002068:	e029      	b.n	80020be <ILI9341_WriteChar+0xc4>
            if ((b << j) & 0x8000) {
 800206a:	69fa      	ldr	r2, [r7, #28]
 800206c:	6a3b      	ldr	r3, [r7, #32]
 800206e:	fa02 f303 	lsl.w	r3, r2, r3
 8002072:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002076:	2b00      	cmp	r3, #0
 8002078:	d00f      	beq.n	800209a <ILI9341_WriteChar+0xa0>
                uint8_t data[] = { color >> 8, color & 0xFF };
 800207a:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 800207c:	0a1b      	lsrs	r3, r3, #8
 800207e:	b29b      	uxth	r3, r3
 8002080:	b2db      	uxtb	r3, r3
 8002082:	763b      	strb	r3, [r7, #24]
 8002084:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8002086:	b2db      	uxtb	r3, r3
 8002088:	767b      	strb	r3, [r7, #25]
                ILI9341_WriteBuffer(display, data, sizeof(data));
 800208a:	f107 0318 	add.w	r3, r7, #24
 800208e:	2202      	movs	r2, #2
 8002090:	4619      	mov	r1, r3
 8002092:	68f8      	ldr	r0, [r7, #12]
 8002094:	f7ff fbf8 	bl	8001888 <ILI9341_WriteBuffer>
 8002098:	e00e      	b.n	80020b8 <ILI9341_WriteChar+0xbe>
            } else {
                uint8_t data[] = { bgcolor >> 8, bgcolor & 0xFF };
 800209a:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800209c:	0a1b      	lsrs	r3, r3, #8
 800209e:	b29b      	uxth	r3, r3
 80020a0:	b2db      	uxtb	r3, r3
 80020a2:	753b      	strb	r3, [r7, #20]
 80020a4:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 80020a6:	b2db      	uxtb	r3, r3
 80020a8:	757b      	strb	r3, [r7, #21]
                ILI9341_WriteBuffer(display, data, sizeof(data));
 80020aa:	f107 0314 	add.w	r3, r7, #20
 80020ae:	2202      	movs	r2, #2
 80020b0:	4619      	mov	r1, r3
 80020b2:	68f8      	ldr	r0, [r7, #12]
 80020b4:	f7ff fbe8 	bl	8001888 <ILI9341_WriteBuffer>
        for (j = 0; j < font.width; j++) {
 80020b8:	6a3b      	ldr	r3, [r7, #32]
 80020ba:	3301      	adds	r3, #1
 80020bc:	623b      	str	r3, [r7, #32]
 80020be:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 80020c2:	461a      	mov	r2, r3
 80020c4:	6a3b      	ldr	r3, [r7, #32]
 80020c6:	4293      	cmp	r3, r2
 80020c8:	d3cf      	bcc.n	800206a <ILI9341_WriteChar+0x70>
    for (i = 0; i < font.height; i++) {
 80020ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020cc:	3301      	adds	r3, #1
 80020ce:	627b      	str	r3, [r7, #36]	@ 0x24
 80020d0:	f897 3031 	ldrb.w	r3, [r7, #49]	@ 0x31
 80020d4:	461a      	mov	r2, r3
 80020d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020d8:	4293      	cmp	r3, r2
 80020da:	d3b5      	bcc.n	8002048 <ILI9341_WriteChar+0x4e>
            }
        }
    }
}
 80020dc:	bf00      	nop
 80020de:	bf00      	nop
 80020e0:	3728      	adds	r7, #40	@ 0x28
 80020e2:	46bd      	mov	sp, r7
 80020e4:	bd80      	pop	{r7, pc}

080020e6 <ILI9341_WriteString>:

void ILI9341_WriteString(ILI9341TypeDef *display, uint16_t x, uint16_t y, const char* str, FontDef font, uint16_t color, uint16_t bgcolor)
{
 80020e6:	b5b0      	push	{r4, r5, r7, lr}
 80020e8:	b088      	sub	sp, #32
 80020ea:	af04      	add	r7, sp, #16
 80020ec:	60f8      	str	r0, [r7, #12]
 80020ee:	607b      	str	r3, [r7, #4]
 80020f0:	460b      	mov	r3, r1
 80020f2:	817b      	strh	r3, [r7, #10]
 80020f4:	4613      	mov	r3, r2
 80020f6:	813b      	strh	r3, [r7, #8]
	ILI9341_SELECT(display);
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	8a1b      	ldrh	r3, [r3, #16]
 80020fc:	461a      	mov	r2, r3
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	685b      	ldr	r3, [r3, #4]
 8002102:	0412      	lsls	r2, r2, #16
 8002104:	619a      	str	r2, [r3, #24]

    while (*str) {
 8002106:	e03b      	b.n	8002180 <ILI9341_WriteString+0x9a>
        if (x + font.width >= display->width) {
 8002108:	897b      	ldrh	r3, [r7, #10]
 800210a:	f897 2020 	ldrb.w	r2, [r7, #32]
 800210e:	4413      	add	r3, r2
 8002110:	68fa      	ldr	r2, [r7, #12]
 8002112:	8ad2      	ldrh	r2, [r2, #22]
 8002114:	4293      	cmp	r3, r2
 8002116:	db17      	blt.n	8002148 <ILI9341_WriteString+0x62>
            x = 0;
 8002118:	2300      	movs	r3, #0
 800211a:	817b      	strh	r3, [r7, #10]
            y += font.height;
 800211c:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8002120:	461a      	mov	r2, r3
 8002122:	893b      	ldrh	r3, [r7, #8]
 8002124:	4413      	add	r3, r2
 8002126:	813b      	strh	r3, [r7, #8]

            if (y + font.height >= display->height)
 8002128:	893b      	ldrh	r3, [r7, #8]
 800212a:	f897 2021 	ldrb.w	r2, [r7, #33]	@ 0x21
 800212e:	4413      	add	r3, r2
 8002130:	68fa      	ldr	r2, [r7, #12]
 8002132:	8b12      	ldrh	r2, [r2, #24]
 8002134:	4293      	cmp	r3, r2
 8002136:	da28      	bge.n	800218a <ILI9341_WriteString+0xa4>
                break;

            if (*str == ' ') {
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	781b      	ldrb	r3, [r3, #0]
 800213c:	2b20      	cmp	r3, #32
 800213e:	d103      	bne.n	8002148 <ILI9341_WriteString+0x62>
                // skip spaces in the beginning of the new line
                str++;
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	3301      	adds	r3, #1
 8002144:	607b      	str	r3, [r7, #4]
                continue;
 8002146:	e01b      	b.n	8002180 <ILI9341_WriteString+0x9a>
            }
        }

        ILI9341_WriteChar(display, x, y, *str, font, color, bgcolor);
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	781d      	ldrb	r5, [r3, #0]
 800214c:	893a      	ldrh	r2, [r7, #8]
 800214e:	897c      	ldrh	r4, [r7, #10]
 8002150:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8002152:	9303      	str	r3, [sp, #12]
 8002154:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8002156:	9302      	str	r3, [sp, #8]
 8002158:	466b      	mov	r3, sp
 800215a:	f107 0120 	add.w	r1, r7, #32
 800215e:	c903      	ldmia	r1, {r0, r1}
 8002160:	e883 0003 	stmia.w	r3, {r0, r1}
 8002164:	462b      	mov	r3, r5
 8002166:	4621      	mov	r1, r4
 8002168:	68f8      	ldr	r0, [r7, #12]
 800216a:	f7ff ff46 	bl	8001ffa <ILI9341_WriteChar>
        x += font.width;
 800216e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002172:	461a      	mov	r2, r3
 8002174:	897b      	ldrh	r3, [r7, #10]
 8002176:	4413      	add	r3, r2
 8002178:	817b      	strh	r3, [r7, #10]
        str++;
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	3301      	adds	r3, #1
 800217e:	607b      	str	r3, [r7, #4]
    while (*str) {
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	781b      	ldrb	r3, [r3, #0]
 8002184:	2b00      	cmp	r3, #0
 8002186:	d1bf      	bne.n	8002108 <ILI9341_WriteString+0x22>
 8002188:	e000      	b.n	800218c <ILI9341_WriteString+0xa6>
                break;
 800218a:	bf00      	nop
    }

	ILI9341_UNSELECT(display);
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	8a1a      	ldrh	r2, [r3, #16]
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	685b      	ldr	r3, [r3, #4]
 8002194:	619a      	str	r2, [r3, #24]
}
 8002196:	bf00      	nop
 8002198:	3710      	adds	r7, #16
 800219a:	46bd      	mov	sp, r7
 800219c:	bdb0      	pop	{r4, r5, r7, pc}
	...

080021a0 <HAL_I2S_RxCpltCallback>:
  * @brief  I2S 接收全滿回呼函式
  * @param  hi2s: I2S handle
  * @retval None
  */
void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80021a0:	b580      	push	{r7, lr}
 80021a2:	b082      	sub	sp, #8
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	6078      	str	r0, [r7, #4]
  // DMA 已經填充完緩衝區的後半部分
  // 在這裡呼叫語音辨識函式，處理後半段的資料
  // speech_recognition_run(&i2s_rx_buffer[I2S_BUFFER_SIZE / 2], I2S_BUFFER_SIZE / 2);
  buffer_is_ready = 2; // 示意：設定旗標
 80021a8:	4b1f      	ldr	r3, [pc, #124]	@ (8002228 <HAL_I2S_RxCpltCallback+0x88>)
 80021aa:	2202      	movs	r2, #2
 80021ac:	601a      	str	r2, [r3, #0]
	if(hi2s==&hi2s2){
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	4a1e      	ldr	r2, [pc, #120]	@ (800222c <HAL_I2S_RxCpltCallback+0x8c>)
 80021b2:	4293      	cmp	r3, r2
 80021b4:	d133      	bne.n	800221e <HAL_I2S_RxCpltCallback+0x7e>
		cb_cnt++;//回调次数计数
 80021b6:	4b1e      	ldr	r3, [pc, #120]	@ (8002230 <HAL_I2S_RxCpltCallback+0x90>)
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	3301      	adds	r3, #1
 80021bc:	4a1c      	ldr	r2, [pc, #112]	@ (8002230 <HAL_I2S_RxCpltCallback+0x90>)
 80021be:	6013      	str	r3, [r2, #0]
		//将两个32整型合并为一个
		//dat32 example: 0000fffb 00004f00
		//printf("%x\r\n",data_i2s[0]<<8);
		//printf("%x\r\n",data_i2s[1]>>8);

		val24=(i2s_rx_buffer[0]<<8)+(i2s_rx_buffer[1]>>8);
 80021c0:	4b1c      	ldr	r3, [pc, #112]	@ (8002234 <HAL_I2S_RxCpltCallback+0x94>)
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	021a      	lsls	r2, r3, #8
 80021c6:	4b1b      	ldr	r3, [pc, #108]	@ (8002234 <HAL_I2S_RxCpltCallback+0x94>)
 80021c8:	685b      	ldr	r3, [r3, #4]
 80021ca:	0a1b      	lsrs	r3, r3, #8
 80021cc:	4413      	add	r3, r2
 80021ce:	4a1a      	ldr	r2, [pc, #104]	@ (8002238 <HAL_I2S_RxCpltCallback+0x98>)
 80021d0:	6013      	str	r3, [r2, #0]
		//printf("%d\r\n",val24);
      //将24位有符号整型扩展到32位
		if(val24 & 0x800000)
 80021d2:	4b19      	ldr	r3, [pc, #100]	@ (8002238 <HAL_I2S_RxCpltCallback+0x98>)
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d007      	beq.n	80021ee <HAL_I2S_RxCpltCallback+0x4e>
		{//negative
			val32=0xff000000 | val24;
 80021de:	4b16      	ldr	r3, [pc, #88]	@ (8002238 <HAL_I2S_RxCpltCallback+0x98>)
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80021e6:	461a      	mov	r2, r3
 80021e8:	4b14      	ldr	r3, [pc, #80]	@ (800223c <HAL_I2S_RxCpltCallback+0x9c>)
 80021ea:	601a      	str	r2, [r3, #0]
 80021ec:	e004      	b.n	80021f8 <HAL_I2S_RxCpltCallback+0x58>
		}
		else
		{//positive
			val32=val24;
 80021ee:	4b12      	ldr	r3, [pc, #72]	@ (8002238 <HAL_I2S_RxCpltCallback+0x98>)
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	461a      	mov	r2, r3
 80021f4:	4b11      	ldr	r3, [pc, #68]	@ (800223c <HAL_I2S_RxCpltCallback+0x9c>)
 80021f6:	601a      	str	r2, [r3, #0]
		}
		//以采样频率的十分之一，串口发送采样值
		if(cb_cnt%10==0)
 80021f8:	4b0d      	ldr	r3, [pc, #52]	@ (8002230 <HAL_I2S_RxCpltCallback+0x90>)
 80021fa:	6819      	ldr	r1, [r3, #0]
 80021fc:	4b10      	ldr	r3, [pc, #64]	@ (8002240 <HAL_I2S_RxCpltCallback+0xa0>)
 80021fe:	fba3 2301 	umull	r2, r3, r3, r1
 8002202:	08da      	lsrs	r2, r3, #3
 8002204:	4613      	mov	r3, r2
 8002206:	009b      	lsls	r3, r3, #2
 8002208:	4413      	add	r3, r2
 800220a:	005b      	lsls	r3, r3, #1
 800220c:	1aca      	subs	r2, r1, r3
 800220e:	2a00      	cmp	r2, #0
 8002210:	d105      	bne.n	800221e <HAL_I2S_RxCpltCallback+0x7e>
			printf("%d\r\n",val32);
 8002212:	4b0a      	ldr	r3, [pc, #40]	@ (800223c <HAL_I2S_RxCpltCallback+0x9c>)
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	4619      	mov	r1, r3
 8002218:	480a      	ldr	r0, [pc, #40]	@ (8002244 <HAL_I2S_RxCpltCallback+0xa4>)
 800221a:	f00a fb31 	bl	800c880 <iprintf>
	}
}
 800221e:	bf00      	nop
 8002220:	3708      	adds	r7, #8
 8002222:	46bd      	mov	sp, r7
 8002224:	bd80      	pop	{r7, pc}
 8002226:	bf00      	nop
 8002228:	2000d4e4 	.word	0x2000d4e4
 800222c:	2000d3c8 	.word	0x2000d3c8
 8002230:	2000d4e8 	.word	0x2000d4e8
 8002234:	2000d4d4 	.word	0x2000d4d4
 8002238:	2000d4ec 	.word	0x2000d4ec
 800223c:	2000d4f0 	.word	0x2000d4f0
 8002240:	cccccccd 	.word	0xcccccccd
 8002244:	08010268 	.word	0x08010268

08002248 <HAL_UART_RxCpltCallback>:
// --- AI 推論相關變數 ---
// 這個變數將連接 main.c 和 app_x-cube-ai.c
int score_from_uart = 0;

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002248:	b580      	push	{r7, lr}
 800224a:	b082      	sub	sp, #8
 800224c:	af00      	add	r7, sp, #0
 800224e:	6078      	str	r0, [r7, #4]
  // 確保是我們想要的 UART (例如 USART2) 觸發的中斷
  if (huart->Instance == USART6)
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	4a1b      	ldr	r2, [pc, #108]	@ (80022c4 <HAL_UART_RxCpltCallback+0x7c>)
 8002256:	4293      	cmp	r3, r2
 8002258:	d130      	bne.n	80022bc <HAL_UART_RxCpltCallback+0x74>
  {
    // 檢查是否是換行符 (Enter 鍵)，或者緩衝區是否已滿
    if (rx_byte == '\r' || rx_byte == '\n' || uart_rx_index >= (UART_RX_BUFFER_SIZE - 1))
 800225a:	4b1b      	ldr	r3, [pc, #108]	@ (80022c8 <HAL_UART_RxCpltCallback+0x80>)
 800225c:	781b      	ldrb	r3, [r3, #0]
 800225e:	2b0d      	cmp	r3, #13
 8002260:	d008      	beq.n	8002274 <HAL_UART_RxCpltCallback+0x2c>
 8002262:	4b19      	ldr	r3, [pc, #100]	@ (80022c8 <HAL_UART_RxCpltCallback+0x80>)
 8002264:	781b      	ldrb	r3, [r3, #0]
 8002266:	2b0a      	cmp	r3, #10
 8002268:	d004      	beq.n	8002274 <HAL_UART_RxCpltCallback+0x2c>
 800226a:	4b18      	ldr	r3, [pc, #96]	@ (80022cc <HAL_UART_RxCpltCallback+0x84>)
 800226c:	781b      	ldrb	r3, [r3, #0]
 800226e:	b2db      	uxtb	r3, r3
 8002270:	2b08      	cmp	r3, #8
 8002272:	d912      	bls.n	800229a <HAL_UART_RxCpltCallback+0x52>
    {
      // 1. 在字串末尾加上結束符 '\0'
      uart_rx_buffer[uart_rx_index] = '\0';
 8002274:	4b15      	ldr	r3, [pc, #84]	@ (80022cc <HAL_UART_RxCpltCallback+0x84>)
 8002276:	781b      	ldrb	r3, [r3, #0]
 8002278:	b2db      	uxtb	r3, r3
 800227a:	461a      	mov	r2, r3
 800227c:	4b14      	ldr	r3, [pc, #80]	@ (80022d0 <HAL_UART_RxCpltCallback+0x88>)
 800227e:	2100      	movs	r1, #0
 8002280:	5499      	strb	r1, [r3, r2]

      // 2. 設定新數據旗標，通知主迴圈處理
      if (uart_rx_index > 0) // 確保不是空指令
 8002282:	4b12      	ldr	r3, [pc, #72]	@ (80022cc <HAL_UART_RxCpltCallback+0x84>)
 8002284:	781b      	ldrb	r3, [r3, #0]
 8002286:	b2db      	uxtb	r3, r3
 8002288:	2b00      	cmp	r3, #0
 800228a:	d002      	beq.n	8002292 <HAL_UART_RxCpltCallback+0x4a>
      {
        new_data_received = true;
 800228c:	4b11      	ldr	r3, [pc, #68]	@ (80022d4 <HAL_UART_RxCpltCallback+0x8c>)
 800228e:	2201      	movs	r2, #1
 8002290:	701a      	strb	r2, [r3, #0]
      }

      // 3. 重置索引，準備下一次接收
      uart_rx_index = 0;
 8002292:	4b0e      	ldr	r3, [pc, #56]	@ (80022cc <HAL_UART_RxCpltCallback+0x84>)
 8002294:	2200      	movs	r2, #0
 8002296:	701a      	strb	r2, [r3, #0]
 8002298:	e00b      	b.n	80022b2 <HAL_UART_RxCpltCallback+0x6a>
    }
    else
    {
      // 將收到的位元組存入緩衝區，並移動索引
      uart_rx_buffer[uart_rx_index++] = rx_byte;
 800229a:	4b0c      	ldr	r3, [pc, #48]	@ (80022cc <HAL_UART_RxCpltCallback+0x84>)
 800229c:	781b      	ldrb	r3, [r3, #0]
 800229e:	b2db      	uxtb	r3, r3
 80022a0:	1c5a      	adds	r2, r3, #1
 80022a2:	b2d1      	uxtb	r1, r2
 80022a4:	4a09      	ldr	r2, [pc, #36]	@ (80022cc <HAL_UART_RxCpltCallback+0x84>)
 80022a6:	7011      	strb	r1, [r2, #0]
 80022a8:	461a      	mov	r2, r3
 80022aa:	4b07      	ldr	r3, [pc, #28]	@ (80022c8 <HAL_UART_RxCpltCallback+0x80>)
 80022ac:	7819      	ldrb	r1, [r3, #0]
 80022ae:	4b08      	ldr	r3, [pc, #32]	@ (80022d0 <HAL_UART_RxCpltCallback+0x88>)
 80022b0:	5499      	strb	r1, [r3, r2]
    }

    // !!! 非常重要：重新啟動 UART 中斷接收，準備接收下一個位元組 !!!
    HAL_UART_Receive_IT(&huart6, &rx_byte, 1);
 80022b2:	2201      	movs	r2, #1
 80022b4:	4904      	ldr	r1, [pc, #16]	@ (80022c8 <HAL_UART_RxCpltCallback+0x80>)
 80022b6:	4808      	ldr	r0, [pc, #32]	@ (80022d8 <HAL_UART_RxCpltCallback+0x90>)
 80022b8:	f007 fe81 	bl	8009fbe <HAL_UART_Receive_IT>
  }
}
 80022bc:	bf00      	nop
 80022be:	3708      	adds	r7, #8
 80022c0:	46bd      	mov	sp, r7
 80022c2:	bd80      	pop	{r7, pc}
 80022c4:	40011400 	.word	0x40011400
 80022c8:	2000d4fe 	.word	0x2000d4fe
 80022cc:	2000d4ff 	.word	0x2000d4ff
 80022d0:	2000d4f4 	.word	0x2000d4f4
 80022d4:	2000d500 	.word	0x2000d500
 80022d8:	20014070 	.word	0x20014070

080022dc <HAL_TIM_PeriodElapsedCallback>:

uint16_t txData;
int txIndex;
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80022dc:	b580      	push	{r7, lr}
 80022de:	b082      	sub	sp, #8
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	6078      	str	r0, [r7, #4]
  if(htim->Instance == TIM2)
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80022ec:	d125      	bne.n	800233a <HAL_TIM_PeriodElapsedCallback+0x5e>
  {
    txData = ((uint16_t)helloworld[txIndex+1] << 8) | helloworld[txIndex];
 80022ee:	4b1e      	ldr	r3, [pc, #120]	@ (8002368 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	3301      	adds	r3, #1
 80022f4:	4a1d      	ldr	r2, [pc, #116]	@ (800236c <HAL_TIM_PeriodElapsedCallback+0x90>)
 80022f6:	5cd3      	ldrb	r3, [r2, r3]
 80022f8:	b21b      	sxth	r3, r3
 80022fa:	021b      	lsls	r3, r3, #8
 80022fc:	b21a      	sxth	r2, r3
 80022fe:	4b1a      	ldr	r3, [pc, #104]	@ (8002368 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	491a      	ldr	r1, [pc, #104]	@ (800236c <HAL_TIM_PeriodElapsedCallback+0x90>)
 8002304:	5ccb      	ldrb	r3, [r1, r3]
 8002306:	b21b      	sxth	r3, r3
 8002308:	4313      	orrs	r3, r2
 800230a:	b21b      	sxth	r3, r3
 800230c:	b29a      	uxth	r2, r3
 800230e:	4b18      	ldr	r3, [pc, #96]	@ (8002370 <HAL_TIM_PeriodElapsedCallback+0x94>)
 8002310:	801a      	strh	r2, [r3, #0]
    txIndex = txIndex + 2;
 8002312:	4b15      	ldr	r3, [pc, #84]	@ (8002368 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	3302      	adds	r3, #2
 8002318:	4a13      	ldr	r2, [pc, #76]	@ (8002368 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 800231a:	6013      	str	r3, [r2, #0]
    if(txIndex>53456) txIndex = 0;
 800231c:	4b12      	ldr	r3, [pc, #72]	@ (8002368 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	f24d 02d0 	movw	r2, #53456	@ 0xd0d0
 8002324:	4293      	cmp	r3, r2
 8002326:	dd02      	ble.n	800232e <HAL_TIM_PeriodElapsedCallback+0x52>
 8002328:	4b0f      	ldr	r3, [pc, #60]	@ (8002368 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 800232a:	2200      	movs	r2, #0
 800232c:	601a      	str	r2, [r3, #0]
    HAL_I2S_Transmit(&hi2s3, &txData, 1, 10);
 800232e:	230a      	movs	r3, #10
 8002330:	2201      	movs	r2, #1
 8002332:	490f      	ldr	r1, [pc, #60]	@ (8002370 <HAL_TIM_PeriodElapsedCallback+0x94>)
 8002334:	480f      	ldr	r0, [pc, #60]	@ (8002374 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8002336:	f004 fdd7 	bl	8006ee8 <HAL_I2S_Transmit>
  }

	if(htim->Instance == TIM10)
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	4a0e      	ldr	r2, [pc, #56]	@ (8002378 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8002340:	4293      	cmp	r3, r2
 8002342:	d10c      	bne.n	800235e <HAL_TIM_PeriodElapsedCallback+0x82>
	{
		if (adc_available) {
 8002344:	4b0d      	ldr	r3, [pc, #52]	@ (800237c <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8002346:	781b      	ldrb	r3, [r3, #0]
 8002348:	b2db      	uxtb	r3, r3
 800234a:	2b00      	cmp	r3, #0
 800234c:	d007      	beq.n	800235e <HAL_TIM_PeriodElapsedCallback+0x82>
			adc_available = 0;
 800234e:	4b0b      	ldr	r3, [pc, #44]	@ (800237c <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8002350:	2200      	movs	r2, #0
 8002352:	701a      	strb	r2, [r3, #0]
			HAL_ADC_Start_DMA(&hadc1, (uint32_t*)&adc_data, 2);
 8002354:	2202      	movs	r2, #2
 8002356:	490a      	ldr	r1, [pc, #40]	@ (8002380 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 8002358:	480a      	ldr	r0, [pc, #40]	@ (8002384 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 800235a:	f003 f969 	bl	8005630 <HAL_ADC_Start_DMA>
		}
	}
}
 800235e:	bf00      	nop
 8002360:	3708      	adds	r7, #8
 8002362:	46bd      	mov	sp, r7
 8002364:	bd80      	pop	{r7, pc}
 8002366:	bf00      	nop
 8002368:	2000d504 	.word	0x2000d504
 800236c:	20000010 	.word	0x20000010
 8002370:	2000d502 	.word	0x2000d502
 8002374:	2000d410 	.word	0x2000d410
 8002378:	40014400 	.word	0x40014400
 800237c:	2000d0e1 	.word	0x2000d0e1
 8002380:	2000d508 	.word	0x2000d508
 8002384:	2000d318 	.word	0x2000d318

08002388 <HAL_ADC_ConvCpltCallback>:


void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002388:	b580      	push	{r7, lr}
 800238a:	b084      	sub	sp, #16
 800238c:	af00      	add	r7, sp, #0
 800238e:	6078      	str	r0, [r7, #4]
    if(hadc->Instance == ADC1)
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	4a91      	ldr	r2, [pc, #580]	@ (80025dc <HAL_ADC_ConvCpltCallback+0x254>)
 8002396:	4293      	cmp	r3, r2
 8002398:	f040 81c2 	bne.w	8002720 <HAL_ADC_ConvCpltCallback+0x398>
    {
    	if (adc_reset_cyccnt) {
 800239c:	4b90      	ldr	r3, [pc, #576]	@ (80025e0 <HAL_ADC_ConvCpltCallback+0x258>)
 800239e:	781b      	ldrb	r3, [r3, #0]
 80023a0:	b2db      	uxtb	r3, r3
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d00b      	beq.n	80023be <HAL_ADC_ConvCpltCallback+0x36>
    		DWT->CYCCNT = 0U;
 80023a6:	4b8f      	ldr	r3, [pc, #572]	@ (80025e4 <HAL_ADC_ConvCpltCallback+0x25c>)
 80023a8:	2200      	movs	r2, #0
 80023aa:	605a      	str	r2, [r3, #4]
    		adc0_time_delta = 0;
 80023ac:	4b8e      	ldr	r3, [pc, #568]	@ (80025e8 <HAL_ADC_ConvCpltCallback+0x260>)
 80023ae:	2200      	movs	r2, #0
 80023b0:	601a      	str	r2, [r3, #0]
    		adc1_time_delta = 0;
 80023b2:	4b8e      	ldr	r3, [pc, #568]	@ (80025ec <HAL_ADC_ConvCpltCallback+0x264>)
 80023b4:	2200      	movs	r2, #0
 80023b6:	601a      	str	r2, [r3, #0]
    		adc_reset_cyccnt = 0;
 80023b8:	4b89      	ldr	r3, [pc, #548]	@ (80025e0 <HAL_ADC_ConvCpltCallback+0x258>)
 80023ba:	2200      	movs	r2, #0
 80023bc:	701a      	strb	r2, [r3, #0]
    	}

    	if (!adc0_filled) {
 80023be:	4b8c      	ldr	r3, [pc, #560]	@ (80025f0 <HAL_ADC_ConvCpltCallback+0x268>)
 80023c0:	781b      	ldrb	r3, [r3, #0]
 80023c2:	b2db      	uxtb	r3, r3
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	f040 80a4 	bne.w	8002512 <HAL_ADC_ConvCpltCallback+0x18a>
			adc0_time[adc0_length] = (DWT->CYCCNT - adc0_time_delta) / (SystemCoreClock / 1000000);
 80023ca:	4b86      	ldr	r3, [pc, #536]	@ (80025e4 <HAL_ADC_ConvCpltCallback+0x25c>)
 80023cc:	685a      	ldr	r2, [r3, #4]
 80023ce:	4b86      	ldr	r3, [pc, #536]	@ (80025e8 <HAL_ADC_ConvCpltCallback+0x260>)
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	1ad1      	subs	r1, r2, r3
 80023d4:	4b87      	ldr	r3, [pc, #540]	@ (80025f4 <HAL_ADC_ConvCpltCallback+0x26c>)
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	4a87      	ldr	r2, [pc, #540]	@ (80025f8 <HAL_ADC_ConvCpltCallback+0x270>)
 80023da:	fba2 2303 	umull	r2, r3, r2, r3
 80023de:	0c9a      	lsrs	r2, r3, #18
 80023e0:	4b86      	ldr	r3, [pc, #536]	@ (80025fc <HAL_ADC_ConvCpltCallback+0x274>)
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	fbb1 f2f2 	udiv	r2, r1, r2
 80023e8:	4985      	ldr	r1, [pc, #532]	@ (8002600 <HAL_ADC_ConvCpltCallback+0x278>)
 80023ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			adc0[adc0_length] = adc_data[0] * ADC_CHANNEL0_SCALE;
 80023ee:	4b83      	ldr	r3, [pc, #524]	@ (80025fc <HAL_ADC_ConvCpltCallback+0x274>)
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	4a84      	ldr	r2, [pc, #528]	@ (8002604 <HAL_ADC_ConvCpltCallback+0x27c>)
 80023f4:	8812      	ldrh	r2, [r2, #0]
 80023f6:	b291      	uxth	r1, r2
 80023f8:	4a83      	ldr	r2, [pc, #524]	@ (8002608 <HAL_ADC_ConvCpltCallback+0x280>)
 80023fa:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

			if (adc_max[0] < adc0[adc0_length])
 80023fe:	4b83      	ldr	r3, [pc, #524]	@ (800260c <HAL_ADC_ConvCpltCallback+0x284>)
 8002400:	881b      	ldrh	r3, [r3, #0]
 8002402:	b29a      	uxth	r2, r3
 8002404:	4b7d      	ldr	r3, [pc, #500]	@ (80025fc <HAL_ADC_ConvCpltCallback+0x274>)
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	497f      	ldr	r1, [pc, #508]	@ (8002608 <HAL_ADC_ConvCpltCallback+0x280>)
 800240a:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800240e:	429a      	cmp	r2, r3
 8002410:	d206      	bcs.n	8002420 <HAL_ADC_ConvCpltCallback+0x98>
				adc_max[0] = adc0[adc0_length];
 8002412:	4b7a      	ldr	r3, [pc, #488]	@ (80025fc <HAL_ADC_ConvCpltCallback+0x274>)
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	4a7c      	ldr	r2, [pc, #496]	@ (8002608 <HAL_ADC_ConvCpltCallback+0x280>)
 8002418:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 800241c:	4b7b      	ldr	r3, [pc, #492]	@ (800260c <HAL_ADC_ConvCpltCallback+0x284>)
 800241e:	801a      	strh	r2, [r3, #0]

			if (adc_min[0] > adc0[adc0_length])
 8002420:	4b7b      	ldr	r3, [pc, #492]	@ (8002610 <HAL_ADC_ConvCpltCallback+0x288>)
 8002422:	881b      	ldrh	r3, [r3, #0]
 8002424:	b29a      	uxth	r2, r3
 8002426:	4b75      	ldr	r3, [pc, #468]	@ (80025fc <HAL_ADC_ConvCpltCallback+0x274>)
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	4977      	ldr	r1, [pc, #476]	@ (8002608 <HAL_ADC_ConvCpltCallback+0x280>)
 800242c:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8002430:	429a      	cmp	r2, r3
 8002432:	d906      	bls.n	8002442 <HAL_ADC_ConvCpltCallback+0xba>
				adc_min[0] = adc0[adc0_length];
 8002434:	4b71      	ldr	r3, [pc, #452]	@ (80025fc <HAL_ADC_ConvCpltCallback+0x274>)
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	4a73      	ldr	r2, [pc, #460]	@ (8002608 <HAL_ADC_ConvCpltCallback+0x280>)
 800243a:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 800243e:	4b74      	ldr	r3, [pc, #464]	@ (8002610 <HAL_ADC_ConvCpltCallback+0x288>)
 8002440:	801a      	strh	r2, [r3, #0]

			if (adc0_length < (ADC_BUFFER_SIZE - 1)) {
 8002442:	4b6e      	ldr	r3, [pc, #440]	@ (80025fc <HAL_ADC_ConvCpltCallback+0x274>)
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	f240 72fe 	movw	r2, #2046	@ 0x7fe
 800244a:	4293      	cmp	r3, r2
 800244c:	d85e      	bhi.n	800250c <HAL_ADC_ConvCpltCallback+0x184>

				uint8_t trigger = 0;
 800244e:	2300      	movs	r3, #0
 8002450:	73fb      	strb	r3, [r7, #15]

				if (trigger_mode == 0)
 8002452:	4b70      	ldr	r3, [pc, #448]	@ (8002614 <HAL_ADC_ConvCpltCallback+0x28c>)
 8002454:	781b      	ldrb	r3, [r3, #0]
 8002456:	2b00      	cmp	r3, #0
 8002458:	d114      	bne.n	8002484 <HAL_ADC_ConvCpltCallback+0xfc>
					trigger = (adc0_prev < trigger0_value && adc0[adc0_length] > trigger0_value);
 800245a:	4b6f      	ldr	r3, [pc, #444]	@ (8002618 <HAL_ADC_ConvCpltCallback+0x290>)
 800245c:	881b      	ldrh	r3, [r3, #0]
 800245e:	b29a      	uxth	r2, r3
 8002460:	4b6e      	ldr	r3, [pc, #440]	@ (800261c <HAL_ADC_ConvCpltCallback+0x294>)
 8002462:	881b      	ldrh	r3, [r3, #0]
 8002464:	429a      	cmp	r2, r3
 8002466:	d20a      	bcs.n	800247e <HAL_ADC_ConvCpltCallback+0xf6>
 8002468:	4b64      	ldr	r3, [pc, #400]	@ (80025fc <HAL_ADC_ConvCpltCallback+0x274>)
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	4a66      	ldr	r2, [pc, #408]	@ (8002608 <HAL_ADC_ConvCpltCallback+0x280>)
 800246e:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8002472:	4b6a      	ldr	r3, [pc, #424]	@ (800261c <HAL_ADC_ConvCpltCallback+0x294>)
 8002474:	881b      	ldrh	r3, [r3, #0]
 8002476:	429a      	cmp	r2, r3
 8002478:	d901      	bls.n	800247e <HAL_ADC_ConvCpltCallback+0xf6>
 800247a:	2301      	movs	r3, #1
 800247c:	e000      	b.n	8002480 <HAL_ADC_ConvCpltCallback+0xf8>
 800247e:	2300      	movs	r3, #0
 8002480:	73fb      	strb	r3, [r7, #15]
 8002482:	e013      	b.n	80024ac <HAL_ADC_ConvCpltCallback+0x124>
				else
					trigger = (adc0_prev > trigger0_value && adc0[adc0_length] < trigger0_value);
 8002484:	4b64      	ldr	r3, [pc, #400]	@ (8002618 <HAL_ADC_ConvCpltCallback+0x290>)
 8002486:	881b      	ldrh	r3, [r3, #0]
 8002488:	b29a      	uxth	r2, r3
 800248a:	4b64      	ldr	r3, [pc, #400]	@ (800261c <HAL_ADC_ConvCpltCallback+0x294>)
 800248c:	881b      	ldrh	r3, [r3, #0]
 800248e:	429a      	cmp	r2, r3
 8002490:	d90a      	bls.n	80024a8 <HAL_ADC_ConvCpltCallback+0x120>
 8002492:	4b5a      	ldr	r3, [pc, #360]	@ (80025fc <HAL_ADC_ConvCpltCallback+0x274>)
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	4a5c      	ldr	r2, [pc, #368]	@ (8002608 <HAL_ADC_ConvCpltCallback+0x280>)
 8002498:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 800249c:	4b5f      	ldr	r3, [pc, #380]	@ (800261c <HAL_ADC_ConvCpltCallback+0x294>)
 800249e:	881b      	ldrh	r3, [r3, #0]
 80024a0:	429a      	cmp	r2, r3
 80024a2:	d201      	bcs.n	80024a8 <HAL_ADC_ConvCpltCallback+0x120>
 80024a4:	2301      	movs	r3, #1
 80024a6:	e000      	b.n	80024aa <HAL_ADC_ConvCpltCallback+0x122>
 80024a8:	2300      	movs	r3, #0
 80024aa:	73fb      	strb	r3, [r7, #15]

				if (trigger && adc0_length != 0) {
 80024ac:	7bfb      	ldrb	r3, [r7, #15]
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d021      	beq.n	80024f6 <HAL_ADC_ConvCpltCallback+0x16e>
 80024b2:	4b52      	ldr	r3, [pc, #328]	@ (80025fc <HAL_ADC_ConvCpltCallback+0x274>)
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d01d      	beq.n	80024f6 <HAL_ADC_ConvCpltCallback+0x16e>
					if (!event_trigger0_detected) {
 80024ba:	4b59      	ldr	r3, [pc, #356]	@ (8002620 <HAL_ADC_ConvCpltCallback+0x298>)
 80024bc:	781b      	ldrb	r3, [r3, #0]
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d10a      	bne.n	80024d8 <HAL_ADC_ConvCpltCallback+0x150>
						adc0_length = 0;
 80024c2:	4b4e      	ldr	r3, [pc, #312]	@ (80025fc <HAL_ADC_ConvCpltCallback+0x274>)
 80024c4:	2200      	movs	r2, #0
 80024c6:	601a      	str	r2, [r3, #0]
						adc0_time_delta = DWT->CYCCNT;
 80024c8:	4b46      	ldr	r3, [pc, #280]	@ (80025e4 <HAL_ADC_ConvCpltCallback+0x25c>)
 80024ca:	685b      	ldr	r3, [r3, #4]
 80024cc:	4a46      	ldr	r2, [pc, #280]	@ (80025e8 <HAL_ADC_ConvCpltCallback+0x260>)
 80024ce:	6013      	str	r3, [r2, #0]
						event_trigger0_detected = 1;
 80024d0:	4b53      	ldr	r3, [pc, #332]	@ (8002620 <HAL_ADC_ConvCpltCallback+0x298>)
 80024d2:	2201      	movs	r2, #1
 80024d4:	701a      	strb	r2, [r3, #0]
 80024d6:	e00e      	b.n	80024f6 <HAL_ADC_ConvCpltCallback+0x16e>
					} else if (!adc_period0_detected) {
 80024d8:	4b52      	ldr	r3, [pc, #328]	@ (8002624 <HAL_ADC_ConvCpltCallback+0x29c>)
 80024da:	781b      	ldrb	r3, [r3, #0]
 80024dc:	b2db      	uxtb	r3, r3
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d109      	bne.n	80024f6 <HAL_ADC_ConvCpltCallback+0x16e>
						adc_period[0] = adc0_time[adc0_length];
 80024e2:	4b46      	ldr	r3, [pc, #280]	@ (80025fc <HAL_ADC_ConvCpltCallback+0x274>)
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	4a46      	ldr	r2, [pc, #280]	@ (8002600 <HAL_ADC_ConvCpltCallback+0x278>)
 80024e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80024ec:	4a4e      	ldr	r2, [pc, #312]	@ (8002628 <HAL_ADC_ConvCpltCallback+0x2a0>)
 80024ee:	6013      	str	r3, [r2, #0]
						adc_period0_detected = 1;
 80024f0:	4b4c      	ldr	r3, [pc, #304]	@ (8002624 <HAL_ADC_ConvCpltCallback+0x29c>)
 80024f2:	2201      	movs	r2, #1
 80024f4:	701a      	strb	r2, [r3, #0]
					}
				}

				adc0_prev = adc_data[0] * ADC_CHANNEL0_SCALE;
 80024f6:	4b43      	ldr	r3, [pc, #268]	@ (8002604 <HAL_ADC_ConvCpltCallback+0x27c>)
 80024f8:	881b      	ldrh	r3, [r3, #0]
 80024fa:	b29a      	uxth	r2, r3
 80024fc:	4b46      	ldr	r3, [pc, #280]	@ (8002618 <HAL_ADC_ConvCpltCallback+0x290>)
 80024fe:	801a      	strh	r2, [r3, #0]
				adc0_length++;
 8002500:	4b3e      	ldr	r3, [pc, #248]	@ (80025fc <HAL_ADC_ConvCpltCallback+0x274>)
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	3301      	adds	r3, #1
 8002506:	4a3d      	ldr	r2, [pc, #244]	@ (80025fc <HAL_ADC_ConvCpltCallback+0x274>)
 8002508:	6013      	str	r3, [r2, #0]
 800250a:	e002      	b.n	8002512 <HAL_ADC_ConvCpltCallback+0x18a>

			} else
				adc0_filled = 1;
 800250c:	4b38      	ldr	r3, [pc, #224]	@ (80025f0 <HAL_ADC_ConvCpltCallback+0x268>)
 800250e:	2201      	movs	r2, #1
 8002510:	701a      	strb	r2, [r3, #0]
    	}

    	if (!adc1_filled) {
 8002512:	4b46      	ldr	r3, [pc, #280]	@ (800262c <HAL_ADC_ConvCpltCallback+0x2a4>)
 8002514:	781b      	ldrb	r3, [r3, #0]
 8002516:	b2db      	uxtb	r3, r3
 8002518:	2b00      	cmp	r3, #0
 800251a:	f040 80da 	bne.w	80026d2 <HAL_ADC_ConvCpltCallback+0x34a>
			adc1_time[adc1_length] = (DWT->CYCCNT - adc1_time_delta) / (SystemCoreClock / 1000000);
 800251e:	4b31      	ldr	r3, [pc, #196]	@ (80025e4 <HAL_ADC_ConvCpltCallback+0x25c>)
 8002520:	685a      	ldr	r2, [r3, #4]
 8002522:	4b32      	ldr	r3, [pc, #200]	@ (80025ec <HAL_ADC_ConvCpltCallback+0x264>)
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	1ad1      	subs	r1, r2, r3
 8002528:	4b32      	ldr	r3, [pc, #200]	@ (80025f4 <HAL_ADC_ConvCpltCallback+0x26c>)
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	4a32      	ldr	r2, [pc, #200]	@ (80025f8 <HAL_ADC_ConvCpltCallback+0x270>)
 800252e:	fba2 2303 	umull	r2, r3, r2, r3
 8002532:	0c9a      	lsrs	r2, r3, #18
 8002534:	4b3e      	ldr	r3, [pc, #248]	@ (8002630 <HAL_ADC_ConvCpltCallback+0x2a8>)
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	fbb1 f2f2 	udiv	r2, r1, r2
 800253c:	493d      	ldr	r1, [pc, #244]	@ (8002634 <HAL_ADC_ConvCpltCallback+0x2ac>)
 800253e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			adc1[adc1_length] = adc_data[1] * ADC_CHANNEL1_SCALE;
 8002542:	4b3b      	ldr	r3, [pc, #236]	@ (8002630 <HAL_ADC_ConvCpltCallback+0x2a8>)
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	4a2f      	ldr	r2, [pc, #188]	@ (8002604 <HAL_ADC_ConvCpltCallback+0x27c>)
 8002548:	8852      	ldrh	r2, [r2, #2]
 800254a:	b291      	uxth	r1, r2
 800254c:	4a3a      	ldr	r2, [pc, #232]	@ (8002638 <HAL_ADC_ConvCpltCallback+0x2b0>)
 800254e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

			if (adc_max[1] < adc1[adc1_length])
 8002552:	4b2e      	ldr	r3, [pc, #184]	@ (800260c <HAL_ADC_ConvCpltCallback+0x284>)
 8002554:	885b      	ldrh	r3, [r3, #2]
 8002556:	b29a      	uxth	r2, r3
 8002558:	4b35      	ldr	r3, [pc, #212]	@ (8002630 <HAL_ADC_ConvCpltCallback+0x2a8>)
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	4936      	ldr	r1, [pc, #216]	@ (8002638 <HAL_ADC_ConvCpltCallback+0x2b0>)
 800255e:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8002562:	429a      	cmp	r2, r3
 8002564:	d206      	bcs.n	8002574 <HAL_ADC_ConvCpltCallback+0x1ec>
				adc_max[1] = adc1[adc1_length];
 8002566:	4b32      	ldr	r3, [pc, #200]	@ (8002630 <HAL_ADC_ConvCpltCallback+0x2a8>)
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	4a33      	ldr	r2, [pc, #204]	@ (8002638 <HAL_ADC_ConvCpltCallback+0x2b0>)
 800256c:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8002570:	4b26      	ldr	r3, [pc, #152]	@ (800260c <HAL_ADC_ConvCpltCallback+0x284>)
 8002572:	805a      	strh	r2, [r3, #2]

			if (adc_min[1] > adc1[adc1_length])
 8002574:	4b26      	ldr	r3, [pc, #152]	@ (8002610 <HAL_ADC_ConvCpltCallback+0x288>)
 8002576:	885b      	ldrh	r3, [r3, #2]
 8002578:	b29a      	uxth	r2, r3
 800257a:	4b2d      	ldr	r3, [pc, #180]	@ (8002630 <HAL_ADC_ConvCpltCallback+0x2a8>)
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	492e      	ldr	r1, [pc, #184]	@ (8002638 <HAL_ADC_ConvCpltCallback+0x2b0>)
 8002580:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8002584:	429a      	cmp	r2, r3
 8002586:	d906      	bls.n	8002596 <HAL_ADC_ConvCpltCallback+0x20e>
				adc_min[1] = adc1[adc1_length];
 8002588:	4b29      	ldr	r3, [pc, #164]	@ (8002630 <HAL_ADC_ConvCpltCallback+0x2a8>)
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	4a2a      	ldr	r2, [pc, #168]	@ (8002638 <HAL_ADC_ConvCpltCallback+0x2b0>)
 800258e:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8002592:	4b1f      	ldr	r3, [pc, #124]	@ (8002610 <HAL_ADC_ConvCpltCallback+0x288>)
 8002594:	805a      	strh	r2, [r3, #2]

			if (adc1_length < (ADC_BUFFER_SIZE - 1)) {
 8002596:	4b26      	ldr	r3, [pc, #152]	@ (8002630 <HAL_ADC_ConvCpltCallback+0x2a8>)
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f240 72fe 	movw	r2, #2046	@ 0x7fe
 800259e:	4293      	cmp	r3, r2
 80025a0:	f200 8094 	bhi.w	80026cc <HAL_ADC_ConvCpltCallback+0x344>

				uint8_t trigger = 0;
 80025a4:	2300      	movs	r3, #0
 80025a6:	73bb      	strb	r3, [r7, #14]

				if (trigger_mode == 0)
 80025a8:	4b1a      	ldr	r3, [pc, #104]	@ (8002614 <HAL_ADC_ConvCpltCallback+0x28c>)
 80025aa:	781b      	ldrb	r3, [r3, #0]
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d149      	bne.n	8002644 <HAL_ADC_ConvCpltCallback+0x2bc>
					trigger = (adc1_prev < trigger1_value && adc1[adc1_length] > trigger1_value);
 80025b0:	4b22      	ldr	r3, [pc, #136]	@ (800263c <HAL_ADC_ConvCpltCallback+0x2b4>)
 80025b2:	881b      	ldrh	r3, [r3, #0]
 80025b4:	b29a      	uxth	r2, r3
 80025b6:	4b22      	ldr	r3, [pc, #136]	@ (8002640 <HAL_ADC_ConvCpltCallback+0x2b8>)
 80025b8:	881b      	ldrh	r3, [r3, #0]
 80025ba:	429a      	cmp	r2, r3
 80025bc:	d20a      	bcs.n	80025d4 <HAL_ADC_ConvCpltCallback+0x24c>
 80025be:	4b1c      	ldr	r3, [pc, #112]	@ (8002630 <HAL_ADC_ConvCpltCallback+0x2a8>)
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	4a1d      	ldr	r2, [pc, #116]	@ (8002638 <HAL_ADC_ConvCpltCallback+0x2b0>)
 80025c4:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 80025c8:	4b1d      	ldr	r3, [pc, #116]	@ (8002640 <HAL_ADC_ConvCpltCallback+0x2b8>)
 80025ca:	881b      	ldrh	r3, [r3, #0]
 80025cc:	429a      	cmp	r2, r3
 80025ce:	d901      	bls.n	80025d4 <HAL_ADC_ConvCpltCallback+0x24c>
 80025d0:	2301      	movs	r3, #1
 80025d2:	e000      	b.n	80025d6 <HAL_ADC_ConvCpltCallback+0x24e>
 80025d4:	2300      	movs	r3, #0
 80025d6:	73bb      	strb	r3, [r7, #14]
 80025d8:	e048      	b.n	800266c <HAL_ADC_ConvCpltCallback+0x2e4>
 80025da:	bf00      	nop
 80025dc:	40012000 	.word	0x40012000
 80025e0:	2000d0e2 	.word	0x2000d0e2
 80025e4:	e0001000 	.word	0xe0001000
 80025e8:	20013e00 	.word	0x20013e00
 80025ec:	20013e04 	.word	0x20013e04
 80025f0:	2000d518 	.word	0x2000d518
 80025f4:	2000d114 	.word	0x2000d114
 80025f8:	431bde83 	.word	0x431bde83
 80025fc:	2000d510 	.word	0x2000d510
 8002600:	2000d52c 	.word	0x2000d52c
 8002604:	2000d508 	.word	0x2000d508
 8002608:	2001152c 	.word	0x2001152c
 800260c:	2000d51c 	.word	0x2000d51c
 8002610:	2000d0e4 	.word	0x2000d0e4
 8002614:	2001352c 	.word	0x2001352c
 8002618:	20013e08 	.word	0x20013e08
 800261c:	2000d0fc 	.word	0x2000d0fc
 8002620:	2000d109 	.word	0x2000d109
 8002624:	2000d528 	.word	0x2000d528
 8002628:	2000d520 	.word	0x2000d520
 800262c:	2000d0e0 	.word	0x2000d0e0
 8002630:	2000d514 	.word	0x2000d514
 8002634:	2000f52c 	.word	0x2000f52c
 8002638:	2001252c 	.word	0x2001252c
 800263c:	20013e0a 	.word	0x20013e0a
 8002640:	2000d0fe 	.word	0x2000d0fe
				else
					trigger = (adc1_prev > trigger1_value && adc1[adc1_length] < trigger1_value);
 8002644:	4b38      	ldr	r3, [pc, #224]	@ (8002728 <HAL_ADC_ConvCpltCallback+0x3a0>)
 8002646:	881b      	ldrh	r3, [r3, #0]
 8002648:	b29a      	uxth	r2, r3
 800264a:	4b38      	ldr	r3, [pc, #224]	@ (800272c <HAL_ADC_ConvCpltCallback+0x3a4>)
 800264c:	881b      	ldrh	r3, [r3, #0]
 800264e:	429a      	cmp	r2, r3
 8002650:	d90a      	bls.n	8002668 <HAL_ADC_ConvCpltCallback+0x2e0>
 8002652:	4b37      	ldr	r3, [pc, #220]	@ (8002730 <HAL_ADC_ConvCpltCallback+0x3a8>)
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	4a37      	ldr	r2, [pc, #220]	@ (8002734 <HAL_ADC_ConvCpltCallback+0x3ac>)
 8002658:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 800265c:	4b33      	ldr	r3, [pc, #204]	@ (800272c <HAL_ADC_ConvCpltCallback+0x3a4>)
 800265e:	881b      	ldrh	r3, [r3, #0]
 8002660:	429a      	cmp	r2, r3
 8002662:	d201      	bcs.n	8002668 <HAL_ADC_ConvCpltCallback+0x2e0>
 8002664:	2301      	movs	r3, #1
 8002666:	e000      	b.n	800266a <HAL_ADC_ConvCpltCallback+0x2e2>
 8002668:	2300      	movs	r3, #0
 800266a:	73bb      	strb	r3, [r7, #14]

				if (trigger && adc1_length != 0) {
 800266c:	7bbb      	ldrb	r3, [r7, #14]
 800266e:	2b00      	cmp	r3, #0
 8002670:	d021      	beq.n	80026b6 <HAL_ADC_ConvCpltCallback+0x32e>
 8002672:	4b2f      	ldr	r3, [pc, #188]	@ (8002730 <HAL_ADC_ConvCpltCallback+0x3a8>)
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	2b00      	cmp	r3, #0
 8002678:	d01d      	beq.n	80026b6 <HAL_ADC_ConvCpltCallback+0x32e>
					if (!event_trigger1_detected) {
 800267a:	4b2f      	ldr	r3, [pc, #188]	@ (8002738 <HAL_ADC_ConvCpltCallback+0x3b0>)
 800267c:	781b      	ldrb	r3, [r3, #0]
 800267e:	2b00      	cmp	r3, #0
 8002680:	d10a      	bne.n	8002698 <HAL_ADC_ConvCpltCallback+0x310>
						adc1_length = 0;
 8002682:	4b2b      	ldr	r3, [pc, #172]	@ (8002730 <HAL_ADC_ConvCpltCallback+0x3a8>)
 8002684:	2200      	movs	r2, #0
 8002686:	601a      	str	r2, [r3, #0]
						adc1_time_delta = DWT->CYCCNT;
 8002688:	4b2c      	ldr	r3, [pc, #176]	@ (800273c <HAL_ADC_ConvCpltCallback+0x3b4>)
 800268a:	685b      	ldr	r3, [r3, #4]
 800268c:	4a2c      	ldr	r2, [pc, #176]	@ (8002740 <HAL_ADC_ConvCpltCallback+0x3b8>)
 800268e:	6013      	str	r3, [r2, #0]
						event_trigger1_detected = 1;
 8002690:	4b29      	ldr	r3, [pc, #164]	@ (8002738 <HAL_ADC_ConvCpltCallback+0x3b0>)
 8002692:	2201      	movs	r2, #1
 8002694:	701a      	strb	r2, [r3, #0]
 8002696:	e00e      	b.n	80026b6 <HAL_ADC_ConvCpltCallback+0x32e>
					} else if (!adc_period1_detected) {
 8002698:	4b2a      	ldr	r3, [pc, #168]	@ (8002744 <HAL_ADC_ConvCpltCallback+0x3bc>)
 800269a:	781b      	ldrb	r3, [r3, #0]
 800269c:	b2db      	uxtb	r3, r3
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d109      	bne.n	80026b6 <HAL_ADC_ConvCpltCallback+0x32e>
						adc_period[1] = adc1_time[adc1_length];
 80026a2:	4b23      	ldr	r3, [pc, #140]	@ (8002730 <HAL_ADC_ConvCpltCallback+0x3a8>)
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	4a28      	ldr	r2, [pc, #160]	@ (8002748 <HAL_ADC_ConvCpltCallback+0x3c0>)
 80026a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80026ac:	4a27      	ldr	r2, [pc, #156]	@ (800274c <HAL_ADC_ConvCpltCallback+0x3c4>)
 80026ae:	6053      	str	r3, [r2, #4]
						adc_period1_detected = 1;
 80026b0:	4b24      	ldr	r3, [pc, #144]	@ (8002744 <HAL_ADC_ConvCpltCallback+0x3bc>)
 80026b2:	2201      	movs	r2, #1
 80026b4:	701a      	strb	r2, [r3, #0]
					}
				}

				adc1_prev = adc_data[1] * ADC_CHANNEL1_SCALE;
 80026b6:	4b26      	ldr	r3, [pc, #152]	@ (8002750 <HAL_ADC_ConvCpltCallback+0x3c8>)
 80026b8:	885b      	ldrh	r3, [r3, #2]
 80026ba:	b29a      	uxth	r2, r3
 80026bc:	4b1a      	ldr	r3, [pc, #104]	@ (8002728 <HAL_ADC_ConvCpltCallback+0x3a0>)
 80026be:	801a      	strh	r2, [r3, #0]
				adc1_length++;
 80026c0:	4b1b      	ldr	r3, [pc, #108]	@ (8002730 <HAL_ADC_ConvCpltCallback+0x3a8>)
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	3301      	adds	r3, #1
 80026c6:	4a1a      	ldr	r2, [pc, #104]	@ (8002730 <HAL_ADC_ConvCpltCallback+0x3a8>)
 80026c8:	6013      	str	r3, [r2, #0]
 80026ca:	e002      	b.n	80026d2 <HAL_ADC_ConvCpltCallback+0x34a>

			} else
				adc1_filled = 1;
 80026cc:	4b21      	ldr	r3, [pc, #132]	@ (8002754 <HAL_ADC_ConvCpltCallback+0x3cc>)
 80026ce:	2201      	movs	r2, #1
 80026d0:	701a      	strb	r2, [r3, #0]
    	}

		if (adc0_filled && adc1_filled) {
 80026d2:	4b21      	ldr	r3, [pc, #132]	@ (8002758 <HAL_ADC_ConvCpltCallback+0x3d0>)
 80026d4:	781b      	ldrb	r3, [r3, #0]
 80026d6:	b2db      	uxtb	r3, r3
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d012      	beq.n	8002702 <HAL_ADC_ConvCpltCallback+0x37a>
 80026dc:	4b1d      	ldr	r3, [pc, #116]	@ (8002754 <HAL_ADC_ConvCpltCallback+0x3cc>)
 80026de:	781b      	ldrb	r3, [r3, #0]
 80026e0:	b2db      	uxtb	r3, r3
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d00d      	beq.n	8002702 <HAL_ADC_ConvCpltCallback+0x37a>
			event_adc = 1;
 80026e6:	4b1d      	ldr	r3, [pc, #116]	@ (800275c <HAL_ADC_ConvCpltCallback+0x3d4>)
 80026e8:	2201      	movs	r2, #1
 80026ea:	701a      	strb	r2, [r3, #0]

	    	if (!adc_immediate) {
 80026ec:	4b1c      	ldr	r3, [pc, #112]	@ (8002760 <HAL_ADC_ConvCpltCallback+0x3d8>)
 80026ee:	781b      	ldrb	r3, [r3, #0]
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d114      	bne.n	800271e <HAL_ADC_ConvCpltCallback+0x396>
				HAL_TIM_Base_Stop_IT(&htim10);
 80026f4:	481b      	ldr	r0, [pc, #108]	@ (8002764 <HAL_ADC_ConvCpltCallback+0x3dc>)
 80026f6:	f006 fb61 	bl	8008dbc <HAL_TIM_Base_Stop_IT>
				adc_available = 1;
 80026fa:	4b1b      	ldr	r3, [pc, #108]	@ (8002768 <HAL_ADC_ConvCpltCallback+0x3e0>)
 80026fc:	2201      	movs	r2, #1
 80026fe:	701a      	strb	r2, [r3, #0]
	    	}

    		return;
 8002700:	e00d      	b.n	800271e <HAL_ADC_ConvCpltCallback+0x396>
		}

		if (adc_immediate)
 8002702:	4b17      	ldr	r3, [pc, #92]	@ (8002760 <HAL_ADC_ConvCpltCallback+0x3d8>)
 8002704:	781b      	ldrb	r3, [r3, #0]
 8002706:	2b00      	cmp	r3, #0
 8002708:	d005      	beq.n	8002716 <HAL_ADC_ConvCpltCallback+0x38e>
			HAL_ADC_Start_DMA(&hadc1, (uint32_t*)&adc_data, 2);
 800270a:	2202      	movs	r2, #2
 800270c:	4910      	ldr	r1, [pc, #64]	@ (8002750 <HAL_ADC_ConvCpltCallback+0x3c8>)
 800270e:	4817      	ldr	r0, [pc, #92]	@ (800276c <HAL_ADC_ConvCpltCallback+0x3e4>)
 8002710:	f002 ff8e 	bl	8005630 <HAL_ADC_Start_DMA>
 8002714:	e004      	b.n	8002720 <HAL_ADC_ConvCpltCallback+0x398>
		else
			adc_available = 1;
 8002716:	4b14      	ldr	r3, [pc, #80]	@ (8002768 <HAL_ADC_ConvCpltCallback+0x3e0>)
 8002718:	2201      	movs	r2, #1
 800271a:	701a      	strb	r2, [r3, #0]
 800271c:	e000      	b.n	8002720 <HAL_ADC_ConvCpltCallback+0x398>
    		return;
 800271e:	bf00      	nop
    }
}
 8002720:	3710      	adds	r7, #16
 8002722:	46bd      	mov	sp, r7
 8002724:	bd80      	pop	{r7, pc}
 8002726:	bf00      	nop
 8002728:	20013e0a 	.word	0x20013e0a
 800272c:	2000d0fe 	.word	0x2000d0fe
 8002730:	2000d514 	.word	0x2000d514
 8002734:	2001252c 	.word	0x2001252c
 8002738:	2000d10a 	.word	0x2000d10a
 800273c:	e0001000 	.word	0xe0001000
 8002740:	20013e04 	.word	0x20013e04
 8002744:	2000d529 	.word	0x2000d529
 8002748:	2000f52c 	.word	0x2000f52c
 800274c:	2000d520 	.word	0x2000d520
 8002750:	2000d508 	.word	0x2000d508
 8002754:	2000d0e0 	.word	0x2000d0e0
 8002758:	2000d518 	.word	0x2000d518
 800275c:	2001352d 	.word	0x2001352d
 8002760:	2000d0e8 	.word	0x2000d0e8
 8002764:	20013fe0 	.word	0x20013fe0
 8002768:	2000d0e1 	.word	0x2000d0e1
 800276c:	2000d318 	.word	0x2000d318

08002770 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002770:	b580      	push	{r7, lr}
 8002772:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002774:	f002 fe82 	bl	800547c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002778:	f000 f886 	bl	8002888 <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 800277c:	f000 f8ec 	bl	8002958 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002780:	f7fe fe66 	bl	8001450 <MX_GPIO_Init>
  MX_DMA_Init();
 8002784:	f7fe fe2e 	bl	80013e4 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8002788:	f002 fd74 	bl	8005274 <MX_USART2_UART_Init>
  MX_I2S2_Init();
 800278c:	f7fe ff00 	bl	8001590 <MX_I2S2_Init>
  MX_USART6_UART_Init();
 8002790:	f002 fd9a 	bl	80052c8 <MX_USART6_UART_Init>
  MX_CRC_Init();
 8002794:	f7fe fdf0 	bl	8001378 <MX_CRC_Init>
  MX_I2S3_Init();
 8002798:	f7fe ff28 	bl	80015ec <MX_I2S3_Init>
  MX_TIM2_Init();
 800279c:	f002 fb3a 	bl	8004e14 <MX_TIM2_Init>
  MX_SPI5_Init();
 80027a0:	f002 f8b6 	bl	8004910 <MX_SPI5_Init>
  MX_TIM1_Init();
 80027a4:	f002 fa94 	bl	8004cd0 <MX_TIM1_Init>
  MX_ADC1_Init();
 80027a8:	f7fe fcd8 	bl	800115c <MX_ADC1_Init>
  MX_FATFS_Init();
 80027ac:	f008 fb98 	bl	800aee0 <MX_FATFS_Init>
  MX_SPI4_Init();
 80027b0:	f002 f878 	bl	80048a4 <MX_SPI4_Init>
  MX_TIM10_Init();
 80027b4:	f002 fc22 	bl	8004ffc <MX_TIM10_Init>
  MX_TIM3_Init();
 80027b8:	f002 fb78 	bl	8004eac <MX_TIM3_Init>
  MX_TIM4_Init();
 80027bc:	f002 fbca 	bl	8004f54 <MX_TIM4_Init>
  {
      Error_Handler();
  }
#endif

  if (HAL_UART_Receive_IT(&huart6, &rx_byte, 1) != HAL_OK)
 80027c0:	2201      	movs	r2, #1
 80027c2:	4923      	ldr	r1, [pc, #140]	@ (8002850 <main+0xe0>)
 80027c4:	4823      	ldr	r0, [pc, #140]	@ (8002854 <main+0xe4>)
 80027c6:	f007 fbfa 	bl	8009fbe <HAL_UART_Receive_IT>
 80027ca:	4603      	mov	r3, r0
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d001      	beq.n	80027d4 <main+0x64>
  {
      Error_Handler();
 80027d0:	f000 f8e2 	bl	8002998 <Error_Handler>
  }

  printf("AI Model Application Started...\r\n");
 80027d4:	4820      	ldr	r0, [pc, #128]	@ (8002858 <main+0xe8>)
 80027d6:	f00a f8bb 	bl	800c950 <puts>


  txIndex = 0;
 80027da:	4b20      	ldr	r3, [pc, #128]	@ (800285c <main+0xec>)
 80027dc:	2200      	movs	r2, #0
 80027de:	601a      	str	r2, [r3, #0]

  // For DWT->CYCCNT ...
  SCB_DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 80027e0:	4b1f      	ldr	r3, [pc, #124]	@ (8002860 <main+0xf0>)
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	4a1e      	ldr	r2, [pc, #120]	@ (8002860 <main+0xf0>)
 80027e6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80027ea:	6013      	str	r3, [r2, #0]
  DWT_CONTROL |= DWT_CTRL_CYCCNTENA_Msk;
 80027ec:	4b1d      	ldr	r3, [pc, #116]	@ (8002864 <main+0xf4>)
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	4a1c      	ldr	r2, [pc, #112]	@ (8002864 <main+0xf4>)
 80027f2:	f043 0301 	orr.w	r3, r3, #1
 80027f6:	6013      	str	r3, [r2, #0]

  adc_reset_cyccnt = 1;
 80027f8:	4b1b      	ldr	r3, [pc, #108]	@ (8002868 <main+0xf8>)
 80027fa:	2201      	movs	r2, #1
 80027fc:	701a      	strb	r2, [r3, #0]
  if (adc_immediate)
 80027fe:	4b1b      	ldr	r3, [pc, #108]	@ (800286c <main+0xfc>)
 8002800:	781b      	ldrb	r3, [r3, #0]
 8002802:	2b00      	cmp	r3, #0
 8002804:	d005      	beq.n	8002812 <main+0xa2>
  {
	  // The ADC starts immediately after the previous measurement is handled
	  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)&adc_data, 2);
 8002806:	2202      	movs	r2, #2
 8002808:	4919      	ldr	r1, [pc, #100]	@ (8002870 <main+0x100>)
 800280a:	481a      	ldr	r0, [pc, #104]	@ (8002874 <main+0x104>)
 800280c:	f002 ff10 	bl	8005630 <HAL_ADC_Start_DMA>
 8002810:	e002      	b.n	8002818 <main+0xa8>
  }
  else
  {
	  // ADC starts by timer
	  HAL_TIM_Base_Start_IT(&htim10);
 8002812:	4819      	ldr	r0, [pc, #100]	@ (8002878 <main+0x108>)
 8002814:	f006 fa70 	bl	8008cf8 <HAL_TIM_Base_Start_IT>
  }

  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8002818:	2100      	movs	r1, #0
 800281a:	4818      	ldr	r0, [pc, #96]	@ (800287c <main+0x10c>)
 800281c:	f006 fb56 	bl	8008ecc <HAL_TIM_PWM_Start>

  InitOscState();
 8002820:	f000 f8c0 	bl	80029a4 <InitOscState>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
  {
	 if(HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin) == GPIO_PIN_RESET)
 8002824:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002828:	4815      	ldr	r0, [pc, #84]	@ (8002880 <main+0x110>)
 800282a:	f004 f9c7 	bl	8006bbc <HAL_GPIO_ReadPin>
 800282e:	4603      	mov	r3, r0
 8002830:	2b00      	cmp	r3, #0
 8002832:	d103      	bne.n	800283c <main+0xcc>
	 {

		  HAL_TIM_Base_Start_IT(&htim2);
 8002834:	4813      	ldr	r0, [pc, #76]	@ (8002884 <main+0x114>)
 8002836:	f006 fa5f 	bl	8008cf8 <HAL_TIM_Base_Start_IT>
 800283a:	e005      	b.n	8002848 <main+0xd8>
	 }
	 else
	 {
		  txIndex = 0;
 800283c:	4b07      	ldr	r3, [pc, #28]	@ (800285c <main+0xec>)
 800283e:	2200      	movs	r2, #0
 8002840:	601a      	str	r2, [r3, #0]
		  HAL_TIM_Base_Stop_IT(&htim2);
 8002842:	4810      	ldr	r0, [pc, #64]	@ (8002884 <main+0x114>)
 8002844:	f006 faba 	bl	8008dbc <HAL_TIM_Base_Stop_IT>
	 }

	 Oscilloscope_Process();
 8002848:	f000 ffe8 	bl	800381c <Oscilloscope_Process>
	 if(HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin) == GPIO_PIN_RESET)
 800284c:	e7ea      	b.n	8002824 <main+0xb4>
 800284e:	bf00      	nop
 8002850:	2000d4fe 	.word	0x2000d4fe
 8002854:	20014070 	.word	0x20014070
 8002858:	080103b4 	.word	0x080103b4
 800285c:	2000d504 	.word	0x2000d504
 8002860:	e000edfc 	.word	0xe000edfc
 8002864:	e0001000 	.word	0xe0001000
 8002868:	2000d0e2 	.word	0x2000d0e2
 800286c:	2000d0e8 	.word	0x2000d0e8
 8002870:	2000d508 	.word	0x2000d508
 8002874:	2000d318 	.word	0x2000d318
 8002878:	20013fe0 	.word	0x20013fe0
 800287c:	20013ec0 	.word	0x20013ec0
 8002880:	40020800 	.word	0x40020800
 8002884:	20013f08 	.word	0x20013f08

08002888 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002888:	b580      	push	{r7, lr}
 800288a:	b094      	sub	sp, #80	@ 0x50
 800288c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800288e:	f107 0320 	add.w	r3, r7, #32
 8002892:	2230      	movs	r2, #48	@ 0x30
 8002894:	2100      	movs	r1, #0
 8002896:	4618      	mov	r0, r3
 8002898:	f00a f992 	bl	800cbc0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800289c:	f107 030c 	add.w	r3, r7, #12
 80028a0:	2200      	movs	r2, #0
 80028a2:	601a      	str	r2, [r3, #0]
 80028a4:	605a      	str	r2, [r3, #4]
 80028a6:	609a      	str	r2, [r3, #8]
 80028a8:	60da      	str	r2, [r3, #12]
 80028aa:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80028ac:	2300      	movs	r3, #0
 80028ae:	60bb      	str	r3, [r7, #8]
 80028b0:	4b27      	ldr	r3, [pc, #156]	@ (8002950 <SystemClock_Config+0xc8>)
 80028b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028b4:	4a26      	ldr	r2, [pc, #152]	@ (8002950 <SystemClock_Config+0xc8>)
 80028b6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80028ba:	6413      	str	r3, [r2, #64]	@ 0x40
 80028bc:	4b24      	ldr	r3, [pc, #144]	@ (8002950 <SystemClock_Config+0xc8>)
 80028be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028c0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80028c4:	60bb      	str	r3, [r7, #8]
 80028c6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80028c8:	2300      	movs	r3, #0
 80028ca:	607b      	str	r3, [r7, #4]
 80028cc:	4b21      	ldr	r3, [pc, #132]	@ (8002954 <SystemClock_Config+0xcc>)
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	4a20      	ldr	r2, [pc, #128]	@ (8002954 <SystemClock_Config+0xcc>)
 80028d2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80028d6:	6013      	str	r3, [r2, #0]
 80028d8:	4b1e      	ldr	r3, [pc, #120]	@ (8002954 <SystemClock_Config+0xcc>)
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80028e0:	607b      	str	r3, [r7, #4]
 80028e2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80028e4:	2302      	movs	r3, #2
 80028e6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80028e8:	2301      	movs	r3, #1
 80028ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80028ec:	2310      	movs	r3, #16
 80028ee:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80028f0:	2302      	movs	r3, #2
 80028f2:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80028f4:	2300      	movs	r3, #0
 80028f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80028f8:	2308      	movs	r3, #8
 80028fa:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 80028fc:	2364      	movs	r3, #100	@ 0x64
 80028fe:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002900:	2302      	movs	r3, #2
 8002902:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8002904:	2307      	movs	r3, #7
 8002906:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002908:	f107 0320 	add.w	r3, r7, #32
 800290c:	4618      	mov	r0, r3
 800290e:	f004 ff67 	bl	80077e0 <HAL_RCC_OscConfig>
 8002912:	4603      	mov	r3, r0
 8002914:	2b00      	cmp	r3, #0
 8002916:	d001      	beq.n	800291c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8002918:	f000 f83e 	bl	8002998 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800291c:	230f      	movs	r3, #15
 800291e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002920:	2302      	movs	r3, #2
 8002922:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002924:	2300      	movs	r3, #0
 8002926:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002928:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800292c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800292e:	2300      	movs	r3, #0
 8002930:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8002932:	f107 030c 	add.w	r3, r7, #12
 8002936:	2103      	movs	r1, #3
 8002938:	4618      	mov	r0, r3
 800293a:	f005 f9c9 	bl	8007cd0 <HAL_RCC_ClockConfig>
 800293e:	4603      	mov	r3, r0
 8002940:	2b00      	cmp	r3, #0
 8002942:	d001      	beq.n	8002948 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8002944:	f000 f828 	bl	8002998 <Error_Handler>
  }
}
 8002948:	bf00      	nop
 800294a:	3750      	adds	r7, #80	@ 0x50
 800294c:	46bd      	mov	sp, r7
 800294e:	bd80      	pop	{r7, pc}
 8002950:	40023800 	.word	0x40023800
 8002954:	40007000 	.word	0x40007000

08002958 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8002958:	b580      	push	{r7, lr}
 800295a:	b086      	sub	sp, #24
 800295c:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800295e:	463b      	mov	r3, r7
 8002960:	2200      	movs	r2, #0
 8002962:	601a      	str	r2, [r3, #0]
 8002964:	605a      	str	r2, [r3, #4]
 8002966:	609a      	str	r2, [r3, #8]
 8002968:	60da      	str	r2, [r3, #12]
 800296a:	611a      	str	r2, [r3, #16]
 800296c:	615a      	str	r2, [r3, #20]

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 800296e:	2301      	movs	r3, #1
 8002970:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8002972:	23c0      	movs	r3, #192	@ 0xc0
 8002974:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLLI2S.PLLI2SM = 16;
 8002976:	2310      	movs	r3, #16
 8002978:	607b      	str	r3, [r7, #4]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 800297a:	2302      	movs	r3, #2
 800297c:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800297e:	463b      	mov	r3, r7
 8002980:	4618      	mov	r0, r3
 8002982:	f005 fbc5 	bl	8008110 <HAL_RCCEx_PeriphCLKConfig>
 8002986:	4603      	mov	r3, r0
 8002988:	2b00      	cmp	r3, #0
 800298a:	d001      	beq.n	8002990 <PeriphCommonClock_Config+0x38>
  {
    Error_Handler();
 800298c:	f000 f804 	bl	8002998 <Error_Handler>
  }
}
 8002990:	bf00      	nop
 8002992:	3718      	adds	r7, #24
 8002994:	46bd      	mov	sp, r7
 8002996:	bd80      	pop	{r7, pc}

08002998 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002998:	b480      	push	{r7}
 800299a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800299c:	b672      	cpsid	i
}
 800299e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80029a0:	bf00      	nop
 80029a2:	e7fd      	b.n	80029a0 <Error_Handler+0x8>

080029a4 <InitOscState>:
extern TIM_HandleTypeDef htim3;
extern TIM_HandleTypeDef htim4;
extern TIM_HandleTypeDef htim10;

void InitOscState(void)
{
 80029a4:	b580      	push	{r7, lr}
 80029a6:	b0c6      	sub	sp, #280	@ 0x118
 80029a8:	af04      	add	r7, sp, #16

	  frames_ticks = HAL_GetTick();
 80029aa:	f002 fdcd 	bl	8005548 <HAL_GetTick>
 80029ae:	4603      	mov	r3, r0
 80029b0:	4a73      	ldr	r2, [pc, #460]	@ (8002b80 <InitOscState+0x1dc>)
 80029b2:	6013      	str	r3, [r2, #0]

	  for (uint16_t i = 0; i < 280; i++) {
 80029b4:	2300      	movs	r3, #0
 80029b6:	f8a7 3106 	strh.w	r3, [r7, #262]	@ 0x106
 80029ba:	e01e      	b.n	80029fa <InitOscState+0x56>
		  pixel_dirty0[i][0] = 0;
 80029bc:	f8b7 3106 	ldrh.w	r3, [r7, #262]	@ 0x106
 80029c0:	4a70      	ldr	r2, [pc, #448]	@ (8002b84 <InitOscState+0x1e0>)
 80029c2:	2100      	movs	r1, #0
 80029c4:	f822 1023 	strh.w	r1, [r2, r3, lsl #2]
		  pixel_dirty0[i][1] = 0;
 80029c8:	f8b7 3106 	ldrh.w	r3, [r7, #262]	@ 0x106
 80029cc:	4a6d      	ldr	r2, [pc, #436]	@ (8002b84 <InitOscState+0x1e0>)
 80029ce:	009b      	lsls	r3, r3, #2
 80029d0:	4413      	add	r3, r2
 80029d2:	2200      	movs	r2, #0
 80029d4:	805a      	strh	r2, [r3, #2]
		  pixel_dirty1[i][0] = 0;
 80029d6:	f8b7 3106 	ldrh.w	r3, [r7, #262]	@ 0x106
 80029da:	4a6b      	ldr	r2, [pc, #428]	@ (8002b88 <InitOscState+0x1e4>)
 80029dc:	2100      	movs	r1, #0
 80029de:	f822 1023 	strh.w	r1, [r2, r3, lsl #2]
		  pixel_dirty1[i][1] = 0;
 80029e2:	f8b7 3106 	ldrh.w	r3, [r7, #262]	@ 0x106
 80029e6:	4a68      	ldr	r2, [pc, #416]	@ (8002b88 <InitOscState+0x1e4>)
 80029e8:	009b      	lsls	r3, r3, #2
 80029ea:	4413      	add	r3, r2
 80029ec:	2200      	movs	r2, #0
 80029ee:	805a      	strh	r2, [r3, #2]
	  for (uint16_t i = 0; i < 280; i++) {
 80029f0:	f8b7 3106 	ldrh.w	r3, [r7, #262]	@ 0x106
 80029f4:	3301      	adds	r3, #1
 80029f6:	f8a7 3106 	strh.w	r3, [r7, #262]	@ 0x106
 80029fa:	f8b7 3106 	ldrh.w	r3, [r7, #262]	@ 0x106
 80029fe:	f5b3 7f8c 	cmp.w	r3, #280	@ 0x118
 8002a02:	d3db      	bcc.n	80029bc <InitOscState+0x18>
	  }

	  // Display init
	   display.spi             = &hspi5;
 8002a04:	4b61      	ldr	r3, [pc, #388]	@ (8002b8c <InitOscState+0x1e8>)
 8002a06:	4a62      	ldr	r2, [pc, #392]	@ (8002b90 <InitOscState+0x1ec>)
 8002a08:	601a      	str	r2, [r3, #0]
	   display.cs_gpio_port    = ILI9341_CS_GPIO_Port;
 8002a0a:	4b60      	ldr	r3, [pc, #384]	@ (8002b8c <InitOscState+0x1e8>)
 8002a0c:	4a61      	ldr	r2, [pc, #388]	@ (8002b94 <InitOscState+0x1f0>)
 8002a0e:	605a      	str	r2, [r3, #4]
	   display.dc_gpio_port    = ILI9341_DC_GPIO_Port;
 8002a10:	4b5e      	ldr	r3, [pc, #376]	@ (8002b8c <InitOscState+0x1e8>)
 8002a12:	4a61      	ldr	r2, [pc, #388]	@ (8002b98 <InitOscState+0x1f4>)
 8002a14:	609a      	str	r2, [r3, #8]
	   display.reset_gpio_port = ILI9341_RESET_GPIO_Port;
 8002a16:	4b5d      	ldr	r3, [pc, #372]	@ (8002b8c <InitOscState+0x1e8>)
 8002a18:	4a5f      	ldr	r2, [pc, #380]	@ (8002b98 <InitOscState+0x1f4>)
 8002a1a:	60da      	str	r2, [r3, #12]
	   display.cs_pin          = ILI9341_CS_Pin;
 8002a1c:	4b5b      	ldr	r3, [pc, #364]	@ (8002b8c <InitOscState+0x1e8>)
 8002a1e:	2202      	movs	r2, #2
 8002a20:	821a      	strh	r2, [r3, #16]
	   display.dc_pin          = ILI9341_DC_Pin;
 8002a22:	4b5a      	ldr	r3, [pc, #360]	@ (8002b8c <InitOscState+0x1e8>)
 8002a24:	2201      	movs	r2, #1
 8002a26:	825a      	strh	r2, [r3, #18]
	   display.reset_pin       = ILI9341_RESET_Pin;
 8002a28:	4b58      	ldr	r3, [pc, #352]	@ (8002b8c <InitOscState+0x1e8>)
 8002a2a:	2202      	movs	r2, #2
 8002a2c:	829a      	strh	r2, [r3, #20]
	   display.width           = 320;
 8002a2e:	4b57      	ldr	r3, [pc, #348]	@ (8002b8c <InitOscState+0x1e8>)
 8002a30:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8002a34:	82da      	strh	r2, [r3, #22]
	   display.height          = 240;
 8002a36:	4b55      	ldr	r3, [pc, #340]	@ (8002b8c <InitOscState+0x1e8>)
 8002a38:	22f0      	movs	r2, #240	@ 0xf0
 8002a3a:	831a      	strh	r2, [r3, #24]
	   display.orientation     = ILI9341_ORIENTATION_ROTATE_RIGHT;
 8002a3c:	4b53      	ldr	r3, [pc, #332]	@ (8002b8c <InitOscState+0x1e8>)
 8002a3e:	22e8      	movs	r2, #232	@ 0xe8
 8002a40:	769a      	strb	r2, [r3, #26]

	   ILI9341_UNSELECT(&display);
 8002a42:	4b52      	ldr	r3, [pc, #328]	@ (8002b8c <InitOscState+0x1e8>)
 8002a44:	8a1a      	ldrh	r2, [r3, #16]
 8002a46:	4b51      	ldr	r3, [pc, #324]	@ (8002b8c <InitOscState+0x1e8>)
 8002a48:	685b      	ldr	r3, [r3, #4]
 8002a4a:	619a      	str	r2, [r3, #24]
	   ILI9341_Init(&display);
 8002a4c:	484f      	ldr	r0, [pc, #316]	@ (8002b8c <InitOscState+0x1e8>)
 8002a4e:	f7fe ffb3 	bl	80019b8 <ILI9341_Init>

		  // Local vars
		  char string[255];

	  // Dispaly freq. (for debug)
	  ILI9341_FillScreen(&display, ILI9341_BLACK);
 8002a52:	2100      	movs	r1, #0
 8002a54:	484d      	ldr	r0, [pc, #308]	@ (8002b8c <InitOscState+0x1e8>)
 8002a56:	f7ff f9fc 	bl	8001e52 <ILI9341_FillScreen>

	  snprintf(string, 255, "Oscilloscope");
 8002a5a:	1d3b      	adds	r3, r7, #4
 8002a5c:	4a4f      	ldr	r2, [pc, #316]	@ (8002b9c <InitOscState+0x1f8>)
 8002a5e:	21ff      	movs	r1, #255	@ 0xff
 8002a60:	4618      	mov	r0, r3
 8002a62:	f009 ff7d 	bl	800c960 <sniprintf>
	  ILI9341_WriteString(&display, 0, 18 * 0, string, Font_11x18, ILI9341_BLACK, ILI9341_WHITE);
 8002a66:	1d3b      	adds	r3, r7, #4
 8002a68:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002a6c:	9203      	str	r2, [sp, #12]
 8002a6e:	2200      	movs	r2, #0
 8002a70:	9202      	str	r2, [sp, #8]
 8002a72:	494b      	ldr	r1, [pc, #300]	@ (8002ba0 <InitOscState+0x1fc>)
 8002a74:	466a      	mov	r2, sp
 8002a76:	c903      	ldmia	r1, {r0, r1}
 8002a78:	e882 0003 	stmia.w	r2, {r0, r1}
 8002a7c:	2200      	movs	r2, #0
 8002a7e:	2100      	movs	r1, #0
 8002a80:	4842      	ldr	r0, [pc, #264]	@ (8002b8c <InitOscState+0x1e8>)
 8002a82:	f7ff fb30 	bl	80020e6 <ILI9341_WriteString>

	  snprintf(string, 255, "SYCLK = %ldMHz", HAL_RCC_GetSysClockFreq()/1000000);
 8002a86:	f005 fa09 	bl	8007e9c <HAL_RCC_GetSysClockFreq>
 8002a8a:	4603      	mov	r3, r0
 8002a8c:	4a45      	ldr	r2, [pc, #276]	@ (8002ba4 <InitOscState+0x200>)
 8002a8e:	fba2 2303 	umull	r2, r3, r2, r3
 8002a92:	0c9b      	lsrs	r3, r3, #18
 8002a94:	1d38      	adds	r0, r7, #4
 8002a96:	4a44      	ldr	r2, [pc, #272]	@ (8002ba8 <InitOscState+0x204>)
 8002a98:	21ff      	movs	r1, #255	@ 0xff
 8002a9a:	f009 ff61 	bl	800c960 <sniprintf>
	  ILI9341_WriteString(&display, 0, 18 * 1, string, Font_11x18, ILI9341_BLACK, ILI9341_WHITE);
 8002a9e:	1d3b      	adds	r3, r7, #4
 8002aa0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002aa4:	9203      	str	r2, [sp, #12]
 8002aa6:	2200      	movs	r2, #0
 8002aa8:	9202      	str	r2, [sp, #8]
 8002aaa:	493d      	ldr	r1, [pc, #244]	@ (8002ba0 <InitOscState+0x1fc>)
 8002aac:	466a      	mov	r2, sp
 8002aae:	c903      	ldmia	r1, {r0, r1}
 8002ab0:	e882 0003 	stmia.w	r2, {r0, r1}
 8002ab4:	2212      	movs	r2, #18
 8002ab6:	2100      	movs	r1, #0
 8002ab8:	4834      	ldr	r0, [pc, #208]	@ (8002b8c <InitOscState+0x1e8>)
 8002aba:	f7ff fb14 	bl	80020e6 <ILI9341_WriteString>

	  snprintf(string, 255, "HCLK  = %ldMHz", HAL_RCC_GetHCLKFreq()/1000000);
 8002abe:	f005 faf3 	bl	80080a8 <HAL_RCC_GetHCLKFreq>
 8002ac2:	4603      	mov	r3, r0
 8002ac4:	4a37      	ldr	r2, [pc, #220]	@ (8002ba4 <InitOscState+0x200>)
 8002ac6:	fba2 2303 	umull	r2, r3, r2, r3
 8002aca:	0c9b      	lsrs	r3, r3, #18
 8002acc:	1d38      	adds	r0, r7, #4
 8002ace:	4a37      	ldr	r2, [pc, #220]	@ (8002bac <InitOscState+0x208>)
 8002ad0:	21ff      	movs	r1, #255	@ 0xff
 8002ad2:	f009 ff45 	bl	800c960 <sniprintf>
	  ILI9341_WriteString(&display, 0, 18 * 2, string, Font_11x18, ILI9341_BLACK, ILI9341_WHITE);
 8002ad6:	1d3b      	adds	r3, r7, #4
 8002ad8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002adc:	9203      	str	r2, [sp, #12]
 8002ade:	2200      	movs	r2, #0
 8002ae0:	9202      	str	r2, [sp, #8]
 8002ae2:	492f      	ldr	r1, [pc, #188]	@ (8002ba0 <InitOscState+0x1fc>)
 8002ae4:	466a      	mov	r2, sp
 8002ae6:	c903      	ldmia	r1, {r0, r1}
 8002ae8:	e882 0003 	stmia.w	r2, {r0, r1}
 8002aec:	2224      	movs	r2, #36	@ 0x24
 8002aee:	2100      	movs	r1, #0
 8002af0:	4826      	ldr	r0, [pc, #152]	@ (8002b8c <InitOscState+0x1e8>)
 8002af2:	f7ff faf8 	bl	80020e6 <ILI9341_WriteString>

	  snprintf(string, 255, "APB1  = %ldMHz", HAL_RCC_GetPCLK1Freq()/1000000);
 8002af6:	f005 fae3 	bl	80080c0 <HAL_RCC_GetPCLK1Freq>
 8002afa:	4603      	mov	r3, r0
 8002afc:	4a29      	ldr	r2, [pc, #164]	@ (8002ba4 <InitOscState+0x200>)
 8002afe:	fba2 2303 	umull	r2, r3, r2, r3
 8002b02:	0c9b      	lsrs	r3, r3, #18
 8002b04:	1d38      	adds	r0, r7, #4
 8002b06:	4a2a      	ldr	r2, [pc, #168]	@ (8002bb0 <InitOscState+0x20c>)
 8002b08:	21ff      	movs	r1, #255	@ 0xff
 8002b0a:	f009 ff29 	bl	800c960 <sniprintf>
	  ILI9341_WriteString(&display, 0, 18 * 3, string, Font_11x18, ILI9341_BLACK, ILI9341_WHITE);
 8002b0e:	1d3b      	adds	r3, r7, #4
 8002b10:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002b14:	9203      	str	r2, [sp, #12]
 8002b16:	2200      	movs	r2, #0
 8002b18:	9202      	str	r2, [sp, #8]
 8002b1a:	4921      	ldr	r1, [pc, #132]	@ (8002ba0 <InitOscState+0x1fc>)
 8002b1c:	466a      	mov	r2, sp
 8002b1e:	c903      	ldmia	r1, {r0, r1}
 8002b20:	e882 0003 	stmia.w	r2, {r0, r1}
 8002b24:	2236      	movs	r2, #54	@ 0x36
 8002b26:	2100      	movs	r1, #0
 8002b28:	4818      	ldr	r0, [pc, #96]	@ (8002b8c <InitOscState+0x1e8>)
 8002b2a:	f7ff fadc 	bl	80020e6 <ILI9341_WriteString>

	  snprintf(string, 255, "APB2  = %ldMHz", HAL_RCC_GetPCLK2Freq()/1000000);
 8002b2e:	f005 fadb 	bl	80080e8 <HAL_RCC_GetPCLK2Freq>
 8002b32:	4603      	mov	r3, r0
 8002b34:	4a1b      	ldr	r2, [pc, #108]	@ (8002ba4 <InitOscState+0x200>)
 8002b36:	fba2 2303 	umull	r2, r3, r2, r3
 8002b3a:	0c9b      	lsrs	r3, r3, #18
 8002b3c:	1d38      	adds	r0, r7, #4
 8002b3e:	4a1d      	ldr	r2, [pc, #116]	@ (8002bb4 <InitOscState+0x210>)
 8002b40:	21ff      	movs	r1, #255	@ 0xff
 8002b42:	f009 ff0d 	bl	800c960 <sniprintf>
	  ILI9341_WriteString(&display, 0, 18 * 4, string, Font_11x18, ILI9341_BLACK, ILI9341_WHITE);
 8002b46:	1d3b      	adds	r3, r7, #4
 8002b48:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002b4c:	9203      	str	r2, [sp, #12]
 8002b4e:	2200      	movs	r2, #0
 8002b50:	9202      	str	r2, [sp, #8]
 8002b52:	4913      	ldr	r1, [pc, #76]	@ (8002ba0 <InitOscState+0x1fc>)
 8002b54:	466a      	mov	r2, sp
 8002b56:	c903      	ldmia	r1, {r0, r1}
 8002b58:	e882 0003 	stmia.w	r2, {r0, r1}
 8002b5c:	2248      	movs	r2, #72	@ 0x48
 8002b5e:	2100      	movs	r1, #0
 8002b60:	480a      	ldr	r0, [pc, #40]	@ (8002b8c <InitOscState+0x1e8>)
 8002b62:	f7ff fac0 	bl	80020e6 <ILI9341_WriteString>

	  HAL_Delay(1000);
 8002b66:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002b6a:	f002 fcf9 	bl	8005560 <HAL_Delay>
	  ILI9341_FillScreen(&display, ILI9341_BLACK);
 8002b6e:	2100      	movs	r1, #0
 8002b70:	4806      	ldr	r0, [pc, #24]	@ (8002b8c <InitOscState+0x1e8>)
 8002b72:	f7ff f96e 	bl	8001e52 <ILI9341_FillScreen>
}
 8002b76:	bf00      	nop
 8002b78:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 8002b7c:	46bd      	mov	sp, r7
 8002b7e:	bd80      	pop	{r7, pc}
 8002b80:	2001353c 	.word	0x2001353c
 8002b84:	20013540 	.word	0x20013540
 8002b88:	200139a0 	.word	0x200139a0
 8002b8c:	2000d4b8 	.word	0x2000d4b8
 8002b90:	20013e64 	.word	0x20013e64
 8002b94:	40020400 	.word	0x40020400
 8002b98:	40020800 	.word	0x40020800
 8002b9c:	080103d8 	.word	0x080103d8
 8002ba0:	20000008 	.word	0x20000008
 8002ba4:	431bde83 	.word	0x431bde83
 8002ba8:	080103e8 	.word	0x080103e8
 8002bac:	080103f8 	.word	0x080103f8
 8002bb0:	08010408 	.word	0x08010408
 8002bb4:	08010418 	.word	0x08010418

08002bb8 <drawAxis>:


static void drawAxis(ILI9341TypeDef *display)
{
 8002bb8:	b580      	push	{r7, lr}
 8002bba:	b088      	sub	sp, #32
 8002bbc:	af02      	add	r7, sp, #8
 8002bbe:	6078      	str	r0, [r7, #4]
	for (uint16_t i = 0; i < 9; i++) {
 8002bc0:	2300      	movs	r3, #0
 8002bc2:	82fb      	strh	r3, [r7, #22]
 8002bc4:	e034      	b.n	8002c30 <drawAxis+0x78>
		uint16_t y = 20 + 25 * i;
 8002bc6:	8afb      	ldrh	r3, [r7, #22]
 8002bc8:	461a      	mov	r2, r3
 8002bca:	0092      	lsls	r2, r2, #2
 8002bcc:	4413      	add	r3, r2
 8002bce:	461a      	mov	r2, r3
 8002bd0:	0091      	lsls	r1, r2, #2
 8002bd2:	461a      	mov	r2, r3
 8002bd4:	460b      	mov	r3, r1
 8002bd6:	4413      	add	r3, r2
 8002bd8:	b29b      	uxth	r3, r3
 8002bda:	3314      	adds	r3, #20
 8002bdc:	81bb      	strh	r3, [r7, #12]

		if (i == 0 || i == 8) {
 8002bde:	8afb      	ldrh	r3, [r7, #22]
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d002      	beq.n	8002bea <drawAxis+0x32>
 8002be4:	8afb      	ldrh	r3, [r7, #22]
 8002be6:	2b08      	cmp	r3, #8
 8002be8:	d10c      	bne.n	8002c04 <drawAxis+0x4c>
			ILI9341_FillRectangle(display, 20, y, 276, 1, ILI9341_WHITE);
 8002bea:	89ba      	ldrh	r2, [r7, #12]
 8002bec:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002bf0:	9301      	str	r3, [sp, #4]
 8002bf2:	2301      	movs	r3, #1
 8002bf4:	9300      	str	r3, [sp, #0]
 8002bf6:	f44f 738a 	mov.w	r3, #276	@ 0x114
 8002bfa:	2114      	movs	r1, #20
 8002bfc:	6878      	ldr	r0, [r7, #4]
 8002bfe:	f7ff f95a 	bl	8001eb6 <ILI9341_FillRectangle>
			continue;
 8002c02:	e012      	b.n	8002c2a <drawAxis+0x72>
		}

		for (uint16_t j = 0; j < 276; j += 2)
 8002c04:	2300      	movs	r3, #0
 8002c06:	82bb      	strh	r3, [r7, #20]
 8002c08:	e00b      	b.n	8002c22 <drawAxis+0x6a>
			ILI9341_DrawPixel(display, 20 + j, y, ILI9341_GRAY);
 8002c0a:	8abb      	ldrh	r3, [r7, #20]
 8002c0c:	3314      	adds	r3, #20
 8002c0e:	b299      	uxth	r1, r3
 8002c10:	89ba      	ldrh	r2, [r7, #12]
 8002c12:	f245 238a 	movw	r3, #21130	@ 0x528a
 8002c16:	6878      	ldr	r0, [r7, #4]
 8002c18:	f7ff f842 	bl	8001ca0 <ILI9341_DrawPixel>
		for (uint16_t j = 0; j < 276; j += 2)
 8002c1c:	8abb      	ldrh	r3, [r7, #20]
 8002c1e:	3302      	adds	r3, #2
 8002c20:	82bb      	strh	r3, [r7, #20]
 8002c22:	8abb      	ldrh	r3, [r7, #20]
 8002c24:	f5b3 7f8a 	cmp.w	r3, #276	@ 0x114
 8002c28:	d3ef      	bcc.n	8002c0a <drawAxis+0x52>
	for (uint16_t i = 0; i < 9; i++) {
 8002c2a:	8afb      	ldrh	r3, [r7, #22]
 8002c2c:	3301      	adds	r3, #1
 8002c2e:	82fb      	strh	r3, [r7, #22]
 8002c30:	8afb      	ldrh	r3, [r7, #22]
 8002c32:	2b08      	cmp	r3, #8
 8002c34:	d9c7      	bls.n	8002bc6 <drawAxis+0xe>
	}

	for (uint16_t i = 0; i < 12; i++) {
 8002c36:	2300      	movs	r3, #0
 8002c38:	827b      	strh	r3, [r7, #18]
 8002c3a:	e032      	b.n	8002ca2 <drawAxis+0xea>
		uint16_t x = 20 + 25 * i;
 8002c3c:	8a7b      	ldrh	r3, [r7, #18]
 8002c3e:	461a      	mov	r2, r3
 8002c40:	0092      	lsls	r2, r2, #2
 8002c42:	4413      	add	r3, r2
 8002c44:	461a      	mov	r2, r3
 8002c46:	0091      	lsls	r1, r2, #2
 8002c48:	461a      	mov	r2, r3
 8002c4a:	460b      	mov	r3, r1
 8002c4c:	4413      	add	r3, r2
 8002c4e:	b29b      	uxth	r3, r3
 8002c50:	3314      	adds	r3, #20
 8002c52:	81fb      	strh	r3, [r7, #14]

		if (i == 0 || i == 11) {
 8002c54:	8a7b      	ldrh	r3, [r7, #18]
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d002      	beq.n	8002c60 <drawAxis+0xa8>
 8002c5a:	8a7b      	ldrh	r3, [r7, #18]
 8002c5c:	2b0b      	cmp	r3, #11
 8002c5e:	d10b      	bne.n	8002c78 <drawAxis+0xc0>
			ILI9341_FillRectangle(display, x, 20, 1, 200, ILI9341_WHITE);
 8002c60:	89f9      	ldrh	r1, [r7, #14]
 8002c62:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002c66:	9301      	str	r3, [sp, #4]
 8002c68:	23c8      	movs	r3, #200	@ 0xc8
 8002c6a:	9300      	str	r3, [sp, #0]
 8002c6c:	2301      	movs	r3, #1
 8002c6e:	2214      	movs	r2, #20
 8002c70:	6878      	ldr	r0, [r7, #4]
 8002c72:	f7ff f920 	bl	8001eb6 <ILI9341_FillRectangle>
			continue;
 8002c76:	e011      	b.n	8002c9c <drawAxis+0xe4>
		}

		for (uint16_t j = 0; j < 200; j += 2)
 8002c78:	2300      	movs	r3, #0
 8002c7a:	823b      	strh	r3, [r7, #16]
 8002c7c:	e00b      	b.n	8002c96 <drawAxis+0xde>
			ILI9341_DrawPixel(display, x, 20 + j, ILI9341_GRAY);
 8002c7e:	8a3b      	ldrh	r3, [r7, #16]
 8002c80:	3314      	adds	r3, #20
 8002c82:	b29a      	uxth	r2, r3
 8002c84:	89f9      	ldrh	r1, [r7, #14]
 8002c86:	f245 238a 	movw	r3, #21130	@ 0x528a
 8002c8a:	6878      	ldr	r0, [r7, #4]
 8002c8c:	f7ff f808 	bl	8001ca0 <ILI9341_DrawPixel>
		for (uint16_t j = 0; j < 200; j += 2)
 8002c90:	8a3b      	ldrh	r3, [r7, #16]
 8002c92:	3302      	adds	r3, #2
 8002c94:	823b      	strh	r3, [r7, #16]
 8002c96:	8a3b      	ldrh	r3, [r7, #16]
 8002c98:	2bc7      	cmp	r3, #199	@ 0xc7
 8002c9a:	d9f0      	bls.n	8002c7e <drawAxis+0xc6>
	for (uint16_t i = 0; i < 12; i++) {
 8002c9c:	8a7b      	ldrh	r3, [r7, #18]
 8002c9e:	3301      	adds	r3, #1
 8002ca0:	827b      	strh	r3, [r7, #18]
 8002ca2:	8a7b      	ldrh	r3, [r7, #18]
 8002ca4:	2b0b      	cmp	r3, #11
 8002ca6:	d9c9      	bls.n	8002c3c <drawAxis+0x84>
	}
}
 8002ca8:	bf00      	nop
 8002caa:	bf00      	nop
 8002cac:	3718      	adds	r7, #24
 8002cae:	46bd      	mov	sp, r7
 8002cb0:	bd80      	pop	{r7, pc}

08002cb2 <clearCursor>:

static void clearCursor(ILI9341TypeDef *display, uint16_t pos)
{
 8002cb2:	b580      	push	{r7, lr}
 8002cb4:	b084      	sub	sp, #16
 8002cb6:	af02      	add	r7, sp, #8
 8002cb8:	6078      	str	r0, [r7, #4]
 8002cba:	460b      	mov	r3, r1
 8002cbc:	807b      	strh	r3, [r7, #2]
	ILI9341_FillRectangle(display, 0, pos - 6, 20, 11, ILI9341_BLACK);
 8002cbe:	887b      	ldrh	r3, [r7, #2]
 8002cc0:	3b06      	subs	r3, #6
 8002cc2:	b29a      	uxth	r2, r3
 8002cc4:	2300      	movs	r3, #0
 8002cc6:	9301      	str	r3, [sp, #4]
 8002cc8:	230b      	movs	r3, #11
 8002cca:	9300      	str	r3, [sp, #0]
 8002ccc:	2314      	movs	r3, #20
 8002cce:	2100      	movs	r1, #0
 8002cd0:	6878      	ldr	r0, [r7, #4]
 8002cd2:	f7ff f8f0 	bl	8001eb6 <ILI9341_FillRectangle>
}
 8002cd6:	bf00      	nop
 8002cd8:	3708      	adds	r7, #8
 8002cda:	46bd      	mov	sp, r7
 8002cdc:	bd80      	pop	{r7, pc}

08002cde <clearTrigger>:

static void clearTrigger(ILI9341TypeDef *display, uint16_t pos)
{
 8002cde:	b580      	push	{r7, lr}
 8002ce0:	b084      	sub	sp, #16
 8002ce2:	af02      	add	r7, sp, #8
 8002ce4:	6078      	str	r0, [r7, #4]
 8002ce6:	460b      	mov	r3, r1
 8002ce8:	807b      	strh	r3, [r7, #2]
	ILI9341_FillRectangle(display, 296, pos - 6, 20, 11, ILI9341_BLACK);
 8002cea:	887b      	ldrh	r3, [r7, #2]
 8002cec:	3b06      	subs	r3, #6
 8002cee:	b29a      	uxth	r2, r3
 8002cf0:	2300      	movs	r3, #0
 8002cf2:	9301      	str	r3, [sp, #4]
 8002cf4:	230b      	movs	r3, #11
 8002cf6:	9300      	str	r3, [sp, #0]
 8002cf8:	2314      	movs	r3, #20
 8002cfa:	f44f 7194 	mov.w	r1, #296	@ 0x128
 8002cfe:	6878      	ldr	r0, [r7, #4]
 8002d00:	f7ff f8d9 	bl	8001eb6 <ILI9341_FillRectangle>
}
 8002d04:	bf00      	nop
 8002d06:	3708      	adds	r7, #8
 8002d08:	46bd      	mov	sp, r7
 8002d0a:	bd80      	pop	{r7, pc}

08002d0c <drawCursor>:

static void drawCursor(ILI9341TypeDef *display, uint16_t pos, char *name, uint16_t color)
{
 8002d0c:	b580      	push	{r7, lr}
 8002d0e:	b08a      	sub	sp, #40	@ 0x28
 8002d10:	af04      	add	r7, sp, #16
 8002d12:	60f8      	str	r0, [r7, #12]
 8002d14:	607a      	str	r2, [r7, #4]
 8002d16:	461a      	mov	r2, r3
 8002d18:	460b      	mov	r3, r1
 8002d1a:	817b      	strh	r3, [r7, #10]
 8002d1c:	4613      	mov	r3, r2
 8002d1e:	813b      	strh	r3, [r7, #8]
	ILI9341_FillRectangle(display, 0, pos - 6, 7 * 2, 1, color);
 8002d20:	897b      	ldrh	r3, [r7, #10]
 8002d22:	3b06      	subs	r3, #6
 8002d24:	b29a      	uxth	r2, r3
 8002d26:	893b      	ldrh	r3, [r7, #8]
 8002d28:	9301      	str	r3, [sp, #4]
 8002d2a:	2301      	movs	r3, #1
 8002d2c:	9300      	str	r3, [sp, #0]
 8002d2e:	230e      	movs	r3, #14
 8002d30:	2100      	movs	r1, #0
 8002d32:	68f8      	ldr	r0, [r7, #12]
 8002d34:	f7ff f8bf 	bl	8001eb6 <ILI9341_FillRectangle>
	ILI9341_WriteString(display, 0, pos - 5, name, Font_7x10, ILI9341_BLACK, color);
 8002d38:	897b      	ldrh	r3, [r7, #10]
 8002d3a:	3b05      	subs	r3, #5
 8002d3c:	b29a      	uxth	r2, r3
 8002d3e:	893b      	ldrh	r3, [r7, #8]
 8002d40:	9303      	str	r3, [sp, #12]
 8002d42:	2300      	movs	r3, #0
 8002d44:	9302      	str	r3, [sp, #8]
 8002d46:	4919      	ldr	r1, [pc, #100]	@ (8002dac <drawCursor+0xa0>)
 8002d48:	466b      	mov	r3, sp
 8002d4a:	c903      	ldmia	r1, {r0, r1}
 8002d4c:	e883 0003 	stmia.w	r3, {r0, r1}
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	2100      	movs	r1, #0
 8002d54:	68f8      	ldr	r0, [r7, #12]
 8002d56:	f7ff f9c6 	bl	80020e6 <ILI9341_WriteString>

	for (uint8_t i = 0; i < 6; i++) {
 8002d5a:	2300      	movs	r3, #0
 8002d5c:	75fb      	strb	r3, [r7, #23]
 8002d5e:	e01d      	b.n	8002d9c <drawCursor+0x90>
		for (uint8_t j = i; j < 11 - i; j++)
 8002d60:	7dfb      	ldrb	r3, [r7, #23]
 8002d62:	75bb      	strb	r3, [r7, #22]
 8002d64:	e011      	b.n	8002d8a <drawCursor+0x7e>
			ILI9341_DrawPixel(display, 14 + i, pos - 6 + j, color);
 8002d66:	7dfb      	ldrb	r3, [r7, #23]
 8002d68:	b29b      	uxth	r3, r3
 8002d6a:	330e      	adds	r3, #14
 8002d6c:	b299      	uxth	r1, r3
 8002d6e:	7dbb      	ldrb	r3, [r7, #22]
 8002d70:	b29a      	uxth	r2, r3
 8002d72:	897b      	ldrh	r3, [r7, #10]
 8002d74:	4413      	add	r3, r2
 8002d76:	b29b      	uxth	r3, r3
 8002d78:	3b06      	subs	r3, #6
 8002d7a:	b29a      	uxth	r2, r3
 8002d7c:	893b      	ldrh	r3, [r7, #8]
 8002d7e:	68f8      	ldr	r0, [r7, #12]
 8002d80:	f7fe ff8e 	bl	8001ca0 <ILI9341_DrawPixel>
		for (uint8_t j = i; j < 11 - i; j++)
 8002d84:	7dbb      	ldrb	r3, [r7, #22]
 8002d86:	3301      	adds	r3, #1
 8002d88:	75bb      	strb	r3, [r7, #22]
 8002d8a:	7dba      	ldrb	r2, [r7, #22]
 8002d8c:	7dfb      	ldrb	r3, [r7, #23]
 8002d8e:	f1c3 030b 	rsb	r3, r3, #11
 8002d92:	429a      	cmp	r2, r3
 8002d94:	dbe7      	blt.n	8002d66 <drawCursor+0x5a>
	for (uint8_t i = 0; i < 6; i++) {
 8002d96:	7dfb      	ldrb	r3, [r7, #23]
 8002d98:	3301      	adds	r3, #1
 8002d9a:	75fb      	strb	r3, [r7, #23]
 8002d9c:	7dfb      	ldrb	r3, [r7, #23]
 8002d9e:	2b05      	cmp	r3, #5
 8002da0:	d9de      	bls.n	8002d60 <drawCursor+0x54>
	}
}
 8002da2:	bf00      	nop
 8002da4:	bf00      	nop
 8002da6:	3718      	adds	r7, #24
 8002da8:	46bd      	mov	sp, r7
 8002daa:	bd80      	pop	{r7, pc}
 8002dac:	20000000 	.word	0x20000000

08002db0 <drawTrigger>:

static void drawTrigger(ILI9341TypeDef *display, uint16_t pos, char *name, uint16_t color)
{
 8002db0:	b580      	push	{r7, lr}
 8002db2:	b08a      	sub	sp, #40	@ 0x28
 8002db4:	af04      	add	r7, sp, #16
 8002db6:	60f8      	str	r0, [r7, #12]
 8002db8:	607a      	str	r2, [r7, #4]
 8002dba:	461a      	mov	r2, r3
 8002dbc:	460b      	mov	r3, r1
 8002dbe:	817b      	strh	r3, [r7, #10]
 8002dc0:	4613      	mov	r3, r2
 8002dc2:	813b      	strh	r3, [r7, #8]
	ILI9341_FillRectangle(display, 302, pos - 6, 7 * 2, 1, color);
 8002dc4:	897b      	ldrh	r3, [r7, #10]
 8002dc6:	3b06      	subs	r3, #6
 8002dc8:	b29a      	uxth	r2, r3
 8002dca:	893b      	ldrh	r3, [r7, #8]
 8002dcc:	9301      	str	r3, [sp, #4]
 8002dce:	2301      	movs	r3, #1
 8002dd0:	9300      	str	r3, [sp, #0]
 8002dd2:	230e      	movs	r3, #14
 8002dd4:	f44f 7197 	mov.w	r1, #302	@ 0x12e
 8002dd8:	68f8      	ldr	r0, [r7, #12]
 8002dda:	f7ff f86c 	bl	8001eb6 <ILI9341_FillRectangle>
	ILI9341_WriteString(display, 302, pos - 5, name, Font_7x10, ILI9341_BLACK, color);
 8002dde:	897b      	ldrh	r3, [r7, #10]
 8002de0:	3b05      	subs	r3, #5
 8002de2:	b29a      	uxth	r2, r3
 8002de4:	893b      	ldrh	r3, [r7, #8]
 8002de6:	9303      	str	r3, [sp, #12]
 8002de8:	2300      	movs	r3, #0
 8002dea:	9302      	str	r3, [sp, #8]
 8002dec:	491a      	ldr	r1, [pc, #104]	@ (8002e58 <drawTrigger+0xa8>)
 8002dee:	466b      	mov	r3, sp
 8002df0:	c903      	ldmia	r1, {r0, r1}
 8002df2:	e883 0003 	stmia.w	r3, {r0, r1}
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	f44f 7197 	mov.w	r1, #302	@ 0x12e
 8002dfc:	68f8      	ldr	r0, [r7, #12]
 8002dfe:	f7ff f972 	bl	80020e6 <ILI9341_WriteString>

	for (uint8_t i = 0; i < 6; i++) {
 8002e02:	2300      	movs	r3, #0
 8002e04:	75fb      	strb	r3, [r7, #23]
 8002e06:	e01f      	b.n	8002e48 <drawTrigger+0x98>
		for (uint8_t j = i; j < 11 - i; j++)
 8002e08:	7dfb      	ldrb	r3, [r7, #23]
 8002e0a:	75bb      	strb	r3, [r7, #22]
 8002e0c:	e013      	b.n	8002e36 <drawTrigger+0x86>
			ILI9341_DrawPixel(display, 301 - i, pos - 6 + j, color);
 8002e0e:	7dfb      	ldrb	r3, [r7, #23]
 8002e10:	b29b      	uxth	r3, r3
 8002e12:	f5c3 7396 	rsb	r3, r3, #300	@ 0x12c
 8002e16:	3301      	adds	r3, #1
 8002e18:	b299      	uxth	r1, r3
 8002e1a:	7dbb      	ldrb	r3, [r7, #22]
 8002e1c:	b29a      	uxth	r2, r3
 8002e1e:	897b      	ldrh	r3, [r7, #10]
 8002e20:	4413      	add	r3, r2
 8002e22:	b29b      	uxth	r3, r3
 8002e24:	3b06      	subs	r3, #6
 8002e26:	b29a      	uxth	r2, r3
 8002e28:	893b      	ldrh	r3, [r7, #8]
 8002e2a:	68f8      	ldr	r0, [r7, #12]
 8002e2c:	f7fe ff38 	bl	8001ca0 <ILI9341_DrawPixel>
		for (uint8_t j = i; j < 11 - i; j++)
 8002e30:	7dbb      	ldrb	r3, [r7, #22]
 8002e32:	3301      	adds	r3, #1
 8002e34:	75bb      	strb	r3, [r7, #22]
 8002e36:	7dba      	ldrb	r2, [r7, #22]
 8002e38:	7dfb      	ldrb	r3, [r7, #23]
 8002e3a:	f1c3 030b 	rsb	r3, r3, #11
 8002e3e:	429a      	cmp	r2, r3
 8002e40:	dbe5      	blt.n	8002e0e <drawTrigger+0x5e>
	for (uint8_t i = 0; i < 6; i++) {
 8002e42:	7dfb      	ldrb	r3, [r7, #23]
 8002e44:	3301      	adds	r3, #1
 8002e46:	75fb      	strb	r3, [r7, #23]
 8002e48:	7dfb      	ldrb	r3, [r7, #23]
 8002e4a:	2b05      	cmp	r3, #5
 8002e4c:	d9dc      	bls.n	8002e08 <drawTrigger+0x58>
	}
}
 8002e4e:	bf00      	nop
 8002e50:	bf00      	nop
 8002e52:	3718      	adds	r7, #24
 8002e54:	46bd      	mov	sp, r7
 8002e56:	bd80      	pop	{r7, pc}
 8002e58:	20000000 	.word	0x20000000

08002e5c <drawSignal>:

static void drawSignal(ILI9341TypeDef *display, uint32_t *adc_time, uint16_t *adc0, uint32_t adc_length, uint16_t pixel_dirty[280][2], uint16_t cursor, uint16_t color)
{
 8002e5c:	b590      	push	{r4, r7, lr}
 8002e5e:	f2ad 6dd4 	subw	sp, sp, #1748	@ 0x6d4
 8002e62:	af00      	add	r7, sp, #0
 8002e64:	f507 64da 	add.w	r4, r7, #1744	@ 0x6d0
 8002e68:	f2a4 64c4 	subw	r4, r4, #1732	@ 0x6c4
 8002e6c:	6020      	str	r0, [r4, #0]
 8002e6e:	f507 60da 	add.w	r0, r7, #1744	@ 0x6d0
 8002e72:	f5a0 60d9 	sub.w	r0, r0, #1736	@ 0x6c8
 8002e76:	6001      	str	r1, [r0, #0]
 8002e78:	f507 61da 	add.w	r1, r7, #1744	@ 0x6d0
 8002e7c:	f2a1 61cc 	subw	r1, r1, #1740	@ 0x6cc
 8002e80:	600a      	str	r2, [r1, #0]
 8002e82:	f507 62da 	add.w	r2, r7, #1744	@ 0x6d0
 8002e86:	f5a2 62da 	sub.w	r2, r2, #1744	@ 0x6d0
 8002e8a:	6013      	str	r3, [r2, #0]
	uint16_t point[280];
	for (uint16_t i = 0; i < 280; i++)
 8002e8c:	2300      	movs	r3, #0
 8002e8e:	f8a7 36ce 	strh.w	r3, [r7, #1742]	@ 0x6ce
 8002e92:	e00d      	b.n	8002eb0 <drawSignal+0x54>
		point[i] = 0;
 8002e94:	f8b7 26ce 	ldrh.w	r2, [r7, #1742]	@ 0x6ce
 8002e98:	f507 63da 	add.w	r3, r7, #1744	@ 0x6d0
 8002e9c:	f5a3 7318 	sub.w	r3, r3, #608	@ 0x260
 8002ea0:	2100      	movs	r1, #0
 8002ea2:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	for (uint16_t i = 0; i < 280; i++)
 8002ea6:	f8b7 36ce 	ldrh.w	r3, [r7, #1742]	@ 0x6ce
 8002eaa:	3301      	adds	r3, #1
 8002eac:	f8a7 36ce 	strh.w	r3, [r7, #1742]	@ 0x6ce
 8002eb0:	f8b7 36ce 	ldrh.w	r3, [r7, #1742]	@ 0x6ce
 8002eb4:	f5b3 7f8c 	cmp.w	r3, #280	@ 0x118
 8002eb8:	d3ec      	bcc.n	8002e94 <drawSignal+0x38>

	for (uint16_t i = 0; i < adc_length; i++) {
 8002eba:	2300      	movs	r3, #0
 8002ebc:	f8a7 36cc 	strh.w	r3, [r7, #1740]	@ 0x6cc
 8002ec0:	e0a5      	b.n	800300e <drawSignal+0x1b2>

		float uV = (float)(adc0[i]) * 3300000.0f / 4096.0f;
 8002ec2:	f8b7 36cc 	ldrh.w	r3, [r7, #1740]	@ 0x6cc
 8002ec6:	005b      	lsls	r3, r3, #1
 8002ec8:	f507 62da 	add.w	r2, r7, #1744	@ 0x6d0
 8002ecc:	f2a2 62cc 	subw	r2, r2, #1740	@ 0x6cc
 8002ed0:	6812      	ldr	r2, [r2, #0]
 8002ed2:	4413      	add	r3, r2
 8002ed4:	881b      	ldrh	r3, [r3, #0]
 8002ed6:	ee07 3a90 	vmov	s15, r3
 8002eda:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002ede:	ed9f 7aa1 	vldr	s14, [pc, #644]	@ 8003164 <drawSignal+0x308>
 8002ee2:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002ee6:	eddf 6aa0 	vldr	s13, [pc, #640]	@ 8003168 <drawSignal+0x30c>
 8002eea:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002eee:	f507 63d4 	add.w	r3, r7, #1696	@ 0x6a0
 8002ef2:	edc3 7a00 	vstr	s15, [r3]
		uint16_t x = (float)(adc_time[i]) * 280.0f / (float)(12.0f * xlim_us);
 8002ef6:	f8b7 36cc 	ldrh.w	r3, [r7, #1740]	@ 0x6cc
 8002efa:	009b      	lsls	r3, r3, #2
 8002efc:	f507 62da 	add.w	r2, r7, #1744	@ 0x6d0
 8002f00:	f5a2 62d9 	sub.w	r2, r2, #1736	@ 0x6c8
 8002f04:	6812      	ldr	r2, [r2, #0]
 8002f06:	4413      	add	r3, r2
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	ee07 3a90 	vmov	s15, r3
 8002f0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002f12:	ed9f 7a96 	vldr	s14, [pc, #600]	@ 800316c <drawSignal+0x310>
 8002f16:	ee67 6a87 	vmul.f32	s13, s15, s14
 8002f1a:	4b95      	ldr	r3, [pc, #596]	@ (8003170 <drawSignal+0x314>)
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	ee07 3a90 	vmov	s15, r3
 8002f22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002f26:	eeb2 7a08 	vmov.f32	s14, #40	@ 0x41400000  12.0
 8002f2a:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002f2e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002f32:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002f36:	ee17 3a90 	vmov	r3, s15
 8002f3a:	f8a7 36ca 	strh.w	r3, [r7, #1738]	@ 0x6ca
		uint16_t y = cursor - ((uV / (float)(ylim_uV)) * 200.0f / 8.0f);
 8002f3e:	f8b7 36e4 	ldrh.w	r3, [r7, #1764]	@ 0x6e4
 8002f42:	ee07 3a90 	vmov	s15, r3
 8002f46:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002f4a:	4b8a      	ldr	r3, [pc, #552]	@ (8003174 <drawSignal+0x318>)
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	ee07 3a90 	vmov	s15, r3
 8002f52:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002f56:	f507 63d4 	add.w	r3, r7, #1696	@ 0x6a0
 8002f5a:	ed93 6a00 	vldr	s12, [r3]
 8002f5e:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8002f62:	eddf 6a85 	vldr	s13, [pc, #532]	@ 8003178 <drawSignal+0x31c>
 8002f66:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8002f6a:	eeb2 6a00 	vmov.f32	s12, #32	@ 0x41000000  8.0
 8002f6e:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002f72:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002f76:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002f7a:	ee17 3a90 	vmov	r3, s15
 8002f7e:	f8a7 36c8 	strh.w	r3, [r7, #1736]	@ 0x6c8

		if (x < 0)
			x = 0;

		if (x > 274)
 8002f82:	f8b7 36ca 	ldrh.w	r3, [r7, #1738]	@ 0x6ca
 8002f86:	f5b3 7f89 	cmp.w	r3, #274	@ 0x112
 8002f8a:	d903      	bls.n	8002f94 <drawSignal+0x138>
			x = 274;
 8002f8c:	f44f 7389 	mov.w	r3, #274	@ 0x112
 8002f90:	f8a7 36ca 	strh.w	r3, [r7, #1738]	@ 0x6ca

		if (y < 21)
 8002f94:	f8b7 36c8 	ldrh.w	r3, [r7, #1736]	@ 0x6c8
 8002f98:	2b14      	cmp	r3, #20
 8002f9a:	d802      	bhi.n	8002fa2 <drawSignal+0x146>
			y = 21;
 8002f9c:	2315      	movs	r3, #21
 8002f9e:	f8a7 36c8 	strh.w	r3, [r7, #1736]	@ 0x6c8

		if (y > 219)
 8002fa2:	f8b7 36c8 	ldrh.w	r3, [r7, #1736]	@ 0x6c8
 8002fa6:	2bdb      	cmp	r3, #219	@ 0xdb
 8002fa8:	d902      	bls.n	8002fb0 <drawSignal+0x154>
			y = 219;
 8002faa:	23db      	movs	r3, #219	@ 0xdb
 8002fac:	f8a7 36c8 	strh.w	r3, [r7, #1736]	@ 0x6c8

		point[x] += (float)(y - point[x]) * 1.0f;
 8002fb0:	f8b7 26ca 	ldrh.w	r2, [r7, #1738]	@ 0x6ca
 8002fb4:	f507 63da 	add.w	r3, r7, #1744	@ 0x6d0
 8002fb8:	f5a3 7318 	sub.w	r3, r3, #608	@ 0x260
 8002fbc:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8002fc0:	ee07 3a90 	vmov	s15, r3
 8002fc4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002fc8:	f8b7 36c8 	ldrh.w	r3, [r7, #1736]	@ 0x6c8
 8002fcc:	f8b7 16ca 	ldrh.w	r1, [r7, #1738]	@ 0x6ca
 8002fd0:	f507 62da 	add.w	r2, r7, #1744	@ 0x6d0
 8002fd4:	f5a2 7218 	sub.w	r2, r2, #608	@ 0x260
 8002fd8:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 8002fdc:	1a9b      	subs	r3, r3, r2
 8002fde:	ee07 3a90 	vmov	s15, r3
 8002fe2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002fe6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002fea:	f8b7 26ca 	ldrh.w	r2, [r7, #1738]	@ 0x6ca
 8002fee:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002ff2:	ee17 3a90 	vmov	r3, s15
 8002ff6:	b299      	uxth	r1, r3
 8002ff8:	f507 63da 	add.w	r3, r7, #1744	@ 0x6d0
 8002ffc:	f5a3 7318 	sub.w	r3, r3, #608	@ 0x260
 8003000:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	for (uint16_t i = 0; i < adc_length; i++) {
 8003004:	f8b7 36cc 	ldrh.w	r3, [r7, #1740]	@ 0x6cc
 8003008:	3301      	adds	r3, #1
 800300a:	f8a7 36cc 	strh.w	r3, [r7, #1740]	@ 0x6cc
 800300e:	f8b7 36cc 	ldrh.w	r3, [r7, #1740]	@ 0x6cc
 8003012:	f507 62da 	add.w	r2, r7, #1744	@ 0x6d0
 8003016:	f5a2 62da 	sub.w	r2, r2, #1744	@ 0x6d0
 800301a:	6812      	ldr	r2, [r2, #0]
 800301c:	429a      	cmp	r2, r3
 800301e:	f63f af50 	bhi.w	8002ec2 <drawSignal+0x66>
	}

	uint16_t pixel[280][2];
	for (uint16_t i = 0; i < 280; i++) {
 8003022:	2300      	movs	r3, #0
 8003024:	f8a7 36c6 	strh.w	r3, [r7, #1734]	@ 0x6c6
 8003028:	e017      	b.n	800305a <drawSignal+0x1fe>
		pixel[i][0] = 220;
 800302a:	f8b7 26c6 	ldrh.w	r2, [r7, #1734]	@ 0x6c6
 800302e:	f507 63da 	add.w	r3, r7, #1744	@ 0x6d0
 8003032:	f5a3 63d8 	sub.w	r3, r3, #1728	@ 0x6c0
 8003036:	21dc      	movs	r1, #220	@ 0xdc
 8003038:	f823 1022 	strh.w	r1, [r3, r2, lsl #2]
		pixel[i][1] = 20;
 800303c:	f8b7 36c6 	ldrh.w	r3, [r7, #1734]	@ 0x6c6
 8003040:	f507 62da 	add.w	r2, r7, #1744	@ 0x6d0
 8003044:	f5a2 62d8 	sub.w	r2, r2, #1728	@ 0x6c0
 8003048:	009b      	lsls	r3, r3, #2
 800304a:	4413      	add	r3, r2
 800304c:	2214      	movs	r2, #20
 800304e:	805a      	strh	r2, [r3, #2]
	for (uint16_t i = 0; i < 280; i++) {
 8003050:	f8b7 36c6 	ldrh.w	r3, [r7, #1734]	@ 0x6c6
 8003054:	3301      	adds	r3, #1
 8003056:	f8a7 36c6 	strh.w	r3, [r7, #1734]	@ 0x6c6
 800305a:	f8b7 36c6 	ldrh.w	r3, [r7, #1734]	@ 0x6c6
 800305e:	f5b3 7f8c 	cmp.w	r3, #280	@ 0x118
 8003062:	d3e2      	bcc.n	800302a <drawSignal+0x1ce>
	}

	for (uint16_t i = 1; i <= 279; i++) {
 8003064:	2301      	movs	r3, #1
 8003066:	f8a7 36c4 	strh.w	r3, [r7, #1732]	@ 0x6c4
 800306a:	e11b      	b.n	80032a4 <drawSignal+0x448>

		if (point[i] == 0)
 800306c:	f8b7 26c4 	ldrh.w	r2, [r7, #1732]	@ 0x6c4
 8003070:	f507 63da 	add.w	r3, r7, #1744	@ 0x6d0
 8003074:	f5a3 7318 	sub.w	r3, r3, #608	@ 0x260
 8003078:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800307c:	2b00      	cmp	r3, #0
 800307e:	f000 8105 	beq.w	800328c <drawSignal+0x430>
			continue;

		int16_t x1 = i;
 8003082:	f8b7 36c4 	ldrh.w	r3, [r7, #1732]	@ 0x6c4
 8003086:	f8a7 36b2 	strh.w	r3, [r7, #1714]	@ 0x6b2
		int16_t x0 = x1 - 1;
 800308a:	f8b7 36b2 	ldrh.w	r3, [r7, #1714]	@ 0x6b2
 800308e:	3b01      	subs	r3, #1
 8003090:	b29b      	uxth	r3, r3
 8003092:	f8a7 36c2 	strh.w	r3, [r7, #1730]	@ 0x6c2

		for (; x0 >= 0; x0--) {
 8003096:	e010      	b.n	80030ba <drawSignal+0x25e>
			if (point[x0] != 0)
 8003098:	f9b7 26c2 	ldrsh.w	r2, [r7, #1730]	@ 0x6c2
 800309c:	f507 63da 	add.w	r3, r7, #1744	@ 0x6d0
 80030a0:	f5a3 7318 	sub.w	r3, r3, #608	@ 0x260
 80030a4:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d10b      	bne.n	80030c4 <drawSignal+0x268>
		for (; x0 >= 0; x0--) {
 80030ac:	f9b7 36c2 	ldrsh.w	r3, [r7, #1730]	@ 0x6c2
 80030b0:	b29b      	uxth	r3, r3
 80030b2:	3b01      	subs	r3, #1
 80030b4:	b29b      	uxth	r3, r3
 80030b6:	f8a7 36c2 	strh.w	r3, [r7, #1730]	@ 0x6c2
 80030ba:	f9b7 36c2 	ldrsh.w	r3, [r7, #1730]	@ 0x6c2
 80030be:	2b00      	cmp	r3, #0
 80030c0:	daea      	bge.n	8003098 <drawSignal+0x23c>
 80030c2:	e000      	b.n	80030c6 <drawSignal+0x26a>
				break;
 80030c4:	bf00      	nop
		}

		if (x0 == 0 && point[x0] == 0)
 80030c6:	f9b7 36c2 	ldrsh.w	r3, [r7, #1730]	@ 0x6c2
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d10a      	bne.n	80030e4 <drawSignal+0x288>
 80030ce:	f9b7 26c2 	ldrsh.w	r2, [r7, #1730]	@ 0x6c2
 80030d2:	f507 63da 	add.w	r3, r7, #1744	@ 0x6d0
 80030d6:	f5a3 7318 	sub.w	r3, r3, #608	@ 0x260
 80030da:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80030de:	2b00      	cmp	r3, #0
 80030e0:	f000 81fa 	beq.w	80034d8 <drawSignal+0x67c>
			return;

		int16_t y0 = point[x0];
 80030e4:	f9b7 26c2 	ldrsh.w	r2, [r7, #1730]	@ 0x6c2
 80030e8:	f507 63da 	add.w	r3, r7, #1744	@ 0x6d0
 80030ec:	f5a3 7318 	sub.w	r3, r3, #608	@ 0x260
 80030f0:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80030f4:	f8a7 36c0 	strh.w	r3, [r7, #1728]	@ 0x6c0
		int16_t y1 = point[x1];
 80030f8:	f9b7 26b2 	ldrsh.w	r2, [r7, #1714]	@ 0x6b2
 80030fc:	f507 63da 	add.w	r3, r7, #1744	@ 0x6d0
 8003100:	f5a3 7318 	sub.w	r3, r3, #608	@ 0x260
 8003104:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8003108:	f8a7 36b0 	strh.w	r3, [r7, #1712]	@ 0x6b0

		int16_t dx = (x1 - x0) > 0 ? (x1 - x0) : -(x1 - x0);
 800310c:	f9b7 26b2 	ldrsh.w	r2, [r7, #1714]	@ 0x6b2
 8003110:	f9b7 36c2 	ldrsh.w	r3, [r7, #1730]	@ 0x6c2
 8003114:	1ad3      	subs	r3, r2, r3
 8003116:	2b00      	cmp	r3, #0
 8003118:	bfb8      	it	lt
 800311a:	425b      	neglt	r3, r3
 800311c:	f8a7 36ae 	strh.w	r3, [r7, #1710]	@ 0x6ae
		int16_t sx = x0 < x1 ? 1 : -1;
 8003120:	f9b7 26c2 	ldrsh.w	r2, [r7, #1730]	@ 0x6c2
 8003124:	f9b7 36b2 	ldrsh.w	r3, [r7, #1714]	@ 0x6b2
 8003128:	429a      	cmp	r2, r3
 800312a:	da01      	bge.n	8003130 <drawSignal+0x2d4>
 800312c:	2301      	movs	r3, #1
 800312e:	e001      	b.n	8003134 <drawSignal+0x2d8>
 8003130:	f04f 33ff 	mov.w	r3, #4294967295
 8003134:	f8a7 36ac 	strh.w	r3, [r7, #1708]	@ 0x6ac
		int16_t dy = (y1 - y0) > 0 ? -(y1 - y0) : (y1 - y0);
 8003138:	f9b7 26b0 	ldrsh.w	r2, [r7, #1712]	@ 0x6b0
 800313c:	f9b7 36c0 	ldrsh.w	r3, [r7, #1728]	@ 0x6c0
 8003140:	1ad3      	subs	r3, r2, r3
 8003142:	2b00      	cmp	r3, #0
 8003144:	bfb8      	it	lt
 8003146:	425b      	neglt	r3, r3
 8003148:	b29b      	uxth	r3, r3
 800314a:	425b      	negs	r3, r3
 800314c:	b29b      	uxth	r3, r3
 800314e:	f8a7 36aa 	strh.w	r3, [r7, #1706]	@ 0x6aa
		int16_t sy = y0 < y1 ? 1 : -1;
 8003152:	f9b7 26c0 	ldrsh.w	r2, [r7, #1728]	@ 0x6c0
 8003156:	f9b7 36b0 	ldrsh.w	r3, [r7, #1712]	@ 0x6b0
 800315a:	429a      	cmp	r2, r3
 800315c:	da0e      	bge.n	800317c <drawSignal+0x320>
 800315e:	2301      	movs	r3, #1
 8003160:	e00e      	b.n	8003180 <drawSignal+0x324>
 8003162:	bf00      	nop
 8003164:	4a496a80 	.word	0x4a496a80
 8003168:	45800000 	.word	0x45800000
 800316c:	438c0000 	.word	0x438c0000
 8003170:	2000d0ec 	.word	0x2000d0ec
 8003174:	2000d0f0 	.word	0x2000d0f0
 8003178:	43480000 	.word	0x43480000
 800317c:	f04f 33ff 	mov.w	r3, #4294967295
 8003180:	f8a7 36a8 	strh.w	r3, [r7, #1704]	@ 0x6a8
		int16_t error = dx + dy;
 8003184:	f8b7 26ae 	ldrh.w	r2, [r7, #1710]	@ 0x6ae
 8003188:	f8b7 36aa 	ldrh.w	r3, [r7, #1706]	@ 0x6aa
 800318c:	4413      	add	r3, r2
 800318e:	b29b      	uxth	r3, r3
 8003190:	f8a7 36be 	strh.w	r3, [r7, #1726]	@ 0x6be

		while (1) {

			if (pixel[x0][0] > y0)
 8003194:	f9b7 26c2 	ldrsh.w	r2, [r7, #1730]	@ 0x6c2
 8003198:	f507 63da 	add.w	r3, r7, #1744	@ 0x6d0
 800319c:	f5a3 63d8 	sub.w	r3, r3, #1728	@ 0x6c0
 80031a0:	f833 3022 	ldrh.w	r3, [r3, r2, lsl #2]
 80031a4:	461a      	mov	r2, r3
 80031a6:	f9b7 36c0 	ldrsh.w	r3, [r7, #1728]	@ 0x6c0
 80031aa:	429a      	cmp	r2, r3
 80031ac:	dd09      	ble.n	80031c2 <drawSignal+0x366>
				pixel[x0][0] = y0;
 80031ae:	f9b7 26c2 	ldrsh.w	r2, [r7, #1730]	@ 0x6c2
 80031b2:	f8b7 16c0 	ldrh.w	r1, [r7, #1728]	@ 0x6c0
 80031b6:	f507 63da 	add.w	r3, r7, #1744	@ 0x6d0
 80031ba:	f5a3 63d8 	sub.w	r3, r3, #1728	@ 0x6c0
 80031be:	f823 1022 	strh.w	r1, [r3, r2, lsl #2]

			if (pixel[x0][1] < y0)
 80031c2:	f9b7 36c2 	ldrsh.w	r3, [r7, #1730]	@ 0x6c2
 80031c6:	f507 62da 	add.w	r2, r7, #1744	@ 0x6d0
 80031ca:	f5a2 62d8 	sub.w	r2, r2, #1728	@ 0x6c0
 80031ce:	009b      	lsls	r3, r3, #2
 80031d0:	4413      	add	r3, r2
 80031d2:	885b      	ldrh	r3, [r3, #2]
 80031d4:	461a      	mov	r2, r3
 80031d6:	f9b7 36c0 	ldrsh.w	r3, [r7, #1728]	@ 0x6c0
 80031da:	429a      	cmp	r2, r3
 80031dc:	da0b      	bge.n	80031f6 <drawSignal+0x39a>
				pixel[x0][1] = y0;
 80031de:	f9b7 36c2 	ldrsh.w	r3, [r7, #1730]	@ 0x6c2
 80031e2:	f8b7 16c0 	ldrh.w	r1, [r7, #1728]	@ 0x6c0
 80031e6:	f507 62da 	add.w	r2, r7, #1744	@ 0x6d0
 80031ea:	f5a2 62d8 	sub.w	r2, r2, #1728	@ 0x6c0
 80031ee:	009b      	lsls	r3, r3, #2
 80031f0:	4413      	add	r3, r2
 80031f2:	460a      	mov	r2, r1
 80031f4:	805a      	strh	r2, [r3, #2]

			if (x0 == x1 && y0 == y1)
 80031f6:	f9b7 26c2 	ldrsh.w	r2, [r7, #1730]	@ 0x6c2
 80031fa:	f9b7 36b2 	ldrsh.w	r3, [r7, #1714]	@ 0x6b2
 80031fe:	429a      	cmp	r2, r3
 8003200:	d105      	bne.n	800320e <drawSignal+0x3b2>
 8003202:	f9b7 26c0 	ldrsh.w	r2, [r7, #1728]	@ 0x6c0
 8003206:	f9b7 36b0 	ldrsh.w	r3, [r7, #1712]	@ 0x6b0
 800320a:	429a      	cmp	r2, r3
 800320c:	d040      	beq.n	8003290 <drawSignal+0x434>
				break;

			int16_t e2 = 2 * error;
 800320e:	f8b7 36be 	ldrh.w	r3, [r7, #1726]	@ 0x6be
 8003212:	005b      	lsls	r3, r3, #1
 8003214:	b29b      	uxth	r3, r3
 8003216:	f8a7 36a6 	strh.w	r3, [r7, #1702]	@ 0x6a6

			if (e2 >= dy) {
 800321a:	f9b7 26a6 	ldrsh.w	r2, [r7, #1702]	@ 0x6a6
 800321e:	f9b7 36aa 	ldrsh.w	r3, [r7, #1706]	@ 0x6aa
 8003222:	429a      	cmp	r2, r3
 8003224:	db15      	blt.n	8003252 <drawSignal+0x3f6>
				if (x0 == x1)
 8003226:	f9b7 26c2 	ldrsh.w	r2, [r7, #1730]	@ 0x6c2
 800322a:	f9b7 36b2 	ldrsh.w	r3, [r7, #1714]	@ 0x6b2
 800322e:	429a      	cmp	r2, r3
 8003230:	d030      	beq.n	8003294 <drawSignal+0x438>
					break;

				error = error + dy;
 8003232:	f8b7 26be 	ldrh.w	r2, [r7, #1726]	@ 0x6be
 8003236:	f8b7 36aa 	ldrh.w	r3, [r7, #1706]	@ 0x6aa
 800323a:	4413      	add	r3, r2
 800323c:	b29b      	uxth	r3, r3
 800323e:	f8a7 36be 	strh.w	r3, [r7, #1726]	@ 0x6be
				x0 = x0 + sx;
 8003242:	f8b7 26c2 	ldrh.w	r2, [r7, #1730]	@ 0x6c2
 8003246:	f8b7 36ac 	ldrh.w	r3, [r7, #1708]	@ 0x6ac
 800324a:	4413      	add	r3, r2
 800324c:	b29b      	uxth	r3, r3
 800324e:	f8a7 36c2 	strh.w	r3, [r7, #1730]	@ 0x6c2
			}

			if (e2 <= dx) {
 8003252:	f9b7 26a6 	ldrsh.w	r2, [r7, #1702]	@ 0x6a6
 8003256:	f9b7 36ae 	ldrsh.w	r3, [r7, #1710]	@ 0x6ae
 800325a:	429a      	cmp	r2, r3
 800325c:	dc9a      	bgt.n	8003194 <drawSignal+0x338>
				if (y0 == y1)
 800325e:	f9b7 26c0 	ldrsh.w	r2, [r7, #1728]	@ 0x6c0
 8003262:	f9b7 36b0 	ldrsh.w	r3, [r7, #1712]	@ 0x6b0
 8003266:	429a      	cmp	r2, r3
 8003268:	d016      	beq.n	8003298 <drawSignal+0x43c>
					break;

				error = error + dx;
 800326a:	f8b7 26be 	ldrh.w	r2, [r7, #1726]	@ 0x6be
 800326e:	f8b7 36ae 	ldrh.w	r3, [r7, #1710]	@ 0x6ae
 8003272:	4413      	add	r3, r2
 8003274:	b29b      	uxth	r3, r3
 8003276:	f8a7 36be 	strh.w	r3, [r7, #1726]	@ 0x6be
				y0 = y0 + sy;
 800327a:	f8b7 26c0 	ldrh.w	r2, [r7, #1728]	@ 0x6c0
 800327e:	f8b7 36a8 	ldrh.w	r3, [r7, #1704]	@ 0x6a8
 8003282:	4413      	add	r3, r2
 8003284:	b29b      	uxth	r3, r3
 8003286:	f8a7 36c0 	strh.w	r3, [r7, #1728]	@ 0x6c0
		while (1) {
 800328a:	e783      	b.n	8003194 <drawSignal+0x338>
			continue;
 800328c:	bf00      	nop
 800328e:	e004      	b.n	800329a <drawSignal+0x43e>
				break;
 8003290:	bf00      	nop
 8003292:	e002      	b.n	800329a <drawSignal+0x43e>
					break;
 8003294:	bf00      	nop
 8003296:	e000      	b.n	800329a <drawSignal+0x43e>
					break;
 8003298:	bf00      	nop
	for (uint16_t i = 1; i <= 279; i++) {
 800329a:	f8b7 36c4 	ldrh.w	r3, [r7, #1732]	@ 0x6c4
 800329e:	3301      	adds	r3, #1
 80032a0:	f8a7 36c4 	strh.w	r3, [r7, #1732]	@ 0x6c4
 80032a4:	f8b7 36c4 	ldrh.w	r3, [r7, #1732]	@ 0x6c4
 80032a8:	f5b3 7f8c 	cmp.w	r3, #280	@ 0x118
 80032ac:	f4ff aede 	bcc.w	800306c <drawSignal+0x210>
			}
		}
	}

	for (uint16_t i = 1; i <= 279; i++) {
 80032b0:	2301      	movs	r3, #1
 80032b2:	f8a7 36bc 	strh.w	r3, [r7, #1724]	@ 0x6bc
 80032b6:	e108      	b.n	80034ca <drawSignal+0x66e>
		uint16_t min = pixel[i][0] < pixel_dirty[i][0] ? pixel[i][0] : pixel_dirty[i][0];
 80032b8:	f8b7 36bc 	ldrh.w	r3, [r7, #1724]	@ 0x6bc
 80032bc:	009b      	lsls	r3, r3, #2
 80032be:	f8d7 26e0 	ldr.w	r2, [r7, #1760]	@ 0x6e0
 80032c2:	4413      	add	r3, r2
 80032c4:	881a      	ldrh	r2, [r3, #0]
 80032c6:	f8b7 16bc 	ldrh.w	r1, [r7, #1724]	@ 0x6bc
 80032ca:	f507 63da 	add.w	r3, r7, #1744	@ 0x6d0
 80032ce:	f5a3 63d8 	sub.w	r3, r3, #1728	@ 0x6c0
 80032d2:	f833 3021 	ldrh.w	r3, [r3, r1, lsl #2]
 80032d6:	4293      	cmp	r3, r2
 80032d8:	bf28      	it	cs
 80032da:	4613      	movcs	r3, r2
 80032dc:	f8a7 36b6 	strh.w	r3, [r7, #1718]	@ 0x6b6
		uint16_t max = pixel[i][1] > pixel_dirty[i][1] ? pixel[i][1] : pixel_dirty[i][1];
 80032e0:	f8b7 36bc 	ldrh.w	r3, [r7, #1724]	@ 0x6bc
 80032e4:	009b      	lsls	r3, r3, #2
 80032e6:	f8d7 26e0 	ldr.w	r2, [r7, #1760]	@ 0x6e0
 80032ea:	4413      	add	r3, r2
 80032ec:	885a      	ldrh	r2, [r3, #2]
 80032ee:	f8b7 36bc 	ldrh.w	r3, [r7, #1724]	@ 0x6bc
 80032f2:	f507 61da 	add.w	r1, r7, #1744	@ 0x6d0
 80032f6:	f5a1 61d8 	sub.w	r1, r1, #1728	@ 0x6c0
 80032fa:	009b      	lsls	r3, r3, #2
 80032fc:	440b      	add	r3, r1
 80032fe:	885b      	ldrh	r3, [r3, #2]
 8003300:	4293      	cmp	r3, r2
 8003302:	bf38      	it	cc
 8003304:	4613      	movcc	r3, r2
 8003306:	f8a7 36b4 	strh.w	r3, [r7, #1716]	@ 0x6b4

		for (uint16_t j = min; j <= max; j++) {
 800330a:	f8b7 36b6 	ldrh.w	r3, [r7, #1718]	@ 0x6b6
 800330e:	f8a7 36ba 	strh.w	r3, [r7, #1722]	@ 0x6ba
 8003312:	e0af      	b.n	8003474 <drawSignal+0x618>
			uint8_t draw = 0;
 8003314:	2300      	movs	r3, #0
 8003316:	f887 36b9 	strb.w	r3, [r7, #1721]	@ 0x6b9
			if (j >= pixel[i][0] && j <= pixel[i][1])
 800331a:	f8b7 26bc 	ldrh.w	r2, [r7, #1724]	@ 0x6bc
 800331e:	f507 63da 	add.w	r3, r7, #1744	@ 0x6d0
 8003322:	f5a3 63d8 	sub.w	r3, r3, #1728	@ 0x6c0
 8003326:	f833 3022 	ldrh.w	r3, [r3, r2, lsl #2]
 800332a:	f8b7 26ba 	ldrh.w	r2, [r7, #1722]	@ 0x6ba
 800332e:	429a      	cmp	r2, r3
 8003330:	d30f      	bcc.n	8003352 <drawSignal+0x4f6>
 8003332:	f8b7 36bc 	ldrh.w	r3, [r7, #1724]	@ 0x6bc
 8003336:	f507 62da 	add.w	r2, r7, #1744	@ 0x6d0
 800333a:	f5a2 62d8 	sub.w	r2, r2, #1728	@ 0x6c0
 800333e:	009b      	lsls	r3, r3, #2
 8003340:	4413      	add	r3, r2
 8003342:	885b      	ldrh	r3, [r3, #2]
 8003344:	f8b7 26ba 	ldrh.w	r2, [r7, #1722]	@ 0x6ba
 8003348:	429a      	cmp	r2, r3
 800334a:	d802      	bhi.n	8003352 <drawSignal+0x4f6>
				draw = 1;
 800334c:	2301      	movs	r3, #1
 800334e:	f887 36b9 	strb.w	r3, [r7, #1721]	@ 0x6b9

			uint8_t clear = 0;
 8003352:	2300      	movs	r3, #0
 8003354:	f887 36b8 	strb.w	r3, [r7, #1720]	@ 0x6b8
			if (j >= pixel_dirty[i][0] && j <= pixel_dirty[i][1])
 8003358:	f8b7 36bc 	ldrh.w	r3, [r7, #1724]	@ 0x6bc
 800335c:	009b      	lsls	r3, r3, #2
 800335e:	f8d7 26e0 	ldr.w	r2, [r7, #1760]	@ 0x6e0
 8003362:	4413      	add	r3, r2
 8003364:	881b      	ldrh	r3, [r3, #0]
 8003366:	f8b7 26ba 	ldrh.w	r2, [r7, #1722]	@ 0x6ba
 800336a:	429a      	cmp	r2, r3
 800336c:	d30d      	bcc.n	800338a <drawSignal+0x52e>
 800336e:	f8b7 36bc 	ldrh.w	r3, [r7, #1724]	@ 0x6bc
 8003372:	009b      	lsls	r3, r3, #2
 8003374:	f8d7 26e0 	ldr.w	r2, [r7, #1760]	@ 0x6e0
 8003378:	4413      	add	r3, r2
 800337a:	885b      	ldrh	r3, [r3, #2]
 800337c:	f8b7 26ba 	ldrh.w	r2, [r7, #1722]	@ 0x6ba
 8003380:	429a      	cmp	r2, r3
 8003382:	d802      	bhi.n	800338a <drawSignal+0x52e>
				clear = 1;
 8003384:	2301      	movs	r3, #1
 8003386:	f887 36b8 	strb.w	r3, [r7, #1720]	@ 0x6b8

			if (draw && !clear && j > 21)
 800338a:	f897 36b9 	ldrb.w	r3, [r7, #1721]	@ 0x6b9
 800338e:	2b00      	cmp	r3, #0
 8003390:	d016      	beq.n	80033c0 <drawSignal+0x564>
 8003392:	f897 36b8 	ldrb.w	r3, [r7, #1720]	@ 0x6b8
 8003396:	2b00      	cmp	r3, #0
 8003398:	d112      	bne.n	80033c0 <drawSignal+0x564>
 800339a:	f8b7 36ba 	ldrh.w	r3, [r7, #1722]	@ 0x6ba
 800339e:	2b15      	cmp	r3, #21
 80033a0:	d90e      	bls.n	80033c0 <drawSignal+0x564>
				ILI9341_DrawPixel(display, i + 20, j, color);
 80033a2:	f8b7 36bc 	ldrh.w	r3, [r7, #1724]	@ 0x6bc
 80033a6:	3314      	adds	r3, #20
 80033a8:	b299      	uxth	r1, r3
 80033aa:	f8b7 36e8 	ldrh.w	r3, [r7, #1768]	@ 0x6e8
 80033ae:	f8b7 26ba 	ldrh.w	r2, [r7, #1722]	@ 0x6ba
 80033b2:	f507 60da 	add.w	r0, r7, #1744	@ 0x6d0
 80033b6:	f2a0 60c4 	subw	r0, r0, #1732	@ 0x6c4
 80033ba:	6800      	ldr	r0, [r0, #0]
 80033bc:	f7fe fc70 	bl	8001ca0 <ILI9341_DrawPixel>

			if (!draw && clear) {
 80033c0:	f897 36b9 	ldrb.w	r3, [r7, #1721]	@ 0x6b9
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d150      	bne.n	800346a <drawSignal+0x60e>
 80033c8:	f897 36b8 	ldrb.w	r3, [r7, #1720]	@ 0x6b8
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d04c      	beq.n	800346a <drawSignal+0x60e>
				if (((i % 25) == 0 && (j % 2) == 0) || ((i % 2) == 0 && ((j - 20) % 25) == 0))
 80033d0:	f8b7 26bc 	ldrh.w	r2, [r7, #1724]	@ 0x6bc
 80033d4:	4b43      	ldr	r3, [pc, #268]	@ (80034e4 <drawSignal+0x688>)
 80033d6:	fba3 1302 	umull	r1, r3, r3, r2
 80033da:	08d9      	lsrs	r1, r3, #3
 80033dc:	460b      	mov	r3, r1
 80033de:	009b      	lsls	r3, r3, #2
 80033e0:	440b      	add	r3, r1
 80033e2:	0099      	lsls	r1, r3, #2
 80033e4:	440b      	add	r3, r1
 80033e6:	1ad3      	subs	r3, r2, r3
 80033e8:	b29b      	uxth	r3, r3
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d106      	bne.n	80033fc <drawSignal+0x5a0>
 80033ee:	f8b7 36ba 	ldrh.w	r3, [r7, #1722]	@ 0x6ba
 80033f2:	f003 0301 	and.w	r3, r3, #1
 80033f6:	b29b      	uxth	r3, r3
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d018      	beq.n	800342e <drawSignal+0x5d2>
 80033fc:	f8b7 36bc 	ldrh.w	r3, [r7, #1724]	@ 0x6bc
 8003400:	f003 0301 	and.w	r3, r3, #1
 8003404:	b29b      	uxth	r3, r3
 8003406:	2b00      	cmp	r3, #0
 8003408:	d121      	bne.n	800344e <drawSignal+0x5f2>
 800340a:	f8b7 36ba 	ldrh.w	r3, [r7, #1722]	@ 0x6ba
 800340e:	f1a3 0114 	sub.w	r1, r3, #20
 8003412:	4b34      	ldr	r3, [pc, #208]	@ (80034e4 <drawSignal+0x688>)
 8003414:	fb83 2301 	smull	r2, r3, r3, r1
 8003418:	10da      	asrs	r2, r3, #3
 800341a:	17cb      	asrs	r3, r1, #31
 800341c:	1ad2      	subs	r2, r2, r3
 800341e:	4613      	mov	r3, r2
 8003420:	009b      	lsls	r3, r3, #2
 8003422:	4413      	add	r3, r2
 8003424:	009a      	lsls	r2, r3, #2
 8003426:	4413      	add	r3, r2
 8003428:	1aca      	subs	r2, r1, r3
 800342a:	2a00      	cmp	r2, #0
 800342c:	d10f      	bne.n	800344e <drawSignal+0x5f2>
					ILI9341_DrawPixel(display, i + 20, j,  ILI9341_GRAY);
 800342e:	f8b7 36bc 	ldrh.w	r3, [r7, #1724]	@ 0x6bc
 8003432:	3314      	adds	r3, #20
 8003434:	b299      	uxth	r1, r3
 8003436:	f8b7 26ba 	ldrh.w	r2, [r7, #1722]	@ 0x6ba
 800343a:	f507 63da 	add.w	r3, r7, #1744	@ 0x6d0
 800343e:	f2a3 60c4 	subw	r0, r3, #1732	@ 0x6c4
 8003442:	f245 238a 	movw	r3, #21130	@ 0x528a
 8003446:	6800      	ldr	r0, [r0, #0]
 8003448:	f7fe fc2a 	bl	8001ca0 <ILI9341_DrawPixel>
 800344c:	e00d      	b.n	800346a <drawSignal+0x60e>
				else
					ILI9341_DrawPixel(display, i + 20, j, ILI9341_BLACK);
 800344e:	f8b7 36bc 	ldrh.w	r3, [r7, #1724]	@ 0x6bc
 8003452:	3314      	adds	r3, #20
 8003454:	b299      	uxth	r1, r3
 8003456:	f8b7 26ba 	ldrh.w	r2, [r7, #1722]	@ 0x6ba
 800345a:	f507 63da 	add.w	r3, r7, #1744	@ 0x6d0
 800345e:	f2a3 60c4 	subw	r0, r3, #1732	@ 0x6c4
 8003462:	2300      	movs	r3, #0
 8003464:	6800      	ldr	r0, [r0, #0]
 8003466:	f7fe fc1b 	bl	8001ca0 <ILI9341_DrawPixel>
		for (uint16_t j = min; j <= max; j++) {
 800346a:	f8b7 36ba 	ldrh.w	r3, [r7, #1722]	@ 0x6ba
 800346e:	3301      	adds	r3, #1
 8003470:	f8a7 36ba 	strh.w	r3, [r7, #1722]	@ 0x6ba
 8003474:	f8b7 26ba 	ldrh.w	r2, [r7, #1722]	@ 0x6ba
 8003478:	f8b7 36b4 	ldrh.w	r3, [r7, #1716]	@ 0x6b4
 800347c:	429a      	cmp	r2, r3
 800347e:	f67f af49 	bls.w	8003314 <drawSignal+0x4b8>
			}
		}

		pixel_dirty[i][0] = pixel[i][0];
 8003482:	f8b7 16bc 	ldrh.w	r1, [r7, #1724]	@ 0x6bc
 8003486:	f8b7 36bc 	ldrh.w	r3, [r7, #1724]	@ 0x6bc
 800348a:	009b      	lsls	r3, r3, #2
 800348c:	f8d7 26e0 	ldr.w	r2, [r7, #1760]	@ 0x6e0
 8003490:	4413      	add	r3, r2
 8003492:	f507 62da 	add.w	r2, r7, #1744	@ 0x6d0
 8003496:	f5a2 62d8 	sub.w	r2, r2, #1728	@ 0x6c0
 800349a:	f832 2021 	ldrh.w	r2, [r2, r1, lsl #2]
 800349e:	801a      	strh	r2, [r3, #0]
		pixel_dirty[i][1] = pixel[i][1];
 80034a0:	f8b7 36bc 	ldrh.w	r3, [r7, #1724]	@ 0x6bc
 80034a4:	f8b7 26bc 	ldrh.w	r2, [r7, #1724]	@ 0x6bc
 80034a8:	0092      	lsls	r2, r2, #2
 80034aa:	f8d7 16e0 	ldr.w	r1, [r7, #1760]	@ 0x6e0
 80034ae:	440a      	add	r2, r1
 80034b0:	f507 61da 	add.w	r1, r7, #1744	@ 0x6d0
 80034b4:	f5a1 61d8 	sub.w	r1, r1, #1728	@ 0x6c0
 80034b8:	009b      	lsls	r3, r3, #2
 80034ba:	440b      	add	r3, r1
 80034bc:	885b      	ldrh	r3, [r3, #2]
 80034be:	8053      	strh	r3, [r2, #2]
	for (uint16_t i = 1; i <= 279; i++) {
 80034c0:	f8b7 36bc 	ldrh.w	r3, [r7, #1724]	@ 0x6bc
 80034c4:	3301      	adds	r3, #1
 80034c6:	f8a7 36bc 	strh.w	r3, [r7, #1724]	@ 0x6bc
 80034ca:	f8b7 36bc 	ldrh.w	r3, [r7, #1724]	@ 0x6bc
 80034ce:	f5b3 7f8c 	cmp.w	r3, #280	@ 0x118
 80034d2:	f4ff aef1 	bcc.w	80032b8 <drawSignal+0x45c>
 80034d6:	e000      	b.n	80034da <drawSignal+0x67e>
			return;
 80034d8:	bf00      	nop
	}
}
 80034da:	f207 67d4 	addw	r7, r7, #1748	@ 0x6d4
 80034de:	46bd      	mov	sp, r7
 80034e0:	bd90      	pop	{r4, r7, pc}
 80034e2:	bf00      	nop
 80034e4:	51eb851f 	.word	0x51eb851f

080034e8 <clearSignal>:

static void clearSignal(ILI9341TypeDef *display, uint16_t pixel_dirty[280][2])
{
 80034e8:	b580      	push	{r7, lr}
 80034ea:	b084      	sub	sp, #16
 80034ec:	af00      	add	r7, sp, #0
 80034ee:	6078      	str	r0, [r7, #4]
 80034f0:	6039      	str	r1, [r7, #0]
	for (uint16_t i = 1; i <= 279; i++) {
 80034f2:	2301      	movs	r3, #1
 80034f4:	81fb      	strh	r3, [r7, #14]
 80034f6:	e05d      	b.n	80035b4 <clearSignal+0xcc>
		for (uint16_t j = pixel_dirty[i][0]; j <= pixel_dirty[i][1]; j++) {
 80034f8:	89fb      	ldrh	r3, [r7, #14]
 80034fa:	009b      	lsls	r3, r3, #2
 80034fc:	683a      	ldr	r2, [r7, #0]
 80034fe:	4413      	add	r3, r2
 8003500:	881b      	ldrh	r3, [r3, #0]
 8003502:	81bb      	strh	r3, [r7, #12]
 8003504:	e03f      	b.n	8003586 <clearSignal+0x9e>
			if (((i % 25) == 0 && (j % 2) == 0) || ((i % 2) == 0 && ((j - 20) % 25) == 0))
 8003506:	89fa      	ldrh	r2, [r7, #14]
 8003508:	4b2f      	ldr	r3, [pc, #188]	@ (80035c8 <clearSignal+0xe0>)
 800350a:	fba3 1302 	umull	r1, r3, r3, r2
 800350e:	08d9      	lsrs	r1, r3, #3
 8003510:	460b      	mov	r3, r1
 8003512:	009b      	lsls	r3, r3, #2
 8003514:	440b      	add	r3, r1
 8003516:	0099      	lsls	r1, r3, #2
 8003518:	440b      	add	r3, r1
 800351a:	1ad3      	subs	r3, r2, r3
 800351c:	b29b      	uxth	r3, r3
 800351e:	2b00      	cmp	r3, #0
 8003520:	d105      	bne.n	800352e <clearSignal+0x46>
 8003522:	89bb      	ldrh	r3, [r7, #12]
 8003524:	f003 0301 	and.w	r3, r3, #1
 8003528:	b29b      	uxth	r3, r3
 800352a:	2b00      	cmp	r3, #0
 800352c:	d016      	beq.n	800355c <clearSignal+0x74>
 800352e:	89fb      	ldrh	r3, [r7, #14]
 8003530:	f003 0301 	and.w	r3, r3, #1
 8003534:	b29b      	uxth	r3, r3
 8003536:	2b00      	cmp	r3, #0
 8003538:	d11a      	bne.n	8003570 <clearSignal+0x88>
 800353a:	89bb      	ldrh	r3, [r7, #12]
 800353c:	f1a3 0114 	sub.w	r1, r3, #20
 8003540:	4b21      	ldr	r3, [pc, #132]	@ (80035c8 <clearSignal+0xe0>)
 8003542:	fb83 2301 	smull	r2, r3, r3, r1
 8003546:	10da      	asrs	r2, r3, #3
 8003548:	17cb      	asrs	r3, r1, #31
 800354a:	1ad2      	subs	r2, r2, r3
 800354c:	4613      	mov	r3, r2
 800354e:	009b      	lsls	r3, r3, #2
 8003550:	4413      	add	r3, r2
 8003552:	009a      	lsls	r2, r3, #2
 8003554:	4413      	add	r3, r2
 8003556:	1aca      	subs	r2, r1, r3
 8003558:	2a00      	cmp	r2, #0
 800355a:	d109      	bne.n	8003570 <clearSignal+0x88>
				ILI9341_DrawPixel(display, i + 20, j,  ILI9341_GRAY);
 800355c:	89fb      	ldrh	r3, [r7, #14]
 800355e:	3314      	adds	r3, #20
 8003560:	b299      	uxth	r1, r3
 8003562:	89ba      	ldrh	r2, [r7, #12]
 8003564:	f245 238a 	movw	r3, #21130	@ 0x528a
 8003568:	6878      	ldr	r0, [r7, #4]
 800356a:	f7fe fb99 	bl	8001ca0 <ILI9341_DrawPixel>
 800356e:	e007      	b.n	8003580 <clearSignal+0x98>
			else
				ILI9341_DrawPixel(display, i + 20, j, ILI9341_BLACK);
 8003570:	89fb      	ldrh	r3, [r7, #14]
 8003572:	3314      	adds	r3, #20
 8003574:	b299      	uxth	r1, r3
 8003576:	89ba      	ldrh	r2, [r7, #12]
 8003578:	2300      	movs	r3, #0
 800357a:	6878      	ldr	r0, [r7, #4]
 800357c:	f7fe fb90 	bl	8001ca0 <ILI9341_DrawPixel>
		for (uint16_t j = pixel_dirty[i][0]; j <= pixel_dirty[i][1]; j++) {
 8003580:	89bb      	ldrh	r3, [r7, #12]
 8003582:	3301      	adds	r3, #1
 8003584:	81bb      	strh	r3, [r7, #12]
 8003586:	89fb      	ldrh	r3, [r7, #14]
 8003588:	009b      	lsls	r3, r3, #2
 800358a:	683a      	ldr	r2, [r7, #0]
 800358c:	4413      	add	r3, r2
 800358e:	885b      	ldrh	r3, [r3, #2]
 8003590:	89ba      	ldrh	r2, [r7, #12]
 8003592:	429a      	cmp	r2, r3
 8003594:	d9b7      	bls.n	8003506 <clearSignal+0x1e>
		}

		pixel_dirty[i][0] = 0;
 8003596:	89fb      	ldrh	r3, [r7, #14]
 8003598:	009b      	lsls	r3, r3, #2
 800359a:	683a      	ldr	r2, [r7, #0]
 800359c:	4413      	add	r3, r2
 800359e:	2200      	movs	r2, #0
 80035a0:	801a      	strh	r2, [r3, #0]
		pixel_dirty[i][1] = 0;
 80035a2:	89fb      	ldrh	r3, [r7, #14]
 80035a4:	009b      	lsls	r3, r3, #2
 80035a6:	683a      	ldr	r2, [r7, #0]
 80035a8:	4413      	add	r3, r2
 80035aa:	2200      	movs	r2, #0
 80035ac:	805a      	strh	r2, [r3, #2]
	for (uint16_t i = 1; i <= 279; i++) {
 80035ae:	89fb      	ldrh	r3, [r7, #14]
 80035b0:	3301      	adds	r3, #1
 80035b2:	81fb      	strh	r3, [r7, #14]
 80035b4:	89fb      	ldrh	r3, [r7, #14]
 80035b6:	f5b3 7f8c 	cmp.w	r3, #280	@ 0x118
 80035ba:	d39d      	bcc.n	80034f8 <clearSignal+0x10>
	}
}
 80035bc:	bf00      	nop
 80035be:	bf00      	nop
 80035c0:	3710      	adds	r7, #16
 80035c2:	46bd      	mov	sp, r7
 80035c4:	bd80      	pop	{r7, pc}
 80035c6:	bf00      	nop
 80035c8:	51eb851f 	.word	0x51eb851f

080035cc <drawSignalParam>:

static void drawSignalParam(ILI9341TypeDef *display, char *string, size_t size, uint16_t adc_max, uint16_t adc_min, uint32_t adc_period)
{
 80035cc:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80035d0:	b096      	sub	sp, #88	@ 0x58
 80035d2:	af0c      	add	r7, sp, #48	@ 0x30
 80035d4:	60f8      	str	r0, [r7, #12]
 80035d6:	60b9      	str	r1, [r7, #8]
 80035d8:	607a      	str	r2, [r7, #4]
 80035da:	807b      	strh	r3, [r7, #2]
	float max  = (float)(adc_max) * 3300000.0f / 4096.0f;
 80035dc:	887b      	ldrh	r3, [r7, #2]
 80035de:	ee07 3a90 	vmov	s15, r3
 80035e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80035e6:	ed9f 7a7f 	vldr	s14, [pc, #508]	@ 80037e4 <drawSignalParam+0x218>
 80035ea:	ee27 7a87 	vmul.f32	s14, s15, s14
 80035ee:	eddf 6a7e 	vldr	s13, [pc, #504]	@ 80037e8 <drawSignalParam+0x21c>
 80035f2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80035f6:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
	float min  = (float)(adc_min) * 3300000.0f / 4096.0f;
 80035fa:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80035fe:	ee07 3a90 	vmov	s15, r3
 8003602:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003606:	ed9f 7a77 	vldr	s14, [pc, #476]	@ 80037e4 <drawSignalParam+0x218>
 800360a:	ee27 7a87 	vmul.f32	s14, s15, s14
 800360e:	eddf 6a76 	vldr	s13, [pc, #472]	@ 80037e8 <drawSignalParam+0x21c>
 8003612:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003616:	edc7 7a08 	vstr	s15, [r7, #32]
	float freq = 1.0f / ((float)(adc_period) / 1000000.0f);
 800361a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800361c:	ee07 3a90 	vmov	s15, r3
 8003620:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003624:	eddf 6a71 	vldr	s13, [pc, #452]	@ 80037ec <drawSignalParam+0x220>
 8003628:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800362c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003630:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003634:	edc7 7a07 	vstr	s15, [r7, #28]
	char *max_postfix  = "";
 8003638:	4b6d      	ldr	r3, [pc, #436]	@ (80037f0 <drawSignalParam+0x224>)
 800363a:	61bb      	str	r3, [r7, #24]
	char *min_postfix  = "";
 800363c:	4b6c      	ldr	r3, [pc, #432]	@ (80037f0 <drawSignalParam+0x224>)
 800363e:	617b      	str	r3, [r7, #20]
	char *freq_postfix = "";
 8003640:	4b6b      	ldr	r3, [pc, #428]	@ (80037f0 <drawSignalParam+0x224>)
 8003642:	613b      	str	r3, [r7, #16]

	if (max >= 1000000.0f) {
 8003644:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8003648:	ed9f 7a68 	vldr	s14, [pc, #416]	@ 80037ec <drawSignalParam+0x220>
 800364c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003650:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003654:	db0a      	blt.n	800366c <drawSignalParam+0xa0>
		max /= 1000000.0f;
 8003656:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 800365a:	eddf 6a64 	vldr	s13, [pc, #400]	@ 80037ec <drawSignalParam+0x220>
 800365e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003662:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
		max_postfix = " V";
 8003666:	4b63      	ldr	r3, [pc, #396]	@ (80037f4 <drawSignalParam+0x228>)
 8003668:	61bb      	str	r3, [r7, #24]
 800366a:	e015      	b.n	8003698 <drawSignalParam+0xcc>
	} else if (max >= 1000.0f) {
 800366c:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8003670:	ed9f 7a61 	vldr	s14, [pc, #388]	@ 80037f8 <drawSignalParam+0x22c>
 8003674:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003678:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800367c:	db0a      	blt.n	8003694 <drawSignalParam+0xc8>
		max /= 1000.0f;
 800367e:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8003682:	eddf 6a5d 	vldr	s13, [pc, #372]	@ 80037f8 <drawSignalParam+0x22c>
 8003686:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800368a:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
		max_postfix = "mV";
 800368e:	4b5b      	ldr	r3, [pc, #364]	@ (80037fc <drawSignalParam+0x230>)
 8003690:	61bb      	str	r3, [r7, #24]
 8003692:	e001      	b.n	8003698 <drawSignalParam+0xcc>
	} else
		max_postfix = "uV";
 8003694:	4b5a      	ldr	r3, [pc, #360]	@ (8003800 <drawSignalParam+0x234>)
 8003696:	61bb      	str	r3, [r7, #24]

	if (min >= 1000000.0f) {
 8003698:	edd7 7a08 	vldr	s15, [r7, #32]
 800369c:	ed9f 7a53 	vldr	s14, [pc, #332]	@ 80037ec <drawSignalParam+0x220>
 80036a0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80036a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80036a8:	db0a      	blt.n	80036c0 <drawSignalParam+0xf4>
		min /= 1000000.0f;
 80036aa:	ed97 7a08 	vldr	s14, [r7, #32]
 80036ae:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 80037ec <drawSignalParam+0x220>
 80036b2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80036b6:	edc7 7a08 	vstr	s15, [r7, #32]
		min_postfix = " V";
 80036ba:	4b4e      	ldr	r3, [pc, #312]	@ (80037f4 <drawSignalParam+0x228>)
 80036bc:	617b      	str	r3, [r7, #20]
 80036be:	e015      	b.n	80036ec <drawSignalParam+0x120>
	} else if (min >= 1000.0f) {
 80036c0:	edd7 7a08 	vldr	s15, [r7, #32]
 80036c4:	ed9f 7a4c 	vldr	s14, [pc, #304]	@ 80037f8 <drawSignalParam+0x22c>
 80036c8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80036cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80036d0:	db0a      	blt.n	80036e8 <drawSignalParam+0x11c>
		min /= 1000.0f;
 80036d2:	ed97 7a08 	vldr	s14, [r7, #32]
 80036d6:	eddf 6a48 	vldr	s13, [pc, #288]	@ 80037f8 <drawSignalParam+0x22c>
 80036da:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80036de:	edc7 7a08 	vstr	s15, [r7, #32]
		min_postfix = "mV";
 80036e2:	4b46      	ldr	r3, [pc, #280]	@ (80037fc <drawSignalParam+0x230>)
 80036e4:	617b      	str	r3, [r7, #20]
 80036e6:	e001      	b.n	80036ec <drawSignalParam+0x120>
	} else
		min_postfix = "uV";
 80036e8:	4b45      	ldr	r3, [pc, #276]	@ (8003800 <drawSignalParam+0x234>)
 80036ea:	617b      	str	r3, [r7, #20]

	if (freq >= 1000000.0f) {
 80036ec:	edd7 7a07 	vldr	s15, [r7, #28]
 80036f0:	ed9f 7a3e 	vldr	s14, [pc, #248]	@ 80037ec <drawSignalParam+0x220>
 80036f4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80036f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80036fc:	db0a      	blt.n	8003714 <drawSignalParam+0x148>
		freq /= 1000000.0f;
 80036fe:	ed97 7a07 	vldr	s14, [r7, #28]
 8003702:	eddf 6a3a 	vldr	s13, [pc, #232]	@ 80037ec <drawSignalParam+0x220>
 8003706:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800370a:	edc7 7a07 	vstr	s15, [r7, #28]
		freq_postfix = "MHz";
 800370e:	4b3d      	ldr	r3, [pc, #244]	@ (8003804 <drawSignalParam+0x238>)
 8003710:	613b      	str	r3, [r7, #16]
 8003712:	e015      	b.n	8003740 <drawSignalParam+0x174>
	} else if (freq >= 1000.0f) {
 8003714:	edd7 7a07 	vldr	s15, [r7, #28]
 8003718:	ed9f 7a37 	vldr	s14, [pc, #220]	@ 80037f8 <drawSignalParam+0x22c>
 800371c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003720:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003724:	db0a      	blt.n	800373c <drawSignalParam+0x170>
		freq /= 1000.0f;
 8003726:	ed97 7a07 	vldr	s14, [r7, #28]
 800372a:	eddf 6a33 	vldr	s13, [pc, #204]	@ 80037f8 <drawSignalParam+0x22c>
 800372e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003732:	edc7 7a07 	vstr	s15, [r7, #28]
		freq_postfix = "kHz";
 8003736:	4b34      	ldr	r3, [pc, #208]	@ (8003808 <drawSignalParam+0x23c>)
 8003738:	613b      	str	r3, [r7, #16]
 800373a:	e001      	b.n	8003740 <drawSignalParam+0x174>
	} else
		freq_postfix = " Hz";
 800373c:	4b33      	ldr	r3, [pc, #204]	@ (800380c <drawSignalParam+0x240>)
 800373e:	613b      	str	r3, [r7, #16]

	if (adc_period != 0)
 8003740:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003742:	2b00      	cmp	r3, #0
 8003744:	d020      	beq.n	8003788 <drawSignalParam+0x1bc>
		snprintf(string, size, "ampl:%3.1f%s~%3.1f%s freq:%3.0f%s  ", min, min_postfix, max, max_postfix, freq, freq_postfix);
 8003746:	6a38      	ldr	r0, [r7, #32]
 8003748:	f7fc ff06 	bl	8000558 <__aeabi_f2d>
 800374c:	4604      	mov	r4, r0
 800374e:	460d      	mov	r5, r1
 8003750:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8003752:	f7fc ff01 	bl	8000558 <__aeabi_f2d>
 8003756:	4680      	mov	r8, r0
 8003758:	4689      	mov	r9, r1
 800375a:	69f8      	ldr	r0, [r7, #28]
 800375c:	f7fc fefc 	bl	8000558 <__aeabi_f2d>
 8003760:	4602      	mov	r2, r0
 8003762:	460b      	mov	r3, r1
 8003764:	6939      	ldr	r1, [r7, #16]
 8003766:	910a      	str	r1, [sp, #40]	@ 0x28
 8003768:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800376c:	69bb      	ldr	r3, [r7, #24]
 800376e:	9306      	str	r3, [sp, #24]
 8003770:	e9cd 8904 	strd	r8, r9, [sp, #16]
 8003774:	697b      	ldr	r3, [r7, #20]
 8003776:	9302      	str	r3, [sp, #8]
 8003778:	e9cd 4500 	strd	r4, r5, [sp]
 800377c:	4a24      	ldr	r2, [pc, #144]	@ (8003810 <drawSignalParam+0x244>)
 800377e:	6879      	ldr	r1, [r7, #4]
 8003780:	68b8      	ldr	r0, [r7, #8]
 8003782:	f009 f8ed 	bl	800c960 <sniprintf>
 8003786:	e016      	b.n	80037b6 <drawSignalParam+0x1ea>
	else
		snprintf(string, size, "ampl:%3.1f%s~%3.1f%s freq:??? Hz  ", min, min_postfix, max, max_postfix);
 8003788:	6a38      	ldr	r0, [r7, #32]
 800378a:	f7fc fee5 	bl	8000558 <__aeabi_f2d>
 800378e:	4604      	mov	r4, r0
 8003790:	460d      	mov	r5, r1
 8003792:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8003794:	f7fc fee0 	bl	8000558 <__aeabi_f2d>
 8003798:	4602      	mov	r2, r0
 800379a:	460b      	mov	r3, r1
 800379c:	69b9      	ldr	r1, [r7, #24]
 800379e:	9106      	str	r1, [sp, #24]
 80037a0:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80037a4:	697b      	ldr	r3, [r7, #20]
 80037a6:	9302      	str	r3, [sp, #8]
 80037a8:	e9cd 4500 	strd	r4, r5, [sp]
 80037ac:	4a19      	ldr	r2, [pc, #100]	@ (8003814 <drawSignalParam+0x248>)
 80037ae:	6879      	ldr	r1, [r7, #4]
 80037b0:	68b8      	ldr	r0, [r7, #8]
 80037b2:	f009 f8d5 	bl	800c960 <sniprintf>

	ILI9341_WriteString(display, 98, 225, string, Font_7x10, ILI9341_WHITE, ILI9341_BLACK);
 80037b6:	2300      	movs	r3, #0
 80037b8:	9303      	str	r3, [sp, #12]
 80037ba:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80037be:	9302      	str	r3, [sp, #8]
 80037c0:	4a15      	ldr	r2, [pc, #84]	@ (8003818 <drawSignalParam+0x24c>)
 80037c2:	466b      	mov	r3, sp
 80037c4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80037c8:	e883 0003 	stmia.w	r3, {r0, r1}
 80037cc:	68bb      	ldr	r3, [r7, #8]
 80037ce:	22e1      	movs	r2, #225	@ 0xe1
 80037d0:	2162      	movs	r1, #98	@ 0x62
 80037d2:	68f8      	ldr	r0, [r7, #12]
 80037d4:	f7fe fc87 	bl	80020e6 <ILI9341_WriteString>
}
 80037d8:	bf00      	nop
 80037da:	3728      	adds	r7, #40	@ 0x28
 80037dc:	46bd      	mov	sp, r7
 80037de:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80037e2:	bf00      	nop
 80037e4:	4a496a80 	.word	0x4a496a80
 80037e8:	45800000 	.word	0x45800000
 80037ec:	49742400 	.word	0x49742400
 80037f0:	08010428 	.word	0x08010428
 80037f4:	0801042c 	.word	0x0801042c
 80037f8:	447a0000 	.word	0x447a0000
 80037fc:	08010430 	.word	0x08010430
 8003800:	08010434 	.word	0x08010434
 8003804:	08010438 	.word	0x08010438
 8003808:	0801043c 	.word	0x0801043c
 800380c:	08010440 	.word	0x08010440
 8003810:	08010444 	.word	0x08010444
 8003814:	08010468 	.word	0x08010468
 8003818:	20000000 	.word	0x20000000

0800381c <Oscilloscope_Process>:

void Oscilloscope_Process(void)
{
 800381c:	b5b0      	push	{r4, r5, r7, lr}
 800381e:	f5ad 7d00 	sub.w	sp, sp, #512	@ 0x200
 8003822:	af04      	add	r7, sp, #16
	// Draw axis
	if (event_axis) {
 8003824:	4ba2      	ldr	r3, [pc, #648]	@ (8003ab0 <Oscilloscope_Process+0x294>)
 8003826:	781b      	ldrb	r3, [r3, #0]
 8003828:	2b00      	cmp	r3, #0
 800382a:	d005      	beq.n	8003838 <Oscilloscope_Process+0x1c>
		drawAxis(&display);
 800382c:	48a1      	ldr	r0, [pc, #644]	@ (8003ab4 <Oscilloscope_Process+0x298>)
 800382e:	f7ff f9c3 	bl	8002bb8 <drawAxis>
		event_axis = 0;
 8003832:	4b9f      	ldr	r3, [pc, #636]	@ (8003ab0 <Oscilloscope_Process+0x294>)
 8003834:	2200      	movs	r2, #0
 8003836:	701a      	strb	r2, [r3, #0]
	}

	uint8_t local_event_adc = 0;
 8003838:	2300      	movs	r3, #0
 800383a:	f887 31ef 	strb.w	r3, [r7, #495]	@ 0x1ef
	if (event_adc) {
 800383e:	4b9e      	ldr	r3, [pc, #632]	@ (8003ab8 <Oscilloscope_Process+0x29c>)
 8003840:	781b      	ldrb	r3, [r3, #0]
 8003842:	2b00      	cmp	r3, #0
 8003844:	d005      	beq.n	8003852 <Oscilloscope_Process+0x36>
		local_event_adc = 1;
 8003846:	2301      	movs	r3, #1
 8003848:	f887 31ef 	strb.w	r3, [r7, #495]	@ 0x1ef
		event_adc = 0;
 800384c:	4b9a      	ldr	r3, [pc, #616]	@ (8003ab8 <Oscilloscope_Process+0x29c>)
 800384e:	2200      	movs	r2, #0
 8003850:	701a      	strb	r2, [r3, #0]
	}

	// Draw signals
	if (local_event_adc) {
 8003852:	f897 31ef 	ldrb.w	r3, [r7, #495]	@ 0x1ef
 8003856:	2b00      	cmp	r3, #0
 8003858:	d027      	beq.n	80038aa <Oscilloscope_Process+0x8e>

		if (menu_channel0_enabled)
 800385a:	4b98      	ldr	r3, [pc, #608]	@ (8003abc <Oscilloscope_Process+0x2a0>)
 800385c:	781b      	ldrb	r3, [r3, #0]
 800385e:	2b00      	cmp	r3, #0
 8003860:	d00f      	beq.n	8003882 <Oscilloscope_Process+0x66>
			drawSignal(&display, adc0_time, adc0, adc0_length, pixel_dirty0, cursor0, ILI9341_YELLOW);
 8003862:	4b97      	ldr	r3, [pc, #604]	@ (8003ac0 <Oscilloscope_Process+0x2a4>)
 8003864:	681a      	ldr	r2, [r3, #0]
 8003866:	4b97      	ldr	r3, [pc, #604]	@ (8003ac4 <Oscilloscope_Process+0x2a8>)
 8003868:	881b      	ldrh	r3, [r3, #0]
 800386a:	f64f 71e0 	movw	r1, #65504	@ 0xffe0
 800386e:	9102      	str	r1, [sp, #8]
 8003870:	9301      	str	r3, [sp, #4]
 8003872:	4b95      	ldr	r3, [pc, #596]	@ (8003ac8 <Oscilloscope_Process+0x2ac>)
 8003874:	9300      	str	r3, [sp, #0]
 8003876:	4613      	mov	r3, r2
 8003878:	4a94      	ldr	r2, [pc, #592]	@ (8003acc <Oscilloscope_Process+0x2b0>)
 800387a:	4995      	ldr	r1, [pc, #596]	@ (8003ad0 <Oscilloscope_Process+0x2b4>)
 800387c:	488d      	ldr	r0, [pc, #564]	@ (8003ab4 <Oscilloscope_Process+0x298>)
 800387e:	f7ff faed 	bl	8002e5c <drawSignal>

		if (menu_channel1_enabled)
 8003882:	4b94      	ldr	r3, [pc, #592]	@ (8003ad4 <Oscilloscope_Process+0x2b8>)
 8003884:	781b      	ldrb	r3, [r3, #0]
 8003886:	2b00      	cmp	r3, #0
 8003888:	d00f      	beq.n	80038aa <Oscilloscope_Process+0x8e>
			drawSignal(&display, adc1_time, adc1, adc1_length, pixel_dirty1, cursor1, ILI9341_CYAN);
 800388a:	4b93      	ldr	r3, [pc, #588]	@ (8003ad8 <Oscilloscope_Process+0x2bc>)
 800388c:	681a      	ldr	r2, [r3, #0]
 800388e:	4b93      	ldr	r3, [pc, #588]	@ (8003adc <Oscilloscope_Process+0x2c0>)
 8003890:	881b      	ldrh	r3, [r3, #0]
 8003892:	f240 71ff 	movw	r1, #2047	@ 0x7ff
 8003896:	9102      	str	r1, [sp, #8]
 8003898:	9301      	str	r3, [sp, #4]
 800389a:	4b91      	ldr	r3, [pc, #580]	@ (8003ae0 <Oscilloscope_Process+0x2c4>)
 800389c:	9300      	str	r3, [sp, #0]
 800389e:	4613      	mov	r3, r2
 80038a0:	4a90      	ldr	r2, [pc, #576]	@ (8003ae4 <Oscilloscope_Process+0x2c8>)
 80038a2:	4991      	ldr	r1, [pc, #580]	@ (8003ae8 <Oscilloscope_Process+0x2cc>)
 80038a4:	4883      	ldr	r0, [pc, #524]	@ (8003ab4 <Oscilloscope_Process+0x298>)
 80038a6:	f7ff fad9 	bl	8002e5c <drawSignal>
	}

	  char string[255];

	// Draw FPS
	if (frames > 60) {
 80038aa:	4b90      	ldr	r3, [pc, #576]	@ (8003aec <Oscilloscope_Process+0x2d0>)
 80038ac:	781b      	ldrb	r3, [r3, #0]
 80038ae:	2b3c      	cmp	r3, #60	@ 0x3c
 80038b0:	d934      	bls.n	800391c <Oscilloscope_Process+0x100>
		snprintf(string, 255, "FPS: %5i", (int)(1000.0f / ((float)(HAL_GetTick() - frames_ticks) / 60.0f)));
 80038b2:	f001 fe49 	bl	8005548 <HAL_GetTick>
 80038b6:	4602      	mov	r2, r0
 80038b8:	4b8d      	ldr	r3, [pc, #564]	@ (8003af0 <Oscilloscope_Process+0x2d4>)
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	1ad3      	subs	r3, r2, r3
 80038be:	ee07 3a90 	vmov	s15, r3
 80038c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80038c6:	eddf 6a8b 	vldr	s13, [pc, #556]	@ 8003af4 <Oscilloscope_Process+0x2d8>
 80038ca:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80038ce:	eddf 6a8a 	vldr	s13, [pc, #552]	@ 8003af8 <Oscilloscope_Process+0x2dc>
 80038d2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80038d6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80038da:	f107 00cc 	add.w	r0, r7, #204	@ 0xcc
 80038de:	ee17 3a90 	vmov	r3, s15
 80038e2:	4a86      	ldr	r2, [pc, #536]	@ (8003afc <Oscilloscope_Process+0x2e0>)
 80038e4:	21ff      	movs	r1, #255	@ 0xff
 80038e6:	f009 f83b 	bl	800c960 <sniprintf>
		ILI9341_WriteString(&display, 225, 5, string, Font_7x10, ILI9341_WHITE, ILI9341_BLACK);
 80038ea:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 80038ee:	2200      	movs	r2, #0
 80038f0:	9203      	str	r2, [sp, #12]
 80038f2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80038f6:	9202      	str	r2, [sp, #8]
 80038f8:	4981      	ldr	r1, [pc, #516]	@ (8003b00 <Oscilloscope_Process+0x2e4>)
 80038fa:	466a      	mov	r2, sp
 80038fc:	c903      	ldmia	r1, {r0, r1}
 80038fe:	e882 0003 	stmia.w	r2, {r0, r1}
 8003902:	2205      	movs	r2, #5
 8003904:	21e1      	movs	r1, #225	@ 0xe1
 8003906:	486b      	ldr	r0, [pc, #428]	@ (8003ab4 <Oscilloscope_Process+0x298>)
 8003908:	f7fe fbed 	bl	80020e6 <ILI9341_WriteString>

		frames = 0;
 800390c:	4b77      	ldr	r3, [pc, #476]	@ (8003aec <Oscilloscope_Process+0x2d0>)
 800390e:	2200      	movs	r2, #0
 8003910:	701a      	strb	r2, [r3, #0]
		frames_ticks = HAL_GetTick();
 8003912:	f001 fe19 	bl	8005548 <HAL_GetTick>
 8003916:	4603      	mov	r3, r0
 8003918:	4a75      	ldr	r2, [pc, #468]	@ (8003af0 <Oscilloscope_Process+0x2d4>)
 800391a:	6013      	str	r3, [r2, #0]
	}

	// Handle button events
	if (event_button0) {
 800391c:	4b79      	ldr	r3, [pc, #484]	@ (8003b04 <Oscilloscope_Process+0x2e8>)
 800391e:	781b      	ldrb	r3, [r3, #0]
 8003920:	2b00      	cmp	r3, #0
 8003922:	d038      	beq.n	8003996 <Oscilloscope_Process+0x17a>

		if (!menu_extended) {
 8003924:	4b78      	ldr	r3, [pc, #480]	@ (8003b08 <Oscilloscope_Process+0x2ec>)
 8003926:	781b      	ldrb	r3, [r3, #0]
 8003928:	2b00      	cmp	r3, #0
 800392a:	d131      	bne.n	8003990 <Oscilloscope_Process+0x174>
			ILI9341_Rectangle(&display, menu_selector_x, menu_selector_y, 38, 13, ILI9341_BLACK);
 800392c:	4b77      	ldr	r3, [pc, #476]	@ (8003b0c <Oscilloscope_Process+0x2f0>)
 800392e:	8819      	ldrh	r1, [r3, #0]
 8003930:	4b77      	ldr	r3, [pc, #476]	@ (8003b10 <Oscilloscope_Process+0x2f4>)
 8003932:	881a      	ldrh	r2, [r3, #0]
 8003934:	2300      	movs	r3, #0
 8003936:	9301      	str	r3, [sp, #4]
 8003938:	230d      	movs	r3, #13
 800393a:	9300      	str	r3, [sp, #0]
 800393c:	2326      	movs	r3, #38	@ 0x26
 800393e:	485d      	ldr	r0, [pc, #372]	@ (8003ab4 <Oscilloscope_Process+0x298>)
 8003940:	f7fe fb16 	bl	8001f70 <ILI9341_Rectangle>

			menu_selected_item++;
 8003944:	4b73      	ldr	r3, [pc, #460]	@ (8003b14 <Oscilloscope_Process+0x2f8>)
 8003946:	f993 3000 	ldrsb.w	r3, [r3]
 800394a:	b2db      	uxtb	r3, r3
 800394c:	3301      	adds	r3, #1
 800394e:	b2db      	uxtb	r3, r3
 8003950:	b25a      	sxtb	r2, r3
 8003952:	4b70      	ldr	r3, [pc, #448]	@ (8003b14 <Oscilloscope_Process+0x2f8>)
 8003954:	701a      	strb	r2, [r3, #0]

			if (menu_selected_item > 3)
 8003956:	4b6f      	ldr	r3, [pc, #444]	@ (8003b14 <Oscilloscope_Process+0x2f8>)
 8003958:	f993 3000 	ldrsb.w	r3, [r3]
 800395c:	2b03      	cmp	r3, #3
 800395e:	dd02      	ble.n	8003966 <Oscilloscope_Process+0x14a>
				menu_selected_item = 2;
 8003960:	4b6c      	ldr	r3, [pc, #432]	@ (8003b14 <Oscilloscope_Process+0x2f8>)
 8003962:	2202      	movs	r2, #2
 8003964:	701a      	strb	r2, [r3, #0]

			menu_selector_x = 20 + 38 * menu_selected_item;
 8003966:	4b6b      	ldr	r3, [pc, #428]	@ (8003b14 <Oscilloscope_Process+0x2f8>)
 8003968:	f993 3000 	ldrsb.w	r3, [r3]
 800396c:	b29b      	uxth	r3, r3
 800396e:	461a      	mov	r2, r3
 8003970:	00d2      	lsls	r2, r2, #3
 8003972:	441a      	add	r2, r3
 8003974:	0052      	lsls	r2, r2, #1
 8003976:	4413      	add	r3, r2
 8003978:	005b      	lsls	r3, r3, #1
 800397a:	b29b      	uxth	r3, r3
 800397c:	3314      	adds	r3, #20
 800397e:	b29a      	uxth	r2, r3
 8003980:	4b62      	ldr	r3, [pc, #392]	@ (8003b0c <Oscilloscope_Process+0x2f0>)
 8003982:	801a      	strh	r2, [r3, #0]
			menu_selector_y = 3;
 8003984:	4b62      	ldr	r3, [pc, #392]	@ (8003b10 <Oscilloscope_Process+0x2f4>)
 8003986:	2203      	movs	r2, #3
 8003988:	801a      	strh	r2, [r3, #0]

			event_selector = 1;
 800398a:	4b63      	ldr	r3, [pc, #396]	@ (8003b18 <Oscilloscope_Process+0x2fc>)
 800398c:	2201      	movs	r2, #1
 800398e:	701a      	strb	r2, [r3, #0]
		}

		event_button0 = 0;
 8003990:	4b5c      	ldr	r3, [pc, #368]	@ (8003b04 <Oscilloscope_Process+0x2e8>)
 8003992:	2200      	movs	r2, #0
 8003994:	701a      	strb	r2, [r3, #0]
	}

	if (event_button1) {
 8003996:	4b61      	ldr	r3, [pc, #388]	@ (8003b1c <Oscilloscope_Process+0x300>)
 8003998:	781b      	ldrb	r3, [r3, #0]
 800399a:	2b00      	cmp	r3, #0
 800399c:	d03e      	beq.n	8003a1c <Oscilloscope_Process+0x200>
		menu_extended = !menu_extended;
 800399e:	4b5a      	ldr	r3, [pc, #360]	@ (8003b08 <Oscilloscope_Process+0x2ec>)
 80039a0:	781b      	ldrb	r3, [r3, #0]
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	bf0c      	ite	eq
 80039a6:	2301      	moveq	r3, #1
 80039a8:	2300      	movne	r3, #0
 80039aa:	b2db      	uxtb	r3, r3
 80039ac:	461a      	mov	r2, r3
 80039ae:	4b56      	ldr	r3, [pc, #344]	@ (8003b08 <Oscilloscope_Process+0x2ec>)
 80039b0:	701a      	strb	r2, [r3, #0]

		if (!menu_extended) {
 80039b2:	4b55      	ldr	r3, [pc, #340]	@ (8003b08 <Oscilloscope_Process+0x2ec>)
 80039b4:	781b      	ldrb	r3, [r3, #0]
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d127      	bne.n	8003a0a <Oscilloscope_Process+0x1ee>
			ILI9341_Rectangle(&display, menu_selector_x, menu_selector_y, 38, 13, ILI9341_BLACK);
 80039ba:	4b54      	ldr	r3, [pc, #336]	@ (8003b0c <Oscilloscope_Process+0x2f0>)
 80039bc:	8819      	ldrh	r1, [r3, #0]
 80039be:	4b54      	ldr	r3, [pc, #336]	@ (8003b10 <Oscilloscope_Process+0x2f4>)
 80039c0:	881a      	ldrh	r2, [r3, #0]
 80039c2:	2300      	movs	r3, #0
 80039c4:	9301      	str	r3, [sp, #4]
 80039c6:	230d      	movs	r3, #13
 80039c8:	9300      	str	r3, [sp, #0]
 80039ca:	2326      	movs	r3, #38	@ 0x26
 80039cc:	4839      	ldr	r0, [pc, #228]	@ (8003ab4 <Oscilloscope_Process+0x298>)
 80039ce:	f7fe facf 	bl	8001f70 <ILI9341_Rectangle>

			menu_selected_item = 2;
 80039d2:	4b50      	ldr	r3, [pc, #320]	@ (8003b14 <Oscilloscope_Process+0x2f8>)
 80039d4:	2202      	movs	r2, #2
 80039d6:	701a      	strb	r2, [r3, #0]

			menu_selector_x = 20 + 38 * menu_selected_item;
 80039d8:	4b4e      	ldr	r3, [pc, #312]	@ (8003b14 <Oscilloscope_Process+0x2f8>)
 80039da:	f993 3000 	ldrsb.w	r3, [r3]
 80039de:	b29b      	uxth	r3, r3
 80039e0:	461a      	mov	r2, r3
 80039e2:	00d2      	lsls	r2, r2, #3
 80039e4:	441a      	add	r2, r3
 80039e6:	0052      	lsls	r2, r2, #1
 80039e8:	4413      	add	r3, r2
 80039ea:	005b      	lsls	r3, r3, #1
 80039ec:	b29b      	uxth	r3, r3
 80039ee:	3314      	adds	r3, #20
 80039f0:	b29a      	uxth	r2, r3
 80039f2:	4b46      	ldr	r3, [pc, #280]	@ (8003b0c <Oscilloscope_Process+0x2f0>)
 80039f4:	801a      	strh	r2, [r3, #0]
			menu_selector_y = 3;
 80039f6:	4b46      	ldr	r3, [pc, #280]	@ (8003b10 <Oscilloscope_Process+0x2f4>)
 80039f8:	2203      	movs	r2, #3
 80039fa:	801a      	strh	r2, [r3, #0]

			mode = 0;
 80039fc:	4b48      	ldr	r3, [pc, #288]	@ (8003b20 <Oscilloscope_Process+0x304>)
 80039fe:	2200      	movs	r2, #0
 8003a00:	701a      	strb	r2, [r3, #0]
			event_selector = 1;
 8003a02:	4b45      	ldr	r3, [pc, #276]	@ (8003b18 <Oscilloscope_Process+0x2fc>)
 8003a04:	2201      	movs	r2, #1
 8003a06:	701a      	strb	r2, [r3, #0]
 8003a08:	e002      	b.n	8003a10 <Oscilloscope_Process+0x1f4>
		} else
			mode = 1;
 8003a0a:	4b45      	ldr	r3, [pc, #276]	@ (8003b20 <Oscilloscope_Process+0x304>)
 8003a0c:	2201      	movs	r2, #1
 8003a0e:	701a      	strb	r2, [r3, #0]

		event_mode = 1;
 8003a10:	4b44      	ldr	r3, [pc, #272]	@ (8003b24 <Oscilloscope_Process+0x308>)
 8003a12:	2201      	movs	r2, #1
 8003a14:	701a      	strb	r2, [r3, #0]
		event_button1 = 0;
 8003a16:	4b41      	ldr	r3, [pc, #260]	@ (8003b1c <Oscilloscope_Process+0x300>)
 8003a18:	2200      	movs	r2, #0
 8003a1a:	701a      	strb	r2, [r3, #0]
	}

	if (event_button2) {
 8003a1c:	4b42      	ldr	r3, [pc, #264]	@ (8003b28 <Oscilloscope_Process+0x30c>)
 8003a1e:	781b      	ldrb	r3, [r3, #0]
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d039      	beq.n	8003a98 <Oscilloscope_Process+0x27c>
		if (menu_selected_item == 2) {
 8003a24:	4b3b      	ldr	r3, [pc, #236]	@ (8003b14 <Oscilloscope_Process+0x2f8>)
 8003a26:	f993 3000 	ldrsb.w	r3, [r3]
 8003a2a:	2b02      	cmp	r3, #2
 8003a2c:	d111      	bne.n	8003a52 <Oscilloscope_Process+0x236>
			menu_channel0_enabled = !menu_channel0_enabled;
 8003a2e:	4b23      	ldr	r3, [pc, #140]	@ (8003abc <Oscilloscope_Process+0x2a0>)
 8003a30:	781b      	ldrb	r3, [r3, #0]
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	bf0c      	ite	eq
 8003a36:	2301      	moveq	r3, #1
 8003a38:	2300      	movne	r3, #0
 8003a3a:	b2db      	uxtb	r3, r3
 8003a3c:	461a      	mov	r2, r3
 8003a3e:	4b1f      	ldr	r3, [pc, #124]	@ (8003abc <Oscilloscope_Process+0x2a0>)
 8003a40:	701a      	strb	r2, [r3, #0]

			if (!menu_channel0_enabled)
 8003a42:	4b1e      	ldr	r3, [pc, #120]	@ (8003abc <Oscilloscope_Process+0x2a0>)
 8003a44:	781b      	ldrb	r3, [r3, #0]
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d103      	bne.n	8003a52 <Oscilloscope_Process+0x236>
				clearSignal(&display, pixel_dirty0);
 8003a4a:	491f      	ldr	r1, [pc, #124]	@ (8003ac8 <Oscilloscope_Process+0x2ac>)
 8003a4c:	4819      	ldr	r0, [pc, #100]	@ (8003ab4 <Oscilloscope_Process+0x298>)
 8003a4e:	f7ff fd4b 	bl	80034e8 <clearSignal>
		}

		if (menu_selected_item == 3) {
 8003a52:	4b30      	ldr	r3, [pc, #192]	@ (8003b14 <Oscilloscope_Process+0x2f8>)
 8003a54:	f993 3000 	ldrsb.w	r3, [r3]
 8003a58:	2b03      	cmp	r3, #3
 8003a5a:	d111      	bne.n	8003a80 <Oscilloscope_Process+0x264>
			menu_channel1_enabled = !menu_channel1_enabled;
 8003a5c:	4b1d      	ldr	r3, [pc, #116]	@ (8003ad4 <Oscilloscope_Process+0x2b8>)
 8003a5e:	781b      	ldrb	r3, [r3, #0]
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	bf0c      	ite	eq
 8003a64:	2301      	moveq	r3, #1
 8003a66:	2300      	movne	r3, #0
 8003a68:	b2db      	uxtb	r3, r3
 8003a6a:	461a      	mov	r2, r3
 8003a6c:	4b19      	ldr	r3, [pc, #100]	@ (8003ad4 <Oscilloscope_Process+0x2b8>)
 8003a6e:	701a      	strb	r2, [r3, #0]

			if (!menu_channel1_enabled)
 8003a70:	4b18      	ldr	r3, [pc, #96]	@ (8003ad4 <Oscilloscope_Process+0x2b8>)
 8003a72:	781b      	ldrb	r3, [r3, #0]
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d103      	bne.n	8003a80 <Oscilloscope_Process+0x264>
				clearSignal(&display, pixel_dirty1);
 8003a78:	4919      	ldr	r1, [pc, #100]	@ (8003ae0 <Oscilloscope_Process+0x2c4>)
 8003a7a:	480e      	ldr	r0, [pc, #56]	@ (8003ab4 <Oscilloscope_Process+0x298>)
 8003a7c:	f7ff fd34 	bl	80034e8 <clearSignal>
		}

		event_cursor  = 1;
 8003a80:	4b2a      	ldr	r3, [pc, #168]	@ (8003b2c <Oscilloscope_Process+0x310>)
 8003a82:	2201      	movs	r2, #1
 8003a84:	701a      	strb	r2, [r3, #0]
		event_trigger = 1;
 8003a86:	4b2a      	ldr	r3, [pc, #168]	@ (8003b30 <Oscilloscope_Process+0x314>)
 8003a88:	2201      	movs	r2, #1
 8003a8a:	701a      	strb	r2, [r3, #0]
		event_channel = 1;
 8003a8c:	4b29      	ldr	r3, [pc, #164]	@ (8003b34 <Oscilloscope_Process+0x318>)
 8003a8e:	2201      	movs	r2, #1
 8003a90:	701a      	strb	r2, [r3, #0]
		event_button2 = 0;
 8003a92:	4b25      	ldr	r3, [pc, #148]	@ (8003b28 <Oscilloscope_Process+0x30c>)
 8003a94:	2200      	movs	r2, #0
 8003a96:	701a      	strb	r2, [r3, #0]
	}

	// Handle UI redraw channel events
	if (event_channel) {
 8003a98:	4b26      	ldr	r3, [pc, #152]	@ (8003b34 <Oscilloscope_Process+0x318>)
 8003a9a:	781b      	ldrb	r3, [r3, #0]
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d07f      	beq.n	8003ba0 <Oscilloscope_Process+0x384>
		uint16_t channel0_color = menu_channel0_enabled ? ILI9341_YELLOW  : ILI9341_COLOR565(60, 60, 0);
 8003aa0:	4b06      	ldr	r3, [pc, #24]	@ (8003abc <Oscilloscope_Process+0x2a0>)
 8003aa2:	781b      	ldrb	r3, [r3, #0]
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d047      	beq.n	8003b38 <Oscilloscope_Process+0x31c>
 8003aa8:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8003aac:	e046      	b.n	8003b3c <Oscilloscope_Process+0x320>
 8003aae:	bf00      	nop
 8003ab0:	2000d100 	.word	0x2000d100
 8003ab4:	2000d4b8 	.word	0x2000d4b8
 8003ab8:	2001352d 	.word	0x2001352d
 8003abc:	2000d10b 	.word	0x2000d10b
 8003ac0:	2000d510 	.word	0x2000d510
 8003ac4:	2000d0f4 	.word	0x2000d0f4
 8003ac8:	20013540 	.word	0x20013540
 8003acc:	2001152c 	.word	0x2001152c
 8003ad0:	2000d52c 	.word	0x2000d52c
 8003ad4:	2000d10c 	.word	0x2000d10c
 8003ad8:	2000d514 	.word	0x2000d514
 8003adc:	2000d0f6 	.word	0x2000d0f6
 8003ae0:	200139a0 	.word	0x200139a0
 8003ae4:	2001252c 	.word	0x2001252c
 8003ae8:	2000f52c 	.word	0x2000f52c
 8003aec:	20013538 	.word	0x20013538
 8003af0:	2001353c 	.word	0x2001353c
 8003af4:	42700000 	.word	0x42700000
 8003af8:	447a0000 	.word	0x447a0000
 8003afc:	0801048c 	.word	0x0801048c
 8003b00:	20000000 	.word	0x20000000
 8003b04:	2001352e 	.word	0x2001352e
 8003b08:	20013531 	.word	0x20013531
 8003b0c:	2000d10e 	.word	0x2000d10e
 8003b10:	2000d110 	.word	0x2000d110
 8003b14:	2000d10d 	.word	0x2000d10d
 8003b18:	2000d107 	.word	0x2000d107
 8003b1c:	2001352f 	.word	0x2001352f
 8003b20:	20013532 	.word	0x20013532
 8003b24:	2000d101 	.word	0x2000d101
 8003b28:	20013530 	.word	0x20013530
 8003b2c:	2000d102 	.word	0x2000d102
 8003b30:	2000d103 	.word	0x2000d103
 8003b34:	2000d104 	.word	0x2000d104
 8003b38:	f643 13e0 	movw	r3, #14816	@ 0x39e0
 8003b3c:	f8a7 31de 	strh.w	r3, [r7, #478]	@ 0x1de
		uint16_t channel1_color = menu_channel1_enabled ? ILI9341_CYAN    : ILI9341_COLOR565(0, 60, 60);
 8003b40:	4b5e      	ldr	r3, [pc, #376]	@ (8003cbc <Oscilloscope_Process+0x4a0>)
 8003b42:	781b      	ldrb	r3, [r3, #0]
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d002      	beq.n	8003b4e <Oscilloscope_Process+0x332>
 8003b48:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 8003b4c:	e001      	b.n	8003b52 <Oscilloscope_Process+0x336>
 8003b4e:	f240 13e7 	movw	r3, #487	@ 0x1e7
 8003b52:	f8a7 31dc 	strh.w	r3, [r7, #476]	@ 0x1dc

		ILI9341_WriteString(&display, 110 - 12, 5, " CH1 ", Font_7x10, ILI9341_BLACK, channel0_color);
 8003b56:	f8b7 31de 	ldrh.w	r3, [r7, #478]	@ 0x1de
 8003b5a:	9303      	str	r3, [sp, #12]
 8003b5c:	2300      	movs	r3, #0
 8003b5e:	9302      	str	r3, [sp, #8]
 8003b60:	4a57      	ldr	r2, [pc, #348]	@ (8003cc0 <Oscilloscope_Process+0x4a4>)
 8003b62:	466b      	mov	r3, sp
 8003b64:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003b68:	e883 0003 	stmia.w	r3, {r0, r1}
 8003b6c:	4b55      	ldr	r3, [pc, #340]	@ (8003cc4 <Oscilloscope_Process+0x4a8>)
 8003b6e:	2205      	movs	r2, #5
 8003b70:	2162      	movs	r1, #98	@ 0x62
 8003b72:	4855      	ldr	r0, [pc, #340]	@ (8003cc8 <Oscilloscope_Process+0x4ac>)
 8003b74:	f7fe fab7 	bl	80020e6 <ILI9341_WriteString>
		ILI9341_WriteString(&display, 148 - 12, 5, " CH2 ", Font_7x10, ILI9341_BLACK, channel1_color);
 8003b78:	f8b7 31dc 	ldrh.w	r3, [r7, #476]	@ 0x1dc
 8003b7c:	9303      	str	r3, [sp, #12]
 8003b7e:	2300      	movs	r3, #0
 8003b80:	9302      	str	r3, [sp, #8]
 8003b82:	4a4f      	ldr	r2, [pc, #316]	@ (8003cc0 <Oscilloscope_Process+0x4a4>)
 8003b84:	466b      	mov	r3, sp
 8003b86:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003b8a:	e883 0003 	stmia.w	r3, {r0, r1}
 8003b8e:	4b4f      	ldr	r3, [pc, #316]	@ (8003ccc <Oscilloscope_Process+0x4b0>)
 8003b90:	2205      	movs	r2, #5
 8003b92:	2188      	movs	r1, #136	@ 0x88
 8003b94:	484c      	ldr	r0, [pc, #304]	@ (8003cc8 <Oscilloscope_Process+0x4ac>)
 8003b96:	f7fe faa6 	bl	80020e6 <ILI9341_WriteString>

		event_channel = 0;
 8003b9a:	4b4d      	ldr	r3, [pc, #308]	@ (8003cd0 <Oscilloscope_Process+0x4b4>)
 8003b9c:	2200      	movs	r2, #0
 8003b9e:	701a      	strb	r2, [r3, #0]
	}

	// Handle encoder0
	int32_t encoder0_curr = __HAL_TIM_GET_COUNTER(&htim3);
 8003ba0:	4b4c      	ldr	r3, [pc, #304]	@ (8003cd4 <Oscilloscope_Process+0x4b8>)
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ba6:	f8c7 31d8 	str.w	r3, [r7, #472]	@ 0x1d8
	encoder0_curr = 32767 - ((encoder0_curr - 1) & 0xFFFF) / 2;
 8003baa:	f8d7 31d8 	ldr.w	r3, [r7, #472]	@ 0x1d8
 8003bae:	3b01      	subs	r3, #1
 8003bb0:	b29b      	uxth	r3, r3
 8003bb2:	0fda      	lsrs	r2, r3, #31
 8003bb4:	4413      	add	r3, r2
 8003bb6:	105b      	asrs	r3, r3, #1
 8003bb8:	425b      	negs	r3, r3
 8003bba:	f503 43ff 	add.w	r3, r3, #32640	@ 0x7f80
 8003bbe:	337f      	adds	r3, #127	@ 0x7f
 8003bc0:	f8c7 31d8 	str.w	r3, [r7, #472]	@ 0x1d8

	if(encoder0_curr != encoder0_prev) {
 8003bc4:	4b44      	ldr	r3, [pc, #272]	@ (8003cd8 <Oscilloscope_Process+0x4bc>)
 8003bc6:	881b      	ldrh	r3, [r3, #0]
 8003bc8:	461a      	mov	r2, r3
 8003bca:	f8d7 31d8 	ldr.w	r3, [r7, #472]	@ 0x1d8
 8003bce:	4293      	cmp	r3, r2
 8003bd0:	f000 80dd 	beq.w	8003d8e <Oscilloscope_Process+0x572>
		int32_t delta = encoder0_curr - encoder0_prev;
 8003bd4:	4b40      	ldr	r3, [pc, #256]	@ (8003cd8 <Oscilloscope_Process+0x4bc>)
 8003bd6:	881b      	ldrh	r3, [r3, #0]
 8003bd8:	461a      	mov	r2, r3
 8003bda:	f8d7 31d8 	ldr.w	r3, [r7, #472]	@ 0x1d8
 8003bde:	1a9b      	subs	r3, r3, r2
 8003be0:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8

		if (delta > 10)
 8003be4:	f8d7 31e8 	ldr.w	r3, [r7, #488]	@ 0x1e8
 8003be8:	2b0a      	cmp	r3, #10
 8003bea:	dd03      	ble.n	8003bf4 <Oscilloscope_Process+0x3d8>
			delta = -1;
 8003bec:	f04f 33ff 	mov.w	r3, #4294967295
 8003bf0:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8

		if (delta < -10)
 8003bf4:	f8d7 31e8 	ldr.w	r3, [r7, #488]	@ 0x1e8
 8003bf8:	f113 0f0a 	cmn.w	r3, #10
 8003bfc:	da02      	bge.n	8003c04 <Oscilloscope_Process+0x3e8>
			delta = 1;
 8003bfe:	2301      	movs	r3, #1
 8003c00:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8

		if (menu_extended) {
 8003c04:	4b35      	ldr	r3, [pc, #212]	@ (8003cdc <Oscilloscope_Process+0x4c0>)
 8003c06:	781b      	ldrb	r3, [r3, #0]
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d071      	beq.n	8003cf0 <Oscilloscope_Process+0x4d4>
			ILI9341_Rectangle(&display, menu_selector_x, menu_selector_y, 38, 13, ILI9341_BLACK);
 8003c0c:	4b34      	ldr	r3, [pc, #208]	@ (8003ce0 <Oscilloscope_Process+0x4c4>)
 8003c0e:	8819      	ldrh	r1, [r3, #0]
 8003c10:	4b34      	ldr	r3, [pc, #208]	@ (8003ce4 <Oscilloscope_Process+0x4c8>)
 8003c12:	881a      	ldrh	r2, [r3, #0]
 8003c14:	2300      	movs	r3, #0
 8003c16:	9301      	str	r3, [sp, #4]
 8003c18:	230d      	movs	r3, #13
 8003c1a:	9300      	str	r3, [sp, #0]
 8003c1c:	2326      	movs	r3, #38	@ 0x26
 8003c1e:	482a      	ldr	r0, [pc, #168]	@ (8003cc8 <Oscilloscope_Process+0x4ac>)
 8003c20:	f7fe f9a6 	bl	8001f70 <ILI9341_Rectangle>

			menu_selected_item += delta;
 8003c24:	f8d7 31e8 	ldr.w	r3, [r7, #488]	@ 0x1e8
 8003c28:	b2da      	uxtb	r2, r3
 8003c2a:	4b2f      	ldr	r3, [pc, #188]	@ (8003ce8 <Oscilloscope_Process+0x4cc>)
 8003c2c:	f993 3000 	ldrsb.w	r3, [r3]
 8003c30:	b2db      	uxtb	r3, r3
 8003c32:	4413      	add	r3, r2
 8003c34:	b2db      	uxtb	r3, r3
 8003c36:	b25a      	sxtb	r2, r3
 8003c38:	4b2b      	ldr	r3, [pc, #172]	@ (8003ce8 <Oscilloscope_Process+0x4cc>)
 8003c3a:	701a      	strb	r2, [r3, #0]

			if (menu_selected_item < 0)
 8003c3c:	4b2a      	ldr	r3, [pc, #168]	@ (8003ce8 <Oscilloscope_Process+0x4cc>)
 8003c3e:	f993 3000 	ldrsb.w	r3, [r3]
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	da02      	bge.n	8003c4c <Oscilloscope_Process+0x430>
				menu_selected_item = 0;
 8003c46:	4b28      	ldr	r3, [pc, #160]	@ (8003ce8 <Oscilloscope_Process+0x4cc>)
 8003c48:	2200      	movs	r2, #0
 8003c4a:	701a      	strb	r2, [r3, #0]

			if (menu_selected_item > 5)
 8003c4c:	4b26      	ldr	r3, [pc, #152]	@ (8003ce8 <Oscilloscope_Process+0x4cc>)
 8003c4e:	f993 3000 	ldrsb.w	r3, [r3]
 8003c52:	2b05      	cmp	r3, #5
 8003c54:	dd02      	ble.n	8003c5c <Oscilloscope_Process+0x440>
				menu_selected_item = 5;
 8003c56:	4b24      	ldr	r3, [pc, #144]	@ (8003ce8 <Oscilloscope_Process+0x4cc>)
 8003c58:	2205      	movs	r2, #5
 8003c5a:	701a      	strb	r2, [r3, #0]

			if (menu_selected_item < 4) {
 8003c5c:	4b22      	ldr	r3, [pc, #136]	@ (8003ce8 <Oscilloscope_Process+0x4cc>)
 8003c5e:	f993 3000 	ldrsb.w	r3, [r3]
 8003c62:	2b03      	cmp	r3, #3
 8003c64:	dc12      	bgt.n	8003c8c <Oscilloscope_Process+0x470>
				menu_selector_x = 20 + 38 * menu_selected_item;
 8003c66:	4b20      	ldr	r3, [pc, #128]	@ (8003ce8 <Oscilloscope_Process+0x4cc>)
 8003c68:	f993 3000 	ldrsb.w	r3, [r3]
 8003c6c:	b29b      	uxth	r3, r3
 8003c6e:	461a      	mov	r2, r3
 8003c70:	00d2      	lsls	r2, r2, #3
 8003c72:	441a      	add	r2, r3
 8003c74:	0052      	lsls	r2, r2, #1
 8003c76:	4413      	add	r3, r2
 8003c78:	005b      	lsls	r3, r3, #1
 8003c7a:	b29b      	uxth	r3, r3
 8003c7c:	3314      	adds	r3, #20
 8003c7e:	b29a      	uxth	r2, r3
 8003c80:	4b17      	ldr	r3, [pc, #92]	@ (8003ce0 <Oscilloscope_Process+0x4c4>)
 8003c82:	801a      	strh	r2, [r3, #0]
				menu_selector_y = 3;
 8003c84:	4b17      	ldr	r3, [pc, #92]	@ (8003ce4 <Oscilloscope_Process+0x4c8>)
 8003c86:	2203      	movs	r2, #3
 8003c88:	801a      	strh	r2, [r3, #0]
 8003c8a:	e012      	b.n	8003cb2 <Oscilloscope_Process+0x496>
			} else {
				menu_selector_x = 20 + 38 * (menu_selected_item - 4);
 8003c8c:	4b16      	ldr	r3, [pc, #88]	@ (8003ce8 <Oscilloscope_Process+0x4cc>)
 8003c8e:	f993 3000 	ldrsb.w	r3, [r3]
 8003c92:	3b04      	subs	r3, #4
 8003c94:	b29b      	uxth	r3, r3
 8003c96:	461a      	mov	r2, r3
 8003c98:	00d2      	lsls	r2, r2, #3
 8003c9a:	441a      	add	r2, r3
 8003c9c:	0052      	lsls	r2, r2, #1
 8003c9e:	4413      	add	r3, r2
 8003ca0:	005b      	lsls	r3, r3, #1
 8003ca2:	b29b      	uxth	r3, r3
 8003ca4:	3314      	adds	r3, #20
 8003ca6:	b29a      	uxth	r2, r3
 8003ca8:	4b0d      	ldr	r3, [pc, #52]	@ (8003ce0 <Oscilloscope_Process+0x4c4>)
 8003caa:	801a      	strh	r2, [r3, #0]
				menu_selector_y = 223;
 8003cac:	4b0d      	ldr	r3, [pc, #52]	@ (8003ce4 <Oscilloscope_Process+0x4c8>)
 8003cae:	22df      	movs	r2, #223	@ 0xdf
 8003cb0:	801a      	strh	r2, [r3, #0]
			}

			event_selector = 1;
 8003cb2:	4b0e      	ldr	r3, [pc, #56]	@ (8003cec <Oscilloscope_Process+0x4d0>)
 8003cb4:	2201      	movs	r2, #1
 8003cb6:	701a      	strb	r2, [r3, #0]
 8003cb8:	e05e      	b.n	8003d78 <Oscilloscope_Process+0x55c>
 8003cba:	bf00      	nop
 8003cbc:	2000d10c 	.word	0x2000d10c
 8003cc0:	20000000 	.word	0x20000000
 8003cc4:	08010498 	.word	0x08010498
 8003cc8:	2000d4b8 	.word	0x2000d4b8
 8003ccc:	080104a0 	.word	0x080104a0
 8003cd0:	2000d104 	.word	0x2000d104
 8003cd4:	20013f50 	.word	0x20013f50
 8003cd8:	20013534 	.word	0x20013534
 8003cdc:	20013531 	.word	0x20013531
 8003ce0:	2000d10e 	.word	0x2000d10e
 8003ce4:	2000d110 	.word	0x2000d110
 8003ce8:	2000d10d 	.word	0x2000d10d
 8003cec:	2000d107 	.word	0x2000d107

		} else {

			if (menu_selected_item == 2) {
 8003cf0:	4ba0      	ldr	r3, [pc, #640]	@ (8003f74 <Oscilloscope_Process+0x758>)
 8003cf2:	f993 3000 	ldrsb.w	r3, [r3]
 8003cf6:	2b02      	cmp	r3, #2
 8003cf8:	d11c      	bne.n	8003d34 <Oscilloscope_Process+0x518>
				clearCursor(&display, cursor0);
 8003cfa:	4b9f      	ldr	r3, [pc, #636]	@ (8003f78 <Oscilloscope_Process+0x75c>)
 8003cfc:	881b      	ldrh	r3, [r3, #0]
 8003cfe:	4619      	mov	r1, r3
 8003d00:	489e      	ldr	r0, [pc, #632]	@ (8003f7c <Oscilloscope_Process+0x760>)
 8003d02:	f7fe ffd6 	bl	8002cb2 <clearCursor>
				cursor0 += delta;
 8003d06:	f8d7 31e8 	ldr.w	r3, [r7, #488]	@ 0x1e8
 8003d0a:	b29a      	uxth	r2, r3
 8003d0c:	4b9a      	ldr	r3, [pc, #616]	@ (8003f78 <Oscilloscope_Process+0x75c>)
 8003d0e:	881b      	ldrh	r3, [r3, #0]
 8003d10:	4413      	add	r3, r2
 8003d12:	b29a      	uxth	r2, r3
 8003d14:	4b98      	ldr	r3, [pc, #608]	@ (8003f78 <Oscilloscope_Process+0x75c>)
 8003d16:	801a      	strh	r2, [r3, #0]

				if (cursor0 < 20)
 8003d18:	4b97      	ldr	r3, [pc, #604]	@ (8003f78 <Oscilloscope_Process+0x75c>)
 8003d1a:	881b      	ldrh	r3, [r3, #0]
 8003d1c:	2b13      	cmp	r3, #19
 8003d1e:	d802      	bhi.n	8003d26 <Oscilloscope_Process+0x50a>
					cursor0 = 20;
 8003d20:	4b95      	ldr	r3, [pc, #596]	@ (8003f78 <Oscilloscope_Process+0x75c>)
 8003d22:	2214      	movs	r2, #20
 8003d24:	801a      	strh	r2, [r3, #0]

				if (cursor0 > 220)
 8003d26:	4b94      	ldr	r3, [pc, #592]	@ (8003f78 <Oscilloscope_Process+0x75c>)
 8003d28:	881b      	ldrh	r3, [r3, #0]
 8003d2a:	2bdc      	cmp	r3, #220	@ 0xdc
 8003d2c:	d902      	bls.n	8003d34 <Oscilloscope_Process+0x518>
					cursor0 = 220;
 8003d2e:	4b92      	ldr	r3, [pc, #584]	@ (8003f78 <Oscilloscope_Process+0x75c>)
 8003d30:	22dc      	movs	r2, #220	@ 0xdc
 8003d32:	801a      	strh	r2, [r3, #0]
			}

			if (menu_selected_item == 3) {
 8003d34:	4b8f      	ldr	r3, [pc, #572]	@ (8003f74 <Oscilloscope_Process+0x758>)
 8003d36:	f993 3000 	ldrsb.w	r3, [r3]
 8003d3a:	2b03      	cmp	r3, #3
 8003d3c:	d11c      	bne.n	8003d78 <Oscilloscope_Process+0x55c>
				clearCursor(&display, cursor1);
 8003d3e:	4b90      	ldr	r3, [pc, #576]	@ (8003f80 <Oscilloscope_Process+0x764>)
 8003d40:	881b      	ldrh	r3, [r3, #0]
 8003d42:	4619      	mov	r1, r3
 8003d44:	488d      	ldr	r0, [pc, #564]	@ (8003f7c <Oscilloscope_Process+0x760>)
 8003d46:	f7fe ffb4 	bl	8002cb2 <clearCursor>
				cursor1 += delta;
 8003d4a:	f8d7 31e8 	ldr.w	r3, [r7, #488]	@ 0x1e8
 8003d4e:	b29a      	uxth	r2, r3
 8003d50:	4b8b      	ldr	r3, [pc, #556]	@ (8003f80 <Oscilloscope_Process+0x764>)
 8003d52:	881b      	ldrh	r3, [r3, #0]
 8003d54:	4413      	add	r3, r2
 8003d56:	b29a      	uxth	r2, r3
 8003d58:	4b89      	ldr	r3, [pc, #548]	@ (8003f80 <Oscilloscope_Process+0x764>)
 8003d5a:	801a      	strh	r2, [r3, #0]

				if (cursor1 < 20)
 8003d5c:	4b88      	ldr	r3, [pc, #544]	@ (8003f80 <Oscilloscope_Process+0x764>)
 8003d5e:	881b      	ldrh	r3, [r3, #0]
 8003d60:	2b13      	cmp	r3, #19
 8003d62:	d802      	bhi.n	8003d6a <Oscilloscope_Process+0x54e>
					cursor1 = 20;
 8003d64:	4b86      	ldr	r3, [pc, #536]	@ (8003f80 <Oscilloscope_Process+0x764>)
 8003d66:	2214      	movs	r2, #20
 8003d68:	801a      	strh	r2, [r3, #0]

				if (cursor1 > 220)
 8003d6a:	4b85      	ldr	r3, [pc, #532]	@ (8003f80 <Oscilloscope_Process+0x764>)
 8003d6c:	881b      	ldrh	r3, [r3, #0]
 8003d6e:	2bdc      	cmp	r3, #220	@ 0xdc
 8003d70:	d902      	bls.n	8003d78 <Oscilloscope_Process+0x55c>
					cursor1 = 220;
 8003d72:	4b83      	ldr	r3, [pc, #524]	@ (8003f80 <Oscilloscope_Process+0x764>)
 8003d74:	22dc      	movs	r2, #220	@ 0xdc
 8003d76:	801a      	strh	r2, [r3, #0]
			}

		}

		event_cursor = 1;
 8003d78:	4b82      	ldr	r3, [pc, #520]	@ (8003f84 <Oscilloscope_Process+0x768>)
 8003d7a:	2201      	movs	r2, #1
 8003d7c:	701a      	strb	r2, [r3, #0]
		event_trigger = 1;
 8003d7e:	4b82      	ldr	r3, [pc, #520]	@ (8003f88 <Oscilloscope_Process+0x76c>)
 8003d80:	2201      	movs	r2, #1
 8003d82:	701a      	strb	r2, [r3, #0]
		encoder0_prev = encoder0_curr;
 8003d84:	f8d7 31d8 	ldr.w	r3, [r7, #472]	@ 0x1d8
 8003d88:	b29a      	uxth	r2, r3
 8003d8a:	4b80      	ldr	r3, [pc, #512]	@ (8003f8c <Oscilloscope_Process+0x770>)
 8003d8c:	801a      	strh	r2, [r3, #0]
	}

	// Handle UI redraw cursor events
	if (event_cursor) {
 8003d8e:	4b7d      	ldr	r3, [pc, #500]	@ (8003f84 <Oscilloscope_Process+0x768>)
 8003d90:	781b      	ldrb	r3, [r3, #0]
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d026      	beq.n	8003de4 <Oscilloscope_Process+0x5c8>
		clearCursor(&display, cursor0);
 8003d96:	4b78      	ldr	r3, [pc, #480]	@ (8003f78 <Oscilloscope_Process+0x75c>)
 8003d98:	881b      	ldrh	r3, [r3, #0]
 8003d9a:	4619      	mov	r1, r3
 8003d9c:	4877      	ldr	r0, [pc, #476]	@ (8003f7c <Oscilloscope_Process+0x760>)
 8003d9e:	f7fe ff88 	bl	8002cb2 <clearCursor>
		clearCursor(&display, cursor1);
 8003da2:	4b77      	ldr	r3, [pc, #476]	@ (8003f80 <Oscilloscope_Process+0x764>)
 8003da4:	881b      	ldrh	r3, [r3, #0]
 8003da6:	4619      	mov	r1, r3
 8003da8:	4874      	ldr	r0, [pc, #464]	@ (8003f7c <Oscilloscope_Process+0x760>)
 8003daa:	f7fe ff82 	bl	8002cb2 <clearCursor>

		if (menu_channel0_enabled)
 8003dae:	4b78      	ldr	r3, [pc, #480]	@ (8003f90 <Oscilloscope_Process+0x774>)
 8003db0:	781b      	ldrb	r3, [r3, #0]
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d007      	beq.n	8003dc6 <Oscilloscope_Process+0x5aa>
			drawCursor(&display, cursor0, "C1", ILI9341_YELLOW);
 8003db6:	4b70      	ldr	r3, [pc, #448]	@ (8003f78 <Oscilloscope_Process+0x75c>)
 8003db8:	8819      	ldrh	r1, [r3, #0]
 8003dba:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8003dbe:	4a75      	ldr	r2, [pc, #468]	@ (8003f94 <Oscilloscope_Process+0x778>)
 8003dc0:	486e      	ldr	r0, [pc, #440]	@ (8003f7c <Oscilloscope_Process+0x760>)
 8003dc2:	f7fe ffa3 	bl	8002d0c <drawCursor>

		if (menu_channel1_enabled)
 8003dc6:	4b74      	ldr	r3, [pc, #464]	@ (8003f98 <Oscilloscope_Process+0x77c>)
 8003dc8:	781b      	ldrb	r3, [r3, #0]
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d007      	beq.n	8003dde <Oscilloscope_Process+0x5c2>
			drawCursor(&display, cursor1, "C2", ILI9341_CYAN);
 8003dce:	4b6c      	ldr	r3, [pc, #432]	@ (8003f80 <Oscilloscope_Process+0x764>)
 8003dd0:	8819      	ldrh	r1, [r3, #0]
 8003dd2:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 8003dd6:	4a71      	ldr	r2, [pc, #452]	@ (8003f9c <Oscilloscope_Process+0x780>)
 8003dd8:	4868      	ldr	r0, [pc, #416]	@ (8003f7c <Oscilloscope_Process+0x760>)
 8003dda:	f7fe ff97 	bl	8002d0c <drawCursor>

		event_cursor = 0;
 8003dde:	4b69      	ldr	r3, [pc, #420]	@ (8003f84 <Oscilloscope_Process+0x768>)
 8003de0:	2200      	movs	r2, #0
 8003de2:	701a      	strb	r2, [r3, #0]
	}

	// Handle encoder1
	int32_t encoder1_curr = __HAL_TIM_GET_COUNTER(&htim4);
 8003de4:	4b6e      	ldr	r3, [pc, #440]	@ (8003fa0 <Oscilloscope_Process+0x784>)
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003dea:	f8c7 31d4 	str.w	r3, [r7, #468]	@ 0x1d4
	encoder1_curr = 32767 - ((encoder1_curr - 1) & 0xFFFF) / 2;
 8003dee:	f8d7 31d4 	ldr.w	r3, [r7, #468]	@ 0x1d4
 8003df2:	3b01      	subs	r3, #1
 8003df4:	b29b      	uxth	r3, r3
 8003df6:	0fda      	lsrs	r2, r3, #31
 8003df8:	4413      	add	r3, r2
 8003dfa:	105b      	asrs	r3, r3, #1
 8003dfc:	425b      	negs	r3, r3
 8003dfe:	f503 43ff 	add.w	r3, r3, #32640	@ 0x7f80
 8003e02:	337f      	adds	r3, #127	@ 0x7f
 8003e04:	f8c7 31d4 	str.w	r3, [r7, #468]	@ 0x1d4

	if(encoder1_curr != encoder1_prev || event_trigger) {
 8003e08:	4b66      	ldr	r3, [pc, #408]	@ (8003fa4 <Oscilloscope_Process+0x788>)
 8003e0a:	881b      	ldrh	r3, [r3, #0]
 8003e0c:	461a      	mov	r2, r3
 8003e0e:	f8d7 31d4 	ldr.w	r3, [r7, #468]	@ 0x1d4
 8003e12:	4293      	cmp	r3, r2
 8003e14:	d104      	bne.n	8003e20 <Oscilloscope_Process+0x604>
 8003e16:	4b5c      	ldr	r3, [pc, #368]	@ (8003f88 <Oscilloscope_Process+0x76c>)
 8003e18:	781b      	ldrb	r3, [r3, #0]
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	f000 824a 	beq.w	80042b4 <Oscilloscope_Process+0xa98>
		int32_t delta = encoder1_curr - encoder1_prev;
 8003e20:	4b60      	ldr	r3, [pc, #384]	@ (8003fa4 <Oscilloscope_Process+0x788>)
 8003e22:	881b      	ldrh	r3, [r3, #0]
 8003e24:	461a      	mov	r2, r3
 8003e26:	f8d7 31d4 	ldr.w	r3, [r7, #468]	@ 0x1d4
 8003e2a:	1a9b      	subs	r3, r3, r2
 8003e2c:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4

		if (delta > 10)
 8003e30:	f8d7 31e4 	ldr.w	r3, [r7, #484]	@ 0x1e4
 8003e34:	2b0a      	cmp	r3, #10
 8003e36:	dd03      	ble.n	8003e40 <Oscilloscope_Process+0x624>
			delta = -1;
 8003e38:	f04f 33ff 	mov.w	r3, #4294967295
 8003e3c:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4

		if (delta < -10)
 8003e40:	f8d7 31e4 	ldr.w	r3, [r7, #484]	@ 0x1e4
 8003e44:	f113 0f0a 	cmn.w	r3, #10
 8003e48:	da02      	bge.n	8003e50 <Oscilloscope_Process+0x634>
			delta = 1;
 8003e4a:	2301      	movs	r3, #1
 8003e4c:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4

		if (menu_extended) {
 8003e50:	4b55      	ldr	r3, [pc, #340]	@ (8003fa8 <Oscilloscope_Process+0x78c>)
 8003e52:	781b      	ldrb	r3, [r3, #0]
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	f000 816f 	beq.w	8004138 <Oscilloscope_Process+0x91c>

			if (menu_selected_item == 1) {
 8003e5a:	4b46      	ldr	r3, [pc, #280]	@ (8003f74 <Oscilloscope_Process+0x758>)
 8003e5c:	f993 3000 	ldrsb.w	r3, [r3]
 8003e60:	2b01      	cmp	r3, #1
 8003e62:	d112      	bne.n	8003e8a <Oscilloscope_Process+0x66e>
				trigger_mode += delta;
 8003e64:	f8d7 31e4 	ldr.w	r3, [r7, #484]	@ 0x1e4
 8003e68:	b2da      	uxtb	r2, r3
 8003e6a:	4b50      	ldr	r3, [pc, #320]	@ (8003fac <Oscilloscope_Process+0x790>)
 8003e6c:	781b      	ldrb	r3, [r3, #0]
 8003e6e:	4413      	add	r3, r2
 8003e70:	b2da      	uxtb	r2, r3
 8003e72:	4b4e      	ldr	r3, [pc, #312]	@ (8003fac <Oscilloscope_Process+0x790>)
 8003e74:	701a      	strb	r2, [r3, #0]

				if (trigger_mode < 0)
					trigger_mode = 0;

				if (trigger_mode > 1)
 8003e76:	4b4d      	ldr	r3, [pc, #308]	@ (8003fac <Oscilloscope_Process+0x790>)
 8003e78:	781b      	ldrb	r3, [r3, #0]
 8003e7a:	2b01      	cmp	r3, #1
 8003e7c:	d902      	bls.n	8003e84 <Oscilloscope_Process+0x668>
					trigger_mode = 1;
 8003e7e:	4b4b      	ldr	r3, [pc, #300]	@ (8003fac <Oscilloscope_Process+0x790>)
 8003e80:	2201      	movs	r2, #1
 8003e82:	701a      	strb	r2, [r3, #0]

				event_trigger_mode = 1;
 8003e84:	4b4a      	ldr	r3, [pc, #296]	@ (8003fb0 <Oscilloscope_Process+0x794>)
 8003e86:	2201      	movs	r2, #1
 8003e88:	701a      	strb	r2, [r3, #0]
			}

			if (menu_selected_item == 4) {
 8003e8a:	4b3a      	ldr	r3, [pc, #232]	@ (8003f74 <Oscilloscope_Process+0x758>)
 8003e8c:	f993 3000 	ldrsb.w	r3, [r3]
 8003e90:	2b04      	cmp	r3, #4
 8003e92:	f040 8100 	bne.w	8004096 <Oscilloscope_Process+0x87a>
				mode_seconds += delta;
 8003e96:	f8d7 31e4 	ldr.w	r3, [r7, #484]	@ 0x1e4
 8003e9a:	b2da      	uxtb	r2, r3
 8003e9c:	4b45      	ldr	r3, [pc, #276]	@ (8003fb4 <Oscilloscope_Process+0x798>)
 8003e9e:	781b      	ldrb	r3, [r3, #0]
 8003ea0:	4413      	add	r3, r2
 8003ea2:	b2da      	uxtb	r2, r3
 8003ea4:	4b43      	ldr	r3, [pc, #268]	@ (8003fb4 <Oscilloscope_Process+0x798>)
 8003ea6:	701a      	strb	r2, [r3, #0]

				if (mode_seconds < 0)
					mode_seconds = 0;

				if (mode_seconds > 16)
 8003ea8:	4b42      	ldr	r3, [pc, #264]	@ (8003fb4 <Oscilloscope_Process+0x798>)
 8003eaa:	781b      	ldrb	r3, [r3, #0]
 8003eac:	2b10      	cmp	r3, #16
 8003eae:	d902      	bls.n	8003eb6 <Oscilloscope_Process+0x69a>
					mode_seconds = 16;
 8003eb0:	4b40      	ldr	r3, [pc, #256]	@ (8003fb4 <Oscilloscope_Process+0x798>)
 8003eb2:	2210      	movs	r2, #16
 8003eb4:	701a      	strb	r2, [r3, #0]

				uint32_t list_seconds[17] = {
 8003eb6:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 8003eba:	f5a3 73f8 	sub.w	r3, r3, #496	@ 0x1f0
 8003ebe:	4a3e      	ldr	r2, [pc, #248]	@ (8003fb8 <Oscilloscope_Process+0x79c>)
 8003ec0:	4618      	mov	r0, r3
 8003ec2:	4611      	mov	r1, r2
 8003ec4:	2344      	movs	r3, #68	@ 0x44
 8003ec6:	461a      	mov	r2, r3
 8003ec8:	f008 fef9 	bl	800ccbe <memcpy>
					200000,
					500000,
					1000000
				};

				xlim_us = list_seconds[mode_seconds];
 8003ecc:	4b39      	ldr	r3, [pc, #228]	@ (8003fb4 <Oscilloscope_Process+0x798>)
 8003ece:	781b      	ldrb	r3, [r3, #0]
 8003ed0:	461a      	mov	r2, r3
 8003ed2:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 8003ed6:	f5a3 73f8 	sub.w	r3, r3, #496	@ 0x1f0
 8003eda:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003ede:	4a37      	ldr	r2, [pc, #220]	@ (8003fbc <Oscilloscope_Process+0x7a0>)
 8003ee0:	6013      	str	r3, [r2, #0]

				if (adc_immediate) {
 8003ee2:	4b37      	ldr	r3, [pc, #220]	@ (8003fc0 <Oscilloscope_Process+0x7a4>)
 8003ee4:	781b      	ldrb	r3, [r3, #0]
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d005      	beq.n	8003ef6 <Oscilloscope_Process+0x6da>
					HAL_TIM_Base_Stop_IT(&htim10);
 8003eea:	4836      	ldr	r0, [pc, #216]	@ (8003fc4 <Oscilloscope_Process+0x7a8>)
 8003eec:	f004 ff66 	bl	8008dbc <HAL_TIM_Base_Stop_IT>
					adc_available = 1;
 8003ef0:	4b35      	ldr	r3, [pc, #212]	@ (8003fc8 <Oscilloscope_Process+0x7ac>)
 8003ef2:	2201      	movs	r2, #1
 8003ef4:	701a      	strb	r2, [r3, #0]
				}

				HAL_ADC_Stop_DMA(&hadc1);
 8003ef6:	4835      	ldr	r0, [pc, #212]	@ (8003fcc <Oscilloscope_Process+0x7b0>)
 8003ef8:	f001 fc8e 	bl	8005818 <HAL_ADC_Stop_DMA>

				adc_reset_cyccnt = 1;
 8003efc:	4b34      	ldr	r3, [pc, #208]	@ (8003fd0 <Oscilloscope_Process+0x7b4>)
 8003efe:	2201      	movs	r2, #1
 8003f00:	701a      	strb	r2, [r3, #0]
				adc0_length = 0;
 8003f02:	4b34      	ldr	r3, [pc, #208]	@ (8003fd4 <Oscilloscope_Process+0x7b8>)
 8003f04:	2200      	movs	r2, #0
 8003f06:	601a      	str	r2, [r3, #0]
				adc1_length = 0;
 8003f08:	4b33      	ldr	r3, [pc, #204]	@ (8003fd8 <Oscilloscope_Process+0x7bc>)
 8003f0a:	2200      	movs	r2, #0
 8003f0c:	601a      	str	r2, [r3, #0]
				adc_max[0] = 0;
 8003f0e:	4b33      	ldr	r3, [pc, #204]	@ (8003fdc <Oscilloscope_Process+0x7c0>)
 8003f10:	2200      	movs	r2, #0
 8003f12:	801a      	strh	r2, [r3, #0]
				adc_max[1] = 0;
 8003f14:	4b31      	ldr	r3, [pc, #196]	@ (8003fdc <Oscilloscope_Process+0x7c0>)
 8003f16:	2200      	movs	r2, #0
 8003f18:	805a      	strh	r2, [r3, #2]
				adc_min[0] = -1;
 8003f1a:	4b31      	ldr	r3, [pc, #196]	@ (8003fe0 <Oscilloscope_Process+0x7c4>)
 8003f1c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003f20:	801a      	strh	r2, [r3, #0]
				adc_min[1] = -1;
 8003f22:	4b2f      	ldr	r3, [pc, #188]	@ (8003fe0 <Oscilloscope_Process+0x7c4>)
 8003f24:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003f28:	805a      	strh	r2, [r3, #2]
				adc_period[0] = 0;
 8003f2a:	4b2e      	ldr	r3, [pc, #184]	@ (8003fe4 <Oscilloscope_Process+0x7c8>)
 8003f2c:	2200      	movs	r2, #0
 8003f2e:	601a      	str	r2, [r3, #0]
				adc_period[1] = 0;
 8003f30:	4b2c      	ldr	r3, [pc, #176]	@ (8003fe4 <Oscilloscope_Process+0x7c8>)
 8003f32:	2200      	movs	r2, #0
 8003f34:	605a      	str	r2, [r3, #4]
				adc_period0_detected = 0;
 8003f36:	4b2c      	ldr	r3, [pc, #176]	@ (8003fe8 <Oscilloscope_Process+0x7cc>)
 8003f38:	2200      	movs	r2, #0
 8003f3a:	701a      	strb	r2, [r3, #0]
				adc_period1_detected = 0;
 8003f3c:	4b2b      	ldr	r3, [pc, #172]	@ (8003fec <Oscilloscope_Process+0x7d0>)
 8003f3e:	2200      	movs	r2, #0
 8003f40:	701a      	strb	r2, [r3, #0]
				event_trigger0_detected = 0;
 8003f42:	4b2b      	ldr	r3, [pc, #172]	@ (8003ff0 <Oscilloscope_Process+0x7d4>)
 8003f44:	2200      	movs	r2, #0
 8003f46:	701a      	strb	r2, [r3, #0]
				event_trigger1_detected = 0;
 8003f48:	4b2a      	ldr	r3, [pc, #168]	@ (8003ff4 <Oscilloscope_Process+0x7d8>)
 8003f4a:	2200      	movs	r2, #0
 8003f4c:	701a      	strb	r2, [r3, #0]

				if (menu_channel0_enabled)
 8003f4e:	4b10      	ldr	r3, [pc, #64]	@ (8003f90 <Oscilloscope_Process+0x774>)
 8003f50:	781b      	ldrb	r3, [r3, #0]
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d003      	beq.n	8003f5e <Oscilloscope_Process+0x742>
					adc0_filled = 0;
 8003f56:	4b28      	ldr	r3, [pc, #160]	@ (8003ff8 <Oscilloscope_Process+0x7dc>)
 8003f58:	2200      	movs	r2, #0
 8003f5a:	701a      	strb	r2, [r3, #0]
 8003f5c:	e002      	b.n	8003f64 <Oscilloscope_Process+0x748>
				else
					adc0_filled = 1;
 8003f5e:	4b26      	ldr	r3, [pc, #152]	@ (8003ff8 <Oscilloscope_Process+0x7dc>)
 8003f60:	2201      	movs	r2, #1
 8003f62:	701a      	strb	r2, [r3, #0]

				if (menu_channel1_enabled)
 8003f64:	4b0c      	ldr	r3, [pc, #48]	@ (8003f98 <Oscilloscope_Process+0x77c>)
 8003f66:	781b      	ldrb	r3, [r3, #0]
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d049      	beq.n	8004000 <Oscilloscope_Process+0x7e4>
					adc1_filled = 0;
 8003f6c:	4b23      	ldr	r3, [pc, #140]	@ (8003ffc <Oscilloscope_Process+0x7e0>)
 8003f6e:	2200      	movs	r2, #0
 8003f70:	701a      	strb	r2, [r3, #0]
 8003f72:	e048      	b.n	8004006 <Oscilloscope_Process+0x7ea>
 8003f74:	2000d10d 	.word	0x2000d10d
 8003f78:	2000d0f4 	.word	0x2000d0f4
 8003f7c:	2000d4b8 	.word	0x2000d4b8
 8003f80:	2000d0f6 	.word	0x2000d0f6
 8003f84:	2000d102 	.word	0x2000d102
 8003f88:	2000d103 	.word	0x2000d103
 8003f8c:	20013534 	.word	0x20013534
 8003f90:	2000d10b 	.word	0x2000d10b
 8003f94:	080104a8 	.word	0x080104a8
 8003f98:	2000d10c 	.word	0x2000d10c
 8003f9c:	080104ac 	.word	0x080104ac
 8003fa0:	20013f98 	.word	0x20013f98
 8003fa4:	20013536 	.word	0x20013536
 8003fa8:	20013531 	.word	0x20013531
 8003fac:	2001352c 	.word	0x2001352c
 8003fb0:	2000d108 	.word	0x2000d108
 8003fb4:	2000d112 	.word	0x2000d112
 8003fb8:	08010508 	.word	0x08010508
 8003fbc:	2000d0ec 	.word	0x2000d0ec
 8003fc0:	2000d0e8 	.word	0x2000d0e8
 8003fc4:	20013fe0 	.word	0x20013fe0
 8003fc8:	2000d0e1 	.word	0x2000d0e1
 8003fcc:	2000d318 	.word	0x2000d318
 8003fd0:	2000d0e2 	.word	0x2000d0e2
 8003fd4:	2000d510 	.word	0x2000d510
 8003fd8:	2000d514 	.word	0x2000d514
 8003fdc:	2000d51c 	.word	0x2000d51c
 8003fe0:	2000d0e4 	.word	0x2000d0e4
 8003fe4:	2000d520 	.word	0x2000d520
 8003fe8:	2000d528 	.word	0x2000d528
 8003fec:	2000d529 	.word	0x2000d529
 8003ff0:	2000d109 	.word	0x2000d109
 8003ff4:	2000d10a 	.word	0x2000d10a
 8003ff8:	2000d518 	.word	0x2000d518
 8003ffc:	2000d0e0 	.word	0x2000d0e0
				else
					adc1_filled = 1;
 8004000:	4b3f      	ldr	r3, [pc, #252]	@ (8004100 <Oscilloscope_Process+0x8e4>)
 8004002:	2201      	movs	r2, #1
 8004004:	701a      	strb	r2, [r3, #0]

				adc_immediate = xlim_us <= 500;
 8004006:	4b3f      	ldr	r3, [pc, #252]	@ (8004104 <Oscilloscope_Process+0x8e8>)
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 800400e:	bf94      	ite	ls
 8004010:	2301      	movls	r3, #1
 8004012:	2300      	movhi	r3, #0
 8004014:	b2db      	uxtb	r3, r3
 8004016:	461a      	mov	r2, r3
 8004018:	4b3b      	ldr	r3, [pc, #236]	@ (8004108 <Oscilloscope_Process+0x8ec>)
 800401a:	701a      	strb	r2, [r3, #0]

				if (!adc_immediate) {
 800401c:	4b3a      	ldr	r3, [pc, #232]	@ (8004108 <Oscilloscope_Process+0x8ec>)
 800401e:	781b      	ldrb	r3, [r3, #0]
 8004020:	2b00      	cmp	r3, #0
 8004022:	d12d      	bne.n	8004080 <Oscilloscope_Process+0x864>
					uint32_t list_timer_settings[17][2] = {
 8004024:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 8004028:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 800402c:	4a37      	ldr	r2, [pc, #220]	@ (800410c <Oscilloscope_Process+0x8f0>)
 800402e:	4618      	mov	r0, r3
 8004030:	4611      	mov	r1, r2
 8004032:	2388      	movs	r3, #136	@ 0x88
 8004034:	461a      	mov	r2, r3
 8004036:	f008 fe42 	bl	800ccbe <memcpy>
						{  8228, 100 },
						{ 20570, 100 },
						{ 41142, 100 }
					};

					htim10.Init.Prescaler = list_timer_settings[mode_seconds][0];
 800403a:	4b35      	ldr	r3, [pc, #212]	@ (8004110 <Oscilloscope_Process+0x8f4>)
 800403c:	781b      	ldrb	r3, [r3, #0]
 800403e:	461a      	mov	r2, r3
 8004040:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 8004044:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8004048:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
 800404c:	4a31      	ldr	r2, [pc, #196]	@ (8004114 <Oscilloscope_Process+0x8f8>)
 800404e:	6053      	str	r3, [r2, #4]
					htim10.Init.Period    = list_timer_settings[mode_seconds][1];
 8004050:	4b2f      	ldr	r3, [pc, #188]	@ (8004110 <Oscilloscope_Process+0x8f4>)
 8004052:	781b      	ldrb	r3, [r3, #0]
 8004054:	4619      	mov	r1, r3
 8004056:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 800405a:	f5a3 72d6 	sub.w	r2, r3, #428	@ 0x1ac
 800405e:	00cb      	lsls	r3, r1, #3
 8004060:	4413      	add	r3, r2
 8004062:	685b      	ldr	r3, [r3, #4]
 8004064:	4a2b      	ldr	r2, [pc, #172]	@ (8004114 <Oscilloscope_Process+0x8f8>)
 8004066:	60d3      	str	r3, [r2, #12]

					if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8004068:	482a      	ldr	r0, [pc, #168]	@ (8004114 <Oscilloscope_Process+0x8f8>)
 800406a:	f004 fdf5 	bl	8008c58 <HAL_TIM_Base_Init>
 800406e:	4603      	mov	r3, r0
 8004070:	2b00      	cmp	r3, #0
 8004072:	d001      	beq.n	8004078 <Oscilloscope_Process+0x85c>
						Error_Handler();
 8004074:	f7fe fc90 	bl	8002998 <Error_Handler>

					HAL_TIM_Base_Start_IT(&htim10);
 8004078:	4826      	ldr	r0, [pc, #152]	@ (8004114 <Oscilloscope_Process+0x8f8>)
 800407a:	f004 fe3d 	bl	8008cf8 <HAL_TIM_Base_Start_IT>
 800407e:	e004      	b.n	800408a <Oscilloscope_Process+0x86e>
				} else
					HAL_ADC_Start_DMA(&hadc1, (uint32_t*)&adc_data, 2);
 8004080:	2202      	movs	r2, #2
 8004082:	4925      	ldr	r1, [pc, #148]	@ (8004118 <Oscilloscope_Process+0x8fc>)
 8004084:	4825      	ldr	r0, [pc, #148]	@ (800411c <Oscilloscope_Process+0x900>)
 8004086:	f001 fad3 	bl	8005630 <HAL_ADC_Start_DMA>

				local_event_adc = 0;
 800408a:	2300      	movs	r3, #0
 800408c:	f887 31ef 	strb.w	r3, [r7, #495]	@ 0x1ef
				event_seconds = 1;
 8004090:	4b23      	ldr	r3, [pc, #140]	@ (8004120 <Oscilloscope_Process+0x904>)
 8004092:	2201      	movs	r2, #1
 8004094:	701a      	strb	r2, [r3, #0]
			}

			if (menu_selected_item == 5) {
 8004096:	4b23      	ldr	r3, [pc, #140]	@ (8004124 <Oscilloscope_Process+0x908>)
 8004098:	f993 3000 	ldrsb.w	r3, [r3]
 800409c:	2b05      	cmp	r3, #5
 800409e:	f040 8101 	bne.w	80042a4 <Oscilloscope_Process+0xa88>
				mode_voltage += delta;
 80040a2:	f8d7 31e4 	ldr.w	r3, [r7, #484]	@ 0x1e4
 80040a6:	b2da      	uxtb	r2, r3
 80040a8:	4b1f      	ldr	r3, [pc, #124]	@ (8004128 <Oscilloscope_Process+0x90c>)
 80040aa:	781b      	ldrb	r3, [r3, #0]
 80040ac:	4413      	add	r3, r2
 80040ae:	b2da      	uxtb	r2, r3
 80040b0:	4b1d      	ldr	r3, [pc, #116]	@ (8004128 <Oscilloscope_Process+0x90c>)
 80040b2:	701a      	strb	r2, [r3, #0]

				if (mode_voltage < 0)
					mode_voltage = 0;

				if (mode_voltage > 9)
 80040b4:	4b1c      	ldr	r3, [pc, #112]	@ (8004128 <Oscilloscope_Process+0x90c>)
 80040b6:	781b      	ldrb	r3, [r3, #0]
 80040b8:	2b09      	cmp	r3, #9
 80040ba:	d902      	bls.n	80040c2 <Oscilloscope_Process+0x8a6>
					mode_voltage = 9;
 80040bc:	4b1a      	ldr	r3, [pc, #104]	@ (8004128 <Oscilloscope_Process+0x90c>)
 80040be:	2209      	movs	r2, #9
 80040c0:	701a      	strb	r2, [r3, #0]

				uint32_t list_voltage[10] = {
 80040c2:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 80040c6:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 80040ca:	4a18      	ldr	r2, [pc, #96]	@ (800412c <Oscilloscope_Process+0x910>)
 80040cc:	461c      	mov	r4, r3
 80040ce:	4615      	mov	r5, r2
 80040d0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80040d2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80040d4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80040d6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80040d8:	e895 0003 	ldmia.w	r5, {r0, r1}
 80040dc:	e884 0003 	stmia.w	r4, {r0, r1}
					2000000,
					5000000,
					10000000
				};

				ylim_uV = list_voltage[mode_voltage];
 80040e0:	4b11      	ldr	r3, [pc, #68]	@ (8004128 <Oscilloscope_Process+0x90c>)
 80040e2:	781b      	ldrb	r3, [r3, #0]
 80040e4:	461a      	mov	r2, r3
 80040e6:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 80040ea:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 80040ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80040f2:	4a0f      	ldr	r2, [pc, #60]	@ (8004130 <Oscilloscope_Process+0x914>)
 80040f4:	6013      	str	r3, [r2, #0]

				event_voltage = 1;
 80040f6:	4b0f      	ldr	r3, [pc, #60]	@ (8004134 <Oscilloscope_Process+0x918>)
 80040f8:	2201      	movs	r2, #1
 80040fa:	701a      	strb	r2, [r3, #0]
 80040fc:	e0d2      	b.n	80042a4 <Oscilloscope_Process+0xa88>
 80040fe:	bf00      	nop
 8004100:	2000d0e0 	.word	0x2000d0e0
 8004104:	2000d0ec 	.word	0x2000d0ec
 8004108:	2000d0e8 	.word	0x2000d0e8
 800410c:	0801054c 	.word	0x0801054c
 8004110:	2000d112 	.word	0x2000d112
 8004114:	20013fe0 	.word	0x20013fe0
 8004118:	2000d508 	.word	0x2000d508
 800411c:	2000d318 	.word	0x2000d318
 8004120:	2000d105 	.word	0x2000d105
 8004124:	2000d10d 	.word	0x2000d10d
 8004128:	2000d113 	.word	0x2000d113
 800412c:	080105d4 	.word	0x080105d4
 8004130:	2000d0f0 	.word	0x2000d0f0
 8004134:	2000d106 	.word	0x2000d106
			}

		} else {

			if (menu_selected_item == 2) {
 8004138:	4baa      	ldr	r3, [pc, #680]	@ (80043e4 <Oscilloscope_Process+0xbc8>)
 800413a:	f993 3000 	ldrsb.w	r3, [r3]
 800413e:	2b02      	cmp	r3, #2
 8004140:	d155      	bne.n	80041ee <Oscilloscope_Process+0x9d2>
				clearTrigger(&display, trigger0);
 8004142:	4ba9      	ldr	r3, [pc, #676]	@ (80043e8 <Oscilloscope_Process+0xbcc>)
 8004144:	881b      	ldrh	r3, [r3, #0]
 8004146:	4619      	mov	r1, r3
 8004148:	48a8      	ldr	r0, [pc, #672]	@ (80043ec <Oscilloscope_Process+0xbd0>)
 800414a:	f7fe fdc8 	bl	8002cde <clearTrigger>
				trigger0 += delta;
 800414e:	f8d7 31e4 	ldr.w	r3, [r7, #484]	@ 0x1e4
 8004152:	b29a      	uxth	r2, r3
 8004154:	4ba4      	ldr	r3, [pc, #656]	@ (80043e8 <Oscilloscope_Process+0xbcc>)
 8004156:	881b      	ldrh	r3, [r3, #0]
 8004158:	4413      	add	r3, r2
 800415a:	b29a      	uxth	r2, r3
 800415c:	4ba2      	ldr	r3, [pc, #648]	@ (80043e8 <Oscilloscope_Process+0xbcc>)
 800415e:	801a      	strh	r2, [r3, #0]

				if (trigger0 < 20)
 8004160:	4ba1      	ldr	r3, [pc, #644]	@ (80043e8 <Oscilloscope_Process+0xbcc>)
 8004162:	881b      	ldrh	r3, [r3, #0]
 8004164:	2b13      	cmp	r3, #19
 8004166:	d802      	bhi.n	800416e <Oscilloscope_Process+0x952>
					trigger0 = 20;
 8004168:	4b9f      	ldr	r3, [pc, #636]	@ (80043e8 <Oscilloscope_Process+0xbcc>)
 800416a:	2214      	movs	r2, #20
 800416c:	801a      	strh	r2, [r3, #0]

				if (trigger0 > 220)
 800416e:	4b9e      	ldr	r3, [pc, #632]	@ (80043e8 <Oscilloscope_Process+0xbcc>)
 8004170:	881b      	ldrh	r3, [r3, #0]
 8004172:	2bdc      	cmp	r3, #220	@ 0xdc
 8004174:	d902      	bls.n	800417c <Oscilloscope_Process+0x960>
					trigger0 = 220;
 8004176:	4b9c      	ldr	r3, [pc, #624]	@ (80043e8 <Oscilloscope_Process+0xbcc>)
 8004178:	22dc      	movs	r2, #220	@ 0xdc
 800417a:	801a      	strh	r2, [r3, #0]

				if (trigger0 > cursor0)
 800417c:	4b9a      	ldr	r3, [pc, #616]	@ (80043e8 <Oscilloscope_Process+0xbcc>)
 800417e:	881a      	ldrh	r2, [r3, #0]
 8004180:	4b9b      	ldr	r3, [pc, #620]	@ (80043f0 <Oscilloscope_Process+0xbd4>)
 8004182:	881b      	ldrh	r3, [r3, #0]
 8004184:	429a      	cmp	r2, r3
 8004186:	d903      	bls.n	8004190 <Oscilloscope_Process+0x974>
					trigger0 = cursor0;
 8004188:	4b99      	ldr	r3, [pc, #612]	@ (80043f0 <Oscilloscope_Process+0xbd4>)
 800418a:	881a      	ldrh	r2, [r3, #0]
 800418c:	4b96      	ldr	r3, [pc, #600]	@ (80043e8 <Oscilloscope_Process+0xbcc>)
 800418e:	801a      	strh	r2, [r3, #0]

				float uV = -((float)(ylim_uV) * ((8.0f * (trigger0 - cursor0)) / 200.0f));
 8004190:	4b98      	ldr	r3, [pc, #608]	@ (80043f4 <Oscilloscope_Process+0xbd8>)
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	ee07 3a90 	vmov	s15, r3
 8004198:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800419c:	4b92      	ldr	r3, [pc, #584]	@ (80043e8 <Oscilloscope_Process+0xbcc>)
 800419e:	881b      	ldrh	r3, [r3, #0]
 80041a0:	461a      	mov	r2, r3
 80041a2:	4b93      	ldr	r3, [pc, #588]	@ (80043f0 <Oscilloscope_Process+0xbd4>)
 80041a4:	881b      	ldrh	r3, [r3, #0]
 80041a6:	1ad3      	subs	r3, r2, r3
 80041a8:	ee07 3a90 	vmov	s15, r3
 80041ac:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80041b0:	eef2 6a00 	vmov.f32	s13, #32	@ 0x41000000  8.0
 80041b4:	ee67 6aa6 	vmul.f32	s13, s15, s13
 80041b8:	ed9f 6a8f 	vldr	s12, [pc, #572]	@ 80043f8 <Oscilloscope_Process+0xbdc>
 80041bc:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80041c0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80041c4:	eef1 7a67 	vneg.f32	s15, s15
 80041c8:	edc7 7a74 	vstr	s15, [r7, #464]	@ 0x1d0
				trigger0_value = uV * 4096.0f / 3300000.0f;
 80041cc:	edd7 7a74 	vldr	s15, [r7, #464]	@ 0x1d0
 80041d0:	ed9f 7a8a 	vldr	s14, [pc, #552]	@ 80043fc <Oscilloscope_Process+0xbe0>
 80041d4:	ee27 7a87 	vmul.f32	s14, s15, s14
 80041d8:	eddf 6a89 	vldr	s13, [pc, #548]	@ 8004400 <Oscilloscope_Process+0xbe4>
 80041dc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80041e0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80041e4:	ee17 3a90 	vmov	r3, s15
 80041e8:	b29a      	uxth	r2, r3
 80041ea:	4b86      	ldr	r3, [pc, #536]	@ (8004404 <Oscilloscope_Process+0xbe8>)
 80041ec:	801a      	strh	r2, [r3, #0]
			}

			if (menu_selected_item == 3) {
 80041ee:	4b7d      	ldr	r3, [pc, #500]	@ (80043e4 <Oscilloscope_Process+0xbc8>)
 80041f0:	f993 3000 	ldrsb.w	r3, [r3]
 80041f4:	2b03      	cmp	r3, #3
 80041f6:	d155      	bne.n	80042a4 <Oscilloscope_Process+0xa88>
				clearTrigger(&display, trigger1);
 80041f8:	4b83      	ldr	r3, [pc, #524]	@ (8004408 <Oscilloscope_Process+0xbec>)
 80041fa:	881b      	ldrh	r3, [r3, #0]
 80041fc:	4619      	mov	r1, r3
 80041fe:	487b      	ldr	r0, [pc, #492]	@ (80043ec <Oscilloscope_Process+0xbd0>)
 8004200:	f7fe fd6d 	bl	8002cde <clearTrigger>
				trigger1 += delta;
 8004204:	f8d7 31e4 	ldr.w	r3, [r7, #484]	@ 0x1e4
 8004208:	b29a      	uxth	r2, r3
 800420a:	4b7f      	ldr	r3, [pc, #508]	@ (8004408 <Oscilloscope_Process+0xbec>)
 800420c:	881b      	ldrh	r3, [r3, #0]
 800420e:	4413      	add	r3, r2
 8004210:	b29a      	uxth	r2, r3
 8004212:	4b7d      	ldr	r3, [pc, #500]	@ (8004408 <Oscilloscope_Process+0xbec>)
 8004214:	801a      	strh	r2, [r3, #0]

				if (trigger1 < 20)
 8004216:	4b7c      	ldr	r3, [pc, #496]	@ (8004408 <Oscilloscope_Process+0xbec>)
 8004218:	881b      	ldrh	r3, [r3, #0]
 800421a:	2b13      	cmp	r3, #19
 800421c:	d802      	bhi.n	8004224 <Oscilloscope_Process+0xa08>
					trigger1 = 20;
 800421e:	4b7a      	ldr	r3, [pc, #488]	@ (8004408 <Oscilloscope_Process+0xbec>)
 8004220:	2214      	movs	r2, #20
 8004222:	801a      	strh	r2, [r3, #0]

				if (trigger1 > 220)
 8004224:	4b78      	ldr	r3, [pc, #480]	@ (8004408 <Oscilloscope_Process+0xbec>)
 8004226:	881b      	ldrh	r3, [r3, #0]
 8004228:	2bdc      	cmp	r3, #220	@ 0xdc
 800422a:	d902      	bls.n	8004232 <Oscilloscope_Process+0xa16>
					trigger1 = 220;
 800422c:	4b76      	ldr	r3, [pc, #472]	@ (8004408 <Oscilloscope_Process+0xbec>)
 800422e:	22dc      	movs	r2, #220	@ 0xdc
 8004230:	801a      	strh	r2, [r3, #0]

				if (trigger1 > cursor1)
 8004232:	4b75      	ldr	r3, [pc, #468]	@ (8004408 <Oscilloscope_Process+0xbec>)
 8004234:	881a      	ldrh	r2, [r3, #0]
 8004236:	4b75      	ldr	r3, [pc, #468]	@ (800440c <Oscilloscope_Process+0xbf0>)
 8004238:	881b      	ldrh	r3, [r3, #0]
 800423a:	429a      	cmp	r2, r3
 800423c:	d903      	bls.n	8004246 <Oscilloscope_Process+0xa2a>
					trigger1 = cursor1;
 800423e:	4b73      	ldr	r3, [pc, #460]	@ (800440c <Oscilloscope_Process+0xbf0>)
 8004240:	881a      	ldrh	r2, [r3, #0]
 8004242:	4b71      	ldr	r3, [pc, #452]	@ (8004408 <Oscilloscope_Process+0xbec>)
 8004244:	801a      	strh	r2, [r3, #0]

				float uV = -((float)(ylim_uV) * ((8.0f * (trigger1 - cursor1)) / 200.0f));
 8004246:	4b6b      	ldr	r3, [pc, #428]	@ (80043f4 <Oscilloscope_Process+0xbd8>)
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	ee07 3a90 	vmov	s15, r3
 800424e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004252:	4b6d      	ldr	r3, [pc, #436]	@ (8004408 <Oscilloscope_Process+0xbec>)
 8004254:	881b      	ldrh	r3, [r3, #0]
 8004256:	461a      	mov	r2, r3
 8004258:	4b6c      	ldr	r3, [pc, #432]	@ (800440c <Oscilloscope_Process+0xbf0>)
 800425a:	881b      	ldrh	r3, [r3, #0]
 800425c:	1ad3      	subs	r3, r2, r3
 800425e:	ee07 3a90 	vmov	s15, r3
 8004262:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004266:	eef2 6a00 	vmov.f32	s13, #32	@ 0x41000000  8.0
 800426a:	ee67 6aa6 	vmul.f32	s13, s15, s13
 800426e:	ed9f 6a62 	vldr	s12, [pc, #392]	@ 80043f8 <Oscilloscope_Process+0xbdc>
 8004272:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8004276:	ee67 7a27 	vmul.f32	s15, s14, s15
 800427a:	eef1 7a67 	vneg.f32	s15, s15
 800427e:	edc7 7a73 	vstr	s15, [r7, #460]	@ 0x1cc
				trigger1_value = uV * 4096.0f / 3300000.0f;
 8004282:	edd7 7a73 	vldr	s15, [r7, #460]	@ 0x1cc
 8004286:	ed9f 7a5d 	vldr	s14, [pc, #372]	@ 80043fc <Oscilloscope_Process+0xbe0>
 800428a:	ee27 7a87 	vmul.f32	s14, s15, s14
 800428e:	eddf 6a5c 	vldr	s13, [pc, #368]	@ 8004400 <Oscilloscope_Process+0xbe4>
 8004292:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004296:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800429a:	ee17 3a90 	vmov	r3, s15
 800429e:	b29a      	uxth	r2, r3
 80042a0:	4b5b      	ldr	r3, [pc, #364]	@ (8004410 <Oscilloscope_Process+0xbf4>)
 80042a2:	801a      	strh	r2, [r3, #0]
			}

		}

		event_trigger = 1;
 80042a4:	4b5b      	ldr	r3, [pc, #364]	@ (8004414 <Oscilloscope_Process+0xbf8>)
 80042a6:	2201      	movs	r2, #1
 80042a8:	701a      	strb	r2, [r3, #0]
		encoder1_prev = encoder1_curr;
 80042aa:	f8d7 31d4 	ldr.w	r3, [r7, #468]	@ 0x1d4
 80042ae:	b29a      	uxth	r2, r3
 80042b0:	4b59      	ldr	r3, [pc, #356]	@ (8004418 <Oscilloscope_Process+0xbfc>)
 80042b2:	801a      	strh	r2, [r3, #0]
	}

	// Handle UI redraw trigger events
	if (event_trigger) {
 80042b4:	4b57      	ldr	r3, [pc, #348]	@ (8004414 <Oscilloscope_Process+0xbf8>)
 80042b6:	781b      	ldrb	r3, [r3, #0]
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d026      	beq.n	800430a <Oscilloscope_Process+0xaee>
		clearTrigger(&display, trigger0);
 80042bc:	4b4a      	ldr	r3, [pc, #296]	@ (80043e8 <Oscilloscope_Process+0xbcc>)
 80042be:	881b      	ldrh	r3, [r3, #0]
 80042c0:	4619      	mov	r1, r3
 80042c2:	484a      	ldr	r0, [pc, #296]	@ (80043ec <Oscilloscope_Process+0xbd0>)
 80042c4:	f7fe fd0b 	bl	8002cde <clearTrigger>
		clearTrigger(&display, trigger1);
 80042c8:	4b4f      	ldr	r3, [pc, #316]	@ (8004408 <Oscilloscope_Process+0xbec>)
 80042ca:	881b      	ldrh	r3, [r3, #0]
 80042cc:	4619      	mov	r1, r3
 80042ce:	4847      	ldr	r0, [pc, #284]	@ (80043ec <Oscilloscope_Process+0xbd0>)
 80042d0:	f7fe fd05 	bl	8002cde <clearTrigger>

		if (menu_channel0_enabled)
 80042d4:	4b51      	ldr	r3, [pc, #324]	@ (800441c <Oscilloscope_Process+0xc00>)
 80042d6:	781b      	ldrb	r3, [r3, #0]
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d007      	beq.n	80042ec <Oscilloscope_Process+0xad0>
			drawTrigger(&display, trigger0, "T1", ILI9341_YELLOW);
 80042dc:	4b42      	ldr	r3, [pc, #264]	@ (80043e8 <Oscilloscope_Process+0xbcc>)
 80042de:	8819      	ldrh	r1, [r3, #0]
 80042e0:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 80042e4:	4a4e      	ldr	r2, [pc, #312]	@ (8004420 <Oscilloscope_Process+0xc04>)
 80042e6:	4841      	ldr	r0, [pc, #260]	@ (80043ec <Oscilloscope_Process+0xbd0>)
 80042e8:	f7fe fd62 	bl	8002db0 <drawTrigger>

		if (menu_channel1_enabled)
 80042ec:	4b4d      	ldr	r3, [pc, #308]	@ (8004424 <Oscilloscope_Process+0xc08>)
 80042ee:	781b      	ldrb	r3, [r3, #0]
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d007      	beq.n	8004304 <Oscilloscope_Process+0xae8>
			drawTrigger(&display, trigger1, "T2", ILI9341_CYAN);
 80042f4:	4b44      	ldr	r3, [pc, #272]	@ (8004408 <Oscilloscope_Process+0xbec>)
 80042f6:	8819      	ldrh	r1, [r3, #0]
 80042f8:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 80042fc:	4a4a      	ldr	r2, [pc, #296]	@ (8004428 <Oscilloscope_Process+0xc0c>)
 80042fe:	483b      	ldr	r0, [pc, #236]	@ (80043ec <Oscilloscope_Process+0xbd0>)
 8004300:	f7fe fd56 	bl	8002db0 <drawTrigger>

		event_trigger = 0;
 8004304:	4b43      	ldr	r3, [pc, #268]	@ (8004414 <Oscilloscope_Process+0xbf8>)
 8004306:	2200      	movs	r2, #0
 8004308:	701a      	strb	r2, [r3, #0]
	}

	// Handle UI redraw selector events
	if (event_selector) {
 800430a:	4b48      	ldr	r3, [pc, #288]	@ (800442c <Oscilloscope_Process+0xc10>)
 800430c:	781b      	ldrb	r3, [r3, #0]
 800430e:	2b00      	cmp	r3, #0
 8004310:	d00f      	beq.n	8004332 <Oscilloscope_Process+0xb16>
		ILI9341_Rectangle(&display, menu_selector_x, menu_selector_y, 38, 13, ILI9341_WHITE);
 8004312:	4b47      	ldr	r3, [pc, #284]	@ (8004430 <Oscilloscope_Process+0xc14>)
 8004314:	8819      	ldrh	r1, [r3, #0]
 8004316:	4b47      	ldr	r3, [pc, #284]	@ (8004434 <Oscilloscope_Process+0xc18>)
 8004318:	881a      	ldrh	r2, [r3, #0]
 800431a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800431e:	9301      	str	r3, [sp, #4]
 8004320:	230d      	movs	r3, #13
 8004322:	9300      	str	r3, [sp, #0]
 8004324:	2326      	movs	r3, #38	@ 0x26
 8004326:	4831      	ldr	r0, [pc, #196]	@ (80043ec <Oscilloscope_Process+0xbd0>)
 8004328:	f7fd fe22 	bl	8001f70 <ILI9341_Rectangle>
		event_selector = 0;
 800432c:	4b3f      	ldr	r3, [pc, #252]	@ (800442c <Oscilloscope_Process+0xc10>)
 800432e:	2200      	movs	r2, #0
 8004330:	701a      	strb	r2, [r3, #0]
	}

	// Handle UI redraw mode events
	if (event_mode) {
 8004332:	4b41      	ldr	r3, [pc, #260]	@ (8004438 <Oscilloscope_Process+0xc1c>)
 8004334:	781b      	ldrb	r3, [r3, #0]
 8004336:	2b00      	cmp	r3, #0
 8004338:	d040      	beq.n	80043bc <Oscilloscope_Process+0xba0>
		if (mode == 0)
 800433a:	4b40      	ldr	r3, [pc, #256]	@ (800443c <Oscilloscope_Process+0xc20>)
 800433c:	781b      	ldrb	r3, [r3, #0]
 800433e:	2b00      	cmp	r3, #0
 8004340:	d110      	bne.n	8004364 <Oscilloscope_Process+0xb48>
			ILI9341_WriteString(&display, 22, 5, " RUN ", Font_7x10, ILI9341_BLACK, ILI9341_GREEN);
 8004342:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8004346:	9303      	str	r3, [sp, #12]
 8004348:	2300      	movs	r3, #0
 800434a:	9302      	str	r3, [sp, #8]
 800434c:	4a3c      	ldr	r2, [pc, #240]	@ (8004440 <Oscilloscope_Process+0xc24>)
 800434e:	466b      	mov	r3, sp
 8004350:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004354:	e883 0003 	stmia.w	r3, {r0, r1}
 8004358:	4b3a      	ldr	r3, [pc, #232]	@ (8004444 <Oscilloscope_Process+0xc28>)
 800435a:	2205      	movs	r2, #5
 800435c:	2116      	movs	r1, #22
 800435e:	4823      	ldr	r0, [pc, #140]	@ (80043ec <Oscilloscope_Process+0xbd0>)
 8004360:	f7fd fec1 	bl	80020e6 <ILI9341_WriteString>

		if (mode == 1)
 8004364:	4b35      	ldr	r3, [pc, #212]	@ (800443c <Oscilloscope_Process+0xc20>)
 8004366:	781b      	ldrb	r3, [r3, #0]
 8004368:	2b01      	cmp	r3, #1
 800436a:	d10f      	bne.n	800438c <Oscilloscope_Process+0xb70>
			ILI9341_WriteString(&display, 22, 5, "MENU:", Font_7x10, ILI9341_BLACK, ILI9341_BLUE);
 800436c:	231f      	movs	r3, #31
 800436e:	9303      	str	r3, [sp, #12]
 8004370:	2300      	movs	r3, #0
 8004372:	9302      	str	r3, [sp, #8]
 8004374:	4a32      	ldr	r2, [pc, #200]	@ (8004440 <Oscilloscope_Process+0xc24>)
 8004376:	466b      	mov	r3, sp
 8004378:	e892 0003 	ldmia.w	r2, {r0, r1}
 800437c:	e883 0003 	stmia.w	r3, {r0, r1}
 8004380:	4b31      	ldr	r3, [pc, #196]	@ (8004448 <Oscilloscope_Process+0xc2c>)
 8004382:	2205      	movs	r2, #5
 8004384:	2116      	movs	r1, #22
 8004386:	4819      	ldr	r0, [pc, #100]	@ (80043ec <Oscilloscope_Process+0xbd0>)
 8004388:	f7fd fead 	bl	80020e6 <ILI9341_WriteString>

		if (mode == 2)
 800438c:	4b2b      	ldr	r3, [pc, #172]	@ (800443c <Oscilloscope_Process+0xc20>)
 800438e:	781b      	ldrb	r3, [r3, #0]
 8004390:	2b02      	cmp	r3, #2
 8004392:	d110      	bne.n	80043b6 <Oscilloscope_Process+0xb9a>
			ILI9341_WriteString(&display, 22, 5, "HOLD:", Font_7x10, ILI9341_BLACK, ILI9341_YELLOW);
 8004394:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8004398:	9303      	str	r3, [sp, #12]
 800439a:	2300      	movs	r3, #0
 800439c:	9302      	str	r3, [sp, #8]
 800439e:	4a28      	ldr	r2, [pc, #160]	@ (8004440 <Oscilloscope_Process+0xc24>)
 80043a0:	466b      	mov	r3, sp
 80043a2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80043a6:	e883 0003 	stmia.w	r3, {r0, r1}
 80043aa:	4b28      	ldr	r3, [pc, #160]	@ (800444c <Oscilloscope_Process+0xc30>)
 80043ac:	2205      	movs	r2, #5
 80043ae:	2116      	movs	r1, #22
 80043b0:	480e      	ldr	r0, [pc, #56]	@ (80043ec <Oscilloscope_Process+0xbd0>)
 80043b2:	f7fd fe98 	bl	80020e6 <ILI9341_WriteString>

		event_mode = 0;
 80043b6:	4b20      	ldr	r3, [pc, #128]	@ (8004438 <Oscilloscope_Process+0xc1c>)
 80043b8:	2200      	movs	r2, #0
 80043ba:	701a      	strb	r2, [r3, #0]
	}

	// Handle UI redraw trigger mode events
	if (event_trigger_mode) {
 80043bc:	4b24      	ldr	r3, [pc, #144]	@ (8004450 <Oscilloscope_Process+0xc34>)
 80043be:	781b      	ldrb	r3, [r3, #0]
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	f000 80e0 	beq.w	8004586 <Oscilloscope_Process+0xd6a>
		ILI9341_FillRectangle(&display, 61,  5, 33, 10, ILI9341_BLACK);
 80043c6:	2300      	movs	r3, #0
 80043c8:	9301      	str	r3, [sp, #4]
 80043ca:	230a      	movs	r3, #10
 80043cc:	9300      	str	r3, [sp, #0]
 80043ce:	2321      	movs	r3, #33	@ 0x21
 80043d0:	2205      	movs	r2, #5
 80043d2:	213d      	movs	r1, #61	@ 0x3d
 80043d4:	4805      	ldr	r0, [pc, #20]	@ (80043ec <Oscilloscope_Process+0xbd0>)
 80043d6:	f7fd fd6e 	bl	8001eb6 <ILI9341_FillRectangle>
		ILI9341_FillRectangle(&display, 61, 14, 11, 1, ILI9341_WHITE);
 80043da:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80043de:	9301      	str	r3, [sp, #4]
 80043e0:	e038      	b.n	8004454 <Oscilloscope_Process+0xc38>
 80043e2:	bf00      	nop
 80043e4:	2000d10d 	.word	0x2000d10d
 80043e8:	2000d0f8 	.word	0x2000d0f8
 80043ec:	2000d4b8 	.word	0x2000d4b8
 80043f0:	2000d0f4 	.word	0x2000d0f4
 80043f4:	2000d0f0 	.word	0x2000d0f0
 80043f8:	43480000 	.word	0x43480000
 80043fc:	45800000 	.word	0x45800000
 8004400:	4a496a80 	.word	0x4a496a80
 8004404:	2000d0fc 	.word	0x2000d0fc
 8004408:	2000d0fa 	.word	0x2000d0fa
 800440c:	2000d0f6 	.word	0x2000d0f6
 8004410:	2000d0fe 	.word	0x2000d0fe
 8004414:	2000d103 	.word	0x2000d103
 8004418:	20013536 	.word	0x20013536
 800441c:	2000d10b 	.word	0x2000d10b
 8004420:	080104b0 	.word	0x080104b0
 8004424:	2000d10c 	.word	0x2000d10c
 8004428:	080104b4 	.word	0x080104b4
 800442c:	2000d107 	.word	0x2000d107
 8004430:	2000d10e 	.word	0x2000d10e
 8004434:	2000d110 	.word	0x2000d110
 8004438:	2000d101 	.word	0x2000d101
 800443c:	20013532 	.word	0x20013532
 8004440:	20000000 	.word	0x20000000
 8004444:	080104b8 	.word	0x080104b8
 8004448:	080104c0 	.word	0x080104c0
 800444c:	080104c8 	.word	0x080104c8
 8004450:	2000d108 	.word	0x2000d108
 8004454:	2301      	movs	r3, #1
 8004456:	9300      	str	r3, [sp, #0]
 8004458:	230b      	movs	r3, #11
 800445a:	220e      	movs	r2, #14
 800445c:	213d      	movs	r1, #61	@ 0x3d
 800445e:	48aa      	ldr	r0, [pc, #680]	@ (8004708 <Oscilloscope_Process+0xeec>)
 8004460:	f7fd fd29 	bl	8001eb6 <ILI9341_FillRectangle>
		ILI9341_FillRectangle(&display, 72,  5, 11, 1, ILI9341_WHITE);
 8004464:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8004468:	9301      	str	r3, [sp, #4]
 800446a:	2301      	movs	r3, #1
 800446c:	9300      	str	r3, [sp, #0]
 800446e:	230b      	movs	r3, #11
 8004470:	2205      	movs	r2, #5
 8004472:	2148      	movs	r1, #72	@ 0x48
 8004474:	48a4      	ldr	r0, [pc, #656]	@ (8004708 <Oscilloscope_Process+0xeec>)
 8004476:	f7fd fd1e 	bl	8001eb6 <ILI9341_FillRectangle>
		ILI9341_FillRectangle(&display, 83, 14, 11, 1, ILI9341_WHITE);
 800447a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800447e:	9301      	str	r3, [sp, #4]
 8004480:	2301      	movs	r3, #1
 8004482:	9300      	str	r3, [sp, #0]
 8004484:	230b      	movs	r3, #11
 8004486:	220e      	movs	r2, #14
 8004488:	2153      	movs	r1, #83	@ 0x53
 800448a:	489f      	ldr	r0, [pc, #636]	@ (8004708 <Oscilloscope_Process+0xeec>)
 800448c:	f7fd fd13 	bl	8001eb6 <ILI9341_FillRectangle>
		ILI9341_FillRectangle(&display, 72,  5, 1, 10, ILI9341_WHITE);
 8004490:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8004494:	9301      	str	r3, [sp, #4]
 8004496:	230a      	movs	r3, #10
 8004498:	9300      	str	r3, [sp, #0]
 800449a:	2301      	movs	r3, #1
 800449c:	2205      	movs	r2, #5
 800449e:	2148      	movs	r1, #72	@ 0x48
 80044a0:	4899      	ldr	r0, [pc, #612]	@ (8004708 <Oscilloscope_Process+0xeec>)
 80044a2:	f7fd fd08 	bl	8001eb6 <ILI9341_FillRectangle>
		ILI9341_FillRectangle(&display, 82,  5, 1, 10, ILI9341_WHITE);
 80044a6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80044aa:	9301      	str	r3, [sp, #4]
 80044ac:	230a      	movs	r3, #10
 80044ae:	9300      	str	r3, [sp, #0]
 80044b0:	2301      	movs	r3, #1
 80044b2:	2205      	movs	r2, #5
 80044b4:	2152      	movs	r1, #82	@ 0x52
 80044b6:	4894      	ldr	r0, [pc, #592]	@ (8004708 <Oscilloscope_Process+0xeec>)
 80044b8:	f7fd fcfd 	bl	8001eb6 <ILI9341_FillRectangle>

		if (trigger_mode == 0) {
 80044bc:	4b93      	ldr	r3, [pc, #588]	@ (800470c <Oscilloscope_Process+0xef0>)
 80044be:	781b      	ldrb	r3, [r3, #0]
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d12f      	bne.n	8004524 <Oscilloscope_Process+0xd08>
			for (uint8_t i = 0; i < 4; i++) {
 80044c4:	2300      	movs	r3, #0
 80044c6:	f887 31e3 	strb.w	r3, [r7, #483]	@ 0x1e3
 80044ca:	e026      	b.n	800451a <Oscilloscope_Process+0xcfe>
				for (uint8_t j = i; j < (7 - i); j++)
 80044cc:	f897 31e3 	ldrb.w	r3, [r7, #483]	@ 0x1e3
 80044d0:	f887 31e2 	strb.w	r3, [r7, #482]	@ 0x1e2
 80044d4:	e014      	b.n	8004500 <Oscilloscope_Process+0xce4>
					ILI9341_DrawPixel(&display, 69 + j, 11 - i, ILI9341_GREEN);
 80044d6:	f897 31e2 	ldrb.w	r3, [r7, #482]	@ 0x1e2
 80044da:	b29b      	uxth	r3, r3
 80044dc:	3345      	adds	r3, #69	@ 0x45
 80044de:	b299      	uxth	r1, r3
 80044e0:	f897 31e3 	ldrb.w	r3, [r7, #483]	@ 0x1e3
 80044e4:	b29b      	uxth	r3, r3
 80044e6:	f1c3 030b 	rsb	r3, r3, #11
 80044ea:	b29a      	uxth	r2, r3
 80044ec:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 80044f0:	4885      	ldr	r0, [pc, #532]	@ (8004708 <Oscilloscope_Process+0xeec>)
 80044f2:	f7fd fbd5 	bl	8001ca0 <ILI9341_DrawPixel>
				for (uint8_t j = i; j < (7 - i); j++)
 80044f6:	f897 31e2 	ldrb.w	r3, [r7, #482]	@ 0x1e2
 80044fa:	3301      	adds	r3, #1
 80044fc:	f887 31e2 	strb.w	r3, [r7, #482]	@ 0x1e2
 8004500:	f897 21e2 	ldrb.w	r2, [r7, #482]	@ 0x1e2
 8004504:	f897 31e3 	ldrb.w	r3, [r7, #483]	@ 0x1e3
 8004508:	f1c3 0307 	rsb	r3, r3, #7
 800450c:	429a      	cmp	r2, r3
 800450e:	dbe2      	blt.n	80044d6 <Oscilloscope_Process+0xcba>
			for (uint8_t i = 0; i < 4; i++) {
 8004510:	f897 31e3 	ldrb.w	r3, [r7, #483]	@ 0x1e3
 8004514:	3301      	adds	r3, #1
 8004516:	f887 31e3 	strb.w	r3, [r7, #483]	@ 0x1e3
 800451a:	f897 31e3 	ldrb.w	r3, [r7, #483]	@ 0x1e3
 800451e:	2b03      	cmp	r3, #3
 8004520:	d9d4      	bls.n	80044cc <Oscilloscope_Process+0xcb0>
 8004522:	e02d      	b.n	8004580 <Oscilloscope_Process+0xd64>
			}
		} else {
			for (uint8_t i = 0; i < 4; i++) {
 8004524:	2300      	movs	r3, #0
 8004526:	f887 31e1 	strb.w	r3, [r7, #481]	@ 0x1e1
 800452a:	e025      	b.n	8004578 <Oscilloscope_Process+0xd5c>
			  for (uint8_t j = i; j < (7 - i); j++)
 800452c:	f897 31e1 	ldrb.w	r3, [r7, #481]	@ 0x1e1
 8004530:	f887 31e0 	strb.w	r3, [r7, #480]	@ 0x1e0
 8004534:	e013      	b.n	800455e <Oscilloscope_Process+0xd42>
				  ILI9341_DrawPixel(&display, 79 + j, 8 + i, ILI9341_RED);
 8004536:	f897 31e0 	ldrb.w	r3, [r7, #480]	@ 0x1e0
 800453a:	b29b      	uxth	r3, r3
 800453c:	334f      	adds	r3, #79	@ 0x4f
 800453e:	b299      	uxth	r1, r3
 8004540:	f897 31e1 	ldrb.w	r3, [r7, #481]	@ 0x1e1
 8004544:	b29b      	uxth	r3, r3
 8004546:	3308      	adds	r3, #8
 8004548:	b29a      	uxth	r2, r3
 800454a:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 800454e:	486e      	ldr	r0, [pc, #440]	@ (8004708 <Oscilloscope_Process+0xeec>)
 8004550:	f7fd fba6 	bl	8001ca0 <ILI9341_DrawPixel>
			  for (uint8_t j = i; j < (7 - i); j++)
 8004554:	f897 31e0 	ldrb.w	r3, [r7, #480]	@ 0x1e0
 8004558:	3301      	adds	r3, #1
 800455a:	f887 31e0 	strb.w	r3, [r7, #480]	@ 0x1e0
 800455e:	f897 21e0 	ldrb.w	r2, [r7, #480]	@ 0x1e0
 8004562:	f897 31e1 	ldrb.w	r3, [r7, #481]	@ 0x1e1
 8004566:	f1c3 0307 	rsb	r3, r3, #7
 800456a:	429a      	cmp	r2, r3
 800456c:	dbe3      	blt.n	8004536 <Oscilloscope_Process+0xd1a>
			for (uint8_t i = 0; i < 4; i++) {
 800456e:	f897 31e1 	ldrb.w	r3, [r7, #481]	@ 0x1e1
 8004572:	3301      	adds	r3, #1
 8004574:	f887 31e1 	strb.w	r3, [r7, #481]	@ 0x1e1
 8004578:	f897 31e1 	ldrb.w	r3, [r7, #481]	@ 0x1e1
 800457c:	2b03      	cmp	r3, #3
 800457e:	d9d5      	bls.n	800452c <Oscilloscope_Process+0xd10>
			}
		}

		event_trigger_mode = 0;
 8004580:	4b63      	ldr	r3, [pc, #396]	@ (8004710 <Oscilloscope_Process+0xef4>)
 8004582:	2200      	movs	r2, #0
 8004584:	701a      	strb	r2, [r3, #0]
	}

	// Handle UI redraw seconds events
	if (event_seconds) {
 8004586:	4b63      	ldr	r3, [pc, #396]	@ (8004714 <Oscilloscope_Process+0xef8>)
 8004588:	781b      	ldrb	r3, [r3, #0]
 800458a:	2b00      	cmp	r3, #0
 800458c:	d03f      	beq.n	800460e <Oscilloscope_Process+0xdf2>
		if (xlim_us >= 1000000)
 800458e:	4b62      	ldr	r3, [pc, #392]	@ (8004718 <Oscilloscope_Process+0xefc>)
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	4a62      	ldr	r2, [pc, #392]	@ (800471c <Oscilloscope_Process+0xf00>)
 8004594:	4293      	cmp	r3, r2
 8004596:	d90c      	bls.n	80045b2 <Oscilloscope_Process+0xd96>
			snprintf(string, 255, "%3li s",  xlim_us / 1000000);
 8004598:	4b5f      	ldr	r3, [pc, #380]	@ (8004718 <Oscilloscope_Process+0xefc>)
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	4a60      	ldr	r2, [pc, #384]	@ (8004720 <Oscilloscope_Process+0xf04>)
 800459e:	fba2 2303 	umull	r2, r3, r2, r3
 80045a2:	0c9b      	lsrs	r3, r3, #18
 80045a4:	f107 00cc 	add.w	r0, r7, #204	@ 0xcc
 80045a8:	4a5e      	ldr	r2, [pc, #376]	@ (8004724 <Oscilloscope_Process+0xf08>)
 80045aa:	21ff      	movs	r1, #255	@ 0xff
 80045ac:	f008 f9d8 	bl	800c960 <sniprintf>
 80045b0:	e019      	b.n	80045e6 <Oscilloscope_Process+0xdca>
		else if (xlim_us >= 1000)
 80045b2:	4b59      	ldr	r3, [pc, #356]	@ (8004718 <Oscilloscope_Process+0xefc>)
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80045ba:	d30c      	bcc.n	80045d6 <Oscilloscope_Process+0xdba>
			snprintf(string, 255, "%3lims", xlim_us / 1000);
 80045bc:	4b56      	ldr	r3, [pc, #344]	@ (8004718 <Oscilloscope_Process+0xefc>)
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	4a59      	ldr	r2, [pc, #356]	@ (8004728 <Oscilloscope_Process+0xf0c>)
 80045c2:	fba2 2303 	umull	r2, r3, r2, r3
 80045c6:	099b      	lsrs	r3, r3, #6
 80045c8:	f107 00cc 	add.w	r0, r7, #204	@ 0xcc
 80045cc:	4a57      	ldr	r2, [pc, #348]	@ (800472c <Oscilloscope_Process+0xf10>)
 80045ce:	21ff      	movs	r1, #255	@ 0xff
 80045d0:	f008 f9c6 	bl	800c960 <sniprintf>
 80045d4:	e007      	b.n	80045e6 <Oscilloscope_Process+0xdca>
		else
			snprintf(string, 255, "%3lius", xlim_us);
 80045d6:	4b50      	ldr	r3, [pc, #320]	@ (8004718 <Oscilloscope_Process+0xefc>)
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	f107 00cc 	add.w	r0, r7, #204	@ 0xcc
 80045de:	4a54      	ldr	r2, [pc, #336]	@ (8004730 <Oscilloscope_Process+0xf14>)
 80045e0:	21ff      	movs	r1, #255	@ 0xff
 80045e2:	f008 f9bd 	bl	800c960 <sniprintf>

		ILI9341_WriteString(&display, 22, 225, string, Font_7x10, ILI9341_BLACK, ILI9341_WHITE);
 80045e6:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 80045ea:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80045ee:	9203      	str	r2, [sp, #12]
 80045f0:	2200      	movs	r2, #0
 80045f2:	9202      	str	r2, [sp, #8]
 80045f4:	494f      	ldr	r1, [pc, #316]	@ (8004734 <Oscilloscope_Process+0xf18>)
 80045f6:	466a      	mov	r2, sp
 80045f8:	c903      	ldmia	r1, {r0, r1}
 80045fa:	e882 0003 	stmia.w	r2, {r0, r1}
 80045fe:	22e1      	movs	r2, #225	@ 0xe1
 8004600:	2116      	movs	r1, #22
 8004602:	4841      	ldr	r0, [pc, #260]	@ (8004708 <Oscilloscope_Process+0xeec>)
 8004604:	f7fd fd6f 	bl	80020e6 <ILI9341_WriteString>

		event_seconds = 0;
 8004608:	4b42      	ldr	r3, [pc, #264]	@ (8004714 <Oscilloscope_Process+0xef8>)
 800460a:	2200      	movs	r2, #0
 800460c:	701a      	strb	r2, [r3, #0]
	}

	// Handle UI redraw voltage events
	if (event_voltage) {
 800460e:	4b4a      	ldr	r3, [pc, #296]	@ (8004738 <Oscilloscope_Process+0xf1c>)
 8004610:	781b      	ldrb	r3, [r3, #0]
 8004612:	2b00      	cmp	r3, #0
 8004614:	d03f      	beq.n	8004696 <Oscilloscope_Process+0xe7a>
		if (ylim_uV >= 1000000)
 8004616:	4b49      	ldr	r3, [pc, #292]	@ (800473c <Oscilloscope_Process+0xf20>)
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	4a40      	ldr	r2, [pc, #256]	@ (800471c <Oscilloscope_Process+0xf00>)
 800461c:	4293      	cmp	r3, r2
 800461e:	d90c      	bls.n	800463a <Oscilloscope_Process+0xe1e>
			snprintf(string, 255, "%3li V",  ylim_uV / 1000000);
 8004620:	4b46      	ldr	r3, [pc, #280]	@ (800473c <Oscilloscope_Process+0xf20>)
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	4a3e      	ldr	r2, [pc, #248]	@ (8004720 <Oscilloscope_Process+0xf04>)
 8004626:	fba2 2303 	umull	r2, r3, r2, r3
 800462a:	0c9b      	lsrs	r3, r3, #18
 800462c:	f107 00cc 	add.w	r0, r7, #204	@ 0xcc
 8004630:	4a43      	ldr	r2, [pc, #268]	@ (8004740 <Oscilloscope_Process+0xf24>)
 8004632:	21ff      	movs	r1, #255	@ 0xff
 8004634:	f008 f994 	bl	800c960 <sniprintf>
 8004638:	e019      	b.n	800466e <Oscilloscope_Process+0xe52>
		else if (ylim_uV >= 1000)
 800463a:	4b40      	ldr	r3, [pc, #256]	@ (800473c <Oscilloscope_Process+0xf20>)
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004642:	d30c      	bcc.n	800465e <Oscilloscope_Process+0xe42>
			snprintf(string, 255, "%3limV", ylim_uV / 1000);
 8004644:	4b3d      	ldr	r3, [pc, #244]	@ (800473c <Oscilloscope_Process+0xf20>)
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	4a37      	ldr	r2, [pc, #220]	@ (8004728 <Oscilloscope_Process+0xf0c>)
 800464a:	fba2 2303 	umull	r2, r3, r2, r3
 800464e:	099b      	lsrs	r3, r3, #6
 8004650:	f107 00cc 	add.w	r0, r7, #204	@ 0xcc
 8004654:	4a3b      	ldr	r2, [pc, #236]	@ (8004744 <Oscilloscope_Process+0xf28>)
 8004656:	21ff      	movs	r1, #255	@ 0xff
 8004658:	f008 f982 	bl	800c960 <sniprintf>
 800465c:	e007      	b.n	800466e <Oscilloscope_Process+0xe52>
		else
			snprintf(string, 255, "%3liuV", ylim_uV);
 800465e:	4b37      	ldr	r3, [pc, #220]	@ (800473c <Oscilloscope_Process+0xf20>)
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	f107 00cc 	add.w	r0, r7, #204	@ 0xcc
 8004666:	4a38      	ldr	r2, [pc, #224]	@ (8004748 <Oscilloscope_Process+0xf2c>)
 8004668:	21ff      	movs	r1, #255	@ 0xff
 800466a:	f008 f979 	bl	800c960 <sniprintf>

		ILI9341_WriteString(&display, 60, 225, string, Font_7x10, ILI9341_BLACK, ILI9341_WHITE);
 800466e:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8004672:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004676:	9203      	str	r2, [sp, #12]
 8004678:	2200      	movs	r2, #0
 800467a:	9202      	str	r2, [sp, #8]
 800467c:	492d      	ldr	r1, [pc, #180]	@ (8004734 <Oscilloscope_Process+0xf18>)
 800467e:	466a      	mov	r2, sp
 8004680:	c903      	ldmia	r1, {r0, r1}
 8004682:	e882 0003 	stmia.w	r2, {r0, r1}
 8004686:	22e1      	movs	r2, #225	@ 0xe1
 8004688:	213c      	movs	r1, #60	@ 0x3c
 800468a:	481f      	ldr	r0, [pc, #124]	@ (8004708 <Oscilloscope_Process+0xeec>)
 800468c:	f7fd fd2b 	bl	80020e6 <ILI9341_WriteString>

		event_voltage = 0;
 8004690:	4b29      	ldr	r3, [pc, #164]	@ (8004738 <Oscilloscope_Process+0xf1c>)
 8004692:	2200      	movs	r2, #0
 8004694:	701a      	strb	r2, [r3, #0]
	}

	snprintf(string, 255, "T:%i%i", event_trigger0_detected, event_trigger1_detected);
 8004696:	4b2d      	ldr	r3, [pc, #180]	@ (800474c <Oscilloscope_Process+0xf30>)
 8004698:	781b      	ldrb	r3, [r3, #0]
 800469a:	461a      	mov	r2, r3
 800469c:	4b2c      	ldr	r3, [pc, #176]	@ (8004750 <Oscilloscope_Process+0xf34>)
 800469e:	781b      	ldrb	r3, [r3, #0]
 80046a0:	f107 00cc 	add.w	r0, r7, #204	@ 0xcc
 80046a4:	9300      	str	r3, [sp, #0]
 80046a6:	4613      	mov	r3, r2
 80046a8:	4a2a      	ldr	r2, [pc, #168]	@ (8004754 <Oscilloscope_Process+0xf38>)
 80046aa:	21ff      	movs	r1, #255	@ 0xff
 80046ac:	f008 f958 	bl	800c960 <sniprintf>
	ILI9341_WriteString(&display, 195, 5, string, Font_7x10, ILI9341_WHITE, ILI9341_BLACK);
 80046b0:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 80046b4:	2200      	movs	r2, #0
 80046b6:	9203      	str	r2, [sp, #12]
 80046b8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80046bc:	9202      	str	r2, [sp, #8]
 80046be:	491d      	ldr	r1, [pc, #116]	@ (8004734 <Oscilloscope_Process+0xf18>)
 80046c0:	466a      	mov	r2, sp
 80046c2:	c903      	ldmia	r1, {r0, r1}
 80046c4:	e882 0003 	stmia.w	r2, {r0, r1}
 80046c8:	2205      	movs	r2, #5
 80046ca:	21c3      	movs	r1, #195	@ 0xc3
 80046cc:	480e      	ldr	r0, [pc, #56]	@ (8004708 <Oscilloscope_Process+0xeec>)
 80046ce:	f7fd fd0a 	bl	80020e6 <ILI9341_WriteString>

	if (menu_channel1_enabled && menu_selected_item == 3) {
 80046d2:	4b21      	ldr	r3, [pc, #132]	@ (8004758 <Oscilloscope_Process+0xf3c>)
 80046d4:	781b      	ldrb	r3, [r3, #0]
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d048      	beq.n	800476c <Oscilloscope_Process+0xf50>
 80046da:	4b20      	ldr	r3, [pc, #128]	@ (800475c <Oscilloscope_Process+0xf40>)
 80046dc:	f993 3000 	ldrsb.w	r3, [r3]
 80046e0:	2b03      	cmp	r3, #3
 80046e2:	d143      	bne.n	800476c <Oscilloscope_Process+0xf50>
		//if (adc_period1_detected)
			drawSignalParam(&display, string, 255, adc_max[1], adc_min[1], adc_period[1]);
 80046e4:	4b1e      	ldr	r3, [pc, #120]	@ (8004760 <Oscilloscope_Process+0xf44>)
 80046e6:	885b      	ldrh	r3, [r3, #2]
 80046e8:	b298      	uxth	r0, r3
 80046ea:	4b1e      	ldr	r3, [pc, #120]	@ (8004764 <Oscilloscope_Process+0xf48>)
 80046ec:	885b      	ldrh	r3, [r3, #2]
 80046ee:	b29b      	uxth	r3, r3
 80046f0:	4a1d      	ldr	r2, [pc, #116]	@ (8004768 <Oscilloscope_Process+0xf4c>)
 80046f2:	6852      	ldr	r2, [r2, #4]
 80046f4:	f107 01cc 	add.w	r1, r7, #204	@ 0xcc
 80046f8:	9201      	str	r2, [sp, #4]
 80046fa:	9300      	str	r3, [sp, #0]
 80046fc:	4603      	mov	r3, r0
 80046fe:	22ff      	movs	r2, #255	@ 0xff
 8004700:	4801      	ldr	r0, [pc, #4]	@ (8004708 <Oscilloscope_Process+0xeec>)
 8004702:	f7fe ff63 	bl	80035cc <drawSignalParam>
 8004706:	e046      	b.n	8004796 <Oscilloscope_Process+0xf7a>
 8004708:	2000d4b8 	.word	0x2000d4b8
 800470c:	2001352c 	.word	0x2001352c
 8004710:	2000d108 	.word	0x2000d108
 8004714:	2000d105 	.word	0x2000d105
 8004718:	2000d0ec 	.word	0x2000d0ec
 800471c:	000f423f 	.word	0x000f423f
 8004720:	431bde83 	.word	0x431bde83
 8004724:	080104d0 	.word	0x080104d0
 8004728:	10624dd3 	.word	0x10624dd3
 800472c:	080104d8 	.word	0x080104d8
 8004730:	080104e0 	.word	0x080104e0
 8004734:	20000000 	.word	0x20000000
 8004738:	2000d106 	.word	0x2000d106
 800473c:	2000d0f0 	.word	0x2000d0f0
 8004740:	080104e8 	.word	0x080104e8
 8004744:	080104f0 	.word	0x080104f0
 8004748:	080104f8 	.word	0x080104f8
 800474c:	2000d109 	.word	0x2000d109
 8004750:	2000d10a 	.word	0x2000d10a
 8004754:	08010500 	.word	0x08010500
 8004758:	2000d10c 	.word	0x2000d10c
 800475c:	2000d10d 	.word	0x2000d10d
 8004760:	2000d51c 	.word	0x2000d51c
 8004764:	2000d0e4 	.word	0x2000d0e4
 8004768:	2000d520 	.word	0x2000d520
	} else if (menu_channel0_enabled) {
 800476c:	4b39      	ldr	r3, [pc, #228]	@ (8004854 <Oscilloscope_Process+0x1038>)
 800476e:	781b      	ldrb	r3, [r3, #0]
 8004770:	2b00      	cmp	r3, #0
 8004772:	d010      	beq.n	8004796 <Oscilloscope_Process+0xf7a>
		//if (adc_period0_detected)
			drawSignalParam(&display, string, 255, adc_max[0], adc_min[0], adc_period[0]);
 8004774:	4b38      	ldr	r3, [pc, #224]	@ (8004858 <Oscilloscope_Process+0x103c>)
 8004776:	881b      	ldrh	r3, [r3, #0]
 8004778:	b298      	uxth	r0, r3
 800477a:	4b38      	ldr	r3, [pc, #224]	@ (800485c <Oscilloscope_Process+0x1040>)
 800477c:	881b      	ldrh	r3, [r3, #0]
 800477e:	b29b      	uxth	r3, r3
 8004780:	4a37      	ldr	r2, [pc, #220]	@ (8004860 <Oscilloscope_Process+0x1044>)
 8004782:	6812      	ldr	r2, [r2, #0]
 8004784:	f107 01cc 	add.w	r1, r7, #204	@ 0xcc
 8004788:	9201      	str	r2, [sp, #4]
 800478a:	9300      	str	r3, [sp, #0]
 800478c:	4603      	mov	r3, r0
 800478e:	22ff      	movs	r2, #255	@ 0xff
 8004790:	4834      	ldr	r0, [pc, #208]	@ (8004864 <Oscilloscope_Process+0x1048>)
 8004792:	f7fe ff1b 	bl	80035cc <drawSignalParam>
	}

	// Restart ADC ...
	if (local_event_adc) {
 8004796:	f897 31ef 	ldrb.w	r3, [r7, #495]	@ 0x1ef
 800479a:	2b00      	cmp	r3, #0
 800479c:	d04e      	beq.n	800483c <Oscilloscope_Process+0x1020>
		adc_reset_cyccnt = 1;
 800479e:	4b32      	ldr	r3, [pc, #200]	@ (8004868 <Oscilloscope_Process+0x104c>)
 80047a0:	2201      	movs	r2, #1
 80047a2:	701a      	strb	r2, [r3, #0]
		adc0_length = 0;
 80047a4:	4b31      	ldr	r3, [pc, #196]	@ (800486c <Oscilloscope_Process+0x1050>)
 80047a6:	2200      	movs	r2, #0
 80047a8:	601a      	str	r2, [r3, #0]
		adc1_length = 0;
 80047aa:	4b31      	ldr	r3, [pc, #196]	@ (8004870 <Oscilloscope_Process+0x1054>)
 80047ac:	2200      	movs	r2, #0
 80047ae:	601a      	str	r2, [r3, #0]
		adc_max[0] = 0;
 80047b0:	4b29      	ldr	r3, [pc, #164]	@ (8004858 <Oscilloscope_Process+0x103c>)
 80047b2:	2200      	movs	r2, #0
 80047b4:	801a      	strh	r2, [r3, #0]
		adc_max[1] = 0;
 80047b6:	4b28      	ldr	r3, [pc, #160]	@ (8004858 <Oscilloscope_Process+0x103c>)
 80047b8:	2200      	movs	r2, #0
 80047ba:	805a      	strh	r2, [r3, #2]
		adc_min[0] = -1;
 80047bc:	4b27      	ldr	r3, [pc, #156]	@ (800485c <Oscilloscope_Process+0x1040>)
 80047be:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80047c2:	801a      	strh	r2, [r3, #0]
		adc_min[1] = -1;
 80047c4:	4b25      	ldr	r3, [pc, #148]	@ (800485c <Oscilloscope_Process+0x1040>)
 80047c6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80047ca:	805a      	strh	r2, [r3, #2]
		adc_period[0] = 0;
 80047cc:	4b24      	ldr	r3, [pc, #144]	@ (8004860 <Oscilloscope_Process+0x1044>)
 80047ce:	2200      	movs	r2, #0
 80047d0:	601a      	str	r2, [r3, #0]
		adc_period[1] = 0;
 80047d2:	4b23      	ldr	r3, [pc, #140]	@ (8004860 <Oscilloscope_Process+0x1044>)
 80047d4:	2200      	movs	r2, #0
 80047d6:	605a      	str	r2, [r3, #4]
		adc_period0_detected = 0;
 80047d8:	4b26      	ldr	r3, [pc, #152]	@ (8004874 <Oscilloscope_Process+0x1058>)
 80047da:	2200      	movs	r2, #0
 80047dc:	701a      	strb	r2, [r3, #0]
		adc_period1_detected = 0;
 80047de:	4b26      	ldr	r3, [pc, #152]	@ (8004878 <Oscilloscope_Process+0x105c>)
 80047e0:	2200      	movs	r2, #0
 80047e2:	701a      	strb	r2, [r3, #0]
		event_trigger0_detected = 0;
 80047e4:	4b25      	ldr	r3, [pc, #148]	@ (800487c <Oscilloscope_Process+0x1060>)
 80047e6:	2200      	movs	r2, #0
 80047e8:	701a      	strb	r2, [r3, #0]
		event_trigger1_detected = 0;
 80047ea:	4b25      	ldr	r3, [pc, #148]	@ (8004880 <Oscilloscope_Process+0x1064>)
 80047ec:	2200      	movs	r2, #0
 80047ee:	701a      	strb	r2, [r3, #0]

		if (menu_channel0_enabled)
 80047f0:	4b18      	ldr	r3, [pc, #96]	@ (8004854 <Oscilloscope_Process+0x1038>)
 80047f2:	781b      	ldrb	r3, [r3, #0]
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d003      	beq.n	8004800 <Oscilloscope_Process+0xfe4>
			adc0_filled = 0;
 80047f8:	4b22      	ldr	r3, [pc, #136]	@ (8004884 <Oscilloscope_Process+0x1068>)
 80047fa:	2200      	movs	r2, #0
 80047fc:	701a      	strb	r2, [r3, #0]
 80047fe:	e002      	b.n	8004806 <Oscilloscope_Process+0xfea>
		else
			adc0_filled = 1;
 8004800:	4b20      	ldr	r3, [pc, #128]	@ (8004884 <Oscilloscope_Process+0x1068>)
 8004802:	2201      	movs	r2, #1
 8004804:	701a      	strb	r2, [r3, #0]

		if (menu_channel1_enabled)
 8004806:	4b20      	ldr	r3, [pc, #128]	@ (8004888 <Oscilloscope_Process+0x106c>)
 8004808:	781b      	ldrb	r3, [r3, #0]
 800480a:	2b00      	cmp	r3, #0
 800480c:	d003      	beq.n	8004816 <Oscilloscope_Process+0xffa>
			adc1_filled = 0;
 800480e:	4b1f      	ldr	r3, [pc, #124]	@ (800488c <Oscilloscope_Process+0x1070>)
 8004810:	2200      	movs	r2, #0
 8004812:	701a      	strb	r2, [r3, #0]
 8004814:	e002      	b.n	800481c <Oscilloscope_Process+0x1000>
		else
			adc1_filled = 1;
 8004816:	4b1d      	ldr	r3, [pc, #116]	@ (800488c <Oscilloscope_Process+0x1070>)
 8004818:	2201      	movs	r2, #1
 800481a:	701a      	strb	r2, [r3, #0]

		if (adc_immediate) {
 800481c:	4b1c      	ldr	r3, [pc, #112]	@ (8004890 <Oscilloscope_Process+0x1074>)
 800481e:	781b      	ldrb	r3, [r3, #0]
 8004820:	2b00      	cmp	r3, #0
 8004822:	d005      	beq.n	8004830 <Oscilloscope_Process+0x1014>
			// The ADC starts immediately after the previous measurement is handled
			HAL_ADC_Start_DMA(&hadc1, (uint32_t*)&adc_data, 2);
 8004824:	2202      	movs	r2, #2
 8004826:	491b      	ldr	r1, [pc, #108]	@ (8004894 <Oscilloscope_Process+0x1078>)
 8004828:	481b      	ldr	r0, [pc, #108]	@ (8004898 <Oscilloscope_Process+0x107c>)
 800482a:	f000 ff01 	bl	8005630 <HAL_ADC_Start_DMA>
 800482e:	e002      	b.n	8004836 <Oscilloscope_Process+0x101a>
		} else {
			// ADC starts by timer
			HAL_TIM_Base_Start_IT(&htim10);
 8004830:	481a      	ldr	r0, [pc, #104]	@ (800489c <Oscilloscope_Process+0x1080>)
 8004832:	f004 fa61 	bl	8008cf8 <HAL_TIM_Base_Start_IT>
		}

		local_event_adc = 0;
 8004836:	2300      	movs	r3, #0
 8004838:	f887 31ef 	strb.w	r3, [r7, #495]	@ 0x1ef
	}

	frames++;
 800483c:	4b18      	ldr	r3, [pc, #96]	@ (80048a0 <Oscilloscope_Process+0x1084>)
 800483e:	781b      	ldrb	r3, [r3, #0]
 8004840:	3301      	adds	r3, #1
 8004842:	b2da      	uxtb	r2, r3
 8004844:	4b16      	ldr	r3, [pc, #88]	@ (80048a0 <Oscilloscope_Process+0x1084>)
 8004846:	701a      	strb	r2, [r3, #0]

}
 8004848:	bf00      	nop
 800484a:	f507 77f8 	add.w	r7, r7, #496	@ 0x1f0
 800484e:	46bd      	mov	sp, r7
 8004850:	bdb0      	pop	{r4, r5, r7, pc}
 8004852:	bf00      	nop
 8004854:	2000d10b 	.word	0x2000d10b
 8004858:	2000d51c 	.word	0x2000d51c
 800485c:	2000d0e4 	.word	0x2000d0e4
 8004860:	2000d520 	.word	0x2000d520
 8004864:	2000d4b8 	.word	0x2000d4b8
 8004868:	2000d0e2 	.word	0x2000d0e2
 800486c:	2000d510 	.word	0x2000d510
 8004870:	2000d514 	.word	0x2000d514
 8004874:	2000d528 	.word	0x2000d528
 8004878:	2000d529 	.word	0x2000d529
 800487c:	2000d109 	.word	0x2000d109
 8004880:	2000d10a 	.word	0x2000d10a
 8004884:	2000d518 	.word	0x2000d518
 8004888:	2000d10c 	.word	0x2000d10c
 800488c:	2000d0e0 	.word	0x2000d0e0
 8004890:	2000d0e8 	.word	0x2000d0e8
 8004894:	2000d508 	.word	0x2000d508
 8004898:	2000d318 	.word	0x2000d318
 800489c:	20013fe0 	.word	0x20013fe0
 80048a0:	20013538 	.word	0x20013538

080048a4 <MX_SPI4_Init>:
SPI_HandleTypeDef hspi4;
SPI_HandleTypeDef hspi5;

/* SPI4 init function */
void MX_SPI4_Init(void)
{
 80048a4:	b580      	push	{r7, lr}
 80048a6:	af00      	add	r7, sp, #0
  /* USER CODE END SPI4_Init 0 */

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  hspi4.Instance = SPI4;
 80048a8:	4b17      	ldr	r3, [pc, #92]	@ (8004908 <MX_SPI4_Init+0x64>)
 80048aa:	4a18      	ldr	r2, [pc, #96]	@ (800490c <MX_SPI4_Init+0x68>)
 80048ac:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 80048ae:	4b16      	ldr	r3, [pc, #88]	@ (8004908 <MX_SPI4_Init+0x64>)
 80048b0:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80048b4:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 80048b6:	4b14      	ldr	r3, [pc, #80]	@ (8004908 <MX_SPI4_Init+0x64>)
 80048b8:	2200      	movs	r2, #0
 80048ba:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 80048bc:	4b12      	ldr	r3, [pc, #72]	@ (8004908 <MX_SPI4_Init+0x64>)
 80048be:	2200      	movs	r2, #0
 80048c0:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 80048c2:	4b11      	ldr	r3, [pc, #68]	@ (8004908 <MX_SPI4_Init+0x64>)
 80048c4:	2200      	movs	r2, #0
 80048c6:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 80048c8:	4b0f      	ldr	r3, [pc, #60]	@ (8004908 <MX_SPI4_Init+0x64>)
 80048ca:	2200      	movs	r2, #0
 80048cc:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 80048ce:	4b0e      	ldr	r3, [pc, #56]	@ (8004908 <MX_SPI4_Init+0x64>)
 80048d0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80048d4:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;//SPI_BAUDRATEPRESCALER_2;
 80048d6:	4b0c      	ldr	r3, [pc, #48]	@ (8004908 <MX_SPI4_Init+0x64>)
 80048d8:	2210      	movs	r2, #16
 80048da:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80048dc:	4b0a      	ldr	r3, [pc, #40]	@ (8004908 <MX_SPI4_Init+0x64>)
 80048de:	2200      	movs	r2, #0
 80048e0:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 80048e2:	4b09      	ldr	r3, [pc, #36]	@ (8004908 <MX_SPI4_Init+0x64>)
 80048e4:	2200      	movs	r2, #0
 80048e6:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80048e8:	4b07      	ldr	r3, [pc, #28]	@ (8004908 <MX_SPI4_Init+0x64>)
 80048ea:	2200      	movs	r2, #0
 80048ec:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi4.Init.CRCPolynomial = 10;
 80048ee:	4b06      	ldr	r3, [pc, #24]	@ (8004908 <MX_SPI4_Init+0x64>)
 80048f0:	220a      	movs	r2, #10
 80048f2:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 80048f4:	4804      	ldr	r0, [pc, #16]	@ (8004908 <MX_SPI4_Init+0x64>)
 80048f6:	f003 fd5d 	bl	80083b4 <HAL_SPI_Init>
 80048fa:	4603      	mov	r3, r0
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d001      	beq.n	8004904 <MX_SPI4_Init+0x60>
  {
    Error_Handler();
 8004900:	f7fe f84a 	bl	8002998 <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 8004904:	bf00      	nop
 8004906:	bd80      	pop	{r7, pc}
 8004908:	20013e0c 	.word	0x20013e0c
 800490c:	40013400 	.word	0x40013400

08004910 <MX_SPI5_Init>:
/* SPI5 init function */
void MX_SPI5_Init(void)
{
 8004910:	b580      	push	{r7, lr}
 8004912:	af00      	add	r7, sp, #0
  /* USER CODE END SPI5_Init 0 */

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  hspi5.Instance = SPI5;
 8004914:	4b17      	ldr	r3, [pc, #92]	@ (8004974 <MX_SPI5_Init+0x64>)
 8004916:	4a18      	ldr	r2, [pc, #96]	@ (8004978 <MX_SPI5_Init+0x68>)
 8004918:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 800491a:	4b16      	ldr	r3, [pc, #88]	@ (8004974 <MX_SPI5_Init+0x64>)
 800491c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8004920:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 8004922:	4b14      	ldr	r3, [pc, #80]	@ (8004974 <MX_SPI5_Init+0x64>)
 8004924:	2200      	movs	r2, #0
 8004926:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 8004928:	4b12      	ldr	r3, [pc, #72]	@ (8004974 <MX_SPI5_Init+0x64>)
 800492a:	2200      	movs	r2, #0
 800492c:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 800492e:	4b11      	ldr	r3, [pc, #68]	@ (8004974 <MX_SPI5_Init+0x64>)
 8004930:	2200      	movs	r2, #0
 8004932:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8004934:	4b0f      	ldr	r3, [pc, #60]	@ (8004974 <MX_SPI5_Init+0x64>)
 8004936:	2200      	movs	r2, #0
 8004938:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 800493a:	4b0e      	ldr	r3, [pc, #56]	@ (8004974 <MX_SPI5_Init+0x64>)
 800493c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004940:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004942:	4b0c      	ldr	r3, [pc, #48]	@ (8004974 <MX_SPI5_Init+0x64>)
 8004944:	2200      	movs	r2, #0
 8004946:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8004948:	4b0a      	ldr	r3, [pc, #40]	@ (8004974 <MX_SPI5_Init+0x64>)
 800494a:	2200      	movs	r2, #0
 800494c:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 800494e:	4b09      	ldr	r3, [pc, #36]	@ (8004974 <MX_SPI5_Init+0x64>)
 8004950:	2200      	movs	r2, #0
 8004952:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004954:	4b07      	ldr	r3, [pc, #28]	@ (8004974 <MX_SPI5_Init+0x64>)
 8004956:	2200      	movs	r2, #0
 8004958:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi5.Init.CRCPolynomial = 10;
 800495a:	4b06      	ldr	r3, [pc, #24]	@ (8004974 <MX_SPI5_Init+0x64>)
 800495c:	220a      	movs	r2, #10
 800495e:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8004960:	4804      	ldr	r0, [pc, #16]	@ (8004974 <MX_SPI5_Init+0x64>)
 8004962:	f003 fd27 	bl	80083b4 <HAL_SPI_Init>
 8004966:	4603      	mov	r3, r0
 8004968:	2b00      	cmp	r3, #0
 800496a:	d001      	beq.n	8004970 <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 800496c:	f7fe f814 	bl	8002998 <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 8004970:	bf00      	nop
 8004972:	bd80      	pop	{r7, pc}
 8004974:	20013e64 	.word	0x20013e64
 8004978:	40015000 	.word	0x40015000

0800497c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800497c:	b580      	push	{r7, lr}
 800497e:	b08e      	sub	sp, #56	@ 0x38
 8004980:	af00      	add	r7, sp, #0
 8004982:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004984:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004988:	2200      	movs	r2, #0
 800498a:	601a      	str	r2, [r3, #0]
 800498c:	605a      	str	r2, [r3, #4]
 800498e:	609a      	str	r2, [r3, #8]
 8004990:	60da      	str	r2, [r3, #12]
 8004992:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI4)
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	4a59      	ldr	r2, [pc, #356]	@ (8004b00 <HAL_SPI_MspInit+0x184>)
 800499a:	4293      	cmp	r3, r2
 800499c:	d15c      	bne.n	8004a58 <HAL_SPI_MspInit+0xdc>
  {
  /* USER CODE BEGIN SPI4_MspInit 0 */

  /* USER CODE END SPI4_MspInit 0 */
    /* SPI4 clock enable */
    __HAL_RCC_SPI4_CLK_ENABLE();
 800499e:	2300      	movs	r3, #0
 80049a0:	623b      	str	r3, [r7, #32]
 80049a2:	4b58      	ldr	r3, [pc, #352]	@ (8004b04 <HAL_SPI_MspInit+0x188>)
 80049a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80049a6:	4a57      	ldr	r2, [pc, #348]	@ (8004b04 <HAL_SPI_MspInit+0x188>)
 80049a8:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80049ac:	6453      	str	r3, [r2, #68]	@ 0x44
 80049ae:	4b55      	ldr	r3, [pc, #340]	@ (8004b04 <HAL_SPI_MspInit+0x188>)
 80049b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80049b2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80049b6:	623b      	str	r3, [r7, #32]
 80049b8:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80049ba:	2300      	movs	r3, #0
 80049bc:	61fb      	str	r3, [r7, #28]
 80049be:	4b51      	ldr	r3, [pc, #324]	@ (8004b04 <HAL_SPI_MspInit+0x188>)
 80049c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80049c2:	4a50      	ldr	r2, [pc, #320]	@ (8004b04 <HAL_SPI_MspInit+0x188>)
 80049c4:	f043 0301 	orr.w	r3, r3, #1
 80049c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80049ca:	4b4e      	ldr	r3, [pc, #312]	@ (8004b04 <HAL_SPI_MspInit+0x188>)
 80049cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80049ce:	f003 0301 	and.w	r3, r3, #1
 80049d2:	61fb      	str	r3, [r7, #28]
 80049d4:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80049d6:	2300      	movs	r3, #0
 80049d8:	61bb      	str	r3, [r7, #24]
 80049da:	4b4a      	ldr	r3, [pc, #296]	@ (8004b04 <HAL_SPI_MspInit+0x188>)
 80049dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80049de:	4a49      	ldr	r2, [pc, #292]	@ (8004b04 <HAL_SPI_MspInit+0x188>)
 80049e0:	f043 0302 	orr.w	r3, r3, #2
 80049e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80049e6:	4b47      	ldr	r3, [pc, #284]	@ (8004b04 <HAL_SPI_MspInit+0x188>)
 80049e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80049ea:	f003 0302 	and.w	r3, r3, #2
 80049ee:	61bb      	str	r3, [r7, #24]
 80049f0:	69bb      	ldr	r3, [r7, #24]
    /**SPI4 GPIO Configuration
    PA1     ------> SPI4_MOSI
    PB13     ------> SPI4_SCK
    PA11     ------> SPI4_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80049f2:	2302      	movs	r3, #2
 80049f4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80049f6:	2302      	movs	r3, #2
 80049f8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80049fa:	2300      	movs	r3, #0
 80049fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80049fe:	2303      	movs	r3, #3
 8004a00:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8004a02:	2305      	movs	r3, #5
 8004a04:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004a06:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004a0a:	4619      	mov	r1, r3
 8004a0c:	483e      	ldr	r0, [pc, #248]	@ (8004b08 <HAL_SPI_MspInit+0x18c>)
 8004a0e:	f001 ff51 	bl	80068b4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8004a12:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8004a16:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004a18:	2302      	movs	r3, #2
 8004a1a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a1c:	2300      	movs	r3, #0
 8004a1e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004a20:	2303      	movs	r3, #3
 8004a22:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI4;
 8004a24:	2306      	movs	r3, #6
 8004a26:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004a28:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004a2c:	4619      	mov	r1, r3
 8004a2e:	4837      	ldr	r0, [pc, #220]	@ (8004b0c <HAL_SPI_MspInit+0x190>)
 8004a30:	f001 ff40 	bl	80068b4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8004a34:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8004a38:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004a3a:	2302      	movs	r3, #2
 8004a3c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a3e:	2300      	movs	r3, #0
 8004a40:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004a42:	2303      	movs	r3, #3
 8004a44:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI4;
 8004a46:	2306      	movs	r3, #6
 8004a48:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004a4a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004a4e:	4619      	mov	r1, r3
 8004a50:	482d      	ldr	r0, [pc, #180]	@ (8004b08 <HAL_SPI_MspInit+0x18c>)
 8004a52:	f001 ff2f 	bl	80068b4 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }
}
 8004a56:	e04f      	b.n	8004af8 <HAL_SPI_MspInit+0x17c>
  else if(spiHandle->Instance==SPI5)
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	4a2c      	ldr	r2, [pc, #176]	@ (8004b10 <HAL_SPI_MspInit+0x194>)
 8004a5e:	4293      	cmp	r3, r2
 8004a60:	d14a      	bne.n	8004af8 <HAL_SPI_MspInit+0x17c>
    __HAL_RCC_SPI5_CLK_ENABLE();
 8004a62:	2300      	movs	r3, #0
 8004a64:	617b      	str	r3, [r7, #20]
 8004a66:	4b27      	ldr	r3, [pc, #156]	@ (8004b04 <HAL_SPI_MspInit+0x188>)
 8004a68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a6a:	4a26      	ldr	r2, [pc, #152]	@ (8004b04 <HAL_SPI_MspInit+0x188>)
 8004a6c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004a70:	6453      	str	r3, [r2, #68]	@ 0x44
 8004a72:	4b24      	ldr	r3, [pc, #144]	@ (8004b04 <HAL_SPI_MspInit+0x188>)
 8004a74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a76:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004a7a:	617b      	str	r3, [r7, #20]
 8004a7c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004a7e:	2300      	movs	r3, #0
 8004a80:	613b      	str	r3, [r7, #16]
 8004a82:	4b20      	ldr	r3, [pc, #128]	@ (8004b04 <HAL_SPI_MspInit+0x188>)
 8004a84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a86:	4a1f      	ldr	r2, [pc, #124]	@ (8004b04 <HAL_SPI_MspInit+0x188>)
 8004a88:	f043 0302 	orr.w	r3, r3, #2
 8004a8c:	6313      	str	r3, [r2, #48]	@ 0x30
 8004a8e:	4b1d      	ldr	r3, [pc, #116]	@ (8004b04 <HAL_SPI_MspInit+0x188>)
 8004a90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a92:	f003 0302 	and.w	r3, r3, #2
 8004a96:	613b      	str	r3, [r7, #16]
 8004a98:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004a9a:	2300      	movs	r3, #0
 8004a9c:	60fb      	str	r3, [r7, #12]
 8004a9e:	4b19      	ldr	r3, [pc, #100]	@ (8004b04 <HAL_SPI_MspInit+0x188>)
 8004aa0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004aa2:	4a18      	ldr	r2, [pc, #96]	@ (8004b04 <HAL_SPI_MspInit+0x188>)
 8004aa4:	f043 0301 	orr.w	r3, r3, #1
 8004aa8:	6313      	str	r3, [r2, #48]	@ 0x30
 8004aaa:	4b16      	ldr	r3, [pc, #88]	@ (8004b04 <HAL_SPI_MspInit+0x188>)
 8004aac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004aae:	f003 0301 	and.w	r3, r3, #1
 8004ab2:	60fb      	str	r3, [r7, #12]
 8004ab4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8004ab6:	2301      	movs	r3, #1
 8004ab8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004aba:	2302      	movs	r3, #2
 8004abc:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004abe:	2300      	movs	r3, #0
 8004ac0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004ac2:	2303      	movs	r3, #3
 8004ac4:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI5;
 8004ac6:	2306      	movs	r3, #6
 8004ac8:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004aca:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004ace:	4619      	mov	r1, r3
 8004ad0:	480e      	ldr	r0, [pc, #56]	@ (8004b0c <HAL_SPI_MspInit+0x190>)
 8004ad2:	f001 feef 	bl	80068b4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12;
 8004ad6:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8004ada:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004adc:	2302      	movs	r3, #2
 8004ade:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ae0:	2300      	movs	r3, #0
 8004ae2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004ae4:	2303      	movs	r3, #3
 8004ae6:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI5;
 8004ae8:	2306      	movs	r3, #6
 8004aea:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004aec:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004af0:	4619      	mov	r1, r3
 8004af2:	4805      	ldr	r0, [pc, #20]	@ (8004b08 <HAL_SPI_MspInit+0x18c>)
 8004af4:	f001 fede 	bl	80068b4 <HAL_GPIO_Init>
}
 8004af8:	bf00      	nop
 8004afa:	3738      	adds	r7, #56	@ 0x38
 8004afc:	46bd      	mov	sp, r7
 8004afe:	bd80      	pop	{r7, pc}
 8004b00:	40013400 	.word	0x40013400
 8004b04:	40023800 	.word	0x40023800
 8004b08:	40020000 	.word	0x40020000
 8004b0c:	40020400 	.word	0x40020400
 8004b10:	40015000 	.word	0x40015000

08004b14 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004b14:	b580      	push	{r7, lr}
 8004b16:	b082      	sub	sp, #8
 8004b18:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004b1a:	2300      	movs	r3, #0
 8004b1c:	607b      	str	r3, [r7, #4]
 8004b1e:	4b10      	ldr	r3, [pc, #64]	@ (8004b60 <HAL_MspInit+0x4c>)
 8004b20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b22:	4a0f      	ldr	r2, [pc, #60]	@ (8004b60 <HAL_MspInit+0x4c>)
 8004b24:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004b28:	6453      	str	r3, [r2, #68]	@ 0x44
 8004b2a:	4b0d      	ldr	r3, [pc, #52]	@ (8004b60 <HAL_MspInit+0x4c>)
 8004b2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b2e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004b32:	607b      	str	r3, [r7, #4]
 8004b34:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004b36:	2300      	movs	r3, #0
 8004b38:	603b      	str	r3, [r7, #0]
 8004b3a:	4b09      	ldr	r3, [pc, #36]	@ (8004b60 <HAL_MspInit+0x4c>)
 8004b3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b3e:	4a08      	ldr	r2, [pc, #32]	@ (8004b60 <HAL_MspInit+0x4c>)
 8004b40:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004b44:	6413      	str	r3, [r2, #64]	@ 0x40
 8004b46:	4b06      	ldr	r3, [pc, #24]	@ (8004b60 <HAL_MspInit+0x4c>)
 8004b48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b4a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004b4e:	603b      	str	r3, [r7, #0]
 8004b50:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8004b52:	2007      	movs	r0, #7
 8004b54:	f001 fa4e 	bl	8005ff4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004b58:	bf00      	nop
 8004b5a:	3708      	adds	r7, #8
 8004b5c:	46bd      	mov	sp, r7
 8004b5e:	bd80      	pop	{r7, pc}
 8004b60:	40023800 	.word	0x40023800

08004b64 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004b64:	b480      	push	{r7}
 8004b66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8004b68:	bf00      	nop
 8004b6a:	e7fd      	b.n	8004b68 <NMI_Handler+0x4>

08004b6c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004b6c:	b480      	push	{r7}
 8004b6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004b70:	bf00      	nop
 8004b72:	e7fd      	b.n	8004b70 <HardFault_Handler+0x4>

08004b74 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004b74:	b480      	push	{r7}
 8004b76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004b78:	bf00      	nop
 8004b7a:	e7fd      	b.n	8004b78 <MemManage_Handler+0x4>

08004b7c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004b7c:	b480      	push	{r7}
 8004b7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004b80:	bf00      	nop
 8004b82:	e7fd      	b.n	8004b80 <BusFault_Handler+0x4>

08004b84 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004b84:	b480      	push	{r7}
 8004b86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004b88:	bf00      	nop
 8004b8a:	e7fd      	b.n	8004b88 <UsageFault_Handler+0x4>

08004b8c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004b8c:	b480      	push	{r7}
 8004b8e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004b90:	bf00      	nop
 8004b92:	46bd      	mov	sp, r7
 8004b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b98:	4770      	bx	lr

08004b9a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004b9a:	b480      	push	{r7}
 8004b9c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004b9e:	bf00      	nop
 8004ba0:	46bd      	mov	sp, r7
 8004ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba6:	4770      	bx	lr

08004ba8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004ba8:	b480      	push	{r7}
 8004baa:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004bac:	bf00      	nop
 8004bae:	46bd      	mov	sp, r7
 8004bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb4:	4770      	bx	lr

08004bb6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004bb6:	b580      	push	{r7, lr}
 8004bb8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004bba:	f000 fcb1 	bl	8005520 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004bbe:	bf00      	nop
 8004bc0:	bd80      	pop	{r7, pc}
	...

08004bc4 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8004bc4:	b580      	push	{r7, lr}
 8004bc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 8004bc8:	4802      	ldr	r0, [pc, #8]	@ (8004bd4 <DMA1_Stream3_IRQHandler+0x10>)
 8004bca:	f001 fc09 	bl	80063e0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8004bce:	bf00      	nop
 8004bd0:	bd80      	pop	{r7, pc}
 8004bd2:	bf00      	nop
 8004bd4:	2000d458 	.word	0x2000d458

08004bd8 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8004bd8:	b580      	push	{r7, lr}
 8004bda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8004bdc:	4803      	ldr	r0, [pc, #12]	@ (8004bec <TIM1_UP_TIM10_IRQHandler+0x14>)
 8004bde:	f004 facb 	bl	8009178 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim10);
 8004be2:	4803      	ldr	r0, [pc, #12]	@ (8004bf0 <TIM1_UP_TIM10_IRQHandler+0x18>)
 8004be4:	f004 fac8 	bl	8009178 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8004be8:	bf00      	nop
 8004bea:	bd80      	pop	{r7, pc}
 8004bec:	20013ec0 	.word	0x20013ec0
 8004bf0:	20013fe0 	.word	0x20013fe0

08004bf4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8004bf4:	b580      	push	{r7, lr}
 8004bf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8004bf8:	4802      	ldr	r0, [pc, #8]	@ (8004c04 <TIM2_IRQHandler+0x10>)
 8004bfa:	f004 fabd 	bl	8009178 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8004bfe:	bf00      	nop
 8004c00:	bd80      	pop	{r7, pc}
 8004c02:	bf00      	nop
 8004c04:	20013f08 	.word	0x20013f08

08004c08 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8004c08:	b580      	push	{r7, lr}
 8004c0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8004c0c:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8004c10:	f002 f806 	bl	8006c20 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8004c14:	bf00      	nop
 8004c16:	bd80      	pop	{r7, pc}

08004c18 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8004c18:	b580      	push	{r7, lr}
 8004c1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8004c1c:	4802      	ldr	r0, [pc, #8]	@ (8004c28 <DMA2_Stream0_IRQHandler+0x10>)
 8004c1e:	f001 fbdf 	bl	80063e0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8004c22:	bf00      	nop
 8004c24:	bd80      	pop	{r7, pc}
 8004c26:	bf00      	nop
 8004c28:	2000d360 	.word	0x2000d360

08004c2c <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8004c2c:	b580      	push	{r7, lr}
 8004c2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8004c30:	4802      	ldr	r0, [pc, #8]	@ (8004c3c <USART6_IRQHandler+0x10>)
 8004c32:	f005 f9e9 	bl	800a008 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8004c36:	bf00      	nop
 8004c38:	bd80      	pop	{r7, pc}
 8004c3a:	bf00      	nop
 8004c3c:	20014070 	.word	0x20014070

08004c40 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004c40:	b580      	push	{r7, lr}
 8004c42:	b086      	sub	sp, #24
 8004c44:	af00      	add	r7, sp, #0
 8004c46:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004c48:	4a14      	ldr	r2, [pc, #80]	@ (8004c9c <_sbrk+0x5c>)
 8004c4a:	4b15      	ldr	r3, [pc, #84]	@ (8004ca0 <_sbrk+0x60>)
 8004c4c:	1ad3      	subs	r3, r2, r3
 8004c4e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004c50:	697b      	ldr	r3, [r7, #20]
 8004c52:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004c54:	4b13      	ldr	r3, [pc, #76]	@ (8004ca4 <_sbrk+0x64>)
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d102      	bne.n	8004c62 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004c5c:	4b11      	ldr	r3, [pc, #68]	@ (8004ca4 <_sbrk+0x64>)
 8004c5e:	4a12      	ldr	r2, [pc, #72]	@ (8004ca8 <_sbrk+0x68>)
 8004c60:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004c62:	4b10      	ldr	r3, [pc, #64]	@ (8004ca4 <_sbrk+0x64>)
 8004c64:	681a      	ldr	r2, [r3, #0]
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	4413      	add	r3, r2
 8004c6a:	693a      	ldr	r2, [r7, #16]
 8004c6c:	429a      	cmp	r2, r3
 8004c6e:	d207      	bcs.n	8004c80 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004c70:	f007 fff8 	bl	800cc64 <__errno>
 8004c74:	4603      	mov	r3, r0
 8004c76:	220c      	movs	r2, #12
 8004c78:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004c7a:	f04f 33ff 	mov.w	r3, #4294967295
 8004c7e:	e009      	b.n	8004c94 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004c80:	4b08      	ldr	r3, [pc, #32]	@ (8004ca4 <_sbrk+0x64>)
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004c86:	4b07      	ldr	r3, [pc, #28]	@ (8004ca4 <_sbrk+0x64>)
 8004c88:	681a      	ldr	r2, [r3, #0]
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	4413      	add	r3, r2
 8004c8e:	4a05      	ldr	r2, [pc, #20]	@ (8004ca4 <_sbrk+0x64>)
 8004c90:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004c92:	68fb      	ldr	r3, [r7, #12]
}
 8004c94:	4618      	mov	r0, r3
 8004c96:	3718      	adds	r7, #24
 8004c98:	46bd      	mov	sp, r7
 8004c9a:	bd80      	pop	{r7, pc}
 8004c9c:	20020000 	.word	0x20020000
 8004ca0:	00000800 	.word	0x00000800
 8004ca4:	20013ebc 	.word	0x20013ebc
 8004ca8:	20014228 	.word	0x20014228

08004cac <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004cac:	b480      	push	{r7}
 8004cae:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004cb0:	4b06      	ldr	r3, [pc, #24]	@ (8004ccc <SystemInit+0x20>)
 8004cb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004cb6:	4a05      	ldr	r2, [pc, #20]	@ (8004ccc <SystemInit+0x20>)
 8004cb8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8004cbc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004cc0:	bf00      	nop
 8004cc2:	46bd      	mov	sp, r7
 8004cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc8:	4770      	bx	lr
 8004cca:	bf00      	nop
 8004ccc:	e000ed00 	.word	0xe000ed00

08004cd0 <MX_TIM1_Init>:
TIM_HandleTypeDef htim4;
TIM_HandleTypeDef htim10;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8004cd0:	b580      	push	{r7, lr}
 8004cd2:	b096      	sub	sp, #88	@ 0x58
 8004cd4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004cd6:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8004cda:	2200      	movs	r2, #0
 8004cdc:	601a      	str	r2, [r3, #0]
 8004cde:	605a      	str	r2, [r3, #4]
 8004ce0:	609a      	str	r2, [r3, #8]
 8004ce2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004ce4:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8004ce8:	2200      	movs	r2, #0
 8004cea:	601a      	str	r2, [r3, #0]
 8004cec:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004cee:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004cf2:	2200      	movs	r2, #0
 8004cf4:	601a      	str	r2, [r3, #0]
 8004cf6:	605a      	str	r2, [r3, #4]
 8004cf8:	609a      	str	r2, [r3, #8]
 8004cfa:	60da      	str	r2, [r3, #12]
 8004cfc:	611a      	str	r2, [r3, #16]
 8004cfe:	615a      	str	r2, [r3, #20]
 8004d00:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8004d02:	1d3b      	adds	r3, r7, #4
 8004d04:	2220      	movs	r2, #32
 8004d06:	2100      	movs	r1, #0
 8004d08:	4618      	mov	r0, r3
 8004d0a:	f007 ff59 	bl	800cbc0 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8004d0e:	4b3f      	ldr	r3, [pc, #252]	@ (8004e0c <MX_TIM1_Init+0x13c>)
 8004d10:	4a3f      	ldr	r2, [pc, #252]	@ (8004e10 <MX_TIM1_Init+0x140>)
 8004d12:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 100-1;
 8004d14:	4b3d      	ldr	r3, [pc, #244]	@ (8004e0c <MX_TIM1_Init+0x13c>)
 8004d16:	2263      	movs	r2, #99	@ 0x63
 8004d18:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004d1a:	4b3c      	ldr	r3, [pc, #240]	@ (8004e0c <MX_TIM1_Init+0x13c>)
 8004d1c:	2200      	movs	r2, #0
 8004d1e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000-1;
 8004d20:	4b3a      	ldr	r3, [pc, #232]	@ (8004e0c <MX_TIM1_Init+0x13c>)
 8004d22:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8004d26:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004d28:	4b38      	ldr	r3, [pc, #224]	@ (8004e0c <MX_TIM1_Init+0x13c>)
 8004d2a:	2200      	movs	r2, #0
 8004d2c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8004d2e:	4b37      	ldr	r3, [pc, #220]	@ (8004e0c <MX_TIM1_Init+0x13c>)
 8004d30:	2200      	movs	r2, #0
 8004d32:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004d34:	4b35      	ldr	r3, [pc, #212]	@ (8004e0c <MX_TIM1_Init+0x13c>)
 8004d36:	2200      	movs	r2, #0
 8004d38:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8004d3a:	4834      	ldr	r0, [pc, #208]	@ (8004e0c <MX_TIM1_Init+0x13c>)
 8004d3c:	f003 ff8c 	bl	8008c58 <HAL_TIM_Base_Init>
 8004d40:	4603      	mov	r3, r0
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d001      	beq.n	8004d4a <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8004d46:	f7fd fe27 	bl	8002998 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004d4a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004d4e:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8004d50:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8004d54:	4619      	mov	r1, r3
 8004d56:	482d      	ldr	r0, [pc, #180]	@ (8004e0c <MX_TIM1_Init+0x13c>)
 8004d58:	f004 fbc0 	bl	80094dc <HAL_TIM_ConfigClockSource>
 8004d5c:	4603      	mov	r3, r0
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d001      	beq.n	8004d66 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8004d62:	f7fd fe19 	bl	8002998 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8004d66:	4829      	ldr	r0, [pc, #164]	@ (8004e0c <MX_TIM1_Init+0x13c>)
 8004d68:	f004 f857 	bl	8008e1a <HAL_TIM_PWM_Init>
 8004d6c:	4603      	mov	r3, r0
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d001      	beq.n	8004d76 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8004d72:	f7fd fe11 	bl	8002998 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004d76:	2300      	movs	r3, #0
 8004d78:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004d7a:	2300      	movs	r3, #0
 8004d7c:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8004d7e:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8004d82:	4619      	mov	r1, r3
 8004d84:	4821      	ldr	r0, [pc, #132]	@ (8004e0c <MX_TIM1_Init+0x13c>)
 8004d86:	f004 ff6b 	bl	8009c60 <HAL_TIMEx_MasterConfigSynchronization>
 8004d8a:	4603      	mov	r3, r0
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d001      	beq.n	8004d94 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8004d90:	f7fd fe02 	bl	8002998 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004d94:	2360      	movs	r3, #96	@ 0x60
 8004d96:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 500;
 8004d98:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8004d9c:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004d9e:	2300      	movs	r3, #0
 8004da0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8004da2:	2300      	movs	r3, #0
 8004da4:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004da6:	2300      	movs	r3, #0
 8004da8:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8004daa:	2300      	movs	r3, #0
 8004dac:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8004dae:	2300      	movs	r3, #0
 8004db0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004db2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004db6:	2200      	movs	r2, #0
 8004db8:	4619      	mov	r1, r3
 8004dba:	4814      	ldr	r0, [pc, #80]	@ (8004e0c <MX_TIM1_Init+0x13c>)
 8004dbc:	f004 facc 	bl	8009358 <HAL_TIM_PWM_ConfigChannel>
 8004dc0:	4603      	mov	r3, r0
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d001      	beq.n	8004dca <MX_TIM1_Init+0xfa>
  {
    Error_Handler();
 8004dc6:	f7fd fde7 	bl	8002998 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8004dca:	2300      	movs	r3, #0
 8004dcc:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8004dce:	2300      	movs	r3, #0
 8004dd0:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8004dd2:	2300      	movs	r3, #0
 8004dd4:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8004dd6:	2300      	movs	r3, #0
 8004dd8:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8004dda:	2300      	movs	r3, #0
 8004ddc:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8004dde:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8004de2:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8004de4:	2300      	movs	r3, #0
 8004de6:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8004de8:	1d3b      	adds	r3, r7, #4
 8004dea:	4619      	mov	r1, r3
 8004dec:	4807      	ldr	r0, [pc, #28]	@ (8004e0c <MX_TIM1_Init+0x13c>)
 8004dee:	f004 ffa5 	bl	8009d3c <HAL_TIMEx_ConfigBreakDeadTime>
 8004df2:	4603      	mov	r3, r0
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d001      	beq.n	8004dfc <MX_TIM1_Init+0x12c>
  {
    Error_Handler();
 8004df8:	f7fd fdce 	bl	8002998 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8004dfc:	4803      	ldr	r0, [pc, #12]	@ (8004e0c <MX_TIM1_Init+0x13c>)
 8004dfe:	f000 f9ff 	bl	8005200 <HAL_TIM_MspPostInit>

}
 8004e02:	bf00      	nop
 8004e04:	3758      	adds	r7, #88	@ 0x58
 8004e06:	46bd      	mov	sp, r7
 8004e08:	bd80      	pop	{r7, pc}
 8004e0a:	bf00      	nop
 8004e0c:	20013ec0 	.word	0x20013ec0
 8004e10:	40010000 	.word	0x40010000

08004e14 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8004e14:	b580      	push	{r7, lr}
 8004e16:	b086      	sub	sp, #24
 8004e18:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004e1a:	f107 0308 	add.w	r3, r7, #8
 8004e1e:	2200      	movs	r2, #0
 8004e20:	601a      	str	r2, [r3, #0]
 8004e22:	605a      	str	r2, [r3, #4]
 8004e24:	609a      	str	r2, [r3, #8]
 8004e26:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004e28:	463b      	mov	r3, r7
 8004e2a:	2200      	movs	r2, #0
 8004e2c:	601a      	str	r2, [r3, #0]
 8004e2e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8004e30:	4b1d      	ldr	r3, [pc, #116]	@ (8004ea8 <MX_TIM2_Init+0x94>)
 8004e32:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8004e36:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 100-1;
 8004e38:	4b1b      	ldr	r3, [pc, #108]	@ (8004ea8 <MX_TIM2_Init+0x94>)
 8004e3a:	2263      	movs	r2, #99	@ 0x63
 8004e3c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004e3e:	4b1a      	ldr	r3, [pc, #104]	@ (8004ea8 <MX_TIM2_Init+0x94>)
 8004e40:	2200      	movs	r2, #0
 8004e42:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 32-1;
 8004e44:	4b18      	ldr	r3, [pc, #96]	@ (8004ea8 <MX_TIM2_Init+0x94>)
 8004e46:	221f      	movs	r2, #31
 8004e48:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004e4a:	4b17      	ldr	r3, [pc, #92]	@ (8004ea8 <MX_TIM2_Init+0x94>)
 8004e4c:	2200      	movs	r2, #0
 8004e4e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004e50:	4b15      	ldr	r3, [pc, #84]	@ (8004ea8 <MX_TIM2_Init+0x94>)
 8004e52:	2200      	movs	r2, #0
 8004e54:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8004e56:	4814      	ldr	r0, [pc, #80]	@ (8004ea8 <MX_TIM2_Init+0x94>)
 8004e58:	f003 fefe 	bl	8008c58 <HAL_TIM_Base_Init>
 8004e5c:	4603      	mov	r3, r0
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d001      	beq.n	8004e66 <MX_TIM2_Init+0x52>
  {
    Error_Handler();
 8004e62:	f7fd fd99 	bl	8002998 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004e66:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004e6a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8004e6c:	f107 0308 	add.w	r3, r7, #8
 8004e70:	4619      	mov	r1, r3
 8004e72:	480d      	ldr	r0, [pc, #52]	@ (8004ea8 <MX_TIM2_Init+0x94>)
 8004e74:	f004 fb32 	bl	80094dc <HAL_TIM_ConfigClockSource>
 8004e78:	4603      	mov	r3, r0
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d001      	beq.n	8004e82 <MX_TIM2_Init+0x6e>
  {
    Error_Handler();
 8004e7e:	f7fd fd8b 	bl	8002998 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004e82:	2300      	movs	r3, #0
 8004e84:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004e86:	2300      	movs	r3, #0
 8004e88:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8004e8a:	463b      	mov	r3, r7
 8004e8c:	4619      	mov	r1, r3
 8004e8e:	4806      	ldr	r0, [pc, #24]	@ (8004ea8 <MX_TIM2_Init+0x94>)
 8004e90:	f004 fee6 	bl	8009c60 <HAL_TIMEx_MasterConfigSynchronization>
 8004e94:	4603      	mov	r3, r0
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d001      	beq.n	8004e9e <MX_TIM2_Init+0x8a>
  {
    Error_Handler();
 8004e9a:	f7fd fd7d 	bl	8002998 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8004e9e:	bf00      	nop
 8004ea0:	3718      	adds	r7, #24
 8004ea2:	46bd      	mov	sp, r7
 8004ea4:	bd80      	pop	{r7, pc}
 8004ea6:	bf00      	nop
 8004ea8:	20013f08 	.word	0x20013f08

08004eac <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8004eac:	b580      	push	{r7, lr}
 8004eae:	b08c      	sub	sp, #48	@ 0x30
 8004eb0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8004eb2:	f107 030c 	add.w	r3, r7, #12
 8004eb6:	2224      	movs	r2, #36	@ 0x24
 8004eb8:	2100      	movs	r1, #0
 8004eba:	4618      	mov	r0, r3
 8004ebc:	f007 fe80 	bl	800cbc0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004ec0:	1d3b      	adds	r3, r7, #4
 8004ec2:	2200      	movs	r2, #0
 8004ec4:	601a      	str	r2, [r3, #0]
 8004ec6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8004ec8:	4b20      	ldr	r3, [pc, #128]	@ (8004f4c <MX_TIM3_Init+0xa0>)
 8004eca:	4a21      	ldr	r2, [pc, #132]	@ (8004f50 <MX_TIM3_Init+0xa4>)
 8004ecc:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8004ece:	4b1f      	ldr	r3, [pc, #124]	@ (8004f4c <MX_TIM3_Init+0xa0>)
 8004ed0:	2200      	movs	r2, #0
 8004ed2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004ed4:	4b1d      	ldr	r3, [pc, #116]	@ (8004f4c <MX_TIM3_Init+0xa0>)
 8004ed6:	2200      	movs	r2, #0
 8004ed8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8004eda:	4b1c      	ldr	r3, [pc, #112]	@ (8004f4c <MX_TIM3_Init+0xa0>)
 8004edc:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004ee0:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004ee2:	4b1a      	ldr	r3, [pc, #104]	@ (8004f4c <MX_TIM3_Init+0xa0>)
 8004ee4:	2200      	movs	r2, #0
 8004ee6:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004ee8:	4b18      	ldr	r3, [pc, #96]	@ (8004f4c <MX_TIM3_Init+0xa0>)
 8004eea:	2200      	movs	r2, #0
 8004eec:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8004eee:	2301      	movs	r3, #1
 8004ef0:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8004ef2:	2300      	movs	r3, #0
 8004ef4:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8004ef6:	2301      	movs	r3, #1
 8004ef8:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8004efa:	2300      	movs	r3, #0
 8004efc:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8004efe:	2300      	movs	r3, #0
 8004f00:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8004f02:	2300      	movs	r3, #0
 8004f04:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8004f06:	2301      	movs	r3, #1
 8004f08:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8004f0a:	2300      	movs	r3, #0
 8004f0c:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8004f0e:	2300      	movs	r3, #0
 8004f10:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8004f12:	f107 030c 	add.w	r3, r7, #12
 8004f16:	4619      	mov	r1, r3
 8004f18:	480c      	ldr	r0, [pc, #48]	@ (8004f4c <MX_TIM3_Init+0xa0>)
 8004f1a:	f004 f887 	bl	800902c <HAL_TIM_Encoder_Init>
 8004f1e:	4603      	mov	r3, r0
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d001      	beq.n	8004f28 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8004f24:	f7fd fd38 	bl	8002998 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004f28:	2300      	movs	r3, #0
 8004f2a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004f2c:	2300      	movs	r3, #0
 8004f2e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8004f30:	1d3b      	adds	r3, r7, #4
 8004f32:	4619      	mov	r1, r3
 8004f34:	4805      	ldr	r0, [pc, #20]	@ (8004f4c <MX_TIM3_Init+0xa0>)
 8004f36:	f004 fe93 	bl	8009c60 <HAL_TIMEx_MasterConfigSynchronization>
 8004f3a:	4603      	mov	r3, r0
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d001      	beq.n	8004f44 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8004f40:	f7fd fd2a 	bl	8002998 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8004f44:	bf00      	nop
 8004f46:	3730      	adds	r7, #48	@ 0x30
 8004f48:	46bd      	mov	sp, r7
 8004f4a:	bd80      	pop	{r7, pc}
 8004f4c:	20013f50 	.word	0x20013f50
 8004f50:	40000400 	.word	0x40000400

08004f54 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8004f54:	b580      	push	{r7, lr}
 8004f56:	b08c      	sub	sp, #48	@ 0x30
 8004f58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8004f5a:	f107 030c 	add.w	r3, r7, #12
 8004f5e:	2224      	movs	r2, #36	@ 0x24
 8004f60:	2100      	movs	r1, #0
 8004f62:	4618      	mov	r0, r3
 8004f64:	f007 fe2c 	bl	800cbc0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004f68:	1d3b      	adds	r3, r7, #4
 8004f6a:	2200      	movs	r2, #0
 8004f6c:	601a      	str	r2, [r3, #0]
 8004f6e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8004f70:	4b20      	ldr	r3, [pc, #128]	@ (8004ff4 <MX_TIM4_Init+0xa0>)
 8004f72:	4a21      	ldr	r2, [pc, #132]	@ (8004ff8 <MX_TIM4_Init+0xa4>)
 8004f74:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8004f76:	4b1f      	ldr	r3, [pc, #124]	@ (8004ff4 <MX_TIM4_Init+0xa0>)
 8004f78:	2200      	movs	r2, #0
 8004f7a:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004f7c:	4b1d      	ldr	r3, [pc, #116]	@ (8004ff4 <MX_TIM4_Init+0xa0>)
 8004f7e:	2200      	movs	r2, #0
 8004f80:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8004f82:	4b1c      	ldr	r3, [pc, #112]	@ (8004ff4 <MX_TIM4_Init+0xa0>)
 8004f84:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004f88:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004f8a:	4b1a      	ldr	r3, [pc, #104]	@ (8004ff4 <MX_TIM4_Init+0xa0>)
 8004f8c:	2200      	movs	r2, #0
 8004f8e:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004f90:	4b18      	ldr	r3, [pc, #96]	@ (8004ff4 <MX_TIM4_Init+0xa0>)
 8004f92:	2200      	movs	r2, #0
 8004f94:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8004f96:	2301      	movs	r3, #1
 8004f98:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8004f9a:	2300      	movs	r3, #0
 8004f9c:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8004f9e:	2301      	movs	r3, #1
 8004fa0:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8004fa2:	2300      	movs	r3, #0
 8004fa4:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8004fa6:	2300      	movs	r3, #0
 8004fa8:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8004faa:	2300      	movs	r3, #0
 8004fac:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8004fae:	2301      	movs	r3, #1
 8004fb0:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8004fb2:	2300      	movs	r3, #0
 8004fb4:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8004fb6:	2300      	movs	r3, #0
 8004fb8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8004fba:	f107 030c 	add.w	r3, r7, #12
 8004fbe:	4619      	mov	r1, r3
 8004fc0:	480c      	ldr	r0, [pc, #48]	@ (8004ff4 <MX_TIM4_Init+0xa0>)
 8004fc2:	f004 f833 	bl	800902c <HAL_TIM_Encoder_Init>
 8004fc6:	4603      	mov	r3, r0
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d001      	beq.n	8004fd0 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 8004fcc:	f7fd fce4 	bl	8002998 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004fd0:	2300      	movs	r3, #0
 8004fd2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004fd4:	2300      	movs	r3, #0
 8004fd6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8004fd8:	1d3b      	adds	r3, r7, #4
 8004fda:	4619      	mov	r1, r3
 8004fdc:	4805      	ldr	r0, [pc, #20]	@ (8004ff4 <MX_TIM4_Init+0xa0>)
 8004fde:	f004 fe3f 	bl	8009c60 <HAL_TIMEx_MasterConfigSynchronization>
 8004fe2:	4603      	mov	r3, r0
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d001      	beq.n	8004fec <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 8004fe8:	f7fd fcd6 	bl	8002998 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8004fec:	bf00      	nop
 8004fee:	3730      	adds	r7, #48	@ 0x30
 8004ff0:	46bd      	mov	sp, r7
 8004ff2:	bd80      	pop	{r7, pc}
 8004ff4:	20013f98 	.word	0x20013f98
 8004ff8:	40000800 	.word	0x40000800

08004ffc <MX_TIM10_Init>:
/* TIM10 init function */
void MX_TIM10_Init(void)
{
 8004ffc:	b580      	push	{r7, lr}
 8004ffe:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8005000:	4b0e      	ldr	r3, [pc, #56]	@ (800503c <MX_TIM10_Init+0x40>)
 8005002:	4a0f      	ldr	r2, [pc, #60]	@ (8005040 <MX_TIM10_Init+0x44>)
 8005004:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 0;
 8005006:	4b0d      	ldr	r3, [pc, #52]	@ (800503c <MX_TIM10_Init+0x40>)
 8005008:	2200      	movs	r2, #0
 800500a:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 800500c:	4b0b      	ldr	r3, [pc, #44]	@ (800503c <MX_TIM10_Init+0x40>)
 800500e:	2200      	movs	r2, #0
 8005010:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 288-1;
 8005012:	4b0a      	ldr	r3, [pc, #40]	@ (800503c <MX_TIM10_Init+0x40>)
 8005014:	f240 121f 	movw	r2, #287	@ 0x11f
 8005018:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800501a:	4b08      	ldr	r3, [pc, #32]	@ (800503c <MX_TIM10_Init+0x40>)
 800501c:	2200      	movs	r2, #0
 800501e:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005020:	4b06      	ldr	r3, [pc, #24]	@ (800503c <MX_TIM10_Init+0x40>)
 8005022:	2200      	movs	r2, #0
 8005024:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8005026:	4805      	ldr	r0, [pc, #20]	@ (800503c <MX_TIM10_Init+0x40>)
 8005028:	f003 fe16 	bl	8008c58 <HAL_TIM_Base_Init>
 800502c:	4603      	mov	r3, r0
 800502e:	2b00      	cmp	r3, #0
 8005030:	d001      	beq.n	8005036 <MX_TIM10_Init+0x3a>
  {
    Error_Handler();
 8005032:	f7fd fcb1 	bl	8002998 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 8005036:	bf00      	nop
 8005038:	bd80      	pop	{r7, pc}
 800503a:	bf00      	nop
 800503c:	20013fe0 	.word	0x20013fe0
 8005040:	40014400 	.word	0x40014400

08005044 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8005044:	b580      	push	{r7, lr}
 8005046:	b086      	sub	sp, #24
 8005048:	af00      	add	r7, sp, #0
 800504a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	4a2a      	ldr	r2, [pc, #168]	@ (80050fc <HAL_TIM_Base_MspInit+0xb8>)
 8005052:	4293      	cmp	r3, r2
 8005054:	d116      	bne.n	8005084 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8005056:	2300      	movs	r3, #0
 8005058:	617b      	str	r3, [r7, #20]
 800505a:	4b29      	ldr	r3, [pc, #164]	@ (8005100 <HAL_TIM_Base_MspInit+0xbc>)
 800505c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800505e:	4a28      	ldr	r2, [pc, #160]	@ (8005100 <HAL_TIM_Base_MspInit+0xbc>)
 8005060:	f043 0301 	orr.w	r3, r3, #1
 8005064:	6453      	str	r3, [r2, #68]	@ 0x44
 8005066:	4b26      	ldr	r3, [pc, #152]	@ (8005100 <HAL_TIM_Base_MspInit+0xbc>)
 8005068:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800506a:	f003 0301 	and.w	r3, r3, #1
 800506e:	617b      	str	r3, [r7, #20]
 8005070:	697b      	ldr	r3, [r7, #20]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8005072:	2200      	movs	r2, #0
 8005074:	2100      	movs	r1, #0
 8005076:	2019      	movs	r0, #25
 8005078:	f000 ffc7 	bl	800600a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800507c:	2019      	movs	r0, #25
 800507e:	f000 ffe0 	bl	8006042 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }
}
 8005082:	e036      	b.n	80050f2 <HAL_TIM_Base_MspInit+0xae>
  else if(tim_baseHandle->Instance==TIM2)
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800508c:	d116      	bne.n	80050bc <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800508e:	2300      	movs	r3, #0
 8005090:	613b      	str	r3, [r7, #16]
 8005092:	4b1b      	ldr	r3, [pc, #108]	@ (8005100 <HAL_TIM_Base_MspInit+0xbc>)
 8005094:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005096:	4a1a      	ldr	r2, [pc, #104]	@ (8005100 <HAL_TIM_Base_MspInit+0xbc>)
 8005098:	f043 0301 	orr.w	r3, r3, #1
 800509c:	6413      	str	r3, [r2, #64]	@ 0x40
 800509e:	4b18      	ldr	r3, [pc, #96]	@ (8005100 <HAL_TIM_Base_MspInit+0xbc>)
 80050a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050a2:	f003 0301 	and.w	r3, r3, #1
 80050a6:	613b      	str	r3, [r7, #16]
 80050a8:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80050aa:	2200      	movs	r2, #0
 80050ac:	2100      	movs	r1, #0
 80050ae:	201c      	movs	r0, #28
 80050b0:	f000 ffab 	bl	800600a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80050b4:	201c      	movs	r0, #28
 80050b6:	f000 ffc4 	bl	8006042 <HAL_NVIC_EnableIRQ>
}
 80050ba:	e01a      	b.n	80050f2 <HAL_TIM_Base_MspInit+0xae>
  else if(tim_baseHandle->Instance==TIM10)
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	4a10      	ldr	r2, [pc, #64]	@ (8005104 <HAL_TIM_Base_MspInit+0xc0>)
 80050c2:	4293      	cmp	r3, r2
 80050c4:	d115      	bne.n	80050f2 <HAL_TIM_Base_MspInit+0xae>
    __HAL_RCC_TIM10_CLK_ENABLE();
 80050c6:	2300      	movs	r3, #0
 80050c8:	60fb      	str	r3, [r7, #12]
 80050ca:	4b0d      	ldr	r3, [pc, #52]	@ (8005100 <HAL_TIM_Base_MspInit+0xbc>)
 80050cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80050ce:	4a0c      	ldr	r2, [pc, #48]	@ (8005100 <HAL_TIM_Base_MspInit+0xbc>)
 80050d0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80050d4:	6453      	str	r3, [r2, #68]	@ 0x44
 80050d6:	4b0a      	ldr	r3, [pc, #40]	@ (8005100 <HAL_TIM_Base_MspInit+0xbc>)
 80050d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80050da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80050de:	60fb      	str	r3, [r7, #12]
 80050e0:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 80050e2:	2200      	movs	r2, #0
 80050e4:	2100      	movs	r1, #0
 80050e6:	2019      	movs	r0, #25
 80050e8:	f000 ff8f 	bl	800600a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80050ec:	2019      	movs	r0, #25
 80050ee:	f000 ffa8 	bl	8006042 <HAL_NVIC_EnableIRQ>
}
 80050f2:	bf00      	nop
 80050f4:	3718      	adds	r7, #24
 80050f6:	46bd      	mov	sp, r7
 80050f8:	bd80      	pop	{r7, pc}
 80050fa:	bf00      	nop
 80050fc:	40010000 	.word	0x40010000
 8005100:	40023800 	.word	0x40023800
 8005104:	40014400 	.word	0x40014400

08005108 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8005108:	b580      	push	{r7, lr}
 800510a:	b08c      	sub	sp, #48	@ 0x30
 800510c:	af00      	add	r7, sp, #0
 800510e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005110:	f107 031c 	add.w	r3, r7, #28
 8005114:	2200      	movs	r2, #0
 8005116:	601a      	str	r2, [r3, #0]
 8005118:	605a      	str	r2, [r3, #4]
 800511a:	609a      	str	r2, [r3, #8]
 800511c:	60da      	str	r2, [r3, #12]
 800511e:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM3)
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	4a32      	ldr	r2, [pc, #200]	@ (80051f0 <HAL_TIM_Encoder_MspInit+0xe8>)
 8005126:	4293      	cmp	r3, r2
 8005128:	d12c      	bne.n	8005184 <HAL_TIM_Encoder_MspInit+0x7c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800512a:	2300      	movs	r3, #0
 800512c:	61bb      	str	r3, [r7, #24]
 800512e:	4b31      	ldr	r3, [pc, #196]	@ (80051f4 <HAL_TIM_Encoder_MspInit+0xec>)
 8005130:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005132:	4a30      	ldr	r2, [pc, #192]	@ (80051f4 <HAL_TIM_Encoder_MspInit+0xec>)
 8005134:	f043 0302 	orr.w	r3, r3, #2
 8005138:	6413      	str	r3, [r2, #64]	@ 0x40
 800513a:	4b2e      	ldr	r3, [pc, #184]	@ (80051f4 <HAL_TIM_Encoder_MspInit+0xec>)
 800513c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800513e:	f003 0302 	and.w	r3, r3, #2
 8005142:	61bb      	str	r3, [r7, #24]
 8005144:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005146:	2300      	movs	r3, #0
 8005148:	617b      	str	r3, [r7, #20]
 800514a:	4b2a      	ldr	r3, [pc, #168]	@ (80051f4 <HAL_TIM_Encoder_MspInit+0xec>)
 800514c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800514e:	4a29      	ldr	r2, [pc, #164]	@ (80051f4 <HAL_TIM_Encoder_MspInit+0xec>)
 8005150:	f043 0302 	orr.w	r3, r3, #2
 8005154:	6313      	str	r3, [r2, #48]	@ 0x30
 8005156:	4b27      	ldr	r3, [pc, #156]	@ (80051f4 <HAL_TIM_Encoder_MspInit+0xec>)
 8005158:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800515a:	f003 0302 	and.w	r3, r3, #2
 800515e:	617b      	str	r3, [r7, #20]
 8005160:	697b      	ldr	r3, [r7, #20]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = ENCODER1_INB_Pin|ENCODER1_INA_Pin;
 8005162:	2330      	movs	r3, #48	@ 0x30
 8005164:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005166:	2302      	movs	r3, #2
 8005168:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800516a:	2300      	movs	r3, #0
 800516c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800516e:	2300      	movs	r3, #0
 8005170:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8005172:	2302      	movs	r3, #2
 8005174:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005176:	f107 031c 	add.w	r3, r7, #28
 800517a:	4619      	mov	r1, r3
 800517c:	481e      	ldr	r0, [pc, #120]	@ (80051f8 <HAL_TIM_Encoder_MspInit+0xf0>)
 800517e:	f001 fb99 	bl	80068b4 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8005182:	e030      	b.n	80051e6 <HAL_TIM_Encoder_MspInit+0xde>
  else if(tim_encoderHandle->Instance==TIM4)
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	4a1c      	ldr	r2, [pc, #112]	@ (80051fc <HAL_TIM_Encoder_MspInit+0xf4>)
 800518a:	4293      	cmp	r3, r2
 800518c:	d12b      	bne.n	80051e6 <HAL_TIM_Encoder_MspInit+0xde>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800518e:	2300      	movs	r3, #0
 8005190:	613b      	str	r3, [r7, #16]
 8005192:	4b18      	ldr	r3, [pc, #96]	@ (80051f4 <HAL_TIM_Encoder_MspInit+0xec>)
 8005194:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005196:	4a17      	ldr	r2, [pc, #92]	@ (80051f4 <HAL_TIM_Encoder_MspInit+0xec>)
 8005198:	f043 0304 	orr.w	r3, r3, #4
 800519c:	6413      	str	r3, [r2, #64]	@ 0x40
 800519e:	4b15      	ldr	r3, [pc, #84]	@ (80051f4 <HAL_TIM_Encoder_MspInit+0xec>)
 80051a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051a2:	f003 0304 	and.w	r3, r3, #4
 80051a6:	613b      	str	r3, [r7, #16]
 80051a8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80051aa:	2300      	movs	r3, #0
 80051ac:	60fb      	str	r3, [r7, #12]
 80051ae:	4b11      	ldr	r3, [pc, #68]	@ (80051f4 <HAL_TIM_Encoder_MspInit+0xec>)
 80051b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80051b2:	4a10      	ldr	r2, [pc, #64]	@ (80051f4 <HAL_TIM_Encoder_MspInit+0xec>)
 80051b4:	f043 0302 	orr.w	r3, r3, #2
 80051b8:	6313      	str	r3, [r2, #48]	@ 0x30
 80051ba:	4b0e      	ldr	r3, [pc, #56]	@ (80051f4 <HAL_TIM_Encoder_MspInit+0xec>)
 80051bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80051be:	f003 0302 	and.w	r3, r3, #2
 80051c2:	60fb      	str	r3, [r7, #12]
 80051c4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ENCODER0_INB_Pin|ENCODER0_INA_Pin;
 80051c6:	23c0      	movs	r3, #192	@ 0xc0
 80051c8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80051ca:	2302      	movs	r3, #2
 80051cc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80051ce:	2300      	movs	r3, #0
 80051d0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80051d2:	2300      	movs	r3, #0
 80051d4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80051d6:	2302      	movs	r3, #2
 80051d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80051da:	f107 031c 	add.w	r3, r7, #28
 80051de:	4619      	mov	r1, r3
 80051e0:	4805      	ldr	r0, [pc, #20]	@ (80051f8 <HAL_TIM_Encoder_MspInit+0xf0>)
 80051e2:	f001 fb67 	bl	80068b4 <HAL_GPIO_Init>
}
 80051e6:	bf00      	nop
 80051e8:	3730      	adds	r7, #48	@ 0x30
 80051ea:	46bd      	mov	sp, r7
 80051ec:	bd80      	pop	{r7, pc}
 80051ee:	bf00      	nop
 80051f0:	40000400 	.word	0x40000400
 80051f4:	40023800 	.word	0x40023800
 80051f8:	40020400 	.word	0x40020400
 80051fc:	40000800 	.word	0x40000800

08005200 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8005200:	b580      	push	{r7, lr}
 8005202:	b088      	sub	sp, #32
 8005204:	af00      	add	r7, sp, #0
 8005206:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005208:	f107 030c 	add.w	r3, r7, #12
 800520c:	2200      	movs	r2, #0
 800520e:	601a      	str	r2, [r3, #0]
 8005210:	605a      	str	r2, [r3, #4]
 8005212:	609a      	str	r2, [r3, #8]
 8005214:	60da      	str	r2, [r3, #12]
 8005216:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	4a12      	ldr	r2, [pc, #72]	@ (8005268 <HAL_TIM_MspPostInit+0x68>)
 800521e:	4293      	cmp	r3, r2
 8005220:	d11e      	bne.n	8005260 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005222:	2300      	movs	r3, #0
 8005224:	60bb      	str	r3, [r7, #8]
 8005226:	4b11      	ldr	r3, [pc, #68]	@ (800526c <HAL_TIM_MspPostInit+0x6c>)
 8005228:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800522a:	4a10      	ldr	r2, [pc, #64]	@ (800526c <HAL_TIM_MspPostInit+0x6c>)
 800522c:	f043 0301 	orr.w	r3, r3, #1
 8005230:	6313      	str	r3, [r2, #48]	@ 0x30
 8005232:	4b0e      	ldr	r3, [pc, #56]	@ (800526c <HAL_TIM_MspPostInit+0x6c>)
 8005234:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005236:	f003 0301 	and.w	r3, r3, #1
 800523a:	60bb      	str	r3, [r7, #8]
 800523c:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800523e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8005242:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005244:	2302      	movs	r3, #2
 8005246:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005248:	2300      	movs	r3, #0
 800524a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800524c:	2300      	movs	r3, #0
 800524e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8005250:	2301      	movs	r3, #1
 8005252:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005254:	f107 030c 	add.w	r3, r7, #12
 8005258:	4619      	mov	r1, r3
 800525a:	4805      	ldr	r0, [pc, #20]	@ (8005270 <HAL_TIM_MspPostInit+0x70>)
 800525c:	f001 fb2a 	bl	80068b4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8005260:	bf00      	nop
 8005262:	3720      	adds	r7, #32
 8005264:	46bd      	mov	sp, r7
 8005266:	bd80      	pop	{r7, pc}
 8005268:	40010000 	.word	0x40010000
 800526c:	40023800 	.word	0x40023800
 8005270:	40020000 	.word	0x40020000

08005274 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart6;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8005274:	b580      	push	{r7, lr}
 8005276:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8005278:	4b11      	ldr	r3, [pc, #68]	@ (80052c0 <MX_USART2_UART_Init+0x4c>)
 800527a:	4a12      	ldr	r2, [pc, #72]	@ (80052c4 <MX_USART2_UART_Init+0x50>)
 800527c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800527e:	4b10      	ldr	r3, [pc, #64]	@ (80052c0 <MX_USART2_UART_Init+0x4c>)
 8005280:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8005284:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8005286:	4b0e      	ldr	r3, [pc, #56]	@ (80052c0 <MX_USART2_UART_Init+0x4c>)
 8005288:	2200      	movs	r2, #0
 800528a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800528c:	4b0c      	ldr	r3, [pc, #48]	@ (80052c0 <MX_USART2_UART_Init+0x4c>)
 800528e:	2200      	movs	r2, #0
 8005290:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8005292:	4b0b      	ldr	r3, [pc, #44]	@ (80052c0 <MX_USART2_UART_Init+0x4c>)
 8005294:	2200      	movs	r2, #0
 8005296:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8005298:	4b09      	ldr	r3, [pc, #36]	@ (80052c0 <MX_USART2_UART_Init+0x4c>)
 800529a:	220c      	movs	r2, #12
 800529c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800529e:	4b08      	ldr	r3, [pc, #32]	@ (80052c0 <MX_USART2_UART_Init+0x4c>)
 80052a0:	2200      	movs	r2, #0
 80052a2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80052a4:	4b06      	ldr	r3, [pc, #24]	@ (80052c0 <MX_USART2_UART_Init+0x4c>)
 80052a6:	2200      	movs	r2, #0
 80052a8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80052aa:	4805      	ldr	r0, [pc, #20]	@ (80052c0 <MX_USART2_UART_Init+0x4c>)
 80052ac:	f004 fdac 	bl	8009e08 <HAL_UART_Init>
 80052b0:	4603      	mov	r3, r0
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d001      	beq.n	80052ba <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80052b6:	f7fd fb6f 	bl	8002998 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80052ba:	bf00      	nop
 80052bc:	bd80      	pop	{r7, pc}
 80052be:	bf00      	nop
 80052c0:	20014028 	.word	0x20014028
 80052c4:	40004400 	.word	0x40004400

080052c8 <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 80052c8:	b580      	push	{r7, lr}
 80052ca:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 80052cc:	4b11      	ldr	r3, [pc, #68]	@ (8005314 <MX_USART6_UART_Init+0x4c>)
 80052ce:	4a12      	ldr	r2, [pc, #72]	@ (8005318 <MX_USART6_UART_Init+0x50>)
 80052d0:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 80052d2:	4b10      	ldr	r3, [pc, #64]	@ (8005314 <MX_USART6_UART_Init+0x4c>)
 80052d4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80052d8:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80052da:	4b0e      	ldr	r3, [pc, #56]	@ (8005314 <MX_USART6_UART_Init+0x4c>)
 80052dc:	2200      	movs	r2, #0
 80052de:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 80052e0:	4b0c      	ldr	r3, [pc, #48]	@ (8005314 <MX_USART6_UART_Init+0x4c>)
 80052e2:	2200      	movs	r2, #0
 80052e4:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 80052e6:	4b0b      	ldr	r3, [pc, #44]	@ (8005314 <MX_USART6_UART_Init+0x4c>)
 80052e8:	2200      	movs	r2, #0
 80052ea:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 80052ec:	4b09      	ldr	r3, [pc, #36]	@ (8005314 <MX_USART6_UART_Init+0x4c>)
 80052ee:	220c      	movs	r2, #12
 80052f0:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80052f2:	4b08      	ldr	r3, [pc, #32]	@ (8005314 <MX_USART6_UART_Init+0x4c>)
 80052f4:	2200      	movs	r2, #0
 80052f6:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80052f8:	4b06      	ldr	r3, [pc, #24]	@ (8005314 <MX_USART6_UART_Init+0x4c>)
 80052fa:	2200      	movs	r2, #0
 80052fc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80052fe:	4805      	ldr	r0, [pc, #20]	@ (8005314 <MX_USART6_UART_Init+0x4c>)
 8005300:	f004 fd82 	bl	8009e08 <HAL_UART_Init>
 8005304:	4603      	mov	r3, r0
 8005306:	2b00      	cmp	r3, #0
 8005308:	d001      	beq.n	800530e <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 800530a:	f7fd fb45 	bl	8002998 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 800530e:	bf00      	nop
 8005310:	bd80      	pop	{r7, pc}
 8005312:	bf00      	nop
 8005314:	20014070 	.word	0x20014070
 8005318:	40011400 	.word	0x40011400

0800531c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800531c:	b580      	push	{r7, lr}
 800531e:	b08c      	sub	sp, #48	@ 0x30
 8005320:	af00      	add	r7, sp, #0
 8005322:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005324:	f107 031c 	add.w	r3, r7, #28
 8005328:	2200      	movs	r2, #0
 800532a:	601a      	str	r2, [r3, #0]
 800532c:	605a      	str	r2, [r3, #4]
 800532e:	609a      	str	r2, [r3, #8]
 8005330:	60da      	str	r2, [r3, #12]
 8005332:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	4a36      	ldr	r2, [pc, #216]	@ (8005414 <HAL_UART_MspInit+0xf8>)
 800533a:	4293      	cmp	r3, r2
 800533c:	d12c      	bne.n	8005398 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800533e:	2300      	movs	r3, #0
 8005340:	61bb      	str	r3, [r7, #24]
 8005342:	4b35      	ldr	r3, [pc, #212]	@ (8005418 <HAL_UART_MspInit+0xfc>)
 8005344:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005346:	4a34      	ldr	r2, [pc, #208]	@ (8005418 <HAL_UART_MspInit+0xfc>)
 8005348:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800534c:	6413      	str	r3, [r2, #64]	@ 0x40
 800534e:	4b32      	ldr	r3, [pc, #200]	@ (8005418 <HAL_UART_MspInit+0xfc>)
 8005350:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005352:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005356:	61bb      	str	r3, [r7, #24]
 8005358:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800535a:	2300      	movs	r3, #0
 800535c:	617b      	str	r3, [r7, #20]
 800535e:	4b2e      	ldr	r3, [pc, #184]	@ (8005418 <HAL_UART_MspInit+0xfc>)
 8005360:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005362:	4a2d      	ldr	r2, [pc, #180]	@ (8005418 <HAL_UART_MspInit+0xfc>)
 8005364:	f043 0301 	orr.w	r3, r3, #1
 8005368:	6313      	str	r3, [r2, #48]	@ 0x30
 800536a:	4b2b      	ldr	r3, [pc, #172]	@ (8005418 <HAL_UART_MspInit+0xfc>)
 800536c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800536e:	f003 0301 	and.w	r3, r3, #1
 8005372:	617b      	str	r3, [r7, #20]
 8005374:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8005376:	230c      	movs	r3, #12
 8005378:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800537a:	2302      	movs	r3, #2
 800537c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800537e:	2300      	movs	r3, #0
 8005380:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005382:	2303      	movs	r3, #3
 8005384:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8005386:	2307      	movs	r3, #7
 8005388:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800538a:	f107 031c 	add.w	r3, r7, #28
 800538e:	4619      	mov	r1, r3
 8005390:	4822      	ldr	r0, [pc, #136]	@ (800541c <HAL_UART_MspInit+0x100>)
 8005392:	f001 fa8f 	bl	80068b4 <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 8005396:	e038      	b.n	800540a <HAL_UART_MspInit+0xee>
  else if(uartHandle->Instance==USART6)
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	4a20      	ldr	r2, [pc, #128]	@ (8005420 <HAL_UART_MspInit+0x104>)
 800539e:	4293      	cmp	r3, r2
 80053a0:	d133      	bne.n	800540a <HAL_UART_MspInit+0xee>
    __HAL_RCC_USART6_CLK_ENABLE();
 80053a2:	2300      	movs	r3, #0
 80053a4:	613b      	str	r3, [r7, #16]
 80053a6:	4b1c      	ldr	r3, [pc, #112]	@ (8005418 <HAL_UART_MspInit+0xfc>)
 80053a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80053aa:	4a1b      	ldr	r2, [pc, #108]	@ (8005418 <HAL_UART_MspInit+0xfc>)
 80053ac:	f043 0320 	orr.w	r3, r3, #32
 80053b0:	6453      	str	r3, [r2, #68]	@ 0x44
 80053b2:	4b19      	ldr	r3, [pc, #100]	@ (8005418 <HAL_UART_MspInit+0xfc>)
 80053b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80053b6:	f003 0320 	and.w	r3, r3, #32
 80053ba:	613b      	str	r3, [r7, #16]
 80053bc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80053be:	2300      	movs	r3, #0
 80053c0:	60fb      	str	r3, [r7, #12]
 80053c2:	4b15      	ldr	r3, [pc, #84]	@ (8005418 <HAL_UART_MspInit+0xfc>)
 80053c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80053c6:	4a14      	ldr	r2, [pc, #80]	@ (8005418 <HAL_UART_MspInit+0xfc>)
 80053c8:	f043 0304 	orr.w	r3, r3, #4
 80053cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80053ce:	4b12      	ldr	r3, [pc, #72]	@ (8005418 <HAL_UART_MspInit+0xfc>)
 80053d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80053d2:	f003 0304 	and.w	r3, r3, #4
 80053d6:	60fb      	str	r3, [r7, #12]
 80053d8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80053da:	23c0      	movs	r3, #192	@ 0xc0
 80053dc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80053de:	2302      	movs	r3, #2
 80053e0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80053e2:	2300      	movs	r3, #0
 80053e4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80053e6:	2303      	movs	r3, #3
 80053e8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80053ea:	2308      	movs	r3, #8
 80053ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80053ee:	f107 031c 	add.w	r3, r7, #28
 80053f2:	4619      	mov	r1, r3
 80053f4:	480b      	ldr	r0, [pc, #44]	@ (8005424 <HAL_UART_MspInit+0x108>)
 80053f6:	f001 fa5d 	bl	80068b4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 80053fa:	2200      	movs	r2, #0
 80053fc:	2100      	movs	r1, #0
 80053fe:	2047      	movs	r0, #71	@ 0x47
 8005400:	f000 fe03 	bl	800600a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8005404:	2047      	movs	r0, #71	@ 0x47
 8005406:	f000 fe1c 	bl	8006042 <HAL_NVIC_EnableIRQ>
}
 800540a:	bf00      	nop
 800540c:	3730      	adds	r7, #48	@ 0x30
 800540e:	46bd      	mov	sp, r7
 8005410:	bd80      	pop	{r7, pc}
 8005412:	bf00      	nop
 8005414:	40004400 	.word	0x40004400
 8005418:	40023800 	.word	0x40023800
 800541c:	40020000 	.word	0x40020000
 8005420:	40011400 	.word	0x40011400
 8005424:	40020800 	.word	0x40020800

08005428 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8005428:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8005460 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800542c:	f7ff fc3e 	bl	8004cac <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8005430:	480c      	ldr	r0, [pc, #48]	@ (8005464 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8005432:	490d      	ldr	r1, [pc, #52]	@ (8005468 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8005434:	4a0d      	ldr	r2, [pc, #52]	@ (800546c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8005436:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005438:	e002      	b.n	8005440 <LoopCopyDataInit>

0800543a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800543a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800543c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800543e:	3304      	adds	r3, #4

08005440 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005440:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005442:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005444:	d3f9      	bcc.n	800543a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8005446:	4a0a      	ldr	r2, [pc, #40]	@ (8005470 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8005448:	4c0a      	ldr	r4, [pc, #40]	@ (8005474 <LoopFillZerobss+0x22>)
  movs r3, #0
 800544a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800544c:	e001      	b.n	8005452 <LoopFillZerobss>

0800544e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800544e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005450:	3204      	adds	r2, #4

08005452 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8005452:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005454:	d3fb      	bcc.n	800544e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8005456:	f007 fc0b 	bl	800cc70 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800545a:	f7fd f989 	bl	8002770 <main>
  bx  lr    
 800545e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8005460:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8005464:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005468:	2000d2fc 	.word	0x2000d2fc
  ldr r2, =_sidata
 800546c:	08011f1c 	.word	0x08011f1c
  ldr r2, =_sbss
 8005470:	2000d2fc 	.word	0x2000d2fc
  ldr r4, =_ebss
 8005474:	20014224 	.word	0x20014224

08005478 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8005478:	e7fe      	b.n	8005478 <ADC_IRQHandler>
	...

0800547c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800547c:	b580      	push	{r7, lr}
 800547e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8005480:	4b0e      	ldr	r3, [pc, #56]	@ (80054bc <HAL_Init+0x40>)
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	4a0d      	ldr	r2, [pc, #52]	@ (80054bc <HAL_Init+0x40>)
 8005486:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800548a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800548c:	4b0b      	ldr	r3, [pc, #44]	@ (80054bc <HAL_Init+0x40>)
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	4a0a      	ldr	r2, [pc, #40]	@ (80054bc <HAL_Init+0x40>)
 8005492:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8005496:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005498:	4b08      	ldr	r3, [pc, #32]	@ (80054bc <HAL_Init+0x40>)
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	4a07      	ldr	r2, [pc, #28]	@ (80054bc <HAL_Init+0x40>)
 800549e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80054a2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80054a4:	2003      	movs	r0, #3
 80054a6:	f000 fda5 	bl	8005ff4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80054aa:	2000      	movs	r0, #0
 80054ac:	f000 f808 	bl	80054c0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80054b0:	f7ff fb30 	bl	8004b14 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80054b4:	2300      	movs	r3, #0
}
 80054b6:	4618      	mov	r0, r3
 80054b8:	bd80      	pop	{r7, pc}
 80054ba:	bf00      	nop
 80054bc:	40023c00 	.word	0x40023c00

080054c0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80054c0:	b580      	push	{r7, lr}
 80054c2:	b082      	sub	sp, #8
 80054c4:	af00      	add	r7, sp, #0
 80054c6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80054c8:	4b12      	ldr	r3, [pc, #72]	@ (8005514 <HAL_InitTick+0x54>)
 80054ca:	681a      	ldr	r2, [r3, #0]
 80054cc:	4b12      	ldr	r3, [pc, #72]	@ (8005518 <HAL_InitTick+0x58>)
 80054ce:	781b      	ldrb	r3, [r3, #0]
 80054d0:	4619      	mov	r1, r3
 80054d2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80054d6:	fbb3 f3f1 	udiv	r3, r3, r1
 80054da:	fbb2 f3f3 	udiv	r3, r2, r3
 80054de:	4618      	mov	r0, r3
 80054e0:	f000 fdbd 	bl	800605e <HAL_SYSTICK_Config>
 80054e4:	4603      	mov	r3, r0
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d001      	beq.n	80054ee <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80054ea:	2301      	movs	r3, #1
 80054ec:	e00e      	b.n	800550c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	2b0f      	cmp	r3, #15
 80054f2:	d80a      	bhi.n	800550a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80054f4:	2200      	movs	r2, #0
 80054f6:	6879      	ldr	r1, [r7, #4]
 80054f8:	f04f 30ff 	mov.w	r0, #4294967295
 80054fc:	f000 fd85 	bl	800600a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8005500:	4a06      	ldr	r2, [pc, #24]	@ (800551c <HAL_InitTick+0x5c>)
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8005506:	2300      	movs	r3, #0
 8005508:	e000      	b.n	800550c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800550a:	2301      	movs	r3, #1
}
 800550c:	4618      	mov	r0, r3
 800550e:	3708      	adds	r7, #8
 8005510:	46bd      	mov	sp, r7
 8005512:	bd80      	pop	{r7, pc}
 8005514:	2000d114 	.word	0x2000d114
 8005518:	2000d11c 	.word	0x2000d11c
 800551c:	2000d118 	.word	0x2000d118

08005520 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005520:	b480      	push	{r7}
 8005522:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005524:	4b06      	ldr	r3, [pc, #24]	@ (8005540 <HAL_IncTick+0x20>)
 8005526:	781b      	ldrb	r3, [r3, #0]
 8005528:	461a      	mov	r2, r3
 800552a:	4b06      	ldr	r3, [pc, #24]	@ (8005544 <HAL_IncTick+0x24>)
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	4413      	add	r3, r2
 8005530:	4a04      	ldr	r2, [pc, #16]	@ (8005544 <HAL_IncTick+0x24>)
 8005532:	6013      	str	r3, [r2, #0]
}
 8005534:	bf00      	nop
 8005536:	46bd      	mov	sp, r7
 8005538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800553c:	4770      	bx	lr
 800553e:	bf00      	nop
 8005540:	2000d11c 	.word	0x2000d11c
 8005544:	200140b8 	.word	0x200140b8

08005548 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005548:	b480      	push	{r7}
 800554a:	af00      	add	r7, sp, #0
  return uwTick;
 800554c:	4b03      	ldr	r3, [pc, #12]	@ (800555c <HAL_GetTick+0x14>)
 800554e:	681b      	ldr	r3, [r3, #0]
}
 8005550:	4618      	mov	r0, r3
 8005552:	46bd      	mov	sp, r7
 8005554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005558:	4770      	bx	lr
 800555a:	bf00      	nop
 800555c:	200140b8 	.word	0x200140b8

08005560 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005560:	b580      	push	{r7, lr}
 8005562:	b084      	sub	sp, #16
 8005564:	af00      	add	r7, sp, #0
 8005566:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005568:	f7ff ffee 	bl	8005548 <HAL_GetTick>
 800556c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005578:	d005      	beq.n	8005586 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800557a:	4b0a      	ldr	r3, [pc, #40]	@ (80055a4 <HAL_Delay+0x44>)
 800557c:	781b      	ldrb	r3, [r3, #0]
 800557e:	461a      	mov	r2, r3
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	4413      	add	r3, r2
 8005584:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8005586:	bf00      	nop
 8005588:	f7ff ffde 	bl	8005548 <HAL_GetTick>
 800558c:	4602      	mov	r2, r0
 800558e:	68bb      	ldr	r3, [r7, #8]
 8005590:	1ad3      	subs	r3, r2, r3
 8005592:	68fa      	ldr	r2, [r7, #12]
 8005594:	429a      	cmp	r2, r3
 8005596:	d8f7      	bhi.n	8005588 <HAL_Delay+0x28>
  {
  }
}
 8005598:	bf00      	nop
 800559a:	bf00      	nop
 800559c:	3710      	adds	r7, #16
 800559e:	46bd      	mov	sp, r7
 80055a0:	bd80      	pop	{r7, pc}
 80055a2:	bf00      	nop
 80055a4:	2000d11c 	.word	0x2000d11c

080055a8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80055a8:	b580      	push	{r7, lr}
 80055aa:	b084      	sub	sp, #16
 80055ac:	af00      	add	r7, sp, #0
 80055ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80055b0:	2300      	movs	r3, #0
 80055b2:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d101      	bne.n	80055be <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80055ba:	2301      	movs	r3, #1
 80055bc:	e033      	b.n	8005626 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d109      	bne.n	80055da <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80055c6:	6878      	ldr	r0, [r7, #4]
 80055c8:	f7fb fe44 	bl	8001254 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	2200      	movs	r2, #0
 80055d0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	2200      	movs	r2, #0
 80055d6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055de:	f003 0310 	and.w	r3, r3, #16
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d118      	bne.n	8005618 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055ea:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80055ee:	f023 0302 	bic.w	r3, r3, #2
 80055f2:	f043 0202 	orr.w	r2, r3, #2
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 80055fa:	6878      	ldr	r0, [r7, #4]
 80055fc:	f000 faac 	bl	8005b58 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	2200      	movs	r2, #0
 8005604:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800560a:	f023 0303 	bic.w	r3, r3, #3
 800560e:	f043 0201 	orr.w	r2, r3, #1
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	641a      	str	r2, [r3, #64]	@ 0x40
 8005616:	e001      	b.n	800561c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8005618:	2301      	movs	r3, #1
 800561a:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	2200      	movs	r2, #0
 8005620:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8005624:	7bfb      	ldrb	r3, [r7, #15]
}
 8005626:	4618      	mov	r0, r3
 8005628:	3710      	adds	r7, #16
 800562a:	46bd      	mov	sp, r7
 800562c:	bd80      	pop	{r7, pc}
	...

08005630 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8005630:	b580      	push	{r7, lr}
 8005632:	b088      	sub	sp, #32
 8005634:	af00      	add	r7, sp, #0
 8005636:	60f8      	str	r0, [r7, #12]
 8005638:	60b9      	str	r1, [r7, #8]
 800563a:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 800563c:	2300      	movs	r3, #0
 800563e:	617b      	str	r3, [r7, #20]
  ADC_Common_TypeDef *tmpADC_Common;
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005640:	2300      	movs	r3, #0
 8005642:	77fb      	strb	r3, [r7, #31]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800564a:	2b01      	cmp	r3, #1
 800564c:	d101      	bne.n	8005652 <HAL_ADC_Start_DMA+0x22>
 800564e:	2302      	movs	r3, #2
 8005650:	e0d0      	b.n	80057f4 <HAL_ADC_Start_DMA+0x1c4>
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	2201      	movs	r2, #1
 8005656:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	689b      	ldr	r3, [r3, #8]
 8005660:	f003 0301 	and.w	r3, r3, #1
 8005664:	2b01      	cmp	r3, #1
 8005666:	d018      	beq.n	800569a <HAL_ADC_Start_DMA+0x6a>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	689a      	ldr	r2, [r3, #8]
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	f042 0201 	orr.w	r2, r2, #1
 8005676:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8005678:	4b60      	ldr	r3, [pc, #384]	@ (80057fc <HAL_ADC_Start_DMA+0x1cc>)
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	4a60      	ldr	r2, [pc, #384]	@ (8005800 <HAL_ADC_Start_DMA+0x1d0>)
 800567e:	fba2 2303 	umull	r2, r3, r2, r3
 8005682:	0c9a      	lsrs	r2, r3, #18
 8005684:	4613      	mov	r3, r2
 8005686:	005b      	lsls	r3, r3, #1
 8005688:	4413      	add	r3, r2
 800568a:	617b      	str	r3, [r7, #20]
    while (counter != 0U)
 800568c:	e002      	b.n	8005694 <HAL_ADC_Start_DMA+0x64>
    {
      counter--;
 800568e:	697b      	ldr	r3, [r7, #20]
 8005690:	3b01      	subs	r3, #1
 8005692:	617b      	str	r3, [r7, #20]
    while (counter != 0U)
 8005694:	697b      	ldr	r3, [r7, #20]
 8005696:	2b00      	cmp	r3, #0
 8005698:	d1f9      	bne.n	800568e <HAL_ADC_Start_DMA+0x5e>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	689b      	ldr	r3, [r3, #8]
 80056a0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80056a4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80056a8:	d107      	bne.n	80056ba <HAL_ADC_Start_DMA+0x8a>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	689a      	ldr	r2, [r3, #8]
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80056b8:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	689b      	ldr	r3, [r3, #8]
 80056c0:	f003 0301 	and.w	r3, r3, #1
 80056c4:	2b01      	cmp	r3, #1
 80056c6:	f040 8088 	bne.w	80057da <HAL_ADC_Start_DMA+0x1aa>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80056ce:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 80056d2:	f023 0301 	bic.w	r3, r3, #1
 80056d6:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	685b      	ldr	r3, [r3, #4]
 80056e4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d007      	beq.n	80056fc <HAL_ADC_Start_DMA+0xcc>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80056f0:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80056f4:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005700:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005704:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005708:	d106      	bne.n	8005718 <HAL_ADC_Start_DMA+0xe8>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800570e:	f023 0206 	bic.w	r2, r3, #6
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	645a      	str	r2, [r3, #68]	@ 0x44
 8005716:	e002      	b.n	800571e <HAL_ADC_Start_DMA+0xee>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	2200      	movs	r2, #0
 800571c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	2200      	movs	r2, #0
 8005722:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005726:	4b37      	ldr	r3, [pc, #220]	@ (8005804 <HAL_ADC_Start_DMA+0x1d4>)
 8005728:	61bb      	str	r3, [r7, #24]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800572e:	4a36      	ldr	r2, [pc, #216]	@ (8005808 <HAL_ADC_Start_DMA+0x1d8>)
 8005730:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005736:	4a35      	ldr	r2, [pc, #212]	@ (800580c <HAL_ADC_Start_DMA+0x1dc>)
 8005738:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800573e:	4a34      	ldr	r2, [pc, #208]	@ (8005810 <HAL_ADC_Start_DMA+0x1e0>)
 8005740:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 800574a:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	685a      	ldr	r2, [r3, #4]
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 800575a:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	689a      	ldr	r2, [r3, #8]
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800576a:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	334c      	adds	r3, #76	@ 0x4c
 8005776:	4619      	mov	r1, r3
 8005778:	68ba      	ldr	r2, [r7, #8]
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	f000 fd46 	bl	800620c <HAL_DMA_Start_IT>
 8005780:	4603      	mov	r3, r0
 8005782:	77fb      	strb	r3, [r7, #31]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8005784:	69bb      	ldr	r3, [r7, #24]
 8005786:	685b      	ldr	r3, [r3, #4]
 8005788:	f003 031f 	and.w	r3, r3, #31
 800578c:	2b00      	cmp	r3, #0
 800578e:	d10f      	bne.n	80057b0 <HAL_ADC_Start_DMA+0x180>
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	689b      	ldr	r3, [r3, #8]
 8005796:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800579a:	2b00      	cmp	r3, #0
 800579c:	d129      	bne.n	80057f2 <HAL_ADC_Start_DMA+0x1c2>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	689a      	ldr	r2, [r3, #8]
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80057ac:	609a      	str	r2, [r3, #8]
 80057ae:	e020      	b.n	80057f2 <HAL_ADC_Start_DMA+0x1c2>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	4a17      	ldr	r2, [pc, #92]	@ (8005814 <HAL_ADC_Start_DMA+0x1e4>)
 80057b6:	4293      	cmp	r3, r2
 80057b8:	d11b      	bne.n	80057f2 <HAL_ADC_Start_DMA+0x1c2>
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	689b      	ldr	r3, [r3, #8]
 80057c0:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d114      	bne.n	80057f2 <HAL_ADC_Start_DMA+0x1c2>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	689a      	ldr	r2, [r3, #8]
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80057d6:	609a      	str	r2, [r3, #8]
 80057d8:	e00b      	b.n	80057f2 <HAL_ADC_Start_DMA+0x1c2>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80057de:	f043 0210 	orr.w	r2, r3, #16
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80057ea:	f043 0201 	orr.w	r2, r3, #1
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return tmp_hal_status;
 80057f2:	7ffb      	ldrb	r3, [r7, #31]
}
 80057f4:	4618      	mov	r0, r3
 80057f6:	3720      	adds	r7, #32
 80057f8:	46bd      	mov	sp, r7
 80057fa:	bd80      	pop	{r7, pc}
 80057fc:	2000d114 	.word	0x2000d114
 8005800:	431bde83 	.word	0x431bde83
 8005804:	40012300 	.word	0x40012300
 8005808:	08005d51 	.word	0x08005d51
 800580c:	08005e0b 	.word	0x08005e0b
 8005810:	08005e27 	.word	0x08005e27
 8005814:	40012000 	.word	0x40012000

08005818 <HAL_ADC_Stop_DMA>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef *hadc)
{
 8005818:	b580      	push	{r7, lr}
 800581a:	b084      	sub	sp, #16
 800581c:	af00      	add	r7, sp, #0
 800581e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005820:	2300      	movs	r3, #0
 8005822:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800582a:	2b01      	cmp	r3, #1
 800582c:	d101      	bne.n	8005832 <HAL_ADC_Stop_DMA+0x1a>
 800582e:	2302      	movs	r3, #2
 8005830:	e048      	b.n	80058c4 <HAL_ADC_Stop_DMA+0xac>
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	2201      	movs	r2, #1
 8005836:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	689a      	ldr	r2, [r3, #8]
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	f022 0201 	bic.w	r2, r2, #1
 8005848:	609a      	str	r2, [r3, #8]

  /* Check if ADC is effectively disabled */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	689b      	ldr	r3, [r3, #8]
 8005850:	f003 0301 	and.w	r3, r3, #1
 8005854:	2b00      	cmp	r3, #0
 8005856:	d130      	bne.n	80058ba <HAL_ADC_Stop_DMA+0xa2>
  {
    /* Disable the selected ADC DMA mode */
    hadc->Instance->CR2 &= ~ADC_CR2_DMA;
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	689a      	ldr	r2, [r3, #8]
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005866:	609a      	str	r2, [r3, #8]

    /* Disable the DMA channel (in case of DMA in circular mode or stop while */
    /* DMA transfer is on going)                                              */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800586c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005870:	b2db      	uxtb	r3, r3
 8005872:	2b02      	cmp	r3, #2
 8005874:	d10f      	bne.n	8005896 <HAL_ADC_Stop_DMA+0x7e>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800587a:	4618      	mov	r0, r3
 800587c:	f000 fd1e 	bl	80062bc <HAL_DMA_Abort>
 8005880:	4603      	mov	r3, r0
 8005882:	73fb      	strb	r3, [r7, #15]

      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 8005884:	7bfb      	ldrb	r3, [r7, #15]
 8005886:	2b00      	cmp	r3, #0
 8005888:	d005      	beq.n	8005896 <HAL_ADC_Stop_DMA+0x7e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800588e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	641a      	str	r2, [r3, #64]	@ 0x40
      }
    }

    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	685a      	ldr	r2, [r3, #4]
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	f022 6280 	bic.w	r2, r2, #67108864	@ 0x4000000
 80058a4:	605a      	str	r2, [r3, #4]

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80058aa:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80058ae:	f023 0301 	bic.w	r3, r3, #1
 80058b2:	f043 0201 	orr.w	r2, r3, #1
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	2200      	movs	r2, #0
 80058be:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 80058c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80058c4:	4618      	mov	r0, r3
 80058c6:	3710      	adds	r7, #16
 80058c8:	46bd      	mov	sp, r7
 80058ca:	bd80      	pop	{r7, pc}

080058cc <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 80058cc:	b480      	push	{r7}
 80058ce:	b083      	sub	sp, #12
 80058d0:	af00      	add	r7, sp, #0
 80058d2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 80058d4:	bf00      	nop
 80058d6:	370c      	adds	r7, #12
 80058d8:	46bd      	mov	sp, r7
 80058da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058de:	4770      	bx	lr

080058e0 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80058e0:	b480      	push	{r7}
 80058e2:	b083      	sub	sp, #12
 80058e4:	af00      	add	r7, sp, #0
 80058e6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80058e8:	bf00      	nop
 80058ea:	370c      	adds	r7, #12
 80058ec:	46bd      	mov	sp, r7
 80058ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058f2:	4770      	bx	lr

080058f4 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80058f4:	b480      	push	{r7}
 80058f6:	b085      	sub	sp, #20
 80058f8:	af00      	add	r7, sp, #0
 80058fa:	6078      	str	r0, [r7, #4]
 80058fc:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80058fe:	2300      	movs	r3, #0
 8005900:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005908:	2b01      	cmp	r3, #1
 800590a:	d101      	bne.n	8005910 <HAL_ADC_ConfigChannel+0x1c>
 800590c:	2302      	movs	r3, #2
 800590e:	e113      	b.n	8005b38 <HAL_ADC_ConfigChannel+0x244>
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	2201      	movs	r2, #1
 8005914:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8005918:	683b      	ldr	r3, [r7, #0]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	2b09      	cmp	r3, #9
 800591e:	d925      	bls.n	800596c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	68d9      	ldr	r1, [r3, #12]
 8005926:	683b      	ldr	r3, [r7, #0]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	b29b      	uxth	r3, r3
 800592c:	461a      	mov	r2, r3
 800592e:	4613      	mov	r3, r2
 8005930:	005b      	lsls	r3, r3, #1
 8005932:	4413      	add	r3, r2
 8005934:	3b1e      	subs	r3, #30
 8005936:	2207      	movs	r2, #7
 8005938:	fa02 f303 	lsl.w	r3, r2, r3
 800593c:	43da      	mvns	r2, r3
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	400a      	ands	r2, r1
 8005944:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	68d9      	ldr	r1, [r3, #12]
 800594c:	683b      	ldr	r3, [r7, #0]
 800594e:	689a      	ldr	r2, [r3, #8]
 8005950:	683b      	ldr	r3, [r7, #0]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	b29b      	uxth	r3, r3
 8005956:	4618      	mov	r0, r3
 8005958:	4603      	mov	r3, r0
 800595a:	005b      	lsls	r3, r3, #1
 800595c:	4403      	add	r3, r0
 800595e:	3b1e      	subs	r3, #30
 8005960:	409a      	lsls	r2, r3
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	430a      	orrs	r2, r1
 8005968:	60da      	str	r2, [r3, #12]
 800596a:	e022      	b.n	80059b2 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	6919      	ldr	r1, [r3, #16]
 8005972:	683b      	ldr	r3, [r7, #0]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	b29b      	uxth	r3, r3
 8005978:	461a      	mov	r2, r3
 800597a:	4613      	mov	r3, r2
 800597c:	005b      	lsls	r3, r3, #1
 800597e:	4413      	add	r3, r2
 8005980:	2207      	movs	r2, #7
 8005982:	fa02 f303 	lsl.w	r3, r2, r3
 8005986:	43da      	mvns	r2, r3
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	400a      	ands	r2, r1
 800598e:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	6919      	ldr	r1, [r3, #16]
 8005996:	683b      	ldr	r3, [r7, #0]
 8005998:	689a      	ldr	r2, [r3, #8]
 800599a:	683b      	ldr	r3, [r7, #0]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	b29b      	uxth	r3, r3
 80059a0:	4618      	mov	r0, r3
 80059a2:	4603      	mov	r3, r0
 80059a4:	005b      	lsls	r3, r3, #1
 80059a6:	4403      	add	r3, r0
 80059a8:	409a      	lsls	r2, r3
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	430a      	orrs	r2, r1
 80059b0:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80059b2:	683b      	ldr	r3, [r7, #0]
 80059b4:	685b      	ldr	r3, [r3, #4]
 80059b6:	2b06      	cmp	r3, #6
 80059b8:	d824      	bhi.n	8005a04 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80059c0:	683b      	ldr	r3, [r7, #0]
 80059c2:	685a      	ldr	r2, [r3, #4]
 80059c4:	4613      	mov	r3, r2
 80059c6:	009b      	lsls	r3, r3, #2
 80059c8:	4413      	add	r3, r2
 80059ca:	3b05      	subs	r3, #5
 80059cc:	221f      	movs	r2, #31
 80059ce:	fa02 f303 	lsl.w	r3, r2, r3
 80059d2:	43da      	mvns	r2, r3
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	400a      	ands	r2, r1
 80059da:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80059e2:	683b      	ldr	r3, [r7, #0]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	b29b      	uxth	r3, r3
 80059e8:	4618      	mov	r0, r3
 80059ea:	683b      	ldr	r3, [r7, #0]
 80059ec:	685a      	ldr	r2, [r3, #4]
 80059ee:	4613      	mov	r3, r2
 80059f0:	009b      	lsls	r3, r3, #2
 80059f2:	4413      	add	r3, r2
 80059f4:	3b05      	subs	r3, #5
 80059f6:	fa00 f203 	lsl.w	r2, r0, r3
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	430a      	orrs	r2, r1
 8005a00:	635a      	str	r2, [r3, #52]	@ 0x34
 8005a02:	e04c      	b.n	8005a9e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8005a04:	683b      	ldr	r3, [r7, #0]
 8005a06:	685b      	ldr	r3, [r3, #4]
 8005a08:	2b0c      	cmp	r3, #12
 8005a0a:	d824      	bhi.n	8005a56 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8005a12:	683b      	ldr	r3, [r7, #0]
 8005a14:	685a      	ldr	r2, [r3, #4]
 8005a16:	4613      	mov	r3, r2
 8005a18:	009b      	lsls	r3, r3, #2
 8005a1a:	4413      	add	r3, r2
 8005a1c:	3b23      	subs	r3, #35	@ 0x23
 8005a1e:	221f      	movs	r2, #31
 8005a20:	fa02 f303 	lsl.w	r3, r2, r3
 8005a24:	43da      	mvns	r2, r3
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	400a      	ands	r2, r1
 8005a2c:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8005a34:	683b      	ldr	r3, [r7, #0]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	b29b      	uxth	r3, r3
 8005a3a:	4618      	mov	r0, r3
 8005a3c:	683b      	ldr	r3, [r7, #0]
 8005a3e:	685a      	ldr	r2, [r3, #4]
 8005a40:	4613      	mov	r3, r2
 8005a42:	009b      	lsls	r3, r3, #2
 8005a44:	4413      	add	r3, r2
 8005a46:	3b23      	subs	r3, #35	@ 0x23
 8005a48:	fa00 f203 	lsl.w	r2, r0, r3
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	430a      	orrs	r2, r1
 8005a52:	631a      	str	r2, [r3, #48]	@ 0x30
 8005a54:	e023      	b.n	8005a9e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8005a5c:	683b      	ldr	r3, [r7, #0]
 8005a5e:	685a      	ldr	r2, [r3, #4]
 8005a60:	4613      	mov	r3, r2
 8005a62:	009b      	lsls	r3, r3, #2
 8005a64:	4413      	add	r3, r2
 8005a66:	3b41      	subs	r3, #65	@ 0x41
 8005a68:	221f      	movs	r2, #31
 8005a6a:	fa02 f303 	lsl.w	r3, r2, r3
 8005a6e:	43da      	mvns	r2, r3
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	400a      	ands	r2, r1
 8005a76:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8005a7e:	683b      	ldr	r3, [r7, #0]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	b29b      	uxth	r3, r3
 8005a84:	4618      	mov	r0, r3
 8005a86:	683b      	ldr	r3, [r7, #0]
 8005a88:	685a      	ldr	r2, [r3, #4]
 8005a8a:	4613      	mov	r3, r2
 8005a8c:	009b      	lsls	r3, r3, #2
 8005a8e:	4413      	add	r3, r2
 8005a90:	3b41      	subs	r3, #65	@ 0x41
 8005a92:	fa00 f203 	lsl.w	r2, r0, r3
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	430a      	orrs	r2, r1
 8005a9c:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005a9e:	4b29      	ldr	r3, [pc, #164]	@ (8005b44 <HAL_ADC_ConfigChannel+0x250>)
 8005aa0:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	4a28      	ldr	r2, [pc, #160]	@ (8005b48 <HAL_ADC_ConfigChannel+0x254>)
 8005aa8:	4293      	cmp	r3, r2
 8005aaa:	d10f      	bne.n	8005acc <HAL_ADC_ConfigChannel+0x1d8>
 8005aac:	683b      	ldr	r3, [r7, #0]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	2b12      	cmp	r3, #18
 8005ab2:	d10b      	bne.n	8005acc <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	685b      	ldr	r3, [r3, #4]
 8005ab8:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	685b      	ldr	r3, [r3, #4]
 8005ac4:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	4a1d      	ldr	r2, [pc, #116]	@ (8005b48 <HAL_ADC_ConfigChannel+0x254>)
 8005ad2:	4293      	cmp	r3, r2
 8005ad4:	d12b      	bne.n	8005b2e <HAL_ADC_ConfigChannel+0x23a>
 8005ad6:	683b      	ldr	r3, [r7, #0]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	4a1c      	ldr	r2, [pc, #112]	@ (8005b4c <HAL_ADC_ConfigChannel+0x258>)
 8005adc:	4293      	cmp	r3, r2
 8005ade:	d003      	beq.n	8005ae8 <HAL_ADC_ConfigChannel+0x1f4>
 8005ae0:	683b      	ldr	r3, [r7, #0]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	2b11      	cmp	r3, #17
 8005ae6:	d122      	bne.n	8005b2e <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	685b      	ldr	r3, [r3, #4]
 8005aec:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	685b      	ldr	r3, [r3, #4]
 8005af8:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8005b00:	683b      	ldr	r3, [r7, #0]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	4a11      	ldr	r2, [pc, #68]	@ (8005b4c <HAL_ADC_ConfigChannel+0x258>)
 8005b06:	4293      	cmp	r3, r2
 8005b08:	d111      	bne.n	8005b2e <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8005b0a:	4b11      	ldr	r3, [pc, #68]	@ (8005b50 <HAL_ADC_ConfigChannel+0x25c>)
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	4a11      	ldr	r2, [pc, #68]	@ (8005b54 <HAL_ADC_ConfigChannel+0x260>)
 8005b10:	fba2 2303 	umull	r2, r3, r2, r3
 8005b14:	0c9a      	lsrs	r2, r3, #18
 8005b16:	4613      	mov	r3, r2
 8005b18:	009b      	lsls	r3, r3, #2
 8005b1a:	4413      	add	r3, r2
 8005b1c:	005b      	lsls	r3, r3, #1
 8005b1e:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8005b20:	e002      	b.n	8005b28 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8005b22:	68bb      	ldr	r3, [r7, #8]
 8005b24:	3b01      	subs	r3, #1
 8005b26:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8005b28:	68bb      	ldr	r3, [r7, #8]
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d1f9      	bne.n	8005b22 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	2200      	movs	r2, #0
 8005b32:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8005b36:	2300      	movs	r3, #0
}
 8005b38:	4618      	mov	r0, r3
 8005b3a:	3714      	adds	r7, #20
 8005b3c:	46bd      	mov	sp, r7
 8005b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b42:	4770      	bx	lr
 8005b44:	40012300 	.word	0x40012300
 8005b48:	40012000 	.word	0x40012000
 8005b4c:	10000012 	.word	0x10000012
 8005b50:	2000d114 	.word	0x2000d114
 8005b54:	431bde83 	.word	0x431bde83

08005b58 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8005b58:	b480      	push	{r7}
 8005b5a:	b085      	sub	sp, #20
 8005b5c:	af00      	add	r7, sp, #0
 8005b5e:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005b60:	4b79      	ldr	r3, [pc, #484]	@ (8005d48 <ADC_Init+0x1f0>)
 8005b62:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	685b      	ldr	r3, [r3, #4]
 8005b68:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	685a      	ldr	r2, [r3, #4]
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	685b      	ldr	r3, [r3, #4]
 8005b78:	431a      	orrs	r2, r3
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	685a      	ldr	r2, [r3, #4]
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005b8c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	6859      	ldr	r1, [r3, #4]
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	691b      	ldr	r3, [r3, #16]
 8005b98:	021a      	lsls	r2, r3, #8
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	430a      	orrs	r2, r1
 8005ba0:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	685a      	ldr	r2, [r3, #4]
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8005bb0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	6859      	ldr	r1, [r3, #4]
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	689a      	ldr	r2, [r3, #8]
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	430a      	orrs	r2, r1
 8005bc2:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	689a      	ldr	r2, [r3, #8]
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005bd2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	6899      	ldr	r1, [r3, #8]
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	68da      	ldr	r2, [r3, #12]
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	430a      	orrs	r2, r1
 8005be4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005bea:	4a58      	ldr	r2, [pc, #352]	@ (8005d4c <ADC_Init+0x1f4>)
 8005bec:	4293      	cmp	r3, r2
 8005bee:	d022      	beq.n	8005c36 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	689a      	ldr	r2, [r3, #8]
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8005bfe:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	6899      	ldr	r1, [r3, #8]
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	430a      	orrs	r2, r1
 8005c10:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	689a      	ldr	r2, [r3, #8]
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8005c20:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	6899      	ldr	r1, [r3, #8]
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	430a      	orrs	r2, r1
 8005c32:	609a      	str	r2, [r3, #8]
 8005c34:	e00f      	b.n	8005c56 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	689a      	ldr	r2, [r3, #8]
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8005c44:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	689a      	ldr	r2, [r3, #8]
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8005c54:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	689a      	ldr	r2, [r3, #8]
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	f022 0202 	bic.w	r2, r2, #2
 8005c64:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	6899      	ldr	r1, [r3, #8]
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	7e1b      	ldrb	r3, [r3, #24]
 8005c70:	005a      	lsls	r2, r3, #1
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	430a      	orrs	r2, r1
 8005c78:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d01b      	beq.n	8005cbc <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	685a      	ldr	r2, [r3, #4]
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005c92:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	685a      	ldr	r2, [r3, #4]
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8005ca2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	6859      	ldr	r1, [r3, #4]
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005cae:	3b01      	subs	r3, #1
 8005cb0:	035a      	lsls	r2, r3, #13
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	430a      	orrs	r2, r1
 8005cb8:	605a      	str	r2, [r3, #4]
 8005cba:	e007      	b.n	8005ccc <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	685a      	ldr	r2, [r3, #4]
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005cca:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8005cda:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	69db      	ldr	r3, [r3, #28]
 8005ce6:	3b01      	subs	r3, #1
 8005ce8:	051a      	lsls	r2, r3, #20
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	430a      	orrs	r2, r1
 8005cf0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	689a      	ldr	r2, [r3, #8]
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8005d00:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	6899      	ldr	r1, [r3, #8]
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8005d0e:	025a      	lsls	r2, r3, #9
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	430a      	orrs	r2, r1
 8005d16:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	689a      	ldr	r2, [r3, #8]
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005d26:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	6899      	ldr	r1, [r3, #8]
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	695b      	ldr	r3, [r3, #20]
 8005d32:	029a      	lsls	r2, r3, #10
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	430a      	orrs	r2, r1
 8005d3a:	609a      	str	r2, [r3, #8]
}
 8005d3c:	bf00      	nop
 8005d3e:	3714      	adds	r7, #20
 8005d40:	46bd      	mov	sp, r7
 8005d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d46:	4770      	bx	lr
 8005d48:	40012300 	.word	0x40012300
 8005d4c:	0f000001 	.word	0x0f000001

08005d50 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8005d50:	b580      	push	{r7, lr}
 8005d52:	b084      	sub	sp, #16
 8005d54:	af00      	add	r7, sp, #0
 8005d56:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d5c:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d62:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d13c      	bne.n	8005de4 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d6e:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	689b      	ldr	r3, [r3, #8]
 8005d7c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d12b      	bne.n	8005ddc <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d127      	bne.n	8005ddc <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d92:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d006      	beq.n	8005da8 <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	689b      	ldr	r3, [r3, #8]
 8005da0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d119      	bne.n	8005ddc <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	685a      	ldr	r2, [r3, #4]
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	f022 0220 	bic.w	r2, r2, #32
 8005db6:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005dbc:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005dc8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d105      	bne.n	8005ddc <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005dd4:	f043 0201 	orr.w	r2, r3, #1
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8005ddc:	68f8      	ldr	r0, [r7, #12]
 8005dde:	f7fc fad3 	bl	8002388 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8005de2:	e00e      	b.n	8005e02 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005de8:	f003 0310 	and.w	r3, r3, #16
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d003      	beq.n	8005df8 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8005df0:	68f8      	ldr	r0, [r7, #12]
 8005df2:	f7ff fd75 	bl	80058e0 <HAL_ADC_ErrorCallback>
}
 8005df6:	e004      	b.n	8005e02 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005dfc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005dfe:	6878      	ldr	r0, [r7, #4]
 8005e00:	4798      	blx	r3
}
 8005e02:	bf00      	nop
 8005e04:	3710      	adds	r7, #16
 8005e06:	46bd      	mov	sp, r7
 8005e08:	bd80      	pop	{r7, pc}

08005e0a <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8005e0a:	b580      	push	{r7, lr}
 8005e0c:	b084      	sub	sp, #16
 8005e0e:	af00      	add	r7, sp, #0
 8005e10:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e16:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8005e18:	68f8      	ldr	r0, [r7, #12]
 8005e1a:	f7ff fd57 	bl	80058cc <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8005e1e:	bf00      	nop
 8005e20:	3710      	adds	r7, #16
 8005e22:	46bd      	mov	sp, r7
 8005e24:	bd80      	pop	{r7, pc}

08005e26 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8005e26:	b580      	push	{r7, lr}
 8005e28:	b084      	sub	sp, #16
 8005e2a:	af00      	add	r7, sp, #0
 8005e2c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e32:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	2240      	movs	r2, #64	@ 0x40
 8005e38:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005e3e:	f043 0204 	orr.w	r2, r3, #4
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8005e46:	68f8      	ldr	r0, [r7, #12]
 8005e48:	f7ff fd4a 	bl	80058e0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8005e4c:	bf00      	nop
 8005e4e:	3710      	adds	r7, #16
 8005e50:	46bd      	mov	sp, r7
 8005e52:	bd80      	pop	{r7, pc}

08005e54 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005e54:	b480      	push	{r7}
 8005e56:	b085      	sub	sp, #20
 8005e58:	af00      	add	r7, sp, #0
 8005e5a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	f003 0307 	and.w	r3, r3, #7
 8005e62:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005e64:	4b0c      	ldr	r3, [pc, #48]	@ (8005e98 <__NVIC_SetPriorityGrouping+0x44>)
 8005e66:	68db      	ldr	r3, [r3, #12]
 8005e68:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005e6a:	68ba      	ldr	r2, [r7, #8]
 8005e6c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8005e70:	4013      	ands	r3, r2
 8005e72:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005e78:	68bb      	ldr	r3, [r7, #8]
 8005e7a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005e7c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8005e80:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005e84:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005e86:	4a04      	ldr	r2, [pc, #16]	@ (8005e98 <__NVIC_SetPriorityGrouping+0x44>)
 8005e88:	68bb      	ldr	r3, [r7, #8]
 8005e8a:	60d3      	str	r3, [r2, #12]
}
 8005e8c:	bf00      	nop
 8005e8e:	3714      	adds	r7, #20
 8005e90:	46bd      	mov	sp, r7
 8005e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e96:	4770      	bx	lr
 8005e98:	e000ed00 	.word	0xe000ed00

08005e9c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005e9c:	b480      	push	{r7}
 8005e9e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005ea0:	4b04      	ldr	r3, [pc, #16]	@ (8005eb4 <__NVIC_GetPriorityGrouping+0x18>)
 8005ea2:	68db      	ldr	r3, [r3, #12]
 8005ea4:	0a1b      	lsrs	r3, r3, #8
 8005ea6:	f003 0307 	and.w	r3, r3, #7
}
 8005eaa:	4618      	mov	r0, r3
 8005eac:	46bd      	mov	sp, r7
 8005eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eb2:	4770      	bx	lr
 8005eb4:	e000ed00 	.word	0xe000ed00

08005eb8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005eb8:	b480      	push	{r7}
 8005eba:	b083      	sub	sp, #12
 8005ebc:	af00      	add	r7, sp, #0
 8005ebe:	4603      	mov	r3, r0
 8005ec0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005ec2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	db0b      	blt.n	8005ee2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005eca:	79fb      	ldrb	r3, [r7, #7]
 8005ecc:	f003 021f 	and.w	r2, r3, #31
 8005ed0:	4907      	ldr	r1, [pc, #28]	@ (8005ef0 <__NVIC_EnableIRQ+0x38>)
 8005ed2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005ed6:	095b      	lsrs	r3, r3, #5
 8005ed8:	2001      	movs	r0, #1
 8005eda:	fa00 f202 	lsl.w	r2, r0, r2
 8005ede:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8005ee2:	bf00      	nop
 8005ee4:	370c      	adds	r7, #12
 8005ee6:	46bd      	mov	sp, r7
 8005ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eec:	4770      	bx	lr
 8005eee:	bf00      	nop
 8005ef0:	e000e100 	.word	0xe000e100

08005ef4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005ef4:	b480      	push	{r7}
 8005ef6:	b083      	sub	sp, #12
 8005ef8:	af00      	add	r7, sp, #0
 8005efa:	4603      	mov	r3, r0
 8005efc:	6039      	str	r1, [r7, #0]
 8005efe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005f00:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	db0a      	blt.n	8005f1e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005f08:	683b      	ldr	r3, [r7, #0]
 8005f0a:	b2da      	uxtb	r2, r3
 8005f0c:	490c      	ldr	r1, [pc, #48]	@ (8005f40 <__NVIC_SetPriority+0x4c>)
 8005f0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005f12:	0112      	lsls	r2, r2, #4
 8005f14:	b2d2      	uxtb	r2, r2
 8005f16:	440b      	add	r3, r1
 8005f18:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005f1c:	e00a      	b.n	8005f34 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005f1e:	683b      	ldr	r3, [r7, #0]
 8005f20:	b2da      	uxtb	r2, r3
 8005f22:	4908      	ldr	r1, [pc, #32]	@ (8005f44 <__NVIC_SetPriority+0x50>)
 8005f24:	79fb      	ldrb	r3, [r7, #7]
 8005f26:	f003 030f 	and.w	r3, r3, #15
 8005f2a:	3b04      	subs	r3, #4
 8005f2c:	0112      	lsls	r2, r2, #4
 8005f2e:	b2d2      	uxtb	r2, r2
 8005f30:	440b      	add	r3, r1
 8005f32:	761a      	strb	r2, [r3, #24]
}
 8005f34:	bf00      	nop
 8005f36:	370c      	adds	r7, #12
 8005f38:	46bd      	mov	sp, r7
 8005f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f3e:	4770      	bx	lr
 8005f40:	e000e100 	.word	0xe000e100
 8005f44:	e000ed00 	.word	0xe000ed00

08005f48 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005f48:	b480      	push	{r7}
 8005f4a:	b089      	sub	sp, #36	@ 0x24
 8005f4c:	af00      	add	r7, sp, #0
 8005f4e:	60f8      	str	r0, [r7, #12]
 8005f50:	60b9      	str	r1, [r7, #8]
 8005f52:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	f003 0307 	and.w	r3, r3, #7
 8005f5a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005f5c:	69fb      	ldr	r3, [r7, #28]
 8005f5e:	f1c3 0307 	rsb	r3, r3, #7
 8005f62:	2b04      	cmp	r3, #4
 8005f64:	bf28      	it	cs
 8005f66:	2304      	movcs	r3, #4
 8005f68:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005f6a:	69fb      	ldr	r3, [r7, #28]
 8005f6c:	3304      	adds	r3, #4
 8005f6e:	2b06      	cmp	r3, #6
 8005f70:	d902      	bls.n	8005f78 <NVIC_EncodePriority+0x30>
 8005f72:	69fb      	ldr	r3, [r7, #28]
 8005f74:	3b03      	subs	r3, #3
 8005f76:	e000      	b.n	8005f7a <NVIC_EncodePriority+0x32>
 8005f78:	2300      	movs	r3, #0
 8005f7a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005f7c:	f04f 32ff 	mov.w	r2, #4294967295
 8005f80:	69bb      	ldr	r3, [r7, #24]
 8005f82:	fa02 f303 	lsl.w	r3, r2, r3
 8005f86:	43da      	mvns	r2, r3
 8005f88:	68bb      	ldr	r3, [r7, #8]
 8005f8a:	401a      	ands	r2, r3
 8005f8c:	697b      	ldr	r3, [r7, #20]
 8005f8e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005f90:	f04f 31ff 	mov.w	r1, #4294967295
 8005f94:	697b      	ldr	r3, [r7, #20]
 8005f96:	fa01 f303 	lsl.w	r3, r1, r3
 8005f9a:	43d9      	mvns	r1, r3
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005fa0:	4313      	orrs	r3, r2
         );
}
 8005fa2:	4618      	mov	r0, r3
 8005fa4:	3724      	adds	r7, #36	@ 0x24
 8005fa6:	46bd      	mov	sp, r7
 8005fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fac:	4770      	bx	lr
	...

08005fb0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005fb0:	b580      	push	{r7, lr}
 8005fb2:	b082      	sub	sp, #8
 8005fb4:	af00      	add	r7, sp, #0
 8005fb6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	3b01      	subs	r3, #1
 8005fbc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005fc0:	d301      	bcc.n	8005fc6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005fc2:	2301      	movs	r3, #1
 8005fc4:	e00f      	b.n	8005fe6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005fc6:	4a0a      	ldr	r2, [pc, #40]	@ (8005ff0 <SysTick_Config+0x40>)
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	3b01      	subs	r3, #1
 8005fcc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005fce:	210f      	movs	r1, #15
 8005fd0:	f04f 30ff 	mov.w	r0, #4294967295
 8005fd4:	f7ff ff8e 	bl	8005ef4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005fd8:	4b05      	ldr	r3, [pc, #20]	@ (8005ff0 <SysTick_Config+0x40>)
 8005fda:	2200      	movs	r2, #0
 8005fdc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005fde:	4b04      	ldr	r3, [pc, #16]	@ (8005ff0 <SysTick_Config+0x40>)
 8005fe0:	2207      	movs	r2, #7
 8005fe2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005fe4:	2300      	movs	r3, #0
}
 8005fe6:	4618      	mov	r0, r3
 8005fe8:	3708      	adds	r7, #8
 8005fea:	46bd      	mov	sp, r7
 8005fec:	bd80      	pop	{r7, pc}
 8005fee:	bf00      	nop
 8005ff0:	e000e010 	.word	0xe000e010

08005ff4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005ff4:	b580      	push	{r7, lr}
 8005ff6:	b082      	sub	sp, #8
 8005ff8:	af00      	add	r7, sp, #0
 8005ffa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005ffc:	6878      	ldr	r0, [r7, #4]
 8005ffe:	f7ff ff29 	bl	8005e54 <__NVIC_SetPriorityGrouping>
}
 8006002:	bf00      	nop
 8006004:	3708      	adds	r7, #8
 8006006:	46bd      	mov	sp, r7
 8006008:	bd80      	pop	{r7, pc}

0800600a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800600a:	b580      	push	{r7, lr}
 800600c:	b086      	sub	sp, #24
 800600e:	af00      	add	r7, sp, #0
 8006010:	4603      	mov	r3, r0
 8006012:	60b9      	str	r1, [r7, #8]
 8006014:	607a      	str	r2, [r7, #4]
 8006016:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8006018:	2300      	movs	r3, #0
 800601a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800601c:	f7ff ff3e 	bl	8005e9c <__NVIC_GetPriorityGrouping>
 8006020:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006022:	687a      	ldr	r2, [r7, #4]
 8006024:	68b9      	ldr	r1, [r7, #8]
 8006026:	6978      	ldr	r0, [r7, #20]
 8006028:	f7ff ff8e 	bl	8005f48 <NVIC_EncodePriority>
 800602c:	4602      	mov	r2, r0
 800602e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006032:	4611      	mov	r1, r2
 8006034:	4618      	mov	r0, r3
 8006036:	f7ff ff5d 	bl	8005ef4 <__NVIC_SetPriority>
}
 800603a:	bf00      	nop
 800603c:	3718      	adds	r7, #24
 800603e:	46bd      	mov	sp, r7
 8006040:	bd80      	pop	{r7, pc}

08006042 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006042:	b580      	push	{r7, lr}
 8006044:	b082      	sub	sp, #8
 8006046:	af00      	add	r7, sp, #0
 8006048:	4603      	mov	r3, r0
 800604a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800604c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006050:	4618      	mov	r0, r3
 8006052:	f7ff ff31 	bl	8005eb8 <__NVIC_EnableIRQ>
}
 8006056:	bf00      	nop
 8006058:	3708      	adds	r7, #8
 800605a:	46bd      	mov	sp, r7
 800605c:	bd80      	pop	{r7, pc}

0800605e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800605e:	b580      	push	{r7, lr}
 8006060:	b082      	sub	sp, #8
 8006062:	af00      	add	r7, sp, #0
 8006064:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8006066:	6878      	ldr	r0, [r7, #4]
 8006068:	f7ff ffa2 	bl	8005fb0 <SysTick_Config>
 800606c:	4603      	mov	r3, r0
}
 800606e:	4618      	mov	r0, r3
 8006070:	3708      	adds	r7, #8
 8006072:	46bd      	mov	sp, r7
 8006074:	bd80      	pop	{r7, pc}

08006076 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8006076:	b580      	push	{r7, lr}
 8006078:	b082      	sub	sp, #8
 800607a:	af00      	add	r7, sp, #0
 800607c:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	2b00      	cmp	r3, #0
 8006082:	d101      	bne.n	8006088 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8006084:	2301      	movs	r3, #1
 8006086:	e00e      	b.n	80060a6 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	795b      	ldrb	r3, [r3, #5]
 800608c:	b2db      	uxtb	r3, r3
 800608e:	2b00      	cmp	r3, #0
 8006090:	d105      	bne.n	800609e <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	2200      	movs	r2, #0
 8006096:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8006098:	6878      	ldr	r0, [r7, #4]
 800609a:	f7fb f981 	bl	80013a0 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	2201      	movs	r2, #1
 80060a2:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80060a4:	2300      	movs	r3, #0
}
 80060a6:	4618      	mov	r0, r3
 80060a8:	3708      	adds	r7, #8
 80060aa:	46bd      	mov	sp, r7
 80060ac:	bd80      	pop	{r7, pc}
	...

080060b0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80060b0:	b580      	push	{r7, lr}
 80060b2:	b086      	sub	sp, #24
 80060b4:	af00      	add	r7, sp, #0
 80060b6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80060b8:	2300      	movs	r3, #0
 80060ba:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80060bc:	f7ff fa44 	bl	8005548 <HAL_GetTick>
 80060c0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d101      	bne.n	80060cc <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80060c8:	2301      	movs	r3, #1
 80060ca:	e099      	b.n	8006200 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	2202      	movs	r2, #2
 80060d0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	2200      	movs	r2, #0
 80060d8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	681a      	ldr	r2, [r3, #0]
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	f022 0201 	bic.w	r2, r2, #1
 80060ea:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80060ec:	e00f      	b.n	800610e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80060ee:	f7ff fa2b 	bl	8005548 <HAL_GetTick>
 80060f2:	4602      	mov	r2, r0
 80060f4:	693b      	ldr	r3, [r7, #16]
 80060f6:	1ad3      	subs	r3, r2, r3
 80060f8:	2b05      	cmp	r3, #5
 80060fa:	d908      	bls.n	800610e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	2220      	movs	r2, #32
 8006100:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	2203      	movs	r2, #3
 8006106:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 800610a:	2303      	movs	r3, #3
 800610c:	e078      	b.n	8006200 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	f003 0301 	and.w	r3, r3, #1
 8006118:	2b00      	cmp	r3, #0
 800611a:	d1e8      	bne.n	80060ee <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8006124:	697a      	ldr	r2, [r7, #20]
 8006126:	4b38      	ldr	r3, [pc, #224]	@ (8006208 <HAL_DMA_Init+0x158>)
 8006128:	4013      	ands	r3, r2
 800612a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	685a      	ldr	r2, [r3, #4]
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	689b      	ldr	r3, [r3, #8]
 8006134:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800613a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	691b      	ldr	r3, [r3, #16]
 8006140:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006146:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	699b      	ldr	r3, [r3, #24]
 800614c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006152:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	6a1b      	ldr	r3, [r3, #32]
 8006158:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800615a:	697a      	ldr	r2, [r7, #20]
 800615c:	4313      	orrs	r3, r2
 800615e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006164:	2b04      	cmp	r3, #4
 8006166:	d107      	bne.n	8006178 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006170:	4313      	orrs	r3, r2
 8006172:	697a      	ldr	r2, [r7, #20]
 8006174:	4313      	orrs	r3, r2
 8006176:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	697a      	ldr	r2, [r7, #20]
 800617e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	695b      	ldr	r3, [r3, #20]
 8006186:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8006188:	697b      	ldr	r3, [r7, #20]
 800618a:	f023 0307 	bic.w	r3, r3, #7
 800618e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006194:	697a      	ldr	r2, [r7, #20]
 8006196:	4313      	orrs	r3, r2
 8006198:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800619e:	2b04      	cmp	r3, #4
 80061a0:	d117      	bne.n	80061d2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80061a6:	697a      	ldr	r2, [r7, #20]
 80061a8:	4313      	orrs	r3, r2
 80061aa:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d00e      	beq.n	80061d2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80061b4:	6878      	ldr	r0, [r7, #4]
 80061b6:	f000 fb01 	bl	80067bc <DMA_CheckFifoParam>
 80061ba:	4603      	mov	r3, r0
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d008      	beq.n	80061d2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	2240      	movs	r2, #64	@ 0x40
 80061c4:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	2201      	movs	r2, #1
 80061ca:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 80061ce:	2301      	movs	r3, #1
 80061d0:	e016      	b.n	8006200 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	697a      	ldr	r2, [r7, #20]
 80061d8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80061da:	6878      	ldr	r0, [r7, #4]
 80061dc:	f000 fab8 	bl	8006750 <DMA_CalcBaseAndBitshift>
 80061e0:	4603      	mov	r3, r0
 80061e2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80061e8:	223f      	movs	r2, #63	@ 0x3f
 80061ea:	409a      	lsls	r2, r3
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	2200      	movs	r2, #0
 80061f4:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	2201      	movs	r2, #1
 80061fa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80061fe:	2300      	movs	r3, #0
}
 8006200:	4618      	mov	r0, r3
 8006202:	3718      	adds	r7, #24
 8006204:	46bd      	mov	sp, r7
 8006206:	bd80      	pop	{r7, pc}
 8006208:	f010803f 	.word	0xf010803f

0800620c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800620c:	b580      	push	{r7, lr}
 800620e:	b086      	sub	sp, #24
 8006210:	af00      	add	r7, sp, #0
 8006212:	60f8      	str	r0, [r7, #12]
 8006214:	60b9      	str	r1, [r7, #8]
 8006216:	607a      	str	r2, [r7, #4]
 8006218:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800621a:	2300      	movs	r3, #0
 800621c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006222:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800622a:	2b01      	cmp	r3, #1
 800622c:	d101      	bne.n	8006232 <HAL_DMA_Start_IT+0x26>
 800622e:	2302      	movs	r3, #2
 8006230:	e040      	b.n	80062b4 <HAL_DMA_Start_IT+0xa8>
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	2201      	movs	r2, #1
 8006236:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8006240:	b2db      	uxtb	r3, r3
 8006242:	2b01      	cmp	r3, #1
 8006244:	d12f      	bne.n	80062a6 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	2202      	movs	r2, #2
 800624a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	2200      	movs	r2, #0
 8006252:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8006254:	683b      	ldr	r3, [r7, #0]
 8006256:	687a      	ldr	r2, [r7, #4]
 8006258:	68b9      	ldr	r1, [r7, #8]
 800625a:	68f8      	ldr	r0, [r7, #12]
 800625c:	f000 fa4a 	bl	80066f4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006264:	223f      	movs	r2, #63	@ 0x3f
 8006266:	409a      	lsls	r2, r3
 8006268:	693b      	ldr	r3, [r7, #16]
 800626a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	681a      	ldr	r2, [r3, #0]
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	f042 0216 	orr.w	r2, r2, #22
 800627a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006280:	2b00      	cmp	r3, #0
 8006282:	d007      	beq.n	8006294 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	681a      	ldr	r2, [r3, #0]
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	f042 0208 	orr.w	r2, r2, #8
 8006292:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	681a      	ldr	r2, [r3, #0]
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	f042 0201 	orr.w	r2, r2, #1
 80062a2:	601a      	str	r2, [r3, #0]
 80062a4:	e005      	b.n	80062b2 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	2200      	movs	r2, #0
 80062aa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80062ae:	2302      	movs	r3, #2
 80062b0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80062b2:	7dfb      	ldrb	r3, [r7, #23]
}
 80062b4:	4618      	mov	r0, r3
 80062b6:	3718      	adds	r7, #24
 80062b8:	46bd      	mov	sp, r7
 80062ba:	bd80      	pop	{r7, pc}

080062bc <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80062bc:	b580      	push	{r7, lr}
 80062be:	b084      	sub	sp, #16
 80062c0:	af00      	add	r7, sp, #0
 80062c2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80062c8:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80062ca:	f7ff f93d 	bl	8005548 <HAL_GetTick>
 80062ce:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80062d6:	b2db      	uxtb	r3, r3
 80062d8:	2b02      	cmp	r3, #2
 80062da:	d008      	beq.n	80062ee <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	2280      	movs	r2, #128	@ 0x80
 80062e0:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	2200      	movs	r2, #0
 80062e6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 80062ea:	2301      	movs	r3, #1
 80062ec:	e052      	b.n	8006394 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	681a      	ldr	r2, [r3, #0]
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	f022 0216 	bic.w	r2, r2, #22
 80062fc:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	695a      	ldr	r2, [r3, #20]
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800630c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006312:	2b00      	cmp	r3, #0
 8006314:	d103      	bne.n	800631e <HAL_DMA_Abort+0x62>
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800631a:	2b00      	cmp	r3, #0
 800631c:	d007      	beq.n	800632e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	681a      	ldr	r2, [r3, #0]
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	f022 0208 	bic.w	r2, r2, #8
 800632c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	681a      	ldr	r2, [r3, #0]
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	f022 0201 	bic.w	r2, r2, #1
 800633c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800633e:	e013      	b.n	8006368 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8006340:	f7ff f902 	bl	8005548 <HAL_GetTick>
 8006344:	4602      	mov	r2, r0
 8006346:	68bb      	ldr	r3, [r7, #8]
 8006348:	1ad3      	subs	r3, r2, r3
 800634a:	2b05      	cmp	r3, #5
 800634c:	d90c      	bls.n	8006368 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	2220      	movs	r2, #32
 8006352:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	2203      	movs	r2, #3
 8006358:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	2200      	movs	r2, #0
 8006360:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8006364:	2303      	movs	r3, #3
 8006366:	e015      	b.n	8006394 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	f003 0301 	and.w	r3, r3, #1
 8006372:	2b00      	cmp	r3, #0
 8006374:	d1e4      	bne.n	8006340 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800637a:	223f      	movs	r2, #63	@ 0x3f
 800637c:	409a      	lsls	r2, r3
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	2201      	movs	r2, #1
 8006386:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	2200      	movs	r2, #0
 800638e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8006392:	2300      	movs	r3, #0
}
 8006394:	4618      	mov	r0, r3
 8006396:	3710      	adds	r7, #16
 8006398:	46bd      	mov	sp, r7
 800639a:	bd80      	pop	{r7, pc}

0800639c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800639c:	b480      	push	{r7}
 800639e:	b083      	sub	sp, #12
 80063a0:	af00      	add	r7, sp, #0
 80063a2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80063aa:	b2db      	uxtb	r3, r3
 80063ac:	2b02      	cmp	r3, #2
 80063ae:	d004      	beq.n	80063ba <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	2280      	movs	r2, #128	@ 0x80
 80063b4:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80063b6:	2301      	movs	r3, #1
 80063b8:	e00c      	b.n	80063d4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	2205      	movs	r2, #5
 80063be:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	681a      	ldr	r2, [r3, #0]
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	f022 0201 	bic.w	r2, r2, #1
 80063d0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80063d2:	2300      	movs	r3, #0
}
 80063d4:	4618      	mov	r0, r3
 80063d6:	370c      	adds	r7, #12
 80063d8:	46bd      	mov	sp, r7
 80063da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063de:	4770      	bx	lr

080063e0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80063e0:	b580      	push	{r7, lr}
 80063e2:	b086      	sub	sp, #24
 80063e4:	af00      	add	r7, sp, #0
 80063e6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80063e8:	2300      	movs	r3, #0
 80063ea:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80063ec:	4b8e      	ldr	r3, [pc, #568]	@ (8006628 <HAL_DMA_IRQHandler+0x248>)
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	4a8e      	ldr	r2, [pc, #568]	@ (800662c <HAL_DMA_IRQHandler+0x24c>)
 80063f2:	fba2 2303 	umull	r2, r3, r2, r3
 80063f6:	0a9b      	lsrs	r3, r3, #10
 80063f8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80063fe:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8006400:	693b      	ldr	r3, [r7, #16]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800640a:	2208      	movs	r2, #8
 800640c:	409a      	lsls	r2, r3
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	4013      	ands	r3, r2
 8006412:	2b00      	cmp	r3, #0
 8006414:	d01a      	beq.n	800644c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	f003 0304 	and.w	r3, r3, #4
 8006420:	2b00      	cmp	r3, #0
 8006422:	d013      	beq.n	800644c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	681a      	ldr	r2, [r3, #0]
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	f022 0204 	bic.w	r2, r2, #4
 8006432:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006438:	2208      	movs	r2, #8
 800643a:	409a      	lsls	r2, r3
 800643c:	693b      	ldr	r3, [r7, #16]
 800643e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006444:	f043 0201 	orr.w	r2, r3, #1
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006450:	2201      	movs	r2, #1
 8006452:	409a      	lsls	r2, r3
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	4013      	ands	r3, r2
 8006458:	2b00      	cmp	r3, #0
 800645a:	d012      	beq.n	8006482 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	695b      	ldr	r3, [r3, #20]
 8006462:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006466:	2b00      	cmp	r3, #0
 8006468:	d00b      	beq.n	8006482 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800646e:	2201      	movs	r2, #1
 8006470:	409a      	lsls	r2, r3
 8006472:	693b      	ldr	r3, [r7, #16]
 8006474:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800647a:	f043 0202 	orr.w	r2, r3, #2
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006486:	2204      	movs	r2, #4
 8006488:	409a      	lsls	r2, r3
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	4013      	ands	r3, r2
 800648e:	2b00      	cmp	r3, #0
 8006490:	d012      	beq.n	80064b8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	f003 0302 	and.w	r3, r3, #2
 800649c:	2b00      	cmp	r3, #0
 800649e:	d00b      	beq.n	80064b8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80064a4:	2204      	movs	r2, #4
 80064a6:	409a      	lsls	r2, r3
 80064a8:	693b      	ldr	r3, [r7, #16]
 80064aa:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80064b0:	f043 0204 	orr.w	r2, r3, #4
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80064bc:	2210      	movs	r2, #16
 80064be:	409a      	lsls	r2, r3
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	4013      	ands	r3, r2
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d043      	beq.n	8006550 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	f003 0308 	and.w	r3, r3, #8
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d03c      	beq.n	8006550 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80064da:	2210      	movs	r2, #16
 80064dc:	409a      	lsls	r2, r3
 80064de:	693b      	ldr	r3, [r7, #16]
 80064e0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d018      	beq.n	8006522 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d108      	bne.n	8006510 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006502:	2b00      	cmp	r3, #0
 8006504:	d024      	beq.n	8006550 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800650a:	6878      	ldr	r0, [r7, #4]
 800650c:	4798      	blx	r3
 800650e:	e01f      	b.n	8006550 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006514:	2b00      	cmp	r3, #0
 8006516:	d01b      	beq.n	8006550 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800651c:	6878      	ldr	r0, [r7, #4]
 800651e:	4798      	blx	r3
 8006520:	e016      	b.n	8006550 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800652c:	2b00      	cmp	r3, #0
 800652e:	d107      	bne.n	8006540 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	681a      	ldr	r2, [r3, #0]
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	f022 0208 	bic.w	r2, r2, #8
 800653e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006544:	2b00      	cmp	r3, #0
 8006546:	d003      	beq.n	8006550 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800654c:	6878      	ldr	r0, [r7, #4]
 800654e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006554:	2220      	movs	r2, #32
 8006556:	409a      	lsls	r2, r3
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	4013      	ands	r3, r2
 800655c:	2b00      	cmp	r3, #0
 800655e:	f000 808f 	beq.w	8006680 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	f003 0310 	and.w	r3, r3, #16
 800656c:	2b00      	cmp	r3, #0
 800656e:	f000 8087 	beq.w	8006680 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006576:	2220      	movs	r2, #32
 8006578:	409a      	lsls	r2, r3
 800657a:	693b      	ldr	r3, [r7, #16]
 800657c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8006584:	b2db      	uxtb	r3, r3
 8006586:	2b05      	cmp	r3, #5
 8006588:	d136      	bne.n	80065f8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	681a      	ldr	r2, [r3, #0]
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	f022 0216 	bic.w	r2, r2, #22
 8006598:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	695a      	ldr	r2, [r3, #20]
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80065a8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d103      	bne.n	80065ba <HAL_DMA_IRQHandler+0x1da>
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d007      	beq.n	80065ca <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	681a      	ldr	r2, [r3, #0]
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	f022 0208 	bic.w	r2, r2, #8
 80065c8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80065ce:	223f      	movs	r2, #63	@ 0x3f
 80065d0:	409a      	lsls	r2, r3
 80065d2:	693b      	ldr	r3, [r7, #16]
 80065d4:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	2201      	movs	r2, #1
 80065da:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	2200      	movs	r2, #0
 80065e2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d07e      	beq.n	80066ec <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80065f2:	6878      	ldr	r0, [r7, #4]
 80065f4:	4798      	blx	r3
        }
        return;
 80065f6:	e079      	b.n	80066ec <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006602:	2b00      	cmp	r3, #0
 8006604:	d01d      	beq.n	8006642 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8006610:	2b00      	cmp	r3, #0
 8006612:	d10d      	bne.n	8006630 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006618:	2b00      	cmp	r3, #0
 800661a:	d031      	beq.n	8006680 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006620:	6878      	ldr	r0, [r7, #4]
 8006622:	4798      	blx	r3
 8006624:	e02c      	b.n	8006680 <HAL_DMA_IRQHandler+0x2a0>
 8006626:	bf00      	nop
 8006628:	2000d114 	.word	0x2000d114
 800662c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006634:	2b00      	cmp	r3, #0
 8006636:	d023      	beq.n	8006680 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800663c:	6878      	ldr	r0, [r7, #4]
 800663e:	4798      	blx	r3
 8006640:	e01e      	b.n	8006680 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800664c:	2b00      	cmp	r3, #0
 800664e:	d10f      	bne.n	8006670 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	681a      	ldr	r2, [r3, #0]
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	f022 0210 	bic.w	r2, r2, #16
 800665e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	2201      	movs	r2, #1
 8006664:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	2200      	movs	r2, #0
 800666c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006674:	2b00      	cmp	r3, #0
 8006676:	d003      	beq.n	8006680 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800667c:	6878      	ldr	r0, [r7, #4]
 800667e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006684:	2b00      	cmp	r3, #0
 8006686:	d032      	beq.n	80066ee <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800668c:	f003 0301 	and.w	r3, r3, #1
 8006690:	2b00      	cmp	r3, #0
 8006692:	d022      	beq.n	80066da <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	2205      	movs	r2, #5
 8006698:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	681a      	ldr	r2, [r3, #0]
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	f022 0201 	bic.w	r2, r2, #1
 80066aa:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80066ac:	68bb      	ldr	r3, [r7, #8]
 80066ae:	3301      	adds	r3, #1
 80066b0:	60bb      	str	r3, [r7, #8]
 80066b2:	697a      	ldr	r2, [r7, #20]
 80066b4:	429a      	cmp	r2, r3
 80066b6:	d307      	bcc.n	80066c8 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	f003 0301 	and.w	r3, r3, #1
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d1f2      	bne.n	80066ac <HAL_DMA_IRQHandler+0x2cc>
 80066c6:	e000      	b.n	80066ca <HAL_DMA_IRQHandler+0x2ea>
          break;
 80066c8:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	2201      	movs	r2, #1
 80066ce:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	2200      	movs	r2, #0
 80066d6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d005      	beq.n	80066ee <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80066e6:	6878      	ldr	r0, [r7, #4]
 80066e8:	4798      	blx	r3
 80066ea:	e000      	b.n	80066ee <HAL_DMA_IRQHandler+0x30e>
        return;
 80066ec:	bf00      	nop
    }
  }
}
 80066ee:	3718      	adds	r7, #24
 80066f0:	46bd      	mov	sp, r7
 80066f2:	bd80      	pop	{r7, pc}

080066f4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80066f4:	b480      	push	{r7}
 80066f6:	b085      	sub	sp, #20
 80066f8:	af00      	add	r7, sp, #0
 80066fa:	60f8      	str	r0, [r7, #12]
 80066fc:	60b9      	str	r1, [r7, #8]
 80066fe:	607a      	str	r2, [r7, #4]
 8006700:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	681a      	ldr	r2, [r3, #0]
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8006710:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	683a      	ldr	r2, [r7, #0]
 8006718:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	689b      	ldr	r3, [r3, #8]
 800671e:	2b40      	cmp	r3, #64	@ 0x40
 8006720:	d108      	bne.n	8006734 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	687a      	ldr	r2, [r7, #4]
 8006728:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	68ba      	ldr	r2, [r7, #8]
 8006730:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8006732:	e007      	b.n	8006744 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	68ba      	ldr	r2, [r7, #8]
 800673a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	687a      	ldr	r2, [r7, #4]
 8006742:	60da      	str	r2, [r3, #12]
}
 8006744:	bf00      	nop
 8006746:	3714      	adds	r7, #20
 8006748:	46bd      	mov	sp, r7
 800674a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800674e:	4770      	bx	lr

08006750 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8006750:	b480      	push	{r7}
 8006752:	b085      	sub	sp, #20
 8006754:	af00      	add	r7, sp, #0
 8006756:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	b2db      	uxtb	r3, r3
 800675e:	3b10      	subs	r3, #16
 8006760:	4a14      	ldr	r2, [pc, #80]	@ (80067b4 <DMA_CalcBaseAndBitshift+0x64>)
 8006762:	fba2 2303 	umull	r2, r3, r2, r3
 8006766:	091b      	lsrs	r3, r3, #4
 8006768:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800676a:	4a13      	ldr	r2, [pc, #76]	@ (80067b8 <DMA_CalcBaseAndBitshift+0x68>)
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	4413      	add	r3, r2
 8006770:	781b      	ldrb	r3, [r3, #0]
 8006772:	461a      	mov	r2, r3
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	2b03      	cmp	r3, #3
 800677c:	d909      	bls.n	8006792 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8006786:	f023 0303 	bic.w	r3, r3, #3
 800678a:	1d1a      	adds	r2, r3, #4
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	659a      	str	r2, [r3, #88]	@ 0x58
 8006790:	e007      	b.n	80067a2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800679a:	f023 0303 	bic.w	r3, r3, #3
 800679e:	687a      	ldr	r2, [r7, #4]
 80067a0:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80067a6:	4618      	mov	r0, r3
 80067a8:	3714      	adds	r7, #20
 80067aa:	46bd      	mov	sp, r7
 80067ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067b0:	4770      	bx	lr
 80067b2:	bf00      	nop
 80067b4:	aaaaaaab 	.word	0xaaaaaaab
 80067b8:	08011adc 	.word	0x08011adc

080067bc <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80067bc:	b480      	push	{r7}
 80067be:	b085      	sub	sp, #20
 80067c0:	af00      	add	r7, sp, #0
 80067c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80067c4:	2300      	movs	r3, #0
 80067c6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80067cc:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	699b      	ldr	r3, [r3, #24]
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d11f      	bne.n	8006816 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80067d6:	68bb      	ldr	r3, [r7, #8]
 80067d8:	2b03      	cmp	r3, #3
 80067da:	d856      	bhi.n	800688a <DMA_CheckFifoParam+0xce>
 80067dc:	a201      	add	r2, pc, #4	@ (adr r2, 80067e4 <DMA_CheckFifoParam+0x28>)
 80067de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067e2:	bf00      	nop
 80067e4:	080067f5 	.word	0x080067f5
 80067e8:	08006807 	.word	0x08006807
 80067ec:	080067f5 	.word	0x080067f5
 80067f0:	0800688b 	.word	0x0800688b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80067f8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	d046      	beq.n	800688e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8006800:	2301      	movs	r3, #1
 8006802:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006804:	e043      	b.n	800688e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800680a:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800680e:	d140      	bne.n	8006892 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8006810:	2301      	movs	r3, #1
 8006812:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006814:	e03d      	b.n	8006892 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	699b      	ldr	r3, [r3, #24]
 800681a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800681e:	d121      	bne.n	8006864 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8006820:	68bb      	ldr	r3, [r7, #8]
 8006822:	2b03      	cmp	r3, #3
 8006824:	d837      	bhi.n	8006896 <DMA_CheckFifoParam+0xda>
 8006826:	a201      	add	r2, pc, #4	@ (adr r2, 800682c <DMA_CheckFifoParam+0x70>)
 8006828:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800682c:	0800683d 	.word	0x0800683d
 8006830:	08006843 	.word	0x08006843
 8006834:	0800683d 	.word	0x0800683d
 8006838:	08006855 	.word	0x08006855
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800683c:	2301      	movs	r3, #1
 800683e:	73fb      	strb	r3, [r7, #15]
      break;
 8006840:	e030      	b.n	80068a4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006846:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800684a:	2b00      	cmp	r3, #0
 800684c:	d025      	beq.n	800689a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800684e:	2301      	movs	r3, #1
 8006850:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006852:	e022      	b.n	800689a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006858:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800685c:	d11f      	bne.n	800689e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800685e:	2301      	movs	r3, #1
 8006860:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8006862:	e01c      	b.n	800689e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8006864:	68bb      	ldr	r3, [r7, #8]
 8006866:	2b02      	cmp	r3, #2
 8006868:	d903      	bls.n	8006872 <DMA_CheckFifoParam+0xb6>
 800686a:	68bb      	ldr	r3, [r7, #8]
 800686c:	2b03      	cmp	r3, #3
 800686e:	d003      	beq.n	8006878 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8006870:	e018      	b.n	80068a4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8006872:	2301      	movs	r3, #1
 8006874:	73fb      	strb	r3, [r7, #15]
      break;
 8006876:	e015      	b.n	80068a4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800687c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006880:	2b00      	cmp	r3, #0
 8006882:	d00e      	beq.n	80068a2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8006884:	2301      	movs	r3, #1
 8006886:	73fb      	strb	r3, [r7, #15]
      break;
 8006888:	e00b      	b.n	80068a2 <DMA_CheckFifoParam+0xe6>
      break;
 800688a:	bf00      	nop
 800688c:	e00a      	b.n	80068a4 <DMA_CheckFifoParam+0xe8>
      break;
 800688e:	bf00      	nop
 8006890:	e008      	b.n	80068a4 <DMA_CheckFifoParam+0xe8>
      break;
 8006892:	bf00      	nop
 8006894:	e006      	b.n	80068a4 <DMA_CheckFifoParam+0xe8>
      break;
 8006896:	bf00      	nop
 8006898:	e004      	b.n	80068a4 <DMA_CheckFifoParam+0xe8>
      break;
 800689a:	bf00      	nop
 800689c:	e002      	b.n	80068a4 <DMA_CheckFifoParam+0xe8>
      break;   
 800689e:	bf00      	nop
 80068a0:	e000      	b.n	80068a4 <DMA_CheckFifoParam+0xe8>
      break;
 80068a2:	bf00      	nop
    }
  } 
  
  return status; 
 80068a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80068a6:	4618      	mov	r0, r3
 80068a8:	3714      	adds	r7, #20
 80068aa:	46bd      	mov	sp, r7
 80068ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068b0:	4770      	bx	lr
 80068b2:	bf00      	nop

080068b4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80068b4:	b480      	push	{r7}
 80068b6:	b089      	sub	sp, #36	@ 0x24
 80068b8:	af00      	add	r7, sp, #0
 80068ba:	6078      	str	r0, [r7, #4]
 80068bc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80068be:	2300      	movs	r3, #0
 80068c0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80068c2:	2300      	movs	r3, #0
 80068c4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80068c6:	2300      	movs	r3, #0
 80068c8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80068ca:	2300      	movs	r3, #0
 80068cc:	61fb      	str	r3, [r7, #28]
 80068ce:	e159      	b.n	8006b84 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80068d0:	2201      	movs	r2, #1
 80068d2:	69fb      	ldr	r3, [r7, #28]
 80068d4:	fa02 f303 	lsl.w	r3, r2, r3
 80068d8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80068da:	683b      	ldr	r3, [r7, #0]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	697a      	ldr	r2, [r7, #20]
 80068e0:	4013      	ands	r3, r2
 80068e2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80068e4:	693a      	ldr	r2, [r7, #16]
 80068e6:	697b      	ldr	r3, [r7, #20]
 80068e8:	429a      	cmp	r2, r3
 80068ea:	f040 8148 	bne.w	8006b7e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80068ee:	683b      	ldr	r3, [r7, #0]
 80068f0:	685b      	ldr	r3, [r3, #4]
 80068f2:	f003 0303 	and.w	r3, r3, #3
 80068f6:	2b01      	cmp	r3, #1
 80068f8:	d005      	beq.n	8006906 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80068fa:	683b      	ldr	r3, [r7, #0]
 80068fc:	685b      	ldr	r3, [r3, #4]
 80068fe:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8006902:	2b02      	cmp	r3, #2
 8006904:	d130      	bne.n	8006968 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	689b      	ldr	r3, [r3, #8]
 800690a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800690c:	69fb      	ldr	r3, [r7, #28]
 800690e:	005b      	lsls	r3, r3, #1
 8006910:	2203      	movs	r2, #3
 8006912:	fa02 f303 	lsl.w	r3, r2, r3
 8006916:	43db      	mvns	r3, r3
 8006918:	69ba      	ldr	r2, [r7, #24]
 800691a:	4013      	ands	r3, r2
 800691c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800691e:	683b      	ldr	r3, [r7, #0]
 8006920:	68da      	ldr	r2, [r3, #12]
 8006922:	69fb      	ldr	r3, [r7, #28]
 8006924:	005b      	lsls	r3, r3, #1
 8006926:	fa02 f303 	lsl.w	r3, r2, r3
 800692a:	69ba      	ldr	r2, [r7, #24]
 800692c:	4313      	orrs	r3, r2
 800692e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	69ba      	ldr	r2, [r7, #24]
 8006934:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	685b      	ldr	r3, [r3, #4]
 800693a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800693c:	2201      	movs	r2, #1
 800693e:	69fb      	ldr	r3, [r7, #28]
 8006940:	fa02 f303 	lsl.w	r3, r2, r3
 8006944:	43db      	mvns	r3, r3
 8006946:	69ba      	ldr	r2, [r7, #24]
 8006948:	4013      	ands	r3, r2
 800694a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800694c:	683b      	ldr	r3, [r7, #0]
 800694e:	685b      	ldr	r3, [r3, #4]
 8006950:	091b      	lsrs	r3, r3, #4
 8006952:	f003 0201 	and.w	r2, r3, #1
 8006956:	69fb      	ldr	r3, [r7, #28]
 8006958:	fa02 f303 	lsl.w	r3, r2, r3
 800695c:	69ba      	ldr	r2, [r7, #24]
 800695e:	4313      	orrs	r3, r2
 8006960:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	69ba      	ldr	r2, [r7, #24]
 8006966:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006968:	683b      	ldr	r3, [r7, #0]
 800696a:	685b      	ldr	r3, [r3, #4]
 800696c:	f003 0303 	and.w	r3, r3, #3
 8006970:	2b03      	cmp	r3, #3
 8006972:	d017      	beq.n	80069a4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	68db      	ldr	r3, [r3, #12]
 8006978:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800697a:	69fb      	ldr	r3, [r7, #28]
 800697c:	005b      	lsls	r3, r3, #1
 800697e:	2203      	movs	r2, #3
 8006980:	fa02 f303 	lsl.w	r3, r2, r3
 8006984:	43db      	mvns	r3, r3
 8006986:	69ba      	ldr	r2, [r7, #24]
 8006988:	4013      	ands	r3, r2
 800698a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800698c:	683b      	ldr	r3, [r7, #0]
 800698e:	689a      	ldr	r2, [r3, #8]
 8006990:	69fb      	ldr	r3, [r7, #28]
 8006992:	005b      	lsls	r3, r3, #1
 8006994:	fa02 f303 	lsl.w	r3, r2, r3
 8006998:	69ba      	ldr	r2, [r7, #24]
 800699a:	4313      	orrs	r3, r2
 800699c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	69ba      	ldr	r2, [r7, #24]
 80069a2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80069a4:	683b      	ldr	r3, [r7, #0]
 80069a6:	685b      	ldr	r3, [r3, #4]
 80069a8:	f003 0303 	and.w	r3, r3, #3
 80069ac:	2b02      	cmp	r3, #2
 80069ae:	d123      	bne.n	80069f8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80069b0:	69fb      	ldr	r3, [r7, #28]
 80069b2:	08da      	lsrs	r2, r3, #3
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	3208      	adds	r2, #8
 80069b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80069bc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80069be:	69fb      	ldr	r3, [r7, #28]
 80069c0:	f003 0307 	and.w	r3, r3, #7
 80069c4:	009b      	lsls	r3, r3, #2
 80069c6:	220f      	movs	r2, #15
 80069c8:	fa02 f303 	lsl.w	r3, r2, r3
 80069cc:	43db      	mvns	r3, r3
 80069ce:	69ba      	ldr	r2, [r7, #24]
 80069d0:	4013      	ands	r3, r2
 80069d2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80069d4:	683b      	ldr	r3, [r7, #0]
 80069d6:	691a      	ldr	r2, [r3, #16]
 80069d8:	69fb      	ldr	r3, [r7, #28]
 80069da:	f003 0307 	and.w	r3, r3, #7
 80069de:	009b      	lsls	r3, r3, #2
 80069e0:	fa02 f303 	lsl.w	r3, r2, r3
 80069e4:	69ba      	ldr	r2, [r7, #24]
 80069e6:	4313      	orrs	r3, r2
 80069e8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80069ea:	69fb      	ldr	r3, [r7, #28]
 80069ec:	08da      	lsrs	r2, r3, #3
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	3208      	adds	r2, #8
 80069f2:	69b9      	ldr	r1, [r7, #24]
 80069f4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80069fe:	69fb      	ldr	r3, [r7, #28]
 8006a00:	005b      	lsls	r3, r3, #1
 8006a02:	2203      	movs	r2, #3
 8006a04:	fa02 f303 	lsl.w	r3, r2, r3
 8006a08:	43db      	mvns	r3, r3
 8006a0a:	69ba      	ldr	r2, [r7, #24]
 8006a0c:	4013      	ands	r3, r2
 8006a0e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006a10:	683b      	ldr	r3, [r7, #0]
 8006a12:	685b      	ldr	r3, [r3, #4]
 8006a14:	f003 0203 	and.w	r2, r3, #3
 8006a18:	69fb      	ldr	r3, [r7, #28]
 8006a1a:	005b      	lsls	r3, r3, #1
 8006a1c:	fa02 f303 	lsl.w	r3, r2, r3
 8006a20:	69ba      	ldr	r2, [r7, #24]
 8006a22:	4313      	orrs	r3, r2
 8006a24:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	69ba      	ldr	r2, [r7, #24]
 8006a2a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8006a2c:	683b      	ldr	r3, [r7, #0]
 8006a2e:	685b      	ldr	r3, [r3, #4]
 8006a30:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	f000 80a2 	beq.w	8006b7e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006a3a:	2300      	movs	r3, #0
 8006a3c:	60fb      	str	r3, [r7, #12]
 8006a3e:	4b57      	ldr	r3, [pc, #348]	@ (8006b9c <HAL_GPIO_Init+0x2e8>)
 8006a40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006a42:	4a56      	ldr	r2, [pc, #344]	@ (8006b9c <HAL_GPIO_Init+0x2e8>)
 8006a44:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8006a48:	6453      	str	r3, [r2, #68]	@ 0x44
 8006a4a:	4b54      	ldr	r3, [pc, #336]	@ (8006b9c <HAL_GPIO_Init+0x2e8>)
 8006a4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006a4e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006a52:	60fb      	str	r3, [r7, #12]
 8006a54:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8006a56:	4a52      	ldr	r2, [pc, #328]	@ (8006ba0 <HAL_GPIO_Init+0x2ec>)
 8006a58:	69fb      	ldr	r3, [r7, #28]
 8006a5a:	089b      	lsrs	r3, r3, #2
 8006a5c:	3302      	adds	r3, #2
 8006a5e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006a62:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8006a64:	69fb      	ldr	r3, [r7, #28]
 8006a66:	f003 0303 	and.w	r3, r3, #3
 8006a6a:	009b      	lsls	r3, r3, #2
 8006a6c:	220f      	movs	r2, #15
 8006a6e:	fa02 f303 	lsl.w	r3, r2, r3
 8006a72:	43db      	mvns	r3, r3
 8006a74:	69ba      	ldr	r2, [r7, #24]
 8006a76:	4013      	ands	r3, r2
 8006a78:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	4a49      	ldr	r2, [pc, #292]	@ (8006ba4 <HAL_GPIO_Init+0x2f0>)
 8006a7e:	4293      	cmp	r3, r2
 8006a80:	d019      	beq.n	8006ab6 <HAL_GPIO_Init+0x202>
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	4a48      	ldr	r2, [pc, #288]	@ (8006ba8 <HAL_GPIO_Init+0x2f4>)
 8006a86:	4293      	cmp	r3, r2
 8006a88:	d013      	beq.n	8006ab2 <HAL_GPIO_Init+0x1fe>
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	4a47      	ldr	r2, [pc, #284]	@ (8006bac <HAL_GPIO_Init+0x2f8>)
 8006a8e:	4293      	cmp	r3, r2
 8006a90:	d00d      	beq.n	8006aae <HAL_GPIO_Init+0x1fa>
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	4a46      	ldr	r2, [pc, #280]	@ (8006bb0 <HAL_GPIO_Init+0x2fc>)
 8006a96:	4293      	cmp	r3, r2
 8006a98:	d007      	beq.n	8006aaa <HAL_GPIO_Init+0x1f6>
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	4a45      	ldr	r2, [pc, #276]	@ (8006bb4 <HAL_GPIO_Init+0x300>)
 8006a9e:	4293      	cmp	r3, r2
 8006aa0:	d101      	bne.n	8006aa6 <HAL_GPIO_Init+0x1f2>
 8006aa2:	2304      	movs	r3, #4
 8006aa4:	e008      	b.n	8006ab8 <HAL_GPIO_Init+0x204>
 8006aa6:	2307      	movs	r3, #7
 8006aa8:	e006      	b.n	8006ab8 <HAL_GPIO_Init+0x204>
 8006aaa:	2303      	movs	r3, #3
 8006aac:	e004      	b.n	8006ab8 <HAL_GPIO_Init+0x204>
 8006aae:	2302      	movs	r3, #2
 8006ab0:	e002      	b.n	8006ab8 <HAL_GPIO_Init+0x204>
 8006ab2:	2301      	movs	r3, #1
 8006ab4:	e000      	b.n	8006ab8 <HAL_GPIO_Init+0x204>
 8006ab6:	2300      	movs	r3, #0
 8006ab8:	69fa      	ldr	r2, [r7, #28]
 8006aba:	f002 0203 	and.w	r2, r2, #3
 8006abe:	0092      	lsls	r2, r2, #2
 8006ac0:	4093      	lsls	r3, r2
 8006ac2:	69ba      	ldr	r2, [r7, #24]
 8006ac4:	4313      	orrs	r3, r2
 8006ac6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006ac8:	4935      	ldr	r1, [pc, #212]	@ (8006ba0 <HAL_GPIO_Init+0x2ec>)
 8006aca:	69fb      	ldr	r3, [r7, #28]
 8006acc:	089b      	lsrs	r3, r3, #2
 8006ace:	3302      	adds	r3, #2
 8006ad0:	69ba      	ldr	r2, [r7, #24]
 8006ad2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8006ad6:	4b38      	ldr	r3, [pc, #224]	@ (8006bb8 <HAL_GPIO_Init+0x304>)
 8006ad8:	689b      	ldr	r3, [r3, #8]
 8006ada:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006adc:	693b      	ldr	r3, [r7, #16]
 8006ade:	43db      	mvns	r3, r3
 8006ae0:	69ba      	ldr	r2, [r7, #24]
 8006ae2:	4013      	ands	r3, r2
 8006ae4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8006ae6:	683b      	ldr	r3, [r7, #0]
 8006ae8:	685b      	ldr	r3, [r3, #4]
 8006aea:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d003      	beq.n	8006afa <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8006af2:	69ba      	ldr	r2, [r7, #24]
 8006af4:	693b      	ldr	r3, [r7, #16]
 8006af6:	4313      	orrs	r3, r2
 8006af8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8006afa:	4a2f      	ldr	r2, [pc, #188]	@ (8006bb8 <HAL_GPIO_Init+0x304>)
 8006afc:	69bb      	ldr	r3, [r7, #24]
 8006afe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8006b00:	4b2d      	ldr	r3, [pc, #180]	@ (8006bb8 <HAL_GPIO_Init+0x304>)
 8006b02:	68db      	ldr	r3, [r3, #12]
 8006b04:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006b06:	693b      	ldr	r3, [r7, #16]
 8006b08:	43db      	mvns	r3, r3
 8006b0a:	69ba      	ldr	r2, [r7, #24]
 8006b0c:	4013      	ands	r3, r2
 8006b0e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8006b10:	683b      	ldr	r3, [r7, #0]
 8006b12:	685b      	ldr	r3, [r3, #4]
 8006b14:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	d003      	beq.n	8006b24 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8006b1c:	69ba      	ldr	r2, [r7, #24]
 8006b1e:	693b      	ldr	r3, [r7, #16]
 8006b20:	4313      	orrs	r3, r2
 8006b22:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8006b24:	4a24      	ldr	r2, [pc, #144]	@ (8006bb8 <HAL_GPIO_Init+0x304>)
 8006b26:	69bb      	ldr	r3, [r7, #24]
 8006b28:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8006b2a:	4b23      	ldr	r3, [pc, #140]	@ (8006bb8 <HAL_GPIO_Init+0x304>)
 8006b2c:	685b      	ldr	r3, [r3, #4]
 8006b2e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006b30:	693b      	ldr	r3, [r7, #16]
 8006b32:	43db      	mvns	r3, r3
 8006b34:	69ba      	ldr	r2, [r7, #24]
 8006b36:	4013      	ands	r3, r2
 8006b38:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8006b3a:	683b      	ldr	r3, [r7, #0]
 8006b3c:	685b      	ldr	r3, [r3, #4]
 8006b3e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d003      	beq.n	8006b4e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8006b46:	69ba      	ldr	r2, [r7, #24]
 8006b48:	693b      	ldr	r3, [r7, #16]
 8006b4a:	4313      	orrs	r3, r2
 8006b4c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8006b4e:	4a1a      	ldr	r2, [pc, #104]	@ (8006bb8 <HAL_GPIO_Init+0x304>)
 8006b50:	69bb      	ldr	r3, [r7, #24]
 8006b52:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8006b54:	4b18      	ldr	r3, [pc, #96]	@ (8006bb8 <HAL_GPIO_Init+0x304>)
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006b5a:	693b      	ldr	r3, [r7, #16]
 8006b5c:	43db      	mvns	r3, r3
 8006b5e:	69ba      	ldr	r2, [r7, #24]
 8006b60:	4013      	ands	r3, r2
 8006b62:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8006b64:	683b      	ldr	r3, [r7, #0]
 8006b66:	685b      	ldr	r3, [r3, #4]
 8006b68:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d003      	beq.n	8006b78 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8006b70:	69ba      	ldr	r2, [r7, #24]
 8006b72:	693b      	ldr	r3, [r7, #16]
 8006b74:	4313      	orrs	r3, r2
 8006b76:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8006b78:	4a0f      	ldr	r2, [pc, #60]	@ (8006bb8 <HAL_GPIO_Init+0x304>)
 8006b7a:	69bb      	ldr	r3, [r7, #24]
 8006b7c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006b7e:	69fb      	ldr	r3, [r7, #28]
 8006b80:	3301      	adds	r3, #1
 8006b82:	61fb      	str	r3, [r7, #28]
 8006b84:	69fb      	ldr	r3, [r7, #28]
 8006b86:	2b0f      	cmp	r3, #15
 8006b88:	f67f aea2 	bls.w	80068d0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8006b8c:	bf00      	nop
 8006b8e:	bf00      	nop
 8006b90:	3724      	adds	r7, #36	@ 0x24
 8006b92:	46bd      	mov	sp, r7
 8006b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b98:	4770      	bx	lr
 8006b9a:	bf00      	nop
 8006b9c:	40023800 	.word	0x40023800
 8006ba0:	40013800 	.word	0x40013800
 8006ba4:	40020000 	.word	0x40020000
 8006ba8:	40020400 	.word	0x40020400
 8006bac:	40020800 	.word	0x40020800
 8006bb0:	40020c00 	.word	0x40020c00
 8006bb4:	40021000 	.word	0x40021000
 8006bb8:	40013c00 	.word	0x40013c00

08006bbc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8006bbc:	b480      	push	{r7}
 8006bbe:	b085      	sub	sp, #20
 8006bc0:	af00      	add	r7, sp, #0
 8006bc2:	6078      	str	r0, [r7, #4]
 8006bc4:	460b      	mov	r3, r1
 8006bc6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	691a      	ldr	r2, [r3, #16]
 8006bcc:	887b      	ldrh	r3, [r7, #2]
 8006bce:	4013      	ands	r3, r2
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	d002      	beq.n	8006bda <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8006bd4:	2301      	movs	r3, #1
 8006bd6:	73fb      	strb	r3, [r7, #15]
 8006bd8:	e001      	b.n	8006bde <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8006bda:	2300      	movs	r3, #0
 8006bdc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8006bde:	7bfb      	ldrb	r3, [r7, #15]
}
 8006be0:	4618      	mov	r0, r3
 8006be2:	3714      	adds	r7, #20
 8006be4:	46bd      	mov	sp, r7
 8006be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bea:	4770      	bx	lr

08006bec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006bec:	b480      	push	{r7}
 8006bee:	b083      	sub	sp, #12
 8006bf0:	af00      	add	r7, sp, #0
 8006bf2:	6078      	str	r0, [r7, #4]
 8006bf4:	460b      	mov	r3, r1
 8006bf6:	807b      	strh	r3, [r7, #2]
 8006bf8:	4613      	mov	r3, r2
 8006bfa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8006bfc:	787b      	ldrb	r3, [r7, #1]
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d003      	beq.n	8006c0a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006c02:	887a      	ldrh	r2, [r7, #2]
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8006c08:	e003      	b.n	8006c12 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8006c0a:	887b      	ldrh	r3, [r7, #2]
 8006c0c:	041a      	lsls	r2, r3, #16
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	619a      	str	r2, [r3, #24]
}
 8006c12:	bf00      	nop
 8006c14:	370c      	adds	r7, #12
 8006c16:	46bd      	mov	sp, r7
 8006c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c1c:	4770      	bx	lr
	...

08006c20 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8006c20:	b580      	push	{r7, lr}
 8006c22:	b082      	sub	sp, #8
 8006c24:	af00      	add	r7, sp, #0
 8006c26:	4603      	mov	r3, r0
 8006c28:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8006c2a:	4b08      	ldr	r3, [pc, #32]	@ (8006c4c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006c2c:	695a      	ldr	r2, [r3, #20]
 8006c2e:	88fb      	ldrh	r3, [r7, #6]
 8006c30:	4013      	ands	r3, r2
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	d006      	beq.n	8006c44 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8006c36:	4a05      	ldr	r2, [pc, #20]	@ (8006c4c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006c38:	88fb      	ldrh	r3, [r7, #6]
 8006c3a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8006c3c:	88fb      	ldrh	r3, [r7, #6]
 8006c3e:	4618      	mov	r0, r3
 8006c40:	f000 f806 	bl	8006c50 <HAL_GPIO_EXTI_Callback>
  }
}
 8006c44:	bf00      	nop
 8006c46:	3708      	adds	r7, #8
 8006c48:	46bd      	mov	sp, r7
 8006c4a:	bd80      	pop	{r7, pc}
 8006c4c:	40013c00 	.word	0x40013c00

08006c50 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8006c50:	b480      	push	{r7}
 8006c52:	b083      	sub	sp, #12
 8006c54:	af00      	add	r7, sp, #0
 8006c56:	4603      	mov	r3, r0
 8006c58:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8006c5a:	bf00      	nop
 8006c5c:	370c      	adds	r7, #12
 8006c5e:	46bd      	mov	sp, r7
 8006c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c64:	4770      	bx	lr
	...

08006c68 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8006c68:	b580      	push	{r7, lr}
 8006c6a:	b088      	sub	sp, #32
 8006c6c:	af00      	add	r7, sp, #0
 8006c6e:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	d101      	bne.n	8006c7a <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8006c76:	2301      	movs	r3, #1
 8006c78:	e128      	b.n	8006ecc <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006c80:	b2db      	uxtb	r3, r3
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d109      	bne.n	8006c9a <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	2200      	movs	r2, #0
 8006c8a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	4a90      	ldr	r2, [pc, #576]	@ (8006ed4 <HAL_I2S_Init+0x26c>)
 8006c92:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8006c94:	6878      	ldr	r0, [r7, #4]
 8006c96:	f7fa fcd7 	bl	8001648 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	2202      	movs	r2, #2
 8006c9e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	69db      	ldr	r3, [r3, #28]
 8006ca8:	687a      	ldr	r2, [r7, #4]
 8006caa:	6812      	ldr	r2, [r2, #0]
 8006cac:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8006cb0:	f023 030f 	bic.w	r3, r3, #15
 8006cb4:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	2202      	movs	r2, #2
 8006cbc:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	695b      	ldr	r3, [r3, #20]
 8006cc2:	2b02      	cmp	r3, #2
 8006cc4:	d060      	beq.n	8006d88 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	68db      	ldr	r3, [r3, #12]
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d102      	bne.n	8006cd4 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8006cce:	2310      	movs	r3, #16
 8006cd0:	617b      	str	r3, [r7, #20]
 8006cd2:	e001      	b.n	8006cd8 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8006cd4:	2320      	movs	r3, #32
 8006cd6:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	689b      	ldr	r3, [r3, #8]
 8006cdc:	2b20      	cmp	r3, #32
 8006cde:	d802      	bhi.n	8006ce6 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8006ce0:	697b      	ldr	r3, [r7, #20]
 8006ce2:	005b      	lsls	r3, r3, #1
 8006ce4:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8006ce6:	2001      	movs	r0, #1
 8006ce8:	f001 fb02 	bl	80082f0 <HAL_RCCEx_GetPeriphCLKFreq>
 8006cec:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	691b      	ldr	r3, [r3, #16]
 8006cf2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006cf6:	d125      	bne.n	8006d44 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	68db      	ldr	r3, [r3, #12]
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	d010      	beq.n	8006d22 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8006d00:	697b      	ldr	r3, [r7, #20]
 8006d02:	009b      	lsls	r3, r3, #2
 8006d04:	68fa      	ldr	r2, [r7, #12]
 8006d06:	fbb2 f2f3 	udiv	r2, r2, r3
 8006d0a:	4613      	mov	r3, r2
 8006d0c:	009b      	lsls	r3, r3, #2
 8006d0e:	4413      	add	r3, r2
 8006d10:	005b      	lsls	r3, r3, #1
 8006d12:	461a      	mov	r2, r3
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	695b      	ldr	r3, [r3, #20]
 8006d18:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d1c:	3305      	adds	r3, #5
 8006d1e:	613b      	str	r3, [r7, #16]
 8006d20:	e01f      	b.n	8006d62 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8006d22:	697b      	ldr	r3, [r7, #20]
 8006d24:	00db      	lsls	r3, r3, #3
 8006d26:	68fa      	ldr	r2, [r7, #12]
 8006d28:	fbb2 f2f3 	udiv	r2, r2, r3
 8006d2c:	4613      	mov	r3, r2
 8006d2e:	009b      	lsls	r3, r3, #2
 8006d30:	4413      	add	r3, r2
 8006d32:	005b      	lsls	r3, r3, #1
 8006d34:	461a      	mov	r2, r3
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	695b      	ldr	r3, [r3, #20]
 8006d3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d3e:	3305      	adds	r3, #5
 8006d40:	613b      	str	r3, [r7, #16]
 8006d42:	e00e      	b.n	8006d62 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8006d44:	68fa      	ldr	r2, [r7, #12]
 8006d46:	697b      	ldr	r3, [r7, #20]
 8006d48:	fbb2 f2f3 	udiv	r2, r2, r3
 8006d4c:	4613      	mov	r3, r2
 8006d4e:	009b      	lsls	r3, r3, #2
 8006d50:	4413      	add	r3, r2
 8006d52:	005b      	lsls	r3, r3, #1
 8006d54:	461a      	mov	r2, r3
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	695b      	ldr	r3, [r3, #20]
 8006d5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d5e:	3305      	adds	r3, #5
 8006d60:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8006d62:	693b      	ldr	r3, [r7, #16]
 8006d64:	4a5c      	ldr	r2, [pc, #368]	@ (8006ed8 <HAL_I2S_Init+0x270>)
 8006d66:	fba2 2303 	umull	r2, r3, r2, r3
 8006d6a:	08db      	lsrs	r3, r3, #3
 8006d6c:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8006d6e:	693b      	ldr	r3, [r7, #16]
 8006d70:	f003 0301 	and.w	r3, r3, #1
 8006d74:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8006d76:	693a      	ldr	r2, [r7, #16]
 8006d78:	69bb      	ldr	r3, [r7, #24]
 8006d7a:	1ad3      	subs	r3, r2, r3
 8006d7c:	085b      	lsrs	r3, r3, #1
 8006d7e:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8006d80:	69bb      	ldr	r3, [r7, #24]
 8006d82:	021b      	lsls	r3, r3, #8
 8006d84:	61bb      	str	r3, [r7, #24]
 8006d86:	e003      	b.n	8006d90 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8006d88:	2302      	movs	r3, #2
 8006d8a:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8006d8c:	2300      	movs	r3, #0
 8006d8e:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8006d90:	69fb      	ldr	r3, [r7, #28]
 8006d92:	2b01      	cmp	r3, #1
 8006d94:	d902      	bls.n	8006d9c <HAL_I2S_Init+0x134>
 8006d96:	69fb      	ldr	r3, [r7, #28]
 8006d98:	2bff      	cmp	r3, #255	@ 0xff
 8006d9a:	d907      	bls.n	8006dac <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006da0:	f043 0210 	orr.w	r2, r3, #16
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	645a      	str	r2, [r3, #68]	@ 0x44
    return  HAL_ERROR;
 8006da8:	2301      	movs	r3, #1
 8006daa:	e08f      	b.n	8006ecc <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	691a      	ldr	r2, [r3, #16]
 8006db0:	69bb      	ldr	r3, [r7, #24]
 8006db2:	ea42 0103 	orr.w	r1, r2, r3
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	69fa      	ldr	r2, [r7, #28]
 8006dbc:	430a      	orrs	r2, r1
 8006dbe:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	69db      	ldr	r3, [r3, #28]
 8006dc6:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8006dca:	f023 030f 	bic.w	r3, r3, #15
 8006dce:	687a      	ldr	r2, [r7, #4]
 8006dd0:	6851      	ldr	r1, [r2, #4]
 8006dd2:	687a      	ldr	r2, [r7, #4]
 8006dd4:	6892      	ldr	r2, [r2, #8]
 8006dd6:	4311      	orrs	r1, r2
 8006dd8:	687a      	ldr	r2, [r7, #4]
 8006dda:	68d2      	ldr	r2, [r2, #12]
 8006ddc:	4311      	orrs	r1, r2
 8006dde:	687a      	ldr	r2, [r7, #4]
 8006de0:	6992      	ldr	r2, [r2, #24]
 8006de2:	430a      	orrs	r2, r1
 8006de4:	431a      	orrs	r2, r3
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006dee:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	6a1b      	ldr	r3, [r3, #32]
 8006df4:	2b01      	cmp	r3, #1
 8006df6:	d161      	bne.n	8006ebc <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	4a38      	ldr	r2, [pc, #224]	@ (8006edc <HAL_I2S_Init+0x274>)
 8006dfc:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	4a37      	ldr	r2, [pc, #220]	@ (8006ee0 <HAL_I2S_Init+0x278>)
 8006e04:	4293      	cmp	r3, r2
 8006e06:	d101      	bne.n	8006e0c <HAL_I2S_Init+0x1a4>
 8006e08:	4b36      	ldr	r3, [pc, #216]	@ (8006ee4 <HAL_I2S_Init+0x27c>)
 8006e0a:	e001      	b.n	8006e10 <HAL_I2S_Init+0x1a8>
 8006e0c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006e10:	69db      	ldr	r3, [r3, #28]
 8006e12:	687a      	ldr	r2, [r7, #4]
 8006e14:	6812      	ldr	r2, [r2, #0]
 8006e16:	4932      	ldr	r1, [pc, #200]	@ (8006ee0 <HAL_I2S_Init+0x278>)
 8006e18:	428a      	cmp	r2, r1
 8006e1a:	d101      	bne.n	8006e20 <HAL_I2S_Init+0x1b8>
 8006e1c:	4a31      	ldr	r2, [pc, #196]	@ (8006ee4 <HAL_I2S_Init+0x27c>)
 8006e1e:	e001      	b.n	8006e24 <HAL_I2S_Init+0x1bc>
 8006e20:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 8006e24:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8006e28:	f023 030f 	bic.w	r3, r3, #15
 8006e2c:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	4a2b      	ldr	r2, [pc, #172]	@ (8006ee0 <HAL_I2S_Init+0x278>)
 8006e34:	4293      	cmp	r3, r2
 8006e36:	d101      	bne.n	8006e3c <HAL_I2S_Init+0x1d4>
 8006e38:	4b2a      	ldr	r3, [pc, #168]	@ (8006ee4 <HAL_I2S_Init+0x27c>)
 8006e3a:	e001      	b.n	8006e40 <HAL_I2S_Init+0x1d8>
 8006e3c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006e40:	2202      	movs	r2, #2
 8006e42:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	4a25      	ldr	r2, [pc, #148]	@ (8006ee0 <HAL_I2S_Init+0x278>)
 8006e4a:	4293      	cmp	r3, r2
 8006e4c:	d101      	bne.n	8006e52 <HAL_I2S_Init+0x1ea>
 8006e4e:	4b25      	ldr	r3, [pc, #148]	@ (8006ee4 <HAL_I2S_Init+0x27c>)
 8006e50:	e001      	b.n	8006e56 <HAL_I2S_Init+0x1ee>
 8006e52:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006e56:	69db      	ldr	r3, [r3, #28]
 8006e58:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	685b      	ldr	r3, [r3, #4]
 8006e5e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006e62:	d003      	beq.n	8006e6c <HAL_I2S_Init+0x204>
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	685b      	ldr	r3, [r3, #4]
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	d103      	bne.n	8006e74 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8006e6c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8006e70:	613b      	str	r3, [r7, #16]
 8006e72:	e001      	b.n	8006e78 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8006e74:	2300      	movs	r3, #0
 8006e76:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8006e78:	693b      	ldr	r3, [r7, #16]
 8006e7a:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	689b      	ldr	r3, [r3, #8]
 8006e80:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8006e82:	4313      	orrs	r3, r2
 8006e84:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	68db      	ldr	r3, [r3, #12]
 8006e8a:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8006e8c:	4313      	orrs	r3, r2
 8006e8e:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	699b      	ldr	r3, [r3, #24]
 8006e94:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8006e96:	4313      	orrs	r3, r2
 8006e98:	b29a      	uxth	r2, r3
 8006e9a:	897b      	ldrh	r3, [r7, #10]
 8006e9c:	4313      	orrs	r3, r2
 8006e9e:	b29b      	uxth	r3, r3
 8006ea0:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8006ea4:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	4a0d      	ldr	r2, [pc, #52]	@ (8006ee0 <HAL_I2S_Init+0x278>)
 8006eac:	4293      	cmp	r3, r2
 8006eae:	d101      	bne.n	8006eb4 <HAL_I2S_Init+0x24c>
 8006eb0:	4b0c      	ldr	r3, [pc, #48]	@ (8006ee4 <HAL_I2S_Init+0x27c>)
 8006eb2:	e001      	b.n	8006eb8 <HAL_I2S_Init+0x250>
 8006eb4:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006eb8:	897a      	ldrh	r2, [r7, #10]
 8006eba:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	2200      	movs	r2, #0
 8006ec0:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	2201      	movs	r2, #1
 8006ec6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  return HAL_OK;
 8006eca:	2300      	movs	r3, #0
}
 8006ecc:	4618      	mov	r0, r3
 8006ece:	3720      	adds	r7, #32
 8006ed0:	46bd      	mov	sp, r7
 8006ed2:	bd80      	pop	{r7, pc}
 8006ed4:	080071a5 	.word	0x080071a5
 8006ed8:	cccccccd 	.word	0xcccccccd
 8006edc:	0800732d 	.word	0x0800732d
 8006ee0:	40003800 	.word	0x40003800
 8006ee4:	40003400 	.word	0x40003400

08006ee8 <HAL_I2S_Transmit>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Transmit(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006ee8:	b580      	push	{r7, lr}
 8006eea:	b086      	sub	sp, #24
 8006eec:	af00      	add	r7, sp, #0
 8006eee:	60f8      	str	r0, [r7, #12]
 8006ef0:	60b9      	str	r1, [r7, #8]
 8006ef2:	603b      	str	r3, [r7, #0]
 8006ef4:	4613      	mov	r3, r2
 8006ef6:	80fb      	strh	r3, [r7, #6]
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 8006ef8:	68bb      	ldr	r3, [r7, #8]
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d002      	beq.n	8006f04 <HAL_I2S_Transmit+0x1c>
 8006efe:	88fb      	ldrh	r3, [r7, #6]
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d101      	bne.n	8006f08 <HAL_I2S_Transmit+0x20>
  {
    return  HAL_ERROR;
 8006f04:	2301      	movs	r3, #1
 8006f06:	e0d8      	b.n	80070ba <HAL_I2S_Transmit+0x1d2>
  }

  if (hi2s->State != HAL_I2S_STATE_READY)
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006f0e:	b2db      	uxtb	r3, r3
 8006f10:	2b01      	cmp	r3, #1
 8006f12:	d001      	beq.n	8006f18 <HAL_I2S_Transmit+0x30>
  {
    return HAL_BUSY;
 8006f14:	2302      	movs	r3, #2
 8006f16:	e0d0      	b.n	80070ba <HAL_I2S_Transmit+0x1d2>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006f1e:	b2db      	uxtb	r3, r3
 8006f20:	2b01      	cmp	r3, #1
 8006f22:	d101      	bne.n	8006f28 <HAL_I2S_Transmit+0x40>
 8006f24:	2302      	movs	r3, #2
 8006f26:	e0c8      	b.n	80070ba <HAL_I2S_Transmit+0x1d2>
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	2201      	movs	r2, #1
 8006f2c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_TX;
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	2203      	movs	r2, #3
 8006f34:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	2200      	movs	r2, #0
 8006f3c:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2s->pTxBuffPtr = pData;
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	68ba      	ldr	r2, [r7, #8]
 8006f42:	625a      	str	r2, [r3, #36]	@ 0x24

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	69db      	ldr	r3, [r3, #28]
 8006f4a:	f003 0307 	and.w	r3, r3, #7
 8006f4e:	617b      	str	r3, [r7, #20]

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 8006f50:	697b      	ldr	r3, [r7, #20]
 8006f52:	2b03      	cmp	r3, #3
 8006f54:	d002      	beq.n	8006f5c <HAL_I2S_Transmit+0x74>
 8006f56:	697b      	ldr	r3, [r7, #20]
 8006f58:	2b05      	cmp	r3, #5
 8006f5a:	d10a      	bne.n	8006f72 <HAL_I2S_Transmit+0x8a>
  {
    hi2s->TxXferSize = (Size << 1U);
 8006f5c:	88fb      	ldrh	r3, [r7, #6]
 8006f5e:	005b      	lsls	r3, r3, #1
 8006f60:	b29a      	uxth	r2, r3
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2s->TxXferCount = (Size << 1U);
 8006f66:	88fb      	ldrh	r3, [r7, #6]
 8006f68:	005b      	lsls	r3, r3, #1
 8006f6a:	b29a      	uxth	r2, r3
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8006f70:	e005      	b.n	8006f7e <HAL_I2S_Transmit+0x96>
  }
  else
  {
    hi2s->TxXferSize = Size;
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	88fa      	ldrh	r2, [r7, #6]
 8006f76:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2s->TxXferCount = Size;
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	88fa      	ldrh	r2, [r7, #6]
 8006f7c:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }

  tmpreg_cfgr = hi2s->Instance->I2SCFGR;
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	69db      	ldr	r3, [r3, #28]
 8006f84:	617b      	str	r3, [r7, #20]

  /* Check if the I2S is already enabled */
  if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SE) != SPI_I2SCFGR_I2SE)
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	69db      	ldr	r3, [r3, #28]
 8006f8c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006f90:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006f94:	d007      	beq.n	8006fa6 <HAL_I2S_Transmit+0xbe>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	69da      	ldr	r2, [r3, #28]
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8006fa4:	61da      	str	r2, [r3, #28]
  }

  /* Wait until TXE flag is set */
  if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_TXE, SET, Timeout) != HAL_OK)
 8006fa6:	683b      	ldr	r3, [r7, #0]
 8006fa8:	2201      	movs	r2, #1
 8006faa:	2102      	movs	r1, #2
 8006fac:	68f8      	ldr	r0, [r7, #12]
 8006fae:	f000 f983 	bl	80072b8 <I2S_WaitFlagStateUntilTimeout>
 8006fb2:	4603      	mov	r3, r0
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	d04e      	beq.n	8007056 <HAL_I2S_Transmit+0x16e>
  {
    /* Set the error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006fbc:	f043 0201 	orr.w	r2, r3, #1
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2s->State = HAL_I2S_STATE_READY;
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	2201      	movs	r2, #1
 8006fc8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    __HAL_UNLOCK(hi2s);
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	2200      	movs	r2, #0
 8006fd0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    return HAL_ERROR;
 8006fd4:	2301      	movs	r3, #1
 8006fd6:	e070      	b.n	80070ba <HAL_I2S_Transmit+0x1d2>
  }

  while (hi2s->TxXferCount > 0U)
  {
    hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006fdc:	881a      	ldrh	r2, [r3, #0]
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	60da      	str	r2, [r3, #12]
    hi2s->pTxBuffPtr++;
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006fe8:	1c9a      	adds	r2, r3, #2
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2s->TxXferCount--;
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006ff2:	b29b      	uxth	r3, r3
 8006ff4:	3b01      	subs	r3, #1
 8006ff6:	b29a      	uxth	r2, r3
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	855a      	strh	r2, [r3, #42]	@ 0x2a

    /* Wait until TXE flag is set */
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_TXE, SET, Timeout) != HAL_OK)
 8006ffc:	683b      	ldr	r3, [r7, #0]
 8006ffe:	2201      	movs	r2, #1
 8007000:	2102      	movs	r1, #2
 8007002:	68f8      	ldr	r0, [r7, #12]
 8007004:	f000 f958 	bl	80072b8 <I2S_WaitFlagStateUntilTimeout>
 8007008:	4603      	mov	r3, r0
 800700a:	2b00      	cmp	r3, #0
 800700c:	d00f      	beq.n	800702e <HAL_I2S_Transmit+0x146>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007012:	f043 0201 	orr.w	r2, r3, #1
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	645a      	str	r2, [r3, #68]	@ 0x44
      hi2s->State = HAL_I2S_STATE_READY;
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	2201      	movs	r2, #1
 800701e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      __HAL_UNLOCK(hi2s);
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	2200      	movs	r2, #0
 8007026:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 800702a:	2301      	movs	r3, #1
 800702c:	e045      	b.n	80070ba <HAL_I2S_Transmit+0x1d2>
    }

    /* Check if an underrun occurs */
    if (__HAL_I2S_GET_FLAG(hi2s, I2S_FLAG_UDR) == SET)
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	689b      	ldr	r3, [r3, #8]
 8007034:	f003 0308 	and.w	r3, r3, #8
 8007038:	2b08      	cmp	r3, #8
 800703a:	d10c      	bne.n	8007056 <HAL_I2S_Transmit+0x16e>
    {
      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 800703c:	2300      	movs	r3, #0
 800703e:	613b      	str	r3, [r7, #16]
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	689b      	ldr	r3, [r3, #8]
 8007046:	613b      	str	r3, [r7, #16]
 8007048:	693b      	ldr	r3, [r7, #16]

      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800704e:	f043 0204 	orr.w	r2, r3, #4
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	645a      	str	r2, [r3, #68]	@ 0x44
  while (hi2s->TxXferCount > 0U)
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800705a:	b29b      	uxth	r3, r3
 800705c:	2b00      	cmp	r3, #0
 800705e:	d1bb      	bne.n	8006fd8 <HAL_I2S_Transmit+0xf0>
    }
  }

  /* Check if Slave mode is selected */
  if (((tmpreg_cfgr & SPI_I2SCFGR_I2SCFG) == I2S_MODE_SLAVE_TX)
 8007060:	697b      	ldr	r3, [r7, #20]
 8007062:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007066:	2b00      	cmp	r3, #0
 8007068:	d005      	beq.n	8007076 <HAL_I2S_Transmit+0x18e>
      || ((tmpreg_cfgr & SPI_I2SCFGR_I2SCFG) == I2S_MODE_SLAVE_RX))
 800706a:	697b      	ldr	r3, [r7, #20]
 800706c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007070:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007074:	d118      	bne.n	80070a8 <HAL_I2S_Transmit+0x1c0>
  {
    /* Wait until Busy flag is reset */
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_BSY, RESET, Timeout) != HAL_OK)
 8007076:	683b      	ldr	r3, [r7, #0]
 8007078:	2200      	movs	r2, #0
 800707a:	2180      	movs	r1, #128	@ 0x80
 800707c:	68f8      	ldr	r0, [r7, #12]
 800707e:	f000 f91b 	bl	80072b8 <I2S_WaitFlagStateUntilTimeout>
 8007082:	4603      	mov	r3, r0
 8007084:	2b00      	cmp	r3, #0
 8007086:	d00f      	beq.n	80070a8 <HAL_I2S_Transmit+0x1c0>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800708c:	f043 0201 	orr.w	r2, r3, #1
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	645a      	str	r2, [r3, #68]	@ 0x44
      hi2s->State = HAL_I2S_STATE_READY;
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	2201      	movs	r2, #1
 8007098:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      __HAL_UNLOCK(hi2s);
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	2200      	movs	r2, #0
 80070a0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 80070a4:	2301      	movs	r3, #1
 80070a6:	e008      	b.n	80070ba <HAL_I2S_Transmit+0x1d2>
    }
  }

  hi2s->State = HAL_I2S_STATE_READY;
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	2201      	movs	r2, #1
 80070ac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  __HAL_UNLOCK(hi2s);
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	2200      	movs	r2, #0
 80070b4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  return HAL_OK;
 80070b8:	2300      	movs	r3, #0
}
 80070ba:	4618      	mov	r0, r3
 80070bc:	3718      	adds	r7, #24
 80070be:	46bd      	mov	sp, r7
 80070c0:	bd80      	pop	{r7, pc}

080070c2 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80070c2:	b480      	push	{r7}
 80070c4:	b083      	sub	sp, #12
 80070c6:	af00      	add	r7, sp, #0
 80070c8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 80070ca:	bf00      	nop
 80070cc:	370c      	adds	r7, #12
 80070ce:	46bd      	mov	sp, r7
 80070d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070d4:	4770      	bx	lr

080070d6 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 80070d6:	b480      	push	{r7}
 80070d8:	b083      	sub	sp, #12
 80070da:	af00      	add	r7, sp, #0
 80070dc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 80070de:	bf00      	nop
 80070e0:	370c      	adds	r7, #12
 80070e2:	46bd      	mov	sp, r7
 80070e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070e8:	4770      	bx	lr

080070ea <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 80070ea:	b580      	push	{r7, lr}
 80070ec:	b082      	sub	sp, #8
 80070ee:	af00      	add	r7, sp, #0
 80070f0:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80070f6:	881a      	ldrh	r2, [r3, #0]
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007102:	1c9a      	adds	r2, r3, #2
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	625a      	str	r2, [r3, #36]	@ 0x24
  hi2s->TxXferCount--;
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800710c:	b29b      	uxth	r3, r3
 800710e:	3b01      	subs	r3, #1
 8007110:	b29a      	uxth	r2, r3
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800711a:	b29b      	uxth	r3, r3
 800711c:	2b00      	cmp	r3, #0
 800711e:	d10e      	bne.n	800713e <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	685a      	ldr	r2, [r3, #4]
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 800712e:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	2201      	movs	r2, #1
 8007134:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8007138:	6878      	ldr	r0, [r7, #4]
 800713a:	f7ff ffc2 	bl	80070c2 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 800713e:	bf00      	nop
 8007140:	3708      	adds	r7, #8
 8007142:	46bd      	mov	sp, r7
 8007144:	bd80      	pop	{r7, pc}

08007146 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8007146:	b580      	push	{r7, lr}
 8007148:	b082      	sub	sp, #8
 800714a:	af00      	add	r7, sp, #0
 800714c:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	68da      	ldr	r2, [r3, #12]
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007158:	b292      	uxth	r2, r2
 800715a:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007160:	1c9a      	adds	r2, r3, #2
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2s->RxXferCount--;
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800716a:	b29b      	uxth	r3, r3
 800716c:	3b01      	subs	r3, #1
 800716e:	b29a      	uxth	r2, r3
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8007178:	b29b      	uxth	r3, r3
 800717a:	2b00      	cmp	r3, #0
 800717c:	d10e      	bne.n	800719c <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	685a      	ldr	r2, [r3, #4]
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800718c:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	2201      	movs	r2, #1
 8007192:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8007196:	6878      	ldr	r0, [r7, #4]
 8007198:	f7fb f802 	bl	80021a0 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 800719c:	bf00      	nop
 800719e:	3708      	adds	r7, #8
 80071a0:	46bd      	mov	sp, r7
 80071a2:	bd80      	pop	{r7, pc}

080071a4 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80071a4:	b580      	push	{r7, lr}
 80071a6:	b086      	sub	sp, #24
 80071a8:	af00      	add	r7, sp, #0
 80071aa:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	689b      	ldr	r3, [r3, #8]
 80071b2:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80071ba:	b2db      	uxtb	r3, r3
 80071bc:	2b04      	cmp	r3, #4
 80071be:	d13a      	bne.n	8007236 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 80071c0:	697b      	ldr	r3, [r7, #20]
 80071c2:	f003 0301 	and.w	r3, r3, #1
 80071c6:	2b01      	cmp	r3, #1
 80071c8:	d109      	bne.n	80071de <I2S_IRQHandler+0x3a>
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	685b      	ldr	r3, [r3, #4]
 80071d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80071d4:	2b40      	cmp	r3, #64	@ 0x40
 80071d6:	d102      	bne.n	80071de <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 80071d8:	6878      	ldr	r0, [r7, #4]
 80071da:	f7ff ffb4 	bl	8007146 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80071de:	697b      	ldr	r3, [r7, #20]
 80071e0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80071e4:	2b40      	cmp	r3, #64	@ 0x40
 80071e6:	d126      	bne.n	8007236 <I2S_IRQHandler+0x92>
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	685b      	ldr	r3, [r3, #4]
 80071ee:	f003 0320 	and.w	r3, r3, #32
 80071f2:	2b20      	cmp	r3, #32
 80071f4:	d11f      	bne.n	8007236 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	685a      	ldr	r2, [r3, #4]
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8007204:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8007206:	2300      	movs	r3, #0
 8007208:	613b      	str	r3, [r7, #16]
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	68db      	ldr	r3, [r3, #12]
 8007210:	613b      	str	r3, [r7, #16]
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	689b      	ldr	r3, [r3, #8]
 8007218:	613b      	str	r3, [r7, #16]
 800721a:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	2201      	movs	r2, #1
 8007220:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007228:	f043 0202 	orr.w	r2, r3, #2
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8007230:	6878      	ldr	r0, [r7, #4]
 8007232:	f7ff ff50 	bl	80070d6 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800723c:	b2db      	uxtb	r3, r3
 800723e:	2b03      	cmp	r3, #3
 8007240:	d136      	bne.n	80072b0 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8007242:	697b      	ldr	r3, [r7, #20]
 8007244:	f003 0302 	and.w	r3, r3, #2
 8007248:	2b02      	cmp	r3, #2
 800724a:	d109      	bne.n	8007260 <I2S_IRQHandler+0xbc>
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	685b      	ldr	r3, [r3, #4]
 8007252:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007256:	2b80      	cmp	r3, #128	@ 0x80
 8007258:	d102      	bne.n	8007260 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 800725a:	6878      	ldr	r0, [r7, #4]
 800725c:	f7ff ff45 	bl	80070ea <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8007260:	697b      	ldr	r3, [r7, #20]
 8007262:	f003 0308 	and.w	r3, r3, #8
 8007266:	2b08      	cmp	r3, #8
 8007268:	d122      	bne.n	80072b0 <I2S_IRQHandler+0x10c>
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	685b      	ldr	r3, [r3, #4]
 8007270:	f003 0320 	and.w	r3, r3, #32
 8007274:	2b20      	cmp	r3, #32
 8007276:	d11b      	bne.n	80072b0 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	685a      	ldr	r2, [r3, #4]
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8007286:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8007288:	2300      	movs	r3, #0
 800728a:	60fb      	str	r3, [r7, #12]
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	689b      	ldr	r3, [r3, #8]
 8007292:	60fb      	str	r3, [r7, #12]
 8007294:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	2201      	movs	r2, #1
 800729a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80072a2:	f043 0204 	orr.w	r2, r3, #4
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80072aa:	6878      	ldr	r0, [r7, #4]
 80072ac:	f7ff ff13 	bl	80070d6 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80072b0:	bf00      	nop
 80072b2:	3718      	adds	r7, #24
 80072b4:	46bd      	mov	sp, r7
 80072b6:	bd80      	pop	{r7, pc}

080072b8 <I2S_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef I2S_WaitFlagStateUntilTimeout(I2S_HandleTypeDef *hi2s, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout)
{
 80072b8:	b580      	push	{r7, lr}
 80072ba:	b086      	sub	sp, #24
 80072bc:	af00      	add	r7, sp, #0
 80072be:	60f8      	str	r0, [r7, #12]
 80072c0:	60b9      	str	r1, [r7, #8]
 80072c2:	603b      	str	r3, [r7, #0]
 80072c4:	4613      	mov	r3, r2
 80072c6:	71fb      	strb	r3, [r7, #7]
  uint32_t tickstart;

  /* Get tick */
  tickstart = HAL_GetTick();
 80072c8:	f7fe f93e 	bl	8005548 <HAL_GetTick>
 80072cc:	6178      	str	r0, [r7, #20]

  /* Wait until flag is set to status*/
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 80072ce:	e018      	b.n	8007302 <I2S_WaitFlagStateUntilTimeout+0x4a>
  {
    if (Timeout != HAL_MAX_DELAY)
 80072d0:	683b      	ldr	r3, [r7, #0]
 80072d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80072d6:	d014      	beq.n	8007302 <I2S_WaitFlagStateUntilTimeout+0x4a>
    {
      if (((HAL_GetTick() - tickstart) >= Timeout) || (Timeout == 0U))
 80072d8:	f7fe f936 	bl	8005548 <HAL_GetTick>
 80072dc:	4602      	mov	r2, r0
 80072de:	697b      	ldr	r3, [r7, #20]
 80072e0:	1ad3      	subs	r3, r2, r3
 80072e2:	683a      	ldr	r2, [r7, #0]
 80072e4:	429a      	cmp	r2, r3
 80072e6:	d902      	bls.n	80072ee <I2S_WaitFlagStateUntilTimeout+0x36>
 80072e8:	683b      	ldr	r3, [r7, #0]
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	d109      	bne.n	8007302 <I2S_WaitFlagStateUntilTimeout+0x4a>
      {
        /* Set the I2S State ready */
        hi2s->State = HAL_I2S_STATE_READY;
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	2201      	movs	r2, #1
 80072f2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2s);
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	2200      	movs	r2, #0
 80072fa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_TIMEOUT;
 80072fe:	2303      	movs	r3, #3
 8007300:	e00f      	b.n	8007322 <I2S_WaitFlagStateUntilTimeout+0x6a>
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 8007302:	68fb      	ldr	r3, [r7, #12]
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	689a      	ldr	r2, [r3, #8]
 8007308:	68bb      	ldr	r3, [r7, #8]
 800730a:	4013      	ands	r3, r2
 800730c:	68ba      	ldr	r2, [r7, #8]
 800730e:	429a      	cmp	r2, r3
 8007310:	bf0c      	ite	eq
 8007312:	2301      	moveq	r3, #1
 8007314:	2300      	movne	r3, #0
 8007316:	b2db      	uxtb	r3, r3
 8007318:	461a      	mov	r2, r3
 800731a:	79fb      	ldrb	r3, [r7, #7]
 800731c:	429a      	cmp	r2, r3
 800731e:	d1d7      	bne.n	80072d0 <I2S_WaitFlagStateUntilTimeout+0x18>
      }
    }
  }
  return HAL_OK;
 8007320:	2300      	movs	r3, #0
}
 8007322:	4618      	mov	r0, r3
 8007324:	3718      	adds	r7, #24
 8007326:	46bd      	mov	sp, r7
 8007328:	bd80      	pop	{r7, pc}
	...

0800732c <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 800732c:	b580      	push	{r7, lr}
 800732e:	b088      	sub	sp, #32
 8007330:	af00      	add	r7, sp, #0
 8007332:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	689b      	ldr	r3, [r3, #8]
 800733a:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	4a92      	ldr	r2, [pc, #584]	@ (800758c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8007342:	4293      	cmp	r3, r2
 8007344:	d101      	bne.n	800734a <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8007346:	4b92      	ldr	r3, [pc, #584]	@ (8007590 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8007348:	e001      	b.n	800734e <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 800734a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800734e:	689b      	ldr	r3, [r3, #8]
 8007350:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	685b      	ldr	r3, [r3, #4]
 8007358:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	4a8b      	ldr	r2, [pc, #556]	@ (800758c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8007360:	4293      	cmp	r3, r2
 8007362:	d101      	bne.n	8007368 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8007364:	4b8a      	ldr	r3, [pc, #552]	@ (8007590 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8007366:	e001      	b.n	800736c <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8007368:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800736c:	685b      	ldr	r3, [r3, #4]
 800736e:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	685b      	ldr	r3, [r3, #4]
 8007374:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007378:	d004      	beq.n	8007384 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	685b      	ldr	r3, [r3, #4]
 800737e:	2b00      	cmp	r3, #0
 8007380:	f040 8099 	bne.w	80074b6 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8007384:	69fb      	ldr	r3, [r7, #28]
 8007386:	f003 0302 	and.w	r3, r3, #2
 800738a:	2b02      	cmp	r3, #2
 800738c:	d107      	bne.n	800739e <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 800738e:	697b      	ldr	r3, [r7, #20]
 8007390:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007394:	2b00      	cmp	r3, #0
 8007396:	d002      	beq.n	800739e <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8007398:	6878      	ldr	r0, [r7, #4]
 800739a:	f000 f925 	bl	80075e8 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 800739e:	69bb      	ldr	r3, [r7, #24]
 80073a0:	f003 0301 	and.w	r3, r3, #1
 80073a4:	2b01      	cmp	r3, #1
 80073a6:	d107      	bne.n	80073b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 80073a8:	693b      	ldr	r3, [r7, #16]
 80073aa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	d002      	beq.n	80073b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 80073b2:	6878      	ldr	r0, [r7, #4]
 80073b4:	f000 f9c8 	bl	8007748 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80073b8:	69bb      	ldr	r3, [r7, #24]
 80073ba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80073be:	2b40      	cmp	r3, #64	@ 0x40
 80073c0:	d13a      	bne.n	8007438 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 80073c2:	693b      	ldr	r3, [r7, #16]
 80073c4:	f003 0320 	and.w	r3, r3, #32
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	d035      	beq.n	8007438 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	4a6e      	ldr	r2, [pc, #440]	@ (800758c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80073d2:	4293      	cmp	r3, r2
 80073d4:	d101      	bne.n	80073da <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 80073d6:	4b6e      	ldr	r3, [pc, #440]	@ (8007590 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80073d8:	e001      	b.n	80073de <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 80073da:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80073de:	685a      	ldr	r2, [r3, #4]
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	4969      	ldr	r1, [pc, #420]	@ (800758c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80073e6:	428b      	cmp	r3, r1
 80073e8:	d101      	bne.n	80073ee <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 80073ea:	4b69      	ldr	r3, [pc, #420]	@ (8007590 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80073ec:	e001      	b.n	80073f2 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 80073ee:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80073f2:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80073f6:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	685a      	ldr	r2, [r3, #4]
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8007406:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8007408:	2300      	movs	r3, #0
 800740a:	60fb      	str	r3, [r7, #12]
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	68db      	ldr	r3, [r3, #12]
 8007412:	60fb      	str	r3, [r7, #12]
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	689b      	ldr	r3, [r3, #8]
 800741a:	60fb      	str	r3, [r7, #12]
 800741c:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	2201      	movs	r2, #1
 8007422:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800742a:	f043 0202 	orr.w	r2, r3, #2
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8007432:	6878      	ldr	r0, [r7, #4]
 8007434:	f7ff fe4f 	bl	80070d6 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8007438:	69fb      	ldr	r3, [r7, #28]
 800743a:	f003 0308 	and.w	r3, r3, #8
 800743e:	2b08      	cmp	r3, #8
 8007440:	f040 80c3 	bne.w	80075ca <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8007444:	697b      	ldr	r3, [r7, #20]
 8007446:	f003 0320 	and.w	r3, r3, #32
 800744a:	2b00      	cmp	r3, #0
 800744c:	f000 80bd 	beq.w	80075ca <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	685a      	ldr	r2, [r3, #4]
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 800745e:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	4a49      	ldr	r2, [pc, #292]	@ (800758c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8007466:	4293      	cmp	r3, r2
 8007468:	d101      	bne.n	800746e <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 800746a:	4b49      	ldr	r3, [pc, #292]	@ (8007590 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800746c:	e001      	b.n	8007472 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 800746e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8007472:	685a      	ldr	r2, [r3, #4]
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	4944      	ldr	r1, [pc, #272]	@ (800758c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800747a:	428b      	cmp	r3, r1
 800747c:	d101      	bne.n	8007482 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 800747e:	4b44      	ldr	r3, [pc, #272]	@ (8007590 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8007480:	e001      	b.n	8007486 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8007482:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8007486:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800748a:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 800748c:	2300      	movs	r3, #0
 800748e:	60bb      	str	r3, [r7, #8]
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	689b      	ldr	r3, [r3, #8]
 8007496:	60bb      	str	r3, [r7, #8]
 8007498:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	2201      	movs	r2, #1
 800749e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80074a6:	f043 0204 	orr.w	r2, r3, #4
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80074ae:	6878      	ldr	r0, [r7, #4]
 80074b0:	f7ff fe11 	bl	80070d6 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80074b4:	e089      	b.n	80075ca <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 80074b6:	69bb      	ldr	r3, [r7, #24]
 80074b8:	f003 0302 	and.w	r3, r3, #2
 80074bc:	2b02      	cmp	r3, #2
 80074be:	d107      	bne.n	80074d0 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 80074c0:	693b      	ldr	r3, [r7, #16]
 80074c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	d002      	beq.n	80074d0 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 80074ca:	6878      	ldr	r0, [r7, #4]
 80074cc:	f000 f8be 	bl	800764c <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 80074d0:	69fb      	ldr	r3, [r7, #28]
 80074d2:	f003 0301 	and.w	r3, r3, #1
 80074d6:	2b01      	cmp	r3, #1
 80074d8:	d107      	bne.n	80074ea <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 80074da:	697b      	ldr	r3, [r7, #20]
 80074dc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	d002      	beq.n	80074ea <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 80074e4:	6878      	ldr	r0, [r7, #4]
 80074e6:	f000 f8fd 	bl	80076e4 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80074ea:	69fb      	ldr	r3, [r7, #28]
 80074ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80074f0:	2b40      	cmp	r3, #64	@ 0x40
 80074f2:	d12f      	bne.n	8007554 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 80074f4:	697b      	ldr	r3, [r7, #20]
 80074f6:	f003 0320 	and.w	r3, r3, #32
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	d02a      	beq.n	8007554 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	685a      	ldr	r2, [r3, #4]
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800750c:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	4a1e      	ldr	r2, [pc, #120]	@ (800758c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8007514:	4293      	cmp	r3, r2
 8007516:	d101      	bne.n	800751c <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8007518:	4b1d      	ldr	r3, [pc, #116]	@ (8007590 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800751a:	e001      	b.n	8007520 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 800751c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8007520:	685a      	ldr	r2, [r3, #4]
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	4919      	ldr	r1, [pc, #100]	@ (800758c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8007528:	428b      	cmp	r3, r1
 800752a:	d101      	bne.n	8007530 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 800752c:	4b18      	ldr	r3, [pc, #96]	@ (8007590 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800752e:	e001      	b.n	8007534 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8007530:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8007534:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8007538:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	2201      	movs	r2, #1
 800753e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007546:	f043 0202 	orr.w	r2, r3, #2
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800754e:	6878      	ldr	r0, [r7, #4]
 8007550:	f7ff fdc1 	bl	80070d6 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8007554:	69bb      	ldr	r3, [r7, #24]
 8007556:	f003 0308 	and.w	r3, r3, #8
 800755a:	2b08      	cmp	r3, #8
 800755c:	d136      	bne.n	80075cc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 800755e:	693b      	ldr	r3, [r7, #16]
 8007560:	f003 0320 	and.w	r3, r3, #32
 8007564:	2b00      	cmp	r3, #0
 8007566:	d031      	beq.n	80075cc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	4a07      	ldr	r2, [pc, #28]	@ (800758c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800756e:	4293      	cmp	r3, r2
 8007570:	d101      	bne.n	8007576 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8007572:	4b07      	ldr	r3, [pc, #28]	@ (8007590 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8007574:	e001      	b.n	800757a <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8007576:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800757a:	685a      	ldr	r2, [r3, #4]
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	4902      	ldr	r1, [pc, #8]	@ (800758c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8007582:	428b      	cmp	r3, r1
 8007584:	d106      	bne.n	8007594 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 8007586:	4b02      	ldr	r3, [pc, #8]	@ (8007590 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8007588:	e006      	b.n	8007598 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 800758a:	bf00      	nop
 800758c:	40003800 	.word	0x40003800
 8007590:	40003400 	.word	0x40003400
 8007594:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8007598:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 800759c:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	685a      	ldr	r2, [r3, #4]
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80075ac:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	2201      	movs	r2, #1
 80075b2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80075ba:	f043 0204 	orr.w	r2, r3, #4
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80075c2:	6878      	ldr	r0, [r7, #4]
 80075c4:	f7ff fd87 	bl	80070d6 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80075c8:	e000      	b.n	80075cc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80075ca:	bf00      	nop
}
 80075cc:	bf00      	nop
 80075ce:	3720      	adds	r7, #32
 80075d0:	46bd      	mov	sp, r7
 80075d2:	bd80      	pop	{r7, pc}

080075d4 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80075d4:	b480      	push	{r7}
 80075d6:	b083      	sub	sp, #12
 80075d8:	af00      	add	r7, sp, #0
 80075da:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 80075dc:	bf00      	nop
 80075de:	370c      	adds	r7, #12
 80075e0:	46bd      	mov	sp, r7
 80075e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075e6:	4770      	bx	lr

080075e8 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80075e8:	b580      	push	{r7, lr}
 80075ea:	b082      	sub	sp, #8
 80075ec:	af00      	add	r7, sp, #0
 80075ee:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80075f4:	1c99      	adds	r1, r3, #2
 80075f6:	687a      	ldr	r2, [r7, #4]
 80075f8:	6251      	str	r1, [r2, #36]	@ 0x24
 80075fa:	881a      	ldrh	r2, [r3, #0]
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007606:	b29b      	uxth	r3, r3
 8007608:	3b01      	subs	r3, #1
 800760a:	b29a      	uxth	r2, r3
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007614:	b29b      	uxth	r3, r3
 8007616:	2b00      	cmp	r3, #0
 8007618:	d113      	bne.n	8007642 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	685a      	ldr	r2, [r3, #4]
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8007628:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800762e:	b29b      	uxth	r3, r3
 8007630:	2b00      	cmp	r3, #0
 8007632:	d106      	bne.n	8007642 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	2201      	movs	r2, #1
 8007638:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800763c:	6878      	ldr	r0, [r7, #4]
 800763e:	f7ff ffc9 	bl	80075d4 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8007642:	bf00      	nop
 8007644:	3708      	adds	r7, #8
 8007646:	46bd      	mov	sp, r7
 8007648:	bd80      	pop	{r7, pc}
	...

0800764c <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 800764c:	b580      	push	{r7, lr}
 800764e:	b082      	sub	sp, #8
 8007650:	af00      	add	r7, sp, #0
 8007652:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007658:	1c99      	adds	r1, r3, #2
 800765a:	687a      	ldr	r2, [r7, #4]
 800765c:	6251      	str	r1, [r2, #36]	@ 0x24
 800765e:	8819      	ldrh	r1, [r3, #0]
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	4a1d      	ldr	r2, [pc, #116]	@ (80076dc <I2SEx_TxISR_I2SExt+0x90>)
 8007666:	4293      	cmp	r3, r2
 8007668:	d101      	bne.n	800766e <I2SEx_TxISR_I2SExt+0x22>
 800766a:	4b1d      	ldr	r3, [pc, #116]	@ (80076e0 <I2SEx_TxISR_I2SExt+0x94>)
 800766c:	e001      	b.n	8007672 <I2SEx_TxISR_I2SExt+0x26>
 800766e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8007672:	460a      	mov	r2, r1
 8007674:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800767a:	b29b      	uxth	r3, r3
 800767c:	3b01      	subs	r3, #1
 800767e:	b29a      	uxth	r2, r3
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007688:	b29b      	uxth	r3, r3
 800768a:	2b00      	cmp	r3, #0
 800768c:	d121      	bne.n	80076d2 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	4a12      	ldr	r2, [pc, #72]	@ (80076dc <I2SEx_TxISR_I2SExt+0x90>)
 8007694:	4293      	cmp	r3, r2
 8007696:	d101      	bne.n	800769c <I2SEx_TxISR_I2SExt+0x50>
 8007698:	4b11      	ldr	r3, [pc, #68]	@ (80076e0 <I2SEx_TxISR_I2SExt+0x94>)
 800769a:	e001      	b.n	80076a0 <I2SEx_TxISR_I2SExt+0x54>
 800769c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80076a0:	685a      	ldr	r2, [r3, #4]
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	490d      	ldr	r1, [pc, #52]	@ (80076dc <I2SEx_TxISR_I2SExt+0x90>)
 80076a8:	428b      	cmp	r3, r1
 80076aa:	d101      	bne.n	80076b0 <I2SEx_TxISR_I2SExt+0x64>
 80076ac:	4b0c      	ldr	r3, [pc, #48]	@ (80076e0 <I2SEx_TxISR_I2SExt+0x94>)
 80076ae:	e001      	b.n	80076b4 <I2SEx_TxISR_I2SExt+0x68>
 80076b0:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80076b4:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80076b8:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80076be:	b29b      	uxth	r3, r3
 80076c0:	2b00      	cmp	r3, #0
 80076c2:	d106      	bne.n	80076d2 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	2201      	movs	r2, #1
 80076c8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80076cc:	6878      	ldr	r0, [r7, #4]
 80076ce:	f7ff ff81 	bl	80075d4 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80076d2:	bf00      	nop
 80076d4:	3708      	adds	r7, #8
 80076d6:	46bd      	mov	sp, r7
 80076d8:	bd80      	pop	{r7, pc}
 80076da:	bf00      	nop
 80076dc:	40003800 	.word	0x40003800
 80076e0:	40003400 	.word	0x40003400

080076e4 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80076e4:	b580      	push	{r7, lr}
 80076e6:	b082      	sub	sp, #8
 80076e8:	af00      	add	r7, sp, #0
 80076ea:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	68d8      	ldr	r0, [r3, #12]
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80076f6:	1c99      	adds	r1, r3, #2
 80076f8:	687a      	ldr	r2, [r7, #4]
 80076fa:	62d1      	str	r1, [r2, #44]	@ 0x2c
 80076fc:	b282      	uxth	r2, r0
 80076fe:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8007704:	b29b      	uxth	r3, r3
 8007706:	3b01      	subs	r3, #1
 8007708:	b29a      	uxth	r2, r3
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8007712:	b29b      	uxth	r3, r3
 8007714:	2b00      	cmp	r3, #0
 8007716:	d113      	bne.n	8007740 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	685a      	ldr	r2, [r3, #4]
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8007726:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800772c:	b29b      	uxth	r3, r3
 800772e:	2b00      	cmp	r3, #0
 8007730:	d106      	bne.n	8007740 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	2201      	movs	r2, #1
 8007736:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800773a:	6878      	ldr	r0, [r7, #4]
 800773c:	f7ff ff4a 	bl	80075d4 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8007740:	bf00      	nop
 8007742:	3708      	adds	r7, #8
 8007744:	46bd      	mov	sp, r7
 8007746:	bd80      	pop	{r7, pc}

08007748 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8007748:	b580      	push	{r7, lr}
 800774a:	b082      	sub	sp, #8
 800774c:	af00      	add	r7, sp, #0
 800774e:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	4a20      	ldr	r2, [pc, #128]	@ (80077d8 <I2SEx_RxISR_I2SExt+0x90>)
 8007756:	4293      	cmp	r3, r2
 8007758:	d101      	bne.n	800775e <I2SEx_RxISR_I2SExt+0x16>
 800775a:	4b20      	ldr	r3, [pc, #128]	@ (80077dc <I2SEx_RxISR_I2SExt+0x94>)
 800775c:	e001      	b.n	8007762 <I2SEx_RxISR_I2SExt+0x1a>
 800775e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8007762:	68d8      	ldr	r0, [r3, #12]
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007768:	1c99      	adds	r1, r3, #2
 800776a:	687a      	ldr	r2, [r7, #4]
 800776c:	62d1      	str	r1, [r2, #44]	@ 0x2c
 800776e:	b282      	uxth	r2, r0
 8007770:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8007776:	b29b      	uxth	r3, r3
 8007778:	3b01      	subs	r3, #1
 800777a:	b29a      	uxth	r2, r3
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8007784:	b29b      	uxth	r3, r3
 8007786:	2b00      	cmp	r3, #0
 8007788:	d121      	bne.n	80077ce <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	4a12      	ldr	r2, [pc, #72]	@ (80077d8 <I2SEx_RxISR_I2SExt+0x90>)
 8007790:	4293      	cmp	r3, r2
 8007792:	d101      	bne.n	8007798 <I2SEx_RxISR_I2SExt+0x50>
 8007794:	4b11      	ldr	r3, [pc, #68]	@ (80077dc <I2SEx_RxISR_I2SExt+0x94>)
 8007796:	e001      	b.n	800779c <I2SEx_RxISR_I2SExt+0x54>
 8007798:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800779c:	685a      	ldr	r2, [r3, #4]
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	490d      	ldr	r1, [pc, #52]	@ (80077d8 <I2SEx_RxISR_I2SExt+0x90>)
 80077a4:	428b      	cmp	r3, r1
 80077a6:	d101      	bne.n	80077ac <I2SEx_RxISR_I2SExt+0x64>
 80077a8:	4b0c      	ldr	r3, [pc, #48]	@ (80077dc <I2SEx_RxISR_I2SExt+0x94>)
 80077aa:	e001      	b.n	80077b0 <I2SEx_RxISR_I2SExt+0x68>
 80077ac:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80077b0:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80077b4:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80077ba:	b29b      	uxth	r3, r3
 80077bc:	2b00      	cmp	r3, #0
 80077be:	d106      	bne.n	80077ce <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	2201      	movs	r2, #1
 80077c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80077c8:	6878      	ldr	r0, [r7, #4]
 80077ca:	f7ff ff03 	bl	80075d4 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80077ce:	bf00      	nop
 80077d0:	3708      	adds	r7, #8
 80077d2:	46bd      	mov	sp, r7
 80077d4:	bd80      	pop	{r7, pc}
 80077d6:	bf00      	nop
 80077d8:	40003800 	.word	0x40003800
 80077dc:	40003400 	.word	0x40003400

080077e0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80077e0:	b580      	push	{r7, lr}
 80077e2:	b086      	sub	sp, #24
 80077e4:	af00      	add	r7, sp, #0
 80077e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	d101      	bne.n	80077f2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80077ee:	2301      	movs	r3, #1
 80077f0:	e267      	b.n	8007cc2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	f003 0301 	and.w	r3, r3, #1
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	d075      	beq.n	80078ea <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80077fe:	4b88      	ldr	r3, [pc, #544]	@ (8007a20 <HAL_RCC_OscConfig+0x240>)
 8007800:	689b      	ldr	r3, [r3, #8]
 8007802:	f003 030c 	and.w	r3, r3, #12
 8007806:	2b04      	cmp	r3, #4
 8007808:	d00c      	beq.n	8007824 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800780a:	4b85      	ldr	r3, [pc, #532]	@ (8007a20 <HAL_RCC_OscConfig+0x240>)
 800780c:	689b      	ldr	r3, [r3, #8]
 800780e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8007812:	2b08      	cmp	r3, #8
 8007814:	d112      	bne.n	800783c <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007816:	4b82      	ldr	r3, [pc, #520]	@ (8007a20 <HAL_RCC_OscConfig+0x240>)
 8007818:	685b      	ldr	r3, [r3, #4]
 800781a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800781e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007822:	d10b      	bne.n	800783c <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007824:	4b7e      	ldr	r3, [pc, #504]	@ (8007a20 <HAL_RCC_OscConfig+0x240>)
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800782c:	2b00      	cmp	r3, #0
 800782e:	d05b      	beq.n	80078e8 <HAL_RCC_OscConfig+0x108>
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	685b      	ldr	r3, [r3, #4]
 8007834:	2b00      	cmp	r3, #0
 8007836:	d157      	bne.n	80078e8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8007838:	2301      	movs	r3, #1
 800783a:	e242      	b.n	8007cc2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	685b      	ldr	r3, [r3, #4]
 8007840:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007844:	d106      	bne.n	8007854 <HAL_RCC_OscConfig+0x74>
 8007846:	4b76      	ldr	r3, [pc, #472]	@ (8007a20 <HAL_RCC_OscConfig+0x240>)
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	4a75      	ldr	r2, [pc, #468]	@ (8007a20 <HAL_RCC_OscConfig+0x240>)
 800784c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007850:	6013      	str	r3, [r2, #0]
 8007852:	e01d      	b.n	8007890 <HAL_RCC_OscConfig+0xb0>
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	685b      	ldr	r3, [r3, #4]
 8007858:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800785c:	d10c      	bne.n	8007878 <HAL_RCC_OscConfig+0x98>
 800785e:	4b70      	ldr	r3, [pc, #448]	@ (8007a20 <HAL_RCC_OscConfig+0x240>)
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	4a6f      	ldr	r2, [pc, #444]	@ (8007a20 <HAL_RCC_OscConfig+0x240>)
 8007864:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8007868:	6013      	str	r3, [r2, #0]
 800786a:	4b6d      	ldr	r3, [pc, #436]	@ (8007a20 <HAL_RCC_OscConfig+0x240>)
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	4a6c      	ldr	r2, [pc, #432]	@ (8007a20 <HAL_RCC_OscConfig+0x240>)
 8007870:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007874:	6013      	str	r3, [r2, #0]
 8007876:	e00b      	b.n	8007890 <HAL_RCC_OscConfig+0xb0>
 8007878:	4b69      	ldr	r3, [pc, #420]	@ (8007a20 <HAL_RCC_OscConfig+0x240>)
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	4a68      	ldr	r2, [pc, #416]	@ (8007a20 <HAL_RCC_OscConfig+0x240>)
 800787e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007882:	6013      	str	r3, [r2, #0]
 8007884:	4b66      	ldr	r3, [pc, #408]	@ (8007a20 <HAL_RCC_OscConfig+0x240>)
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	4a65      	ldr	r2, [pc, #404]	@ (8007a20 <HAL_RCC_OscConfig+0x240>)
 800788a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800788e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	685b      	ldr	r3, [r3, #4]
 8007894:	2b00      	cmp	r3, #0
 8007896:	d013      	beq.n	80078c0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007898:	f7fd fe56 	bl	8005548 <HAL_GetTick>
 800789c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800789e:	e008      	b.n	80078b2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80078a0:	f7fd fe52 	bl	8005548 <HAL_GetTick>
 80078a4:	4602      	mov	r2, r0
 80078a6:	693b      	ldr	r3, [r7, #16]
 80078a8:	1ad3      	subs	r3, r2, r3
 80078aa:	2b64      	cmp	r3, #100	@ 0x64
 80078ac:	d901      	bls.n	80078b2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80078ae:	2303      	movs	r3, #3
 80078b0:	e207      	b.n	8007cc2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80078b2:	4b5b      	ldr	r3, [pc, #364]	@ (8007a20 <HAL_RCC_OscConfig+0x240>)
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80078ba:	2b00      	cmp	r3, #0
 80078bc:	d0f0      	beq.n	80078a0 <HAL_RCC_OscConfig+0xc0>
 80078be:	e014      	b.n	80078ea <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80078c0:	f7fd fe42 	bl	8005548 <HAL_GetTick>
 80078c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80078c6:	e008      	b.n	80078da <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80078c8:	f7fd fe3e 	bl	8005548 <HAL_GetTick>
 80078cc:	4602      	mov	r2, r0
 80078ce:	693b      	ldr	r3, [r7, #16]
 80078d0:	1ad3      	subs	r3, r2, r3
 80078d2:	2b64      	cmp	r3, #100	@ 0x64
 80078d4:	d901      	bls.n	80078da <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80078d6:	2303      	movs	r3, #3
 80078d8:	e1f3      	b.n	8007cc2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80078da:	4b51      	ldr	r3, [pc, #324]	@ (8007a20 <HAL_RCC_OscConfig+0x240>)
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	d1f0      	bne.n	80078c8 <HAL_RCC_OscConfig+0xe8>
 80078e6:	e000      	b.n	80078ea <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80078e8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	f003 0302 	and.w	r3, r3, #2
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	d063      	beq.n	80079be <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80078f6:	4b4a      	ldr	r3, [pc, #296]	@ (8007a20 <HAL_RCC_OscConfig+0x240>)
 80078f8:	689b      	ldr	r3, [r3, #8]
 80078fa:	f003 030c 	and.w	r3, r3, #12
 80078fe:	2b00      	cmp	r3, #0
 8007900:	d00b      	beq.n	800791a <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007902:	4b47      	ldr	r3, [pc, #284]	@ (8007a20 <HAL_RCC_OscConfig+0x240>)
 8007904:	689b      	ldr	r3, [r3, #8]
 8007906:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800790a:	2b08      	cmp	r3, #8
 800790c:	d11c      	bne.n	8007948 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800790e:	4b44      	ldr	r3, [pc, #272]	@ (8007a20 <HAL_RCC_OscConfig+0x240>)
 8007910:	685b      	ldr	r3, [r3, #4]
 8007912:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007916:	2b00      	cmp	r3, #0
 8007918:	d116      	bne.n	8007948 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800791a:	4b41      	ldr	r3, [pc, #260]	@ (8007a20 <HAL_RCC_OscConfig+0x240>)
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	f003 0302 	and.w	r3, r3, #2
 8007922:	2b00      	cmp	r3, #0
 8007924:	d005      	beq.n	8007932 <HAL_RCC_OscConfig+0x152>
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	68db      	ldr	r3, [r3, #12]
 800792a:	2b01      	cmp	r3, #1
 800792c:	d001      	beq.n	8007932 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800792e:	2301      	movs	r3, #1
 8007930:	e1c7      	b.n	8007cc2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007932:	4b3b      	ldr	r3, [pc, #236]	@ (8007a20 <HAL_RCC_OscConfig+0x240>)
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	691b      	ldr	r3, [r3, #16]
 800793e:	00db      	lsls	r3, r3, #3
 8007940:	4937      	ldr	r1, [pc, #220]	@ (8007a20 <HAL_RCC_OscConfig+0x240>)
 8007942:	4313      	orrs	r3, r2
 8007944:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007946:	e03a      	b.n	80079be <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	68db      	ldr	r3, [r3, #12]
 800794c:	2b00      	cmp	r3, #0
 800794e:	d020      	beq.n	8007992 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007950:	4b34      	ldr	r3, [pc, #208]	@ (8007a24 <HAL_RCC_OscConfig+0x244>)
 8007952:	2201      	movs	r2, #1
 8007954:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007956:	f7fd fdf7 	bl	8005548 <HAL_GetTick>
 800795a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800795c:	e008      	b.n	8007970 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800795e:	f7fd fdf3 	bl	8005548 <HAL_GetTick>
 8007962:	4602      	mov	r2, r0
 8007964:	693b      	ldr	r3, [r7, #16]
 8007966:	1ad3      	subs	r3, r2, r3
 8007968:	2b02      	cmp	r3, #2
 800796a:	d901      	bls.n	8007970 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800796c:	2303      	movs	r3, #3
 800796e:	e1a8      	b.n	8007cc2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007970:	4b2b      	ldr	r3, [pc, #172]	@ (8007a20 <HAL_RCC_OscConfig+0x240>)
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	f003 0302 	and.w	r3, r3, #2
 8007978:	2b00      	cmp	r3, #0
 800797a:	d0f0      	beq.n	800795e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800797c:	4b28      	ldr	r3, [pc, #160]	@ (8007a20 <HAL_RCC_OscConfig+0x240>)
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	691b      	ldr	r3, [r3, #16]
 8007988:	00db      	lsls	r3, r3, #3
 800798a:	4925      	ldr	r1, [pc, #148]	@ (8007a20 <HAL_RCC_OscConfig+0x240>)
 800798c:	4313      	orrs	r3, r2
 800798e:	600b      	str	r3, [r1, #0]
 8007990:	e015      	b.n	80079be <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007992:	4b24      	ldr	r3, [pc, #144]	@ (8007a24 <HAL_RCC_OscConfig+0x244>)
 8007994:	2200      	movs	r2, #0
 8007996:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007998:	f7fd fdd6 	bl	8005548 <HAL_GetTick>
 800799c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800799e:	e008      	b.n	80079b2 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80079a0:	f7fd fdd2 	bl	8005548 <HAL_GetTick>
 80079a4:	4602      	mov	r2, r0
 80079a6:	693b      	ldr	r3, [r7, #16]
 80079a8:	1ad3      	subs	r3, r2, r3
 80079aa:	2b02      	cmp	r3, #2
 80079ac:	d901      	bls.n	80079b2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80079ae:	2303      	movs	r3, #3
 80079b0:	e187      	b.n	8007cc2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80079b2:	4b1b      	ldr	r3, [pc, #108]	@ (8007a20 <HAL_RCC_OscConfig+0x240>)
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	f003 0302 	and.w	r3, r3, #2
 80079ba:	2b00      	cmp	r3, #0
 80079bc:	d1f0      	bne.n	80079a0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	f003 0308 	and.w	r3, r3, #8
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	d036      	beq.n	8007a38 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	695b      	ldr	r3, [r3, #20]
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	d016      	beq.n	8007a00 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80079d2:	4b15      	ldr	r3, [pc, #84]	@ (8007a28 <HAL_RCC_OscConfig+0x248>)
 80079d4:	2201      	movs	r2, #1
 80079d6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80079d8:	f7fd fdb6 	bl	8005548 <HAL_GetTick>
 80079dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80079de:	e008      	b.n	80079f2 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80079e0:	f7fd fdb2 	bl	8005548 <HAL_GetTick>
 80079e4:	4602      	mov	r2, r0
 80079e6:	693b      	ldr	r3, [r7, #16]
 80079e8:	1ad3      	subs	r3, r2, r3
 80079ea:	2b02      	cmp	r3, #2
 80079ec:	d901      	bls.n	80079f2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80079ee:	2303      	movs	r3, #3
 80079f0:	e167      	b.n	8007cc2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80079f2:	4b0b      	ldr	r3, [pc, #44]	@ (8007a20 <HAL_RCC_OscConfig+0x240>)
 80079f4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80079f6:	f003 0302 	and.w	r3, r3, #2
 80079fa:	2b00      	cmp	r3, #0
 80079fc:	d0f0      	beq.n	80079e0 <HAL_RCC_OscConfig+0x200>
 80079fe:	e01b      	b.n	8007a38 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007a00:	4b09      	ldr	r3, [pc, #36]	@ (8007a28 <HAL_RCC_OscConfig+0x248>)
 8007a02:	2200      	movs	r2, #0
 8007a04:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007a06:	f7fd fd9f 	bl	8005548 <HAL_GetTick>
 8007a0a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007a0c:	e00e      	b.n	8007a2c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007a0e:	f7fd fd9b 	bl	8005548 <HAL_GetTick>
 8007a12:	4602      	mov	r2, r0
 8007a14:	693b      	ldr	r3, [r7, #16]
 8007a16:	1ad3      	subs	r3, r2, r3
 8007a18:	2b02      	cmp	r3, #2
 8007a1a:	d907      	bls.n	8007a2c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8007a1c:	2303      	movs	r3, #3
 8007a1e:	e150      	b.n	8007cc2 <HAL_RCC_OscConfig+0x4e2>
 8007a20:	40023800 	.word	0x40023800
 8007a24:	42470000 	.word	0x42470000
 8007a28:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007a2c:	4b88      	ldr	r3, [pc, #544]	@ (8007c50 <HAL_RCC_OscConfig+0x470>)
 8007a2e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007a30:	f003 0302 	and.w	r3, r3, #2
 8007a34:	2b00      	cmp	r3, #0
 8007a36:	d1ea      	bne.n	8007a0e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	f003 0304 	and.w	r3, r3, #4
 8007a40:	2b00      	cmp	r3, #0
 8007a42:	f000 8097 	beq.w	8007b74 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007a46:	2300      	movs	r3, #0
 8007a48:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007a4a:	4b81      	ldr	r3, [pc, #516]	@ (8007c50 <HAL_RCC_OscConfig+0x470>)
 8007a4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007a4e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	d10f      	bne.n	8007a76 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007a56:	2300      	movs	r3, #0
 8007a58:	60bb      	str	r3, [r7, #8]
 8007a5a:	4b7d      	ldr	r3, [pc, #500]	@ (8007c50 <HAL_RCC_OscConfig+0x470>)
 8007a5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007a5e:	4a7c      	ldr	r2, [pc, #496]	@ (8007c50 <HAL_RCC_OscConfig+0x470>)
 8007a60:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007a64:	6413      	str	r3, [r2, #64]	@ 0x40
 8007a66:	4b7a      	ldr	r3, [pc, #488]	@ (8007c50 <HAL_RCC_OscConfig+0x470>)
 8007a68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007a6a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007a6e:	60bb      	str	r3, [r7, #8]
 8007a70:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007a72:	2301      	movs	r3, #1
 8007a74:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007a76:	4b77      	ldr	r3, [pc, #476]	@ (8007c54 <HAL_RCC_OscConfig+0x474>)
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	d118      	bne.n	8007ab4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007a82:	4b74      	ldr	r3, [pc, #464]	@ (8007c54 <HAL_RCC_OscConfig+0x474>)
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	4a73      	ldr	r2, [pc, #460]	@ (8007c54 <HAL_RCC_OscConfig+0x474>)
 8007a88:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007a8c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007a8e:	f7fd fd5b 	bl	8005548 <HAL_GetTick>
 8007a92:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007a94:	e008      	b.n	8007aa8 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007a96:	f7fd fd57 	bl	8005548 <HAL_GetTick>
 8007a9a:	4602      	mov	r2, r0
 8007a9c:	693b      	ldr	r3, [r7, #16]
 8007a9e:	1ad3      	subs	r3, r2, r3
 8007aa0:	2b02      	cmp	r3, #2
 8007aa2:	d901      	bls.n	8007aa8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8007aa4:	2303      	movs	r3, #3
 8007aa6:	e10c      	b.n	8007cc2 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007aa8:	4b6a      	ldr	r3, [pc, #424]	@ (8007c54 <HAL_RCC_OscConfig+0x474>)
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	d0f0      	beq.n	8007a96 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	689b      	ldr	r3, [r3, #8]
 8007ab8:	2b01      	cmp	r3, #1
 8007aba:	d106      	bne.n	8007aca <HAL_RCC_OscConfig+0x2ea>
 8007abc:	4b64      	ldr	r3, [pc, #400]	@ (8007c50 <HAL_RCC_OscConfig+0x470>)
 8007abe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007ac0:	4a63      	ldr	r2, [pc, #396]	@ (8007c50 <HAL_RCC_OscConfig+0x470>)
 8007ac2:	f043 0301 	orr.w	r3, r3, #1
 8007ac6:	6713      	str	r3, [r2, #112]	@ 0x70
 8007ac8:	e01c      	b.n	8007b04 <HAL_RCC_OscConfig+0x324>
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	689b      	ldr	r3, [r3, #8]
 8007ace:	2b05      	cmp	r3, #5
 8007ad0:	d10c      	bne.n	8007aec <HAL_RCC_OscConfig+0x30c>
 8007ad2:	4b5f      	ldr	r3, [pc, #380]	@ (8007c50 <HAL_RCC_OscConfig+0x470>)
 8007ad4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007ad6:	4a5e      	ldr	r2, [pc, #376]	@ (8007c50 <HAL_RCC_OscConfig+0x470>)
 8007ad8:	f043 0304 	orr.w	r3, r3, #4
 8007adc:	6713      	str	r3, [r2, #112]	@ 0x70
 8007ade:	4b5c      	ldr	r3, [pc, #368]	@ (8007c50 <HAL_RCC_OscConfig+0x470>)
 8007ae0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007ae2:	4a5b      	ldr	r2, [pc, #364]	@ (8007c50 <HAL_RCC_OscConfig+0x470>)
 8007ae4:	f043 0301 	orr.w	r3, r3, #1
 8007ae8:	6713      	str	r3, [r2, #112]	@ 0x70
 8007aea:	e00b      	b.n	8007b04 <HAL_RCC_OscConfig+0x324>
 8007aec:	4b58      	ldr	r3, [pc, #352]	@ (8007c50 <HAL_RCC_OscConfig+0x470>)
 8007aee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007af0:	4a57      	ldr	r2, [pc, #348]	@ (8007c50 <HAL_RCC_OscConfig+0x470>)
 8007af2:	f023 0301 	bic.w	r3, r3, #1
 8007af6:	6713      	str	r3, [r2, #112]	@ 0x70
 8007af8:	4b55      	ldr	r3, [pc, #340]	@ (8007c50 <HAL_RCC_OscConfig+0x470>)
 8007afa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007afc:	4a54      	ldr	r2, [pc, #336]	@ (8007c50 <HAL_RCC_OscConfig+0x470>)
 8007afe:	f023 0304 	bic.w	r3, r3, #4
 8007b02:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	689b      	ldr	r3, [r3, #8]
 8007b08:	2b00      	cmp	r3, #0
 8007b0a:	d015      	beq.n	8007b38 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007b0c:	f7fd fd1c 	bl	8005548 <HAL_GetTick>
 8007b10:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007b12:	e00a      	b.n	8007b2a <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007b14:	f7fd fd18 	bl	8005548 <HAL_GetTick>
 8007b18:	4602      	mov	r2, r0
 8007b1a:	693b      	ldr	r3, [r7, #16]
 8007b1c:	1ad3      	subs	r3, r2, r3
 8007b1e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007b22:	4293      	cmp	r3, r2
 8007b24:	d901      	bls.n	8007b2a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8007b26:	2303      	movs	r3, #3
 8007b28:	e0cb      	b.n	8007cc2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007b2a:	4b49      	ldr	r3, [pc, #292]	@ (8007c50 <HAL_RCC_OscConfig+0x470>)
 8007b2c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007b2e:	f003 0302 	and.w	r3, r3, #2
 8007b32:	2b00      	cmp	r3, #0
 8007b34:	d0ee      	beq.n	8007b14 <HAL_RCC_OscConfig+0x334>
 8007b36:	e014      	b.n	8007b62 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007b38:	f7fd fd06 	bl	8005548 <HAL_GetTick>
 8007b3c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007b3e:	e00a      	b.n	8007b56 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007b40:	f7fd fd02 	bl	8005548 <HAL_GetTick>
 8007b44:	4602      	mov	r2, r0
 8007b46:	693b      	ldr	r3, [r7, #16]
 8007b48:	1ad3      	subs	r3, r2, r3
 8007b4a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007b4e:	4293      	cmp	r3, r2
 8007b50:	d901      	bls.n	8007b56 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8007b52:	2303      	movs	r3, #3
 8007b54:	e0b5      	b.n	8007cc2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007b56:	4b3e      	ldr	r3, [pc, #248]	@ (8007c50 <HAL_RCC_OscConfig+0x470>)
 8007b58:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007b5a:	f003 0302 	and.w	r3, r3, #2
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	d1ee      	bne.n	8007b40 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8007b62:	7dfb      	ldrb	r3, [r7, #23]
 8007b64:	2b01      	cmp	r3, #1
 8007b66:	d105      	bne.n	8007b74 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007b68:	4b39      	ldr	r3, [pc, #228]	@ (8007c50 <HAL_RCC_OscConfig+0x470>)
 8007b6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007b6c:	4a38      	ldr	r2, [pc, #224]	@ (8007c50 <HAL_RCC_OscConfig+0x470>)
 8007b6e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007b72:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	699b      	ldr	r3, [r3, #24]
 8007b78:	2b00      	cmp	r3, #0
 8007b7a:	f000 80a1 	beq.w	8007cc0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8007b7e:	4b34      	ldr	r3, [pc, #208]	@ (8007c50 <HAL_RCC_OscConfig+0x470>)
 8007b80:	689b      	ldr	r3, [r3, #8]
 8007b82:	f003 030c 	and.w	r3, r3, #12
 8007b86:	2b08      	cmp	r3, #8
 8007b88:	d05c      	beq.n	8007c44 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	699b      	ldr	r3, [r3, #24]
 8007b8e:	2b02      	cmp	r3, #2
 8007b90:	d141      	bne.n	8007c16 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007b92:	4b31      	ldr	r3, [pc, #196]	@ (8007c58 <HAL_RCC_OscConfig+0x478>)
 8007b94:	2200      	movs	r2, #0
 8007b96:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007b98:	f7fd fcd6 	bl	8005548 <HAL_GetTick>
 8007b9c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007b9e:	e008      	b.n	8007bb2 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007ba0:	f7fd fcd2 	bl	8005548 <HAL_GetTick>
 8007ba4:	4602      	mov	r2, r0
 8007ba6:	693b      	ldr	r3, [r7, #16]
 8007ba8:	1ad3      	subs	r3, r2, r3
 8007baa:	2b02      	cmp	r3, #2
 8007bac:	d901      	bls.n	8007bb2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8007bae:	2303      	movs	r3, #3
 8007bb0:	e087      	b.n	8007cc2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007bb2:	4b27      	ldr	r3, [pc, #156]	@ (8007c50 <HAL_RCC_OscConfig+0x470>)
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007bba:	2b00      	cmp	r3, #0
 8007bbc:	d1f0      	bne.n	8007ba0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	69da      	ldr	r2, [r3, #28]
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	6a1b      	ldr	r3, [r3, #32]
 8007bc6:	431a      	orrs	r2, r3
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007bcc:	019b      	lsls	r3, r3, #6
 8007bce:	431a      	orrs	r2, r3
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007bd4:	085b      	lsrs	r3, r3, #1
 8007bd6:	3b01      	subs	r3, #1
 8007bd8:	041b      	lsls	r3, r3, #16
 8007bda:	431a      	orrs	r2, r3
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007be0:	061b      	lsls	r3, r3, #24
 8007be2:	491b      	ldr	r1, [pc, #108]	@ (8007c50 <HAL_RCC_OscConfig+0x470>)
 8007be4:	4313      	orrs	r3, r2
 8007be6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007be8:	4b1b      	ldr	r3, [pc, #108]	@ (8007c58 <HAL_RCC_OscConfig+0x478>)
 8007bea:	2201      	movs	r2, #1
 8007bec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007bee:	f7fd fcab 	bl	8005548 <HAL_GetTick>
 8007bf2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007bf4:	e008      	b.n	8007c08 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007bf6:	f7fd fca7 	bl	8005548 <HAL_GetTick>
 8007bfa:	4602      	mov	r2, r0
 8007bfc:	693b      	ldr	r3, [r7, #16]
 8007bfe:	1ad3      	subs	r3, r2, r3
 8007c00:	2b02      	cmp	r3, #2
 8007c02:	d901      	bls.n	8007c08 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8007c04:	2303      	movs	r3, #3
 8007c06:	e05c      	b.n	8007cc2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007c08:	4b11      	ldr	r3, [pc, #68]	@ (8007c50 <HAL_RCC_OscConfig+0x470>)
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007c10:	2b00      	cmp	r3, #0
 8007c12:	d0f0      	beq.n	8007bf6 <HAL_RCC_OscConfig+0x416>
 8007c14:	e054      	b.n	8007cc0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007c16:	4b10      	ldr	r3, [pc, #64]	@ (8007c58 <HAL_RCC_OscConfig+0x478>)
 8007c18:	2200      	movs	r2, #0
 8007c1a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007c1c:	f7fd fc94 	bl	8005548 <HAL_GetTick>
 8007c20:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007c22:	e008      	b.n	8007c36 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007c24:	f7fd fc90 	bl	8005548 <HAL_GetTick>
 8007c28:	4602      	mov	r2, r0
 8007c2a:	693b      	ldr	r3, [r7, #16]
 8007c2c:	1ad3      	subs	r3, r2, r3
 8007c2e:	2b02      	cmp	r3, #2
 8007c30:	d901      	bls.n	8007c36 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8007c32:	2303      	movs	r3, #3
 8007c34:	e045      	b.n	8007cc2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007c36:	4b06      	ldr	r3, [pc, #24]	@ (8007c50 <HAL_RCC_OscConfig+0x470>)
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007c3e:	2b00      	cmp	r3, #0
 8007c40:	d1f0      	bne.n	8007c24 <HAL_RCC_OscConfig+0x444>
 8007c42:	e03d      	b.n	8007cc0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	699b      	ldr	r3, [r3, #24]
 8007c48:	2b01      	cmp	r3, #1
 8007c4a:	d107      	bne.n	8007c5c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8007c4c:	2301      	movs	r3, #1
 8007c4e:	e038      	b.n	8007cc2 <HAL_RCC_OscConfig+0x4e2>
 8007c50:	40023800 	.word	0x40023800
 8007c54:	40007000 	.word	0x40007000
 8007c58:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8007c5c:	4b1b      	ldr	r3, [pc, #108]	@ (8007ccc <HAL_RCC_OscConfig+0x4ec>)
 8007c5e:	685b      	ldr	r3, [r3, #4]
 8007c60:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	699b      	ldr	r3, [r3, #24]
 8007c66:	2b01      	cmp	r3, #1
 8007c68:	d028      	beq.n	8007cbc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007c74:	429a      	cmp	r2, r3
 8007c76:	d121      	bne.n	8007cbc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007c78:	68fb      	ldr	r3, [r7, #12]
 8007c7a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007c82:	429a      	cmp	r2, r3
 8007c84:	d11a      	bne.n	8007cbc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007c86:	68fa      	ldr	r2, [r7, #12]
 8007c88:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8007c8c:	4013      	ands	r3, r2
 8007c8e:	687a      	ldr	r2, [r7, #4]
 8007c90:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8007c92:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007c94:	4293      	cmp	r3, r2
 8007c96:	d111      	bne.n	8007cbc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007c98:	68fb      	ldr	r3, [r7, #12]
 8007c9a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007ca2:	085b      	lsrs	r3, r3, #1
 8007ca4:	3b01      	subs	r3, #1
 8007ca6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007ca8:	429a      	cmp	r2, r3
 8007caa:	d107      	bne.n	8007cbc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8007cac:	68fb      	ldr	r3, [r7, #12]
 8007cae:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007cb6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007cb8:	429a      	cmp	r2, r3
 8007cba:	d001      	beq.n	8007cc0 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8007cbc:	2301      	movs	r3, #1
 8007cbe:	e000      	b.n	8007cc2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8007cc0:	2300      	movs	r3, #0
}
 8007cc2:	4618      	mov	r0, r3
 8007cc4:	3718      	adds	r7, #24
 8007cc6:	46bd      	mov	sp, r7
 8007cc8:	bd80      	pop	{r7, pc}
 8007cca:	bf00      	nop
 8007ccc:	40023800 	.word	0x40023800

08007cd0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007cd0:	b580      	push	{r7, lr}
 8007cd2:	b084      	sub	sp, #16
 8007cd4:	af00      	add	r7, sp, #0
 8007cd6:	6078      	str	r0, [r7, #4]
 8007cd8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	2b00      	cmp	r3, #0
 8007cde:	d101      	bne.n	8007ce4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007ce0:	2301      	movs	r3, #1
 8007ce2:	e0cc      	b.n	8007e7e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007ce4:	4b68      	ldr	r3, [pc, #416]	@ (8007e88 <HAL_RCC_ClockConfig+0x1b8>)
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	f003 0307 	and.w	r3, r3, #7
 8007cec:	683a      	ldr	r2, [r7, #0]
 8007cee:	429a      	cmp	r2, r3
 8007cf0:	d90c      	bls.n	8007d0c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007cf2:	4b65      	ldr	r3, [pc, #404]	@ (8007e88 <HAL_RCC_ClockConfig+0x1b8>)
 8007cf4:	683a      	ldr	r2, [r7, #0]
 8007cf6:	b2d2      	uxtb	r2, r2
 8007cf8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007cfa:	4b63      	ldr	r3, [pc, #396]	@ (8007e88 <HAL_RCC_ClockConfig+0x1b8>)
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	f003 0307 	and.w	r3, r3, #7
 8007d02:	683a      	ldr	r2, [r7, #0]
 8007d04:	429a      	cmp	r2, r3
 8007d06:	d001      	beq.n	8007d0c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8007d08:	2301      	movs	r3, #1
 8007d0a:	e0b8      	b.n	8007e7e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	f003 0302 	and.w	r3, r3, #2
 8007d14:	2b00      	cmp	r3, #0
 8007d16:	d020      	beq.n	8007d5a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	f003 0304 	and.w	r3, r3, #4
 8007d20:	2b00      	cmp	r3, #0
 8007d22:	d005      	beq.n	8007d30 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007d24:	4b59      	ldr	r3, [pc, #356]	@ (8007e8c <HAL_RCC_ClockConfig+0x1bc>)
 8007d26:	689b      	ldr	r3, [r3, #8]
 8007d28:	4a58      	ldr	r2, [pc, #352]	@ (8007e8c <HAL_RCC_ClockConfig+0x1bc>)
 8007d2a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8007d2e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	f003 0308 	and.w	r3, r3, #8
 8007d38:	2b00      	cmp	r3, #0
 8007d3a:	d005      	beq.n	8007d48 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007d3c:	4b53      	ldr	r3, [pc, #332]	@ (8007e8c <HAL_RCC_ClockConfig+0x1bc>)
 8007d3e:	689b      	ldr	r3, [r3, #8]
 8007d40:	4a52      	ldr	r2, [pc, #328]	@ (8007e8c <HAL_RCC_ClockConfig+0x1bc>)
 8007d42:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8007d46:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007d48:	4b50      	ldr	r3, [pc, #320]	@ (8007e8c <HAL_RCC_ClockConfig+0x1bc>)
 8007d4a:	689b      	ldr	r3, [r3, #8]
 8007d4c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	689b      	ldr	r3, [r3, #8]
 8007d54:	494d      	ldr	r1, [pc, #308]	@ (8007e8c <HAL_RCC_ClockConfig+0x1bc>)
 8007d56:	4313      	orrs	r3, r2
 8007d58:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	f003 0301 	and.w	r3, r3, #1
 8007d62:	2b00      	cmp	r3, #0
 8007d64:	d044      	beq.n	8007df0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	685b      	ldr	r3, [r3, #4]
 8007d6a:	2b01      	cmp	r3, #1
 8007d6c:	d107      	bne.n	8007d7e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007d6e:	4b47      	ldr	r3, [pc, #284]	@ (8007e8c <HAL_RCC_ClockConfig+0x1bc>)
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007d76:	2b00      	cmp	r3, #0
 8007d78:	d119      	bne.n	8007dae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007d7a:	2301      	movs	r3, #1
 8007d7c:	e07f      	b.n	8007e7e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	685b      	ldr	r3, [r3, #4]
 8007d82:	2b02      	cmp	r3, #2
 8007d84:	d003      	beq.n	8007d8e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007d8a:	2b03      	cmp	r3, #3
 8007d8c:	d107      	bne.n	8007d9e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007d8e:	4b3f      	ldr	r3, [pc, #252]	@ (8007e8c <HAL_RCC_ClockConfig+0x1bc>)
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007d96:	2b00      	cmp	r3, #0
 8007d98:	d109      	bne.n	8007dae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007d9a:	2301      	movs	r3, #1
 8007d9c:	e06f      	b.n	8007e7e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007d9e:	4b3b      	ldr	r3, [pc, #236]	@ (8007e8c <HAL_RCC_ClockConfig+0x1bc>)
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	f003 0302 	and.w	r3, r3, #2
 8007da6:	2b00      	cmp	r3, #0
 8007da8:	d101      	bne.n	8007dae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007daa:	2301      	movs	r3, #1
 8007dac:	e067      	b.n	8007e7e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007dae:	4b37      	ldr	r3, [pc, #220]	@ (8007e8c <HAL_RCC_ClockConfig+0x1bc>)
 8007db0:	689b      	ldr	r3, [r3, #8]
 8007db2:	f023 0203 	bic.w	r2, r3, #3
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	685b      	ldr	r3, [r3, #4]
 8007dba:	4934      	ldr	r1, [pc, #208]	@ (8007e8c <HAL_RCC_ClockConfig+0x1bc>)
 8007dbc:	4313      	orrs	r3, r2
 8007dbe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007dc0:	f7fd fbc2 	bl	8005548 <HAL_GetTick>
 8007dc4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007dc6:	e00a      	b.n	8007dde <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007dc8:	f7fd fbbe 	bl	8005548 <HAL_GetTick>
 8007dcc:	4602      	mov	r2, r0
 8007dce:	68fb      	ldr	r3, [r7, #12]
 8007dd0:	1ad3      	subs	r3, r2, r3
 8007dd2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007dd6:	4293      	cmp	r3, r2
 8007dd8:	d901      	bls.n	8007dde <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8007dda:	2303      	movs	r3, #3
 8007ddc:	e04f      	b.n	8007e7e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007dde:	4b2b      	ldr	r3, [pc, #172]	@ (8007e8c <HAL_RCC_ClockConfig+0x1bc>)
 8007de0:	689b      	ldr	r3, [r3, #8]
 8007de2:	f003 020c 	and.w	r2, r3, #12
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	685b      	ldr	r3, [r3, #4]
 8007dea:	009b      	lsls	r3, r3, #2
 8007dec:	429a      	cmp	r2, r3
 8007dee:	d1eb      	bne.n	8007dc8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007df0:	4b25      	ldr	r3, [pc, #148]	@ (8007e88 <HAL_RCC_ClockConfig+0x1b8>)
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	f003 0307 	and.w	r3, r3, #7
 8007df8:	683a      	ldr	r2, [r7, #0]
 8007dfa:	429a      	cmp	r2, r3
 8007dfc:	d20c      	bcs.n	8007e18 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007dfe:	4b22      	ldr	r3, [pc, #136]	@ (8007e88 <HAL_RCC_ClockConfig+0x1b8>)
 8007e00:	683a      	ldr	r2, [r7, #0]
 8007e02:	b2d2      	uxtb	r2, r2
 8007e04:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007e06:	4b20      	ldr	r3, [pc, #128]	@ (8007e88 <HAL_RCC_ClockConfig+0x1b8>)
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	f003 0307 	and.w	r3, r3, #7
 8007e0e:	683a      	ldr	r2, [r7, #0]
 8007e10:	429a      	cmp	r2, r3
 8007e12:	d001      	beq.n	8007e18 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8007e14:	2301      	movs	r3, #1
 8007e16:	e032      	b.n	8007e7e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	f003 0304 	and.w	r3, r3, #4
 8007e20:	2b00      	cmp	r3, #0
 8007e22:	d008      	beq.n	8007e36 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007e24:	4b19      	ldr	r3, [pc, #100]	@ (8007e8c <HAL_RCC_ClockConfig+0x1bc>)
 8007e26:	689b      	ldr	r3, [r3, #8]
 8007e28:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	68db      	ldr	r3, [r3, #12]
 8007e30:	4916      	ldr	r1, [pc, #88]	@ (8007e8c <HAL_RCC_ClockConfig+0x1bc>)
 8007e32:	4313      	orrs	r3, r2
 8007e34:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	f003 0308 	and.w	r3, r3, #8
 8007e3e:	2b00      	cmp	r3, #0
 8007e40:	d009      	beq.n	8007e56 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007e42:	4b12      	ldr	r3, [pc, #72]	@ (8007e8c <HAL_RCC_ClockConfig+0x1bc>)
 8007e44:	689b      	ldr	r3, [r3, #8]
 8007e46:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	691b      	ldr	r3, [r3, #16]
 8007e4e:	00db      	lsls	r3, r3, #3
 8007e50:	490e      	ldr	r1, [pc, #56]	@ (8007e8c <HAL_RCC_ClockConfig+0x1bc>)
 8007e52:	4313      	orrs	r3, r2
 8007e54:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8007e56:	f000 f821 	bl	8007e9c <HAL_RCC_GetSysClockFreq>
 8007e5a:	4602      	mov	r2, r0
 8007e5c:	4b0b      	ldr	r3, [pc, #44]	@ (8007e8c <HAL_RCC_ClockConfig+0x1bc>)
 8007e5e:	689b      	ldr	r3, [r3, #8]
 8007e60:	091b      	lsrs	r3, r3, #4
 8007e62:	f003 030f 	and.w	r3, r3, #15
 8007e66:	490a      	ldr	r1, [pc, #40]	@ (8007e90 <HAL_RCC_ClockConfig+0x1c0>)
 8007e68:	5ccb      	ldrb	r3, [r1, r3]
 8007e6a:	fa22 f303 	lsr.w	r3, r2, r3
 8007e6e:	4a09      	ldr	r2, [pc, #36]	@ (8007e94 <HAL_RCC_ClockConfig+0x1c4>)
 8007e70:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8007e72:	4b09      	ldr	r3, [pc, #36]	@ (8007e98 <HAL_RCC_ClockConfig+0x1c8>)
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	4618      	mov	r0, r3
 8007e78:	f7fd fb22 	bl	80054c0 <HAL_InitTick>

  return HAL_OK;
 8007e7c:	2300      	movs	r3, #0
}
 8007e7e:	4618      	mov	r0, r3
 8007e80:	3710      	adds	r7, #16
 8007e82:	46bd      	mov	sp, r7
 8007e84:	bd80      	pop	{r7, pc}
 8007e86:	bf00      	nop
 8007e88:	40023c00 	.word	0x40023c00
 8007e8c:	40023800 	.word	0x40023800
 8007e90:	08011ac4 	.word	0x08011ac4
 8007e94:	2000d114 	.word	0x2000d114
 8007e98:	2000d118 	.word	0x2000d118

08007e9c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007e9c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007ea0:	b094      	sub	sp, #80	@ 0x50
 8007ea2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8007ea4:	2300      	movs	r3, #0
 8007ea6:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8007ea8:	2300      	movs	r3, #0
 8007eaa:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8007eac:	2300      	movs	r3, #0
 8007eae:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8007eb0:	2300      	movs	r3, #0
 8007eb2:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007eb4:	4b79      	ldr	r3, [pc, #484]	@ (800809c <HAL_RCC_GetSysClockFreq+0x200>)
 8007eb6:	689b      	ldr	r3, [r3, #8]
 8007eb8:	f003 030c 	and.w	r3, r3, #12
 8007ebc:	2b08      	cmp	r3, #8
 8007ebe:	d00d      	beq.n	8007edc <HAL_RCC_GetSysClockFreq+0x40>
 8007ec0:	2b08      	cmp	r3, #8
 8007ec2:	f200 80e1 	bhi.w	8008088 <HAL_RCC_GetSysClockFreq+0x1ec>
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	d002      	beq.n	8007ed0 <HAL_RCC_GetSysClockFreq+0x34>
 8007eca:	2b04      	cmp	r3, #4
 8007ecc:	d003      	beq.n	8007ed6 <HAL_RCC_GetSysClockFreq+0x3a>
 8007ece:	e0db      	b.n	8008088 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007ed0:	4b73      	ldr	r3, [pc, #460]	@ (80080a0 <HAL_RCC_GetSysClockFreq+0x204>)
 8007ed2:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8007ed4:	e0db      	b.n	800808e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8007ed6:	4b73      	ldr	r3, [pc, #460]	@ (80080a4 <HAL_RCC_GetSysClockFreq+0x208>)
 8007ed8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8007eda:	e0d8      	b.n	800808e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007edc:	4b6f      	ldr	r3, [pc, #444]	@ (800809c <HAL_RCC_GetSysClockFreq+0x200>)
 8007ede:	685b      	ldr	r3, [r3, #4]
 8007ee0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007ee4:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8007ee6:	4b6d      	ldr	r3, [pc, #436]	@ (800809c <HAL_RCC_GetSysClockFreq+0x200>)
 8007ee8:	685b      	ldr	r3, [r3, #4]
 8007eea:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007eee:	2b00      	cmp	r3, #0
 8007ef0:	d063      	beq.n	8007fba <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007ef2:	4b6a      	ldr	r3, [pc, #424]	@ (800809c <HAL_RCC_GetSysClockFreq+0x200>)
 8007ef4:	685b      	ldr	r3, [r3, #4]
 8007ef6:	099b      	lsrs	r3, r3, #6
 8007ef8:	2200      	movs	r2, #0
 8007efa:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007efc:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8007efe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f00:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007f04:	633b      	str	r3, [r7, #48]	@ 0x30
 8007f06:	2300      	movs	r3, #0
 8007f08:	637b      	str	r3, [r7, #52]	@ 0x34
 8007f0a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8007f0e:	4622      	mov	r2, r4
 8007f10:	462b      	mov	r3, r5
 8007f12:	f04f 0000 	mov.w	r0, #0
 8007f16:	f04f 0100 	mov.w	r1, #0
 8007f1a:	0159      	lsls	r1, r3, #5
 8007f1c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007f20:	0150      	lsls	r0, r2, #5
 8007f22:	4602      	mov	r2, r0
 8007f24:	460b      	mov	r3, r1
 8007f26:	4621      	mov	r1, r4
 8007f28:	1a51      	subs	r1, r2, r1
 8007f2a:	6139      	str	r1, [r7, #16]
 8007f2c:	4629      	mov	r1, r5
 8007f2e:	eb63 0301 	sbc.w	r3, r3, r1
 8007f32:	617b      	str	r3, [r7, #20]
 8007f34:	f04f 0200 	mov.w	r2, #0
 8007f38:	f04f 0300 	mov.w	r3, #0
 8007f3c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007f40:	4659      	mov	r1, fp
 8007f42:	018b      	lsls	r3, r1, #6
 8007f44:	4651      	mov	r1, sl
 8007f46:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8007f4a:	4651      	mov	r1, sl
 8007f4c:	018a      	lsls	r2, r1, #6
 8007f4e:	4651      	mov	r1, sl
 8007f50:	ebb2 0801 	subs.w	r8, r2, r1
 8007f54:	4659      	mov	r1, fp
 8007f56:	eb63 0901 	sbc.w	r9, r3, r1
 8007f5a:	f04f 0200 	mov.w	r2, #0
 8007f5e:	f04f 0300 	mov.w	r3, #0
 8007f62:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007f66:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007f6a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007f6e:	4690      	mov	r8, r2
 8007f70:	4699      	mov	r9, r3
 8007f72:	4623      	mov	r3, r4
 8007f74:	eb18 0303 	adds.w	r3, r8, r3
 8007f78:	60bb      	str	r3, [r7, #8]
 8007f7a:	462b      	mov	r3, r5
 8007f7c:	eb49 0303 	adc.w	r3, r9, r3
 8007f80:	60fb      	str	r3, [r7, #12]
 8007f82:	f04f 0200 	mov.w	r2, #0
 8007f86:	f04f 0300 	mov.w	r3, #0
 8007f8a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8007f8e:	4629      	mov	r1, r5
 8007f90:	024b      	lsls	r3, r1, #9
 8007f92:	4621      	mov	r1, r4
 8007f94:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8007f98:	4621      	mov	r1, r4
 8007f9a:	024a      	lsls	r2, r1, #9
 8007f9c:	4610      	mov	r0, r2
 8007f9e:	4619      	mov	r1, r3
 8007fa0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007fa2:	2200      	movs	r2, #0
 8007fa4:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007fa6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007fa8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8007fac:	f7f8 fe74 	bl	8000c98 <__aeabi_uldivmod>
 8007fb0:	4602      	mov	r2, r0
 8007fb2:	460b      	mov	r3, r1
 8007fb4:	4613      	mov	r3, r2
 8007fb6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007fb8:	e058      	b.n	800806c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007fba:	4b38      	ldr	r3, [pc, #224]	@ (800809c <HAL_RCC_GetSysClockFreq+0x200>)
 8007fbc:	685b      	ldr	r3, [r3, #4]
 8007fbe:	099b      	lsrs	r3, r3, #6
 8007fc0:	2200      	movs	r2, #0
 8007fc2:	4618      	mov	r0, r3
 8007fc4:	4611      	mov	r1, r2
 8007fc6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8007fca:	623b      	str	r3, [r7, #32]
 8007fcc:	2300      	movs	r3, #0
 8007fce:	627b      	str	r3, [r7, #36]	@ 0x24
 8007fd0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8007fd4:	4642      	mov	r2, r8
 8007fd6:	464b      	mov	r3, r9
 8007fd8:	f04f 0000 	mov.w	r0, #0
 8007fdc:	f04f 0100 	mov.w	r1, #0
 8007fe0:	0159      	lsls	r1, r3, #5
 8007fe2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007fe6:	0150      	lsls	r0, r2, #5
 8007fe8:	4602      	mov	r2, r0
 8007fea:	460b      	mov	r3, r1
 8007fec:	4641      	mov	r1, r8
 8007fee:	ebb2 0a01 	subs.w	sl, r2, r1
 8007ff2:	4649      	mov	r1, r9
 8007ff4:	eb63 0b01 	sbc.w	fp, r3, r1
 8007ff8:	f04f 0200 	mov.w	r2, #0
 8007ffc:	f04f 0300 	mov.w	r3, #0
 8008000:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8008004:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8008008:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800800c:	ebb2 040a 	subs.w	r4, r2, sl
 8008010:	eb63 050b 	sbc.w	r5, r3, fp
 8008014:	f04f 0200 	mov.w	r2, #0
 8008018:	f04f 0300 	mov.w	r3, #0
 800801c:	00eb      	lsls	r3, r5, #3
 800801e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008022:	00e2      	lsls	r2, r4, #3
 8008024:	4614      	mov	r4, r2
 8008026:	461d      	mov	r5, r3
 8008028:	4643      	mov	r3, r8
 800802a:	18e3      	adds	r3, r4, r3
 800802c:	603b      	str	r3, [r7, #0]
 800802e:	464b      	mov	r3, r9
 8008030:	eb45 0303 	adc.w	r3, r5, r3
 8008034:	607b      	str	r3, [r7, #4]
 8008036:	f04f 0200 	mov.w	r2, #0
 800803a:	f04f 0300 	mov.w	r3, #0
 800803e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8008042:	4629      	mov	r1, r5
 8008044:	028b      	lsls	r3, r1, #10
 8008046:	4621      	mov	r1, r4
 8008048:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800804c:	4621      	mov	r1, r4
 800804e:	028a      	lsls	r2, r1, #10
 8008050:	4610      	mov	r0, r2
 8008052:	4619      	mov	r1, r3
 8008054:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008056:	2200      	movs	r2, #0
 8008058:	61bb      	str	r3, [r7, #24]
 800805a:	61fa      	str	r2, [r7, #28]
 800805c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008060:	f7f8 fe1a 	bl	8000c98 <__aeabi_uldivmod>
 8008064:	4602      	mov	r2, r0
 8008066:	460b      	mov	r3, r1
 8008068:	4613      	mov	r3, r2
 800806a:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 800806c:	4b0b      	ldr	r3, [pc, #44]	@ (800809c <HAL_RCC_GetSysClockFreq+0x200>)
 800806e:	685b      	ldr	r3, [r3, #4]
 8008070:	0c1b      	lsrs	r3, r3, #16
 8008072:	f003 0303 	and.w	r3, r3, #3
 8008076:	3301      	adds	r3, #1
 8008078:	005b      	lsls	r3, r3, #1
 800807a:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 800807c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800807e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008080:	fbb2 f3f3 	udiv	r3, r2, r3
 8008084:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8008086:	e002      	b.n	800808e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8008088:	4b05      	ldr	r3, [pc, #20]	@ (80080a0 <HAL_RCC_GetSysClockFreq+0x204>)
 800808a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800808c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800808e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8008090:	4618      	mov	r0, r3
 8008092:	3750      	adds	r7, #80	@ 0x50
 8008094:	46bd      	mov	sp, r7
 8008096:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800809a:	bf00      	nop
 800809c:	40023800 	.word	0x40023800
 80080a0:	00f42400 	.word	0x00f42400
 80080a4:	007a1200 	.word	0x007a1200

080080a8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80080a8:	b480      	push	{r7}
 80080aa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80080ac:	4b03      	ldr	r3, [pc, #12]	@ (80080bc <HAL_RCC_GetHCLKFreq+0x14>)
 80080ae:	681b      	ldr	r3, [r3, #0]
}
 80080b0:	4618      	mov	r0, r3
 80080b2:	46bd      	mov	sp, r7
 80080b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080b8:	4770      	bx	lr
 80080ba:	bf00      	nop
 80080bc:	2000d114 	.word	0x2000d114

080080c0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80080c0:	b580      	push	{r7, lr}
 80080c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80080c4:	f7ff fff0 	bl	80080a8 <HAL_RCC_GetHCLKFreq>
 80080c8:	4602      	mov	r2, r0
 80080ca:	4b05      	ldr	r3, [pc, #20]	@ (80080e0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80080cc:	689b      	ldr	r3, [r3, #8]
 80080ce:	0a9b      	lsrs	r3, r3, #10
 80080d0:	f003 0307 	and.w	r3, r3, #7
 80080d4:	4903      	ldr	r1, [pc, #12]	@ (80080e4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80080d6:	5ccb      	ldrb	r3, [r1, r3]
 80080d8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80080dc:	4618      	mov	r0, r3
 80080de:	bd80      	pop	{r7, pc}
 80080e0:	40023800 	.word	0x40023800
 80080e4:	08011ad4 	.word	0x08011ad4

080080e8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80080e8:	b580      	push	{r7, lr}
 80080ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80080ec:	f7ff ffdc 	bl	80080a8 <HAL_RCC_GetHCLKFreq>
 80080f0:	4602      	mov	r2, r0
 80080f2:	4b05      	ldr	r3, [pc, #20]	@ (8008108 <HAL_RCC_GetPCLK2Freq+0x20>)
 80080f4:	689b      	ldr	r3, [r3, #8]
 80080f6:	0b5b      	lsrs	r3, r3, #13
 80080f8:	f003 0307 	and.w	r3, r3, #7
 80080fc:	4903      	ldr	r1, [pc, #12]	@ (800810c <HAL_RCC_GetPCLK2Freq+0x24>)
 80080fe:	5ccb      	ldrb	r3, [r1, r3]
 8008100:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008104:	4618      	mov	r0, r3
 8008106:	bd80      	pop	{r7, pc}
 8008108:	40023800 	.word	0x40023800
 800810c:	08011ad4 	.word	0x08011ad4

08008110 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008110:	b580      	push	{r7, lr}
 8008112:	b086      	sub	sp, #24
 8008114:	af00      	add	r7, sp, #0
 8008116:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8008118:	2300      	movs	r3, #0
 800811a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 800811c:	2300      	movs	r3, #0
 800811e:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	f003 0301 	and.w	r3, r3, #1
 8008128:	2b00      	cmp	r3, #0
 800812a:	d105      	bne.n	8008138 <HAL_RCCEx_PeriphCLKConfig+0x28>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	f003 0304 	and.w	r3, r3, #4
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8008134:	2b00      	cmp	r3, #0
 8008136:	d038      	beq.n	80081aa <HAL_RCCEx_PeriphCLKConfig+0x9a>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8008138:	4b68      	ldr	r3, [pc, #416]	@ (80082dc <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800813a:	2200      	movs	r2, #0
 800813c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800813e:	f7fd fa03 	bl	8005548 <HAL_GetTick>
 8008142:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8008144:	e008      	b.n	8008158 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8008146:	f7fd f9ff 	bl	8005548 <HAL_GetTick>
 800814a:	4602      	mov	r2, r0
 800814c:	697b      	ldr	r3, [r7, #20]
 800814e:	1ad3      	subs	r3, r2, r3
 8008150:	2b02      	cmp	r3, #2
 8008152:	d901      	bls.n	8008158 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008154:	2303      	movs	r3, #3
 8008156:	e0bd      	b.n	80082d4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8008158:	4b61      	ldr	r3, [pc, #388]	@ (80082e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008160:	2b00      	cmp	r3, #0
 8008162:	d1f0      	bne.n	8008146 <HAL_RCCEx_PeriphCLKConfig+0x36>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN,
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	685a      	ldr	r2, [r3, #4]
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	689b      	ldr	r3, [r3, #8]
 800816c:	019b      	lsls	r3, r3, #6
 800816e:	431a      	orrs	r2, r3
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	68db      	ldr	r3, [r3, #12]
 8008174:	071b      	lsls	r3, r3, #28
 8008176:	495a      	ldr	r1, [pc, #360]	@ (80082e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008178:	4313      	orrs	r3, r2
 800817a:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800817e:	4b57      	ldr	r3, [pc, #348]	@ (80082dc <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8008180:	2201      	movs	r2, #1
 8008182:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8008184:	f7fd f9e0 	bl	8005548 <HAL_GetTick>
 8008188:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800818a:	e008      	b.n	800819e <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800818c:	f7fd f9dc 	bl	8005548 <HAL_GetTick>
 8008190:	4602      	mov	r2, r0
 8008192:	697b      	ldr	r3, [r7, #20]
 8008194:	1ad3      	subs	r3, r2, r3
 8008196:	2b02      	cmp	r3, #2
 8008198:	d901      	bls.n	800819e <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800819a:	2303      	movs	r3, #3
 800819c:	e09a      	b.n	80082d4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800819e:	4b50      	ldr	r3, [pc, #320]	@ (80082e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80081a6:	2b00      	cmp	r3, #0
 80081a8:	d0f0      	beq.n	800818c <HAL_RCCEx_PeriphCLKConfig+0x7c>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	f003 0302 	and.w	r3, r3, #2
 80081b2:	2b00      	cmp	r3, #0
 80081b4:	f000 8083 	beq.w	80082be <HAL_RCCEx_PeriphCLKConfig+0x1ae>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80081b8:	2300      	movs	r3, #0
 80081ba:	60fb      	str	r3, [r7, #12]
 80081bc:	4b48      	ldr	r3, [pc, #288]	@ (80082e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80081be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80081c0:	4a47      	ldr	r2, [pc, #284]	@ (80082e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80081c2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80081c6:	6413      	str	r3, [r2, #64]	@ 0x40
 80081c8:	4b45      	ldr	r3, [pc, #276]	@ (80082e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80081ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80081cc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80081d0:	60fb      	str	r3, [r7, #12]
 80081d2:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80081d4:	4b43      	ldr	r3, [pc, #268]	@ (80082e4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80081d6:	681b      	ldr	r3, [r3, #0]
 80081d8:	4a42      	ldr	r2, [pc, #264]	@ (80082e4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80081da:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80081de:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80081e0:	f7fd f9b2 	bl	8005548 <HAL_GetTick>
 80081e4:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 80081e6:	e008      	b.n	80081fa <HAL_RCCEx_PeriphCLKConfig+0xea>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80081e8:	f7fd f9ae 	bl	8005548 <HAL_GetTick>
 80081ec:	4602      	mov	r2, r0
 80081ee:	697b      	ldr	r3, [r7, #20]
 80081f0:	1ad3      	subs	r3, r2, r3
 80081f2:	2b02      	cmp	r3, #2
 80081f4:	d901      	bls.n	80081fa <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        return HAL_TIMEOUT;
 80081f6:	2303      	movs	r3, #3
 80081f8:	e06c      	b.n	80082d4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 80081fa:	4b3a      	ldr	r3, [pc, #232]	@ (80082e4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008202:	2b00      	cmp	r3, #0
 8008204:	d0f0      	beq.n	80081e8 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8008206:	4b36      	ldr	r3, [pc, #216]	@ (80082e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008208:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800820a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800820e:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8008210:	693b      	ldr	r3, [r7, #16]
 8008212:	2b00      	cmp	r3, #0
 8008214:	d02f      	beq.n	8008276 <HAL_RCCEx_PeriphCLKConfig+0x166>
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	691b      	ldr	r3, [r3, #16]
 800821a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800821e:	693a      	ldr	r2, [r7, #16]
 8008220:	429a      	cmp	r2, r3
 8008222:	d028      	beq.n	8008276 <HAL_RCCEx_PeriphCLKConfig+0x166>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8008224:	4b2e      	ldr	r3, [pc, #184]	@ (80082e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008226:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008228:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800822c:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800822e:	4b2e      	ldr	r3, [pc, #184]	@ (80082e8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8008230:	2201      	movs	r2, #1
 8008232:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8008234:	4b2c      	ldr	r3, [pc, #176]	@ (80082e8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8008236:	2200      	movs	r2, #0
 8008238:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800823a:	4a29      	ldr	r2, [pc, #164]	@ (80082e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800823c:	693b      	ldr	r3, [r7, #16]
 800823e:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8008240:	4b27      	ldr	r3, [pc, #156]	@ (80082e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008242:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008244:	f003 0301 	and.w	r3, r3, #1
 8008248:	2b01      	cmp	r3, #1
 800824a:	d114      	bne.n	8008276 <HAL_RCCEx_PeriphCLKConfig+0x166>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800824c:	f7fd f97c 	bl	8005548 <HAL_GetTick>
 8008250:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008252:	e00a      	b.n	800826a <HAL_RCCEx_PeriphCLKConfig+0x15a>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008254:	f7fd f978 	bl	8005548 <HAL_GetTick>
 8008258:	4602      	mov	r2, r0
 800825a:	697b      	ldr	r3, [r7, #20]
 800825c:	1ad3      	subs	r3, r2, r3
 800825e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008262:	4293      	cmp	r3, r2
 8008264:	d901      	bls.n	800826a <HAL_RCCEx_PeriphCLKConfig+0x15a>
          {
            return HAL_TIMEOUT;
 8008266:	2303      	movs	r3, #3
 8008268:	e034      	b.n	80082d4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800826a:	4b1d      	ldr	r3, [pc, #116]	@ (80082e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800826c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800826e:	f003 0302 	and.w	r3, r3, #2
 8008272:	2b00      	cmp	r3, #0
 8008274:	d0ee      	beq.n	8008254 <HAL_RCCEx_PeriphCLKConfig+0x144>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	691b      	ldr	r3, [r3, #16]
 800827a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800827e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008282:	d10d      	bne.n	80082a0 <HAL_RCCEx_PeriphCLKConfig+0x190>
 8008284:	4b16      	ldr	r3, [pc, #88]	@ (80082e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008286:	689b      	ldr	r3, [r3, #8]
 8008288:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	691b      	ldr	r3, [r3, #16]
 8008290:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8008294:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008298:	4911      	ldr	r1, [pc, #68]	@ (80082e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800829a:	4313      	orrs	r3, r2
 800829c:	608b      	str	r3, [r1, #8]
 800829e:	e005      	b.n	80082ac <HAL_RCCEx_PeriphCLKConfig+0x19c>
 80082a0:	4b0f      	ldr	r3, [pc, #60]	@ (80082e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80082a2:	689b      	ldr	r3, [r3, #8]
 80082a4:	4a0e      	ldr	r2, [pc, #56]	@ (80082e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80082a6:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 80082aa:	6093      	str	r3, [r2, #8]
 80082ac:	4b0c      	ldr	r3, [pc, #48]	@ (80082e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80082ae:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	691b      	ldr	r3, [r3, #16]
 80082b4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80082b8:	4909      	ldr	r1, [pc, #36]	@ (80082e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80082ba:	4313      	orrs	r3, r2
 80082bc:	670b      	str	r3, [r1, #112]	@ 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	681b      	ldr	r3, [r3, #0]
 80082c2:	f003 0308 	and.w	r3, r3, #8
 80082c6:	2b00      	cmp	r3, #0
 80082c8:	d003      	beq.n	80082d2 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	7d1a      	ldrb	r2, [r3, #20]
 80082ce:	4b07      	ldr	r3, [pc, #28]	@ (80082ec <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 80082d0:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 80082d2:	2300      	movs	r3, #0
}
 80082d4:	4618      	mov	r0, r3
 80082d6:	3718      	adds	r7, #24
 80082d8:	46bd      	mov	sp, r7
 80082da:	bd80      	pop	{r7, pc}
 80082dc:	42470068 	.word	0x42470068
 80082e0:	40023800 	.word	0x40023800
 80082e4:	40007000 	.word	0x40007000
 80082e8:	42470e40 	.word	0x42470e40
 80082ec:	424711e0 	.word	0x424711e0

080082f0 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80082f0:	b480      	push	{r7}
 80082f2:	b087      	sub	sp, #28
 80082f4:	af00      	add	r7, sp, #0
 80082f6:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 80082f8:	2300      	movs	r3, #0
 80082fa:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 80082fc:	2300      	movs	r3, #0
 80082fe:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8008300:	2300      	movs	r3, #0
 8008302:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8008304:	2300      	movs	r3, #0
 8008306:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	2b01      	cmp	r3, #1
 800830c:	d141      	bne.n	8008392 <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
  {
    case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 800830e:	4b25      	ldr	r3, [pc, #148]	@ (80083a4 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8008310:	689b      	ldr	r3, [r3, #8]
 8008312:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008316:	60fb      	str	r3, [r7, #12]
      switch (srcclk)
 8008318:	68fb      	ldr	r3, [r7, #12]
 800831a:	2b00      	cmp	r3, #0
 800831c:	d006      	beq.n	800832c <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
 800831e:	68fb      	ldr	r3, [r7, #12]
 8008320:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8008324:	d131      	bne.n	800838a <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
      {
        /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
        case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8008326:	4b20      	ldr	r3, [pc, #128]	@ (80083a8 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8008328:	617b      	str	r3, [r7, #20]
          break;
 800832a:	e031      	b.n	8008390 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
        case RCC_I2SCLKSOURCE_PLLI2S:
        {
#if defined(STM32F411xE)
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
          if ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800832c:	4b1d      	ldr	r3, [pc, #116]	@ (80083a4 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 800832e:	685b      	ldr	r3, [r3, #4]
 8008330:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008334:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008338:	d109      	bne.n	800834e <HAL_RCCEx_GetPeriphCLKFreq+0x5e>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 800833a:	4b1a      	ldr	r3, [pc, #104]	@ (80083a4 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 800833c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008340:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008344:	4a19      	ldr	r2, [pc, #100]	@ (80083ac <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
 8008346:	fbb2 f3f3 	udiv	r3, r2, r3
 800834a:	613b      	str	r3, [r7, #16]
 800834c:	e008      	b.n	8008360 <HAL_RCCEx_GetPeriphCLKFreq+0x70>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 800834e:	4b15      	ldr	r3, [pc, #84]	@ (80083a4 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8008350:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008354:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008358:	4a15      	ldr	r2, [pc, #84]	@ (80083b0 <HAL_RCCEx_GetPeriphCLKFreq+0xc0>)
 800835a:	fbb2 f3f3 	udiv	r3, r2, r3
 800835e:	613b      	str	r3, [r7, #16]
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8008360:	4b10      	ldr	r3, [pc, #64]	@ (80083a4 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8008362:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008366:	099b      	lsrs	r3, r3, #6
 8008368:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800836c:	693b      	ldr	r3, [r7, #16]
 800836e:	fb02 f303 	mul.w	r3, r2, r3
 8008372:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput / (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8008374:	4b0b      	ldr	r3, [pc, #44]	@ (80083a4 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8008376:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800837a:	0f1b      	lsrs	r3, r3, #28
 800837c:	f003 0307 	and.w	r3, r3, #7
 8008380:	68ba      	ldr	r2, [r7, #8]
 8008382:	fbb2 f3f3 	udiv	r3, r2, r3
 8008386:	617b      	str	r3, [r7, #20]
          break;
 8008388:	e002      	b.n	8008390 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
        }
        /* Clock not enabled for I2S*/
        default:
        {
          frequency = 0U;
 800838a:	2300      	movs	r3, #0
 800838c:	617b      	str	r3, [r7, #20]
          break;
 800838e:	bf00      	nop
        }
      }
      break;
 8008390:	e000      	b.n	8008394 <HAL_RCCEx_GetPeriphCLKFreq+0xa4>
    }
    default:
    {
      break;
 8008392:	bf00      	nop
    }
  }
  return frequency;
 8008394:	697b      	ldr	r3, [r7, #20]
}
 8008396:	4618      	mov	r0, r3
 8008398:	371c      	adds	r7, #28
 800839a:	46bd      	mov	sp, r7
 800839c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083a0:	4770      	bx	lr
 80083a2:	bf00      	nop
 80083a4:	40023800 	.word	0x40023800
 80083a8:	00bb8000 	.word	0x00bb8000
 80083ac:	007a1200 	.word	0x007a1200
 80083b0:	00f42400 	.word	0x00f42400

080083b4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80083b4:	b580      	push	{r7, lr}
 80083b6:	b082      	sub	sp, #8
 80083b8:	af00      	add	r7, sp, #0
 80083ba:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	2b00      	cmp	r3, #0
 80083c0:	d101      	bne.n	80083c6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80083c2:	2301      	movs	r3, #1
 80083c4:	e07b      	b.n	80084be <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80083ca:	2b00      	cmp	r3, #0
 80083cc:	d108      	bne.n	80083e0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	685b      	ldr	r3, [r3, #4]
 80083d2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80083d6:	d009      	beq.n	80083ec <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	2200      	movs	r2, #0
 80083dc:	61da      	str	r2, [r3, #28]
 80083de:	e005      	b.n	80083ec <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	2200      	movs	r2, #0
 80083e4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	2200      	movs	r2, #0
 80083ea:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	2200      	movs	r2, #0
 80083f0:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80083f8:	b2db      	uxtb	r3, r3
 80083fa:	2b00      	cmp	r3, #0
 80083fc:	d106      	bne.n	800840c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	2200      	movs	r2, #0
 8008402:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8008406:	6878      	ldr	r0, [r7, #4]
 8008408:	f7fc fab8 	bl	800497c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	2202      	movs	r2, #2
 8008410:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	681b      	ldr	r3, [r3, #0]
 8008418:	681a      	ldr	r2, [r3, #0]
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	681b      	ldr	r3, [r3, #0]
 800841e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008422:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	685b      	ldr	r3, [r3, #4]
 8008428:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	689b      	ldr	r3, [r3, #8]
 8008430:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8008434:	431a      	orrs	r2, r3
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	68db      	ldr	r3, [r3, #12]
 800843a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800843e:	431a      	orrs	r2, r3
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	691b      	ldr	r3, [r3, #16]
 8008444:	f003 0302 	and.w	r3, r3, #2
 8008448:	431a      	orrs	r2, r3
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	695b      	ldr	r3, [r3, #20]
 800844e:	f003 0301 	and.w	r3, r3, #1
 8008452:	431a      	orrs	r2, r3
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	699b      	ldr	r3, [r3, #24]
 8008458:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800845c:	431a      	orrs	r2, r3
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	69db      	ldr	r3, [r3, #28]
 8008462:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008466:	431a      	orrs	r2, r3
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	6a1b      	ldr	r3, [r3, #32]
 800846c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008470:	ea42 0103 	orr.w	r1, r2, r3
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008478:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	430a      	orrs	r2, r1
 8008482:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	699b      	ldr	r3, [r3, #24]
 8008488:	0c1b      	lsrs	r3, r3, #16
 800848a:	f003 0104 	and.w	r1, r3, #4
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008492:	f003 0210 	and.w	r2, r3, #16
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	430a      	orrs	r2, r1
 800849c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	681b      	ldr	r3, [r3, #0]
 80084a2:	69da      	ldr	r2, [r3, #28]
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80084ac:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	2200      	movs	r2, #0
 80084b2:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	2201      	movs	r2, #1
 80084b8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80084bc:	2300      	movs	r3, #0
}
 80084be:	4618      	mov	r0, r3
 80084c0:	3708      	adds	r7, #8
 80084c2:	46bd      	mov	sp, r7
 80084c4:	bd80      	pop	{r7, pc}

080084c6 <HAL_SPI_Transmit>:
  * @param  Size amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80084c6:	b580      	push	{r7, lr}
 80084c8:	b088      	sub	sp, #32
 80084ca:	af00      	add	r7, sp, #0
 80084cc:	60f8      	str	r0, [r7, #12]
 80084ce:	60b9      	str	r1, [r7, #8]
 80084d0:	603b      	str	r3, [r7, #0]
 80084d2:	4613      	mov	r3, r2
 80084d4:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80084d6:	f7fd f837 	bl	8005548 <HAL_GetTick>
 80084da:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 80084dc:	88fb      	ldrh	r3, [r7, #6]
 80084de:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 80084e0:	68fb      	ldr	r3, [r7, #12]
 80084e2:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80084e6:	b2db      	uxtb	r3, r3
 80084e8:	2b01      	cmp	r3, #1
 80084ea:	d001      	beq.n	80084f0 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 80084ec:	2302      	movs	r3, #2
 80084ee:	e12a      	b.n	8008746 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 80084f0:	68bb      	ldr	r3, [r7, #8]
 80084f2:	2b00      	cmp	r3, #0
 80084f4:	d002      	beq.n	80084fc <HAL_SPI_Transmit+0x36>
 80084f6:	88fb      	ldrh	r3, [r7, #6]
 80084f8:	2b00      	cmp	r3, #0
 80084fa:	d101      	bne.n	8008500 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 80084fc:	2301      	movs	r3, #1
 80084fe:	e122      	b.n	8008746 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008500:	68fb      	ldr	r3, [r7, #12]
 8008502:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8008506:	2b01      	cmp	r3, #1
 8008508:	d101      	bne.n	800850e <HAL_SPI_Transmit+0x48>
 800850a:	2302      	movs	r3, #2
 800850c:	e11b      	b.n	8008746 <HAL_SPI_Transmit+0x280>
 800850e:	68fb      	ldr	r3, [r7, #12]
 8008510:	2201      	movs	r2, #1
 8008512:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8008516:	68fb      	ldr	r3, [r7, #12]
 8008518:	2203      	movs	r2, #3
 800851a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800851e:	68fb      	ldr	r3, [r7, #12]
 8008520:	2200      	movs	r2, #0
 8008522:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8008524:	68fb      	ldr	r3, [r7, #12]
 8008526:	68ba      	ldr	r2, [r7, #8]
 8008528:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 800852a:	68fb      	ldr	r3, [r7, #12]
 800852c:	88fa      	ldrh	r2, [r7, #6]
 800852e:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8008530:	68fb      	ldr	r3, [r7, #12]
 8008532:	88fa      	ldrh	r2, [r7, #6]
 8008534:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8008536:	68fb      	ldr	r3, [r7, #12]
 8008538:	2200      	movs	r2, #0
 800853a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 800853c:	68fb      	ldr	r3, [r7, #12]
 800853e:	2200      	movs	r2, #0
 8008540:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8008542:	68fb      	ldr	r3, [r7, #12]
 8008544:	2200      	movs	r2, #0
 8008546:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8008548:	68fb      	ldr	r3, [r7, #12]
 800854a:	2200      	movs	r2, #0
 800854c:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 800854e:	68fb      	ldr	r3, [r7, #12]
 8008550:	2200      	movs	r2, #0
 8008552:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008554:	68fb      	ldr	r3, [r7, #12]
 8008556:	689b      	ldr	r3, [r3, #8]
 8008558:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800855c:	d10f      	bne.n	800857e <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800855e:	68fb      	ldr	r3, [r7, #12]
 8008560:	681b      	ldr	r3, [r3, #0]
 8008562:	681a      	ldr	r2, [r3, #0]
 8008564:	68fb      	ldr	r3, [r7, #12]
 8008566:	681b      	ldr	r3, [r3, #0]
 8008568:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800856c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800856e:	68fb      	ldr	r3, [r7, #12]
 8008570:	681b      	ldr	r3, [r3, #0]
 8008572:	681a      	ldr	r2, [r3, #0]
 8008574:	68fb      	ldr	r3, [r7, #12]
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800857c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800857e:	68fb      	ldr	r3, [r7, #12]
 8008580:	681b      	ldr	r3, [r3, #0]
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008588:	2b40      	cmp	r3, #64	@ 0x40
 800858a:	d007      	beq.n	800859c <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800858c:	68fb      	ldr	r3, [r7, #12]
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	681a      	ldr	r2, [r3, #0]
 8008592:	68fb      	ldr	r3, [r7, #12]
 8008594:	681b      	ldr	r3, [r3, #0]
 8008596:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800859a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800859c:	68fb      	ldr	r3, [r7, #12]
 800859e:	68db      	ldr	r3, [r3, #12]
 80085a0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80085a4:	d152      	bne.n	800864c <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80085a6:	68fb      	ldr	r3, [r7, #12]
 80085a8:	685b      	ldr	r3, [r3, #4]
 80085aa:	2b00      	cmp	r3, #0
 80085ac:	d002      	beq.n	80085b4 <HAL_SPI_Transmit+0xee>
 80085ae:	8b7b      	ldrh	r3, [r7, #26]
 80085b0:	2b01      	cmp	r3, #1
 80085b2:	d145      	bne.n	8008640 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80085b4:	68fb      	ldr	r3, [r7, #12]
 80085b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80085b8:	881a      	ldrh	r2, [r3, #0]
 80085ba:	68fb      	ldr	r3, [r7, #12]
 80085bc:	681b      	ldr	r3, [r3, #0]
 80085be:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80085c0:	68fb      	ldr	r3, [r7, #12]
 80085c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80085c4:	1c9a      	adds	r2, r3, #2
 80085c6:	68fb      	ldr	r3, [r7, #12]
 80085c8:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80085ca:	68fb      	ldr	r3, [r7, #12]
 80085cc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80085ce:	b29b      	uxth	r3, r3
 80085d0:	3b01      	subs	r3, #1
 80085d2:	b29a      	uxth	r2, r3
 80085d4:	68fb      	ldr	r3, [r7, #12]
 80085d6:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80085d8:	e032      	b.n	8008640 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80085da:	68fb      	ldr	r3, [r7, #12]
 80085dc:	681b      	ldr	r3, [r3, #0]
 80085de:	689b      	ldr	r3, [r3, #8]
 80085e0:	f003 0302 	and.w	r3, r3, #2
 80085e4:	2b02      	cmp	r3, #2
 80085e6:	d112      	bne.n	800860e <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80085e8:	68fb      	ldr	r3, [r7, #12]
 80085ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80085ec:	881a      	ldrh	r2, [r3, #0]
 80085ee:	68fb      	ldr	r3, [r7, #12]
 80085f0:	681b      	ldr	r3, [r3, #0]
 80085f2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80085f4:	68fb      	ldr	r3, [r7, #12]
 80085f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80085f8:	1c9a      	adds	r2, r3, #2
 80085fa:	68fb      	ldr	r3, [r7, #12]
 80085fc:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80085fe:	68fb      	ldr	r3, [r7, #12]
 8008600:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008602:	b29b      	uxth	r3, r3
 8008604:	3b01      	subs	r3, #1
 8008606:	b29a      	uxth	r2, r3
 8008608:	68fb      	ldr	r3, [r7, #12]
 800860a:	86da      	strh	r2, [r3, #54]	@ 0x36
 800860c:	e018      	b.n	8008640 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800860e:	f7fc ff9b 	bl	8005548 <HAL_GetTick>
 8008612:	4602      	mov	r2, r0
 8008614:	69fb      	ldr	r3, [r7, #28]
 8008616:	1ad3      	subs	r3, r2, r3
 8008618:	683a      	ldr	r2, [r7, #0]
 800861a:	429a      	cmp	r2, r3
 800861c:	d803      	bhi.n	8008626 <HAL_SPI_Transmit+0x160>
 800861e:	683b      	ldr	r3, [r7, #0]
 8008620:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008624:	d102      	bne.n	800862c <HAL_SPI_Transmit+0x166>
 8008626:	683b      	ldr	r3, [r7, #0]
 8008628:	2b00      	cmp	r3, #0
 800862a:	d109      	bne.n	8008640 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800862c:	68fb      	ldr	r3, [r7, #12]
 800862e:	2201      	movs	r2, #1
 8008630:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8008634:	68fb      	ldr	r3, [r7, #12]
 8008636:	2200      	movs	r2, #0
 8008638:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800863c:	2303      	movs	r3, #3
 800863e:	e082      	b.n	8008746 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8008640:	68fb      	ldr	r3, [r7, #12]
 8008642:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008644:	b29b      	uxth	r3, r3
 8008646:	2b00      	cmp	r3, #0
 8008648:	d1c7      	bne.n	80085da <HAL_SPI_Transmit+0x114>
 800864a:	e053      	b.n	80086f4 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800864c:	68fb      	ldr	r3, [r7, #12]
 800864e:	685b      	ldr	r3, [r3, #4]
 8008650:	2b00      	cmp	r3, #0
 8008652:	d002      	beq.n	800865a <HAL_SPI_Transmit+0x194>
 8008654:	8b7b      	ldrh	r3, [r7, #26]
 8008656:	2b01      	cmp	r3, #1
 8008658:	d147      	bne.n	80086ea <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800865a:	68fb      	ldr	r3, [r7, #12]
 800865c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800865e:	68fb      	ldr	r3, [r7, #12]
 8008660:	681b      	ldr	r3, [r3, #0]
 8008662:	330c      	adds	r3, #12
 8008664:	7812      	ldrb	r2, [r2, #0]
 8008666:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8008668:	68fb      	ldr	r3, [r7, #12]
 800866a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800866c:	1c5a      	adds	r2, r3, #1
 800866e:	68fb      	ldr	r3, [r7, #12]
 8008670:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8008672:	68fb      	ldr	r3, [r7, #12]
 8008674:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008676:	b29b      	uxth	r3, r3
 8008678:	3b01      	subs	r3, #1
 800867a:	b29a      	uxth	r2, r3
 800867c:	68fb      	ldr	r3, [r7, #12]
 800867e:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8008680:	e033      	b.n	80086ea <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8008682:	68fb      	ldr	r3, [r7, #12]
 8008684:	681b      	ldr	r3, [r3, #0]
 8008686:	689b      	ldr	r3, [r3, #8]
 8008688:	f003 0302 	and.w	r3, r3, #2
 800868c:	2b02      	cmp	r3, #2
 800868e:	d113      	bne.n	80086b8 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8008690:	68fb      	ldr	r3, [r7, #12]
 8008692:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008694:	68fb      	ldr	r3, [r7, #12]
 8008696:	681b      	ldr	r3, [r3, #0]
 8008698:	330c      	adds	r3, #12
 800869a:	7812      	ldrb	r2, [r2, #0]
 800869c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800869e:	68fb      	ldr	r3, [r7, #12]
 80086a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80086a2:	1c5a      	adds	r2, r3, #1
 80086a4:	68fb      	ldr	r3, [r7, #12]
 80086a6:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80086a8:	68fb      	ldr	r3, [r7, #12]
 80086aa:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80086ac:	b29b      	uxth	r3, r3
 80086ae:	3b01      	subs	r3, #1
 80086b0:	b29a      	uxth	r2, r3
 80086b2:	68fb      	ldr	r3, [r7, #12]
 80086b4:	86da      	strh	r2, [r3, #54]	@ 0x36
 80086b6:	e018      	b.n	80086ea <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80086b8:	f7fc ff46 	bl	8005548 <HAL_GetTick>
 80086bc:	4602      	mov	r2, r0
 80086be:	69fb      	ldr	r3, [r7, #28]
 80086c0:	1ad3      	subs	r3, r2, r3
 80086c2:	683a      	ldr	r2, [r7, #0]
 80086c4:	429a      	cmp	r2, r3
 80086c6:	d803      	bhi.n	80086d0 <HAL_SPI_Transmit+0x20a>
 80086c8:	683b      	ldr	r3, [r7, #0]
 80086ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80086ce:	d102      	bne.n	80086d6 <HAL_SPI_Transmit+0x210>
 80086d0:	683b      	ldr	r3, [r7, #0]
 80086d2:	2b00      	cmp	r3, #0
 80086d4:	d109      	bne.n	80086ea <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80086d6:	68fb      	ldr	r3, [r7, #12]
 80086d8:	2201      	movs	r2, #1
 80086da:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80086de:	68fb      	ldr	r3, [r7, #12]
 80086e0:	2200      	movs	r2, #0
 80086e2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80086e6:	2303      	movs	r3, #3
 80086e8:	e02d      	b.n	8008746 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 80086ea:	68fb      	ldr	r3, [r7, #12]
 80086ec:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80086ee:	b29b      	uxth	r3, r3
 80086f0:	2b00      	cmp	r3, #0
 80086f2:	d1c6      	bne.n	8008682 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80086f4:	69fa      	ldr	r2, [r7, #28]
 80086f6:	6839      	ldr	r1, [r7, #0]
 80086f8:	68f8      	ldr	r0, [r7, #12]
 80086fa:	f000 fa59 	bl	8008bb0 <SPI_EndRxTxTransaction>
 80086fe:	4603      	mov	r3, r0
 8008700:	2b00      	cmp	r3, #0
 8008702:	d002      	beq.n	800870a <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008704:	68fb      	ldr	r3, [r7, #12]
 8008706:	2220      	movs	r2, #32
 8008708:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800870a:	68fb      	ldr	r3, [r7, #12]
 800870c:	689b      	ldr	r3, [r3, #8]
 800870e:	2b00      	cmp	r3, #0
 8008710:	d10a      	bne.n	8008728 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008712:	2300      	movs	r3, #0
 8008714:	617b      	str	r3, [r7, #20]
 8008716:	68fb      	ldr	r3, [r7, #12]
 8008718:	681b      	ldr	r3, [r3, #0]
 800871a:	68db      	ldr	r3, [r3, #12]
 800871c:	617b      	str	r3, [r7, #20]
 800871e:	68fb      	ldr	r3, [r7, #12]
 8008720:	681b      	ldr	r3, [r3, #0]
 8008722:	689b      	ldr	r3, [r3, #8]
 8008724:	617b      	str	r3, [r7, #20]
 8008726:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8008728:	68fb      	ldr	r3, [r7, #12]
 800872a:	2201      	movs	r2, #1
 800872c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8008730:	68fb      	ldr	r3, [r7, #12]
 8008732:	2200      	movs	r2, #0
 8008734:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008738:	68fb      	ldr	r3, [r7, #12]
 800873a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800873c:	2b00      	cmp	r3, #0
 800873e:	d001      	beq.n	8008744 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8008740:	2301      	movs	r3, #1
 8008742:	e000      	b.n	8008746 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8008744:	2300      	movs	r3, #0
  }
}
 8008746:	4618      	mov	r0, r3
 8008748:	3720      	adds	r7, #32
 800874a:	46bd      	mov	sp, r7
 800874c:	bd80      	pop	{r7, pc}

0800874e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 800874e:	b580      	push	{r7, lr}
 8008750:	b08a      	sub	sp, #40	@ 0x28
 8008752:	af00      	add	r7, sp, #0
 8008754:	60f8      	str	r0, [r7, #12]
 8008756:	60b9      	str	r1, [r7, #8]
 8008758:	607a      	str	r2, [r7, #4]
 800875a:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800875c:	2301      	movs	r3, #1
 800875e:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008760:	f7fc fef2 	bl	8005548 <HAL_GetTick>
 8008764:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8008766:	68fb      	ldr	r3, [r7, #12]
 8008768:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800876c:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 800876e:	68fb      	ldr	r3, [r7, #12]
 8008770:	685b      	ldr	r3, [r3, #4]
 8008772:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8008774:	887b      	ldrh	r3, [r7, #2]
 8008776:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8008778:	7ffb      	ldrb	r3, [r7, #31]
 800877a:	2b01      	cmp	r3, #1
 800877c:	d00c      	beq.n	8008798 <HAL_SPI_TransmitReceive+0x4a>
 800877e:	69bb      	ldr	r3, [r7, #24]
 8008780:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8008784:	d106      	bne.n	8008794 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8008786:	68fb      	ldr	r3, [r7, #12]
 8008788:	689b      	ldr	r3, [r3, #8]
 800878a:	2b00      	cmp	r3, #0
 800878c:	d102      	bne.n	8008794 <HAL_SPI_TransmitReceive+0x46>
 800878e:	7ffb      	ldrb	r3, [r7, #31]
 8008790:	2b04      	cmp	r3, #4
 8008792:	d001      	beq.n	8008798 <HAL_SPI_TransmitReceive+0x4a>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8008794:	2302      	movs	r3, #2
 8008796:	e17f      	b.n	8008a98 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8008798:	68bb      	ldr	r3, [r7, #8]
 800879a:	2b00      	cmp	r3, #0
 800879c:	d005      	beq.n	80087aa <HAL_SPI_TransmitReceive+0x5c>
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	2b00      	cmp	r3, #0
 80087a2:	d002      	beq.n	80087aa <HAL_SPI_TransmitReceive+0x5c>
 80087a4:	887b      	ldrh	r3, [r7, #2]
 80087a6:	2b00      	cmp	r3, #0
 80087a8:	d101      	bne.n	80087ae <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 80087aa:	2301      	movs	r3, #1
 80087ac:	e174      	b.n	8008a98 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80087ae:	68fb      	ldr	r3, [r7, #12]
 80087b0:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80087b4:	2b01      	cmp	r3, #1
 80087b6:	d101      	bne.n	80087bc <HAL_SPI_TransmitReceive+0x6e>
 80087b8:	2302      	movs	r3, #2
 80087ba:	e16d      	b.n	8008a98 <HAL_SPI_TransmitReceive+0x34a>
 80087bc:	68fb      	ldr	r3, [r7, #12]
 80087be:	2201      	movs	r2, #1
 80087c0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80087c4:	68fb      	ldr	r3, [r7, #12]
 80087c6:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80087ca:	b2db      	uxtb	r3, r3
 80087cc:	2b04      	cmp	r3, #4
 80087ce:	d003      	beq.n	80087d8 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80087d0:	68fb      	ldr	r3, [r7, #12]
 80087d2:	2205      	movs	r2, #5
 80087d4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80087d8:	68fb      	ldr	r3, [r7, #12]
 80087da:	2200      	movs	r2, #0
 80087dc:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80087de:	68fb      	ldr	r3, [r7, #12]
 80087e0:	687a      	ldr	r2, [r7, #4]
 80087e2:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 80087e4:	68fb      	ldr	r3, [r7, #12]
 80087e6:	887a      	ldrh	r2, [r7, #2]
 80087e8:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 80087ea:	68fb      	ldr	r3, [r7, #12]
 80087ec:	887a      	ldrh	r2, [r7, #2]
 80087ee:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 80087f0:	68fb      	ldr	r3, [r7, #12]
 80087f2:	68ba      	ldr	r2, [r7, #8]
 80087f4:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 80087f6:	68fb      	ldr	r3, [r7, #12]
 80087f8:	887a      	ldrh	r2, [r7, #2]
 80087fa:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 80087fc:	68fb      	ldr	r3, [r7, #12]
 80087fe:	887a      	ldrh	r2, [r7, #2]
 8008800:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8008802:	68fb      	ldr	r3, [r7, #12]
 8008804:	2200      	movs	r2, #0
 8008806:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8008808:	68fb      	ldr	r3, [r7, #12]
 800880a:	2200      	movs	r2, #0
 800880c:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800880e:	68fb      	ldr	r3, [r7, #12]
 8008810:	681b      	ldr	r3, [r3, #0]
 8008812:	681b      	ldr	r3, [r3, #0]
 8008814:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008818:	2b40      	cmp	r3, #64	@ 0x40
 800881a:	d007      	beq.n	800882c <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800881c:	68fb      	ldr	r3, [r7, #12]
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	681a      	ldr	r2, [r3, #0]
 8008822:	68fb      	ldr	r3, [r7, #12]
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800882a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800882c:	68fb      	ldr	r3, [r7, #12]
 800882e:	68db      	ldr	r3, [r3, #12]
 8008830:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008834:	d17e      	bne.n	8008934 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008836:	68fb      	ldr	r3, [r7, #12]
 8008838:	685b      	ldr	r3, [r3, #4]
 800883a:	2b00      	cmp	r3, #0
 800883c:	d002      	beq.n	8008844 <HAL_SPI_TransmitReceive+0xf6>
 800883e:	8afb      	ldrh	r3, [r7, #22]
 8008840:	2b01      	cmp	r3, #1
 8008842:	d16c      	bne.n	800891e <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8008844:	68fb      	ldr	r3, [r7, #12]
 8008846:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008848:	881a      	ldrh	r2, [r3, #0]
 800884a:	68fb      	ldr	r3, [r7, #12]
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8008850:	68fb      	ldr	r3, [r7, #12]
 8008852:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008854:	1c9a      	adds	r2, r3, #2
 8008856:	68fb      	ldr	r3, [r7, #12]
 8008858:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800885a:	68fb      	ldr	r3, [r7, #12]
 800885c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800885e:	b29b      	uxth	r3, r3
 8008860:	3b01      	subs	r3, #1
 8008862:	b29a      	uxth	r2, r3
 8008864:	68fb      	ldr	r3, [r7, #12]
 8008866:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008868:	e059      	b.n	800891e <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800886a:	68fb      	ldr	r3, [r7, #12]
 800886c:	681b      	ldr	r3, [r3, #0]
 800886e:	689b      	ldr	r3, [r3, #8]
 8008870:	f003 0302 	and.w	r3, r3, #2
 8008874:	2b02      	cmp	r3, #2
 8008876:	d11b      	bne.n	80088b0 <HAL_SPI_TransmitReceive+0x162>
 8008878:	68fb      	ldr	r3, [r7, #12]
 800887a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800887c:	b29b      	uxth	r3, r3
 800887e:	2b00      	cmp	r3, #0
 8008880:	d016      	beq.n	80088b0 <HAL_SPI_TransmitReceive+0x162>
 8008882:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008884:	2b01      	cmp	r3, #1
 8008886:	d113      	bne.n	80088b0 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8008888:	68fb      	ldr	r3, [r7, #12]
 800888a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800888c:	881a      	ldrh	r2, [r3, #0]
 800888e:	68fb      	ldr	r3, [r7, #12]
 8008890:	681b      	ldr	r3, [r3, #0]
 8008892:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008894:	68fb      	ldr	r3, [r7, #12]
 8008896:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008898:	1c9a      	adds	r2, r3, #2
 800889a:	68fb      	ldr	r3, [r7, #12]
 800889c:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800889e:	68fb      	ldr	r3, [r7, #12]
 80088a0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80088a2:	b29b      	uxth	r3, r3
 80088a4:	3b01      	subs	r3, #1
 80088a6:	b29a      	uxth	r2, r3
 80088a8:	68fb      	ldr	r3, [r7, #12]
 80088aa:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80088ac:	2300      	movs	r3, #0
 80088ae:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80088b0:	68fb      	ldr	r3, [r7, #12]
 80088b2:	681b      	ldr	r3, [r3, #0]
 80088b4:	689b      	ldr	r3, [r3, #8]
 80088b6:	f003 0301 	and.w	r3, r3, #1
 80088ba:	2b01      	cmp	r3, #1
 80088bc:	d119      	bne.n	80088f2 <HAL_SPI_TransmitReceive+0x1a4>
 80088be:	68fb      	ldr	r3, [r7, #12]
 80088c0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80088c2:	b29b      	uxth	r3, r3
 80088c4:	2b00      	cmp	r3, #0
 80088c6:	d014      	beq.n	80088f2 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80088c8:	68fb      	ldr	r3, [r7, #12]
 80088ca:	681b      	ldr	r3, [r3, #0]
 80088cc:	68da      	ldr	r2, [r3, #12]
 80088ce:	68fb      	ldr	r3, [r7, #12]
 80088d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80088d2:	b292      	uxth	r2, r2
 80088d4:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80088d6:	68fb      	ldr	r3, [r7, #12]
 80088d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80088da:	1c9a      	adds	r2, r3, #2
 80088dc:	68fb      	ldr	r3, [r7, #12]
 80088de:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80088e0:	68fb      	ldr	r3, [r7, #12]
 80088e2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80088e4:	b29b      	uxth	r3, r3
 80088e6:	3b01      	subs	r3, #1
 80088e8:	b29a      	uxth	r2, r3
 80088ea:	68fb      	ldr	r3, [r7, #12]
 80088ec:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80088ee:	2301      	movs	r3, #1
 80088f0:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80088f2:	f7fc fe29 	bl	8005548 <HAL_GetTick>
 80088f6:	4602      	mov	r2, r0
 80088f8:	6a3b      	ldr	r3, [r7, #32]
 80088fa:	1ad3      	subs	r3, r2, r3
 80088fc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80088fe:	429a      	cmp	r2, r3
 8008900:	d80d      	bhi.n	800891e <HAL_SPI_TransmitReceive+0x1d0>
 8008902:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008904:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008908:	d009      	beq.n	800891e <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800890a:	68fb      	ldr	r3, [r7, #12]
 800890c:	2201      	movs	r2, #1
 800890e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8008912:	68fb      	ldr	r3, [r7, #12]
 8008914:	2200      	movs	r2, #0
 8008916:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 800891a:	2303      	movs	r3, #3
 800891c:	e0bc      	b.n	8008a98 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800891e:	68fb      	ldr	r3, [r7, #12]
 8008920:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008922:	b29b      	uxth	r3, r3
 8008924:	2b00      	cmp	r3, #0
 8008926:	d1a0      	bne.n	800886a <HAL_SPI_TransmitReceive+0x11c>
 8008928:	68fb      	ldr	r3, [r7, #12]
 800892a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800892c:	b29b      	uxth	r3, r3
 800892e:	2b00      	cmp	r3, #0
 8008930:	d19b      	bne.n	800886a <HAL_SPI_TransmitReceive+0x11c>
 8008932:	e082      	b.n	8008a3a <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008934:	68fb      	ldr	r3, [r7, #12]
 8008936:	685b      	ldr	r3, [r3, #4]
 8008938:	2b00      	cmp	r3, #0
 800893a:	d002      	beq.n	8008942 <HAL_SPI_TransmitReceive+0x1f4>
 800893c:	8afb      	ldrh	r3, [r7, #22]
 800893e:	2b01      	cmp	r3, #1
 8008940:	d171      	bne.n	8008a26 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8008942:	68fb      	ldr	r3, [r7, #12]
 8008944:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008946:	68fb      	ldr	r3, [r7, #12]
 8008948:	681b      	ldr	r3, [r3, #0]
 800894a:	330c      	adds	r3, #12
 800894c:	7812      	ldrb	r2, [r2, #0]
 800894e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8008950:	68fb      	ldr	r3, [r7, #12]
 8008952:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008954:	1c5a      	adds	r2, r3, #1
 8008956:	68fb      	ldr	r3, [r7, #12]
 8008958:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800895a:	68fb      	ldr	r3, [r7, #12]
 800895c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800895e:	b29b      	uxth	r3, r3
 8008960:	3b01      	subs	r3, #1
 8008962:	b29a      	uxth	r2, r3
 8008964:	68fb      	ldr	r3, [r7, #12]
 8008966:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008968:	e05d      	b.n	8008a26 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800896a:	68fb      	ldr	r3, [r7, #12]
 800896c:	681b      	ldr	r3, [r3, #0]
 800896e:	689b      	ldr	r3, [r3, #8]
 8008970:	f003 0302 	and.w	r3, r3, #2
 8008974:	2b02      	cmp	r3, #2
 8008976:	d11c      	bne.n	80089b2 <HAL_SPI_TransmitReceive+0x264>
 8008978:	68fb      	ldr	r3, [r7, #12]
 800897a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800897c:	b29b      	uxth	r3, r3
 800897e:	2b00      	cmp	r3, #0
 8008980:	d017      	beq.n	80089b2 <HAL_SPI_TransmitReceive+0x264>
 8008982:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008984:	2b01      	cmp	r3, #1
 8008986:	d114      	bne.n	80089b2 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8008988:	68fb      	ldr	r3, [r7, #12]
 800898a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800898c:	68fb      	ldr	r3, [r7, #12]
 800898e:	681b      	ldr	r3, [r3, #0]
 8008990:	330c      	adds	r3, #12
 8008992:	7812      	ldrb	r2, [r2, #0]
 8008994:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8008996:	68fb      	ldr	r3, [r7, #12]
 8008998:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800899a:	1c5a      	adds	r2, r3, #1
 800899c:	68fb      	ldr	r3, [r7, #12]
 800899e:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80089a0:	68fb      	ldr	r3, [r7, #12]
 80089a2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80089a4:	b29b      	uxth	r3, r3
 80089a6:	3b01      	subs	r3, #1
 80089a8:	b29a      	uxth	r2, r3
 80089aa:	68fb      	ldr	r3, [r7, #12]
 80089ac:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80089ae:	2300      	movs	r3, #0
 80089b0:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80089b2:	68fb      	ldr	r3, [r7, #12]
 80089b4:	681b      	ldr	r3, [r3, #0]
 80089b6:	689b      	ldr	r3, [r3, #8]
 80089b8:	f003 0301 	and.w	r3, r3, #1
 80089bc:	2b01      	cmp	r3, #1
 80089be:	d119      	bne.n	80089f4 <HAL_SPI_TransmitReceive+0x2a6>
 80089c0:	68fb      	ldr	r3, [r7, #12]
 80089c2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80089c4:	b29b      	uxth	r3, r3
 80089c6:	2b00      	cmp	r3, #0
 80089c8:	d014      	beq.n	80089f4 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80089ca:	68fb      	ldr	r3, [r7, #12]
 80089cc:	681b      	ldr	r3, [r3, #0]
 80089ce:	68da      	ldr	r2, [r3, #12]
 80089d0:	68fb      	ldr	r3, [r7, #12]
 80089d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80089d4:	b2d2      	uxtb	r2, r2
 80089d6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80089d8:	68fb      	ldr	r3, [r7, #12]
 80089da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80089dc:	1c5a      	adds	r2, r3, #1
 80089de:	68fb      	ldr	r3, [r7, #12]
 80089e0:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80089e2:	68fb      	ldr	r3, [r7, #12]
 80089e4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80089e6:	b29b      	uxth	r3, r3
 80089e8:	3b01      	subs	r3, #1
 80089ea:	b29a      	uxth	r2, r3
 80089ec:	68fb      	ldr	r3, [r7, #12]
 80089ee:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80089f0:	2301      	movs	r3, #1
 80089f2:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80089f4:	f7fc fda8 	bl	8005548 <HAL_GetTick>
 80089f8:	4602      	mov	r2, r0
 80089fa:	6a3b      	ldr	r3, [r7, #32]
 80089fc:	1ad3      	subs	r3, r2, r3
 80089fe:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008a00:	429a      	cmp	r2, r3
 8008a02:	d803      	bhi.n	8008a0c <HAL_SPI_TransmitReceive+0x2be>
 8008a04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a0a:	d102      	bne.n	8008a12 <HAL_SPI_TransmitReceive+0x2c4>
 8008a0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a0e:	2b00      	cmp	r3, #0
 8008a10:	d109      	bne.n	8008a26 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8008a12:	68fb      	ldr	r3, [r7, #12]
 8008a14:	2201      	movs	r2, #1
 8008a16:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8008a1a:	68fb      	ldr	r3, [r7, #12]
 8008a1c:	2200      	movs	r2, #0
 8008a1e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8008a22:	2303      	movs	r3, #3
 8008a24:	e038      	b.n	8008a98 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008a26:	68fb      	ldr	r3, [r7, #12]
 8008a28:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008a2a:	b29b      	uxth	r3, r3
 8008a2c:	2b00      	cmp	r3, #0
 8008a2e:	d19c      	bne.n	800896a <HAL_SPI_TransmitReceive+0x21c>
 8008a30:	68fb      	ldr	r3, [r7, #12]
 8008a32:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008a34:	b29b      	uxth	r3, r3
 8008a36:	2b00      	cmp	r3, #0
 8008a38:	d197      	bne.n	800896a <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008a3a:	6a3a      	ldr	r2, [r7, #32]
 8008a3c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8008a3e:	68f8      	ldr	r0, [r7, #12]
 8008a40:	f000 f8b6 	bl	8008bb0 <SPI_EndRxTxTransaction>
 8008a44:	4603      	mov	r3, r0
 8008a46:	2b00      	cmp	r3, #0
 8008a48:	d008      	beq.n	8008a5c <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008a4a:	68fb      	ldr	r3, [r7, #12]
 8008a4c:	2220      	movs	r2, #32
 8008a4e:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8008a50:	68fb      	ldr	r3, [r7, #12]
 8008a52:	2200      	movs	r2, #0
 8008a54:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8008a58:	2301      	movs	r3, #1
 8008a5a:	e01d      	b.n	8008a98 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8008a5c:	68fb      	ldr	r3, [r7, #12]
 8008a5e:	689b      	ldr	r3, [r3, #8]
 8008a60:	2b00      	cmp	r3, #0
 8008a62:	d10a      	bne.n	8008a7a <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008a64:	2300      	movs	r3, #0
 8008a66:	613b      	str	r3, [r7, #16]
 8008a68:	68fb      	ldr	r3, [r7, #12]
 8008a6a:	681b      	ldr	r3, [r3, #0]
 8008a6c:	68db      	ldr	r3, [r3, #12]
 8008a6e:	613b      	str	r3, [r7, #16]
 8008a70:	68fb      	ldr	r3, [r7, #12]
 8008a72:	681b      	ldr	r3, [r3, #0]
 8008a74:	689b      	ldr	r3, [r3, #8]
 8008a76:	613b      	str	r3, [r7, #16]
 8008a78:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 8008a7a:	68fb      	ldr	r3, [r7, #12]
 8008a7c:	2201      	movs	r2, #1
 8008a7e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8008a82:	68fb      	ldr	r3, [r7, #12]
 8008a84:	2200      	movs	r2, #0
 8008a86:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008a8a:	68fb      	ldr	r3, [r7, #12]
 8008a8c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008a8e:	2b00      	cmp	r3, #0
 8008a90:	d001      	beq.n	8008a96 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 8008a92:	2301      	movs	r3, #1
 8008a94:	e000      	b.n	8008a98 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 8008a96:	2300      	movs	r3, #0
  }
}
 8008a98:	4618      	mov	r0, r3
 8008a9a:	3728      	adds	r7, #40	@ 0x28
 8008a9c:	46bd      	mov	sp, r7
 8008a9e:	bd80      	pop	{r7, pc}

08008aa0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8008aa0:	b580      	push	{r7, lr}
 8008aa2:	b088      	sub	sp, #32
 8008aa4:	af00      	add	r7, sp, #0
 8008aa6:	60f8      	str	r0, [r7, #12]
 8008aa8:	60b9      	str	r1, [r7, #8]
 8008aaa:	603b      	str	r3, [r7, #0]
 8008aac:	4613      	mov	r3, r2
 8008aae:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8008ab0:	f7fc fd4a 	bl	8005548 <HAL_GetTick>
 8008ab4:	4602      	mov	r2, r0
 8008ab6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008ab8:	1a9b      	subs	r3, r3, r2
 8008aba:	683a      	ldr	r2, [r7, #0]
 8008abc:	4413      	add	r3, r2
 8008abe:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8008ac0:	f7fc fd42 	bl	8005548 <HAL_GetTick>
 8008ac4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8008ac6:	4b39      	ldr	r3, [pc, #228]	@ (8008bac <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8008ac8:	681b      	ldr	r3, [r3, #0]
 8008aca:	015b      	lsls	r3, r3, #5
 8008acc:	0d1b      	lsrs	r3, r3, #20
 8008ace:	69fa      	ldr	r2, [r7, #28]
 8008ad0:	fb02 f303 	mul.w	r3, r2, r3
 8008ad4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008ad6:	e055      	b.n	8008b84 <SPI_WaitFlagStateUntilTimeout+0xe4>
  {
    if (Timeout != HAL_MAX_DELAY)
 8008ad8:	683b      	ldr	r3, [r7, #0]
 8008ada:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008ade:	d051      	beq.n	8008b84 <SPI_WaitFlagStateUntilTimeout+0xe4>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8008ae0:	f7fc fd32 	bl	8005548 <HAL_GetTick>
 8008ae4:	4602      	mov	r2, r0
 8008ae6:	69bb      	ldr	r3, [r7, #24]
 8008ae8:	1ad3      	subs	r3, r2, r3
 8008aea:	69fa      	ldr	r2, [r7, #28]
 8008aec:	429a      	cmp	r2, r3
 8008aee:	d902      	bls.n	8008af6 <SPI_WaitFlagStateUntilTimeout+0x56>
 8008af0:	69fb      	ldr	r3, [r7, #28]
 8008af2:	2b00      	cmp	r3, #0
 8008af4:	d13d      	bne.n	8008b72 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8008af6:	68fb      	ldr	r3, [r7, #12]
 8008af8:	681b      	ldr	r3, [r3, #0]
 8008afa:	685a      	ldr	r2, [r3, #4]
 8008afc:	68fb      	ldr	r3, [r7, #12]
 8008afe:	681b      	ldr	r3, [r3, #0]
 8008b00:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8008b04:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008b06:	68fb      	ldr	r3, [r7, #12]
 8008b08:	685b      	ldr	r3, [r3, #4]
 8008b0a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8008b0e:	d111      	bne.n	8008b34 <SPI_WaitFlagStateUntilTimeout+0x94>
 8008b10:	68fb      	ldr	r3, [r7, #12]
 8008b12:	689b      	ldr	r3, [r3, #8]
 8008b14:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008b18:	d004      	beq.n	8008b24 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008b1a:	68fb      	ldr	r3, [r7, #12]
 8008b1c:	689b      	ldr	r3, [r3, #8]
 8008b1e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008b22:	d107      	bne.n	8008b34 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8008b24:	68fb      	ldr	r3, [r7, #12]
 8008b26:	681b      	ldr	r3, [r3, #0]
 8008b28:	681a      	ldr	r2, [r3, #0]
 8008b2a:	68fb      	ldr	r3, [r7, #12]
 8008b2c:	681b      	ldr	r3, [r3, #0]
 8008b2e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008b32:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008b34:	68fb      	ldr	r3, [r7, #12]
 8008b36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008b38:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008b3c:	d10f      	bne.n	8008b5e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8008b3e:	68fb      	ldr	r3, [r7, #12]
 8008b40:	681b      	ldr	r3, [r3, #0]
 8008b42:	681a      	ldr	r2, [r3, #0]
 8008b44:	68fb      	ldr	r3, [r7, #12]
 8008b46:	681b      	ldr	r3, [r3, #0]
 8008b48:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8008b4c:	601a      	str	r2, [r3, #0]
 8008b4e:	68fb      	ldr	r3, [r7, #12]
 8008b50:	681b      	ldr	r3, [r3, #0]
 8008b52:	681a      	ldr	r2, [r3, #0]
 8008b54:	68fb      	ldr	r3, [r7, #12]
 8008b56:	681b      	ldr	r3, [r3, #0]
 8008b58:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8008b5c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8008b5e:	68fb      	ldr	r3, [r7, #12]
 8008b60:	2201      	movs	r2, #1
 8008b62:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8008b66:	68fb      	ldr	r3, [r7, #12]
 8008b68:	2200      	movs	r2, #0
 8008b6a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8008b6e:	2303      	movs	r3, #3
 8008b70:	e018      	b.n	8008ba4 <SPI_WaitFlagStateUntilTimeout+0x104>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8008b72:	697b      	ldr	r3, [r7, #20]
 8008b74:	2b00      	cmp	r3, #0
 8008b76:	d102      	bne.n	8008b7e <SPI_WaitFlagStateUntilTimeout+0xde>
      {
        tmp_timeout = 0U;
 8008b78:	2300      	movs	r3, #0
 8008b7a:	61fb      	str	r3, [r7, #28]
 8008b7c:	e002      	b.n	8008b84 <SPI_WaitFlagStateUntilTimeout+0xe4>
      }
      else
      {
        count--;
 8008b7e:	697b      	ldr	r3, [r7, #20]
 8008b80:	3b01      	subs	r3, #1
 8008b82:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008b84:	68fb      	ldr	r3, [r7, #12]
 8008b86:	681b      	ldr	r3, [r3, #0]
 8008b88:	689a      	ldr	r2, [r3, #8]
 8008b8a:	68bb      	ldr	r3, [r7, #8]
 8008b8c:	4013      	ands	r3, r2
 8008b8e:	68ba      	ldr	r2, [r7, #8]
 8008b90:	429a      	cmp	r2, r3
 8008b92:	bf0c      	ite	eq
 8008b94:	2301      	moveq	r3, #1
 8008b96:	2300      	movne	r3, #0
 8008b98:	b2db      	uxtb	r3, r3
 8008b9a:	461a      	mov	r2, r3
 8008b9c:	79fb      	ldrb	r3, [r7, #7]
 8008b9e:	429a      	cmp	r2, r3
 8008ba0:	d19a      	bne.n	8008ad8 <SPI_WaitFlagStateUntilTimeout+0x38>
      }
    }
  }

  return HAL_OK;
 8008ba2:	2300      	movs	r3, #0
}
 8008ba4:	4618      	mov	r0, r3
 8008ba6:	3720      	adds	r7, #32
 8008ba8:	46bd      	mov	sp, r7
 8008baa:	bd80      	pop	{r7, pc}
 8008bac:	2000d114 	.word	0x2000d114

08008bb0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8008bb0:	b580      	push	{r7, lr}
 8008bb2:	b088      	sub	sp, #32
 8008bb4:	af02      	add	r7, sp, #8
 8008bb6:	60f8      	str	r0, [r7, #12]
 8008bb8:	60b9      	str	r1, [r7, #8]
 8008bba:	607a      	str	r2, [r7, #4]
  __IO uint32_t count;

  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	9300      	str	r3, [sp, #0]
 8008bc0:	68bb      	ldr	r3, [r7, #8]
 8008bc2:	2201      	movs	r2, #1
 8008bc4:	2102      	movs	r1, #2
 8008bc6:	68f8      	ldr	r0, [r7, #12]
 8008bc8:	f7ff ff6a 	bl	8008aa0 <SPI_WaitFlagStateUntilTimeout>
 8008bcc:	4603      	mov	r3, r0
 8008bce:	2b00      	cmp	r3, #0
 8008bd0:	d007      	beq.n	8008be2 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008bd2:	68fb      	ldr	r3, [r7, #12]
 8008bd4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008bd6:	f043 0220 	orr.w	r2, r3, #32
 8008bda:	68fb      	ldr	r3, [r7, #12]
 8008bdc:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8008bde:	2303      	movs	r3, #3
 8008be0:	e032      	b.n	8008c48 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in us */
  count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8008be2:	4b1b      	ldr	r3, [pc, #108]	@ (8008c50 <SPI_EndRxTxTransaction+0xa0>)
 8008be4:	681b      	ldr	r3, [r3, #0]
 8008be6:	4a1b      	ldr	r2, [pc, #108]	@ (8008c54 <SPI_EndRxTxTransaction+0xa4>)
 8008be8:	fba2 2303 	umull	r2, r3, r2, r3
 8008bec:	0d5b      	lsrs	r3, r3, #21
 8008bee:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8008bf2:	fb02 f303 	mul.w	r3, r2, r3
 8008bf6:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008bf8:	68fb      	ldr	r3, [r7, #12]
 8008bfa:	685b      	ldr	r3, [r3, #4]
 8008bfc:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8008c00:	d112      	bne.n	8008c28 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	9300      	str	r3, [sp, #0]
 8008c06:	68bb      	ldr	r3, [r7, #8]
 8008c08:	2200      	movs	r2, #0
 8008c0a:	2180      	movs	r1, #128	@ 0x80
 8008c0c:	68f8      	ldr	r0, [r7, #12]
 8008c0e:	f7ff ff47 	bl	8008aa0 <SPI_WaitFlagStateUntilTimeout>
 8008c12:	4603      	mov	r3, r0
 8008c14:	2b00      	cmp	r3, #0
 8008c16:	d016      	beq.n	8008c46 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008c18:	68fb      	ldr	r3, [r7, #12]
 8008c1a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008c1c:	f043 0220 	orr.w	r2, r3, #32
 8008c20:	68fb      	ldr	r3, [r7, #12]
 8008c22:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8008c24:	2303      	movs	r3, #3
 8008c26:	e00f      	b.n	8008c48 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8008c28:	697b      	ldr	r3, [r7, #20]
 8008c2a:	2b00      	cmp	r3, #0
 8008c2c:	d00a      	beq.n	8008c44 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8008c2e:	697b      	ldr	r3, [r7, #20]
 8008c30:	3b01      	subs	r3, #1
 8008c32:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8008c34:	68fb      	ldr	r3, [r7, #12]
 8008c36:	681b      	ldr	r3, [r3, #0]
 8008c38:	689b      	ldr	r3, [r3, #8]
 8008c3a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008c3e:	2b80      	cmp	r3, #128	@ 0x80
 8008c40:	d0f2      	beq.n	8008c28 <SPI_EndRxTxTransaction+0x78>
 8008c42:	e000      	b.n	8008c46 <SPI_EndRxTxTransaction+0x96>
        break;
 8008c44:	bf00      	nop
  }

  return HAL_OK;
 8008c46:	2300      	movs	r3, #0
}
 8008c48:	4618      	mov	r0, r3
 8008c4a:	3718      	adds	r7, #24
 8008c4c:	46bd      	mov	sp, r7
 8008c4e:	bd80      	pop	{r7, pc}
 8008c50:	2000d114 	.word	0x2000d114
 8008c54:	165e9f81 	.word	0x165e9f81

08008c58 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008c58:	b580      	push	{r7, lr}
 8008c5a:	b082      	sub	sp, #8
 8008c5c:	af00      	add	r7, sp, #0
 8008c5e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	2b00      	cmp	r3, #0
 8008c64:	d101      	bne.n	8008c6a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008c66:	2301      	movs	r3, #1
 8008c68:	e041      	b.n	8008cee <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008c70:	b2db      	uxtb	r3, r3
 8008c72:	2b00      	cmp	r3, #0
 8008c74:	d106      	bne.n	8008c84 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	2200      	movs	r2, #0
 8008c7a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008c7e:	6878      	ldr	r0, [r7, #4]
 8008c80:	f7fc f9e0 	bl	8005044 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	2202      	movs	r2, #2
 8008c88:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	681a      	ldr	r2, [r3, #0]
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	3304      	adds	r3, #4
 8008c94:	4619      	mov	r1, r3
 8008c96:	4610      	mov	r0, r2
 8008c98:	f000 fd10 	bl	80096bc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	2201      	movs	r2, #1
 8008ca0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	2201      	movs	r2, #1
 8008ca8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	2201      	movs	r2, #1
 8008cb0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	2201      	movs	r2, #1
 8008cb8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	2201      	movs	r2, #1
 8008cc0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	2201      	movs	r2, #1
 8008cc8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	2201      	movs	r2, #1
 8008cd0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	2201      	movs	r2, #1
 8008cd8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	2201      	movs	r2, #1
 8008ce0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	2201      	movs	r2, #1
 8008ce8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8008cec:	2300      	movs	r3, #0
}
 8008cee:	4618      	mov	r0, r3
 8008cf0:	3708      	adds	r7, #8
 8008cf2:	46bd      	mov	sp, r7
 8008cf4:	bd80      	pop	{r7, pc}
	...

08008cf8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008cf8:	b480      	push	{r7}
 8008cfa:	b085      	sub	sp, #20
 8008cfc:	af00      	add	r7, sp, #0
 8008cfe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008d06:	b2db      	uxtb	r3, r3
 8008d08:	2b01      	cmp	r3, #1
 8008d0a:	d001      	beq.n	8008d10 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008d0c:	2301      	movs	r3, #1
 8008d0e:	e044      	b.n	8008d9a <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	2202      	movs	r2, #2
 8008d14:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	681b      	ldr	r3, [r3, #0]
 8008d1c:	68da      	ldr	r2, [r3, #12]
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	681b      	ldr	r3, [r3, #0]
 8008d22:	f042 0201 	orr.w	r2, r2, #1
 8008d26:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	681b      	ldr	r3, [r3, #0]
 8008d2c:	4a1e      	ldr	r2, [pc, #120]	@ (8008da8 <HAL_TIM_Base_Start_IT+0xb0>)
 8008d2e:	4293      	cmp	r3, r2
 8008d30:	d018      	beq.n	8008d64 <HAL_TIM_Base_Start_IT+0x6c>
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	681b      	ldr	r3, [r3, #0]
 8008d36:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008d3a:	d013      	beq.n	8008d64 <HAL_TIM_Base_Start_IT+0x6c>
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	681b      	ldr	r3, [r3, #0]
 8008d40:	4a1a      	ldr	r2, [pc, #104]	@ (8008dac <HAL_TIM_Base_Start_IT+0xb4>)
 8008d42:	4293      	cmp	r3, r2
 8008d44:	d00e      	beq.n	8008d64 <HAL_TIM_Base_Start_IT+0x6c>
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	681b      	ldr	r3, [r3, #0]
 8008d4a:	4a19      	ldr	r2, [pc, #100]	@ (8008db0 <HAL_TIM_Base_Start_IT+0xb8>)
 8008d4c:	4293      	cmp	r3, r2
 8008d4e:	d009      	beq.n	8008d64 <HAL_TIM_Base_Start_IT+0x6c>
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	681b      	ldr	r3, [r3, #0]
 8008d54:	4a17      	ldr	r2, [pc, #92]	@ (8008db4 <HAL_TIM_Base_Start_IT+0xbc>)
 8008d56:	4293      	cmp	r3, r2
 8008d58:	d004      	beq.n	8008d64 <HAL_TIM_Base_Start_IT+0x6c>
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	681b      	ldr	r3, [r3, #0]
 8008d5e:	4a16      	ldr	r2, [pc, #88]	@ (8008db8 <HAL_TIM_Base_Start_IT+0xc0>)
 8008d60:	4293      	cmp	r3, r2
 8008d62:	d111      	bne.n	8008d88 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	681b      	ldr	r3, [r3, #0]
 8008d68:	689b      	ldr	r3, [r3, #8]
 8008d6a:	f003 0307 	and.w	r3, r3, #7
 8008d6e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008d70:	68fb      	ldr	r3, [r7, #12]
 8008d72:	2b06      	cmp	r3, #6
 8008d74:	d010      	beq.n	8008d98 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	681b      	ldr	r3, [r3, #0]
 8008d7a:	681a      	ldr	r2, [r3, #0]
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	681b      	ldr	r3, [r3, #0]
 8008d80:	f042 0201 	orr.w	r2, r2, #1
 8008d84:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008d86:	e007      	b.n	8008d98 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	681b      	ldr	r3, [r3, #0]
 8008d8c:	681a      	ldr	r2, [r3, #0]
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	681b      	ldr	r3, [r3, #0]
 8008d92:	f042 0201 	orr.w	r2, r2, #1
 8008d96:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008d98:	2300      	movs	r3, #0
}
 8008d9a:	4618      	mov	r0, r3
 8008d9c:	3714      	adds	r7, #20
 8008d9e:	46bd      	mov	sp, r7
 8008da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008da4:	4770      	bx	lr
 8008da6:	bf00      	nop
 8008da8:	40010000 	.word	0x40010000
 8008dac:	40000400 	.word	0x40000400
 8008db0:	40000800 	.word	0x40000800
 8008db4:	40000c00 	.word	0x40000c00
 8008db8:	40014000 	.word	0x40014000

08008dbc <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8008dbc:	b480      	push	{r7}
 8008dbe:	b083      	sub	sp, #12
 8008dc0:	af00      	add	r7, sp, #0
 8008dc2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	681b      	ldr	r3, [r3, #0]
 8008dc8:	68da      	ldr	r2, [r3, #12]
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	681b      	ldr	r3, [r3, #0]
 8008dce:	f022 0201 	bic.w	r2, r2, #1
 8008dd2:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	681b      	ldr	r3, [r3, #0]
 8008dd8:	6a1a      	ldr	r2, [r3, #32]
 8008dda:	f241 1311 	movw	r3, #4369	@ 0x1111
 8008dde:	4013      	ands	r3, r2
 8008de0:	2b00      	cmp	r3, #0
 8008de2:	d10f      	bne.n	8008e04 <HAL_TIM_Base_Stop_IT+0x48>
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	681b      	ldr	r3, [r3, #0]
 8008de8:	6a1a      	ldr	r2, [r3, #32]
 8008dea:	f240 4344 	movw	r3, #1092	@ 0x444
 8008dee:	4013      	ands	r3, r2
 8008df0:	2b00      	cmp	r3, #0
 8008df2:	d107      	bne.n	8008e04 <HAL_TIM_Base_Stop_IT+0x48>
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	681b      	ldr	r3, [r3, #0]
 8008df8:	681a      	ldr	r2, [r3, #0]
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	681b      	ldr	r3, [r3, #0]
 8008dfe:	f022 0201 	bic.w	r2, r2, #1
 8008e02:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	2201      	movs	r2, #1
 8008e08:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 8008e0c:	2300      	movs	r3, #0
}
 8008e0e:	4618      	mov	r0, r3
 8008e10:	370c      	adds	r7, #12
 8008e12:	46bd      	mov	sp, r7
 8008e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e18:	4770      	bx	lr

08008e1a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8008e1a:	b580      	push	{r7, lr}
 8008e1c:	b082      	sub	sp, #8
 8008e1e:	af00      	add	r7, sp, #0
 8008e20:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	2b00      	cmp	r3, #0
 8008e26:	d101      	bne.n	8008e2c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8008e28:	2301      	movs	r3, #1
 8008e2a:	e041      	b.n	8008eb0 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008e32:	b2db      	uxtb	r3, r3
 8008e34:	2b00      	cmp	r3, #0
 8008e36:	d106      	bne.n	8008e46 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	2200      	movs	r2, #0
 8008e3c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8008e40:	6878      	ldr	r0, [r7, #4]
 8008e42:	f000 f839 	bl	8008eb8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	2202      	movs	r2, #2
 8008e4a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	681a      	ldr	r2, [r3, #0]
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	3304      	adds	r3, #4
 8008e56:	4619      	mov	r1, r3
 8008e58:	4610      	mov	r0, r2
 8008e5a:	f000 fc2f 	bl	80096bc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	2201      	movs	r2, #1
 8008e62:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	2201      	movs	r2, #1
 8008e6a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	2201      	movs	r2, #1
 8008e72:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	2201      	movs	r2, #1
 8008e7a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	2201      	movs	r2, #1
 8008e82:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	2201      	movs	r2, #1
 8008e8a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	2201      	movs	r2, #1
 8008e92:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	2201      	movs	r2, #1
 8008e9a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	2201      	movs	r2, #1
 8008ea2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	2201      	movs	r2, #1
 8008eaa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8008eae:	2300      	movs	r3, #0
}
 8008eb0:	4618      	mov	r0, r3
 8008eb2:	3708      	adds	r7, #8
 8008eb4:	46bd      	mov	sp, r7
 8008eb6:	bd80      	pop	{r7, pc}

08008eb8 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8008eb8:	b480      	push	{r7}
 8008eba:	b083      	sub	sp, #12
 8008ebc:	af00      	add	r7, sp, #0
 8008ebe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8008ec0:	bf00      	nop
 8008ec2:	370c      	adds	r7, #12
 8008ec4:	46bd      	mov	sp, r7
 8008ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eca:	4770      	bx	lr

08008ecc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008ecc:	b580      	push	{r7, lr}
 8008ece:	b084      	sub	sp, #16
 8008ed0:	af00      	add	r7, sp, #0
 8008ed2:	6078      	str	r0, [r7, #4]
 8008ed4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8008ed6:	683b      	ldr	r3, [r7, #0]
 8008ed8:	2b00      	cmp	r3, #0
 8008eda:	d109      	bne.n	8008ef0 <HAL_TIM_PWM_Start+0x24>
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8008ee2:	b2db      	uxtb	r3, r3
 8008ee4:	2b01      	cmp	r3, #1
 8008ee6:	bf14      	ite	ne
 8008ee8:	2301      	movne	r3, #1
 8008eea:	2300      	moveq	r3, #0
 8008eec:	b2db      	uxtb	r3, r3
 8008eee:	e022      	b.n	8008f36 <HAL_TIM_PWM_Start+0x6a>
 8008ef0:	683b      	ldr	r3, [r7, #0]
 8008ef2:	2b04      	cmp	r3, #4
 8008ef4:	d109      	bne.n	8008f0a <HAL_TIM_PWM_Start+0x3e>
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8008efc:	b2db      	uxtb	r3, r3
 8008efe:	2b01      	cmp	r3, #1
 8008f00:	bf14      	ite	ne
 8008f02:	2301      	movne	r3, #1
 8008f04:	2300      	moveq	r3, #0
 8008f06:	b2db      	uxtb	r3, r3
 8008f08:	e015      	b.n	8008f36 <HAL_TIM_PWM_Start+0x6a>
 8008f0a:	683b      	ldr	r3, [r7, #0]
 8008f0c:	2b08      	cmp	r3, #8
 8008f0e:	d109      	bne.n	8008f24 <HAL_TIM_PWM_Start+0x58>
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8008f16:	b2db      	uxtb	r3, r3
 8008f18:	2b01      	cmp	r3, #1
 8008f1a:	bf14      	ite	ne
 8008f1c:	2301      	movne	r3, #1
 8008f1e:	2300      	moveq	r3, #0
 8008f20:	b2db      	uxtb	r3, r3
 8008f22:	e008      	b.n	8008f36 <HAL_TIM_PWM_Start+0x6a>
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008f2a:	b2db      	uxtb	r3, r3
 8008f2c:	2b01      	cmp	r3, #1
 8008f2e:	bf14      	ite	ne
 8008f30:	2301      	movne	r3, #1
 8008f32:	2300      	moveq	r3, #0
 8008f34:	b2db      	uxtb	r3, r3
 8008f36:	2b00      	cmp	r3, #0
 8008f38:	d001      	beq.n	8008f3e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8008f3a:	2301      	movs	r3, #1
 8008f3c:	e068      	b.n	8009010 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008f3e:	683b      	ldr	r3, [r7, #0]
 8008f40:	2b00      	cmp	r3, #0
 8008f42:	d104      	bne.n	8008f4e <HAL_TIM_PWM_Start+0x82>
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	2202      	movs	r2, #2
 8008f48:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008f4c:	e013      	b.n	8008f76 <HAL_TIM_PWM_Start+0xaa>
 8008f4e:	683b      	ldr	r3, [r7, #0]
 8008f50:	2b04      	cmp	r3, #4
 8008f52:	d104      	bne.n	8008f5e <HAL_TIM_PWM_Start+0x92>
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	2202      	movs	r2, #2
 8008f58:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008f5c:	e00b      	b.n	8008f76 <HAL_TIM_PWM_Start+0xaa>
 8008f5e:	683b      	ldr	r3, [r7, #0]
 8008f60:	2b08      	cmp	r3, #8
 8008f62:	d104      	bne.n	8008f6e <HAL_TIM_PWM_Start+0xa2>
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	2202      	movs	r2, #2
 8008f68:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008f6c:	e003      	b.n	8008f76 <HAL_TIM_PWM_Start+0xaa>
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	2202      	movs	r2, #2
 8008f72:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	681b      	ldr	r3, [r3, #0]
 8008f7a:	2201      	movs	r2, #1
 8008f7c:	6839      	ldr	r1, [r7, #0]
 8008f7e:	4618      	mov	r0, r3
 8008f80:	f000 fe48 	bl	8009c14 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	681b      	ldr	r3, [r3, #0]
 8008f88:	4a23      	ldr	r2, [pc, #140]	@ (8009018 <HAL_TIM_PWM_Start+0x14c>)
 8008f8a:	4293      	cmp	r3, r2
 8008f8c:	d107      	bne.n	8008f9e <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	681b      	ldr	r3, [r3, #0]
 8008f92:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	681b      	ldr	r3, [r3, #0]
 8008f98:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8008f9c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	681b      	ldr	r3, [r3, #0]
 8008fa2:	4a1d      	ldr	r2, [pc, #116]	@ (8009018 <HAL_TIM_PWM_Start+0x14c>)
 8008fa4:	4293      	cmp	r3, r2
 8008fa6:	d018      	beq.n	8008fda <HAL_TIM_PWM_Start+0x10e>
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	681b      	ldr	r3, [r3, #0]
 8008fac:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008fb0:	d013      	beq.n	8008fda <HAL_TIM_PWM_Start+0x10e>
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	681b      	ldr	r3, [r3, #0]
 8008fb6:	4a19      	ldr	r2, [pc, #100]	@ (800901c <HAL_TIM_PWM_Start+0x150>)
 8008fb8:	4293      	cmp	r3, r2
 8008fba:	d00e      	beq.n	8008fda <HAL_TIM_PWM_Start+0x10e>
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	681b      	ldr	r3, [r3, #0]
 8008fc0:	4a17      	ldr	r2, [pc, #92]	@ (8009020 <HAL_TIM_PWM_Start+0x154>)
 8008fc2:	4293      	cmp	r3, r2
 8008fc4:	d009      	beq.n	8008fda <HAL_TIM_PWM_Start+0x10e>
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	681b      	ldr	r3, [r3, #0]
 8008fca:	4a16      	ldr	r2, [pc, #88]	@ (8009024 <HAL_TIM_PWM_Start+0x158>)
 8008fcc:	4293      	cmp	r3, r2
 8008fce:	d004      	beq.n	8008fda <HAL_TIM_PWM_Start+0x10e>
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	681b      	ldr	r3, [r3, #0]
 8008fd4:	4a14      	ldr	r2, [pc, #80]	@ (8009028 <HAL_TIM_PWM_Start+0x15c>)
 8008fd6:	4293      	cmp	r3, r2
 8008fd8:	d111      	bne.n	8008ffe <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	681b      	ldr	r3, [r3, #0]
 8008fde:	689b      	ldr	r3, [r3, #8]
 8008fe0:	f003 0307 	and.w	r3, r3, #7
 8008fe4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008fe6:	68fb      	ldr	r3, [r7, #12]
 8008fe8:	2b06      	cmp	r3, #6
 8008fea:	d010      	beq.n	800900e <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	681b      	ldr	r3, [r3, #0]
 8008ff0:	681a      	ldr	r2, [r3, #0]
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	681b      	ldr	r3, [r3, #0]
 8008ff6:	f042 0201 	orr.w	r2, r2, #1
 8008ffa:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008ffc:	e007      	b.n	800900e <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	681b      	ldr	r3, [r3, #0]
 8009002:	681a      	ldr	r2, [r3, #0]
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	681b      	ldr	r3, [r3, #0]
 8009008:	f042 0201 	orr.w	r2, r2, #1
 800900c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800900e:	2300      	movs	r3, #0
}
 8009010:	4618      	mov	r0, r3
 8009012:	3710      	adds	r7, #16
 8009014:	46bd      	mov	sp, r7
 8009016:	bd80      	pop	{r7, pc}
 8009018:	40010000 	.word	0x40010000
 800901c:	40000400 	.word	0x40000400
 8009020:	40000800 	.word	0x40000800
 8009024:	40000c00 	.word	0x40000c00
 8009028:	40014000 	.word	0x40014000

0800902c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 800902c:	b580      	push	{r7, lr}
 800902e:	b086      	sub	sp, #24
 8009030:	af00      	add	r7, sp, #0
 8009032:	6078      	str	r0, [r7, #4]
 8009034:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	2b00      	cmp	r3, #0
 800903a:	d101      	bne.n	8009040 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800903c:	2301      	movs	r3, #1
 800903e:	e097      	b.n	8009170 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009046:	b2db      	uxtb	r3, r3
 8009048:	2b00      	cmp	r3, #0
 800904a:	d106      	bne.n	800905a <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	2200      	movs	r2, #0
 8009050:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8009054:	6878      	ldr	r0, [r7, #4]
 8009056:	f7fc f857 	bl	8005108 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	2202      	movs	r2, #2
 800905e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	681b      	ldr	r3, [r3, #0]
 8009066:	689b      	ldr	r3, [r3, #8]
 8009068:	687a      	ldr	r2, [r7, #4]
 800906a:	6812      	ldr	r2, [r2, #0]
 800906c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8009070:	f023 0307 	bic.w	r3, r3, #7
 8009074:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	681a      	ldr	r2, [r3, #0]
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	3304      	adds	r3, #4
 800907e:	4619      	mov	r1, r3
 8009080:	4610      	mov	r0, r2
 8009082:	f000 fb1b 	bl	80096bc <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	681b      	ldr	r3, [r3, #0]
 800908a:	689b      	ldr	r3, [r3, #8]
 800908c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	681b      	ldr	r3, [r3, #0]
 8009092:	699b      	ldr	r3, [r3, #24]
 8009094:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	681b      	ldr	r3, [r3, #0]
 800909a:	6a1b      	ldr	r3, [r3, #32]
 800909c:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800909e:	683b      	ldr	r3, [r7, #0]
 80090a0:	681b      	ldr	r3, [r3, #0]
 80090a2:	697a      	ldr	r2, [r7, #20]
 80090a4:	4313      	orrs	r3, r2
 80090a6:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80090a8:	693b      	ldr	r3, [r7, #16]
 80090aa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80090ae:	f023 0303 	bic.w	r3, r3, #3
 80090b2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80090b4:	683b      	ldr	r3, [r7, #0]
 80090b6:	689a      	ldr	r2, [r3, #8]
 80090b8:	683b      	ldr	r3, [r7, #0]
 80090ba:	699b      	ldr	r3, [r3, #24]
 80090bc:	021b      	lsls	r3, r3, #8
 80090be:	4313      	orrs	r3, r2
 80090c0:	693a      	ldr	r2, [r7, #16]
 80090c2:	4313      	orrs	r3, r2
 80090c4:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80090c6:	693b      	ldr	r3, [r7, #16]
 80090c8:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 80090cc:	f023 030c 	bic.w	r3, r3, #12
 80090d0:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80090d2:	693b      	ldr	r3, [r7, #16]
 80090d4:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80090d8:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80090dc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80090de:	683b      	ldr	r3, [r7, #0]
 80090e0:	68da      	ldr	r2, [r3, #12]
 80090e2:	683b      	ldr	r3, [r7, #0]
 80090e4:	69db      	ldr	r3, [r3, #28]
 80090e6:	021b      	lsls	r3, r3, #8
 80090e8:	4313      	orrs	r3, r2
 80090ea:	693a      	ldr	r2, [r7, #16]
 80090ec:	4313      	orrs	r3, r2
 80090ee:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80090f0:	683b      	ldr	r3, [r7, #0]
 80090f2:	691b      	ldr	r3, [r3, #16]
 80090f4:	011a      	lsls	r2, r3, #4
 80090f6:	683b      	ldr	r3, [r7, #0]
 80090f8:	6a1b      	ldr	r3, [r3, #32]
 80090fa:	031b      	lsls	r3, r3, #12
 80090fc:	4313      	orrs	r3, r2
 80090fe:	693a      	ldr	r2, [r7, #16]
 8009100:	4313      	orrs	r3, r2
 8009102:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8009104:	68fb      	ldr	r3, [r7, #12]
 8009106:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 800910a:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800910c:	68fb      	ldr	r3, [r7, #12]
 800910e:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8009112:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8009114:	683b      	ldr	r3, [r7, #0]
 8009116:	685a      	ldr	r2, [r3, #4]
 8009118:	683b      	ldr	r3, [r7, #0]
 800911a:	695b      	ldr	r3, [r3, #20]
 800911c:	011b      	lsls	r3, r3, #4
 800911e:	4313      	orrs	r3, r2
 8009120:	68fa      	ldr	r2, [r7, #12]
 8009122:	4313      	orrs	r3, r2
 8009124:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	681b      	ldr	r3, [r3, #0]
 800912a:	697a      	ldr	r2, [r7, #20]
 800912c:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	681b      	ldr	r3, [r3, #0]
 8009132:	693a      	ldr	r2, [r7, #16]
 8009134:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	681b      	ldr	r3, [r3, #0]
 800913a:	68fa      	ldr	r2, [r7, #12]
 800913c:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	2201      	movs	r2, #1
 8009142:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	2201      	movs	r2, #1
 800914a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	2201      	movs	r2, #1
 8009152:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	2201      	movs	r2, #1
 800915a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	2201      	movs	r2, #1
 8009162:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	2201      	movs	r2, #1
 800916a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800916e:	2300      	movs	r3, #0
}
 8009170:	4618      	mov	r0, r3
 8009172:	3718      	adds	r7, #24
 8009174:	46bd      	mov	sp, r7
 8009176:	bd80      	pop	{r7, pc}

08009178 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009178:	b580      	push	{r7, lr}
 800917a:	b084      	sub	sp, #16
 800917c:	af00      	add	r7, sp, #0
 800917e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	681b      	ldr	r3, [r3, #0]
 8009184:	68db      	ldr	r3, [r3, #12]
 8009186:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	681b      	ldr	r3, [r3, #0]
 800918c:	691b      	ldr	r3, [r3, #16]
 800918e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8009190:	68bb      	ldr	r3, [r7, #8]
 8009192:	f003 0302 	and.w	r3, r3, #2
 8009196:	2b00      	cmp	r3, #0
 8009198:	d020      	beq.n	80091dc <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800919a:	68fb      	ldr	r3, [r7, #12]
 800919c:	f003 0302 	and.w	r3, r3, #2
 80091a0:	2b00      	cmp	r3, #0
 80091a2:	d01b      	beq.n	80091dc <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	681b      	ldr	r3, [r3, #0]
 80091a8:	f06f 0202 	mvn.w	r2, #2
 80091ac:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	2201      	movs	r2, #1
 80091b2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	681b      	ldr	r3, [r3, #0]
 80091b8:	699b      	ldr	r3, [r3, #24]
 80091ba:	f003 0303 	and.w	r3, r3, #3
 80091be:	2b00      	cmp	r3, #0
 80091c0:	d003      	beq.n	80091ca <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80091c2:	6878      	ldr	r0, [r7, #4]
 80091c4:	f000 fa5b 	bl	800967e <HAL_TIM_IC_CaptureCallback>
 80091c8:	e005      	b.n	80091d6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80091ca:	6878      	ldr	r0, [r7, #4]
 80091cc:	f000 fa4d 	bl	800966a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80091d0:	6878      	ldr	r0, [r7, #4]
 80091d2:	f000 fa5e 	bl	8009692 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	2200      	movs	r2, #0
 80091da:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80091dc:	68bb      	ldr	r3, [r7, #8]
 80091de:	f003 0304 	and.w	r3, r3, #4
 80091e2:	2b00      	cmp	r3, #0
 80091e4:	d020      	beq.n	8009228 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80091e6:	68fb      	ldr	r3, [r7, #12]
 80091e8:	f003 0304 	and.w	r3, r3, #4
 80091ec:	2b00      	cmp	r3, #0
 80091ee:	d01b      	beq.n	8009228 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	681b      	ldr	r3, [r3, #0]
 80091f4:	f06f 0204 	mvn.w	r2, #4
 80091f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	2202      	movs	r2, #2
 80091fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	681b      	ldr	r3, [r3, #0]
 8009204:	699b      	ldr	r3, [r3, #24]
 8009206:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800920a:	2b00      	cmp	r3, #0
 800920c:	d003      	beq.n	8009216 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800920e:	6878      	ldr	r0, [r7, #4]
 8009210:	f000 fa35 	bl	800967e <HAL_TIM_IC_CaptureCallback>
 8009214:	e005      	b.n	8009222 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009216:	6878      	ldr	r0, [r7, #4]
 8009218:	f000 fa27 	bl	800966a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800921c:	6878      	ldr	r0, [r7, #4]
 800921e:	f000 fa38 	bl	8009692 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	2200      	movs	r2, #0
 8009226:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8009228:	68bb      	ldr	r3, [r7, #8]
 800922a:	f003 0308 	and.w	r3, r3, #8
 800922e:	2b00      	cmp	r3, #0
 8009230:	d020      	beq.n	8009274 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8009232:	68fb      	ldr	r3, [r7, #12]
 8009234:	f003 0308 	and.w	r3, r3, #8
 8009238:	2b00      	cmp	r3, #0
 800923a:	d01b      	beq.n	8009274 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	681b      	ldr	r3, [r3, #0]
 8009240:	f06f 0208 	mvn.w	r2, #8
 8009244:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	2204      	movs	r2, #4
 800924a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	681b      	ldr	r3, [r3, #0]
 8009250:	69db      	ldr	r3, [r3, #28]
 8009252:	f003 0303 	and.w	r3, r3, #3
 8009256:	2b00      	cmp	r3, #0
 8009258:	d003      	beq.n	8009262 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800925a:	6878      	ldr	r0, [r7, #4]
 800925c:	f000 fa0f 	bl	800967e <HAL_TIM_IC_CaptureCallback>
 8009260:	e005      	b.n	800926e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009262:	6878      	ldr	r0, [r7, #4]
 8009264:	f000 fa01 	bl	800966a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009268:	6878      	ldr	r0, [r7, #4]
 800926a:	f000 fa12 	bl	8009692 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	2200      	movs	r2, #0
 8009272:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8009274:	68bb      	ldr	r3, [r7, #8]
 8009276:	f003 0310 	and.w	r3, r3, #16
 800927a:	2b00      	cmp	r3, #0
 800927c:	d020      	beq.n	80092c0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800927e:	68fb      	ldr	r3, [r7, #12]
 8009280:	f003 0310 	and.w	r3, r3, #16
 8009284:	2b00      	cmp	r3, #0
 8009286:	d01b      	beq.n	80092c0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	681b      	ldr	r3, [r3, #0]
 800928c:	f06f 0210 	mvn.w	r2, #16
 8009290:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	2208      	movs	r2, #8
 8009296:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	681b      	ldr	r3, [r3, #0]
 800929c:	69db      	ldr	r3, [r3, #28]
 800929e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80092a2:	2b00      	cmp	r3, #0
 80092a4:	d003      	beq.n	80092ae <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80092a6:	6878      	ldr	r0, [r7, #4]
 80092a8:	f000 f9e9 	bl	800967e <HAL_TIM_IC_CaptureCallback>
 80092ac:	e005      	b.n	80092ba <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80092ae:	6878      	ldr	r0, [r7, #4]
 80092b0:	f000 f9db 	bl	800966a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80092b4:	6878      	ldr	r0, [r7, #4]
 80092b6:	f000 f9ec 	bl	8009692 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	2200      	movs	r2, #0
 80092be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80092c0:	68bb      	ldr	r3, [r7, #8]
 80092c2:	f003 0301 	and.w	r3, r3, #1
 80092c6:	2b00      	cmp	r3, #0
 80092c8:	d00c      	beq.n	80092e4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80092ca:	68fb      	ldr	r3, [r7, #12]
 80092cc:	f003 0301 	and.w	r3, r3, #1
 80092d0:	2b00      	cmp	r3, #0
 80092d2:	d007      	beq.n	80092e4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	681b      	ldr	r3, [r3, #0]
 80092d8:	f06f 0201 	mvn.w	r2, #1
 80092dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80092de:	6878      	ldr	r0, [r7, #4]
 80092e0:	f7f8 fffc 	bl	80022dc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80092e4:	68bb      	ldr	r3, [r7, #8]
 80092e6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80092ea:	2b00      	cmp	r3, #0
 80092ec:	d00c      	beq.n	8009308 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80092ee:	68fb      	ldr	r3, [r7, #12]
 80092f0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80092f4:	2b00      	cmp	r3, #0
 80092f6:	d007      	beq.n	8009308 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	681b      	ldr	r3, [r3, #0]
 80092fc:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8009300:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009302:	6878      	ldr	r0, [r7, #4]
 8009304:	f000 fd76 	bl	8009df4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8009308:	68bb      	ldr	r3, [r7, #8]
 800930a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800930e:	2b00      	cmp	r3, #0
 8009310:	d00c      	beq.n	800932c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8009312:	68fb      	ldr	r3, [r7, #12]
 8009314:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009318:	2b00      	cmp	r3, #0
 800931a:	d007      	beq.n	800932c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	681b      	ldr	r3, [r3, #0]
 8009320:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8009324:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009326:	6878      	ldr	r0, [r7, #4]
 8009328:	f000 f9bd 	bl	80096a6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800932c:	68bb      	ldr	r3, [r7, #8]
 800932e:	f003 0320 	and.w	r3, r3, #32
 8009332:	2b00      	cmp	r3, #0
 8009334:	d00c      	beq.n	8009350 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8009336:	68fb      	ldr	r3, [r7, #12]
 8009338:	f003 0320 	and.w	r3, r3, #32
 800933c:	2b00      	cmp	r3, #0
 800933e:	d007      	beq.n	8009350 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	681b      	ldr	r3, [r3, #0]
 8009344:	f06f 0220 	mvn.w	r2, #32
 8009348:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800934a:	6878      	ldr	r0, [r7, #4]
 800934c:	f000 fd48 	bl	8009de0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009350:	bf00      	nop
 8009352:	3710      	adds	r7, #16
 8009354:	46bd      	mov	sp, r7
 8009356:	bd80      	pop	{r7, pc}

08009358 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8009358:	b580      	push	{r7, lr}
 800935a:	b086      	sub	sp, #24
 800935c:	af00      	add	r7, sp, #0
 800935e:	60f8      	str	r0, [r7, #12]
 8009360:	60b9      	str	r1, [r7, #8]
 8009362:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009364:	2300      	movs	r3, #0
 8009366:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8009368:	68fb      	ldr	r3, [r7, #12]
 800936a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800936e:	2b01      	cmp	r3, #1
 8009370:	d101      	bne.n	8009376 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8009372:	2302      	movs	r3, #2
 8009374:	e0ae      	b.n	80094d4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8009376:	68fb      	ldr	r3, [r7, #12]
 8009378:	2201      	movs	r2, #1
 800937a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	2b0c      	cmp	r3, #12
 8009382:	f200 809f 	bhi.w	80094c4 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8009386:	a201      	add	r2, pc, #4	@ (adr r2, 800938c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8009388:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800938c:	080093c1 	.word	0x080093c1
 8009390:	080094c5 	.word	0x080094c5
 8009394:	080094c5 	.word	0x080094c5
 8009398:	080094c5 	.word	0x080094c5
 800939c:	08009401 	.word	0x08009401
 80093a0:	080094c5 	.word	0x080094c5
 80093a4:	080094c5 	.word	0x080094c5
 80093a8:	080094c5 	.word	0x080094c5
 80093ac:	08009443 	.word	0x08009443
 80093b0:	080094c5 	.word	0x080094c5
 80093b4:	080094c5 	.word	0x080094c5
 80093b8:	080094c5 	.word	0x080094c5
 80093bc:	08009483 	.word	0x08009483
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80093c0:	68fb      	ldr	r3, [r7, #12]
 80093c2:	681b      	ldr	r3, [r3, #0]
 80093c4:	68b9      	ldr	r1, [r7, #8]
 80093c6:	4618      	mov	r0, r3
 80093c8:	f000 f9fe 	bl	80097c8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80093cc:	68fb      	ldr	r3, [r7, #12]
 80093ce:	681b      	ldr	r3, [r3, #0]
 80093d0:	699a      	ldr	r2, [r3, #24]
 80093d2:	68fb      	ldr	r3, [r7, #12]
 80093d4:	681b      	ldr	r3, [r3, #0]
 80093d6:	f042 0208 	orr.w	r2, r2, #8
 80093da:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80093dc:	68fb      	ldr	r3, [r7, #12]
 80093de:	681b      	ldr	r3, [r3, #0]
 80093e0:	699a      	ldr	r2, [r3, #24]
 80093e2:	68fb      	ldr	r3, [r7, #12]
 80093e4:	681b      	ldr	r3, [r3, #0]
 80093e6:	f022 0204 	bic.w	r2, r2, #4
 80093ea:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80093ec:	68fb      	ldr	r3, [r7, #12]
 80093ee:	681b      	ldr	r3, [r3, #0]
 80093f0:	6999      	ldr	r1, [r3, #24]
 80093f2:	68bb      	ldr	r3, [r7, #8]
 80093f4:	691a      	ldr	r2, [r3, #16]
 80093f6:	68fb      	ldr	r3, [r7, #12]
 80093f8:	681b      	ldr	r3, [r3, #0]
 80093fa:	430a      	orrs	r2, r1
 80093fc:	619a      	str	r2, [r3, #24]
      break;
 80093fe:	e064      	b.n	80094ca <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8009400:	68fb      	ldr	r3, [r7, #12]
 8009402:	681b      	ldr	r3, [r3, #0]
 8009404:	68b9      	ldr	r1, [r7, #8]
 8009406:	4618      	mov	r0, r3
 8009408:	f000 fa44 	bl	8009894 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800940c:	68fb      	ldr	r3, [r7, #12]
 800940e:	681b      	ldr	r3, [r3, #0]
 8009410:	699a      	ldr	r2, [r3, #24]
 8009412:	68fb      	ldr	r3, [r7, #12]
 8009414:	681b      	ldr	r3, [r3, #0]
 8009416:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800941a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800941c:	68fb      	ldr	r3, [r7, #12]
 800941e:	681b      	ldr	r3, [r3, #0]
 8009420:	699a      	ldr	r2, [r3, #24]
 8009422:	68fb      	ldr	r3, [r7, #12]
 8009424:	681b      	ldr	r3, [r3, #0]
 8009426:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800942a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800942c:	68fb      	ldr	r3, [r7, #12]
 800942e:	681b      	ldr	r3, [r3, #0]
 8009430:	6999      	ldr	r1, [r3, #24]
 8009432:	68bb      	ldr	r3, [r7, #8]
 8009434:	691b      	ldr	r3, [r3, #16]
 8009436:	021a      	lsls	r2, r3, #8
 8009438:	68fb      	ldr	r3, [r7, #12]
 800943a:	681b      	ldr	r3, [r3, #0]
 800943c:	430a      	orrs	r2, r1
 800943e:	619a      	str	r2, [r3, #24]
      break;
 8009440:	e043      	b.n	80094ca <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8009442:	68fb      	ldr	r3, [r7, #12]
 8009444:	681b      	ldr	r3, [r3, #0]
 8009446:	68b9      	ldr	r1, [r7, #8]
 8009448:	4618      	mov	r0, r3
 800944a:	f000 fa8f 	bl	800996c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800944e:	68fb      	ldr	r3, [r7, #12]
 8009450:	681b      	ldr	r3, [r3, #0]
 8009452:	69da      	ldr	r2, [r3, #28]
 8009454:	68fb      	ldr	r3, [r7, #12]
 8009456:	681b      	ldr	r3, [r3, #0]
 8009458:	f042 0208 	orr.w	r2, r2, #8
 800945c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800945e:	68fb      	ldr	r3, [r7, #12]
 8009460:	681b      	ldr	r3, [r3, #0]
 8009462:	69da      	ldr	r2, [r3, #28]
 8009464:	68fb      	ldr	r3, [r7, #12]
 8009466:	681b      	ldr	r3, [r3, #0]
 8009468:	f022 0204 	bic.w	r2, r2, #4
 800946c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800946e:	68fb      	ldr	r3, [r7, #12]
 8009470:	681b      	ldr	r3, [r3, #0]
 8009472:	69d9      	ldr	r1, [r3, #28]
 8009474:	68bb      	ldr	r3, [r7, #8]
 8009476:	691a      	ldr	r2, [r3, #16]
 8009478:	68fb      	ldr	r3, [r7, #12]
 800947a:	681b      	ldr	r3, [r3, #0]
 800947c:	430a      	orrs	r2, r1
 800947e:	61da      	str	r2, [r3, #28]
      break;
 8009480:	e023      	b.n	80094ca <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8009482:	68fb      	ldr	r3, [r7, #12]
 8009484:	681b      	ldr	r3, [r3, #0]
 8009486:	68b9      	ldr	r1, [r7, #8]
 8009488:	4618      	mov	r0, r3
 800948a:	f000 fad9 	bl	8009a40 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800948e:	68fb      	ldr	r3, [r7, #12]
 8009490:	681b      	ldr	r3, [r3, #0]
 8009492:	69da      	ldr	r2, [r3, #28]
 8009494:	68fb      	ldr	r3, [r7, #12]
 8009496:	681b      	ldr	r3, [r3, #0]
 8009498:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800949c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800949e:	68fb      	ldr	r3, [r7, #12]
 80094a0:	681b      	ldr	r3, [r3, #0]
 80094a2:	69da      	ldr	r2, [r3, #28]
 80094a4:	68fb      	ldr	r3, [r7, #12]
 80094a6:	681b      	ldr	r3, [r3, #0]
 80094a8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80094ac:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80094ae:	68fb      	ldr	r3, [r7, #12]
 80094b0:	681b      	ldr	r3, [r3, #0]
 80094b2:	69d9      	ldr	r1, [r3, #28]
 80094b4:	68bb      	ldr	r3, [r7, #8]
 80094b6:	691b      	ldr	r3, [r3, #16]
 80094b8:	021a      	lsls	r2, r3, #8
 80094ba:	68fb      	ldr	r3, [r7, #12]
 80094bc:	681b      	ldr	r3, [r3, #0]
 80094be:	430a      	orrs	r2, r1
 80094c0:	61da      	str	r2, [r3, #28]
      break;
 80094c2:	e002      	b.n	80094ca <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80094c4:	2301      	movs	r3, #1
 80094c6:	75fb      	strb	r3, [r7, #23]
      break;
 80094c8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80094ca:	68fb      	ldr	r3, [r7, #12]
 80094cc:	2200      	movs	r2, #0
 80094ce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80094d2:	7dfb      	ldrb	r3, [r7, #23]
}
 80094d4:	4618      	mov	r0, r3
 80094d6:	3718      	adds	r7, #24
 80094d8:	46bd      	mov	sp, r7
 80094da:	bd80      	pop	{r7, pc}

080094dc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80094dc:	b580      	push	{r7, lr}
 80094de:	b084      	sub	sp, #16
 80094e0:	af00      	add	r7, sp, #0
 80094e2:	6078      	str	r0, [r7, #4]
 80094e4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80094e6:	2300      	movs	r3, #0
 80094e8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80094f0:	2b01      	cmp	r3, #1
 80094f2:	d101      	bne.n	80094f8 <HAL_TIM_ConfigClockSource+0x1c>
 80094f4:	2302      	movs	r3, #2
 80094f6:	e0b4      	b.n	8009662 <HAL_TIM_ConfigClockSource+0x186>
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	2201      	movs	r2, #1
 80094fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	2202      	movs	r2, #2
 8009504:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	681b      	ldr	r3, [r3, #0]
 800950c:	689b      	ldr	r3, [r3, #8]
 800950e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8009510:	68bb      	ldr	r3, [r7, #8]
 8009512:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8009516:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009518:	68bb      	ldr	r3, [r7, #8]
 800951a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800951e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	681b      	ldr	r3, [r3, #0]
 8009524:	68ba      	ldr	r2, [r7, #8]
 8009526:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8009528:	683b      	ldr	r3, [r7, #0]
 800952a:	681b      	ldr	r3, [r3, #0]
 800952c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009530:	d03e      	beq.n	80095b0 <HAL_TIM_ConfigClockSource+0xd4>
 8009532:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009536:	f200 8087 	bhi.w	8009648 <HAL_TIM_ConfigClockSource+0x16c>
 800953a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800953e:	f000 8086 	beq.w	800964e <HAL_TIM_ConfigClockSource+0x172>
 8009542:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009546:	d87f      	bhi.n	8009648 <HAL_TIM_ConfigClockSource+0x16c>
 8009548:	2b70      	cmp	r3, #112	@ 0x70
 800954a:	d01a      	beq.n	8009582 <HAL_TIM_ConfigClockSource+0xa6>
 800954c:	2b70      	cmp	r3, #112	@ 0x70
 800954e:	d87b      	bhi.n	8009648 <HAL_TIM_ConfigClockSource+0x16c>
 8009550:	2b60      	cmp	r3, #96	@ 0x60
 8009552:	d050      	beq.n	80095f6 <HAL_TIM_ConfigClockSource+0x11a>
 8009554:	2b60      	cmp	r3, #96	@ 0x60
 8009556:	d877      	bhi.n	8009648 <HAL_TIM_ConfigClockSource+0x16c>
 8009558:	2b50      	cmp	r3, #80	@ 0x50
 800955a:	d03c      	beq.n	80095d6 <HAL_TIM_ConfigClockSource+0xfa>
 800955c:	2b50      	cmp	r3, #80	@ 0x50
 800955e:	d873      	bhi.n	8009648 <HAL_TIM_ConfigClockSource+0x16c>
 8009560:	2b40      	cmp	r3, #64	@ 0x40
 8009562:	d058      	beq.n	8009616 <HAL_TIM_ConfigClockSource+0x13a>
 8009564:	2b40      	cmp	r3, #64	@ 0x40
 8009566:	d86f      	bhi.n	8009648 <HAL_TIM_ConfigClockSource+0x16c>
 8009568:	2b30      	cmp	r3, #48	@ 0x30
 800956a:	d064      	beq.n	8009636 <HAL_TIM_ConfigClockSource+0x15a>
 800956c:	2b30      	cmp	r3, #48	@ 0x30
 800956e:	d86b      	bhi.n	8009648 <HAL_TIM_ConfigClockSource+0x16c>
 8009570:	2b20      	cmp	r3, #32
 8009572:	d060      	beq.n	8009636 <HAL_TIM_ConfigClockSource+0x15a>
 8009574:	2b20      	cmp	r3, #32
 8009576:	d867      	bhi.n	8009648 <HAL_TIM_ConfigClockSource+0x16c>
 8009578:	2b00      	cmp	r3, #0
 800957a:	d05c      	beq.n	8009636 <HAL_TIM_ConfigClockSource+0x15a>
 800957c:	2b10      	cmp	r3, #16
 800957e:	d05a      	beq.n	8009636 <HAL_TIM_ConfigClockSource+0x15a>
 8009580:	e062      	b.n	8009648 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8009586:	683b      	ldr	r3, [r7, #0]
 8009588:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800958a:	683b      	ldr	r3, [r7, #0]
 800958c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800958e:	683b      	ldr	r3, [r7, #0]
 8009590:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8009592:	f000 fb1f 	bl	8009bd4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	681b      	ldr	r3, [r3, #0]
 800959a:	689b      	ldr	r3, [r3, #8]
 800959c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800959e:	68bb      	ldr	r3, [r7, #8]
 80095a0:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80095a4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	681b      	ldr	r3, [r3, #0]
 80095aa:	68ba      	ldr	r2, [r7, #8]
 80095ac:	609a      	str	r2, [r3, #8]
      break;
 80095ae:	e04f      	b.n	8009650 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80095b4:	683b      	ldr	r3, [r7, #0]
 80095b6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80095b8:	683b      	ldr	r3, [r7, #0]
 80095ba:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80095bc:	683b      	ldr	r3, [r7, #0]
 80095be:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80095c0:	f000 fb08 	bl	8009bd4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	681b      	ldr	r3, [r3, #0]
 80095c8:	689a      	ldr	r2, [r3, #8]
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	681b      	ldr	r3, [r3, #0]
 80095ce:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80095d2:	609a      	str	r2, [r3, #8]
      break;
 80095d4:	e03c      	b.n	8009650 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80095da:	683b      	ldr	r3, [r7, #0]
 80095dc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80095de:	683b      	ldr	r3, [r7, #0]
 80095e0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80095e2:	461a      	mov	r2, r3
 80095e4:	f000 fa7c 	bl	8009ae0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	681b      	ldr	r3, [r3, #0]
 80095ec:	2150      	movs	r1, #80	@ 0x50
 80095ee:	4618      	mov	r0, r3
 80095f0:	f000 fad5 	bl	8009b9e <TIM_ITRx_SetConfig>
      break;
 80095f4:	e02c      	b.n	8009650 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80095fa:	683b      	ldr	r3, [r7, #0]
 80095fc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80095fe:	683b      	ldr	r3, [r7, #0]
 8009600:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8009602:	461a      	mov	r2, r3
 8009604:	f000 fa9b 	bl	8009b3e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	681b      	ldr	r3, [r3, #0]
 800960c:	2160      	movs	r1, #96	@ 0x60
 800960e:	4618      	mov	r0, r3
 8009610:	f000 fac5 	bl	8009b9e <TIM_ITRx_SetConfig>
      break;
 8009614:	e01c      	b.n	8009650 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800961a:	683b      	ldr	r3, [r7, #0]
 800961c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800961e:	683b      	ldr	r3, [r7, #0]
 8009620:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009622:	461a      	mov	r2, r3
 8009624:	f000 fa5c 	bl	8009ae0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	681b      	ldr	r3, [r3, #0]
 800962c:	2140      	movs	r1, #64	@ 0x40
 800962e:	4618      	mov	r0, r3
 8009630:	f000 fab5 	bl	8009b9e <TIM_ITRx_SetConfig>
      break;
 8009634:	e00c      	b.n	8009650 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	681a      	ldr	r2, [r3, #0]
 800963a:	683b      	ldr	r3, [r7, #0]
 800963c:	681b      	ldr	r3, [r3, #0]
 800963e:	4619      	mov	r1, r3
 8009640:	4610      	mov	r0, r2
 8009642:	f000 faac 	bl	8009b9e <TIM_ITRx_SetConfig>
      break;
 8009646:	e003      	b.n	8009650 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8009648:	2301      	movs	r3, #1
 800964a:	73fb      	strb	r3, [r7, #15]
      break;
 800964c:	e000      	b.n	8009650 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800964e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	2201      	movs	r2, #1
 8009654:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	2200      	movs	r2, #0
 800965c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8009660:	7bfb      	ldrb	r3, [r7, #15]
}
 8009662:	4618      	mov	r0, r3
 8009664:	3710      	adds	r7, #16
 8009666:	46bd      	mov	sp, r7
 8009668:	bd80      	pop	{r7, pc}

0800966a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800966a:	b480      	push	{r7}
 800966c:	b083      	sub	sp, #12
 800966e:	af00      	add	r7, sp, #0
 8009670:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009672:	bf00      	nop
 8009674:	370c      	adds	r7, #12
 8009676:	46bd      	mov	sp, r7
 8009678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800967c:	4770      	bx	lr

0800967e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800967e:	b480      	push	{r7}
 8009680:	b083      	sub	sp, #12
 8009682:	af00      	add	r7, sp, #0
 8009684:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009686:	bf00      	nop
 8009688:	370c      	adds	r7, #12
 800968a:	46bd      	mov	sp, r7
 800968c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009690:	4770      	bx	lr

08009692 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009692:	b480      	push	{r7}
 8009694:	b083      	sub	sp, #12
 8009696:	af00      	add	r7, sp, #0
 8009698:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800969a:	bf00      	nop
 800969c:	370c      	adds	r7, #12
 800969e:	46bd      	mov	sp, r7
 80096a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096a4:	4770      	bx	lr

080096a6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80096a6:	b480      	push	{r7}
 80096a8:	b083      	sub	sp, #12
 80096aa:	af00      	add	r7, sp, #0
 80096ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80096ae:	bf00      	nop
 80096b0:	370c      	adds	r7, #12
 80096b2:	46bd      	mov	sp, r7
 80096b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096b8:	4770      	bx	lr
	...

080096bc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80096bc:	b480      	push	{r7}
 80096be:	b085      	sub	sp, #20
 80096c0:	af00      	add	r7, sp, #0
 80096c2:	6078      	str	r0, [r7, #4]
 80096c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	681b      	ldr	r3, [r3, #0]
 80096ca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	4a37      	ldr	r2, [pc, #220]	@ (80097ac <TIM_Base_SetConfig+0xf0>)
 80096d0:	4293      	cmp	r3, r2
 80096d2:	d00f      	beq.n	80096f4 <TIM_Base_SetConfig+0x38>
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80096da:	d00b      	beq.n	80096f4 <TIM_Base_SetConfig+0x38>
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	4a34      	ldr	r2, [pc, #208]	@ (80097b0 <TIM_Base_SetConfig+0xf4>)
 80096e0:	4293      	cmp	r3, r2
 80096e2:	d007      	beq.n	80096f4 <TIM_Base_SetConfig+0x38>
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	4a33      	ldr	r2, [pc, #204]	@ (80097b4 <TIM_Base_SetConfig+0xf8>)
 80096e8:	4293      	cmp	r3, r2
 80096ea:	d003      	beq.n	80096f4 <TIM_Base_SetConfig+0x38>
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	4a32      	ldr	r2, [pc, #200]	@ (80097b8 <TIM_Base_SetConfig+0xfc>)
 80096f0:	4293      	cmp	r3, r2
 80096f2:	d108      	bne.n	8009706 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80096f4:	68fb      	ldr	r3, [r7, #12]
 80096f6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80096fa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80096fc:	683b      	ldr	r3, [r7, #0]
 80096fe:	685b      	ldr	r3, [r3, #4]
 8009700:	68fa      	ldr	r2, [r7, #12]
 8009702:	4313      	orrs	r3, r2
 8009704:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	4a28      	ldr	r2, [pc, #160]	@ (80097ac <TIM_Base_SetConfig+0xf0>)
 800970a:	4293      	cmp	r3, r2
 800970c:	d01b      	beq.n	8009746 <TIM_Base_SetConfig+0x8a>
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009714:	d017      	beq.n	8009746 <TIM_Base_SetConfig+0x8a>
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	4a25      	ldr	r2, [pc, #148]	@ (80097b0 <TIM_Base_SetConfig+0xf4>)
 800971a:	4293      	cmp	r3, r2
 800971c:	d013      	beq.n	8009746 <TIM_Base_SetConfig+0x8a>
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	4a24      	ldr	r2, [pc, #144]	@ (80097b4 <TIM_Base_SetConfig+0xf8>)
 8009722:	4293      	cmp	r3, r2
 8009724:	d00f      	beq.n	8009746 <TIM_Base_SetConfig+0x8a>
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	4a23      	ldr	r2, [pc, #140]	@ (80097b8 <TIM_Base_SetConfig+0xfc>)
 800972a:	4293      	cmp	r3, r2
 800972c:	d00b      	beq.n	8009746 <TIM_Base_SetConfig+0x8a>
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	4a22      	ldr	r2, [pc, #136]	@ (80097bc <TIM_Base_SetConfig+0x100>)
 8009732:	4293      	cmp	r3, r2
 8009734:	d007      	beq.n	8009746 <TIM_Base_SetConfig+0x8a>
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	4a21      	ldr	r2, [pc, #132]	@ (80097c0 <TIM_Base_SetConfig+0x104>)
 800973a:	4293      	cmp	r3, r2
 800973c:	d003      	beq.n	8009746 <TIM_Base_SetConfig+0x8a>
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	4a20      	ldr	r2, [pc, #128]	@ (80097c4 <TIM_Base_SetConfig+0x108>)
 8009742:	4293      	cmp	r3, r2
 8009744:	d108      	bne.n	8009758 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009746:	68fb      	ldr	r3, [r7, #12]
 8009748:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800974c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800974e:	683b      	ldr	r3, [r7, #0]
 8009750:	68db      	ldr	r3, [r3, #12]
 8009752:	68fa      	ldr	r2, [r7, #12]
 8009754:	4313      	orrs	r3, r2
 8009756:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009758:	68fb      	ldr	r3, [r7, #12]
 800975a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800975e:	683b      	ldr	r3, [r7, #0]
 8009760:	695b      	ldr	r3, [r3, #20]
 8009762:	4313      	orrs	r3, r2
 8009764:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009766:	683b      	ldr	r3, [r7, #0]
 8009768:	689a      	ldr	r2, [r3, #8]
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800976e:	683b      	ldr	r3, [r7, #0]
 8009770:	681a      	ldr	r2, [r3, #0]
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	4a0c      	ldr	r2, [pc, #48]	@ (80097ac <TIM_Base_SetConfig+0xf0>)
 800977a:	4293      	cmp	r3, r2
 800977c:	d103      	bne.n	8009786 <TIM_Base_SetConfig+0xca>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800977e:	683b      	ldr	r3, [r7, #0]
 8009780:	691a      	ldr	r2, [r3, #16]
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	681b      	ldr	r3, [r3, #0]
 800978a:	f043 0204 	orr.w	r2, r3, #4
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	2201      	movs	r2, #1
 8009796:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	68fa      	ldr	r2, [r7, #12]
 800979c:	601a      	str	r2, [r3, #0]
}
 800979e:	bf00      	nop
 80097a0:	3714      	adds	r7, #20
 80097a2:	46bd      	mov	sp, r7
 80097a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097a8:	4770      	bx	lr
 80097aa:	bf00      	nop
 80097ac:	40010000 	.word	0x40010000
 80097b0:	40000400 	.word	0x40000400
 80097b4:	40000800 	.word	0x40000800
 80097b8:	40000c00 	.word	0x40000c00
 80097bc:	40014000 	.word	0x40014000
 80097c0:	40014400 	.word	0x40014400
 80097c4:	40014800 	.word	0x40014800

080097c8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80097c8:	b480      	push	{r7}
 80097ca:	b087      	sub	sp, #28
 80097cc:	af00      	add	r7, sp, #0
 80097ce:	6078      	str	r0, [r7, #4]
 80097d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	6a1b      	ldr	r3, [r3, #32]
 80097d6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	6a1b      	ldr	r3, [r3, #32]
 80097dc:	f023 0201 	bic.w	r2, r3, #1
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	685b      	ldr	r3, [r3, #4]
 80097e8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	699b      	ldr	r3, [r3, #24]
 80097ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80097f0:	68fb      	ldr	r3, [r7, #12]
 80097f2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80097f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80097f8:	68fb      	ldr	r3, [r7, #12]
 80097fa:	f023 0303 	bic.w	r3, r3, #3
 80097fe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009800:	683b      	ldr	r3, [r7, #0]
 8009802:	681b      	ldr	r3, [r3, #0]
 8009804:	68fa      	ldr	r2, [r7, #12]
 8009806:	4313      	orrs	r3, r2
 8009808:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800980a:	697b      	ldr	r3, [r7, #20]
 800980c:	f023 0302 	bic.w	r3, r3, #2
 8009810:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8009812:	683b      	ldr	r3, [r7, #0]
 8009814:	689b      	ldr	r3, [r3, #8]
 8009816:	697a      	ldr	r2, [r7, #20]
 8009818:	4313      	orrs	r3, r2
 800981a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	4a1c      	ldr	r2, [pc, #112]	@ (8009890 <TIM_OC1_SetConfig+0xc8>)
 8009820:	4293      	cmp	r3, r2
 8009822:	d10c      	bne.n	800983e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8009824:	697b      	ldr	r3, [r7, #20]
 8009826:	f023 0308 	bic.w	r3, r3, #8
 800982a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800982c:	683b      	ldr	r3, [r7, #0]
 800982e:	68db      	ldr	r3, [r3, #12]
 8009830:	697a      	ldr	r2, [r7, #20]
 8009832:	4313      	orrs	r3, r2
 8009834:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8009836:	697b      	ldr	r3, [r7, #20]
 8009838:	f023 0304 	bic.w	r3, r3, #4
 800983c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	4a13      	ldr	r2, [pc, #76]	@ (8009890 <TIM_OC1_SetConfig+0xc8>)
 8009842:	4293      	cmp	r3, r2
 8009844:	d111      	bne.n	800986a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8009846:	693b      	ldr	r3, [r7, #16]
 8009848:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800984c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800984e:	693b      	ldr	r3, [r7, #16]
 8009850:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8009854:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8009856:	683b      	ldr	r3, [r7, #0]
 8009858:	695b      	ldr	r3, [r3, #20]
 800985a:	693a      	ldr	r2, [r7, #16]
 800985c:	4313      	orrs	r3, r2
 800985e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8009860:	683b      	ldr	r3, [r7, #0]
 8009862:	699b      	ldr	r3, [r3, #24]
 8009864:	693a      	ldr	r2, [r7, #16]
 8009866:	4313      	orrs	r3, r2
 8009868:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	693a      	ldr	r2, [r7, #16]
 800986e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	68fa      	ldr	r2, [r7, #12]
 8009874:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8009876:	683b      	ldr	r3, [r7, #0]
 8009878:	685a      	ldr	r2, [r3, #4]
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	697a      	ldr	r2, [r7, #20]
 8009882:	621a      	str	r2, [r3, #32]
}
 8009884:	bf00      	nop
 8009886:	371c      	adds	r7, #28
 8009888:	46bd      	mov	sp, r7
 800988a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800988e:	4770      	bx	lr
 8009890:	40010000 	.word	0x40010000

08009894 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009894:	b480      	push	{r7}
 8009896:	b087      	sub	sp, #28
 8009898:	af00      	add	r7, sp, #0
 800989a:	6078      	str	r0, [r7, #4]
 800989c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	6a1b      	ldr	r3, [r3, #32]
 80098a2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	6a1b      	ldr	r3, [r3, #32]
 80098a8:	f023 0210 	bic.w	r2, r3, #16
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	685b      	ldr	r3, [r3, #4]
 80098b4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	699b      	ldr	r3, [r3, #24]
 80098ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80098bc:	68fb      	ldr	r3, [r7, #12]
 80098be:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80098c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80098c4:	68fb      	ldr	r3, [r7, #12]
 80098c6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80098ca:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80098cc:	683b      	ldr	r3, [r7, #0]
 80098ce:	681b      	ldr	r3, [r3, #0]
 80098d0:	021b      	lsls	r3, r3, #8
 80098d2:	68fa      	ldr	r2, [r7, #12]
 80098d4:	4313      	orrs	r3, r2
 80098d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80098d8:	697b      	ldr	r3, [r7, #20]
 80098da:	f023 0320 	bic.w	r3, r3, #32
 80098de:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80098e0:	683b      	ldr	r3, [r7, #0]
 80098e2:	689b      	ldr	r3, [r3, #8]
 80098e4:	011b      	lsls	r3, r3, #4
 80098e6:	697a      	ldr	r2, [r7, #20]
 80098e8:	4313      	orrs	r3, r2
 80098ea:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	4a1e      	ldr	r2, [pc, #120]	@ (8009968 <TIM_OC2_SetConfig+0xd4>)
 80098f0:	4293      	cmp	r3, r2
 80098f2:	d10d      	bne.n	8009910 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80098f4:	697b      	ldr	r3, [r7, #20]
 80098f6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80098fa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80098fc:	683b      	ldr	r3, [r7, #0]
 80098fe:	68db      	ldr	r3, [r3, #12]
 8009900:	011b      	lsls	r3, r3, #4
 8009902:	697a      	ldr	r2, [r7, #20]
 8009904:	4313      	orrs	r3, r2
 8009906:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8009908:	697b      	ldr	r3, [r7, #20]
 800990a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800990e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	4a15      	ldr	r2, [pc, #84]	@ (8009968 <TIM_OC2_SetConfig+0xd4>)
 8009914:	4293      	cmp	r3, r2
 8009916:	d113      	bne.n	8009940 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8009918:	693b      	ldr	r3, [r7, #16]
 800991a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800991e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8009920:	693b      	ldr	r3, [r7, #16]
 8009922:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8009926:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8009928:	683b      	ldr	r3, [r7, #0]
 800992a:	695b      	ldr	r3, [r3, #20]
 800992c:	009b      	lsls	r3, r3, #2
 800992e:	693a      	ldr	r2, [r7, #16]
 8009930:	4313      	orrs	r3, r2
 8009932:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8009934:	683b      	ldr	r3, [r7, #0]
 8009936:	699b      	ldr	r3, [r3, #24]
 8009938:	009b      	lsls	r3, r3, #2
 800993a:	693a      	ldr	r2, [r7, #16]
 800993c:	4313      	orrs	r3, r2
 800993e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	693a      	ldr	r2, [r7, #16]
 8009944:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	68fa      	ldr	r2, [r7, #12]
 800994a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800994c:	683b      	ldr	r3, [r7, #0]
 800994e:	685a      	ldr	r2, [r3, #4]
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	697a      	ldr	r2, [r7, #20]
 8009958:	621a      	str	r2, [r3, #32]
}
 800995a:	bf00      	nop
 800995c:	371c      	adds	r7, #28
 800995e:	46bd      	mov	sp, r7
 8009960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009964:	4770      	bx	lr
 8009966:	bf00      	nop
 8009968:	40010000 	.word	0x40010000

0800996c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800996c:	b480      	push	{r7}
 800996e:	b087      	sub	sp, #28
 8009970:	af00      	add	r7, sp, #0
 8009972:	6078      	str	r0, [r7, #4]
 8009974:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	6a1b      	ldr	r3, [r3, #32]
 800997a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	6a1b      	ldr	r3, [r3, #32]
 8009980:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	685b      	ldr	r3, [r3, #4]
 800998c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	69db      	ldr	r3, [r3, #28]
 8009992:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8009994:	68fb      	ldr	r3, [r7, #12]
 8009996:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800999a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800999c:	68fb      	ldr	r3, [r7, #12]
 800999e:	f023 0303 	bic.w	r3, r3, #3
 80099a2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80099a4:	683b      	ldr	r3, [r7, #0]
 80099a6:	681b      	ldr	r3, [r3, #0]
 80099a8:	68fa      	ldr	r2, [r7, #12]
 80099aa:	4313      	orrs	r3, r2
 80099ac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80099ae:	697b      	ldr	r3, [r7, #20]
 80099b0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80099b4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80099b6:	683b      	ldr	r3, [r7, #0]
 80099b8:	689b      	ldr	r3, [r3, #8]
 80099ba:	021b      	lsls	r3, r3, #8
 80099bc:	697a      	ldr	r2, [r7, #20]
 80099be:	4313      	orrs	r3, r2
 80099c0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	4a1d      	ldr	r2, [pc, #116]	@ (8009a3c <TIM_OC3_SetConfig+0xd0>)
 80099c6:	4293      	cmp	r3, r2
 80099c8:	d10d      	bne.n	80099e6 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80099ca:	697b      	ldr	r3, [r7, #20]
 80099cc:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80099d0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80099d2:	683b      	ldr	r3, [r7, #0]
 80099d4:	68db      	ldr	r3, [r3, #12]
 80099d6:	021b      	lsls	r3, r3, #8
 80099d8:	697a      	ldr	r2, [r7, #20]
 80099da:	4313      	orrs	r3, r2
 80099dc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80099de:	697b      	ldr	r3, [r7, #20]
 80099e0:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80099e4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	4a14      	ldr	r2, [pc, #80]	@ (8009a3c <TIM_OC3_SetConfig+0xd0>)
 80099ea:	4293      	cmp	r3, r2
 80099ec:	d113      	bne.n	8009a16 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80099ee:	693b      	ldr	r3, [r7, #16]
 80099f0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80099f4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80099f6:	693b      	ldr	r3, [r7, #16]
 80099f8:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80099fc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80099fe:	683b      	ldr	r3, [r7, #0]
 8009a00:	695b      	ldr	r3, [r3, #20]
 8009a02:	011b      	lsls	r3, r3, #4
 8009a04:	693a      	ldr	r2, [r7, #16]
 8009a06:	4313      	orrs	r3, r2
 8009a08:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8009a0a:	683b      	ldr	r3, [r7, #0]
 8009a0c:	699b      	ldr	r3, [r3, #24]
 8009a0e:	011b      	lsls	r3, r3, #4
 8009a10:	693a      	ldr	r2, [r7, #16]
 8009a12:	4313      	orrs	r3, r2
 8009a14:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	693a      	ldr	r2, [r7, #16]
 8009a1a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	68fa      	ldr	r2, [r7, #12]
 8009a20:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8009a22:	683b      	ldr	r3, [r7, #0]
 8009a24:	685a      	ldr	r2, [r3, #4]
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	697a      	ldr	r2, [r7, #20]
 8009a2e:	621a      	str	r2, [r3, #32]
}
 8009a30:	bf00      	nop
 8009a32:	371c      	adds	r7, #28
 8009a34:	46bd      	mov	sp, r7
 8009a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a3a:	4770      	bx	lr
 8009a3c:	40010000 	.word	0x40010000

08009a40 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009a40:	b480      	push	{r7}
 8009a42:	b087      	sub	sp, #28
 8009a44:	af00      	add	r7, sp, #0
 8009a46:	6078      	str	r0, [r7, #4]
 8009a48:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	6a1b      	ldr	r3, [r3, #32]
 8009a4e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	6a1b      	ldr	r3, [r3, #32]
 8009a54:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	685b      	ldr	r3, [r3, #4]
 8009a60:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	69db      	ldr	r3, [r3, #28]
 8009a66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8009a68:	68fb      	ldr	r3, [r7, #12]
 8009a6a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009a6e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8009a70:	68fb      	ldr	r3, [r7, #12]
 8009a72:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009a76:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009a78:	683b      	ldr	r3, [r7, #0]
 8009a7a:	681b      	ldr	r3, [r3, #0]
 8009a7c:	021b      	lsls	r3, r3, #8
 8009a7e:	68fa      	ldr	r2, [r7, #12]
 8009a80:	4313      	orrs	r3, r2
 8009a82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8009a84:	693b      	ldr	r3, [r7, #16]
 8009a86:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8009a8a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8009a8c:	683b      	ldr	r3, [r7, #0]
 8009a8e:	689b      	ldr	r3, [r3, #8]
 8009a90:	031b      	lsls	r3, r3, #12
 8009a92:	693a      	ldr	r2, [r7, #16]
 8009a94:	4313      	orrs	r3, r2
 8009a96:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	4a10      	ldr	r2, [pc, #64]	@ (8009adc <TIM_OC4_SetConfig+0x9c>)
 8009a9c:	4293      	cmp	r3, r2
 8009a9e:	d109      	bne.n	8009ab4 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8009aa0:	697b      	ldr	r3, [r7, #20]
 8009aa2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8009aa6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8009aa8:	683b      	ldr	r3, [r7, #0]
 8009aaa:	695b      	ldr	r3, [r3, #20]
 8009aac:	019b      	lsls	r3, r3, #6
 8009aae:	697a      	ldr	r2, [r7, #20]
 8009ab0:	4313      	orrs	r3, r2
 8009ab2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	697a      	ldr	r2, [r7, #20]
 8009ab8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	68fa      	ldr	r2, [r7, #12]
 8009abe:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8009ac0:	683b      	ldr	r3, [r7, #0]
 8009ac2:	685a      	ldr	r2, [r3, #4]
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	693a      	ldr	r2, [r7, #16]
 8009acc:	621a      	str	r2, [r3, #32]
}
 8009ace:	bf00      	nop
 8009ad0:	371c      	adds	r7, #28
 8009ad2:	46bd      	mov	sp, r7
 8009ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ad8:	4770      	bx	lr
 8009ada:	bf00      	nop
 8009adc:	40010000 	.word	0x40010000

08009ae0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009ae0:	b480      	push	{r7}
 8009ae2:	b087      	sub	sp, #28
 8009ae4:	af00      	add	r7, sp, #0
 8009ae6:	60f8      	str	r0, [r7, #12]
 8009ae8:	60b9      	str	r1, [r7, #8]
 8009aea:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009aec:	68fb      	ldr	r3, [r7, #12]
 8009aee:	6a1b      	ldr	r3, [r3, #32]
 8009af0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009af2:	68fb      	ldr	r3, [r7, #12]
 8009af4:	6a1b      	ldr	r3, [r3, #32]
 8009af6:	f023 0201 	bic.w	r2, r3, #1
 8009afa:	68fb      	ldr	r3, [r7, #12]
 8009afc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009afe:	68fb      	ldr	r3, [r7, #12]
 8009b00:	699b      	ldr	r3, [r3, #24]
 8009b02:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009b04:	693b      	ldr	r3, [r7, #16]
 8009b06:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8009b0a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	011b      	lsls	r3, r3, #4
 8009b10:	693a      	ldr	r2, [r7, #16]
 8009b12:	4313      	orrs	r3, r2
 8009b14:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009b16:	697b      	ldr	r3, [r7, #20]
 8009b18:	f023 030a 	bic.w	r3, r3, #10
 8009b1c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8009b1e:	697a      	ldr	r2, [r7, #20]
 8009b20:	68bb      	ldr	r3, [r7, #8]
 8009b22:	4313      	orrs	r3, r2
 8009b24:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009b26:	68fb      	ldr	r3, [r7, #12]
 8009b28:	693a      	ldr	r2, [r7, #16]
 8009b2a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009b2c:	68fb      	ldr	r3, [r7, #12]
 8009b2e:	697a      	ldr	r2, [r7, #20]
 8009b30:	621a      	str	r2, [r3, #32]
}
 8009b32:	bf00      	nop
 8009b34:	371c      	adds	r7, #28
 8009b36:	46bd      	mov	sp, r7
 8009b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b3c:	4770      	bx	lr

08009b3e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009b3e:	b480      	push	{r7}
 8009b40:	b087      	sub	sp, #28
 8009b42:	af00      	add	r7, sp, #0
 8009b44:	60f8      	str	r0, [r7, #12]
 8009b46:	60b9      	str	r1, [r7, #8]
 8009b48:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8009b4a:	68fb      	ldr	r3, [r7, #12]
 8009b4c:	6a1b      	ldr	r3, [r3, #32]
 8009b4e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009b50:	68fb      	ldr	r3, [r7, #12]
 8009b52:	6a1b      	ldr	r3, [r3, #32]
 8009b54:	f023 0210 	bic.w	r2, r3, #16
 8009b58:	68fb      	ldr	r3, [r7, #12]
 8009b5a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009b5c:	68fb      	ldr	r3, [r7, #12]
 8009b5e:	699b      	ldr	r3, [r3, #24]
 8009b60:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009b62:	693b      	ldr	r3, [r7, #16]
 8009b64:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8009b68:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	031b      	lsls	r3, r3, #12
 8009b6e:	693a      	ldr	r2, [r7, #16]
 8009b70:	4313      	orrs	r3, r2
 8009b72:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009b74:	697b      	ldr	r3, [r7, #20]
 8009b76:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8009b7a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009b7c:	68bb      	ldr	r3, [r7, #8]
 8009b7e:	011b      	lsls	r3, r3, #4
 8009b80:	697a      	ldr	r2, [r7, #20]
 8009b82:	4313      	orrs	r3, r2
 8009b84:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009b86:	68fb      	ldr	r3, [r7, #12]
 8009b88:	693a      	ldr	r2, [r7, #16]
 8009b8a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009b8c:	68fb      	ldr	r3, [r7, #12]
 8009b8e:	697a      	ldr	r2, [r7, #20]
 8009b90:	621a      	str	r2, [r3, #32]
}
 8009b92:	bf00      	nop
 8009b94:	371c      	adds	r7, #28
 8009b96:	46bd      	mov	sp, r7
 8009b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b9c:	4770      	bx	lr

08009b9e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8009b9e:	b480      	push	{r7}
 8009ba0:	b085      	sub	sp, #20
 8009ba2:	af00      	add	r7, sp, #0
 8009ba4:	6078      	str	r0, [r7, #4]
 8009ba6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	689b      	ldr	r3, [r3, #8]
 8009bac:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009bae:	68fb      	ldr	r3, [r7, #12]
 8009bb0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009bb4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009bb6:	683a      	ldr	r2, [r7, #0]
 8009bb8:	68fb      	ldr	r3, [r7, #12]
 8009bba:	4313      	orrs	r3, r2
 8009bbc:	f043 0307 	orr.w	r3, r3, #7
 8009bc0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	68fa      	ldr	r2, [r7, #12]
 8009bc6:	609a      	str	r2, [r3, #8]
}
 8009bc8:	bf00      	nop
 8009bca:	3714      	adds	r7, #20
 8009bcc:	46bd      	mov	sp, r7
 8009bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bd2:	4770      	bx	lr

08009bd4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009bd4:	b480      	push	{r7}
 8009bd6:	b087      	sub	sp, #28
 8009bd8:	af00      	add	r7, sp, #0
 8009bda:	60f8      	str	r0, [r7, #12]
 8009bdc:	60b9      	str	r1, [r7, #8]
 8009bde:	607a      	str	r2, [r7, #4]
 8009be0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8009be2:	68fb      	ldr	r3, [r7, #12]
 8009be4:	689b      	ldr	r3, [r3, #8]
 8009be6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009be8:	697b      	ldr	r3, [r7, #20]
 8009bea:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8009bee:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009bf0:	683b      	ldr	r3, [r7, #0]
 8009bf2:	021a      	lsls	r2, r3, #8
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	431a      	orrs	r2, r3
 8009bf8:	68bb      	ldr	r3, [r7, #8]
 8009bfa:	4313      	orrs	r3, r2
 8009bfc:	697a      	ldr	r2, [r7, #20]
 8009bfe:	4313      	orrs	r3, r2
 8009c00:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009c02:	68fb      	ldr	r3, [r7, #12]
 8009c04:	697a      	ldr	r2, [r7, #20]
 8009c06:	609a      	str	r2, [r3, #8]
}
 8009c08:	bf00      	nop
 8009c0a:	371c      	adds	r7, #28
 8009c0c:	46bd      	mov	sp, r7
 8009c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c12:	4770      	bx	lr

08009c14 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8009c14:	b480      	push	{r7}
 8009c16:	b087      	sub	sp, #28
 8009c18:	af00      	add	r7, sp, #0
 8009c1a:	60f8      	str	r0, [r7, #12]
 8009c1c:	60b9      	str	r1, [r7, #8]
 8009c1e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8009c20:	68bb      	ldr	r3, [r7, #8]
 8009c22:	f003 031f 	and.w	r3, r3, #31
 8009c26:	2201      	movs	r2, #1
 8009c28:	fa02 f303 	lsl.w	r3, r2, r3
 8009c2c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8009c2e:	68fb      	ldr	r3, [r7, #12]
 8009c30:	6a1a      	ldr	r2, [r3, #32]
 8009c32:	697b      	ldr	r3, [r7, #20]
 8009c34:	43db      	mvns	r3, r3
 8009c36:	401a      	ands	r2, r3
 8009c38:	68fb      	ldr	r3, [r7, #12]
 8009c3a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8009c3c:	68fb      	ldr	r3, [r7, #12]
 8009c3e:	6a1a      	ldr	r2, [r3, #32]
 8009c40:	68bb      	ldr	r3, [r7, #8]
 8009c42:	f003 031f 	and.w	r3, r3, #31
 8009c46:	6879      	ldr	r1, [r7, #4]
 8009c48:	fa01 f303 	lsl.w	r3, r1, r3
 8009c4c:	431a      	orrs	r2, r3
 8009c4e:	68fb      	ldr	r3, [r7, #12]
 8009c50:	621a      	str	r2, [r3, #32]
}
 8009c52:	bf00      	nop
 8009c54:	371c      	adds	r7, #28
 8009c56:	46bd      	mov	sp, r7
 8009c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c5c:	4770      	bx	lr
	...

08009c60 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009c60:	b480      	push	{r7}
 8009c62:	b085      	sub	sp, #20
 8009c64:	af00      	add	r7, sp, #0
 8009c66:	6078      	str	r0, [r7, #4]
 8009c68:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009c70:	2b01      	cmp	r3, #1
 8009c72:	d101      	bne.n	8009c78 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009c74:	2302      	movs	r3, #2
 8009c76:	e050      	b.n	8009d1a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	2201      	movs	r2, #1
 8009c7c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	2202      	movs	r2, #2
 8009c84:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	681b      	ldr	r3, [r3, #0]
 8009c8c:	685b      	ldr	r3, [r3, #4]
 8009c8e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	681b      	ldr	r3, [r3, #0]
 8009c94:	689b      	ldr	r3, [r3, #8]
 8009c96:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009c98:	68fb      	ldr	r3, [r7, #12]
 8009c9a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009c9e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009ca0:	683b      	ldr	r3, [r7, #0]
 8009ca2:	681b      	ldr	r3, [r3, #0]
 8009ca4:	68fa      	ldr	r2, [r7, #12]
 8009ca6:	4313      	orrs	r3, r2
 8009ca8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	681b      	ldr	r3, [r3, #0]
 8009cae:	68fa      	ldr	r2, [r7, #12]
 8009cb0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	681b      	ldr	r3, [r3, #0]
 8009cb6:	4a1c      	ldr	r2, [pc, #112]	@ (8009d28 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8009cb8:	4293      	cmp	r3, r2
 8009cba:	d018      	beq.n	8009cee <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	681b      	ldr	r3, [r3, #0]
 8009cc0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009cc4:	d013      	beq.n	8009cee <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	681b      	ldr	r3, [r3, #0]
 8009cca:	4a18      	ldr	r2, [pc, #96]	@ (8009d2c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8009ccc:	4293      	cmp	r3, r2
 8009cce:	d00e      	beq.n	8009cee <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	681b      	ldr	r3, [r3, #0]
 8009cd4:	4a16      	ldr	r2, [pc, #88]	@ (8009d30 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8009cd6:	4293      	cmp	r3, r2
 8009cd8:	d009      	beq.n	8009cee <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	681b      	ldr	r3, [r3, #0]
 8009cde:	4a15      	ldr	r2, [pc, #84]	@ (8009d34 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8009ce0:	4293      	cmp	r3, r2
 8009ce2:	d004      	beq.n	8009cee <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	681b      	ldr	r3, [r3, #0]
 8009ce8:	4a13      	ldr	r2, [pc, #76]	@ (8009d38 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8009cea:	4293      	cmp	r3, r2
 8009cec:	d10c      	bne.n	8009d08 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009cee:	68bb      	ldr	r3, [r7, #8]
 8009cf0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009cf4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009cf6:	683b      	ldr	r3, [r7, #0]
 8009cf8:	685b      	ldr	r3, [r3, #4]
 8009cfa:	68ba      	ldr	r2, [r7, #8]
 8009cfc:	4313      	orrs	r3, r2
 8009cfe:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	681b      	ldr	r3, [r3, #0]
 8009d04:	68ba      	ldr	r2, [r7, #8]
 8009d06:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	2201      	movs	r2, #1
 8009d0c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	2200      	movs	r2, #0
 8009d14:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8009d18:	2300      	movs	r3, #0
}
 8009d1a:	4618      	mov	r0, r3
 8009d1c:	3714      	adds	r7, #20
 8009d1e:	46bd      	mov	sp, r7
 8009d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d24:	4770      	bx	lr
 8009d26:	bf00      	nop
 8009d28:	40010000 	.word	0x40010000
 8009d2c:	40000400 	.word	0x40000400
 8009d30:	40000800 	.word	0x40000800
 8009d34:	40000c00 	.word	0x40000c00
 8009d38:	40014000 	.word	0x40014000

08009d3c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8009d3c:	b480      	push	{r7}
 8009d3e:	b085      	sub	sp, #20
 8009d40:	af00      	add	r7, sp, #0
 8009d42:	6078      	str	r0, [r7, #4]
 8009d44:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8009d46:	2300      	movs	r3, #0
 8009d48:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009d50:	2b01      	cmp	r3, #1
 8009d52:	d101      	bne.n	8009d58 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8009d54:	2302      	movs	r3, #2
 8009d56:	e03d      	b.n	8009dd4 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	2201      	movs	r2, #1
 8009d5c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8009d60:	68fb      	ldr	r3, [r7, #12]
 8009d62:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8009d66:	683b      	ldr	r3, [r7, #0]
 8009d68:	68db      	ldr	r3, [r3, #12]
 8009d6a:	4313      	orrs	r3, r2
 8009d6c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8009d6e:	68fb      	ldr	r3, [r7, #12]
 8009d70:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8009d74:	683b      	ldr	r3, [r7, #0]
 8009d76:	689b      	ldr	r3, [r3, #8]
 8009d78:	4313      	orrs	r3, r2
 8009d7a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8009d7c:	68fb      	ldr	r3, [r7, #12]
 8009d7e:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8009d82:	683b      	ldr	r3, [r7, #0]
 8009d84:	685b      	ldr	r3, [r3, #4]
 8009d86:	4313      	orrs	r3, r2
 8009d88:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8009d8a:	68fb      	ldr	r3, [r7, #12]
 8009d8c:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8009d90:	683b      	ldr	r3, [r7, #0]
 8009d92:	681b      	ldr	r3, [r3, #0]
 8009d94:	4313      	orrs	r3, r2
 8009d96:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8009d98:	68fb      	ldr	r3, [r7, #12]
 8009d9a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8009d9e:	683b      	ldr	r3, [r7, #0]
 8009da0:	691b      	ldr	r3, [r3, #16]
 8009da2:	4313      	orrs	r3, r2
 8009da4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8009da6:	68fb      	ldr	r3, [r7, #12]
 8009da8:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8009dac:	683b      	ldr	r3, [r7, #0]
 8009dae:	695b      	ldr	r3, [r3, #20]
 8009db0:	4313      	orrs	r3, r2
 8009db2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8009db4:	68fb      	ldr	r3, [r7, #12]
 8009db6:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8009dba:	683b      	ldr	r3, [r7, #0]
 8009dbc:	69db      	ldr	r3, [r3, #28]
 8009dbe:	4313      	orrs	r3, r2
 8009dc0:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	681b      	ldr	r3, [r3, #0]
 8009dc6:	68fa      	ldr	r2, [r7, #12]
 8009dc8:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	2200      	movs	r2, #0
 8009dce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8009dd2:	2300      	movs	r3, #0
}
 8009dd4:	4618      	mov	r0, r3
 8009dd6:	3714      	adds	r7, #20
 8009dd8:	46bd      	mov	sp, r7
 8009dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dde:	4770      	bx	lr

08009de0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009de0:	b480      	push	{r7}
 8009de2:	b083      	sub	sp, #12
 8009de4:	af00      	add	r7, sp, #0
 8009de6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009de8:	bf00      	nop
 8009dea:	370c      	adds	r7, #12
 8009dec:	46bd      	mov	sp, r7
 8009dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009df2:	4770      	bx	lr

08009df4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009df4:	b480      	push	{r7}
 8009df6:	b083      	sub	sp, #12
 8009df8:	af00      	add	r7, sp, #0
 8009dfa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009dfc:	bf00      	nop
 8009dfe:	370c      	adds	r7, #12
 8009e00:	46bd      	mov	sp, r7
 8009e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e06:	4770      	bx	lr

08009e08 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009e08:	b580      	push	{r7, lr}
 8009e0a:	b082      	sub	sp, #8
 8009e0c:	af00      	add	r7, sp, #0
 8009e0e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	2b00      	cmp	r3, #0
 8009e14:	d101      	bne.n	8009e1a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009e16:	2301      	movs	r3, #1
 8009e18:	e042      	b.n	8009ea0 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009e20:	b2db      	uxtb	r3, r3
 8009e22:	2b00      	cmp	r3, #0
 8009e24:	d106      	bne.n	8009e34 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	2200      	movs	r2, #0
 8009e2a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009e2e:	6878      	ldr	r0, [r7, #4]
 8009e30:	f7fb fa74 	bl	800531c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	2224      	movs	r2, #36	@ 0x24
 8009e38:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	681b      	ldr	r3, [r3, #0]
 8009e40:	68da      	ldr	r2, [r3, #12]
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	681b      	ldr	r3, [r3, #0]
 8009e46:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8009e4a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8009e4c:	6878      	ldr	r0, [r7, #4]
 8009e4e:	f000 fdd3 	bl	800a9f8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	681b      	ldr	r3, [r3, #0]
 8009e56:	691a      	ldr	r2, [r3, #16]
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	681b      	ldr	r3, [r3, #0]
 8009e5c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8009e60:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	681b      	ldr	r3, [r3, #0]
 8009e66:	695a      	ldr	r2, [r3, #20]
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	681b      	ldr	r3, [r3, #0]
 8009e6c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8009e70:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	681b      	ldr	r3, [r3, #0]
 8009e76:	68da      	ldr	r2, [r3, #12]
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	681b      	ldr	r3, [r3, #0]
 8009e7c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8009e80:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	2200      	movs	r2, #0
 8009e86:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	2220      	movs	r2, #32
 8009e8c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	2220      	movs	r2, #32
 8009e94:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	2200      	movs	r2, #0
 8009e9c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8009e9e:	2300      	movs	r3, #0
}
 8009ea0:	4618      	mov	r0, r3
 8009ea2:	3708      	adds	r7, #8
 8009ea4:	46bd      	mov	sp, r7
 8009ea6:	bd80      	pop	{r7, pc}

08009ea8 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009ea8:	b580      	push	{r7, lr}
 8009eaa:	b08a      	sub	sp, #40	@ 0x28
 8009eac:	af02      	add	r7, sp, #8
 8009eae:	60f8      	str	r0, [r7, #12]
 8009eb0:	60b9      	str	r1, [r7, #8]
 8009eb2:	603b      	str	r3, [r7, #0]
 8009eb4:	4613      	mov	r3, r2
 8009eb6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8009eb8:	2300      	movs	r3, #0
 8009eba:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009ebc:	68fb      	ldr	r3, [r7, #12]
 8009ebe:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009ec2:	b2db      	uxtb	r3, r3
 8009ec4:	2b20      	cmp	r3, #32
 8009ec6:	d175      	bne.n	8009fb4 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8009ec8:	68bb      	ldr	r3, [r7, #8]
 8009eca:	2b00      	cmp	r3, #0
 8009ecc:	d002      	beq.n	8009ed4 <HAL_UART_Transmit+0x2c>
 8009ece:	88fb      	ldrh	r3, [r7, #6]
 8009ed0:	2b00      	cmp	r3, #0
 8009ed2:	d101      	bne.n	8009ed8 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8009ed4:	2301      	movs	r3, #1
 8009ed6:	e06e      	b.n	8009fb6 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009ed8:	68fb      	ldr	r3, [r7, #12]
 8009eda:	2200      	movs	r2, #0
 8009edc:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009ede:	68fb      	ldr	r3, [r7, #12]
 8009ee0:	2221      	movs	r2, #33	@ 0x21
 8009ee2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8009ee6:	f7fb fb2f 	bl	8005548 <HAL_GetTick>
 8009eea:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8009eec:	68fb      	ldr	r3, [r7, #12]
 8009eee:	88fa      	ldrh	r2, [r7, #6]
 8009ef0:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8009ef2:	68fb      	ldr	r3, [r7, #12]
 8009ef4:	88fa      	ldrh	r2, [r7, #6]
 8009ef6:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009ef8:	68fb      	ldr	r3, [r7, #12]
 8009efa:	689b      	ldr	r3, [r3, #8]
 8009efc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009f00:	d108      	bne.n	8009f14 <HAL_UART_Transmit+0x6c>
 8009f02:	68fb      	ldr	r3, [r7, #12]
 8009f04:	691b      	ldr	r3, [r3, #16]
 8009f06:	2b00      	cmp	r3, #0
 8009f08:	d104      	bne.n	8009f14 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8009f0a:	2300      	movs	r3, #0
 8009f0c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8009f0e:	68bb      	ldr	r3, [r7, #8]
 8009f10:	61bb      	str	r3, [r7, #24]
 8009f12:	e003      	b.n	8009f1c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8009f14:	68bb      	ldr	r3, [r7, #8]
 8009f16:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009f18:	2300      	movs	r3, #0
 8009f1a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8009f1c:	e02e      	b.n	8009f7c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8009f1e:	683b      	ldr	r3, [r7, #0]
 8009f20:	9300      	str	r3, [sp, #0]
 8009f22:	697b      	ldr	r3, [r7, #20]
 8009f24:	2200      	movs	r2, #0
 8009f26:	2180      	movs	r1, #128	@ 0x80
 8009f28:	68f8      	ldr	r0, [r7, #12]
 8009f2a:	f000 fb37 	bl	800a59c <UART_WaitOnFlagUntilTimeout>
 8009f2e:	4603      	mov	r3, r0
 8009f30:	2b00      	cmp	r3, #0
 8009f32:	d005      	beq.n	8009f40 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8009f34:	68fb      	ldr	r3, [r7, #12]
 8009f36:	2220      	movs	r2, #32
 8009f38:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8009f3c:	2303      	movs	r3, #3
 8009f3e:	e03a      	b.n	8009fb6 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8009f40:	69fb      	ldr	r3, [r7, #28]
 8009f42:	2b00      	cmp	r3, #0
 8009f44:	d10b      	bne.n	8009f5e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8009f46:	69bb      	ldr	r3, [r7, #24]
 8009f48:	881b      	ldrh	r3, [r3, #0]
 8009f4a:	461a      	mov	r2, r3
 8009f4c:	68fb      	ldr	r3, [r7, #12]
 8009f4e:	681b      	ldr	r3, [r3, #0]
 8009f50:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009f54:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8009f56:	69bb      	ldr	r3, [r7, #24]
 8009f58:	3302      	adds	r3, #2
 8009f5a:	61bb      	str	r3, [r7, #24]
 8009f5c:	e007      	b.n	8009f6e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8009f5e:	69fb      	ldr	r3, [r7, #28]
 8009f60:	781a      	ldrb	r2, [r3, #0]
 8009f62:	68fb      	ldr	r3, [r7, #12]
 8009f64:	681b      	ldr	r3, [r3, #0]
 8009f66:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8009f68:	69fb      	ldr	r3, [r7, #28]
 8009f6a:	3301      	adds	r3, #1
 8009f6c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8009f6e:	68fb      	ldr	r3, [r7, #12]
 8009f70:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8009f72:	b29b      	uxth	r3, r3
 8009f74:	3b01      	subs	r3, #1
 8009f76:	b29a      	uxth	r2, r3
 8009f78:	68fb      	ldr	r3, [r7, #12]
 8009f7a:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8009f7c:	68fb      	ldr	r3, [r7, #12]
 8009f7e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8009f80:	b29b      	uxth	r3, r3
 8009f82:	2b00      	cmp	r3, #0
 8009f84:	d1cb      	bne.n	8009f1e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8009f86:	683b      	ldr	r3, [r7, #0]
 8009f88:	9300      	str	r3, [sp, #0]
 8009f8a:	697b      	ldr	r3, [r7, #20]
 8009f8c:	2200      	movs	r2, #0
 8009f8e:	2140      	movs	r1, #64	@ 0x40
 8009f90:	68f8      	ldr	r0, [r7, #12]
 8009f92:	f000 fb03 	bl	800a59c <UART_WaitOnFlagUntilTimeout>
 8009f96:	4603      	mov	r3, r0
 8009f98:	2b00      	cmp	r3, #0
 8009f9a:	d005      	beq.n	8009fa8 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8009f9c:	68fb      	ldr	r3, [r7, #12]
 8009f9e:	2220      	movs	r2, #32
 8009fa0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8009fa4:	2303      	movs	r3, #3
 8009fa6:	e006      	b.n	8009fb6 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8009fa8:	68fb      	ldr	r3, [r7, #12]
 8009faa:	2220      	movs	r2, #32
 8009fac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8009fb0:	2300      	movs	r3, #0
 8009fb2:	e000      	b.n	8009fb6 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8009fb4:	2302      	movs	r3, #2
  }
}
 8009fb6:	4618      	mov	r0, r3
 8009fb8:	3720      	adds	r7, #32
 8009fba:	46bd      	mov	sp, r7
 8009fbc:	bd80      	pop	{r7, pc}

08009fbe <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009fbe:	b580      	push	{r7, lr}
 8009fc0:	b084      	sub	sp, #16
 8009fc2:	af00      	add	r7, sp, #0
 8009fc4:	60f8      	str	r0, [r7, #12]
 8009fc6:	60b9      	str	r1, [r7, #8]
 8009fc8:	4613      	mov	r3, r2
 8009fca:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8009fcc:	68fb      	ldr	r3, [r7, #12]
 8009fce:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8009fd2:	b2db      	uxtb	r3, r3
 8009fd4:	2b20      	cmp	r3, #32
 8009fd6:	d112      	bne.n	8009ffe <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8009fd8:	68bb      	ldr	r3, [r7, #8]
 8009fda:	2b00      	cmp	r3, #0
 8009fdc:	d002      	beq.n	8009fe4 <HAL_UART_Receive_IT+0x26>
 8009fde:	88fb      	ldrh	r3, [r7, #6]
 8009fe0:	2b00      	cmp	r3, #0
 8009fe2:	d101      	bne.n	8009fe8 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8009fe4:	2301      	movs	r3, #1
 8009fe6:	e00b      	b.n	800a000 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009fe8:	68fb      	ldr	r3, [r7, #12]
 8009fea:	2200      	movs	r2, #0
 8009fec:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8009fee:	88fb      	ldrh	r3, [r7, #6]
 8009ff0:	461a      	mov	r2, r3
 8009ff2:	68b9      	ldr	r1, [r7, #8]
 8009ff4:	68f8      	ldr	r0, [r7, #12]
 8009ff6:	f000 fb2a 	bl	800a64e <UART_Start_Receive_IT>
 8009ffa:	4603      	mov	r3, r0
 8009ffc:	e000      	b.n	800a000 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8009ffe:	2302      	movs	r3, #2
  }
}
 800a000:	4618      	mov	r0, r3
 800a002:	3710      	adds	r7, #16
 800a004:	46bd      	mov	sp, r7
 800a006:	bd80      	pop	{r7, pc}

0800a008 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800a008:	b580      	push	{r7, lr}
 800a00a:	b0ba      	sub	sp, #232	@ 0xe8
 800a00c:	af00      	add	r7, sp, #0
 800a00e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	681b      	ldr	r3, [r3, #0]
 800a014:	681b      	ldr	r3, [r3, #0]
 800a016:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	681b      	ldr	r3, [r3, #0]
 800a01e:	68db      	ldr	r3, [r3, #12]
 800a020:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	681b      	ldr	r3, [r3, #0]
 800a028:	695b      	ldr	r3, [r3, #20]
 800a02a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800a02e:	2300      	movs	r3, #0
 800a030:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 800a034:	2300      	movs	r3, #0
 800a036:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800a03a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a03e:	f003 030f 	and.w	r3, r3, #15
 800a042:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800a046:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800a04a:	2b00      	cmp	r3, #0
 800a04c:	d10f      	bne.n	800a06e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800a04e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a052:	f003 0320 	and.w	r3, r3, #32
 800a056:	2b00      	cmp	r3, #0
 800a058:	d009      	beq.n	800a06e <HAL_UART_IRQHandler+0x66>
 800a05a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a05e:	f003 0320 	and.w	r3, r3, #32
 800a062:	2b00      	cmp	r3, #0
 800a064:	d003      	beq.n	800a06e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800a066:	6878      	ldr	r0, [r7, #4]
 800a068:	f000 fc07 	bl	800a87a <UART_Receive_IT>
      return;
 800a06c:	e273      	b.n	800a556 <HAL_UART_IRQHandler+0x54e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800a06e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800a072:	2b00      	cmp	r3, #0
 800a074:	f000 80de 	beq.w	800a234 <HAL_UART_IRQHandler+0x22c>
 800a078:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a07c:	f003 0301 	and.w	r3, r3, #1
 800a080:	2b00      	cmp	r3, #0
 800a082:	d106      	bne.n	800a092 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800a084:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a088:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 800a08c:	2b00      	cmp	r3, #0
 800a08e:	f000 80d1 	beq.w	800a234 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800a092:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a096:	f003 0301 	and.w	r3, r3, #1
 800a09a:	2b00      	cmp	r3, #0
 800a09c:	d00b      	beq.n	800a0b6 <HAL_UART_IRQHandler+0xae>
 800a09e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a0a2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a0a6:	2b00      	cmp	r3, #0
 800a0a8:	d005      	beq.n	800a0b6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a0ae:	f043 0201 	orr.w	r2, r3, #1
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800a0b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a0ba:	f003 0304 	and.w	r3, r3, #4
 800a0be:	2b00      	cmp	r3, #0
 800a0c0:	d00b      	beq.n	800a0da <HAL_UART_IRQHandler+0xd2>
 800a0c2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a0c6:	f003 0301 	and.w	r3, r3, #1
 800a0ca:	2b00      	cmp	r3, #0
 800a0cc:	d005      	beq.n	800a0da <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a0d2:	f043 0202 	orr.w	r2, r3, #2
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800a0da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a0de:	f003 0302 	and.w	r3, r3, #2
 800a0e2:	2b00      	cmp	r3, #0
 800a0e4:	d00b      	beq.n	800a0fe <HAL_UART_IRQHandler+0xf6>
 800a0e6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a0ea:	f003 0301 	and.w	r3, r3, #1
 800a0ee:	2b00      	cmp	r3, #0
 800a0f0:	d005      	beq.n	800a0fe <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a0f6:	f043 0204 	orr.w	r2, r3, #4
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800a0fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a102:	f003 0308 	and.w	r3, r3, #8
 800a106:	2b00      	cmp	r3, #0
 800a108:	d011      	beq.n	800a12e <HAL_UART_IRQHandler+0x126>
 800a10a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a10e:	f003 0320 	and.w	r3, r3, #32
 800a112:	2b00      	cmp	r3, #0
 800a114:	d105      	bne.n	800a122 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800a116:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a11a:	f003 0301 	and.w	r3, r3, #1
 800a11e:	2b00      	cmp	r3, #0
 800a120:	d005      	beq.n	800a12e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a126:	f043 0208 	orr.w	r2, r3, #8
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a132:	2b00      	cmp	r3, #0
 800a134:	f000 820a 	beq.w	800a54c <HAL_UART_IRQHandler+0x544>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800a138:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a13c:	f003 0320 	and.w	r3, r3, #32
 800a140:	2b00      	cmp	r3, #0
 800a142:	d008      	beq.n	800a156 <HAL_UART_IRQHandler+0x14e>
 800a144:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a148:	f003 0320 	and.w	r3, r3, #32
 800a14c:	2b00      	cmp	r3, #0
 800a14e:	d002      	beq.n	800a156 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800a150:	6878      	ldr	r0, [r7, #4]
 800a152:	f000 fb92 	bl	800a87a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	681b      	ldr	r3, [r3, #0]
 800a15a:	695b      	ldr	r3, [r3, #20]
 800a15c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a160:	2b40      	cmp	r3, #64	@ 0x40
 800a162:	bf0c      	ite	eq
 800a164:	2301      	moveq	r3, #1
 800a166:	2300      	movne	r3, #0
 800a168:	b2db      	uxtb	r3, r3
 800a16a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a172:	f003 0308 	and.w	r3, r3, #8
 800a176:	2b00      	cmp	r3, #0
 800a178:	d103      	bne.n	800a182 <HAL_UART_IRQHandler+0x17a>
 800a17a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800a17e:	2b00      	cmp	r3, #0
 800a180:	d04f      	beq.n	800a222 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800a182:	6878      	ldr	r0, [r7, #4]
 800a184:	f000 fa9d 	bl	800a6c2 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	681b      	ldr	r3, [r3, #0]
 800a18c:	695b      	ldr	r3, [r3, #20]
 800a18e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a192:	2b40      	cmp	r3, #64	@ 0x40
 800a194:	d141      	bne.n	800a21a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	681b      	ldr	r3, [r3, #0]
 800a19a:	3314      	adds	r3, #20
 800a19c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a1a0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800a1a4:	e853 3f00 	ldrex	r3, [r3]
 800a1a8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800a1ac:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800a1b0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a1b4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	681b      	ldr	r3, [r3, #0]
 800a1bc:	3314      	adds	r3, #20
 800a1be:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800a1c2:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800a1c6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a1ca:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800a1ce:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800a1d2:	e841 2300 	strex	r3, r2, [r1]
 800a1d6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800a1da:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800a1de:	2b00      	cmp	r3, #0
 800a1e0:	d1d9      	bne.n	800a196 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a1e6:	2b00      	cmp	r3, #0
 800a1e8:	d013      	beq.n	800a212 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a1ee:	4a8a      	ldr	r2, [pc, #552]	@ (800a418 <HAL_UART_IRQHandler+0x410>)
 800a1f0:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a1f6:	4618      	mov	r0, r3
 800a1f8:	f7fc f8d0 	bl	800639c <HAL_DMA_Abort_IT>
 800a1fc:	4603      	mov	r3, r0
 800a1fe:	2b00      	cmp	r3, #0
 800a200:	d016      	beq.n	800a230 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a206:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a208:	687a      	ldr	r2, [r7, #4]
 800a20a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800a20c:	4610      	mov	r0, r2
 800a20e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a210:	e00e      	b.n	800a230 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800a212:	6878      	ldr	r0, [r7, #4]
 800a214:	f000 f9ac 	bl	800a570 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a218:	e00a      	b.n	800a230 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800a21a:	6878      	ldr	r0, [r7, #4]
 800a21c:	f000 f9a8 	bl	800a570 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a220:	e006      	b.n	800a230 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800a222:	6878      	ldr	r0, [r7, #4]
 800a224:	f000 f9a4 	bl	800a570 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	2200      	movs	r2, #0
 800a22c:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800a22e:	e18d      	b.n	800a54c <HAL_UART_IRQHandler+0x544>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a230:	bf00      	nop
    return;
 800a232:	e18b      	b.n	800a54c <HAL_UART_IRQHandler+0x544>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a238:	2b01      	cmp	r3, #1
 800a23a:	f040 8167 	bne.w	800a50c <HAL_UART_IRQHandler+0x504>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800a23e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a242:	f003 0310 	and.w	r3, r3, #16
 800a246:	2b00      	cmp	r3, #0
 800a248:	f000 8160 	beq.w	800a50c <HAL_UART_IRQHandler+0x504>
      && ((cr1its & USART_CR1_IDLEIE) != 0U))
 800a24c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a250:	f003 0310 	and.w	r3, r3, #16
 800a254:	2b00      	cmp	r3, #0
 800a256:	f000 8159 	beq.w	800a50c <HAL_UART_IRQHandler+0x504>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800a25a:	2300      	movs	r3, #0
 800a25c:	60bb      	str	r3, [r7, #8]
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	681b      	ldr	r3, [r3, #0]
 800a262:	681b      	ldr	r3, [r3, #0]
 800a264:	60bb      	str	r3, [r7, #8]
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	681b      	ldr	r3, [r3, #0]
 800a26a:	685b      	ldr	r3, [r3, #4]
 800a26c:	60bb      	str	r3, [r7, #8]
 800a26e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	681b      	ldr	r3, [r3, #0]
 800a274:	695b      	ldr	r3, [r3, #20]
 800a276:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a27a:	2b40      	cmp	r3, #64	@ 0x40
 800a27c:	f040 80ce 	bne.w	800a41c <HAL_UART_IRQHandler+0x414>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800a280:	687b      	ldr	r3, [r7, #4]
 800a282:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a284:	681b      	ldr	r3, [r3, #0]
 800a286:	685b      	ldr	r3, [r3, #4]
 800a288:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800a28c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800a290:	2b00      	cmp	r3, #0
 800a292:	f000 80a9 	beq.w	800a3e8 <HAL_UART_IRQHandler+0x3e0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800a29a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800a29e:	429a      	cmp	r2, r3
 800a2a0:	f080 80a2 	bcs.w	800a3e8 <HAL_UART_IRQHandler+0x3e0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800a2aa:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a2b0:	69db      	ldr	r3, [r3, #28]
 800a2b2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a2b6:	f000 8088 	beq.w	800a3ca <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a2ba:	687b      	ldr	r3, [r7, #4]
 800a2bc:	681b      	ldr	r3, [r3, #0]
 800a2be:	330c      	adds	r3, #12
 800a2c0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a2c4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800a2c8:	e853 3f00 	ldrex	r3, [r3]
 800a2cc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800a2d0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800a2d4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a2d8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	681b      	ldr	r3, [r3, #0]
 800a2e0:	330c      	adds	r3, #12
 800a2e2:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800a2e6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800a2ea:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a2ee:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800a2f2:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800a2f6:	e841 2300 	strex	r3, r2, [r1]
 800a2fa:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800a2fe:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800a302:	2b00      	cmp	r3, #0
 800a304:	d1d9      	bne.n	800a2ba <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a306:	687b      	ldr	r3, [r7, #4]
 800a308:	681b      	ldr	r3, [r3, #0]
 800a30a:	3314      	adds	r3, #20
 800a30c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a30e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800a310:	e853 3f00 	ldrex	r3, [r3]
 800a314:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800a316:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800a318:	f023 0301 	bic.w	r3, r3, #1
 800a31c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	681b      	ldr	r3, [r3, #0]
 800a324:	3314      	adds	r3, #20
 800a326:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800a32a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800a32e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a330:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800a332:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800a336:	e841 2300 	strex	r3, r2, [r1]
 800a33a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800a33c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800a33e:	2b00      	cmp	r3, #0
 800a340:	d1e1      	bne.n	800a306 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	681b      	ldr	r3, [r3, #0]
 800a346:	3314      	adds	r3, #20
 800a348:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a34a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800a34c:	e853 3f00 	ldrex	r3, [r3]
 800a350:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800a352:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a354:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a358:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	681b      	ldr	r3, [r3, #0]
 800a360:	3314      	adds	r3, #20
 800a362:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800a366:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800a368:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a36a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800a36c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800a36e:	e841 2300 	strex	r3, r2, [r1]
 800a372:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800a374:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a376:	2b00      	cmp	r3, #0
 800a378:	d1e3      	bne.n	800a342 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	2220      	movs	r2, #32
 800a37e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	2200      	movs	r2, #0
 800a386:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	681b      	ldr	r3, [r3, #0]
 800a38c:	330c      	adds	r3, #12
 800a38e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a390:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a392:	e853 3f00 	ldrex	r3, [r3]
 800a396:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800a398:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a39a:	f023 0310 	bic.w	r3, r3, #16
 800a39e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	681b      	ldr	r3, [r3, #0]
 800a3a6:	330c      	adds	r3, #12
 800a3a8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800a3ac:	65ba      	str	r2, [r7, #88]	@ 0x58
 800a3ae:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a3b0:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800a3b2:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800a3b4:	e841 2300 	strex	r3, r2, [r1]
 800a3b8:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800a3ba:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a3bc:	2b00      	cmp	r3, #0
 800a3be:	d1e3      	bne.n	800a388 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a3c4:	4618      	mov	r0, r3
 800a3c6:	f7fb ff79 	bl	80062bc <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800a3ca:	687b      	ldr	r3, [r7, #4]
 800a3cc:	2202      	movs	r2, #2
 800a3ce:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800a3d8:	b29b      	uxth	r3, r3
 800a3da:	1ad3      	subs	r3, r2, r3
 800a3dc:	b29b      	uxth	r3, r3
 800a3de:	4619      	mov	r1, r3
 800a3e0:	6878      	ldr	r0, [r7, #4]
 800a3e2:	f000 f8cf 	bl	800a584 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 800a3e6:	e0b3      	b.n	800a550 <HAL_UART_IRQHandler+0x548>
        if (nb_remaining_rx_data == huart->RxXferSize)
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800a3ec:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800a3f0:	429a      	cmp	r2, r3
 800a3f2:	f040 80ad 	bne.w	800a550 <HAL_UART_IRQHandler+0x548>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 800a3f6:	687b      	ldr	r3, [r7, #4]
 800a3f8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a3fa:	69db      	ldr	r3, [r3, #28]
 800a3fc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a400:	f040 80a6 	bne.w	800a550 <HAL_UART_IRQHandler+0x548>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	2202      	movs	r2, #2
 800a408:	635a      	str	r2, [r3, #52]	@ 0x34
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800a40e:	4619      	mov	r1, r3
 800a410:	6878      	ldr	r0, [r7, #4]
 800a412:	f000 f8b7 	bl	800a584 <HAL_UARTEx_RxEventCallback>
      return;
 800a416:	e09b      	b.n	800a550 <HAL_UART_IRQHandler+0x548>
 800a418:	0800a789 	.word	0x0800a789
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800a420:	687b      	ldr	r3, [r7, #4]
 800a422:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800a424:	b29b      	uxth	r3, r3
 800a426:	1ad3      	subs	r3, r2, r3
 800a428:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800a430:	b29b      	uxth	r3, r3
 800a432:	2b00      	cmp	r3, #0
 800a434:	f000 808e 	beq.w	800a554 <HAL_UART_IRQHandler+0x54c>
          && (nb_rx_data > 0U))
 800a438:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800a43c:	2b00      	cmp	r3, #0
 800a43e:	f000 8089 	beq.w	800a554 <HAL_UART_IRQHandler+0x54c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	681b      	ldr	r3, [r3, #0]
 800a446:	330c      	adds	r3, #12
 800a448:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a44a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a44c:	e853 3f00 	ldrex	r3, [r3]
 800a450:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800a452:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a454:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a458:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	681b      	ldr	r3, [r3, #0]
 800a460:	330c      	adds	r3, #12
 800a462:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800a466:	647a      	str	r2, [r7, #68]	@ 0x44
 800a468:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a46a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800a46c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a46e:	e841 2300 	strex	r3, r2, [r1]
 800a472:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800a474:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a476:	2b00      	cmp	r3, #0
 800a478:	d1e3      	bne.n	800a442 <HAL_UART_IRQHandler+0x43a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	681b      	ldr	r3, [r3, #0]
 800a47e:	3314      	adds	r3, #20
 800a480:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a482:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a484:	e853 3f00 	ldrex	r3, [r3]
 800a488:	623b      	str	r3, [r7, #32]
   return(result);
 800a48a:	6a3b      	ldr	r3, [r7, #32]
 800a48c:	f023 0301 	bic.w	r3, r3, #1
 800a490:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	681b      	ldr	r3, [r3, #0]
 800a498:	3314      	adds	r3, #20
 800a49a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800a49e:	633a      	str	r2, [r7, #48]	@ 0x30
 800a4a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a4a2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a4a4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a4a6:	e841 2300 	strex	r3, r2, [r1]
 800a4aa:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a4ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a4ae:	2b00      	cmp	r3, #0
 800a4b0:	d1e3      	bne.n	800a47a <HAL_UART_IRQHandler+0x472>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	2220      	movs	r2, #32
 800a4b6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	2200      	movs	r2, #0
 800a4be:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	681b      	ldr	r3, [r3, #0]
 800a4c4:	330c      	adds	r3, #12
 800a4c6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a4c8:	693b      	ldr	r3, [r7, #16]
 800a4ca:	e853 3f00 	ldrex	r3, [r3]
 800a4ce:	60fb      	str	r3, [r7, #12]
   return(result);
 800a4d0:	68fb      	ldr	r3, [r7, #12]
 800a4d2:	f023 0310 	bic.w	r3, r3, #16
 800a4d6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	681b      	ldr	r3, [r3, #0]
 800a4de:	330c      	adds	r3, #12
 800a4e0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 800a4e4:	61fa      	str	r2, [r7, #28]
 800a4e6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a4e8:	69b9      	ldr	r1, [r7, #24]
 800a4ea:	69fa      	ldr	r2, [r7, #28]
 800a4ec:	e841 2300 	strex	r3, r2, [r1]
 800a4f0:	617b      	str	r3, [r7, #20]
   return(result);
 800a4f2:	697b      	ldr	r3, [r7, #20]
 800a4f4:	2b00      	cmp	r3, #0
 800a4f6:	d1e3      	bne.n	800a4c0 <HAL_UART_IRQHandler+0x4b8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	2202      	movs	r2, #2
 800a4fc:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800a4fe:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800a502:	4619      	mov	r1, r3
 800a504:	6878      	ldr	r0, [r7, #4]
 800a506:	f000 f83d 	bl	800a584 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800a50a:	e023      	b.n	800a554 <HAL_UART_IRQHandler+0x54c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800a50c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a510:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a514:	2b00      	cmp	r3, #0
 800a516:	d009      	beq.n	800a52c <HAL_UART_IRQHandler+0x524>
 800a518:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a51c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a520:	2b00      	cmp	r3, #0
 800a522:	d003      	beq.n	800a52c <HAL_UART_IRQHandler+0x524>
  {
    UART_Transmit_IT(huart);
 800a524:	6878      	ldr	r0, [r7, #4]
 800a526:	f000 f940 	bl	800a7aa <UART_Transmit_IT>
    return;
 800a52a:	e014      	b.n	800a556 <HAL_UART_IRQHandler+0x54e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800a52c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a530:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a534:	2b00      	cmp	r3, #0
 800a536:	d00e      	beq.n	800a556 <HAL_UART_IRQHandler+0x54e>
 800a538:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a53c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a540:	2b00      	cmp	r3, #0
 800a542:	d008      	beq.n	800a556 <HAL_UART_IRQHandler+0x54e>
  {
    UART_EndTransmit_IT(huart);
 800a544:	6878      	ldr	r0, [r7, #4]
 800a546:	f000 f980 	bl	800a84a <UART_EndTransmit_IT>
    return;
 800a54a:	e004      	b.n	800a556 <HAL_UART_IRQHandler+0x54e>
    return;
 800a54c:	bf00      	nop
 800a54e:	e002      	b.n	800a556 <HAL_UART_IRQHandler+0x54e>
      return;
 800a550:	bf00      	nop
 800a552:	e000      	b.n	800a556 <HAL_UART_IRQHandler+0x54e>
      return;
 800a554:	bf00      	nop
  }
}
 800a556:	37e8      	adds	r7, #232	@ 0xe8
 800a558:	46bd      	mov	sp, r7
 800a55a:	bd80      	pop	{r7, pc}

0800a55c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800a55c:	b480      	push	{r7}
 800a55e:	b083      	sub	sp, #12
 800a560:	af00      	add	r7, sp, #0
 800a562:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800a564:	bf00      	nop
 800a566:	370c      	adds	r7, #12
 800a568:	46bd      	mov	sp, r7
 800a56a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a56e:	4770      	bx	lr

0800a570 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800a570:	b480      	push	{r7}
 800a572:	b083      	sub	sp, #12
 800a574:	af00      	add	r7, sp, #0
 800a576:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800a578:	bf00      	nop
 800a57a:	370c      	adds	r7, #12
 800a57c:	46bd      	mov	sp, r7
 800a57e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a582:	4770      	bx	lr

0800a584 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800a584:	b480      	push	{r7}
 800a586:	b083      	sub	sp, #12
 800a588:	af00      	add	r7, sp, #0
 800a58a:	6078      	str	r0, [r7, #4]
 800a58c:	460b      	mov	r3, r1
 800a58e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800a590:	bf00      	nop
 800a592:	370c      	adds	r7, #12
 800a594:	46bd      	mov	sp, r7
 800a596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a59a:	4770      	bx	lr

0800a59c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800a59c:	b580      	push	{r7, lr}
 800a59e:	b086      	sub	sp, #24
 800a5a0:	af00      	add	r7, sp, #0
 800a5a2:	60f8      	str	r0, [r7, #12]
 800a5a4:	60b9      	str	r1, [r7, #8]
 800a5a6:	603b      	str	r3, [r7, #0]
 800a5a8:	4613      	mov	r3, r2
 800a5aa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a5ac:	e03b      	b.n	800a626 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a5ae:	6a3b      	ldr	r3, [r7, #32]
 800a5b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a5b4:	d037      	beq.n	800a626 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a5b6:	f7fa ffc7 	bl	8005548 <HAL_GetTick>
 800a5ba:	4602      	mov	r2, r0
 800a5bc:	683b      	ldr	r3, [r7, #0]
 800a5be:	1ad3      	subs	r3, r2, r3
 800a5c0:	6a3a      	ldr	r2, [r7, #32]
 800a5c2:	429a      	cmp	r2, r3
 800a5c4:	d302      	bcc.n	800a5cc <UART_WaitOnFlagUntilTimeout+0x30>
 800a5c6:	6a3b      	ldr	r3, [r7, #32]
 800a5c8:	2b00      	cmp	r3, #0
 800a5ca:	d101      	bne.n	800a5d0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800a5cc:	2303      	movs	r3, #3
 800a5ce:	e03a      	b.n	800a646 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800a5d0:	68fb      	ldr	r3, [r7, #12]
 800a5d2:	681b      	ldr	r3, [r3, #0]
 800a5d4:	68db      	ldr	r3, [r3, #12]
 800a5d6:	f003 0304 	and.w	r3, r3, #4
 800a5da:	2b00      	cmp	r3, #0
 800a5dc:	d023      	beq.n	800a626 <UART_WaitOnFlagUntilTimeout+0x8a>
 800a5de:	68bb      	ldr	r3, [r7, #8]
 800a5e0:	2b80      	cmp	r3, #128	@ 0x80
 800a5e2:	d020      	beq.n	800a626 <UART_WaitOnFlagUntilTimeout+0x8a>
 800a5e4:	68bb      	ldr	r3, [r7, #8]
 800a5e6:	2b40      	cmp	r3, #64	@ 0x40
 800a5e8:	d01d      	beq.n	800a626 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800a5ea:	68fb      	ldr	r3, [r7, #12]
 800a5ec:	681b      	ldr	r3, [r3, #0]
 800a5ee:	681b      	ldr	r3, [r3, #0]
 800a5f0:	f003 0308 	and.w	r3, r3, #8
 800a5f4:	2b08      	cmp	r3, #8
 800a5f6:	d116      	bne.n	800a626 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800a5f8:	2300      	movs	r3, #0
 800a5fa:	617b      	str	r3, [r7, #20]
 800a5fc:	68fb      	ldr	r3, [r7, #12]
 800a5fe:	681b      	ldr	r3, [r3, #0]
 800a600:	681b      	ldr	r3, [r3, #0]
 800a602:	617b      	str	r3, [r7, #20]
 800a604:	68fb      	ldr	r3, [r7, #12]
 800a606:	681b      	ldr	r3, [r3, #0]
 800a608:	685b      	ldr	r3, [r3, #4]
 800a60a:	617b      	str	r3, [r7, #20]
 800a60c:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a60e:	68f8      	ldr	r0, [r7, #12]
 800a610:	f000 f857 	bl	800a6c2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800a614:	68fb      	ldr	r3, [r7, #12]
 800a616:	2208      	movs	r2, #8
 800a618:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a61a:	68fb      	ldr	r3, [r7, #12]
 800a61c:	2200      	movs	r2, #0
 800a61e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800a622:	2301      	movs	r3, #1
 800a624:	e00f      	b.n	800a646 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a626:	68fb      	ldr	r3, [r7, #12]
 800a628:	681b      	ldr	r3, [r3, #0]
 800a62a:	681a      	ldr	r2, [r3, #0]
 800a62c:	68bb      	ldr	r3, [r7, #8]
 800a62e:	4013      	ands	r3, r2
 800a630:	68ba      	ldr	r2, [r7, #8]
 800a632:	429a      	cmp	r2, r3
 800a634:	bf0c      	ite	eq
 800a636:	2301      	moveq	r3, #1
 800a638:	2300      	movne	r3, #0
 800a63a:	b2db      	uxtb	r3, r3
 800a63c:	461a      	mov	r2, r3
 800a63e:	79fb      	ldrb	r3, [r7, #7]
 800a640:	429a      	cmp	r2, r3
 800a642:	d0b4      	beq.n	800a5ae <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a644:	2300      	movs	r3, #0
}
 800a646:	4618      	mov	r0, r3
 800a648:	3718      	adds	r7, #24
 800a64a:	46bd      	mov	sp, r7
 800a64c:	bd80      	pop	{r7, pc}

0800a64e <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a64e:	b480      	push	{r7}
 800a650:	b085      	sub	sp, #20
 800a652:	af00      	add	r7, sp, #0
 800a654:	60f8      	str	r0, [r7, #12]
 800a656:	60b9      	str	r1, [r7, #8]
 800a658:	4613      	mov	r3, r2
 800a65a:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800a65c:	68fb      	ldr	r3, [r7, #12]
 800a65e:	68ba      	ldr	r2, [r7, #8]
 800a660:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 800a662:	68fb      	ldr	r3, [r7, #12]
 800a664:	88fa      	ldrh	r2, [r7, #6]
 800a666:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 800a668:	68fb      	ldr	r3, [r7, #12]
 800a66a:	88fa      	ldrh	r2, [r7, #6]
 800a66c:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a66e:	68fb      	ldr	r3, [r7, #12]
 800a670:	2200      	movs	r2, #0
 800a672:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800a674:	68fb      	ldr	r3, [r7, #12]
 800a676:	2222      	movs	r2, #34	@ 0x22
 800a678:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 800a67c:	68fb      	ldr	r3, [r7, #12]
 800a67e:	691b      	ldr	r3, [r3, #16]
 800a680:	2b00      	cmp	r3, #0
 800a682:	d007      	beq.n	800a694 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800a684:	68fb      	ldr	r3, [r7, #12]
 800a686:	681b      	ldr	r3, [r3, #0]
 800a688:	68da      	ldr	r2, [r3, #12]
 800a68a:	68fb      	ldr	r3, [r7, #12]
 800a68c:	681b      	ldr	r3, [r3, #0]
 800a68e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800a692:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800a694:	68fb      	ldr	r3, [r7, #12]
 800a696:	681b      	ldr	r3, [r3, #0]
 800a698:	695a      	ldr	r2, [r3, #20]
 800a69a:	68fb      	ldr	r3, [r7, #12]
 800a69c:	681b      	ldr	r3, [r3, #0]
 800a69e:	f042 0201 	orr.w	r2, r2, #1
 800a6a2:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800a6a4:	68fb      	ldr	r3, [r7, #12]
 800a6a6:	681b      	ldr	r3, [r3, #0]
 800a6a8:	68da      	ldr	r2, [r3, #12]
 800a6aa:	68fb      	ldr	r3, [r7, #12]
 800a6ac:	681b      	ldr	r3, [r3, #0]
 800a6ae:	f042 0220 	orr.w	r2, r2, #32
 800a6b2:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800a6b4:	2300      	movs	r3, #0
}
 800a6b6:	4618      	mov	r0, r3
 800a6b8:	3714      	adds	r7, #20
 800a6ba:	46bd      	mov	sp, r7
 800a6bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6c0:	4770      	bx	lr

0800a6c2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a6c2:	b480      	push	{r7}
 800a6c4:	b095      	sub	sp, #84	@ 0x54
 800a6c6:	af00      	add	r7, sp, #0
 800a6c8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	681b      	ldr	r3, [r3, #0]
 800a6ce:	330c      	adds	r3, #12
 800a6d0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a6d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a6d4:	e853 3f00 	ldrex	r3, [r3]
 800a6d8:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800a6da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a6dc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a6e0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a6e2:	687b      	ldr	r3, [r7, #4]
 800a6e4:	681b      	ldr	r3, [r3, #0]
 800a6e6:	330c      	adds	r3, #12
 800a6e8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800a6ea:	643a      	str	r2, [r7, #64]	@ 0x40
 800a6ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a6ee:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800a6f0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800a6f2:	e841 2300 	strex	r3, r2, [r1]
 800a6f6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800a6f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a6fa:	2b00      	cmp	r3, #0
 800a6fc:	d1e5      	bne.n	800a6ca <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a6fe:	687b      	ldr	r3, [r7, #4]
 800a700:	681b      	ldr	r3, [r3, #0]
 800a702:	3314      	adds	r3, #20
 800a704:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a706:	6a3b      	ldr	r3, [r7, #32]
 800a708:	e853 3f00 	ldrex	r3, [r3]
 800a70c:	61fb      	str	r3, [r7, #28]
   return(result);
 800a70e:	69fb      	ldr	r3, [r7, #28]
 800a710:	f023 0301 	bic.w	r3, r3, #1
 800a714:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	681b      	ldr	r3, [r3, #0]
 800a71a:	3314      	adds	r3, #20
 800a71c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a71e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800a720:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a722:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a724:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a726:	e841 2300 	strex	r3, r2, [r1]
 800a72a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a72c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a72e:	2b00      	cmp	r3, #0
 800a730:	d1e5      	bne.n	800a6fe <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a732:	687b      	ldr	r3, [r7, #4]
 800a734:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a736:	2b01      	cmp	r3, #1
 800a738:	d119      	bne.n	800a76e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a73a:	687b      	ldr	r3, [r7, #4]
 800a73c:	681b      	ldr	r3, [r3, #0]
 800a73e:	330c      	adds	r3, #12
 800a740:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a742:	68fb      	ldr	r3, [r7, #12]
 800a744:	e853 3f00 	ldrex	r3, [r3]
 800a748:	60bb      	str	r3, [r7, #8]
   return(result);
 800a74a:	68bb      	ldr	r3, [r7, #8]
 800a74c:	f023 0310 	bic.w	r3, r3, #16
 800a750:	647b      	str	r3, [r7, #68]	@ 0x44
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	681b      	ldr	r3, [r3, #0]
 800a756:	330c      	adds	r3, #12
 800a758:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a75a:	61ba      	str	r2, [r7, #24]
 800a75c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a75e:	6979      	ldr	r1, [r7, #20]
 800a760:	69ba      	ldr	r2, [r7, #24]
 800a762:	e841 2300 	strex	r3, r2, [r1]
 800a766:	613b      	str	r3, [r7, #16]
   return(result);
 800a768:	693b      	ldr	r3, [r7, #16]
 800a76a:	2b00      	cmp	r3, #0
 800a76c:	d1e5      	bne.n	800a73a <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a76e:	687b      	ldr	r3, [r7, #4]
 800a770:	2220      	movs	r2, #32
 800a772:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a776:	687b      	ldr	r3, [r7, #4]
 800a778:	2200      	movs	r2, #0
 800a77a:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800a77c:	bf00      	nop
 800a77e:	3754      	adds	r7, #84	@ 0x54
 800a780:	46bd      	mov	sp, r7
 800a782:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a786:	4770      	bx	lr

0800a788 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a788:	b580      	push	{r7, lr}
 800a78a:	b084      	sub	sp, #16
 800a78c:	af00      	add	r7, sp, #0
 800a78e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a794:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800a796:	68fb      	ldr	r3, [r7, #12]
 800a798:	2200      	movs	r2, #0
 800a79a:	85da      	strh	r2, [r3, #46]	@ 0x2e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a79c:	68f8      	ldr	r0, [r7, #12]
 800a79e:	f7ff fee7 	bl	800a570 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a7a2:	bf00      	nop
 800a7a4:	3710      	adds	r7, #16
 800a7a6:	46bd      	mov	sp, r7
 800a7a8:	bd80      	pop	{r7, pc}

0800a7aa <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800a7aa:	b480      	push	{r7}
 800a7ac:	b085      	sub	sp, #20
 800a7ae:	af00      	add	r7, sp, #0
 800a7b0:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a7b8:	b2db      	uxtb	r3, r3
 800a7ba:	2b21      	cmp	r3, #33	@ 0x21
 800a7bc:	d13e      	bne.n	800a83c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a7be:	687b      	ldr	r3, [r7, #4]
 800a7c0:	689b      	ldr	r3, [r3, #8]
 800a7c2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a7c6:	d114      	bne.n	800a7f2 <UART_Transmit_IT+0x48>
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	691b      	ldr	r3, [r3, #16]
 800a7cc:	2b00      	cmp	r3, #0
 800a7ce:	d110      	bne.n	800a7f2 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	6a1b      	ldr	r3, [r3, #32]
 800a7d4:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800a7d6:	68fb      	ldr	r3, [r7, #12]
 800a7d8:	881b      	ldrh	r3, [r3, #0]
 800a7da:	461a      	mov	r2, r3
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	681b      	ldr	r3, [r3, #0]
 800a7e0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a7e4:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800a7e6:	687b      	ldr	r3, [r7, #4]
 800a7e8:	6a1b      	ldr	r3, [r3, #32]
 800a7ea:	1c9a      	adds	r2, r3, #2
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	621a      	str	r2, [r3, #32]
 800a7f0:	e008      	b.n	800a804 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	6a1b      	ldr	r3, [r3, #32]
 800a7f6:	1c59      	adds	r1, r3, #1
 800a7f8:	687a      	ldr	r2, [r7, #4]
 800a7fa:	6211      	str	r1, [r2, #32]
 800a7fc:	781a      	ldrb	r2, [r3, #0]
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	681b      	ldr	r3, [r3, #0]
 800a802:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800a808:	b29b      	uxth	r3, r3
 800a80a:	3b01      	subs	r3, #1
 800a80c:	b29b      	uxth	r3, r3
 800a80e:	687a      	ldr	r2, [r7, #4]
 800a810:	4619      	mov	r1, r3
 800a812:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800a814:	2b00      	cmp	r3, #0
 800a816:	d10f      	bne.n	800a838 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	681b      	ldr	r3, [r3, #0]
 800a81c:	68da      	ldr	r2, [r3, #12]
 800a81e:	687b      	ldr	r3, [r7, #4]
 800a820:	681b      	ldr	r3, [r3, #0]
 800a822:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800a826:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	681b      	ldr	r3, [r3, #0]
 800a82c:	68da      	ldr	r2, [r3, #12]
 800a82e:	687b      	ldr	r3, [r7, #4]
 800a830:	681b      	ldr	r3, [r3, #0]
 800a832:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800a836:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800a838:	2300      	movs	r3, #0
 800a83a:	e000      	b.n	800a83e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800a83c:	2302      	movs	r3, #2
  }
}
 800a83e:	4618      	mov	r0, r3
 800a840:	3714      	adds	r7, #20
 800a842:	46bd      	mov	sp, r7
 800a844:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a848:	4770      	bx	lr

0800a84a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800a84a:	b580      	push	{r7, lr}
 800a84c:	b082      	sub	sp, #8
 800a84e:	af00      	add	r7, sp, #0
 800a850:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800a852:	687b      	ldr	r3, [r7, #4]
 800a854:	681b      	ldr	r3, [r3, #0]
 800a856:	68da      	ldr	r2, [r3, #12]
 800a858:	687b      	ldr	r3, [r7, #4]
 800a85a:	681b      	ldr	r3, [r3, #0]
 800a85c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800a860:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	2220      	movs	r2, #32
 800a866:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800a86a:	6878      	ldr	r0, [r7, #4]
 800a86c:	f7ff fe76 	bl	800a55c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800a870:	2300      	movs	r3, #0
}
 800a872:	4618      	mov	r0, r3
 800a874:	3708      	adds	r7, #8
 800a876:	46bd      	mov	sp, r7
 800a878:	bd80      	pop	{r7, pc}

0800a87a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800a87a:	b580      	push	{r7, lr}
 800a87c:	b08c      	sub	sp, #48	@ 0x30
 800a87e:	af00      	add	r7, sp, #0
 800a880:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits = NULL;
 800a882:	2300      	movs	r3, #0
 800a884:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint16_t *pdata16bits = NULL;
 800a886:	2300      	movs	r3, #0
 800a888:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a88a:	687b      	ldr	r3, [r7, #4]
 800a88c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800a890:	b2db      	uxtb	r3, r3
 800a892:	2b22      	cmp	r3, #34	@ 0x22
 800a894:	f040 80aa 	bne.w	800a9ec <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	689b      	ldr	r3, [r3, #8]
 800a89c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a8a0:	d115      	bne.n	800a8ce <UART_Receive_IT+0x54>
 800a8a2:	687b      	ldr	r3, [r7, #4]
 800a8a4:	691b      	ldr	r3, [r3, #16]
 800a8a6:	2b00      	cmp	r3, #0
 800a8a8:	d111      	bne.n	800a8ce <UART_Receive_IT+0x54>
    {
      /* Unused pdata8bits */
      UNUSED(pdata8bits);
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800a8aa:	687b      	ldr	r3, [r7, #4]
 800a8ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a8ae:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800a8b0:	687b      	ldr	r3, [r7, #4]
 800a8b2:	681b      	ldr	r3, [r3, #0]
 800a8b4:	685b      	ldr	r3, [r3, #4]
 800a8b6:	b29b      	uxth	r3, r3
 800a8b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a8bc:	b29a      	uxth	r2, r3
 800a8be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a8c0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800a8c2:	687b      	ldr	r3, [r7, #4]
 800a8c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a8c6:	1c9a      	adds	r2, r3, #2
 800a8c8:	687b      	ldr	r3, [r7, #4]
 800a8ca:	629a      	str	r2, [r3, #40]	@ 0x28
 800a8cc:	e024      	b.n	800a918 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800a8ce:	687b      	ldr	r3, [r7, #4]
 800a8d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a8d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
      /* Unused pdata16bits */
      UNUSED(pdata16bits);

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	689b      	ldr	r3, [r3, #8]
 800a8d8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a8dc:	d007      	beq.n	800a8ee <UART_Receive_IT+0x74>
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	689b      	ldr	r3, [r3, #8]
 800a8e2:	2b00      	cmp	r3, #0
 800a8e4:	d10a      	bne.n	800a8fc <UART_Receive_IT+0x82>
 800a8e6:	687b      	ldr	r3, [r7, #4]
 800a8e8:	691b      	ldr	r3, [r3, #16]
 800a8ea:	2b00      	cmp	r3, #0
 800a8ec:	d106      	bne.n	800a8fc <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800a8ee:	687b      	ldr	r3, [r7, #4]
 800a8f0:	681b      	ldr	r3, [r3, #0]
 800a8f2:	685b      	ldr	r3, [r3, #4]
 800a8f4:	b2da      	uxtb	r2, r3
 800a8f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a8f8:	701a      	strb	r2, [r3, #0]
 800a8fa:	e008      	b.n	800a90e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800a8fc:	687b      	ldr	r3, [r7, #4]
 800a8fe:	681b      	ldr	r3, [r3, #0]
 800a900:	685b      	ldr	r3, [r3, #4]
 800a902:	b2db      	uxtb	r3, r3
 800a904:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a908:	b2da      	uxtb	r2, r3
 800a90a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a90c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800a90e:	687b      	ldr	r3, [r7, #4]
 800a910:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a912:	1c5a      	adds	r2, r3, #1
 800a914:	687b      	ldr	r3, [r7, #4]
 800a916:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800a91c:	b29b      	uxth	r3, r3
 800a91e:	3b01      	subs	r3, #1
 800a920:	b29b      	uxth	r3, r3
 800a922:	687a      	ldr	r2, [r7, #4]
 800a924:	4619      	mov	r1, r3
 800a926:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800a928:	2b00      	cmp	r3, #0
 800a92a:	d15d      	bne.n	800a9e8 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800a92c:	687b      	ldr	r3, [r7, #4]
 800a92e:	681b      	ldr	r3, [r3, #0]
 800a930:	68da      	ldr	r2, [r3, #12]
 800a932:	687b      	ldr	r3, [r7, #4]
 800a934:	681b      	ldr	r3, [r3, #0]
 800a936:	f022 0220 	bic.w	r2, r2, #32
 800a93a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800a93c:	687b      	ldr	r3, [r7, #4]
 800a93e:	681b      	ldr	r3, [r3, #0]
 800a940:	68da      	ldr	r2, [r3, #12]
 800a942:	687b      	ldr	r3, [r7, #4]
 800a944:	681b      	ldr	r3, [r3, #0]
 800a946:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800a94a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800a94c:	687b      	ldr	r3, [r7, #4]
 800a94e:	681b      	ldr	r3, [r3, #0]
 800a950:	695a      	ldr	r2, [r3, #20]
 800a952:	687b      	ldr	r3, [r7, #4]
 800a954:	681b      	ldr	r3, [r3, #0]
 800a956:	f022 0201 	bic.w	r2, r2, #1
 800a95a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	2220      	movs	r2, #32
 800a960:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	2200      	movs	r2, #0
 800a968:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a96a:	687b      	ldr	r3, [r7, #4]
 800a96c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a96e:	2b01      	cmp	r3, #1
 800a970:	d135      	bne.n	800a9de <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a972:	687b      	ldr	r3, [r7, #4]
 800a974:	2200      	movs	r2, #0
 800a976:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	681b      	ldr	r3, [r3, #0]
 800a97c:	330c      	adds	r3, #12
 800a97e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a980:	697b      	ldr	r3, [r7, #20]
 800a982:	e853 3f00 	ldrex	r3, [r3]
 800a986:	613b      	str	r3, [r7, #16]
   return(result);
 800a988:	693b      	ldr	r3, [r7, #16]
 800a98a:	f023 0310 	bic.w	r3, r3, #16
 800a98e:	627b      	str	r3, [r7, #36]	@ 0x24
 800a990:	687b      	ldr	r3, [r7, #4]
 800a992:	681b      	ldr	r3, [r3, #0]
 800a994:	330c      	adds	r3, #12
 800a996:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a998:	623a      	str	r2, [r7, #32]
 800a99a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a99c:	69f9      	ldr	r1, [r7, #28]
 800a99e:	6a3a      	ldr	r2, [r7, #32]
 800a9a0:	e841 2300 	strex	r3, r2, [r1]
 800a9a4:	61bb      	str	r3, [r7, #24]
   return(result);
 800a9a6:	69bb      	ldr	r3, [r7, #24]
 800a9a8:	2b00      	cmp	r3, #0
 800a9aa:	d1e5      	bne.n	800a978 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	681b      	ldr	r3, [r3, #0]
 800a9b0:	681b      	ldr	r3, [r3, #0]
 800a9b2:	f003 0310 	and.w	r3, r3, #16
 800a9b6:	2b10      	cmp	r3, #16
 800a9b8:	d10a      	bne.n	800a9d0 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800a9ba:	2300      	movs	r3, #0
 800a9bc:	60fb      	str	r3, [r7, #12]
 800a9be:	687b      	ldr	r3, [r7, #4]
 800a9c0:	681b      	ldr	r3, [r3, #0]
 800a9c2:	681b      	ldr	r3, [r3, #0]
 800a9c4:	60fb      	str	r3, [r7, #12]
 800a9c6:	687b      	ldr	r3, [r7, #4]
 800a9c8:	681b      	ldr	r3, [r3, #0]
 800a9ca:	685b      	ldr	r3, [r3, #4]
 800a9cc:	60fb      	str	r3, [r7, #12]
 800a9ce:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800a9d4:	4619      	mov	r1, r3
 800a9d6:	6878      	ldr	r0, [r7, #4]
 800a9d8:	f7ff fdd4 	bl	800a584 <HAL_UARTEx_RxEventCallback>
 800a9dc:	e002      	b.n	800a9e4 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800a9de:	6878      	ldr	r0, [r7, #4]
 800a9e0:	f7f7 fc32 	bl	8002248 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800a9e4:	2300      	movs	r3, #0
 800a9e6:	e002      	b.n	800a9ee <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800a9e8:	2300      	movs	r3, #0
 800a9ea:	e000      	b.n	800a9ee <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800a9ec:	2302      	movs	r3, #2
  }
}
 800a9ee:	4618      	mov	r0, r3
 800a9f0:	3730      	adds	r7, #48	@ 0x30
 800a9f2:	46bd      	mov	sp, r7
 800a9f4:	bd80      	pop	{r7, pc}
	...

0800a9f8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a9f8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a9fc:	b0c0      	sub	sp, #256	@ 0x100
 800a9fe:	af00      	add	r7, sp, #0
 800aa00:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800aa04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800aa08:	681b      	ldr	r3, [r3, #0]
 800aa0a:	691b      	ldr	r3, [r3, #16]
 800aa0c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800aa10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800aa14:	68d9      	ldr	r1, [r3, #12]
 800aa16:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800aa1a:	681a      	ldr	r2, [r3, #0]
 800aa1c:	ea40 0301 	orr.w	r3, r0, r1
 800aa20:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800aa22:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800aa26:	689a      	ldr	r2, [r3, #8]
 800aa28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800aa2c:	691b      	ldr	r3, [r3, #16]
 800aa2e:	431a      	orrs	r2, r3
 800aa30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800aa34:	695b      	ldr	r3, [r3, #20]
 800aa36:	431a      	orrs	r2, r3
 800aa38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800aa3c:	69db      	ldr	r3, [r3, #28]
 800aa3e:	4313      	orrs	r3, r2
 800aa40:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800aa44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800aa48:	681b      	ldr	r3, [r3, #0]
 800aa4a:	68db      	ldr	r3, [r3, #12]
 800aa4c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800aa50:	f021 010c 	bic.w	r1, r1, #12
 800aa54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800aa58:	681a      	ldr	r2, [r3, #0]
 800aa5a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800aa5e:	430b      	orrs	r3, r1
 800aa60:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800aa62:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800aa66:	681b      	ldr	r3, [r3, #0]
 800aa68:	695b      	ldr	r3, [r3, #20]
 800aa6a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800aa6e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800aa72:	6999      	ldr	r1, [r3, #24]
 800aa74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800aa78:	681a      	ldr	r2, [r3, #0]
 800aa7a:	ea40 0301 	orr.w	r3, r0, r1
 800aa7e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800aa80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800aa84:	681a      	ldr	r2, [r3, #0]
 800aa86:	4b8f      	ldr	r3, [pc, #572]	@ (800acc4 <UART_SetConfig+0x2cc>)
 800aa88:	429a      	cmp	r2, r3
 800aa8a:	d005      	beq.n	800aa98 <UART_SetConfig+0xa0>
 800aa8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800aa90:	681a      	ldr	r2, [r3, #0]
 800aa92:	4b8d      	ldr	r3, [pc, #564]	@ (800acc8 <UART_SetConfig+0x2d0>)
 800aa94:	429a      	cmp	r2, r3
 800aa96:	d104      	bne.n	800aaa2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800aa98:	f7fd fb26 	bl	80080e8 <HAL_RCC_GetPCLK2Freq>
 800aa9c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800aaa0:	e003      	b.n	800aaaa <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800aaa2:	f7fd fb0d 	bl	80080c0 <HAL_RCC_GetPCLK1Freq>
 800aaa6:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800aaaa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800aaae:	69db      	ldr	r3, [r3, #28]
 800aab0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800aab4:	f040 810c 	bne.w	800acd0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800aab8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800aabc:	2200      	movs	r2, #0
 800aabe:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800aac2:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800aac6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800aaca:	4622      	mov	r2, r4
 800aacc:	462b      	mov	r3, r5
 800aace:	1891      	adds	r1, r2, r2
 800aad0:	65b9      	str	r1, [r7, #88]	@ 0x58
 800aad2:	415b      	adcs	r3, r3
 800aad4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800aad6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800aada:	4621      	mov	r1, r4
 800aadc:	eb12 0801 	adds.w	r8, r2, r1
 800aae0:	4629      	mov	r1, r5
 800aae2:	eb43 0901 	adc.w	r9, r3, r1
 800aae6:	f04f 0200 	mov.w	r2, #0
 800aaea:	f04f 0300 	mov.w	r3, #0
 800aaee:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800aaf2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800aaf6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800aafa:	4690      	mov	r8, r2
 800aafc:	4699      	mov	r9, r3
 800aafe:	4623      	mov	r3, r4
 800ab00:	eb18 0303 	adds.w	r3, r8, r3
 800ab04:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800ab08:	462b      	mov	r3, r5
 800ab0a:	eb49 0303 	adc.w	r3, r9, r3
 800ab0e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800ab12:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ab16:	685b      	ldr	r3, [r3, #4]
 800ab18:	2200      	movs	r2, #0
 800ab1a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800ab1e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800ab22:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800ab26:	460b      	mov	r3, r1
 800ab28:	18db      	adds	r3, r3, r3
 800ab2a:	653b      	str	r3, [r7, #80]	@ 0x50
 800ab2c:	4613      	mov	r3, r2
 800ab2e:	eb42 0303 	adc.w	r3, r2, r3
 800ab32:	657b      	str	r3, [r7, #84]	@ 0x54
 800ab34:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800ab38:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800ab3c:	f7f6 f8ac 	bl	8000c98 <__aeabi_uldivmod>
 800ab40:	4602      	mov	r2, r0
 800ab42:	460b      	mov	r3, r1
 800ab44:	4b61      	ldr	r3, [pc, #388]	@ (800accc <UART_SetConfig+0x2d4>)
 800ab46:	fba3 2302 	umull	r2, r3, r3, r2
 800ab4a:	095b      	lsrs	r3, r3, #5
 800ab4c:	011c      	lsls	r4, r3, #4
 800ab4e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800ab52:	2200      	movs	r2, #0
 800ab54:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800ab58:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800ab5c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800ab60:	4642      	mov	r2, r8
 800ab62:	464b      	mov	r3, r9
 800ab64:	1891      	adds	r1, r2, r2
 800ab66:	64b9      	str	r1, [r7, #72]	@ 0x48
 800ab68:	415b      	adcs	r3, r3
 800ab6a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800ab6c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800ab70:	4641      	mov	r1, r8
 800ab72:	eb12 0a01 	adds.w	sl, r2, r1
 800ab76:	4649      	mov	r1, r9
 800ab78:	eb43 0b01 	adc.w	fp, r3, r1
 800ab7c:	f04f 0200 	mov.w	r2, #0
 800ab80:	f04f 0300 	mov.w	r3, #0
 800ab84:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800ab88:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800ab8c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800ab90:	4692      	mov	sl, r2
 800ab92:	469b      	mov	fp, r3
 800ab94:	4643      	mov	r3, r8
 800ab96:	eb1a 0303 	adds.w	r3, sl, r3
 800ab9a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800ab9e:	464b      	mov	r3, r9
 800aba0:	eb4b 0303 	adc.w	r3, fp, r3
 800aba4:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800aba8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800abac:	685b      	ldr	r3, [r3, #4]
 800abae:	2200      	movs	r2, #0
 800abb0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800abb4:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800abb8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800abbc:	460b      	mov	r3, r1
 800abbe:	18db      	adds	r3, r3, r3
 800abc0:	643b      	str	r3, [r7, #64]	@ 0x40
 800abc2:	4613      	mov	r3, r2
 800abc4:	eb42 0303 	adc.w	r3, r2, r3
 800abc8:	647b      	str	r3, [r7, #68]	@ 0x44
 800abca:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800abce:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800abd2:	f7f6 f861 	bl	8000c98 <__aeabi_uldivmod>
 800abd6:	4602      	mov	r2, r0
 800abd8:	460b      	mov	r3, r1
 800abda:	4611      	mov	r1, r2
 800abdc:	4b3b      	ldr	r3, [pc, #236]	@ (800accc <UART_SetConfig+0x2d4>)
 800abde:	fba3 2301 	umull	r2, r3, r3, r1
 800abe2:	095b      	lsrs	r3, r3, #5
 800abe4:	2264      	movs	r2, #100	@ 0x64
 800abe6:	fb02 f303 	mul.w	r3, r2, r3
 800abea:	1acb      	subs	r3, r1, r3
 800abec:	00db      	lsls	r3, r3, #3
 800abee:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800abf2:	4b36      	ldr	r3, [pc, #216]	@ (800accc <UART_SetConfig+0x2d4>)
 800abf4:	fba3 2302 	umull	r2, r3, r3, r2
 800abf8:	095b      	lsrs	r3, r3, #5
 800abfa:	005b      	lsls	r3, r3, #1
 800abfc:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800ac00:	441c      	add	r4, r3
 800ac02:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800ac06:	2200      	movs	r2, #0
 800ac08:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800ac0c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800ac10:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800ac14:	4642      	mov	r2, r8
 800ac16:	464b      	mov	r3, r9
 800ac18:	1891      	adds	r1, r2, r2
 800ac1a:	63b9      	str	r1, [r7, #56]	@ 0x38
 800ac1c:	415b      	adcs	r3, r3
 800ac1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ac20:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800ac24:	4641      	mov	r1, r8
 800ac26:	1851      	adds	r1, r2, r1
 800ac28:	6339      	str	r1, [r7, #48]	@ 0x30
 800ac2a:	4649      	mov	r1, r9
 800ac2c:	414b      	adcs	r3, r1
 800ac2e:	637b      	str	r3, [r7, #52]	@ 0x34
 800ac30:	f04f 0200 	mov.w	r2, #0
 800ac34:	f04f 0300 	mov.w	r3, #0
 800ac38:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800ac3c:	4659      	mov	r1, fp
 800ac3e:	00cb      	lsls	r3, r1, #3
 800ac40:	4651      	mov	r1, sl
 800ac42:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800ac46:	4651      	mov	r1, sl
 800ac48:	00ca      	lsls	r2, r1, #3
 800ac4a:	4610      	mov	r0, r2
 800ac4c:	4619      	mov	r1, r3
 800ac4e:	4603      	mov	r3, r0
 800ac50:	4642      	mov	r2, r8
 800ac52:	189b      	adds	r3, r3, r2
 800ac54:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800ac58:	464b      	mov	r3, r9
 800ac5a:	460a      	mov	r2, r1
 800ac5c:	eb42 0303 	adc.w	r3, r2, r3
 800ac60:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800ac64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ac68:	685b      	ldr	r3, [r3, #4]
 800ac6a:	2200      	movs	r2, #0
 800ac6c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800ac70:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800ac74:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800ac78:	460b      	mov	r3, r1
 800ac7a:	18db      	adds	r3, r3, r3
 800ac7c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800ac7e:	4613      	mov	r3, r2
 800ac80:	eb42 0303 	adc.w	r3, r2, r3
 800ac84:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800ac86:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800ac8a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800ac8e:	f7f6 f803 	bl	8000c98 <__aeabi_uldivmod>
 800ac92:	4602      	mov	r2, r0
 800ac94:	460b      	mov	r3, r1
 800ac96:	4b0d      	ldr	r3, [pc, #52]	@ (800accc <UART_SetConfig+0x2d4>)
 800ac98:	fba3 1302 	umull	r1, r3, r3, r2
 800ac9c:	095b      	lsrs	r3, r3, #5
 800ac9e:	2164      	movs	r1, #100	@ 0x64
 800aca0:	fb01 f303 	mul.w	r3, r1, r3
 800aca4:	1ad3      	subs	r3, r2, r3
 800aca6:	00db      	lsls	r3, r3, #3
 800aca8:	3332      	adds	r3, #50	@ 0x32
 800acaa:	4a08      	ldr	r2, [pc, #32]	@ (800accc <UART_SetConfig+0x2d4>)
 800acac:	fba2 2303 	umull	r2, r3, r2, r3
 800acb0:	095b      	lsrs	r3, r3, #5
 800acb2:	f003 0207 	and.w	r2, r3, #7
 800acb6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800acba:	681b      	ldr	r3, [r3, #0]
 800acbc:	4422      	add	r2, r4
 800acbe:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800acc0:	e106      	b.n	800aed0 <UART_SetConfig+0x4d8>
 800acc2:	bf00      	nop
 800acc4:	40011000 	.word	0x40011000
 800acc8:	40011400 	.word	0x40011400
 800accc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800acd0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800acd4:	2200      	movs	r2, #0
 800acd6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800acda:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800acde:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800ace2:	4642      	mov	r2, r8
 800ace4:	464b      	mov	r3, r9
 800ace6:	1891      	adds	r1, r2, r2
 800ace8:	6239      	str	r1, [r7, #32]
 800acea:	415b      	adcs	r3, r3
 800acec:	627b      	str	r3, [r7, #36]	@ 0x24
 800acee:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800acf2:	4641      	mov	r1, r8
 800acf4:	1854      	adds	r4, r2, r1
 800acf6:	4649      	mov	r1, r9
 800acf8:	eb43 0501 	adc.w	r5, r3, r1
 800acfc:	f04f 0200 	mov.w	r2, #0
 800ad00:	f04f 0300 	mov.w	r3, #0
 800ad04:	00eb      	lsls	r3, r5, #3
 800ad06:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800ad0a:	00e2      	lsls	r2, r4, #3
 800ad0c:	4614      	mov	r4, r2
 800ad0e:	461d      	mov	r5, r3
 800ad10:	4643      	mov	r3, r8
 800ad12:	18e3      	adds	r3, r4, r3
 800ad14:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800ad18:	464b      	mov	r3, r9
 800ad1a:	eb45 0303 	adc.w	r3, r5, r3
 800ad1e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800ad22:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ad26:	685b      	ldr	r3, [r3, #4]
 800ad28:	2200      	movs	r2, #0
 800ad2a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800ad2e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800ad32:	f04f 0200 	mov.w	r2, #0
 800ad36:	f04f 0300 	mov.w	r3, #0
 800ad3a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800ad3e:	4629      	mov	r1, r5
 800ad40:	008b      	lsls	r3, r1, #2
 800ad42:	4621      	mov	r1, r4
 800ad44:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800ad48:	4621      	mov	r1, r4
 800ad4a:	008a      	lsls	r2, r1, #2
 800ad4c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800ad50:	f7f5 ffa2 	bl	8000c98 <__aeabi_uldivmod>
 800ad54:	4602      	mov	r2, r0
 800ad56:	460b      	mov	r3, r1
 800ad58:	4b60      	ldr	r3, [pc, #384]	@ (800aedc <UART_SetConfig+0x4e4>)
 800ad5a:	fba3 2302 	umull	r2, r3, r3, r2
 800ad5e:	095b      	lsrs	r3, r3, #5
 800ad60:	011c      	lsls	r4, r3, #4
 800ad62:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800ad66:	2200      	movs	r2, #0
 800ad68:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800ad6c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800ad70:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800ad74:	4642      	mov	r2, r8
 800ad76:	464b      	mov	r3, r9
 800ad78:	1891      	adds	r1, r2, r2
 800ad7a:	61b9      	str	r1, [r7, #24]
 800ad7c:	415b      	adcs	r3, r3
 800ad7e:	61fb      	str	r3, [r7, #28]
 800ad80:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800ad84:	4641      	mov	r1, r8
 800ad86:	1851      	adds	r1, r2, r1
 800ad88:	6139      	str	r1, [r7, #16]
 800ad8a:	4649      	mov	r1, r9
 800ad8c:	414b      	adcs	r3, r1
 800ad8e:	617b      	str	r3, [r7, #20]
 800ad90:	f04f 0200 	mov.w	r2, #0
 800ad94:	f04f 0300 	mov.w	r3, #0
 800ad98:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800ad9c:	4659      	mov	r1, fp
 800ad9e:	00cb      	lsls	r3, r1, #3
 800ada0:	4651      	mov	r1, sl
 800ada2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800ada6:	4651      	mov	r1, sl
 800ada8:	00ca      	lsls	r2, r1, #3
 800adaa:	4610      	mov	r0, r2
 800adac:	4619      	mov	r1, r3
 800adae:	4603      	mov	r3, r0
 800adb0:	4642      	mov	r2, r8
 800adb2:	189b      	adds	r3, r3, r2
 800adb4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800adb8:	464b      	mov	r3, r9
 800adba:	460a      	mov	r2, r1
 800adbc:	eb42 0303 	adc.w	r3, r2, r3
 800adc0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800adc4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800adc8:	685b      	ldr	r3, [r3, #4]
 800adca:	2200      	movs	r2, #0
 800adcc:	67bb      	str	r3, [r7, #120]	@ 0x78
 800adce:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800add0:	f04f 0200 	mov.w	r2, #0
 800add4:	f04f 0300 	mov.w	r3, #0
 800add8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800addc:	4649      	mov	r1, r9
 800adde:	008b      	lsls	r3, r1, #2
 800ade0:	4641      	mov	r1, r8
 800ade2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800ade6:	4641      	mov	r1, r8
 800ade8:	008a      	lsls	r2, r1, #2
 800adea:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800adee:	f7f5 ff53 	bl	8000c98 <__aeabi_uldivmod>
 800adf2:	4602      	mov	r2, r0
 800adf4:	460b      	mov	r3, r1
 800adf6:	4611      	mov	r1, r2
 800adf8:	4b38      	ldr	r3, [pc, #224]	@ (800aedc <UART_SetConfig+0x4e4>)
 800adfa:	fba3 2301 	umull	r2, r3, r3, r1
 800adfe:	095b      	lsrs	r3, r3, #5
 800ae00:	2264      	movs	r2, #100	@ 0x64
 800ae02:	fb02 f303 	mul.w	r3, r2, r3
 800ae06:	1acb      	subs	r3, r1, r3
 800ae08:	011b      	lsls	r3, r3, #4
 800ae0a:	3332      	adds	r3, #50	@ 0x32
 800ae0c:	4a33      	ldr	r2, [pc, #204]	@ (800aedc <UART_SetConfig+0x4e4>)
 800ae0e:	fba2 2303 	umull	r2, r3, r2, r3
 800ae12:	095b      	lsrs	r3, r3, #5
 800ae14:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800ae18:	441c      	add	r4, r3
 800ae1a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800ae1e:	2200      	movs	r2, #0
 800ae20:	673b      	str	r3, [r7, #112]	@ 0x70
 800ae22:	677a      	str	r2, [r7, #116]	@ 0x74
 800ae24:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800ae28:	4642      	mov	r2, r8
 800ae2a:	464b      	mov	r3, r9
 800ae2c:	1891      	adds	r1, r2, r2
 800ae2e:	60b9      	str	r1, [r7, #8]
 800ae30:	415b      	adcs	r3, r3
 800ae32:	60fb      	str	r3, [r7, #12]
 800ae34:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800ae38:	4641      	mov	r1, r8
 800ae3a:	1851      	adds	r1, r2, r1
 800ae3c:	6039      	str	r1, [r7, #0]
 800ae3e:	4649      	mov	r1, r9
 800ae40:	414b      	adcs	r3, r1
 800ae42:	607b      	str	r3, [r7, #4]
 800ae44:	f04f 0200 	mov.w	r2, #0
 800ae48:	f04f 0300 	mov.w	r3, #0
 800ae4c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800ae50:	4659      	mov	r1, fp
 800ae52:	00cb      	lsls	r3, r1, #3
 800ae54:	4651      	mov	r1, sl
 800ae56:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800ae5a:	4651      	mov	r1, sl
 800ae5c:	00ca      	lsls	r2, r1, #3
 800ae5e:	4610      	mov	r0, r2
 800ae60:	4619      	mov	r1, r3
 800ae62:	4603      	mov	r3, r0
 800ae64:	4642      	mov	r2, r8
 800ae66:	189b      	adds	r3, r3, r2
 800ae68:	66bb      	str	r3, [r7, #104]	@ 0x68
 800ae6a:	464b      	mov	r3, r9
 800ae6c:	460a      	mov	r2, r1
 800ae6e:	eb42 0303 	adc.w	r3, r2, r3
 800ae72:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800ae74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ae78:	685b      	ldr	r3, [r3, #4]
 800ae7a:	2200      	movs	r2, #0
 800ae7c:	663b      	str	r3, [r7, #96]	@ 0x60
 800ae7e:	667a      	str	r2, [r7, #100]	@ 0x64
 800ae80:	f04f 0200 	mov.w	r2, #0
 800ae84:	f04f 0300 	mov.w	r3, #0
 800ae88:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800ae8c:	4649      	mov	r1, r9
 800ae8e:	008b      	lsls	r3, r1, #2
 800ae90:	4641      	mov	r1, r8
 800ae92:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800ae96:	4641      	mov	r1, r8
 800ae98:	008a      	lsls	r2, r1, #2
 800ae9a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800ae9e:	f7f5 fefb 	bl	8000c98 <__aeabi_uldivmod>
 800aea2:	4602      	mov	r2, r0
 800aea4:	460b      	mov	r3, r1
 800aea6:	4b0d      	ldr	r3, [pc, #52]	@ (800aedc <UART_SetConfig+0x4e4>)
 800aea8:	fba3 1302 	umull	r1, r3, r3, r2
 800aeac:	095b      	lsrs	r3, r3, #5
 800aeae:	2164      	movs	r1, #100	@ 0x64
 800aeb0:	fb01 f303 	mul.w	r3, r1, r3
 800aeb4:	1ad3      	subs	r3, r2, r3
 800aeb6:	011b      	lsls	r3, r3, #4
 800aeb8:	3332      	adds	r3, #50	@ 0x32
 800aeba:	4a08      	ldr	r2, [pc, #32]	@ (800aedc <UART_SetConfig+0x4e4>)
 800aebc:	fba2 2303 	umull	r2, r3, r2, r3
 800aec0:	095b      	lsrs	r3, r3, #5
 800aec2:	f003 020f 	and.w	r2, r3, #15
 800aec6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800aeca:	681b      	ldr	r3, [r3, #0]
 800aecc:	4422      	add	r2, r4
 800aece:	609a      	str	r2, [r3, #8]
}
 800aed0:	bf00      	nop
 800aed2:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800aed6:	46bd      	mov	sp, r7
 800aed8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800aedc:	51eb851f 	.word	0x51eb851f

0800aee0 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800aee0:	b580      	push	{r7, lr}
 800aee2:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 800aee4:	4904      	ldr	r1, [pc, #16]	@ (800aef8 <MX_FATFS_Init+0x18>)
 800aee6:	4805      	ldr	r0, [pc, #20]	@ (800aefc <MX_FATFS_Init+0x1c>)
 800aee8:	f000 fd96 	bl	800ba18 <FATFS_LinkDriver>
 800aeec:	4603      	mov	r3, r0
 800aeee:	461a      	mov	r2, r3
 800aef0:	4b03      	ldr	r3, [pc, #12]	@ (800af00 <MX_FATFS_Init+0x20>)
 800aef2:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800aef4:	bf00      	nop
 800aef6:	bd80      	pop	{r7, pc}
 800aef8:	200140c0 	.word	0x200140c0
 800aefc:	2000d120 	.word	0x2000d120
 800af00:	200140bc 	.word	0x200140bc

0800af04 <SELECT>:
 * SPI functions
 **************************************/

/* slave select */
static void SELECT(void)
{
 800af04:	b580      	push	{r7, lr}
 800af06:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_RESET);
 800af08:	2200      	movs	r2, #0
 800af0a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800af0e:	4804      	ldr	r0, [pc, #16]	@ (800af20 <SELECT+0x1c>)
 800af10:	f7fb fe6c 	bl	8006bec <HAL_GPIO_WritePin>
    HAL_Delay(1);
 800af14:	2001      	movs	r0, #1
 800af16:	f7fa fb23 	bl	8005560 <HAL_Delay>
}
 800af1a:	bf00      	nop
 800af1c:	bd80      	pop	{r7, pc}
 800af1e:	bf00      	nop
 800af20:	40020400 	.word	0x40020400

0800af24 <DESELECT>:

/* slave deselect */
static void DESELECT(void)
{
 800af24:	b580      	push	{r7, lr}
 800af26:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_SET);
 800af28:	2201      	movs	r2, #1
 800af2a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800af2e:	4804      	ldr	r0, [pc, #16]	@ (800af40 <DESELECT+0x1c>)
 800af30:	f7fb fe5c 	bl	8006bec <HAL_GPIO_WritePin>
    HAL_Delay(1);
 800af34:	2001      	movs	r0, #1
 800af36:	f7fa fb13 	bl	8005560 <HAL_Delay>
}
 800af3a:	bf00      	nop
 800af3c:	bd80      	pop	{r7, pc}
 800af3e:	bf00      	nop
 800af40:	40020400 	.word	0x40020400

0800af44 <SPI_TxByte>:

/* SPI transmit a byte */
static void SPI_TxByte(uint8_t data)
{
 800af44:	b580      	push	{r7, lr}
 800af46:	b082      	sub	sp, #8
 800af48:	af00      	add	r7, sp, #0
 800af4a:	4603      	mov	r3, r0
 800af4c:	71fb      	strb	r3, [r7, #7]
    while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 800af4e:	bf00      	nop
 800af50:	4b08      	ldr	r3, [pc, #32]	@ (800af74 <SPI_TxByte+0x30>)
 800af52:	681b      	ldr	r3, [r3, #0]
 800af54:	689b      	ldr	r3, [r3, #8]
 800af56:	f003 0302 	and.w	r3, r3, #2
 800af5a:	2b02      	cmp	r3, #2
 800af5c:	d1f8      	bne.n	800af50 <SPI_TxByte+0xc>
    HAL_SPI_Transmit(HSPI_SDCARD, &data, 1, SPI_TIMEOUT);
 800af5e:	1df9      	adds	r1, r7, #7
 800af60:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800af64:	2201      	movs	r2, #1
 800af66:	4803      	ldr	r0, [pc, #12]	@ (800af74 <SPI_TxByte+0x30>)
 800af68:	f7fd faad 	bl	80084c6 <HAL_SPI_Transmit>
}
 800af6c:	bf00      	nop
 800af6e:	3708      	adds	r7, #8
 800af70:	46bd      	mov	sp, r7
 800af72:	bd80      	pop	{r7, pc}
 800af74:	20013e0c 	.word	0x20013e0c

0800af78 <SPI_TxBuffer>:

/* SPI transmit buffer */
static void SPI_TxBuffer(uint8_t *buffer, uint16_t len)
{
 800af78:	b580      	push	{r7, lr}
 800af7a:	b082      	sub	sp, #8
 800af7c:	af00      	add	r7, sp, #0
 800af7e:	6078      	str	r0, [r7, #4]
 800af80:	460b      	mov	r3, r1
 800af82:	807b      	strh	r3, [r7, #2]
    while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 800af84:	bf00      	nop
 800af86:	4b09      	ldr	r3, [pc, #36]	@ (800afac <SPI_TxBuffer+0x34>)
 800af88:	681b      	ldr	r3, [r3, #0]
 800af8a:	689b      	ldr	r3, [r3, #8]
 800af8c:	f003 0302 	and.w	r3, r3, #2
 800af90:	2b02      	cmp	r3, #2
 800af92:	d1f8      	bne.n	800af86 <SPI_TxBuffer+0xe>
    HAL_SPI_Transmit(HSPI_SDCARD, buffer, len, SPI_TIMEOUT);
 800af94:	887a      	ldrh	r2, [r7, #2]
 800af96:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800af9a:	6879      	ldr	r1, [r7, #4]
 800af9c:	4803      	ldr	r0, [pc, #12]	@ (800afac <SPI_TxBuffer+0x34>)
 800af9e:	f7fd fa92 	bl	80084c6 <HAL_SPI_Transmit>
}
 800afa2:	bf00      	nop
 800afa4:	3708      	adds	r7, #8
 800afa6:	46bd      	mov	sp, r7
 800afa8:	bd80      	pop	{r7, pc}
 800afaa:	bf00      	nop
 800afac:	20013e0c 	.word	0x20013e0c

0800afb0 <SPI_RxByte>:

/* SPI receive a byte */
static uint8_t SPI_RxByte(void)
{
 800afb0:	b580      	push	{r7, lr}
 800afb2:	b084      	sub	sp, #16
 800afb4:	af02      	add	r7, sp, #8
    uint8_t dummy, data;
    dummy = 0xFF;
 800afb6:	23ff      	movs	r3, #255	@ 0xff
 800afb8:	71fb      	strb	r3, [r7, #7]

    while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 800afba:	bf00      	nop
 800afbc:	4b0a      	ldr	r3, [pc, #40]	@ (800afe8 <SPI_RxByte+0x38>)
 800afbe:	681b      	ldr	r3, [r3, #0]
 800afc0:	689b      	ldr	r3, [r3, #8]
 800afc2:	f003 0302 	and.w	r3, r3, #2
 800afc6:	2b02      	cmp	r3, #2
 800afc8:	d1f8      	bne.n	800afbc <SPI_RxByte+0xc>
    HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 800afca:	1dba      	adds	r2, r7, #6
 800afcc:	1df9      	adds	r1, r7, #7
 800afce:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800afd2:	9300      	str	r3, [sp, #0]
 800afd4:	2301      	movs	r3, #1
 800afd6:	4804      	ldr	r0, [pc, #16]	@ (800afe8 <SPI_RxByte+0x38>)
 800afd8:	f7fd fbb9 	bl	800874e <HAL_SPI_TransmitReceive>

    return data;
 800afdc:	79bb      	ldrb	r3, [r7, #6]
}
 800afde:	4618      	mov	r0, r3
 800afe0:	3708      	adds	r7, #8
 800afe2:	46bd      	mov	sp, r7
 800afe4:	bd80      	pop	{r7, pc}
 800afe6:	bf00      	nop
 800afe8:	20013e0c 	.word	0x20013e0c

0800afec <SPI_RxBytePtr>:

/* SPI receive a byte via pointer */
static void SPI_RxBytePtr(uint8_t *buff) 
{
 800afec:	b580      	push	{r7, lr}
 800afee:	b082      	sub	sp, #8
 800aff0:	af00      	add	r7, sp, #0
 800aff2:	6078      	str	r0, [r7, #4]
    *buff = SPI_RxByte();
 800aff4:	f7ff ffdc 	bl	800afb0 <SPI_RxByte>
 800aff8:	4603      	mov	r3, r0
 800affa:	461a      	mov	r2, r3
 800affc:	687b      	ldr	r3, [r7, #4]
 800affe:	701a      	strb	r2, [r3, #0]
}
 800b000:	bf00      	nop
 800b002:	3708      	adds	r7, #8
 800b004:	46bd      	mov	sp, r7
 800b006:	bd80      	pop	{r7, pc}

0800b008 <SD_ReadyWait>:
 * SD functions
 **************************************/

/* wait SD ready */
static uint8_t SD_ReadyWait(void)
{
 800b008:	b580      	push	{r7, lr}
 800b00a:	b082      	sub	sp, #8
 800b00c:	af00      	add	r7, sp, #0
    uint8_t res;

    /* timeout 500ms */
    Timer2 = 500;
 800b00e:	4b0a      	ldr	r3, [pc, #40]	@ (800b038 <SD_ReadyWait+0x30>)
 800b010:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 800b014:	801a      	strh	r2, [r3, #0]

    /* if SD goes ready, receives 0xFF */
    do {
        res = SPI_RxByte();
 800b016:	f7ff ffcb 	bl	800afb0 <SPI_RxByte>
 800b01a:	4603      	mov	r3, r0
 800b01c:	71fb      	strb	r3, [r7, #7]
    } while ((res != 0xFF) && Timer2);
 800b01e:	79fb      	ldrb	r3, [r7, #7]
 800b020:	2bff      	cmp	r3, #255	@ 0xff
 800b022:	d004      	beq.n	800b02e <SD_ReadyWait+0x26>
 800b024:	4b04      	ldr	r3, [pc, #16]	@ (800b038 <SD_ReadyWait+0x30>)
 800b026:	881b      	ldrh	r3, [r3, #0]
 800b028:	b29b      	uxth	r3, r3
 800b02a:	2b00      	cmp	r3, #0
 800b02c:	d1f3      	bne.n	800b016 <SD_ReadyWait+0xe>

    return res;
 800b02e:	79fb      	ldrb	r3, [r7, #7]
}
 800b030:	4618      	mov	r0, r3
 800b032:	3708      	adds	r7, #8
 800b034:	46bd      	mov	sp, r7
 800b036:	bd80      	pop	{r7, pc}
 800b038:	200140c6 	.word	0x200140c6

0800b03c <SD_PowerOn>:

/* power on */
static void SD_PowerOn(void) 
{
 800b03c:	b580      	push	{r7, lr}
 800b03e:	b084      	sub	sp, #16
 800b040:	af00      	add	r7, sp, #0
    uint8_t args[6];
    uint32_t cnt = 0x1FFF;
 800b042:	f641 73ff 	movw	r3, #8191	@ 0x1fff
 800b046:	60fb      	str	r3, [r7, #12]

    /* transmit bytes to wake up */
    DESELECT();
 800b048:	f7ff ff6c 	bl	800af24 <DESELECT>
    for(int i = 0; i < 10; i++)
 800b04c:	2300      	movs	r3, #0
 800b04e:	60bb      	str	r3, [r7, #8]
 800b050:	e005      	b.n	800b05e <SD_PowerOn+0x22>
    {
        SPI_TxByte(0xFF);
 800b052:	20ff      	movs	r0, #255	@ 0xff
 800b054:	f7ff ff76 	bl	800af44 <SPI_TxByte>
    for(int i = 0; i < 10; i++)
 800b058:	68bb      	ldr	r3, [r7, #8]
 800b05a:	3301      	adds	r3, #1
 800b05c:	60bb      	str	r3, [r7, #8]
 800b05e:	68bb      	ldr	r3, [r7, #8]
 800b060:	2b09      	cmp	r3, #9
 800b062:	ddf6      	ble.n	800b052 <SD_PowerOn+0x16>
    }

    /* slave select */
    SELECT();
 800b064:	f7ff ff4e 	bl	800af04 <SELECT>

    /* make idle state */
    args[0] = CMD0;     /* CMD0:GO_IDLE_STATE */
 800b068:	2340      	movs	r3, #64	@ 0x40
 800b06a:	703b      	strb	r3, [r7, #0]
    args[1] = 0;
 800b06c:	2300      	movs	r3, #0
 800b06e:	707b      	strb	r3, [r7, #1]
    args[2] = 0;
 800b070:	2300      	movs	r3, #0
 800b072:	70bb      	strb	r3, [r7, #2]
    args[3] = 0;
 800b074:	2300      	movs	r3, #0
 800b076:	70fb      	strb	r3, [r7, #3]
    args[4] = 0;
 800b078:	2300      	movs	r3, #0
 800b07a:	713b      	strb	r3, [r7, #4]
    args[5] = 0x95;     /* CRC */
 800b07c:	2395      	movs	r3, #149	@ 0x95
 800b07e:	717b      	strb	r3, [r7, #5]

    SPI_TxBuffer(args, sizeof(args));
 800b080:	463b      	mov	r3, r7
 800b082:	2106      	movs	r1, #6
 800b084:	4618      	mov	r0, r3
 800b086:	f7ff ff77 	bl	800af78 <SPI_TxBuffer>

    /* wait response */
    while ((SPI_RxByte() != 0x01) && cnt)
 800b08a:	e002      	b.n	800b092 <SD_PowerOn+0x56>
    {
        cnt--;
 800b08c:	68fb      	ldr	r3, [r7, #12]
 800b08e:	3b01      	subs	r3, #1
 800b090:	60fb      	str	r3, [r7, #12]
    while ((SPI_RxByte() != 0x01) && cnt)
 800b092:	f7ff ff8d 	bl	800afb0 <SPI_RxByte>
 800b096:	4603      	mov	r3, r0
 800b098:	2b01      	cmp	r3, #1
 800b09a:	d002      	beq.n	800b0a2 <SD_PowerOn+0x66>
 800b09c:	68fb      	ldr	r3, [r7, #12]
 800b09e:	2b00      	cmp	r3, #0
 800b0a0:	d1f4      	bne.n	800b08c <SD_PowerOn+0x50>
    }

    DESELECT();
 800b0a2:	f7ff ff3f 	bl	800af24 <DESELECT>
    SPI_TxByte(0XFF);
 800b0a6:	20ff      	movs	r0, #255	@ 0xff
 800b0a8:	f7ff ff4c 	bl	800af44 <SPI_TxByte>

    PowerFlag = 1;
 800b0ac:	4b03      	ldr	r3, [pc, #12]	@ (800b0bc <SD_PowerOn+0x80>)
 800b0ae:	2201      	movs	r2, #1
 800b0b0:	701a      	strb	r2, [r3, #0]
}
 800b0b2:	bf00      	nop
 800b0b4:	3710      	adds	r7, #16
 800b0b6:	46bd      	mov	sp, r7
 800b0b8:	bd80      	pop	{r7, pc}
 800b0ba:	bf00      	nop
 800b0bc:	200140c9 	.word	0x200140c9

0800b0c0 <SD_PowerOff>:

/* power off */
static void SD_PowerOff(void) 
{
 800b0c0:	b480      	push	{r7}
 800b0c2:	af00      	add	r7, sp, #0
    PowerFlag = 0;
 800b0c4:	4b03      	ldr	r3, [pc, #12]	@ (800b0d4 <SD_PowerOff+0x14>)
 800b0c6:	2200      	movs	r2, #0
 800b0c8:	701a      	strb	r2, [r3, #0]
}
 800b0ca:	bf00      	nop
 800b0cc:	46bd      	mov	sp, r7
 800b0ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0d2:	4770      	bx	lr
 800b0d4:	200140c9 	.word	0x200140c9

0800b0d8 <SD_CheckPower>:

/* check power flag */
static uint8_t SD_CheckPower(void) 
{
 800b0d8:	b480      	push	{r7}
 800b0da:	af00      	add	r7, sp, #0
    return PowerFlag;
 800b0dc:	4b03      	ldr	r3, [pc, #12]	@ (800b0ec <SD_CheckPower+0x14>)
 800b0de:	781b      	ldrb	r3, [r3, #0]
}
 800b0e0:	4618      	mov	r0, r3
 800b0e2:	46bd      	mov	sp, r7
 800b0e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0e8:	4770      	bx	lr
 800b0ea:	bf00      	nop
 800b0ec:	200140c9 	.word	0x200140c9

0800b0f0 <SD_RxDataBlock>:

/* receive data block */
static bool SD_RxDataBlock(BYTE *buff, UINT len)
{
 800b0f0:	b580      	push	{r7, lr}
 800b0f2:	b084      	sub	sp, #16
 800b0f4:	af00      	add	r7, sp, #0
 800b0f6:	6078      	str	r0, [r7, #4]
 800b0f8:	6039      	str	r1, [r7, #0]
    uint8_t token;

    /* timeout 200ms */
    Timer1 = 200;
 800b0fa:	4b14      	ldr	r3, [pc, #80]	@ (800b14c <SD_RxDataBlock+0x5c>)
 800b0fc:	22c8      	movs	r2, #200	@ 0xc8
 800b0fe:	801a      	strh	r2, [r3, #0]

    /* loop until receive a response or timeout */
    do {
        token = SPI_RxByte();
 800b100:	f7ff ff56 	bl	800afb0 <SPI_RxByte>
 800b104:	4603      	mov	r3, r0
 800b106:	73fb      	strb	r3, [r7, #15]
    } while((token == 0xFF) && Timer1);
 800b108:	7bfb      	ldrb	r3, [r7, #15]
 800b10a:	2bff      	cmp	r3, #255	@ 0xff
 800b10c:	d104      	bne.n	800b118 <SD_RxDataBlock+0x28>
 800b10e:	4b0f      	ldr	r3, [pc, #60]	@ (800b14c <SD_RxDataBlock+0x5c>)
 800b110:	881b      	ldrh	r3, [r3, #0]
 800b112:	b29b      	uxth	r3, r3
 800b114:	2b00      	cmp	r3, #0
 800b116:	d1f3      	bne.n	800b100 <SD_RxDataBlock+0x10>

    /* invalid response */
    if(token != 0xFE) return FALSE;
 800b118:	7bfb      	ldrb	r3, [r7, #15]
 800b11a:	2bfe      	cmp	r3, #254	@ 0xfe
 800b11c:	d007      	beq.n	800b12e <SD_RxDataBlock+0x3e>
 800b11e:	2300      	movs	r3, #0
 800b120:	e00f      	b.n	800b142 <SD_RxDataBlock+0x52>
    /* receive data */
    // FIX 2: do-while(len--) 루프 수정
    // 기존 코드는 len+1 만큼 실행되어 버퍼 오버플로우를 유발할 수 있습니다.
    // while(len--) 형태로 변경하여 정확히 len 만큼만 실행되도록 합니다.
    while(len--) {
        SPI_RxBytePtr(buff++);
 800b122:	687b      	ldr	r3, [r7, #4]
 800b124:	1c5a      	adds	r2, r3, #1
 800b126:	607a      	str	r2, [r7, #4]
 800b128:	4618      	mov	r0, r3
 800b12a:	f7ff ff5f 	bl	800afec <SPI_RxBytePtr>
    while(len--) {
 800b12e:	683b      	ldr	r3, [r7, #0]
 800b130:	1e5a      	subs	r2, r3, #1
 800b132:	603a      	str	r2, [r7, #0]
 800b134:	2b00      	cmp	r3, #0
 800b136:	d1f4      	bne.n	800b122 <SD_RxDataBlock+0x32>
    }

    /* discard CRC */
    SPI_RxByte();
 800b138:	f7ff ff3a 	bl	800afb0 <SPI_RxByte>
    SPI_RxByte();
 800b13c:	f7ff ff38 	bl	800afb0 <SPI_RxByte>

    return TRUE;
 800b140:	2301      	movs	r3, #1
}
 800b142:	4618      	mov	r0, r3
 800b144:	3710      	adds	r7, #16
 800b146:	46bd      	mov	sp, r7
 800b148:	bd80      	pop	{r7, pc}
 800b14a:	bf00      	nop
 800b14c:	200140c4 	.word	0x200140c4

0800b150 <SD_TxDataBlock>:

/* transmit data block */
#if _USE_WRITE == 1
static bool SD_TxDataBlock(const uint8_t *buff, BYTE token)
{
 800b150:	b580      	push	{r7, lr}
 800b152:	b084      	sub	sp, #16
 800b154:	af00      	add	r7, sp, #0
 800b156:	6078      	str	r0, [r7, #4]
 800b158:	460b      	mov	r3, r1
 800b15a:	70fb      	strb	r3, [r7, #3]
    uint8_t resp = 0xFF; // 초기화
 800b15c:	23ff      	movs	r3, #255	@ 0xff
 800b15e:	73fb      	strb	r3, [r7, #15]
    uint8_t i = 0;
 800b160:	2300      	movs	r3, #0
 800b162:	73bb      	strb	r3, [r7, #14]

    /* wait SD ready */
    if (SD_ReadyWait() != 0xFF) return FALSE;
 800b164:	f7ff ff50 	bl	800b008 <SD_ReadyWait>
 800b168:	4603      	mov	r3, r0
 800b16a:	2bff      	cmp	r3, #255	@ 0xff
 800b16c:	d001      	beq.n	800b172 <SD_TxDataBlock+0x22>
 800b16e:	2300      	movs	r3, #0
 800b170:	e037      	b.n	800b1e2 <SD_TxDataBlock+0x92>

    /* transmit token */
    SPI_TxByte(token);
 800b172:	78fb      	ldrb	r3, [r7, #3]
 800b174:	4618      	mov	r0, r3
 800b176:	f7ff fee5 	bl	800af44 <SPI_TxByte>

    /* if it's not STOP token, transmit data */
    if (token != 0xFD)
 800b17a:	78fb      	ldrb	r3, [r7, #3]
 800b17c:	2bfd      	cmp	r3, #253	@ 0xfd
 800b17e:	d028      	beq.n	800b1d2 <SD_TxDataBlock+0x82>
    {
        SPI_TxBuffer((uint8_t*)buff, 512);
 800b180:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800b184:	6878      	ldr	r0, [r7, #4]
 800b186:	f7ff fef7 	bl	800af78 <SPI_TxBuffer>

        /* discard CRC */
        SPI_RxByte();
 800b18a:	f7ff ff11 	bl	800afb0 <SPI_RxByte>
        SPI_RxByte();
 800b18e:	f7ff ff0f 	bl	800afb0 <SPI_RxByte>

        /* receive response */
        while (i <= 64)
 800b192:	e00b      	b.n	800b1ac <SD_TxDataBlock+0x5c>
        {
            resp = SPI_RxByte();
 800b194:	f7ff ff0c 	bl	800afb0 <SPI_RxByte>
 800b198:	4603      	mov	r3, r0
 800b19a:	73fb      	strb	r3, [r7, #15]

            /* transmit 0x05 accepted */
            if ((resp & 0x1F) == 0x05) break;
 800b19c:	7bfb      	ldrb	r3, [r7, #15]
 800b19e:	f003 031f 	and.w	r3, r3, #31
 800b1a2:	2b05      	cmp	r3, #5
 800b1a4:	d006      	beq.n	800b1b4 <SD_TxDataBlock+0x64>
            i++;
 800b1a6:	7bbb      	ldrb	r3, [r7, #14]
 800b1a8:	3301      	adds	r3, #1
 800b1aa:	73bb      	strb	r3, [r7, #14]
        while (i <= 64)
 800b1ac:	7bbb      	ldrb	r3, [r7, #14]
 800b1ae:	2b40      	cmp	r3, #64	@ 0x40
 800b1b0:	d9f0      	bls.n	800b194 <SD_TxDataBlock+0x44>
 800b1b2:	e000      	b.n	800b1b6 <SD_TxDataBlock+0x66>
            if ((resp & 0x1F) == 0x05) break;
 800b1b4:	bf00      	nop
        }

        // FIX 3: 타임아웃 없는 무한 루프 수정
        // 카드가 계속 busy(0x00) 상태일 경우 시스템이 멈추는 것을 방지하기 위해 타임아웃을 추가합니다.
        Timer1 = 200; // 200ms 타임아웃
 800b1b6:	4b0d      	ldr	r3, [pc, #52]	@ (800b1ec <SD_TxDataBlock+0x9c>)
 800b1b8:	22c8      	movs	r2, #200	@ 0xc8
 800b1ba:	801a      	strh	r2, [r3, #0]
        while ((SPI_RxByte() == 0) && Timer1);
 800b1bc:	bf00      	nop
 800b1be:	f7ff fef7 	bl	800afb0 <SPI_RxByte>
 800b1c2:	4603      	mov	r3, r0
 800b1c4:	2b00      	cmp	r3, #0
 800b1c6:	d104      	bne.n	800b1d2 <SD_TxDataBlock+0x82>
 800b1c8:	4b08      	ldr	r3, [pc, #32]	@ (800b1ec <SD_TxDataBlock+0x9c>)
 800b1ca:	881b      	ldrh	r3, [r3, #0]
 800b1cc:	b29b      	uxth	r3, r3
 800b1ce:	2b00      	cmp	r3, #0
 800b1d0:	d1f5      	bne.n	800b1be <SD_TxDataBlock+0x6e>
    }
    
    // resp가 초기화되지 않은 상태로 사용될 수 있어 수정
    if ((resp & 0x1F) == 0x05) return TRUE;
 800b1d2:	7bfb      	ldrb	r3, [r7, #15]
 800b1d4:	f003 031f 	and.w	r3, r3, #31
 800b1d8:	2b05      	cmp	r3, #5
 800b1da:	d101      	bne.n	800b1e0 <SD_TxDataBlock+0x90>
 800b1dc:	2301      	movs	r3, #1
 800b1de:	e000      	b.n	800b1e2 <SD_TxDataBlock+0x92>

    return FALSE;
 800b1e0:	2300      	movs	r3, #0
}
 800b1e2:	4618      	mov	r0, r3
 800b1e4:	3710      	adds	r7, #16
 800b1e6:	46bd      	mov	sp, r7
 800b1e8:	bd80      	pop	{r7, pc}
 800b1ea:	bf00      	nop
 800b1ec:	200140c4 	.word	0x200140c4

0800b1f0 <SD_SendCmd>:
#endif /* _USE_WRITE */

/* transmit command */
static BYTE SD_SendCmd(BYTE cmd, uint32_t arg)
{
 800b1f0:	b580      	push	{r7, lr}
 800b1f2:	b084      	sub	sp, #16
 800b1f4:	af00      	add	r7, sp, #0
 800b1f6:	4603      	mov	r3, r0
 800b1f8:	6039      	str	r1, [r7, #0]
 800b1fa:	71fb      	strb	r3, [r7, #7]
    uint8_t crc, res;

    /* wait SD ready */
    if (SD_ReadyWait() != 0xFF) return 0xFF;
 800b1fc:	f7ff ff04 	bl	800b008 <SD_ReadyWait>
 800b200:	4603      	mov	r3, r0
 800b202:	2bff      	cmp	r3, #255	@ 0xff
 800b204:	d001      	beq.n	800b20a <SD_SendCmd+0x1a>
 800b206:	23ff      	movs	r3, #255	@ 0xff
 800b208:	e042      	b.n	800b290 <SD_SendCmd+0xa0>

    /* transmit command */
    SPI_TxByte(cmd);                    /* Command */
 800b20a:	79fb      	ldrb	r3, [r7, #7]
 800b20c:	4618      	mov	r0, r3
 800b20e:	f7ff fe99 	bl	800af44 <SPI_TxByte>
    SPI_TxByte((uint8_t)(arg >> 24));   /* Argument[31..24] */
 800b212:	683b      	ldr	r3, [r7, #0]
 800b214:	0e1b      	lsrs	r3, r3, #24
 800b216:	b2db      	uxtb	r3, r3
 800b218:	4618      	mov	r0, r3
 800b21a:	f7ff fe93 	bl	800af44 <SPI_TxByte>
    SPI_TxByte((uint8_t)(arg >> 16));   /* Argument[23..16] */
 800b21e:	683b      	ldr	r3, [r7, #0]
 800b220:	0c1b      	lsrs	r3, r3, #16
 800b222:	b2db      	uxtb	r3, r3
 800b224:	4618      	mov	r0, r3
 800b226:	f7ff fe8d 	bl	800af44 <SPI_TxByte>
    SPI_TxByte((uint8_t)(arg >> 8));    /* Argument[15..8] */
 800b22a:	683b      	ldr	r3, [r7, #0]
 800b22c:	0a1b      	lsrs	r3, r3, #8
 800b22e:	b2db      	uxtb	r3, r3
 800b230:	4618      	mov	r0, r3
 800b232:	f7ff fe87 	bl	800af44 <SPI_TxByte>
    SPI_TxByte((uint8_t)arg);           /* Argument[7..0] */
 800b236:	683b      	ldr	r3, [r7, #0]
 800b238:	b2db      	uxtb	r3, r3
 800b23a:	4618      	mov	r0, r3
 800b23c:	f7ff fe82 	bl	800af44 <SPI_TxByte>

    /* prepare CRC */
    if(cmd == CMD0) crc = 0x95; /* CRC for CMD0(0) */
 800b240:	79fb      	ldrb	r3, [r7, #7]
 800b242:	2b40      	cmp	r3, #64	@ 0x40
 800b244:	d102      	bne.n	800b24c <SD_SendCmd+0x5c>
 800b246:	2395      	movs	r3, #149	@ 0x95
 800b248:	73fb      	strb	r3, [r7, #15]
 800b24a:	e007      	b.n	800b25c <SD_SendCmd+0x6c>
    else if(cmd == CMD8) crc = 0x87;    /* CRC for CMD8(0x1AA) */
 800b24c:	79fb      	ldrb	r3, [r7, #7]
 800b24e:	2b48      	cmp	r3, #72	@ 0x48
 800b250:	d102      	bne.n	800b258 <SD_SendCmd+0x68>
 800b252:	2387      	movs	r3, #135	@ 0x87
 800b254:	73fb      	strb	r3, [r7, #15]
 800b256:	e001      	b.n	800b25c <SD_SendCmd+0x6c>
    else crc = 1;
 800b258:	2301      	movs	r3, #1
 800b25a:	73fb      	strb	r3, [r7, #15]

    /* transmit CRC */
    SPI_TxByte(crc);
 800b25c:	7bfb      	ldrb	r3, [r7, #15]
 800b25e:	4618      	mov	r0, r3
 800b260:	f7ff fe70 	bl	800af44 <SPI_TxByte>

    /* Skip a stuff byte when STOP_TRANSMISSION */
    if (cmd == CMD12) SPI_RxByte();
 800b264:	79fb      	ldrb	r3, [r7, #7]
 800b266:	2b4c      	cmp	r3, #76	@ 0x4c
 800b268:	d101      	bne.n	800b26e <SD_SendCmd+0x7e>
 800b26a:	f7ff fea1 	bl	800afb0 <SPI_RxByte>

    /* receive response */
    uint8_t n = 10;
 800b26e:	230a      	movs	r3, #10
 800b270:	73bb      	strb	r3, [r7, #14]
    do {
        res = SPI_RxByte();
 800b272:	f7ff fe9d 	bl	800afb0 <SPI_RxByte>
 800b276:	4603      	mov	r3, r0
 800b278:	737b      	strb	r3, [r7, #13]
    } while ((res & 0x80) && --n);
 800b27a:	f997 300d 	ldrsb.w	r3, [r7, #13]
 800b27e:	2b00      	cmp	r3, #0
 800b280:	da05      	bge.n	800b28e <SD_SendCmd+0x9e>
 800b282:	7bbb      	ldrb	r3, [r7, #14]
 800b284:	3b01      	subs	r3, #1
 800b286:	73bb      	strb	r3, [r7, #14]
 800b288:	7bbb      	ldrb	r3, [r7, #14]
 800b28a:	2b00      	cmp	r3, #0
 800b28c:	d1f1      	bne.n	800b272 <SD_SendCmd+0x82>

    return res;
 800b28e:	7b7b      	ldrb	r3, [r7, #13]
}
 800b290:	4618      	mov	r0, r3
 800b292:	3710      	adds	r7, #16
 800b294:	46bd      	mov	sp, r7
 800b296:	bd80      	pop	{r7, pc}

0800b298 <SD_disk_initialize>:
 * user_diskio.c functions
 **************************************/

/* initialize SD */
DSTATUS SD_disk_initialize(BYTE drv) 
{
 800b298:	b590      	push	{r4, r7, lr}
 800b29a:	b085      	sub	sp, #20
 800b29c:	af00      	add	r7, sp, #0
 800b29e:	4603      	mov	r3, r0
 800b2a0:	71fb      	strb	r3, [r7, #7]
    uint8_t n, type, ocr[4];

    /* single drive, drv should be 0 */
    if(drv) return STA_NOINIT;
 800b2a2:	79fb      	ldrb	r3, [r7, #7]
 800b2a4:	2b00      	cmp	r3, #0
 800b2a6:	d001      	beq.n	800b2ac <SD_disk_initialize+0x14>
 800b2a8:	2301      	movs	r3, #1
 800b2aa:	e0d6      	b.n	800b45a <SD_disk_initialize+0x1c2>

    /* no disk */
    if(Stat & STA_NODISK) return Stat;
 800b2ac:	4b6d      	ldr	r3, [pc, #436]	@ (800b464 <SD_disk_initialize+0x1cc>)
 800b2ae:	781b      	ldrb	r3, [r3, #0]
 800b2b0:	b2db      	uxtb	r3, r3
 800b2b2:	f003 0302 	and.w	r3, r3, #2
 800b2b6:	2b00      	cmp	r3, #0
 800b2b8:	d003      	beq.n	800b2c2 <SD_disk_initialize+0x2a>
 800b2ba:	4b6a      	ldr	r3, [pc, #424]	@ (800b464 <SD_disk_initialize+0x1cc>)
 800b2bc:	781b      	ldrb	r3, [r3, #0]
 800b2be:	b2db      	uxtb	r3, r3
 800b2c0:	e0cb      	b.n	800b45a <SD_disk_initialize+0x1c2>

    /* power on */
    SD_PowerOn();
 800b2c2:	f7ff febb 	bl	800b03c <SD_PowerOn>

    /* slave select */
    SELECT();
 800b2c6:	f7ff fe1d 	bl	800af04 <SELECT>

    /* check disk type */
    type = 0;
 800b2ca:	2300      	movs	r3, #0
 800b2cc:	73bb      	strb	r3, [r7, #14]

    /* send GO_IDLE_STATE command */
    if (SD_SendCmd(CMD0, 0) == 1)
 800b2ce:	2100      	movs	r1, #0
 800b2d0:	2040      	movs	r0, #64	@ 0x40
 800b2d2:	f7ff ff8d 	bl	800b1f0 <SD_SendCmd>
 800b2d6:	4603      	mov	r3, r0
 800b2d8:	2b01      	cmp	r3, #1
 800b2da:	f040 80a6 	bne.w	800b42a <SD_disk_initialize+0x192>
    {
        /* timeout 1 sec */
        Timer1 = 1000;
 800b2de:	4b62      	ldr	r3, [pc, #392]	@ (800b468 <SD_disk_initialize+0x1d0>)
 800b2e0:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800b2e4:	801a      	strh	r2, [r3, #0]

        /* SDC V2+ accept CMD8 command, http://elm-chan.org/docs/mmc/mmc_e.html */
        if (SD_SendCmd(CMD8, 0x1AA) == 1)
 800b2e6:	f44f 71d5 	mov.w	r1, #426	@ 0x1aa
 800b2ea:	2048      	movs	r0, #72	@ 0x48
 800b2ec:	f7ff ff80 	bl	800b1f0 <SD_SendCmd>
 800b2f0:	4603      	mov	r3, r0
 800b2f2:	2b01      	cmp	r3, #1
 800b2f4:	d158      	bne.n	800b3a8 <SD_disk_initialize+0x110>
        {
            /* operation condition register */
            for (n = 0; n < 4; n++)
 800b2f6:	2300      	movs	r3, #0
 800b2f8:	73fb      	strb	r3, [r7, #15]
 800b2fa:	e00c      	b.n	800b316 <SD_disk_initialize+0x7e>
            {
                ocr[n] = SPI_RxByte();
 800b2fc:	7bfc      	ldrb	r4, [r7, #15]
 800b2fe:	f7ff fe57 	bl	800afb0 <SPI_RxByte>
 800b302:	4603      	mov	r3, r0
 800b304:	461a      	mov	r2, r3
 800b306:	f104 0310 	add.w	r3, r4, #16
 800b30a:	443b      	add	r3, r7
 800b30c:	f803 2c08 	strb.w	r2, [r3, #-8]
            for (n = 0; n < 4; n++)
 800b310:	7bfb      	ldrb	r3, [r7, #15]
 800b312:	3301      	adds	r3, #1
 800b314:	73fb      	strb	r3, [r7, #15]
 800b316:	7bfb      	ldrb	r3, [r7, #15]
 800b318:	2b03      	cmp	r3, #3
 800b31a:	d9ef      	bls.n	800b2fc <SD_disk_initialize+0x64>
            }

            /* voltage range 2.7-3.6V */
            if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 800b31c:	7abb      	ldrb	r3, [r7, #10]
 800b31e:	2b01      	cmp	r3, #1
 800b320:	f040 8083 	bne.w	800b42a <SD_disk_initialize+0x192>
 800b324:	7afb      	ldrb	r3, [r7, #11]
 800b326:	2baa      	cmp	r3, #170	@ 0xaa
 800b328:	d17f      	bne.n	800b42a <SD_disk_initialize+0x192>
            {
                /* ACMD41 with HCS bit */
                do {
                    if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 800b32a:	2100      	movs	r1, #0
 800b32c:	2077      	movs	r0, #119	@ 0x77
 800b32e:	f7ff ff5f 	bl	800b1f0 <SD_SendCmd>
 800b332:	4603      	mov	r3, r0
 800b334:	2b01      	cmp	r3, #1
 800b336:	d807      	bhi.n	800b348 <SD_disk_initialize+0xb0>
 800b338:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 800b33c:	2069      	movs	r0, #105	@ 0x69
 800b33e:	f7ff ff57 	bl	800b1f0 <SD_SendCmd>
 800b342:	4603      	mov	r3, r0
 800b344:	2b00      	cmp	r3, #0
 800b346:	d005      	beq.n	800b354 <SD_disk_initialize+0xbc>
                } while (Timer1);
 800b348:	4b47      	ldr	r3, [pc, #284]	@ (800b468 <SD_disk_initialize+0x1d0>)
 800b34a:	881b      	ldrh	r3, [r3, #0]
 800b34c:	b29b      	uxth	r3, r3
 800b34e:	2b00      	cmp	r3, #0
 800b350:	d1eb      	bne.n	800b32a <SD_disk_initialize+0x92>
 800b352:	e000      	b.n	800b356 <SD_disk_initialize+0xbe>
                    if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 800b354:	bf00      	nop

                /* READ_OCR */
                if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 800b356:	4b44      	ldr	r3, [pc, #272]	@ (800b468 <SD_disk_initialize+0x1d0>)
 800b358:	881b      	ldrh	r3, [r3, #0]
 800b35a:	b29b      	uxth	r3, r3
 800b35c:	2b00      	cmp	r3, #0
 800b35e:	d064      	beq.n	800b42a <SD_disk_initialize+0x192>
 800b360:	2100      	movs	r1, #0
 800b362:	207a      	movs	r0, #122	@ 0x7a
 800b364:	f7ff ff44 	bl	800b1f0 <SD_SendCmd>
 800b368:	4603      	mov	r3, r0
 800b36a:	2b00      	cmp	r3, #0
 800b36c:	d15d      	bne.n	800b42a <SD_disk_initialize+0x192>
                {
                    /* Check CCS bit */
                    for (n = 0; n < 4; n++)
 800b36e:	2300      	movs	r3, #0
 800b370:	73fb      	strb	r3, [r7, #15]
 800b372:	e00c      	b.n	800b38e <SD_disk_initialize+0xf6>
                    {
                        ocr[n] = SPI_RxByte();
 800b374:	7bfc      	ldrb	r4, [r7, #15]
 800b376:	f7ff fe1b 	bl	800afb0 <SPI_RxByte>
 800b37a:	4603      	mov	r3, r0
 800b37c:	461a      	mov	r2, r3
 800b37e:	f104 0310 	add.w	r3, r4, #16
 800b382:	443b      	add	r3, r7
 800b384:	f803 2c08 	strb.w	r2, [r3, #-8]
                    for (n = 0; n < 4; n++)
 800b388:	7bfb      	ldrb	r3, [r7, #15]
 800b38a:	3301      	adds	r3, #1
 800b38c:	73fb      	strb	r3, [r7, #15]
 800b38e:	7bfb      	ldrb	r3, [r7, #15]
 800b390:	2b03      	cmp	r3, #3
 800b392:	d9ef      	bls.n	800b374 <SD_disk_initialize+0xdc>
                    }

                    /* SDv2 (HC or SC) */
                    type = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;
 800b394:	7a3b      	ldrb	r3, [r7, #8]
 800b396:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b39a:	2b00      	cmp	r3, #0
 800b39c:	d001      	beq.n	800b3a2 <SD_disk_initialize+0x10a>
 800b39e:	230c      	movs	r3, #12
 800b3a0:	e000      	b.n	800b3a4 <SD_disk_initialize+0x10c>
 800b3a2:	2304      	movs	r3, #4
 800b3a4:	73bb      	strb	r3, [r7, #14]
 800b3a6:	e040      	b.n	800b42a <SD_disk_initialize+0x192>
            }
        }
        else
        {
            /* SDC V1 or MMC */
            type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? CT_SD1 : CT_MMC;
 800b3a8:	2100      	movs	r1, #0
 800b3aa:	2077      	movs	r0, #119	@ 0x77
 800b3ac:	f7ff ff20 	bl	800b1f0 <SD_SendCmd>
 800b3b0:	4603      	mov	r3, r0
 800b3b2:	2b01      	cmp	r3, #1
 800b3b4:	d808      	bhi.n	800b3c8 <SD_disk_initialize+0x130>
 800b3b6:	2100      	movs	r1, #0
 800b3b8:	2069      	movs	r0, #105	@ 0x69
 800b3ba:	f7ff ff19 	bl	800b1f0 <SD_SendCmd>
 800b3be:	4603      	mov	r3, r0
 800b3c0:	2b01      	cmp	r3, #1
 800b3c2:	d801      	bhi.n	800b3c8 <SD_disk_initialize+0x130>
 800b3c4:	2302      	movs	r3, #2
 800b3c6:	e000      	b.n	800b3ca <SD_disk_initialize+0x132>
 800b3c8:	2301      	movs	r3, #1
 800b3ca:	73bb      	strb	r3, [r7, #14]

            do
            {
                if (type == CT_SD1)
 800b3cc:	7bbb      	ldrb	r3, [r7, #14]
 800b3ce:	2b02      	cmp	r3, #2
 800b3d0:	d10e      	bne.n	800b3f0 <SD_disk_initialize+0x158>
                {
                    if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0) break; /* ACMD41 */
 800b3d2:	2100      	movs	r1, #0
 800b3d4:	2077      	movs	r0, #119	@ 0x77
 800b3d6:	f7ff ff0b 	bl	800b1f0 <SD_SendCmd>
 800b3da:	4603      	mov	r3, r0
 800b3dc:	2b01      	cmp	r3, #1
 800b3de:	d80e      	bhi.n	800b3fe <SD_disk_initialize+0x166>
 800b3e0:	2100      	movs	r1, #0
 800b3e2:	2069      	movs	r0, #105	@ 0x69
 800b3e4:	f7ff ff04 	bl	800b1f0 <SD_SendCmd>
 800b3e8:	4603      	mov	r3, r0
 800b3ea:	2b00      	cmp	r3, #0
 800b3ec:	d107      	bne.n	800b3fe <SD_disk_initialize+0x166>
 800b3ee:	e00d      	b.n	800b40c <SD_disk_initialize+0x174>
                }
                else
                {
                    if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 800b3f0:	2100      	movs	r1, #0
 800b3f2:	2041      	movs	r0, #65	@ 0x41
 800b3f4:	f7ff fefc 	bl	800b1f0 <SD_SendCmd>
 800b3f8:	4603      	mov	r3, r0
 800b3fa:	2b00      	cmp	r3, #0
 800b3fc:	d005      	beq.n	800b40a <SD_disk_initialize+0x172>
                }

            } while (Timer1);
 800b3fe:	4b1a      	ldr	r3, [pc, #104]	@ (800b468 <SD_disk_initialize+0x1d0>)
 800b400:	881b      	ldrh	r3, [r3, #0]
 800b402:	b29b      	uxth	r3, r3
 800b404:	2b00      	cmp	r3, #0
 800b406:	d1e1      	bne.n	800b3cc <SD_disk_initialize+0x134>
 800b408:	e000      	b.n	800b40c <SD_disk_initialize+0x174>
                    if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 800b40a:	bf00      	nop

            /* SET_BLOCKLEN */
            if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) type = 0;
 800b40c:	4b16      	ldr	r3, [pc, #88]	@ (800b468 <SD_disk_initialize+0x1d0>)
 800b40e:	881b      	ldrh	r3, [r3, #0]
 800b410:	b29b      	uxth	r3, r3
 800b412:	2b00      	cmp	r3, #0
 800b414:	d007      	beq.n	800b426 <SD_disk_initialize+0x18e>
 800b416:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800b41a:	2050      	movs	r0, #80	@ 0x50
 800b41c:	f7ff fee8 	bl	800b1f0 <SD_SendCmd>
 800b420:	4603      	mov	r3, r0
 800b422:	2b00      	cmp	r3, #0
 800b424:	d001      	beq.n	800b42a <SD_disk_initialize+0x192>
 800b426:	2300      	movs	r3, #0
 800b428:	73bb      	strb	r3, [r7, #14]
        }
    }

    CardType = type;
 800b42a:	4a10      	ldr	r2, [pc, #64]	@ (800b46c <SD_disk_initialize+0x1d4>)
 800b42c:	7bbb      	ldrb	r3, [r7, #14]
 800b42e:	7013      	strb	r3, [r2, #0]

    /* Idle */
    DESELECT();
 800b430:	f7ff fd78 	bl	800af24 <DESELECT>
    SPI_RxByte();
 800b434:	f7ff fdbc 	bl	800afb0 <SPI_RxByte>

    /* Clear STA_NOINIT */
    if (type)
 800b438:	7bbb      	ldrb	r3, [r7, #14]
 800b43a:	2b00      	cmp	r3, #0
 800b43c:	d008      	beq.n	800b450 <SD_disk_initialize+0x1b8>
    {
        Stat &= ~STA_NOINIT;
 800b43e:	4b09      	ldr	r3, [pc, #36]	@ (800b464 <SD_disk_initialize+0x1cc>)
 800b440:	781b      	ldrb	r3, [r3, #0]
 800b442:	b2db      	uxtb	r3, r3
 800b444:	f023 0301 	bic.w	r3, r3, #1
 800b448:	b2da      	uxtb	r2, r3
 800b44a:	4b06      	ldr	r3, [pc, #24]	@ (800b464 <SD_disk_initialize+0x1cc>)
 800b44c:	701a      	strb	r2, [r3, #0]
 800b44e:	e001      	b.n	800b454 <SD_disk_initialize+0x1bc>
    }
    else
    {
        /* Initialization failed */
        SD_PowerOff();
 800b450:	f7ff fe36 	bl	800b0c0 <SD_PowerOff>
    }

    return Stat;
 800b454:	4b03      	ldr	r3, [pc, #12]	@ (800b464 <SD_disk_initialize+0x1cc>)
 800b456:	781b      	ldrb	r3, [r3, #0]
 800b458:	b2db      	uxtb	r3, r3
}
 800b45a:	4618      	mov	r0, r3
 800b45c:	3714      	adds	r7, #20
 800b45e:	46bd      	mov	sp, r7
 800b460:	bd90      	pop	{r4, r7, pc}
 800b462:	bf00      	nop
 800b464:	2000d11d 	.word	0x2000d11d
 800b468:	200140c4 	.word	0x200140c4
 800b46c:	200140c8 	.word	0x200140c8

0800b470 <SD_disk_status>:

/* return disk status */
DSTATUS SD_disk_status(BYTE drv) 
{
 800b470:	b480      	push	{r7}
 800b472:	b083      	sub	sp, #12
 800b474:	af00      	add	r7, sp, #0
 800b476:	4603      	mov	r3, r0
 800b478:	71fb      	strb	r3, [r7, #7]
    if (drv) return STA_NOINIT;
 800b47a:	79fb      	ldrb	r3, [r7, #7]
 800b47c:	2b00      	cmp	r3, #0
 800b47e:	d001      	beq.n	800b484 <SD_disk_status+0x14>
 800b480:	2301      	movs	r3, #1
 800b482:	e002      	b.n	800b48a <SD_disk_status+0x1a>
    return Stat;
 800b484:	4b04      	ldr	r3, [pc, #16]	@ (800b498 <SD_disk_status+0x28>)
 800b486:	781b      	ldrb	r3, [r3, #0]
 800b488:	b2db      	uxtb	r3, r3
}
 800b48a:	4618      	mov	r0, r3
 800b48c:	370c      	adds	r7, #12
 800b48e:	46bd      	mov	sp, r7
 800b490:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b494:	4770      	bx	lr
 800b496:	bf00      	nop
 800b498:	2000d11d 	.word	0x2000d11d

0800b49c <SD_disk_read>:

/* read sector */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count) 
{
 800b49c:	b580      	push	{r7, lr}
 800b49e:	b084      	sub	sp, #16
 800b4a0:	af00      	add	r7, sp, #0
 800b4a2:	60b9      	str	r1, [r7, #8]
 800b4a4:	607a      	str	r2, [r7, #4]
 800b4a6:	603b      	str	r3, [r7, #0]
 800b4a8:	4603      	mov	r3, r0
 800b4aa:	73fb      	strb	r3, [r7, #15]
    /* pdrv should be 0 */
    if (pdrv || !count) return RES_PARERR;
 800b4ac:	7bfb      	ldrb	r3, [r7, #15]
 800b4ae:	2b00      	cmp	r3, #0
 800b4b0:	d102      	bne.n	800b4b8 <SD_disk_read+0x1c>
 800b4b2:	683b      	ldr	r3, [r7, #0]
 800b4b4:	2b00      	cmp	r3, #0
 800b4b6:	d101      	bne.n	800b4bc <SD_disk_read+0x20>
 800b4b8:	2304      	movs	r3, #4
 800b4ba:	e051      	b.n	800b560 <SD_disk_read+0xc4>

    /* no disk */
    if (Stat & STA_NOINIT) return RES_NOTRDY;
 800b4bc:	4b2a      	ldr	r3, [pc, #168]	@ (800b568 <SD_disk_read+0xcc>)
 800b4be:	781b      	ldrb	r3, [r3, #0]
 800b4c0:	b2db      	uxtb	r3, r3
 800b4c2:	f003 0301 	and.w	r3, r3, #1
 800b4c6:	2b00      	cmp	r3, #0
 800b4c8:	d001      	beq.n	800b4ce <SD_disk_read+0x32>
 800b4ca:	2303      	movs	r3, #3
 800b4cc:	e048      	b.n	800b560 <SD_disk_read+0xc4>

    /* convert to byte address */
    if (!(CardType & CT_BLOCK)) sector *= 512;
 800b4ce:	4b27      	ldr	r3, [pc, #156]	@ (800b56c <SD_disk_read+0xd0>)
 800b4d0:	781b      	ldrb	r3, [r3, #0]
 800b4d2:	f003 0308 	and.w	r3, r3, #8
 800b4d6:	2b00      	cmp	r3, #0
 800b4d8:	d102      	bne.n	800b4e0 <SD_disk_read+0x44>
 800b4da:	687b      	ldr	r3, [r7, #4]
 800b4dc:	025b      	lsls	r3, r3, #9
 800b4de:	607b      	str	r3, [r7, #4]

    SELECT();
 800b4e0:	f7ff fd10 	bl	800af04 <SELECT>

    if (count == 1)
 800b4e4:	683b      	ldr	r3, [r7, #0]
 800b4e6:	2b01      	cmp	r3, #1
 800b4e8:	d111      	bne.n	800b50e <SD_disk_read+0x72>
    {
        /* READ_SINGLE_BLOCK */
        if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512)) count = 0;
 800b4ea:	6879      	ldr	r1, [r7, #4]
 800b4ec:	2051      	movs	r0, #81	@ 0x51
 800b4ee:	f7ff fe7f 	bl	800b1f0 <SD_SendCmd>
 800b4f2:	4603      	mov	r3, r0
 800b4f4:	2b00      	cmp	r3, #0
 800b4f6:	d129      	bne.n	800b54c <SD_disk_read+0xb0>
 800b4f8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800b4fc:	68b8      	ldr	r0, [r7, #8]
 800b4fe:	f7ff fdf7 	bl	800b0f0 <SD_RxDataBlock>
 800b502:	4603      	mov	r3, r0
 800b504:	2b00      	cmp	r3, #0
 800b506:	d021      	beq.n	800b54c <SD_disk_read+0xb0>
 800b508:	2300      	movs	r3, #0
 800b50a:	603b      	str	r3, [r7, #0]
 800b50c:	e01e      	b.n	800b54c <SD_disk_read+0xb0>
    }
    else
    {
        /* READ_MULTIPLE_BLOCK */
        if (SD_SendCmd(CMD18, sector) == 0)
 800b50e:	6879      	ldr	r1, [r7, #4]
 800b510:	2052      	movs	r0, #82	@ 0x52
 800b512:	f7ff fe6d 	bl	800b1f0 <SD_SendCmd>
 800b516:	4603      	mov	r3, r0
 800b518:	2b00      	cmp	r3, #0
 800b51a:	d117      	bne.n	800b54c <SD_disk_read+0xb0>
        {
            do {
                if (!SD_RxDataBlock(buff, 512)) break;
 800b51c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800b520:	68b8      	ldr	r0, [r7, #8]
 800b522:	f7ff fde5 	bl	800b0f0 <SD_RxDataBlock>
 800b526:	4603      	mov	r3, r0
 800b528:	2b00      	cmp	r3, #0
 800b52a:	d00a      	beq.n	800b542 <SD_disk_read+0xa6>
                buff += 512;
 800b52c:	68bb      	ldr	r3, [r7, #8]
 800b52e:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 800b532:	60bb      	str	r3, [r7, #8]
            } while (--count);
 800b534:	683b      	ldr	r3, [r7, #0]
 800b536:	3b01      	subs	r3, #1
 800b538:	603b      	str	r3, [r7, #0]
 800b53a:	683b      	ldr	r3, [r7, #0]
 800b53c:	2b00      	cmp	r3, #0
 800b53e:	d1ed      	bne.n	800b51c <SD_disk_read+0x80>
 800b540:	e000      	b.n	800b544 <SD_disk_read+0xa8>
                if (!SD_RxDataBlock(buff, 512)) break;
 800b542:	bf00      	nop

            /* STOP_TRANSMISSION */
            SD_SendCmd(CMD12, 0);
 800b544:	2100      	movs	r1, #0
 800b546:	204c      	movs	r0, #76	@ 0x4c
 800b548:	f7ff fe52 	bl	800b1f0 <SD_SendCmd>
        }
    }

    /* Idle */
    DESELECT();
 800b54c:	f7ff fcea 	bl	800af24 <DESELECT>
    SPI_RxByte();
 800b550:	f7ff fd2e 	bl	800afb0 <SPI_RxByte>

    return count ? RES_ERROR : RES_OK;
 800b554:	683b      	ldr	r3, [r7, #0]
 800b556:	2b00      	cmp	r3, #0
 800b558:	bf14      	ite	ne
 800b55a:	2301      	movne	r3, #1
 800b55c:	2300      	moveq	r3, #0
 800b55e:	b2db      	uxtb	r3, r3
}
 800b560:	4618      	mov	r0, r3
 800b562:	3710      	adds	r7, #16
 800b564:	46bd      	mov	sp, r7
 800b566:	bd80      	pop	{r7, pc}
 800b568:	2000d11d 	.word	0x2000d11d
 800b56c:	200140c8 	.word	0x200140c8

0800b570 <SD_disk_write>:

/* write sector */
#if _USE_WRITE == 1
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count) 
{
 800b570:	b580      	push	{r7, lr}
 800b572:	b084      	sub	sp, #16
 800b574:	af00      	add	r7, sp, #0
 800b576:	60b9      	str	r1, [r7, #8]
 800b578:	607a      	str	r2, [r7, #4]
 800b57a:	603b      	str	r3, [r7, #0]
 800b57c:	4603      	mov	r3, r0
 800b57e:	73fb      	strb	r3, [r7, #15]
    /* pdrv should be 0 */
    if (pdrv || !count) return RES_PARERR;
 800b580:	7bfb      	ldrb	r3, [r7, #15]
 800b582:	2b00      	cmp	r3, #0
 800b584:	d102      	bne.n	800b58c <SD_disk_write+0x1c>
 800b586:	683b      	ldr	r3, [r7, #0]
 800b588:	2b00      	cmp	r3, #0
 800b58a:	d101      	bne.n	800b590 <SD_disk_write+0x20>
 800b58c:	2304      	movs	r3, #4
 800b58e:	e06b      	b.n	800b668 <SD_disk_write+0xf8>

    /* no disk */
    if (Stat & STA_NOINIT) return RES_NOTRDY;
 800b590:	4b37      	ldr	r3, [pc, #220]	@ (800b670 <SD_disk_write+0x100>)
 800b592:	781b      	ldrb	r3, [r3, #0]
 800b594:	b2db      	uxtb	r3, r3
 800b596:	f003 0301 	and.w	r3, r3, #1
 800b59a:	2b00      	cmp	r3, #0
 800b59c:	d001      	beq.n	800b5a2 <SD_disk_write+0x32>
 800b59e:	2303      	movs	r3, #3
 800b5a0:	e062      	b.n	800b668 <SD_disk_write+0xf8>

    /* write protection */
    if (Stat & STA_PROTECT) return RES_WRPRT;
 800b5a2:	4b33      	ldr	r3, [pc, #204]	@ (800b670 <SD_disk_write+0x100>)
 800b5a4:	781b      	ldrb	r3, [r3, #0]
 800b5a6:	b2db      	uxtb	r3, r3
 800b5a8:	f003 0304 	and.w	r3, r3, #4
 800b5ac:	2b00      	cmp	r3, #0
 800b5ae:	d001      	beq.n	800b5b4 <SD_disk_write+0x44>
 800b5b0:	2302      	movs	r3, #2
 800b5b2:	e059      	b.n	800b668 <SD_disk_write+0xf8>

    /* convert to byte address */
    if (!(CardType & CT_BLOCK)) sector *= 512;
 800b5b4:	4b2f      	ldr	r3, [pc, #188]	@ (800b674 <SD_disk_write+0x104>)
 800b5b6:	781b      	ldrb	r3, [r3, #0]
 800b5b8:	f003 0308 	and.w	r3, r3, #8
 800b5bc:	2b00      	cmp	r3, #0
 800b5be:	d102      	bne.n	800b5c6 <SD_disk_write+0x56>
 800b5c0:	687b      	ldr	r3, [r7, #4]
 800b5c2:	025b      	lsls	r3, r3, #9
 800b5c4:	607b      	str	r3, [r7, #4]

    SELECT();
 800b5c6:	f7ff fc9d 	bl	800af04 <SELECT>

    if (count == 1)
 800b5ca:	683b      	ldr	r3, [r7, #0]
 800b5cc:	2b01      	cmp	r3, #1
 800b5ce:	d110      	bne.n	800b5f2 <SD_disk_write+0x82>
    {
        /* WRITE_BLOCK */
        if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 800b5d0:	6879      	ldr	r1, [r7, #4]
 800b5d2:	2058      	movs	r0, #88	@ 0x58
 800b5d4:	f7ff fe0c 	bl	800b1f0 <SD_SendCmd>
 800b5d8:	4603      	mov	r3, r0
 800b5da:	2b00      	cmp	r3, #0
 800b5dc:	d13a      	bne.n	800b654 <SD_disk_write+0xe4>
 800b5de:	21fe      	movs	r1, #254	@ 0xfe
 800b5e0:	68b8      	ldr	r0, [r7, #8]
 800b5e2:	f7ff fdb5 	bl	800b150 <SD_TxDataBlock>
 800b5e6:	4603      	mov	r3, r0
 800b5e8:	2b00      	cmp	r3, #0
 800b5ea:	d033      	beq.n	800b654 <SD_disk_write+0xe4>
            count = 0;
 800b5ec:	2300      	movs	r3, #0
 800b5ee:	603b      	str	r3, [r7, #0]
 800b5f0:	e030      	b.n	800b654 <SD_disk_write+0xe4>
    }
    else
    {
        /* WRITE_MULTIPLE_BLOCK */
        if (CardType & CT_SD1)
 800b5f2:	4b20      	ldr	r3, [pc, #128]	@ (800b674 <SD_disk_write+0x104>)
 800b5f4:	781b      	ldrb	r3, [r3, #0]
 800b5f6:	f003 0302 	and.w	r3, r3, #2
 800b5fa:	2b00      	cmp	r3, #0
 800b5fc:	d007      	beq.n	800b60e <SD_disk_write+0x9e>
        {
            SD_SendCmd(CMD55, 0);
 800b5fe:	2100      	movs	r1, #0
 800b600:	2077      	movs	r0, #119	@ 0x77
 800b602:	f7ff fdf5 	bl	800b1f0 <SD_SendCmd>
            SD_SendCmd(CMD23, count); /* ACMD23 */
 800b606:	6839      	ldr	r1, [r7, #0]
 800b608:	2057      	movs	r0, #87	@ 0x57
 800b60a:	f7ff fdf1 	bl	800b1f0 <SD_SendCmd>
        }

        if (SD_SendCmd(CMD25, sector) == 0)
 800b60e:	6879      	ldr	r1, [r7, #4]
 800b610:	2059      	movs	r0, #89	@ 0x59
 800b612:	f7ff fded 	bl	800b1f0 <SD_SendCmd>
 800b616:	4603      	mov	r3, r0
 800b618:	2b00      	cmp	r3, #0
 800b61a:	d11b      	bne.n	800b654 <SD_disk_write+0xe4>
        {
            do {
                if(!SD_TxDataBlock(buff, 0xFC)) break;
 800b61c:	21fc      	movs	r1, #252	@ 0xfc
 800b61e:	68b8      	ldr	r0, [r7, #8]
 800b620:	f7ff fd96 	bl	800b150 <SD_TxDataBlock>
 800b624:	4603      	mov	r3, r0
 800b626:	2b00      	cmp	r3, #0
 800b628:	d00a      	beq.n	800b640 <SD_disk_write+0xd0>
                buff += 512;
 800b62a:	68bb      	ldr	r3, [r7, #8]
 800b62c:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 800b630:	60bb      	str	r3, [r7, #8]
            } while (--count);
 800b632:	683b      	ldr	r3, [r7, #0]
 800b634:	3b01      	subs	r3, #1
 800b636:	603b      	str	r3, [r7, #0]
 800b638:	683b      	ldr	r3, [r7, #0]
 800b63a:	2b00      	cmp	r3, #0
 800b63c:	d1ee      	bne.n	800b61c <SD_disk_write+0xac>
 800b63e:	e000      	b.n	800b642 <SD_disk_write+0xd2>
                if(!SD_TxDataBlock(buff, 0xFC)) break;
 800b640:	bf00      	nop

            /* STOP_TRAN token */
            if(!SD_TxDataBlock(0, 0xFD))
 800b642:	21fd      	movs	r1, #253	@ 0xfd
 800b644:	2000      	movs	r0, #0
 800b646:	f7ff fd83 	bl	800b150 <SD_TxDataBlock>
 800b64a:	4603      	mov	r3, r0
 800b64c:	2b00      	cmp	r3, #0
 800b64e:	d101      	bne.n	800b654 <SD_disk_write+0xe4>
            {
                count = 1;
 800b650:	2301      	movs	r3, #1
 800b652:	603b      	str	r3, [r7, #0]
            }
        }
    }

    /* Idle */
    DESELECT();
 800b654:	f7ff fc66 	bl	800af24 <DESELECT>
    SPI_RxByte();
 800b658:	f7ff fcaa 	bl	800afb0 <SPI_RxByte>

    return count ? RES_ERROR : RES_OK;
 800b65c:	683b      	ldr	r3, [r7, #0]
 800b65e:	2b00      	cmp	r3, #0
 800b660:	bf14      	ite	ne
 800b662:	2301      	movne	r3, #1
 800b664:	2300      	moveq	r3, #0
 800b666:	b2db      	uxtb	r3, r3
}
 800b668:	4618      	mov	r0, r3
 800b66a:	3710      	adds	r7, #16
 800b66c:	46bd      	mov	sp, r7
 800b66e:	bd80      	pop	{r7, pc}
 800b670:	2000d11d 	.word	0x2000d11d
 800b674:	200140c8 	.word	0x200140c8

0800b678 <SD_disk_ioctl>:
#endif /* _USE_WRITE */

/* ioctl */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff) 
{
 800b678:	b590      	push	{r4, r7, lr}
 800b67a:	b08b      	sub	sp, #44	@ 0x2c
 800b67c:	af00      	add	r7, sp, #0
 800b67e:	4603      	mov	r3, r0
 800b680:	603a      	str	r2, [r7, #0]
 800b682:	71fb      	strb	r3, [r7, #7]
 800b684:	460b      	mov	r3, r1
 800b686:	71bb      	strb	r3, [r7, #6]
    DRESULT res;
    uint8_t n, csd[16], *ptr = buff;
 800b688:	683b      	ldr	r3, [r7, #0]
 800b68a:	623b      	str	r3, [r7, #32]
    
    /* pdrv should be 0 */
    if (drv) return RES_PARERR;
 800b68c:	79fb      	ldrb	r3, [r7, #7]
 800b68e:	2b00      	cmp	r3, #0
 800b690:	d001      	beq.n	800b696 <SD_disk_ioctl+0x1e>
 800b692:	2304      	movs	r3, #4
 800b694:	e118      	b.n	800b8c8 <SD_disk_ioctl+0x250>
    res = RES_ERROR;
 800b696:	2301      	movs	r3, #1
 800b698:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    if (ctrl == CTRL_POWER)
 800b69c:	79bb      	ldrb	r3, [r7, #6]
 800b69e:	2b05      	cmp	r3, #5
 800b6a0:	d124      	bne.n	800b6ec <SD_disk_ioctl+0x74>
    {
        switch (*ptr)
 800b6a2:	6a3b      	ldr	r3, [r7, #32]
 800b6a4:	781b      	ldrb	r3, [r3, #0]
 800b6a6:	2b02      	cmp	r3, #2
 800b6a8:	d012      	beq.n	800b6d0 <SD_disk_ioctl+0x58>
 800b6aa:	2b02      	cmp	r3, #2
 800b6ac:	dc1a      	bgt.n	800b6e4 <SD_disk_ioctl+0x6c>
 800b6ae:	2b00      	cmp	r3, #0
 800b6b0:	d002      	beq.n	800b6b8 <SD_disk_ioctl+0x40>
 800b6b2:	2b01      	cmp	r3, #1
 800b6b4:	d006      	beq.n	800b6c4 <SD_disk_ioctl+0x4c>
 800b6b6:	e015      	b.n	800b6e4 <SD_disk_ioctl+0x6c>
        {
        case 0:
            SD_PowerOff();      /* Power Off */
 800b6b8:	f7ff fd02 	bl	800b0c0 <SD_PowerOff>
            res = RES_OK;
 800b6bc:	2300      	movs	r3, #0
 800b6be:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            break;
 800b6c2:	e0ff      	b.n	800b8c4 <SD_disk_ioctl+0x24c>
        case 1:
            SD_PowerOn();       /* Power On */
 800b6c4:	f7ff fcba 	bl	800b03c <SD_PowerOn>
            res = RES_OK;
 800b6c8:	2300      	movs	r3, #0
 800b6ca:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            break;
 800b6ce:	e0f9      	b.n	800b8c4 <SD_disk_ioctl+0x24c>
        case 2:
            *(ptr + 1) = SD_CheckPower();
 800b6d0:	6a3b      	ldr	r3, [r7, #32]
 800b6d2:	1c5c      	adds	r4, r3, #1
 800b6d4:	f7ff fd00 	bl	800b0d8 <SD_CheckPower>
 800b6d8:	4603      	mov	r3, r0
 800b6da:	7023      	strb	r3, [r4, #0]
            res = RES_OK;       /* Power Check */
 800b6dc:	2300      	movs	r3, #0
 800b6de:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            break;
 800b6e2:	e0ef      	b.n	800b8c4 <SD_disk_ioctl+0x24c>
        default:
            res = RES_PARERR;
 800b6e4:	2304      	movs	r3, #4
 800b6e6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800b6ea:	e0eb      	b.n	800b8c4 <SD_disk_ioctl+0x24c>
        }
    }
    else
    {
        /* no disk */
        if (Stat & STA_NOINIT) return RES_NOTRDY;
 800b6ec:	4b78      	ldr	r3, [pc, #480]	@ (800b8d0 <SD_disk_ioctl+0x258>)
 800b6ee:	781b      	ldrb	r3, [r3, #0]
 800b6f0:	b2db      	uxtb	r3, r3
 800b6f2:	f003 0301 	and.w	r3, r3, #1
 800b6f6:	2b00      	cmp	r3, #0
 800b6f8:	d001      	beq.n	800b6fe <SD_disk_ioctl+0x86>
 800b6fa:	2303      	movs	r3, #3
 800b6fc:	e0e4      	b.n	800b8c8 <SD_disk_ioctl+0x250>

        SELECT();
 800b6fe:	f7ff fc01 	bl	800af04 <SELECT>

        switch (ctrl)
 800b702:	79bb      	ldrb	r3, [r7, #6]
 800b704:	2b0d      	cmp	r3, #13
 800b706:	f200 80cc 	bhi.w	800b8a2 <SD_disk_ioctl+0x22a>
 800b70a:	a201      	add	r2, pc, #4	@ (adr r2, 800b710 <SD_disk_ioctl+0x98>)
 800b70c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b710:	0800b80b 	.word	0x0800b80b
 800b714:	0800b749 	.word	0x0800b749
 800b718:	0800b7fb 	.word	0x0800b7fb
 800b71c:	0800b8a3 	.word	0x0800b8a3
 800b720:	0800b8a3 	.word	0x0800b8a3
 800b724:	0800b8a3 	.word	0x0800b8a3
 800b728:	0800b8a3 	.word	0x0800b8a3
 800b72c:	0800b8a3 	.word	0x0800b8a3
 800b730:	0800b8a3 	.word	0x0800b8a3
 800b734:	0800b8a3 	.word	0x0800b8a3
 800b738:	0800b8a3 	.word	0x0800b8a3
 800b73c:	0800b81d 	.word	0x0800b81d
 800b740:	0800b841 	.word	0x0800b841
 800b744:	0800b865 	.word	0x0800b865
        {
        case GET_SECTOR_COUNT:
            /* SEND_CSD */
            if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 800b748:	2100      	movs	r1, #0
 800b74a:	2049      	movs	r0, #73	@ 0x49
 800b74c:	f7ff fd50 	bl	800b1f0 <SD_SendCmd>
 800b750:	4603      	mov	r3, r0
 800b752:	2b00      	cmp	r3, #0
 800b754:	f040 80a9 	bne.w	800b8aa <SD_disk_ioctl+0x232>
 800b758:	f107 0308 	add.w	r3, r7, #8
 800b75c:	2110      	movs	r1, #16
 800b75e:	4618      	mov	r0, r3
 800b760:	f7ff fcc6 	bl	800b0f0 <SD_RxDataBlock>
 800b764:	4603      	mov	r3, r0
 800b766:	2b00      	cmp	r3, #0
 800b768:	f000 809f 	beq.w	800b8aa <SD_disk_ioctl+0x232>
            {
                if ((csd[0] >> 6) == 1) /* SDC V2 */
 800b76c:	7a3b      	ldrb	r3, [r7, #8]
 800b76e:	099b      	lsrs	r3, r3, #6
 800b770:	b2db      	uxtb	r3, r3
 800b772:	2b01      	cmp	r3, #1
 800b774:	d10f      	bne.n	800b796 <SD_disk_ioctl+0x11e>
                {
                    // FIX 5: SDv2 CSD 파싱 및 용량 계산 로직 수정
                    // 기존 로직은 C_SIZE 필드를 일부만 사용하여 대용량 카드에서 용량을 잘못 계산합니다.
                    DWORD c_size;
                    c_size = (DWORD)(csd[7] & 0x3F) << 16 | (WORD)csd[8] << 8 | csd[9];
 800b776:	7bfb      	ldrb	r3, [r7, #15]
 800b778:	041b      	lsls	r3, r3, #16
 800b77a:	f403 127c 	and.w	r2, r3, #4128768	@ 0x3f0000
 800b77e:	7c3b      	ldrb	r3, [r7, #16]
 800b780:	021b      	lsls	r3, r3, #8
 800b782:	4313      	orrs	r3, r2
 800b784:	7c7a      	ldrb	r2, [r7, #17]
 800b786:	4313      	orrs	r3, r2
 800b788:	61bb      	str	r3, [r7, #24]
                    *(DWORD*)buff = (c_size + 1) << 10;
 800b78a:	69bb      	ldr	r3, [r7, #24]
 800b78c:	3301      	adds	r3, #1
 800b78e:	029a      	lsls	r2, r3, #10
 800b790:	683b      	ldr	r3, [r7, #0]
 800b792:	601a      	str	r2, [r3, #0]
 800b794:	e02d      	b.n	800b7f2 <SD_disk_ioctl+0x17a>
                }
                else /* MMC or SDC V1 */
                {
                    WORD csize;
                    n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 800b796:	7b7b      	ldrb	r3, [r7, #13]
 800b798:	f003 030f 	and.w	r3, r3, #15
 800b79c:	b2da      	uxtb	r2, r3
 800b79e:	7cbb      	ldrb	r3, [r7, #18]
 800b7a0:	09db      	lsrs	r3, r3, #7
 800b7a2:	b2db      	uxtb	r3, r3
 800b7a4:	4413      	add	r3, r2
 800b7a6:	b2da      	uxtb	r2, r3
 800b7a8:	7c7b      	ldrb	r3, [r7, #17]
 800b7aa:	005b      	lsls	r3, r3, #1
 800b7ac:	b2db      	uxtb	r3, r3
 800b7ae:	f003 0306 	and.w	r3, r3, #6
 800b7b2:	b2db      	uxtb	r3, r3
 800b7b4:	4413      	add	r3, r2
 800b7b6:	b2db      	uxtb	r3, r3
 800b7b8:	3302      	adds	r3, #2
 800b7ba:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
                    csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 800b7be:	7c3b      	ldrb	r3, [r7, #16]
 800b7c0:	099b      	lsrs	r3, r3, #6
 800b7c2:	b2db      	uxtb	r3, r3
 800b7c4:	461a      	mov	r2, r3
 800b7c6:	7bfb      	ldrb	r3, [r7, #15]
 800b7c8:	009b      	lsls	r3, r3, #2
 800b7ca:	b29b      	uxth	r3, r3
 800b7cc:	4413      	add	r3, r2
 800b7ce:	b29a      	uxth	r2, r3
 800b7d0:	7bbb      	ldrb	r3, [r7, #14]
 800b7d2:	029b      	lsls	r3, r3, #10
 800b7d4:	b29b      	uxth	r3, r3
 800b7d6:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800b7da:	b29b      	uxth	r3, r3
 800b7dc:	4413      	add	r3, r2
 800b7de:	b29b      	uxth	r3, r3
 800b7e0:	3301      	adds	r3, #1
 800b7e2:	83fb      	strh	r3, [r7, #30]
                    *(DWORD*) buff = (DWORD) csize << (n - 9);
 800b7e4:	8bfa      	ldrh	r2, [r7, #30]
 800b7e6:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800b7ea:	3b09      	subs	r3, #9
 800b7ec:	409a      	lsls	r2, r3
 800b7ee:	683b      	ldr	r3, [r7, #0]
 800b7f0:	601a      	str	r2, [r3, #0]
                }
                res = RES_OK;
 800b7f2:	2300      	movs	r3, #0
 800b7f4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            }
            break;
 800b7f8:	e057      	b.n	800b8aa <SD_disk_ioctl+0x232>
        case GET_SECTOR_SIZE:
            *(WORD*) buff = 512;
 800b7fa:	683b      	ldr	r3, [r7, #0]
 800b7fc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800b800:	801a      	strh	r2, [r3, #0]
            res = RES_OK;
 800b802:	2300      	movs	r3, #0
 800b804:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            break;
 800b808:	e058      	b.n	800b8bc <SD_disk_ioctl+0x244>
        case CTRL_SYNC:
            if (SD_ReadyWait() == 0xFF) res = RES_OK;
 800b80a:	f7ff fbfd 	bl	800b008 <SD_ReadyWait>
 800b80e:	4603      	mov	r3, r0
 800b810:	2bff      	cmp	r3, #255	@ 0xff
 800b812:	d14c      	bne.n	800b8ae <SD_disk_ioctl+0x236>
 800b814:	2300      	movs	r3, #0
 800b816:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            break;
 800b81a:	e048      	b.n	800b8ae <SD_disk_ioctl+0x236>
        case MMC_GET_CSD:
            /* SEND_CSD */
            if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 800b81c:	2100      	movs	r1, #0
 800b81e:	2049      	movs	r0, #73	@ 0x49
 800b820:	f7ff fce6 	bl	800b1f0 <SD_SendCmd>
 800b824:	4603      	mov	r3, r0
 800b826:	2b00      	cmp	r3, #0
 800b828:	d143      	bne.n	800b8b2 <SD_disk_ioctl+0x23a>
 800b82a:	2110      	movs	r1, #16
 800b82c:	6a38      	ldr	r0, [r7, #32]
 800b82e:	f7ff fc5f 	bl	800b0f0 <SD_RxDataBlock>
 800b832:	4603      	mov	r3, r0
 800b834:	2b00      	cmp	r3, #0
 800b836:	d03c      	beq.n	800b8b2 <SD_disk_ioctl+0x23a>
 800b838:	2300      	movs	r3, #0
 800b83a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            break;
 800b83e:	e038      	b.n	800b8b2 <SD_disk_ioctl+0x23a>
        case MMC_GET_CID:
            /* SEND_CID */
            if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 800b840:	2100      	movs	r1, #0
 800b842:	204a      	movs	r0, #74	@ 0x4a
 800b844:	f7ff fcd4 	bl	800b1f0 <SD_SendCmd>
 800b848:	4603      	mov	r3, r0
 800b84a:	2b00      	cmp	r3, #0
 800b84c:	d133      	bne.n	800b8b6 <SD_disk_ioctl+0x23e>
 800b84e:	2110      	movs	r1, #16
 800b850:	6a38      	ldr	r0, [r7, #32]
 800b852:	f7ff fc4d 	bl	800b0f0 <SD_RxDataBlock>
 800b856:	4603      	mov	r3, r0
 800b858:	2b00      	cmp	r3, #0
 800b85a:	d02c      	beq.n	800b8b6 <SD_disk_ioctl+0x23e>
 800b85c:	2300      	movs	r3, #0
 800b85e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            break;
 800b862:	e028      	b.n	800b8b6 <SD_disk_ioctl+0x23e>
        case MMC_GET_OCR:
            /* READ_OCR */
            if (SD_SendCmd(CMD58, 0) == 0)
 800b864:	2100      	movs	r1, #0
 800b866:	207a      	movs	r0, #122	@ 0x7a
 800b868:	f7ff fcc2 	bl	800b1f0 <SD_SendCmd>
 800b86c:	4603      	mov	r3, r0
 800b86e:	2b00      	cmp	r3, #0
 800b870:	d123      	bne.n	800b8ba <SD_disk_ioctl+0x242>
            {
                for (n = 0; n < 4; n++)
 800b872:	2300      	movs	r3, #0
 800b874:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800b878:	e00b      	b.n	800b892 <SD_disk_ioctl+0x21a>
                {
                    *ptr++ = SPI_RxByte();
 800b87a:	6a3c      	ldr	r4, [r7, #32]
 800b87c:	1c63      	adds	r3, r4, #1
 800b87e:	623b      	str	r3, [r7, #32]
 800b880:	f7ff fb96 	bl	800afb0 <SPI_RxByte>
 800b884:	4603      	mov	r3, r0
 800b886:	7023      	strb	r3, [r4, #0]
                for (n = 0; n < 4; n++)
 800b888:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800b88c:	3301      	adds	r3, #1
 800b88e:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800b892:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800b896:	2b03      	cmp	r3, #3
 800b898:	d9ef      	bls.n	800b87a <SD_disk_ioctl+0x202>
                }
                res = RES_OK;
 800b89a:	2300      	movs	r3, #0
 800b89c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            }
            // FIX 4: 누락된 break 추가
            // break가 없어 default case로 넘어가 res값이 RES_PARERR로 덮어쓰이는 문제를 수정합니다.
            break; 
 800b8a0:	e00b      	b.n	800b8ba <SD_disk_ioctl+0x242>
        default:
            res = RES_PARERR;
 800b8a2:	2304      	movs	r3, #4
 800b8a4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800b8a8:	e008      	b.n	800b8bc <SD_disk_ioctl+0x244>
            break;
 800b8aa:	bf00      	nop
 800b8ac:	e006      	b.n	800b8bc <SD_disk_ioctl+0x244>
            break;
 800b8ae:	bf00      	nop
 800b8b0:	e004      	b.n	800b8bc <SD_disk_ioctl+0x244>
            break;
 800b8b2:	bf00      	nop
 800b8b4:	e002      	b.n	800b8bc <SD_disk_ioctl+0x244>
            break;
 800b8b6:	bf00      	nop
 800b8b8:	e000      	b.n	800b8bc <SD_disk_ioctl+0x244>
            break; 
 800b8ba:	bf00      	nop
        }

        DESELECT();
 800b8bc:	f7ff fb32 	bl	800af24 <DESELECT>
        SPI_RxByte();
 800b8c0:	f7ff fb76 	bl	800afb0 <SPI_RxByte>
    }

    return res;
 800b8c4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800b8c8:	4618      	mov	r0, r3
 800b8ca:	372c      	adds	r7, #44	@ 0x2c
 800b8cc:	46bd      	mov	sp, r7
 800b8ce:	bd90      	pop	{r4, r7, pc}
 800b8d0:	2000d11d 	.word	0x2000d11d

0800b8d4 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 800b8d4:	b580      	push	{r7, lr}
 800b8d6:	b082      	sub	sp, #8
 800b8d8:	af00      	add	r7, sp, #0
 800b8da:	4603      	mov	r3, r0
 800b8dc:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
	return SD_disk_initialize(pdrv);
 800b8de:	79fb      	ldrb	r3, [r7, #7]
 800b8e0:	4618      	mov	r0, r3
 800b8e2:	f7ff fcd9 	bl	800b298 <SD_disk_initialize>
 800b8e6:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 800b8e8:	4618      	mov	r0, r3
 800b8ea:	3708      	adds	r7, #8
 800b8ec:	46bd      	mov	sp, r7
 800b8ee:	bd80      	pop	{r7, pc}

0800b8f0 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 800b8f0:	b580      	push	{r7, lr}
 800b8f2:	b082      	sub	sp, #8
 800b8f4:	af00      	add	r7, sp, #0
 800b8f6:	4603      	mov	r3, r0
 800b8f8:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
	return SD_disk_status(pdrv);
 800b8fa:	79fb      	ldrb	r3, [r7, #7]
 800b8fc:	4618      	mov	r0, r3
 800b8fe:	f7ff fdb7 	bl	800b470 <SD_disk_status>
 800b902:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 800b904:	4618      	mov	r0, r3
 800b906:	3708      	adds	r7, #8
 800b908:	46bd      	mov	sp, r7
 800b90a:	bd80      	pop	{r7, pc}

0800b90c <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 800b90c:	b580      	push	{r7, lr}
 800b90e:	b084      	sub	sp, #16
 800b910:	af00      	add	r7, sp, #0
 800b912:	60b9      	str	r1, [r7, #8]
 800b914:	607a      	str	r2, [r7, #4]
 800b916:	603b      	str	r3, [r7, #0]
 800b918:	4603      	mov	r3, r0
 800b91a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
	return SD_disk_read(pdrv, buff, sector, count);
 800b91c:	7bf8      	ldrb	r0, [r7, #15]
 800b91e:	683b      	ldr	r3, [r7, #0]
 800b920:	687a      	ldr	r2, [r7, #4]
 800b922:	68b9      	ldr	r1, [r7, #8]
 800b924:	f7ff fdba 	bl	800b49c <SD_disk_read>
 800b928:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 800b92a:	4618      	mov	r0, r3
 800b92c:	3710      	adds	r7, #16
 800b92e:	46bd      	mov	sp, r7
 800b930:	bd80      	pop	{r7, pc}

0800b932 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 800b932:	b580      	push	{r7, lr}
 800b934:	b084      	sub	sp, #16
 800b936:	af00      	add	r7, sp, #0
 800b938:	60b9      	str	r1, [r7, #8]
 800b93a:	607a      	str	r2, [r7, #4]
 800b93c:	603b      	str	r3, [r7, #0]
 800b93e:	4603      	mov	r3, r0
 800b940:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
	return SD_disk_write(pdrv, buff, sector, count);
 800b942:	7bf8      	ldrb	r0, [r7, #15]
 800b944:	683b      	ldr	r3, [r7, #0]
 800b946:	687a      	ldr	r2, [r7, #4]
 800b948:	68b9      	ldr	r1, [r7, #8]
 800b94a:	f7ff fe11 	bl	800b570 <SD_disk_write>
 800b94e:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 800b950:	4618      	mov	r0, r3
 800b952:	3710      	adds	r7, #16
 800b954:	46bd      	mov	sp, r7
 800b956:	bd80      	pop	{r7, pc}

0800b958 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 800b958:	b580      	push	{r7, lr}
 800b95a:	b082      	sub	sp, #8
 800b95c:	af00      	add	r7, sp, #0
 800b95e:	4603      	mov	r3, r0
 800b960:	603a      	str	r2, [r7, #0]
 800b962:	71fb      	strb	r3, [r7, #7]
 800b964:	460b      	mov	r3, r1
 800b966:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
	return SD_disk_ioctl(pdrv, cmd, buff);
 800b968:	79b9      	ldrb	r1, [r7, #6]
 800b96a:	79fb      	ldrb	r3, [r7, #7]
 800b96c:	683a      	ldr	r2, [r7, #0]
 800b96e:	4618      	mov	r0, r3
 800b970:	f7ff fe82 	bl	800b678 <SD_disk_ioctl>
 800b974:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 800b976:	4618      	mov	r0, r3
 800b978:	3708      	adds	r7, #8
 800b97a:	46bd      	mov	sp, r7
 800b97c:	bd80      	pop	{r7, pc}
	...

0800b980 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800b980:	b480      	push	{r7}
 800b982:	b087      	sub	sp, #28
 800b984:	af00      	add	r7, sp, #0
 800b986:	60f8      	str	r0, [r7, #12]
 800b988:	60b9      	str	r1, [r7, #8]
 800b98a:	4613      	mov	r3, r2
 800b98c:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800b98e:	2301      	movs	r3, #1
 800b990:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800b992:	2300      	movs	r3, #0
 800b994:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800b996:	4b1f      	ldr	r3, [pc, #124]	@ (800ba14 <FATFS_LinkDriverEx+0x94>)
 800b998:	7a5b      	ldrb	r3, [r3, #9]
 800b99a:	b2db      	uxtb	r3, r3
 800b99c:	2b00      	cmp	r3, #0
 800b99e:	d131      	bne.n	800ba04 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800b9a0:	4b1c      	ldr	r3, [pc, #112]	@ (800ba14 <FATFS_LinkDriverEx+0x94>)
 800b9a2:	7a5b      	ldrb	r3, [r3, #9]
 800b9a4:	b2db      	uxtb	r3, r3
 800b9a6:	461a      	mov	r2, r3
 800b9a8:	4b1a      	ldr	r3, [pc, #104]	@ (800ba14 <FATFS_LinkDriverEx+0x94>)
 800b9aa:	2100      	movs	r1, #0
 800b9ac:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800b9ae:	4b19      	ldr	r3, [pc, #100]	@ (800ba14 <FATFS_LinkDriverEx+0x94>)
 800b9b0:	7a5b      	ldrb	r3, [r3, #9]
 800b9b2:	b2db      	uxtb	r3, r3
 800b9b4:	4a17      	ldr	r2, [pc, #92]	@ (800ba14 <FATFS_LinkDriverEx+0x94>)
 800b9b6:	009b      	lsls	r3, r3, #2
 800b9b8:	4413      	add	r3, r2
 800b9ba:	68fa      	ldr	r2, [r7, #12]
 800b9bc:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800b9be:	4b15      	ldr	r3, [pc, #84]	@ (800ba14 <FATFS_LinkDriverEx+0x94>)
 800b9c0:	7a5b      	ldrb	r3, [r3, #9]
 800b9c2:	b2db      	uxtb	r3, r3
 800b9c4:	461a      	mov	r2, r3
 800b9c6:	4b13      	ldr	r3, [pc, #76]	@ (800ba14 <FATFS_LinkDriverEx+0x94>)
 800b9c8:	4413      	add	r3, r2
 800b9ca:	79fa      	ldrb	r2, [r7, #7]
 800b9cc:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800b9ce:	4b11      	ldr	r3, [pc, #68]	@ (800ba14 <FATFS_LinkDriverEx+0x94>)
 800b9d0:	7a5b      	ldrb	r3, [r3, #9]
 800b9d2:	b2db      	uxtb	r3, r3
 800b9d4:	1c5a      	adds	r2, r3, #1
 800b9d6:	b2d1      	uxtb	r1, r2
 800b9d8:	4a0e      	ldr	r2, [pc, #56]	@ (800ba14 <FATFS_LinkDriverEx+0x94>)
 800b9da:	7251      	strb	r1, [r2, #9]
 800b9dc:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800b9de:	7dbb      	ldrb	r3, [r7, #22]
 800b9e0:	3330      	adds	r3, #48	@ 0x30
 800b9e2:	b2da      	uxtb	r2, r3
 800b9e4:	68bb      	ldr	r3, [r7, #8]
 800b9e6:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800b9e8:	68bb      	ldr	r3, [r7, #8]
 800b9ea:	3301      	adds	r3, #1
 800b9ec:	223a      	movs	r2, #58	@ 0x3a
 800b9ee:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800b9f0:	68bb      	ldr	r3, [r7, #8]
 800b9f2:	3302      	adds	r3, #2
 800b9f4:	222f      	movs	r2, #47	@ 0x2f
 800b9f6:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800b9f8:	68bb      	ldr	r3, [r7, #8]
 800b9fa:	3303      	adds	r3, #3
 800b9fc:	2200      	movs	r2, #0
 800b9fe:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800ba00:	2300      	movs	r3, #0
 800ba02:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800ba04:	7dfb      	ldrb	r3, [r7, #23]
}
 800ba06:	4618      	mov	r0, r3
 800ba08:	371c      	adds	r7, #28
 800ba0a:	46bd      	mov	sp, r7
 800ba0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba10:	4770      	bx	lr
 800ba12:	bf00      	nop
 800ba14:	200140cc 	.word	0x200140cc

0800ba18 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800ba18:	b580      	push	{r7, lr}
 800ba1a:	b082      	sub	sp, #8
 800ba1c:	af00      	add	r7, sp, #0
 800ba1e:	6078      	str	r0, [r7, #4]
 800ba20:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800ba22:	2200      	movs	r2, #0
 800ba24:	6839      	ldr	r1, [r7, #0]
 800ba26:	6878      	ldr	r0, [r7, #4]
 800ba28:	f7ff ffaa 	bl	800b980 <FATFS_LinkDriverEx>
 800ba2c:	4603      	mov	r3, r0
}
 800ba2e:	4618      	mov	r0, r3
 800ba30:	3708      	adds	r7, #8
 800ba32:	46bd      	mov	sp, r7
 800ba34:	bd80      	pop	{r7, pc}

0800ba36 <__cvt>:
 800ba36:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ba3a:	ec57 6b10 	vmov	r6, r7, d0
 800ba3e:	2f00      	cmp	r7, #0
 800ba40:	460c      	mov	r4, r1
 800ba42:	4619      	mov	r1, r3
 800ba44:	463b      	mov	r3, r7
 800ba46:	bfbb      	ittet	lt
 800ba48:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800ba4c:	461f      	movlt	r7, r3
 800ba4e:	2300      	movge	r3, #0
 800ba50:	232d      	movlt	r3, #45	@ 0x2d
 800ba52:	700b      	strb	r3, [r1, #0]
 800ba54:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800ba56:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800ba5a:	4691      	mov	r9, r2
 800ba5c:	f023 0820 	bic.w	r8, r3, #32
 800ba60:	bfbc      	itt	lt
 800ba62:	4632      	movlt	r2, r6
 800ba64:	4616      	movlt	r6, r2
 800ba66:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800ba6a:	d005      	beq.n	800ba78 <__cvt+0x42>
 800ba6c:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800ba70:	d100      	bne.n	800ba74 <__cvt+0x3e>
 800ba72:	3401      	adds	r4, #1
 800ba74:	2102      	movs	r1, #2
 800ba76:	e000      	b.n	800ba7a <__cvt+0x44>
 800ba78:	2103      	movs	r1, #3
 800ba7a:	ab03      	add	r3, sp, #12
 800ba7c:	9301      	str	r3, [sp, #4]
 800ba7e:	ab02      	add	r3, sp, #8
 800ba80:	9300      	str	r3, [sp, #0]
 800ba82:	ec47 6b10 	vmov	d0, r6, r7
 800ba86:	4653      	mov	r3, sl
 800ba88:	4622      	mov	r2, r4
 800ba8a:	f001 f9d5 	bl	800ce38 <_dtoa_r>
 800ba8e:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800ba92:	4605      	mov	r5, r0
 800ba94:	d119      	bne.n	800baca <__cvt+0x94>
 800ba96:	f019 0f01 	tst.w	r9, #1
 800ba9a:	d00e      	beq.n	800baba <__cvt+0x84>
 800ba9c:	eb00 0904 	add.w	r9, r0, r4
 800baa0:	2200      	movs	r2, #0
 800baa2:	2300      	movs	r3, #0
 800baa4:	4630      	mov	r0, r6
 800baa6:	4639      	mov	r1, r7
 800baa8:	f7f5 f816 	bl	8000ad8 <__aeabi_dcmpeq>
 800baac:	b108      	cbz	r0, 800bab2 <__cvt+0x7c>
 800baae:	f8cd 900c 	str.w	r9, [sp, #12]
 800bab2:	2230      	movs	r2, #48	@ 0x30
 800bab4:	9b03      	ldr	r3, [sp, #12]
 800bab6:	454b      	cmp	r3, r9
 800bab8:	d31e      	bcc.n	800baf8 <__cvt+0xc2>
 800baba:	9b03      	ldr	r3, [sp, #12]
 800babc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800babe:	1b5b      	subs	r3, r3, r5
 800bac0:	4628      	mov	r0, r5
 800bac2:	6013      	str	r3, [r2, #0]
 800bac4:	b004      	add	sp, #16
 800bac6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800baca:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800bace:	eb00 0904 	add.w	r9, r0, r4
 800bad2:	d1e5      	bne.n	800baa0 <__cvt+0x6a>
 800bad4:	7803      	ldrb	r3, [r0, #0]
 800bad6:	2b30      	cmp	r3, #48	@ 0x30
 800bad8:	d10a      	bne.n	800baf0 <__cvt+0xba>
 800bada:	2200      	movs	r2, #0
 800badc:	2300      	movs	r3, #0
 800bade:	4630      	mov	r0, r6
 800bae0:	4639      	mov	r1, r7
 800bae2:	f7f4 fff9 	bl	8000ad8 <__aeabi_dcmpeq>
 800bae6:	b918      	cbnz	r0, 800baf0 <__cvt+0xba>
 800bae8:	f1c4 0401 	rsb	r4, r4, #1
 800baec:	f8ca 4000 	str.w	r4, [sl]
 800baf0:	f8da 3000 	ldr.w	r3, [sl]
 800baf4:	4499      	add	r9, r3
 800baf6:	e7d3      	b.n	800baa0 <__cvt+0x6a>
 800baf8:	1c59      	adds	r1, r3, #1
 800bafa:	9103      	str	r1, [sp, #12]
 800bafc:	701a      	strb	r2, [r3, #0]
 800bafe:	e7d9      	b.n	800bab4 <__cvt+0x7e>

0800bb00 <__exponent>:
 800bb00:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800bb02:	2900      	cmp	r1, #0
 800bb04:	bfba      	itte	lt
 800bb06:	4249      	neglt	r1, r1
 800bb08:	232d      	movlt	r3, #45	@ 0x2d
 800bb0a:	232b      	movge	r3, #43	@ 0x2b
 800bb0c:	2909      	cmp	r1, #9
 800bb0e:	7002      	strb	r2, [r0, #0]
 800bb10:	7043      	strb	r3, [r0, #1]
 800bb12:	dd29      	ble.n	800bb68 <__exponent+0x68>
 800bb14:	f10d 0307 	add.w	r3, sp, #7
 800bb18:	461d      	mov	r5, r3
 800bb1a:	270a      	movs	r7, #10
 800bb1c:	461a      	mov	r2, r3
 800bb1e:	fbb1 f6f7 	udiv	r6, r1, r7
 800bb22:	fb07 1416 	mls	r4, r7, r6, r1
 800bb26:	3430      	adds	r4, #48	@ 0x30
 800bb28:	f802 4c01 	strb.w	r4, [r2, #-1]
 800bb2c:	460c      	mov	r4, r1
 800bb2e:	2c63      	cmp	r4, #99	@ 0x63
 800bb30:	f103 33ff 	add.w	r3, r3, #4294967295
 800bb34:	4631      	mov	r1, r6
 800bb36:	dcf1      	bgt.n	800bb1c <__exponent+0x1c>
 800bb38:	3130      	adds	r1, #48	@ 0x30
 800bb3a:	1e94      	subs	r4, r2, #2
 800bb3c:	f803 1c01 	strb.w	r1, [r3, #-1]
 800bb40:	1c41      	adds	r1, r0, #1
 800bb42:	4623      	mov	r3, r4
 800bb44:	42ab      	cmp	r3, r5
 800bb46:	d30a      	bcc.n	800bb5e <__exponent+0x5e>
 800bb48:	f10d 0309 	add.w	r3, sp, #9
 800bb4c:	1a9b      	subs	r3, r3, r2
 800bb4e:	42ac      	cmp	r4, r5
 800bb50:	bf88      	it	hi
 800bb52:	2300      	movhi	r3, #0
 800bb54:	3302      	adds	r3, #2
 800bb56:	4403      	add	r3, r0
 800bb58:	1a18      	subs	r0, r3, r0
 800bb5a:	b003      	add	sp, #12
 800bb5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bb5e:	f813 6b01 	ldrb.w	r6, [r3], #1
 800bb62:	f801 6f01 	strb.w	r6, [r1, #1]!
 800bb66:	e7ed      	b.n	800bb44 <__exponent+0x44>
 800bb68:	2330      	movs	r3, #48	@ 0x30
 800bb6a:	3130      	adds	r1, #48	@ 0x30
 800bb6c:	7083      	strb	r3, [r0, #2]
 800bb6e:	70c1      	strb	r1, [r0, #3]
 800bb70:	1d03      	adds	r3, r0, #4
 800bb72:	e7f1      	b.n	800bb58 <__exponent+0x58>

0800bb74 <_printf_float>:
 800bb74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bb78:	b08d      	sub	sp, #52	@ 0x34
 800bb7a:	460c      	mov	r4, r1
 800bb7c:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800bb80:	4616      	mov	r6, r2
 800bb82:	461f      	mov	r7, r3
 800bb84:	4605      	mov	r5, r0
 800bb86:	f001 f823 	bl	800cbd0 <_localeconv_r>
 800bb8a:	6803      	ldr	r3, [r0, #0]
 800bb8c:	9304      	str	r3, [sp, #16]
 800bb8e:	4618      	mov	r0, r3
 800bb90:	f7f4 fb76 	bl	8000280 <strlen>
 800bb94:	2300      	movs	r3, #0
 800bb96:	930a      	str	r3, [sp, #40]	@ 0x28
 800bb98:	f8d8 3000 	ldr.w	r3, [r8]
 800bb9c:	9005      	str	r0, [sp, #20]
 800bb9e:	3307      	adds	r3, #7
 800bba0:	f023 0307 	bic.w	r3, r3, #7
 800bba4:	f103 0208 	add.w	r2, r3, #8
 800bba8:	f894 a018 	ldrb.w	sl, [r4, #24]
 800bbac:	f8d4 b000 	ldr.w	fp, [r4]
 800bbb0:	f8c8 2000 	str.w	r2, [r8]
 800bbb4:	e9d3 8900 	ldrd	r8, r9, [r3]
 800bbb8:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800bbbc:	9307      	str	r3, [sp, #28]
 800bbbe:	f8cd 8018 	str.w	r8, [sp, #24]
 800bbc2:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800bbc6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800bbca:	4b9c      	ldr	r3, [pc, #624]	@ (800be3c <_printf_float+0x2c8>)
 800bbcc:	f04f 32ff 	mov.w	r2, #4294967295
 800bbd0:	f7f4 ffb4 	bl	8000b3c <__aeabi_dcmpun>
 800bbd4:	bb70      	cbnz	r0, 800bc34 <_printf_float+0xc0>
 800bbd6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800bbda:	4b98      	ldr	r3, [pc, #608]	@ (800be3c <_printf_float+0x2c8>)
 800bbdc:	f04f 32ff 	mov.w	r2, #4294967295
 800bbe0:	f7f4 ff8e 	bl	8000b00 <__aeabi_dcmple>
 800bbe4:	bb30      	cbnz	r0, 800bc34 <_printf_float+0xc0>
 800bbe6:	2200      	movs	r2, #0
 800bbe8:	2300      	movs	r3, #0
 800bbea:	4640      	mov	r0, r8
 800bbec:	4649      	mov	r1, r9
 800bbee:	f7f4 ff7d 	bl	8000aec <__aeabi_dcmplt>
 800bbf2:	b110      	cbz	r0, 800bbfa <_printf_float+0x86>
 800bbf4:	232d      	movs	r3, #45	@ 0x2d
 800bbf6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800bbfa:	4a91      	ldr	r2, [pc, #580]	@ (800be40 <_printf_float+0x2cc>)
 800bbfc:	4b91      	ldr	r3, [pc, #580]	@ (800be44 <_printf_float+0x2d0>)
 800bbfe:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800bc02:	bf8c      	ite	hi
 800bc04:	4690      	movhi	r8, r2
 800bc06:	4698      	movls	r8, r3
 800bc08:	2303      	movs	r3, #3
 800bc0a:	6123      	str	r3, [r4, #16]
 800bc0c:	f02b 0304 	bic.w	r3, fp, #4
 800bc10:	6023      	str	r3, [r4, #0]
 800bc12:	f04f 0900 	mov.w	r9, #0
 800bc16:	9700      	str	r7, [sp, #0]
 800bc18:	4633      	mov	r3, r6
 800bc1a:	aa0b      	add	r2, sp, #44	@ 0x2c
 800bc1c:	4621      	mov	r1, r4
 800bc1e:	4628      	mov	r0, r5
 800bc20:	f000 f9d2 	bl	800bfc8 <_printf_common>
 800bc24:	3001      	adds	r0, #1
 800bc26:	f040 808d 	bne.w	800bd44 <_printf_float+0x1d0>
 800bc2a:	f04f 30ff 	mov.w	r0, #4294967295
 800bc2e:	b00d      	add	sp, #52	@ 0x34
 800bc30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bc34:	4642      	mov	r2, r8
 800bc36:	464b      	mov	r3, r9
 800bc38:	4640      	mov	r0, r8
 800bc3a:	4649      	mov	r1, r9
 800bc3c:	f7f4 ff7e 	bl	8000b3c <__aeabi_dcmpun>
 800bc40:	b140      	cbz	r0, 800bc54 <_printf_float+0xe0>
 800bc42:	464b      	mov	r3, r9
 800bc44:	2b00      	cmp	r3, #0
 800bc46:	bfbc      	itt	lt
 800bc48:	232d      	movlt	r3, #45	@ 0x2d
 800bc4a:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800bc4e:	4a7e      	ldr	r2, [pc, #504]	@ (800be48 <_printf_float+0x2d4>)
 800bc50:	4b7e      	ldr	r3, [pc, #504]	@ (800be4c <_printf_float+0x2d8>)
 800bc52:	e7d4      	b.n	800bbfe <_printf_float+0x8a>
 800bc54:	6863      	ldr	r3, [r4, #4]
 800bc56:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800bc5a:	9206      	str	r2, [sp, #24]
 800bc5c:	1c5a      	adds	r2, r3, #1
 800bc5e:	d13b      	bne.n	800bcd8 <_printf_float+0x164>
 800bc60:	2306      	movs	r3, #6
 800bc62:	6063      	str	r3, [r4, #4]
 800bc64:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800bc68:	2300      	movs	r3, #0
 800bc6a:	6022      	str	r2, [r4, #0]
 800bc6c:	9303      	str	r3, [sp, #12]
 800bc6e:	ab0a      	add	r3, sp, #40	@ 0x28
 800bc70:	e9cd a301 	strd	sl, r3, [sp, #4]
 800bc74:	ab09      	add	r3, sp, #36	@ 0x24
 800bc76:	9300      	str	r3, [sp, #0]
 800bc78:	6861      	ldr	r1, [r4, #4]
 800bc7a:	ec49 8b10 	vmov	d0, r8, r9
 800bc7e:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800bc82:	4628      	mov	r0, r5
 800bc84:	f7ff fed7 	bl	800ba36 <__cvt>
 800bc88:	9b06      	ldr	r3, [sp, #24]
 800bc8a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800bc8c:	2b47      	cmp	r3, #71	@ 0x47
 800bc8e:	4680      	mov	r8, r0
 800bc90:	d129      	bne.n	800bce6 <_printf_float+0x172>
 800bc92:	1cc8      	adds	r0, r1, #3
 800bc94:	db02      	blt.n	800bc9c <_printf_float+0x128>
 800bc96:	6863      	ldr	r3, [r4, #4]
 800bc98:	4299      	cmp	r1, r3
 800bc9a:	dd41      	ble.n	800bd20 <_printf_float+0x1ac>
 800bc9c:	f1aa 0a02 	sub.w	sl, sl, #2
 800bca0:	fa5f fa8a 	uxtb.w	sl, sl
 800bca4:	3901      	subs	r1, #1
 800bca6:	4652      	mov	r2, sl
 800bca8:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800bcac:	9109      	str	r1, [sp, #36]	@ 0x24
 800bcae:	f7ff ff27 	bl	800bb00 <__exponent>
 800bcb2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800bcb4:	1813      	adds	r3, r2, r0
 800bcb6:	2a01      	cmp	r2, #1
 800bcb8:	4681      	mov	r9, r0
 800bcba:	6123      	str	r3, [r4, #16]
 800bcbc:	dc02      	bgt.n	800bcc4 <_printf_float+0x150>
 800bcbe:	6822      	ldr	r2, [r4, #0]
 800bcc0:	07d2      	lsls	r2, r2, #31
 800bcc2:	d501      	bpl.n	800bcc8 <_printf_float+0x154>
 800bcc4:	3301      	adds	r3, #1
 800bcc6:	6123      	str	r3, [r4, #16]
 800bcc8:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800bccc:	2b00      	cmp	r3, #0
 800bcce:	d0a2      	beq.n	800bc16 <_printf_float+0xa2>
 800bcd0:	232d      	movs	r3, #45	@ 0x2d
 800bcd2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800bcd6:	e79e      	b.n	800bc16 <_printf_float+0xa2>
 800bcd8:	9a06      	ldr	r2, [sp, #24]
 800bcda:	2a47      	cmp	r2, #71	@ 0x47
 800bcdc:	d1c2      	bne.n	800bc64 <_printf_float+0xf0>
 800bcde:	2b00      	cmp	r3, #0
 800bce0:	d1c0      	bne.n	800bc64 <_printf_float+0xf0>
 800bce2:	2301      	movs	r3, #1
 800bce4:	e7bd      	b.n	800bc62 <_printf_float+0xee>
 800bce6:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800bcea:	d9db      	bls.n	800bca4 <_printf_float+0x130>
 800bcec:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800bcf0:	d118      	bne.n	800bd24 <_printf_float+0x1b0>
 800bcf2:	2900      	cmp	r1, #0
 800bcf4:	6863      	ldr	r3, [r4, #4]
 800bcf6:	dd0b      	ble.n	800bd10 <_printf_float+0x19c>
 800bcf8:	6121      	str	r1, [r4, #16]
 800bcfa:	b913      	cbnz	r3, 800bd02 <_printf_float+0x18e>
 800bcfc:	6822      	ldr	r2, [r4, #0]
 800bcfe:	07d0      	lsls	r0, r2, #31
 800bd00:	d502      	bpl.n	800bd08 <_printf_float+0x194>
 800bd02:	3301      	adds	r3, #1
 800bd04:	440b      	add	r3, r1
 800bd06:	6123      	str	r3, [r4, #16]
 800bd08:	65a1      	str	r1, [r4, #88]	@ 0x58
 800bd0a:	f04f 0900 	mov.w	r9, #0
 800bd0e:	e7db      	b.n	800bcc8 <_printf_float+0x154>
 800bd10:	b913      	cbnz	r3, 800bd18 <_printf_float+0x1a4>
 800bd12:	6822      	ldr	r2, [r4, #0]
 800bd14:	07d2      	lsls	r2, r2, #31
 800bd16:	d501      	bpl.n	800bd1c <_printf_float+0x1a8>
 800bd18:	3302      	adds	r3, #2
 800bd1a:	e7f4      	b.n	800bd06 <_printf_float+0x192>
 800bd1c:	2301      	movs	r3, #1
 800bd1e:	e7f2      	b.n	800bd06 <_printf_float+0x192>
 800bd20:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800bd24:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bd26:	4299      	cmp	r1, r3
 800bd28:	db05      	blt.n	800bd36 <_printf_float+0x1c2>
 800bd2a:	6823      	ldr	r3, [r4, #0]
 800bd2c:	6121      	str	r1, [r4, #16]
 800bd2e:	07d8      	lsls	r0, r3, #31
 800bd30:	d5ea      	bpl.n	800bd08 <_printf_float+0x194>
 800bd32:	1c4b      	adds	r3, r1, #1
 800bd34:	e7e7      	b.n	800bd06 <_printf_float+0x192>
 800bd36:	2900      	cmp	r1, #0
 800bd38:	bfd4      	ite	le
 800bd3a:	f1c1 0202 	rsble	r2, r1, #2
 800bd3e:	2201      	movgt	r2, #1
 800bd40:	4413      	add	r3, r2
 800bd42:	e7e0      	b.n	800bd06 <_printf_float+0x192>
 800bd44:	6823      	ldr	r3, [r4, #0]
 800bd46:	055a      	lsls	r2, r3, #21
 800bd48:	d407      	bmi.n	800bd5a <_printf_float+0x1e6>
 800bd4a:	6923      	ldr	r3, [r4, #16]
 800bd4c:	4642      	mov	r2, r8
 800bd4e:	4631      	mov	r1, r6
 800bd50:	4628      	mov	r0, r5
 800bd52:	47b8      	blx	r7
 800bd54:	3001      	adds	r0, #1
 800bd56:	d12b      	bne.n	800bdb0 <_printf_float+0x23c>
 800bd58:	e767      	b.n	800bc2a <_printf_float+0xb6>
 800bd5a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800bd5e:	f240 80dd 	bls.w	800bf1c <_printf_float+0x3a8>
 800bd62:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800bd66:	2200      	movs	r2, #0
 800bd68:	2300      	movs	r3, #0
 800bd6a:	f7f4 feb5 	bl	8000ad8 <__aeabi_dcmpeq>
 800bd6e:	2800      	cmp	r0, #0
 800bd70:	d033      	beq.n	800bdda <_printf_float+0x266>
 800bd72:	4a37      	ldr	r2, [pc, #220]	@ (800be50 <_printf_float+0x2dc>)
 800bd74:	2301      	movs	r3, #1
 800bd76:	4631      	mov	r1, r6
 800bd78:	4628      	mov	r0, r5
 800bd7a:	47b8      	blx	r7
 800bd7c:	3001      	adds	r0, #1
 800bd7e:	f43f af54 	beq.w	800bc2a <_printf_float+0xb6>
 800bd82:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800bd86:	4543      	cmp	r3, r8
 800bd88:	db02      	blt.n	800bd90 <_printf_float+0x21c>
 800bd8a:	6823      	ldr	r3, [r4, #0]
 800bd8c:	07d8      	lsls	r0, r3, #31
 800bd8e:	d50f      	bpl.n	800bdb0 <_printf_float+0x23c>
 800bd90:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800bd94:	4631      	mov	r1, r6
 800bd96:	4628      	mov	r0, r5
 800bd98:	47b8      	blx	r7
 800bd9a:	3001      	adds	r0, #1
 800bd9c:	f43f af45 	beq.w	800bc2a <_printf_float+0xb6>
 800bda0:	f04f 0900 	mov.w	r9, #0
 800bda4:	f108 38ff 	add.w	r8, r8, #4294967295
 800bda8:	f104 0a1a 	add.w	sl, r4, #26
 800bdac:	45c8      	cmp	r8, r9
 800bdae:	dc09      	bgt.n	800bdc4 <_printf_float+0x250>
 800bdb0:	6823      	ldr	r3, [r4, #0]
 800bdb2:	079b      	lsls	r3, r3, #30
 800bdb4:	f100 8103 	bmi.w	800bfbe <_printf_float+0x44a>
 800bdb8:	68e0      	ldr	r0, [r4, #12]
 800bdba:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800bdbc:	4298      	cmp	r0, r3
 800bdbe:	bfb8      	it	lt
 800bdc0:	4618      	movlt	r0, r3
 800bdc2:	e734      	b.n	800bc2e <_printf_float+0xba>
 800bdc4:	2301      	movs	r3, #1
 800bdc6:	4652      	mov	r2, sl
 800bdc8:	4631      	mov	r1, r6
 800bdca:	4628      	mov	r0, r5
 800bdcc:	47b8      	blx	r7
 800bdce:	3001      	adds	r0, #1
 800bdd0:	f43f af2b 	beq.w	800bc2a <_printf_float+0xb6>
 800bdd4:	f109 0901 	add.w	r9, r9, #1
 800bdd8:	e7e8      	b.n	800bdac <_printf_float+0x238>
 800bdda:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bddc:	2b00      	cmp	r3, #0
 800bdde:	dc39      	bgt.n	800be54 <_printf_float+0x2e0>
 800bde0:	4a1b      	ldr	r2, [pc, #108]	@ (800be50 <_printf_float+0x2dc>)
 800bde2:	2301      	movs	r3, #1
 800bde4:	4631      	mov	r1, r6
 800bde6:	4628      	mov	r0, r5
 800bde8:	47b8      	blx	r7
 800bdea:	3001      	adds	r0, #1
 800bdec:	f43f af1d 	beq.w	800bc2a <_printf_float+0xb6>
 800bdf0:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800bdf4:	ea59 0303 	orrs.w	r3, r9, r3
 800bdf8:	d102      	bne.n	800be00 <_printf_float+0x28c>
 800bdfa:	6823      	ldr	r3, [r4, #0]
 800bdfc:	07d9      	lsls	r1, r3, #31
 800bdfe:	d5d7      	bpl.n	800bdb0 <_printf_float+0x23c>
 800be00:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800be04:	4631      	mov	r1, r6
 800be06:	4628      	mov	r0, r5
 800be08:	47b8      	blx	r7
 800be0a:	3001      	adds	r0, #1
 800be0c:	f43f af0d 	beq.w	800bc2a <_printf_float+0xb6>
 800be10:	f04f 0a00 	mov.w	sl, #0
 800be14:	f104 0b1a 	add.w	fp, r4, #26
 800be18:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800be1a:	425b      	negs	r3, r3
 800be1c:	4553      	cmp	r3, sl
 800be1e:	dc01      	bgt.n	800be24 <_printf_float+0x2b0>
 800be20:	464b      	mov	r3, r9
 800be22:	e793      	b.n	800bd4c <_printf_float+0x1d8>
 800be24:	2301      	movs	r3, #1
 800be26:	465a      	mov	r2, fp
 800be28:	4631      	mov	r1, r6
 800be2a:	4628      	mov	r0, r5
 800be2c:	47b8      	blx	r7
 800be2e:	3001      	adds	r0, #1
 800be30:	f43f aefb 	beq.w	800bc2a <_printf_float+0xb6>
 800be34:	f10a 0a01 	add.w	sl, sl, #1
 800be38:	e7ee      	b.n	800be18 <_printf_float+0x2a4>
 800be3a:	bf00      	nop
 800be3c:	7fefffff 	.word	0x7fefffff
 800be40:	08011ae8 	.word	0x08011ae8
 800be44:	08011ae4 	.word	0x08011ae4
 800be48:	08011af0 	.word	0x08011af0
 800be4c:	08011aec 	.word	0x08011aec
 800be50:	08011af4 	.word	0x08011af4
 800be54:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800be56:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800be5a:	4553      	cmp	r3, sl
 800be5c:	bfa8      	it	ge
 800be5e:	4653      	movge	r3, sl
 800be60:	2b00      	cmp	r3, #0
 800be62:	4699      	mov	r9, r3
 800be64:	dc36      	bgt.n	800bed4 <_printf_float+0x360>
 800be66:	f04f 0b00 	mov.w	fp, #0
 800be6a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800be6e:	f104 021a 	add.w	r2, r4, #26
 800be72:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800be74:	9306      	str	r3, [sp, #24]
 800be76:	eba3 0309 	sub.w	r3, r3, r9
 800be7a:	455b      	cmp	r3, fp
 800be7c:	dc31      	bgt.n	800bee2 <_printf_float+0x36e>
 800be7e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800be80:	459a      	cmp	sl, r3
 800be82:	dc3a      	bgt.n	800befa <_printf_float+0x386>
 800be84:	6823      	ldr	r3, [r4, #0]
 800be86:	07da      	lsls	r2, r3, #31
 800be88:	d437      	bmi.n	800befa <_printf_float+0x386>
 800be8a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800be8c:	ebaa 0903 	sub.w	r9, sl, r3
 800be90:	9b06      	ldr	r3, [sp, #24]
 800be92:	ebaa 0303 	sub.w	r3, sl, r3
 800be96:	4599      	cmp	r9, r3
 800be98:	bfa8      	it	ge
 800be9a:	4699      	movge	r9, r3
 800be9c:	f1b9 0f00 	cmp.w	r9, #0
 800bea0:	dc33      	bgt.n	800bf0a <_printf_float+0x396>
 800bea2:	f04f 0800 	mov.w	r8, #0
 800bea6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800beaa:	f104 0b1a 	add.w	fp, r4, #26
 800beae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800beb0:	ebaa 0303 	sub.w	r3, sl, r3
 800beb4:	eba3 0309 	sub.w	r3, r3, r9
 800beb8:	4543      	cmp	r3, r8
 800beba:	f77f af79 	ble.w	800bdb0 <_printf_float+0x23c>
 800bebe:	2301      	movs	r3, #1
 800bec0:	465a      	mov	r2, fp
 800bec2:	4631      	mov	r1, r6
 800bec4:	4628      	mov	r0, r5
 800bec6:	47b8      	blx	r7
 800bec8:	3001      	adds	r0, #1
 800beca:	f43f aeae 	beq.w	800bc2a <_printf_float+0xb6>
 800bece:	f108 0801 	add.w	r8, r8, #1
 800bed2:	e7ec      	b.n	800beae <_printf_float+0x33a>
 800bed4:	4642      	mov	r2, r8
 800bed6:	4631      	mov	r1, r6
 800bed8:	4628      	mov	r0, r5
 800beda:	47b8      	blx	r7
 800bedc:	3001      	adds	r0, #1
 800bede:	d1c2      	bne.n	800be66 <_printf_float+0x2f2>
 800bee0:	e6a3      	b.n	800bc2a <_printf_float+0xb6>
 800bee2:	2301      	movs	r3, #1
 800bee4:	4631      	mov	r1, r6
 800bee6:	4628      	mov	r0, r5
 800bee8:	9206      	str	r2, [sp, #24]
 800beea:	47b8      	blx	r7
 800beec:	3001      	adds	r0, #1
 800beee:	f43f ae9c 	beq.w	800bc2a <_printf_float+0xb6>
 800bef2:	9a06      	ldr	r2, [sp, #24]
 800bef4:	f10b 0b01 	add.w	fp, fp, #1
 800bef8:	e7bb      	b.n	800be72 <_printf_float+0x2fe>
 800befa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800befe:	4631      	mov	r1, r6
 800bf00:	4628      	mov	r0, r5
 800bf02:	47b8      	blx	r7
 800bf04:	3001      	adds	r0, #1
 800bf06:	d1c0      	bne.n	800be8a <_printf_float+0x316>
 800bf08:	e68f      	b.n	800bc2a <_printf_float+0xb6>
 800bf0a:	9a06      	ldr	r2, [sp, #24]
 800bf0c:	464b      	mov	r3, r9
 800bf0e:	4442      	add	r2, r8
 800bf10:	4631      	mov	r1, r6
 800bf12:	4628      	mov	r0, r5
 800bf14:	47b8      	blx	r7
 800bf16:	3001      	adds	r0, #1
 800bf18:	d1c3      	bne.n	800bea2 <_printf_float+0x32e>
 800bf1a:	e686      	b.n	800bc2a <_printf_float+0xb6>
 800bf1c:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800bf20:	f1ba 0f01 	cmp.w	sl, #1
 800bf24:	dc01      	bgt.n	800bf2a <_printf_float+0x3b6>
 800bf26:	07db      	lsls	r3, r3, #31
 800bf28:	d536      	bpl.n	800bf98 <_printf_float+0x424>
 800bf2a:	2301      	movs	r3, #1
 800bf2c:	4642      	mov	r2, r8
 800bf2e:	4631      	mov	r1, r6
 800bf30:	4628      	mov	r0, r5
 800bf32:	47b8      	blx	r7
 800bf34:	3001      	adds	r0, #1
 800bf36:	f43f ae78 	beq.w	800bc2a <_printf_float+0xb6>
 800bf3a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800bf3e:	4631      	mov	r1, r6
 800bf40:	4628      	mov	r0, r5
 800bf42:	47b8      	blx	r7
 800bf44:	3001      	adds	r0, #1
 800bf46:	f43f ae70 	beq.w	800bc2a <_printf_float+0xb6>
 800bf4a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800bf4e:	2200      	movs	r2, #0
 800bf50:	2300      	movs	r3, #0
 800bf52:	f10a 3aff 	add.w	sl, sl, #4294967295
 800bf56:	f7f4 fdbf 	bl	8000ad8 <__aeabi_dcmpeq>
 800bf5a:	b9c0      	cbnz	r0, 800bf8e <_printf_float+0x41a>
 800bf5c:	4653      	mov	r3, sl
 800bf5e:	f108 0201 	add.w	r2, r8, #1
 800bf62:	4631      	mov	r1, r6
 800bf64:	4628      	mov	r0, r5
 800bf66:	47b8      	blx	r7
 800bf68:	3001      	adds	r0, #1
 800bf6a:	d10c      	bne.n	800bf86 <_printf_float+0x412>
 800bf6c:	e65d      	b.n	800bc2a <_printf_float+0xb6>
 800bf6e:	2301      	movs	r3, #1
 800bf70:	465a      	mov	r2, fp
 800bf72:	4631      	mov	r1, r6
 800bf74:	4628      	mov	r0, r5
 800bf76:	47b8      	blx	r7
 800bf78:	3001      	adds	r0, #1
 800bf7a:	f43f ae56 	beq.w	800bc2a <_printf_float+0xb6>
 800bf7e:	f108 0801 	add.w	r8, r8, #1
 800bf82:	45d0      	cmp	r8, sl
 800bf84:	dbf3      	blt.n	800bf6e <_printf_float+0x3fa>
 800bf86:	464b      	mov	r3, r9
 800bf88:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800bf8c:	e6df      	b.n	800bd4e <_printf_float+0x1da>
 800bf8e:	f04f 0800 	mov.w	r8, #0
 800bf92:	f104 0b1a 	add.w	fp, r4, #26
 800bf96:	e7f4      	b.n	800bf82 <_printf_float+0x40e>
 800bf98:	2301      	movs	r3, #1
 800bf9a:	4642      	mov	r2, r8
 800bf9c:	e7e1      	b.n	800bf62 <_printf_float+0x3ee>
 800bf9e:	2301      	movs	r3, #1
 800bfa0:	464a      	mov	r2, r9
 800bfa2:	4631      	mov	r1, r6
 800bfa4:	4628      	mov	r0, r5
 800bfa6:	47b8      	blx	r7
 800bfa8:	3001      	adds	r0, #1
 800bfaa:	f43f ae3e 	beq.w	800bc2a <_printf_float+0xb6>
 800bfae:	f108 0801 	add.w	r8, r8, #1
 800bfb2:	68e3      	ldr	r3, [r4, #12]
 800bfb4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800bfb6:	1a5b      	subs	r3, r3, r1
 800bfb8:	4543      	cmp	r3, r8
 800bfba:	dcf0      	bgt.n	800bf9e <_printf_float+0x42a>
 800bfbc:	e6fc      	b.n	800bdb8 <_printf_float+0x244>
 800bfbe:	f04f 0800 	mov.w	r8, #0
 800bfc2:	f104 0919 	add.w	r9, r4, #25
 800bfc6:	e7f4      	b.n	800bfb2 <_printf_float+0x43e>

0800bfc8 <_printf_common>:
 800bfc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bfcc:	4616      	mov	r6, r2
 800bfce:	4698      	mov	r8, r3
 800bfd0:	688a      	ldr	r2, [r1, #8]
 800bfd2:	690b      	ldr	r3, [r1, #16]
 800bfd4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800bfd8:	4293      	cmp	r3, r2
 800bfda:	bfb8      	it	lt
 800bfdc:	4613      	movlt	r3, r2
 800bfde:	6033      	str	r3, [r6, #0]
 800bfe0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800bfe4:	4607      	mov	r7, r0
 800bfe6:	460c      	mov	r4, r1
 800bfe8:	b10a      	cbz	r2, 800bfee <_printf_common+0x26>
 800bfea:	3301      	adds	r3, #1
 800bfec:	6033      	str	r3, [r6, #0]
 800bfee:	6823      	ldr	r3, [r4, #0]
 800bff0:	0699      	lsls	r1, r3, #26
 800bff2:	bf42      	ittt	mi
 800bff4:	6833      	ldrmi	r3, [r6, #0]
 800bff6:	3302      	addmi	r3, #2
 800bff8:	6033      	strmi	r3, [r6, #0]
 800bffa:	6825      	ldr	r5, [r4, #0]
 800bffc:	f015 0506 	ands.w	r5, r5, #6
 800c000:	d106      	bne.n	800c010 <_printf_common+0x48>
 800c002:	f104 0a19 	add.w	sl, r4, #25
 800c006:	68e3      	ldr	r3, [r4, #12]
 800c008:	6832      	ldr	r2, [r6, #0]
 800c00a:	1a9b      	subs	r3, r3, r2
 800c00c:	42ab      	cmp	r3, r5
 800c00e:	dc26      	bgt.n	800c05e <_printf_common+0x96>
 800c010:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800c014:	6822      	ldr	r2, [r4, #0]
 800c016:	3b00      	subs	r3, #0
 800c018:	bf18      	it	ne
 800c01a:	2301      	movne	r3, #1
 800c01c:	0692      	lsls	r2, r2, #26
 800c01e:	d42b      	bmi.n	800c078 <_printf_common+0xb0>
 800c020:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800c024:	4641      	mov	r1, r8
 800c026:	4638      	mov	r0, r7
 800c028:	47c8      	blx	r9
 800c02a:	3001      	adds	r0, #1
 800c02c:	d01e      	beq.n	800c06c <_printf_common+0xa4>
 800c02e:	6823      	ldr	r3, [r4, #0]
 800c030:	6922      	ldr	r2, [r4, #16]
 800c032:	f003 0306 	and.w	r3, r3, #6
 800c036:	2b04      	cmp	r3, #4
 800c038:	bf02      	ittt	eq
 800c03a:	68e5      	ldreq	r5, [r4, #12]
 800c03c:	6833      	ldreq	r3, [r6, #0]
 800c03e:	1aed      	subeq	r5, r5, r3
 800c040:	68a3      	ldr	r3, [r4, #8]
 800c042:	bf0c      	ite	eq
 800c044:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c048:	2500      	movne	r5, #0
 800c04a:	4293      	cmp	r3, r2
 800c04c:	bfc4      	itt	gt
 800c04e:	1a9b      	subgt	r3, r3, r2
 800c050:	18ed      	addgt	r5, r5, r3
 800c052:	2600      	movs	r6, #0
 800c054:	341a      	adds	r4, #26
 800c056:	42b5      	cmp	r5, r6
 800c058:	d11a      	bne.n	800c090 <_printf_common+0xc8>
 800c05a:	2000      	movs	r0, #0
 800c05c:	e008      	b.n	800c070 <_printf_common+0xa8>
 800c05e:	2301      	movs	r3, #1
 800c060:	4652      	mov	r2, sl
 800c062:	4641      	mov	r1, r8
 800c064:	4638      	mov	r0, r7
 800c066:	47c8      	blx	r9
 800c068:	3001      	adds	r0, #1
 800c06a:	d103      	bne.n	800c074 <_printf_common+0xac>
 800c06c:	f04f 30ff 	mov.w	r0, #4294967295
 800c070:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c074:	3501      	adds	r5, #1
 800c076:	e7c6      	b.n	800c006 <_printf_common+0x3e>
 800c078:	18e1      	adds	r1, r4, r3
 800c07a:	1c5a      	adds	r2, r3, #1
 800c07c:	2030      	movs	r0, #48	@ 0x30
 800c07e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800c082:	4422      	add	r2, r4
 800c084:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800c088:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800c08c:	3302      	adds	r3, #2
 800c08e:	e7c7      	b.n	800c020 <_printf_common+0x58>
 800c090:	2301      	movs	r3, #1
 800c092:	4622      	mov	r2, r4
 800c094:	4641      	mov	r1, r8
 800c096:	4638      	mov	r0, r7
 800c098:	47c8      	blx	r9
 800c09a:	3001      	adds	r0, #1
 800c09c:	d0e6      	beq.n	800c06c <_printf_common+0xa4>
 800c09e:	3601      	adds	r6, #1
 800c0a0:	e7d9      	b.n	800c056 <_printf_common+0x8e>
	...

0800c0a4 <_printf_i>:
 800c0a4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c0a8:	7e0f      	ldrb	r7, [r1, #24]
 800c0aa:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800c0ac:	2f78      	cmp	r7, #120	@ 0x78
 800c0ae:	4691      	mov	r9, r2
 800c0b0:	4680      	mov	r8, r0
 800c0b2:	460c      	mov	r4, r1
 800c0b4:	469a      	mov	sl, r3
 800c0b6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800c0ba:	d807      	bhi.n	800c0cc <_printf_i+0x28>
 800c0bc:	2f62      	cmp	r7, #98	@ 0x62
 800c0be:	d80a      	bhi.n	800c0d6 <_printf_i+0x32>
 800c0c0:	2f00      	cmp	r7, #0
 800c0c2:	f000 80d1 	beq.w	800c268 <_printf_i+0x1c4>
 800c0c6:	2f58      	cmp	r7, #88	@ 0x58
 800c0c8:	f000 80b8 	beq.w	800c23c <_printf_i+0x198>
 800c0cc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800c0d0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800c0d4:	e03a      	b.n	800c14c <_printf_i+0xa8>
 800c0d6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800c0da:	2b15      	cmp	r3, #21
 800c0dc:	d8f6      	bhi.n	800c0cc <_printf_i+0x28>
 800c0de:	a101      	add	r1, pc, #4	@ (adr r1, 800c0e4 <_printf_i+0x40>)
 800c0e0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800c0e4:	0800c13d 	.word	0x0800c13d
 800c0e8:	0800c151 	.word	0x0800c151
 800c0ec:	0800c0cd 	.word	0x0800c0cd
 800c0f0:	0800c0cd 	.word	0x0800c0cd
 800c0f4:	0800c0cd 	.word	0x0800c0cd
 800c0f8:	0800c0cd 	.word	0x0800c0cd
 800c0fc:	0800c151 	.word	0x0800c151
 800c100:	0800c0cd 	.word	0x0800c0cd
 800c104:	0800c0cd 	.word	0x0800c0cd
 800c108:	0800c0cd 	.word	0x0800c0cd
 800c10c:	0800c0cd 	.word	0x0800c0cd
 800c110:	0800c24f 	.word	0x0800c24f
 800c114:	0800c17b 	.word	0x0800c17b
 800c118:	0800c209 	.word	0x0800c209
 800c11c:	0800c0cd 	.word	0x0800c0cd
 800c120:	0800c0cd 	.word	0x0800c0cd
 800c124:	0800c271 	.word	0x0800c271
 800c128:	0800c0cd 	.word	0x0800c0cd
 800c12c:	0800c17b 	.word	0x0800c17b
 800c130:	0800c0cd 	.word	0x0800c0cd
 800c134:	0800c0cd 	.word	0x0800c0cd
 800c138:	0800c211 	.word	0x0800c211
 800c13c:	6833      	ldr	r3, [r6, #0]
 800c13e:	1d1a      	adds	r2, r3, #4
 800c140:	681b      	ldr	r3, [r3, #0]
 800c142:	6032      	str	r2, [r6, #0]
 800c144:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800c148:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800c14c:	2301      	movs	r3, #1
 800c14e:	e09c      	b.n	800c28a <_printf_i+0x1e6>
 800c150:	6833      	ldr	r3, [r6, #0]
 800c152:	6820      	ldr	r0, [r4, #0]
 800c154:	1d19      	adds	r1, r3, #4
 800c156:	6031      	str	r1, [r6, #0]
 800c158:	0606      	lsls	r6, r0, #24
 800c15a:	d501      	bpl.n	800c160 <_printf_i+0xbc>
 800c15c:	681d      	ldr	r5, [r3, #0]
 800c15e:	e003      	b.n	800c168 <_printf_i+0xc4>
 800c160:	0645      	lsls	r5, r0, #25
 800c162:	d5fb      	bpl.n	800c15c <_printf_i+0xb8>
 800c164:	f9b3 5000 	ldrsh.w	r5, [r3]
 800c168:	2d00      	cmp	r5, #0
 800c16a:	da03      	bge.n	800c174 <_printf_i+0xd0>
 800c16c:	232d      	movs	r3, #45	@ 0x2d
 800c16e:	426d      	negs	r5, r5
 800c170:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c174:	4858      	ldr	r0, [pc, #352]	@ (800c2d8 <_printf_i+0x234>)
 800c176:	230a      	movs	r3, #10
 800c178:	e011      	b.n	800c19e <_printf_i+0xfa>
 800c17a:	6821      	ldr	r1, [r4, #0]
 800c17c:	6833      	ldr	r3, [r6, #0]
 800c17e:	0608      	lsls	r0, r1, #24
 800c180:	f853 5b04 	ldr.w	r5, [r3], #4
 800c184:	d402      	bmi.n	800c18c <_printf_i+0xe8>
 800c186:	0649      	lsls	r1, r1, #25
 800c188:	bf48      	it	mi
 800c18a:	b2ad      	uxthmi	r5, r5
 800c18c:	2f6f      	cmp	r7, #111	@ 0x6f
 800c18e:	4852      	ldr	r0, [pc, #328]	@ (800c2d8 <_printf_i+0x234>)
 800c190:	6033      	str	r3, [r6, #0]
 800c192:	bf14      	ite	ne
 800c194:	230a      	movne	r3, #10
 800c196:	2308      	moveq	r3, #8
 800c198:	2100      	movs	r1, #0
 800c19a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800c19e:	6866      	ldr	r6, [r4, #4]
 800c1a0:	60a6      	str	r6, [r4, #8]
 800c1a2:	2e00      	cmp	r6, #0
 800c1a4:	db05      	blt.n	800c1b2 <_printf_i+0x10e>
 800c1a6:	6821      	ldr	r1, [r4, #0]
 800c1a8:	432e      	orrs	r6, r5
 800c1aa:	f021 0104 	bic.w	r1, r1, #4
 800c1ae:	6021      	str	r1, [r4, #0]
 800c1b0:	d04b      	beq.n	800c24a <_printf_i+0x1a6>
 800c1b2:	4616      	mov	r6, r2
 800c1b4:	fbb5 f1f3 	udiv	r1, r5, r3
 800c1b8:	fb03 5711 	mls	r7, r3, r1, r5
 800c1bc:	5dc7      	ldrb	r7, [r0, r7]
 800c1be:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800c1c2:	462f      	mov	r7, r5
 800c1c4:	42bb      	cmp	r3, r7
 800c1c6:	460d      	mov	r5, r1
 800c1c8:	d9f4      	bls.n	800c1b4 <_printf_i+0x110>
 800c1ca:	2b08      	cmp	r3, #8
 800c1cc:	d10b      	bne.n	800c1e6 <_printf_i+0x142>
 800c1ce:	6823      	ldr	r3, [r4, #0]
 800c1d0:	07df      	lsls	r7, r3, #31
 800c1d2:	d508      	bpl.n	800c1e6 <_printf_i+0x142>
 800c1d4:	6923      	ldr	r3, [r4, #16]
 800c1d6:	6861      	ldr	r1, [r4, #4]
 800c1d8:	4299      	cmp	r1, r3
 800c1da:	bfde      	ittt	le
 800c1dc:	2330      	movle	r3, #48	@ 0x30
 800c1de:	f806 3c01 	strble.w	r3, [r6, #-1]
 800c1e2:	f106 36ff 	addle.w	r6, r6, #4294967295
 800c1e6:	1b92      	subs	r2, r2, r6
 800c1e8:	6122      	str	r2, [r4, #16]
 800c1ea:	f8cd a000 	str.w	sl, [sp]
 800c1ee:	464b      	mov	r3, r9
 800c1f0:	aa03      	add	r2, sp, #12
 800c1f2:	4621      	mov	r1, r4
 800c1f4:	4640      	mov	r0, r8
 800c1f6:	f7ff fee7 	bl	800bfc8 <_printf_common>
 800c1fa:	3001      	adds	r0, #1
 800c1fc:	d14a      	bne.n	800c294 <_printf_i+0x1f0>
 800c1fe:	f04f 30ff 	mov.w	r0, #4294967295
 800c202:	b004      	add	sp, #16
 800c204:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c208:	6823      	ldr	r3, [r4, #0]
 800c20a:	f043 0320 	orr.w	r3, r3, #32
 800c20e:	6023      	str	r3, [r4, #0]
 800c210:	4832      	ldr	r0, [pc, #200]	@ (800c2dc <_printf_i+0x238>)
 800c212:	2778      	movs	r7, #120	@ 0x78
 800c214:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800c218:	6823      	ldr	r3, [r4, #0]
 800c21a:	6831      	ldr	r1, [r6, #0]
 800c21c:	061f      	lsls	r7, r3, #24
 800c21e:	f851 5b04 	ldr.w	r5, [r1], #4
 800c222:	d402      	bmi.n	800c22a <_printf_i+0x186>
 800c224:	065f      	lsls	r7, r3, #25
 800c226:	bf48      	it	mi
 800c228:	b2ad      	uxthmi	r5, r5
 800c22a:	6031      	str	r1, [r6, #0]
 800c22c:	07d9      	lsls	r1, r3, #31
 800c22e:	bf44      	itt	mi
 800c230:	f043 0320 	orrmi.w	r3, r3, #32
 800c234:	6023      	strmi	r3, [r4, #0]
 800c236:	b11d      	cbz	r5, 800c240 <_printf_i+0x19c>
 800c238:	2310      	movs	r3, #16
 800c23a:	e7ad      	b.n	800c198 <_printf_i+0xf4>
 800c23c:	4826      	ldr	r0, [pc, #152]	@ (800c2d8 <_printf_i+0x234>)
 800c23e:	e7e9      	b.n	800c214 <_printf_i+0x170>
 800c240:	6823      	ldr	r3, [r4, #0]
 800c242:	f023 0320 	bic.w	r3, r3, #32
 800c246:	6023      	str	r3, [r4, #0]
 800c248:	e7f6      	b.n	800c238 <_printf_i+0x194>
 800c24a:	4616      	mov	r6, r2
 800c24c:	e7bd      	b.n	800c1ca <_printf_i+0x126>
 800c24e:	6833      	ldr	r3, [r6, #0]
 800c250:	6825      	ldr	r5, [r4, #0]
 800c252:	6961      	ldr	r1, [r4, #20]
 800c254:	1d18      	adds	r0, r3, #4
 800c256:	6030      	str	r0, [r6, #0]
 800c258:	062e      	lsls	r6, r5, #24
 800c25a:	681b      	ldr	r3, [r3, #0]
 800c25c:	d501      	bpl.n	800c262 <_printf_i+0x1be>
 800c25e:	6019      	str	r1, [r3, #0]
 800c260:	e002      	b.n	800c268 <_printf_i+0x1c4>
 800c262:	0668      	lsls	r0, r5, #25
 800c264:	d5fb      	bpl.n	800c25e <_printf_i+0x1ba>
 800c266:	8019      	strh	r1, [r3, #0]
 800c268:	2300      	movs	r3, #0
 800c26a:	6123      	str	r3, [r4, #16]
 800c26c:	4616      	mov	r6, r2
 800c26e:	e7bc      	b.n	800c1ea <_printf_i+0x146>
 800c270:	6833      	ldr	r3, [r6, #0]
 800c272:	1d1a      	adds	r2, r3, #4
 800c274:	6032      	str	r2, [r6, #0]
 800c276:	681e      	ldr	r6, [r3, #0]
 800c278:	6862      	ldr	r2, [r4, #4]
 800c27a:	2100      	movs	r1, #0
 800c27c:	4630      	mov	r0, r6
 800c27e:	f7f3 ffaf 	bl	80001e0 <memchr>
 800c282:	b108      	cbz	r0, 800c288 <_printf_i+0x1e4>
 800c284:	1b80      	subs	r0, r0, r6
 800c286:	6060      	str	r0, [r4, #4]
 800c288:	6863      	ldr	r3, [r4, #4]
 800c28a:	6123      	str	r3, [r4, #16]
 800c28c:	2300      	movs	r3, #0
 800c28e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c292:	e7aa      	b.n	800c1ea <_printf_i+0x146>
 800c294:	6923      	ldr	r3, [r4, #16]
 800c296:	4632      	mov	r2, r6
 800c298:	4649      	mov	r1, r9
 800c29a:	4640      	mov	r0, r8
 800c29c:	47d0      	blx	sl
 800c29e:	3001      	adds	r0, #1
 800c2a0:	d0ad      	beq.n	800c1fe <_printf_i+0x15a>
 800c2a2:	6823      	ldr	r3, [r4, #0]
 800c2a4:	079b      	lsls	r3, r3, #30
 800c2a6:	d413      	bmi.n	800c2d0 <_printf_i+0x22c>
 800c2a8:	68e0      	ldr	r0, [r4, #12]
 800c2aa:	9b03      	ldr	r3, [sp, #12]
 800c2ac:	4298      	cmp	r0, r3
 800c2ae:	bfb8      	it	lt
 800c2b0:	4618      	movlt	r0, r3
 800c2b2:	e7a6      	b.n	800c202 <_printf_i+0x15e>
 800c2b4:	2301      	movs	r3, #1
 800c2b6:	4632      	mov	r2, r6
 800c2b8:	4649      	mov	r1, r9
 800c2ba:	4640      	mov	r0, r8
 800c2bc:	47d0      	blx	sl
 800c2be:	3001      	adds	r0, #1
 800c2c0:	d09d      	beq.n	800c1fe <_printf_i+0x15a>
 800c2c2:	3501      	adds	r5, #1
 800c2c4:	68e3      	ldr	r3, [r4, #12]
 800c2c6:	9903      	ldr	r1, [sp, #12]
 800c2c8:	1a5b      	subs	r3, r3, r1
 800c2ca:	42ab      	cmp	r3, r5
 800c2cc:	dcf2      	bgt.n	800c2b4 <_printf_i+0x210>
 800c2ce:	e7eb      	b.n	800c2a8 <_printf_i+0x204>
 800c2d0:	2500      	movs	r5, #0
 800c2d2:	f104 0619 	add.w	r6, r4, #25
 800c2d6:	e7f5      	b.n	800c2c4 <_printf_i+0x220>
 800c2d8:	08011af6 	.word	0x08011af6
 800c2dc:	08011b07 	.word	0x08011b07

0800c2e0 <_scanf_float>:
 800c2e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c2e4:	b087      	sub	sp, #28
 800c2e6:	4691      	mov	r9, r2
 800c2e8:	9303      	str	r3, [sp, #12]
 800c2ea:	688b      	ldr	r3, [r1, #8]
 800c2ec:	1e5a      	subs	r2, r3, #1
 800c2ee:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800c2f2:	bf81      	itttt	hi
 800c2f4:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800c2f8:	eb03 0b05 	addhi.w	fp, r3, r5
 800c2fc:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800c300:	608b      	strhi	r3, [r1, #8]
 800c302:	680b      	ldr	r3, [r1, #0]
 800c304:	460a      	mov	r2, r1
 800c306:	f04f 0500 	mov.w	r5, #0
 800c30a:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800c30e:	f842 3b1c 	str.w	r3, [r2], #28
 800c312:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800c316:	4680      	mov	r8, r0
 800c318:	460c      	mov	r4, r1
 800c31a:	bf98      	it	ls
 800c31c:	f04f 0b00 	movls.w	fp, #0
 800c320:	9201      	str	r2, [sp, #4]
 800c322:	4616      	mov	r6, r2
 800c324:	46aa      	mov	sl, r5
 800c326:	462f      	mov	r7, r5
 800c328:	9502      	str	r5, [sp, #8]
 800c32a:	68a2      	ldr	r2, [r4, #8]
 800c32c:	b15a      	cbz	r2, 800c346 <_scanf_float+0x66>
 800c32e:	f8d9 3000 	ldr.w	r3, [r9]
 800c332:	781b      	ldrb	r3, [r3, #0]
 800c334:	2b4e      	cmp	r3, #78	@ 0x4e
 800c336:	d863      	bhi.n	800c400 <_scanf_float+0x120>
 800c338:	2b40      	cmp	r3, #64	@ 0x40
 800c33a:	d83b      	bhi.n	800c3b4 <_scanf_float+0xd4>
 800c33c:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 800c340:	b2c8      	uxtb	r0, r1
 800c342:	280e      	cmp	r0, #14
 800c344:	d939      	bls.n	800c3ba <_scanf_float+0xda>
 800c346:	b11f      	cbz	r7, 800c350 <_scanf_float+0x70>
 800c348:	6823      	ldr	r3, [r4, #0]
 800c34a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800c34e:	6023      	str	r3, [r4, #0]
 800c350:	f10a 3aff 	add.w	sl, sl, #4294967295
 800c354:	f1ba 0f01 	cmp.w	sl, #1
 800c358:	f200 8114 	bhi.w	800c584 <_scanf_float+0x2a4>
 800c35c:	9b01      	ldr	r3, [sp, #4]
 800c35e:	429e      	cmp	r6, r3
 800c360:	f200 8105 	bhi.w	800c56e <_scanf_float+0x28e>
 800c364:	2001      	movs	r0, #1
 800c366:	b007      	add	sp, #28
 800c368:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c36c:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800c370:	2a0d      	cmp	r2, #13
 800c372:	d8e8      	bhi.n	800c346 <_scanf_float+0x66>
 800c374:	a101      	add	r1, pc, #4	@ (adr r1, 800c37c <_scanf_float+0x9c>)
 800c376:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800c37a:	bf00      	nop
 800c37c:	0800c4c5 	.word	0x0800c4c5
 800c380:	0800c347 	.word	0x0800c347
 800c384:	0800c347 	.word	0x0800c347
 800c388:	0800c347 	.word	0x0800c347
 800c38c:	0800c521 	.word	0x0800c521
 800c390:	0800c4fb 	.word	0x0800c4fb
 800c394:	0800c347 	.word	0x0800c347
 800c398:	0800c347 	.word	0x0800c347
 800c39c:	0800c4d3 	.word	0x0800c4d3
 800c3a0:	0800c347 	.word	0x0800c347
 800c3a4:	0800c347 	.word	0x0800c347
 800c3a8:	0800c347 	.word	0x0800c347
 800c3ac:	0800c347 	.word	0x0800c347
 800c3b0:	0800c48f 	.word	0x0800c48f
 800c3b4:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 800c3b8:	e7da      	b.n	800c370 <_scanf_float+0x90>
 800c3ba:	290e      	cmp	r1, #14
 800c3bc:	d8c3      	bhi.n	800c346 <_scanf_float+0x66>
 800c3be:	a001      	add	r0, pc, #4	@ (adr r0, 800c3c4 <_scanf_float+0xe4>)
 800c3c0:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800c3c4:	0800c47f 	.word	0x0800c47f
 800c3c8:	0800c347 	.word	0x0800c347
 800c3cc:	0800c47f 	.word	0x0800c47f
 800c3d0:	0800c50f 	.word	0x0800c50f
 800c3d4:	0800c347 	.word	0x0800c347
 800c3d8:	0800c421 	.word	0x0800c421
 800c3dc:	0800c465 	.word	0x0800c465
 800c3e0:	0800c465 	.word	0x0800c465
 800c3e4:	0800c465 	.word	0x0800c465
 800c3e8:	0800c465 	.word	0x0800c465
 800c3ec:	0800c465 	.word	0x0800c465
 800c3f0:	0800c465 	.word	0x0800c465
 800c3f4:	0800c465 	.word	0x0800c465
 800c3f8:	0800c465 	.word	0x0800c465
 800c3fc:	0800c465 	.word	0x0800c465
 800c400:	2b6e      	cmp	r3, #110	@ 0x6e
 800c402:	d809      	bhi.n	800c418 <_scanf_float+0x138>
 800c404:	2b60      	cmp	r3, #96	@ 0x60
 800c406:	d8b1      	bhi.n	800c36c <_scanf_float+0x8c>
 800c408:	2b54      	cmp	r3, #84	@ 0x54
 800c40a:	d07b      	beq.n	800c504 <_scanf_float+0x224>
 800c40c:	2b59      	cmp	r3, #89	@ 0x59
 800c40e:	d19a      	bne.n	800c346 <_scanf_float+0x66>
 800c410:	2d07      	cmp	r5, #7
 800c412:	d198      	bne.n	800c346 <_scanf_float+0x66>
 800c414:	2508      	movs	r5, #8
 800c416:	e02f      	b.n	800c478 <_scanf_float+0x198>
 800c418:	2b74      	cmp	r3, #116	@ 0x74
 800c41a:	d073      	beq.n	800c504 <_scanf_float+0x224>
 800c41c:	2b79      	cmp	r3, #121	@ 0x79
 800c41e:	e7f6      	b.n	800c40e <_scanf_float+0x12e>
 800c420:	6821      	ldr	r1, [r4, #0]
 800c422:	05c8      	lsls	r0, r1, #23
 800c424:	d51e      	bpl.n	800c464 <_scanf_float+0x184>
 800c426:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800c42a:	6021      	str	r1, [r4, #0]
 800c42c:	3701      	adds	r7, #1
 800c42e:	f1bb 0f00 	cmp.w	fp, #0
 800c432:	d003      	beq.n	800c43c <_scanf_float+0x15c>
 800c434:	3201      	adds	r2, #1
 800c436:	f10b 3bff 	add.w	fp, fp, #4294967295
 800c43a:	60a2      	str	r2, [r4, #8]
 800c43c:	68a3      	ldr	r3, [r4, #8]
 800c43e:	3b01      	subs	r3, #1
 800c440:	60a3      	str	r3, [r4, #8]
 800c442:	6923      	ldr	r3, [r4, #16]
 800c444:	3301      	adds	r3, #1
 800c446:	6123      	str	r3, [r4, #16]
 800c448:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800c44c:	3b01      	subs	r3, #1
 800c44e:	2b00      	cmp	r3, #0
 800c450:	f8c9 3004 	str.w	r3, [r9, #4]
 800c454:	f340 8082 	ble.w	800c55c <_scanf_float+0x27c>
 800c458:	f8d9 3000 	ldr.w	r3, [r9]
 800c45c:	3301      	adds	r3, #1
 800c45e:	f8c9 3000 	str.w	r3, [r9]
 800c462:	e762      	b.n	800c32a <_scanf_float+0x4a>
 800c464:	eb1a 0105 	adds.w	r1, sl, r5
 800c468:	f47f af6d 	bne.w	800c346 <_scanf_float+0x66>
 800c46c:	6822      	ldr	r2, [r4, #0]
 800c46e:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 800c472:	6022      	str	r2, [r4, #0]
 800c474:	460d      	mov	r5, r1
 800c476:	468a      	mov	sl, r1
 800c478:	f806 3b01 	strb.w	r3, [r6], #1
 800c47c:	e7de      	b.n	800c43c <_scanf_float+0x15c>
 800c47e:	6822      	ldr	r2, [r4, #0]
 800c480:	0610      	lsls	r0, r2, #24
 800c482:	f57f af60 	bpl.w	800c346 <_scanf_float+0x66>
 800c486:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800c48a:	6022      	str	r2, [r4, #0]
 800c48c:	e7f4      	b.n	800c478 <_scanf_float+0x198>
 800c48e:	f1ba 0f00 	cmp.w	sl, #0
 800c492:	d10c      	bne.n	800c4ae <_scanf_float+0x1ce>
 800c494:	b977      	cbnz	r7, 800c4b4 <_scanf_float+0x1d4>
 800c496:	6822      	ldr	r2, [r4, #0]
 800c498:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800c49c:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800c4a0:	d108      	bne.n	800c4b4 <_scanf_float+0x1d4>
 800c4a2:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800c4a6:	6022      	str	r2, [r4, #0]
 800c4a8:	f04f 0a01 	mov.w	sl, #1
 800c4ac:	e7e4      	b.n	800c478 <_scanf_float+0x198>
 800c4ae:	f1ba 0f02 	cmp.w	sl, #2
 800c4b2:	d050      	beq.n	800c556 <_scanf_float+0x276>
 800c4b4:	2d01      	cmp	r5, #1
 800c4b6:	d002      	beq.n	800c4be <_scanf_float+0x1de>
 800c4b8:	2d04      	cmp	r5, #4
 800c4ba:	f47f af44 	bne.w	800c346 <_scanf_float+0x66>
 800c4be:	3501      	adds	r5, #1
 800c4c0:	b2ed      	uxtb	r5, r5
 800c4c2:	e7d9      	b.n	800c478 <_scanf_float+0x198>
 800c4c4:	f1ba 0f01 	cmp.w	sl, #1
 800c4c8:	f47f af3d 	bne.w	800c346 <_scanf_float+0x66>
 800c4cc:	f04f 0a02 	mov.w	sl, #2
 800c4d0:	e7d2      	b.n	800c478 <_scanf_float+0x198>
 800c4d2:	b975      	cbnz	r5, 800c4f2 <_scanf_float+0x212>
 800c4d4:	2f00      	cmp	r7, #0
 800c4d6:	f47f af37 	bne.w	800c348 <_scanf_float+0x68>
 800c4da:	6822      	ldr	r2, [r4, #0]
 800c4dc:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800c4e0:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800c4e4:	f040 8103 	bne.w	800c6ee <_scanf_float+0x40e>
 800c4e8:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800c4ec:	6022      	str	r2, [r4, #0]
 800c4ee:	2501      	movs	r5, #1
 800c4f0:	e7c2      	b.n	800c478 <_scanf_float+0x198>
 800c4f2:	2d03      	cmp	r5, #3
 800c4f4:	d0e3      	beq.n	800c4be <_scanf_float+0x1de>
 800c4f6:	2d05      	cmp	r5, #5
 800c4f8:	e7df      	b.n	800c4ba <_scanf_float+0x1da>
 800c4fa:	2d02      	cmp	r5, #2
 800c4fc:	f47f af23 	bne.w	800c346 <_scanf_float+0x66>
 800c500:	2503      	movs	r5, #3
 800c502:	e7b9      	b.n	800c478 <_scanf_float+0x198>
 800c504:	2d06      	cmp	r5, #6
 800c506:	f47f af1e 	bne.w	800c346 <_scanf_float+0x66>
 800c50a:	2507      	movs	r5, #7
 800c50c:	e7b4      	b.n	800c478 <_scanf_float+0x198>
 800c50e:	6822      	ldr	r2, [r4, #0]
 800c510:	0591      	lsls	r1, r2, #22
 800c512:	f57f af18 	bpl.w	800c346 <_scanf_float+0x66>
 800c516:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800c51a:	6022      	str	r2, [r4, #0]
 800c51c:	9702      	str	r7, [sp, #8]
 800c51e:	e7ab      	b.n	800c478 <_scanf_float+0x198>
 800c520:	6822      	ldr	r2, [r4, #0]
 800c522:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 800c526:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800c52a:	d005      	beq.n	800c538 <_scanf_float+0x258>
 800c52c:	0550      	lsls	r0, r2, #21
 800c52e:	f57f af0a 	bpl.w	800c346 <_scanf_float+0x66>
 800c532:	2f00      	cmp	r7, #0
 800c534:	f000 80db 	beq.w	800c6ee <_scanf_float+0x40e>
 800c538:	0591      	lsls	r1, r2, #22
 800c53a:	bf58      	it	pl
 800c53c:	9902      	ldrpl	r1, [sp, #8]
 800c53e:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800c542:	bf58      	it	pl
 800c544:	1a79      	subpl	r1, r7, r1
 800c546:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800c54a:	bf58      	it	pl
 800c54c:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800c550:	6022      	str	r2, [r4, #0]
 800c552:	2700      	movs	r7, #0
 800c554:	e790      	b.n	800c478 <_scanf_float+0x198>
 800c556:	f04f 0a03 	mov.w	sl, #3
 800c55a:	e78d      	b.n	800c478 <_scanf_float+0x198>
 800c55c:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800c560:	4649      	mov	r1, r9
 800c562:	4640      	mov	r0, r8
 800c564:	4798      	blx	r3
 800c566:	2800      	cmp	r0, #0
 800c568:	f43f aedf 	beq.w	800c32a <_scanf_float+0x4a>
 800c56c:	e6eb      	b.n	800c346 <_scanf_float+0x66>
 800c56e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800c572:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800c576:	464a      	mov	r2, r9
 800c578:	4640      	mov	r0, r8
 800c57a:	4798      	blx	r3
 800c57c:	6923      	ldr	r3, [r4, #16]
 800c57e:	3b01      	subs	r3, #1
 800c580:	6123      	str	r3, [r4, #16]
 800c582:	e6eb      	b.n	800c35c <_scanf_float+0x7c>
 800c584:	1e6b      	subs	r3, r5, #1
 800c586:	2b06      	cmp	r3, #6
 800c588:	d824      	bhi.n	800c5d4 <_scanf_float+0x2f4>
 800c58a:	2d02      	cmp	r5, #2
 800c58c:	d836      	bhi.n	800c5fc <_scanf_float+0x31c>
 800c58e:	9b01      	ldr	r3, [sp, #4]
 800c590:	429e      	cmp	r6, r3
 800c592:	f67f aee7 	bls.w	800c364 <_scanf_float+0x84>
 800c596:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800c59a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800c59e:	464a      	mov	r2, r9
 800c5a0:	4640      	mov	r0, r8
 800c5a2:	4798      	blx	r3
 800c5a4:	6923      	ldr	r3, [r4, #16]
 800c5a6:	3b01      	subs	r3, #1
 800c5a8:	6123      	str	r3, [r4, #16]
 800c5aa:	e7f0      	b.n	800c58e <_scanf_float+0x2ae>
 800c5ac:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800c5b0:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 800c5b4:	464a      	mov	r2, r9
 800c5b6:	4640      	mov	r0, r8
 800c5b8:	4798      	blx	r3
 800c5ba:	6923      	ldr	r3, [r4, #16]
 800c5bc:	3b01      	subs	r3, #1
 800c5be:	6123      	str	r3, [r4, #16]
 800c5c0:	f10a 3aff 	add.w	sl, sl, #4294967295
 800c5c4:	fa5f fa8a 	uxtb.w	sl, sl
 800c5c8:	f1ba 0f02 	cmp.w	sl, #2
 800c5cc:	d1ee      	bne.n	800c5ac <_scanf_float+0x2cc>
 800c5ce:	3d03      	subs	r5, #3
 800c5d0:	b2ed      	uxtb	r5, r5
 800c5d2:	1b76      	subs	r6, r6, r5
 800c5d4:	6823      	ldr	r3, [r4, #0]
 800c5d6:	05da      	lsls	r2, r3, #23
 800c5d8:	d530      	bpl.n	800c63c <_scanf_float+0x35c>
 800c5da:	055b      	lsls	r3, r3, #21
 800c5dc:	d511      	bpl.n	800c602 <_scanf_float+0x322>
 800c5de:	9b01      	ldr	r3, [sp, #4]
 800c5e0:	429e      	cmp	r6, r3
 800c5e2:	f67f aebf 	bls.w	800c364 <_scanf_float+0x84>
 800c5e6:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800c5ea:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800c5ee:	464a      	mov	r2, r9
 800c5f0:	4640      	mov	r0, r8
 800c5f2:	4798      	blx	r3
 800c5f4:	6923      	ldr	r3, [r4, #16]
 800c5f6:	3b01      	subs	r3, #1
 800c5f8:	6123      	str	r3, [r4, #16]
 800c5fa:	e7f0      	b.n	800c5de <_scanf_float+0x2fe>
 800c5fc:	46aa      	mov	sl, r5
 800c5fe:	46b3      	mov	fp, r6
 800c600:	e7de      	b.n	800c5c0 <_scanf_float+0x2e0>
 800c602:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800c606:	6923      	ldr	r3, [r4, #16]
 800c608:	2965      	cmp	r1, #101	@ 0x65
 800c60a:	f103 33ff 	add.w	r3, r3, #4294967295
 800c60e:	f106 35ff 	add.w	r5, r6, #4294967295
 800c612:	6123      	str	r3, [r4, #16]
 800c614:	d00c      	beq.n	800c630 <_scanf_float+0x350>
 800c616:	2945      	cmp	r1, #69	@ 0x45
 800c618:	d00a      	beq.n	800c630 <_scanf_float+0x350>
 800c61a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800c61e:	464a      	mov	r2, r9
 800c620:	4640      	mov	r0, r8
 800c622:	4798      	blx	r3
 800c624:	6923      	ldr	r3, [r4, #16]
 800c626:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800c62a:	3b01      	subs	r3, #1
 800c62c:	1eb5      	subs	r5, r6, #2
 800c62e:	6123      	str	r3, [r4, #16]
 800c630:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800c634:	464a      	mov	r2, r9
 800c636:	4640      	mov	r0, r8
 800c638:	4798      	blx	r3
 800c63a:	462e      	mov	r6, r5
 800c63c:	6822      	ldr	r2, [r4, #0]
 800c63e:	f012 0210 	ands.w	r2, r2, #16
 800c642:	d001      	beq.n	800c648 <_scanf_float+0x368>
 800c644:	2000      	movs	r0, #0
 800c646:	e68e      	b.n	800c366 <_scanf_float+0x86>
 800c648:	7032      	strb	r2, [r6, #0]
 800c64a:	6823      	ldr	r3, [r4, #0]
 800c64c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800c650:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800c654:	d125      	bne.n	800c6a2 <_scanf_float+0x3c2>
 800c656:	9b02      	ldr	r3, [sp, #8]
 800c658:	429f      	cmp	r7, r3
 800c65a:	d00a      	beq.n	800c672 <_scanf_float+0x392>
 800c65c:	1bda      	subs	r2, r3, r7
 800c65e:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 800c662:	429e      	cmp	r6, r3
 800c664:	bf28      	it	cs
 800c666:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 800c66a:	4922      	ldr	r1, [pc, #136]	@ (800c6f4 <_scanf_float+0x414>)
 800c66c:	4630      	mov	r0, r6
 800c66e:	f000 f9ad 	bl	800c9cc <siprintf>
 800c672:	9901      	ldr	r1, [sp, #4]
 800c674:	2200      	movs	r2, #0
 800c676:	4640      	mov	r0, r8
 800c678:	f002 fd5a 	bl	800f130 <_strtod_r>
 800c67c:	9b03      	ldr	r3, [sp, #12]
 800c67e:	6821      	ldr	r1, [r4, #0]
 800c680:	681b      	ldr	r3, [r3, #0]
 800c682:	f011 0f02 	tst.w	r1, #2
 800c686:	ec57 6b10 	vmov	r6, r7, d0
 800c68a:	f103 0204 	add.w	r2, r3, #4
 800c68e:	d015      	beq.n	800c6bc <_scanf_float+0x3dc>
 800c690:	9903      	ldr	r1, [sp, #12]
 800c692:	600a      	str	r2, [r1, #0]
 800c694:	681b      	ldr	r3, [r3, #0]
 800c696:	e9c3 6700 	strd	r6, r7, [r3]
 800c69a:	68e3      	ldr	r3, [r4, #12]
 800c69c:	3301      	adds	r3, #1
 800c69e:	60e3      	str	r3, [r4, #12]
 800c6a0:	e7d0      	b.n	800c644 <_scanf_float+0x364>
 800c6a2:	9b04      	ldr	r3, [sp, #16]
 800c6a4:	2b00      	cmp	r3, #0
 800c6a6:	d0e4      	beq.n	800c672 <_scanf_float+0x392>
 800c6a8:	9905      	ldr	r1, [sp, #20]
 800c6aa:	230a      	movs	r3, #10
 800c6ac:	3101      	adds	r1, #1
 800c6ae:	4640      	mov	r0, r8
 800c6b0:	f002 fdbe 	bl	800f230 <_strtol_r>
 800c6b4:	9b04      	ldr	r3, [sp, #16]
 800c6b6:	9e05      	ldr	r6, [sp, #20]
 800c6b8:	1ac2      	subs	r2, r0, r3
 800c6ba:	e7d0      	b.n	800c65e <_scanf_float+0x37e>
 800c6bc:	f011 0f04 	tst.w	r1, #4
 800c6c0:	9903      	ldr	r1, [sp, #12]
 800c6c2:	600a      	str	r2, [r1, #0]
 800c6c4:	d1e6      	bne.n	800c694 <_scanf_float+0x3b4>
 800c6c6:	681d      	ldr	r5, [r3, #0]
 800c6c8:	4632      	mov	r2, r6
 800c6ca:	463b      	mov	r3, r7
 800c6cc:	4630      	mov	r0, r6
 800c6ce:	4639      	mov	r1, r7
 800c6d0:	f7f4 fa34 	bl	8000b3c <__aeabi_dcmpun>
 800c6d4:	b128      	cbz	r0, 800c6e2 <_scanf_float+0x402>
 800c6d6:	4808      	ldr	r0, [pc, #32]	@ (800c6f8 <_scanf_float+0x418>)
 800c6d8:	f000 fb00 	bl	800ccdc <nanf>
 800c6dc:	ed85 0a00 	vstr	s0, [r5]
 800c6e0:	e7db      	b.n	800c69a <_scanf_float+0x3ba>
 800c6e2:	4630      	mov	r0, r6
 800c6e4:	4639      	mov	r1, r7
 800c6e6:	f7f4 fa87 	bl	8000bf8 <__aeabi_d2f>
 800c6ea:	6028      	str	r0, [r5, #0]
 800c6ec:	e7d5      	b.n	800c69a <_scanf_float+0x3ba>
 800c6ee:	2700      	movs	r7, #0
 800c6f0:	e62e      	b.n	800c350 <_scanf_float+0x70>
 800c6f2:	bf00      	nop
 800c6f4:	08011b18 	.word	0x08011b18
 800c6f8:	08011b58 	.word	0x08011b58

0800c6fc <std>:
 800c6fc:	2300      	movs	r3, #0
 800c6fe:	b510      	push	{r4, lr}
 800c700:	4604      	mov	r4, r0
 800c702:	e9c0 3300 	strd	r3, r3, [r0]
 800c706:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800c70a:	6083      	str	r3, [r0, #8]
 800c70c:	8181      	strh	r1, [r0, #12]
 800c70e:	6643      	str	r3, [r0, #100]	@ 0x64
 800c710:	81c2      	strh	r2, [r0, #14]
 800c712:	6183      	str	r3, [r0, #24]
 800c714:	4619      	mov	r1, r3
 800c716:	2208      	movs	r2, #8
 800c718:	305c      	adds	r0, #92	@ 0x5c
 800c71a:	f000 fa51 	bl	800cbc0 <memset>
 800c71e:	4b0d      	ldr	r3, [pc, #52]	@ (800c754 <std+0x58>)
 800c720:	6263      	str	r3, [r4, #36]	@ 0x24
 800c722:	4b0d      	ldr	r3, [pc, #52]	@ (800c758 <std+0x5c>)
 800c724:	62a3      	str	r3, [r4, #40]	@ 0x28
 800c726:	4b0d      	ldr	r3, [pc, #52]	@ (800c75c <std+0x60>)
 800c728:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800c72a:	4b0d      	ldr	r3, [pc, #52]	@ (800c760 <std+0x64>)
 800c72c:	6323      	str	r3, [r4, #48]	@ 0x30
 800c72e:	4b0d      	ldr	r3, [pc, #52]	@ (800c764 <std+0x68>)
 800c730:	6224      	str	r4, [r4, #32]
 800c732:	429c      	cmp	r4, r3
 800c734:	d006      	beq.n	800c744 <std+0x48>
 800c736:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800c73a:	4294      	cmp	r4, r2
 800c73c:	d002      	beq.n	800c744 <std+0x48>
 800c73e:	33d0      	adds	r3, #208	@ 0xd0
 800c740:	429c      	cmp	r4, r3
 800c742:	d105      	bne.n	800c750 <std+0x54>
 800c744:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800c748:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c74c:	f000 bab4 	b.w	800ccb8 <__retarget_lock_init_recursive>
 800c750:	bd10      	pop	{r4, pc}
 800c752:	bf00      	nop
 800c754:	0800ca11 	.word	0x0800ca11
 800c758:	0800ca33 	.word	0x0800ca33
 800c75c:	0800ca6b 	.word	0x0800ca6b
 800c760:	0800ca8f 	.word	0x0800ca8f
 800c764:	200140d8 	.word	0x200140d8

0800c768 <stdio_exit_handler>:
 800c768:	4a02      	ldr	r2, [pc, #8]	@ (800c774 <stdio_exit_handler+0xc>)
 800c76a:	4903      	ldr	r1, [pc, #12]	@ (800c778 <stdio_exit_handler+0x10>)
 800c76c:	4803      	ldr	r0, [pc, #12]	@ (800c77c <stdio_exit_handler+0x14>)
 800c76e:	f000 b869 	b.w	800c844 <_fwalk_sglue>
 800c772:	bf00      	nop
 800c774:	2000d134 	.word	0x2000d134
 800c778:	0800f871 	.word	0x0800f871
 800c77c:	2000d144 	.word	0x2000d144

0800c780 <cleanup_stdio>:
 800c780:	6841      	ldr	r1, [r0, #4]
 800c782:	4b0c      	ldr	r3, [pc, #48]	@ (800c7b4 <cleanup_stdio+0x34>)
 800c784:	4299      	cmp	r1, r3
 800c786:	b510      	push	{r4, lr}
 800c788:	4604      	mov	r4, r0
 800c78a:	d001      	beq.n	800c790 <cleanup_stdio+0x10>
 800c78c:	f003 f870 	bl	800f870 <_fflush_r>
 800c790:	68a1      	ldr	r1, [r4, #8]
 800c792:	4b09      	ldr	r3, [pc, #36]	@ (800c7b8 <cleanup_stdio+0x38>)
 800c794:	4299      	cmp	r1, r3
 800c796:	d002      	beq.n	800c79e <cleanup_stdio+0x1e>
 800c798:	4620      	mov	r0, r4
 800c79a:	f003 f869 	bl	800f870 <_fflush_r>
 800c79e:	68e1      	ldr	r1, [r4, #12]
 800c7a0:	4b06      	ldr	r3, [pc, #24]	@ (800c7bc <cleanup_stdio+0x3c>)
 800c7a2:	4299      	cmp	r1, r3
 800c7a4:	d004      	beq.n	800c7b0 <cleanup_stdio+0x30>
 800c7a6:	4620      	mov	r0, r4
 800c7a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c7ac:	f003 b860 	b.w	800f870 <_fflush_r>
 800c7b0:	bd10      	pop	{r4, pc}
 800c7b2:	bf00      	nop
 800c7b4:	200140d8 	.word	0x200140d8
 800c7b8:	20014140 	.word	0x20014140
 800c7bc:	200141a8 	.word	0x200141a8

0800c7c0 <global_stdio_init.part.0>:
 800c7c0:	b510      	push	{r4, lr}
 800c7c2:	4b0b      	ldr	r3, [pc, #44]	@ (800c7f0 <global_stdio_init.part.0+0x30>)
 800c7c4:	4c0b      	ldr	r4, [pc, #44]	@ (800c7f4 <global_stdio_init.part.0+0x34>)
 800c7c6:	4a0c      	ldr	r2, [pc, #48]	@ (800c7f8 <global_stdio_init.part.0+0x38>)
 800c7c8:	601a      	str	r2, [r3, #0]
 800c7ca:	4620      	mov	r0, r4
 800c7cc:	2200      	movs	r2, #0
 800c7ce:	2104      	movs	r1, #4
 800c7d0:	f7ff ff94 	bl	800c6fc <std>
 800c7d4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800c7d8:	2201      	movs	r2, #1
 800c7da:	2109      	movs	r1, #9
 800c7dc:	f7ff ff8e 	bl	800c6fc <std>
 800c7e0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800c7e4:	2202      	movs	r2, #2
 800c7e6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c7ea:	2112      	movs	r1, #18
 800c7ec:	f7ff bf86 	b.w	800c6fc <std>
 800c7f0:	20014210 	.word	0x20014210
 800c7f4:	200140d8 	.word	0x200140d8
 800c7f8:	0800c769 	.word	0x0800c769

0800c7fc <__sfp_lock_acquire>:
 800c7fc:	4801      	ldr	r0, [pc, #4]	@ (800c804 <__sfp_lock_acquire+0x8>)
 800c7fe:	f000 ba5c 	b.w	800ccba <__retarget_lock_acquire_recursive>
 800c802:	bf00      	nop
 800c804:	20014219 	.word	0x20014219

0800c808 <__sfp_lock_release>:
 800c808:	4801      	ldr	r0, [pc, #4]	@ (800c810 <__sfp_lock_release+0x8>)
 800c80a:	f000 ba57 	b.w	800ccbc <__retarget_lock_release_recursive>
 800c80e:	bf00      	nop
 800c810:	20014219 	.word	0x20014219

0800c814 <__sinit>:
 800c814:	b510      	push	{r4, lr}
 800c816:	4604      	mov	r4, r0
 800c818:	f7ff fff0 	bl	800c7fc <__sfp_lock_acquire>
 800c81c:	6a23      	ldr	r3, [r4, #32]
 800c81e:	b11b      	cbz	r3, 800c828 <__sinit+0x14>
 800c820:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c824:	f7ff bff0 	b.w	800c808 <__sfp_lock_release>
 800c828:	4b04      	ldr	r3, [pc, #16]	@ (800c83c <__sinit+0x28>)
 800c82a:	6223      	str	r3, [r4, #32]
 800c82c:	4b04      	ldr	r3, [pc, #16]	@ (800c840 <__sinit+0x2c>)
 800c82e:	681b      	ldr	r3, [r3, #0]
 800c830:	2b00      	cmp	r3, #0
 800c832:	d1f5      	bne.n	800c820 <__sinit+0xc>
 800c834:	f7ff ffc4 	bl	800c7c0 <global_stdio_init.part.0>
 800c838:	e7f2      	b.n	800c820 <__sinit+0xc>
 800c83a:	bf00      	nop
 800c83c:	0800c781 	.word	0x0800c781
 800c840:	20014210 	.word	0x20014210

0800c844 <_fwalk_sglue>:
 800c844:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c848:	4607      	mov	r7, r0
 800c84a:	4688      	mov	r8, r1
 800c84c:	4614      	mov	r4, r2
 800c84e:	2600      	movs	r6, #0
 800c850:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800c854:	f1b9 0901 	subs.w	r9, r9, #1
 800c858:	d505      	bpl.n	800c866 <_fwalk_sglue+0x22>
 800c85a:	6824      	ldr	r4, [r4, #0]
 800c85c:	2c00      	cmp	r4, #0
 800c85e:	d1f7      	bne.n	800c850 <_fwalk_sglue+0xc>
 800c860:	4630      	mov	r0, r6
 800c862:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c866:	89ab      	ldrh	r3, [r5, #12]
 800c868:	2b01      	cmp	r3, #1
 800c86a:	d907      	bls.n	800c87c <_fwalk_sglue+0x38>
 800c86c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c870:	3301      	adds	r3, #1
 800c872:	d003      	beq.n	800c87c <_fwalk_sglue+0x38>
 800c874:	4629      	mov	r1, r5
 800c876:	4638      	mov	r0, r7
 800c878:	47c0      	blx	r8
 800c87a:	4306      	orrs	r6, r0
 800c87c:	3568      	adds	r5, #104	@ 0x68
 800c87e:	e7e9      	b.n	800c854 <_fwalk_sglue+0x10>

0800c880 <iprintf>:
 800c880:	b40f      	push	{r0, r1, r2, r3}
 800c882:	b507      	push	{r0, r1, r2, lr}
 800c884:	4906      	ldr	r1, [pc, #24]	@ (800c8a0 <iprintf+0x20>)
 800c886:	ab04      	add	r3, sp, #16
 800c888:	6808      	ldr	r0, [r1, #0]
 800c88a:	f853 2b04 	ldr.w	r2, [r3], #4
 800c88e:	6881      	ldr	r1, [r0, #8]
 800c890:	9301      	str	r3, [sp, #4]
 800c892:	f002 fe51 	bl	800f538 <_vfiprintf_r>
 800c896:	b003      	add	sp, #12
 800c898:	f85d eb04 	ldr.w	lr, [sp], #4
 800c89c:	b004      	add	sp, #16
 800c89e:	4770      	bx	lr
 800c8a0:	2000d140 	.word	0x2000d140

0800c8a4 <_puts_r>:
 800c8a4:	6a03      	ldr	r3, [r0, #32]
 800c8a6:	b570      	push	{r4, r5, r6, lr}
 800c8a8:	6884      	ldr	r4, [r0, #8]
 800c8aa:	4605      	mov	r5, r0
 800c8ac:	460e      	mov	r6, r1
 800c8ae:	b90b      	cbnz	r3, 800c8b4 <_puts_r+0x10>
 800c8b0:	f7ff ffb0 	bl	800c814 <__sinit>
 800c8b4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800c8b6:	07db      	lsls	r3, r3, #31
 800c8b8:	d405      	bmi.n	800c8c6 <_puts_r+0x22>
 800c8ba:	89a3      	ldrh	r3, [r4, #12]
 800c8bc:	0598      	lsls	r0, r3, #22
 800c8be:	d402      	bmi.n	800c8c6 <_puts_r+0x22>
 800c8c0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c8c2:	f000 f9fa 	bl	800ccba <__retarget_lock_acquire_recursive>
 800c8c6:	89a3      	ldrh	r3, [r4, #12]
 800c8c8:	0719      	lsls	r1, r3, #28
 800c8ca:	d502      	bpl.n	800c8d2 <_puts_r+0x2e>
 800c8cc:	6923      	ldr	r3, [r4, #16]
 800c8ce:	2b00      	cmp	r3, #0
 800c8d0:	d135      	bne.n	800c93e <_puts_r+0x9a>
 800c8d2:	4621      	mov	r1, r4
 800c8d4:	4628      	mov	r0, r5
 800c8d6:	f000 f91d 	bl	800cb14 <__swsetup_r>
 800c8da:	b380      	cbz	r0, 800c93e <_puts_r+0x9a>
 800c8dc:	f04f 35ff 	mov.w	r5, #4294967295
 800c8e0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800c8e2:	07da      	lsls	r2, r3, #31
 800c8e4:	d405      	bmi.n	800c8f2 <_puts_r+0x4e>
 800c8e6:	89a3      	ldrh	r3, [r4, #12]
 800c8e8:	059b      	lsls	r3, r3, #22
 800c8ea:	d402      	bmi.n	800c8f2 <_puts_r+0x4e>
 800c8ec:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c8ee:	f000 f9e5 	bl	800ccbc <__retarget_lock_release_recursive>
 800c8f2:	4628      	mov	r0, r5
 800c8f4:	bd70      	pop	{r4, r5, r6, pc}
 800c8f6:	2b00      	cmp	r3, #0
 800c8f8:	da04      	bge.n	800c904 <_puts_r+0x60>
 800c8fa:	69a2      	ldr	r2, [r4, #24]
 800c8fc:	429a      	cmp	r2, r3
 800c8fe:	dc17      	bgt.n	800c930 <_puts_r+0x8c>
 800c900:	290a      	cmp	r1, #10
 800c902:	d015      	beq.n	800c930 <_puts_r+0x8c>
 800c904:	6823      	ldr	r3, [r4, #0]
 800c906:	1c5a      	adds	r2, r3, #1
 800c908:	6022      	str	r2, [r4, #0]
 800c90a:	7019      	strb	r1, [r3, #0]
 800c90c:	68a3      	ldr	r3, [r4, #8]
 800c90e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800c912:	3b01      	subs	r3, #1
 800c914:	60a3      	str	r3, [r4, #8]
 800c916:	2900      	cmp	r1, #0
 800c918:	d1ed      	bne.n	800c8f6 <_puts_r+0x52>
 800c91a:	2b00      	cmp	r3, #0
 800c91c:	da11      	bge.n	800c942 <_puts_r+0x9e>
 800c91e:	4622      	mov	r2, r4
 800c920:	210a      	movs	r1, #10
 800c922:	4628      	mov	r0, r5
 800c924:	f000 f8b7 	bl	800ca96 <__swbuf_r>
 800c928:	3001      	adds	r0, #1
 800c92a:	d0d7      	beq.n	800c8dc <_puts_r+0x38>
 800c92c:	250a      	movs	r5, #10
 800c92e:	e7d7      	b.n	800c8e0 <_puts_r+0x3c>
 800c930:	4622      	mov	r2, r4
 800c932:	4628      	mov	r0, r5
 800c934:	f000 f8af 	bl	800ca96 <__swbuf_r>
 800c938:	3001      	adds	r0, #1
 800c93a:	d1e7      	bne.n	800c90c <_puts_r+0x68>
 800c93c:	e7ce      	b.n	800c8dc <_puts_r+0x38>
 800c93e:	3e01      	subs	r6, #1
 800c940:	e7e4      	b.n	800c90c <_puts_r+0x68>
 800c942:	6823      	ldr	r3, [r4, #0]
 800c944:	1c5a      	adds	r2, r3, #1
 800c946:	6022      	str	r2, [r4, #0]
 800c948:	220a      	movs	r2, #10
 800c94a:	701a      	strb	r2, [r3, #0]
 800c94c:	e7ee      	b.n	800c92c <_puts_r+0x88>
	...

0800c950 <puts>:
 800c950:	4b02      	ldr	r3, [pc, #8]	@ (800c95c <puts+0xc>)
 800c952:	4601      	mov	r1, r0
 800c954:	6818      	ldr	r0, [r3, #0]
 800c956:	f7ff bfa5 	b.w	800c8a4 <_puts_r>
 800c95a:	bf00      	nop
 800c95c:	2000d140 	.word	0x2000d140

0800c960 <sniprintf>:
 800c960:	b40c      	push	{r2, r3}
 800c962:	b530      	push	{r4, r5, lr}
 800c964:	4b18      	ldr	r3, [pc, #96]	@ (800c9c8 <sniprintf+0x68>)
 800c966:	1e0c      	subs	r4, r1, #0
 800c968:	681d      	ldr	r5, [r3, #0]
 800c96a:	b09d      	sub	sp, #116	@ 0x74
 800c96c:	da08      	bge.n	800c980 <sniprintf+0x20>
 800c96e:	238b      	movs	r3, #139	@ 0x8b
 800c970:	602b      	str	r3, [r5, #0]
 800c972:	f04f 30ff 	mov.w	r0, #4294967295
 800c976:	b01d      	add	sp, #116	@ 0x74
 800c978:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c97c:	b002      	add	sp, #8
 800c97e:	4770      	bx	lr
 800c980:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800c984:	f8ad 3014 	strh.w	r3, [sp, #20]
 800c988:	f04f 0300 	mov.w	r3, #0
 800c98c:	931b      	str	r3, [sp, #108]	@ 0x6c
 800c98e:	bf14      	ite	ne
 800c990:	f104 33ff 	addne.w	r3, r4, #4294967295
 800c994:	4623      	moveq	r3, r4
 800c996:	9304      	str	r3, [sp, #16]
 800c998:	9307      	str	r3, [sp, #28]
 800c99a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800c99e:	9002      	str	r0, [sp, #8]
 800c9a0:	9006      	str	r0, [sp, #24]
 800c9a2:	f8ad 3016 	strh.w	r3, [sp, #22]
 800c9a6:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800c9a8:	ab21      	add	r3, sp, #132	@ 0x84
 800c9aa:	a902      	add	r1, sp, #8
 800c9ac:	4628      	mov	r0, r5
 800c9ae:	9301      	str	r3, [sp, #4]
 800c9b0:	f002 fc9c 	bl	800f2ec <_svfiprintf_r>
 800c9b4:	1c43      	adds	r3, r0, #1
 800c9b6:	bfbc      	itt	lt
 800c9b8:	238b      	movlt	r3, #139	@ 0x8b
 800c9ba:	602b      	strlt	r3, [r5, #0]
 800c9bc:	2c00      	cmp	r4, #0
 800c9be:	d0da      	beq.n	800c976 <sniprintf+0x16>
 800c9c0:	9b02      	ldr	r3, [sp, #8]
 800c9c2:	2200      	movs	r2, #0
 800c9c4:	701a      	strb	r2, [r3, #0]
 800c9c6:	e7d6      	b.n	800c976 <sniprintf+0x16>
 800c9c8:	2000d140 	.word	0x2000d140

0800c9cc <siprintf>:
 800c9cc:	b40e      	push	{r1, r2, r3}
 800c9ce:	b510      	push	{r4, lr}
 800c9d0:	b09d      	sub	sp, #116	@ 0x74
 800c9d2:	ab1f      	add	r3, sp, #124	@ 0x7c
 800c9d4:	9002      	str	r0, [sp, #8]
 800c9d6:	9006      	str	r0, [sp, #24]
 800c9d8:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800c9dc:	480a      	ldr	r0, [pc, #40]	@ (800ca08 <siprintf+0x3c>)
 800c9de:	9107      	str	r1, [sp, #28]
 800c9e0:	9104      	str	r1, [sp, #16]
 800c9e2:	490a      	ldr	r1, [pc, #40]	@ (800ca0c <siprintf+0x40>)
 800c9e4:	f853 2b04 	ldr.w	r2, [r3], #4
 800c9e8:	9105      	str	r1, [sp, #20]
 800c9ea:	2400      	movs	r4, #0
 800c9ec:	a902      	add	r1, sp, #8
 800c9ee:	6800      	ldr	r0, [r0, #0]
 800c9f0:	9301      	str	r3, [sp, #4]
 800c9f2:	941b      	str	r4, [sp, #108]	@ 0x6c
 800c9f4:	f002 fc7a 	bl	800f2ec <_svfiprintf_r>
 800c9f8:	9b02      	ldr	r3, [sp, #8]
 800c9fa:	701c      	strb	r4, [r3, #0]
 800c9fc:	b01d      	add	sp, #116	@ 0x74
 800c9fe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ca02:	b003      	add	sp, #12
 800ca04:	4770      	bx	lr
 800ca06:	bf00      	nop
 800ca08:	2000d140 	.word	0x2000d140
 800ca0c:	ffff0208 	.word	0xffff0208

0800ca10 <__sread>:
 800ca10:	b510      	push	{r4, lr}
 800ca12:	460c      	mov	r4, r1
 800ca14:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ca18:	f000 f900 	bl	800cc1c <_read_r>
 800ca1c:	2800      	cmp	r0, #0
 800ca1e:	bfab      	itete	ge
 800ca20:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800ca22:	89a3      	ldrhlt	r3, [r4, #12]
 800ca24:	181b      	addge	r3, r3, r0
 800ca26:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800ca2a:	bfac      	ite	ge
 800ca2c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800ca2e:	81a3      	strhlt	r3, [r4, #12]
 800ca30:	bd10      	pop	{r4, pc}

0800ca32 <__swrite>:
 800ca32:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ca36:	461f      	mov	r7, r3
 800ca38:	898b      	ldrh	r3, [r1, #12]
 800ca3a:	05db      	lsls	r3, r3, #23
 800ca3c:	4605      	mov	r5, r0
 800ca3e:	460c      	mov	r4, r1
 800ca40:	4616      	mov	r6, r2
 800ca42:	d505      	bpl.n	800ca50 <__swrite+0x1e>
 800ca44:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ca48:	2302      	movs	r3, #2
 800ca4a:	2200      	movs	r2, #0
 800ca4c:	f000 f8d4 	bl	800cbf8 <_lseek_r>
 800ca50:	89a3      	ldrh	r3, [r4, #12]
 800ca52:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ca56:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800ca5a:	81a3      	strh	r3, [r4, #12]
 800ca5c:	4632      	mov	r2, r6
 800ca5e:	463b      	mov	r3, r7
 800ca60:	4628      	mov	r0, r5
 800ca62:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ca66:	f000 b8eb 	b.w	800cc40 <_write_r>

0800ca6a <__sseek>:
 800ca6a:	b510      	push	{r4, lr}
 800ca6c:	460c      	mov	r4, r1
 800ca6e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ca72:	f000 f8c1 	bl	800cbf8 <_lseek_r>
 800ca76:	1c43      	adds	r3, r0, #1
 800ca78:	89a3      	ldrh	r3, [r4, #12]
 800ca7a:	bf15      	itete	ne
 800ca7c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800ca7e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800ca82:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800ca86:	81a3      	strheq	r3, [r4, #12]
 800ca88:	bf18      	it	ne
 800ca8a:	81a3      	strhne	r3, [r4, #12]
 800ca8c:	bd10      	pop	{r4, pc}

0800ca8e <__sclose>:
 800ca8e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ca92:	f000 b8a1 	b.w	800cbd8 <_close_r>

0800ca96 <__swbuf_r>:
 800ca96:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ca98:	460e      	mov	r6, r1
 800ca9a:	4614      	mov	r4, r2
 800ca9c:	4605      	mov	r5, r0
 800ca9e:	b118      	cbz	r0, 800caa8 <__swbuf_r+0x12>
 800caa0:	6a03      	ldr	r3, [r0, #32]
 800caa2:	b90b      	cbnz	r3, 800caa8 <__swbuf_r+0x12>
 800caa4:	f7ff feb6 	bl	800c814 <__sinit>
 800caa8:	69a3      	ldr	r3, [r4, #24]
 800caaa:	60a3      	str	r3, [r4, #8]
 800caac:	89a3      	ldrh	r3, [r4, #12]
 800caae:	071a      	lsls	r2, r3, #28
 800cab0:	d501      	bpl.n	800cab6 <__swbuf_r+0x20>
 800cab2:	6923      	ldr	r3, [r4, #16]
 800cab4:	b943      	cbnz	r3, 800cac8 <__swbuf_r+0x32>
 800cab6:	4621      	mov	r1, r4
 800cab8:	4628      	mov	r0, r5
 800caba:	f000 f82b 	bl	800cb14 <__swsetup_r>
 800cabe:	b118      	cbz	r0, 800cac8 <__swbuf_r+0x32>
 800cac0:	f04f 37ff 	mov.w	r7, #4294967295
 800cac4:	4638      	mov	r0, r7
 800cac6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cac8:	6823      	ldr	r3, [r4, #0]
 800caca:	6922      	ldr	r2, [r4, #16]
 800cacc:	1a98      	subs	r0, r3, r2
 800cace:	6963      	ldr	r3, [r4, #20]
 800cad0:	b2f6      	uxtb	r6, r6
 800cad2:	4283      	cmp	r3, r0
 800cad4:	4637      	mov	r7, r6
 800cad6:	dc05      	bgt.n	800cae4 <__swbuf_r+0x4e>
 800cad8:	4621      	mov	r1, r4
 800cada:	4628      	mov	r0, r5
 800cadc:	f002 fec8 	bl	800f870 <_fflush_r>
 800cae0:	2800      	cmp	r0, #0
 800cae2:	d1ed      	bne.n	800cac0 <__swbuf_r+0x2a>
 800cae4:	68a3      	ldr	r3, [r4, #8]
 800cae6:	3b01      	subs	r3, #1
 800cae8:	60a3      	str	r3, [r4, #8]
 800caea:	6823      	ldr	r3, [r4, #0]
 800caec:	1c5a      	adds	r2, r3, #1
 800caee:	6022      	str	r2, [r4, #0]
 800caf0:	701e      	strb	r6, [r3, #0]
 800caf2:	6962      	ldr	r2, [r4, #20]
 800caf4:	1c43      	adds	r3, r0, #1
 800caf6:	429a      	cmp	r2, r3
 800caf8:	d004      	beq.n	800cb04 <__swbuf_r+0x6e>
 800cafa:	89a3      	ldrh	r3, [r4, #12]
 800cafc:	07db      	lsls	r3, r3, #31
 800cafe:	d5e1      	bpl.n	800cac4 <__swbuf_r+0x2e>
 800cb00:	2e0a      	cmp	r6, #10
 800cb02:	d1df      	bne.n	800cac4 <__swbuf_r+0x2e>
 800cb04:	4621      	mov	r1, r4
 800cb06:	4628      	mov	r0, r5
 800cb08:	f002 feb2 	bl	800f870 <_fflush_r>
 800cb0c:	2800      	cmp	r0, #0
 800cb0e:	d0d9      	beq.n	800cac4 <__swbuf_r+0x2e>
 800cb10:	e7d6      	b.n	800cac0 <__swbuf_r+0x2a>
	...

0800cb14 <__swsetup_r>:
 800cb14:	b538      	push	{r3, r4, r5, lr}
 800cb16:	4b29      	ldr	r3, [pc, #164]	@ (800cbbc <__swsetup_r+0xa8>)
 800cb18:	4605      	mov	r5, r0
 800cb1a:	6818      	ldr	r0, [r3, #0]
 800cb1c:	460c      	mov	r4, r1
 800cb1e:	b118      	cbz	r0, 800cb28 <__swsetup_r+0x14>
 800cb20:	6a03      	ldr	r3, [r0, #32]
 800cb22:	b90b      	cbnz	r3, 800cb28 <__swsetup_r+0x14>
 800cb24:	f7ff fe76 	bl	800c814 <__sinit>
 800cb28:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cb2c:	0719      	lsls	r1, r3, #28
 800cb2e:	d422      	bmi.n	800cb76 <__swsetup_r+0x62>
 800cb30:	06da      	lsls	r2, r3, #27
 800cb32:	d407      	bmi.n	800cb44 <__swsetup_r+0x30>
 800cb34:	2209      	movs	r2, #9
 800cb36:	602a      	str	r2, [r5, #0]
 800cb38:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800cb3c:	81a3      	strh	r3, [r4, #12]
 800cb3e:	f04f 30ff 	mov.w	r0, #4294967295
 800cb42:	e033      	b.n	800cbac <__swsetup_r+0x98>
 800cb44:	0758      	lsls	r0, r3, #29
 800cb46:	d512      	bpl.n	800cb6e <__swsetup_r+0x5a>
 800cb48:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800cb4a:	b141      	cbz	r1, 800cb5e <__swsetup_r+0x4a>
 800cb4c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800cb50:	4299      	cmp	r1, r3
 800cb52:	d002      	beq.n	800cb5a <__swsetup_r+0x46>
 800cb54:	4628      	mov	r0, r5
 800cb56:	f000 ff3f 	bl	800d9d8 <_free_r>
 800cb5a:	2300      	movs	r3, #0
 800cb5c:	6363      	str	r3, [r4, #52]	@ 0x34
 800cb5e:	89a3      	ldrh	r3, [r4, #12]
 800cb60:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800cb64:	81a3      	strh	r3, [r4, #12]
 800cb66:	2300      	movs	r3, #0
 800cb68:	6063      	str	r3, [r4, #4]
 800cb6a:	6923      	ldr	r3, [r4, #16]
 800cb6c:	6023      	str	r3, [r4, #0]
 800cb6e:	89a3      	ldrh	r3, [r4, #12]
 800cb70:	f043 0308 	orr.w	r3, r3, #8
 800cb74:	81a3      	strh	r3, [r4, #12]
 800cb76:	6923      	ldr	r3, [r4, #16]
 800cb78:	b94b      	cbnz	r3, 800cb8e <__swsetup_r+0x7a>
 800cb7a:	89a3      	ldrh	r3, [r4, #12]
 800cb7c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800cb80:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800cb84:	d003      	beq.n	800cb8e <__swsetup_r+0x7a>
 800cb86:	4621      	mov	r1, r4
 800cb88:	4628      	mov	r0, r5
 800cb8a:	f002 fed1 	bl	800f930 <__smakebuf_r>
 800cb8e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cb92:	f013 0201 	ands.w	r2, r3, #1
 800cb96:	d00a      	beq.n	800cbae <__swsetup_r+0x9a>
 800cb98:	2200      	movs	r2, #0
 800cb9a:	60a2      	str	r2, [r4, #8]
 800cb9c:	6962      	ldr	r2, [r4, #20]
 800cb9e:	4252      	negs	r2, r2
 800cba0:	61a2      	str	r2, [r4, #24]
 800cba2:	6922      	ldr	r2, [r4, #16]
 800cba4:	b942      	cbnz	r2, 800cbb8 <__swsetup_r+0xa4>
 800cba6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800cbaa:	d1c5      	bne.n	800cb38 <__swsetup_r+0x24>
 800cbac:	bd38      	pop	{r3, r4, r5, pc}
 800cbae:	0799      	lsls	r1, r3, #30
 800cbb0:	bf58      	it	pl
 800cbb2:	6962      	ldrpl	r2, [r4, #20]
 800cbb4:	60a2      	str	r2, [r4, #8]
 800cbb6:	e7f4      	b.n	800cba2 <__swsetup_r+0x8e>
 800cbb8:	2000      	movs	r0, #0
 800cbba:	e7f7      	b.n	800cbac <__swsetup_r+0x98>
 800cbbc:	2000d140 	.word	0x2000d140

0800cbc0 <memset>:
 800cbc0:	4402      	add	r2, r0
 800cbc2:	4603      	mov	r3, r0
 800cbc4:	4293      	cmp	r3, r2
 800cbc6:	d100      	bne.n	800cbca <memset+0xa>
 800cbc8:	4770      	bx	lr
 800cbca:	f803 1b01 	strb.w	r1, [r3], #1
 800cbce:	e7f9      	b.n	800cbc4 <memset+0x4>

0800cbd0 <_localeconv_r>:
 800cbd0:	4800      	ldr	r0, [pc, #0]	@ (800cbd4 <_localeconv_r+0x4>)
 800cbd2:	4770      	bx	lr
 800cbd4:	2000d280 	.word	0x2000d280

0800cbd8 <_close_r>:
 800cbd8:	b538      	push	{r3, r4, r5, lr}
 800cbda:	4d06      	ldr	r5, [pc, #24]	@ (800cbf4 <_close_r+0x1c>)
 800cbdc:	2300      	movs	r3, #0
 800cbde:	4604      	mov	r4, r0
 800cbe0:	4608      	mov	r0, r1
 800cbe2:	602b      	str	r3, [r5, #0]
 800cbe4:	f7f4 fa5e 	bl	80010a4 <_close>
 800cbe8:	1c43      	adds	r3, r0, #1
 800cbea:	d102      	bne.n	800cbf2 <_close_r+0x1a>
 800cbec:	682b      	ldr	r3, [r5, #0]
 800cbee:	b103      	cbz	r3, 800cbf2 <_close_r+0x1a>
 800cbf0:	6023      	str	r3, [r4, #0]
 800cbf2:	bd38      	pop	{r3, r4, r5, pc}
 800cbf4:	20014214 	.word	0x20014214

0800cbf8 <_lseek_r>:
 800cbf8:	b538      	push	{r3, r4, r5, lr}
 800cbfa:	4d07      	ldr	r5, [pc, #28]	@ (800cc18 <_lseek_r+0x20>)
 800cbfc:	4604      	mov	r4, r0
 800cbfe:	4608      	mov	r0, r1
 800cc00:	4611      	mov	r1, r2
 800cc02:	2200      	movs	r2, #0
 800cc04:	602a      	str	r2, [r5, #0]
 800cc06:	461a      	mov	r2, r3
 800cc08:	f7f4 fa80 	bl	800110c <_lseek>
 800cc0c:	1c43      	adds	r3, r0, #1
 800cc0e:	d102      	bne.n	800cc16 <_lseek_r+0x1e>
 800cc10:	682b      	ldr	r3, [r5, #0]
 800cc12:	b103      	cbz	r3, 800cc16 <_lseek_r+0x1e>
 800cc14:	6023      	str	r3, [r4, #0]
 800cc16:	bd38      	pop	{r3, r4, r5, pc}
 800cc18:	20014214 	.word	0x20014214

0800cc1c <_read_r>:
 800cc1c:	b538      	push	{r3, r4, r5, lr}
 800cc1e:	4d07      	ldr	r5, [pc, #28]	@ (800cc3c <_read_r+0x20>)
 800cc20:	4604      	mov	r4, r0
 800cc22:	4608      	mov	r0, r1
 800cc24:	4611      	mov	r1, r2
 800cc26:	2200      	movs	r2, #0
 800cc28:	602a      	str	r2, [r5, #0]
 800cc2a:	461a      	mov	r2, r3
 800cc2c:	f7f4 fa82 	bl	8001134 <_read>
 800cc30:	1c43      	adds	r3, r0, #1
 800cc32:	d102      	bne.n	800cc3a <_read_r+0x1e>
 800cc34:	682b      	ldr	r3, [r5, #0]
 800cc36:	b103      	cbz	r3, 800cc3a <_read_r+0x1e>
 800cc38:	6023      	str	r3, [r4, #0]
 800cc3a:	bd38      	pop	{r3, r4, r5, pc}
 800cc3c:	20014214 	.word	0x20014214

0800cc40 <_write_r>:
 800cc40:	b538      	push	{r3, r4, r5, lr}
 800cc42:	4d07      	ldr	r5, [pc, #28]	@ (800cc60 <_write_r+0x20>)
 800cc44:	4604      	mov	r4, r0
 800cc46:	4608      	mov	r0, r1
 800cc48:	4611      	mov	r1, r2
 800cc4a:	2200      	movs	r2, #0
 800cc4c:	602a      	str	r2, [r5, #0]
 800cc4e:	461a      	mov	r2, r3
 800cc50:	f7f4 fa14 	bl	800107c <_write>
 800cc54:	1c43      	adds	r3, r0, #1
 800cc56:	d102      	bne.n	800cc5e <_write_r+0x1e>
 800cc58:	682b      	ldr	r3, [r5, #0]
 800cc5a:	b103      	cbz	r3, 800cc5e <_write_r+0x1e>
 800cc5c:	6023      	str	r3, [r4, #0]
 800cc5e:	bd38      	pop	{r3, r4, r5, pc}
 800cc60:	20014214 	.word	0x20014214

0800cc64 <__errno>:
 800cc64:	4b01      	ldr	r3, [pc, #4]	@ (800cc6c <__errno+0x8>)
 800cc66:	6818      	ldr	r0, [r3, #0]
 800cc68:	4770      	bx	lr
 800cc6a:	bf00      	nop
 800cc6c:	2000d140 	.word	0x2000d140

0800cc70 <__libc_init_array>:
 800cc70:	b570      	push	{r4, r5, r6, lr}
 800cc72:	4d0d      	ldr	r5, [pc, #52]	@ (800cca8 <__libc_init_array+0x38>)
 800cc74:	4c0d      	ldr	r4, [pc, #52]	@ (800ccac <__libc_init_array+0x3c>)
 800cc76:	1b64      	subs	r4, r4, r5
 800cc78:	10a4      	asrs	r4, r4, #2
 800cc7a:	2600      	movs	r6, #0
 800cc7c:	42a6      	cmp	r6, r4
 800cc7e:	d109      	bne.n	800cc94 <__libc_init_array+0x24>
 800cc80:	4d0b      	ldr	r5, [pc, #44]	@ (800ccb0 <__libc_init_array+0x40>)
 800cc82:	4c0c      	ldr	r4, [pc, #48]	@ (800ccb4 <__libc_init_array+0x44>)
 800cc84:	f003 fae4 	bl	8010250 <_init>
 800cc88:	1b64      	subs	r4, r4, r5
 800cc8a:	10a4      	asrs	r4, r4, #2
 800cc8c:	2600      	movs	r6, #0
 800cc8e:	42a6      	cmp	r6, r4
 800cc90:	d105      	bne.n	800cc9e <__libc_init_array+0x2e>
 800cc92:	bd70      	pop	{r4, r5, r6, pc}
 800cc94:	f855 3b04 	ldr.w	r3, [r5], #4
 800cc98:	4798      	blx	r3
 800cc9a:	3601      	adds	r6, #1
 800cc9c:	e7ee      	b.n	800cc7c <__libc_init_array+0xc>
 800cc9e:	f855 3b04 	ldr.w	r3, [r5], #4
 800cca2:	4798      	blx	r3
 800cca4:	3601      	adds	r6, #1
 800cca6:	e7f2      	b.n	800cc8e <__libc_init_array+0x1e>
 800cca8:	08011f14 	.word	0x08011f14
 800ccac:	08011f14 	.word	0x08011f14
 800ccb0:	08011f14 	.word	0x08011f14
 800ccb4:	08011f18 	.word	0x08011f18

0800ccb8 <__retarget_lock_init_recursive>:
 800ccb8:	4770      	bx	lr

0800ccba <__retarget_lock_acquire_recursive>:
 800ccba:	4770      	bx	lr

0800ccbc <__retarget_lock_release_recursive>:
 800ccbc:	4770      	bx	lr

0800ccbe <memcpy>:
 800ccbe:	440a      	add	r2, r1
 800ccc0:	4291      	cmp	r1, r2
 800ccc2:	f100 33ff 	add.w	r3, r0, #4294967295
 800ccc6:	d100      	bne.n	800ccca <memcpy+0xc>
 800ccc8:	4770      	bx	lr
 800ccca:	b510      	push	{r4, lr}
 800cccc:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ccd0:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ccd4:	4291      	cmp	r1, r2
 800ccd6:	d1f9      	bne.n	800cccc <memcpy+0xe>
 800ccd8:	bd10      	pop	{r4, pc}
	...

0800ccdc <nanf>:
 800ccdc:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800cce4 <nanf+0x8>
 800cce0:	4770      	bx	lr
 800cce2:	bf00      	nop
 800cce4:	7fc00000 	.word	0x7fc00000

0800cce8 <__assert_func>:
 800cce8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ccea:	4614      	mov	r4, r2
 800ccec:	461a      	mov	r2, r3
 800ccee:	4b09      	ldr	r3, [pc, #36]	@ (800cd14 <__assert_func+0x2c>)
 800ccf0:	681b      	ldr	r3, [r3, #0]
 800ccf2:	4605      	mov	r5, r0
 800ccf4:	68d8      	ldr	r0, [r3, #12]
 800ccf6:	b14c      	cbz	r4, 800cd0c <__assert_func+0x24>
 800ccf8:	4b07      	ldr	r3, [pc, #28]	@ (800cd18 <__assert_func+0x30>)
 800ccfa:	9100      	str	r1, [sp, #0]
 800ccfc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800cd00:	4906      	ldr	r1, [pc, #24]	@ (800cd1c <__assert_func+0x34>)
 800cd02:	462b      	mov	r3, r5
 800cd04:	f002 fddc 	bl	800f8c0 <fiprintf>
 800cd08:	f002 feb6 	bl	800fa78 <abort>
 800cd0c:	4b04      	ldr	r3, [pc, #16]	@ (800cd20 <__assert_func+0x38>)
 800cd0e:	461c      	mov	r4, r3
 800cd10:	e7f3      	b.n	800ccfa <__assert_func+0x12>
 800cd12:	bf00      	nop
 800cd14:	2000d140 	.word	0x2000d140
 800cd18:	08011b1d 	.word	0x08011b1d
 800cd1c:	08011b2a 	.word	0x08011b2a
 800cd20:	08011b58 	.word	0x08011b58

0800cd24 <quorem>:
 800cd24:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cd28:	6903      	ldr	r3, [r0, #16]
 800cd2a:	690c      	ldr	r4, [r1, #16]
 800cd2c:	42a3      	cmp	r3, r4
 800cd2e:	4607      	mov	r7, r0
 800cd30:	db7e      	blt.n	800ce30 <quorem+0x10c>
 800cd32:	3c01      	subs	r4, #1
 800cd34:	f101 0814 	add.w	r8, r1, #20
 800cd38:	00a3      	lsls	r3, r4, #2
 800cd3a:	f100 0514 	add.w	r5, r0, #20
 800cd3e:	9300      	str	r3, [sp, #0]
 800cd40:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800cd44:	9301      	str	r3, [sp, #4]
 800cd46:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800cd4a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800cd4e:	3301      	adds	r3, #1
 800cd50:	429a      	cmp	r2, r3
 800cd52:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800cd56:	fbb2 f6f3 	udiv	r6, r2, r3
 800cd5a:	d32e      	bcc.n	800cdba <quorem+0x96>
 800cd5c:	f04f 0a00 	mov.w	sl, #0
 800cd60:	46c4      	mov	ip, r8
 800cd62:	46ae      	mov	lr, r5
 800cd64:	46d3      	mov	fp, sl
 800cd66:	f85c 3b04 	ldr.w	r3, [ip], #4
 800cd6a:	b298      	uxth	r0, r3
 800cd6c:	fb06 a000 	mla	r0, r6, r0, sl
 800cd70:	0c02      	lsrs	r2, r0, #16
 800cd72:	0c1b      	lsrs	r3, r3, #16
 800cd74:	fb06 2303 	mla	r3, r6, r3, r2
 800cd78:	f8de 2000 	ldr.w	r2, [lr]
 800cd7c:	b280      	uxth	r0, r0
 800cd7e:	b292      	uxth	r2, r2
 800cd80:	1a12      	subs	r2, r2, r0
 800cd82:	445a      	add	r2, fp
 800cd84:	f8de 0000 	ldr.w	r0, [lr]
 800cd88:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800cd8c:	b29b      	uxth	r3, r3
 800cd8e:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800cd92:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800cd96:	b292      	uxth	r2, r2
 800cd98:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800cd9c:	45e1      	cmp	r9, ip
 800cd9e:	f84e 2b04 	str.w	r2, [lr], #4
 800cda2:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800cda6:	d2de      	bcs.n	800cd66 <quorem+0x42>
 800cda8:	9b00      	ldr	r3, [sp, #0]
 800cdaa:	58eb      	ldr	r3, [r5, r3]
 800cdac:	b92b      	cbnz	r3, 800cdba <quorem+0x96>
 800cdae:	9b01      	ldr	r3, [sp, #4]
 800cdb0:	3b04      	subs	r3, #4
 800cdb2:	429d      	cmp	r5, r3
 800cdb4:	461a      	mov	r2, r3
 800cdb6:	d32f      	bcc.n	800ce18 <quorem+0xf4>
 800cdb8:	613c      	str	r4, [r7, #16]
 800cdba:	4638      	mov	r0, r7
 800cdbc:	f001 f9c8 	bl	800e150 <__mcmp>
 800cdc0:	2800      	cmp	r0, #0
 800cdc2:	db25      	blt.n	800ce10 <quorem+0xec>
 800cdc4:	4629      	mov	r1, r5
 800cdc6:	2000      	movs	r0, #0
 800cdc8:	f858 2b04 	ldr.w	r2, [r8], #4
 800cdcc:	f8d1 c000 	ldr.w	ip, [r1]
 800cdd0:	fa1f fe82 	uxth.w	lr, r2
 800cdd4:	fa1f f38c 	uxth.w	r3, ip
 800cdd8:	eba3 030e 	sub.w	r3, r3, lr
 800cddc:	4403      	add	r3, r0
 800cdde:	0c12      	lsrs	r2, r2, #16
 800cde0:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800cde4:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800cde8:	b29b      	uxth	r3, r3
 800cdea:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800cdee:	45c1      	cmp	r9, r8
 800cdf0:	f841 3b04 	str.w	r3, [r1], #4
 800cdf4:	ea4f 4022 	mov.w	r0, r2, asr #16
 800cdf8:	d2e6      	bcs.n	800cdc8 <quorem+0xa4>
 800cdfa:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800cdfe:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ce02:	b922      	cbnz	r2, 800ce0e <quorem+0xea>
 800ce04:	3b04      	subs	r3, #4
 800ce06:	429d      	cmp	r5, r3
 800ce08:	461a      	mov	r2, r3
 800ce0a:	d30b      	bcc.n	800ce24 <quorem+0x100>
 800ce0c:	613c      	str	r4, [r7, #16]
 800ce0e:	3601      	adds	r6, #1
 800ce10:	4630      	mov	r0, r6
 800ce12:	b003      	add	sp, #12
 800ce14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ce18:	6812      	ldr	r2, [r2, #0]
 800ce1a:	3b04      	subs	r3, #4
 800ce1c:	2a00      	cmp	r2, #0
 800ce1e:	d1cb      	bne.n	800cdb8 <quorem+0x94>
 800ce20:	3c01      	subs	r4, #1
 800ce22:	e7c6      	b.n	800cdb2 <quorem+0x8e>
 800ce24:	6812      	ldr	r2, [r2, #0]
 800ce26:	3b04      	subs	r3, #4
 800ce28:	2a00      	cmp	r2, #0
 800ce2a:	d1ef      	bne.n	800ce0c <quorem+0xe8>
 800ce2c:	3c01      	subs	r4, #1
 800ce2e:	e7ea      	b.n	800ce06 <quorem+0xe2>
 800ce30:	2000      	movs	r0, #0
 800ce32:	e7ee      	b.n	800ce12 <quorem+0xee>
 800ce34:	0000      	movs	r0, r0
	...

0800ce38 <_dtoa_r>:
 800ce38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ce3c:	69c7      	ldr	r7, [r0, #28]
 800ce3e:	b097      	sub	sp, #92	@ 0x5c
 800ce40:	ed8d 0b04 	vstr	d0, [sp, #16]
 800ce44:	ec55 4b10 	vmov	r4, r5, d0
 800ce48:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 800ce4a:	9107      	str	r1, [sp, #28]
 800ce4c:	4681      	mov	r9, r0
 800ce4e:	920c      	str	r2, [sp, #48]	@ 0x30
 800ce50:	9311      	str	r3, [sp, #68]	@ 0x44
 800ce52:	b97f      	cbnz	r7, 800ce74 <_dtoa_r+0x3c>
 800ce54:	2010      	movs	r0, #16
 800ce56:	f000 fe09 	bl	800da6c <malloc>
 800ce5a:	4602      	mov	r2, r0
 800ce5c:	f8c9 001c 	str.w	r0, [r9, #28]
 800ce60:	b920      	cbnz	r0, 800ce6c <_dtoa_r+0x34>
 800ce62:	4ba9      	ldr	r3, [pc, #676]	@ (800d108 <_dtoa_r+0x2d0>)
 800ce64:	21ef      	movs	r1, #239	@ 0xef
 800ce66:	48a9      	ldr	r0, [pc, #676]	@ (800d10c <_dtoa_r+0x2d4>)
 800ce68:	f7ff ff3e 	bl	800cce8 <__assert_func>
 800ce6c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800ce70:	6007      	str	r7, [r0, #0]
 800ce72:	60c7      	str	r7, [r0, #12]
 800ce74:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800ce78:	6819      	ldr	r1, [r3, #0]
 800ce7a:	b159      	cbz	r1, 800ce94 <_dtoa_r+0x5c>
 800ce7c:	685a      	ldr	r2, [r3, #4]
 800ce7e:	604a      	str	r2, [r1, #4]
 800ce80:	2301      	movs	r3, #1
 800ce82:	4093      	lsls	r3, r2
 800ce84:	608b      	str	r3, [r1, #8]
 800ce86:	4648      	mov	r0, r9
 800ce88:	f000 fee6 	bl	800dc58 <_Bfree>
 800ce8c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800ce90:	2200      	movs	r2, #0
 800ce92:	601a      	str	r2, [r3, #0]
 800ce94:	1e2b      	subs	r3, r5, #0
 800ce96:	bfb9      	ittee	lt
 800ce98:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800ce9c:	9305      	strlt	r3, [sp, #20]
 800ce9e:	2300      	movge	r3, #0
 800cea0:	6033      	strge	r3, [r6, #0]
 800cea2:	9f05      	ldr	r7, [sp, #20]
 800cea4:	4b9a      	ldr	r3, [pc, #616]	@ (800d110 <_dtoa_r+0x2d8>)
 800cea6:	bfbc      	itt	lt
 800cea8:	2201      	movlt	r2, #1
 800ceaa:	6032      	strlt	r2, [r6, #0]
 800ceac:	43bb      	bics	r3, r7
 800ceae:	d112      	bne.n	800ced6 <_dtoa_r+0x9e>
 800ceb0:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800ceb2:	f242 730f 	movw	r3, #9999	@ 0x270f
 800ceb6:	6013      	str	r3, [r2, #0]
 800ceb8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800cebc:	4323      	orrs	r3, r4
 800cebe:	f000 855a 	beq.w	800d976 <_dtoa_r+0xb3e>
 800cec2:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800cec4:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 800d124 <_dtoa_r+0x2ec>
 800cec8:	2b00      	cmp	r3, #0
 800ceca:	f000 855c 	beq.w	800d986 <_dtoa_r+0xb4e>
 800cece:	f10a 0303 	add.w	r3, sl, #3
 800ced2:	f000 bd56 	b.w	800d982 <_dtoa_r+0xb4a>
 800ced6:	ed9d 7b04 	vldr	d7, [sp, #16]
 800ceda:	2200      	movs	r2, #0
 800cedc:	ec51 0b17 	vmov	r0, r1, d7
 800cee0:	2300      	movs	r3, #0
 800cee2:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 800cee6:	f7f3 fdf7 	bl	8000ad8 <__aeabi_dcmpeq>
 800ceea:	4680      	mov	r8, r0
 800ceec:	b158      	cbz	r0, 800cf06 <_dtoa_r+0xce>
 800ceee:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800cef0:	2301      	movs	r3, #1
 800cef2:	6013      	str	r3, [r2, #0]
 800cef4:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800cef6:	b113      	cbz	r3, 800cefe <_dtoa_r+0xc6>
 800cef8:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800cefa:	4b86      	ldr	r3, [pc, #536]	@ (800d114 <_dtoa_r+0x2dc>)
 800cefc:	6013      	str	r3, [r2, #0]
 800cefe:	f8df a228 	ldr.w	sl, [pc, #552]	@ 800d128 <_dtoa_r+0x2f0>
 800cf02:	f000 bd40 	b.w	800d986 <_dtoa_r+0xb4e>
 800cf06:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 800cf0a:	aa14      	add	r2, sp, #80	@ 0x50
 800cf0c:	a915      	add	r1, sp, #84	@ 0x54
 800cf0e:	4648      	mov	r0, r9
 800cf10:	f001 fa3e 	bl	800e390 <__d2b>
 800cf14:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800cf18:	9002      	str	r0, [sp, #8]
 800cf1a:	2e00      	cmp	r6, #0
 800cf1c:	d078      	beq.n	800d010 <_dtoa_r+0x1d8>
 800cf1e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800cf20:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 800cf24:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800cf28:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800cf2c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800cf30:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800cf34:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800cf38:	4619      	mov	r1, r3
 800cf3a:	2200      	movs	r2, #0
 800cf3c:	4b76      	ldr	r3, [pc, #472]	@ (800d118 <_dtoa_r+0x2e0>)
 800cf3e:	f7f3 f9ab 	bl	8000298 <__aeabi_dsub>
 800cf42:	a36b      	add	r3, pc, #428	@ (adr r3, 800d0f0 <_dtoa_r+0x2b8>)
 800cf44:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf48:	f7f3 fb5e 	bl	8000608 <__aeabi_dmul>
 800cf4c:	a36a      	add	r3, pc, #424	@ (adr r3, 800d0f8 <_dtoa_r+0x2c0>)
 800cf4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf52:	f7f3 f9a3 	bl	800029c <__adddf3>
 800cf56:	4604      	mov	r4, r0
 800cf58:	4630      	mov	r0, r6
 800cf5a:	460d      	mov	r5, r1
 800cf5c:	f7f3 faea 	bl	8000534 <__aeabi_i2d>
 800cf60:	a367      	add	r3, pc, #412	@ (adr r3, 800d100 <_dtoa_r+0x2c8>)
 800cf62:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf66:	f7f3 fb4f 	bl	8000608 <__aeabi_dmul>
 800cf6a:	4602      	mov	r2, r0
 800cf6c:	460b      	mov	r3, r1
 800cf6e:	4620      	mov	r0, r4
 800cf70:	4629      	mov	r1, r5
 800cf72:	f7f3 f993 	bl	800029c <__adddf3>
 800cf76:	4604      	mov	r4, r0
 800cf78:	460d      	mov	r5, r1
 800cf7a:	f7f3 fdf5 	bl	8000b68 <__aeabi_d2iz>
 800cf7e:	2200      	movs	r2, #0
 800cf80:	4607      	mov	r7, r0
 800cf82:	2300      	movs	r3, #0
 800cf84:	4620      	mov	r0, r4
 800cf86:	4629      	mov	r1, r5
 800cf88:	f7f3 fdb0 	bl	8000aec <__aeabi_dcmplt>
 800cf8c:	b140      	cbz	r0, 800cfa0 <_dtoa_r+0x168>
 800cf8e:	4638      	mov	r0, r7
 800cf90:	f7f3 fad0 	bl	8000534 <__aeabi_i2d>
 800cf94:	4622      	mov	r2, r4
 800cf96:	462b      	mov	r3, r5
 800cf98:	f7f3 fd9e 	bl	8000ad8 <__aeabi_dcmpeq>
 800cf9c:	b900      	cbnz	r0, 800cfa0 <_dtoa_r+0x168>
 800cf9e:	3f01      	subs	r7, #1
 800cfa0:	2f16      	cmp	r7, #22
 800cfa2:	d852      	bhi.n	800d04a <_dtoa_r+0x212>
 800cfa4:	4b5d      	ldr	r3, [pc, #372]	@ (800d11c <_dtoa_r+0x2e4>)
 800cfa6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800cfaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cfae:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800cfb2:	f7f3 fd9b 	bl	8000aec <__aeabi_dcmplt>
 800cfb6:	2800      	cmp	r0, #0
 800cfb8:	d049      	beq.n	800d04e <_dtoa_r+0x216>
 800cfba:	3f01      	subs	r7, #1
 800cfbc:	2300      	movs	r3, #0
 800cfbe:	9310      	str	r3, [sp, #64]	@ 0x40
 800cfc0:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800cfc2:	1b9b      	subs	r3, r3, r6
 800cfc4:	1e5a      	subs	r2, r3, #1
 800cfc6:	bf45      	ittet	mi
 800cfc8:	f1c3 0301 	rsbmi	r3, r3, #1
 800cfcc:	9300      	strmi	r3, [sp, #0]
 800cfce:	2300      	movpl	r3, #0
 800cfd0:	2300      	movmi	r3, #0
 800cfd2:	9206      	str	r2, [sp, #24]
 800cfd4:	bf54      	ite	pl
 800cfd6:	9300      	strpl	r3, [sp, #0]
 800cfd8:	9306      	strmi	r3, [sp, #24]
 800cfda:	2f00      	cmp	r7, #0
 800cfdc:	db39      	blt.n	800d052 <_dtoa_r+0x21a>
 800cfde:	9b06      	ldr	r3, [sp, #24]
 800cfe0:	970d      	str	r7, [sp, #52]	@ 0x34
 800cfe2:	443b      	add	r3, r7
 800cfe4:	9306      	str	r3, [sp, #24]
 800cfe6:	2300      	movs	r3, #0
 800cfe8:	9308      	str	r3, [sp, #32]
 800cfea:	9b07      	ldr	r3, [sp, #28]
 800cfec:	2b09      	cmp	r3, #9
 800cfee:	d863      	bhi.n	800d0b8 <_dtoa_r+0x280>
 800cff0:	2b05      	cmp	r3, #5
 800cff2:	bfc4      	itt	gt
 800cff4:	3b04      	subgt	r3, #4
 800cff6:	9307      	strgt	r3, [sp, #28]
 800cff8:	9b07      	ldr	r3, [sp, #28]
 800cffa:	f1a3 0302 	sub.w	r3, r3, #2
 800cffe:	bfcc      	ite	gt
 800d000:	2400      	movgt	r4, #0
 800d002:	2401      	movle	r4, #1
 800d004:	2b03      	cmp	r3, #3
 800d006:	d863      	bhi.n	800d0d0 <_dtoa_r+0x298>
 800d008:	e8df f003 	tbb	[pc, r3]
 800d00c:	2b375452 	.word	0x2b375452
 800d010:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 800d014:	441e      	add	r6, r3
 800d016:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800d01a:	2b20      	cmp	r3, #32
 800d01c:	bfc1      	itttt	gt
 800d01e:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800d022:	409f      	lslgt	r7, r3
 800d024:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800d028:	fa24 f303 	lsrgt.w	r3, r4, r3
 800d02c:	bfd6      	itet	le
 800d02e:	f1c3 0320 	rsble	r3, r3, #32
 800d032:	ea47 0003 	orrgt.w	r0, r7, r3
 800d036:	fa04 f003 	lslle.w	r0, r4, r3
 800d03a:	f7f3 fa6b 	bl	8000514 <__aeabi_ui2d>
 800d03e:	2201      	movs	r2, #1
 800d040:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800d044:	3e01      	subs	r6, #1
 800d046:	9212      	str	r2, [sp, #72]	@ 0x48
 800d048:	e776      	b.n	800cf38 <_dtoa_r+0x100>
 800d04a:	2301      	movs	r3, #1
 800d04c:	e7b7      	b.n	800cfbe <_dtoa_r+0x186>
 800d04e:	9010      	str	r0, [sp, #64]	@ 0x40
 800d050:	e7b6      	b.n	800cfc0 <_dtoa_r+0x188>
 800d052:	9b00      	ldr	r3, [sp, #0]
 800d054:	1bdb      	subs	r3, r3, r7
 800d056:	9300      	str	r3, [sp, #0]
 800d058:	427b      	negs	r3, r7
 800d05a:	9308      	str	r3, [sp, #32]
 800d05c:	2300      	movs	r3, #0
 800d05e:	930d      	str	r3, [sp, #52]	@ 0x34
 800d060:	e7c3      	b.n	800cfea <_dtoa_r+0x1b2>
 800d062:	2301      	movs	r3, #1
 800d064:	9309      	str	r3, [sp, #36]	@ 0x24
 800d066:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800d068:	eb07 0b03 	add.w	fp, r7, r3
 800d06c:	f10b 0301 	add.w	r3, fp, #1
 800d070:	2b01      	cmp	r3, #1
 800d072:	9303      	str	r3, [sp, #12]
 800d074:	bfb8      	it	lt
 800d076:	2301      	movlt	r3, #1
 800d078:	e006      	b.n	800d088 <_dtoa_r+0x250>
 800d07a:	2301      	movs	r3, #1
 800d07c:	9309      	str	r3, [sp, #36]	@ 0x24
 800d07e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800d080:	2b00      	cmp	r3, #0
 800d082:	dd28      	ble.n	800d0d6 <_dtoa_r+0x29e>
 800d084:	469b      	mov	fp, r3
 800d086:	9303      	str	r3, [sp, #12]
 800d088:	f8d9 001c 	ldr.w	r0, [r9, #28]
 800d08c:	2100      	movs	r1, #0
 800d08e:	2204      	movs	r2, #4
 800d090:	f102 0514 	add.w	r5, r2, #20
 800d094:	429d      	cmp	r5, r3
 800d096:	d926      	bls.n	800d0e6 <_dtoa_r+0x2ae>
 800d098:	6041      	str	r1, [r0, #4]
 800d09a:	4648      	mov	r0, r9
 800d09c:	f000 fd9c 	bl	800dbd8 <_Balloc>
 800d0a0:	4682      	mov	sl, r0
 800d0a2:	2800      	cmp	r0, #0
 800d0a4:	d142      	bne.n	800d12c <_dtoa_r+0x2f4>
 800d0a6:	4b1e      	ldr	r3, [pc, #120]	@ (800d120 <_dtoa_r+0x2e8>)
 800d0a8:	4602      	mov	r2, r0
 800d0aa:	f240 11af 	movw	r1, #431	@ 0x1af
 800d0ae:	e6da      	b.n	800ce66 <_dtoa_r+0x2e>
 800d0b0:	2300      	movs	r3, #0
 800d0b2:	e7e3      	b.n	800d07c <_dtoa_r+0x244>
 800d0b4:	2300      	movs	r3, #0
 800d0b6:	e7d5      	b.n	800d064 <_dtoa_r+0x22c>
 800d0b8:	2401      	movs	r4, #1
 800d0ba:	2300      	movs	r3, #0
 800d0bc:	9307      	str	r3, [sp, #28]
 800d0be:	9409      	str	r4, [sp, #36]	@ 0x24
 800d0c0:	f04f 3bff 	mov.w	fp, #4294967295
 800d0c4:	2200      	movs	r2, #0
 800d0c6:	f8cd b00c 	str.w	fp, [sp, #12]
 800d0ca:	2312      	movs	r3, #18
 800d0cc:	920c      	str	r2, [sp, #48]	@ 0x30
 800d0ce:	e7db      	b.n	800d088 <_dtoa_r+0x250>
 800d0d0:	2301      	movs	r3, #1
 800d0d2:	9309      	str	r3, [sp, #36]	@ 0x24
 800d0d4:	e7f4      	b.n	800d0c0 <_dtoa_r+0x288>
 800d0d6:	f04f 0b01 	mov.w	fp, #1
 800d0da:	f8cd b00c 	str.w	fp, [sp, #12]
 800d0de:	465b      	mov	r3, fp
 800d0e0:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 800d0e4:	e7d0      	b.n	800d088 <_dtoa_r+0x250>
 800d0e6:	3101      	adds	r1, #1
 800d0e8:	0052      	lsls	r2, r2, #1
 800d0ea:	e7d1      	b.n	800d090 <_dtoa_r+0x258>
 800d0ec:	f3af 8000 	nop.w
 800d0f0:	636f4361 	.word	0x636f4361
 800d0f4:	3fd287a7 	.word	0x3fd287a7
 800d0f8:	8b60c8b3 	.word	0x8b60c8b3
 800d0fc:	3fc68a28 	.word	0x3fc68a28
 800d100:	509f79fb 	.word	0x509f79fb
 800d104:	3fd34413 	.word	0x3fd34413
 800d108:	08011b66 	.word	0x08011b66
 800d10c:	08011b7d 	.word	0x08011b7d
 800d110:	7ff00000 	.word	0x7ff00000
 800d114:	08011af5 	.word	0x08011af5
 800d118:	3ff80000 	.word	0x3ff80000
 800d11c:	08011cf0 	.word	0x08011cf0
 800d120:	08011bd5 	.word	0x08011bd5
 800d124:	08011b62 	.word	0x08011b62
 800d128:	08011af4 	.word	0x08011af4
 800d12c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800d130:	6018      	str	r0, [r3, #0]
 800d132:	9b03      	ldr	r3, [sp, #12]
 800d134:	2b0e      	cmp	r3, #14
 800d136:	f200 80a1 	bhi.w	800d27c <_dtoa_r+0x444>
 800d13a:	2c00      	cmp	r4, #0
 800d13c:	f000 809e 	beq.w	800d27c <_dtoa_r+0x444>
 800d140:	2f00      	cmp	r7, #0
 800d142:	dd33      	ble.n	800d1ac <_dtoa_r+0x374>
 800d144:	4b9c      	ldr	r3, [pc, #624]	@ (800d3b8 <_dtoa_r+0x580>)
 800d146:	f007 020f 	and.w	r2, r7, #15
 800d14a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d14e:	ed93 7b00 	vldr	d7, [r3]
 800d152:	05f8      	lsls	r0, r7, #23
 800d154:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 800d158:	ea4f 1427 	mov.w	r4, r7, asr #4
 800d15c:	d516      	bpl.n	800d18c <_dtoa_r+0x354>
 800d15e:	4b97      	ldr	r3, [pc, #604]	@ (800d3bc <_dtoa_r+0x584>)
 800d160:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800d164:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800d168:	f7f3 fb78 	bl	800085c <__aeabi_ddiv>
 800d16c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800d170:	f004 040f 	and.w	r4, r4, #15
 800d174:	2603      	movs	r6, #3
 800d176:	4d91      	ldr	r5, [pc, #580]	@ (800d3bc <_dtoa_r+0x584>)
 800d178:	b954      	cbnz	r4, 800d190 <_dtoa_r+0x358>
 800d17a:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800d17e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d182:	f7f3 fb6b 	bl	800085c <__aeabi_ddiv>
 800d186:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800d18a:	e028      	b.n	800d1de <_dtoa_r+0x3a6>
 800d18c:	2602      	movs	r6, #2
 800d18e:	e7f2      	b.n	800d176 <_dtoa_r+0x33e>
 800d190:	07e1      	lsls	r1, r4, #31
 800d192:	d508      	bpl.n	800d1a6 <_dtoa_r+0x36e>
 800d194:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800d198:	e9d5 2300 	ldrd	r2, r3, [r5]
 800d19c:	f7f3 fa34 	bl	8000608 <__aeabi_dmul>
 800d1a0:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800d1a4:	3601      	adds	r6, #1
 800d1a6:	1064      	asrs	r4, r4, #1
 800d1a8:	3508      	adds	r5, #8
 800d1aa:	e7e5      	b.n	800d178 <_dtoa_r+0x340>
 800d1ac:	f000 80af 	beq.w	800d30e <_dtoa_r+0x4d6>
 800d1b0:	427c      	negs	r4, r7
 800d1b2:	4b81      	ldr	r3, [pc, #516]	@ (800d3b8 <_dtoa_r+0x580>)
 800d1b4:	4d81      	ldr	r5, [pc, #516]	@ (800d3bc <_dtoa_r+0x584>)
 800d1b6:	f004 020f 	and.w	r2, r4, #15
 800d1ba:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d1be:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d1c2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800d1c6:	f7f3 fa1f 	bl	8000608 <__aeabi_dmul>
 800d1ca:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800d1ce:	1124      	asrs	r4, r4, #4
 800d1d0:	2300      	movs	r3, #0
 800d1d2:	2602      	movs	r6, #2
 800d1d4:	2c00      	cmp	r4, #0
 800d1d6:	f040 808f 	bne.w	800d2f8 <_dtoa_r+0x4c0>
 800d1da:	2b00      	cmp	r3, #0
 800d1dc:	d1d3      	bne.n	800d186 <_dtoa_r+0x34e>
 800d1de:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800d1e0:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800d1e4:	2b00      	cmp	r3, #0
 800d1e6:	f000 8094 	beq.w	800d312 <_dtoa_r+0x4da>
 800d1ea:	4b75      	ldr	r3, [pc, #468]	@ (800d3c0 <_dtoa_r+0x588>)
 800d1ec:	2200      	movs	r2, #0
 800d1ee:	4620      	mov	r0, r4
 800d1f0:	4629      	mov	r1, r5
 800d1f2:	f7f3 fc7b 	bl	8000aec <__aeabi_dcmplt>
 800d1f6:	2800      	cmp	r0, #0
 800d1f8:	f000 808b 	beq.w	800d312 <_dtoa_r+0x4da>
 800d1fc:	9b03      	ldr	r3, [sp, #12]
 800d1fe:	2b00      	cmp	r3, #0
 800d200:	f000 8087 	beq.w	800d312 <_dtoa_r+0x4da>
 800d204:	f1bb 0f00 	cmp.w	fp, #0
 800d208:	dd34      	ble.n	800d274 <_dtoa_r+0x43c>
 800d20a:	4620      	mov	r0, r4
 800d20c:	4b6d      	ldr	r3, [pc, #436]	@ (800d3c4 <_dtoa_r+0x58c>)
 800d20e:	2200      	movs	r2, #0
 800d210:	4629      	mov	r1, r5
 800d212:	f7f3 f9f9 	bl	8000608 <__aeabi_dmul>
 800d216:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800d21a:	f107 38ff 	add.w	r8, r7, #4294967295
 800d21e:	3601      	adds	r6, #1
 800d220:	465c      	mov	r4, fp
 800d222:	4630      	mov	r0, r6
 800d224:	f7f3 f986 	bl	8000534 <__aeabi_i2d>
 800d228:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d22c:	f7f3 f9ec 	bl	8000608 <__aeabi_dmul>
 800d230:	4b65      	ldr	r3, [pc, #404]	@ (800d3c8 <_dtoa_r+0x590>)
 800d232:	2200      	movs	r2, #0
 800d234:	f7f3 f832 	bl	800029c <__adddf3>
 800d238:	4605      	mov	r5, r0
 800d23a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800d23e:	2c00      	cmp	r4, #0
 800d240:	d16a      	bne.n	800d318 <_dtoa_r+0x4e0>
 800d242:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d246:	4b61      	ldr	r3, [pc, #388]	@ (800d3cc <_dtoa_r+0x594>)
 800d248:	2200      	movs	r2, #0
 800d24a:	f7f3 f825 	bl	8000298 <__aeabi_dsub>
 800d24e:	4602      	mov	r2, r0
 800d250:	460b      	mov	r3, r1
 800d252:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800d256:	462a      	mov	r2, r5
 800d258:	4633      	mov	r3, r6
 800d25a:	f7f3 fc65 	bl	8000b28 <__aeabi_dcmpgt>
 800d25e:	2800      	cmp	r0, #0
 800d260:	f040 8298 	bne.w	800d794 <_dtoa_r+0x95c>
 800d264:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d268:	462a      	mov	r2, r5
 800d26a:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800d26e:	f7f3 fc3d 	bl	8000aec <__aeabi_dcmplt>
 800d272:	bb38      	cbnz	r0, 800d2c4 <_dtoa_r+0x48c>
 800d274:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 800d278:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800d27c:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800d27e:	2b00      	cmp	r3, #0
 800d280:	f2c0 8157 	blt.w	800d532 <_dtoa_r+0x6fa>
 800d284:	2f0e      	cmp	r7, #14
 800d286:	f300 8154 	bgt.w	800d532 <_dtoa_r+0x6fa>
 800d28a:	4b4b      	ldr	r3, [pc, #300]	@ (800d3b8 <_dtoa_r+0x580>)
 800d28c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800d290:	ed93 7b00 	vldr	d7, [r3]
 800d294:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800d296:	2b00      	cmp	r3, #0
 800d298:	ed8d 7b00 	vstr	d7, [sp]
 800d29c:	f280 80e5 	bge.w	800d46a <_dtoa_r+0x632>
 800d2a0:	9b03      	ldr	r3, [sp, #12]
 800d2a2:	2b00      	cmp	r3, #0
 800d2a4:	f300 80e1 	bgt.w	800d46a <_dtoa_r+0x632>
 800d2a8:	d10c      	bne.n	800d2c4 <_dtoa_r+0x48c>
 800d2aa:	4b48      	ldr	r3, [pc, #288]	@ (800d3cc <_dtoa_r+0x594>)
 800d2ac:	2200      	movs	r2, #0
 800d2ae:	ec51 0b17 	vmov	r0, r1, d7
 800d2b2:	f7f3 f9a9 	bl	8000608 <__aeabi_dmul>
 800d2b6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d2ba:	f7f3 fc2b 	bl	8000b14 <__aeabi_dcmpge>
 800d2be:	2800      	cmp	r0, #0
 800d2c0:	f000 8266 	beq.w	800d790 <_dtoa_r+0x958>
 800d2c4:	2400      	movs	r4, #0
 800d2c6:	4625      	mov	r5, r4
 800d2c8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800d2ca:	4656      	mov	r6, sl
 800d2cc:	ea6f 0803 	mvn.w	r8, r3
 800d2d0:	2700      	movs	r7, #0
 800d2d2:	4621      	mov	r1, r4
 800d2d4:	4648      	mov	r0, r9
 800d2d6:	f000 fcbf 	bl	800dc58 <_Bfree>
 800d2da:	2d00      	cmp	r5, #0
 800d2dc:	f000 80bd 	beq.w	800d45a <_dtoa_r+0x622>
 800d2e0:	b12f      	cbz	r7, 800d2ee <_dtoa_r+0x4b6>
 800d2e2:	42af      	cmp	r7, r5
 800d2e4:	d003      	beq.n	800d2ee <_dtoa_r+0x4b6>
 800d2e6:	4639      	mov	r1, r7
 800d2e8:	4648      	mov	r0, r9
 800d2ea:	f000 fcb5 	bl	800dc58 <_Bfree>
 800d2ee:	4629      	mov	r1, r5
 800d2f0:	4648      	mov	r0, r9
 800d2f2:	f000 fcb1 	bl	800dc58 <_Bfree>
 800d2f6:	e0b0      	b.n	800d45a <_dtoa_r+0x622>
 800d2f8:	07e2      	lsls	r2, r4, #31
 800d2fa:	d505      	bpl.n	800d308 <_dtoa_r+0x4d0>
 800d2fc:	e9d5 2300 	ldrd	r2, r3, [r5]
 800d300:	f7f3 f982 	bl	8000608 <__aeabi_dmul>
 800d304:	3601      	adds	r6, #1
 800d306:	2301      	movs	r3, #1
 800d308:	1064      	asrs	r4, r4, #1
 800d30a:	3508      	adds	r5, #8
 800d30c:	e762      	b.n	800d1d4 <_dtoa_r+0x39c>
 800d30e:	2602      	movs	r6, #2
 800d310:	e765      	b.n	800d1de <_dtoa_r+0x3a6>
 800d312:	9c03      	ldr	r4, [sp, #12]
 800d314:	46b8      	mov	r8, r7
 800d316:	e784      	b.n	800d222 <_dtoa_r+0x3ea>
 800d318:	4b27      	ldr	r3, [pc, #156]	@ (800d3b8 <_dtoa_r+0x580>)
 800d31a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800d31c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800d320:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800d324:	4454      	add	r4, sl
 800d326:	2900      	cmp	r1, #0
 800d328:	d054      	beq.n	800d3d4 <_dtoa_r+0x59c>
 800d32a:	4929      	ldr	r1, [pc, #164]	@ (800d3d0 <_dtoa_r+0x598>)
 800d32c:	2000      	movs	r0, #0
 800d32e:	f7f3 fa95 	bl	800085c <__aeabi_ddiv>
 800d332:	4633      	mov	r3, r6
 800d334:	462a      	mov	r2, r5
 800d336:	f7f2 ffaf 	bl	8000298 <__aeabi_dsub>
 800d33a:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800d33e:	4656      	mov	r6, sl
 800d340:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d344:	f7f3 fc10 	bl	8000b68 <__aeabi_d2iz>
 800d348:	4605      	mov	r5, r0
 800d34a:	f7f3 f8f3 	bl	8000534 <__aeabi_i2d>
 800d34e:	4602      	mov	r2, r0
 800d350:	460b      	mov	r3, r1
 800d352:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d356:	f7f2 ff9f 	bl	8000298 <__aeabi_dsub>
 800d35a:	3530      	adds	r5, #48	@ 0x30
 800d35c:	4602      	mov	r2, r0
 800d35e:	460b      	mov	r3, r1
 800d360:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800d364:	f806 5b01 	strb.w	r5, [r6], #1
 800d368:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800d36c:	f7f3 fbbe 	bl	8000aec <__aeabi_dcmplt>
 800d370:	2800      	cmp	r0, #0
 800d372:	d172      	bne.n	800d45a <_dtoa_r+0x622>
 800d374:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d378:	4911      	ldr	r1, [pc, #68]	@ (800d3c0 <_dtoa_r+0x588>)
 800d37a:	2000      	movs	r0, #0
 800d37c:	f7f2 ff8c 	bl	8000298 <__aeabi_dsub>
 800d380:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800d384:	f7f3 fbb2 	bl	8000aec <__aeabi_dcmplt>
 800d388:	2800      	cmp	r0, #0
 800d38a:	f040 80b4 	bne.w	800d4f6 <_dtoa_r+0x6be>
 800d38e:	42a6      	cmp	r6, r4
 800d390:	f43f af70 	beq.w	800d274 <_dtoa_r+0x43c>
 800d394:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800d398:	4b0a      	ldr	r3, [pc, #40]	@ (800d3c4 <_dtoa_r+0x58c>)
 800d39a:	2200      	movs	r2, #0
 800d39c:	f7f3 f934 	bl	8000608 <__aeabi_dmul>
 800d3a0:	4b08      	ldr	r3, [pc, #32]	@ (800d3c4 <_dtoa_r+0x58c>)
 800d3a2:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800d3a6:	2200      	movs	r2, #0
 800d3a8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d3ac:	f7f3 f92c 	bl	8000608 <__aeabi_dmul>
 800d3b0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800d3b4:	e7c4      	b.n	800d340 <_dtoa_r+0x508>
 800d3b6:	bf00      	nop
 800d3b8:	08011cf0 	.word	0x08011cf0
 800d3bc:	08011cc8 	.word	0x08011cc8
 800d3c0:	3ff00000 	.word	0x3ff00000
 800d3c4:	40240000 	.word	0x40240000
 800d3c8:	401c0000 	.word	0x401c0000
 800d3cc:	40140000 	.word	0x40140000
 800d3d0:	3fe00000 	.word	0x3fe00000
 800d3d4:	4631      	mov	r1, r6
 800d3d6:	4628      	mov	r0, r5
 800d3d8:	f7f3 f916 	bl	8000608 <__aeabi_dmul>
 800d3dc:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800d3e0:	9413      	str	r4, [sp, #76]	@ 0x4c
 800d3e2:	4656      	mov	r6, sl
 800d3e4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d3e8:	f7f3 fbbe 	bl	8000b68 <__aeabi_d2iz>
 800d3ec:	4605      	mov	r5, r0
 800d3ee:	f7f3 f8a1 	bl	8000534 <__aeabi_i2d>
 800d3f2:	4602      	mov	r2, r0
 800d3f4:	460b      	mov	r3, r1
 800d3f6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d3fa:	f7f2 ff4d 	bl	8000298 <__aeabi_dsub>
 800d3fe:	3530      	adds	r5, #48	@ 0x30
 800d400:	f806 5b01 	strb.w	r5, [r6], #1
 800d404:	4602      	mov	r2, r0
 800d406:	460b      	mov	r3, r1
 800d408:	42a6      	cmp	r6, r4
 800d40a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800d40e:	f04f 0200 	mov.w	r2, #0
 800d412:	d124      	bne.n	800d45e <_dtoa_r+0x626>
 800d414:	4baf      	ldr	r3, [pc, #700]	@ (800d6d4 <_dtoa_r+0x89c>)
 800d416:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800d41a:	f7f2 ff3f 	bl	800029c <__adddf3>
 800d41e:	4602      	mov	r2, r0
 800d420:	460b      	mov	r3, r1
 800d422:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d426:	f7f3 fb7f 	bl	8000b28 <__aeabi_dcmpgt>
 800d42a:	2800      	cmp	r0, #0
 800d42c:	d163      	bne.n	800d4f6 <_dtoa_r+0x6be>
 800d42e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800d432:	49a8      	ldr	r1, [pc, #672]	@ (800d6d4 <_dtoa_r+0x89c>)
 800d434:	2000      	movs	r0, #0
 800d436:	f7f2 ff2f 	bl	8000298 <__aeabi_dsub>
 800d43a:	4602      	mov	r2, r0
 800d43c:	460b      	mov	r3, r1
 800d43e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d442:	f7f3 fb53 	bl	8000aec <__aeabi_dcmplt>
 800d446:	2800      	cmp	r0, #0
 800d448:	f43f af14 	beq.w	800d274 <_dtoa_r+0x43c>
 800d44c:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800d44e:	1e73      	subs	r3, r6, #1
 800d450:	9313      	str	r3, [sp, #76]	@ 0x4c
 800d452:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800d456:	2b30      	cmp	r3, #48	@ 0x30
 800d458:	d0f8      	beq.n	800d44c <_dtoa_r+0x614>
 800d45a:	4647      	mov	r7, r8
 800d45c:	e03b      	b.n	800d4d6 <_dtoa_r+0x69e>
 800d45e:	4b9e      	ldr	r3, [pc, #632]	@ (800d6d8 <_dtoa_r+0x8a0>)
 800d460:	f7f3 f8d2 	bl	8000608 <__aeabi_dmul>
 800d464:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800d468:	e7bc      	b.n	800d3e4 <_dtoa_r+0x5ac>
 800d46a:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800d46e:	4656      	mov	r6, sl
 800d470:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d474:	4620      	mov	r0, r4
 800d476:	4629      	mov	r1, r5
 800d478:	f7f3 f9f0 	bl	800085c <__aeabi_ddiv>
 800d47c:	f7f3 fb74 	bl	8000b68 <__aeabi_d2iz>
 800d480:	4680      	mov	r8, r0
 800d482:	f7f3 f857 	bl	8000534 <__aeabi_i2d>
 800d486:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d48a:	f7f3 f8bd 	bl	8000608 <__aeabi_dmul>
 800d48e:	4602      	mov	r2, r0
 800d490:	460b      	mov	r3, r1
 800d492:	4620      	mov	r0, r4
 800d494:	4629      	mov	r1, r5
 800d496:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800d49a:	f7f2 fefd 	bl	8000298 <__aeabi_dsub>
 800d49e:	f806 4b01 	strb.w	r4, [r6], #1
 800d4a2:	9d03      	ldr	r5, [sp, #12]
 800d4a4:	eba6 040a 	sub.w	r4, r6, sl
 800d4a8:	42a5      	cmp	r5, r4
 800d4aa:	4602      	mov	r2, r0
 800d4ac:	460b      	mov	r3, r1
 800d4ae:	d133      	bne.n	800d518 <_dtoa_r+0x6e0>
 800d4b0:	f7f2 fef4 	bl	800029c <__adddf3>
 800d4b4:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d4b8:	4604      	mov	r4, r0
 800d4ba:	460d      	mov	r5, r1
 800d4bc:	f7f3 fb34 	bl	8000b28 <__aeabi_dcmpgt>
 800d4c0:	b9c0      	cbnz	r0, 800d4f4 <_dtoa_r+0x6bc>
 800d4c2:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d4c6:	4620      	mov	r0, r4
 800d4c8:	4629      	mov	r1, r5
 800d4ca:	f7f3 fb05 	bl	8000ad8 <__aeabi_dcmpeq>
 800d4ce:	b110      	cbz	r0, 800d4d6 <_dtoa_r+0x69e>
 800d4d0:	f018 0f01 	tst.w	r8, #1
 800d4d4:	d10e      	bne.n	800d4f4 <_dtoa_r+0x6bc>
 800d4d6:	9902      	ldr	r1, [sp, #8]
 800d4d8:	4648      	mov	r0, r9
 800d4da:	f000 fbbd 	bl	800dc58 <_Bfree>
 800d4de:	2300      	movs	r3, #0
 800d4e0:	7033      	strb	r3, [r6, #0]
 800d4e2:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800d4e4:	3701      	adds	r7, #1
 800d4e6:	601f      	str	r7, [r3, #0]
 800d4e8:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800d4ea:	2b00      	cmp	r3, #0
 800d4ec:	f000 824b 	beq.w	800d986 <_dtoa_r+0xb4e>
 800d4f0:	601e      	str	r6, [r3, #0]
 800d4f2:	e248      	b.n	800d986 <_dtoa_r+0xb4e>
 800d4f4:	46b8      	mov	r8, r7
 800d4f6:	4633      	mov	r3, r6
 800d4f8:	461e      	mov	r6, r3
 800d4fa:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800d4fe:	2a39      	cmp	r2, #57	@ 0x39
 800d500:	d106      	bne.n	800d510 <_dtoa_r+0x6d8>
 800d502:	459a      	cmp	sl, r3
 800d504:	d1f8      	bne.n	800d4f8 <_dtoa_r+0x6c0>
 800d506:	2230      	movs	r2, #48	@ 0x30
 800d508:	f108 0801 	add.w	r8, r8, #1
 800d50c:	f88a 2000 	strb.w	r2, [sl]
 800d510:	781a      	ldrb	r2, [r3, #0]
 800d512:	3201      	adds	r2, #1
 800d514:	701a      	strb	r2, [r3, #0]
 800d516:	e7a0      	b.n	800d45a <_dtoa_r+0x622>
 800d518:	4b6f      	ldr	r3, [pc, #444]	@ (800d6d8 <_dtoa_r+0x8a0>)
 800d51a:	2200      	movs	r2, #0
 800d51c:	f7f3 f874 	bl	8000608 <__aeabi_dmul>
 800d520:	2200      	movs	r2, #0
 800d522:	2300      	movs	r3, #0
 800d524:	4604      	mov	r4, r0
 800d526:	460d      	mov	r5, r1
 800d528:	f7f3 fad6 	bl	8000ad8 <__aeabi_dcmpeq>
 800d52c:	2800      	cmp	r0, #0
 800d52e:	d09f      	beq.n	800d470 <_dtoa_r+0x638>
 800d530:	e7d1      	b.n	800d4d6 <_dtoa_r+0x69e>
 800d532:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d534:	2a00      	cmp	r2, #0
 800d536:	f000 80ea 	beq.w	800d70e <_dtoa_r+0x8d6>
 800d53a:	9a07      	ldr	r2, [sp, #28]
 800d53c:	2a01      	cmp	r2, #1
 800d53e:	f300 80cd 	bgt.w	800d6dc <_dtoa_r+0x8a4>
 800d542:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800d544:	2a00      	cmp	r2, #0
 800d546:	f000 80c1 	beq.w	800d6cc <_dtoa_r+0x894>
 800d54a:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800d54e:	9c08      	ldr	r4, [sp, #32]
 800d550:	9e00      	ldr	r6, [sp, #0]
 800d552:	9a00      	ldr	r2, [sp, #0]
 800d554:	441a      	add	r2, r3
 800d556:	9200      	str	r2, [sp, #0]
 800d558:	9a06      	ldr	r2, [sp, #24]
 800d55a:	2101      	movs	r1, #1
 800d55c:	441a      	add	r2, r3
 800d55e:	4648      	mov	r0, r9
 800d560:	9206      	str	r2, [sp, #24]
 800d562:	f000 fc77 	bl	800de54 <__i2b>
 800d566:	4605      	mov	r5, r0
 800d568:	b166      	cbz	r6, 800d584 <_dtoa_r+0x74c>
 800d56a:	9b06      	ldr	r3, [sp, #24]
 800d56c:	2b00      	cmp	r3, #0
 800d56e:	dd09      	ble.n	800d584 <_dtoa_r+0x74c>
 800d570:	42b3      	cmp	r3, r6
 800d572:	9a00      	ldr	r2, [sp, #0]
 800d574:	bfa8      	it	ge
 800d576:	4633      	movge	r3, r6
 800d578:	1ad2      	subs	r2, r2, r3
 800d57a:	9200      	str	r2, [sp, #0]
 800d57c:	9a06      	ldr	r2, [sp, #24]
 800d57e:	1af6      	subs	r6, r6, r3
 800d580:	1ad3      	subs	r3, r2, r3
 800d582:	9306      	str	r3, [sp, #24]
 800d584:	9b08      	ldr	r3, [sp, #32]
 800d586:	b30b      	cbz	r3, 800d5cc <_dtoa_r+0x794>
 800d588:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d58a:	2b00      	cmp	r3, #0
 800d58c:	f000 80c6 	beq.w	800d71c <_dtoa_r+0x8e4>
 800d590:	2c00      	cmp	r4, #0
 800d592:	f000 80c0 	beq.w	800d716 <_dtoa_r+0x8de>
 800d596:	4629      	mov	r1, r5
 800d598:	4622      	mov	r2, r4
 800d59a:	4648      	mov	r0, r9
 800d59c:	f000 fd12 	bl	800dfc4 <__pow5mult>
 800d5a0:	9a02      	ldr	r2, [sp, #8]
 800d5a2:	4601      	mov	r1, r0
 800d5a4:	4605      	mov	r5, r0
 800d5a6:	4648      	mov	r0, r9
 800d5a8:	f000 fc6a 	bl	800de80 <__multiply>
 800d5ac:	9902      	ldr	r1, [sp, #8]
 800d5ae:	4680      	mov	r8, r0
 800d5b0:	4648      	mov	r0, r9
 800d5b2:	f000 fb51 	bl	800dc58 <_Bfree>
 800d5b6:	9b08      	ldr	r3, [sp, #32]
 800d5b8:	1b1b      	subs	r3, r3, r4
 800d5ba:	9308      	str	r3, [sp, #32]
 800d5bc:	f000 80b1 	beq.w	800d722 <_dtoa_r+0x8ea>
 800d5c0:	9a08      	ldr	r2, [sp, #32]
 800d5c2:	4641      	mov	r1, r8
 800d5c4:	4648      	mov	r0, r9
 800d5c6:	f000 fcfd 	bl	800dfc4 <__pow5mult>
 800d5ca:	9002      	str	r0, [sp, #8]
 800d5cc:	2101      	movs	r1, #1
 800d5ce:	4648      	mov	r0, r9
 800d5d0:	f000 fc40 	bl	800de54 <__i2b>
 800d5d4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800d5d6:	4604      	mov	r4, r0
 800d5d8:	2b00      	cmp	r3, #0
 800d5da:	f000 81d8 	beq.w	800d98e <_dtoa_r+0xb56>
 800d5de:	461a      	mov	r2, r3
 800d5e0:	4601      	mov	r1, r0
 800d5e2:	4648      	mov	r0, r9
 800d5e4:	f000 fcee 	bl	800dfc4 <__pow5mult>
 800d5e8:	9b07      	ldr	r3, [sp, #28]
 800d5ea:	2b01      	cmp	r3, #1
 800d5ec:	4604      	mov	r4, r0
 800d5ee:	f300 809f 	bgt.w	800d730 <_dtoa_r+0x8f8>
 800d5f2:	9b04      	ldr	r3, [sp, #16]
 800d5f4:	2b00      	cmp	r3, #0
 800d5f6:	f040 8097 	bne.w	800d728 <_dtoa_r+0x8f0>
 800d5fa:	9b05      	ldr	r3, [sp, #20]
 800d5fc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d600:	2b00      	cmp	r3, #0
 800d602:	f040 8093 	bne.w	800d72c <_dtoa_r+0x8f4>
 800d606:	9b05      	ldr	r3, [sp, #20]
 800d608:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800d60c:	0d1b      	lsrs	r3, r3, #20
 800d60e:	051b      	lsls	r3, r3, #20
 800d610:	b133      	cbz	r3, 800d620 <_dtoa_r+0x7e8>
 800d612:	9b00      	ldr	r3, [sp, #0]
 800d614:	3301      	adds	r3, #1
 800d616:	9300      	str	r3, [sp, #0]
 800d618:	9b06      	ldr	r3, [sp, #24]
 800d61a:	3301      	adds	r3, #1
 800d61c:	9306      	str	r3, [sp, #24]
 800d61e:	2301      	movs	r3, #1
 800d620:	9308      	str	r3, [sp, #32]
 800d622:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800d624:	2b00      	cmp	r3, #0
 800d626:	f000 81b8 	beq.w	800d99a <_dtoa_r+0xb62>
 800d62a:	6923      	ldr	r3, [r4, #16]
 800d62c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800d630:	6918      	ldr	r0, [r3, #16]
 800d632:	f000 fbc3 	bl	800ddbc <__hi0bits>
 800d636:	f1c0 0020 	rsb	r0, r0, #32
 800d63a:	9b06      	ldr	r3, [sp, #24]
 800d63c:	4418      	add	r0, r3
 800d63e:	f010 001f 	ands.w	r0, r0, #31
 800d642:	f000 8082 	beq.w	800d74a <_dtoa_r+0x912>
 800d646:	f1c0 0320 	rsb	r3, r0, #32
 800d64a:	2b04      	cmp	r3, #4
 800d64c:	dd73      	ble.n	800d736 <_dtoa_r+0x8fe>
 800d64e:	9b00      	ldr	r3, [sp, #0]
 800d650:	f1c0 001c 	rsb	r0, r0, #28
 800d654:	4403      	add	r3, r0
 800d656:	9300      	str	r3, [sp, #0]
 800d658:	9b06      	ldr	r3, [sp, #24]
 800d65a:	4403      	add	r3, r0
 800d65c:	4406      	add	r6, r0
 800d65e:	9306      	str	r3, [sp, #24]
 800d660:	9b00      	ldr	r3, [sp, #0]
 800d662:	2b00      	cmp	r3, #0
 800d664:	dd05      	ble.n	800d672 <_dtoa_r+0x83a>
 800d666:	9902      	ldr	r1, [sp, #8]
 800d668:	461a      	mov	r2, r3
 800d66a:	4648      	mov	r0, r9
 800d66c:	f000 fd04 	bl	800e078 <__lshift>
 800d670:	9002      	str	r0, [sp, #8]
 800d672:	9b06      	ldr	r3, [sp, #24]
 800d674:	2b00      	cmp	r3, #0
 800d676:	dd05      	ble.n	800d684 <_dtoa_r+0x84c>
 800d678:	4621      	mov	r1, r4
 800d67a:	461a      	mov	r2, r3
 800d67c:	4648      	mov	r0, r9
 800d67e:	f000 fcfb 	bl	800e078 <__lshift>
 800d682:	4604      	mov	r4, r0
 800d684:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800d686:	2b00      	cmp	r3, #0
 800d688:	d061      	beq.n	800d74e <_dtoa_r+0x916>
 800d68a:	9802      	ldr	r0, [sp, #8]
 800d68c:	4621      	mov	r1, r4
 800d68e:	f000 fd5f 	bl	800e150 <__mcmp>
 800d692:	2800      	cmp	r0, #0
 800d694:	da5b      	bge.n	800d74e <_dtoa_r+0x916>
 800d696:	2300      	movs	r3, #0
 800d698:	9902      	ldr	r1, [sp, #8]
 800d69a:	220a      	movs	r2, #10
 800d69c:	4648      	mov	r0, r9
 800d69e:	f000 fafd 	bl	800dc9c <__multadd>
 800d6a2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d6a4:	9002      	str	r0, [sp, #8]
 800d6a6:	f107 38ff 	add.w	r8, r7, #4294967295
 800d6aa:	2b00      	cmp	r3, #0
 800d6ac:	f000 8177 	beq.w	800d99e <_dtoa_r+0xb66>
 800d6b0:	4629      	mov	r1, r5
 800d6b2:	2300      	movs	r3, #0
 800d6b4:	220a      	movs	r2, #10
 800d6b6:	4648      	mov	r0, r9
 800d6b8:	f000 faf0 	bl	800dc9c <__multadd>
 800d6bc:	f1bb 0f00 	cmp.w	fp, #0
 800d6c0:	4605      	mov	r5, r0
 800d6c2:	dc6f      	bgt.n	800d7a4 <_dtoa_r+0x96c>
 800d6c4:	9b07      	ldr	r3, [sp, #28]
 800d6c6:	2b02      	cmp	r3, #2
 800d6c8:	dc49      	bgt.n	800d75e <_dtoa_r+0x926>
 800d6ca:	e06b      	b.n	800d7a4 <_dtoa_r+0x96c>
 800d6cc:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800d6ce:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800d6d2:	e73c      	b.n	800d54e <_dtoa_r+0x716>
 800d6d4:	3fe00000 	.word	0x3fe00000
 800d6d8:	40240000 	.word	0x40240000
 800d6dc:	9b03      	ldr	r3, [sp, #12]
 800d6de:	1e5c      	subs	r4, r3, #1
 800d6e0:	9b08      	ldr	r3, [sp, #32]
 800d6e2:	42a3      	cmp	r3, r4
 800d6e4:	db09      	blt.n	800d6fa <_dtoa_r+0x8c2>
 800d6e6:	1b1c      	subs	r4, r3, r4
 800d6e8:	9b03      	ldr	r3, [sp, #12]
 800d6ea:	2b00      	cmp	r3, #0
 800d6ec:	f6bf af30 	bge.w	800d550 <_dtoa_r+0x718>
 800d6f0:	9b00      	ldr	r3, [sp, #0]
 800d6f2:	9a03      	ldr	r2, [sp, #12]
 800d6f4:	1a9e      	subs	r6, r3, r2
 800d6f6:	2300      	movs	r3, #0
 800d6f8:	e72b      	b.n	800d552 <_dtoa_r+0x71a>
 800d6fa:	9b08      	ldr	r3, [sp, #32]
 800d6fc:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800d6fe:	9408      	str	r4, [sp, #32]
 800d700:	1ae3      	subs	r3, r4, r3
 800d702:	441a      	add	r2, r3
 800d704:	9e00      	ldr	r6, [sp, #0]
 800d706:	9b03      	ldr	r3, [sp, #12]
 800d708:	920d      	str	r2, [sp, #52]	@ 0x34
 800d70a:	2400      	movs	r4, #0
 800d70c:	e721      	b.n	800d552 <_dtoa_r+0x71a>
 800d70e:	9c08      	ldr	r4, [sp, #32]
 800d710:	9e00      	ldr	r6, [sp, #0]
 800d712:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 800d714:	e728      	b.n	800d568 <_dtoa_r+0x730>
 800d716:	f8dd 8008 	ldr.w	r8, [sp, #8]
 800d71a:	e751      	b.n	800d5c0 <_dtoa_r+0x788>
 800d71c:	9a08      	ldr	r2, [sp, #32]
 800d71e:	9902      	ldr	r1, [sp, #8]
 800d720:	e750      	b.n	800d5c4 <_dtoa_r+0x78c>
 800d722:	f8cd 8008 	str.w	r8, [sp, #8]
 800d726:	e751      	b.n	800d5cc <_dtoa_r+0x794>
 800d728:	2300      	movs	r3, #0
 800d72a:	e779      	b.n	800d620 <_dtoa_r+0x7e8>
 800d72c:	9b04      	ldr	r3, [sp, #16]
 800d72e:	e777      	b.n	800d620 <_dtoa_r+0x7e8>
 800d730:	2300      	movs	r3, #0
 800d732:	9308      	str	r3, [sp, #32]
 800d734:	e779      	b.n	800d62a <_dtoa_r+0x7f2>
 800d736:	d093      	beq.n	800d660 <_dtoa_r+0x828>
 800d738:	9a00      	ldr	r2, [sp, #0]
 800d73a:	331c      	adds	r3, #28
 800d73c:	441a      	add	r2, r3
 800d73e:	9200      	str	r2, [sp, #0]
 800d740:	9a06      	ldr	r2, [sp, #24]
 800d742:	441a      	add	r2, r3
 800d744:	441e      	add	r6, r3
 800d746:	9206      	str	r2, [sp, #24]
 800d748:	e78a      	b.n	800d660 <_dtoa_r+0x828>
 800d74a:	4603      	mov	r3, r0
 800d74c:	e7f4      	b.n	800d738 <_dtoa_r+0x900>
 800d74e:	9b03      	ldr	r3, [sp, #12]
 800d750:	2b00      	cmp	r3, #0
 800d752:	46b8      	mov	r8, r7
 800d754:	dc20      	bgt.n	800d798 <_dtoa_r+0x960>
 800d756:	469b      	mov	fp, r3
 800d758:	9b07      	ldr	r3, [sp, #28]
 800d75a:	2b02      	cmp	r3, #2
 800d75c:	dd1e      	ble.n	800d79c <_dtoa_r+0x964>
 800d75e:	f1bb 0f00 	cmp.w	fp, #0
 800d762:	f47f adb1 	bne.w	800d2c8 <_dtoa_r+0x490>
 800d766:	4621      	mov	r1, r4
 800d768:	465b      	mov	r3, fp
 800d76a:	2205      	movs	r2, #5
 800d76c:	4648      	mov	r0, r9
 800d76e:	f000 fa95 	bl	800dc9c <__multadd>
 800d772:	4601      	mov	r1, r0
 800d774:	4604      	mov	r4, r0
 800d776:	9802      	ldr	r0, [sp, #8]
 800d778:	f000 fcea 	bl	800e150 <__mcmp>
 800d77c:	2800      	cmp	r0, #0
 800d77e:	f77f ada3 	ble.w	800d2c8 <_dtoa_r+0x490>
 800d782:	4656      	mov	r6, sl
 800d784:	2331      	movs	r3, #49	@ 0x31
 800d786:	f806 3b01 	strb.w	r3, [r6], #1
 800d78a:	f108 0801 	add.w	r8, r8, #1
 800d78e:	e59f      	b.n	800d2d0 <_dtoa_r+0x498>
 800d790:	9c03      	ldr	r4, [sp, #12]
 800d792:	46b8      	mov	r8, r7
 800d794:	4625      	mov	r5, r4
 800d796:	e7f4      	b.n	800d782 <_dtoa_r+0x94a>
 800d798:	f8dd b00c 	ldr.w	fp, [sp, #12]
 800d79c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d79e:	2b00      	cmp	r3, #0
 800d7a0:	f000 8101 	beq.w	800d9a6 <_dtoa_r+0xb6e>
 800d7a4:	2e00      	cmp	r6, #0
 800d7a6:	dd05      	ble.n	800d7b4 <_dtoa_r+0x97c>
 800d7a8:	4629      	mov	r1, r5
 800d7aa:	4632      	mov	r2, r6
 800d7ac:	4648      	mov	r0, r9
 800d7ae:	f000 fc63 	bl	800e078 <__lshift>
 800d7b2:	4605      	mov	r5, r0
 800d7b4:	9b08      	ldr	r3, [sp, #32]
 800d7b6:	2b00      	cmp	r3, #0
 800d7b8:	d05c      	beq.n	800d874 <_dtoa_r+0xa3c>
 800d7ba:	6869      	ldr	r1, [r5, #4]
 800d7bc:	4648      	mov	r0, r9
 800d7be:	f000 fa0b 	bl	800dbd8 <_Balloc>
 800d7c2:	4606      	mov	r6, r0
 800d7c4:	b928      	cbnz	r0, 800d7d2 <_dtoa_r+0x99a>
 800d7c6:	4b82      	ldr	r3, [pc, #520]	@ (800d9d0 <_dtoa_r+0xb98>)
 800d7c8:	4602      	mov	r2, r0
 800d7ca:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800d7ce:	f7ff bb4a 	b.w	800ce66 <_dtoa_r+0x2e>
 800d7d2:	692a      	ldr	r2, [r5, #16]
 800d7d4:	3202      	adds	r2, #2
 800d7d6:	0092      	lsls	r2, r2, #2
 800d7d8:	f105 010c 	add.w	r1, r5, #12
 800d7dc:	300c      	adds	r0, #12
 800d7de:	f7ff fa6e 	bl	800ccbe <memcpy>
 800d7e2:	2201      	movs	r2, #1
 800d7e4:	4631      	mov	r1, r6
 800d7e6:	4648      	mov	r0, r9
 800d7e8:	f000 fc46 	bl	800e078 <__lshift>
 800d7ec:	f10a 0301 	add.w	r3, sl, #1
 800d7f0:	9300      	str	r3, [sp, #0]
 800d7f2:	eb0a 030b 	add.w	r3, sl, fp
 800d7f6:	9308      	str	r3, [sp, #32]
 800d7f8:	9b04      	ldr	r3, [sp, #16]
 800d7fa:	f003 0301 	and.w	r3, r3, #1
 800d7fe:	462f      	mov	r7, r5
 800d800:	9306      	str	r3, [sp, #24]
 800d802:	4605      	mov	r5, r0
 800d804:	9b00      	ldr	r3, [sp, #0]
 800d806:	9802      	ldr	r0, [sp, #8]
 800d808:	4621      	mov	r1, r4
 800d80a:	f103 3bff 	add.w	fp, r3, #4294967295
 800d80e:	f7ff fa89 	bl	800cd24 <quorem>
 800d812:	4603      	mov	r3, r0
 800d814:	3330      	adds	r3, #48	@ 0x30
 800d816:	9003      	str	r0, [sp, #12]
 800d818:	4639      	mov	r1, r7
 800d81a:	9802      	ldr	r0, [sp, #8]
 800d81c:	9309      	str	r3, [sp, #36]	@ 0x24
 800d81e:	f000 fc97 	bl	800e150 <__mcmp>
 800d822:	462a      	mov	r2, r5
 800d824:	9004      	str	r0, [sp, #16]
 800d826:	4621      	mov	r1, r4
 800d828:	4648      	mov	r0, r9
 800d82a:	f000 fcad 	bl	800e188 <__mdiff>
 800d82e:	68c2      	ldr	r2, [r0, #12]
 800d830:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d832:	4606      	mov	r6, r0
 800d834:	bb02      	cbnz	r2, 800d878 <_dtoa_r+0xa40>
 800d836:	4601      	mov	r1, r0
 800d838:	9802      	ldr	r0, [sp, #8]
 800d83a:	f000 fc89 	bl	800e150 <__mcmp>
 800d83e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d840:	4602      	mov	r2, r0
 800d842:	4631      	mov	r1, r6
 800d844:	4648      	mov	r0, r9
 800d846:	920c      	str	r2, [sp, #48]	@ 0x30
 800d848:	9309      	str	r3, [sp, #36]	@ 0x24
 800d84a:	f000 fa05 	bl	800dc58 <_Bfree>
 800d84e:	9b07      	ldr	r3, [sp, #28]
 800d850:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800d852:	9e00      	ldr	r6, [sp, #0]
 800d854:	ea42 0103 	orr.w	r1, r2, r3
 800d858:	9b06      	ldr	r3, [sp, #24]
 800d85a:	4319      	orrs	r1, r3
 800d85c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d85e:	d10d      	bne.n	800d87c <_dtoa_r+0xa44>
 800d860:	2b39      	cmp	r3, #57	@ 0x39
 800d862:	d027      	beq.n	800d8b4 <_dtoa_r+0xa7c>
 800d864:	9a04      	ldr	r2, [sp, #16]
 800d866:	2a00      	cmp	r2, #0
 800d868:	dd01      	ble.n	800d86e <_dtoa_r+0xa36>
 800d86a:	9b03      	ldr	r3, [sp, #12]
 800d86c:	3331      	adds	r3, #49	@ 0x31
 800d86e:	f88b 3000 	strb.w	r3, [fp]
 800d872:	e52e      	b.n	800d2d2 <_dtoa_r+0x49a>
 800d874:	4628      	mov	r0, r5
 800d876:	e7b9      	b.n	800d7ec <_dtoa_r+0x9b4>
 800d878:	2201      	movs	r2, #1
 800d87a:	e7e2      	b.n	800d842 <_dtoa_r+0xa0a>
 800d87c:	9904      	ldr	r1, [sp, #16]
 800d87e:	2900      	cmp	r1, #0
 800d880:	db04      	blt.n	800d88c <_dtoa_r+0xa54>
 800d882:	9807      	ldr	r0, [sp, #28]
 800d884:	4301      	orrs	r1, r0
 800d886:	9806      	ldr	r0, [sp, #24]
 800d888:	4301      	orrs	r1, r0
 800d88a:	d120      	bne.n	800d8ce <_dtoa_r+0xa96>
 800d88c:	2a00      	cmp	r2, #0
 800d88e:	ddee      	ble.n	800d86e <_dtoa_r+0xa36>
 800d890:	9902      	ldr	r1, [sp, #8]
 800d892:	9300      	str	r3, [sp, #0]
 800d894:	2201      	movs	r2, #1
 800d896:	4648      	mov	r0, r9
 800d898:	f000 fbee 	bl	800e078 <__lshift>
 800d89c:	4621      	mov	r1, r4
 800d89e:	9002      	str	r0, [sp, #8]
 800d8a0:	f000 fc56 	bl	800e150 <__mcmp>
 800d8a4:	2800      	cmp	r0, #0
 800d8a6:	9b00      	ldr	r3, [sp, #0]
 800d8a8:	dc02      	bgt.n	800d8b0 <_dtoa_r+0xa78>
 800d8aa:	d1e0      	bne.n	800d86e <_dtoa_r+0xa36>
 800d8ac:	07da      	lsls	r2, r3, #31
 800d8ae:	d5de      	bpl.n	800d86e <_dtoa_r+0xa36>
 800d8b0:	2b39      	cmp	r3, #57	@ 0x39
 800d8b2:	d1da      	bne.n	800d86a <_dtoa_r+0xa32>
 800d8b4:	2339      	movs	r3, #57	@ 0x39
 800d8b6:	f88b 3000 	strb.w	r3, [fp]
 800d8ba:	4633      	mov	r3, r6
 800d8bc:	461e      	mov	r6, r3
 800d8be:	3b01      	subs	r3, #1
 800d8c0:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800d8c4:	2a39      	cmp	r2, #57	@ 0x39
 800d8c6:	d04e      	beq.n	800d966 <_dtoa_r+0xb2e>
 800d8c8:	3201      	adds	r2, #1
 800d8ca:	701a      	strb	r2, [r3, #0]
 800d8cc:	e501      	b.n	800d2d2 <_dtoa_r+0x49a>
 800d8ce:	2a00      	cmp	r2, #0
 800d8d0:	dd03      	ble.n	800d8da <_dtoa_r+0xaa2>
 800d8d2:	2b39      	cmp	r3, #57	@ 0x39
 800d8d4:	d0ee      	beq.n	800d8b4 <_dtoa_r+0xa7c>
 800d8d6:	3301      	adds	r3, #1
 800d8d8:	e7c9      	b.n	800d86e <_dtoa_r+0xa36>
 800d8da:	9a00      	ldr	r2, [sp, #0]
 800d8dc:	9908      	ldr	r1, [sp, #32]
 800d8de:	f802 3c01 	strb.w	r3, [r2, #-1]
 800d8e2:	428a      	cmp	r2, r1
 800d8e4:	d028      	beq.n	800d938 <_dtoa_r+0xb00>
 800d8e6:	9902      	ldr	r1, [sp, #8]
 800d8e8:	2300      	movs	r3, #0
 800d8ea:	220a      	movs	r2, #10
 800d8ec:	4648      	mov	r0, r9
 800d8ee:	f000 f9d5 	bl	800dc9c <__multadd>
 800d8f2:	42af      	cmp	r7, r5
 800d8f4:	9002      	str	r0, [sp, #8]
 800d8f6:	f04f 0300 	mov.w	r3, #0
 800d8fa:	f04f 020a 	mov.w	r2, #10
 800d8fe:	4639      	mov	r1, r7
 800d900:	4648      	mov	r0, r9
 800d902:	d107      	bne.n	800d914 <_dtoa_r+0xadc>
 800d904:	f000 f9ca 	bl	800dc9c <__multadd>
 800d908:	4607      	mov	r7, r0
 800d90a:	4605      	mov	r5, r0
 800d90c:	9b00      	ldr	r3, [sp, #0]
 800d90e:	3301      	adds	r3, #1
 800d910:	9300      	str	r3, [sp, #0]
 800d912:	e777      	b.n	800d804 <_dtoa_r+0x9cc>
 800d914:	f000 f9c2 	bl	800dc9c <__multadd>
 800d918:	4629      	mov	r1, r5
 800d91a:	4607      	mov	r7, r0
 800d91c:	2300      	movs	r3, #0
 800d91e:	220a      	movs	r2, #10
 800d920:	4648      	mov	r0, r9
 800d922:	f000 f9bb 	bl	800dc9c <__multadd>
 800d926:	4605      	mov	r5, r0
 800d928:	e7f0      	b.n	800d90c <_dtoa_r+0xad4>
 800d92a:	f1bb 0f00 	cmp.w	fp, #0
 800d92e:	bfcc      	ite	gt
 800d930:	465e      	movgt	r6, fp
 800d932:	2601      	movle	r6, #1
 800d934:	4456      	add	r6, sl
 800d936:	2700      	movs	r7, #0
 800d938:	9902      	ldr	r1, [sp, #8]
 800d93a:	9300      	str	r3, [sp, #0]
 800d93c:	2201      	movs	r2, #1
 800d93e:	4648      	mov	r0, r9
 800d940:	f000 fb9a 	bl	800e078 <__lshift>
 800d944:	4621      	mov	r1, r4
 800d946:	9002      	str	r0, [sp, #8]
 800d948:	f000 fc02 	bl	800e150 <__mcmp>
 800d94c:	2800      	cmp	r0, #0
 800d94e:	dcb4      	bgt.n	800d8ba <_dtoa_r+0xa82>
 800d950:	d102      	bne.n	800d958 <_dtoa_r+0xb20>
 800d952:	9b00      	ldr	r3, [sp, #0]
 800d954:	07db      	lsls	r3, r3, #31
 800d956:	d4b0      	bmi.n	800d8ba <_dtoa_r+0xa82>
 800d958:	4633      	mov	r3, r6
 800d95a:	461e      	mov	r6, r3
 800d95c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800d960:	2a30      	cmp	r2, #48	@ 0x30
 800d962:	d0fa      	beq.n	800d95a <_dtoa_r+0xb22>
 800d964:	e4b5      	b.n	800d2d2 <_dtoa_r+0x49a>
 800d966:	459a      	cmp	sl, r3
 800d968:	d1a8      	bne.n	800d8bc <_dtoa_r+0xa84>
 800d96a:	2331      	movs	r3, #49	@ 0x31
 800d96c:	f108 0801 	add.w	r8, r8, #1
 800d970:	f88a 3000 	strb.w	r3, [sl]
 800d974:	e4ad      	b.n	800d2d2 <_dtoa_r+0x49a>
 800d976:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800d978:	f8df a058 	ldr.w	sl, [pc, #88]	@ 800d9d4 <_dtoa_r+0xb9c>
 800d97c:	b11b      	cbz	r3, 800d986 <_dtoa_r+0xb4e>
 800d97e:	f10a 0308 	add.w	r3, sl, #8
 800d982:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800d984:	6013      	str	r3, [r2, #0]
 800d986:	4650      	mov	r0, sl
 800d988:	b017      	add	sp, #92	@ 0x5c
 800d98a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d98e:	9b07      	ldr	r3, [sp, #28]
 800d990:	2b01      	cmp	r3, #1
 800d992:	f77f ae2e 	ble.w	800d5f2 <_dtoa_r+0x7ba>
 800d996:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800d998:	9308      	str	r3, [sp, #32]
 800d99a:	2001      	movs	r0, #1
 800d99c:	e64d      	b.n	800d63a <_dtoa_r+0x802>
 800d99e:	f1bb 0f00 	cmp.w	fp, #0
 800d9a2:	f77f aed9 	ble.w	800d758 <_dtoa_r+0x920>
 800d9a6:	4656      	mov	r6, sl
 800d9a8:	9802      	ldr	r0, [sp, #8]
 800d9aa:	4621      	mov	r1, r4
 800d9ac:	f7ff f9ba 	bl	800cd24 <quorem>
 800d9b0:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 800d9b4:	f806 3b01 	strb.w	r3, [r6], #1
 800d9b8:	eba6 020a 	sub.w	r2, r6, sl
 800d9bc:	4593      	cmp	fp, r2
 800d9be:	ddb4      	ble.n	800d92a <_dtoa_r+0xaf2>
 800d9c0:	9902      	ldr	r1, [sp, #8]
 800d9c2:	2300      	movs	r3, #0
 800d9c4:	220a      	movs	r2, #10
 800d9c6:	4648      	mov	r0, r9
 800d9c8:	f000 f968 	bl	800dc9c <__multadd>
 800d9cc:	9002      	str	r0, [sp, #8]
 800d9ce:	e7eb      	b.n	800d9a8 <_dtoa_r+0xb70>
 800d9d0:	08011bd5 	.word	0x08011bd5
 800d9d4:	08011b59 	.word	0x08011b59

0800d9d8 <_free_r>:
 800d9d8:	b538      	push	{r3, r4, r5, lr}
 800d9da:	4605      	mov	r5, r0
 800d9dc:	2900      	cmp	r1, #0
 800d9de:	d041      	beq.n	800da64 <_free_r+0x8c>
 800d9e0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d9e4:	1f0c      	subs	r4, r1, #4
 800d9e6:	2b00      	cmp	r3, #0
 800d9e8:	bfb8      	it	lt
 800d9ea:	18e4      	addlt	r4, r4, r3
 800d9ec:	f000 f8e8 	bl	800dbc0 <__malloc_lock>
 800d9f0:	4a1d      	ldr	r2, [pc, #116]	@ (800da68 <_free_r+0x90>)
 800d9f2:	6813      	ldr	r3, [r2, #0]
 800d9f4:	b933      	cbnz	r3, 800da04 <_free_r+0x2c>
 800d9f6:	6063      	str	r3, [r4, #4]
 800d9f8:	6014      	str	r4, [r2, #0]
 800d9fa:	4628      	mov	r0, r5
 800d9fc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800da00:	f000 b8e4 	b.w	800dbcc <__malloc_unlock>
 800da04:	42a3      	cmp	r3, r4
 800da06:	d908      	bls.n	800da1a <_free_r+0x42>
 800da08:	6820      	ldr	r0, [r4, #0]
 800da0a:	1821      	adds	r1, r4, r0
 800da0c:	428b      	cmp	r3, r1
 800da0e:	bf01      	itttt	eq
 800da10:	6819      	ldreq	r1, [r3, #0]
 800da12:	685b      	ldreq	r3, [r3, #4]
 800da14:	1809      	addeq	r1, r1, r0
 800da16:	6021      	streq	r1, [r4, #0]
 800da18:	e7ed      	b.n	800d9f6 <_free_r+0x1e>
 800da1a:	461a      	mov	r2, r3
 800da1c:	685b      	ldr	r3, [r3, #4]
 800da1e:	b10b      	cbz	r3, 800da24 <_free_r+0x4c>
 800da20:	42a3      	cmp	r3, r4
 800da22:	d9fa      	bls.n	800da1a <_free_r+0x42>
 800da24:	6811      	ldr	r1, [r2, #0]
 800da26:	1850      	adds	r0, r2, r1
 800da28:	42a0      	cmp	r0, r4
 800da2a:	d10b      	bne.n	800da44 <_free_r+0x6c>
 800da2c:	6820      	ldr	r0, [r4, #0]
 800da2e:	4401      	add	r1, r0
 800da30:	1850      	adds	r0, r2, r1
 800da32:	4283      	cmp	r3, r0
 800da34:	6011      	str	r1, [r2, #0]
 800da36:	d1e0      	bne.n	800d9fa <_free_r+0x22>
 800da38:	6818      	ldr	r0, [r3, #0]
 800da3a:	685b      	ldr	r3, [r3, #4]
 800da3c:	6053      	str	r3, [r2, #4]
 800da3e:	4408      	add	r0, r1
 800da40:	6010      	str	r0, [r2, #0]
 800da42:	e7da      	b.n	800d9fa <_free_r+0x22>
 800da44:	d902      	bls.n	800da4c <_free_r+0x74>
 800da46:	230c      	movs	r3, #12
 800da48:	602b      	str	r3, [r5, #0]
 800da4a:	e7d6      	b.n	800d9fa <_free_r+0x22>
 800da4c:	6820      	ldr	r0, [r4, #0]
 800da4e:	1821      	adds	r1, r4, r0
 800da50:	428b      	cmp	r3, r1
 800da52:	bf04      	itt	eq
 800da54:	6819      	ldreq	r1, [r3, #0]
 800da56:	685b      	ldreq	r3, [r3, #4]
 800da58:	6063      	str	r3, [r4, #4]
 800da5a:	bf04      	itt	eq
 800da5c:	1809      	addeq	r1, r1, r0
 800da5e:	6021      	streq	r1, [r4, #0]
 800da60:	6054      	str	r4, [r2, #4]
 800da62:	e7ca      	b.n	800d9fa <_free_r+0x22>
 800da64:	bd38      	pop	{r3, r4, r5, pc}
 800da66:	bf00      	nop
 800da68:	20014220 	.word	0x20014220

0800da6c <malloc>:
 800da6c:	4b02      	ldr	r3, [pc, #8]	@ (800da78 <malloc+0xc>)
 800da6e:	4601      	mov	r1, r0
 800da70:	6818      	ldr	r0, [r3, #0]
 800da72:	f000 b825 	b.w	800dac0 <_malloc_r>
 800da76:	bf00      	nop
 800da78:	2000d140 	.word	0x2000d140

0800da7c <sbrk_aligned>:
 800da7c:	b570      	push	{r4, r5, r6, lr}
 800da7e:	4e0f      	ldr	r6, [pc, #60]	@ (800dabc <sbrk_aligned+0x40>)
 800da80:	460c      	mov	r4, r1
 800da82:	6831      	ldr	r1, [r6, #0]
 800da84:	4605      	mov	r5, r0
 800da86:	b911      	cbnz	r1, 800da8e <sbrk_aligned+0x12>
 800da88:	f001 ffdc 	bl	800fa44 <_sbrk_r>
 800da8c:	6030      	str	r0, [r6, #0]
 800da8e:	4621      	mov	r1, r4
 800da90:	4628      	mov	r0, r5
 800da92:	f001 ffd7 	bl	800fa44 <_sbrk_r>
 800da96:	1c43      	adds	r3, r0, #1
 800da98:	d103      	bne.n	800daa2 <sbrk_aligned+0x26>
 800da9a:	f04f 34ff 	mov.w	r4, #4294967295
 800da9e:	4620      	mov	r0, r4
 800daa0:	bd70      	pop	{r4, r5, r6, pc}
 800daa2:	1cc4      	adds	r4, r0, #3
 800daa4:	f024 0403 	bic.w	r4, r4, #3
 800daa8:	42a0      	cmp	r0, r4
 800daaa:	d0f8      	beq.n	800da9e <sbrk_aligned+0x22>
 800daac:	1a21      	subs	r1, r4, r0
 800daae:	4628      	mov	r0, r5
 800dab0:	f001 ffc8 	bl	800fa44 <_sbrk_r>
 800dab4:	3001      	adds	r0, #1
 800dab6:	d1f2      	bne.n	800da9e <sbrk_aligned+0x22>
 800dab8:	e7ef      	b.n	800da9a <sbrk_aligned+0x1e>
 800daba:	bf00      	nop
 800dabc:	2001421c 	.word	0x2001421c

0800dac0 <_malloc_r>:
 800dac0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800dac4:	1ccd      	adds	r5, r1, #3
 800dac6:	f025 0503 	bic.w	r5, r5, #3
 800daca:	3508      	adds	r5, #8
 800dacc:	2d0c      	cmp	r5, #12
 800dace:	bf38      	it	cc
 800dad0:	250c      	movcc	r5, #12
 800dad2:	2d00      	cmp	r5, #0
 800dad4:	4606      	mov	r6, r0
 800dad6:	db01      	blt.n	800dadc <_malloc_r+0x1c>
 800dad8:	42a9      	cmp	r1, r5
 800dada:	d904      	bls.n	800dae6 <_malloc_r+0x26>
 800dadc:	230c      	movs	r3, #12
 800dade:	6033      	str	r3, [r6, #0]
 800dae0:	2000      	movs	r0, #0
 800dae2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800dae6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800dbbc <_malloc_r+0xfc>
 800daea:	f000 f869 	bl	800dbc0 <__malloc_lock>
 800daee:	f8d8 3000 	ldr.w	r3, [r8]
 800daf2:	461c      	mov	r4, r3
 800daf4:	bb44      	cbnz	r4, 800db48 <_malloc_r+0x88>
 800daf6:	4629      	mov	r1, r5
 800daf8:	4630      	mov	r0, r6
 800dafa:	f7ff ffbf 	bl	800da7c <sbrk_aligned>
 800dafe:	1c43      	adds	r3, r0, #1
 800db00:	4604      	mov	r4, r0
 800db02:	d158      	bne.n	800dbb6 <_malloc_r+0xf6>
 800db04:	f8d8 4000 	ldr.w	r4, [r8]
 800db08:	4627      	mov	r7, r4
 800db0a:	2f00      	cmp	r7, #0
 800db0c:	d143      	bne.n	800db96 <_malloc_r+0xd6>
 800db0e:	2c00      	cmp	r4, #0
 800db10:	d04b      	beq.n	800dbaa <_malloc_r+0xea>
 800db12:	6823      	ldr	r3, [r4, #0]
 800db14:	4639      	mov	r1, r7
 800db16:	4630      	mov	r0, r6
 800db18:	eb04 0903 	add.w	r9, r4, r3
 800db1c:	f001 ff92 	bl	800fa44 <_sbrk_r>
 800db20:	4581      	cmp	r9, r0
 800db22:	d142      	bne.n	800dbaa <_malloc_r+0xea>
 800db24:	6821      	ldr	r1, [r4, #0]
 800db26:	1a6d      	subs	r5, r5, r1
 800db28:	4629      	mov	r1, r5
 800db2a:	4630      	mov	r0, r6
 800db2c:	f7ff ffa6 	bl	800da7c <sbrk_aligned>
 800db30:	3001      	adds	r0, #1
 800db32:	d03a      	beq.n	800dbaa <_malloc_r+0xea>
 800db34:	6823      	ldr	r3, [r4, #0]
 800db36:	442b      	add	r3, r5
 800db38:	6023      	str	r3, [r4, #0]
 800db3a:	f8d8 3000 	ldr.w	r3, [r8]
 800db3e:	685a      	ldr	r2, [r3, #4]
 800db40:	bb62      	cbnz	r2, 800db9c <_malloc_r+0xdc>
 800db42:	f8c8 7000 	str.w	r7, [r8]
 800db46:	e00f      	b.n	800db68 <_malloc_r+0xa8>
 800db48:	6822      	ldr	r2, [r4, #0]
 800db4a:	1b52      	subs	r2, r2, r5
 800db4c:	d420      	bmi.n	800db90 <_malloc_r+0xd0>
 800db4e:	2a0b      	cmp	r2, #11
 800db50:	d917      	bls.n	800db82 <_malloc_r+0xc2>
 800db52:	1961      	adds	r1, r4, r5
 800db54:	42a3      	cmp	r3, r4
 800db56:	6025      	str	r5, [r4, #0]
 800db58:	bf18      	it	ne
 800db5a:	6059      	strne	r1, [r3, #4]
 800db5c:	6863      	ldr	r3, [r4, #4]
 800db5e:	bf08      	it	eq
 800db60:	f8c8 1000 	streq.w	r1, [r8]
 800db64:	5162      	str	r2, [r4, r5]
 800db66:	604b      	str	r3, [r1, #4]
 800db68:	4630      	mov	r0, r6
 800db6a:	f000 f82f 	bl	800dbcc <__malloc_unlock>
 800db6e:	f104 000b 	add.w	r0, r4, #11
 800db72:	1d23      	adds	r3, r4, #4
 800db74:	f020 0007 	bic.w	r0, r0, #7
 800db78:	1ac2      	subs	r2, r0, r3
 800db7a:	bf1c      	itt	ne
 800db7c:	1a1b      	subne	r3, r3, r0
 800db7e:	50a3      	strne	r3, [r4, r2]
 800db80:	e7af      	b.n	800dae2 <_malloc_r+0x22>
 800db82:	6862      	ldr	r2, [r4, #4]
 800db84:	42a3      	cmp	r3, r4
 800db86:	bf0c      	ite	eq
 800db88:	f8c8 2000 	streq.w	r2, [r8]
 800db8c:	605a      	strne	r2, [r3, #4]
 800db8e:	e7eb      	b.n	800db68 <_malloc_r+0xa8>
 800db90:	4623      	mov	r3, r4
 800db92:	6864      	ldr	r4, [r4, #4]
 800db94:	e7ae      	b.n	800daf4 <_malloc_r+0x34>
 800db96:	463c      	mov	r4, r7
 800db98:	687f      	ldr	r7, [r7, #4]
 800db9a:	e7b6      	b.n	800db0a <_malloc_r+0x4a>
 800db9c:	461a      	mov	r2, r3
 800db9e:	685b      	ldr	r3, [r3, #4]
 800dba0:	42a3      	cmp	r3, r4
 800dba2:	d1fb      	bne.n	800db9c <_malloc_r+0xdc>
 800dba4:	2300      	movs	r3, #0
 800dba6:	6053      	str	r3, [r2, #4]
 800dba8:	e7de      	b.n	800db68 <_malloc_r+0xa8>
 800dbaa:	230c      	movs	r3, #12
 800dbac:	6033      	str	r3, [r6, #0]
 800dbae:	4630      	mov	r0, r6
 800dbb0:	f000 f80c 	bl	800dbcc <__malloc_unlock>
 800dbb4:	e794      	b.n	800dae0 <_malloc_r+0x20>
 800dbb6:	6005      	str	r5, [r0, #0]
 800dbb8:	e7d6      	b.n	800db68 <_malloc_r+0xa8>
 800dbba:	bf00      	nop
 800dbbc:	20014220 	.word	0x20014220

0800dbc0 <__malloc_lock>:
 800dbc0:	4801      	ldr	r0, [pc, #4]	@ (800dbc8 <__malloc_lock+0x8>)
 800dbc2:	f7ff b87a 	b.w	800ccba <__retarget_lock_acquire_recursive>
 800dbc6:	bf00      	nop
 800dbc8:	20014218 	.word	0x20014218

0800dbcc <__malloc_unlock>:
 800dbcc:	4801      	ldr	r0, [pc, #4]	@ (800dbd4 <__malloc_unlock+0x8>)
 800dbce:	f7ff b875 	b.w	800ccbc <__retarget_lock_release_recursive>
 800dbd2:	bf00      	nop
 800dbd4:	20014218 	.word	0x20014218

0800dbd8 <_Balloc>:
 800dbd8:	b570      	push	{r4, r5, r6, lr}
 800dbda:	69c6      	ldr	r6, [r0, #28]
 800dbdc:	4604      	mov	r4, r0
 800dbde:	460d      	mov	r5, r1
 800dbe0:	b976      	cbnz	r6, 800dc00 <_Balloc+0x28>
 800dbe2:	2010      	movs	r0, #16
 800dbe4:	f7ff ff42 	bl	800da6c <malloc>
 800dbe8:	4602      	mov	r2, r0
 800dbea:	61e0      	str	r0, [r4, #28]
 800dbec:	b920      	cbnz	r0, 800dbf8 <_Balloc+0x20>
 800dbee:	4b18      	ldr	r3, [pc, #96]	@ (800dc50 <_Balloc+0x78>)
 800dbf0:	4818      	ldr	r0, [pc, #96]	@ (800dc54 <_Balloc+0x7c>)
 800dbf2:	216b      	movs	r1, #107	@ 0x6b
 800dbf4:	f7ff f878 	bl	800cce8 <__assert_func>
 800dbf8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800dbfc:	6006      	str	r6, [r0, #0]
 800dbfe:	60c6      	str	r6, [r0, #12]
 800dc00:	69e6      	ldr	r6, [r4, #28]
 800dc02:	68f3      	ldr	r3, [r6, #12]
 800dc04:	b183      	cbz	r3, 800dc28 <_Balloc+0x50>
 800dc06:	69e3      	ldr	r3, [r4, #28]
 800dc08:	68db      	ldr	r3, [r3, #12]
 800dc0a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800dc0e:	b9b8      	cbnz	r0, 800dc40 <_Balloc+0x68>
 800dc10:	2101      	movs	r1, #1
 800dc12:	fa01 f605 	lsl.w	r6, r1, r5
 800dc16:	1d72      	adds	r2, r6, #5
 800dc18:	0092      	lsls	r2, r2, #2
 800dc1a:	4620      	mov	r0, r4
 800dc1c:	f001 ff33 	bl	800fa86 <_calloc_r>
 800dc20:	b160      	cbz	r0, 800dc3c <_Balloc+0x64>
 800dc22:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800dc26:	e00e      	b.n	800dc46 <_Balloc+0x6e>
 800dc28:	2221      	movs	r2, #33	@ 0x21
 800dc2a:	2104      	movs	r1, #4
 800dc2c:	4620      	mov	r0, r4
 800dc2e:	f001 ff2a 	bl	800fa86 <_calloc_r>
 800dc32:	69e3      	ldr	r3, [r4, #28]
 800dc34:	60f0      	str	r0, [r6, #12]
 800dc36:	68db      	ldr	r3, [r3, #12]
 800dc38:	2b00      	cmp	r3, #0
 800dc3a:	d1e4      	bne.n	800dc06 <_Balloc+0x2e>
 800dc3c:	2000      	movs	r0, #0
 800dc3e:	bd70      	pop	{r4, r5, r6, pc}
 800dc40:	6802      	ldr	r2, [r0, #0]
 800dc42:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800dc46:	2300      	movs	r3, #0
 800dc48:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800dc4c:	e7f7      	b.n	800dc3e <_Balloc+0x66>
 800dc4e:	bf00      	nop
 800dc50:	08011b66 	.word	0x08011b66
 800dc54:	08011be6 	.word	0x08011be6

0800dc58 <_Bfree>:
 800dc58:	b570      	push	{r4, r5, r6, lr}
 800dc5a:	69c6      	ldr	r6, [r0, #28]
 800dc5c:	4605      	mov	r5, r0
 800dc5e:	460c      	mov	r4, r1
 800dc60:	b976      	cbnz	r6, 800dc80 <_Bfree+0x28>
 800dc62:	2010      	movs	r0, #16
 800dc64:	f7ff ff02 	bl	800da6c <malloc>
 800dc68:	4602      	mov	r2, r0
 800dc6a:	61e8      	str	r0, [r5, #28]
 800dc6c:	b920      	cbnz	r0, 800dc78 <_Bfree+0x20>
 800dc6e:	4b09      	ldr	r3, [pc, #36]	@ (800dc94 <_Bfree+0x3c>)
 800dc70:	4809      	ldr	r0, [pc, #36]	@ (800dc98 <_Bfree+0x40>)
 800dc72:	218f      	movs	r1, #143	@ 0x8f
 800dc74:	f7ff f838 	bl	800cce8 <__assert_func>
 800dc78:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800dc7c:	6006      	str	r6, [r0, #0]
 800dc7e:	60c6      	str	r6, [r0, #12]
 800dc80:	b13c      	cbz	r4, 800dc92 <_Bfree+0x3a>
 800dc82:	69eb      	ldr	r3, [r5, #28]
 800dc84:	6862      	ldr	r2, [r4, #4]
 800dc86:	68db      	ldr	r3, [r3, #12]
 800dc88:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800dc8c:	6021      	str	r1, [r4, #0]
 800dc8e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800dc92:	bd70      	pop	{r4, r5, r6, pc}
 800dc94:	08011b66 	.word	0x08011b66
 800dc98:	08011be6 	.word	0x08011be6

0800dc9c <__multadd>:
 800dc9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dca0:	690d      	ldr	r5, [r1, #16]
 800dca2:	4607      	mov	r7, r0
 800dca4:	460c      	mov	r4, r1
 800dca6:	461e      	mov	r6, r3
 800dca8:	f101 0c14 	add.w	ip, r1, #20
 800dcac:	2000      	movs	r0, #0
 800dcae:	f8dc 3000 	ldr.w	r3, [ip]
 800dcb2:	b299      	uxth	r1, r3
 800dcb4:	fb02 6101 	mla	r1, r2, r1, r6
 800dcb8:	0c1e      	lsrs	r6, r3, #16
 800dcba:	0c0b      	lsrs	r3, r1, #16
 800dcbc:	fb02 3306 	mla	r3, r2, r6, r3
 800dcc0:	b289      	uxth	r1, r1
 800dcc2:	3001      	adds	r0, #1
 800dcc4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800dcc8:	4285      	cmp	r5, r0
 800dcca:	f84c 1b04 	str.w	r1, [ip], #4
 800dcce:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800dcd2:	dcec      	bgt.n	800dcae <__multadd+0x12>
 800dcd4:	b30e      	cbz	r6, 800dd1a <__multadd+0x7e>
 800dcd6:	68a3      	ldr	r3, [r4, #8]
 800dcd8:	42ab      	cmp	r3, r5
 800dcda:	dc19      	bgt.n	800dd10 <__multadd+0x74>
 800dcdc:	6861      	ldr	r1, [r4, #4]
 800dcde:	4638      	mov	r0, r7
 800dce0:	3101      	adds	r1, #1
 800dce2:	f7ff ff79 	bl	800dbd8 <_Balloc>
 800dce6:	4680      	mov	r8, r0
 800dce8:	b928      	cbnz	r0, 800dcf6 <__multadd+0x5a>
 800dcea:	4602      	mov	r2, r0
 800dcec:	4b0c      	ldr	r3, [pc, #48]	@ (800dd20 <__multadd+0x84>)
 800dcee:	480d      	ldr	r0, [pc, #52]	@ (800dd24 <__multadd+0x88>)
 800dcf0:	21ba      	movs	r1, #186	@ 0xba
 800dcf2:	f7fe fff9 	bl	800cce8 <__assert_func>
 800dcf6:	6922      	ldr	r2, [r4, #16]
 800dcf8:	3202      	adds	r2, #2
 800dcfa:	f104 010c 	add.w	r1, r4, #12
 800dcfe:	0092      	lsls	r2, r2, #2
 800dd00:	300c      	adds	r0, #12
 800dd02:	f7fe ffdc 	bl	800ccbe <memcpy>
 800dd06:	4621      	mov	r1, r4
 800dd08:	4638      	mov	r0, r7
 800dd0a:	f7ff ffa5 	bl	800dc58 <_Bfree>
 800dd0e:	4644      	mov	r4, r8
 800dd10:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800dd14:	3501      	adds	r5, #1
 800dd16:	615e      	str	r6, [r3, #20]
 800dd18:	6125      	str	r5, [r4, #16]
 800dd1a:	4620      	mov	r0, r4
 800dd1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dd20:	08011bd5 	.word	0x08011bd5
 800dd24:	08011be6 	.word	0x08011be6

0800dd28 <__s2b>:
 800dd28:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800dd2c:	460c      	mov	r4, r1
 800dd2e:	4615      	mov	r5, r2
 800dd30:	461f      	mov	r7, r3
 800dd32:	2209      	movs	r2, #9
 800dd34:	3308      	adds	r3, #8
 800dd36:	4606      	mov	r6, r0
 800dd38:	fb93 f3f2 	sdiv	r3, r3, r2
 800dd3c:	2100      	movs	r1, #0
 800dd3e:	2201      	movs	r2, #1
 800dd40:	429a      	cmp	r2, r3
 800dd42:	db09      	blt.n	800dd58 <__s2b+0x30>
 800dd44:	4630      	mov	r0, r6
 800dd46:	f7ff ff47 	bl	800dbd8 <_Balloc>
 800dd4a:	b940      	cbnz	r0, 800dd5e <__s2b+0x36>
 800dd4c:	4602      	mov	r2, r0
 800dd4e:	4b19      	ldr	r3, [pc, #100]	@ (800ddb4 <__s2b+0x8c>)
 800dd50:	4819      	ldr	r0, [pc, #100]	@ (800ddb8 <__s2b+0x90>)
 800dd52:	21d3      	movs	r1, #211	@ 0xd3
 800dd54:	f7fe ffc8 	bl	800cce8 <__assert_func>
 800dd58:	0052      	lsls	r2, r2, #1
 800dd5a:	3101      	adds	r1, #1
 800dd5c:	e7f0      	b.n	800dd40 <__s2b+0x18>
 800dd5e:	9b08      	ldr	r3, [sp, #32]
 800dd60:	6143      	str	r3, [r0, #20]
 800dd62:	2d09      	cmp	r5, #9
 800dd64:	f04f 0301 	mov.w	r3, #1
 800dd68:	6103      	str	r3, [r0, #16]
 800dd6a:	dd16      	ble.n	800dd9a <__s2b+0x72>
 800dd6c:	f104 0909 	add.w	r9, r4, #9
 800dd70:	46c8      	mov	r8, r9
 800dd72:	442c      	add	r4, r5
 800dd74:	f818 3b01 	ldrb.w	r3, [r8], #1
 800dd78:	4601      	mov	r1, r0
 800dd7a:	3b30      	subs	r3, #48	@ 0x30
 800dd7c:	220a      	movs	r2, #10
 800dd7e:	4630      	mov	r0, r6
 800dd80:	f7ff ff8c 	bl	800dc9c <__multadd>
 800dd84:	45a0      	cmp	r8, r4
 800dd86:	d1f5      	bne.n	800dd74 <__s2b+0x4c>
 800dd88:	f1a5 0408 	sub.w	r4, r5, #8
 800dd8c:	444c      	add	r4, r9
 800dd8e:	1b2d      	subs	r5, r5, r4
 800dd90:	1963      	adds	r3, r4, r5
 800dd92:	42bb      	cmp	r3, r7
 800dd94:	db04      	blt.n	800dda0 <__s2b+0x78>
 800dd96:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800dd9a:	340a      	adds	r4, #10
 800dd9c:	2509      	movs	r5, #9
 800dd9e:	e7f6      	b.n	800dd8e <__s2b+0x66>
 800dda0:	f814 3b01 	ldrb.w	r3, [r4], #1
 800dda4:	4601      	mov	r1, r0
 800dda6:	3b30      	subs	r3, #48	@ 0x30
 800dda8:	220a      	movs	r2, #10
 800ddaa:	4630      	mov	r0, r6
 800ddac:	f7ff ff76 	bl	800dc9c <__multadd>
 800ddb0:	e7ee      	b.n	800dd90 <__s2b+0x68>
 800ddb2:	bf00      	nop
 800ddb4:	08011bd5 	.word	0x08011bd5
 800ddb8:	08011be6 	.word	0x08011be6

0800ddbc <__hi0bits>:
 800ddbc:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800ddc0:	4603      	mov	r3, r0
 800ddc2:	bf36      	itet	cc
 800ddc4:	0403      	lslcc	r3, r0, #16
 800ddc6:	2000      	movcs	r0, #0
 800ddc8:	2010      	movcc	r0, #16
 800ddca:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800ddce:	bf3c      	itt	cc
 800ddd0:	021b      	lslcc	r3, r3, #8
 800ddd2:	3008      	addcc	r0, #8
 800ddd4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800ddd8:	bf3c      	itt	cc
 800ddda:	011b      	lslcc	r3, r3, #4
 800dddc:	3004      	addcc	r0, #4
 800ddde:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800dde2:	bf3c      	itt	cc
 800dde4:	009b      	lslcc	r3, r3, #2
 800dde6:	3002      	addcc	r0, #2
 800dde8:	2b00      	cmp	r3, #0
 800ddea:	db05      	blt.n	800ddf8 <__hi0bits+0x3c>
 800ddec:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800ddf0:	f100 0001 	add.w	r0, r0, #1
 800ddf4:	bf08      	it	eq
 800ddf6:	2020      	moveq	r0, #32
 800ddf8:	4770      	bx	lr

0800ddfa <__lo0bits>:
 800ddfa:	6803      	ldr	r3, [r0, #0]
 800ddfc:	4602      	mov	r2, r0
 800ddfe:	f013 0007 	ands.w	r0, r3, #7
 800de02:	d00b      	beq.n	800de1c <__lo0bits+0x22>
 800de04:	07d9      	lsls	r1, r3, #31
 800de06:	d421      	bmi.n	800de4c <__lo0bits+0x52>
 800de08:	0798      	lsls	r0, r3, #30
 800de0a:	bf49      	itett	mi
 800de0c:	085b      	lsrmi	r3, r3, #1
 800de0e:	089b      	lsrpl	r3, r3, #2
 800de10:	2001      	movmi	r0, #1
 800de12:	6013      	strmi	r3, [r2, #0]
 800de14:	bf5c      	itt	pl
 800de16:	6013      	strpl	r3, [r2, #0]
 800de18:	2002      	movpl	r0, #2
 800de1a:	4770      	bx	lr
 800de1c:	b299      	uxth	r1, r3
 800de1e:	b909      	cbnz	r1, 800de24 <__lo0bits+0x2a>
 800de20:	0c1b      	lsrs	r3, r3, #16
 800de22:	2010      	movs	r0, #16
 800de24:	b2d9      	uxtb	r1, r3
 800de26:	b909      	cbnz	r1, 800de2c <__lo0bits+0x32>
 800de28:	3008      	adds	r0, #8
 800de2a:	0a1b      	lsrs	r3, r3, #8
 800de2c:	0719      	lsls	r1, r3, #28
 800de2e:	bf04      	itt	eq
 800de30:	091b      	lsreq	r3, r3, #4
 800de32:	3004      	addeq	r0, #4
 800de34:	0799      	lsls	r1, r3, #30
 800de36:	bf04      	itt	eq
 800de38:	089b      	lsreq	r3, r3, #2
 800de3a:	3002      	addeq	r0, #2
 800de3c:	07d9      	lsls	r1, r3, #31
 800de3e:	d403      	bmi.n	800de48 <__lo0bits+0x4e>
 800de40:	085b      	lsrs	r3, r3, #1
 800de42:	f100 0001 	add.w	r0, r0, #1
 800de46:	d003      	beq.n	800de50 <__lo0bits+0x56>
 800de48:	6013      	str	r3, [r2, #0]
 800de4a:	4770      	bx	lr
 800de4c:	2000      	movs	r0, #0
 800de4e:	4770      	bx	lr
 800de50:	2020      	movs	r0, #32
 800de52:	4770      	bx	lr

0800de54 <__i2b>:
 800de54:	b510      	push	{r4, lr}
 800de56:	460c      	mov	r4, r1
 800de58:	2101      	movs	r1, #1
 800de5a:	f7ff febd 	bl	800dbd8 <_Balloc>
 800de5e:	4602      	mov	r2, r0
 800de60:	b928      	cbnz	r0, 800de6e <__i2b+0x1a>
 800de62:	4b05      	ldr	r3, [pc, #20]	@ (800de78 <__i2b+0x24>)
 800de64:	4805      	ldr	r0, [pc, #20]	@ (800de7c <__i2b+0x28>)
 800de66:	f240 1145 	movw	r1, #325	@ 0x145
 800de6a:	f7fe ff3d 	bl	800cce8 <__assert_func>
 800de6e:	2301      	movs	r3, #1
 800de70:	6144      	str	r4, [r0, #20]
 800de72:	6103      	str	r3, [r0, #16]
 800de74:	bd10      	pop	{r4, pc}
 800de76:	bf00      	nop
 800de78:	08011bd5 	.word	0x08011bd5
 800de7c:	08011be6 	.word	0x08011be6

0800de80 <__multiply>:
 800de80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800de84:	4617      	mov	r7, r2
 800de86:	690a      	ldr	r2, [r1, #16]
 800de88:	693b      	ldr	r3, [r7, #16]
 800de8a:	429a      	cmp	r2, r3
 800de8c:	bfa8      	it	ge
 800de8e:	463b      	movge	r3, r7
 800de90:	4689      	mov	r9, r1
 800de92:	bfa4      	itt	ge
 800de94:	460f      	movge	r7, r1
 800de96:	4699      	movge	r9, r3
 800de98:	693d      	ldr	r5, [r7, #16]
 800de9a:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800de9e:	68bb      	ldr	r3, [r7, #8]
 800dea0:	6879      	ldr	r1, [r7, #4]
 800dea2:	eb05 060a 	add.w	r6, r5, sl
 800dea6:	42b3      	cmp	r3, r6
 800dea8:	b085      	sub	sp, #20
 800deaa:	bfb8      	it	lt
 800deac:	3101      	addlt	r1, #1
 800deae:	f7ff fe93 	bl	800dbd8 <_Balloc>
 800deb2:	b930      	cbnz	r0, 800dec2 <__multiply+0x42>
 800deb4:	4602      	mov	r2, r0
 800deb6:	4b41      	ldr	r3, [pc, #260]	@ (800dfbc <__multiply+0x13c>)
 800deb8:	4841      	ldr	r0, [pc, #260]	@ (800dfc0 <__multiply+0x140>)
 800deba:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800debe:	f7fe ff13 	bl	800cce8 <__assert_func>
 800dec2:	f100 0414 	add.w	r4, r0, #20
 800dec6:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800deca:	4623      	mov	r3, r4
 800decc:	2200      	movs	r2, #0
 800dece:	4573      	cmp	r3, lr
 800ded0:	d320      	bcc.n	800df14 <__multiply+0x94>
 800ded2:	f107 0814 	add.w	r8, r7, #20
 800ded6:	f109 0114 	add.w	r1, r9, #20
 800deda:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800dede:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800dee2:	9302      	str	r3, [sp, #8]
 800dee4:	1beb      	subs	r3, r5, r7
 800dee6:	3b15      	subs	r3, #21
 800dee8:	f023 0303 	bic.w	r3, r3, #3
 800deec:	3304      	adds	r3, #4
 800deee:	3715      	adds	r7, #21
 800def0:	42bd      	cmp	r5, r7
 800def2:	bf38      	it	cc
 800def4:	2304      	movcc	r3, #4
 800def6:	9301      	str	r3, [sp, #4]
 800def8:	9b02      	ldr	r3, [sp, #8]
 800defa:	9103      	str	r1, [sp, #12]
 800defc:	428b      	cmp	r3, r1
 800defe:	d80c      	bhi.n	800df1a <__multiply+0x9a>
 800df00:	2e00      	cmp	r6, #0
 800df02:	dd03      	ble.n	800df0c <__multiply+0x8c>
 800df04:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800df08:	2b00      	cmp	r3, #0
 800df0a:	d055      	beq.n	800dfb8 <__multiply+0x138>
 800df0c:	6106      	str	r6, [r0, #16]
 800df0e:	b005      	add	sp, #20
 800df10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800df14:	f843 2b04 	str.w	r2, [r3], #4
 800df18:	e7d9      	b.n	800dece <__multiply+0x4e>
 800df1a:	f8b1 a000 	ldrh.w	sl, [r1]
 800df1e:	f1ba 0f00 	cmp.w	sl, #0
 800df22:	d01f      	beq.n	800df64 <__multiply+0xe4>
 800df24:	46c4      	mov	ip, r8
 800df26:	46a1      	mov	r9, r4
 800df28:	2700      	movs	r7, #0
 800df2a:	f85c 2b04 	ldr.w	r2, [ip], #4
 800df2e:	f8d9 3000 	ldr.w	r3, [r9]
 800df32:	fa1f fb82 	uxth.w	fp, r2
 800df36:	b29b      	uxth	r3, r3
 800df38:	fb0a 330b 	mla	r3, sl, fp, r3
 800df3c:	443b      	add	r3, r7
 800df3e:	f8d9 7000 	ldr.w	r7, [r9]
 800df42:	0c12      	lsrs	r2, r2, #16
 800df44:	0c3f      	lsrs	r7, r7, #16
 800df46:	fb0a 7202 	mla	r2, sl, r2, r7
 800df4a:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800df4e:	b29b      	uxth	r3, r3
 800df50:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800df54:	4565      	cmp	r5, ip
 800df56:	f849 3b04 	str.w	r3, [r9], #4
 800df5a:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800df5e:	d8e4      	bhi.n	800df2a <__multiply+0xaa>
 800df60:	9b01      	ldr	r3, [sp, #4]
 800df62:	50e7      	str	r7, [r4, r3]
 800df64:	9b03      	ldr	r3, [sp, #12]
 800df66:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800df6a:	3104      	adds	r1, #4
 800df6c:	f1b9 0f00 	cmp.w	r9, #0
 800df70:	d020      	beq.n	800dfb4 <__multiply+0x134>
 800df72:	6823      	ldr	r3, [r4, #0]
 800df74:	4647      	mov	r7, r8
 800df76:	46a4      	mov	ip, r4
 800df78:	f04f 0a00 	mov.w	sl, #0
 800df7c:	f8b7 b000 	ldrh.w	fp, [r7]
 800df80:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800df84:	fb09 220b 	mla	r2, r9, fp, r2
 800df88:	4452      	add	r2, sl
 800df8a:	b29b      	uxth	r3, r3
 800df8c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800df90:	f84c 3b04 	str.w	r3, [ip], #4
 800df94:	f857 3b04 	ldr.w	r3, [r7], #4
 800df98:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800df9c:	f8bc 3000 	ldrh.w	r3, [ip]
 800dfa0:	fb09 330a 	mla	r3, r9, sl, r3
 800dfa4:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 800dfa8:	42bd      	cmp	r5, r7
 800dfaa:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800dfae:	d8e5      	bhi.n	800df7c <__multiply+0xfc>
 800dfb0:	9a01      	ldr	r2, [sp, #4]
 800dfb2:	50a3      	str	r3, [r4, r2]
 800dfb4:	3404      	adds	r4, #4
 800dfb6:	e79f      	b.n	800def8 <__multiply+0x78>
 800dfb8:	3e01      	subs	r6, #1
 800dfba:	e7a1      	b.n	800df00 <__multiply+0x80>
 800dfbc:	08011bd5 	.word	0x08011bd5
 800dfc0:	08011be6 	.word	0x08011be6

0800dfc4 <__pow5mult>:
 800dfc4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800dfc8:	4615      	mov	r5, r2
 800dfca:	f012 0203 	ands.w	r2, r2, #3
 800dfce:	4607      	mov	r7, r0
 800dfd0:	460e      	mov	r6, r1
 800dfd2:	d007      	beq.n	800dfe4 <__pow5mult+0x20>
 800dfd4:	4c25      	ldr	r4, [pc, #148]	@ (800e06c <__pow5mult+0xa8>)
 800dfd6:	3a01      	subs	r2, #1
 800dfd8:	2300      	movs	r3, #0
 800dfda:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800dfde:	f7ff fe5d 	bl	800dc9c <__multadd>
 800dfe2:	4606      	mov	r6, r0
 800dfe4:	10ad      	asrs	r5, r5, #2
 800dfe6:	d03d      	beq.n	800e064 <__pow5mult+0xa0>
 800dfe8:	69fc      	ldr	r4, [r7, #28]
 800dfea:	b97c      	cbnz	r4, 800e00c <__pow5mult+0x48>
 800dfec:	2010      	movs	r0, #16
 800dfee:	f7ff fd3d 	bl	800da6c <malloc>
 800dff2:	4602      	mov	r2, r0
 800dff4:	61f8      	str	r0, [r7, #28]
 800dff6:	b928      	cbnz	r0, 800e004 <__pow5mult+0x40>
 800dff8:	4b1d      	ldr	r3, [pc, #116]	@ (800e070 <__pow5mult+0xac>)
 800dffa:	481e      	ldr	r0, [pc, #120]	@ (800e074 <__pow5mult+0xb0>)
 800dffc:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800e000:	f7fe fe72 	bl	800cce8 <__assert_func>
 800e004:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800e008:	6004      	str	r4, [r0, #0]
 800e00a:	60c4      	str	r4, [r0, #12]
 800e00c:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800e010:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800e014:	b94c      	cbnz	r4, 800e02a <__pow5mult+0x66>
 800e016:	f240 2171 	movw	r1, #625	@ 0x271
 800e01a:	4638      	mov	r0, r7
 800e01c:	f7ff ff1a 	bl	800de54 <__i2b>
 800e020:	2300      	movs	r3, #0
 800e022:	f8c8 0008 	str.w	r0, [r8, #8]
 800e026:	4604      	mov	r4, r0
 800e028:	6003      	str	r3, [r0, #0]
 800e02a:	f04f 0900 	mov.w	r9, #0
 800e02e:	07eb      	lsls	r3, r5, #31
 800e030:	d50a      	bpl.n	800e048 <__pow5mult+0x84>
 800e032:	4631      	mov	r1, r6
 800e034:	4622      	mov	r2, r4
 800e036:	4638      	mov	r0, r7
 800e038:	f7ff ff22 	bl	800de80 <__multiply>
 800e03c:	4631      	mov	r1, r6
 800e03e:	4680      	mov	r8, r0
 800e040:	4638      	mov	r0, r7
 800e042:	f7ff fe09 	bl	800dc58 <_Bfree>
 800e046:	4646      	mov	r6, r8
 800e048:	106d      	asrs	r5, r5, #1
 800e04a:	d00b      	beq.n	800e064 <__pow5mult+0xa0>
 800e04c:	6820      	ldr	r0, [r4, #0]
 800e04e:	b938      	cbnz	r0, 800e060 <__pow5mult+0x9c>
 800e050:	4622      	mov	r2, r4
 800e052:	4621      	mov	r1, r4
 800e054:	4638      	mov	r0, r7
 800e056:	f7ff ff13 	bl	800de80 <__multiply>
 800e05a:	6020      	str	r0, [r4, #0]
 800e05c:	f8c0 9000 	str.w	r9, [r0]
 800e060:	4604      	mov	r4, r0
 800e062:	e7e4      	b.n	800e02e <__pow5mult+0x6a>
 800e064:	4630      	mov	r0, r6
 800e066:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e06a:	bf00      	nop
 800e06c:	08011cbc 	.word	0x08011cbc
 800e070:	08011b66 	.word	0x08011b66
 800e074:	08011be6 	.word	0x08011be6

0800e078 <__lshift>:
 800e078:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e07c:	460c      	mov	r4, r1
 800e07e:	6849      	ldr	r1, [r1, #4]
 800e080:	6923      	ldr	r3, [r4, #16]
 800e082:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800e086:	68a3      	ldr	r3, [r4, #8]
 800e088:	4607      	mov	r7, r0
 800e08a:	4691      	mov	r9, r2
 800e08c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800e090:	f108 0601 	add.w	r6, r8, #1
 800e094:	42b3      	cmp	r3, r6
 800e096:	db0b      	blt.n	800e0b0 <__lshift+0x38>
 800e098:	4638      	mov	r0, r7
 800e09a:	f7ff fd9d 	bl	800dbd8 <_Balloc>
 800e09e:	4605      	mov	r5, r0
 800e0a0:	b948      	cbnz	r0, 800e0b6 <__lshift+0x3e>
 800e0a2:	4602      	mov	r2, r0
 800e0a4:	4b28      	ldr	r3, [pc, #160]	@ (800e148 <__lshift+0xd0>)
 800e0a6:	4829      	ldr	r0, [pc, #164]	@ (800e14c <__lshift+0xd4>)
 800e0a8:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800e0ac:	f7fe fe1c 	bl	800cce8 <__assert_func>
 800e0b0:	3101      	adds	r1, #1
 800e0b2:	005b      	lsls	r3, r3, #1
 800e0b4:	e7ee      	b.n	800e094 <__lshift+0x1c>
 800e0b6:	2300      	movs	r3, #0
 800e0b8:	f100 0114 	add.w	r1, r0, #20
 800e0bc:	f100 0210 	add.w	r2, r0, #16
 800e0c0:	4618      	mov	r0, r3
 800e0c2:	4553      	cmp	r3, sl
 800e0c4:	db33      	blt.n	800e12e <__lshift+0xb6>
 800e0c6:	6920      	ldr	r0, [r4, #16]
 800e0c8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800e0cc:	f104 0314 	add.w	r3, r4, #20
 800e0d0:	f019 091f 	ands.w	r9, r9, #31
 800e0d4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800e0d8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800e0dc:	d02b      	beq.n	800e136 <__lshift+0xbe>
 800e0de:	f1c9 0e20 	rsb	lr, r9, #32
 800e0e2:	468a      	mov	sl, r1
 800e0e4:	2200      	movs	r2, #0
 800e0e6:	6818      	ldr	r0, [r3, #0]
 800e0e8:	fa00 f009 	lsl.w	r0, r0, r9
 800e0ec:	4310      	orrs	r0, r2
 800e0ee:	f84a 0b04 	str.w	r0, [sl], #4
 800e0f2:	f853 2b04 	ldr.w	r2, [r3], #4
 800e0f6:	459c      	cmp	ip, r3
 800e0f8:	fa22 f20e 	lsr.w	r2, r2, lr
 800e0fc:	d8f3      	bhi.n	800e0e6 <__lshift+0x6e>
 800e0fe:	ebac 0304 	sub.w	r3, ip, r4
 800e102:	3b15      	subs	r3, #21
 800e104:	f023 0303 	bic.w	r3, r3, #3
 800e108:	3304      	adds	r3, #4
 800e10a:	f104 0015 	add.w	r0, r4, #21
 800e10e:	4560      	cmp	r0, ip
 800e110:	bf88      	it	hi
 800e112:	2304      	movhi	r3, #4
 800e114:	50ca      	str	r2, [r1, r3]
 800e116:	b10a      	cbz	r2, 800e11c <__lshift+0xa4>
 800e118:	f108 0602 	add.w	r6, r8, #2
 800e11c:	3e01      	subs	r6, #1
 800e11e:	4638      	mov	r0, r7
 800e120:	612e      	str	r6, [r5, #16]
 800e122:	4621      	mov	r1, r4
 800e124:	f7ff fd98 	bl	800dc58 <_Bfree>
 800e128:	4628      	mov	r0, r5
 800e12a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e12e:	f842 0f04 	str.w	r0, [r2, #4]!
 800e132:	3301      	adds	r3, #1
 800e134:	e7c5      	b.n	800e0c2 <__lshift+0x4a>
 800e136:	3904      	subs	r1, #4
 800e138:	f853 2b04 	ldr.w	r2, [r3], #4
 800e13c:	f841 2f04 	str.w	r2, [r1, #4]!
 800e140:	459c      	cmp	ip, r3
 800e142:	d8f9      	bhi.n	800e138 <__lshift+0xc0>
 800e144:	e7ea      	b.n	800e11c <__lshift+0xa4>
 800e146:	bf00      	nop
 800e148:	08011bd5 	.word	0x08011bd5
 800e14c:	08011be6 	.word	0x08011be6

0800e150 <__mcmp>:
 800e150:	690a      	ldr	r2, [r1, #16]
 800e152:	4603      	mov	r3, r0
 800e154:	6900      	ldr	r0, [r0, #16]
 800e156:	1a80      	subs	r0, r0, r2
 800e158:	b530      	push	{r4, r5, lr}
 800e15a:	d10e      	bne.n	800e17a <__mcmp+0x2a>
 800e15c:	3314      	adds	r3, #20
 800e15e:	3114      	adds	r1, #20
 800e160:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800e164:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800e168:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800e16c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800e170:	4295      	cmp	r5, r2
 800e172:	d003      	beq.n	800e17c <__mcmp+0x2c>
 800e174:	d205      	bcs.n	800e182 <__mcmp+0x32>
 800e176:	f04f 30ff 	mov.w	r0, #4294967295
 800e17a:	bd30      	pop	{r4, r5, pc}
 800e17c:	42a3      	cmp	r3, r4
 800e17e:	d3f3      	bcc.n	800e168 <__mcmp+0x18>
 800e180:	e7fb      	b.n	800e17a <__mcmp+0x2a>
 800e182:	2001      	movs	r0, #1
 800e184:	e7f9      	b.n	800e17a <__mcmp+0x2a>
	...

0800e188 <__mdiff>:
 800e188:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e18c:	4689      	mov	r9, r1
 800e18e:	4606      	mov	r6, r0
 800e190:	4611      	mov	r1, r2
 800e192:	4648      	mov	r0, r9
 800e194:	4614      	mov	r4, r2
 800e196:	f7ff ffdb 	bl	800e150 <__mcmp>
 800e19a:	1e05      	subs	r5, r0, #0
 800e19c:	d112      	bne.n	800e1c4 <__mdiff+0x3c>
 800e19e:	4629      	mov	r1, r5
 800e1a0:	4630      	mov	r0, r6
 800e1a2:	f7ff fd19 	bl	800dbd8 <_Balloc>
 800e1a6:	4602      	mov	r2, r0
 800e1a8:	b928      	cbnz	r0, 800e1b6 <__mdiff+0x2e>
 800e1aa:	4b3f      	ldr	r3, [pc, #252]	@ (800e2a8 <__mdiff+0x120>)
 800e1ac:	f240 2137 	movw	r1, #567	@ 0x237
 800e1b0:	483e      	ldr	r0, [pc, #248]	@ (800e2ac <__mdiff+0x124>)
 800e1b2:	f7fe fd99 	bl	800cce8 <__assert_func>
 800e1b6:	2301      	movs	r3, #1
 800e1b8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800e1bc:	4610      	mov	r0, r2
 800e1be:	b003      	add	sp, #12
 800e1c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e1c4:	bfbc      	itt	lt
 800e1c6:	464b      	movlt	r3, r9
 800e1c8:	46a1      	movlt	r9, r4
 800e1ca:	4630      	mov	r0, r6
 800e1cc:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800e1d0:	bfba      	itte	lt
 800e1d2:	461c      	movlt	r4, r3
 800e1d4:	2501      	movlt	r5, #1
 800e1d6:	2500      	movge	r5, #0
 800e1d8:	f7ff fcfe 	bl	800dbd8 <_Balloc>
 800e1dc:	4602      	mov	r2, r0
 800e1de:	b918      	cbnz	r0, 800e1e8 <__mdiff+0x60>
 800e1e0:	4b31      	ldr	r3, [pc, #196]	@ (800e2a8 <__mdiff+0x120>)
 800e1e2:	f240 2145 	movw	r1, #581	@ 0x245
 800e1e6:	e7e3      	b.n	800e1b0 <__mdiff+0x28>
 800e1e8:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800e1ec:	6926      	ldr	r6, [r4, #16]
 800e1ee:	60c5      	str	r5, [r0, #12]
 800e1f0:	f109 0310 	add.w	r3, r9, #16
 800e1f4:	f109 0514 	add.w	r5, r9, #20
 800e1f8:	f104 0e14 	add.w	lr, r4, #20
 800e1fc:	f100 0b14 	add.w	fp, r0, #20
 800e200:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800e204:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800e208:	9301      	str	r3, [sp, #4]
 800e20a:	46d9      	mov	r9, fp
 800e20c:	f04f 0c00 	mov.w	ip, #0
 800e210:	9b01      	ldr	r3, [sp, #4]
 800e212:	f85e 0b04 	ldr.w	r0, [lr], #4
 800e216:	f853 af04 	ldr.w	sl, [r3, #4]!
 800e21a:	9301      	str	r3, [sp, #4]
 800e21c:	fa1f f38a 	uxth.w	r3, sl
 800e220:	4619      	mov	r1, r3
 800e222:	b283      	uxth	r3, r0
 800e224:	1acb      	subs	r3, r1, r3
 800e226:	0c00      	lsrs	r0, r0, #16
 800e228:	4463      	add	r3, ip
 800e22a:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800e22e:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800e232:	b29b      	uxth	r3, r3
 800e234:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800e238:	4576      	cmp	r6, lr
 800e23a:	f849 3b04 	str.w	r3, [r9], #4
 800e23e:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800e242:	d8e5      	bhi.n	800e210 <__mdiff+0x88>
 800e244:	1b33      	subs	r3, r6, r4
 800e246:	3b15      	subs	r3, #21
 800e248:	f023 0303 	bic.w	r3, r3, #3
 800e24c:	3415      	adds	r4, #21
 800e24e:	3304      	adds	r3, #4
 800e250:	42a6      	cmp	r6, r4
 800e252:	bf38      	it	cc
 800e254:	2304      	movcc	r3, #4
 800e256:	441d      	add	r5, r3
 800e258:	445b      	add	r3, fp
 800e25a:	461e      	mov	r6, r3
 800e25c:	462c      	mov	r4, r5
 800e25e:	4544      	cmp	r4, r8
 800e260:	d30e      	bcc.n	800e280 <__mdiff+0xf8>
 800e262:	f108 0103 	add.w	r1, r8, #3
 800e266:	1b49      	subs	r1, r1, r5
 800e268:	f021 0103 	bic.w	r1, r1, #3
 800e26c:	3d03      	subs	r5, #3
 800e26e:	45a8      	cmp	r8, r5
 800e270:	bf38      	it	cc
 800e272:	2100      	movcc	r1, #0
 800e274:	440b      	add	r3, r1
 800e276:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800e27a:	b191      	cbz	r1, 800e2a2 <__mdiff+0x11a>
 800e27c:	6117      	str	r7, [r2, #16]
 800e27e:	e79d      	b.n	800e1bc <__mdiff+0x34>
 800e280:	f854 1b04 	ldr.w	r1, [r4], #4
 800e284:	46e6      	mov	lr, ip
 800e286:	0c08      	lsrs	r0, r1, #16
 800e288:	fa1c fc81 	uxtah	ip, ip, r1
 800e28c:	4471      	add	r1, lr
 800e28e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800e292:	b289      	uxth	r1, r1
 800e294:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800e298:	f846 1b04 	str.w	r1, [r6], #4
 800e29c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800e2a0:	e7dd      	b.n	800e25e <__mdiff+0xd6>
 800e2a2:	3f01      	subs	r7, #1
 800e2a4:	e7e7      	b.n	800e276 <__mdiff+0xee>
 800e2a6:	bf00      	nop
 800e2a8:	08011bd5 	.word	0x08011bd5
 800e2ac:	08011be6 	.word	0x08011be6

0800e2b0 <__ulp>:
 800e2b0:	b082      	sub	sp, #8
 800e2b2:	ed8d 0b00 	vstr	d0, [sp]
 800e2b6:	9a01      	ldr	r2, [sp, #4]
 800e2b8:	4b0f      	ldr	r3, [pc, #60]	@ (800e2f8 <__ulp+0x48>)
 800e2ba:	4013      	ands	r3, r2
 800e2bc:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800e2c0:	2b00      	cmp	r3, #0
 800e2c2:	dc08      	bgt.n	800e2d6 <__ulp+0x26>
 800e2c4:	425b      	negs	r3, r3
 800e2c6:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800e2ca:	ea4f 5223 	mov.w	r2, r3, asr #20
 800e2ce:	da04      	bge.n	800e2da <__ulp+0x2a>
 800e2d0:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800e2d4:	4113      	asrs	r3, r2
 800e2d6:	2200      	movs	r2, #0
 800e2d8:	e008      	b.n	800e2ec <__ulp+0x3c>
 800e2da:	f1a2 0314 	sub.w	r3, r2, #20
 800e2de:	2b1e      	cmp	r3, #30
 800e2e0:	bfda      	itte	le
 800e2e2:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800e2e6:	40da      	lsrle	r2, r3
 800e2e8:	2201      	movgt	r2, #1
 800e2ea:	2300      	movs	r3, #0
 800e2ec:	4619      	mov	r1, r3
 800e2ee:	4610      	mov	r0, r2
 800e2f0:	ec41 0b10 	vmov	d0, r0, r1
 800e2f4:	b002      	add	sp, #8
 800e2f6:	4770      	bx	lr
 800e2f8:	7ff00000 	.word	0x7ff00000

0800e2fc <__b2d>:
 800e2fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e300:	6906      	ldr	r6, [r0, #16]
 800e302:	f100 0814 	add.w	r8, r0, #20
 800e306:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800e30a:	1f37      	subs	r7, r6, #4
 800e30c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800e310:	4610      	mov	r0, r2
 800e312:	f7ff fd53 	bl	800ddbc <__hi0bits>
 800e316:	f1c0 0320 	rsb	r3, r0, #32
 800e31a:	280a      	cmp	r0, #10
 800e31c:	600b      	str	r3, [r1, #0]
 800e31e:	491b      	ldr	r1, [pc, #108]	@ (800e38c <__b2d+0x90>)
 800e320:	dc15      	bgt.n	800e34e <__b2d+0x52>
 800e322:	f1c0 0c0b 	rsb	ip, r0, #11
 800e326:	fa22 f30c 	lsr.w	r3, r2, ip
 800e32a:	45b8      	cmp	r8, r7
 800e32c:	ea43 0501 	orr.w	r5, r3, r1
 800e330:	bf34      	ite	cc
 800e332:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800e336:	2300      	movcs	r3, #0
 800e338:	3015      	adds	r0, #21
 800e33a:	fa02 f000 	lsl.w	r0, r2, r0
 800e33e:	fa23 f30c 	lsr.w	r3, r3, ip
 800e342:	4303      	orrs	r3, r0
 800e344:	461c      	mov	r4, r3
 800e346:	ec45 4b10 	vmov	d0, r4, r5
 800e34a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e34e:	45b8      	cmp	r8, r7
 800e350:	bf3a      	itte	cc
 800e352:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800e356:	f1a6 0708 	subcc.w	r7, r6, #8
 800e35a:	2300      	movcs	r3, #0
 800e35c:	380b      	subs	r0, #11
 800e35e:	d012      	beq.n	800e386 <__b2d+0x8a>
 800e360:	f1c0 0120 	rsb	r1, r0, #32
 800e364:	fa23 f401 	lsr.w	r4, r3, r1
 800e368:	4082      	lsls	r2, r0
 800e36a:	4322      	orrs	r2, r4
 800e36c:	4547      	cmp	r7, r8
 800e36e:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800e372:	bf8c      	ite	hi
 800e374:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800e378:	2200      	movls	r2, #0
 800e37a:	4083      	lsls	r3, r0
 800e37c:	40ca      	lsrs	r2, r1
 800e37e:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800e382:	4313      	orrs	r3, r2
 800e384:	e7de      	b.n	800e344 <__b2d+0x48>
 800e386:	ea42 0501 	orr.w	r5, r2, r1
 800e38a:	e7db      	b.n	800e344 <__b2d+0x48>
 800e38c:	3ff00000 	.word	0x3ff00000

0800e390 <__d2b>:
 800e390:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800e394:	460f      	mov	r7, r1
 800e396:	2101      	movs	r1, #1
 800e398:	ec59 8b10 	vmov	r8, r9, d0
 800e39c:	4616      	mov	r6, r2
 800e39e:	f7ff fc1b 	bl	800dbd8 <_Balloc>
 800e3a2:	4604      	mov	r4, r0
 800e3a4:	b930      	cbnz	r0, 800e3b4 <__d2b+0x24>
 800e3a6:	4602      	mov	r2, r0
 800e3a8:	4b23      	ldr	r3, [pc, #140]	@ (800e438 <__d2b+0xa8>)
 800e3aa:	4824      	ldr	r0, [pc, #144]	@ (800e43c <__d2b+0xac>)
 800e3ac:	f240 310f 	movw	r1, #783	@ 0x30f
 800e3b0:	f7fe fc9a 	bl	800cce8 <__assert_func>
 800e3b4:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800e3b8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800e3bc:	b10d      	cbz	r5, 800e3c2 <__d2b+0x32>
 800e3be:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800e3c2:	9301      	str	r3, [sp, #4]
 800e3c4:	f1b8 0300 	subs.w	r3, r8, #0
 800e3c8:	d023      	beq.n	800e412 <__d2b+0x82>
 800e3ca:	4668      	mov	r0, sp
 800e3cc:	9300      	str	r3, [sp, #0]
 800e3ce:	f7ff fd14 	bl	800ddfa <__lo0bits>
 800e3d2:	e9dd 1200 	ldrd	r1, r2, [sp]
 800e3d6:	b1d0      	cbz	r0, 800e40e <__d2b+0x7e>
 800e3d8:	f1c0 0320 	rsb	r3, r0, #32
 800e3dc:	fa02 f303 	lsl.w	r3, r2, r3
 800e3e0:	430b      	orrs	r3, r1
 800e3e2:	40c2      	lsrs	r2, r0
 800e3e4:	6163      	str	r3, [r4, #20]
 800e3e6:	9201      	str	r2, [sp, #4]
 800e3e8:	9b01      	ldr	r3, [sp, #4]
 800e3ea:	61a3      	str	r3, [r4, #24]
 800e3ec:	2b00      	cmp	r3, #0
 800e3ee:	bf0c      	ite	eq
 800e3f0:	2201      	moveq	r2, #1
 800e3f2:	2202      	movne	r2, #2
 800e3f4:	6122      	str	r2, [r4, #16]
 800e3f6:	b1a5      	cbz	r5, 800e422 <__d2b+0x92>
 800e3f8:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800e3fc:	4405      	add	r5, r0
 800e3fe:	603d      	str	r5, [r7, #0]
 800e400:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800e404:	6030      	str	r0, [r6, #0]
 800e406:	4620      	mov	r0, r4
 800e408:	b003      	add	sp, #12
 800e40a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e40e:	6161      	str	r1, [r4, #20]
 800e410:	e7ea      	b.n	800e3e8 <__d2b+0x58>
 800e412:	a801      	add	r0, sp, #4
 800e414:	f7ff fcf1 	bl	800ddfa <__lo0bits>
 800e418:	9b01      	ldr	r3, [sp, #4]
 800e41a:	6163      	str	r3, [r4, #20]
 800e41c:	3020      	adds	r0, #32
 800e41e:	2201      	movs	r2, #1
 800e420:	e7e8      	b.n	800e3f4 <__d2b+0x64>
 800e422:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800e426:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800e42a:	6038      	str	r0, [r7, #0]
 800e42c:	6918      	ldr	r0, [r3, #16]
 800e42e:	f7ff fcc5 	bl	800ddbc <__hi0bits>
 800e432:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800e436:	e7e5      	b.n	800e404 <__d2b+0x74>
 800e438:	08011bd5 	.word	0x08011bd5
 800e43c:	08011be6 	.word	0x08011be6

0800e440 <__ratio>:
 800e440:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e444:	b085      	sub	sp, #20
 800e446:	e9cd 1000 	strd	r1, r0, [sp]
 800e44a:	a902      	add	r1, sp, #8
 800e44c:	f7ff ff56 	bl	800e2fc <__b2d>
 800e450:	9800      	ldr	r0, [sp, #0]
 800e452:	a903      	add	r1, sp, #12
 800e454:	ec55 4b10 	vmov	r4, r5, d0
 800e458:	f7ff ff50 	bl	800e2fc <__b2d>
 800e45c:	9b01      	ldr	r3, [sp, #4]
 800e45e:	6919      	ldr	r1, [r3, #16]
 800e460:	9b00      	ldr	r3, [sp, #0]
 800e462:	691b      	ldr	r3, [r3, #16]
 800e464:	1ac9      	subs	r1, r1, r3
 800e466:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800e46a:	1a9b      	subs	r3, r3, r2
 800e46c:	ec5b ab10 	vmov	sl, fp, d0
 800e470:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800e474:	2b00      	cmp	r3, #0
 800e476:	bfce      	itee	gt
 800e478:	462a      	movgt	r2, r5
 800e47a:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800e47e:	465a      	movle	r2, fp
 800e480:	462f      	mov	r7, r5
 800e482:	46d9      	mov	r9, fp
 800e484:	bfcc      	ite	gt
 800e486:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800e48a:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800e48e:	464b      	mov	r3, r9
 800e490:	4652      	mov	r2, sl
 800e492:	4620      	mov	r0, r4
 800e494:	4639      	mov	r1, r7
 800e496:	f7f2 f9e1 	bl	800085c <__aeabi_ddiv>
 800e49a:	ec41 0b10 	vmov	d0, r0, r1
 800e49e:	b005      	add	sp, #20
 800e4a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800e4a4 <__copybits>:
 800e4a4:	3901      	subs	r1, #1
 800e4a6:	b570      	push	{r4, r5, r6, lr}
 800e4a8:	1149      	asrs	r1, r1, #5
 800e4aa:	6914      	ldr	r4, [r2, #16]
 800e4ac:	3101      	adds	r1, #1
 800e4ae:	f102 0314 	add.w	r3, r2, #20
 800e4b2:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800e4b6:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800e4ba:	1f05      	subs	r5, r0, #4
 800e4bc:	42a3      	cmp	r3, r4
 800e4be:	d30c      	bcc.n	800e4da <__copybits+0x36>
 800e4c0:	1aa3      	subs	r3, r4, r2
 800e4c2:	3b11      	subs	r3, #17
 800e4c4:	f023 0303 	bic.w	r3, r3, #3
 800e4c8:	3211      	adds	r2, #17
 800e4ca:	42a2      	cmp	r2, r4
 800e4cc:	bf88      	it	hi
 800e4ce:	2300      	movhi	r3, #0
 800e4d0:	4418      	add	r0, r3
 800e4d2:	2300      	movs	r3, #0
 800e4d4:	4288      	cmp	r0, r1
 800e4d6:	d305      	bcc.n	800e4e4 <__copybits+0x40>
 800e4d8:	bd70      	pop	{r4, r5, r6, pc}
 800e4da:	f853 6b04 	ldr.w	r6, [r3], #4
 800e4de:	f845 6f04 	str.w	r6, [r5, #4]!
 800e4e2:	e7eb      	b.n	800e4bc <__copybits+0x18>
 800e4e4:	f840 3b04 	str.w	r3, [r0], #4
 800e4e8:	e7f4      	b.n	800e4d4 <__copybits+0x30>

0800e4ea <__any_on>:
 800e4ea:	f100 0214 	add.w	r2, r0, #20
 800e4ee:	6900      	ldr	r0, [r0, #16]
 800e4f0:	114b      	asrs	r3, r1, #5
 800e4f2:	4298      	cmp	r0, r3
 800e4f4:	b510      	push	{r4, lr}
 800e4f6:	db11      	blt.n	800e51c <__any_on+0x32>
 800e4f8:	dd0a      	ble.n	800e510 <__any_on+0x26>
 800e4fa:	f011 011f 	ands.w	r1, r1, #31
 800e4fe:	d007      	beq.n	800e510 <__any_on+0x26>
 800e500:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800e504:	fa24 f001 	lsr.w	r0, r4, r1
 800e508:	fa00 f101 	lsl.w	r1, r0, r1
 800e50c:	428c      	cmp	r4, r1
 800e50e:	d10b      	bne.n	800e528 <__any_on+0x3e>
 800e510:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800e514:	4293      	cmp	r3, r2
 800e516:	d803      	bhi.n	800e520 <__any_on+0x36>
 800e518:	2000      	movs	r0, #0
 800e51a:	bd10      	pop	{r4, pc}
 800e51c:	4603      	mov	r3, r0
 800e51e:	e7f7      	b.n	800e510 <__any_on+0x26>
 800e520:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800e524:	2900      	cmp	r1, #0
 800e526:	d0f5      	beq.n	800e514 <__any_on+0x2a>
 800e528:	2001      	movs	r0, #1
 800e52a:	e7f6      	b.n	800e51a <__any_on+0x30>

0800e52c <sulp>:
 800e52c:	b570      	push	{r4, r5, r6, lr}
 800e52e:	4604      	mov	r4, r0
 800e530:	460d      	mov	r5, r1
 800e532:	ec45 4b10 	vmov	d0, r4, r5
 800e536:	4616      	mov	r6, r2
 800e538:	f7ff feba 	bl	800e2b0 <__ulp>
 800e53c:	ec51 0b10 	vmov	r0, r1, d0
 800e540:	b17e      	cbz	r6, 800e562 <sulp+0x36>
 800e542:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800e546:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800e54a:	2b00      	cmp	r3, #0
 800e54c:	dd09      	ble.n	800e562 <sulp+0x36>
 800e54e:	051b      	lsls	r3, r3, #20
 800e550:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800e554:	2400      	movs	r4, #0
 800e556:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800e55a:	4622      	mov	r2, r4
 800e55c:	462b      	mov	r3, r5
 800e55e:	f7f2 f853 	bl	8000608 <__aeabi_dmul>
 800e562:	ec41 0b10 	vmov	d0, r0, r1
 800e566:	bd70      	pop	{r4, r5, r6, pc}

0800e568 <_strtod_l>:
 800e568:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e56c:	b09f      	sub	sp, #124	@ 0x7c
 800e56e:	460c      	mov	r4, r1
 800e570:	9217      	str	r2, [sp, #92]	@ 0x5c
 800e572:	2200      	movs	r2, #0
 800e574:	921a      	str	r2, [sp, #104]	@ 0x68
 800e576:	9005      	str	r0, [sp, #20]
 800e578:	f04f 0a00 	mov.w	sl, #0
 800e57c:	f04f 0b00 	mov.w	fp, #0
 800e580:	460a      	mov	r2, r1
 800e582:	9219      	str	r2, [sp, #100]	@ 0x64
 800e584:	7811      	ldrb	r1, [r2, #0]
 800e586:	292b      	cmp	r1, #43	@ 0x2b
 800e588:	d04a      	beq.n	800e620 <_strtod_l+0xb8>
 800e58a:	d838      	bhi.n	800e5fe <_strtod_l+0x96>
 800e58c:	290d      	cmp	r1, #13
 800e58e:	d832      	bhi.n	800e5f6 <_strtod_l+0x8e>
 800e590:	2908      	cmp	r1, #8
 800e592:	d832      	bhi.n	800e5fa <_strtod_l+0x92>
 800e594:	2900      	cmp	r1, #0
 800e596:	d03b      	beq.n	800e610 <_strtod_l+0xa8>
 800e598:	2200      	movs	r2, #0
 800e59a:	920e      	str	r2, [sp, #56]	@ 0x38
 800e59c:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800e59e:	782a      	ldrb	r2, [r5, #0]
 800e5a0:	2a30      	cmp	r2, #48	@ 0x30
 800e5a2:	f040 80b2 	bne.w	800e70a <_strtod_l+0x1a2>
 800e5a6:	786a      	ldrb	r2, [r5, #1]
 800e5a8:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800e5ac:	2a58      	cmp	r2, #88	@ 0x58
 800e5ae:	d16e      	bne.n	800e68e <_strtod_l+0x126>
 800e5b0:	9302      	str	r3, [sp, #8]
 800e5b2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e5b4:	9301      	str	r3, [sp, #4]
 800e5b6:	ab1a      	add	r3, sp, #104	@ 0x68
 800e5b8:	9300      	str	r3, [sp, #0]
 800e5ba:	4a8f      	ldr	r2, [pc, #572]	@ (800e7f8 <_strtod_l+0x290>)
 800e5bc:	9805      	ldr	r0, [sp, #20]
 800e5be:	ab1b      	add	r3, sp, #108	@ 0x6c
 800e5c0:	a919      	add	r1, sp, #100	@ 0x64
 800e5c2:	f001 fadb 	bl	800fb7c <__gethex>
 800e5c6:	f010 060f 	ands.w	r6, r0, #15
 800e5ca:	4604      	mov	r4, r0
 800e5cc:	d005      	beq.n	800e5da <_strtod_l+0x72>
 800e5ce:	2e06      	cmp	r6, #6
 800e5d0:	d128      	bne.n	800e624 <_strtod_l+0xbc>
 800e5d2:	3501      	adds	r5, #1
 800e5d4:	2300      	movs	r3, #0
 800e5d6:	9519      	str	r5, [sp, #100]	@ 0x64
 800e5d8:	930e      	str	r3, [sp, #56]	@ 0x38
 800e5da:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800e5dc:	2b00      	cmp	r3, #0
 800e5de:	f040 858e 	bne.w	800f0fe <_strtod_l+0xb96>
 800e5e2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e5e4:	b1cb      	cbz	r3, 800e61a <_strtod_l+0xb2>
 800e5e6:	4652      	mov	r2, sl
 800e5e8:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800e5ec:	ec43 2b10 	vmov	d0, r2, r3
 800e5f0:	b01f      	add	sp, #124	@ 0x7c
 800e5f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e5f6:	2920      	cmp	r1, #32
 800e5f8:	d1ce      	bne.n	800e598 <_strtod_l+0x30>
 800e5fa:	3201      	adds	r2, #1
 800e5fc:	e7c1      	b.n	800e582 <_strtod_l+0x1a>
 800e5fe:	292d      	cmp	r1, #45	@ 0x2d
 800e600:	d1ca      	bne.n	800e598 <_strtod_l+0x30>
 800e602:	2101      	movs	r1, #1
 800e604:	910e      	str	r1, [sp, #56]	@ 0x38
 800e606:	1c51      	adds	r1, r2, #1
 800e608:	9119      	str	r1, [sp, #100]	@ 0x64
 800e60a:	7852      	ldrb	r2, [r2, #1]
 800e60c:	2a00      	cmp	r2, #0
 800e60e:	d1c5      	bne.n	800e59c <_strtod_l+0x34>
 800e610:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800e612:	9419      	str	r4, [sp, #100]	@ 0x64
 800e614:	2b00      	cmp	r3, #0
 800e616:	f040 8570 	bne.w	800f0fa <_strtod_l+0xb92>
 800e61a:	4652      	mov	r2, sl
 800e61c:	465b      	mov	r3, fp
 800e61e:	e7e5      	b.n	800e5ec <_strtod_l+0x84>
 800e620:	2100      	movs	r1, #0
 800e622:	e7ef      	b.n	800e604 <_strtod_l+0x9c>
 800e624:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800e626:	b13a      	cbz	r2, 800e638 <_strtod_l+0xd0>
 800e628:	2135      	movs	r1, #53	@ 0x35
 800e62a:	a81c      	add	r0, sp, #112	@ 0x70
 800e62c:	f7ff ff3a 	bl	800e4a4 <__copybits>
 800e630:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800e632:	9805      	ldr	r0, [sp, #20]
 800e634:	f7ff fb10 	bl	800dc58 <_Bfree>
 800e638:	3e01      	subs	r6, #1
 800e63a:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800e63c:	2e04      	cmp	r6, #4
 800e63e:	d806      	bhi.n	800e64e <_strtod_l+0xe6>
 800e640:	e8df f006 	tbb	[pc, r6]
 800e644:	201d0314 	.word	0x201d0314
 800e648:	14          	.byte	0x14
 800e649:	00          	.byte	0x00
 800e64a:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800e64e:	05e1      	lsls	r1, r4, #23
 800e650:	bf48      	it	mi
 800e652:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800e656:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800e65a:	0d1b      	lsrs	r3, r3, #20
 800e65c:	051b      	lsls	r3, r3, #20
 800e65e:	2b00      	cmp	r3, #0
 800e660:	d1bb      	bne.n	800e5da <_strtod_l+0x72>
 800e662:	f7fe faff 	bl	800cc64 <__errno>
 800e666:	2322      	movs	r3, #34	@ 0x22
 800e668:	6003      	str	r3, [r0, #0]
 800e66a:	e7b6      	b.n	800e5da <_strtod_l+0x72>
 800e66c:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800e670:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800e674:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800e678:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800e67c:	e7e7      	b.n	800e64e <_strtod_l+0xe6>
 800e67e:	f8df b180 	ldr.w	fp, [pc, #384]	@ 800e800 <_strtod_l+0x298>
 800e682:	e7e4      	b.n	800e64e <_strtod_l+0xe6>
 800e684:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800e688:	f04f 3aff 	mov.w	sl, #4294967295
 800e68c:	e7df      	b.n	800e64e <_strtod_l+0xe6>
 800e68e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800e690:	1c5a      	adds	r2, r3, #1
 800e692:	9219      	str	r2, [sp, #100]	@ 0x64
 800e694:	785b      	ldrb	r3, [r3, #1]
 800e696:	2b30      	cmp	r3, #48	@ 0x30
 800e698:	d0f9      	beq.n	800e68e <_strtod_l+0x126>
 800e69a:	2b00      	cmp	r3, #0
 800e69c:	d09d      	beq.n	800e5da <_strtod_l+0x72>
 800e69e:	2301      	movs	r3, #1
 800e6a0:	2700      	movs	r7, #0
 800e6a2:	9308      	str	r3, [sp, #32]
 800e6a4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800e6a6:	930c      	str	r3, [sp, #48]	@ 0x30
 800e6a8:	970b      	str	r7, [sp, #44]	@ 0x2c
 800e6aa:	46b9      	mov	r9, r7
 800e6ac:	220a      	movs	r2, #10
 800e6ae:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800e6b0:	7805      	ldrb	r5, [r0, #0]
 800e6b2:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800e6b6:	b2d9      	uxtb	r1, r3
 800e6b8:	2909      	cmp	r1, #9
 800e6ba:	d928      	bls.n	800e70e <_strtod_l+0x1a6>
 800e6bc:	494f      	ldr	r1, [pc, #316]	@ (800e7fc <_strtod_l+0x294>)
 800e6be:	2201      	movs	r2, #1
 800e6c0:	f001 f98c 	bl	800f9dc <strncmp>
 800e6c4:	2800      	cmp	r0, #0
 800e6c6:	d032      	beq.n	800e72e <_strtod_l+0x1c6>
 800e6c8:	2000      	movs	r0, #0
 800e6ca:	462a      	mov	r2, r5
 800e6cc:	900a      	str	r0, [sp, #40]	@ 0x28
 800e6ce:	464d      	mov	r5, r9
 800e6d0:	4603      	mov	r3, r0
 800e6d2:	2a65      	cmp	r2, #101	@ 0x65
 800e6d4:	d001      	beq.n	800e6da <_strtod_l+0x172>
 800e6d6:	2a45      	cmp	r2, #69	@ 0x45
 800e6d8:	d114      	bne.n	800e704 <_strtod_l+0x19c>
 800e6da:	b91d      	cbnz	r5, 800e6e4 <_strtod_l+0x17c>
 800e6dc:	9a08      	ldr	r2, [sp, #32]
 800e6de:	4302      	orrs	r2, r0
 800e6e0:	d096      	beq.n	800e610 <_strtod_l+0xa8>
 800e6e2:	2500      	movs	r5, #0
 800e6e4:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800e6e6:	1c62      	adds	r2, r4, #1
 800e6e8:	9219      	str	r2, [sp, #100]	@ 0x64
 800e6ea:	7862      	ldrb	r2, [r4, #1]
 800e6ec:	2a2b      	cmp	r2, #43	@ 0x2b
 800e6ee:	d07a      	beq.n	800e7e6 <_strtod_l+0x27e>
 800e6f0:	2a2d      	cmp	r2, #45	@ 0x2d
 800e6f2:	d07e      	beq.n	800e7f2 <_strtod_l+0x28a>
 800e6f4:	f04f 0c00 	mov.w	ip, #0
 800e6f8:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800e6fc:	2909      	cmp	r1, #9
 800e6fe:	f240 8085 	bls.w	800e80c <_strtod_l+0x2a4>
 800e702:	9419      	str	r4, [sp, #100]	@ 0x64
 800e704:	f04f 0800 	mov.w	r8, #0
 800e708:	e0a5      	b.n	800e856 <_strtod_l+0x2ee>
 800e70a:	2300      	movs	r3, #0
 800e70c:	e7c8      	b.n	800e6a0 <_strtod_l+0x138>
 800e70e:	f1b9 0f08 	cmp.w	r9, #8
 800e712:	bfd8      	it	le
 800e714:	990b      	ldrle	r1, [sp, #44]	@ 0x2c
 800e716:	f100 0001 	add.w	r0, r0, #1
 800e71a:	bfda      	itte	le
 800e71c:	fb02 3301 	mlale	r3, r2, r1, r3
 800e720:	930b      	strle	r3, [sp, #44]	@ 0x2c
 800e722:	fb02 3707 	mlagt	r7, r2, r7, r3
 800e726:	f109 0901 	add.w	r9, r9, #1
 800e72a:	9019      	str	r0, [sp, #100]	@ 0x64
 800e72c:	e7bf      	b.n	800e6ae <_strtod_l+0x146>
 800e72e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800e730:	1c5a      	adds	r2, r3, #1
 800e732:	9219      	str	r2, [sp, #100]	@ 0x64
 800e734:	785a      	ldrb	r2, [r3, #1]
 800e736:	f1b9 0f00 	cmp.w	r9, #0
 800e73a:	d03b      	beq.n	800e7b4 <_strtod_l+0x24c>
 800e73c:	900a      	str	r0, [sp, #40]	@ 0x28
 800e73e:	464d      	mov	r5, r9
 800e740:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800e744:	2b09      	cmp	r3, #9
 800e746:	d912      	bls.n	800e76e <_strtod_l+0x206>
 800e748:	2301      	movs	r3, #1
 800e74a:	e7c2      	b.n	800e6d2 <_strtod_l+0x16a>
 800e74c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800e74e:	1c5a      	adds	r2, r3, #1
 800e750:	9219      	str	r2, [sp, #100]	@ 0x64
 800e752:	785a      	ldrb	r2, [r3, #1]
 800e754:	3001      	adds	r0, #1
 800e756:	2a30      	cmp	r2, #48	@ 0x30
 800e758:	d0f8      	beq.n	800e74c <_strtod_l+0x1e4>
 800e75a:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800e75e:	2b08      	cmp	r3, #8
 800e760:	f200 84d2 	bhi.w	800f108 <_strtod_l+0xba0>
 800e764:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800e766:	900a      	str	r0, [sp, #40]	@ 0x28
 800e768:	2000      	movs	r0, #0
 800e76a:	930c      	str	r3, [sp, #48]	@ 0x30
 800e76c:	4605      	mov	r5, r0
 800e76e:	3a30      	subs	r2, #48	@ 0x30
 800e770:	f100 0301 	add.w	r3, r0, #1
 800e774:	d018      	beq.n	800e7a8 <_strtod_l+0x240>
 800e776:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800e778:	4419      	add	r1, r3
 800e77a:	910a      	str	r1, [sp, #40]	@ 0x28
 800e77c:	462e      	mov	r6, r5
 800e77e:	f04f 0e0a 	mov.w	lr, #10
 800e782:	1c71      	adds	r1, r6, #1
 800e784:	eba1 0c05 	sub.w	ip, r1, r5
 800e788:	4563      	cmp	r3, ip
 800e78a:	dc15      	bgt.n	800e7b8 <_strtod_l+0x250>
 800e78c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 800e790:	182b      	adds	r3, r5, r0
 800e792:	2b08      	cmp	r3, #8
 800e794:	f105 0501 	add.w	r5, r5, #1
 800e798:	4405      	add	r5, r0
 800e79a:	dc1a      	bgt.n	800e7d2 <_strtod_l+0x26a>
 800e79c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800e79e:	230a      	movs	r3, #10
 800e7a0:	fb03 2301 	mla	r3, r3, r1, r2
 800e7a4:	930b      	str	r3, [sp, #44]	@ 0x2c
 800e7a6:	2300      	movs	r3, #0
 800e7a8:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800e7aa:	1c51      	adds	r1, r2, #1
 800e7ac:	9119      	str	r1, [sp, #100]	@ 0x64
 800e7ae:	7852      	ldrb	r2, [r2, #1]
 800e7b0:	4618      	mov	r0, r3
 800e7b2:	e7c5      	b.n	800e740 <_strtod_l+0x1d8>
 800e7b4:	4648      	mov	r0, r9
 800e7b6:	e7ce      	b.n	800e756 <_strtod_l+0x1ee>
 800e7b8:	2e08      	cmp	r6, #8
 800e7ba:	dc05      	bgt.n	800e7c8 <_strtod_l+0x260>
 800e7bc:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800e7be:	fb0e f606 	mul.w	r6, lr, r6
 800e7c2:	960b      	str	r6, [sp, #44]	@ 0x2c
 800e7c4:	460e      	mov	r6, r1
 800e7c6:	e7dc      	b.n	800e782 <_strtod_l+0x21a>
 800e7c8:	2910      	cmp	r1, #16
 800e7ca:	bfd8      	it	le
 800e7cc:	fb0e f707 	mulle.w	r7, lr, r7
 800e7d0:	e7f8      	b.n	800e7c4 <_strtod_l+0x25c>
 800e7d2:	2b0f      	cmp	r3, #15
 800e7d4:	bfdc      	itt	le
 800e7d6:	230a      	movle	r3, #10
 800e7d8:	fb03 2707 	mlale	r7, r3, r7, r2
 800e7dc:	e7e3      	b.n	800e7a6 <_strtod_l+0x23e>
 800e7de:	2300      	movs	r3, #0
 800e7e0:	930a      	str	r3, [sp, #40]	@ 0x28
 800e7e2:	2301      	movs	r3, #1
 800e7e4:	e77a      	b.n	800e6dc <_strtod_l+0x174>
 800e7e6:	f04f 0c00 	mov.w	ip, #0
 800e7ea:	1ca2      	adds	r2, r4, #2
 800e7ec:	9219      	str	r2, [sp, #100]	@ 0x64
 800e7ee:	78a2      	ldrb	r2, [r4, #2]
 800e7f0:	e782      	b.n	800e6f8 <_strtod_l+0x190>
 800e7f2:	f04f 0c01 	mov.w	ip, #1
 800e7f6:	e7f8      	b.n	800e7ea <_strtod_l+0x282>
 800e7f8:	08011dcc 	.word	0x08011dcc
 800e7fc:	08011c3f 	.word	0x08011c3f
 800e800:	7ff00000 	.word	0x7ff00000
 800e804:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800e806:	1c51      	adds	r1, r2, #1
 800e808:	9119      	str	r1, [sp, #100]	@ 0x64
 800e80a:	7852      	ldrb	r2, [r2, #1]
 800e80c:	2a30      	cmp	r2, #48	@ 0x30
 800e80e:	d0f9      	beq.n	800e804 <_strtod_l+0x29c>
 800e810:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800e814:	2908      	cmp	r1, #8
 800e816:	f63f af75 	bhi.w	800e704 <_strtod_l+0x19c>
 800e81a:	3a30      	subs	r2, #48	@ 0x30
 800e81c:	9209      	str	r2, [sp, #36]	@ 0x24
 800e81e:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800e820:	920f      	str	r2, [sp, #60]	@ 0x3c
 800e822:	f04f 080a 	mov.w	r8, #10
 800e826:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800e828:	1c56      	adds	r6, r2, #1
 800e82a:	9619      	str	r6, [sp, #100]	@ 0x64
 800e82c:	7852      	ldrb	r2, [r2, #1]
 800e82e:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800e832:	f1be 0f09 	cmp.w	lr, #9
 800e836:	d939      	bls.n	800e8ac <_strtod_l+0x344>
 800e838:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800e83a:	1a76      	subs	r6, r6, r1
 800e83c:	2e08      	cmp	r6, #8
 800e83e:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800e842:	dc03      	bgt.n	800e84c <_strtod_l+0x2e4>
 800e844:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800e846:	4588      	cmp	r8, r1
 800e848:	bfa8      	it	ge
 800e84a:	4688      	movge	r8, r1
 800e84c:	f1bc 0f00 	cmp.w	ip, #0
 800e850:	d001      	beq.n	800e856 <_strtod_l+0x2ee>
 800e852:	f1c8 0800 	rsb	r8, r8, #0
 800e856:	2d00      	cmp	r5, #0
 800e858:	d14e      	bne.n	800e8f8 <_strtod_l+0x390>
 800e85a:	9908      	ldr	r1, [sp, #32]
 800e85c:	4308      	orrs	r0, r1
 800e85e:	f47f aebc 	bne.w	800e5da <_strtod_l+0x72>
 800e862:	2b00      	cmp	r3, #0
 800e864:	f47f aed4 	bne.w	800e610 <_strtod_l+0xa8>
 800e868:	2a69      	cmp	r2, #105	@ 0x69
 800e86a:	d028      	beq.n	800e8be <_strtod_l+0x356>
 800e86c:	dc25      	bgt.n	800e8ba <_strtod_l+0x352>
 800e86e:	2a49      	cmp	r2, #73	@ 0x49
 800e870:	d025      	beq.n	800e8be <_strtod_l+0x356>
 800e872:	2a4e      	cmp	r2, #78	@ 0x4e
 800e874:	f47f aecc 	bne.w	800e610 <_strtod_l+0xa8>
 800e878:	499a      	ldr	r1, [pc, #616]	@ (800eae4 <_strtod_l+0x57c>)
 800e87a:	a819      	add	r0, sp, #100	@ 0x64
 800e87c:	f001 fba0 	bl	800ffc0 <__match>
 800e880:	2800      	cmp	r0, #0
 800e882:	f43f aec5 	beq.w	800e610 <_strtod_l+0xa8>
 800e886:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800e888:	781b      	ldrb	r3, [r3, #0]
 800e88a:	2b28      	cmp	r3, #40	@ 0x28
 800e88c:	d12e      	bne.n	800e8ec <_strtod_l+0x384>
 800e88e:	4996      	ldr	r1, [pc, #600]	@ (800eae8 <_strtod_l+0x580>)
 800e890:	aa1c      	add	r2, sp, #112	@ 0x70
 800e892:	a819      	add	r0, sp, #100	@ 0x64
 800e894:	f001 fba8 	bl	800ffe8 <__hexnan>
 800e898:	2805      	cmp	r0, #5
 800e89a:	d127      	bne.n	800e8ec <_strtod_l+0x384>
 800e89c:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800e89e:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800e8a2:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800e8a6:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800e8aa:	e696      	b.n	800e5da <_strtod_l+0x72>
 800e8ac:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800e8ae:	fb08 2101 	mla	r1, r8, r1, r2
 800e8b2:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800e8b6:	9209      	str	r2, [sp, #36]	@ 0x24
 800e8b8:	e7b5      	b.n	800e826 <_strtod_l+0x2be>
 800e8ba:	2a6e      	cmp	r2, #110	@ 0x6e
 800e8bc:	e7da      	b.n	800e874 <_strtod_l+0x30c>
 800e8be:	498b      	ldr	r1, [pc, #556]	@ (800eaec <_strtod_l+0x584>)
 800e8c0:	a819      	add	r0, sp, #100	@ 0x64
 800e8c2:	f001 fb7d 	bl	800ffc0 <__match>
 800e8c6:	2800      	cmp	r0, #0
 800e8c8:	f43f aea2 	beq.w	800e610 <_strtod_l+0xa8>
 800e8cc:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800e8ce:	4988      	ldr	r1, [pc, #544]	@ (800eaf0 <_strtod_l+0x588>)
 800e8d0:	3b01      	subs	r3, #1
 800e8d2:	a819      	add	r0, sp, #100	@ 0x64
 800e8d4:	9319      	str	r3, [sp, #100]	@ 0x64
 800e8d6:	f001 fb73 	bl	800ffc0 <__match>
 800e8da:	b910      	cbnz	r0, 800e8e2 <_strtod_l+0x37a>
 800e8dc:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800e8de:	3301      	adds	r3, #1
 800e8e0:	9319      	str	r3, [sp, #100]	@ 0x64
 800e8e2:	f8df b21c 	ldr.w	fp, [pc, #540]	@ 800eb00 <_strtod_l+0x598>
 800e8e6:	f04f 0a00 	mov.w	sl, #0
 800e8ea:	e676      	b.n	800e5da <_strtod_l+0x72>
 800e8ec:	4881      	ldr	r0, [pc, #516]	@ (800eaf4 <_strtod_l+0x58c>)
 800e8ee:	f001 f8bb 	bl	800fa68 <nan>
 800e8f2:	ec5b ab10 	vmov	sl, fp, d0
 800e8f6:	e670      	b.n	800e5da <_strtod_l+0x72>
 800e8f8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e8fa:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 800e8fc:	eba8 0303 	sub.w	r3, r8, r3
 800e900:	f1b9 0f00 	cmp.w	r9, #0
 800e904:	bf08      	it	eq
 800e906:	46a9      	moveq	r9, r5
 800e908:	2d10      	cmp	r5, #16
 800e90a:	9309      	str	r3, [sp, #36]	@ 0x24
 800e90c:	462c      	mov	r4, r5
 800e90e:	bfa8      	it	ge
 800e910:	2410      	movge	r4, #16
 800e912:	f7f1 fdff 	bl	8000514 <__aeabi_ui2d>
 800e916:	2d09      	cmp	r5, #9
 800e918:	4682      	mov	sl, r0
 800e91a:	468b      	mov	fp, r1
 800e91c:	dc13      	bgt.n	800e946 <_strtod_l+0x3de>
 800e91e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e920:	2b00      	cmp	r3, #0
 800e922:	f43f ae5a 	beq.w	800e5da <_strtod_l+0x72>
 800e926:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e928:	dd78      	ble.n	800ea1c <_strtod_l+0x4b4>
 800e92a:	2b16      	cmp	r3, #22
 800e92c:	dc5f      	bgt.n	800e9ee <_strtod_l+0x486>
 800e92e:	4972      	ldr	r1, [pc, #456]	@ (800eaf8 <_strtod_l+0x590>)
 800e930:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800e934:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e938:	4652      	mov	r2, sl
 800e93a:	465b      	mov	r3, fp
 800e93c:	f7f1 fe64 	bl	8000608 <__aeabi_dmul>
 800e940:	4682      	mov	sl, r0
 800e942:	468b      	mov	fp, r1
 800e944:	e649      	b.n	800e5da <_strtod_l+0x72>
 800e946:	4b6c      	ldr	r3, [pc, #432]	@ (800eaf8 <_strtod_l+0x590>)
 800e948:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800e94c:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800e950:	f7f1 fe5a 	bl	8000608 <__aeabi_dmul>
 800e954:	4682      	mov	sl, r0
 800e956:	4638      	mov	r0, r7
 800e958:	468b      	mov	fp, r1
 800e95a:	f7f1 fddb 	bl	8000514 <__aeabi_ui2d>
 800e95e:	4602      	mov	r2, r0
 800e960:	460b      	mov	r3, r1
 800e962:	4650      	mov	r0, sl
 800e964:	4659      	mov	r1, fp
 800e966:	f7f1 fc99 	bl	800029c <__adddf3>
 800e96a:	2d0f      	cmp	r5, #15
 800e96c:	4682      	mov	sl, r0
 800e96e:	468b      	mov	fp, r1
 800e970:	ddd5      	ble.n	800e91e <_strtod_l+0x3b6>
 800e972:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e974:	1b2c      	subs	r4, r5, r4
 800e976:	441c      	add	r4, r3
 800e978:	2c00      	cmp	r4, #0
 800e97a:	f340 8093 	ble.w	800eaa4 <_strtod_l+0x53c>
 800e97e:	f014 030f 	ands.w	r3, r4, #15
 800e982:	d00a      	beq.n	800e99a <_strtod_l+0x432>
 800e984:	495c      	ldr	r1, [pc, #368]	@ (800eaf8 <_strtod_l+0x590>)
 800e986:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800e98a:	4652      	mov	r2, sl
 800e98c:	465b      	mov	r3, fp
 800e98e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e992:	f7f1 fe39 	bl	8000608 <__aeabi_dmul>
 800e996:	4682      	mov	sl, r0
 800e998:	468b      	mov	fp, r1
 800e99a:	f034 040f 	bics.w	r4, r4, #15
 800e99e:	d073      	beq.n	800ea88 <_strtod_l+0x520>
 800e9a0:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800e9a4:	dd49      	ble.n	800ea3a <_strtod_l+0x4d2>
 800e9a6:	2400      	movs	r4, #0
 800e9a8:	46a0      	mov	r8, r4
 800e9aa:	940b      	str	r4, [sp, #44]	@ 0x2c
 800e9ac:	46a1      	mov	r9, r4
 800e9ae:	9a05      	ldr	r2, [sp, #20]
 800e9b0:	f8df b14c 	ldr.w	fp, [pc, #332]	@ 800eb00 <_strtod_l+0x598>
 800e9b4:	2322      	movs	r3, #34	@ 0x22
 800e9b6:	6013      	str	r3, [r2, #0]
 800e9b8:	f04f 0a00 	mov.w	sl, #0
 800e9bc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e9be:	2b00      	cmp	r3, #0
 800e9c0:	f43f ae0b 	beq.w	800e5da <_strtod_l+0x72>
 800e9c4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800e9c6:	9805      	ldr	r0, [sp, #20]
 800e9c8:	f7ff f946 	bl	800dc58 <_Bfree>
 800e9cc:	9805      	ldr	r0, [sp, #20]
 800e9ce:	4649      	mov	r1, r9
 800e9d0:	f7ff f942 	bl	800dc58 <_Bfree>
 800e9d4:	9805      	ldr	r0, [sp, #20]
 800e9d6:	4641      	mov	r1, r8
 800e9d8:	f7ff f93e 	bl	800dc58 <_Bfree>
 800e9dc:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800e9de:	9805      	ldr	r0, [sp, #20]
 800e9e0:	f7ff f93a 	bl	800dc58 <_Bfree>
 800e9e4:	9805      	ldr	r0, [sp, #20]
 800e9e6:	4621      	mov	r1, r4
 800e9e8:	f7ff f936 	bl	800dc58 <_Bfree>
 800e9ec:	e5f5      	b.n	800e5da <_strtod_l+0x72>
 800e9ee:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e9f0:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800e9f4:	4293      	cmp	r3, r2
 800e9f6:	dbbc      	blt.n	800e972 <_strtod_l+0x40a>
 800e9f8:	4c3f      	ldr	r4, [pc, #252]	@ (800eaf8 <_strtod_l+0x590>)
 800e9fa:	f1c5 050f 	rsb	r5, r5, #15
 800e9fe:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800ea02:	4652      	mov	r2, sl
 800ea04:	465b      	mov	r3, fp
 800ea06:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ea0a:	f7f1 fdfd 	bl	8000608 <__aeabi_dmul>
 800ea0e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ea10:	1b5d      	subs	r5, r3, r5
 800ea12:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800ea16:	e9d4 2300 	ldrd	r2, r3, [r4]
 800ea1a:	e78f      	b.n	800e93c <_strtod_l+0x3d4>
 800ea1c:	3316      	adds	r3, #22
 800ea1e:	dba8      	blt.n	800e972 <_strtod_l+0x40a>
 800ea20:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ea22:	eba3 0808 	sub.w	r8, r3, r8
 800ea26:	4b34      	ldr	r3, [pc, #208]	@ (800eaf8 <_strtod_l+0x590>)
 800ea28:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800ea2c:	e9d8 2300 	ldrd	r2, r3, [r8]
 800ea30:	4650      	mov	r0, sl
 800ea32:	4659      	mov	r1, fp
 800ea34:	f7f1 ff12 	bl	800085c <__aeabi_ddiv>
 800ea38:	e782      	b.n	800e940 <_strtod_l+0x3d8>
 800ea3a:	2300      	movs	r3, #0
 800ea3c:	4f2f      	ldr	r7, [pc, #188]	@ (800eafc <_strtod_l+0x594>)
 800ea3e:	1124      	asrs	r4, r4, #4
 800ea40:	4650      	mov	r0, sl
 800ea42:	4659      	mov	r1, fp
 800ea44:	461e      	mov	r6, r3
 800ea46:	2c01      	cmp	r4, #1
 800ea48:	dc21      	bgt.n	800ea8e <_strtod_l+0x526>
 800ea4a:	b10b      	cbz	r3, 800ea50 <_strtod_l+0x4e8>
 800ea4c:	4682      	mov	sl, r0
 800ea4e:	468b      	mov	fp, r1
 800ea50:	492a      	ldr	r1, [pc, #168]	@ (800eafc <_strtod_l+0x594>)
 800ea52:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800ea56:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800ea5a:	4652      	mov	r2, sl
 800ea5c:	465b      	mov	r3, fp
 800ea5e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ea62:	f7f1 fdd1 	bl	8000608 <__aeabi_dmul>
 800ea66:	4b26      	ldr	r3, [pc, #152]	@ (800eb00 <_strtod_l+0x598>)
 800ea68:	460a      	mov	r2, r1
 800ea6a:	400b      	ands	r3, r1
 800ea6c:	4925      	ldr	r1, [pc, #148]	@ (800eb04 <_strtod_l+0x59c>)
 800ea6e:	428b      	cmp	r3, r1
 800ea70:	4682      	mov	sl, r0
 800ea72:	d898      	bhi.n	800e9a6 <_strtod_l+0x43e>
 800ea74:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800ea78:	428b      	cmp	r3, r1
 800ea7a:	bf86      	itte	hi
 800ea7c:	f8df b088 	ldrhi.w	fp, [pc, #136]	@ 800eb08 <_strtod_l+0x5a0>
 800ea80:	f04f 3aff 	movhi.w	sl, #4294967295
 800ea84:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800ea88:	2300      	movs	r3, #0
 800ea8a:	9308      	str	r3, [sp, #32]
 800ea8c:	e076      	b.n	800eb7c <_strtod_l+0x614>
 800ea8e:	07e2      	lsls	r2, r4, #31
 800ea90:	d504      	bpl.n	800ea9c <_strtod_l+0x534>
 800ea92:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ea96:	f7f1 fdb7 	bl	8000608 <__aeabi_dmul>
 800ea9a:	2301      	movs	r3, #1
 800ea9c:	3601      	adds	r6, #1
 800ea9e:	1064      	asrs	r4, r4, #1
 800eaa0:	3708      	adds	r7, #8
 800eaa2:	e7d0      	b.n	800ea46 <_strtod_l+0x4de>
 800eaa4:	d0f0      	beq.n	800ea88 <_strtod_l+0x520>
 800eaa6:	4264      	negs	r4, r4
 800eaa8:	f014 020f 	ands.w	r2, r4, #15
 800eaac:	d00a      	beq.n	800eac4 <_strtod_l+0x55c>
 800eaae:	4b12      	ldr	r3, [pc, #72]	@ (800eaf8 <_strtod_l+0x590>)
 800eab0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800eab4:	4650      	mov	r0, sl
 800eab6:	4659      	mov	r1, fp
 800eab8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eabc:	f7f1 fece 	bl	800085c <__aeabi_ddiv>
 800eac0:	4682      	mov	sl, r0
 800eac2:	468b      	mov	fp, r1
 800eac4:	1124      	asrs	r4, r4, #4
 800eac6:	d0df      	beq.n	800ea88 <_strtod_l+0x520>
 800eac8:	2c1f      	cmp	r4, #31
 800eaca:	dd1f      	ble.n	800eb0c <_strtod_l+0x5a4>
 800eacc:	2400      	movs	r4, #0
 800eace:	46a0      	mov	r8, r4
 800ead0:	940b      	str	r4, [sp, #44]	@ 0x2c
 800ead2:	46a1      	mov	r9, r4
 800ead4:	9a05      	ldr	r2, [sp, #20]
 800ead6:	2322      	movs	r3, #34	@ 0x22
 800ead8:	f04f 0a00 	mov.w	sl, #0
 800eadc:	f04f 0b00 	mov.w	fp, #0
 800eae0:	6013      	str	r3, [r2, #0]
 800eae2:	e76b      	b.n	800e9bc <_strtod_l+0x454>
 800eae4:	08011af1 	.word	0x08011af1
 800eae8:	08011db8 	.word	0x08011db8
 800eaec:	08011ae9 	.word	0x08011ae9
 800eaf0:	08011b5c 	.word	0x08011b5c
 800eaf4:	08011b58 	.word	0x08011b58
 800eaf8:	08011cf0 	.word	0x08011cf0
 800eafc:	08011cc8 	.word	0x08011cc8
 800eb00:	7ff00000 	.word	0x7ff00000
 800eb04:	7ca00000 	.word	0x7ca00000
 800eb08:	7fefffff 	.word	0x7fefffff
 800eb0c:	f014 0310 	ands.w	r3, r4, #16
 800eb10:	bf18      	it	ne
 800eb12:	236a      	movne	r3, #106	@ 0x6a
 800eb14:	4ea9      	ldr	r6, [pc, #676]	@ (800edbc <_strtod_l+0x854>)
 800eb16:	9308      	str	r3, [sp, #32]
 800eb18:	4650      	mov	r0, sl
 800eb1a:	4659      	mov	r1, fp
 800eb1c:	2300      	movs	r3, #0
 800eb1e:	07e7      	lsls	r7, r4, #31
 800eb20:	d504      	bpl.n	800eb2c <_strtod_l+0x5c4>
 800eb22:	e9d6 2300 	ldrd	r2, r3, [r6]
 800eb26:	f7f1 fd6f 	bl	8000608 <__aeabi_dmul>
 800eb2a:	2301      	movs	r3, #1
 800eb2c:	1064      	asrs	r4, r4, #1
 800eb2e:	f106 0608 	add.w	r6, r6, #8
 800eb32:	d1f4      	bne.n	800eb1e <_strtod_l+0x5b6>
 800eb34:	b10b      	cbz	r3, 800eb3a <_strtod_l+0x5d2>
 800eb36:	4682      	mov	sl, r0
 800eb38:	468b      	mov	fp, r1
 800eb3a:	9b08      	ldr	r3, [sp, #32]
 800eb3c:	b1b3      	cbz	r3, 800eb6c <_strtod_l+0x604>
 800eb3e:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800eb42:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800eb46:	2b00      	cmp	r3, #0
 800eb48:	4659      	mov	r1, fp
 800eb4a:	dd0f      	ble.n	800eb6c <_strtod_l+0x604>
 800eb4c:	2b1f      	cmp	r3, #31
 800eb4e:	dd56      	ble.n	800ebfe <_strtod_l+0x696>
 800eb50:	2b34      	cmp	r3, #52	@ 0x34
 800eb52:	bfde      	ittt	le
 800eb54:	f04f 33ff 	movle.w	r3, #4294967295
 800eb58:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800eb5c:	4093      	lslle	r3, r2
 800eb5e:	f04f 0a00 	mov.w	sl, #0
 800eb62:	bfcc      	ite	gt
 800eb64:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800eb68:	ea03 0b01 	andle.w	fp, r3, r1
 800eb6c:	2200      	movs	r2, #0
 800eb6e:	2300      	movs	r3, #0
 800eb70:	4650      	mov	r0, sl
 800eb72:	4659      	mov	r1, fp
 800eb74:	f7f1 ffb0 	bl	8000ad8 <__aeabi_dcmpeq>
 800eb78:	2800      	cmp	r0, #0
 800eb7a:	d1a7      	bne.n	800eacc <_strtod_l+0x564>
 800eb7c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800eb7e:	9300      	str	r3, [sp, #0]
 800eb80:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800eb82:	9805      	ldr	r0, [sp, #20]
 800eb84:	462b      	mov	r3, r5
 800eb86:	464a      	mov	r2, r9
 800eb88:	f7ff f8ce 	bl	800dd28 <__s2b>
 800eb8c:	900b      	str	r0, [sp, #44]	@ 0x2c
 800eb8e:	2800      	cmp	r0, #0
 800eb90:	f43f af09 	beq.w	800e9a6 <_strtod_l+0x43e>
 800eb94:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800eb96:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800eb98:	2a00      	cmp	r2, #0
 800eb9a:	eba3 0308 	sub.w	r3, r3, r8
 800eb9e:	bfa8      	it	ge
 800eba0:	2300      	movge	r3, #0
 800eba2:	9312      	str	r3, [sp, #72]	@ 0x48
 800eba4:	2400      	movs	r4, #0
 800eba6:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800ebaa:	9316      	str	r3, [sp, #88]	@ 0x58
 800ebac:	46a0      	mov	r8, r4
 800ebae:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ebb0:	9805      	ldr	r0, [sp, #20]
 800ebb2:	6859      	ldr	r1, [r3, #4]
 800ebb4:	f7ff f810 	bl	800dbd8 <_Balloc>
 800ebb8:	4681      	mov	r9, r0
 800ebba:	2800      	cmp	r0, #0
 800ebbc:	f43f aef7 	beq.w	800e9ae <_strtod_l+0x446>
 800ebc0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ebc2:	691a      	ldr	r2, [r3, #16]
 800ebc4:	3202      	adds	r2, #2
 800ebc6:	f103 010c 	add.w	r1, r3, #12
 800ebca:	0092      	lsls	r2, r2, #2
 800ebcc:	300c      	adds	r0, #12
 800ebce:	f7fe f876 	bl	800ccbe <memcpy>
 800ebd2:	ec4b ab10 	vmov	d0, sl, fp
 800ebd6:	9805      	ldr	r0, [sp, #20]
 800ebd8:	aa1c      	add	r2, sp, #112	@ 0x70
 800ebda:	a91b      	add	r1, sp, #108	@ 0x6c
 800ebdc:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800ebe0:	f7ff fbd6 	bl	800e390 <__d2b>
 800ebe4:	901a      	str	r0, [sp, #104]	@ 0x68
 800ebe6:	2800      	cmp	r0, #0
 800ebe8:	f43f aee1 	beq.w	800e9ae <_strtod_l+0x446>
 800ebec:	9805      	ldr	r0, [sp, #20]
 800ebee:	2101      	movs	r1, #1
 800ebf0:	f7ff f930 	bl	800de54 <__i2b>
 800ebf4:	4680      	mov	r8, r0
 800ebf6:	b948      	cbnz	r0, 800ec0c <_strtod_l+0x6a4>
 800ebf8:	f04f 0800 	mov.w	r8, #0
 800ebfc:	e6d7      	b.n	800e9ae <_strtod_l+0x446>
 800ebfe:	f04f 32ff 	mov.w	r2, #4294967295
 800ec02:	fa02 f303 	lsl.w	r3, r2, r3
 800ec06:	ea03 0a0a 	and.w	sl, r3, sl
 800ec0a:	e7af      	b.n	800eb6c <_strtod_l+0x604>
 800ec0c:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800ec0e:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800ec10:	2d00      	cmp	r5, #0
 800ec12:	bfab      	itete	ge
 800ec14:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800ec16:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800ec18:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800ec1a:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800ec1c:	bfac      	ite	ge
 800ec1e:	18ef      	addge	r7, r5, r3
 800ec20:	1b5e      	sublt	r6, r3, r5
 800ec22:	9b08      	ldr	r3, [sp, #32]
 800ec24:	1aed      	subs	r5, r5, r3
 800ec26:	4415      	add	r5, r2
 800ec28:	4b65      	ldr	r3, [pc, #404]	@ (800edc0 <_strtod_l+0x858>)
 800ec2a:	3d01      	subs	r5, #1
 800ec2c:	429d      	cmp	r5, r3
 800ec2e:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800ec32:	da50      	bge.n	800ecd6 <_strtod_l+0x76e>
 800ec34:	1b5b      	subs	r3, r3, r5
 800ec36:	2b1f      	cmp	r3, #31
 800ec38:	eba2 0203 	sub.w	r2, r2, r3
 800ec3c:	f04f 0101 	mov.w	r1, #1
 800ec40:	dc3d      	bgt.n	800ecbe <_strtod_l+0x756>
 800ec42:	fa01 f303 	lsl.w	r3, r1, r3
 800ec46:	9313      	str	r3, [sp, #76]	@ 0x4c
 800ec48:	2300      	movs	r3, #0
 800ec4a:	9310      	str	r3, [sp, #64]	@ 0x40
 800ec4c:	18bd      	adds	r5, r7, r2
 800ec4e:	9b08      	ldr	r3, [sp, #32]
 800ec50:	42af      	cmp	r7, r5
 800ec52:	4416      	add	r6, r2
 800ec54:	441e      	add	r6, r3
 800ec56:	463b      	mov	r3, r7
 800ec58:	bfa8      	it	ge
 800ec5a:	462b      	movge	r3, r5
 800ec5c:	42b3      	cmp	r3, r6
 800ec5e:	bfa8      	it	ge
 800ec60:	4633      	movge	r3, r6
 800ec62:	2b00      	cmp	r3, #0
 800ec64:	bfc2      	ittt	gt
 800ec66:	1aed      	subgt	r5, r5, r3
 800ec68:	1af6      	subgt	r6, r6, r3
 800ec6a:	1aff      	subgt	r7, r7, r3
 800ec6c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800ec6e:	2b00      	cmp	r3, #0
 800ec70:	dd16      	ble.n	800eca0 <_strtod_l+0x738>
 800ec72:	4641      	mov	r1, r8
 800ec74:	9805      	ldr	r0, [sp, #20]
 800ec76:	461a      	mov	r2, r3
 800ec78:	f7ff f9a4 	bl	800dfc4 <__pow5mult>
 800ec7c:	4680      	mov	r8, r0
 800ec7e:	2800      	cmp	r0, #0
 800ec80:	d0ba      	beq.n	800ebf8 <_strtod_l+0x690>
 800ec82:	4601      	mov	r1, r0
 800ec84:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800ec86:	9805      	ldr	r0, [sp, #20]
 800ec88:	f7ff f8fa 	bl	800de80 <__multiply>
 800ec8c:	900a      	str	r0, [sp, #40]	@ 0x28
 800ec8e:	2800      	cmp	r0, #0
 800ec90:	f43f ae8d 	beq.w	800e9ae <_strtod_l+0x446>
 800ec94:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800ec96:	9805      	ldr	r0, [sp, #20]
 800ec98:	f7fe ffde 	bl	800dc58 <_Bfree>
 800ec9c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ec9e:	931a      	str	r3, [sp, #104]	@ 0x68
 800eca0:	2d00      	cmp	r5, #0
 800eca2:	dc1d      	bgt.n	800ece0 <_strtod_l+0x778>
 800eca4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800eca6:	2b00      	cmp	r3, #0
 800eca8:	dd23      	ble.n	800ecf2 <_strtod_l+0x78a>
 800ecaa:	4649      	mov	r1, r9
 800ecac:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800ecae:	9805      	ldr	r0, [sp, #20]
 800ecb0:	f7ff f988 	bl	800dfc4 <__pow5mult>
 800ecb4:	4681      	mov	r9, r0
 800ecb6:	b9e0      	cbnz	r0, 800ecf2 <_strtod_l+0x78a>
 800ecb8:	f04f 0900 	mov.w	r9, #0
 800ecbc:	e677      	b.n	800e9ae <_strtod_l+0x446>
 800ecbe:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800ecc2:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800ecc6:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800ecca:	35e2      	adds	r5, #226	@ 0xe2
 800eccc:	fa01 f305 	lsl.w	r3, r1, r5
 800ecd0:	9310      	str	r3, [sp, #64]	@ 0x40
 800ecd2:	9113      	str	r1, [sp, #76]	@ 0x4c
 800ecd4:	e7ba      	b.n	800ec4c <_strtod_l+0x6e4>
 800ecd6:	2300      	movs	r3, #0
 800ecd8:	9310      	str	r3, [sp, #64]	@ 0x40
 800ecda:	2301      	movs	r3, #1
 800ecdc:	9313      	str	r3, [sp, #76]	@ 0x4c
 800ecde:	e7b5      	b.n	800ec4c <_strtod_l+0x6e4>
 800ece0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800ece2:	9805      	ldr	r0, [sp, #20]
 800ece4:	462a      	mov	r2, r5
 800ece6:	f7ff f9c7 	bl	800e078 <__lshift>
 800ecea:	901a      	str	r0, [sp, #104]	@ 0x68
 800ecec:	2800      	cmp	r0, #0
 800ecee:	d1d9      	bne.n	800eca4 <_strtod_l+0x73c>
 800ecf0:	e65d      	b.n	800e9ae <_strtod_l+0x446>
 800ecf2:	2e00      	cmp	r6, #0
 800ecf4:	dd07      	ble.n	800ed06 <_strtod_l+0x79e>
 800ecf6:	4649      	mov	r1, r9
 800ecf8:	9805      	ldr	r0, [sp, #20]
 800ecfa:	4632      	mov	r2, r6
 800ecfc:	f7ff f9bc 	bl	800e078 <__lshift>
 800ed00:	4681      	mov	r9, r0
 800ed02:	2800      	cmp	r0, #0
 800ed04:	d0d8      	beq.n	800ecb8 <_strtod_l+0x750>
 800ed06:	2f00      	cmp	r7, #0
 800ed08:	dd08      	ble.n	800ed1c <_strtod_l+0x7b4>
 800ed0a:	4641      	mov	r1, r8
 800ed0c:	9805      	ldr	r0, [sp, #20]
 800ed0e:	463a      	mov	r2, r7
 800ed10:	f7ff f9b2 	bl	800e078 <__lshift>
 800ed14:	4680      	mov	r8, r0
 800ed16:	2800      	cmp	r0, #0
 800ed18:	f43f ae49 	beq.w	800e9ae <_strtod_l+0x446>
 800ed1c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800ed1e:	9805      	ldr	r0, [sp, #20]
 800ed20:	464a      	mov	r2, r9
 800ed22:	f7ff fa31 	bl	800e188 <__mdiff>
 800ed26:	4604      	mov	r4, r0
 800ed28:	2800      	cmp	r0, #0
 800ed2a:	f43f ae40 	beq.w	800e9ae <_strtod_l+0x446>
 800ed2e:	68c3      	ldr	r3, [r0, #12]
 800ed30:	930f      	str	r3, [sp, #60]	@ 0x3c
 800ed32:	2300      	movs	r3, #0
 800ed34:	60c3      	str	r3, [r0, #12]
 800ed36:	4641      	mov	r1, r8
 800ed38:	f7ff fa0a 	bl	800e150 <__mcmp>
 800ed3c:	2800      	cmp	r0, #0
 800ed3e:	da45      	bge.n	800edcc <_strtod_l+0x864>
 800ed40:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ed42:	ea53 030a 	orrs.w	r3, r3, sl
 800ed46:	d16b      	bne.n	800ee20 <_strtod_l+0x8b8>
 800ed48:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800ed4c:	2b00      	cmp	r3, #0
 800ed4e:	d167      	bne.n	800ee20 <_strtod_l+0x8b8>
 800ed50:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800ed54:	0d1b      	lsrs	r3, r3, #20
 800ed56:	051b      	lsls	r3, r3, #20
 800ed58:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800ed5c:	d960      	bls.n	800ee20 <_strtod_l+0x8b8>
 800ed5e:	6963      	ldr	r3, [r4, #20]
 800ed60:	b913      	cbnz	r3, 800ed68 <_strtod_l+0x800>
 800ed62:	6923      	ldr	r3, [r4, #16]
 800ed64:	2b01      	cmp	r3, #1
 800ed66:	dd5b      	ble.n	800ee20 <_strtod_l+0x8b8>
 800ed68:	4621      	mov	r1, r4
 800ed6a:	2201      	movs	r2, #1
 800ed6c:	9805      	ldr	r0, [sp, #20]
 800ed6e:	f7ff f983 	bl	800e078 <__lshift>
 800ed72:	4641      	mov	r1, r8
 800ed74:	4604      	mov	r4, r0
 800ed76:	f7ff f9eb 	bl	800e150 <__mcmp>
 800ed7a:	2800      	cmp	r0, #0
 800ed7c:	dd50      	ble.n	800ee20 <_strtod_l+0x8b8>
 800ed7e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800ed82:	9a08      	ldr	r2, [sp, #32]
 800ed84:	0d1b      	lsrs	r3, r3, #20
 800ed86:	051b      	lsls	r3, r3, #20
 800ed88:	2a00      	cmp	r2, #0
 800ed8a:	d06a      	beq.n	800ee62 <_strtod_l+0x8fa>
 800ed8c:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800ed90:	d867      	bhi.n	800ee62 <_strtod_l+0x8fa>
 800ed92:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800ed96:	f67f ae9d 	bls.w	800ead4 <_strtod_l+0x56c>
 800ed9a:	4b0a      	ldr	r3, [pc, #40]	@ (800edc4 <_strtod_l+0x85c>)
 800ed9c:	4650      	mov	r0, sl
 800ed9e:	4659      	mov	r1, fp
 800eda0:	2200      	movs	r2, #0
 800eda2:	f7f1 fc31 	bl	8000608 <__aeabi_dmul>
 800eda6:	4b08      	ldr	r3, [pc, #32]	@ (800edc8 <_strtod_l+0x860>)
 800eda8:	400b      	ands	r3, r1
 800edaa:	4682      	mov	sl, r0
 800edac:	468b      	mov	fp, r1
 800edae:	2b00      	cmp	r3, #0
 800edb0:	f47f ae08 	bne.w	800e9c4 <_strtod_l+0x45c>
 800edb4:	9a05      	ldr	r2, [sp, #20]
 800edb6:	2322      	movs	r3, #34	@ 0x22
 800edb8:	6013      	str	r3, [r2, #0]
 800edba:	e603      	b.n	800e9c4 <_strtod_l+0x45c>
 800edbc:	08011de0 	.word	0x08011de0
 800edc0:	fffffc02 	.word	0xfffffc02
 800edc4:	39500000 	.word	0x39500000
 800edc8:	7ff00000 	.word	0x7ff00000
 800edcc:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 800edd0:	d165      	bne.n	800ee9e <_strtod_l+0x936>
 800edd2:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800edd4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800edd8:	b35a      	cbz	r2, 800ee32 <_strtod_l+0x8ca>
 800edda:	4a9f      	ldr	r2, [pc, #636]	@ (800f058 <_strtod_l+0xaf0>)
 800eddc:	4293      	cmp	r3, r2
 800edde:	d12b      	bne.n	800ee38 <_strtod_l+0x8d0>
 800ede0:	9b08      	ldr	r3, [sp, #32]
 800ede2:	4651      	mov	r1, sl
 800ede4:	b303      	cbz	r3, 800ee28 <_strtod_l+0x8c0>
 800ede6:	4b9d      	ldr	r3, [pc, #628]	@ (800f05c <_strtod_l+0xaf4>)
 800ede8:	465a      	mov	r2, fp
 800edea:	4013      	ands	r3, r2
 800edec:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800edf0:	f04f 32ff 	mov.w	r2, #4294967295
 800edf4:	d81b      	bhi.n	800ee2e <_strtod_l+0x8c6>
 800edf6:	0d1b      	lsrs	r3, r3, #20
 800edf8:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800edfc:	fa02 f303 	lsl.w	r3, r2, r3
 800ee00:	4299      	cmp	r1, r3
 800ee02:	d119      	bne.n	800ee38 <_strtod_l+0x8d0>
 800ee04:	4b96      	ldr	r3, [pc, #600]	@ (800f060 <_strtod_l+0xaf8>)
 800ee06:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800ee08:	429a      	cmp	r2, r3
 800ee0a:	d102      	bne.n	800ee12 <_strtod_l+0x8aa>
 800ee0c:	3101      	adds	r1, #1
 800ee0e:	f43f adce 	beq.w	800e9ae <_strtod_l+0x446>
 800ee12:	4b92      	ldr	r3, [pc, #584]	@ (800f05c <_strtod_l+0xaf4>)
 800ee14:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800ee16:	401a      	ands	r2, r3
 800ee18:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800ee1c:	f04f 0a00 	mov.w	sl, #0
 800ee20:	9b08      	ldr	r3, [sp, #32]
 800ee22:	2b00      	cmp	r3, #0
 800ee24:	d1b9      	bne.n	800ed9a <_strtod_l+0x832>
 800ee26:	e5cd      	b.n	800e9c4 <_strtod_l+0x45c>
 800ee28:	f04f 33ff 	mov.w	r3, #4294967295
 800ee2c:	e7e8      	b.n	800ee00 <_strtod_l+0x898>
 800ee2e:	4613      	mov	r3, r2
 800ee30:	e7e6      	b.n	800ee00 <_strtod_l+0x898>
 800ee32:	ea53 030a 	orrs.w	r3, r3, sl
 800ee36:	d0a2      	beq.n	800ed7e <_strtod_l+0x816>
 800ee38:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800ee3a:	b1db      	cbz	r3, 800ee74 <_strtod_l+0x90c>
 800ee3c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800ee3e:	4213      	tst	r3, r2
 800ee40:	d0ee      	beq.n	800ee20 <_strtod_l+0x8b8>
 800ee42:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ee44:	9a08      	ldr	r2, [sp, #32]
 800ee46:	4650      	mov	r0, sl
 800ee48:	4659      	mov	r1, fp
 800ee4a:	b1bb      	cbz	r3, 800ee7c <_strtod_l+0x914>
 800ee4c:	f7ff fb6e 	bl	800e52c <sulp>
 800ee50:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800ee54:	ec53 2b10 	vmov	r2, r3, d0
 800ee58:	f7f1 fa20 	bl	800029c <__adddf3>
 800ee5c:	4682      	mov	sl, r0
 800ee5e:	468b      	mov	fp, r1
 800ee60:	e7de      	b.n	800ee20 <_strtod_l+0x8b8>
 800ee62:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800ee66:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800ee6a:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800ee6e:	f04f 3aff 	mov.w	sl, #4294967295
 800ee72:	e7d5      	b.n	800ee20 <_strtod_l+0x8b8>
 800ee74:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800ee76:	ea13 0f0a 	tst.w	r3, sl
 800ee7a:	e7e1      	b.n	800ee40 <_strtod_l+0x8d8>
 800ee7c:	f7ff fb56 	bl	800e52c <sulp>
 800ee80:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800ee84:	ec53 2b10 	vmov	r2, r3, d0
 800ee88:	f7f1 fa06 	bl	8000298 <__aeabi_dsub>
 800ee8c:	2200      	movs	r2, #0
 800ee8e:	2300      	movs	r3, #0
 800ee90:	4682      	mov	sl, r0
 800ee92:	468b      	mov	fp, r1
 800ee94:	f7f1 fe20 	bl	8000ad8 <__aeabi_dcmpeq>
 800ee98:	2800      	cmp	r0, #0
 800ee9a:	d0c1      	beq.n	800ee20 <_strtod_l+0x8b8>
 800ee9c:	e61a      	b.n	800ead4 <_strtod_l+0x56c>
 800ee9e:	4641      	mov	r1, r8
 800eea0:	4620      	mov	r0, r4
 800eea2:	f7ff facd 	bl	800e440 <__ratio>
 800eea6:	ec57 6b10 	vmov	r6, r7, d0
 800eeaa:	2200      	movs	r2, #0
 800eeac:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800eeb0:	4630      	mov	r0, r6
 800eeb2:	4639      	mov	r1, r7
 800eeb4:	f7f1 fe24 	bl	8000b00 <__aeabi_dcmple>
 800eeb8:	2800      	cmp	r0, #0
 800eeba:	d06f      	beq.n	800ef9c <_strtod_l+0xa34>
 800eebc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800eebe:	2b00      	cmp	r3, #0
 800eec0:	d17a      	bne.n	800efb8 <_strtod_l+0xa50>
 800eec2:	f1ba 0f00 	cmp.w	sl, #0
 800eec6:	d158      	bne.n	800ef7a <_strtod_l+0xa12>
 800eec8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800eeca:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800eece:	2b00      	cmp	r3, #0
 800eed0:	d15a      	bne.n	800ef88 <_strtod_l+0xa20>
 800eed2:	4b64      	ldr	r3, [pc, #400]	@ (800f064 <_strtod_l+0xafc>)
 800eed4:	2200      	movs	r2, #0
 800eed6:	4630      	mov	r0, r6
 800eed8:	4639      	mov	r1, r7
 800eeda:	f7f1 fe07 	bl	8000aec <__aeabi_dcmplt>
 800eede:	2800      	cmp	r0, #0
 800eee0:	d159      	bne.n	800ef96 <_strtod_l+0xa2e>
 800eee2:	4630      	mov	r0, r6
 800eee4:	4639      	mov	r1, r7
 800eee6:	4b60      	ldr	r3, [pc, #384]	@ (800f068 <_strtod_l+0xb00>)
 800eee8:	2200      	movs	r2, #0
 800eeea:	f7f1 fb8d 	bl	8000608 <__aeabi_dmul>
 800eeee:	4606      	mov	r6, r0
 800eef0:	460f      	mov	r7, r1
 800eef2:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800eef6:	9606      	str	r6, [sp, #24]
 800eef8:	9307      	str	r3, [sp, #28]
 800eefa:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800eefe:	4d57      	ldr	r5, [pc, #348]	@ (800f05c <_strtod_l+0xaf4>)
 800ef00:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800ef04:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ef06:	401d      	ands	r5, r3
 800ef08:	4b58      	ldr	r3, [pc, #352]	@ (800f06c <_strtod_l+0xb04>)
 800ef0a:	429d      	cmp	r5, r3
 800ef0c:	f040 80b2 	bne.w	800f074 <_strtod_l+0xb0c>
 800ef10:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ef12:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800ef16:	ec4b ab10 	vmov	d0, sl, fp
 800ef1a:	f7ff f9c9 	bl	800e2b0 <__ulp>
 800ef1e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800ef22:	ec51 0b10 	vmov	r0, r1, d0
 800ef26:	f7f1 fb6f 	bl	8000608 <__aeabi_dmul>
 800ef2a:	4652      	mov	r2, sl
 800ef2c:	465b      	mov	r3, fp
 800ef2e:	f7f1 f9b5 	bl	800029c <__adddf3>
 800ef32:	460b      	mov	r3, r1
 800ef34:	4949      	ldr	r1, [pc, #292]	@ (800f05c <_strtod_l+0xaf4>)
 800ef36:	4a4e      	ldr	r2, [pc, #312]	@ (800f070 <_strtod_l+0xb08>)
 800ef38:	4019      	ands	r1, r3
 800ef3a:	4291      	cmp	r1, r2
 800ef3c:	4682      	mov	sl, r0
 800ef3e:	d942      	bls.n	800efc6 <_strtod_l+0xa5e>
 800ef40:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800ef42:	4b47      	ldr	r3, [pc, #284]	@ (800f060 <_strtod_l+0xaf8>)
 800ef44:	429a      	cmp	r2, r3
 800ef46:	d103      	bne.n	800ef50 <_strtod_l+0x9e8>
 800ef48:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800ef4a:	3301      	adds	r3, #1
 800ef4c:	f43f ad2f 	beq.w	800e9ae <_strtod_l+0x446>
 800ef50:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 800f060 <_strtod_l+0xaf8>
 800ef54:	f04f 3aff 	mov.w	sl, #4294967295
 800ef58:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800ef5a:	9805      	ldr	r0, [sp, #20]
 800ef5c:	f7fe fe7c 	bl	800dc58 <_Bfree>
 800ef60:	9805      	ldr	r0, [sp, #20]
 800ef62:	4649      	mov	r1, r9
 800ef64:	f7fe fe78 	bl	800dc58 <_Bfree>
 800ef68:	9805      	ldr	r0, [sp, #20]
 800ef6a:	4641      	mov	r1, r8
 800ef6c:	f7fe fe74 	bl	800dc58 <_Bfree>
 800ef70:	9805      	ldr	r0, [sp, #20]
 800ef72:	4621      	mov	r1, r4
 800ef74:	f7fe fe70 	bl	800dc58 <_Bfree>
 800ef78:	e619      	b.n	800ebae <_strtod_l+0x646>
 800ef7a:	f1ba 0f01 	cmp.w	sl, #1
 800ef7e:	d103      	bne.n	800ef88 <_strtod_l+0xa20>
 800ef80:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ef82:	2b00      	cmp	r3, #0
 800ef84:	f43f ada6 	beq.w	800ead4 <_strtod_l+0x56c>
 800ef88:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 800f038 <_strtod_l+0xad0>
 800ef8c:	4f35      	ldr	r7, [pc, #212]	@ (800f064 <_strtod_l+0xafc>)
 800ef8e:	ed8d 7b06 	vstr	d7, [sp, #24]
 800ef92:	2600      	movs	r6, #0
 800ef94:	e7b1      	b.n	800eefa <_strtod_l+0x992>
 800ef96:	4f34      	ldr	r7, [pc, #208]	@ (800f068 <_strtod_l+0xb00>)
 800ef98:	2600      	movs	r6, #0
 800ef9a:	e7aa      	b.n	800eef2 <_strtod_l+0x98a>
 800ef9c:	4b32      	ldr	r3, [pc, #200]	@ (800f068 <_strtod_l+0xb00>)
 800ef9e:	4630      	mov	r0, r6
 800efa0:	4639      	mov	r1, r7
 800efa2:	2200      	movs	r2, #0
 800efa4:	f7f1 fb30 	bl	8000608 <__aeabi_dmul>
 800efa8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800efaa:	4606      	mov	r6, r0
 800efac:	460f      	mov	r7, r1
 800efae:	2b00      	cmp	r3, #0
 800efb0:	d09f      	beq.n	800eef2 <_strtod_l+0x98a>
 800efb2:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800efb6:	e7a0      	b.n	800eefa <_strtod_l+0x992>
 800efb8:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800f040 <_strtod_l+0xad8>
 800efbc:	ed8d 7b06 	vstr	d7, [sp, #24]
 800efc0:	ec57 6b17 	vmov	r6, r7, d7
 800efc4:	e799      	b.n	800eefa <_strtod_l+0x992>
 800efc6:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800efca:	9b08      	ldr	r3, [sp, #32]
 800efcc:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 800efd0:	2b00      	cmp	r3, #0
 800efd2:	d1c1      	bne.n	800ef58 <_strtod_l+0x9f0>
 800efd4:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800efd8:	0d1b      	lsrs	r3, r3, #20
 800efda:	051b      	lsls	r3, r3, #20
 800efdc:	429d      	cmp	r5, r3
 800efde:	d1bb      	bne.n	800ef58 <_strtod_l+0x9f0>
 800efe0:	4630      	mov	r0, r6
 800efe2:	4639      	mov	r1, r7
 800efe4:	f7f1 fe70 	bl	8000cc8 <__aeabi_d2lz>
 800efe8:	f7f1 fae0 	bl	80005ac <__aeabi_l2d>
 800efec:	4602      	mov	r2, r0
 800efee:	460b      	mov	r3, r1
 800eff0:	4630      	mov	r0, r6
 800eff2:	4639      	mov	r1, r7
 800eff4:	f7f1 f950 	bl	8000298 <__aeabi_dsub>
 800eff8:	460b      	mov	r3, r1
 800effa:	4602      	mov	r2, r0
 800effc:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800f000:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800f004:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f006:	ea46 060a 	orr.w	r6, r6, sl
 800f00a:	431e      	orrs	r6, r3
 800f00c:	d06f      	beq.n	800f0ee <_strtod_l+0xb86>
 800f00e:	a30e      	add	r3, pc, #56	@ (adr r3, 800f048 <_strtod_l+0xae0>)
 800f010:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f014:	f7f1 fd6a 	bl	8000aec <__aeabi_dcmplt>
 800f018:	2800      	cmp	r0, #0
 800f01a:	f47f acd3 	bne.w	800e9c4 <_strtod_l+0x45c>
 800f01e:	a30c      	add	r3, pc, #48	@ (adr r3, 800f050 <_strtod_l+0xae8>)
 800f020:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f024:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800f028:	f7f1 fd7e 	bl	8000b28 <__aeabi_dcmpgt>
 800f02c:	2800      	cmp	r0, #0
 800f02e:	d093      	beq.n	800ef58 <_strtod_l+0x9f0>
 800f030:	e4c8      	b.n	800e9c4 <_strtod_l+0x45c>
 800f032:	bf00      	nop
 800f034:	f3af 8000 	nop.w
 800f038:	00000000 	.word	0x00000000
 800f03c:	bff00000 	.word	0xbff00000
 800f040:	00000000 	.word	0x00000000
 800f044:	3ff00000 	.word	0x3ff00000
 800f048:	94a03595 	.word	0x94a03595
 800f04c:	3fdfffff 	.word	0x3fdfffff
 800f050:	35afe535 	.word	0x35afe535
 800f054:	3fe00000 	.word	0x3fe00000
 800f058:	000fffff 	.word	0x000fffff
 800f05c:	7ff00000 	.word	0x7ff00000
 800f060:	7fefffff 	.word	0x7fefffff
 800f064:	3ff00000 	.word	0x3ff00000
 800f068:	3fe00000 	.word	0x3fe00000
 800f06c:	7fe00000 	.word	0x7fe00000
 800f070:	7c9fffff 	.word	0x7c9fffff
 800f074:	9b08      	ldr	r3, [sp, #32]
 800f076:	b323      	cbz	r3, 800f0c2 <_strtod_l+0xb5a>
 800f078:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800f07c:	d821      	bhi.n	800f0c2 <_strtod_l+0xb5a>
 800f07e:	a328      	add	r3, pc, #160	@ (adr r3, 800f120 <_strtod_l+0xbb8>)
 800f080:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f084:	4630      	mov	r0, r6
 800f086:	4639      	mov	r1, r7
 800f088:	f7f1 fd3a 	bl	8000b00 <__aeabi_dcmple>
 800f08c:	b1a0      	cbz	r0, 800f0b8 <_strtod_l+0xb50>
 800f08e:	4639      	mov	r1, r7
 800f090:	4630      	mov	r0, r6
 800f092:	f7f1 fd91 	bl	8000bb8 <__aeabi_d2uiz>
 800f096:	2801      	cmp	r0, #1
 800f098:	bf38      	it	cc
 800f09a:	2001      	movcc	r0, #1
 800f09c:	f7f1 fa3a 	bl	8000514 <__aeabi_ui2d>
 800f0a0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f0a2:	4606      	mov	r6, r0
 800f0a4:	460f      	mov	r7, r1
 800f0a6:	b9fb      	cbnz	r3, 800f0e8 <_strtod_l+0xb80>
 800f0a8:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800f0ac:	9014      	str	r0, [sp, #80]	@ 0x50
 800f0ae:	9315      	str	r3, [sp, #84]	@ 0x54
 800f0b0:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800f0b4:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800f0b8:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800f0ba:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800f0be:	1b5b      	subs	r3, r3, r5
 800f0c0:	9311      	str	r3, [sp, #68]	@ 0x44
 800f0c2:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800f0c6:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800f0ca:	f7ff f8f1 	bl	800e2b0 <__ulp>
 800f0ce:	4650      	mov	r0, sl
 800f0d0:	ec53 2b10 	vmov	r2, r3, d0
 800f0d4:	4659      	mov	r1, fp
 800f0d6:	f7f1 fa97 	bl	8000608 <__aeabi_dmul>
 800f0da:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800f0de:	f7f1 f8dd 	bl	800029c <__adddf3>
 800f0e2:	4682      	mov	sl, r0
 800f0e4:	468b      	mov	fp, r1
 800f0e6:	e770      	b.n	800efca <_strtod_l+0xa62>
 800f0e8:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800f0ec:	e7e0      	b.n	800f0b0 <_strtod_l+0xb48>
 800f0ee:	a30e      	add	r3, pc, #56	@ (adr r3, 800f128 <_strtod_l+0xbc0>)
 800f0f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f0f4:	f7f1 fcfa 	bl	8000aec <__aeabi_dcmplt>
 800f0f8:	e798      	b.n	800f02c <_strtod_l+0xac4>
 800f0fa:	2300      	movs	r3, #0
 800f0fc:	930e      	str	r3, [sp, #56]	@ 0x38
 800f0fe:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800f100:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800f102:	6013      	str	r3, [r2, #0]
 800f104:	f7ff ba6d 	b.w	800e5e2 <_strtod_l+0x7a>
 800f108:	2a65      	cmp	r2, #101	@ 0x65
 800f10a:	f43f ab68 	beq.w	800e7de <_strtod_l+0x276>
 800f10e:	2a45      	cmp	r2, #69	@ 0x45
 800f110:	f43f ab65 	beq.w	800e7de <_strtod_l+0x276>
 800f114:	2301      	movs	r3, #1
 800f116:	f7ff bba0 	b.w	800e85a <_strtod_l+0x2f2>
 800f11a:	bf00      	nop
 800f11c:	f3af 8000 	nop.w
 800f120:	ffc00000 	.word	0xffc00000
 800f124:	41dfffff 	.word	0x41dfffff
 800f128:	94a03595 	.word	0x94a03595
 800f12c:	3fcfffff 	.word	0x3fcfffff

0800f130 <_strtod_r>:
 800f130:	4b01      	ldr	r3, [pc, #4]	@ (800f138 <_strtod_r+0x8>)
 800f132:	f7ff ba19 	b.w	800e568 <_strtod_l>
 800f136:	bf00      	nop
 800f138:	2000d190 	.word	0x2000d190

0800f13c <_strtol_l.isra.0>:
 800f13c:	2b24      	cmp	r3, #36	@ 0x24
 800f13e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f142:	4686      	mov	lr, r0
 800f144:	4690      	mov	r8, r2
 800f146:	d801      	bhi.n	800f14c <_strtol_l.isra.0+0x10>
 800f148:	2b01      	cmp	r3, #1
 800f14a:	d106      	bne.n	800f15a <_strtol_l.isra.0+0x1e>
 800f14c:	f7fd fd8a 	bl	800cc64 <__errno>
 800f150:	2316      	movs	r3, #22
 800f152:	6003      	str	r3, [r0, #0]
 800f154:	2000      	movs	r0, #0
 800f156:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f15a:	4834      	ldr	r0, [pc, #208]	@ (800f22c <_strtol_l.isra.0+0xf0>)
 800f15c:	460d      	mov	r5, r1
 800f15e:	462a      	mov	r2, r5
 800f160:	f815 4b01 	ldrb.w	r4, [r5], #1
 800f164:	5d06      	ldrb	r6, [r0, r4]
 800f166:	f016 0608 	ands.w	r6, r6, #8
 800f16a:	d1f8      	bne.n	800f15e <_strtol_l.isra.0+0x22>
 800f16c:	2c2d      	cmp	r4, #45	@ 0x2d
 800f16e:	d110      	bne.n	800f192 <_strtol_l.isra.0+0x56>
 800f170:	782c      	ldrb	r4, [r5, #0]
 800f172:	2601      	movs	r6, #1
 800f174:	1c95      	adds	r5, r2, #2
 800f176:	f033 0210 	bics.w	r2, r3, #16
 800f17a:	d115      	bne.n	800f1a8 <_strtol_l.isra.0+0x6c>
 800f17c:	2c30      	cmp	r4, #48	@ 0x30
 800f17e:	d10d      	bne.n	800f19c <_strtol_l.isra.0+0x60>
 800f180:	782a      	ldrb	r2, [r5, #0]
 800f182:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800f186:	2a58      	cmp	r2, #88	@ 0x58
 800f188:	d108      	bne.n	800f19c <_strtol_l.isra.0+0x60>
 800f18a:	786c      	ldrb	r4, [r5, #1]
 800f18c:	3502      	adds	r5, #2
 800f18e:	2310      	movs	r3, #16
 800f190:	e00a      	b.n	800f1a8 <_strtol_l.isra.0+0x6c>
 800f192:	2c2b      	cmp	r4, #43	@ 0x2b
 800f194:	bf04      	itt	eq
 800f196:	782c      	ldrbeq	r4, [r5, #0]
 800f198:	1c95      	addeq	r5, r2, #2
 800f19a:	e7ec      	b.n	800f176 <_strtol_l.isra.0+0x3a>
 800f19c:	2b00      	cmp	r3, #0
 800f19e:	d1f6      	bne.n	800f18e <_strtol_l.isra.0+0x52>
 800f1a0:	2c30      	cmp	r4, #48	@ 0x30
 800f1a2:	bf14      	ite	ne
 800f1a4:	230a      	movne	r3, #10
 800f1a6:	2308      	moveq	r3, #8
 800f1a8:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800f1ac:	f10c 3cff 	add.w	ip, ip, #4294967295
 800f1b0:	2200      	movs	r2, #0
 800f1b2:	fbbc f9f3 	udiv	r9, ip, r3
 800f1b6:	4610      	mov	r0, r2
 800f1b8:	fb03 ca19 	mls	sl, r3, r9, ip
 800f1bc:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800f1c0:	2f09      	cmp	r7, #9
 800f1c2:	d80f      	bhi.n	800f1e4 <_strtol_l.isra.0+0xa8>
 800f1c4:	463c      	mov	r4, r7
 800f1c6:	42a3      	cmp	r3, r4
 800f1c8:	dd1b      	ble.n	800f202 <_strtol_l.isra.0+0xc6>
 800f1ca:	1c57      	adds	r7, r2, #1
 800f1cc:	d007      	beq.n	800f1de <_strtol_l.isra.0+0xa2>
 800f1ce:	4581      	cmp	r9, r0
 800f1d0:	d314      	bcc.n	800f1fc <_strtol_l.isra.0+0xc0>
 800f1d2:	d101      	bne.n	800f1d8 <_strtol_l.isra.0+0x9c>
 800f1d4:	45a2      	cmp	sl, r4
 800f1d6:	db11      	blt.n	800f1fc <_strtol_l.isra.0+0xc0>
 800f1d8:	fb00 4003 	mla	r0, r0, r3, r4
 800f1dc:	2201      	movs	r2, #1
 800f1de:	f815 4b01 	ldrb.w	r4, [r5], #1
 800f1e2:	e7eb      	b.n	800f1bc <_strtol_l.isra.0+0x80>
 800f1e4:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800f1e8:	2f19      	cmp	r7, #25
 800f1ea:	d801      	bhi.n	800f1f0 <_strtol_l.isra.0+0xb4>
 800f1ec:	3c37      	subs	r4, #55	@ 0x37
 800f1ee:	e7ea      	b.n	800f1c6 <_strtol_l.isra.0+0x8a>
 800f1f0:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800f1f4:	2f19      	cmp	r7, #25
 800f1f6:	d804      	bhi.n	800f202 <_strtol_l.isra.0+0xc6>
 800f1f8:	3c57      	subs	r4, #87	@ 0x57
 800f1fa:	e7e4      	b.n	800f1c6 <_strtol_l.isra.0+0x8a>
 800f1fc:	f04f 32ff 	mov.w	r2, #4294967295
 800f200:	e7ed      	b.n	800f1de <_strtol_l.isra.0+0xa2>
 800f202:	1c53      	adds	r3, r2, #1
 800f204:	d108      	bne.n	800f218 <_strtol_l.isra.0+0xdc>
 800f206:	2322      	movs	r3, #34	@ 0x22
 800f208:	f8ce 3000 	str.w	r3, [lr]
 800f20c:	4660      	mov	r0, ip
 800f20e:	f1b8 0f00 	cmp.w	r8, #0
 800f212:	d0a0      	beq.n	800f156 <_strtol_l.isra.0+0x1a>
 800f214:	1e69      	subs	r1, r5, #1
 800f216:	e006      	b.n	800f226 <_strtol_l.isra.0+0xea>
 800f218:	b106      	cbz	r6, 800f21c <_strtol_l.isra.0+0xe0>
 800f21a:	4240      	negs	r0, r0
 800f21c:	f1b8 0f00 	cmp.w	r8, #0
 800f220:	d099      	beq.n	800f156 <_strtol_l.isra.0+0x1a>
 800f222:	2a00      	cmp	r2, #0
 800f224:	d1f6      	bne.n	800f214 <_strtol_l.isra.0+0xd8>
 800f226:	f8c8 1000 	str.w	r1, [r8]
 800f22a:	e794      	b.n	800f156 <_strtol_l.isra.0+0x1a>
 800f22c:	08011e09 	.word	0x08011e09

0800f230 <_strtol_r>:
 800f230:	f7ff bf84 	b.w	800f13c <_strtol_l.isra.0>

0800f234 <__ssputs_r>:
 800f234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f238:	688e      	ldr	r6, [r1, #8]
 800f23a:	461f      	mov	r7, r3
 800f23c:	42be      	cmp	r6, r7
 800f23e:	680b      	ldr	r3, [r1, #0]
 800f240:	4682      	mov	sl, r0
 800f242:	460c      	mov	r4, r1
 800f244:	4690      	mov	r8, r2
 800f246:	d82d      	bhi.n	800f2a4 <__ssputs_r+0x70>
 800f248:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800f24c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800f250:	d026      	beq.n	800f2a0 <__ssputs_r+0x6c>
 800f252:	6965      	ldr	r5, [r4, #20]
 800f254:	6909      	ldr	r1, [r1, #16]
 800f256:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800f25a:	eba3 0901 	sub.w	r9, r3, r1
 800f25e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800f262:	1c7b      	adds	r3, r7, #1
 800f264:	444b      	add	r3, r9
 800f266:	106d      	asrs	r5, r5, #1
 800f268:	429d      	cmp	r5, r3
 800f26a:	bf38      	it	cc
 800f26c:	461d      	movcc	r5, r3
 800f26e:	0553      	lsls	r3, r2, #21
 800f270:	d527      	bpl.n	800f2c2 <__ssputs_r+0x8e>
 800f272:	4629      	mov	r1, r5
 800f274:	f7fe fc24 	bl	800dac0 <_malloc_r>
 800f278:	4606      	mov	r6, r0
 800f27a:	b360      	cbz	r0, 800f2d6 <__ssputs_r+0xa2>
 800f27c:	6921      	ldr	r1, [r4, #16]
 800f27e:	464a      	mov	r2, r9
 800f280:	f7fd fd1d 	bl	800ccbe <memcpy>
 800f284:	89a3      	ldrh	r3, [r4, #12]
 800f286:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800f28a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800f28e:	81a3      	strh	r3, [r4, #12]
 800f290:	6126      	str	r6, [r4, #16]
 800f292:	6165      	str	r5, [r4, #20]
 800f294:	444e      	add	r6, r9
 800f296:	eba5 0509 	sub.w	r5, r5, r9
 800f29a:	6026      	str	r6, [r4, #0]
 800f29c:	60a5      	str	r5, [r4, #8]
 800f29e:	463e      	mov	r6, r7
 800f2a0:	42be      	cmp	r6, r7
 800f2a2:	d900      	bls.n	800f2a6 <__ssputs_r+0x72>
 800f2a4:	463e      	mov	r6, r7
 800f2a6:	6820      	ldr	r0, [r4, #0]
 800f2a8:	4632      	mov	r2, r6
 800f2aa:	4641      	mov	r1, r8
 800f2ac:	f000 fb7c 	bl	800f9a8 <memmove>
 800f2b0:	68a3      	ldr	r3, [r4, #8]
 800f2b2:	1b9b      	subs	r3, r3, r6
 800f2b4:	60a3      	str	r3, [r4, #8]
 800f2b6:	6823      	ldr	r3, [r4, #0]
 800f2b8:	4433      	add	r3, r6
 800f2ba:	6023      	str	r3, [r4, #0]
 800f2bc:	2000      	movs	r0, #0
 800f2be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f2c2:	462a      	mov	r2, r5
 800f2c4:	f000 ff3d 	bl	8010142 <_realloc_r>
 800f2c8:	4606      	mov	r6, r0
 800f2ca:	2800      	cmp	r0, #0
 800f2cc:	d1e0      	bne.n	800f290 <__ssputs_r+0x5c>
 800f2ce:	6921      	ldr	r1, [r4, #16]
 800f2d0:	4650      	mov	r0, sl
 800f2d2:	f7fe fb81 	bl	800d9d8 <_free_r>
 800f2d6:	230c      	movs	r3, #12
 800f2d8:	f8ca 3000 	str.w	r3, [sl]
 800f2dc:	89a3      	ldrh	r3, [r4, #12]
 800f2de:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f2e2:	81a3      	strh	r3, [r4, #12]
 800f2e4:	f04f 30ff 	mov.w	r0, #4294967295
 800f2e8:	e7e9      	b.n	800f2be <__ssputs_r+0x8a>
	...

0800f2ec <_svfiprintf_r>:
 800f2ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f2f0:	4698      	mov	r8, r3
 800f2f2:	898b      	ldrh	r3, [r1, #12]
 800f2f4:	061b      	lsls	r3, r3, #24
 800f2f6:	b09d      	sub	sp, #116	@ 0x74
 800f2f8:	4607      	mov	r7, r0
 800f2fa:	460d      	mov	r5, r1
 800f2fc:	4614      	mov	r4, r2
 800f2fe:	d510      	bpl.n	800f322 <_svfiprintf_r+0x36>
 800f300:	690b      	ldr	r3, [r1, #16]
 800f302:	b973      	cbnz	r3, 800f322 <_svfiprintf_r+0x36>
 800f304:	2140      	movs	r1, #64	@ 0x40
 800f306:	f7fe fbdb 	bl	800dac0 <_malloc_r>
 800f30a:	6028      	str	r0, [r5, #0]
 800f30c:	6128      	str	r0, [r5, #16]
 800f30e:	b930      	cbnz	r0, 800f31e <_svfiprintf_r+0x32>
 800f310:	230c      	movs	r3, #12
 800f312:	603b      	str	r3, [r7, #0]
 800f314:	f04f 30ff 	mov.w	r0, #4294967295
 800f318:	b01d      	add	sp, #116	@ 0x74
 800f31a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f31e:	2340      	movs	r3, #64	@ 0x40
 800f320:	616b      	str	r3, [r5, #20]
 800f322:	2300      	movs	r3, #0
 800f324:	9309      	str	r3, [sp, #36]	@ 0x24
 800f326:	2320      	movs	r3, #32
 800f328:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800f32c:	f8cd 800c 	str.w	r8, [sp, #12]
 800f330:	2330      	movs	r3, #48	@ 0x30
 800f332:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800f4d0 <_svfiprintf_r+0x1e4>
 800f336:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800f33a:	f04f 0901 	mov.w	r9, #1
 800f33e:	4623      	mov	r3, r4
 800f340:	469a      	mov	sl, r3
 800f342:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f346:	b10a      	cbz	r2, 800f34c <_svfiprintf_r+0x60>
 800f348:	2a25      	cmp	r2, #37	@ 0x25
 800f34a:	d1f9      	bne.n	800f340 <_svfiprintf_r+0x54>
 800f34c:	ebba 0b04 	subs.w	fp, sl, r4
 800f350:	d00b      	beq.n	800f36a <_svfiprintf_r+0x7e>
 800f352:	465b      	mov	r3, fp
 800f354:	4622      	mov	r2, r4
 800f356:	4629      	mov	r1, r5
 800f358:	4638      	mov	r0, r7
 800f35a:	f7ff ff6b 	bl	800f234 <__ssputs_r>
 800f35e:	3001      	adds	r0, #1
 800f360:	f000 80a7 	beq.w	800f4b2 <_svfiprintf_r+0x1c6>
 800f364:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f366:	445a      	add	r2, fp
 800f368:	9209      	str	r2, [sp, #36]	@ 0x24
 800f36a:	f89a 3000 	ldrb.w	r3, [sl]
 800f36e:	2b00      	cmp	r3, #0
 800f370:	f000 809f 	beq.w	800f4b2 <_svfiprintf_r+0x1c6>
 800f374:	2300      	movs	r3, #0
 800f376:	f04f 32ff 	mov.w	r2, #4294967295
 800f37a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f37e:	f10a 0a01 	add.w	sl, sl, #1
 800f382:	9304      	str	r3, [sp, #16]
 800f384:	9307      	str	r3, [sp, #28]
 800f386:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800f38a:	931a      	str	r3, [sp, #104]	@ 0x68
 800f38c:	4654      	mov	r4, sl
 800f38e:	2205      	movs	r2, #5
 800f390:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f394:	484e      	ldr	r0, [pc, #312]	@ (800f4d0 <_svfiprintf_r+0x1e4>)
 800f396:	f7f0 ff23 	bl	80001e0 <memchr>
 800f39a:	9a04      	ldr	r2, [sp, #16]
 800f39c:	b9d8      	cbnz	r0, 800f3d6 <_svfiprintf_r+0xea>
 800f39e:	06d0      	lsls	r0, r2, #27
 800f3a0:	bf44      	itt	mi
 800f3a2:	2320      	movmi	r3, #32
 800f3a4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f3a8:	0711      	lsls	r1, r2, #28
 800f3aa:	bf44      	itt	mi
 800f3ac:	232b      	movmi	r3, #43	@ 0x2b
 800f3ae:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f3b2:	f89a 3000 	ldrb.w	r3, [sl]
 800f3b6:	2b2a      	cmp	r3, #42	@ 0x2a
 800f3b8:	d015      	beq.n	800f3e6 <_svfiprintf_r+0xfa>
 800f3ba:	9a07      	ldr	r2, [sp, #28]
 800f3bc:	4654      	mov	r4, sl
 800f3be:	2000      	movs	r0, #0
 800f3c0:	f04f 0c0a 	mov.w	ip, #10
 800f3c4:	4621      	mov	r1, r4
 800f3c6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f3ca:	3b30      	subs	r3, #48	@ 0x30
 800f3cc:	2b09      	cmp	r3, #9
 800f3ce:	d94b      	bls.n	800f468 <_svfiprintf_r+0x17c>
 800f3d0:	b1b0      	cbz	r0, 800f400 <_svfiprintf_r+0x114>
 800f3d2:	9207      	str	r2, [sp, #28]
 800f3d4:	e014      	b.n	800f400 <_svfiprintf_r+0x114>
 800f3d6:	eba0 0308 	sub.w	r3, r0, r8
 800f3da:	fa09 f303 	lsl.w	r3, r9, r3
 800f3de:	4313      	orrs	r3, r2
 800f3e0:	9304      	str	r3, [sp, #16]
 800f3e2:	46a2      	mov	sl, r4
 800f3e4:	e7d2      	b.n	800f38c <_svfiprintf_r+0xa0>
 800f3e6:	9b03      	ldr	r3, [sp, #12]
 800f3e8:	1d19      	adds	r1, r3, #4
 800f3ea:	681b      	ldr	r3, [r3, #0]
 800f3ec:	9103      	str	r1, [sp, #12]
 800f3ee:	2b00      	cmp	r3, #0
 800f3f0:	bfbb      	ittet	lt
 800f3f2:	425b      	neglt	r3, r3
 800f3f4:	f042 0202 	orrlt.w	r2, r2, #2
 800f3f8:	9307      	strge	r3, [sp, #28]
 800f3fa:	9307      	strlt	r3, [sp, #28]
 800f3fc:	bfb8      	it	lt
 800f3fe:	9204      	strlt	r2, [sp, #16]
 800f400:	7823      	ldrb	r3, [r4, #0]
 800f402:	2b2e      	cmp	r3, #46	@ 0x2e
 800f404:	d10a      	bne.n	800f41c <_svfiprintf_r+0x130>
 800f406:	7863      	ldrb	r3, [r4, #1]
 800f408:	2b2a      	cmp	r3, #42	@ 0x2a
 800f40a:	d132      	bne.n	800f472 <_svfiprintf_r+0x186>
 800f40c:	9b03      	ldr	r3, [sp, #12]
 800f40e:	1d1a      	adds	r2, r3, #4
 800f410:	681b      	ldr	r3, [r3, #0]
 800f412:	9203      	str	r2, [sp, #12]
 800f414:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800f418:	3402      	adds	r4, #2
 800f41a:	9305      	str	r3, [sp, #20]
 800f41c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800f4e0 <_svfiprintf_r+0x1f4>
 800f420:	7821      	ldrb	r1, [r4, #0]
 800f422:	2203      	movs	r2, #3
 800f424:	4650      	mov	r0, sl
 800f426:	f7f0 fedb 	bl	80001e0 <memchr>
 800f42a:	b138      	cbz	r0, 800f43c <_svfiprintf_r+0x150>
 800f42c:	9b04      	ldr	r3, [sp, #16]
 800f42e:	eba0 000a 	sub.w	r0, r0, sl
 800f432:	2240      	movs	r2, #64	@ 0x40
 800f434:	4082      	lsls	r2, r0
 800f436:	4313      	orrs	r3, r2
 800f438:	3401      	adds	r4, #1
 800f43a:	9304      	str	r3, [sp, #16]
 800f43c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f440:	4824      	ldr	r0, [pc, #144]	@ (800f4d4 <_svfiprintf_r+0x1e8>)
 800f442:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800f446:	2206      	movs	r2, #6
 800f448:	f7f0 feca 	bl	80001e0 <memchr>
 800f44c:	2800      	cmp	r0, #0
 800f44e:	d036      	beq.n	800f4be <_svfiprintf_r+0x1d2>
 800f450:	4b21      	ldr	r3, [pc, #132]	@ (800f4d8 <_svfiprintf_r+0x1ec>)
 800f452:	bb1b      	cbnz	r3, 800f49c <_svfiprintf_r+0x1b0>
 800f454:	9b03      	ldr	r3, [sp, #12]
 800f456:	3307      	adds	r3, #7
 800f458:	f023 0307 	bic.w	r3, r3, #7
 800f45c:	3308      	adds	r3, #8
 800f45e:	9303      	str	r3, [sp, #12]
 800f460:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f462:	4433      	add	r3, r6
 800f464:	9309      	str	r3, [sp, #36]	@ 0x24
 800f466:	e76a      	b.n	800f33e <_svfiprintf_r+0x52>
 800f468:	fb0c 3202 	mla	r2, ip, r2, r3
 800f46c:	460c      	mov	r4, r1
 800f46e:	2001      	movs	r0, #1
 800f470:	e7a8      	b.n	800f3c4 <_svfiprintf_r+0xd8>
 800f472:	2300      	movs	r3, #0
 800f474:	3401      	adds	r4, #1
 800f476:	9305      	str	r3, [sp, #20]
 800f478:	4619      	mov	r1, r3
 800f47a:	f04f 0c0a 	mov.w	ip, #10
 800f47e:	4620      	mov	r0, r4
 800f480:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f484:	3a30      	subs	r2, #48	@ 0x30
 800f486:	2a09      	cmp	r2, #9
 800f488:	d903      	bls.n	800f492 <_svfiprintf_r+0x1a6>
 800f48a:	2b00      	cmp	r3, #0
 800f48c:	d0c6      	beq.n	800f41c <_svfiprintf_r+0x130>
 800f48e:	9105      	str	r1, [sp, #20]
 800f490:	e7c4      	b.n	800f41c <_svfiprintf_r+0x130>
 800f492:	fb0c 2101 	mla	r1, ip, r1, r2
 800f496:	4604      	mov	r4, r0
 800f498:	2301      	movs	r3, #1
 800f49a:	e7f0      	b.n	800f47e <_svfiprintf_r+0x192>
 800f49c:	ab03      	add	r3, sp, #12
 800f49e:	9300      	str	r3, [sp, #0]
 800f4a0:	462a      	mov	r2, r5
 800f4a2:	4b0e      	ldr	r3, [pc, #56]	@ (800f4dc <_svfiprintf_r+0x1f0>)
 800f4a4:	a904      	add	r1, sp, #16
 800f4a6:	4638      	mov	r0, r7
 800f4a8:	f7fc fb64 	bl	800bb74 <_printf_float>
 800f4ac:	1c42      	adds	r2, r0, #1
 800f4ae:	4606      	mov	r6, r0
 800f4b0:	d1d6      	bne.n	800f460 <_svfiprintf_r+0x174>
 800f4b2:	89ab      	ldrh	r3, [r5, #12]
 800f4b4:	065b      	lsls	r3, r3, #25
 800f4b6:	f53f af2d 	bmi.w	800f314 <_svfiprintf_r+0x28>
 800f4ba:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800f4bc:	e72c      	b.n	800f318 <_svfiprintf_r+0x2c>
 800f4be:	ab03      	add	r3, sp, #12
 800f4c0:	9300      	str	r3, [sp, #0]
 800f4c2:	462a      	mov	r2, r5
 800f4c4:	4b05      	ldr	r3, [pc, #20]	@ (800f4dc <_svfiprintf_r+0x1f0>)
 800f4c6:	a904      	add	r1, sp, #16
 800f4c8:	4638      	mov	r0, r7
 800f4ca:	f7fc fdeb 	bl	800c0a4 <_printf_i>
 800f4ce:	e7ed      	b.n	800f4ac <_svfiprintf_r+0x1c0>
 800f4d0:	08011c41 	.word	0x08011c41
 800f4d4:	08011c4b 	.word	0x08011c4b
 800f4d8:	0800bb75 	.word	0x0800bb75
 800f4dc:	0800f235 	.word	0x0800f235
 800f4e0:	08011c47 	.word	0x08011c47

0800f4e4 <__sfputc_r>:
 800f4e4:	6893      	ldr	r3, [r2, #8]
 800f4e6:	3b01      	subs	r3, #1
 800f4e8:	2b00      	cmp	r3, #0
 800f4ea:	b410      	push	{r4}
 800f4ec:	6093      	str	r3, [r2, #8]
 800f4ee:	da08      	bge.n	800f502 <__sfputc_r+0x1e>
 800f4f0:	6994      	ldr	r4, [r2, #24]
 800f4f2:	42a3      	cmp	r3, r4
 800f4f4:	db01      	blt.n	800f4fa <__sfputc_r+0x16>
 800f4f6:	290a      	cmp	r1, #10
 800f4f8:	d103      	bne.n	800f502 <__sfputc_r+0x1e>
 800f4fa:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f4fe:	f7fd baca 	b.w	800ca96 <__swbuf_r>
 800f502:	6813      	ldr	r3, [r2, #0]
 800f504:	1c58      	adds	r0, r3, #1
 800f506:	6010      	str	r0, [r2, #0]
 800f508:	7019      	strb	r1, [r3, #0]
 800f50a:	4608      	mov	r0, r1
 800f50c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f510:	4770      	bx	lr

0800f512 <__sfputs_r>:
 800f512:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f514:	4606      	mov	r6, r0
 800f516:	460f      	mov	r7, r1
 800f518:	4614      	mov	r4, r2
 800f51a:	18d5      	adds	r5, r2, r3
 800f51c:	42ac      	cmp	r4, r5
 800f51e:	d101      	bne.n	800f524 <__sfputs_r+0x12>
 800f520:	2000      	movs	r0, #0
 800f522:	e007      	b.n	800f534 <__sfputs_r+0x22>
 800f524:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f528:	463a      	mov	r2, r7
 800f52a:	4630      	mov	r0, r6
 800f52c:	f7ff ffda 	bl	800f4e4 <__sfputc_r>
 800f530:	1c43      	adds	r3, r0, #1
 800f532:	d1f3      	bne.n	800f51c <__sfputs_r+0xa>
 800f534:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800f538 <_vfiprintf_r>:
 800f538:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f53c:	460d      	mov	r5, r1
 800f53e:	b09d      	sub	sp, #116	@ 0x74
 800f540:	4614      	mov	r4, r2
 800f542:	4698      	mov	r8, r3
 800f544:	4606      	mov	r6, r0
 800f546:	b118      	cbz	r0, 800f550 <_vfiprintf_r+0x18>
 800f548:	6a03      	ldr	r3, [r0, #32]
 800f54a:	b90b      	cbnz	r3, 800f550 <_vfiprintf_r+0x18>
 800f54c:	f7fd f962 	bl	800c814 <__sinit>
 800f550:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800f552:	07d9      	lsls	r1, r3, #31
 800f554:	d405      	bmi.n	800f562 <_vfiprintf_r+0x2a>
 800f556:	89ab      	ldrh	r3, [r5, #12]
 800f558:	059a      	lsls	r2, r3, #22
 800f55a:	d402      	bmi.n	800f562 <_vfiprintf_r+0x2a>
 800f55c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800f55e:	f7fd fbac 	bl	800ccba <__retarget_lock_acquire_recursive>
 800f562:	89ab      	ldrh	r3, [r5, #12]
 800f564:	071b      	lsls	r3, r3, #28
 800f566:	d501      	bpl.n	800f56c <_vfiprintf_r+0x34>
 800f568:	692b      	ldr	r3, [r5, #16]
 800f56a:	b99b      	cbnz	r3, 800f594 <_vfiprintf_r+0x5c>
 800f56c:	4629      	mov	r1, r5
 800f56e:	4630      	mov	r0, r6
 800f570:	f7fd fad0 	bl	800cb14 <__swsetup_r>
 800f574:	b170      	cbz	r0, 800f594 <_vfiprintf_r+0x5c>
 800f576:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800f578:	07dc      	lsls	r4, r3, #31
 800f57a:	d504      	bpl.n	800f586 <_vfiprintf_r+0x4e>
 800f57c:	f04f 30ff 	mov.w	r0, #4294967295
 800f580:	b01d      	add	sp, #116	@ 0x74
 800f582:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f586:	89ab      	ldrh	r3, [r5, #12]
 800f588:	0598      	lsls	r0, r3, #22
 800f58a:	d4f7      	bmi.n	800f57c <_vfiprintf_r+0x44>
 800f58c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800f58e:	f7fd fb95 	bl	800ccbc <__retarget_lock_release_recursive>
 800f592:	e7f3      	b.n	800f57c <_vfiprintf_r+0x44>
 800f594:	2300      	movs	r3, #0
 800f596:	9309      	str	r3, [sp, #36]	@ 0x24
 800f598:	2320      	movs	r3, #32
 800f59a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800f59e:	f8cd 800c 	str.w	r8, [sp, #12]
 800f5a2:	2330      	movs	r3, #48	@ 0x30
 800f5a4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800f754 <_vfiprintf_r+0x21c>
 800f5a8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800f5ac:	f04f 0901 	mov.w	r9, #1
 800f5b0:	4623      	mov	r3, r4
 800f5b2:	469a      	mov	sl, r3
 800f5b4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f5b8:	b10a      	cbz	r2, 800f5be <_vfiprintf_r+0x86>
 800f5ba:	2a25      	cmp	r2, #37	@ 0x25
 800f5bc:	d1f9      	bne.n	800f5b2 <_vfiprintf_r+0x7a>
 800f5be:	ebba 0b04 	subs.w	fp, sl, r4
 800f5c2:	d00b      	beq.n	800f5dc <_vfiprintf_r+0xa4>
 800f5c4:	465b      	mov	r3, fp
 800f5c6:	4622      	mov	r2, r4
 800f5c8:	4629      	mov	r1, r5
 800f5ca:	4630      	mov	r0, r6
 800f5cc:	f7ff ffa1 	bl	800f512 <__sfputs_r>
 800f5d0:	3001      	adds	r0, #1
 800f5d2:	f000 80a7 	beq.w	800f724 <_vfiprintf_r+0x1ec>
 800f5d6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f5d8:	445a      	add	r2, fp
 800f5da:	9209      	str	r2, [sp, #36]	@ 0x24
 800f5dc:	f89a 3000 	ldrb.w	r3, [sl]
 800f5e0:	2b00      	cmp	r3, #0
 800f5e2:	f000 809f 	beq.w	800f724 <_vfiprintf_r+0x1ec>
 800f5e6:	2300      	movs	r3, #0
 800f5e8:	f04f 32ff 	mov.w	r2, #4294967295
 800f5ec:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f5f0:	f10a 0a01 	add.w	sl, sl, #1
 800f5f4:	9304      	str	r3, [sp, #16]
 800f5f6:	9307      	str	r3, [sp, #28]
 800f5f8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800f5fc:	931a      	str	r3, [sp, #104]	@ 0x68
 800f5fe:	4654      	mov	r4, sl
 800f600:	2205      	movs	r2, #5
 800f602:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f606:	4853      	ldr	r0, [pc, #332]	@ (800f754 <_vfiprintf_r+0x21c>)
 800f608:	f7f0 fdea 	bl	80001e0 <memchr>
 800f60c:	9a04      	ldr	r2, [sp, #16]
 800f60e:	b9d8      	cbnz	r0, 800f648 <_vfiprintf_r+0x110>
 800f610:	06d1      	lsls	r1, r2, #27
 800f612:	bf44      	itt	mi
 800f614:	2320      	movmi	r3, #32
 800f616:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f61a:	0713      	lsls	r3, r2, #28
 800f61c:	bf44      	itt	mi
 800f61e:	232b      	movmi	r3, #43	@ 0x2b
 800f620:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f624:	f89a 3000 	ldrb.w	r3, [sl]
 800f628:	2b2a      	cmp	r3, #42	@ 0x2a
 800f62a:	d015      	beq.n	800f658 <_vfiprintf_r+0x120>
 800f62c:	9a07      	ldr	r2, [sp, #28]
 800f62e:	4654      	mov	r4, sl
 800f630:	2000      	movs	r0, #0
 800f632:	f04f 0c0a 	mov.w	ip, #10
 800f636:	4621      	mov	r1, r4
 800f638:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f63c:	3b30      	subs	r3, #48	@ 0x30
 800f63e:	2b09      	cmp	r3, #9
 800f640:	d94b      	bls.n	800f6da <_vfiprintf_r+0x1a2>
 800f642:	b1b0      	cbz	r0, 800f672 <_vfiprintf_r+0x13a>
 800f644:	9207      	str	r2, [sp, #28]
 800f646:	e014      	b.n	800f672 <_vfiprintf_r+0x13a>
 800f648:	eba0 0308 	sub.w	r3, r0, r8
 800f64c:	fa09 f303 	lsl.w	r3, r9, r3
 800f650:	4313      	orrs	r3, r2
 800f652:	9304      	str	r3, [sp, #16]
 800f654:	46a2      	mov	sl, r4
 800f656:	e7d2      	b.n	800f5fe <_vfiprintf_r+0xc6>
 800f658:	9b03      	ldr	r3, [sp, #12]
 800f65a:	1d19      	adds	r1, r3, #4
 800f65c:	681b      	ldr	r3, [r3, #0]
 800f65e:	9103      	str	r1, [sp, #12]
 800f660:	2b00      	cmp	r3, #0
 800f662:	bfbb      	ittet	lt
 800f664:	425b      	neglt	r3, r3
 800f666:	f042 0202 	orrlt.w	r2, r2, #2
 800f66a:	9307      	strge	r3, [sp, #28]
 800f66c:	9307      	strlt	r3, [sp, #28]
 800f66e:	bfb8      	it	lt
 800f670:	9204      	strlt	r2, [sp, #16]
 800f672:	7823      	ldrb	r3, [r4, #0]
 800f674:	2b2e      	cmp	r3, #46	@ 0x2e
 800f676:	d10a      	bne.n	800f68e <_vfiprintf_r+0x156>
 800f678:	7863      	ldrb	r3, [r4, #1]
 800f67a:	2b2a      	cmp	r3, #42	@ 0x2a
 800f67c:	d132      	bne.n	800f6e4 <_vfiprintf_r+0x1ac>
 800f67e:	9b03      	ldr	r3, [sp, #12]
 800f680:	1d1a      	adds	r2, r3, #4
 800f682:	681b      	ldr	r3, [r3, #0]
 800f684:	9203      	str	r2, [sp, #12]
 800f686:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800f68a:	3402      	adds	r4, #2
 800f68c:	9305      	str	r3, [sp, #20]
 800f68e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800f764 <_vfiprintf_r+0x22c>
 800f692:	7821      	ldrb	r1, [r4, #0]
 800f694:	2203      	movs	r2, #3
 800f696:	4650      	mov	r0, sl
 800f698:	f7f0 fda2 	bl	80001e0 <memchr>
 800f69c:	b138      	cbz	r0, 800f6ae <_vfiprintf_r+0x176>
 800f69e:	9b04      	ldr	r3, [sp, #16]
 800f6a0:	eba0 000a 	sub.w	r0, r0, sl
 800f6a4:	2240      	movs	r2, #64	@ 0x40
 800f6a6:	4082      	lsls	r2, r0
 800f6a8:	4313      	orrs	r3, r2
 800f6aa:	3401      	adds	r4, #1
 800f6ac:	9304      	str	r3, [sp, #16]
 800f6ae:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f6b2:	4829      	ldr	r0, [pc, #164]	@ (800f758 <_vfiprintf_r+0x220>)
 800f6b4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800f6b8:	2206      	movs	r2, #6
 800f6ba:	f7f0 fd91 	bl	80001e0 <memchr>
 800f6be:	2800      	cmp	r0, #0
 800f6c0:	d03f      	beq.n	800f742 <_vfiprintf_r+0x20a>
 800f6c2:	4b26      	ldr	r3, [pc, #152]	@ (800f75c <_vfiprintf_r+0x224>)
 800f6c4:	bb1b      	cbnz	r3, 800f70e <_vfiprintf_r+0x1d6>
 800f6c6:	9b03      	ldr	r3, [sp, #12]
 800f6c8:	3307      	adds	r3, #7
 800f6ca:	f023 0307 	bic.w	r3, r3, #7
 800f6ce:	3308      	adds	r3, #8
 800f6d0:	9303      	str	r3, [sp, #12]
 800f6d2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f6d4:	443b      	add	r3, r7
 800f6d6:	9309      	str	r3, [sp, #36]	@ 0x24
 800f6d8:	e76a      	b.n	800f5b0 <_vfiprintf_r+0x78>
 800f6da:	fb0c 3202 	mla	r2, ip, r2, r3
 800f6de:	460c      	mov	r4, r1
 800f6e0:	2001      	movs	r0, #1
 800f6e2:	e7a8      	b.n	800f636 <_vfiprintf_r+0xfe>
 800f6e4:	2300      	movs	r3, #0
 800f6e6:	3401      	adds	r4, #1
 800f6e8:	9305      	str	r3, [sp, #20]
 800f6ea:	4619      	mov	r1, r3
 800f6ec:	f04f 0c0a 	mov.w	ip, #10
 800f6f0:	4620      	mov	r0, r4
 800f6f2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f6f6:	3a30      	subs	r2, #48	@ 0x30
 800f6f8:	2a09      	cmp	r2, #9
 800f6fa:	d903      	bls.n	800f704 <_vfiprintf_r+0x1cc>
 800f6fc:	2b00      	cmp	r3, #0
 800f6fe:	d0c6      	beq.n	800f68e <_vfiprintf_r+0x156>
 800f700:	9105      	str	r1, [sp, #20]
 800f702:	e7c4      	b.n	800f68e <_vfiprintf_r+0x156>
 800f704:	fb0c 2101 	mla	r1, ip, r1, r2
 800f708:	4604      	mov	r4, r0
 800f70a:	2301      	movs	r3, #1
 800f70c:	e7f0      	b.n	800f6f0 <_vfiprintf_r+0x1b8>
 800f70e:	ab03      	add	r3, sp, #12
 800f710:	9300      	str	r3, [sp, #0]
 800f712:	462a      	mov	r2, r5
 800f714:	4b12      	ldr	r3, [pc, #72]	@ (800f760 <_vfiprintf_r+0x228>)
 800f716:	a904      	add	r1, sp, #16
 800f718:	4630      	mov	r0, r6
 800f71a:	f7fc fa2b 	bl	800bb74 <_printf_float>
 800f71e:	4607      	mov	r7, r0
 800f720:	1c78      	adds	r0, r7, #1
 800f722:	d1d6      	bne.n	800f6d2 <_vfiprintf_r+0x19a>
 800f724:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800f726:	07d9      	lsls	r1, r3, #31
 800f728:	d405      	bmi.n	800f736 <_vfiprintf_r+0x1fe>
 800f72a:	89ab      	ldrh	r3, [r5, #12]
 800f72c:	059a      	lsls	r2, r3, #22
 800f72e:	d402      	bmi.n	800f736 <_vfiprintf_r+0x1fe>
 800f730:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800f732:	f7fd fac3 	bl	800ccbc <__retarget_lock_release_recursive>
 800f736:	89ab      	ldrh	r3, [r5, #12]
 800f738:	065b      	lsls	r3, r3, #25
 800f73a:	f53f af1f 	bmi.w	800f57c <_vfiprintf_r+0x44>
 800f73e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800f740:	e71e      	b.n	800f580 <_vfiprintf_r+0x48>
 800f742:	ab03      	add	r3, sp, #12
 800f744:	9300      	str	r3, [sp, #0]
 800f746:	462a      	mov	r2, r5
 800f748:	4b05      	ldr	r3, [pc, #20]	@ (800f760 <_vfiprintf_r+0x228>)
 800f74a:	a904      	add	r1, sp, #16
 800f74c:	4630      	mov	r0, r6
 800f74e:	f7fc fca9 	bl	800c0a4 <_printf_i>
 800f752:	e7e4      	b.n	800f71e <_vfiprintf_r+0x1e6>
 800f754:	08011c41 	.word	0x08011c41
 800f758:	08011c4b 	.word	0x08011c4b
 800f75c:	0800bb75 	.word	0x0800bb75
 800f760:	0800f513 	.word	0x0800f513
 800f764:	08011c47 	.word	0x08011c47

0800f768 <__sflush_r>:
 800f768:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800f76c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f770:	0716      	lsls	r6, r2, #28
 800f772:	4605      	mov	r5, r0
 800f774:	460c      	mov	r4, r1
 800f776:	d454      	bmi.n	800f822 <__sflush_r+0xba>
 800f778:	684b      	ldr	r3, [r1, #4]
 800f77a:	2b00      	cmp	r3, #0
 800f77c:	dc02      	bgt.n	800f784 <__sflush_r+0x1c>
 800f77e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800f780:	2b00      	cmp	r3, #0
 800f782:	dd48      	ble.n	800f816 <__sflush_r+0xae>
 800f784:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800f786:	2e00      	cmp	r6, #0
 800f788:	d045      	beq.n	800f816 <__sflush_r+0xae>
 800f78a:	2300      	movs	r3, #0
 800f78c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800f790:	682f      	ldr	r7, [r5, #0]
 800f792:	6a21      	ldr	r1, [r4, #32]
 800f794:	602b      	str	r3, [r5, #0]
 800f796:	d030      	beq.n	800f7fa <__sflush_r+0x92>
 800f798:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800f79a:	89a3      	ldrh	r3, [r4, #12]
 800f79c:	0759      	lsls	r1, r3, #29
 800f79e:	d505      	bpl.n	800f7ac <__sflush_r+0x44>
 800f7a0:	6863      	ldr	r3, [r4, #4]
 800f7a2:	1ad2      	subs	r2, r2, r3
 800f7a4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800f7a6:	b10b      	cbz	r3, 800f7ac <__sflush_r+0x44>
 800f7a8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800f7aa:	1ad2      	subs	r2, r2, r3
 800f7ac:	2300      	movs	r3, #0
 800f7ae:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800f7b0:	6a21      	ldr	r1, [r4, #32]
 800f7b2:	4628      	mov	r0, r5
 800f7b4:	47b0      	blx	r6
 800f7b6:	1c43      	adds	r3, r0, #1
 800f7b8:	89a3      	ldrh	r3, [r4, #12]
 800f7ba:	d106      	bne.n	800f7ca <__sflush_r+0x62>
 800f7bc:	6829      	ldr	r1, [r5, #0]
 800f7be:	291d      	cmp	r1, #29
 800f7c0:	d82b      	bhi.n	800f81a <__sflush_r+0xb2>
 800f7c2:	4a2a      	ldr	r2, [pc, #168]	@ (800f86c <__sflush_r+0x104>)
 800f7c4:	40ca      	lsrs	r2, r1
 800f7c6:	07d6      	lsls	r6, r2, #31
 800f7c8:	d527      	bpl.n	800f81a <__sflush_r+0xb2>
 800f7ca:	2200      	movs	r2, #0
 800f7cc:	6062      	str	r2, [r4, #4]
 800f7ce:	04d9      	lsls	r1, r3, #19
 800f7d0:	6922      	ldr	r2, [r4, #16]
 800f7d2:	6022      	str	r2, [r4, #0]
 800f7d4:	d504      	bpl.n	800f7e0 <__sflush_r+0x78>
 800f7d6:	1c42      	adds	r2, r0, #1
 800f7d8:	d101      	bne.n	800f7de <__sflush_r+0x76>
 800f7da:	682b      	ldr	r3, [r5, #0]
 800f7dc:	b903      	cbnz	r3, 800f7e0 <__sflush_r+0x78>
 800f7de:	6560      	str	r0, [r4, #84]	@ 0x54
 800f7e0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800f7e2:	602f      	str	r7, [r5, #0]
 800f7e4:	b1b9      	cbz	r1, 800f816 <__sflush_r+0xae>
 800f7e6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800f7ea:	4299      	cmp	r1, r3
 800f7ec:	d002      	beq.n	800f7f4 <__sflush_r+0x8c>
 800f7ee:	4628      	mov	r0, r5
 800f7f0:	f7fe f8f2 	bl	800d9d8 <_free_r>
 800f7f4:	2300      	movs	r3, #0
 800f7f6:	6363      	str	r3, [r4, #52]	@ 0x34
 800f7f8:	e00d      	b.n	800f816 <__sflush_r+0xae>
 800f7fa:	2301      	movs	r3, #1
 800f7fc:	4628      	mov	r0, r5
 800f7fe:	47b0      	blx	r6
 800f800:	4602      	mov	r2, r0
 800f802:	1c50      	adds	r0, r2, #1
 800f804:	d1c9      	bne.n	800f79a <__sflush_r+0x32>
 800f806:	682b      	ldr	r3, [r5, #0]
 800f808:	2b00      	cmp	r3, #0
 800f80a:	d0c6      	beq.n	800f79a <__sflush_r+0x32>
 800f80c:	2b1d      	cmp	r3, #29
 800f80e:	d001      	beq.n	800f814 <__sflush_r+0xac>
 800f810:	2b16      	cmp	r3, #22
 800f812:	d11e      	bne.n	800f852 <__sflush_r+0xea>
 800f814:	602f      	str	r7, [r5, #0]
 800f816:	2000      	movs	r0, #0
 800f818:	e022      	b.n	800f860 <__sflush_r+0xf8>
 800f81a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f81e:	b21b      	sxth	r3, r3
 800f820:	e01b      	b.n	800f85a <__sflush_r+0xf2>
 800f822:	690f      	ldr	r7, [r1, #16]
 800f824:	2f00      	cmp	r7, #0
 800f826:	d0f6      	beq.n	800f816 <__sflush_r+0xae>
 800f828:	0793      	lsls	r3, r2, #30
 800f82a:	680e      	ldr	r6, [r1, #0]
 800f82c:	bf08      	it	eq
 800f82e:	694b      	ldreq	r3, [r1, #20]
 800f830:	600f      	str	r7, [r1, #0]
 800f832:	bf18      	it	ne
 800f834:	2300      	movne	r3, #0
 800f836:	eba6 0807 	sub.w	r8, r6, r7
 800f83a:	608b      	str	r3, [r1, #8]
 800f83c:	f1b8 0f00 	cmp.w	r8, #0
 800f840:	dde9      	ble.n	800f816 <__sflush_r+0xae>
 800f842:	6a21      	ldr	r1, [r4, #32]
 800f844:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800f846:	4643      	mov	r3, r8
 800f848:	463a      	mov	r2, r7
 800f84a:	4628      	mov	r0, r5
 800f84c:	47b0      	blx	r6
 800f84e:	2800      	cmp	r0, #0
 800f850:	dc08      	bgt.n	800f864 <__sflush_r+0xfc>
 800f852:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f856:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f85a:	81a3      	strh	r3, [r4, #12]
 800f85c:	f04f 30ff 	mov.w	r0, #4294967295
 800f860:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f864:	4407      	add	r7, r0
 800f866:	eba8 0800 	sub.w	r8, r8, r0
 800f86a:	e7e7      	b.n	800f83c <__sflush_r+0xd4>
 800f86c:	20400001 	.word	0x20400001

0800f870 <_fflush_r>:
 800f870:	b538      	push	{r3, r4, r5, lr}
 800f872:	690b      	ldr	r3, [r1, #16]
 800f874:	4605      	mov	r5, r0
 800f876:	460c      	mov	r4, r1
 800f878:	b913      	cbnz	r3, 800f880 <_fflush_r+0x10>
 800f87a:	2500      	movs	r5, #0
 800f87c:	4628      	mov	r0, r5
 800f87e:	bd38      	pop	{r3, r4, r5, pc}
 800f880:	b118      	cbz	r0, 800f88a <_fflush_r+0x1a>
 800f882:	6a03      	ldr	r3, [r0, #32]
 800f884:	b90b      	cbnz	r3, 800f88a <_fflush_r+0x1a>
 800f886:	f7fc ffc5 	bl	800c814 <__sinit>
 800f88a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f88e:	2b00      	cmp	r3, #0
 800f890:	d0f3      	beq.n	800f87a <_fflush_r+0xa>
 800f892:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800f894:	07d0      	lsls	r0, r2, #31
 800f896:	d404      	bmi.n	800f8a2 <_fflush_r+0x32>
 800f898:	0599      	lsls	r1, r3, #22
 800f89a:	d402      	bmi.n	800f8a2 <_fflush_r+0x32>
 800f89c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800f89e:	f7fd fa0c 	bl	800ccba <__retarget_lock_acquire_recursive>
 800f8a2:	4628      	mov	r0, r5
 800f8a4:	4621      	mov	r1, r4
 800f8a6:	f7ff ff5f 	bl	800f768 <__sflush_r>
 800f8aa:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800f8ac:	07da      	lsls	r2, r3, #31
 800f8ae:	4605      	mov	r5, r0
 800f8b0:	d4e4      	bmi.n	800f87c <_fflush_r+0xc>
 800f8b2:	89a3      	ldrh	r3, [r4, #12]
 800f8b4:	059b      	lsls	r3, r3, #22
 800f8b6:	d4e1      	bmi.n	800f87c <_fflush_r+0xc>
 800f8b8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800f8ba:	f7fd f9ff 	bl	800ccbc <__retarget_lock_release_recursive>
 800f8be:	e7dd      	b.n	800f87c <_fflush_r+0xc>

0800f8c0 <fiprintf>:
 800f8c0:	b40e      	push	{r1, r2, r3}
 800f8c2:	b503      	push	{r0, r1, lr}
 800f8c4:	4601      	mov	r1, r0
 800f8c6:	ab03      	add	r3, sp, #12
 800f8c8:	4805      	ldr	r0, [pc, #20]	@ (800f8e0 <fiprintf+0x20>)
 800f8ca:	f853 2b04 	ldr.w	r2, [r3], #4
 800f8ce:	6800      	ldr	r0, [r0, #0]
 800f8d0:	9301      	str	r3, [sp, #4]
 800f8d2:	f7ff fe31 	bl	800f538 <_vfiprintf_r>
 800f8d6:	b002      	add	sp, #8
 800f8d8:	f85d eb04 	ldr.w	lr, [sp], #4
 800f8dc:	b003      	add	sp, #12
 800f8de:	4770      	bx	lr
 800f8e0:	2000d140 	.word	0x2000d140

0800f8e4 <__swhatbuf_r>:
 800f8e4:	b570      	push	{r4, r5, r6, lr}
 800f8e6:	460c      	mov	r4, r1
 800f8e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f8ec:	2900      	cmp	r1, #0
 800f8ee:	b096      	sub	sp, #88	@ 0x58
 800f8f0:	4615      	mov	r5, r2
 800f8f2:	461e      	mov	r6, r3
 800f8f4:	da0d      	bge.n	800f912 <__swhatbuf_r+0x2e>
 800f8f6:	89a3      	ldrh	r3, [r4, #12]
 800f8f8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800f8fc:	f04f 0100 	mov.w	r1, #0
 800f900:	bf14      	ite	ne
 800f902:	2340      	movne	r3, #64	@ 0x40
 800f904:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800f908:	2000      	movs	r0, #0
 800f90a:	6031      	str	r1, [r6, #0]
 800f90c:	602b      	str	r3, [r5, #0]
 800f90e:	b016      	add	sp, #88	@ 0x58
 800f910:	bd70      	pop	{r4, r5, r6, pc}
 800f912:	466a      	mov	r2, sp
 800f914:	f000 f874 	bl	800fa00 <_fstat_r>
 800f918:	2800      	cmp	r0, #0
 800f91a:	dbec      	blt.n	800f8f6 <__swhatbuf_r+0x12>
 800f91c:	9901      	ldr	r1, [sp, #4]
 800f91e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800f922:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800f926:	4259      	negs	r1, r3
 800f928:	4159      	adcs	r1, r3
 800f92a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800f92e:	e7eb      	b.n	800f908 <__swhatbuf_r+0x24>

0800f930 <__smakebuf_r>:
 800f930:	898b      	ldrh	r3, [r1, #12]
 800f932:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f934:	079d      	lsls	r5, r3, #30
 800f936:	4606      	mov	r6, r0
 800f938:	460c      	mov	r4, r1
 800f93a:	d507      	bpl.n	800f94c <__smakebuf_r+0x1c>
 800f93c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800f940:	6023      	str	r3, [r4, #0]
 800f942:	6123      	str	r3, [r4, #16]
 800f944:	2301      	movs	r3, #1
 800f946:	6163      	str	r3, [r4, #20]
 800f948:	b003      	add	sp, #12
 800f94a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f94c:	ab01      	add	r3, sp, #4
 800f94e:	466a      	mov	r2, sp
 800f950:	f7ff ffc8 	bl	800f8e4 <__swhatbuf_r>
 800f954:	9f00      	ldr	r7, [sp, #0]
 800f956:	4605      	mov	r5, r0
 800f958:	4639      	mov	r1, r7
 800f95a:	4630      	mov	r0, r6
 800f95c:	f7fe f8b0 	bl	800dac0 <_malloc_r>
 800f960:	b948      	cbnz	r0, 800f976 <__smakebuf_r+0x46>
 800f962:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f966:	059a      	lsls	r2, r3, #22
 800f968:	d4ee      	bmi.n	800f948 <__smakebuf_r+0x18>
 800f96a:	f023 0303 	bic.w	r3, r3, #3
 800f96e:	f043 0302 	orr.w	r3, r3, #2
 800f972:	81a3      	strh	r3, [r4, #12]
 800f974:	e7e2      	b.n	800f93c <__smakebuf_r+0xc>
 800f976:	89a3      	ldrh	r3, [r4, #12]
 800f978:	6020      	str	r0, [r4, #0]
 800f97a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800f97e:	81a3      	strh	r3, [r4, #12]
 800f980:	9b01      	ldr	r3, [sp, #4]
 800f982:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800f986:	b15b      	cbz	r3, 800f9a0 <__smakebuf_r+0x70>
 800f988:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f98c:	4630      	mov	r0, r6
 800f98e:	f000 f849 	bl	800fa24 <_isatty_r>
 800f992:	b128      	cbz	r0, 800f9a0 <__smakebuf_r+0x70>
 800f994:	89a3      	ldrh	r3, [r4, #12]
 800f996:	f023 0303 	bic.w	r3, r3, #3
 800f99a:	f043 0301 	orr.w	r3, r3, #1
 800f99e:	81a3      	strh	r3, [r4, #12]
 800f9a0:	89a3      	ldrh	r3, [r4, #12]
 800f9a2:	431d      	orrs	r5, r3
 800f9a4:	81a5      	strh	r5, [r4, #12]
 800f9a6:	e7cf      	b.n	800f948 <__smakebuf_r+0x18>

0800f9a8 <memmove>:
 800f9a8:	4288      	cmp	r0, r1
 800f9aa:	b510      	push	{r4, lr}
 800f9ac:	eb01 0402 	add.w	r4, r1, r2
 800f9b0:	d902      	bls.n	800f9b8 <memmove+0x10>
 800f9b2:	4284      	cmp	r4, r0
 800f9b4:	4623      	mov	r3, r4
 800f9b6:	d807      	bhi.n	800f9c8 <memmove+0x20>
 800f9b8:	1e43      	subs	r3, r0, #1
 800f9ba:	42a1      	cmp	r1, r4
 800f9bc:	d008      	beq.n	800f9d0 <memmove+0x28>
 800f9be:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f9c2:	f803 2f01 	strb.w	r2, [r3, #1]!
 800f9c6:	e7f8      	b.n	800f9ba <memmove+0x12>
 800f9c8:	4402      	add	r2, r0
 800f9ca:	4601      	mov	r1, r0
 800f9cc:	428a      	cmp	r2, r1
 800f9ce:	d100      	bne.n	800f9d2 <memmove+0x2a>
 800f9d0:	bd10      	pop	{r4, pc}
 800f9d2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800f9d6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800f9da:	e7f7      	b.n	800f9cc <memmove+0x24>

0800f9dc <strncmp>:
 800f9dc:	b510      	push	{r4, lr}
 800f9de:	b16a      	cbz	r2, 800f9fc <strncmp+0x20>
 800f9e0:	3901      	subs	r1, #1
 800f9e2:	1884      	adds	r4, r0, r2
 800f9e4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f9e8:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800f9ec:	429a      	cmp	r2, r3
 800f9ee:	d103      	bne.n	800f9f8 <strncmp+0x1c>
 800f9f0:	42a0      	cmp	r0, r4
 800f9f2:	d001      	beq.n	800f9f8 <strncmp+0x1c>
 800f9f4:	2a00      	cmp	r2, #0
 800f9f6:	d1f5      	bne.n	800f9e4 <strncmp+0x8>
 800f9f8:	1ad0      	subs	r0, r2, r3
 800f9fa:	bd10      	pop	{r4, pc}
 800f9fc:	4610      	mov	r0, r2
 800f9fe:	e7fc      	b.n	800f9fa <strncmp+0x1e>

0800fa00 <_fstat_r>:
 800fa00:	b538      	push	{r3, r4, r5, lr}
 800fa02:	4d07      	ldr	r5, [pc, #28]	@ (800fa20 <_fstat_r+0x20>)
 800fa04:	2300      	movs	r3, #0
 800fa06:	4604      	mov	r4, r0
 800fa08:	4608      	mov	r0, r1
 800fa0a:	4611      	mov	r1, r2
 800fa0c:	602b      	str	r3, [r5, #0]
 800fa0e:	f7f1 fb5b 	bl	80010c8 <_fstat>
 800fa12:	1c43      	adds	r3, r0, #1
 800fa14:	d102      	bne.n	800fa1c <_fstat_r+0x1c>
 800fa16:	682b      	ldr	r3, [r5, #0]
 800fa18:	b103      	cbz	r3, 800fa1c <_fstat_r+0x1c>
 800fa1a:	6023      	str	r3, [r4, #0]
 800fa1c:	bd38      	pop	{r3, r4, r5, pc}
 800fa1e:	bf00      	nop
 800fa20:	20014214 	.word	0x20014214

0800fa24 <_isatty_r>:
 800fa24:	b538      	push	{r3, r4, r5, lr}
 800fa26:	4d06      	ldr	r5, [pc, #24]	@ (800fa40 <_isatty_r+0x1c>)
 800fa28:	2300      	movs	r3, #0
 800fa2a:	4604      	mov	r4, r0
 800fa2c:	4608      	mov	r0, r1
 800fa2e:	602b      	str	r3, [r5, #0]
 800fa30:	f7f1 fb5c 	bl	80010ec <_isatty>
 800fa34:	1c43      	adds	r3, r0, #1
 800fa36:	d102      	bne.n	800fa3e <_isatty_r+0x1a>
 800fa38:	682b      	ldr	r3, [r5, #0]
 800fa3a:	b103      	cbz	r3, 800fa3e <_isatty_r+0x1a>
 800fa3c:	6023      	str	r3, [r4, #0]
 800fa3e:	bd38      	pop	{r3, r4, r5, pc}
 800fa40:	20014214 	.word	0x20014214

0800fa44 <_sbrk_r>:
 800fa44:	b538      	push	{r3, r4, r5, lr}
 800fa46:	4d06      	ldr	r5, [pc, #24]	@ (800fa60 <_sbrk_r+0x1c>)
 800fa48:	2300      	movs	r3, #0
 800fa4a:	4604      	mov	r4, r0
 800fa4c:	4608      	mov	r0, r1
 800fa4e:	602b      	str	r3, [r5, #0]
 800fa50:	f7f5 f8f6 	bl	8004c40 <_sbrk>
 800fa54:	1c43      	adds	r3, r0, #1
 800fa56:	d102      	bne.n	800fa5e <_sbrk_r+0x1a>
 800fa58:	682b      	ldr	r3, [r5, #0]
 800fa5a:	b103      	cbz	r3, 800fa5e <_sbrk_r+0x1a>
 800fa5c:	6023      	str	r3, [r4, #0]
 800fa5e:	bd38      	pop	{r3, r4, r5, pc}
 800fa60:	20014214 	.word	0x20014214
 800fa64:	00000000 	.word	0x00000000

0800fa68 <nan>:
 800fa68:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800fa70 <nan+0x8>
 800fa6c:	4770      	bx	lr
 800fa6e:	bf00      	nop
 800fa70:	00000000 	.word	0x00000000
 800fa74:	7ff80000 	.word	0x7ff80000

0800fa78 <abort>:
 800fa78:	b508      	push	{r3, lr}
 800fa7a:	2006      	movs	r0, #6
 800fa7c:	f000 fbc4 	bl	8010208 <raise>
 800fa80:	2001      	movs	r0, #1
 800fa82:	f7f1 faf5 	bl	8001070 <_exit>

0800fa86 <_calloc_r>:
 800fa86:	b570      	push	{r4, r5, r6, lr}
 800fa88:	fba1 5402 	umull	r5, r4, r1, r2
 800fa8c:	b934      	cbnz	r4, 800fa9c <_calloc_r+0x16>
 800fa8e:	4629      	mov	r1, r5
 800fa90:	f7fe f816 	bl	800dac0 <_malloc_r>
 800fa94:	4606      	mov	r6, r0
 800fa96:	b928      	cbnz	r0, 800faa4 <_calloc_r+0x1e>
 800fa98:	4630      	mov	r0, r6
 800fa9a:	bd70      	pop	{r4, r5, r6, pc}
 800fa9c:	220c      	movs	r2, #12
 800fa9e:	6002      	str	r2, [r0, #0]
 800faa0:	2600      	movs	r6, #0
 800faa2:	e7f9      	b.n	800fa98 <_calloc_r+0x12>
 800faa4:	462a      	mov	r2, r5
 800faa6:	4621      	mov	r1, r4
 800faa8:	f7fd f88a 	bl	800cbc0 <memset>
 800faac:	e7f4      	b.n	800fa98 <_calloc_r+0x12>

0800faae <rshift>:
 800faae:	6903      	ldr	r3, [r0, #16]
 800fab0:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800fab4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800fab8:	ea4f 1261 	mov.w	r2, r1, asr #5
 800fabc:	f100 0414 	add.w	r4, r0, #20
 800fac0:	dd45      	ble.n	800fb4e <rshift+0xa0>
 800fac2:	f011 011f 	ands.w	r1, r1, #31
 800fac6:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800faca:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800face:	d10c      	bne.n	800faea <rshift+0x3c>
 800fad0:	f100 0710 	add.w	r7, r0, #16
 800fad4:	4629      	mov	r1, r5
 800fad6:	42b1      	cmp	r1, r6
 800fad8:	d334      	bcc.n	800fb44 <rshift+0x96>
 800fada:	1a9b      	subs	r3, r3, r2
 800fadc:	009b      	lsls	r3, r3, #2
 800fade:	1eea      	subs	r2, r5, #3
 800fae0:	4296      	cmp	r6, r2
 800fae2:	bf38      	it	cc
 800fae4:	2300      	movcc	r3, #0
 800fae6:	4423      	add	r3, r4
 800fae8:	e015      	b.n	800fb16 <rshift+0x68>
 800faea:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800faee:	f1c1 0820 	rsb	r8, r1, #32
 800faf2:	40cf      	lsrs	r7, r1
 800faf4:	f105 0e04 	add.w	lr, r5, #4
 800faf8:	46a1      	mov	r9, r4
 800fafa:	4576      	cmp	r6, lr
 800fafc:	46f4      	mov	ip, lr
 800fafe:	d815      	bhi.n	800fb2c <rshift+0x7e>
 800fb00:	1a9a      	subs	r2, r3, r2
 800fb02:	0092      	lsls	r2, r2, #2
 800fb04:	3a04      	subs	r2, #4
 800fb06:	3501      	adds	r5, #1
 800fb08:	42ae      	cmp	r6, r5
 800fb0a:	bf38      	it	cc
 800fb0c:	2200      	movcc	r2, #0
 800fb0e:	18a3      	adds	r3, r4, r2
 800fb10:	50a7      	str	r7, [r4, r2]
 800fb12:	b107      	cbz	r7, 800fb16 <rshift+0x68>
 800fb14:	3304      	adds	r3, #4
 800fb16:	1b1a      	subs	r2, r3, r4
 800fb18:	42a3      	cmp	r3, r4
 800fb1a:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800fb1e:	bf08      	it	eq
 800fb20:	2300      	moveq	r3, #0
 800fb22:	6102      	str	r2, [r0, #16]
 800fb24:	bf08      	it	eq
 800fb26:	6143      	streq	r3, [r0, #20]
 800fb28:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800fb2c:	f8dc c000 	ldr.w	ip, [ip]
 800fb30:	fa0c fc08 	lsl.w	ip, ip, r8
 800fb34:	ea4c 0707 	orr.w	r7, ip, r7
 800fb38:	f849 7b04 	str.w	r7, [r9], #4
 800fb3c:	f85e 7b04 	ldr.w	r7, [lr], #4
 800fb40:	40cf      	lsrs	r7, r1
 800fb42:	e7da      	b.n	800fafa <rshift+0x4c>
 800fb44:	f851 cb04 	ldr.w	ip, [r1], #4
 800fb48:	f847 cf04 	str.w	ip, [r7, #4]!
 800fb4c:	e7c3      	b.n	800fad6 <rshift+0x28>
 800fb4e:	4623      	mov	r3, r4
 800fb50:	e7e1      	b.n	800fb16 <rshift+0x68>

0800fb52 <__hexdig_fun>:
 800fb52:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800fb56:	2b09      	cmp	r3, #9
 800fb58:	d802      	bhi.n	800fb60 <__hexdig_fun+0xe>
 800fb5a:	3820      	subs	r0, #32
 800fb5c:	b2c0      	uxtb	r0, r0
 800fb5e:	4770      	bx	lr
 800fb60:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800fb64:	2b05      	cmp	r3, #5
 800fb66:	d801      	bhi.n	800fb6c <__hexdig_fun+0x1a>
 800fb68:	3847      	subs	r0, #71	@ 0x47
 800fb6a:	e7f7      	b.n	800fb5c <__hexdig_fun+0xa>
 800fb6c:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800fb70:	2b05      	cmp	r3, #5
 800fb72:	d801      	bhi.n	800fb78 <__hexdig_fun+0x26>
 800fb74:	3827      	subs	r0, #39	@ 0x27
 800fb76:	e7f1      	b.n	800fb5c <__hexdig_fun+0xa>
 800fb78:	2000      	movs	r0, #0
 800fb7a:	4770      	bx	lr

0800fb7c <__gethex>:
 800fb7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fb80:	b085      	sub	sp, #20
 800fb82:	468a      	mov	sl, r1
 800fb84:	9302      	str	r3, [sp, #8]
 800fb86:	680b      	ldr	r3, [r1, #0]
 800fb88:	9001      	str	r0, [sp, #4]
 800fb8a:	4690      	mov	r8, r2
 800fb8c:	1c9c      	adds	r4, r3, #2
 800fb8e:	46a1      	mov	r9, r4
 800fb90:	f814 0b01 	ldrb.w	r0, [r4], #1
 800fb94:	2830      	cmp	r0, #48	@ 0x30
 800fb96:	d0fa      	beq.n	800fb8e <__gethex+0x12>
 800fb98:	eba9 0303 	sub.w	r3, r9, r3
 800fb9c:	f1a3 0b02 	sub.w	fp, r3, #2
 800fba0:	f7ff ffd7 	bl	800fb52 <__hexdig_fun>
 800fba4:	4605      	mov	r5, r0
 800fba6:	2800      	cmp	r0, #0
 800fba8:	d168      	bne.n	800fc7c <__gethex+0x100>
 800fbaa:	49a0      	ldr	r1, [pc, #640]	@ (800fe2c <__gethex+0x2b0>)
 800fbac:	2201      	movs	r2, #1
 800fbae:	4648      	mov	r0, r9
 800fbb0:	f7ff ff14 	bl	800f9dc <strncmp>
 800fbb4:	4607      	mov	r7, r0
 800fbb6:	2800      	cmp	r0, #0
 800fbb8:	d167      	bne.n	800fc8a <__gethex+0x10e>
 800fbba:	f899 0001 	ldrb.w	r0, [r9, #1]
 800fbbe:	4626      	mov	r6, r4
 800fbc0:	f7ff ffc7 	bl	800fb52 <__hexdig_fun>
 800fbc4:	2800      	cmp	r0, #0
 800fbc6:	d062      	beq.n	800fc8e <__gethex+0x112>
 800fbc8:	4623      	mov	r3, r4
 800fbca:	7818      	ldrb	r0, [r3, #0]
 800fbcc:	2830      	cmp	r0, #48	@ 0x30
 800fbce:	4699      	mov	r9, r3
 800fbd0:	f103 0301 	add.w	r3, r3, #1
 800fbd4:	d0f9      	beq.n	800fbca <__gethex+0x4e>
 800fbd6:	f7ff ffbc 	bl	800fb52 <__hexdig_fun>
 800fbda:	fab0 f580 	clz	r5, r0
 800fbde:	096d      	lsrs	r5, r5, #5
 800fbe0:	f04f 0b01 	mov.w	fp, #1
 800fbe4:	464a      	mov	r2, r9
 800fbe6:	4616      	mov	r6, r2
 800fbe8:	3201      	adds	r2, #1
 800fbea:	7830      	ldrb	r0, [r6, #0]
 800fbec:	f7ff ffb1 	bl	800fb52 <__hexdig_fun>
 800fbf0:	2800      	cmp	r0, #0
 800fbf2:	d1f8      	bne.n	800fbe6 <__gethex+0x6a>
 800fbf4:	498d      	ldr	r1, [pc, #564]	@ (800fe2c <__gethex+0x2b0>)
 800fbf6:	2201      	movs	r2, #1
 800fbf8:	4630      	mov	r0, r6
 800fbfa:	f7ff feef 	bl	800f9dc <strncmp>
 800fbfe:	2800      	cmp	r0, #0
 800fc00:	d13f      	bne.n	800fc82 <__gethex+0x106>
 800fc02:	b944      	cbnz	r4, 800fc16 <__gethex+0x9a>
 800fc04:	1c74      	adds	r4, r6, #1
 800fc06:	4622      	mov	r2, r4
 800fc08:	4616      	mov	r6, r2
 800fc0a:	3201      	adds	r2, #1
 800fc0c:	7830      	ldrb	r0, [r6, #0]
 800fc0e:	f7ff ffa0 	bl	800fb52 <__hexdig_fun>
 800fc12:	2800      	cmp	r0, #0
 800fc14:	d1f8      	bne.n	800fc08 <__gethex+0x8c>
 800fc16:	1ba4      	subs	r4, r4, r6
 800fc18:	00a7      	lsls	r7, r4, #2
 800fc1a:	7833      	ldrb	r3, [r6, #0]
 800fc1c:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800fc20:	2b50      	cmp	r3, #80	@ 0x50
 800fc22:	d13e      	bne.n	800fca2 <__gethex+0x126>
 800fc24:	7873      	ldrb	r3, [r6, #1]
 800fc26:	2b2b      	cmp	r3, #43	@ 0x2b
 800fc28:	d033      	beq.n	800fc92 <__gethex+0x116>
 800fc2a:	2b2d      	cmp	r3, #45	@ 0x2d
 800fc2c:	d034      	beq.n	800fc98 <__gethex+0x11c>
 800fc2e:	1c71      	adds	r1, r6, #1
 800fc30:	2400      	movs	r4, #0
 800fc32:	7808      	ldrb	r0, [r1, #0]
 800fc34:	f7ff ff8d 	bl	800fb52 <__hexdig_fun>
 800fc38:	1e43      	subs	r3, r0, #1
 800fc3a:	b2db      	uxtb	r3, r3
 800fc3c:	2b18      	cmp	r3, #24
 800fc3e:	d830      	bhi.n	800fca2 <__gethex+0x126>
 800fc40:	f1a0 0210 	sub.w	r2, r0, #16
 800fc44:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800fc48:	f7ff ff83 	bl	800fb52 <__hexdig_fun>
 800fc4c:	f100 3cff 	add.w	ip, r0, #4294967295
 800fc50:	fa5f fc8c 	uxtb.w	ip, ip
 800fc54:	f1bc 0f18 	cmp.w	ip, #24
 800fc58:	f04f 030a 	mov.w	r3, #10
 800fc5c:	d91e      	bls.n	800fc9c <__gethex+0x120>
 800fc5e:	b104      	cbz	r4, 800fc62 <__gethex+0xe6>
 800fc60:	4252      	negs	r2, r2
 800fc62:	4417      	add	r7, r2
 800fc64:	f8ca 1000 	str.w	r1, [sl]
 800fc68:	b1ed      	cbz	r5, 800fca6 <__gethex+0x12a>
 800fc6a:	f1bb 0f00 	cmp.w	fp, #0
 800fc6e:	bf0c      	ite	eq
 800fc70:	2506      	moveq	r5, #6
 800fc72:	2500      	movne	r5, #0
 800fc74:	4628      	mov	r0, r5
 800fc76:	b005      	add	sp, #20
 800fc78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fc7c:	2500      	movs	r5, #0
 800fc7e:	462c      	mov	r4, r5
 800fc80:	e7b0      	b.n	800fbe4 <__gethex+0x68>
 800fc82:	2c00      	cmp	r4, #0
 800fc84:	d1c7      	bne.n	800fc16 <__gethex+0x9a>
 800fc86:	4627      	mov	r7, r4
 800fc88:	e7c7      	b.n	800fc1a <__gethex+0x9e>
 800fc8a:	464e      	mov	r6, r9
 800fc8c:	462f      	mov	r7, r5
 800fc8e:	2501      	movs	r5, #1
 800fc90:	e7c3      	b.n	800fc1a <__gethex+0x9e>
 800fc92:	2400      	movs	r4, #0
 800fc94:	1cb1      	adds	r1, r6, #2
 800fc96:	e7cc      	b.n	800fc32 <__gethex+0xb6>
 800fc98:	2401      	movs	r4, #1
 800fc9a:	e7fb      	b.n	800fc94 <__gethex+0x118>
 800fc9c:	fb03 0002 	mla	r0, r3, r2, r0
 800fca0:	e7ce      	b.n	800fc40 <__gethex+0xc4>
 800fca2:	4631      	mov	r1, r6
 800fca4:	e7de      	b.n	800fc64 <__gethex+0xe8>
 800fca6:	eba6 0309 	sub.w	r3, r6, r9
 800fcaa:	3b01      	subs	r3, #1
 800fcac:	4629      	mov	r1, r5
 800fcae:	2b07      	cmp	r3, #7
 800fcb0:	dc0a      	bgt.n	800fcc8 <__gethex+0x14c>
 800fcb2:	9801      	ldr	r0, [sp, #4]
 800fcb4:	f7fd ff90 	bl	800dbd8 <_Balloc>
 800fcb8:	4604      	mov	r4, r0
 800fcba:	b940      	cbnz	r0, 800fcce <__gethex+0x152>
 800fcbc:	4b5c      	ldr	r3, [pc, #368]	@ (800fe30 <__gethex+0x2b4>)
 800fcbe:	4602      	mov	r2, r0
 800fcc0:	21e4      	movs	r1, #228	@ 0xe4
 800fcc2:	485c      	ldr	r0, [pc, #368]	@ (800fe34 <__gethex+0x2b8>)
 800fcc4:	f7fd f810 	bl	800cce8 <__assert_func>
 800fcc8:	3101      	adds	r1, #1
 800fcca:	105b      	asrs	r3, r3, #1
 800fccc:	e7ef      	b.n	800fcae <__gethex+0x132>
 800fcce:	f100 0a14 	add.w	sl, r0, #20
 800fcd2:	2300      	movs	r3, #0
 800fcd4:	4655      	mov	r5, sl
 800fcd6:	469b      	mov	fp, r3
 800fcd8:	45b1      	cmp	r9, r6
 800fcda:	d337      	bcc.n	800fd4c <__gethex+0x1d0>
 800fcdc:	f845 bb04 	str.w	fp, [r5], #4
 800fce0:	eba5 050a 	sub.w	r5, r5, sl
 800fce4:	10ad      	asrs	r5, r5, #2
 800fce6:	6125      	str	r5, [r4, #16]
 800fce8:	4658      	mov	r0, fp
 800fcea:	f7fe f867 	bl	800ddbc <__hi0bits>
 800fcee:	016d      	lsls	r5, r5, #5
 800fcf0:	f8d8 6000 	ldr.w	r6, [r8]
 800fcf4:	1a2d      	subs	r5, r5, r0
 800fcf6:	42b5      	cmp	r5, r6
 800fcf8:	dd54      	ble.n	800fda4 <__gethex+0x228>
 800fcfa:	1bad      	subs	r5, r5, r6
 800fcfc:	4629      	mov	r1, r5
 800fcfe:	4620      	mov	r0, r4
 800fd00:	f7fe fbf3 	bl	800e4ea <__any_on>
 800fd04:	4681      	mov	r9, r0
 800fd06:	b178      	cbz	r0, 800fd28 <__gethex+0x1ac>
 800fd08:	1e6b      	subs	r3, r5, #1
 800fd0a:	1159      	asrs	r1, r3, #5
 800fd0c:	f003 021f 	and.w	r2, r3, #31
 800fd10:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800fd14:	f04f 0901 	mov.w	r9, #1
 800fd18:	fa09 f202 	lsl.w	r2, r9, r2
 800fd1c:	420a      	tst	r2, r1
 800fd1e:	d003      	beq.n	800fd28 <__gethex+0x1ac>
 800fd20:	454b      	cmp	r3, r9
 800fd22:	dc36      	bgt.n	800fd92 <__gethex+0x216>
 800fd24:	f04f 0902 	mov.w	r9, #2
 800fd28:	4629      	mov	r1, r5
 800fd2a:	4620      	mov	r0, r4
 800fd2c:	f7ff febf 	bl	800faae <rshift>
 800fd30:	442f      	add	r7, r5
 800fd32:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800fd36:	42bb      	cmp	r3, r7
 800fd38:	da42      	bge.n	800fdc0 <__gethex+0x244>
 800fd3a:	9801      	ldr	r0, [sp, #4]
 800fd3c:	4621      	mov	r1, r4
 800fd3e:	f7fd ff8b 	bl	800dc58 <_Bfree>
 800fd42:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800fd44:	2300      	movs	r3, #0
 800fd46:	6013      	str	r3, [r2, #0]
 800fd48:	25a3      	movs	r5, #163	@ 0xa3
 800fd4a:	e793      	b.n	800fc74 <__gethex+0xf8>
 800fd4c:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800fd50:	2a2e      	cmp	r2, #46	@ 0x2e
 800fd52:	d012      	beq.n	800fd7a <__gethex+0x1fe>
 800fd54:	2b20      	cmp	r3, #32
 800fd56:	d104      	bne.n	800fd62 <__gethex+0x1e6>
 800fd58:	f845 bb04 	str.w	fp, [r5], #4
 800fd5c:	f04f 0b00 	mov.w	fp, #0
 800fd60:	465b      	mov	r3, fp
 800fd62:	7830      	ldrb	r0, [r6, #0]
 800fd64:	9303      	str	r3, [sp, #12]
 800fd66:	f7ff fef4 	bl	800fb52 <__hexdig_fun>
 800fd6a:	9b03      	ldr	r3, [sp, #12]
 800fd6c:	f000 000f 	and.w	r0, r0, #15
 800fd70:	4098      	lsls	r0, r3
 800fd72:	ea4b 0b00 	orr.w	fp, fp, r0
 800fd76:	3304      	adds	r3, #4
 800fd78:	e7ae      	b.n	800fcd8 <__gethex+0x15c>
 800fd7a:	45b1      	cmp	r9, r6
 800fd7c:	d8ea      	bhi.n	800fd54 <__gethex+0x1d8>
 800fd7e:	492b      	ldr	r1, [pc, #172]	@ (800fe2c <__gethex+0x2b0>)
 800fd80:	9303      	str	r3, [sp, #12]
 800fd82:	2201      	movs	r2, #1
 800fd84:	4630      	mov	r0, r6
 800fd86:	f7ff fe29 	bl	800f9dc <strncmp>
 800fd8a:	9b03      	ldr	r3, [sp, #12]
 800fd8c:	2800      	cmp	r0, #0
 800fd8e:	d1e1      	bne.n	800fd54 <__gethex+0x1d8>
 800fd90:	e7a2      	b.n	800fcd8 <__gethex+0x15c>
 800fd92:	1ea9      	subs	r1, r5, #2
 800fd94:	4620      	mov	r0, r4
 800fd96:	f7fe fba8 	bl	800e4ea <__any_on>
 800fd9a:	2800      	cmp	r0, #0
 800fd9c:	d0c2      	beq.n	800fd24 <__gethex+0x1a8>
 800fd9e:	f04f 0903 	mov.w	r9, #3
 800fda2:	e7c1      	b.n	800fd28 <__gethex+0x1ac>
 800fda4:	da09      	bge.n	800fdba <__gethex+0x23e>
 800fda6:	1b75      	subs	r5, r6, r5
 800fda8:	4621      	mov	r1, r4
 800fdaa:	9801      	ldr	r0, [sp, #4]
 800fdac:	462a      	mov	r2, r5
 800fdae:	f7fe f963 	bl	800e078 <__lshift>
 800fdb2:	1b7f      	subs	r7, r7, r5
 800fdb4:	4604      	mov	r4, r0
 800fdb6:	f100 0a14 	add.w	sl, r0, #20
 800fdba:	f04f 0900 	mov.w	r9, #0
 800fdbe:	e7b8      	b.n	800fd32 <__gethex+0x1b6>
 800fdc0:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800fdc4:	42bd      	cmp	r5, r7
 800fdc6:	dd6f      	ble.n	800fea8 <__gethex+0x32c>
 800fdc8:	1bed      	subs	r5, r5, r7
 800fdca:	42ae      	cmp	r6, r5
 800fdcc:	dc34      	bgt.n	800fe38 <__gethex+0x2bc>
 800fdce:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800fdd2:	2b02      	cmp	r3, #2
 800fdd4:	d022      	beq.n	800fe1c <__gethex+0x2a0>
 800fdd6:	2b03      	cmp	r3, #3
 800fdd8:	d024      	beq.n	800fe24 <__gethex+0x2a8>
 800fdda:	2b01      	cmp	r3, #1
 800fddc:	d115      	bne.n	800fe0a <__gethex+0x28e>
 800fdde:	42ae      	cmp	r6, r5
 800fde0:	d113      	bne.n	800fe0a <__gethex+0x28e>
 800fde2:	2e01      	cmp	r6, #1
 800fde4:	d10b      	bne.n	800fdfe <__gethex+0x282>
 800fde6:	9a02      	ldr	r2, [sp, #8]
 800fde8:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800fdec:	6013      	str	r3, [r2, #0]
 800fdee:	2301      	movs	r3, #1
 800fdf0:	6123      	str	r3, [r4, #16]
 800fdf2:	f8ca 3000 	str.w	r3, [sl]
 800fdf6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800fdf8:	2562      	movs	r5, #98	@ 0x62
 800fdfa:	601c      	str	r4, [r3, #0]
 800fdfc:	e73a      	b.n	800fc74 <__gethex+0xf8>
 800fdfe:	1e71      	subs	r1, r6, #1
 800fe00:	4620      	mov	r0, r4
 800fe02:	f7fe fb72 	bl	800e4ea <__any_on>
 800fe06:	2800      	cmp	r0, #0
 800fe08:	d1ed      	bne.n	800fde6 <__gethex+0x26a>
 800fe0a:	9801      	ldr	r0, [sp, #4]
 800fe0c:	4621      	mov	r1, r4
 800fe0e:	f7fd ff23 	bl	800dc58 <_Bfree>
 800fe12:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800fe14:	2300      	movs	r3, #0
 800fe16:	6013      	str	r3, [r2, #0]
 800fe18:	2550      	movs	r5, #80	@ 0x50
 800fe1a:	e72b      	b.n	800fc74 <__gethex+0xf8>
 800fe1c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800fe1e:	2b00      	cmp	r3, #0
 800fe20:	d1f3      	bne.n	800fe0a <__gethex+0x28e>
 800fe22:	e7e0      	b.n	800fde6 <__gethex+0x26a>
 800fe24:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800fe26:	2b00      	cmp	r3, #0
 800fe28:	d1dd      	bne.n	800fde6 <__gethex+0x26a>
 800fe2a:	e7ee      	b.n	800fe0a <__gethex+0x28e>
 800fe2c:	08011c3f 	.word	0x08011c3f
 800fe30:	08011bd5 	.word	0x08011bd5
 800fe34:	08011c5a 	.word	0x08011c5a
 800fe38:	1e6f      	subs	r7, r5, #1
 800fe3a:	f1b9 0f00 	cmp.w	r9, #0
 800fe3e:	d130      	bne.n	800fea2 <__gethex+0x326>
 800fe40:	b127      	cbz	r7, 800fe4c <__gethex+0x2d0>
 800fe42:	4639      	mov	r1, r7
 800fe44:	4620      	mov	r0, r4
 800fe46:	f7fe fb50 	bl	800e4ea <__any_on>
 800fe4a:	4681      	mov	r9, r0
 800fe4c:	117a      	asrs	r2, r7, #5
 800fe4e:	2301      	movs	r3, #1
 800fe50:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800fe54:	f007 071f 	and.w	r7, r7, #31
 800fe58:	40bb      	lsls	r3, r7
 800fe5a:	4213      	tst	r3, r2
 800fe5c:	4629      	mov	r1, r5
 800fe5e:	4620      	mov	r0, r4
 800fe60:	bf18      	it	ne
 800fe62:	f049 0902 	orrne.w	r9, r9, #2
 800fe66:	f7ff fe22 	bl	800faae <rshift>
 800fe6a:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800fe6e:	1b76      	subs	r6, r6, r5
 800fe70:	2502      	movs	r5, #2
 800fe72:	f1b9 0f00 	cmp.w	r9, #0
 800fe76:	d047      	beq.n	800ff08 <__gethex+0x38c>
 800fe78:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800fe7c:	2b02      	cmp	r3, #2
 800fe7e:	d015      	beq.n	800feac <__gethex+0x330>
 800fe80:	2b03      	cmp	r3, #3
 800fe82:	d017      	beq.n	800feb4 <__gethex+0x338>
 800fe84:	2b01      	cmp	r3, #1
 800fe86:	d109      	bne.n	800fe9c <__gethex+0x320>
 800fe88:	f019 0f02 	tst.w	r9, #2
 800fe8c:	d006      	beq.n	800fe9c <__gethex+0x320>
 800fe8e:	f8da 3000 	ldr.w	r3, [sl]
 800fe92:	ea49 0903 	orr.w	r9, r9, r3
 800fe96:	f019 0f01 	tst.w	r9, #1
 800fe9a:	d10e      	bne.n	800feba <__gethex+0x33e>
 800fe9c:	f045 0510 	orr.w	r5, r5, #16
 800fea0:	e032      	b.n	800ff08 <__gethex+0x38c>
 800fea2:	f04f 0901 	mov.w	r9, #1
 800fea6:	e7d1      	b.n	800fe4c <__gethex+0x2d0>
 800fea8:	2501      	movs	r5, #1
 800feaa:	e7e2      	b.n	800fe72 <__gethex+0x2f6>
 800feac:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800feae:	f1c3 0301 	rsb	r3, r3, #1
 800feb2:	930f      	str	r3, [sp, #60]	@ 0x3c
 800feb4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800feb6:	2b00      	cmp	r3, #0
 800feb8:	d0f0      	beq.n	800fe9c <__gethex+0x320>
 800feba:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800febe:	f104 0314 	add.w	r3, r4, #20
 800fec2:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800fec6:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800feca:	f04f 0c00 	mov.w	ip, #0
 800fece:	4618      	mov	r0, r3
 800fed0:	f853 2b04 	ldr.w	r2, [r3], #4
 800fed4:	f1b2 3fff 	cmp.w	r2, #4294967295
 800fed8:	d01b      	beq.n	800ff12 <__gethex+0x396>
 800feda:	3201      	adds	r2, #1
 800fedc:	6002      	str	r2, [r0, #0]
 800fede:	2d02      	cmp	r5, #2
 800fee0:	f104 0314 	add.w	r3, r4, #20
 800fee4:	d13c      	bne.n	800ff60 <__gethex+0x3e4>
 800fee6:	f8d8 2000 	ldr.w	r2, [r8]
 800feea:	3a01      	subs	r2, #1
 800feec:	42b2      	cmp	r2, r6
 800feee:	d109      	bne.n	800ff04 <__gethex+0x388>
 800fef0:	1171      	asrs	r1, r6, #5
 800fef2:	2201      	movs	r2, #1
 800fef4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800fef8:	f006 061f 	and.w	r6, r6, #31
 800fefc:	fa02 f606 	lsl.w	r6, r2, r6
 800ff00:	421e      	tst	r6, r3
 800ff02:	d13a      	bne.n	800ff7a <__gethex+0x3fe>
 800ff04:	f045 0520 	orr.w	r5, r5, #32
 800ff08:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ff0a:	601c      	str	r4, [r3, #0]
 800ff0c:	9b02      	ldr	r3, [sp, #8]
 800ff0e:	601f      	str	r7, [r3, #0]
 800ff10:	e6b0      	b.n	800fc74 <__gethex+0xf8>
 800ff12:	4299      	cmp	r1, r3
 800ff14:	f843 cc04 	str.w	ip, [r3, #-4]
 800ff18:	d8d9      	bhi.n	800fece <__gethex+0x352>
 800ff1a:	68a3      	ldr	r3, [r4, #8]
 800ff1c:	459b      	cmp	fp, r3
 800ff1e:	db17      	blt.n	800ff50 <__gethex+0x3d4>
 800ff20:	6861      	ldr	r1, [r4, #4]
 800ff22:	9801      	ldr	r0, [sp, #4]
 800ff24:	3101      	adds	r1, #1
 800ff26:	f7fd fe57 	bl	800dbd8 <_Balloc>
 800ff2a:	4681      	mov	r9, r0
 800ff2c:	b918      	cbnz	r0, 800ff36 <__gethex+0x3ba>
 800ff2e:	4b1a      	ldr	r3, [pc, #104]	@ (800ff98 <__gethex+0x41c>)
 800ff30:	4602      	mov	r2, r0
 800ff32:	2184      	movs	r1, #132	@ 0x84
 800ff34:	e6c5      	b.n	800fcc2 <__gethex+0x146>
 800ff36:	6922      	ldr	r2, [r4, #16]
 800ff38:	3202      	adds	r2, #2
 800ff3a:	f104 010c 	add.w	r1, r4, #12
 800ff3e:	0092      	lsls	r2, r2, #2
 800ff40:	300c      	adds	r0, #12
 800ff42:	f7fc febc 	bl	800ccbe <memcpy>
 800ff46:	4621      	mov	r1, r4
 800ff48:	9801      	ldr	r0, [sp, #4]
 800ff4a:	f7fd fe85 	bl	800dc58 <_Bfree>
 800ff4e:	464c      	mov	r4, r9
 800ff50:	6923      	ldr	r3, [r4, #16]
 800ff52:	1c5a      	adds	r2, r3, #1
 800ff54:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800ff58:	6122      	str	r2, [r4, #16]
 800ff5a:	2201      	movs	r2, #1
 800ff5c:	615a      	str	r2, [r3, #20]
 800ff5e:	e7be      	b.n	800fede <__gethex+0x362>
 800ff60:	6922      	ldr	r2, [r4, #16]
 800ff62:	455a      	cmp	r2, fp
 800ff64:	dd0b      	ble.n	800ff7e <__gethex+0x402>
 800ff66:	2101      	movs	r1, #1
 800ff68:	4620      	mov	r0, r4
 800ff6a:	f7ff fda0 	bl	800faae <rshift>
 800ff6e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800ff72:	3701      	adds	r7, #1
 800ff74:	42bb      	cmp	r3, r7
 800ff76:	f6ff aee0 	blt.w	800fd3a <__gethex+0x1be>
 800ff7a:	2501      	movs	r5, #1
 800ff7c:	e7c2      	b.n	800ff04 <__gethex+0x388>
 800ff7e:	f016 061f 	ands.w	r6, r6, #31
 800ff82:	d0fa      	beq.n	800ff7a <__gethex+0x3fe>
 800ff84:	4453      	add	r3, sl
 800ff86:	f1c6 0620 	rsb	r6, r6, #32
 800ff8a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800ff8e:	f7fd ff15 	bl	800ddbc <__hi0bits>
 800ff92:	42b0      	cmp	r0, r6
 800ff94:	dbe7      	blt.n	800ff66 <__gethex+0x3ea>
 800ff96:	e7f0      	b.n	800ff7a <__gethex+0x3fe>
 800ff98:	08011bd5 	.word	0x08011bd5

0800ff9c <L_shift>:
 800ff9c:	f1c2 0208 	rsb	r2, r2, #8
 800ffa0:	0092      	lsls	r2, r2, #2
 800ffa2:	b570      	push	{r4, r5, r6, lr}
 800ffa4:	f1c2 0620 	rsb	r6, r2, #32
 800ffa8:	6843      	ldr	r3, [r0, #4]
 800ffaa:	6804      	ldr	r4, [r0, #0]
 800ffac:	fa03 f506 	lsl.w	r5, r3, r6
 800ffb0:	432c      	orrs	r4, r5
 800ffb2:	40d3      	lsrs	r3, r2
 800ffb4:	6004      	str	r4, [r0, #0]
 800ffb6:	f840 3f04 	str.w	r3, [r0, #4]!
 800ffba:	4288      	cmp	r0, r1
 800ffbc:	d3f4      	bcc.n	800ffa8 <L_shift+0xc>
 800ffbe:	bd70      	pop	{r4, r5, r6, pc}

0800ffc0 <__match>:
 800ffc0:	b530      	push	{r4, r5, lr}
 800ffc2:	6803      	ldr	r3, [r0, #0]
 800ffc4:	3301      	adds	r3, #1
 800ffc6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ffca:	b914      	cbnz	r4, 800ffd2 <__match+0x12>
 800ffcc:	6003      	str	r3, [r0, #0]
 800ffce:	2001      	movs	r0, #1
 800ffd0:	bd30      	pop	{r4, r5, pc}
 800ffd2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ffd6:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800ffda:	2d19      	cmp	r5, #25
 800ffdc:	bf98      	it	ls
 800ffde:	3220      	addls	r2, #32
 800ffe0:	42a2      	cmp	r2, r4
 800ffe2:	d0f0      	beq.n	800ffc6 <__match+0x6>
 800ffe4:	2000      	movs	r0, #0
 800ffe6:	e7f3      	b.n	800ffd0 <__match+0x10>

0800ffe8 <__hexnan>:
 800ffe8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ffec:	680b      	ldr	r3, [r1, #0]
 800ffee:	6801      	ldr	r1, [r0, #0]
 800fff0:	115e      	asrs	r6, r3, #5
 800fff2:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800fff6:	f013 031f 	ands.w	r3, r3, #31
 800fffa:	b087      	sub	sp, #28
 800fffc:	bf18      	it	ne
 800fffe:	3604      	addne	r6, #4
 8010000:	2500      	movs	r5, #0
 8010002:	1f37      	subs	r7, r6, #4
 8010004:	4682      	mov	sl, r0
 8010006:	4690      	mov	r8, r2
 8010008:	9301      	str	r3, [sp, #4]
 801000a:	f846 5c04 	str.w	r5, [r6, #-4]
 801000e:	46b9      	mov	r9, r7
 8010010:	463c      	mov	r4, r7
 8010012:	9502      	str	r5, [sp, #8]
 8010014:	46ab      	mov	fp, r5
 8010016:	784a      	ldrb	r2, [r1, #1]
 8010018:	1c4b      	adds	r3, r1, #1
 801001a:	9303      	str	r3, [sp, #12]
 801001c:	b342      	cbz	r2, 8010070 <__hexnan+0x88>
 801001e:	4610      	mov	r0, r2
 8010020:	9105      	str	r1, [sp, #20]
 8010022:	9204      	str	r2, [sp, #16]
 8010024:	f7ff fd95 	bl	800fb52 <__hexdig_fun>
 8010028:	2800      	cmp	r0, #0
 801002a:	d151      	bne.n	80100d0 <__hexnan+0xe8>
 801002c:	9a04      	ldr	r2, [sp, #16]
 801002e:	9905      	ldr	r1, [sp, #20]
 8010030:	2a20      	cmp	r2, #32
 8010032:	d818      	bhi.n	8010066 <__hexnan+0x7e>
 8010034:	9b02      	ldr	r3, [sp, #8]
 8010036:	459b      	cmp	fp, r3
 8010038:	dd13      	ble.n	8010062 <__hexnan+0x7a>
 801003a:	454c      	cmp	r4, r9
 801003c:	d206      	bcs.n	801004c <__hexnan+0x64>
 801003e:	2d07      	cmp	r5, #7
 8010040:	dc04      	bgt.n	801004c <__hexnan+0x64>
 8010042:	462a      	mov	r2, r5
 8010044:	4649      	mov	r1, r9
 8010046:	4620      	mov	r0, r4
 8010048:	f7ff ffa8 	bl	800ff9c <L_shift>
 801004c:	4544      	cmp	r4, r8
 801004e:	d952      	bls.n	80100f6 <__hexnan+0x10e>
 8010050:	2300      	movs	r3, #0
 8010052:	f1a4 0904 	sub.w	r9, r4, #4
 8010056:	f844 3c04 	str.w	r3, [r4, #-4]
 801005a:	f8cd b008 	str.w	fp, [sp, #8]
 801005e:	464c      	mov	r4, r9
 8010060:	461d      	mov	r5, r3
 8010062:	9903      	ldr	r1, [sp, #12]
 8010064:	e7d7      	b.n	8010016 <__hexnan+0x2e>
 8010066:	2a29      	cmp	r2, #41	@ 0x29
 8010068:	d157      	bne.n	801011a <__hexnan+0x132>
 801006a:	3102      	adds	r1, #2
 801006c:	f8ca 1000 	str.w	r1, [sl]
 8010070:	f1bb 0f00 	cmp.w	fp, #0
 8010074:	d051      	beq.n	801011a <__hexnan+0x132>
 8010076:	454c      	cmp	r4, r9
 8010078:	d206      	bcs.n	8010088 <__hexnan+0xa0>
 801007a:	2d07      	cmp	r5, #7
 801007c:	dc04      	bgt.n	8010088 <__hexnan+0xa0>
 801007e:	462a      	mov	r2, r5
 8010080:	4649      	mov	r1, r9
 8010082:	4620      	mov	r0, r4
 8010084:	f7ff ff8a 	bl	800ff9c <L_shift>
 8010088:	4544      	cmp	r4, r8
 801008a:	d936      	bls.n	80100fa <__hexnan+0x112>
 801008c:	f1a8 0204 	sub.w	r2, r8, #4
 8010090:	4623      	mov	r3, r4
 8010092:	f853 1b04 	ldr.w	r1, [r3], #4
 8010096:	f842 1f04 	str.w	r1, [r2, #4]!
 801009a:	429f      	cmp	r7, r3
 801009c:	d2f9      	bcs.n	8010092 <__hexnan+0xaa>
 801009e:	1b3b      	subs	r3, r7, r4
 80100a0:	f023 0303 	bic.w	r3, r3, #3
 80100a4:	3304      	adds	r3, #4
 80100a6:	3401      	adds	r4, #1
 80100a8:	3e03      	subs	r6, #3
 80100aa:	42b4      	cmp	r4, r6
 80100ac:	bf88      	it	hi
 80100ae:	2304      	movhi	r3, #4
 80100b0:	4443      	add	r3, r8
 80100b2:	2200      	movs	r2, #0
 80100b4:	f843 2b04 	str.w	r2, [r3], #4
 80100b8:	429f      	cmp	r7, r3
 80100ba:	d2fb      	bcs.n	80100b4 <__hexnan+0xcc>
 80100bc:	683b      	ldr	r3, [r7, #0]
 80100be:	b91b      	cbnz	r3, 80100c8 <__hexnan+0xe0>
 80100c0:	4547      	cmp	r7, r8
 80100c2:	d128      	bne.n	8010116 <__hexnan+0x12e>
 80100c4:	2301      	movs	r3, #1
 80100c6:	603b      	str	r3, [r7, #0]
 80100c8:	2005      	movs	r0, #5
 80100ca:	b007      	add	sp, #28
 80100cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80100d0:	3501      	adds	r5, #1
 80100d2:	2d08      	cmp	r5, #8
 80100d4:	f10b 0b01 	add.w	fp, fp, #1
 80100d8:	dd06      	ble.n	80100e8 <__hexnan+0x100>
 80100da:	4544      	cmp	r4, r8
 80100dc:	d9c1      	bls.n	8010062 <__hexnan+0x7a>
 80100de:	2300      	movs	r3, #0
 80100e0:	f844 3c04 	str.w	r3, [r4, #-4]
 80100e4:	2501      	movs	r5, #1
 80100e6:	3c04      	subs	r4, #4
 80100e8:	6822      	ldr	r2, [r4, #0]
 80100ea:	f000 000f 	and.w	r0, r0, #15
 80100ee:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 80100f2:	6020      	str	r0, [r4, #0]
 80100f4:	e7b5      	b.n	8010062 <__hexnan+0x7a>
 80100f6:	2508      	movs	r5, #8
 80100f8:	e7b3      	b.n	8010062 <__hexnan+0x7a>
 80100fa:	9b01      	ldr	r3, [sp, #4]
 80100fc:	2b00      	cmp	r3, #0
 80100fe:	d0dd      	beq.n	80100bc <__hexnan+0xd4>
 8010100:	f1c3 0320 	rsb	r3, r3, #32
 8010104:	f04f 32ff 	mov.w	r2, #4294967295
 8010108:	40da      	lsrs	r2, r3
 801010a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 801010e:	4013      	ands	r3, r2
 8010110:	f846 3c04 	str.w	r3, [r6, #-4]
 8010114:	e7d2      	b.n	80100bc <__hexnan+0xd4>
 8010116:	3f04      	subs	r7, #4
 8010118:	e7d0      	b.n	80100bc <__hexnan+0xd4>
 801011a:	2004      	movs	r0, #4
 801011c:	e7d5      	b.n	80100ca <__hexnan+0xe2>

0801011e <__ascii_mbtowc>:
 801011e:	b082      	sub	sp, #8
 8010120:	b901      	cbnz	r1, 8010124 <__ascii_mbtowc+0x6>
 8010122:	a901      	add	r1, sp, #4
 8010124:	b142      	cbz	r2, 8010138 <__ascii_mbtowc+0x1a>
 8010126:	b14b      	cbz	r3, 801013c <__ascii_mbtowc+0x1e>
 8010128:	7813      	ldrb	r3, [r2, #0]
 801012a:	600b      	str	r3, [r1, #0]
 801012c:	7812      	ldrb	r2, [r2, #0]
 801012e:	1e10      	subs	r0, r2, #0
 8010130:	bf18      	it	ne
 8010132:	2001      	movne	r0, #1
 8010134:	b002      	add	sp, #8
 8010136:	4770      	bx	lr
 8010138:	4610      	mov	r0, r2
 801013a:	e7fb      	b.n	8010134 <__ascii_mbtowc+0x16>
 801013c:	f06f 0001 	mvn.w	r0, #1
 8010140:	e7f8      	b.n	8010134 <__ascii_mbtowc+0x16>

08010142 <_realloc_r>:
 8010142:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010146:	4607      	mov	r7, r0
 8010148:	4614      	mov	r4, r2
 801014a:	460d      	mov	r5, r1
 801014c:	b921      	cbnz	r1, 8010158 <_realloc_r+0x16>
 801014e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010152:	4611      	mov	r1, r2
 8010154:	f7fd bcb4 	b.w	800dac0 <_malloc_r>
 8010158:	b92a      	cbnz	r2, 8010166 <_realloc_r+0x24>
 801015a:	f7fd fc3d 	bl	800d9d8 <_free_r>
 801015e:	4625      	mov	r5, r4
 8010160:	4628      	mov	r0, r5
 8010162:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010166:	f000 f86b 	bl	8010240 <_malloc_usable_size_r>
 801016a:	4284      	cmp	r4, r0
 801016c:	4606      	mov	r6, r0
 801016e:	d802      	bhi.n	8010176 <_realloc_r+0x34>
 8010170:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8010174:	d8f4      	bhi.n	8010160 <_realloc_r+0x1e>
 8010176:	4621      	mov	r1, r4
 8010178:	4638      	mov	r0, r7
 801017a:	f7fd fca1 	bl	800dac0 <_malloc_r>
 801017e:	4680      	mov	r8, r0
 8010180:	b908      	cbnz	r0, 8010186 <_realloc_r+0x44>
 8010182:	4645      	mov	r5, r8
 8010184:	e7ec      	b.n	8010160 <_realloc_r+0x1e>
 8010186:	42b4      	cmp	r4, r6
 8010188:	4622      	mov	r2, r4
 801018a:	4629      	mov	r1, r5
 801018c:	bf28      	it	cs
 801018e:	4632      	movcs	r2, r6
 8010190:	f7fc fd95 	bl	800ccbe <memcpy>
 8010194:	4629      	mov	r1, r5
 8010196:	4638      	mov	r0, r7
 8010198:	f7fd fc1e 	bl	800d9d8 <_free_r>
 801019c:	e7f1      	b.n	8010182 <_realloc_r+0x40>

0801019e <__ascii_wctomb>:
 801019e:	4603      	mov	r3, r0
 80101a0:	4608      	mov	r0, r1
 80101a2:	b141      	cbz	r1, 80101b6 <__ascii_wctomb+0x18>
 80101a4:	2aff      	cmp	r2, #255	@ 0xff
 80101a6:	d904      	bls.n	80101b2 <__ascii_wctomb+0x14>
 80101a8:	228a      	movs	r2, #138	@ 0x8a
 80101aa:	601a      	str	r2, [r3, #0]
 80101ac:	f04f 30ff 	mov.w	r0, #4294967295
 80101b0:	4770      	bx	lr
 80101b2:	700a      	strb	r2, [r1, #0]
 80101b4:	2001      	movs	r0, #1
 80101b6:	4770      	bx	lr

080101b8 <_raise_r>:
 80101b8:	291f      	cmp	r1, #31
 80101ba:	b538      	push	{r3, r4, r5, lr}
 80101bc:	4605      	mov	r5, r0
 80101be:	460c      	mov	r4, r1
 80101c0:	d904      	bls.n	80101cc <_raise_r+0x14>
 80101c2:	2316      	movs	r3, #22
 80101c4:	6003      	str	r3, [r0, #0]
 80101c6:	f04f 30ff 	mov.w	r0, #4294967295
 80101ca:	bd38      	pop	{r3, r4, r5, pc}
 80101cc:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80101ce:	b112      	cbz	r2, 80101d6 <_raise_r+0x1e>
 80101d0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80101d4:	b94b      	cbnz	r3, 80101ea <_raise_r+0x32>
 80101d6:	4628      	mov	r0, r5
 80101d8:	f000 f830 	bl	801023c <_getpid_r>
 80101dc:	4622      	mov	r2, r4
 80101de:	4601      	mov	r1, r0
 80101e0:	4628      	mov	r0, r5
 80101e2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80101e6:	f000 b817 	b.w	8010218 <_kill_r>
 80101ea:	2b01      	cmp	r3, #1
 80101ec:	d00a      	beq.n	8010204 <_raise_r+0x4c>
 80101ee:	1c59      	adds	r1, r3, #1
 80101f0:	d103      	bne.n	80101fa <_raise_r+0x42>
 80101f2:	2316      	movs	r3, #22
 80101f4:	6003      	str	r3, [r0, #0]
 80101f6:	2001      	movs	r0, #1
 80101f8:	e7e7      	b.n	80101ca <_raise_r+0x12>
 80101fa:	2100      	movs	r1, #0
 80101fc:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8010200:	4620      	mov	r0, r4
 8010202:	4798      	blx	r3
 8010204:	2000      	movs	r0, #0
 8010206:	e7e0      	b.n	80101ca <_raise_r+0x12>

08010208 <raise>:
 8010208:	4b02      	ldr	r3, [pc, #8]	@ (8010214 <raise+0xc>)
 801020a:	4601      	mov	r1, r0
 801020c:	6818      	ldr	r0, [r3, #0]
 801020e:	f7ff bfd3 	b.w	80101b8 <_raise_r>
 8010212:	bf00      	nop
 8010214:	2000d140 	.word	0x2000d140

08010218 <_kill_r>:
 8010218:	b538      	push	{r3, r4, r5, lr}
 801021a:	4d07      	ldr	r5, [pc, #28]	@ (8010238 <_kill_r+0x20>)
 801021c:	2300      	movs	r3, #0
 801021e:	4604      	mov	r4, r0
 8010220:	4608      	mov	r0, r1
 8010222:	4611      	mov	r1, r2
 8010224:	602b      	str	r3, [r5, #0]
 8010226:	f7f0 ff11 	bl	800104c <_kill>
 801022a:	1c43      	adds	r3, r0, #1
 801022c:	d102      	bne.n	8010234 <_kill_r+0x1c>
 801022e:	682b      	ldr	r3, [r5, #0]
 8010230:	b103      	cbz	r3, 8010234 <_kill_r+0x1c>
 8010232:	6023      	str	r3, [r4, #0]
 8010234:	bd38      	pop	{r3, r4, r5, pc}
 8010236:	bf00      	nop
 8010238:	20014214 	.word	0x20014214

0801023c <_getpid_r>:
 801023c:	f7f0 bef8 	b.w	8001030 <_getpid>

08010240 <_malloc_usable_size_r>:
 8010240:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010244:	1f18      	subs	r0, r3, #4
 8010246:	2b00      	cmp	r3, #0
 8010248:	bfbc      	itt	lt
 801024a:	580b      	ldrlt	r3, [r1, r0]
 801024c:	18c0      	addlt	r0, r0, r3
 801024e:	4770      	bx	lr

08010250 <_init>:
 8010250:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010252:	bf00      	nop
 8010254:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010256:	bc08      	pop	{r3}
 8010258:	469e      	mov	lr, r3
 801025a:	4770      	bx	lr

0801025c <_fini>:
 801025c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801025e:	bf00      	nop
 8010260:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010262:	bc08      	pop	{r3}
 8010264:	469e      	mov	lr, r3
 8010266:	4770      	bx	lr
