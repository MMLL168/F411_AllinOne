
F411_INMP441_0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f380  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001b64  0800f520  0800f520  00010520  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08011084  08011084  000202fc  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08011084  08011084  00012084  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801108c  0801108c  000202fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801108c  0801108c  0001208c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08011090  08011090  00012090  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000d2fc  20000000  08011094  00013000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00006f20  2000d2fc  0801e390  000202fc  2**2
                  ALLOC
 10 ._user_heap_stack 00001004  2001421c  0801e390  0002121c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000202fc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019ba0  00000000  00000000  0002032c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000043d5  00000000  00000000  00039ecc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001500  00000000  00000000  0003e2a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001021  00000000  00000000  0003f7a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001c7e2  00000000  00000000  000407c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001e839  00000000  00000000  0005cfab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a25c2  00000000  00000000  0007b7e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0011dda6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006ab4  00000000  00000000  0011ddec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000053  00000000  00000000  001248a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000d2fc 	.word	0x2000d2fc
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800f508 	.word	0x0800f508

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000d300 	.word	0x2000d300
 80001dc:	0800f508 	.word	0x0800f508

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cac:	f000 b9be 	b.w	800102c <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f83c 	bl	8000d34 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__aeabi_d2lz>:
 8000cc8:	b538      	push	{r3, r4, r5, lr}
 8000cca:	2200      	movs	r2, #0
 8000ccc:	2300      	movs	r3, #0
 8000cce:	4604      	mov	r4, r0
 8000cd0:	460d      	mov	r5, r1
 8000cd2:	f7ff ff0b 	bl	8000aec <__aeabi_dcmplt>
 8000cd6:	b928      	cbnz	r0, 8000ce4 <__aeabi_d2lz+0x1c>
 8000cd8:	4620      	mov	r0, r4
 8000cda:	4629      	mov	r1, r5
 8000cdc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000ce0:	f000 b80a 	b.w	8000cf8 <__aeabi_d2ulz>
 8000ce4:	4620      	mov	r0, r4
 8000ce6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000cea:	f000 f805 	bl	8000cf8 <__aeabi_d2ulz>
 8000cee:	4240      	negs	r0, r0
 8000cf0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cf4:	bd38      	pop	{r3, r4, r5, pc}
 8000cf6:	bf00      	nop

08000cf8 <__aeabi_d2ulz>:
 8000cf8:	b5d0      	push	{r4, r6, r7, lr}
 8000cfa:	4b0c      	ldr	r3, [pc, #48]	@ (8000d2c <__aeabi_d2ulz+0x34>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	4606      	mov	r6, r0
 8000d00:	460f      	mov	r7, r1
 8000d02:	f7ff fc81 	bl	8000608 <__aeabi_dmul>
 8000d06:	f7ff ff57 	bl	8000bb8 <__aeabi_d2uiz>
 8000d0a:	4604      	mov	r4, r0
 8000d0c:	f7ff fc02 	bl	8000514 <__aeabi_ui2d>
 8000d10:	4b07      	ldr	r3, [pc, #28]	@ (8000d30 <__aeabi_d2ulz+0x38>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	f7ff fc78 	bl	8000608 <__aeabi_dmul>
 8000d18:	4602      	mov	r2, r0
 8000d1a:	460b      	mov	r3, r1
 8000d1c:	4630      	mov	r0, r6
 8000d1e:	4639      	mov	r1, r7
 8000d20:	f7ff faba 	bl	8000298 <__aeabi_dsub>
 8000d24:	f7ff ff48 	bl	8000bb8 <__aeabi_d2uiz>
 8000d28:	4621      	mov	r1, r4
 8000d2a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d2c:	3df00000 	.word	0x3df00000
 8000d30:	41f00000 	.word	0x41f00000

08000d34 <__udivmoddi4>:
 8000d34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d38:	9d08      	ldr	r5, [sp, #32]
 8000d3a:	468e      	mov	lr, r1
 8000d3c:	4604      	mov	r4, r0
 8000d3e:	4688      	mov	r8, r1
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d14a      	bne.n	8000dda <__udivmoddi4+0xa6>
 8000d44:	428a      	cmp	r2, r1
 8000d46:	4617      	mov	r7, r2
 8000d48:	d962      	bls.n	8000e10 <__udivmoddi4+0xdc>
 8000d4a:	fab2 f682 	clz	r6, r2
 8000d4e:	b14e      	cbz	r6, 8000d64 <__udivmoddi4+0x30>
 8000d50:	f1c6 0320 	rsb	r3, r6, #32
 8000d54:	fa01 f806 	lsl.w	r8, r1, r6
 8000d58:	fa20 f303 	lsr.w	r3, r0, r3
 8000d5c:	40b7      	lsls	r7, r6
 8000d5e:	ea43 0808 	orr.w	r8, r3, r8
 8000d62:	40b4      	lsls	r4, r6
 8000d64:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d68:	fa1f fc87 	uxth.w	ip, r7
 8000d6c:	fbb8 f1fe 	udiv	r1, r8, lr
 8000d70:	0c23      	lsrs	r3, r4, #16
 8000d72:	fb0e 8811 	mls	r8, lr, r1, r8
 8000d76:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d7a:	fb01 f20c 	mul.w	r2, r1, ip
 8000d7e:	429a      	cmp	r2, r3
 8000d80:	d909      	bls.n	8000d96 <__udivmoddi4+0x62>
 8000d82:	18fb      	adds	r3, r7, r3
 8000d84:	f101 30ff 	add.w	r0, r1, #4294967295
 8000d88:	f080 80ea 	bcs.w	8000f60 <__udivmoddi4+0x22c>
 8000d8c:	429a      	cmp	r2, r3
 8000d8e:	f240 80e7 	bls.w	8000f60 <__udivmoddi4+0x22c>
 8000d92:	3902      	subs	r1, #2
 8000d94:	443b      	add	r3, r7
 8000d96:	1a9a      	subs	r2, r3, r2
 8000d98:	b2a3      	uxth	r3, r4
 8000d9a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d9e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000da2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000da6:	fb00 fc0c 	mul.w	ip, r0, ip
 8000daa:	459c      	cmp	ip, r3
 8000dac:	d909      	bls.n	8000dc2 <__udivmoddi4+0x8e>
 8000dae:	18fb      	adds	r3, r7, r3
 8000db0:	f100 32ff 	add.w	r2, r0, #4294967295
 8000db4:	f080 80d6 	bcs.w	8000f64 <__udivmoddi4+0x230>
 8000db8:	459c      	cmp	ip, r3
 8000dba:	f240 80d3 	bls.w	8000f64 <__udivmoddi4+0x230>
 8000dbe:	443b      	add	r3, r7
 8000dc0:	3802      	subs	r0, #2
 8000dc2:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000dc6:	eba3 030c 	sub.w	r3, r3, ip
 8000dca:	2100      	movs	r1, #0
 8000dcc:	b11d      	cbz	r5, 8000dd6 <__udivmoddi4+0xa2>
 8000dce:	40f3      	lsrs	r3, r6
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	e9c5 3200 	strd	r3, r2, [r5]
 8000dd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dda:	428b      	cmp	r3, r1
 8000ddc:	d905      	bls.n	8000dea <__udivmoddi4+0xb6>
 8000dde:	b10d      	cbz	r5, 8000de4 <__udivmoddi4+0xb0>
 8000de0:	e9c5 0100 	strd	r0, r1, [r5]
 8000de4:	2100      	movs	r1, #0
 8000de6:	4608      	mov	r0, r1
 8000de8:	e7f5      	b.n	8000dd6 <__udivmoddi4+0xa2>
 8000dea:	fab3 f183 	clz	r1, r3
 8000dee:	2900      	cmp	r1, #0
 8000df0:	d146      	bne.n	8000e80 <__udivmoddi4+0x14c>
 8000df2:	4573      	cmp	r3, lr
 8000df4:	d302      	bcc.n	8000dfc <__udivmoddi4+0xc8>
 8000df6:	4282      	cmp	r2, r0
 8000df8:	f200 8105 	bhi.w	8001006 <__udivmoddi4+0x2d2>
 8000dfc:	1a84      	subs	r4, r0, r2
 8000dfe:	eb6e 0203 	sbc.w	r2, lr, r3
 8000e02:	2001      	movs	r0, #1
 8000e04:	4690      	mov	r8, r2
 8000e06:	2d00      	cmp	r5, #0
 8000e08:	d0e5      	beq.n	8000dd6 <__udivmoddi4+0xa2>
 8000e0a:	e9c5 4800 	strd	r4, r8, [r5]
 8000e0e:	e7e2      	b.n	8000dd6 <__udivmoddi4+0xa2>
 8000e10:	2a00      	cmp	r2, #0
 8000e12:	f000 8090 	beq.w	8000f36 <__udivmoddi4+0x202>
 8000e16:	fab2 f682 	clz	r6, r2
 8000e1a:	2e00      	cmp	r6, #0
 8000e1c:	f040 80a4 	bne.w	8000f68 <__udivmoddi4+0x234>
 8000e20:	1a8a      	subs	r2, r1, r2
 8000e22:	0c03      	lsrs	r3, r0, #16
 8000e24:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e28:	b280      	uxth	r0, r0
 8000e2a:	b2bc      	uxth	r4, r7
 8000e2c:	2101      	movs	r1, #1
 8000e2e:	fbb2 fcfe 	udiv	ip, r2, lr
 8000e32:	fb0e 221c 	mls	r2, lr, ip, r2
 8000e36:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000e3a:	fb04 f20c 	mul.w	r2, r4, ip
 8000e3e:	429a      	cmp	r2, r3
 8000e40:	d907      	bls.n	8000e52 <__udivmoddi4+0x11e>
 8000e42:	18fb      	adds	r3, r7, r3
 8000e44:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000e48:	d202      	bcs.n	8000e50 <__udivmoddi4+0x11c>
 8000e4a:	429a      	cmp	r2, r3
 8000e4c:	f200 80e0 	bhi.w	8001010 <__udivmoddi4+0x2dc>
 8000e50:	46c4      	mov	ip, r8
 8000e52:	1a9b      	subs	r3, r3, r2
 8000e54:	fbb3 f2fe 	udiv	r2, r3, lr
 8000e58:	fb0e 3312 	mls	r3, lr, r2, r3
 8000e5c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000e60:	fb02 f404 	mul.w	r4, r2, r4
 8000e64:	429c      	cmp	r4, r3
 8000e66:	d907      	bls.n	8000e78 <__udivmoddi4+0x144>
 8000e68:	18fb      	adds	r3, r7, r3
 8000e6a:	f102 30ff 	add.w	r0, r2, #4294967295
 8000e6e:	d202      	bcs.n	8000e76 <__udivmoddi4+0x142>
 8000e70:	429c      	cmp	r4, r3
 8000e72:	f200 80ca 	bhi.w	800100a <__udivmoddi4+0x2d6>
 8000e76:	4602      	mov	r2, r0
 8000e78:	1b1b      	subs	r3, r3, r4
 8000e7a:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000e7e:	e7a5      	b.n	8000dcc <__udivmoddi4+0x98>
 8000e80:	f1c1 0620 	rsb	r6, r1, #32
 8000e84:	408b      	lsls	r3, r1
 8000e86:	fa22 f706 	lsr.w	r7, r2, r6
 8000e8a:	431f      	orrs	r7, r3
 8000e8c:	fa0e f401 	lsl.w	r4, lr, r1
 8000e90:	fa20 f306 	lsr.w	r3, r0, r6
 8000e94:	fa2e fe06 	lsr.w	lr, lr, r6
 8000e98:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000e9c:	4323      	orrs	r3, r4
 8000e9e:	fa00 f801 	lsl.w	r8, r0, r1
 8000ea2:	fa1f fc87 	uxth.w	ip, r7
 8000ea6:	fbbe f0f9 	udiv	r0, lr, r9
 8000eaa:	0c1c      	lsrs	r4, r3, #16
 8000eac:	fb09 ee10 	mls	lr, r9, r0, lr
 8000eb0:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000eb4:	fb00 fe0c 	mul.w	lr, r0, ip
 8000eb8:	45a6      	cmp	lr, r4
 8000eba:	fa02 f201 	lsl.w	r2, r2, r1
 8000ebe:	d909      	bls.n	8000ed4 <__udivmoddi4+0x1a0>
 8000ec0:	193c      	adds	r4, r7, r4
 8000ec2:	f100 3aff 	add.w	sl, r0, #4294967295
 8000ec6:	f080 809c 	bcs.w	8001002 <__udivmoddi4+0x2ce>
 8000eca:	45a6      	cmp	lr, r4
 8000ecc:	f240 8099 	bls.w	8001002 <__udivmoddi4+0x2ce>
 8000ed0:	3802      	subs	r0, #2
 8000ed2:	443c      	add	r4, r7
 8000ed4:	eba4 040e 	sub.w	r4, r4, lr
 8000ed8:	fa1f fe83 	uxth.w	lr, r3
 8000edc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000ee0:	fb09 4413 	mls	r4, r9, r3, r4
 8000ee4:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000ee8:	fb03 fc0c 	mul.w	ip, r3, ip
 8000eec:	45a4      	cmp	ip, r4
 8000eee:	d908      	bls.n	8000f02 <__udivmoddi4+0x1ce>
 8000ef0:	193c      	adds	r4, r7, r4
 8000ef2:	f103 3eff 	add.w	lr, r3, #4294967295
 8000ef6:	f080 8082 	bcs.w	8000ffe <__udivmoddi4+0x2ca>
 8000efa:	45a4      	cmp	ip, r4
 8000efc:	d97f      	bls.n	8000ffe <__udivmoddi4+0x2ca>
 8000efe:	3b02      	subs	r3, #2
 8000f00:	443c      	add	r4, r7
 8000f02:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000f06:	eba4 040c 	sub.w	r4, r4, ip
 8000f0a:	fba0 ec02 	umull	lr, ip, r0, r2
 8000f0e:	4564      	cmp	r4, ip
 8000f10:	4673      	mov	r3, lr
 8000f12:	46e1      	mov	r9, ip
 8000f14:	d362      	bcc.n	8000fdc <__udivmoddi4+0x2a8>
 8000f16:	d05f      	beq.n	8000fd8 <__udivmoddi4+0x2a4>
 8000f18:	b15d      	cbz	r5, 8000f32 <__udivmoddi4+0x1fe>
 8000f1a:	ebb8 0203 	subs.w	r2, r8, r3
 8000f1e:	eb64 0409 	sbc.w	r4, r4, r9
 8000f22:	fa04 f606 	lsl.w	r6, r4, r6
 8000f26:	fa22 f301 	lsr.w	r3, r2, r1
 8000f2a:	431e      	orrs	r6, r3
 8000f2c:	40cc      	lsrs	r4, r1
 8000f2e:	e9c5 6400 	strd	r6, r4, [r5]
 8000f32:	2100      	movs	r1, #0
 8000f34:	e74f      	b.n	8000dd6 <__udivmoddi4+0xa2>
 8000f36:	fbb1 fcf2 	udiv	ip, r1, r2
 8000f3a:	0c01      	lsrs	r1, r0, #16
 8000f3c:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000f40:	b280      	uxth	r0, r0
 8000f42:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000f46:	463b      	mov	r3, r7
 8000f48:	4638      	mov	r0, r7
 8000f4a:	463c      	mov	r4, r7
 8000f4c:	46b8      	mov	r8, r7
 8000f4e:	46be      	mov	lr, r7
 8000f50:	2620      	movs	r6, #32
 8000f52:	fbb1 f1f7 	udiv	r1, r1, r7
 8000f56:	eba2 0208 	sub.w	r2, r2, r8
 8000f5a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000f5e:	e766      	b.n	8000e2e <__udivmoddi4+0xfa>
 8000f60:	4601      	mov	r1, r0
 8000f62:	e718      	b.n	8000d96 <__udivmoddi4+0x62>
 8000f64:	4610      	mov	r0, r2
 8000f66:	e72c      	b.n	8000dc2 <__udivmoddi4+0x8e>
 8000f68:	f1c6 0220 	rsb	r2, r6, #32
 8000f6c:	fa2e f302 	lsr.w	r3, lr, r2
 8000f70:	40b7      	lsls	r7, r6
 8000f72:	40b1      	lsls	r1, r6
 8000f74:	fa20 f202 	lsr.w	r2, r0, r2
 8000f78:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000f7c:	430a      	orrs	r2, r1
 8000f7e:	fbb3 f8fe 	udiv	r8, r3, lr
 8000f82:	b2bc      	uxth	r4, r7
 8000f84:	fb0e 3318 	mls	r3, lr, r8, r3
 8000f88:	0c11      	lsrs	r1, r2, #16
 8000f8a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f8e:	fb08 f904 	mul.w	r9, r8, r4
 8000f92:	40b0      	lsls	r0, r6
 8000f94:	4589      	cmp	r9, r1
 8000f96:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000f9a:	b280      	uxth	r0, r0
 8000f9c:	d93e      	bls.n	800101c <__udivmoddi4+0x2e8>
 8000f9e:	1879      	adds	r1, r7, r1
 8000fa0:	f108 3cff 	add.w	ip, r8, #4294967295
 8000fa4:	d201      	bcs.n	8000faa <__udivmoddi4+0x276>
 8000fa6:	4589      	cmp	r9, r1
 8000fa8:	d81f      	bhi.n	8000fea <__udivmoddi4+0x2b6>
 8000faa:	eba1 0109 	sub.w	r1, r1, r9
 8000fae:	fbb1 f9fe 	udiv	r9, r1, lr
 8000fb2:	fb09 f804 	mul.w	r8, r9, r4
 8000fb6:	fb0e 1119 	mls	r1, lr, r9, r1
 8000fba:	b292      	uxth	r2, r2
 8000fbc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000fc0:	4542      	cmp	r2, r8
 8000fc2:	d229      	bcs.n	8001018 <__udivmoddi4+0x2e4>
 8000fc4:	18ba      	adds	r2, r7, r2
 8000fc6:	f109 31ff 	add.w	r1, r9, #4294967295
 8000fca:	d2c4      	bcs.n	8000f56 <__udivmoddi4+0x222>
 8000fcc:	4542      	cmp	r2, r8
 8000fce:	d2c2      	bcs.n	8000f56 <__udivmoddi4+0x222>
 8000fd0:	f1a9 0102 	sub.w	r1, r9, #2
 8000fd4:	443a      	add	r2, r7
 8000fd6:	e7be      	b.n	8000f56 <__udivmoddi4+0x222>
 8000fd8:	45f0      	cmp	r8, lr
 8000fda:	d29d      	bcs.n	8000f18 <__udivmoddi4+0x1e4>
 8000fdc:	ebbe 0302 	subs.w	r3, lr, r2
 8000fe0:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000fe4:	3801      	subs	r0, #1
 8000fe6:	46e1      	mov	r9, ip
 8000fe8:	e796      	b.n	8000f18 <__udivmoddi4+0x1e4>
 8000fea:	eba7 0909 	sub.w	r9, r7, r9
 8000fee:	4449      	add	r1, r9
 8000ff0:	f1a8 0c02 	sub.w	ip, r8, #2
 8000ff4:	fbb1 f9fe 	udiv	r9, r1, lr
 8000ff8:	fb09 f804 	mul.w	r8, r9, r4
 8000ffc:	e7db      	b.n	8000fb6 <__udivmoddi4+0x282>
 8000ffe:	4673      	mov	r3, lr
 8001000:	e77f      	b.n	8000f02 <__udivmoddi4+0x1ce>
 8001002:	4650      	mov	r0, sl
 8001004:	e766      	b.n	8000ed4 <__udivmoddi4+0x1a0>
 8001006:	4608      	mov	r0, r1
 8001008:	e6fd      	b.n	8000e06 <__udivmoddi4+0xd2>
 800100a:	443b      	add	r3, r7
 800100c:	3a02      	subs	r2, #2
 800100e:	e733      	b.n	8000e78 <__udivmoddi4+0x144>
 8001010:	f1ac 0c02 	sub.w	ip, ip, #2
 8001014:	443b      	add	r3, r7
 8001016:	e71c      	b.n	8000e52 <__udivmoddi4+0x11e>
 8001018:	4649      	mov	r1, r9
 800101a:	e79c      	b.n	8000f56 <__udivmoddi4+0x222>
 800101c:	eba1 0109 	sub.w	r1, r1, r9
 8001020:	46c4      	mov	ip, r8
 8001022:	fbb1 f9fe 	udiv	r9, r1, lr
 8001026:	fb09 f804 	mul.w	r8, r9, r4
 800102a:	e7c4      	b.n	8000fb6 <__udivmoddi4+0x282>

0800102c <__aeabi_idiv0>:
 800102c:	4770      	bx	lr
 800102e:	bf00      	nop

08001030 <_close>:
 * 這些是未實作的函式存根。
 * 當應用程式連結到 newlib-nano 函式庫但沒有提供這些底層實作時，
 * 就需要這些存根來避免連結器錯誤。
 */

int _close(int file) {
 8001030:	b480      	push	{r7}
 8001032:	b083      	sub	sp, #12
 8001034:	af00      	add	r7, sp, #0
 8001036:	6078      	str	r0, [r7, #4]
    return -1;
 8001038:	f04f 33ff 	mov.w	r3, #4294967295
}
 800103c:	4618      	mov	r0, r3
 800103e:	370c      	adds	r7, #12
 8001040:	46bd      	mov	sp, r7
 8001042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001046:	4770      	bx	lr

08001048 <_lseek>:

int _lseek(int file, int ptr, int dir) {
 8001048:	b480      	push	{r7}
 800104a:	b085      	sub	sp, #20
 800104c:	af00      	add	r7, sp, #0
 800104e:	60f8      	str	r0, [r7, #12]
 8001050:	60b9      	str	r1, [r7, #8]
 8001052:	607a      	str	r2, [r7, #4]
    return 0;
 8001054:	2300      	movs	r3, #0
}
 8001056:	4618      	mov	r0, r3
 8001058:	3714      	adds	r7, #20
 800105a:	46bd      	mov	sp, r7
 800105c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001060:	4770      	bx	lr

08001062 <_read>:

int _read(int file, char *ptr, int len) {
 8001062:	b480      	push	{r7}
 8001064:	b085      	sub	sp, #20
 8001066:	af00      	add	r7, sp, #0
 8001068:	60f8      	str	r0, [r7, #12]
 800106a:	60b9      	str	r1, [r7, #8]
 800106c:	607a      	str	r2, [r7, #4]
    return 0;
 800106e:	2300      	movs	r3, #0
}
 8001070:	4618      	mov	r0, r3
 8001072:	3714      	adds	r7, #20
 8001074:	46bd      	mov	sp, r7
 8001076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107a:	4770      	bx	lr

0800107c <_fstat>:

int _fstat(int file, struct stat *st) {
 800107c:	b480      	push	{r7}
 800107e:	b083      	sub	sp, #12
 8001080:	af00      	add	r7, sp, #0
 8001082:	6078      	str	r0, [r7, #4]
 8001084:	6039      	str	r1, [r7, #0]
    st->st_mode = S_IFCHR;
 8001086:	683b      	ldr	r3, [r7, #0]
 8001088:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800108c:	605a      	str	r2, [r3, #4]
    return 0;
 800108e:	2300      	movs	r3, #0
}
 8001090:	4618      	mov	r0, r3
 8001092:	370c      	adds	r7, #12
 8001094:	46bd      	mov	sp, r7
 8001096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109a:	4770      	bx	lr

0800109c <_isatty>:

int _isatty(int file) {
 800109c:	b480      	push	{r7}
 800109e:	b083      	sub	sp, #12
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	6078      	str	r0, [r7, #4]
    return 1;
 80010a4:	2301      	movs	r3, #1
}
 80010a6:	4618      	mov	r0, r3
 80010a8:	370c      	adds	r7, #12
 80010aa:	46bd      	mov	sp, r7
 80010ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b0:	4770      	bx	lr
	...

080010b4 <_write>:

int _write(int file, char *ptr, int len)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b084      	sub	sp, #16
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	60f8      	str	r0, [r7, #12]
 80010bc:	60b9      	str	r1, [r7, #8]
 80010be:	607a      	str	r2, [r7, #4]
  // 只處理標準輸出 (STDOUT) 和標準錯誤 (STDERR)
  if (file == 1 || file == 2)
 80010c0:	68fb      	ldr	r3, [r7, #12]
 80010c2:	2b01      	cmp	r3, #1
 80010c4:	d002      	beq.n	80010cc <_write+0x18>
 80010c6:	68fb      	ldr	r3, [r7, #12]
 80010c8:	2b02      	cmp	r3, #2
 80010ca:	d106      	bne.n	80010da <_write+0x26>
  {
    // 將數據透過 huart6 傳送出去
    // 注意，我們傳遞的是 huart6 的位址: &huart6
    // 最後一個參數是超時時間，設定 100ms 即可
    HAL_UART_Transmit(&huart6, (uint8_t*)ptr, len, 100);
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	b29a      	uxth	r2, r3
 80010d0:	2364      	movs	r3, #100	@ 0x64
 80010d2:	68b9      	ldr	r1, [r7, #8]
 80010d4:	4803      	ldr	r0, [pc, #12]	@ (80010e4 <_write+0x30>)
 80010d6:	f008 fd29 	bl	8009b2c <HAL_UART_Transmit>
  }
  return len;
 80010da:	687b      	ldr	r3, [r7, #4]
}
 80010dc:	4618      	mov	r0, r3
 80010de:	3710      	adds	r7, #16
 80010e0:	46bd      	mov	sp, r7
 80010e2:	bd80      	pop	{r7, pc}
 80010e4:	20014070 	.word	0x20014070

080010e8 <_getpid>:

// 其他可能需要的存根
int _getpid(void) {
 80010e8:	b480      	push	{r7}
 80010ea:	af00      	add	r7, sp, #0
    return 1;
 80010ec:	2301      	movs	r3, #1
}
 80010ee:	4618      	mov	r0, r3
 80010f0:	46bd      	mov	sp, r7
 80010f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f6:	4770      	bx	lr

080010f8 <_kill>:

int _kill(int pid, int sig) {
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b082      	sub	sp, #8
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]
 8001100:	6039      	str	r1, [r7, #0]
    errno = EINVAL;
 8001102:	f00a ff0b 	bl	800bf1c <__errno>
 8001106:	4603      	mov	r3, r0
 8001108:	2216      	movs	r2, #22
 800110a:	601a      	str	r2, [r3, #0]
    return -1;
 800110c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001110:	4618      	mov	r0, r3
 8001112:	3708      	adds	r7, #8
 8001114:	46bd      	mov	sp, r7
 8001116:	bd80      	pop	{r7, pc}

08001118 <_exit>:

void _exit(int status) {
 8001118:	b580      	push	{r7, lr}
 800111a:	b082      	sub	sp, #8
 800111c:	af00      	add	r7, sp, #0
 800111e:	6078      	str	r0, [r7, #4]
    _kill(status, -1);
 8001120:	f04f 31ff 	mov.w	r1, #4294967295
 8001124:	6878      	ldr	r0, [r7, #4]
 8001126:	f7ff ffe7 	bl	80010f8 <_kill>
    while (1) {} // 無限迴圈
 800112a:	bf00      	nop
 800112c:	e7fd      	b.n	800112a <_exit+0x12>
	...

08001130 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	b084      	sub	sp, #16
 8001134:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001136:	463b      	mov	r3, r7
 8001138:	2200      	movs	r2, #0
 800113a:	601a      	str	r2, [r3, #0]
 800113c:	605a      	str	r2, [r3, #4]
 800113e:	609a      	str	r2, [r3, #8]
 8001140:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001142:	4b36      	ldr	r3, [pc, #216]	@ (800121c <MX_ADC1_Init+0xec>)
 8001144:	4a36      	ldr	r2, [pc, #216]	@ (8001220 <MX_ADC1_Init+0xf0>)
 8001146:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001148:	4b34      	ldr	r3, [pc, #208]	@ (800121c <MX_ADC1_Init+0xec>)
 800114a:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800114e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001150:	4b32      	ldr	r3, [pc, #200]	@ (800121c <MX_ADC1_Init+0xec>)
 8001152:	2200      	movs	r2, #0
 8001154:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8001156:	4b31      	ldr	r3, [pc, #196]	@ (800121c <MX_ADC1_Init+0xec>)
 8001158:	2201      	movs	r2, #1
 800115a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800115c:	4b2f      	ldr	r3, [pc, #188]	@ (800121c <MX_ADC1_Init+0xec>)
 800115e:	2200      	movs	r2, #0
 8001160:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001162:	4b2e      	ldr	r3, [pc, #184]	@ (800121c <MX_ADC1_Init+0xec>)
 8001164:	2200      	movs	r2, #0
 8001166:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800116a:	4b2c      	ldr	r3, [pc, #176]	@ (800121c <MX_ADC1_Init+0xec>)
 800116c:	2200      	movs	r2, #0
 800116e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001170:	4b2a      	ldr	r3, [pc, #168]	@ (800121c <MX_ADC1_Init+0xec>)
 8001172:	4a2c      	ldr	r2, [pc, #176]	@ (8001224 <MX_ADC1_Init+0xf4>)
 8001174:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001176:	4b29      	ldr	r3, [pc, #164]	@ (800121c <MX_ADC1_Init+0xec>)
 8001178:	2200      	movs	r2, #0
 800117a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 4;
 800117c:	4b27      	ldr	r3, [pc, #156]	@ (800121c <MX_ADC1_Init+0xec>)
 800117e:	2204      	movs	r2, #4
 8001180:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001182:	4b26      	ldr	r3, [pc, #152]	@ (800121c <MX_ADC1_Init+0xec>)
 8001184:	2200      	movs	r2, #0
 8001186:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800118a:	4b24      	ldr	r3, [pc, #144]	@ (800121c <MX_ADC1_Init+0xec>)
 800118c:	2201      	movs	r2, #1
 800118e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001190:	4822      	ldr	r0, [pc, #136]	@ (800121c <MX_ADC1_Init+0xec>)
 8001192:	f004 f9f3 	bl	800557c <HAL_ADC_Init>
 8001196:	4603      	mov	r3, r0
 8001198:	2b00      	cmp	r3, #0
 800119a:	d001      	beq.n	80011a0 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 800119c:	f001 fbe6 	bl	800296c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 80011a0:	2306      	movs	r3, #6
 80011a2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80011a4:	2301      	movs	r3, #1
 80011a6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80011a8:	2300      	movs	r3, #0
 80011aa:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80011ac:	463b      	mov	r3, r7
 80011ae:	4619      	mov	r1, r3
 80011b0:	481a      	ldr	r0, [pc, #104]	@ (800121c <MX_ADC1_Init+0xec>)
 80011b2:	f004 fb89 	bl	80058c8 <HAL_ADC_ConfigChannel>
 80011b6:	4603      	mov	r3, r0
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d001      	beq.n	80011c0 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80011bc:	f001 fbd6 	bl	800296c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 80011c0:	2307      	movs	r3, #7
 80011c2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 80011c4:	2302      	movs	r3, #2
 80011c6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80011c8:	463b      	mov	r3, r7
 80011ca:	4619      	mov	r1, r3
 80011cc:	4813      	ldr	r0, [pc, #76]	@ (800121c <MX_ADC1_Init+0xec>)
 80011ce:	f004 fb7b 	bl	80058c8 <HAL_ADC_ConfigChannel>
 80011d2:	4603      	mov	r3, r0
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d001      	beq.n	80011dc <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 80011d8:	f001 fbc8 	bl	800296c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 80011dc:	230e      	movs	r3, #14
 80011de:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 80011e0:	2303      	movs	r3, #3
 80011e2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80011e4:	463b      	mov	r3, r7
 80011e6:	4619      	mov	r1, r3
 80011e8:	480c      	ldr	r0, [pc, #48]	@ (800121c <MX_ADC1_Init+0xec>)
 80011ea:	f004 fb6d 	bl	80058c8 <HAL_ADC_ConfigChannel>
 80011ee:	4603      	mov	r3, r0
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d001      	beq.n	80011f8 <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 80011f4:	f001 fbba 	bl	800296c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_15;
 80011f8:	230f      	movs	r3, #15
 80011fa:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 80011fc:	2304      	movs	r3, #4
 80011fe:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001200:	463b      	mov	r3, r7
 8001202:	4619      	mov	r1, r3
 8001204:	4805      	ldr	r0, [pc, #20]	@ (800121c <MX_ADC1_Init+0xec>)
 8001206:	f004 fb5f 	bl	80058c8 <HAL_ADC_ConfigChannel>
 800120a:	4603      	mov	r3, r0
 800120c:	2b00      	cmp	r3, #0
 800120e:	d001      	beq.n	8001214 <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 8001210:	f001 fbac 	bl	800296c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001214:	bf00      	nop
 8001216:	3710      	adds	r7, #16
 8001218:	46bd      	mov	sp, r7
 800121a:	bd80      	pop	{r7, pc}
 800121c:	2000d318 	.word	0x2000d318
 8001220:	40012000 	.word	0x40012000
 8001224:	0f000001 	.word	0x0f000001

08001228 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	b08a      	sub	sp, #40	@ 0x28
 800122c:	af00      	add	r7, sp, #0
 800122e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001230:	f107 0314 	add.w	r3, r7, #20
 8001234:	2200      	movs	r2, #0
 8001236:	601a      	str	r2, [r3, #0]
 8001238:	605a      	str	r2, [r3, #4]
 800123a:	609a      	str	r2, [r3, #8]
 800123c:	60da      	str	r2, [r3, #12]
 800123e:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	4a3b      	ldr	r2, [pc, #236]	@ (8001334 <HAL_ADC_MspInit+0x10c>)
 8001246:	4293      	cmp	r3, r2
 8001248:	d170      	bne.n	800132c <HAL_ADC_MspInit+0x104>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800124a:	2300      	movs	r3, #0
 800124c:	613b      	str	r3, [r7, #16]
 800124e:	4b3a      	ldr	r3, [pc, #232]	@ (8001338 <HAL_ADC_MspInit+0x110>)
 8001250:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001252:	4a39      	ldr	r2, [pc, #228]	@ (8001338 <HAL_ADC_MspInit+0x110>)
 8001254:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001258:	6453      	str	r3, [r2, #68]	@ 0x44
 800125a:	4b37      	ldr	r3, [pc, #220]	@ (8001338 <HAL_ADC_MspInit+0x110>)
 800125c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800125e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001262:	613b      	str	r3, [r7, #16]
 8001264:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001266:	2300      	movs	r3, #0
 8001268:	60fb      	str	r3, [r7, #12]
 800126a:	4b33      	ldr	r3, [pc, #204]	@ (8001338 <HAL_ADC_MspInit+0x110>)
 800126c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800126e:	4a32      	ldr	r2, [pc, #200]	@ (8001338 <HAL_ADC_MspInit+0x110>)
 8001270:	f043 0301 	orr.w	r3, r3, #1
 8001274:	6313      	str	r3, [r2, #48]	@ 0x30
 8001276:	4b30      	ldr	r3, [pc, #192]	@ (8001338 <HAL_ADC_MspInit+0x110>)
 8001278:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800127a:	f003 0301 	and.w	r3, r3, #1
 800127e:	60fb      	str	r3, [r7, #12]
 8001280:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001282:	2300      	movs	r3, #0
 8001284:	60bb      	str	r3, [r7, #8]
 8001286:	4b2c      	ldr	r3, [pc, #176]	@ (8001338 <HAL_ADC_MspInit+0x110>)
 8001288:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800128a:	4a2b      	ldr	r2, [pc, #172]	@ (8001338 <HAL_ADC_MspInit+0x110>)
 800128c:	f043 0304 	orr.w	r3, r3, #4
 8001290:	6313      	str	r3, [r2, #48]	@ 0x30
 8001292:	4b29      	ldr	r3, [pc, #164]	@ (8001338 <HAL_ADC_MspInit+0x110>)
 8001294:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001296:	f003 0304 	and.w	r3, r3, #4
 800129a:	60bb      	str	r3, [r7, #8]
 800129c:	68bb      	ldr	r3, [r7, #8]
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    PC4     ------> ADC1_IN14
    PC5     ------> ADC1_IN15
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800129e:	23c0      	movs	r3, #192	@ 0xc0
 80012a0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80012a2:	2303      	movs	r3, #3
 80012a4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012a6:	2300      	movs	r3, #0
 80012a8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012aa:	f107 0314 	add.w	r3, r7, #20
 80012ae:	4619      	mov	r1, r3
 80012b0:	4822      	ldr	r0, [pc, #136]	@ (800133c <HAL_ADC_MspInit+0x114>)
 80012b2:	f005 fae9 	bl	8006888 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80012b6:	2330      	movs	r3, #48	@ 0x30
 80012b8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80012ba:	2303      	movs	r3, #3
 80012bc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012be:	2300      	movs	r3, #0
 80012c0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012c2:	f107 0314 	add.w	r3, r7, #20
 80012c6:	4619      	mov	r1, r3
 80012c8:	481d      	ldr	r0, [pc, #116]	@ (8001340 <HAL_ADC_MspInit+0x118>)
 80012ca:	f005 fadd 	bl	8006888 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 80012ce:	4b1d      	ldr	r3, [pc, #116]	@ (8001344 <HAL_ADC_MspInit+0x11c>)
 80012d0:	4a1d      	ldr	r2, [pc, #116]	@ (8001348 <HAL_ADC_MspInit+0x120>)
 80012d2:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80012d4:	4b1b      	ldr	r3, [pc, #108]	@ (8001344 <HAL_ADC_MspInit+0x11c>)
 80012d6:	2200      	movs	r2, #0
 80012d8:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80012da:	4b1a      	ldr	r3, [pc, #104]	@ (8001344 <HAL_ADC_MspInit+0x11c>)
 80012dc:	2200      	movs	r2, #0
 80012de:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80012e0:	4b18      	ldr	r3, [pc, #96]	@ (8001344 <HAL_ADC_MspInit+0x11c>)
 80012e2:	2200      	movs	r2, #0
 80012e4:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80012e6:	4b17      	ldr	r3, [pc, #92]	@ (8001344 <HAL_ADC_MspInit+0x11c>)
 80012e8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80012ec:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80012ee:	4b15      	ldr	r3, [pc, #84]	@ (8001344 <HAL_ADC_MspInit+0x11c>)
 80012f0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80012f4:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80012f6:	4b13      	ldr	r3, [pc, #76]	@ (8001344 <HAL_ADC_MspInit+0x11c>)
 80012f8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80012fc:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 80012fe:	4b11      	ldr	r3, [pc, #68]	@ (8001344 <HAL_ADC_MspInit+0x11c>)
 8001300:	2200      	movs	r2, #0
 8001302:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001304:	4b0f      	ldr	r3, [pc, #60]	@ (8001344 <HAL_ADC_MspInit+0x11c>)
 8001306:	2200      	movs	r2, #0
 8001308:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800130a:	4b0e      	ldr	r3, [pc, #56]	@ (8001344 <HAL_ADC_MspInit+0x11c>)
 800130c:	2200      	movs	r2, #0
 800130e:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001310:	480c      	ldr	r0, [pc, #48]	@ (8001344 <HAL_ADC_MspInit+0x11c>)
 8001312:	f004 feb7 	bl	8006084 <HAL_DMA_Init>
 8001316:	4603      	mov	r3, r0
 8001318:	2b00      	cmp	r3, #0
 800131a:	d001      	beq.n	8001320 <HAL_ADC_MspInit+0xf8>
    {
      Error_Handler();
 800131c:	f001 fb26 	bl	800296c <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	4a08      	ldr	r2, [pc, #32]	@ (8001344 <HAL_ADC_MspInit+0x11c>)
 8001324:	639a      	str	r2, [r3, #56]	@ 0x38
 8001326:	4a07      	ldr	r2, [pc, #28]	@ (8001344 <HAL_ADC_MspInit+0x11c>)
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800132c:	bf00      	nop
 800132e:	3728      	adds	r7, #40	@ 0x28
 8001330:	46bd      	mov	sp, r7
 8001332:	bd80      	pop	{r7, pc}
 8001334:	40012000 	.word	0x40012000
 8001338:	40023800 	.word	0x40023800
 800133c:	40020000 	.word	0x40020000
 8001340:	40020800 	.word	0x40020800
 8001344:	2000d360 	.word	0x2000d360
 8001348:	40026410 	.word	0x40026410

0800134c <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8001350:	4b06      	ldr	r3, [pc, #24]	@ (800136c <MX_CRC_Init+0x20>)
 8001352:	4a07      	ldr	r2, [pc, #28]	@ (8001370 <MX_CRC_Init+0x24>)
 8001354:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8001356:	4805      	ldr	r0, [pc, #20]	@ (800136c <MX_CRC_Init+0x20>)
 8001358:	f004 fe77 	bl	800604a <HAL_CRC_Init>
 800135c:	4603      	mov	r3, r0
 800135e:	2b00      	cmp	r3, #0
 8001360:	d001      	beq.n	8001366 <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 8001362:	f001 fb03 	bl	800296c <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8001366:	bf00      	nop
 8001368:	bd80      	pop	{r7, pc}
 800136a:	bf00      	nop
 800136c:	2000d3c0 	.word	0x2000d3c0
 8001370:	40023000 	.word	0x40023000

08001374 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 8001374:	b480      	push	{r7}
 8001376:	b085      	sub	sp, #20
 8001378:	af00      	add	r7, sp, #0
 800137a:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	4a0b      	ldr	r2, [pc, #44]	@ (80013b0 <HAL_CRC_MspInit+0x3c>)
 8001382:	4293      	cmp	r3, r2
 8001384:	d10d      	bne.n	80013a2 <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8001386:	2300      	movs	r3, #0
 8001388:	60fb      	str	r3, [r7, #12]
 800138a:	4b0a      	ldr	r3, [pc, #40]	@ (80013b4 <HAL_CRC_MspInit+0x40>)
 800138c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800138e:	4a09      	ldr	r2, [pc, #36]	@ (80013b4 <HAL_CRC_MspInit+0x40>)
 8001390:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001394:	6313      	str	r3, [r2, #48]	@ 0x30
 8001396:	4b07      	ldr	r3, [pc, #28]	@ (80013b4 <HAL_CRC_MspInit+0x40>)
 8001398:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800139a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800139e:	60fb      	str	r3, [r7, #12]
 80013a0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 80013a2:	bf00      	nop
 80013a4:	3714      	adds	r7, #20
 80013a6:	46bd      	mov	sp, r7
 80013a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ac:	4770      	bx	lr
 80013ae:	bf00      	nop
 80013b0:	40023000 	.word	0x40023000
 80013b4:	40023800 	.word	0x40023800

080013b8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b082      	sub	sp, #8
 80013bc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80013be:	2300      	movs	r3, #0
 80013c0:	607b      	str	r3, [r7, #4]
 80013c2:	4b17      	ldr	r3, [pc, #92]	@ (8001420 <MX_DMA_Init+0x68>)
 80013c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013c6:	4a16      	ldr	r2, [pc, #88]	@ (8001420 <MX_DMA_Init+0x68>)
 80013c8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80013cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80013ce:	4b14      	ldr	r3, [pc, #80]	@ (8001420 <MX_DMA_Init+0x68>)
 80013d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013d2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80013d6:	607b      	str	r3, [r7, #4]
 80013d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 80013da:	2300      	movs	r3, #0
 80013dc:	603b      	str	r3, [r7, #0]
 80013de:	4b10      	ldr	r3, [pc, #64]	@ (8001420 <MX_DMA_Init+0x68>)
 80013e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013e2:	4a0f      	ldr	r2, [pc, #60]	@ (8001420 <MX_DMA_Init+0x68>)
 80013e4:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80013e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80013ea:	4b0d      	ldr	r3, [pc, #52]	@ (8001420 <MX_DMA_Init+0x68>)
 80013ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013ee:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80013f2:	603b      	str	r3, [r7, #0]
 80013f4:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 80013f6:	2200      	movs	r2, #0
 80013f8:	2100      	movs	r1, #0
 80013fa:	200e      	movs	r0, #14
 80013fc:	f004 fdef 	bl	8005fde <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8001400:	200e      	movs	r0, #14
 8001402:	f004 fe08 	bl	8006016 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8001406:	2200      	movs	r2, #0
 8001408:	2100      	movs	r1, #0
 800140a:	2038      	movs	r0, #56	@ 0x38
 800140c:	f004 fde7 	bl	8005fde <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001410:	2038      	movs	r0, #56	@ 0x38
 8001412:	f004 fe00 	bl	8006016 <HAL_NVIC_EnableIRQ>

}
 8001416:	bf00      	nop
 8001418:	3708      	adds	r7, #8
 800141a:	46bd      	mov	sp, r7
 800141c:	bd80      	pop	{r7, pc}
 800141e:	bf00      	nop
 8001420:	40023800 	.word	0x40023800

08001424 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	b08a      	sub	sp, #40	@ 0x28
 8001428:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800142a:	f107 0314 	add.w	r3, r7, #20
 800142e:	2200      	movs	r2, #0
 8001430:	601a      	str	r2, [r3, #0]
 8001432:	605a      	str	r2, [r3, #4]
 8001434:	609a      	str	r2, [r3, #8]
 8001436:	60da      	str	r2, [r3, #12]
 8001438:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800143a:	2300      	movs	r3, #0
 800143c:	613b      	str	r3, [r7, #16]
 800143e:	4b45      	ldr	r3, [pc, #276]	@ (8001554 <MX_GPIO_Init+0x130>)
 8001440:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001442:	4a44      	ldr	r2, [pc, #272]	@ (8001554 <MX_GPIO_Init+0x130>)
 8001444:	f043 0304 	orr.w	r3, r3, #4
 8001448:	6313      	str	r3, [r2, #48]	@ 0x30
 800144a:	4b42      	ldr	r3, [pc, #264]	@ (8001554 <MX_GPIO_Init+0x130>)
 800144c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800144e:	f003 0304 	and.w	r3, r3, #4
 8001452:	613b      	str	r3, [r7, #16]
 8001454:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001456:	2300      	movs	r3, #0
 8001458:	60fb      	str	r3, [r7, #12]
 800145a:	4b3e      	ldr	r3, [pc, #248]	@ (8001554 <MX_GPIO_Init+0x130>)
 800145c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800145e:	4a3d      	ldr	r2, [pc, #244]	@ (8001554 <MX_GPIO_Init+0x130>)
 8001460:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001464:	6313      	str	r3, [r2, #48]	@ 0x30
 8001466:	4b3b      	ldr	r3, [pc, #236]	@ (8001554 <MX_GPIO_Init+0x130>)
 8001468:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800146a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800146e:	60fb      	str	r3, [r7, #12]
 8001470:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001472:	2300      	movs	r3, #0
 8001474:	60bb      	str	r3, [r7, #8]
 8001476:	4b37      	ldr	r3, [pc, #220]	@ (8001554 <MX_GPIO_Init+0x130>)
 8001478:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800147a:	4a36      	ldr	r2, [pc, #216]	@ (8001554 <MX_GPIO_Init+0x130>)
 800147c:	f043 0301 	orr.w	r3, r3, #1
 8001480:	6313      	str	r3, [r2, #48]	@ 0x30
 8001482:	4b34      	ldr	r3, [pc, #208]	@ (8001554 <MX_GPIO_Init+0x130>)
 8001484:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001486:	f003 0301 	and.w	r3, r3, #1
 800148a:	60bb      	str	r3, [r7, #8]
 800148c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800148e:	2300      	movs	r3, #0
 8001490:	607b      	str	r3, [r7, #4]
 8001492:	4b30      	ldr	r3, [pc, #192]	@ (8001554 <MX_GPIO_Init+0x130>)
 8001494:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001496:	4a2f      	ldr	r2, [pc, #188]	@ (8001554 <MX_GPIO_Init+0x130>)
 8001498:	f043 0302 	orr.w	r3, r3, #2
 800149c:	6313      	str	r3, [r2, #48]	@ 0x30
 800149e:	4b2d      	ldr	r3, [pc, #180]	@ (8001554 <MX_GPIO_Init+0x130>)
 80014a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014a2:	f003 0302 	and.w	r3, r3, #2
 80014a6:	607b      	str	r3, [r7, #4]
 80014a8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, ILI9341_DC_Pin|ILI9341_RESET_Pin, GPIO_PIN_RESET);
 80014aa:	2200      	movs	r2, #0
 80014ac:	2103      	movs	r1, #3
 80014ae:	482a      	ldr	r0, [pc, #168]	@ (8001558 <MX_GPIO_Init+0x134>)
 80014b0:	f005 fb86 	bl	8006bc0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80014b4:	2200      	movs	r2, #0
 80014b6:	2120      	movs	r1, #32
 80014b8:	4828      	ldr	r0, [pc, #160]	@ (800155c <MX_GPIO_Init+0x138>)
 80014ba:	f005 fb81 	bl	8006bc0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ILI9341_CS_Pin|SDCARD_CS_Pin, GPIO_PIN_SET);
 80014be:	2201      	movs	r2, #1
 80014c0:	f244 0102 	movw	r1, #16386	@ 0x4002
 80014c4:	4826      	ldr	r0, [pc, #152]	@ (8001560 <MX_GPIO_Init+0x13c>)
 80014c6:	f005 fb7b 	bl	8006bc0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80014ca:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80014ce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80014d0:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80014d4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014d6:	2300      	movs	r3, #0
 80014d8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80014da:	f107 0314 	add.w	r3, r7, #20
 80014de:	4619      	mov	r1, r3
 80014e0:	481d      	ldr	r0, [pc, #116]	@ (8001558 <MX_GPIO_Init+0x134>)
 80014e2:	f005 f9d1 	bl	8006888 <HAL_GPIO_Init>

  /*Configure GPIO pins : ILI9341_DC_Pin ILI9341_RESET_Pin */
  GPIO_InitStruct.Pin = ILI9341_DC_Pin|ILI9341_RESET_Pin;
 80014e6:	2303      	movs	r3, #3
 80014e8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014ea:	2301      	movs	r3, #1
 80014ec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ee:	2300      	movs	r3, #0
 80014f0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014f2:	2300      	movs	r3, #0
 80014f4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80014f6:	f107 0314 	add.w	r3, r7, #20
 80014fa:	4619      	mov	r1, r3
 80014fc:	4816      	ldr	r0, [pc, #88]	@ (8001558 <MX_GPIO_Init+0x134>)
 80014fe:	f005 f9c3 	bl	8006888 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001502:	2320      	movs	r3, #32
 8001504:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001506:	2301      	movs	r3, #1
 8001508:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800150a:	2300      	movs	r3, #0
 800150c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800150e:	2300      	movs	r3, #0
 8001510:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001512:	f107 0314 	add.w	r3, r7, #20
 8001516:	4619      	mov	r1, r3
 8001518:	4810      	ldr	r0, [pc, #64]	@ (800155c <MX_GPIO_Init+0x138>)
 800151a:	f005 f9b5 	bl	8006888 <HAL_GPIO_Init>

  /*Configure GPIO pins : ILI9341_CS_Pin SDCARD_CS_Pin */
  GPIO_InitStruct.Pin = ILI9341_CS_Pin|SDCARD_CS_Pin;
 800151e:	f244 0302 	movw	r3, #16386	@ 0x4002
 8001522:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001524:	2301      	movs	r3, #1
 8001526:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001528:	2300      	movs	r3, #0
 800152a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800152c:	2300      	movs	r3, #0
 800152e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001530:	f107 0314 	add.w	r3, r7, #20
 8001534:	4619      	mov	r1, r3
 8001536:	480a      	ldr	r0, [pc, #40]	@ (8001560 <MX_GPIO_Init+0x13c>)
 8001538:	f005 f9a6 	bl	8006888 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800153c:	2200      	movs	r2, #0
 800153e:	2100      	movs	r1, #0
 8001540:	2028      	movs	r0, #40	@ 0x28
 8001542:	f004 fd4c 	bl	8005fde <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001546:	2028      	movs	r0, #40	@ 0x28
 8001548:	f004 fd65 	bl	8006016 <HAL_NVIC_EnableIRQ>

}
 800154c:	bf00      	nop
 800154e:	3728      	adds	r7, #40	@ 0x28
 8001550:	46bd      	mov	sp, r7
 8001552:	bd80      	pop	{r7, pc}
 8001554:	40023800 	.word	0x40023800
 8001558:	40020800 	.word	0x40020800
 800155c:	40020000 	.word	0x40020000
 8001560:	40020400 	.word	0x40020400

08001564 <MX_I2S2_Init>:
I2S_HandleTypeDef hi2s3;
DMA_HandleTypeDef hdma_spi2_rx;

/* I2S2 init function */
void MX_I2S2_Init(void)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 8001568:	4b13      	ldr	r3, [pc, #76]	@ (80015b8 <MX_I2S2_Init+0x54>)
 800156a:	4a14      	ldr	r2, [pc, #80]	@ (80015bc <MX_I2S2_Init+0x58>)
 800156c:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_RX;
 800156e:	4b12      	ldr	r3, [pc, #72]	@ (80015b8 <MX_I2S2_Init+0x54>)
 8001570:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8001574:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 8001576:	4b10      	ldr	r3, [pc, #64]	@ (80015b8 <MX_I2S2_Init+0x54>)
 8001578:	2200      	movs	r2, #0
 800157a:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_24B;
 800157c:	4b0e      	ldr	r3, [pc, #56]	@ (80015b8 <MX_I2S2_Init+0x54>)
 800157e:	2203      	movs	r2, #3
 8001580:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 8001582:	4b0d      	ldr	r3, [pc, #52]	@ (80015b8 <MX_I2S2_Init+0x54>)
 8001584:	2200      	movs	r2, #0
 8001586:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_16K;
 8001588:	4b0b      	ldr	r3, [pc, #44]	@ (80015b8 <MX_I2S2_Init+0x54>)
 800158a:	f44f 527a 	mov.w	r2, #16000	@ 0x3e80
 800158e:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 8001590:	4b09      	ldr	r3, [pc, #36]	@ (80015b8 <MX_I2S2_Init+0x54>)
 8001592:	2200      	movs	r2, #0
 8001594:	619a      	str	r2, [r3, #24]
  hi2s2.Init.ClockSource = I2S_CLOCK_PLL;
 8001596:	4b08      	ldr	r3, [pc, #32]	@ (80015b8 <MX_I2S2_Init+0x54>)
 8001598:	2200      	movs	r2, #0
 800159a:	61da      	str	r2, [r3, #28]
  hi2s2.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 800159c:	4b06      	ldr	r3, [pc, #24]	@ (80015b8 <MX_I2S2_Init+0x54>)
 800159e:	2200      	movs	r2, #0
 80015a0:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 80015a2:	4805      	ldr	r0, [pc, #20]	@ (80015b8 <MX_I2S2_Init+0x54>)
 80015a4:	f005 fb4a 	bl	8006c3c <HAL_I2S_Init>
 80015a8:	4603      	mov	r3, r0
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d001      	beq.n	80015b2 <MX_I2S2_Init+0x4e>
  {
    Error_Handler();
 80015ae:	f001 f9dd 	bl	800296c <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 80015b2:	bf00      	nop
 80015b4:	bd80      	pop	{r7, pc}
 80015b6:	bf00      	nop
 80015b8:	2000d3c8 	.word	0x2000d3c8
 80015bc:	40003800 	.word	0x40003800

080015c0 <MX_I2S3_Init>:
/* I2S3 init function */
void MX_I2S3_Init(void)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 80015c4:	4b13      	ldr	r3, [pc, #76]	@ (8001614 <MX_I2S3_Init+0x54>)
 80015c6:	4a14      	ldr	r2, [pc, #80]	@ (8001618 <MX_I2S3_Init+0x58>)
 80015c8:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 80015ca:	4b12      	ldr	r3, [pc, #72]	@ (8001614 <MX_I2S3_Init+0x54>)
 80015cc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80015d0:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 80015d2:	4b10      	ldr	r3, [pc, #64]	@ (8001614 <MX_I2S3_Init+0x54>)
 80015d4:	2200      	movs	r2, #0
 80015d6:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 80015d8:	4b0e      	ldr	r3, [pc, #56]	@ (8001614 <MX_I2S3_Init+0x54>)
 80015da:	2200      	movs	r2, #0
 80015dc:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 80015de:	4b0d      	ldr	r3, [pc, #52]	@ (8001614 <MX_I2S3_Init+0x54>)
 80015e0:	2200      	movs	r2, #0
 80015e2:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_16K;
 80015e4:	4b0b      	ldr	r3, [pc, #44]	@ (8001614 <MX_I2S3_Init+0x54>)
 80015e6:	f44f 527a 	mov.w	r2, #16000	@ 0x3e80
 80015ea:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 80015ec:	4b09      	ldr	r3, [pc, #36]	@ (8001614 <MX_I2S3_Init+0x54>)
 80015ee:	2200      	movs	r2, #0
 80015f0:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 80015f2:	4b08      	ldr	r3, [pc, #32]	@ (8001614 <MX_I2S3_Init+0x54>)
 80015f4:	2200      	movs	r2, #0
 80015f6:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 80015f8:	4b06      	ldr	r3, [pc, #24]	@ (8001614 <MX_I2S3_Init+0x54>)
 80015fa:	2200      	movs	r2, #0
 80015fc:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 80015fe:	4805      	ldr	r0, [pc, #20]	@ (8001614 <MX_I2S3_Init+0x54>)
 8001600:	f005 fb1c 	bl	8006c3c <HAL_I2S_Init>
 8001604:	4603      	mov	r3, r0
 8001606:	2b00      	cmp	r3, #0
 8001608:	d001      	beq.n	800160e <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 800160a:	f001 f9af 	bl	800296c <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 800160e:	bf00      	nop
 8001610:	bd80      	pop	{r7, pc}
 8001612:	bf00      	nop
 8001614:	2000d410 	.word	0x2000d410
 8001618:	40003c00 	.word	0x40003c00

0800161c <HAL_I2S_MspInit>:

void HAL_I2S_MspInit(I2S_HandleTypeDef* i2sHandle)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	b08e      	sub	sp, #56	@ 0x38
 8001620:	af00      	add	r7, sp, #0
 8001622:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001624:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001628:	2200      	movs	r2, #0
 800162a:	601a      	str	r2, [r3, #0]
 800162c:	605a      	str	r2, [r3, #4]
 800162e:	609a      	str	r2, [r3, #8]
 8001630:	60da      	str	r2, [r3, #12]
 8001632:	611a      	str	r2, [r3, #16]
  if(i2sHandle->Instance==SPI2)
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	4a69      	ldr	r2, [pc, #420]	@ (80017e0 <HAL_I2S_MspInit+0x1c4>)
 800163a:	4293      	cmp	r3, r2
 800163c:	d17b      	bne.n	8001736 <HAL_I2S_MspInit+0x11a>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* I2S2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800163e:	2300      	movs	r3, #0
 8001640:	623b      	str	r3, [r7, #32]
 8001642:	4b68      	ldr	r3, [pc, #416]	@ (80017e4 <HAL_I2S_MspInit+0x1c8>)
 8001644:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001646:	4a67      	ldr	r2, [pc, #412]	@ (80017e4 <HAL_I2S_MspInit+0x1c8>)
 8001648:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800164c:	6413      	str	r3, [r2, #64]	@ 0x40
 800164e:	4b65      	ldr	r3, [pc, #404]	@ (80017e4 <HAL_I2S_MspInit+0x1c8>)
 8001650:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001652:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001656:	623b      	str	r3, [r7, #32]
 8001658:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800165a:	2300      	movs	r3, #0
 800165c:	61fb      	str	r3, [r7, #28]
 800165e:	4b61      	ldr	r3, [pc, #388]	@ (80017e4 <HAL_I2S_MspInit+0x1c8>)
 8001660:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001662:	4a60      	ldr	r2, [pc, #384]	@ (80017e4 <HAL_I2S_MspInit+0x1c8>)
 8001664:	f043 0304 	orr.w	r3, r3, #4
 8001668:	6313      	str	r3, [r2, #48]	@ 0x30
 800166a:	4b5e      	ldr	r3, [pc, #376]	@ (80017e4 <HAL_I2S_MspInit+0x1c8>)
 800166c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800166e:	f003 0304 	and.w	r3, r3, #4
 8001672:	61fb      	str	r3, [r7, #28]
 8001674:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001676:	2300      	movs	r3, #0
 8001678:	61bb      	str	r3, [r7, #24]
 800167a:	4b5a      	ldr	r3, [pc, #360]	@ (80017e4 <HAL_I2S_MspInit+0x1c8>)
 800167c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800167e:	4a59      	ldr	r2, [pc, #356]	@ (80017e4 <HAL_I2S_MspInit+0x1c8>)
 8001680:	f043 0302 	orr.w	r3, r3, #2
 8001684:	6313      	str	r3, [r2, #48]	@ 0x30
 8001686:	4b57      	ldr	r3, [pc, #348]	@ (80017e4 <HAL_I2S_MspInit+0x1c8>)
 8001688:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800168a:	f003 0302 	and.w	r3, r3, #2
 800168e:	61bb      	str	r3, [r7, #24]
 8001690:	69bb      	ldr	r3, [r7, #24]
    /**I2S2 GPIO Configuration
    PC3     ------> I2S2_SD
    PB10     ------> I2S2_CK
    PB12     ------> I2S2_WS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001692:	2308      	movs	r3, #8
 8001694:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001696:	2302      	movs	r3, #2
 8001698:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800169a:	2300      	movs	r3, #0
 800169c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800169e:	2300      	movs	r3, #0
 80016a0:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80016a2:	2305      	movs	r3, #5
 80016a4:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80016a6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80016aa:	4619      	mov	r1, r3
 80016ac:	484e      	ldr	r0, [pc, #312]	@ (80017e8 <HAL_I2S_MspInit+0x1cc>)
 80016ae:	f005 f8eb 	bl	8006888 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12;
 80016b2:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80016b6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016b8:	2302      	movs	r3, #2
 80016ba:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016bc:	2300      	movs	r3, #0
 80016be:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016c0:	2300      	movs	r3, #0
 80016c2:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80016c4:	2305      	movs	r3, #5
 80016c6:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016c8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80016cc:	4619      	mov	r1, r3
 80016ce:	4847      	ldr	r0, [pc, #284]	@ (80017ec <HAL_I2S_MspInit+0x1d0>)
 80016d0:	f005 f8da 	bl	8006888 <HAL_GPIO_Init>

    /* I2S2 DMA Init */
    /* SPI2_RX Init */
    hdma_spi2_rx.Instance = DMA1_Stream3;
 80016d4:	4b46      	ldr	r3, [pc, #280]	@ (80017f0 <HAL_I2S_MspInit+0x1d4>)
 80016d6:	4a47      	ldr	r2, [pc, #284]	@ (80017f4 <HAL_I2S_MspInit+0x1d8>)
 80016d8:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Channel = DMA_CHANNEL_0;
 80016da:	4b45      	ldr	r3, [pc, #276]	@ (80017f0 <HAL_I2S_MspInit+0x1d4>)
 80016dc:	2200      	movs	r2, #0
 80016de:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80016e0:	4b43      	ldr	r3, [pc, #268]	@ (80017f0 <HAL_I2S_MspInit+0x1d4>)
 80016e2:	2200      	movs	r2, #0
 80016e4:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80016e6:	4b42      	ldr	r3, [pc, #264]	@ (80017f0 <HAL_I2S_MspInit+0x1d4>)
 80016e8:	2200      	movs	r2, #0
 80016ea:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80016ec:	4b40      	ldr	r3, [pc, #256]	@ (80017f0 <HAL_I2S_MspInit+0x1d4>)
 80016ee:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80016f2:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80016f4:	4b3e      	ldr	r3, [pc, #248]	@ (80017f0 <HAL_I2S_MspInit+0x1d4>)
 80016f6:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80016fa:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80016fc:	4b3c      	ldr	r3, [pc, #240]	@ (80017f0 <HAL_I2S_MspInit+0x1d4>)
 80016fe:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001702:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_CIRCULAR;
 8001704:	4b3a      	ldr	r3, [pc, #232]	@ (80017f0 <HAL_I2S_MspInit+0x1d4>)
 8001706:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800170a:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_LOW;
 800170c:	4b38      	ldr	r3, [pc, #224]	@ (80017f0 <HAL_I2S_MspInit+0x1d4>)
 800170e:	2200      	movs	r2, #0
 8001710:	621a      	str	r2, [r3, #32]
    hdma_spi2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001712:	4b37      	ldr	r3, [pc, #220]	@ (80017f0 <HAL_I2S_MspInit+0x1d4>)
 8001714:	2200      	movs	r2, #0
 8001716:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 8001718:	4835      	ldr	r0, [pc, #212]	@ (80017f0 <HAL_I2S_MspInit+0x1d4>)
 800171a:	f004 fcb3 	bl	8006084 <HAL_DMA_Init>
 800171e:	4603      	mov	r3, r0
 8001720:	2b00      	cmp	r3, #0
 8001722:	d001      	beq.n	8001728 <HAL_I2S_MspInit+0x10c>
    {
      Error_Handler();
 8001724:	f001 f922 	bl	800296c <Error_Handler>
    }

    __HAL_LINKDMA(i2sHandle,hdmarx,hdma_spi2_rx);
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	4a31      	ldr	r2, [pc, #196]	@ (80017f0 <HAL_I2S_MspInit+0x1d4>)
 800172c:	63da      	str	r2, [r3, #60]	@ 0x3c
 800172e:	4a30      	ldr	r2, [pc, #192]	@ (80017f0 <HAL_I2S_MspInit+0x1d4>)
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8001734:	e04f      	b.n	80017d6 <HAL_I2S_MspInit+0x1ba>
  else if(i2sHandle->Instance==SPI3)
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	4a2f      	ldr	r2, [pc, #188]	@ (80017f8 <HAL_I2S_MspInit+0x1dc>)
 800173c:	4293      	cmp	r3, r2
 800173e:	d14a      	bne.n	80017d6 <HAL_I2S_MspInit+0x1ba>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001740:	2300      	movs	r3, #0
 8001742:	617b      	str	r3, [r7, #20]
 8001744:	4b27      	ldr	r3, [pc, #156]	@ (80017e4 <HAL_I2S_MspInit+0x1c8>)
 8001746:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001748:	4a26      	ldr	r2, [pc, #152]	@ (80017e4 <HAL_I2S_MspInit+0x1c8>)
 800174a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800174e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001750:	4b24      	ldr	r3, [pc, #144]	@ (80017e4 <HAL_I2S_MspInit+0x1c8>)
 8001752:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001754:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001758:	617b      	str	r3, [r7, #20]
 800175a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800175c:	2300      	movs	r3, #0
 800175e:	613b      	str	r3, [r7, #16]
 8001760:	4b20      	ldr	r3, [pc, #128]	@ (80017e4 <HAL_I2S_MspInit+0x1c8>)
 8001762:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001764:	4a1f      	ldr	r2, [pc, #124]	@ (80017e4 <HAL_I2S_MspInit+0x1c8>)
 8001766:	f043 0301 	orr.w	r3, r3, #1
 800176a:	6313      	str	r3, [r2, #48]	@ 0x30
 800176c:	4b1d      	ldr	r3, [pc, #116]	@ (80017e4 <HAL_I2S_MspInit+0x1c8>)
 800176e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001770:	f003 0301 	and.w	r3, r3, #1
 8001774:	613b      	str	r3, [r7, #16]
 8001776:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001778:	2300      	movs	r3, #0
 800177a:	60fb      	str	r3, [r7, #12]
 800177c:	4b19      	ldr	r3, [pc, #100]	@ (80017e4 <HAL_I2S_MspInit+0x1c8>)
 800177e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001780:	4a18      	ldr	r2, [pc, #96]	@ (80017e4 <HAL_I2S_MspInit+0x1c8>)
 8001782:	f043 0304 	orr.w	r3, r3, #4
 8001786:	6313      	str	r3, [r2, #48]	@ 0x30
 8001788:	4b16      	ldr	r3, [pc, #88]	@ (80017e4 <HAL_I2S_MspInit+0x1c8>)
 800178a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800178c:	f003 0304 	and.w	r3, r3, #4
 8001790:	60fb      	str	r3, [r7, #12]
 8001792:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001794:	2310      	movs	r3, #16
 8001796:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001798:	2302      	movs	r3, #2
 800179a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800179c:	2300      	movs	r3, #0
 800179e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017a0:	2300      	movs	r3, #0
 80017a2:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80017a4:	2306      	movs	r3, #6
 80017a6:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017a8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80017ac:	4619      	mov	r1, r3
 80017ae:	4813      	ldr	r0, [pc, #76]	@ (80017fc <HAL_I2S_MspInit+0x1e0>)
 80017b0:	f005 f86a 	bl	8006888 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12;
 80017b4:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80017b8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017ba:	2302      	movs	r3, #2
 80017bc:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017be:	2300      	movs	r3, #0
 80017c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017c2:	2300      	movs	r3, #0
 80017c4:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80017c6:	2306      	movs	r3, #6
 80017c8:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80017ca:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80017ce:	4619      	mov	r1, r3
 80017d0:	4805      	ldr	r0, [pc, #20]	@ (80017e8 <HAL_I2S_MspInit+0x1cc>)
 80017d2:	f005 f859 	bl	8006888 <HAL_GPIO_Init>
}
 80017d6:	bf00      	nop
 80017d8:	3738      	adds	r7, #56	@ 0x38
 80017da:	46bd      	mov	sp, r7
 80017dc:	bd80      	pop	{r7, pc}
 80017de:	bf00      	nop
 80017e0:	40003800 	.word	0x40003800
 80017e4:	40023800 	.word	0x40023800
 80017e8:	40020800 	.word	0x40020800
 80017ec:	40020400 	.word	0x40020400
 80017f0:	2000d458 	.word	0x2000d458
 80017f4:	40026058 	.word	0x40026058
 80017f8:	40003c00 	.word	0x40003c00
 80017fc:	40020000 	.word	0x40020000

08001800 <ILI9341_WriteCommand>:
#include "stm32f4xx_hal.h"
#include "ili9341.h"

// Send command to display. Use ILI9341_SELECT() before
static inline void ILI9341_WriteCommand(ILI9341TypeDef *display, uint8_t command)
{
 8001800:	b580      	push	{r7, lr}
 8001802:	b082      	sub	sp, #8
 8001804:	af00      	add	r7, sp, #0
 8001806:	6078      	str	r0, [r7, #4]
 8001808:	460b      	mov	r3, r1
 800180a:	70fb      	strb	r3, [r7, #3]
	ILI9341_COMMAND(display);
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	8a5b      	ldrh	r3, [r3, #18]
 8001810:	461a      	mov	r2, r3
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	689b      	ldr	r3, [r3, #8]
 8001816:	0412      	lsls	r2, r2, #16
 8001818:	619a      	str	r2, [r3, #24]
	HAL_SPI_Transmit(display->spi, &command, 1, 1);
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	6818      	ldr	r0, [r3, #0]
 800181e:	1cf9      	adds	r1, r7, #3
 8001820:	2301      	movs	r3, #1
 8001822:	2201      	movs	r2, #1
 8001824:	f006 fe39 	bl	800849a <HAL_SPI_Transmit>
}
 8001828:	bf00      	nop
 800182a:	3708      	adds	r7, #8
 800182c:	46bd      	mov	sp, r7
 800182e:	bd80      	pop	{r7, pc}

08001830 <ILI9341_WriteByte>:

// Send byte to display. Use ILI9341_SELECT() before
static inline void ILI9341_WriteByte(ILI9341TypeDef *display, uint8_t data)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	b082      	sub	sp, #8
 8001834:	af00      	add	r7, sp, #0
 8001836:	6078      	str	r0, [r7, #4]
 8001838:	460b      	mov	r3, r1
 800183a:	70fb      	strb	r3, [r7, #3]
	ILI9341_DATA(display);
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	8a5a      	ldrh	r2, [r3, #18]
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	689b      	ldr	r3, [r3, #8]
 8001844:	619a      	str	r2, [r3, #24]
	HAL_SPI_Transmit(display->spi, &data, 1, 1);
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	6818      	ldr	r0, [r3, #0]
 800184a:	1cf9      	adds	r1, r7, #3
 800184c:	2301      	movs	r3, #1
 800184e:	2201      	movs	r2, #1
 8001850:	f006 fe23 	bl	800849a <HAL_SPI_Transmit>
}
 8001854:	bf00      	nop
 8001856:	3708      	adds	r7, #8
 8001858:	46bd      	mov	sp, r7
 800185a:	bd80      	pop	{r7, pc}

0800185c <ILI9341_WriteBuffer>:

// Send buffer to display. Use ILI9341_SELECT() before
static inline void ILI9341_WriteBuffer(ILI9341TypeDef *display, uint8_t* buff, size_t buff_size)
{
 800185c:	b580      	push	{r7, lr}
 800185e:	b086      	sub	sp, #24
 8001860:	af00      	add	r7, sp, #0
 8001862:	60f8      	str	r0, [r7, #12]
 8001864:	60b9      	str	r1, [r7, #8]
 8001866:	607a      	str	r2, [r7, #4]
	ILI9341_DATA(display);
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	8a5a      	ldrh	r2, [r3, #18]
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	689b      	ldr	r3, [r3, #8]
 8001870:	619a      	str	r2, [r3, #24]

    // split data in small chunks because HAL can't send more then 64K at once
    while (buff_size > 0) {
 8001872:	e015      	b.n	80018a0 <ILI9341_WriteBuffer+0x44>
        uint16_t chunk_size = buff_size > 32768 ? 32768 : buff_size;
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800187a:	bf28      	it	cs
 800187c:	f44f 4300 	movcs.w	r3, #32768	@ 0x8000
 8001880:	82fb      	strh	r3, [r7, #22]
        HAL_SPI_Transmit(display->spi, buff, chunk_size, 10);
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	6818      	ldr	r0, [r3, #0]
 8001886:	8afa      	ldrh	r2, [r7, #22]
 8001888:	230a      	movs	r3, #10
 800188a:	68b9      	ldr	r1, [r7, #8]
 800188c:	f006 fe05 	bl	800849a <HAL_SPI_Transmit>
        buff += chunk_size;
 8001890:	8afb      	ldrh	r3, [r7, #22]
 8001892:	68ba      	ldr	r2, [r7, #8]
 8001894:	4413      	add	r3, r2
 8001896:	60bb      	str	r3, [r7, #8]
        buff_size -= chunk_size;
 8001898:	8afb      	ldrh	r3, [r7, #22]
 800189a:	687a      	ldr	r2, [r7, #4]
 800189c:	1ad3      	subs	r3, r2, r3
 800189e:	607b      	str	r3, [r7, #4]
    while (buff_size > 0) {
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d1e6      	bne.n	8001874 <ILI9341_WriteBuffer+0x18>
    }
}
 80018a6:	bf00      	nop
 80018a8:	bf00      	nop
 80018aa:	3718      	adds	r7, #24
 80018ac:	46bd      	mov	sp, r7
 80018ae:	bd80      	pop	{r7, pc}

080018b0 <ILI9341_SetAddressWindow>:

static inline void ILI9341_SetAddressWindow(ILI9341TypeDef *display, uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2)
{
 80018b0:	b580      	push	{r7, lr}
 80018b2:	b086      	sub	sp, #24
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	60f8      	str	r0, [r7, #12]
 80018b8:	4608      	mov	r0, r1
 80018ba:	4611      	mov	r1, r2
 80018bc:	461a      	mov	r2, r3
 80018be:	4603      	mov	r3, r0
 80018c0:	817b      	strh	r3, [r7, #10]
 80018c2:	460b      	mov	r3, r1
 80018c4:	813b      	strh	r3, [r7, #8]
 80018c6:	4613      	mov	r3, r2
 80018c8:	80fb      	strh	r3, [r7, #6]
    // Column address set
	ILI9341_WriteCommand(display, 0x2A); // CASET
 80018ca:	212a      	movs	r1, #42	@ 0x2a
 80018cc:	68f8      	ldr	r0, [r7, #12]
 80018ce:	f7ff ff97 	bl	8001800 <ILI9341_WriteCommand>

	uint8_t data[4];
	data[0] = x1 >> 8;
 80018d2:	897b      	ldrh	r3, [r7, #10]
 80018d4:	0a1b      	lsrs	r3, r3, #8
 80018d6:	b29b      	uxth	r3, r3
 80018d8:	b2db      	uxtb	r3, r3
 80018da:	753b      	strb	r3, [r7, #20]
	data[1] = x1;
 80018dc:	897b      	ldrh	r3, [r7, #10]
 80018de:	b2db      	uxtb	r3, r3
 80018e0:	757b      	strb	r3, [r7, #21]
	data[2] = x2 >> 8;
 80018e2:	88fb      	ldrh	r3, [r7, #6]
 80018e4:	0a1b      	lsrs	r3, r3, #8
 80018e6:	b29b      	uxth	r3, r3
 80018e8:	b2db      	uxtb	r3, r3
 80018ea:	75bb      	strb	r3, [r7, #22]
	data[3] = x2;
 80018ec:	88fb      	ldrh	r3, [r7, #6]
 80018ee:	b2db      	uxtb	r3, r3
 80018f0:	75fb      	strb	r3, [r7, #23]

	ILI9341_DATA(display);
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	8a5a      	ldrh	r2, [r3, #18]
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	689b      	ldr	r3, [r3, #8]
 80018fa:	619a      	str	r2, [r3, #24]
	HAL_SPI_Transmit(display->spi, data, 4, 1);
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	6818      	ldr	r0, [r3, #0]
 8001900:	f107 0114 	add.w	r1, r7, #20
 8001904:	2301      	movs	r3, #1
 8001906:	2204      	movs	r2, #4
 8001908:	f006 fdc7 	bl	800849a <HAL_SPI_Transmit>

    // Row address set
	ILI9341_WriteCommand(display, 0x2B); // RASET
 800190c:	212b      	movs	r1, #43	@ 0x2b
 800190e:	68f8      	ldr	r0, [r7, #12]
 8001910:	f7ff ff76 	bl	8001800 <ILI9341_WriteCommand>

	data[0] = y1 >> 8;
 8001914:	893b      	ldrh	r3, [r7, #8]
 8001916:	0a1b      	lsrs	r3, r3, #8
 8001918:	b29b      	uxth	r3, r3
 800191a:	b2db      	uxtb	r3, r3
 800191c:	753b      	strb	r3, [r7, #20]
	data[1] = y1;
 800191e:	893b      	ldrh	r3, [r7, #8]
 8001920:	b2db      	uxtb	r3, r3
 8001922:	757b      	strb	r3, [r7, #21]
	data[2] = y2 >> 8;
 8001924:	8c3b      	ldrh	r3, [r7, #32]
 8001926:	0a1b      	lsrs	r3, r3, #8
 8001928:	b29b      	uxth	r3, r3
 800192a:	b2db      	uxtb	r3, r3
 800192c:	75bb      	strb	r3, [r7, #22]
	data[3] = y2;
 800192e:	8c3b      	ldrh	r3, [r7, #32]
 8001930:	b2db      	uxtb	r3, r3
 8001932:	75fb      	strb	r3, [r7, #23]

	ILI9341_DATA(display);
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	8a5a      	ldrh	r2, [r3, #18]
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	689b      	ldr	r3, [r3, #8]
 800193c:	619a      	str	r2, [r3, #24]
	HAL_SPI_Transmit(display->spi, data, 4, 1);
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	6818      	ldr	r0, [r3, #0]
 8001942:	f107 0114 	add.w	r1, r7, #20
 8001946:	2301      	movs	r3, #1
 8001948:	2204      	movs	r2, #4
 800194a:	f006 fda6 	bl	800849a <HAL_SPI_Transmit>

    // Write to RAM
	ILI9341_WriteCommand(display, 0x2C); // RAMWR
 800194e:	212c      	movs	r1, #44	@ 0x2c
 8001950:	68f8      	ldr	r0, [r7, #12]
 8001952:	f7ff ff55 	bl	8001800 <ILI9341_WriteCommand>
}
 8001956:	bf00      	nop
 8001958:	3718      	adds	r7, #24
 800195a:	46bd      	mov	sp, r7
 800195c:	bd80      	pop	{r7, pc}

0800195e <ILI9341_Reset>:

static inline void ILI9341_Reset(ILI9341TypeDef *display)
{
 800195e:	b580      	push	{r7, lr}
 8001960:	b082      	sub	sp, #8
 8001962:	af00      	add	r7, sp, #0
 8001964:	6078      	str	r0, [r7, #4]
    display->reset_gpio_port->BSRR = (uint32_t)(display->reset_pin) << 16U;
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	8a9b      	ldrh	r3, [r3, #20]
 800196a:	461a      	mov	r2, r3
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	68db      	ldr	r3, [r3, #12]
 8001970:	0412      	lsls	r2, r2, #16
 8001972:	619a      	str	r2, [r3, #24]
    HAL_Delay(5);
 8001974:	2005      	movs	r0, #5
 8001976:	f003 fddd 	bl	8005534 <HAL_Delay>
    display->reset_gpio_port->BSRR = display->reset_pin;
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	8a9a      	ldrh	r2, [r3, #20]
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	68db      	ldr	r3, [r3, #12]
 8001982:	619a      	str	r2, [r3, #24]
}
 8001984:	bf00      	nop
 8001986:	3708      	adds	r7, #8
 8001988:	46bd      	mov	sp, r7
 800198a:	bd80      	pop	{r7, pc}

0800198c <ILI9341_Init>:

void ILI9341_Init(ILI9341TypeDef *display)
{
 800198c:	b580      	push	{r7, lr}
 800198e:	b082      	sub	sp, #8
 8001990:	af00      	add	r7, sp, #0
 8001992:	6078      	str	r0, [r7, #4]
	ILI9341_SELECT(display);
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	8a1b      	ldrh	r3, [r3, #16]
 8001998:	461a      	mov	r2, r3
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	685b      	ldr	r3, [r3, #4]
 800199e:	0412      	lsls	r2, r2, #16
 80019a0:	619a      	str	r2, [r3, #24]
	ILI9341_Reset(display);
 80019a2:	6878      	ldr	r0, [r7, #4]
 80019a4:	f7ff ffdb 	bl	800195e <ILI9341_Reset>

	// SOFTWARE RESET
	ILI9341_WriteCommand(display, 0x01);
 80019a8:	2101      	movs	r1, #1
 80019aa:	6878      	ldr	r0, [r7, #4]
 80019ac:	f7ff ff28 	bl	8001800 <ILI9341_WriteCommand>
	HAL_Delay(1000);
 80019b0:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80019b4:	f003 fdbe 	bl	8005534 <HAL_Delay>

	// POWER CONTROL A
	ILI9341_WriteCommand(display, 0xCB);
 80019b8:	21cb      	movs	r1, #203	@ 0xcb
 80019ba:	6878      	ldr	r0, [r7, #4]
 80019bc:	f7ff ff20 	bl	8001800 <ILI9341_WriteCommand>
	ILI9341_WriteByte(display, 0x39);
 80019c0:	2139      	movs	r1, #57	@ 0x39
 80019c2:	6878      	ldr	r0, [r7, #4]
 80019c4:	f7ff ff34 	bl	8001830 <ILI9341_WriteByte>
	ILI9341_WriteByte(display, 0x2C);
 80019c8:	212c      	movs	r1, #44	@ 0x2c
 80019ca:	6878      	ldr	r0, [r7, #4]
 80019cc:	f7ff ff30 	bl	8001830 <ILI9341_WriteByte>
	ILI9341_WriteByte(display, 0x00);
 80019d0:	2100      	movs	r1, #0
 80019d2:	6878      	ldr	r0, [r7, #4]
 80019d4:	f7ff ff2c 	bl	8001830 <ILI9341_WriteByte>
	ILI9341_WriteByte(display, 0x34);
 80019d8:	2134      	movs	r1, #52	@ 0x34
 80019da:	6878      	ldr	r0, [r7, #4]
 80019dc:	f7ff ff28 	bl	8001830 <ILI9341_WriteByte>
	ILI9341_WriteByte(display, 0x02);
 80019e0:	2102      	movs	r1, #2
 80019e2:	6878      	ldr	r0, [r7, #4]
 80019e4:	f7ff ff24 	bl	8001830 <ILI9341_WriteByte>

	// POWER CONTROL B
	ILI9341_WriteCommand(display, 0xCF);
 80019e8:	21cf      	movs	r1, #207	@ 0xcf
 80019ea:	6878      	ldr	r0, [r7, #4]
 80019ec:	f7ff ff08 	bl	8001800 <ILI9341_WriteCommand>
	ILI9341_WriteByte(display, 0x00);
 80019f0:	2100      	movs	r1, #0
 80019f2:	6878      	ldr	r0, [r7, #4]
 80019f4:	f7ff ff1c 	bl	8001830 <ILI9341_WriteByte>
	ILI9341_WriteByte(display, 0xC1);
 80019f8:	21c1      	movs	r1, #193	@ 0xc1
 80019fa:	6878      	ldr	r0, [r7, #4]
 80019fc:	f7ff ff18 	bl	8001830 <ILI9341_WriteByte>
	ILI9341_WriteByte(display, 0x30);
 8001a00:	2130      	movs	r1, #48	@ 0x30
 8001a02:	6878      	ldr	r0, [r7, #4]
 8001a04:	f7ff ff14 	bl	8001830 <ILI9341_WriteByte>

	// DRIVER TIMING CONTROL A
	ILI9341_WriteCommand(display, 0xE8);
 8001a08:	21e8      	movs	r1, #232	@ 0xe8
 8001a0a:	6878      	ldr	r0, [r7, #4]
 8001a0c:	f7ff fef8 	bl	8001800 <ILI9341_WriteCommand>
	ILI9341_WriteByte(display, 0x85);
 8001a10:	2185      	movs	r1, #133	@ 0x85
 8001a12:	6878      	ldr	r0, [r7, #4]
 8001a14:	f7ff ff0c 	bl	8001830 <ILI9341_WriteByte>
	ILI9341_WriteByte(display, 0x00);
 8001a18:	2100      	movs	r1, #0
 8001a1a:	6878      	ldr	r0, [r7, #4]
 8001a1c:	f7ff ff08 	bl	8001830 <ILI9341_WriteByte>
	ILI9341_WriteByte(display, 0x78);
 8001a20:	2178      	movs	r1, #120	@ 0x78
 8001a22:	6878      	ldr	r0, [r7, #4]
 8001a24:	f7ff ff04 	bl	8001830 <ILI9341_WriteByte>

	// DRIVER TIMING CONTROL B
	ILI9341_WriteCommand(display, 0xEA);
 8001a28:	21ea      	movs	r1, #234	@ 0xea
 8001a2a:	6878      	ldr	r0, [r7, #4]
 8001a2c:	f7ff fee8 	bl	8001800 <ILI9341_WriteCommand>
	ILI9341_WriteByte(display, 0x00);
 8001a30:	2100      	movs	r1, #0
 8001a32:	6878      	ldr	r0, [r7, #4]
 8001a34:	f7ff fefc 	bl	8001830 <ILI9341_WriteByte>
	ILI9341_WriteByte(display, 0x00);
 8001a38:	2100      	movs	r1, #0
 8001a3a:	6878      	ldr	r0, [r7, #4]
 8001a3c:	f7ff fef8 	bl	8001830 <ILI9341_WriteByte>

	// POWER ON SEQUENCE CONTROL
	ILI9341_WriteCommand(display, 0xED);
 8001a40:	21ed      	movs	r1, #237	@ 0xed
 8001a42:	6878      	ldr	r0, [r7, #4]
 8001a44:	f7ff fedc 	bl	8001800 <ILI9341_WriteCommand>
	ILI9341_WriteByte(display, 0x64);
 8001a48:	2164      	movs	r1, #100	@ 0x64
 8001a4a:	6878      	ldr	r0, [r7, #4]
 8001a4c:	f7ff fef0 	bl	8001830 <ILI9341_WriteByte>
	ILI9341_WriteByte(display, 0x03);
 8001a50:	2103      	movs	r1, #3
 8001a52:	6878      	ldr	r0, [r7, #4]
 8001a54:	f7ff feec 	bl	8001830 <ILI9341_WriteByte>
	ILI9341_WriteByte(display, 0x12);
 8001a58:	2112      	movs	r1, #18
 8001a5a:	6878      	ldr	r0, [r7, #4]
 8001a5c:	f7ff fee8 	bl	8001830 <ILI9341_WriteByte>
	ILI9341_WriteByte(display, 0x81);
 8001a60:	2181      	movs	r1, #129	@ 0x81
 8001a62:	6878      	ldr	r0, [r7, #4]
 8001a64:	f7ff fee4 	bl	8001830 <ILI9341_WriteByte>

	// PUMP RATIO CONTROL
	ILI9341_WriteCommand(display, 0xF7);
 8001a68:	21f7      	movs	r1, #247	@ 0xf7
 8001a6a:	6878      	ldr	r0, [r7, #4]
 8001a6c:	f7ff fec8 	bl	8001800 <ILI9341_WriteCommand>
	ILI9341_WriteByte(display, 0x20);
 8001a70:	2120      	movs	r1, #32
 8001a72:	6878      	ldr	r0, [r7, #4]
 8001a74:	f7ff fedc 	bl	8001830 <ILI9341_WriteByte>

	// POWER CONTROL,VRH[5:0]
	ILI9341_WriteCommand(display, 0xC0);
 8001a78:	21c0      	movs	r1, #192	@ 0xc0
 8001a7a:	6878      	ldr	r0, [r7, #4]
 8001a7c:	f7ff fec0 	bl	8001800 <ILI9341_WriteCommand>
	ILI9341_WriteByte(display, 0x23);
 8001a80:	2123      	movs	r1, #35	@ 0x23
 8001a82:	6878      	ldr	r0, [r7, #4]
 8001a84:	f7ff fed4 	bl	8001830 <ILI9341_WriteByte>

	// POWER CONTROL,SAP[2:0];BT[3:0]
	ILI9341_WriteCommand(display, 0xC1);
 8001a88:	21c1      	movs	r1, #193	@ 0xc1
 8001a8a:	6878      	ldr	r0, [r7, #4]
 8001a8c:	f7ff feb8 	bl	8001800 <ILI9341_WriteCommand>
	ILI9341_WriteByte(display, 0x10);
 8001a90:	2110      	movs	r1, #16
 8001a92:	6878      	ldr	r0, [r7, #4]
 8001a94:	f7ff fecc 	bl	8001830 <ILI9341_WriteByte>

	// VCM CONTROL
	ILI9341_WriteCommand(display, 0xC5);
 8001a98:	21c5      	movs	r1, #197	@ 0xc5
 8001a9a:	6878      	ldr	r0, [r7, #4]
 8001a9c:	f7ff feb0 	bl	8001800 <ILI9341_WriteCommand>
	ILI9341_WriteByte(display, 0x3E);
 8001aa0:	213e      	movs	r1, #62	@ 0x3e
 8001aa2:	6878      	ldr	r0, [r7, #4]
 8001aa4:	f7ff fec4 	bl	8001830 <ILI9341_WriteByte>
	ILI9341_WriteByte(display, 0x28);
 8001aa8:	2128      	movs	r1, #40	@ 0x28
 8001aaa:	6878      	ldr	r0, [r7, #4]
 8001aac:	f7ff fec0 	bl	8001830 <ILI9341_WriteByte>

	// VCM CONTROL 2
	ILI9341_WriteCommand(display, 0xC7);
 8001ab0:	21c7      	movs	r1, #199	@ 0xc7
 8001ab2:	6878      	ldr	r0, [r7, #4]
 8001ab4:	f7ff fea4 	bl	8001800 <ILI9341_WriteCommand>
	ILI9341_WriteByte(display, 0x86);
 8001ab8:	2186      	movs	r1, #134	@ 0x86
 8001aba:	6878      	ldr	r0, [r7, #4]
 8001abc:	f7ff feb8 	bl	8001830 <ILI9341_WriteByte>

	// MEMORY ACCESS CONTROL
	ILI9341_WriteCommand(display, 0x36);
 8001ac0:	2136      	movs	r1, #54	@ 0x36
 8001ac2:	6878      	ldr	r0, [r7, #4]
 8001ac4:	f7ff fe9c 	bl	8001800 <ILI9341_WriteCommand>
	ILI9341_WriteByte(display, 0x48);
 8001ac8:	2148      	movs	r1, #72	@ 0x48
 8001aca:	6878      	ldr	r0, [r7, #4]
 8001acc:	f7ff feb0 	bl	8001830 <ILI9341_WriteByte>

	// PIXEL FORMAT
	ILI9341_WriteCommand(display, 0x3A);
 8001ad0:	213a      	movs	r1, #58	@ 0x3a
 8001ad2:	6878      	ldr	r0, [r7, #4]
 8001ad4:	f7ff fe94 	bl	8001800 <ILI9341_WriteCommand>
	ILI9341_WriteByte(display, 0x55);
 8001ad8:	2155      	movs	r1, #85	@ 0x55
 8001ada:	6878      	ldr	r0, [r7, #4]
 8001adc:	f7ff fea8 	bl	8001830 <ILI9341_WriteByte>

	// FRAME RATIO CONTROL, STANDARD RGB COLOR
	ILI9341_WriteCommand(display, 0xB1);
 8001ae0:	21b1      	movs	r1, #177	@ 0xb1
 8001ae2:	6878      	ldr	r0, [r7, #4]
 8001ae4:	f7ff fe8c 	bl	8001800 <ILI9341_WriteCommand>
	ILI9341_WriteByte(display, 0x00);
 8001ae8:	2100      	movs	r1, #0
 8001aea:	6878      	ldr	r0, [r7, #4]
 8001aec:	f7ff fea0 	bl	8001830 <ILI9341_WriteByte>
	ILI9341_WriteByte(display, 0x18);
 8001af0:	2118      	movs	r1, #24
 8001af2:	6878      	ldr	r0, [r7, #4]
 8001af4:	f7ff fe9c 	bl	8001830 <ILI9341_WriteByte>

	// DISPLAY FUNCTION CONTROL
	ILI9341_WriteCommand(display, 0xB6);
 8001af8:	21b6      	movs	r1, #182	@ 0xb6
 8001afa:	6878      	ldr	r0, [r7, #4]
 8001afc:	f7ff fe80 	bl	8001800 <ILI9341_WriteCommand>
	ILI9341_WriteByte(display, 0x08);
 8001b00:	2108      	movs	r1, #8
 8001b02:	6878      	ldr	r0, [r7, #4]
 8001b04:	f7ff fe94 	bl	8001830 <ILI9341_WriteByte>
	ILI9341_WriteByte(display, 0x82);
 8001b08:	2182      	movs	r1, #130	@ 0x82
 8001b0a:	6878      	ldr	r0, [r7, #4]
 8001b0c:	f7ff fe90 	bl	8001830 <ILI9341_WriteByte>
	ILI9341_WriteByte(display, 0x27);
 8001b10:	2127      	movs	r1, #39	@ 0x27
 8001b12:	6878      	ldr	r0, [r7, #4]
 8001b14:	f7ff fe8c 	bl	8001830 <ILI9341_WriteByte>

	// 3GAMMA FUNCTION DISABLE
	ILI9341_WriteCommand(display, 0xF2);
 8001b18:	21f2      	movs	r1, #242	@ 0xf2
 8001b1a:	6878      	ldr	r0, [r7, #4]
 8001b1c:	f7ff fe70 	bl	8001800 <ILI9341_WriteCommand>
	ILI9341_WriteByte(display, 0x00);
 8001b20:	2100      	movs	r1, #0
 8001b22:	6878      	ldr	r0, [r7, #4]
 8001b24:	f7ff fe84 	bl	8001830 <ILI9341_WriteByte>

	// GAMMA CURVE SELECTED
	ILI9341_WriteCommand(display, 0x26);
 8001b28:	2126      	movs	r1, #38	@ 0x26
 8001b2a:	6878      	ldr	r0, [r7, #4]
 8001b2c:	f7ff fe68 	bl	8001800 <ILI9341_WriteCommand>
	ILI9341_WriteByte(display, 0x01);
 8001b30:	2101      	movs	r1, #1
 8001b32:	6878      	ldr	r0, [r7, #4]
 8001b34:	f7ff fe7c 	bl	8001830 <ILI9341_WriteByte>

	// POSITIVE GAMMA CORRECTION
	ILI9341_WriteCommand(display, 0xE0);
 8001b38:	21e0      	movs	r1, #224	@ 0xe0
 8001b3a:	6878      	ldr	r0, [r7, #4]
 8001b3c:	f7ff fe60 	bl	8001800 <ILI9341_WriteCommand>
	ILI9341_WriteByte(display, 0x0F);
 8001b40:	210f      	movs	r1, #15
 8001b42:	6878      	ldr	r0, [r7, #4]
 8001b44:	f7ff fe74 	bl	8001830 <ILI9341_WriteByte>
	ILI9341_WriteByte(display, 0x31);
 8001b48:	2131      	movs	r1, #49	@ 0x31
 8001b4a:	6878      	ldr	r0, [r7, #4]
 8001b4c:	f7ff fe70 	bl	8001830 <ILI9341_WriteByte>
	ILI9341_WriteByte(display, 0x2B);
 8001b50:	212b      	movs	r1, #43	@ 0x2b
 8001b52:	6878      	ldr	r0, [r7, #4]
 8001b54:	f7ff fe6c 	bl	8001830 <ILI9341_WriteByte>
	ILI9341_WriteByte(display, 0x0C);
 8001b58:	210c      	movs	r1, #12
 8001b5a:	6878      	ldr	r0, [r7, #4]
 8001b5c:	f7ff fe68 	bl	8001830 <ILI9341_WriteByte>
	ILI9341_WriteByte(display, 0x0E);
 8001b60:	210e      	movs	r1, #14
 8001b62:	6878      	ldr	r0, [r7, #4]
 8001b64:	f7ff fe64 	bl	8001830 <ILI9341_WriteByte>
	ILI9341_WriteByte(display, 0x08);
 8001b68:	2108      	movs	r1, #8
 8001b6a:	6878      	ldr	r0, [r7, #4]
 8001b6c:	f7ff fe60 	bl	8001830 <ILI9341_WriteByte>
	ILI9341_WriteByte(display, 0x4E);
 8001b70:	214e      	movs	r1, #78	@ 0x4e
 8001b72:	6878      	ldr	r0, [r7, #4]
 8001b74:	f7ff fe5c 	bl	8001830 <ILI9341_WriteByte>
	ILI9341_WriteByte(display, 0xF1);
 8001b78:	21f1      	movs	r1, #241	@ 0xf1
 8001b7a:	6878      	ldr	r0, [r7, #4]
 8001b7c:	f7ff fe58 	bl	8001830 <ILI9341_WriteByte>
	ILI9341_WriteByte(display, 0x37);
 8001b80:	2137      	movs	r1, #55	@ 0x37
 8001b82:	6878      	ldr	r0, [r7, #4]
 8001b84:	f7ff fe54 	bl	8001830 <ILI9341_WriteByte>
	ILI9341_WriteByte(display, 0x07);
 8001b88:	2107      	movs	r1, #7
 8001b8a:	6878      	ldr	r0, [r7, #4]
 8001b8c:	f7ff fe50 	bl	8001830 <ILI9341_WriteByte>
	ILI9341_WriteByte(display, 0x10);
 8001b90:	2110      	movs	r1, #16
 8001b92:	6878      	ldr	r0, [r7, #4]
 8001b94:	f7ff fe4c 	bl	8001830 <ILI9341_WriteByte>
	ILI9341_WriteByte(display, 0x03);
 8001b98:	2103      	movs	r1, #3
 8001b9a:	6878      	ldr	r0, [r7, #4]
 8001b9c:	f7ff fe48 	bl	8001830 <ILI9341_WriteByte>
	ILI9341_WriteByte(display, 0x0E);
 8001ba0:	210e      	movs	r1, #14
 8001ba2:	6878      	ldr	r0, [r7, #4]
 8001ba4:	f7ff fe44 	bl	8001830 <ILI9341_WriteByte>
	ILI9341_WriteByte(display, 0x09);
 8001ba8:	2109      	movs	r1, #9
 8001baa:	6878      	ldr	r0, [r7, #4]
 8001bac:	f7ff fe40 	bl	8001830 <ILI9341_WriteByte>
	ILI9341_WriteByte(display, 0x00);
 8001bb0:	2100      	movs	r1, #0
 8001bb2:	6878      	ldr	r0, [r7, #4]
 8001bb4:	f7ff fe3c 	bl	8001830 <ILI9341_WriteByte>

	// NEGATIVE GAMMA CORRECTION
	ILI9341_WriteCommand(display, 0xE1);
 8001bb8:	21e1      	movs	r1, #225	@ 0xe1
 8001bba:	6878      	ldr	r0, [r7, #4]
 8001bbc:	f7ff fe20 	bl	8001800 <ILI9341_WriteCommand>
	ILI9341_WriteByte(display, 0x00);
 8001bc0:	2100      	movs	r1, #0
 8001bc2:	6878      	ldr	r0, [r7, #4]
 8001bc4:	f7ff fe34 	bl	8001830 <ILI9341_WriteByte>
	ILI9341_WriteByte(display, 0x0E);
 8001bc8:	210e      	movs	r1, #14
 8001bca:	6878      	ldr	r0, [r7, #4]
 8001bcc:	f7ff fe30 	bl	8001830 <ILI9341_WriteByte>
	ILI9341_WriteByte(display, 0x14);
 8001bd0:	2114      	movs	r1, #20
 8001bd2:	6878      	ldr	r0, [r7, #4]
 8001bd4:	f7ff fe2c 	bl	8001830 <ILI9341_WriteByte>
	ILI9341_WriteByte(display, 0x03);
 8001bd8:	2103      	movs	r1, #3
 8001bda:	6878      	ldr	r0, [r7, #4]
 8001bdc:	f7ff fe28 	bl	8001830 <ILI9341_WriteByte>
	ILI9341_WriteByte(display, 0x11);
 8001be0:	2111      	movs	r1, #17
 8001be2:	6878      	ldr	r0, [r7, #4]
 8001be4:	f7ff fe24 	bl	8001830 <ILI9341_WriteByte>
	ILI9341_WriteByte(display, 0x07);
 8001be8:	2107      	movs	r1, #7
 8001bea:	6878      	ldr	r0, [r7, #4]
 8001bec:	f7ff fe20 	bl	8001830 <ILI9341_WriteByte>
	ILI9341_WriteByte(display, 0x31);
 8001bf0:	2131      	movs	r1, #49	@ 0x31
 8001bf2:	6878      	ldr	r0, [r7, #4]
 8001bf4:	f7ff fe1c 	bl	8001830 <ILI9341_WriteByte>
	ILI9341_WriteByte(display, 0xC1);
 8001bf8:	21c1      	movs	r1, #193	@ 0xc1
 8001bfa:	6878      	ldr	r0, [r7, #4]
 8001bfc:	f7ff fe18 	bl	8001830 <ILI9341_WriteByte>
	ILI9341_WriteByte(display, 0x48);
 8001c00:	2148      	movs	r1, #72	@ 0x48
 8001c02:	6878      	ldr	r0, [r7, #4]
 8001c04:	f7ff fe14 	bl	8001830 <ILI9341_WriteByte>
	ILI9341_WriteByte(display, 0x08);
 8001c08:	2108      	movs	r1, #8
 8001c0a:	6878      	ldr	r0, [r7, #4]
 8001c0c:	f7ff fe10 	bl	8001830 <ILI9341_WriteByte>
	ILI9341_WriteByte(display, 0x0F);
 8001c10:	210f      	movs	r1, #15
 8001c12:	6878      	ldr	r0, [r7, #4]
 8001c14:	f7ff fe0c 	bl	8001830 <ILI9341_WriteByte>
	ILI9341_WriteByte(display, 0x0C);
 8001c18:	210c      	movs	r1, #12
 8001c1a:	6878      	ldr	r0, [r7, #4]
 8001c1c:	f7ff fe08 	bl	8001830 <ILI9341_WriteByte>
	ILI9341_WriteByte(display, 0x31);
 8001c20:	2131      	movs	r1, #49	@ 0x31
 8001c22:	6878      	ldr	r0, [r7, #4]
 8001c24:	f7ff fe04 	bl	8001830 <ILI9341_WriteByte>
	ILI9341_WriteByte(display, 0x36);
 8001c28:	2136      	movs	r1, #54	@ 0x36
 8001c2a:	6878      	ldr	r0, [r7, #4]
 8001c2c:	f7ff fe00 	bl	8001830 <ILI9341_WriteByte>
	ILI9341_WriteByte(display, 0x0F);
 8001c30:	210f      	movs	r1, #15
 8001c32:	6878      	ldr	r0, [r7, #4]
 8001c34:	f7ff fdfc 	bl	8001830 <ILI9341_WriteByte>

	// EXIT SLEEP
	ILI9341_WriteCommand(display, 0x11);
 8001c38:	2111      	movs	r1, #17
 8001c3a:	6878      	ldr	r0, [r7, #4]
 8001c3c:	f7ff fde0 	bl	8001800 <ILI9341_WriteCommand>
	HAL_Delay(120);
 8001c40:	2078      	movs	r0, #120	@ 0x78
 8001c42:	f003 fc77 	bl	8005534 <HAL_Delay>

	// TURN ON DISPLAY
	ILI9341_WriteCommand(display, 0x29);
 8001c46:	2129      	movs	r1, #41	@ 0x29
 8001c48:	6878      	ldr	r0, [r7, #4]
 8001c4a:	f7ff fdd9 	bl	8001800 <ILI9341_WriteCommand>

	// MADCTL
	ILI9341_WriteCommand(display, 0x36);
 8001c4e:	2136      	movs	r1, #54	@ 0x36
 8001c50:	6878      	ldr	r0, [r7, #4]
 8001c52:	f7ff fdd5 	bl	8001800 <ILI9341_WriteCommand>
	ILI9341_WriteByte(display, display->orientation);
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	7e9b      	ldrb	r3, [r3, #26]
 8001c5a:	4619      	mov	r1, r3
 8001c5c:	6878      	ldr	r0, [r7, #4]
 8001c5e:	f7ff fde7 	bl	8001830 <ILI9341_WriteByte>

	ILI9341_UNSELECT(display);
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	8a1a      	ldrh	r2, [r3, #16]
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	685b      	ldr	r3, [r3, #4]
 8001c6a:	619a      	str	r2, [r3, #24]
}
 8001c6c:	bf00      	nop
 8001c6e:	3708      	adds	r7, #8
 8001c70:	46bd      	mov	sp, r7
 8001c72:	bd80      	pop	{r7, pc}

08001c74 <ILI9341_DrawPixel>:
    ILI9341_WriteCommand(display, (invert > 0) ? 0x21 /* INVON */ : 0x20 /* INVOFF */);
    ILI9341_UNSELECT(display);
}

void ILI9341_DrawPixel(ILI9341TypeDef *display, uint16_t x, uint16_t y, uint16_t color)
{
 8001c74:	b580      	push	{r7, lr}
 8001c76:	b088      	sub	sp, #32
 8001c78:	af02      	add	r7, sp, #8
 8001c7a:	60f8      	str	r0, [r7, #12]
 8001c7c:	4608      	mov	r0, r1
 8001c7e:	4611      	mov	r1, r2
 8001c80:	461a      	mov	r2, r3
 8001c82:	4603      	mov	r3, r0
 8001c84:	817b      	strh	r3, [r7, #10]
 8001c86:	460b      	mov	r3, r1
 8001c88:	813b      	strh	r3, [r7, #8]
 8001c8a:	4613      	mov	r3, r2
 8001c8c:	80fb      	strh	r3, [r7, #6]
	// Check out of bounds
	if((x >= display->width) || (y >= display->height))
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	8adb      	ldrh	r3, [r3, #22]
 8001c92:	897a      	ldrh	r2, [r7, #10]
 8001c94:	429a      	cmp	r2, r3
 8001c96:	d233      	bcs.n	8001d00 <ILI9341_DrawPixel+0x8c>
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	8b1b      	ldrh	r3, [r3, #24]
 8001c9c:	893a      	ldrh	r2, [r7, #8]
 8001c9e:	429a      	cmp	r2, r3
 8001ca0:	d22e      	bcs.n	8001d00 <ILI9341_DrawPixel+0x8c>
		return;

	ILI9341_SELECT(display);
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	8a1b      	ldrh	r3, [r3, #16]
 8001ca6:	461a      	mov	r2, r3
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	685b      	ldr	r3, [r3, #4]
 8001cac:	0412      	lsls	r2, r2, #16
 8001cae:	619a      	str	r2, [r3, #24]
	ILI9341_SetAddressWindow(display, x, y, x + 1, y + 1);
 8001cb0:	897b      	ldrh	r3, [r7, #10]
 8001cb2:	3301      	adds	r3, #1
 8001cb4:	b298      	uxth	r0, r3
 8001cb6:	893b      	ldrh	r3, [r7, #8]
 8001cb8:	3301      	adds	r3, #1
 8001cba:	b29b      	uxth	r3, r3
 8001cbc:	893a      	ldrh	r2, [r7, #8]
 8001cbe:	8979      	ldrh	r1, [r7, #10]
 8001cc0:	9300      	str	r3, [sp, #0]
 8001cc2:	4603      	mov	r3, r0
 8001cc4:	68f8      	ldr	r0, [r7, #12]
 8001cc6:	f7ff fdf3 	bl	80018b0 <ILI9341_SetAddressWindow>

	ILI9341_DATA(display);
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	8a5a      	ldrh	r2, [r3, #18]
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	689b      	ldr	r3, [r3, #8]
 8001cd2:	619a      	str	r2, [r3, #24]
	uint8_t data[2] = { color >> 8, color };
 8001cd4:	88fb      	ldrh	r3, [r7, #6]
 8001cd6:	0a1b      	lsrs	r3, r3, #8
 8001cd8:	b29b      	uxth	r3, r3
 8001cda:	b2db      	uxtb	r3, r3
 8001cdc:	753b      	strb	r3, [r7, #20]
 8001cde:	88fb      	ldrh	r3, [r7, #6]
 8001ce0:	b2db      	uxtb	r3, r3
 8001ce2:	757b      	strb	r3, [r7, #21]
	HAL_SPI_Transmit(display->spi, data, 2, 1);
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	6818      	ldr	r0, [r3, #0]
 8001ce8:	f107 0114 	add.w	r1, r7, #20
 8001cec:	2301      	movs	r3, #1
 8001cee:	2202      	movs	r2, #2
 8001cf0:	f006 fbd3 	bl	800849a <HAL_SPI_Transmit>

	ILI9341_UNSELECT(display);
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	8a1a      	ldrh	r2, [r3, #16]
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	685b      	ldr	r3, [r3, #4]
 8001cfc:	619a      	str	r2, [r3, #24]
 8001cfe:	e000      	b.n	8001d02 <ILI9341_DrawPixel+0x8e>
		return;
 8001d00:	bf00      	nop
}
 8001d02:	3718      	adds	r7, #24
 8001d04:	46bd      	mov	sp, r7
 8001d06:	bd80      	pop	{r7, pc}

08001d08 <ILI9341_Fill>:

static void ILI9341_Fill(ILI9341TypeDef *display, uint16_t color, uint32_t size)
{
 8001d08:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001d0c:	b08f      	sub	sp, #60	@ 0x3c
 8001d0e:	af00      	add	r7, sp, #0
 8001d10:	60f8      	str	r0, [r7, #12]
 8001d12:	460b      	mov	r3, r1
 8001d14:	607a      	str	r2, [r7, #4]
 8001d16:	817b      	strh	r3, [r7, #10]
 8001d18:	466b      	mov	r3, sp
 8001d1a:	461e      	mov	r6, r3
	ILI9341_DATA(display);
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	8a5a      	ldrh	r2, [r3, #18]
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	689b      	ldr	r3, [r3, #8]
 8001d24:	619a      	str	r2, [r3, #24]

	uint32_t buffer_size = 0;
 8001d26:	2300      	movs	r3, #0
 8001d28:	637b      	str	r3, [r7, #52]	@ 0x34

	if ((size * 2) < ILI9341_BUFFER_MAX_SIZE)
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	005b      	lsls	r3, r3, #1
 8001d2e:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8001d32:	d202      	bcs.n	8001d3a <ILI9341_Fill+0x32>
		buffer_size = size;
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	637b      	str	r3, [r7, #52]	@ 0x34
 8001d38:	e002      	b.n	8001d40 <ILI9341_Fill+0x38>
	else
		buffer_size = ILI9341_BUFFER_MAX_SIZE;
 8001d3a:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8001d3e:	637b      	str	r3, [r7, #52]	@ 0x34

	uint8_t color_shifted = color >> 8;
 8001d40:	897b      	ldrh	r3, [r7, #10]
 8001d42:	0a1b      	lsrs	r3, r3, #8
 8001d44:	b29b      	uxth	r3, r3
 8001d46:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
	uint8_t buffer[buffer_size];
 8001d4a:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8001d4c:	460b      	mov	r3, r1
 8001d4e:	3b01      	subs	r3, #1
 8001d50:	627b      	str	r3, [r7, #36]	@ 0x24
 8001d52:	2300      	movs	r3, #0
 8001d54:	4688      	mov	r8, r1
 8001d56:	4699      	mov	r9, r3
 8001d58:	f04f 0200 	mov.w	r2, #0
 8001d5c:	f04f 0300 	mov.w	r3, #0
 8001d60:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001d64:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001d68:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001d6c:	2300      	movs	r3, #0
 8001d6e:	460c      	mov	r4, r1
 8001d70:	461d      	mov	r5, r3
 8001d72:	f04f 0200 	mov.w	r2, #0
 8001d76:	f04f 0300 	mov.w	r3, #0
 8001d7a:	00eb      	lsls	r3, r5, #3
 8001d7c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001d80:	00e2      	lsls	r2, r4, #3
 8001d82:	1dcb      	adds	r3, r1, #7
 8001d84:	08db      	lsrs	r3, r3, #3
 8001d86:	00db      	lsls	r3, r3, #3
 8001d88:	ebad 0d03 	sub.w	sp, sp, r3
 8001d8c:	466b      	mov	r3, sp
 8001d8e:	3300      	adds	r3, #0
 8001d90:	623b      	str	r3, [r7, #32]

	for (uint32_t i = 0; i < buffer_size; i += 2) {
 8001d92:	2300      	movs	r3, #0
 8001d94:	633b      	str	r3, [r7, #48]	@ 0x30
 8001d96:	e00e      	b.n	8001db6 <ILI9341_Fill+0xae>
		buffer[i]     = color_shifted;
 8001d98:	6a3a      	ldr	r2, [r7, #32]
 8001d9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001d9c:	4413      	add	r3, r2
 8001d9e:	f897 202b 	ldrb.w	r2, [r7, #43]	@ 0x2b
 8001da2:	701a      	strb	r2, [r3, #0]
		buffer[i + 1] = color;
 8001da4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001da6:	3301      	adds	r3, #1
 8001da8:	897a      	ldrh	r2, [r7, #10]
 8001daa:	b2d1      	uxtb	r1, r2
 8001dac:	6a3a      	ldr	r2, [r7, #32]
 8001dae:	54d1      	strb	r1, [r2, r3]
	for (uint32_t i = 0; i < buffer_size; i += 2) {
 8001db0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001db2:	3302      	adds	r3, #2
 8001db4:	633b      	str	r3, [r7, #48]	@ 0x30
 8001db6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001db8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001dba:	429a      	cmp	r2, r3
 8001dbc:	d3ec      	bcc.n	8001d98 <ILI9341_Fill+0x90>
	}

	uint32_t sending_size   = size * 2;
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	005b      	lsls	r3, r3, #1
 8001dc2:	61fb      	str	r3, [r7, #28]
	uint32_t sending_blocks = sending_size / buffer_size;
 8001dc4:	69fa      	ldr	r2, [r7, #28]
 8001dc6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001dc8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001dcc:	61bb      	str	r3, [r7, #24]
	uint32_t sending_remain = sending_size % buffer_size;
 8001dce:	69fb      	ldr	r3, [r7, #28]
 8001dd0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001dd2:	fbb3 f2f2 	udiv	r2, r3, r2
 8001dd6:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8001dd8:	fb01 f202 	mul.w	r2, r1, r2
 8001ddc:	1a9b      	subs	r3, r3, r2
 8001dde:	617b      	str	r3, [r7, #20]

	if (sending_blocks != 0) {
 8001de0:	69bb      	ldr	r3, [r7, #24]
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d011      	beq.n	8001e0a <ILI9341_Fill+0x102>
		for(uint32_t i = 0; i < sending_blocks; i++)
 8001de6:	2300      	movs	r3, #0
 8001de8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001dea:	e00a      	b.n	8001e02 <ILI9341_Fill+0xfa>
			HAL_SPI_Transmit(display->spi, (uint8_t*)buffer, buffer_size, 10);
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	6818      	ldr	r0, [r3, #0]
 8001df0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001df2:	b29a      	uxth	r2, r3
 8001df4:	230a      	movs	r3, #10
 8001df6:	6a39      	ldr	r1, [r7, #32]
 8001df8:	f006 fb4f 	bl	800849a <HAL_SPI_Transmit>
		for(uint32_t i = 0; i < sending_blocks; i++)
 8001dfc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001dfe:	3301      	adds	r3, #1
 8001e00:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001e02:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001e04:	69bb      	ldr	r3, [r7, #24]
 8001e06:	429a      	cmp	r2, r3
 8001e08:	d3f0      	bcc.n	8001dec <ILI9341_Fill+0xe4>
	}

	HAL_SPI_Transmit(display->spi, (uint8_t*)buffer, sending_remain, 10);
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	6818      	ldr	r0, [r3, #0]
 8001e0e:	697b      	ldr	r3, [r7, #20]
 8001e10:	b29a      	uxth	r2, r3
 8001e12:	230a      	movs	r3, #10
 8001e14:	6a39      	ldr	r1, [r7, #32]
 8001e16:	f006 fb40 	bl	800849a <HAL_SPI_Transmit>
 8001e1a:	46b5      	mov	sp, r6
}
 8001e1c:	bf00      	nop
 8001e1e:	373c      	adds	r7, #60	@ 0x3c
 8001e20:	46bd      	mov	sp, r7
 8001e22:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08001e26 <ILI9341_FillScreen>:

void ILI9341_FillScreen(ILI9341TypeDef *display, uint16_t color)
{
 8001e26:	b580      	push	{r7, lr}
 8001e28:	b084      	sub	sp, #16
 8001e2a:	af02      	add	r7, sp, #8
 8001e2c:	6078      	str	r0, [r7, #4]
 8001e2e:	460b      	mov	r3, r1
 8001e30:	807b      	strh	r3, [r7, #2]
	ILI9341_SELECT(display);
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	8a1b      	ldrh	r3, [r3, #16]
 8001e36:	461a      	mov	r2, r3
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	685b      	ldr	r3, [r3, #4]
 8001e3c:	0412      	lsls	r2, r2, #16
 8001e3e:	619a      	str	r2, [r3, #24]
	ILI9341_SetAddressWindow(display, 0, 0, display->width - 1, display->height - 1);
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	8adb      	ldrh	r3, [r3, #22]
 8001e44:	3b01      	subs	r3, #1
 8001e46:	b29a      	uxth	r2, r3
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	8b1b      	ldrh	r3, [r3, #24]
 8001e4c:	3b01      	subs	r3, #1
 8001e4e:	b29b      	uxth	r3, r3
 8001e50:	9300      	str	r3, [sp, #0]
 8001e52:	4613      	mov	r3, r2
 8001e54:	2200      	movs	r2, #0
 8001e56:	2100      	movs	r1, #0
 8001e58:	6878      	ldr	r0, [r7, #4]
 8001e5a:	f7ff fd29 	bl	80018b0 <ILI9341_SetAddressWindow>
	ILI9341_Fill(display, color, display->width * display->height);
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	8adb      	ldrh	r3, [r3, #22]
 8001e62:	461a      	mov	r2, r3
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	8b1b      	ldrh	r3, [r3, #24]
 8001e68:	fb02 f303 	mul.w	r3, r2, r3
 8001e6c:	461a      	mov	r2, r3
 8001e6e:	887b      	ldrh	r3, [r7, #2]
 8001e70:	4619      	mov	r1, r3
 8001e72:	6878      	ldr	r0, [r7, #4]
 8001e74:	f7ff ff48 	bl	8001d08 <ILI9341_Fill>
	ILI9341_UNSELECT(display);
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	8a1a      	ldrh	r2, [r3, #16]
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	685b      	ldr	r3, [r3, #4]
 8001e80:	619a      	str	r2, [r3, #24]
}
 8001e82:	bf00      	nop
 8001e84:	3708      	adds	r7, #8
 8001e86:	46bd      	mov	sp, r7
 8001e88:	bd80      	pop	{r7, pc}

08001e8a <ILI9341_FillRectangle>:

void ILI9341_FillRectangle(ILI9341TypeDef *display, uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color)
{
 8001e8a:	b580      	push	{r7, lr}
 8001e8c:	b086      	sub	sp, #24
 8001e8e:	af02      	add	r7, sp, #8
 8001e90:	60f8      	str	r0, [r7, #12]
 8001e92:	4608      	mov	r0, r1
 8001e94:	4611      	mov	r1, r2
 8001e96:	461a      	mov	r2, r3
 8001e98:	4603      	mov	r3, r0
 8001e9a:	817b      	strh	r3, [r7, #10]
 8001e9c:	460b      	mov	r3, r1
 8001e9e:	813b      	strh	r3, [r7, #8]
 8001ea0:	4613      	mov	r3, r2
 8001ea2:	80fb      	strh	r3, [r7, #6]
	if ((x >= display->width) || (y >= display->height))
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	8adb      	ldrh	r3, [r3, #22]
 8001ea8:	897a      	ldrh	r2, [r7, #10]
 8001eaa:	429a      	cmp	r2, r3
 8001eac:	d246      	bcs.n	8001f3c <ILI9341_FillRectangle+0xb2>
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	8b1b      	ldrh	r3, [r3, #24]
 8001eb2:	893a      	ldrh	r2, [r7, #8]
 8001eb4:	429a      	cmp	r2, r3
 8001eb6:	d241      	bcs.n	8001f3c <ILI9341_FillRectangle+0xb2>
		return;

	if ((x + w - 1) >= display->width)
 8001eb8:	897a      	ldrh	r2, [r7, #10]
 8001eba:	88fb      	ldrh	r3, [r7, #6]
 8001ebc:	4413      	add	r3, r2
 8001ebe:	68fa      	ldr	r2, [r7, #12]
 8001ec0:	8ad2      	ldrh	r2, [r2, #22]
 8001ec2:	4293      	cmp	r3, r2
 8001ec4:	dd04      	ble.n	8001ed0 <ILI9341_FillRectangle+0x46>
		w = display->width - x;
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	8ada      	ldrh	r2, [r3, #22]
 8001eca:	897b      	ldrh	r3, [r7, #10]
 8001ecc:	1ad3      	subs	r3, r2, r3
 8001ece:	80fb      	strh	r3, [r7, #6]

	if ((y + h - 1) >= display->height)
 8001ed0:	893a      	ldrh	r2, [r7, #8]
 8001ed2:	8b3b      	ldrh	r3, [r7, #24]
 8001ed4:	4413      	add	r3, r2
 8001ed6:	68fa      	ldr	r2, [r7, #12]
 8001ed8:	8b12      	ldrh	r2, [r2, #24]
 8001eda:	4293      	cmp	r3, r2
 8001edc:	dd04      	ble.n	8001ee8 <ILI9341_FillRectangle+0x5e>
		h = display->height - y;
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	8b1a      	ldrh	r2, [r3, #24]
 8001ee2:	893b      	ldrh	r3, [r7, #8]
 8001ee4:	1ad3      	subs	r3, r2, r3
 8001ee6:	833b      	strh	r3, [r7, #24]

	ILI9341_SELECT(display);
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	8a1b      	ldrh	r3, [r3, #16]
 8001eec:	461a      	mov	r2, r3
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	685b      	ldr	r3, [r3, #4]
 8001ef2:	0412      	lsls	r2, r2, #16
 8001ef4:	619a      	str	r2, [r3, #24]
	ILI9341_SetAddressWindow(display, x, y, x + w - 1, y + h - 1);
 8001ef6:	897a      	ldrh	r2, [r7, #10]
 8001ef8:	88fb      	ldrh	r3, [r7, #6]
 8001efa:	4413      	add	r3, r2
 8001efc:	b29b      	uxth	r3, r3
 8001efe:	3b01      	subs	r3, #1
 8001f00:	b298      	uxth	r0, r3
 8001f02:	893a      	ldrh	r2, [r7, #8]
 8001f04:	8b3b      	ldrh	r3, [r7, #24]
 8001f06:	4413      	add	r3, r2
 8001f08:	b29b      	uxth	r3, r3
 8001f0a:	3b01      	subs	r3, #1
 8001f0c:	b29b      	uxth	r3, r3
 8001f0e:	893a      	ldrh	r2, [r7, #8]
 8001f10:	8979      	ldrh	r1, [r7, #10]
 8001f12:	9300      	str	r3, [sp, #0]
 8001f14:	4603      	mov	r3, r0
 8001f16:	68f8      	ldr	r0, [r7, #12]
 8001f18:	f7ff fcca 	bl	80018b0 <ILI9341_SetAddressWindow>
	ILI9341_Fill(display, color, w * h);
 8001f1c:	88fb      	ldrh	r3, [r7, #6]
 8001f1e:	8b3a      	ldrh	r2, [r7, #24]
 8001f20:	fb02 f303 	mul.w	r3, r2, r3
 8001f24:	461a      	mov	r2, r3
 8001f26:	8bbb      	ldrh	r3, [r7, #28]
 8001f28:	4619      	mov	r1, r3
 8001f2a:	68f8      	ldr	r0, [r7, #12]
 8001f2c:	f7ff feec 	bl	8001d08 <ILI9341_Fill>
	ILI9341_UNSELECT(display);
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	8a1a      	ldrh	r2, [r3, #16]
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	685b      	ldr	r3, [r3, #4]
 8001f38:	619a      	str	r2, [r3, #24]
 8001f3a:	e000      	b.n	8001f3e <ILI9341_FillRectangle+0xb4>
		return;
 8001f3c:	bf00      	nop
}
 8001f3e:	3710      	adds	r7, #16
 8001f40:	46bd      	mov	sp, r7
 8001f42:	bd80      	pop	{r7, pc}

08001f44 <ILI9341_Rectangle>:

void ILI9341_Rectangle(ILI9341TypeDef *display, uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color)
{
 8001f44:	b580      	push	{r7, lr}
 8001f46:	b086      	sub	sp, #24
 8001f48:	af02      	add	r7, sp, #8
 8001f4a:	60f8      	str	r0, [r7, #12]
 8001f4c:	4608      	mov	r0, r1
 8001f4e:	4611      	mov	r1, r2
 8001f50:	461a      	mov	r2, r3
 8001f52:	4603      	mov	r3, r0
 8001f54:	817b      	strh	r3, [r7, #10]
 8001f56:	460b      	mov	r3, r1
 8001f58:	813b      	strh	r3, [r7, #8]
 8001f5a:	4613      	mov	r3, r2
 8001f5c:	80fb      	strh	r3, [r7, #6]
	ILI9341_FillRectangle(display, x,     y,     w + 1, 1, color);
 8001f5e:	88fb      	ldrh	r3, [r7, #6]
 8001f60:	3301      	adds	r3, #1
 8001f62:	b298      	uxth	r0, r3
 8001f64:	893a      	ldrh	r2, [r7, #8]
 8001f66:	8979      	ldrh	r1, [r7, #10]
 8001f68:	8bbb      	ldrh	r3, [r7, #28]
 8001f6a:	9301      	str	r3, [sp, #4]
 8001f6c:	2301      	movs	r3, #1
 8001f6e:	9300      	str	r3, [sp, #0]
 8001f70:	4603      	mov	r3, r0
 8001f72:	68f8      	ldr	r0, [r7, #12]
 8001f74:	f7ff ff89 	bl	8001e8a <ILI9341_FillRectangle>
	ILI9341_FillRectangle(display, x, y + h,     w + 1, 1, color);
 8001f78:	893a      	ldrh	r2, [r7, #8]
 8001f7a:	8b3b      	ldrh	r3, [r7, #24]
 8001f7c:	4413      	add	r3, r2
 8001f7e:	b29a      	uxth	r2, r3
 8001f80:	88fb      	ldrh	r3, [r7, #6]
 8001f82:	3301      	adds	r3, #1
 8001f84:	b298      	uxth	r0, r3
 8001f86:	8979      	ldrh	r1, [r7, #10]
 8001f88:	8bbb      	ldrh	r3, [r7, #28]
 8001f8a:	9301      	str	r3, [sp, #4]
 8001f8c:	2301      	movs	r3, #1
 8001f8e:	9300      	str	r3, [sp, #0]
 8001f90:	4603      	mov	r3, r0
 8001f92:	68f8      	ldr	r0, [r7, #12]
 8001f94:	f7ff ff79 	bl	8001e8a <ILI9341_FillRectangle>
	ILI9341_FillRectangle(display, x,     y,     1,     h, color);
 8001f98:	893a      	ldrh	r2, [r7, #8]
 8001f9a:	8979      	ldrh	r1, [r7, #10]
 8001f9c:	8bbb      	ldrh	r3, [r7, #28]
 8001f9e:	9301      	str	r3, [sp, #4]
 8001fa0:	8b3b      	ldrh	r3, [r7, #24]
 8001fa2:	9300      	str	r3, [sp, #0]
 8001fa4:	2301      	movs	r3, #1
 8001fa6:	68f8      	ldr	r0, [r7, #12]
 8001fa8:	f7ff ff6f 	bl	8001e8a <ILI9341_FillRectangle>
	ILI9341_FillRectangle(display, x + w, y,     1,     h, color);
 8001fac:	897a      	ldrh	r2, [r7, #10]
 8001fae:	88fb      	ldrh	r3, [r7, #6]
 8001fb0:	4413      	add	r3, r2
 8001fb2:	b299      	uxth	r1, r3
 8001fb4:	893a      	ldrh	r2, [r7, #8]
 8001fb6:	8bbb      	ldrh	r3, [r7, #28]
 8001fb8:	9301      	str	r3, [sp, #4]
 8001fba:	8b3b      	ldrh	r3, [r7, #24]
 8001fbc:	9300      	str	r3, [sp, #0]
 8001fbe:	2301      	movs	r3, #1
 8001fc0:	68f8      	ldr	r0, [r7, #12]
 8001fc2:	f7ff ff62 	bl	8001e8a <ILI9341_FillRectangle>
}
 8001fc6:	bf00      	nop
 8001fc8:	3710      	adds	r7, #16
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	bd80      	pop	{r7, pc}

08001fce <ILI9341_WriteChar>:

static void ILI9341_WriteChar(ILI9341TypeDef *display, uint16_t x, uint16_t y, char ch, FontDef font, uint16_t color, uint16_t bgcolor)
{
 8001fce:	b580      	push	{r7, lr}
 8001fd0:	b08c      	sub	sp, #48	@ 0x30
 8001fd2:	af02      	add	r7, sp, #8
 8001fd4:	60f8      	str	r0, [r7, #12]
 8001fd6:	4608      	mov	r0, r1
 8001fd8:	4611      	mov	r1, r2
 8001fda:	461a      	mov	r2, r3
 8001fdc:	4603      	mov	r3, r0
 8001fde:	817b      	strh	r3, [r7, #10]
 8001fe0:	460b      	mov	r3, r1
 8001fe2:	813b      	strh	r3, [r7, #8]
 8001fe4:	4613      	mov	r3, r2
 8001fe6:	71fb      	strb	r3, [r7, #7]
    uint32_t i, b, j;

    ILI9341_SetAddressWindow(display, x, y, x + font.width - 1, y + font.height - 1);
 8001fe8:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8001fec:	461a      	mov	r2, r3
 8001fee:	897b      	ldrh	r3, [r7, #10]
 8001ff0:	4413      	add	r3, r2
 8001ff2:	b29b      	uxth	r3, r3
 8001ff4:	3b01      	subs	r3, #1
 8001ff6:	b298      	uxth	r0, r3
 8001ff8:	f897 3031 	ldrb.w	r3, [r7, #49]	@ 0x31
 8001ffc:	461a      	mov	r2, r3
 8001ffe:	893b      	ldrh	r3, [r7, #8]
 8002000:	4413      	add	r3, r2
 8002002:	b29b      	uxth	r3, r3
 8002004:	3b01      	subs	r3, #1
 8002006:	b29b      	uxth	r3, r3
 8002008:	893a      	ldrh	r2, [r7, #8]
 800200a:	8979      	ldrh	r1, [r7, #10]
 800200c:	9300      	str	r3, [sp, #0]
 800200e:	4603      	mov	r3, r0
 8002010:	68f8      	ldr	r0, [r7, #12]
 8002012:	f7ff fc4d 	bl	80018b0 <ILI9341_SetAddressWindow>

    for (i = 0; i < font.height; i++) {
 8002016:	2300      	movs	r3, #0
 8002018:	627b      	str	r3, [r7, #36]	@ 0x24
 800201a:	e043      	b.n	80020a4 <ILI9341_WriteChar+0xd6>
        b = font.data[(ch - 32) * font.height + i];
 800201c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800201e:	79fb      	ldrb	r3, [r7, #7]
 8002020:	3b20      	subs	r3, #32
 8002022:	f897 1031 	ldrb.w	r1, [r7, #49]	@ 0x31
 8002026:	fb01 f303 	mul.w	r3, r1, r3
 800202a:	4619      	mov	r1, r3
 800202c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800202e:	440b      	add	r3, r1
 8002030:	005b      	lsls	r3, r3, #1
 8002032:	4413      	add	r3, r2
 8002034:	881b      	ldrh	r3, [r3, #0]
 8002036:	61fb      	str	r3, [r7, #28]
        for (j = 0; j < font.width; j++) {
 8002038:	2300      	movs	r3, #0
 800203a:	623b      	str	r3, [r7, #32]
 800203c:	e029      	b.n	8002092 <ILI9341_WriteChar+0xc4>
            if ((b << j) & 0x8000) {
 800203e:	69fa      	ldr	r2, [r7, #28]
 8002040:	6a3b      	ldr	r3, [r7, #32]
 8002042:	fa02 f303 	lsl.w	r3, r2, r3
 8002046:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800204a:	2b00      	cmp	r3, #0
 800204c:	d00f      	beq.n	800206e <ILI9341_WriteChar+0xa0>
                uint8_t data[] = { color >> 8, color & 0xFF };
 800204e:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8002050:	0a1b      	lsrs	r3, r3, #8
 8002052:	b29b      	uxth	r3, r3
 8002054:	b2db      	uxtb	r3, r3
 8002056:	763b      	strb	r3, [r7, #24]
 8002058:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 800205a:	b2db      	uxtb	r3, r3
 800205c:	767b      	strb	r3, [r7, #25]
                ILI9341_WriteBuffer(display, data, sizeof(data));
 800205e:	f107 0318 	add.w	r3, r7, #24
 8002062:	2202      	movs	r2, #2
 8002064:	4619      	mov	r1, r3
 8002066:	68f8      	ldr	r0, [r7, #12]
 8002068:	f7ff fbf8 	bl	800185c <ILI9341_WriteBuffer>
 800206c:	e00e      	b.n	800208c <ILI9341_WriteChar+0xbe>
            } else {
                uint8_t data[] = { bgcolor >> 8, bgcolor & 0xFF };
 800206e:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8002070:	0a1b      	lsrs	r3, r3, #8
 8002072:	b29b      	uxth	r3, r3
 8002074:	b2db      	uxtb	r3, r3
 8002076:	753b      	strb	r3, [r7, #20]
 8002078:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800207a:	b2db      	uxtb	r3, r3
 800207c:	757b      	strb	r3, [r7, #21]
                ILI9341_WriteBuffer(display, data, sizeof(data));
 800207e:	f107 0314 	add.w	r3, r7, #20
 8002082:	2202      	movs	r2, #2
 8002084:	4619      	mov	r1, r3
 8002086:	68f8      	ldr	r0, [r7, #12]
 8002088:	f7ff fbe8 	bl	800185c <ILI9341_WriteBuffer>
        for (j = 0; j < font.width; j++) {
 800208c:	6a3b      	ldr	r3, [r7, #32]
 800208e:	3301      	adds	r3, #1
 8002090:	623b      	str	r3, [r7, #32]
 8002092:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8002096:	461a      	mov	r2, r3
 8002098:	6a3b      	ldr	r3, [r7, #32]
 800209a:	4293      	cmp	r3, r2
 800209c:	d3cf      	bcc.n	800203e <ILI9341_WriteChar+0x70>
    for (i = 0; i < font.height; i++) {
 800209e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020a0:	3301      	adds	r3, #1
 80020a2:	627b      	str	r3, [r7, #36]	@ 0x24
 80020a4:	f897 3031 	ldrb.w	r3, [r7, #49]	@ 0x31
 80020a8:	461a      	mov	r2, r3
 80020aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020ac:	4293      	cmp	r3, r2
 80020ae:	d3b5      	bcc.n	800201c <ILI9341_WriteChar+0x4e>
            }
        }
    }
}
 80020b0:	bf00      	nop
 80020b2:	bf00      	nop
 80020b4:	3728      	adds	r7, #40	@ 0x28
 80020b6:	46bd      	mov	sp, r7
 80020b8:	bd80      	pop	{r7, pc}

080020ba <ILI9341_WriteString>:

void ILI9341_WriteString(ILI9341TypeDef *display, uint16_t x, uint16_t y, const char* str, FontDef font, uint16_t color, uint16_t bgcolor)
{
 80020ba:	b5b0      	push	{r4, r5, r7, lr}
 80020bc:	b088      	sub	sp, #32
 80020be:	af04      	add	r7, sp, #16
 80020c0:	60f8      	str	r0, [r7, #12]
 80020c2:	607b      	str	r3, [r7, #4]
 80020c4:	460b      	mov	r3, r1
 80020c6:	817b      	strh	r3, [r7, #10]
 80020c8:	4613      	mov	r3, r2
 80020ca:	813b      	strh	r3, [r7, #8]
	ILI9341_SELECT(display);
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	8a1b      	ldrh	r3, [r3, #16]
 80020d0:	461a      	mov	r2, r3
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	685b      	ldr	r3, [r3, #4]
 80020d6:	0412      	lsls	r2, r2, #16
 80020d8:	619a      	str	r2, [r3, #24]

    while (*str) {
 80020da:	e03b      	b.n	8002154 <ILI9341_WriteString+0x9a>
        if (x + font.width >= display->width) {
 80020dc:	897b      	ldrh	r3, [r7, #10]
 80020de:	f897 2020 	ldrb.w	r2, [r7, #32]
 80020e2:	4413      	add	r3, r2
 80020e4:	68fa      	ldr	r2, [r7, #12]
 80020e6:	8ad2      	ldrh	r2, [r2, #22]
 80020e8:	4293      	cmp	r3, r2
 80020ea:	db17      	blt.n	800211c <ILI9341_WriteString+0x62>
            x = 0;
 80020ec:	2300      	movs	r3, #0
 80020ee:	817b      	strh	r3, [r7, #10]
            y += font.height;
 80020f0:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 80020f4:	461a      	mov	r2, r3
 80020f6:	893b      	ldrh	r3, [r7, #8]
 80020f8:	4413      	add	r3, r2
 80020fa:	813b      	strh	r3, [r7, #8]

            if (y + font.height >= display->height)
 80020fc:	893b      	ldrh	r3, [r7, #8]
 80020fe:	f897 2021 	ldrb.w	r2, [r7, #33]	@ 0x21
 8002102:	4413      	add	r3, r2
 8002104:	68fa      	ldr	r2, [r7, #12]
 8002106:	8b12      	ldrh	r2, [r2, #24]
 8002108:	4293      	cmp	r3, r2
 800210a:	da28      	bge.n	800215e <ILI9341_WriteString+0xa4>
                break;

            if (*str == ' ') {
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	781b      	ldrb	r3, [r3, #0]
 8002110:	2b20      	cmp	r3, #32
 8002112:	d103      	bne.n	800211c <ILI9341_WriteString+0x62>
                // skip spaces in the beginning of the new line
                str++;
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	3301      	adds	r3, #1
 8002118:	607b      	str	r3, [r7, #4]
                continue;
 800211a:	e01b      	b.n	8002154 <ILI9341_WriteString+0x9a>
            }
        }

        ILI9341_WriteChar(display, x, y, *str, font, color, bgcolor);
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	781d      	ldrb	r5, [r3, #0]
 8002120:	893a      	ldrh	r2, [r7, #8]
 8002122:	897c      	ldrh	r4, [r7, #10]
 8002124:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8002126:	9303      	str	r3, [sp, #12]
 8002128:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800212a:	9302      	str	r3, [sp, #8]
 800212c:	466b      	mov	r3, sp
 800212e:	f107 0120 	add.w	r1, r7, #32
 8002132:	c903      	ldmia	r1, {r0, r1}
 8002134:	e883 0003 	stmia.w	r3, {r0, r1}
 8002138:	462b      	mov	r3, r5
 800213a:	4621      	mov	r1, r4
 800213c:	68f8      	ldr	r0, [r7, #12]
 800213e:	f7ff ff46 	bl	8001fce <ILI9341_WriteChar>
        x += font.width;
 8002142:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002146:	461a      	mov	r2, r3
 8002148:	897b      	ldrh	r3, [r7, #10]
 800214a:	4413      	add	r3, r2
 800214c:	817b      	strh	r3, [r7, #10]
        str++;
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	3301      	adds	r3, #1
 8002152:	607b      	str	r3, [r7, #4]
    while (*str) {
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	781b      	ldrb	r3, [r3, #0]
 8002158:	2b00      	cmp	r3, #0
 800215a:	d1bf      	bne.n	80020dc <ILI9341_WriteString+0x22>
 800215c:	e000      	b.n	8002160 <ILI9341_WriteString+0xa6>
                break;
 800215e:	bf00      	nop
    }

	ILI9341_UNSELECT(display);
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	8a1a      	ldrh	r2, [r3, #16]
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	685b      	ldr	r3, [r3, #4]
 8002168:	619a      	str	r2, [r3, #24]
}
 800216a:	bf00      	nop
 800216c:	3710      	adds	r7, #16
 800216e:	46bd      	mov	sp, r7
 8002170:	bdb0      	pop	{r4, r5, r7, pc}
	...

08002174 <HAL_I2S_RxCpltCallback>:
  * @brief  I2S 接收全滿回呼函式
  * @param  hi2s: I2S handle
  * @retval None
  */
void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8002174:	b580      	push	{r7, lr}
 8002176:	b082      	sub	sp, #8
 8002178:	af00      	add	r7, sp, #0
 800217a:	6078      	str	r0, [r7, #4]
  // DMA 已經填充完緩衝區的後半部分
  // 在這裡呼叫語音辨識函式，處理後半段的資料
  // speech_recognition_run(&i2s_rx_buffer[I2S_BUFFER_SIZE / 2], I2S_BUFFER_SIZE / 2);
  buffer_is_ready = 2; // 示意：設定旗標
 800217c:	4b1f      	ldr	r3, [pc, #124]	@ (80021fc <HAL_I2S_RxCpltCallback+0x88>)
 800217e:	2202      	movs	r2, #2
 8002180:	601a      	str	r2, [r3, #0]
	if(hi2s==&hi2s2){
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	4a1e      	ldr	r2, [pc, #120]	@ (8002200 <HAL_I2S_RxCpltCallback+0x8c>)
 8002186:	4293      	cmp	r3, r2
 8002188:	d133      	bne.n	80021f2 <HAL_I2S_RxCpltCallback+0x7e>
		cb_cnt++;//回调次数计数
 800218a:	4b1e      	ldr	r3, [pc, #120]	@ (8002204 <HAL_I2S_RxCpltCallback+0x90>)
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	3301      	adds	r3, #1
 8002190:	4a1c      	ldr	r2, [pc, #112]	@ (8002204 <HAL_I2S_RxCpltCallback+0x90>)
 8002192:	6013      	str	r3, [r2, #0]
		//将两个32整型合并为一个
		//dat32 example: 0000fffb 00004f00
		//printf("%x\r\n",data_i2s[0]<<8);
		//printf("%x\r\n",data_i2s[1]>>8);

		val24=(i2s_rx_buffer[0]<<8)+(i2s_rx_buffer[1]>>8);
 8002194:	4b1c      	ldr	r3, [pc, #112]	@ (8002208 <HAL_I2S_RxCpltCallback+0x94>)
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	021a      	lsls	r2, r3, #8
 800219a:	4b1b      	ldr	r3, [pc, #108]	@ (8002208 <HAL_I2S_RxCpltCallback+0x94>)
 800219c:	685b      	ldr	r3, [r3, #4]
 800219e:	0a1b      	lsrs	r3, r3, #8
 80021a0:	4413      	add	r3, r2
 80021a2:	4a1a      	ldr	r2, [pc, #104]	@ (800220c <HAL_I2S_RxCpltCallback+0x98>)
 80021a4:	6013      	str	r3, [r2, #0]
		//printf("%d\r\n",val24);
      //将24位有符号整型扩展到32位
		if(val24 & 0x800000)
 80021a6:	4b19      	ldr	r3, [pc, #100]	@ (800220c <HAL_I2S_RxCpltCallback+0x98>)
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d007      	beq.n	80021c2 <HAL_I2S_RxCpltCallback+0x4e>
		{//negative
			val32=0xff000000 | val24;
 80021b2:	4b16      	ldr	r3, [pc, #88]	@ (800220c <HAL_I2S_RxCpltCallback+0x98>)
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80021ba:	461a      	mov	r2, r3
 80021bc:	4b14      	ldr	r3, [pc, #80]	@ (8002210 <HAL_I2S_RxCpltCallback+0x9c>)
 80021be:	601a      	str	r2, [r3, #0]
 80021c0:	e004      	b.n	80021cc <HAL_I2S_RxCpltCallback+0x58>
		}
		else
		{//positive
			val32=val24;
 80021c2:	4b12      	ldr	r3, [pc, #72]	@ (800220c <HAL_I2S_RxCpltCallback+0x98>)
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	461a      	mov	r2, r3
 80021c8:	4b11      	ldr	r3, [pc, #68]	@ (8002210 <HAL_I2S_RxCpltCallback+0x9c>)
 80021ca:	601a      	str	r2, [r3, #0]
		}
		//以采样频率的十分之一，串口发送采样值
		if(cb_cnt%10==0)
 80021cc:	4b0d      	ldr	r3, [pc, #52]	@ (8002204 <HAL_I2S_RxCpltCallback+0x90>)
 80021ce:	6819      	ldr	r1, [r3, #0]
 80021d0:	4b10      	ldr	r3, [pc, #64]	@ (8002214 <HAL_I2S_RxCpltCallback+0xa0>)
 80021d2:	fba3 2301 	umull	r2, r3, r3, r1
 80021d6:	08da      	lsrs	r2, r3, #3
 80021d8:	4613      	mov	r3, r2
 80021da:	009b      	lsls	r3, r3, #2
 80021dc:	4413      	add	r3, r2
 80021de:	005b      	lsls	r3, r3, #1
 80021e0:	1aca      	subs	r2, r1, r3
 80021e2:	2a00      	cmp	r2, #0
 80021e4:	d105      	bne.n	80021f2 <HAL_I2S_RxCpltCallback+0x7e>
			printf("%d\r\n",val32);
 80021e6:	4b0a      	ldr	r3, [pc, #40]	@ (8002210 <HAL_I2S_RxCpltCallback+0x9c>)
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	4619      	mov	r1, r3
 80021ec:	480a      	ldr	r0, [pc, #40]	@ (8002218 <HAL_I2S_RxCpltCallback+0xa4>)
 80021ee:	f009 fca3 	bl	800bb38 <iprintf>
	}
}
 80021f2:	bf00      	nop
 80021f4:	3708      	adds	r7, #8
 80021f6:	46bd      	mov	sp, r7
 80021f8:	bd80      	pop	{r7, pc}
 80021fa:	bf00      	nop
 80021fc:	2000d4e4 	.word	0x2000d4e4
 8002200:	2000d3c8 	.word	0x2000d3c8
 8002204:	2000d4e8 	.word	0x2000d4e8
 8002208:	2000d4d4 	.word	0x2000d4d4
 800220c:	2000d4ec 	.word	0x2000d4ec
 8002210:	2000d4f0 	.word	0x2000d4f0
 8002214:	cccccccd 	.word	0xcccccccd
 8002218:	0800f520 	.word	0x0800f520

0800221c <HAL_UART_RxCpltCallback>:
// --- AI 推論相關變數 ---
// 這個變數將連接 main.c 和 app_x-cube-ai.c
int score_from_uart = 0;

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800221c:	b580      	push	{r7, lr}
 800221e:	b082      	sub	sp, #8
 8002220:	af00      	add	r7, sp, #0
 8002222:	6078      	str	r0, [r7, #4]
  // 確保是我們想要的 UART (例如 USART2) 觸發的中斷
  if (huart->Instance == USART6)
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	4a1b      	ldr	r2, [pc, #108]	@ (8002298 <HAL_UART_RxCpltCallback+0x7c>)
 800222a:	4293      	cmp	r3, r2
 800222c:	d130      	bne.n	8002290 <HAL_UART_RxCpltCallback+0x74>
  {
    // 檢查是否是換行符 (Enter 鍵)，或者緩衝區是否已滿
    if (rx_byte == '\r' || rx_byte == '\n' || uart_rx_index >= (UART_RX_BUFFER_SIZE - 1))
 800222e:	4b1b      	ldr	r3, [pc, #108]	@ (800229c <HAL_UART_RxCpltCallback+0x80>)
 8002230:	781b      	ldrb	r3, [r3, #0]
 8002232:	2b0d      	cmp	r3, #13
 8002234:	d008      	beq.n	8002248 <HAL_UART_RxCpltCallback+0x2c>
 8002236:	4b19      	ldr	r3, [pc, #100]	@ (800229c <HAL_UART_RxCpltCallback+0x80>)
 8002238:	781b      	ldrb	r3, [r3, #0]
 800223a:	2b0a      	cmp	r3, #10
 800223c:	d004      	beq.n	8002248 <HAL_UART_RxCpltCallback+0x2c>
 800223e:	4b18      	ldr	r3, [pc, #96]	@ (80022a0 <HAL_UART_RxCpltCallback+0x84>)
 8002240:	781b      	ldrb	r3, [r3, #0]
 8002242:	b2db      	uxtb	r3, r3
 8002244:	2b08      	cmp	r3, #8
 8002246:	d912      	bls.n	800226e <HAL_UART_RxCpltCallback+0x52>
    {
      // 1. 在字串末尾加上結束符 '\0'
      uart_rx_buffer[uart_rx_index] = '\0';
 8002248:	4b15      	ldr	r3, [pc, #84]	@ (80022a0 <HAL_UART_RxCpltCallback+0x84>)
 800224a:	781b      	ldrb	r3, [r3, #0]
 800224c:	b2db      	uxtb	r3, r3
 800224e:	461a      	mov	r2, r3
 8002250:	4b14      	ldr	r3, [pc, #80]	@ (80022a4 <HAL_UART_RxCpltCallback+0x88>)
 8002252:	2100      	movs	r1, #0
 8002254:	5499      	strb	r1, [r3, r2]

      // 2. 設定新數據旗標，通知主迴圈處理
      if (uart_rx_index > 0) // 確保不是空指令
 8002256:	4b12      	ldr	r3, [pc, #72]	@ (80022a0 <HAL_UART_RxCpltCallback+0x84>)
 8002258:	781b      	ldrb	r3, [r3, #0]
 800225a:	b2db      	uxtb	r3, r3
 800225c:	2b00      	cmp	r3, #0
 800225e:	d002      	beq.n	8002266 <HAL_UART_RxCpltCallback+0x4a>
      {
        new_data_received = true;
 8002260:	4b11      	ldr	r3, [pc, #68]	@ (80022a8 <HAL_UART_RxCpltCallback+0x8c>)
 8002262:	2201      	movs	r2, #1
 8002264:	701a      	strb	r2, [r3, #0]
      }

      // 3. 重置索引，準備下一次接收
      uart_rx_index = 0;
 8002266:	4b0e      	ldr	r3, [pc, #56]	@ (80022a0 <HAL_UART_RxCpltCallback+0x84>)
 8002268:	2200      	movs	r2, #0
 800226a:	701a      	strb	r2, [r3, #0]
 800226c:	e00b      	b.n	8002286 <HAL_UART_RxCpltCallback+0x6a>
    }
    else
    {
      // 將收到的位元組存入緩衝區，並移動索引
      uart_rx_buffer[uart_rx_index++] = rx_byte;
 800226e:	4b0c      	ldr	r3, [pc, #48]	@ (80022a0 <HAL_UART_RxCpltCallback+0x84>)
 8002270:	781b      	ldrb	r3, [r3, #0]
 8002272:	b2db      	uxtb	r3, r3
 8002274:	1c5a      	adds	r2, r3, #1
 8002276:	b2d1      	uxtb	r1, r2
 8002278:	4a09      	ldr	r2, [pc, #36]	@ (80022a0 <HAL_UART_RxCpltCallback+0x84>)
 800227a:	7011      	strb	r1, [r2, #0]
 800227c:	461a      	mov	r2, r3
 800227e:	4b07      	ldr	r3, [pc, #28]	@ (800229c <HAL_UART_RxCpltCallback+0x80>)
 8002280:	7819      	ldrb	r1, [r3, #0]
 8002282:	4b08      	ldr	r3, [pc, #32]	@ (80022a4 <HAL_UART_RxCpltCallback+0x88>)
 8002284:	5499      	strb	r1, [r3, r2]
    }

    // !!! 非常重要：重新啟動 UART 中斷接收，準備接收下一個位元組 !!!
    HAL_UART_Receive_IT(&huart6, &rx_byte, 1);
 8002286:	2201      	movs	r2, #1
 8002288:	4904      	ldr	r1, [pc, #16]	@ (800229c <HAL_UART_RxCpltCallback+0x80>)
 800228a:	4808      	ldr	r0, [pc, #32]	@ (80022ac <HAL_UART_RxCpltCallback+0x90>)
 800228c:	f007 fcd9 	bl	8009c42 <HAL_UART_Receive_IT>
  }
}
 8002290:	bf00      	nop
 8002292:	3708      	adds	r7, #8
 8002294:	46bd      	mov	sp, r7
 8002296:	bd80      	pop	{r7, pc}
 8002298:	40011400 	.word	0x40011400
 800229c:	2000d4fe 	.word	0x2000d4fe
 80022a0:	2000d4ff 	.word	0x2000d4ff
 80022a4:	2000d4f4 	.word	0x2000d4f4
 80022a8:	2000d500 	.word	0x2000d500
 80022ac:	20014070 	.word	0x20014070

080022b0 <HAL_TIM_PeriodElapsedCallback>:

uint16_t txData;
int txIndex;
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80022b0:	b580      	push	{r7, lr}
 80022b2:	b082      	sub	sp, #8
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	6078      	str	r0, [r7, #4]
  if(htim->Instance == TIM2)
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80022c0:	d125      	bne.n	800230e <HAL_TIM_PeriodElapsedCallback+0x5e>
  {
    txData = ((uint16_t)helloworld[txIndex+1] << 8) | helloworld[txIndex];
 80022c2:	4b1e      	ldr	r3, [pc, #120]	@ (800233c <HAL_TIM_PeriodElapsedCallback+0x8c>)
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	3301      	adds	r3, #1
 80022c8:	4a1d      	ldr	r2, [pc, #116]	@ (8002340 <HAL_TIM_PeriodElapsedCallback+0x90>)
 80022ca:	5cd3      	ldrb	r3, [r2, r3]
 80022cc:	b21b      	sxth	r3, r3
 80022ce:	021b      	lsls	r3, r3, #8
 80022d0:	b21a      	sxth	r2, r3
 80022d2:	4b1a      	ldr	r3, [pc, #104]	@ (800233c <HAL_TIM_PeriodElapsedCallback+0x8c>)
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	491a      	ldr	r1, [pc, #104]	@ (8002340 <HAL_TIM_PeriodElapsedCallback+0x90>)
 80022d8:	5ccb      	ldrb	r3, [r1, r3]
 80022da:	b21b      	sxth	r3, r3
 80022dc:	4313      	orrs	r3, r2
 80022de:	b21b      	sxth	r3, r3
 80022e0:	b29a      	uxth	r2, r3
 80022e2:	4b18      	ldr	r3, [pc, #96]	@ (8002344 <HAL_TIM_PeriodElapsedCallback+0x94>)
 80022e4:	801a      	strh	r2, [r3, #0]
    txIndex = txIndex + 2;
 80022e6:	4b15      	ldr	r3, [pc, #84]	@ (800233c <HAL_TIM_PeriodElapsedCallback+0x8c>)
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	3302      	adds	r3, #2
 80022ec:	4a13      	ldr	r2, [pc, #76]	@ (800233c <HAL_TIM_PeriodElapsedCallback+0x8c>)
 80022ee:	6013      	str	r3, [r2, #0]
    if(txIndex>53456) txIndex = 0;
 80022f0:	4b12      	ldr	r3, [pc, #72]	@ (800233c <HAL_TIM_PeriodElapsedCallback+0x8c>)
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	f24d 02d0 	movw	r2, #53456	@ 0xd0d0
 80022f8:	4293      	cmp	r3, r2
 80022fa:	dd02      	ble.n	8002302 <HAL_TIM_PeriodElapsedCallback+0x52>
 80022fc:	4b0f      	ldr	r3, [pc, #60]	@ (800233c <HAL_TIM_PeriodElapsedCallback+0x8c>)
 80022fe:	2200      	movs	r2, #0
 8002300:	601a      	str	r2, [r3, #0]
    HAL_I2S_Transmit(&hi2s3, &txData, 1, 10);
 8002302:	230a      	movs	r3, #10
 8002304:	2201      	movs	r2, #1
 8002306:	490f      	ldr	r1, [pc, #60]	@ (8002344 <HAL_TIM_PeriodElapsedCallback+0x94>)
 8002308:	480f      	ldr	r0, [pc, #60]	@ (8002348 <HAL_TIM_PeriodElapsedCallback+0x98>)
 800230a:	f004 fdd7 	bl	8006ebc <HAL_I2S_Transmit>
  }

	if(htim->Instance == TIM10)
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	4a0e      	ldr	r2, [pc, #56]	@ (800234c <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8002314:	4293      	cmp	r3, r2
 8002316:	d10c      	bne.n	8002332 <HAL_TIM_PeriodElapsedCallback+0x82>
	{
		if (adc_available) {
 8002318:	4b0d      	ldr	r3, [pc, #52]	@ (8002350 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 800231a:	781b      	ldrb	r3, [r3, #0]
 800231c:	b2db      	uxtb	r3, r3
 800231e:	2b00      	cmp	r3, #0
 8002320:	d007      	beq.n	8002332 <HAL_TIM_PeriodElapsedCallback+0x82>
			adc_available = 0;
 8002322:	4b0b      	ldr	r3, [pc, #44]	@ (8002350 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8002324:	2200      	movs	r2, #0
 8002326:	701a      	strb	r2, [r3, #0]
			HAL_ADC_Start_DMA(&hadc1, (uint32_t*)&adc_data, 2);
 8002328:	2202      	movs	r2, #2
 800232a:	490a      	ldr	r1, [pc, #40]	@ (8002354 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 800232c:	480a      	ldr	r0, [pc, #40]	@ (8002358 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 800232e:	f003 f969 	bl	8005604 <HAL_ADC_Start_DMA>
		}
	}
}
 8002332:	bf00      	nop
 8002334:	3708      	adds	r7, #8
 8002336:	46bd      	mov	sp, r7
 8002338:	bd80      	pop	{r7, pc}
 800233a:	bf00      	nop
 800233c:	2000d504 	.word	0x2000d504
 8002340:	20000010 	.word	0x20000010
 8002344:	2000d502 	.word	0x2000d502
 8002348:	2000d410 	.word	0x2000d410
 800234c:	40014400 	.word	0x40014400
 8002350:	2000d0e1 	.word	0x2000d0e1
 8002354:	2000d508 	.word	0x2000d508
 8002358:	2000d318 	.word	0x2000d318

0800235c <HAL_ADC_ConvCpltCallback>:


void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800235c:	b580      	push	{r7, lr}
 800235e:	b084      	sub	sp, #16
 8002360:	af00      	add	r7, sp, #0
 8002362:	6078      	str	r0, [r7, #4]
    if(hadc->Instance == ADC1)
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	4a91      	ldr	r2, [pc, #580]	@ (80025b0 <HAL_ADC_ConvCpltCallback+0x254>)
 800236a:	4293      	cmp	r3, r2
 800236c:	f040 81c2 	bne.w	80026f4 <HAL_ADC_ConvCpltCallback+0x398>
    {
    	if (adc_reset_cyccnt) {
 8002370:	4b90      	ldr	r3, [pc, #576]	@ (80025b4 <HAL_ADC_ConvCpltCallback+0x258>)
 8002372:	781b      	ldrb	r3, [r3, #0]
 8002374:	b2db      	uxtb	r3, r3
 8002376:	2b00      	cmp	r3, #0
 8002378:	d00b      	beq.n	8002392 <HAL_ADC_ConvCpltCallback+0x36>
    		DWT->CYCCNT = 0U;
 800237a:	4b8f      	ldr	r3, [pc, #572]	@ (80025b8 <HAL_ADC_ConvCpltCallback+0x25c>)
 800237c:	2200      	movs	r2, #0
 800237e:	605a      	str	r2, [r3, #4]
    		adc0_time_delta = 0;
 8002380:	4b8e      	ldr	r3, [pc, #568]	@ (80025bc <HAL_ADC_ConvCpltCallback+0x260>)
 8002382:	2200      	movs	r2, #0
 8002384:	601a      	str	r2, [r3, #0]
    		adc1_time_delta = 0;
 8002386:	4b8e      	ldr	r3, [pc, #568]	@ (80025c0 <HAL_ADC_ConvCpltCallback+0x264>)
 8002388:	2200      	movs	r2, #0
 800238a:	601a      	str	r2, [r3, #0]
    		adc_reset_cyccnt = 0;
 800238c:	4b89      	ldr	r3, [pc, #548]	@ (80025b4 <HAL_ADC_ConvCpltCallback+0x258>)
 800238e:	2200      	movs	r2, #0
 8002390:	701a      	strb	r2, [r3, #0]
    	}

    	if (!adc0_filled) {
 8002392:	4b8c      	ldr	r3, [pc, #560]	@ (80025c4 <HAL_ADC_ConvCpltCallback+0x268>)
 8002394:	781b      	ldrb	r3, [r3, #0]
 8002396:	b2db      	uxtb	r3, r3
 8002398:	2b00      	cmp	r3, #0
 800239a:	f040 80a4 	bne.w	80024e6 <HAL_ADC_ConvCpltCallback+0x18a>
			adc0_time[adc0_length] = (DWT->CYCCNT - adc0_time_delta) / (SystemCoreClock / 1000000);
 800239e:	4b86      	ldr	r3, [pc, #536]	@ (80025b8 <HAL_ADC_ConvCpltCallback+0x25c>)
 80023a0:	685a      	ldr	r2, [r3, #4]
 80023a2:	4b86      	ldr	r3, [pc, #536]	@ (80025bc <HAL_ADC_ConvCpltCallback+0x260>)
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	1ad1      	subs	r1, r2, r3
 80023a8:	4b87      	ldr	r3, [pc, #540]	@ (80025c8 <HAL_ADC_ConvCpltCallback+0x26c>)
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	4a87      	ldr	r2, [pc, #540]	@ (80025cc <HAL_ADC_ConvCpltCallback+0x270>)
 80023ae:	fba2 2303 	umull	r2, r3, r2, r3
 80023b2:	0c9a      	lsrs	r2, r3, #18
 80023b4:	4b86      	ldr	r3, [pc, #536]	@ (80025d0 <HAL_ADC_ConvCpltCallback+0x274>)
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	fbb1 f2f2 	udiv	r2, r1, r2
 80023bc:	4985      	ldr	r1, [pc, #532]	@ (80025d4 <HAL_ADC_ConvCpltCallback+0x278>)
 80023be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			adc0[adc0_length] = adc_data[0] * ADC_CHANNEL0_SCALE;
 80023c2:	4b83      	ldr	r3, [pc, #524]	@ (80025d0 <HAL_ADC_ConvCpltCallback+0x274>)
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	4a84      	ldr	r2, [pc, #528]	@ (80025d8 <HAL_ADC_ConvCpltCallback+0x27c>)
 80023c8:	8812      	ldrh	r2, [r2, #0]
 80023ca:	b291      	uxth	r1, r2
 80023cc:	4a83      	ldr	r2, [pc, #524]	@ (80025dc <HAL_ADC_ConvCpltCallback+0x280>)
 80023ce:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

			if (adc_max[0] < adc0[adc0_length])
 80023d2:	4b83      	ldr	r3, [pc, #524]	@ (80025e0 <HAL_ADC_ConvCpltCallback+0x284>)
 80023d4:	881b      	ldrh	r3, [r3, #0]
 80023d6:	b29a      	uxth	r2, r3
 80023d8:	4b7d      	ldr	r3, [pc, #500]	@ (80025d0 <HAL_ADC_ConvCpltCallback+0x274>)
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	497f      	ldr	r1, [pc, #508]	@ (80025dc <HAL_ADC_ConvCpltCallback+0x280>)
 80023de:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80023e2:	429a      	cmp	r2, r3
 80023e4:	d206      	bcs.n	80023f4 <HAL_ADC_ConvCpltCallback+0x98>
				adc_max[0] = adc0[adc0_length];
 80023e6:	4b7a      	ldr	r3, [pc, #488]	@ (80025d0 <HAL_ADC_ConvCpltCallback+0x274>)
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	4a7c      	ldr	r2, [pc, #496]	@ (80025dc <HAL_ADC_ConvCpltCallback+0x280>)
 80023ec:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 80023f0:	4b7b      	ldr	r3, [pc, #492]	@ (80025e0 <HAL_ADC_ConvCpltCallback+0x284>)
 80023f2:	801a      	strh	r2, [r3, #0]

			if (adc_min[0] > adc0[adc0_length])
 80023f4:	4b7b      	ldr	r3, [pc, #492]	@ (80025e4 <HAL_ADC_ConvCpltCallback+0x288>)
 80023f6:	881b      	ldrh	r3, [r3, #0]
 80023f8:	b29a      	uxth	r2, r3
 80023fa:	4b75      	ldr	r3, [pc, #468]	@ (80025d0 <HAL_ADC_ConvCpltCallback+0x274>)
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	4977      	ldr	r1, [pc, #476]	@ (80025dc <HAL_ADC_ConvCpltCallback+0x280>)
 8002400:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8002404:	429a      	cmp	r2, r3
 8002406:	d906      	bls.n	8002416 <HAL_ADC_ConvCpltCallback+0xba>
				adc_min[0] = adc0[adc0_length];
 8002408:	4b71      	ldr	r3, [pc, #452]	@ (80025d0 <HAL_ADC_ConvCpltCallback+0x274>)
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	4a73      	ldr	r2, [pc, #460]	@ (80025dc <HAL_ADC_ConvCpltCallback+0x280>)
 800240e:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8002412:	4b74      	ldr	r3, [pc, #464]	@ (80025e4 <HAL_ADC_ConvCpltCallback+0x288>)
 8002414:	801a      	strh	r2, [r3, #0]

			if (adc0_length < (ADC_BUFFER_SIZE - 1)) {
 8002416:	4b6e      	ldr	r3, [pc, #440]	@ (80025d0 <HAL_ADC_ConvCpltCallback+0x274>)
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	f240 72fe 	movw	r2, #2046	@ 0x7fe
 800241e:	4293      	cmp	r3, r2
 8002420:	d85e      	bhi.n	80024e0 <HAL_ADC_ConvCpltCallback+0x184>

				uint8_t trigger = 0;
 8002422:	2300      	movs	r3, #0
 8002424:	73fb      	strb	r3, [r7, #15]

				if (trigger_mode == 0)
 8002426:	4b70      	ldr	r3, [pc, #448]	@ (80025e8 <HAL_ADC_ConvCpltCallback+0x28c>)
 8002428:	781b      	ldrb	r3, [r3, #0]
 800242a:	2b00      	cmp	r3, #0
 800242c:	d114      	bne.n	8002458 <HAL_ADC_ConvCpltCallback+0xfc>
					trigger = (adc0_prev < trigger0_value && adc0[adc0_length] > trigger0_value);
 800242e:	4b6f      	ldr	r3, [pc, #444]	@ (80025ec <HAL_ADC_ConvCpltCallback+0x290>)
 8002430:	881b      	ldrh	r3, [r3, #0]
 8002432:	b29a      	uxth	r2, r3
 8002434:	4b6e      	ldr	r3, [pc, #440]	@ (80025f0 <HAL_ADC_ConvCpltCallback+0x294>)
 8002436:	881b      	ldrh	r3, [r3, #0]
 8002438:	429a      	cmp	r2, r3
 800243a:	d20a      	bcs.n	8002452 <HAL_ADC_ConvCpltCallback+0xf6>
 800243c:	4b64      	ldr	r3, [pc, #400]	@ (80025d0 <HAL_ADC_ConvCpltCallback+0x274>)
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	4a66      	ldr	r2, [pc, #408]	@ (80025dc <HAL_ADC_ConvCpltCallback+0x280>)
 8002442:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8002446:	4b6a      	ldr	r3, [pc, #424]	@ (80025f0 <HAL_ADC_ConvCpltCallback+0x294>)
 8002448:	881b      	ldrh	r3, [r3, #0]
 800244a:	429a      	cmp	r2, r3
 800244c:	d901      	bls.n	8002452 <HAL_ADC_ConvCpltCallback+0xf6>
 800244e:	2301      	movs	r3, #1
 8002450:	e000      	b.n	8002454 <HAL_ADC_ConvCpltCallback+0xf8>
 8002452:	2300      	movs	r3, #0
 8002454:	73fb      	strb	r3, [r7, #15]
 8002456:	e013      	b.n	8002480 <HAL_ADC_ConvCpltCallback+0x124>
				else
					trigger = (adc0_prev > trigger0_value && adc0[adc0_length] < trigger0_value);
 8002458:	4b64      	ldr	r3, [pc, #400]	@ (80025ec <HAL_ADC_ConvCpltCallback+0x290>)
 800245a:	881b      	ldrh	r3, [r3, #0]
 800245c:	b29a      	uxth	r2, r3
 800245e:	4b64      	ldr	r3, [pc, #400]	@ (80025f0 <HAL_ADC_ConvCpltCallback+0x294>)
 8002460:	881b      	ldrh	r3, [r3, #0]
 8002462:	429a      	cmp	r2, r3
 8002464:	d90a      	bls.n	800247c <HAL_ADC_ConvCpltCallback+0x120>
 8002466:	4b5a      	ldr	r3, [pc, #360]	@ (80025d0 <HAL_ADC_ConvCpltCallback+0x274>)
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	4a5c      	ldr	r2, [pc, #368]	@ (80025dc <HAL_ADC_ConvCpltCallback+0x280>)
 800246c:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8002470:	4b5f      	ldr	r3, [pc, #380]	@ (80025f0 <HAL_ADC_ConvCpltCallback+0x294>)
 8002472:	881b      	ldrh	r3, [r3, #0]
 8002474:	429a      	cmp	r2, r3
 8002476:	d201      	bcs.n	800247c <HAL_ADC_ConvCpltCallback+0x120>
 8002478:	2301      	movs	r3, #1
 800247a:	e000      	b.n	800247e <HAL_ADC_ConvCpltCallback+0x122>
 800247c:	2300      	movs	r3, #0
 800247e:	73fb      	strb	r3, [r7, #15]

				if (trigger && adc0_length != 0) {
 8002480:	7bfb      	ldrb	r3, [r7, #15]
 8002482:	2b00      	cmp	r3, #0
 8002484:	d021      	beq.n	80024ca <HAL_ADC_ConvCpltCallback+0x16e>
 8002486:	4b52      	ldr	r3, [pc, #328]	@ (80025d0 <HAL_ADC_ConvCpltCallback+0x274>)
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	2b00      	cmp	r3, #0
 800248c:	d01d      	beq.n	80024ca <HAL_ADC_ConvCpltCallback+0x16e>
					if (!event_trigger0_detected) {
 800248e:	4b59      	ldr	r3, [pc, #356]	@ (80025f4 <HAL_ADC_ConvCpltCallback+0x298>)
 8002490:	781b      	ldrb	r3, [r3, #0]
 8002492:	2b00      	cmp	r3, #0
 8002494:	d10a      	bne.n	80024ac <HAL_ADC_ConvCpltCallback+0x150>
						adc0_length = 0;
 8002496:	4b4e      	ldr	r3, [pc, #312]	@ (80025d0 <HAL_ADC_ConvCpltCallback+0x274>)
 8002498:	2200      	movs	r2, #0
 800249a:	601a      	str	r2, [r3, #0]
						adc0_time_delta = DWT->CYCCNT;
 800249c:	4b46      	ldr	r3, [pc, #280]	@ (80025b8 <HAL_ADC_ConvCpltCallback+0x25c>)
 800249e:	685b      	ldr	r3, [r3, #4]
 80024a0:	4a46      	ldr	r2, [pc, #280]	@ (80025bc <HAL_ADC_ConvCpltCallback+0x260>)
 80024a2:	6013      	str	r3, [r2, #0]
						event_trigger0_detected = 1;
 80024a4:	4b53      	ldr	r3, [pc, #332]	@ (80025f4 <HAL_ADC_ConvCpltCallback+0x298>)
 80024a6:	2201      	movs	r2, #1
 80024a8:	701a      	strb	r2, [r3, #0]
 80024aa:	e00e      	b.n	80024ca <HAL_ADC_ConvCpltCallback+0x16e>
					} else if (!adc_period0_detected) {
 80024ac:	4b52      	ldr	r3, [pc, #328]	@ (80025f8 <HAL_ADC_ConvCpltCallback+0x29c>)
 80024ae:	781b      	ldrb	r3, [r3, #0]
 80024b0:	b2db      	uxtb	r3, r3
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d109      	bne.n	80024ca <HAL_ADC_ConvCpltCallback+0x16e>
						adc_period[0] = adc0_time[adc0_length];
 80024b6:	4b46      	ldr	r3, [pc, #280]	@ (80025d0 <HAL_ADC_ConvCpltCallback+0x274>)
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	4a46      	ldr	r2, [pc, #280]	@ (80025d4 <HAL_ADC_ConvCpltCallback+0x278>)
 80024bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80024c0:	4a4e      	ldr	r2, [pc, #312]	@ (80025fc <HAL_ADC_ConvCpltCallback+0x2a0>)
 80024c2:	6013      	str	r3, [r2, #0]
						adc_period0_detected = 1;
 80024c4:	4b4c      	ldr	r3, [pc, #304]	@ (80025f8 <HAL_ADC_ConvCpltCallback+0x29c>)
 80024c6:	2201      	movs	r2, #1
 80024c8:	701a      	strb	r2, [r3, #0]
					}
				}

				adc0_prev = adc_data[0] * ADC_CHANNEL0_SCALE;
 80024ca:	4b43      	ldr	r3, [pc, #268]	@ (80025d8 <HAL_ADC_ConvCpltCallback+0x27c>)
 80024cc:	881b      	ldrh	r3, [r3, #0]
 80024ce:	b29a      	uxth	r2, r3
 80024d0:	4b46      	ldr	r3, [pc, #280]	@ (80025ec <HAL_ADC_ConvCpltCallback+0x290>)
 80024d2:	801a      	strh	r2, [r3, #0]
				adc0_length++;
 80024d4:	4b3e      	ldr	r3, [pc, #248]	@ (80025d0 <HAL_ADC_ConvCpltCallback+0x274>)
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	3301      	adds	r3, #1
 80024da:	4a3d      	ldr	r2, [pc, #244]	@ (80025d0 <HAL_ADC_ConvCpltCallback+0x274>)
 80024dc:	6013      	str	r3, [r2, #0]
 80024de:	e002      	b.n	80024e6 <HAL_ADC_ConvCpltCallback+0x18a>

			} else
				adc0_filled = 1;
 80024e0:	4b38      	ldr	r3, [pc, #224]	@ (80025c4 <HAL_ADC_ConvCpltCallback+0x268>)
 80024e2:	2201      	movs	r2, #1
 80024e4:	701a      	strb	r2, [r3, #0]
    	}

    	if (!adc1_filled) {
 80024e6:	4b46      	ldr	r3, [pc, #280]	@ (8002600 <HAL_ADC_ConvCpltCallback+0x2a4>)
 80024e8:	781b      	ldrb	r3, [r3, #0]
 80024ea:	b2db      	uxtb	r3, r3
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	f040 80da 	bne.w	80026a6 <HAL_ADC_ConvCpltCallback+0x34a>
			adc1_time[adc1_length] = (DWT->CYCCNT - adc1_time_delta) / (SystemCoreClock / 1000000);
 80024f2:	4b31      	ldr	r3, [pc, #196]	@ (80025b8 <HAL_ADC_ConvCpltCallback+0x25c>)
 80024f4:	685a      	ldr	r2, [r3, #4]
 80024f6:	4b32      	ldr	r3, [pc, #200]	@ (80025c0 <HAL_ADC_ConvCpltCallback+0x264>)
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	1ad1      	subs	r1, r2, r3
 80024fc:	4b32      	ldr	r3, [pc, #200]	@ (80025c8 <HAL_ADC_ConvCpltCallback+0x26c>)
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	4a32      	ldr	r2, [pc, #200]	@ (80025cc <HAL_ADC_ConvCpltCallback+0x270>)
 8002502:	fba2 2303 	umull	r2, r3, r2, r3
 8002506:	0c9a      	lsrs	r2, r3, #18
 8002508:	4b3e      	ldr	r3, [pc, #248]	@ (8002604 <HAL_ADC_ConvCpltCallback+0x2a8>)
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	fbb1 f2f2 	udiv	r2, r1, r2
 8002510:	493d      	ldr	r1, [pc, #244]	@ (8002608 <HAL_ADC_ConvCpltCallback+0x2ac>)
 8002512:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			adc1[adc1_length] = adc_data[1] * ADC_CHANNEL1_SCALE;
 8002516:	4b3b      	ldr	r3, [pc, #236]	@ (8002604 <HAL_ADC_ConvCpltCallback+0x2a8>)
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	4a2f      	ldr	r2, [pc, #188]	@ (80025d8 <HAL_ADC_ConvCpltCallback+0x27c>)
 800251c:	8852      	ldrh	r2, [r2, #2]
 800251e:	b291      	uxth	r1, r2
 8002520:	4a3a      	ldr	r2, [pc, #232]	@ (800260c <HAL_ADC_ConvCpltCallback+0x2b0>)
 8002522:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

			if (adc_max[1] < adc1[adc1_length])
 8002526:	4b2e      	ldr	r3, [pc, #184]	@ (80025e0 <HAL_ADC_ConvCpltCallback+0x284>)
 8002528:	885b      	ldrh	r3, [r3, #2]
 800252a:	b29a      	uxth	r2, r3
 800252c:	4b35      	ldr	r3, [pc, #212]	@ (8002604 <HAL_ADC_ConvCpltCallback+0x2a8>)
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	4936      	ldr	r1, [pc, #216]	@ (800260c <HAL_ADC_ConvCpltCallback+0x2b0>)
 8002532:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8002536:	429a      	cmp	r2, r3
 8002538:	d206      	bcs.n	8002548 <HAL_ADC_ConvCpltCallback+0x1ec>
				adc_max[1] = adc1[adc1_length];
 800253a:	4b32      	ldr	r3, [pc, #200]	@ (8002604 <HAL_ADC_ConvCpltCallback+0x2a8>)
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	4a33      	ldr	r2, [pc, #204]	@ (800260c <HAL_ADC_ConvCpltCallback+0x2b0>)
 8002540:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8002544:	4b26      	ldr	r3, [pc, #152]	@ (80025e0 <HAL_ADC_ConvCpltCallback+0x284>)
 8002546:	805a      	strh	r2, [r3, #2]

			if (adc_min[1] > adc1[adc1_length])
 8002548:	4b26      	ldr	r3, [pc, #152]	@ (80025e4 <HAL_ADC_ConvCpltCallback+0x288>)
 800254a:	885b      	ldrh	r3, [r3, #2]
 800254c:	b29a      	uxth	r2, r3
 800254e:	4b2d      	ldr	r3, [pc, #180]	@ (8002604 <HAL_ADC_ConvCpltCallback+0x2a8>)
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	492e      	ldr	r1, [pc, #184]	@ (800260c <HAL_ADC_ConvCpltCallback+0x2b0>)
 8002554:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8002558:	429a      	cmp	r2, r3
 800255a:	d906      	bls.n	800256a <HAL_ADC_ConvCpltCallback+0x20e>
				adc_min[1] = adc1[adc1_length];
 800255c:	4b29      	ldr	r3, [pc, #164]	@ (8002604 <HAL_ADC_ConvCpltCallback+0x2a8>)
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	4a2a      	ldr	r2, [pc, #168]	@ (800260c <HAL_ADC_ConvCpltCallback+0x2b0>)
 8002562:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8002566:	4b1f      	ldr	r3, [pc, #124]	@ (80025e4 <HAL_ADC_ConvCpltCallback+0x288>)
 8002568:	805a      	strh	r2, [r3, #2]

			if (adc1_length < (ADC_BUFFER_SIZE - 1)) {
 800256a:	4b26      	ldr	r3, [pc, #152]	@ (8002604 <HAL_ADC_ConvCpltCallback+0x2a8>)
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	f240 72fe 	movw	r2, #2046	@ 0x7fe
 8002572:	4293      	cmp	r3, r2
 8002574:	f200 8094 	bhi.w	80026a0 <HAL_ADC_ConvCpltCallback+0x344>

				uint8_t trigger = 0;
 8002578:	2300      	movs	r3, #0
 800257a:	73bb      	strb	r3, [r7, #14]

				if (trigger_mode == 0)
 800257c:	4b1a      	ldr	r3, [pc, #104]	@ (80025e8 <HAL_ADC_ConvCpltCallback+0x28c>)
 800257e:	781b      	ldrb	r3, [r3, #0]
 8002580:	2b00      	cmp	r3, #0
 8002582:	d149      	bne.n	8002618 <HAL_ADC_ConvCpltCallback+0x2bc>
					trigger = (adc1_prev < trigger1_value && adc1[adc1_length] > trigger1_value);
 8002584:	4b22      	ldr	r3, [pc, #136]	@ (8002610 <HAL_ADC_ConvCpltCallback+0x2b4>)
 8002586:	881b      	ldrh	r3, [r3, #0]
 8002588:	b29a      	uxth	r2, r3
 800258a:	4b22      	ldr	r3, [pc, #136]	@ (8002614 <HAL_ADC_ConvCpltCallback+0x2b8>)
 800258c:	881b      	ldrh	r3, [r3, #0]
 800258e:	429a      	cmp	r2, r3
 8002590:	d20a      	bcs.n	80025a8 <HAL_ADC_ConvCpltCallback+0x24c>
 8002592:	4b1c      	ldr	r3, [pc, #112]	@ (8002604 <HAL_ADC_ConvCpltCallback+0x2a8>)
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	4a1d      	ldr	r2, [pc, #116]	@ (800260c <HAL_ADC_ConvCpltCallback+0x2b0>)
 8002598:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 800259c:	4b1d      	ldr	r3, [pc, #116]	@ (8002614 <HAL_ADC_ConvCpltCallback+0x2b8>)
 800259e:	881b      	ldrh	r3, [r3, #0]
 80025a0:	429a      	cmp	r2, r3
 80025a2:	d901      	bls.n	80025a8 <HAL_ADC_ConvCpltCallback+0x24c>
 80025a4:	2301      	movs	r3, #1
 80025a6:	e000      	b.n	80025aa <HAL_ADC_ConvCpltCallback+0x24e>
 80025a8:	2300      	movs	r3, #0
 80025aa:	73bb      	strb	r3, [r7, #14]
 80025ac:	e048      	b.n	8002640 <HAL_ADC_ConvCpltCallback+0x2e4>
 80025ae:	bf00      	nop
 80025b0:	40012000 	.word	0x40012000
 80025b4:	2000d0e2 	.word	0x2000d0e2
 80025b8:	e0001000 	.word	0xe0001000
 80025bc:	20013e00 	.word	0x20013e00
 80025c0:	20013e04 	.word	0x20013e04
 80025c4:	2000d518 	.word	0x2000d518
 80025c8:	2000d114 	.word	0x2000d114
 80025cc:	431bde83 	.word	0x431bde83
 80025d0:	2000d510 	.word	0x2000d510
 80025d4:	2000d52c 	.word	0x2000d52c
 80025d8:	2000d508 	.word	0x2000d508
 80025dc:	2001152c 	.word	0x2001152c
 80025e0:	2000d51c 	.word	0x2000d51c
 80025e4:	2000d0e4 	.word	0x2000d0e4
 80025e8:	2001352c 	.word	0x2001352c
 80025ec:	20013e08 	.word	0x20013e08
 80025f0:	2000d0fc 	.word	0x2000d0fc
 80025f4:	2000d109 	.word	0x2000d109
 80025f8:	2000d528 	.word	0x2000d528
 80025fc:	2000d520 	.word	0x2000d520
 8002600:	2000d0e0 	.word	0x2000d0e0
 8002604:	2000d514 	.word	0x2000d514
 8002608:	2000f52c 	.word	0x2000f52c
 800260c:	2001252c 	.word	0x2001252c
 8002610:	20013e0a 	.word	0x20013e0a
 8002614:	2000d0fe 	.word	0x2000d0fe
				else
					trigger = (adc1_prev > trigger1_value && adc1[adc1_length] < trigger1_value);
 8002618:	4b38      	ldr	r3, [pc, #224]	@ (80026fc <HAL_ADC_ConvCpltCallback+0x3a0>)
 800261a:	881b      	ldrh	r3, [r3, #0]
 800261c:	b29a      	uxth	r2, r3
 800261e:	4b38      	ldr	r3, [pc, #224]	@ (8002700 <HAL_ADC_ConvCpltCallback+0x3a4>)
 8002620:	881b      	ldrh	r3, [r3, #0]
 8002622:	429a      	cmp	r2, r3
 8002624:	d90a      	bls.n	800263c <HAL_ADC_ConvCpltCallback+0x2e0>
 8002626:	4b37      	ldr	r3, [pc, #220]	@ (8002704 <HAL_ADC_ConvCpltCallback+0x3a8>)
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	4a37      	ldr	r2, [pc, #220]	@ (8002708 <HAL_ADC_ConvCpltCallback+0x3ac>)
 800262c:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8002630:	4b33      	ldr	r3, [pc, #204]	@ (8002700 <HAL_ADC_ConvCpltCallback+0x3a4>)
 8002632:	881b      	ldrh	r3, [r3, #0]
 8002634:	429a      	cmp	r2, r3
 8002636:	d201      	bcs.n	800263c <HAL_ADC_ConvCpltCallback+0x2e0>
 8002638:	2301      	movs	r3, #1
 800263a:	e000      	b.n	800263e <HAL_ADC_ConvCpltCallback+0x2e2>
 800263c:	2300      	movs	r3, #0
 800263e:	73bb      	strb	r3, [r7, #14]

				if (trigger && adc1_length != 0) {
 8002640:	7bbb      	ldrb	r3, [r7, #14]
 8002642:	2b00      	cmp	r3, #0
 8002644:	d021      	beq.n	800268a <HAL_ADC_ConvCpltCallback+0x32e>
 8002646:	4b2f      	ldr	r3, [pc, #188]	@ (8002704 <HAL_ADC_ConvCpltCallback+0x3a8>)
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	2b00      	cmp	r3, #0
 800264c:	d01d      	beq.n	800268a <HAL_ADC_ConvCpltCallback+0x32e>
					if (!event_trigger1_detected) {
 800264e:	4b2f      	ldr	r3, [pc, #188]	@ (800270c <HAL_ADC_ConvCpltCallback+0x3b0>)
 8002650:	781b      	ldrb	r3, [r3, #0]
 8002652:	2b00      	cmp	r3, #0
 8002654:	d10a      	bne.n	800266c <HAL_ADC_ConvCpltCallback+0x310>
						adc1_length = 0;
 8002656:	4b2b      	ldr	r3, [pc, #172]	@ (8002704 <HAL_ADC_ConvCpltCallback+0x3a8>)
 8002658:	2200      	movs	r2, #0
 800265a:	601a      	str	r2, [r3, #0]
						adc1_time_delta = DWT->CYCCNT;
 800265c:	4b2c      	ldr	r3, [pc, #176]	@ (8002710 <HAL_ADC_ConvCpltCallback+0x3b4>)
 800265e:	685b      	ldr	r3, [r3, #4]
 8002660:	4a2c      	ldr	r2, [pc, #176]	@ (8002714 <HAL_ADC_ConvCpltCallback+0x3b8>)
 8002662:	6013      	str	r3, [r2, #0]
						event_trigger1_detected = 1;
 8002664:	4b29      	ldr	r3, [pc, #164]	@ (800270c <HAL_ADC_ConvCpltCallback+0x3b0>)
 8002666:	2201      	movs	r2, #1
 8002668:	701a      	strb	r2, [r3, #0]
 800266a:	e00e      	b.n	800268a <HAL_ADC_ConvCpltCallback+0x32e>
					} else if (!adc_period1_detected) {
 800266c:	4b2a      	ldr	r3, [pc, #168]	@ (8002718 <HAL_ADC_ConvCpltCallback+0x3bc>)
 800266e:	781b      	ldrb	r3, [r3, #0]
 8002670:	b2db      	uxtb	r3, r3
 8002672:	2b00      	cmp	r3, #0
 8002674:	d109      	bne.n	800268a <HAL_ADC_ConvCpltCallback+0x32e>
						adc_period[1] = adc1_time[adc1_length];
 8002676:	4b23      	ldr	r3, [pc, #140]	@ (8002704 <HAL_ADC_ConvCpltCallback+0x3a8>)
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	4a28      	ldr	r2, [pc, #160]	@ (800271c <HAL_ADC_ConvCpltCallback+0x3c0>)
 800267c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002680:	4a27      	ldr	r2, [pc, #156]	@ (8002720 <HAL_ADC_ConvCpltCallback+0x3c4>)
 8002682:	6053      	str	r3, [r2, #4]
						adc_period1_detected = 1;
 8002684:	4b24      	ldr	r3, [pc, #144]	@ (8002718 <HAL_ADC_ConvCpltCallback+0x3bc>)
 8002686:	2201      	movs	r2, #1
 8002688:	701a      	strb	r2, [r3, #0]
					}
				}

				adc1_prev = adc_data[1] * ADC_CHANNEL1_SCALE;
 800268a:	4b26      	ldr	r3, [pc, #152]	@ (8002724 <HAL_ADC_ConvCpltCallback+0x3c8>)
 800268c:	885b      	ldrh	r3, [r3, #2]
 800268e:	b29a      	uxth	r2, r3
 8002690:	4b1a      	ldr	r3, [pc, #104]	@ (80026fc <HAL_ADC_ConvCpltCallback+0x3a0>)
 8002692:	801a      	strh	r2, [r3, #0]
				adc1_length++;
 8002694:	4b1b      	ldr	r3, [pc, #108]	@ (8002704 <HAL_ADC_ConvCpltCallback+0x3a8>)
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	3301      	adds	r3, #1
 800269a:	4a1a      	ldr	r2, [pc, #104]	@ (8002704 <HAL_ADC_ConvCpltCallback+0x3a8>)
 800269c:	6013      	str	r3, [r2, #0]
 800269e:	e002      	b.n	80026a6 <HAL_ADC_ConvCpltCallback+0x34a>

			} else
				adc1_filled = 1;
 80026a0:	4b21      	ldr	r3, [pc, #132]	@ (8002728 <HAL_ADC_ConvCpltCallback+0x3cc>)
 80026a2:	2201      	movs	r2, #1
 80026a4:	701a      	strb	r2, [r3, #0]
    	}

		if (adc0_filled && adc1_filled) {
 80026a6:	4b21      	ldr	r3, [pc, #132]	@ (800272c <HAL_ADC_ConvCpltCallback+0x3d0>)
 80026a8:	781b      	ldrb	r3, [r3, #0]
 80026aa:	b2db      	uxtb	r3, r3
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d012      	beq.n	80026d6 <HAL_ADC_ConvCpltCallback+0x37a>
 80026b0:	4b1d      	ldr	r3, [pc, #116]	@ (8002728 <HAL_ADC_ConvCpltCallback+0x3cc>)
 80026b2:	781b      	ldrb	r3, [r3, #0]
 80026b4:	b2db      	uxtb	r3, r3
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d00d      	beq.n	80026d6 <HAL_ADC_ConvCpltCallback+0x37a>
			event_adc = 1;
 80026ba:	4b1d      	ldr	r3, [pc, #116]	@ (8002730 <HAL_ADC_ConvCpltCallback+0x3d4>)
 80026bc:	2201      	movs	r2, #1
 80026be:	701a      	strb	r2, [r3, #0]

	    	if (!adc_immediate) {
 80026c0:	4b1c      	ldr	r3, [pc, #112]	@ (8002734 <HAL_ADC_ConvCpltCallback+0x3d8>)
 80026c2:	781b      	ldrb	r3, [r3, #0]
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d114      	bne.n	80026f2 <HAL_ADC_ConvCpltCallback+0x396>
				HAL_TIM_Base_Stop_IT(&htim10);
 80026c8:	481b      	ldr	r0, [pc, #108]	@ (8002738 <HAL_ADC_ConvCpltCallback+0x3dc>)
 80026ca:	f006 f9b9 	bl	8008a40 <HAL_TIM_Base_Stop_IT>
				adc_available = 1;
 80026ce:	4b1b      	ldr	r3, [pc, #108]	@ (800273c <HAL_ADC_ConvCpltCallback+0x3e0>)
 80026d0:	2201      	movs	r2, #1
 80026d2:	701a      	strb	r2, [r3, #0]
	    	}

    		return;
 80026d4:	e00d      	b.n	80026f2 <HAL_ADC_ConvCpltCallback+0x396>
		}

		if (adc_immediate)
 80026d6:	4b17      	ldr	r3, [pc, #92]	@ (8002734 <HAL_ADC_ConvCpltCallback+0x3d8>)
 80026d8:	781b      	ldrb	r3, [r3, #0]
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d005      	beq.n	80026ea <HAL_ADC_ConvCpltCallback+0x38e>
			HAL_ADC_Start_DMA(&hadc1, (uint32_t*)&adc_data, 2);
 80026de:	2202      	movs	r2, #2
 80026e0:	4910      	ldr	r1, [pc, #64]	@ (8002724 <HAL_ADC_ConvCpltCallback+0x3c8>)
 80026e2:	4817      	ldr	r0, [pc, #92]	@ (8002740 <HAL_ADC_ConvCpltCallback+0x3e4>)
 80026e4:	f002 ff8e 	bl	8005604 <HAL_ADC_Start_DMA>
 80026e8:	e004      	b.n	80026f4 <HAL_ADC_ConvCpltCallback+0x398>
		else
			adc_available = 1;
 80026ea:	4b14      	ldr	r3, [pc, #80]	@ (800273c <HAL_ADC_ConvCpltCallback+0x3e0>)
 80026ec:	2201      	movs	r2, #1
 80026ee:	701a      	strb	r2, [r3, #0]
 80026f0:	e000      	b.n	80026f4 <HAL_ADC_ConvCpltCallback+0x398>
    		return;
 80026f2:	bf00      	nop
    }
}
 80026f4:	3710      	adds	r7, #16
 80026f6:	46bd      	mov	sp, r7
 80026f8:	bd80      	pop	{r7, pc}
 80026fa:	bf00      	nop
 80026fc:	20013e0a 	.word	0x20013e0a
 8002700:	2000d0fe 	.word	0x2000d0fe
 8002704:	2000d514 	.word	0x2000d514
 8002708:	2001252c 	.word	0x2001252c
 800270c:	2000d10a 	.word	0x2000d10a
 8002710:	e0001000 	.word	0xe0001000
 8002714:	20013e04 	.word	0x20013e04
 8002718:	2000d529 	.word	0x2000d529
 800271c:	2000f52c 	.word	0x2000f52c
 8002720:	2000d520 	.word	0x2000d520
 8002724:	2000d508 	.word	0x2000d508
 8002728:	2000d0e0 	.word	0x2000d0e0
 800272c:	2000d518 	.word	0x2000d518
 8002730:	2001352d 	.word	0x2001352d
 8002734:	2000d0e8 	.word	0x2000d0e8
 8002738:	20013fe0 	.word	0x20013fe0
 800273c:	2000d0e1 	.word	0x2000d0e1
 8002740:	2000d318 	.word	0x2000d318

08002744 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002744:	b580      	push	{r7, lr}
 8002746:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002748:	f002 fe82 	bl	8005450 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800274c:	f000 f886 	bl	800285c <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8002750:	f000 f8ec 	bl	800292c <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002754:	f7fe fe66 	bl	8001424 <MX_GPIO_Init>
  MX_DMA_Init();
 8002758:	f7fe fe2e 	bl	80013b8 <MX_DMA_Init>
  MX_USART2_UART_Init();
 800275c:	f002 fd74 	bl	8005248 <MX_USART2_UART_Init>
  MX_I2S2_Init();
 8002760:	f7fe ff00 	bl	8001564 <MX_I2S2_Init>
  MX_USART6_UART_Init();
 8002764:	f002 fd9a 	bl	800529c <MX_USART6_UART_Init>
  MX_CRC_Init();
 8002768:	f7fe fdf0 	bl	800134c <MX_CRC_Init>
  MX_I2S3_Init();
 800276c:	f7fe ff28 	bl	80015c0 <MX_I2S3_Init>
  MX_TIM2_Init();
 8002770:	f002 fb3a 	bl	8004de8 <MX_TIM2_Init>
  MX_SPI5_Init();
 8002774:	f002 f8b6 	bl	80048e4 <MX_SPI5_Init>
  MX_TIM1_Init();
 8002778:	f002 fa94 	bl	8004ca4 <MX_TIM1_Init>
  MX_ADC1_Init();
 800277c:	f7fe fcd8 	bl	8001130 <MX_ADC1_Init>
  MX_FATFS_Init();
 8002780:	f008 f9f0 	bl	800ab64 <MX_FATFS_Init>
  MX_SPI4_Init();
 8002784:	f002 f878 	bl	8004878 <MX_SPI4_Init>
  MX_TIM10_Init();
 8002788:	f002 fc22 	bl	8004fd0 <MX_TIM10_Init>
  MX_TIM3_Init();
 800278c:	f002 fb78 	bl	8004e80 <MX_TIM3_Init>
  MX_TIM4_Init();
 8002790:	f002 fbca 	bl	8004f28 <MX_TIM4_Init>
  {
      Error_Handler();
  }
#endif

  if (HAL_UART_Receive_IT(&huart6, &rx_byte, 1) != HAL_OK)
 8002794:	2201      	movs	r2, #1
 8002796:	4923      	ldr	r1, [pc, #140]	@ (8002824 <main+0xe0>)
 8002798:	4823      	ldr	r0, [pc, #140]	@ (8002828 <main+0xe4>)
 800279a:	f007 fa52 	bl	8009c42 <HAL_UART_Receive_IT>
 800279e:	4603      	mov	r3, r0
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d001      	beq.n	80027a8 <main+0x64>
  {
      Error_Handler();
 80027a4:	f000 f8e2 	bl	800296c <Error_Handler>
  }

  printf("AI Model Application Started...\r\n");
 80027a8:	4820      	ldr	r0, [pc, #128]	@ (800282c <main+0xe8>)
 80027aa:	f009 fa2d 	bl	800bc08 <puts>


  txIndex = 0;
 80027ae:	4b20      	ldr	r3, [pc, #128]	@ (8002830 <main+0xec>)
 80027b0:	2200      	movs	r2, #0
 80027b2:	601a      	str	r2, [r3, #0]

  // For DWT->CYCCNT ...
  SCB_DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 80027b4:	4b1f      	ldr	r3, [pc, #124]	@ (8002834 <main+0xf0>)
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	4a1e      	ldr	r2, [pc, #120]	@ (8002834 <main+0xf0>)
 80027ba:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80027be:	6013      	str	r3, [r2, #0]
  DWT_CONTROL |= DWT_CTRL_CYCCNTENA_Msk;
 80027c0:	4b1d      	ldr	r3, [pc, #116]	@ (8002838 <main+0xf4>)
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	4a1c      	ldr	r2, [pc, #112]	@ (8002838 <main+0xf4>)
 80027c6:	f043 0301 	orr.w	r3, r3, #1
 80027ca:	6013      	str	r3, [r2, #0]

  adc_reset_cyccnt = 1;
 80027cc:	4b1b      	ldr	r3, [pc, #108]	@ (800283c <main+0xf8>)
 80027ce:	2201      	movs	r2, #1
 80027d0:	701a      	strb	r2, [r3, #0]
  if (adc_immediate) {
 80027d2:	4b1b      	ldr	r3, [pc, #108]	@ (8002840 <main+0xfc>)
 80027d4:	781b      	ldrb	r3, [r3, #0]
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d005      	beq.n	80027e6 <main+0xa2>
	  // The ADC starts immediately after the previous measurement is handled
	  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)&adc_data, 2);
 80027da:	2202      	movs	r2, #2
 80027dc:	4919      	ldr	r1, [pc, #100]	@ (8002844 <main+0x100>)
 80027de:	481a      	ldr	r0, [pc, #104]	@ (8002848 <main+0x104>)
 80027e0:	f002 ff10 	bl	8005604 <HAL_ADC_Start_DMA>
 80027e4:	e002      	b.n	80027ec <main+0xa8>
  } else {
	  // ADC starts by timer
	  HAL_TIM_Base_Start_IT(&htim10);
 80027e6:	4819      	ldr	r0, [pc, #100]	@ (800284c <main+0x108>)
 80027e8:	f006 f8c8 	bl	800897c <HAL_TIM_Base_Start_IT>
  }

  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80027ec:	2100      	movs	r1, #0
 80027ee:	4818      	ldr	r0, [pc, #96]	@ (8002850 <main+0x10c>)
 80027f0:	f006 f9ae 	bl	8008b50 <HAL_TIM_PWM_Start>

  InitOscState();
 80027f4:	f000 f8c0 	bl	8002978 <InitOscState>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
  {
	 if(HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin) == GPIO_PIN_RESET)
 80027f8:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80027fc:	4815      	ldr	r0, [pc, #84]	@ (8002854 <main+0x110>)
 80027fe:	f004 f9c7 	bl	8006b90 <HAL_GPIO_ReadPin>
 8002802:	4603      	mov	r3, r0
 8002804:	2b00      	cmp	r3, #0
 8002806:	d103      	bne.n	8002810 <main+0xcc>
	 {

		  HAL_TIM_Base_Start_IT(&htim2);
 8002808:	4813      	ldr	r0, [pc, #76]	@ (8002858 <main+0x114>)
 800280a:	f006 f8b7 	bl	800897c <HAL_TIM_Base_Start_IT>
 800280e:	e005      	b.n	800281c <main+0xd8>
	 }
	 else
	 {
		  txIndex = 0;
 8002810:	4b07      	ldr	r3, [pc, #28]	@ (8002830 <main+0xec>)
 8002812:	2200      	movs	r2, #0
 8002814:	601a      	str	r2, [r3, #0]
		  HAL_TIM_Base_Stop_IT(&htim2);
 8002816:	4810      	ldr	r0, [pc, #64]	@ (8002858 <main+0x114>)
 8002818:	f006 f912 	bl	8008a40 <HAL_TIM_Base_Stop_IT>
	 }

	 Oscilloscope_Process();
 800281c:	f000 ffe8 	bl	80037f0 <Oscilloscope_Process>
	 if(HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin) == GPIO_PIN_RESET)
 8002820:	e7ea      	b.n	80027f8 <main+0xb4>
 8002822:	bf00      	nop
 8002824:	2000d4fe 	.word	0x2000d4fe
 8002828:	20014070 	.word	0x20014070
 800282c:	0800f528 	.word	0x0800f528
 8002830:	2000d504 	.word	0x2000d504
 8002834:	e000edfc 	.word	0xe000edfc
 8002838:	e0001000 	.word	0xe0001000
 800283c:	2000d0e2 	.word	0x2000d0e2
 8002840:	2000d0e8 	.word	0x2000d0e8
 8002844:	2000d508 	.word	0x2000d508
 8002848:	2000d318 	.word	0x2000d318
 800284c:	20013fe0 	.word	0x20013fe0
 8002850:	20013ec0 	.word	0x20013ec0
 8002854:	40020800 	.word	0x40020800
 8002858:	20013f08 	.word	0x20013f08

0800285c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800285c:	b580      	push	{r7, lr}
 800285e:	b094      	sub	sp, #80	@ 0x50
 8002860:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002862:	f107 0320 	add.w	r3, r7, #32
 8002866:	2230      	movs	r2, #48	@ 0x30
 8002868:	2100      	movs	r1, #0
 800286a:	4618      	mov	r0, r3
 800286c:	f009 fb04 	bl	800be78 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002870:	f107 030c 	add.w	r3, r7, #12
 8002874:	2200      	movs	r2, #0
 8002876:	601a      	str	r2, [r3, #0]
 8002878:	605a      	str	r2, [r3, #4]
 800287a:	609a      	str	r2, [r3, #8]
 800287c:	60da      	str	r2, [r3, #12]
 800287e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002880:	2300      	movs	r3, #0
 8002882:	60bb      	str	r3, [r7, #8]
 8002884:	4b27      	ldr	r3, [pc, #156]	@ (8002924 <SystemClock_Config+0xc8>)
 8002886:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002888:	4a26      	ldr	r2, [pc, #152]	@ (8002924 <SystemClock_Config+0xc8>)
 800288a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800288e:	6413      	str	r3, [r2, #64]	@ 0x40
 8002890:	4b24      	ldr	r3, [pc, #144]	@ (8002924 <SystemClock_Config+0xc8>)
 8002892:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002894:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002898:	60bb      	str	r3, [r7, #8]
 800289a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800289c:	2300      	movs	r3, #0
 800289e:	607b      	str	r3, [r7, #4]
 80028a0:	4b21      	ldr	r3, [pc, #132]	@ (8002928 <SystemClock_Config+0xcc>)
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	4a20      	ldr	r2, [pc, #128]	@ (8002928 <SystemClock_Config+0xcc>)
 80028a6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80028aa:	6013      	str	r3, [r2, #0]
 80028ac:	4b1e      	ldr	r3, [pc, #120]	@ (8002928 <SystemClock_Config+0xcc>)
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80028b4:	607b      	str	r3, [r7, #4]
 80028b6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80028b8:	2302      	movs	r3, #2
 80028ba:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80028bc:	2301      	movs	r3, #1
 80028be:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80028c0:	2310      	movs	r3, #16
 80028c2:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80028c4:	2302      	movs	r3, #2
 80028c6:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80028c8:	2300      	movs	r3, #0
 80028ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80028cc:	2308      	movs	r3, #8
 80028ce:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 80028d0:	2364      	movs	r3, #100	@ 0x64
 80028d2:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80028d4:	2302      	movs	r3, #2
 80028d6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80028d8:	2307      	movs	r3, #7
 80028da:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80028dc:	f107 0320 	add.w	r3, r7, #32
 80028e0:	4618      	mov	r0, r3
 80028e2:	f004 ff67 	bl	80077b4 <HAL_RCC_OscConfig>
 80028e6:	4603      	mov	r3, r0
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d001      	beq.n	80028f0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80028ec:	f000 f83e 	bl	800296c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80028f0:	230f      	movs	r3, #15
 80028f2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80028f4:	2302      	movs	r3, #2
 80028f6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80028f8:	2300      	movs	r3, #0
 80028fa:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80028fc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002900:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002902:	2300      	movs	r3, #0
 8002904:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8002906:	f107 030c 	add.w	r3, r7, #12
 800290a:	2103      	movs	r1, #3
 800290c:	4618      	mov	r0, r3
 800290e:	f005 f9c9 	bl	8007ca4 <HAL_RCC_ClockConfig>
 8002912:	4603      	mov	r3, r0
 8002914:	2b00      	cmp	r3, #0
 8002916:	d001      	beq.n	800291c <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8002918:	f000 f828 	bl	800296c <Error_Handler>
  }
}
 800291c:	bf00      	nop
 800291e:	3750      	adds	r7, #80	@ 0x50
 8002920:	46bd      	mov	sp, r7
 8002922:	bd80      	pop	{r7, pc}
 8002924:	40023800 	.word	0x40023800
 8002928:	40007000 	.word	0x40007000

0800292c <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 800292c:	b580      	push	{r7, lr}
 800292e:	b086      	sub	sp, #24
 8002930:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002932:	463b      	mov	r3, r7
 8002934:	2200      	movs	r2, #0
 8002936:	601a      	str	r2, [r3, #0]
 8002938:	605a      	str	r2, [r3, #4]
 800293a:	609a      	str	r2, [r3, #8]
 800293c:	60da      	str	r2, [r3, #12]
 800293e:	611a      	str	r2, [r3, #16]
 8002940:	615a      	str	r2, [r3, #20]

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8002942:	2301      	movs	r3, #1
 8002944:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8002946:	23c0      	movs	r3, #192	@ 0xc0
 8002948:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLLI2S.PLLI2SM = 16;
 800294a:	2310      	movs	r3, #16
 800294c:	607b      	str	r3, [r7, #4]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 800294e:	2302      	movs	r3, #2
 8002950:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002952:	463b      	mov	r3, r7
 8002954:	4618      	mov	r0, r3
 8002956:	f005 fbc5 	bl	80080e4 <HAL_RCCEx_PeriphCLKConfig>
 800295a:	4603      	mov	r3, r0
 800295c:	2b00      	cmp	r3, #0
 800295e:	d001      	beq.n	8002964 <PeriphCommonClock_Config+0x38>
  {
    Error_Handler();
 8002960:	f000 f804 	bl	800296c <Error_Handler>
  }
}
 8002964:	bf00      	nop
 8002966:	3718      	adds	r7, #24
 8002968:	46bd      	mov	sp, r7
 800296a:	bd80      	pop	{r7, pc}

0800296c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800296c:	b480      	push	{r7}
 800296e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002970:	b672      	cpsid	i
}
 8002972:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002974:	bf00      	nop
 8002976:	e7fd      	b.n	8002974 <Error_Handler+0x8>

08002978 <InitOscState>:
extern TIM_HandleTypeDef htim3;
extern TIM_HandleTypeDef htim4;
extern TIM_HandleTypeDef htim10;

void InitOscState(void)
{
 8002978:	b580      	push	{r7, lr}
 800297a:	b0c6      	sub	sp, #280	@ 0x118
 800297c:	af04      	add	r7, sp, #16

	  frames_ticks = HAL_GetTick();
 800297e:	f002 fdcd 	bl	800551c <HAL_GetTick>
 8002982:	4603      	mov	r3, r0
 8002984:	4a73      	ldr	r2, [pc, #460]	@ (8002b54 <InitOscState+0x1dc>)
 8002986:	6013      	str	r3, [r2, #0]

	  for (uint16_t i = 0; i < 280; i++) {
 8002988:	2300      	movs	r3, #0
 800298a:	f8a7 3106 	strh.w	r3, [r7, #262]	@ 0x106
 800298e:	e01e      	b.n	80029ce <InitOscState+0x56>
		  pixel_dirty0[i][0] = 0;
 8002990:	f8b7 3106 	ldrh.w	r3, [r7, #262]	@ 0x106
 8002994:	4a70      	ldr	r2, [pc, #448]	@ (8002b58 <InitOscState+0x1e0>)
 8002996:	2100      	movs	r1, #0
 8002998:	f822 1023 	strh.w	r1, [r2, r3, lsl #2]
		  pixel_dirty0[i][1] = 0;
 800299c:	f8b7 3106 	ldrh.w	r3, [r7, #262]	@ 0x106
 80029a0:	4a6d      	ldr	r2, [pc, #436]	@ (8002b58 <InitOscState+0x1e0>)
 80029a2:	009b      	lsls	r3, r3, #2
 80029a4:	4413      	add	r3, r2
 80029a6:	2200      	movs	r2, #0
 80029a8:	805a      	strh	r2, [r3, #2]
		  pixel_dirty1[i][0] = 0;
 80029aa:	f8b7 3106 	ldrh.w	r3, [r7, #262]	@ 0x106
 80029ae:	4a6b      	ldr	r2, [pc, #428]	@ (8002b5c <InitOscState+0x1e4>)
 80029b0:	2100      	movs	r1, #0
 80029b2:	f822 1023 	strh.w	r1, [r2, r3, lsl #2]
		  pixel_dirty1[i][1] = 0;
 80029b6:	f8b7 3106 	ldrh.w	r3, [r7, #262]	@ 0x106
 80029ba:	4a68      	ldr	r2, [pc, #416]	@ (8002b5c <InitOscState+0x1e4>)
 80029bc:	009b      	lsls	r3, r3, #2
 80029be:	4413      	add	r3, r2
 80029c0:	2200      	movs	r2, #0
 80029c2:	805a      	strh	r2, [r3, #2]
	  for (uint16_t i = 0; i < 280; i++) {
 80029c4:	f8b7 3106 	ldrh.w	r3, [r7, #262]	@ 0x106
 80029c8:	3301      	adds	r3, #1
 80029ca:	f8a7 3106 	strh.w	r3, [r7, #262]	@ 0x106
 80029ce:	f8b7 3106 	ldrh.w	r3, [r7, #262]	@ 0x106
 80029d2:	f5b3 7f8c 	cmp.w	r3, #280	@ 0x118
 80029d6:	d3db      	bcc.n	8002990 <InitOscState+0x18>
	  }

	  // Display init
	   display.spi             = &hspi5;
 80029d8:	4b61      	ldr	r3, [pc, #388]	@ (8002b60 <InitOscState+0x1e8>)
 80029da:	4a62      	ldr	r2, [pc, #392]	@ (8002b64 <InitOscState+0x1ec>)
 80029dc:	601a      	str	r2, [r3, #0]
	   display.cs_gpio_port    = ILI9341_CS_GPIO_Port;
 80029de:	4b60      	ldr	r3, [pc, #384]	@ (8002b60 <InitOscState+0x1e8>)
 80029e0:	4a61      	ldr	r2, [pc, #388]	@ (8002b68 <InitOscState+0x1f0>)
 80029e2:	605a      	str	r2, [r3, #4]
	   display.dc_gpio_port    = ILI9341_DC_GPIO_Port;
 80029e4:	4b5e      	ldr	r3, [pc, #376]	@ (8002b60 <InitOscState+0x1e8>)
 80029e6:	4a61      	ldr	r2, [pc, #388]	@ (8002b6c <InitOscState+0x1f4>)
 80029e8:	609a      	str	r2, [r3, #8]
	   display.reset_gpio_port = ILI9341_RESET_GPIO_Port;
 80029ea:	4b5d      	ldr	r3, [pc, #372]	@ (8002b60 <InitOscState+0x1e8>)
 80029ec:	4a5f      	ldr	r2, [pc, #380]	@ (8002b6c <InitOscState+0x1f4>)
 80029ee:	60da      	str	r2, [r3, #12]
	   display.cs_pin          = ILI9341_CS_Pin;
 80029f0:	4b5b      	ldr	r3, [pc, #364]	@ (8002b60 <InitOscState+0x1e8>)
 80029f2:	2202      	movs	r2, #2
 80029f4:	821a      	strh	r2, [r3, #16]
	   display.dc_pin          = ILI9341_DC_Pin;
 80029f6:	4b5a      	ldr	r3, [pc, #360]	@ (8002b60 <InitOscState+0x1e8>)
 80029f8:	2201      	movs	r2, #1
 80029fa:	825a      	strh	r2, [r3, #18]
	   display.reset_pin       = ILI9341_RESET_Pin;
 80029fc:	4b58      	ldr	r3, [pc, #352]	@ (8002b60 <InitOscState+0x1e8>)
 80029fe:	2202      	movs	r2, #2
 8002a00:	829a      	strh	r2, [r3, #20]
	   display.width           = 320;
 8002a02:	4b57      	ldr	r3, [pc, #348]	@ (8002b60 <InitOscState+0x1e8>)
 8002a04:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8002a08:	82da      	strh	r2, [r3, #22]
	   display.height          = 240;
 8002a0a:	4b55      	ldr	r3, [pc, #340]	@ (8002b60 <InitOscState+0x1e8>)
 8002a0c:	22f0      	movs	r2, #240	@ 0xf0
 8002a0e:	831a      	strh	r2, [r3, #24]
	   display.orientation     = ILI9341_ORIENTATION_ROTATE_RIGHT;
 8002a10:	4b53      	ldr	r3, [pc, #332]	@ (8002b60 <InitOscState+0x1e8>)
 8002a12:	22e8      	movs	r2, #232	@ 0xe8
 8002a14:	769a      	strb	r2, [r3, #26]

	   ILI9341_UNSELECT(&display);
 8002a16:	4b52      	ldr	r3, [pc, #328]	@ (8002b60 <InitOscState+0x1e8>)
 8002a18:	8a1a      	ldrh	r2, [r3, #16]
 8002a1a:	4b51      	ldr	r3, [pc, #324]	@ (8002b60 <InitOscState+0x1e8>)
 8002a1c:	685b      	ldr	r3, [r3, #4]
 8002a1e:	619a      	str	r2, [r3, #24]
	   ILI9341_Init(&display);
 8002a20:	484f      	ldr	r0, [pc, #316]	@ (8002b60 <InitOscState+0x1e8>)
 8002a22:	f7fe ffb3 	bl	800198c <ILI9341_Init>

		  // Local vars
		  char string[255];

	  // Dispaly freq. (for debug)
	  ILI9341_FillScreen(&display, ILI9341_BLACK);
 8002a26:	2100      	movs	r1, #0
 8002a28:	484d      	ldr	r0, [pc, #308]	@ (8002b60 <InitOscState+0x1e8>)
 8002a2a:	f7ff f9fc 	bl	8001e26 <ILI9341_FillScreen>

	  snprintf(string, 255, "Oscilloscope");
 8002a2e:	1d3b      	adds	r3, r7, #4
 8002a30:	4a4f      	ldr	r2, [pc, #316]	@ (8002b70 <InitOscState+0x1f8>)
 8002a32:	21ff      	movs	r1, #255	@ 0xff
 8002a34:	4618      	mov	r0, r3
 8002a36:	f009 f8ef 	bl	800bc18 <sniprintf>
	  ILI9341_WriteString(&display, 0, 18 * 0, string, Font_11x18, ILI9341_BLACK, ILI9341_WHITE);
 8002a3a:	1d3b      	adds	r3, r7, #4
 8002a3c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002a40:	9203      	str	r2, [sp, #12]
 8002a42:	2200      	movs	r2, #0
 8002a44:	9202      	str	r2, [sp, #8]
 8002a46:	494b      	ldr	r1, [pc, #300]	@ (8002b74 <InitOscState+0x1fc>)
 8002a48:	466a      	mov	r2, sp
 8002a4a:	c903      	ldmia	r1, {r0, r1}
 8002a4c:	e882 0003 	stmia.w	r2, {r0, r1}
 8002a50:	2200      	movs	r2, #0
 8002a52:	2100      	movs	r1, #0
 8002a54:	4842      	ldr	r0, [pc, #264]	@ (8002b60 <InitOscState+0x1e8>)
 8002a56:	f7ff fb30 	bl	80020ba <ILI9341_WriteString>

	  snprintf(string, 255, "SYCLK = %ldMHz", HAL_RCC_GetSysClockFreq()/1000000);
 8002a5a:	f005 fa09 	bl	8007e70 <HAL_RCC_GetSysClockFreq>
 8002a5e:	4603      	mov	r3, r0
 8002a60:	4a45      	ldr	r2, [pc, #276]	@ (8002b78 <InitOscState+0x200>)
 8002a62:	fba2 2303 	umull	r2, r3, r2, r3
 8002a66:	0c9b      	lsrs	r3, r3, #18
 8002a68:	1d38      	adds	r0, r7, #4
 8002a6a:	4a44      	ldr	r2, [pc, #272]	@ (8002b7c <InitOscState+0x204>)
 8002a6c:	21ff      	movs	r1, #255	@ 0xff
 8002a6e:	f009 f8d3 	bl	800bc18 <sniprintf>
	  ILI9341_WriteString(&display, 0, 18 * 1, string, Font_11x18, ILI9341_BLACK, ILI9341_WHITE);
 8002a72:	1d3b      	adds	r3, r7, #4
 8002a74:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002a78:	9203      	str	r2, [sp, #12]
 8002a7a:	2200      	movs	r2, #0
 8002a7c:	9202      	str	r2, [sp, #8]
 8002a7e:	493d      	ldr	r1, [pc, #244]	@ (8002b74 <InitOscState+0x1fc>)
 8002a80:	466a      	mov	r2, sp
 8002a82:	c903      	ldmia	r1, {r0, r1}
 8002a84:	e882 0003 	stmia.w	r2, {r0, r1}
 8002a88:	2212      	movs	r2, #18
 8002a8a:	2100      	movs	r1, #0
 8002a8c:	4834      	ldr	r0, [pc, #208]	@ (8002b60 <InitOscState+0x1e8>)
 8002a8e:	f7ff fb14 	bl	80020ba <ILI9341_WriteString>

	  snprintf(string, 255, "HCLK  = %ldMHz", HAL_RCC_GetHCLKFreq()/1000000);
 8002a92:	f005 faf3 	bl	800807c <HAL_RCC_GetHCLKFreq>
 8002a96:	4603      	mov	r3, r0
 8002a98:	4a37      	ldr	r2, [pc, #220]	@ (8002b78 <InitOscState+0x200>)
 8002a9a:	fba2 2303 	umull	r2, r3, r2, r3
 8002a9e:	0c9b      	lsrs	r3, r3, #18
 8002aa0:	1d38      	adds	r0, r7, #4
 8002aa2:	4a37      	ldr	r2, [pc, #220]	@ (8002b80 <InitOscState+0x208>)
 8002aa4:	21ff      	movs	r1, #255	@ 0xff
 8002aa6:	f009 f8b7 	bl	800bc18 <sniprintf>
	  ILI9341_WriteString(&display, 0, 18 * 2, string, Font_11x18, ILI9341_BLACK, ILI9341_WHITE);
 8002aaa:	1d3b      	adds	r3, r7, #4
 8002aac:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002ab0:	9203      	str	r2, [sp, #12]
 8002ab2:	2200      	movs	r2, #0
 8002ab4:	9202      	str	r2, [sp, #8]
 8002ab6:	492f      	ldr	r1, [pc, #188]	@ (8002b74 <InitOscState+0x1fc>)
 8002ab8:	466a      	mov	r2, sp
 8002aba:	c903      	ldmia	r1, {r0, r1}
 8002abc:	e882 0003 	stmia.w	r2, {r0, r1}
 8002ac0:	2224      	movs	r2, #36	@ 0x24
 8002ac2:	2100      	movs	r1, #0
 8002ac4:	4826      	ldr	r0, [pc, #152]	@ (8002b60 <InitOscState+0x1e8>)
 8002ac6:	f7ff faf8 	bl	80020ba <ILI9341_WriteString>

	  snprintf(string, 255, "APB1  = %ldMHz", HAL_RCC_GetPCLK1Freq()/1000000);
 8002aca:	f005 fae3 	bl	8008094 <HAL_RCC_GetPCLK1Freq>
 8002ace:	4603      	mov	r3, r0
 8002ad0:	4a29      	ldr	r2, [pc, #164]	@ (8002b78 <InitOscState+0x200>)
 8002ad2:	fba2 2303 	umull	r2, r3, r2, r3
 8002ad6:	0c9b      	lsrs	r3, r3, #18
 8002ad8:	1d38      	adds	r0, r7, #4
 8002ada:	4a2a      	ldr	r2, [pc, #168]	@ (8002b84 <InitOscState+0x20c>)
 8002adc:	21ff      	movs	r1, #255	@ 0xff
 8002ade:	f009 f89b 	bl	800bc18 <sniprintf>
	  ILI9341_WriteString(&display, 0, 18 * 3, string, Font_11x18, ILI9341_BLACK, ILI9341_WHITE);
 8002ae2:	1d3b      	adds	r3, r7, #4
 8002ae4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002ae8:	9203      	str	r2, [sp, #12]
 8002aea:	2200      	movs	r2, #0
 8002aec:	9202      	str	r2, [sp, #8]
 8002aee:	4921      	ldr	r1, [pc, #132]	@ (8002b74 <InitOscState+0x1fc>)
 8002af0:	466a      	mov	r2, sp
 8002af2:	c903      	ldmia	r1, {r0, r1}
 8002af4:	e882 0003 	stmia.w	r2, {r0, r1}
 8002af8:	2236      	movs	r2, #54	@ 0x36
 8002afa:	2100      	movs	r1, #0
 8002afc:	4818      	ldr	r0, [pc, #96]	@ (8002b60 <InitOscState+0x1e8>)
 8002afe:	f7ff fadc 	bl	80020ba <ILI9341_WriteString>

	  snprintf(string, 255, "APB2  = %ldMHz", HAL_RCC_GetPCLK2Freq()/1000000);
 8002b02:	f005 fadb 	bl	80080bc <HAL_RCC_GetPCLK2Freq>
 8002b06:	4603      	mov	r3, r0
 8002b08:	4a1b      	ldr	r2, [pc, #108]	@ (8002b78 <InitOscState+0x200>)
 8002b0a:	fba2 2303 	umull	r2, r3, r2, r3
 8002b0e:	0c9b      	lsrs	r3, r3, #18
 8002b10:	1d38      	adds	r0, r7, #4
 8002b12:	4a1d      	ldr	r2, [pc, #116]	@ (8002b88 <InitOscState+0x210>)
 8002b14:	21ff      	movs	r1, #255	@ 0xff
 8002b16:	f009 f87f 	bl	800bc18 <sniprintf>
	  ILI9341_WriteString(&display, 0, 18 * 4, string, Font_11x18, ILI9341_BLACK, ILI9341_WHITE);
 8002b1a:	1d3b      	adds	r3, r7, #4
 8002b1c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002b20:	9203      	str	r2, [sp, #12]
 8002b22:	2200      	movs	r2, #0
 8002b24:	9202      	str	r2, [sp, #8]
 8002b26:	4913      	ldr	r1, [pc, #76]	@ (8002b74 <InitOscState+0x1fc>)
 8002b28:	466a      	mov	r2, sp
 8002b2a:	c903      	ldmia	r1, {r0, r1}
 8002b2c:	e882 0003 	stmia.w	r2, {r0, r1}
 8002b30:	2248      	movs	r2, #72	@ 0x48
 8002b32:	2100      	movs	r1, #0
 8002b34:	480a      	ldr	r0, [pc, #40]	@ (8002b60 <InitOscState+0x1e8>)
 8002b36:	f7ff fac0 	bl	80020ba <ILI9341_WriteString>

	  HAL_Delay(1000);
 8002b3a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002b3e:	f002 fcf9 	bl	8005534 <HAL_Delay>
	  ILI9341_FillScreen(&display, ILI9341_BLACK);
 8002b42:	2100      	movs	r1, #0
 8002b44:	4806      	ldr	r0, [pc, #24]	@ (8002b60 <InitOscState+0x1e8>)
 8002b46:	f7ff f96e 	bl	8001e26 <ILI9341_FillScreen>
}
 8002b4a:	bf00      	nop
 8002b4c:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 8002b50:	46bd      	mov	sp, r7
 8002b52:	bd80      	pop	{r7, pc}
 8002b54:	2001353c 	.word	0x2001353c
 8002b58:	20013540 	.word	0x20013540
 8002b5c:	200139a0 	.word	0x200139a0
 8002b60:	2000d4b8 	.word	0x2000d4b8
 8002b64:	20013e64 	.word	0x20013e64
 8002b68:	40020400 	.word	0x40020400
 8002b6c:	40020800 	.word	0x40020800
 8002b70:	0800f54c 	.word	0x0800f54c
 8002b74:	20000008 	.word	0x20000008
 8002b78:	431bde83 	.word	0x431bde83
 8002b7c:	0800f55c 	.word	0x0800f55c
 8002b80:	0800f56c 	.word	0x0800f56c
 8002b84:	0800f57c 	.word	0x0800f57c
 8002b88:	0800f58c 	.word	0x0800f58c

08002b8c <drawAxis>:


static void drawAxis(ILI9341TypeDef *display)
{
 8002b8c:	b580      	push	{r7, lr}
 8002b8e:	b088      	sub	sp, #32
 8002b90:	af02      	add	r7, sp, #8
 8002b92:	6078      	str	r0, [r7, #4]
	for (uint16_t i = 0; i < 9; i++) {
 8002b94:	2300      	movs	r3, #0
 8002b96:	82fb      	strh	r3, [r7, #22]
 8002b98:	e034      	b.n	8002c04 <drawAxis+0x78>
		uint16_t y = 20 + 25 * i;
 8002b9a:	8afb      	ldrh	r3, [r7, #22]
 8002b9c:	461a      	mov	r2, r3
 8002b9e:	0092      	lsls	r2, r2, #2
 8002ba0:	4413      	add	r3, r2
 8002ba2:	461a      	mov	r2, r3
 8002ba4:	0091      	lsls	r1, r2, #2
 8002ba6:	461a      	mov	r2, r3
 8002ba8:	460b      	mov	r3, r1
 8002baa:	4413      	add	r3, r2
 8002bac:	b29b      	uxth	r3, r3
 8002bae:	3314      	adds	r3, #20
 8002bb0:	81bb      	strh	r3, [r7, #12]

		if (i == 0 || i == 8) {
 8002bb2:	8afb      	ldrh	r3, [r7, #22]
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d002      	beq.n	8002bbe <drawAxis+0x32>
 8002bb8:	8afb      	ldrh	r3, [r7, #22]
 8002bba:	2b08      	cmp	r3, #8
 8002bbc:	d10c      	bne.n	8002bd8 <drawAxis+0x4c>
			ILI9341_FillRectangle(display, 20, y, 276, 1, ILI9341_WHITE);
 8002bbe:	89ba      	ldrh	r2, [r7, #12]
 8002bc0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002bc4:	9301      	str	r3, [sp, #4]
 8002bc6:	2301      	movs	r3, #1
 8002bc8:	9300      	str	r3, [sp, #0]
 8002bca:	f44f 738a 	mov.w	r3, #276	@ 0x114
 8002bce:	2114      	movs	r1, #20
 8002bd0:	6878      	ldr	r0, [r7, #4]
 8002bd2:	f7ff f95a 	bl	8001e8a <ILI9341_FillRectangle>
			continue;
 8002bd6:	e012      	b.n	8002bfe <drawAxis+0x72>
		}

		for (uint16_t j = 0; j < 276; j += 2)
 8002bd8:	2300      	movs	r3, #0
 8002bda:	82bb      	strh	r3, [r7, #20]
 8002bdc:	e00b      	b.n	8002bf6 <drawAxis+0x6a>
			ILI9341_DrawPixel(display, 20 + j, y, ILI9341_GRAY);
 8002bde:	8abb      	ldrh	r3, [r7, #20]
 8002be0:	3314      	adds	r3, #20
 8002be2:	b299      	uxth	r1, r3
 8002be4:	89ba      	ldrh	r2, [r7, #12]
 8002be6:	f245 238a 	movw	r3, #21130	@ 0x528a
 8002bea:	6878      	ldr	r0, [r7, #4]
 8002bec:	f7ff f842 	bl	8001c74 <ILI9341_DrawPixel>
		for (uint16_t j = 0; j < 276; j += 2)
 8002bf0:	8abb      	ldrh	r3, [r7, #20]
 8002bf2:	3302      	adds	r3, #2
 8002bf4:	82bb      	strh	r3, [r7, #20]
 8002bf6:	8abb      	ldrh	r3, [r7, #20]
 8002bf8:	f5b3 7f8a 	cmp.w	r3, #276	@ 0x114
 8002bfc:	d3ef      	bcc.n	8002bde <drawAxis+0x52>
	for (uint16_t i = 0; i < 9; i++) {
 8002bfe:	8afb      	ldrh	r3, [r7, #22]
 8002c00:	3301      	adds	r3, #1
 8002c02:	82fb      	strh	r3, [r7, #22]
 8002c04:	8afb      	ldrh	r3, [r7, #22]
 8002c06:	2b08      	cmp	r3, #8
 8002c08:	d9c7      	bls.n	8002b9a <drawAxis+0xe>
	}

	for (uint16_t i = 0; i < 12; i++) {
 8002c0a:	2300      	movs	r3, #0
 8002c0c:	827b      	strh	r3, [r7, #18]
 8002c0e:	e032      	b.n	8002c76 <drawAxis+0xea>
		uint16_t x = 20 + 25 * i;
 8002c10:	8a7b      	ldrh	r3, [r7, #18]
 8002c12:	461a      	mov	r2, r3
 8002c14:	0092      	lsls	r2, r2, #2
 8002c16:	4413      	add	r3, r2
 8002c18:	461a      	mov	r2, r3
 8002c1a:	0091      	lsls	r1, r2, #2
 8002c1c:	461a      	mov	r2, r3
 8002c1e:	460b      	mov	r3, r1
 8002c20:	4413      	add	r3, r2
 8002c22:	b29b      	uxth	r3, r3
 8002c24:	3314      	adds	r3, #20
 8002c26:	81fb      	strh	r3, [r7, #14]

		if (i == 0 || i == 11) {
 8002c28:	8a7b      	ldrh	r3, [r7, #18]
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d002      	beq.n	8002c34 <drawAxis+0xa8>
 8002c2e:	8a7b      	ldrh	r3, [r7, #18]
 8002c30:	2b0b      	cmp	r3, #11
 8002c32:	d10b      	bne.n	8002c4c <drawAxis+0xc0>
			ILI9341_FillRectangle(display, x, 20, 1, 200, ILI9341_WHITE);
 8002c34:	89f9      	ldrh	r1, [r7, #14]
 8002c36:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002c3a:	9301      	str	r3, [sp, #4]
 8002c3c:	23c8      	movs	r3, #200	@ 0xc8
 8002c3e:	9300      	str	r3, [sp, #0]
 8002c40:	2301      	movs	r3, #1
 8002c42:	2214      	movs	r2, #20
 8002c44:	6878      	ldr	r0, [r7, #4]
 8002c46:	f7ff f920 	bl	8001e8a <ILI9341_FillRectangle>
			continue;
 8002c4a:	e011      	b.n	8002c70 <drawAxis+0xe4>
		}

		for (uint16_t j = 0; j < 200; j += 2)
 8002c4c:	2300      	movs	r3, #0
 8002c4e:	823b      	strh	r3, [r7, #16]
 8002c50:	e00b      	b.n	8002c6a <drawAxis+0xde>
			ILI9341_DrawPixel(display, x, 20 + j, ILI9341_GRAY);
 8002c52:	8a3b      	ldrh	r3, [r7, #16]
 8002c54:	3314      	adds	r3, #20
 8002c56:	b29a      	uxth	r2, r3
 8002c58:	89f9      	ldrh	r1, [r7, #14]
 8002c5a:	f245 238a 	movw	r3, #21130	@ 0x528a
 8002c5e:	6878      	ldr	r0, [r7, #4]
 8002c60:	f7ff f808 	bl	8001c74 <ILI9341_DrawPixel>
		for (uint16_t j = 0; j < 200; j += 2)
 8002c64:	8a3b      	ldrh	r3, [r7, #16]
 8002c66:	3302      	adds	r3, #2
 8002c68:	823b      	strh	r3, [r7, #16]
 8002c6a:	8a3b      	ldrh	r3, [r7, #16]
 8002c6c:	2bc7      	cmp	r3, #199	@ 0xc7
 8002c6e:	d9f0      	bls.n	8002c52 <drawAxis+0xc6>
	for (uint16_t i = 0; i < 12; i++) {
 8002c70:	8a7b      	ldrh	r3, [r7, #18]
 8002c72:	3301      	adds	r3, #1
 8002c74:	827b      	strh	r3, [r7, #18]
 8002c76:	8a7b      	ldrh	r3, [r7, #18]
 8002c78:	2b0b      	cmp	r3, #11
 8002c7a:	d9c9      	bls.n	8002c10 <drawAxis+0x84>
	}
}
 8002c7c:	bf00      	nop
 8002c7e:	bf00      	nop
 8002c80:	3718      	adds	r7, #24
 8002c82:	46bd      	mov	sp, r7
 8002c84:	bd80      	pop	{r7, pc}

08002c86 <clearCursor>:

static void clearCursor(ILI9341TypeDef *display, uint16_t pos)
{
 8002c86:	b580      	push	{r7, lr}
 8002c88:	b084      	sub	sp, #16
 8002c8a:	af02      	add	r7, sp, #8
 8002c8c:	6078      	str	r0, [r7, #4]
 8002c8e:	460b      	mov	r3, r1
 8002c90:	807b      	strh	r3, [r7, #2]
	ILI9341_FillRectangle(display, 0, pos - 6, 20, 11, ILI9341_BLACK);
 8002c92:	887b      	ldrh	r3, [r7, #2]
 8002c94:	3b06      	subs	r3, #6
 8002c96:	b29a      	uxth	r2, r3
 8002c98:	2300      	movs	r3, #0
 8002c9a:	9301      	str	r3, [sp, #4]
 8002c9c:	230b      	movs	r3, #11
 8002c9e:	9300      	str	r3, [sp, #0]
 8002ca0:	2314      	movs	r3, #20
 8002ca2:	2100      	movs	r1, #0
 8002ca4:	6878      	ldr	r0, [r7, #4]
 8002ca6:	f7ff f8f0 	bl	8001e8a <ILI9341_FillRectangle>
}
 8002caa:	bf00      	nop
 8002cac:	3708      	adds	r7, #8
 8002cae:	46bd      	mov	sp, r7
 8002cb0:	bd80      	pop	{r7, pc}

08002cb2 <clearTrigger>:

static void clearTrigger(ILI9341TypeDef *display, uint16_t pos)
{
 8002cb2:	b580      	push	{r7, lr}
 8002cb4:	b084      	sub	sp, #16
 8002cb6:	af02      	add	r7, sp, #8
 8002cb8:	6078      	str	r0, [r7, #4]
 8002cba:	460b      	mov	r3, r1
 8002cbc:	807b      	strh	r3, [r7, #2]
	ILI9341_FillRectangle(display, 296, pos - 6, 20, 11, ILI9341_BLACK);
 8002cbe:	887b      	ldrh	r3, [r7, #2]
 8002cc0:	3b06      	subs	r3, #6
 8002cc2:	b29a      	uxth	r2, r3
 8002cc4:	2300      	movs	r3, #0
 8002cc6:	9301      	str	r3, [sp, #4]
 8002cc8:	230b      	movs	r3, #11
 8002cca:	9300      	str	r3, [sp, #0]
 8002ccc:	2314      	movs	r3, #20
 8002cce:	f44f 7194 	mov.w	r1, #296	@ 0x128
 8002cd2:	6878      	ldr	r0, [r7, #4]
 8002cd4:	f7ff f8d9 	bl	8001e8a <ILI9341_FillRectangle>
}
 8002cd8:	bf00      	nop
 8002cda:	3708      	adds	r7, #8
 8002cdc:	46bd      	mov	sp, r7
 8002cde:	bd80      	pop	{r7, pc}

08002ce0 <drawCursor>:

static void drawCursor(ILI9341TypeDef *display, uint16_t pos, char *name, uint16_t color)
{
 8002ce0:	b580      	push	{r7, lr}
 8002ce2:	b08a      	sub	sp, #40	@ 0x28
 8002ce4:	af04      	add	r7, sp, #16
 8002ce6:	60f8      	str	r0, [r7, #12]
 8002ce8:	607a      	str	r2, [r7, #4]
 8002cea:	461a      	mov	r2, r3
 8002cec:	460b      	mov	r3, r1
 8002cee:	817b      	strh	r3, [r7, #10]
 8002cf0:	4613      	mov	r3, r2
 8002cf2:	813b      	strh	r3, [r7, #8]
	ILI9341_FillRectangle(display, 0, pos - 6, 7 * 2, 1, color);
 8002cf4:	897b      	ldrh	r3, [r7, #10]
 8002cf6:	3b06      	subs	r3, #6
 8002cf8:	b29a      	uxth	r2, r3
 8002cfa:	893b      	ldrh	r3, [r7, #8]
 8002cfc:	9301      	str	r3, [sp, #4]
 8002cfe:	2301      	movs	r3, #1
 8002d00:	9300      	str	r3, [sp, #0]
 8002d02:	230e      	movs	r3, #14
 8002d04:	2100      	movs	r1, #0
 8002d06:	68f8      	ldr	r0, [r7, #12]
 8002d08:	f7ff f8bf 	bl	8001e8a <ILI9341_FillRectangle>
	ILI9341_WriteString(display, 0, pos - 5, name, Font_7x10, ILI9341_BLACK, color);
 8002d0c:	897b      	ldrh	r3, [r7, #10]
 8002d0e:	3b05      	subs	r3, #5
 8002d10:	b29a      	uxth	r2, r3
 8002d12:	893b      	ldrh	r3, [r7, #8]
 8002d14:	9303      	str	r3, [sp, #12]
 8002d16:	2300      	movs	r3, #0
 8002d18:	9302      	str	r3, [sp, #8]
 8002d1a:	4919      	ldr	r1, [pc, #100]	@ (8002d80 <drawCursor+0xa0>)
 8002d1c:	466b      	mov	r3, sp
 8002d1e:	c903      	ldmia	r1, {r0, r1}
 8002d20:	e883 0003 	stmia.w	r3, {r0, r1}
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	2100      	movs	r1, #0
 8002d28:	68f8      	ldr	r0, [r7, #12]
 8002d2a:	f7ff f9c6 	bl	80020ba <ILI9341_WriteString>

	for (uint8_t i = 0; i < 6; i++) {
 8002d2e:	2300      	movs	r3, #0
 8002d30:	75fb      	strb	r3, [r7, #23]
 8002d32:	e01d      	b.n	8002d70 <drawCursor+0x90>
		for (uint8_t j = i; j < 11 - i; j++)
 8002d34:	7dfb      	ldrb	r3, [r7, #23]
 8002d36:	75bb      	strb	r3, [r7, #22]
 8002d38:	e011      	b.n	8002d5e <drawCursor+0x7e>
			ILI9341_DrawPixel(display, 14 + i, pos - 6 + j, color);
 8002d3a:	7dfb      	ldrb	r3, [r7, #23]
 8002d3c:	b29b      	uxth	r3, r3
 8002d3e:	330e      	adds	r3, #14
 8002d40:	b299      	uxth	r1, r3
 8002d42:	7dbb      	ldrb	r3, [r7, #22]
 8002d44:	b29a      	uxth	r2, r3
 8002d46:	897b      	ldrh	r3, [r7, #10]
 8002d48:	4413      	add	r3, r2
 8002d4a:	b29b      	uxth	r3, r3
 8002d4c:	3b06      	subs	r3, #6
 8002d4e:	b29a      	uxth	r2, r3
 8002d50:	893b      	ldrh	r3, [r7, #8]
 8002d52:	68f8      	ldr	r0, [r7, #12]
 8002d54:	f7fe ff8e 	bl	8001c74 <ILI9341_DrawPixel>
		for (uint8_t j = i; j < 11 - i; j++)
 8002d58:	7dbb      	ldrb	r3, [r7, #22]
 8002d5a:	3301      	adds	r3, #1
 8002d5c:	75bb      	strb	r3, [r7, #22]
 8002d5e:	7dba      	ldrb	r2, [r7, #22]
 8002d60:	7dfb      	ldrb	r3, [r7, #23]
 8002d62:	f1c3 030b 	rsb	r3, r3, #11
 8002d66:	429a      	cmp	r2, r3
 8002d68:	dbe7      	blt.n	8002d3a <drawCursor+0x5a>
	for (uint8_t i = 0; i < 6; i++) {
 8002d6a:	7dfb      	ldrb	r3, [r7, #23]
 8002d6c:	3301      	adds	r3, #1
 8002d6e:	75fb      	strb	r3, [r7, #23]
 8002d70:	7dfb      	ldrb	r3, [r7, #23]
 8002d72:	2b05      	cmp	r3, #5
 8002d74:	d9de      	bls.n	8002d34 <drawCursor+0x54>
	}
}
 8002d76:	bf00      	nop
 8002d78:	bf00      	nop
 8002d7a:	3718      	adds	r7, #24
 8002d7c:	46bd      	mov	sp, r7
 8002d7e:	bd80      	pop	{r7, pc}
 8002d80:	20000000 	.word	0x20000000

08002d84 <drawTrigger>:

static void drawTrigger(ILI9341TypeDef *display, uint16_t pos, char *name, uint16_t color)
{
 8002d84:	b580      	push	{r7, lr}
 8002d86:	b08a      	sub	sp, #40	@ 0x28
 8002d88:	af04      	add	r7, sp, #16
 8002d8a:	60f8      	str	r0, [r7, #12]
 8002d8c:	607a      	str	r2, [r7, #4]
 8002d8e:	461a      	mov	r2, r3
 8002d90:	460b      	mov	r3, r1
 8002d92:	817b      	strh	r3, [r7, #10]
 8002d94:	4613      	mov	r3, r2
 8002d96:	813b      	strh	r3, [r7, #8]
	ILI9341_FillRectangle(display, 302, pos - 6, 7 * 2, 1, color);
 8002d98:	897b      	ldrh	r3, [r7, #10]
 8002d9a:	3b06      	subs	r3, #6
 8002d9c:	b29a      	uxth	r2, r3
 8002d9e:	893b      	ldrh	r3, [r7, #8]
 8002da0:	9301      	str	r3, [sp, #4]
 8002da2:	2301      	movs	r3, #1
 8002da4:	9300      	str	r3, [sp, #0]
 8002da6:	230e      	movs	r3, #14
 8002da8:	f44f 7197 	mov.w	r1, #302	@ 0x12e
 8002dac:	68f8      	ldr	r0, [r7, #12]
 8002dae:	f7ff f86c 	bl	8001e8a <ILI9341_FillRectangle>
	ILI9341_WriteString(display, 302, pos - 5, name, Font_7x10, ILI9341_BLACK, color);
 8002db2:	897b      	ldrh	r3, [r7, #10]
 8002db4:	3b05      	subs	r3, #5
 8002db6:	b29a      	uxth	r2, r3
 8002db8:	893b      	ldrh	r3, [r7, #8]
 8002dba:	9303      	str	r3, [sp, #12]
 8002dbc:	2300      	movs	r3, #0
 8002dbe:	9302      	str	r3, [sp, #8]
 8002dc0:	491a      	ldr	r1, [pc, #104]	@ (8002e2c <drawTrigger+0xa8>)
 8002dc2:	466b      	mov	r3, sp
 8002dc4:	c903      	ldmia	r1, {r0, r1}
 8002dc6:	e883 0003 	stmia.w	r3, {r0, r1}
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	f44f 7197 	mov.w	r1, #302	@ 0x12e
 8002dd0:	68f8      	ldr	r0, [r7, #12]
 8002dd2:	f7ff f972 	bl	80020ba <ILI9341_WriteString>

	for (uint8_t i = 0; i < 6; i++) {
 8002dd6:	2300      	movs	r3, #0
 8002dd8:	75fb      	strb	r3, [r7, #23]
 8002dda:	e01f      	b.n	8002e1c <drawTrigger+0x98>
		for (uint8_t j = i; j < 11 - i; j++)
 8002ddc:	7dfb      	ldrb	r3, [r7, #23]
 8002dde:	75bb      	strb	r3, [r7, #22]
 8002de0:	e013      	b.n	8002e0a <drawTrigger+0x86>
			ILI9341_DrawPixel(display, 301 - i, pos - 6 + j, color);
 8002de2:	7dfb      	ldrb	r3, [r7, #23]
 8002de4:	b29b      	uxth	r3, r3
 8002de6:	f5c3 7396 	rsb	r3, r3, #300	@ 0x12c
 8002dea:	3301      	adds	r3, #1
 8002dec:	b299      	uxth	r1, r3
 8002dee:	7dbb      	ldrb	r3, [r7, #22]
 8002df0:	b29a      	uxth	r2, r3
 8002df2:	897b      	ldrh	r3, [r7, #10]
 8002df4:	4413      	add	r3, r2
 8002df6:	b29b      	uxth	r3, r3
 8002df8:	3b06      	subs	r3, #6
 8002dfa:	b29a      	uxth	r2, r3
 8002dfc:	893b      	ldrh	r3, [r7, #8]
 8002dfe:	68f8      	ldr	r0, [r7, #12]
 8002e00:	f7fe ff38 	bl	8001c74 <ILI9341_DrawPixel>
		for (uint8_t j = i; j < 11 - i; j++)
 8002e04:	7dbb      	ldrb	r3, [r7, #22]
 8002e06:	3301      	adds	r3, #1
 8002e08:	75bb      	strb	r3, [r7, #22]
 8002e0a:	7dba      	ldrb	r2, [r7, #22]
 8002e0c:	7dfb      	ldrb	r3, [r7, #23]
 8002e0e:	f1c3 030b 	rsb	r3, r3, #11
 8002e12:	429a      	cmp	r2, r3
 8002e14:	dbe5      	blt.n	8002de2 <drawTrigger+0x5e>
	for (uint8_t i = 0; i < 6; i++) {
 8002e16:	7dfb      	ldrb	r3, [r7, #23]
 8002e18:	3301      	adds	r3, #1
 8002e1a:	75fb      	strb	r3, [r7, #23]
 8002e1c:	7dfb      	ldrb	r3, [r7, #23]
 8002e1e:	2b05      	cmp	r3, #5
 8002e20:	d9dc      	bls.n	8002ddc <drawTrigger+0x58>
	}
}
 8002e22:	bf00      	nop
 8002e24:	bf00      	nop
 8002e26:	3718      	adds	r7, #24
 8002e28:	46bd      	mov	sp, r7
 8002e2a:	bd80      	pop	{r7, pc}
 8002e2c:	20000000 	.word	0x20000000

08002e30 <drawSignal>:

static void drawSignal(ILI9341TypeDef *display, uint32_t *adc_time, uint16_t *adc0, uint32_t adc_length, uint16_t pixel_dirty[280][2], uint16_t cursor, uint16_t color)
{
 8002e30:	b590      	push	{r4, r7, lr}
 8002e32:	f2ad 6dd4 	subw	sp, sp, #1748	@ 0x6d4
 8002e36:	af00      	add	r7, sp, #0
 8002e38:	f507 64da 	add.w	r4, r7, #1744	@ 0x6d0
 8002e3c:	f2a4 64c4 	subw	r4, r4, #1732	@ 0x6c4
 8002e40:	6020      	str	r0, [r4, #0]
 8002e42:	f507 60da 	add.w	r0, r7, #1744	@ 0x6d0
 8002e46:	f5a0 60d9 	sub.w	r0, r0, #1736	@ 0x6c8
 8002e4a:	6001      	str	r1, [r0, #0]
 8002e4c:	f507 61da 	add.w	r1, r7, #1744	@ 0x6d0
 8002e50:	f2a1 61cc 	subw	r1, r1, #1740	@ 0x6cc
 8002e54:	600a      	str	r2, [r1, #0]
 8002e56:	f507 62da 	add.w	r2, r7, #1744	@ 0x6d0
 8002e5a:	f5a2 62da 	sub.w	r2, r2, #1744	@ 0x6d0
 8002e5e:	6013      	str	r3, [r2, #0]
	uint16_t point[280];
	for (uint16_t i = 0; i < 280; i++)
 8002e60:	2300      	movs	r3, #0
 8002e62:	f8a7 36ce 	strh.w	r3, [r7, #1742]	@ 0x6ce
 8002e66:	e00d      	b.n	8002e84 <drawSignal+0x54>
		point[i] = 0;
 8002e68:	f8b7 26ce 	ldrh.w	r2, [r7, #1742]	@ 0x6ce
 8002e6c:	f507 63da 	add.w	r3, r7, #1744	@ 0x6d0
 8002e70:	f5a3 7318 	sub.w	r3, r3, #608	@ 0x260
 8002e74:	2100      	movs	r1, #0
 8002e76:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	for (uint16_t i = 0; i < 280; i++)
 8002e7a:	f8b7 36ce 	ldrh.w	r3, [r7, #1742]	@ 0x6ce
 8002e7e:	3301      	adds	r3, #1
 8002e80:	f8a7 36ce 	strh.w	r3, [r7, #1742]	@ 0x6ce
 8002e84:	f8b7 36ce 	ldrh.w	r3, [r7, #1742]	@ 0x6ce
 8002e88:	f5b3 7f8c 	cmp.w	r3, #280	@ 0x118
 8002e8c:	d3ec      	bcc.n	8002e68 <drawSignal+0x38>

	for (uint16_t i = 0; i < adc_length; i++) {
 8002e8e:	2300      	movs	r3, #0
 8002e90:	f8a7 36cc 	strh.w	r3, [r7, #1740]	@ 0x6cc
 8002e94:	e0a5      	b.n	8002fe2 <drawSignal+0x1b2>

		float uV = (float)(adc0[i]) * 3300000.0f / 4096.0f;
 8002e96:	f8b7 36cc 	ldrh.w	r3, [r7, #1740]	@ 0x6cc
 8002e9a:	005b      	lsls	r3, r3, #1
 8002e9c:	f507 62da 	add.w	r2, r7, #1744	@ 0x6d0
 8002ea0:	f2a2 62cc 	subw	r2, r2, #1740	@ 0x6cc
 8002ea4:	6812      	ldr	r2, [r2, #0]
 8002ea6:	4413      	add	r3, r2
 8002ea8:	881b      	ldrh	r3, [r3, #0]
 8002eaa:	ee07 3a90 	vmov	s15, r3
 8002eae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002eb2:	ed9f 7aa1 	vldr	s14, [pc, #644]	@ 8003138 <drawSignal+0x308>
 8002eb6:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002eba:	eddf 6aa0 	vldr	s13, [pc, #640]	@ 800313c <drawSignal+0x30c>
 8002ebe:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002ec2:	f507 63d4 	add.w	r3, r7, #1696	@ 0x6a0
 8002ec6:	edc3 7a00 	vstr	s15, [r3]
		uint16_t x = (float)(adc_time[i]) * 280.0f / (float)(12.0f * xlim_us);
 8002eca:	f8b7 36cc 	ldrh.w	r3, [r7, #1740]	@ 0x6cc
 8002ece:	009b      	lsls	r3, r3, #2
 8002ed0:	f507 62da 	add.w	r2, r7, #1744	@ 0x6d0
 8002ed4:	f5a2 62d9 	sub.w	r2, r2, #1736	@ 0x6c8
 8002ed8:	6812      	ldr	r2, [r2, #0]
 8002eda:	4413      	add	r3, r2
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	ee07 3a90 	vmov	s15, r3
 8002ee2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002ee6:	ed9f 7a96 	vldr	s14, [pc, #600]	@ 8003140 <drawSignal+0x310>
 8002eea:	ee67 6a87 	vmul.f32	s13, s15, s14
 8002eee:	4b95      	ldr	r3, [pc, #596]	@ (8003144 <drawSignal+0x314>)
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	ee07 3a90 	vmov	s15, r3
 8002ef6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002efa:	eeb2 7a08 	vmov.f32	s14, #40	@ 0x41400000  12.0
 8002efe:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002f02:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002f06:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002f0a:	ee17 3a90 	vmov	r3, s15
 8002f0e:	f8a7 36ca 	strh.w	r3, [r7, #1738]	@ 0x6ca
		uint16_t y = cursor - ((uV / (float)(ylim_uV)) * 200.0f / 8.0f);
 8002f12:	f8b7 36e4 	ldrh.w	r3, [r7, #1764]	@ 0x6e4
 8002f16:	ee07 3a90 	vmov	s15, r3
 8002f1a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002f1e:	4b8a      	ldr	r3, [pc, #552]	@ (8003148 <drawSignal+0x318>)
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	ee07 3a90 	vmov	s15, r3
 8002f26:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002f2a:	f507 63d4 	add.w	r3, r7, #1696	@ 0x6a0
 8002f2e:	ed93 6a00 	vldr	s12, [r3]
 8002f32:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8002f36:	eddf 6a85 	vldr	s13, [pc, #532]	@ 800314c <drawSignal+0x31c>
 8002f3a:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8002f3e:	eeb2 6a00 	vmov.f32	s12, #32	@ 0x41000000  8.0
 8002f42:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002f46:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002f4a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002f4e:	ee17 3a90 	vmov	r3, s15
 8002f52:	f8a7 36c8 	strh.w	r3, [r7, #1736]	@ 0x6c8

		if (x < 0)
			x = 0;

		if (x > 274)
 8002f56:	f8b7 36ca 	ldrh.w	r3, [r7, #1738]	@ 0x6ca
 8002f5a:	f5b3 7f89 	cmp.w	r3, #274	@ 0x112
 8002f5e:	d903      	bls.n	8002f68 <drawSignal+0x138>
			x = 274;
 8002f60:	f44f 7389 	mov.w	r3, #274	@ 0x112
 8002f64:	f8a7 36ca 	strh.w	r3, [r7, #1738]	@ 0x6ca

		if (y < 21)
 8002f68:	f8b7 36c8 	ldrh.w	r3, [r7, #1736]	@ 0x6c8
 8002f6c:	2b14      	cmp	r3, #20
 8002f6e:	d802      	bhi.n	8002f76 <drawSignal+0x146>
			y = 21;
 8002f70:	2315      	movs	r3, #21
 8002f72:	f8a7 36c8 	strh.w	r3, [r7, #1736]	@ 0x6c8

		if (y > 219)
 8002f76:	f8b7 36c8 	ldrh.w	r3, [r7, #1736]	@ 0x6c8
 8002f7a:	2bdb      	cmp	r3, #219	@ 0xdb
 8002f7c:	d902      	bls.n	8002f84 <drawSignal+0x154>
			y = 219;
 8002f7e:	23db      	movs	r3, #219	@ 0xdb
 8002f80:	f8a7 36c8 	strh.w	r3, [r7, #1736]	@ 0x6c8

		point[x] += (float)(y - point[x]) * 1.0f;
 8002f84:	f8b7 26ca 	ldrh.w	r2, [r7, #1738]	@ 0x6ca
 8002f88:	f507 63da 	add.w	r3, r7, #1744	@ 0x6d0
 8002f8c:	f5a3 7318 	sub.w	r3, r3, #608	@ 0x260
 8002f90:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8002f94:	ee07 3a90 	vmov	s15, r3
 8002f98:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002f9c:	f8b7 36c8 	ldrh.w	r3, [r7, #1736]	@ 0x6c8
 8002fa0:	f8b7 16ca 	ldrh.w	r1, [r7, #1738]	@ 0x6ca
 8002fa4:	f507 62da 	add.w	r2, r7, #1744	@ 0x6d0
 8002fa8:	f5a2 7218 	sub.w	r2, r2, #608	@ 0x260
 8002fac:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 8002fb0:	1a9b      	subs	r3, r3, r2
 8002fb2:	ee07 3a90 	vmov	s15, r3
 8002fb6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002fba:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002fbe:	f8b7 26ca 	ldrh.w	r2, [r7, #1738]	@ 0x6ca
 8002fc2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002fc6:	ee17 3a90 	vmov	r3, s15
 8002fca:	b299      	uxth	r1, r3
 8002fcc:	f507 63da 	add.w	r3, r7, #1744	@ 0x6d0
 8002fd0:	f5a3 7318 	sub.w	r3, r3, #608	@ 0x260
 8002fd4:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	for (uint16_t i = 0; i < adc_length; i++) {
 8002fd8:	f8b7 36cc 	ldrh.w	r3, [r7, #1740]	@ 0x6cc
 8002fdc:	3301      	adds	r3, #1
 8002fde:	f8a7 36cc 	strh.w	r3, [r7, #1740]	@ 0x6cc
 8002fe2:	f8b7 36cc 	ldrh.w	r3, [r7, #1740]	@ 0x6cc
 8002fe6:	f507 62da 	add.w	r2, r7, #1744	@ 0x6d0
 8002fea:	f5a2 62da 	sub.w	r2, r2, #1744	@ 0x6d0
 8002fee:	6812      	ldr	r2, [r2, #0]
 8002ff0:	429a      	cmp	r2, r3
 8002ff2:	f63f af50 	bhi.w	8002e96 <drawSignal+0x66>
	}

	uint16_t pixel[280][2];
	for (uint16_t i = 0; i < 280; i++) {
 8002ff6:	2300      	movs	r3, #0
 8002ff8:	f8a7 36c6 	strh.w	r3, [r7, #1734]	@ 0x6c6
 8002ffc:	e017      	b.n	800302e <drawSignal+0x1fe>
		pixel[i][0] = 220;
 8002ffe:	f8b7 26c6 	ldrh.w	r2, [r7, #1734]	@ 0x6c6
 8003002:	f507 63da 	add.w	r3, r7, #1744	@ 0x6d0
 8003006:	f5a3 63d8 	sub.w	r3, r3, #1728	@ 0x6c0
 800300a:	21dc      	movs	r1, #220	@ 0xdc
 800300c:	f823 1022 	strh.w	r1, [r3, r2, lsl #2]
		pixel[i][1] = 20;
 8003010:	f8b7 36c6 	ldrh.w	r3, [r7, #1734]	@ 0x6c6
 8003014:	f507 62da 	add.w	r2, r7, #1744	@ 0x6d0
 8003018:	f5a2 62d8 	sub.w	r2, r2, #1728	@ 0x6c0
 800301c:	009b      	lsls	r3, r3, #2
 800301e:	4413      	add	r3, r2
 8003020:	2214      	movs	r2, #20
 8003022:	805a      	strh	r2, [r3, #2]
	for (uint16_t i = 0; i < 280; i++) {
 8003024:	f8b7 36c6 	ldrh.w	r3, [r7, #1734]	@ 0x6c6
 8003028:	3301      	adds	r3, #1
 800302a:	f8a7 36c6 	strh.w	r3, [r7, #1734]	@ 0x6c6
 800302e:	f8b7 36c6 	ldrh.w	r3, [r7, #1734]	@ 0x6c6
 8003032:	f5b3 7f8c 	cmp.w	r3, #280	@ 0x118
 8003036:	d3e2      	bcc.n	8002ffe <drawSignal+0x1ce>
	}

	for (uint16_t i = 1; i <= 279; i++) {
 8003038:	2301      	movs	r3, #1
 800303a:	f8a7 36c4 	strh.w	r3, [r7, #1732]	@ 0x6c4
 800303e:	e11b      	b.n	8003278 <drawSignal+0x448>

		if (point[i] == 0)
 8003040:	f8b7 26c4 	ldrh.w	r2, [r7, #1732]	@ 0x6c4
 8003044:	f507 63da 	add.w	r3, r7, #1744	@ 0x6d0
 8003048:	f5a3 7318 	sub.w	r3, r3, #608	@ 0x260
 800304c:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8003050:	2b00      	cmp	r3, #0
 8003052:	f000 8105 	beq.w	8003260 <drawSignal+0x430>
			continue;

		int16_t x1 = i;
 8003056:	f8b7 36c4 	ldrh.w	r3, [r7, #1732]	@ 0x6c4
 800305a:	f8a7 36b2 	strh.w	r3, [r7, #1714]	@ 0x6b2
		int16_t x0 = x1 - 1;
 800305e:	f8b7 36b2 	ldrh.w	r3, [r7, #1714]	@ 0x6b2
 8003062:	3b01      	subs	r3, #1
 8003064:	b29b      	uxth	r3, r3
 8003066:	f8a7 36c2 	strh.w	r3, [r7, #1730]	@ 0x6c2

		for (; x0 >= 0; x0--) {
 800306a:	e010      	b.n	800308e <drawSignal+0x25e>
			if (point[x0] != 0)
 800306c:	f9b7 26c2 	ldrsh.w	r2, [r7, #1730]	@ 0x6c2
 8003070:	f507 63da 	add.w	r3, r7, #1744	@ 0x6d0
 8003074:	f5a3 7318 	sub.w	r3, r3, #608	@ 0x260
 8003078:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800307c:	2b00      	cmp	r3, #0
 800307e:	d10b      	bne.n	8003098 <drawSignal+0x268>
		for (; x0 >= 0; x0--) {
 8003080:	f9b7 36c2 	ldrsh.w	r3, [r7, #1730]	@ 0x6c2
 8003084:	b29b      	uxth	r3, r3
 8003086:	3b01      	subs	r3, #1
 8003088:	b29b      	uxth	r3, r3
 800308a:	f8a7 36c2 	strh.w	r3, [r7, #1730]	@ 0x6c2
 800308e:	f9b7 36c2 	ldrsh.w	r3, [r7, #1730]	@ 0x6c2
 8003092:	2b00      	cmp	r3, #0
 8003094:	daea      	bge.n	800306c <drawSignal+0x23c>
 8003096:	e000      	b.n	800309a <drawSignal+0x26a>
				break;
 8003098:	bf00      	nop
		}

		if (x0 == 0 && point[x0] == 0)
 800309a:	f9b7 36c2 	ldrsh.w	r3, [r7, #1730]	@ 0x6c2
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d10a      	bne.n	80030b8 <drawSignal+0x288>
 80030a2:	f9b7 26c2 	ldrsh.w	r2, [r7, #1730]	@ 0x6c2
 80030a6:	f507 63da 	add.w	r3, r7, #1744	@ 0x6d0
 80030aa:	f5a3 7318 	sub.w	r3, r3, #608	@ 0x260
 80030ae:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	f000 81fa 	beq.w	80034ac <drawSignal+0x67c>
			return;

		int16_t y0 = point[x0];
 80030b8:	f9b7 26c2 	ldrsh.w	r2, [r7, #1730]	@ 0x6c2
 80030bc:	f507 63da 	add.w	r3, r7, #1744	@ 0x6d0
 80030c0:	f5a3 7318 	sub.w	r3, r3, #608	@ 0x260
 80030c4:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80030c8:	f8a7 36c0 	strh.w	r3, [r7, #1728]	@ 0x6c0
		int16_t y1 = point[x1];
 80030cc:	f9b7 26b2 	ldrsh.w	r2, [r7, #1714]	@ 0x6b2
 80030d0:	f507 63da 	add.w	r3, r7, #1744	@ 0x6d0
 80030d4:	f5a3 7318 	sub.w	r3, r3, #608	@ 0x260
 80030d8:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80030dc:	f8a7 36b0 	strh.w	r3, [r7, #1712]	@ 0x6b0

		int16_t dx = (x1 - x0) > 0 ? (x1 - x0) : -(x1 - x0);
 80030e0:	f9b7 26b2 	ldrsh.w	r2, [r7, #1714]	@ 0x6b2
 80030e4:	f9b7 36c2 	ldrsh.w	r3, [r7, #1730]	@ 0x6c2
 80030e8:	1ad3      	subs	r3, r2, r3
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	bfb8      	it	lt
 80030ee:	425b      	neglt	r3, r3
 80030f0:	f8a7 36ae 	strh.w	r3, [r7, #1710]	@ 0x6ae
		int16_t sx = x0 < x1 ? 1 : -1;
 80030f4:	f9b7 26c2 	ldrsh.w	r2, [r7, #1730]	@ 0x6c2
 80030f8:	f9b7 36b2 	ldrsh.w	r3, [r7, #1714]	@ 0x6b2
 80030fc:	429a      	cmp	r2, r3
 80030fe:	da01      	bge.n	8003104 <drawSignal+0x2d4>
 8003100:	2301      	movs	r3, #1
 8003102:	e001      	b.n	8003108 <drawSignal+0x2d8>
 8003104:	f04f 33ff 	mov.w	r3, #4294967295
 8003108:	f8a7 36ac 	strh.w	r3, [r7, #1708]	@ 0x6ac
		int16_t dy = (y1 - y0) > 0 ? -(y1 - y0) : (y1 - y0);
 800310c:	f9b7 26b0 	ldrsh.w	r2, [r7, #1712]	@ 0x6b0
 8003110:	f9b7 36c0 	ldrsh.w	r3, [r7, #1728]	@ 0x6c0
 8003114:	1ad3      	subs	r3, r2, r3
 8003116:	2b00      	cmp	r3, #0
 8003118:	bfb8      	it	lt
 800311a:	425b      	neglt	r3, r3
 800311c:	b29b      	uxth	r3, r3
 800311e:	425b      	negs	r3, r3
 8003120:	b29b      	uxth	r3, r3
 8003122:	f8a7 36aa 	strh.w	r3, [r7, #1706]	@ 0x6aa
		int16_t sy = y0 < y1 ? 1 : -1;
 8003126:	f9b7 26c0 	ldrsh.w	r2, [r7, #1728]	@ 0x6c0
 800312a:	f9b7 36b0 	ldrsh.w	r3, [r7, #1712]	@ 0x6b0
 800312e:	429a      	cmp	r2, r3
 8003130:	da0e      	bge.n	8003150 <drawSignal+0x320>
 8003132:	2301      	movs	r3, #1
 8003134:	e00e      	b.n	8003154 <drawSignal+0x324>
 8003136:	bf00      	nop
 8003138:	4a496a80 	.word	0x4a496a80
 800313c:	45800000 	.word	0x45800000
 8003140:	438c0000 	.word	0x438c0000
 8003144:	2000d0ec 	.word	0x2000d0ec
 8003148:	2000d0f0 	.word	0x2000d0f0
 800314c:	43480000 	.word	0x43480000
 8003150:	f04f 33ff 	mov.w	r3, #4294967295
 8003154:	f8a7 36a8 	strh.w	r3, [r7, #1704]	@ 0x6a8
		int16_t error = dx + dy;
 8003158:	f8b7 26ae 	ldrh.w	r2, [r7, #1710]	@ 0x6ae
 800315c:	f8b7 36aa 	ldrh.w	r3, [r7, #1706]	@ 0x6aa
 8003160:	4413      	add	r3, r2
 8003162:	b29b      	uxth	r3, r3
 8003164:	f8a7 36be 	strh.w	r3, [r7, #1726]	@ 0x6be

		while (1) {

			if (pixel[x0][0] > y0)
 8003168:	f9b7 26c2 	ldrsh.w	r2, [r7, #1730]	@ 0x6c2
 800316c:	f507 63da 	add.w	r3, r7, #1744	@ 0x6d0
 8003170:	f5a3 63d8 	sub.w	r3, r3, #1728	@ 0x6c0
 8003174:	f833 3022 	ldrh.w	r3, [r3, r2, lsl #2]
 8003178:	461a      	mov	r2, r3
 800317a:	f9b7 36c0 	ldrsh.w	r3, [r7, #1728]	@ 0x6c0
 800317e:	429a      	cmp	r2, r3
 8003180:	dd09      	ble.n	8003196 <drawSignal+0x366>
				pixel[x0][0] = y0;
 8003182:	f9b7 26c2 	ldrsh.w	r2, [r7, #1730]	@ 0x6c2
 8003186:	f8b7 16c0 	ldrh.w	r1, [r7, #1728]	@ 0x6c0
 800318a:	f507 63da 	add.w	r3, r7, #1744	@ 0x6d0
 800318e:	f5a3 63d8 	sub.w	r3, r3, #1728	@ 0x6c0
 8003192:	f823 1022 	strh.w	r1, [r3, r2, lsl #2]

			if (pixel[x0][1] < y0)
 8003196:	f9b7 36c2 	ldrsh.w	r3, [r7, #1730]	@ 0x6c2
 800319a:	f507 62da 	add.w	r2, r7, #1744	@ 0x6d0
 800319e:	f5a2 62d8 	sub.w	r2, r2, #1728	@ 0x6c0
 80031a2:	009b      	lsls	r3, r3, #2
 80031a4:	4413      	add	r3, r2
 80031a6:	885b      	ldrh	r3, [r3, #2]
 80031a8:	461a      	mov	r2, r3
 80031aa:	f9b7 36c0 	ldrsh.w	r3, [r7, #1728]	@ 0x6c0
 80031ae:	429a      	cmp	r2, r3
 80031b0:	da0b      	bge.n	80031ca <drawSignal+0x39a>
				pixel[x0][1] = y0;
 80031b2:	f9b7 36c2 	ldrsh.w	r3, [r7, #1730]	@ 0x6c2
 80031b6:	f8b7 16c0 	ldrh.w	r1, [r7, #1728]	@ 0x6c0
 80031ba:	f507 62da 	add.w	r2, r7, #1744	@ 0x6d0
 80031be:	f5a2 62d8 	sub.w	r2, r2, #1728	@ 0x6c0
 80031c2:	009b      	lsls	r3, r3, #2
 80031c4:	4413      	add	r3, r2
 80031c6:	460a      	mov	r2, r1
 80031c8:	805a      	strh	r2, [r3, #2]

			if (x0 == x1 && y0 == y1)
 80031ca:	f9b7 26c2 	ldrsh.w	r2, [r7, #1730]	@ 0x6c2
 80031ce:	f9b7 36b2 	ldrsh.w	r3, [r7, #1714]	@ 0x6b2
 80031d2:	429a      	cmp	r2, r3
 80031d4:	d105      	bne.n	80031e2 <drawSignal+0x3b2>
 80031d6:	f9b7 26c0 	ldrsh.w	r2, [r7, #1728]	@ 0x6c0
 80031da:	f9b7 36b0 	ldrsh.w	r3, [r7, #1712]	@ 0x6b0
 80031de:	429a      	cmp	r2, r3
 80031e0:	d040      	beq.n	8003264 <drawSignal+0x434>
				break;

			int16_t e2 = 2 * error;
 80031e2:	f8b7 36be 	ldrh.w	r3, [r7, #1726]	@ 0x6be
 80031e6:	005b      	lsls	r3, r3, #1
 80031e8:	b29b      	uxth	r3, r3
 80031ea:	f8a7 36a6 	strh.w	r3, [r7, #1702]	@ 0x6a6

			if (e2 >= dy) {
 80031ee:	f9b7 26a6 	ldrsh.w	r2, [r7, #1702]	@ 0x6a6
 80031f2:	f9b7 36aa 	ldrsh.w	r3, [r7, #1706]	@ 0x6aa
 80031f6:	429a      	cmp	r2, r3
 80031f8:	db15      	blt.n	8003226 <drawSignal+0x3f6>
				if (x0 == x1)
 80031fa:	f9b7 26c2 	ldrsh.w	r2, [r7, #1730]	@ 0x6c2
 80031fe:	f9b7 36b2 	ldrsh.w	r3, [r7, #1714]	@ 0x6b2
 8003202:	429a      	cmp	r2, r3
 8003204:	d030      	beq.n	8003268 <drawSignal+0x438>
					break;

				error = error + dy;
 8003206:	f8b7 26be 	ldrh.w	r2, [r7, #1726]	@ 0x6be
 800320a:	f8b7 36aa 	ldrh.w	r3, [r7, #1706]	@ 0x6aa
 800320e:	4413      	add	r3, r2
 8003210:	b29b      	uxth	r3, r3
 8003212:	f8a7 36be 	strh.w	r3, [r7, #1726]	@ 0x6be
				x0 = x0 + sx;
 8003216:	f8b7 26c2 	ldrh.w	r2, [r7, #1730]	@ 0x6c2
 800321a:	f8b7 36ac 	ldrh.w	r3, [r7, #1708]	@ 0x6ac
 800321e:	4413      	add	r3, r2
 8003220:	b29b      	uxth	r3, r3
 8003222:	f8a7 36c2 	strh.w	r3, [r7, #1730]	@ 0x6c2
			}

			if (e2 <= dx) {
 8003226:	f9b7 26a6 	ldrsh.w	r2, [r7, #1702]	@ 0x6a6
 800322a:	f9b7 36ae 	ldrsh.w	r3, [r7, #1710]	@ 0x6ae
 800322e:	429a      	cmp	r2, r3
 8003230:	dc9a      	bgt.n	8003168 <drawSignal+0x338>
				if (y0 == y1)
 8003232:	f9b7 26c0 	ldrsh.w	r2, [r7, #1728]	@ 0x6c0
 8003236:	f9b7 36b0 	ldrsh.w	r3, [r7, #1712]	@ 0x6b0
 800323a:	429a      	cmp	r2, r3
 800323c:	d016      	beq.n	800326c <drawSignal+0x43c>
					break;

				error = error + dx;
 800323e:	f8b7 26be 	ldrh.w	r2, [r7, #1726]	@ 0x6be
 8003242:	f8b7 36ae 	ldrh.w	r3, [r7, #1710]	@ 0x6ae
 8003246:	4413      	add	r3, r2
 8003248:	b29b      	uxth	r3, r3
 800324a:	f8a7 36be 	strh.w	r3, [r7, #1726]	@ 0x6be
				y0 = y0 + sy;
 800324e:	f8b7 26c0 	ldrh.w	r2, [r7, #1728]	@ 0x6c0
 8003252:	f8b7 36a8 	ldrh.w	r3, [r7, #1704]	@ 0x6a8
 8003256:	4413      	add	r3, r2
 8003258:	b29b      	uxth	r3, r3
 800325a:	f8a7 36c0 	strh.w	r3, [r7, #1728]	@ 0x6c0
		while (1) {
 800325e:	e783      	b.n	8003168 <drawSignal+0x338>
			continue;
 8003260:	bf00      	nop
 8003262:	e004      	b.n	800326e <drawSignal+0x43e>
				break;
 8003264:	bf00      	nop
 8003266:	e002      	b.n	800326e <drawSignal+0x43e>
					break;
 8003268:	bf00      	nop
 800326a:	e000      	b.n	800326e <drawSignal+0x43e>
					break;
 800326c:	bf00      	nop
	for (uint16_t i = 1; i <= 279; i++) {
 800326e:	f8b7 36c4 	ldrh.w	r3, [r7, #1732]	@ 0x6c4
 8003272:	3301      	adds	r3, #1
 8003274:	f8a7 36c4 	strh.w	r3, [r7, #1732]	@ 0x6c4
 8003278:	f8b7 36c4 	ldrh.w	r3, [r7, #1732]	@ 0x6c4
 800327c:	f5b3 7f8c 	cmp.w	r3, #280	@ 0x118
 8003280:	f4ff aede 	bcc.w	8003040 <drawSignal+0x210>
			}
		}
	}

	for (uint16_t i = 1; i <= 279; i++) {
 8003284:	2301      	movs	r3, #1
 8003286:	f8a7 36bc 	strh.w	r3, [r7, #1724]	@ 0x6bc
 800328a:	e108      	b.n	800349e <drawSignal+0x66e>
		uint16_t min = pixel[i][0] < pixel_dirty[i][0] ? pixel[i][0] : pixel_dirty[i][0];
 800328c:	f8b7 36bc 	ldrh.w	r3, [r7, #1724]	@ 0x6bc
 8003290:	009b      	lsls	r3, r3, #2
 8003292:	f8d7 26e0 	ldr.w	r2, [r7, #1760]	@ 0x6e0
 8003296:	4413      	add	r3, r2
 8003298:	881a      	ldrh	r2, [r3, #0]
 800329a:	f8b7 16bc 	ldrh.w	r1, [r7, #1724]	@ 0x6bc
 800329e:	f507 63da 	add.w	r3, r7, #1744	@ 0x6d0
 80032a2:	f5a3 63d8 	sub.w	r3, r3, #1728	@ 0x6c0
 80032a6:	f833 3021 	ldrh.w	r3, [r3, r1, lsl #2]
 80032aa:	4293      	cmp	r3, r2
 80032ac:	bf28      	it	cs
 80032ae:	4613      	movcs	r3, r2
 80032b0:	f8a7 36b6 	strh.w	r3, [r7, #1718]	@ 0x6b6
		uint16_t max = pixel[i][1] > pixel_dirty[i][1] ? pixel[i][1] : pixel_dirty[i][1];
 80032b4:	f8b7 36bc 	ldrh.w	r3, [r7, #1724]	@ 0x6bc
 80032b8:	009b      	lsls	r3, r3, #2
 80032ba:	f8d7 26e0 	ldr.w	r2, [r7, #1760]	@ 0x6e0
 80032be:	4413      	add	r3, r2
 80032c0:	885a      	ldrh	r2, [r3, #2]
 80032c2:	f8b7 36bc 	ldrh.w	r3, [r7, #1724]	@ 0x6bc
 80032c6:	f507 61da 	add.w	r1, r7, #1744	@ 0x6d0
 80032ca:	f5a1 61d8 	sub.w	r1, r1, #1728	@ 0x6c0
 80032ce:	009b      	lsls	r3, r3, #2
 80032d0:	440b      	add	r3, r1
 80032d2:	885b      	ldrh	r3, [r3, #2]
 80032d4:	4293      	cmp	r3, r2
 80032d6:	bf38      	it	cc
 80032d8:	4613      	movcc	r3, r2
 80032da:	f8a7 36b4 	strh.w	r3, [r7, #1716]	@ 0x6b4

		for (uint16_t j = min; j <= max; j++) {
 80032de:	f8b7 36b6 	ldrh.w	r3, [r7, #1718]	@ 0x6b6
 80032e2:	f8a7 36ba 	strh.w	r3, [r7, #1722]	@ 0x6ba
 80032e6:	e0af      	b.n	8003448 <drawSignal+0x618>
			uint8_t draw = 0;
 80032e8:	2300      	movs	r3, #0
 80032ea:	f887 36b9 	strb.w	r3, [r7, #1721]	@ 0x6b9
			if (j >= pixel[i][0] && j <= pixel[i][1])
 80032ee:	f8b7 26bc 	ldrh.w	r2, [r7, #1724]	@ 0x6bc
 80032f2:	f507 63da 	add.w	r3, r7, #1744	@ 0x6d0
 80032f6:	f5a3 63d8 	sub.w	r3, r3, #1728	@ 0x6c0
 80032fa:	f833 3022 	ldrh.w	r3, [r3, r2, lsl #2]
 80032fe:	f8b7 26ba 	ldrh.w	r2, [r7, #1722]	@ 0x6ba
 8003302:	429a      	cmp	r2, r3
 8003304:	d30f      	bcc.n	8003326 <drawSignal+0x4f6>
 8003306:	f8b7 36bc 	ldrh.w	r3, [r7, #1724]	@ 0x6bc
 800330a:	f507 62da 	add.w	r2, r7, #1744	@ 0x6d0
 800330e:	f5a2 62d8 	sub.w	r2, r2, #1728	@ 0x6c0
 8003312:	009b      	lsls	r3, r3, #2
 8003314:	4413      	add	r3, r2
 8003316:	885b      	ldrh	r3, [r3, #2]
 8003318:	f8b7 26ba 	ldrh.w	r2, [r7, #1722]	@ 0x6ba
 800331c:	429a      	cmp	r2, r3
 800331e:	d802      	bhi.n	8003326 <drawSignal+0x4f6>
				draw = 1;
 8003320:	2301      	movs	r3, #1
 8003322:	f887 36b9 	strb.w	r3, [r7, #1721]	@ 0x6b9

			uint8_t clear = 0;
 8003326:	2300      	movs	r3, #0
 8003328:	f887 36b8 	strb.w	r3, [r7, #1720]	@ 0x6b8
			if (j >= pixel_dirty[i][0] && j <= pixel_dirty[i][1])
 800332c:	f8b7 36bc 	ldrh.w	r3, [r7, #1724]	@ 0x6bc
 8003330:	009b      	lsls	r3, r3, #2
 8003332:	f8d7 26e0 	ldr.w	r2, [r7, #1760]	@ 0x6e0
 8003336:	4413      	add	r3, r2
 8003338:	881b      	ldrh	r3, [r3, #0]
 800333a:	f8b7 26ba 	ldrh.w	r2, [r7, #1722]	@ 0x6ba
 800333e:	429a      	cmp	r2, r3
 8003340:	d30d      	bcc.n	800335e <drawSignal+0x52e>
 8003342:	f8b7 36bc 	ldrh.w	r3, [r7, #1724]	@ 0x6bc
 8003346:	009b      	lsls	r3, r3, #2
 8003348:	f8d7 26e0 	ldr.w	r2, [r7, #1760]	@ 0x6e0
 800334c:	4413      	add	r3, r2
 800334e:	885b      	ldrh	r3, [r3, #2]
 8003350:	f8b7 26ba 	ldrh.w	r2, [r7, #1722]	@ 0x6ba
 8003354:	429a      	cmp	r2, r3
 8003356:	d802      	bhi.n	800335e <drawSignal+0x52e>
				clear = 1;
 8003358:	2301      	movs	r3, #1
 800335a:	f887 36b8 	strb.w	r3, [r7, #1720]	@ 0x6b8

			if (draw && !clear && j > 21)
 800335e:	f897 36b9 	ldrb.w	r3, [r7, #1721]	@ 0x6b9
 8003362:	2b00      	cmp	r3, #0
 8003364:	d016      	beq.n	8003394 <drawSignal+0x564>
 8003366:	f897 36b8 	ldrb.w	r3, [r7, #1720]	@ 0x6b8
 800336a:	2b00      	cmp	r3, #0
 800336c:	d112      	bne.n	8003394 <drawSignal+0x564>
 800336e:	f8b7 36ba 	ldrh.w	r3, [r7, #1722]	@ 0x6ba
 8003372:	2b15      	cmp	r3, #21
 8003374:	d90e      	bls.n	8003394 <drawSignal+0x564>
				ILI9341_DrawPixel(display, i + 20, j, color);
 8003376:	f8b7 36bc 	ldrh.w	r3, [r7, #1724]	@ 0x6bc
 800337a:	3314      	adds	r3, #20
 800337c:	b299      	uxth	r1, r3
 800337e:	f8b7 36e8 	ldrh.w	r3, [r7, #1768]	@ 0x6e8
 8003382:	f8b7 26ba 	ldrh.w	r2, [r7, #1722]	@ 0x6ba
 8003386:	f507 60da 	add.w	r0, r7, #1744	@ 0x6d0
 800338a:	f2a0 60c4 	subw	r0, r0, #1732	@ 0x6c4
 800338e:	6800      	ldr	r0, [r0, #0]
 8003390:	f7fe fc70 	bl	8001c74 <ILI9341_DrawPixel>

			if (!draw && clear) {
 8003394:	f897 36b9 	ldrb.w	r3, [r7, #1721]	@ 0x6b9
 8003398:	2b00      	cmp	r3, #0
 800339a:	d150      	bne.n	800343e <drawSignal+0x60e>
 800339c:	f897 36b8 	ldrb.w	r3, [r7, #1720]	@ 0x6b8
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d04c      	beq.n	800343e <drawSignal+0x60e>
				if (((i % 25) == 0 && (j % 2) == 0) || ((i % 2) == 0 && ((j - 20) % 25) == 0))
 80033a4:	f8b7 26bc 	ldrh.w	r2, [r7, #1724]	@ 0x6bc
 80033a8:	4b43      	ldr	r3, [pc, #268]	@ (80034b8 <drawSignal+0x688>)
 80033aa:	fba3 1302 	umull	r1, r3, r3, r2
 80033ae:	08d9      	lsrs	r1, r3, #3
 80033b0:	460b      	mov	r3, r1
 80033b2:	009b      	lsls	r3, r3, #2
 80033b4:	440b      	add	r3, r1
 80033b6:	0099      	lsls	r1, r3, #2
 80033b8:	440b      	add	r3, r1
 80033ba:	1ad3      	subs	r3, r2, r3
 80033bc:	b29b      	uxth	r3, r3
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d106      	bne.n	80033d0 <drawSignal+0x5a0>
 80033c2:	f8b7 36ba 	ldrh.w	r3, [r7, #1722]	@ 0x6ba
 80033c6:	f003 0301 	and.w	r3, r3, #1
 80033ca:	b29b      	uxth	r3, r3
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d018      	beq.n	8003402 <drawSignal+0x5d2>
 80033d0:	f8b7 36bc 	ldrh.w	r3, [r7, #1724]	@ 0x6bc
 80033d4:	f003 0301 	and.w	r3, r3, #1
 80033d8:	b29b      	uxth	r3, r3
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d121      	bne.n	8003422 <drawSignal+0x5f2>
 80033de:	f8b7 36ba 	ldrh.w	r3, [r7, #1722]	@ 0x6ba
 80033e2:	f1a3 0114 	sub.w	r1, r3, #20
 80033e6:	4b34      	ldr	r3, [pc, #208]	@ (80034b8 <drawSignal+0x688>)
 80033e8:	fb83 2301 	smull	r2, r3, r3, r1
 80033ec:	10da      	asrs	r2, r3, #3
 80033ee:	17cb      	asrs	r3, r1, #31
 80033f0:	1ad2      	subs	r2, r2, r3
 80033f2:	4613      	mov	r3, r2
 80033f4:	009b      	lsls	r3, r3, #2
 80033f6:	4413      	add	r3, r2
 80033f8:	009a      	lsls	r2, r3, #2
 80033fa:	4413      	add	r3, r2
 80033fc:	1aca      	subs	r2, r1, r3
 80033fe:	2a00      	cmp	r2, #0
 8003400:	d10f      	bne.n	8003422 <drawSignal+0x5f2>
					ILI9341_DrawPixel(display, i + 20, j,  ILI9341_GRAY);
 8003402:	f8b7 36bc 	ldrh.w	r3, [r7, #1724]	@ 0x6bc
 8003406:	3314      	adds	r3, #20
 8003408:	b299      	uxth	r1, r3
 800340a:	f8b7 26ba 	ldrh.w	r2, [r7, #1722]	@ 0x6ba
 800340e:	f507 63da 	add.w	r3, r7, #1744	@ 0x6d0
 8003412:	f2a3 60c4 	subw	r0, r3, #1732	@ 0x6c4
 8003416:	f245 238a 	movw	r3, #21130	@ 0x528a
 800341a:	6800      	ldr	r0, [r0, #0]
 800341c:	f7fe fc2a 	bl	8001c74 <ILI9341_DrawPixel>
 8003420:	e00d      	b.n	800343e <drawSignal+0x60e>
				else
					ILI9341_DrawPixel(display, i + 20, j, ILI9341_BLACK);
 8003422:	f8b7 36bc 	ldrh.w	r3, [r7, #1724]	@ 0x6bc
 8003426:	3314      	adds	r3, #20
 8003428:	b299      	uxth	r1, r3
 800342a:	f8b7 26ba 	ldrh.w	r2, [r7, #1722]	@ 0x6ba
 800342e:	f507 63da 	add.w	r3, r7, #1744	@ 0x6d0
 8003432:	f2a3 60c4 	subw	r0, r3, #1732	@ 0x6c4
 8003436:	2300      	movs	r3, #0
 8003438:	6800      	ldr	r0, [r0, #0]
 800343a:	f7fe fc1b 	bl	8001c74 <ILI9341_DrawPixel>
		for (uint16_t j = min; j <= max; j++) {
 800343e:	f8b7 36ba 	ldrh.w	r3, [r7, #1722]	@ 0x6ba
 8003442:	3301      	adds	r3, #1
 8003444:	f8a7 36ba 	strh.w	r3, [r7, #1722]	@ 0x6ba
 8003448:	f8b7 26ba 	ldrh.w	r2, [r7, #1722]	@ 0x6ba
 800344c:	f8b7 36b4 	ldrh.w	r3, [r7, #1716]	@ 0x6b4
 8003450:	429a      	cmp	r2, r3
 8003452:	f67f af49 	bls.w	80032e8 <drawSignal+0x4b8>
			}
		}

		pixel_dirty[i][0] = pixel[i][0];
 8003456:	f8b7 16bc 	ldrh.w	r1, [r7, #1724]	@ 0x6bc
 800345a:	f8b7 36bc 	ldrh.w	r3, [r7, #1724]	@ 0x6bc
 800345e:	009b      	lsls	r3, r3, #2
 8003460:	f8d7 26e0 	ldr.w	r2, [r7, #1760]	@ 0x6e0
 8003464:	4413      	add	r3, r2
 8003466:	f507 62da 	add.w	r2, r7, #1744	@ 0x6d0
 800346a:	f5a2 62d8 	sub.w	r2, r2, #1728	@ 0x6c0
 800346e:	f832 2021 	ldrh.w	r2, [r2, r1, lsl #2]
 8003472:	801a      	strh	r2, [r3, #0]
		pixel_dirty[i][1] = pixel[i][1];
 8003474:	f8b7 36bc 	ldrh.w	r3, [r7, #1724]	@ 0x6bc
 8003478:	f8b7 26bc 	ldrh.w	r2, [r7, #1724]	@ 0x6bc
 800347c:	0092      	lsls	r2, r2, #2
 800347e:	f8d7 16e0 	ldr.w	r1, [r7, #1760]	@ 0x6e0
 8003482:	440a      	add	r2, r1
 8003484:	f507 61da 	add.w	r1, r7, #1744	@ 0x6d0
 8003488:	f5a1 61d8 	sub.w	r1, r1, #1728	@ 0x6c0
 800348c:	009b      	lsls	r3, r3, #2
 800348e:	440b      	add	r3, r1
 8003490:	885b      	ldrh	r3, [r3, #2]
 8003492:	8053      	strh	r3, [r2, #2]
	for (uint16_t i = 1; i <= 279; i++) {
 8003494:	f8b7 36bc 	ldrh.w	r3, [r7, #1724]	@ 0x6bc
 8003498:	3301      	adds	r3, #1
 800349a:	f8a7 36bc 	strh.w	r3, [r7, #1724]	@ 0x6bc
 800349e:	f8b7 36bc 	ldrh.w	r3, [r7, #1724]	@ 0x6bc
 80034a2:	f5b3 7f8c 	cmp.w	r3, #280	@ 0x118
 80034a6:	f4ff aef1 	bcc.w	800328c <drawSignal+0x45c>
 80034aa:	e000      	b.n	80034ae <drawSignal+0x67e>
			return;
 80034ac:	bf00      	nop
	}
}
 80034ae:	f207 67d4 	addw	r7, r7, #1748	@ 0x6d4
 80034b2:	46bd      	mov	sp, r7
 80034b4:	bd90      	pop	{r4, r7, pc}
 80034b6:	bf00      	nop
 80034b8:	51eb851f 	.word	0x51eb851f

080034bc <clearSignal>:

static void clearSignal(ILI9341TypeDef *display, uint16_t pixel_dirty[280][2])
{
 80034bc:	b580      	push	{r7, lr}
 80034be:	b084      	sub	sp, #16
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	6078      	str	r0, [r7, #4]
 80034c4:	6039      	str	r1, [r7, #0]
	for (uint16_t i = 1; i <= 279; i++) {
 80034c6:	2301      	movs	r3, #1
 80034c8:	81fb      	strh	r3, [r7, #14]
 80034ca:	e05d      	b.n	8003588 <clearSignal+0xcc>
		for (uint16_t j = pixel_dirty[i][0]; j <= pixel_dirty[i][1]; j++) {
 80034cc:	89fb      	ldrh	r3, [r7, #14]
 80034ce:	009b      	lsls	r3, r3, #2
 80034d0:	683a      	ldr	r2, [r7, #0]
 80034d2:	4413      	add	r3, r2
 80034d4:	881b      	ldrh	r3, [r3, #0]
 80034d6:	81bb      	strh	r3, [r7, #12]
 80034d8:	e03f      	b.n	800355a <clearSignal+0x9e>
			if (((i % 25) == 0 && (j % 2) == 0) || ((i % 2) == 0 && ((j - 20) % 25) == 0))
 80034da:	89fa      	ldrh	r2, [r7, #14]
 80034dc:	4b2f      	ldr	r3, [pc, #188]	@ (800359c <clearSignal+0xe0>)
 80034de:	fba3 1302 	umull	r1, r3, r3, r2
 80034e2:	08d9      	lsrs	r1, r3, #3
 80034e4:	460b      	mov	r3, r1
 80034e6:	009b      	lsls	r3, r3, #2
 80034e8:	440b      	add	r3, r1
 80034ea:	0099      	lsls	r1, r3, #2
 80034ec:	440b      	add	r3, r1
 80034ee:	1ad3      	subs	r3, r2, r3
 80034f0:	b29b      	uxth	r3, r3
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d105      	bne.n	8003502 <clearSignal+0x46>
 80034f6:	89bb      	ldrh	r3, [r7, #12]
 80034f8:	f003 0301 	and.w	r3, r3, #1
 80034fc:	b29b      	uxth	r3, r3
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d016      	beq.n	8003530 <clearSignal+0x74>
 8003502:	89fb      	ldrh	r3, [r7, #14]
 8003504:	f003 0301 	and.w	r3, r3, #1
 8003508:	b29b      	uxth	r3, r3
 800350a:	2b00      	cmp	r3, #0
 800350c:	d11a      	bne.n	8003544 <clearSignal+0x88>
 800350e:	89bb      	ldrh	r3, [r7, #12]
 8003510:	f1a3 0114 	sub.w	r1, r3, #20
 8003514:	4b21      	ldr	r3, [pc, #132]	@ (800359c <clearSignal+0xe0>)
 8003516:	fb83 2301 	smull	r2, r3, r3, r1
 800351a:	10da      	asrs	r2, r3, #3
 800351c:	17cb      	asrs	r3, r1, #31
 800351e:	1ad2      	subs	r2, r2, r3
 8003520:	4613      	mov	r3, r2
 8003522:	009b      	lsls	r3, r3, #2
 8003524:	4413      	add	r3, r2
 8003526:	009a      	lsls	r2, r3, #2
 8003528:	4413      	add	r3, r2
 800352a:	1aca      	subs	r2, r1, r3
 800352c:	2a00      	cmp	r2, #0
 800352e:	d109      	bne.n	8003544 <clearSignal+0x88>
				ILI9341_DrawPixel(display, i + 20, j,  ILI9341_GRAY);
 8003530:	89fb      	ldrh	r3, [r7, #14]
 8003532:	3314      	adds	r3, #20
 8003534:	b299      	uxth	r1, r3
 8003536:	89ba      	ldrh	r2, [r7, #12]
 8003538:	f245 238a 	movw	r3, #21130	@ 0x528a
 800353c:	6878      	ldr	r0, [r7, #4]
 800353e:	f7fe fb99 	bl	8001c74 <ILI9341_DrawPixel>
 8003542:	e007      	b.n	8003554 <clearSignal+0x98>
			else
				ILI9341_DrawPixel(display, i + 20, j, ILI9341_BLACK);
 8003544:	89fb      	ldrh	r3, [r7, #14]
 8003546:	3314      	adds	r3, #20
 8003548:	b299      	uxth	r1, r3
 800354a:	89ba      	ldrh	r2, [r7, #12]
 800354c:	2300      	movs	r3, #0
 800354e:	6878      	ldr	r0, [r7, #4]
 8003550:	f7fe fb90 	bl	8001c74 <ILI9341_DrawPixel>
		for (uint16_t j = pixel_dirty[i][0]; j <= pixel_dirty[i][1]; j++) {
 8003554:	89bb      	ldrh	r3, [r7, #12]
 8003556:	3301      	adds	r3, #1
 8003558:	81bb      	strh	r3, [r7, #12]
 800355a:	89fb      	ldrh	r3, [r7, #14]
 800355c:	009b      	lsls	r3, r3, #2
 800355e:	683a      	ldr	r2, [r7, #0]
 8003560:	4413      	add	r3, r2
 8003562:	885b      	ldrh	r3, [r3, #2]
 8003564:	89ba      	ldrh	r2, [r7, #12]
 8003566:	429a      	cmp	r2, r3
 8003568:	d9b7      	bls.n	80034da <clearSignal+0x1e>
		}

		pixel_dirty[i][0] = 0;
 800356a:	89fb      	ldrh	r3, [r7, #14]
 800356c:	009b      	lsls	r3, r3, #2
 800356e:	683a      	ldr	r2, [r7, #0]
 8003570:	4413      	add	r3, r2
 8003572:	2200      	movs	r2, #0
 8003574:	801a      	strh	r2, [r3, #0]
		pixel_dirty[i][1] = 0;
 8003576:	89fb      	ldrh	r3, [r7, #14]
 8003578:	009b      	lsls	r3, r3, #2
 800357a:	683a      	ldr	r2, [r7, #0]
 800357c:	4413      	add	r3, r2
 800357e:	2200      	movs	r2, #0
 8003580:	805a      	strh	r2, [r3, #2]
	for (uint16_t i = 1; i <= 279; i++) {
 8003582:	89fb      	ldrh	r3, [r7, #14]
 8003584:	3301      	adds	r3, #1
 8003586:	81fb      	strh	r3, [r7, #14]
 8003588:	89fb      	ldrh	r3, [r7, #14]
 800358a:	f5b3 7f8c 	cmp.w	r3, #280	@ 0x118
 800358e:	d39d      	bcc.n	80034cc <clearSignal+0x10>
	}
}
 8003590:	bf00      	nop
 8003592:	bf00      	nop
 8003594:	3710      	adds	r7, #16
 8003596:	46bd      	mov	sp, r7
 8003598:	bd80      	pop	{r7, pc}
 800359a:	bf00      	nop
 800359c:	51eb851f 	.word	0x51eb851f

080035a0 <drawSignalParam>:

static void drawSignalParam(ILI9341TypeDef *display, char *string, size_t size, uint16_t adc_max, uint16_t adc_min, uint32_t adc_period)
{
 80035a0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80035a4:	b096      	sub	sp, #88	@ 0x58
 80035a6:	af0c      	add	r7, sp, #48	@ 0x30
 80035a8:	60f8      	str	r0, [r7, #12]
 80035aa:	60b9      	str	r1, [r7, #8]
 80035ac:	607a      	str	r2, [r7, #4]
 80035ae:	807b      	strh	r3, [r7, #2]
	float max  = (float)(adc_max) * 3300000.0f / 4096.0f;
 80035b0:	887b      	ldrh	r3, [r7, #2]
 80035b2:	ee07 3a90 	vmov	s15, r3
 80035b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80035ba:	ed9f 7a7f 	vldr	s14, [pc, #508]	@ 80037b8 <drawSignalParam+0x218>
 80035be:	ee27 7a87 	vmul.f32	s14, s15, s14
 80035c2:	eddf 6a7e 	vldr	s13, [pc, #504]	@ 80037bc <drawSignalParam+0x21c>
 80035c6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80035ca:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
	float min  = (float)(adc_min) * 3300000.0f / 4096.0f;
 80035ce:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80035d2:	ee07 3a90 	vmov	s15, r3
 80035d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80035da:	ed9f 7a77 	vldr	s14, [pc, #476]	@ 80037b8 <drawSignalParam+0x218>
 80035de:	ee27 7a87 	vmul.f32	s14, s15, s14
 80035e2:	eddf 6a76 	vldr	s13, [pc, #472]	@ 80037bc <drawSignalParam+0x21c>
 80035e6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80035ea:	edc7 7a08 	vstr	s15, [r7, #32]
	float freq = 1.0f / ((float)(adc_period) / 1000000.0f);
 80035ee:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80035f0:	ee07 3a90 	vmov	s15, r3
 80035f4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80035f8:	eddf 6a71 	vldr	s13, [pc, #452]	@ 80037c0 <drawSignalParam+0x220>
 80035fc:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8003600:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003604:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003608:	edc7 7a07 	vstr	s15, [r7, #28]
	char *max_postfix  = "";
 800360c:	4b6d      	ldr	r3, [pc, #436]	@ (80037c4 <drawSignalParam+0x224>)
 800360e:	61bb      	str	r3, [r7, #24]
	char *min_postfix  = "";
 8003610:	4b6c      	ldr	r3, [pc, #432]	@ (80037c4 <drawSignalParam+0x224>)
 8003612:	617b      	str	r3, [r7, #20]
	char *freq_postfix = "";
 8003614:	4b6b      	ldr	r3, [pc, #428]	@ (80037c4 <drawSignalParam+0x224>)
 8003616:	613b      	str	r3, [r7, #16]

	if (max >= 1000000.0f) {
 8003618:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 800361c:	ed9f 7a68 	vldr	s14, [pc, #416]	@ 80037c0 <drawSignalParam+0x220>
 8003620:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003624:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003628:	db0a      	blt.n	8003640 <drawSignalParam+0xa0>
		max /= 1000000.0f;
 800362a:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 800362e:	eddf 6a64 	vldr	s13, [pc, #400]	@ 80037c0 <drawSignalParam+0x220>
 8003632:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003636:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
		max_postfix = " V";
 800363a:	4b63      	ldr	r3, [pc, #396]	@ (80037c8 <drawSignalParam+0x228>)
 800363c:	61bb      	str	r3, [r7, #24]
 800363e:	e015      	b.n	800366c <drawSignalParam+0xcc>
	} else if (max >= 1000.0f) {
 8003640:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8003644:	ed9f 7a61 	vldr	s14, [pc, #388]	@ 80037cc <drawSignalParam+0x22c>
 8003648:	eef4 7ac7 	vcmpe.f32	s15, s14
 800364c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003650:	db0a      	blt.n	8003668 <drawSignalParam+0xc8>
		max /= 1000.0f;
 8003652:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8003656:	eddf 6a5d 	vldr	s13, [pc, #372]	@ 80037cc <drawSignalParam+0x22c>
 800365a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800365e:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
		max_postfix = "mV";
 8003662:	4b5b      	ldr	r3, [pc, #364]	@ (80037d0 <drawSignalParam+0x230>)
 8003664:	61bb      	str	r3, [r7, #24]
 8003666:	e001      	b.n	800366c <drawSignalParam+0xcc>
	} else
		max_postfix = "uV";
 8003668:	4b5a      	ldr	r3, [pc, #360]	@ (80037d4 <drawSignalParam+0x234>)
 800366a:	61bb      	str	r3, [r7, #24]

	if (min >= 1000000.0f) {
 800366c:	edd7 7a08 	vldr	s15, [r7, #32]
 8003670:	ed9f 7a53 	vldr	s14, [pc, #332]	@ 80037c0 <drawSignalParam+0x220>
 8003674:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003678:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800367c:	db0a      	blt.n	8003694 <drawSignalParam+0xf4>
		min /= 1000000.0f;
 800367e:	ed97 7a08 	vldr	s14, [r7, #32]
 8003682:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 80037c0 <drawSignalParam+0x220>
 8003686:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800368a:	edc7 7a08 	vstr	s15, [r7, #32]
		min_postfix = " V";
 800368e:	4b4e      	ldr	r3, [pc, #312]	@ (80037c8 <drawSignalParam+0x228>)
 8003690:	617b      	str	r3, [r7, #20]
 8003692:	e015      	b.n	80036c0 <drawSignalParam+0x120>
	} else if (min >= 1000.0f) {
 8003694:	edd7 7a08 	vldr	s15, [r7, #32]
 8003698:	ed9f 7a4c 	vldr	s14, [pc, #304]	@ 80037cc <drawSignalParam+0x22c>
 800369c:	eef4 7ac7 	vcmpe.f32	s15, s14
 80036a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80036a4:	db0a      	blt.n	80036bc <drawSignalParam+0x11c>
		min /= 1000.0f;
 80036a6:	ed97 7a08 	vldr	s14, [r7, #32]
 80036aa:	eddf 6a48 	vldr	s13, [pc, #288]	@ 80037cc <drawSignalParam+0x22c>
 80036ae:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80036b2:	edc7 7a08 	vstr	s15, [r7, #32]
		min_postfix = "mV";
 80036b6:	4b46      	ldr	r3, [pc, #280]	@ (80037d0 <drawSignalParam+0x230>)
 80036b8:	617b      	str	r3, [r7, #20]
 80036ba:	e001      	b.n	80036c0 <drawSignalParam+0x120>
	} else
		min_postfix = "uV";
 80036bc:	4b45      	ldr	r3, [pc, #276]	@ (80037d4 <drawSignalParam+0x234>)
 80036be:	617b      	str	r3, [r7, #20]

	if (freq >= 1000000.0f) {
 80036c0:	edd7 7a07 	vldr	s15, [r7, #28]
 80036c4:	ed9f 7a3e 	vldr	s14, [pc, #248]	@ 80037c0 <drawSignalParam+0x220>
 80036c8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80036cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80036d0:	db0a      	blt.n	80036e8 <drawSignalParam+0x148>
		freq /= 1000000.0f;
 80036d2:	ed97 7a07 	vldr	s14, [r7, #28]
 80036d6:	eddf 6a3a 	vldr	s13, [pc, #232]	@ 80037c0 <drawSignalParam+0x220>
 80036da:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80036de:	edc7 7a07 	vstr	s15, [r7, #28]
		freq_postfix = "MHz";
 80036e2:	4b3d      	ldr	r3, [pc, #244]	@ (80037d8 <drawSignalParam+0x238>)
 80036e4:	613b      	str	r3, [r7, #16]
 80036e6:	e015      	b.n	8003714 <drawSignalParam+0x174>
	} else if (freq >= 1000.0f) {
 80036e8:	edd7 7a07 	vldr	s15, [r7, #28]
 80036ec:	ed9f 7a37 	vldr	s14, [pc, #220]	@ 80037cc <drawSignalParam+0x22c>
 80036f0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80036f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80036f8:	db0a      	blt.n	8003710 <drawSignalParam+0x170>
		freq /= 1000.0f;
 80036fa:	ed97 7a07 	vldr	s14, [r7, #28]
 80036fe:	eddf 6a33 	vldr	s13, [pc, #204]	@ 80037cc <drawSignalParam+0x22c>
 8003702:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003706:	edc7 7a07 	vstr	s15, [r7, #28]
		freq_postfix = "kHz";
 800370a:	4b34      	ldr	r3, [pc, #208]	@ (80037dc <drawSignalParam+0x23c>)
 800370c:	613b      	str	r3, [r7, #16]
 800370e:	e001      	b.n	8003714 <drawSignalParam+0x174>
	} else
		freq_postfix = " Hz";
 8003710:	4b33      	ldr	r3, [pc, #204]	@ (80037e0 <drawSignalParam+0x240>)
 8003712:	613b      	str	r3, [r7, #16]

	if (adc_period != 0)
 8003714:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003716:	2b00      	cmp	r3, #0
 8003718:	d020      	beq.n	800375c <drawSignalParam+0x1bc>
		snprintf(string, size, "ampl:%3.1f%s~%3.1f%s freq:%3.0f%s  ", min, min_postfix, max, max_postfix, freq, freq_postfix);
 800371a:	6a38      	ldr	r0, [r7, #32]
 800371c:	f7fc ff1c 	bl	8000558 <__aeabi_f2d>
 8003720:	4604      	mov	r4, r0
 8003722:	460d      	mov	r5, r1
 8003724:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8003726:	f7fc ff17 	bl	8000558 <__aeabi_f2d>
 800372a:	4680      	mov	r8, r0
 800372c:	4689      	mov	r9, r1
 800372e:	69f8      	ldr	r0, [r7, #28]
 8003730:	f7fc ff12 	bl	8000558 <__aeabi_f2d>
 8003734:	4602      	mov	r2, r0
 8003736:	460b      	mov	r3, r1
 8003738:	6939      	ldr	r1, [r7, #16]
 800373a:	910a      	str	r1, [sp, #40]	@ 0x28
 800373c:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8003740:	69bb      	ldr	r3, [r7, #24]
 8003742:	9306      	str	r3, [sp, #24]
 8003744:	e9cd 8904 	strd	r8, r9, [sp, #16]
 8003748:	697b      	ldr	r3, [r7, #20]
 800374a:	9302      	str	r3, [sp, #8]
 800374c:	e9cd 4500 	strd	r4, r5, [sp]
 8003750:	4a24      	ldr	r2, [pc, #144]	@ (80037e4 <drawSignalParam+0x244>)
 8003752:	6879      	ldr	r1, [r7, #4]
 8003754:	68b8      	ldr	r0, [r7, #8]
 8003756:	f008 fa5f 	bl	800bc18 <sniprintf>
 800375a:	e016      	b.n	800378a <drawSignalParam+0x1ea>
	else
		snprintf(string, size, "ampl:%3.1f%s~%3.1f%s freq:??? Hz  ", min, min_postfix, max, max_postfix);
 800375c:	6a38      	ldr	r0, [r7, #32]
 800375e:	f7fc fefb 	bl	8000558 <__aeabi_f2d>
 8003762:	4604      	mov	r4, r0
 8003764:	460d      	mov	r5, r1
 8003766:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8003768:	f7fc fef6 	bl	8000558 <__aeabi_f2d>
 800376c:	4602      	mov	r2, r0
 800376e:	460b      	mov	r3, r1
 8003770:	69b9      	ldr	r1, [r7, #24]
 8003772:	9106      	str	r1, [sp, #24]
 8003774:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8003778:	697b      	ldr	r3, [r7, #20]
 800377a:	9302      	str	r3, [sp, #8]
 800377c:	e9cd 4500 	strd	r4, r5, [sp]
 8003780:	4a19      	ldr	r2, [pc, #100]	@ (80037e8 <drawSignalParam+0x248>)
 8003782:	6879      	ldr	r1, [r7, #4]
 8003784:	68b8      	ldr	r0, [r7, #8]
 8003786:	f008 fa47 	bl	800bc18 <sniprintf>

	ILI9341_WriteString(display, 98, 225, string, Font_7x10, ILI9341_WHITE, ILI9341_BLACK);
 800378a:	2300      	movs	r3, #0
 800378c:	9303      	str	r3, [sp, #12]
 800378e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003792:	9302      	str	r3, [sp, #8]
 8003794:	4a15      	ldr	r2, [pc, #84]	@ (80037ec <drawSignalParam+0x24c>)
 8003796:	466b      	mov	r3, sp
 8003798:	e892 0003 	ldmia.w	r2, {r0, r1}
 800379c:	e883 0003 	stmia.w	r3, {r0, r1}
 80037a0:	68bb      	ldr	r3, [r7, #8]
 80037a2:	22e1      	movs	r2, #225	@ 0xe1
 80037a4:	2162      	movs	r1, #98	@ 0x62
 80037a6:	68f8      	ldr	r0, [r7, #12]
 80037a8:	f7fe fc87 	bl	80020ba <ILI9341_WriteString>
}
 80037ac:	bf00      	nop
 80037ae:	3728      	adds	r7, #40	@ 0x28
 80037b0:	46bd      	mov	sp, r7
 80037b2:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80037b6:	bf00      	nop
 80037b8:	4a496a80 	.word	0x4a496a80
 80037bc:	45800000 	.word	0x45800000
 80037c0:	49742400 	.word	0x49742400
 80037c4:	0800f59c 	.word	0x0800f59c
 80037c8:	0800f5a0 	.word	0x0800f5a0
 80037cc:	447a0000 	.word	0x447a0000
 80037d0:	0800f5a4 	.word	0x0800f5a4
 80037d4:	0800f5a8 	.word	0x0800f5a8
 80037d8:	0800f5ac 	.word	0x0800f5ac
 80037dc:	0800f5b0 	.word	0x0800f5b0
 80037e0:	0800f5b4 	.word	0x0800f5b4
 80037e4:	0800f5b8 	.word	0x0800f5b8
 80037e8:	0800f5dc 	.word	0x0800f5dc
 80037ec:	20000000 	.word	0x20000000

080037f0 <Oscilloscope_Process>:

void Oscilloscope_Process(void)
{
 80037f0:	b5b0      	push	{r4, r5, r7, lr}
 80037f2:	f5ad 7d00 	sub.w	sp, sp, #512	@ 0x200
 80037f6:	af04      	add	r7, sp, #16
	// Draw axis
	if (event_axis) {
 80037f8:	4ba2      	ldr	r3, [pc, #648]	@ (8003a84 <Oscilloscope_Process+0x294>)
 80037fa:	781b      	ldrb	r3, [r3, #0]
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d005      	beq.n	800380c <Oscilloscope_Process+0x1c>
		drawAxis(&display);
 8003800:	48a1      	ldr	r0, [pc, #644]	@ (8003a88 <Oscilloscope_Process+0x298>)
 8003802:	f7ff f9c3 	bl	8002b8c <drawAxis>
		event_axis = 0;
 8003806:	4b9f      	ldr	r3, [pc, #636]	@ (8003a84 <Oscilloscope_Process+0x294>)
 8003808:	2200      	movs	r2, #0
 800380a:	701a      	strb	r2, [r3, #0]
	}

	uint8_t local_event_adc = 0;
 800380c:	2300      	movs	r3, #0
 800380e:	f887 31ef 	strb.w	r3, [r7, #495]	@ 0x1ef
	if (event_adc) {
 8003812:	4b9e      	ldr	r3, [pc, #632]	@ (8003a8c <Oscilloscope_Process+0x29c>)
 8003814:	781b      	ldrb	r3, [r3, #0]
 8003816:	2b00      	cmp	r3, #0
 8003818:	d005      	beq.n	8003826 <Oscilloscope_Process+0x36>
		local_event_adc = 1;
 800381a:	2301      	movs	r3, #1
 800381c:	f887 31ef 	strb.w	r3, [r7, #495]	@ 0x1ef
		event_adc = 0;
 8003820:	4b9a      	ldr	r3, [pc, #616]	@ (8003a8c <Oscilloscope_Process+0x29c>)
 8003822:	2200      	movs	r2, #0
 8003824:	701a      	strb	r2, [r3, #0]
	}

	// Draw signals
	if (local_event_adc) {
 8003826:	f897 31ef 	ldrb.w	r3, [r7, #495]	@ 0x1ef
 800382a:	2b00      	cmp	r3, #0
 800382c:	d027      	beq.n	800387e <Oscilloscope_Process+0x8e>

		if (menu_channel0_enabled)
 800382e:	4b98      	ldr	r3, [pc, #608]	@ (8003a90 <Oscilloscope_Process+0x2a0>)
 8003830:	781b      	ldrb	r3, [r3, #0]
 8003832:	2b00      	cmp	r3, #0
 8003834:	d00f      	beq.n	8003856 <Oscilloscope_Process+0x66>
			drawSignal(&display, adc0_time, adc0, adc0_length, pixel_dirty0, cursor0, ILI9341_YELLOW);
 8003836:	4b97      	ldr	r3, [pc, #604]	@ (8003a94 <Oscilloscope_Process+0x2a4>)
 8003838:	681a      	ldr	r2, [r3, #0]
 800383a:	4b97      	ldr	r3, [pc, #604]	@ (8003a98 <Oscilloscope_Process+0x2a8>)
 800383c:	881b      	ldrh	r3, [r3, #0]
 800383e:	f64f 71e0 	movw	r1, #65504	@ 0xffe0
 8003842:	9102      	str	r1, [sp, #8]
 8003844:	9301      	str	r3, [sp, #4]
 8003846:	4b95      	ldr	r3, [pc, #596]	@ (8003a9c <Oscilloscope_Process+0x2ac>)
 8003848:	9300      	str	r3, [sp, #0]
 800384a:	4613      	mov	r3, r2
 800384c:	4a94      	ldr	r2, [pc, #592]	@ (8003aa0 <Oscilloscope_Process+0x2b0>)
 800384e:	4995      	ldr	r1, [pc, #596]	@ (8003aa4 <Oscilloscope_Process+0x2b4>)
 8003850:	488d      	ldr	r0, [pc, #564]	@ (8003a88 <Oscilloscope_Process+0x298>)
 8003852:	f7ff faed 	bl	8002e30 <drawSignal>

		if (menu_channel1_enabled)
 8003856:	4b94      	ldr	r3, [pc, #592]	@ (8003aa8 <Oscilloscope_Process+0x2b8>)
 8003858:	781b      	ldrb	r3, [r3, #0]
 800385a:	2b00      	cmp	r3, #0
 800385c:	d00f      	beq.n	800387e <Oscilloscope_Process+0x8e>
			drawSignal(&display, adc1_time, adc1, adc1_length, pixel_dirty1, cursor1, ILI9341_CYAN);
 800385e:	4b93      	ldr	r3, [pc, #588]	@ (8003aac <Oscilloscope_Process+0x2bc>)
 8003860:	681a      	ldr	r2, [r3, #0]
 8003862:	4b93      	ldr	r3, [pc, #588]	@ (8003ab0 <Oscilloscope_Process+0x2c0>)
 8003864:	881b      	ldrh	r3, [r3, #0]
 8003866:	f240 71ff 	movw	r1, #2047	@ 0x7ff
 800386a:	9102      	str	r1, [sp, #8]
 800386c:	9301      	str	r3, [sp, #4]
 800386e:	4b91      	ldr	r3, [pc, #580]	@ (8003ab4 <Oscilloscope_Process+0x2c4>)
 8003870:	9300      	str	r3, [sp, #0]
 8003872:	4613      	mov	r3, r2
 8003874:	4a90      	ldr	r2, [pc, #576]	@ (8003ab8 <Oscilloscope_Process+0x2c8>)
 8003876:	4991      	ldr	r1, [pc, #580]	@ (8003abc <Oscilloscope_Process+0x2cc>)
 8003878:	4883      	ldr	r0, [pc, #524]	@ (8003a88 <Oscilloscope_Process+0x298>)
 800387a:	f7ff fad9 	bl	8002e30 <drawSignal>
	}

	  char string[255];

	// Draw FPS
	if (frames > 60) {
 800387e:	4b90      	ldr	r3, [pc, #576]	@ (8003ac0 <Oscilloscope_Process+0x2d0>)
 8003880:	781b      	ldrb	r3, [r3, #0]
 8003882:	2b3c      	cmp	r3, #60	@ 0x3c
 8003884:	d934      	bls.n	80038f0 <Oscilloscope_Process+0x100>
		snprintf(string, 255, "FPS: %5i", (int)(1000.0f / ((float)(HAL_GetTick() - frames_ticks) / 60.0f)));
 8003886:	f001 fe49 	bl	800551c <HAL_GetTick>
 800388a:	4602      	mov	r2, r0
 800388c:	4b8d      	ldr	r3, [pc, #564]	@ (8003ac4 <Oscilloscope_Process+0x2d4>)
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	1ad3      	subs	r3, r2, r3
 8003892:	ee07 3a90 	vmov	s15, r3
 8003896:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800389a:	eddf 6a8b 	vldr	s13, [pc, #556]	@ 8003ac8 <Oscilloscope_Process+0x2d8>
 800389e:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80038a2:	eddf 6a8a 	vldr	s13, [pc, #552]	@ 8003acc <Oscilloscope_Process+0x2dc>
 80038a6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80038aa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80038ae:	f107 00cc 	add.w	r0, r7, #204	@ 0xcc
 80038b2:	ee17 3a90 	vmov	r3, s15
 80038b6:	4a86      	ldr	r2, [pc, #536]	@ (8003ad0 <Oscilloscope_Process+0x2e0>)
 80038b8:	21ff      	movs	r1, #255	@ 0xff
 80038ba:	f008 f9ad 	bl	800bc18 <sniprintf>
		ILI9341_WriteString(&display, 225, 5, string, Font_7x10, ILI9341_WHITE, ILI9341_BLACK);
 80038be:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 80038c2:	2200      	movs	r2, #0
 80038c4:	9203      	str	r2, [sp, #12]
 80038c6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80038ca:	9202      	str	r2, [sp, #8]
 80038cc:	4981      	ldr	r1, [pc, #516]	@ (8003ad4 <Oscilloscope_Process+0x2e4>)
 80038ce:	466a      	mov	r2, sp
 80038d0:	c903      	ldmia	r1, {r0, r1}
 80038d2:	e882 0003 	stmia.w	r2, {r0, r1}
 80038d6:	2205      	movs	r2, #5
 80038d8:	21e1      	movs	r1, #225	@ 0xe1
 80038da:	486b      	ldr	r0, [pc, #428]	@ (8003a88 <Oscilloscope_Process+0x298>)
 80038dc:	f7fe fbed 	bl	80020ba <ILI9341_WriteString>

		frames = 0;
 80038e0:	4b77      	ldr	r3, [pc, #476]	@ (8003ac0 <Oscilloscope_Process+0x2d0>)
 80038e2:	2200      	movs	r2, #0
 80038e4:	701a      	strb	r2, [r3, #0]
		frames_ticks = HAL_GetTick();
 80038e6:	f001 fe19 	bl	800551c <HAL_GetTick>
 80038ea:	4603      	mov	r3, r0
 80038ec:	4a75      	ldr	r2, [pc, #468]	@ (8003ac4 <Oscilloscope_Process+0x2d4>)
 80038ee:	6013      	str	r3, [r2, #0]
	}

	// Handle button events
	if (event_button0) {
 80038f0:	4b79      	ldr	r3, [pc, #484]	@ (8003ad8 <Oscilloscope_Process+0x2e8>)
 80038f2:	781b      	ldrb	r3, [r3, #0]
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d038      	beq.n	800396a <Oscilloscope_Process+0x17a>

		if (!menu_extended) {
 80038f8:	4b78      	ldr	r3, [pc, #480]	@ (8003adc <Oscilloscope_Process+0x2ec>)
 80038fa:	781b      	ldrb	r3, [r3, #0]
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d131      	bne.n	8003964 <Oscilloscope_Process+0x174>
			ILI9341_Rectangle(&display, menu_selector_x, menu_selector_y, 38, 13, ILI9341_BLACK);
 8003900:	4b77      	ldr	r3, [pc, #476]	@ (8003ae0 <Oscilloscope_Process+0x2f0>)
 8003902:	8819      	ldrh	r1, [r3, #0]
 8003904:	4b77      	ldr	r3, [pc, #476]	@ (8003ae4 <Oscilloscope_Process+0x2f4>)
 8003906:	881a      	ldrh	r2, [r3, #0]
 8003908:	2300      	movs	r3, #0
 800390a:	9301      	str	r3, [sp, #4]
 800390c:	230d      	movs	r3, #13
 800390e:	9300      	str	r3, [sp, #0]
 8003910:	2326      	movs	r3, #38	@ 0x26
 8003912:	485d      	ldr	r0, [pc, #372]	@ (8003a88 <Oscilloscope_Process+0x298>)
 8003914:	f7fe fb16 	bl	8001f44 <ILI9341_Rectangle>

			menu_selected_item++;
 8003918:	4b73      	ldr	r3, [pc, #460]	@ (8003ae8 <Oscilloscope_Process+0x2f8>)
 800391a:	f993 3000 	ldrsb.w	r3, [r3]
 800391e:	b2db      	uxtb	r3, r3
 8003920:	3301      	adds	r3, #1
 8003922:	b2db      	uxtb	r3, r3
 8003924:	b25a      	sxtb	r2, r3
 8003926:	4b70      	ldr	r3, [pc, #448]	@ (8003ae8 <Oscilloscope_Process+0x2f8>)
 8003928:	701a      	strb	r2, [r3, #0]

			if (menu_selected_item > 3)
 800392a:	4b6f      	ldr	r3, [pc, #444]	@ (8003ae8 <Oscilloscope_Process+0x2f8>)
 800392c:	f993 3000 	ldrsb.w	r3, [r3]
 8003930:	2b03      	cmp	r3, #3
 8003932:	dd02      	ble.n	800393a <Oscilloscope_Process+0x14a>
				menu_selected_item = 2;
 8003934:	4b6c      	ldr	r3, [pc, #432]	@ (8003ae8 <Oscilloscope_Process+0x2f8>)
 8003936:	2202      	movs	r2, #2
 8003938:	701a      	strb	r2, [r3, #0]

			menu_selector_x = 20 + 38 * menu_selected_item;
 800393a:	4b6b      	ldr	r3, [pc, #428]	@ (8003ae8 <Oscilloscope_Process+0x2f8>)
 800393c:	f993 3000 	ldrsb.w	r3, [r3]
 8003940:	b29b      	uxth	r3, r3
 8003942:	461a      	mov	r2, r3
 8003944:	00d2      	lsls	r2, r2, #3
 8003946:	441a      	add	r2, r3
 8003948:	0052      	lsls	r2, r2, #1
 800394a:	4413      	add	r3, r2
 800394c:	005b      	lsls	r3, r3, #1
 800394e:	b29b      	uxth	r3, r3
 8003950:	3314      	adds	r3, #20
 8003952:	b29a      	uxth	r2, r3
 8003954:	4b62      	ldr	r3, [pc, #392]	@ (8003ae0 <Oscilloscope_Process+0x2f0>)
 8003956:	801a      	strh	r2, [r3, #0]
			menu_selector_y = 3;
 8003958:	4b62      	ldr	r3, [pc, #392]	@ (8003ae4 <Oscilloscope_Process+0x2f4>)
 800395a:	2203      	movs	r2, #3
 800395c:	801a      	strh	r2, [r3, #0]

			event_selector = 1;
 800395e:	4b63      	ldr	r3, [pc, #396]	@ (8003aec <Oscilloscope_Process+0x2fc>)
 8003960:	2201      	movs	r2, #1
 8003962:	701a      	strb	r2, [r3, #0]
		}

		event_button0 = 0;
 8003964:	4b5c      	ldr	r3, [pc, #368]	@ (8003ad8 <Oscilloscope_Process+0x2e8>)
 8003966:	2200      	movs	r2, #0
 8003968:	701a      	strb	r2, [r3, #0]
	}

	if (event_button1) {
 800396a:	4b61      	ldr	r3, [pc, #388]	@ (8003af0 <Oscilloscope_Process+0x300>)
 800396c:	781b      	ldrb	r3, [r3, #0]
 800396e:	2b00      	cmp	r3, #0
 8003970:	d03e      	beq.n	80039f0 <Oscilloscope_Process+0x200>
		menu_extended = !menu_extended;
 8003972:	4b5a      	ldr	r3, [pc, #360]	@ (8003adc <Oscilloscope_Process+0x2ec>)
 8003974:	781b      	ldrb	r3, [r3, #0]
 8003976:	2b00      	cmp	r3, #0
 8003978:	bf0c      	ite	eq
 800397a:	2301      	moveq	r3, #1
 800397c:	2300      	movne	r3, #0
 800397e:	b2db      	uxtb	r3, r3
 8003980:	461a      	mov	r2, r3
 8003982:	4b56      	ldr	r3, [pc, #344]	@ (8003adc <Oscilloscope_Process+0x2ec>)
 8003984:	701a      	strb	r2, [r3, #0]

		if (!menu_extended) {
 8003986:	4b55      	ldr	r3, [pc, #340]	@ (8003adc <Oscilloscope_Process+0x2ec>)
 8003988:	781b      	ldrb	r3, [r3, #0]
 800398a:	2b00      	cmp	r3, #0
 800398c:	d127      	bne.n	80039de <Oscilloscope_Process+0x1ee>
			ILI9341_Rectangle(&display, menu_selector_x, menu_selector_y, 38, 13, ILI9341_BLACK);
 800398e:	4b54      	ldr	r3, [pc, #336]	@ (8003ae0 <Oscilloscope_Process+0x2f0>)
 8003990:	8819      	ldrh	r1, [r3, #0]
 8003992:	4b54      	ldr	r3, [pc, #336]	@ (8003ae4 <Oscilloscope_Process+0x2f4>)
 8003994:	881a      	ldrh	r2, [r3, #0]
 8003996:	2300      	movs	r3, #0
 8003998:	9301      	str	r3, [sp, #4]
 800399a:	230d      	movs	r3, #13
 800399c:	9300      	str	r3, [sp, #0]
 800399e:	2326      	movs	r3, #38	@ 0x26
 80039a0:	4839      	ldr	r0, [pc, #228]	@ (8003a88 <Oscilloscope_Process+0x298>)
 80039a2:	f7fe facf 	bl	8001f44 <ILI9341_Rectangle>

			menu_selected_item = 2;
 80039a6:	4b50      	ldr	r3, [pc, #320]	@ (8003ae8 <Oscilloscope_Process+0x2f8>)
 80039a8:	2202      	movs	r2, #2
 80039aa:	701a      	strb	r2, [r3, #0]

			menu_selector_x = 20 + 38 * menu_selected_item;
 80039ac:	4b4e      	ldr	r3, [pc, #312]	@ (8003ae8 <Oscilloscope_Process+0x2f8>)
 80039ae:	f993 3000 	ldrsb.w	r3, [r3]
 80039b2:	b29b      	uxth	r3, r3
 80039b4:	461a      	mov	r2, r3
 80039b6:	00d2      	lsls	r2, r2, #3
 80039b8:	441a      	add	r2, r3
 80039ba:	0052      	lsls	r2, r2, #1
 80039bc:	4413      	add	r3, r2
 80039be:	005b      	lsls	r3, r3, #1
 80039c0:	b29b      	uxth	r3, r3
 80039c2:	3314      	adds	r3, #20
 80039c4:	b29a      	uxth	r2, r3
 80039c6:	4b46      	ldr	r3, [pc, #280]	@ (8003ae0 <Oscilloscope_Process+0x2f0>)
 80039c8:	801a      	strh	r2, [r3, #0]
			menu_selector_y = 3;
 80039ca:	4b46      	ldr	r3, [pc, #280]	@ (8003ae4 <Oscilloscope_Process+0x2f4>)
 80039cc:	2203      	movs	r2, #3
 80039ce:	801a      	strh	r2, [r3, #0]

			mode = 0;
 80039d0:	4b48      	ldr	r3, [pc, #288]	@ (8003af4 <Oscilloscope_Process+0x304>)
 80039d2:	2200      	movs	r2, #0
 80039d4:	701a      	strb	r2, [r3, #0]
			event_selector = 1;
 80039d6:	4b45      	ldr	r3, [pc, #276]	@ (8003aec <Oscilloscope_Process+0x2fc>)
 80039d8:	2201      	movs	r2, #1
 80039da:	701a      	strb	r2, [r3, #0]
 80039dc:	e002      	b.n	80039e4 <Oscilloscope_Process+0x1f4>
		} else
			mode = 1;
 80039de:	4b45      	ldr	r3, [pc, #276]	@ (8003af4 <Oscilloscope_Process+0x304>)
 80039e0:	2201      	movs	r2, #1
 80039e2:	701a      	strb	r2, [r3, #0]

		event_mode = 1;
 80039e4:	4b44      	ldr	r3, [pc, #272]	@ (8003af8 <Oscilloscope_Process+0x308>)
 80039e6:	2201      	movs	r2, #1
 80039e8:	701a      	strb	r2, [r3, #0]
		event_button1 = 0;
 80039ea:	4b41      	ldr	r3, [pc, #260]	@ (8003af0 <Oscilloscope_Process+0x300>)
 80039ec:	2200      	movs	r2, #0
 80039ee:	701a      	strb	r2, [r3, #0]
	}

	if (event_button2) {
 80039f0:	4b42      	ldr	r3, [pc, #264]	@ (8003afc <Oscilloscope_Process+0x30c>)
 80039f2:	781b      	ldrb	r3, [r3, #0]
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d039      	beq.n	8003a6c <Oscilloscope_Process+0x27c>
		if (menu_selected_item == 2) {
 80039f8:	4b3b      	ldr	r3, [pc, #236]	@ (8003ae8 <Oscilloscope_Process+0x2f8>)
 80039fa:	f993 3000 	ldrsb.w	r3, [r3]
 80039fe:	2b02      	cmp	r3, #2
 8003a00:	d111      	bne.n	8003a26 <Oscilloscope_Process+0x236>
			menu_channel0_enabled = !menu_channel0_enabled;
 8003a02:	4b23      	ldr	r3, [pc, #140]	@ (8003a90 <Oscilloscope_Process+0x2a0>)
 8003a04:	781b      	ldrb	r3, [r3, #0]
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	bf0c      	ite	eq
 8003a0a:	2301      	moveq	r3, #1
 8003a0c:	2300      	movne	r3, #0
 8003a0e:	b2db      	uxtb	r3, r3
 8003a10:	461a      	mov	r2, r3
 8003a12:	4b1f      	ldr	r3, [pc, #124]	@ (8003a90 <Oscilloscope_Process+0x2a0>)
 8003a14:	701a      	strb	r2, [r3, #0]

			if (!menu_channel0_enabled)
 8003a16:	4b1e      	ldr	r3, [pc, #120]	@ (8003a90 <Oscilloscope_Process+0x2a0>)
 8003a18:	781b      	ldrb	r3, [r3, #0]
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d103      	bne.n	8003a26 <Oscilloscope_Process+0x236>
				clearSignal(&display, pixel_dirty0);
 8003a1e:	491f      	ldr	r1, [pc, #124]	@ (8003a9c <Oscilloscope_Process+0x2ac>)
 8003a20:	4819      	ldr	r0, [pc, #100]	@ (8003a88 <Oscilloscope_Process+0x298>)
 8003a22:	f7ff fd4b 	bl	80034bc <clearSignal>
		}

		if (menu_selected_item == 3) {
 8003a26:	4b30      	ldr	r3, [pc, #192]	@ (8003ae8 <Oscilloscope_Process+0x2f8>)
 8003a28:	f993 3000 	ldrsb.w	r3, [r3]
 8003a2c:	2b03      	cmp	r3, #3
 8003a2e:	d111      	bne.n	8003a54 <Oscilloscope_Process+0x264>
			menu_channel1_enabled = !menu_channel1_enabled;
 8003a30:	4b1d      	ldr	r3, [pc, #116]	@ (8003aa8 <Oscilloscope_Process+0x2b8>)
 8003a32:	781b      	ldrb	r3, [r3, #0]
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	bf0c      	ite	eq
 8003a38:	2301      	moveq	r3, #1
 8003a3a:	2300      	movne	r3, #0
 8003a3c:	b2db      	uxtb	r3, r3
 8003a3e:	461a      	mov	r2, r3
 8003a40:	4b19      	ldr	r3, [pc, #100]	@ (8003aa8 <Oscilloscope_Process+0x2b8>)
 8003a42:	701a      	strb	r2, [r3, #0]

			if (!menu_channel1_enabled)
 8003a44:	4b18      	ldr	r3, [pc, #96]	@ (8003aa8 <Oscilloscope_Process+0x2b8>)
 8003a46:	781b      	ldrb	r3, [r3, #0]
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d103      	bne.n	8003a54 <Oscilloscope_Process+0x264>
				clearSignal(&display, pixel_dirty1);
 8003a4c:	4919      	ldr	r1, [pc, #100]	@ (8003ab4 <Oscilloscope_Process+0x2c4>)
 8003a4e:	480e      	ldr	r0, [pc, #56]	@ (8003a88 <Oscilloscope_Process+0x298>)
 8003a50:	f7ff fd34 	bl	80034bc <clearSignal>
		}

		event_cursor  = 1;
 8003a54:	4b2a      	ldr	r3, [pc, #168]	@ (8003b00 <Oscilloscope_Process+0x310>)
 8003a56:	2201      	movs	r2, #1
 8003a58:	701a      	strb	r2, [r3, #0]
		event_trigger = 1;
 8003a5a:	4b2a      	ldr	r3, [pc, #168]	@ (8003b04 <Oscilloscope_Process+0x314>)
 8003a5c:	2201      	movs	r2, #1
 8003a5e:	701a      	strb	r2, [r3, #0]
		event_channel = 1;
 8003a60:	4b29      	ldr	r3, [pc, #164]	@ (8003b08 <Oscilloscope_Process+0x318>)
 8003a62:	2201      	movs	r2, #1
 8003a64:	701a      	strb	r2, [r3, #0]
		event_button2 = 0;
 8003a66:	4b25      	ldr	r3, [pc, #148]	@ (8003afc <Oscilloscope_Process+0x30c>)
 8003a68:	2200      	movs	r2, #0
 8003a6a:	701a      	strb	r2, [r3, #0]
	}

	// Handle UI redraw channel events
	if (event_channel) {
 8003a6c:	4b26      	ldr	r3, [pc, #152]	@ (8003b08 <Oscilloscope_Process+0x318>)
 8003a6e:	781b      	ldrb	r3, [r3, #0]
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d07f      	beq.n	8003b74 <Oscilloscope_Process+0x384>
		uint16_t channel0_color = menu_channel0_enabled ? ILI9341_YELLOW  : ILI9341_COLOR565(60, 60, 0);
 8003a74:	4b06      	ldr	r3, [pc, #24]	@ (8003a90 <Oscilloscope_Process+0x2a0>)
 8003a76:	781b      	ldrb	r3, [r3, #0]
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d047      	beq.n	8003b0c <Oscilloscope_Process+0x31c>
 8003a7c:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8003a80:	e046      	b.n	8003b10 <Oscilloscope_Process+0x320>
 8003a82:	bf00      	nop
 8003a84:	2000d100 	.word	0x2000d100
 8003a88:	2000d4b8 	.word	0x2000d4b8
 8003a8c:	2001352d 	.word	0x2001352d
 8003a90:	2000d10b 	.word	0x2000d10b
 8003a94:	2000d510 	.word	0x2000d510
 8003a98:	2000d0f4 	.word	0x2000d0f4
 8003a9c:	20013540 	.word	0x20013540
 8003aa0:	2001152c 	.word	0x2001152c
 8003aa4:	2000d52c 	.word	0x2000d52c
 8003aa8:	2000d10c 	.word	0x2000d10c
 8003aac:	2000d514 	.word	0x2000d514
 8003ab0:	2000d0f6 	.word	0x2000d0f6
 8003ab4:	200139a0 	.word	0x200139a0
 8003ab8:	2001252c 	.word	0x2001252c
 8003abc:	2000f52c 	.word	0x2000f52c
 8003ac0:	20013538 	.word	0x20013538
 8003ac4:	2001353c 	.word	0x2001353c
 8003ac8:	42700000 	.word	0x42700000
 8003acc:	447a0000 	.word	0x447a0000
 8003ad0:	0800f600 	.word	0x0800f600
 8003ad4:	20000000 	.word	0x20000000
 8003ad8:	2001352e 	.word	0x2001352e
 8003adc:	20013531 	.word	0x20013531
 8003ae0:	2000d10e 	.word	0x2000d10e
 8003ae4:	2000d110 	.word	0x2000d110
 8003ae8:	2000d10d 	.word	0x2000d10d
 8003aec:	2000d107 	.word	0x2000d107
 8003af0:	2001352f 	.word	0x2001352f
 8003af4:	20013532 	.word	0x20013532
 8003af8:	2000d101 	.word	0x2000d101
 8003afc:	20013530 	.word	0x20013530
 8003b00:	2000d102 	.word	0x2000d102
 8003b04:	2000d103 	.word	0x2000d103
 8003b08:	2000d104 	.word	0x2000d104
 8003b0c:	f643 13e0 	movw	r3, #14816	@ 0x39e0
 8003b10:	f8a7 31de 	strh.w	r3, [r7, #478]	@ 0x1de
		uint16_t channel1_color = menu_channel1_enabled ? ILI9341_CYAN    : ILI9341_COLOR565(0, 60, 60);
 8003b14:	4b5e      	ldr	r3, [pc, #376]	@ (8003c90 <Oscilloscope_Process+0x4a0>)
 8003b16:	781b      	ldrb	r3, [r3, #0]
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d002      	beq.n	8003b22 <Oscilloscope_Process+0x332>
 8003b1c:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 8003b20:	e001      	b.n	8003b26 <Oscilloscope_Process+0x336>
 8003b22:	f240 13e7 	movw	r3, #487	@ 0x1e7
 8003b26:	f8a7 31dc 	strh.w	r3, [r7, #476]	@ 0x1dc

		ILI9341_WriteString(&display, 110 - 12, 5, " CH1 ", Font_7x10, ILI9341_BLACK, channel0_color);
 8003b2a:	f8b7 31de 	ldrh.w	r3, [r7, #478]	@ 0x1de
 8003b2e:	9303      	str	r3, [sp, #12]
 8003b30:	2300      	movs	r3, #0
 8003b32:	9302      	str	r3, [sp, #8]
 8003b34:	4a57      	ldr	r2, [pc, #348]	@ (8003c94 <Oscilloscope_Process+0x4a4>)
 8003b36:	466b      	mov	r3, sp
 8003b38:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003b3c:	e883 0003 	stmia.w	r3, {r0, r1}
 8003b40:	4b55      	ldr	r3, [pc, #340]	@ (8003c98 <Oscilloscope_Process+0x4a8>)
 8003b42:	2205      	movs	r2, #5
 8003b44:	2162      	movs	r1, #98	@ 0x62
 8003b46:	4855      	ldr	r0, [pc, #340]	@ (8003c9c <Oscilloscope_Process+0x4ac>)
 8003b48:	f7fe fab7 	bl	80020ba <ILI9341_WriteString>
		ILI9341_WriteString(&display, 148 - 12, 5, " CH2 ", Font_7x10, ILI9341_BLACK, channel1_color);
 8003b4c:	f8b7 31dc 	ldrh.w	r3, [r7, #476]	@ 0x1dc
 8003b50:	9303      	str	r3, [sp, #12]
 8003b52:	2300      	movs	r3, #0
 8003b54:	9302      	str	r3, [sp, #8]
 8003b56:	4a4f      	ldr	r2, [pc, #316]	@ (8003c94 <Oscilloscope_Process+0x4a4>)
 8003b58:	466b      	mov	r3, sp
 8003b5a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003b5e:	e883 0003 	stmia.w	r3, {r0, r1}
 8003b62:	4b4f      	ldr	r3, [pc, #316]	@ (8003ca0 <Oscilloscope_Process+0x4b0>)
 8003b64:	2205      	movs	r2, #5
 8003b66:	2188      	movs	r1, #136	@ 0x88
 8003b68:	484c      	ldr	r0, [pc, #304]	@ (8003c9c <Oscilloscope_Process+0x4ac>)
 8003b6a:	f7fe faa6 	bl	80020ba <ILI9341_WriteString>

		event_channel = 0;
 8003b6e:	4b4d      	ldr	r3, [pc, #308]	@ (8003ca4 <Oscilloscope_Process+0x4b4>)
 8003b70:	2200      	movs	r2, #0
 8003b72:	701a      	strb	r2, [r3, #0]
	}

	// Handle encoder0
	int32_t encoder0_curr = __HAL_TIM_GET_COUNTER(&htim3);
 8003b74:	4b4c      	ldr	r3, [pc, #304]	@ (8003ca8 <Oscilloscope_Process+0x4b8>)
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b7a:	f8c7 31d8 	str.w	r3, [r7, #472]	@ 0x1d8
	encoder0_curr = 32767 - ((encoder0_curr - 1) & 0xFFFF) / 2;
 8003b7e:	f8d7 31d8 	ldr.w	r3, [r7, #472]	@ 0x1d8
 8003b82:	3b01      	subs	r3, #1
 8003b84:	b29b      	uxth	r3, r3
 8003b86:	0fda      	lsrs	r2, r3, #31
 8003b88:	4413      	add	r3, r2
 8003b8a:	105b      	asrs	r3, r3, #1
 8003b8c:	425b      	negs	r3, r3
 8003b8e:	f503 43ff 	add.w	r3, r3, #32640	@ 0x7f80
 8003b92:	337f      	adds	r3, #127	@ 0x7f
 8003b94:	f8c7 31d8 	str.w	r3, [r7, #472]	@ 0x1d8

	if(encoder0_curr != encoder0_prev) {
 8003b98:	4b44      	ldr	r3, [pc, #272]	@ (8003cac <Oscilloscope_Process+0x4bc>)
 8003b9a:	881b      	ldrh	r3, [r3, #0]
 8003b9c:	461a      	mov	r2, r3
 8003b9e:	f8d7 31d8 	ldr.w	r3, [r7, #472]	@ 0x1d8
 8003ba2:	4293      	cmp	r3, r2
 8003ba4:	f000 80dd 	beq.w	8003d62 <Oscilloscope_Process+0x572>
		int32_t delta = encoder0_curr - encoder0_prev;
 8003ba8:	4b40      	ldr	r3, [pc, #256]	@ (8003cac <Oscilloscope_Process+0x4bc>)
 8003baa:	881b      	ldrh	r3, [r3, #0]
 8003bac:	461a      	mov	r2, r3
 8003bae:	f8d7 31d8 	ldr.w	r3, [r7, #472]	@ 0x1d8
 8003bb2:	1a9b      	subs	r3, r3, r2
 8003bb4:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8

		if (delta > 10)
 8003bb8:	f8d7 31e8 	ldr.w	r3, [r7, #488]	@ 0x1e8
 8003bbc:	2b0a      	cmp	r3, #10
 8003bbe:	dd03      	ble.n	8003bc8 <Oscilloscope_Process+0x3d8>
			delta = -1;
 8003bc0:	f04f 33ff 	mov.w	r3, #4294967295
 8003bc4:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8

		if (delta < -10)
 8003bc8:	f8d7 31e8 	ldr.w	r3, [r7, #488]	@ 0x1e8
 8003bcc:	f113 0f0a 	cmn.w	r3, #10
 8003bd0:	da02      	bge.n	8003bd8 <Oscilloscope_Process+0x3e8>
			delta = 1;
 8003bd2:	2301      	movs	r3, #1
 8003bd4:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8

		if (menu_extended) {
 8003bd8:	4b35      	ldr	r3, [pc, #212]	@ (8003cb0 <Oscilloscope_Process+0x4c0>)
 8003bda:	781b      	ldrb	r3, [r3, #0]
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d071      	beq.n	8003cc4 <Oscilloscope_Process+0x4d4>
			ILI9341_Rectangle(&display, menu_selector_x, menu_selector_y, 38, 13, ILI9341_BLACK);
 8003be0:	4b34      	ldr	r3, [pc, #208]	@ (8003cb4 <Oscilloscope_Process+0x4c4>)
 8003be2:	8819      	ldrh	r1, [r3, #0]
 8003be4:	4b34      	ldr	r3, [pc, #208]	@ (8003cb8 <Oscilloscope_Process+0x4c8>)
 8003be6:	881a      	ldrh	r2, [r3, #0]
 8003be8:	2300      	movs	r3, #0
 8003bea:	9301      	str	r3, [sp, #4]
 8003bec:	230d      	movs	r3, #13
 8003bee:	9300      	str	r3, [sp, #0]
 8003bf0:	2326      	movs	r3, #38	@ 0x26
 8003bf2:	482a      	ldr	r0, [pc, #168]	@ (8003c9c <Oscilloscope_Process+0x4ac>)
 8003bf4:	f7fe f9a6 	bl	8001f44 <ILI9341_Rectangle>

			menu_selected_item += delta;
 8003bf8:	f8d7 31e8 	ldr.w	r3, [r7, #488]	@ 0x1e8
 8003bfc:	b2da      	uxtb	r2, r3
 8003bfe:	4b2f      	ldr	r3, [pc, #188]	@ (8003cbc <Oscilloscope_Process+0x4cc>)
 8003c00:	f993 3000 	ldrsb.w	r3, [r3]
 8003c04:	b2db      	uxtb	r3, r3
 8003c06:	4413      	add	r3, r2
 8003c08:	b2db      	uxtb	r3, r3
 8003c0a:	b25a      	sxtb	r2, r3
 8003c0c:	4b2b      	ldr	r3, [pc, #172]	@ (8003cbc <Oscilloscope_Process+0x4cc>)
 8003c0e:	701a      	strb	r2, [r3, #0]

			if (menu_selected_item < 0)
 8003c10:	4b2a      	ldr	r3, [pc, #168]	@ (8003cbc <Oscilloscope_Process+0x4cc>)
 8003c12:	f993 3000 	ldrsb.w	r3, [r3]
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	da02      	bge.n	8003c20 <Oscilloscope_Process+0x430>
				menu_selected_item = 0;
 8003c1a:	4b28      	ldr	r3, [pc, #160]	@ (8003cbc <Oscilloscope_Process+0x4cc>)
 8003c1c:	2200      	movs	r2, #0
 8003c1e:	701a      	strb	r2, [r3, #0]

			if (menu_selected_item > 5)
 8003c20:	4b26      	ldr	r3, [pc, #152]	@ (8003cbc <Oscilloscope_Process+0x4cc>)
 8003c22:	f993 3000 	ldrsb.w	r3, [r3]
 8003c26:	2b05      	cmp	r3, #5
 8003c28:	dd02      	ble.n	8003c30 <Oscilloscope_Process+0x440>
				menu_selected_item = 5;
 8003c2a:	4b24      	ldr	r3, [pc, #144]	@ (8003cbc <Oscilloscope_Process+0x4cc>)
 8003c2c:	2205      	movs	r2, #5
 8003c2e:	701a      	strb	r2, [r3, #0]

			if (menu_selected_item < 4) {
 8003c30:	4b22      	ldr	r3, [pc, #136]	@ (8003cbc <Oscilloscope_Process+0x4cc>)
 8003c32:	f993 3000 	ldrsb.w	r3, [r3]
 8003c36:	2b03      	cmp	r3, #3
 8003c38:	dc12      	bgt.n	8003c60 <Oscilloscope_Process+0x470>
				menu_selector_x = 20 + 38 * menu_selected_item;
 8003c3a:	4b20      	ldr	r3, [pc, #128]	@ (8003cbc <Oscilloscope_Process+0x4cc>)
 8003c3c:	f993 3000 	ldrsb.w	r3, [r3]
 8003c40:	b29b      	uxth	r3, r3
 8003c42:	461a      	mov	r2, r3
 8003c44:	00d2      	lsls	r2, r2, #3
 8003c46:	441a      	add	r2, r3
 8003c48:	0052      	lsls	r2, r2, #1
 8003c4a:	4413      	add	r3, r2
 8003c4c:	005b      	lsls	r3, r3, #1
 8003c4e:	b29b      	uxth	r3, r3
 8003c50:	3314      	adds	r3, #20
 8003c52:	b29a      	uxth	r2, r3
 8003c54:	4b17      	ldr	r3, [pc, #92]	@ (8003cb4 <Oscilloscope_Process+0x4c4>)
 8003c56:	801a      	strh	r2, [r3, #0]
				menu_selector_y = 3;
 8003c58:	4b17      	ldr	r3, [pc, #92]	@ (8003cb8 <Oscilloscope_Process+0x4c8>)
 8003c5a:	2203      	movs	r2, #3
 8003c5c:	801a      	strh	r2, [r3, #0]
 8003c5e:	e012      	b.n	8003c86 <Oscilloscope_Process+0x496>
			} else {
				menu_selector_x = 20 + 38 * (menu_selected_item - 4);
 8003c60:	4b16      	ldr	r3, [pc, #88]	@ (8003cbc <Oscilloscope_Process+0x4cc>)
 8003c62:	f993 3000 	ldrsb.w	r3, [r3]
 8003c66:	3b04      	subs	r3, #4
 8003c68:	b29b      	uxth	r3, r3
 8003c6a:	461a      	mov	r2, r3
 8003c6c:	00d2      	lsls	r2, r2, #3
 8003c6e:	441a      	add	r2, r3
 8003c70:	0052      	lsls	r2, r2, #1
 8003c72:	4413      	add	r3, r2
 8003c74:	005b      	lsls	r3, r3, #1
 8003c76:	b29b      	uxth	r3, r3
 8003c78:	3314      	adds	r3, #20
 8003c7a:	b29a      	uxth	r2, r3
 8003c7c:	4b0d      	ldr	r3, [pc, #52]	@ (8003cb4 <Oscilloscope_Process+0x4c4>)
 8003c7e:	801a      	strh	r2, [r3, #0]
				menu_selector_y = 223;
 8003c80:	4b0d      	ldr	r3, [pc, #52]	@ (8003cb8 <Oscilloscope_Process+0x4c8>)
 8003c82:	22df      	movs	r2, #223	@ 0xdf
 8003c84:	801a      	strh	r2, [r3, #0]
			}

			event_selector = 1;
 8003c86:	4b0e      	ldr	r3, [pc, #56]	@ (8003cc0 <Oscilloscope_Process+0x4d0>)
 8003c88:	2201      	movs	r2, #1
 8003c8a:	701a      	strb	r2, [r3, #0]
 8003c8c:	e05e      	b.n	8003d4c <Oscilloscope_Process+0x55c>
 8003c8e:	bf00      	nop
 8003c90:	2000d10c 	.word	0x2000d10c
 8003c94:	20000000 	.word	0x20000000
 8003c98:	0800f60c 	.word	0x0800f60c
 8003c9c:	2000d4b8 	.word	0x2000d4b8
 8003ca0:	0800f614 	.word	0x0800f614
 8003ca4:	2000d104 	.word	0x2000d104
 8003ca8:	20013f50 	.word	0x20013f50
 8003cac:	20013534 	.word	0x20013534
 8003cb0:	20013531 	.word	0x20013531
 8003cb4:	2000d10e 	.word	0x2000d10e
 8003cb8:	2000d110 	.word	0x2000d110
 8003cbc:	2000d10d 	.word	0x2000d10d
 8003cc0:	2000d107 	.word	0x2000d107

		} else {

			if (menu_selected_item == 2) {
 8003cc4:	4ba0      	ldr	r3, [pc, #640]	@ (8003f48 <Oscilloscope_Process+0x758>)
 8003cc6:	f993 3000 	ldrsb.w	r3, [r3]
 8003cca:	2b02      	cmp	r3, #2
 8003ccc:	d11c      	bne.n	8003d08 <Oscilloscope_Process+0x518>
				clearCursor(&display, cursor0);
 8003cce:	4b9f      	ldr	r3, [pc, #636]	@ (8003f4c <Oscilloscope_Process+0x75c>)
 8003cd0:	881b      	ldrh	r3, [r3, #0]
 8003cd2:	4619      	mov	r1, r3
 8003cd4:	489e      	ldr	r0, [pc, #632]	@ (8003f50 <Oscilloscope_Process+0x760>)
 8003cd6:	f7fe ffd6 	bl	8002c86 <clearCursor>
				cursor0 += delta;
 8003cda:	f8d7 31e8 	ldr.w	r3, [r7, #488]	@ 0x1e8
 8003cde:	b29a      	uxth	r2, r3
 8003ce0:	4b9a      	ldr	r3, [pc, #616]	@ (8003f4c <Oscilloscope_Process+0x75c>)
 8003ce2:	881b      	ldrh	r3, [r3, #0]
 8003ce4:	4413      	add	r3, r2
 8003ce6:	b29a      	uxth	r2, r3
 8003ce8:	4b98      	ldr	r3, [pc, #608]	@ (8003f4c <Oscilloscope_Process+0x75c>)
 8003cea:	801a      	strh	r2, [r3, #0]

				if (cursor0 < 20)
 8003cec:	4b97      	ldr	r3, [pc, #604]	@ (8003f4c <Oscilloscope_Process+0x75c>)
 8003cee:	881b      	ldrh	r3, [r3, #0]
 8003cf0:	2b13      	cmp	r3, #19
 8003cf2:	d802      	bhi.n	8003cfa <Oscilloscope_Process+0x50a>
					cursor0 = 20;
 8003cf4:	4b95      	ldr	r3, [pc, #596]	@ (8003f4c <Oscilloscope_Process+0x75c>)
 8003cf6:	2214      	movs	r2, #20
 8003cf8:	801a      	strh	r2, [r3, #0]

				if (cursor0 > 220)
 8003cfa:	4b94      	ldr	r3, [pc, #592]	@ (8003f4c <Oscilloscope_Process+0x75c>)
 8003cfc:	881b      	ldrh	r3, [r3, #0]
 8003cfe:	2bdc      	cmp	r3, #220	@ 0xdc
 8003d00:	d902      	bls.n	8003d08 <Oscilloscope_Process+0x518>
					cursor0 = 220;
 8003d02:	4b92      	ldr	r3, [pc, #584]	@ (8003f4c <Oscilloscope_Process+0x75c>)
 8003d04:	22dc      	movs	r2, #220	@ 0xdc
 8003d06:	801a      	strh	r2, [r3, #0]
			}

			if (menu_selected_item == 3) {
 8003d08:	4b8f      	ldr	r3, [pc, #572]	@ (8003f48 <Oscilloscope_Process+0x758>)
 8003d0a:	f993 3000 	ldrsb.w	r3, [r3]
 8003d0e:	2b03      	cmp	r3, #3
 8003d10:	d11c      	bne.n	8003d4c <Oscilloscope_Process+0x55c>
				clearCursor(&display, cursor1);
 8003d12:	4b90      	ldr	r3, [pc, #576]	@ (8003f54 <Oscilloscope_Process+0x764>)
 8003d14:	881b      	ldrh	r3, [r3, #0]
 8003d16:	4619      	mov	r1, r3
 8003d18:	488d      	ldr	r0, [pc, #564]	@ (8003f50 <Oscilloscope_Process+0x760>)
 8003d1a:	f7fe ffb4 	bl	8002c86 <clearCursor>
				cursor1 += delta;
 8003d1e:	f8d7 31e8 	ldr.w	r3, [r7, #488]	@ 0x1e8
 8003d22:	b29a      	uxth	r2, r3
 8003d24:	4b8b      	ldr	r3, [pc, #556]	@ (8003f54 <Oscilloscope_Process+0x764>)
 8003d26:	881b      	ldrh	r3, [r3, #0]
 8003d28:	4413      	add	r3, r2
 8003d2a:	b29a      	uxth	r2, r3
 8003d2c:	4b89      	ldr	r3, [pc, #548]	@ (8003f54 <Oscilloscope_Process+0x764>)
 8003d2e:	801a      	strh	r2, [r3, #0]

				if (cursor1 < 20)
 8003d30:	4b88      	ldr	r3, [pc, #544]	@ (8003f54 <Oscilloscope_Process+0x764>)
 8003d32:	881b      	ldrh	r3, [r3, #0]
 8003d34:	2b13      	cmp	r3, #19
 8003d36:	d802      	bhi.n	8003d3e <Oscilloscope_Process+0x54e>
					cursor1 = 20;
 8003d38:	4b86      	ldr	r3, [pc, #536]	@ (8003f54 <Oscilloscope_Process+0x764>)
 8003d3a:	2214      	movs	r2, #20
 8003d3c:	801a      	strh	r2, [r3, #0]

				if (cursor1 > 220)
 8003d3e:	4b85      	ldr	r3, [pc, #532]	@ (8003f54 <Oscilloscope_Process+0x764>)
 8003d40:	881b      	ldrh	r3, [r3, #0]
 8003d42:	2bdc      	cmp	r3, #220	@ 0xdc
 8003d44:	d902      	bls.n	8003d4c <Oscilloscope_Process+0x55c>
					cursor1 = 220;
 8003d46:	4b83      	ldr	r3, [pc, #524]	@ (8003f54 <Oscilloscope_Process+0x764>)
 8003d48:	22dc      	movs	r2, #220	@ 0xdc
 8003d4a:	801a      	strh	r2, [r3, #0]
			}

		}

		event_cursor = 1;
 8003d4c:	4b82      	ldr	r3, [pc, #520]	@ (8003f58 <Oscilloscope_Process+0x768>)
 8003d4e:	2201      	movs	r2, #1
 8003d50:	701a      	strb	r2, [r3, #0]
		event_trigger = 1;
 8003d52:	4b82      	ldr	r3, [pc, #520]	@ (8003f5c <Oscilloscope_Process+0x76c>)
 8003d54:	2201      	movs	r2, #1
 8003d56:	701a      	strb	r2, [r3, #0]
		encoder0_prev = encoder0_curr;
 8003d58:	f8d7 31d8 	ldr.w	r3, [r7, #472]	@ 0x1d8
 8003d5c:	b29a      	uxth	r2, r3
 8003d5e:	4b80      	ldr	r3, [pc, #512]	@ (8003f60 <Oscilloscope_Process+0x770>)
 8003d60:	801a      	strh	r2, [r3, #0]
	}

	// Handle UI redraw cursor events
	if (event_cursor) {
 8003d62:	4b7d      	ldr	r3, [pc, #500]	@ (8003f58 <Oscilloscope_Process+0x768>)
 8003d64:	781b      	ldrb	r3, [r3, #0]
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d026      	beq.n	8003db8 <Oscilloscope_Process+0x5c8>
		clearCursor(&display, cursor0);
 8003d6a:	4b78      	ldr	r3, [pc, #480]	@ (8003f4c <Oscilloscope_Process+0x75c>)
 8003d6c:	881b      	ldrh	r3, [r3, #0]
 8003d6e:	4619      	mov	r1, r3
 8003d70:	4877      	ldr	r0, [pc, #476]	@ (8003f50 <Oscilloscope_Process+0x760>)
 8003d72:	f7fe ff88 	bl	8002c86 <clearCursor>
		clearCursor(&display, cursor1);
 8003d76:	4b77      	ldr	r3, [pc, #476]	@ (8003f54 <Oscilloscope_Process+0x764>)
 8003d78:	881b      	ldrh	r3, [r3, #0]
 8003d7a:	4619      	mov	r1, r3
 8003d7c:	4874      	ldr	r0, [pc, #464]	@ (8003f50 <Oscilloscope_Process+0x760>)
 8003d7e:	f7fe ff82 	bl	8002c86 <clearCursor>

		if (menu_channel0_enabled)
 8003d82:	4b78      	ldr	r3, [pc, #480]	@ (8003f64 <Oscilloscope_Process+0x774>)
 8003d84:	781b      	ldrb	r3, [r3, #0]
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d007      	beq.n	8003d9a <Oscilloscope_Process+0x5aa>
			drawCursor(&display, cursor0, "C1", ILI9341_YELLOW);
 8003d8a:	4b70      	ldr	r3, [pc, #448]	@ (8003f4c <Oscilloscope_Process+0x75c>)
 8003d8c:	8819      	ldrh	r1, [r3, #0]
 8003d8e:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8003d92:	4a75      	ldr	r2, [pc, #468]	@ (8003f68 <Oscilloscope_Process+0x778>)
 8003d94:	486e      	ldr	r0, [pc, #440]	@ (8003f50 <Oscilloscope_Process+0x760>)
 8003d96:	f7fe ffa3 	bl	8002ce0 <drawCursor>

		if (menu_channel1_enabled)
 8003d9a:	4b74      	ldr	r3, [pc, #464]	@ (8003f6c <Oscilloscope_Process+0x77c>)
 8003d9c:	781b      	ldrb	r3, [r3, #0]
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d007      	beq.n	8003db2 <Oscilloscope_Process+0x5c2>
			drawCursor(&display, cursor1, "C2", ILI9341_CYAN);
 8003da2:	4b6c      	ldr	r3, [pc, #432]	@ (8003f54 <Oscilloscope_Process+0x764>)
 8003da4:	8819      	ldrh	r1, [r3, #0]
 8003da6:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 8003daa:	4a71      	ldr	r2, [pc, #452]	@ (8003f70 <Oscilloscope_Process+0x780>)
 8003dac:	4868      	ldr	r0, [pc, #416]	@ (8003f50 <Oscilloscope_Process+0x760>)
 8003dae:	f7fe ff97 	bl	8002ce0 <drawCursor>

		event_cursor = 0;
 8003db2:	4b69      	ldr	r3, [pc, #420]	@ (8003f58 <Oscilloscope_Process+0x768>)
 8003db4:	2200      	movs	r2, #0
 8003db6:	701a      	strb	r2, [r3, #0]
	}

	// Handle encoder1
	int32_t encoder1_curr = __HAL_TIM_GET_COUNTER(&htim4);
 8003db8:	4b6e      	ldr	r3, [pc, #440]	@ (8003f74 <Oscilloscope_Process+0x784>)
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003dbe:	f8c7 31d4 	str.w	r3, [r7, #468]	@ 0x1d4
	encoder1_curr = 32767 - ((encoder1_curr - 1) & 0xFFFF) / 2;
 8003dc2:	f8d7 31d4 	ldr.w	r3, [r7, #468]	@ 0x1d4
 8003dc6:	3b01      	subs	r3, #1
 8003dc8:	b29b      	uxth	r3, r3
 8003dca:	0fda      	lsrs	r2, r3, #31
 8003dcc:	4413      	add	r3, r2
 8003dce:	105b      	asrs	r3, r3, #1
 8003dd0:	425b      	negs	r3, r3
 8003dd2:	f503 43ff 	add.w	r3, r3, #32640	@ 0x7f80
 8003dd6:	337f      	adds	r3, #127	@ 0x7f
 8003dd8:	f8c7 31d4 	str.w	r3, [r7, #468]	@ 0x1d4

	if(encoder1_curr != encoder1_prev || event_trigger) {
 8003ddc:	4b66      	ldr	r3, [pc, #408]	@ (8003f78 <Oscilloscope_Process+0x788>)
 8003dde:	881b      	ldrh	r3, [r3, #0]
 8003de0:	461a      	mov	r2, r3
 8003de2:	f8d7 31d4 	ldr.w	r3, [r7, #468]	@ 0x1d4
 8003de6:	4293      	cmp	r3, r2
 8003de8:	d104      	bne.n	8003df4 <Oscilloscope_Process+0x604>
 8003dea:	4b5c      	ldr	r3, [pc, #368]	@ (8003f5c <Oscilloscope_Process+0x76c>)
 8003dec:	781b      	ldrb	r3, [r3, #0]
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	f000 824a 	beq.w	8004288 <Oscilloscope_Process+0xa98>
		int32_t delta = encoder1_curr - encoder1_prev;
 8003df4:	4b60      	ldr	r3, [pc, #384]	@ (8003f78 <Oscilloscope_Process+0x788>)
 8003df6:	881b      	ldrh	r3, [r3, #0]
 8003df8:	461a      	mov	r2, r3
 8003dfa:	f8d7 31d4 	ldr.w	r3, [r7, #468]	@ 0x1d4
 8003dfe:	1a9b      	subs	r3, r3, r2
 8003e00:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4

		if (delta > 10)
 8003e04:	f8d7 31e4 	ldr.w	r3, [r7, #484]	@ 0x1e4
 8003e08:	2b0a      	cmp	r3, #10
 8003e0a:	dd03      	ble.n	8003e14 <Oscilloscope_Process+0x624>
			delta = -1;
 8003e0c:	f04f 33ff 	mov.w	r3, #4294967295
 8003e10:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4

		if (delta < -10)
 8003e14:	f8d7 31e4 	ldr.w	r3, [r7, #484]	@ 0x1e4
 8003e18:	f113 0f0a 	cmn.w	r3, #10
 8003e1c:	da02      	bge.n	8003e24 <Oscilloscope_Process+0x634>
			delta = 1;
 8003e1e:	2301      	movs	r3, #1
 8003e20:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4

		if (menu_extended) {
 8003e24:	4b55      	ldr	r3, [pc, #340]	@ (8003f7c <Oscilloscope_Process+0x78c>)
 8003e26:	781b      	ldrb	r3, [r3, #0]
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	f000 816f 	beq.w	800410c <Oscilloscope_Process+0x91c>

			if (menu_selected_item == 1) {
 8003e2e:	4b46      	ldr	r3, [pc, #280]	@ (8003f48 <Oscilloscope_Process+0x758>)
 8003e30:	f993 3000 	ldrsb.w	r3, [r3]
 8003e34:	2b01      	cmp	r3, #1
 8003e36:	d112      	bne.n	8003e5e <Oscilloscope_Process+0x66e>
				trigger_mode += delta;
 8003e38:	f8d7 31e4 	ldr.w	r3, [r7, #484]	@ 0x1e4
 8003e3c:	b2da      	uxtb	r2, r3
 8003e3e:	4b50      	ldr	r3, [pc, #320]	@ (8003f80 <Oscilloscope_Process+0x790>)
 8003e40:	781b      	ldrb	r3, [r3, #0]
 8003e42:	4413      	add	r3, r2
 8003e44:	b2da      	uxtb	r2, r3
 8003e46:	4b4e      	ldr	r3, [pc, #312]	@ (8003f80 <Oscilloscope_Process+0x790>)
 8003e48:	701a      	strb	r2, [r3, #0]

				if (trigger_mode < 0)
					trigger_mode = 0;

				if (trigger_mode > 1)
 8003e4a:	4b4d      	ldr	r3, [pc, #308]	@ (8003f80 <Oscilloscope_Process+0x790>)
 8003e4c:	781b      	ldrb	r3, [r3, #0]
 8003e4e:	2b01      	cmp	r3, #1
 8003e50:	d902      	bls.n	8003e58 <Oscilloscope_Process+0x668>
					trigger_mode = 1;
 8003e52:	4b4b      	ldr	r3, [pc, #300]	@ (8003f80 <Oscilloscope_Process+0x790>)
 8003e54:	2201      	movs	r2, #1
 8003e56:	701a      	strb	r2, [r3, #0]

				event_trigger_mode = 1;
 8003e58:	4b4a      	ldr	r3, [pc, #296]	@ (8003f84 <Oscilloscope_Process+0x794>)
 8003e5a:	2201      	movs	r2, #1
 8003e5c:	701a      	strb	r2, [r3, #0]
			}

			if (menu_selected_item == 4) {
 8003e5e:	4b3a      	ldr	r3, [pc, #232]	@ (8003f48 <Oscilloscope_Process+0x758>)
 8003e60:	f993 3000 	ldrsb.w	r3, [r3]
 8003e64:	2b04      	cmp	r3, #4
 8003e66:	f040 8100 	bne.w	800406a <Oscilloscope_Process+0x87a>
				mode_seconds += delta;
 8003e6a:	f8d7 31e4 	ldr.w	r3, [r7, #484]	@ 0x1e4
 8003e6e:	b2da      	uxtb	r2, r3
 8003e70:	4b45      	ldr	r3, [pc, #276]	@ (8003f88 <Oscilloscope_Process+0x798>)
 8003e72:	781b      	ldrb	r3, [r3, #0]
 8003e74:	4413      	add	r3, r2
 8003e76:	b2da      	uxtb	r2, r3
 8003e78:	4b43      	ldr	r3, [pc, #268]	@ (8003f88 <Oscilloscope_Process+0x798>)
 8003e7a:	701a      	strb	r2, [r3, #0]

				if (mode_seconds < 0)
					mode_seconds = 0;

				if (mode_seconds > 16)
 8003e7c:	4b42      	ldr	r3, [pc, #264]	@ (8003f88 <Oscilloscope_Process+0x798>)
 8003e7e:	781b      	ldrb	r3, [r3, #0]
 8003e80:	2b10      	cmp	r3, #16
 8003e82:	d902      	bls.n	8003e8a <Oscilloscope_Process+0x69a>
					mode_seconds = 16;
 8003e84:	4b40      	ldr	r3, [pc, #256]	@ (8003f88 <Oscilloscope_Process+0x798>)
 8003e86:	2210      	movs	r2, #16
 8003e88:	701a      	strb	r2, [r3, #0]

				uint32_t list_seconds[17] = {
 8003e8a:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 8003e8e:	f5a3 73f8 	sub.w	r3, r3, #496	@ 0x1f0
 8003e92:	4a3e      	ldr	r2, [pc, #248]	@ (8003f8c <Oscilloscope_Process+0x79c>)
 8003e94:	4618      	mov	r0, r3
 8003e96:	4611      	mov	r1, r2
 8003e98:	2344      	movs	r3, #68	@ 0x44
 8003e9a:	461a      	mov	r2, r3
 8003e9c:	f008 f86b 	bl	800bf76 <memcpy>
					200000,
					500000,
					1000000
				};

				xlim_us = list_seconds[mode_seconds];
 8003ea0:	4b39      	ldr	r3, [pc, #228]	@ (8003f88 <Oscilloscope_Process+0x798>)
 8003ea2:	781b      	ldrb	r3, [r3, #0]
 8003ea4:	461a      	mov	r2, r3
 8003ea6:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 8003eaa:	f5a3 73f8 	sub.w	r3, r3, #496	@ 0x1f0
 8003eae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003eb2:	4a37      	ldr	r2, [pc, #220]	@ (8003f90 <Oscilloscope_Process+0x7a0>)
 8003eb4:	6013      	str	r3, [r2, #0]

				if (adc_immediate) {
 8003eb6:	4b37      	ldr	r3, [pc, #220]	@ (8003f94 <Oscilloscope_Process+0x7a4>)
 8003eb8:	781b      	ldrb	r3, [r3, #0]
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d005      	beq.n	8003eca <Oscilloscope_Process+0x6da>
					HAL_TIM_Base_Stop_IT(&htim10);
 8003ebe:	4836      	ldr	r0, [pc, #216]	@ (8003f98 <Oscilloscope_Process+0x7a8>)
 8003ec0:	f004 fdbe 	bl	8008a40 <HAL_TIM_Base_Stop_IT>
					adc_available = 1;
 8003ec4:	4b35      	ldr	r3, [pc, #212]	@ (8003f9c <Oscilloscope_Process+0x7ac>)
 8003ec6:	2201      	movs	r2, #1
 8003ec8:	701a      	strb	r2, [r3, #0]
				}

				HAL_ADC_Stop_DMA(&hadc1);
 8003eca:	4835      	ldr	r0, [pc, #212]	@ (8003fa0 <Oscilloscope_Process+0x7b0>)
 8003ecc:	f001 fc8e 	bl	80057ec <HAL_ADC_Stop_DMA>

				adc_reset_cyccnt = 1;
 8003ed0:	4b34      	ldr	r3, [pc, #208]	@ (8003fa4 <Oscilloscope_Process+0x7b4>)
 8003ed2:	2201      	movs	r2, #1
 8003ed4:	701a      	strb	r2, [r3, #0]
				adc0_length = 0;
 8003ed6:	4b34      	ldr	r3, [pc, #208]	@ (8003fa8 <Oscilloscope_Process+0x7b8>)
 8003ed8:	2200      	movs	r2, #0
 8003eda:	601a      	str	r2, [r3, #0]
				adc1_length = 0;
 8003edc:	4b33      	ldr	r3, [pc, #204]	@ (8003fac <Oscilloscope_Process+0x7bc>)
 8003ede:	2200      	movs	r2, #0
 8003ee0:	601a      	str	r2, [r3, #0]
				adc_max[0] = 0;
 8003ee2:	4b33      	ldr	r3, [pc, #204]	@ (8003fb0 <Oscilloscope_Process+0x7c0>)
 8003ee4:	2200      	movs	r2, #0
 8003ee6:	801a      	strh	r2, [r3, #0]
				adc_max[1] = 0;
 8003ee8:	4b31      	ldr	r3, [pc, #196]	@ (8003fb0 <Oscilloscope_Process+0x7c0>)
 8003eea:	2200      	movs	r2, #0
 8003eec:	805a      	strh	r2, [r3, #2]
				adc_min[0] = -1;
 8003eee:	4b31      	ldr	r3, [pc, #196]	@ (8003fb4 <Oscilloscope_Process+0x7c4>)
 8003ef0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003ef4:	801a      	strh	r2, [r3, #0]
				adc_min[1] = -1;
 8003ef6:	4b2f      	ldr	r3, [pc, #188]	@ (8003fb4 <Oscilloscope_Process+0x7c4>)
 8003ef8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003efc:	805a      	strh	r2, [r3, #2]
				adc_period[0] = 0;
 8003efe:	4b2e      	ldr	r3, [pc, #184]	@ (8003fb8 <Oscilloscope_Process+0x7c8>)
 8003f00:	2200      	movs	r2, #0
 8003f02:	601a      	str	r2, [r3, #0]
				adc_period[1] = 0;
 8003f04:	4b2c      	ldr	r3, [pc, #176]	@ (8003fb8 <Oscilloscope_Process+0x7c8>)
 8003f06:	2200      	movs	r2, #0
 8003f08:	605a      	str	r2, [r3, #4]
				adc_period0_detected = 0;
 8003f0a:	4b2c      	ldr	r3, [pc, #176]	@ (8003fbc <Oscilloscope_Process+0x7cc>)
 8003f0c:	2200      	movs	r2, #0
 8003f0e:	701a      	strb	r2, [r3, #0]
				adc_period1_detected = 0;
 8003f10:	4b2b      	ldr	r3, [pc, #172]	@ (8003fc0 <Oscilloscope_Process+0x7d0>)
 8003f12:	2200      	movs	r2, #0
 8003f14:	701a      	strb	r2, [r3, #0]
				event_trigger0_detected = 0;
 8003f16:	4b2b      	ldr	r3, [pc, #172]	@ (8003fc4 <Oscilloscope_Process+0x7d4>)
 8003f18:	2200      	movs	r2, #0
 8003f1a:	701a      	strb	r2, [r3, #0]
				event_trigger1_detected = 0;
 8003f1c:	4b2a      	ldr	r3, [pc, #168]	@ (8003fc8 <Oscilloscope_Process+0x7d8>)
 8003f1e:	2200      	movs	r2, #0
 8003f20:	701a      	strb	r2, [r3, #0]

				if (menu_channel0_enabled)
 8003f22:	4b10      	ldr	r3, [pc, #64]	@ (8003f64 <Oscilloscope_Process+0x774>)
 8003f24:	781b      	ldrb	r3, [r3, #0]
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d003      	beq.n	8003f32 <Oscilloscope_Process+0x742>
					adc0_filled = 0;
 8003f2a:	4b28      	ldr	r3, [pc, #160]	@ (8003fcc <Oscilloscope_Process+0x7dc>)
 8003f2c:	2200      	movs	r2, #0
 8003f2e:	701a      	strb	r2, [r3, #0]
 8003f30:	e002      	b.n	8003f38 <Oscilloscope_Process+0x748>
				else
					adc0_filled = 1;
 8003f32:	4b26      	ldr	r3, [pc, #152]	@ (8003fcc <Oscilloscope_Process+0x7dc>)
 8003f34:	2201      	movs	r2, #1
 8003f36:	701a      	strb	r2, [r3, #0]

				if (menu_channel1_enabled)
 8003f38:	4b0c      	ldr	r3, [pc, #48]	@ (8003f6c <Oscilloscope_Process+0x77c>)
 8003f3a:	781b      	ldrb	r3, [r3, #0]
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d049      	beq.n	8003fd4 <Oscilloscope_Process+0x7e4>
					adc1_filled = 0;
 8003f40:	4b23      	ldr	r3, [pc, #140]	@ (8003fd0 <Oscilloscope_Process+0x7e0>)
 8003f42:	2200      	movs	r2, #0
 8003f44:	701a      	strb	r2, [r3, #0]
 8003f46:	e048      	b.n	8003fda <Oscilloscope_Process+0x7ea>
 8003f48:	2000d10d 	.word	0x2000d10d
 8003f4c:	2000d0f4 	.word	0x2000d0f4
 8003f50:	2000d4b8 	.word	0x2000d4b8
 8003f54:	2000d0f6 	.word	0x2000d0f6
 8003f58:	2000d102 	.word	0x2000d102
 8003f5c:	2000d103 	.word	0x2000d103
 8003f60:	20013534 	.word	0x20013534
 8003f64:	2000d10b 	.word	0x2000d10b
 8003f68:	0800f61c 	.word	0x0800f61c
 8003f6c:	2000d10c 	.word	0x2000d10c
 8003f70:	0800f620 	.word	0x0800f620
 8003f74:	20013f98 	.word	0x20013f98
 8003f78:	20013536 	.word	0x20013536
 8003f7c:	20013531 	.word	0x20013531
 8003f80:	2001352c 	.word	0x2001352c
 8003f84:	2000d108 	.word	0x2000d108
 8003f88:	2000d112 	.word	0x2000d112
 8003f8c:	0800f67c 	.word	0x0800f67c
 8003f90:	2000d0ec 	.word	0x2000d0ec
 8003f94:	2000d0e8 	.word	0x2000d0e8
 8003f98:	20013fe0 	.word	0x20013fe0
 8003f9c:	2000d0e1 	.word	0x2000d0e1
 8003fa0:	2000d318 	.word	0x2000d318
 8003fa4:	2000d0e2 	.word	0x2000d0e2
 8003fa8:	2000d510 	.word	0x2000d510
 8003fac:	2000d514 	.word	0x2000d514
 8003fb0:	2000d51c 	.word	0x2000d51c
 8003fb4:	2000d0e4 	.word	0x2000d0e4
 8003fb8:	2000d520 	.word	0x2000d520
 8003fbc:	2000d528 	.word	0x2000d528
 8003fc0:	2000d529 	.word	0x2000d529
 8003fc4:	2000d109 	.word	0x2000d109
 8003fc8:	2000d10a 	.word	0x2000d10a
 8003fcc:	2000d518 	.word	0x2000d518
 8003fd0:	2000d0e0 	.word	0x2000d0e0
				else
					adc1_filled = 1;
 8003fd4:	4b3f      	ldr	r3, [pc, #252]	@ (80040d4 <Oscilloscope_Process+0x8e4>)
 8003fd6:	2201      	movs	r2, #1
 8003fd8:	701a      	strb	r2, [r3, #0]

				adc_immediate = xlim_us <= 500;
 8003fda:	4b3f      	ldr	r3, [pc, #252]	@ (80040d8 <Oscilloscope_Process+0x8e8>)
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8003fe2:	bf94      	ite	ls
 8003fe4:	2301      	movls	r3, #1
 8003fe6:	2300      	movhi	r3, #0
 8003fe8:	b2db      	uxtb	r3, r3
 8003fea:	461a      	mov	r2, r3
 8003fec:	4b3b      	ldr	r3, [pc, #236]	@ (80040dc <Oscilloscope_Process+0x8ec>)
 8003fee:	701a      	strb	r2, [r3, #0]

				if (!adc_immediate) {
 8003ff0:	4b3a      	ldr	r3, [pc, #232]	@ (80040dc <Oscilloscope_Process+0x8ec>)
 8003ff2:	781b      	ldrb	r3, [r3, #0]
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d12d      	bne.n	8004054 <Oscilloscope_Process+0x864>
					uint32_t list_timer_settings[17][2] = {
 8003ff8:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 8003ffc:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8004000:	4a37      	ldr	r2, [pc, #220]	@ (80040e0 <Oscilloscope_Process+0x8f0>)
 8004002:	4618      	mov	r0, r3
 8004004:	4611      	mov	r1, r2
 8004006:	2388      	movs	r3, #136	@ 0x88
 8004008:	461a      	mov	r2, r3
 800400a:	f007 ffb4 	bl	800bf76 <memcpy>
						{  8228, 100 },
						{ 20570, 100 },
						{ 41142, 100 }
					};

					htim10.Init.Prescaler = list_timer_settings[mode_seconds][0];
 800400e:	4b35      	ldr	r3, [pc, #212]	@ (80040e4 <Oscilloscope_Process+0x8f4>)
 8004010:	781b      	ldrb	r3, [r3, #0]
 8004012:	461a      	mov	r2, r3
 8004014:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 8004018:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 800401c:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
 8004020:	4a31      	ldr	r2, [pc, #196]	@ (80040e8 <Oscilloscope_Process+0x8f8>)
 8004022:	6053      	str	r3, [r2, #4]
					htim10.Init.Period    = list_timer_settings[mode_seconds][1];
 8004024:	4b2f      	ldr	r3, [pc, #188]	@ (80040e4 <Oscilloscope_Process+0x8f4>)
 8004026:	781b      	ldrb	r3, [r3, #0]
 8004028:	4619      	mov	r1, r3
 800402a:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 800402e:	f5a3 72d6 	sub.w	r2, r3, #428	@ 0x1ac
 8004032:	00cb      	lsls	r3, r1, #3
 8004034:	4413      	add	r3, r2
 8004036:	685b      	ldr	r3, [r3, #4]
 8004038:	4a2b      	ldr	r2, [pc, #172]	@ (80040e8 <Oscilloscope_Process+0x8f8>)
 800403a:	60d3      	str	r3, [r2, #12]

					if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 800403c:	482a      	ldr	r0, [pc, #168]	@ (80040e8 <Oscilloscope_Process+0x8f8>)
 800403e:	f004 fc4d 	bl	80088dc <HAL_TIM_Base_Init>
 8004042:	4603      	mov	r3, r0
 8004044:	2b00      	cmp	r3, #0
 8004046:	d001      	beq.n	800404c <Oscilloscope_Process+0x85c>
						Error_Handler();
 8004048:	f7fe fc90 	bl	800296c <Error_Handler>

					HAL_TIM_Base_Start_IT(&htim10);
 800404c:	4826      	ldr	r0, [pc, #152]	@ (80040e8 <Oscilloscope_Process+0x8f8>)
 800404e:	f004 fc95 	bl	800897c <HAL_TIM_Base_Start_IT>
 8004052:	e004      	b.n	800405e <Oscilloscope_Process+0x86e>
				} else
					HAL_ADC_Start_DMA(&hadc1, (uint32_t*)&adc_data, 2);
 8004054:	2202      	movs	r2, #2
 8004056:	4925      	ldr	r1, [pc, #148]	@ (80040ec <Oscilloscope_Process+0x8fc>)
 8004058:	4825      	ldr	r0, [pc, #148]	@ (80040f0 <Oscilloscope_Process+0x900>)
 800405a:	f001 fad3 	bl	8005604 <HAL_ADC_Start_DMA>

				local_event_adc = 0;
 800405e:	2300      	movs	r3, #0
 8004060:	f887 31ef 	strb.w	r3, [r7, #495]	@ 0x1ef
				event_seconds = 1;
 8004064:	4b23      	ldr	r3, [pc, #140]	@ (80040f4 <Oscilloscope_Process+0x904>)
 8004066:	2201      	movs	r2, #1
 8004068:	701a      	strb	r2, [r3, #0]
			}

			if (menu_selected_item == 5) {
 800406a:	4b23      	ldr	r3, [pc, #140]	@ (80040f8 <Oscilloscope_Process+0x908>)
 800406c:	f993 3000 	ldrsb.w	r3, [r3]
 8004070:	2b05      	cmp	r3, #5
 8004072:	f040 8101 	bne.w	8004278 <Oscilloscope_Process+0xa88>
				mode_voltage += delta;
 8004076:	f8d7 31e4 	ldr.w	r3, [r7, #484]	@ 0x1e4
 800407a:	b2da      	uxtb	r2, r3
 800407c:	4b1f      	ldr	r3, [pc, #124]	@ (80040fc <Oscilloscope_Process+0x90c>)
 800407e:	781b      	ldrb	r3, [r3, #0]
 8004080:	4413      	add	r3, r2
 8004082:	b2da      	uxtb	r2, r3
 8004084:	4b1d      	ldr	r3, [pc, #116]	@ (80040fc <Oscilloscope_Process+0x90c>)
 8004086:	701a      	strb	r2, [r3, #0]

				if (mode_voltage < 0)
					mode_voltage = 0;

				if (mode_voltage > 9)
 8004088:	4b1c      	ldr	r3, [pc, #112]	@ (80040fc <Oscilloscope_Process+0x90c>)
 800408a:	781b      	ldrb	r3, [r3, #0]
 800408c:	2b09      	cmp	r3, #9
 800408e:	d902      	bls.n	8004096 <Oscilloscope_Process+0x8a6>
					mode_voltage = 9;
 8004090:	4b1a      	ldr	r3, [pc, #104]	@ (80040fc <Oscilloscope_Process+0x90c>)
 8004092:	2209      	movs	r2, #9
 8004094:	701a      	strb	r2, [r3, #0]

				uint32_t list_voltage[10] = {
 8004096:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 800409a:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 800409e:	4a18      	ldr	r2, [pc, #96]	@ (8004100 <Oscilloscope_Process+0x910>)
 80040a0:	461c      	mov	r4, r3
 80040a2:	4615      	mov	r5, r2
 80040a4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80040a6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80040a8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80040aa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80040ac:	e895 0003 	ldmia.w	r5, {r0, r1}
 80040b0:	e884 0003 	stmia.w	r4, {r0, r1}
					2000000,
					5000000,
					10000000
				};

				ylim_uV = list_voltage[mode_voltage];
 80040b4:	4b11      	ldr	r3, [pc, #68]	@ (80040fc <Oscilloscope_Process+0x90c>)
 80040b6:	781b      	ldrb	r3, [r3, #0]
 80040b8:	461a      	mov	r2, r3
 80040ba:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 80040be:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 80040c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80040c6:	4a0f      	ldr	r2, [pc, #60]	@ (8004104 <Oscilloscope_Process+0x914>)
 80040c8:	6013      	str	r3, [r2, #0]

				event_voltage = 1;
 80040ca:	4b0f      	ldr	r3, [pc, #60]	@ (8004108 <Oscilloscope_Process+0x918>)
 80040cc:	2201      	movs	r2, #1
 80040ce:	701a      	strb	r2, [r3, #0]
 80040d0:	e0d2      	b.n	8004278 <Oscilloscope_Process+0xa88>
 80040d2:	bf00      	nop
 80040d4:	2000d0e0 	.word	0x2000d0e0
 80040d8:	2000d0ec 	.word	0x2000d0ec
 80040dc:	2000d0e8 	.word	0x2000d0e8
 80040e0:	0800f6c0 	.word	0x0800f6c0
 80040e4:	2000d112 	.word	0x2000d112
 80040e8:	20013fe0 	.word	0x20013fe0
 80040ec:	2000d508 	.word	0x2000d508
 80040f0:	2000d318 	.word	0x2000d318
 80040f4:	2000d105 	.word	0x2000d105
 80040f8:	2000d10d 	.word	0x2000d10d
 80040fc:	2000d113 	.word	0x2000d113
 8004100:	0800f748 	.word	0x0800f748
 8004104:	2000d0f0 	.word	0x2000d0f0
 8004108:	2000d106 	.word	0x2000d106
			}

		} else {

			if (menu_selected_item == 2) {
 800410c:	4baa      	ldr	r3, [pc, #680]	@ (80043b8 <Oscilloscope_Process+0xbc8>)
 800410e:	f993 3000 	ldrsb.w	r3, [r3]
 8004112:	2b02      	cmp	r3, #2
 8004114:	d155      	bne.n	80041c2 <Oscilloscope_Process+0x9d2>
				clearTrigger(&display, trigger0);
 8004116:	4ba9      	ldr	r3, [pc, #676]	@ (80043bc <Oscilloscope_Process+0xbcc>)
 8004118:	881b      	ldrh	r3, [r3, #0]
 800411a:	4619      	mov	r1, r3
 800411c:	48a8      	ldr	r0, [pc, #672]	@ (80043c0 <Oscilloscope_Process+0xbd0>)
 800411e:	f7fe fdc8 	bl	8002cb2 <clearTrigger>
				trigger0 += delta;
 8004122:	f8d7 31e4 	ldr.w	r3, [r7, #484]	@ 0x1e4
 8004126:	b29a      	uxth	r2, r3
 8004128:	4ba4      	ldr	r3, [pc, #656]	@ (80043bc <Oscilloscope_Process+0xbcc>)
 800412a:	881b      	ldrh	r3, [r3, #0]
 800412c:	4413      	add	r3, r2
 800412e:	b29a      	uxth	r2, r3
 8004130:	4ba2      	ldr	r3, [pc, #648]	@ (80043bc <Oscilloscope_Process+0xbcc>)
 8004132:	801a      	strh	r2, [r3, #0]

				if (trigger0 < 20)
 8004134:	4ba1      	ldr	r3, [pc, #644]	@ (80043bc <Oscilloscope_Process+0xbcc>)
 8004136:	881b      	ldrh	r3, [r3, #0]
 8004138:	2b13      	cmp	r3, #19
 800413a:	d802      	bhi.n	8004142 <Oscilloscope_Process+0x952>
					trigger0 = 20;
 800413c:	4b9f      	ldr	r3, [pc, #636]	@ (80043bc <Oscilloscope_Process+0xbcc>)
 800413e:	2214      	movs	r2, #20
 8004140:	801a      	strh	r2, [r3, #0]

				if (trigger0 > 220)
 8004142:	4b9e      	ldr	r3, [pc, #632]	@ (80043bc <Oscilloscope_Process+0xbcc>)
 8004144:	881b      	ldrh	r3, [r3, #0]
 8004146:	2bdc      	cmp	r3, #220	@ 0xdc
 8004148:	d902      	bls.n	8004150 <Oscilloscope_Process+0x960>
					trigger0 = 220;
 800414a:	4b9c      	ldr	r3, [pc, #624]	@ (80043bc <Oscilloscope_Process+0xbcc>)
 800414c:	22dc      	movs	r2, #220	@ 0xdc
 800414e:	801a      	strh	r2, [r3, #0]

				if (trigger0 > cursor0)
 8004150:	4b9a      	ldr	r3, [pc, #616]	@ (80043bc <Oscilloscope_Process+0xbcc>)
 8004152:	881a      	ldrh	r2, [r3, #0]
 8004154:	4b9b      	ldr	r3, [pc, #620]	@ (80043c4 <Oscilloscope_Process+0xbd4>)
 8004156:	881b      	ldrh	r3, [r3, #0]
 8004158:	429a      	cmp	r2, r3
 800415a:	d903      	bls.n	8004164 <Oscilloscope_Process+0x974>
					trigger0 = cursor0;
 800415c:	4b99      	ldr	r3, [pc, #612]	@ (80043c4 <Oscilloscope_Process+0xbd4>)
 800415e:	881a      	ldrh	r2, [r3, #0]
 8004160:	4b96      	ldr	r3, [pc, #600]	@ (80043bc <Oscilloscope_Process+0xbcc>)
 8004162:	801a      	strh	r2, [r3, #0]

				float uV = -((float)(ylim_uV) * ((8.0f * (trigger0 - cursor0)) / 200.0f));
 8004164:	4b98      	ldr	r3, [pc, #608]	@ (80043c8 <Oscilloscope_Process+0xbd8>)
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	ee07 3a90 	vmov	s15, r3
 800416c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004170:	4b92      	ldr	r3, [pc, #584]	@ (80043bc <Oscilloscope_Process+0xbcc>)
 8004172:	881b      	ldrh	r3, [r3, #0]
 8004174:	461a      	mov	r2, r3
 8004176:	4b93      	ldr	r3, [pc, #588]	@ (80043c4 <Oscilloscope_Process+0xbd4>)
 8004178:	881b      	ldrh	r3, [r3, #0]
 800417a:	1ad3      	subs	r3, r2, r3
 800417c:	ee07 3a90 	vmov	s15, r3
 8004180:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004184:	eef2 6a00 	vmov.f32	s13, #32	@ 0x41000000  8.0
 8004188:	ee67 6aa6 	vmul.f32	s13, s15, s13
 800418c:	ed9f 6a8f 	vldr	s12, [pc, #572]	@ 80043cc <Oscilloscope_Process+0xbdc>
 8004190:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8004194:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004198:	eef1 7a67 	vneg.f32	s15, s15
 800419c:	edc7 7a74 	vstr	s15, [r7, #464]	@ 0x1d0
				trigger0_value = uV * 4096.0f / 3300000.0f;
 80041a0:	edd7 7a74 	vldr	s15, [r7, #464]	@ 0x1d0
 80041a4:	ed9f 7a8a 	vldr	s14, [pc, #552]	@ 80043d0 <Oscilloscope_Process+0xbe0>
 80041a8:	ee27 7a87 	vmul.f32	s14, s15, s14
 80041ac:	eddf 6a89 	vldr	s13, [pc, #548]	@ 80043d4 <Oscilloscope_Process+0xbe4>
 80041b0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80041b4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80041b8:	ee17 3a90 	vmov	r3, s15
 80041bc:	b29a      	uxth	r2, r3
 80041be:	4b86      	ldr	r3, [pc, #536]	@ (80043d8 <Oscilloscope_Process+0xbe8>)
 80041c0:	801a      	strh	r2, [r3, #0]
			}

			if (menu_selected_item == 3) {
 80041c2:	4b7d      	ldr	r3, [pc, #500]	@ (80043b8 <Oscilloscope_Process+0xbc8>)
 80041c4:	f993 3000 	ldrsb.w	r3, [r3]
 80041c8:	2b03      	cmp	r3, #3
 80041ca:	d155      	bne.n	8004278 <Oscilloscope_Process+0xa88>
				clearTrigger(&display, trigger1);
 80041cc:	4b83      	ldr	r3, [pc, #524]	@ (80043dc <Oscilloscope_Process+0xbec>)
 80041ce:	881b      	ldrh	r3, [r3, #0]
 80041d0:	4619      	mov	r1, r3
 80041d2:	487b      	ldr	r0, [pc, #492]	@ (80043c0 <Oscilloscope_Process+0xbd0>)
 80041d4:	f7fe fd6d 	bl	8002cb2 <clearTrigger>
				trigger1 += delta;
 80041d8:	f8d7 31e4 	ldr.w	r3, [r7, #484]	@ 0x1e4
 80041dc:	b29a      	uxth	r2, r3
 80041de:	4b7f      	ldr	r3, [pc, #508]	@ (80043dc <Oscilloscope_Process+0xbec>)
 80041e0:	881b      	ldrh	r3, [r3, #0]
 80041e2:	4413      	add	r3, r2
 80041e4:	b29a      	uxth	r2, r3
 80041e6:	4b7d      	ldr	r3, [pc, #500]	@ (80043dc <Oscilloscope_Process+0xbec>)
 80041e8:	801a      	strh	r2, [r3, #0]

				if (trigger1 < 20)
 80041ea:	4b7c      	ldr	r3, [pc, #496]	@ (80043dc <Oscilloscope_Process+0xbec>)
 80041ec:	881b      	ldrh	r3, [r3, #0]
 80041ee:	2b13      	cmp	r3, #19
 80041f0:	d802      	bhi.n	80041f8 <Oscilloscope_Process+0xa08>
					trigger1 = 20;
 80041f2:	4b7a      	ldr	r3, [pc, #488]	@ (80043dc <Oscilloscope_Process+0xbec>)
 80041f4:	2214      	movs	r2, #20
 80041f6:	801a      	strh	r2, [r3, #0]

				if (trigger1 > 220)
 80041f8:	4b78      	ldr	r3, [pc, #480]	@ (80043dc <Oscilloscope_Process+0xbec>)
 80041fa:	881b      	ldrh	r3, [r3, #0]
 80041fc:	2bdc      	cmp	r3, #220	@ 0xdc
 80041fe:	d902      	bls.n	8004206 <Oscilloscope_Process+0xa16>
					trigger1 = 220;
 8004200:	4b76      	ldr	r3, [pc, #472]	@ (80043dc <Oscilloscope_Process+0xbec>)
 8004202:	22dc      	movs	r2, #220	@ 0xdc
 8004204:	801a      	strh	r2, [r3, #0]

				if (trigger1 > cursor1)
 8004206:	4b75      	ldr	r3, [pc, #468]	@ (80043dc <Oscilloscope_Process+0xbec>)
 8004208:	881a      	ldrh	r2, [r3, #0]
 800420a:	4b75      	ldr	r3, [pc, #468]	@ (80043e0 <Oscilloscope_Process+0xbf0>)
 800420c:	881b      	ldrh	r3, [r3, #0]
 800420e:	429a      	cmp	r2, r3
 8004210:	d903      	bls.n	800421a <Oscilloscope_Process+0xa2a>
					trigger1 = cursor1;
 8004212:	4b73      	ldr	r3, [pc, #460]	@ (80043e0 <Oscilloscope_Process+0xbf0>)
 8004214:	881a      	ldrh	r2, [r3, #0]
 8004216:	4b71      	ldr	r3, [pc, #452]	@ (80043dc <Oscilloscope_Process+0xbec>)
 8004218:	801a      	strh	r2, [r3, #0]

				float uV = -((float)(ylim_uV) * ((8.0f * (trigger1 - cursor1)) / 200.0f));
 800421a:	4b6b      	ldr	r3, [pc, #428]	@ (80043c8 <Oscilloscope_Process+0xbd8>)
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	ee07 3a90 	vmov	s15, r3
 8004222:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004226:	4b6d      	ldr	r3, [pc, #436]	@ (80043dc <Oscilloscope_Process+0xbec>)
 8004228:	881b      	ldrh	r3, [r3, #0]
 800422a:	461a      	mov	r2, r3
 800422c:	4b6c      	ldr	r3, [pc, #432]	@ (80043e0 <Oscilloscope_Process+0xbf0>)
 800422e:	881b      	ldrh	r3, [r3, #0]
 8004230:	1ad3      	subs	r3, r2, r3
 8004232:	ee07 3a90 	vmov	s15, r3
 8004236:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800423a:	eef2 6a00 	vmov.f32	s13, #32	@ 0x41000000  8.0
 800423e:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8004242:	ed9f 6a62 	vldr	s12, [pc, #392]	@ 80043cc <Oscilloscope_Process+0xbdc>
 8004246:	eec6 7a86 	vdiv.f32	s15, s13, s12
 800424a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800424e:	eef1 7a67 	vneg.f32	s15, s15
 8004252:	edc7 7a73 	vstr	s15, [r7, #460]	@ 0x1cc
				trigger1_value = uV * 4096.0f / 3300000.0f;
 8004256:	edd7 7a73 	vldr	s15, [r7, #460]	@ 0x1cc
 800425a:	ed9f 7a5d 	vldr	s14, [pc, #372]	@ 80043d0 <Oscilloscope_Process+0xbe0>
 800425e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8004262:	eddf 6a5c 	vldr	s13, [pc, #368]	@ 80043d4 <Oscilloscope_Process+0xbe4>
 8004266:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800426a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800426e:	ee17 3a90 	vmov	r3, s15
 8004272:	b29a      	uxth	r2, r3
 8004274:	4b5b      	ldr	r3, [pc, #364]	@ (80043e4 <Oscilloscope_Process+0xbf4>)
 8004276:	801a      	strh	r2, [r3, #0]
			}

		}

		event_trigger = 1;
 8004278:	4b5b      	ldr	r3, [pc, #364]	@ (80043e8 <Oscilloscope_Process+0xbf8>)
 800427a:	2201      	movs	r2, #1
 800427c:	701a      	strb	r2, [r3, #0]
		encoder1_prev = encoder1_curr;
 800427e:	f8d7 31d4 	ldr.w	r3, [r7, #468]	@ 0x1d4
 8004282:	b29a      	uxth	r2, r3
 8004284:	4b59      	ldr	r3, [pc, #356]	@ (80043ec <Oscilloscope_Process+0xbfc>)
 8004286:	801a      	strh	r2, [r3, #0]
	}

	// Handle UI redraw trigger events
	if (event_trigger) {
 8004288:	4b57      	ldr	r3, [pc, #348]	@ (80043e8 <Oscilloscope_Process+0xbf8>)
 800428a:	781b      	ldrb	r3, [r3, #0]
 800428c:	2b00      	cmp	r3, #0
 800428e:	d026      	beq.n	80042de <Oscilloscope_Process+0xaee>
		clearTrigger(&display, trigger0);
 8004290:	4b4a      	ldr	r3, [pc, #296]	@ (80043bc <Oscilloscope_Process+0xbcc>)
 8004292:	881b      	ldrh	r3, [r3, #0]
 8004294:	4619      	mov	r1, r3
 8004296:	484a      	ldr	r0, [pc, #296]	@ (80043c0 <Oscilloscope_Process+0xbd0>)
 8004298:	f7fe fd0b 	bl	8002cb2 <clearTrigger>
		clearTrigger(&display, trigger1);
 800429c:	4b4f      	ldr	r3, [pc, #316]	@ (80043dc <Oscilloscope_Process+0xbec>)
 800429e:	881b      	ldrh	r3, [r3, #0]
 80042a0:	4619      	mov	r1, r3
 80042a2:	4847      	ldr	r0, [pc, #284]	@ (80043c0 <Oscilloscope_Process+0xbd0>)
 80042a4:	f7fe fd05 	bl	8002cb2 <clearTrigger>

		if (menu_channel0_enabled)
 80042a8:	4b51      	ldr	r3, [pc, #324]	@ (80043f0 <Oscilloscope_Process+0xc00>)
 80042aa:	781b      	ldrb	r3, [r3, #0]
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d007      	beq.n	80042c0 <Oscilloscope_Process+0xad0>
			drawTrigger(&display, trigger0, "T1", ILI9341_YELLOW);
 80042b0:	4b42      	ldr	r3, [pc, #264]	@ (80043bc <Oscilloscope_Process+0xbcc>)
 80042b2:	8819      	ldrh	r1, [r3, #0]
 80042b4:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 80042b8:	4a4e      	ldr	r2, [pc, #312]	@ (80043f4 <Oscilloscope_Process+0xc04>)
 80042ba:	4841      	ldr	r0, [pc, #260]	@ (80043c0 <Oscilloscope_Process+0xbd0>)
 80042bc:	f7fe fd62 	bl	8002d84 <drawTrigger>

		if (menu_channel1_enabled)
 80042c0:	4b4d      	ldr	r3, [pc, #308]	@ (80043f8 <Oscilloscope_Process+0xc08>)
 80042c2:	781b      	ldrb	r3, [r3, #0]
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d007      	beq.n	80042d8 <Oscilloscope_Process+0xae8>
			drawTrigger(&display, trigger1, "T2", ILI9341_CYAN);
 80042c8:	4b44      	ldr	r3, [pc, #272]	@ (80043dc <Oscilloscope_Process+0xbec>)
 80042ca:	8819      	ldrh	r1, [r3, #0]
 80042cc:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 80042d0:	4a4a      	ldr	r2, [pc, #296]	@ (80043fc <Oscilloscope_Process+0xc0c>)
 80042d2:	483b      	ldr	r0, [pc, #236]	@ (80043c0 <Oscilloscope_Process+0xbd0>)
 80042d4:	f7fe fd56 	bl	8002d84 <drawTrigger>

		event_trigger = 0;
 80042d8:	4b43      	ldr	r3, [pc, #268]	@ (80043e8 <Oscilloscope_Process+0xbf8>)
 80042da:	2200      	movs	r2, #0
 80042dc:	701a      	strb	r2, [r3, #0]
	}

	// Handle UI redraw selector events
	if (event_selector) {
 80042de:	4b48      	ldr	r3, [pc, #288]	@ (8004400 <Oscilloscope_Process+0xc10>)
 80042e0:	781b      	ldrb	r3, [r3, #0]
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d00f      	beq.n	8004306 <Oscilloscope_Process+0xb16>
		ILI9341_Rectangle(&display, menu_selector_x, menu_selector_y, 38, 13, ILI9341_WHITE);
 80042e6:	4b47      	ldr	r3, [pc, #284]	@ (8004404 <Oscilloscope_Process+0xc14>)
 80042e8:	8819      	ldrh	r1, [r3, #0]
 80042ea:	4b47      	ldr	r3, [pc, #284]	@ (8004408 <Oscilloscope_Process+0xc18>)
 80042ec:	881a      	ldrh	r2, [r3, #0]
 80042ee:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80042f2:	9301      	str	r3, [sp, #4]
 80042f4:	230d      	movs	r3, #13
 80042f6:	9300      	str	r3, [sp, #0]
 80042f8:	2326      	movs	r3, #38	@ 0x26
 80042fa:	4831      	ldr	r0, [pc, #196]	@ (80043c0 <Oscilloscope_Process+0xbd0>)
 80042fc:	f7fd fe22 	bl	8001f44 <ILI9341_Rectangle>
		event_selector = 0;
 8004300:	4b3f      	ldr	r3, [pc, #252]	@ (8004400 <Oscilloscope_Process+0xc10>)
 8004302:	2200      	movs	r2, #0
 8004304:	701a      	strb	r2, [r3, #0]
	}

	// Handle UI redraw mode events
	if (event_mode) {
 8004306:	4b41      	ldr	r3, [pc, #260]	@ (800440c <Oscilloscope_Process+0xc1c>)
 8004308:	781b      	ldrb	r3, [r3, #0]
 800430a:	2b00      	cmp	r3, #0
 800430c:	d040      	beq.n	8004390 <Oscilloscope_Process+0xba0>
		if (mode == 0)
 800430e:	4b40      	ldr	r3, [pc, #256]	@ (8004410 <Oscilloscope_Process+0xc20>)
 8004310:	781b      	ldrb	r3, [r3, #0]
 8004312:	2b00      	cmp	r3, #0
 8004314:	d110      	bne.n	8004338 <Oscilloscope_Process+0xb48>
			ILI9341_WriteString(&display, 22, 5, " RUN ", Font_7x10, ILI9341_BLACK, ILI9341_GREEN);
 8004316:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 800431a:	9303      	str	r3, [sp, #12]
 800431c:	2300      	movs	r3, #0
 800431e:	9302      	str	r3, [sp, #8]
 8004320:	4a3c      	ldr	r2, [pc, #240]	@ (8004414 <Oscilloscope_Process+0xc24>)
 8004322:	466b      	mov	r3, sp
 8004324:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004328:	e883 0003 	stmia.w	r3, {r0, r1}
 800432c:	4b3a      	ldr	r3, [pc, #232]	@ (8004418 <Oscilloscope_Process+0xc28>)
 800432e:	2205      	movs	r2, #5
 8004330:	2116      	movs	r1, #22
 8004332:	4823      	ldr	r0, [pc, #140]	@ (80043c0 <Oscilloscope_Process+0xbd0>)
 8004334:	f7fd fec1 	bl	80020ba <ILI9341_WriteString>

		if (mode == 1)
 8004338:	4b35      	ldr	r3, [pc, #212]	@ (8004410 <Oscilloscope_Process+0xc20>)
 800433a:	781b      	ldrb	r3, [r3, #0]
 800433c:	2b01      	cmp	r3, #1
 800433e:	d10f      	bne.n	8004360 <Oscilloscope_Process+0xb70>
			ILI9341_WriteString(&display, 22, 5, "MENU:", Font_7x10, ILI9341_BLACK, ILI9341_BLUE);
 8004340:	231f      	movs	r3, #31
 8004342:	9303      	str	r3, [sp, #12]
 8004344:	2300      	movs	r3, #0
 8004346:	9302      	str	r3, [sp, #8]
 8004348:	4a32      	ldr	r2, [pc, #200]	@ (8004414 <Oscilloscope_Process+0xc24>)
 800434a:	466b      	mov	r3, sp
 800434c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004350:	e883 0003 	stmia.w	r3, {r0, r1}
 8004354:	4b31      	ldr	r3, [pc, #196]	@ (800441c <Oscilloscope_Process+0xc2c>)
 8004356:	2205      	movs	r2, #5
 8004358:	2116      	movs	r1, #22
 800435a:	4819      	ldr	r0, [pc, #100]	@ (80043c0 <Oscilloscope_Process+0xbd0>)
 800435c:	f7fd fead 	bl	80020ba <ILI9341_WriteString>

		if (mode == 2)
 8004360:	4b2b      	ldr	r3, [pc, #172]	@ (8004410 <Oscilloscope_Process+0xc20>)
 8004362:	781b      	ldrb	r3, [r3, #0]
 8004364:	2b02      	cmp	r3, #2
 8004366:	d110      	bne.n	800438a <Oscilloscope_Process+0xb9a>
			ILI9341_WriteString(&display, 22, 5, "HOLD:", Font_7x10, ILI9341_BLACK, ILI9341_YELLOW);
 8004368:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 800436c:	9303      	str	r3, [sp, #12]
 800436e:	2300      	movs	r3, #0
 8004370:	9302      	str	r3, [sp, #8]
 8004372:	4a28      	ldr	r2, [pc, #160]	@ (8004414 <Oscilloscope_Process+0xc24>)
 8004374:	466b      	mov	r3, sp
 8004376:	e892 0003 	ldmia.w	r2, {r0, r1}
 800437a:	e883 0003 	stmia.w	r3, {r0, r1}
 800437e:	4b28      	ldr	r3, [pc, #160]	@ (8004420 <Oscilloscope_Process+0xc30>)
 8004380:	2205      	movs	r2, #5
 8004382:	2116      	movs	r1, #22
 8004384:	480e      	ldr	r0, [pc, #56]	@ (80043c0 <Oscilloscope_Process+0xbd0>)
 8004386:	f7fd fe98 	bl	80020ba <ILI9341_WriteString>

		event_mode = 0;
 800438a:	4b20      	ldr	r3, [pc, #128]	@ (800440c <Oscilloscope_Process+0xc1c>)
 800438c:	2200      	movs	r2, #0
 800438e:	701a      	strb	r2, [r3, #0]
	}

	// Handle UI redraw trigger mode events
	if (event_trigger_mode) {
 8004390:	4b24      	ldr	r3, [pc, #144]	@ (8004424 <Oscilloscope_Process+0xc34>)
 8004392:	781b      	ldrb	r3, [r3, #0]
 8004394:	2b00      	cmp	r3, #0
 8004396:	f000 80e0 	beq.w	800455a <Oscilloscope_Process+0xd6a>
		ILI9341_FillRectangle(&display, 61,  5, 33, 10, ILI9341_BLACK);
 800439a:	2300      	movs	r3, #0
 800439c:	9301      	str	r3, [sp, #4]
 800439e:	230a      	movs	r3, #10
 80043a0:	9300      	str	r3, [sp, #0]
 80043a2:	2321      	movs	r3, #33	@ 0x21
 80043a4:	2205      	movs	r2, #5
 80043a6:	213d      	movs	r1, #61	@ 0x3d
 80043a8:	4805      	ldr	r0, [pc, #20]	@ (80043c0 <Oscilloscope_Process+0xbd0>)
 80043aa:	f7fd fd6e 	bl	8001e8a <ILI9341_FillRectangle>
		ILI9341_FillRectangle(&display, 61, 14, 11, 1, ILI9341_WHITE);
 80043ae:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80043b2:	9301      	str	r3, [sp, #4]
 80043b4:	e038      	b.n	8004428 <Oscilloscope_Process+0xc38>
 80043b6:	bf00      	nop
 80043b8:	2000d10d 	.word	0x2000d10d
 80043bc:	2000d0f8 	.word	0x2000d0f8
 80043c0:	2000d4b8 	.word	0x2000d4b8
 80043c4:	2000d0f4 	.word	0x2000d0f4
 80043c8:	2000d0f0 	.word	0x2000d0f0
 80043cc:	43480000 	.word	0x43480000
 80043d0:	45800000 	.word	0x45800000
 80043d4:	4a496a80 	.word	0x4a496a80
 80043d8:	2000d0fc 	.word	0x2000d0fc
 80043dc:	2000d0fa 	.word	0x2000d0fa
 80043e0:	2000d0f6 	.word	0x2000d0f6
 80043e4:	2000d0fe 	.word	0x2000d0fe
 80043e8:	2000d103 	.word	0x2000d103
 80043ec:	20013536 	.word	0x20013536
 80043f0:	2000d10b 	.word	0x2000d10b
 80043f4:	0800f624 	.word	0x0800f624
 80043f8:	2000d10c 	.word	0x2000d10c
 80043fc:	0800f628 	.word	0x0800f628
 8004400:	2000d107 	.word	0x2000d107
 8004404:	2000d10e 	.word	0x2000d10e
 8004408:	2000d110 	.word	0x2000d110
 800440c:	2000d101 	.word	0x2000d101
 8004410:	20013532 	.word	0x20013532
 8004414:	20000000 	.word	0x20000000
 8004418:	0800f62c 	.word	0x0800f62c
 800441c:	0800f634 	.word	0x0800f634
 8004420:	0800f63c 	.word	0x0800f63c
 8004424:	2000d108 	.word	0x2000d108
 8004428:	2301      	movs	r3, #1
 800442a:	9300      	str	r3, [sp, #0]
 800442c:	230b      	movs	r3, #11
 800442e:	220e      	movs	r2, #14
 8004430:	213d      	movs	r1, #61	@ 0x3d
 8004432:	48aa      	ldr	r0, [pc, #680]	@ (80046dc <Oscilloscope_Process+0xeec>)
 8004434:	f7fd fd29 	bl	8001e8a <ILI9341_FillRectangle>
		ILI9341_FillRectangle(&display, 72,  5, 11, 1, ILI9341_WHITE);
 8004438:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800443c:	9301      	str	r3, [sp, #4]
 800443e:	2301      	movs	r3, #1
 8004440:	9300      	str	r3, [sp, #0]
 8004442:	230b      	movs	r3, #11
 8004444:	2205      	movs	r2, #5
 8004446:	2148      	movs	r1, #72	@ 0x48
 8004448:	48a4      	ldr	r0, [pc, #656]	@ (80046dc <Oscilloscope_Process+0xeec>)
 800444a:	f7fd fd1e 	bl	8001e8a <ILI9341_FillRectangle>
		ILI9341_FillRectangle(&display, 83, 14, 11, 1, ILI9341_WHITE);
 800444e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8004452:	9301      	str	r3, [sp, #4]
 8004454:	2301      	movs	r3, #1
 8004456:	9300      	str	r3, [sp, #0]
 8004458:	230b      	movs	r3, #11
 800445a:	220e      	movs	r2, #14
 800445c:	2153      	movs	r1, #83	@ 0x53
 800445e:	489f      	ldr	r0, [pc, #636]	@ (80046dc <Oscilloscope_Process+0xeec>)
 8004460:	f7fd fd13 	bl	8001e8a <ILI9341_FillRectangle>
		ILI9341_FillRectangle(&display, 72,  5, 1, 10, ILI9341_WHITE);
 8004464:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8004468:	9301      	str	r3, [sp, #4]
 800446a:	230a      	movs	r3, #10
 800446c:	9300      	str	r3, [sp, #0]
 800446e:	2301      	movs	r3, #1
 8004470:	2205      	movs	r2, #5
 8004472:	2148      	movs	r1, #72	@ 0x48
 8004474:	4899      	ldr	r0, [pc, #612]	@ (80046dc <Oscilloscope_Process+0xeec>)
 8004476:	f7fd fd08 	bl	8001e8a <ILI9341_FillRectangle>
		ILI9341_FillRectangle(&display, 82,  5, 1, 10, ILI9341_WHITE);
 800447a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800447e:	9301      	str	r3, [sp, #4]
 8004480:	230a      	movs	r3, #10
 8004482:	9300      	str	r3, [sp, #0]
 8004484:	2301      	movs	r3, #1
 8004486:	2205      	movs	r2, #5
 8004488:	2152      	movs	r1, #82	@ 0x52
 800448a:	4894      	ldr	r0, [pc, #592]	@ (80046dc <Oscilloscope_Process+0xeec>)
 800448c:	f7fd fcfd 	bl	8001e8a <ILI9341_FillRectangle>

		if (trigger_mode == 0) {
 8004490:	4b93      	ldr	r3, [pc, #588]	@ (80046e0 <Oscilloscope_Process+0xef0>)
 8004492:	781b      	ldrb	r3, [r3, #0]
 8004494:	2b00      	cmp	r3, #0
 8004496:	d12f      	bne.n	80044f8 <Oscilloscope_Process+0xd08>
			for (uint8_t i = 0; i < 4; i++) {
 8004498:	2300      	movs	r3, #0
 800449a:	f887 31e3 	strb.w	r3, [r7, #483]	@ 0x1e3
 800449e:	e026      	b.n	80044ee <Oscilloscope_Process+0xcfe>
				for (uint8_t j = i; j < (7 - i); j++)
 80044a0:	f897 31e3 	ldrb.w	r3, [r7, #483]	@ 0x1e3
 80044a4:	f887 31e2 	strb.w	r3, [r7, #482]	@ 0x1e2
 80044a8:	e014      	b.n	80044d4 <Oscilloscope_Process+0xce4>
					ILI9341_DrawPixel(&display, 69 + j, 11 - i, ILI9341_GREEN);
 80044aa:	f897 31e2 	ldrb.w	r3, [r7, #482]	@ 0x1e2
 80044ae:	b29b      	uxth	r3, r3
 80044b0:	3345      	adds	r3, #69	@ 0x45
 80044b2:	b299      	uxth	r1, r3
 80044b4:	f897 31e3 	ldrb.w	r3, [r7, #483]	@ 0x1e3
 80044b8:	b29b      	uxth	r3, r3
 80044ba:	f1c3 030b 	rsb	r3, r3, #11
 80044be:	b29a      	uxth	r2, r3
 80044c0:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 80044c4:	4885      	ldr	r0, [pc, #532]	@ (80046dc <Oscilloscope_Process+0xeec>)
 80044c6:	f7fd fbd5 	bl	8001c74 <ILI9341_DrawPixel>
				for (uint8_t j = i; j < (7 - i); j++)
 80044ca:	f897 31e2 	ldrb.w	r3, [r7, #482]	@ 0x1e2
 80044ce:	3301      	adds	r3, #1
 80044d0:	f887 31e2 	strb.w	r3, [r7, #482]	@ 0x1e2
 80044d4:	f897 21e2 	ldrb.w	r2, [r7, #482]	@ 0x1e2
 80044d8:	f897 31e3 	ldrb.w	r3, [r7, #483]	@ 0x1e3
 80044dc:	f1c3 0307 	rsb	r3, r3, #7
 80044e0:	429a      	cmp	r2, r3
 80044e2:	dbe2      	blt.n	80044aa <Oscilloscope_Process+0xcba>
			for (uint8_t i = 0; i < 4; i++) {
 80044e4:	f897 31e3 	ldrb.w	r3, [r7, #483]	@ 0x1e3
 80044e8:	3301      	adds	r3, #1
 80044ea:	f887 31e3 	strb.w	r3, [r7, #483]	@ 0x1e3
 80044ee:	f897 31e3 	ldrb.w	r3, [r7, #483]	@ 0x1e3
 80044f2:	2b03      	cmp	r3, #3
 80044f4:	d9d4      	bls.n	80044a0 <Oscilloscope_Process+0xcb0>
 80044f6:	e02d      	b.n	8004554 <Oscilloscope_Process+0xd64>
			}
		} else {
			for (uint8_t i = 0; i < 4; i++) {
 80044f8:	2300      	movs	r3, #0
 80044fa:	f887 31e1 	strb.w	r3, [r7, #481]	@ 0x1e1
 80044fe:	e025      	b.n	800454c <Oscilloscope_Process+0xd5c>
			  for (uint8_t j = i; j < (7 - i); j++)
 8004500:	f897 31e1 	ldrb.w	r3, [r7, #481]	@ 0x1e1
 8004504:	f887 31e0 	strb.w	r3, [r7, #480]	@ 0x1e0
 8004508:	e013      	b.n	8004532 <Oscilloscope_Process+0xd42>
				  ILI9341_DrawPixel(&display, 79 + j, 8 + i, ILI9341_RED);
 800450a:	f897 31e0 	ldrb.w	r3, [r7, #480]	@ 0x1e0
 800450e:	b29b      	uxth	r3, r3
 8004510:	334f      	adds	r3, #79	@ 0x4f
 8004512:	b299      	uxth	r1, r3
 8004514:	f897 31e1 	ldrb.w	r3, [r7, #481]	@ 0x1e1
 8004518:	b29b      	uxth	r3, r3
 800451a:	3308      	adds	r3, #8
 800451c:	b29a      	uxth	r2, r3
 800451e:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8004522:	486e      	ldr	r0, [pc, #440]	@ (80046dc <Oscilloscope_Process+0xeec>)
 8004524:	f7fd fba6 	bl	8001c74 <ILI9341_DrawPixel>
			  for (uint8_t j = i; j < (7 - i); j++)
 8004528:	f897 31e0 	ldrb.w	r3, [r7, #480]	@ 0x1e0
 800452c:	3301      	adds	r3, #1
 800452e:	f887 31e0 	strb.w	r3, [r7, #480]	@ 0x1e0
 8004532:	f897 21e0 	ldrb.w	r2, [r7, #480]	@ 0x1e0
 8004536:	f897 31e1 	ldrb.w	r3, [r7, #481]	@ 0x1e1
 800453a:	f1c3 0307 	rsb	r3, r3, #7
 800453e:	429a      	cmp	r2, r3
 8004540:	dbe3      	blt.n	800450a <Oscilloscope_Process+0xd1a>
			for (uint8_t i = 0; i < 4; i++) {
 8004542:	f897 31e1 	ldrb.w	r3, [r7, #481]	@ 0x1e1
 8004546:	3301      	adds	r3, #1
 8004548:	f887 31e1 	strb.w	r3, [r7, #481]	@ 0x1e1
 800454c:	f897 31e1 	ldrb.w	r3, [r7, #481]	@ 0x1e1
 8004550:	2b03      	cmp	r3, #3
 8004552:	d9d5      	bls.n	8004500 <Oscilloscope_Process+0xd10>
			}
		}

		event_trigger_mode = 0;
 8004554:	4b63      	ldr	r3, [pc, #396]	@ (80046e4 <Oscilloscope_Process+0xef4>)
 8004556:	2200      	movs	r2, #0
 8004558:	701a      	strb	r2, [r3, #0]
	}

	// Handle UI redraw seconds events
	if (event_seconds) {
 800455a:	4b63      	ldr	r3, [pc, #396]	@ (80046e8 <Oscilloscope_Process+0xef8>)
 800455c:	781b      	ldrb	r3, [r3, #0]
 800455e:	2b00      	cmp	r3, #0
 8004560:	d03f      	beq.n	80045e2 <Oscilloscope_Process+0xdf2>
		if (xlim_us >= 1000000)
 8004562:	4b62      	ldr	r3, [pc, #392]	@ (80046ec <Oscilloscope_Process+0xefc>)
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	4a62      	ldr	r2, [pc, #392]	@ (80046f0 <Oscilloscope_Process+0xf00>)
 8004568:	4293      	cmp	r3, r2
 800456a:	d90c      	bls.n	8004586 <Oscilloscope_Process+0xd96>
			snprintf(string, 255, "%3li s",  xlim_us / 1000000);
 800456c:	4b5f      	ldr	r3, [pc, #380]	@ (80046ec <Oscilloscope_Process+0xefc>)
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	4a60      	ldr	r2, [pc, #384]	@ (80046f4 <Oscilloscope_Process+0xf04>)
 8004572:	fba2 2303 	umull	r2, r3, r2, r3
 8004576:	0c9b      	lsrs	r3, r3, #18
 8004578:	f107 00cc 	add.w	r0, r7, #204	@ 0xcc
 800457c:	4a5e      	ldr	r2, [pc, #376]	@ (80046f8 <Oscilloscope_Process+0xf08>)
 800457e:	21ff      	movs	r1, #255	@ 0xff
 8004580:	f007 fb4a 	bl	800bc18 <sniprintf>
 8004584:	e019      	b.n	80045ba <Oscilloscope_Process+0xdca>
		else if (xlim_us >= 1000)
 8004586:	4b59      	ldr	r3, [pc, #356]	@ (80046ec <Oscilloscope_Process+0xefc>)
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800458e:	d30c      	bcc.n	80045aa <Oscilloscope_Process+0xdba>
			snprintf(string, 255, "%3lims", xlim_us / 1000);
 8004590:	4b56      	ldr	r3, [pc, #344]	@ (80046ec <Oscilloscope_Process+0xefc>)
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	4a59      	ldr	r2, [pc, #356]	@ (80046fc <Oscilloscope_Process+0xf0c>)
 8004596:	fba2 2303 	umull	r2, r3, r2, r3
 800459a:	099b      	lsrs	r3, r3, #6
 800459c:	f107 00cc 	add.w	r0, r7, #204	@ 0xcc
 80045a0:	4a57      	ldr	r2, [pc, #348]	@ (8004700 <Oscilloscope_Process+0xf10>)
 80045a2:	21ff      	movs	r1, #255	@ 0xff
 80045a4:	f007 fb38 	bl	800bc18 <sniprintf>
 80045a8:	e007      	b.n	80045ba <Oscilloscope_Process+0xdca>
		else
			snprintf(string, 255, "%3lius", xlim_us);
 80045aa:	4b50      	ldr	r3, [pc, #320]	@ (80046ec <Oscilloscope_Process+0xefc>)
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	f107 00cc 	add.w	r0, r7, #204	@ 0xcc
 80045b2:	4a54      	ldr	r2, [pc, #336]	@ (8004704 <Oscilloscope_Process+0xf14>)
 80045b4:	21ff      	movs	r1, #255	@ 0xff
 80045b6:	f007 fb2f 	bl	800bc18 <sniprintf>

		ILI9341_WriteString(&display, 22, 225, string, Font_7x10, ILI9341_BLACK, ILI9341_WHITE);
 80045ba:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 80045be:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80045c2:	9203      	str	r2, [sp, #12]
 80045c4:	2200      	movs	r2, #0
 80045c6:	9202      	str	r2, [sp, #8]
 80045c8:	494f      	ldr	r1, [pc, #316]	@ (8004708 <Oscilloscope_Process+0xf18>)
 80045ca:	466a      	mov	r2, sp
 80045cc:	c903      	ldmia	r1, {r0, r1}
 80045ce:	e882 0003 	stmia.w	r2, {r0, r1}
 80045d2:	22e1      	movs	r2, #225	@ 0xe1
 80045d4:	2116      	movs	r1, #22
 80045d6:	4841      	ldr	r0, [pc, #260]	@ (80046dc <Oscilloscope_Process+0xeec>)
 80045d8:	f7fd fd6f 	bl	80020ba <ILI9341_WriteString>

		event_seconds = 0;
 80045dc:	4b42      	ldr	r3, [pc, #264]	@ (80046e8 <Oscilloscope_Process+0xef8>)
 80045de:	2200      	movs	r2, #0
 80045e0:	701a      	strb	r2, [r3, #0]
	}

	// Handle UI redraw voltage events
	if (event_voltage) {
 80045e2:	4b4a      	ldr	r3, [pc, #296]	@ (800470c <Oscilloscope_Process+0xf1c>)
 80045e4:	781b      	ldrb	r3, [r3, #0]
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d03f      	beq.n	800466a <Oscilloscope_Process+0xe7a>
		if (ylim_uV >= 1000000)
 80045ea:	4b49      	ldr	r3, [pc, #292]	@ (8004710 <Oscilloscope_Process+0xf20>)
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	4a40      	ldr	r2, [pc, #256]	@ (80046f0 <Oscilloscope_Process+0xf00>)
 80045f0:	4293      	cmp	r3, r2
 80045f2:	d90c      	bls.n	800460e <Oscilloscope_Process+0xe1e>
			snprintf(string, 255, "%3li V",  ylim_uV / 1000000);
 80045f4:	4b46      	ldr	r3, [pc, #280]	@ (8004710 <Oscilloscope_Process+0xf20>)
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	4a3e      	ldr	r2, [pc, #248]	@ (80046f4 <Oscilloscope_Process+0xf04>)
 80045fa:	fba2 2303 	umull	r2, r3, r2, r3
 80045fe:	0c9b      	lsrs	r3, r3, #18
 8004600:	f107 00cc 	add.w	r0, r7, #204	@ 0xcc
 8004604:	4a43      	ldr	r2, [pc, #268]	@ (8004714 <Oscilloscope_Process+0xf24>)
 8004606:	21ff      	movs	r1, #255	@ 0xff
 8004608:	f007 fb06 	bl	800bc18 <sniprintf>
 800460c:	e019      	b.n	8004642 <Oscilloscope_Process+0xe52>
		else if (ylim_uV >= 1000)
 800460e:	4b40      	ldr	r3, [pc, #256]	@ (8004710 <Oscilloscope_Process+0xf20>)
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004616:	d30c      	bcc.n	8004632 <Oscilloscope_Process+0xe42>
			snprintf(string, 255, "%3limV", ylim_uV / 1000);
 8004618:	4b3d      	ldr	r3, [pc, #244]	@ (8004710 <Oscilloscope_Process+0xf20>)
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	4a37      	ldr	r2, [pc, #220]	@ (80046fc <Oscilloscope_Process+0xf0c>)
 800461e:	fba2 2303 	umull	r2, r3, r2, r3
 8004622:	099b      	lsrs	r3, r3, #6
 8004624:	f107 00cc 	add.w	r0, r7, #204	@ 0xcc
 8004628:	4a3b      	ldr	r2, [pc, #236]	@ (8004718 <Oscilloscope_Process+0xf28>)
 800462a:	21ff      	movs	r1, #255	@ 0xff
 800462c:	f007 faf4 	bl	800bc18 <sniprintf>
 8004630:	e007      	b.n	8004642 <Oscilloscope_Process+0xe52>
		else
			snprintf(string, 255, "%3liuV", ylim_uV);
 8004632:	4b37      	ldr	r3, [pc, #220]	@ (8004710 <Oscilloscope_Process+0xf20>)
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	f107 00cc 	add.w	r0, r7, #204	@ 0xcc
 800463a:	4a38      	ldr	r2, [pc, #224]	@ (800471c <Oscilloscope_Process+0xf2c>)
 800463c:	21ff      	movs	r1, #255	@ 0xff
 800463e:	f007 faeb 	bl	800bc18 <sniprintf>

		ILI9341_WriteString(&display, 60, 225, string, Font_7x10, ILI9341_BLACK, ILI9341_WHITE);
 8004642:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8004646:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800464a:	9203      	str	r2, [sp, #12]
 800464c:	2200      	movs	r2, #0
 800464e:	9202      	str	r2, [sp, #8]
 8004650:	492d      	ldr	r1, [pc, #180]	@ (8004708 <Oscilloscope_Process+0xf18>)
 8004652:	466a      	mov	r2, sp
 8004654:	c903      	ldmia	r1, {r0, r1}
 8004656:	e882 0003 	stmia.w	r2, {r0, r1}
 800465a:	22e1      	movs	r2, #225	@ 0xe1
 800465c:	213c      	movs	r1, #60	@ 0x3c
 800465e:	481f      	ldr	r0, [pc, #124]	@ (80046dc <Oscilloscope_Process+0xeec>)
 8004660:	f7fd fd2b 	bl	80020ba <ILI9341_WriteString>

		event_voltage = 0;
 8004664:	4b29      	ldr	r3, [pc, #164]	@ (800470c <Oscilloscope_Process+0xf1c>)
 8004666:	2200      	movs	r2, #0
 8004668:	701a      	strb	r2, [r3, #0]
	}

	snprintf(string, 255, "T:%i%i", event_trigger0_detected, event_trigger1_detected);
 800466a:	4b2d      	ldr	r3, [pc, #180]	@ (8004720 <Oscilloscope_Process+0xf30>)
 800466c:	781b      	ldrb	r3, [r3, #0]
 800466e:	461a      	mov	r2, r3
 8004670:	4b2c      	ldr	r3, [pc, #176]	@ (8004724 <Oscilloscope_Process+0xf34>)
 8004672:	781b      	ldrb	r3, [r3, #0]
 8004674:	f107 00cc 	add.w	r0, r7, #204	@ 0xcc
 8004678:	9300      	str	r3, [sp, #0]
 800467a:	4613      	mov	r3, r2
 800467c:	4a2a      	ldr	r2, [pc, #168]	@ (8004728 <Oscilloscope_Process+0xf38>)
 800467e:	21ff      	movs	r1, #255	@ 0xff
 8004680:	f007 faca 	bl	800bc18 <sniprintf>
	ILI9341_WriteString(&display, 195, 5, string, Font_7x10, ILI9341_WHITE, ILI9341_BLACK);
 8004684:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8004688:	2200      	movs	r2, #0
 800468a:	9203      	str	r2, [sp, #12]
 800468c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004690:	9202      	str	r2, [sp, #8]
 8004692:	491d      	ldr	r1, [pc, #116]	@ (8004708 <Oscilloscope_Process+0xf18>)
 8004694:	466a      	mov	r2, sp
 8004696:	c903      	ldmia	r1, {r0, r1}
 8004698:	e882 0003 	stmia.w	r2, {r0, r1}
 800469c:	2205      	movs	r2, #5
 800469e:	21c3      	movs	r1, #195	@ 0xc3
 80046a0:	480e      	ldr	r0, [pc, #56]	@ (80046dc <Oscilloscope_Process+0xeec>)
 80046a2:	f7fd fd0a 	bl	80020ba <ILI9341_WriteString>

	if (menu_channel1_enabled && menu_selected_item == 3) {
 80046a6:	4b21      	ldr	r3, [pc, #132]	@ (800472c <Oscilloscope_Process+0xf3c>)
 80046a8:	781b      	ldrb	r3, [r3, #0]
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d048      	beq.n	8004740 <Oscilloscope_Process+0xf50>
 80046ae:	4b20      	ldr	r3, [pc, #128]	@ (8004730 <Oscilloscope_Process+0xf40>)
 80046b0:	f993 3000 	ldrsb.w	r3, [r3]
 80046b4:	2b03      	cmp	r3, #3
 80046b6:	d143      	bne.n	8004740 <Oscilloscope_Process+0xf50>
		//if (adc_period1_detected)
			drawSignalParam(&display, string, 255, adc_max[1], adc_min[1], adc_period[1]);
 80046b8:	4b1e      	ldr	r3, [pc, #120]	@ (8004734 <Oscilloscope_Process+0xf44>)
 80046ba:	885b      	ldrh	r3, [r3, #2]
 80046bc:	b298      	uxth	r0, r3
 80046be:	4b1e      	ldr	r3, [pc, #120]	@ (8004738 <Oscilloscope_Process+0xf48>)
 80046c0:	885b      	ldrh	r3, [r3, #2]
 80046c2:	b29b      	uxth	r3, r3
 80046c4:	4a1d      	ldr	r2, [pc, #116]	@ (800473c <Oscilloscope_Process+0xf4c>)
 80046c6:	6852      	ldr	r2, [r2, #4]
 80046c8:	f107 01cc 	add.w	r1, r7, #204	@ 0xcc
 80046cc:	9201      	str	r2, [sp, #4]
 80046ce:	9300      	str	r3, [sp, #0]
 80046d0:	4603      	mov	r3, r0
 80046d2:	22ff      	movs	r2, #255	@ 0xff
 80046d4:	4801      	ldr	r0, [pc, #4]	@ (80046dc <Oscilloscope_Process+0xeec>)
 80046d6:	f7fe ff63 	bl	80035a0 <drawSignalParam>
 80046da:	e046      	b.n	800476a <Oscilloscope_Process+0xf7a>
 80046dc:	2000d4b8 	.word	0x2000d4b8
 80046e0:	2001352c 	.word	0x2001352c
 80046e4:	2000d108 	.word	0x2000d108
 80046e8:	2000d105 	.word	0x2000d105
 80046ec:	2000d0ec 	.word	0x2000d0ec
 80046f0:	000f423f 	.word	0x000f423f
 80046f4:	431bde83 	.word	0x431bde83
 80046f8:	0800f644 	.word	0x0800f644
 80046fc:	10624dd3 	.word	0x10624dd3
 8004700:	0800f64c 	.word	0x0800f64c
 8004704:	0800f654 	.word	0x0800f654
 8004708:	20000000 	.word	0x20000000
 800470c:	2000d106 	.word	0x2000d106
 8004710:	2000d0f0 	.word	0x2000d0f0
 8004714:	0800f65c 	.word	0x0800f65c
 8004718:	0800f664 	.word	0x0800f664
 800471c:	0800f66c 	.word	0x0800f66c
 8004720:	2000d109 	.word	0x2000d109
 8004724:	2000d10a 	.word	0x2000d10a
 8004728:	0800f674 	.word	0x0800f674
 800472c:	2000d10c 	.word	0x2000d10c
 8004730:	2000d10d 	.word	0x2000d10d
 8004734:	2000d51c 	.word	0x2000d51c
 8004738:	2000d0e4 	.word	0x2000d0e4
 800473c:	2000d520 	.word	0x2000d520
	} else if (menu_channel0_enabled) {
 8004740:	4b39      	ldr	r3, [pc, #228]	@ (8004828 <Oscilloscope_Process+0x1038>)
 8004742:	781b      	ldrb	r3, [r3, #0]
 8004744:	2b00      	cmp	r3, #0
 8004746:	d010      	beq.n	800476a <Oscilloscope_Process+0xf7a>
		//if (adc_period0_detected)
			drawSignalParam(&display, string, 255, adc_max[0], adc_min[0], adc_period[0]);
 8004748:	4b38      	ldr	r3, [pc, #224]	@ (800482c <Oscilloscope_Process+0x103c>)
 800474a:	881b      	ldrh	r3, [r3, #0]
 800474c:	b298      	uxth	r0, r3
 800474e:	4b38      	ldr	r3, [pc, #224]	@ (8004830 <Oscilloscope_Process+0x1040>)
 8004750:	881b      	ldrh	r3, [r3, #0]
 8004752:	b29b      	uxth	r3, r3
 8004754:	4a37      	ldr	r2, [pc, #220]	@ (8004834 <Oscilloscope_Process+0x1044>)
 8004756:	6812      	ldr	r2, [r2, #0]
 8004758:	f107 01cc 	add.w	r1, r7, #204	@ 0xcc
 800475c:	9201      	str	r2, [sp, #4]
 800475e:	9300      	str	r3, [sp, #0]
 8004760:	4603      	mov	r3, r0
 8004762:	22ff      	movs	r2, #255	@ 0xff
 8004764:	4834      	ldr	r0, [pc, #208]	@ (8004838 <Oscilloscope_Process+0x1048>)
 8004766:	f7fe ff1b 	bl	80035a0 <drawSignalParam>
	}

	// Restart ADC ...
	if (local_event_adc) {
 800476a:	f897 31ef 	ldrb.w	r3, [r7, #495]	@ 0x1ef
 800476e:	2b00      	cmp	r3, #0
 8004770:	d04e      	beq.n	8004810 <Oscilloscope_Process+0x1020>
		adc_reset_cyccnt = 1;
 8004772:	4b32      	ldr	r3, [pc, #200]	@ (800483c <Oscilloscope_Process+0x104c>)
 8004774:	2201      	movs	r2, #1
 8004776:	701a      	strb	r2, [r3, #0]
		adc0_length = 0;
 8004778:	4b31      	ldr	r3, [pc, #196]	@ (8004840 <Oscilloscope_Process+0x1050>)
 800477a:	2200      	movs	r2, #0
 800477c:	601a      	str	r2, [r3, #0]
		adc1_length = 0;
 800477e:	4b31      	ldr	r3, [pc, #196]	@ (8004844 <Oscilloscope_Process+0x1054>)
 8004780:	2200      	movs	r2, #0
 8004782:	601a      	str	r2, [r3, #0]
		adc_max[0] = 0;
 8004784:	4b29      	ldr	r3, [pc, #164]	@ (800482c <Oscilloscope_Process+0x103c>)
 8004786:	2200      	movs	r2, #0
 8004788:	801a      	strh	r2, [r3, #0]
		adc_max[1] = 0;
 800478a:	4b28      	ldr	r3, [pc, #160]	@ (800482c <Oscilloscope_Process+0x103c>)
 800478c:	2200      	movs	r2, #0
 800478e:	805a      	strh	r2, [r3, #2]
		adc_min[0] = -1;
 8004790:	4b27      	ldr	r3, [pc, #156]	@ (8004830 <Oscilloscope_Process+0x1040>)
 8004792:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004796:	801a      	strh	r2, [r3, #0]
		adc_min[1] = -1;
 8004798:	4b25      	ldr	r3, [pc, #148]	@ (8004830 <Oscilloscope_Process+0x1040>)
 800479a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800479e:	805a      	strh	r2, [r3, #2]
		adc_period[0] = 0;
 80047a0:	4b24      	ldr	r3, [pc, #144]	@ (8004834 <Oscilloscope_Process+0x1044>)
 80047a2:	2200      	movs	r2, #0
 80047a4:	601a      	str	r2, [r3, #0]
		adc_period[1] = 0;
 80047a6:	4b23      	ldr	r3, [pc, #140]	@ (8004834 <Oscilloscope_Process+0x1044>)
 80047a8:	2200      	movs	r2, #0
 80047aa:	605a      	str	r2, [r3, #4]
		adc_period0_detected = 0;
 80047ac:	4b26      	ldr	r3, [pc, #152]	@ (8004848 <Oscilloscope_Process+0x1058>)
 80047ae:	2200      	movs	r2, #0
 80047b0:	701a      	strb	r2, [r3, #0]
		adc_period1_detected = 0;
 80047b2:	4b26      	ldr	r3, [pc, #152]	@ (800484c <Oscilloscope_Process+0x105c>)
 80047b4:	2200      	movs	r2, #0
 80047b6:	701a      	strb	r2, [r3, #0]
		event_trigger0_detected = 0;
 80047b8:	4b25      	ldr	r3, [pc, #148]	@ (8004850 <Oscilloscope_Process+0x1060>)
 80047ba:	2200      	movs	r2, #0
 80047bc:	701a      	strb	r2, [r3, #0]
		event_trigger1_detected = 0;
 80047be:	4b25      	ldr	r3, [pc, #148]	@ (8004854 <Oscilloscope_Process+0x1064>)
 80047c0:	2200      	movs	r2, #0
 80047c2:	701a      	strb	r2, [r3, #0]

		if (menu_channel0_enabled)
 80047c4:	4b18      	ldr	r3, [pc, #96]	@ (8004828 <Oscilloscope_Process+0x1038>)
 80047c6:	781b      	ldrb	r3, [r3, #0]
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d003      	beq.n	80047d4 <Oscilloscope_Process+0xfe4>
			adc0_filled = 0;
 80047cc:	4b22      	ldr	r3, [pc, #136]	@ (8004858 <Oscilloscope_Process+0x1068>)
 80047ce:	2200      	movs	r2, #0
 80047d0:	701a      	strb	r2, [r3, #0]
 80047d2:	e002      	b.n	80047da <Oscilloscope_Process+0xfea>
		else
			adc0_filled = 1;
 80047d4:	4b20      	ldr	r3, [pc, #128]	@ (8004858 <Oscilloscope_Process+0x1068>)
 80047d6:	2201      	movs	r2, #1
 80047d8:	701a      	strb	r2, [r3, #0]

		if (menu_channel1_enabled)
 80047da:	4b20      	ldr	r3, [pc, #128]	@ (800485c <Oscilloscope_Process+0x106c>)
 80047dc:	781b      	ldrb	r3, [r3, #0]
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d003      	beq.n	80047ea <Oscilloscope_Process+0xffa>
			adc1_filled = 0;
 80047e2:	4b1f      	ldr	r3, [pc, #124]	@ (8004860 <Oscilloscope_Process+0x1070>)
 80047e4:	2200      	movs	r2, #0
 80047e6:	701a      	strb	r2, [r3, #0]
 80047e8:	e002      	b.n	80047f0 <Oscilloscope_Process+0x1000>
		else
			adc1_filled = 1;
 80047ea:	4b1d      	ldr	r3, [pc, #116]	@ (8004860 <Oscilloscope_Process+0x1070>)
 80047ec:	2201      	movs	r2, #1
 80047ee:	701a      	strb	r2, [r3, #0]

		if (adc_immediate) {
 80047f0:	4b1c      	ldr	r3, [pc, #112]	@ (8004864 <Oscilloscope_Process+0x1074>)
 80047f2:	781b      	ldrb	r3, [r3, #0]
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d005      	beq.n	8004804 <Oscilloscope_Process+0x1014>
			// The ADC starts immediately after the previous measurement is handled
			HAL_ADC_Start_DMA(&hadc1, (uint32_t*)&adc_data, 2);
 80047f8:	2202      	movs	r2, #2
 80047fa:	491b      	ldr	r1, [pc, #108]	@ (8004868 <Oscilloscope_Process+0x1078>)
 80047fc:	481b      	ldr	r0, [pc, #108]	@ (800486c <Oscilloscope_Process+0x107c>)
 80047fe:	f000 ff01 	bl	8005604 <HAL_ADC_Start_DMA>
 8004802:	e002      	b.n	800480a <Oscilloscope_Process+0x101a>
		} else {
			// ADC starts by timer
			HAL_TIM_Base_Start_IT(&htim10);
 8004804:	481a      	ldr	r0, [pc, #104]	@ (8004870 <Oscilloscope_Process+0x1080>)
 8004806:	f004 f8b9 	bl	800897c <HAL_TIM_Base_Start_IT>
		}

		local_event_adc = 0;
 800480a:	2300      	movs	r3, #0
 800480c:	f887 31ef 	strb.w	r3, [r7, #495]	@ 0x1ef
	}

	frames++;
 8004810:	4b18      	ldr	r3, [pc, #96]	@ (8004874 <Oscilloscope_Process+0x1084>)
 8004812:	781b      	ldrb	r3, [r3, #0]
 8004814:	3301      	adds	r3, #1
 8004816:	b2da      	uxtb	r2, r3
 8004818:	4b16      	ldr	r3, [pc, #88]	@ (8004874 <Oscilloscope_Process+0x1084>)
 800481a:	701a      	strb	r2, [r3, #0]

}
 800481c:	bf00      	nop
 800481e:	f507 77f8 	add.w	r7, r7, #496	@ 0x1f0
 8004822:	46bd      	mov	sp, r7
 8004824:	bdb0      	pop	{r4, r5, r7, pc}
 8004826:	bf00      	nop
 8004828:	2000d10b 	.word	0x2000d10b
 800482c:	2000d51c 	.word	0x2000d51c
 8004830:	2000d0e4 	.word	0x2000d0e4
 8004834:	2000d520 	.word	0x2000d520
 8004838:	2000d4b8 	.word	0x2000d4b8
 800483c:	2000d0e2 	.word	0x2000d0e2
 8004840:	2000d510 	.word	0x2000d510
 8004844:	2000d514 	.word	0x2000d514
 8004848:	2000d528 	.word	0x2000d528
 800484c:	2000d529 	.word	0x2000d529
 8004850:	2000d109 	.word	0x2000d109
 8004854:	2000d10a 	.word	0x2000d10a
 8004858:	2000d518 	.word	0x2000d518
 800485c:	2000d10c 	.word	0x2000d10c
 8004860:	2000d0e0 	.word	0x2000d0e0
 8004864:	2000d0e8 	.word	0x2000d0e8
 8004868:	2000d508 	.word	0x2000d508
 800486c:	2000d318 	.word	0x2000d318
 8004870:	20013fe0 	.word	0x20013fe0
 8004874:	20013538 	.word	0x20013538

08004878 <MX_SPI4_Init>:
SPI_HandleTypeDef hspi4;
SPI_HandleTypeDef hspi5;

/* SPI4 init function */
void MX_SPI4_Init(void)
{
 8004878:	b580      	push	{r7, lr}
 800487a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI4_Init 0 */

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  hspi4.Instance = SPI4;
 800487c:	4b17      	ldr	r3, [pc, #92]	@ (80048dc <MX_SPI4_Init+0x64>)
 800487e:	4a18      	ldr	r2, [pc, #96]	@ (80048e0 <MX_SPI4_Init+0x68>)
 8004880:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 8004882:	4b16      	ldr	r3, [pc, #88]	@ (80048dc <MX_SPI4_Init+0x64>)
 8004884:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8004888:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 800488a:	4b14      	ldr	r3, [pc, #80]	@ (80048dc <MX_SPI4_Init+0x64>)
 800488c:	2200      	movs	r2, #0
 800488e:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 8004890:	4b12      	ldr	r3, [pc, #72]	@ (80048dc <MX_SPI4_Init+0x64>)
 8004892:	2200      	movs	r2, #0
 8004894:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 8004896:	4b11      	ldr	r3, [pc, #68]	@ (80048dc <MX_SPI4_Init+0x64>)
 8004898:	2200      	movs	r2, #0
 800489a:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 800489c:	4b0f      	ldr	r3, [pc, #60]	@ (80048dc <MX_SPI4_Init+0x64>)
 800489e:	2200      	movs	r2, #0
 80048a0:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 80048a2:	4b0e      	ldr	r3, [pc, #56]	@ (80048dc <MX_SPI4_Init+0x64>)
 80048a4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80048a8:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80048aa:	4b0c      	ldr	r3, [pc, #48]	@ (80048dc <MX_SPI4_Init+0x64>)
 80048ac:	2200      	movs	r2, #0
 80048ae:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80048b0:	4b0a      	ldr	r3, [pc, #40]	@ (80048dc <MX_SPI4_Init+0x64>)
 80048b2:	2200      	movs	r2, #0
 80048b4:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 80048b6:	4b09      	ldr	r3, [pc, #36]	@ (80048dc <MX_SPI4_Init+0x64>)
 80048b8:	2200      	movs	r2, #0
 80048ba:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80048bc:	4b07      	ldr	r3, [pc, #28]	@ (80048dc <MX_SPI4_Init+0x64>)
 80048be:	2200      	movs	r2, #0
 80048c0:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi4.Init.CRCPolynomial = 10;
 80048c2:	4b06      	ldr	r3, [pc, #24]	@ (80048dc <MX_SPI4_Init+0x64>)
 80048c4:	220a      	movs	r2, #10
 80048c6:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 80048c8:	4804      	ldr	r0, [pc, #16]	@ (80048dc <MX_SPI4_Init+0x64>)
 80048ca:	f003 fd5d 	bl	8008388 <HAL_SPI_Init>
 80048ce:	4603      	mov	r3, r0
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d001      	beq.n	80048d8 <MX_SPI4_Init+0x60>
  {
    Error_Handler();
 80048d4:	f7fe f84a 	bl	800296c <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 80048d8:	bf00      	nop
 80048da:	bd80      	pop	{r7, pc}
 80048dc:	20013e0c 	.word	0x20013e0c
 80048e0:	40013400 	.word	0x40013400

080048e4 <MX_SPI5_Init>:
/* SPI5 init function */
void MX_SPI5_Init(void)
{
 80048e4:	b580      	push	{r7, lr}
 80048e6:	af00      	add	r7, sp, #0
  /* USER CODE END SPI5_Init 0 */

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  hspi5.Instance = SPI5;
 80048e8:	4b17      	ldr	r3, [pc, #92]	@ (8004948 <MX_SPI5_Init+0x64>)
 80048ea:	4a18      	ldr	r2, [pc, #96]	@ (800494c <MX_SPI5_Init+0x68>)
 80048ec:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 80048ee:	4b16      	ldr	r3, [pc, #88]	@ (8004948 <MX_SPI5_Init+0x64>)
 80048f0:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80048f4:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 80048f6:	4b14      	ldr	r3, [pc, #80]	@ (8004948 <MX_SPI5_Init+0x64>)
 80048f8:	2200      	movs	r2, #0
 80048fa:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 80048fc:	4b12      	ldr	r3, [pc, #72]	@ (8004948 <MX_SPI5_Init+0x64>)
 80048fe:	2200      	movs	r2, #0
 8004900:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 8004902:	4b11      	ldr	r3, [pc, #68]	@ (8004948 <MX_SPI5_Init+0x64>)
 8004904:	2200      	movs	r2, #0
 8004906:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8004908:	4b0f      	ldr	r3, [pc, #60]	@ (8004948 <MX_SPI5_Init+0x64>)
 800490a:	2200      	movs	r2, #0
 800490c:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 800490e:	4b0e      	ldr	r3, [pc, #56]	@ (8004948 <MX_SPI5_Init+0x64>)
 8004910:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004914:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004916:	4b0c      	ldr	r3, [pc, #48]	@ (8004948 <MX_SPI5_Init+0x64>)
 8004918:	2200      	movs	r2, #0
 800491a:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800491c:	4b0a      	ldr	r3, [pc, #40]	@ (8004948 <MX_SPI5_Init+0x64>)
 800491e:	2200      	movs	r2, #0
 8004920:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 8004922:	4b09      	ldr	r3, [pc, #36]	@ (8004948 <MX_SPI5_Init+0x64>)
 8004924:	2200      	movs	r2, #0
 8004926:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004928:	4b07      	ldr	r3, [pc, #28]	@ (8004948 <MX_SPI5_Init+0x64>)
 800492a:	2200      	movs	r2, #0
 800492c:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi5.Init.CRCPolynomial = 10;
 800492e:	4b06      	ldr	r3, [pc, #24]	@ (8004948 <MX_SPI5_Init+0x64>)
 8004930:	220a      	movs	r2, #10
 8004932:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8004934:	4804      	ldr	r0, [pc, #16]	@ (8004948 <MX_SPI5_Init+0x64>)
 8004936:	f003 fd27 	bl	8008388 <HAL_SPI_Init>
 800493a:	4603      	mov	r3, r0
 800493c:	2b00      	cmp	r3, #0
 800493e:	d001      	beq.n	8004944 <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 8004940:	f7fe f814 	bl	800296c <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 8004944:	bf00      	nop
 8004946:	bd80      	pop	{r7, pc}
 8004948:	20013e64 	.word	0x20013e64
 800494c:	40015000 	.word	0x40015000

08004950 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8004950:	b580      	push	{r7, lr}
 8004952:	b08e      	sub	sp, #56	@ 0x38
 8004954:	af00      	add	r7, sp, #0
 8004956:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004958:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800495c:	2200      	movs	r2, #0
 800495e:	601a      	str	r2, [r3, #0]
 8004960:	605a      	str	r2, [r3, #4]
 8004962:	609a      	str	r2, [r3, #8]
 8004964:	60da      	str	r2, [r3, #12]
 8004966:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI4)
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	4a59      	ldr	r2, [pc, #356]	@ (8004ad4 <HAL_SPI_MspInit+0x184>)
 800496e:	4293      	cmp	r3, r2
 8004970:	d15c      	bne.n	8004a2c <HAL_SPI_MspInit+0xdc>
  {
  /* USER CODE BEGIN SPI4_MspInit 0 */

  /* USER CODE END SPI4_MspInit 0 */
    /* SPI4 clock enable */
    __HAL_RCC_SPI4_CLK_ENABLE();
 8004972:	2300      	movs	r3, #0
 8004974:	623b      	str	r3, [r7, #32]
 8004976:	4b58      	ldr	r3, [pc, #352]	@ (8004ad8 <HAL_SPI_MspInit+0x188>)
 8004978:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800497a:	4a57      	ldr	r2, [pc, #348]	@ (8004ad8 <HAL_SPI_MspInit+0x188>)
 800497c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8004980:	6453      	str	r3, [r2, #68]	@ 0x44
 8004982:	4b55      	ldr	r3, [pc, #340]	@ (8004ad8 <HAL_SPI_MspInit+0x188>)
 8004984:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004986:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800498a:	623b      	str	r3, [r7, #32]
 800498c:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800498e:	2300      	movs	r3, #0
 8004990:	61fb      	str	r3, [r7, #28]
 8004992:	4b51      	ldr	r3, [pc, #324]	@ (8004ad8 <HAL_SPI_MspInit+0x188>)
 8004994:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004996:	4a50      	ldr	r2, [pc, #320]	@ (8004ad8 <HAL_SPI_MspInit+0x188>)
 8004998:	f043 0301 	orr.w	r3, r3, #1
 800499c:	6313      	str	r3, [r2, #48]	@ 0x30
 800499e:	4b4e      	ldr	r3, [pc, #312]	@ (8004ad8 <HAL_SPI_MspInit+0x188>)
 80049a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80049a2:	f003 0301 	and.w	r3, r3, #1
 80049a6:	61fb      	str	r3, [r7, #28]
 80049a8:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80049aa:	2300      	movs	r3, #0
 80049ac:	61bb      	str	r3, [r7, #24]
 80049ae:	4b4a      	ldr	r3, [pc, #296]	@ (8004ad8 <HAL_SPI_MspInit+0x188>)
 80049b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80049b2:	4a49      	ldr	r2, [pc, #292]	@ (8004ad8 <HAL_SPI_MspInit+0x188>)
 80049b4:	f043 0302 	orr.w	r3, r3, #2
 80049b8:	6313      	str	r3, [r2, #48]	@ 0x30
 80049ba:	4b47      	ldr	r3, [pc, #284]	@ (8004ad8 <HAL_SPI_MspInit+0x188>)
 80049bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80049be:	f003 0302 	and.w	r3, r3, #2
 80049c2:	61bb      	str	r3, [r7, #24]
 80049c4:	69bb      	ldr	r3, [r7, #24]
    /**SPI4 GPIO Configuration
    PA1     ------> SPI4_MOSI
    PB13     ------> SPI4_SCK
    PA11     ------> SPI4_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80049c6:	2302      	movs	r3, #2
 80049c8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80049ca:	2302      	movs	r3, #2
 80049cc:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80049ce:	2300      	movs	r3, #0
 80049d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80049d2:	2303      	movs	r3, #3
 80049d4:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 80049d6:	2305      	movs	r3, #5
 80049d8:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80049da:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80049de:	4619      	mov	r1, r3
 80049e0:	483e      	ldr	r0, [pc, #248]	@ (8004adc <HAL_SPI_MspInit+0x18c>)
 80049e2:	f001 ff51 	bl	8006888 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 80049e6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80049ea:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80049ec:	2302      	movs	r3, #2
 80049ee:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80049f0:	2300      	movs	r3, #0
 80049f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80049f4:	2303      	movs	r3, #3
 80049f6:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI4;
 80049f8:	2306      	movs	r3, #6
 80049fa:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80049fc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004a00:	4619      	mov	r1, r3
 8004a02:	4837      	ldr	r0, [pc, #220]	@ (8004ae0 <HAL_SPI_MspInit+0x190>)
 8004a04:	f001 ff40 	bl	8006888 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8004a08:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8004a0c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004a0e:	2302      	movs	r3, #2
 8004a10:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a12:	2300      	movs	r3, #0
 8004a14:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004a16:	2303      	movs	r3, #3
 8004a18:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI4;
 8004a1a:	2306      	movs	r3, #6
 8004a1c:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004a1e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004a22:	4619      	mov	r1, r3
 8004a24:	482d      	ldr	r0, [pc, #180]	@ (8004adc <HAL_SPI_MspInit+0x18c>)
 8004a26:	f001 ff2f 	bl	8006888 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }
}
 8004a2a:	e04f      	b.n	8004acc <HAL_SPI_MspInit+0x17c>
  else if(spiHandle->Instance==SPI5)
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	4a2c      	ldr	r2, [pc, #176]	@ (8004ae4 <HAL_SPI_MspInit+0x194>)
 8004a32:	4293      	cmp	r3, r2
 8004a34:	d14a      	bne.n	8004acc <HAL_SPI_MspInit+0x17c>
    __HAL_RCC_SPI5_CLK_ENABLE();
 8004a36:	2300      	movs	r3, #0
 8004a38:	617b      	str	r3, [r7, #20]
 8004a3a:	4b27      	ldr	r3, [pc, #156]	@ (8004ad8 <HAL_SPI_MspInit+0x188>)
 8004a3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a3e:	4a26      	ldr	r2, [pc, #152]	@ (8004ad8 <HAL_SPI_MspInit+0x188>)
 8004a40:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004a44:	6453      	str	r3, [r2, #68]	@ 0x44
 8004a46:	4b24      	ldr	r3, [pc, #144]	@ (8004ad8 <HAL_SPI_MspInit+0x188>)
 8004a48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a4a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004a4e:	617b      	str	r3, [r7, #20]
 8004a50:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004a52:	2300      	movs	r3, #0
 8004a54:	613b      	str	r3, [r7, #16]
 8004a56:	4b20      	ldr	r3, [pc, #128]	@ (8004ad8 <HAL_SPI_MspInit+0x188>)
 8004a58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a5a:	4a1f      	ldr	r2, [pc, #124]	@ (8004ad8 <HAL_SPI_MspInit+0x188>)
 8004a5c:	f043 0302 	orr.w	r3, r3, #2
 8004a60:	6313      	str	r3, [r2, #48]	@ 0x30
 8004a62:	4b1d      	ldr	r3, [pc, #116]	@ (8004ad8 <HAL_SPI_MspInit+0x188>)
 8004a64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a66:	f003 0302 	and.w	r3, r3, #2
 8004a6a:	613b      	str	r3, [r7, #16]
 8004a6c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004a6e:	2300      	movs	r3, #0
 8004a70:	60fb      	str	r3, [r7, #12]
 8004a72:	4b19      	ldr	r3, [pc, #100]	@ (8004ad8 <HAL_SPI_MspInit+0x188>)
 8004a74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a76:	4a18      	ldr	r2, [pc, #96]	@ (8004ad8 <HAL_SPI_MspInit+0x188>)
 8004a78:	f043 0301 	orr.w	r3, r3, #1
 8004a7c:	6313      	str	r3, [r2, #48]	@ 0x30
 8004a7e:	4b16      	ldr	r3, [pc, #88]	@ (8004ad8 <HAL_SPI_MspInit+0x188>)
 8004a80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a82:	f003 0301 	and.w	r3, r3, #1
 8004a86:	60fb      	str	r3, [r7, #12]
 8004a88:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8004a8a:	2301      	movs	r3, #1
 8004a8c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004a8e:	2302      	movs	r3, #2
 8004a90:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a92:	2300      	movs	r3, #0
 8004a94:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004a96:	2303      	movs	r3, #3
 8004a98:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI5;
 8004a9a:	2306      	movs	r3, #6
 8004a9c:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004a9e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004aa2:	4619      	mov	r1, r3
 8004aa4:	480e      	ldr	r0, [pc, #56]	@ (8004ae0 <HAL_SPI_MspInit+0x190>)
 8004aa6:	f001 feef 	bl	8006888 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12;
 8004aaa:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8004aae:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004ab0:	2302      	movs	r3, #2
 8004ab2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ab4:	2300      	movs	r3, #0
 8004ab6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004ab8:	2303      	movs	r3, #3
 8004aba:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI5;
 8004abc:	2306      	movs	r3, #6
 8004abe:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004ac0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004ac4:	4619      	mov	r1, r3
 8004ac6:	4805      	ldr	r0, [pc, #20]	@ (8004adc <HAL_SPI_MspInit+0x18c>)
 8004ac8:	f001 fede 	bl	8006888 <HAL_GPIO_Init>
}
 8004acc:	bf00      	nop
 8004ace:	3738      	adds	r7, #56	@ 0x38
 8004ad0:	46bd      	mov	sp, r7
 8004ad2:	bd80      	pop	{r7, pc}
 8004ad4:	40013400 	.word	0x40013400
 8004ad8:	40023800 	.word	0x40023800
 8004adc:	40020000 	.word	0x40020000
 8004ae0:	40020400 	.word	0x40020400
 8004ae4:	40015000 	.word	0x40015000

08004ae8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004ae8:	b580      	push	{r7, lr}
 8004aea:	b082      	sub	sp, #8
 8004aec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004aee:	2300      	movs	r3, #0
 8004af0:	607b      	str	r3, [r7, #4]
 8004af2:	4b10      	ldr	r3, [pc, #64]	@ (8004b34 <HAL_MspInit+0x4c>)
 8004af4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004af6:	4a0f      	ldr	r2, [pc, #60]	@ (8004b34 <HAL_MspInit+0x4c>)
 8004af8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004afc:	6453      	str	r3, [r2, #68]	@ 0x44
 8004afe:	4b0d      	ldr	r3, [pc, #52]	@ (8004b34 <HAL_MspInit+0x4c>)
 8004b00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b02:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004b06:	607b      	str	r3, [r7, #4]
 8004b08:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004b0a:	2300      	movs	r3, #0
 8004b0c:	603b      	str	r3, [r7, #0]
 8004b0e:	4b09      	ldr	r3, [pc, #36]	@ (8004b34 <HAL_MspInit+0x4c>)
 8004b10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b12:	4a08      	ldr	r2, [pc, #32]	@ (8004b34 <HAL_MspInit+0x4c>)
 8004b14:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004b18:	6413      	str	r3, [r2, #64]	@ 0x40
 8004b1a:	4b06      	ldr	r3, [pc, #24]	@ (8004b34 <HAL_MspInit+0x4c>)
 8004b1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b1e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004b22:	603b      	str	r3, [r7, #0]
 8004b24:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8004b26:	2007      	movs	r0, #7
 8004b28:	f001 fa4e 	bl	8005fc8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004b2c:	bf00      	nop
 8004b2e:	3708      	adds	r7, #8
 8004b30:	46bd      	mov	sp, r7
 8004b32:	bd80      	pop	{r7, pc}
 8004b34:	40023800 	.word	0x40023800

08004b38 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004b38:	b480      	push	{r7}
 8004b3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8004b3c:	bf00      	nop
 8004b3e:	e7fd      	b.n	8004b3c <NMI_Handler+0x4>

08004b40 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004b40:	b480      	push	{r7}
 8004b42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004b44:	bf00      	nop
 8004b46:	e7fd      	b.n	8004b44 <HardFault_Handler+0x4>

08004b48 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004b48:	b480      	push	{r7}
 8004b4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004b4c:	bf00      	nop
 8004b4e:	e7fd      	b.n	8004b4c <MemManage_Handler+0x4>

08004b50 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004b50:	b480      	push	{r7}
 8004b52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004b54:	bf00      	nop
 8004b56:	e7fd      	b.n	8004b54 <BusFault_Handler+0x4>

08004b58 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004b58:	b480      	push	{r7}
 8004b5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004b5c:	bf00      	nop
 8004b5e:	e7fd      	b.n	8004b5c <UsageFault_Handler+0x4>

08004b60 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004b60:	b480      	push	{r7}
 8004b62:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004b64:	bf00      	nop
 8004b66:	46bd      	mov	sp, r7
 8004b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b6c:	4770      	bx	lr

08004b6e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004b6e:	b480      	push	{r7}
 8004b70:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004b72:	bf00      	nop
 8004b74:	46bd      	mov	sp, r7
 8004b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b7a:	4770      	bx	lr

08004b7c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004b7c:	b480      	push	{r7}
 8004b7e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004b80:	bf00      	nop
 8004b82:	46bd      	mov	sp, r7
 8004b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b88:	4770      	bx	lr

08004b8a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004b8a:	b580      	push	{r7, lr}
 8004b8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004b8e:	f000 fcb1 	bl	80054f4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004b92:	bf00      	nop
 8004b94:	bd80      	pop	{r7, pc}
	...

08004b98 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8004b98:	b580      	push	{r7, lr}
 8004b9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 8004b9c:	4802      	ldr	r0, [pc, #8]	@ (8004ba8 <DMA1_Stream3_IRQHandler+0x10>)
 8004b9e:	f001 fc09 	bl	80063b4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8004ba2:	bf00      	nop
 8004ba4:	bd80      	pop	{r7, pc}
 8004ba6:	bf00      	nop
 8004ba8:	2000d458 	.word	0x2000d458

08004bac <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8004bac:	b580      	push	{r7, lr}
 8004bae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8004bb0:	4803      	ldr	r0, [pc, #12]	@ (8004bc0 <TIM1_UP_TIM10_IRQHandler+0x14>)
 8004bb2:	f004 f923 	bl	8008dfc <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim10);
 8004bb6:	4803      	ldr	r0, [pc, #12]	@ (8004bc4 <TIM1_UP_TIM10_IRQHandler+0x18>)
 8004bb8:	f004 f920 	bl	8008dfc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8004bbc:	bf00      	nop
 8004bbe:	bd80      	pop	{r7, pc}
 8004bc0:	20013ec0 	.word	0x20013ec0
 8004bc4:	20013fe0 	.word	0x20013fe0

08004bc8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8004bc8:	b580      	push	{r7, lr}
 8004bca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8004bcc:	4802      	ldr	r0, [pc, #8]	@ (8004bd8 <TIM2_IRQHandler+0x10>)
 8004bce:	f004 f915 	bl	8008dfc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8004bd2:	bf00      	nop
 8004bd4:	bd80      	pop	{r7, pc}
 8004bd6:	bf00      	nop
 8004bd8:	20013f08 	.word	0x20013f08

08004bdc <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8004bdc:	b580      	push	{r7, lr}
 8004bde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8004be0:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8004be4:	f002 f806 	bl	8006bf4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8004be8:	bf00      	nop
 8004bea:	bd80      	pop	{r7, pc}

08004bec <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8004bec:	b580      	push	{r7, lr}
 8004bee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8004bf0:	4802      	ldr	r0, [pc, #8]	@ (8004bfc <DMA2_Stream0_IRQHandler+0x10>)
 8004bf2:	f001 fbdf 	bl	80063b4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8004bf6:	bf00      	nop
 8004bf8:	bd80      	pop	{r7, pc}
 8004bfa:	bf00      	nop
 8004bfc:	2000d360 	.word	0x2000d360

08004c00 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8004c00:	b580      	push	{r7, lr}
 8004c02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8004c04:	4802      	ldr	r0, [pc, #8]	@ (8004c10 <USART6_IRQHandler+0x10>)
 8004c06:	f005 f841 	bl	8009c8c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8004c0a:	bf00      	nop
 8004c0c:	bd80      	pop	{r7, pc}
 8004c0e:	bf00      	nop
 8004c10:	20014070 	.word	0x20014070

08004c14 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004c14:	b580      	push	{r7, lr}
 8004c16:	b086      	sub	sp, #24
 8004c18:	af00      	add	r7, sp, #0
 8004c1a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004c1c:	4a14      	ldr	r2, [pc, #80]	@ (8004c70 <_sbrk+0x5c>)
 8004c1e:	4b15      	ldr	r3, [pc, #84]	@ (8004c74 <_sbrk+0x60>)
 8004c20:	1ad3      	subs	r3, r2, r3
 8004c22:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004c24:	697b      	ldr	r3, [r7, #20]
 8004c26:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004c28:	4b13      	ldr	r3, [pc, #76]	@ (8004c78 <_sbrk+0x64>)
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d102      	bne.n	8004c36 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004c30:	4b11      	ldr	r3, [pc, #68]	@ (8004c78 <_sbrk+0x64>)
 8004c32:	4a12      	ldr	r2, [pc, #72]	@ (8004c7c <_sbrk+0x68>)
 8004c34:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004c36:	4b10      	ldr	r3, [pc, #64]	@ (8004c78 <_sbrk+0x64>)
 8004c38:	681a      	ldr	r2, [r3, #0]
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	4413      	add	r3, r2
 8004c3e:	693a      	ldr	r2, [r7, #16]
 8004c40:	429a      	cmp	r2, r3
 8004c42:	d207      	bcs.n	8004c54 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004c44:	f007 f96a 	bl	800bf1c <__errno>
 8004c48:	4603      	mov	r3, r0
 8004c4a:	220c      	movs	r2, #12
 8004c4c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004c4e:	f04f 33ff 	mov.w	r3, #4294967295
 8004c52:	e009      	b.n	8004c68 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004c54:	4b08      	ldr	r3, [pc, #32]	@ (8004c78 <_sbrk+0x64>)
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004c5a:	4b07      	ldr	r3, [pc, #28]	@ (8004c78 <_sbrk+0x64>)
 8004c5c:	681a      	ldr	r2, [r3, #0]
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	4413      	add	r3, r2
 8004c62:	4a05      	ldr	r2, [pc, #20]	@ (8004c78 <_sbrk+0x64>)
 8004c64:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004c66:	68fb      	ldr	r3, [r7, #12]
}
 8004c68:	4618      	mov	r0, r3
 8004c6a:	3718      	adds	r7, #24
 8004c6c:	46bd      	mov	sp, r7
 8004c6e:	bd80      	pop	{r7, pc}
 8004c70:	20020000 	.word	0x20020000
 8004c74:	00000800 	.word	0x00000800
 8004c78:	20013ebc 	.word	0x20013ebc
 8004c7c:	20014220 	.word	0x20014220

08004c80 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004c80:	b480      	push	{r7}
 8004c82:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004c84:	4b06      	ldr	r3, [pc, #24]	@ (8004ca0 <SystemInit+0x20>)
 8004c86:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004c8a:	4a05      	ldr	r2, [pc, #20]	@ (8004ca0 <SystemInit+0x20>)
 8004c8c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8004c90:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004c94:	bf00      	nop
 8004c96:	46bd      	mov	sp, r7
 8004c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c9c:	4770      	bx	lr
 8004c9e:	bf00      	nop
 8004ca0:	e000ed00 	.word	0xe000ed00

08004ca4 <MX_TIM1_Init>:
TIM_HandleTypeDef htim4;
TIM_HandleTypeDef htim10;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8004ca4:	b580      	push	{r7, lr}
 8004ca6:	b096      	sub	sp, #88	@ 0x58
 8004ca8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004caa:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8004cae:	2200      	movs	r2, #0
 8004cb0:	601a      	str	r2, [r3, #0]
 8004cb2:	605a      	str	r2, [r3, #4]
 8004cb4:	609a      	str	r2, [r3, #8]
 8004cb6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004cb8:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8004cbc:	2200      	movs	r2, #0
 8004cbe:	601a      	str	r2, [r3, #0]
 8004cc0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004cc2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004cc6:	2200      	movs	r2, #0
 8004cc8:	601a      	str	r2, [r3, #0]
 8004cca:	605a      	str	r2, [r3, #4]
 8004ccc:	609a      	str	r2, [r3, #8]
 8004cce:	60da      	str	r2, [r3, #12]
 8004cd0:	611a      	str	r2, [r3, #16]
 8004cd2:	615a      	str	r2, [r3, #20]
 8004cd4:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8004cd6:	1d3b      	adds	r3, r7, #4
 8004cd8:	2220      	movs	r2, #32
 8004cda:	2100      	movs	r1, #0
 8004cdc:	4618      	mov	r0, r3
 8004cde:	f007 f8cb 	bl	800be78 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8004ce2:	4b3f      	ldr	r3, [pc, #252]	@ (8004de0 <MX_TIM1_Init+0x13c>)
 8004ce4:	4a3f      	ldr	r2, [pc, #252]	@ (8004de4 <MX_TIM1_Init+0x140>)
 8004ce6:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 100-1;
 8004ce8:	4b3d      	ldr	r3, [pc, #244]	@ (8004de0 <MX_TIM1_Init+0x13c>)
 8004cea:	2263      	movs	r2, #99	@ 0x63
 8004cec:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004cee:	4b3c      	ldr	r3, [pc, #240]	@ (8004de0 <MX_TIM1_Init+0x13c>)
 8004cf0:	2200      	movs	r2, #0
 8004cf2:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000-1;
 8004cf4:	4b3a      	ldr	r3, [pc, #232]	@ (8004de0 <MX_TIM1_Init+0x13c>)
 8004cf6:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8004cfa:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004cfc:	4b38      	ldr	r3, [pc, #224]	@ (8004de0 <MX_TIM1_Init+0x13c>)
 8004cfe:	2200      	movs	r2, #0
 8004d00:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8004d02:	4b37      	ldr	r3, [pc, #220]	@ (8004de0 <MX_TIM1_Init+0x13c>)
 8004d04:	2200      	movs	r2, #0
 8004d06:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004d08:	4b35      	ldr	r3, [pc, #212]	@ (8004de0 <MX_TIM1_Init+0x13c>)
 8004d0a:	2200      	movs	r2, #0
 8004d0c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8004d0e:	4834      	ldr	r0, [pc, #208]	@ (8004de0 <MX_TIM1_Init+0x13c>)
 8004d10:	f003 fde4 	bl	80088dc <HAL_TIM_Base_Init>
 8004d14:	4603      	mov	r3, r0
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d001      	beq.n	8004d1e <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8004d1a:	f7fd fe27 	bl	800296c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004d1e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004d22:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8004d24:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8004d28:	4619      	mov	r1, r3
 8004d2a:	482d      	ldr	r0, [pc, #180]	@ (8004de0 <MX_TIM1_Init+0x13c>)
 8004d2c:	f004 fa18 	bl	8009160 <HAL_TIM_ConfigClockSource>
 8004d30:	4603      	mov	r3, r0
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d001      	beq.n	8004d3a <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8004d36:	f7fd fe19 	bl	800296c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8004d3a:	4829      	ldr	r0, [pc, #164]	@ (8004de0 <MX_TIM1_Init+0x13c>)
 8004d3c:	f003 feaf 	bl	8008a9e <HAL_TIM_PWM_Init>
 8004d40:	4603      	mov	r3, r0
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d001      	beq.n	8004d4a <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8004d46:	f7fd fe11 	bl	800296c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004d4a:	2300      	movs	r3, #0
 8004d4c:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004d4e:	2300      	movs	r3, #0
 8004d50:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8004d52:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8004d56:	4619      	mov	r1, r3
 8004d58:	4821      	ldr	r0, [pc, #132]	@ (8004de0 <MX_TIM1_Init+0x13c>)
 8004d5a:	f004 fdc3 	bl	80098e4 <HAL_TIMEx_MasterConfigSynchronization>
 8004d5e:	4603      	mov	r3, r0
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d001      	beq.n	8004d68 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8004d64:	f7fd fe02 	bl	800296c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004d68:	2360      	movs	r3, #96	@ 0x60
 8004d6a:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 500;
 8004d6c:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8004d70:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004d72:	2300      	movs	r3, #0
 8004d74:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8004d76:	2300      	movs	r3, #0
 8004d78:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004d7a:	2300      	movs	r3, #0
 8004d7c:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8004d7e:	2300      	movs	r3, #0
 8004d80:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8004d82:	2300      	movs	r3, #0
 8004d84:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004d86:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004d8a:	2200      	movs	r2, #0
 8004d8c:	4619      	mov	r1, r3
 8004d8e:	4814      	ldr	r0, [pc, #80]	@ (8004de0 <MX_TIM1_Init+0x13c>)
 8004d90:	f004 f924 	bl	8008fdc <HAL_TIM_PWM_ConfigChannel>
 8004d94:	4603      	mov	r3, r0
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d001      	beq.n	8004d9e <MX_TIM1_Init+0xfa>
  {
    Error_Handler();
 8004d9a:	f7fd fde7 	bl	800296c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8004d9e:	2300      	movs	r3, #0
 8004da0:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8004da2:	2300      	movs	r3, #0
 8004da4:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8004da6:	2300      	movs	r3, #0
 8004da8:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8004daa:	2300      	movs	r3, #0
 8004dac:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8004dae:	2300      	movs	r3, #0
 8004db0:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8004db2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8004db6:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8004db8:	2300      	movs	r3, #0
 8004dba:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8004dbc:	1d3b      	adds	r3, r7, #4
 8004dbe:	4619      	mov	r1, r3
 8004dc0:	4807      	ldr	r0, [pc, #28]	@ (8004de0 <MX_TIM1_Init+0x13c>)
 8004dc2:	f004 fdfd 	bl	80099c0 <HAL_TIMEx_ConfigBreakDeadTime>
 8004dc6:	4603      	mov	r3, r0
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d001      	beq.n	8004dd0 <MX_TIM1_Init+0x12c>
  {
    Error_Handler();
 8004dcc:	f7fd fdce 	bl	800296c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8004dd0:	4803      	ldr	r0, [pc, #12]	@ (8004de0 <MX_TIM1_Init+0x13c>)
 8004dd2:	f000 f9ff 	bl	80051d4 <HAL_TIM_MspPostInit>

}
 8004dd6:	bf00      	nop
 8004dd8:	3758      	adds	r7, #88	@ 0x58
 8004dda:	46bd      	mov	sp, r7
 8004ddc:	bd80      	pop	{r7, pc}
 8004dde:	bf00      	nop
 8004de0:	20013ec0 	.word	0x20013ec0
 8004de4:	40010000 	.word	0x40010000

08004de8 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8004de8:	b580      	push	{r7, lr}
 8004dea:	b086      	sub	sp, #24
 8004dec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004dee:	f107 0308 	add.w	r3, r7, #8
 8004df2:	2200      	movs	r2, #0
 8004df4:	601a      	str	r2, [r3, #0]
 8004df6:	605a      	str	r2, [r3, #4]
 8004df8:	609a      	str	r2, [r3, #8]
 8004dfa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004dfc:	463b      	mov	r3, r7
 8004dfe:	2200      	movs	r2, #0
 8004e00:	601a      	str	r2, [r3, #0]
 8004e02:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8004e04:	4b1d      	ldr	r3, [pc, #116]	@ (8004e7c <MX_TIM2_Init+0x94>)
 8004e06:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8004e0a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 100-1;
 8004e0c:	4b1b      	ldr	r3, [pc, #108]	@ (8004e7c <MX_TIM2_Init+0x94>)
 8004e0e:	2263      	movs	r2, #99	@ 0x63
 8004e10:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004e12:	4b1a      	ldr	r3, [pc, #104]	@ (8004e7c <MX_TIM2_Init+0x94>)
 8004e14:	2200      	movs	r2, #0
 8004e16:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 32-1;
 8004e18:	4b18      	ldr	r3, [pc, #96]	@ (8004e7c <MX_TIM2_Init+0x94>)
 8004e1a:	221f      	movs	r2, #31
 8004e1c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004e1e:	4b17      	ldr	r3, [pc, #92]	@ (8004e7c <MX_TIM2_Init+0x94>)
 8004e20:	2200      	movs	r2, #0
 8004e22:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004e24:	4b15      	ldr	r3, [pc, #84]	@ (8004e7c <MX_TIM2_Init+0x94>)
 8004e26:	2200      	movs	r2, #0
 8004e28:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8004e2a:	4814      	ldr	r0, [pc, #80]	@ (8004e7c <MX_TIM2_Init+0x94>)
 8004e2c:	f003 fd56 	bl	80088dc <HAL_TIM_Base_Init>
 8004e30:	4603      	mov	r3, r0
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d001      	beq.n	8004e3a <MX_TIM2_Init+0x52>
  {
    Error_Handler();
 8004e36:	f7fd fd99 	bl	800296c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004e3a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004e3e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8004e40:	f107 0308 	add.w	r3, r7, #8
 8004e44:	4619      	mov	r1, r3
 8004e46:	480d      	ldr	r0, [pc, #52]	@ (8004e7c <MX_TIM2_Init+0x94>)
 8004e48:	f004 f98a 	bl	8009160 <HAL_TIM_ConfigClockSource>
 8004e4c:	4603      	mov	r3, r0
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d001      	beq.n	8004e56 <MX_TIM2_Init+0x6e>
  {
    Error_Handler();
 8004e52:	f7fd fd8b 	bl	800296c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004e56:	2300      	movs	r3, #0
 8004e58:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004e5a:	2300      	movs	r3, #0
 8004e5c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8004e5e:	463b      	mov	r3, r7
 8004e60:	4619      	mov	r1, r3
 8004e62:	4806      	ldr	r0, [pc, #24]	@ (8004e7c <MX_TIM2_Init+0x94>)
 8004e64:	f004 fd3e 	bl	80098e4 <HAL_TIMEx_MasterConfigSynchronization>
 8004e68:	4603      	mov	r3, r0
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d001      	beq.n	8004e72 <MX_TIM2_Init+0x8a>
  {
    Error_Handler();
 8004e6e:	f7fd fd7d 	bl	800296c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8004e72:	bf00      	nop
 8004e74:	3718      	adds	r7, #24
 8004e76:	46bd      	mov	sp, r7
 8004e78:	bd80      	pop	{r7, pc}
 8004e7a:	bf00      	nop
 8004e7c:	20013f08 	.word	0x20013f08

08004e80 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8004e80:	b580      	push	{r7, lr}
 8004e82:	b08c      	sub	sp, #48	@ 0x30
 8004e84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8004e86:	f107 030c 	add.w	r3, r7, #12
 8004e8a:	2224      	movs	r2, #36	@ 0x24
 8004e8c:	2100      	movs	r1, #0
 8004e8e:	4618      	mov	r0, r3
 8004e90:	f006 fff2 	bl	800be78 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004e94:	1d3b      	adds	r3, r7, #4
 8004e96:	2200      	movs	r2, #0
 8004e98:	601a      	str	r2, [r3, #0]
 8004e9a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8004e9c:	4b20      	ldr	r3, [pc, #128]	@ (8004f20 <MX_TIM3_Init+0xa0>)
 8004e9e:	4a21      	ldr	r2, [pc, #132]	@ (8004f24 <MX_TIM3_Init+0xa4>)
 8004ea0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8004ea2:	4b1f      	ldr	r3, [pc, #124]	@ (8004f20 <MX_TIM3_Init+0xa0>)
 8004ea4:	2200      	movs	r2, #0
 8004ea6:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004ea8:	4b1d      	ldr	r3, [pc, #116]	@ (8004f20 <MX_TIM3_Init+0xa0>)
 8004eaa:	2200      	movs	r2, #0
 8004eac:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8004eae:	4b1c      	ldr	r3, [pc, #112]	@ (8004f20 <MX_TIM3_Init+0xa0>)
 8004eb0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004eb4:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004eb6:	4b1a      	ldr	r3, [pc, #104]	@ (8004f20 <MX_TIM3_Init+0xa0>)
 8004eb8:	2200      	movs	r2, #0
 8004eba:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004ebc:	4b18      	ldr	r3, [pc, #96]	@ (8004f20 <MX_TIM3_Init+0xa0>)
 8004ebe:	2200      	movs	r2, #0
 8004ec0:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8004ec2:	2301      	movs	r3, #1
 8004ec4:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8004ec6:	2300      	movs	r3, #0
 8004ec8:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8004eca:	2301      	movs	r3, #1
 8004ecc:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8004ece:	2300      	movs	r3, #0
 8004ed0:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8004ed2:	2300      	movs	r3, #0
 8004ed4:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8004ed6:	2300      	movs	r3, #0
 8004ed8:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8004eda:	2301      	movs	r3, #1
 8004edc:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8004ede:	2300      	movs	r3, #0
 8004ee0:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8004ee2:	2300      	movs	r3, #0
 8004ee4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8004ee6:	f107 030c 	add.w	r3, r7, #12
 8004eea:	4619      	mov	r1, r3
 8004eec:	480c      	ldr	r0, [pc, #48]	@ (8004f20 <MX_TIM3_Init+0xa0>)
 8004eee:	f003 fedf 	bl	8008cb0 <HAL_TIM_Encoder_Init>
 8004ef2:	4603      	mov	r3, r0
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d001      	beq.n	8004efc <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8004ef8:	f7fd fd38 	bl	800296c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004efc:	2300      	movs	r3, #0
 8004efe:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004f00:	2300      	movs	r3, #0
 8004f02:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8004f04:	1d3b      	adds	r3, r7, #4
 8004f06:	4619      	mov	r1, r3
 8004f08:	4805      	ldr	r0, [pc, #20]	@ (8004f20 <MX_TIM3_Init+0xa0>)
 8004f0a:	f004 fceb 	bl	80098e4 <HAL_TIMEx_MasterConfigSynchronization>
 8004f0e:	4603      	mov	r3, r0
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d001      	beq.n	8004f18 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8004f14:	f7fd fd2a 	bl	800296c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8004f18:	bf00      	nop
 8004f1a:	3730      	adds	r7, #48	@ 0x30
 8004f1c:	46bd      	mov	sp, r7
 8004f1e:	bd80      	pop	{r7, pc}
 8004f20:	20013f50 	.word	0x20013f50
 8004f24:	40000400 	.word	0x40000400

08004f28 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8004f28:	b580      	push	{r7, lr}
 8004f2a:	b08c      	sub	sp, #48	@ 0x30
 8004f2c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8004f2e:	f107 030c 	add.w	r3, r7, #12
 8004f32:	2224      	movs	r2, #36	@ 0x24
 8004f34:	2100      	movs	r1, #0
 8004f36:	4618      	mov	r0, r3
 8004f38:	f006 ff9e 	bl	800be78 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004f3c:	1d3b      	adds	r3, r7, #4
 8004f3e:	2200      	movs	r2, #0
 8004f40:	601a      	str	r2, [r3, #0]
 8004f42:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8004f44:	4b20      	ldr	r3, [pc, #128]	@ (8004fc8 <MX_TIM4_Init+0xa0>)
 8004f46:	4a21      	ldr	r2, [pc, #132]	@ (8004fcc <MX_TIM4_Init+0xa4>)
 8004f48:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8004f4a:	4b1f      	ldr	r3, [pc, #124]	@ (8004fc8 <MX_TIM4_Init+0xa0>)
 8004f4c:	2200      	movs	r2, #0
 8004f4e:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004f50:	4b1d      	ldr	r3, [pc, #116]	@ (8004fc8 <MX_TIM4_Init+0xa0>)
 8004f52:	2200      	movs	r2, #0
 8004f54:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8004f56:	4b1c      	ldr	r3, [pc, #112]	@ (8004fc8 <MX_TIM4_Init+0xa0>)
 8004f58:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004f5c:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004f5e:	4b1a      	ldr	r3, [pc, #104]	@ (8004fc8 <MX_TIM4_Init+0xa0>)
 8004f60:	2200      	movs	r2, #0
 8004f62:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004f64:	4b18      	ldr	r3, [pc, #96]	@ (8004fc8 <MX_TIM4_Init+0xa0>)
 8004f66:	2200      	movs	r2, #0
 8004f68:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8004f6a:	2301      	movs	r3, #1
 8004f6c:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8004f6e:	2300      	movs	r3, #0
 8004f70:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8004f72:	2301      	movs	r3, #1
 8004f74:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8004f76:	2300      	movs	r3, #0
 8004f78:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8004f7a:	2300      	movs	r3, #0
 8004f7c:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8004f7e:	2300      	movs	r3, #0
 8004f80:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8004f82:	2301      	movs	r3, #1
 8004f84:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8004f86:	2300      	movs	r3, #0
 8004f88:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8004f8a:	2300      	movs	r3, #0
 8004f8c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8004f8e:	f107 030c 	add.w	r3, r7, #12
 8004f92:	4619      	mov	r1, r3
 8004f94:	480c      	ldr	r0, [pc, #48]	@ (8004fc8 <MX_TIM4_Init+0xa0>)
 8004f96:	f003 fe8b 	bl	8008cb0 <HAL_TIM_Encoder_Init>
 8004f9a:	4603      	mov	r3, r0
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d001      	beq.n	8004fa4 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 8004fa0:	f7fd fce4 	bl	800296c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004fa4:	2300      	movs	r3, #0
 8004fa6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004fa8:	2300      	movs	r3, #0
 8004faa:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8004fac:	1d3b      	adds	r3, r7, #4
 8004fae:	4619      	mov	r1, r3
 8004fb0:	4805      	ldr	r0, [pc, #20]	@ (8004fc8 <MX_TIM4_Init+0xa0>)
 8004fb2:	f004 fc97 	bl	80098e4 <HAL_TIMEx_MasterConfigSynchronization>
 8004fb6:	4603      	mov	r3, r0
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d001      	beq.n	8004fc0 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 8004fbc:	f7fd fcd6 	bl	800296c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8004fc0:	bf00      	nop
 8004fc2:	3730      	adds	r7, #48	@ 0x30
 8004fc4:	46bd      	mov	sp, r7
 8004fc6:	bd80      	pop	{r7, pc}
 8004fc8:	20013f98 	.word	0x20013f98
 8004fcc:	40000800 	.word	0x40000800

08004fd0 <MX_TIM10_Init>:
/* TIM10 init function */
void MX_TIM10_Init(void)
{
 8004fd0:	b580      	push	{r7, lr}
 8004fd2:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8004fd4:	4b0e      	ldr	r3, [pc, #56]	@ (8005010 <MX_TIM10_Init+0x40>)
 8004fd6:	4a0f      	ldr	r2, [pc, #60]	@ (8005014 <MX_TIM10_Init+0x44>)
 8004fd8:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 0;
 8004fda:	4b0d      	ldr	r3, [pc, #52]	@ (8005010 <MX_TIM10_Init+0x40>)
 8004fdc:	2200      	movs	r2, #0
 8004fde:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004fe0:	4b0b      	ldr	r3, [pc, #44]	@ (8005010 <MX_TIM10_Init+0x40>)
 8004fe2:	2200      	movs	r2, #0
 8004fe4:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 288-1;
 8004fe6:	4b0a      	ldr	r3, [pc, #40]	@ (8005010 <MX_TIM10_Init+0x40>)
 8004fe8:	f240 121f 	movw	r2, #287	@ 0x11f
 8004fec:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004fee:	4b08      	ldr	r3, [pc, #32]	@ (8005010 <MX_TIM10_Init+0x40>)
 8004ff0:	2200      	movs	r2, #0
 8004ff2:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004ff4:	4b06      	ldr	r3, [pc, #24]	@ (8005010 <MX_TIM10_Init+0x40>)
 8004ff6:	2200      	movs	r2, #0
 8004ff8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8004ffa:	4805      	ldr	r0, [pc, #20]	@ (8005010 <MX_TIM10_Init+0x40>)
 8004ffc:	f003 fc6e 	bl	80088dc <HAL_TIM_Base_Init>
 8005000:	4603      	mov	r3, r0
 8005002:	2b00      	cmp	r3, #0
 8005004:	d001      	beq.n	800500a <MX_TIM10_Init+0x3a>
  {
    Error_Handler();
 8005006:	f7fd fcb1 	bl	800296c <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 800500a:	bf00      	nop
 800500c:	bd80      	pop	{r7, pc}
 800500e:	bf00      	nop
 8005010:	20013fe0 	.word	0x20013fe0
 8005014:	40014400 	.word	0x40014400

08005018 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8005018:	b580      	push	{r7, lr}
 800501a:	b086      	sub	sp, #24
 800501c:	af00      	add	r7, sp, #0
 800501e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	4a2a      	ldr	r2, [pc, #168]	@ (80050d0 <HAL_TIM_Base_MspInit+0xb8>)
 8005026:	4293      	cmp	r3, r2
 8005028:	d116      	bne.n	8005058 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800502a:	2300      	movs	r3, #0
 800502c:	617b      	str	r3, [r7, #20]
 800502e:	4b29      	ldr	r3, [pc, #164]	@ (80050d4 <HAL_TIM_Base_MspInit+0xbc>)
 8005030:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005032:	4a28      	ldr	r2, [pc, #160]	@ (80050d4 <HAL_TIM_Base_MspInit+0xbc>)
 8005034:	f043 0301 	orr.w	r3, r3, #1
 8005038:	6453      	str	r3, [r2, #68]	@ 0x44
 800503a:	4b26      	ldr	r3, [pc, #152]	@ (80050d4 <HAL_TIM_Base_MspInit+0xbc>)
 800503c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800503e:	f003 0301 	and.w	r3, r3, #1
 8005042:	617b      	str	r3, [r7, #20]
 8005044:	697b      	ldr	r3, [r7, #20]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8005046:	2200      	movs	r2, #0
 8005048:	2100      	movs	r1, #0
 800504a:	2019      	movs	r0, #25
 800504c:	f000 ffc7 	bl	8005fde <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8005050:	2019      	movs	r0, #25
 8005052:	f000 ffe0 	bl	8006016 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }
}
 8005056:	e036      	b.n	80050c6 <HAL_TIM_Base_MspInit+0xae>
  else if(tim_baseHandle->Instance==TIM2)
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005060:	d116      	bne.n	8005090 <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8005062:	2300      	movs	r3, #0
 8005064:	613b      	str	r3, [r7, #16]
 8005066:	4b1b      	ldr	r3, [pc, #108]	@ (80050d4 <HAL_TIM_Base_MspInit+0xbc>)
 8005068:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800506a:	4a1a      	ldr	r2, [pc, #104]	@ (80050d4 <HAL_TIM_Base_MspInit+0xbc>)
 800506c:	f043 0301 	orr.w	r3, r3, #1
 8005070:	6413      	str	r3, [r2, #64]	@ 0x40
 8005072:	4b18      	ldr	r3, [pc, #96]	@ (80050d4 <HAL_TIM_Base_MspInit+0xbc>)
 8005074:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005076:	f003 0301 	and.w	r3, r3, #1
 800507a:	613b      	str	r3, [r7, #16]
 800507c:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800507e:	2200      	movs	r2, #0
 8005080:	2100      	movs	r1, #0
 8005082:	201c      	movs	r0, #28
 8005084:	f000 ffab 	bl	8005fde <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8005088:	201c      	movs	r0, #28
 800508a:	f000 ffc4 	bl	8006016 <HAL_NVIC_EnableIRQ>
}
 800508e:	e01a      	b.n	80050c6 <HAL_TIM_Base_MspInit+0xae>
  else if(tim_baseHandle->Instance==TIM10)
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	4a10      	ldr	r2, [pc, #64]	@ (80050d8 <HAL_TIM_Base_MspInit+0xc0>)
 8005096:	4293      	cmp	r3, r2
 8005098:	d115      	bne.n	80050c6 <HAL_TIM_Base_MspInit+0xae>
    __HAL_RCC_TIM10_CLK_ENABLE();
 800509a:	2300      	movs	r3, #0
 800509c:	60fb      	str	r3, [r7, #12]
 800509e:	4b0d      	ldr	r3, [pc, #52]	@ (80050d4 <HAL_TIM_Base_MspInit+0xbc>)
 80050a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80050a2:	4a0c      	ldr	r2, [pc, #48]	@ (80050d4 <HAL_TIM_Base_MspInit+0xbc>)
 80050a4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80050a8:	6453      	str	r3, [r2, #68]	@ 0x44
 80050aa:	4b0a      	ldr	r3, [pc, #40]	@ (80050d4 <HAL_TIM_Base_MspInit+0xbc>)
 80050ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80050ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80050b2:	60fb      	str	r3, [r7, #12]
 80050b4:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 80050b6:	2200      	movs	r2, #0
 80050b8:	2100      	movs	r1, #0
 80050ba:	2019      	movs	r0, #25
 80050bc:	f000 ff8f 	bl	8005fde <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80050c0:	2019      	movs	r0, #25
 80050c2:	f000 ffa8 	bl	8006016 <HAL_NVIC_EnableIRQ>
}
 80050c6:	bf00      	nop
 80050c8:	3718      	adds	r7, #24
 80050ca:	46bd      	mov	sp, r7
 80050cc:	bd80      	pop	{r7, pc}
 80050ce:	bf00      	nop
 80050d0:	40010000 	.word	0x40010000
 80050d4:	40023800 	.word	0x40023800
 80050d8:	40014400 	.word	0x40014400

080050dc <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 80050dc:	b580      	push	{r7, lr}
 80050de:	b08c      	sub	sp, #48	@ 0x30
 80050e0:	af00      	add	r7, sp, #0
 80050e2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80050e4:	f107 031c 	add.w	r3, r7, #28
 80050e8:	2200      	movs	r2, #0
 80050ea:	601a      	str	r2, [r3, #0]
 80050ec:	605a      	str	r2, [r3, #4]
 80050ee:	609a      	str	r2, [r3, #8]
 80050f0:	60da      	str	r2, [r3, #12]
 80050f2:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM3)
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	4a32      	ldr	r2, [pc, #200]	@ (80051c4 <HAL_TIM_Encoder_MspInit+0xe8>)
 80050fa:	4293      	cmp	r3, r2
 80050fc:	d12c      	bne.n	8005158 <HAL_TIM_Encoder_MspInit+0x7c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80050fe:	2300      	movs	r3, #0
 8005100:	61bb      	str	r3, [r7, #24]
 8005102:	4b31      	ldr	r3, [pc, #196]	@ (80051c8 <HAL_TIM_Encoder_MspInit+0xec>)
 8005104:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005106:	4a30      	ldr	r2, [pc, #192]	@ (80051c8 <HAL_TIM_Encoder_MspInit+0xec>)
 8005108:	f043 0302 	orr.w	r3, r3, #2
 800510c:	6413      	str	r3, [r2, #64]	@ 0x40
 800510e:	4b2e      	ldr	r3, [pc, #184]	@ (80051c8 <HAL_TIM_Encoder_MspInit+0xec>)
 8005110:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005112:	f003 0302 	and.w	r3, r3, #2
 8005116:	61bb      	str	r3, [r7, #24]
 8005118:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800511a:	2300      	movs	r3, #0
 800511c:	617b      	str	r3, [r7, #20]
 800511e:	4b2a      	ldr	r3, [pc, #168]	@ (80051c8 <HAL_TIM_Encoder_MspInit+0xec>)
 8005120:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005122:	4a29      	ldr	r2, [pc, #164]	@ (80051c8 <HAL_TIM_Encoder_MspInit+0xec>)
 8005124:	f043 0302 	orr.w	r3, r3, #2
 8005128:	6313      	str	r3, [r2, #48]	@ 0x30
 800512a:	4b27      	ldr	r3, [pc, #156]	@ (80051c8 <HAL_TIM_Encoder_MspInit+0xec>)
 800512c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800512e:	f003 0302 	and.w	r3, r3, #2
 8005132:	617b      	str	r3, [r7, #20]
 8005134:	697b      	ldr	r3, [r7, #20]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = ENCODER1_INB_Pin|ENCODER1_INA_Pin;
 8005136:	2330      	movs	r3, #48	@ 0x30
 8005138:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800513a:	2302      	movs	r3, #2
 800513c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800513e:	2300      	movs	r3, #0
 8005140:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005142:	2300      	movs	r3, #0
 8005144:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8005146:	2302      	movs	r3, #2
 8005148:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800514a:	f107 031c 	add.w	r3, r7, #28
 800514e:	4619      	mov	r1, r3
 8005150:	481e      	ldr	r0, [pc, #120]	@ (80051cc <HAL_TIM_Encoder_MspInit+0xf0>)
 8005152:	f001 fb99 	bl	8006888 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8005156:	e030      	b.n	80051ba <HAL_TIM_Encoder_MspInit+0xde>
  else if(tim_encoderHandle->Instance==TIM4)
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	4a1c      	ldr	r2, [pc, #112]	@ (80051d0 <HAL_TIM_Encoder_MspInit+0xf4>)
 800515e:	4293      	cmp	r3, r2
 8005160:	d12b      	bne.n	80051ba <HAL_TIM_Encoder_MspInit+0xde>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8005162:	2300      	movs	r3, #0
 8005164:	613b      	str	r3, [r7, #16]
 8005166:	4b18      	ldr	r3, [pc, #96]	@ (80051c8 <HAL_TIM_Encoder_MspInit+0xec>)
 8005168:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800516a:	4a17      	ldr	r2, [pc, #92]	@ (80051c8 <HAL_TIM_Encoder_MspInit+0xec>)
 800516c:	f043 0304 	orr.w	r3, r3, #4
 8005170:	6413      	str	r3, [r2, #64]	@ 0x40
 8005172:	4b15      	ldr	r3, [pc, #84]	@ (80051c8 <HAL_TIM_Encoder_MspInit+0xec>)
 8005174:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005176:	f003 0304 	and.w	r3, r3, #4
 800517a:	613b      	str	r3, [r7, #16]
 800517c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800517e:	2300      	movs	r3, #0
 8005180:	60fb      	str	r3, [r7, #12]
 8005182:	4b11      	ldr	r3, [pc, #68]	@ (80051c8 <HAL_TIM_Encoder_MspInit+0xec>)
 8005184:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005186:	4a10      	ldr	r2, [pc, #64]	@ (80051c8 <HAL_TIM_Encoder_MspInit+0xec>)
 8005188:	f043 0302 	orr.w	r3, r3, #2
 800518c:	6313      	str	r3, [r2, #48]	@ 0x30
 800518e:	4b0e      	ldr	r3, [pc, #56]	@ (80051c8 <HAL_TIM_Encoder_MspInit+0xec>)
 8005190:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005192:	f003 0302 	and.w	r3, r3, #2
 8005196:	60fb      	str	r3, [r7, #12]
 8005198:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ENCODER0_INB_Pin|ENCODER0_INA_Pin;
 800519a:	23c0      	movs	r3, #192	@ 0xc0
 800519c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800519e:	2302      	movs	r3, #2
 80051a0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80051a2:	2300      	movs	r3, #0
 80051a4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80051a6:	2300      	movs	r3, #0
 80051a8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80051aa:	2302      	movs	r3, #2
 80051ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80051ae:	f107 031c 	add.w	r3, r7, #28
 80051b2:	4619      	mov	r1, r3
 80051b4:	4805      	ldr	r0, [pc, #20]	@ (80051cc <HAL_TIM_Encoder_MspInit+0xf0>)
 80051b6:	f001 fb67 	bl	8006888 <HAL_GPIO_Init>
}
 80051ba:	bf00      	nop
 80051bc:	3730      	adds	r7, #48	@ 0x30
 80051be:	46bd      	mov	sp, r7
 80051c0:	bd80      	pop	{r7, pc}
 80051c2:	bf00      	nop
 80051c4:	40000400 	.word	0x40000400
 80051c8:	40023800 	.word	0x40023800
 80051cc:	40020400 	.word	0x40020400
 80051d0:	40000800 	.word	0x40000800

080051d4 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80051d4:	b580      	push	{r7, lr}
 80051d6:	b088      	sub	sp, #32
 80051d8:	af00      	add	r7, sp, #0
 80051da:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80051dc:	f107 030c 	add.w	r3, r7, #12
 80051e0:	2200      	movs	r2, #0
 80051e2:	601a      	str	r2, [r3, #0]
 80051e4:	605a      	str	r2, [r3, #4]
 80051e6:	609a      	str	r2, [r3, #8]
 80051e8:	60da      	str	r2, [r3, #12]
 80051ea:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	4a12      	ldr	r2, [pc, #72]	@ (800523c <HAL_TIM_MspPostInit+0x68>)
 80051f2:	4293      	cmp	r3, r2
 80051f4:	d11e      	bne.n	8005234 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80051f6:	2300      	movs	r3, #0
 80051f8:	60bb      	str	r3, [r7, #8]
 80051fa:	4b11      	ldr	r3, [pc, #68]	@ (8005240 <HAL_TIM_MspPostInit+0x6c>)
 80051fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80051fe:	4a10      	ldr	r2, [pc, #64]	@ (8005240 <HAL_TIM_MspPostInit+0x6c>)
 8005200:	f043 0301 	orr.w	r3, r3, #1
 8005204:	6313      	str	r3, [r2, #48]	@ 0x30
 8005206:	4b0e      	ldr	r3, [pc, #56]	@ (8005240 <HAL_TIM_MspPostInit+0x6c>)
 8005208:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800520a:	f003 0301 	and.w	r3, r3, #1
 800520e:	60bb      	str	r3, [r7, #8]
 8005210:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8005212:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8005216:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005218:	2302      	movs	r3, #2
 800521a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800521c:	2300      	movs	r3, #0
 800521e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005220:	2300      	movs	r3, #0
 8005222:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8005224:	2301      	movs	r3, #1
 8005226:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005228:	f107 030c 	add.w	r3, r7, #12
 800522c:	4619      	mov	r1, r3
 800522e:	4805      	ldr	r0, [pc, #20]	@ (8005244 <HAL_TIM_MspPostInit+0x70>)
 8005230:	f001 fb2a 	bl	8006888 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8005234:	bf00      	nop
 8005236:	3720      	adds	r7, #32
 8005238:	46bd      	mov	sp, r7
 800523a:	bd80      	pop	{r7, pc}
 800523c:	40010000 	.word	0x40010000
 8005240:	40023800 	.word	0x40023800
 8005244:	40020000 	.word	0x40020000

08005248 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart6;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8005248:	b580      	push	{r7, lr}
 800524a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800524c:	4b11      	ldr	r3, [pc, #68]	@ (8005294 <MX_USART2_UART_Init+0x4c>)
 800524e:	4a12      	ldr	r2, [pc, #72]	@ (8005298 <MX_USART2_UART_Init+0x50>)
 8005250:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8005252:	4b10      	ldr	r3, [pc, #64]	@ (8005294 <MX_USART2_UART_Init+0x4c>)
 8005254:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8005258:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800525a:	4b0e      	ldr	r3, [pc, #56]	@ (8005294 <MX_USART2_UART_Init+0x4c>)
 800525c:	2200      	movs	r2, #0
 800525e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8005260:	4b0c      	ldr	r3, [pc, #48]	@ (8005294 <MX_USART2_UART_Init+0x4c>)
 8005262:	2200      	movs	r2, #0
 8005264:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8005266:	4b0b      	ldr	r3, [pc, #44]	@ (8005294 <MX_USART2_UART_Init+0x4c>)
 8005268:	2200      	movs	r2, #0
 800526a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800526c:	4b09      	ldr	r3, [pc, #36]	@ (8005294 <MX_USART2_UART_Init+0x4c>)
 800526e:	220c      	movs	r2, #12
 8005270:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005272:	4b08      	ldr	r3, [pc, #32]	@ (8005294 <MX_USART2_UART_Init+0x4c>)
 8005274:	2200      	movs	r2, #0
 8005276:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8005278:	4b06      	ldr	r3, [pc, #24]	@ (8005294 <MX_USART2_UART_Init+0x4c>)
 800527a:	2200      	movs	r2, #0
 800527c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800527e:	4805      	ldr	r0, [pc, #20]	@ (8005294 <MX_USART2_UART_Init+0x4c>)
 8005280:	f004 fc04 	bl	8009a8c <HAL_UART_Init>
 8005284:	4603      	mov	r3, r0
 8005286:	2b00      	cmp	r3, #0
 8005288:	d001      	beq.n	800528e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800528a:	f7fd fb6f 	bl	800296c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800528e:	bf00      	nop
 8005290:	bd80      	pop	{r7, pc}
 8005292:	bf00      	nop
 8005294:	20014028 	.word	0x20014028
 8005298:	40004400 	.word	0x40004400

0800529c <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 800529c:	b580      	push	{r7, lr}
 800529e:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 80052a0:	4b11      	ldr	r3, [pc, #68]	@ (80052e8 <MX_USART6_UART_Init+0x4c>)
 80052a2:	4a12      	ldr	r2, [pc, #72]	@ (80052ec <MX_USART6_UART_Init+0x50>)
 80052a4:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 80052a6:	4b10      	ldr	r3, [pc, #64]	@ (80052e8 <MX_USART6_UART_Init+0x4c>)
 80052a8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80052ac:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80052ae:	4b0e      	ldr	r3, [pc, #56]	@ (80052e8 <MX_USART6_UART_Init+0x4c>)
 80052b0:	2200      	movs	r2, #0
 80052b2:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 80052b4:	4b0c      	ldr	r3, [pc, #48]	@ (80052e8 <MX_USART6_UART_Init+0x4c>)
 80052b6:	2200      	movs	r2, #0
 80052b8:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 80052ba:	4b0b      	ldr	r3, [pc, #44]	@ (80052e8 <MX_USART6_UART_Init+0x4c>)
 80052bc:	2200      	movs	r2, #0
 80052be:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 80052c0:	4b09      	ldr	r3, [pc, #36]	@ (80052e8 <MX_USART6_UART_Init+0x4c>)
 80052c2:	220c      	movs	r2, #12
 80052c4:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80052c6:	4b08      	ldr	r3, [pc, #32]	@ (80052e8 <MX_USART6_UART_Init+0x4c>)
 80052c8:	2200      	movs	r2, #0
 80052ca:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80052cc:	4b06      	ldr	r3, [pc, #24]	@ (80052e8 <MX_USART6_UART_Init+0x4c>)
 80052ce:	2200      	movs	r2, #0
 80052d0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80052d2:	4805      	ldr	r0, [pc, #20]	@ (80052e8 <MX_USART6_UART_Init+0x4c>)
 80052d4:	f004 fbda 	bl	8009a8c <HAL_UART_Init>
 80052d8:	4603      	mov	r3, r0
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d001      	beq.n	80052e2 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 80052de:	f7fd fb45 	bl	800296c <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 80052e2:	bf00      	nop
 80052e4:	bd80      	pop	{r7, pc}
 80052e6:	bf00      	nop
 80052e8:	20014070 	.word	0x20014070
 80052ec:	40011400 	.word	0x40011400

080052f0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80052f0:	b580      	push	{r7, lr}
 80052f2:	b08c      	sub	sp, #48	@ 0x30
 80052f4:	af00      	add	r7, sp, #0
 80052f6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80052f8:	f107 031c 	add.w	r3, r7, #28
 80052fc:	2200      	movs	r2, #0
 80052fe:	601a      	str	r2, [r3, #0]
 8005300:	605a      	str	r2, [r3, #4]
 8005302:	609a      	str	r2, [r3, #8]
 8005304:	60da      	str	r2, [r3, #12]
 8005306:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	4a36      	ldr	r2, [pc, #216]	@ (80053e8 <HAL_UART_MspInit+0xf8>)
 800530e:	4293      	cmp	r3, r2
 8005310:	d12c      	bne.n	800536c <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8005312:	2300      	movs	r3, #0
 8005314:	61bb      	str	r3, [r7, #24]
 8005316:	4b35      	ldr	r3, [pc, #212]	@ (80053ec <HAL_UART_MspInit+0xfc>)
 8005318:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800531a:	4a34      	ldr	r2, [pc, #208]	@ (80053ec <HAL_UART_MspInit+0xfc>)
 800531c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005320:	6413      	str	r3, [r2, #64]	@ 0x40
 8005322:	4b32      	ldr	r3, [pc, #200]	@ (80053ec <HAL_UART_MspInit+0xfc>)
 8005324:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005326:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800532a:	61bb      	str	r3, [r7, #24]
 800532c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800532e:	2300      	movs	r3, #0
 8005330:	617b      	str	r3, [r7, #20]
 8005332:	4b2e      	ldr	r3, [pc, #184]	@ (80053ec <HAL_UART_MspInit+0xfc>)
 8005334:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005336:	4a2d      	ldr	r2, [pc, #180]	@ (80053ec <HAL_UART_MspInit+0xfc>)
 8005338:	f043 0301 	orr.w	r3, r3, #1
 800533c:	6313      	str	r3, [r2, #48]	@ 0x30
 800533e:	4b2b      	ldr	r3, [pc, #172]	@ (80053ec <HAL_UART_MspInit+0xfc>)
 8005340:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005342:	f003 0301 	and.w	r3, r3, #1
 8005346:	617b      	str	r3, [r7, #20]
 8005348:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800534a:	230c      	movs	r3, #12
 800534c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800534e:	2302      	movs	r3, #2
 8005350:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005352:	2300      	movs	r3, #0
 8005354:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005356:	2303      	movs	r3, #3
 8005358:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800535a:	2307      	movs	r3, #7
 800535c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800535e:	f107 031c 	add.w	r3, r7, #28
 8005362:	4619      	mov	r1, r3
 8005364:	4822      	ldr	r0, [pc, #136]	@ (80053f0 <HAL_UART_MspInit+0x100>)
 8005366:	f001 fa8f 	bl	8006888 <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 800536a:	e038      	b.n	80053de <HAL_UART_MspInit+0xee>
  else if(uartHandle->Instance==USART6)
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	4a20      	ldr	r2, [pc, #128]	@ (80053f4 <HAL_UART_MspInit+0x104>)
 8005372:	4293      	cmp	r3, r2
 8005374:	d133      	bne.n	80053de <HAL_UART_MspInit+0xee>
    __HAL_RCC_USART6_CLK_ENABLE();
 8005376:	2300      	movs	r3, #0
 8005378:	613b      	str	r3, [r7, #16]
 800537a:	4b1c      	ldr	r3, [pc, #112]	@ (80053ec <HAL_UART_MspInit+0xfc>)
 800537c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800537e:	4a1b      	ldr	r2, [pc, #108]	@ (80053ec <HAL_UART_MspInit+0xfc>)
 8005380:	f043 0320 	orr.w	r3, r3, #32
 8005384:	6453      	str	r3, [r2, #68]	@ 0x44
 8005386:	4b19      	ldr	r3, [pc, #100]	@ (80053ec <HAL_UART_MspInit+0xfc>)
 8005388:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800538a:	f003 0320 	and.w	r3, r3, #32
 800538e:	613b      	str	r3, [r7, #16]
 8005390:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005392:	2300      	movs	r3, #0
 8005394:	60fb      	str	r3, [r7, #12]
 8005396:	4b15      	ldr	r3, [pc, #84]	@ (80053ec <HAL_UART_MspInit+0xfc>)
 8005398:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800539a:	4a14      	ldr	r2, [pc, #80]	@ (80053ec <HAL_UART_MspInit+0xfc>)
 800539c:	f043 0304 	orr.w	r3, r3, #4
 80053a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80053a2:	4b12      	ldr	r3, [pc, #72]	@ (80053ec <HAL_UART_MspInit+0xfc>)
 80053a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80053a6:	f003 0304 	and.w	r3, r3, #4
 80053aa:	60fb      	str	r3, [r7, #12]
 80053ac:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80053ae:	23c0      	movs	r3, #192	@ 0xc0
 80053b0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80053b2:	2302      	movs	r3, #2
 80053b4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80053b6:	2300      	movs	r3, #0
 80053b8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80053ba:	2303      	movs	r3, #3
 80053bc:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80053be:	2308      	movs	r3, #8
 80053c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80053c2:	f107 031c 	add.w	r3, r7, #28
 80053c6:	4619      	mov	r1, r3
 80053c8:	480b      	ldr	r0, [pc, #44]	@ (80053f8 <HAL_UART_MspInit+0x108>)
 80053ca:	f001 fa5d 	bl	8006888 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 80053ce:	2200      	movs	r2, #0
 80053d0:	2100      	movs	r1, #0
 80053d2:	2047      	movs	r0, #71	@ 0x47
 80053d4:	f000 fe03 	bl	8005fde <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 80053d8:	2047      	movs	r0, #71	@ 0x47
 80053da:	f000 fe1c 	bl	8006016 <HAL_NVIC_EnableIRQ>
}
 80053de:	bf00      	nop
 80053e0:	3730      	adds	r7, #48	@ 0x30
 80053e2:	46bd      	mov	sp, r7
 80053e4:	bd80      	pop	{r7, pc}
 80053e6:	bf00      	nop
 80053e8:	40004400 	.word	0x40004400
 80053ec:	40023800 	.word	0x40023800
 80053f0:	40020000 	.word	0x40020000
 80053f4:	40011400 	.word	0x40011400
 80053f8:	40020800 	.word	0x40020800

080053fc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80053fc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8005434 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8005400:	f7ff fc3e 	bl	8004c80 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8005404:	480c      	ldr	r0, [pc, #48]	@ (8005438 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8005406:	490d      	ldr	r1, [pc, #52]	@ (800543c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8005408:	4a0d      	ldr	r2, [pc, #52]	@ (8005440 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800540a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800540c:	e002      	b.n	8005414 <LoopCopyDataInit>

0800540e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800540e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005410:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005412:	3304      	adds	r3, #4

08005414 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005414:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005416:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005418:	d3f9      	bcc.n	800540e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800541a:	4a0a      	ldr	r2, [pc, #40]	@ (8005444 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800541c:	4c0a      	ldr	r4, [pc, #40]	@ (8005448 <LoopFillZerobss+0x22>)
  movs r3, #0
 800541e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005420:	e001      	b.n	8005426 <LoopFillZerobss>

08005422 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8005422:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005424:	3204      	adds	r2, #4

08005426 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8005426:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005428:	d3fb      	bcc.n	8005422 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800542a:	f006 fd7d 	bl	800bf28 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800542e:	f7fd f989 	bl	8002744 <main>
  bx  lr    
 8005432:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8005434:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8005438:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800543c:	2000d2fc 	.word	0x2000d2fc
  ldr r2, =_sidata
 8005440:	08011094 	.word	0x08011094
  ldr r2, =_sbss
 8005444:	2000d2fc 	.word	0x2000d2fc
  ldr r4, =_ebss
 8005448:	2001421c 	.word	0x2001421c

0800544c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800544c:	e7fe      	b.n	800544c <ADC_IRQHandler>
	...

08005450 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005450:	b580      	push	{r7, lr}
 8005452:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8005454:	4b0e      	ldr	r3, [pc, #56]	@ (8005490 <HAL_Init+0x40>)
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	4a0d      	ldr	r2, [pc, #52]	@ (8005490 <HAL_Init+0x40>)
 800545a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800545e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8005460:	4b0b      	ldr	r3, [pc, #44]	@ (8005490 <HAL_Init+0x40>)
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	4a0a      	ldr	r2, [pc, #40]	@ (8005490 <HAL_Init+0x40>)
 8005466:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800546a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800546c:	4b08      	ldr	r3, [pc, #32]	@ (8005490 <HAL_Init+0x40>)
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	4a07      	ldr	r2, [pc, #28]	@ (8005490 <HAL_Init+0x40>)
 8005472:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005476:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005478:	2003      	movs	r0, #3
 800547a:	f000 fda5 	bl	8005fc8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800547e:	2000      	movs	r0, #0
 8005480:	f000 f808 	bl	8005494 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8005484:	f7ff fb30 	bl	8004ae8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8005488:	2300      	movs	r3, #0
}
 800548a:	4618      	mov	r0, r3
 800548c:	bd80      	pop	{r7, pc}
 800548e:	bf00      	nop
 8005490:	40023c00 	.word	0x40023c00

08005494 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005494:	b580      	push	{r7, lr}
 8005496:	b082      	sub	sp, #8
 8005498:	af00      	add	r7, sp, #0
 800549a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800549c:	4b12      	ldr	r3, [pc, #72]	@ (80054e8 <HAL_InitTick+0x54>)
 800549e:	681a      	ldr	r2, [r3, #0]
 80054a0:	4b12      	ldr	r3, [pc, #72]	@ (80054ec <HAL_InitTick+0x58>)
 80054a2:	781b      	ldrb	r3, [r3, #0]
 80054a4:	4619      	mov	r1, r3
 80054a6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80054aa:	fbb3 f3f1 	udiv	r3, r3, r1
 80054ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80054b2:	4618      	mov	r0, r3
 80054b4:	f000 fdbd 	bl	8006032 <HAL_SYSTICK_Config>
 80054b8:	4603      	mov	r3, r0
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d001      	beq.n	80054c2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80054be:	2301      	movs	r3, #1
 80054c0:	e00e      	b.n	80054e0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	2b0f      	cmp	r3, #15
 80054c6:	d80a      	bhi.n	80054de <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80054c8:	2200      	movs	r2, #0
 80054ca:	6879      	ldr	r1, [r7, #4]
 80054cc:	f04f 30ff 	mov.w	r0, #4294967295
 80054d0:	f000 fd85 	bl	8005fde <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80054d4:	4a06      	ldr	r2, [pc, #24]	@ (80054f0 <HAL_InitTick+0x5c>)
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80054da:	2300      	movs	r3, #0
 80054dc:	e000      	b.n	80054e0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80054de:	2301      	movs	r3, #1
}
 80054e0:	4618      	mov	r0, r3
 80054e2:	3708      	adds	r7, #8
 80054e4:	46bd      	mov	sp, r7
 80054e6:	bd80      	pop	{r7, pc}
 80054e8:	2000d114 	.word	0x2000d114
 80054ec:	2000d11c 	.word	0x2000d11c
 80054f0:	2000d118 	.word	0x2000d118

080054f4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80054f4:	b480      	push	{r7}
 80054f6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80054f8:	4b06      	ldr	r3, [pc, #24]	@ (8005514 <HAL_IncTick+0x20>)
 80054fa:	781b      	ldrb	r3, [r3, #0]
 80054fc:	461a      	mov	r2, r3
 80054fe:	4b06      	ldr	r3, [pc, #24]	@ (8005518 <HAL_IncTick+0x24>)
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	4413      	add	r3, r2
 8005504:	4a04      	ldr	r2, [pc, #16]	@ (8005518 <HAL_IncTick+0x24>)
 8005506:	6013      	str	r3, [r2, #0]
}
 8005508:	bf00      	nop
 800550a:	46bd      	mov	sp, r7
 800550c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005510:	4770      	bx	lr
 8005512:	bf00      	nop
 8005514:	2000d11c 	.word	0x2000d11c
 8005518:	200140b8 	.word	0x200140b8

0800551c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800551c:	b480      	push	{r7}
 800551e:	af00      	add	r7, sp, #0
  return uwTick;
 8005520:	4b03      	ldr	r3, [pc, #12]	@ (8005530 <HAL_GetTick+0x14>)
 8005522:	681b      	ldr	r3, [r3, #0]
}
 8005524:	4618      	mov	r0, r3
 8005526:	46bd      	mov	sp, r7
 8005528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800552c:	4770      	bx	lr
 800552e:	bf00      	nop
 8005530:	200140b8 	.word	0x200140b8

08005534 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005534:	b580      	push	{r7, lr}
 8005536:	b084      	sub	sp, #16
 8005538:	af00      	add	r7, sp, #0
 800553a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800553c:	f7ff ffee 	bl	800551c <HAL_GetTick>
 8005540:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	f1b3 3fff 	cmp.w	r3, #4294967295
 800554c:	d005      	beq.n	800555a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800554e:	4b0a      	ldr	r3, [pc, #40]	@ (8005578 <HAL_Delay+0x44>)
 8005550:	781b      	ldrb	r3, [r3, #0]
 8005552:	461a      	mov	r2, r3
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	4413      	add	r3, r2
 8005558:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800555a:	bf00      	nop
 800555c:	f7ff ffde 	bl	800551c <HAL_GetTick>
 8005560:	4602      	mov	r2, r0
 8005562:	68bb      	ldr	r3, [r7, #8]
 8005564:	1ad3      	subs	r3, r2, r3
 8005566:	68fa      	ldr	r2, [r7, #12]
 8005568:	429a      	cmp	r2, r3
 800556a:	d8f7      	bhi.n	800555c <HAL_Delay+0x28>
  {
  }
}
 800556c:	bf00      	nop
 800556e:	bf00      	nop
 8005570:	3710      	adds	r7, #16
 8005572:	46bd      	mov	sp, r7
 8005574:	bd80      	pop	{r7, pc}
 8005576:	bf00      	nop
 8005578:	2000d11c 	.word	0x2000d11c

0800557c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800557c:	b580      	push	{r7, lr}
 800557e:	b084      	sub	sp, #16
 8005580:	af00      	add	r7, sp, #0
 8005582:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005584:	2300      	movs	r3, #0
 8005586:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	2b00      	cmp	r3, #0
 800558c:	d101      	bne.n	8005592 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800558e:	2301      	movs	r3, #1
 8005590:	e033      	b.n	80055fa <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005596:	2b00      	cmp	r3, #0
 8005598:	d109      	bne.n	80055ae <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800559a:	6878      	ldr	r0, [r7, #4]
 800559c:	f7fb fe44 	bl	8001228 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	2200      	movs	r2, #0
 80055a4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	2200      	movs	r2, #0
 80055aa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055b2:	f003 0310 	and.w	r3, r3, #16
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d118      	bne.n	80055ec <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055be:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80055c2:	f023 0302 	bic.w	r3, r3, #2
 80055c6:	f043 0202 	orr.w	r2, r3, #2
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 80055ce:	6878      	ldr	r0, [r7, #4]
 80055d0:	f000 faac 	bl	8005b2c <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	2200      	movs	r2, #0
 80055d8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055de:	f023 0303 	bic.w	r3, r3, #3
 80055e2:	f043 0201 	orr.w	r2, r3, #1
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	641a      	str	r2, [r3, #64]	@ 0x40
 80055ea:	e001      	b.n	80055f0 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80055ec:	2301      	movs	r3, #1
 80055ee:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	2200      	movs	r2, #0
 80055f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 80055f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80055fa:	4618      	mov	r0, r3
 80055fc:	3710      	adds	r7, #16
 80055fe:	46bd      	mov	sp, r7
 8005600:	bd80      	pop	{r7, pc}
	...

08005604 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8005604:	b580      	push	{r7, lr}
 8005606:	b088      	sub	sp, #32
 8005608:	af00      	add	r7, sp, #0
 800560a:	60f8      	str	r0, [r7, #12]
 800560c:	60b9      	str	r1, [r7, #8]
 800560e:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8005610:	2300      	movs	r3, #0
 8005612:	617b      	str	r3, [r7, #20]
  ADC_Common_TypeDef *tmpADC_Common;
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005614:	2300      	movs	r3, #0
 8005616:	77fb      	strb	r3, [r7, #31]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800561e:	2b01      	cmp	r3, #1
 8005620:	d101      	bne.n	8005626 <HAL_ADC_Start_DMA+0x22>
 8005622:	2302      	movs	r3, #2
 8005624:	e0d0      	b.n	80057c8 <HAL_ADC_Start_DMA+0x1c4>
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	2201      	movs	r2, #1
 800562a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	689b      	ldr	r3, [r3, #8]
 8005634:	f003 0301 	and.w	r3, r3, #1
 8005638:	2b01      	cmp	r3, #1
 800563a:	d018      	beq.n	800566e <HAL_ADC_Start_DMA+0x6a>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	689a      	ldr	r2, [r3, #8]
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	f042 0201 	orr.w	r2, r2, #1
 800564a:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800564c:	4b60      	ldr	r3, [pc, #384]	@ (80057d0 <HAL_ADC_Start_DMA+0x1cc>)
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	4a60      	ldr	r2, [pc, #384]	@ (80057d4 <HAL_ADC_Start_DMA+0x1d0>)
 8005652:	fba2 2303 	umull	r2, r3, r2, r3
 8005656:	0c9a      	lsrs	r2, r3, #18
 8005658:	4613      	mov	r3, r2
 800565a:	005b      	lsls	r3, r3, #1
 800565c:	4413      	add	r3, r2
 800565e:	617b      	str	r3, [r7, #20]
    while (counter != 0U)
 8005660:	e002      	b.n	8005668 <HAL_ADC_Start_DMA+0x64>
    {
      counter--;
 8005662:	697b      	ldr	r3, [r7, #20]
 8005664:	3b01      	subs	r3, #1
 8005666:	617b      	str	r3, [r7, #20]
    while (counter != 0U)
 8005668:	697b      	ldr	r3, [r7, #20]
 800566a:	2b00      	cmp	r3, #0
 800566c:	d1f9      	bne.n	8005662 <HAL_ADC_Start_DMA+0x5e>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	689b      	ldr	r3, [r3, #8]
 8005674:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005678:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800567c:	d107      	bne.n	800568e <HAL_ADC_Start_DMA+0x8a>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	689a      	ldr	r2, [r3, #8]
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800568c:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	689b      	ldr	r3, [r3, #8]
 8005694:	f003 0301 	and.w	r3, r3, #1
 8005698:	2b01      	cmp	r3, #1
 800569a:	f040 8088 	bne.w	80057ae <HAL_ADC_Start_DMA+0x1aa>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80056a2:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 80056a6:	f023 0301 	bic.w	r3, r3, #1
 80056aa:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	685b      	ldr	r3, [r3, #4]
 80056b8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d007      	beq.n	80056d0 <HAL_ADC_Start_DMA+0xcc>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80056c4:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80056c8:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80056d4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80056d8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80056dc:	d106      	bne.n	80056ec <HAL_ADC_Start_DMA+0xe8>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80056e2:	f023 0206 	bic.w	r2, r3, #6
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	645a      	str	r2, [r3, #68]	@ 0x44
 80056ea:	e002      	b.n	80056f2 <HAL_ADC_Start_DMA+0xee>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	2200      	movs	r2, #0
 80056f0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	2200      	movs	r2, #0
 80056f6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80056fa:	4b37      	ldr	r3, [pc, #220]	@ (80057d8 <HAL_ADC_Start_DMA+0x1d4>)
 80056fc:	61bb      	str	r3, [r7, #24]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005702:	4a36      	ldr	r2, [pc, #216]	@ (80057dc <HAL_ADC_Start_DMA+0x1d8>)
 8005704:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800570a:	4a35      	ldr	r2, [pc, #212]	@ (80057e0 <HAL_ADC_Start_DMA+0x1dc>)
 800570c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005712:	4a34      	ldr	r2, [pc, #208]	@ (80057e4 <HAL_ADC_Start_DMA+0x1e0>)
 8005714:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 800571e:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	685a      	ldr	r2, [r3, #4]
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 800572e:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	689a      	ldr	r2, [r3, #8]
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800573e:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	334c      	adds	r3, #76	@ 0x4c
 800574a:	4619      	mov	r1, r3
 800574c:	68ba      	ldr	r2, [r7, #8]
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	f000 fd46 	bl	80061e0 <HAL_DMA_Start_IT>
 8005754:	4603      	mov	r3, r0
 8005756:	77fb      	strb	r3, [r7, #31]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8005758:	69bb      	ldr	r3, [r7, #24]
 800575a:	685b      	ldr	r3, [r3, #4]
 800575c:	f003 031f 	and.w	r3, r3, #31
 8005760:	2b00      	cmp	r3, #0
 8005762:	d10f      	bne.n	8005784 <HAL_ADC_Start_DMA+0x180>
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	689b      	ldr	r3, [r3, #8]
 800576a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800576e:	2b00      	cmp	r3, #0
 8005770:	d129      	bne.n	80057c6 <HAL_ADC_Start_DMA+0x1c2>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	689a      	ldr	r2, [r3, #8]
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8005780:	609a      	str	r2, [r3, #8]
 8005782:	e020      	b.n	80057c6 <HAL_ADC_Start_DMA+0x1c2>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	4a17      	ldr	r2, [pc, #92]	@ (80057e8 <HAL_ADC_Start_DMA+0x1e4>)
 800578a:	4293      	cmp	r3, r2
 800578c:	d11b      	bne.n	80057c6 <HAL_ADC_Start_DMA+0x1c2>
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	689b      	ldr	r3, [r3, #8]
 8005794:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8005798:	2b00      	cmp	r3, #0
 800579a:	d114      	bne.n	80057c6 <HAL_ADC_Start_DMA+0x1c2>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	689a      	ldr	r2, [r3, #8]
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80057aa:	609a      	str	r2, [r3, #8]
 80057ac:	e00b      	b.n	80057c6 <HAL_ADC_Start_DMA+0x1c2>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80057b2:	f043 0210 	orr.w	r2, r3, #16
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80057be:	f043 0201 	orr.w	r2, r3, #1
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return tmp_hal_status;
 80057c6:	7ffb      	ldrb	r3, [r7, #31]
}
 80057c8:	4618      	mov	r0, r3
 80057ca:	3720      	adds	r7, #32
 80057cc:	46bd      	mov	sp, r7
 80057ce:	bd80      	pop	{r7, pc}
 80057d0:	2000d114 	.word	0x2000d114
 80057d4:	431bde83 	.word	0x431bde83
 80057d8:	40012300 	.word	0x40012300
 80057dc:	08005d25 	.word	0x08005d25
 80057e0:	08005ddf 	.word	0x08005ddf
 80057e4:	08005dfb 	.word	0x08005dfb
 80057e8:	40012000 	.word	0x40012000

080057ec <HAL_ADC_Stop_DMA>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef *hadc)
{
 80057ec:	b580      	push	{r7, lr}
 80057ee:	b084      	sub	sp, #16
 80057f0:	af00      	add	r7, sp, #0
 80057f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80057f4:	2300      	movs	r3, #0
 80057f6:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80057fe:	2b01      	cmp	r3, #1
 8005800:	d101      	bne.n	8005806 <HAL_ADC_Stop_DMA+0x1a>
 8005802:	2302      	movs	r3, #2
 8005804:	e048      	b.n	8005898 <HAL_ADC_Stop_DMA+0xac>
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	2201      	movs	r2, #1
 800580a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	689a      	ldr	r2, [r3, #8]
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	f022 0201 	bic.w	r2, r2, #1
 800581c:	609a      	str	r2, [r3, #8]

  /* Check if ADC is effectively disabled */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	689b      	ldr	r3, [r3, #8]
 8005824:	f003 0301 	and.w	r3, r3, #1
 8005828:	2b00      	cmp	r3, #0
 800582a:	d130      	bne.n	800588e <HAL_ADC_Stop_DMA+0xa2>
  {
    /* Disable the selected ADC DMA mode */
    hadc->Instance->CR2 &= ~ADC_CR2_DMA;
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	689a      	ldr	r2, [r3, #8]
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800583a:	609a      	str	r2, [r3, #8]

    /* Disable the DMA channel (in case of DMA in circular mode or stop while */
    /* DMA transfer is on going)                                              */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005840:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005844:	b2db      	uxtb	r3, r3
 8005846:	2b02      	cmp	r3, #2
 8005848:	d10f      	bne.n	800586a <HAL_ADC_Stop_DMA+0x7e>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800584e:	4618      	mov	r0, r3
 8005850:	f000 fd1e 	bl	8006290 <HAL_DMA_Abort>
 8005854:	4603      	mov	r3, r0
 8005856:	73fb      	strb	r3, [r7, #15]

      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 8005858:	7bfb      	ldrb	r3, [r7, #15]
 800585a:	2b00      	cmp	r3, #0
 800585c:	d005      	beq.n	800586a <HAL_ADC_Stop_DMA+0x7e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005862:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	641a      	str	r2, [r3, #64]	@ 0x40
      }
    }

    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	685a      	ldr	r2, [r3, #4]
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	f022 6280 	bic.w	r2, r2, #67108864	@ 0x4000000
 8005878:	605a      	str	r2, [r3, #4]

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800587e:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8005882:	f023 0301 	bic.w	r3, r3, #1
 8005886:	f043 0201 	orr.w	r2, r3, #1
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	2200      	movs	r2, #0
 8005892:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8005896:	7bfb      	ldrb	r3, [r7, #15]
}
 8005898:	4618      	mov	r0, r3
 800589a:	3710      	adds	r7, #16
 800589c:	46bd      	mov	sp, r7
 800589e:	bd80      	pop	{r7, pc}

080058a0 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 80058a0:	b480      	push	{r7}
 80058a2:	b083      	sub	sp, #12
 80058a4:	af00      	add	r7, sp, #0
 80058a6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 80058a8:	bf00      	nop
 80058aa:	370c      	adds	r7, #12
 80058ac:	46bd      	mov	sp, r7
 80058ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058b2:	4770      	bx	lr

080058b4 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80058b4:	b480      	push	{r7}
 80058b6:	b083      	sub	sp, #12
 80058b8:	af00      	add	r7, sp, #0
 80058ba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80058bc:	bf00      	nop
 80058be:	370c      	adds	r7, #12
 80058c0:	46bd      	mov	sp, r7
 80058c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058c6:	4770      	bx	lr

080058c8 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80058c8:	b480      	push	{r7}
 80058ca:	b085      	sub	sp, #20
 80058cc:	af00      	add	r7, sp, #0
 80058ce:	6078      	str	r0, [r7, #4]
 80058d0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80058d2:	2300      	movs	r3, #0
 80058d4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80058dc:	2b01      	cmp	r3, #1
 80058de:	d101      	bne.n	80058e4 <HAL_ADC_ConfigChannel+0x1c>
 80058e0:	2302      	movs	r3, #2
 80058e2:	e113      	b.n	8005b0c <HAL_ADC_ConfigChannel+0x244>
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	2201      	movs	r2, #1
 80058e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80058ec:	683b      	ldr	r3, [r7, #0]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	2b09      	cmp	r3, #9
 80058f2:	d925      	bls.n	8005940 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	68d9      	ldr	r1, [r3, #12]
 80058fa:	683b      	ldr	r3, [r7, #0]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	b29b      	uxth	r3, r3
 8005900:	461a      	mov	r2, r3
 8005902:	4613      	mov	r3, r2
 8005904:	005b      	lsls	r3, r3, #1
 8005906:	4413      	add	r3, r2
 8005908:	3b1e      	subs	r3, #30
 800590a:	2207      	movs	r2, #7
 800590c:	fa02 f303 	lsl.w	r3, r2, r3
 8005910:	43da      	mvns	r2, r3
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	400a      	ands	r2, r1
 8005918:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	68d9      	ldr	r1, [r3, #12]
 8005920:	683b      	ldr	r3, [r7, #0]
 8005922:	689a      	ldr	r2, [r3, #8]
 8005924:	683b      	ldr	r3, [r7, #0]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	b29b      	uxth	r3, r3
 800592a:	4618      	mov	r0, r3
 800592c:	4603      	mov	r3, r0
 800592e:	005b      	lsls	r3, r3, #1
 8005930:	4403      	add	r3, r0
 8005932:	3b1e      	subs	r3, #30
 8005934:	409a      	lsls	r2, r3
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	430a      	orrs	r2, r1
 800593c:	60da      	str	r2, [r3, #12]
 800593e:	e022      	b.n	8005986 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	6919      	ldr	r1, [r3, #16]
 8005946:	683b      	ldr	r3, [r7, #0]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	b29b      	uxth	r3, r3
 800594c:	461a      	mov	r2, r3
 800594e:	4613      	mov	r3, r2
 8005950:	005b      	lsls	r3, r3, #1
 8005952:	4413      	add	r3, r2
 8005954:	2207      	movs	r2, #7
 8005956:	fa02 f303 	lsl.w	r3, r2, r3
 800595a:	43da      	mvns	r2, r3
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	400a      	ands	r2, r1
 8005962:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	6919      	ldr	r1, [r3, #16]
 800596a:	683b      	ldr	r3, [r7, #0]
 800596c:	689a      	ldr	r2, [r3, #8]
 800596e:	683b      	ldr	r3, [r7, #0]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	b29b      	uxth	r3, r3
 8005974:	4618      	mov	r0, r3
 8005976:	4603      	mov	r3, r0
 8005978:	005b      	lsls	r3, r3, #1
 800597a:	4403      	add	r3, r0
 800597c:	409a      	lsls	r2, r3
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	430a      	orrs	r2, r1
 8005984:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8005986:	683b      	ldr	r3, [r7, #0]
 8005988:	685b      	ldr	r3, [r3, #4]
 800598a:	2b06      	cmp	r3, #6
 800598c:	d824      	bhi.n	80059d8 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8005994:	683b      	ldr	r3, [r7, #0]
 8005996:	685a      	ldr	r2, [r3, #4]
 8005998:	4613      	mov	r3, r2
 800599a:	009b      	lsls	r3, r3, #2
 800599c:	4413      	add	r3, r2
 800599e:	3b05      	subs	r3, #5
 80059a0:	221f      	movs	r2, #31
 80059a2:	fa02 f303 	lsl.w	r3, r2, r3
 80059a6:	43da      	mvns	r2, r3
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	400a      	ands	r2, r1
 80059ae:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80059b6:	683b      	ldr	r3, [r7, #0]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	b29b      	uxth	r3, r3
 80059bc:	4618      	mov	r0, r3
 80059be:	683b      	ldr	r3, [r7, #0]
 80059c0:	685a      	ldr	r2, [r3, #4]
 80059c2:	4613      	mov	r3, r2
 80059c4:	009b      	lsls	r3, r3, #2
 80059c6:	4413      	add	r3, r2
 80059c8:	3b05      	subs	r3, #5
 80059ca:	fa00 f203 	lsl.w	r2, r0, r3
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	430a      	orrs	r2, r1
 80059d4:	635a      	str	r2, [r3, #52]	@ 0x34
 80059d6:	e04c      	b.n	8005a72 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80059d8:	683b      	ldr	r3, [r7, #0]
 80059da:	685b      	ldr	r3, [r3, #4]
 80059dc:	2b0c      	cmp	r3, #12
 80059de:	d824      	bhi.n	8005a2a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80059e6:	683b      	ldr	r3, [r7, #0]
 80059e8:	685a      	ldr	r2, [r3, #4]
 80059ea:	4613      	mov	r3, r2
 80059ec:	009b      	lsls	r3, r3, #2
 80059ee:	4413      	add	r3, r2
 80059f0:	3b23      	subs	r3, #35	@ 0x23
 80059f2:	221f      	movs	r2, #31
 80059f4:	fa02 f303 	lsl.w	r3, r2, r3
 80059f8:	43da      	mvns	r2, r3
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	400a      	ands	r2, r1
 8005a00:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8005a08:	683b      	ldr	r3, [r7, #0]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	b29b      	uxth	r3, r3
 8005a0e:	4618      	mov	r0, r3
 8005a10:	683b      	ldr	r3, [r7, #0]
 8005a12:	685a      	ldr	r2, [r3, #4]
 8005a14:	4613      	mov	r3, r2
 8005a16:	009b      	lsls	r3, r3, #2
 8005a18:	4413      	add	r3, r2
 8005a1a:	3b23      	subs	r3, #35	@ 0x23
 8005a1c:	fa00 f203 	lsl.w	r2, r0, r3
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	430a      	orrs	r2, r1
 8005a26:	631a      	str	r2, [r3, #48]	@ 0x30
 8005a28:	e023      	b.n	8005a72 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8005a30:	683b      	ldr	r3, [r7, #0]
 8005a32:	685a      	ldr	r2, [r3, #4]
 8005a34:	4613      	mov	r3, r2
 8005a36:	009b      	lsls	r3, r3, #2
 8005a38:	4413      	add	r3, r2
 8005a3a:	3b41      	subs	r3, #65	@ 0x41
 8005a3c:	221f      	movs	r2, #31
 8005a3e:	fa02 f303 	lsl.w	r3, r2, r3
 8005a42:	43da      	mvns	r2, r3
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	400a      	ands	r2, r1
 8005a4a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8005a52:	683b      	ldr	r3, [r7, #0]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	b29b      	uxth	r3, r3
 8005a58:	4618      	mov	r0, r3
 8005a5a:	683b      	ldr	r3, [r7, #0]
 8005a5c:	685a      	ldr	r2, [r3, #4]
 8005a5e:	4613      	mov	r3, r2
 8005a60:	009b      	lsls	r3, r3, #2
 8005a62:	4413      	add	r3, r2
 8005a64:	3b41      	subs	r3, #65	@ 0x41
 8005a66:	fa00 f203 	lsl.w	r2, r0, r3
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	430a      	orrs	r2, r1
 8005a70:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005a72:	4b29      	ldr	r3, [pc, #164]	@ (8005b18 <HAL_ADC_ConfigChannel+0x250>)
 8005a74:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	4a28      	ldr	r2, [pc, #160]	@ (8005b1c <HAL_ADC_ConfigChannel+0x254>)
 8005a7c:	4293      	cmp	r3, r2
 8005a7e:	d10f      	bne.n	8005aa0 <HAL_ADC_ConfigChannel+0x1d8>
 8005a80:	683b      	ldr	r3, [r7, #0]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	2b12      	cmp	r3, #18
 8005a86:	d10b      	bne.n	8005aa0 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	685b      	ldr	r3, [r3, #4]
 8005a8c:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	685b      	ldr	r3, [r3, #4]
 8005a98:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	4a1d      	ldr	r2, [pc, #116]	@ (8005b1c <HAL_ADC_ConfigChannel+0x254>)
 8005aa6:	4293      	cmp	r3, r2
 8005aa8:	d12b      	bne.n	8005b02 <HAL_ADC_ConfigChannel+0x23a>
 8005aaa:	683b      	ldr	r3, [r7, #0]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	4a1c      	ldr	r2, [pc, #112]	@ (8005b20 <HAL_ADC_ConfigChannel+0x258>)
 8005ab0:	4293      	cmp	r3, r2
 8005ab2:	d003      	beq.n	8005abc <HAL_ADC_ConfigChannel+0x1f4>
 8005ab4:	683b      	ldr	r3, [r7, #0]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	2b11      	cmp	r3, #17
 8005aba:	d122      	bne.n	8005b02 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	685b      	ldr	r3, [r3, #4]
 8005ac0:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	685b      	ldr	r3, [r3, #4]
 8005acc:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8005ad4:	683b      	ldr	r3, [r7, #0]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	4a11      	ldr	r2, [pc, #68]	@ (8005b20 <HAL_ADC_ConfigChannel+0x258>)
 8005ada:	4293      	cmp	r3, r2
 8005adc:	d111      	bne.n	8005b02 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8005ade:	4b11      	ldr	r3, [pc, #68]	@ (8005b24 <HAL_ADC_ConfigChannel+0x25c>)
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	4a11      	ldr	r2, [pc, #68]	@ (8005b28 <HAL_ADC_ConfigChannel+0x260>)
 8005ae4:	fba2 2303 	umull	r2, r3, r2, r3
 8005ae8:	0c9a      	lsrs	r2, r3, #18
 8005aea:	4613      	mov	r3, r2
 8005aec:	009b      	lsls	r3, r3, #2
 8005aee:	4413      	add	r3, r2
 8005af0:	005b      	lsls	r3, r3, #1
 8005af2:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8005af4:	e002      	b.n	8005afc <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8005af6:	68bb      	ldr	r3, [r7, #8]
 8005af8:	3b01      	subs	r3, #1
 8005afa:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8005afc:	68bb      	ldr	r3, [r7, #8]
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d1f9      	bne.n	8005af6 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	2200      	movs	r2, #0
 8005b06:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8005b0a:	2300      	movs	r3, #0
}
 8005b0c:	4618      	mov	r0, r3
 8005b0e:	3714      	adds	r7, #20
 8005b10:	46bd      	mov	sp, r7
 8005b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b16:	4770      	bx	lr
 8005b18:	40012300 	.word	0x40012300
 8005b1c:	40012000 	.word	0x40012000
 8005b20:	10000012 	.word	0x10000012
 8005b24:	2000d114 	.word	0x2000d114
 8005b28:	431bde83 	.word	0x431bde83

08005b2c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8005b2c:	b480      	push	{r7}
 8005b2e:	b085      	sub	sp, #20
 8005b30:	af00      	add	r7, sp, #0
 8005b32:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005b34:	4b79      	ldr	r3, [pc, #484]	@ (8005d1c <ADC_Init+0x1f0>)
 8005b36:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	685b      	ldr	r3, [r3, #4]
 8005b3c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	685a      	ldr	r2, [r3, #4]
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	685b      	ldr	r3, [r3, #4]
 8005b4c:	431a      	orrs	r2, r3
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	685a      	ldr	r2, [r3, #4]
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005b60:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	6859      	ldr	r1, [r3, #4]
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	691b      	ldr	r3, [r3, #16]
 8005b6c:	021a      	lsls	r2, r3, #8
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	430a      	orrs	r2, r1
 8005b74:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	685a      	ldr	r2, [r3, #4]
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8005b84:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	6859      	ldr	r1, [r3, #4]
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	689a      	ldr	r2, [r3, #8]
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	430a      	orrs	r2, r1
 8005b96:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	689a      	ldr	r2, [r3, #8]
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005ba6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	6899      	ldr	r1, [r3, #8]
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	68da      	ldr	r2, [r3, #12]
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	430a      	orrs	r2, r1
 8005bb8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005bbe:	4a58      	ldr	r2, [pc, #352]	@ (8005d20 <ADC_Init+0x1f4>)
 8005bc0:	4293      	cmp	r3, r2
 8005bc2:	d022      	beq.n	8005c0a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	689a      	ldr	r2, [r3, #8]
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8005bd2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	6899      	ldr	r1, [r3, #8]
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	430a      	orrs	r2, r1
 8005be4:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	689a      	ldr	r2, [r3, #8]
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8005bf4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	6899      	ldr	r1, [r3, #8]
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	430a      	orrs	r2, r1
 8005c06:	609a      	str	r2, [r3, #8]
 8005c08:	e00f      	b.n	8005c2a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	689a      	ldr	r2, [r3, #8]
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8005c18:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	689a      	ldr	r2, [r3, #8]
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8005c28:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	689a      	ldr	r2, [r3, #8]
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	f022 0202 	bic.w	r2, r2, #2
 8005c38:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	6899      	ldr	r1, [r3, #8]
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	7e1b      	ldrb	r3, [r3, #24]
 8005c44:	005a      	lsls	r2, r3, #1
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	430a      	orrs	r2, r1
 8005c4c:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d01b      	beq.n	8005c90 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	685a      	ldr	r2, [r3, #4]
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005c66:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	685a      	ldr	r2, [r3, #4]
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8005c76:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	6859      	ldr	r1, [r3, #4]
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c82:	3b01      	subs	r3, #1
 8005c84:	035a      	lsls	r2, r3, #13
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	430a      	orrs	r2, r1
 8005c8c:	605a      	str	r2, [r3, #4]
 8005c8e:	e007      	b.n	8005ca0 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	685a      	ldr	r2, [r3, #4]
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005c9e:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8005cae:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	69db      	ldr	r3, [r3, #28]
 8005cba:	3b01      	subs	r3, #1
 8005cbc:	051a      	lsls	r2, r3, #20
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	430a      	orrs	r2, r1
 8005cc4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	689a      	ldr	r2, [r3, #8]
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8005cd4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	6899      	ldr	r1, [r3, #8]
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8005ce2:	025a      	lsls	r2, r3, #9
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	430a      	orrs	r2, r1
 8005cea:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	689a      	ldr	r2, [r3, #8]
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005cfa:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	6899      	ldr	r1, [r3, #8]
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	695b      	ldr	r3, [r3, #20]
 8005d06:	029a      	lsls	r2, r3, #10
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	430a      	orrs	r2, r1
 8005d0e:	609a      	str	r2, [r3, #8]
}
 8005d10:	bf00      	nop
 8005d12:	3714      	adds	r7, #20
 8005d14:	46bd      	mov	sp, r7
 8005d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d1a:	4770      	bx	lr
 8005d1c:	40012300 	.word	0x40012300
 8005d20:	0f000001 	.word	0x0f000001

08005d24 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8005d24:	b580      	push	{r7, lr}
 8005d26:	b084      	sub	sp, #16
 8005d28:	af00      	add	r7, sp, #0
 8005d2a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d30:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d36:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d13c      	bne.n	8005db8 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d42:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	689b      	ldr	r3, [r3, #8]
 8005d50:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d12b      	bne.n	8005db0 <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d127      	bne.n	8005db0 <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d66:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d006      	beq.n	8005d7c <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	689b      	ldr	r3, [r3, #8]
 8005d74:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d119      	bne.n	8005db0 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	685a      	ldr	r2, [r3, #4]
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	f022 0220 	bic.w	r2, r2, #32
 8005d8a:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d90:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d9c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d105      	bne.n	8005db0 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005da8:	f043 0201 	orr.w	r2, r3, #1
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8005db0:	68f8      	ldr	r0, [r7, #12]
 8005db2:	f7fc fad3 	bl	800235c <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8005db6:	e00e      	b.n	8005dd6 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005dbc:	f003 0310 	and.w	r3, r3, #16
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d003      	beq.n	8005dcc <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8005dc4:	68f8      	ldr	r0, [r7, #12]
 8005dc6:	f7ff fd75 	bl	80058b4 <HAL_ADC_ErrorCallback>
}
 8005dca:	e004      	b.n	8005dd6 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005dd0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005dd2:	6878      	ldr	r0, [r7, #4]
 8005dd4:	4798      	blx	r3
}
 8005dd6:	bf00      	nop
 8005dd8:	3710      	adds	r7, #16
 8005dda:	46bd      	mov	sp, r7
 8005ddc:	bd80      	pop	{r7, pc}

08005dde <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8005dde:	b580      	push	{r7, lr}
 8005de0:	b084      	sub	sp, #16
 8005de2:	af00      	add	r7, sp, #0
 8005de4:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005dea:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8005dec:	68f8      	ldr	r0, [r7, #12]
 8005dee:	f7ff fd57 	bl	80058a0 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8005df2:	bf00      	nop
 8005df4:	3710      	adds	r7, #16
 8005df6:	46bd      	mov	sp, r7
 8005df8:	bd80      	pop	{r7, pc}

08005dfa <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8005dfa:	b580      	push	{r7, lr}
 8005dfc:	b084      	sub	sp, #16
 8005dfe:	af00      	add	r7, sp, #0
 8005e00:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e06:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	2240      	movs	r2, #64	@ 0x40
 8005e0c:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005e12:	f043 0204 	orr.w	r2, r3, #4
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8005e1a:	68f8      	ldr	r0, [r7, #12]
 8005e1c:	f7ff fd4a 	bl	80058b4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8005e20:	bf00      	nop
 8005e22:	3710      	adds	r7, #16
 8005e24:	46bd      	mov	sp, r7
 8005e26:	bd80      	pop	{r7, pc}

08005e28 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005e28:	b480      	push	{r7}
 8005e2a:	b085      	sub	sp, #20
 8005e2c:	af00      	add	r7, sp, #0
 8005e2e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	f003 0307 	and.w	r3, r3, #7
 8005e36:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005e38:	4b0c      	ldr	r3, [pc, #48]	@ (8005e6c <__NVIC_SetPriorityGrouping+0x44>)
 8005e3a:	68db      	ldr	r3, [r3, #12]
 8005e3c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005e3e:	68ba      	ldr	r2, [r7, #8]
 8005e40:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8005e44:	4013      	ands	r3, r2
 8005e46:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005e4c:	68bb      	ldr	r3, [r7, #8]
 8005e4e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005e50:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8005e54:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005e58:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005e5a:	4a04      	ldr	r2, [pc, #16]	@ (8005e6c <__NVIC_SetPriorityGrouping+0x44>)
 8005e5c:	68bb      	ldr	r3, [r7, #8]
 8005e5e:	60d3      	str	r3, [r2, #12]
}
 8005e60:	bf00      	nop
 8005e62:	3714      	adds	r7, #20
 8005e64:	46bd      	mov	sp, r7
 8005e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e6a:	4770      	bx	lr
 8005e6c:	e000ed00 	.word	0xe000ed00

08005e70 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005e70:	b480      	push	{r7}
 8005e72:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005e74:	4b04      	ldr	r3, [pc, #16]	@ (8005e88 <__NVIC_GetPriorityGrouping+0x18>)
 8005e76:	68db      	ldr	r3, [r3, #12]
 8005e78:	0a1b      	lsrs	r3, r3, #8
 8005e7a:	f003 0307 	and.w	r3, r3, #7
}
 8005e7e:	4618      	mov	r0, r3
 8005e80:	46bd      	mov	sp, r7
 8005e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e86:	4770      	bx	lr
 8005e88:	e000ed00 	.word	0xe000ed00

08005e8c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005e8c:	b480      	push	{r7}
 8005e8e:	b083      	sub	sp, #12
 8005e90:	af00      	add	r7, sp, #0
 8005e92:	4603      	mov	r3, r0
 8005e94:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005e96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	db0b      	blt.n	8005eb6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005e9e:	79fb      	ldrb	r3, [r7, #7]
 8005ea0:	f003 021f 	and.w	r2, r3, #31
 8005ea4:	4907      	ldr	r1, [pc, #28]	@ (8005ec4 <__NVIC_EnableIRQ+0x38>)
 8005ea6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005eaa:	095b      	lsrs	r3, r3, #5
 8005eac:	2001      	movs	r0, #1
 8005eae:	fa00 f202 	lsl.w	r2, r0, r2
 8005eb2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8005eb6:	bf00      	nop
 8005eb8:	370c      	adds	r7, #12
 8005eba:	46bd      	mov	sp, r7
 8005ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ec0:	4770      	bx	lr
 8005ec2:	bf00      	nop
 8005ec4:	e000e100 	.word	0xe000e100

08005ec8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005ec8:	b480      	push	{r7}
 8005eca:	b083      	sub	sp, #12
 8005ecc:	af00      	add	r7, sp, #0
 8005ece:	4603      	mov	r3, r0
 8005ed0:	6039      	str	r1, [r7, #0]
 8005ed2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005ed4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	db0a      	blt.n	8005ef2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005edc:	683b      	ldr	r3, [r7, #0]
 8005ede:	b2da      	uxtb	r2, r3
 8005ee0:	490c      	ldr	r1, [pc, #48]	@ (8005f14 <__NVIC_SetPriority+0x4c>)
 8005ee2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005ee6:	0112      	lsls	r2, r2, #4
 8005ee8:	b2d2      	uxtb	r2, r2
 8005eea:	440b      	add	r3, r1
 8005eec:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005ef0:	e00a      	b.n	8005f08 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005ef2:	683b      	ldr	r3, [r7, #0]
 8005ef4:	b2da      	uxtb	r2, r3
 8005ef6:	4908      	ldr	r1, [pc, #32]	@ (8005f18 <__NVIC_SetPriority+0x50>)
 8005ef8:	79fb      	ldrb	r3, [r7, #7]
 8005efa:	f003 030f 	and.w	r3, r3, #15
 8005efe:	3b04      	subs	r3, #4
 8005f00:	0112      	lsls	r2, r2, #4
 8005f02:	b2d2      	uxtb	r2, r2
 8005f04:	440b      	add	r3, r1
 8005f06:	761a      	strb	r2, [r3, #24]
}
 8005f08:	bf00      	nop
 8005f0a:	370c      	adds	r7, #12
 8005f0c:	46bd      	mov	sp, r7
 8005f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f12:	4770      	bx	lr
 8005f14:	e000e100 	.word	0xe000e100
 8005f18:	e000ed00 	.word	0xe000ed00

08005f1c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005f1c:	b480      	push	{r7}
 8005f1e:	b089      	sub	sp, #36	@ 0x24
 8005f20:	af00      	add	r7, sp, #0
 8005f22:	60f8      	str	r0, [r7, #12]
 8005f24:	60b9      	str	r1, [r7, #8]
 8005f26:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	f003 0307 	and.w	r3, r3, #7
 8005f2e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005f30:	69fb      	ldr	r3, [r7, #28]
 8005f32:	f1c3 0307 	rsb	r3, r3, #7
 8005f36:	2b04      	cmp	r3, #4
 8005f38:	bf28      	it	cs
 8005f3a:	2304      	movcs	r3, #4
 8005f3c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005f3e:	69fb      	ldr	r3, [r7, #28]
 8005f40:	3304      	adds	r3, #4
 8005f42:	2b06      	cmp	r3, #6
 8005f44:	d902      	bls.n	8005f4c <NVIC_EncodePriority+0x30>
 8005f46:	69fb      	ldr	r3, [r7, #28]
 8005f48:	3b03      	subs	r3, #3
 8005f4a:	e000      	b.n	8005f4e <NVIC_EncodePriority+0x32>
 8005f4c:	2300      	movs	r3, #0
 8005f4e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005f50:	f04f 32ff 	mov.w	r2, #4294967295
 8005f54:	69bb      	ldr	r3, [r7, #24]
 8005f56:	fa02 f303 	lsl.w	r3, r2, r3
 8005f5a:	43da      	mvns	r2, r3
 8005f5c:	68bb      	ldr	r3, [r7, #8]
 8005f5e:	401a      	ands	r2, r3
 8005f60:	697b      	ldr	r3, [r7, #20]
 8005f62:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005f64:	f04f 31ff 	mov.w	r1, #4294967295
 8005f68:	697b      	ldr	r3, [r7, #20]
 8005f6a:	fa01 f303 	lsl.w	r3, r1, r3
 8005f6e:	43d9      	mvns	r1, r3
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005f74:	4313      	orrs	r3, r2
         );
}
 8005f76:	4618      	mov	r0, r3
 8005f78:	3724      	adds	r7, #36	@ 0x24
 8005f7a:	46bd      	mov	sp, r7
 8005f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f80:	4770      	bx	lr
	...

08005f84 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005f84:	b580      	push	{r7, lr}
 8005f86:	b082      	sub	sp, #8
 8005f88:	af00      	add	r7, sp, #0
 8005f8a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	3b01      	subs	r3, #1
 8005f90:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005f94:	d301      	bcc.n	8005f9a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005f96:	2301      	movs	r3, #1
 8005f98:	e00f      	b.n	8005fba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005f9a:	4a0a      	ldr	r2, [pc, #40]	@ (8005fc4 <SysTick_Config+0x40>)
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	3b01      	subs	r3, #1
 8005fa0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005fa2:	210f      	movs	r1, #15
 8005fa4:	f04f 30ff 	mov.w	r0, #4294967295
 8005fa8:	f7ff ff8e 	bl	8005ec8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005fac:	4b05      	ldr	r3, [pc, #20]	@ (8005fc4 <SysTick_Config+0x40>)
 8005fae:	2200      	movs	r2, #0
 8005fb0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005fb2:	4b04      	ldr	r3, [pc, #16]	@ (8005fc4 <SysTick_Config+0x40>)
 8005fb4:	2207      	movs	r2, #7
 8005fb6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005fb8:	2300      	movs	r3, #0
}
 8005fba:	4618      	mov	r0, r3
 8005fbc:	3708      	adds	r7, #8
 8005fbe:	46bd      	mov	sp, r7
 8005fc0:	bd80      	pop	{r7, pc}
 8005fc2:	bf00      	nop
 8005fc4:	e000e010 	.word	0xe000e010

08005fc8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005fc8:	b580      	push	{r7, lr}
 8005fca:	b082      	sub	sp, #8
 8005fcc:	af00      	add	r7, sp, #0
 8005fce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005fd0:	6878      	ldr	r0, [r7, #4]
 8005fd2:	f7ff ff29 	bl	8005e28 <__NVIC_SetPriorityGrouping>
}
 8005fd6:	bf00      	nop
 8005fd8:	3708      	adds	r7, #8
 8005fda:	46bd      	mov	sp, r7
 8005fdc:	bd80      	pop	{r7, pc}

08005fde <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005fde:	b580      	push	{r7, lr}
 8005fe0:	b086      	sub	sp, #24
 8005fe2:	af00      	add	r7, sp, #0
 8005fe4:	4603      	mov	r3, r0
 8005fe6:	60b9      	str	r1, [r7, #8]
 8005fe8:	607a      	str	r2, [r7, #4]
 8005fea:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8005fec:	2300      	movs	r3, #0
 8005fee:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005ff0:	f7ff ff3e 	bl	8005e70 <__NVIC_GetPriorityGrouping>
 8005ff4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005ff6:	687a      	ldr	r2, [r7, #4]
 8005ff8:	68b9      	ldr	r1, [r7, #8]
 8005ffa:	6978      	ldr	r0, [r7, #20]
 8005ffc:	f7ff ff8e 	bl	8005f1c <NVIC_EncodePriority>
 8006000:	4602      	mov	r2, r0
 8006002:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006006:	4611      	mov	r1, r2
 8006008:	4618      	mov	r0, r3
 800600a:	f7ff ff5d 	bl	8005ec8 <__NVIC_SetPriority>
}
 800600e:	bf00      	nop
 8006010:	3718      	adds	r7, #24
 8006012:	46bd      	mov	sp, r7
 8006014:	bd80      	pop	{r7, pc}

08006016 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006016:	b580      	push	{r7, lr}
 8006018:	b082      	sub	sp, #8
 800601a:	af00      	add	r7, sp, #0
 800601c:	4603      	mov	r3, r0
 800601e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006020:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006024:	4618      	mov	r0, r3
 8006026:	f7ff ff31 	bl	8005e8c <__NVIC_EnableIRQ>
}
 800602a:	bf00      	nop
 800602c:	3708      	adds	r7, #8
 800602e:	46bd      	mov	sp, r7
 8006030:	bd80      	pop	{r7, pc}

08006032 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8006032:	b580      	push	{r7, lr}
 8006034:	b082      	sub	sp, #8
 8006036:	af00      	add	r7, sp, #0
 8006038:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800603a:	6878      	ldr	r0, [r7, #4]
 800603c:	f7ff ffa2 	bl	8005f84 <SysTick_Config>
 8006040:	4603      	mov	r3, r0
}
 8006042:	4618      	mov	r0, r3
 8006044:	3708      	adds	r7, #8
 8006046:	46bd      	mov	sp, r7
 8006048:	bd80      	pop	{r7, pc}

0800604a <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 800604a:	b580      	push	{r7, lr}
 800604c:	b082      	sub	sp, #8
 800604e:	af00      	add	r7, sp, #0
 8006050:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	2b00      	cmp	r3, #0
 8006056:	d101      	bne.n	800605c <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8006058:	2301      	movs	r3, #1
 800605a:	e00e      	b.n	800607a <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	795b      	ldrb	r3, [r3, #5]
 8006060:	b2db      	uxtb	r3, r3
 8006062:	2b00      	cmp	r3, #0
 8006064:	d105      	bne.n	8006072 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	2200      	movs	r2, #0
 800606a:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 800606c:	6878      	ldr	r0, [r7, #4]
 800606e:	f7fb f981 	bl	8001374 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	2201      	movs	r2, #1
 8006076:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8006078:	2300      	movs	r3, #0
}
 800607a:	4618      	mov	r0, r3
 800607c:	3708      	adds	r7, #8
 800607e:	46bd      	mov	sp, r7
 8006080:	bd80      	pop	{r7, pc}
	...

08006084 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8006084:	b580      	push	{r7, lr}
 8006086:	b086      	sub	sp, #24
 8006088:	af00      	add	r7, sp, #0
 800608a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800608c:	2300      	movs	r3, #0
 800608e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8006090:	f7ff fa44 	bl	800551c <HAL_GetTick>
 8006094:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	2b00      	cmp	r3, #0
 800609a:	d101      	bne.n	80060a0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800609c:	2301      	movs	r3, #1
 800609e:	e099      	b.n	80061d4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	2202      	movs	r2, #2
 80060a4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	2200      	movs	r2, #0
 80060ac:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	681a      	ldr	r2, [r3, #0]
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	f022 0201 	bic.w	r2, r2, #1
 80060be:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80060c0:	e00f      	b.n	80060e2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80060c2:	f7ff fa2b 	bl	800551c <HAL_GetTick>
 80060c6:	4602      	mov	r2, r0
 80060c8:	693b      	ldr	r3, [r7, #16]
 80060ca:	1ad3      	subs	r3, r2, r3
 80060cc:	2b05      	cmp	r3, #5
 80060ce:	d908      	bls.n	80060e2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	2220      	movs	r2, #32
 80060d4:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	2203      	movs	r2, #3
 80060da:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 80060de:	2303      	movs	r3, #3
 80060e0:	e078      	b.n	80061d4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	f003 0301 	and.w	r3, r3, #1
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d1e8      	bne.n	80060c2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80060f8:	697a      	ldr	r2, [r7, #20]
 80060fa:	4b38      	ldr	r3, [pc, #224]	@ (80061dc <HAL_DMA_Init+0x158>)
 80060fc:	4013      	ands	r3, r2
 80060fe:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	685a      	ldr	r2, [r3, #4]
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	689b      	ldr	r3, [r3, #8]
 8006108:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800610e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	691b      	ldr	r3, [r3, #16]
 8006114:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800611a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	699b      	ldr	r3, [r3, #24]
 8006120:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006126:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	6a1b      	ldr	r3, [r3, #32]
 800612c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800612e:	697a      	ldr	r2, [r7, #20]
 8006130:	4313      	orrs	r3, r2
 8006132:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006138:	2b04      	cmp	r3, #4
 800613a:	d107      	bne.n	800614c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006144:	4313      	orrs	r3, r2
 8006146:	697a      	ldr	r2, [r7, #20]
 8006148:	4313      	orrs	r3, r2
 800614a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	697a      	ldr	r2, [r7, #20]
 8006152:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	695b      	ldr	r3, [r3, #20]
 800615a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800615c:	697b      	ldr	r3, [r7, #20]
 800615e:	f023 0307 	bic.w	r3, r3, #7
 8006162:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006168:	697a      	ldr	r2, [r7, #20]
 800616a:	4313      	orrs	r3, r2
 800616c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006172:	2b04      	cmp	r3, #4
 8006174:	d117      	bne.n	80061a6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800617a:	697a      	ldr	r2, [r7, #20]
 800617c:	4313      	orrs	r3, r2
 800617e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006184:	2b00      	cmp	r3, #0
 8006186:	d00e      	beq.n	80061a6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8006188:	6878      	ldr	r0, [r7, #4]
 800618a:	f000 fb01 	bl	8006790 <DMA_CheckFifoParam>
 800618e:	4603      	mov	r3, r0
 8006190:	2b00      	cmp	r3, #0
 8006192:	d008      	beq.n	80061a6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	2240      	movs	r2, #64	@ 0x40
 8006198:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	2201      	movs	r2, #1
 800619e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 80061a2:	2301      	movs	r3, #1
 80061a4:	e016      	b.n	80061d4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	697a      	ldr	r2, [r7, #20]
 80061ac:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80061ae:	6878      	ldr	r0, [r7, #4]
 80061b0:	f000 fab8 	bl	8006724 <DMA_CalcBaseAndBitshift>
 80061b4:	4603      	mov	r3, r0
 80061b6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80061bc:	223f      	movs	r2, #63	@ 0x3f
 80061be:	409a      	lsls	r2, r3
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	2200      	movs	r2, #0
 80061c8:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	2201      	movs	r2, #1
 80061ce:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80061d2:	2300      	movs	r3, #0
}
 80061d4:	4618      	mov	r0, r3
 80061d6:	3718      	adds	r7, #24
 80061d8:	46bd      	mov	sp, r7
 80061da:	bd80      	pop	{r7, pc}
 80061dc:	f010803f 	.word	0xf010803f

080061e0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80061e0:	b580      	push	{r7, lr}
 80061e2:	b086      	sub	sp, #24
 80061e4:	af00      	add	r7, sp, #0
 80061e6:	60f8      	str	r0, [r7, #12]
 80061e8:	60b9      	str	r1, [r7, #8]
 80061ea:	607a      	str	r2, [r7, #4]
 80061ec:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80061ee:	2300      	movs	r3, #0
 80061f0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80061f6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80061fe:	2b01      	cmp	r3, #1
 8006200:	d101      	bne.n	8006206 <HAL_DMA_Start_IT+0x26>
 8006202:	2302      	movs	r3, #2
 8006204:	e040      	b.n	8006288 <HAL_DMA_Start_IT+0xa8>
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	2201      	movs	r2, #1
 800620a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8006214:	b2db      	uxtb	r3, r3
 8006216:	2b01      	cmp	r3, #1
 8006218:	d12f      	bne.n	800627a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	2202      	movs	r2, #2
 800621e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	2200      	movs	r2, #0
 8006226:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8006228:	683b      	ldr	r3, [r7, #0]
 800622a:	687a      	ldr	r2, [r7, #4]
 800622c:	68b9      	ldr	r1, [r7, #8]
 800622e:	68f8      	ldr	r0, [r7, #12]
 8006230:	f000 fa4a 	bl	80066c8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006238:	223f      	movs	r2, #63	@ 0x3f
 800623a:	409a      	lsls	r2, r3
 800623c:	693b      	ldr	r3, [r7, #16]
 800623e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	681a      	ldr	r2, [r3, #0]
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	f042 0216 	orr.w	r2, r2, #22
 800624e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006254:	2b00      	cmp	r3, #0
 8006256:	d007      	beq.n	8006268 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	681a      	ldr	r2, [r3, #0]
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	f042 0208 	orr.w	r2, r2, #8
 8006266:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	681a      	ldr	r2, [r3, #0]
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	f042 0201 	orr.w	r2, r2, #1
 8006276:	601a      	str	r2, [r3, #0]
 8006278:	e005      	b.n	8006286 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	2200      	movs	r2, #0
 800627e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8006282:	2302      	movs	r3, #2
 8006284:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8006286:	7dfb      	ldrb	r3, [r7, #23]
}
 8006288:	4618      	mov	r0, r3
 800628a:	3718      	adds	r7, #24
 800628c:	46bd      	mov	sp, r7
 800628e:	bd80      	pop	{r7, pc}

08006290 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8006290:	b580      	push	{r7, lr}
 8006292:	b084      	sub	sp, #16
 8006294:	af00      	add	r7, sp, #0
 8006296:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800629c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800629e:	f7ff f93d 	bl	800551c <HAL_GetTick>
 80062a2:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80062aa:	b2db      	uxtb	r3, r3
 80062ac:	2b02      	cmp	r3, #2
 80062ae:	d008      	beq.n	80062c2 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	2280      	movs	r2, #128	@ 0x80
 80062b4:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	2200      	movs	r2, #0
 80062ba:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 80062be:	2301      	movs	r3, #1
 80062c0:	e052      	b.n	8006368 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	681a      	ldr	r2, [r3, #0]
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	f022 0216 	bic.w	r2, r2, #22
 80062d0:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	695a      	ldr	r2, [r3, #20]
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80062e0:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d103      	bne.n	80062f2 <HAL_DMA_Abort+0x62>
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d007      	beq.n	8006302 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	681a      	ldr	r2, [r3, #0]
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	f022 0208 	bic.w	r2, r2, #8
 8006300:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	681a      	ldr	r2, [r3, #0]
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	f022 0201 	bic.w	r2, r2, #1
 8006310:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006312:	e013      	b.n	800633c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8006314:	f7ff f902 	bl	800551c <HAL_GetTick>
 8006318:	4602      	mov	r2, r0
 800631a:	68bb      	ldr	r3, [r7, #8]
 800631c:	1ad3      	subs	r3, r2, r3
 800631e:	2b05      	cmp	r3, #5
 8006320:	d90c      	bls.n	800633c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	2220      	movs	r2, #32
 8006326:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	2203      	movs	r2, #3
 800632c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	2200      	movs	r2, #0
 8006334:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8006338:	2303      	movs	r3, #3
 800633a:	e015      	b.n	8006368 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	f003 0301 	and.w	r3, r3, #1
 8006346:	2b00      	cmp	r3, #0
 8006348:	d1e4      	bne.n	8006314 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800634e:	223f      	movs	r2, #63	@ 0x3f
 8006350:	409a      	lsls	r2, r3
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	2201      	movs	r2, #1
 800635a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	2200      	movs	r2, #0
 8006362:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8006366:	2300      	movs	r3, #0
}
 8006368:	4618      	mov	r0, r3
 800636a:	3710      	adds	r7, #16
 800636c:	46bd      	mov	sp, r7
 800636e:	bd80      	pop	{r7, pc}

08006370 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8006370:	b480      	push	{r7}
 8006372:	b083      	sub	sp, #12
 8006374:	af00      	add	r7, sp, #0
 8006376:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800637e:	b2db      	uxtb	r3, r3
 8006380:	2b02      	cmp	r3, #2
 8006382:	d004      	beq.n	800638e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	2280      	movs	r2, #128	@ 0x80
 8006388:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 800638a:	2301      	movs	r3, #1
 800638c:	e00c      	b.n	80063a8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	2205      	movs	r2, #5
 8006392:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	681a      	ldr	r2, [r3, #0]
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	f022 0201 	bic.w	r2, r2, #1
 80063a4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80063a6:	2300      	movs	r3, #0
}
 80063a8:	4618      	mov	r0, r3
 80063aa:	370c      	adds	r7, #12
 80063ac:	46bd      	mov	sp, r7
 80063ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063b2:	4770      	bx	lr

080063b4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80063b4:	b580      	push	{r7, lr}
 80063b6:	b086      	sub	sp, #24
 80063b8:	af00      	add	r7, sp, #0
 80063ba:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80063bc:	2300      	movs	r3, #0
 80063be:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80063c0:	4b8e      	ldr	r3, [pc, #568]	@ (80065fc <HAL_DMA_IRQHandler+0x248>)
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	4a8e      	ldr	r2, [pc, #568]	@ (8006600 <HAL_DMA_IRQHandler+0x24c>)
 80063c6:	fba2 2303 	umull	r2, r3, r2, r3
 80063ca:	0a9b      	lsrs	r3, r3, #10
 80063cc:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80063d2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80063d4:	693b      	ldr	r3, [r7, #16]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80063de:	2208      	movs	r2, #8
 80063e0:	409a      	lsls	r2, r3
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	4013      	ands	r3, r2
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d01a      	beq.n	8006420 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	f003 0304 	and.w	r3, r3, #4
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	d013      	beq.n	8006420 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	681a      	ldr	r2, [r3, #0]
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	f022 0204 	bic.w	r2, r2, #4
 8006406:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800640c:	2208      	movs	r2, #8
 800640e:	409a      	lsls	r2, r3
 8006410:	693b      	ldr	r3, [r7, #16]
 8006412:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006418:	f043 0201 	orr.w	r2, r3, #1
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006424:	2201      	movs	r2, #1
 8006426:	409a      	lsls	r2, r3
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	4013      	ands	r3, r2
 800642c:	2b00      	cmp	r3, #0
 800642e:	d012      	beq.n	8006456 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	695b      	ldr	r3, [r3, #20]
 8006436:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800643a:	2b00      	cmp	r3, #0
 800643c:	d00b      	beq.n	8006456 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006442:	2201      	movs	r2, #1
 8006444:	409a      	lsls	r2, r3
 8006446:	693b      	ldr	r3, [r7, #16]
 8006448:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800644e:	f043 0202 	orr.w	r2, r3, #2
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800645a:	2204      	movs	r2, #4
 800645c:	409a      	lsls	r2, r3
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	4013      	ands	r3, r2
 8006462:	2b00      	cmp	r3, #0
 8006464:	d012      	beq.n	800648c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	f003 0302 	and.w	r3, r3, #2
 8006470:	2b00      	cmp	r3, #0
 8006472:	d00b      	beq.n	800648c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006478:	2204      	movs	r2, #4
 800647a:	409a      	lsls	r2, r3
 800647c:	693b      	ldr	r3, [r7, #16]
 800647e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006484:	f043 0204 	orr.w	r2, r3, #4
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006490:	2210      	movs	r2, #16
 8006492:	409a      	lsls	r2, r3
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	4013      	ands	r3, r2
 8006498:	2b00      	cmp	r3, #0
 800649a:	d043      	beq.n	8006524 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	f003 0308 	and.w	r3, r3, #8
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d03c      	beq.n	8006524 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80064ae:	2210      	movs	r2, #16
 80064b0:	409a      	lsls	r2, r3
 80064b2:	693b      	ldr	r3, [r7, #16]
 80064b4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d018      	beq.n	80064f6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d108      	bne.n	80064e4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d024      	beq.n	8006524 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80064de:	6878      	ldr	r0, [r7, #4]
 80064e0:	4798      	blx	r3
 80064e2:	e01f      	b.n	8006524 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d01b      	beq.n	8006524 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80064f0:	6878      	ldr	r0, [r7, #4]
 80064f2:	4798      	blx	r3
 80064f4:	e016      	b.n	8006524 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006500:	2b00      	cmp	r3, #0
 8006502:	d107      	bne.n	8006514 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	681a      	ldr	r2, [r3, #0]
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	f022 0208 	bic.w	r2, r2, #8
 8006512:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006518:	2b00      	cmp	r3, #0
 800651a:	d003      	beq.n	8006524 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006520:	6878      	ldr	r0, [r7, #4]
 8006522:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006528:	2220      	movs	r2, #32
 800652a:	409a      	lsls	r2, r3
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	4013      	ands	r3, r2
 8006530:	2b00      	cmp	r3, #0
 8006532:	f000 808f 	beq.w	8006654 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	f003 0310 	and.w	r3, r3, #16
 8006540:	2b00      	cmp	r3, #0
 8006542:	f000 8087 	beq.w	8006654 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800654a:	2220      	movs	r2, #32
 800654c:	409a      	lsls	r2, r3
 800654e:	693b      	ldr	r3, [r7, #16]
 8006550:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8006558:	b2db      	uxtb	r3, r3
 800655a:	2b05      	cmp	r3, #5
 800655c:	d136      	bne.n	80065cc <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	681a      	ldr	r2, [r3, #0]
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	f022 0216 	bic.w	r2, r2, #22
 800656c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	695a      	ldr	r2, [r3, #20]
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800657c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006582:	2b00      	cmp	r3, #0
 8006584:	d103      	bne.n	800658e <HAL_DMA_IRQHandler+0x1da>
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800658a:	2b00      	cmp	r3, #0
 800658c:	d007      	beq.n	800659e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	681a      	ldr	r2, [r3, #0]
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	f022 0208 	bic.w	r2, r2, #8
 800659c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80065a2:	223f      	movs	r2, #63	@ 0x3f
 80065a4:	409a      	lsls	r2, r3
 80065a6:	693b      	ldr	r3, [r7, #16]
 80065a8:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	2201      	movs	r2, #1
 80065ae:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	2200      	movs	r2, #0
 80065b6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d07e      	beq.n	80066c0 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80065c6:	6878      	ldr	r0, [r7, #4]
 80065c8:	4798      	blx	r3
        }
        return;
 80065ca:	e079      	b.n	80066c0 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d01d      	beq.n	8006616 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	d10d      	bne.n	8006604 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d031      	beq.n	8006654 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80065f4:	6878      	ldr	r0, [r7, #4]
 80065f6:	4798      	blx	r3
 80065f8:	e02c      	b.n	8006654 <HAL_DMA_IRQHandler+0x2a0>
 80065fa:	bf00      	nop
 80065fc:	2000d114 	.word	0x2000d114
 8006600:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006608:	2b00      	cmp	r3, #0
 800660a:	d023      	beq.n	8006654 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006610:	6878      	ldr	r0, [r7, #4]
 8006612:	4798      	blx	r3
 8006614:	e01e      	b.n	8006654 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006620:	2b00      	cmp	r3, #0
 8006622:	d10f      	bne.n	8006644 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	681a      	ldr	r2, [r3, #0]
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	f022 0210 	bic.w	r2, r2, #16
 8006632:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	2201      	movs	r2, #1
 8006638:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	2200      	movs	r2, #0
 8006640:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006648:	2b00      	cmp	r3, #0
 800664a:	d003      	beq.n	8006654 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006650:	6878      	ldr	r0, [r7, #4]
 8006652:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006658:	2b00      	cmp	r3, #0
 800665a:	d032      	beq.n	80066c2 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006660:	f003 0301 	and.w	r3, r3, #1
 8006664:	2b00      	cmp	r3, #0
 8006666:	d022      	beq.n	80066ae <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	2205      	movs	r2, #5
 800666c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	681a      	ldr	r2, [r3, #0]
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	f022 0201 	bic.w	r2, r2, #1
 800667e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8006680:	68bb      	ldr	r3, [r7, #8]
 8006682:	3301      	adds	r3, #1
 8006684:	60bb      	str	r3, [r7, #8]
 8006686:	697a      	ldr	r2, [r7, #20]
 8006688:	429a      	cmp	r2, r3
 800668a:	d307      	bcc.n	800669c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	f003 0301 	and.w	r3, r3, #1
 8006696:	2b00      	cmp	r3, #0
 8006698:	d1f2      	bne.n	8006680 <HAL_DMA_IRQHandler+0x2cc>
 800669a:	e000      	b.n	800669e <HAL_DMA_IRQHandler+0x2ea>
          break;
 800669c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	2201      	movs	r2, #1
 80066a2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	2200      	movs	r2, #0
 80066aa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d005      	beq.n	80066c2 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80066ba:	6878      	ldr	r0, [r7, #4]
 80066bc:	4798      	blx	r3
 80066be:	e000      	b.n	80066c2 <HAL_DMA_IRQHandler+0x30e>
        return;
 80066c0:	bf00      	nop
    }
  }
}
 80066c2:	3718      	adds	r7, #24
 80066c4:	46bd      	mov	sp, r7
 80066c6:	bd80      	pop	{r7, pc}

080066c8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80066c8:	b480      	push	{r7}
 80066ca:	b085      	sub	sp, #20
 80066cc:	af00      	add	r7, sp, #0
 80066ce:	60f8      	str	r0, [r7, #12]
 80066d0:	60b9      	str	r1, [r7, #8]
 80066d2:	607a      	str	r2, [r7, #4]
 80066d4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	681a      	ldr	r2, [r3, #0]
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80066e4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	683a      	ldr	r2, [r7, #0]
 80066ec:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	689b      	ldr	r3, [r3, #8]
 80066f2:	2b40      	cmp	r3, #64	@ 0x40
 80066f4:	d108      	bne.n	8006708 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	687a      	ldr	r2, [r7, #4]
 80066fc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	68ba      	ldr	r2, [r7, #8]
 8006704:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8006706:	e007      	b.n	8006718 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	68ba      	ldr	r2, [r7, #8]
 800670e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	687a      	ldr	r2, [r7, #4]
 8006716:	60da      	str	r2, [r3, #12]
}
 8006718:	bf00      	nop
 800671a:	3714      	adds	r7, #20
 800671c:	46bd      	mov	sp, r7
 800671e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006722:	4770      	bx	lr

08006724 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8006724:	b480      	push	{r7}
 8006726:	b085      	sub	sp, #20
 8006728:	af00      	add	r7, sp, #0
 800672a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	b2db      	uxtb	r3, r3
 8006732:	3b10      	subs	r3, #16
 8006734:	4a14      	ldr	r2, [pc, #80]	@ (8006788 <DMA_CalcBaseAndBitshift+0x64>)
 8006736:	fba2 2303 	umull	r2, r3, r2, r3
 800673a:	091b      	lsrs	r3, r3, #4
 800673c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800673e:	4a13      	ldr	r2, [pc, #76]	@ (800678c <DMA_CalcBaseAndBitshift+0x68>)
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	4413      	add	r3, r2
 8006744:	781b      	ldrb	r3, [r3, #0]
 8006746:	461a      	mov	r2, r3
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	2b03      	cmp	r3, #3
 8006750:	d909      	bls.n	8006766 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800675a:	f023 0303 	bic.w	r3, r3, #3
 800675e:	1d1a      	adds	r2, r3, #4
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	659a      	str	r2, [r3, #88]	@ 0x58
 8006764:	e007      	b.n	8006776 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800676e:	f023 0303 	bic.w	r3, r3, #3
 8006772:	687a      	ldr	r2, [r7, #4]
 8006774:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800677a:	4618      	mov	r0, r3
 800677c:	3714      	adds	r7, #20
 800677e:	46bd      	mov	sp, r7
 8006780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006784:	4770      	bx	lr
 8006786:	bf00      	nop
 8006788:	aaaaaaab 	.word	0xaaaaaaab
 800678c:	08010c50 	.word	0x08010c50

08006790 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8006790:	b480      	push	{r7}
 8006792:	b085      	sub	sp, #20
 8006794:	af00      	add	r7, sp, #0
 8006796:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006798:	2300      	movs	r3, #0
 800679a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80067a0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	699b      	ldr	r3, [r3, #24]
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d11f      	bne.n	80067ea <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80067aa:	68bb      	ldr	r3, [r7, #8]
 80067ac:	2b03      	cmp	r3, #3
 80067ae:	d856      	bhi.n	800685e <DMA_CheckFifoParam+0xce>
 80067b0:	a201      	add	r2, pc, #4	@ (adr r2, 80067b8 <DMA_CheckFifoParam+0x28>)
 80067b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067b6:	bf00      	nop
 80067b8:	080067c9 	.word	0x080067c9
 80067bc:	080067db 	.word	0x080067db
 80067c0:	080067c9 	.word	0x080067c9
 80067c4:	0800685f 	.word	0x0800685f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80067cc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	d046      	beq.n	8006862 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80067d4:	2301      	movs	r3, #1
 80067d6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80067d8:	e043      	b.n	8006862 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80067de:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80067e2:	d140      	bne.n	8006866 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80067e4:	2301      	movs	r3, #1
 80067e6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80067e8:	e03d      	b.n	8006866 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	699b      	ldr	r3, [r3, #24]
 80067ee:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80067f2:	d121      	bne.n	8006838 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80067f4:	68bb      	ldr	r3, [r7, #8]
 80067f6:	2b03      	cmp	r3, #3
 80067f8:	d837      	bhi.n	800686a <DMA_CheckFifoParam+0xda>
 80067fa:	a201      	add	r2, pc, #4	@ (adr r2, 8006800 <DMA_CheckFifoParam+0x70>)
 80067fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006800:	08006811 	.word	0x08006811
 8006804:	08006817 	.word	0x08006817
 8006808:	08006811 	.word	0x08006811
 800680c:	08006829 	.word	0x08006829
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8006810:	2301      	movs	r3, #1
 8006812:	73fb      	strb	r3, [r7, #15]
      break;
 8006814:	e030      	b.n	8006878 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800681a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800681e:	2b00      	cmp	r3, #0
 8006820:	d025      	beq.n	800686e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8006822:	2301      	movs	r3, #1
 8006824:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006826:	e022      	b.n	800686e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800682c:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8006830:	d11f      	bne.n	8006872 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8006832:	2301      	movs	r3, #1
 8006834:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8006836:	e01c      	b.n	8006872 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8006838:	68bb      	ldr	r3, [r7, #8]
 800683a:	2b02      	cmp	r3, #2
 800683c:	d903      	bls.n	8006846 <DMA_CheckFifoParam+0xb6>
 800683e:	68bb      	ldr	r3, [r7, #8]
 8006840:	2b03      	cmp	r3, #3
 8006842:	d003      	beq.n	800684c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8006844:	e018      	b.n	8006878 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8006846:	2301      	movs	r3, #1
 8006848:	73fb      	strb	r3, [r7, #15]
      break;
 800684a:	e015      	b.n	8006878 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006850:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006854:	2b00      	cmp	r3, #0
 8006856:	d00e      	beq.n	8006876 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8006858:	2301      	movs	r3, #1
 800685a:	73fb      	strb	r3, [r7, #15]
      break;
 800685c:	e00b      	b.n	8006876 <DMA_CheckFifoParam+0xe6>
      break;
 800685e:	bf00      	nop
 8006860:	e00a      	b.n	8006878 <DMA_CheckFifoParam+0xe8>
      break;
 8006862:	bf00      	nop
 8006864:	e008      	b.n	8006878 <DMA_CheckFifoParam+0xe8>
      break;
 8006866:	bf00      	nop
 8006868:	e006      	b.n	8006878 <DMA_CheckFifoParam+0xe8>
      break;
 800686a:	bf00      	nop
 800686c:	e004      	b.n	8006878 <DMA_CheckFifoParam+0xe8>
      break;
 800686e:	bf00      	nop
 8006870:	e002      	b.n	8006878 <DMA_CheckFifoParam+0xe8>
      break;   
 8006872:	bf00      	nop
 8006874:	e000      	b.n	8006878 <DMA_CheckFifoParam+0xe8>
      break;
 8006876:	bf00      	nop
    }
  } 
  
  return status; 
 8006878:	7bfb      	ldrb	r3, [r7, #15]
}
 800687a:	4618      	mov	r0, r3
 800687c:	3714      	adds	r7, #20
 800687e:	46bd      	mov	sp, r7
 8006880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006884:	4770      	bx	lr
 8006886:	bf00      	nop

08006888 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006888:	b480      	push	{r7}
 800688a:	b089      	sub	sp, #36	@ 0x24
 800688c:	af00      	add	r7, sp, #0
 800688e:	6078      	str	r0, [r7, #4]
 8006890:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8006892:	2300      	movs	r3, #0
 8006894:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8006896:	2300      	movs	r3, #0
 8006898:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800689a:	2300      	movs	r3, #0
 800689c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800689e:	2300      	movs	r3, #0
 80068a0:	61fb      	str	r3, [r7, #28]
 80068a2:	e159      	b.n	8006b58 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80068a4:	2201      	movs	r2, #1
 80068a6:	69fb      	ldr	r3, [r7, #28]
 80068a8:	fa02 f303 	lsl.w	r3, r2, r3
 80068ac:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80068ae:	683b      	ldr	r3, [r7, #0]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	697a      	ldr	r2, [r7, #20]
 80068b4:	4013      	ands	r3, r2
 80068b6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80068b8:	693a      	ldr	r2, [r7, #16]
 80068ba:	697b      	ldr	r3, [r7, #20]
 80068bc:	429a      	cmp	r2, r3
 80068be:	f040 8148 	bne.w	8006b52 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80068c2:	683b      	ldr	r3, [r7, #0]
 80068c4:	685b      	ldr	r3, [r3, #4]
 80068c6:	f003 0303 	and.w	r3, r3, #3
 80068ca:	2b01      	cmp	r3, #1
 80068cc:	d005      	beq.n	80068da <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80068ce:	683b      	ldr	r3, [r7, #0]
 80068d0:	685b      	ldr	r3, [r3, #4]
 80068d2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80068d6:	2b02      	cmp	r3, #2
 80068d8:	d130      	bne.n	800693c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	689b      	ldr	r3, [r3, #8]
 80068de:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80068e0:	69fb      	ldr	r3, [r7, #28]
 80068e2:	005b      	lsls	r3, r3, #1
 80068e4:	2203      	movs	r2, #3
 80068e6:	fa02 f303 	lsl.w	r3, r2, r3
 80068ea:	43db      	mvns	r3, r3
 80068ec:	69ba      	ldr	r2, [r7, #24]
 80068ee:	4013      	ands	r3, r2
 80068f0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80068f2:	683b      	ldr	r3, [r7, #0]
 80068f4:	68da      	ldr	r2, [r3, #12]
 80068f6:	69fb      	ldr	r3, [r7, #28]
 80068f8:	005b      	lsls	r3, r3, #1
 80068fa:	fa02 f303 	lsl.w	r3, r2, r3
 80068fe:	69ba      	ldr	r2, [r7, #24]
 8006900:	4313      	orrs	r3, r2
 8006902:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	69ba      	ldr	r2, [r7, #24]
 8006908:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	685b      	ldr	r3, [r3, #4]
 800690e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8006910:	2201      	movs	r2, #1
 8006912:	69fb      	ldr	r3, [r7, #28]
 8006914:	fa02 f303 	lsl.w	r3, r2, r3
 8006918:	43db      	mvns	r3, r3
 800691a:	69ba      	ldr	r2, [r7, #24]
 800691c:	4013      	ands	r3, r2
 800691e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006920:	683b      	ldr	r3, [r7, #0]
 8006922:	685b      	ldr	r3, [r3, #4]
 8006924:	091b      	lsrs	r3, r3, #4
 8006926:	f003 0201 	and.w	r2, r3, #1
 800692a:	69fb      	ldr	r3, [r7, #28]
 800692c:	fa02 f303 	lsl.w	r3, r2, r3
 8006930:	69ba      	ldr	r2, [r7, #24]
 8006932:	4313      	orrs	r3, r2
 8006934:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	69ba      	ldr	r2, [r7, #24]
 800693a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800693c:	683b      	ldr	r3, [r7, #0]
 800693e:	685b      	ldr	r3, [r3, #4]
 8006940:	f003 0303 	and.w	r3, r3, #3
 8006944:	2b03      	cmp	r3, #3
 8006946:	d017      	beq.n	8006978 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	68db      	ldr	r3, [r3, #12]
 800694c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800694e:	69fb      	ldr	r3, [r7, #28]
 8006950:	005b      	lsls	r3, r3, #1
 8006952:	2203      	movs	r2, #3
 8006954:	fa02 f303 	lsl.w	r3, r2, r3
 8006958:	43db      	mvns	r3, r3
 800695a:	69ba      	ldr	r2, [r7, #24]
 800695c:	4013      	ands	r3, r2
 800695e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006960:	683b      	ldr	r3, [r7, #0]
 8006962:	689a      	ldr	r2, [r3, #8]
 8006964:	69fb      	ldr	r3, [r7, #28]
 8006966:	005b      	lsls	r3, r3, #1
 8006968:	fa02 f303 	lsl.w	r3, r2, r3
 800696c:	69ba      	ldr	r2, [r7, #24]
 800696e:	4313      	orrs	r3, r2
 8006970:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	69ba      	ldr	r2, [r7, #24]
 8006976:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006978:	683b      	ldr	r3, [r7, #0]
 800697a:	685b      	ldr	r3, [r3, #4]
 800697c:	f003 0303 	and.w	r3, r3, #3
 8006980:	2b02      	cmp	r3, #2
 8006982:	d123      	bne.n	80069cc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006984:	69fb      	ldr	r3, [r7, #28]
 8006986:	08da      	lsrs	r2, r3, #3
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	3208      	adds	r2, #8
 800698c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006990:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8006992:	69fb      	ldr	r3, [r7, #28]
 8006994:	f003 0307 	and.w	r3, r3, #7
 8006998:	009b      	lsls	r3, r3, #2
 800699a:	220f      	movs	r2, #15
 800699c:	fa02 f303 	lsl.w	r3, r2, r3
 80069a0:	43db      	mvns	r3, r3
 80069a2:	69ba      	ldr	r2, [r7, #24]
 80069a4:	4013      	ands	r3, r2
 80069a6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80069a8:	683b      	ldr	r3, [r7, #0]
 80069aa:	691a      	ldr	r2, [r3, #16]
 80069ac:	69fb      	ldr	r3, [r7, #28]
 80069ae:	f003 0307 	and.w	r3, r3, #7
 80069b2:	009b      	lsls	r3, r3, #2
 80069b4:	fa02 f303 	lsl.w	r3, r2, r3
 80069b8:	69ba      	ldr	r2, [r7, #24]
 80069ba:	4313      	orrs	r3, r2
 80069bc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80069be:	69fb      	ldr	r3, [r7, #28]
 80069c0:	08da      	lsrs	r2, r3, #3
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	3208      	adds	r2, #8
 80069c6:	69b9      	ldr	r1, [r7, #24]
 80069c8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80069d2:	69fb      	ldr	r3, [r7, #28]
 80069d4:	005b      	lsls	r3, r3, #1
 80069d6:	2203      	movs	r2, #3
 80069d8:	fa02 f303 	lsl.w	r3, r2, r3
 80069dc:	43db      	mvns	r3, r3
 80069de:	69ba      	ldr	r2, [r7, #24]
 80069e0:	4013      	ands	r3, r2
 80069e2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80069e4:	683b      	ldr	r3, [r7, #0]
 80069e6:	685b      	ldr	r3, [r3, #4]
 80069e8:	f003 0203 	and.w	r2, r3, #3
 80069ec:	69fb      	ldr	r3, [r7, #28]
 80069ee:	005b      	lsls	r3, r3, #1
 80069f0:	fa02 f303 	lsl.w	r3, r2, r3
 80069f4:	69ba      	ldr	r2, [r7, #24]
 80069f6:	4313      	orrs	r3, r2
 80069f8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	69ba      	ldr	r2, [r7, #24]
 80069fe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8006a00:	683b      	ldr	r3, [r7, #0]
 8006a02:	685b      	ldr	r3, [r3, #4]
 8006a04:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	f000 80a2 	beq.w	8006b52 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006a0e:	2300      	movs	r3, #0
 8006a10:	60fb      	str	r3, [r7, #12]
 8006a12:	4b57      	ldr	r3, [pc, #348]	@ (8006b70 <HAL_GPIO_Init+0x2e8>)
 8006a14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006a16:	4a56      	ldr	r2, [pc, #344]	@ (8006b70 <HAL_GPIO_Init+0x2e8>)
 8006a18:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8006a1c:	6453      	str	r3, [r2, #68]	@ 0x44
 8006a1e:	4b54      	ldr	r3, [pc, #336]	@ (8006b70 <HAL_GPIO_Init+0x2e8>)
 8006a20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006a22:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006a26:	60fb      	str	r3, [r7, #12]
 8006a28:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8006a2a:	4a52      	ldr	r2, [pc, #328]	@ (8006b74 <HAL_GPIO_Init+0x2ec>)
 8006a2c:	69fb      	ldr	r3, [r7, #28]
 8006a2e:	089b      	lsrs	r3, r3, #2
 8006a30:	3302      	adds	r3, #2
 8006a32:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006a36:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8006a38:	69fb      	ldr	r3, [r7, #28]
 8006a3a:	f003 0303 	and.w	r3, r3, #3
 8006a3e:	009b      	lsls	r3, r3, #2
 8006a40:	220f      	movs	r2, #15
 8006a42:	fa02 f303 	lsl.w	r3, r2, r3
 8006a46:	43db      	mvns	r3, r3
 8006a48:	69ba      	ldr	r2, [r7, #24]
 8006a4a:	4013      	ands	r3, r2
 8006a4c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	4a49      	ldr	r2, [pc, #292]	@ (8006b78 <HAL_GPIO_Init+0x2f0>)
 8006a52:	4293      	cmp	r3, r2
 8006a54:	d019      	beq.n	8006a8a <HAL_GPIO_Init+0x202>
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	4a48      	ldr	r2, [pc, #288]	@ (8006b7c <HAL_GPIO_Init+0x2f4>)
 8006a5a:	4293      	cmp	r3, r2
 8006a5c:	d013      	beq.n	8006a86 <HAL_GPIO_Init+0x1fe>
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	4a47      	ldr	r2, [pc, #284]	@ (8006b80 <HAL_GPIO_Init+0x2f8>)
 8006a62:	4293      	cmp	r3, r2
 8006a64:	d00d      	beq.n	8006a82 <HAL_GPIO_Init+0x1fa>
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	4a46      	ldr	r2, [pc, #280]	@ (8006b84 <HAL_GPIO_Init+0x2fc>)
 8006a6a:	4293      	cmp	r3, r2
 8006a6c:	d007      	beq.n	8006a7e <HAL_GPIO_Init+0x1f6>
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	4a45      	ldr	r2, [pc, #276]	@ (8006b88 <HAL_GPIO_Init+0x300>)
 8006a72:	4293      	cmp	r3, r2
 8006a74:	d101      	bne.n	8006a7a <HAL_GPIO_Init+0x1f2>
 8006a76:	2304      	movs	r3, #4
 8006a78:	e008      	b.n	8006a8c <HAL_GPIO_Init+0x204>
 8006a7a:	2307      	movs	r3, #7
 8006a7c:	e006      	b.n	8006a8c <HAL_GPIO_Init+0x204>
 8006a7e:	2303      	movs	r3, #3
 8006a80:	e004      	b.n	8006a8c <HAL_GPIO_Init+0x204>
 8006a82:	2302      	movs	r3, #2
 8006a84:	e002      	b.n	8006a8c <HAL_GPIO_Init+0x204>
 8006a86:	2301      	movs	r3, #1
 8006a88:	e000      	b.n	8006a8c <HAL_GPIO_Init+0x204>
 8006a8a:	2300      	movs	r3, #0
 8006a8c:	69fa      	ldr	r2, [r7, #28]
 8006a8e:	f002 0203 	and.w	r2, r2, #3
 8006a92:	0092      	lsls	r2, r2, #2
 8006a94:	4093      	lsls	r3, r2
 8006a96:	69ba      	ldr	r2, [r7, #24]
 8006a98:	4313      	orrs	r3, r2
 8006a9a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006a9c:	4935      	ldr	r1, [pc, #212]	@ (8006b74 <HAL_GPIO_Init+0x2ec>)
 8006a9e:	69fb      	ldr	r3, [r7, #28]
 8006aa0:	089b      	lsrs	r3, r3, #2
 8006aa2:	3302      	adds	r3, #2
 8006aa4:	69ba      	ldr	r2, [r7, #24]
 8006aa6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8006aaa:	4b38      	ldr	r3, [pc, #224]	@ (8006b8c <HAL_GPIO_Init+0x304>)
 8006aac:	689b      	ldr	r3, [r3, #8]
 8006aae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006ab0:	693b      	ldr	r3, [r7, #16]
 8006ab2:	43db      	mvns	r3, r3
 8006ab4:	69ba      	ldr	r2, [r7, #24]
 8006ab6:	4013      	ands	r3, r2
 8006ab8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8006aba:	683b      	ldr	r3, [r7, #0]
 8006abc:	685b      	ldr	r3, [r3, #4]
 8006abe:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d003      	beq.n	8006ace <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8006ac6:	69ba      	ldr	r2, [r7, #24]
 8006ac8:	693b      	ldr	r3, [r7, #16]
 8006aca:	4313      	orrs	r3, r2
 8006acc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8006ace:	4a2f      	ldr	r2, [pc, #188]	@ (8006b8c <HAL_GPIO_Init+0x304>)
 8006ad0:	69bb      	ldr	r3, [r7, #24]
 8006ad2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8006ad4:	4b2d      	ldr	r3, [pc, #180]	@ (8006b8c <HAL_GPIO_Init+0x304>)
 8006ad6:	68db      	ldr	r3, [r3, #12]
 8006ad8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006ada:	693b      	ldr	r3, [r7, #16]
 8006adc:	43db      	mvns	r3, r3
 8006ade:	69ba      	ldr	r2, [r7, #24]
 8006ae0:	4013      	ands	r3, r2
 8006ae2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8006ae4:	683b      	ldr	r3, [r7, #0]
 8006ae6:	685b      	ldr	r3, [r3, #4]
 8006ae8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	d003      	beq.n	8006af8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8006af0:	69ba      	ldr	r2, [r7, #24]
 8006af2:	693b      	ldr	r3, [r7, #16]
 8006af4:	4313      	orrs	r3, r2
 8006af6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8006af8:	4a24      	ldr	r2, [pc, #144]	@ (8006b8c <HAL_GPIO_Init+0x304>)
 8006afa:	69bb      	ldr	r3, [r7, #24]
 8006afc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8006afe:	4b23      	ldr	r3, [pc, #140]	@ (8006b8c <HAL_GPIO_Init+0x304>)
 8006b00:	685b      	ldr	r3, [r3, #4]
 8006b02:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006b04:	693b      	ldr	r3, [r7, #16]
 8006b06:	43db      	mvns	r3, r3
 8006b08:	69ba      	ldr	r2, [r7, #24]
 8006b0a:	4013      	ands	r3, r2
 8006b0c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8006b0e:	683b      	ldr	r3, [r7, #0]
 8006b10:	685b      	ldr	r3, [r3, #4]
 8006b12:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d003      	beq.n	8006b22 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8006b1a:	69ba      	ldr	r2, [r7, #24]
 8006b1c:	693b      	ldr	r3, [r7, #16]
 8006b1e:	4313      	orrs	r3, r2
 8006b20:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8006b22:	4a1a      	ldr	r2, [pc, #104]	@ (8006b8c <HAL_GPIO_Init+0x304>)
 8006b24:	69bb      	ldr	r3, [r7, #24]
 8006b26:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8006b28:	4b18      	ldr	r3, [pc, #96]	@ (8006b8c <HAL_GPIO_Init+0x304>)
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006b2e:	693b      	ldr	r3, [r7, #16]
 8006b30:	43db      	mvns	r3, r3
 8006b32:	69ba      	ldr	r2, [r7, #24]
 8006b34:	4013      	ands	r3, r2
 8006b36:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8006b38:	683b      	ldr	r3, [r7, #0]
 8006b3a:	685b      	ldr	r3, [r3, #4]
 8006b3c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	d003      	beq.n	8006b4c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8006b44:	69ba      	ldr	r2, [r7, #24]
 8006b46:	693b      	ldr	r3, [r7, #16]
 8006b48:	4313      	orrs	r3, r2
 8006b4a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8006b4c:	4a0f      	ldr	r2, [pc, #60]	@ (8006b8c <HAL_GPIO_Init+0x304>)
 8006b4e:	69bb      	ldr	r3, [r7, #24]
 8006b50:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006b52:	69fb      	ldr	r3, [r7, #28]
 8006b54:	3301      	adds	r3, #1
 8006b56:	61fb      	str	r3, [r7, #28]
 8006b58:	69fb      	ldr	r3, [r7, #28]
 8006b5a:	2b0f      	cmp	r3, #15
 8006b5c:	f67f aea2 	bls.w	80068a4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8006b60:	bf00      	nop
 8006b62:	bf00      	nop
 8006b64:	3724      	adds	r7, #36	@ 0x24
 8006b66:	46bd      	mov	sp, r7
 8006b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b6c:	4770      	bx	lr
 8006b6e:	bf00      	nop
 8006b70:	40023800 	.word	0x40023800
 8006b74:	40013800 	.word	0x40013800
 8006b78:	40020000 	.word	0x40020000
 8006b7c:	40020400 	.word	0x40020400
 8006b80:	40020800 	.word	0x40020800
 8006b84:	40020c00 	.word	0x40020c00
 8006b88:	40021000 	.word	0x40021000
 8006b8c:	40013c00 	.word	0x40013c00

08006b90 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8006b90:	b480      	push	{r7}
 8006b92:	b085      	sub	sp, #20
 8006b94:	af00      	add	r7, sp, #0
 8006b96:	6078      	str	r0, [r7, #4]
 8006b98:	460b      	mov	r3, r1
 8006b9a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	691a      	ldr	r2, [r3, #16]
 8006ba0:	887b      	ldrh	r3, [r7, #2]
 8006ba2:	4013      	ands	r3, r2
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	d002      	beq.n	8006bae <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8006ba8:	2301      	movs	r3, #1
 8006baa:	73fb      	strb	r3, [r7, #15]
 8006bac:	e001      	b.n	8006bb2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8006bae:	2300      	movs	r3, #0
 8006bb0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8006bb2:	7bfb      	ldrb	r3, [r7, #15]
}
 8006bb4:	4618      	mov	r0, r3
 8006bb6:	3714      	adds	r7, #20
 8006bb8:	46bd      	mov	sp, r7
 8006bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bbe:	4770      	bx	lr

08006bc0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006bc0:	b480      	push	{r7}
 8006bc2:	b083      	sub	sp, #12
 8006bc4:	af00      	add	r7, sp, #0
 8006bc6:	6078      	str	r0, [r7, #4]
 8006bc8:	460b      	mov	r3, r1
 8006bca:	807b      	strh	r3, [r7, #2]
 8006bcc:	4613      	mov	r3, r2
 8006bce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8006bd0:	787b      	ldrb	r3, [r7, #1]
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d003      	beq.n	8006bde <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006bd6:	887a      	ldrh	r2, [r7, #2]
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8006bdc:	e003      	b.n	8006be6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8006bde:	887b      	ldrh	r3, [r7, #2]
 8006be0:	041a      	lsls	r2, r3, #16
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	619a      	str	r2, [r3, #24]
}
 8006be6:	bf00      	nop
 8006be8:	370c      	adds	r7, #12
 8006bea:	46bd      	mov	sp, r7
 8006bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bf0:	4770      	bx	lr
	...

08006bf4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8006bf4:	b580      	push	{r7, lr}
 8006bf6:	b082      	sub	sp, #8
 8006bf8:	af00      	add	r7, sp, #0
 8006bfa:	4603      	mov	r3, r0
 8006bfc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8006bfe:	4b08      	ldr	r3, [pc, #32]	@ (8006c20 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006c00:	695a      	ldr	r2, [r3, #20]
 8006c02:	88fb      	ldrh	r3, [r7, #6]
 8006c04:	4013      	ands	r3, r2
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d006      	beq.n	8006c18 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8006c0a:	4a05      	ldr	r2, [pc, #20]	@ (8006c20 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006c0c:	88fb      	ldrh	r3, [r7, #6]
 8006c0e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8006c10:	88fb      	ldrh	r3, [r7, #6]
 8006c12:	4618      	mov	r0, r3
 8006c14:	f000 f806 	bl	8006c24 <HAL_GPIO_EXTI_Callback>
  }
}
 8006c18:	bf00      	nop
 8006c1a:	3708      	adds	r7, #8
 8006c1c:	46bd      	mov	sp, r7
 8006c1e:	bd80      	pop	{r7, pc}
 8006c20:	40013c00 	.word	0x40013c00

08006c24 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8006c24:	b480      	push	{r7}
 8006c26:	b083      	sub	sp, #12
 8006c28:	af00      	add	r7, sp, #0
 8006c2a:	4603      	mov	r3, r0
 8006c2c:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8006c2e:	bf00      	nop
 8006c30:	370c      	adds	r7, #12
 8006c32:	46bd      	mov	sp, r7
 8006c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c38:	4770      	bx	lr
	...

08006c3c <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8006c3c:	b580      	push	{r7, lr}
 8006c3e:	b088      	sub	sp, #32
 8006c40:	af00      	add	r7, sp, #0
 8006c42:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d101      	bne.n	8006c4e <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8006c4a:	2301      	movs	r3, #1
 8006c4c:	e128      	b.n	8006ea0 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006c54:	b2db      	uxtb	r3, r3
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d109      	bne.n	8006c6e <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	2200      	movs	r2, #0
 8006c5e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	4a90      	ldr	r2, [pc, #576]	@ (8006ea8 <HAL_I2S_Init+0x26c>)
 8006c66:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8006c68:	6878      	ldr	r0, [r7, #4]
 8006c6a:	f7fa fcd7 	bl	800161c <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	2202      	movs	r2, #2
 8006c72:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	69db      	ldr	r3, [r3, #28]
 8006c7c:	687a      	ldr	r2, [r7, #4]
 8006c7e:	6812      	ldr	r2, [r2, #0]
 8006c80:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8006c84:	f023 030f 	bic.w	r3, r3, #15
 8006c88:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	2202      	movs	r2, #2
 8006c90:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	695b      	ldr	r3, [r3, #20]
 8006c96:	2b02      	cmp	r3, #2
 8006c98:	d060      	beq.n	8006d5c <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	68db      	ldr	r3, [r3, #12]
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	d102      	bne.n	8006ca8 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8006ca2:	2310      	movs	r3, #16
 8006ca4:	617b      	str	r3, [r7, #20]
 8006ca6:	e001      	b.n	8006cac <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8006ca8:	2320      	movs	r3, #32
 8006caa:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	689b      	ldr	r3, [r3, #8]
 8006cb0:	2b20      	cmp	r3, #32
 8006cb2:	d802      	bhi.n	8006cba <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8006cb4:	697b      	ldr	r3, [r7, #20]
 8006cb6:	005b      	lsls	r3, r3, #1
 8006cb8:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8006cba:	2001      	movs	r0, #1
 8006cbc:	f001 fb02 	bl	80082c4 <HAL_RCCEx_GetPeriphCLKFreq>
 8006cc0:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	691b      	ldr	r3, [r3, #16]
 8006cc6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006cca:	d125      	bne.n	8006d18 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	68db      	ldr	r3, [r3, #12]
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	d010      	beq.n	8006cf6 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8006cd4:	697b      	ldr	r3, [r7, #20]
 8006cd6:	009b      	lsls	r3, r3, #2
 8006cd8:	68fa      	ldr	r2, [r7, #12]
 8006cda:	fbb2 f2f3 	udiv	r2, r2, r3
 8006cde:	4613      	mov	r3, r2
 8006ce0:	009b      	lsls	r3, r3, #2
 8006ce2:	4413      	add	r3, r2
 8006ce4:	005b      	lsls	r3, r3, #1
 8006ce6:	461a      	mov	r2, r3
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	695b      	ldr	r3, [r3, #20]
 8006cec:	fbb2 f3f3 	udiv	r3, r2, r3
 8006cf0:	3305      	adds	r3, #5
 8006cf2:	613b      	str	r3, [r7, #16]
 8006cf4:	e01f      	b.n	8006d36 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8006cf6:	697b      	ldr	r3, [r7, #20]
 8006cf8:	00db      	lsls	r3, r3, #3
 8006cfa:	68fa      	ldr	r2, [r7, #12]
 8006cfc:	fbb2 f2f3 	udiv	r2, r2, r3
 8006d00:	4613      	mov	r3, r2
 8006d02:	009b      	lsls	r3, r3, #2
 8006d04:	4413      	add	r3, r2
 8006d06:	005b      	lsls	r3, r3, #1
 8006d08:	461a      	mov	r2, r3
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	695b      	ldr	r3, [r3, #20]
 8006d0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d12:	3305      	adds	r3, #5
 8006d14:	613b      	str	r3, [r7, #16]
 8006d16:	e00e      	b.n	8006d36 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8006d18:	68fa      	ldr	r2, [r7, #12]
 8006d1a:	697b      	ldr	r3, [r7, #20]
 8006d1c:	fbb2 f2f3 	udiv	r2, r2, r3
 8006d20:	4613      	mov	r3, r2
 8006d22:	009b      	lsls	r3, r3, #2
 8006d24:	4413      	add	r3, r2
 8006d26:	005b      	lsls	r3, r3, #1
 8006d28:	461a      	mov	r2, r3
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	695b      	ldr	r3, [r3, #20]
 8006d2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d32:	3305      	adds	r3, #5
 8006d34:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8006d36:	693b      	ldr	r3, [r7, #16]
 8006d38:	4a5c      	ldr	r2, [pc, #368]	@ (8006eac <HAL_I2S_Init+0x270>)
 8006d3a:	fba2 2303 	umull	r2, r3, r2, r3
 8006d3e:	08db      	lsrs	r3, r3, #3
 8006d40:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8006d42:	693b      	ldr	r3, [r7, #16]
 8006d44:	f003 0301 	and.w	r3, r3, #1
 8006d48:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8006d4a:	693a      	ldr	r2, [r7, #16]
 8006d4c:	69bb      	ldr	r3, [r7, #24]
 8006d4e:	1ad3      	subs	r3, r2, r3
 8006d50:	085b      	lsrs	r3, r3, #1
 8006d52:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8006d54:	69bb      	ldr	r3, [r7, #24]
 8006d56:	021b      	lsls	r3, r3, #8
 8006d58:	61bb      	str	r3, [r7, #24]
 8006d5a:	e003      	b.n	8006d64 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8006d5c:	2302      	movs	r3, #2
 8006d5e:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8006d60:	2300      	movs	r3, #0
 8006d62:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8006d64:	69fb      	ldr	r3, [r7, #28]
 8006d66:	2b01      	cmp	r3, #1
 8006d68:	d902      	bls.n	8006d70 <HAL_I2S_Init+0x134>
 8006d6a:	69fb      	ldr	r3, [r7, #28]
 8006d6c:	2bff      	cmp	r3, #255	@ 0xff
 8006d6e:	d907      	bls.n	8006d80 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006d74:	f043 0210 	orr.w	r2, r3, #16
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	645a      	str	r2, [r3, #68]	@ 0x44
    return  HAL_ERROR;
 8006d7c:	2301      	movs	r3, #1
 8006d7e:	e08f      	b.n	8006ea0 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	691a      	ldr	r2, [r3, #16]
 8006d84:	69bb      	ldr	r3, [r7, #24]
 8006d86:	ea42 0103 	orr.w	r1, r2, r3
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	69fa      	ldr	r2, [r7, #28]
 8006d90:	430a      	orrs	r2, r1
 8006d92:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	69db      	ldr	r3, [r3, #28]
 8006d9a:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8006d9e:	f023 030f 	bic.w	r3, r3, #15
 8006da2:	687a      	ldr	r2, [r7, #4]
 8006da4:	6851      	ldr	r1, [r2, #4]
 8006da6:	687a      	ldr	r2, [r7, #4]
 8006da8:	6892      	ldr	r2, [r2, #8]
 8006daa:	4311      	orrs	r1, r2
 8006dac:	687a      	ldr	r2, [r7, #4]
 8006dae:	68d2      	ldr	r2, [r2, #12]
 8006db0:	4311      	orrs	r1, r2
 8006db2:	687a      	ldr	r2, [r7, #4]
 8006db4:	6992      	ldr	r2, [r2, #24]
 8006db6:	430a      	orrs	r2, r1
 8006db8:	431a      	orrs	r2, r3
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006dc2:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	6a1b      	ldr	r3, [r3, #32]
 8006dc8:	2b01      	cmp	r3, #1
 8006dca:	d161      	bne.n	8006e90 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	4a38      	ldr	r2, [pc, #224]	@ (8006eb0 <HAL_I2S_Init+0x274>)
 8006dd0:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	4a37      	ldr	r2, [pc, #220]	@ (8006eb4 <HAL_I2S_Init+0x278>)
 8006dd8:	4293      	cmp	r3, r2
 8006dda:	d101      	bne.n	8006de0 <HAL_I2S_Init+0x1a4>
 8006ddc:	4b36      	ldr	r3, [pc, #216]	@ (8006eb8 <HAL_I2S_Init+0x27c>)
 8006dde:	e001      	b.n	8006de4 <HAL_I2S_Init+0x1a8>
 8006de0:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006de4:	69db      	ldr	r3, [r3, #28]
 8006de6:	687a      	ldr	r2, [r7, #4]
 8006de8:	6812      	ldr	r2, [r2, #0]
 8006dea:	4932      	ldr	r1, [pc, #200]	@ (8006eb4 <HAL_I2S_Init+0x278>)
 8006dec:	428a      	cmp	r2, r1
 8006dee:	d101      	bne.n	8006df4 <HAL_I2S_Init+0x1b8>
 8006df0:	4a31      	ldr	r2, [pc, #196]	@ (8006eb8 <HAL_I2S_Init+0x27c>)
 8006df2:	e001      	b.n	8006df8 <HAL_I2S_Init+0x1bc>
 8006df4:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 8006df8:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8006dfc:	f023 030f 	bic.w	r3, r3, #15
 8006e00:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	4a2b      	ldr	r2, [pc, #172]	@ (8006eb4 <HAL_I2S_Init+0x278>)
 8006e08:	4293      	cmp	r3, r2
 8006e0a:	d101      	bne.n	8006e10 <HAL_I2S_Init+0x1d4>
 8006e0c:	4b2a      	ldr	r3, [pc, #168]	@ (8006eb8 <HAL_I2S_Init+0x27c>)
 8006e0e:	e001      	b.n	8006e14 <HAL_I2S_Init+0x1d8>
 8006e10:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006e14:	2202      	movs	r2, #2
 8006e16:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	4a25      	ldr	r2, [pc, #148]	@ (8006eb4 <HAL_I2S_Init+0x278>)
 8006e1e:	4293      	cmp	r3, r2
 8006e20:	d101      	bne.n	8006e26 <HAL_I2S_Init+0x1ea>
 8006e22:	4b25      	ldr	r3, [pc, #148]	@ (8006eb8 <HAL_I2S_Init+0x27c>)
 8006e24:	e001      	b.n	8006e2a <HAL_I2S_Init+0x1ee>
 8006e26:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006e2a:	69db      	ldr	r3, [r3, #28]
 8006e2c:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	685b      	ldr	r3, [r3, #4]
 8006e32:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006e36:	d003      	beq.n	8006e40 <HAL_I2S_Init+0x204>
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	685b      	ldr	r3, [r3, #4]
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	d103      	bne.n	8006e48 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8006e40:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8006e44:	613b      	str	r3, [r7, #16]
 8006e46:	e001      	b.n	8006e4c <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8006e48:	2300      	movs	r3, #0
 8006e4a:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8006e4c:	693b      	ldr	r3, [r7, #16]
 8006e4e:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	689b      	ldr	r3, [r3, #8]
 8006e54:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8006e56:	4313      	orrs	r3, r2
 8006e58:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	68db      	ldr	r3, [r3, #12]
 8006e5e:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8006e60:	4313      	orrs	r3, r2
 8006e62:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	699b      	ldr	r3, [r3, #24]
 8006e68:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8006e6a:	4313      	orrs	r3, r2
 8006e6c:	b29a      	uxth	r2, r3
 8006e6e:	897b      	ldrh	r3, [r7, #10]
 8006e70:	4313      	orrs	r3, r2
 8006e72:	b29b      	uxth	r3, r3
 8006e74:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8006e78:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	4a0d      	ldr	r2, [pc, #52]	@ (8006eb4 <HAL_I2S_Init+0x278>)
 8006e80:	4293      	cmp	r3, r2
 8006e82:	d101      	bne.n	8006e88 <HAL_I2S_Init+0x24c>
 8006e84:	4b0c      	ldr	r3, [pc, #48]	@ (8006eb8 <HAL_I2S_Init+0x27c>)
 8006e86:	e001      	b.n	8006e8c <HAL_I2S_Init+0x250>
 8006e88:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006e8c:	897a      	ldrh	r2, [r7, #10]
 8006e8e:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	2200      	movs	r2, #0
 8006e94:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	2201      	movs	r2, #1
 8006e9a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  return HAL_OK;
 8006e9e:	2300      	movs	r3, #0
}
 8006ea0:	4618      	mov	r0, r3
 8006ea2:	3720      	adds	r7, #32
 8006ea4:	46bd      	mov	sp, r7
 8006ea6:	bd80      	pop	{r7, pc}
 8006ea8:	08007179 	.word	0x08007179
 8006eac:	cccccccd 	.word	0xcccccccd
 8006eb0:	08007301 	.word	0x08007301
 8006eb4:	40003800 	.word	0x40003800
 8006eb8:	40003400 	.word	0x40003400

08006ebc <HAL_I2S_Transmit>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Transmit(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006ebc:	b580      	push	{r7, lr}
 8006ebe:	b086      	sub	sp, #24
 8006ec0:	af00      	add	r7, sp, #0
 8006ec2:	60f8      	str	r0, [r7, #12]
 8006ec4:	60b9      	str	r1, [r7, #8]
 8006ec6:	603b      	str	r3, [r7, #0]
 8006ec8:	4613      	mov	r3, r2
 8006eca:	80fb      	strh	r3, [r7, #6]
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 8006ecc:	68bb      	ldr	r3, [r7, #8]
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d002      	beq.n	8006ed8 <HAL_I2S_Transmit+0x1c>
 8006ed2:	88fb      	ldrh	r3, [r7, #6]
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	d101      	bne.n	8006edc <HAL_I2S_Transmit+0x20>
  {
    return  HAL_ERROR;
 8006ed8:	2301      	movs	r3, #1
 8006eda:	e0d8      	b.n	800708e <HAL_I2S_Transmit+0x1d2>
  }

  if (hi2s->State != HAL_I2S_STATE_READY)
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006ee2:	b2db      	uxtb	r3, r3
 8006ee4:	2b01      	cmp	r3, #1
 8006ee6:	d001      	beq.n	8006eec <HAL_I2S_Transmit+0x30>
  {
    return HAL_BUSY;
 8006ee8:	2302      	movs	r3, #2
 8006eea:	e0d0      	b.n	800708e <HAL_I2S_Transmit+0x1d2>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006ef2:	b2db      	uxtb	r3, r3
 8006ef4:	2b01      	cmp	r3, #1
 8006ef6:	d101      	bne.n	8006efc <HAL_I2S_Transmit+0x40>
 8006ef8:	2302      	movs	r3, #2
 8006efa:	e0c8      	b.n	800708e <HAL_I2S_Transmit+0x1d2>
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	2201      	movs	r2, #1
 8006f00:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_TX;
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	2203      	movs	r2, #3
 8006f08:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	2200      	movs	r2, #0
 8006f10:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2s->pTxBuffPtr = pData;
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	68ba      	ldr	r2, [r7, #8]
 8006f16:	625a      	str	r2, [r3, #36]	@ 0x24

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	69db      	ldr	r3, [r3, #28]
 8006f1e:	f003 0307 	and.w	r3, r3, #7
 8006f22:	617b      	str	r3, [r7, #20]

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 8006f24:	697b      	ldr	r3, [r7, #20]
 8006f26:	2b03      	cmp	r3, #3
 8006f28:	d002      	beq.n	8006f30 <HAL_I2S_Transmit+0x74>
 8006f2a:	697b      	ldr	r3, [r7, #20]
 8006f2c:	2b05      	cmp	r3, #5
 8006f2e:	d10a      	bne.n	8006f46 <HAL_I2S_Transmit+0x8a>
  {
    hi2s->TxXferSize = (Size << 1U);
 8006f30:	88fb      	ldrh	r3, [r7, #6]
 8006f32:	005b      	lsls	r3, r3, #1
 8006f34:	b29a      	uxth	r2, r3
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2s->TxXferCount = (Size << 1U);
 8006f3a:	88fb      	ldrh	r3, [r7, #6]
 8006f3c:	005b      	lsls	r3, r3, #1
 8006f3e:	b29a      	uxth	r2, r3
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8006f44:	e005      	b.n	8006f52 <HAL_I2S_Transmit+0x96>
  }
  else
  {
    hi2s->TxXferSize = Size;
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	88fa      	ldrh	r2, [r7, #6]
 8006f4a:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2s->TxXferCount = Size;
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	88fa      	ldrh	r2, [r7, #6]
 8006f50:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }

  tmpreg_cfgr = hi2s->Instance->I2SCFGR;
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	69db      	ldr	r3, [r3, #28]
 8006f58:	617b      	str	r3, [r7, #20]

  /* Check if the I2S is already enabled */
  if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SE) != SPI_I2SCFGR_I2SE)
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	69db      	ldr	r3, [r3, #28]
 8006f60:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006f64:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006f68:	d007      	beq.n	8006f7a <HAL_I2S_Transmit+0xbe>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	69da      	ldr	r2, [r3, #28]
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8006f78:	61da      	str	r2, [r3, #28]
  }

  /* Wait until TXE flag is set */
  if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_TXE, SET, Timeout) != HAL_OK)
 8006f7a:	683b      	ldr	r3, [r7, #0]
 8006f7c:	2201      	movs	r2, #1
 8006f7e:	2102      	movs	r1, #2
 8006f80:	68f8      	ldr	r0, [r7, #12]
 8006f82:	f000 f983 	bl	800728c <I2S_WaitFlagStateUntilTimeout>
 8006f86:	4603      	mov	r3, r0
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	d04e      	beq.n	800702a <HAL_I2S_Transmit+0x16e>
  {
    /* Set the error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006f90:	f043 0201 	orr.w	r2, r3, #1
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2s->State = HAL_I2S_STATE_READY;
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	2201      	movs	r2, #1
 8006f9c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    __HAL_UNLOCK(hi2s);
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	2200      	movs	r2, #0
 8006fa4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    return HAL_ERROR;
 8006fa8:	2301      	movs	r3, #1
 8006faa:	e070      	b.n	800708e <HAL_I2S_Transmit+0x1d2>
  }

  while (hi2s->TxXferCount > 0U)
  {
    hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006fb0:	881a      	ldrh	r2, [r3, #0]
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	60da      	str	r2, [r3, #12]
    hi2s->pTxBuffPtr++;
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006fbc:	1c9a      	adds	r2, r3, #2
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2s->TxXferCount--;
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006fc6:	b29b      	uxth	r3, r3
 8006fc8:	3b01      	subs	r3, #1
 8006fca:	b29a      	uxth	r2, r3
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	855a      	strh	r2, [r3, #42]	@ 0x2a

    /* Wait until TXE flag is set */
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_TXE, SET, Timeout) != HAL_OK)
 8006fd0:	683b      	ldr	r3, [r7, #0]
 8006fd2:	2201      	movs	r2, #1
 8006fd4:	2102      	movs	r1, #2
 8006fd6:	68f8      	ldr	r0, [r7, #12]
 8006fd8:	f000 f958 	bl	800728c <I2S_WaitFlagStateUntilTimeout>
 8006fdc:	4603      	mov	r3, r0
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d00f      	beq.n	8007002 <HAL_I2S_Transmit+0x146>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006fe6:	f043 0201 	orr.w	r2, r3, #1
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	645a      	str	r2, [r3, #68]	@ 0x44
      hi2s->State = HAL_I2S_STATE_READY;
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	2201      	movs	r2, #1
 8006ff2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      __HAL_UNLOCK(hi2s);
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	2200      	movs	r2, #0
 8006ffa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8006ffe:	2301      	movs	r3, #1
 8007000:	e045      	b.n	800708e <HAL_I2S_Transmit+0x1d2>
    }

    /* Check if an underrun occurs */
    if (__HAL_I2S_GET_FLAG(hi2s, I2S_FLAG_UDR) == SET)
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	689b      	ldr	r3, [r3, #8]
 8007008:	f003 0308 	and.w	r3, r3, #8
 800700c:	2b08      	cmp	r3, #8
 800700e:	d10c      	bne.n	800702a <HAL_I2S_Transmit+0x16e>
    {
      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8007010:	2300      	movs	r3, #0
 8007012:	613b      	str	r3, [r7, #16]
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	689b      	ldr	r3, [r3, #8]
 800701a:	613b      	str	r3, [r7, #16]
 800701c:	693b      	ldr	r3, [r7, #16]

      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007022:	f043 0204 	orr.w	r2, r3, #4
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	645a      	str	r2, [r3, #68]	@ 0x44
  while (hi2s->TxXferCount > 0U)
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800702e:	b29b      	uxth	r3, r3
 8007030:	2b00      	cmp	r3, #0
 8007032:	d1bb      	bne.n	8006fac <HAL_I2S_Transmit+0xf0>
    }
  }

  /* Check if Slave mode is selected */
  if (((tmpreg_cfgr & SPI_I2SCFGR_I2SCFG) == I2S_MODE_SLAVE_TX)
 8007034:	697b      	ldr	r3, [r7, #20]
 8007036:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800703a:	2b00      	cmp	r3, #0
 800703c:	d005      	beq.n	800704a <HAL_I2S_Transmit+0x18e>
      || ((tmpreg_cfgr & SPI_I2SCFGR_I2SCFG) == I2S_MODE_SLAVE_RX))
 800703e:	697b      	ldr	r3, [r7, #20]
 8007040:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007044:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007048:	d118      	bne.n	800707c <HAL_I2S_Transmit+0x1c0>
  {
    /* Wait until Busy flag is reset */
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_BSY, RESET, Timeout) != HAL_OK)
 800704a:	683b      	ldr	r3, [r7, #0]
 800704c:	2200      	movs	r2, #0
 800704e:	2180      	movs	r1, #128	@ 0x80
 8007050:	68f8      	ldr	r0, [r7, #12]
 8007052:	f000 f91b 	bl	800728c <I2S_WaitFlagStateUntilTimeout>
 8007056:	4603      	mov	r3, r0
 8007058:	2b00      	cmp	r3, #0
 800705a:	d00f      	beq.n	800707c <HAL_I2S_Transmit+0x1c0>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007060:	f043 0201 	orr.w	r2, r3, #1
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	645a      	str	r2, [r3, #68]	@ 0x44
      hi2s->State = HAL_I2S_STATE_READY;
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	2201      	movs	r2, #1
 800706c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      __HAL_UNLOCK(hi2s);
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	2200      	movs	r2, #0
 8007074:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8007078:	2301      	movs	r3, #1
 800707a:	e008      	b.n	800708e <HAL_I2S_Transmit+0x1d2>
    }
  }

  hi2s->State = HAL_I2S_STATE_READY;
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	2201      	movs	r2, #1
 8007080:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  __HAL_UNLOCK(hi2s);
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	2200      	movs	r2, #0
 8007088:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  return HAL_OK;
 800708c:	2300      	movs	r3, #0
}
 800708e:	4618      	mov	r0, r3
 8007090:	3718      	adds	r7, #24
 8007092:	46bd      	mov	sp, r7
 8007094:	bd80      	pop	{r7, pc}

08007096 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8007096:	b480      	push	{r7}
 8007098:	b083      	sub	sp, #12
 800709a:	af00      	add	r7, sp, #0
 800709c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 800709e:	bf00      	nop
 80070a0:	370c      	adds	r7, #12
 80070a2:	46bd      	mov	sp, r7
 80070a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070a8:	4770      	bx	lr

080070aa <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 80070aa:	b480      	push	{r7}
 80070ac:	b083      	sub	sp, #12
 80070ae:	af00      	add	r7, sp, #0
 80070b0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 80070b2:	bf00      	nop
 80070b4:	370c      	adds	r7, #12
 80070b6:	46bd      	mov	sp, r7
 80070b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070bc:	4770      	bx	lr

080070be <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 80070be:	b580      	push	{r7, lr}
 80070c0:	b082      	sub	sp, #8
 80070c2:	af00      	add	r7, sp, #0
 80070c4:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80070ca:	881a      	ldrh	r2, [r3, #0]
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80070d6:	1c9a      	adds	r2, r3, #2
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	625a      	str	r2, [r3, #36]	@ 0x24
  hi2s->TxXferCount--;
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80070e0:	b29b      	uxth	r3, r3
 80070e2:	3b01      	subs	r3, #1
 80070e4:	b29a      	uxth	r2, r3
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80070ee:	b29b      	uxth	r3, r3
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	d10e      	bne.n	8007112 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	685a      	ldr	r2, [r3, #4]
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8007102:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	2201      	movs	r2, #1
 8007108:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 800710c:	6878      	ldr	r0, [r7, #4]
 800710e:	f7ff ffc2 	bl	8007096 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8007112:	bf00      	nop
 8007114:	3708      	adds	r7, #8
 8007116:	46bd      	mov	sp, r7
 8007118:	bd80      	pop	{r7, pc}

0800711a <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 800711a:	b580      	push	{r7, lr}
 800711c:	b082      	sub	sp, #8
 800711e:	af00      	add	r7, sp, #0
 8007120:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	68da      	ldr	r2, [r3, #12]
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800712c:	b292      	uxth	r2, r2
 800712e:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007134:	1c9a      	adds	r2, r3, #2
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2s->RxXferCount--;
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800713e:	b29b      	uxth	r3, r3
 8007140:	3b01      	subs	r3, #1
 8007142:	b29a      	uxth	r2, r3
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800714c:	b29b      	uxth	r3, r3
 800714e:	2b00      	cmp	r3, #0
 8007150:	d10e      	bne.n	8007170 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	685a      	ldr	r2, [r3, #4]
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8007160:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	2201      	movs	r2, #1
 8007166:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 800716a:	6878      	ldr	r0, [r7, #4]
 800716c:	f7fb f802 	bl	8002174 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8007170:	bf00      	nop
 8007172:	3708      	adds	r7, #8
 8007174:	46bd      	mov	sp, r7
 8007176:	bd80      	pop	{r7, pc}

08007178 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8007178:	b580      	push	{r7, lr}
 800717a:	b086      	sub	sp, #24
 800717c:	af00      	add	r7, sp, #0
 800717e:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	689b      	ldr	r3, [r3, #8]
 8007186:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800718e:	b2db      	uxtb	r3, r3
 8007190:	2b04      	cmp	r3, #4
 8007192:	d13a      	bne.n	800720a <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8007194:	697b      	ldr	r3, [r7, #20]
 8007196:	f003 0301 	and.w	r3, r3, #1
 800719a:	2b01      	cmp	r3, #1
 800719c:	d109      	bne.n	80071b2 <I2S_IRQHandler+0x3a>
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	685b      	ldr	r3, [r3, #4]
 80071a4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80071a8:	2b40      	cmp	r3, #64	@ 0x40
 80071aa:	d102      	bne.n	80071b2 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 80071ac:	6878      	ldr	r0, [r7, #4]
 80071ae:	f7ff ffb4 	bl	800711a <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80071b2:	697b      	ldr	r3, [r7, #20]
 80071b4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80071b8:	2b40      	cmp	r3, #64	@ 0x40
 80071ba:	d126      	bne.n	800720a <I2S_IRQHandler+0x92>
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	685b      	ldr	r3, [r3, #4]
 80071c2:	f003 0320 	and.w	r3, r3, #32
 80071c6:	2b20      	cmp	r3, #32
 80071c8:	d11f      	bne.n	800720a <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	685a      	ldr	r2, [r3, #4]
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80071d8:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80071da:	2300      	movs	r3, #0
 80071dc:	613b      	str	r3, [r7, #16]
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	68db      	ldr	r3, [r3, #12]
 80071e4:	613b      	str	r3, [r7, #16]
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	689b      	ldr	r3, [r3, #8]
 80071ec:	613b      	str	r3, [r7, #16]
 80071ee:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	2201      	movs	r2, #1
 80071f4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80071fc:	f043 0202 	orr.w	r2, r3, #2
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8007204:	6878      	ldr	r0, [r7, #4]
 8007206:	f7ff ff50 	bl	80070aa <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007210:	b2db      	uxtb	r3, r3
 8007212:	2b03      	cmp	r3, #3
 8007214:	d136      	bne.n	8007284 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8007216:	697b      	ldr	r3, [r7, #20]
 8007218:	f003 0302 	and.w	r3, r3, #2
 800721c:	2b02      	cmp	r3, #2
 800721e:	d109      	bne.n	8007234 <I2S_IRQHandler+0xbc>
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	685b      	ldr	r3, [r3, #4]
 8007226:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800722a:	2b80      	cmp	r3, #128	@ 0x80
 800722c:	d102      	bne.n	8007234 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 800722e:	6878      	ldr	r0, [r7, #4]
 8007230:	f7ff ff45 	bl	80070be <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8007234:	697b      	ldr	r3, [r7, #20]
 8007236:	f003 0308 	and.w	r3, r3, #8
 800723a:	2b08      	cmp	r3, #8
 800723c:	d122      	bne.n	8007284 <I2S_IRQHandler+0x10c>
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	685b      	ldr	r3, [r3, #4]
 8007244:	f003 0320 	and.w	r3, r3, #32
 8007248:	2b20      	cmp	r3, #32
 800724a:	d11b      	bne.n	8007284 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	685a      	ldr	r2, [r3, #4]
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 800725a:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 800725c:	2300      	movs	r3, #0
 800725e:	60fb      	str	r3, [r7, #12]
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	689b      	ldr	r3, [r3, #8]
 8007266:	60fb      	str	r3, [r7, #12]
 8007268:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	2201      	movs	r2, #1
 800726e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007276:	f043 0204 	orr.w	r2, r3, #4
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800727e:	6878      	ldr	r0, [r7, #4]
 8007280:	f7ff ff13 	bl	80070aa <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8007284:	bf00      	nop
 8007286:	3718      	adds	r7, #24
 8007288:	46bd      	mov	sp, r7
 800728a:	bd80      	pop	{r7, pc}

0800728c <I2S_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef I2S_WaitFlagStateUntilTimeout(I2S_HandleTypeDef *hi2s, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout)
{
 800728c:	b580      	push	{r7, lr}
 800728e:	b086      	sub	sp, #24
 8007290:	af00      	add	r7, sp, #0
 8007292:	60f8      	str	r0, [r7, #12]
 8007294:	60b9      	str	r1, [r7, #8]
 8007296:	603b      	str	r3, [r7, #0]
 8007298:	4613      	mov	r3, r2
 800729a:	71fb      	strb	r3, [r7, #7]
  uint32_t tickstart;

  /* Get tick */
  tickstart = HAL_GetTick();
 800729c:	f7fe f93e 	bl	800551c <HAL_GetTick>
 80072a0:	6178      	str	r0, [r7, #20]

  /* Wait until flag is set to status*/
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 80072a2:	e018      	b.n	80072d6 <I2S_WaitFlagStateUntilTimeout+0x4a>
  {
    if (Timeout != HAL_MAX_DELAY)
 80072a4:	683b      	ldr	r3, [r7, #0]
 80072a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80072aa:	d014      	beq.n	80072d6 <I2S_WaitFlagStateUntilTimeout+0x4a>
    {
      if (((HAL_GetTick() - tickstart) >= Timeout) || (Timeout == 0U))
 80072ac:	f7fe f936 	bl	800551c <HAL_GetTick>
 80072b0:	4602      	mov	r2, r0
 80072b2:	697b      	ldr	r3, [r7, #20]
 80072b4:	1ad3      	subs	r3, r2, r3
 80072b6:	683a      	ldr	r2, [r7, #0]
 80072b8:	429a      	cmp	r2, r3
 80072ba:	d902      	bls.n	80072c2 <I2S_WaitFlagStateUntilTimeout+0x36>
 80072bc:	683b      	ldr	r3, [r7, #0]
 80072be:	2b00      	cmp	r3, #0
 80072c0:	d109      	bne.n	80072d6 <I2S_WaitFlagStateUntilTimeout+0x4a>
      {
        /* Set the I2S State ready */
        hi2s->State = HAL_I2S_STATE_READY;
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	2201      	movs	r2, #1
 80072c6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2s);
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	2200      	movs	r2, #0
 80072ce:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_TIMEOUT;
 80072d2:	2303      	movs	r3, #3
 80072d4:	e00f      	b.n	80072f6 <I2S_WaitFlagStateUntilTimeout+0x6a>
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	689a      	ldr	r2, [r3, #8]
 80072dc:	68bb      	ldr	r3, [r7, #8]
 80072de:	4013      	ands	r3, r2
 80072e0:	68ba      	ldr	r2, [r7, #8]
 80072e2:	429a      	cmp	r2, r3
 80072e4:	bf0c      	ite	eq
 80072e6:	2301      	moveq	r3, #1
 80072e8:	2300      	movne	r3, #0
 80072ea:	b2db      	uxtb	r3, r3
 80072ec:	461a      	mov	r2, r3
 80072ee:	79fb      	ldrb	r3, [r7, #7]
 80072f0:	429a      	cmp	r2, r3
 80072f2:	d1d7      	bne.n	80072a4 <I2S_WaitFlagStateUntilTimeout+0x18>
      }
    }
  }
  return HAL_OK;
 80072f4:	2300      	movs	r3, #0
}
 80072f6:	4618      	mov	r0, r3
 80072f8:	3718      	adds	r7, #24
 80072fa:	46bd      	mov	sp, r7
 80072fc:	bd80      	pop	{r7, pc}
	...

08007300 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8007300:	b580      	push	{r7, lr}
 8007302:	b088      	sub	sp, #32
 8007304:	af00      	add	r7, sp, #0
 8007306:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	689b      	ldr	r3, [r3, #8]
 800730e:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	4a92      	ldr	r2, [pc, #584]	@ (8007560 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8007316:	4293      	cmp	r3, r2
 8007318:	d101      	bne.n	800731e <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 800731a:	4b92      	ldr	r3, [pc, #584]	@ (8007564 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800731c:	e001      	b.n	8007322 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 800731e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8007322:	689b      	ldr	r3, [r3, #8]
 8007324:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	685b      	ldr	r3, [r3, #4]
 800732c:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	4a8b      	ldr	r2, [pc, #556]	@ (8007560 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8007334:	4293      	cmp	r3, r2
 8007336:	d101      	bne.n	800733c <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8007338:	4b8a      	ldr	r3, [pc, #552]	@ (8007564 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800733a:	e001      	b.n	8007340 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 800733c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8007340:	685b      	ldr	r3, [r3, #4]
 8007342:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	685b      	ldr	r3, [r3, #4]
 8007348:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800734c:	d004      	beq.n	8007358 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	685b      	ldr	r3, [r3, #4]
 8007352:	2b00      	cmp	r3, #0
 8007354:	f040 8099 	bne.w	800748a <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8007358:	69fb      	ldr	r3, [r7, #28]
 800735a:	f003 0302 	and.w	r3, r3, #2
 800735e:	2b02      	cmp	r3, #2
 8007360:	d107      	bne.n	8007372 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8007362:	697b      	ldr	r3, [r7, #20]
 8007364:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007368:	2b00      	cmp	r3, #0
 800736a:	d002      	beq.n	8007372 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 800736c:	6878      	ldr	r0, [r7, #4]
 800736e:	f000 f925 	bl	80075bc <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8007372:	69bb      	ldr	r3, [r7, #24]
 8007374:	f003 0301 	and.w	r3, r3, #1
 8007378:	2b01      	cmp	r3, #1
 800737a:	d107      	bne.n	800738c <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 800737c:	693b      	ldr	r3, [r7, #16]
 800737e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007382:	2b00      	cmp	r3, #0
 8007384:	d002      	beq.n	800738c <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8007386:	6878      	ldr	r0, [r7, #4]
 8007388:	f000 f9c8 	bl	800771c <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 800738c:	69bb      	ldr	r3, [r7, #24]
 800738e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007392:	2b40      	cmp	r3, #64	@ 0x40
 8007394:	d13a      	bne.n	800740c <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8007396:	693b      	ldr	r3, [r7, #16]
 8007398:	f003 0320 	and.w	r3, r3, #32
 800739c:	2b00      	cmp	r3, #0
 800739e:	d035      	beq.n	800740c <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	4a6e      	ldr	r2, [pc, #440]	@ (8007560 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80073a6:	4293      	cmp	r3, r2
 80073a8:	d101      	bne.n	80073ae <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 80073aa:	4b6e      	ldr	r3, [pc, #440]	@ (8007564 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80073ac:	e001      	b.n	80073b2 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 80073ae:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80073b2:	685a      	ldr	r2, [r3, #4]
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	4969      	ldr	r1, [pc, #420]	@ (8007560 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80073ba:	428b      	cmp	r3, r1
 80073bc:	d101      	bne.n	80073c2 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 80073be:	4b69      	ldr	r3, [pc, #420]	@ (8007564 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80073c0:	e001      	b.n	80073c6 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 80073c2:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80073c6:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80073ca:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	685a      	ldr	r2, [r3, #4]
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80073da:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80073dc:	2300      	movs	r3, #0
 80073de:	60fb      	str	r3, [r7, #12]
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	68db      	ldr	r3, [r3, #12]
 80073e6:	60fb      	str	r3, [r7, #12]
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	689b      	ldr	r3, [r3, #8]
 80073ee:	60fb      	str	r3, [r7, #12]
 80073f0:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	2201      	movs	r2, #1
 80073f6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80073fe:	f043 0202 	orr.w	r2, r3, #2
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8007406:	6878      	ldr	r0, [r7, #4]
 8007408:	f7ff fe4f 	bl	80070aa <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800740c:	69fb      	ldr	r3, [r7, #28]
 800740e:	f003 0308 	and.w	r3, r3, #8
 8007412:	2b08      	cmp	r3, #8
 8007414:	f040 80c3 	bne.w	800759e <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8007418:	697b      	ldr	r3, [r7, #20]
 800741a:	f003 0320 	and.w	r3, r3, #32
 800741e:	2b00      	cmp	r3, #0
 8007420:	f000 80bd 	beq.w	800759e <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	685a      	ldr	r2, [r3, #4]
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8007432:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	4a49      	ldr	r2, [pc, #292]	@ (8007560 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800743a:	4293      	cmp	r3, r2
 800743c:	d101      	bne.n	8007442 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 800743e:	4b49      	ldr	r3, [pc, #292]	@ (8007564 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8007440:	e001      	b.n	8007446 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8007442:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8007446:	685a      	ldr	r2, [r3, #4]
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	4944      	ldr	r1, [pc, #272]	@ (8007560 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800744e:	428b      	cmp	r3, r1
 8007450:	d101      	bne.n	8007456 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8007452:	4b44      	ldr	r3, [pc, #272]	@ (8007564 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8007454:	e001      	b.n	800745a <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8007456:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800745a:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800745e:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8007460:	2300      	movs	r3, #0
 8007462:	60bb      	str	r3, [r7, #8]
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	689b      	ldr	r3, [r3, #8]
 800746a:	60bb      	str	r3, [r7, #8]
 800746c:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	2201      	movs	r2, #1
 8007472:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800747a:	f043 0204 	orr.w	r2, r3, #4
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8007482:	6878      	ldr	r0, [r7, #4]
 8007484:	f7ff fe11 	bl	80070aa <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8007488:	e089      	b.n	800759e <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 800748a:	69bb      	ldr	r3, [r7, #24]
 800748c:	f003 0302 	and.w	r3, r3, #2
 8007490:	2b02      	cmp	r3, #2
 8007492:	d107      	bne.n	80074a4 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8007494:	693b      	ldr	r3, [r7, #16]
 8007496:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800749a:	2b00      	cmp	r3, #0
 800749c:	d002      	beq.n	80074a4 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 800749e:	6878      	ldr	r0, [r7, #4]
 80074a0:	f000 f8be 	bl	8007620 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 80074a4:	69fb      	ldr	r3, [r7, #28]
 80074a6:	f003 0301 	and.w	r3, r3, #1
 80074aa:	2b01      	cmp	r3, #1
 80074ac:	d107      	bne.n	80074be <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 80074ae:	697b      	ldr	r3, [r7, #20]
 80074b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	d002      	beq.n	80074be <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 80074b8:	6878      	ldr	r0, [r7, #4]
 80074ba:	f000 f8fd 	bl	80076b8 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80074be:	69fb      	ldr	r3, [r7, #28]
 80074c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80074c4:	2b40      	cmp	r3, #64	@ 0x40
 80074c6:	d12f      	bne.n	8007528 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 80074c8:	697b      	ldr	r3, [r7, #20]
 80074ca:	f003 0320 	and.w	r3, r3, #32
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	d02a      	beq.n	8007528 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	685a      	ldr	r2, [r3, #4]
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80074e0:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	4a1e      	ldr	r2, [pc, #120]	@ (8007560 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80074e8:	4293      	cmp	r3, r2
 80074ea:	d101      	bne.n	80074f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 80074ec:	4b1d      	ldr	r3, [pc, #116]	@ (8007564 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80074ee:	e001      	b.n	80074f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 80074f0:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80074f4:	685a      	ldr	r2, [r3, #4]
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	4919      	ldr	r1, [pc, #100]	@ (8007560 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80074fc:	428b      	cmp	r3, r1
 80074fe:	d101      	bne.n	8007504 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8007500:	4b18      	ldr	r3, [pc, #96]	@ (8007564 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8007502:	e001      	b.n	8007508 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8007504:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8007508:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 800750c:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	2201      	movs	r2, #1
 8007512:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800751a:	f043 0202 	orr.w	r2, r3, #2
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8007522:	6878      	ldr	r0, [r7, #4]
 8007524:	f7ff fdc1 	bl	80070aa <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8007528:	69bb      	ldr	r3, [r7, #24]
 800752a:	f003 0308 	and.w	r3, r3, #8
 800752e:	2b08      	cmp	r3, #8
 8007530:	d136      	bne.n	80075a0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 8007532:	693b      	ldr	r3, [r7, #16]
 8007534:	f003 0320 	and.w	r3, r3, #32
 8007538:	2b00      	cmp	r3, #0
 800753a:	d031      	beq.n	80075a0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	4a07      	ldr	r2, [pc, #28]	@ (8007560 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8007542:	4293      	cmp	r3, r2
 8007544:	d101      	bne.n	800754a <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8007546:	4b07      	ldr	r3, [pc, #28]	@ (8007564 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8007548:	e001      	b.n	800754e <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 800754a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800754e:	685a      	ldr	r2, [r3, #4]
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	4902      	ldr	r1, [pc, #8]	@ (8007560 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8007556:	428b      	cmp	r3, r1
 8007558:	d106      	bne.n	8007568 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 800755a:	4b02      	ldr	r3, [pc, #8]	@ (8007564 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800755c:	e006      	b.n	800756c <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 800755e:	bf00      	nop
 8007560:	40003800 	.word	0x40003800
 8007564:	40003400 	.word	0x40003400
 8007568:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800756c:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8007570:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	685a      	ldr	r2, [r3, #4]
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8007580:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	2201      	movs	r2, #1
 8007586:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800758e:	f043 0204 	orr.w	r2, r3, #4
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8007596:	6878      	ldr	r0, [r7, #4]
 8007598:	f7ff fd87 	bl	80070aa <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800759c:	e000      	b.n	80075a0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800759e:	bf00      	nop
}
 80075a0:	bf00      	nop
 80075a2:	3720      	adds	r7, #32
 80075a4:	46bd      	mov	sp, r7
 80075a6:	bd80      	pop	{r7, pc}

080075a8 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80075a8:	b480      	push	{r7}
 80075aa:	b083      	sub	sp, #12
 80075ac:	af00      	add	r7, sp, #0
 80075ae:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 80075b0:	bf00      	nop
 80075b2:	370c      	adds	r7, #12
 80075b4:	46bd      	mov	sp, r7
 80075b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ba:	4770      	bx	lr

080075bc <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80075bc:	b580      	push	{r7, lr}
 80075be:	b082      	sub	sp, #8
 80075c0:	af00      	add	r7, sp, #0
 80075c2:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80075c8:	1c99      	adds	r1, r3, #2
 80075ca:	687a      	ldr	r2, [r7, #4]
 80075cc:	6251      	str	r1, [r2, #36]	@ 0x24
 80075ce:	881a      	ldrh	r2, [r3, #0]
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80075da:	b29b      	uxth	r3, r3
 80075dc:	3b01      	subs	r3, #1
 80075de:	b29a      	uxth	r2, r3
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80075e8:	b29b      	uxth	r3, r3
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	d113      	bne.n	8007616 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	685a      	ldr	r2, [r3, #4]
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80075fc:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8007602:	b29b      	uxth	r3, r3
 8007604:	2b00      	cmp	r3, #0
 8007606:	d106      	bne.n	8007616 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	2201      	movs	r2, #1
 800760c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8007610:	6878      	ldr	r0, [r7, #4]
 8007612:	f7ff ffc9 	bl	80075a8 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8007616:	bf00      	nop
 8007618:	3708      	adds	r7, #8
 800761a:	46bd      	mov	sp, r7
 800761c:	bd80      	pop	{r7, pc}
	...

08007620 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8007620:	b580      	push	{r7, lr}
 8007622:	b082      	sub	sp, #8
 8007624:	af00      	add	r7, sp, #0
 8007626:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800762c:	1c99      	adds	r1, r3, #2
 800762e:	687a      	ldr	r2, [r7, #4]
 8007630:	6251      	str	r1, [r2, #36]	@ 0x24
 8007632:	8819      	ldrh	r1, [r3, #0]
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	4a1d      	ldr	r2, [pc, #116]	@ (80076b0 <I2SEx_TxISR_I2SExt+0x90>)
 800763a:	4293      	cmp	r3, r2
 800763c:	d101      	bne.n	8007642 <I2SEx_TxISR_I2SExt+0x22>
 800763e:	4b1d      	ldr	r3, [pc, #116]	@ (80076b4 <I2SEx_TxISR_I2SExt+0x94>)
 8007640:	e001      	b.n	8007646 <I2SEx_TxISR_I2SExt+0x26>
 8007642:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8007646:	460a      	mov	r2, r1
 8007648:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800764e:	b29b      	uxth	r3, r3
 8007650:	3b01      	subs	r3, #1
 8007652:	b29a      	uxth	r2, r3
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800765c:	b29b      	uxth	r3, r3
 800765e:	2b00      	cmp	r3, #0
 8007660:	d121      	bne.n	80076a6 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	4a12      	ldr	r2, [pc, #72]	@ (80076b0 <I2SEx_TxISR_I2SExt+0x90>)
 8007668:	4293      	cmp	r3, r2
 800766a:	d101      	bne.n	8007670 <I2SEx_TxISR_I2SExt+0x50>
 800766c:	4b11      	ldr	r3, [pc, #68]	@ (80076b4 <I2SEx_TxISR_I2SExt+0x94>)
 800766e:	e001      	b.n	8007674 <I2SEx_TxISR_I2SExt+0x54>
 8007670:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8007674:	685a      	ldr	r2, [r3, #4]
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	490d      	ldr	r1, [pc, #52]	@ (80076b0 <I2SEx_TxISR_I2SExt+0x90>)
 800767c:	428b      	cmp	r3, r1
 800767e:	d101      	bne.n	8007684 <I2SEx_TxISR_I2SExt+0x64>
 8007680:	4b0c      	ldr	r3, [pc, #48]	@ (80076b4 <I2SEx_TxISR_I2SExt+0x94>)
 8007682:	e001      	b.n	8007688 <I2SEx_TxISR_I2SExt+0x68>
 8007684:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8007688:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 800768c:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8007692:	b29b      	uxth	r3, r3
 8007694:	2b00      	cmp	r3, #0
 8007696:	d106      	bne.n	80076a6 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	2201      	movs	r2, #1
 800769c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80076a0:	6878      	ldr	r0, [r7, #4]
 80076a2:	f7ff ff81 	bl	80075a8 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80076a6:	bf00      	nop
 80076a8:	3708      	adds	r7, #8
 80076aa:	46bd      	mov	sp, r7
 80076ac:	bd80      	pop	{r7, pc}
 80076ae:	bf00      	nop
 80076b0:	40003800 	.word	0x40003800
 80076b4:	40003400 	.word	0x40003400

080076b8 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80076b8:	b580      	push	{r7, lr}
 80076ba:	b082      	sub	sp, #8
 80076bc:	af00      	add	r7, sp, #0
 80076be:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	68d8      	ldr	r0, [r3, #12]
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80076ca:	1c99      	adds	r1, r3, #2
 80076cc:	687a      	ldr	r2, [r7, #4]
 80076ce:	62d1      	str	r1, [r2, #44]	@ 0x2c
 80076d0:	b282      	uxth	r2, r0
 80076d2:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80076d8:	b29b      	uxth	r3, r3
 80076da:	3b01      	subs	r3, #1
 80076dc:	b29a      	uxth	r2, r3
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80076e6:	b29b      	uxth	r3, r3
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	d113      	bne.n	8007714 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	685a      	ldr	r2, [r3, #4]
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80076fa:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007700:	b29b      	uxth	r3, r3
 8007702:	2b00      	cmp	r3, #0
 8007704:	d106      	bne.n	8007714 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	2201      	movs	r2, #1
 800770a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800770e:	6878      	ldr	r0, [r7, #4]
 8007710:	f7ff ff4a 	bl	80075a8 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8007714:	bf00      	nop
 8007716:	3708      	adds	r7, #8
 8007718:	46bd      	mov	sp, r7
 800771a:	bd80      	pop	{r7, pc}

0800771c <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 800771c:	b580      	push	{r7, lr}
 800771e:	b082      	sub	sp, #8
 8007720:	af00      	add	r7, sp, #0
 8007722:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	4a20      	ldr	r2, [pc, #128]	@ (80077ac <I2SEx_RxISR_I2SExt+0x90>)
 800772a:	4293      	cmp	r3, r2
 800772c:	d101      	bne.n	8007732 <I2SEx_RxISR_I2SExt+0x16>
 800772e:	4b20      	ldr	r3, [pc, #128]	@ (80077b0 <I2SEx_RxISR_I2SExt+0x94>)
 8007730:	e001      	b.n	8007736 <I2SEx_RxISR_I2SExt+0x1a>
 8007732:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8007736:	68d8      	ldr	r0, [r3, #12]
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800773c:	1c99      	adds	r1, r3, #2
 800773e:	687a      	ldr	r2, [r7, #4]
 8007740:	62d1      	str	r1, [r2, #44]	@ 0x2c
 8007742:	b282      	uxth	r2, r0
 8007744:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800774a:	b29b      	uxth	r3, r3
 800774c:	3b01      	subs	r3, #1
 800774e:	b29a      	uxth	r2, r3
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8007758:	b29b      	uxth	r3, r3
 800775a:	2b00      	cmp	r3, #0
 800775c:	d121      	bne.n	80077a2 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	4a12      	ldr	r2, [pc, #72]	@ (80077ac <I2SEx_RxISR_I2SExt+0x90>)
 8007764:	4293      	cmp	r3, r2
 8007766:	d101      	bne.n	800776c <I2SEx_RxISR_I2SExt+0x50>
 8007768:	4b11      	ldr	r3, [pc, #68]	@ (80077b0 <I2SEx_RxISR_I2SExt+0x94>)
 800776a:	e001      	b.n	8007770 <I2SEx_RxISR_I2SExt+0x54>
 800776c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8007770:	685a      	ldr	r2, [r3, #4]
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	490d      	ldr	r1, [pc, #52]	@ (80077ac <I2SEx_RxISR_I2SExt+0x90>)
 8007778:	428b      	cmp	r3, r1
 800777a:	d101      	bne.n	8007780 <I2SEx_RxISR_I2SExt+0x64>
 800777c:	4b0c      	ldr	r3, [pc, #48]	@ (80077b0 <I2SEx_RxISR_I2SExt+0x94>)
 800777e:	e001      	b.n	8007784 <I2SEx_RxISR_I2SExt+0x68>
 8007780:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8007784:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8007788:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800778e:	b29b      	uxth	r3, r3
 8007790:	2b00      	cmp	r3, #0
 8007792:	d106      	bne.n	80077a2 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	2201      	movs	r2, #1
 8007798:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800779c:	6878      	ldr	r0, [r7, #4]
 800779e:	f7ff ff03 	bl	80075a8 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80077a2:	bf00      	nop
 80077a4:	3708      	adds	r7, #8
 80077a6:	46bd      	mov	sp, r7
 80077a8:	bd80      	pop	{r7, pc}
 80077aa:	bf00      	nop
 80077ac:	40003800 	.word	0x40003800
 80077b0:	40003400 	.word	0x40003400

080077b4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80077b4:	b580      	push	{r7, lr}
 80077b6:	b086      	sub	sp, #24
 80077b8:	af00      	add	r7, sp, #0
 80077ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	2b00      	cmp	r3, #0
 80077c0:	d101      	bne.n	80077c6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80077c2:	2301      	movs	r3, #1
 80077c4:	e267      	b.n	8007c96 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	f003 0301 	and.w	r3, r3, #1
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	d075      	beq.n	80078be <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80077d2:	4b88      	ldr	r3, [pc, #544]	@ (80079f4 <HAL_RCC_OscConfig+0x240>)
 80077d4:	689b      	ldr	r3, [r3, #8]
 80077d6:	f003 030c 	and.w	r3, r3, #12
 80077da:	2b04      	cmp	r3, #4
 80077dc:	d00c      	beq.n	80077f8 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80077de:	4b85      	ldr	r3, [pc, #532]	@ (80079f4 <HAL_RCC_OscConfig+0x240>)
 80077e0:	689b      	ldr	r3, [r3, #8]
 80077e2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80077e6:	2b08      	cmp	r3, #8
 80077e8:	d112      	bne.n	8007810 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80077ea:	4b82      	ldr	r3, [pc, #520]	@ (80079f4 <HAL_RCC_OscConfig+0x240>)
 80077ec:	685b      	ldr	r3, [r3, #4]
 80077ee:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80077f2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80077f6:	d10b      	bne.n	8007810 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80077f8:	4b7e      	ldr	r3, [pc, #504]	@ (80079f4 <HAL_RCC_OscConfig+0x240>)
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007800:	2b00      	cmp	r3, #0
 8007802:	d05b      	beq.n	80078bc <HAL_RCC_OscConfig+0x108>
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	685b      	ldr	r3, [r3, #4]
 8007808:	2b00      	cmp	r3, #0
 800780a:	d157      	bne.n	80078bc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800780c:	2301      	movs	r3, #1
 800780e:	e242      	b.n	8007c96 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	685b      	ldr	r3, [r3, #4]
 8007814:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007818:	d106      	bne.n	8007828 <HAL_RCC_OscConfig+0x74>
 800781a:	4b76      	ldr	r3, [pc, #472]	@ (80079f4 <HAL_RCC_OscConfig+0x240>)
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	4a75      	ldr	r2, [pc, #468]	@ (80079f4 <HAL_RCC_OscConfig+0x240>)
 8007820:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007824:	6013      	str	r3, [r2, #0]
 8007826:	e01d      	b.n	8007864 <HAL_RCC_OscConfig+0xb0>
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	685b      	ldr	r3, [r3, #4]
 800782c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007830:	d10c      	bne.n	800784c <HAL_RCC_OscConfig+0x98>
 8007832:	4b70      	ldr	r3, [pc, #448]	@ (80079f4 <HAL_RCC_OscConfig+0x240>)
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	4a6f      	ldr	r2, [pc, #444]	@ (80079f4 <HAL_RCC_OscConfig+0x240>)
 8007838:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800783c:	6013      	str	r3, [r2, #0]
 800783e:	4b6d      	ldr	r3, [pc, #436]	@ (80079f4 <HAL_RCC_OscConfig+0x240>)
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	4a6c      	ldr	r2, [pc, #432]	@ (80079f4 <HAL_RCC_OscConfig+0x240>)
 8007844:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007848:	6013      	str	r3, [r2, #0]
 800784a:	e00b      	b.n	8007864 <HAL_RCC_OscConfig+0xb0>
 800784c:	4b69      	ldr	r3, [pc, #420]	@ (80079f4 <HAL_RCC_OscConfig+0x240>)
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	4a68      	ldr	r2, [pc, #416]	@ (80079f4 <HAL_RCC_OscConfig+0x240>)
 8007852:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007856:	6013      	str	r3, [r2, #0]
 8007858:	4b66      	ldr	r3, [pc, #408]	@ (80079f4 <HAL_RCC_OscConfig+0x240>)
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	4a65      	ldr	r2, [pc, #404]	@ (80079f4 <HAL_RCC_OscConfig+0x240>)
 800785e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007862:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	685b      	ldr	r3, [r3, #4]
 8007868:	2b00      	cmp	r3, #0
 800786a:	d013      	beq.n	8007894 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800786c:	f7fd fe56 	bl	800551c <HAL_GetTick>
 8007870:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007872:	e008      	b.n	8007886 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007874:	f7fd fe52 	bl	800551c <HAL_GetTick>
 8007878:	4602      	mov	r2, r0
 800787a:	693b      	ldr	r3, [r7, #16]
 800787c:	1ad3      	subs	r3, r2, r3
 800787e:	2b64      	cmp	r3, #100	@ 0x64
 8007880:	d901      	bls.n	8007886 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8007882:	2303      	movs	r3, #3
 8007884:	e207      	b.n	8007c96 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007886:	4b5b      	ldr	r3, [pc, #364]	@ (80079f4 <HAL_RCC_OscConfig+0x240>)
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800788e:	2b00      	cmp	r3, #0
 8007890:	d0f0      	beq.n	8007874 <HAL_RCC_OscConfig+0xc0>
 8007892:	e014      	b.n	80078be <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007894:	f7fd fe42 	bl	800551c <HAL_GetTick>
 8007898:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800789a:	e008      	b.n	80078ae <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800789c:	f7fd fe3e 	bl	800551c <HAL_GetTick>
 80078a0:	4602      	mov	r2, r0
 80078a2:	693b      	ldr	r3, [r7, #16]
 80078a4:	1ad3      	subs	r3, r2, r3
 80078a6:	2b64      	cmp	r3, #100	@ 0x64
 80078a8:	d901      	bls.n	80078ae <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80078aa:	2303      	movs	r3, #3
 80078ac:	e1f3      	b.n	8007c96 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80078ae:	4b51      	ldr	r3, [pc, #324]	@ (80079f4 <HAL_RCC_OscConfig+0x240>)
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80078b6:	2b00      	cmp	r3, #0
 80078b8:	d1f0      	bne.n	800789c <HAL_RCC_OscConfig+0xe8>
 80078ba:	e000      	b.n	80078be <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80078bc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	f003 0302 	and.w	r3, r3, #2
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	d063      	beq.n	8007992 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80078ca:	4b4a      	ldr	r3, [pc, #296]	@ (80079f4 <HAL_RCC_OscConfig+0x240>)
 80078cc:	689b      	ldr	r3, [r3, #8]
 80078ce:	f003 030c 	and.w	r3, r3, #12
 80078d2:	2b00      	cmp	r3, #0
 80078d4:	d00b      	beq.n	80078ee <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80078d6:	4b47      	ldr	r3, [pc, #284]	@ (80079f4 <HAL_RCC_OscConfig+0x240>)
 80078d8:	689b      	ldr	r3, [r3, #8]
 80078da:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80078de:	2b08      	cmp	r3, #8
 80078e0:	d11c      	bne.n	800791c <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80078e2:	4b44      	ldr	r3, [pc, #272]	@ (80079f4 <HAL_RCC_OscConfig+0x240>)
 80078e4:	685b      	ldr	r3, [r3, #4]
 80078e6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	d116      	bne.n	800791c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80078ee:	4b41      	ldr	r3, [pc, #260]	@ (80079f4 <HAL_RCC_OscConfig+0x240>)
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	f003 0302 	and.w	r3, r3, #2
 80078f6:	2b00      	cmp	r3, #0
 80078f8:	d005      	beq.n	8007906 <HAL_RCC_OscConfig+0x152>
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	68db      	ldr	r3, [r3, #12]
 80078fe:	2b01      	cmp	r3, #1
 8007900:	d001      	beq.n	8007906 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8007902:	2301      	movs	r3, #1
 8007904:	e1c7      	b.n	8007c96 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007906:	4b3b      	ldr	r3, [pc, #236]	@ (80079f4 <HAL_RCC_OscConfig+0x240>)
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	691b      	ldr	r3, [r3, #16]
 8007912:	00db      	lsls	r3, r3, #3
 8007914:	4937      	ldr	r1, [pc, #220]	@ (80079f4 <HAL_RCC_OscConfig+0x240>)
 8007916:	4313      	orrs	r3, r2
 8007918:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800791a:	e03a      	b.n	8007992 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	68db      	ldr	r3, [r3, #12]
 8007920:	2b00      	cmp	r3, #0
 8007922:	d020      	beq.n	8007966 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007924:	4b34      	ldr	r3, [pc, #208]	@ (80079f8 <HAL_RCC_OscConfig+0x244>)
 8007926:	2201      	movs	r2, #1
 8007928:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800792a:	f7fd fdf7 	bl	800551c <HAL_GetTick>
 800792e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007930:	e008      	b.n	8007944 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007932:	f7fd fdf3 	bl	800551c <HAL_GetTick>
 8007936:	4602      	mov	r2, r0
 8007938:	693b      	ldr	r3, [r7, #16]
 800793a:	1ad3      	subs	r3, r2, r3
 800793c:	2b02      	cmp	r3, #2
 800793e:	d901      	bls.n	8007944 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8007940:	2303      	movs	r3, #3
 8007942:	e1a8      	b.n	8007c96 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007944:	4b2b      	ldr	r3, [pc, #172]	@ (80079f4 <HAL_RCC_OscConfig+0x240>)
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	f003 0302 	and.w	r3, r3, #2
 800794c:	2b00      	cmp	r3, #0
 800794e:	d0f0      	beq.n	8007932 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007950:	4b28      	ldr	r3, [pc, #160]	@ (80079f4 <HAL_RCC_OscConfig+0x240>)
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	691b      	ldr	r3, [r3, #16]
 800795c:	00db      	lsls	r3, r3, #3
 800795e:	4925      	ldr	r1, [pc, #148]	@ (80079f4 <HAL_RCC_OscConfig+0x240>)
 8007960:	4313      	orrs	r3, r2
 8007962:	600b      	str	r3, [r1, #0]
 8007964:	e015      	b.n	8007992 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007966:	4b24      	ldr	r3, [pc, #144]	@ (80079f8 <HAL_RCC_OscConfig+0x244>)
 8007968:	2200      	movs	r2, #0
 800796a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800796c:	f7fd fdd6 	bl	800551c <HAL_GetTick>
 8007970:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007972:	e008      	b.n	8007986 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007974:	f7fd fdd2 	bl	800551c <HAL_GetTick>
 8007978:	4602      	mov	r2, r0
 800797a:	693b      	ldr	r3, [r7, #16]
 800797c:	1ad3      	subs	r3, r2, r3
 800797e:	2b02      	cmp	r3, #2
 8007980:	d901      	bls.n	8007986 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8007982:	2303      	movs	r3, #3
 8007984:	e187      	b.n	8007c96 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007986:	4b1b      	ldr	r3, [pc, #108]	@ (80079f4 <HAL_RCC_OscConfig+0x240>)
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	f003 0302 	and.w	r3, r3, #2
 800798e:	2b00      	cmp	r3, #0
 8007990:	d1f0      	bne.n	8007974 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	f003 0308 	and.w	r3, r3, #8
 800799a:	2b00      	cmp	r3, #0
 800799c:	d036      	beq.n	8007a0c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	695b      	ldr	r3, [r3, #20]
 80079a2:	2b00      	cmp	r3, #0
 80079a4:	d016      	beq.n	80079d4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80079a6:	4b15      	ldr	r3, [pc, #84]	@ (80079fc <HAL_RCC_OscConfig+0x248>)
 80079a8:	2201      	movs	r2, #1
 80079aa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80079ac:	f7fd fdb6 	bl	800551c <HAL_GetTick>
 80079b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80079b2:	e008      	b.n	80079c6 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80079b4:	f7fd fdb2 	bl	800551c <HAL_GetTick>
 80079b8:	4602      	mov	r2, r0
 80079ba:	693b      	ldr	r3, [r7, #16]
 80079bc:	1ad3      	subs	r3, r2, r3
 80079be:	2b02      	cmp	r3, #2
 80079c0:	d901      	bls.n	80079c6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80079c2:	2303      	movs	r3, #3
 80079c4:	e167      	b.n	8007c96 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80079c6:	4b0b      	ldr	r3, [pc, #44]	@ (80079f4 <HAL_RCC_OscConfig+0x240>)
 80079c8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80079ca:	f003 0302 	and.w	r3, r3, #2
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	d0f0      	beq.n	80079b4 <HAL_RCC_OscConfig+0x200>
 80079d2:	e01b      	b.n	8007a0c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80079d4:	4b09      	ldr	r3, [pc, #36]	@ (80079fc <HAL_RCC_OscConfig+0x248>)
 80079d6:	2200      	movs	r2, #0
 80079d8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80079da:	f7fd fd9f 	bl	800551c <HAL_GetTick>
 80079de:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80079e0:	e00e      	b.n	8007a00 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80079e2:	f7fd fd9b 	bl	800551c <HAL_GetTick>
 80079e6:	4602      	mov	r2, r0
 80079e8:	693b      	ldr	r3, [r7, #16]
 80079ea:	1ad3      	subs	r3, r2, r3
 80079ec:	2b02      	cmp	r3, #2
 80079ee:	d907      	bls.n	8007a00 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80079f0:	2303      	movs	r3, #3
 80079f2:	e150      	b.n	8007c96 <HAL_RCC_OscConfig+0x4e2>
 80079f4:	40023800 	.word	0x40023800
 80079f8:	42470000 	.word	0x42470000
 80079fc:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007a00:	4b88      	ldr	r3, [pc, #544]	@ (8007c24 <HAL_RCC_OscConfig+0x470>)
 8007a02:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007a04:	f003 0302 	and.w	r3, r3, #2
 8007a08:	2b00      	cmp	r3, #0
 8007a0a:	d1ea      	bne.n	80079e2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	f003 0304 	and.w	r3, r3, #4
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	f000 8097 	beq.w	8007b48 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007a1a:	2300      	movs	r3, #0
 8007a1c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007a1e:	4b81      	ldr	r3, [pc, #516]	@ (8007c24 <HAL_RCC_OscConfig+0x470>)
 8007a20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007a22:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007a26:	2b00      	cmp	r3, #0
 8007a28:	d10f      	bne.n	8007a4a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007a2a:	2300      	movs	r3, #0
 8007a2c:	60bb      	str	r3, [r7, #8]
 8007a2e:	4b7d      	ldr	r3, [pc, #500]	@ (8007c24 <HAL_RCC_OscConfig+0x470>)
 8007a30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007a32:	4a7c      	ldr	r2, [pc, #496]	@ (8007c24 <HAL_RCC_OscConfig+0x470>)
 8007a34:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007a38:	6413      	str	r3, [r2, #64]	@ 0x40
 8007a3a:	4b7a      	ldr	r3, [pc, #488]	@ (8007c24 <HAL_RCC_OscConfig+0x470>)
 8007a3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007a3e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007a42:	60bb      	str	r3, [r7, #8]
 8007a44:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007a46:	2301      	movs	r3, #1
 8007a48:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007a4a:	4b77      	ldr	r3, [pc, #476]	@ (8007c28 <HAL_RCC_OscConfig+0x474>)
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	d118      	bne.n	8007a88 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007a56:	4b74      	ldr	r3, [pc, #464]	@ (8007c28 <HAL_RCC_OscConfig+0x474>)
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	4a73      	ldr	r2, [pc, #460]	@ (8007c28 <HAL_RCC_OscConfig+0x474>)
 8007a5c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007a60:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007a62:	f7fd fd5b 	bl	800551c <HAL_GetTick>
 8007a66:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007a68:	e008      	b.n	8007a7c <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007a6a:	f7fd fd57 	bl	800551c <HAL_GetTick>
 8007a6e:	4602      	mov	r2, r0
 8007a70:	693b      	ldr	r3, [r7, #16]
 8007a72:	1ad3      	subs	r3, r2, r3
 8007a74:	2b02      	cmp	r3, #2
 8007a76:	d901      	bls.n	8007a7c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8007a78:	2303      	movs	r3, #3
 8007a7a:	e10c      	b.n	8007c96 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007a7c:	4b6a      	ldr	r3, [pc, #424]	@ (8007c28 <HAL_RCC_OscConfig+0x474>)
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007a84:	2b00      	cmp	r3, #0
 8007a86:	d0f0      	beq.n	8007a6a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	689b      	ldr	r3, [r3, #8]
 8007a8c:	2b01      	cmp	r3, #1
 8007a8e:	d106      	bne.n	8007a9e <HAL_RCC_OscConfig+0x2ea>
 8007a90:	4b64      	ldr	r3, [pc, #400]	@ (8007c24 <HAL_RCC_OscConfig+0x470>)
 8007a92:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007a94:	4a63      	ldr	r2, [pc, #396]	@ (8007c24 <HAL_RCC_OscConfig+0x470>)
 8007a96:	f043 0301 	orr.w	r3, r3, #1
 8007a9a:	6713      	str	r3, [r2, #112]	@ 0x70
 8007a9c:	e01c      	b.n	8007ad8 <HAL_RCC_OscConfig+0x324>
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	689b      	ldr	r3, [r3, #8]
 8007aa2:	2b05      	cmp	r3, #5
 8007aa4:	d10c      	bne.n	8007ac0 <HAL_RCC_OscConfig+0x30c>
 8007aa6:	4b5f      	ldr	r3, [pc, #380]	@ (8007c24 <HAL_RCC_OscConfig+0x470>)
 8007aa8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007aaa:	4a5e      	ldr	r2, [pc, #376]	@ (8007c24 <HAL_RCC_OscConfig+0x470>)
 8007aac:	f043 0304 	orr.w	r3, r3, #4
 8007ab0:	6713      	str	r3, [r2, #112]	@ 0x70
 8007ab2:	4b5c      	ldr	r3, [pc, #368]	@ (8007c24 <HAL_RCC_OscConfig+0x470>)
 8007ab4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007ab6:	4a5b      	ldr	r2, [pc, #364]	@ (8007c24 <HAL_RCC_OscConfig+0x470>)
 8007ab8:	f043 0301 	orr.w	r3, r3, #1
 8007abc:	6713      	str	r3, [r2, #112]	@ 0x70
 8007abe:	e00b      	b.n	8007ad8 <HAL_RCC_OscConfig+0x324>
 8007ac0:	4b58      	ldr	r3, [pc, #352]	@ (8007c24 <HAL_RCC_OscConfig+0x470>)
 8007ac2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007ac4:	4a57      	ldr	r2, [pc, #348]	@ (8007c24 <HAL_RCC_OscConfig+0x470>)
 8007ac6:	f023 0301 	bic.w	r3, r3, #1
 8007aca:	6713      	str	r3, [r2, #112]	@ 0x70
 8007acc:	4b55      	ldr	r3, [pc, #340]	@ (8007c24 <HAL_RCC_OscConfig+0x470>)
 8007ace:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007ad0:	4a54      	ldr	r2, [pc, #336]	@ (8007c24 <HAL_RCC_OscConfig+0x470>)
 8007ad2:	f023 0304 	bic.w	r3, r3, #4
 8007ad6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	689b      	ldr	r3, [r3, #8]
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	d015      	beq.n	8007b0c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007ae0:	f7fd fd1c 	bl	800551c <HAL_GetTick>
 8007ae4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007ae6:	e00a      	b.n	8007afe <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007ae8:	f7fd fd18 	bl	800551c <HAL_GetTick>
 8007aec:	4602      	mov	r2, r0
 8007aee:	693b      	ldr	r3, [r7, #16]
 8007af0:	1ad3      	subs	r3, r2, r3
 8007af2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007af6:	4293      	cmp	r3, r2
 8007af8:	d901      	bls.n	8007afe <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8007afa:	2303      	movs	r3, #3
 8007afc:	e0cb      	b.n	8007c96 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007afe:	4b49      	ldr	r3, [pc, #292]	@ (8007c24 <HAL_RCC_OscConfig+0x470>)
 8007b00:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007b02:	f003 0302 	and.w	r3, r3, #2
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	d0ee      	beq.n	8007ae8 <HAL_RCC_OscConfig+0x334>
 8007b0a:	e014      	b.n	8007b36 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007b0c:	f7fd fd06 	bl	800551c <HAL_GetTick>
 8007b10:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007b12:	e00a      	b.n	8007b2a <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007b14:	f7fd fd02 	bl	800551c <HAL_GetTick>
 8007b18:	4602      	mov	r2, r0
 8007b1a:	693b      	ldr	r3, [r7, #16]
 8007b1c:	1ad3      	subs	r3, r2, r3
 8007b1e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007b22:	4293      	cmp	r3, r2
 8007b24:	d901      	bls.n	8007b2a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8007b26:	2303      	movs	r3, #3
 8007b28:	e0b5      	b.n	8007c96 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007b2a:	4b3e      	ldr	r3, [pc, #248]	@ (8007c24 <HAL_RCC_OscConfig+0x470>)
 8007b2c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007b2e:	f003 0302 	and.w	r3, r3, #2
 8007b32:	2b00      	cmp	r3, #0
 8007b34:	d1ee      	bne.n	8007b14 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8007b36:	7dfb      	ldrb	r3, [r7, #23]
 8007b38:	2b01      	cmp	r3, #1
 8007b3a:	d105      	bne.n	8007b48 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007b3c:	4b39      	ldr	r3, [pc, #228]	@ (8007c24 <HAL_RCC_OscConfig+0x470>)
 8007b3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007b40:	4a38      	ldr	r2, [pc, #224]	@ (8007c24 <HAL_RCC_OscConfig+0x470>)
 8007b42:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007b46:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	699b      	ldr	r3, [r3, #24]
 8007b4c:	2b00      	cmp	r3, #0
 8007b4e:	f000 80a1 	beq.w	8007c94 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8007b52:	4b34      	ldr	r3, [pc, #208]	@ (8007c24 <HAL_RCC_OscConfig+0x470>)
 8007b54:	689b      	ldr	r3, [r3, #8]
 8007b56:	f003 030c 	and.w	r3, r3, #12
 8007b5a:	2b08      	cmp	r3, #8
 8007b5c:	d05c      	beq.n	8007c18 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	699b      	ldr	r3, [r3, #24]
 8007b62:	2b02      	cmp	r3, #2
 8007b64:	d141      	bne.n	8007bea <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007b66:	4b31      	ldr	r3, [pc, #196]	@ (8007c2c <HAL_RCC_OscConfig+0x478>)
 8007b68:	2200      	movs	r2, #0
 8007b6a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007b6c:	f7fd fcd6 	bl	800551c <HAL_GetTick>
 8007b70:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007b72:	e008      	b.n	8007b86 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007b74:	f7fd fcd2 	bl	800551c <HAL_GetTick>
 8007b78:	4602      	mov	r2, r0
 8007b7a:	693b      	ldr	r3, [r7, #16]
 8007b7c:	1ad3      	subs	r3, r2, r3
 8007b7e:	2b02      	cmp	r3, #2
 8007b80:	d901      	bls.n	8007b86 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8007b82:	2303      	movs	r3, #3
 8007b84:	e087      	b.n	8007c96 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007b86:	4b27      	ldr	r3, [pc, #156]	@ (8007c24 <HAL_RCC_OscConfig+0x470>)
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007b8e:	2b00      	cmp	r3, #0
 8007b90:	d1f0      	bne.n	8007b74 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	69da      	ldr	r2, [r3, #28]
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	6a1b      	ldr	r3, [r3, #32]
 8007b9a:	431a      	orrs	r2, r3
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007ba0:	019b      	lsls	r3, r3, #6
 8007ba2:	431a      	orrs	r2, r3
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007ba8:	085b      	lsrs	r3, r3, #1
 8007baa:	3b01      	subs	r3, #1
 8007bac:	041b      	lsls	r3, r3, #16
 8007bae:	431a      	orrs	r2, r3
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007bb4:	061b      	lsls	r3, r3, #24
 8007bb6:	491b      	ldr	r1, [pc, #108]	@ (8007c24 <HAL_RCC_OscConfig+0x470>)
 8007bb8:	4313      	orrs	r3, r2
 8007bba:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007bbc:	4b1b      	ldr	r3, [pc, #108]	@ (8007c2c <HAL_RCC_OscConfig+0x478>)
 8007bbe:	2201      	movs	r2, #1
 8007bc0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007bc2:	f7fd fcab 	bl	800551c <HAL_GetTick>
 8007bc6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007bc8:	e008      	b.n	8007bdc <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007bca:	f7fd fca7 	bl	800551c <HAL_GetTick>
 8007bce:	4602      	mov	r2, r0
 8007bd0:	693b      	ldr	r3, [r7, #16]
 8007bd2:	1ad3      	subs	r3, r2, r3
 8007bd4:	2b02      	cmp	r3, #2
 8007bd6:	d901      	bls.n	8007bdc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8007bd8:	2303      	movs	r3, #3
 8007bda:	e05c      	b.n	8007c96 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007bdc:	4b11      	ldr	r3, [pc, #68]	@ (8007c24 <HAL_RCC_OscConfig+0x470>)
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007be4:	2b00      	cmp	r3, #0
 8007be6:	d0f0      	beq.n	8007bca <HAL_RCC_OscConfig+0x416>
 8007be8:	e054      	b.n	8007c94 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007bea:	4b10      	ldr	r3, [pc, #64]	@ (8007c2c <HAL_RCC_OscConfig+0x478>)
 8007bec:	2200      	movs	r2, #0
 8007bee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007bf0:	f7fd fc94 	bl	800551c <HAL_GetTick>
 8007bf4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007bf6:	e008      	b.n	8007c0a <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007bf8:	f7fd fc90 	bl	800551c <HAL_GetTick>
 8007bfc:	4602      	mov	r2, r0
 8007bfe:	693b      	ldr	r3, [r7, #16]
 8007c00:	1ad3      	subs	r3, r2, r3
 8007c02:	2b02      	cmp	r3, #2
 8007c04:	d901      	bls.n	8007c0a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8007c06:	2303      	movs	r3, #3
 8007c08:	e045      	b.n	8007c96 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007c0a:	4b06      	ldr	r3, [pc, #24]	@ (8007c24 <HAL_RCC_OscConfig+0x470>)
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007c12:	2b00      	cmp	r3, #0
 8007c14:	d1f0      	bne.n	8007bf8 <HAL_RCC_OscConfig+0x444>
 8007c16:	e03d      	b.n	8007c94 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	699b      	ldr	r3, [r3, #24]
 8007c1c:	2b01      	cmp	r3, #1
 8007c1e:	d107      	bne.n	8007c30 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8007c20:	2301      	movs	r3, #1
 8007c22:	e038      	b.n	8007c96 <HAL_RCC_OscConfig+0x4e2>
 8007c24:	40023800 	.word	0x40023800
 8007c28:	40007000 	.word	0x40007000
 8007c2c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8007c30:	4b1b      	ldr	r3, [pc, #108]	@ (8007ca0 <HAL_RCC_OscConfig+0x4ec>)
 8007c32:	685b      	ldr	r3, [r3, #4]
 8007c34:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	699b      	ldr	r3, [r3, #24]
 8007c3a:	2b01      	cmp	r3, #1
 8007c3c:	d028      	beq.n	8007c90 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007c3e:	68fb      	ldr	r3, [r7, #12]
 8007c40:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007c48:	429a      	cmp	r2, r3
 8007c4a:	d121      	bne.n	8007c90 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007c4c:	68fb      	ldr	r3, [r7, #12]
 8007c4e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007c56:	429a      	cmp	r2, r3
 8007c58:	d11a      	bne.n	8007c90 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007c5a:	68fa      	ldr	r2, [r7, #12]
 8007c5c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8007c60:	4013      	ands	r3, r2
 8007c62:	687a      	ldr	r2, [r7, #4]
 8007c64:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8007c66:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007c68:	4293      	cmp	r3, r2
 8007c6a:	d111      	bne.n	8007c90 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007c6c:	68fb      	ldr	r3, [r7, #12]
 8007c6e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007c76:	085b      	lsrs	r3, r3, #1
 8007c78:	3b01      	subs	r3, #1
 8007c7a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007c7c:	429a      	cmp	r2, r3
 8007c7e:	d107      	bne.n	8007c90 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8007c80:	68fb      	ldr	r3, [r7, #12]
 8007c82:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c8a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007c8c:	429a      	cmp	r2, r3
 8007c8e:	d001      	beq.n	8007c94 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8007c90:	2301      	movs	r3, #1
 8007c92:	e000      	b.n	8007c96 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8007c94:	2300      	movs	r3, #0
}
 8007c96:	4618      	mov	r0, r3
 8007c98:	3718      	adds	r7, #24
 8007c9a:	46bd      	mov	sp, r7
 8007c9c:	bd80      	pop	{r7, pc}
 8007c9e:	bf00      	nop
 8007ca0:	40023800 	.word	0x40023800

08007ca4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007ca4:	b580      	push	{r7, lr}
 8007ca6:	b084      	sub	sp, #16
 8007ca8:	af00      	add	r7, sp, #0
 8007caa:	6078      	str	r0, [r7, #4]
 8007cac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	2b00      	cmp	r3, #0
 8007cb2:	d101      	bne.n	8007cb8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007cb4:	2301      	movs	r3, #1
 8007cb6:	e0cc      	b.n	8007e52 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007cb8:	4b68      	ldr	r3, [pc, #416]	@ (8007e5c <HAL_RCC_ClockConfig+0x1b8>)
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	f003 0307 	and.w	r3, r3, #7
 8007cc0:	683a      	ldr	r2, [r7, #0]
 8007cc2:	429a      	cmp	r2, r3
 8007cc4:	d90c      	bls.n	8007ce0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007cc6:	4b65      	ldr	r3, [pc, #404]	@ (8007e5c <HAL_RCC_ClockConfig+0x1b8>)
 8007cc8:	683a      	ldr	r2, [r7, #0]
 8007cca:	b2d2      	uxtb	r2, r2
 8007ccc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007cce:	4b63      	ldr	r3, [pc, #396]	@ (8007e5c <HAL_RCC_ClockConfig+0x1b8>)
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	f003 0307 	and.w	r3, r3, #7
 8007cd6:	683a      	ldr	r2, [r7, #0]
 8007cd8:	429a      	cmp	r2, r3
 8007cda:	d001      	beq.n	8007ce0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8007cdc:	2301      	movs	r3, #1
 8007cde:	e0b8      	b.n	8007e52 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	f003 0302 	and.w	r3, r3, #2
 8007ce8:	2b00      	cmp	r3, #0
 8007cea:	d020      	beq.n	8007d2e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	f003 0304 	and.w	r3, r3, #4
 8007cf4:	2b00      	cmp	r3, #0
 8007cf6:	d005      	beq.n	8007d04 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007cf8:	4b59      	ldr	r3, [pc, #356]	@ (8007e60 <HAL_RCC_ClockConfig+0x1bc>)
 8007cfa:	689b      	ldr	r3, [r3, #8]
 8007cfc:	4a58      	ldr	r2, [pc, #352]	@ (8007e60 <HAL_RCC_ClockConfig+0x1bc>)
 8007cfe:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8007d02:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	f003 0308 	and.w	r3, r3, #8
 8007d0c:	2b00      	cmp	r3, #0
 8007d0e:	d005      	beq.n	8007d1c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007d10:	4b53      	ldr	r3, [pc, #332]	@ (8007e60 <HAL_RCC_ClockConfig+0x1bc>)
 8007d12:	689b      	ldr	r3, [r3, #8]
 8007d14:	4a52      	ldr	r2, [pc, #328]	@ (8007e60 <HAL_RCC_ClockConfig+0x1bc>)
 8007d16:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8007d1a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007d1c:	4b50      	ldr	r3, [pc, #320]	@ (8007e60 <HAL_RCC_ClockConfig+0x1bc>)
 8007d1e:	689b      	ldr	r3, [r3, #8]
 8007d20:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	689b      	ldr	r3, [r3, #8]
 8007d28:	494d      	ldr	r1, [pc, #308]	@ (8007e60 <HAL_RCC_ClockConfig+0x1bc>)
 8007d2a:	4313      	orrs	r3, r2
 8007d2c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	f003 0301 	and.w	r3, r3, #1
 8007d36:	2b00      	cmp	r3, #0
 8007d38:	d044      	beq.n	8007dc4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	685b      	ldr	r3, [r3, #4]
 8007d3e:	2b01      	cmp	r3, #1
 8007d40:	d107      	bne.n	8007d52 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007d42:	4b47      	ldr	r3, [pc, #284]	@ (8007e60 <HAL_RCC_ClockConfig+0x1bc>)
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007d4a:	2b00      	cmp	r3, #0
 8007d4c:	d119      	bne.n	8007d82 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007d4e:	2301      	movs	r3, #1
 8007d50:	e07f      	b.n	8007e52 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	685b      	ldr	r3, [r3, #4]
 8007d56:	2b02      	cmp	r3, #2
 8007d58:	d003      	beq.n	8007d62 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007d5e:	2b03      	cmp	r3, #3
 8007d60:	d107      	bne.n	8007d72 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007d62:	4b3f      	ldr	r3, [pc, #252]	@ (8007e60 <HAL_RCC_ClockConfig+0x1bc>)
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007d6a:	2b00      	cmp	r3, #0
 8007d6c:	d109      	bne.n	8007d82 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007d6e:	2301      	movs	r3, #1
 8007d70:	e06f      	b.n	8007e52 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007d72:	4b3b      	ldr	r3, [pc, #236]	@ (8007e60 <HAL_RCC_ClockConfig+0x1bc>)
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	f003 0302 	and.w	r3, r3, #2
 8007d7a:	2b00      	cmp	r3, #0
 8007d7c:	d101      	bne.n	8007d82 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007d7e:	2301      	movs	r3, #1
 8007d80:	e067      	b.n	8007e52 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007d82:	4b37      	ldr	r3, [pc, #220]	@ (8007e60 <HAL_RCC_ClockConfig+0x1bc>)
 8007d84:	689b      	ldr	r3, [r3, #8]
 8007d86:	f023 0203 	bic.w	r2, r3, #3
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	685b      	ldr	r3, [r3, #4]
 8007d8e:	4934      	ldr	r1, [pc, #208]	@ (8007e60 <HAL_RCC_ClockConfig+0x1bc>)
 8007d90:	4313      	orrs	r3, r2
 8007d92:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007d94:	f7fd fbc2 	bl	800551c <HAL_GetTick>
 8007d98:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007d9a:	e00a      	b.n	8007db2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007d9c:	f7fd fbbe 	bl	800551c <HAL_GetTick>
 8007da0:	4602      	mov	r2, r0
 8007da2:	68fb      	ldr	r3, [r7, #12]
 8007da4:	1ad3      	subs	r3, r2, r3
 8007da6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007daa:	4293      	cmp	r3, r2
 8007dac:	d901      	bls.n	8007db2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8007dae:	2303      	movs	r3, #3
 8007db0:	e04f      	b.n	8007e52 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007db2:	4b2b      	ldr	r3, [pc, #172]	@ (8007e60 <HAL_RCC_ClockConfig+0x1bc>)
 8007db4:	689b      	ldr	r3, [r3, #8]
 8007db6:	f003 020c 	and.w	r2, r3, #12
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	685b      	ldr	r3, [r3, #4]
 8007dbe:	009b      	lsls	r3, r3, #2
 8007dc0:	429a      	cmp	r2, r3
 8007dc2:	d1eb      	bne.n	8007d9c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007dc4:	4b25      	ldr	r3, [pc, #148]	@ (8007e5c <HAL_RCC_ClockConfig+0x1b8>)
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	f003 0307 	and.w	r3, r3, #7
 8007dcc:	683a      	ldr	r2, [r7, #0]
 8007dce:	429a      	cmp	r2, r3
 8007dd0:	d20c      	bcs.n	8007dec <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007dd2:	4b22      	ldr	r3, [pc, #136]	@ (8007e5c <HAL_RCC_ClockConfig+0x1b8>)
 8007dd4:	683a      	ldr	r2, [r7, #0]
 8007dd6:	b2d2      	uxtb	r2, r2
 8007dd8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007dda:	4b20      	ldr	r3, [pc, #128]	@ (8007e5c <HAL_RCC_ClockConfig+0x1b8>)
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	f003 0307 	and.w	r3, r3, #7
 8007de2:	683a      	ldr	r2, [r7, #0]
 8007de4:	429a      	cmp	r2, r3
 8007de6:	d001      	beq.n	8007dec <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8007de8:	2301      	movs	r3, #1
 8007dea:	e032      	b.n	8007e52 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	f003 0304 	and.w	r3, r3, #4
 8007df4:	2b00      	cmp	r3, #0
 8007df6:	d008      	beq.n	8007e0a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007df8:	4b19      	ldr	r3, [pc, #100]	@ (8007e60 <HAL_RCC_ClockConfig+0x1bc>)
 8007dfa:	689b      	ldr	r3, [r3, #8]
 8007dfc:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	68db      	ldr	r3, [r3, #12]
 8007e04:	4916      	ldr	r1, [pc, #88]	@ (8007e60 <HAL_RCC_ClockConfig+0x1bc>)
 8007e06:	4313      	orrs	r3, r2
 8007e08:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	f003 0308 	and.w	r3, r3, #8
 8007e12:	2b00      	cmp	r3, #0
 8007e14:	d009      	beq.n	8007e2a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007e16:	4b12      	ldr	r3, [pc, #72]	@ (8007e60 <HAL_RCC_ClockConfig+0x1bc>)
 8007e18:	689b      	ldr	r3, [r3, #8]
 8007e1a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	691b      	ldr	r3, [r3, #16]
 8007e22:	00db      	lsls	r3, r3, #3
 8007e24:	490e      	ldr	r1, [pc, #56]	@ (8007e60 <HAL_RCC_ClockConfig+0x1bc>)
 8007e26:	4313      	orrs	r3, r2
 8007e28:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8007e2a:	f000 f821 	bl	8007e70 <HAL_RCC_GetSysClockFreq>
 8007e2e:	4602      	mov	r2, r0
 8007e30:	4b0b      	ldr	r3, [pc, #44]	@ (8007e60 <HAL_RCC_ClockConfig+0x1bc>)
 8007e32:	689b      	ldr	r3, [r3, #8]
 8007e34:	091b      	lsrs	r3, r3, #4
 8007e36:	f003 030f 	and.w	r3, r3, #15
 8007e3a:	490a      	ldr	r1, [pc, #40]	@ (8007e64 <HAL_RCC_ClockConfig+0x1c0>)
 8007e3c:	5ccb      	ldrb	r3, [r1, r3]
 8007e3e:	fa22 f303 	lsr.w	r3, r2, r3
 8007e42:	4a09      	ldr	r2, [pc, #36]	@ (8007e68 <HAL_RCC_ClockConfig+0x1c4>)
 8007e44:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8007e46:	4b09      	ldr	r3, [pc, #36]	@ (8007e6c <HAL_RCC_ClockConfig+0x1c8>)
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	4618      	mov	r0, r3
 8007e4c:	f7fd fb22 	bl	8005494 <HAL_InitTick>

  return HAL_OK;
 8007e50:	2300      	movs	r3, #0
}
 8007e52:	4618      	mov	r0, r3
 8007e54:	3710      	adds	r7, #16
 8007e56:	46bd      	mov	sp, r7
 8007e58:	bd80      	pop	{r7, pc}
 8007e5a:	bf00      	nop
 8007e5c:	40023c00 	.word	0x40023c00
 8007e60:	40023800 	.word	0x40023800
 8007e64:	08010c38 	.word	0x08010c38
 8007e68:	2000d114 	.word	0x2000d114
 8007e6c:	2000d118 	.word	0x2000d118

08007e70 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007e70:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007e74:	b094      	sub	sp, #80	@ 0x50
 8007e76:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8007e78:	2300      	movs	r3, #0
 8007e7a:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8007e7c:	2300      	movs	r3, #0
 8007e7e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8007e80:	2300      	movs	r3, #0
 8007e82:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8007e84:	2300      	movs	r3, #0
 8007e86:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007e88:	4b79      	ldr	r3, [pc, #484]	@ (8008070 <HAL_RCC_GetSysClockFreq+0x200>)
 8007e8a:	689b      	ldr	r3, [r3, #8]
 8007e8c:	f003 030c 	and.w	r3, r3, #12
 8007e90:	2b08      	cmp	r3, #8
 8007e92:	d00d      	beq.n	8007eb0 <HAL_RCC_GetSysClockFreq+0x40>
 8007e94:	2b08      	cmp	r3, #8
 8007e96:	f200 80e1 	bhi.w	800805c <HAL_RCC_GetSysClockFreq+0x1ec>
 8007e9a:	2b00      	cmp	r3, #0
 8007e9c:	d002      	beq.n	8007ea4 <HAL_RCC_GetSysClockFreq+0x34>
 8007e9e:	2b04      	cmp	r3, #4
 8007ea0:	d003      	beq.n	8007eaa <HAL_RCC_GetSysClockFreq+0x3a>
 8007ea2:	e0db      	b.n	800805c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007ea4:	4b73      	ldr	r3, [pc, #460]	@ (8008074 <HAL_RCC_GetSysClockFreq+0x204>)
 8007ea6:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8007ea8:	e0db      	b.n	8008062 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8007eaa:	4b73      	ldr	r3, [pc, #460]	@ (8008078 <HAL_RCC_GetSysClockFreq+0x208>)
 8007eac:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8007eae:	e0d8      	b.n	8008062 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007eb0:	4b6f      	ldr	r3, [pc, #444]	@ (8008070 <HAL_RCC_GetSysClockFreq+0x200>)
 8007eb2:	685b      	ldr	r3, [r3, #4]
 8007eb4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007eb8:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8007eba:	4b6d      	ldr	r3, [pc, #436]	@ (8008070 <HAL_RCC_GetSysClockFreq+0x200>)
 8007ebc:	685b      	ldr	r3, [r3, #4]
 8007ebe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	d063      	beq.n	8007f8e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007ec6:	4b6a      	ldr	r3, [pc, #424]	@ (8008070 <HAL_RCC_GetSysClockFreq+0x200>)
 8007ec8:	685b      	ldr	r3, [r3, #4]
 8007eca:	099b      	lsrs	r3, r3, #6
 8007ecc:	2200      	movs	r2, #0
 8007ece:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007ed0:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8007ed2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ed4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007ed8:	633b      	str	r3, [r7, #48]	@ 0x30
 8007eda:	2300      	movs	r3, #0
 8007edc:	637b      	str	r3, [r7, #52]	@ 0x34
 8007ede:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8007ee2:	4622      	mov	r2, r4
 8007ee4:	462b      	mov	r3, r5
 8007ee6:	f04f 0000 	mov.w	r0, #0
 8007eea:	f04f 0100 	mov.w	r1, #0
 8007eee:	0159      	lsls	r1, r3, #5
 8007ef0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007ef4:	0150      	lsls	r0, r2, #5
 8007ef6:	4602      	mov	r2, r0
 8007ef8:	460b      	mov	r3, r1
 8007efa:	4621      	mov	r1, r4
 8007efc:	1a51      	subs	r1, r2, r1
 8007efe:	6139      	str	r1, [r7, #16]
 8007f00:	4629      	mov	r1, r5
 8007f02:	eb63 0301 	sbc.w	r3, r3, r1
 8007f06:	617b      	str	r3, [r7, #20]
 8007f08:	f04f 0200 	mov.w	r2, #0
 8007f0c:	f04f 0300 	mov.w	r3, #0
 8007f10:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007f14:	4659      	mov	r1, fp
 8007f16:	018b      	lsls	r3, r1, #6
 8007f18:	4651      	mov	r1, sl
 8007f1a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8007f1e:	4651      	mov	r1, sl
 8007f20:	018a      	lsls	r2, r1, #6
 8007f22:	4651      	mov	r1, sl
 8007f24:	ebb2 0801 	subs.w	r8, r2, r1
 8007f28:	4659      	mov	r1, fp
 8007f2a:	eb63 0901 	sbc.w	r9, r3, r1
 8007f2e:	f04f 0200 	mov.w	r2, #0
 8007f32:	f04f 0300 	mov.w	r3, #0
 8007f36:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007f3a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007f3e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007f42:	4690      	mov	r8, r2
 8007f44:	4699      	mov	r9, r3
 8007f46:	4623      	mov	r3, r4
 8007f48:	eb18 0303 	adds.w	r3, r8, r3
 8007f4c:	60bb      	str	r3, [r7, #8]
 8007f4e:	462b      	mov	r3, r5
 8007f50:	eb49 0303 	adc.w	r3, r9, r3
 8007f54:	60fb      	str	r3, [r7, #12]
 8007f56:	f04f 0200 	mov.w	r2, #0
 8007f5a:	f04f 0300 	mov.w	r3, #0
 8007f5e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8007f62:	4629      	mov	r1, r5
 8007f64:	024b      	lsls	r3, r1, #9
 8007f66:	4621      	mov	r1, r4
 8007f68:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8007f6c:	4621      	mov	r1, r4
 8007f6e:	024a      	lsls	r2, r1, #9
 8007f70:	4610      	mov	r0, r2
 8007f72:	4619      	mov	r1, r3
 8007f74:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007f76:	2200      	movs	r2, #0
 8007f78:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007f7a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007f7c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8007f80:	f7f8 fe8a 	bl	8000c98 <__aeabi_uldivmod>
 8007f84:	4602      	mov	r2, r0
 8007f86:	460b      	mov	r3, r1
 8007f88:	4613      	mov	r3, r2
 8007f8a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007f8c:	e058      	b.n	8008040 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007f8e:	4b38      	ldr	r3, [pc, #224]	@ (8008070 <HAL_RCC_GetSysClockFreq+0x200>)
 8007f90:	685b      	ldr	r3, [r3, #4]
 8007f92:	099b      	lsrs	r3, r3, #6
 8007f94:	2200      	movs	r2, #0
 8007f96:	4618      	mov	r0, r3
 8007f98:	4611      	mov	r1, r2
 8007f9a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8007f9e:	623b      	str	r3, [r7, #32]
 8007fa0:	2300      	movs	r3, #0
 8007fa2:	627b      	str	r3, [r7, #36]	@ 0x24
 8007fa4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8007fa8:	4642      	mov	r2, r8
 8007faa:	464b      	mov	r3, r9
 8007fac:	f04f 0000 	mov.w	r0, #0
 8007fb0:	f04f 0100 	mov.w	r1, #0
 8007fb4:	0159      	lsls	r1, r3, #5
 8007fb6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007fba:	0150      	lsls	r0, r2, #5
 8007fbc:	4602      	mov	r2, r0
 8007fbe:	460b      	mov	r3, r1
 8007fc0:	4641      	mov	r1, r8
 8007fc2:	ebb2 0a01 	subs.w	sl, r2, r1
 8007fc6:	4649      	mov	r1, r9
 8007fc8:	eb63 0b01 	sbc.w	fp, r3, r1
 8007fcc:	f04f 0200 	mov.w	r2, #0
 8007fd0:	f04f 0300 	mov.w	r3, #0
 8007fd4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8007fd8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8007fdc:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8007fe0:	ebb2 040a 	subs.w	r4, r2, sl
 8007fe4:	eb63 050b 	sbc.w	r5, r3, fp
 8007fe8:	f04f 0200 	mov.w	r2, #0
 8007fec:	f04f 0300 	mov.w	r3, #0
 8007ff0:	00eb      	lsls	r3, r5, #3
 8007ff2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007ff6:	00e2      	lsls	r2, r4, #3
 8007ff8:	4614      	mov	r4, r2
 8007ffa:	461d      	mov	r5, r3
 8007ffc:	4643      	mov	r3, r8
 8007ffe:	18e3      	adds	r3, r4, r3
 8008000:	603b      	str	r3, [r7, #0]
 8008002:	464b      	mov	r3, r9
 8008004:	eb45 0303 	adc.w	r3, r5, r3
 8008008:	607b      	str	r3, [r7, #4]
 800800a:	f04f 0200 	mov.w	r2, #0
 800800e:	f04f 0300 	mov.w	r3, #0
 8008012:	e9d7 4500 	ldrd	r4, r5, [r7]
 8008016:	4629      	mov	r1, r5
 8008018:	028b      	lsls	r3, r1, #10
 800801a:	4621      	mov	r1, r4
 800801c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8008020:	4621      	mov	r1, r4
 8008022:	028a      	lsls	r2, r1, #10
 8008024:	4610      	mov	r0, r2
 8008026:	4619      	mov	r1, r3
 8008028:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800802a:	2200      	movs	r2, #0
 800802c:	61bb      	str	r3, [r7, #24]
 800802e:	61fa      	str	r2, [r7, #28]
 8008030:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008034:	f7f8 fe30 	bl	8000c98 <__aeabi_uldivmod>
 8008038:	4602      	mov	r2, r0
 800803a:	460b      	mov	r3, r1
 800803c:	4613      	mov	r3, r2
 800803e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8008040:	4b0b      	ldr	r3, [pc, #44]	@ (8008070 <HAL_RCC_GetSysClockFreq+0x200>)
 8008042:	685b      	ldr	r3, [r3, #4]
 8008044:	0c1b      	lsrs	r3, r3, #16
 8008046:	f003 0303 	and.w	r3, r3, #3
 800804a:	3301      	adds	r3, #1
 800804c:	005b      	lsls	r3, r3, #1
 800804e:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8008050:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8008052:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008054:	fbb2 f3f3 	udiv	r3, r2, r3
 8008058:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800805a:	e002      	b.n	8008062 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800805c:	4b05      	ldr	r3, [pc, #20]	@ (8008074 <HAL_RCC_GetSysClockFreq+0x204>)
 800805e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8008060:	bf00      	nop
    }
  }
  return sysclockfreq;
 8008062:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8008064:	4618      	mov	r0, r3
 8008066:	3750      	adds	r7, #80	@ 0x50
 8008068:	46bd      	mov	sp, r7
 800806a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800806e:	bf00      	nop
 8008070:	40023800 	.word	0x40023800
 8008074:	00f42400 	.word	0x00f42400
 8008078:	007a1200 	.word	0x007a1200

0800807c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800807c:	b480      	push	{r7}
 800807e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008080:	4b03      	ldr	r3, [pc, #12]	@ (8008090 <HAL_RCC_GetHCLKFreq+0x14>)
 8008082:	681b      	ldr	r3, [r3, #0]
}
 8008084:	4618      	mov	r0, r3
 8008086:	46bd      	mov	sp, r7
 8008088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800808c:	4770      	bx	lr
 800808e:	bf00      	nop
 8008090:	2000d114 	.word	0x2000d114

08008094 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008094:	b580      	push	{r7, lr}
 8008096:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8008098:	f7ff fff0 	bl	800807c <HAL_RCC_GetHCLKFreq>
 800809c:	4602      	mov	r2, r0
 800809e:	4b05      	ldr	r3, [pc, #20]	@ (80080b4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80080a0:	689b      	ldr	r3, [r3, #8]
 80080a2:	0a9b      	lsrs	r3, r3, #10
 80080a4:	f003 0307 	and.w	r3, r3, #7
 80080a8:	4903      	ldr	r1, [pc, #12]	@ (80080b8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80080aa:	5ccb      	ldrb	r3, [r1, r3]
 80080ac:	fa22 f303 	lsr.w	r3, r2, r3
}
 80080b0:	4618      	mov	r0, r3
 80080b2:	bd80      	pop	{r7, pc}
 80080b4:	40023800 	.word	0x40023800
 80080b8:	08010c48 	.word	0x08010c48

080080bc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80080bc:	b580      	push	{r7, lr}
 80080be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80080c0:	f7ff ffdc 	bl	800807c <HAL_RCC_GetHCLKFreq>
 80080c4:	4602      	mov	r2, r0
 80080c6:	4b05      	ldr	r3, [pc, #20]	@ (80080dc <HAL_RCC_GetPCLK2Freq+0x20>)
 80080c8:	689b      	ldr	r3, [r3, #8]
 80080ca:	0b5b      	lsrs	r3, r3, #13
 80080cc:	f003 0307 	and.w	r3, r3, #7
 80080d0:	4903      	ldr	r1, [pc, #12]	@ (80080e0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80080d2:	5ccb      	ldrb	r3, [r1, r3]
 80080d4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80080d8:	4618      	mov	r0, r3
 80080da:	bd80      	pop	{r7, pc}
 80080dc:	40023800 	.word	0x40023800
 80080e0:	08010c48 	.word	0x08010c48

080080e4 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80080e4:	b580      	push	{r7, lr}
 80080e6:	b086      	sub	sp, #24
 80080e8:	af00      	add	r7, sp, #0
 80080ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80080ec:	2300      	movs	r3, #0
 80080ee:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80080f0:	2300      	movs	r3, #0
 80080f2:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	f003 0301 	and.w	r3, r3, #1
 80080fc:	2b00      	cmp	r3, #0
 80080fe:	d105      	bne.n	800810c <HAL_RCCEx_PeriphCLKConfig+0x28>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	f003 0304 	and.w	r3, r3, #4
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8008108:	2b00      	cmp	r3, #0
 800810a:	d038      	beq.n	800817e <HAL_RCCEx_PeriphCLKConfig+0x9a>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800810c:	4b68      	ldr	r3, [pc, #416]	@ (80082b0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800810e:	2200      	movs	r2, #0
 8008110:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8008112:	f7fd fa03 	bl	800551c <HAL_GetTick>
 8008116:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8008118:	e008      	b.n	800812c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800811a:	f7fd f9ff 	bl	800551c <HAL_GetTick>
 800811e:	4602      	mov	r2, r0
 8008120:	697b      	ldr	r3, [r7, #20]
 8008122:	1ad3      	subs	r3, r2, r3
 8008124:	2b02      	cmp	r3, #2
 8008126:	d901      	bls.n	800812c <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008128:	2303      	movs	r3, #3
 800812a:	e0bd      	b.n	80082a8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800812c:	4b61      	ldr	r3, [pc, #388]	@ (80082b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008134:	2b00      	cmp	r3, #0
 8008136:	d1f0      	bne.n	800811a <HAL_RCCEx_PeriphCLKConfig+0x36>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN,
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	685a      	ldr	r2, [r3, #4]
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	689b      	ldr	r3, [r3, #8]
 8008140:	019b      	lsls	r3, r3, #6
 8008142:	431a      	orrs	r2, r3
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	68db      	ldr	r3, [r3, #12]
 8008148:	071b      	lsls	r3, r3, #28
 800814a:	495a      	ldr	r1, [pc, #360]	@ (80082b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800814c:	4313      	orrs	r3, r2
 800814e:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8008152:	4b57      	ldr	r3, [pc, #348]	@ (80082b0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8008154:	2201      	movs	r2, #1
 8008156:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8008158:	f7fd f9e0 	bl	800551c <HAL_GetTick>
 800815c:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800815e:	e008      	b.n	8008172 <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8008160:	f7fd f9dc 	bl	800551c <HAL_GetTick>
 8008164:	4602      	mov	r2, r0
 8008166:	697b      	ldr	r3, [r7, #20]
 8008168:	1ad3      	subs	r3, r2, r3
 800816a:	2b02      	cmp	r3, #2
 800816c:	d901      	bls.n	8008172 <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800816e:	2303      	movs	r3, #3
 8008170:	e09a      	b.n	80082a8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8008172:	4b50      	ldr	r3, [pc, #320]	@ (80082b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800817a:	2b00      	cmp	r3, #0
 800817c:	d0f0      	beq.n	8008160 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	f003 0302 	and.w	r3, r3, #2
 8008186:	2b00      	cmp	r3, #0
 8008188:	f000 8083 	beq.w	8008292 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800818c:	2300      	movs	r3, #0
 800818e:	60fb      	str	r3, [r7, #12]
 8008190:	4b48      	ldr	r3, [pc, #288]	@ (80082b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008192:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008194:	4a47      	ldr	r2, [pc, #284]	@ (80082b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008196:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800819a:	6413      	str	r3, [r2, #64]	@ 0x40
 800819c:	4b45      	ldr	r3, [pc, #276]	@ (80082b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800819e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80081a0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80081a4:	60fb      	str	r3, [r7, #12]
 80081a6:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80081a8:	4b43      	ldr	r3, [pc, #268]	@ (80082b8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	4a42      	ldr	r2, [pc, #264]	@ (80082b8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80081ae:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80081b2:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80081b4:	f7fd f9b2 	bl	800551c <HAL_GetTick>
 80081b8:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 80081ba:	e008      	b.n	80081ce <HAL_RCCEx_PeriphCLKConfig+0xea>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80081bc:	f7fd f9ae 	bl	800551c <HAL_GetTick>
 80081c0:	4602      	mov	r2, r0
 80081c2:	697b      	ldr	r3, [r7, #20]
 80081c4:	1ad3      	subs	r3, r2, r3
 80081c6:	2b02      	cmp	r3, #2
 80081c8:	d901      	bls.n	80081ce <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        return HAL_TIMEOUT;
 80081ca:	2303      	movs	r3, #3
 80081cc:	e06c      	b.n	80082a8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 80081ce:	4b3a      	ldr	r3, [pc, #232]	@ (80082b8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80081d6:	2b00      	cmp	r3, #0
 80081d8:	d0f0      	beq.n	80081bc <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80081da:	4b36      	ldr	r3, [pc, #216]	@ (80082b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80081dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80081de:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80081e2:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80081e4:	693b      	ldr	r3, [r7, #16]
 80081e6:	2b00      	cmp	r3, #0
 80081e8:	d02f      	beq.n	800824a <HAL_RCCEx_PeriphCLKConfig+0x166>
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	691b      	ldr	r3, [r3, #16]
 80081ee:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80081f2:	693a      	ldr	r2, [r7, #16]
 80081f4:	429a      	cmp	r2, r3
 80081f6:	d028      	beq.n	800824a <HAL_RCCEx_PeriphCLKConfig+0x166>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80081f8:	4b2e      	ldr	r3, [pc, #184]	@ (80082b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80081fa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80081fc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008200:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8008202:	4b2e      	ldr	r3, [pc, #184]	@ (80082bc <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8008204:	2201      	movs	r2, #1
 8008206:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8008208:	4b2c      	ldr	r3, [pc, #176]	@ (80082bc <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800820a:	2200      	movs	r2, #0
 800820c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800820e:	4a29      	ldr	r2, [pc, #164]	@ (80082b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008210:	693b      	ldr	r3, [r7, #16]
 8008212:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8008214:	4b27      	ldr	r3, [pc, #156]	@ (80082b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008216:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008218:	f003 0301 	and.w	r3, r3, #1
 800821c:	2b01      	cmp	r3, #1
 800821e:	d114      	bne.n	800824a <HAL_RCCEx_PeriphCLKConfig+0x166>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8008220:	f7fd f97c 	bl	800551c <HAL_GetTick>
 8008224:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008226:	e00a      	b.n	800823e <HAL_RCCEx_PeriphCLKConfig+0x15a>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008228:	f7fd f978 	bl	800551c <HAL_GetTick>
 800822c:	4602      	mov	r2, r0
 800822e:	697b      	ldr	r3, [r7, #20]
 8008230:	1ad3      	subs	r3, r2, r3
 8008232:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008236:	4293      	cmp	r3, r2
 8008238:	d901      	bls.n	800823e <HAL_RCCEx_PeriphCLKConfig+0x15a>
          {
            return HAL_TIMEOUT;
 800823a:	2303      	movs	r3, #3
 800823c:	e034      	b.n	80082a8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800823e:	4b1d      	ldr	r3, [pc, #116]	@ (80082b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008240:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008242:	f003 0302 	and.w	r3, r3, #2
 8008246:	2b00      	cmp	r3, #0
 8008248:	d0ee      	beq.n	8008228 <HAL_RCCEx_PeriphCLKConfig+0x144>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	691b      	ldr	r3, [r3, #16]
 800824e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008252:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008256:	d10d      	bne.n	8008274 <HAL_RCCEx_PeriphCLKConfig+0x190>
 8008258:	4b16      	ldr	r3, [pc, #88]	@ (80082b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800825a:	689b      	ldr	r3, [r3, #8]
 800825c:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	691b      	ldr	r3, [r3, #16]
 8008264:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8008268:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800826c:	4911      	ldr	r1, [pc, #68]	@ (80082b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800826e:	4313      	orrs	r3, r2
 8008270:	608b      	str	r3, [r1, #8]
 8008272:	e005      	b.n	8008280 <HAL_RCCEx_PeriphCLKConfig+0x19c>
 8008274:	4b0f      	ldr	r3, [pc, #60]	@ (80082b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008276:	689b      	ldr	r3, [r3, #8]
 8008278:	4a0e      	ldr	r2, [pc, #56]	@ (80082b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800827a:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 800827e:	6093      	str	r3, [r2, #8]
 8008280:	4b0c      	ldr	r3, [pc, #48]	@ (80082b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008282:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	691b      	ldr	r3, [r3, #16]
 8008288:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800828c:	4909      	ldr	r1, [pc, #36]	@ (80082b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800828e:	4313      	orrs	r3, r2
 8008290:	670b      	str	r3, [r1, #112]	@ 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	f003 0308 	and.w	r3, r3, #8
 800829a:	2b00      	cmp	r3, #0
 800829c:	d003      	beq.n	80082a6 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	7d1a      	ldrb	r2, [r3, #20]
 80082a2:	4b07      	ldr	r3, [pc, #28]	@ (80082c0 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 80082a4:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 80082a6:	2300      	movs	r3, #0
}
 80082a8:	4618      	mov	r0, r3
 80082aa:	3718      	adds	r7, #24
 80082ac:	46bd      	mov	sp, r7
 80082ae:	bd80      	pop	{r7, pc}
 80082b0:	42470068 	.word	0x42470068
 80082b4:	40023800 	.word	0x40023800
 80082b8:	40007000 	.word	0x40007000
 80082bc:	42470e40 	.word	0x42470e40
 80082c0:	424711e0 	.word	0x424711e0

080082c4 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80082c4:	b480      	push	{r7}
 80082c6:	b087      	sub	sp, #28
 80082c8:	af00      	add	r7, sp, #0
 80082ca:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 80082cc:	2300      	movs	r3, #0
 80082ce:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 80082d0:	2300      	movs	r3, #0
 80082d2:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 80082d4:	2300      	movs	r3, #0
 80082d6:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 80082d8:	2300      	movs	r3, #0
 80082da:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	2b01      	cmp	r3, #1
 80082e0:	d141      	bne.n	8008366 <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
  {
    case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 80082e2:	4b25      	ldr	r3, [pc, #148]	@ (8008378 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 80082e4:	689b      	ldr	r3, [r3, #8]
 80082e6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80082ea:	60fb      	str	r3, [r7, #12]
      switch (srcclk)
 80082ec:	68fb      	ldr	r3, [r7, #12]
 80082ee:	2b00      	cmp	r3, #0
 80082f0:	d006      	beq.n	8008300 <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
 80082f2:	68fb      	ldr	r3, [r7, #12]
 80082f4:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80082f8:	d131      	bne.n	800835e <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
      {
        /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
        case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 80082fa:	4b20      	ldr	r3, [pc, #128]	@ (800837c <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 80082fc:	617b      	str	r3, [r7, #20]
          break;
 80082fe:	e031      	b.n	8008364 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
        case RCC_I2SCLKSOURCE_PLLI2S:
        {
#if defined(STM32F411xE)
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
          if ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8008300:	4b1d      	ldr	r3, [pc, #116]	@ (8008378 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8008302:	685b      	ldr	r3, [r3, #4]
 8008304:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008308:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800830c:	d109      	bne.n	8008322 <HAL_RCCEx_GetPeriphCLKFreq+0x5e>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 800830e:	4b1a      	ldr	r3, [pc, #104]	@ (8008378 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8008310:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008314:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008318:	4a19      	ldr	r2, [pc, #100]	@ (8008380 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
 800831a:	fbb2 f3f3 	udiv	r3, r2, r3
 800831e:	613b      	str	r3, [r7, #16]
 8008320:	e008      	b.n	8008334 <HAL_RCCEx_GetPeriphCLKFreq+0x70>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8008322:	4b15      	ldr	r3, [pc, #84]	@ (8008378 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8008324:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008328:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800832c:	4a15      	ldr	r2, [pc, #84]	@ (8008384 <HAL_RCCEx_GetPeriphCLKFreq+0xc0>)
 800832e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008332:	613b      	str	r3, [r7, #16]
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8008334:	4b10      	ldr	r3, [pc, #64]	@ (8008378 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8008336:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800833a:	099b      	lsrs	r3, r3, #6
 800833c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008340:	693b      	ldr	r3, [r7, #16]
 8008342:	fb02 f303 	mul.w	r3, r2, r3
 8008346:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput / (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8008348:	4b0b      	ldr	r3, [pc, #44]	@ (8008378 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 800834a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800834e:	0f1b      	lsrs	r3, r3, #28
 8008350:	f003 0307 	and.w	r3, r3, #7
 8008354:	68ba      	ldr	r2, [r7, #8]
 8008356:	fbb2 f3f3 	udiv	r3, r2, r3
 800835a:	617b      	str	r3, [r7, #20]
          break;
 800835c:	e002      	b.n	8008364 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
        }
        /* Clock not enabled for I2S*/
        default:
        {
          frequency = 0U;
 800835e:	2300      	movs	r3, #0
 8008360:	617b      	str	r3, [r7, #20]
          break;
 8008362:	bf00      	nop
        }
      }
      break;
 8008364:	e000      	b.n	8008368 <HAL_RCCEx_GetPeriphCLKFreq+0xa4>
    }
    default:
    {
      break;
 8008366:	bf00      	nop
    }
  }
  return frequency;
 8008368:	697b      	ldr	r3, [r7, #20]
}
 800836a:	4618      	mov	r0, r3
 800836c:	371c      	adds	r7, #28
 800836e:	46bd      	mov	sp, r7
 8008370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008374:	4770      	bx	lr
 8008376:	bf00      	nop
 8008378:	40023800 	.word	0x40023800
 800837c:	00bb8000 	.word	0x00bb8000
 8008380:	007a1200 	.word	0x007a1200
 8008384:	00f42400 	.word	0x00f42400

08008388 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008388:	b580      	push	{r7, lr}
 800838a:	b082      	sub	sp, #8
 800838c:	af00      	add	r7, sp, #0
 800838e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	2b00      	cmp	r3, #0
 8008394:	d101      	bne.n	800839a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8008396:	2301      	movs	r3, #1
 8008398:	e07b      	b.n	8008492 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800839e:	2b00      	cmp	r3, #0
 80083a0:	d108      	bne.n	80083b4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	685b      	ldr	r3, [r3, #4]
 80083a6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80083aa:	d009      	beq.n	80083c0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	2200      	movs	r2, #0
 80083b0:	61da      	str	r2, [r3, #28]
 80083b2:	e005      	b.n	80083c0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	2200      	movs	r2, #0
 80083b8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	2200      	movs	r2, #0
 80083be:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	2200      	movs	r2, #0
 80083c4:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80083cc:	b2db      	uxtb	r3, r3
 80083ce:	2b00      	cmp	r3, #0
 80083d0:	d106      	bne.n	80083e0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	2200      	movs	r2, #0
 80083d6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80083da:	6878      	ldr	r0, [r7, #4]
 80083dc:	f7fc fab8 	bl	8004950 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	2202      	movs	r2, #2
 80083e4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	681b      	ldr	r3, [r3, #0]
 80083ec:	681a      	ldr	r2, [r3, #0]
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80083f6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	685b      	ldr	r3, [r3, #4]
 80083fc:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	689b      	ldr	r3, [r3, #8]
 8008404:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8008408:	431a      	orrs	r2, r3
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	68db      	ldr	r3, [r3, #12]
 800840e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008412:	431a      	orrs	r2, r3
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	691b      	ldr	r3, [r3, #16]
 8008418:	f003 0302 	and.w	r3, r3, #2
 800841c:	431a      	orrs	r2, r3
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	695b      	ldr	r3, [r3, #20]
 8008422:	f003 0301 	and.w	r3, r3, #1
 8008426:	431a      	orrs	r2, r3
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	699b      	ldr	r3, [r3, #24]
 800842c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008430:	431a      	orrs	r2, r3
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	69db      	ldr	r3, [r3, #28]
 8008436:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800843a:	431a      	orrs	r2, r3
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	6a1b      	ldr	r3, [r3, #32]
 8008440:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008444:	ea42 0103 	orr.w	r1, r2, r3
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800844c:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	681b      	ldr	r3, [r3, #0]
 8008454:	430a      	orrs	r2, r1
 8008456:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	699b      	ldr	r3, [r3, #24]
 800845c:	0c1b      	lsrs	r3, r3, #16
 800845e:	f003 0104 	and.w	r1, r3, #4
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008466:	f003 0210 	and.w	r2, r3, #16
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	681b      	ldr	r3, [r3, #0]
 800846e:	430a      	orrs	r2, r1
 8008470:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	69da      	ldr	r2, [r3, #28]
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8008480:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	2200      	movs	r2, #0
 8008486:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	2201      	movs	r2, #1
 800848c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8008490:	2300      	movs	r3, #0
}
 8008492:	4618      	mov	r0, r3
 8008494:	3708      	adds	r7, #8
 8008496:	46bd      	mov	sp, r7
 8008498:	bd80      	pop	{r7, pc}

0800849a <HAL_SPI_Transmit>:
  * @param  Size amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800849a:	b580      	push	{r7, lr}
 800849c:	b088      	sub	sp, #32
 800849e:	af00      	add	r7, sp, #0
 80084a0:	60f8      	str	r0, [r7, #12]
 80084a2:	60b9      	str	r1, [r7, #8]
 80084a4:	603b      	str	r3, [r7, #0]
 80084a6:	4613      	mov	r3, r2
 80084a8:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80084aa:	f7fd f837 	bl	800551c <HAL_GetTick>
 80084ae:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 80084b0:	88fb      	ldrh	r3, [r7, #6]
 80084b2:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 80084b4:	68fb      	ldr	r3, [r7, #12]
 80084b6:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80084ba:	b2db      	uxtb	r3, r3
 80084bc:	2b01      	cmp	r3, #1
 80084be:	d001      	beq.n	80084c4 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 80084c0:	2302      	movs	r3, #2
 80084c2:	e12a      	b.n	800871a <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 80084c4:	68bb      	ldr	r3, [r7, #8]
 80084c6:	2b00      	cmp	r3, #0
 80084c8:	d002      	beq.n	80084d0 <HAL_SPI_Transmit+0x36>
 80084ca:	88fb      	ldrh	r3, [r7, #6]
 80084cc:	2b00      	cmp	r3, #0
 80084ce:	d101      	bne.n	80084d4 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 80084d0:	2301      	movs	r3, #1
 80084d2:	e122      	b.n	800871a <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80084d4:	68fb      	ldr	r3, [r7, #12]
 80084d6:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80084da:	2b01      	cmp	r3, #1
 80084dc:	d101      	bne.n	80084e2 <HAL_SPI_Transmit+0x48>
 80084de:	2302      	movs	r3, #2
 80084e0:	e11b      	b.n	800871a <HAL_SPI_Transmit+0x280>
 80084e2:	68fb      	ldr	r3, [r7, #12]
 80084e4:	2201      	movs	r2, #1
 80084e6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80084ea:	68fb      	ldr	r3, [r7, #12]
 80084ec:	2203      	movs	r2, #3
 80084ee:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80084f2:	68fb      	ldr	r3, [r7, #12]
 80084f4:	2200      	movs	r2, #0
 80084f6:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 80084f8:	68fb      	ldr	r3, [r7, #12]
 80084fa:	68ba      	ldr	r2, [r7, #8]
 80084fc:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 80084fe:	68fb      	ldr	r3, [r7, #12]
 8008500:	88fa      	ldrh	r2, [r7, #6]
 8008502:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8008504:	68fb      	ldr	r3, [r7, #12]
 8008506:	88fa      	ldrh	r2, [r7, #6]
 8008508:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800850a:	68fb      	ldr	r3, [r7, #12]
 800850c:	2200      	movs	r2, #0
 800850e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8008510:	68fb      	ldr	r3, [r7, #12]
 8008512:	2200      	movs	r2, #0
 8008514:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8008516:	68fb      	ldr	r3, [r7, #12]
 8008518:	2200      	movs	r2, #0
 800851a:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 800851c:	68fb      	ldr	r3, [r7, #12]
 800851e:	2200      	movs	r2, #0
 8008520:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8008522:	68fb      	ldr	r3, [r7, #12]
 8008524:	2200      	movs	r2, #0
 8008526:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008528:	68fb      	ldr	r3, [r7, #12]
 800852a:	689b      	ldr	r3, [r3, #8]
 800852c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008530:	d10f      	bne.n	8008552 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8008532:	68fb      	ldr	r3, [r7, #12]
 8008534:	681b      	ldr	r3, [r3, #0]
 8008536:	681a      	ldr	r2, [r3, #0]
 8008538:	68fb      	ldr	r3, [r7, #12]
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008540:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8008542:	68fb      	ldr	r3, [r7, #12]
 8008544:	681b      	ldr	r3, [r3, #0]
 8008546:	681a      	ldr	r2, [r3, #0]
 8008548:	68fb      	ldr	r3, [r7, #12]
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8008550:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008552:	68fb      	ldr	r3, [r7, #12]
 8008554:	681b      	ldr	r3, [r3, #0]
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800855c:	2b40      	cmp	r3, #64	@ 0x40
 800855e:	d007      	beq.n	8008570 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008560:	68fb      	ldr	r3, [r7, #12]
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	681a      	ldr	r2, [r3, #0]
 8008566:	68fb      	ldr	r3, [r7, #12]
 8008568:	681b      	ldr	r3, [r3, #0]
 800856a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800856e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8008570:	68fb      	ldr	r3, [r7, #12]
 8008572:	68db      	ldr	r3, [r3, #12]
 8008574:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008578:	d152      	bne.n	8008620 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800857a:	68fb      	ldr	r3, [r7, #12]
 800857c:	685b      	ldr	r3, [r3, #4]
 800857e:	2b00      	cmp	r3, #0
 8008580:	d002      	beq.n	8008588 <HAL_SPI_Transmit+0xee>
 8008582:	8b7b      	ldrh	r3, [r7, #26]
 8008584:	2b01      	cmp	r3, #1
 8008586:	d145      	bne.n	8008614 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8008588:	68fb      	ldr	r3, [r7, #12]
 800858a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800858c:	881a      	ldrh	r2, [r3, #0]
 800858e:	68fb      	ldr	r3, [r7, #12]
 8008590:	681b      	ldr	r3, [r3, #0]
 8008592:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8008594:	68fb      	ldr	r3, [r7, #12]
 8008596:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008598:	1c9a      	adds	r2, r3, #2
 800859a:	68fb      	ldr	r3, [r7, #12]
 800859c:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800859e:	68fb      	ldr	r3, [r7, #12]
 80085a0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80085a2:	b29b      	uxth	r3, r3
 80085a4:	3b01      	subs	r3, #1
 80085a6:	b29a      	uxth	r2, r3
 80085a8:	68fb      	ldr	r3, [r7, #12]
 80085aa:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80085ac:	e032      	b.n	8008614 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80085ae:	68fb      	ldr	r3, [r7, #12]
 80085b0:	681b      	ldr	r3, [r3, #0]
 80085b2:	689b      	ldr	r3, [r3, #8]
 80085b4:	f003 0302 	and.w	r3, r3, #2
 80085b8:	2b02      	cmp	r3, #2
 80085ba:	d112      	bne.n	80085e2 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80085bc:	68fb      	ldr	r3, [r7, #12]
 80085be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80085c0:	881a      	ldrh	r2, [r3, #0]
 80085c2:	68fb      	ldr	r3, [r7, #12]
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80085c8:	68fb      	ldr	r3, [r7, #12]
 80085ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80085cc:	1c9a      	adds	r2, r3, #2
 80085ce:	68fb      	ldr	r3, [r7, #12]
 80085d0:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80085d2:	68fb      	ldr	r3, [r7, #12]
 80085d4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80085d6:	b29b      	uxth	r3, r3
 80085d8:	3b01      	subs	r3, #1
 80085da:	b29a      	uxth	r2, r3
 80085dc:	68fb      	ldr	r3, [r7, #12]
 80085de:	86da      	strh	r2, [r3, #54]	@ 0x36
 80085e0:	e018      	b.n	8008614 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80085e2:	f7fc ff9b 	bl	800551c <HAL_GetTick>
 80085e6:	4602      	mov	r2, r0
 80085e8:	69fb      	ldr	r3, [r7, #28]
 80085ea:	1ad3      	subs	r3, r2, r3
 80085ec:	683a      	ldr	r2, [r7, #0]
 80085ee:	429a      	cmp	r2, r3
 80085f0:	d803      	bhi.n	80085fa <HAL_SPI_Transmit+0x160>
 80085f2:	683b      	ldr	r3, [r7, #0]
 80085f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80085f8:	d102      	bne.n	8008600 <HAL_SPI_Transmit+0x166>
 80085fa:	683b      	ldr	r3, [r7, #0]
 80085fc:	2b00      	cmp	r3, #0
 80085fe:	d109      	bne.n	8008614 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8008600:	68fb      	ldr	r3, [r7, #12]
 8008602:	2201      	movs	r2, #1
 8008604:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8008608:	68fb      	ldr	r3, [r7, #12]
 800860a:	2200      	movs	r2, #0
 800860c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8008610:	2303      	movs	r3, #3
 8008612:	e082      	b.n	800871a <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8008614:	68fb      	ldr	r3, [r7, #12]
 8008616:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008618:	b29b      	uxth	r3, r3
 800861a:	2b00      	cmp	r3, #0
 800861c:	d1c7      	bne.n	80085ae <HAL_SPI_Transmit+0x114>
 800861e:	e053      	b.n	80086c8 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008620:	68fb      	ldr	r3, [r7, #12]
 8008622:	685b      	ldr	r3, [r3, #4]
 8008624:	2b00      	cmp	r3, #0
 8008626:	d002      	beq.n	800862e <HAL_SPI_Transmit+0x194>
 8008628:	8b7b      	ldrh	r3, [r7, #26]
 800862a:	2b01      	cmp	r3, #1
 800862c:	d147      	bne.n	80086be <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800862e:	68fb      	ldr	r3, [r7, #12]
 8008630:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008632:	68fb      	ldr	r3, [r7, #12]
 8008634:	681b      	ldr	r3, [r3, #0]
 8008636:	330c      	adds	r3, #12
 8008638:	7812      	ldrb	r2, [r2, #0]
 800863a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800863c:	68fb      	ldr	r3, [r7, #12]
 800863e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008640:	1c5a      	adds	r2, r3, #1
 8008642:	68fb      	ldr	r3, [r7, #12]
 8008644:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8008646:	68fb      	ldr	r3, [r7, #12]
 8008648:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800864a:	b29b      	uxth	r3, r3
 800864c:	3b01      	subs	r3, #1
 800864e:	b29a      	uxth	r2, r3
 8008650:	68fb      	ldr	r3, [r7, #12]
 8008652:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8008654:	e033      	b.n	80086be <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8008656:	68fb      	ldr	r3, [r7, #12]
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	689b      	ldr	r3, [r3, #8]
 800865c:	f003 0302 	and.w	r3, r3, #2
 8008660:	2b02      	cmp	r3, #2
 8008662:	d113      	bne.n	800868c <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8008664:	68fb      	ldr	r3, [r7, #12]
 8008666:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008668:	68fb      	ldr	r3, [r7, #12]
 800866a:	681b      	ldr	r3, [r3, #0]
 800866c:	330c      	adds	r3, #12
 800866e:	7812      	ldrb	r2, [r2, #0]
 8008670:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8008672:	68fb      	ldr	r3, [r7, #12]
 8008674:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008676:	1c5a      	adds	r2, r3, #1
 8008678:	68fb      	ldr	r3, [r7, #12]
 800867a:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800867c:	68fb      	ldr	r3, [r7, #12]
 800867e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008680:	b29b      	uxth	r3, r3
 8008682:	3b01      	subs	r3, #1
 8008684:	b29a      	uxth	r2, r3
 8008686:	68fb      	ldr	r3, [r7, #12]
 8008688:	86da      	strh	r2, [r3, #54]	@ 0x36
 800868a:	e018      	b.n	80086be <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800868c:	f7fc ff46 	bl	800551c <HAL_GetTick>
 8008690:	4602      	mov	r2, r0
 8008692:	69fb      	ldr	r3, [r7, #28]
 8008694:	1ad3      	subs	r3, r2, r3
 8008696:	683a      	ldr	r2, [r7, #0]
 8008698:	429a      	cmp	r2, r3
 800869a:	d803      	bhi.n	80086a4 <HAL_SPI_Transmit+0x20a>
 800869c:	683b      	ldr	r3, [r7, #0]
 800869e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80086a2:	d102      	bne.n	80086aa <HAL_SPI_Transmit+0x210>
 80086a4:	683b      	ldr	r3, [r7, #0]
 80086a6:	2b00      	cmp	r3, #0
 80086a8:	d109      	bne.n	80086be <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80086aa:	68fb      	ldr	r3, [r7, #12]
 80086ac:	2201      	movs	r2, #1
 80086ae:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80086b2:	68fb      	ldr	r3, [r7, #12]
 80086b4:	2200      	movs	r2, #0
 80086b6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80086ba:	2303      	movs	r3, #3
 80086bc:	e02d      	b.n	800871a <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 80086be:	68fb      	ldr	r3, [r7, #12]
 80086c0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80086c2:	b29b      	uxth	r3, r3
 80086c4:	2b00      	cmp	r3, #0
 80086c6:	d1c6      	bne.n	8008656 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80086c8:	69fa      	ldr	r2, [r7, #28]
 80086ca:	6839      	ldr	r1, [r7, #0]
 80086cc:	68f8      	ldr	r0, [r7, #12]
 80086ce:	f000 f8b1 	bl	8008834 <SPI_EndRxTxTransaction>
 80086d2:	4603      	mov	r3, r0
 80086d4:	2b00      	cmp	r3, #0
 80086d6:	d002      	beq.n	80086de <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80086d8:	68fb      	ldr	r3, [r7, #12]
 80086da:	2220      	movs	r2, #32
 80086dc:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80086de:	68fb      	ldr	r3, [r7, #12]
 80086e0:	689b      	ldr	r3, [r3, #8]
 80086e2:	2b00      	cmp	r3, #0
 80086e4:	d10a      	bne.n	80086fc <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80086e6:	2300      	movs	r3, #0
 80086e8:	617b      	str	r3, [r7, #20]
 80086ea:	68fb      	ldr	r3, [r7, #12]
 80086ec:	681b      	ldr	r3, [r3, #0]
 80086ee:	68db      	ldr	r3, [r3, #12]
 80086f0:	617b      	str	r3, [r7, #20]
 80086f2:	68fb      	ldr	r3, [r7, #12]
 80086f4:	681b      	ldr	r3, [r3, #0]
 80086f6:	689b      	ldr	r3, [r3, #8]
 80086f8:	617b      	str	r3, [r7, #20]
 80086fa:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 80086fc:	68fb      	ldr	r3, [r7, #12]
 80086fe:	2201      	movs	r2, #1
 8008700:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8008704:	68fb      	ldr	r3, [r7, #12]
 8008706:	2200      	movs	r2, #0
 8008708:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800870c:	68fb      	ldr	r3, [r7, #12]
 800870e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008710:	2b00      	cmp	r3, #0
 8008712:	d001      	beq.n	8008718 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8008714:	2301      	movs	r3, #1
 8008716:	e000      	b.n	800871a <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8008718:	2300      	movs	r3, #0
  }
}
 800871a:	4618      	mov	r0, r3
 800871c:	3720      	adds	r7, #32
 800871e:	46bd      	mov	sp, r7
 8008720:	bd80      	pop	{r7, pc}
	...

08008724 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8008724:	b580      	push	{r7, lr}
 8008726:	b088      	sub	sp, #32
 8008728:	af00      	add	r7, sp, #0
 800872a:	60f8      	str	r0, [r7, #12]
 800872c:	60b9      	str	r1, [r7, #8]
 800872e:	603b      	str	r3, [r7, #0]
 8008730:	4613      	mov	r3, r2
 8008732:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8008734:	f7fc fef2 	bl	800551c <HAL_GetTick>
 8008738:	4602      	mov	r2, r0
 800873a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800873c:	1a9b      	subs	r3, r3, r2
 800873e:	683a      	ldr	r2, [r7, #0]
 8008740:	4413      	add	r3, r2
 8008742:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8008744:	f7fc feea 	bl	800551c <HAL_GetTick>
 8008748:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800874a:	4b39      	ldr	r3, [pc, #228]	@ (8008830 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800874c:	681b      	ldr	r3, [r3, #0]
 800874e:	015b      	lsls	r3, r3, #5
 8008750:	0d1b      	lsrs	r3, r3, #20
 8008752:	69fa      	ldr	r2, [r7, #28]
 8008754:	fb02 f303 	mul.w	r3, r2, r3
 8008758:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800875a:	e055      	b.n	8008808 <SPI_WaitFlagStateUntilTimeout+0xe4>
  {
    if (Timeout != HAL_MAX_DELAY)
 800875c:	683b      	ldr	r3, [r7, #0]
 800875e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008762:	d051      	beq.n	8008808 <SPI_WaitFlagStateUntilTimeout+0xe4>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8008764:	f7fc feda 	bl	800551c <HAL_GetTick>
 8008768:	4602      	mov	r2, r0
 800876a:	69bb      	ldr	r3, [r7, #24]
 800876c:	1ad3      	subs	r3, r2, r3
 800876e:	69fa      	ldr	r2, [r7, #28]
 8008770:	429a      	cmp	r2, r3
 8008772:	d902      	bls.n	800877a <SPI_WaitFlagStateUntilTimeout+0x56>
 8008774:	69fb      	ldr	r3, [r7, #28]
 8008776:	2b00      	cmp	r3, #0
 8008778:	d13d      	bne.n	80087f6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800877a:	68fb      	ldr	r3, [r7, #12]
 800877c:	681b      	ldr	r3, [r3, #0]
 800877e:	685a      	ldr	r2, [r3, #4]
 8008780:	68fb      	ldr	r3, [r7, #12]
 8008782:	681b      	ldr	r3, [r3, #0]
 8008784:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8008788:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800878a:	68fb      	ldr	r3, [r7, #12]
 800878c:	685b      	ldr	r3, [r3, #4]
 800878e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8008792:	d111      	bne.n	80087b8 <SPI_WaitFlagStateUntilTimeout+0x94>
 8008794:	68fb      	ldr	r3, [r7, #12]
 8008796:	689b      	ldr	r3, [r3, #8]
 8008798:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800879c:	d004      	beq.n	80087a8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800879e:	68fb      	ldr	r3, [r7, #12]
 80087a0:	689b      	ldr	r3, [r3, #8]
 80087a2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80087a6:	d107      	bne.n	80087b8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80087a8:	68fb      	ldr	r3, [r7, #12]
 80087aa:	681b      	ldr	r3, [r3, #0]
 80087ac:	681a      	ldr	r2, [r3, #0]
 80087ae:	68fb      	ldr	r3, [r7, #12]
 80087b0:	681b      	ldr	r3, [r3, #0]
 80087b2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80087b6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80087b8:	68fb      	ldr	r3, [r7, #12]
 80087ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80087bc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80087c0:	d10f      	bne.n	80087e2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80087c2:	68fb      	ldr	r3, [r7, #12]
 80087c4:	681b      	ldr	r3, [r3, #0]
 80087c6:	681a      	ldr	r2, [r3, #0]
 80087c8:	68fb      	ldr	r3, [r7, #12]
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80087d0:	601a      	str	r2, [r3, #0]
 80087d2:	68fb      	ldr	r3, [r7, #12]
 80087d4:	681b      	ldr	r3, [r3, #0]
 80087d6:	681a      	ldr	r2, [r3, #0]
 80087d8:	68fb      	ldr	r3, [r7, #12]
 80087da:	681b      	ldr	r3, [r3, #0]
 80087dc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80087e0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80087e2:	68fb      	ldr	r3, [r7, #12]
 80087e4:	2201      	movs	r2, #1
 80087e6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80087ea:	68fb      	ldr	r3, [r7, #12]
 80087ec:	2200      	movs	r2, #0
 80087ee:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 80087f2:	2303      	movs	r3, #3
 80087f4:	e018      	b.n	8008828 <SPI_WaitFlagStateUntilTimeout+0x104>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80087f6:	697b      	ldr	r3, [r7, #20]
 80087f8:	2b00      	cmp	r3, #0
 80087fa:	d102      	bne.n	8008802 <SPI_WaitFlagStateUntilTimeout+0xde>
      {
        tmp_timeout = 0U;
 80087fc:	2300      	movs	r3, #0
 80087fe:	61fb      	str	r3, [r7, #28]
 8008800:	e002      	b.n	8008808 <SPI_WaitFlagStateUntilTimeout+0xe4>
      }
      else
      {
        count--;
 8008802:	697b      	ldr	r3, [r7, #20]
 8008804:	3b01      	subs	r3, #1
 8008806:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008808:	68fb      	ldr	r3, [r7, #12]
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	689a      	ldr	r2, [r3, #8]
 800880e:	68bb      	ldr	r3, [r7, #8]
 8008810:	4013      	ands	r3, r2
 8008812:	68ba      	ldr	r2, [r7, #8]
 8008814:	429a      	cmp	r2, r3
 8008816:	bf0c      	ite	eq
 8008818:	2301      	moveq	r3, #1
 800881a:	2300      	movne	r3, #0
 800881c:	b2db      	uxtb	r3, r3
 800881e:	461a      	mov	r2, r3
 8008820:	79fb      	ldrb	r3, [r7, #7]
 8008822:	429a      	cmp	r2, r3
 8008824:	d19a      	bne.n	800875c <SPI_WaitFlagStateUntilTimeout+0x38>
      }
    }
  }

  return HAL_OK;
 8008826:	2300      	movs	r3, #0
}
 8008828:	4618      	mov	r0, r3
 800882a:	3720      	adds	r7, #32
 800882c:	46bd      	mov	sp, r7
 800882e:	bd80      	pop	{r7, pc}
 8008830:	2000d114 	.word	0x2000d114

08008834 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8008834:	b580      	push	{r7, lr}
 8008836:	b088      	sub	sp, #32
 8008838:	af02      	add	r7, sp, #8
 800883a:	60f8      	str	r0, [r7, #12]
 800883c:	60b9      	str	r1, [r7, #8]
 800883e:	607a      	str	r2, [r7, #4]
  __IO uint32_t count;

  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	9300      	str	r3, [sp, #0]
 8008844:	68bb      	ldr	r3, [r7, #8]
 8008846:	2201      	movs	r2, #1
 8008848:	2102      	movs	r1, #2
 800884a:	68f8      	ldr	r0, [r7, #12]
 800884c:	f7ff ff6a 	bl	8008724 <SPI_WaitFlagStateUntilTimeout>
 8008850:	4603      	mov	r3, r0
 8008852:	2b00      	cmp	r3, #0
 8008854:	d007      	beq.n	8008866 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008856:	68fb      	ldr	r3, [r7, #12]
 8008858:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800885a:	f043 0220 	orr.w	r2, r3, #32
 800885e:	68fb      	ldr	r3, [r7, #12]
 8008860:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8008862:	2303      	movs	r3, #3
 8008864:	e032      	b.n	80088cc <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in us */
  count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8008866:	4b1b      	ldr	r3, [pc, #108]	@ (80088d4 <SPI_EndRxTxTransaction+0xa0>)
 8008868:	681b      	ldr	r3, [r3, #0]
 800886a:	4a1b      	ldr	r2, [pc, #108]	@ (80088d8 <SPI_EndRxTxTransaction+0xa4>)
 800886c:	fba2 2303 	umull	r2, r3, r2, r3
 8008870:	0d5b      	lsrs	r3, r3, #21
 8008872:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8008876:	fb02 f303 	mul.w	r3, r2, r3
 800887a:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800887c:	68fb      	ldr	r3, [r7, #12]
 800887e:	685b      	ldr	r3, [r3, #4]
 8008880:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8008884:	d112      	bne.n	80088ac <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	9300      	str	r3, [sp, #0]
 800888a:	68bb      	ldr	r3, [r7, #8]
 800888c:	2200      	movs	r2, #0
 800888e:	2180      	movs	r1, #128	@ 0x80
 8008890:	68f8      	ldr	r0, [r7, #12]
 8008892:	f7ff ff47 	bl	8008724 <SPI_WaitFlagStateUntilTimeout>
 8008896:	4603      	mov	r3, r0
 8008898:	2b00      	cmp	r3, #0
 800889a:	d016      	beq.n	80088ca <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800889c:	68fb      	ldr	r3, [r7, #12]
 800889e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80088a0:	f043 0220 	orr.w	r2, r3, #32
 80088a4:	68fb      	ldr	r3, [r7, #12]
 80088a6:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 80088a8:	2303      	movs	r3, #3
 80088aa:	e00f      	b.n	80088cc <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80088ac:	697b      	ldr	r3, [r7, #20]
 80088ae:	2b00      	cmp	r3, #0
 80088b0:	d00a      	beq.n	80088c8 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 80088b2:	697b      	ldr	r3, [r7, #20]
 80088b4:	3b01      	subs	r3, #1
 80088b6:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80088b8:	68fb      	ldr	r3, [r7, #12]
 80088ba:	681b      	ldr	r3, [r3, #0]
 80088bc:	689b      	ldr	r3, [r3, #8]
 80088be:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80088c2:	2b80      	cmp	r3, #128	@ 0x80
 80088c4:	d0f2      	beq.n	80088ac <SPI_EndRxTxTransaction+0x78>
 80088c6:	e000      	b.n	80088ca <SPI_EndRxTxTransaction+0x96>
        break;
 80088c8:	bf00      	nop
  }

  return HAL_OK;
 80088ca:	2300      	movs	r3, #0
}
 80088cc:	4618      	mov	r0, r3
 80088ce:	3718      	adds	r7, #24
 80088d0:	46bd      	mov	sp, r7
 80088d2:	bd80      	pop	{r7, pc}
 80088d4:	2000d114 	.word	0x2000d114
 80088d8:	165e9f81 	.word	0x165e9f81

080088dc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80088dc:	b580      	push	{r7, lr}
 80088de:	b082      	sub	sp, #8
 80088e0:	af00      	add	r7, sp, #0
 80088e2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	2b00      	cmp	r3, #0
 80088e8:	d101      	bne.n	80088ee <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80088ea:	2301      	movs	r3, #1
 80088ec:	e041      	b.n	8008972 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80088f4:	b2db      	uxtb	r3, r3
 80088f6:	2b00      	cmp	r3, #0
 80088f8:	d106      	bne.n	8008908 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	2200      	movs	r2, #0
 80088fe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008902:	6878      	ldr	r0, [r7, #4]
 8008904:	f7fc fb88 	bl	8005018 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	2202      	movs	r2, #2
 800890c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	681a      	ldr	r2, [r3, #0]
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	3304      	adds	r3, #4
 8008918:	4619      	mov	r1, r3
 800891a:	4610      	mov	r0, r2
 800891c:	f000 fd10 	bl	8009340 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	2201      	movs	r2, #1
 8008924:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	2201      	movs	r2, #1
 800892c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	2201      	movs	r2, #1
 8008934:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	2201      	movs	r2, #1
 800893c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	2201      	movs	r2, #1
 8008944:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	2201      	movs	r2, #1
 800894c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	2201      	movs	r2, #1
 8008954:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	2201      	movs	r2, #1
 800895c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	2201      	movs	r2, #1
 8008964:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	2201      	movs	r2, #1
 800896c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8008970:	2300      	movs	r3, #0
}
 8008972:	4618      	mov	r0, r3
 8008974:	3708      	adds	r7, #8
 8008976:	46bd      	mov	sp, r7
 8008978:	bd80      	pop	{r7, pc}
	...

0800897c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800897c:	b480      	push	{r7}
 800897e:	b085      	sub	sp, #20
 8008980:	af00      	add	r7, sp, #0
 8008982:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800898a:	b2db      	uxtb	r3, r3
 800898c:	2b01      	cmp	r3, #1
 800898e:	d001      	beq.n	8008994 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008990:	2301      	movs	r3, #1
 8008992:	e044      	b.n	8008a1e <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	2202      	movs	r2, #2
 8008998:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	681b      	ldr	r3, [r3, #0]
 80089a0:	68da      	ldr	r2, [r3, #12]
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	681b      	ldr	r3, [r3, #0]
 80089a6:	f042 0201 	orr.w	r2, r2, #1
 80089aa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	681b      	ldr	r3, [r3, #0]
 80089b0:	4a1e      	ldr	r2, [pc, #120]	@ (8008a2c <HAL_TIM_Base_Start_IT+0xb0>)
 80089b2:	4293      	cmp	r3, r2
 80089b4:	d018      	beq.n	80089e8 <HAL_TIM_Base_Start_IT+0x6c>
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	681b      	ldr	r3, [r3, #0]
 80089ba:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80089be:	d013      	beq.n	80089e8 <HAL_TIM_Base_Start_IT+0x6c>
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	681b      	ldr	r3, [r3, #0]
 80089c4:	4a1a      	ldr	r2, [pc, #104]	@ (8008a30 <HAL_TIM_Base_Start_IT+0xb4>)
 80089c6:	4293      	cmp	r3, r2
 80089c8:	d00e      	beq.n	80089e8 <HAL_TIM_Base_Start_IT+0x6c>
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	681b      	ldr	r3, [r3, #0]
 80089ce:	4a19      	ldr	r2, [pc, #100]	@ (8008a34 <HAL_TIM_Base_Start_IT+0xb8>)
 80089d0:	4293      	cmp	r3, r2
 80089d2:	d009      	beq.n	80089e8 <HAL_TIM_Base_Start_IT+0x6c>
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	681b      	ldr	r3, [r3, #0]
 80089d8:	4a17      	ldr	r2, [pc, #92]	@ (8008a38 <HAL_TIM_Base_Start_IT+0xbc>)
 80089da:	4293      	cmp	r3, r2
 80089dc:	d004      	beq.n	80089e8 <HAL_TIM_Base_Start_IT+0x6c>
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	681b      	ldr	r3, [r3, #0]
 80089e2:	4a16      	ldr	r2, [pc, #88]	@ (8008a3c <HAL_TIM_Base_Start_IT+0xc0>)
 80089e4:	4293      	cmp	r3, r2
 80089e6:	d111      	bne.n	8008a0c <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	681b      	ldr	r3, [r3, #0]
 80089ec:	689b      	ldr	r3, [r3, #8]
 80089ee:	f003 0307 	and.w	r3, r3, #7
 80089f2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80089f4:	68fb      	ldr	r3, [r7, #12]
 80089f6:	2b06      	cmp	r3, #6
 80089f8:	d010      	beq.n	8008a1c <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	681b      	ldr	r3, [r3, #0]
 80089fe:	681a      	ldr	r2, [r3, #0]
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	f042 0201 	orr.w	r2, r2, #1
 8008a08:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008a0a:	e007      	b.n	8008a1c <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	681b      	ldr	r3, [r3, #0]
 8008a10:	681a      	ldr	r2, [r3, #0]
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	681b      	ldr	r3, [r3, #0]
 8008a16:	f042 0201 	orr.w	r2, r2, #1
 8008a1a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008a1c:	2300      	movs	r3, #0
}
 8008a1e:	4618      	mov	r0, r3
 8008a20:	3714      	adds	r7, #20
 8008a22:	46bd      	mov	sp, r7
 8008a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a28:	4770      	bx	lr
 8008a2a:	bf00      	nop
 8008a2c:	40010000 	.word	0x40010000
 8008a30:	40000400 	.word	0x40000400
 8008a34:	40000800 	.word	0x40000800
 8008a38:	40000c00 	.word	0x40000c00
 8008a3c:	40014000 	.word	0x40014000

08008a40 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8008a40:	b480      	push	{r7}
 8008a42:	b083      	sub	sp, #12
 8008a44:	af00      	add	r7, sp, #0
 8008a46:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	681b      	ldr	r3, [r3, #0]
 8008a4c:	68da      	ldr	r2, [r3, #12]
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	681b      	ldr	r3, [r3, #0]
 8008a52:	f022 0201 	bic.w	r2, r2, #1
 8008a56:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	681b      	ldr	r3, [r3, #0]
 8008a5c:	6a1a      	ldr	r2, [r3, #32]
 8008a5e:	f241 1311 	movw	r3, #4369	@ 0x1111
 8008a62:	4013      	ands	r3, r2
 8008a64:	2b00      	cmp	r3, #0
 8008a66:	d10f      	bne.n	8008a88 <HAL_TIM_Base_Stop_IT+0x48>
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	681b      	ldr	r3, [r3, #0]
 8008a6c:	6a1a      	ldr	r2, [r3, #32]
 8008a6e:	f240 4344 	movw	r3, #1092	@ 0x444
 8008a72:	4013      	ands	r3, r2
 8008a74:	2b00      	cmp	r3, #0
 8008a76:	d107      	bne.n	8008a88 <HAL_TIM_Base_Stop_IT+0x48>
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	681b      	ldr	r3, [r3, #0]
 8008a7c:	681a      	ldr	r2, [r3, #0]
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	681b      	ldr	r3, [r3, #0]
 8008a82:	f022 0201 	bic.w	r2, r2, #1
 8008a86:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	2201      	movs	r2, #1
 8008a8c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 8008a90:	2300      	movs	r3, #0
}
 8008a92:	4618      	mov	r0, r3
 8008a94:	370c      	adds	r7, #12
 8008a96:	46bd      	mov	sp, r7
 8008a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a9c:	4770      	bx	lr

08008a9e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8008a9e:	b580      	push	{r7, lr}
 8008aa0:	b082      	sub	sp, #8
 8008aa2:	af00      	add	r7, sp, #0
 8008aa4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	2b00      	cmp	r3, #0
 8008aaa:	d101      	bne.n	8008ab0 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8008aac:	2301      	movs	r3, #1
 8008aae:	e041      	b.n	8008b34 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008ab6:	b2db      	uxtb	r3, r3
 8008ab8:	2b00      	cmp	r3, #0
 8008aba:	d106      	bne.n	8008aca <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	2200      	movs	r2, #0
 8008ac0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8008ac4:	6878      	ldr	r0, [r7, #4]
 8008ac6:	f000 f839 	bl	8008b3c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	2202      	movs	r2, #2
 8008ace:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	681a      	ldr	r2, [r3, #0]
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	3304      	adds	r3, #4
 8008ada:	4619      	mov	r1, r3
 8008adc:	4610      	mov	r0, r2
 8008ade:	f000 fc2f 	bl	8009340 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	2201      	movs	r2, #1
 8008ae6:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	2201      	movs	r2, #1
 8008aee:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	2201      	movs	r2, #1
 8008af6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	2201      	movs	r2, #1
 8008afe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	2201      	movs	r2, #1
 8008b06:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	2201      	movs	r2, #1
 8008b0e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	2201      	movs	r2, #1
 8008b16:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	2201      	movs	r2, #1
 8008b1e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	2201      	movs	r2, #1
 8008b26:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	2201      	movs	r2, #1
 8008b2e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8008b32:	2300      	movs	r3, #0
}
 8008b34:	4618      	mov	r0, r3
 8008b36:	3708      	adds	r7, #8
 8008b38:	46bd      	mov	sp, r7
 8008b3a:	bd80      	pop	{r7, pc}

08008b3c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8008b3c:	b480      	push	{r7}
 8008b3e:	b083      	sub	sp, #12
 8008b40:	af00      	add	r7, sp, #0
 8008b42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8008b44:	bf00      	nop
 8008b46:	370c      	adds	r7, #12
 8008b48:	46bd      	mov	sp, r7
 8008b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b4e:	4770      	bx	lr

08008b50 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008b50:	b580      	push	{r7, lr}
 8008b52:	b084      	sub	sp, #16
 8008b54:	af00      	add	r7, sp, #0
 8008b56:	6078      	str	r0, [r7, #4]
 8008b58:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8008b5a:	683b      	ldr	r3, [r7, #0]
 8008b5c:	2b00      	cmp	r3, #0
 8008b5e:	d109      	bne.n	8008b74 <HAL_TIM_PWM_Start+0x24>
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8008b66:	b2db      	uxtb	r3, r3
 8008b68:	2b01      	cmp	r3, #1
 8008b6a:	bf14      	ite	ne
 8008b6c:	2301      	movne	r3, #1
 8008b6e:	2300      	moveq	r3, #0
 8008b70:	b2db      	uxtb	r3, r3
 8008b72:	e022      	b.n	8008bba <HAL_TIM_PWM_Start+0x6a>
 8008b74:	683b      	ldr	r3, [r7, #0]
 8008b76:	2b04      	cmp	r3, #4
 8008b78:	d109      	bne.n	8008b8e <HAL_TIM_PWM_Start+0x3e>
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8008b80:	b2db      	uxtb	r3, r3
 8008b82:	2b01      	cmp	r3, #1
 8008b84:	bf14      	ite	ne
 8008b86:	2301      	movne	r3, #1
 8008b88:	2300      	moveq	r3, #0
 8008b8a:	b2db      	uxtb	r3, r3
 8008b8c:	e015      	b.n	8008bba <HAL_TIM_PWM_Start+0x6a>
 8008b8e:	683b      	ldr	r3, [r7, #0]
 8008b90:	2b08      	cmp	r3, #8
 8008b92:	d109      	bne.n	8008ba8 <HAL_TIM_PWM_Start+0x58>
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8008b9a:	b2db      	uxtb	r3, r3
 8008b9c:	2b01      	cmp	r3, #1
 8008b9e:	bf14      	ite	ne
 8008ba0:	2301      	movne	r3, #1
 8008ba2:	2300      	moveq	r3, #0
 8008ba4:	b2db      	uxtb	r3, r3
 8008ba6:	e008      	b.n	8008bba <HAL_TIM_PWM_Start+0x6a>
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008bae:	b2db      	uxtb	r3, r3
 8008bb0:	2b01      	cmp	r3, #1
 8008bb2:	bf14      	ite	ne
 8008bb4:	2301      	movne	r3, #1
 8008bb6:	2300      	moveq	r3, #0
 8008bb8:	b2db      	uxtb	r3, r3
 8008bba:	2b00      	cmp	r3, #0
 8008bbc:	d001      	beq.n	8008bc2 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8008bbe:	2301      	movs	r3, #1
 8008bc0:	e068      	b.n	8008c94 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008bc2:	683b      	ldr	r3, [r7, #0]
 8008bc4:	2b00      	cmp	r3, #0
 8008bc6:	d104      	bne.n	8008bd2 <HAL_TIM_PWM_Start+0x82>
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	2202      	movs	r2, #2
 8008bcc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008bd0:	e013      	b.n	8008bfa <HAL_TIM_PWM_Start+0xaa>
 8008bd2:	683b      	ldr	r3, [r7, #0]
 8008bd4:	2b04      	cmp	r3, #4
 8008bd6:	d104      	bne.n	8008be2 <HAL_TIM_PWM_Start+0x92>
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	2202      	movs	r2, #2
 8008bdc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008be0:	e00b      	b.n	8008bfa <HAL_TIM_PWM_Start+0xaa>
 8008be2:	683b      	ldr	r3, [r7, #0]
 8008be4:	2b08      	cmp	r3, #8
 8008be6:	d104      	bne.n	8008bf2 <HAL_TIM_PWM_Start+0xa2>
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	2202      	movs	r2, #2
 8008bec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008bf0:	e003      	b.n	8008bfa <HAL_TIM_PWM_Start+0xaa>
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	2202      	movs	r2, #2
 8008bf6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	681b      	ldr	r3, [r3, #0]
 8008bfe:	2201      	movs	r2, #1
 8008c00:	6839      	ldr	r1, [r7, #0]
 8008c02:	4618      	mov	r0, r3
 8008c04:	f000 fe48 	bl	8009898 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	681b      	ldr	r3, [r3, #0]
 8008c0c:	4a23      	ldr	r2, [pc, #140]	@ (8008c9c <HAL_TIM_PWM_Start+0x14c>)
 8008c0e:	4293      	cmp	r3, r2
 8008c10:	d107      	bne.n	8008c22 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	681b      	ldr	r3, [r3, #0]
 8008c16:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	681b      	ldr	r3, [r3, #0]
 8008c1c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8008c20:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	681b      	ldr	r3, [r3, #0]
 8008c26:	4a1d      	ldr	r2, [pc, #116]	@ (8008c9c <HAL_TIM_PWM_Start+0x14c>)
 8008c28:	4293      	cmp	r3, r2
 8008c2a:	d018      	beq.n	8008c5e <HAL_TIM_PWM_Start+0x10e>
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	681b      	ldr	r3, [r3, #0]
 8008c30:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008c34:	d013      	beq.n	8008c5e <HAL_TIM_PWM_Start+0x10e>
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	681b      	ldr	r3, [r3, #0]
 8008c3a:	4a19      	ldr	r2, [pc, #100]	@ (8008ca0 <HAL_TIM_PWM_Start+0x150>)
 8008c3c:	4293      	cmp	r3, r2
 8008c3e:	d00e      	beq.n	8008c5e <HAL_TIM_PWM_Start+0x10e>
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	681b      	ldr	r3, [r3, #0]
 8008c44:	4a17      	ldr	r2, [pc, #92]	@ (8008ca4 <HAL_TIM_PWM_Start+0x154>)
 8008c46:	4293      	cmp	r3, r2
 8008c48:	d009      	beq.n	8008c5e <HAL_TIM_PWM_Start+0x10e>
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	681b      	ldr	r3, [r3, #0]
 8008c4e:	4a16      	ldr	r2, [pc, #88]	@ (8008ca8 <HAL_TIM_PWM_Start+0x158>)
 8008c50:	4293      	cmp	r3, r2
 8008c52:	d004      	beq.n	8008c5e <HAL_TIM_PWM_Start+0x10e>
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	681b      	ldr	r3, [r3, #0]
 8008c58:	4a14      	ldr	r2, [pc, #80]	@ (8008cac <HAL_TIM_PWM_Start+0x15c>)
 8008c5a:	4293      	cmp	r3, r2
 8008c5c:	d111      	bne.n	8008c82 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	681b      	ldr	r3, [r3, #0]
 8008c62:	689b      	ldr	r3, [r3, #8]
 8008c64:	f003 0307 	and.w	r3, r3, #7
 8008c68:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008c6a:	68fb      	ldr	r3, [r7, #12]
 8008c6c:	2b06      	cmp	r3, #6
 8008c6e:	d010      	beq.n	8008c92 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	681b      	ldr	r3, [r3, #0]
 8008c74:	681a      	ldr	r2, [r3, #0]
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	681b      	ldr	r3, [r3, #0]
 8008c7a:	f042 0201 	orr.w	r2, r2, #1
 8008c7e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008c80:	e007      	b.n	8008c92 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	681b      	ldr	r3, [r3, #0]
 8008c86:	681a      	ldr	r2, [r3, #0]
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	681b      	ldr	r3, [r3, #0]
 8008c8c:	f042 0201 	orr.w	r2, r2, #1
 8008c90:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008c92:	2300      	movs	r3, #0
}
 8008c94:	4618      	mov	r0, r3
 8008c96:	3710      	adds	r7, #16
 8008c98:	46bd      	mov	sp, r7
 8008c9a:	bd80      	pop	{r7, pc}
 8008c9c:	40010000 	.word	0x40010000
 8008ca0:	40000400 	.word	0x40000400
 8008ca4:	40000800 	.word	0x40000800
 8008ca8:	40000c00 	.word	0x40000c00
 8008cac:	40014000 	.word	0x40014000

08008cb0 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8008cb0:	b580      	push	{r7, lr}
 8008cb2:	b086      	sub	sp, #24
 8008cb4:	af00      	add	r7, sp, #0
 8008cb6:	6078      	str	r0, [r7, #4]
 8008cb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	2b00      	cmp	r3, #0
 8008cbe:	d101      	bne.n	8008cc4 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8008cc0:	2301      	movs	r3, #1
 8008cc2:	e097      	b.n	8008df4 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008cca:	b2db      	uxtb	r3, r3
 8008ccc:	2b00      	cmp	r3, #0
 8008cce:	d106      	bne.n	8008cde <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	2200      	movs	r2, #0
 8008cd4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8008cd8:	6878      	ldr	r0, [r7, #4]
 8008cda:	f7fc f9ff 	bl	80050dc <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	2202      	movs	r2, #2
 8008ce2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	681b      	ldr	r3, [r3, #0]
 8008cea:	689b      	ldr	r3, [r3, #8]
 8008cec:	687a      	ldr	r2, [r7, #4]
 8008cee:	6812      	ldr	r2, [r2, #0]
 8008cf0:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008cf4:	f023 0307 	bic.w	r3, r3, #7
 8008cf8:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	681a      	ldr	r2, [r3, #0]
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	3304      	adds	r3, #4
 8008d02:	4619      	mov	r1, r3
 8008d04:	4610      	mov	r0, r2
 8008d06:	f000 fb1b 	bl	8009340 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	681b      	ldr	r3, [r3, #0]
 8008d0e:	689b      	ldr	r3, [r3, #8]
 8008d10:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	681b      	ldr	r3, [r3, #0]
 8008d16:	699b      	ldr	r3, [r3, #24]
 8008d18:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	681b      	ldr	r3, [r3, #0]
 8008d1e:	6a1b      	ldr	r3, [r3, #32]
 8008d20:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8008d22:	683b      	ldr	r3, [r7, #0]
 8008d24:	681b      	ldr	r3, [r3, #0]
 8008d26:	697a      	ldr	r2, [r7, #20]
 8008d28:	4313      	orrs	r3, r2
 8008d2a:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8008d2c:	693b      	ldr	r3, [r7, #16]
 8008d2e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008d32:	f023 0303 	bic.w	r3, r3, #3
 8008d36:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8008d38:	683b      	ldr	r3, [r7, #0]
 8008d3a:	689a      	ldr	r2, [r3, #8]
 8008d3c:	683b      	ldr	r3, [r7, #0]
 8008d3e:	699b      	ldr	r3, [r3, #24]
 8008d40:	021b      	lsls	r3, r3, #8
 8008d42:	4313      	orrs	r3, r2
 8008d44:	693a      	ldr	r2, [r7, #16]
 8008d46:	4313      	orrs	r3, r2
 8008d48:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8008d4a:	693b      	ldr	r3, [r7, #16]
 8008d4c:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8008d50:	f023 030c 	bic.w	r3, r3, #12
 8008d54:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8008d56:	693b      	ldr	r3, [r7, #16]
 8008d58:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8008d5c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8008d60:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8008d62:	683b      	ldr	r3, [r7, #0]
 8008d64:	68da      	ldr	r2, [r3, #12]
 8008d66:	683b      	ldr	r3, [r7, #0]
 8008d68:	69db      	ldr	r3, [r3, #28]
 8008d6a:	021b      	lsls	r3, r3, #8
 8008d6c:	4313      	orrs	r3, r2
 8008d6e:	693a      	ldr	r2, [r7, #16]
 8008d70:	4313      	orrs	r3, r2
 8008d72:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8008d74:	683b      	ldr	r3, [r7, #0]
 8008d76:	691b      	ldr	r3, [r3, #16]
 8008d78:	011a      	lsls	r2, r3, #4
 8008d7a:	683b      	ldr	r3, [r7, #0]
 8008d7c:	6a1b      	ldr	r3, [r3, #32]
 8008d7e:	031b      	lsls	r3, r3, #12
 8008d80:	4313      	orrs	r3, r2
 8008d82:	693a      	ldr	r2, [r7, #16]
 8008d84:	4313      	orrs	r3, r2
 8008d86:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8008d88:	68fb      	ldr	r3, [r7, #12]
 8008d8a:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8008d8e:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8008d90:	68fb      	ldr	r3, [r7, #12]
 8008d92:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8008d96:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8008d98:	683b      	ldr	r3, [r7, #0]
 8008d9a:	685a      	ldr	r2, [r3, #4]
 8008d9c:	683b      	ldr	r3, [r7, #0]
 8008d9e:	695b      	ldr	r3, [r3, #20]
 8008da0:	011b      	lsls	r3, r3, #4
 8008da2:	4313      	orrs	r3, r2
 8008da4:	68fa      	ldr	r2, [r7, #12]
 8008da6:	4313      	orrs	r3, r2
 8008da8:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	681b      	ldr	r3, [r3, #0]
 8008dae:	697a      	ldr	r2, [r7, #20]
 8008db0:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	681b      	ldr	r3, [r3, #0]
 8008db6:	693a      	ldr	r2, [r7, #16]
 8008db8:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	681b      	ldr	r3, [r3, #0]
 8008dbe:	68fa      	ldr	r2, [r7, #12]
 8008dc0:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	2201      	movs	r2, #1
 8008dc6:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	2201      	movs	r2, #1
 8008dce:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	2201      	movs	r2, #1
 8008dd6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	2201      	movs	r2, #1
 8008dde:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	2201      	movs	r2, #1
 8008de6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	2201      	movs	r2, #1
 8008dee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8008df2:	2300      	movs	r3, #0
}
 8008df4:	4618      	mov	r0, r3
 8008df6:	3718      	adds	r7, #24
 8008df8:	46bd      	mov	sp, r7
 8008dfa:	bd80      	pop	{r7, pc}

08008dfc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008dfc:	b580      	push	{r7, lr}
 8008dfe:	b084      	sub	sp, #16
 8008e00:	af00      	add	r7, sp, #0
 8008e02:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	681b      	ldr	r3, [r3, #0]
 8008e08:	68db      	ldr	r3, [r3, #12]
 8008e0a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	681b      	ldr	r3, [r3, #0]
 8008e10:	691b      	ldr	r3, [r3, #16]
 8008e12:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8008e14:	68bb      	ldr	r3, [r7, #8]
 8008e16:	f003 0302 	and.w	r3, r3, #2
 8008e1a:	2b00      	cmp	r3, #0
 8008e1c:	d020      	beq.n	8008e60 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8008e1e:	68fb      	ldr	r3, [r7, #12]
 8008e20:	f003 0302 	and.w	r3, r3, #2
 8008e24:	2b00      	cmp	r3, #0
 8008e26:	d01b      	beq.n	8008e60 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	681b      	ldr	r3, [r3, #0]
 8008e2c:	f06f 0202 	mvn.w	r2, #2
 8008e30:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	2201      	movs	r2, #1
 8008e36:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	681b      	ldr	r3, [r3, #0]
 8008e3c:	699b      	ldr	r3, [r3, #24]
 8008e3e:	f003 0303 	and.w	r3, r3, #3
 8008e42:	2b00      	cmp	r3, #0
 8008e44:	d003      	beq.n	8008e4e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008e46:	6878      	ldr	r0, [r7, #4]
 8008e48:	f000 fa5b 	bl	8009302 <HAL_TIM_IC_CaptureCallback>
 8008e4c:	e005      	b.n	8008e5a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008e4e:	6878      	ldr	r0, [r7, #4]
 8008e50:	f000 fa4d 	bl	80092ee <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008e54:	6878      	ldr	r0, [r7, #4]
 8008e56:	f000 fa5e 	bl	8009316 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	2200      	movs	r2, #0
 8008e5e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8008e60:	68bb      	ldr	r3, [r7, #8]
 8008e62:	f003 0304 	and.w	r3, r3, #4
 8008e66:	2b00      	cmp	r3, #0
 8008e68:	d020      	beq.n	8008eac <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8008e6a:	68fb      	ldr	r3, [r7, #12]
 8008e6c:	f003 0304 	and.w	r3, r3, #4
 8008e70:	2b00      	cmp	r3, #0
 8008e72:	d01b      	beq.n	8008eac <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	681b      	ldr	r3, [r3, #0]
 8008e78:	f06f 0204 	mvn.w	r2, #4
 8008e7c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	2202      	movs	r2, #2
 8008e82:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	681b      	ldr	r3, [r3, #0]
 8008e88:	699b      	ldr	r3, [r3, #24]
 8008e8a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008e8e:	2b00      	cmp	r3, #0
 8008e90:	d003      	beq.n	8008e9a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008e92:	6878      	ldr	r0, [r7, #4]
 8008e94:	f000 fa35 	bl	8009302 <HAL_TIM_IC_CaptureCallback>
 8008e98:	e005      	b.n	8008ea6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008e9a:	6878      	ldr	r0, [r7, #4]
 8008e9c:	f000 fa27 	bl	80092ee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008ea0:	6878      	ldr	r0, [r7, #4]
 8008ea2:	f000 fa38 	bl	8009316 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	2200      	movs	r2, #0
 8008eaa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8008eac:	68bb      	ldr	r3, [r7, #8]
 8008eae:	f003 0308 	and.w	r3, r3, #8
 8008eb2:	2b00      	cmp	r3, #0
 8008eb4:	d020      	beq.n	8008ef8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8008eb6:	68fb      	ldr	r3, [r7, #12]
 8008eb8:	f003 0308 	and.w	r3, r3, #8
 8008ebc:	2b00      	cmp	r3, #0
 8008ebe:	d01b      	beq.n	8008ef8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	681b      	ldr	r3, [r3, #0]
 8008ec4:	f06f 0208 	mvn.w	r2, #8
 8008ec8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	2204      	movs	r2, #4
 8008ece:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	681b      	ldr	r3, [r3, #0]
 8008ed4:	69db      	ldr	r3, [r3, #28]
 8008ed6:	f003 0303 	and.w	r3, r3, #3
 8008eda:	2b00      	cmp	r3, #0
 8008edc:	d003      	beq.n	8008ee6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008ede:	6878      	ldr	r0, [r7, #4]
 8008ee0:	f000 fa0f 	bl	8009302 <HAL_TIM_IC_CaptureCallback>
 8008ee4:	e005      	b.n	8008ef2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008ee6:	6878      	ldr	r0, [r7, #4]
 8008ee8:	f000 fa01 	bl	80092ee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008eec:	6878      	ldr	r0, [r7, #4]
 8008eee:	f000 fa12 	bl	8009316 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	2200      	movs	r2, #0
 8008ef6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8008ef8:	68bb      	ldr	r3, [r7, #8]
 8008efa:	f003 0310 	and.w	r3, r3, #16
 8008efe:	2b00      	cmp	r3, #0
 8008f00:	d020      	beq.n	8008f44 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8008f02:	68fb      	ldr	r3, [r7, #12]
 8008f04:	f003 0310 	and.w	r3, r3, #16
 8008f08:	2b00      	cmp	r3, #0
 8008f0a:	d01b      	beq.n	8008f44 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	681b      	ldr	r3, [r3, #0]
 8008f10:	f06f 0210 	mvn.w	r2, #16
 8008f14:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	2208      	movs	r2, #8
 8008f1a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	681b      	ldr	r3, [r3, #0]
 8008f20:	69db      	ldr	r3, [r3, #28]
 8008f22:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008f26:	2b00      	cmp	r3, #0
 8008f28:	d003      	beq.n	8008f32 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008f2a:	6878      	ldr	r0, [r7, #4]
 8008f2c:	f000 f9e9 	bl	8009302 <HAL_TIM_IC_CaptureCallback>
 8008f30:	e005      	b.n	8008f3e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008f32:	6878      	ldr	r0, [r7, #4]
 8008f34:	f000 f9db 	bl	80092ee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008f38:	6878      	ldr	r0, [r7, #4]
 8008f3a:	f000 f9ec 	bl	8009316 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	2200      	movs	r2, #0
 8008f42:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8008f44:	68bb      	ldr	r3, [r7, #8]
 8008f46:	f003 0301 	and.w	r3, r3, #1
 8008f4a:	2b00      	cmp	r3, #0
 8008f4c:	d00c      	beq.n	8008f68 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8008f4e:	68fb      	ldr	r3, [r7, #12]
 8008f50:	f003 0301 	and.w	r3, r3, #1
 8008f54:	2b00      	cmp	r3, #0
 8008f56:	d007      	beq.n	8008f68 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	681b      	ldr	r3, [r3, #0]
 8008f5c:	f06f 0201 	mvn.w	r2, #1
 8008f60:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008f62:	6878      	ldr	r0, [r7, #4]
 8008f64:	f7f9 f9a4 	bl	80022b0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8008f68:	68bb      	ldr	r3, [r7, #8]
 8008f6a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008f6e:	2b00      	cmp	r3, #0
 8008f70:	d00c      	beq.n	8008f8c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8008f72:	68fb      	ldr	r3, [r7, #12]
 8008f74:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008f78:	2b00      	cmp	r3, #0
 8008f7a:	d007      	beq.n	8008f8c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	681b      	ldr	r3, [r3, #0]
 8008f80:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8008f84:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008f86:	6878      	ldr	r0, [r7, #4]
 8008f88:	f000 fd76 	bl	8009a78 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8008f8c:	68bb      	ldr	r3, [r7, #8]
 8008f8e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008f92:	2b00      	cmp	r3, #0
 8008f94:	d00c      	beq.n	8008fb0 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8008f96:	68fb      	ldr	r3, [r7, #12]
 8008f98:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008f9c:	2b00      	cmp	r3, #0
 8008f9e:	d007      	beq.n	8008fb0 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	681b      	ldr	r3, [r3, #0]
 8008fa4:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8008fa8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008faa:	6878      	ldr	r0, [r7, #4]
 8008fac:	f000 f9bd 	bl	800932a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8008fb0:	68bb      	ldr	r3, [r7, #8]
 8008fb2:	f003 0320 	and.w	r3, r3, #32
 8008fb6:	2b00      	cmp	r3, #0
 8008fb8:	d00c      	beq.n	8008fd4 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8008fba:	68fb      	ldr	r3, [r7, #12]
 8008fbc:	f003 0320 	and.w	r3, r3, #32
 8008fc0:	2b00      	cmp	r3, #0
 8008fc2:	d007      	beq.n	8008fd4 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	681b      	ldr	r3, [r3, #0]
 8008fc8:	f06f 0220 	mvn.w	r2, #32
 8008fcc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008fce:	6878      	ldr	r0, [r7, #4]
 8008fd0:	f000 fd48 	bl	8009a64 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008fd4:	bf00      	nop
 8008fd6:	3710      	adds	r7, #16
 8008fd8:	46bd      	mov	sp, r7
 8008fda:	bd80      	pop	{r7, pc}

08008fdc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008fdc:	b580      	push	{r7, lr}
 8008fde:	b086      	sub	sp, #24
 8008fe0:	af00      	add	r7, sp, #0
 8008fe2:	60f8      	str	r0, [r7, #12]
 8008fe4:	60b9      	str	r1, [r7, #8]
 8008fe6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008fe8:	2300      	movs	r3, #0
 8008fea:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008fec:	68fb      	ldr	r3, [r7, #12]
 8008fee:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008ff2:	2b01      	cmp	r3, #1
 8008ff4:	d101      	bne.n	8008ffa <HAL_TIM_PWM_ConfigChannel+0x1e>
 8008ff6:	2302      	movs	r3, #2
 8008ff8:	e0ae      	b.n	8009158 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8008ffa:	68fb      	ldr	r3, [r7, #12]
 8008ffc:	2201      	movs	r2, #1
 8008ffe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	2b0c      	cmp	r3, #12
 8009006:	f200 809f 	bhi.w	8009148 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800900a:	a201      	add	r2, pc, #4	@ (adr r2, 8009010 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800900c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009010:	08009045 	.word	0x08009045
 8009014:	08009149 	.word	0x08009149
 8009018:	08009149 	.word	0x08009149
 800901c:	08009149 	.word	0x08009149
 8009020:	08009085 	.word	0x08009085
 8009024:	08009149 	.word	0x08009149
 8009028:	08009149 	.word	0x08009149
 800902c:	08009149 	.word	0x08009149
 8009030:	080090c7 	.word	0x080090c7
 8009034:	08009149 	.word	0x08009149
 8009038:	08009149 	.word	0x08009149
 800903c:	08009149 	.word	0x08009149
 8009040:	08009107 	.word	0x08009107
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8009044:	68fb      	ldr	r3, [r7, #12]
 8009046:	681b      	ldr	r3, [r3, #0]
 8009048:	68b9      	ldr	r1, [r7, #8]
 800904a:	4618      	mov	r0, r3
 800904c:	f000 f9fe 	bl	800944c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8009050:	68fb      	ldr	r3, [r7, #12]
 8009052:	681b      	ldr	r3, [r3, #0]
 8009054:	699a      	ldr	r2, [r3, #24]
 8009056:	68fb      	ldr	r3, [r7, #12]
 8009058:	681b      	ldr	r3, [r3, #0]
 800905a:	f042 0208 	orr.w	r2, r2, #8
 800905e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8009060:	68fb      	ldr	r3, [r7, #12]
 8009062:	681b      	ldr	r3, [r3, #0]
 8009064:	699a      	ldr	r2, [r3, #24]
 8009066:	68fb      	ldr	r3, [r7, #12]
 8009068:	681b      	ldr	r3, [r3, #0]
 800906a:	f022 0204 	bic.w	r2, r2, #4
 800906e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8009070:	68fb      	ldr	r3, [r7, #12]
 8009072:	681b      	ldr	r3, [r3, #0]
 8009074:	6999      	ldr	r1, [r3, #24]
 8009076:	68bb      	ldr	r3, [r7, #8]
 8009078:	691a      	ldr	r2, [r3, #16]
 800907a:	68fb      	ldr	r3, [r7, #12]
 800907c:	681b      	ldr	r3, [r3, #0]
 800907e:	430a      	orrs	r2, r1
 8009080:	619a      	str	r2, [r3, #24]
      break;
 8009082:	e064      	b.n	800914e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8009084:	68fb      	ldr	r3, [r7, #12]
 8009086:	681b      	ldr	r3, [r3, #0]
 8009088:	68b9      	ldr	r1, [r7, #8]
 800908a:	4618      	mov	r0, r3
 800908c:	f000 fa44 	bl	8009518 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8009090:	68fb      	ldr	r3, [r7, #12]
 8009092:	681b      	ldr	r3, [r3, #0]
 8009094:	699a      	ldr	r2, [r3, #24]
 8009096:	68fb      	ldr	r3, [r7, #12]
 8009098:	681b      	ldr	r3, [r3, #0]
 800909a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800909e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80090a0:	68fb      	ldr	r3, [r7, #12]
 80090a2:	681b      	ldr	r3, [r3, #0]
 80090a4:	699a      	ldr	r2, [r3, #24]
 80090a6:	68fb      	ldr	r3, [r7, #12]
 80090a8:	681b      	ldr	r3, [r3, #0]
 80090aa:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80090ae:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80090b0:	68fb      	ldr	r3, [r7, #12]
 80090b2:	681b      	ldr	r3, [r3, #0]
 80090b4:	6999      	ldr	r1, [r3, #24]
 80090b6:	68bb      	ldr	r3, [r7, #8]
 80090b8:	691b      	ldr	r3, [r3, #16]
 80090ba:	021a      	lsls	r2, r3, #8
 80090bc:	68fb      	ldr	r3, [r7, #12]
 80090be:	681b      	ldr	r3, [r3, #0]
 80090c0:	430a      	orrs	r2, r1
 80090c2:	619a      	str	r2, [r3, #24]
      break;
 80090c4:	e043      	b.n	800914e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80090c6:	68fb      	ldr	r3, [r7, #12]
 80090c8:	681b      	ldr	r3, [r3, #0]
 80090ca:	68b9      	ldr	r1, [r7, #8]
 80090cc:	4618      	mov	r0, r3
 80090ce:	f000 fa8f 	bl	80095f0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80090d2:	68fb      	ldr	r3, [r7, #12]
 80090d4:	681b      	ldr	r3, [r3, #0]
 80090d6:	69da      	ldr	r2, [r3, #28]
 80090d8:	68fb      	ldr	r3, [r7, #12]
 80090da:	681b      	ldr	r3, [r3, #0]
 80090dc:	f042 0208 	orr.w	r2, r2, #8
 80090e0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80090e2:	68fb      	ldr	r3, [r7, #12]
 80090e4:	681b      	ldr	r3, [r3, #0]
 80090e6:	69da      	ldr	r2, [r3, #28]
 80090e8:	68fb      	ldr	r3, [r7, #12]
 80090ea:	681b      	ldr	r3, [r3, #0]
 80090ec:	f022 0204 	bic.w	r2, r2, #4
 80090f0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80090f2:	68fb      	ldr	r3, [r7, #12]
 80090f4:	681b      	ldr	r3, [r3, #0]
 80090f6:	69d9      	ldr	r1, [r3, #28]
 80090f8:	68bb      	ldr	r3, [r7, #8]
 80090fa:	691a      	ldr	r2, [r3, #16]
 80090fc:	68fb      	ldr	r3, [r7, #12]
 80090fe:	681b      	ldr	r3, [r3, #0]
 8009100:	430a      	orrs	r2, r1
 8009102:	61da      	str	r2, [r3, #28]
      break;
 8009104:	e023      	b.n	800914e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8009106:	68fb      	ldr	r3, [r7, #12]
 8009108:	681b      	ldr	r3, [r3, #0]
 800910a:	68b9      	ldr	r1, [r7, #8]
 800910c:	4618      	mov	r0, r3
 800910e:	f000 fad9 	bl	80096c4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8009112:	68fb      	ldr	r3, [r7, #12]
 8009114:	681b      	ldr	r3, [r3, #0]
 8009116:	69da      	ldr	r2, [r3, #28]
 8009118:	68fb      	ldr	r3, [r7, #12]
 800911a:	681b      	ldr	r3, [r3, #0]
 800911c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8009120:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8009122:	68fb      	ldr	r3, [r7, #12]
 8009124:	681b      	ldr	r3, [r3, #0]
 8009126:	69da      	ldr	r2, [r3, #28]
 8009128:	68fb      	ldr	r3, [r7, #12]
 800912a:	681b      	ldr	r3, [r3, #0]
 800912c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8009130:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8009132:	68fb      	ldr	r3, [r7, #12]
 8009134:	681b      	ldr	r3, [r3, #0]
 8009136:	69d9      	ldr	r1, [r3, #28]
 8009138:	68bb      	ldr	r3, [r7, #8]
 800913a:	691b      	ldr	r3, [r3, #16]
 800913c:	021a      	lsls	r2, r3, #8
 800913e:	68fb      	ldr	r3, [r7, #12]
 8009140:	681b      	ldr	r3, [r3, #0]
 8009142:	430a      	orrs	r2, r1
 8009144:	61da      	str	r2, [r3, #28]
      break;
 8009146:	e002      	b.n	800914e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8009148:	2301      	movs	r3, #1
 800914a:	75fb      	strb	r3, [r7, #23]
      break;
 800914c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800914e:	68fb      	ldr	r3, [r7, #12]
 8009150:	2200      	movs	r2, #0
 8009152:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8009156:	7dfb      	ldrb	r3, [r7, #23]
}
 8009158:	4618      	mov	r0, r3
 800915a:	3718      	adds	r7, #24
 800915c:	46bd      	mov	sp, r7
 800915e:	bd80      	pop	{r7, pc}

08009160 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8009160:	b580      	push	{r7, lr}
 8009162:	b084      	sub	sp, #16
 8009164:	af00      	add	r7, sp, #0
 8009166:	6078      	str	r0, [r7, #4]
 8009168:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800916a:	2300      	movs	r3, #0
 800916c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009174:	2b01      	cmp	r3, #1
 8009176:	d101      	bne.n	800917c <HAL_TIM_ConfigClockSource+0x1c>
 8009178:	2302      	movs	r3, #2
 800917a:	e0b4      	b.n	80092e6 <HAL_TIM_ConfigClockSource+0x186>
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	2201      	movs	r2, #1
 8009180:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	2202      	movs	r2, #2
 8009188:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	681b      	ldr	r3, [r3, #0]
 8009190:	689b      	ldr	r3, [r3, #8]
 8009192:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8009194:	68bb      	ldr	r3, [r7, #8]
 8009196:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800919a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800919c:	68bb      	ldr	r3, [r7, #8]
 800919e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80091a2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	681b      	ldr	r3, [r3, #0]
 80091a8:	68ba      	ldr	r2, [r7, #8]
 80091aa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80091ac:	683b      	ldr	r3, [r7, #0]
 80091ae:	681b      	ldr	r3, [r3, #0]
 80091b0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80091b4:	d03e      	beq.n	8009234 <HAL_TIM_ConfigClockSource+0xd4>
 80091b6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80091ba:	f200 8087 	bhi.w	80092cc <HAL_TIM_ConfigClockSource+0x16c>
 80091be:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80091c2:	f000 8086 	beq.w	80092d2 <HAL_TIM_ConfigClockSource+0x172>
 80091c6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80091ca:	d87f      	bhi.n	80092cc <HAL_TIM_ConfigClockSource+0x16c>
 80091cc:	2b70      	cmp	r3, #112	@ 0x70
 80091ce:	d01a      	beq.n	8009206 <HAL_TIM_ConfigClockSource+0xa6>
 80091d0:	2b70      	cmp	r3, #112	@ 0x70
 80091d2:	d87b      	bhi.n	80092cc <HAL_TIM_ConfigClockSource+0x16c>
 80091d4:	2b60      	cmp	r3, #96	@ 0x60
 80091d6:	d050      	beq.n	800927a <HAL_TIM_ConfigClockSource+0x11a>
 80091d8:	2b60      	cmp	r3, #96	@ 0x60
 80091da:	d877      	bhi.n	80092cc <HAL_TIM_ConfigClockSource+0x16c>
 80091dc:	2b50      	cmp	r3, #80	@ 0x50
 80091de:	d03c      	beq.n	800925a <HAL_TIM_ConfigClockSource+0xfa>
 80091e0:	2b50      	cmp	r3, #80	@ 0x50
 80091e2:	d873      	bhi.n	80092cc <HAL_TIM_ConfigClockSource+0x16c>
 80091e4:	2b40      	cmp	r3, #64	@ 0x40
 80091e6:	d058      	beq.n	800929a <HAL_TIM_ConfigClockSource+0x13a>
 80091e8:	2b40      	cmp	r3, #64	@ 0x40
 80091ea:	d86f      	bhi.n	80092cc <HAL_TIM_ConfigClockSource+0x16c>
 80091ec:	2b30      	cmp	r3, #48	@ 0x30
 80091ee:	d064      	beq.n	80092ba <HAL_TIM_ConfigClockSource+0x15a>
 80091f0:	2b30      	cmp	r3, #48	@ 0x30
 80091f2:	d86b      	bhi.n	80092cc <HAL_TIM_ConfigClockSource+0x16c>
 80091f4:	2b20      	cmp	r3, #32
 80091f6:	d060      	beq.n	80092ba <HAL_TIM_ConfigClockSource+0x15a>
 80091f8:	2b20      	cmp	r3, #32
 80091fa:	d867      	bhi.n	80092cc <HAL_TIM_ConfigClockSource+0x16c>
 80091fc:	2b00      	cmp	r3, #0
 80091fe:	d05c      	beq.n	80092ba <HAL_TIM_ConfigClockSource+0x15a>
 8009200:	2b10      	cmp	r3, #16
 8009202:	d05a      	beq.n	80092ba <HAL_TIM_ConfigClockSource+0x15a>
 8009204:	e062      	b.n	80092cc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800920a:	683b      	ldr	r3, [r7, #0]
 800920c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800920e:	683b      	ldr	r3, [r7, #0]
 8009210:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8009212:	683b      	ldr	r3, [r7, #0]
 8009214:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8009216:	f000 fb1f 	bl	8009858 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	681b      	ldr	r3, [r3, #0]
 800921e:	689b      	ldr	r3, [r3, #8]
 8009220:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8009222:	68bb      	ldr	r3, [r7, #8]
 8009224:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8009228:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	681b      	ldr	r3, [r3, #0]
 800922e:	68ba      	ldr	r2, [r7, #8]
 8009230:	609a      	str	r2, [r3, #8]
      break;
 8009232:	e04f      	b.n	80092d4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8009238:	683b      	ldr	r3, [r7, #0]
 800923a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800923c:	683b      	ldr	r3, [r7, #0]
 800923e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8009240:	683b      	ldr	r3, [r7, #0]
 8009242:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8009244:	f000 fb08 	bl	8009858 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	681b      	ldr	r3, [r3, #0]
 800924c:	689a      	ldr	r2, [r3, #8]
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	681b      	ldr	r3, [r3, #0]
 8009252:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8009256:	609a      	str	r2, [r3, #8]
      break;
 8009258:	e03c      	b.n	80092d4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800925e:	683b      	ldr	r3, [r7, #0]
 8009260:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009262:	683b      	ldr	r3, [r7, #0]
 8009264:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009266:	461a      	mov	r2, r3
 8009268:	f000 fa7c 	bl	8009764 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	681b      	ldr	r3, [r3, #0]
 8009270:	2150      	movs	r1, #80	@ 0x50
 8009272:	4618      	mov	r0, r3
 8009274:	f000 fad5 	bl	8009822 <TIM_ITRx_SetConfig>
      break;
 8009278:	e02c      	b.n	80092d4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800927e:	683b      	ldr	r3, [r7, #0]
 8009280:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009282:	683b      	ldr	r3, [r7, #0]
 8009284:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8009286:	461a      	mov	r2, r3
 8009288:	f000 fa9b 	bl	80097c2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	681b      	ldr	r3, [r3, #0]
 8009290:	2160      	movs	r1, #96	@ 0x60
 8009292:	4618      	mov	r0, r3
 8009294:	f000 fac5 	bl	8009822 <TIM_ITRx_SetConfig>
      break;
 8009298:	e01c      	b.n	80092d4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800929e:	683b      	ldr	r3, [r7, #0]
 80092a0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80092a2:	683b      	ldr	r3, [r7, #0]
 80092a4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80092a6:	461a      	mov	r2, r3
 80092a8:	f000 fa5c 	bl	8009764 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	681b      	ldr	r3, [r3, #0]
 80092b0:	2140      	movs	r1, #64	@ 0x40
 80092b2:	4618      	mov	r0, r3
 80092b4:	f000 fab5 	bl	8009822 <TIM_ITRx_SetConfig>
      break;
 80092b8:	e00c      	b.n	80092d4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	681a      	ldr	r2, [r3, #0]
 80092be:	683b      	ldr	r3, [r7, #0]
 80092c0:	681b      	ldr	r3, [r3, #0]
 80092c2:	4619      	mov	r1, r3
 80092c4:	4610      	mov	r0, r2
 80092c6:	f000 faac 	bl	8009822 <TIM_ITRx_SetConfig>
      break;
 80092ca:	e003      	b.n	80092d4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80092cc:	2301      	movs	r3, #1
 80092ce:	73fb      	strb	r3, [r7, #15]
      break;
 80092d0:	e000      	b.n	80092d4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80092d2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	2201      	movs	r2, #1
 80092d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	2200      	movs	r2, #0
 80092e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80092e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80092e6:	4618      	mov	r0, r3
 80092e8:	3710      	adds	r7, #16
 80092ea:	46bd      	mov	sp, r7
 80092ec:	bd80      	pop	{r7, pc}

080092ee <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80092ee:	b480      	push	{r7}
 80092f0:	b083      	sub	sp, #12
 80092f2:	af00      	add	r7, sp, #0
 80092f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80092f6:	bf00      	nop
 80092f8:	370c      	adds	r7, #12
 80092fa:	46bd      	mov	sp, r7
 80092fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009300:	4770      	bx	lr

08009302 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009302:	b480      	push	{r7}
 8009304:	b083      	sub	sp, #12
 8009306:	af00      	add	r7, sp, #0
 8009308:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800930a:	bf00      	nop
 800930c:	370c      	adds	r7, #12
 800930e:	46bd      	mov	sp, r7
 8009310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009314:	4770      	bx	lr

08009316 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009316:	b480      	push	{r7}
 8009318:	b083      	sub	sp, #12
 800931a:	af00      	add	r7, sp, #0
 800931c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800931e:	bf00      	nop
 8009320:	370c      	adds	r7, #12
 8009322:	46bd      	mov	sp, r7
 8009324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009328:	4770      	bx	lr

0800932a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800932a:	b480      	push	{r7}
 800932c:	b083      	sub	sp, #12
 800932e:	af00      	add	r7, sp, #0
 8009330:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009332:	bf00      	nop
 8009334:	370c      	adds	r7, #12
 8009336:	46bd      	mov	sp, r7
 8009338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800933c:	4770      	bx	lr
	...

08009340 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8009340:	b480      	push	{r7}
 8009342:	b085      	sub	sp, #20
 8009344:	af00      	add	r7, sp, #0
 8009346:	6078      	str	r0, [r7, #4]
 8009348:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	681b      	ldr	r3, [r3, #0]
 800934e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	4a37      	ldr	r2, [pc, #220]	@ (8009430 <TIM_Base_SetConfig+0xf0>)
 8009354:	4293      	cmp	r3, r2
 8009356:	d00f      	beq.n	8009378 <TIM_Base_SetConfig+0x38>
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800935e:	d00b      	beq.n	8009378 <TIM_Base_SetConfig+0x38>
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	4a34      	ldr	r2, [pc, #208]	@ (8009434 <TIM_Base_SetConfig+0xf4>)
 8009364:	4293      	cmp	r3, r2
 8009366:	d007      	beq.n	8009378 <TIM_Base_SetConfig+0x38>
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	4a33      	ldr	r2, [pc, #204]	@ (8009438 <TIM_Base_SetConfig+0xf8>)
 800936c:	4293      	cmp	r3, r2
 800936e:	d003      	beq.n	8009378 <TIM_Base_SetConfig+0x38>
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	4a32      	ldr	r2, [pc, #200]	@ (800943c <TIM_Base_SetConfig+0xfc>)
 8009374:	4293      	cmp	r3, r2
 8009376:	d108      	bne.n	800938a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009378:	68fb      	ldr	r3, [r7, #12]
 800937a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800937e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009380:	683b      	ldr	r3, [r7, #0]
 8009382:	685b      	ldr	r3, [r3, #4]
 8009384:	68fa      	ldr	r2, [r7, #12]
 8009386:	4313      	orrs	r3, r2
 8009388:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	4a28      	ldr	r2, [pc, #160]	@ (8009430 <TIM_Base_SetConfig+0xf0>)
 800938e:	4293      	cmp	r3, r2
 8009390:	d01b      	beq.n	80093ca <TIM_Base_SetConfig+0x8a>
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009398:	d017      	beq.n	80093ca <TIM_Base_SetConfig+0x8a>
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	4a25      	ldr	r2, [pc, #148]	@ (8009434 <TIM_Base_SetConfig+0xf4>)
 800939e:	4293      	cmp	r3, r2
 80093a0:	d013      	beq.n	80093ca <TIM_Base_SetConfig+0x8a>
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	4a24      	ldr	r2, [pc, #144]	@ (8009438 <TIM_Base_SetConfig+0xf8>)
 80093a6:	4293      	cmp	r3, r2
 80093a8:	d00f      	beq.n	80093ca <TIM_Base_SetConfig+0x8a>
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	4a23      	ldr	r2, [pc, #140]	@ (800943c <TIM_Base_SetConfig+0xfc>)
 80093ae:	4293      	cmp	r3, r2
 80093b0:	d00b      	beq.n	80093ca <TIM_Base_SetConfig+0x8a>
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	4a22      	ldr	r2, [pc, #136]	@ (8009440 <TIM_Base_SetConfig+0x100>)
 80093b6:	4293      	cmp	r3, r2
 80093b8:	d007      	beq.n	80093ca <TIM_Base_SetConfig+0x8a>
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	4a21      	ldr	r2, [pc, #132]	@ (8009444 <TIM_Base_SetConfig+0x104>)
 80093be:	4293      	cmp	r3, r2
 80093c0:	d003      	beq.n	80093ca <TIM_Base_SetConfig+0x8a>
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	4a20      	ldr	r2, [pc, #128]	@ (8009448 <TIM_Base_SetConfig+0x108>)
 80093c6:	4293      	cmp	r3, r2
 80093c8:	d108      	bne.n	80093dc <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80093ca:	68fb      	ldr	r3, [r7, #12]
 80093cc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80093d0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80093d2:	683b      	ldr	r3, [r7, #0]
 80093d4:	68db      	ldr	r3, [r3, #12]
 80093d6:	68fa      	ldr	r2, [r7, #12]
 80093d8:	4313      	orrs	r3, r2
 80093da:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80093dc:	68fb      	ldr	r3, [r7, #12]
 80093de:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80093e2:	683b      	ldr	r3, [r7, #0]
 80093e4:	695b      	ldr	r3, [r3, #20]
 80093e6:	4313      	orrs	r3, r2
 80093e8:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80093ea:	683b      	ldr	r3, [r7, #0]
 80093ec:	689a      	ldr	r2, [r3, #8]
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80093f2:	683b      	ldr	r3, [r7, #0]
 80093f4:	681a      	ldr	r2, [r3, #0]
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	4a0c      	ldr	r2, [pc, #48]	@ (8009430 <TIM_Base_SetConfig+0xf0>)
 80093fe:	4293      	cmp	r3, r2
 8009400:	d103      	bne.n	800940a <TIM_Base_SetConfig+0xca>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009402:	683b      	ldr	r3, [r7, #0]
 8009404:	691a      	ldr	r2, [r3, #16]
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	681b      	ldr	r3, [r3, #0]
 800940e:	f043 0204 	orr.w	r2, r3, #4
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	2201      	movs	r2, #1
 800941a:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	68fa      	ldr	r2, [r7, #12]
 8009420:	601a      	str	r2, [r3, #0]
}
 8009422:	bf00      	nop
 8009424:	3714      	adds	r7, #20
 8009426:	46bd      	mov	sp, r7
 8009428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800942c:	4770      	bx	lr
 800942e:	bf00      	nop
 8009430:	40010000 	.word	0x40010000
 8009434:	40000400 	.word	0x40000400
 8009438:	40000800 	.word	0x40000800
 800943c:	40000c00 	.word	0x40000c00
 8009440:	40014000 	.word	0x40014000
 8009444:	40014400 	.word	0x40014400
 8009448:	40014800 	.word	0x40014800

0800944c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800944c:	b480      	push	{r7}
 800944e:	b087      	sub	sp, #28
 8009450:	af00      	add	r7, sp, #0
 8009452:	6078      	str	r0, [r7, #4]
 8009454:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	6a1b      	ldr	r3, [r3, #32]
 800945a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	6a1b      	ldr	r3, [r3, #32]
 8009460:	f023 0201 	bic.w	r2, r3, #1
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	685b      	ldr	r3, [r3, #4]
 800946c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	699b      	ldr	r3, [r3, #24]
 8009472:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8009474:	68fb      	ldr	r3, [r7, #12]
 8009476:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800947a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800947c:	68fb      	ldr	r3, [r7, #12]
 800947e:	f023 0303 	bic.w	r3, r3, #3
 8009482:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009484:	683b      	ldr	r3, [r7, #0]
 8009486:	681b      	ldr	r3, [r3, #0]
 8009488:	68fa      	ldr	r2, [r7, #12]
 800948a:	4313      	orrs	r3, r2
 800948c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800948e:	697b      	ldr	r3, [r7, #20]
 8009490:	f023 0302 	bic.w	r3, r3, #2
 8009494:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8009496:	683b      	ldr	r3, [r7, #0]
 8009498:	689b      	ldr	r3, [r3, #8]
 800949a:	697a      	ldr	r2, [r7, #20]
 800949c:	4313      	orrs	r3, r2
 800949e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	4a1c      	ldr	r2, [pc, #112]	@ (8009514 <TIM_OC1_SetConfig+0xc8>)
 80094a4:	4293      	cmp	r3, r2
 80094a6:	d10c      	bne.n	80094c2 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80094a8:	697b      	ldr	r3, [r7, #20]
 80094aa:	f023 0308 	bic.w	r3, r3, #8
 80094ae:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80094b0:	683b      	ldr	r3, [r7, #0]
 80094b2:	68db      	ldr	r3, [r3, #12]
 80094b4:	697a      	ldr	r2, [r7, #20]
 80094b6:	4313      	orrs	r3, r2
 80094b8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80094ba:	697b      	ldr	r3, [r7, #20]
 80094bc:	f023 0304 	bic.w	r3, r3, #4
 80094c0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	4a13      	ldr	r2, [pc, #76]	@ (8009514 <TIM_OC1_SetConfig+0xc8>)
 80094c6:	4293      	cmp	r3, r2
 80094c8:	d111      	bne.n	80094ee <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80094ca:	693b      	ldr	r3, [r7, #16]
 80094cc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80094d0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80094d2:	693b      	ldr	r3, [r7, #16]
 80094d4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80094d8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80094da:	683b      	ldr	r3, [r7, #0]
 80094dc:	695b      	ldr	r3, [r3, #20]
 80094de:	693a      	ldr	r2, [r7, #16]
 80094e0:	4313      	orrs	r3, r2
 80094e2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80094e4:	683b      	ldr	r3, [r7, #0]
 80094e6:	699b      	ldr	r3, [r3, #24]
 80094e8:	693a      	ldr	r2, [r7, #16]
 80094ea:	4313      	orrs	r3, r2
 80094ec:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	693a      	ldr	r2, [r7, #16]
 80094f2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	68fa      	ldr	r2, [r7, #12]
 80094f8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80094fa:	683b      	ldr	r3, [r7, #0]
 80094fc:	685a      	ldr	r2, [r3, #4]
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	697a      	ldr	r2, [r7, #20]
 8009506:	621a      	str	r2, [r3, #32]
}
 8009508:	bf00      	nop
 800950a:	371c      	adds	r7, #28
 800950c:	46bd      	mov	sp, r7
 800950e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009512:	4770      	bx	lr
 8009514:	40010000 	.word	0x40010000

08009518 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009518:	b480      	push	{r7}
 800951a:	b087      	sub	sp, #28
 800951c:	af00      	add	r7, sp, #0
 800951e:	6078      	str	r0, [r7, #4]
 8009520:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	6a1b      	ldr	r3, [r3, #32]
 8009526:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	6a1b      	ldr	r3, [r3, #32]
 800952c:	f023 0210 	bic.w	r2, r3, #16
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	685b      	ldr	r3, [r3, #4]
 8009538:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	699b      	ldr	r3, [r3, #24]
 800953e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8009540:	68fb      	ldr	r3, [r7, #12]
 8009542:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009546:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8009548:	68fb      	ldr	r3, [r7, #12]
 800954a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800954e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009550:	683b      	ldr	r3, [r7, #0]
 8009552:	681b      	ldr	r3, [r3, #0]
 8009554:	021b      	lsls	r3, r3, #8
 8009556:	68fa      	ldr	r2, [r7, #12]
 8009558:	4313      	orrs	r3, r2
 800955a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800955c:	697b      	ldr	r3, [r7, #20]
 800955e:	f023 0320 	bic.w	r3, r3, #32
 8009562:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8009564:	683b      	ldr	r3, [r7, #0]
 8009566:	689b      	ldr	r3, [r3, #8]
 8009568:	011b      	lsls	r3, r3, #4
 800956a:	697a      	ldr	r2, [r7, #20]
 800956c:	4313      	orrs	r3, r2
 800956e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	4a1e      	ldr	r2, [pc, #120]	@ (80095ec <TIM_OC2_SetConfig+0xd4>)
 8009574:	4293      	cmp	r3, r2
 8009576:	d10d      	bne.n	8009594 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8009578:	697b      	ldr	r3, [r7, #20]
 800957a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800957e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8009580:	683b      	ldr	r3, [r7, #0]
 8009582:	68db      	ldr	r3, [r3, #12]
 8009584:	011b      	lsls	r3, r3, #4
 8009586:	697a      	ldr	r2, [r7, #20]
 8009588:	4313      	orrs	r3, r2
 800958a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800958c:	697b      	ldr	r3, [r7, #20]
 800958e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009592:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	4a15      	ldr	r2, [pc, #84]	@ (80095ec <TIM_OC2_SetConfig+0xd4>)
 8009598:	4293      	cmp	r3, r2
 800959a:	d113      	bne.n	80095c4 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800959c:	693b      	ldr	r3, [r7, #16]
 800959e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80095a2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80095a4:	693b      	ldr	r3, [r7, #16]
 80095a6:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80095aa:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80095ac:	683b      	ldr	r3, [r7, #0]
 80095ae:	695b      	ldr	r3, [r3, #20]
 80095b0:	009b      	lsls	r3, r3, #2
 80095b2:	693a      	ldr	r2, [r7, #16]
 80095b4:	4313      	orrs	r3, r2
 80095b6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80095b8:	683b      	ldr	r3, [r7, #0]
 80095ba:	699b      	ldr	r3, [r3, #24]
 80095bc:	009b      	lsls	r3, r3, #2
 80095be:	693a      	ldr	r2, [r7, #16]
 80095c0:	4313      	orrs	r3, r2
 80095c2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	693a      	ldr	r2, [r7, #16]
 80095c8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	68fa      	ldr	r2, [r7, #12]
 80095ce:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80095d0:	683b      	ldr	r3, [r7, #0]
 80095d2:	685a      	ldr	r2, [r3, #4]
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	697a      	ldr	r2, [r7, #20]
 80095dc:	621a      	str	r2, [r3, #32]
}
 80095de:	bf00      	nop
 80095e0:	371c      	adds	r7, #28
 80095e2:	46bd      	mov	sp, r7
 80095e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095e8:	4770      	bx	lr
 80095ea:	bf00      	nop
 80095ec:	40010000 	.word	0x40010000

080095f0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80095f0:	b480      	push	{r7}
 80095f2:	b087      	sub	sp, #28
 80095f4:	af00      	add	r7, sp, #0
 80095f6:	6078      	str	r0, [r7, #4]
 80095f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	6a1b      	ldr	r3, [r3, #32]
 80095fe:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	6a1b      	ldr	r3, [r3, #32]
 8009604:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	685b      	ldr	r3, [r3, #4]
 8009610:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	69db      	ldr	r3, [r3, #28]
 8009616:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8009618:	68fb      	ldr	r3, [r7, #12]
 800961a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800961e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8009620:	68fb      	ldr	r3, [r7, #12]
 8009622:	f023 0303 	bic.w	r3, r3, #3
 8009626:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009628:	683b      	ldr	r3, [r7, #0]
 800962a:	681b      	ldr	r3, [r3, #0]
 800962c:	68fa      	ldr	r2, [r7, #12]
 800962e:	4313      	orrs	r3, r2
 8009630:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8009632:	697b      	ldr	r3, [r7, #20]
 8009634:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8009638:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800963a:	683b      	ldr	r3, [r7, #0]
 800963c:	689b      	ldr	r3, [r3, #8]
 800963e:	021b      	lsls	r3, r3, #8
 8009640:	697a      	ldr	r2, [r7, #20]
 8009642:	4313      	orrs	r3, r2
 8009644:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	4a1d      	ldr	r2, [pc, #116]	@ (80096c0 <TIM_OC3_SetConfig+0xd0>)
 800964a:	4293      	cmp	r3, r2
 800964c:	d10d      	bne.n	800966a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800964e:	697b      	ldr	r3, [r7, #20]
 8009650:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8009654:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8009656:	683b      	ldr	r3, [r7, #0]
 8009658:	68db      	ldr	r3, [r3, #12]
 800965a:	021b      	lsls	r3, r3, #8
 800965c:	697a      	ldr	r2, [r7, #20]
 800965e:	4313      	orrs	r3, r2
 8009660:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8009662:	697b      	ldr	r3, [r7, #20]
 8009664:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8009668:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	4a14      	ldr	r2, [pc, #80]	@ (80096c0 <TIM_OC3_SetConfig+0xd0>)
 800966e:	4293      	cmp	r3, r2
 8009670:	d113      	bne.n	800969a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8009672:	693b      	ldr	r3, [r7, #16]
 8009674:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8009678:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800967a:	693b      	ldr	r3, [r7, #16]
 800967c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8009680:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8009682:	683b      	ldr	r3, [r7, #0]
 8009684:	695b      	ldr	r3, [r3, #20]
 8009686:	011b      	lsls	r3, r3, #4
 8009688:	693a      	ldr	r2, [r7, #16]
 800968a:	4313      	orrs	r3, r2
 800968c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800968e:	683b      	ldr	r3, [r7, #0]
 8009690:	699b      	ldr	r3, [r3, #24]
 8009692:	011b      	lsls	r3, r3, #4
 8009694:	693a      	ldr	r2, [r7, #16]
 8009696:	4313      	orrs	r3, r2
 8009698:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	693a      	ldr	r2, [r7, #16]
 800969e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	68fa      	ldr	r2, [r7, #12]
 80096a4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80096a6:	683b      	ldr	r3, [r7, #0]
 80096a8:	685a      	ldr	r2, [r3, #4]
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	697a      	ldr	r2, [r7, #20]
 80096b2:	621a      	str	r2, [r3, #32]
}
 80096b4:	bf00      	nop
 80096b6:	371c      	adds	r7, #28
 80096b8:	46bd      	mov	sp, r7
 80096ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096be:	4770      	bx	lr
 80096c0:	40010000 	.word	0x40010000

080096c4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80096c4:	b480      	push	{r7}
 80096c6:	b087      	sub	sp, #28
 80096c8:	af00      	add	r7, sp, #0
 80096ca:	6078      	str	r0, [r7, #4]
 80096cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	6a1b      	ldr	r3, [r3, #32]
 80096d2:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	6a1b      	ldr	r3, [r3, #32]
 80096d8:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	685b      	ldr	r3, [r3, #4]
 80096e4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	69db      	ldr	r3, [r3, #28]
 80096ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80096ec:	68fb      	ldr	r3, [r7, #12]
 80096ee:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80096f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80096f4:	68fb      	ldr	r3, [r7, #12]
 80096f6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80096fa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80096fc:	683b      	ldr	r3, [r7, #0]
 80096fe:	681b      	ldr	r3, [r3, #0]
 8009700:	021b      	lsls	r3, r3, #8
 8009702:	68fa      	ldr	r2, [r7, #12]
 8009704:	4313      	orrs	r3, r2
 8009706:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8009708:	693b      	ldr	r3, [r7, #16]
 800970a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800970e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8009710:	683b      	ldr	r3, [r7, #0]
 8009712:	689b      	ldr	r3, [r3, #8]
 8009714:	031b      	lsls	r3, r3, #12
 8009716:	693a      	ldr	r2, [r7, #16]
 8009718:	4313      	orrs	r3, r2
 800971a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	4a10      	ldr	r2, [pc, #64]	@ (8009760 <TIM_OC4_SetConfig+0x9c>)
 8009720:	4293      	cmp	r3, r2
 8009722:	d109      	bne.n	8009738 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8009724:	697b      	ldr	r3, [r7, #20]
 8009726:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800972a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800972c:	683b      	ldr	r3, [r7, #0]
 800972e:	695b      	ldr	r3, [r3, #20]
 8009730:	019b      	lsls	r3, r3, #6
 8009732:	697a      	ldr	r2, [r7, #20]
 8009734:	4313      	orrs	r3, r2
 8009736:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	697a      	ldr	r2, [r7, #20]
 800973c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	68fa      	ldr	r2, [r7, #12]
 8009742:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8009744:	683b      	ldr	r3, [r7, #0]
 8009746:	685a      	ldr	r2, [r3, #4]
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	693a      	ldr	r2, [r7, #16]
 8009750:	621a      	str	r2, [r3, #32]
}
 8009752:	bf00      	nop
 8009754:	371c      	adds	r7, #28
 8009756:	46bd      	mov	sp, r7
 8009758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800975c:	4770      	bx	lr
 800975e:	bf00      	nop
 8009760:	40010000 	.word	0x40010000

08009764 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009764:	b480      	push	{r7}
 8009766:	b087      	sub	sp, #28
 8009768:	af00      	add	r7, sp, #0
 800976a:	60f8      	str	r0, [r7, #12]
 800976c:	60b9      	str	r1, [r7, #8]
 800976e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009770:	68fb      	ldr	r3, [r7, #12]
 8009772:	6a1b      	ldr	r3, [r3, #32]
 8009774:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009776:	68fb      	ldr	r3, [r7, #12]
 8009778:	6a1b      	ldr	r3, [r3, #32]
 800977a:	f023 0201 	bic.w	r2, r3, #1
 800977e:	68fb      	ldr	r3, [r7, #12]
 8009780:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009782:	68fb      	ldr	r3, [r7, #12]
 8009784:	699b      	ldr	r3, [r3, #24]
 8009786:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009788:	693b      	ldr	r3, [r7, #16]
 800978a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800978e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	011b      	lsls	r3, r3, #4
 8009794:	693a      	ldr	r2, [r7, #16]
 8009796:	4313      	orrs	r3, r2
 8009798:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800979a:	697b      	ldr	r3, [r7, #20]
 800979c:	f023 030a 	bic.w	r3, r3, #10
 80097a0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80097a2:	697a      	ldr	r2, [r7, #20]
 80097a4:	68bb      	ldr	r3, [r7, #8]
 80097a6:	4313      	orrs	r3, r2
 80097a8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80097aa:	68fb      	ldr	r3, [r7, #12]
 80097ac:	693a      	ldr	r2, [r7, #16]
 80097ae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80097b0:	68fb      	ldr	r3, [r7, #12]
 80097b2:	697a      	ldr	r2, [r7, #20]
 80097b4:	621a      	str	r2, [r3, #32]
}
 80097b6:	bf00      	nop
 80097b8:	371c      	adds	r7, #28
 80097ba:	46bd      	mov	sp, r7
 80097bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097c0:	4770      	bx	lr

080097c2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80097c2:	b480      	push	{r7}
 80097c4:	b087      	sub	sp, #28
 80097c6:	af00      	add	r7, sp, #0
 80097c8:	60f8      	str	r0, [r7, #12]
 80097ca:	60b9      	str	r1, [r7, #8]
 80097cc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80097ce:	68fb      	ldr	r3, [r7, #12]
 80097d0:	6a1b      	ldr	r3, [r3, #32]
 80097d2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80097d4:	68fb      	ldr	r3, [r7, #12]
 80097d6:	6a1b      	ldr	r3, [r3, #32]
 80097d8:	f023 0210 	bic.w	r2, r3, #16
 80097dc:	68fb      	ldr	r3, [r7, #12]
 80097de:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80097e0:	68fb      	ldr	r3, [r7, #12]
 80097e2:	699b      	ldr	r3, [r3, #24]
 80097e4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80097e6:	693b      	ldr	r3, [r7, #16]
 80097e8:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80097ec:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	031b      	lsls	r3, r3, #12
 80097f2:	693a      	ldr	r2, [r7, #16]
 80097f4:	4313      	orrs	r3, r2
 80097f6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80097f8:	697b      	ldr	r3, [r7, #20]
 80097fa:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80097fe:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009800:	68bb      	ldr	r3, [r7, #8]
 8009802:	011b      	lsls	r3, r3, #4
 8009804:	697a      	ldr	r2, [r7, #20]
 8009806:	4313      	orrs	r3, r2
 8009808:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800980a:	68fb      	ldr	r3, [r7, #12]
 800980c:	693a      	ldr	r2, [r7, #16]
 800980e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009810:	68fb      	ldr	r3, [r7, #12]
 8009812:	697a      	ldr	r2, [r7, #20]
 8009814:	621a      	str	r2, [r3, #32]
}
 8009816:	bf00      	nop
 8009818:	371c      	adds	r7, #28
 800981a:	46bd      	mov	sp, r7
 800981c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009820:	4770      	bx	lr

08009822 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8009822:	b480      	push	{r7}
 8009824:	b085      	sub	sp, #20
 8009826:	af00      	add	r7, sp, #0
 8009828:	6078      	str	r0, [r7, #4]
 800982a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	689b      	ldr	r3, [r3, #8]
 8009830:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009832:	68fb      	ldr	r3, [r7, #12]
 8009834:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009838:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800983a:	683a      	ldr	r2, [r7, #0]
 800983c:	68fb      	ldr	r3, [r7, #12]
 800983e:	4313      	orrs	r3, r2
 8009840:	f043 0307 	orr.w	r3, r3, #7
 8009844:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	68fa      	ldr	r2, [r7, #12]
 800984a:	609a      	str	r2, [r3, #8]
}
 800984c:	bf00      	nop
 800984e:	3714      	adds	r7, #20
 8009850:	46bd      	mov	sp, r7
 8009852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009856:	4770      	bx	lr

08009858 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009858:	b480      	push	{r7}
 800985a:	b087      	sub	sp, #28
 800985c:	af00      	add	r7, sp, #0
 800985e:	60f8      	str	r0, [r7, #12]
 8009860:	60b9      	str	r1, [r7, #8]
 8009862:	607a      	str	r2, [r7, #4]
 8009864:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8009866:	68fb      	ldr	r3, [r7, #12]
 8009868:	689b      	ldr	r3, [r3, #8]
 800986a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800986c:	697b      	ldr	r3, [r7, #20]
 800986e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8009872:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009874:	683b      	ldr	r3, [r7, #0]
 8009876:	021a      	lsls	r2, r3, #8
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	431a      	orrs	r2, r3
 800987c:	68bb      	ldr	r3, [r7, #8]
 800987e:	4313      	orrs	r3, r2
 8009880:	697a      	ldr	r2, [r7, #20]
 8009882:	4313      	orrs	r3, r2
 8009884:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009886:	68fb      	ldr	r3, [r7, #12]
 8009888:	697a      	ldr	r2, [r7, #20]
 800988a:	609a      	str	r2, [r3, #8]
}
 800988c:	bf00      	nop
 800988e:	371c      	adds	r7, #28
 8009890:	46bd      	mov	sp, r7
 8009892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009896:	4770      	bx	lr

08009898 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8009898:	b480      	push	{r7}
 800989a:	b087      	sub	sp, #28
 800989c:	af00      	add	r7, sp, #0
 800989e:	60f8      	str	r0, [r7, #12]
 80098a0:	60b9      	str	r1, [r7, #8]
 80098a2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80098a4:	68bb      	ldr	r3, [r7, #8]
 80098a6:	f003 031f 	and.w	r3, r3, #31
 80098aa:	2201      	movs	r2, #1
 80098ac:	fa02 f303 	lsl.w	r3, r2, r3
 80098b0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80098b2:	68fb      	ldr	r3, [r7, #12]
 80098b4:	6a1a      	ldr	r2, [r3, #32]
 80098b6:	697b      	ldr	r3, [r7, #20]
 80098b8:	43db      	mvns	r3, r3
 80098ba:	401a      	ands	r2, r3
 80098bc:	68fb      	ldr	r3, [r7, #12]
 80098be:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80098c0:	68fb      	ldr	r3, [r7, #12]
 80098c2:	6a1a      	ldr	r2, [r3, #32]
 80098c4:	68bb      	ldr	r3, [r7, #8]
 80098c6:	f003 031f 	and.w	r3, r3, #31
 80098ca:	6879      	ldr	r1, [r7, #4]
 80098cc:	fa01 f303 	lsl.w	r3, r1, r3
 80098d0:	431a      	orrs	r2, r3
 80098d2:	68fb      	ldr	r3, [r7, #12]
 80098d4:	621a      	str	r2, [r3, #32]
}
 80098d6:	bf00      	nop
 80098d8:	371c      	adds	r7, #28
 80098da:	46bd      	mov	sp, r7
 80098dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098e0:	4770      	bx	lr
	...

080098e4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80098e4:	b480      	push	{r7}
 80098e6:	b085      	sub	sp, #20
 80098e8:	af00      	add	r7, sp, #0
 80098ea:	6078      	str	r0, [r7, #4]
 80098ec:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80098f4:	2b01      	cmp	r3, #1
 80098f6:	d101      	bne.n	80098fc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80098f8:	2302      	movs	r3, #2
 80098fa:	e050      	b.n	800999e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	2201      	movs	r2, #1
 8009900:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	2202      	movs	r2, #2
 8009908:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	681b      	ldr	r3, [r3, #0]
 8009910:	685b      	ldr	r3, [r3, #4]
 8009912:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	681b      	ldr	r3, [r3, #0]
 8009918:	689b      	ldr	r3, [r3, #8]
 800991a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800991c:	68fb      	ldr	r3, [r7, #12]
 800991e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009922:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009924:	683b      	ldr	r3, [r7, #0]
 8009926:	681b      	ldr	r3, [r3, #0]
 8009928:	68fa      	ldr	r2, [r7, #12]
 800992a:	4313      	orrs	r3, r2
 800992c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	681b      	ldr	r3, [r3, #0]
 8009932:	68fa      	ldr	r2, [r7, #12]
 8009934:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	681b      	ldr	r3, [r3, #0]
 800993a:	4a1c      	ldr	r2, [pc, #112]	@ (80099ac <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800993c:	4293      	cmp	r3, r2
 800993e:	d018      	beq.n	8009972 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	681b      	ldr	r3, [r3, #0]
 8009944:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009948:	d013      	beq.n	8009972 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	681b      	ldr	r3, [r3, #0]
 800994e:	4a18      	ldr	r2, [pc, #96]	@ (80099b0 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8009950:	4293      	cmp	r3, r2
 8009952:	d00e      	beq.n	8009972 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	681b      	ldr	r3, [r3, #0]
 8009958:	4a16      	ldr	r2, [pc, #88]	@ (80099b4 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800995a:	4293      	cmp	r3, r2
 800995c:	d009      	beq.n	8009972 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	681b      	ldr	r3, [r3, #0]
 8009962:	4a15      	ldr	r2, [pc, #84]	@ (80099b8 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8009964:	4293      	cmp	r3, r2
 8009966:	d004      	beq.n	8009972 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	681b      	ldr	r3, [r3, #0]
 800996c:	4a13      	ldr	r2, [pc, #76]	@ (80099bc <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800996e:	4293      	cmp	r3, r2
 8009970:	d10c      	bne.n	800998c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009972:	68bb      	ldr	r3, [r7, #8]
 8009974:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009978:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800997a:	683b      	ldr	r3, [r7, #0]
 800997c:	685b      	ldr	r3, [r3, #4]
 800997e:	68ba      	ldr	r2, [r7, #8]
 8009980:	4313      	orrs	r3, r2
 8009982:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	681b      	ldr	r3, [r3, #0]
 8009988:	68ba      	ldr	r2, [r7, #8]
 800998a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	2201      	movs	r2, #1
 8009990:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	2200      	movs	r2, #0
 8009998:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800999c:	2300      	movs	r3, #0
}
 800999e:	4618      	mov	r0, r3
 80099a0:	3714      	adds	r7, #20
 80099a2:	46bd      	mov	sp, r7
 80099a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099a8:	4770      	bx	lr
 80099aa:	bf00      	nop
 80099ac:	40010000 	.word	0x40010000
 80099b0:	40000400 	.word	0x40000400
 80099b4:	40000800 	.word	0x40000800
 80099b8:	40000c00 	.word	0x40000c00
 80099bc:	40014000 	.word	0x40014000

080099c0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80099c0:	b480      	push	{r7}
 80099c2:	b085      	sub	sp, #20
 80099c4:	af00      	add	r7, sp, #0
 80099c6:	6078      	str	r0, [r7, #4]
 80099c8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80099ca:	2300      	movs	r3, #0
 80099cc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80099d4:	2b01      	cmp	r3, #1
 80099d6:	d101      	bne.n	80099dc <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80099d8:	2302      	movs	r3, #2
 80099da:	e03d      	b.n	8009a58 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	2201      	movs	r2, #1
 80099e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80099e4:	68fb      	ldr	r3, [r7, #12]
 80099e6:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80099ea:	683b      	ldr	r3, [r7, #0]
 80099ec:	68db      	ldr	r3, [r3, #12]
 80099ee:	4313      	orrs	r3, r2
 80099f0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80099f2:	68fb      	ldr	r3, [r7, #12]
 80099f4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80099f8:	683b      	ldr	r3, [r7, #0]
 80099fa:	689b      	ldr	r3, [r3, #8]
 80099fc:	4313      	orrs	r3, r2
 80099fe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8009a00:	68fb      	ldr	r3, [r7, #12]
 8009a02:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8009a06:	683b      	ldr	r3, [r7, #0]
 8009a08:	685b      	ldr	r3, [r3, #4]
 8009a0a:	4313      	orrs	r3, r2
 8009a0c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8009a0e:	68fb      	ldr	r3, [r7, #12]
 8009a10:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8009a14:	683b      	ldr	r3, [r7, #0]
 8009a16:	681b      	ldr	r3, [r3, #0]
 8009a18:	4313      	orrs	r3, r2
 8009a1a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8009a1c:	68fb      	ldr	r3, [r7, #12]
 8009a1e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8009a22:	683b      	ldr	r3, [r7, #0]
 8009a24:	691b      	ldr	r3, [r3, #16]
 8009a26:	4313      	orrs	r3, r2
 8009a28:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8009a2a:	68fb      	ldr	r3, [r7, #12]
 8009a2c:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8009a30:	683b      	ldr	r3, [r7, #0]
 8009a32:	695b      	ldr	r3, [r3, #20]
 8009a34:	4313      	orrs	r3, r2
 8009a36:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8009a38:	68fb      	ldr	r3, [r7, #12]
 8009a3a:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8009a3e:	683b      	ldr	r3, [r7, #0]
 8009a40:	69db      	ldr	r3, [r3, #28]
 8009a42:	4313      	orrs	r3, r2
 8009a44:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	681b      	ldr	r3, [r3, #0]
 8009a4a:	68fa      	ldr	r2, [r7, #12]
 8009a4c:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	2200      	movs	r2, #0
 8009a52:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8009a56:	2300      	movs	r3, #0
}
 8009a58:	4618      	mov	r0, r3
 8009a5a:	3714      	adds	r7, #20
 8009a5c:	46bd      	mov	sp, r7
 8009a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a62:	4770      	bx	lr

08009a64 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009a64:	b480      	push	{r7}
 8009a66:	b083      	sub	sp, #12
 8009a68:	af00      	add	r7, sp, #0
 8009a6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009a6c:	bf00      	nop
 8009a6e:	370c      	adds	r7, #12
 8009a70:	46bd      	mov	sp, r7
 8009a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a76:	4770      	bx	lr

08009a78 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009a78:	b480      	push	{r7}
 8009a7a:	b083      	sub	sp, #12
 8009a7c:	af00      	add	r7, sp, #0
 8009a7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009a80:	bf00      	nop
 8009a82:	370c      	adds	r7, #12
 8009a84:	46bd      	mov	sp, r7
 8009a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a8a:	4770      	bx	lr

08009a8c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009a8c:	b580      	push	{r7, lr}
 8009a8e:	b082      	sub	sp, #8
 8009a90:	af00      	add	r7, sp, #0
 8009a92:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	2b00      	cmp	r3, #0
 8009a98:	d101      	bne.n	8009a9e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009a9a:	2301      	movs	r3, #1
 8009a9c:	e042      	b.n	8009b24 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009aa4:	b2db      	uxtb	r3, r3
 8009aa6:	2b00      	cmp	r3, #0
 8009aa8:	d106      	bne.n	8009ab8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	2200      	movs	r2, #0
 8009aae:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009ab2:	6878      	ldr	r0, [r7, #4]
 8009ab4:	f7fb fc1c 	bl	80052f0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	2224      	movs	r2, #36	@ 0x24
 8009abc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	681b      	ldr	r3, [r3, #0]
 8009ac4:	68da      	ldr	r2, [r3, #12]
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	681b      	ldr	r3, [r3, #0]
 8009aca:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8009ace:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8009ad0:	6878      	ldr	r0, [r7, #4]
 8009ad2:	f000 fdd3 	bl	800a67c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	681b      	ldr	r3, [r3, #0]
 8009ada:	691a      	ldr	r2, [r3, #16]
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	681b      	ldr	r3, [r3, #0]
 8009ae0:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8009ae4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	681b      	ldr	r3, [r3, #0]
 8009aea:	695a      	ldr	r2, [r3, #20]
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	681b      	ldr	r3, [r3, #0]
 8009af0:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8009af4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	681b      	ldr	r3, [r3, #0]
 8009afa:	68da      	ldr	r2, [r3, #12]
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	681b      	ldr	r3, [r3, #0]
 8009b00:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8009b04:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	2200      	movs	r2, #0
 8009b0a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	2220      	movs	r2, #32
 8009b10:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	2220      	movs	r2, #32
 8009b18:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	2200      	movs	r2, #0
 8009b20:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8009b22:	2300      	movs	r3, #0
}
 8009b24:	4618      	mov	r0, r3
 8009b26:	3708      	adds	r7, #8
 8009b28:	46bd      	mov	sp, r7
 8009b2a:	bd80      	pop	{r7, pc}

08009b2c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009b2c:	b580      	push	{r7, lr}
 8009b2e:	b08a      	sub	sp, #40	@ 0x28
 8009b30:	af02      	add	r7, sp, #8
 8009b32:	60f8      	str	r0, [r7, #12]
 8009b34:	60b9      	str	r1, [r7, #8]
 8009b36:	603b      	str	r3, [r7, #0]
 8009b38:	4613      	mov	r3, r2
 8009b3a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8009b3c:	2300      	movs	r3, #0
 8009b3e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009b40:	68fb      	ldr	r3, [r7, #12]
 8009b42:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009b46:	b2db      	uxtb	r3, r3
 8009b48:	2b20      	cmp	r3, #32
 8009b4a:	d175      	bne.n	8009c38 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8009b4c:	68bb      	ldr	r3, [r7, #8]
 8009b4e:	2b00      	cmp	r3, #0
 8009b50:	d002      	beq.n	8009b58 <HAL_UART_Transmit+0x2c>
 8009b52:	88fb      	ldrh	r3, [r7, #6]
 8009b54:	2b00      	cmp	r3, #0
 8009b56:	d101      	bne.n	8009b5c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8009b58:	2301      	movs	r3, #1
 8009b5a:	e06e      	b.n	8009c3a <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009b5c:	68fb      	ldr	r3, [r7, #12]
 8009b5e:	2200      	movs	r2, #0
 8009b60:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009b62:	68fb      	ldr	r3, [r7, #12]
 8009b64:	2221      	movs	r2, #33	@ 0x21
 8009b66:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8009b6a:	f7fb fcd7 	bl	800551c <HAL_GetTick>
 8009b6e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8009b70:	68fb      	ldr	r3, [r7, #12]
 8009b72:	88fa      	ldrh	r2, [r7, #6]
 8009b74:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8009b76:	68fb      	ldr	r3, [r7, #12]
 8009b78:	88fa      	ldrh	r2, [r7, #6]
 8009b7a:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009b7c:	68fb      	ldr	r3, [r7, #12]
 8009b7e:	689b      	ldr	r3, [r3, #8]
 8009b80:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009b84:	d108      	bne.n	8009b98 <HAL_UART_Transmit+0x6c>
 8009b86:	68fb      	ldr	r3, [r7, #12]
 8009b88:	691b      	ldr	r3, [r3, #16]
 8009b8a:	2b00      	cmp	r3, #0
 8009b8c:	d104      	bne.n	8009b98 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8009b8e:	2300      	movs	r3, #0
 8009b90:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8009b92:	68bb      	ldr	r3, [r7, #8]
 8009b94:	61bb      	str	r3, [r7, #24]
 8009b96:	e003      	b.n	8009ba0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8009b98:	68bb      	ldr	r3, [r7, #8]
 8009b9a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009b9c:	2300      	movs	r3, #0
 8009b9e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8009ba0:	e02e      	b.n	8009c00 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8009ba2:	683b      	ldr	r3, [r7, #0]
 8009ba4:	9300      	str	r3, [sp, #0]
 8009ba6:	697b      	ldr	r3, [r7, #20]
 8009ba8:	2200      	movs	r2, #0
 8009baa:	2180      	movs	r1, #128	@ 0x80
 8009bac:	68f8      	ldr	r0, [r7, #12]
 8009bae:	f000 fb37 	bl	800a220 <UART_WaitOnFlagUntilTimeout>
 8009bb2:	4603      	mov	r3, r0
 8009bb4:	2b00      	cmp	r3, #0
 8009bb6:	d005      	beq.n	8009bc4 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8009bb8:	68fb      	ldr	r3, [r7, #12]
 8009bba:	2220      	movs	r2, #32
 8009bbc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8009bc0:	2303      	movs	r3, #3
 8009bc2:	e03a      	b.n	8009c3a <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8009bc4:	69fb      	ldr	r3, [r7, #28]
 8009bc6:	2b00      	cmp	r3, #0
 8009bc8:	d10b      	bne.n	8009be2 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8009bca:	69bb      	ldr	r3, [r7, #24]
 8009bcc:	881b      	ldrh	r3, [r3, #0]
 8009bce:	461a      	mov	r2, r3
 8009bd0:	68fb      	ldr	r3, [r7, #12]
 8009bd2:	681b      	ldr	r3, [r3, #0]
 8009bd4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009bd8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8009bda:	69bb      	ldr	r3, [r7, #24]
 8009bdc:	3302      	adds	r3, #2
 8009bde:	61bb      	str	r3, [r7, #24]
 8009be0:	e007      	b.n	8009bf2 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8009be2:	69fb      	ldr	r3, [r7, #28]
 8009be4:	781a      	ldrb	r2, [r3, #0]
 8009be6:	68fb      	ldr	r3, [r7, #12]
 8009be8:	681b      	ldr	r3, [r3, #0]
 8009bea:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8009bec:	69fb      	ldr	r3, [r7, #28]
 8009bee:	3301      	adds	r3, #1
 8009bf0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8009bf2:	68fb      	ldr	r3, [r7, #12]
 8009bf4:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8009bf6:	b29b      	uxth	r3, r3
 8009bf8:	3b01      	subs	r3, #1
 8009bfa:	b29a      	uxth	r2, r3
 8009bfc:	68fb      	ldr	r3, [r7, #12]
 8009bfe:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8009c00:	68fb      	ldr	r3, [r7, #12]
 8009c02:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8009c04:	b29b      	uxth	r3, r3
 8009c06:	2b00      	cmp	r3, #0
 8009c08:	d1cb      	bne.n	8009ba2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8009c0a:	683b      	ldr	r3, [r7, #0]
 8009c0c:	9300      	str	r3, [sp, #0]
 8009c0e:	697b      	ldr	r3, [r7, #20]
 8009c10:	2200      	movs	r2, #0
 8009c12:	2140      	movs	r1, #64	@ 0x40
 8009c14:	68f8      	ldr	r0, [r7, #12]
 8009c16:	f000 fb03 	bl	800a220 <UART_WaitOnFlagUntilTimeout>
 8009c1a:	4603      	mov	r3, r0
 8009c1c:	2b00      	cmp	r3, #0
 8009c1e:	d005      	beq.n	8009c2c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8009c20:	68fb      	ldr	r3, [r7, #12]
 8009c22:	2220      	movs	r2, #32
 8009c24:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8009c28:	2303      	movs	r3, #3
 8009c2a:	e006      	b.n	8009c3a <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8009c2c:	68fb      	ldr	r3, [r7, #12]
 8009c2e:	2220      	movs	r2, #32
 8009c30:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8009c34:	2300      	movs	r3, #0
 8009c36:	e000      	b.n	8009c3a <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8009c38:	2302      	movs	r3, #2
  }
}
 8009c3a:	4618      	mov	r0, r3
 8009c3c:	3720      	adds	r7, #32
 8009c3e:	46bd      	mov	sp, r7
 8009c40:	bd80      	pop	{r7, pc}

08009c42 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009c42:	b580      	push	{r7, lr}
 8009c44:	b084      	sub	sp, #16
 8009c46:	af00      	add	r7, sp, #0
 8009c48:	60f8      	str	r0, [r7, #12]
 8009c4a:	60b9      	str	r1, [r7, #8]
 8009c4c:	4613      	mov	r3, r2
 8009c4e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8009c50:	68fb      	ldr	r3, [r7, #12]
 8009c52:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8009c56:	b2db      	uxtb	r3, r3
 8009c58:	2b20      	cmp	r3, #32
 8009c5a:	d112      	bne.n	8009c82 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8009c5c:	68bb      	ldr	r3, [r7, #8]
 8009c5e:	2b00      	cmp	r3, #0
 8009c60:	d002      	beq.n	8009c68 <HAL_UART_Receive_IT+0x26>
 8009c62:	88fb      	ldrh	r3, [r7, #6]
 8009c64:	2b00      	cmp	r3, #0
 8009c66:	d101      	bne.n	8009c6c <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8009c68:	2301      	movs	r3, #1
 8009c6a:	e00b      	b.n	8009c84 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009c6c:	68fb      	ldr	r3, [r7, #12]
 8009c6e:	2200      	movs	r2, #0
 8009c70:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8009c72:	88fb      	ldrh	r3, [r7, #6]
 8009c74:	461a      	mov	r2, r3
 8009c76:	68b9      	ldr	r1, [r7, #8]
 8009c78:	68f8      	ldr	r0, [r7, #12]
 8009c7a:	f000 fb2a 	bl	800a2d2 <UART_Start_Receive_IT>
 8009c7e:	4603      	mov	r3, r0
 8009c80:	e000      	b.n	8009c84 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8009c82:	2302      	movs	r3, #2
  }
}
 8009c84:	4618      	mov	r0, r3
 8009c86:	3710      	adds	r7, #16
 8009c88:	46bd      	mov	sp, r7
 8009c8a:	bd80      	pop	{r7, pc}

08009c8c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8009c8c:	b580      	push	{r7, lr}
 8009c8e:	b0ba      	sub	sp, #232	@ 0xe8
 8009c90:	af00      	add	r7, sp, #0
 8009c92:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	681b      	ldr	r3, [r3, #0]
 8009c98:	681b      	ldr	r3, [r3, #0]
 8009c9a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	681b      	ldr	r3, [r3, #0]
 8009ca2:	68db      	ldr	r3, [r3, #12]
 8009ca4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	681b      	ldr	r3, [r3, #0]
 8009cac:	695b      	ldr	r3, [r3, #20]
 8009cae:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8009cb2:	2300      	movs	r3, #0
 8009cb4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8009cb8:	2300      	movs	r3, #0
 8009cba:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8009cbe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009cc2:	f003 030f 	and.w	r3, r3, #15
 8009cc6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8009cca:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8009cce:	2b00      	cmp	r3, #0
 8009cd0:	d10f      	bne.n	8009cf2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8009cd2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009cd6:	f003 0320 	and.w	r3, r3, #32
 8009cda:	2b00      	cmp	r3, #0
 8009cdc:	d009      	beq.n	8009cf2 <HAL_UART_IRQHandler+0x66>
 8009cde:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009ce2:	f003 0320 	and.w	r3, r3, #32
 8009ce6:	2b00      	cmp	r3, #0
 8009ce8:	d003      	beq.n	8009cf2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8009cea:	6878      	ldr	r0, [r7, #4]
 8009cec:	f000 fc07 	bl	800a4fe <UART_Receive_IT>
      return;
 8009cf0:	e273      	b.n	800a1da <HAL_UART_IRQHandler+0x54e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8009cf2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8009cf6:	2b00      	cmp	r3, #0
 8009cf8:	f000 80de 	beq.w	8009eb8 <HAL_UART_IRQHandler+0x22c>
 8009cfc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009d00:	f003 0301 	and.w	r3, r3, #1
 8009d04:	2b00      	cmp	r3, #0
 8009d06:	d106      	bne.n	8009d16 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8009d08:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009d0c:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8009d10:	2b00      	cmp	r3, #0
 8009d12:	f000 80d1 	beq.w	8009eb8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8009d16:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009d1a:	f003 0301 	and.w	r3, r3, #1
 8009d1e:	2b00      	cmp	r3, #0
 8009d20:	d00b      	beq.n	8009d3a <HAL_UART_IRQHandler+0xae>
 8009d22:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009d26:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009d2a:	2b00      	cmp	r3, #0
 8009d2c:	d005      	beq.n	8009d3a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009d32:	f043 0201 	orr.w	r2, r3, #1
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8009d3a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009d3e:	f003 0304 	and.w	r3, r3, #4
 8009d42:	2b00      	cmp	r3, #0
 8009d44:	d00b      	beq.n	8009d5e <HAL_UART_IRQHandler+0xd2>
 8009d46:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009d4a:	f003 0301 	and.w	r3, r3, #1
 8009d4e:	2b00      	cmp	r3, #0
 8009d50:	d005      	beq.n	8009d5e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009d56:	f043 0202 	orr.w	r2, r3, #2
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8009d5e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009d62:	f003 0302 	and.w	r3, r3, #2
 8009d66:	2b00      	cmp	r3, #0
 8009d68:	d00b      	beq.n	8009d82 <HAL_UART_IRQHandler+0xf6>
 8009d6a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009d6e:	f003 0301 	and.w	r3, r3, #1
 8009d72:	2b00      	cmp	r3, #0
 8009d74:	d005      	beq.n	8009d82 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009d7a:	f043 0204 	orr.w	r2, r3, #4
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8009d82:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009d86:	f003 0308 	and.w	r3, r3, #8
 8009d8a:	2b00      	cmp	r3, #0
 8009d8c:	d011      	beq.n	8009db2 <HAL_UART_IRQHandler+0x126>
 8009d8e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009d92:	f003 0320 	and.w	r3, r3, #32
 8009d96:	2b00      	cmp	r3, #0
 8009d98:	d105      	bne.n	8009da6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8009d9a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009d9e:	f003 0301 	and.w	r3, r3, #1
 8009da2:	2b00      	cmp	r3, #0
 8009da4:	d005      	beq.n	8009db2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009daa:	f043 0208 	orr.w	r2, r3, #8
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009db6:	2b00      	cmp	r3, #0
 8009db8:	f000 820a 	beq.w	800a1d0 <HAL_UART_IRQHandler+0x544>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8009dbc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009dc0:	f003 0320 	and.w	r3, r3, #32
 8009dc4:	2b00      	cmp	r3, #0
 8009dc6:	d008      	beq.n	8009dda <HAL_UART_IRQHandler+0x14e>
 8009dc8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009dcc:	f003 0320 	and.w	r3, r3, #32
 8009dd0:	2b00      	cmp	r3, #0
 8009dd2:	d002      	beq.n	8009dda <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8009dd4:	6878      	ldr	r0, [r7, #4]
 8009dd6:	f000 fb92 	bl	800a4fe <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	681b      	ldr	r3, [r3, #0]
 8009dde:	695b      	ldr	r3, [r3, #20]
 8009de0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009de4:	2b40      	cmp	r3, #64	@ 0x40
 8009de6:	bf0c      	ite	eq
 8009de8:	2301      	moveq	r3, #1
 8009dea:	2300      	movne	r3, #0
 8009dec:	b2db      	uxtb	r3, r3
 8009dee:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009df6:	f003 0308 	and.w	r3, r3, #8
 8009dfa:	2b00      	cmp	r3, #0
 8009dfc:	d103      	bne.n	8009e06 <HAL_UART_IRQHandler+0x17a>
 8009dfe:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8009e02:	2b00      	cmp	r3, #0
 8009e04:	d04f      	beq.n	8009ea6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8009e06:	6878      	ldr	r0, [r7, #4]
 8009e08:	f000 fa9d 	bl	800a346 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	681b      	ldr	r3, [r3, #0]
 8009e10:	695b      	ldr	r3, [r3, #20]
 8009e12:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009e16:	2b40      	cmp	r3, #64	@ 0x40
 8009e18:	d141      	bne.n	8009e9e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	681b      	ldr	r3, [r3, #0]
 8009e1e:	3314      	adds	r3, #20
 8009e20:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e24:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8009e28:	e853 3f00 	ldrex	r3, [r3]
 8009e2c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8009e30:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8009e34:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009e38:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	681b      	ldr	r3, [r3, #0]
 8009e40:	3314      	adds	r3, #20
 8009e42:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8009e46:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8009e4a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e4e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8009e52:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8009e56:	e841 2300 	strex	r3, r2, [r1]
 8009e5a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8009e5e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8009e62:	2b00      	cmp	r3, #0
 8009e64:	d1d9      	bne.n	8009e1a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009e6a:	2b00      	cmp	r3, #0
 8009e6c:	d013      	beq.n	8009e96 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009e72:	4a8a      	ldr	r2, [pc, #552]	@ (800a09c <HAL_UART_IRQHandler+0x410>)
 8009e74:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009e7a:	4618      	mov	r0, r3
 8009e7c:	f7fc fa78 	bl	8006370 <HAL_DMA_Abort_IT>
 8009e80:	4603      	mov	r3, r0
 8009e82:	2b00      	cmp	r3, #0
 8009e84:	d016      	beq.n	8009eb4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009e8a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009e8c:	687a      	ldr	r2, [r7, #4]
 8009e8e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8009e90:	4610      	mov	r0, r2
 8009e92:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009e94:	e00e      	b.n	8009eb4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8009e96:	6878      	ldr	r0, [r7, #4]
 8009e98:	f000 f9ac 	bl	800a1f4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009e9c:	e00a      	b.n	8009eb4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009e9e:	6878      	ldr	r0, [r7, #4]
 8009ea0:	f000 f9a8 	bl	800a1f4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009ea4:	e006      	b.n	8009eb4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8009ea6:	6878      	ldr	r0, [r7, #4]
 8009ea8:	f000 f9a4 	bl	800a1f4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	2200      	movs	r2, #0
 8009eb0:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8009eb2:	e18d      	b.n	800a1d0 <HAL_UART_IRQHandler+0x544>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009eb4:	bf00      	nop
    return;
 8009eb6:	e18b      	b.n	800a1d0 <HAL_UART_IRQHandler+0x544>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009ebc:	2b01      	cmp	r3, #1
 8009ebe:	f040 8167 	bne.w	800a190 <HAL_UART_IRQHandler+0x504>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8009ec2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009ec6:	f003 0310 	and.w	r3, r3, #16
 8009eca:	2b00      	cmp	r3, #0
 8009ecc:	f000 8160 	beq.w	800a190 <HAL_UART_IRQHandler+0x504>
      && ((cr1its & USART_CR1_IDLEIE) != 0U))
 8009ed0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009ed4:	f003 0310 	and.w	r3, r3, #16
 8009ed8:	2b00      	cmp	r3, #0
 8009eda:	f000 8159 	beq.w	800a190 <HAL_UART_IRQHandler+0x504>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8009ede:	2300      	movs	r3, #0
 8009ee0:	60bb      	str	r3, [r7, #8]
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	681b      	ldr	r3, [r3, #0]
 8009ee6:	681b      	ldr	r3, [r3, #0]
 8009ee8:	60bb      	str	r3, [r7, #8]
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	681b      	ldr	r3, [r3, #0]
 8009eee:	685b      	ldr	r3, [r3, #4]
 8009ef0:	60bb      	str	r3, [r7, #8]
 8009ef2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	681b      	ldr	r3, [r3, #0]
 8009ef8:	695b      	ldr	r3, [r3, #20]
 8009efa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009efe:	2b40      	cmp	r3, #64	@ 0x40
 8009f00:	f040 80ce 	bne.w	800a0a0 <HAL_UART_IRQHandler+0x414>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009f08:	681b      	ldr	r3, [r3, #0]
 8009f0a:	685b      	ldr	r3, [r3, #4]
 8009f0c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8009f10:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8009f14:	2b00      	cmp	r3, #0
 8009f16:	f000 80a9 	beq.w	800a06c <HAL_UART_IRQHandler+0x3e0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8009f1e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8009f22:	429a      	cmp	r2, r3
 8009f24:	f080 80a2 	bcs.w	800a06c <HAL_UART_IRQHandler+0x3e0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8009f2e:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009f34:	69db      	ldr	r3, [r3, #28]
 8009f36:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009f3a:	f000 8088 	beq.w	800a04e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	681b      	ldr	r3, [r3, #0]
 8009f42:	330c      	adds	r3, #12
 8009f44:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f48:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8009f4c:	e853 3f00 	ldrex	r3, [r3]
 8009f50:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8009f54:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8009f58:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009f5c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	681b      	ldr	r3, [r3, #0]
 8009f64:	330c      	adds	r3, #12
 8009f66:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8009f6a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8009f6e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f72:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8009f76:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8009f7a:	e841 2300 	strex	r3, r2, [r1]
 8009f7e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8009f82:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009f86:	2b00      	cmp	r3, #0
 8009f88:	d1d9      	bne.n	8009f3e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	681b      	ldr	r3, [r3, #0]
 8009f8e:	3314      	adds	r3, #20
 8009f90:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f92:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8009f94:	e853 3f00 	ldrex	r3, [r3]
 8009f98:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8009f9a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009f9c:	f023 0301 	bic.w	r3, r3, #1
 8009fa0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	681b      	ldr	r3, [r3, #0]
 8009fa8:	3314      	adds	r3, #20
 8009faa:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8009fae:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8009fb2:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009fb4:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8009fb6:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8009fba:	e841 2300 	strex	r3, r2, [r1]
 8009fbe:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8009fc0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009fc2:	2b00      	cmp	r3, #0
 8009fc4:	d1e1      	bne.n	8009f8a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	681b      	ldr	r3, [r3, #0]
 8009fca:	3314      	adds	r3, #20
 8009fcc:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009fce:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009fd0:	e853 3f00 	ldrex	r3, [r3]
 8009fd4:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8009fd6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009fd8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009fdc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	681b      	ldr	r3, [r3, #0]
 8009fe4:	3314      	adds	r3, #20
 8009fe6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8009fea:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8009fec:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009fee:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8009ff0:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8009ff2:	e841 2300 	strex	r3, r2, [r1]
 8009ff6:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8009ff8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009ffa:	2b00      	cmp	r3, #0
 8009ffc:	d1e3      	bne.n	8009fc6 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	2220      	movs	r2, #32
 800a002:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	2200      	movs	r2, #0
 800a00a:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	681b      	ldr	r3, [r3, #0]
 800a010:	330c      	adds	r3, #12
 800a012:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a014:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a016:	e853 3f00 	ldrex	r3, [r3]
 800a01a:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800a01c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a01e:	f023 0310 	bic.w	r3, r3, #16
 800a022:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	681b      	ldr	r3, [r3, #0]
 800a02a:	330c      	adds	r3, #12
 800a02c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800a030:	65ba      	str	r2, [r7, #88]	@ 0x58
 800a032:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a034:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800a036:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800a038:	e841 2300 	strex	r3, r2, [r1]
 800a03c:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800a03e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a040:	2b00      	cmp	r3, #0
 800a042:	d1e3      	bne.n	800a00c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a048:	4618      	mov	r0, r3
 800a04a:	f7fc f921 	bl	8006290 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	2202      	movs	r2, #2
 800a052:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800a05c:	b29b      	uxth	r3, r3
 800a05e:	1ad3      	subs	r3, r2, r3
 800a060:	b29b      	uxth	r3, r3
 800a062:	4619      	mov	r1, r3
 800a064:	6878      	ldr	r0, [r7, #4]
 800a066:	f000 f8cf 	bl	800a208 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 800a06a:	e0b3      	b.n	800a1d4 <HAL_UART_IRQHandler+0x548>
        if (nb_remaining_rx_data == huart->RxXferSize)
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800a070:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800a074:	429a      	cmp	r2, r3
 800a076:	f040 80ad 	bne.w	800a1d4 <HAL_UART_IRQHandler+0x548>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a07e:	69db      	ldr	r3, [r3, #28]
 800a080:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a084:	f040 80a6 	bne.w	800a1d4 <HAL_UART_IRQHandler+0x548>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	2202      	movs	r2, #2
 800a08c:	635a      	str	r2, [r3, #52]	@ 0x34
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800a092:	4619      	mov	r1, r3
 800a094:	6878      	ldr	r0, [r7, #4]
 800a096:	f000 f8b7 	bl	800a208 <HAL_UARTEx_RxEventCallback>
      return;
 800a09a:	e09b      	b.n	800a1d4 <HAL_UART_IRQHandler+0x548>
 800a09c:	0800a40d 	.word	0x0800a40d
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800a0a8:	b29b      	uxth	r3, r3
 800a0aa:	1ad3      	subs	r3, r2, r3
 800a0ac:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800a0b4:	b29b      	uxth	r3, r3
 800a0b6:	2b00      	cmp	r3, #0
 800a0b8:	f000 808e 	beq.w	800a1d8 <HAL_UART_IRQHandler+0x54c>
          && (nb_rx_data > 0U))
 800a0bc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800a0c0:	2b00      	cmp	r3, #0
 800a0c2:	f000 8089 	beq.w	800a1d8 <HAL_UART_IRQHandler+0x54c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	681b      	ldr	r3, [r3, #0]
 800a0ca:	330c      	adds	r3, #12
 800a0cc:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a0ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a0d0:	e853 3f00 	ldrex	r3, [r3]
 800a0d4:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800a0d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a0d8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a0dc:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	681b      	ldr	r3, [r3, #0]
 800a0e4:	330c      	adds	r3, #12
 800a0e6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800a0ea:	647a      	str	r2, [r7, #68]	@ 0x44
 800a0ec:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a0ee:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800a0f0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a0f2:	e841 2300 	strex	r3, r2, [r1]
 800a0f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800a0f8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a0fa:	2b00      	cmp	r3, #0
 800a0fc:	d1e3      	bne.n	800a0c6 <HAL_UART_IRQHandler+0x43a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	681b      	ldr	r3, [r3, #0]
 800a102:	3314      	adds	r3, #20
 800a104:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a106:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a108:	e853 3f00 	ldrex	r3, [r3]
 800a10c:	623b      	str	r3, [r7, #32]
   return(result);
 800a10e:	6a3b      	ldr	r3, [r7, #32]
 800a110:	f023 0301 	bic.w	r3, r3, #1
 800a114:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	681b      	ldr	r3, [r3, #0]
 800a11c:	3314      	adds	r3, #20
 800a11e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800a122:	633a      	str	r2, [r7, #48]	@ 0x30
 800a124:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a126:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a128:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a12a:	e841 2300 	strex	r3, r2, [r1]
 800a12e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a130:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a132:	2b00      	cmp	r3, #0
 800a134:	d1e3      	bne.n	800a0fe <HAL_UART_IRQHandler+0x472>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	2220      	movs	r2, #32
 800a13a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	2200      	movs	r2, #0
 800a142:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	681b      	ldr	r3, [r3, #0]
 800a148:	330c      	adds	r3, #12
 800a14a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a14c:	693b      	ldr	r3, [r7, #16]
 800a14e:	e853 3f00 	ldrex	r3, [r3]
 800a152:	60fb      	str	r3, [r7, #12]
   return(result);
 800a154:	68fb      	ldr	r3, [r7, #12]
 800a156:	f023 0310 	bic.w	r3, r3, #16
 800a15a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	681b      	ldr	r3, [r3, #0]
 800a162:	330c      	adds	r3, #12
 800a164:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 800a168:	61fa      	str	r2, [r7, #28]
 800a16a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a16c:	69b9      	ldr	r1, [r7, #24]
 800a16e:	69fa      	ldr	r2, [r7, #28]
 800a170:	e841 2300 	strex	r3, r2, [r1]
 800a174:	617b      	str	r3, [r7, #20]
   return(result);
 800a176:	697b      	ldr	r3, [r7, #20]
 800a178:	2b00      	cmp	r3, #0
 800a17a:	d1e3      	bne.n	800a144 <HAL_UART_IRQHandler+0x4b8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	2202      	movs	r2, #2
 800a180:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800a182:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800a186:	4619      	mov	r1, r3
 800a188:	6878      	ldr	r0, [r7, #4]
 800a18a:	f000 f83d 	bl	800a208 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800a18e:	e023      	b.n	800a1d8 <HAL_UART_IRQHandler+0x54c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800a190:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a194:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a198:	2b00      	cmp	r3, #0
 800a19a:	d009      	beq.n	800a1b0 <HAL_UART_IRQHandler+0x524>
 800a19c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a1a0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a1a4:	2b00      	cmp	r3, #0
 800a1a6:	d003      	beq.n	800a1b0 <HAL_UART_IRQHandler+0x524>
  {
    UART_Transmit_IT(huart);
 800a1a8:	6878      	ldr	r0, [r7, #4]
 800a1aa:	f000 f940 	bl	800a42e <UART_Transmit_IT>
    return;
 800a1ae:	e014      	b.n	800a1da <HAL_UART_IRQHandler+0x54e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800a1b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a1b4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a1b8:	2b00      	cmp	r3, #0
 800a1ba:	d00e      	beq.n	800a1da <HAL_UART_IRQHandler+0x54e>
 800a1bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a1c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a1c4:	2b00      	cmp	r3, #0
 800a1c6:	d008      	beq.n	800a1da <HAL_UART_IRQHandler+0x54e>
  {
    UART_EndTransmit_IT(huart);
 800a1c8:	6878      	ldr	r0, [r7, #4]
 800a1ca:	f000 f980 	bl	800a4ce <UART_EndTransmit_IT>
    return;
 800a1ce:	e004      	b.n	800a1da <HAL_UART_IRQHandler+0x54e>
    return;
 800a1d0:	bf00      	nop
 800a1d2:	e002      	b.n	800a1da <HAL_UART_IRQHandler+0x54e>
      return;
 800a1d4:	bf00      	nop
 800a1d6:	e000      	b.n	800a1da <HAL_UART_IRQHandler+0x54e>
      return;
 800a1d8:	bf00      	nop
  }
}
 800a1da:	37e8      	adds	r7, #232	@ 0xe8
 800a1dc:	46bd      	mov	sp, r7
 800a1de:	bd80      	pop	{r7, pc}

0800a1e0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800a1e0:	b480      	push	{r7}
 800a1e2:	b083      	sub	sp, #12
 800a1e4:	af00      	add	r7, sp, #0
 800a1e6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800a1e8:	bf00      	nop
 800a1ea:	370c      	adds	r7, #12
 800a1ec:	46bd      	mov	sp, r7
 800a1ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1f2:	4770      	bx	lr

0800a1f4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800a1f4:	b480      	push	{r7}
 800a1f6:	b083      	sub	sp, #12
 800a1f8:	af00      	add	r7, sp, #0
 800a1fa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800a1fc:	bf00      	nop
 800a1fe:	370c      	adds	r7, #12
 800a200:	46bd      	mov	sp, r7
 800a202:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a206:	4770      	bx	lr

0800a208 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800a208:	b480      	push	{r7}
 800a20a:	b083      	sub	sp, #12
 800a20c:	af00      	add	r7, sp, #0
 800a20e:	6078      	str	r0, [r7, #4]
 800a210:	460b      	mov	r3, r1
 800a212:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800a214:	bf00      	nop
 800a216:	370c      	adds	r7, #12
 800a218:	46bd      	mov	sp, r7
 800a21a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a21e:	4770      	bx	lr

0800a220 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800a220:	b580      	push	{r7, lr}
 800a222:	b086      	sub	sp, #24
 800a224:	af00      	add	r7, sp, #0
 800a226:	60f8      	str	r0, [r7, #12]
 800a228:	60b9      	str	r1, [r7, #8]
 800a22a:	603b      	str	r3, [r7, #0]
 800a22c:	4613      	mov	r3, r2
 800a22e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a230:	e03b      	b.n	800a2aa <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a232:	6a3b      	ldr	r3, [r7, #32]
 800a234:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a238:	d037      	beq.n	800a2aa <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a23a:	f7fb f96f 	bl	800551c <HAL_GetTick>
 800a23e:	4602      	mov	r2, r0
 800a240:	683b      	ldr	r3, [r7, #0]
 800a242:	1ad3      	subs	r3, r2, r3
 800a244:	6a3a      	ldr	r2, [r7, #32]
 800a246:	429a      	cmp	r2, r3
 800a248:	d302      	bcc.n	800a250 <UART_WaitOnFlagUntilTimeout+0x30>
 800a24a:	6a3b      	ldr	r3, [r7, #32]
 800a24c:	2b00      	cmp	r3, #0
 800a24e:	d101      	bne.n	800a254 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800a250:	2303      	movs	r3, #3
 800a252:	e03a      	b.n	800a2ca <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800a254:	68fb      	ldr	r3, [r7, #12]
 800a256:	681b      	ldr	r3, [r3, #0]
 800a258:	68db      	ldr	r3, [r3, #12]
 800a25a:	f003 0304 	and.w	r3, r3, #4
 800a25e:	2b00      	cmp	r3, #0
 800a260:	d023      	beq.n	800a2aa <UART_WaitOnFlagUntilTimeout+0x8a>
 800a262:	68bb      	ldr	r3, [r7, #8]
 800a264:	2b80      	cmp	r3, #128	@ 0x80
 800a266:	d020      	beq.n	800a2aa <UART_WaitOnFlagUntilTimeout+0x8a>
 800a268:	68bb      	ldr	r3, [r7, #8]
 800a26a:	2b40      	cmp	r3, #64	@ 0x40
 800a26c:	d01d      	beq.n	800a2aa <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800a26e:	68fb      	ldr	r3, [r7, #12]
 800a270:	681b      	ldr	r3, [r3, #0]
 800a272:	681b      	ldr	r3, [r3, #0]
 800a274:	f003 0308 	and.w	r3, r3, #8
 800a278:	2b08      	cmp	r3, #8
 800a27a:	d116      	bne.n	800a2aa <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800a27c:	2300      	movs	r3, #0
 800a27e:	617b      	str	r3, [r7, #20]
 800a280:	68fb      	ldr	r3, [r7, #12]
 800a282:	681b      	ldr	r3, [r3, #0]
 800a284:	681b      	ldr	r3, [r3, #0]
 800a286:	617b      	str	r3, [r7, #20]
 800a288:	68fb      	ldr	r3, [r7, #12]
 800a28a:	681b      	ldr	r3, [r3, #0]
 800a28c:	685b      	ldr	r3, [r3, #4]
 800a28e:	617b      	str	r3, [r7, #20]
 800a290:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a292:	68f8      	ldr	r0, [r7, #12]
 800a294:	f000 f857 	bl	800a346 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800a298:	68fb      	ldr	r3, [r7, #12]
 800a29a:	2208      	movs	r2, #8
 800a29c:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a29e:	68fb      	ldr	r3, [r7, #12]
 800a2a0:	2200      	movs	r2, #0
 800a2a2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800a2a6:	2301      	movs	r3, #1
 800a2a8:	e00f      	b.n	800a2ca <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a2aa:	68fb      	ldr	r3, [r7, #12]
 800a2ac:	681b      	ldr	r3, [r3, #0]
 800a2ae:	681a      	ldr	r2, [r3, #0]
 800a2b0:	68bb      	ldr	r3, [r7, #8]
 800a2b2:	4013      	ands	r3, r2
 800a2b4:	68ba      	ldr	r2, [r7, #8]
 800a2b6:	429a      	cmp	r2, r3
 800a2b8:	bf0c      	ite	eq
 800a2ba:	2301      	moveq	r3, #1
 800a2bc:	2300      	movne	r3, #0
 800a2be:	b2db      	uxtb	r3, r3
 800a2c0:	461a      	mov	r2, r3
 800a2c2:	79fb      	ldrb	r3, [r7, #7]
 800a2c4:	429a      	cmp	r2, r3
 800a2c6:	d0b4      	beq.n	800a232 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a2c8:	2300      	movs	r3, #0
}
 800a2ca:	4618      	mov	r0, r3
 800a2cc:	3718      	adds	r7, #24
 800a2ce:	46bd      	mov	sp, r7
 800a2d0:	bd80      	pop	{r7, pc}

0800a2d2 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a2d2:	b480      	push	{r7}
 800a2d4:	b085      	sub	sp, #20
 800a2d6:	af00      	add	r7, sp, #0
 800a2d8:	60f8      	str	r0, [r7, #12]
 800a2da:	60b9      	str	r1, [r7, #8]
 800a2dc:	4613      	mov	r3, r2
 800a2de:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800a2e0:	68fb      	ldr	r3, [r7, #12]
 800a2e2:	68ba      	ldr	r2, [r7, #8]
 800a2e4:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 800a2e6:	68fb      	ldr	r3, [r7, #12]
 800a2e8:	88fa      	ldrh	r2, [r7, #6]
 800a2ea:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 800a2ec:	68fb      	ldr	r3, [r7, #12]
 800a2ee:	88fa      	ldrh	r2, [r7, #6]
 800a2f0:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a2f2:	68fb      	ldr	r3, [r7, #12]
 800a2f4:	2200      	movs	r2, #0
 800a2f6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800a2f8:	68fb      	ldr	r3, [r7, #12]
 800a2fa:	2222      	movs	r2, #34	@ 0x22
 800a2fc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 800a300:	68fb      	ldr	r3, [r7, #12]
 800a302:	691b      	ldr	r3, [r3, #16]
 800a304:	2b00      	cmp	r3, #0
 800a306:	d007      	beq.n	800a318 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800a308:	68fb      	ldr	r3, [r7, #12]
 800a30a:	681b      	ldr	r3, [r3, #0]
 800a30c:	68da      	ldr	r2, [r3, #12]
 800a30e:	68fb      	ldr	r3, [r7, #12]
 800a310:	681b      	ldr	r3, [r3, #0]
 800a312:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800a316:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800a318:	68fb      	ldr	r3, [r7, #12]
 800a31a:	681b      	ldr	r3, [r3, #0]
 800a31c:	695a      	ldr	r2, [r3, #20]
 800a31e:	68fb      	ldr	r3, [r7, #12]
 800a320:	681b      	ldr	r3, [r3, #0]
 800a322:	f042 0201 	orr.w	r2, r2, #1
 800a326:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800a328:	68fb      	ldr	r3, [r7, #12]
 800a32a:	681b      	ldr	r3, [r3, #0]
 800a32c:	68da      	ldr	r2, [r3, #12]
 800a32e:	68fb      	ldr	r3, [r7, #12]
 800a330:	681b      	ldr	r3, [r3, #0]
 800a332:	f042 0220 	orr.w	r2, r2, #32
 800a336:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800a338:	2300      	movs	r3, #0
}
 800a33a:	4618      	mov	r0, r3
 800a33c:	3714      	adds	r7, #20
 800a33e:	46bd      	mov	sp, r7
 800a340:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a344:	4770      	bx	lr

0800a346 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a346:	b480      	push	{r7}
 800a348:	b095      	sub	sp, #84	@ 0x54
 800a34a:	af00      	add	r7, sp, #0
 800a34c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	681b      	ldr	r3, [r3, #0]
 800a352:	330c      	adds	r3, #12
 800a354:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a356:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a358:	e853 3f00 	ldrex	r3, [r3]
 800a35c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800a35e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a360:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a364:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	681b      	ldr	r3, [r3, #0]
 800a36a:	330c      	adds	r3, #12
 800a36c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800a36e:	643a      	str	r2, [r7, #64]	@ 0x40
 800a370:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a372:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800a374:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800a376:	e841 2300 	strex	r3, r2, [r1]
 800a37a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800a37c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a37e:	2b00      	cmp	r3, #0
 800a380:	d1e5      	bne.n	800a34e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	681b      	ldr	r3, [r3, #0]
 800a386:	3314      	adds	r3, #20
 800a388:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a38a:	6a3b      	ldr	r3, [r7, #32]
 800a38c:	e853 3f00 	ldrex	r3, [r3]
 800a390:	61fb      	str	r3, [r7, #28]
   return(result);
 800a392:	69fb      	ldr	r3, [r7, #28]
 800a394:	f023 0301 	bic.w	r3, r3, #1
 800a398:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	681b      	ldr	r3, [r3, #0]
 800a39e:	3314      	adds	r3, #20
 800a3a0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a3a2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800a3a4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a3a6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a3a8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a3aa:	e841 2300 	strex	r3, r2, [r1]
 800a3ae:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a3b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a3b2:	2b00      	cmp	r3, #0
 800a3b4:	d1e5      	bne.n	800a382 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a3b6:	687b      	ldr	r3, [r7, #4]
 800a3b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a3ba:	2b01      	cmp	r3, #1
 800a3bc:	d119      	bne.n	800a3f2 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	681b      	ldr	r3, [r3, #0]
 800a3c2:	330c      	adds	r3, #12
 800a3c4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a3c6:	68fb      	ldr	r3, [r7, #12]
 800a3c8:	e853 3f00 	ldrex	r3, [r3]
 800a3cc:	60bb      	str	r3, [r7, #8]
   return(result);
 800a3ce:	68bb      	ldr	r3, [r7, #8]
 800a3d0:	f023 0310 	bic.w	r3, r3, #16
 800a3d4:	647b      	str	r3, [r7, #68]	@ 0x44
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	681b      	ldr	r3, [r3, #0]
 800a3da:	330c      	adds	r3, #12
 800a3dc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a3de:	61ba      	str	r2, [r7, #24]
 800a3e0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a3e2:	6979      	ldr	r1, [r7, #20]
 800a3e4:	69ba      	ldr	r2, [r7, #24]
 800a3e6:	e841 2300 	strex	r3, r2, [r1]
 800a3ea:	613b      	str	r3, [r7, #16]
   return(result);
 800a3ec:	693b      	ldr	r3, [r7, #16]
 800a3ee:	2b00      	cmp	r3, #0
 800a3f0:	d1e5      	bne.n	800a3be <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a3f2:	687b      	ldr	r3, [r7, #4]
 800a3f4:	2220      	movs	r2, #32
 800a3f6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	2200      	movs	r2, #0
 800a3fe:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800a400:	bf00      	nop
 800a402:	3754      	adds	r7, #84	@ 0x54
 800a404:	46bd      	mov	sp, r7
 800a406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a40a:	4770      	bx	lr

0800a40c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a40c:	b580      	push	{r7, lr}
 800a40e:	b084      	sub	sp, #16
 800a410:	af00      	add	r7, sp, #0
 800a412:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a418:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800a41a:	68fb      	ldr	r3, [r7, #12]
 800a41c:	2200      	movs	r2, #0
 800a41e:	85da      	strh	r2, [r3, #46]	@ 0x2e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a420:	68f8      	ldr	r0, [r7, #12]
 800a422:	f7ff fee7 	bl	800a1f4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a426:	bf00      	nop
 800a428:	3710      	adds	r7, #16
 800a42a:	46bd      	mov	sp, r7
 800a42c:	bd80      	pop	{r7, pc}

0800a42e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800a42e:	b480      	push	{r7}
 800a430:	b085      	sub	sp, #20
 800a432:	af00      	add	r7, sp, #0
 800a434:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800a436:	687b      	ldr	r3, [r7, #4]
 800a438:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a43c:	b2db      	uxtb	r3, r3
 800a43e:	2b21      	cmp	r3, #33	@ 0x21
 800a440:	d13e      	bne.n	800a4c0 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	689b      	ldr	r3, [r3, #8]
 800a446:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a44a:	d114      	bne.n	800a476 <UART_Transmit_IT+0x48>
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	691b      	ldr	r3, [r3, #16]
 800a450:	2b00      	cmp	r3, #0
 800a452:	d110      	bne.n	800a476 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	6a1b      	ldr	r3, [r3, #32]
 800a458:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800a45a:	68fb      	ldr	r3, [r7, #12]
 800a45c:	881b      	ldrh	r3, [r3, #0]
 800a45e:	461a      	mov	r2, r3
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	681b      	ldr	r3, [r3, #0]
 800a464:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a468:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	6a1b      	ldr	r3, [r3, #32]
 800a46e:	1c9a      	adds	r2, r3, #2
 800a470:	687b      	ldr	r3, [r7, #4]
 800a472:	621a      	str	r2, [r3, #32]
 800a474:	e008      	b.n	800a488 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800a476:	687b      	ldr	r3, [r7, #4]
 800a478:	6a1b      	ldr	r3, [r3, #32]
 800a47a:	1c59      	adds	r1, r3, #1
 800a47c:	687a      	ldr	r2, [r7, #4]
 800a47e:	6211      	str	r1, [r2, #32]
 800a480:	781a      	ldrb	r2, [r3, #0]
 800a482:	687b      	ldr	r3, [r7, #4]
 800a484:	681b      	ldr	r3, [r3, #0]
 800a486:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800a48c:	b29b      	uxth	r3, r3
 800a48e:	3b01      	subs	r3, #1
 800a490:	b29b      	uxth	r3, r3
 800a492:	687a      	ldr	r2, [r7, #4]
 800a494:	4619      	mov	r1, r3
 800a496:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800a498:	2b00      	cmp	r3, #0
 800a49a:	d10f      	bne.n	800a4bc <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	681b      	ldr	r3, [r3, #0]
 800a4a0:	68da      	ldr	r2, [r3, #12]
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	681b      	ldr	r3, [r3, #0]
 800a4a6:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800a4aa:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	681b      	ldr	r3, [r3, #0]
 800a4b0:	68da      	ldr	r2, [r3, #12]
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	681b      	ldr	r3, [r3, #0]
 800a4b6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800a4ba:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800a4bc:	2300      	movs	r3, #0
 800a4be:	e000      	b.n	800a4c2 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800a4c0:	2302      	movs	r3, #2
  }
}
 800a4c2:	4618      	mov	r0, r3
 800a4c4:	3714      	adds	r7, #20
 800a4c6:	46bd      	mov	sp, r7
 800a4c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4cc:	4770      	bx	lr

0800a4ce <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800a4ce:	b580      	push	{r7, lr}
 800a4d0:	b082      	sub	sp, #8
 800a4d2:	af00      	add	r7, sp, #0
 800a4d4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	681b      	ldr	r3, [r3, #0]
 800a4da:	68da      	ldr	r2, [r3, #12]
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	681b      	ldr	r3, [r3, #0]
 800a4e0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800a4e4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	2220      	movs	r2, #32
 800a4ea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800a4ee:	6878      	ldr	r0, [r7, #4]
 800a4f0:	f7ff fe76 	bl	800a1e0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800a4f4:	2300      	movs	r3, #0
}
 800a4f6:	4618      	mov	r0, r3
 800a4f8:	3708      	adds	r7, #8
 800a4fa:	46bd      	mov	sp, r7
 800a4fc:	bd80      	pop	{r7, pc}

0800a4fe <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800a4fe:	b580      	push	{r7, lr}
 800a500:	b08c      	sub	sp, #48	@ 0x30
 800a502:	af00      	add	r7, sp, #0
 800a504:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits = NULL;
 800a506:	2300      	movs	r3, #0
 800a508:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint16_t *pdata16bits = NULL;
 800a50a:	2300      	movs	r3, #0
 800a50c:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800a514:	b2db      	uxtb	r3, r3
 800a516:	2b22      	cmp	r3, #34	@ 0x22
 800a518:	f040 80aa 	bne.w	800a670 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	689b      	ldr	r3, [r3, #8]
 800a520:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a524:	d115      	bne.n	800a552 <UART_Receive_IT+0x54>
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	691b      	ldr	r3, [r3, #16]
 800a52a:	2b00      	cmp	r3, #0
 800a52c:	d111      	bne.n	800a552 <UART_Receive_IT+0x54>
    {
      /* Unused pdata8bits */
      UNUSED(pdata8bits);
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a532:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	681b      	ldr	r3, [r3, #0]
 800a538:	685b      	ldr	r3, [r3, #4]
 800a53a:	b29b      	uxth	r3, r3
 800a53c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a540:	b29a      	uxth	r2, r3
 800a542:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a544:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a54a:	1c9a      	adds	r2, r3, #2
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	629a      	str	r2, [r3, #40]	@ 0x28
 800a550:	e024      	b.n	800a59c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800a552:	687b      	ldr	r3, [r7, #4]
 800a554:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a556:	62fb      	str	r3, [r7, #44]	@ 0x2c
      /* Unused pdata16bits */
      UNUSED(pdata16bits);

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	689b      	ldr	r3, [r3, #8]
 800a55c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a560:	d007      	beq.n	800a572 <UART_Receive_IT+0x74>
 800a562:	687b      	ldr	r3, [r7, #4]
 800a564:	689b      	ldr	r3, [r3, #8]
 800a566:	2b00      	cmp	r3, #0
 800a568:	d10a      	bne.n	800a580 <UART_Receive_IT+0x82>
 800a56a:	687b      	ldr	r3, [r7, #4]
 800a56c:	691b      	ldr	r3, [r3, #16]
 800a56e:	2b00      	cmp	r3, #0
 800a570:	d106      	bne.n	800a580 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	681b      	ldr	r3, [r3, #0]
 800a576:	685b      	ldr	r3, [r3, #4]
 800a578:	b2da      	uxtb	r2, r3
 800a57a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a57c:	701a      	strb	r2, [r3, #0]
 800a57e:	e008      	b.n	800a592 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	681b      	ldr	r3, [r3, #0]
 800a584:	685b      	ldr	r3, [r3, #4]
 800a586:	b2db      	uxtb	r3, r3
 800a588:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a58c:	b2da      	uxtb	r2, r3
 800a58e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a590:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a596:	1c5a      	adds	r2, r3, #1
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800a5a0:	b29b      	uxth	r3, r3
 800a5a2:	3b01      	subs	r3, #1
 800a5a4:	b29b      	uxth	r3, r3
 800a5a6:	687a      	ldr	r2, [r7, #4]
 800a5a8:	4619      	mov	r1, r3
 800a5aa:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800a5ac:	2b00      	cmp	r3, #0
 800a5ae:	d15d      	bne.n	800a66c <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	681b      	ldr	r3, [r3, #0]
 800a5b4:	68da      	ldr	r2, [r3, #12]
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	681b      	ldr	r3, [r3, #0]
 800a5ba:	f022 0220 	bic.w	r2, r2, #32
 800a5be:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	681b      	ldr	r3, [r3, #0]
 800a5c4:	68da      	ldr	r2, [r3, #12]
 800a5c6:	687b      	ldr	r3, [r7, #4]
 800a5c8:	681b      	ldr	r3, [r3, #0]
 800a5ca:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800a5ce:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800a5d0:	687b      	ldr	r3, [r7, #4]
 800a5d2:	681b      	ldr	r3, [r3, #0]
 800a5d4:	695a      	ldr	r2, [r3, #20]
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	681b      	ldr	r3, [r3, #0]
 800a5da:	f022 0201 	bic.w	r2, r2, #1
 800a5de:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	2220      	movs	r2, #32
 800a5e4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	2200      	movs	r2, #0
 800a5ec:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a5ee:	687b      	ldr	r3, [r7, #4]
 800a5f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a5f2:	2b01      	cmp	r3, #1
 800a5f4:	d135      	bne.n	800a662 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	2200      	movs	r2, #0
 800a5fa:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	681b      	ldr	r3, [r3, #0]
 800a600:	330c      	adds	r3, #12
 800a602:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a604:	697b      	ldr	r3, [r7, #20]
 800a606:	e853 3f00 	ldrex	r3, [r3]
 800a60a:	613b      	str	r3, [r7, #16]
   return(result);
 800a60c:	693b      	ldr	r3, [r7, #16]
 800a60e:	f023 0310 	bic.w	r3, r3, #16
 800a612:	627b      	str	r3, [r7, #36]	@ 0x24
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	681b      	ldr	r3, [r3, #0]
 800a618:	330c      	adds	r3, #12
 800a61a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a61c:	623a      	str	r2, [r7, #32]
 800a61e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a620:	69f9      	ldr	r1, [r7, #28]
 800a622:	6a3a      	ldr	r2, [r7, #32]
 800a624:	e841 2300 	strex	r3, r2, [r1]
 800a628:	61bb      	str	r3, [r7, #24]
   return(result);
 800a62a:	69bb      	ldr	r3, [r7, #24]
 800a62c:	2b00      	cmp	r3, #0
 800a62e:	d1e5      	bne.n	800a5fc <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	681b      	ldr	r3, [r3, #0]
 800a634:	681b      	ldr	r3, [r3, #0]
 800a636:	f003 0310 	and.w	r3, r3, #16
 800a63a:	2b10      	cmp	r3, #16
 800a63c:	d10a      	bne.n	800a654 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800a63e:	2300      	movs	r3, #0
 800a640:	60fb      	str	r3, [r7, #12]
 800a642:	687b      	ldr	r3, [r7, #4]
 800a644:	681b      	ldr	r3, [r3, #0]
 800a646:	681b      	ldr	r3, [r3, #0]
 800a648:	60fb      	str	r3, [r7, #12]
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	681b      	ldr	r3, [r3, #0]
 800a64e:	685b      	ldr	r3, [r3, #4]
 800a650:	60fb      	str	r3, [r7, #12]
 800a652:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800a658:	4619      	mov	r1, r3
 800a65a:	6878      	ldr	r0, [r7, #4]
 800a65c:	f7ff fdd4 	bl	800a208 <HAL_UARTEx_RxEventCallback>
 800a660:	e002      	b.n	800a668 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800a662:	6878      	ldr	r0, [r7, #4]
 800a664:	f7f7 fdda 	bl	800221c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800a668:	2300      	movs	r3, #0
 800a66a:	e002      	b.n	800a672 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800a66c:	2300      	movs	r3, #0
 800a66e:	e000      	b.n	800a672 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800a670:	2302      	movs	r3, #2
  }
}
 800a672:	4618      	mov	r0, r3
 800a674:	3730      	adds	r7, #48	@ 0x30
 800a676:	46bd      	mov	sp, r7
 800a678:	bd80      	pop	{r7, pc}
	...

0800a67c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a67c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a680:	b0c0      	sub	sp, #256	@ 0x100
 800a682:	af00      	add	r7, sp, #0
 800a684:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a688:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a68c:	681b      	ldr	r3, [r3, #0]
 800a68e:	691b      	ldr	r3, [r3, #16]
 800a690:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800a694:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a698:	68d9      	ldr	r1, [r3, #12]
 800a69a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a69e:	681a      	ldr	r2, [r3, #0]
 800a6a0:	ea40 0301 	orr.w	r3, r0, r1
 800a6a4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800a6a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a6aa:	689a      	ldr	r2, [r3, #8]
 800a6ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a6b0:	691b      	ldr	r3, [r3, #16]
 800a6b2:	431a      	orrs	r2, r3
 800a6b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a6b8:	695b      	ldr	r3, [r3, #20]
 800a6ba:	431a      	orrs	r2, r3
 800a6bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a6c0:	69db      	ldr	r3, [r3, #28]
 800a6c2:	4313      	orrs	r3, r2
 800a6c4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800a6c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a6cc:	681b      	ldr	r3, [r3, #0]
 800a6ce:	68db      	ldr	r3, [r3, #12]
 800a6d0:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800a6d4:	f021 010c 	bic.w	r1, r1, #12
 800a6d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a6dc:	681a      	ldr	r2, [r3, #0]
 800a6de:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800a6e2:	430b      	orrs	r3, r1
 800a6e4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800a6e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a6ea:	681b      	ldr	r3, [r3, #0]
 800a6ec:	695b      	ldr	r3, [r3, #20]
 800a6ee:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800a6f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a6f6:	6999      	ldr	r1, [r3, #24]
 800a6f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a6fc:	681a      	ldr	r2, [r3, #0]
 800a6fe:	ea40 0301 	orr.w	r3, r0, r1
 800a702:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800a704:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a708:	681a      	ldr	r2, [r3, #0]
 800a70a:	4b8f      	ldr	r3, [pc, #572]	@ (800a948 <UART_SetConfig+0x2cc>)
 800a70c:	429a      	cmp	r2, r3
 800a70e:	d005      	beq.n	800a71c <UART_SetConfig+0xa0>
 800a710:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a714:	681a      	ldr	r2, [r3, #0]
 800a716:	4b8d      	ldr	r3, [pc, #564]	@ (800a94c <UART_SetConfig+0x2d0>)
 800a718:	429a      	cmp	r2, r3
 800a71a:	d104      	bne.n	800a726 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800a71c:	f7fd fcce 	bl	80080bc <HAL_RCC_GetPCLK2Freq>
 800a720:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800a724:	e003      	b.n	800a72e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800a726:	f7fd fcb5 	bl	8008094 <HAL_RCC_GetPCLK1Freq>
 800a72a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a72e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a732:	69db      	ldr	r3, [r3, #28]
 800a734:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a738:	f040 810c 	bne.w	800a954 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800a73c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800a740:	2200      	movs	r2, #0
 800a742:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800a746:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800a74a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800a74e:	4622      	mov	r2, r4
 800a750:	462b      	mov	r3, r5
 800a752:	1891      	adds	r1, r2, r2
 800a754:	65b9      	str	r1, [r7, #88]	@ 0x58
 800a756:	415b      	adcs	r3, r3
 800a758:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800a75a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800a75e:	4621      	mov	r1, r4
 800a760:	eb12 0801 	adds.w	r8, r2, r1
 800a764:	4629      	mov	r1, r5
 800a766:	eb43 0901 	adc.w	r9, r3, r1
 800a76a:	f04f 0200 	mov.w	r2, #0
 800a76e:	f04f 0300 	mov.w	r3, #0
 800a772:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800a776:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800a77a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800a77e:	4690      	mov	r8, r2
 800a780:	4699      	mov	r9, r3
 800a782:	4623      	mov	r3, r4
 800a784:	eb18 0303 	adds.w	r3, r8, r3
 800a788:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800a78c:	462b      	mov	r3, r5
 800a78e:	eb49 0303 	adc.w	r3, r9, r3
 800a792:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800a796:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a79a:	685b      	ldr	r3, [r3, #4]
 800a79c:	2200      	movs	r2, #0
 800a79e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800a7a2:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800a7a6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800a7aa:	460b      	mov	r3, r1
 800a7ac:	18db      	adds	r3, r3, r3
 800a7ae:	653b      	str	r3, [r7, #80]	@ 0x50
 800a7b0:	4613      	mov	r3, r2
 800a7b2:	eb42 0303 	adc.w	r3, r2, r3
 800a7b6:	657b      	str	r3, [r7, #84]	@ 0x54
 800a7b8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800a7bc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800a7c0:	f7f6 fa6a 	bl	8000c98 <__aeabi_uldivmod>
 800a7c4:	4602      	mov	r2, r0
 800a7c6:	460b      	mov	r3, r1
 800a7c8:	4b61      	ldr	r3, [pc, #388]	@ (800a950 <UART_SetConfig+0x2d4>)
 800a7ca:	fba3 2302 	umull	r2, r3, r3, r2
 800a7ce:	095b      	lsrs	r3, r3, #5
 800a7d0:	011c      	lsls	r4, r3, #4
 800a7d2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800a7d6:	2200      	movs	r2, #0
 800a7d8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800a7dc:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800a7e0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800a7e4:	4642      	mov	r2, r8
 800a7e6:	464b      	mov	r3, r9
 800a7e8:	1891      	adds	r1, r2, r2
 800a7ea:	64b9      	str	r1, [r7, #72]	@ 0x48
 800a7ec:	415b      	adcs	r3, r3
 800a7ee:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a7f0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800a7f4:	4641      	mov	r1, r8
 800a7f6:	eb12 0a01 	adds.w	sl, r2, r1
 800a7fa:	4649      	mov	r1, r9
 800a7fc:	eb43 0b01 	adc.w	fp, r3, r1
 800a800:	f04f 0200 	mov.w	r2, #0
 800a804:	f04f 0300 	mov.w	r3, #0
 800a808:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800a80c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800a810:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800a814:	4692      	mov	sl, r2
 800a816:	469b      	mov	fp, r3
 800a818:	4643      	mov	r3, r8
 800a81a:	eb1a 0303 	adds.w	r3, sl, r3
 800a81e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800a822:	464b      	mov	r3, r9
 800a824:	eb4b 0303 	adc.w	r3, fp, r3
 800a828:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800a82c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a830:	685b      	ldr	r3, [r3, #4]
 800a832:	2200      	movs	r2, #0
 800a834:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800a838:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800a83c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800a840:	460b      	mov	r3, r1
 800a842:	18db      	adds	r3, r3, r3
 800a844:	643b      	str	r3, [r7, #64]	@ 0x40
 800a846:	4613      	mov	r3, r2
 800a848:	eb42 0303 	adc.w	r3, r2, r3
 800a84c:	647b      	str	r3, [r7, #68]	@ 0x44
 800a84e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800a852:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800a856:	f7f6 fa1f 	bl	8000c98 <__aeabi_uldivmod>
 800a85a:	4602      	mov	r2, r0
 800a85c:	460b      	mov	r3, r1
 800a85e:	4611      	mov	r1, r2
 800a860:	4b3b      	ldr	r3, [pc, #236]	@ (800a950 <UART_SetConfig+0x2d4>)
 800a862:	fba3 2301 	umull	r2, r3, r3, r1
 800a866:	095b      	lsrs	r3, r3, #5
 800a868:	2264      	movs	r2, #100	@ 0x64
 800a86a:	fb02 f303 	mul.w	r3, r2, r3
 800a86e:	1acb      	subs	r3, r1, r3
 800a870:	00db      	lsls	r3, r3, #3
 800a872:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800a876:	4b36      	ldr	r3, [pc, #216]	@ (800a950 <UART_SetConfig+0x2d4>)
 800a878:	fba3 2302 	umull	r2, r3, r3, r2
 800a87c:	095b      	lsrs	r3, r3, #5
 800a87e:	005b      	lsls	r3, r3, #1
 800a880:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800a884:	441c      	add	r4, r3
 800a886:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800a88a:	2200      	movs	r2, #0
 800a88c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800a890:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800a894:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800a898:	4642      	mov	r2, r8
 800a89a:	464b      	mov	r3, r9
 800a89c:	1891      	adds	r1, r2, r2
 800a89e:	63b9      	str	r1, [r7, #56]	@ 0x38
 800a8a0:	415b      	adcs	r3, r3
 800a8a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a8a4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800a8a8:	4641      	mov	r1, r8
 800a8aa:	1851      	adds	r1, r2, r1
 800a8ac:	6339      	str	r1, [r7, #48]	@ 0x30
 800a8ae:	4649      	mov	r1, r9
 800a8b0:	414b      	adcs	r3, r1
 800a8b2:	637b      	str	r3, [r7, #52]	@ 0x34
 800a8b4:	f04f 0200 	mov.w	r2, #0
 800a8b8:	f04f 0300 	mov.w	r3, #0
 800a8bc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800a8c0:	4659      	mov	r1, fp
 800a8c2:	00cb      	lsls	r3, r1, #3
 800a8c4:	4651      	mov	r1, sl
 800a8c6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a8ca:	4651      	mov	r1, sl
 800a8cc:	00ca      	lsls	r2, r1, #3
 800a8ce:	4610      	mov	r0, r2
 800a8d0:	4619      	mov	r1, r3
 800a8d2:	4603      	mov	r3, r0
 800a8d4:	4642      	mov	r2, r8
 800a8d6:	189b      	adds	r3, r3, r2
 800a8d8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800a8dc:	464b      	mov	r3, r9
 800a8de:	460a      	mov	r2, r1
 800a8e0:	eb42 0303 	adc.w	r3, r2, r3
 800a8e4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800a8e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a8ec:	685b      	ldr	r3, [r3, #4]
 800a8ee:	2200      	movs	r2, #0
 800a8f0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800a8f4:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800a8f8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800a8fc:	460b      	mov	r3, r1
 800a8fe:	18db      	adds	r3, r3, r3
 800a900:	62bb      	str	r3, [r7, #40]	@ 0x28
 800a902:	4613      	mov	r3, r2
 800a904:	eb42 0303 	adc.w	r3, r2, r3
 800a908:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a90a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800a90e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800a912:	f7f6 f9c1 	bl	8000c98 <__aeabi_uldivmod>
 800a916:	4602      	mov	r2, r0
 800a918:	460b      	mov	r3, r1
 800a91a:	4b0d      	ldr	r3, [pc, #52]	@ (800a950 <UART_SetConfig+0x2d4>)
 800a91c:	fba3 1302 	umull	r1, r3, r3, r2
 800a920:	095b      	lsrs	r3, r3, #5
 800a922:	2164      	movs	r1, #100	@ 0x64
 800a924:	fb01 f303 	mul.w	r3, r1, r3
 800a928:	1ad3      	subs	r3, r2, r3
 800a92a:	00db      	lsls	r3, r3, #3
 800a92c:	3332      	adds	r3, #50	@ 0x32
 800a92e:	4a08      	ldr	r2, [pc, #32]	@ (800a950 <UART_SetConfig+0x2d4>)
 800a930:	fba2 2303 	umull	r2, r3, r2, r3
 800a934:	095b      	lsrs	r3, r3, #5
 800a936:	f003 0207 	and.w	r2, r3, #7
 800a93a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a93e:	681b      	ldr	r3, [r3, #0]
 800a940:	4422      	add	r2, r4
 800a942:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800a944:	e106      	b.n	800ab54 <UART_SetConfig+0x4d8>
 800a946:	bf00      	nop
 800a948:	40011000 	.word	0x40011000
 800a94c:	40011400 	.word	0x40011400
 800a950:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800a954:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800a958:	2200      	movs	r2, #0
 800a95a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800a95e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800a962:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800a966:	4642      	mov	r2, r8
 800a968:	464b      	mov	r3, r9
 800a96a:	1891      	adds	r1, r2, r2
 800a96c:	6239      	str	r1, [r7, #32]
 800a96e:	415b      	adcs	r3, r3
 800a970:	627b      	str	r3, [r7, #36]	@ 0x24
 800a972:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800a976:	4641      	mov	r1, r8
 800a978:	1854      	adds	r4, r2, r1
 800a97a:	4649      	mov	r1, r9
 800a97c:	eb43 0501 	adc.w	r5, r3, r1
 800a980:	f04f 0200 	mov.w	r2, #0
 800a984:	f04f 0300 	mov.w	r3, #0
 800a988:	00eb      	lsls	r3, r5, #3
 800a98a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800a98e:	00e2      	lsls	r2, r4, #3
 800a990:	4614      	mov	r4, r2
 800a992:	461d      	mov	r5, r3
 800a994:	4643      	mov	r3, r8
 800a996:	18e3      	adds	r3, r4, r3
 800a998:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800a99c:	464b      	mov	r3, r9
 800a99e:	eb45 0303 	adc.w	r3, r5, r3
 800a9a2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800a9a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a9aa:	685b      	ldr	r3, [r3, #4]
 800a9ac:	2200      	movs	r2, #0
 800a9ae:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800a9b2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800a9b6:	f04f 0200 	mov.w	r2, #0
 800a9ba:	f04f 0300 	mov.w	r3, #0
 800a9be:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800a9c2:	4629      	mov	r1, r5
 800a9c4:	008b      	lsls	r3, r1, #2
 800a9c6:	4621      	mov	r1, r4
 800a9c8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a9cc:	4621      	mov	r1, r4
 800a9ce:	008a      	lsls	r2, r1, #2
 800a9d0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800a9d4:	f7f6 f960 	bl	8000c98 <__aeabi_uldivmod>
 800a9d8:	4602      	mov	r2, r0
 800a9da:	460b      	mov	r3, r1
 800a9dc:	4b60      	ldr	r3, [pc, #384]	@ (800ab60 <UART_SetConfig+0x4e4>)
 800a9de:	fba3 2302 	umull	r2, r3, r3, r2
 800a9e2:	095b      	lsrs	r3, r3, #5
 800a9e4:	011c      	lsls	r4, r3, #4
 800a9e6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800a9ea:	2200      	movs	r2, #0
 800a9ec:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800a9f0:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800a9f4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800a9f8:	4642      	mov	r2, r8
 800a9fa:	464b      	mov	r3, r9
 800a9fc:	1891      	adds	r1, r2, r2
 800a9fe:	61b9      	str	r1, [r7, #24]
 800aa00:	415b      	adcs	r3, r3
 800aa02:	61fb      	str	r3, [r7, #28]
 800aa04:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800aa08:	4641      	mov	r1, r8
 800aa0a:	1851      	adds	r1, r2, r1
 800aa0c:	6139      	str	r1, [r7, #16]
 800aa0e:	4649      	mov	r1, r9
 800aa10:	414b      	adcs	r3, r1
 800aa12:	617b      	str	r3, [r7, #20]
 800aa14:	f04f 0200 	mov.w	r2, #0
 800aa18:	f04f 0300 	mov.w	r3, #0
 800aa1c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800aa20:	4659      	mov	r1, fp
 800aa22:	00cb      	lsls	r3, r1, #3
 800aa24:	4651      	mov	r1, sl
 800aa26:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800aa2a:	4651      	mov	r1, sl
 800aa2c:	00ca      	lsls	r2, r1, #3
 800aa2e:	4610      	mov	r0, r2
 800aa30:	4619      	mov	r1, r3
 800aa32:	4603      	mov	r3, r0
 800aa34:	4642      	mov	r2, r8
 800aa36:	189b      	adds	r3, r3, r2
 800aa38:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800aa3c:	464b      	mov	r3, r9
 800aa3e:	460a      	mov	r2, r1
 800aa40:	eb42 0303 	adc.w	r3, r2, r3
 800aa44:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800aa48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800aa4c:	685b      	ldr	r3, [r3, #4]
 800aa4e:	2200      	movs	r2, #0
 800aa50:	67bb      	str	r3, [r7, #120]	@ 0x78
 800aa52:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800aa54:	f04f 0200 	mov.w	r2, #0
 800aa58:	f04f 0300 	mov.w	r3, #0
 800aa5c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800aa60:	4649      	mov	r1, r9
 800aa62:	008b      	lsls	r3, r1, #2
 800aa64:	4641      	mov	r1, r8
 800aa66:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800aa6a:	4641      	mov	r1, r8
 800aa6c:	008a      	lsls	r2, r1, #2
 800aa6e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800aa72:	f7f6 f911 	bl	8000c98 <__aeabi_uldivmod>
 800aa76:	4602      	mov	r2, r0
 800aa78:	460b      	mov	r3, r1
 800aa7a:	4611      	mov	r1, r2
 800aa7c:	4b38      	ldr	r3, [pc, #224]	@ (800ab60 <UART_SetConfig+0x4e4>)
 800aa7e:	fba3 2301 	umull	r2, r3, r3, r1
 800aa82:	095b      	lsrs	r3, r3, #5
 800aa84:	2264      	movs	r2, #100	@ 0x64
 800aa86:	fb02 f303 	mul.w	r3, r2, r3
 800aa8a:	1acb      	subs	r3, r1, r3
 800aa8c:	011b      	lsls	r3, r3, #4
 800aa8e:	3332      	adds	r3, #50	@ 0x32
 800aa90:	4a33      	ldr	r2, [pc, #204]	@ (800ab60 <UART_SetConfig+0x4e4>)
 800aa92:	fba2 2303 	umull	r2, r3, r2, r3
 800aa96:	095b      	lsrs	r3, r3, #5
 800aa98:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800aa9c:	441c      	add	r4, r3
 800aa9e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800aaa2:	2200      	movs	r2, #0
 800aaa4:	673b      	str	r3, [r7, #112]	@ 0x70
 800aaa6:	677a      	str	r2, [r7, #116]	@ 0x74
 800aaa8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800aaac:	4642      	mov	r2, r8
 800aaae:	464b      	mov	r3, r9
 800aab0:	1891      	adds	r1, r2, r2
 800aab2:	60b9      	str	r1, [r7, #8]
 800aab4:	415b      	adcs	r3, r3
 800aab6:	60fb      	str	r3, [r7, #12]
 800aab8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800aabc:	4641      	mov	r1, r8
 800aabe:	1851      	adds	r1, r2, r1
 800aac0:	6039      	str	r1, [r7, #0]
 800aac2:	4649      	mov	r1, r9
 800aac4:	414b      	adcs	r3, r1
 800aac6:	607b      	str	r3, [r7, #4]
 800aac8:	f04f 0200 	mov.w	r2, #0
 800aacc:	f04f 0300 	mov.w	r3, #0
 800aad0:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800aad4:	4659      	mov	r1, fp
 800aad6:	00cb      	lsls	r3, r1, #3
 800aad8:	4651      	mov	r1, sl
 800aada:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800aade:	4651      	mov	r1, sl
 800aae0:	00ca      	lsls	r2, r1, #3
 800aae2:	4610      	mov	r0, r2
 800aae4:	4619      	mov	r1, r3
 800aae6:	4603      	mov	r3, r0
 800aae8:	4642      	mov	r2, r8
 800aaea:	189b      	adds	r3, r3, r2
 800aaec:	66bb      	str	r3, [r7, #104]	@ 0x68
 800aaee:	464b      	mov	r3, r9
 800aaf0:	460a      	mov	r2, r1
 800aaf2:	eb42 0303 	adc.w	r3, r2, r3
 800aaf6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800aaf8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800aafc:	685b      	ldr	r3, [r3, #4]
 800aafe:	2200      	movs	r2, #0
 800ab00:	663b      	str	r3, [r7, #96]	@ 0x60
 800ab02:	667a      	str	r2, [r7, #100]	@ 0x64
 800ab04:	f04f 0200 	mov.w	r2, #0
 800ab08:	f04f 0300 	mov.w	r3, #0
 800ab0c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800ab10:	4649      	mov	r1, r9
 800ab12:	008b      	lsls	r3, r1, #2
 800ab14:	4641      	mov	r1, r8
 800ab16:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800ab1a:	4641      	mov	r1, r8
 800ab1c:	008a      	lsls	r2, r1, #2
 800ab1e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800ab22:	f7f6 f8b9 	bl	8000c98 <__aeabi_uldivmod>
 800ab26:	4602      	mov	r2, r0
 800ab28:	460b      	mov	r3, r1
 800ab2a:	4b0d      	ldr	r3, [pc, #52]	@ (800ab60 <UART_SetConfig+0x4e4>)
 800ab2c:	fba3 1302 	umull	r1, r3, r3, r2
 800ab30:	095b      	lsrs	r3, r3, #5
 800ab32:	2164      	movs	r1, #100	@ 0x64
 800ab34:	fb01 f303 	mul.w	r3, r1, r3
 800ab38:	1ad3      	subs	r3, r2, r3
 800ab3a:	011b      	lsls	r3, r3, #4
 800ab3c:	3332      	adds	r3, #50	@ 0x32
 800ab3e:	4a08      	ldr	r2, [pc, #32]	@ (800ab60 <UART_SetConfig+0x4e4>)
 800ab40:	fba2 2303 	umull	r2, r3, r2, r3
 800ab44:	095b      	lsrs	r3, r3, #5
 800ab46:	f003 020f 	and.w	r2, r3, #15
 800ab4a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ab4e:	681b      	ldr	r3, [r3, #0]
 800ab50:	4422      	add	r2, r4
 800ab52:	609a      	str	r2, [r3, #8]
}
 800ab54:	bf00      	nop
 800ab56:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800ab5a:	46bd      	mov	sp, r7
 800ab5c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800ab60:	51eb851f 	.word	0x51eb851f

0800ab64 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800ab64:	b580      	push	{r7, lr}
 800ab66:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 800ab68:	4904      	ldr	r1, [pc, #16]	@ (800ab7c <MX_FATFS_Init+0x18>)
 800ab6a:	4805      	ldr	r0, [pc, #20]	@ (800ab80 <MX_FATFS_Init+0x1c>)
 800ab6c:	f000 f8b0 	bl	800acd0 <FATFS_LinkDriver>
 800ab70:	4603      	mov	r3, r0
 800ab72:	461a      	mov	r2, r3
 800ab74:	4b03      	ldr	r3, [pc, #12]	@ (800ab84 <MX_FATFS_Init+0x20>)
 800ab76:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800ab78:	bf00      	nop
 800ab7a:	bd80      	pop	{r7, pc}
 800ab7c:	200140c0 	.word	0x200140c0
 800ab80:	2000d120 	.word	0x2000d120
 800ab84:	200140bc 	.word	0x200140bc

0800ab88 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 800ab88:	b480      	push	{r7}
 800ab8a:	b083      	sub	sp, #12
 800ab8c:	af00      	add	r7, sp, #0
 800ab8e:	4603      	mov	r3, r0
 800ab90:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    Stat = STA_NOINIT;
 800ab92:	4b06      	ldr	r3, [pc, #24]	@ (800abac <USER_initialize+0x24>)
 800ab94:	2201      	movs	r2, #1
 800ab96:	701a      	strb	r2, [r3, #0]
    return Stat;
 800ab98:	4b04      	ldr	r3, [pc, #16]	@ (800abac <USER_initialize+0x24>)
 800ab9a:	781b      	ldrb	r3, [r3, #0]
 800ab9c:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 800ab9e:	4618      	mov	r0, r3
 800aba0:	370c      	adds	r7, #12
 800aba2:	46bd      	mov	sp, r7
 800aba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aba8:	4770      	bx	lr
 800abaa:	bf00      	nop
 800abac:	2000d11d 	.word	0x2000d11d

0800abb0 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 800abb0:	b480      	push	{r7}
 800abb2:	b083      	sub	sp, #12
 800abb4:	af00      	add	r7, sp, #0
 800abb6:	4603      	mov	r3, r0
 800abb8:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    Stat = STA_NOINIT;
 800abba:	4b06      	ldr	r3, [pc, #24]	@ (800abd4 <USER_status+0x24>)
 800abbc:	2201      	movs	r2, #1
 800abbe:	701a      	strb	r2, [r3, #0]
    return Stat;
 800abc0:	4b04      	ldr	r3, [pc, #16]	@ (800abd4 <USER_status+0x24>)
 800abc2:	781b      	ldrb	r3, [r3, #0]
 800abc4:	b2db      	uxtb	r3, r3
  /* USER CODE END STATUS */
}
 800abc6:	4618      	mov	r0, r3
 800abc8:	370c      	adds	r7, #12
 800abca:	46bd      	mov	sp, r7
 800abcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abd0:	4770      	bx	lr
 800abd2:	bf00      	nop
 800abd4:	2000d11d 	.word	0x2000d11d

0800abd8 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 800abd8:	b480      	push	{r7}
 800abda:	b085      	sub	sp, #20
 800abdc:	af00      	add	r7, sp, #0
 800abde:	60b9      	str	r1, [r7, #8]
 800abe0:	607a      	str	r2, [r7, #4]
 800abe2:	603b      	str	r3, [r7, #0]
 800abe4:	4603      	mov	r3, r0
 800abe6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return RES_OK;
 800abe8:	2300      	movs	r3, #0
  /* USER CODE END READ */
}
 800abea:	4618      	mov	r0, r3
 800abec:	3714      	adds	r7, #20
 800abee:	46bd      	mov	sp, r7
 800abf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abf4:	4770      	bx	lr

0800abf6 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 800abf6:	b480      	push	{r7}
 800abf8:	b085      	sub	sp, #20
 800abfa:	af00      	add	r7, sp, #0
 800abfc:	60b9      	str	r1, [r7, #8]
 800abfe:	607a      	str	r2, [r7, #4]
 800ac00:	603b      	str	r3, [r7, #0]
 800ac02:	4603      	mov	r3, r0
 800ac04:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return RES_OK;
 800ac06:	2300      	movs	r3, #0
  /* USER CODE END WRITE */
}
 800ac08:	4618      	mov	r0, r3
 800ac0a:	3714      	adds	r7, #20
 800ac0c:	46bd      	mov	sp, r7
 800ac0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac12:	4770      	bx	lr

0800ac14 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 800ac14:	b480      	push	{r7}
 800ac16:	b085      	sub	sp, #20
 800ac18:	af00      	add	r7, sp, #0
 800ac1a:	4603      	mov	r3, r0
 800ac1c:	603a      	str	r2, [r7, #0]
 800ac1e:	71fb      	strb	r3, [r7, #7]
 800ac20:	460b      	mov	r3, r1
 800ac22:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    DRESULT res = RES_ERROR;
 800ac24:	2301      	movs	r3, #1
 800ac26:	73fb      	strb	r3, [r7, #15]
    return res;
 800ac28:	7bfb      	ldrb	r3, [r7, #15]
  /* USER CODE END IOCTL */
}
 800ac2a:	4618      	mov	r0, r3
 800ac2c:	3714      	adds	r7, #20
 800ac2e:	46bd      	mov	sp, r7
 800ac30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac34:	4770      	bx	lr
	...

0800ac38 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800ac38:	b480      	push	{r7}
 800ac3a:	b087      	sub	sp, #28
 800ac3c:	af00      	add	r7, sp, #0
 800ac3e:	60f8      	str	r0, [r7, #12]
 800ac40:	60b9      	str	r1, [r7, #8]
 800ac42:	4613      	mov	r3, r2
 800ac44:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800ac46:	2301      	movs	r3, #1
 800ac48:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800ac4a:	2300      	movs	r3, #0
 800ac4c:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800ac4e:	4b1f      	ldr	r3, [pc, #124]	@ (800accc <FATFS_LinkDriverEx+0x94>)
 800ac50:	7a5b      	ldrb	r3, [r3, #9]
 800ac52:	b2db      	uxtb	r3, r3
 800ac54:	2b00      	cmp	r3, #0
 800ac56:	d131      	bne.n	800acbc <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800ac58:	4b1c      	ldr	r3, [pc, #112]	@ (800accc <FATFS_LinkDriverEx+0x94>)
 800ac5a:	7a5b      	ldrb	r3, [r3, #9]
 800ac5c:	b2db      	uxtb	r3, r3
 800ac5e:	461a      	mov	r2, r3
 800ac60:	4b1a      	ldr	r3, [pc, #104]	@ (800accc <FATFS_LinkDriverEx+0x94>)
 800ac62:	2100      	movs	r1, #0
 800ac64:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800ac66:	4b19      	ldr	r3, [pc, #100]	@ (800accc <FATFS_LinkDriverEx+0x94>)
 800ac68:	7a5b      	ldrb	r3, [r3, #9]
 800ac6a:	b2db      	uxtb	r3, r3
 800ac6c:	4a17      	ldr	r2, [pc, #92]	@ (800accc <FATFS_LinkDriverEx+0x94>)
 800ac6e:	009b      	lsls	r3, r3, #2
 800ac70:	4413      	add	r3, r2
 800ac72:	68fa      	ldr	r2, [r7, #12]
 800ac74:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800ac76:	4b15      	ldr	r3, [pc, #84]	@ (800accc <FATFS_LinkDriverEx+0x94>)
 800ac78:	7a5b      	ldrb	r3, [r3, #9]
 800ac7a:	b2db      	uxtb	r3, r3
 800ac7c:	461a      	mov	r2, r3
 800ac7e:	4b13      	ldr	r3, [pc, #76]	@ (800accc <FATFS_LinkDriverEx+0x94>)
 800ac80:	4413      	add	r3, r2
 800ac82:	79fa      	ldrb	r2, [r7, #7]
 800ac84:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800ac86:	4b11      	ldr	r3, [pc, #68]	@ (800accc <FATFS_LinkDriverEx+0x94>)
 800ac88:	7a5b      	ldrb	r3, [r3, #9]
 800ac8a:	b2db      	uxtb	r3, r3
 800ac8c:	1c5a      	adds	r2, r3, #1
 800ac8e:	b2d1      	uxtb	r1, r2
 800ac90:	4a0e      	ldr	r2, [pc, #56]	@ (800accc <FATFS_LinkDriverEx+0x94>)
 800ac92:	7251      	strb	r1, [r2, #9]
 800ac94:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800ac96:	7dbb      	ldrb	r3, [r7, #22]
 800ac98:	3330      	adds	r3, #48	@ 0x30
 800ac9a:	b2da      	uxtb	r2, r3
 800ac9c:	68bb      	ldr	r3, [r7, #8]
 800ac9e:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800aca0:	68bb      	ldr	r3, [r7, #8]
 800aca2:	3301      	adds	r3, #1
 800aca4:	223a      	movs	r2, #58	@ 0x3a
 800aca6:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800aca8:	68bb      	ldr	r3, [r7, #8]
 800acaa:	3302      	adds	r3, #2
 800acac:	222f      	movs	r2, #47	@ 0x2f
 800acae:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800acb0:	68bb      	ldr	r3, [r7, #8]
 800acb2:	3303      	adds	r3, #3
 800acb4:	2200      	movs	r2, #0
 800acb6:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800acb8:	2300      	movs	r3, #0
 800acba:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800acbc:	7dfb      	ldrb	r3, [r7, #23]
}
 800acbe:	4618      	mov	r0, r3
 800acc0:	371c      	adds	r7, #28
 800acc2:	46bd      	mov	sp, r7
 800acc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acc8:	4770      	bx	lr
 800acca:	bf00      	nop
 800accc:	200140c4 	.word	0x200140c4

0800acd0 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800acd0:	b580      	push	{r7, lr}
 800acd2:	b082      	sub	sp, #8
 800acd4:	af00      	add	r7, sp, #0
 800acd6:	6078      	str	r0, [r7, #4]
 800acd8:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800acda:	2200      	movs	r2, #0
 800acdc:	6839      	ldr	r1, [r7, #0]
 800acde:	6878      	ldr	r0, [r7, #4]
 800ace0:	f7ff ffaa 	bl	800ac38 <FATFS_LinkDriverEx>
 800ace4:	4603      	mov	r3, r0
}
 800ace6:	4618      	mov	r0, r3
 800ace8:	3708      	adds	r7, #8
 800acea:	46bd      	mov	sp, r7
 800acec:	bd80      	pop	{r7, pc}

0800acee <__cvt>:
 800acee:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800acf2:	ec57 6b10 	vmov	r6, r7, d0
 800acf6:	2f00      	cmp	r7, #0
 800acf8:	460c      	mov	r4, r1
 800acfa:	4619      	mov	r1, r3
 800acfc:	463b      	mov	r3, r7
 800acfe:	bfbb      	ittet	lt
 800ad00:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800ad04:	461f      	movlt	r7, r3
 800ad06:	2300      	movge	r3, #0
 800ad08:	232d      	movlt	r3, #45	@ 0x2d
 800ad0a:	700b      	strb	r3, [r1, #0]
 800ad0c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800ad0e:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800ad12:	4691      	mov	r9, r2
 800ad14:	f023 0820 	bic.w	r8, r3, #32
 800ad18:	bfbc      	itt	lt
 800ad1a:	4632      	movlt	r2, r6
 800ad1c:	4616      	movlt	r6, r2
 800ad1e:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800ad22:	d005      	beq.n	800ad30 <__cvt+0x42>
 800ad24:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800ad28:	d100      	bne.n	800ad2c <__cvt+0x3e>
 800ad2a:	3401      	adds	r4, #1
 800ad2c:	2102      	movs	r1, #2
 800ad2e:	e000      	b.n	800ad32 <__cvt+0x44>
 800ad30:	2103      	movs	r1, #3
 800ad32:	ab03      	add	r3, sp, #12
 800ad34:	9301      	str	r3, [sp, #4]
 800ad36:	ab02      	add	r3, sp, #8
 800ad38:	9300      	str	r3, [sp, #0]
 800ad3a:	ec47 6b10 	vmov	d0, r6, r7
 800ad3e:	4653      	mov	r3, sl
 800ad40:	4622      	mov	r2, r4
 800ad42:	f001 f9d5 	bl	800c0f0 <_dtoa_r>
 800ad46:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800ad4a:	4605      	mov	r5, r0
 800ad4c:	d119      	bne.n	800ad82 <__cvt+0x94>
 800ad4e:	f019 0f01 	tst.w	r9, #1
 800ad52:	d00e      	beq.n	800ad72 <__cvt+0x84>
 800ad54:	eb00 0904 	add.w	r9, r0, r4
 800ad58:	2200      	movs	r2, #0
 800ad5a:	2300      	movs	r3, #0
 800ad5c:	4630      	mov	r0, r6
 800ad5e:	4639      	mov	r1, r7
 800ad60:	f7f5 feba 	bl	8000ad8 <__aeabi_dcmpeq>
 800ad64:	b108      	cbz	r0, 800ad6a <__cvt+0x7c>
 800ad66:	f8cd 900c 	str.w	r9, [sp, #12]
 800ad6a:	2230      	movs	r2, #48	@ 0x30
 800ad6c:	9b03      	ldr	r3, [sp, #12]
 800ad6e:	454b      	cmp	r3, r9
 800ad70:	d31e      	bcc.n	800adb0 <__cvt+0xc2>
 800ad72:	9b03      	ldr	r3, [sp, #12]
 800ad74:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ad76:	1b5b      	subs	r3, r3, r5
 800ad78:	4628      	mov	r0, r5
 800ad7a:	6013      	str	r3, [r2, #0]
 800ad7c:	b004      	add	sp, #16
 800ad7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ad82:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800ad86:	eb00 0904 	add.w	r9, r0, r4
 800ad8a:	d1e5      	bne.n	800ad58 <__cvt+0x6a>
 800ad8c:	7803      	ldrb	r3, [r0, #0]
 800ad8e:	2b30      	cmp	r3, #48	@ 0x30
 800ad90:	d10a      	bne.n	800ada8 <__cvt+0xba>
 800ad92:	2200      	movs	r2, #0
 800ad94:	2300      	movs	r3, #0
 800ad96:	4630      	mov	r0, r6
 800ad98:	4639      	mov	r1, r7
 800ad9a:	f7f5 fe9d 	bl	8000ad8 <__aeabi_dcmpeq>
 800ad9e:	b918      	cbnz	r0, 800ada8 <__cvt+0xba>
 800ada0:	f1c4 0401 	rsb	r4, r4, #1
 800ada4:	f8ca 4000 	str.w	r4, [sl]
 800ada8:	f8da 3000 	ldr.w	r3, [sl]
 800adac:	4499      	add	r9, r3
 800adae:	e7d3      	b.n	800ad58 <__cvt+0x6a>
 800adb0:	1c59      	adds	r1, r3, #1
 800adb2:	9103      	str	r1, [sp, #12]
 800adb4:	701a      	strb	r2, [r3, #0]
 800adb6:	e7d9      	b.n	800ad6c <__cvt+0x7e>

0800adb8 <__exponent>:
 800adb8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800adba:	2900      	cmp	r1, #0
 800adbc:	bfba      	itte	lt
 800adbe:	4249      	neglt	r1, r1
 800adc0:	232d      	movlt	r3, #45	@ 0x2d
 800adc2:	232b      	movge	r3, #43	@ 0x2b
 800adc4:	2909      	cmp	r1, #9
 800adc6:	7002      	strb	r2, [r0, #0]
 800adc8:	7043      	strb	r3, [r0, #1]
 800adca:	dd29      	ble.n	800ae20 <__exponent+0x68>
 800adcc:	f10d 0307 	add.w	r3, sp, #7
 800add0:	461d      	mov	r5, r3
 800add2:	270a      	movs	r7, #10
 800add4:	461a      	mov	r2, r3
 800add6:	fbb1 f6f7 	udiv	r6, r1, r7
 800adda:	fb07 1416 	mls	r4, r7, r6, r1
 800adde:	3430      	adds	r4, #48	@ 0x30
 800ade0:	f802 4c01 	strb.w	r4, [r2, #-1]
 800ade4:	460c      	mov	r4, r1
 800ade6:	2c63      	cmp	r4, #99	@ 0x63
 800ade8:	f103 33ff 	add.w	r3, r3, #4294967295
 800adec:	4631      	mov	r1, r6
 800adee:	dcf1      	bgt.n	800add4 <__exponent+0x1c>
 800adf0:	3130      	adds	r1, #48	@ 0x30
 800adf2:	1e94      	subs	r4, r2, #2
 800adf4:	f803 1c01 	strb.w	r1, [r3, #-1]
 800adf8:	1c41      	adds	r1, r0, #1
 800adfa:	4623      	mov	r3, r4
 800adfc:	42ab      	cmp	r3, r5
 800adfe:	d30a      	bcc.n	800ae16 <__exponent+0x5e>
 800ae00:	f10d 0309 	add.w	r3, sp, #9
 800ae04:	1a9b      	subs	r3, r3, r2
 800ae06:	42ac      	cmp	r4, r5
 800ae08:	bf88      	it	hi
 800ae0a:	2300      	movhi	r3, #0
 800ae0c:	3302      	adds	r3, #2
 800ae0e:	4403      	add	r3, r0
 800ae10:	1a18      	subs	r0, r3, r0
 800ae12:	b003      	add	sp, #12
 800ae14:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ae16:	f813 6b01 	ldrb.w	r6, [r3], #1
 800ae1a:	f801 6f01 	strb.w	r6, [r1, #1]!
 800ae1e:	e7ed      	b.n	800adfc <__exponent+0x44>
 800ae20:	2330      	movs	r3, #48	@ 0x30
 800ae22:	3130      	adds	r1, #48	@ 0x30
 800ae24:	7083      	strb	r3, [r0, #2]
 800ae26:	70c1      	strb	r1, [r0, #3]
 800ae28:	1d03      	adds	r3, r0, #4
 800ae2a:	e7f1      	b.n	800ae10 <__exponent+0x58>

0800ae2c <_printf_float>:
 800ae2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ae30:	b08d      	sub	sp, #52	@ 0x34
 800ae32:	460c      	mov	r4, r1
 800ae34:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800ae38:	4616      	mov	r6, r2
 800ae3a:	461f      	mov	r7, r3
 800ae3c:	4605      	mov	r5, r0
 800ae3e:	f001 f823 	bl	800be88 <_localeconv_r>
 800ae42:	6803      	ldr	r3, [r0, #0]
 800ae44:	9304      	str	r3, [sp, #16]
 800ae46:	4618      	mov	r0, r3
 800ae48:	f7f5 fa1a 	bl	8000280 <strlen>
 800ae4c:	2300      	movs	r3, #0
 800ae4e:	930a      	str	r3, [sp, #40]	@ 0x28
 800ae50:	f8d8 3000 	ldr.w	r3, [r8]
 800ae54:	9005      	str	r0, [sp, #20]
 800ae56:	3307      	adds	r3, #7
 800ae58:	f023 0307 	bic.w	r3, r3, #7
 800ae5c:	f103 0208 	add.w	r2, r3, #8
 800ae60:	f894 a018 	ldrb.w	sl, [r4, #24]
 800ae64:	f8d4 b000 	ldr.w	fp, [r4]
 800ae68:	f8c8 2000 	str.w	r2, [r8]
 800ae6c:	e9d3 8900 	ldrd	r8, r9, [r3]
 800ae70:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800ae74:	9307      	str	r3, [sp, #28]
 800ae76:	f8cd 8018 	str.w	r8, [sp, #24]
 800ae7a:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800ae7e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ae82:	4b9c      	ldr	r3, [pc, #624]	@ (800b0f4 <_printf_float+0x2c8>)
 800ae84:	f04f 32ff 	mov.w	r2, #4294967295
 800ae88:	f7f5 fe58 	bl	8000b3c <__aeabi_dcmpun>
 800ae8c:	bb70      	cbnz	r0, 800aeec <_printf_float+0xc0>
 800ae8e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ae92:	4b98      	ldr	r3, [pc, #608]	@ (800b0f4 <_printf_float+0x2c8>)
 800ae94:	f04f 32ff 	mov.w	r2, #4294967295
 800ae98:	f7f5 fe32 	bl	8000b00 <__aeabi_dcmple>
 800ae9c:	bb30      	cbnz	r0, 800aeec <_printf_float+0xc0>
 800ae9e:	2200      	movs	r2, #0
 800aea0:	2300      	movs	r3, #0
 800aea2:	4640      	mov	r0, r8
 800aea4:	4649      	mov	r1, r9
 800aea6:	f7f5 fe21 	bl	8000aec <__aeabi_dcmplt>
 800aeaa:	b110      	cbz	r0, 800aeb2 <_printf_float+0x86>
 800aeac:	232d      	movs	r3, #45	@ 0x2d
 800aeae:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800aeb2:	4a91      	ldr	r2, [pc, #580]	@ (800b0f8 <_printf_float+0x2cc>)
 800aeb4:	4b91      	ldr	r3, [pc, #580]	@ (800b0fc <_printf_float+0x2d0>)
 800aeb6:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800aeba:	bf8c      	ite	hi
 800aebc:	4690      	movhi	r8, r2
 800aebe:	4698      	movls	r8, r3
 800aec0:	2303      	movs	r3, #3
 800aec2:	6123      	str	r3, [r4, #16]
 800aec4:	f02b 0304 	bic.w	r3, fp, #4
 800aec8:	6023      	str	r3, [r4, #0]
 800aeca:	f04f 0900 	mov.w	r9, #0
 800aece:	9700      	str	r7, [sp, #0]
 800aed0:	4633      	mov	r3, r6
 800aed2:	aa0b      	add	r2, sp, #44	@ 0x2c
 800aed4:	4621      	mov	r1, r4
 800aed6:	4628      	mov	r0, r5
 800aed8:	f000 f9d2 	bl	800b280 <_printf_common>
 800aedc:	3001      	adds	r0, #1
 800aede:	f040 808d 	bne.w	800affc <_printf_float+0x1d0>
 800aee2:	f04f 30ff 	mov.w	r0, #4294967295
 800aee6:	b00d      	add	sp, #52	@ 0x34
 800aee8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aeec:	4642      	mov	r2, r8
 800aeee:	464b      	mov	r3, r9
 800aef0:	4640      	mov	r0, r8
 800aef2:	4649      	mov	r1, r9
 800aef4:	f7f5 fe22 	bl	8000b3c <__aeabi_dcmpun>
 800aef8:	b140      	cbz	r0, 800af0c <_printf_float+0xe0>
 800aefa:	464b      	mov	r3, r9
 800aefc:	2b00      	cmp	r3, #0
 800aefe:	bfbc      	itt	lt
 800af00:	232d      	movlt	r3, #45	@ 0x2d
 800af02:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800af06:	4a7e      	ldr	r2, [pc, #504]	@ (800b100 <_printf_float+0x2d4>)
 800af08:	4b7e      	ldr	r3, [pc, #504]	@ (800b104 <_printf_float+0x2d8>)
 800af0a:	e7d4      	b.n	800aeb6 <_printf_float+0x8a>
 800af0c:	6863      	ldr	r3, [r4, #4]
 800af0e:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800af12:	9206      	str	r2, [sp, #24]
 800af14:	1c5a      	adds	r2, r3, #1
 800af16:	d13b      	bne.n	800af90 <_printf_float+0x164>
 800af18:	2306      	movs	r3, #6
 800af1a:	6063      	str	r3, [r4, #4]
 800af1c:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800af20:	2300      	movs	r3, #0
 800af22:	6022      	str	r2, [r4, #0]
 800af24:	9303      	str	r3, [sp, #12]
 800af26:	ab0a      	add	r3, sp, #40	@ 0x28
 800af28:	e9cd a301 	strd	sl, r3, [sp, #4]
 800af2c:	ab09      	add	r3, sp, #36	@ 0x24
 800af2e:	9300      	str	r3, [sp, #0]
 800af30:	6861      	ldr	r1, [r4, #4]
 800af32:	ec49 8b10 	vmov	d0, r8, r9
 800af36:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800af3a:	4628      	mov	r0, r5
 800af3c:	f7ff fed7 	bl	800acee <__cvt>
 800af40:	9b06      	ldr	r3, [sp, #24]
 800af42:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800af44:	2b47      	cmp	r3, #71	@ 0x47
 800af46:	4680      	mov	r8, r0
 800af48:	d129      	bne.n	800af9e <_printf_float+0x172>
 800af4a:	1cc8      	adds	r0, r1, #3
 800af4c:	db02      	blt.n	800af54 <_printf_float+0x128>
 800af4e:	6863      	ldr	r3, [r4, #4]
 800af50:	4299      	cmp	r1, r3
 800af52:	dd41      	ble.n	800afd8 <_printf_float+0x1ac>
 800af54:	f1aa 0a02 	sub.w	sl, sl, #2
 800af58:	fa5f fa8a 	uxtb.w	sl, sl
 800af5c:	3901      	subs	r1, #1
 800af5e:	4652      	mov	r2, sl
 800af60:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800af64:	9109      	str	r1, [sp, #36]	@ 0x24
 800af66:	f7ff ff27 	bl	800adb8 <__exponent>
 800af6a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800af6c:	1813      	adds	r3, r2, r0
 800af6e:	2a01      	cmp	r2, #1
 800af70:	4681      	mov	r9, r0
 800af72:	6123      	str	r3, [r4, #16]
 800af74:	dc02      	bgt.n	800af7c <_printf_float+0x150>
 800af76:	6822      	ldr	r2, [r4, #0]
 800af78:	07d2      	lsls	r2, r2, #31
 800af7a:	d501      	bpl.n	800af80 <_printf_float+0x154>
 800af7c:	3301      	adds	r3, #1
 800af7e:	6123      	str	r3, [r4, #16]
 800af80:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800af84:	2b00      	cmp	r3, #0
 800af86:	d0a2      	beq.n	800aece <_printf_float+0xa2>
 800af88:	232d      	movs	r3, #45	@ 0x2d
 800af8a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800af8e:	e79e      	b.n	800aece <_printf_float+0xa2>
 800af90:	9a06      	ldr	r2, [sp, #24]
 800af92:	2a47      	cmp	r2, #71	@ 0x47
 800af94:	d1c2      	bne.n	800af1c <_printf_float+0xf0>
 800af96:	2b00      	cmp	r3, #0
 800af98:	d1c0      	bne.n	800af1c <_printf_float+0xf0>
 800af9a:	2301      	movs	r3, #1
 800af9c:	e7bd      	b.n	800af1a <_printf_float+0xee>
 800af9e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800afa2:	d9db      	bls.n	800af5c <_printf_float+0x130>
 800afa4:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800afa8:	d118      	bne.n	800afdc <_printf_float+0x1b0>
 800afaa:	2900      	cmp	r1, #0
 800afac:	6863      	ldr	r3, [r4, #4]
 800afae:	dd0b      	ble.n	800afc8 <_printf_float+0x19c>
 800afb0:	6121      	str	r1, [r4, #16]
 800afb2:	b913      	cbnz	r3, 800afba <_printf_float+0x18e>
 800afb4:	6822      	ldr	r2, [r4, #0]
 800afb6:	07d0      	lsls	r0, r2, #31
 800afb8:	d502      	bpl.n	800afc0 <_printf_float+0x194>
 800afba:	3301      	adds	r3, #1
 800afbc:	440b      	add	r3, r1
 800afbe:	6123      	str	r3, [r4, #16]
 800afc0:	65a1      	str	r1, [r4, #88]	@ 0x58
 800afc2:	f04f 0900 	mov.w	r9, #0
 800afc6:	e7db      	b.n	800af80 <_printf_float+0x154>
 800afc8:	b913      	cbnz	r3, 800afd0 <_printf_float+0x1a4>
 800afca:	6822      	ldr	r2, [r4, #0]
 800afcc:	07d2      	lsls	r2, r2, #31
 800afce:	d501      	bpl.n	800afd4 <_printf_float+0x1a8>
 800afd0:	3302      	adds	r3, #2
 800afd2:	e7f4      	b.n	800afbe <_printf_float+0x192>
 800afd4:	2301      	movs	r3, #1
 800afd6:	e7f2      	b.n	800afbe <_printf_float+0x192>
 800afd8:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800afdc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800afde:	4299      	cmp	r1, r3
 800afe0:	db05      	blt.n	800afee <_printf_float+0x1c2>
 800afe2:	6823      	ldr	r3, [r4, #0]
 800afe4:	6121      	str	r1, [r4, #16]
 800afe6:	07d8      	lsls	r0, r3, #31
 800afe8:	d5ea      	bpl.n	800afc0 <_printf_float+0x194>
 800afea:	1c4b      	adds	r3, r1, #1
 800afec:	e7e7      	b.n	800afbe <_printf_float+0x192>
 800afee:	2900      	cmp	r1, #0
 800aff0:	bfd4      	ite	le
 800aff2:	f1c1 0202 	rsble	r2, r1, #2
 800aff6:	2201      	movgt	r2, #1
 800aff8:	4413      	add	r3, r2
 800affa:	e7e0      	b.n	800afbe <_printf_float+0x192>
 800affc:	6823      	ldr	r3, [r4, #0]
 800affe:	055a      	lsls	r2, r3, #21
 800b000:	d407      	bmi.n	800b012 <_printf_float+0x1e6>
 800b002:	6923      	ldr	r3, [r4, #16]
 800b004:	4642      	mov	r2, r8
 800b006:	4631      	mov	r1, r6
 800b008:	4628      	mov	r0, r5
 800b00a:	47b8      	blx	r7
 800b00c:	3001      	adds	r0, #1
 800b00e:	d12b      	bne.n	800b068 <_printf_float+0x23c>
 800b010:	e767      	b.n	800aee2 <_printf_float+0xb6>
 800b012:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800b016:	f240 80dd 	bls.w	800b1d4 <_printf_float+0x3a8>
 800b01a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800b01e:	2200      	movs	r2, #0
 800b020:	2300      	movs	r3, #0
 800b022:	f7f5 fd59 	bl	8000ad8 <__aeabi_dcmpeq>
 800b026:	2800      	cmp	r0, #0
 800b028:	d033      	beq.n	800b092 <_printf_float+0x266>
 800b02a:	4a37      	ldr	r2, [pc, #220]	@ (800b108 <_printf_float+0x2dc>)
 800b02c:	2301      	movs	r3, #1
 800b02e:	4631      	mov	r1, r6
 800b030:	4628      	mov	r0, r5
 800b032:	47b8      	blx	r7
 800b034:	3001      	adds	r0, #1
 800b036:	f43f af54 	beq.w	800aee2 <_printf_float+0xb6>
 800b03a:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800b03e:	4543      	cmp	r3, r8
 800b040:	db02      	blt.n	800b048 <_printf_float+0x21c>
 800b042:	6823      	ldr	r3, [r4, #0]
 800b044:	07d8      	lsls	r0, r3, #31
 800b046:	d50f      	bpl.n	800b068 <_printf_float+0x23c>
 800b048:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b04c:	4631      	mov	r1, r6
 800b04e:	4628      	mov	r0, r5
 800b050:	47b8      	blx	r7
 800b052:	3001      	adds	r0, #1
 800b054:	f43f af45 	beq.w	800aee2 <_printf_float+0xb6>
 800b058:	f04f 0900 	mov.w	r9, #0
 800b05c:	f108 38ff 	add.w	r8, r8, #4294967295
 800b060:	f104 0a1a 	add.w	sl, r4, #26
 800b064:	45c8      	cmp	r8, r9
 800b066:	dc09      	bgt.n	800b07c <_printf_float+0x250>
 800b068:	6823      	ldr	r3, [r4, #0]
 800b06a:	079b      	lsls	r3, r3, #30
 800b06c:	f100 8103 	bmi.w	800b276 <_printf_float+0x44a>
 800b070:	68e0      	ldr	r0, [r4, #12]
 800b072:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b074:	4298      	cmp	r0, r3
 800b076:	bfb8      	it	lt
 800b078:	4618      	movlt	r0, r3
 800b07a:	e734      	b.n	800aee6 <_printf_float+0xba>
 800b07c:	2301      	movs	r3, #1
 800b07e:	4652      	mov	r2, sl
 800b080:	4631      	mov	r1, r6
 800b082:	4628      	mov	r0, r5
 800b084:	47b8      	blx	r7
 800b086:	3001      	adds	r0, #1
 800b088:	f43f af2b 	beq.w	800aee2 <_printf_float+0xb6>
 800b08c:	f109 0901 	add.w	r9, r9, #1
 800b090:	e7e8      	b.n	800b064 <_printf_float+0x238>
 800b092:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b094:	2b00      	cmp	r3, #0
 800b096:	dc39      	bgt.n	800b10c <_printf_float+0x2e0>
 800b098:	4a1b      	ldr	r2, [pc, #108]	@ (800b108 <_printf_float+0x2dc>)
 800b09a:	2301      	movs	r3, #1
 800b09c:	4631      	mov	r1, r6
 800b09e:	4628      	mov	r0, r5
 800b0a0:	47b8      	blx	r7
 800b0a2:	3001      	adds	r0, #1
 800b0a4:	f43f af1d 	beq.w	800aee2 <_printf_float+0xb6>
 800b0a8:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800b0ac:	ea59 0303 	orrs.w	r3, r9, r3
 800b0b0:	d102      	bne.n	800b0b8 <_printf_float+0x28c>
 800b0b2:	6823      	ldr	r3, [r4, #0]
 800b0b4:	07d9      	lsls	r1, r3, #31
 800b0b6:	d5d7      	bpl.n	800b068 <_printf_float+0x23c>
 800b0b8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b0bc:	4631      	mov	r1, r6
 800b0be:	4628      	mov	r0, r5
 800b0c0:	47b8      	blx	r7
 800b0c2:	3001      	adds	r0, #1
 800b0c4:	f43f af0d 	beq.w	800aee2 <_printf_float+0xb6>
 800b0c8:	f04f 0a00 	mov.w	sl, #0
 800b0cc:	f104 0b1a 	add.w	fp, r4, #26
 800b0d0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b0d2:	425b      	negs	r3, r3
 800b0d4:	4553      	cmp	r3, sl
 800b0d6:	dc01      	bgt.n	800b0dc <_printf_float+0x2b0>
 800b0d8:	464b      	mov	r3, r9
 800b0da:	e793      	b.n	800b004 <_printf_float+0x1d8>
 800b0dc:	2301      	movs	r3, #1
 800b0de:	465a      	mov	r2, fp
 800b0e0:	4631      	mov	r1, r6
 800b0e2:	4628      	mov	r0, r5
 800b0e4:	47b8      	blx	r7
 800b0e6:	3001      	adds	r0, #1
 800b0e8:	f43f aefb 	beq.w	800aee2 <_printf_float+0xb6>
 800b0ec:	f10a 0a01 	add.w	sl, sl, #1
 800b0f0:	e7ee      	b.n	800b0d0 <_printf_float+0x2a4>
 800b0f2:	bf00      	nop
 800b0f4:	7fefffff 	.word	0x7fefffff
 800b0f8:	08010c5c 	.word	0x08010c5c
 800b0fc:	08010c58 	.word	0x08010c58
 800b100:	08010c64 	.word	0x08010c64
 800b104:	08010c60 	.word	0x08010c60
 800b108:	08010c68 	.word	0x08010c68
 800b10c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800b10e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800b112:	4553      	cmp	r3, sl
 800b114:	bfa8      	it	ge
 800b116:	4653      	movge	r3, sl
 800b118:	2b00      	cmp	r3, #0
 800b11a:	4699      	mov	r9, r3
 800b11c:	dc36      	bgt.n	800b18c <_printf_float+0x360>
 800b11e:	f04f 0b00 	mov.w	fp, #0
 800b122:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b126:	f104 021a 	add.w	r2, r4, #26
 800b12a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800b12c:	9306      	str	r3, [sp, #24]
 800b12e:	eba3 0309 	sub.w	r3, r3, r9
 800b132:	455b      	cmp	r3, fp
 800b134:	dc31      	bgt.n	800b19a <_printf_float+0x36e>
 800b136:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b138:	459a      	cmp	sl, r3
 800b13a:	dc3a      	bgt.n	800b1b2 <_printf_float+0x386>
 800b13c:	6823      	ldr	r3, [r4, #0]
 800b13e:	07da      	lsls	r2, r3, #31
 800b140:	d437      	bmi.n	800b1b2 <_printf_float+0x386>
 800b142:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b144:	ebaa 0903 	sub.w	r9, sl, r3
 800b148:	9b06      	ldr	r3, [sp, #24]
 800b14a:	ebaa 0303 	sub.w	r3, sl, r3
 800b14e:	4599      	cmp	r9, r3
 800b150:	bfa8      	it	ge
 800b152:	4699      	movge	r9, r3
 800b154:	f1b9 0f00 	cmp.w	r9, #0
 800b158:	dc33      	bgt.n	800b1c2 <_printf_float+0x396>
 800b15a:	f04f 0800 	mov.w	r8, #0
 800b15e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b162:	f104 0b1a 	add.w	fp, r4, #26
 800b166:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b168:	ebaa 0303 	sub.w	r3, sl, r3
 800b16c:	eba3 0309 	sub.w	r3, r3, r9
 800b170:	4543      	cmp	r3, r8
 800b172:	f77f af79 	ble.w	800b068 <_printf_float+0x23c>
 800b176:	2301      	movs	r3, #1
 800b178:	465a      	mov	r2, fp
 800b17a:	4631      	mov	r1, r6
 800b17c:	4628      	mov	r0, r5
 800b17e:	47b8      	blx	r7
 800b180:	3001      	adds	r0, #1
 800b182:	f43f aeae 	beq.w	800aee2 <_printf_float+0xb6>
 800b186:	f108 0801 	add.w	r8, r8, #1
 800b18a:	e7ec      	b.n	800b166 <_printf_float+0x33a>
 800b18c:	4642      	mov	r2, r8
 800b18e:	4631      	mov	r1, r6
 800b190:	4628      	mov	r0, r5
 800b192:	47b8      	blx	r7
 800b194:	3001      	adds	r0, #1
 800b196:	d1c2      	bne.n	800b11e <_printf_float+0x2f2>
 800b198:	e6a3      	b.n	800aee2 <_printf_float+0xb6>
 800b19a:	2301      	movs	r3, #1
 800b19c:	4631      	mov	r1, r6
 800b19e:	4628      	mov	r0, r5
 800b1a0:	9206      	str	r2, [sp, #24]
 800b1a2:	47b8      	blx	r7
 800b1a4:	3001      	adds	r0, #1
 800b1a6:	f43f ae9c 	beq.w	800aee2 <_printf_float+0xb6>
 800b1aa:	9a06      	ldr	r2, [sp, #24]
 800b1ac:	f10b 0b01 	add.w	fp, fp, #1
 800b1b0:	e7bb      	b.n	800b12a <_printf_float+0x2fe>
 800b1b2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b1b6:	4631      	mov	r1, r6
 800b1b8:	4628      	mov	r0, r5
 800b1ba:	47b8      	blx	r7
 800b1bc:	3001      	adds	r0, #1
 800b1be:	d1c0      	bne.n	800b142 <_printf_float+0x316>
 800b1c0:	e68f      	b.n	800aee2 <_printf_float+0xb6>
 800b1c2:	9a06      	ldr	r2, [sp, #24]
 800b1c4:	464b      	mov	r3, r9
 800b1c6:	4442      	add	r2, r8
 800b1c8:	4631      	mov	r1, r6
 800b1ca:	4628      	mov	r0, r5
 800b1cc:	47b8      	blx	r7
 800b1ce:	3001      	adds	r0, #1
 800b1d0:	d1c3      	bne.n	800b15a <_printf_float+0x32e>
 800b1d2:	e686      	b.n	800aee2 <_printf_float+0xb6>
 800b1d4:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800b1d8:	f1ba 0f01 	cmp.w	sl, #1
 800b1dc:	dc01      	bgt.n	800b1e2 <_printf_float+0x3b6>
 800b1de:	07db      	lsls	r3, r3, #31
 800b1e0:	d536      	bpl.n	800b250 <_printf_float+0x424>
 800b1e2:	2301      	movs	r3, #1
 800b1e4:	4642      	mov	r2, r8
 800b1e6:	4631      	mov	r1, r6
 800b1e8:	4628      	mov	r0, r5
 800b1ea:	47b8      	blx	r7
 800b1ec:	3001      	adds	r0, #1
 800b1ee:	f43f ae78 	beq.w	800aee2 <_printf_float+0xb6>
 800b1f2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b1f6:	4631      	mov	r1, r6
 800b1f8:	4628      	mov	r0, r5
 800b1fa:	47b8      	blx	r7
 800b1fc:	3001      	adds	r0, #1
 800b1fe:	f43f ae70 	beq.w	800aee2 <_printf_float+0xb6>
 800b202:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800b206:	2200      	movs	r2, #0
 800b208:	2300      	movs	r3, #0
 800b20a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b20e:	f7f5 fc63 	bl	8000ad8 <__aeabi_dcmpeq>
 800b212:	b9c0      	cbnz	r0, 800b246 <_printf_float+0x41a>
 800b214:	4653      	mov	r3, sl
 800b216:	f108 0201 	add.w	r2, r8, #1
 800b21a:	4631      	mov	r1, r6
 800b21c:	4628      	mov	r0, r5
 800b21e:	47b8      	blx	r7
 800b220:	3001      	adds	r0, #1
 800b222:	d10c      	bne.n	800b23e <_printf_float+0x412>
 800b224:	e65d      	b.n	800aee2 <_printf_float+0xb6>
 800b226:	2301      	movs	r3, #1
 800b228:	465a      	mov	r2, fp
 800b22a:	4631      	mov	r1, r6
 800b22c:	4628      	mov	r0, r5
 800b22e:	47b8      	blx	r7
 800b230:	3001      	adds	r0, #1
 800b232:	f43f ae56 	beq.w	800aee2 <_printf_float+0xb6>
 800b236:	f108 0801 	add.w	r8, r8, #1
 800b23a:	45d0      	cmp	r8, sl
 800b23c:	dbf3      	blt.n	800b226 <_printf_float+0x3fa>
 800b23e:	464b      	mov	r3, r9
 800b240:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800b244:	e6df      	b.n	800b006 <_printf_float+0x1da>
 800b246:	f04f 0800 	mov.w	r8, #0
 800b24a:	f104 0b1a 	add.w	fp, r4, #26
 800b24e:	e7f4      	b.n	800b23a <_printf_float+0x40e>
 800b250:	2301      	movs	r3, #1
 800b252:	4642      	mov	r2, r8
 800b254:	e7e1      	b.n	800b21a <_printf_float+0x3ee>
 800b256:	2301      	movs	r3, #1
 800b258:	464a      	mov	r2, r9
 800b25a:	4631      	mov	r1, r6
 800b25c:	4628      	mov	r0, r5
 800b25e:	47b8      	blx	r7
 800b260:	3001      	adds	r0, #1
 800b262:	f43f ae3e 	beq.w	800aee2 <_printf_float+0xb6>
 800b266:	f108 0801 	add.w	r8, r8, #1
 800b26a:	68e3      	ldr	r3, [r4, #12]
 800b26c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800b26e:	1a5b      	subs	r3, r3, r1
 800b270:	4543      	cmp	r3, r8
 800b272:	dcf0      	bgt.n	800b256 <_printf_float+0x42a>
 800b274:	e6fc      	b.n	800b070 <_printf_float+0x244>
 800b276:	f04f 0800 	mov.w	r8, #0
 800b27a:	f104 0919 	add.w	r9, r4, #25
 800b27e:	e7f4      	b.n	800b26a <_printf_float+0x43e>

0800b280 <_printf_common>:
 800b280:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b284:	4616      	mov	r6, r2
 800b286:	4698      	mov	r8, r3
 800b288:	688a      	ldr	r2, [r1, #8]
 800b28a:	690b      	ldr	r3, [r1, #16]
 800b28c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800b290:	4293      	cmp	r3, r2
 800b292:	bfb8      	it	lt
 800b294:	4613      	movlt	r3, r2
 800b296:	6033      	str	r3, [r6, #0]
 800b298:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800b29c:	4607      	mov	r7, r0
 800b29e:	460c      	mov	r4, r1
 800b2a0:	b10a      	cbz	r2, 800b2a6 <_printf_common+0x26>
 800b2a2:	3301      	adds	r3, #1
 800b2a4:	6033      	str	r3, [r6, #0]
 800b2a6:	6823      	ldr	r3, [r4, #0]
 800b2a8:	0699      	lsls	r1, r3, #26
 800b2aa:	bf42      	ittt	mi
 800b2ac:	6833      	ldrmi	r3, [r6, #0]
 800b2ae:	3302      	addmi	r3, #2
 800b2b0:	6033      	strmi	r3, [r6, #0]
 800b2b2:	6825      	ldr	r5, [r4, #0]
 800b2b4:	f015 0506 	ands.w	r5, r5, #6
 800b2b8:	d106      	bne.n	800b2c8 <_printf_common+0x48>
 800b2ba:	f104 0a19 	add.w	sl, r4, #25
 800b2be:	68e3      	ldr	r3, [r4, #12]
 800b2c0:	6832      	ldr	r2, [r6, #0]
 800b2c2:	1a9b      	subs	r3, r3, r2
 800b2c4:	42ab      	cmp	r3, r5
 800b2c6:	dc26      	bgt.n	800b316 <_printf_common+0x96>
 800b2c8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800b2cc:	6822      	ldr	r2, [r4, #0]
 800b2ce:	3b00      	subs	r3, #0
 800b2d0:	bf18      	it	ne
 800b2d2:	2301      	movne	r3, #1
 800b2d4:	0692      	lsls	r2, r2, #26
 800b2d6:	d42b      	bmi.n	800b330 <_printf_common+0xb0>
 800b2d8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800b2dc:	4641      	mov	r1, r8
 800b2de:	4638      	mov	r0, r7
 800b2e0:	47c8      	blx	r9
 800b2e2:	3001      	adds	r0, #1
 800b2e4:	d01e      	beq.n	800b324 <_printf_common+0xa4>
 800b2e6:	6823      	ldr	r3, [r4, #0]
 800b2e8:	6922      	ldr	r2, [r4, #16]
 800b2ea:	f003 0306 	and.w	r3, r3, #6
 800b2ee:	2b04      	cmp	r3, #4
 800b2f0:	bf02      	ittt	eq
 800b2f2:	68e5      	ldreq	r5, [r4, #12]
 800b2f4:	6833      	ldreq	r3, [r6, #0]
 800b2f6:	1aed      	subeq	r5, r5, r3
 800b2f8:	68a3      	ldr	r3, [r4, #8]
 800b2fa:	bf0c      	ite	eq
 800b2fc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b300:	2500      	movne	r5, #0
 800b302:	4293      	cmp	r3, r2
 800b304:	bfc4      	itt	gt
 800b306:	1a9b      	subgt	r3, r3, r2
 800b308:	18ed      	addgt	r5, r5, r3
 800b30a:	2600      	movs	r6, #0
 800b30c:	341a      	adds	r4, #26
 800b30e:	42b5      	cmp	r5, r6
 800b310:	d11a      	bne.n	800b348 <_printf_common+0xc8>
 800b312:	2000      	movs	r0, #0
 800b314:	e008      	b.n	800b328 <_printf_common+0xa8>
 800b316:	2301      	movs	r3, #1
 800b318:	4652      	mov	r2, sl
 800b31a:	4641      	mov	r1, r8
 800b31c:	4638      	mov	r0, r7
 800b31e:	47c8      	blx	r9
 800b320:	3001      	adds	r0, #1
 800b322:	d103      	bne.n	800b32c <_printf_common+0xac>
 800b324:	f04f 30ff 	mov.w	r0, #4294967295
 800b328:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b32c:	3501      	adds	r5, #1
 800b32e:	e7c6      	b.n	800b2be <_printf_common+0x3e>
 800b330:	18e1      	adds	r1, r4, r3
 800b332:	1c5a      	adds	r2, r3, #1
 800b334:	2030      	movs	r0, #48	@ 0x30
 800b336:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800b33a:	4422      	add	r2, r4
 800b33c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800b340:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800b344:	3302      	adds	r3, #2
 800b346:	e7c7      	b.n	800b2d8 <_printf_common+0x58>
 800b348:	2301      	movs	r3, #1
 800b34a:	4622      	mov	r2, r4
 800b34c:	4641      	mov	r1, r8
 800b34e:	4638      	mov	r0, r7
 800b350:	47c8      	blx	r9
 800b352:	3001      	adds	r0, #1
 800b354:	d0e6      	beq.n	800b324 <_printf_common+0xa4>
 800b356:	3601      	adds	r6, #1
 800b358:	e7d9      	b.n	800b30e <_printf_common+0x8e>
	...

0800b35c <_printf_i>:
 800b35c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b360:	7e0f      	ldrb	r7, [r1, #24]
 800b362:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800b364:	2f78      	cmp	r7, #120	@ 0x78
 800b366:	4691      	mov	r9, r2
 800b368:	4680      	mov	r8, r0
 800b36a:	460c      	mov	r4, r1
 800b36c:	469a      	mov	sl, r3
 800b36e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800b372:	d807      	bhi.n	800b384 <_printf_i+0x28>
 800b374:	2f62      	cmp	r7, #98	@ 0x62
 800b376:	d80a      	bhi.n	800b38e <_printf_i+0x32>
 800b378:	2f00      	cmp	r7, #0
 800b37a:	f000 80d1 	beq.w	800b520 <_printf_i+0x1c4>
 800b37e:	2f58      	cmp	r7, #88	@ 0x58
 800b380:	f000 80b8 	beq.w	800b4f4 <_printf_i+0x198>
 800b384:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b388:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800b38c:	e03a      	b.n	800b404 <_printf_i+0xa8>
 800b38e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800b392:	2b15      	cmp	r3, #21
 800b394:	d8f6      	bhi.n	800b384 <_printf_i+0x28>
 800b396:	a101      	add	r1, pc, #4	@ (adr r1, 800b39c <_printf_i+0x40>)
 800b398:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b39c:	0800b3f5 	.word	0x0800b3f5
 800b3a0:	0800b409 	.word	0x0800b409
 800b3a4:	0800b385 	.word	0x0800b385
 800b3a8:	0800b385 	.word	0x0800b385
 800b3ac:	0800b385 	.word	0x0800b385
 800b3b0:	0800b385 	.word	0x0800b385
 800b3b4:	0800b409 	.word	0x0800b409
 800b3b8:	0800b385 	.word	0x0800b385
 800b3bc:	0800b385 	.word	0x0800b385
 800b3c0:	0800b385 	.word	0x0800b385
 800b3c4:	0800b385 	.word	0x0800b385
 800b3c8:	0800b507 	.word	0x0800b507
 800b3cc:	0800b433 	.word	0x0800b433
 800b3d0:	0800b4c1 	.word	0x0800b4c1
 800b3d4:	0800b385 	.word	0x0800b385
 800b3d8:	0800b385 	.word	0x0800b385
 800b3dc:	0800b529 	.word	0x0800b529
 800b3e0:	0800b385 	.word	0x0800b385
 800b3e4:	0800b433 	.word	0x0800b433
 800b3e8:	0800b385 	.word	0x0800b385
 800b3ec:	0800b385 	.word	0x0800b385
 800b3f0:	0800b4c9 	.word	0x0800b4c9
 800b3f4:	6833      	ldr	r3, [r6, #0]
 800b3f6:	1d1a      	adds	r2, r3, #4
 800b3f8:	681b      	ldr	r3, [r3, #0]
 800b3fa:	6032      	str	r2, [r6, #0]
 800b3fc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b400:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800b404:	2301      	movs	r3, #1
 800b406:	e09c      	b.n	800b542 <_printf_i+0x1e6>
 800b408:	6833      	ldr	r3, [r6, #0]
 800b40a:	6820      	ldr	r0, [r4, #0]
 800b40c:	1d19      	adds	r1, r3, #4
 800b40e:	6031      	str	r1, [r6, #0]
 800b410:	0606      	lsls	r6, r0, #24
 800b412:	d501      	bpl.n	800b418 <_printf_i+0xbc>
 800b414:	681d      	ldr	r5, [r3, #0]
 800b416:	e003      	b.n	800b420 <_printf_i+0xc4>
 800b418:	0645      	lsls	r5, r0, #25
 800b41a:	d5fb      	bpl.n	800b414 <_printf_i+0xb8>
 800b41c:	f9b3 5000 	ldrsh.w	r5, [r3]
 800b420:	2d00      	cmp	r5, #0
 800b422:	da03      	bge.n	800b42c <_printf_i+0xd0>
 800b424:	232d      	movs	r3, #45	@ 0x2d
 800b426:	426d      	negs	r5, r5
 800b428:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b42c:	4858      	ldr	r0, [pc, #352]	@ (800b590 <_printf_i+0x234>)
 800b42e:	230a      	movs	r3, #10
 800b430:	e011      	b.n	800b456 <_printf_i+0xfa>
 800b432:	6821      	ldr	r1, [r4, #0]
 800b434:	6833      	ldr	r3, [r6, #0]
 800b436:	0608      	lsls	r0, r1, #24
 800b438:	f853 5b04 	ldr.w	r5, [r3], #4
 800b43c:	d402      	bmi.n	800b444 <_printf_i+0xe8>
 800b43e:	0649      	lsls	r1, r1, #25
 800b440:	bf48      	it	mi
 800b442:	b2ad      	uxthmi	r5, r5
 800b444:	2f6f      	cmp	r7, #111	@ 0x6f
 800b446:	4852      	ldr	r0, [pc, #328]	@ (800b590 <_printf_i+0x234>)
 800b448:	6033      	str	r3, [r6, #0]
 800b44a:	bf14      	ite	ne
 800b44c:	230a      	movne	r3, #10
 800b44e:	2308      	moveq	r3, #8
 800b450:	2100      	movs	r1, #0
 800b452:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800b456:	6866      	ldr	r6, [r4, #4]
 800b458:	60a6      	str	r6, [r4, #8]
 800b45a:	2e00      	cmp	r6, #0
 800b45c:	db05      	blt.n	800b46a <_printf_i+0x10e>
 800b45e:	6821      	ldr	r1, [r4, #0]
 800b460:	432e      	orrs	r6, r5
 800b462:	f021 0104 	bic.w	r1, r1, #4
 800b466:	6021      	str	r1, [r4, #0]
 800b468:	d04b      	beq.n	800b502 <_printf_i+0x1a6>
 800b46a:	4616      	mov	r6, r2
 800b46c:	fbb5 f1f3 	udiv	r1, r5, r3
 800b470:	fb03 5711 	mls	r7, r3, r1, r5
 800b474:	5dc7      	ldrb	r7, [r0, r7]
 800b476:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800b47a:	462f      	mov	r7, r5
 800b47c:	42bb      	cmp	r3, r7
 800b47e:	460d      	mov	r5, r1
 800b480:	d9f4      	bls.n	800b46c <_printf_i+0x110>
 800b482:	2b08      	cmp	r3, #8
 800b484:	d10b      	bne.n	800b49e <_printf_i+0x142>
 800b486:	6823      	ldr	r3, [r4, #0]
 800b488:	07df      	lsls	r7, r3, #31
 800b48a:	d508      	bpl.n	800b49e <_printf_i+0x142>
 800b48c:	6923      	ldr	r3, [r4, #16]
 800b48e:	6861      	ldr	r1, [r4, #4]
 800b490:	4299      	cmp	r1, r3
 800b492:	bfde      	ittt	le
 800b494:	2330      	movle	r3, #48	@ 0x30
 800b496:	f806 3c01 	strble.w	r3, [r6, #-1]
 800b49a:	f106 36ff 	addle.w	r6, r6, #4294967295
 800b49e:	1b92      	subs	r2, r2, r6
 800b4a0:	6122      	str	r2, [r4, #16]
 800b4a2:	f8cd a000 	str.w	sl, [sp]
 800b4a6:	464b      	mov	r3, r9
 800b4a8:	aa03      	add	r2, sp, #12
 800b4aa:	4621      	mov	r1, r4
 800b4ac:	4640      	mov	r0, r8
 800b4ae:	f7ff fee7 	bl	800b280 <_printf_common>
 800b4b2:	3001      	adds	r0, #1
 800b4b4:	d14a      	bne.n	800b54c <_printf_i+0x1f0>
 800b4b6:	f04f 30ff 	mov.w	r0, #4294967295
 800b4ba:	b004      	add	sp, #16
 800b4bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b4c0:	6823      	ldr	r3, [r4, #0]
 800b4c2:	f043 0320 	orr.w	r3, r3, #32
 800b4c6:	6023      	str	r3, [r4, #0]
 800b4c8:	4832      	ldr	r0, [pc, #200]	@ (800b594 <_printf_i+0x238>)
 800b4ca:	2778      	movs	r7, #120	@ 0x78
 800b4cc:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800b4d0:	6823      	ldr	r3, [r4, #0]
 800b4d2:	6831      	ldr	r1, [r6, #0]
 800b4d4:	061f      	lsls	r7, r3, #24
 800b4d6:	f851 5b04 	ldr.w	r5, [r1], #4
 800b4da:	d402      	bmi.n	800b4e2 <_printf_i+0x186>
 800b4dc:	065f      	lsls	r7, r3, #25
 800b4de:	bf48      	it	mi
 800b4e0:	b2ad      	uxthmi	r5, r5
 800b4e2:	6031      	str	r1, [r6, #0]
 800b4e4:	07d9      	lsls	r1, r3, #31
 800b4e6:	bf44      	itt	mi
 800b4e8:	f043 0320 	orrmi.w	r3, r3, #32
 800b4ec:	6023      	strmi	r3, [r4, #0]
 800b4ee:	b11d      	cbz	r5, 800b4f8 <_printf_i+0x19c>
 800b4f0:	2310      	movs	r3, #16
 800b4f2:	e7ad      	b.n	800b450 <_printf_i+0xf4>
 800b4f4:	4826      	ldr	r0, [pc, #152]	@ (800b590 <_printf_i+0x234>)
 800b4f6:	e7e9      	b.n	800b4cc <_printf_i+0x170>
 800b4f8:	6823      	ldr	r3, [r4, #0]
 800b4fa:	f023 0320 	bic.w	r3, r3, #32
 800b4fe:	6023      	str	r3, [r4, #0]
 800b500:	e7f6      	b.n	800b4f0 <_printf_i+0x194>
 800b502:	4616      	mov	r6, r2
 800b504:	e7bd      	b.n	800b482 <_printf_i+0x126>
 800b506:	6833      	ldr	r3, [r6, #0]
 800b508:	6825      	ldr	r5, [r4, #0]
 800b50a:	6961      	ldr	r1, [r4, #20]
 800b50c:	1d18      	adds	r0, r3, #4
 800b50e:	6030      	str	r0, [r6, #0]
 800b510:	062e      	lsls	r6, r5, #24
 800b512:	681b      	ldr	r3, [r3, #0]
 800b514:	d501      	bpl.n	800b51a <_printf_i+0x1be>
 800b516:	6019      	str	r1, [r3, #0]
 800b518:	e002      	b.n	800b520 <_printf_i+0x1c4>
 800b51a:	0668      	lsls	r0, r5, #25
 800b51c:	d5fb      	bpl.n	800b516 <_printf_i+0x1ba>
 800b51e:	8019      	strh	r1, [r3, #0]
 800b520:	2300      	movs	r3, #0
 800b522:	6123      	str	r3, [r4, #16]
 800b524:	4616      	mov	r6, r2
 800b526:	e7bc      	b.n	800b4a2 <_printf_i+0x146>
 800b528:	6833      	ldr	r3, [r6, #0]
 800b52a:	1d1a      	adds	r2, r3, #4
 800b52c:	6032      	str	r2, [r6, #0]
 800b52e:	681e      	ldr	r6, [r3, #0]
 800b530:	6862      	ldr	r2, [r4, #4]
 800b532:	2100      	movs	r1, #0
 800b534:	4630      	mov	r0, r6
 800b536:	f7f4 fe53 	bl	80001e0 <memchr>
 800b53a:	b108      	cbz	r0, 800b540 <_printf_i+0x1e4>
 800b53c:	1b80      	subs	r0, r0, r6
 800b53e:	6060      	str	r0, [r4, #4]
 800b540:	6863      	ldr	r3, [r4, #4]
 800b542:	6123      	str	r3, [r4, #16]
 800b544:	2300      	movs	r3, #0
 800b546:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b54a:	e7aa      	b.n	800b4a2 <_printf_i+0x146>
 800b54c:	6923      	ldr	r3, [r4, #16]
 800b54e:	4632      	mov	r2, r6
 800b550:	4649      	mov	r1, r9
 800b552:	4640      	mov	r0, r8
 800b554:	47d0      	blx	sl
 800b556:	3001      	adds	r0, #1
 800b558:	d0ad      	beq.n	800b4b6 <_printf_i+0x15a>
 800b55a:	6823      	ldr	r3, [r4, #0]
 800b55c:	079b      	lsls	r3, r3, #30
 800b55e:	d413      	bmi.n	800b588 <_printf_i+0x22c>
 800b560:	68e0      	ldr	r0, [r4, #12]
 800b562:	9b03      	ldr	r3, [sp, #12]
 800b564:	4298      	cmp	r0, r3
 800b566:	bfb8      	it	lt
 800b568:	4618      	movlt	r0, r3
 800b56a:	e7a6      	b.n	800b4ba <_printf_i+0x15e>
 800b56c:	2301      	movs	r3, #1
 800b56e:	4632      	mov	r2, r6
 800b570:	4649      	mov	r1, r9
 800b572:	4640      	mov	r0, r8
 800b574:	47d0      	blx	sl
 800b576:	3001      	adds	r0, #1
 800b578:	d09d      	beq.n	800b4b6 <_printf_i+0x15a>
 800b57a:	3501      	adds	r5, #1
 800b57c:	68e3      	ldr	r3, [r4, #12]
 800b57e:	9903      	ldr	r1, [sp, #12]
 800b580:	1a5b      	subs	r3, r3, r1
 800b582:	42ab      	cmp	r3, r5
 800b584:	dcf2      	bgt.n	800b56c <_printf_i+0x210>
 800b586:	e7eb      	b.n	800b560 <_printf_i+0x204>
 800b588:	2500      	movs	r5, #0
 800b58a:	f104 0619 	add.w	r6, r4, #25
 800b58e:	e7f5      	b.n	800b57c <_printf_i+0x220>
 800b590:	08010c6a 	.word	0x08010c6a
 800b594:	08010c7b 	.word	0x08010c7b

0800b598 <_scanf_float>:
 800b598:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b59c:	b087      	sub	sp, #28
 800b59e:	4691      	mov	r9, r2
 800b5a0:	9303      	str	r3, [sp, #12]
 800b5a2:	688b      	ldr	r3, [r1, #8]
 800b5a4:	1e5a      	subs	r2, r3, #1
 800b5a6:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800b5aa:	bf81      	itttt	hi
 800b5ac:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800b5b0:	eb03 0b05 	addhi.w	fp, r3, r5
 800b5b4:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800b5b8:	608b      	strhi	r3, [r1, #8]
 800b5ba:	680b      	ldr	r3, [r1, #0]
 800b5bc:	460a      	mov	r2, r1
 800b5be:	f04f 0500 	mov.w	r5, #0
 800b5c2:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800b5c6:	f842 3b1c 	str.w	r3, [r2], #28
 800b5ca:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800b5ce:	4680      	mov	r8, r0
 800b5d0:	460c      	mov	r4, r1
 800b5d2:	bf98      	it	ls
 800b5d4:	f04f 0b00 	movls.w	fp, #0
 800b5d8:	9201      	str	r2, [sp, #4]
 800b5da:	4616      	mov	r6, r2
 800b5dc:	46aa      	mov	sl, r5
 800b5de:	462f      	mov	r7, r5
 800b5e0:	9502      	str	r5, [sp, #8]
 800b5e2:	68a2      	ldr	r2, [r4, #8]
 800b5e4:	b15a      	cbz	r2, 800b5fe <_scanf_float+0x66>
 800b5e6:	f8d9 3000 	ldr.w	r3, [r9]
 800b5ea:	781b      	ldrb	r3, [r3, #0]
 800b5ec:	2b4e      	cmp	r3, #78	@ 0x4e
 800b5ee:	d863      	bhi.n	800b6b8 <_scanf_float+0x120>
 800b5f0:	2b40      	cmp	r3, #64	@ 0x40
 800b5f2:	d83b      	bhi.n	800b66c <_scanf_float+0xd4>
 800b5f4:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 800b5f8:	b2c8      	uxtb	r0, r1
 800b5fa:	280e      	cmp	r0, #14
 800b5fc:	d939      	bls.n	800b672 <_scanf_float+0xda>
 800b5fe:	b11f      	cbz	r7, 800b608 <_scanf_float+0x70>
 800b600:	6823      	ldr	r3, [r4, #0]
 800b602:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b606:	6023      	str	r3, [r4, #0]
 800b608:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b60c:	f1ba 0f01 	cmp.w	sl, #1
 800b610:	f200 8114 	bhi.w	800b83c <_scanf_float+0x2a4>
 800b614:	9b01      	ldr	r3, [sp, #4]
 800b616:	429e      	cmp	r6, r3
 800b618:	f200 8105 	bhi.w	800b826 <_scanf_float+0x28e>
 800b61c:	2001      	movs	r0, #1
 800b61e:	b007      	add	sp, #28
 800b620:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b624:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800b628:	2a0d      	cmp	r2, #13
 800b62a:	d8e8      	bhi.n	800b5fe <_scanf_float+0x66>
 800b62c:	a101      	add	r1, pc, #4	@ (adr r1, 800b634 <_scanf_float+0x9c>)
 800b62e:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800b632:	bf00      	nop
 800b634:	0800b77d 	.word	0x0800b77d
 800b638:	0800b5ff 	.word	0x0800b5ff
 800b63c:	0800b5ff 	.word	0x0800b5ff
 800b640:	0800b5ff 	.word	0x0800b5ff
 800b644:	0800b7d9 	.word	0x0800b7d9
 800b648:	0800b7b3 	.word	0x0800b7b3
 800b64c:	0800b5ff 	.word	0x0800b5ff
 800b650:	0800b5ff 	.word	0x0800b5ff
 800b654:	0800b78b 	.word	0x0800b78b
 800b658:	0800b5ff 	.word	0x0800b5ff
 800b65c:	0800b5ff 	.word	0x0800b5ff
 800b660:	0800b5ff 	.word	0x0800b5ff
 800b664:	0800b5ff 	.word	0x0800b5ff
 800b668:	0800b747 	.word	0x0800b747
 800b66c:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 800b670:	e7da      	b.n	800b628 <_scanf_float+0x90>
 800b672:	290e      	cmp	r1, #14
 800b674:	d8c3      	bhi.n	800b5fe <_scanf_float+0x66>
 800b676:	a001      	add	r0, pc, #4	@ (adr r0, 800b67c <_scanf_float+0xe4>)
 800b678:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800b67c:	0800b737 	.word	0x0800b737
 800b680:	0800b5ff 	.word	0x0800b5ff
 800b684:	0800b737 	.word	0x0800b737
 800b688:	0800b7c7 	.word	0x0800b7c7
 800b68c:	0800b5ff 	.word	0x0800b5ff
 800b690:	0800b6d9 	.word	0x0800b6d9
 800b694:	0800b71d 	.word	0x0800b71d
 800b698:	0800b71d 	.word	0x0800b71d
 800b69c:	0800b71d 	.word	0x0800b71d
 800b6a0:	0800b71d 	.word	0x0800b71d
 800b6a4:	0800b71d 	.word	0x0800b71d
 800b6a8:	0800b71d 	.word	0x0800b71d
 800b6ac:	0800b71d 	.word	0x0800b71d
 800b6b0:	0800b71d 	.word	0x0800b71d
 800b6b4:	0800b71d 	.word	0x0800b71d
 800b6b8:	2b6e      	cmp	r3, #110	@ 0x6e
 800b6ba:	d809      	bhi.n	800b6d0 <_scanf_float+0x138>
 800b6bc:	2b60      	cmp	r3, #96	@ 0x60
 800b6be:	d8b1      	bhi.n	800b624 <_scanf_float+0x8c>
 800b6c0:	2b54      	cmp	r3, #84	@ 0x54
 800b6c2:	d07b      	beq.n	800b7bc <_scanf_float+0x224>
 800b6c4:	2b59      	cmp	r3, #89	@ 0x59
 800b6c6:	d19a      	bne.n	800b5fe <_scanf_float+0x66>
 800b6c8:	2d07      	cmp	r5, #7
 800b6ca:	d198      	bne.n	800b5fe <_scanf_float+0x66>
 800b6cc:	2508      	movs	r5, #8
 800b6ce:	e02f      	b.n	800b730 <_scanf_float+0x198>
 800b6d0:	2b74      	cmp	r3, #116	@ 0x74
 800b6d2:	d073      	beq.n	800b7bc <_scanf_float+0x224>
 800b6d4:	2b79      	cmp	r3, #121	@ 0x79
 800b6d6:	e7f6      	b.n	800b6c6 <_scanf_float+0x12e>
 800b6d8:	6821      	ldr	r1, [r4, #0]
 800b6da:	05c8      	lsls	r0, r1, #23
 800b6dc:	d51e      	bpl.n	800b71c <_scanf_float+0x184>
 800b6de:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800b6e2:	6021      	str	r1, [r4, #0]
 800b6e4:	3701      	adds	r7, #1
 800b6e6:	f1bb 0f00 	cmp.w	fp, #0
 800b6ea:	d003      	beq.n	800b6f4 <_scanf_float+0x15c>
 800b6ec:	3201      	adds	r2, #1
 800b6ee:	f10b 3bff 	add.w	fp, fp, #4294967295
 800b6f2:	60a2      	str	r2, [r4, #8]
 800b6f4:	68a3      	ldr	r3, [r4, #8]
 800b6f6:	3b01      	subs	r3, #1
 800b6f8:	60a3      	str	r3, [r4, #8]
 800b6fa:	6923      	ldr	r3, [r4, #16]
 800b6fc:	3301      	adds	r3, #1
 800b6fe:	6123      	str	r3, [r4, #16]
 800b700:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800b704:	3b01      	subs	r3, #1
 800b706:	2b00      	cmp	r3, #0
 800b708:	f8c9 3004 	str.w	r3, [r9, #4]
 800b70c:	f340 8082 	ble.w	800b814 <_scanf_float+0x27c>
 800b710:	f8d9 3000 	ldr.w	r3, [r9]
 800b714:	3301      	adds	r3, #1
 800b716:	f8c9 3000 	str.w	r3, [r9]
 800b71a:	e762      	b.n	800b5e2 <_scanf_float+0x4a>
 800b71c:	eb1a 0105 	adds.w	r1, sl, r5
 800b720:	f47f af6d 	bne.w	800b5fe <_scanf_float+0x66>
 800b724:	6822      	ldr	r2, [r4, #0]
 800b726:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 800b72a:	6022      	str	r2, [r4, #0]
 800b72c:	460d      	mov	r5, r1
 800b72e:	468a      	mov	sl, r1
 800b730:	f806 3b01 	strb.w	r3, [r6], #1
 800b734:	e7de      	b.n	800b6f4 <_scanf_float+0x15c>
 800b736:	6822      	ldr	r2, [r4, #0]
 800b738:	0610      	lsls	r0, r2, #24
 800b73a:	f57f af60 	bpl.w	800b5fe <_scanf_float+0x66>
 800b73e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800b742:	6022      	str	r2, [r4, #0]
 800b744:	e7f4      	b.n	800b730 <_scanf_float+0x198>
 800b746:	f1ba 0f00 	cmp.w	sl, #0
 800b74a:	d10c      	bne.n	800b766 <_scanf_float+0x1ce>
 800b74c:	b977      	cbnz	r7, 800b76c <_scanf_float+0x1d4>
 800b74e:	6822      	ldr	r2, [r4, #0]
 800b750:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800b754:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800b758:	d108      	bne.n	800b76c <_scanf_float+0x1d4>
 800b75a:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800b75e:	6022      	str	r2, [r4, #0]
 800b760:	f04f 0a01 	mov.w	sl, #1
 800b764:	e7e4      	b.n	800b730 <_scanf_float+0x198>
 800b766:	f1ba 0f02 	cmp.w	sl, #2
 800b76a:	d050      	beq.n	800b80e <_scanf_float+0x276>
 800b76c:	2d01      	cmp	r5, #1
 800b76e:	d002      	beq.n	800b776 <_scanf_float+0x1de>
 800b770:	2d04      	cmp	r5, #4
 800b772:	f47f af44 	bne.w	800b5fe <_scanf_float+0x66>
 800b776:	3501      	adds	r5, #1
 800b778:	b2ed      	uxtb	r5, r5
 800b77a:	e7d9      	b.n	800b730 <_scanf_float+0x198>
 800b77c:	f1ba 0f01 	cmp.w	sl, #1
 800b780:	f47f af3d 	bne.w	800b5fe <_scanf_float+0x66>
 800b784:	f04f 0a02 	mov.w	sl, #2
 800b788:	e7d2      	b.n	800b730 <_scanf_float+0x198>
 800b78a:	b975      	cbnz	r5, 800b7aa <_scanf_float+0x212>
 800b78c:	2f00      	cmp	r7, #0
 800b78e:	f47f af37 	bne.w	800b600 <_scanf_float+0x68>
 800b792:	6822      	ldr	r2, [r4, #0]
 800b794:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800b798:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800b79c:	f040 8103 	bne.w	800b9a6 <_scanf_float+0x40e>
 800b7a0:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800b7a4:	6022      	str	r2, [r4, #0]
 800b7a6:	2501      	movs	r5, #1
 800b7a8:	e7c2      	b.n	800b730 <_scanf_float+0x198>
 800b7aa:	2d03      	cmp	r5, #3
 800b7ac:	d0e3      	beq.n	800b776 <_scanf_float+0x1de>
 800b7ae:	2d05      	cmp	r5, #5
 800b7b0:	e7df      	b.n	800b772 <_scanf_float+0x1da>
 800b7b2:	2d02      	cmp	r5, #2
 800b7b4:	f47f af23 	bne.w	800b5fe <_scanf_float+0x66>
 800b7b8:	2503      	movs	r5, #3
 800b7ba:	e7b9      	b.n	800b730 <_scanf_float+0x198>
 800b7bc:	2d06      	cmp	r5, #6
 800b7be:	f47f af1e 	bne.w	800b5fe <_scanf_float+0x66>
 800b7c2:	2507      	movs	r5, #7
 800b7c4:	e7b4      	b.n	800b730 <_scanf_float+0x198>
 800b7c6:	6822      	ldr	r2, [r4, #0]
 800b7c8:	0591      	lsls	r1, r2, #22
 800b7ca:	f57f af18 	bpl.w	800b5fe <_scanf_float+0x66>
 800b7ce:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800b7d2:	6022      	str	r2, [r4, #0]
 800b7d4:	9702      	str	r7, [sp, #8]
 800b7d6:	e7ab      	b.n	800b730 <_scanf_float+0x198>
 800b7d8:	6822      	ldr	r2, [r4, #0]
 800b7da:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 800b7de:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800b7e2:	d005      	beq.n	800b7f0 <_scanf_float+0x258>
 800b7e4:	0550      	lsls	r0, r2, #21
 800b7e6:	f57f af0a 	bpl.w	800b5fe <_scanf_float+0x66>
 800b7ea:	2f00      	cmp	r7, #0
 800b7ec:	f000 80db 	beq.w	800b9a6 <_scanf_float+0x40e>
 800b7f0:	0591      	lsls	r1, r2, #22
 800b7f2:	bf58      	it	pl
 800b7f4:	9902      	ldrpl	r1, [sp, #8]
 800b7f6:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800b7fa:	bf58      	it	pl
 800b7fc:	1a79      	subpl	r1, r7, r1
 800b7fe:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800b802:	bf58      	it	pl
 800b804:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800b808:	6022      	str	r2, [r4, #0]
 800b80a:	2700      	movs	r7, #0
 800b80c:	e790      	b.n	800b730 <_scanf_float+0x198>
 800b80e:	f04f 0a03 	mov.w	sl, #3
 800b812:	e78d      	b.n	800b730 <_scanf_float+0x198>
 800b814:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800b818:	4649      	mov	r1, r9
 800b81a:	4640      	mov	r0, r8
 800b81c:	4798      	blx	r3
 800b81e:	2800      	cmp	r0, #0
 800b820:	f43f aedf 	beq.w	800b5e2 <_scanf_float+0x4a>
 800b824:	e6eb      	b.n	800b5fe <_scanf_float+0x66>
 800b826:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800b82a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800b82e:	464a      	mov	r2, r9
 800b830:	4640      	mov	r0, r8
 800b832:	4798      	blx	r3
 800b834:	6923      	ldr	r3, [r4, #16]
 800b836:	3b01      	subs	r3, #1
 800b838:	6123      	str	r3, [r4, #16]
 800b83a:	e6eb      	b.n	800b614 <_scanf_float+0x7c>
 800b83c:	1e6b      	subs	r3, r5, #1
 800b83e:	2b06      	cmp	r3, #6
 800b840:	d824      	bhi.n	800b88c <_scanf_float+0x2f4>
 800b842:	2d02      	cmp	r5, #2
 800b844:	d836      	bhi.n	800b8b4 <_scanf_float+0x31c>
 800b846:	9b01      	ldr	r3, [sp, #4]
 800b848:	429e      	cmp	r6, r3
 800b84a:	f67f aee7 	bls.w	800b61c <_scanf_float+0x84>
 800b84e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800b852:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800b856:	464a      	mov	r2, r9
 800b858:	4640      	mov	r0, r8
 800b85a:	4798      	blx	r3
 800b85c:	6923      	ldr	r3, [r4, #16]
 800b85e:	3b01      	subs	r3, #1
 800b860:	6123      	str	r3, [r4, #16]
 800b862:	e7f0      	b.n	800b846 <_scanf_float+0x2ae>
 800b864:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800b868:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 800b86c:	464a      	mov	r2, r9
 800b86e:	4640      	mov	r0, r8
 800b870:	4798      	blx	r3
 800b872:	6923      	ldr	r3, [r4, #16]
 800b874:	3b01      	subs	r3, #1
 800b876:	6123      	str	r3, [r4, #16]
 800b878:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b87c:	fa5f fa8a 	uxtb.w	sl, sl
 800b880:	f1ba 0f02 	cmp.w	sl, #2
 800b884:	d1ee      	bne.n	800b864 <_scanf_float+0x2cc>
 800b886:	3d03      	subs	r5, #3
 800b888:	b2ed      	uxtb	r5, r5
 800b88a:	1b76      	subs	r6, r6, r5
 800b88c:	6823      	ldr	r3, [r4, #0]
 800b88e:	05da      	lsls	r2, r3, #23
 800b890:	d530      	bpl.n	800b8f4 <_scanf_float+0x35c>
 800b892:	055b      	lsls	r3, r3, #21
 800b894:	d511      	bpl.n	800b8ba <_scanf_float+0x322>
 800b896:	9b01      	ldr	r3, [sp, #4]
 800b898:	429e      	cmp	r6, r3
 800b89a:	f67f aebf 	bls.w	800b61c <_scanf_float+0x84>
 800b89e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800b8a2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800b8a6:	464a      	mov	r2, r9
 800b8a8:	4640      	mov	r0, r8
 800b8aa:	4798      	blx	r3
 800b8ac:	6923      	ldr	r3, [r4, #16]
 800b8ae:	3b01      	subs	r3, #1
 800b8b0:	6123      	str	r3, [r4, #16]
 800b8b2:	e7f0      	b.n	800b896 <_scanf_float+0x2fe>
 800b8b4:	46aa      	mov	sl, r5
 800b8b6:	46b3      	mov	fp, r6
 800b8b8:	e7de      	b.n	800b878 <_scanf_float+0x2e0>
 800b8ba:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800b8be:	6923      	ldr	r3, [r4, #16]
 800b8c0:	2965      	cmp	r1, #101	@ 0x65
 800b8c2:	f103 33ff 	add.w	r3, r3, #4294967295
 800b8c6:	f106 35ff 	add.w	r5, r6, #4294967295
 800b8ca:	6123      	str	r3, [r4, #16]
 800b8cc:	d00c      	beq.n	800b8e8 <_scanf_float+0x350>
 800b8ce:	2945      	cmp	r1, #69	@ 0x45
 800b8d0:	d00a      	beq.n	800b8e8 <_scanf_float+0x350>
 800b8d2:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800b8d6:	464a      	mov	r2, r9
 800b8d8:	4640      	mov	r0, r8
 800b8da:	4798      	blx	r3
 800b8dc:	6923      	ldr	r3, [r4, #16]
 800b8de:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800b8e2:	3b01      	subs	r3, #1
 800b8e4:	1eb5      	subs	r5, r6, #2
 800b8e6:	6123      	str	r3, [r4, #16]
 800b8e8:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800b8ec:	464a      	mov	r2, r9
 800b8ee:	4640      	mov	r0, r8
 800b8f0:	4798      	blx	r3
 800b8f2:	462e      	mov	r6, r5
 800b8f4:	6822      	ldr	r2, [r4, #0]
 800b8f6:	f012 0210 	ands.w	r2, r2, #16
 800b8fa:	d001      	beq.n	800b900 <_scanf_float+0x368>
 800b8fc:	2000      	movs	r0, #0
 800b8fe:	e68e      	b.n	800b61e <_scanf_float+0x86>
 800b900:	7032      	strb	r2, [r6, #0]
 800b902:	6823      	ldr	r3, [r4, #0]
 800b904:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800b908:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b90c:	d125      	bne.n	800b95a <_scanf_float+0x3c2>
 800b90e:	9b02      	ldr	r3, [sp, #8]
 800b910:	429f      	cmp	r7, r3
 800b912:	d00a      	beq.n	800b92a <_scanf_float+0x392>
 800b914:	1bda      	subs	r2, r3, r7
 800b916:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 800b91a:	429e      	cmp	r6, r3
 800b91c:	bf28      	it	cs
 800b91e:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 800b922:	4922      	ldr	r1, [pc, #136]	@ (800b9ac <_scanf_float+0x414>)
 800b924:	4630      	mov	r0, r6
 800b926:	f000 f9ad 	bl	800bc84 <siprintf>
 800b92a:	9901      	ldr	r1, [sp, #4]
 800b92c:	2200      	movs	r2, #0
 800b92e:	4640      	mov	r0, r8
 800b930:	f002 fd5a 	bl	800e3e8 <_strtod_r>
 800b934:	9b03      	ldr	r3, [sp, #12]
 800b936:	6821      	ldr	r1, [r4, #0]
 800b938:	681b      	ldr	r3, [r3, #0]
 800b93a:	f011 0f02 	tst.w	r1, #2
 800b93e:	ec57 6b10 	vmov	r6, r7, d0
 800b942:	f103 0204 	add.w	r2, r3, #4
 800b946:	d015      	beq.n	800b974 <_scanf_float+0x3dc>
 800b948:	9903      	ldr	r1, [sp, #12]
 800b94a:	600a      	str	r2, [r1, #0]
 800b94c:	681b      	ldr	r3, [r3, #0]
 800b94e:	e9c3 6700 	strd	r6, r7, [r3]
 800b952:	68e3      	ldr	r3, [r4, #12]
 800b954:	3301      	adds	r3, #1
 800b956:	60e3      	str	r3, [r4, #12]
 800b958:	e7d0      	b.n	800b8fc <_scanf_float+0x364>
 800b95a:	9b04      	ldr	r3, [sp, #16]
 800b95c:	2b00      	cmp	r3, #0
 800b95e:	d0e4      	beq.n	800b92a <_scanf_float+0x392>
 800b960:	9905      	ldr	r1, [sp, #20]
 800b962:	230a      	movs	r3, #10
 800b964:	3101      	adds	r1, #1
 800b966:	4640      	mov	r0, r8
 800b968:	f002 fdbe 	bl	800e4e8 <_strtol_r>
 800b96c:	9b04      	ldr	r3, [sp, #16]
 800b96e:	9e05      	ldr	r6, [sp, #20]
 800b970:	1ac2      	subs	r2, r0, r3
 800b972:	e7d0      	b.n	800b916 <_scanf_float+0x37e>
 800b974:	f011 0f04 	tst.w	r1, #4
 800b978:	9903      	ldr	r1, [sp, #12]
 800b97a:	600a      	str	r2, [r1, #0]
 800b97c:	d1e6      	bne.n	800b94c <_scanf_float+0x3b4>
 800b97e:	681d      	ldr	r5, [r3, #0]
 800b980:	4632      	mov	r2, r6
 800b982:	463b      	mov	r3, r7
 800b984:	4630      	mov	r0, r6
 800b986:	4639      	mov	r1, r7
 800b988:	f7f5 f8d8 	bl	8000b3c <__aeabi_dcmpun>
 800b98c:	b128      	cbz	r0, 800b99a <_scanf_float+0x402>
 800b98e:	4808      	ldr	r0, [pc, #32]	@ (800b9b0 <_scanf_float+0x418>)
 800b990:	f000 fb00 	bl	800bf94 <nanf>
 800b994:	ed85 0a00 	vstr	s0, [r5]
 800b998:	e7db      	b.n	800b952 <_scanf_float+0x3ba>
 800b99a:	4630      	mov	r0, r6
 800b99c:	4639      	mov	r1, r7
 800b99e:	f7f5 f92b 	bl	8000bf8 <__aeabi_d2f>
 800b9a2:	6028      	str	r0, [r5, #0]
 800b9a4:	e7d5      	b.n	800b952 <_scanf_float+0x3ba>
 800b9a6:	2700      	movs	r7, #0
 800b9a8:	e62e      	b.n	800b608 <_scanf_float+0x70>
 800b9aa:	bf00      	nop
 800b9ac:	08010c8c 	.word	0x08010c8c
 800b9b0:	08010ccc 	.word	0x08010ccc

0800b9b4 <std>:
 800b9b4:	2300      	movs	r3, #0
 800b9b6:	b510      	push	{r4, lr}
 800b9b8:	4604      	mov	r4, r0
 800b9ba:	e9c0 3300 	strd	r3, r3, [r0]
 800b9be:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b9c2:	6083      	str	r3, [r0, #8]
 800b9c4:	8181      	strh	r1, [r0, #12]
 800b9c6:	6643      	str	r3, [r0, #100]	@ 0x64
 800b9c8:	81c2      	strh	r2, [r0, #14]
 800b9ca:	6183      	str	r3, [r0, #24]
 800b9cc:	4619      	mov	r1, r3
 800b9ce:	2208      	movs	r2, #8
 800b9d0:	305c      	adds	r0, #92	@ 0x5c
 800b9d2:	f000 fa51 	bl	800be78 <memset>
 800b9d6:	4b0d      	ldr	r3, [pc, #52]	@ (800ba0c <std+0x58>)
 800b9d8:	6263      	str	r3, [r4, #36]	@ 0x24
 800b9da:	4b0d      	ldr	r3, [pc, #52]	@ (800ba10 <std+0x5c>)
 800b9dc:	62a3      	str	r3, [r4, #40]	@ 0x28
 800b9de:	4b0d      	ldr	r3, [pc, #52]	@ (800ba14 <std+0x60>)
 800b9e0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800b9e2:	4b0d      	ldr	r3, [pc, #52]	@ (800ba18 <std+0x64>)
 800b9e4:	6323      	str	r3, [r4, #48]	@ 0x30
 800b9e6:	4b0d      	ldr	r3, [pc, #52]	@ (800ba1c <std+0x68>)
 800b9e8:	6224      	str	r4, [r4, #32]
 800b9ea:	429c      	cmp	r4, r3
 800b9ec:	d006      	beq.n	800b9fc <std+0x48>
 800b9ee:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800b9f2:	4294      	cmp	r4, r2
 800b9f4:	d002      	beq.n	800b9fc <std+0x48>
 800b9f6:	33d0      	adds	r3, #208	@ 0xd0
 800b9f8:	429c      	cmp	r4, r3
 800b9fa:	d105      	bne.n	800ba08 <std+0x54>
 800b9fc:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800ba00:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ba04:	f000 bab4 	b.w	800bf70 <__retarget_lock_init_recursive>
 800ba08:	bd10      	pop	{r4, pc}
 800ba0a:	bf00      	nop
 800ba0c:	0800bcc9 	.word	0x0800bcc9
 800ba10:	0800bceb 	.word	0x0800bceb
 800ba14:	0800bd23 	.word	0x0800bd23
 800ba18:	0800bd47 	.word	0x0800bd47
 800ba1c:	200140d0 	.word	0x200140d0

0800ba20 <stdio_exit_handler>:
 800ba20:	4a02      	ldr	r2, [pc, #8]	@ (800ba2c <stdio_exit_handler+0xc>)
 800ba22:	4903      	ldr	r1, [pc, #12]	@ (800ba30 <stdio_exit_handler+0x10>)
 800ba24:	4803      	ldr	r0, [pc, #12]	@ (800ba34 <stdio_exit_handler+0x14>)
 800ba26:	f000 b869 	b.w	800bafc <_fwalk_sglue>
 800ba2a:	bf00      	nop
 800ba2c:	2000d134 	.word	0x2000d134
 800ba30:	0800eb29 	.word	0x0800eb29
 800ba34:	2000d144 	.word	0x2000d144

0800ba38 <cleanup_stdio>:
 800ba38:	6841      	ldr	r1, [r0, #4]
 800ba3a:	4b0c      	ldr	r3, [pc, #48]	@ (800ba6c <cleanup_stdio+0x34>)
 800ba3c:	4299      	cmp	r1, r3
 800ba3e:	b510      	push	{r4, lr}
 800ba40:	4604      	mov	r4, r0
 800ba42:	d001      	beq.n	800ba48 <cleanup_stdio+0x10>
 800ba44:	f003 f870 	bl	800eb28 <_fflush_r>
 800ba48:	68a1      	ldr	r1, [r4, #8]
 800ba4a:	4b09      	ldr	r3, [pc, #36]	@ (800ba70 <cleanup_stdio+0x38>)
 800ba4c:	4299      	cmp	r1, r3
 800ba4e:	d002      	beq.n	800ba56 <cleanup_stdio+0x1e>
 800ba50:	4620      	mov	r0, r4
 800ba52:	f003 f869 	bl	800eb28 <_fflush_r>
 800ba56:	68e1      	ldr	r1, [r4, #12]
 800ba58:	4b06      	ldr	r3, [pc, #24]	@ (800ba74 <cleanup_stdio+0x3c>)
 800ba5a:	4299      	cmp	r1, r3
 800ba5c:	d004      	beq.n	800ba68 <cleanup_stdio+0x30>
 800ba5e:	4620      	mov	r0, r4
 800ba60:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ba64:	f003 b860 	b.w	800eb28 <_fflush_r>
 800ba68:	bd10      	pop	{r4, pc}
 800ba6a:	bf00      	nop
 800ba6c:	200140d0 	.word	0x200140d0
 800ba70:	20014138 	.word	0x20014138
 800ba74:	200141a0 	.word	0x200141a0

0800ba78 <global_stdio_init.part.0>:
 800ba78:	b510      	push	{r4, lr}
 800ba7a:	4b0b      	ldr	r3, [pc, #44]	@ (800baa8 <global_stdio_init.part.0+0x30>)
 800ba7c:	4c0b      	ldr	r4, [pc, #44]	@ (800baac <global_stdio_init.part.0+0x34>)
 800ba7e:	4a0c      	ldr	r2, [pc, #48]	@ (800bab0 <global_stdio_init.part.0+0x38>)
 800ba80:	601a      	str	r2, [r3, #0]
 800ba82:	4620      	mov	r0, r4
 800ba84:	2200      	movs	r2, #0
 800ba86:	2104      	movs	r1, #4
 800ba88:	f7ff ff94 	bl	800b9b4 <std>
 800ba8c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800ba90:	2201      	movs	r2, #1
 800ba92:	2109      	movs	r1, #9
 800ba94:	f7ff ff8e 	bl	800b9b4 <std>
 800ba98:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800ba9c:	2202      	movs	r2, #2
 800ba9e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800baa2:	2112      	movs	r1, #18
 800baa4:	f7ff bf86 	b.w	800b9b4 <std>
 800baa8:	20014208 	.word	0x20014208
 800baac:	200140d0 	.word	0x200140d0
 800bab0:	0800ba21 	.word	0x0800ba21

0800bab4 <__sfp_lock_acquire>:
 800bab4:	4801      	ldr	r0, [pc, #4]	@ (800babc <__sfp_lock_acquire+0x8>)
 800bab6:	f000 ba5c 	b.w	800bf72 <__retarget_lock_acquire_recursive>
 800baba:	bf00      	nop
 800babc:	20014211 	.word	0x20014211

0800bac0 <__sfp_lock_release>:
 800bac0:	4801      	ldr	r0, [pc, #4]	@ (800bac8 <__sfp_lock_release+0x8>)
 800bac2:	f000 ba57 	b.w	800bf74 <__retarget_lock_release_recursive>
 800bac6:	bf00      	nop
 800bac8:	20014211 	.word	0x20014211

0800bacc <__sinit>:
 800bacc:	b510      	push	{r4, lr}
 800bace:	4604      	mov	r4, r0
 800bad0:	f7ff fff0 	bl	800bab4 <__sfp_lock_acquire>
 800bad4:	6a23      	ldr	r3, [r4, #32]
 800bad6:	b11b      	cbz	r3, 800bae0 <__sinit+0x14>
 800bad8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800badc:	f7ff bff0 	b.w	800bac0 <__sfp_lock_release>
 800bae0:	4b04      	ldr	r3, [pc, #16]	@ (800baf4 <__sinit+0x28>)
 800bae2:	6223      	str	r3, [r4, #32]
 800bae4:	4b04      	ldr	r3, [pc, #16]	@ (800baf8 <__sinit+0x2c>)
 800bae6:	681b      	ldr	r3, [r3, #0]
 800bae8:	2b00      	cmp	r3, #0
 800baea:	d1f5      	bne.n	800bad8 <__sinit+0xc>
 800baec:	f7ff ffc4 	bl	800ba78 <global_stdio_init.part.0>
 800baf0:	e7f2      	b.n	800bad8 <__sinit+0xc>
 800baf2:	bf00      	nop
 800baf4:	0800ba39 	.word	0x0800ba39
 800baf8:	20014208 	.word	0x20014208

0800bafc <_fwalk_sglue>:
 800bafc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bb00:	4607      	mov	r7, r0
 800bb02:	4688      	mov	r8, r1
 800bb04:	4614      	mov	r4, r2
 800bb06:	2600      	movs	r6, #0
 800bb08:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800bb0c:	f1b9 0901 	subs.w	r9, r9, #1
 800bb10:	d505      	bpl.n	800bb1e <_fwalk_sglue+0x22>
 800bb12:	6824      	ldr	r4, [r4, #0]
 800bb14:	2c00      	cmp	r4, #0
 800bb16:	d1f7      	bne.n	800bb08 <_fwalk_sglue+0xc>
 800bb18:	4630      	mov	r0, r6
 800bb1a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bb1e:	89ab      	ldrh	r3, [r5, #12]
 800bb20:	2b01      	cmp	r3, #1
 800bb22:	d907      	bls.n	800bb34 <_fwalk_sglue+0x38>
 800bb24:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800bb28:	3301      	adds	r3, #1
 800bb2a:	d003      	beq.n	800bb34 <_fwalk_sglue+0x38>
 800bb2c:	4629      	mov	r1, r5
 800bb2e:	4638      	mov	r0, r7
 800bb30:	47c0      	blx	r8
 800bb32:	4306      	orrs	r6, r0
 800bb34:	3568      	adds	r5, #104	@ 0x68
 800bb36:	e7e9      	b.n	800bb0c <_fwalk_sglue+0x10>

0800bb38 <iprintf>:
 800bb38:	b40f      	push	{r0, r1, r2, r3}
 800bb3a:	b507      	push	{r0, r1, r2, lr}
 800bb3c:	4906      	ldr	r1, [pc, #24]	@ (800bb58 <iprintf+0x20>)
 800bb3e:	ab04      	add	r3, sp, #16
 800bb40:	6808      	ldr	r0, [r1, #0]
 800bb42:	f853 2b04 	ldr.w	r2, [r3], #4
 800bb46:	6881      	ldr	r1, [r0, #8]
 800bb48:	9301      	str	r3, [sp, #4]
 800bb4a:	f002 fe51 	bl	800e7f0 <_vfiprintf_r>
 800bb4e:	b003      	add	sp, #12
 800bb50:	f85d eb04 	ldr.w	lr, [sp], #4
 800bb54:	b004      	add	sp, #16
 800bb56:	4770      	bx	lr
 800bb58:	2000d140 	.word	0x2000d140

0800bb5c <_puts_r>:
 800bb5c:	6a03      	ldr	r3, [r0, #32]
 800bb5e:	b570      	push	{r4, r5, r6, lr}
 800bb60:	6884      	ldr	r4, [r0, #8]
 800bb62:	4605      	mov	r5, r0
 800bb64:	460e      	mov	r6, r1
 800bb66:	b90b      	cbnz	r3, 800bb6c <_puts_r+0x10>
 800bb68:	f7ff ffb0 	bl	800bacc <__sinit>
 800bb6c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800bb6e:	07db      	lsls	r3, r3, #31
 800bb70:	d405      	bmi.n	800bb7e <_puts_r+0x22>
 800bb72:	89a3      	ldrh	r3, [r4, #12]
 800bb74:	0598      	lsls	r0, r3, #22
 800bb76:	d402      	bmi.n	800bb7e <_puts_r+0x22>
 800bb78:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800bb7a:	f000 f9fa 	bl	800bf72 <__retarget_lock_acquire_recursive>
 800bb7e:	89a3      	ldrh	r3, [r4, #12]
 800bb80:	0719      	lsls	r1, r3, #28
 800bb82:	d502      	bpl.n	800bb8a <_puts_r+0x2e>
 800bb84:	6923      	ldr	r3, [r4, #16]
 800bb86:	2b00      	cmp	r3, #0
 800bb88:	d135      	bne.n	800bbf6 <_puts_r+0x9a>
 800bb8a:	4621      	mov	r1, r4
 800bb8c:	4628      	mov	r0, r5
 800bb8e:	f000 f91d 	bl	800bdcc <__swsetup_r>
 800bb92:	b380      	cbz	r0, 800bbf6 <_puts_r+0x9a>
 800bb94:	f04f 35ff 	mov.w	r5, #4294967295
 800bb98:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800bb9a:	07da      	lsls	r2, r3, #31
 800bb9c:	d405      	bmi.n	800bbaa <_puts_r+0x4e>
 800bb9e:	89a3      	ldrh	r3, [r4, #12]
 800bba0:	059b      	lsls	r3, r3, #22
 800bba2:	d402      	bmi.n	800bbaa <_puts_r+0x4e>
 800bba4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800bba6:	f000 f9e5 	bl	800bf74 <__retarget_lock_release_recursive>
 800bbaa:	4628      	mov	r0, r5
 800bbac:	bd70      	pop	{r4, r5, r6, pc}
 800bbae:	2b00      	cmp	r3, #0
 800bbb0:	da04      	bge.n	800bbbc <_puts_r+0x60>
 800bbb2:	69a2      	ldr	r2, [r4, #24]
 800bbb4:	429a      	cmp	r2, r3
 800bbb6:	dc17      	bgt.n	800bbe8 <_puts_r+0x8c>
 800bbb8:	290a      	cmp	r1, #10
 800bbba:	d015      	beq.n	800bbe8 <_puts_r+0x8c>
 800bbbc:	6823      	ldr	r3, [r4, #0]
 800bbbe:	1c5a      	adds	r2, r3, #1
 800bbc0:	6022      	str	r2, [r4, #0]
 800bbc2:	7019      	strb	r1, [r3, #0]
 800bbc4:	68a3      	ldr	r3, [r4, #8]
 800bbc6:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800bbca:	3b01      	subs	r3, #1
 800bbcc:	60a3      	str	r3, [r4, #8]
 800bbce:	2900      	cmp	r1, #0
 800bbd0:	d1ed      	bne.n	800bbae <_puts_r+0x52>
 800bbd2:	2b00      	cmp	r3, #0
 800bbd4:	da11      	bge.n	800bbfa <_puts_r+0x9e>
 800bbd6:	4622      	mov	r2, r4
 800bbd8:	210a      	movs	r1, #10
 800bbda:	4628      	mov	r0, r5
 800bbdc:	f000 f8b7 	bl	800bd4e <__swbuf_r>
 800bbe0:	3001      	adds	r0, #1
 800bbe2:	d0d7      	beq.n	800bb94 <_puts_r+0x38>
 800bbe4:	250a      	movs	r5, #10
 800bbe6:	e7d7      	b.n	800bb98 <_puts_r+0x3c>
 800bbe8:	4622      	mov	r2, r4
 800bbea:	4628      	mov	r0, r5
 800bbec:	f000 f8af 	bl	800bd4e <__swbuf_r>
 800bbf0:	3001      	adds	r0, #1
 800bbf2:	d1e7      	bne.n	800bbc4 <_puts_r+0x68>
 800bbf4:	e7ce      	b.n	800bb94 <_puts_r+0x38>
 800bbf6:	3e01      	subs	r6, #1
 800bbf8:	e7e4      	b.n	800bbc4 <_puts_r+0x68>
 800bbfa:	6823      	ldr	r3, [r4, #0]
 800bbfc:	1c5a      	adds	r2, r3, #1
 800bbfe:	6022      	str	r2, [r4, #0]
 800bc00:	220a      	movs	r2, #10
 800bc02:	701a      	strb	r2, [r3, #0]
 800bc04:	e7ee      	b.n	800bbe4 <_puts_r+0x88>
	...

0800bc08 <puts>:
 800bc08:	4b02      	ldr	r3, [pc, #8]	@ (800bc14 <puts+0xc>)
 800bc0a:	4601      	mov	r1, r0
 800bc0c:	6818      	ldr	r0, [r3, #0]
 800bc0e:	f7ff bfa5 	b.w	800bb5c <_puts_r>
 800bc12:	bf00      	nop
 800bc14:	2000d140 	.word	0x2000d140

0800bc18 <sniprintf>:
 800bc18:	b40c      	push	{r2, r3}
 800bc1a:	b530      	push	{r4, r5, lr}
 800bc1c:	4b18      	ldr	r3, [pc, #96]	@ (800bc80 <sniprintf+0x68>)
 800bc1e:	1e0c      	subs	r4, r1, #0
 800bc20:	681d      	ldr	r5, [r3, #0]
 800bc22:	b09d      	sub	sp, #116	@ 0x74
 800bc24:	da08      	bge.n	800bc38 <sniprintf+0x20>
 800bc26:	238b      	movs	r3, #139	@ 0x8b
 800bc28:	602b      	str	r3, [r5, #0]
 800bc2a:	f04f 30ff 	mov.w	r0, #4294967295
 800bc2e:	b01d      	add	sp, #116	@ 0x74
 800bc30:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800bc34:	b002      	add	sp, #8
 800bc36:	4770      	bx	lr
 800bc38:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800bc3c:	f8ad 3014 	strh.w	r3, [sp, #20]
 800bc40:	f04f 0300 	mov.w	r3, #0
 800bc44:	931b      	str	r3, [sp, #108]	@ 0x6c
 800bc46:	bf14      	ite	ne
 800bc48:	f104 33ff 	addne.w	r3, r4, #4294967295
 800bc4c:	4623      	moveq	r3, r4
 800bc4e:	9304      	str	r3, [sp, #16]
 800bc50:	9307      	str	r3, [sp, #28]
 800bc52:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800bc56:	9002      	str	r0, [sp, #8]
 800bc58:	9006      	str	r0, [sp, #24]
 800bc5a:	f8ad 3016 	strh.w	r3, [sp, #22]
 800bc5e:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800bc60:	ab21      	add	r3, sp, #132	@ 0x84
 800bc62:	a902      	add	r1, sp, #8
 800bc64:	4628      	mov	r0, r5
 800bc66:	9301      	str	r3, [sp, #4]
 800bc68:	f002 fc9c 	bl	800e5a4 <_svfiprintf_r>
 800bc6c:	1c43      	adds	r3, r0, #1
 800bc6e:	bfbc      	itt	lt
 800bc70:	238b      	movlt	r3, #139	@ 0x8b
 800bc72:	602b      	strlt	r3, [r5, #0]
 800bc74:	2c00      	cmp	r4, #0
 800bc76:	d0da      	beq.n	800bc2e <sniprintf+0x16>
 800bc78:	9b02      	ldr	r3, [sp, #8]
 800bc7a:	2200      	movs	r2, #0
 800bc7c:	701a      	strb	r2, [r3, #0]
 800bc7e:	e7d6      	b.n	800bc2e <sniprintf+0x16>
 800bc80:	2000d140 	.word	0x2000d140

0800bc84 <siprintf>:
 800bc84:	b40e      	push	{r1, r2, r3}
 800bc86:	b510      	push	{r4, lr}
 800bc88:	b09d      	sub	sp, #116	@ 0x74
 800bc8a:	ab1f      	add	r3, sp, #124	@ 0x7c
 800bc8c:	9002      	str	r0, [sp, #8]
 800bc8e:	9006      	str	r0, [sp, #24]
 800bc90:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800bc94:	480a      	ldr	r0, [pc, #40]	@ (800bcc0 <siprintf+0x3c>)
 800bc96:	9107      	str	r1, [sp, #28]
 800bc98:	9104      	str	r1, [sp, #16]
 800bc9a:	490a      	ldr	r1, [pc, #40]	@ (800bcc4 <siprintf+0x40>)
 800bc9c:	f853 2b04 	ldr.w	r2, [r3], #4
 800bca0:	9105      	str	r1, [sp, #20]
 800bca2:	2400      	movs	r4, #0
 800bca4:	a902      	add	r1, sp, #8
 800bca6:	6800      	ldr	r0, [r0, #0]
 800bca8:	9301      	str	r3, [sp, #4]
 800bcaa:	941b      	str	r4, [sp, #108]	@ 0x6c
 800bcac:	f002 fc7a 	bl	800e5a4 <_svfiprintf_r>
 800bcb0:	9b02      	ldr	r3, [sp, #8]
 800bcb2:	701c      	strb	r4, [r3, #0]
 800bcb4:	b01d      	add	sp, #116	@ 0x74
 800bcb6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bcba:	b003      	add	sp, #12
 800bcbc:	4770      	bx	lr
 800bcbe:	bf00      	nop
 800bcc0:	2000d140 	.word	0x2000d140
 800bcc4:	ffff0208 	.word	0xffff0208

0800bcc8 <__sread>:
 800bcc8:	b510      	push	{r4, lr}
 800bcca:	460c      	mov	r4, r1
 800bccc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bcd0:	f000 f900 	bl	800bed4 <_read_r>
 800bcd4:	2800      	cmp	r0, #0
 800bcd6:	bfab      	itete	ge
 800bcd8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800bcda:	89a3      	ldrhlt	r3, [r4, #12]
 800bcdc:	181b      	addge	r3, r3, r0
 800bcde:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800bce2:	bfac      	ite	ge
 800bce4:	6563      	strge	r3, [r4, #84]	@ 0x54
 800bce6:	81a3      	strhlt	r3, [r4, #12]
 800bce8:	bd10      	pop	{r4, pc}

0800bcea <__swrite>:
 800bcea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bcee:	461f      	mov	r7, r3
 800bcf0:	898b      	ldrh	r3, [r1, #12]
 800bcf2:	05db      	lsls	r3, r3, #23
 800bcf4:	4605      	mov	r5, r0
 800bcf6:	460c      	mov	r4, r1
 800bcf8:	4616      	mov	r6, r2
 800bcfa:	d505      	bpl.n	800bd08 <__swrite+0x1e>
 800bcfc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bd00:	2302      	movs	r3, #2
 800bd02:	2200      	movs	r2, #0
 800bd04:	f000 f8d4 	bl	800beb0 <_lseek_r>
 800bd08:	89a3      	ldrh	r3, [r4, #12]
 800bd0a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bd0e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800bd12:	81a3      	strh	r3, [r4, #12]
 800bd14:	4632      	mov	r2, r6
 800bd16:	463b      	mov	r3, r7
 800bd18:	4628      	mov	r0, r5
 800bd1a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bd1e:	f000 b8eb 	b.w	800bef8 <_write_r>

0800bd22 <__sseek>:
 800bd22:	b510      	push	{r4, lr}
 800bd24:	460c      	mov	r4, r1
 800bd26:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bd2a:	f000 f8c1 	bl	800beb0 <_lseek_r>
 800bd2e:	1c43      	adds	r3, r0, #1
 800bd30:	89a3      	ldrh	r3, [r4, #12]
 800bd32:	bf15      	itete	ne
 800bd34:	6560      	strne	r0, [r4, #84]	@ 0x54
 800bd36:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800bd3a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800bd3e:	81a3      	strheq	r3, [r4, #12]
 800bd40:	bf18      	it	ne
 800bd42:	81a3      	strhne	r3, [r4, #12]
 800bd44:	bd10      	pop	{r4, pc}

0800bd46 <__sclose>:
 800bd46:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bd4a:	f000 b8a1 	b.w	800be90 <_close_r>

0800bd4e <__swbuf_r>:
 800bd4e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bd50:	460e      	mov	r6, r1
 800bd52:	4614      	mov	r4, r2
 800bd54:	4605      	mov	r5, r0
 800bd56:	b118      	cbz	r0, 800bd60 <__swbuf_r+0x12>
 800bd58:	6a03      	ldr	r3, [r0, #32]
 800bd5a:	b90b      	cbnz	r3, 800bd60 <__swbuf_r+0x12>
 800bd5c:	f7ff feb6 	bl	800bacc <__sinit>
 800bd60:	69a3      	ldr	r3, [r4, #24]
 800bd62:	60a3      	str	r3, [r4, #8]
 800bd64:	89a3      	ldrh	r3, [r4, #12]
 800bd66:	071a      	lsls	r2, r3, #28
 800bd68:	d501      	bpl.n	800bd6e <__swbuf_r+0x20>
 800bd6a:	6923      	ldr	r3, [r4, #16]
 800bd6c:	b943      	cbnz	r3, 800bd80 <__swbuf_r+0x32>
 800bd6e:	4621      	mov	r1, r4
 800bd70:	4628      	mov	r0, r5
 800bd72:	f000 f82b 	bl	800bdcc <__swsetup_r>
 800bd76:	b118      	cbz	r0, 800bd80 <__swbuf_r+0x32>
 800bd78:	f04f 37ff 	mov.w	r7, #4294967295
 800bd7c:	4638      	mov	r0, r7
 800bd7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bd80:	6823      	ldr	r3, [r4, #0]
 800bd82:	6922      	ldr	r2, [r4, #16]
 800bd84:	1a98      	subs	r0, r3, r2
 800bd86:	6963      	ldr	r3, [r4, #20]
 800bd88:	b2f6      	uxtb	r6, r6
 800bd8a:	4283      	cmp	r3, r0
 800bd8c:	4637      	mov	r7, r6
 800bd8e:	dc05      	bgt.n	800bd9c <__swbuf_r+0x4e>
 800bd90:	4621      	mov	r1, r4
 800bd92:	4628      	mov	r0, r5
 800bd94:	f002 fec8 	bl	800eb28 <_fflush_r>
 800bd98:	2800      	cmp	r0, #0
 800bd9a:	d1ed      	bne.n	800bd78 <__swbuf_r+0x2a>
 800bd9c:	68a3      	ldr	r3, [r4, #8]
 800bd9e:	3b01      	subs	r3, #1
 800bda0:	60a3      	str	r3, [r4, #8]
 800bda2:	6823      	ldr	r3, [r4, #0]
 800bda4:	1c5a      	adds	r2, r3, #1
 800bda6:	6022      	str	r2, [r4, #0]
 800bda8:	701e      	strb	r6, [r3, #0]
 800bdaa:	6962      	ldr	r2, [r4, #20]
 800bdac:	1c43      	adds	r3, r0, #1
 800bdae:	429a      	cmp	r2, r3
 800bdb0:	d004      	beq.n	800bdbc <__swbuf_r+0x6e>
 800bdb2:	89a3      	ldrh	r3, [r4, #12]
 800bdb4:	07db      	lsls	r3, r3, #31
 800bdb6:	d5e1      	bpl.n	800bd7c <__swbuf_r+0x2e>
 800bdb8:	2e0a      	cmp	r6, #10
 800bdba:	d1df      	bne.n	800bd7c <__swbuf_r+0x2e>
 800bdbc:	4621      	mov	r1, r4
 800bdbe:	4628      	mov	r0, r5
 800bdc0:	f002 feb2 	bl	800eb28 <_fflush_r>
 800bdc4:	2800      	cmp	r0, #0
 800bdc6:	d0d9      	beq.n	800bd7c <__swbuf_r+0x2e>
 800bdc8:	e7d6      	b.n	800bd78 <__swbuf_r+0x2a>
	...

0800bdcc <__swsetup_r>:
 800bdcc:	b538      	push	{r3, r4, r5, lr}
 800bdce:	4b29      	ldr	r3, [pc, #164]	@ (800be74 <__swsetup_r+0xa8>)
 800bdd0:	4605      	mov	r5, r0
 800bdd2:	6818      	ldr	r0, [r3, #0]
 800bdd4:	460c      	mov	r4, r1
 800bdd6:	b118      	cbz	r0, 800bde0 <__swsetup_r+0x14>
 800bdd8:	6a03      	ldr	r3, [r0, #32]
 800bdda:	b90b      	cbnz	r3, 800bde0 <__swsetup_r+0x14>
 800bddc:	f7ff fe76 	bl	800bacc <__sinit>
 800bde0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bde4:	0719      	lsls	r1, r3, #28
 800bde6:	d422      	bmi.n	800be2e <__swsetup_r+0x62>
 800bde8:	06da      	lsls	r2, r3, #27
 800bdea:	d407      	bmi.n	800bdfc <__swsetup_r+0x30>
 800bdec:	2209      	movs	r2, #9
 800bdee:	602a      	str	r2, [r5, #0]
 800bdf0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bdf4:	81a3      	strh	r3, [r4, #12]
 800bdf6:	f04f 30ff 	mov.w	r0, #4294967295
 800bdfa:	e033      	b.n	800be64 <__swsetup_r+0x98>
 800bdfc:	0758      	lsls	r0, r3, #29
 800bdfe:	d512      	bpl.n	800be26 <__swsetup_r+0x5a>
 800be00:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800be02:	b141      	cbz	r1, 800be16 <__swsetup_r+0x4a>
 800be04:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800be08:	4299      	cmp	r1, r3
 800be0a:	d002      	beq.n	800be12 <__swsetup_r+0x46>
 800be0c:	4628      	mov	r0, r5
 800be0e:	f000 ff3f 	bl	800cc90 <_free_r>
 800be12:	2300      	movs	r3, #0
 800be14:	6363      	str	r3, [r4, #52]	@ 0x34
 800be16:	89a3      	ldrh	r3, [r4, #12]
 800be18:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800be1c:	81a3      	strh	r3, [r4, #12]
 800be1e:	2300      	movs	r3, #0
 800be20:	6063      	str	r3, [r4, #4]
 800be22:	6923      	ldr	r3, [r4, #16]
 800be24:	6023      	str	r3, [r4, #0]
 800be26:	89a3      	ldrh	r3, [r4, #12]
 800be28:	f043 0308 	orr.w	r3, r3, #8
 800be2c:	81a3      	strh	r3, [r4, #12]
 800be2e:	6923      	ldr	r3, [r4, #16]
 800be30:	b94b      	cbnz	r3, 800be46 <__swsetup_r+0x7a>
 800be32:	89a3      	ldrh	r3, [r4, #12]
 800be34:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800be38:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800be3c:	d003      	beq.n	800be46 <__swsetup_r+0x7a>
 800be3e:	4621      	mov	r1, r4
 800be40:	4628      	mov	r0, r5
 800be42:	f002 fed1 	bl	800ebe8 <__smakebuf_r>
 800be46:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800be4a:	f013 0201 	ands.w	r2, r3, #1
 800be4e:	d00a      	beq.n	800be66 <__swsetup_r+0x9a>
 800be50:	2200      	movs	r2, #0
 800be52:	60a2      	str	r2, [r4, #8]
 800be54:	6962      	ldr	r2, [r4, #20]
 800be56:	4252      	negs	r2, r2
 800be58:	61a2      	str	r2, [r4, #24]
 800be5a:	6922      	ldr	r2, [r4, #16]
 800be5c:	b942      	cbnz	r2, 800be70 <__swsetup_r+0xa4>
 800be5e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800be62:	d1c5      	bne.n	800bdf0 <__swsetup_r+0x24>
 800be64:	bd38      	pop	{r3, r4, r5, pc}
 800be66:	0799      	lsls	r1, r3, #30
 800be68:	bf58      	it	pl
 800be6a:	6962      	ldrpl	r2, [r4, #20]
 800be6c:	60a2      	str	r2, [r4, #8]
 800be6e:	e7f4      	b.n	800be5a <__swsetup_r+0x8e>
 800be70:	2000      	movs	r0, #0
 800be72:	e7f7      	b.n	800be64 <__swsetup_r+0x98>
 800be74:	2000d140 	.word	0x2000d140

0800be78 <memset>:
 800be78:	4402      	add	r2, r0
 800be7a:	4603      	mov	r3, r0
 800be7c:	4293      	cmp	r3, r2
 800be7e:	d100      	bne.n	800be82 <memset+0xa>
 800be80:	4770      	bx	lr
 800be82:	f803 1b01 	strb.w	r1, [r3], #1
 800be86:	e7f9      	b.n	800be7c <memset+0x4>

0800be88 <_localeconv_r>:
 800be88:	4800      	ldr	r0, [pc, #0]	@ (800be8c <_localeconv_r+0x4>)
 800be8a:	4770      	bx	lr
 800be8c:	2000d280 	.word	0x2000d280

0800be90 <_close_r>:
 800be90:	b538      	push	{r3, r4, r5, lr}
 800be92:	4d06      	ldr	r5, [pc, #24]	@ (800beac <_close_r+0x1c>)
 800be94:	2300      	movs	r3, #0
 800be96:	4604      	mov	r4, r0
 800be98:	4608      	mov	r0, r1
 800be9a:	602b      	str	r3, [r5, #0]
 800be9c:	f7f5 f8c8 	bl	8001030 <_close>
 800bea0:	1c43      	adds	r3, r0, #1
 800bea2:	d102      	bne.n	800beaa <_close_r+0x1a>
 800bea4:	682b      	ldr	r3, [r5, #0]
 800bea6:	b103      	cbz	r3, 800beaa <_close_r+0x1a>
 800bea8:	6023      	str	r3, [r4, #0]
 800beaa:	bd38      	pop	{r3, r4, r5, pc}
 800beac:	2001420c 	.word	0x2001420c

0800beb0 <_lseek_r>:
 800beb0:	b538      	push	{r3, r4, r5, lr}
 800beb2:	4d07      	ldr	r5, [pc, #28]	@ (800bed0 <_lseek_r+0x20>)
 800beb4:	4604      	mov	r4, r0
 800beb6:	4608      	mov	r0, r1
 800beb8:	4611      	mov	r1, r2
 800beba:	2200      	movs	r2, #0
 800bebc:	602a      	str	r2, [r5, #0]
 800bebe:	461a      	mov	r2, r3
 800bec0:	f7f5 f8c2 	bl	8001048 <_lseek>
 800bec4:	1c43      	adds	r3, r0, #1
 800bec6:	d102      	bne.n	800bece <_lseek_r+0x1e>
 800bec8:	682b      	ldr	r3, [r5, #0]
 800beca:	b103      	cbz	r3, 800bece <_lseek_r+0x1e>
 800becc:	6023      	str	r3, [r4, #0]
 800bece:	bd38      	pop	{r3, r4, r5, pc}
 800bed0:	2001420c 	.word	0x2001420c

0800bed4 <_read_r>:
 800bed4:	b538      	push	{r3, r4, r5, lr}
 800bed6:	4d07      	ldr	r5, [pc, #28]	@ (800bef4 <_read_r+0x20>)
 800bed8:	4604      	mov	r4, r0
 800beda:	4608      	mov	r0, r1
 800bedc:	4611      	mov	r1, r2
 800bede:	2200      	movs	r2, #0
 800bee0:	602a      	str	r2, [r5, #0]
 800bee2:	461a      	mov	r2, r3
 800bee4:	f7f5 f8bd 	bl	8001062 <_read>
 800bee8:	1c43      	adds	r3, r0, #1
 800beea:	d102      	bne.n	800bef2 <_read_r+0x1e>
 800beec:	682b      	ldr	r3, [r5, #0]
 800beee:	b103      	cbz	r3, 800bef2 <_read_r+0x1e>
 800bef0:	6023      	str	r3, [r4, #0]
 800bef2:	bd38      	pop	{r3, r4, r5, pc}
 800bef4:	2001420c 	.word	0x2001420c

0800bef8 <_write_r>:
 800bef8:	b538      	push	{r3, r4, r5, lr}
 800befa:	4d07      	ldr	r5, [pc, #28]	@ (800bf18 <_write_r+0x20>)
 800befc:	4604      	mov	r4, r0
 800befe:	4608      	mov	r0, r1
 800bf00:	4611      	mov	r1, r2
 800bf02:	2200      	movs	r2, #0
 800bf04:	602a      	str	r2, [r5, #0]
 800bf06:	461a      	mov	r2, r3
 800bf08:	f7f5 f8d4 	bl	80010b4 <_write>
 800bf0c:	1c43      	adds	r3, r0, #1
 800bf0e:	d102      	bne.n	800bf16 <_write_r+0x1e>
 800bf10:	682b      	ldr	r3, [r5, #0]
 800bf12:	b103      	cbz	r3, 800bf16 <_write_r+0x1e>
 800bf14:	6023      	str	r3, [r4, #0]
 800bf16:	bd38      	pop	{r3, r4, r5, pc}
 800bf18:	2001420c 	.word	0x2001420c

0800bf1c <__errno>:
 800bf1c:	4b01      	ldr	r3, [pc, #4]	@ (800bf24 <__errno+0x8>)
 800bf1e:	6818      	ldr	r0, [r3, #0]
 800bf20:	4770      	bx	lr
 800bf22:	bf00      	nop
 800bf24:	2000d140 	.word	0x2000d140

0800bf28 <__libc_init_array>:
 800bf28:	b570      	push	{r4, r5, r6, lr}
 800bf2a:	4d0d      	ldr	r5, [pc, #52]	@ (800bf60 <__libc_init_array+0x38>)
 800bf2c:	4c0d      	ldr	r4, [pc, #52]	@ (800bf64 <__libc_init_array+0x3c>)
 800bf2e:	1b64      	subs	r4, r4, r5
 800bf30:	10a4      	asrs	r4, r4, #2
 800bf32:	2600      	movs	r6, #0
 800bf34:	42a6      	cmp	r6, r4
 800bf36:	d109      	bne.n	800bf4c <__libc_init_array+0x24>
 800bf38:	4d0b      	ldr	r5, [pc, #44]	@ (800bf68 <__libc_init_array+0x40>)
 800bf3a:	4c0c      	ldr	r4, [pc, #48]	@ (800bf6c <__libc_init_array+0x44>)
 800bf3c:	f003 fae4 	bl	800f508 <_init>
 800bf40:	1b64      	subs	r4, r4, r5
 800bf42:	10a4      	asrs	r4, r4, #2
 800bf44:	2600      	movs	r6, #0
 800bf46:	42a6      	cmp	r6, r4
 800bf48:	d105      	bne.n	800bf56 <__libc_init_array+0x2e>
 800bf4a:	bd70      	pop	{r4, r5, r6, pc}
 800bf4c:	f855 3b04 	ldr.w	r3, [r5], #4
 800bf50:	4798      	blx	r3
 800bf52:	3601      	adds	r6, #1
 800bf54:	e7ee      	b.n	800bf34 <__libc_init_array+0xc>
 800bf56:	f855 3b04 	ldr.w	r3, [r5], #4
 800bf5a:	4798      	blx	r3
 800bf5c:	3601      	adds	r6, #1
 800bf5e:	e7f2      	b.n	800bf46 <__libc_init_array+0x1e>
 800bf60:	0801108c 	.word	0x0801108c
 800bf64:	0801108c 	.word	0x0801108c
 800bf68:	0801108c 	.word	0x0801108c
 800bf6c:	08011090 	.word	0x08011090

0800bf70 <__retarget_lock_init_recursive>:
 800bf70:	4770      	bx	lr

0800bf72 <__retarget_lock_acquire_recursive>:
 800bf72:	4770      	bx	lr

0800bf74 <__retarget_lock_release_recursive>:
 800bf74:	4770      	bx	lr

0800bf76 <memcpy>:
 800bf76:	440a      	add	r2, r1
 800bf78:	4291      	cmp	r1, r2
 800bf7a:	f100 33ff 	add.w	r3, r0, #4294967295
 800bf7e:	d100      	bne.n	800bf82 <memcpy+0xc>
 800bf80:	4770      	bx	lr
 800bf82:	b510      	push	{r4, lr}
 800bf84:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bf88:	f803 4f01 	strb.w	r4, [r3, #1]!
 800bf8c:	4291      	cmp	r1, r2
 800bf8e:	d1f9      	bne.n	800bf84 <memcpy+0xe>
 800bf90:	bd10      	pop	{r4, pc}
	...

0800bf94 <nanf>:
 800bf94:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800bf9c <nanf+0x8>
 800bf98:	4770      	bx	lr
 800bf9a:	bf00      	nop
 800bf9c:	7fc00000 	.word	0x7fc00000

0800bfa0 <__assert_func>:
 800bfa0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800bfa2:	4614      	mov	r4, r2
 800bfa4:	461a      	mov	r2, r3
 800bfa6:	4b09      	ldr	r3, [pc, #36]	@ (800bfcc <__assert_func+0x2c>)
 800bfa8:	681b      	ldr	r3, [r3, #0]
 800bfaa:	4605      	mov	r5, r0
 800bfac:	68d8      	ldr	r0, [r3, #12]
 800bfae:	b14c      	cbz	r4, 800bfc4 <__assert_func+0x24>
 800bfb0:	4b07      	ldr	r3, [pc, #28]	@ (800bfd0 <__assert_func+0x30>)
 800bfb2:	9100      	str	r1, [sp, #0]
 800bfb4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800bfb8:	4906      	ldr	r1, [pc, #24]	@ (800bfd4 <__assert_func+0x34>)
 800bfba:	462b      	mov	r3, r5
 800bfbc:	f002 fddc 	bl	800eb78 <fiprintf>
 800bfc0:	f002 feb6 	bl	800ed30 <abort>
 800bfc4:	4b04      	ldr	r3, [pc, #16]	@ (800bfd8 <__assert_func+0x38>)
 800bfc6:	461c      	mov	r4, r3
 800bfc8:	e7f3      	b.n	800bfb2 <__assert_func+0x12>
 800bfca:	bf00      	nop
 800bfcc:	2000d140 	.word	0x2000d140
 800bfd0:	08010c91 	.word	0x08010c91
 800bfd4:	08010c9e 	.word	0x08010c9e
 800bfd8:	08010ccc 	.word	0x08010ccc

0800bfdc <quorem>:
 800bfdc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bfe0:	6903      	ldr	r3, [r0, #16]
 800bfe2:	690c      	ldr	r4, [r1, #16]
 800bfe4:	42a3      	cmp	r3, r4
 800bfe6:	4607      	mov	r7, r0
 800bfe8:	db7e      	blt.n	800c0e8 <quorem+0x10c>
 800bfea:	3c01      	subs	r4, #1
 800bfec:	f101 0814 	add.w	r8, r1, #20
 800bff0:	00a3      	lsls	r3, r4, #2
 800bff2:	f100 0514 	add.w	r5, r0, #20
 800bff6:	9300      	str	r3, [sp, #0]
 800bff8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800bffc:	9301      	str	r3, [sp, #4]
 800bffe:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800c002:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c006:	3301      	adds	r3, #1
 800c008:	429a      	cmp	r2, r3
 800c00a:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800c00e:	fbb2 f6f3 	udiv	r6, r2, r3
 800c012:	d32e      	bcc.n	800c072 <quorem+0x96>
 800c014:	f04f 0a00 	mov.w	sl, #0
 800c018:	46c4      	mov	ip, r8
 800c01a:	46ae      	mov	lr, r5
 800c01c:	46d3      	mov	fp, sl
 800c01e:	f85c 3b04 	ldr.w	r3, [ip], #4
 800c022:	b298      	uxth	r0, r3
 800c024:	fb06 a000 	mla	r0, r6, r0, sl
 800c028:	0c02      	lsrs	r2, r0, #16
 800c02a:	0c1b      	lsrs	r3, r3, #16
 800c02c:	fb06 2303 	mla	r3, r6, r3, r2
 800c030:	f8de 2000 	ldr.w	r2, [lr]
 800c034:	b280      	uxth	r0, r0
 800c036:	b292      	uxth	r2, r2
 800c038:	1a12      	subs	r2, r2, r0
 800c03a:	445a      	add	r2, fp
 800c03c:	f8de 0000 	ldr.w	r0, [lr]
 800c040:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800c044:	b29b      	uxth	r3, r3
 800c046:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800c04a:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800c04e:	b292      	uxth	r2, r2
 800c050:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800c054:	45e1      	cmp	r9, ip
 800c056:	f84e 2b04 	str.w	r2, [lr], #4
 800c05a:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800c05e:	d2de      	bcs.n	800c01e <quorem+0x42>
 800c060:	9b00      	ldr	r3, [sp, #0]
 800c062:	58eb      	ldr	r3, [r5, r3]
 800c064:	b92b      	cbnz	r3, 800c072 <quorem+0x96>
 800c066:	9b01      	ldr	r3, [sp, #4]
 800c068:	3b04      	subs	r3, #4
 800c06a:	429d      	cmp	r5, r3
 800c06c:	461a      	mov	r2, r3
 800c06e:	d32f      	bcc.n	800c0d0 <quorem+0xf4>
 800c070:	613c      	str	r4, [r7, #16]
 800c072:	4638      	mov	r0, r7
 800c074:	f001 f9c8 	bl	800d408 <__mcmp>
 800c078:	2800      	cmp	r0, #0
 800c07a:	db25      	blt.n	800c0c8 <quorem+0xec>
 800c07c:	4629      	mov	r1, r5
 800c07e:	2000      	movs	r0, #0
 800c080:	f858 2b04 	ldr.w	r2, [r8], #4
 800c084:	f8d1 c000 	ldr.w	ip, [r1]
 800c088:	fa1f fe82 	uxth.w	lr, r2
 800c08c:	fa1f f38c 	uxth.w	r3, ip
 800c090:	eba3 030e 	sub.w	r3, r3, lr
 800c094:	4403      	add	r3, r0
 800c096:	0c12      	lsrs	r2, r2, #16
 800c098:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800c09c:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800c0a0:	b29b      	uxth	r3, r3
 800c0a2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c0a6:	45c1      	cmp	r9, r8
 800c0a8:	f841 3b04 	str.w	r3, [r1], #4
 800c0ac:	ea4f 4022 	mov.w	r0, r2, asr #16
 800c0b0:	d2e6      	bcs.n	800c080 <quorem+0xa4>
 800c0b2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c0b6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c0ba:	b922      	cbnz	r2, 800c0c6 <quorem+0xea>
 800c0bc:	3b04      	subs	r3, #4
 800c0be:	429d      	cmp	r5, r3
 800c0c0:	461a      	mov	r2, r3
 800c0c2:	d30b      	bcc.n	800c0dc <quorem+0x100>
 800c0c4:	613c      	str	r4, [r7, #16]
 800c0c6:	3601      	adds	r6, #1
 800c0c8:	4630      	mov	r0, r6
 800c0ca:	b003      	add	sp, #12
 800c0cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c0d0:	6812      	ldr	r2, [r2, #0]
 800c0d2:	3b04      	subs	r3, #4
 800c0d4:	2a00      	cmp	r2, #0
 800c0d6:	d1cb      	bne.n	800c070 <quorem+0x94>
 800c0d8:	3c01      	subs	r4, #1
 800c0da:	e7c6      	b.n	800c06a <quorem+0x8e>
 800c0dc:	6812      	ldr	r2, [r2, #0]
 800c0de:	3b04      	subs	r3, #4
 800c0e0:	2a00      	cmp	r2, #0
 800c0e2:	d1ef      	bne.n	800c0c4 <quorem+0xe8>
 800c0e4:	3c01      	subs	r4, #1
 800c0e6:	e7ea      	b.n	800c0be <quorem+0xe2>
 800c0e8:	2000      	movs	r0, #0
 800c0ea:	e7ee      	b.n	800c0ca <quorem+0xee>
 800c0ec:	0000      	movs	r0, r0
	...

0800c0f0 <_dtoa_r>:
 800c0f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c0f4:	69c7      	ldr	r7, [r0, #28]
 800c0f6:	b097      	sub	sp, #92	@ 0x5c
 800c0f8:	ed8d 0b04 	vstr	d0, [sp, #16]
 800c0fc:	ec55 4b10 	vmov	r4, r5, d0
 800c100:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 800c102:	9107      	str	r1, [sp, #28]
 800c104:	4681      	mov	r9, r0
 800c106:	920c      	str	r2, [sp, #48]	@ 0x30
 800c108:	9311      	str	r3, [sp, #68]	@ 0x44
 800c10a:	b97f      	cbnz	r7, 800c12c <_dtoa_r+0x3c>
 800c10c:	2010      	movs	r0, #16
 800c10e:	f000 fe09 	bl	800cd24 <malloc>
 800c112:	4602      	mov	r2, r0
 800c114:	f8c9 001c 	str.w	r0, [r9, #28]
 800c118:	b920      	cbnz	r0, 800c124 <_dtoa_r+0x34>
 800c11a:	4ba9      	ldr	r3, [pc, #676]	@ (800c3c0 <_dtoa_r+0x2d0>)
 800c11c:	21ef      	movs	r1, #239	@ 0xef
 800c11e:	48a9      	ldr	r0, [pc, #676]	@ (800c3c4 <_dtoa_r+0x2d4>)
 800c120:	f7ff ff3e 	bl	800bfa0 <__assert_func>
 800c124:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800c128:	6007      	str	r7, [r0, #0]
 800c12a:	60c7      	str	r7, [r0, #12]
 800c12c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800c130:	6819      	ldr	r1, [r3, #0]
 800c132:	b159      	cbz	r1, 800c14c <_dtoa_r+0x5c>
 800c134:	685a      	ldr	r2, [r3, #4]
 800c136:	604a      	str	r2, [r1, #4]
 800c138:	2301      	movs	r3, #1
 800c13a:	4093      	lsls	r3, r2
 800c13c:	608b      	str	r3, [r1, #8]
 800c13e:	4648      	mov	r0, r9
 800c140:	f000 fee6 	bl	800cf10 <_Bfree>
 800c144:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800c148:	2200      	movs	r2, #0
 800c14a:	601a      	str	r2, [r3, #0]
 800c14c:	1e2b      	subs	r3, r5, #0
 800c14e:	bfb9      	ittee	lt
 800c150:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800c154:	9305      	strlt	r3, [sp, #20]
 800c156:	2300      	movge	r3, #0
 800c158:	6033      	strge	r3, [r6, #0]
 800c15a:	9f05      	ldr	r7, [sp, #20]
 800c15c:	4b9a      	ldr	r3, [pc, #616]	@ (800c3c8 <_dtoa_r+0x2d8>)
 800c15e:	bfbc      	itt	lt
 800c160:	2201      	movlt	r2, #1
 800c162:	6032      	strlt	r2, [r6, #0]
 800c164:	43bb      	bics	r3, r7
 800c166:	d112      	bne.n	800c18e <_dtoa_r+0x9e>
 800c168:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800c16a:	f242 730f 	movw	r3, #9999	@ 0x270f
 800c16e:	6013      	str	r3, [r2, #0]
 800c170:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800c174:	4323      	orrs	r3, r4
 800c176:	f000 855a 	beq.w	800cc2e <_dtoa_r+0xb3e>
 800c17a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800c17c:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 800c3dc <_dtoa_r+0x2ec>
 800c180:	2b00      	cmp	r3, #0
 800c182:	f000 855c 	beq.w	800cc3e <_dtoa_r+0xb4e>
 800c186:	f10a 0303 	add.w	r3, sl, #3
 800c18a:	f000 bd56 	b.w	800cc3a <_dtoa_r+0xb4a>
 800c18e:	ed9d 7b04 	vldr	d7, [sp, #16]
 800c192:	2200      	movs	r2, #0
 800c194:	ec51 0b17 	vmov	r0, r1, d7
 800c198:	2300      	movs	r3, #0
 800c19a:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 800c19e:	f7f4 fc9b 	bl	8000ad8 <__aeabi_dcmpeq>
 800c1a2:	4680      	mov	r8, r0
 800c1a4:	b158      	cbz	r0, 800c1be <_dtoa_r+0xce>
 800c1a6:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800c1a8:	2301      	movs	r3, #1
 800c1aa:	6013      	str	r3, [r2, #0]
 800c1ac:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800c1ae:	b113      	cbz	r3, 800c1b6 <_dtoa_r+0xc6>
 800c1b0:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800c1b2:	4b86      	ldr	r3, [pc, #536]	@ (800c3cc <_dtoa_r+0x2dc>)
 800c1b4:	6013      	str	r3, [r2, #0]
 800c1b6:	f8df a228 	ldr.w	sl, [pc, #552]	@ 800c3e0 <_dtoa_r+0x2f0>
 800c1ba:	f000 bd40 	b.w	800cc3e <_dtoa_r+0xb4e>
 800c1be:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 800c1c2:	aa14      	add	r2, sp, #80	@ 0x50
 800c1c4:	a915      	add	r1, sp, #84	@ 0x54
 800c1c6:	4648      	mov	r0, r9
 800c1c8:	f001 fa3e 	bl	800d648 <__d2b>
 800c1cc:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800c1d0:	9002      	str	r0, [sp, #8]
 800c1d2:	2e00      	cmp	r6, #0
 800c1d4:	d078      	beq.n	800c2c8 <_dtoa_r+0x1d8>
 800c1d6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c1d8:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 800c1dc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c1e0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800c1e4:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800c1e8:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800c1ec:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800c1f0:	4619      	mov	r1, r3
 800c1f2:	2200      	movs	r2, #0
 800c1f4:	4b76      	ldr	r3, [pc, #472]	@ (800c3d0 <_dtoa_r+0x2e0>)
 800c1f6:	f7f4 f84f 	bl	8000298 <__aeabi_dsub>
 800c1fa:	a36b      	add	r3, pc, #428	@ (adr r3, 800c3a8 <_dtoa_r+0x2b8>)
 800c1fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c200:	f7f4 fa02 	bl	8000608 <__aeabi_dmul>
 800c204:	a36a      	add	r3, pc, #424	@ (adr r3, 800c3b0 <_dtoa_r+0x2c0>)
 800c206:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c20a:	f7f4 f847 	bl	800029c <__adddf3>
 800c20e:	4604      	mov	r4, r0
 800c210:	4630      	mov	r0, r6
 800c212:	460d      	mov	r5, r1
 800c214:	f7f4 f98e 	bl	8000534 <__aeabi_i2d>
 800c218:	a367      	add	r3, pc, #412	@ (adr r3, 800c3b8 <_dtoa_r+0x2c8>)
 800c21a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c21e:	f7f4 f9f3 	bl	8000608 <__aeabi_dmul>
 800c222:	4602      	mov	r2, r0
 800c224:	460b      	mov	r3, r1
 800c226:	4620      	mov	r0, r4
 800c228:	4629      	mov	r1, r5
 800c22a:	f7f4 f837 	bl	800029c <__adddf3>
 800c22e:	4604      	mov	r4, r0
 800c230:	460d      	mov	r5, r1
 800c232:	f7f4 fc99 	bl	8000b68 <__aeabi_d2iz>
 800c236:	2200      	movs	r2, #0
 800c238:	4607      	mov	r7, r0
 800c23a:	2300      	movs	r3, #0
 800c23c:	4620      	mov	r0, r4
 800c23e:	4629      	mov	r1, r5
 800c240:	f7f4 fc54 	bl	8000aec <__aeabi_dcmplt>
 800c244:	b140      	cbz	r0, 800c258 <_dtoa_r+0x168>
 800c246:	4638      	mov	r0, r7
 800c248:	f7f4 f974 	bl	8000534 <__aeabi_i2d>
 800c24c:	4622      	mov	r2, r4
 800c24e:	462b      	mov	r3, r5
 800c250:	f7f4 fc42 	bl	8000ad8 <__aeabi_dcmpeq>
 800c254:	b900      	cbnz	r0, 800c258 <_dtoa_r+0x168>
 800c256:	3f01      	subs	r7, #1
 800c258:	2f16      	cmp	r7, #22
 800c25a:	d852      	bhi.n	800c302 <_dtoa_r+0x212>
 800c25c:	4b5d      	ldr	r3, [pc, #372]	@ (800c3d4 <_dtoa_r+0x2e4>)
 800c25e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800c262:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c266:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800c26a:	f7f4 fc3f 	bl	8000aec <__aeabi_dcmplt>
 800c26e:	2800      	cmp	r0, #0
 800c270:	d049      	beq.n	800c306 <_dtoa_r+0x216>
 800c272:	3f01      	subs	r7, #1
 800c274:	2300      	movs	r3, #0
 800c276:	9310      	str	r3, [sp, #64]	@ 0x40
 800c278:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800c27a:	1b9b      	subs	r3, r3, r6
 800c27c:	1e5a      	subs	r2, r3, #1
 800c27e:	bf45      	ittet	mi
 800c280:	f1c3 0301 	rsbmi	r3, r3, #1
 800c284:	9300      	strmi	r3, [sp, #0]
 800c286:	2300      	movpl	r3, #0
 800c288:	2300      	movmi	r3, #0
 800c28a:	9206      	str	r2, [sp, #24]
 800c28c:	bf54      	ite	pl
 800c28e:	9300      	strpl	r3, [sp, #0]
 800c290:	9306      	strmi	r3, [sp, #24]
 800c292:	2f00      	cmp	r7, #0
 800c294:	db39      	blt.n	800c30a <_dtoa_r+0x21a>
 800c296:	9b06      	ldr	r3, [sp, #24]
 800c298:	970d      	str	r7, [sp, #52]	@ 0x34
 800c29a:	443b      	add	r3, r7
 800c29c:	9306      	str	r3, [sp, #24]
 800c29e:	2300      	movs	r3, #0
 800c2a0:	9308      	str	r3, [sp, #32]
 800c2a2:	9b07      	ldr	r3, [sp, #28]
 800c2a4:	2b09      	cmp	r3, #9
 800c2a6:	d863      	bhi.n	800c370 <_dtoa_r+0x280>
 800c2a8:	2b05      	cmp	r3, #5
 800c2aa:	bfc4      	itt	gt
 800c2ac:	3b04      	subgt	r3, #4
 800c2ae:	9307      	strgt	r3, [sp, #28]
 800c2b0:	9b07      	ldr	r3, [sp, #28]
 800c2b2:	f1a3 0302 	sub.w	r3, r3, #2
 800c2b6:	bfcc      	ite	gt
 800c2b8:	2400      	movgt	r4, #0
 800c2ba:	2401      	movle	r4, #1
 800c2bc:	2b03      	cmp	r3, #3
 800c2be:	d863      	bhi.n	800c388 <_dtoa_r+0x298>
 800c2c0:	e8df f003 	tbb	[pc, r3]
 800c2c4:	2b375452 	.word	0x2b375452
 800c2c8:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 800c2cc:	441e      	add	r6, r3
 800c2ce:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800c2d2:	2b20      	cmp	r3, #32
 800c2d4:	bfc1      	itttt	gt
 800c2d6:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800c2da:	409f      	lslgt	r7, r3
 800c2dc:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800c2e0:	fa24 f303 	lsrgt.w	r3, r4, r3
 800c2e4:	bfd6      	itet	le
 800c2e6:	f1c3 0320 	rsble	r3, r3, #32
 800c2ea:	ea47 0003 	orrgt.w	r0, r7, r3
 800c2ee:	fa04 f003 	lslle.w	r0, r4, r3
 800c2f2:	f7f4 f90f 	bl	8000514 <__aeabi_ui2d>
 800c2f6:	2201      	movs	r2, #1
 800c2f8:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800c2fc:	3e01      	subs	r6, #1
 800c2fe:	9212      	str	r2, [sp, #72]	@ 0x48
 800c300:	e776      	b.n	800c1f0 <_dtoa_r+0x100>
 800c302:	2301      	movs	r3, #1
 800c304:	e7b7      	b.n	800c276 <_dtoa_r+0x186>
 800c306:	9010      	str	r0, [sp, #64]	@ 0x40
 800c308:	e7b6      	b.n	800c278 <_dtoa_r+0x188>
 800c30a:	9b00      	ldr	r3, [sp, #0]
 800c30c:	1bdb      	subs	r3, r3, r7
 800c30e:	9300      	str	r3, [sp, #0]
 800c310:	427b      	negs	r3, r7
 800c312:	9308      	str	r3, [sp, #32]
 800c314:	2300      	movs	r3, #0
 800c316:	930d      	str	r3, [sp, #52]	@ 0x34
 800c318:	e7c3      	b.n	800c2a2 <_dtoa_r+0x1b2>
 800c31a:	2301      	movs	r3, #1
 800c31c:	9309      	str	r3, [sp, #36]	@ 0x24
 800c31e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800c320:	eb07 0b03 	add.w	fp, r7, r3
 800c324:	f10b 0301 	add.w	r3, fp, #1
 800c328:	2b01      	cmp	r3, #1
 800c32a:	9303      	str	r3, [sp, #12]
 800c32c:	bfb8      	it	lt
 800c32e:	2301      	movlt	r3, #1
 800c330:	e006      	b.n	800c340 <_dtoa_r+0x250>
 800c332:	2301      	movs	r3, #1
 800c334:	9309      	str	r3, [sp, #36]	@ 0x24
 800c336:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800c338:	2b00      	cmp	r3, #0
 800c33a:	dd28      	ble.n	800c38e <_dtoa_r+0x29e>
 800c33c:	469b      	mov	fp, r3
 800c33e:	9303      	str	r3, [sp, #12]
 800c340:	f8d9 001c 	ldr.w	r0, [r9, #28]
 800c344:	2100      	movs	r1, #0
 800c346:	2204      	movs	r2, #4
 800c348:	f102 0514 	add.w	r5, r2, #20
 800c34c:	429d      	cmp	r5, r3
 800c34e:	d926      	bls.n	800c39e <_dtoa_r+0x2ae>
 800c350:	6041      	str	r1, [r0, #4]
 800c352:	4648      	mov	r0, r9
 800c354:	f000 fd9c 	bl	800ce90 <_Balloc>
 800c358:	4682      	mov	sl, r0
 800c35a:	2800      	cmp	r0, #0
 800c35c:	d142      	bne.n	800c3e4 <_dtoa_r+0x2f4>
 800c35e:	4b1e      	ldr	r3, [pc, #120]	@ (800c3d8 <_dtoa_r+0x2e8>)
 800c360:	4602      	mov	r2, r0
 800c362:	f240 11af 	movw	r1, #431	@ 0x1af
 800c366:	e6da      	b.n	800c11e <_dtoa_r+0x2e>
 800c368:	2300      	movs	r3, #0
 800c36a:	e7e3      	b.n	800c334 <_dtoa_r+0x244>
 800c36c:	2300      	movs	r3, #0
 800c36e:	e7d5      	b.n	800c31c <_dtoa_r+0x22c>
 800c370:	2401      	movs	r4, #1
 800c372:	2300      	movs	r3, #0
 800c374:	9307      	str	r3, [sp, #28]
 800c376:	9409      	str	r4, [sp, #36]	@ 0x24
 800c378:	f04f 3bff 	mov.w	fp, #4294967295
 800c37c:	2200      	movs	r2, #0
 800c37e:	f8cd b00c 	str.w	fp, [sp, #12]
 800c382:	2312      	movs	r3, #18
 800c384:	920c      	str	r2, [sp, #48]	@ 0x30
 800c386:	e7db      	b.n	800c340 <_dtoa_r+0x250>
 800c388:	2301      	movs	r3, #1
 800c38a:	9309      	str	r3, [sp, #36]	@ 0x24
 800c38c:	e7f4      	b.n	800c378 <_dtoa_r+0x288>
 800c38e:	f04f 0b01 	mov.w	fp, #1
 800c392:	f8cd b00c 	str.w	fp, [sp, #12]
 800c396:	465b      	mov	r3, fp
 800c398:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 800c39c:	e7d0      	b.n	800c340 <_dtoa_r+0x250>
 800c39e:	3101      	adds	r1, #1
 800c3a0:	0052      	lsls	r2, r2, #1
 800c3a2:	e7d1      	b.n	800c348 <_dtoa_r+0x258>
 800c3a4:	f3af 8000 	nop.w
 800c3a8:	636f4361 	.word	0x636f4361
 800c3ac:	3fd287a7 	.word	0x3fd287a7
 800c3b0:	8b60c8b3 	.word	0x8b60c8b3
 800c3b4:	3fc68a28 	.word	0x3fc68a28
 800c3b8:	509f79fb 	.word	0x509f79fb
 800c3bc:	3fd34413 	.word	0x3fd34413
 800c3c0:	08010cda 	.word	0x08010cda
 800c3c4:	08010cf1 	.word	0x08010cf1
 800c3c8:	7ff00000 	.word	0x7ff00000
 800c3cc:	08010c69 	.word	0x08010c69
 800c3d0:	3ff80000 	.word	0x3ff80000
 800c3d4:	08010e68 	.word	0x08010e68
 800c3d8:	08010d49 	.word	0x08010d49
 800c3dc:	08010cd6 	.word	0x08010cd6
 800c3e0:	08010c68 	.word	0x08010c68
 800c3e4:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800c3e8:	6018      	str	r0, [r3, #0]
 800c3ea:	9b03      	ldr	r3, [sp, #12]
 800c3ec:	2b0e      	cmp	r3, #14
 800c3ee:	f200 80a1 	bhi.w	800c534 <_dtoa_r+0x444>
 800c3f2:	2c00      	cmp	r4, #0
 800c3f4:	f000 809e 	beq.w	800c534 <_dtoa_r+0x444>
 800c3f8:	2f00      	cmp	r7, #0
 800c3fa:	dd33      	ble.n	800c464 <_dtoa_r+0x374>
 800c3fc:	4b9c      	ldr	r3, [pc, #624]	@ (800c670 <_dtoa_r+0x580>)
 800c3fe:	f007 020f 	and.w	r2, r7, #15
 800c402:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c406:	ed93 7b00 	vldr	d7, [r3]
 800c40a:	05f8      	lsls	r0, r7, #23
 800c40c:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 800c410:	ea4f 1427 	mov.w	r4, r7, asr #4
 800c414:	d516      	bpl.n	800c444 <_dtoa_r+0x354>
 800c416:	4b97      	ldr	r3, [pc, #604]	@ (800c674 <_dtoa_r+0x584>)
 800c418:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800c41c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800c420:	f7f4 fa1c 	bl	800085c <__aeabi_ddiv>
 800c424:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c428:	f004 040f 	and.w	r4, r4, #15
 800c42c:	2603      	movs	r6, #3
 800c42e:	4d91      	ldr	r5, [pc, #580]	@ (800c674 <_dtoa_r+0x584>)
 800c430:	b954      	cbnz	r4, 800c448 <_dtoa_r+0x358>
 800c432:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800c436:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c43a:	f7f4 fa0f 	bl	800085c <__aeabi_ddiv>
 800c43e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c442:	e028      	b.n	800c496 <_dtoa_r+0x3a6>
 800c444:	2602      	movs	r6, #2
 800c446:	e7f2      	b.n	800c42e <_dtoa_r+0x33e>
 800c448:	07e1      	lsls	r1, r4, #31
 800c44a:	d508      	bpl.n	800c45e <_dtoa_r+0x36e>
 800c44c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800c450:	e9d5 2300 	ldrd	r2, r3, [r5]
 800c454:	f7f4 f8d8 	bl	8000608 <__aeabi_dmul>
 800c458:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800c45c:	3601      	adds	r6, #1
 800c45e:	1064      	asrs	r4, r4, #1
 800c460:	3508      	adds	r5, #8
 800c462:	e7e5      	b.n	800c430 <_dtoa_r+0x340>
 800c464:	f000 80af 	beq.w	800c5c6 <_dtoa_r+0x4d6>
 800c468:	427c      	negs	r4, r7
 800c46a:	4b81      	ldr	r3, [pc, #516]	@ (800c670 <_dtoa_r+0x580>)
 800c46c:	4d81      	ldr	r5, [pc, #516]	@ (800c674 <_dtoa_r+0x584>)
 800c46e:	f004 020f 	and.w	r2, r4, #15
 800c472:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c476:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c47a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800c47e:	f7f4 f8c3 	bl	8000608 <__aeabi_dmul>
 800c482:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c486:	1124      	asrs	r4, r4, #4
 800c488:	2300      	movs	r3, #0
 800c48a:	2602      	movs	r6, #2
 800c48c:	2c00      	cmp	r4, #0
 800c48e:	f040 808f 	bne.w	800c5b0 <_dtoa_r+0x4c0>
 800c492:	2b00      	cmp	r3, #0
 800c494:	d1d3      	bne.n	800c43e <_dtoa_r+0x34e>
 800c496:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800c498:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800c49c:	2b00      	cmp	r3, #0
 800c49e:	f000 8094 	beq.w	800c5ca <_dtoa_r+0x4da>
 800c4a2:	4b75      	ldr	r3, [pc, #468]	@ (800c678 <_dtoa_r+0x588>)
 800c4a4:	2200      	movs	r2, #0
 800c4a6:	4620      	mov	r0, r4
 800c4a8:	4629      	mov	r1, r5
 800c4aa:	f7f4 fb1f 	bl	8000aec <__aeabi_dcmplt>
 800c4ae:	2800      	cmp	r0, #0
 800c4b0:	f000 808b 	beq.w	800c5ca <_dtoa_r+0x4da>
 800c4b4:	9b03      	ldr	r3, [sp, #12]
 800c4b6:	2b00      	cmp	r3, #0
 800c4b8:	f000 8087 	beq.w	800c5ca <_dtoa_r+0x4da>
 800c4bc:	f1bb 0f00 	cmp.w	fp, #0
 800c4c0:	dd34      	ble.n	800c52c <_dtoa_r+0x43c>
 800c4c2:	4620      	mov	r0, r4
 800c4c4:	4b6d      	ldr	r3, [pc, #436]	@ (800c67c <_dtoa_r+0x58c>)
 800c4c6:	2200      	movs	r2, #0
 800c4c8:	4629      	mov	r1, r5
 800c4ca:	f7f4 f89d 	bl	8000608 <__aeabi_dmul>
 800c4ce:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c4d2:	f107 38ff 	add.w	r8, r7, #4294967295
 800c4d6:	3601      	adds	r6, #1
 800c4d8:	465c      	mov	r4, fp
 800c4da:	4630      	mov	r0, r6
 800c4dc:	f7f4 f82a 	bl	8000534 <__aeabi_i2d>
 800c4e0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c4e4:	f7f4 f890 	bl	8000608 <__aeabi_dmul>
 800c4e8:	4b65      	ldr	r3, [pc, #404]	@ (800c680 <_dtoa_r+0x590>)
 800c4ea:	2200      	movs	r2, #0
 800c4ec:	f7f3 fed6 	bl	800029c <__adddf3>
 800c4f0:	4605      	mov	r5, r0
 800c4f2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800c4f6:	2c00      	cmp	r4, #0
 800c4f8:	d16a      	bne.n	800c5d0 <_dtoa_r+0x4e0>
 800c4fa:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c4fe:	4b61      	ldr	r3, [pc, #388]	@ (800c684 <_dtoa_r+0x594>)
 800c500:	2200      	movs	r2, #0
 800c502:	f7f3 fec9 	bl	8000298 <__aeabi_dsub>
 800c506:	4602      	mov	r2, r0
 800c508:	460b      	mov	r3, r1
 800c50a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800c50e:	462a      	mov	r2, r5
 800c510:	4633      	mov	r3, r6
 800c512:	f7f4 fb09 	bl	8000b28 <__aeabi_dcmpgt>
 800c516:	2800      	cmp	r0, #0
 800c518:	f040 8298 	bne.w	800ca4c <_dtoa_r+0x95c>
 800c51c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c520:	462a      	mov	r2, r5
 800c522:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800c526:	f7f4 fae1 	bl	8000aec <__aeabi_dcmplt>
 800c52a:	bb38      	cbnz	r0, 800c57c <_dtoa_r+0x48c>
 800c52c:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 800c530:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800c534:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800c536:	2b00      	cmp	r3, #0
 800c538:	f2c0 8157 	blt.w	800c7ea <_dtoa_r+0x6fa>
 800c53c:	2f0e      	cmp	r7, #14
 800c53e:	f300 8154 	bgt.w	800c7ea <_dtoa_r+0x6fa>
 800c542:	4b4b      	ldr	r3, [pc, #300]	@ (800c670 <_dtoa_r+0x580>)
 800c544:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800c548:	ed93 7b00 	vldr	d7, [r3]
 800c54c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800c54e:	2b00      	cmp	r3, #0
 800c550:	ed8d 7b00 	vstr	d7, [sp]
 800c554:	f280 80e5 	bge.w	800c722 <_dtoa_r+0x632>
 800c558:	9b03      	ldr	r3, [sp, #12]
 800c55a:	2b00      	cmp	r3, #0
 800c55c:	f300 80e1 	bgt.w	800c722 <_dtoa_r+0x632>
 800c560:	d10c      	bne.n	800c57c <_dtoa_r+0x48c>
 800c562:	4b48      	ldr	r3, [pc, #288]	@ (800c684 <_dtoa_r+0x594>)
 800c564:	2200      	movs	r2, #0
 800c566:	ec51 0b17 	vmov	r0, r1, d7
 800c56a:	f7f4 f84d 	bl	8000608 <__aeabi_dmul>
 800c56e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c572:	f7f4 facf 	bl	8000b14 <__aeabi_dcmpge>
 800c576:	2800      	cmp	r0, #0
 800c578:	f000 8266 	beq.w	800ca48 <_dtoa_r+0x958>
 800c57c:	2400      	movs	r4, #0
 800c57e:	4625      	mov	r5, r4
 800c580:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800c582:	4656      	mov	r6, sl
 800c584:	ea6f 0803 	mvn.w	r8, r3
 800c588:	2700      	movs	r7, #0
 800c58a:	4621      	mov	r1, r4
 800c58c:	4648      	mov	r0, r9
 800c58e:	f000 fcbf 	bl	800cf10 <_Bfree>
 800c592:	2d00      	cmp	r5, #0
 800c594:	f000 80bd 	beq.w	800c712 <_dtoa_r+0x622>
 800c598:	b12f      	cbz	r7, 800c5a6 <_dtoa_r+0x4b6>
 800c59a:	42af      	cmp	r7, r5
 800c59c:	d003      	beq.n	800c5a6 <_dtoa_r+0x4b6>
 800c59e:	4639      	mov	r1, r7
 800c5a0:	4648      	mov	r0, r9
 800c5a2:	f000 fcb5 	bl	800cf10 <_Bfree>
 800c5a6:	4629      	mov	r1, r5
 800c5a8:	4648      	mov	r0, r9
 800c5aa:	f000 fcb1 	bl	800cf10 <_Bfree>
 800c5ae:	e0b0      	b.n	800c712 <_dtoa_r+0x622>
 800c5b0:	07e2      	lsls	r2, r4, #31
 800c5b2:	d505      	bpl.n	800c5c0 <_dtoa_r+0x4d0>
 800c5b4:	e9d5 2300 	ldrd	r2, r3, [r5]
 800c5b8:	f7f4 f826 	bl	8000608 <__aeabi_dmul>
 800c5bc:	3601      	adds	r6, #1
 800c5be:	2301      	movs	r3, #1
 800c5c0:	1064      	asrs	r4, r4, #1
 800c5c2:	3508      	adds	r5, #8
 800c5c4:	e762      	b.n	800c48c <_dtoa_r+0x39c>
 800c5c6:	2602      	movs	r6, #2
 800c5c8:	e765      	b.n	800c496 <_dtoa_r+0x3a6>
 800c5ca:	9c03      	ldr	r4, [sp, #12]
 800c5cc:	46b8      	mov	r8, r7
 800c5ce:	e784      	b.n	800c4da <_dtoa_r+0x3ea>
 800c5d0:	4b27      	ldr	r3, [pc, #156]	@ (800c670 <_dtoa_r+0x580>)
 800c5d2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800c5d4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800c5d8:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800c5dc:	4454      	add	r4, sl
 800c5de:	2900      	cmp	r1, #0
 800c5e0:	d054      	beq.n	800c68c <_dtoa_r+0x59c>
 800c5e2:	4929      	ldr	r1, [pc, #164]	@ (800c688 <_dtoa_r+0x598>)
 800c5e4:	2000      	movs	r0, #0
 800c5e6:	f7f4 f939 	bl	800085c <__aeabi_ddiv>
 800c5ea:	4633      	mov	r3, r6
 800c5ec:	462a      	mov	r2, r5
 800c5ee:	f7f3 fe53 	bl	8000298 <__aeabi_dsub>
 800c5f2:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800c5f6:	4656      	mov	r6, sl
 800c5f8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c5fc:	f7f4 fab4 	bl	8000b68 <__aeabi_d2iz>
 800c600:	4605      	mov	r5, r0
 800c602:	f7f3 ff97 	bl	8000534 <__aeabi_i2d>
 800c606:	4602      	mov	r2, r0
 800c608:	460b      	mov	r3, r1
 800c60a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c60e:	f7f3 fe43 	bl	8000298 <__aeabi_dsub>
 800c612:	3530      	adds	r5, #48	@ 0x30
 800c614:	4602      	mov	r2, r0
 800c616:	460b      	mov	r3, r1
 800c618:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800c61c:	f806 5b01 	strb.w	r5, [r6], #1
 800c620:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800c624:	f7f4 fa62 	bl	8000aec <__aeabi_dcmplt>
 800c628:	2800      	cmp	r0, #0
 800c62a:	d172      	bne.n	800c712 <_dtoa_r+0x622>
 800c62c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c630:	4911      	ldr	r1, [pc, #68]	@ (800c678 <_dtoa_r+0x588>)
 800c632:	2000      	movs	r0, #0
 800c634:	f7f3 fe30 	bl	8000298 <__aeabi_dsub>
 800c638:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800c63c:	f7f4 fa56 	bl	8000aec <__aeabi_dcmplt>
 800c640:	2800      	cmp	r0, #0
 800c642:	f040 80b4 	bne.w	800c7ae <_dtoa_r+0x6be>
 800c646:	42a6      	cmp	r6, r4
 800c648:	f43f af70 	beq.w	800c52c <_dtoa_r+0x43c>
 800c64c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800c650:	4b0a      	ldr	r3, [pc, #40]	@ (800c67c <_dtoa_r+0x58c>)
 800c652:	2200      	movs	r2, #0
 800c654:	f7f3 ffd8 	bl	8000608 <__aeabi_dmul>
 800c658:	4b08      	ldr	r3, [pc, #32]	@ (800c67c <_dtoa_r+0x58c>)
 800c65a:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800c65e:	2200      	movs	r2, #0
 800c660:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c664:	f7f3 ffd0 	bl	8000608 <__aeabi_dmul>
 800c668:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c66c:	e7c4      	b.n	800c5f8 <_dtoa_r+0x508>
 800c66e:	bf00      	nop
 800c670:	08010e68 	.word	0x08010e68
 800c674:	08010e40 	.word	0x08010e40
 800c678:	3ff00000 	.word	0x3ff00000
 800c67c:	40240000 	.word	0x40240000
 800c680:	401c0000 	.word	0x401c0000
 800c684:	40140000 	.word	0x40140000
 800c688:	3fe00000 	.word	0x3fe00000
 800c68c:	4631      	mov	r1, r6
 800c68e:	4628      	mov	r0, r5
 800c690:	f7f3 ffba 	bl	8000608 <__aeabi_dmul>
 800c694:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800c698:	9413      	str	r4, [sp, #76]	@ 0x4c
 800c69a:	4656      	mov	r6, sl
 800c69c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c6a0:	f7f4 fa62 	bl	8000b68 <__aeabi_d2iz>
 800c6a4:	4605      	mov	r5, r0
 800c6a6:	f7f3 ff45 	bl	8000534 <__aeabi_i2d>
 800c6aa:	4602      	mov	r2, r0
 800c6ac:	460b      	mov	r3, r1
 800c6ae:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c6b2:	f7f3 fdf1 	bl	8000298 <__aeabi_dsub>
 800c6b6:	3530      	adds	r5, #48	@ 0x30
 800c6b8:	f806 5b01 	strb.w	r5, [r6], #1
 800c6bc:	4602      	mov	r2, r0
 800c6be:	460b      	mov	r3, r1
 800c6c0:	42a6      	cmp	r6, r4
 800c6c2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800c6c6:	f04f 0200 	mov.w	r2, #0
 800c6ca:	d124      	bne.n	800c716 <_dtoa_r+0x626>
 800c6cc:	4baf      	ldr	r3, [pc, #700]	@ (800c98c <_dtoa_r+0x89c>)
 800c6ce:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800c6d2:	f7f3 fde3 	bl	800029c <__adddf3>
 800c6d6:	4602      	mov	r2, r0
 800c6d8:	460b      	mov	r3, r1
 800c6da:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c6de:	f7f4 fa23 	bl	8000b28 <__aeabi_dcmpgt>
 800c6e2:	2800      	cmp	r0, #0
 800c6e4:	d163      	bne.n	800c7ae <_dtoa_r+0x6be>
 800c6e6:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800c6ea:	49a8      	ldr	r1, [pc, #672]	@ (800c98c <_dtoa_r+0x89c>)
 800c6ec:	2000      	movs	r0, #0
 800c6ee:	f7f3 fdd3 	bl	8000298 <__aeabi_dsub>
 800c6f2:	4602      	mov	r2, r0
 800c6f4:	460b      	mov	r3, r1
 800c6f6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c6fa:	f7f4 f9f7 	bl	8000aec <__aeabi_dcmplt>
 800c6fe:	2800      	cmp	r0, #0
 800c700:	f43f af14 	beq.w	800c52c <_dtoa_r+0x43c>
 800c704:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800c706:	1e73      	subs	r3, r6, #1
 800c708:	9313      	str	r3, [sp, #76]	@ 0x4c
 800c70a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800c70e:	2b30      	cmp	r3, #48	@ 0x30
 800c710:	d0f8      	beq.n	800c704 <_dtoa_r+0x614>
 800c712:	4647      	mov	r7, r8
 800c714:	e03b      	b.n	800c78e <_dtoa_r+0x69e>
 800c716:	4b9e      	ldr	r3, [pc, #632]	@ (800c990 <_dtoa_r+0x8a0>)
 800c718:	f7f3 ff76 	bl	8000608 <__aeabi_dmul>
 800c71c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c720:	e7bc      	b.n	800c69c <_dtoa_r+0x5ac>
 800c722:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800c726:	4656      	mov	r6, sl
 800c728:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c72c:	4620      	mov	r0, r4
 800c72e:	4629      	mov	r1, r5
 800c730:	f7f4 f894 	bl	800085c <__aeabi_ddiv>
 800c734:	f7f4 fa18 	bl	8000b68 <__aeabi_d2iz>
 800c738:	4680      	mov	r8, r0
 800c73a:	f7f3 fefb 	bl	8000534 <__aeabi_i2d>
 800c73e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c742:	f7f3 ff61 	bl	8000608 <__aeabi_dmul>
 800c746:	4602      	mov	r2, r0
 800c748:	460b      	mov	r3, r1
 800c74a:	4620      	mov	r0, r4
 800c74c:	4629      	mov	r1, r5
 800c74e:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800c752:	f7f3 fda1 	bl	8000298 <__aeabi_dsub>
 800c756:	f806 4b01 	strb.w	r4, [r6], #1
 800c75a:	9d03      	ldr	r5, [sp, #12]
 800c75c:	eba6 040a 	sub.w	r4, r6, sl
 800c760:	42a5      	cmp	r5, r4
 800c762:	4602      	mov	r2, r0
 800c764:	460b      	mov	r3, r1
 800c766:	d133      	bne.n	800c7d0 <_dtoa_r+0x6e0>
 800c768:	f7f3 fd98 	bl	800029c <__adddf3>
 800c76c:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c770:	4604      	mov	r4, r0
 800c772:	460d      	mov	r5, r1
 800c774:	f7f4 f9d8 	bl	8000b28 <__aeabi_dcmpgt>
 800c778:	b9c0      	cbnz	r0, 800c7ac <_dtoa_r+0x6bc>
 800c77a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c77e:	4620      	mov	r0, r4
 800c780:	4629      	mov	r1, r5
 800c782:	f7f4 f9a9 	bl	8000ad8 <__aeabi_dcmpeq>
 800c786:	b110      	cbz	r0, 800c78e <_dtoa_r+0x69e>
 800c788:	f018 0f01 	tst.w	r8, #1
 800c78c:	d10e      	bne.n	800c7ac <_dtoa_r+0x6bc>
 800c78e:	9902      	ldr	r1, [sp, #8]
 800c790:	4648      	mov	r0, r9
 800c792:	f000 fbbd 	bl	800cf10 <_Bfree>
 800c796:	2300      	movs	r3, #0
 800c798:	7033      	strb	r3, [r6, #0]
 800c79a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800c79c:	3701      	adds	r7, #1
 800c79e:	601f      	str	r7, [r3, #0]
 800c7a0:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800c7a2:	2b00      	cmp	r3, #0
 800c7a4:	f000 824b 	beq.w	800cc3e <_dtoa_r+0xb4e>
 800c7a8:	601e      	str	r6, [r3, #0]
 800c7aa:	e248      	b.n	800cc3e <_dtoa_r+0xb4e>
 800c7ac:	46b8      	mov	r8, r7
 800c7ae:	4633      	mov	r3, r6
 800c7b0:	461e      	mov	r6, r3
 800c7b2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c7b6:	2a39      	cmp	r2, #57	@ 0x39
 800c7b8:	d106      	bne.n	800c7c8 <_dtoa_r+0x6d8>
 800c7ba:	459a      	cmp	sl, r3
 800c7bc:	d1f8      	bne.n	800c7b0 <_dtoa_r+0x6c0>
 800c7be:	2230      	movs	r2, #48	@ 0x30
 800c7c0:	f108 0801 	add.w	r8, r8, #1
 800c7c4:	f88a 2000 	strb.w	r2, [sl]
 800c7c8:	781a      	ldrb	r2, [r3, #0]
 800c7ca:	3201      	adds	r2, #1
 800c7cc:	701a      	strb	r2, [r3, #0]
 800c7ce:	e7a0      	b.n	800c712 <_dtoa_r+0x622>
 800c7d0:	4b6f      	ldr	r3, [pc, #444]	@ (800c990 <_dtoa_r+0x8a0>)
 800c7d2:	2200      	movs	r2, #0
 800c7d4:	f7f3 ff18 	bl	8000608 <__aeabi_dmul>
 800c7d8:	2200      	movs	r2, #0
 800c7da:	2300      	movs	r3, #0
 800c7dc:	4604      	mov	r4, r0
 800c7de:	460d      	mov	r5, r1
 800c7e0:	f7f4 f97a 	bl	8000ad8 <__aeabi_dcmpeq>
 800c7e4:	2800      	cmp	r0, #0
 800c7e6:	d09f      	beq.n	800c728 <_dtoa_r+0x638>
 800c7e8:	e7d1      	b.n	800c78e <_dtoa_r+0x69e>
 800c7ea:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c7ec:	2a00      	cmp	r2, #0
 800c7ee:	f000 80ea 	beq.w	800c9c6 <_dtoa_r+0x8d6>
 800c7f2:	9a07      	ldr	r2, [sp, #28]
 800c7f4:	2a01      	cmp	r2, #1
 800c7f6:	f300 80cd 	bgt.w	800c994 <_dtoa_r+0x8a4>
 800c7fa:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800c7fc:	2a00      	cmp	r2, #0
 800c7fe:	f000 80c1 	beq.w	800c984 <_dtoa_r+0x894>
 800c802:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800c806:	9c08      	ldr	r4, [sp, #32]
 800c808:	9e00      	ldr	r6, [sp, #0]
 800c80a:	9a00      	ldr	r2, [sp, #0]
 800c80c:	441a      	add	r2, r3
 800c80e:	9200      	str	r2, [sp, #0]
 800c810:	9a06      	ldr	r2, [sp, #24]
 800c812:	2101      	movs	r1, #1
 800c814:	441a      	add	r2, r3
 800c816:	4648      	mov	r0, r9
 800c818:	9206      	str	r2, [sp, #24]
 800c81a:	f000 fc77 	bl	800d10c <__i2b>
 800c81e:	4605      	mov	r5, r0
 800c820:	b166      	cbz	r6, 800c83c <_dtoa_r+0x74c>
 800c822:	9b06      	ldr	r3, [sp, #24]
 800c824:	2b00      	cmp	r3, #0
 800c826:	dd09      	ble.n	800c83c <_dtoa_r+0x74c>
 800c828:	42b3      	cmp	r3, r6
 800c82a:	9a00      	ldr	r2, [sp, #0]
 800c82c:	bfa8      	it	ge
 800c82e:	4633      	movge	r3, r6
 800c830:	1ad2      	subs	r2, r2, r3
 800c832:	9200      	str	r2, [sp, #0]
 800c834:	9a06      	ldr	r2, [sp, #24]
 800c836:	1af6      	subs	r6, r6, r3
 800c838:	1ad3      	subs	r3, r2, r3
 800c83a:	9306      	str	r3, [sp, #24]
 800c83c:	9b08      	ldr	r3, [sp, #32]
 800c83e:	b30b      	cbz	r3, 800c884 <_dtoa_r+0x794>
 800c840:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c842:	2b00      	cmp	r3, #0
 800c844:	f000 80c6 	beq.w	800c9d4 <_dtoa_r+0x8e4>
 800c848:	2c00      	cmp	r4, #0
 800c84a:	f000 80c0 	beq.w	800c9ce <_dtoa_r+0x8de>
 800c84e:	4629      	mov	r1, r5
 800c850:	4622      	mov	r2, r4
 800c852:	4648      	mov	r0, r9
 800c854:	f000 fd12 	bl	800d27c <__pow5mult>
 800c858:	9a02      	ldr	r2, [sp, #8]
 800c85a:	4601      	mov	r1, r0
 800c85c:	4605      	mov	r5, r0
 800c85e:	4648      	mov	r0, r9
 800c860:	f000 fc6a 	bl	800d138 <__multiply>
 800c864:	9902      	ldr	r1, [sp, #8]
 800c866:	4680      	mov	r8, r0
 800c868:	4648      	mov	r0, r9
 800c86a:	f000 fb51 	bl	800cf10 <_Bfree>
 800c86e:	9b08      	ldr	r3, [sp, #32]
 800c870:	1b1b      	subs	r3, r3, r4
 800c872:	9308      	str	r3, [sp, #32]
 800c874:	f000 80b1 	beq.w	800c9da <_dtoa_r+0x8ea>
 800c878:	9a08      	ldr	r2, [sp, #32]
 800c87a:	4641      	mov	r1, r8
 800c87c:	4648      	mov	r0, r9
 800c87e:	f000 fcfd 	bl	800d27c <__pow5mult>
 800c882:	9002      	str	r0, [sp, #8]
 800c884:	2101      	movs	r1, #1
 800c886:	4648      	mov	r0, r9
 800c888:	f000 fc40 	bl	800d10c <__i2b>
 800c88c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800c88e:	4604      	mov	r4, r0
 800c890:	2b00      	cmp	r3, #0
 800c892:	f000 81d8 	beq.w	800cc46 <_dtoa_r+0xb56>
 800c896:	461a      	mov	r2, r3
 800c898:	4601      	mov	r1, r0
 800c89a:	4648      	mov	r0, r9
 800c89c:	f000 fcee 	bl	800d27c <__pow5mult>
 800c8a0:	9b07      	ldr	r3, [sp, #28]
 800c8a2:	2b01      	cmp	r3, #1
 800c8a4:	4604      	mov	r4, r0
 800c8a6:	f300 809f 	bgt.w	800c9e8 <_dtoa_r+0x8f8>
 800c8aa:	9b04      	ldr	r3, [sp, #16]
 800c8ac:	2b00      	cmp	r3, #0
 800c8ae:	f040 8097 	bne.w	800c9e0 <_dtoa_r+0x8f0>
 800c8b2:	9b05      	ldr	r3, [sp, #20]
 800c8b4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c8b8:	2b00      	cmp	r3, #0
 800c8ba:	f040 8093 	bne.w	800c9e4 <_dtoa_r+0x8f4>
 800c8be:	9b05      	ldr	r3, [sp, #20]
 800c8c0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800c8c4:	0d1b      	lsrs	r3, r3, #20
 800c8c6:	051b      	lsls	r3, r3, #20
 800c8c8:	b133      	cbz	r3, 800c8d8 <_dtoa_r+0x7e8>
 800c8ca:	9b00      	ldr	r3, [sp, #0]
 800c8cc:	3301      	adds	r3, #1
 800c8ce:	9300      	str	r3, [sp, #0]
 800c8d0:	9b06      	ldr	r3, [sp, #24]
 800c8d2:	3301      	adds	r3, #1
 800c8d4:	9306      	str	r3, [sp, #24]
 800c8d6:	2301      	movs	r3, #1
 800c8d8:	9308      	str	r3, [sp, #32]
 800c8da:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800c8dc:	2b00      	cmp	r3, #0
 800c8de:	f000 81b8 	beq.w	800cc52 <_dtoa_r+0xb62>
 800c8e2:	6923      	ldr	r3, [r4, #16]
 800c8e4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800c8e8:	6918      	ldr	r0, [r3, #16]
 800c8ea:	f000 fbc3 	bl	800d074 <__hi0bits>
 800c8ee:	f1c0 0020 	rsb	r0, r0, #32
 800c8f2:	9b06      	ldr	r3, [sp, #24]
 800c8f4:	4418      	add	r0, r3
 800c8f6:	f010 001f 	ands.w	r0, r0, #31
 800c8fa:	f000 8082 	beq.w	800ca02 <_dtoa_r+0x912>
 800c8fe:	f1c0 0320 	rsb	r3, r0, #32
 800c902:	2b04      	cmp	r3, #4
 800c904:	dd73      	ble.n	800c9ee <_dtoa_r+0x8fe>
 800c906:	9b00      	ldr	r3, [sp, #0]
 800c908:	f1c0 001c 	rsb	r0, r0, #28
 800c90c:	4403      	add	r3, r0
 800c90e:	9300      	str	r3, [sp, #0]
 800c910:	9b06      	ldr	r3, [sp, #24]
 800c912:	4403      	add	r3, r0
 800c914:	4406      	add	r6, r0
 800c916:	9306      	str	r3, [sp, #24]
 800c918:	9b00      	ldr	r3, [sp, #0]
 800c91a:	2b00      	cmp	r3, #0
 800c91c:	dd05      	ble.n	800c92a <_dtoa_r+0x83a>
 800c91e:	9902      	ldr	r1, [sp, #8]
 800c920:	461a      	mov	r2, r3
 800c922:	4648      	mov	r0, r9
 800c924:	f000 fd04 	bl	800d330 <__lshift>
 800c928:	9002      	str	r0, [sp, #8]
 800c92a:	9b06      	ldr	r3, [sp, #24]
 800c92c:	2b00      	cmp	r3, #0
 800c92e:	dd05      	ble.n	800c93c <_dtoa_r+0x84c>
 800c930:	4621      	mov	r1, r4
 800c932:	461a      	mov	r2, r3
 800c934:	4648      	mov	r0, r9
 800c936:	f000 fcfb 	bl	800d330 <__lshift>
 800c93a:	4604      	mov	r4, r0
 800c93c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800c93e:	2b00      	cmp	r3, #0
 800c940:	d061      	beq.n	800ca06 <_dtoa_r+0x916>
 800c942:	9802      	ldr	r0, [sp, #8]
 800c944:	4621      	mov	r1, r4
 800c946:	f000 fd5f 	bl	800d408 <__mcmp>
 800c94a:	2800      	cmp	r0, #0
 800c94c:	da5b      	bge.n	800ca06 <_dtoa_r+0x916>
 800c94e:	2300      	movs	r3, #0
 800c950:	9902      	ldr	r1, [sp, #8]
 800c952:	220a      	movs	r2, #10
 800c954:	4648      	mov	r0, r9
 800c956:	f000 fafd 	bl	800cf54 <__multadd>
 800c95a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c95c:	9002      	str	r0, [sp, #8]
 800c95e:	f107 38ff 	add.w	r8, r7, #4294967295
 800c962:	2b00      	cmp	r3, #0
 800c964:	f000 8177 	beq.w	800cc56 <_dtoa_r+0xb66>
 800c968:	4629      	mov	r1, r5
 800c96a:	2300      	movs	r3, #0
 800c96c:	220a      	movs	r2, #10
 800c96e:	4648      	mov	r0, r9
 800c970:	f000 faf0 	bl	800cf54 <__multadd>
 800c974:	f1bb 0f00 	cmp.w	fp, #0
 800c978:	4605      	mov	r5, r0
 800c97a:	dc6f      	bgt.n	800ca5c <_dtoa_r+0x96c>
 800c97c:	9b07      	ldr	r3, [sp, #28]
 800c97e:	2b02      	cmp	r3, #2
 800c980:	dc49      	bgt.n	800ca16 <_dtoa_r+0x926>
 800c982:	e06b      	b.n	800ca5c <_dtoa_r+0x96c>
 800c984:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800c986:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800c98a:	e73c      	b.n	800c806 <_dtoa_r+0x716>
 800c98c:	3fe00000 	.word	0x3fe00000
 800c990:	40240000 	.word	0x40240000
 800c994:	9b03      	ldr	r3, [sp, #12]
 800c996:	1e5c      	subs	r4, r3, #1
 800c998:	9b08      	ldr	r3, [sp, #32]
 800c99a:	42a3      	cmp	r3, r4
 800c99c:	db09      	blt.n	800c9b2 <_dtoa_r+0x8c2>
 800c99e:	1b1c      	subs	r4, r3, r4
 800c9a0:	9b03      	ldr	r3, [sp, #12]
 800c9a2:	2b00      	cmp	r3, #0
 800c9a4:	f6bf af30 	bge.w	800c808 <_dtoa_r+0x718>
 800c9a8:	9b00      	ldr	r3, [sp, #0]
 800c9aa:	9a03      	ldr	r2, [sp, #12]
 800c9ac:	1a9e      	subs	r6, r3, r2
 800c9ae:	2300      	movs	r3, #0
 800c9b0:	e72b      	b.n	800c80a <_dtoa_r+0x71a>
 800c9b2:	9b08      	ldr	r3, [sp, #32]
 800c9b4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800c9b6:	9408      	str	r4, [sp, #32]
 800c9b8:	1ae3      	subs	r3, r4, r3
 800c9ba:	441a      	add	r2, r3
 800c9bc:	9e00      	ldr	r6, [sp, #0]
 800c9be:	9b03      	ldr	r3, [sp, #12]
 800c9c0:	920d      	str	r2, [sp, #52]	@ 0x34
 800c9c2:	2400      	movs	r4, #0
 800c9c4:	e721      	b.n	800c80a <_dtoa_r+0x71a>
 800c9c6:	9c08      	ldr	r4, [sp, #32]
 800c9c8:	9e00      	ldr	r6, [sp, #0]
 800c9ca:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 800c9cc:	e728      	b.n	800c820 <_dtoa_r+0x730>
 800c9ce:	f8dd 8008 	ldr.w	r8, [sp, #8]
 800c9d2:	e751      	b.n	800c878 <_dtoa_r+0x788>
 800c9d4:	9a08      	ldr	r2, [sp, #32]
 800c9d6:	9902      	ldr	r1, [sp, #8]
 800c9d8:	e750      	b.n	800c87c <_dtoa_r+0x78c>
 800c9da:	f8cd 8008 	str.w	r8, [sp, #8]
 800c9de:	e751      	b.n	800c884 <_dtoa_r+0x794>
 800c9e0:	2300      	movs	r3, #0
 800c9e2:	e779      	b.n	800c8d8 <_dtoa_r+0x7e8>
 800c9e4:	9b04      	ldr	r3, [sp, #16]
 800c9e6:	e777      	b.n	800c8d8 <_dtoa_r+0x7e8>
 800c9e8:	2300      	movs	r3, #0
 800c9ea:	9308      	str	r3, [sp, #32]
 800c9ec:	e779      	b.n	800c8e2 <_dtoa_r+0x7f2>
 800c9ee:	d093      	beq.n	800c918 <_dtoa_r+0x828>
 800c9f0:	9a00      	ldr	r2, [sp, #0]
 800c9f2:	331c      	adds	r3, #28
 800c9f4:	441a      	add	r2, r3
 800c9f6:	9200      	str	r2, [sp, #0]
 800c9f8:	9a06      	ldr	r2, [sp, #24]
 800c9fa:	441a      	add	r2, r3
 800c9fc:	441e      	add	r6, r3
 800c9fe:	9206      	str	r2, [sp, #24]
 800ca00:	e78a      	b.n	800c918 <_dtoa_r+0x828>
 800ca02:	4603      	mov	r3, r0
 800ca04:	e7f4      	b.n	800c9f0 <_dtoa_r+0x900>
 800ca06:	9b03      	ldr	r3, [sp, #12]
 800ca08:	2b00      	cmp	r3, #0
 800ca0a:	46b8      	mov	r8, r7
 800ca0c:	dc20      	bgt.n	800ca50 <_dtoa_r+0x960>
 800ca0e:	469b      	mov	fp, r3
 800ca10:	9b07      	ldr	r3, [sp, #28]
 800ca12:	2b02      	cmp	r3, #2
 800ca14:	dd1e      	ble.n	800ca54 <_dtoa_r+0x964>
 800ca16:	f1bb 0f00 	cmp.w	fp, #0
 800ca1a:	f47f adb1 	bne.w	800c580 <_dtoa_r+0x490>
 800ca1e:	4621      	mov	r1, r4
 800ca20:	465b      	mov	r3, fp
 800ca22:	2205      	movs	r2, #5
 800ca24:	4648      	mov	r0, r9
 800ca26:	f000 fa95 	bl	800cf54 <__multadd>
 800ca2a:	4601      	mov	r1, r0
 800ca2c:	4604      	mov	r4, r0
 800ca2e:	9802      	ldr	r0, [sp, #8]
 800ca30:	f000 fcea 	bl	800d408 <__mcmp>
 800ca34:	2800      	cmp	r0, #0
 800ca36:	f77f ada3 	ble.w	800c580 <_dtoa_r+0x490>
 800ca3a:	4656      	mov	r6, sl
 800ca3c:	2331      	movs	r3, #49	@ 0x31
 800ca3e:	f806 3b01 	strb.w	r3, [r6], #1
 800ca42:	f108 0801 	add.w	r8, r8, #1
 800ca46:	e59f      	b.n	800c588 <_dtoa_r+0x498>
 800ca48:	9c03      	ldr	r4, [sp, #12]
 800ca4a:	46b8      	mov	r8, r7
 800ca4c:	4625      	mov	r5, r4
 800ca4e:	e7f4      	b.n	800ca3a <_dtoa_r+0x94a>
 800ca50:	f8dd b00c 	ldr.w	fp, [sp, #12]
 800ca54:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ca56:	2b00      	cmp	r3, #0
 800ca58:	f000 8101 	beq.w	800cc5e <_dtoa_r+0xb6e>
 800ca5c:	2e00      	cmp	r6, #0
 800ca5e:	dd05      	ble.n	800ca6c <_dtoa_r+0x97c>
 800ca60:	4629      	mov	r1, r5
 800ca62:	4632      	mov	r2, r6
 800ca64:	4648      	mov	r0, r9
 800ca66:	f000 fc63 	bl	800d330 <__lshift>
 800ca6a:	4605      	mov	r5, r0
 800ca6c:	9b08      	ldr	r3, [sp, #32]
 800ca6e:	2b00      	cmp	r3, #0
 800ca70:	d05c      	beq.n	800cb2c <_dtoa_r+0xa3c>
 800ca72:	6869      	ldr	r1, [r5, #4]
 800ca74:	4648      	mov	r0, r9
 800ca76:	f000 fa0b 	bl	800ce90 <_Balloc>
 800ca7a:	4606      	mov	r6, r0
 800ca7c:	b928      	cbnz	r0, 800ca8a <_dtoa_r+0x99a>
 800ca7e:	4b82      	ldr	r3, [pc, #520]	@ (800cc88 <_dtoa_r+0xb98>)
 800ca80:	4602      	mov	r2, r0
 800ca82:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800ca86:	f7ff bb4a 	b.w	800c11e <_dtoa_r+0x2e>
 800ca8a:	692a      	ldr	r2, [r5, #16]
 800ca8c:	3202      	adds	r2, #2
 800ca8e:	0092      	lsls	r2, r2, #2
 800ca90:	f105 010c 	add.w	r1, r5, #12
 800ca94:	300c      	adds	r0, #12
 800ca96:	f7ff fa6e 	bl	800bf76 <memcpy>
 800ca9a:	2201      	movs	r2, #1
 800ca9c:	4631      	mov	r1, r6
 800ca9e:	4648      	mov	r0, r9
 800caa0:	f000 fc46 	bl	800d330 <__lshift>
 800caa4:	f10a 0301 	add.w	r3, sl, #1
 800caa8:	9300      	str	r3, [sp, #0]
 800caaa:	eb0a 030b 	add.w	r3, sl, fp
 800caae:	9308      	str	r3, [sp, #32]
 800cab0:	9b04      	ldr	r3, [sp, #16]
 800cab2:	f003 0301 	and.w	r3, r3, #1
 800cab6:	462f      	mov	r7, r5
 800cab8:	9306      	str	r3, [sp, #24]
 800caba:	4605      	mov	r5, r0
 800cabc:	9b00      	ldr	r3, [sp, #0]
 800cabe:	9802      	ldr	r0, [sp, #8]
 800cac0:	4621      	mov	r1, r4
 800cac2:	f103 3bff 	add.w	fp, r3, #4294967295
 800cac6:	f7ff fa89 	bl	800bfdc <quorem>
 800caca:	4603      	mov	r3, r0
 800cacc:	3330      	adds	r3, #48	@ 0x30
 800cace:	9003      	str	r0, [sp, #12]
 800cad0:	4639      	mov	r1, r7
 800cad2:	9802      	ldr	r0, [sp, #8]
 800cad4:	9309      	str	r3, [sp, #36]	@ 0x24
 800cad6:	f000 fc97 	bl	800d408 <__mcmp>
 800cada:	462a      	mov	r2, r5
 800cadc:	9004      	str	r0, [sp, #16]
 800cade:	4621      	mov	r1, r4
 800cae0:	4648      	mov	r0, r9
 800cae2:	f000 fcad 	bl	800d440 <__mdiff>
 800cae6:	68c2      	ldr	r2, [r0, #12]
 800cae8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800caea:	4606      	mov	r6, r0
 800caec:	bb02      	cbnz	r2, 800cb30 <_dtoa_r+0xa40>
 800caee:	4601      	mov	r1, r0
 800caf0:	9802      	ldr	r0, [sp, #8]
 800caf2:	f000 fc89 	bl	800d408 <__mcmp>
 800caf6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800caf8:	4602      	mov	r2, r0
 800cafa:	4631      	mov	r1, r6
 800cafc:	4648      	mov	r0, r9
 800cafe:	920c      	str	r2, [sp, #48]	@ 0x30
 800cb00:	9309      	str	r3, [sp, #36]	@ 0x24
 800cb02:	f000 fa05 	bl	800cf10 <_Bfree>
 800cb06:	9b07      	ldr	r3, [sp, #28]
 800cb08:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800cb0a:	9e00      	ldr	r6, [sp, #0]
 800cb0c:	ea42 0103 	orr.w	r1, r2, r3
 800cb10:	9b06      	ldr	r3, [sp, #24]
 800cb12:	4319      	orrs	r1, r3
 800cb14:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cb16:	d10d      	bne.n	800cb34 <_dtoa_r+0xa44>
 800cb18:	2b39      	cmp	r3, #57	@ 0x39
 800cb1a:	d027      	beq.n	800cb6c <_dtoa_r+0xa7c>
 800cb1c:	9a04      	ldr	r2, [sp, #16]
 800cb1e:	2a00      	cmp	r2, #0
 800cb20:	dd01      	ble.n	800cb26 <_dtoa_r+0xa36>
 800cb22:	9b03      	ldr	r3, [sp, #12]
 800cb24:	3331      	adds	r3, #49	@ 0x31
 800cb26:	f88b 3000 	strb.w	r3, [fp]
 800cb2a:	e52e      	b.n	800c58a <_dtoa_r+0x49a>
 800cb2c:	4628      	mov	r0, r5
 800cb2e:	e7b9      	b.n	800caa4 <_dtoa_r+0x9b4>
 800cb30:	2201      	movs	r2, #1
 800cb32:	e7e2      	b.n	800cafa <_dtoa_r+0xa0a>
 800cb34:	9904      	ldr	r1, [sp, #16]
 800cb36:	2900      	cmp	r1, #0
 800cb38:	db04      	blt.n	800cb44 <_dtoa_r+0xa54>
 800cb3a:	9807      	ldr	r0, [sp, #28]
 800cb3c:	4301      	orrs	r1, r0
 800cb3e:	9806      	ldr	r0, [sp, #24]
 800cb40:	4301      	orrs	r1, r0
 800cb42:	d120      	bne.n	800cb86 <_dtoa_r+0xa96>
 800cb44:	2a00      	cmp	r2, #0
 800cb46:	ddee      	ble.n	800cb26 <_dtoa_r+0xa36>
 800cb48:	9902      	ldr	r1, [sp, #8]
 800cb4a:	9300      	str	r3, [sp, #0]
 800cb4c:	2201      	movs	r2, #1
 800cb4e:	4648      	mov	r0, r9
 800cb50:	f000 fbee 	bl	800d330 <__lshift>
 800cb54:	4621      	mov	r1, r4
 800cb56:	9002      	str	r0, [sp, #8]
 800cb58:	f000 fc56 	bl	800d408 <__mcmp>
 800cb5c:	2800      	cmp	r0, #0
 800cb5e:	9b00      	ldr	r3, [sp, #0]
 800cb60:	dc02      	bgt.n	800cb68 <_dtoa_r+0xa78>
 800cb62:	d1e0      	bne.n	800cb26 <_dtoa_r+0xa36>
 800cb64:	07da      	lsls	r2, r3, #31
 800cb66:	d5de      	bpl.n	800cb26 <_dtoa_r+0xa36>
 800cb68:	2b39      	cmp	r3, #57	@ 0x39
 800cb6a:	d1da      	bne.n	800cb22 <_dtoa_r+0xa32>
 800cb6c:	2339      	movs	r3, #57	@ 0x39
 800cb6e:	f88b 3000 	strb.w	r3, [fp]
 800cb72:	4633      	mov	r3, r6
 800cb74:	461e      	mov	r6, r3
 800cb76:	3b01      	subs	r3, #1
 800cb78:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800cb7c:	2a39      	cmp	r2, #57	@ 0x39
 800cb7e:	d04e      	beq.n	800cc1e <_dtoa_r+0xb2e>
 800cb80:	3201      	adds	r2, #1
 800cb82:	701a      	strb	r2, [r3, #0]
 800cb84:	e501      	b.n	800c58a <_dtoa_r+0x49a>
 800cb86:	2a00      	cmp	r2, #0
 800cb88:	dd03      	ble.n	800cb92 <_dtoa_r+0xaa2>
 800cb8a:	2b39      	cmp	r3, #57	@ 0x39
 800cb8c:	d0ee      	beq.n	800cb6c <_dtoa_r+0xa7c>
 800cb8e:	3301      	adds	r3, #1
 800cb90:	e7c9      	b.n	800cb26 <_dtoa_r+0xa36>
 800cb92:	9a00      	ldr	r2, [sp, #0]
 800cb94:	9908      	ldr	r1, [sp, #32]
 800cb96:	f802 3c01 	strb.w	r3, [r2, #-1]
 800cb9a:	428a      	cmp	r2, r1
 800cb9c:	d028      	beq.n	800cbf0 <_dtoa_r+0xb00>
 800cb9e:	9902      	ldr	r1, [sp, #8]
 800cba0:	2300      	movs	r3, #0
 800cba2:	220a      	movs	r2, #10
 800cba4:	4648      	mov	r0, r9
 800cba6:	f000 f9d5 	bl	800cf54 <__multadd>
 800cbaa:	42af      	cmp	r7, r5
 800cbac:	9002      	str	r0, [sp, #8]
 800cbae:	f04f 0300 	mov.w	r3, #0
 800cbb2:	f04f 020a 	mov.w	r2, #10
 800cbb6:	4639      	mov	r1, r7
 800cbb8:	4648      	mov	r0, r9
 800cbba:	d107      	bne.n	800cbcc <_dtoa_r+0xadc>
 800cbbc:	f000 f9ca 	bl	800cf54 <__multadd>
 800cbc0:	4607      	mov	r7, r0
 800cbc2:	4605      	mov	r5, r0
 800cbc4:	9b00      	ldr	r3, [sp, #0]
 800cbc6:	3301      	adds	r3, #1
 800cbc8:	9300      	str	r3, [sp, #0]
 800cbca:	e777      	b.n	800cabc <_dtoa_r+0x9cc>
 800cbcc:	f000 f9c2 	bl	800cf54 <__multadd>
 800cbd0:	4629      	mov	r1, r5
 800cbd2:	4607      	mov	r7, r0
 800cbd4:	2300      	movs	r3, #0
 800cbd6:	220a      	movs	r2, #10
 800cbd8:	4648      	mov	r0, r9
 800cbda:	f000 f9bb 	bl	800cf54 <__multadd>
 800cbde:	4605      	mov	r5, r0
 800cbe0:	e7f0      	b.n	800cbc4 <_dtoa_r+0xad4>
 800cbe2:	f1bb 0f00 	cmp.w	fp, #0
 800cbe6:	bfcc      	ite	gt
 800cbe8:	465e      	movgt	r6, fp
 800cbea:	2601      	movle	r6, #1
 800cbec:	4456      	add	r6, sl
 800cbee:	2700      	movs	r7, #0
 800cbf0:	9902      	ldr	r1, [sp, #8]
 800cbf2:	9300      	str	r3, [sp, #0]
 800cbf4:	2201      	movs	r2, #1
 800cbf6:	4648      	mov	r0, r9
 800cbf8:	f000 fb9a 	bl	800d330 <__lshift>
 800cbfc:	4621      	mov	r1, r4
 800cbfe:	9002      	str	r0, [sp, #8]
 800cc00:	f000 fc02 	bl	800d408 <__mcmp>
 800cc04:	2800      	cmp	r0, #0
 800cc06:	dcb4      	bgt.n	800cb72 <_dtoa_r+0xa82>
 800cc08:	d102      	bne.n	800cc10 <_dtoa_r+0xb20>
 800cc0a:	9b00      	ldr	r3, [sp, #0]
 800cc0c:	07db      	lsls	r3, r3, #31
 800cc0e:	d4b0      	bmi.n	800cb72 <_dtoa_r+0xa82>
 800cc10:	4633      	mov	r3, r6
 800cc12:	461e      	mov	r6, r3
 800cc14:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800cc18:	2a30      	cmp	r2, #48	@ 0x30
 800cc1a:	d0fa      	beq.n	800cc12 <_dtoa_r+0xb22>
 800cc1c:	e4b5      	b.n	800c58a <_dtoa_r+0x49a>
 800cc1e:	459a      	cmp	sl, r3
 800cc20:	d1a8      	bne.n	800cb74 <_dtoa_r+0xa84>
 800cc22:	2331      	movs	r3, #49	@ 0x31
 800cc24:	f108 0801 	add.w	r8, r8, #1
 800cc28:	f88a 3000 	strb.w	r3, [sl]
 800cc2c:	e4ad      	b.n	800c58a <_dtoa_r+0x49a>
 800cc2e:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800cc30:	f8df a058 	ldr.w	sl, [pc, #88]	@ 800cc8c <_dtoa_r+0xb9c>
 800cc34:	b11b      	cbz	r3, 800cc3e <_dtoa_r+0xb4e>
 800cc36:	f10a 0308 	add.w	r3, sl, #8
 800cc3a:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800cc3c:	6013      	str	r3, [r2, #0]
 800cc3e:	4650      	mov	r0, sl
 800cc40:	b017      	add	sp, #92	@ 0x5c
 800cc42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cc46:	9b07      	ldr	r3, [sp, #28]
 800cc48:	2b01      	cmp	r3, #1
 800cc4a:	f77f ae2e 	ble.w	800c8aa <_dtoa_r+0x7ba>
 800cc4e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800cc50:	9308      	str	r3, [sp, #32]
 800cc52:	2001      	movs	r0, #1
 800cc54:	e64d      	b.n	800c8f2 <_dtoa_r+0x802>
 800cc56:	f1bb 0f00 	cmp.w	fp, #0
 800cc5a:	f77f aed9 	ble.w	800ca10 <_dtoa_r+0x920>
 800cc5e:	4656      	mov	r6, sl
 800cc60:	9802      	ldr	r0, [sp, #8]
 800cc62:	4621      	mov	r1, r4
 800cc64:	f7ff f9ba 	bl	800bfdc <quorem>
 800cc68:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 800cc6c:	f806 3b01 	strb.w	r3, [r6], #1
 800cc70:	eba6 020a 	sub.w	r2, r6, sl
 800cc74:	4593      	cmp	fp, r2
 800cc76:	ddb4      	ble.n	800cbe2 <_dtoa_r+0xaf2>
 800cc78:	9902      	ldr	r1, [sp, #8]
 800cc7a:	2300      	movs	r3, #0
 800cc7c:	220a      	movs	r2, #10
 800cc7e:	4648      	mov	r0, r9
 800cc80:	f000 f968 	bl	800cf54 <__multadd>
 800cc84:	9002      	str	r0, [sp, #8]
 800cc86:	e7eb      	b.n	800cc60 <_dtoa_r+0xb70>
 800cc88:	08010d49 	.word	0x08010d49
 800cc8c:	08010ccd 	.word	0x08010ccd

0800cc90 <_free_r>:
 800cc90:	b538      	push	{r3, r4, r5, lr}
 800cc92:	4605      	mov	r5, r0
 800cc94:	2900      	cmp	r1, #0
 800cc96:	d041      	beq.n	800cd1c <_free_r+0x8c>
 800cc98:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cc9c:	1f0c      	subs	r4, r1, #4
 800cc9e:	2b00      	cmp	r3, #0
 800cca0:	bfb8      	it	lt
 800cca2:	18e4      	addlt	r4, r4, r3
 800cca4:	f000 f8e8 	bl	800ce78 <__malloc_lock>
 800cca8:	4a1d      	ldr	r2, [pc, #116]	@ (800cd20 <_free_r+0x90>)
 800ccaa:	6813      	ldr	r3, [r2, #0]
 800ccac:	b933      	cbnz	r3, 800ccbc <_free_r+0x2c>
 800ccae:	6063      	str	r3, [r4, #4]
 800ccb0:	6014      	str	r4, [r2, #0]
 800ccb2:	4628      	mov	r0, r5
 800ccb4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ccb8:	f000 b8e4 	b.w	800ce84 <__malloc_unlock>
 800ccbc:	42a3      	cmp	r3, r4
 800ccbe:	d908      	bls.n	800ccd2 <_free_r+0x42>
 800ccc0:	6820      	ldr	r0, [r4, #0]
 800ccc2:	1821      	adds	r1, r4, r0
 800ccc4:	428b      	cmp	r3, r1
 800ccc6:	bf01      	itttt	eq
 800ccc8:	6819      	ldreq	r1, [r3, #0]
 800ccca:	685b      	ldreq	r3, [r3, #4]
 800cccc:	1809      	addeq	r1, r1, r0
 800ccce:	6021      	streq	r1, [r4, #0]
 800ccd0:	e7ed      	b.n	800ccae <_free_r+0x1e>
 800ccd2:	461a      	mov	r2, r3
 800ccd4:	685b      	ldr	r3, [r3, #4]
 800ccd6:	b10b      	cbz	r3, 800ccdc <_free_r+0x4c>
 800ccd8:	42a3      	cmp	r3, r4
 800ccda:	d9fa      	bls.n	800ccd2 <_free_r+0x42>
 800ccdc:	6811      	ldr	r1, [r2, #0]
 800ccde:	1850      	adds	r0, r2, r1
 800cce0:	42a0      	cmp	r0, r4
 800cce2:	d10b      	bne.n	800ccfc <_free_r+0x6c>
 800cce4:	6820      	ldr	r0, [r4, #0]
 800cce6:	4401      	add	r1, r0
 800cce8:	1850      	adds	r0, r2, r1
 800ccea:	4283      	cmp	r3, r0
 800ccec:	6011      	str	r1, [r2, #0]
 800ccee:	d1e0      	bne.n	800ccb2 <_free_r+0x22>
 800ccf0:	6818      	ldr	r0, [r3, #0]
 800ccf2:	685b      	ldr	r3, [r3, #4]
 800ccf4:	6053      	str	r3, [r2, #4]
 800ccf6:	4408      	add	r0, r1
 800ccf8:	6010      	str	r0, [r2, #0]
 800ccfa:	e7da      	b.n	800ccb2 <_free_r+0x22>
 800ccfc:	d902      	bls.n	800cd04 <_free_r+0x74>
 800ccfe:	230c      	movs	r3, #12
 800cd00:	602b      	str	r3, [r5, #0]
 800cd02:	e7d6      	b.n	800ccb2 <_free_r+0x22>
 800cd04:	6820      	ldr	r0, [r4, #0]
 800cd06:	1821      	adds	r1, r4, r0
 800cd08:	428b      	cmp	r3, r1
 800cd0a:	bf04      	itt	eq
 800cd0c:	6819      	ldreq	r1, [r3, #0]
 800cd0e:	685b      	ldreq	r3, [r3, #4]
 800cd10:	6063      	str	r3, [r4, #4]
 800cd12:	bf04      	itt	eq
 800cd14:	1809      	addeq	r1, r1, r0
 800cd16:	6021      	streq	r1, [r4, #0]
 800cd18:	6054      	str	r4, [r2, #4]
 800cd1a:	e7ca      	b.n	800ccb2 <_free_r+0x22>
 800cd1c:	bd38      	pop	{r3, r4, r5, pc}
 800cd1e:	bf00      	nop
 800cd20:	20014218 	.word	0x20014218

0800cd24 <malloc>:
 800cd24:	4b02      	ldr	r3, [pc, #8]	@ (800cd30 <malloc+0xc>)
 800cd26:	4601      	mov	r1, r0
 800cd28:	6818      	ldr	r0, [r3, #0]
 800cd2a:	f000 b825 	b.w	800cd78 <_malloc_r>
 800cd2e:	bf00      	nop
 800cd30:	2000d140 	.word	0x2000d140

0800cd34 <sbrk_aligned>:
 800cd34:	b570      	push	{r4, r5, r6, lr}
 800cd36:	4e0f      	ldr	r6, [pc, #60]	@ (800cd74 <sbrk_aligned+0x40>)
 800cd38:	460c      	mov	r4, r1
 800cd3a:	6831      	ldr	r1, [r6, #0]
 800cd3c:	4605      	mov	r5, r0
 800cd3e:	b911      	cbnz	r1, 800cd46 <sbrk_aligned+0x12>
 800cd40:	f001 ffdc 	bl	800ecfc <_sbrk_r>
 800cd44:	6030      	str	r0, [r6, #0]
 800cd46:	4621      	mov	r1, r4
 800cd48:	4628      	mov	r0, r5
 800cd4a:	f001 ffd7 	bl	800ecfc <_sbrk_r>
 800cd4e:	1c43      	adds	r3, r0, #1
 800cd50:	d103      	bne.n	800cd5a <sbrk_aligned+0x26>
 800cd52:	f04f 34ff 	mov.w	r4, #4294967295
 800cd56:	4620      	mov	r0, r4
 800cd58:	bd70      	pop	{r4, r5, r6, pc}
 800cd5a:	1cc4      	adds	r4, r0, #3
 800cd5c:	f024 0403 	bic.w	r4, r4, #3
 800cd60:	42a0      	cmp	r0, r4
 800cd62:	d0f8      	beq.n	800cd56 <sbrk_aligned+0x22>
 800cd64:	1a21      	subs	r1, r4, r0
 800cd66:	4628      	mov	r0, r5
 800cd68:	f001 ffc8 	bl	800ecfc <_sbrk_r>
 800cd6c:	3001      	adds	r0, #1
 800cd6e:	d1f2      	bne.n	800cd56 <sbrk_aligned+0x22>
 800cd70:	e7ef      	b.n	800cd52 <sbrk_aligned+0x1e>
 800cd72:	bf00      	nop
 800cd74:	20014214 	.word	0x20014214

0800cd78 <_malloc_r>:
 800cd78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cd7c:	1ccd      	adds	r5, r1, #3
 800cd7e:	f025 0503 	bic.w	r5, r5, #3
 800cd82:	3508      	adds	r5, #8
 800cd84:	2d0c      	cmp	r5, #12
 800cd86:	bf38      	it	cc
 800cd88:	250c      	movcc	r5, #12
 800cd8a:	2d00      	cmp	r5, #0
 800cd8c:	4606      	mov	r6, r0
 800cd8e:	db01      	blt.n	800cd94 <_malloc_r+0x1c>
 800cd90:	42a9      	cmp	r1, r5
 800cd92:	d904      	bls.n	800cd9e <_malloc_r+0x26>
 800cd94:	230c      	movs	r3, #12
 800cd96:	6033      	str	r3, [r6, #0]
 800cd98:	2000      	movs	r0, #0
 800cd9a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cd9e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800ce74 <_malloc_r+0xfc>
 800cda2:	f000 f869 	bl	800ce78 <__malloc_lock>
 800cda6:	f8d8 3000 	ldr.w	r3, [r8]
 800cdaa:	461c      	mov	r4, r3
 800cdac:	bb44      	cbnz	r4, 800ce00 <_malloc_r+0x88>
 800cdae:	4629      	mov	r1, r5
 800cdb0:	4630      	mov	r0, r6
 800cdb2:	f7ff ffbf 	bl	800cd34 <sbrk_aligned>
 800cdb6:	1c43      	adds	r3, r0, #1
 800cdb8:	4604      	mov	r4, r0
 800cdba:	d158      	bne.n	800ce6e <_malloc_r+0xf6>
 800cdbc:	f8d8 4000 	ldr.w	r4, [r8]
 800cdc0:	4627      	mov	r7, r4
 800cdc2:	2f00      	cmp	r7, #0
 800cdc4:	d143      	bne.n	800ce4e <_malloc_r+0xd6>
 800cdc6:	2c00      	cmp	r4, #0
 800cdc8:	d04b      	beq.n	800ce62 <_malloc_r+0xea>
 800cdca:	6823      	ldr	r3, [r4, #0]
 800cdcc:	4639      	mov	r1, r7
 800cdce:	4630      	mov	r0, r6
 800cdd0:	eb04 0903 	add.w	r9, r4, r3
 800cdd4:	f001 ff92 	bl	800ecfc <_sbrk_r>
 800cdd8:	4581      	cmp	r9, r0
 800cdda:	d142      	bne.n	800ce62 <_malloc_r+0xea>
 800cddc:	6821      	ldr	r1, [r4, #0]
 800cdde:	1a6d      	subs	r5, r5, r1
 800cde0:	4629      	mov	r1, r5
 800cde2:	4630      	mov	r0, r6
 800cde4:	f7ff ffa6 	bl	800cd34 <sbrk_aligned>
 800cde8:	3001      	adds	r0, #1
 800cdea:	d03a      	beq.n	800ce62 <_malloc_r+0xea>
 800cdec:	6823      	ldr	r3, [r4, #0]
 800cdee:	442b      	add	r3, r5
 800cdf0:	6023      	str	r3, [r4, #0]
 800cdf2:	f8d8 3000 	ldr.w	r3, [r8]
 800cdf6:	685a      	ldr	r2, [r3, #4]
 800cdf8:	bb62      	cbnz	r2, 800ce54 <_malloc_r+0xdc>
 800cdfa:	f8c8 7000 	str.w	r7, [r8]
 800cdfe:	e00f      	b.n	800ce20 <_malloc_r+0xa8>
 800ce00:	6822      	ldr	r2, [r4, #0]
 800ce02:	1b52      	subs	r2, r2, r5
 800ce04:	d420      	bmi.n	800ce48 <_malloc_r+0xd0>
 800ce06:	2a0b      	cmp	r2, #11
 800ce08:	d917      	bls.n	800ce3a <_malloc_r+0xc2>
 800ce0a:	1961      	adds	r1, r4, r5
 800ce0c:	42a3      	cmp	r3, r4
 800ce0e:	6025      	str	r5, [r4, #0]
 800ce10:	bf18      	it	ne
 800ce12:	6059      	strne	r1, [r3, #4]
 800ce14:	6863      	ldr	r3, [r4, #4]
 800ce16:	bf08      	it	eq
 800ce18:	f8c8 1000 	streq.w	r1, [r8]
 800ce1c:	5162      	str	r2, [r4, r5]
 800ce1e:	604b      	str	r3, [r1, #4]
 800ce20:	4630      	mov	r0, r6
 800ce22:	f000 f82f 	bl	800ce84 <__malloc_unlock>
 800ce26:	f104 000b 	add.w	r0, r4, #11
 800ce2a:	1d23      	adds	r3, r4, #4
 800ce2c:	f020 0007 	bic.w	r0, r0, #7
 800ce30:	1ac2      	subs	r2, r0, r3
 800ce32:	bf1c      	itt	ne
 800ce34:	1a1b      	subne	r3, r3, r0
 800ce36:	50a3      	strne	r3, [r4, r2]
 800ce38:	e7af      	b.n	800cd9a <_malloc_r+0x22>
 800ce3a:	6862      	ldr	r2, [r4, #4]
 800ce3c:	42a3      	cmp	r3, r4
 800ce3e:	bf0c      	ite	eq
 800ce40:	f8c8 2000 	streq.w	r2, [r8]
 800ce44:	605a      	strne	r2, [r3, #4]
 800ce46:	e7eb      	b.n	800ce20 <_malloc_r+0xa8>
 800ce48:	4623      	mov	r3, r4
 800ce4a:	6864      	ldr	r4, [r4, #4]
 800ce4c:	e7ae      	b.n	800cdac <_malloc_r+0x34>
 800ce4e:	463c      	mov	r4, r7
 800ce50:	687f      	ldr	r7, [r7, #4]
 800ce52:	e7b6      	b.n	800cdc2 <_malloc_r+0x4a>
 800ce54:	461a      	mov	r2, r3
 800ce56:	685b      	ldr	r3, [r3, #4]
 800ce58:	42a3      	cmp	r3, r4
 800ce5a:	d1fb      	bne.n	800ce54 <_malloc_r+0xdc>
 800ce5c:	2300      	movs	r3, #0
 800ce5e:	6053      	str	r3, [r2, #4]
 800ce60:	e7de      	b.n	800ce20 <_malloc_r+0xa8>
 800ce62:	230c      	movs	r3, #12
 800ce64:	6033      	str	r3, [r6, #0]
 800ce66:	4630      	mov	r0, r6
 800ce68:	f000 f80c 	bl	800ce84 <__malloc_unlock>
 800ce6c:	e794      	b.n	800cd98 <_malloc_r+0x20>
 800ce6e:	6005      	str	r5, [r0, #0]
 800ce70:	e7d6      	b.n	800ce20 <_malloc_r+0xa8>
 800ce72:	bf00      	nop
 800ce74:	20014218 	.word	0x20014218

0800ce78 <__malloc_lock>:
 800ce78:	4801      	ldr	r0, [pc, #4]	@ (800ce80 <__malloc_lock+0x8>)
 800ce7a:	f7ff b87a 	b.w	800bf72 <__retarget_lock_acquire_recursive>
 800ce7e:	bf00      	nop
 800ce80:	20014210 	.word	0x20014210

0800ce84 <__malloc_unlock>:
 800ce84:	4801      	ldr	r0, [pc, #4]	@ (800ce8c <__malloc_unlock+0x8>)
 800ce86:	f7ff b875 	b.w	800bf74 <__retarget_lock_release_recursive>
 800ce8a:	bf00      	nop
 800ce8c:	20014210 	.word	0x20014210

0800ce90 <_Balloc>:
 800ce90:	b570      	push	{r4, r5, r6, lr}
 800ce92:	69c6      	ldr	r6, [r0, #28]
 800ce94:	4604      	mov	r4, r0
 800ce96:	460d      	mov	r5, r1
 800ce98:	b976      	cbnz	r6, 800ceb8 <_Balloc+0x28>
 800ce9a:	2010      	movs	r0, #16
 800ce9c:	f7ff ff42 	bl	800cd24 <malloc>
 800cea0:	4602      	mov	r2, r0
 800cea2:	61e0      	str	r0, [r4, #28]
 800cea4:	b920      	cbnz	r0, 800ceb0 <_Balloc+0x20>
 800cea6:	4b18      	ldr	r3, [pc, #96]	@ (800cf08 <_Balloc+0x78>)
 800cea8:	4818      	ldr	r0, [pc, #96]	@ (800cf0c <_Balloc+0x7c>)
 800ceaa:	216b      	movs	r1, #107	@ 0x6b
 800ceac:	f7ff f878 	bl	800bfa0 <__assert_func>
 800ceb0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ceb4:	6006      	str	r6, [r0, #0]
 800ceb6:	60c6      	str	r6, [r0, #12]
 800ceb8:	69e6      	ldr	r6, [r4, #28]
 800ceba:	68f3      	ldr	r3, [r6, #12]
 800cebc:	b183      	cbz	r3, 800cee0 <_Balloc+0x50>
 800cebe:	69e3      	ldr	r3, [r4, #28]
 800cec0:	68db      	ldr	r3, [r3, #12]
 800cec2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800cec6:	b9b8      	cbnz	r0, 800cef8 <_Balloc+0x68>
 800cec8:	2101      	movs	r1, #1
 800ceca:	fa01 f605 	lsl.w	r6, r1, r5
 800cece:	1d72      	adds	r2, r6, #5
 800ced0:	0092      	lsls	r2, r2, #2
 800ced2:	4620      	mov	r0, r4
 800ced4:	f001 ff33 	bl	800ed3e <_calloc_r>
 800ced8:	b160      	cbz	r0, 800cef4 <_Balloc+0x64>
 800ceda:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800cede:	e00e      	b.n	800cefe <_Balloc+0x6e>
 800cee0:	2221      	movs	r2, #33	@ 0x21
 800cee2:	2104      	movs	r1, #4
 800cee4:	4620      	mov	r0, r4
 800cee6:	f001 ff2a 	bl	800ed3e <_calloc_r>
 800ceea:	69e3      	ldr	r3, [r4, #28]
 800ceec:	60f0      	str	r0, [r6, #12]
 800ceee:	68db      	ldr	r3, [r3, #12]
 800cef0:	2b00      	cmp	r3, #0
 800cef2:	d1e4      	bne.n	800cebe <_Balloc+0x2e>
 800cef4:	2000      	movs	r0, #0
 800cef6:	bd70      	pop	{r4, r5, r6, pc}
 800cef8:	6802      	ldr	r2, [r0, #0]
 800cefa:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800cefe:	2300      	movs	r3, #0
 800cf00:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800cf04:	e7f7      	b.n	800cef6 <_Balloc+0x66>
 800cf06:	bf00      	nop
 800cf08:	08010cda 	.word	0x08010cda
 800cf0c:	08010d5a 	.word	0x08010d5a

0800cf10 <_Bfree>:
 800cf10:	b570      	push	{r4, r5, r6, lr}
 800cf12:	69c6      	ldr	r6, [r0, #28]
 800cf14:	4605      	mov	r5, r0
 800cf16:	460c      	mov	r4, r1
 800cf18:	b976      	cbnz	r6, 800cf38 <_Bfree+0x28>
 800cf1a:	2010      	movs	r0, #16
 800cf1c:	f7ff ff02 	bl	800cd24 <malloc>
 800cf20:	4602      	mov	r2, r0
 800cf22:	61e8      	str	r0, [r5, #28]
 800cf24:	b920      	cbnz	r0, 800cf30 <_Bfree+0x20>
 800cf26:	4b09      	ldr	r3, [pc, #36]	@ (800cf4c <_Bfree+0x3c>)
 800cf28:	4809      	ldr	r0, [pc, #36]	@ (800cf50 <_Bfree+0x40>)
 800cf2a:	218f      	movs	r1, #143	@ 0x8f
 800cf2c:	f7ff f838 	bl	800bfa0 <__assert_func>
 800cf30:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800cf34:	6006      	str	r6, [r0, #0]
 800cf36:	60c6      	str	r6, [r0, #12]
 800cf38:	b13c      	cbz	r4, 800cf4a <_Bfree+0x3a>
 800cf3a:	69eb      	ldr	r3, [r5, #28]
 800cf3c:	6862      	ldr	r2, [r4, #4]
 800cf3e:	68db      	ldr	r3, [r3, #12]
 800cf40:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800cf44:	6021      	str	r1, [r4, #0]
 800cf46:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800cf4a:	bd70      	pop	{r4, r5, r6, pc}
 800cf4c:	08010cda 	.word	0x08010cda
 800cf50:	08010d5a 	.word	0x08010d5a

0800cf54 <__multadd>:
 800cf54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cf58:	690d      	ldr	r5, [r1, #16]
 800cf5a:	4607      	mov	r7, r0
 800cf5c:	460c      	mov	r4, r1
 800cf5e:	461e      	mov	r6, r3
 800cf60:	f101 0c14 	add.w	ip, r1, #20
 800cf64:	2000      	movs	r0, #0
 800cf66:	f8dc 3000 	ldr.w	r3, [ip]
 800cf6a:	b299      	uxth	r1, r3
 800cf6c:	fb02 6101 	mla	r1, r2, r1, r6
 800cf70:	0c1e      	lsrs	r6, r3, #16
 800cf72:	0c0b      	lsrs	r3, r1, #16
 800cf74:	fb02 3306 	mla	r3, r2, r6, r3
 800cf78:	b289      	uxth	r1, r1
 800cf7a:	3001      	adds	r0, #1
 800cf7c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800cf80:	4285      	cmp	r5, r0
 800cf82:	f84c 1b04 	str.w	r1, [ip], #4
 800cf86:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800cf8a:	dcec      	bgt.n	800cf66 <__multadd+0x12>
 800cf8c:	b30e      	cbz	r6, 800cfd2 <__multadd+0x7e>
 800cf8e:	68a3      	ldr	r3, [r4, #8]
 800cf90:	42ab      	cmp	r3, r5
 800cf92:	dc19      	bgt.n	800cfc8 <__multadd+0x74>
 800cf94:	6861      	ldr	r1, [r4, #4]
 800cf96:	4638      	mov	r0, r7
 800cf98:	3101      	adds	r1, #1
 800cf9a:	f7ff ff79 	bl	800ce90 <_Balloc>
 800cf9e:	4680      	mov	r8, r0
 800cfa0:	b928      	cbnz	r0, 800cfae <__multadd+0x5a>
 800cfa2:	4602      	mov	r2, r0
 800cfa4:	4b0c      	ldr	r3, [pc, #48]	@ (800cfd8 <__multadd+0x84>)
 800cfa6:	480d      	ldr	r0, [pc, #52]	@ (800cfdc <__multadd+0x88>)
 800cfa8:	21ba      	movs	r1, #186	@ 0xba
 800cfaa:	f7fe fff9 	bl	800bfa0 <__assert_func>
 800cfae:	6922      	ldr	r2, [r4, #16]
 800cfb0:	3202      	adds	r2, #2
 800cfb2:	f104 010c 	add.w	r1, r4, #12
 800cfb6:	0092      	lsls	r2, r2, #2
 800cfb8:	300c      	adds	r0, #12
 800cfba:	f7fe ffdc 	bl	800bf76 <memcpy>
 800cfbe:	4621      	mov	r1, r4
 800cfc0:	4638      	mov	r0, r7
 800cfc2:	f7ff ffa5 	bl	800cf10 <_Bfree>
 800cfc6:	4644      	mov	r4, r8
 800cfc8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800cfcc:	3501      	adds	r5, #1
 800cfce:	615e      	str	r6, [r3, #20]
 800cfd0:	6125      	str	r5, [r4, #16]
 800cfd2:	4620      	mov	r0, r4
 800cfd4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cfd8:	08010d49 	.word	0x08010d49
 800cfdc:	08010d5a 	.word	0x08010d5a

0800cfe0 <__s2b>:
 800cfe0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cfe4:	460c      	mov	r4, r1
 800cfe6:	4615      	mov	r5, r2
 800cfe8:	461f      	mov	r7, r3
 800cfea:	2209      	movs	r2, #9
 800cfec:	3308      	adds	r3, #8
 800cfee:	4606      	mov	r6, r0
 800cff0:	fb93 f3f2 	sdiv	r3, r3, r2
 800cff4:	2100      	movs	r1, #0
 800cff6:	2201      	movs	r2, #1
 800cff8:	429a      	cmp	r2, r3
 800cffa:	db09      	blt.n	800d010 <__s2b+0x30>
 800cffc:	4630      	mov	r0, r6
 800cffe:	f7ff ff47 	bl	800ce90 <_Balloc>
 800d002:	b940      	cbnz	r0, 800d016 <__s2b+0x36>
 800d004:	4602      	mov	r2, r0
 800d006:	4b19      	ldr	r3, [pc, #100]	@ (800d06c <__s2b+0x8c>)
 800d008:	4819      	ldr	r0, [pc, #100]	@ (800d070 <__s2b+0x90>)
 800d00a:	21d3      	movs	r1, #211	@ 0xd3
 800d00c:	f7fe ffc8 	bl	800bfa0 <__assert_func>
 800d010:	0052      	lsls	r2, r2, #1
 800d012:	3101      	adds	r1, #1
 800d014:	e7f0      	b.n	800cff8 <__s2b+0x18>
 800d016:	9b08      	ldr	r3, [sp, #32]
 800d018:	6143      	str	r3, [r0, #20]
 800d01a:	2d09      	cmp	r5, #9
 800d01c:	f04f 0301 	mov.w	r3, #1
 800d020:	6103      	str	r3, [r0, #16]
 800d022:	dd16      	ble.n	800d052 <__s2b+0x72>
 800d024:	f104 0909 	add.w	r9, r4, #9
 800d028:	46c8      	mov	r8, r9
 800d02a:	442c      	add	r4, r5
 800d02c:	f818 3b01 	ldrb.w	r3, [r8], #1
 800d030:	4601      	mov	r1, r0
 800d032:	3b30      	subs	r3, #48	@ 0x30
 800d034:	220a      	movs	r2, #10
 800d036:	4630      	mov	r0, r6
 800d038:	f7ff ff8c 	bl	800cf54 <__multadd>
 800d03c:	45a0      	cmp	r8, r4
 800d03e:	d1f5      	bne.n	800d02c <__s2b+0x4c>
 800d040:	f1a5 0408 	sub.w	r4, r5, #8
 800d044:	444c      	add	r4, r9
 800d046:	1b2d      	subs	r5, r5, r4
 800d048:	1963      	adds	r3, r4, r5
 800d04a:	42bb      	cmp	r3, r7
 800d04c:	db04      	blt.n	800d058 <__s2b+0x78>
 800d04e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d052:	340a      	adds	r4, #10
 800d054:	2509      	movs	r5, #9
 800d056:	e7f6      	b.n	800d046 <__s2b+0x66>
 800d058:	f814 3b01 	ldrb.w	r3, [r4], #1
 800d05c:	4601      	mov	r1, r0
 800d05e:	3b30      	subs	r3, #48	@ 0x30
 800d060:	220a      	movs	r2, #10
 800d062:	4630      	mov	r0, r6
 800d064:	f7ff ff76 	bl	800cf54 <__multadd>
 800d068:	e7ee      	b.n	800d048 <__s2b+0x68>
 800d06a:	bf00      	nop
 800d06c:	08010d49 	.word	0x08010d49
 800d070:	08010d5a 	.word	0x08010d5a

0800d074 <__hi0bits>:
 800d074:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800d078:	4603      	mov	r3, r0
 800d07a:	bf36      	itet	cc
 800d07c:	0403      	lslcc	r3, r0, #16
 800d07e:	2000      	movcs	r0, #0
 800d080:	2010      	movcc	r0, #16
 800d082:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800d086:	bf3c      	itt	cc
 800d088:	021b      	lslcc	r3, r3, #8
 800d08a:	3008      	addcc	r0, #8
 800d08c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800d090:	bf3c      	itt	cc
 800d092:	011b      	lslcc	r3, r3, #4
 800d094:	3004      	addcc	r0, #4
 800d096:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d09a:	bf3c      	itt	cc
 800d09c:	009b      	lslcc	r3, r3, #2
 800d09e:	3002      	addcc	r0, #2
 800d0a0:	2b00      	cmp	r3, #0
 800d0a2:	db05      	blt.n	800d0b0 <__hi0bits+0x3c>
 800d0a4:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800d0a8:	f100 0001 	add.w	r0, r0, #1
 800d0ac:	bf08      	it	eq
 800d0ae:	2020      	moveq	r0, #32
 800d0b0:	4770      	bx	lr

0800d0b2 <__lo0bits>:
 800d0b2:	6803      	ldr	r3, [r0, #0]
 800d0b4:	4602      	mov	r2, r0
 800d0b6:	f013 0007 	ands.w	r0, r3, #7
 800d0ba:	d00b      	beq.n	800d0d4 <__lo0bits+0x22>
 800d0bc:	07d9      	lsls	r1, r3, #31
 800d0be:	d421      	bmi.n	800d104 <__lo0bits+0x52>
 800d0c0:	0798      	lsls	r0, r3, #30
 800d0c2:	bf49      	itett	mi
 800d0c4:	085b      	lsrmi	r3, r3, #1
 800d0c6:	089b      	lsrpl	r3, r3, #2
 800d0c8:	2001      	movmi	r0, #1
 800d0ca:	6013      	strmi	r3, [r2, #0]
 800d0cc:	bf5c      	itt	pl
 800d0ce:	6013      	strpl	r3, [r2, #0]
 800d0d0:	2002      	movpl	r0, #2
 800d0d2:	4770      	bx	lr
 800d0d4:	b299      	uxth	r1, r3
 800d0d6:	b909      	cbnz	r1, 800d0dc <__lo0bits+0x2a>
 800d0d8:	0c1b      	lsrs	r3, r3, #16
 800d0da:	2010      	movs	r0, #16
 800d0dc:	b2d9      	uxtb	r1, r3
 800d0de:	b909      	cbnz	r1, 800d0e4 <__lo0bits+0x32>
 800d0e0:	3008      	adds	r0, #8
 800d0e2:	0a1b      	lsrs	r3, r3, #8
 800d0e4:	0719      	lsls	r1, r3, #28
 800d0e6:	bf04      	itt	eq
 800d0e8:	091b      	lsreq	r3, r3, #4
 800d0ea:	3004      	addeq	r0, #4
 800d0ec:	0799      	lsls	r1, r3, #30
 800d0ee:	bf04      	itt	eq
 800d0f0:	089b      	lsreq	r3, r3, #2
 800d0f2:	3002      	addeq	r0, #2
 800d0f4:	07d9      	lsls	r1, r3, #31
 800d0f6:	d403      	bmi.n	800d100 <__lo0bits+0x4e>
 800d0f8:	085b      	lsrs	r3, r3, #1
 800d0fa:	f100 0001 	add.w	r0, r0, #1
 800d0fe:	d003      	beq.n	800d108 <__lo0bits+0x56>
 800d100:	6013      	str	r3, [r2, #0]
 800d102:	4770      	bx	lr
 800d104:	2000      	movs	r0, #0
 800d106:	4770      	bx	lr
 800d108:	2020      	movs	r0, #32
 800d10a:	4770      	bx	lr

0800d10c <__i2b>:
 800d10c:	b510      	push	{r4, lr}
 800d10e:	460c      	mov	r4, r1
 800d110:	2101      	movs	r1, #1
 800d112:	f7ff febd 	bl	800ce90 <_Balloc>
 800d116:	4602      	mov	r2, r0
 800d118:	b928      	cbnz	r0, 800d126 <__i2b+0x1a>
 800d11a:	4b05      	ldr	r3, [pc, #20]	@ (800d130 <__i2b+0x24>)
 800d11c:	4805      	ldr	r0, [pc, #20]	@ (800d134 <__i2b+0x28>)
 800d11e:	f240 1145 	movw	r1, #325	@ 0x145
 800d122:	f7fe ff3d 	bl	800bfa0 <__assert_func>
 800d126:	2301      	movs	r3, #1
 800d128:	6144      	str	r4, [r0, #20]
 800d12a:	6103      	str	r3, [r0, #16]
 800d12c:	bd10      	pop	{r4, pc}
 800d12e:	bf00      	nop
 800d130:	08010d49 	.word	0x08010d49
 800d134:	08010d5a 	.word	0x08010d5a

0800d138 <__multiply>:
 800d138:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d13c:	4617      	mov	r7, r2
 800d13e:	690a      	ldr	r2, [r1, #16]
 800d140:	693b      	ldr	r3, [r7, #16]
 800d142:	429a      	cmp	r2, r3
 800d144:	bfa8      	it	ge
 800d146:	463b      	movge	r3, r7
 800d148:	4689      	mov	r9, r1
 800d14a:	bfa4      	itt	ge
 800d14c:	460f      	movge	r7, r1
 800d14e:	4699      	movge	r9, r3
 800d150:	693d      	ldr	r5, [r7, #16]
 800d152:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800d156:	68bb      	ldr	r3, [r7, #8]
 800d158:	6879      	ldr	r1, [r7, #4]
 800d15a:	eb05 060a 	add.w	r6, r5, sl
 800d15e:	42b3      	cmp	r3, r6
 800d160:	b085      	sub	sp, #20
 800d162:	bfb8      	it	lt
 800d164:	3101      	addlt	r1, #1
 800d166:	f7ff fe93 	bl	800ce90 <_Balloc>
 800d16a:	b930      	cbnz	r0, 800d17a <__multiply+0x42>
 800d16c:	4602      	mov	r2, r0
 800d16e:	4b41      	ldr	r3, [pc, #260]	@ (800d274 <__multiply+0x13c>)
 800d170:	4841      	ldr	r0, [pc, #260]	@ (800d278 <__multiply+0x140>)
 800d172:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800d176:	f7fe ff13 	bl	800bfa0 <__assert_func>
 800d17a:	f100 0414 	add.w	r4, r0, #20
 800d17e:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800d182:	4623      	mov	r3, r4
 800d184:	2200      	movs	r2, #0
 800d186:	4573      	cmp	r3, lr
 800d188:	d320      	bcc.n	800d1cc <__multiply+0x94>
 800d18a:	f107 0814 	add.w	r8, r7, #20
 800d18e:	f109 0114 	add.w	r1, r9, #20
 800d192:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800d196:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800d19a:	9302      	str	r3, [sp, #8]
 800d19c:	1beb      	subs	r3, r5, r7
 800d19e:	3b15      	subs	r3, #21
 800d1a0:	f023 0303 	bic.w	r3, r3, #3
 800d1a4:	3304      	adds	r3, #4
 800d1a6:	3715      	adds	r7, #21
 800d1a8:	42bd      	cmp	r5, r7
 800d1aa:	bf38      	it	cc
 800d1ac:	2304      	movcc	r3, #4
 800d1ae:	9301      	str	r3, [sp, #4]
 800d1b0:	9b02      	ldr	r3, [sp, #8]
 800d1b2:	9103      	str	r1, [sp, #12]
 800d1b4:	428b      	cmp	r3, r1
 800d1b6:	d80c      	bhi.n	800d1d2 <__multiply+0x9a>
 800d1b8:	2e00      	cmp	r6, #0
 800d1ba:	dd03      	ble.n	800d1c4 <__multiply+0x8c>
 800d1bc:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800d1c0:	2b00      	cmp	r3, #0
 800d1c2:	d055      	beq.n	800d270 <__multiply+0x138>
 800d1c4:	6106      	str	r6, [r0, #16]
 800d1c6:	b005      	add	sp, #20
 800d1c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d1cc:	f843 2b04 	str.w	r2, [r3], #4
 800d1d0:	e7d9      	b.n	800d186 <__multiply+0x4e>
 800d1d2:	f8b1 a000 	ldrh.w	sl, [r1]
 800d1d6:	f1ba 0f00 	cmp.w	sl, #0
 800d1da:	d01f      	beq.n	800d21c <__multiply+0xe4>
 800d1dc:	46c4      	mov	ip, r8
 800d1de:	46a1      	mov	r9, r4
 800d1e0:	2700      	movs	r7, #0
 800d1e2:	f85c 2b04 	ldr.w	r2, [ip], #4
 800d1e6:	f8d9 3000 	ldr.w	r3, [r9]
 800d1ea:	fa1f fb82 	uxth.w	fp, r2
 800d1ee:	b29b      	uxth	r3, r3
 800d1f0:	fb0a 330b 	mla	r3, sl, fp, r3
 800d1f4:	443b      	add	r3, r7
 800d1f6:	f8d9 7000 	ldr.w	r7, [r9]
 800d1fa:	0c12      	lsrs	r2, r2, #16
 800d1fc:	0c3f      	lsrs	r7, r7, #16
 800d1fe:	fb0a 7202 	mla	r2, sl, r2, r7
 800d202:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800d206:	b29b      	uxth	r3, r3
 800d208:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d20c:	4565      	cmp	r5, ip
 800d20e:	f849 3b04 	str.w	r3, [r9], #4
 800d212:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800d216:	d8e4      	bhi.n	800d1e2 <__multiply+0xaa>
 800d218:	9b01      	ldr	r3, [sp, #4]
 800d21a:	50e7      	str	r7, [r4, r3]
 800d21c:	9b03      	ldr	r3, [sp, #12]
 800d21e:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800d222:	3104      	adds	r1, #4
 800d224:	f1b9 0f00 	cmp.w	r9, #0
 800d228:	d020      	beq.n	800d26c <__multiply+0x134>
 800d22a:	6823      	ldr	r3, [r4, #0]
 800d22c:	4647      	mov	r7, r8
 800d22e:	46a4      	mov	ip, r4
 800d230:	f04f 0a00 	mov.w	sl, #0
 800d234:	f8b7 b000 	ldrh.w	fp, [r7]
 800d238:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800d23c:	fb09 220b 	mla	r2, r9, fp, r2
 800d240:	4452      	add	r2, sl
 800d242:	b29b      	uxth	r3, r3
 800d244:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d248:	f84c 3b04 	str.w	r3, [ip], #4
 800d24c:	f857 3b04 	ldr.w	r3, [r7], #4
 800d250:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800d254:	f8bc 3000 	ldrh.w	r3, [ip]
 800d258:	fb09 330a 	mla	r3, r9, sl, r3
 800d25c:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 800d260:	42bd      	cmp	r5, r7
 800d262:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800d266:	d8e5      	bhi.n	800d234 <__multiply+0xfc>
 800d268:	9a01      	ldr	r2, [sp, #4]
 800d26a:	50a3      	str	r3, [r4, r2]
 800d26c:	3404      	adds	r4, #4
 800d26e:	e79f      	b.n	800d1b0 <__multiply+0x78>
 800d270:	3e01      	subs	r6, #1
 800d272:	e7a1      	b.n	800d1b8 <__multiply+0x80>
 800d274:	08010d49 	.word	0x08010d49
 800d278:	08010d5a 	.word	0x08010d5a

0800d27c <__pow5mult>:
 800d27c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d280:	4615      	mov	r5, r2
 800d282:	f012 0203 	ands.w	r2, r2, #3
 800d286:	4607      	mov	r7, r0
 800d288:	460e      	mov	r6, r1
 800d28a:	d007      	beq.n	800d29c <__pow5mult+0x20>
 800d28c:	4c25      	ldr	r4, [pc, #148]	@ (800d324 <__pow5mult+0xa8>)
 800d28e:	3a01      	subs	r2, #1
 800d290:	2300      	movs	r3, #0
 800d292:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800d296:	f7ff fe5d 	bl	800cf54 <__multadd>
 800d29a:	4606      	mov	r6, r0
 800d29c:	10ad      	asrs	r5, r5, #2
 800d29e:	d03d      	beq.n	800d31c <__pow5mult+0xa0>
 800d2a0:	69fc      	ldr	r4, [r7, #28]
 800d2a2:	b97c      	cbnz	r4, 800d2c4 <__pow5mult+0x48>
 800d2a4:	2010      	movs	r0, #16
 800d2a6:	f7ff fd3d 	bl	800cd24 <malloc>
 800d2aa:	4602      	mov	r2, r0
 800d2ac:	61f8      	str	r0, [r7, #28]
 800d2ae:	b928      	cbnz	r0, 800d2bc <__pow5mult+0x40>
 800d2b0:	4b1d      	ldr	r3, [pc, #116]	@ (800d328 <__pow5mult+0xac>)
 800d2b2:	481e      	ldr	r0, [pc, #120]	@ (800d32c <__pow5mult+0xb0>)
 800d2b4:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800d2b8:	f7fe fe72 	bl	800bfa0 <__assert_func>
 800d2bc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800d2c0:	6004      	str	r4, [r0, #0]
 800d2c2:	60c4      	str	r4, [r0, #12]
 800d2c4:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800d2c8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800d2cc:	b94c      	cbnz	r4, 800d2e2 <__pow5mult+0x66>
 800d2ce:	f240 2171 	movw	r1, #625	@ 0x271
 800d2d2:	4638      	mov	r0, r7
 800d2d4:	f7ff ff1a 	bl	800d10c <__i2b>
 800d2d8:	2300      	movs	r3, #0
 800d2da:	f8c8 0008 	str.w	r0, [r8, #8]
 800d2de:	4604      	mov	r4, r0
 800d2e0:	6003      	str	r3, [r0, #0]
 800d2e2:	f04f 0900 	mov.w	r9, #0
 800d2e6:	07eb      	lsls	r3, r5, #31
 800d2e8:	d50a      	bpl.n	800d300 <__pow5mult+0x84>
 800d2ea:	4631      	mov	r1, r6
 800d2ec:	4622      	mov	r2, r4
 800d2ee:	4638      	mov	r0, r7
 800d2f0:	f7ff ff22 	bl	800d138 <__multiply>
 800d2f4:	4631      	mov	r1, r6
 800d2f6:	4680      	mov	r8, r0
 800d2f8:	4638      	mov	r0, r7
 800d2fa:	f7ff fe09 	bl	800cf10 <_Bfree>
 800d2fe:	4646      	mov	r6, r8
 800d300:	106d      	asrs	r5, r5, #1
 800d302:	d00b      	beq.n	800d31c <__pow5mult+0xa0>
 800d304:	6820      	ldr	r0, [r4, #0]
 800d306:	b938      	cbnz	r0, 800d318 <__pow5mult+0x9c>
 800d308:	4622      	mov	r2, r4
 800d30a:	4621      	mov	r1, r4
 800d30c:	4638      	mov	r0, r7
 800d30e:	f7ff ff13 	bl	800d138 <__multiply>
 800d312:	6020      	str	r0, [r4, #0]
 800d314:	f8c0 9000 	str.w	r9, [r0]
 800d318:	4604      	mov	r4, r0
 800d31a:	e7e4      	b.n	800d2e6 <__pow5mult+0x6a>
 800d31c:	4630      	mov	r0, r6
 800d31e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d322:	bf00      	nop
 800d324:	08010e30 	.word	0x08010e30
 800d328:	08010cda 	.word	0x08010cda
 800d32c:	08010d5a 	.word	0x08010d5a

0800d330 <__lshift>:
 800d330:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d334:	460c      	mov	r4, r1
 800d336:	6849      	ldr	r1, [r1, #4]
 800d338:	6923      	ldr	r3, [r4, #16]
 800d33a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800d33e:	68a3      	ldr	r3, [r4, #8]
 800d340:	4607      	mov	r7, r0
 800d342:	4691      	mov	r9, r2
 800d344:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800d348:	f108 0601 	add.w	r6, r8, #1
 800d34c:	42b3      	cmp	r3, r6
 800d34e:	db0b      	blt.n	800d368 <__lshift+0x38>
 800d350:	4638      	mov	r0, r7
 800d352:	f7ff fd9d 	bl	800ce90 <_Balloc>
 800d356:	4605      	mov	r5, r0
 800d358:	b948      	cbnz	r0, 800d36e <__lshift+0x3e>
 800d35a:	4602      	mov	r2, r0
 800d35c:	4b28      	ldr	r3, [pc, #160]	@ (800d400 <__lshift+0xd0>)
 800d35e:	4829      	ldr	r0, [pc, #164]	@ (800d404 <__lshift+0xd4>)
 800d360:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800d364:	f7fe fe1c 	bl	800bfa0 <__assert_func>
 800d368:	3101      	adds	r1, #1
 800d36a:	005b      	lsls	r3, r3, #1
 800d36c:	e7ee      	b.n	800d34c <__lshift+0x1c>
 800d36e:	2300      	movs	r3, #0
 800d370:	f100 0114 	add.w	r1, r0, #20
 800d374:	f100 0210 	add.w	r2, r0, #16
 800d378:	4618      	mov	r0, r3
 800d37a:	4553      	cmp	r3, sl
 800d37c:	db33      	blt.n	800d3e6 <__lshift+0xb6>
 800d37e:	6920      	ldr	r0, [r4, #16]
 800d380:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800d384:	f104 0314 	add.w	r3, r4, #20
 800d388:	f019 091f 	ands.w	r9, r9, #31
 800d38c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800d390:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800d394:	d02b      	beq.n	800d3ee <__lshift+0xbe>
 800d396:	f1c9 0e20 	rsb	lr, r9, #32
 800d39a:	468a      	mov	sl, r1
 800d39c:	2200      	movs	r2, #0
 800d39e:	6818      	ldr	r0, [r3, #0]
 800d3a0:	fa00 f009 	lsl.w	r0, r0, r9
 800d3a4:	4310      	orrs	r0, r2
 800d3a6:	f84a 0b04 	str.w	r0, [sl], #4
 800d3aa:	f853 2b04 	ldr.w	r2, [r3], #4
 800d3ae:	459c      	cmp	ip, r3
 800d3b0:	fa22 f20e 	lsr.w	r2, r2, lr
 800d3b4:	d8f3      	bhi.n	800d39e <__lshift+0x6e>
 800d3b6:	ebac 0304 	sub.w	r3, ip, r4
 800d3ba:	3b15      	subs	r3, #21
 800d3bc:	f023 0303 	bic.w	r3, r3, #3
 800d3c0:	3304      	adds	r3, #4
 800d3c2:	f104 0015 	add.w	r0, r4, #21
 800d3c6:	4560      	cmp	r0, ip
 800d3c8:	bf88      	it	hi
 800d3ca:	2304      	movhi	r3, #4
 800d3cc:	50ca      	str	r2, [r1, r3]
 800d3ce:	b10a      	cbz	r2, 800d3d4 <__lshift+0xa4>
 800d3d0:	f108 0602 	add.w	r6, r8, #2
 800d3d4:	3e01      	subs	r6, #1
 800d3d6:	4638      	mov	r0, r7
 800d3d8:	612e      	str	r6, [r5, #16]
 800d3da:	4621      	mov	r1, r4
 800d3dc:	f7ff fd98 	bl	800cf10 <_Bfree>
 800d3e0:	4628      	mov	r0, r5
 800d3e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d3e6:	f842 0f04 	str.w	r0, [r2, #4]!
 800d3ea:	3301      	adds	r3, #1
 800d3ec:	e7c5      	b.n	800d37a <__lshift+0x4a>
 800d3ee:	3904      	subs	r1, #4
 800d3f0:	f853 2b04 	ldr.w	r2, [r3], #4
 800d3f4:	f841 2f04 	str.w	r2, [r1, #4]!
 800d3f8:	459c      	cmp	ip, r3
 800d3fa:	d8f9      	bhi.n	800d3f0 <__lshift+0xc0>
 800d3fc:	e7ea      	b.n	800d3d4 <__lshift+0xa4>
 800d3fe:	bf00      	nop
 800d400:	08010d49 	.word	0x08010d49
 800d404:	08010d5a 	.word	0x08010d5a

0800d408 <__mcmp>:
 800d408:	690a      	ldr	r2, [r1, #16]
 800d40a:	4603      	mov	r3, r0
 800d40c:	6900      	ldr	r0, [r0, #16]
 800d40e:	1a80      	subs	r0, r0, r2
 800d410:	b530      	push	{r4, r5, lr}
 800d412:	d10e      	bne.n	800d432 <__mcmp+0x2a>
 800d414:	3314      	adds	r3, #20
 800d416:	3114      	adds	r1, #20
 800d418:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800d41c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800d420:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800d424:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800d428:	4295      	cmp	r5, r2
 800d42a:	d003      	beq.n	800d434 <__mcmp+0x2c>
 800d42c:	d205      	bcs.n	800d43a <__mcmp+0x32>
 800d42e:	f04f 30ff 	mov.w	r0, #4294967295
 800d432:	bd30      	pop	{r4, r5, pc}
 800d434:	42a3      	cmp	r3, r4
 800d436:	d3f3      	bcc.n	800d420 <__mcmp+0x18>
 800d438:	e7fb      	b.n	800d432 <__mcmp+0x2a>
 800d43a:	2001      	movs	r0, #1
 800d43c:	e7f9      	b.n	800d432 <__mcmp+0x2a>
	...

0800d440 <__mdiff>:
 800d440:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d444:	4689      	mov	r9, r1
 800d446:	4606      	mov	r6, r0
 800d448:	4611      	mov	r1, r2
 800d44a:	4648      	mov	r0, r9
 800d44c:	4614      	mov	r4, r2
 800d44e:	f7ff ffdb 	bl	800d408 <__mcmp>
 800d452:	1e05      	subs	r5, r0, #0
 800d454:	d112      	bne.n	800d47c <__mdiff+0x3c>
 800d456:	4629      	mov	r1, r5
 800d458:	4630      	mov	r0, r6
 800d45a:	f7ff fd19 	bl	800ce90 <_Balloc>
 800d45e:	4602      	mov	r2, r0
 800d460:	b928      	cbnz	r0, 800d46e <__mdiff+0x2e>
 800d462:	4b3f      	ldr	r3, [pc, #252]	@ (800d560 <__mdiff+0x120>)
 800d464:	f240 2137 	movw	r1, #567	@ 0x237
 800d468:	483e      	ldr	r0, [pc, #248]	@ (800d564 <__mdiff+0x124>)
 800d46a:	f7fe fd99 	bl	800bfa0 <__assert_func>
 800d46e:	2301      	movs	r3, #1
 800d470:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800d474:	4610      	mov	r0, r2
 800d476:	b003      	add	sp, #12
 800d478:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d47c:	bfbc      	itt	lt
 800d47e:	464b      	movlt	r3, r9
 800d480:	46a1      	movlt	r9, r4
 800d482:	4630      	mov	r0, r6
 800d484:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800d488:	bfba      	itte	lt
 800d48a:	461c      	movlt	r4, r3
 800d48c:	2501      	movlt	r5, #1
 800d48e:	2500      	movge	r5, #0
 800d490:	f7ff fcfe 	bl	800ce90 <_Balloc>
 800d494:	4602      	mov	r2, r0
 800d496:	b918      	cbnz	r0, 800d4a0 <__mdiff+0x60>
 800d498:	4b31      	ldr	r3, [pc, #196]	@ (800d560 <__mdiff+0x120>)
 800d49a:	f240 2145 	movw	r1, #581	@ 0x245
 800d49e:	e7e3      	b.n	800d468 <__mdiff+0x28>
 800d4a0:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800d4a4:	6926      	ldr	r6, [r4, #16]
 800d4a6:	60c5      	str	r5, [r0, #12]
 800d4a8:	f109 0310 	add.w	r3, r9, #16
 800d4ac:	f109 0514 	add.w	r5, r9, #20
 800d4b0:	f104 0e14 	add.w	lr, r4, #20
 800d4b4:	f100 0b14 	add.w	fp, r0, #20
 800d4b8:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800d4bc:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800d4c0:	9301      	str	r3, [sp, #4]
 800d4c2:	46d9      	mov	r9, fp
 800d4c4:	f04f 0c00 	mov.w	ip, #0
 800d4c8:	9b01      	ldr	r3, [sp, #4]
 800d4ca:	f85e 0b04 	ldr.w	r0, [lr], #4
 800d4ce:	f853 af04 	ldr.w	sl, [r3, #4]!
 800d4d2:	9301      	str	r3, [sp, #4]
 800d4d4:	fa1f f38a 	uxth.w	r3, sl
 800d4d8:	4619      	mov	r1, r3
 800d4da:	b283      	uxth	r3, r0
 800d4dc:	1acb      	subs	r3, r1, r3
 800d4de:	0c00      	lsrs	r0, r0, #16
 800d4e0:	4463      	add	r3, ip
 800d4e2:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800d4e6:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800d4ea:	b29b      	uxth	r3, r3
 800d4ec:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800d4f0:	4576      	cmp	r6, lr
 800d4f2:	f849 3b04 	str.w	r3, [r9], #4
 800d4f6:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800d4fa:	d8e5      	bhi.n	800d4c8 <__mdiff+0x88>
 800d4fc:	1b33      	subs	r3, r6, r4
 800d4fe:	3b15      	subs	r3, #21
 800d500:	f023 0303 	bic.w	r3, r3, #3
 800d504:	3415      	adds	r4, #21
 800d506:	3304      	adds	r3, #4
 800d508:	42a6      	cmp	r6, r4
 800d50a:	bf38      	it	cc
 800d50c:	2304      	movcc	r3, #4
 800d50e:	441d      	add	r5, r3
 800d510:	445b      	add	r3, fp
 800d512:	461e      	mov	r6, r3
 800d514:	462c      	mov	r4, r5
 800d516:	4544      	cmp	r4, r8
 800d518:	d30e      	bcc.n	800d538 <__mdiff+0xf8>
 800d51a:	f108 0103 	add.w	r1, r8, #3
 800d51e:	1b49      	subs	r1, r1, r5
 800d520:	f021 0103 	bic.w	r1, r1, #3
 800d524:	3d03      	subs	r5, #3
 800d526:	45a8      	cmp	r8, r5
 800d528:	bf38      	it	cc
 800d52a:	2100      	movcc	r1, #0
 800d52c:	440b      	add	r3, r1
 800d52e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800d532:	b191      	cbz	r1, 800d55a <__mdiff+0x11a>
 800d534:	6117      	str	r7, [r2, #16]
 800d536:	e79d      	b.n	800d474 <__mdiff+0x34>
 800d538:	f854 1b04 	ldr.w	r1, [r4], #4
 800d53c:	46e6      	mov	lr, ip
 800d53e:	0c08      	lsrs	r0, r1, #16
 800d540:	fa1c fc81 	uxtah	ip, ip, r1
 800d544:	4471      	add	r1, lr
 800d546:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800d54a:	b289      	uxth	r1, r1
 800d54c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800d550:	f846 1b04 	str.w	r1, [r6], #4
 800d554:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800d558:	e7dd      	b.n	800d516 <__mdiff+0xd6>
 800d55a:	3f01      	subs	r7, #1
 800d55c:	e7e7      	b.n	800d52e <__mdiff+0xee>
 800d55e:	bf00      	nop
 800d560:	08010d49 	.word	0x08010d49
 800d564:	08010d5a 	.word	0x08010d5a

0800d568 <__ulp>:
 800d568:	b082      	sub	sp, #8
 800d56a:	ed8d 0b00 	vstr	d0, [sp]
 800d56e:	9a01      	ldr	r2, [sp, #4]
 800d570:	4b0f      	ldr	r3, [pc, #60]	@ (800d5b0 <__ulp+0x48>)
 800d572:	4013      	ands	r3, r2
 800d574:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800d578:	2b00      	cmp	r3, #0
 800d57a:	dc08      	bgt.n	800d58e <__ulp+0x26>
 800d57c:	425b      	negs	r3, r3
 800d57e:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800d582:	ea4f 5223 	mov.w	r2, r3, asr #20
 800d586:	da04      	bge.n	800d592 <__ulp+0x2a>
 800d588:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800d58c:	4113      	asrs	r3, r2
 800d58e:	2200      	movs	r2, #0
 800d590:	e008      	b.n	800d5a4 <__ulp+0x3c>
 800d592:	f1a2 0314 	sub.w	r3, r2, #20
 800d596:	2b1e      	cmp	r3, #30
 800d598:	bfda      	itte	le
 800d59a:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800d59e:	40da      	lsrle	r2, r3
 800d5a0:	2201      	movgt	r2, #1
 800d5a2:	2300      	movs	r3, #0
 800d5a4:	4619      	mov	r1, r3
 800d5a6:	4610      	mov	r0, r2
 800d5a8:	ec41 0b10 	vmov	d0, r0, r1
 800d5ac:	b002      	add	sp, #8
 800d5ae:	4770      	bx	lr
 800d5b0:	7ff00000 	.word	0x7ff00000

0800d5b4 <__b2d>:
 800d5b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d5b8:	6906      	ldr	r6, [r0, #16]
 800d5ba:	f100 0814 	add.w	r8, r0, #20
 800d5be:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800d5c2:	1f37      	subs	r7, r6, #4
 800d5c4:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800d5c8:	4610      	mov	r0, r2
 800d5ca:	f7ff fd53 	bl	800d074 <__hi0bits>
 800d5ce:	f1c0 0320 	rsb	r3, r0, #32
 800d5d2:	280a      	cmp	r0, #10
 800d5d4:	600b      	str	r3, [r1, #0]
 800d5d6:	491b      	ldr	r1, [pc, #108]	@ (800d644 <__b2d+0x90>)
 800d5d8:	dc15      	bgt.n	800d606 <__b2d+0x52>
 800d5da:	f1c0 0c0b 	rsb	ip, r0, #11
 800d5de:	fa22 f30c 	lsr.w	r3, r2, ip
 800d5e2:	45b8      	cmp	r8, r7
 800d5e4:	ea43 0501 	orr.w	r5, r3, r1
 800d5e8:	bf34      	ite	cc
 800d5ea:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800d5ee:	2300      	movcs	r3, #0
 800d5f0:	3015      	adds	r0, #21
 800d5f2:	fa02 f000 	lsl.w	r0, r2, r0
 800d5f6:	fa23 f30c 	lsr.w	r3, r3, ip
 800d5fa:	4303      	orrs	r3, r0
 800d5fc:	461c      	mov	r4, r3
 800d5fe:	ec45 4b10 	vmov	d0, r4, r5
 800d602:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d606:	45b8      	cmp	r8, r7
 800d608:	bf3a      	itte	cc
 800d60a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800d60e:	f1a6 0708 	subcc.w	r7, r6, #8
 800d612:	2300      	movcs	r3, #0
 800d614:	380b      	subs	r0, #11
 800d616:	d012      	beq.n	800d63e <__b2d+0x8a>
 800d618:	f1c0 0120 	rsb	r1, r0, #32
 800d61c:	fa23 f401 	lsr.w	r4, r3, r1
 800d620:	4082      	lsls	r2, r0
 800d622:	4322      	orrs	r2, r4
 800d624:	4547      	cmp	r7, r8
 800d626:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800d62a:	bf8c      	ite	hi
 800d62c:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800d630:	2200      	movls	r2, #0
 800d632:	4083      	lsls	r3, r0
 800d634:	40ca      	lsrs	r2, r1
 800d636:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800d63a:	4313      	orrs	r3, r2
 800d63c:	e7de      	b.n	800d5fc <__b2d+0x48>
 800d63e:	ea42 0501 	orr.w	r5, r2, r1
 800d642:	e7db      	b.n	800d5fc <__b2d+0x48>
 800d644:	3ff00000 	.word	0x3ff00000

0800d648 <__d2b>:
 800d648:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800d64c:	460f      	mov	r7, r1
 800d64e:	2101      	movs	r1, #1
 800d650:	ec59 8b10 	vmov	r8, r9, d0
 800d654:	4616      	mov	r6, r2
 800d656:	f7ff fc1b 	bl	800ce90 <_Balloc>
 800d65a:	4604      	mov	r4, r0
 800d65c:	b930      	cbnz	r0, 800d66c <__d2b+0x24>
 800d65e:	4602      	mov	r2, r0
 800d660:	4b23      	ldr	r3, [pc, #140]	@ (800d6f0 <__d2b+0xa8>)
 800d662:	4824      	ldr	r0, [pc, #144]	@ (800d6f4 <__d2b+0xac>)
 800d664:	f240 310f 	movw	r1, #783	@ 0x30f
 800d668:	f7fe fc9a 	bl	800bfa0 <__assert_func>
 800d66c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800d670:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800d674:	b10d      	cbz	r5, 800d67a <__d2b+0x32>
 800d676:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800d67a:	9301      	str	r3, [sp, #4]
 800d67c:	f1b8 0300 	subs.w	r3, r8, #0
 800d680:	d023      	beq.n	800d6ca <__d2b+0x82>
 800d682:	4668      	mov	r0, sp
 800d684:	9300      	str	r3, [sp, #0]
 800d686:	f7ff fd14 	bl	800d0b2 <__lo0bits>
 800d68a:	e9dd 1200 	ldrd	r1, r2, [sp]
 800d68e:	b1d0      	cbz	r0, 800d6c6 <__d2b+0x7e>
 800d690:	f1c0 0320 	rsb	r3, r0, #32
 800d694:	fa02 f303 	lsl.w	r3, r2, r3
 800d698:	430b      	orrs	r3, r1
 800d69a:	40c2      	lsrs	r2, r0
 800d69c:	6163      	str	r3, [r4, #20]
 800d69e:	9201      	str	r2, [sp, #4]
 800d6a0:	9b01      	ldr	r3, [sp, #4]
 800d6a2:	61a3      	str	r3, [r4, #24]
 800d6a4:	2b00      	cmp	r3, #0
 800d6a6:	bf0c      	ite	eq
 800d6a8:	2201      	moveq	r2, #1
 800d6aa:	2202      	movne	r2, #2
 800d6ac:	6122      	str	r2, [r4, #16]
 800d6ae:	b1a5      	cbz	r5, 800d6da <__d2b+0x92>
 800d6b0:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800d6b4:	4405      	add	r5, r0
 800d6b6:	603d      	str	r5, [r7, #0]
 800d6b8:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800d6bc:	6030      	str	r0, [r6, #0]
 800d6be:	4620      	mov	r0, r4
 800d6c0:	b003      	add	sp, #12
 800d6c2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d6c6:	6161      	str	r1, [r4, #20]
 800d6c8:	e7ea      	b.n	800d6a0 <__d2b+0x58>
 800d6ca:	a801      	add	r0, sp, #4
 800d6cc:	f7ff fcf1 	bl	800d0b2 <__lo0bits>
 800d6d0:	9b01      	ldr	r3, [sp, #4]
 800d6d2:	6163      	str	r3, [r4, #20]
 800d6d4:	3020      	adds	r0, #32
 800d6d6:	2201      	movs	r2, #1
 800d6d8:	e7e8      	b.n	800d6ac <__d2b+0x64>
 800d6da:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800d6de:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800d6e2:	6038      	str	r0, [r7, #0]
 800d6e4:	6918      	ldr	r0, [r3, #16]
 800d6e6:	f7ff fcc5 	bl	800d074 <__hi0bits>
 800d6ea:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800d6ee:	e7e5      	b.n	800d6bc <__d2b+0x74>
 800d6f0:	08010d49 	.word	0x08010d49
 800d6f4:	08010d5a 	.word	0x08010d5a

0800d6f8 <__ratio>:
 800d6f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d6fc:	b085      	sub	sp, #20
 800d6fe:	e9cd 1000 	strd	r1, r0, [sp]
 800d702:	a902      	add	r1, sp, #8
 800d704:	f7ff ff56 	bl	800d5b4 <__b2d>
 800d708:	9800      	ldr	r0, [sp, #0]
 800d70a:	a903      	add	r1, sp, #12
 800d70c:	ec55 4b10 	vmov	r4, r5, d0
 800d710:	f7ff ff50 	bl	800d5b4 <__b2d>
 800d714:	9b01      	ldr	r3, [sp, #4]
 800d716:	6919      	ldr	r1, [r3, #16]
 800d718:	9b00      	ldr	r3, [sp, #0]
 800d71a:	691b      	ldr	r3, [r3, #16]
 800d71c:	1ac9      	subs	r1, r1, r3
 800d71e:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800d722:	1a9b      	subs	r3, r3, r2
 800d724:	ec5b ab10 	vmov	sl, fp, d0
 800d728:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800d72c:	2b00      	cmp	r3, #0
 800d72e:	bfce      	itee	gt
 800d730:	462a      	movgt	r2, r5
 800d732:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800d736:	465a      	movle	r2, fp
 800d738:	462f      	mov	r7, r5
 800d73a:	46d9      	mov	r9, fp
 800d73c:	bfcc      	ite	gt
 800d73e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800d742:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800d746:	464b      	mov	r3, r9
 800d748:	4652      	mov	r2, sl
 800d74a:	4620      	mov	r0, r4
 800d74c:	4639      	mov	r1, r7
 800d74e:	f7f3 f885 	bl	800085c <__aeabi_ddiv>
 800d752:	ec41 0b10 	vmov	d0, r0, r1
 800d756:	b005      	add	sp, #20
 800d758:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800d75c <__copybits>:
 800d75c:	3901      	subs	r1, #1
 800d75e:	b570      	push	{r4, r5, r6, lr}
 800d760:	1149      	asrs	r1, r1, #5
 800d762:	6914      	ldr	r4, [r2, #16]
 800d764:	3101      	adds	r1, #1
 800d766:	f102 0314 	add.w	r3, r2, #20
 800d76a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800d76e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800d772:	1f05      	subs	r5, r0, #4
 800d774:	42a3      	cmp	r3, r4
 800d776:	d30c      	bcc.n	800d792 <__copybits+0x36>
 800d778:	1aa3      	subs	r3, r4, r2
 800d77a:	3b11      	subs	r3, #17
 800d77c:	f023 0303 	bic.w	r3, r3, #3
 800d780:	3211      	adds	r2, #17
 800d782:	42a2      	cmp	r2, r4
 800d784:	bf88      	it	hi
 800d786:	2300      	movhi	r3, #0
 800d788:	4418      	add	r0, r3
 800d78a:	2300      	movs	r3, #0
 800d78c:	4288      	cmp	r0, r1
 800d78e:	d305      	bcc.n	800d79c <__copybits+0x40>
 800d790:	bd70      	pop	{r4, r5, r6, pc}
 800d792:	f853 6b04 	ldr.w	r6, [r3], #4
 800d796:	f845 6f04 	str.w	r6, [r5, #4]!
 800d79a:	e7eb      	b.n	800d774 <__copybits+0x18>
 800d79c:	f840 3b04 	str.w	r3, [r0], #4
 800d7a0:	e7f4      	b.n	800d78c <__copybits+0x30>

0800d7a2 <__any_on>:
 800d7a2:	f100 0214 	add.w	r2, r0, #20
 800d7a6:	6900      	ldr	r0, [r0, #16]
 800d7a8:	114b      	asrs	r3, r1, #5
 800d7aa:	4298      	cmp	r0, r3
 800d7ac:	b510      	push	{r4, lr}
 800d7ae:	db11      	blt.n	800d7d4 <__any_on+0x32>
 800d7b0:	dd0a      	ble.n	800d7c8 <__any_on+0x26>
 800d7b2:	f011 011f 	ands.w	r1, r1, #31
 800d7b6:	d007      	beq.n	800d7c8 <__any_on+0x26>
 800d7b8:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800d7bc:	fa24 f001 	lsr.w	r0, r4, r1
 800d7c0:	fa00 f101 	lsl.w	r1, r0, r1
 800d7c4:	428c      	cmp	r4, r1
 800d7c6:	d10b      	bne.n	800d7e0 <__any_on+0x3e>
 800d7c8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800d7cc:	4293      	cmp	r3, r2
 800d7ce:	d803      	bhi.n	800d7d8 <__any_on+0x36>
 800d7d0:	2000      	movs	r0, #0
 800d7d2:	bd10      	pop	{r4, pc}
 800d7d4:	4603      	mov	r3, r0
 800d7d6:	e7f7      	b.n	800d7c8 <__any_on+0x26>
 800d7d8:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800d7dc:	2900      	cmp	r1, #0
 800d7de:	d0f5      	beq.n	800d7cc <__any_on+0x2a>
 800d7e0:	2001      	movs	r0, #1
 800d7e2:	e7f6      	b.n	800d7d2 <__any_on+0x30>

0800d7e4 <sulp>:
 800d7e4:	b570      	push	{r4, r5, r6, lr}
 800d7e6:	4604      	mov	r4, r0
 800d7e8:	460d      	mov	r5, r1
 800d7ea:	ec45 4b10 	vmov	d0, r4, r5
 800d7ee:	4616      	mov	r6, r2
 800d7f0:	f7ff feba 	bl	800d568 <__ulp>
 800d7f4:	ec51 0b10 	vmov	r0, r1, d0
 800d7f8:	b17e      	cbz	r6, 800d81a <sulp+0x36>
 800d7fa:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800d7fe:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800d802:	2b00      	cmp	r3, #0
 800d804:	dd09      	ble.n	800d81a <sulp+0x36>
 800d806:	051b      	lsls	r3, r3, #20
 800d808:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800d80c:	2400      	movs	r4, #0
 800d80e:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800d812:	4622      	mov	r2, r4
 800d814:	462b      	mov	r3, r5
 800d816:	f7f2 fef7 	bl	8000608 <__aeabi_dmul>
 800d81a:	ec41 0b10 	vmov	d0, r0, r1
 800d81e:	bd70      	pop	{r4, r5, r6, pc}

0800d820 <_strtod_l>:
 800d820:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d824:	b09f      	sub	sp, #124	@ 0x7c
 800d826:	460c      	mov	r4, r1
 800d828:	9217      	str	r2, [sp, #92]	@ 0x5c
 800d82a:	2200      	movs	r2, #0
 800d82c:	921a      	str	r2, [sp, #104]	@ 0x68
 800d82e:	9005      	str	r0, [sp, #20]
 800d830:	f04f 0a00 	mov.w	sl, #0
 800d834:	f04f 0b00 	mov.w	fp, #0
 800d838:	460a      	mov	r2, r1
 800d83a:	9219      	str	r2, [sp, #100]	@ 0x64
 800d83c:	7811      	ldrb	r1, [r2, #0]
 800d83e:	292b      	cmp	r1, #43	@ 0x2b
 800d840:	d04a      	beq.n	800d8d8 <_strtod_l+0xb8>
 800d842:	d838      	bhi.n	800d8b6 <_strtod_l+0x96>
 800d844:	290d      	cmp	r1, #13
 800d846:	d832      	bhi.n	800d8ae <_strtod_l+0x8e>
 800d848:	2908      	cmp	r1, #8
 800d84a:	d832      	bhi.n	800d8b2 <_strtod_l+0x92>
 800d84c:	2900      	cmp	r1, #0
 800d84e:	d03b      	beq.n	800d8c8 <_strtod_l+0xa8>
 800d850:	2200      	movs	r2, #0
 800d852:	920e      	str	r2, [sp, #56]	@ 0x38
 800d854:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800d856:	782a      	ldrb	r2, [r5, #0]
 800d858:	2a30      	cmp	r2, #48	@ 0x30
 800d85a:	f040 80b2 	bne.w	800d9c2 <_strtod_l+0x1a2>
 800d85e:	786a      	ldrb	r2, [r5, #1]
 800d860:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800d864:	2a58      	cmp	r2, #88	@ 0x58
 800d866:	d16e      	bne.n	800d946 <_strtod_l+0x126>
 800d868:	9302      	str	r3, [sp, #8]
 800d86a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d86c:	9301      	str	r3, [sp, #4]
 800d86e:	ab1a      	add	r3, sp, #104	@ 0x68
 800d870:	9300      	str	r3, [sp, #0]
 800d872:	4a8f      	ldr	r2, [pc, #572]	@ (800dab0 <_strtod_l+0x290>)
 800d874:	9805      	ldr	r0, [sp, #20]
 800d876:	ab1b      	add	r3, sp, #108	@ 0x6c
 800d878:	a919      	add	r1, sp, #100	@ 0x64
 800d87a:	f001 fadb 	bl	800ee34 <__gethex>
 800d87e:	f010 060f 	ands.w	r6, r0, #15
 800d882:	4604      	mov	r4, r0
 800d884:	d005      	beq.n	800d892 <_strtod_l+0x72>
 800d886:	2e06      	cmp	r6, #6
 800d888:	d128      	bne.n	800d8dc <_strtod_l+0xbc>
 800d88a:	3501      	adds	r5, #1
 800d88c:	2300      	movs	r3, #0
 800d88e:	9519      	str	r5, [sp, #100]	@ 0x64
 800d890:	930e      	str	r3, [sp, #56]	@ 0x38
 800d892:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800d894:	2b00      	cmp	r3, #0
 800d896:	f040 858e 	bne.w	800e3b6 <_strtod_l+0xb96>
 800d89a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d89c:	b1cb      	cbz	r3, 800d8d2 <_strtod_l+0xb2>
 800d89e:	4652      	mov	r2, sl
 800d8a0:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800d8a4:	ec43 2b10 	vmov	d0, r2, r3
 800d8a8:	b01f      	add	sp, #124	@ 0x7c
 800d8aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d8ae:	2920      	cmp	r1, #32
 800d8b0:	d1ce      	bne.n	800d850 <_strtod_l+0x30>
 800d8b2:	3201      	adds	r2, #1
 800d8b4:	e7c1      	b.n	800d83a <_strtod_l+0x1a>
 800d8b6:	292d      	cmp	r1, #45	@ 0x2d
 800d8b8:	d1ca      	bne.n	800d850 <_strtod_l+0x30>
 800d8ba:	2101      	movs	r1, #1
 800d8bc:	910e      	str	r1, [sp, #56]	@ 0x38
 800d8be:	1c51      	adds	r1, r2, #1
 800d8c0:	9119      	str	r1, [sp, #100]	@ 0x64
 800d8c2:	7852      	ldrb	r2, [r2, #1]
 800d8c4:	2a00      	cmp	r2, #0
 800d8c6:	d1c5      	bne.n	800d854 <_strtod_l+0x34>
 800d8c8:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800d8ca:	9419      	str	r4, [sp, #100]	@ 0x64
 800d8cc:	2b00      	cmp	r3, #0
 800d8ce:	f040 8570 	bne.w	800e3b2 <_strtod_l+0xb92>
 800d8d2:	4652      	mov	r2, sl
 800d8d4:	465b      	mov	r3, fp
 800d8d6:	e7e5      	b.n	800d8a4 <_strtod_l+0x84>
 800d8d8:	2100      	movs	r1, #0
 800d8da:	e7ef      	b.n	800d8bc <_strtod_l+0x9c>
 800d8dc:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800d8de:	b13a      	cbz	r2, 800d8f0 <_strtod_l+0xd0>
 800d8e0:	2135      	movs	r1, #53	@ 0x35
 800d8e2:	a81c      	add	r0, sp, #112	@ 0x70
 800d8e4:	f7ff ff3a 	bl	800d75c <__copybits>
 800d8e8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800d8ea:	9805      	ldr	r0, [sp, #20]
 800d8ec:	f7ff fb10 	bl	800cf10 <_Bfree>
 800d8f0:	3e01      	subs	r6, #1
 800d8f2:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800d8f4:	2e04      	cmp	r6, #4
 800d8f6:	d806      	bhi.n	800d906 <_strtod_l+0xe6>
 800d8f8:	e8df f006 	tbb	[pc, r6]
 800d8fc:	201d0314 	.word	0x201d0314
 800d900:	14          	.byte	0x14
 800d901:	00          	.byte	0x00
 800d902:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800d906:	05e1      	lsls	r1, r4, #23
 800d908:	bf48      	it	mi
 800d90a:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800d90e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800d912:	0d1b      	lsrs	r3, r3, #20
 800d914:	051b      	lsls	r3, r3, #20
 800d916:	2b00      	cmp	r3, #0
 800d918:	d1bb      	bne.n	800d892 <_strtod_l+0x72>
 800d91a:	f7fe faff 	bl	800bf1c <__errno>
 800d91e:	2322      	movs	r3, #34	@ 0x22
 800d920:	6003      	str	r3, [r0, #0]
 800d922:	e7b6      	b.n	800d892 <_strtod_l+0x72>
 800d924:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800d928:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800d92c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800d930:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800d934:	e7e7      	b.n	800d906 <_strtod_l+0xe6>
 800d936:	f8df b180 	ldr.w	fp, [pc, #384]	@ 800dab8 <_strtod_l+0x298>
 800d93a:	e7e4      	b.n	800d906 <_strtod_l+0xe6>
 800d93c:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800d940:	f04f 3aff 	mov.w	sl, #4294967295
 800d944:	e7df      	b.n	800d906 <_strtod_l+0xe6>
 800d946:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800d948:	1c5a      	adds	r2, r3, #1
 800d94a:	9219      	str	r2, [sp, #100]	@ 0x64
 800d94c:	785b      	ldrb	r3, [r3, #1]
 800d94e:	2b30      	cmp	r3, #48	@ 0x30
 800d950:	d0f9      	beq.n	800d946 <_strtod_l+0x126>
 800d952:	2b00      	cmp	r3, #0
 800d954:	d09d      	beq.n	800d892 <_strtod_l+0x72>
 800d956:	2301      	movs	r3, #1
 800d958:	2700      	movs	r7, #0
 800d95a:	9308      	str	r3, [sp, #32]
 800d95c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800d95e:	930c      	str	r3, [sp, #48]	@ 0x30
 800d960:	970b      	str	r7, [sp, #44]	@ 0x2c
 800d962:	46b9      	mov	r9, r7
 800d964:	220a      	movs	r2, #10
 800d966:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800d968:	7805      	ldrb	r5, [r0, #0]
 800d96a:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800d96e:	b2d9      	uxtb	r1, r3
 800d970:	2909      	cmp	r1, #9
 800d972:	d928      	bls.n	800d9c6 <_strtod_l+0x1a6>
 800d974:	494f      	ldr	r1, [pc, #316]	@ (800dab4 <_strtod_l+0x294>)
 800d976:	2201      	movs	r2, #1
 800d978:	f001 f98c 	bl	800ec94 <strncmp>
 800d97c:	2800      	cmp	r0, #0
 800d97e:	d032      	beq.n	800d9e6 <_strtod_l+0x1c6>
 800d980:	2000      	movs	r0, #0
 800d982:	462a      	mov	r2, r5
 800d984:	900a      	str	r0, [sp, #40]	@ 0x28
 800d986:	464d      	mov	r5, r9
 800d988:	4603      	mov	r3, r0
 800d98a:	2a65      	cmp	r2, #101	@ 0x65
 800d98c:	d001      	beq.n	800d992 <_strtod_l+0x172>
 800d98e:	2a45      	cmp	r2, #69	@ 0x45
 800d990:	d114      	bne.n	800d9bc <_strtod_l+0x19c>
 800d992:	b91d      	cbnz	r5, 800d99c <_strtod_l+0x17c>
 800d994:	9a08      	ldr	r2, [sp, #32]
 800d996:	4302      	orrs	r2, r0
 800d998:	d096      	beq.n	800d8c8 <_strtod_l+0xa8>
 800d99a:	2500      	movs	r5, #0
 800d99c:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800d99e:	1c62      	adds	r2, r4, #1
 800d9a0:	9219      	str	r2, [sp, #100]	@ 0x64
 800d9a2:	7862      	ldrb	r2, [r4, #1]
 800d9a4:	2a2b      	cmp	r2, #43	@ 0x2b
 800d9a6:	d07a      	beq.n	800da9e <_strtod_l+0x27e>
 800d9a8:	2a2d      	cmp	r2, #45	@ 0x2d
 800d9aa:	d07e      	beq.n	800daaa <_strtod_l+0x28a>
 800d9ac:	f04f 0c00 	mov.w	ip, #0
 800d9b0:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800d9b4:	2909      	cmp	r1, #9
 800d9b6:	f240 8085 	bls.w	800dac4 <_strtod_l+0x2a4>
 800d9ba:	9419      	str	r4, [sp, #100]	@ 0x64
 800d9bc:	f04f 0800 	mov.w	r8, #0
 800d9c0:	e0a5      	b.n	800db0e <_strtod_l+0x2ee>
 800d9c2:	2300      	movs	r3, #0
 800d9c4:	e7c8      	b.n	800d958 <_strtod_l+0x138>
 800d9c6:	f1b9 0f08 	cmp.w	r9, #8
 800d9ca:	bfd8      	it	le
 800d9cc:	990b      	ldrle	r1, [sp, #44]	@ 0x2c
 800d9ce:	f100 0001 	add.w	r0, r0, #1
 800d9d2:	bfda      	itte	le
 800d9d4:	fb02 3301 	mlale	r3, r2, r1, r3
 800d9d8:	930b      	strle	r3, [sp, #44]	@ 0x2c
 800d9da:	fb02 3707 	mlagt	r7, r2, r7, r3
 800d9de:	f109 0901 	add.w	r9, r9, #1
 800d9e2:	9019      	str	r0, [sp, #100]	@ 0x64
 800d9e4:	e7bf      	b.n	800d966 <_strtod_l+0x146>
 800d9e6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800d9e8:	1c5a      	adds	r2, r3, #1
 800d9ea:	9219      	str	r2, [sp, #100]	@ 0x64
 800d9ec:	785a      	ldrb	r2, [r3, #1]
 800d9ee:	f1b9 0f00 	cmp.w	r9, #0
 800d9f2:	d03b      	beq.n	800da6c <_strtod_l+0x24c>
 800d9f4:	900a      	str	r0, [sp, #40]	@ 0x28
 800d9f6:	464d      	mov	r5, r9
 800d9f8:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800d9fc:	2b09      	cmp	r3, #9
 800d9fe:	d912      	bls.n	800da26 <_strtod_l+0x206>
 800da00:	2301      	movs	r3, #1
 800da02:	e7c2      	b.n	800d98a <_strtod_l+0x16a>
 800da04:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800da06:	1c5a      	adds	r2, r3, #1
 800da08:	9219      	str	r2, [sp, #100]	@ 0x64
 800da0a:	785a      	ldrb	r2, [r3, #1]
 800da0c:	3001      	adds	r0, #1
 800da0e:	2a30      	cmp	r2, #48	@ 0x30
 800da10:	d0f8      	beq.n	800da04 <_strtod_l+0x1e4>
 800da12:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800da16:	2b08      	cmp	r3, #8
 800da18:	f200 84d2 	bhi.w	800e3c0 <_strtod_l+0xba0>
 800da1c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800da1e:	900a      	str	r0, [sp, #40]	@ 0x28
 800da20:	2000      	movs	r0, #0
 800da22:	930c      	str	r3, [sp, #48]	@ 0x30
 800da24:	4605      	mov	r5, r0
 800da26:	3a30      	subs	r2, #48	@ 0x30
 800da28:	f100 0301 	add.w	r3, r0, #1
 800da2c:	d018      	beq.n	800da60 <_strtod_l+0x240>
 800da2e:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800da30:	4419      	add	r1, r3
 800da32:	910a      	str	r1, [sp, #40]	@ 0x28
 800da34:	462e      	mov	r6, r5
 800da36:	f04f 0e0a 	mov.w	lr, #10
 800da3a:	1c71      	adds	r1, r6, #1
 800da3c:	eba1 0c05 	sub.w	ip, r1, r5
 800da40:	4563      	cmp	r3, ip
 800da42:	dc15      	bgt.n	800da70 <_strtod_l+0x250>
 800da44:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 800da48:	182b      	adds	r3, r5, r0
 800da4a:	2b08      	cmp	r3, #8
 800da4c:	f105 0501 	add.w	r5, r5, #1
 800da50:	4405      	add	r5, r0
 800da52:	dc1a      	bgt.n	800da8a <_strtod_l+0x26a>
 800da54:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800da56:	230a      	movs	r3, #10
 800da58:	fb03 2301 	mla	r3, r3, r1, r2
 800da5c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800da5e:	2300      	movs	r3, #0
 800da60:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800da62:	1c51      	adds	r1, r2, #1
 800da64:	9119      	str	r1, [sp, #100]	@ 0x64
 800da66:	7852      	ldrb	r2, [r2, #1]
 800da68:	4618      	mov	r0, r3
 800da6a:	e7c5      	b.n	800d9f8 <_strtod_l+0x1d8>
 800da6c:	4648      	mov	r0, r9
 800da6e:	e7ce      	b.n	800da0e <_strtod_l+0x1ee>
 800da70:	2e08      	cmp	r6, #8
 800da72:	dc05      	bgt.n	800da80 <_strtod_l+0x260>
 800da74:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800da76:	fb0e f606 	mul.w	r6, lr, r6
 800da7a:	960b      	str	r6, [sp, #44]	@ 0x2c
 800da7c:	460e      	mov	r6, r1
 800da7e:	e7dc      	b.n	800da3a <_strtod_l+0x21a>
 800da80:	2910      	cmp	r1, #16
 800da82:	bfd8      	it	le
 800da84:	fb0e f707 	mulle.w	r7, lr, r7
 800da88:	e7f8      	b.n	800da7c <_strtod_l+0x25c>
 800da8a:	2b0f      	cmp	r3, #15
 800da8c:	bfdc      	itt	le
 800da8e:	230a      	movle	r3, #10
 800da90:	fb03 2707 	mlale	r7, r3, r7, r2
 800da94:	e7e3      	b.n	800da5e <_strtod_l+0x23e>
 800da96:	2300      	movs	r3, #0
 800da98:	930a      	str	r3, [sp, #40]	@ 0x28
 800da9a:	2301      	movs	r3, #1
 800da9c:	e77a      	b.n	800d994 <_strtod_l+0x174>
 800da9e:	f04f 0c00 	mov.w	ip, #0
 800daa2:	1ca2      	adds	r2, r4, #2
 800daa4:	9219      	str	r2, [sp, #100]	@ 0x64
 800daa6:	78a2      	ldrb	r2, [r4, #2]
 800daa8:	e782      	b.n	800d9b0 <_strtod_l+0x190>
 800daaa:	f04f 0c01 	mov.w	ip, #1
 800daae:	e7f8      	b.n	800daa2 <_strtod_l+0x282>
 800dab0:	08010f44 	.word	0x08010f44
 800dab4:	08010db3 	.word	0x08010db3
 800dab8:	7ff00000 	.word	0x7ff00000
 800dabc:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800dabe:	1c51      	adds	r1, r2, #1
 800dac0:	9119      	str	r1, [sp, #100]	@ 0x64
 800dac2:	7852      	ldrb	r2, [r2, #1]
 800dac4:	2a30      	cmp	r2, #48	@ 0x30
 800dac6:	d0f9      	beq.n	800dabc <_strtod_l+0x29c>
 800dac8:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800dacc:	2908      	cmp	r1, #8
 800dace:	f63f af75 	bhi.w	800d9bc <_strtod_l+0x19c>
 800dad2:	3a30      	subs	r2, #48	@ 0x30
 800dad4:	9209      	str	r2, [sp, #36]	@ 0x24
 800dad6:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800dad8:	920f      	str	r2, [sp, #60]	@ 0x3c
 800dada:	f04f 080a 	mov.w	r8, #10
 800dade:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800dae0:	1c56      	adds	r6, r2, #1
 800dae2:	9619      	str	r6, [sp, #100]	@ 0x64
 800dae4:	7852      	ldrb	r2, [r2, #1]
 800dae6:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800daea:	f1be 0f09 	cmp.w	lr, #9
 800daee:	d939      	bls.n	800db64 <_strtod_l+0x344>
 800daf0:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800daf2:	1a76      	subs	r6, r6, r1
 800daf4:	2e08      	cmp	r6, #8
 800daf6:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800dafa:	dc03      	bgt.n	800db04 <_strtod_l+0x2e4>
 800dafc:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800dafe:	4588      	cmp	r8, r1
 800db00:	bfa8      	it	ge
 800db02:	4688      	movge	r8, r1
 800db04:	f1bc 0f00 	cmp.w	ip, #0
 800db08:	d001      	beq.n	800db0e <_strtod_l+0x2ee>
 800db0a:	f1c8 0800 	rsb	r8, r8, #0
 800db0e:	2d00      	cmp	r5, #0
 800db10:	d14e      	bne.n	800dbb0 <_strtod_l+0x390>
 800db12:	9908      	ldr	r1, [sp, #32]
 800db14:	4308      	orrs	r0, r1
 800db16:	f47f aebc 	bne.w	800d892 <_strtod_l+0x72>
 800db1a:	2b00      	cmp	r3, #0
 800db1c:	f47f aed4 	bne.w	800d8c8 <_strtod_l+0xa8>
 800db20:	2a69      	cmp	r2, #105	@ 0x69
 800db22:	d028      	beq.n	800db76 <_strtod_l+0x356>
 800db24:	dc25      	bgt.n	800db72 <_strtod_l+0x352>
 800db26:	2a49      	cmp	r2, #73	@ 0x49
 800db28:	d025      	beq.n	800db76 <_strtod_l+0x356>
 800db2a:	2a4e      	cmp	r2, #78	@ 0x4e
 800db2c:	f47f aecc 	bne.w	800d8c8 <_strtod_l+0xa8>
 800db30:	499a      	ldr	r1, [pc, #616]	@ (800dd9c <_strtod_l+0x57c>)
 800db32:	a819      	add	r0, sp, #100	@ 0x64
 800db34:	f001 fba0 	bl	800f278 <__match>
 800db38:	2800      	cmp	r0, #0
 800db3a:	f43f aec5 	beq.w	800d8c8 <_strtod_l+0xa8>
 800db3e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800db40:	781b      	ldrb	r3, [r3, #0]
 800db42:	2b28      	cmp	r3, #40	@ 0x28
 800db44:	d12e      	bne.n	800dba4 <_strtod_l+0x384>
 800db46:	4996      	ldr	r1, [pc, #600]	@ (800dda0 <_strtod_l+0x580>)
 800db48:	aa1c      	add	r2, sp, #112	@ 0x70
 800db4a:	a819      	add	r0, sp, #100	@ 0x64
 800db4c:	f001 fba8 	bl	800f2a0 <__hexnan>
 800db50:	2805      	cmp	r0, #5
 800db52:	d127      	bne.n	800dba4 <_strtod_l+0x384>
 800db54:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800db56:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800db5a:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800db5e:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800db62:	e696      	b.n	800d892 <_strtod_l+0x72>
 800db64:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800db66:	fb08 2101 	mla	r1, r8, r1, r2
 800db6a:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800db6e:	9209      	str	r2, [sp, #36]	@ 0x24
 800db70:	e7b5      	b.n	800dade <_strtod_l+0x2be>
 800db72:	2a6e      	cmp	r2, #110	@ 0x6e
 800db74:	e7da      	b.n	800db2c <_strtod_l+0x30c>
 800db76:	498b      	ldr	r1, [pc, #556]	@ (800dda4 <_strtod_l+0x584>)
 800db78:	a819      	add	r0, sp, #100	@ 0x64
 800db7a:	f001 fb7d 	bl	800f278 <__match>
 800db7e:	2800      	cmp	r0, #0
 800db80:	f43f aea2 	beq.w	800d8c8 <_strtod_l+0xa8>
 800db84:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800db86:	4988      	ldr	r1, [pc, #544]	@ (800dda8 <_strtod_l+0x588>)
 800db88:	3b01      	subs	r3, #1
 800db8a:	a819      	add	r0, sp, #100	@ 0x64
 800db8c:	9319      	str	r3, [sp, #100]	@ 0x64
 800db8e:	f001 fb73 	bl	800f278 <__match>
 800db92:	b910      	cbnz	r0, 800db9a <_strtod_l+0x37a>
 800db94:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800db96:	3301      	adds	r3, #1
 800db98:	9319      	str	r3, [sp, #100]	@ 0x64
 800db9a:	f8df b21c 	ldr.w	fp, [pc, #540]	@ 800ddb8 <_strtod_l+0x598>
 800db9e:	f04f 0a00 	mov.w	sl, #0
 800dba2:	e676      	b.n	800d892 <_strtod_l+0x72>
 800dba4:	4881      	ldr	r0, [pc, #516]	@ (800ddac <_strtod_l+0x58c>)
 800dba6:	f001 f8bb 	bl	800ed20 <nan>
 800dbaa:	ec5b ab10 	vmov	sl, fp, d0
 800dbae:	e670      	b.n	800d892 <_strtod_l+0x72>
 800dbb0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800dbb2:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 800dbb4:	eba8 0303 	sub.w	r3, r8, r3
 800dbb8:	f1b9 0f00 	cmp.w	r9, #0
 800dbbc:	bf08      	it	eq
 800dbbe:	46a9      	moveq	r9, r5
 800dbc0:	2d10      	cmp	r5, #16
 800dbc2:	9309      	str	r3, [sp, #36]	@ 0x24
 800dbc4:	462c      	mov	r4, r5
 800dbc6:	bfa8      	it	ge
 800dbc8:	2410      	movge	r4, #16
 800dbca:	f7f2 fca3 	bl	8000514 <__aeabi_ui2d>
 800dbce:	2d09      	cmp	r5, #9
 800dbd0:	4682      	mov	sl, r0
 800dbd2:	468b      	mov	fp, r1
 800dbd4:	dc13      	bgt.n	800dbfe <_strtod_l+0x3de>
 800dbd6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dbd8:	2b00      	cmp	r3, #0
 800dbda:	f43f ae5a 	beq.w	800d892 <_strtod_l+0x72>
 800dbde:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dbe0:	dd78      	ble.n	800dcd4 <_strtod_l+0x4b4>
 800dbe2:	2b16      	cmp	r3, #22
 800dbe4:	dc5f      	bgt.n	800dca6 <_strtod_l+0x486>
 800dbe6:	4972      	ldr	r1, [pc, #456]	@ (800ddb0 <_strtod_l+0x590>)
 800dbe8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800dbec:	e9d1 0100 	ldrd	r0, r1, [r1]
 800dbf0:	4652      	mov	r2, sl
 800dbf2:	465b      	mov	r3, fp
 800dbf4:	f7f2 fd08 	bl	8000608 <__aeabi_dmul>
 800dbf8:	4682      	mov	sl, r0
 800dbfa:	468b      	mov	fp, r1
 800dbfc:	e649      	b.n	800d892 <_strtod_l+0x72>
 800dbfe:	4b6c      	ldr	r3, [pc, #432]	@ (800ddb0 <_strtod_l+0x590>)
 800dc00:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800dc04:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800dc08:	f7f2 fcfe 	bl	8000608 <__aeabi_dmul>
 800dc0c:	4682      	mov	sl, r0
 800dc0e:	4638      	mov	r0, r7
 800dc10:	468b      	mov	fp, r1
 800dc12:	f7f2 fc7f 	bl	8000514 <__aeabi_ui2d>
 800dc16:	4602      	mov	r2, r0
 800dc18:	460b      	mov	r3, r1
 800dc1a:	4650      	mov	r0, sl
 800dc1c:	4659      	mov	r1, fp
 800dc1e:	f7f2 fb3d 	bl	800029c <__adddf3>
 800dc22:	2d0f      	cmp	r5, #15
 800dc24:	4682      	mov	sl, r0
 800dc26:	468b      	mov	fp, r1
 800dc28:	ddd5      	ble.n	800dbd6 <_strtod_l+0x3b6>
 800dc2a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dc2c:	1b2c      	subs	r4, r5, r4
 800dc2e:	441c      	add	r4, r3
 800dc30:	2c00      	cmp	r4, #0
 800dc32:	f340 8093 	ble.w	800dd5c <_strtod_l+0x53c>
 800dc36:	f014 030f 	ands.w	r3, r4, #15
 800dc3a:	d00a      	beq.n	800dc52 <_strtod_l+0x432>
 800dc3c:	495c      	ldr	r1, [pc, #368]	@ (800ddb0 <_strtod_l+0x590>)
 800dc3e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800dc42:	4652      	mov	r2, sl
 800dc44:	465b      	mov	r3, fp
 800dc46:	e9d1 0100 	ldrd	r0, r1, [r1]
 800dc4a:	f7f2 fcdd 	bl	8000608 <__aeabi_dmul>
 800dc4e:	4682      	mov	sl, r0
 800dc50:	468b      	mov	fp, r1
 800dc52:	f034 040f 	bics.w	r4, r4, #15
 800dc56:	d073      	beq.n	800dd40 <_strtod_l+0x520>
 800dc58:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800dc5c:	dd49      	ble.n	800dcf2 <_strtod_l+0x4d2>
 800dc5e:	2400      	movs	r4, #0
 800dc60:	46a0      	mov	r8, r4
 800dc62:	940b      	str	r4, [sp, #44]	@ 0x2c
 800dc64:	46a1      	mov	r9, r4
 800dc66:	9a05      	ldr	r2, [sp, #20]
 800dc68:	f8df b14c 	ldr.w	fp, [pc, #332]	@ 800ddb8 <_strtod_l+0x598>
 800dc6c:	2322      	movs	r3, #34	@ 0x22
 800dc6e:	6013      	str	r3, [r2, #0]
 800dc70:	f04f 0a00 	mov.w	sl, #0
 800dc74:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800dc76:	2b00      	cmp	r3, #0
 800dc78:	f43f ae0b 	beq.w	800d892 <_strtod_l+0x72>
 800dc7c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800dc7e:	9805      	ldr	r0, [sp, #20]
 800dc80:	f7ff f946 	bl	800cf10 <_Bfree>
 800dc84:	9805      	ldr	r0, [sp, #20]
 800dc86:	4649      	mov	r1, r9
 800dc88:	f7ff f942 	bl	800cf10 <_Bfree>
 800dc8c:	9805      	ldr	r0, [sp, #20]
 800dc8e:	4641      	mov	r1, r8
 800dc90:	f7ff f93e 	bl	800cf10 <_Bfree>
 800dc94:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800dc96:	9805      	ldr	r0, [sp, #20]
 800dc98:	f7ff f93a 	bl	800cf10 <_Bfree>
 800dc9c:	9805      	ldr	r0, [sp, #20]
 800dc9e:	4621      	mov	r1, r4
 800dca0:	f7ff f936 	bl	800cf10 <_Bfree>
 800dca4:	e5f5      	b.n	800d892 <_strtod_l+0x72>
 800dca6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800dca8:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800dcac:	4293      	cmp	r3, r2
 800dcae:	dbbc      	blt.n	800dc2a <_strtod_l+0x40a>
 800dcb0:	4c3f      	ldr	r4, [pc, #252]	@ (800ddb0 <_strtod_l+0x590>)
 800dcb2:	f1c5 050f 	rsb	r5, r5, #15
 800dcb6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800dcba:	4652      	mov	r2, sl
 800dcbc:	465b      	mov	r3, fp
 800dcbe:	e9d1 0100 	ldrd	r0, r1, [r1]
 800dcc2:	f7f2 fca1 	bl	8000608 <__aeabi_dmul>
 800dcc6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dcc8:	1b5d      	subs	r5, r3, r5
 800dcca:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800dcce:	e9d4 2300 	ldrd	r2, r3, [r4]
 800dcd2:	e78f      	b.n	800dbf4 <_strtod_l+0x3d4>
 800dcd4:	3316      	adds	r3, #22
 800dcd6:	dba8      	blt.n	800dc2a <_strtod_l+0x40a>
 800dcd8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800dcda:	eba3 0808 	sub.w	r8, r3, r8
 800dcde:	4b34      	ldr	r3, [pc, #208]	@ (800ddb0 <_strtod_l+0x590>)
 800dce0:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800dce4:	e9d8 2300 	ldrd	r2, r3, [r8]
 800dce8:	4650      	mov	r0, sl
 800dcea:	4659      	mov	r1, fp
 800dcec:	f7f2 fdb6 	bl	800085c <__aeabi_ddiv>
 800dcf0:	e782      	b.n	800dbf8 <_strtod_l+0x3d8>
 800dcf2:	2300      	movs	r3, #0
 800dcf4:	4f2f      	ldr	r7, [pc, #188]	@ (800ddb4 <_strtod_l+0x594>)
 800dcf6:	1124      	asrs	r4, r4, #4
 800dcf8:	4650      	mov	r0, sl
 800dcfa:	4659      	mov	r1, fp
 800dcfc:	461e      	mov	r6, r3
 800dcfe:	2c01      	cmp	r4, #1
 800dd00:	dc21      	bgt.n	800dd46 <_strtod_l+0x526>
 800dd02:	b10b      	cbz	r3, 800dd08 <_strtod_l+0x4e8>
 800dd04:	4682      	mov	sl, r0
 800dd06:	468b      	mov	fp, r1
 800dd08:	492a      	ldr	r1, [pc, #168]	@ (800ddb4 <_strtod_l+0x594>)
 800dd0a:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800dd0e:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800dd12:	4652      	mov	r2, sl
 800dd14:	465b      	mov	r3, fp
 800dd16:	e9d1 0100 	ldrd	r0, r1, [r1]
 800dd1a:	f7f2 fc75 	bl	8000608 <__aeabi_dmul>
 800dd1e:	4b26      	ldr	r3, [pc, #152]	@ (800ddb8 <_strtod_l+0x598>)
 800dd20:	460a      	mov	r2, r1
 800dd22:	400b      	ands	r3, r1
 800dd24:	4925      	ldr	r1, [pc, #148]	@ (800ddbc <_strtod_l+0x59c>)
 800dd26:	428b      	cmp	r3, r1
 800dd28:	4682      	mov	sl, r0
 800dd2a:	d898      	bhi.n	800dc5e <_strtod_l+0x43e>
 800dd2c:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800dd30:	428b      	cmp	r3, r1
 800dd32:	bf86      	itte	hi
 800dd34:	f8df b088 	ldrhi.w	fp, [pc, #136]	@ 800ddc0 <_strtod_l+0x5a0>
 800dd38:	f04f 3aff 	movhi.w	sl, #4294967295
 800dd3c:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800dd40:	2300      	movs	r3, #0
 800dd42:	9308      	str	r3, [sp, #32]
 800dd44:	e076      	b.n	800de34 <_strtod_l+0x614>
 800dd46:	07e2      	lsls	r2, r4, #31
 800dd48:	d504      	bpl.n	800dd54 <_strtod_l+0x534>
 800dd4a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800dd4e:	f7f2 fc5b 	bl	8000608 <__aeabi_dmul>
 800dd52:	2301      	movs	r3, #1
 800dd54:	3601      	adds	r6, #1
 800dd56:	1064      	asrs	r4, r4, #1
 800dd58:	3708      	adds	r7, #8
 800dd5a:	e7d0      	b.n	800dcfe <_strtod_l+0x4de>
 800dd5c:	d0f0      	beq.n	800dd40 <_strtod_l+0x520>
 800dd5e:	4264      	negs	r4, r4
 800dd60:	f014 020f 	ands.w	r2, r4, #15
 800dd64:	d00a      	beq.n	800dd7c <_strtod_l+0x55c>
 800dd66:	4b12      	ldr	r3, [pc, #72]	@ (800ddb0 <_strtod_l+0x590>)
 800dd68:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800dd6c:	4650      	mov	r0, sl
 800dd6e:	4659      	mov	r1, fp
 800dd70:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd74:	f7f2 fd72 	bl	800085c <__aeabi_ddiv>
 800dd78:	4682      	mov	sl, r0
 800dd7a:	468b      	mov	fp, r1
 800dd7c:	1124      	asrs	r4, r4, #4
 800dd7e:	d0df      	beq.n	800dd40 <_strtod_l+0x520>
 800dd80:	2c1f      	cmp	r4, #31
 800dd82:	dd1f      	ble.n	800ddc4 <_strtod_l+0x5a4>
 800dd84:	2400      	movs	r4, #0
 800dd86:	46a0      	mov	r8, r4
 800dd88:	940b      	str	r4, [sp, #44]	@ 0x2c
 800dd8a:	46a1      	mov	r9, r4
 800dd8c:	9a05      	ldr	r2, [sp, #20]
 800dd8e:	2322      	movs	r3, #34	@ 0x22
 800dd90:	f04f 0a00 	mov.w	sl, #0
 800dd94:	f04f 0b00 	mov.w	fp, #0
 800dd98:	6013      	str	r3, [r2, #0]
 800dd9a:	e76b      	b.n	800dc74 <_strtod_l+0x454>
 800dd9c:	08010c65 	.word	0x08010c65
 800dda0:	08010f30 	.word	0x08010f30
 800dda4:	08010c5d 	.word	0x08010c5d
 800dda8:	08010cd0 	.word	0x08010cd0
 800ddac:	08010ccc 	.word	0x08010ccc
 800ddb0:	08010e68 	.word	0x08010e68
 800ddb4:	08010e40 	.word	0x08010e40
 800ddb8:	7ff00000 	.word	0x7ff00000
 800ddbc:	7ca00000 	.word	0x7ca00000
 800ddc0:	7fefffff 	.word	0x7fefffff
 800ddc4:	f014 0310 	ands.w	r3, r4, #16
 800ddc8:	bf18      	it	ne
 800ddca:	236a      	movne	r3, #106	@ 0x6a
 800ddcc:	4ea9      	ldr	r6, [pc, #676]	@ (800e074 <_strtod_l+0x854>)
 800ddce:	9308      	str	r3, [sp, #32]
 800ddd0:	4650      	mov	r0, sl
 800ddd2:	4659      	mov	r1, fp
 800ddd4:	2300      	movs	r3, #0
 800ddd6:	07e7      	lsls	r7, r4, #31
 800ddd8:	d504      	bpl.n	800dde4 <_strtod_l+0x5c4>
 800ddda:	e9d6 2300 	ldrd	r2, r3, [r6]
 800ddde:	f7f2 fc13 	bl	8000608 <__aeabi_dmul>
 800dde2:	2301      	movs	r3, #1
 800dde4:	1064      	asrs	r4, r4, #1
 800dde6:	f106 0608 	add.w	r6, r6, #8
 800ddea:	d1f4      	bne.n	800ddd6 <_strtod_l+0x5b6>
 800ddec:	b10b      	cbz	r3, 800ddf2 <_strtod_l+0x5d2>
 800ddee:	4682      	mov	sl, r0
 800ddf0:	468b      	mov	fp, r1
 800ddf2:	9b08      	ldr	r3, [sp, #32]
 800ddf4:	b1b3      	cbz	r3, 800de24 <_strtod_l+0x604>
 800ddf6:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800ddfa:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800ddfe:	2b00      	cmp	r3, #0
 800de00:	4659      	mov	r1, fp
 800de02:	dd0f      	ble.n	800de24 <_strtod_l+0x604>
 800de04:	2b1f      	cmp	r3, #31
 800de06:	dd56      	ble.n	800deb6 <_strtod_l+0x696>
 800de08:	2b34      	cmp	r3, #52	@ 0x34
 800de0a:	bfde      	ittt	le
 800de0c:	f04f 33ff 	movle.w	r3, #4294967295
 800de10:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800de14:	4093      	lslle	r3, r2
 800de16:	f04f 0a00 	mov.w	sl, #0
 800de1a:	bfcc      	ite	gt
 800de1c:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800de20:	ea03 0b01 	andle.w	fp, r3, r1
 800de24:	2200      	movs	r2, #0
 800de26:	2300      	movs	r3, #0
 800de28:	4650      	mov	r0, sl
 800de2a:	4659      	mov	r1, fp
 800de2c:	f7f2 fe54 	bl	8000ad8 <__aeabi_dcmpeq>
 800de30:	2800      	cmp	r0, #0
 800de32:	d1a7      	bne.n	800dd84 <_strtod_l+0x564>
 800de34:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800de36:	9300      	str	r3, [sp, #0]
 800de38:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800de3a:	9805      	ldr	r0, [sp, #20]
 800de3c:	462b      	mov	r3, r5
 800de3e:	464a      	mov	r2, r9
 800de40:	f7ff f8ce 	bl	800cfe0 <__s2b>
 800de44:	900b      	str	r0, [sp, #44]	@ 0x2c
 800de46:	2800      	cmp	r0, #0
 800de48:	f43f af09 	beq.w	800dc5e <_strtod_l+0x43e>
 800de4c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800de4e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800de50:	2a00      	cmp	r2, #0
 800de52:	eba3 0308 	sub.w	r3, r3, r8
 800de56:	bfa8      	it	ge
 800de58:	2300      	movge	r3, #0
 800de5a:	9312      	str	r3, [sp, #72]	@ 0x48
 800de5c:	2400      	movs	r4, #0
 800de5e:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800de62:	9316      	str	r3, [sp, #88]	@ 0x58
 800de64:	46a0      	mov	r8, r4
 800de66:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800de68:	9805      	ldr	r0, [sp, #20]
 800de6a:	6859      	ldr	r1, [r3, #4]
 800de6c:	f7ff f810 	bl	800ce90 <_Balloc>
 800de70:	4681      	mov	r9, r0
 800de72:	2800      	cmp	r0, #0
 800de74:	f43f aef7 	beq.w	800dc66 <_strtod_l+0x446>
 800de78:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800de7a:	691a      	ldr	r2, [r3, #16]
 800de7c:	3202      	adds	r2, #2
 800de7e:	f103 010c 	add.w	r1, r3, #12
 800de82:	0092      	lsls	r2, r2, #2
 800de84:	300c      	adds	r0, #12
 800de86:	f7fe f876 	bl	800bf76 <memcpy>
 800de8a:	ec4b ab10 	vmov	d0, sl, fp
 800de8e:	9805      	ldr	r0, [sp, #20]
 800de90:	aa1c      	add	r2, sp, #112	@ 0x70
 800de92:	a91b      	add	r1, sp, #108	@ 0x6c
 800de94:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800de98:	f7ff fbd6 	bl	800d648 <__d2b>
 800de9c:	901a      	str	r0, [sp, #104]	@ 0x68
 800de9e:	2800      	cmp	r0, #0
 800dea0:	f43f aee1 	beq.w	800dc66 <_strtod_l+0x446>
 800dea4:	9805      	ldr	r0, [sp, #20]
 800dea6:	2101      	movs	r1, #1
 800dea8:	f7ff f930 	bl	800d10c <__i2b>
 800deac:	4680      	mov	r8, r0
 800deae:	b948      	cbnz	r0, 800dec4 <_strtod_l+0x6a4>
 800deb0:	f04f 0800 	mov.w	r8, #0
 800deb4:	e6d7      	b.n	800dc66 <_strtod_l+0x446>
 800deb6:	f04f 32ff 	mov.w	r2, #4294967295
 800deba:	fa02 f303 	lsl.w	r3, r2, r3
 800debe:	ea03 0a0a 	and.w	sl, r3, sl
 800dec2:	e7af      	b.n	800de24 <_strtod_l+0x604>
 800dec4:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800dec6:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800dec8:	2d00      	cmp	r5, #0
 800deca:	bfab      	itete	ge
 800decc:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800dece:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800ded0:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800ded2:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800ded4:	bfac      	ite	ge
 800ded6:	18ef      	addge	r7, r5, r3
 800ded8:	1b5e      	sublt	r6, r3, r5
 800deda:	9b08      	ldr	r3, [sp, #32]
 800dedc:	1aed      	subs	r5, r5, r3
 800dede:	4415      	add	r5, r2
 800dee0:	4b65      	ldr	r3, [pc, #404]	@ (800e078 <_strtod_l+0x858>)
 800dee2:	3d01      	subs	r5, #1
 800dee4:	429d      	cmp	r5, r3
 800dee6:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800deea:	da50      	bge.n	800df8e <_strtod_l+0x76e>
 800deec:	1b5b      	subs	r3, r3, r5
 800deee:	2b1f      	cmp	r3, #31
 800def0:	eba2 0203 	sub.w	r2, r2, r3
 800def4:	f04f 0101 	mov.w	r1, #1
 800def8:	dc3d      	bgt.n	800df76 <_strtod_l+0x756>
 800defa:	fa01 f303 	lsl.w	r3, r1, r3
 800defe:	9313      	str	r3, [sp, #76]	@ 0x4c
 800df00:	2300      	movs	r3, #0
 800df02:	9310      	str	r3, [sp, #64]	@ 0x40
 800df04:	18bd      	adds	r5, r7, r2
 800df06:	9b08      	ldr	r3, [sp, #32]
 800df08:	42af      	cmp	r7, r5
 800df0a:	4416      	add	r6, r2
 800df0c:	441e      	add	r6, r3
 800df0e:	463b      	mov	r3, r7
 800df10:	bfa8      	it	ge
 800df12:	462b      	movge	r3, r5
 800df14:	42b3      	cmp	r3, r6
 800df16:	bfa8      	it	ge
 800df18:	4633      	movge	r3, r6
 800df1a:	2b00      	cmp	r3, #0
 800df1c:	bfc2      	ittt	gt
 800df1e:	1aed      	subgt	r5, r5, r3
 800df20:	1af6      	subgt	r6, r6, r3
 800df22:	1aff      	subgt	r7, r7, r3
 800df24:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800df26:	2b00      	cmp	r3, #0
 800df28:	dd16      	ble.n	800df58 <_strtod_l+0x738>
 800df2a:	4641      	mov	r1, r8
 800df2c:	9805      	ldr	r0, [sp, #20]
 800df2e:	461a      	mov	r2, r3
 800df30:	f7ff f9a4 	bl	800d27c <__pow5mult>
 800df34:	4680      	mov	r8, r0
 800df36:	2800      	cmp	r0, #0
 800df38:	d0ba      	beq.n	800deb0 <_strtod_l+0x690>
 800df3a:	4601      	mov	r1, r0
 800df3c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800df3e:	9805      	ldr	r0, [sp, #20]
 800df40:	f7ff f8fa 	bl	800d138 <__multiply>
 800df44:	900a      	str	r0, [sp, #40]	@ 0x28
 800df46:	2800      	cmp	r0, #0
 800df48:	f43f ae8d 	beq.w	800dc66 <_strtod_l+0x446>
 800df4c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800df4e:	9805      	ldr	r0, [sp, #20]
 800df50:	f7fe ffde 	bl	800cf10 <_Bfree>
 800df54:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800df56:	931a      	str	r3, [sp, #104]	@ 0x68
 800df58:	2d00      	cmp	r5, #0
 800df5a:	dc1d      	bgt.n	800df98 <_strtod_l+0x778>
 800df5c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800df5e:	2b00      	cmp	r3, #0
 800df60:	dd23      	ble.n	800dfaa <_strtod_l+0x78a>
 800df62:	4649      	mov	r1, r9
 800df64:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800df66:	9805      	ldr	r0, [sp, #20]
 800df68:	f7ff f988 	bl	800d27c <__pow5mult>
 800df6c:	4681      	mov	r9, r0
 800df6e:	b9e0      	cbnz	r0, 800dfaa <_strtod_l+0x78a>
 800df70:	f04f 0900 	mov.w	r9, #0
 800df74:	e677      	b.n	800dc66 <_strtod_l+0x446>
 800df76:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800df7a:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800df7e:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800df82:	35e2      	adds	r5, #226	@ 0xe2
 800df84:	fa01 f305 	lsl.w	r3, r1, r5
 800df88:	9310      	str	r3, [sp, #64]	@ 0x40
 800df8a:	9113      	str	r1, [sp, #76]	@ 0x4c
 800df8c:	e7ba      	b.n	800df04 <_strtod_l+0x6e4>
 800df8e:	2300      	movs	r3, #0
 800df90:	9310      	str	r3, [sp, #64]	@ 0x40
 800df92:	2301      	movs	r3, #1
 800df94:	9313      	str	r3, [sp, #76]	@ 0x4c
 800df96:	e7b5      	b.n	800df04 <_strtod_l+0x6e4>
 800df98:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800df9a:	9805      	ldr	r0, [sp, #20]
 800df9c:	462a      	mov	r2, r5
 800df9e:	f7ff f9c7 	bl	800d330 <__lshift>
 800dfa2:	901a      	str	r0, [sp, #104]	@ 0x68
 800dfa4:	2800      	cmp	r0, #0
 800dfa6:	d1d9      	bne.n	800df5c <_strtod_l+0x73c>
 800dfa8:	e65d      	b.n	800dc66 <_strtod_l+0x446>
 800dfaa:	2e00      	cmp	r6, #0
 800dfac:	dd07      	ble.n	800dfbe <_strtod_l+0x79e>
 800dfae:	4649      	mov	r1, r9
 800dfb0:	9805      	ldr	r0, [sp, #20]
 800dfb2:	4632      	mov	r2, r6
 800dfb4:	f7ff f9bc 	bl	800d330 <__lshift>
 800dfb8:	4681      	mov	r9, r0
 800dfba:	2800      	cmp	r0, #0
 800dfbc:	d0d8      	beq.n	800df70 <_strtod_l+0x750>
 800dfbe:	2f00      	cmp	r7, #0
 800dfc0:	dd08      	ble.n	800dfd4 <_strtod_l+0x7b4>
 800dfc2:	4641      	mov	r1, r8
 800dfc4:	9805      	ldr	r0, [sp, #20]
 800dfc6:	463a      	mov	r2, r7
 800dfc8:	f7ff f9b2 	bl	800d330 <__lshift>
 800dfcc:	4680      	mov	r8, r0
 800dfce:	2800      	cmp	r0, #0
 800dfd0:	f43f ae49 	beq.w	800dc66 <_strtod_l+0x446>
 800dfd4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800dfd6:	9805      	ldr	r0, [sp, #20]
 800dfd8:	464a      	mov	r2, r9
 800dfda:	f7ff fa31 	bl	800d440 <__mdiff>
 800dfde:	4604      	mov	r4, r0
 800dfe0:	2800      	cmp	r0, #0
 800dfe2:	f43f ae40 	beq.w	800dc66 <_strtod_l+0x446>
 800dfe6:	68c3      	ldr	r3, [r0, #12]
 800dfe8:	930f      	str	r3, [sp, #60]	@ 0x3c
 800dfea:	2300      	movs	r3, #0
 800dfec:	60c3      	str	r3, [r0, #12]
 800dfee:	4641      	mov	r1, r8
 800dff0:	f7ff fa0a 	bl	800d408 <__mcmp>
 800dff4:	2800      	cmp	r0, #0
 800dff6:	da45      	bge.n	800e084 <_strtod_l+0x864>
 800dff8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800dffa:	ea53 030a 	orrs.w	r3, r3, sl
 800dffe:	d16b      	bne.n	800e0d8 <_strtod_l+0x8b8>
 800e000:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800e004:	2b00      	cmp	r3, #0
 800e006:	d167      	bne.n	800e0d8 <_strtod_l+0x8b8>
 800e008:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800e00c:	0d1b      	lsrs	r3, r3, #20
 800e00e:	051b      	lsls	r3, r3, #20
 800e010:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800e014:	d960      	bls.n	800e0d8 <_strtod_l+0x8b8>
 800e016:	6963      	ldr	r3, [r4, #20]
 800e018:	b913      	cbnz	r3, 800e020 <_strtod_l+0x800>
 800e01a:	6923      	ldr	r3, [r4, #16]
 800e01c:	2b01      	cmp	r3, #1
 800e01e:	dd5b      	ble.n	800e0d8 <_strtod_l+0x8b8>
 800e020:	4621      	mov	r1, r4
 800e022:	2201      	movs	r2, #1
 800e024:	9805      	ldr	r0, [sp, #20]
 800e026:	f7ff f983 	bl	800d330 <__lshift>
 800e02a:	4641      	mov	r1, r8
 800e02c:	4604      	mov	r4, r0
 800e02e:	f7ff f9eb 	bl	800d408 <__mcmp>
 800e032:	2800      	cmp	r0, #0
 800e034:	dd50      	ble.n	800e0d8 <_strtod_l+0x8b8>
 800e036:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800e03a:	9a08      	ldr	r2, [sp, #32]
 800e03c:	0d1b      	lsrs	r3, r3, #20
 800e03e:	051b      	lsls	r3, r3, #20
 800e040:	2a00      	cmp	r2, #0
 800e042:	d06a      	beq.n	800e11a <_strtod_l+0x8fa>
 800e044:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800e048:	d867      	bhi.n	800e11a <_strtod_l+0x8fa>
 800e04a:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800e04e:	f67f ae9d 	bls.w	800dd8c <_strtod_l+0x56c>
 800e052:	4b0a      	ldr	r3, [pc, #40]	@ (800e07c <_strtod_l+0x85c>)
 800e054:	4650      	mov	r0, sl
 800e056:	4659      	mov	r1, fp
 800e058:	2200      	movs	r2, #0
 800e05a:	f7f2 fad5 	bl	8000608 <__aeabi_dmul>
 800e05e:	4b08      	ldr	r3, [pc, #32]	@ (800e080 <_strtod_l+0x860>)
 800e060:	400b      	ands	r3, r1
 800e062:	4682      	mov	sl, r0
 800e064:	468b      	mov	fp, r1
 800e066:	2b00      	cmp	r3, #0
 800e068:	f47f ae08 	bne.w	800dc7c <_strtod_l+0x45c>
 800e06c:	9a05      	ldr	r2, [sp, #20]
 800e06e:	2322      	movs	r3, #34	@ 0x22
 800e070:	6013      	str	r3, [r2, #0]
 800e072:	e603      	b.n	800dc7c <_strtod_l+0x45c>
 800e074:	08010f58 	.word	0x08010f58
 800e078:	fffffc02 	.word	0xfffffc02
 800e07c:	39500000 	.word	0x39500000
 800e080:	7ff00000 	.word	0x7ff00000
 800e084:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 800e088:	d165      	bne.n	800e156 <_strtod_l+0x936>
 800e08a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800e08c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800e090:	b35a      	cbz	r2, 800e0ea <_strtod_l+0x8ca>
 800e092:	4a9f      	ldr	r2, [pc, #636]	@ (800e310 <_strtod_l+0xaf0>)
 800e094:	4293      	cmp	r3, r2
 800e096:	d12b      	bne.n	800e0f0 <_strtod_l+0x8d0>
 800e098:	9b08      	ldr	r3, [sp, #32]
 800e09a:	4651      	mov	r1, sl
 800e09c:	b303      	cbz	r3, 800e0e0 <_strtod_l+0x8c0>
 800e09e:	4b9d      	ldr	r3, [pc, #628]	@ (800e314 <_strtod_l+0xaf4>)
 800e0a0:	465a      	mov	r2, fp
 800e0a2:	4013      	ands	r3, r2
 800e0a4:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800e0a8:	f04f 32ff 	mov.w	r2, #4294967295
 800e0ac:	d81b      	bhi.n	800e0e6 <_strtod_l+0x8c6>
 800e0ae:	0d1b      	lsrs	r3, r3, #20
 800e0b0:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800e0b4:	fa02 f303 	lsl.w	r3, r2, r3
 800e0b8:	4299      	cmp	r1, r3
 800e0ba:	d119      	bne.n	800e0f0 <_strtod_l+0x8d0>
 800e0bc:	4b96      	ldr	r3, [pc, #600]	@ (800e318 <_strtod_l+0xaf8>)
 800e0be:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800e0c0:	429a      	cmp	r2, r3
 800e0c2:	d102      	bne.n	800e0ca <_strtod_l+0x8aa>
 800e0c4:	3101      	adds	r1, #1
 800e0c6:	f43f adce 	beq.w	800dc66 <_strtod_l+0x446>
 800e0ca:	4b92      	ldr	r3, [pc, #584]	@ (800e314 <_strtod_l+0xaf4>)
 800e0cc:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800e0ce:	401a      	ands	r2, r3
 800e0d0:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800e0d4:	f04f 0a00 	mov.w	sl, #0
 800e0d8:	9b08      	ldr	r3, [sp, #32]
 800e0da:	2b00      	cmp	r3, #0
 800e0dc:	d1b9      	bne.n	800e052 <_strtod_l+0x832>
 800e0de:	e5cd      	b.n	800dc7c <_strtod_l+0x45c>
 800e0e0:	f04f 33ff 	mov.w	r3, #4294967295
 800e0e4:	e7e8      	b.n	800e0b8 <_strtod_l+0x898>
 800e0e6:	4613      	mov	r3, r2
 800e0e8:	e7e6      	b.n	800e0b8 <_strtod_l+0x898>
 800e0ea:	ea53 030a 	orrs.w	r3, r3, sl
 800e0ee:	d0a2      	beq.n	800e036 <_strtod_l+0x816>
 800e0f0:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800e0f2:	b1db      	cbz	r3, 800e12c <_strtod_l+0x90c>
 800e0f4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800e0f6:	4213      	tst	r3, r2
 800e0f8:	d0ee      	beq.n	800e0d8 <_strtod_l+0x8b8>
 800e0fa:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e0fc:	9a08      	ldr	r2, [sp, #32]
 800e0fe:	4650      	mov	r0, sl
 800e100:	4659      	mov	r1, fp
 800e102:	b1bb      	cbz	r3, 800e134 <_strtod_l+0x914>
 800e104:	f7ff fb6e 	bl	800d7e4 <sulp>
 800e108:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800e10c:	ec53 2b10 	vmov	r2, r3, d0
 800e110:	f7f2 f8c4 	bl	800029c <__adddf3>
 800e114:	4682      	mov	sl, r0
 800e116:	468b      	mov	fp, r1
 800e118:	e7de      	b.n	800e0d8 <_strtod_l+0x8b8>
 800e11a:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800e11e:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800e122:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800e126:	f04f 3aff 	mov.w	sl, #4294967295
 800e12a:	e7d5      	b.n	800e0d8 <_strtod_l+0x8b8>
 800e12c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800e12e:	ea13 0f0a 	tst.w	r3, sl
 800e132:	e7e1      	b.n	800e0f8 <_strtod_l+0x8d8>
 800e134:	f7ff fb56 	bl	800d7e4 <sulp>
 800e138:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800e13c:	ec53 2b10 	vmov	r2, r3, d0
 800e140:	f7f2 f8aa 	bl	8000298 <__aeabi_dsub>
 800e144:	2200      	movs	r2, #0
 800e146:	2300      	movs	r3, #0
 800e148:	4682      	mov	sl, r0
 800e14a:	468b      	mov	fp, r1
 800e14c:	f7f2 fcc4 	bl	8000ad8 <__aeabi_dcmpeq>
 800e150:	2800      	cmp	r0, #0
 800e152:	d0c1      	beq.n	800e0d8 <_strtod_l+0x8b8>
 800e154:	e61a      	b.n	800dd8c <_strtod_l+0x56c>
 800e156:	4641      	mov	r1, r8
 800e158:	4620      	mov	r0, r4
 800e15a:	f7ff facd 	bl	800d6f8 <__ratio>
 800e15e:	ec57 6b10 	vmov	r6, r7, d0
 800e162:	2200      	movs	r2, #0
 800e164:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800e168:	4630      	mov	r0, r6
 800e16a:	4639      	mov	r1, r7
 800e16c:	f7f2 fcc8 	bl	8000b00 <__aeabi_dcmple>
 800e170:	2800      	cmp	r0, #0
 800e172:	d06f      	beq.n	800e254 <_strtod_l+0xa34>
 800e174:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e176:	2b00      	cmp	r3, #0
 800e178:	d17a      	bne.n	800e270 <_strtod_l+0xa50>
 800e17a:	f1ba 0f00 	cmp.w	sl, #0
 800e17e:	d158      	bne.n	800e232 <_strtod_l+0xa12>
 800e180:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e182:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800e186:	2b00      	cmp	r3, #0
 800e188:	d15a      	bne.n	800e240 <_strtod_l+0xa20>
 800e18a:	4b64      	ldr	r3, [pc, #400]	@ (800e31c <_strtod_l+0xafc>)
 800e18c:	2200      	movs	r2, #0
 800e18e:	4630      	mov	r0, r6
 800e190:	4639      	mov	r1, r7
 800e192:	f7f2 fcab 	bl	8000aec <__aeabi_dcmplt>
 800e196:	2800      	cmp	r0, #0
 800e198:	d159      	bne.n	800e24e <_strtod_l+0xa2e>
 800e19a:	4630      	mov	r0, r6
 800e19c:	4639      	mov	r1, r7
 800e19e:	4b60      	ldr	r3, [pc, #384]	@ (800e320 <_strtod_l+0xb00>)
 800e1a0:	2200      	movs	r2, #0
 800e1a2:	f7f2 fa31 	bl	8000608 <__aeabi_dmul>
 800e1a6:	4606      	mov	r6, r0
 800e1a8:	460f      	mov	r7, r1
 800e1aa:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800e1ae:	9606      	str	r6, [sp, #24]
 800e1b0:	9307      	str	r3, [sp, #28]
 800e1b2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800e1b6:	4d57      	ldr	r5, [pc, #348]	@ (800e314 <_strtod_l+0xaf4>)
 800e1b8:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800e1bc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e1be:	401d      	ands	r5, r3
 800e1c0:	4b58      	ldr	r3, [pc, #352]	@ (800e324 <_strtod_l+0xb04>)
 800e1c2:	429d      	cmp	r5, r3
 800e1c4:	f040 80b2 	bne.w	800e32c <_strtod_l+0xb0c>
 800e1c8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e1ca:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800e1ce:	ec4b ab10 	vmov	d0, sl, fp
 800e1d2:	f7ff f9c9 	bl	800d568 <__ulp>
 800e1d6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800e1da:	ec51 0b10 	vmov	r0, r1, d0
 800e1de:	f7f2 fa13 	bl	8000608 <__aeabi_dmul>
 800e1e2:	4652      	mov	r2, sl
 800e1e4:	465b      	mov	r3, fp
 800e1e6:	f7f2 f859 	bl	800029c <__adddf3>
 800e1ea:	460b      	mov	r3, r1
 800e1ec:	4949      	ldr	r1, [pc, #292]	@ (800e314 <_strtod_l+0xaf4>)
 800e1ee:	4a4e      	ldr	r2, [pc, #312]	@ (800e328 <_strtod_l+0xb08>)
 800e1f0:	4019      	ands	r1, r3
 800e1f2:	4291      	cmp	r1, r2
 800e1f4:	4682      	mov	sl, r0
 800e1f6:	d942      	bls.n	800e27e <_strtod_l+0xa5e>
 800e1f8:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800e1fa:	4b47      	ldr	r3, [pc, #284]	@ (800e318 <_strtod_l+0xaf8>)
 800e1fc:	429a      	cmp	r2, r3
 800e1fe:	d103      	bne.n	800e208 <_strtod_l+0x9e8>
 800e200:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800e202:	3301      	adds	r3, #1
 800e204:	f43f ad2f 	beq.w	800dc66 <_strtod_l+0x446>
 800e208:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 800e318 <_strtod_l+0xaf8>
 800e20c:	f04f 3aff 	mov.w	sl, #4294967295
 800e210:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800e212:	9805      	ldr	r0, [sp, #20]
 800e214:	f7fe fe7c 	bl	800cf10 <_Bfree>
 800e218:	9805      	ldr	r0, [sp, #20]
 800e21a:	4649      	mov	r1, r9
 800e21c:	f7fe fe78 	bl	800cf10 <_Bfree>
 800e220:	9805      	ldr	r0, [sp, #20]
 800e222:	4641      	mov	r1, r8
 800e224:	f7fe fe74 	bl	800cf10 <_Bfree>
 800e228:	9805      	ldr	r0, [sp, #20]
 800e22a:	4621      	mov	r1, r4
 800e22c:	f7fe fe70 	bl	800cf10 <_Bfree>
 800e230:	e619      	b.n	800de66 <_strtod_l+0x646>
 800e232:	f1ba 0f01 	cmp.w	sl, #1
 800e236:	d103      	bne.n	800e240 <_strtod_l+0xa20>
 800e238:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e23a:	2b00      	cmp	r3, #0
 800e23c:	f43f ada6 	beq.w	800dd8c <_strtod_l+0x56c>
 800e240:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 800e2f0 <_strtod_l+0xad0>
 800e244:	4f35      	ldr	r7, [pc, #212]	@ (800e31c <_strtod_l+0xafc>)
 800e246:	ed8d 7b06 	vstr	d7, [sp, #24]
 800e24a:	2600      	movs	r6, #0
 800e24c:	e7b1      	b.n	800e1b2 <_strtod_l+0x992>
 800e24e:	4f34      	ldr	r7, [pc, #208]	@ (800e320 <_strtod_l+0xb00>)
 800e250:	2600      	movs	r6, #0
 800e252:	e7aa      	b.n	800e1aa <_strtod_l+0x98a>
 800e254:	4b32      	ldr	r3, [pc, #200]	@ (800e320 <_strtod_l+0xb00>)
 800e256:	4630      	mov	r0, r6
 800e258:	4639      	mov	r1, r7
 800e25a:	2200      	movs	r2, #0
 800e25c:	f7f2 f9d4 	bl	8000608 <__aeabi_dmul>
 800e260:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e262:	4606      	mov	r6, r0
 800e264:	460f      	mov	r7, r1
 800e266:	2b00      	cmp	r3, #0
 800e268:	d09f      	beq.n	800e1aa <_strtod_l+0x98a>
 800e26a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800e26e:	e7a0      	b.n	800e1b2 <_strtod_l+0x992>
 800e270:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800e2f8 <_strtod_l+0xad8>
 800e274:	ed8d 7b06 	vstr	d7, [sp, #24]
 800e278:	ec57 6b17 	vmov	r6, r7, d7
 800e27c:	e799      	b.n	800e1b2 <_strtod_l+0x992>
 800e27e:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800e282:	9b08      	ldr	r3, [sp, #32]
 800e284:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 800e288:	2b00      	cmp	r3, #0
 800e28a:	d1c1      	bne.n	800e210 <_strtod_l+0x9f0>
 800e28c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800e290:	0d1b      	lsrs	r3, r3, #20
 800e292:	051b      	lsls	r3, r3, #20
 800e294:	429d      	cmp	r5, r3
 800e296:	d1bb      	bne.n	800e210 <_strtod_l+0x9f0>
 800e298:	4630      	mov	r0, r6
 800e29a:	4639      	mov	r1, r7
 800e29c:	f7f2 fd14 	bl	8000cc8 <__aeabi_d2lz>
 800e2a0:	f7f2 f984 	bl	80005ac <__aeabi_l2d>
 800e2a4:	4602      	mov	r2, r0
 800e2a6:	460b      	mov	r3, r1
 800e2a8:	4630      	mov	r0, r6
 800e2aa:	4639      	mov	r1, r7
 800e2ac:	f7f1 fff4 	bl	8000298 <__aeabi_dsub>
 800e2b0:	460b      	mov	r3, r1
 800e2b2:	4602      	mov	r2, r0
 800e2b4:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800e2b8:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800e2bc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e2be:	ea46 060a 	orr.w	r6, r6, sl
 800e2c2:	431e      	orrs	r6, r3
 800e2c4:	d06f      	beq.n	800e3a6 <_strtod_l+0xb86>
 800e2c6:	a30e      	add	r3, pc, #56	@ (adr r3, 800e300 <_strtod_l+0xae0>)
 800e2c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e2cc:	f7f2 fc0e 	bl	8000aec <__aeabi_dcmplt>
 800e2d0:	2800      	cmp	r0, #0
 800e2d2:	f47f acd3 	bne.w	800dc7c <_strtod_l+0x45c>
 800e2d6:	a30c      	add	r3, pc, #48	@ (adr r3, 800e308 <_strtod_l+0xae8>)
 800e2d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e2dc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800e2e0:	f7f2 fc22 	bl	8000b28 <__aeabi_dcmpgt>
 800e2e4:	2800      	cmp	r0, #0
 800e2e6:	d093      	beq.n	800e210 <_strtod_l+0x9f0>
 800e2e8:	e4c8      	b.n	800dc7c <_strtod_l+0x45c>
 800e2ea:	bf00      	nop
 800e2ec:	f3af 8000 	nop.w
 800e2f0:	00000000 	.word	0x00000000
 800e2f4:	bff00000 	.word	0xbff00000
 800e2f8:	00000000 	.word	0x00000000
 800e2fc:	3ff00000 	.word	0x3ff00000
 800e300:	94a03595 	.word	0x94a03595
 800e304:	3fdfffff 	.word	0x3fdfffff
 800e308:	35afe535 	.word	0x35afe535
 800e30c:	3fe00000 	.word	0x3fe00000
 800e310:	000fffff 	.word	0x000fffff
 800e314:	7ff00000 	.word	0x7ff00000
 800e318:	7fefffff 	.word	0x7fefffff
 800e31c:	3ff00000 	.word	0x3ff00000
 800e320:	3fe00000 	.word	0x3fe00000
 800e324:	7fe00000 	.word	0x7fe00000
 800e328:	7c9fffff 	.word	0x7c9fffff
 800e32c:	9b08      	ldr	r3, [sp, #32]
 800e32e:	b323      	cbz	r3, 800e37a <_strtod_l+0xb5a>
 800e330:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800e334:	d821      	bhi.n	800e37a <_strtod_l+0xb5a>
 800e336:	a328      	add	r3, pc, #160	@ (adr r3, 800e3d8 <_strtod_l+0xbb8>)
 800e338:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e33c:	4630      	mov	r0, r6
 800e33e:	4639      	mov	r1, r7
 800e340:	f7f2 fbde 	bl	8000b00 <__aeabi_dcmple>
 800e344:	b1a0      	cbz	r0, 800e370 <_strtod_l+0xb50>
 800e346:	4639      	mov	r1, r7
 800e348:	4630      	mov	r0, r6
 800e34a:	f7f2 fc35 	bl	8000bb8 <__aeabi_d2uiz>
 800e34e:	2801      	cmp	r0, #1
 800e350:	bf38      	it	cc
 800e352:	2001      	movcc	r0, #1
 800e354:	f7f2 f8de 	bl	8000514 <__aeabi_ui2d>
 800e358:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e35a:	4606      	mov	r6, r0
 800e35c:	460f      	mov	r7, r1
 800e35e:	b9fb      	cbnz	r3, 800e3a0 <_strtod_l+0xb80>
 800e360:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800e364:	9014      	str	r0, [sp, #80]	@ 0x50
 800e366:	9315      	str	r3, [sp, #84]	@ 0x54
 800e368:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800e36c:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800e370:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800e372:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800e376:	1b5b      	subs	r3, r3, r5
 800e378:	9311      	str	r3, [sp, #68]	@ 0x44
 800e37a:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800e37e:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800e382:	f7ff f8f1 	bl	800d568 <__ulp>
 800e386:	4650      	mov	r0, sl
 800e388:	ec53 2b10 	vmov	r2, r3, d0
 800e38c:	4659      	mov	r1, fp
 800e38e:	f7f2 f93b 	bl	8000608 <__aeabi_dmul>
 800e392:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800e396:	f7f1 ff81 	bl	800029c <__adddf3>
 800e39a:	4682      	mov	sl, r0
 800e39c:	468b      	mov	fp, r1
 800e39e:	e770      	b.n	800e282 <_strtod_l+0xa62>
 800e3a0:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800e3a4:	e7e0      	b.n	800e368 <_strtod_l+0xb48>
 800e3a6:	a30e      	add	r3, pc, #56	@ (adr r3, 800e3e0 <_strtod_l+0xbc0>)
 800e3a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e3ac:	f7f2 fb9e 	bl	8000aec <__aeabi_dcmplt>
 800e3b0:	e798      	b.n	800e2e4 <_strtod_l+0xac4>
 800e3b2:	2300      	movs	r3, #0
 800e3b4:	930e      	str	r3, [sp, #56]	@ 0x38
 800e3b6:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800e3b8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800e3ba:	6013      	str	r3, [r2, #0]
 800e3bc:	f7ff ba6d 	b.w	800d89a <_strtod_l+0x7a>
 800e3c0:	2a65      	cmp	r2, #101	@ 0x65
 800e3c2:	f43f ab68 	beq.w	800da96 <_strtod_l+0x276>
 800e3c6:	2a45      	cmp	r2, #69	@ 0x45
 800e3c8:	f43f ab65 	beq.w	800da96 <_strtod_l+0x276>
 800e3cc:	2301      	movs	r3, #1
 800e3ce:	f7ff bba0 	b.w	800db12 <_strtod_l+0x2f2>
 800e3d2:	bf00      	nop
 800e3d4:	f3af 8000 	nop.w
 800e3d8:	ffc00000 	.word	0xffc00000
 800e3dc:	41dfffff 	.word	0x41dfffff
 800e3e0:	94a03595 	.word	0x94a03595
 800e3e4:	3fcfffff 	.word	0x3fcfffff

0800e3e8 <_strtod_r>:
 800e3e8:	4b01      	ldr	r3, [pc, #4]	@ (800e3f0 <_strtod_r+0x8>)
 800e3ea:	f7ff ba19 	b.w	800d820 <_strtod_l>
 800e3ee:	bf00      	nop
 800e3f0:	2000d190 	.word	0x2000d190

0800e3f4 <_strtol_l.isra.0>:
 800e3f4:	2b24      	cmp	r3, #36	@ 0x24
 800e3f6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e3fa:	4686      	mov	lr, r0
 800e3fc:	4690      	mov	r8, r2
 800e3fe:	d801      	bhi.n	800e404 <_strtol_l.isra.0+0x10>
 800e400:	2b01      	cmp	r3, #1
 800e402:	d106      	bne.n	800e412 <_strtol_l.isra.0+0x1e>
 800e404:	f7fd fd8a 	bl	800bf1c <__errno>
 800e408:	2316      	movs	r3, #22
 800e40a:	6003      	str	r3, [r0, #0]
 800e40c:	2000      	movs	r0, #0
 800e40e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e412:	4834      	ldr	r0, [pc, #208]	@ (800e4e4 <_strtol_l.isra.0+0xf0>)
 800e414:	460d      	mov	r5, r1
 800e416:	462a      	mov	r2, r5
 800e418:	f815 4b01 	ldrb.w	r4, [r5], #1
 800e41c:	5d06      	ldrb	r6, [r0, r4]
 800e41e:	f016 0608 	ands.w	r6, r6, #8
 800e422:	d1f8      	bne.n	800e416 <_strtol_l.isra.0+0x22>
 800e424:	2c2d      	cmp	r4, #45	@ 0x2d
 800e426:	d110      	bne.n	800e44a <_strtol_l.isra.0+0x56>
 800e428:	782c      	ldrb	r4, [r5, #0]
 800e42a:	2601      	movs	r6, #1
 800e42c:	1c95      	adds	r5, r2, #2
 800e42e:	f033 0210 	bics.w	r2, r3, #16
 800e432:	d115      	bne.n	800e460 <_strtol_l.isra.0+0x6c>
 800e434:	2c30      	cmp	r4, #48	@ 0x30
 800e436:	d10d      	bne.n	800e454 <_strtol_l.isra.0+0x60>
 800e438:	782a      	ldrb	r2, [r5, #0]
 800e43a:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800e43e:	2a58      	cmp	r2, #88	@ 0x58
 800e440:	d108      	bne.n	800e454 <_strtol_l.isra.0+0x60>
 800e442:	786c      	ldrb	r4, [r5, #1]
 800e444:	3502      	adds	r5, #2
 800e446:	2310      	movs	r3, #16
 800e448:	e00a      	b.n	800e460 <_strtol_l.isra.0+0x6c>
 800e44a:	2c2b      	cmp	r4, #43	@ 0x2b
 800e44c:	bf04      	itt	eq
 800e44e:	782c      	ldrbeq	r4, [r5, #0]
 800e450:	1c95      	addeq	r5, r2, #2
 800e452:	e7ec      	b.n	800e42e <_strtol_l.isra.0+0x3a>
 800e454:	2b00      	cmp	r3, #0
 800e456:	d1f6      	bne.n	800e446 <_strtol_l.isra.0+0x52>
 800e458:	2c30      	cmp	r4, #48	@ 0x30
 800e45a:	bf14      	ite	ne
 800e45c:	230a      	movne	r3, #10
 800e45e:	2308      	moveq	r3, #8
 800e460:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800e464:	f10c 3cff 	add.w	ip, ip, #4294967295
 800e468:	2200      	movs	r2, #0
 800e46a:	fbbc f9f3 	udiv	r9, ip, r3
 800e46e:	4610      	mov	r0, r2
 800e470:	fb03 ca19 	mls	sl, r3, r9, ip
 800e474:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800e478:	2f09      	cmp	r7, #9
 800e47a:	d80f      	bhi.n	800e49c <_strtol_l.isra.0+0xa8>
 800e47c:	463c      	mov	r4, r7
 800e47e:	42a3      	cmp	r3, r4
 800e480:	dd1b      	ble.n	800e4ba <_strtol_l.isra.0+0xc6>
 800e482:	1c57      	adds	r7, r2, #1
 800e484:	d007      	beq.n	800e496 <_strtol_l.isra.0+0xa2>
 800e486:	4581      	cmp	r9, r0
 800e488:	d314      	bcc.n	800e4b4 <_strtol_l.isra.0+0xc0>
 800e48a:	d101      	bne.n	800e490 <_strtol_l.isra.0+0x9c>
 800e48c:	45a2      	cmp	sl, r4
 800e48e:	db11      	blt.n	800e4b4 <_strtol_l.isra.0+0xc0>
 800e490:	fb00 4003 	mla	r0, r0, r3, r4
 800e494:	2201      	movs	r2, #1
 800e496:	f815 4b01 	ldrb.w	r4, [r5], #1
 800e49a:	e7eb      	b.n	800e474 <_strtol_l.isra.0+0x80>
 800e49c:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800e4a0:	2f19      	cmp	r7, #25
 800e4a2:	d801      	bhi.n	800e4a8 <_strtol_l.isra.0+0xb4>
 800e4a4:	3c37      	subs	r4, #55	@ 0x37
 800e4a6:	e7ea      	b.n	800e47e <_strtol_l.isra.0+0x8a>
 800e4a8:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800e4ac:	2f19      	cmp	r7, #25
 800e4ae:	d804      	bhi.n	800e4ba <_strtol_l.isra.0+0xc6>
 800e4b0:	3c57      	subs	r4, #87	@ 0x57
 800e4b2:	e7e4      	b.n	800e47e <_strtol_l.isra.0+0x8a>
 800e4b4:	f04f 32ff 	mov.w	r2, #4294967295
 800e4b8:	e7ed      	b.n	800e496 <_strtol_l.isra.0+0xa2>
 800e4ba:	1c53      	adds	r3, r2, #1
 800e4bc:	d108      	bne.n	800e4d0 <_strtol_l.isra.0+0xdc>
 800e4be:	2322      	movs	r3, #34	@ 0x22
 800e4c0:	f8ce 3000 	str.w	r3, [lr]
 800e4c4:	4660      	mov	r0, ip
 800e4c6:	f1b8 0f00 	cmp.w	r8, #0
 800e4ca:	d0a0      	beq.n	800e40e <_strtol_l.isra.0+0x1a>
 800e4cc:	1e69      	subs	r1, r5, #1
 800e4ce:	e006      	b.n	800e4de <_strtol_l.isra.0+0xea>
 800e4d0:	b106      	cbz	r6, 800e4d4 <_strtol_l.isra.0+0xe0>
 800e4d2:	4240      	negs	r0, r0
 800e4d4:	f1b8 0f00 	cmp.w	r8, #0
 800e4d8:	d099      	beq.n	800e40e <_strtol_l.isra.0+0x1a>
 800e4da:	2a00      	cmp	r2, #0
 800e4dc:	d1f6      	bne.n	800e4cc <_strtol_l.isra.0+0xd8>
 800e4de:	f8c8 1000 	str.w	r1, [r8]
 800e4e2:	e794      	b.n	800e40e <_strtol_l.isra.0+0x1a>
 800e4e4:	08010f81 	.word	0x08010f81

0800e4e8 <_strtol_r>:
 800e4e8:	f7ff bf84 	b.w	800e3f4 <_strtol_l.isra.0>

0800e4ec <__ssputs_r>:
 800e4ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e4f0:	688e      	ldr	r6, [r1, #8]
 800e4f2:	461f      	mov	r7, r3
 800e4f4:	42be      	cmp	r6, r7
 800e4f6:	680b      	ldr	r3, [r1, #0]
 800e4f8:	4682      	mov	sl, r0
 800e4fa:	460c      	mov	r4, r1
 800e4fc:	4690      	mov	r8, r2
 800e4fe:	d82d      	bhi.n	800e55c <__ssputs_r+0x70>
 800e500:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800e504:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800e508:	d026      	beq.n	800e558 <__ssputs_r+0x6c>
 800e50a:	6965      	ldr	r5, [r4, #20]
 800e50c:	6909      	ldr	r1, [r1, #16]
 800e50e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800e512:	eba3 0901 	sub.w	r9, r3, r1
 800e516:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800e51a:	1c7b      	adds	r3, r7, #1
 800e51c:	444b      	add	r3, r9
 800e51e:	106d      	asrs	r5, r5, #1
 800e520:	429d      	cmp	r5, r3
 800e522:	bf38      	it	cc
 800e524:	461d      	movcc	r5, r3
 800e526:	0553      	lsls	r3, r2, #21
 800e528:	d527      	bpl.n	800e57a <__ssputs_r+0x8e>
 800e52a:	4629      	mov	r1, r5
 800e52c:	f7fe fc24 	bl	800cd78 <_malloc_r>
 800e530:	4606      	mov	r6, r0
 800e532:	b360      	cbz	r0, 800e58e <__ssputs_r+0xa2>
 800e534:	6921      	ldr	r1, [r4, #16]
 800e536:	464a      	mov	r2, r9
 800e538:	f7fd fd1d 	bl	800bf76 <memcpy>
 800e53c:	89a3      	ldrh	r3, [r4, #12]
 800e53e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800e542:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e546:	81a3      	strh	r3, [r4, #12]
 800e548:	6126      	str	r6, [r4, #16]
 800e54a:	6165      	str	r5, [r4, #20]
 800e54c:	444e      	add	r6, r9
 800e54e:	eba5 0509 	sub.w	r5, r5, r9
 800e552:	6026      	str	r6, [r4, #0]
 800e554:	60a5      	str	r5, [r4, #8]
 800e556:	463e      	mov	r6, r7
 800e558:	42be      	cmp	r6, r7
 800e55a:	d900      	bls.n	800e55e <__ssputs_r+0x72>
 800e55c:	463e      	mov	r6, r7
 800e55e:	6820      	ldr	r0, [r4, #0]
 800e560:	4632      	mov	r2, r6
 800e562:	4641      	mov	r1, r8
 800e564:	f000 fb7c 	bl	800ec60 <memmove>
 800e568:	68a3      	ldr	r3, [r4, #8]
 800e56a:	1b9b      	subs	r3, r3, r6
 800e56c:	60a3      	str	r3, [r4, #8]
 800e56e:	6823      	ldr	r3, [r4, #0]
 800e570:	4433      	add	r3, r6
 800e572:	6023      	str	r3, [r4, #0]
 800e574:	2000      	movs	r0, #0
 800e576:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e57a:	462a      	mov	r2, r5
 800e57c:	f000 ff3d 	bl	800f3fa <_realloc_r>
 800e580:	4606      	mov	r6, r0
 800e582:	2800      	cmp	r0, #0
 800e584:	d1e0      	bne.n	800e548 <__ssputs_r+0x5c>
 800e586:	6921      	ldr	r1, [r4, #16]
 800e588:	4650      	mov	r0, sl
 800e58a:	f7fe fb81 	bl	800cc90 <_free_r>
 800e58e:	230c      	movs	r3, #12
 800e590:	f8ca 3000 	str.w	r3, [sl]
 800e594:	89a3      	ldrh	r3, [r4, #12]
 800e596:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e59a:	81a3      	strh	r3, [r4, #12]
 800e59c:	f04f 30ff 	mov.w	r0, #4294967295
 800e5a0:	e7e9      	b.n	800e576 <__ssputs_r+0x8a>
	...

0800e5a4 <_svfiprintf_r>:
 800e5a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e5a8:	4698      	mov	r8, r3
 800e5aa:	898b      	ldrh	r3, [r1, #12]
 800e5ac:	061b      	lsls	r3, r3, #24
 800e5ae:	b09d      	sub	sp, #116	@ 0x74
 800e5b0:	4607      	mov	r7, r0
 800e5b2:	460d      	mov	r5, r1
 800e5b4:	4614      	mov	r4, r2
 800e5b6:	d510      	bpl.n	800e5da <_svfiprintf_r+0x36>
 800e5b8:	690b      	ldr	r3, [r1, #16]
 800e5ba:	b973      	cbnz	r3, 800e5da <_svfiprintf_r+0x36>
 800e5bc:	2140      	movs	r1, #64	@ 0x40
 800e5be:	f7fe fbdb 	bl	800cd78 <_malloc_r>
 800e5c2:	6028      	str	r0, [r5, #0]
 800e5c4:	6128      	str	r0, [r5, #16]
 800e5c6:	b930      	cbnz	r0, 800e5d6 <_svfiprintf_r+0x32>
 800e5c8:	230c      	movs	r3, #12
 800e5ca:	603b      	str	r3, [r7, #0]
 800e5cc:	f04f 30ff 	mov.w	r0, #4294967295
 800e5d0:	b01d      	add	sp, #116	@ 0x74
 800e5d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e5d6:	2340      	movs	r3, #64	@ 0x40
 800e5d8:	616b      	str	r3, [r5, #20]
 800e5da:	2300      	movs	r3, #0
 800e5dc:	9309      	str	r3, [sp, #36]	@ 0x24
 800e5de:	2320      	movs	r3, #32
 800e5e0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800e5e4:	f8cd 800c 	str.w	r8, [sp, #12]
 800e5e8:	2330      	movs	r3, #48	@ 0x30
 800e5ea:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800e788 <_svfiprintf_r+0x1e4>
 800e5ee:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800e5f2:	f04f 0901 	mov.w	r9, #1
 800e5f6:	4623      	mov	r3, r4
 800e5f8:	469a      	mov	sl, r3
 800e5fa:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e5fe:	b10a      	cbz	r2, 800e604 <_svfiprintf_r+0x60>
 800e600:	2a25      	cmp	r2, #37	@ 0x25
 800e602:	d1f9      	bne.n	800e5f8 <_svfiprintf_r+0x54>
 800e604:	ebba 0b04 	subs.w	fp, sl, r4
 800e608:	d00b      	beq.n	800e622 <_svfiprintf_r+0x7e>
 800e60a:	465b      	mov	r3, fp
 800e60c:	4622      	mov	r2, r4
 800e60e:	4629      	mov	r1, r5
 800e610:	4638      	mov	r0, r7
 800e612:	f7ff ff6b 	bl	800e4ec <__ssputs_r>
 800e616:	3001      	adds	r0, #1
 800e618:	f000 80a7 	beq.w	800e76a <_svfiprintf_r+0x1c6>
 800e61c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e61e:	445a      	add	r2, fp
 800e620:	9209      	str	r2, [sp, #36]	@ 0x24
 800e622:	f89a 3000 	ldrb.w	r3, [sl]
 800e626:	2b00      	cmp	r3, #0
 800e628:	f000 809f 	beq.w	800e76a <_svfiprintf_r+0x1c6>
 800e62c:	2300      	movs	r3, #0
 800e62e:	f04f 32ff 	mov.w	r2, #4294967295
 800e632:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e636:	f10a 0a01 	add.w	sl, sl, #1
 800e63a:	9304      	str	r3, [sp, #16]
 800e63c:	9307      	str	r3, [sp, #28]
 800e63e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800e642:	931a      	str	r3, [sp, #104]	@ 0x68
 800e644:	4654      	mov	r4, sl
 800e646:	2205      	movs	r2, #5
 800e648:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e64c:	484e      	ldr	r0, [pc, #312]	@ (800e788 <_svfiprintf_r+0x1e4>)
 800e64e:	f7f1 fdc7 	bl	80001e0 <memchr>
 800e652:	9a04      	ldr	r2, [sp, #16]
 800e654:	b9d8      	cbnz	r0, 800e68e <_svfiprintf_r+0xea>
 800e656:	06d0      	lsls	r0, r2, #27
 800e658:	bf44      	itt	mi
 800e65a:	2320      	movmi	r3, #32
 800e65c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e660:	0711      	lsls	r1, r2, #28
 800e662:	bf44      	itt	mi
 800e664:	232b      	movmi	r3, #43	@ 0x2b
 800e666:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e66a:	f89a 3000 	ldrb.w	r3, [sl]
 800e66e:	2b2a      	cmp	r3, #42	@ 0x2a
 800e670:	d015      	beq.n	800e69e <_svfiprintf_r+0xfa>
 800e672:	9a07      	ldr	r2, [sp, #28]
 800e674:	4654      	mov	r4, sl
 800e676:	2000      	movs	r0, #0
 800e678:	f04f 0c0a 	mov.w	ip, #10
 800e67c:	4621      	mov	r1, r4
 800e67e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e682:	3b30      	subs	r3, #48	@ 0x30
 800e684:	2b09      	cmp	r3, #9
 800e686:	d94b      	bls.n	800e720 <_svfiprintf_r+0x17c>
 800e688:	b1b0      	cbz	r0, 800e6b8 <_svfiprintf_r+0x114>
 800e68a:	9207      	str	r2, [sp, #28]
 800e68c:	e014      	b.n	800e6b8 <_svfiprintf_r+0x114>
 800e68e:	eba0 0308 	sub.w	r3, r0, r8
 800e692:	fa09 f303 	lsl.w	r3, r9, r3
 800e696:	4313      	orrs	r3, r2
 800e698:	9304      	str	r3, [sp, #16]
 800e69a:	46a2      	mov	sl, r4
 800e69c:	e7d2      	b.n	800e644 <_svfiprintf_r+0xa0>
 800e69e:	9b03      	ldr	r3, [sp, #12]
 800e6a0:	1d19      	adds	r1, r3, #4
 800e6a2:	681b      	ldr	r3, [r3, #0]
 800e6a4:	9103      	str	r1, [sp, #12]
 800e6a6:	2b00      	cmp	r3, #0
 800e6a8:	bfbb      	ittet	lt
 800e6aa:	425b      	neglt	r3, r3
 800e6ac:	f042 0202 	orrlt.w	r2, r2, #2
 800e6b0:	9307      	strge	r3, [sp, #28]
 800e6b2:	9307      	strlt	r3, [sp, #28]
 800e6b4:	bfb8      	it	lt
 800e6b6:	9204      	strlt	r2, [sp, #16]
 800e6b8:	7823      	ldrb	r3, [r4, #0]
 800e6ba:	2b2e      	cmp	r3, #46	@ 0x2e
 800e6bc:	d10a      	bne.n	800e6d4 <_svfiprintf_r+0x130>
 800e6be:	7863      	ldrb	r3, [r4, #1]
 800e6c0:	2b2a      	cmp	r3, #42	@ 0x2a
 800e6c2:	d132      	bne.n	800e72a <_svfiprintf_r+0x186>
 800e6c4:	9b03      	ldr	r3, [sp, #12]
 800e6c6:	1d1a      	adds	r2, r3, #4
 800e6c8:	681b      	ldr	r3, [r3, #0]
 800e6ca:	9203      	str	r2, [sp, #12]
 800e6cc:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800e6d0:	3402      	adds	r4, #2
 800e6d2:	9305      	str	r3, [sp, #20]
 800e6d4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800e798 <_svfiprintf_r+0x1f4>
 800e6d8:	7821      	ldrb	r1, [r4, #0]
 800e6da:	2203      	movs	r2, #3
 800e6dc:	4650      	mov	r0, sl
 800e6de:	f7f1 fd7f 	bl	80001e0 <memchr>
 800e6e2:	b138      	cbz	r0, 800e6f4 <_svfiprintf_r+0x150>
 800e6e4:	9b04      	ldr	r3, [sp, #16]
 800e6e6:	eba0 000a 	sub.w	r0, r0, sl
 800e6ea:	2240      	movs	r2, #64	@ 0x40
 800e6ec:	4082      	lsls	r2, r0
 800e6ee:	4313      	orrs	r3, r2
 800e6f0:	3401      	adds	r4, #1
 800e6f2:	9304      	str	r3, [sp, #16]
 800e6f4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e6f8:	4824      	ldr	r0, [pc, #144]	@ (800e78c <_svfiprintf_r+0x1e8>)
 800e6fa:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800e6fe:	2206      	movs	r2, #6
 800e700:	f7f1 fd6e 	bl	80001e0 <memchr>
 800e704:	2800      	cmp	r0, #0
 800e706:	d036      	beq.n	800e776 <_svfiprintf_r+0x1d2>
 800e708:	4b21      	ldr	r3, [pc, #132]	@ (800e790 <_svfiprintf_r+0x1ec>)
 800e70a:	bb1b      	cbnz	r3, 800e754 <_svfiprintf_r+0x1b0>
 800e70c:	9b03      	ldr	r3, [sp, #12]
 800e70e:	3307      	adds	r3, #7
 800e710:	f023 0307 	bic.w	r3, r3, #7
 800e714:	3308      	adds	r3, #8
 800e716:	9303      	str	r3, [sp, #12]
 800e718:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e71a:	4433      	add	r3, r6
 800e71c:	9309      	str	r3, [sp, #36]	@ 0x24
 800e71e:	e76a      	b.n	800e5f6 <_svfiprintf_r+0x52>
 800e720:	fb0c 3202 	mla	r2, ip, r2, r3
 800e724:	460c      	mov	r4, r1
 800e726:	2001      	movs	r0, #1
 800e728:	e7a8      	b.n	800e67c <_svfiprintf_r+0xd8>
 800e72a:	2300      	movs	r3, #0
 800e72c:	3401      	adds	r4, #1
 800e72e:	9305      	str	r3, [sp, #20]
 800e730:	4619      	mov	r1, r3
 800e732:	f04f 0c0a 	mov.w	ip, #10
 800e736:	4620      	mov	r0, r4
 800e738:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e73c:	3a30      	subs	r2, #48	@ 0x30
 800e73e:	2a09      	cmp	r2, #9
 800e740:	d903      	bls.n	800e74a <_svfiprintf_r+0x1a6>
 800e742:	2b00      	cmp	r3, #0
 800e744:	d0c6      	beq.n	800e6d4 <_svfiprintf_r+0x130>
 800e746:	9105      	str	r1, [sp, #20]
 800e748:	e7c4      	b.n	800e6d4 <_svfiprintf_r+0x130>
 800e74a:	fb0c 2101 	mla	r1, ip, r1, r2
 800e74e:	4604      	mov	r4, r0
 800e750:	2301      	movs	r3, #1
 800e752:	e7f0      	b.n	800e736 <_svfiprintf_r+0x192>
 800e754:	ab03      	add	r3, sp, #12
 800e756:	9300      	str	r3, [sp, #0]
 800e758:	462a      	mov	r2, r5
 800e75a:	4b0e      	ldr	r3, [pc, #56]	@ (800e794 <_svfiprintf_r+0x1f0>)
 800e75c:	a904      	add	r1, sp, #16
 800e75e:	4638      	mov	r0, r7
 800e760:	f7fc fb64 	bl	800ae2c <_printf_float>
 800e764:	1c42      	adds	r2, r0, #1
 800e766:	4606      	mov	r6, r0
 800e768:	d1d6      	bne.n	800e718 <_svfiprintf_r+0x174>
 800e76a:	89ab      	ldrh	r3, [r5, #12]
 800e76c:	065b      	lsls	r3, r3, #25
 800e76e:	f53f af2d 	bmi.w	800e5cc <_svfiprintf_r+0x28>
 800e772:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800e774:	e72c      	b.n	800e5d0 <_svfiprintf_r+0x2c>
 800e776:	ab03      	add	r3, sp, #12
 800e778:	9300      	str	r3, [sp, #0]
 800e77a:	462a      	mov	r2, r5
 800e77c:	4b05      	ldr	r3, [pc, #20]	@ (800e794 <_svfiprintf_r+0x1f0>)
 800e77e:	a904      	add	r1, sp, #16
 800e780:	4638      	mov	r0, r7
 800e782:	f7fc fdeb 	bl	800b35c <_printf_i>
 800e786:	e7ed      	b.n	800e764 <_svfiprintf_r+0x1c0>
 800e788:	08010db5 	.word	0x08010db5
 800e78c:	08010dbf 	.word	0x08010dbf
 800e790:	0800ae2d 	.word	0x0800ae2d
 800e794:	0800e4ed 	.word	0x0800e4ed
 800e798:	08010dbb 	.word	0x08010dbb

0800e79c <__sfputc_r>:
 800e79c:	6893      	ldr	r3, [r2, #8]
 800e79e:	3b01      	subs	r3, #1
 800e7a0:	2b00      	cmp	r3, #0
 800e7a2:	b410      	push	{r4}
 800e7a4:	6093      	str	r3, [r2, #8]
 800e7a6:	da08      	bge.n	800e7ba <__sfputc_r+0x1e>
 800e7a8:	6994      	ldr	r4, [r2, #24]
 800e7aa:	42a3      	cmp	r3, r4
 800e7ac:	db01      	blt.n	800e7b2 <__sfputc_r+0x16>
 800e7ae:	290a      	cmp	r1, #10
 800e7b0:	d103      	bne.n	800e7ba <__sfputc_r+0x1e>
 800e7b2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e7b6:	f7fd baca 	b.w	800bd4e <__swbuf_r>
 800e7ba:	6813      	ldr	r3, [r2, #0]
 800e7bc:	1c58      	adds	r0, r3, #1
 800e7be:	6010      	str	r0, [r2, #0]
 800e7c0:	7019      	strb	r1, [r3, #0]
 800e7c2:	4608      	mov	r0, r1
 800e7c4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e7c8:	4770      	bx	lr

0800e7ca <__sfputs_r>:
 800e7ca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e7cc:	4606      	mov	r6, r0
 800e7ce:	460f      	mov	r7, r1
 800e7d0:	4614      	mov	r4, r2
 800e7d2:	18d5      	adds	r5, r2, r3
 800e7d4:	42ac      	cmp	r4, r5
 800e7d6:	d101      	bne.n	800e7dc <__sfputs_r+0x12>
 800e7d8:	2000      	movs	r0, #0
 800e7da:	e007      	b.n	800e7ec <__sfputs_r+0x22>
 800e7dc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e7e0:	463a      	mov	r2, r7
 800e7e2:	4630      	mov	r0, r6
 800e7e4:	f7ff ffda 	bl	800e79c <__sfputc_r>
 800e7e8:	1c43      	adds	r3, r0, #1
 800e7ea:	d1f3      	bne.n	800e7d4 <__sfputs_r+0xa>
 800e7ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800e7f0 <_vfiprintf_r>:
 800e7f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e7f4:	460d      	mov	r5, r1
 800e7f6:	b09d      	sub	sp, #116	@ 0x74
 800e7f8:	4614      	mov	r4, r2
 800e7fa:	4698      	mov	r8, r3
 800e7fc:	4606      	mov	r6, r0
 800e7fe:	b118      	cbz	r0, 800e808 <_vfiprintf_r+0x18>
 800e800:	6a03      	ldr	r3, [r0, #32]
 800e802:	b90b      	cbnz	r3, 800e808 <_vfiprintf_r+0x18>
 800e804:	f7fd f962 	bl	800bacc <__sinit>
 800e808:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e80a:	07d9      	lsls	r1, r3, #31
 800e80c:	d405      	bmi.n	800e81a <_vfiprintf_r+0x2a>
 800e80e:	89ab      	ldrh	r3, [r5, #12]
 800e810:	059a      	lsls	r2, r3, #22
 800e812:	d402      	bmi.n	800e81a <_vfiprintf_r+0x2a>
 800e814:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e816:	f7fd fbac 	bl	800bf72 <__retarget_lock_acquire_recursive>
 800e81a:	89ab      	ldrh	r3, [r5, #12]
 800e81c:	071b      	lsls	r3, r3, #28
 800e81e:	d501      	bpl.n	800e824 <_vfiprintf_r+0x34>
 800e820:	692b      	ldr	r3, [r5, #16]
 800e822:	b99b      	cbnz	r3, 800e84c <_vfiprintf_r+0x5c>
 800e824:	4629      	mov	r1, r5
 800e826:	4630      	mov	r0, r6
 800e828:	f7fd fad0 	bl	800bdcc <__swsetup_r>
 800e82c:	b170      	cbz	r0, 800e84c <_vfiprintf_r+0x5c>
 800e82e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e830:	07dc      	lsls	r4, r3, #31
 800e832:	d504      	bpl.n	800e83e <_vfiprintf_r+0x4e>
 800e834:	f04f 30ff 	mov.w	r0, #4294967295
 800e838:	b01d      	add	sp, #116	@ 0x74
 800e83a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e83e:	89ab      	ldrh	r3, [r5, #12]
 800e840:	0598      	lsls	r0, r3, #22
 800e842:	d4f7      	bmi.n	800e834 <_vfiprintf_r+0x44>
 800e844:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e846:	f7fd fb95 	bl	800bf74 <__retarget_lock_release_recursive>
 800e84a:	e7f3      	b.n	800e834 <_vfiprintf_r+0x44>
 800e84c:	2300      	movs	r3, #0
 800e84e:	9309      	str	r3, [sp, #36]	@ 0x24
 800e850:	2320      	movs	r3, #32
 800e852:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800e856:	f8cd 800c 	str.w	r8, [sp, #12]
 800e85a:	2330      	movs	r3, #48	@ 0x30
 800e85c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800ea0c <_vfiprintf_r+0x21c>
 800e860:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800e864:	f04f 0901 	mov.w	r9, #1
 800e868:	4623      	mov	r3, r4
 800e86a:	469a      	mov	sl, r3
 800e86c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e870:	b10a      	cbz	r2, 800e876 <_vfiprintf_r+0x86>
 800e872:	2a25      	cmp	r2, #37	@ 0x25
 800e874:	d1f9      	bne.n	800e86a <_vfiprintf_r+0x7a>
 800e876:	ebba 0b04 	subs.w	fp, sl, r4
 800e87a:	d00b      	beq.n	800e894 <_vfiprintf_r+0xa4>
 800e87c:	465b      	mov	r3, fp
 800e87e:	4622      	mov	r2, r4
 800e880:	4629      	mov	r1, r5
 800e882:	4630      	mov	r0, r6
 800e884:	f7ff ffa1 	bl	800e7ca <__sfputs_r>
 800e888:	3001      	adds	r0, #1
 800e88a:	f000 80a7 	beq.w	800e9dc <_vfiprintf_r+0x1ec>
 800e88e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e890:	445a      	add	r2, fp
 800e892:	9209      	str	r2, [sp, #36]	@ 0x24
 800e894:	f89a 3000 	ldrb.w	r3, [sl]
 800e898:	2b00      	cmp	r3, #0
 800e89a:	f000 809f 	beq.w	800e9dc <_vfiprintf_r+0x1ec>
 800e89e:	2300      	movs	r3, #0
 800e8a0:	f04f 32ff 	mov.w	r2, #4294967295
 800e8a4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e8a8:	f10a 0a01 	add.w	sl, sl, #1
 800e8ac:	9304      	str	r3, [sp, #16]
 800e8ae:	9307      	str	r3, [sp, #28]
 800e8b0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800e8b4:	931a      	str	r3, [sp, #104]	@ 0x68
 800e8b6:	4654      	mov	r4, sl
 800e8b8:	2205      	movs	r2, #5
 800e8ba:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e8be:	4853      	ldr	r0, [pc, #332]	@ (800ea0c <_vfiprintf_r+0x21c>)
 800e8c0:	f7f1 fc8e 	bl	80001e0 <memchr>
 800e8c4:	9a04      	ldr	r2, [sp, #16]
 800e8c6:	b9d8      	cbnz	r0, 800e900 <_vfiprintf_r+0x110>
 800e8c8:	06d1      	lsls	r1, r2, #27
 800e8ca:	bf44      	itt	mi
 800e8cc:	2320      	movmi	r3, #32
 800e8ce:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e8d2:	0713      	lsls	r3, r2, #28
 800e8d4:	bf44      	itt	mi
 800e8d6:	232b      	movmi	r3, #43	@ 0x2b
 800e8d8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e8dc:	f89a 3000 	ldrb.w	r3, [sl]
 800e8e0:	2b2a      	cmp	r3, #42	@ 0x2a
 800e8e2:	d015      	beq.n	800e910 <_vfiprintf_r+0x120>
 800e8e4:	9a07      	ldr	r2, [sp, #28]
 800e8e6:	4654      	mov	r4, sl
 800e8e8:	2000      	movs	r0, #0
 800e8ea:	f04f 0c0a 	mov.w	ip, #10
 800e8ee:	4621      	mov	r1, r4
 800e8f0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e8f4:	3b30      	subs	r3, #48	@ 0x30
 800e8f6:	2b09      	cmp	r3, #9
 800e8f8:	d94b      	bls.n	800e992 <_vfiprintf_r+0x1a2>
 800e8fa:	b1b0      	cbz	r0, 800e92a <_vfiprintf_r+0x13a>
 800e8fc:	9207      	str	r2, [sp, #28]
 800e8fe:	e014      	b.n	800e92a <_vfiprintf_r+0x13a>
 800e900:	eba0 0308 	sub.w	r3, r0, r8
 800e904:	fa09 f303 	lsl.w	r3, r9, r3
 800e908:	4313      	orrs	r3, r2
 800e90a:	9304      	str	r3, [sp, #16]
 800e90c:	46a2      	mov	sl, r4
 800e90e:	e7d2      	b.n	800e8b6 <_vfiprintf_r+0xc6>
 800e910:	9b03      	ldr	r3, [sp, #12]
 800e912:	1d19      	adds	r1, r3, #4
 800e914:	681b      	ldr	r3, [r3, #0]
 800e916:	9103      	str	r1, [sp, #12]
 800e918:	2b00      	cmp	r3, #0
 800e91a:	bfbb      	ittet	lt
 800e91c:	425b      	neglt	r3, r3
 800e91e:	f042 0202 	orrlt.w	r2, r2, #2
 800e922:	9307      	strge	r3, [sp, #28]
 800e924:	9307      	strlt	r3, [sp, #28]
 800e926:	bfb8      	it	lt
 800e928:	9204      	strlt	r2, [sp, #16]
 800e92a:	7823      	ldrb	r3, [r4, #0]
 800e92c:	2b2e      	cmp	r3, #46	@ 0x2e
 800e92e:	d10a      	bne.n	800e946 <_vfiprintf_r+0x156>
 800e930:	7863      	ldrb	r3, [r4, #1]
 800e932:	2b2a      	cmp	r3, #42	@ 0x2a
 800e934:	d132      	bne.n	800e99c <_vfiprintf_r+0x1ac>
 800e936:	9b03      	ldr	r3, [sp, #12]
 800e938:	1d1a      	adds	r2, r3, #4
 800e93a:	681b      	ldr	r3, [r3, #0]
 800e93c:	9203      	str	r2, [sp, #12]
 800e93e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800e942:	3402      	adds	r4, #2
 800e944:	9305      	str	r3, [sp, #20]
 800e946:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800ea1c <_vfiprintf_r+0x22c>
 800e94a:	7821      	ldrb	r1, [r4, #0]
 800e94c:	2203      	movs	r2, #3
 800e94e:	4650      	mov	r0, sl
 800e950:	f7f1 fc46 	bl	80001e0 <memchr>
 800e954:	b138      	cbz	r0, 800e966 <_vfiprintf_r+0x176>
 800e956:	9b04      	ldr	r3, [sp, #16]
 800e958:	eba0 000a 	sub.w	r0, r0, sl
 800e95c:	2240      	movs	r2, #64	@ 0x40
 800e95e:	4082      	lsls	r2, r0
 800e960:	4313      	orrs	r3, r2
 800e962:	3401      	adds	r4, #1
 800e964:	9304      	str	r3, [sp, #16]
 800e966:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e96a:	4829      	ldr	r0, [pc, #164]	@ (800ea10 <_vfiprintf_r+0x220>)
 800e96c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800e970:	2206      	movs	r2, #6
 800e972:	f7f1 fc35 	bl	80001e0 <memchr>
 800e976:	2800      	cmp	r0, #0
 800e978:	d03f      	beq.n	800e9fa <_vfiprintf_r+0x20a>
 800e97a:	4b26      	ldr	r3, [pc, #152]	@ (800ea14 <_vfiprintf_r+0x224>)
 800e97c:	bb1b      	cbnz	r3, 800e9c6 <_vfiprintf_r+0x1d6>
 800e97e:	9b03      	ldr	r3, [sp, #12]
 800e980:	3307      	adds	r3, #7
 800e982:	f023 0307 	bic.w	r3, r3, #7
 800e986:	3308      	adds	r3, #8
 800e988:	9303      	str	r3, [sp, #12]
 800e98a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e98c:	443b      	add	r3, r7
 800e98e:	9309      	str	r3, [sp, #36]	@ 0x24
 800e990:	e76a      	b.n	800e868 <_vfiprintf_r+0x78>
 800e992:	fb0c 3202 	mla	r2, ip, r2, r3
 800e996:	460c      	mov	r4, r1
 800e998:	2001      	movs	r0, #1
 800e99a:	e7a8      	b.n	800e8ee <_vfiprintf_r+0xfe>
 800e99c:	2300      	movs	r3, #0
 800e99e:	3401      	adds	r4, #1
 800e9a0:	9305      	str	r3, [sp, #20]
 800e9a2:	4619      	mov	r1, r3
 800e9a4:	f04f 0c0a 	mov.w	ip, #10
 800e9a8:	4620      	mov	r0, r4
 800e9aa:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e9ae:	3a30      	subs	r2, #48	@ 0x30
 800e9b0:	2a09      	cmp	r2, #9
 800e9b2:	d903      	bls.n	800e9bc <_vfiprintf_r+0x1cc>
 800e9b4:	2b00      	cmp	r3, #0
 800e9b6:	d0c6      	beq.n	800e946 <_vfiprintf_r+0x156>
 800e9b8:	9105      	str	r1, [sp, #20]
 800e9ba:	e7c4      	b.n	800e946 <_vfiprintf_r+0x156>
 800e9bc:	fb0c 2101 	mla	r1, ip, r1, r2
 800e9c0:	4604      	mov	r4, r0
 800e9c2:	2301      	movs	r3, #1
 800e9c4:	e7f0      	b.n	800e9a8 <_vfiprintf_r+0x1b8>
 800e9c6:	ab03      	add	r3, sp, #12
 800e9c8:	9300      	str	r3, [sp, #0]
 800e9ca:	462a      	mov	r2, r5
 800e9cc:	4b12      	ldr	r3, [pc, #72]	@ (800ea18 <_vfiprintf_r+0x228>)
 800e9ce:	a904      	add	r1, sp, #16
 800e9d0:	4630      	mov	r0, r6
 800e9d2:	f7fc fa2b 	bl	800ae2c <_printf_float>
 800e9d6:	4607      	mov	r7, r0
 800e9d8:	1c78      	adds	r0, r7, #1
 800e9da:	d1d6      	bne.n	800e98a <_vfiprintf_r+0x19a>
 800e9dc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e9de:	07d9      	lsls	r1, r3, #31
 800e9e0:	d405      	bmi.n	800e9ee <_vfiprintf_r+0x1fe>
 800e9e2:	89ab      	ldrh	r3, [r5, #12]
 800e9e4:	059a      	lsls	r2, r3, #22
 800e9e6:	d402      	bmi.n	800e9ee <_vfiprintf_r+0x1fe>
 800e9e8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e9ea:	f7fd fac3 	bl	800bf74 <__retarget_lock_release_recursive>
 800e9ee:	89ab      	ldrh	r3, [r5, #12]
 800e9f0:	065b      	lsls	r3, r3, #25
 800e9f2:	f53f af1f 	bmi.w	800e834 <_vfiprintf_r+0x44>
 800e9f6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800e9f8:	e71e      	b.n	800e838 <_vfiprintf_r+0x48>
 800e9fa:	ab03      	add	r3, sp, #12
 800e9fc:	9300      	str	r3, [sp, #0]
 800e9fe:	462a      	mov	r2, r5
 800ea00:	4b05      	ldr	r3, [pc, #20]	@ (800ea18 <_vfiprintf_r+0x228>)
 800ea02:	a904      	add	r1, sp, #16
 800ea04:	4630      	mov	r0, r6
 800ea06:	f7fc fca9 	bl	800b35c <_printf_i>
 800ea0a:	e7e4      	b.n	800e9d6 <_vfiprintf_r+0x1e6>
 800ea0c:	08010db5 	.word	0x08010db5
 800ea10:	08010dbf 	.word	0x08010dbf
 800ea14:	0800ae2d 	.word	0x0800ae2d
 800ea18:	0800e7cb 	.word	0x0800e7cb
 800ea1c:	08010dbb 	.word	0x08010dbb

0800ea20 <__sflush_r>:
 800ea20:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800ea24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ea28:	0716      	lsls	r6, r2, #28
 800ea2a:	4605      	mov	r5, r0
 800ea2c:	460c      	mov	r4, r1
 800ea2e:	d454      	bmi.n	800eada <__sflush_r+0xba>
 800ea30:	684b      	ldr	r3, [r1, #4]
 800ea32:	2b00      	cmp	r3, #0
 800ea34:	dc02      	bgt.n	800ea3c <__sflush_r+0x1c>
 800ea36:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800ea38:	2b00      	cmp	r3, #0
 800ea3a:	dd48      	ble.n	800eace <__sflush_r+0xae>
 800ea3c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800ea3e:	2e00      	cmp	r6, #0
 800ea40:	d045      	beq.n	800eace <__sflush_r+0xae>
 800ea42:	2300      	movs	r3, #0
 800ea44:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800ea48:	682f      	ldr	r7, [r5, #0]
 800ea4a:	6a21      	ldr	r1, [r4, #32]
 800ea4c:	602b      	str	r3, [r5, #0]
 800ea4e:	d030      	beq.n	800eab2 <__sflush_r+0x92>
 800ea50:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800ea52:	89a3      	ldrh	r3, [r4, #12]
 800ea54:	0759      	lsls	r1, r3, #29
 800ea56:	d505      	bpl.n	800ea64 <__sflush_r+0x44>
 800ea58:	6863      	ldr	r3, [r4, #4]
 800ea5a:	1ad2      	subs	r2, r2, r3
 800ea5c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800ea5e:	b10b      	cbz	r3, 800ea64 <__sflush_r+0x44>
 800ea60:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800ea62:	1ad2      	subs	r2, r2, r3
 800ea64:	2300      	movs	r3, #0
 800ea66:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800ea68:	6a21      	ldr	r1, [r4, #32]
 800ea6a:	4628      	mov	r0, r5
 800ea6c:	47b0      	blx	r6
 800ea6e:	1c43      	adds	r3, r0, #1
 800ea70:	89a3      	ldrh	r3, [r4, #12]
 800ea72:	d106      	bne.n	800ea82 <__sflush_r+0x62>
 800ea74:	6829      	ldr	r1, [r5, #0]
 800ea76:	291d      	cmp	r1, #29
 800ea78:	d82b      	bhi.n	800ead2 <__sflush_r+0xb2>
 800ea7a:	4a2a      	ldr	r2, [pc, #168]	@ (800eb24 <__sflush_r+0x104>)
 800ea7c:	40ca      	lsrs	r2, r1
 800ea7e:	07d6      	lsls	r6, r2, #31
 800ea80:	d527      	bpl.n	800ead2 <__sflush_r+0xb2>
 800ea82:	2200      	movs	r2, #0
 800ea84:	6062      	str	r2, [r4, #4]
 800ea86:	04d9      	lsls	r1, r3, #19
 800ea88:	6922      	ldr	r2, [r4, #16]
 800ea8a:	6022      	str	r2, [r4, #0]
 800ea8c:	d504      	bpl.n	800ea98 <__sflush_r+0x78>
 800ea8e:	1c42      	adds	r2, r0, #1
 800ea90:	d101      	bne.n	800ea96 <__sflush_r+0x76>
 800ea92:	682b      	ldr	r3, [r5, #0]
 800ea94:	b903      	cbnz	r3, 800ea98 <__sflush_r+0x78>
 800ea96:	6560      	str	r0, [r4, #84]	@ 0x54
 800ea98:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800ea9a:	602f      	str	r7, [r5, #0]
 800ea9c:	b1b9      	cbz	r1, 800eace <__sflush_r+0xae>
 800ea9e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800eaa2:	4299      	cmp	r1, r3
 800eaa4:	d002      	beq.n	800eaac <__sflush_r+0x8c>
 800eaa6:	4628      	mov	r0, r5
 800eaa8:	f7fe f8f2 	bl	800cc90 <_free_r>
 800eaac:	2300      	movs	r3, #0
 800eaae:	6363      	str	r3, [r4, #52]	@ 0x34
 800eab0:	e00d      	b.n	800eace <__sflush_r+0xae>
 800eab2:	2301      	movs	r3, #1
 800eab4:	4628      	mov	r0, r5
 800eab6:	47b0      	blx	r6
 800eab8:	4602      	mov	r2, r0
 800eaba:	1c50      	adds	r0, r2, #1
 800eabc:	d1c9      	bne.n	800ea52 <__sflush_r+0x32>
 800eabe:	682b      	ldr	r3, [r5, #0]
 800eac0:	2b00      	cmp	r3, #0
 800eac2:	d0c6      	beq.n	800ea52 <__sflush_r+0x32>
 800eac4:	2b1d      	cmp	r3, #29
 800eac6:	d001      	beq.n	800eacc <__sflush_r+0xac>
 800eac8:	2b16      	cmp	r3, #22
 800eaca:	d11e      	bne.n	800eb0a <__sflush_r+0xea>
 800eacc:	602f      	str	r7, [r5, #0]
 800eace:	2000      	movs	r0, #0
 800ead0:	e022      	b.n	800eb18 <__sflush_r+0xf8>
 800ead2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ead6:	b21b      	sxth	r3, r3
 800ead8:	e01b      	b.n	800eb12 <__sflush_r+0xf2>
 800eada:	690f      	ldr	r7, [r1, #16]
 800eadc:	2f00      	cmp	r7, #0
 800eade:	d0f6      	beq.n	800eace <__sflush_r+0xae>
 800eae0:	0793      	lsls	r3, r2, #30
 800eae2:	680e      	ldr	r6, [r1, #0]
 800eae4:	bf08      	it	eq
 800eae6:	694b      	ldreq	r3, [r1, #20]
 800eae8:	600f      	str	r7, [r1, #0]
 800eaea:	bf18      	it	ne
 800eaec:	2300      	movne	r3, #0
 800eaee:	eba6 0807 	sub.w	r8, r6, r7
 800eaf2:	608b      	str	r3, [r1, #8]
 800eaf4:	f1b8 0f00 	cmp.w	r8, #0
 800eaf8:	dde9      	ble.n	800eace <__sflush_r+0xae>
 800eafa:	6a21      	ldr	r1, [r4, #32]
 800eafc:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800eafe:	4643      	mov	r3, r8
 800eb00:	463a      	mov	r2, r7
 800eb02:	4628      	mov	r0, r5
 800eb04:	47b0      	blx	r6
 800eb06:	2800      	cmp	r0, #0
 800eb08:	dc08      	bgt.n	800eb1c <__sflush_r+0xfc>
 800eb0a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800eb0e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800eb12:	81a3      	strh	r3, [r4, #12]
 800eb14:	f04f 30ff 	mov.w	r0, #4294967295
 800eb18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800eb1c:	4407      	add	r7, r0
 800eb1e:	eba8 0800 	sub.w	r8, r8, r0
 800eb22:	e7e7      	b.n	800eaf4 <__sflush_r+0xd4>
 800eb24:	20400001 	.word	0x20400001

0800eb28 <_fflush_r>:
 800eb28:	b538      	push	{r3, r4, r5, lr}
 800eb2a:	690b      	ldr	r3, [r1, #16]
 800eb2c:	4605      	mov	r5, r0
 800eb2e:	460c      	mov	r4, r1
 800eb30:	b913      	cbnz	r3, 800eb38 <_fflush_r+0x10>
 800eb32:	2500      	movs	r5, #0
 800eb34:	4628      	mov	r0, r5
 800eb36:	bd38      	pop	{r3, r4, r5, pc}
 800eb38:	b118      	cbz	r0, 800eb42 <_fflush_r+0x1a>
 800eb3a:	6a03      	ldr	r3, [r0, #32]
 800eb3c:	b90b      	cbnz	r3, 800eb42 <_fflush_r+0x1a>
 800eb3e:	f7fc ffc5 	bl	800bacc <__sinit>
 800eb42:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800eb46:	2b00      	cmp	r3, #0
 800eb48:	d0f3      	beq.n	800eb32 <_fflush_r+0xa>
 800eb4a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800eb4c:	07d0      	lsls	r0, r2, #31
 800eb4e:	d404      	bmi.n	800eb5a <_fflush_r+0x32>
 800eb50:	0599      	lsls	r1, r3, #22
 800eb52:	d402      	bmi.n	800eb5a <_fflush_r+0x32>
 800eb54:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800eb56:	f7fd fa0c 	bl	800bf72 <__retarget_lock_acquire_recursive>
 800eb5a:	4628      	mov	r0, r5
 800eb5c:	4621      	mov	r1, r4
 800eb5e:	f7ff ff5f 	bl	800ea20 <__sflush_r>
 800eb62:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800eb64:	07da      	lsls	r2, r3, #31
 800eb66:	4605      	mov	r5, r0
 800eb68:	d4e4      	bmi.n	800eb34 <_fflush_r+0xc>
 800eb6a:	89a3      	ldrh	r3, [r4, #12]
 800eb6c:	059b      	lsls	r3, r3, #22
 800eb6e:	d4e1      	bmi.n	800eb34 <_fflush_r+0xc>
 800eb70:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800eb72:	f7fd f9ff 	bl	800bf74 <__retarget_lock_release_recursive>
 800eb76:	e7dd      	b.n	800eb34 <_fflush_r+0xc>

0800eb78 <fiprintf>:
 800eb78:	b40e      	push	{r1, r2, r3}
 800eb7a:	b503      	push	{r0, r1, lr}
 800eb7c:	4601      	mov	r1, r0
 800eb7e:	ab03      	add	r3, sp, #12
 800eb80:	4805      	ldr	r0, [pc, #20]	@ (800eb98 <fiprintf+0x20>)
 800eb82:	f853 2b04 	ldr.w	r2, [r3], #4
 800eb86:	6800      	ldr	r0, [r0, #0]
 800eb88:	9301      	str	r3, [sp, #4]
 800eb8a:	f7ff fe31 	bl	800e7f0 <_vfiprintf_r>
 800eb8e:	b002      	add	sp, #8
 800eb90:	f85d eb04 	ldr.w	lr, [sp], #4
 800eb94:	b003      	add	sp, #12
 800eb96:	4770      	bx	lr
 800eb98:	2000d140 	.word	0x2000d140

0800eb9c <__swhatbuf_r>:
 800eb9c:	b570      	push	{r4, r5, r6, lr}
 800eb9e:	460c      	mov	r4, r1
 800eba0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800eba4:	2900      	cmp	r1, #0
 800eba6:	b096      	sub	sp, #88	@ 0x58
 800eba8:	4615      	mov	r5, r2
 800ebaa:	461e      	mov	r6, r3
 800ebac:	da0d      	bge.n	800ebca <__swhatbuf_r+0x2e>
 800ebae:	89a3      	ldrh	r3, [r4, #12]
 800ebb0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800ebb4:	f04f 0100 	mov.w	r1, #0
 800ebb8:	bf14      	ite	ne
 800ebba:	2340      	movne	r3, #64	@ 0x40
 800ebbc:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800ebc0:	2000      	movs	r0, #0
 800ebc2:	6031      	str	r1, [r6, #0]
 800ebc4:	602b      	str	r3, [r5, #0]
 800ebc6:	b016      	add	sp, #88	@ 0x58
 800ebc8:	bd70      	pop	{r4, r5, r6, pc}
 800ebca:	466a      	mov	r2, sp
 800ebcc:	f000 f874 	bl	800ecb8 <_fstat_r>
 800ebd0:	2800      	cmp	r0, #0
 800ebd2:	dbec      	blt.n	800ebae <__swhatbuf_r+0x12>
 800ebd4:	9901      	ldr	r1, [sp, #4]
 800ebd6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800ebda:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800ebde:	4259      	negs	r1, r3
 800ebe0:	4159      	adcs	r1, r3
 800ebe2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800ebe6:	e7eb      	b.n	800ebc0 <__swhatbuf_r+0x24>

0800ebe8 <__smakebuf_r>:
 800ebe8:	898b      	ldrh	r3, [r1, #12]
 800ebea:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ebec:	079d      	lsls	r5, r3, #30
 800ebee:	4606      	mov	r6, r0
 800ebf0:	460c      	mov	r4, r1
 800ebf2:	d507      	bpl.n	800ec04 <__smakebuf_r+0x1c>
 800ebf4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800ebf8:	6023      	str	r3, [r4, #0]
 800ebfa:	6123      	str	r3, [r4, #16]
 800ebfc:	2301      	movs	r3, #1
 800ebfe:	6163      	str	r3, [r4, #20]
 800ec00:	b003      	add	sp, #12
 800ec02:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ec04:	ab01      	add	r3, sp, #4
 800ec06:	466a      	mov	r2, sp
 800ec08:	f7ff ffc8 	bl	800eb9c <__swhatbuf_r>
 800ec0c:	9f00      	ldr	r7, [sp, #0]
 800ec0e:	4605      	mov	r5, r0
 800ec10:	4639      	mov	r1, r7
 800ec12:	4630      	mov	r0, r6
 800ec14:	f7fe f8b0 	bl	800cd78 <_malloc_r>
 800ec18:	b948      	cbnz	r0, 800ec2e <__smakebuf_r+0x46>
 800ec1a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ec1e:	059a      	lsls	r2, r3, #22
 800ec20:	d4ee      	bmi.n	800ec00 <__smakebuf_r+0x18>
 800ec22:	f023 0303 	bic.w	r3, r3, #3
 800ec26:	f043 0302 	orr.w	r3, r3, #2
 800ec2a:	81a3      	strh	r3, [r4, #12]
 800ec2c:	e7e2      	b.n	800ebf4 <__smakebuf_r+0xc>
 800ec2e:	89a3      	ldrh	r3, [r4, #12]
 800ec30:	6020      	str	r0, [r4, #0]
 800ec32:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ec36:	81a3      	strh	r3, [r4, #12]
 800ec38:	9b01      	ldr	r3, [sp, #4]
 800ec3a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800ec3e:	b15b      	cbz	r3, 800ec58 <__smakebuf_r+0x70>
 800ec40:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ec44:	4630      	mov	r0, r6
 800ec46:	f000 f849 	bl	800ecdc <_isatty_r>
 800ec4a:	b128      	cbz	r0, 800ec58 <__smakebuf_r+0x70>
 800ec4c:	89a3      	ldrh	r3, [r4, #12]
 800ec4e:	f023 0303 	bic.w	r3, r3, #3
 800ec52:	f043 0301 	orr.w	r3, r3, #1
 800ec56:	81a3      	strh	r3, [r4, #12]
 800ec58:	89a3      	ldrh	r3, [r4, #12]
 800ec5a:	431d      	orrs	r5, r3
 800ec5c:	81a5      	strh	r5, [r4, #12]
 800ec5e:	e7cf      	b.n	800ec00 <__smakebuf_r+0x18>

0800ec60 <memmove>:
 800ec60:	4288      	cmp	r0, r1
 800ec62:	b510      	push	{r4, lr}
 800ec64:	eb01 0402 	add.w	r4, r1, r2
 800ec68:	d902      	bls.n	800ec70 <memmove+0x10>
 800ec6a:	4284      	cmp	r4, r0
 800ec6c:	4623      	mov	r3, r4
 800ec6e:	d807      	bhi.n	800ec80 <memmove+0x20>
 800ec70:	1e43      	subs	r3, r0, #1
 800ec72:	42a1      	cmp	r1, r4
 800ec74:	d008      	beq.n	800ec88 <memmove+0x28>
 800ec76:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ec7a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ec7e:	e7f8      	b.n	800ec72 <memmove+0x12>
 800ec80:	4402      	add	r2, r0
 800ec82:	4601      	mov	r1, r0
 800ec84:	428a      	cmp	r2, r1
 800ec86:	d100      	bne.n	800ec8a <memmove+0x2a>
 800ec88:	bd10      	pop	{r4, pc}
 800ec8a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ec8e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ec92:	e7f7      	b.n	800ec84 <memmove+0x24>

0800ec94 <strncmp>:
 800ec94:	b510      	push	{r4, lr}
 800ec96:	b16a      	cbz	r2, 800ecb4 <strncmp+0x20>
 800ec98:	3901      	subs	r1, #1
 800ec9a:	1884      	adds	r4, r0, r2
 800ec9c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800eca0:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800eca4:	429a      	cmp	r2, r3
 800eca6:	d103      	bne.n	800ecb0 <strncmp+0x1c>
 800eca8:	42a0      	cmp	r0, r4
 800ecaa:	d001      	beq.n	800ecb0 <strncmp+0x1c>
 800ecac:	2a00      	cmp	r2, #0
 800ecae:	d1f5      	bne.n	800ec9c <strncmp+0x8>
 800ecb0:	1ad0      	subs	r0, r2, r3
 800ecb2:	bd10      	pop	{r4, pc}
 800ecb4:	4610      	mov	r0, r2
 800ecb6:	e7fc      	b.n	800ecb2 <strncmp+0x1e>

0800ecb8 <_fstat_r>:
 800ecb8:	b538      	push	{r3, r4, r5, lr}
 800ecba:	4d07      	ldr	r5, [pc, #28]	@ (800ecd8 <_fstat_r+0x20>)
 800ecbc:	2300      	movs	r3, #0
 800ecbe:	4604      	mov	r4, r0
 800ecc0:	4608      	mov	r0, r1
 800ecc2:	4611      	mov	r1, r2
 800ecc4:	602b      	str	r3, [r5, #0]
 800ecc6:	f7f2 f9d9 	bl	800107c <_fstat>
 800ecca:	1c43      	adds	r3, r0, #1
 800eccc:	d102      	bne.n	800ecd4 <_fstat_r+0x1c>
 800ecce:	682b      	ldr	r3, [r5, #0]
 800ecd0:	b103      	cbz	r3, 800ecd4 <_fstat_r+0x1c>
 800ecd2:	6023      	str	r3, [r4, #0]
 800ecd4:	bd38      	pop	{r3, r4, r5, pc}
 800ecd6:	bf00      	nop
 800ecd8:	2001420c 	.word	0x2001420c

0800ecdc <_isatty_r>:
 800ecdc:	b538      	push	{r3, r4, r5, lr}
 800ecde:	4d06      	ldr	r5, [pc, #24]	@ (800ecf8 <_isatty_r+0x1c>)
 800ece0:	2300      	movs	r3, #0
 800ece2:	4604      	mov	r4, r0
 800ece4:	4608      	mov	r0, r1
 800ece6:	602b      	str	r3, [r5, #0]
 800ece8:	f7f2 f9d8 	bl	800109c <_isatty>
 800ecec:	1c43      	adds	r3, r0, #1
 800ecee:	d102      	bne.n	800ecf6 <_isatty_r+0x1a>
 800ecf0:	682b      	ldr	r3, [r5, #0]
 800ecf2:	b103      	cbz	r3, 800ecf6 <_isatty_r+0x1a>
 800ecf4:	6023      	str	r3, [r4, #0]
 800ecf6:	bd38      	pop	{r3, r4, r5, pc}
 800ecf8:	2001420c 	.word	0x2001420c

0800ecfc <_sbrk_r>:
 800ecfc:	b538      	push	{r3, r4, r5, lr}
 800ecfe:	4d06      	ldr	r5, [pc, #24]	@ (800ed18 <_sbrk_r+0x1c>)
 800ed00:	2300      	movs	r3, #0
 800ed02:	4604      	mov	r4, r0
 800ed04:	4608      	mov	r0, r1
 800ed06:	602b      	str	r3, [r5, #0]
 800ed08:	f7f5 ff84 	bl	8004c14 <_sbrk>
 800ed0c:	1c43      	adds	r3, r0, #1
 800ed0e:	d102      	bne.n	800ed16 <_sbrk_r+0x1a>
 800ed10:	682b      	ldr	r3, [r5, #0]
 800ed12:	b103      	cbz	r3, 800ed16 <_sbrk_r+0x1a>
 800ed14:	6023      	str	r3, [r4, #0]
 800ed16:	bd38      	pop	{r3, r4, r5, pc}
 800ed18:	2001420c 	.word	0x2001420c
 800ed1c:	00000000 	.word	0x00000000

0800ed20 <nan>:
 800ed20:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800ed28 <nan+0x8>
 800ed24:	4770      	bx	lr
 800ed26:	bf00      	nop
 800ed28:	00000000 	.word	0x00000000
 800ed2c:	7ff80000 	.word	0x7ff80000

0800ed30 <abort>:
 800ed30:	b508      	push	{r3, lr}
 800ed32:	2006      	movs	r0, #6
 800ed34:	f000 fbc4 	bl	800f4c0 <raise>
 800ed38:	2001      	movs	r0, #1
 800ed3a:	f7f2 f9ed 	bl	8001118 <_exit>

0800ed3e <_calloc_r>:
 800ed3e:	b570      	push	{r4, r5, r6, lr}
 800ed40:	fba1 5402 	umull	r5, r4, r1, r2
 800ed44:	b934      	cbnz	r4, 800ed54 <_calloc_r+0x16>
 800ed46:	4629      	mov	r1, r5
 800ed48:	f7fe f816 	bl	800cd78 <_malloc_r>
 800ed4c:	4606      	mov	r6, r0
 800ed4e:	b928      	cbnz	r0, 800ed5c <_calloc_r+0x1e>
 800ed50:	4630      	mov	r0, r6
 800ed52:	bd70      	pop	{r4, r5, r6, pc}
 800ed54:	220c      	movs	r2, #12
 800ed56:	6002      	str	r2, [r0, #0]
 800ed58:	2600      	movs	r6, #0
 800ed5a:	e7f9      	b.n	800ed50 <_calloc_r+0x12>
 800ed5c:	462a      	mov	r2, r5
 800ed5e:	4621      	mov	r1, r4
 800ed60:	f7fd f88a 	bl	800be78 <memset>
 800ed64:	e7f4      	b.n	800ed50 <_calloc_r+0x12>

0800ed66 <rshift>:
 800ed66:	6903      	ldr	r3, [r0, #16]
 800ed68:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800ed6c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ed70:	ea4f 1261 	mov.w	r2, r1, asr #5
 800ed74:	f100 0414 	add.w	r4, r0, #20
 800ed78:	dd45      	ble.n	800ee06 <rshift+0xa0>
 800ed7a:	f011 011f 	ands.w	r1, r1, #31
 800ed7e:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800ed82:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800ed86:	d10c      	bne.n	800eda2 <rshift+0x3c>
 800ed88:	f100 0710 	add.w	r7, r0, #16
 800ed8c:	4629      	mov	r1, r5
 800ed8e:	42b1      	cmp	r1, r6
 800ed90:	d334      	bcc.n	800edfc <rshift+0x96>
 800ed92:	1a9b      	subs	r3, r3, r2
 800ed94:	009b      	lsls	r3, r3, #2
 800ed96:	1eea      	subs	r2, r5, #3
 800ed98:	4296      	cmp	r6, r2
 800ed9a:	bf38      	it	cc
 800ed9c:	2300      	movcc	r3, #0
 800ed9e:	4423      	add	r3, r4
 800eda0:	e015      	b.n	800edce <rshift+0x68>
 800eda2:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800eda6:	f1c1 0820 	rsb	r8, r1, #32
 800edaa:	40cf      	lsrs	r7, r1
 800edac:	f105 0e04 	add.w	lr, r5, #4
 800edb0:	46a1      	mov	r9, r4
 800edb2:	4576      	cmp	r6, lr
 800edb4:	46f4      	mov	ip, lr
 800edb6:	d815      	bhi.n	800ede4 <rshift+0x7e>
 800edb8:	1a9a      	subs	r2, r3, r2
 800edba:	0092      	lsls	r2, r2, #2
 800edbc:	3a04      	subs	r2, #4
 800edbe:	3501      	adds	r5, #1
 800edc0:	42ae      	cmp	r6, r5
 800edc2:	bf38      	it	cc
 800edc4:	2200      	movcc	r2, #0
 800edc6:	18a3      	adds	r3, r4, r2
 800edc8:	50a7      	str	r7, [r4, r2]
 800edca:	b107      	cbz	r7, 800edce <rshift+0x68>
 800edcc:	3304      	adds	r3, #4
 800edce:	1b1a      	subs	r2, r3, r4
 800edd0:	42a3      	cmp	r3, r4
 800edd2:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800edd6:	bf08      	it	eq
 800edd8:	2300      	moveq	r3, #0
 800edda:	6102      	str	r2, [r0, #16]
 800eddc:	bf08      	it	eq
 800edde:	6143      	streq	r3, [r0, #20]
 800ede0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ede4:	f8dc c000 	ldr.w	ip, [ip]
 800ede8:	fa0c fc08 	lsl.w	ip, ip, r8
 800edec:	ea4c 0707 	orr.w	r7, ip, r7
 800edf0:	f849 7b04 	str.w	r7, [r9], #4
 800edf4:	f85e 7b04 	ldr.w	r7, [lr], #4
 800edf8:	40cf      	lsrs	r7, r1
 800edfa:	e7da      	b.n	800edb2 <rshift+0x4c>
 800edfc:	f851 cb04 	ldr.w	ip, [r1], #4
 800ee00:	f847 cf04 	str.w	ip, [r7, #4]!
 800ee04:	e7c3      	b.n	800ed8e <rshift+0x28>
 800ee06:	4623      	mov	r3, r4
 800ee08:	e7e1      	b.n	800edce <rshift+0x68>

0800ee0a <__hexdig_fun>:
 800ee0a:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800ee0e:	2b09      	cmp	r3, #9
 800ee10:	d802      	bhi.n	800ee18 <__hexdig_fun+0xe>
 800ee12:	3820      	subs	r0, #32
 800ee14:	b2c0      	uxtb	r0, r0
 800ee16:	4770      	bx	lr
 800ee18:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800ee1c:	2b05      	cmp	r3, #5
 800ee1e:	d801      	bhi.n	800ee24 <__hexdig_fun+0x1a>
 800ee20:	3847      	subs	r0, #71	@ 0x47
 800ee22:	e7f7      	b.n	800ee14 <__hexdig_fun+0xa>
 800ee24:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800ee28:	2b05      	cmp	r3, #5
 800ee2a:	d801      	bhi.n	800ee30 <__hexdig_fun+0x26>
 800ee2c:	3827      	subs	r0, #39	@ 0x27
 800ee2e:	e7f1      	b.n	800ee14 <__hexdig_fun+0xa>
 800ee30:	2000      	movs	r0, #0
 800ee32:	4770      	bx	lr

0800ee34 <__gethex>:
 800ee34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ee38:	b085      	sub	sp, #20
 800ee3a:	468a      	mov	sl, r1
 800ee3c:	9302      	str	r3, [sp, #8]
 800ee3e:	680b      	ldr	r3, [r1, #0]
 800ee40:	9001      	str	r0, [sp, #4]
 800ee42:	4690      	mov	r8, r2
 800ee44:	1c9c      	adds	r4, r3, #2
 800ee46:	46a1      	mov	r9, r4
 800ee48:	f814 0b01 	ldrb.w	r0, [r4], #1
 800ee4c:	2830      	cmp	r0, #48	@ 0x30
 800ee4e:	d0fa      	beq.n	800ee46 <__gethex+0x12>
 800ee50:	eba9 0303 	sub.w	r3, r9, r3
 800ee54:	f1a3 0b02 	sub.w	fp, r3, #2
 800ee58:	f7ff ffd7 	bl	800ee0a <__hexdig_fun>
 800ee5c:	4605      	mov	r5, r0
 800ee5e:	2800      	cmp	r0, #0
 800ee60:	d168      	bne.n	800ef34 <__gethex+0x100>
 800ee62:	49a0      	ldr	r1, [pc, #640]	@ (800f0e4 <__gethex+0x2b0>)
 800ee64:	2201      	movs	r2, #1
 800ee66:	4648      	mov	r0, r9
 800ee68:	f7ff ff14 	bl	800ec94 <strncmp>
 800ee6c:	4607      	mov	r7, r0
 800ee6e:	2800      	cmp	r0, #0
 800ee70:	d167      	bne.n	800ef42 <__gethex+0x10e>
 800ee72:	f899 0001 	ldrb.w	r0, [r9, #1]
 800ee76:	4626      	mov	r6, r4
 800ee78:	f7ff ffc7 	bl	800ee0a <__hexdig_fun>
 800ee7c:	2800      	cmp	r0, #0
 800ee7e:	d062      	beq.n	800ef46 <__gethex+0x112>
 800ee80:	4623      	mov	r3, r4
 800ee82:	7818      	ldrb	r0, [r3, #0]
 800ee84:	2830      	cmp	r0, #48	@ 0x30
 800ee86:	4699      	mov	r9, r3
 800ee88:	f103 0301 	add.w	r3, r3, #1
 800ee8c:	d0f9      	beq.n	800ee82 <__gethex+0x4e>
 800ee8e:	f7ff ffbc 	bl	800ee0a <__hexdig_fun>
 800ee92:	fab0 f580 	clz	r5, r0
 800ee96:	096d      	lsrs	r5, r5, #5
 800ee98:	f04f 0b01 	mov.w	fp, #1
 800ee9c:	464a      	mov	r2, r9
 800ee9e:	4616      	mov	r6, r2
 800eea0:	3201      	adds	r2, #1
 800eea2:	7830      	ldrb	r0, [r6, #0]
 800eea4:	f7ff ffb1 	bl	800ee0a <__hexdig_fun>
 800eea8:	2800      	cmp	r0, #0
 800eeaa:	d1f8      	bne.n	800ee9e <__gethex+0x6a>
 800eeac:	498d      	ldr	r1, [pc, #564]	@ (800f0e4 <__gethex+0x2b0>)
 800eeae:	2201      	movs	r2, #1
 800eeb0:	4630      	mov	r0, r6
 800eeb2:	f7ff feef 	bl	800ec94 <strncmp>
 800eeb6:	2800      	cmp	r0, #0
 800eeb8:	d13f      	bne.n	800ef3a <__gethex+0x106>
 800eeba:	b944      	cbnz	r4, 800eece <__gethex+0x9a>
 800eebc:	1c74      	adds	r4, r6, #1
 800eebe:	4622      	mov	r2, r4
 800eec0:	4616      	mov	r6, r2
 800eec2:	3201      	adds	r2, #1
 800eec4:	7830      	ldrb	r0, [r6, #0]
 800eec6:	f7ff ffa0 	bl	800ee0a <__hexdig_fun>
 800eeca:	2800      	cmp	r0, #0
 800eecc:	d1f8      	bne.n	800eec0 <__gethex+0x8c>
 800eece:	1ba4      	subs	r4, r4, r6
 800eed0:	00a7      	lsls	r7, r4, #2
 800eed2:	7833      	ldrb	r3, [r6, #0]
 800eed4:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800eed8:	2b50      	cmp	r3, #80	@ 0x50
 800eeda:	d13e      	bne.n	800ef5a <__gethex+0x126>
 800eedc:	7873      	ldrb	r3, [r6, #1]
 800eede:	2b2b      	cmp	r3, #43	@ 0x2b
 800eee0:	d033      	beq.n	800ef4a <__gethex+0x116>
 800eee2:	2b2d      	cmp	r3, #45	@ 0x2d
 800eee4:	d034      	beq.n	800ef50 <__gethex+0x11c>
 800eee6:	1c71      	adds	r1, r6, #1
 800eee8:	2400      	movs	r4, #0
 800eeea:	7808      	ldrb	r0, [r1, #0]
 800eeec:	f7ff ff8d 	bl	800ee0a <__hexdig_fun>
 800eef0:	1e43      	subs	r3, r0, #1
 800eef2:	b2db      	uxtb	r3, r3
 800eef4:	2b18      	cmp	r3, #24
 800eef6:	d830      	bhi.n	800ef5a <__gethex+0x126>
 800eef8:	f1a0 0210 	sub.w	r2, r0, #16
 800eefc:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800ef00:	f7ff ff83 	bl	800ee0a <__hexdig_fun>
 800ef04:	f100 3cff 	add.w	ip, r0, #4294967295
 800ef08:	fa5f fc8c 	uxtb.w	ip, ip
 800ef0c:	f1bc 0f18 	cmp.w	ip, #24
 800ef10:	f04f 030a 	mov.w	r3, #10
 800ef14:	d91e      	bls.n	800ef54 <__gethex+0x120>
 800ef16:	b104      	cbz	r4, 800ef1a <__gethex+0xe6>
 800ef18:	4252      	negs	r2, r2
 800ef1a:	4417      	add	r7, r2
 800ef1c:	f8ca 1000 	str.w	r1, [sl]
 800ef20:	b1ed      	cbz	r5, 800ef5e <__gethex+0x12a>
 800ef22:	f1bb 0f00 	cmp.w	fp, #0
 800ef26:	bf0c      	ite	eq
 800ef28:	2506      	moveq	r5, #6
 800ef2a:	2500      	movne	r5, #0
 800ef2c:	4628      	mov	r0, r5
 800ef2e:	b005      	add	sp, #20
 800ef30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ef34:	2500      	movs	r5, #0
 800ef36:	462c      	mov	r4, r5
 800ef38:	e7b0      	b.n	800ee9c <__gethex+0x68>
 800ef3a:	2c00      	cmp	r4, #0
 800ef3c:	d1c7      	bne.n	800eece <__gethex+0x9a>
 800ef3e:	4627      	mov	r7, r4
 800ef40:	e7c7      	b.n	800eed2 <__gethex+0x9e>
 800ef42:	464e      	mov	r6, r9
 800ef44:	462f      	mov	r7, r5
 800ef46:	2501      	movs	r5, #1
 800ef48:	e7c3      	b.n	800eed2 <__gethex+0x9e>
 800ef4a:	2400      	movs	r4, #0
 800ef4c:	1cb1      	adds	r1, r6, #2
 800ef4e:	e7cc      	b.n	800eeea <__gethex+0xb6>
 800ef50:	2401      	movs	r4, #1
 800ef52:	e7fb      	b.n	800ef4c <__gethex+0x118>
 800ef54:	fb03 0002 	mla	r0, r3, r2, r0
 800ef58:	e7ce      	b.n	800eef8 <__gethex+0xc4>
 800ef5a:	4631      	mov	r1, r6
 800ef5c:	e7de      	b.n	800ef1c <__gethex+0xe8>
 800ef5e:	eba6 0309 	sub.w	r3, r6, r9
 800ef62:	3b01      	subs	r3, #1
 800ef64:	4629      	mov	r1, r5
 800ef66:	2b07      	cmp	r3, #7
 800ef68:	dc0a      	bgt.n	800ef80 <__gethex+0x14c>
 800ef6a:	9801      	ldr	r0, [sp, #4]
 800ef6c:	f7fd ff90 	bl	800ce90 <_Balloc>
 800ef70:	4604      	mov	r4, r0
 800ef72:	b940      	cbnz	r0, 800ef86 <__gethex+0x152>
 800ef74:	4b5c      	ldr	r3, [pc, #368]	@ (800f0e8 <__gethex+0x2b4>)
 800ef76:	4602      	mov	r2, r0
 800ef78:	21e4      	movs	r1, #228	@ 0xe4
 800ef7a:	485c      	ldr	r0, [pc, #368]	@ (800f0ec <__gethex+0x2b8>)
 800ef7c:	f7fd f810 	bl	800bfa0 <__assert_func>
 800ef80:	3101      	adds	r1, #1
 800ef82:	105b      	asrs	r3, r3, #1
 800ef84:	e7ef      	b.n	800ef66 <__gethex+0x132>
 800ef86:	f100 0a14 	add.w	sl, r0, #20
 800ef8a:	2300      	movs	r3, #0
 800ef8c:	4655      	mov	r5, sl
 800ef8e:	469b      	mov	fp, r3
 800ef90:	45b1      	cmp	r9, r6
 800ef92:	d337      	bcc.n	800f004 <__gethex+0x1d0>
 800ef94:	f845 bb04 	str.w	fp, [r5], #4
 800ef98:	eba5 050a 	sub.w	r5, r5, sl
 800ef9c:	10ad      	asrs	r5, r5, #2
 800ef9e:	6125      	str	r5, [r4, #16]
 800efa0:	4658      	mov	r0, fp
 800efa2:	f7fe f867 	bl	800d074 <__hi0bits>
 800efa6:	016d      	lsls	r5, r5, #5
 800efa8:	f8d8 6000 	ldr.w	r6, [r8]
 800efac:	1a2d      	subs	r5, r5, r0
 800efae:	42b5      	cmp	r5, r6
 800efb0:	dd54      	ble.n	800f05c <__gethex+0x228>
 800efb2:	1bad      	subs	r5, r5, r6
 800efb4:	4629      	mov	r1, r5
 800efb6:	4620      	mov	r0, r4
 800efb8:	f7fe fbf3 	bl	800d7a2 <__any_on>
 800efbc:	4681      	mov	r9, r0
 800efbe:	b178      	cbz	r0, 800efe0 <__gethex+0x1ac>
 800efc0:	1e6b      	subs	r3, r5, #1
 800efc2:	1159      	asrs	r1, r3, #5
 800efc4:	f003 021f 	and.w	r2, r3, #31
 800efc8:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800efcc:	f04f 0901 	mov.w	r9, #1
 800efd0:	fa09 f202 	lsl.w	r2, r9, r2
 800efd4:	420a      	tst	r2, r1
 800efd6:	d003      	beq.n	800efe0 <__gethex+0x1ac>
 800efd8:	454b      	cmp	r3, r9
 800efda:	dc36      	bgt.n	800f04a <__gethex+0x216>
 800efdc:	f04f 0902 	mov.w	r9, #2
 800efe0:	4629      	mov	r1, r5
 800efe2:	4620      	mov	r0, r4
 800efe4:	f7ff febf 	bl	800ed66 <rshift>
 800efe8:	442f      	add	r7, r5
 800efea:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800efee:	42bb      	cmp	r3, r7
 800eff0:	da42      	bge.n	800f078 <__gethex+0x244>
 800eff2:	9801      	ldr	r0, [sp, #4]
 800eff4:	4621      	mov	r1, r4
 800eff6:	f7fd ff8b 	bl	800cf10 <_Bfree>
 800effa:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800effc:	2300      	movs	r3, #0
 800effe:	6013      	str	r3, [r2, #0]
 800f000:	25a3      	movs	r5, #163	@ 0xa3
 800f002:	e793      	b.n	800ef2c <__gethex+0xf8>
 800f004:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800f008:	2a2e      	cmp	r2, #46	@ 0x2e
 800f00a:	d012      	beq.n	800f032 <__gethex+0x1fe>
 800f00c:	2b20      	cmp	r3, #32
 800f00e:	d104      	bne.n	800f01a <__gethex+0x1e6>
 800f010:	f845 bb04 	str.w	fp, [r5], #4
 800f014:	f04f 0b00 	mov.w	fp, #0
 800f018:	465b      	mov	r3, fp
 800f01a:	7830      	ldrb	r0, [r6, #0]
 800f01c:	9303      	str	r3, [sp, #12]
 800f01e:	f7ff fef4 	bl	800ee0a <__hexdig_fun>
 800f022:	9b03      	ldr	r3, [sp, #12]
 800f024:	f000 000f 	and.w	r0, r0, #15
 800f028:	4098      	lsls	r0, r3
 800f02a:	ea4b 0b00 	orr.w	fp, fp, r0
 800f02e:	3304      	adds	r3, #4
 800f030:	e7ae      	b.n	800ef90 <__gethex+0x15c>
 800f032:	45b1      	cmp	r9, r6
 800f034:	d8ea      	bhi.n	800f00c <__gethex+0x1d8>
 800f036:	492b      	ldr	r1, [pc, #172]	@ (800f0e4 <__gethex+0x2b0>)
 800f038:	9303      	str	r3, [sp, #12]
 800f03a:	2201      	movs	r2, #1
 800f03c:	4630      	mov	r0, r6
 800f03e:	f7ff fe29 	bl	800ec94 <strncmp>
 800f042:	9b03      	ldr	r3, [sp, #12]
 800f044:	2800      	cmp	r0, #0
 800f046:	d1e1      	bne.n	800f00c <__gethex+0x1d8>
 800f048:	e7a2      	b.n	800ef90 <__gethex+0x15c>
 800f04a:	1ea9      	subs	r1, r5, #2
 800f04c:	4620      	mov	r0, r4
 800f04e:	f7fe fba8 	bl	800d7a2 <__any_on>
 800f052:	2800      	cmp	r0, #0
 800f054:	d0c2      	beq.n	800efdc <__gethex+0x1a8>
 800f056:	f04f 0903 	mov.w	r9, #3
 800f05a:	e7c1      	b.n	800efe0 <__gethex+0x1ac>
 800f05c:	da09      	bge.n	800f072 <__gethex+0x23e>
 800f05e:	1b75      	subs	r5, r6, r5
 800f060:	4621      	mov	r1, r4
 800f062:	9801      	ldr	r0, [sp, #4]
 800f064:	462a      	mov	r2, r5
 800f066:	f7fe f963 	bl	800d330 <__lshift>
 800f06a:	1b7f      	subs	r7, r7, r5
 800f06c:	4604      	mov	r4, r0
 800f06e:	f100 0a14 	add.w	sl, r0, #20
 800f072:	f04f 0900 	mov.w	r9, #0
 800f076:	e7b8      	b.n	800efea <__gethex+0x1b6>
 800f078:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800f07c:	42bd      	cmp	r5, r7
 800f07e:	dd6f      	ble.n	800f160 <__gethex+0x32c>
 800f080:	1bed      	subs	r5, r5, r7
 800f082:	42ae      	cmp	r6, r5
 800f084:	dc34      	bgt.n	800f0f0 <__gethex+0x2bc>
 800f086:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800f08a:	2b02      	cmp	r3, #2
 800f08c:	d022      	beq.n	800f0d4 <__gethex+0x2a0>
 800f08e:	2b03      	cmp	r3, #3
 800f090:	d024      	beq.n	800f0dc <__gethex+0x2a8>
 800f092:	2b01      	cmp	r3, #1
 800f094:	d115      	bne.n	800f0c2 <__gethex+0x28e>
 800f096:	42ae      	cmp	r6, r5
 800f098:	d113      	bne.n	800f0c2 <__gethex+0x28e>
 800f09a:	2e01      	cmp	r6, #1
 800f09c:	d10b      	bne.n	800f0b6 <__gethex+0x282>
 800f09e:	9a02      	ldr	r2, [sp, #8]
 800f0a0:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800f0a4:	6013      	str	r3, [r2, #0]
 800f0a6:	2301      	movs	r3, #1
 800f0a8:	6123      	str	r3, [r4, #16]
 800f0aa:	f8ca 3000 	str.w	r3, [sl]
 800f0ae:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f0b0:	2562      	movs	r5, #98	@ 0x62
 800f0b2:	601c      	str	r4, [r3, #0]
 800f0b4:	e73a      	b.n	800ef2c <__gethex+0xf8>
 800f0b6:	1e71      	subs	r1, r6, #1
 800f0b8:	4620      	mov	r0, r4
 800f0ba:	f7fe fb72 	bl	800d7a2 <__any_on>
 800f0be:	2800      	cmp	r0, #0
 800f0c0:	d1ed      	bne.n	800f09e <__gethex+0x26a>
 800f0c2:	9801      	ldr	r0, [sp, #4]
 800f0c4:	4621      	mov	r1, r4
 800f0c6:	f7fd ff23 	bl	800cf10 <_Bfree>
 800f0ca:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800f0cc:	2300      	movs	r3, #0
 800f0ce:	6013      	str	r3, [r2, #0]
 800f0d0:	2550      	movs	r5, #80	@ 0x50
 800f0d2:	e72b      	b.n	800ef2c <__gethex+0xf8>
 800f0d4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f0d6:	2b00      	cmp	r3, #0
 800f0d8:	d1f3      	bne.n	800f0c2 <__gethex+0x28e>
 800f0da:	e7e0      	b.n	800f09e <__gethex+0x26a>
 800f0dc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f0de:	2b00      	cmp	r3, #0
 800f0e0:	d1dd      	bne.n	800f09e <__gethex+0x26a>
 800f0e2:	e7ee      	b.n	800f0c2 <__gethex+0x28e>
 800f0e4:	08010db3 	.word	0x08010db3
 800f0e8:	08010d49 	.word	0x08010d49
 800f0ec:	08010dce 	.word	0x08010dce
 800f0f0:	1e6f      	subs	r7, r5, #1
 800f0f2:	f1b9 0f00 	cmp.w	r9, #0
 800f0f6:	d130      	bne.n	800f15a <__gethex+0x326>
 800f0f8:	b127      	cbz	r7, 800f104 <__gethex+0x2d0>
 800f0fa:	4639      	mov	r1, r7
 800f0fc:	4620      	mov	r0, r4
 800f0fe:	f7fe fb50 	bl	800d7a2 <__any_on>
 800f102:	4681      	mov	r9, r0
 800f104:	117a      	asrs	r2, r7, #5
 800f106:	2301      	movs	r3, #1
 800f108:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800f10c:	f007 071f 	and.w	r7, r7, #31
 800f110:	40bb      	lsls	r3, r7
 800f112:	4213      	tst	r3, r2
 800f114:	4629      	mov	r1, r5
 800f116:	4620      	mov	r0, r4
 800f118:	bf18      	it	ne
 800f11a:	f049 0902 	orrne.w	r9, r9, #2
 800f11e:	f7ff fe22 	bl	800ed66 <rshift>
 800f122:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800f126:	1b76      	subs	r6, r6, r5
 800f128:	2502      	movs	r5, #2
 800f12a:	f1b9 0f00 	cmp.w	r9, #0
 800f12e:	d047      	beq.n	800f1c0 <__gethex+0x38c>
 800f130:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800f134:	2b02      	cmp	r3, #2
 800f136:	d015      	beq.n	800f164 <__gethex+0x330>
 800f138:	2b03      	cmp	r3, #3
 800f13a:	d017      	beq.n	800f16c <__gethex+0x338>
 800f13c:	2b01      	cmp	r3, #1
 800f13e:	d109      	bne.n	800f154 <__gethex+0x320>
 800f140:	f019 0f02 	tst.w	r9, #2
 800f144:	d006      	beq.n	800f154 <__gethex+0x320>
 800f146:	f8da 3000 	ldr.w	r3, [sl]
 800f14a:	ea49 0903 	orr.w	r9, r9, r3
 800f14e:	f019 0f01 	tst.w	r9, #1
 800f152:	d10e      	bne.n	800f172 <__gethex+0x33e>
 800f154:	f045 0510 	orr.w	r5, r5, #16
 800f158:	e032      	b.n	800f1c0 <__gethex+0x38c>
 800f15a:	f04f 0901 	mov.w	r9, #1
 800f15e:	e7d1      	b.n	800f104 <__gethex+0x2d0>
 800f160:	2501      	movs	r5, #1
 800f162:	e7e2      	b.n	800f12a <__gethex+0x2f6>
 800f164:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f166:	f1c3 0301 	rsb	r3, r3, #1
 800f16a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800f16c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f16e:	2b00      	cmp	r3, #0
 800f170:	d0f0      	beq.n	800f154 <__gethex+0x320>
 800f172:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800f176:	f104 0314 	add.w	r3, r4, #20
 800f17a:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800f17e:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800f182:	f04f 0c00 	mov.w	ip, #0
 800f186:	4618      	mov	r0, r3
 800f188:	f853 2b04 	ldr.w	r2, [r3], #4
 800f18c:	f1b2 3fff 	cmp.w	r2, #4294967295
 800f190:	d01b      	beq.n	800f1ca <__gethex+0x396>
 800f192:	3201      	adds	r2, #1
 800f194:	6002      	str	r2, [r0, #0]
 800f196:	2d02      	cmp	r5, #2
 800f198:	f104 0314 	add.w	r3, r4, #20
 800f19c:	d13c      	bne.n	800f218 <__gethex+0x3e4>
 800f19e:	f8d8 2000 	ldr.w	r2, [r8]
 800f1a2:	3a01      	subs	r2, #1
 800f1a4:	42b2      	cmp	r2, r6
 800f1a6:	d109      	bne.n	800f1bc <__gethex+0x388>
 800f1a8:	1171      	asrs	r1, r6, #5
 800f1aa:	2201      	movs	r2, #1
 800f1ac:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800f1b0:	f006 061f 	and.w	r6, r6, #31
 800f1b4:	fa02 f606 	lsl.w	r6, r2, r6
 800f1b8:	421e      	tst	r6, r3
 800f1ba:	d13a      	bne.n	800f232 <__gethex+0x3fe>
 800f1bc:	f045 0520 	orr.w	r5, r5, #32
 800f1c0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f1c2:	601c      	str	r4, [r3, #0]
 800f1c4:	9b02      	ldr	r3, [sp, #8]
 800f1c6:	601f      	str	r7, [r3, #0]
 800f1c8:	e6b0      	b.n	800ef2c <__gethex+0xf8>
 800f1ca:	4299      	cmp	r1, r3
 800f1cc:	f843 cc04 	str.w	ip, [r3, #-4]
 800f1d0:	d8d9      	bhi.n	800f186 <__gethex+0x352>
 800f1d2:	68a3      	ldr	r3, [r4, #8]
 800f1d4:	459b      	cmp	fp, r3
 800f1d6:	db17      	blt.n	800f208 <__gethex+0x3d4>
 800f1d8:	6861      	ldr	r1, [r4, #4]
 800f1da:	9801      	ldr	r0, [sp, #4]
 800f1dc:	3101      	adds	r1, #1
 800f1de:	f7fd fe57 	bl	800ce90 <_Balloc>
 800f1e2:	4681      	mov	r9, r0
 800f1e4:	b918      	cbnz	r0, 800f1ee <__gethex+0x3ba>
 800f1e6:	4b1a      	ldr	r3, [pc, #104]	@ (800f250 <__gethex+0x41c>)
 800f1e8:	4602      	mov	r2, r0
 800f1ea:	2184      	movs	r1, #132	@ 0x84
 800f1ec:	e6c5      	b.n	800ef7a <__gethex+0x146>
 800f1ee:	6922      	ldr	r2, [r4, #16]
 800f1f0:	3202      	adds	r2, #2
 800f1f2:	f104 010c 	add.w	r1, r4, #12
 800f1f6:	0092      	lsls	r2, r2, #2
 800f1f8:	300c      	adds	r0, #12
 800f1fa:	f7fc febc 	bl	800bf76 <memcpy>
 800f1fe:	4621      	mov	r1, r4
 800f200:	9801      	ldr	r0, [sp, #4]
 800f202:	f7fd fe85 	bl	800cf10 <_Bfree>
 800f206:	464c      	mov	r4, r9
 800f208:	6923      	ldr	r3, [r4, #16]
 800f20a:	1c5a      	adds	r2, r3, #1
 800f20c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800f210:	6122      	str	r2, [r4, #16]
 800f212:	2201      	movs	r2, #1
 800f214:	615a      	str	r2, [r3, #20]
 800f216:	e7be      	b.n	800f196 <__gethex+0x362>
 800f218:	6922      	ldr	r2, [r4, #16]
 800f21a:	455a      	cmp	r2, fp
 800f21c:	dd0b      	ble.n	800f236 <__gethex+0x402>
 800f21e:	2101      	movs	r1, #1
 800f220:	4620      	mov	r0, r4
 800f222:	f7ff fda0 	bl	800ed66 <rshift>
 800f226:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800f22a:	3701      	adds	r7, #1
 800f22c:	42bb      	cmp	r3, r7
 800f22e:	f6ff aee0 	blt.w	800eff2 <__gethex+0x1be>
 800f232:	2501      	movs	r5, #1
 800f234:	e7c2      	b.n	800f1bc <__gethex+0x388>
 800f236:	f016 061f 	ands.w	r6, r6, #31
 800f23a:	d0fa      	beq.n	800f232 <__gethex+0x3fe>
 800f23c:	4453      	add	r3, sl
 800f23e:	f1c6 0620 	rsb	r6, r6, #32
 800f242:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800f246:	f7fd ff15 	bl	800d074 <__hi0bits>
 800f24a:	42b0      	cmp	r0, r6
 800f24c:	dbe7      	blt.n	800f21e <__gethex+0x3ea>
 800f24e:	e7f0      	b.n	800f232 <__gethex+0x3fe>
 800f250:	08010d49 	.word	0x08010d49

0800f254 <L_shift>:
 800f254:	f1c2 0208 	rsb	r2, r2, #8
 800f258:	0092      	lsls	r2, r2, #2
 800f25a:	b570      	push	{r4, r5, r6, lr}
 800f25c:	f1c2 0620 	rsb	r6, r2, #32
 800f260:	6843      	ldr	r3, [r0, #4]
 800f262:	6804      	ldr	r4, [r0, #0]
 800f264:	fa03 f506 	lsl.w	r5, r3, r6
 800f268:	432c      	orrs	r4, r5
 800f26a:	40d3      	lsrs	r3, r2
 800f26c:	6004      	str	r4, [r0, #0]
 800f26e:	f840 3f04 	str.w	r3, [r0, #4]!
 800f272:	4288      	cmp	r0, r1
 800f274:	d3f4      	bcc.n	800f260 <L_shift+0xc>
 800f276:	bd70      	pop	{r4, r5, r6, pc}

0800f278 <__match>:
 800f278:	b530      	push	{r4, r5, lr}
 800f27a:	6803      	ldr	r3, [r0, #0]
 800f27c:	3301      	adds	r3, #1
 800f27e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f282:	b914      	cbnz	r4, 800f28a <__match+0x12>
 800f284:	6003      	str	r3, [r0, #0]
 800f286:	2001      	movs	r0, #1
 800f288:	bd30      	pop	{r4, r5, pc}
 800f28a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f28e:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800f292:	2d19      	cmp	r5, #25
 800f294:	bf98      	it	ls
 800f296:	3220      	addls	r2, #32
 800f298:	42a2      	cmp	r2, r4
 800f29a:	d0f0      	beq.n	800f27e <__match+0x6>
 800f29c:	2000      	movs	r0, #0
 800f29e:	e7f3      	b.n	800f288 <__match+0x10>

0800f2a0 <__hexnan>:
 800f2a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f2a4:	680b      	ldr	r3, [r1, #0]
 800f2a6:	6801      	ldr	r1, [r0, #0]
 800f2a8:	115e      	asrs	r6, r3, #5
 800f2aa:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800f2ae:	f013 031f 	ands.w	r3, r3, #31
 800f2b2:	b087      	sub	sp, #28
 800f2b4:	bf18      	it	ne
 800f2b6:	3604      	addne	r6, #4
 800f2b8:	2500      	movs	r5, #0
 800f2ba:	1f37      	subs	r7, r6, #4
 800f2bc:	4682      	mov	sl, r0
 800f2be:	4690      	mov	r8, r2
 800f2c0:	9301      	str	r3, [sp, #4]
 800f2c2:	f846 5c04 	str.w	r5, [r6, #-4]
 800f2c6:	46b9      	mov	r9, r7
 800f2c8:	463c      	mov	r4, r7
 800f2ca:	9502      	str	r5, [sp, #8]
 800f2cc:	46ab      	mov	fp, r5
 800f2ce:	784a      	ldrb	r2, [r1, #1]
 800f2d0:	1c4b      	adds	r3, r1, #1
 800f2d2:	9303      	str	r3, [sp, #12]
 800f2d4:	b342      	cbz	r2, 800f328 <__hexnan+0x88>
 800f2d6:	4610      	mov	r0, r2
 800f2d8:	9105      	str	r1, [sp, #20]
 800f2da:	9204      	str	r2, [sp, #16]
 800f2dc:	f7ff fd95 	bl	800ee0a <__hexdig_fun>
 800f2e0:	2800      	cmp	r0, #0
 800f2e2:	d151      	bne.n	800f388 <__hexnan+0xe8>
 800f2e4:	9a04      	ldr	r2, [sp, #16]
 800f2e6:	9905      	ldr	r1, [sp, #20]
 800f2e8:	2a20      	cmp	r2, #32
 800f2ea:	d818      	bhi.n	800f31e <__hexnan+0x7e>
 800f2ec:	9b02      	ldr	r3, [sp, #8]
 800f2ee:	459b      	cmp	fp, r3
 800f2f0:	dd13      	ble.n	800f31a <__hexnan+0x7a>
 800f2f2:	454c      	cmp	r4, r9
 800f2f4:	d206      	bcs.n	800f304 <__hexnan+0x64>
 800f2f6:	2d07      	cmp	r5, #7
 800f2f8:	dc04      	bgt.n	800f304 <__hexnan+0x64>
 800f2fa:	462a      	mov	r2, r5
 800f2fc:	4649      	mov	r1, r9
 800f2fe:	4620      	mov	r0, r4
 800f300:	f7ff ffa8 	bl	800f254 <L_shift>
 800f304:	4544      	cmp	r4, r8
 800f306:	d952      	bls.n	800f3ae <__hexnan+0x10e>
 800f308:	2300      	movs	r3, #0
 800f30a:	f1a4 0904 	sub.w	r9, r4, #4
 800f30e:	f844 3c04 	str.w	r3, [r4, #-4]
 800f312:	f8cd b008 	str.w	fp, [sp, #8]
 800f316:	464c      	mov	r4, r9
 800f318:	461d      	mov	r5, r3
 800f31a:	9903      	ldr	r1, [sp, #12]
 800f31c:	e7d7      	b.n	800f2ce <__hexnan+0x2e>
 800f31e:	2a29      	cmp	r2, #41	@ 0x29
 800f320:	d157      	bne.n	800f3d2 <__hexnan+0x132>
 800f322:	3102      	adds	r1, #2
 800f324:	f8ca 1000 	str.w	r1, [sl]
 800f328:	f1bb 0f00 	cmp.w	fp, #0
 800f32c:	d051      	beq.n	800f3d2 <__hexnan+0x132>
 800f32e:	454c      	cmp	r4, r9
 800f330:	d206      	bcs.n	800f340 <__hexnan+0xa0>
 800f332:	2d07      	cmp	r5, #7
 800f334:	dc04      	bgt.n	800f340 <__hexnan+0xa0>
 800f336:	462a      	mov	r2, r5
 800f338:	4649      	mov	r1, r9
 800f33a:	4620      	mov	r0, r4
 800f33c:	f7ff ff8a 	bl	800f254 <L_shift>
 800f340:	4544      	cmp	r4, r8
 800f342:	d936      	bls.n	800f3b2 <__hexnan+0x112>
 800f344:	f1a8 0204 	sub.w	r2, r8, #4
 800f348:	4623      	mov	r3, r4
 800f34a:	f853 1b04 	ldr.w	r1, [r3], #4
 800f34e:	f842 1f04 	str.w	r1, [r2, #4]!
 800f352:	429f      	cmp	r7, r3
 800f354:	d2f9      	bcs.n	800f34a <__hexnan+0xaa>
 800f356:	1b3b      	subs	r3, r7, r4
 800f358:	f023 0303 	bic.w	r3, r3, #3
 800f35c:	3304      	adds	r3, #4
 800f35e:	3401      	adds	r4, #1
 800f360:	3e03      	subs	r6, #3
 800f362:	42b4      	cmp	r4, r6
 800f364:	bf88      	it	hi
 800f366:	2304      	movhi	r3, #4
 800f368:	4443      	add	r3, r8
 800f36a:	2200      	movs	r2, #0
 800f36c:	f843 2b04 	str.w	r2, [r3], #4
 800f370:	429f      	cmp	r7, r3
 800f372:	d2fb      	bcs.n	800f36c <__hexnan+0xcc>
 800f374:	683b      	ldr	r3, [r7, #0]
 800f376:	b91b      	cbnz	r3, 800f380 <__hexnan+0xe0>
 800f378:	4547      	cmp	r7, r8
 800f37a:	d128      	bne.n	800f3ce <__hexnan+0x12e>
 800f37c:	2301      	movs	r3, #1
 800f37e:	603b      	str	r3, [r7, #0]
 800f380:	2005      	movs	r0, #5
 800f382:	b007      	add	sp, #28
 800f384:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f388:	3501      	adds	r5, #1
 800f38a:	2d08      	cmp	r5, #8
 800f38c:	f10b 0b01 	add.w	fp, fp, #1
 800f390:	dd06      	ble.n	800f3a0 <__hexnan+0x100>
 800f392:	4544      	cmp	r4, r8
 800f394:	d9c1      	bls.n	800f31a <__hexnan+0x7a>
 800f396:	2300      	movs	r3, #0
 800f398:	f844 3c04 	str.w	r3, [r4, #-4]
 800f39c:	2501      	movs	r5, #1
 800f39e:	3c04      	subs	r4, #4
 800f3a0:	6822      	ldr	r2, [r4, #0]
 800f3a2:	f000 000f 	and.w	r0, r0, #15
 800f3a6:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800f3aa:	6020      	str	r0, [r4, #0]
 800f3ac:	e7b5      	b.n	800f31a <__hexnan+0x7a>
 800f3ae:	2508      	movs	r5, #8
 800f3b0:	e7b3      	b.n	800f31a <__hexnan+0x7a>
 800f3b2:	9b01      	ldr	r3, [sp, #4]
 800f3b4:	2b00      	cmp	r3, #0
 800f3b6:	d0dd      	beq.n	800f374 <__hexnan+0xd4>
 800f3b8:	f1c3 0320 	rsb	r3, r3, #32
 800f3bc:	f04f 32ff 	mov.w	r2, #4294967295
 800f3c0:	40da      	lsrs	r2, r3
 800f3c2:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800f3c6:	4013      	ands	r3, r2
 800f3c8:	f846 3c04 	str.w	r3, [r6, #-4]
 800f3cc:	e7d2      	b.n	800f374 <__hexnan+0xd4>
 800f3ce:	3f04      	subs	r7, #4
 800f3d0:	e7d0      	b.n	800f374 <__hexnan+0xd4>
 800f3d2:	2004      	movs	r0, #4
 800f3d4:	e7d5      	b.n	800f382 <__hexnan+0xe2>

0800f3d6 <__ascii_mbtowc>:
 800f3d6:	b082      	sub	sp, #8
 800f3d8:	b901      	cbnz	r1, 800f3dc <__ascii_mbtowc+0x6>
 800f3da:	a901      	add	r1, sp, #4
 800f3dc:	b142      	cbz	r2, 800f3f0 <__ascii_mbtowc+0x1a>
 800f3de:	b14b      	cbz	r3, 800f3f4 <__ascii_mbtowc+0x1e>
 800f3e0:	7813      	ldrb	r3, [r2, #0]
 800f3e2:	600b      	str	r3, [r1, #0]
 800f3e4:	7812      	ldrb	r2, [r2, #0]
 800f3e6:	1e10      	subs	r0, r2, #0
 800f3e8:	bf18      	it	ne
 800f3ea:	2001      	movne	r0, #1
 800f3ec:	b002      	add	sp, #8
 800f3ee:	4770      	bx	lr
 800f3f0:	4610      	mov	r0, r2
 800f3f2:	e7fb      	b.n	800f3ec <__ascii_mbtowc+0x16>
 800f3f4:	f06f 0001 	mvn.w	r0, #1
 800f3f8:	e7f8      	b.n	800f3ec <__ascii_mbtowc+0x16>

0800f3fa <_realloc_r>:
 800f3fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f3fe:	4607      	mov	r7, r0
 800f400:	4614      	mov	r4, r2
 800f402:	460d      	mov	r5, r1
 800f404:	b921      	cbnz	r1, 800f410 <_realloc_r+0x16>
 800f406:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f40a:	4611      	mov	r1, r2
 800f40c:	f7fd bcb4 	b.w	800cd78 <_malloc_r>
 800f410:	b92a      	cbnz	r2, 800f41e <_realloc_r+0x24>
 800f412:	f7fd fc3d 	bl	800cc90 <_free_r>
 800f416:	4625      	mov	r5, r4
 800f418:	4628      	mov	r0, r5
 800f41a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f41e:	f000 f86b 	bl	800f4f8 <_malloc_usable_size_r>
 800f422:	4284      	cmp	r4, r0
 800f424:	4606      	mov	r6, r0
 800f426:	d802      	bhi.n	800f42e <_realloc_r+0x34>
 800f428:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800f42c:	d8f4      	bhi.n	800f418 <_realloc_r+0x1e>
 800f42e:	4621      	mov	r1, r4
 800f430:	4638      	mov	r0, r7
 800f432:	f7fd fca1 	bl	800cd78 <_malloc_r>
 800f436:	4680      	mov	r8, r0
 800f438:	b908      	cbnz	r0, 800f43e <_realloc_r+0x44>
 800f43a:	4645      	mov	r5, r8
 800f43c:	e7ec      	b.n	800f418 <_realloc_r+0x1e>
 800f43e:	42b4      	cmp	r4, r6
 800f440:	4622      	mov	r2, r4
 800f442:	4629      	mov	r1, r5
 800f444:	bf28      	it	cs
 800f446:	4632      	movcs	r2, r6
 800f448:	f7fc fd95 	bl	800bf76 <memcpy>
 800f44c:	4629      	mov	r1, r5
 800f44e:	4638      	mov	r0, r7
 800f450:	f7fd fc1e 	bl	800cc90 <_free_r>
 800f454:	e7f1      	b.n	800f43a <_realloc_r+0x40>

0800f456 <__ascii_wctomb>:
 800f456:	4603      	mov	r3, r0
 800f458:	4608      	mov	r0, r1
 800f45a:	b141      	cbz	r1, 800f46e <__ascii_wctomb+0x18>
 800f45c:	2aff      	cmp	r2, #255	@ 0xff
 800f45e:	d904      	bls.n	800f46a <__ascii_wctomb+0x14>
 800f460:	228a      	movs	r2, #138	@ 0x8a
 800f462:	601a      	str	r2, [r3, #0]
 800f464:	f04f 30ff 	mov.w	r0, #4294967295
 800f468:	4770      	bx	lr
 800f46a:	700a      	strb	r2, [r1, #0]
 800f46c:	2001      	movs	r0, #1
 800f46e:	4770      	bx	lr

0800f470 <_raise_r>:
 800f470:	291f      	cmp	r1, #31
 800f472:	b538      	push	{r3, r4, r5, lr}
 800f474:	4605      	mov	r5, r0
 800f476:	460c      	mov	r4, r1
 800f478:	d904      	bls.n	800f484 <_raise_r+0x14>
 800f47a:	2316      	movs	r3, #22
 800f47c:	6003      	str	r3, [r0, #0]
 800f47e:	f04f 30ff 	mov.w	r0, #4294967295
 800f482:	bd38      	pop	{r3, r4, r5, pc}
 800f484:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800f486:	b112      	cbz	r2, 800f48e <_raise_r+0x1e>
 800f488:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800f48c:	b94b      	cbnz	r3, 800f4a2 <_raise_r+0x32>
 800f48e:	4628      	mov	r0, r5
 800f490:	f000 f830 	bl	800f4f4 <_getpid_r>
 800f494:	4622      	mov	r2, r4
 800f496:	4601      	mov	r1, r0
 800f498:	4628      	mov	r0, r5
 800f49a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f49e:	f000 b817 	b.w	800f4d0 <_kill_r>
 800f4a2:	2b01      	cmp	r3, #1
 800f4a4:	d00a      	beq.n	800f4bc <_raise_r+0x4c>
 800f4a6:	1c59      	adds	r1, r3, #1
 800f4a8:	d103      	bne.n	800f4b2 <_raise_r+0x42>
 800f4aa:	2316      	movs	r3, #22
 800f4ac:	6003      	str	r3, [r0, #0]
 800f4ae:	2001      	movs	r0, #1
 800f4b0:	e7e7      	b.n	800f482 <_raise_r+0x12>
 800f4b2:	2100      	movs	r1, #0
 800f4b4:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800f4b8:	4620      	mov	r0, r4
 800f4ba:	4798      	blx	r3
 800f4bc:	2000      	movs	r0, #0
 800f4be:	e7e0      	b.n	800f482 <_raise_r+0x12>

0800f4c0 <raise>:
 800f4c0:	4b02      	ldr	r3, [pc, #8]	@ (800f4cc <raise+0xc>)
 800f4c2:	4601      	mov	r1, r0
 800f4c4:	6818      	ldr	r0, [r3, #0]
 800f4c6:	f7ff bfd3 	b.w	800f470 <_raise_r>
 800f4ca:	bf00      	nop
 800f4cc:	2000d140 	.word	0x2000d140

0800f4d0 <_kill_r>:
 800f4d0:	b538      	push	{r3, r4, r5, lr}
 800f4d2:	4d07      	ldr	r5, [pc, #28]	@ (800f4f0 <_kill_r+0x20>)
 800f4d4:	2300      	movs	r3, #0
 800f4d6:	4604      	mov	r4, r0
 800f4d8:	4608      	mov	r0, r1
 800f4da:	4611      	mov	r1, r2
 800f4dc:	602b      	str	r3, [r5, #0]
 800f4de:	f7f1 fe0b 	bl	80010f8 <_kill>
 800f4e2:	1c43      	adds	r3, r0, #1
 800f4e4:	d102      	bne.n	800f4ec <_kill_r+0x1c>
 800f4e6:	682b      	ldr	r3, [r5, #0]
 800f4e8:	b103      	cbz	r3, 800f4ec <_kill_r+0x1c>
 800f4ea:	6023      	str	r3, [r4, #0]
 800f4ec:	bd38      	pop	{r3, r4, r5, pc}
 800f4ee:	bf00      	nop
 800f4f0:	2001420c 	.word	0x2001420c

0800f4f4 <_getpid_r>:
 800f4f4:	f7f1 bdf8 	b.w	80010e8 <_getpid>

0800f4f8 <_malloc_usable_size_r>:
 800f4f8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f4fc:	1f18      	subs	r0, r3, #4
 800f4fe:	2b00      	cmp	r3, #0
 800f500:	bfbc      	itt	lt
 800f502:	580b      	ldrlt	r3, [r1, r0]
 800f504:	18c0      	addlt	r0, r0, r3
 800f506:	4770      	bx	lr

0800f508 <_init>:
 800f508:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f50a:	bf00      	nop
 800f50c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f50e:	bc08      	pop	{r3}
 800f510:	469e      	mov	lr, r3
 800f512:	4770      	bx	lr

0800f514 <_fini>:
 800f514:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f516:	bf00      	nop
 800f518:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f51a:	bc08      	pop	{r3}
 800f51c:	469e      	mov	lr, r3
 800f51e:	4770      	bx	lr
